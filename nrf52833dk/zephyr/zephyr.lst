
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	80 ba 00 20 95 68 01 00 5b 73 02 00 4d 68 01 00     ... .h..[s..Mh..
  10:	4d 68 01 00 4d 68 01 00 4d 68 01 00 00 00 00 00     Mh..Mh..Mh......
	...
  2c:	79 59 01 00 4d 68 01 00 00 00 00 00 21 59 01 00     yY..Mh......!Y..
  3c:	4d 68 01 00                                         Mh..

00000040 <_irq_vector_table>:
  40:	51 5a 01 00 99 b9 02 00 51 5a 01 00 51 5a 01 00     QZ......QZ..QZ..
  50:	51 5a 01 00 51 5a 01 00 51 5a 01 00 51 5a 01 00     QZ..QZ..QZ..QZ..
  60:	61 b9 02 00 51 5a 01 00 51 5a 01 00 7f b9 02 00     a...QZ..QZ......
  70:	51 5a 01 00 51 5a 01 00 51 5a 01 00 51 5a 01 00     QZ..QZ..QZ..QZ..
  80:	51 5a 01 00 51 5a 01 00 51 5a 01 00 51 5a 01 00     QZ..QZ..QZ..QZ..
  90:	51 5a 01 00 51 5a 01 00 51 5a 01 00 51 5a 01 00     QZ..QZ..QZ..QZ..
  a0:	51 5a 01 00 51 5a 01 00 51 5a 01 00 51 5a 01 00     QZ..QZ..QZ..QZ..
  b0:	51 5a 01 00 51 5a 01 00 51 5a 01 00 51 5a 01 00     QZ..QZ..QZ..QZ..
  c0:	51 5a 01 00 51 5a 01 00 51 5a 01 00 51 5a 01 00     QZ..QZ..QZ..QZ..
  d0:	51 5a 01 00 51 5a 01 00 51 5a 01 00 51 5a 01 00     QZ..QZ..QZ..QZ..
  e0:	51 5a 01 00 51 5a 01 00 51 5a 01 00 51 5a 01 00     QZ..QZ..QZ..QZ..
  f0:	51 5a 01 00 51 5a 01 00 51 5a 01 00 51 5a 01 00     QZ..QZ..QZ..QZ..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f00c faea 	bl	c6f8 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <ocrypto_bigint_add256>:
     134:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     138:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     13c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     140:	185b      	adds	r3, r3, r1
     142:	eb54 040c 	adcs.w	r4, r4, ip
     146:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     14a:	414d      	adcs	r5, r1
     14c:	eb56 060c 	adcs.w	r6, r6, ip
     150:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     154:	414f      	adcs	r7, r1
     156:	eb58 080c 	adcs.w	r8, r8, ip
     15a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     15e:	eb59 0901 	adcs.w	r9, r9, r1
     162:	eb5a 0a0c 	adcs.w	sl, sl, ip
     166:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     16a:	4180      	sbcs	r0, r0
     16c:	3001      	adds	r0, #1
     16e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     172:	4770      	bx	lr

00000174 <ocrypto_bigint_sub256>:
     174:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     178:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     17c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     180:	1a5b      	subs	r3, r3, r1
     182:	eb74 040c 	sbcs.w	r4, r4, ip
     186:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     18a:	418d      	sbcs	r5, r1
     18c:	eb76 060c 	sbcs.w	r6, r6, ip
     190:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     194:	418f      	sbcs	r7, r1
     196:	eb78 080c 	sbcs.w	r8, r8, ip
     19a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     19e:	eb79 0901 	sbcs.w	r9, r9, r1
     1a2:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     1a6:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     1aa:	4180      	sbcs	r0, r0
     1ac:	4240      	negs	r0, r0
     1ae:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1b2:	4770      	bx	lr

000001b4 <ocrypto_bigint_cadd256>:
     1b4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1b8:	4252      	negs	r2, r2
     1ba:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1be:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1c2:	4017      	ands	r7, r2
     1c4:	19db      	adds	r3, r3, r7
     1c6:	ea18 0802 	ands.w	r8, r8, r2
     1ca:	eb54 0408 	adcs.w	r4, r4, r8
     1ce:	ea19 0902 	ands.w	r9, r9, r2
     1d2:	eb55 0509 	adcs.w	r5, r5, r9
     1d6:	ea1a 0a02 	ands.w	sl, sl, r2
     1da:	eb56 060a 	adcs.w	r6, r6, sl
     1de:	c078      	stmia	r0!, {r3, r4, r5, r6}
     1e0:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1e4:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1e8:	4017      	ands	r7, r2
     1ea:	417b      	adcs	r3, r7
     1ec:	ea18 0802 	ands.w	r8, r8, r2
     1f0:	eb54 0408 	adcs.w	r4, r4, r8
     1f4:	ea19 0902 	ands.w	r9, r9, r2
     1f8:	eb55 0509 	adcs.w	r5, r5, r9
     1fc:	ea1a 0a02 	ands.w	sl, sl, r2
     200:	eb56 060a 	adcs.w	r6, r6, sl
     204:	c078      	stmia	r0!, {r3, r4, r5, r6}
     206:	4180      	sbcs	r0, r0
     208:	3001      	adds	r0, #1
     20a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     20e:	4770      	bx	lr

00000210 <ocrypto_bigint_csub256>:
     210:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     214:	4252      	negs	r2, r2
     216:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     21a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     21e:	4017      	ands	r7, r2
     220:	1bdb      	subs	r3, r3, r7
     222:	ea18 0802 	ands.w	r8, r8, r2
     226:	eb74 0408 	sbcs.w	r4, r4, r8
     22a:	ea19 0902 	ands.w	r9, r9, r2
     22e:	eb75 0509 	sbcs.w	r5, r5, r9
     232:	ea1a 0a02 	ands.w	sl, sl, r2
     236:	eb76 060a 	sbcs.w	r6, r6, sl
     23a:	c078      	stmia	r0!, {r3, r4, r5, r6}
     23c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     240:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     244:	4017      	ands	r7, r2
     246:	41bb      	sbcs	r3, r7
     248:	ea18 0802 	ands.w	r8, r8, r2
     24c:	eb74 0408 	sbcs.w	r4, r4, r8
     250:	ea19 0902 	ands.w	r9, r9, r2
     254:	eb75 0509 	sbcs.w	r5, r5, r9
     258:	ea1a 0a02 	ands.w	sl, sl, r2
     25c:	eb76 060a 	sbcs.w	r6, r6, sl
     260:	c078      	stmia	r0!, {r3, r4, r5, r6}
     262:	4180      	sbcs	r0, r0
     264:	4240      	negs	r0, r0
     266:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     26a:	4770      	bx	lr

0000026c <ocrypto_bigint_cswap256>:
     26c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
     270:	4252      	negs	r2, r2
     272:	f04f 0804 	mov.w	r8, #4

00000276 <cswap256_loop>:
     276:	e890 0030 	ldmia.w	r0, {r4, r5}
     27a:	e891 00c0 	ldmia.w	r1, {r6, r7}
     27e:	1ba3      	subs	r3, r4, r6
     280:	4013      	ands	r3, r2
     282:	1ae4      	subs	r4, r4, r3
     284:	18f6      	adds	r6, r6, r3
     286:	1beb      	subs	r3, r5, r7
     288:	4013      	ands	r3, r2
     28a:	1aed      	subs	r5, r5, r3
     28c:	18ff      	adds	r7, r7, r3
     28e:	c030      	stmia	r0!, {r4, r5}
     290:	c1c0      	stmia	r1!, {r6, r7}
     292:	f1b8 0801 	subs.w	r8, r8, #1
     296:	d1ee      	bne.n	276 <cswap256_loop>
     298:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
     29c:	4770      	bx	lr
     29e:	bf00      	nop

000002a0 <ocrypto_mul256_noframe>:
     2a0:	b500      	push	{lr}
     2a2:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
     2a6:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
     2aa:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
     2ae:	b402      	push	{r1}
     2b0:	fba7 5102 	umull	r5, r1, r7, r2
     2b4:	950a      	str	r5, [sp, #40]	; 0x28
     2b6:	fba8 0b02 	umull	r0, fp, r8, r2
     2ba:	fbe7 1063 	umaal	r1, r0, r7, r3
     2be:	fbe9 b062 	umaal	fp, r0, r9, r2
     2c2:	910b      	str	r1, [sp, #44]	; 0x2c
     2c4:	fba8 5103 	umull	r5, r1, r8, r3
     2c8:	fbea 0162 	umaal	r0, r1, sl, r2
     2cc:	fbe7 b564 	umaal	fp, r5, r7, r4
     2d0:	fbe7 0566 	umaal	r0, r5, r7, r6
     2d4:	fbe8 1566 	umaal	r1, r5, r8, r6
     2d8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
     2dc:	fba9 b603 	umull	fp, r6, r9, r3
     2e0:	fbea 1663 	umaal	r1, r6, sl, r3
     2e4:	fbec 5663 	umaal	r5, r6, ip, r3
     2e8:	fbe8 0b64 	umaal	r0, fp, r8, r4
     2ec:	fbe9 1b64 	umaal	r1, fp, r9, r4
     2f0:	fbea 5b64 	umaal	r5, fp, sl, r4
     2f4:	fbec 6b64 	umaal	r6, fp, ip, r4
     2f8:	900d      	str	r0, [sp, #52]	; 0x34
     2fa:	fbac 3002 	umull	r3, r0, ip, r2
     2fe:	9c05      	ldr	r4, [sp, #20]
     300:	fbee 5062 	umaal	r5, r0, lr, r2
     304:	fbe9 6064 	umaal	r6, r0, r9, r4
     308:	fbea b064 	umaal	fp, r0, sl, r4
     30c:	fbe7 3164 	umaal	r3, r1, r7, r4
     310:	fbe8 5164 	umaal	r5, r1, r8, r4
     314:	9c06      	ldr	r4, [sp, #24]
     316:	fbe8 6164 	umaal	r6, r1, r8, r4
     31a:	fbe9 b164 	umaal	fp, r1, r9, r4
     31e:	fbea 0164 	umaal	r0, r1, sl, r4
     322:	930e      	str	r3, [sp, #56]	; 0x38
     324:	fba7 3204 	umull	r3, r2, r7, r4
     328:	9c07      	ldr	r4, [sp, #28]
     32a:	fbe7 6264 	umaal	r6, r2, r7, r4
     32e:	fbe8 b264 	umaal	fp, r2, r8, r4
     332:	fbe9 0264 	umaal	r0, r2, r9, r4
     336:	fbea 1264 	umaal	r1, r2, sl, r4
     33a:	9c04      	ldr	r4, [sp, #16]
     33c:	fbe9 5364 	umaal	r5, r3, r9, r4
     340:	fbea 6364 	umaal	r6, r3, sl, r4
     344:	9c08      	ldr	r4, [sp, #32]
     346:	fbe7 b364 	umaal	fp, r3, r7, r4
     34a:	fbe8 0364 	umaal	r0, r3, r8, r4
     34e:	fbe9 1364 	umaal	r1, r3, r9, r4
     352:	fbea 2364 	umaal	r2, r3, sl, r4
     356:	950f      	str	r5, [sp, #60]	; 0x3c
     358:	f85d 9b04 	ldr.w	r9, [sp], #4
     35c:	e899 0600 	ldmia.w	r9, {r9, sl}
     360:	f8dd 8000 	ldr.w	r8, [sp]
     364:	fba9 5408 	umull	r5, r4, r9, r8
     368:	fbea b468 	umaal	fp, r4, sl, r8
     36c:	f8dd 8010 	ldr.w	r8, [sp, #16]
     370:	fbec 0468 	umaal	r0, r4, ip, r8
     374:	fbee 1468 	umaal	r1, r4, lr, r8
     378:	fbe9 2468 	umaal	r2, r4, r9, r8
     37c:	fbea 3468 	umaal	r3, r4, sl, r8
     380:	f8dd 8004 	ldr.w	r8, [sp, #4]
     384:	fbee 6568 	umaal	r6, r5, lr, r8
     388:	fbe9 b568 	umaal	fp, r5, r9, r8
     38c:	fbea 0568 	umaal	r0, r5, sl, r8
     390:	f8dd 8014 	ldr.w	r8, [sp, #20]
     394:	fbec 1568 	umaal	r1, r5, ip, r8
     398:	fbee 2568 	umaal	r2, r5, lr, r8
     39c:	fbe9 3568 	umaal	r3, r5, r9, r8
     3a0:	fbea 4568 	umaal	r4, r5, sl, r8
     3a4:	960f      	str	r6, [sp, #60]	; 0x3c
     3a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
     3aa:	fbae 7608 	umull	r7, r6, lr, r8
     3ae:	fbe9 0668 	umaal	r0, r6, r9, r8
     3b2:	fbea 1668 	umaal	r1, r6, sl, r8
     3b6:	f8dd 8018 	ldr.w	r8, [sp, #24]
     3ba:	fbec 2668 	umaal	r2, r6, ip, r8
     3be:	fbee 3668 	umaal	r3, r6, lr, r8
     3c2:	fbe9 4668 	umaal	r4, r6, r9, r8
     3c6:	fbea 5668 	umaal	r5, r6, sl, r8
     3ca:	f8dd 800c 	ldr.w	r8, [sp, #12]
     3ce:	fbec b768 	umaal	fp, r7, ip, r8
     3d2:	fbee 0768 	umaal	r0, r7, lr, r8
     3d6:	fbe9 1768 	umaal	r1, r7, r9, r8
     3da:	fbea 2768 	umaal	r2, r7, sl, r8
     3de:	f8dd 801c 	ldr.w	r8, [sp, #28]
     3e2:	fbec 3768 	umaal	r3, r7, ip, r8
     3e6:	fbee 4768 	umaal	r4, r7, lr, r8
     3ea:	fbe9 5768 	umaal	r5, r7, r9, r8
     3ee:	fbea 6768 	umaal	r6, r7, sl, r8
     3f2:	b008      	add	sp, #32
     3f4:	bd00      	pop	{pc}
     3f6:	bf00      	nop

000003f8 <ocrypto_bigint_mul256>:
     3f8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3fc:	b087      	sub	sp, #28
     3fe:	f7ff ff4f 	bl	2a0 <ocrypto_mul256_noframe>
     402:	f8dd 801c 	ldr.w	r8, [sp, #28]
     406:	f108 0820 	add.w	r8, r8, #32
     40a:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     40e:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     410:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000418 <ocrypto_sqr256_noframe>:
     418:	b500      	push	{lr}
     41a:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
     41e:	fba3 5203 	umull	r5, r2, r3, r3
     422:	9501      	str	r5, [sp, #4]
     424:	fba3 0104 	umull	r0, r1, r3, r4
     428:	fbe3 2064 	umaal	r2, r0, r3, r4
     42c:	fbe3 1067 	umaal	r1, r0, r3, r7
     430:	9202      	str	r2, [sp, #8]
     432:	fba3 5207 	umull	r5, r2, r3, r7
     436:	fbe3 0268 	umaal	r0, r2, r3, r8
     43a:	fbe4 1564 	umaal	r1, r5, r4, r4
     43e:	fbe3 0568 	umaal	r0, r5, r3, r8
     442:	fbe3 2569 	umaal	r2, r5, r3, r9
     446:	9103      	str	r1, [sp, #12]
     448:	fba4 b607 	umull	fp, r6, r4, r7
     44c:	fbe3 2669 	umaal	r2, r6, r3, r9
     450:	fbe3 566a 	umaal	r5, r6, r3, sl
     454:	fbe4 0b67 	umaal	r0, fp, r4, r7
     458:	fbe4 2b68 	umaal	r2, fp, r4, r8
     45c:	fbe3 5b6a 	umaal	r5, fp, r3, sl
     460:	fbe3 6b6c 	umaal	r6, fp, r3, ip
     464:	9004      	str	r0, [sp, #16]
     466:	fba4 1008 	umull	r1, r0, r4, r8
     46a:	fbe4 5069 	umaal	r5, r0, r4, r9
     46e:	fbe3 606c 	umaal	r6, r0, r3, ip
     472:	fbe3 b06e 	umaal	fp, r0, r3, lr
     476:	fbe7 2167 	umaal	r2, r1, r7, r7
     47a:	fbe4 5169 	umaal	r5, r1, r4, r9
     47e:	fbe4 616a 	umaal	r6, r1, r4, sl
     482:	fbe3 b16e 	umaal	fp, r1, r3, lr
     486:	fbe4 016e 	umaal	r0, r1, r4, lr
     48a:	9205      	str	r2, [sp, #20]
     48c:	fba7 3208 	umull	r3, r2, r7, r8
     490:	fbe4 626a 	umaal	r6, r2, r4, sl
     494:	fbe4 b26c 	umaal	fp, r2, r4, ip
     498:	fbe4 026e 	umaal	r0, r2, r4, lr
     49c:	fbe7 126e 	umaal	r1, r2, r7, lr
     4a0:	fbe7 5368 	umaal	r5, r3, r7, r8
     4a4:	fbe7 6369 	umaal	r6, r3, r7, r9
     4a8:	fbe4 b36c 	umaal	fp, r3, r4, ip
     4ac:	fbe7 036c 	umaal	r0, r3, r7, ip
     4b0:	fbe7 136e 	umaal	r1, r3, r7, lr
     4b4:	fbe8 236e 	umaal	r2, r3, r8, lr
     4b8:	9506      	str	r5, [sp, #24]
     4ba:	fba7 5409 	umull	r5, r4, r7, r9
     4be:	fbe7 b46a 	umaal	fp, r4, r7, sl
     4c2:	fbe7 046c 	umaal	r0, r4, r7, ip
     4c6:	fbe8 146c 	umaal	r1, r4, r8, ip
     4ca:	fbe8 246e 	umaal	r2, r4, r8, lr
     4ce:	fbe9 346e 	umaal	r3, r4, r9, lr
     4d2:	fbe8 6568 	umaal	r6, r5, r8, r8
     4d6:	fbe7 b56a 	umaal	fp, r5, r7, sl
     4da:	fbe8 056a 	umaal	r0, r5, r8, sl
     4de:	fbe8 156c 	umaal	r1, r5, r8, ip
     4e2:	fbe9 256c 	umaal	r2, r5, r9, ip
     4e6:	fbe9 356e 	umaal	r3, r5, r9, lr
     4ea:	fbea 456e 	umaal	r4, r5, sl, lr
     4ee:	9607      	str	r6, [sp, #28]
     4f0:	fba8 7609 	umull	r7, r6, r8, r9
     4f4:	fbe8 066a 	umaal	r0, r6, r8, sl
     4f8:	fbe9 166a 	umaal	r1, r6, r9, sl
     4fc:	fbe9 266c 	umaal	r2, r6, r9, ip
     500:	fbea 366c 	umaal	r3, r6, sl, ip
     504:	fbea 466e 	umaal	r4, r6, sl, lr
     508:	fbec 566e 	umaal	r5, r6, ip, lr
     50c:	fbe8 b769 	umaal	fp, r7, r8, r9
     510:	fbe9 0769 	umaal	r0, r7, r9, r9
     514:	fbe9 176a 	umaal	r1, r7, r9, sl
     518:	fbea 276a 	umaal	r2, r7, sl, sl
     51c:	fbea 376c 	umaal	r3, r7, sl, ip
     520:	fbec 476c 	umaal	r4, r7, ip, ip
     524:	fbec 576e 	umaal	r5, r7, ip, lr
     528:	fbee 676e 	umaal	r6, r7, lr, lr
     52c:	bd00      	pop	{pc}
     52e:	bf00      	nop

00000530 <ocrypto_bigint_sqr256>:
     530:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     534:	b087      	sub	sp, #28
     536:	f7ff ff6f 	bl	418 <ocrypto_sqr256_noframe>
     53a:	f8dd 801c 	ldr.w	r8, [sp, #28]
     53e:	f108 0820 	add.w	r8, r8, #32
     542:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     546:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     548:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000550 <ocrypto_constant_time_equal>:
     550:	b430      	push	{r4, r5}
     552:	f04f 0300 	mov.w	r3, #0

00000556 <constant_time_equal_loop>:
     556:	f810 4b01 	ldrb.w	r4, [r0], #1
     55a:	f811 5b01 	ldrb.w	r5, [r1], #1
     55e:	3a01      	subs	r2, #1
     560:	ea84 0405 	eor.w	r4, r4, r5
     564:	ea43 0304 	orr.w	r3, r3, r4
     568:	d1f5      	bne.n	556 <constant_time_equal_loop>
     56a:	f1a3 0301 	sub.w	r3, r3, #1
     56e:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     572:	bc30      	pop	{r4, r5}
     574:	4770      	bx	lr
     576:	bf00      	nop

00000578 <ocrypto_constant_time_is_zero>:
     578:	f04f 0300 	mov.w	r3, #0

0000057c <constant_time_is_zero_loop>:
     57c:	f810 2b01 	ldrb.w	r2, [r0], #1
     580:	3901      	subs	r1, #1
     582:	ea43 0302 	orr.w	r3, r3, r2
     586:	d1f9      	bne.n	57c <constant_time_is_zero_loop>
     588:	f1a3 0301 	sub.w	r3, r3, #1
     58c:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     590:	4770      	bx	lr
     592:	bf00      	nop

00000594 <ocrypto_constant_time_xor>:
     594:	b430      	push	{r4, r5}

00000596 <constant_time_xor_loop>:
     596:	f811 4b01 	ldrb.w	r4, [r1], #1
     59a:	f812 5b01 	ldrb.w	r5, [r2], #1
     59e:	406c      	eors	r4, r5
     5a0:	f800 4b01 	strb.w	r4, [r0], #1
     5a4:	3b01      	subs	r3, #1
     5a6:	d1f6      	bne.n	596 <constant_time_xor_loop>
     5a8:	bc30      	pop	{r4, r5}
     5aa:	4770      	bx	lr

000005ac <ocrypto_mod_p256_add>:
     5ac:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     5b0:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     5b4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5b8:	185b      	adds	r3, r3, r1
     5ba:	eb54 040c 	adcs.w	r4, r4, ip
     5be:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5c2:	414d      	adcs	r5, r1
     5c4:	eb56 060c 	adcs.w	r6, r6, ip
     5c8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5cc:	414f      	adcs	r7, r1
     5ce:	eb58 080c 	adcs.w	r8, r8, ip
     5d2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5d6:	eb59 0901 	adcs.w	r9, r9, r1
     5da:	eb5a 0a0c 	adcs.w	sl, sl, ip
     5de:	4189      	sbcs	r1, r1
     5e0:	f1b3 33ff 	subs.w	r3, r3, #4294967295
     5e4:	f174 34ff 	sbcs.w	r4, r4, #4294967295
     5e8:	f175 35ff 	sbcs.w	r5, r5, #4294967295
     5ec:	f176 0600 	sbcs.w	r6, r6, #0
     5f0:	f177 0700 	sbcs.w	r7, r7, #0
     5f4:	f178 0800 	sbcs.w	r8, r8, #0
     5f8:	f179 0901 	sbcs.w	r9, r9, #1
     5fc:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
     600:	f151 0100 	adcs.w	r1, r1, #0
     604:	185b      	adds	r3, r3, r1
     606:	414c      	adcs	r4, r1
     608:	414d      	adcs	r5, r1
     60a:	f156 0600 	adcs.w	r6, r6, #0
     60e:	f157 0700 	adcs.w	r7, r7, #0
     612:	f158 0800 	adcs.w	r8, r8, #0
     616:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     61a:	eb5a 0a01 	adcs.w	sl, sl, r1
     61e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     622:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     626:	4770      	bx	lr

00000628 <ocrypto_mod_p256_sub>:
     628:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     62c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     630:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     634:	1a5b      	subs	r3, r3, r1
     636:	eb74 040c 	sbcs.w	r4, r4, ip
     63a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     63e:	418d      	sbcs	r5, r1
     640:	eb76 060c 	sbcs.w	r6, r6, ip
     644:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     648:	418f      	sbcs	r7, r1
     64a:	eb78 080c 	sbcs.w	r8, r8, ip
     64e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     652:	eb79 0901 	sbcs.w	r9, r9, r1
     656:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     65a:	4189      	sbcs	r1, r1
     65c:	185b      	adds	r3, r3, r1
     65e:	414c      	adcs	r4, r1
     660:	414d      	adcs	r5, r1
     662:	f156 0600 	adcs.w	r6, r6, #0
     666:	f157 0700 	adcs.w	r7, r7, #0
     66a:	f158 0800 	adcs.w	r8, r8, #0
     66e:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     672:	eb5a 0a01 	adcs.w	sl, sl, r1
     676:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     67a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     67e:	4770      	bx	lr

00000680 <mul_reduce>:
     680:	eb18 0804 	adds.w	r8, r8, r4
     684:	eb59 0905 	adcs.w	r9, r9, r5
     688:	eb5a 0a06 	adcs.w	sl, sl, r6
     68c:	eb5b 0b07 	adcs.w	fp, fp, r7
     690:	f05f 0c00 	movs.w	ip, #0
     694:	f14c 0c00 	adc.w	ip, ip, #0
     698:	eb18 0805 	adds.w	r8, r8, r5
     69c:	eb59 0906 	adcs.w	r9, r9, r6
     6a0:	eb5a 0a07 	adcs.w	sl, sl, r7
     6a4:	eb5b 0b07 	adcs.w	fp, fp, r7
     6a8:	eb50 000c 	adcs.w	r0, r0, ip
     6ac:	f05f 0c00 	movs.w	ip, #0
     6b0:	eb51 010c 	adcs.w	r1, r1, ip
     6b4:	eb52 020c 	adcs.w	r2, r2, ip
     6b8:	4163      	adcs	r3, r4
     6ba:	f14c 0c00 	adc.w	ip, ip, #0
     6be:	ebb8 0807 	subs.w	r8, r8, r7
     6c2:	f179 0900 	sbcs.w	r9, r9, #0
     6c6:	f17a 0a00 	sbcs.w	sl, sl, #0
     6ca:	eb7b 0b04 	sbcs.w	fp, fp, r4
     6ce:	41a8      	sbcs	r0, r5
     6d0:	41b1      	sbcs	r1, r6
     6d2:	41a2      	sbcs	r2, r4
     6d4:	41b3      	sbcs	r3, r6
     6d6:	f16c 0c00 	sbc.w	ip, ip, #0
     6da:	ebbb 0b05 	subs.w	fp, fp, r5
     6de:	41b0      	sbcs	r0, r6
     6e0:	41b9      	sbcs	r1, r7
     6e2:	41aa      	sbcs	r2, r5
     6e4:	41bb      	sbcs	r3, r7
     6e6:	f16c 0c00 	sbc.w	ip, ip, #0
     6ea:	ea6f 74ec 	mvn.w	r4, ip, asr #31
     6ee:	ebb8 0804 	subs.w	r8, r8, r4
     6f2:	eb79 0904 	sbcs.w	r9, r9, r4
     6f6:	eb7a 0a04 	sbcs.w	sl, sl, r4
     6fa:	f17b 0b00 	sbcs.w	fp, fp, #0
     6fe:	f170 0000 	sbcs.w	r0, r0, #0
     702:	f171 0100 	sbcs.w	r1, r1, #0
     706:	eb72 72d4 	sbcs.w	r2, r2, r4, lsr #31
     70a:	41a3      	sbcs	r3, r4
     70c:	f16c 0c00 	sbc.w	ip, ip, #0
     710:	eb18 78ec 	adds.w	r8, r8, ip, asr #31
     714:	eb59 79ec 	adcs.w	r9, r9, ip, asr #31
     718:	eb5a 7aec 	adcs.w	sl, sl, ip, asr #31
     71c:	f15b 0b00 	adcs.w	fp, fp, #0
     720:	f150 0400 	adcs.w	r4, r0, #0
     724:	f151 0500 	adcs.w	r5, r1, #0
     728:	eb52 76dc 	adcs.w	r6, r2, ip, lsr #31
     72c:	eb53 77ec 	adcs.w	r7, r3, ip, asr #31
     730:	f14c 0c00 	adc.w	ip, ip, #0
     734:	eb18 70ec 	adds.w	r0, r8, ip, asr #31
     738:	eb59 71ec 	adcs.w	r1, r9, ip, asr #31
     73c:	eb5a 72ec 	adcs.w	r2, sl, ip, asr #31
     740:	f15b 0300 	adcs.w	r3, fp, #0
     744:	f154 0400 	adcs.w	r4, r4, #0
     748:	f155 0500 	adcs.w	r5, r5, #0
     74c:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
     750:	eb57 77ec 	adcs.w	r7, r7, ip, asr #31
     754:	4770      	bx	lr
     756:	bf00      	nop

00000758 <ocrypto_mod_p256_mul>:
     758:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     75c:	b087      	sub	sp, #28
     75e:	f7ff fd9f 	bl	2a0 <ocrypto_mul256_noframe>
     762:	f8dd 8010 	ldr.w	r8, [sp, #16]
     766:	f8dd 9014 	ldr.w	r9, [sp, #20]
     76a:	f8dd a018 	ldr.w	sl, [sp, #24]
     76e:	f7ff ff87 	bl	680 <mul_reduce>
     772:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     776:	f7ff ff83 	bl	680 <mul_reduce>
     77a:	b003      	add	sp, #12
     77c:	f85d 8b04 	ldr.w	r8, [sp], #4
     780:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000788 <ocrypto_mod_p256_sqr>:
     788:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     78c:	b087      	sub	sp, #28
     78e:	f7ff fe43 	bl	418 <ocrypto_sqr256_noframe>
     792:	f8dd 8010 	ldr.w	r8, [sp, #16]
     796:	f8dd 9014 	ldr.w	r9, [sp, #20]
     79a:	f8dd a018 	ldr.w	sl, [sp, #24]
     79e:	f7ff ff6f 	bl	680 <mul_reduce>
     7a2:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     7a6:	f7ff ff6b 	bl	680 <mul_reduce>
     7aa:	b003      	add	sp, #12
     7ac:	f85d 8b04 	ldr.w	r8, [sp], #4
     7b0:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     7ba:	4c14      	ldr	r4, [pc, #80]	; (80c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xc>)
     7bc:	7a20      	ldrb	r0, [r4, #8]
     7be:	f88d 0001 	strb.w	r0, [sp, #1]
     7c2:	79e0      	ldrb	r0, [r4, #7]
     7c4:	f88d 0000 	strb.w	r0, [sp]
     7c8:	79a0      	ldrb	r0, [r4, #6]
     7ca:	f8ad 0004 	strh.w	r0, [sp, #4]
     7ce:	7960      	ldrb	r0, [r4, #5]
     7d0:	f8ad 0002 	strh.w	r0, [sp, #2]
     7d4:	4668      	mov	r0, sp
     7d6:	f006 fcaf 	bl	7138 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
     7da:	b108      	cbz	r0, 7e0 <ocrypto_mod_p256_sqr+0x58>
     7dc:	21a7      	movs	r1, #167	; 0xa7
     7de:	e010      	b.n	802 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2>
     7e0:	68e0      	ldr	r0, [r4, #12]
     7e2:	9002      	str	r0, [sp, #8]
     7e4:	a802      	add	r0, sp, #8
     7e6:	f006 fcbd 	bl	7164 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
     7ea:	b108      	cbz	r0, 7f0 <ocrypto_mod_p256_sqr+0x68>
     7ec:	21ab      	movs	r1, #171	; 0xab
     7ee:	e008      	b.n	802 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2>
     7f0:	4807      	ldr	r0, [pc, #28]	; (810 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x10>)
     7f2:	6800      	ldr	r0, [r0, #0]
     7f4:	9003      	str	r0, [sp, #12]
     7f6:	a803      	add	r0, sp, #12
     7f8:	f00f f916 	bl	fa28 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
     7fc:	2800      	cmp	r0, #0
     7fe:	d003      	beq.n	808 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8>
     800:	21af      	movs	r1, #175	; 0xaf
     802:	2003      	movs	r0, #3
     804:	f000 f92e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     808:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
     80a:	0000      	.short	0x0000
     80c:	20000da8 	.word	0x20000da8
     810:	00000b50 	.word	0x00000b50
     814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     818:	460d      	mov	r5, r1
     81a:	4681      	mov	r9, r0
     81c:	f04f 0100 	mov.w	r1, #0
     820:	f100 0003 	add.w	r0, r0, #3
     824:	9100      	str	r1, [sp, #0]
     826:	f020 0003 	bic.w	r0, r0, #3
     82a:	7829      	ldrb	r1, [r5, #0]
     82c:	0014      	movs	r4, r2
     82e:	4606      	mov	r6, r0
     830:	f88d 1001 	strb.w	r1, [sp, #1]
     834:	d000      	beq.n	838 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x38>
     836:	2000      	movs	r0, #0
     838:	4669      	mov	r1, sp
     83a:	f000 faf3 	bl	e24 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
     83e:	eb06 0a00 	add.w	sl, r6, r0
     842:	7828      	ldrb	r0, [r5, #0]
     844:	7869      	ldrb	r1, [r5, #1]
     846:	2700      	movs	r7, #0
     848:	4408      	add	r0, r1
     84a:	f000 08ff 	and.w	r8, r0, #255	; 0xff
     84e:	463e      	mov	r6, r7
     850:	e008      	b.n	864 <__z_interrupt_stack_SIZEOF+0x24>
     852:	7a2b      	ldrb	r3, [r5, #8]
     854:	79ea      	ldrb	r2, [r5, #7]
     856:	79a9      	ldrb	r1, [r5, #6]
     858:	7968      	ldrb	r0, [r5, #5]
     85a:	f00c ffa0 	bl	d79e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
     85e:	1c76      	adds	r6, r6, #1
     860:	4407      	add	r7, r0
     862:	b2f6      	uxtb	r6, r6
     864:	4546      	cmp	r6, r8
     866:	d3f4      	bcc.n	852 <__z_interrupt_stack_SIZEOF+0x12>
     868:	f10a 0003 	add.w	r0, sl, #3
     86c:	f020 0003 	bic.w	r0, r0, #3
     870:	4606      	mov	r6, r0
     872:	b104      	cbz	r4, 876 <__z_interrupt_stack_SIZEOF+0x36>
     874:	2000      	movs	r0, #0
     876:	463a      	mov	r2, r7
     878:	4641      	mov	r1, r8
     87a:	f000 fc79 	bl	1170 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
     87e:	490b      	ldr	r1, [pc, #44]	; (8ac <__z_interrupt_stack_SIZEOF+0x6c>)
     880:	4430      	add	r0, r6
     882:	78c9      	ldrb	r1, [r1, #3]
     884:	b159      	cbz	r1, 89e <__z_interrupt_stack_SIZEOF+0x5e>
     886:	7c29      	ldrb	r1, [r5, #16]
     888:	b149      	cbz	r1, 89e <__z_interrupt_stack_SIZEOF+0x5e>
     88a:	2225      	movs	r2, #37	; 0x25
     88c:	1cc0      	adds	r0, r0, #3
     88e:	f020 0003 	bic.w	r0, r0, #3
     892:	4605      	mov	r5, r0
     894:	b104      	cbz	r4, 898 <__z_interrupt_stack_SIZEOF+0x58>
     896:	2000      	movs	r0, #0
     898:	f000 fcea 	bl	1270 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
     89c:	4428      	add	r0, r5
     89e:	1dc0      	adds	r0, r0, #7
     8a0:	f020 0007 	bic.w	r0, r0, #7
     8a4:	eba0 0009 	sub.w	r0, r0, r9
     8a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8ac:	20000028 	.word	0x20000028

000008b0 <sdc_build_revision_get>:
     8b0:	b510      	push	{r4, lr}
     8b2:	b128      	cbz	r0, 8c0 <sdc_build_revision_get+0x10>
     8b4:	2214      	movs	r2, #20
     8b6:	4904      	ldr	r1, [pc, #16]	; (8c8 <sdc_build_revision_get+0x18>)
     8b8:	f00f fed9 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     8bc:	2000      	movs	r0, #0
     8be:	bd10      	pop	{r4, pc}
     8c0:	f06f 0015 	mvn.w	r0, #21
     8c4:	bd10      	pop	{r4, pc}
     8c6:	0000      	.short	0x0000
     8c8:	00000b74 	.word	0x00000b74

000008cc <sdc_cfg_set>:
     8cc:	b570      	push	{r4, r5, r6, lr}
     8ce:	f06f 032c 	mvn.w	r3, #44	; 0x2c
     8d2:	b988      	cbnz	r0, 8f8 <sdc_cfg_set+0x2c>
     8d4:	4c1f      	ldr	r4, [pc, #124]	; (954 <sdc_cfg_set+0x88>)
     8d6:	7860      	ldrb	r0, [r4, #1]
     8d8:	b108      	cbz	r0, 8de <sdc_cfg_set+0x12>
     8da:	1198      	asrs	r0, r3, #6
     8dc:	bd70      	pop	{r4, r5, r6, pc}
     8de:	b301      	cbz	r1, 922 <sdc_cfg_set+0x56>
     8e0:	f06f 0515 	mvn.w	r5, #21
     8e4:	b31a      	cbz	r2, 92e <sdc_cfg_set+0x62>
     8e6:	481c      	ldr	r0, [pc, #112]	; (958 <sdc_cfg_set+0x8c>)
     8e8:	2901      	cmp	r1, #1
     8ea:	d007      	beq.n	8fc <sdc_cfg_set+0x30>
     8ec:	2903      	cmp	r1, #3
     8ee:	d008      	beq.n	902 <sdc_cfg_set+0x36>
     8f0:	2904      	cmp	r1, #4
     8f2:	d014      	beq.n	91e <sdc_cfg_set+0x52>
     8f4:	2906      	cmp	r1, #6
     8f6:	d015      	beq.n	924 <sdc_cfg_set+0x58>
     8f8:	4618      	mov	r0, r3
     8fa:	bd70      	pop	{r4, r5, r6, pc}
     8fc:	7811      	ldrb	r1, [r2, #0]
     8fe:	7001      	strb	r1, [r0, #0]
     900:	e019      	b.n	936 <sdc_cfg_set+0x6a>
     902:	7891      	ldrb	r1, [r2, #2]
     904:	b199      	cbz	r1, 92e <sdc_cfg_set+0x62>
     906:	78d1      	ldrb	r1, [r2, #3]
     908:	b189      	cbz	r1, 92e <sdc_cfg_set+0x62>
     90a:	7811      	ldrb	r1, [r2, #0]
     90c:	291b      	cmp	r1, #27
     90e:	d30e      	bcc.n	92e <sdc_cfg_set+0x62>
     910:	7851      	ldrb	r1, [r2, #1]
     912:	291b      	cmp	r1, #27
     914:	d30b      	bcc.n	92e <sdc_cfg_set+0x62>
     916:	6811      	ldr	r1, [r2, #0]
     918:	f8c0 1005 	str.w	r1, [r0, #5]
     91c:	e00b      	b.n	936 <sdc_cfg_set+0x6a>
     91e:	6811      	ldr	r1, [r2, #0]
     920:	60c1      	str	r1, [r0, #12]
     922:	e008      	b.n	936 <sdc_cfg_set+0x6a>
     924:	78e1      	ldrb	r1, [r4, #3]
     926:	b121      	cbz	r1, 932 <sdc_cfg_set+0x66>
     928:	7811      	ldrb	r1, [r2, #0]
     92a:	2902      	cmp	r1, #2
     92c:	d201      	bcs.n	932 <sdc_cfg_set+0x66>
     92e:	4628      	mov	r0, r5
     930:	bd70      	pop	{r4, r5, r6, pc}
     932:	7811      	ldrb	r1, [r2, #0]
     934:	7401      	strb	r1, [r0, #16]
     936:	2201      	movs	r2, #1
     938:	4907      	ldr	r1, [pc, #28]	; (958 <sdc_cfg_set+0x8c>)
     93a:	2000      	movs	r0, #0
     93c:	f7ff ff6a 	bl	814 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x14>
     940:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
     944:	db02      	blt.n	94c <sdc_cfg_set+0x80>
     946:	f06f 000b 	mvn.w	r0, #11
     94a:	bd70      	pop	{r4, r5, r6, pc}
     94c:	2101      	movs	r1, #1
     94e:	70a1      	strb	r1, [r4, #2]
     950:	bd70      	pop	{r4, r5, r6, pc}
     952:	0000      	.short	0x0000
     954:	20000028 	.word	0x20000028
     958:	20000da8 	.word	0x20000da8

0000095c <sdc_disable>:
     95c:	b510      	push	{r4, lr}
     95e:	4c07      	ldr	r4, [pc, #28]	; (97c <sdc_disable+0x20>)
     960:	7860      	ldrb	r0, [r4, #1]
     962:	b120      	cbz	r0, 96e <sdc_disable+0x12>
     964:	f006 fef8 	bl	7758 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
     968:	7820      	ldrb	r0, [r4, #0]
     96a:	f00b fde5 	bl	c538 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
     96e:	f000 fccb 	bl	1308 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
     972:	f000 fda3 	bl	14bc <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
     976:	2000      	movs	r0, #0
     978:	7060      	strb	r0, [r4, #1]
     97a:	bd10      	pop	{r4, pc}
     97c:	20000028 	.word	0x20000028

00000980 <sdc_enable>:
     980:	b570      	push	{r4, r5, r6, lr}
     982:	460c      	mov	r4, r1
     984:	0005      	movs	r5, r0
     986:	d002      	beq.n	98e <sdc_enable+0xe>
     988:	b10c      	cbz	r4, 98e <sdc_enable+0xe>
     98a:	0760      	lsls	r0, r4, #29
     98c:	d002      	beq.n	994 <sdc_enable+0x14>
     98e:	f06f 0015 	mvn.w	r0, #21
     992:	bd70      	pop	{r4, r5, r6, pc}
     994:	f000 f914 	bl	bc0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
     998:	b1a8      	cbz	r0, 9c6 <sdc_enable+0x46>
     99a:	4628      	mov	r0, r5
     99c:	f00b fd92 	bl	c4c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
     9a0:	4d0a      	ldr	r5, [pc, #40]	; (9cc <sdc_enable+0x4c>)
     9a2:	2200      	movs	r2, #0
     9a4:	490a      	ldr	r1, [pc, #40]	; (9d0 <sdc_enable+0x50>)
     9a6:	7028      	strb	r0, [r5, #0]
     9a8:	4620      	mov	r0, r4
     9aa:	f7ff ff33 	bl	814 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x14>
     9ae:	f00f fc2e 	bl	1020e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
     9b2:	2100      	movs	r1, #0
     9b4:	7828      	ldrb	r0, [r5, #0]
     9b6:	f006 feb7 	bl	7728 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
     9ba:	f7ff fefd 	bl	7b8 <ocrypto_mod_p256_sqr+0x30>
     9be:	2001      	movs	r0, #1
     9c0:	7068      	strb	r0, [r5, #1]
     9c2:	2000      	movs	r0, #0
     9c4:	bd70      	pop	{r4, r5, r6, pc}
     9c6:	f04f 30ff 	mov.w	r0, #4294967295
     9ca:	bd70      	pop	{r4, r5, r6, pc}
     9cc:	20000028 	.word	0x20000028
     9d0:	20000da8 	.word	0x20000da8

000009d4 <sdc_init>:
     9d4:	b530      	push	{r4, r5, lr}
     9d6:	b089      	sub	sp, #36	; 0x24
     9d8:	0005      	movs	r5, r0
     9da:	d00c      	beq.n	9f6 <sdc_init+0x22>
     9dc:	f00b fd18 	bl	c410 <mpsl_is_initialized>
     9e0:	f04f 34ff 	mov.w	r4, #4294967295
     9e4:	b120      	cbz	r0, 9f0 <sdc_init+0x1c>
     9e6:	f00b fbc9 	bl	c17c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
     9ea:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
     9ee:	d905      	bls.n	9fc <sdc_init+0x28>
     9f0:	4620      	mov	r0, r4
     9f2:	b009      	add	sp, #36	; 0x24
     9f4:	bd30      	pop	{r4, r5, pc}
     9f6:	f06f 0015 	mvn.w	r0, #21
     9fa:	e7fa      	b.n	9f2 <sdc_init+0x1e>
     9fc:	4c14      	ldr	r4, [pc, #80]	; (a50 <__data_size+0x48>)
     9fe:	4815      	ldr	r0, [pc, #84]	; (a54 <__data_size+0x4c>)
     a00:	6065      	str	r5, [r4, #4]
     a02:	f000 f9f9 	bl	df8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
     a06:	2000      	movs	r0, #0
     a08:	7060      	strb	r0, [r4, #1]
     a0a:	70a0      	strb	r0, [r4, #2]
     a0c:	70e0      	strb	r0, [r4, #3]
     a0e:	4601      	mov	r1, r0
     a10:	2220      	movs	r2, #32
     a12:	4668      	mov	r0, sp
     a14:	f00f fea5 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     a18:	2220      	movs	r2, #32
     a1a:	490f      	ldr	r1, [pc, #60]	; (a58 <__data_size+0x50>)
     a1c:	4668      	mov	r0, sp
     a1e:	f00f fe26 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     a22:	2220      	movs	r2, #32
     a24:	4669      	mov	r1, sp
     a26:	480d      	ldr	r0, [pc, #52]	; (a5c <__data_size+0x54>)
     a28:	f00f fe21 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     a2c:	f3ef 8410 	mrs	r4, PRIMASK
     a30:	b672      	cpsid	i
     a32:	f000 fc77 	bl	1324 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
     a36:	480a      	ldr	r0, [pc, #40]	; (a60 <__data_size+0x58>)
     a38:	f000 fd4c 	bl	14d4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
     a3c:	b118      	cbz	r0, a46 <__data_size+0x3e>
     a3e:	21c5      	movs	r1, #197	; 0xc5
     a40:	2003      	movs	r0, #3
     a42:	f000 f80f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     a46:	b904      	cbnz	r4, a4a <__data_size+0x42>
     a48:	b662      	cpsie	i
     a4a:	2000      	movs	r0, #0
     a4c:	e7d1      	b.n	9f2 <sdc_init+0x1e>
     a4e:	0000      	.short	0x0000
     a50:	20000028 	.word	0x20000028
     a54:	000007b9 	.word	0x000007b9
     a58:	00000b54 	.word	0x00000b54
     a5c:	20000da8 	.word	0x20000da8
     a60:	00000bed 	.word	0x00000bed

00000a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
     a64:	b50e      	push	{r1, r2, r3, lr}
     a66:	b672      	cpsid	i
     a68:	4a15      	ldr	r2, [pc, #84]	; (ac0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
     a6a:	6855      	ldr	r5, [r2, #4]
     a6c:	b1dd      	cbz	r5, aa6 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
     a6e:	2200      	movs	r2, #0
     a70:	4603      	mov	r3, r0
     a72:	466e      	mov	r6, sp
     a74:	240a      	movs	r4, #10
     a76:	e003      	b.n	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
     a78:	fbb0 f0f4 	udiv	r0, r0, r4
     a7c:	1c52      	adds	r2, r2, #1
     a7e:	b2d2      	uxtb	r2, r2
     a80:	2800      	cmp	r0, #0
     a82:	d1f9      	bne.n	a78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
     a84:	54b0      	strb	r0, [r6, r2]
     a86:	e00a      	b.n	a9e <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
     a88:	b2d8      	uxtb	r0, r3
     a8a:	fbb0 f7f4 	udiv	r7, r0, r4
     a8e:	fbb3 f3f4 	udiv	r3, r3, r4
     a92:	fb04 0017 	mls	r0, r4, r7, r0
     a96:	1e52      	subs	r2, r2, #1
     a98:	b2d2      	uxtb	r2, r2
     a9a:	3030      	adds	r0, #48	; 0x30
     a9c:	54b0      	strb	r0, [r6, r2]
     a9e:	2a00      	cmp	r2, #0
     aa0:	d1f2      	bne.n	a88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
     aa2:	4630      	mov	r0, r6
     aa4:	47a8      	blx	r5
     aa6:	f3bf 8f4f 	dsb	sy
     aaa:	4806      	ldr	r0, [pc, #24]	; (ac4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
     aac:	6801      	ldr	r1, [r0, #0]
     aae:	4a06      	ldr	r2, [pc, #24]	; (ac8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
     ab0:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
     ab4:	4311      	orrs	r1, r2
     ab6:	6001      	str	r1, [r0, #0]
     ab8:	f3bf 8f4f 	dsb	sy
     abc:	bf00      	nop
     abe:	e7fd      	b.n	abc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
     ac0:	20000028 	.word	0x20000028
     ac4:	e000ed0c 	.word	0xe000ed0c
     ac8:	05fa0004 	.word	0x05fa0004

00000acc <sdc_support_central>:
     acc:	b510      	push	{r4, lr}
     ace:	4c07      	ldr	r4, [pc, #28]	; (aec <sdc_support_central+0x20>)
     ad0:	78a0      	ldrb	r0, [r4, #2]
     ad2:	7861      	ldrb	r1, [r4, #1]
     ad4:	4308      	orrs	r0, r1
     ad6:	d002      	beq.n	ade <sdc_support_central+0x12>
     ad8:	f04f 30ff 	mov.w	r0, #4294967295
     adc:	bd10      	pop	{r4, pc}
     ade:	f006 fe4b 	bl	7778 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>
     ae2:	2001      	movs	r0, #1
     ae4:	70e0      	strb	r0, [r4, #3]
     ae6:	2000      	movs	r0, #0
     ae8:	bd10      	pop	{r4, pc}
     aea:	0000      	.short	0x0000
     aec:	20000028 	.word	0x20000028

00000af0 <sdc_support_dle_central>:
     af0:	4806      	ldr	r0, [pc, #24]	; (b0c <sdc_support_dle_central+0x1c>)
     af2:	b510      	push	{r4, lr}
     af4:	7881      	ldrb	r1, [r0, #2]
     af6:	7840      	ldrb	r0, [r0, #1]
     af8:	4301      	orrs	r1, r0
     afa:	d002      	beq.n	b02 <sdc_support_dle_central+0x12>
     afc:	f04f 30ff 	mov.w	r0, #4294967295
     b00:	bd10      	pop	{r4, pc}
     b02:	f006 fbbb 	bl	727c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ>
     b06:	2000      	movs	r0, #0
     b08:	bd10      	pop	{r4, pc}
     b0a:	0000      	.short	0x0000
     b0c:	20000028 	.word	0x20000028

00000b10 <sdc_support_le_2m_phy>:
     b10:	4806      	ldr	r0, [pc, #24]	; (b2c <sdc_support_le_2m_phy+0x1c>)
     b12:	b510      	push	{r4, lr}
     b14:	7881      	ldrb	r1, [r0, #2]
     b16:	7840      	ldrb	r0, [r0, #1]
     b18:	4301      	orrs	r1, r0
     b1a:	d002      	beq.n	b22 <sdc_support_le_2m_phy+0x12>
     b1c:	f04f 30ff 	mov.w	r0, #4294967295
     b20:	bd10      	pop	{r4, pc}
     b22:	f00f f865 	bl	fbf0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
     b26:	2000      	movs	r0, #0
     b28:	bd10      	pop	{r4, pc}
     b2a:	0000      	.short	0x0000
     b2c:	20000028 	.word	0x20000028

00000b30 <sdc_support_phy_update_central>:
     b30:	4806      	ldr	r0, [pc, #24]	; (b4c <sdc_support_phy_update_central+0x1c>)
     b32:	b510      	push	{r4, lr}
     b34:	7881      	ldrb	r1, [r0, #2]
     b36:	7840      	ldrb	r0, [r0, #1]
     b38:	4301      	orrs	r1, r0
     b3a:	d002      	beq.n	b42 <sdc_support_phy_update_central+0x12>
     b3c:	f04f 30ff 	mov.w	r0, #4294967295
     b40:	bd10      	pop	{r4, pc}
     b42:	f00f f879 	bl	fc38 <sym_7ZWRNRN6OJ5G7BJWG232R5QOQBW4NK4HJWYOG5A>
     b46:	2000      	movs	r0, #0
     b48:	bd10      	pop	{r4, pc}
     b4a:	0000      	.short	0x0000
     b4c:	20000028 	.word	0x20000028
     b50:	00000001 	.word	0x00000001
     b54:	00000001 	.word	0x00000001
     b58:	031b1b00 	.word	0x031b1b00
     b5c:	00000002 	.word	0x00000002
     b60:	00001d4c 	.word	0x00001d4c
     b64:	00000003 	.word	0x00000003
	...
     b74:	2f2d0cd8 	.word	0x2f2d0cd8
     b78:	5ce2ae36 	.word	0x5ce2ae36
     b7c:	4c802680 	.word	0x4c802680
     b80:	53164d3f 	.word	0x53164d3f
     b84:	73c79650 	.word	0x73c79650

00000b88 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
     b88:	4a05      	ldr	r2, [pc, #20]	; (ba0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
     b8a:	b510      	push	{r4, lr}
     b8c:	6852      	ldr	r2, [r2, #4]
     b8e:	b112      	cbz	r2, b96 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
     b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     b94:	4710      	bx	r2
     b96:	2192      	movs	r1, #146	; 0x92
     b98:	2004      	movs	r0, #4
     b9a:	f7ff ff63 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     b9e:	0000      	.short	0x0000
     ba0:	20000dc8 	.word	0x20000dc8

00000ba4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
     ba4:	4a05      	ldr	r2, [pc, #20]	; (bbc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
     ba6:	b510      	push	{r4, lr}
     ba8:	6892      	ldr	r2, [r2, #8]
     baa:	b112      	cbz	r2, bb2 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
     bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     bb0:	4710      	bx	r2
     bb2:	2198      	movs	r1, #152	; 0x98
     bb4:	2004      	movs	r0, #4
     bb6:	f7ff ff55 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     bba:	0000      	.short	0x0000
     bbc:	20000dc8 	.word	0x20000dc8

00000bc0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
     bc0:	4805      	ldr	r0, [pc, #20]	; (bd8 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
     bc2:	6801      	ldr	r1, [r0, #0]
     bc4:	b129      	cbz	r1, bd2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     bc6:	6841      	ldr	r1, [r0, #4]
     bc8:	b119      	cbz	r1, bd2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     bca:	6880      	ldr	r0, [r0, #8]
     bcc:	b108      	cbz	r0, bd2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     bce:	2001      	movs	r0, #1
     bd0:	4770      	bx	lr
     bd2:	2000      	movs	r0, #0
     bd4:	4770      	bx	lr
     bd6:	0000      	.short	0x0000
     bd8:	20000dc8 	.word	0x20000dc8

00000bdc <sdc_rand_source_register>:
     bdc:	4902      	ldr	r1, [pc, #8]	; (be8 <sdc_rand_source_register+0xc>)
     bde:	c80d      	ldmia	r0, {r0, r2, r3}
     be0:	e881 000d 	stmia.w	r1, {r0, r2, r3}
     be4:	2000      	movs	r0, #0
     be6:	4770      	bx	lr
     be8:	20000dc8 	.word	0x20000dc8

00000bec <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
     bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bee:	4c12      	ldr	r4, [pc, #72]	; (c38 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
     bf0:	2600      	movs	r6, #0
     bf2:	6825      	ldr	r5, [r4, #0]
     bf4:	e011      	b.n	c1a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     bf6:	9800      	ldr	r0, [sp, #0]
     bf8:	2802      	cmp	r0, #2
     bfa:	d002      	beq.n	c02 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
     bfc:	2803      	cmp	r0, #3
     bfe:	d10c      	bne.n	c1a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     c00:	e006      	b.n	c10 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
     c02:	6820      	ldr	r0, [r4, #0]
     c04:	b110      	cbz	r0, c0c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
     c06:	2000      	movs	r0, #0
     c08:	6026      	str	r6, [r4, #0]
     c0a:	e005      	b.n	c18 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
     c0c:	2128      	movs	r1, #40	; 0x28
     c0e:	e00c      	b.n	c2a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     c10:	6820      	ldr	r0, [r4, #0]
     c12:	b168      	cbz	r0, c30 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
     c14:	2001      	movs	r0, #1
     c16:	6026      	str	r6, [r4, #0]
     c18:	47a8      	blx	r5
     c1a:	4668      	mov	r0, sp
     c1c:	f000 fc20 	bl	1460 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
     c20:	2800      	cmp	r0, #0
     c22:	d0e8      	beq.n	bf6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
     c24:	2805      	cmp	r0, #5
     c26:	d005      	beq.n	c34 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
     c28:	2135      	movs	r1, #53	; 0x35
     c2a:	2004      	movs	r0, #4
     c2c:	f7ff ff1a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     c30:	212d      	movs	r1, #45	; 0x2d
     c32:	e7fa      	b.n	c2a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c36:	0000      	.short	0x0000
     c38:	20000030 	.word	0x20000030

00000c3c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
     c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     c40:	4605      	mov	r5, r0
     c42:	4922      	ldr	r1, [pc, #136]	; (ccc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     c44:	1d00      	adds	r0, r0, #4
     c46:	f501 7784 	add.w	r7, r1, #264	; 0x108
     c4a:	2600      	movs	r6, #0
     c4c:	6008      	str	r0, [r1, #0]
     c4e:	7838      	ldrb	r0, [r7, #0]
     c50:	b150      	cbz	r0, c68 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
     c52:	78ba      	ldrb	r2, [r7, #2]
     c54:	463c      	mov	r4, r7
     c56:	1c79      	adds	r1, r7, #1
     c58:	4628      	mov	r0, r5
     c5a:	1c92      	adds	r2, r2, #2
     c5c:	f00f fd07 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     c60:	7026      	strb	r6, [r4, #0]
     c62:	2004      	movs	r0, #4
     c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c68:	4818      	ldr	r0, [pc, #96]	; (ccc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     c6a:	f001 fe53 	bl	2914 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
     c6e:	4604      	mov	r4, r0
     c70:	2802      	cmp	r0, #2
     c72:	d004      	beq.n	c7e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x42>
     c74:	2c04      	cmp	r4, #4
     c76:	d007      	beq.n	c88 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x4c>
     c78:	2c08      	cmp	r4, #8
     c7a:	d020      	beq.n	cbe <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x82>
     c7c:	e023      	b.n	cc6 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8a>
     c7e:	4913      	ldr	r1, [pc, #76]	; (ccc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     c80:	4628      	mov	r0, r5
     c82:	f00b feac 	bl	c9de <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
     c86:	e01e      	b.n	cc6 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8a>
     c88:	4910      	ldr	r1, [pc, #64]	; (ccc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     c8a:	4628      	mov	r0, r5
     c8c:	f00b ff0c 	bl	caa8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
     c90:	2800      	cmp	r0, #0
     c92:	d0dc      	beq.n	c4e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     c94:	f895 8000 	ldrb.w	r8, [r5]
     c98:	f895 9002 	ldrb.w	r9, [r5, #2]
     c9c:	4640      	mov	r0, r8
     c9e:	f000 f845 	bl	d2c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
     ca2:	2800      	cmp	r0, #0
     ca4:	d0d3      	beq.n	c4e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     ca6:	f1b8 0f3e 	cmp.w	r8, #62	; 0x3e
     caa:	d10c      	bne.n	cc6 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8a>
     cac:	4648      	mov	r0, r9
     cae:	f1b9 0f12 	cmp.w	r9, #18
     cb2:	d0cc      	beq.n	c4e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     cb4:	f000 f84c 	bl	d50 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
     cb8:	2800      	cmp	r0, #0
     cba:	d0c8      	beq.n	c4e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     cbc:	e003      	b.n	cc6 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8a>
     cbe:	4903      	ldr	r1, [pc, #12]	; (ccc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     cc0:	4628      	mov	r0, r5
     cc2:	f00b feba 	bl	ca3a <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>
     cc6:	4620      	mov	r0, r4
     cc8:	e7cc      	b.n	c64 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
     cca:	0000      	.short	0x0000
     ccc:	20000dd4 	.word	0x20000dd4
     cd0:	b570      	push	{r4, r5, r6, lr}
     cd2:	780a      	ldrb	r2, [r1, #0]
     cd4:	7082      	strb	r2, [r0, #2]
     cd6:	b33a      	cbz	r2, d28 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xec>
     cd8:	2a01      	cmp	r2, #1
     cda:	d825      	bhi.n	d28 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xec>
     cdc:	2313      	movs	r3, #19
     cde:	7003      	strb	r3, [r0, #0]
     ce0:	2300      	movs	r3, #0
     ce2:	e00a      	b.n	cfa <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xbe>
     ce4:	eb01 0443 	add.w	r4, r1, r3, lsl #1
     ce8:	eb00 0543 	add.w	r5, r0, r3, lsl #1
     cec:	78a6      	ldrb	r6, [r4, #2]
     cee:	70ee      	strb	r6, [r5, #3]
     cf0:	8864      	ldrh	r4, [r4, #2]
     cf2:	0a24      	lsrs	r4, r4, #8
     cf4:	1c5b      	adds	r3, r3, #1
     cf6:	712c      	strb	r4, [r5, #4]
     cf8:	b2db      	uxtb	r3, r3
     cfa:	4293      	cmp	r3, r2
     cfc:	d3f2      	bcc.n	ce4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>
     cfe:	2300      	movs	r3, #0
     d00:	e00b      	b.n	d1a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xde>
     d02:	bf00      	nop
     d04:	eb01 0543 	add.w	r5, r1, r3, lsl #1
     d08:	eb00 0443 	add.w	r4, r0, r3, lsl #1
     d0c:	792e      	ldrb	r6, [r5, #4]
     d0e:	7166      	strb	r6, [r4, #5]
     d10:	88ad      	ldrh	r5, [r5, #4]
     d12:	0a2d      	lsrs	r5, r5, #8
     d14:	1c5b      	adds	r3, r3, #1
     d16:	71a5      	strb	r5, [r4, #6]
     d18:	b2db      	uxtb	r3, r3
     d1a:	4293      	cmp	r3, r2
     d1c:	d3f2      	bcc.n	d04 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xc8>
     d1e:	2101      	movs	r1, #1
     d20:	eb01 0082 	add.w	r0, r1, r2, lsl #2
     d24:	b2c0      	uxtb	r0, r0
     d26:	bd70      	pop	{r4, r5, r6, pc}
     d28:	2000      	movs	r0, #0
     d2a:	bd70      	pop	{r4, r5, r6, pc}

00000d2c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
     d2c:	2840      	cmp	r0, #64	; 0x40
     d2e:	d203      	bcs.n	d38 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
     d30:	1e40      	subs	r0, r0, #1
     d32:	b2c1      	uxtb	r1, r0
     d34:	4805      	ldr	r0, [pc, #20]	; (d4c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     d36:	e005      	b.n	d44 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
     d38:	28ff      	cmp	r0, #255	; 0xff
     d3a:	d005      	beq.n	d48 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
     d3c:	3840      	subs	r0, #64	; 0x40
     d3e:	b2c1      	uxtb	r1, r0
     d40:	4802      	ldr	r0, [pc, #8]	; (d4c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     d42:	3008      	adds	r0, #8
     d44:	f00c b926 	b.w	cf94 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     d48:	2001      	movs	r0, #1
     d4a:	4770      	bx	lr
     d4c:	2000003c 	.word	0x2000003c

00000d50 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
     d50:	1e40      	subs	r0, r0, #1
     d52:	b2c1      	uxtb	r1, r0
     d54:	4801      	ldr	r0, [pc, #4]	; (d5c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
     d56:	f00c b91d 	b.w	cf94 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     d5a:	0000      	.short	0x0000
     d5c:	2000004c 	.word	0x2000004c

00000d60 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
     d60:	b510      	push	{r4, lr}
     d62:	4a07      	ldr	r2, [pc, #28]	; (d80 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x20>)
     d64:	6801      	ldr	r1, [r0, #0]
     d66:	4b06      	ldr	r3, [pc, #24]	; (d80 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x20>)
     d68:	6191      	str	r1, [r2, #24]
     d6a:	6840      	ldr	r0, [r0, #4]
     d6c:	61d0      	str	r0, [r2, #28]
     d6e:	681c      	ldr	r4, [r3, #0]
     d70:	3218      	adds	r2, #24
     d72:	43a1      	bics	r1, r4
     d74:	6011      	str	r1, [r2, #0]
     d76:	6859      	ldr	r1, [r3, #4]
     d78:	4388      	bics	r0, r1
     d7a:	6050      	str	r0, [r2, #4]
     d7c:	bd10      	pop	{r4, pc}
     d7e:	0000      	.short	0x0000
     d80:	20000034 	.word	0x20000034

00000d84 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
     d84:	4a06      	ldr	r2, [pc, #24]	; (da0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
     d86:	6801      	ldr	r1, [r0, #0]
     d88:	6091      	str	r1, [r2, #8]
     d8a:	6840      	ldr	r0, [r0, #4]
     d8c:	60d0      	str	r0, [r2, #12]
     d8e:	3208      	adds	r2, #8
     d90:	f441 218c 	orr.w	r1, r1, #286720	; 0x46000
     d94:	6011      	str	r1, [r2, #0]
     d96:	4903      	ldr	r1, [pc, #12]	; (da4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x20>)
     d98:	4308      	orrs	r0, r1
     d9a:	6050      	str	r0, [r2, #4]
     d9c:	4770      	bx	lr
     d9e:	0000      	.short	0x0000
     da0:	20000034 	.word	0x20000034
     da4:	024007f8 	.word	0x024007f8

00000da8 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
     da8:	4902      	ldr	r1, [pc, #8]	; (db4 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
     daa:	6802      	ldr	r2, [r0, #0]
     dac:	610a      	str	r2, [r1, #16]
     dae:	6840      	ldr	r0, [r0, #4]
     db0:	6148      	str	r0, [r1, #20]
     db2:	4770      	bx	lr
     db4:	20000034 	.word	0x20000034

00000db8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
     db8:	4807      	ldr	r0, [pc, #28]	; (dd8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
     dba:	f04f 31ff 	mov.w	r1, #4294967295
     dbe:	2200      	movs	r2, #0
     dc0:	6001      	str	r1, [r0, #0]
     dc2:	0cc9      	lsrs	r1, r1, #19
     dc4:	6041      	str	r1, [r0, #4]
     dc6:	f100 0108 	add.w	r1, r0, #8
     dca:	201f      	movs	r0, #31
     dcc:	600a      	str	r2, [r1, #0]
     dce:	604a      	str	r2, [r1, #4]
     dd0:	3108      	adds	r1, #8
     dd2:	e9c1 0200 	strd	r0, r2, [r1]
     dd6:	4770      	bx	lr
     dd8:	2000003c 	.word	0x2000003c

00000ddc <sdc_hci_cmd_cb_reset>:
     ddc:	b510      	push	{r4, lr}
     dde:	f7ff ffeb 	bl	db8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
     de2:	f00e fe7e 	bl	fae2 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
     de6:	4604      	mov	r4, r0
     de8:	4802      	ldr	r0, [pc, #8]	; (df4 <sdc_hci_cmd_cb_reset+0x18>)
     dea:	6800      	ldr	r0, [r0, #0]
     dec:	b100      	cbz	r0, df0 <sdc_hci_cmd_cb_reset+0x14>
     dee:	4780      	blx	r0
     df0:	4620      	mov	r0, r4
     df2:	bd10      	pop	{r4, pc}
     df4:	20000054 	.word	0x20000054

00000df8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
     df8:	4901      	ldr	r1, [pc, #4]	; (e00 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
     dfa:	6008      	str	r0, [r1, #0]
     dfc:	4770      	bx	lr
     dfe:	0000      	.short	0x0000
     e00:	20000054 	.word	0x20000054

00000e04 <sdc_hci_cmd_vs_zephyr_read_version_info>:
     e04:	2102      	movs	r1, #2
     e06:	8001      	strh	r1, [r0, #0]
     e08:	8041      	strh	r1, [r0, #2]
     e0a:	2100      	movs	r1, #0
     e0c:	7101      	strb	r1, [r0, #4]
     e0e:	21d8      	movs	r1, #216	; 0xd8
     e10:	7141      	strb	r1, [r0, #5]
     e12:	f642 510c 	movw	r1, #11532	; 0x2d0c
     e16:	80c1      	strh	r1, [r0, #6]
     e18:	4901      	ldr	r1, [pc, #4]	; (e20 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
     e1a:	6081      	str	r1, [r0, #8]
     e1c:	2000      	movs	r0, #0
     e1e:	4770      	bx	lr
     e20:	e2ae362f 	.word	0xe2ae362f

00000e24 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
     e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e26:	4605      	mov	r5, r0
     e28:	7808      	ldrb	r0, [r1, #0]
     e2a:	784a      	ldrb	r2, [r1, #1]
     e2c:	4290      	cmp	r0, r2
     e2e:	d902      	bls.n	e36 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x12>
     e30:	f240 11b1 	movw	r1, #433	; 0x1b1
     e34:	e007      	b.n	e46 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x22>
     e36:	9500      	str	r5, [sp, #0]
     e38:	b145      	cbz	r5, e4c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
     e3a:	2600      	movs	r6, #0
     e3c:	784c      	ldrb	r4, [r1, #1]
     e3e:	07a8      	lsls	r0, r5, #30
     e40:	d006      	beq.n	e50 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2c>
     e42:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
     e46:	2017      	movs	r0, #23
     e48:	f7ff fe0c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     e4c:	2601      	movs	r6, #1
     e4e:	e7f5      	b.n	e3c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x18>
     e50:	4f12      	ldr	r7, [pc, #72]	; (e9c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x78>)
     e52:	4631      	mov	r1, r6
     e54:	4668      	mov	r0, sp
     e56:	703c      	strb	r4, [r7, #0]
     e58:	f000 f8ca 	bl	ff0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>
     e5c:	2000      	movs	r0, #0
     e5e:	4603      	mov	r3, r0
     e60:	9900      	ldr	r1, [sp, #0]
     e62:	1cc9      	adds	r1, r1, #3
     e64:	f021 0103 	bic.w	r1, r1, #3
     e68:	9100      	str	r1, [sp, #0]
     e6a:	b96e      	cbnz	r6, e88 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
     e6c:	eb07 0280 	add.w	r2, r7, r0, lsl #2
     e70:	6091      	str	r1, [r2, #8]
     e72:	2100      	movs	r1, #0
     e74:	e006      	b.n	e84 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>
     e76:	bf00      	nop
     e78:	f8d2 c008 	ldr.w	ip, [r2, #8]
     e7c:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
     e80:	1c49      	adds	r1, r1, #1
     e82:	b2c9      	uxtb	r1, r1
     e84:	42a1      	cmp	r1, r4
     e86:	d3f7      	bcc.n	e78 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x54>
     e88:	9900      	ldr	r1, [sp, #0]
     e8a:	1c40      	adds	r0, r0, #1
     e8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
     e90:	9100      	str	r1, [sp, #0]
     e92:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
     e96:	d0e3      	beq.n	e60 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3c>
     e98:	1b48      	subs	r0, r1, r5
     e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e9c:	20000fe0 	.word	0x20000fe0

00000ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
     ea0:	b570      	push	{r4, r5, r6, lr}
     ea2:	4604      	mov	r4, r0
     ea4:	7985      	ldrb	r5, [r0, #6]
     ea6:	f000 f8df 	bl	1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
     eaa:	4a0c      	ldr	r2, [pc, #48]	; (edc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3c>)
     eac:	79e1      	ldrb	r1, [r4, #7]
     eae:	eb02 0285 	add.w	r2, r2, r5, lsl #2
     eb2:	e00e      	b.n	ed2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x32>
     eb4:	6893      	ldr	r3, [r2, #8]
     eb6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
     eba:	b143      	cbz	r3, ece <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x2e>
     ebc:	1c48      	adds	r0, r1, #1
     ebe:	71e0      	strb	r0, [r4, #7]
     ec0:	80a1      	strh	r1, [r4, #4]
     ec2:	6890      	ldr	r0, [r2, #8]
     ec4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
     ec8:	6020      	str	r0, [r4, #0]
     eca:	2000      	movs	r0, #0
     ecc:	bd70      	pop	{r4, r5, r6, pc}
     ece:	1c49      	adds	r1, r1, #1
     ed0:	b2c9      	uxtb	r1, r1
     ed2:	4281      	cmp	r1, r0
     ed4:	d3ee      	bcc.n	eb4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x14>
     ed6:	71e1      	strb	r1, [r4, #7]
     ed8:	2005      	movs	r0, #5
     eda:	bd70      	pop	{r4, r5, r6, pc}
     edc:	20000fe0 	.word	0x20000fe0

00000ee0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
     ee0:	b4f0      	push	{r4, r5, r6, r7}
     ee2:	b941      	cbnz	r1, ef6 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x16>
     ee4:	4a10      	ldr	r2, [pc, #64]	; (f28 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x48>)
     ee6:	2500      	movs	r5, #0
     ee8:	462b      	mov	r3, r5
     eea:	f64f 74ff 	movw	r4, #65535	; 0xffff
     eee:	eb02 0681 	add.w	r6, r2, r1, lsl #2
     ef2:	5c57      	ldrb	r7, [r2, r1]
     ef4:	e00d      	b.n	f12 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x32>
     ef6:	bcf0      	pop	{r4, r5, r6, r7}
     ef8:	2000      	movs	r0, #0
     efa:	4770      	bx	lr
     efc:	195a      	adds	r2, r3, r5
     efe:	f8d6 c008 	ldr.w	ip, [r6, #8]
     f02:	b292      	uxth	r2, r2
     f04:	f85c c022 	ldr.w	ip, [ip, r2, lsl #2]
     f08:	f1bc 0f00 	cmp.w	ip, #0
     f0c:	d004      	beq.n	f18 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x38>
     f0e:	1c5b      	adds	r3, r3, #1
     f10:	b29b      	uxth	r3, r3
     f12:	429f      	cmp	r7, r3
     f14:	d8f2      	bhi.n	efc <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1c>
     f16:	4622      	mov	r2, r4
     f18:	8002      	strh	r2, [r0, #0]
     f1a:	4610      	mov	r0, r2
     f1c:	42a2      	cmp	r2, r4
     f1e:	d0ea      	beq.n	ef6 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x16>
     f20:	bcf0      	pop	{r4, r5, r6, r7}
     f22:	f000 b82d 	b.w	f80 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x54>
     f26:	0000      	.short	0x0000
     f28:	20000fe0 	.word	0x20000fe0

00000f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
     f2c:	b570      	push	{r4, r5, r6, lr}
     f2e:	4606      	mov	r6, r0
     f30:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
     f34:	f243 0502 	movw	r5, #12290	; 0x3002
     f38:	38ff      	subs	r0, #255	; 0xff
     f3a:	d01a      	beq.n	f72 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
     f3c:	b109      	cbz	r1, f42 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16>
     f3e:	2007      	movs	r0, #7
     f40:	bd70      	pop	{r4, r5, r6, pc}
     f42:	4630      	mov	r0, r6
     f44:	f000 f844 	bl	fd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa4>
     f48:	0004      	movs	r4, r0
     f4a:	d012      	beq.n	f72 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
     f4c:	480a      	ldr	r0, [pc, #40]	; (f78 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x4c>)
     f4e:	4621      	mov	r1, r4
     f50:	6802      	ldr	r2, [r0, #0]
     f52:	4630      	mov	r0, r6
     f54:	4790      	blx	r2
     f56:	4d09      	ldr	r5, [pc, #36]	; (f7c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x50>)
     f58:	2000      	movs	r0, #0
     f5a:	68a9      	ldr	r1, [r5, #8]
     f5c:	f841 0026 	str.w	r0, [r1, r6, lsl #2]
     f60:	f000 f878 	bl	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
     f64:	4602      	mov	r2, r0
     f66:	4621      	mov	r1, r4
     f68:	6868      	ldr	r0, [r5, #4]
     f6a:	f00c fbdf 	bl	d72c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
     f6e:	2000      	movs	r0, #0
     f70:	bd70      	pop	{r4, r5, r6, pc}
     f72:	4628      	mov	r0, r5
     f74:	bd70      	pop	{r4, r5, r6, pc}
     f76:	0000      	.short	0x0000
     f78:	00001078 	.word	0x00001078
     f7c:	20000fe0 	.word	0x20000fe0
     f80:	b570      	push	{r4, r5, r6, lr}
     f82:	460e      	mov	r6, r1
     f84:	4605      	mov	r5, r0
     f86:	f00c fc00 	bl	d78a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x12>
     f8a:	b158      	cbz	r0, fa4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x78>
     f8c:	480f      	ldr	r0, [pc, #60]	; (fcc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa0>)
     f8e:	eb00 0486 	add.w	r4, r0, r6, lsl #2
     f92:	68a0      	ldr	r0, [r4, #8]
     f94:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
     f98:	b138      	cbz	r0, faa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x7e>
     f9a:	f44f 71c5 	mov.w	r1, #394	; 0x18a
     f9e:	2017      	movs	r0, #23
     fa0:	f7ff fd60 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     fa4:	f240 1189 	movw	r1, #393	; 0x189
     fa8:	e7f9      	b.n	f9e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x72>
     faa:	6860      	ldr	r0, [r4, #4]
     fac:	2800      	cmp	r0, #0
     fae:	d00b      	beq.n	fc8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x9c>
     fb0:	4630      	mov	r0, r6
     fb2:	f000 f84f 	bl	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
     fb6:	4601      	mov	r1, r0
     fb8:	6860      	ldr	r0, [r4, #4]
     fba:	f00c fb5f 	bl	d67c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
     fbe:	2800      	cmp	r0, #0
     fc0:	d002      	beq.n	fc8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x9c>
     fc2:	68a1      	ldr	r1, [r4, #8]
     fc4:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
     fc8:	bd70      	pop	{r4, r5, r6, pc}
     fca:	0000      	.short	0x0000
     fcc:	20000fe0 	.word	0x20000fe0
     fd0:	b570      	push	{r4, r5, r6, lr}
     fd2:	460c      	mov	r4, r1
     fd4:	4605      	mov	r5, r0
     fd6:	f00c fbd8 	bl	d78a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x12>
     fda:	2800      	cmp	r0, #0
     fdc:	d005      	beq.n	fea <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xbe>
     fde:	4803      	ldr	r0, [pc, #12]	; (fec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc0>)
     fe0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     fe4:	6880      	ldr	r0, [r0, #8]
     fe6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
     fea:	bd70      	pop	{r4, r5, r6, pc}
     fec:	20000fe0 	.word	0x20000fe0
     ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     ff4:	4e16      	ldr	r6, [pc, #88]	; (1050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>)
     ff6:	4688      	mov	r8, r1
     ff8:	4605      	mov	r5, r0
     ffa:	2400      	movs	r4, #0
     ffc:	6828      	ldr	r0, [r5, #0]
     ffe:	1cc0      	adds	r0, r0, #3
    1000:	f020 0003 	bic.w	r0, r0, #3
    1004:	6028      	str	r0, [r5, #0]
    1006:	4620      	mov	r0, r4
    1008:	f000 f824 	bl	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
    100c:	5d31      	ldrb	r1, [r6, r4]
    100e:	4348      	muls	r0, r1
    1010:	f1b8 0f00 	cmp.w	r8, #0
    1014:	d001      	beq.n	101a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
    1016:	2200      	movs	r2, #0
    1018:	e000      	b.n	101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
    101a:	682a      	ldr	r2, [r5, #0]
    101c:	4601      	mov	r1, r0
    101e:	9200      	str	r2, [sp, #0]
    1020:	b132      	cbz	r2, 1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
    1022:	2700      	movs	r7, #0
    1024:	ea4f 000d 	mov.w	r0, sp
    1028:	f00c fb59 	bl	d6de <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    102c:	b11f      	cbz	r7, 1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
    102e:	e006      	b.n	103e <CONFIG_FPROTECT_BLOCK_SIZE+0x3e>
    1030:	2701      	movs	r7, #1
    1032:	2000      	movs	r0, #0
    1034:	e7f8      	b.n	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
    1036:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    103a:	9a00      	ldr	r2, [sp, #0]
    103c:	604a      	str	r2, [r1, #4]
    103e:	6829      	ldr	r1, [r5, #0]
    1040:	1c64      	adds	r4, r4, #1
    1042:	4408      	add	r0, r1
    1044:	6028      	str	r0, [r5, #0]
    1046:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    104a:	d0d7      	beq.n	ffc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>
    104c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1050:	20000fe0 	.word	0x20000fe0
    1054:	4903      	ldr	r1, [pc, #12]	; (1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>)
    1056:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    105a:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    105e:	1cc0      	adds	r0, r0, #3
    1060:	4008      	ands	r0, r1
    1062:	4770      	bx	lr
    1064:	00001074 	.word	0x00001074
    1068:	4801      	ldr	r0, [pc, #4]	; (1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>)
    106a:	7800      	ldrb	r0, [r0, #0]
    106c:	4770      	bx	lr
    106e:	0000      	.short	0x0000
    1070:	20000fe0 	.word	0x20000fe0
    1074:	000002a8 	.word	0x000002a8
    1078:	0000edf5 	.word	0x0000edf5

0000107c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    107c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1080:	4c24      	ldr	r4, [pc, #144]	; (1114 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
    1082:	4606      	mov	r6, r0
    1084:	b081      	sub	sp, #4
    1086:	6820      	ldr	r0, [r4, #0]
    1088:	469a      	mov	sl, r3
    108a:	4693      	mov	fp, r2
    108c:	b158      	cbz	r0, 10a6 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    108e:	7a01      	ldrb	r1, [r0, #8]
    1090:	42b1      	cmp	r1, r6
    1092:	d903      	bls.n	109c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    1094:	6840      	ldr	r0, [r0, #4]
    1096:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    109a:	b140      	cbz	r0, 10ae <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    109c:	f243 0002 	movw	r0, #12290	; 0x3002
    10a0:	b005      	add	sp, #20
    10a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10a6:	21a5      	movs	r1, #165	; 0xa5
    10a8:	2018      	movs	r0, #24
    10aa:	f7ff fcdb 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    10ae:	4619      	mov	r1, r3
    10b0:	9802      	ldr	r0, [sp, #8]
    10b2:	f00c fb8d 	bl	d7d0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    10b6:	4680      	mov	r8, r0
    10b8:	4658      	mov	r0, fp
    10ba:	990e      	ldr	r1, [sp, #56]	; 0x38
    10bc:	f00c fb7e 	bl	d7bc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    10c0:	4605      	mov	r5, r0
    10c2:	eb08 0005 	add.w	r0, r8, r5
    10c6:	1d00      	adds	r0, r0, #4
    10c8:	b287      	uxth	r7, r0
    10ca:	6820      	ldr	r0, [r4, #0]
    10cc:	46a1      	mov	r9, r4
    10ce:	4639      	mov	r1, r7
    10d0:	6800      	ldr	r0, [r0, #0]
    10d2:	f00c fad3 	bl	d67c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    10d6:	0004      	movs	r4, r0
    10d8:	d01a      	beq.n	1110 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
    10da:	8067      	strh	r7, [r4, #2]
    10dc:	8025      	strh	r5, [r4, #0]
    10de:	4629      	mov	r1, r5
    10e0:	1d20      	adds	r0, r4, #4
    10e2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    10e4:	4607      	mov	r7, r0
    10e6:	465a      	mov	r2, fp
    10e8:	2309      	movs	r3, #9
    10ea:	9500      	str	r5, [sp, #0]
    10ec:	f00c fa40 	bl	d570 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    10f0:	8820      	ldrh	r0, [r4, #0]
    10f2:	4641      	mov	r1, r8
    10f4:	4438      	add	r0, r7
    10f6:	230a      	movs	r3, #10
    10f8:	9a02      	ldr	r2, [sp, #8]
    10fa:	f8cd a000 	str.w	sl, [sp]
    10fe:	f00c fa37 	bl	d570 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    1102:	f8d9 0000 	ldr.w	r0, [r9]
    1106:	6840      	ldr	r0, [r0, #4]
    1108:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    110c:	2000      	movs	r0, #0
    110e:	e7c7      	b.n	10a0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    1110:	2004      	movs	r0, #4
    1112:	e7c5      	b.n	10a0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    1114:	20000058 	.word	0x20000058

00001118 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    1118:	b570      	push	{r4, r5, r6, lr}
    111a:	4c14      	ldr	r4, [pc, #80]	; (116c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    111c:	6823      	ldr	r3, [r4, #0]
    111e:	b18b      	cbz	r3, 1144 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    1120:	7a19      	ldrb	r1, [r3, #8]
    1122:	4281      	cmp	r1, r0
    1124:	d912      	bls.n	114c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    1126:	685a      	ldr	r2, [r3, #4]
    1128:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    112c:	b171      	cbz	r1, 114c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    112e:	2500      	movs	r5, #0
    1130:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    1134:	884a      	ldrh	r2, [r1, #2]
    1136:	6818      	ldr	r0, [r3, #0]
    1138:	f00c faf8 	bl	d72c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    113c:	6821      	ldr	r1, [r4, #0]
    113e:	2000      	movs	r0, #0
    1140:	7a0a      	ldrb	r2, [r1, #8]
    1142:	e00c      	b.n	115e <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    1144:	21c6      	movs	r1, #198	; 0xc6
    1146:	2018      	movs	r0, #24
    1148:	f7ff fc8c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    114c:	f243 0002 	movw	r0, #12290	; 0x3002
    1150:	bd70      	pop	{r4, r5, r6, pc}
    1152:	684b      	ldr	r3, [r1, #4]
    1154:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1158:	b933      	cbnz	r3, 1168 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    115a:	1c40      	adds	r0, r0, #1
    115c:	b2c0      	uxtb	r0, r0
    115e:	4282      	cmp	r2, r0
    1160:	d8f7      	bhi.n	1152 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    1162:	6808      	ldr	r0, [r1, #0]
    1164:	f00c fad7 	bl	d716 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    1168:	2000      	movs	r0, #0
    116a:	bd70      	pop	{r4, r5, r6, pc}
    116c:	20000058 	.word	0x20000058

00001170 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    1170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1174:	460d      	mov	r5, r1
    1176:	0004      	movs	r4, r0
    1178:	4690      	mov	r8, r2
    117a:	f04f 0600 	mov.w	r6, #0
    117e:	d006      	beq.n	118e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    1180:	2700      	movs	r7, #0
    1182:	07a0      	lsls	r0, r4, #30
    1184:	d005      	beq.n	1192 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    1186:	2186      	movs	r1, #134	; 0x86
    1188:	2018      	movs	r0, #24
    118a:	f7ff fc6b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    118e:	2701      	movs	r7, #1
    1190:	e7f7      	b.n	1182 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    1192:	b1cd      	cbz	r5, 11c8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    1194:	4611      	mov	r1, r2
    1196:	2000      	movs	r0, #0
    1198:	f00c faa1 	bl	d6de <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    119c:	300c      	adds	r0, #12
    119e:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    11a2:	b98f      	cbnz	r7, 11c8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    11a4:	4f0a      	ldr	r7, [pc, #40]	; (11d0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    11a6:	f104 000c 	add.w	r0, r4, #12
    11aa:	00aa      	lsls	r2, r5, #2
    11ac:	603c      	str	r4, [r7, #0]
    11ae:	7225      	strb	r5, [r4, #8]
    11b0:	6060      	str	r0, [r4, #4]
    11b2:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    11b6:	6020      	str	r0, [r4, #0]
    11b8:	2100      	movs	r1, #0
    11ba:	6860      	ldr	r0, [r4, #4]
    11bc:	f00f fad1 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    11c0:	4641      	mov	r1, r8
    11c2:	6838      	ldr	r0, [r7, #0]
    11c4:	f00c fa8b 	bl	d6de <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    11c8:	4630      	mov	r0, r6
    11ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    11ce:	0000      	.short	0x0000
    11d0:	20000058 	.word	0x20000058

000011d4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    11d4:	b570      	push	{r4, r5, r6, lr}
    11d6:	4d08      	ldr	r5, [pc, #32]	; (11f8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    11d8:	6828      	ldr	r0, [r5, #0]
    11da:	2800      	cmp	r0, #0
    11dc:	d00a      	beq.n	11f4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    11de:	2400      	movs	r4, #0
    11e0:	e004      	b.n	11ec <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    11e2:	4620      	mov	r0, r4
    11e4:	f7ff ff98 	bl	1118 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    11e8:	1c64      	adds	r4, r4, #1
    11ea:	b2e4      	uxtb	r4, r4
    11ec:	6828      	ldr	r0, [r5, #0]
    11ee:	7a00      	ldrb	r0, [r0, #8]
    11f0:	42a0      	cmp	r0, r4
    11f2:	d8f6      	bhi.n	11e2 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    11f4:	bd70      	pop	{r4, r5, r6, pc}
    11f6:	0000      	.short	0x0000
    11f8:	20000058 	.word	0x20000058

000011fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    11fc:	4909      	ldr	r1, [pc, #36]	; (1224 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    11fe:	b510      	push	{r4, lr}
    1200:	4602      	mov	r2, r0
    1202:	6809      	ldr	r1, [r1, #0]
    1204:	2000      	movs	r0, #0
    1206:	b149      	cbz	r1, 121c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    1208:	7a0b      	ldrb	r3, [r1, #8]
    120a:	4293      	cmp	r3, r2
    120c:	d905      	bls.n	121a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    120e:	6849      	ldr	r1, [r1, #4]
    1210:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1214:	2900      	cmp	r1, #0
    1216:	d000      	beq.n	121a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    1218:	1d08      	adds	r0, r1, #4
    121a:	bd10      	pop	{r4, pc}
    121c:	21ec      	movs	r1, #236	; 0xec
    121e:	2018      	movs	r0, #24
    1220:	f7ff fc20 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1224:	20000058 	.word	0x20000058

00001228 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    1228:	490a      	ldr	r1, [pc, #40]	; (1254 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    122a:	b510      	push	{r4, lr}
    122c:	4602      	mov	r2, r0
    122e:	6809      	ldr	r1, [r1, #0]
    1230:	2000      	movs	r0, #0
    1232:	b159      	cbz	r1, 124c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    1234:	7a0b      	ldrb	r3, [r1, #8]
    1236:	4293      	cmp	r3, r2
    1238:	d907      	bls.n	124a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    123a:	6849      	ldr	r1, [r1, #4]
    123c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1240:	2900      	cmp	r1, #0
    1242:	d002      	beq.n	124a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    1244:	f831 0b04 	ldrh.w	r0, [r1], #4
    1248:	4408      	add	r0, r1
    124a:	bd10      	pop	{r4, pc}
    124c:	21fa      	movs	r1, #250	; 0xfa
    124e:	2018      	movs	r0, #24
    1250:	f7ff fc08 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1254:	20000058 	.word	0x20000058

00001258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>:
    1258:	4801      	ldr	r0, [pc, #4]	; (1260 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA+0x8>)
    125a:	7840      	ldrb	r0, [r0, #1]
    125c:	4770      	bx	lr
    125e:	0000      	.short	0x0000
    1260:	2000005c 	.word	0x2000005c

00001264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>:
    1264:	4801      	ldr	r0, [pc, #4]	; (126c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q+0x8>)
    1266:	6840      	ldr	r0, [r0, #4]
    1268:	4770      	bx	lr
    126a:	0000      	.short	0x0000
    126c:	2000005c 	.word	0x2000005c

00001270 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
    1270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1274:	460c      	mov	r4, r1
    1276:	4607      	mov	r7, r0
    1278:	4616      	mov	r6, r2
    127a:	2125      	movs	r1, #37	; 0x25
    127c:	4610      	mov	r0, r2
    127e:	460d      	mov	r5, r1
    1280:	4622      	mov	r2, r4
    1282:	f00c f9ba 	bl	d5fa <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    1286:	4680      	mov	r8, r0
    1288:	b157      	cbz	r7, 12a0 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x30>
    128a:	4638      	mov	r0, r7
    128c:	4641      	mov	r1, r8
    128e:	4632      	mov	r2, r6
    1290:	462b      	mov	r3, r5
    1292:	9400      	str	r4, [sp, #0]
    1294:	f00c f96c 	bl	d570 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    1298:	4803      	ldr	r0, [pc, #12]	; (12a8 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x38>)
    129a:	6047      	str	r7, [r0, #4]
    129c:	7004      	strb	r4, [r0, #0]
    129e:	7046      	strb	r6, [r0, #1]
    12a0:	4640      	mov	r0, r8
    12a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    12a6:	0000      	.short	0x0000
    12a8:	2000005c 	.word	0x2000005c

000012ac <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>:
    12ac:	4802      	ldr	r0, [pc, #8]	; (12b8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xc>)
    12ae:	7842      	ldrb	r2, [r0, #1]
    12b0:	7801      	ldrb	r1, [r0, #0]
    12b2:	6840      	ldr	r0, [r0, #4]
    12b4:	f7ff bfdc 	b.w	1270 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    12b8:	2000005c 	.word	0x2000005c
    12bc:	b530      	push	{r4, r5, lr}
    12be:	490d      	ldr	r1, [pc, #52]	; (12f4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x48>)
    12c0:	2001      	movs	r0, #1
    12c2:	6048      	str	r0, [r1, #4]
    12c4:	1e82      	subs	r2, r0, #2
    12c6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    12ca:	490b      	ldr	r1, [pc, #44]	; (12f8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x4c>)
    12cc:	6088      	str	r0, [r1, #8]
    12ce:	2300      	movs	r3, #0
    12d0:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    12d4:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    12d8:	4c08      	ldr	r4, [pc, #32]	; (12fc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x50>)
    12da:	6023      	str	r3, [r4, #0]
    12dc:	1d25      	adds	r5, r4, #4
    12de:	6028      	str	r0, [r5, #0]
    12e0:	6088      	str	r0, [r1, #8]
    12e2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    12e6:	6023      	str	r3, [r4, #0]
    12e8:	6028      	str	r0, [r5, #0]
    12ea:	4906      	ldr	r1, [pc, #24]	; (1304 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x58>)
    12ec:	4804      	ldr	r0, [pc, #16]	; (1300 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x54>)
    12ee:	6008      	str	r0, [r1, #0]
    12f0:	bd30      	pop	{r4, r5, pc}
    12f2:	0000      	.short	0x0000
    12f4:	4000e000 	.word	0x4000e000
    12f8:	4000f000 	.word	0x4000f000
    12fc:	4000f500 	.word	0x4000f500
    1300:	3ff60000 	.word	0x3ff60000
    1304:	4001f508 	.word	0x4001f508

00001308 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    1308:	b510      	push	{r4, lr}
    130a:	f7ff ffd7 	bl	12bc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    130e:	f00c fa87 	bl	d820 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x82>
    1312:	4903      	ldr	r1, [pc, #12]	; (1320 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    1314:	4801      	ldr	r0, [pc, #4]	; (131c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    1316:	6008      	str	r0, [r1, #0]
    1318:	bd10      	pop	{r4, pc}
    131a:	0000      	.short	0x0000
    131c:	3ff60000 	.word	0x3ff60000
    1320:	4001f508 	.word	0x4001f508

00001324 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    1324:	b510      	push	{r4, lr}
    1326:	f7ff ffc9 	bl	12bc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    132a:	f00c fa79 	bl	d820 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x82>
    132e:	f000 f887 	bl	1440 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    1332:	4905      	ldr	r1, [pc, #20]	; (1348 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    1334:	4803      	ldr	r0, [pc, #12]	; (1344 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x20>)
    1336:	6008      	str	r0, [r1, #0]
    1338:	f000 f8b8 	bl	14ac <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    133c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1340:	f000 b8dc 	b.w	14fc <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    1344:	3ff60000 	.word	0x3ff60000
    1348:	4001f508 	.word	0x4001f508
    134c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1350:	4682      	mov	sl, r0
    1352:	4838      	ldr	r0, [pc, #224]	; (1434 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xac>)
    1354:	f00f f897 	bl	10486 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    1358:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 1434 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xac>
    135c:	b128      	cbz	r0, 136a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x46>
    135e:	2601      	movs	r6, #1
    1360:	f10b 0001 	add.w	r0, fp, #1
    1364:	21ff      	movs	r1, #255	; 0xff
    1366:	7001      	strb	r1, [r0, #0]
    1368:	e000      	b.n	136c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x48>
    136a:	2600      	movs	r6, #0
    136c:	f44f 7580 	mov.w	r5, #256	; 0x100
    1370:	4c31      	ldr	r4, [pc, #196]	; (1438 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xb0>)
    1372:	f04f 0800 	mov.w	r8, #0
    1376:	1d2f      	adds	r7, r5, #4
    1378:	2101      	movs	r1, #1
    137a:	6061      	str	r1, [r4, #4]
    137c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    1380:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1384:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    1388:	6021      	str	r1, [r4, #0]
    138a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 143c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xb4>
    138e:	e01c      	b.n	13ca <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x42>
    1390:	f8d9 0000 	ldr.w	r0, [r9]
    1394:	06c0      	lsls	r0, r0, #27
    1396:	d518      	bpl.n	13ca <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x42>
    1398:	200e      	movs	r0, #14
    139a:	f00c fa50 	bl	d83e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa0>
    139e:	f3ef 8010 	mrs	r0, PRIMASK
    13a2:	9000      	str	r0, [sp, #0]
    13a4:	b672      	cpsid	i
    13a6:	2103      	movs	r1, #3
    13a8:	4620      	mov	r0, r4
    13aa:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    13ae:	4629      	mov	r1, r5
    13b0:	f00c fa52 	bl	d858 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    13b4:	b930      	cbnz	r0, 13c4 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x3c>
    13b6:	4639      	mov	r1, r7
    13b8:	4620      	mov	r0, r4
    13ba:	f00c fa4d 	bl	d858 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    13be:	b908      	cbnz	r0, 13c4 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x3c>
    13c0:	f00f f8f8 	bl	105b4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    13c4:	9800      	ldr	r0, [sp, #0]
    13c6:	b900      	cbnz	r0, 13ca <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x42>
    13c8:	b662      	cpsie	i
    13ca:	4629      	mov	r1, r5
    13cc:	4620      	mov	r0, r4
    13ce:	f00c fa43 	bl	d858 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    13d2:	b928      	cbnz	r0, 13e0 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x58>
    13d4:	4639      	mov	r1, r7
    13d6:	4620      	mov	r0, r4
    13d8:	f00c fa3e 	bl	d858 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    13dc:	2800      	cmp	r0, #0
    13de:	d0d7      	beq.n	1390 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x8>
    13e0:	4639      	mov	r1, r7
    13e2:	4620      	mov	r0, r4
    13e4:	f00c fa38 	bl	d858 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    13e8:	2800      	cmp	r0, #0
    13ea:	d1c5      	bne.n	1378 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x54>
    13ec:	bb06      	cbnz	r6, 1430 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xa8>
    13ee:	f89b 1001 	ldrb.w	r1, [fp, #1]
    13f2:	f88d 1000 	strb.w	r1, [sp]
    13f6:	9900      	ldr	r1, [sp, #0]
    13f8:	9100      	str	r1, [sp, #0]
    13fa:	f89d 1000 	ldrb.w	r1, [sp]
    13fe:	b109      	cbz	r1, 1404 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x7c>
    1400:	2501      	movs	r5, #1
    1402:	e000      	b.n	1406 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x7e>
    1404:	2500      	movs	r5, #0
    1406:	f10b 0001 	add.w	r0, fp, #1
    140a:	f880 8000 	strb.w	r8, [r0]
    140e:	2003      	movs	r0, #3
    1410:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    1414:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1418:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    141c:	200e      	movs	r0, #14
    141e:	f00c fa0e 	bl	d83e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa0>
    1422:	4804      	ldr	r0, [pc, #16]	; (1434 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xac>)
    1424:	f00f f846 	bl	104b4 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    1428:	b115      	cbz	r5, 1430 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xa8>
    142a:	2011      	movs	r0, #17
    142c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1430:	2000      	movs	r0, #0
    1432:	e7fb      	b.n	142c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xa4>
    1434:	20000340 	.word	0x20000340
    1438:	4000e000 	.word	0x4000e000
    143c:	e000ed10 	.word	0xe000ed10

00001440 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    1440:	b510      	push	{r4, lr}
    1442:	4806      	ldr	r0, [pc, #24]	; (145c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1444:	f00f f832 	bl	104ac <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    1448:	b118      	cbz	r0, 1452 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    144a:	2127      	movs	r1, #39	; 0x27
    144c:	201d      	movs	r0, #29
    144e:	f7ff fb09 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1452:	4802      	ldr	r0, [pc, #8]	; (145c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1454:	2100      	movs	r1, #0
    1456:	7041      	strb	r1, [r0, #1]
    1458:	bd10      	pop	{r4, pc}
    145a:	0000      	.short	0x0000
    145c:	20000340 	.word	0x20000340

00001460 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    1460:	b570      	push	{r4, r5, r6, lr}
    1462:	4911      	ldr	r1, [pc, #68]	; (14a8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    1464:	680a      	ldr	r2, [r1, #0]
    1466:	b1ea      	cbz	r2, 14a4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    1468:	2300      	movs	r3, #0
    146a:	461d      	mov	r5, r3
    146c:	2401      	movs	r4, #1
    146e:	684a      	ldr	r2, [r1, #4]
    1470:	1c52      	adds	r2, r2, #1
    1472:	604a      	str	r2, [r1, #4]
    1474:	2a0c      	cmp	r2, #12
    1476:	d300      	bcc.n	147a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    1478:	604d      	str	r5, [r1, #4]
    147a:	790e      	ldrb	r6, [r1, #4]
    147c:	fa04 f206 	lsl.w	r2, r4, r6
    1480:	680e      	ldr	r6, [r1, #0]
    1482:	4216      	tst	r6, r2
    1484:	d00b      	beq.n	149e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    1486:	f3ef 8310 	mrs	r3, PRIMASK
    148a:	b672      	cpsid	i
    148c:	680c      	ldr	r4, [r1, #0]
    148e:	4394      	bics	r4, r2
    1490:	600c      	str	r4, [r1, #0]
    1492:	b903      	cbnz	r3, 1496 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    1494:	b662      	cpsie	i
    1496:	6849      	ldr	r1, [r1, #4]
    1498:	6001      	str	r1, [r0, #0]
    149a:	2000      	movs	r0, #0
    149c:	bd70      	pop	{r4, r5, r6, pc}
    149e:	1c5b      	adds	r3, r3, #1
    14a0:	2b0c      	cmp	r3, #12
    14a2:	d3e4      	bcc.n	146e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    14a4:	2005      	movs	r0, #5
    14a6:	bd70      	pop	{r4, r5, r6, pc}
    14a8:	20000064 	.word	0x20000064

000014ac <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    14ac:	4802      	ldr	r0, [pc, #8]	; (14b8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    14ae:	2100      	movs	r1, #0
    14b0:	6001      	str	r1, [r0, #0]
    14b2:	6041      	str	r1, [r0, #4]
    14b4:	4770      	bx	lr
    14b6:	0000      	.short	0x0000
    14b8:	20000064 	.word	0x20000064

000014bc <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    14bc:	b510      	push	{r4, lr}
    14be:	4c04      	ldr	r4, [pc, #16]	; (14d0 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    14c0:	7820      	ldrb	r0, [r4, #0]
    14c2:	28ff      	cmp	r0, #255	; 0xff
    14c4:	d003      	beq.n	14ce <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    14c6:	f00b f837 	bl	c538 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    14ca:	20ff      	movs	r0, #255	; 0xff
    14cc:	7020      	strb	r0, [r4, #0]
    14ce:	bd10      	pop	{r4, pc}
    14d0:	20000000 	.word	0x20000000

000014d4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    14d4:	b510      	push	{r4, lr}
    14d6:	4c08      	ldr	r4, [pc, #32]	; (14f8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    14d8:	7861      	ldrb	r1, [r4, #1]
    14da:	b109      	cbz	r1, 14e0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    14dc:	200f      	movs	r0, #15
    14de:	bd10      	pop	{r4, pc}
    14e0:	f00a fff0 	bl	c4c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    14e4:	7020      	strb	r0, [r4, #0]
    14e6:	28ff      	cmp	r0, #255	; 0xff
    14e8:	d001      	beq.n	14ee <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    14ea:	2000      	movs	r0, #0
    14ec:	bd10      	pop	{r4, pc}
    14ee:	2173      	movs	r1, #115	; 0x73
    14f0:	201f      	movs	r0, #31
    14f2:	f7ff fab7 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    14f6:	0000      	.short	0x0000
    14f8:	20000000 	.word	0x20000000

000014fc <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    14fc:	4901      	ldr	r1, [pc, #4]	; (1504 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    14fe:	2000      	movs	r0, #0
    1500:	7048      	strb	r0, [r1, #1]
    1502:	4770      	bx	lr
    1504:	20000000 	.word	0x20000000

00001508 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    1508:	4806      	ldr	r0, [pc, #24]	; (1524 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    150a:	4a07      	ldr	r2, [pc, #28]	; (1528 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    150c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    150e:	8852      	ldrh	r2, [r2, #2]
    1510:	4291      	cmp	r1, r2
    1512:	d104      	bne.n	151e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    1514:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    1518:	b108      	cbz	r0, 151e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    151a:	2000      	movs	r0, #0
    151c:	4770      	bx	lr
    151e:	2001      	movs	r0, #1
    1520:	4770      	bx	lr
    1522:	0000      	.short	0x0000
    1524:	200014f4 	.word	0x200014f4
    1528:	2000032c 	.word	0x2000032c

0000152c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    152c:	4901      	ldr	r1, [pc, #4]	; (1534 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    152e:	8048      	strh	r0, [r1, #2]
    1530:	4770      	bx	lr
    1532:	0000      	.short	0x0000
    1534:	2000032c 	.word	0x2000032c

00001538 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    1538:	4808      	ldr	r0, [pc, #32]	; (155c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    153a:	4a09      	ldr	r2, [pc, #36]	; (1560 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    153c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    153e:	8852      	ldrh	r2, [r2, #2]
    1540:	4291      	cmp	r1, r2
    1542:	d109      	bne.n	1558 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    1544:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1548:	8481      	strh	r1, [r0, #36]	; 0x24
    154a:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    154e:	b119      	cbz	r1, 1558 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    1550:	2100      	movs	r1, #0
    1552:	7001      	strb	r1, [r0, #0]
    1554:	2001      	movs	r0, #1
    1556:	4770      	bx	lr
    1558:	2000      	movs	r0, #0
    155a:	4770      	bx	lr
    155c:	200014f4 	.word	0x200014f4
    1560:	2000032c 	.word	0x2000032c

00001564 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    1564:	4807      	ldr	r0, [pc, #28]	; (1584 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    1566:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    156a:	2901      	cmp	r1, #1
    156c:	d007      	beq.n	157e <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    156e:	2101      	movs	r1, #1
    1570:	7001      	strb	r1, [r0, #0]
    1572:	4805      	ldr	r0, [pc, #20]	; (1588 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    1574:	4903      	ldr	r1, [pc, #12]	; (1584 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    1576:	8800      	ldrh	r0, [r0, #0]
    1578:	8488      	strh	r0, [r1, #36]	; 0x24
    157a:	2001      	movs	r0, #1
    157c:	4770      	bx	lr
    157e:	2000      	movs	r0, #0
    1580:	4770      	bx	lr
    1582:	0000      	.short	0x0000
    1584:	200014f4 	.word	0x200014f4
    1588:	2000032c 	.word	0x2000032c

0000158c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    158c:	4906      	ldr	r1, [pc, #24]	; (15a8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    158e:	4b07      	ldr	r3, [pc, #28]	; (15ac <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    1590:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    1592:	885b      	ldrh	r3, [r3, #2]
    1594:	429a      	cmp	r2, r3
    1596:	d105      	bne.n	15a4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    1598:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    159c:	b112      	cbz	r2, 15a4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    159e:	6001      	str	r1, [r0, #0]
    15a0:	2001      	movs	r0, #1
    15a2:	4770      	bx	lr
    15a4:	2000      	movs	r0, #0
    15a6:	4770      	bx	lr
    15a8:	200014f4 	.word	0x200014f4
    15ac:	2000032c 	.word	0x2000032c

000015b0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    15b0:	4909      	ldr	r1, [pc, #36]	; (15d8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    15b2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    15b4:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    15b8:	3bff      	subs	r3, #255	; 0xff
    15ba:	d002      	beq.n	15c2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    15bc:	2100      	movs	r1, #0
    15be:	6001      	str	r1, [r0, #0]
    15c0:	e007      	b.n	15d2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    15c2:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    15c6:	4904      	ldr	r1, [pc, #16]	; (15d8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    15c8:	2a01      	cmp	r2, #1
    15ca:	d002      	beq.n	15d2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    15cc:	6001      	str	r1, [r0, #0]
    15ce:	2001      	movs	r0, #1
    15d0:	4770      	bx	lr
    15d2:	2000      	movs	r0, #0
    15d4:	4770      	bx	lr
    15d6:	0000      	.short	0x0000
    15d8:	200014f4 	.word	0x200014f4

000015dc <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    15dc:	4901      	ldr	r1, [pc, #4]	; (15e4 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    15de:	8008      	strh	r0, [r1, #0]
    15e0:	4770      	bx	lr
    15e2:	0000      	.short	0x0000
    15e4:	2000032c 	.word	0x2000032c

000015e8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    15e8:	4905      	ldr	r1, [pc, #20]	; (1600 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    15ea:	2000      	movs	r0, #0
    15ec:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    15f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
    15f4:	8488      	strh	r0, [r1, #36]	; 0x24
    15f6:	4903      	ldr	r1, [pc, #12]	; (1604 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    15f8:	8008      	strh	r0, [r1, #0]
    15fa:	8048      	strh	r0, [r1, #2]
    15fc:	4770      	bx	lr
    15fe:	0000      	.short	0x0000
    1600:	200014f4 	.word	0x200014f4
    1604:	2000032c 	.word	0x2000032c
    1608:	4905      	ldr	r1, [pc, #20]	; (1620 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    160a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    160c:	4282      	cmp	r2, r0
    160e:	d105      	bne.n	161c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    1610:	2000      	movs	r0, #0
    1612:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    1616:	f64f 70ff 	movw	r0, #65535	; 0xffff
    161a:	8488      	strh	r0, [r1, #36]	; 0x24
    161c:	4770      	bx	lr
    161e:	0000      	.short	0x0000
    1620:	200014f4 	.word	0x200014f4

00001624 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    1624:	4a0a      	ldr	r2, [pc, #40]	; (1650 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    1626:	b110      	cbz	r0, 162e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    1628:	2801      	cmp	r0, #1
    162a:	d007      	beq.n	163c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    162c:	e00e      	b.n	164c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    162e:	7850      	ldrb	r0, [r2, #1]
    1630:	b160      	cbz	r0, 164c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1632:	f8d2 0002 	ldr.w	r0, [r2, #2]
    1636:	6008      	str	r0, [r1, #0]
    1638:	88d0      	ldrh	r0, [r2, #6]
    163a:	e004      	b.n	1646 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    163c:	7810      	ldrb	r0, [r2, #0]
    163e:	b128      	cbz	r0, 164c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1640:	6890      	ldr	r0, [r2, #8]
    1642:	6008      	str	r0, [r1, #0]
    1644:	8990      	ldrh	r0, [r2, #12]
    1646:	8088      	strh	r0, [r1, #4]
    1648:	2001      	movs	r0, #1
    164a:	4770      	bx	lr
    164c:	2000      	movs	r0, #0
    164e:	4770      	bx	lr
    1650:	20000342 	.word	0x20000342

00001654 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    1654:	4a08      	ldr	r2, [pc, #32]	; (1678 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    1656:	2301      	movs	r3, #1
    1658:	b138      	cbz	r0, 166a <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    165a:	2801      	cmp	r0, #1
    165c:	d104      	bne.n	1668 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    165e:	7013      	strb	r3, [r2, #0]
    1660:	6808      	ldr	r0, [r1, #0]
    1662:	6090      	str	r0, [r2, #8]
    1664:	8888      	ldrh	r0, [r1, #4]
    1666:	8190      	strh	r0, [r2, #12]
    1668:	4770      	bx	lr
    166a:	7053      	strb	r3, [r2, #1]
    166c:	6808      	ldr	r0, [r1, #0]
    166e:	f8c2 0002 	str.w	r0, [r2, #2]
    1672:	8888      	ldrh	r0, [r1, #4]
    1674:	80d0      	strh	r0, [r2, #6]
    1676:	4770      	bx	lr
    1678:	20000342 	.word	0x20000342

0000167c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    167c:	4906      	ldr	r1, [pc, #24]	; (1698 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    167e:	b110      	cbz	r0, 1686 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    1680:	2801      	cmp	r0, #1
    1682:	d002      	beq.n	168a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    1684:	e005      	b.n	1692 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    1686:	7848      	ldrb	r0, [r1, #1]
    1688:	e000      	b.n	168c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    168a:	7808      	ldrb	r0, [r1, #0]
    168c:	b108      	cbz	r0, 1692 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    168e:	2001      	movs	r0, #1
    1690:	4770      	bx	lr
    1692:	2000      	movs	r0, #0
    1694:	4770      	bx	lr
    1696:	0000      	.short	0x0000
    1698:	20000342 	.word	0x20000342

0000169c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    169c:	4901      	ldr	r1, [pc, #4]	; (16a4 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    169e:	7708      	strb	r0, [r1, #28]
    16a0:	4770      	bx	lr
    16a2:	0000      	.short	0x0000
    16a4:	20000c7a 	.word	0x20000c7a

000016a8 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    16a8:	b570      	push	{r4, r5, r6, lr}
    16aa:	460c      	mov	r4, r1
    16ac:	4605      	mov	r5, r0
    16ae:	f000 f92b 	bl	1908 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    16b2:	b118      	cbz	r0, 16bc <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x14>
    16b4:	21d0      	movs	r1, #208	; 0xd0
    16b6:	2027      	movs	r0, #39	; 0x27
    16b8:	f7ff f9d4 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    16bc:	4803      	ldr	r0, [pc, #12]	; (16cc <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    16be:	2101      	movs	r1, #1
    16c0:	f00c fcfa 	bl	e0b8 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    16c4:	4802      	ldr	r0, [pc, #8]	; (16d0 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x28>)
    16c6:	e9c0 540b 	strd	r5, r4, [r0, #44]	; 0x2c
    16ca:	bd70      	pop	{r4, r5, r6, pc}
    16cc:	20000c58 	.word	0x20000c58
    16d0:	2000006c 	.word	0x2000006c

000016d4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    16d4:	4901      	ldr	r1, [pc, #4]	; (16dc <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    16d6:	2001      	movs	r0, #1
    16d8:	7148      	strb	r0, [r1, #5]
    16da:	4770      	bx	lr
    16dc:	2000006c 	.word	0x2000006c

000016e0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    16e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16e4:	4e65      	ldr	r6, [pc, #404]	; (187c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x19c>)
    16e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    16e8:	7835      	ldrb	r5, [r6, #0]
    16ea:	bbed      	cbnz	r5, 1768 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    16ec:	b3e2      	cbz	r2, 1768 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    16ee:	b3db      	cbz	r3, 1768 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    16f0:	b3d4      	cbz	r4, 1768 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    16f2:	f106 0514 	add.w	r5, r6, #20
    16f6:	e9c6 010f 	strd	r0, r1, [r6, #60]	; 0x3c
    16fa:	e885 001c 	stmia.w	r5, {r2, r3, r4}
    16fe:	2700      	movs	r7, #0
    1700:	7177      	strb	r7, [r6, #5]
    1702:	7137      	strb	r7, [r6, #4]
    1704:	70b7      	strb	r7, [r6, #2]
    1706:	7077      	strb	r7, [r6, #1]
    1708:	70f7      	strb	r7, [r6, #3]
    170a:	81b7      	strh	r7, [r6, #12]
    170c:	81f7      	strh	r7, [r6, #14]
    170e:	f000 f959 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1712:	4605      	mov	r5, r0
    1714:	f000 f950 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1718:	4604      	mov	r4, r0
    171a:	f006 fc4d 	bl	7fb8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    171e:	f006 f9ed 	bl	7afc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1722:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    1726:	f006 fccb 	bl	80c0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    172a:	69e0      	ldr	r0, [r4, #28]
    172c:	f006 fdae 	bl	828c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    1730:	6960      	ldr	r0, [r4, #20]
    1732:	f006 fda1 	bl	8278 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    1736:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
    173a:	f006 fdd7 	bl	82ec <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    173e:	f04f 0b01 	mov.w	fp, #1
    1742:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    1746:	2000      	movs	r0, #0
    1748:	f006 fb3c 	bl	7dc4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    174c:	2800      	cmp	r0, #0
    174e:	d07d      	beq.n	184c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16c>
    1750:	484b      	ldr	r0, [pc, #300]	; (1880 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a0>)
    1752:	f006 fb9b 	bl	7e8c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    1756:	8820      	ldrh	r0, [r4, #0]
    1758:	f7ff fd66 	bl	1228 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    175c:	6370      	str	r0, [r6, #52]	; 0x34
    175e:	8820      	ldrh	r0, [r4, #0]
    1760:	f7ff fd4c 	bl	11fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    1764:	63b0      	str	r0, [r6, #56]	; 0x38
    1766:	e000      	b.n	176a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x8a>
    1768:	e009      	b.n	177e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x9e>
    176a:	f894 0077 	ldrb.w	r0, [r4, #119]	; 0x77
    176e:	f88d 0000 	strb.w	r0, [sp]
    1772:	9800      	ldr	r0, [sp, #0]
    1774:	9000      	str	r0, [sp, #0]
    1776:	f89d 0000 	ldrb.w	r0, [sp]
    177a:	b9a8      	cbnz	r0, 17a8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc8>
    177c:	e002      	b.n	1784 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa4>
    177e:	f240 1145 	movw	r1, #325	; 0x145
    1782:	e077      	b.n	1874 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x194>
    1784:	6f20      	ldr	r0, [r4, #112]	; 0x70
    1786:	b178      	cbz	r0, 17a8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc8>
    1788:	f8b5 004a 	ldrh.w	r0, [r5, #74]	; 0x4a
    178c:	8aa9      	ldrh	r1, [r5, #20]
    178e:	4288      	cmp	r0, r1
    1790:	d10a      	bne.n	17a8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc8>
    1792:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    1796:	2201      	movs	r2, #1
    1798:	4408      	add	r0, r1
    179a:	f8a5 004a 	strh.w	r0, [r5, #74]	; 0x4a
    179e:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    17a2:	6f21      	ldr	r1, [r4, #112]	; 0x70
    17a4:	f009 fcd6 	bl	b154 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    17a8:	f105 0288 	add.w	r2, r5, #136	; 0x88
    17ac:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 1884 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>
    17b0:	e892 110c 	ldmia.w	r2, {r2, r3, r8, ip}
    17b4:	e889 110c 	stmia.w	r9, {r2, r3, r8, ip}
    17b8:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
    17bc:	f8c9 2019 	str.w	r2, [r9, #25]
    17c0:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
    17c4:	f8c9 101d 	str.w	r1, [r9, #29]
    17c8:	f000 f930 	bl	1a2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    17cc:	8f22      	ldrh	r2, [r4, #56]	; 0x38
    17ce:	4601      	mov	r1, r0
    17d0:	46ba      	mov	sl, r7
    17d2:	4610      	mov	r0, r2
    17d4:	f00c fa13 	bl	dbfe <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    17d8:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    17da:	4281      	cmp	r1, r0
    17dc:	d200      	bcs.n	17e0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x100>
    17de:	4608      	mov	r0, r1
    17e0:	71b0      	strb	r0, [r6, #6]
    17e2:	46b0      	mov	r8, r6
    17e4:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    17e8:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    17ea:	f895 7023 	ldrb.w	r7, [r5, #35]	; 0x23
    17ee:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
    17f0:	2908      	cmp	r1, #8
    17f2:	d100      	bne.n	17f6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x116>
    17f4:	2104      	movs	r1, #4
    17f6:	f00c fa02 	bl	dbfe <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    17fa:	b90f      	cbnz	r7, 1800 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x120>
    17fc:	1d00      	adds	r0, r0, #4
    17fe:	b280      	uxth	r0, r0
    1800:	4286      	cmp	r6, r0
    1802:	d200      	bcs.n	1806 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x126>
    1804:	4630      	mov	r0, r6
    1806:	f888 0007 	strb.w	r0, [r8, #7]
    180a:	f888 0008 	strb.w	r0, [r8, #8]
    180e:	f895 0022 	ldrb.w	r0, [r5, #34]	; 0x22
    1812:	b188      	cbz	r0, 1838 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x158>
    1814:	f889 b018 	strb.w	fp, [r9, #24]
    1818:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    181c:	e9c9 1204 	strd	r1, r2, [r9, #16]
    1820:	4656      	mov	r6, sl
    1822:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1826:	f00c f8c7 	bl	d9b8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    182a:	4603      	mov	r3, r0
    182c:	22fb      	movs	r2, #251	; 0xfb
    182e:	4915      	ldr	r1, [pc, #84]	; (1884 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>)
    1830:	4630      	mov	r0, r6
    1832:	9600      	str	r6, [sp, #0]
    1834:	f006 f8ce 	bl	79d4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1838:	2001      	movs	r0, #1
    183a:	f000 fb71 	bl	1f20 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d4>
    183e:	4812      	ldr	r0, [pc, #72]	; (1888 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
    1840:	6800      	ldr	r0, [r0, #0]
    1842:	2803      	cmp	r0, #3
    1844:	d014      	beq.n	1870 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x190>
    1846:	280b      	cmp	r0, #11
    1848:	d012      	beq.n	1870 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x190>
    184a:	e000      	b.n	184e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16e>
    184c:	e00e      	b.n	186c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>
    184e:	480d      	ldr	r0, [pc, #52]	; (1884 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>)
    1850:	220e      	movs	r2, #14
    1852:	2100      	movs	r1, #0
    1854:	304a      	adds	r0, #74	; 0x4a
    1856:	f00e ff84 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    185a:	480a      	ldr	r0, [pc, #40]	; (1884 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>)
    185c:	8aa9      	ldrh	r1, [r5, #20]
    185e:	304a      	adds	r0, #74	; 0x4a
    1860:	8041      	strh	r1, [r0, #2]
    1862:	8821      	ldrh	r1, [r4, #0]
    1864:	8001      	strh	r1, [r0, #0]
    1866:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
    186a:	7101      	strb	r1, [r0, #4]
    186c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1870:	f240 2102 	movw	r1, #514	; 0x202
    1874:	2027      	movs	r0, #39	; 0x27
    1876:	f7ff f8f5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    187a:	0000      	.short	0x0000
    187c:	2000006c 	.word	0x2000006c
    1880:	000020a8 	.word	0x000020a8
    1884:	20000c30 	.word	0x20000c30
    1888:	40001550 	.word	0x40001550

0000188c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    188c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    1890:	4688      	mov	r8, r1
    1892:	4607      	mov	r7, r0
    1894:	f000 f896 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1898:	4c1a      	ldr	r4, [pc, #104]	; (1904 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x78>)
    189a:	4605      	mov	r5, r0
    189c:	07b8      	lsls	r0, r7, #30
    189e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    18a0:	784e      	ldrb	r6, [r1, #1]
    18a2:	d516      	bpl.n	18d2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x46>
    18a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    18a6:	b330      	cbz	r0, 18f6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x6a>
    18a8:	8962      	ldrh	r2, [r4, #10]
    18aa:	1cd2      	adds	r2, r2, #3
    18ac:	f00e fedf 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    18b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    18b2:	6260      	str	r0, [r4, #36]	; 0x24
    18b4:	4669      	mov	r1, sp
    18b6:	aa01      	add	r2, sp, #4
    18b8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    18ba:	f00b fdd6 	bl	d46a <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    18be:	9800      	ldr	r0, [sp, #0]
    18c0:	f00b fd70 	bl	d3a4 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    18c4:	f8c8 0000 	str.w	r0, [r8]
    18c8:	4631      	mov	r1, r6
    18ca:	2201      	movs	r2, #1
    18cc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    18ce:	f00b fd20 	bl	d312 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    18d2:	07f8      	lsls	r0, r7, #31
    18d4:	d00d      	beq.n	18f2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    18d6:	e9d5 0120 	ldrd	r0, r1, [r5, #128]	; 0x80
    18da:	3518      	adds	r5, #24
    18dc:	1c40      	adds	r0, r0, #1
    18de:	f141 0100 	adc.w	r1, r1, #0
    18e2:	e9c5 011a 	strd	r0, r1, [r5, #104]	; 0x68
    18e6:	f815 0918 	ldrb.w	r0, [r5], #-24
    18ea:	2801      	cmp	r0, #1
    18ec:	d008      	beq.n	1900 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x74>
    18ee:	2001      	movs	r0, #1
    18f0:	7628      	strb	r0, [r5, #24]
    18f2:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    18f6:	f240 4166 	movw	r1, #1126	; 0x466
    18fa:	2027      	movs	r0, #39	; 0x27
    18fc:	f7ff f8b2 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1900:	2000      	movs	r0, #0
    1902:	e7f5      	b.n	18f0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x64>
    1904:	2000006c 	.word	0x2000006c

00001908 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    1908:	4804      	ldr	r0, [pc, #16]	; (191c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    190a:	7800      	ldrb	r0, [r0, #0]
    190c:	b108      	cbz	r0, 1912 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    190e:	200c      	movs	r0, #12
    1910:	4770      	bx	lr
    1912:	4903      	ldr	r1, [pc, #12]	; (1920 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    1914:	2000      	movs	r0, #0
    1916:	7708      	strb	r0, [r1, #28]
    1918:	4770      	bx	lr
    191a:	0000      	.short	0x0000
    191c:	2000006c 	.word	0x2000006c
    1920:	20000c7a 	.word	0x20000c7a

00001924 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    1924:	4812      	ldr	r0, [pc, #72]	; (1970 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>)
    1926:	b508      	push	{r3, lr}
    1928:	7801      	ldrb	r1, [r0, #0]
    192a:	b139      	cbz	r1, 193c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18>
    192c:	7800      	ldrb	r0, [r0, #0]
    192e:	2801      	cmp	r0, #1
    1930:	d006      	beq.n	1940 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    1932:	f240 211a 	movw	r1, #538	; 0x21a
    1936:	2027      	movs	r0, #39	; 0x27
    1938:	f7ff f894 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    193c:	f000 f9ca 	bl	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    1940:	f000 f83a 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1944:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    1948:	f88d 1000 	strb.w	r1, [sp]
    194c:	9900      	ldr	r1, [sp, #0]
    194e:	9100      	str	r1, [sp, #0]
    1950:	f89d 1000 	ldrb.w	r1, [sp]
    1954:	2900      	cmp	r1, #0
    1956:	d10a      	bne.n	196e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    1958:	6f01      	ldr	r1, [r0, #112]	; 0x70
    195a:	2900      	cmp	r1, #0
    195c:	d007      	beq.n	196e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    195e:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    1962:	2200      	movs	r2, #0
    1964:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    1968:	4611      	mov	r1, r2
    196a:	f009 bbf3 	b.w	b154 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    196e:	bd08      	pop	{r3, pc}
    1970:	2000006c 	.word	0x2000006c
    1974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1976:	2600      	movs	r6, #0
    1978:	4605      	mov	r5, r0
    197a:	704e      	strb	r6, [r1, #1]
    197c:	2022      	movs	r0, #34	; 0x22
    197e:	4f09      	ldr	r7, [pc, #36]	; (19a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x80>)
    1980:	460c      	mov	r4, r1
    1982:	7008      	strb	r0, [r1, #0]
    1984:	722e      	strb	r6, [r5, #8]
    1986:	220e      	movs	r2, #14
    1988:	4639      	mov	r1, r7
    198a:	1d20      	adds	r0, r4, #4
    198c:	f00e fe6f 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1990:	7a28      	ldrb	r0, [r5, #8]
    1992:	f88d 0000 	strb.w	r0, [sp]
    1996:	9800      	ldr	r0, [sp, #0]
    1998:	9000      	str	r0, [sp, #0]
    199a:	f89d 0000 	ldrb.w	r0, [sp]
    199e:	2800      	cmp	r0, #0
    19a0:	d1f0      	bne.n	1984 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    19a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19a4:	20000c88 	.word	0x20000c88
    19a8:	4a02      	ldr	r2, [pc, #8]	; (19b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x90>)
    19aa:	8993      	ldrh	r3, [r2, #12]
    19ac:	4303      	orrs	r3, r0
    19ae:	8193      	strh	r3, [r2, #12]
    19b0:	6952      	ldr	r2, [r2, #20]
    19b2:	4710      	bx	r2
    19b4:	2000006c 	.word	0x2000006c
    19b8:	4801      	ldr	r0, [pc, #4]	; (19c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x9c>)
    19ba:	6840      	ldr	r0, [r0, #4]
    19bc:	4770      	bx	lr
    19be:	0000      	.short	0x0000
    19c0:	200000a8 	.word	0x200000a8
    19c4:	4801      	ldr	r0, [pc, #4]	; (19cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa8>)
    19c6:	6840      	ldr	r0, [r0, #4]
    19c8:	3088      	adds	r0, #136	; 0x88
    19ca:	4770      	bx	lr
    19cc:	200000a8 	.word	0x200000a8
    19d0:	4a01      	ldr	r2, [pc, #4]	; (19d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>)
    19d2:	2100      	movs	r1, #0
    19d4:	6952      	ldr	r2, [r2, #20]
    19d6:	4710      	bx	r2
    19d8:	2000006c 	.word	0x2000006c
    19dc:	b570      	push	{r4, r5, r6, lr}
    19de:	4605      	mov	r5, r0
    19e0:	2901      	cmp	r1, #1
    19e2:	d81c      	bhi.n	1a1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    19e4:	4c10      	ldr	r4, [pc, #64]	; (1a28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>)
    19e6:	69a1      	ldr	r1, [r4, #24]
    19e8:	4788      	blx	r1
    19ea:	b1c0      	cbz	r0, 1a1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    19ec:	7920      	ldrb	r0, [r4, #4]
    19ee:	b9b0      	cbnz	r0, 1a1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    19f0:	2d01      	cmp	r5, #1
    19f2:	d116      	bne.n	1a22 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    19f4:	f104 0010 	add.w	r0, r4, #16
    19f8:	7800      	ldrb	r0, [r0, #0]
    19fa:	06c1      	lsls	r1, r0, #27
    19fc:	d405      	bmi.n	1a0a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
    19fe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    1a00:	7809      	ldrb	r1, [r1, #0]
    1a02:	06c9      	lsls	r1, r1, #27
    1a04:	d401      	bmi.n	1a0a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
    1a06:	2101      	movs	r1, #1
    1a08:	e000      	b.n	1a0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe8>
    1a0a:	2100      	movs	r1, #0
    1a0c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1a0e:	b91a      	cbnz	r2, 1a18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf4>
    1a10:	8962      	ldrh	r2, [r4, #10]
    1a12:	b10a      	cbz	r2, 1a18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf4>
    1a14:	06c0      	lsls	r0, r0, #27
    1a16:	d502      	bpl.n	1a1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    1a18:	89a0      	ldrh	r0, [r4, #12]
    1a1a:	4301      	orrs	r1, r0
    1a1c:	d001      	beq.n	1a22 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    1a1e:	2001      	movs	r0, #1
    1a20:	bd70      	pop	{r4, r5, r6, pc}
    1a22:	2000      	movs	r0, #0
    1a24:	bd70      	pop	{r4, r5, r6, pc}
    1a26:	0000      	.short	0x0000
    1a28:	2000006c 	.word	0x2000006c
    1a2c:	b510      	push	{r4, lr}
    1a2e:	f7ff ffc3 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1a32:	4604      	mov	r4, r0
    1a34:	f7ff ffc6 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1a38:	4601      	mov	r1, r0
    1a3a:	7f40      	ldrb	r0, [r0, #29]
    1a3c:	4a0b      	ldr	r2, [pc, #44]	; (1a6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x148>)
    1a3e:	2825      	cmp	r0, #37	; 0x25
    1a40:	d00a      	beq.n	1a58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    1a42:	2826      	cmp	r0, #38	; 0x26
    1a44:	d008      	beq.n	1a58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    1a46:	7f89      	ldrb	r1, [r1, #30]
    1a48:	2925      	cmp	r1, #37	; 0x25
    1a4a:	d005      	beq.n	1a58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    1a4c:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1a50:	2804      	cmp	r0, #4
    1a52:	d100      	bne.n	1a56 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x132>
    1a54:	2008      	movs	r0, #8
    1a56:	bd10      	pop	{r4, pc}
    1a58:	6850      	ldr	r0, [r2, #4]
    1a5a:	f890 1262 	ldrb.w	r1, [r0, #610]	; 0x262
    1a5e:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1a66:	f00b bfb5 	b.w	d9d4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x20>
    1a6a:	0000      	.short	0x0000
    1a6c:	200000a8 	.word	0x200000a8
    1a70:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1a74:	468b      	mov	fp, r1
    1a76:	4681      	mov	r9, r0
    1a78:	f7ff ffa4 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1a7c:	2700      	movs	r7, #0
    1a7e:	4c64      	ldr	r4, [pc, #400]	; (1c10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>)
    1a80:	4606      	mov	r6, r0
    1a82:	f88d 7008 	strb.w	r7, [sp, #8]
    1a86:	9703      	str	r7, [sp, #12]
    1a88:	9701      	str	r7, [sp, #4]
    1a8a:	7820      	ldrb	r0, [r4, #0]
    1a8c:	463d      	mov	r5, r7
    1a8e:	2802      	cmp	r0, #2
    1a90:	d004      	beq.n	1a9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x178>
    1a92:	f240 41ea 	movw	r1, #1258	; 0x4ea
    1a96:	2027      	movs	r0, #39	; 0x27
    1a98:	f7fe ffe4 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1a9c:	7ba0      	ldrb	r0, [r4, #14]
    1a9e:	0640      	lsls	r0, r0, #25
    1aa0:	d406      	bmi.n	1ab0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
    1aa2:	2040      	movs	r0, #64	; 0x40
    1aa4:	f7ff ff94 	bl	19d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xac>
    1aa8:	89e0      	ldrh	r0, [r4, #14]
    1aaa:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    1aae:	81e0      	strh	r0, [r4, #14]
    1ab0:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    1ab4:	f04f 0801 	mov.w	r8, #1
    1ab8:	f1b9 0f00 	cmp.w	r9, #0
    1abc:	d03a      	beq.n	1b34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x210>
    1abe:	b180      	cbz	r0, 1ae2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    1ac0:	f006 f856 	bl	7b70 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    1ac4:	f006 f830 	bl	7b28 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    1ac8:	b958      	cbnz	r0, 1ae2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    1aca:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1acc:	7841      	ldrb	r1, [r0, #1]
    1ace:	b141      	cbz	r1, 1ae2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    1ad0:	7800      	ldrb	r0, [r0, #0]
    1ad2:	7e31      	ldrb	r1, [r6, #24]
    1ad4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1ad8:	4288      	cmp	r0, r1
    1ada:	d102      	bne.n	1ae2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    1adc:	f884 8001 	strb.w	r8, [r4, #1]
    1ae0:	e092      	b.n	1c08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e4>
    1ae2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1ae4:	7841      	ldrb	r1, [r0, #1]
    1ae6:	8161      	strh	r1, [r4, #10]
    1ae8:	b121      	cbz	r1, 1af4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d0>
    1aea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    1aec:	f00b fd93 	bl	d616 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    1af0:	62a0      	str	r0, [r4, #40]	; 0x28
    1af2:	e000      	b.n	1af6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d2>
    1af4:	62a5      	str	r5, [r4, #40]	; 0x28
    1af6:	89e0      	ldrh	r0, [r4, #14]
    1af8:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    1afc:	81e0      	strh	r0, [r4, #14]
    1afe:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1b00:	7df1      	ldrb	r1, [r6, #23]
    1b02:	7800      	ldrb	r0, [r0, #0]
    1b04:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1b08:	4288      	cmp	r0, r1
    1b0a:	d007      	beq.n	1b1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1f8>
    1b0c:	a803      	add	r0, sp, #12
    1b0e:	f000 f985 	bl	1e1c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd0>
    1b12:	89e0      	ldrh	r0, [r4, #14]
    1b14:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    1b18:	81e0      	strh	r0, [r4, #14]
    1b1a:	e000      	b.n	1b1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1fa>
    1b1c:	2701      	movs	r7, #1
    1b1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1b20:	7e31      	ldrb	r1, [r6, #24]
    1b22:	7800      	ldrb	r0, [r0, #0]
    1b24:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1b28:	4288      	cmp	r0, r1
    1b2a:	d10d      	bne.n	1b48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x224>
    1b2c:	a802      	add	r0, sp, #8
    1b2e:	f000 f92b 	bl	1d88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c>
    1b32:	e009      	b.n	1b48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x224>
    1b34:	b108      	cbz	r0, 1b3a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x216>
    1b36:	f006 f815 	bl	7b64 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    1b3a:	78a0      	ldrb	r0, [r4, #2]
    1b3c:	1c40      	adds	r0, r0, #1
    1b3e:	70a0      	strb	r0, [r4, #2]
    1b40:	89e0      	ldrh	r0, [r4, #14]
    1b42:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    1b46:	81e0      	strh	r0, [r4, #14]
    1b48:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 1c10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>
    1b4c:	f896 0022 	ldrb.w	r0, [r6, #34]	; 0x22
    1b50:	f10a 0a3c 	add.w	sl, sl, #60	; 0x3c
    1b54:	b198      	cbz	r0, 1b7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x25a>
    1b56:	f7ff ff2f 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1b5a:	492e      	ldr	r1, [pc, #184]	; (1c14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f0>)
    1b5c:	f881 8018 	strb.w	r8, [r1, #24]
    1b60:	e9d6 231e 	ldrd	r2, r3, [r6, #120]	; 0x78
    1b64:	e9c1 2304 	strd	r2, r3, [r1, #16]
    1b68:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    1b6c:	f00b ff24 	bl	d9b8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    1b70:	4603      	mov	r3, r0
    1b72:	22fb      	movs	r2, #251	; 0xfb
    1b74:	4927      	ldr	r1, [pc, #156]	; (1c14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f0>)
    1b76:	4628      	mov	r0, r5
    1b78:	9500      	str	r5, [sp, #0]
    1b7a:	f005 ff2b 	bl	79d4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1b7e:	f04f 0800 	mov.w	r8, #0
    1b82:	f1bb 0f00 	cmp.w	fp, #0
    1b86:	d104      	bne.n	1b92 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26e>
    1b88:	78a1      	ldrb	r1, [r4, #2]
    1b8a:	2001      	movs	r0, #1
    1b8c:	f7ff ff26 	bl	19dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    1b90:	b120      	cbz	r0, 1b9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x278>
    1b92:	f006 fb5d 	bl	8250 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    1b96:	f04f 0801 	mov.w	r8, #1
    1b9a:	e002      	b.n	1ba2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x27e>
    1b9c:	2000      	movs	r0, #0
    1b9e:	f000 f9bf 	bl	1f20 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d4>
    1ba2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1ba6:	b118      	cbz	r0, 1bb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28c>
    1ba8:	a901      	add	r1, sp, #4
    1baa:	2002      	movs	r0, #2
    1bac:	f7ff fe6e 	bl	188c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    1bb0:	4818      	ldr	r0, [pc, #96]	; (1c14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f0>)
    1bb2:	304a      	adds	r0, #74	; 0x4a
    1bb4:	b117      	cbz	r7, 1bbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x298>
    1bb6:	8942      	ldrh	r2, [r0, #10]
    1bb8:	1c52      	adds	r2, r2, #1
    1bba:	8142      	strh	r2, [r0, #10]
    1bbc:	f1b9 0f00 	cmp.w	r9, #0
    1bc0:	d008      	beq.n	1bd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b0>
    1bc2:	88c1      	ldrh	r1, [r0, #6]
    1bc4:	1c49      	adds	r1, r1, #1
    1bc6:	80c1      	strh	r1, [r0, #6]
    1bc8:	4811      	ldr	r0, [pc, #68]	; (1c10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>)
    1bca:	70a5      	strb	r5, [r4, #2]
    1bcc:	303c      	adds	r0, #60	; 0x3c
    1bce:	f001 fa1d 	bl	300c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
    1bd2:	e002      	b.n	1bda <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    1bd4:	8901      	ldrh	r1, [r0, #8]
    1bd6:	1c49      	adds	r1, r1, #1
    1bd8:	8101      	strh	r1, [r0, #8]
    1bda:	9803      	ldr	r0, [sp, #12]
    1bdc:	b140      	cbz	r0, 1bf0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2cc>
    1bde:	f00b fbe1 	bl	d3a4 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    1be2:	f8da 1004 	ldr.w	r1, [sl, #4]
    1be6:	1c40      	adds	r0, r0, #1
    1be8:	7205      	strb	r5, [r0, #8]
    1bea:	220e      	movs	r2, #14
    1bec:	f00c fa97 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    1bf0:	9801      	ldr	r0, [sp, #4]
    1bf2:	b130      	cbz	r0, 1c02 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2de>
    1bf4:	f8da 1004 	ldr.w	r1, [sl, #4]
    1bf8:	7205      	strb	r5, [r0, #8]
    1bfa:	222a      	movs	r2, #42	; 0x2a
    1bfc:	9801      	ldr	r0, [sp, #4]
    1bfe:	f00c fa8e 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    1c02:	f1b8 0f00 	cmp.w	r8, #0
    1c06:	d001      	beq.n	1c0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e8>
    1c08:	f000 f864 	bl	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    1c0c:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1c10:	2000006c 	.word	0x2000006c
    1c14:	20000c30 	.word	0x20000c30
    1c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1c1c:	4688      	mov	r8, r1
    1c1e:	4681      	mov	r9, r0
    1c20:	f7ff fed0 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1c24:	4d29      	ldr	r5, [pc, #164]	; (1ccc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a8>)
    1c26:	4604      	mov	r4, r0
    1c28:	7828      	ldrb	r0, [r5, #0]
    1c2a:	2801      	cmp	r0, #1
    1c2c:	d004      	beq.n	1c38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>
    1c2e:	f240 4175 	movw	r1, #1141	; 0x475
    1c32:	2027      	movs	r0, #39	; 0x27
    1c34:	f7fe ff16 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1c38:	7c20      	ldrb	r0, [r4, #16]
    1c3a:	2600      	movs	r6, #0
    1c3c:	2701      	movs	r7, #1
    1c3e:	b120      	cbz	r0, 1c4a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x326>
    1c40:	7426      	strb	r6, [r4, #16]
    1c42:	2100      	movs	r1, #0
    1c44:	2004      	movs	r0, #4
    1c46:	f7ff feaf 	bl	19a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1c4a:	6a29      	ldr	r1, [r5, #32]
    1c4c:	7808      	ldrb	r0, [r1, #0]
    1c4e:	43c0      	mvns	r0, r0
    1c50:	0780      	lsls	r0, r0, #30
    1c52:	d109      	bne.n	1c68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x344>
    1c54:	7da0      	ldrb	r0, [r4, #22]
    1c56:	bb88      	cbnz	r0, 1cbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x398>
    1c58:	2002      	movs	r0, #2
    1c5a:	f7ff fea5 	bl	19a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1c5e:	6a28      	ldr	r0, [r5, #32]
    1c60:	7800      	ldrb	r0, [r0, #0]
    1c62:	43c0      	mvns	r0, r0
    1c64:	0780      	lsls	r0, r0, #30
    1c66:	d029      	beq.n	1cbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x398>
    1c68:	6a28      	ldr	r0, [r5, #32]
    1c6a:	7840      	ldrb	r0, [r0, #1]
    1c6c:	b110      	cbz	r0, 1c74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x350>
    1c6e:	2002      	movs	r0, #2
    1c70:	75a0      	strb	r0, [r4, #22]
    1c72:	e000      	b.n	1c76 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x352>
    1c74:	75a7      	strb	r7, [r4, #22]
    1c76:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
    1c7a:	b198      	cbz	r0, 1ca4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x380>
    1c7c:	f7ff fe9c 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1c80:	4913      	ldr	r1, [pc, #76]	; (1cd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ac>)
    1c82:	7a2d      	ldrb	r5, [r5, #8]
    1c84:	760e      	strb	r6, [r1, #24]
    1c86:	e9d4 2320 	ldrd	r2, r3, [r4, #128]	; 0x80
    1c8a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    1c8e:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    1c92:	f00b fe91 	bl	d9b8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    1c96:	4603      	mov	r3, r0
    1c98:	462a      	mov	r2, r5
    1c9a:	490d      	ldr	r1, [pc, #52]	; (1cd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ac>)
    1c9c:	4638      	mov	r0, r7
    1c9e:	9600      	str	r6, [sp, #0]
    1ca0:	f005 fe98 	bl	79d4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1ca4:	ea38 0009 	bics.w	r0, r8, r9
    1ca8:	d004      	beq.n	1cb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x390>
    1caa:	2100      	movs	r1, #0
    1cac:	4608      	mov	r0, r1
    1cae:	f7ff fe95 	bl	19dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    1cb2:	b128      	cbz	r0, 1cc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x39c>
    1cb4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1cb8:	f000 b80c 	b.w	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    1cbc:	2003      	movs	r0, #3
    1cbe:	e7d7      	b.n	1c70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    1cc0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1cc4:	2000      	movs	r0, #0
    1cc6:	f000 b8ef 	b.w	1ea8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15c>
    1cca:	0000      	.short	0x0000
    1ccc:	2000006c 	.word	0x2000006c
    1cd0:	20000c30 	.word	0x20000c30
    1cd4:	b510      	push	{r4, lr}
    1cd6:	f005 ffeb 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1cda:	f005 ff0f 	bl	7afc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1cde:	4c0d      	ldr	r4, [pc, #52]	; (1d14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>)
    1ce0:	89e0      	ldrh	r0, [r4, #14]
    1ce2:	f7ff fe75 	bl	19d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xac>
    1ce6:	480c      	ldr	r0, [pc, #48]	; (1d18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f4>)
    1ce8:	7f00      	ldrb	r0, [r0, #28]
    1cea:	b158      	cbz	r0, 1d04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e0>
    1cec:	490a      	ldr	r1, [pc, #40]	; (1d18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f4>)
    1cee:	220e      	movs	r2, #14
    1cf0:	f101 000e 	add.w	r0, r1, #14
    1cf4:	f00e fcbb 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1cf8:	4807      	ldr	r0, [pc, #28]	; (1d18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f4>)
    1cfa:	2224      	movs	r2, #36	; 0x24
    1cfc:	4907      	ldr	r1, [pc, #28]	; (1d1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f8>)
    1cfe:	301d      	adds	r0, #29
    1d00:	f00c fa21 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    1d04:	69e2      	ldr	r2, [r4, #28]
    1d06:	7921      	ldrb	r1, [r4, #4]
    1d08:	7860      	ldrb	r0, [r4, #1]
    1d0a:	4790      	blx	r2
    1d0c:	2000      	movs	r0, #0
    1d0e:	7020      	strb	r0, [r4, #0]
    1d10:	bd10      	pop	{r4, pc}
    1d12:	0000      	.short	0x0000
    1d14:	2000006c 	.word	0x2000006c
    1d18:	20000c7a 	.word	0x20000c7a
    1d1c:	00001975 	.word	0x00001975
    1d20:	4808      	ldr	r0, [pc, #32]	; (1d44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>)
    1d22:	b510      	push	{r4, lr}
    1d24:	7800      	ldrb	r0, [r0, #0]
    1d26:	2802      	cmp	r0, #2
    1d28:	d004      	beq.n	1d34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x410>
    1d2a:	f240 214d 	movw	r1, #589	; 0x24d
    1d2e:	2027      	movs	r0, #39	; 0x27
    1d30:	f7fe fe98 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1d34:	4904      	ldr	r1, [pc, #16]	; (1d48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x424>)
    1d36:	2001      	movs	r0, #1
    1d38:	7308      	strb	r0, [r1, #12]
    1d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1d3e:	f7ff bfc9 	b.w	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    1d42:	0000      	.short	0x0000
    1d44:	2000006c 	.word	0x2000006c
    1d48:	20000c7a 	.word	0x20000c7a
    1d4c:	b430      	push	{r4, r5}
    1d4e:	4604      	mov	r4, r0
    1d50:	480c      	ldr	r0, [pc, #48]	; (1d84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x38>)
    1d52:	7a00      	ldrb	r0, [r0, #8]
    1d54:	b10b      	cbz	r3, 1d5a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe>
    1d56:	1d00      	adds	r0, r0, #4
    1d58:	b2c0      	uxtb	r0, r0
    1d5a:	b93a      	cbnz	r2, 1d6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20>
    1d5c:	28ff      	cmp	r0, #255	; 0xff
    1d5e:	d105      	bne.n	1d6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20>
    1d60:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
    1d64:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    1d68:	429a      	cmp	r2, r3
    1d6a:	d009      	beq.n	1d80 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x34>
    1d6c:	b121      	cbz	r1, 1d78 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c>
    1d6e:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    1d72:	bc30      	pop	{r4, r5}
    1d74:	f006 ba90 	b.w	8298 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    1d78:	20ff      	movs	r0, #255	; 0xff
    1d7a:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    1d7e:	e7f8      	b.n	1d72 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26>
    1d80:	bc30      	pop	{r4, r5}
    1d82:	4770      	bx	lr
    1d84:	2000006c 	.word	0x2000006c
    1d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1d8c:	4607      	mov	r7, r0
    1d8e:	f7ff fe19 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1d92:	4c21      	ldr	r4, [pc, #132]	; (1e18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xcc>)
    1d94:	4605      	mov	r5, r0
    1d96:	2601      	movs	r6, #1
    1d98:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1d9a:	7808      	ldrb	r0, [r1, #0]
    1d9c:	f000 0003 	and.w	r0, r0, #3
    1da0:	2801      	cmp	r0, #1
    1da2:	d00c      	beq.n	1dbe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x72>
    1da4:	2802      	cmp	r0, #2
    1da6:	d00a      	beq.n	1dbe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x72>
    1da8:	2803      	cmp	r0, #3
    1daa:	d11b      	bne.n	1de4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>
    1dac:	742e      	strb	r6, [r5, #16]
    1dae:	89e0      	ldrh	r0, [r4, #14]
    1db0:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    1db4:	81e0      	strh	r0, [r4, #14]
    1db6:	2001      	movs	r0, #1
    1db8:	f7ff fdf6 	bl	19a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1dbc:	e012      	b.n	1de4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>
    1dbe:	7848      	ldrb	r0, [r1, #1]
    1dc0:	b180      	cbz	r0, 1de4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>
    1dc2:	89e1      	ldrh	r1, [r4, #14]
    1dc4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    1dc8:	81e1      	strh	r1, [r4, #14]
    1dca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1dcc:	2900      	cmp	r1, #0
    1dce:	d018      	beq.n	1e02 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb6>
    1dd0:	28fb      	cmp	r0, #251	; 0xfb
    1dd2:	d818      	bhi.n	1e06 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xba>
    1dd4:	7960      	ldrb	r0, [r4, #5]
    1dd6:	b120      	cbz	r0, 1de2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x96>
    1dd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1ddc:	2020      	movs	r0, #32
    1dde:	f7ff bdf7 	b.w	19d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xac>
    1de2:	703e      	strb	r6, [r7, #0]
    1de4:	7e28      	ldrb	r0, [r5, #24]
    1de6:	2801      	cmp	r0, #1
    1de8:	d012      	beq.n	1e10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc4>
    1dea:	762e      	strb	r6, [r5, #24]
    1dec:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1dee:	7840      	ldrb	r0, [r0, #1]
    1df0:	2800      	cmp	r0, #0
    1df2:	d006      	beq.n	1e02 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb6>
    1df4:	e9f5 0120 	ldrd	r0, r1, [r5, #128]!	; 0x80
    1df8:	1c40      	adds	r0, r0, #1
    1dfa:	f141 0100 	adc.w	r1, r1, #0
    1dfe:	e9c5 0100 	strd	r0, r1, [r5]
    1e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1e06:	7920      	ldrb	r0, [r4, #4]
    1e08:	f040 0010 	orr.w	r0, r0, #16
    1e0c:	7120      	strb	r0, [r4, #4]
    1e0e:	e7f8      	b.n	1e02 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb6>
    1e10:	2000      	movs	r0, #0
    1e12:	7628      	strb	r0, [r5, #24]
    1e14:	e7ea      	b.n	1dec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa0>
    1e16:	0000      	.short	0x0000
    1e18:	2000006c 	.word	0x2000006c
    1e1c:	b570      	push	{r4, r5, r6, lr}
    1e1e:	4605      	mov	r5, r0
    1e20:	f7ff fdd0 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1e24:	4604      	mov	r4, r0
    1e26:	7d80      	ldrb	r0, [r0, #22]
    1e28:	2800      	cmp	r0, #0
    1e2a:	d026      	beq.n	1e7a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12e>
    1e2c:	2802      	cmp	r0, #2
    1e2e:	d10c      	bne.n	1e4a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfe>
    1e30:	4817      	ldr	r0, [pc, #92]	; (1e90 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x144>)
    1e32:	4629      	mov	r1, r5
    1e34:	6b40      	ldr	r0, [r0, #52]	; 0x34
    1e36:	f00b fa44 	bl	d2c2 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    1e3a:	b1f8      	cbz	r0, 1e7c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x130>
    1e3c:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    1e40:	1c40      	adds	r0, r0, #1
    1e42:	f141 0100 	adc.w	r1, r1, #0
    1e46:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    1e4a:	2500      	movs	r5, #0
    1e4c:	75a5      	strb	r5, [r4, #22]
    1e4e:	7c60      	ldrb	r0, [r4, #17]
    1e50:	2601      	movs	r6, #1
    1e52:	b170      	cbz	r0, 1e72 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x126>
    1e54:	7465      	strb	r5, [r4, #17]
    1e56:	f7ff fb6f 	bl	1538 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    1e5a:	b190      	cbz	r0, 1e82 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x136>
    1e5c:	2100      	movs	r1, #0
    1e5e:	2008      	movs	r0, #8
    1e60:	f7ff fda2 	bl	19a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1e64:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    1e68:	1c40      	adds	r0, r0, #1
    1e6a:	f141 0100 	adc.w	r1, r1, #0
    1e6e:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    1e72:	7de0      	ldrb	r0, [r4, #23]
    1e74:	2801      	cmp	r0, #1
    1e76:	d009      	beq.n	1e8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x140>
    1e78:	75e6      	strb	r6, [r4, #23]
    1e7a:	bd70      	pop	{r4, r5, r6, pc}
    1e7c:	f240 31e3 	movw	r1, #995	; 0x3e3
    1e80:	e001      	b.n	1e86 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13a>
    1e82:	f240 31fa 	movw	r1, #1018	; 0x3fa
    1e86:	2027      	movs	r0, #39	; 0x27
    1e88:	f7fe fdec 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1e8c:	75e5      	strb	r5, [r4, #23]
    1e8e:	bd70      	pop	{r4, r5, r6, pc}
    1e90:	2000006c 	.word	0x2000006c
    1e94:	4803      	ldr	r0, [pc, #12]	; (1ea4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x158>)
    1e96:	7800      	ldrb	r0, [r0, #0]
    1e98:	2800      	cmp	r0, #0
    1e9a:	d001      	beq.n	1ea0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x154>
    1e9c:	f7ff bf1a 	b.w	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    1ea0:	4770      	bx	lr
    1ea2:	0000      	.short	0x0000
    1ea4:	2000006c 	.word	0x2000006c
    1ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1eac:	4607      	mov	r7, r0
    1eae:	f7ff fd83 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1eb2:	4680      	mov	r8, r0
    1eb4:	f7ff fd86 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1eb8:	4c17      	ldr	r4, [pc, #92]	; (1f18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1cc>)
    1eba:	4605      	mov	r5, r0
    1ebc:	463a      	mov	r2, r7
    1ebe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    1ec0:	6260      	str	r0, [r4, #36]	; 0x24
    1ec2:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    1ec6:	2101      	movs	r1, #1
    1ec8:	4640      	mov	r0, r8
    1eca:	f7ff ff3f 	bl	1d4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT>
    1ece:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
    1ed2:	2600      	movs	r6, #0
    1ed4:	b168      	cbz	r0, 1ef2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a6>
    1ed6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    1ed8:	f006 f914 	bl	8104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    1edc:	480f      	ldr	r0, [pc, #60]	; (1f1c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d0>)
    1ede:	7606      	strb	r6, [r0, #24]
    1ee0:	e9d5 1220 	ldrd	r1, r2, [r5, #128]	; 0x80
    1ee4:	e9c0 1204 	strd	r1, r2, [r0, #16]
    1ee8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    1eea:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1eec:	f005 fdc4 	bl	7a78 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    1ef0:	e004      	b.n	1efc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b0>
    1ef2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1ef4:	f006 f906 	bl	8104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    1ef8:	f005 fe00 	bl	7afc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1efc:	b917      	cbnz	r7, 1f04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b8>
    1efe:	4630      	mov	r0, r6
    1f00:	f005 ffcc 	bl	7e9c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    1f04:	2100      	movs	r1, #0
    1f06:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    1f0a:	4608      	mov	r0, r1
    1f0c:	f006 f982 	bl	8214 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    1f10:	2002      	movs	r0, #2
    1f12:	7020      	strb	r0, [r4, #0]
    1f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f18:	2000006c 	.word	0x2000006c
    1f1c:	20000c30 	.word	0x20000c30
    1f20:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    1f24:	4604      	mov	r4, r0
    1f26:	f7ff fd4d 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1f2a:	4605      	mov	r5, r0
    1f2c:	f7ff fd44 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1f30:	f04f 0800 	mov.w	r8, #0
    1f34:	f88d 8000 	strb.w	r8, [sp]
    1f38:	4606      	mov	r6, r0
    1f3a:	f8df 9164 	ldr.w	r9, [pc, #356]	; 20a0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x354>
    1f3e:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    1f42:	4622      	mov	r2, r4
    1f44:	4641      	mov	r1, r8
    1f46:	f7ff ff01 	bl	1d4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT>
    1f4a:	7da8      	ldrb	r0, [r5, #22]
    1f4c:	2701      	movs	r7, #1
    1f4e:	f1a9 0420 	sub.w	r4, r9, #32
    1f52:	b140      	cbz	r0, 1f66 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x21a>
    1f54:	2801      	cmp	r0, #1
    1f56:	d01f      	beq.n	1f98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x24c>
    1f58:	2802      	cmp	r0, #2
    1f5a:	d030      	beq.n	1fbe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x272>
    1f5c:	2803      	cmp	r0, #3
    1f5e:	d03c      	beq.n	1fda <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28e>
    1f60:	f240 21ff 	movw	r1, #767	; 0x2ff
    1f64:	e058      	b.n	2018 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2cc>
    1f66:	79a0      	ldrb	r0, [r4, #6]
    1f68:	2150      	movs	r1, #80	; 0x50
    1f6a:	f8ad 0004 	strh.w	r0, [sp, #4]
    1f6e:	5388      	strh	r0, [r1, r6]
    1f70:	4648      	mov	r0, r9
    1f72:	f7ff fb0b 	bl	158c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    1f76:	b128      	cbz	r0, 1f84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x238>
    1f78:	2080      	movs	r0, #128	; 0x80
    1f7a:	6a21      	ldr	r1, [r4, #32]
    1f7c:	f7ff fd14 	bl	19a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1f80:	746f      	strb	r7, [r5, #17]
    1f82:	e02e      	b.n	1fe2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x296>
    1f84:	466a      	mov	r2, sp
    1f86:	a901      	add	r1, sp, #4
    1f88:	6b60      	ldr	r0, [r4, #52]	; 0x34
    1f8a:	f00b fd2d 	bl	d9e8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    1f8e:	6220      	str	r0, [r4, #32]
    1f90:	b110      	cbz	r0, 1f98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x24c>
    1f92:	f895 105d 	ldrb.w	r1, [r5, #93]	; 0x5d
    1f96:	b111      	cbz	r1, 1f9e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x252>
    1f98:	4842      	ldr	r0, [pc, #264]	; (20a4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x358>)
    1f9a:	6220      	str	r0, [r4, #32]
    1f9c:	e021      	b.n	1fe2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x296>
    1f9e:	f89d 1000 	ldrb.w	r1, [sp]
    1fa2:	b931      	cbnz	r1, 1fb2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x266>
    1fa4:	f8a0 8000 	strh.w	r8, [r0]
    1fa8:	f880 8002 	strb.w	r8, [r0, #2]
    1fac:	2101      	movs	r1, #1
    1fae:	f00c f883 	bl	e0b8 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    1fb2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    1fb6:	6a20      	ldr	r0, [r4, #32]
    1fb8:	f00c f818 	bl	dfec <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>
    1fbc:	e011      	b.n	1fe2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x296>
    1fbe:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    1fc2:	f8ad 0004 	strh.w	r0, [sp, #4]
    1fc6:	466a      	mov	r2, sp
    1fc8:	a901      	add	r1, sp, #4
    1fca:	6b60      	ldr	r0, [r4, #52]	; 0x34
    1fcc:	f00b fd0c 	bl	d9e8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    1fd0:	6220      	str	r0, [r4, #32]
    1fd2:	b930      	cbnz	r0, 1fe2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x296>
    1fd4:	f240 21e9 	movw	r1, #745	; 0x2e9
    1fd8:	e01e      	b.n	2018 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2cc>
    1fda:	4648      	mov	r0, r9
    1fdc:	f7ff fad6 	bl	158c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    1fe0:	b1c0      	cbz	r0, 2014 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c8>
    1fe2:	6a20      	ldr	r0, [r4, #32]
    1fe4:	2308      	movs	r3, #8
    1fe6:	7801      	ldrb	r1, [r0, #0]
    1fe8:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    1fec:	7001      	strb	r1, [r0, #0]
    1fee:	7dea      	ldrb	r2, [r5, #23]
    1ff0:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    1ff4:	4311      	orrs	r1, r2
    1ff6:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    1ffa:	7001      	strb	r1, [r0, #0]
    1ffc:	7e2a      	ldrb	r2, [r5, #24]
    1ffe:	2304      	movs	r3, #4
    2000:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    2004:	4311      	orrs	r1, r2
    2006:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    200a:	7001      	strb	r1, [r0, #0]
    200c:	43c9      	mvns	r1, r1
    200e:	0789      	lsls	r1, r1, #30
    2010:	d005      	beq.n	201e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2d2>
    2012:	e007      	b.n	2024 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2d8>
    2014:	f240 21f2 	movw	r1, #754	; 0x2f2
    2018:	2027      	movs	r0, #39	; 0x27
    201a:	f7fe fd23 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    201e:	78c0      	ldrb	r0, [r0, #3]
    2020:	2802      	cmp	r0, #2
    2022:	d00f      	beq.n	2044 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f8>
    2024:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2026:	f00b fa63 	bl	d4f0 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    202a:	b108      	cbz	r0, 2030 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2e4>
    202c:	2101      	movs	r1, #1
    202e:	e00a      	b.n	2046 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2fa>
    2030:	6a20      	ldr	r0, [r4, #32]
    2032:	7800      	ldrb	r0, [r0, #0]
    2034:	43c0      	mvns	r0, r0
    2036:	0780      	lsls	r0, r0, #30
    2038:	d004      	beq.n	2044 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f8>
    203a:	f7ff fa65 	bl	1508 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    203e:	f080 0101 	eor.w	r1, r0, #1
    2042:	e000      	b.n	2046 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2fa>
    2044:	2100      	movs	r1, #0
    2046:	6a20      	ldr	r0, [r4, #32]
    2048:	7802      	ldrb	r2, [r0, #0]
    204a:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    204e:	7001      	strb	r1, [r0, #0]
    2050:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
    2054:	b181      	cbz	r1, 2078 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x32c>
    2056:	7841      	ldrb	r1, [r0, #1]
    2058:	b171      	cbz	r1, 2078 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x32c>
    205a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    205c:	f006 f852 	bl	8104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2060:	4810      	ldr	r0, [pc, #64]	; (20a4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x358>)
    2062:	3828      	subs	r0, #40	; 0x28
    2064:	7607      	strb	r7, [r0, #24]
    2066:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    206a:	e9c0 1204 	strd	r1, r2, [r0, #16]
    206e:	6a21      	ldr	r1, [r4, #32]
    2070:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2072:	f005 fd01 	bl	7a78 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    2076:	e003      	b.n	2080 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x334>
    2078:	f006 f844 	bl	8104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    207c:	f005 fd3e 	bl	7afc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    2080:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    2084:	2101      	movs	r1, #1
    2086:	2000      	movs	r0, #0
    2088:	f006 f8c4 	bl	8214 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    208c:	70e7      	strb	r7, [r4, #3]
    208e:	6a20      	ldr	r0, [r4, #32]
    2090:	8801      	ldrh	r1, [r0, #0]
    2092:	8221      	strh	r1, [r4, #16]
    2094:	7880      	ldrb	r0, [r0, #2]
    2096:	74a0      	strb	r0, [r4, #18]
    2098:	7027      	strb	r7, [r4, #0]
    209a:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    209e:	0000      	.short	0x0000
    20a0:	2000008c 	.word	0x2000008c
    20a4:	20000c58 	.word	0x20000c58
    20a8:	00001d21 	.word	0x00001d21
    20ac:	00001a71 	.word	0x00001a71
    20b0:	00001c19 	.word	0x00001c19
    20b4:	00001e95 	.word	0x00001e95

000020b8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    20b8:	4800      	ldr	r0, [pc, #0]	; (20bc <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    20ba:	4770      	bx	lr
    20bc:	200016ed 	.word	0x200016ed

000020c0 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>:
    20c0:	b570      	push	{r4, r5, r6, lr}
    20c2:	2600      	movs	r6, #0
    20c4:	4635      	mov	r5, r6
    20c6:	4c0f      	ldr	r4, [pc, #60]	; (2104 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x44>)
    20c8:	e018      	b.n	20fc <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x3c>
    20ca:	1960      	adds	r0, r4, r5
    20cc:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    20d0:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    20d4:	2a01      	cmp	r2, #1
    20d6:	d002      	beq.n	20de <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x1e>
    20d8:	f890 014b 	ldrb.w	r0, [r0, #331]	; 0x14b
    20dc:	b160      	cbz	r0, 20f8 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x38>
    20de:	480a      	ldr	r0, [pc, #40]	; (2108 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x48>)
    20e0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    20e4:	1c73      	adds	r3, r6, #1
    20e6:	5585      	strb	r5, [r0, r6]
    20e8:	f891 2153 	ldrb.w	r2, [r1, #339]	; 0x153
    20ec:	4630      	mov	r0, r6
    20ee:	b2de      	uxtb	r6, r3
    20f0:	f501 71aa 	add.w	r1, r1, #340	; 0x154
    20f4:	f006 f9b4 	bl	8460 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    20f8:	1c6d      	adds	r5, r5, #1
    20fa:	b2ed      	uxtb	r5, r5
    20fc:	78a0      	ldrb	r0, [r4, #2]
    20fe:	42a8      	cmp	r0, r5
    2100:	d8e3      	bhi.n	20ca <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0xa>
    2102:	bd70      	pop	{r4, r5, r6, pc}
    2104:	2000151a 	.word	0x2000151a
    2108:	20000334 	.word	0x20000334

0000210c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    210c:	4904      	ldr	r1, [pc, #16]	; (2120 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    210e:	788a      	ldrb	r2, [r1, #2]
    2110:	4282      	cmp	r2, r0
    2112:	d903      	bls.n	211c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    2114:	4408      	add	r0, r1
    2116:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    211a:	4770      	bx	lr
    211c:	2000      	movs	r0, #0
    211e:	4770      	bx	lr
    2120:	2000151a 	.word	0x2000151a

00002124 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    2124:	4904      	ldr	r1, [pc, #16]	; (2138 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    2126:	788a      	ldrb	r2, [r1, #2]
    2128:	4282      	cmp	r2, r0
    212a:	d903      	bls.n	2134 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    212c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    2130:	3083      	adds	r0, #131	; 0x83
    2132:	4770      	bx	lr
    2134:	2000      	movs	r0, #0
    2136:	4770      	bx	lr
    2138:	2000151a 	.word	0x2000151a

0000213c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    213c:	4a05      	ldr	r2, [pc, #20]	; (2154 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    213e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2142:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    2146:	6802      	ldr	r2, [r0, #0]
    2148:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    214c:	8880      	ldrh	r0, [r0, #4]
    214e:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    2152:	4770      	bx	lr
    2154:	2000151a 	.word	0x2000151a

00002158 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>:
    2158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    215c:	4607      	mov	r7, r0
    215e:	2400      	movs	r4, #0
    2160:	4d10      	ldr	r5, [pc, #64]	; (21a4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x4c>)
    2162:	e019      	b.n	2198 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x40>
    2164:	4620      	mov	r0, r4
    2166:	f7ff ffdd 	bl	2124 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    216a:	0003      	movs	r3, r0
    216c:	d012      	beq.n	2194 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    216e:	1928      	adds	r0, r5, r4
    2170:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    2174:	b970      	cbnz	r0, 2194 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    2176:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    217a:	eb05 0640 	add.w	r6, r5, r0, lsl #1
    217e:	f206 160b 	addw	r6, r6, #267	; 0x10b
    2182:	463a      	mov	r2, r7
    2184:	4631      	mov	r1, r6
    2186:	4618      	mov	r0, r3
    2188:	f00b fbb1 	bl	d8ee <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    218c:	4630      	mov	r0, r6
    218e:	4621      	mov	r1, r4
    2190:	f7ff ffd4 	bl	213c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    2194:	1c64      	adds	r4, r4, #1
    2196:	b2e4      	uxtb	r4, r4
    2198:	78a8      	ldrb	r0, [r5, #2]
    219a:	42a0      	cmp	r0, r4
    219c:	d8e2      	bhi.n	2164 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0xc>
    219e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    21a2:	0000      	.short	0x0000
    21a4:	2000151a 	.word	0x2000151a

000021a8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    21a8:	4904      	ldr	r1, [pc, #16]	; (21bc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    21aa:	788a      	ldrb	r2, [r1, #2]
    21ac:	4282      	cmp	r2, r0
    21ae:	d903      	bls.n	21b8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    21b0:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    21b4:	1cc0      	adds	r0, r0, #3
    21b6:	4770      	bx	lr
    21b8:	2000      	movs	r0, #0
    21ba:	4770      	bx	lr
    21bc:	2000151a 	.word	0x2000151a

000021c0 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>:
    21c0:	4908      	ldr	r1, [pc, #32]	; (21e4 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x24>)
    21c2:	788a      	ldrb	r2, [r1, #2]
    21c4:	4282      	cmp	r2, r0
    21c6:	d903      	bls.n	21d0 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x10>
    21c8:	180a      	adds	r2, r1, r0
    21ca:	f892 2143 	ldrb.w	r2, [r2, #323]	; 0x143
    21ce:	b10a      	cbz	r2, 21d4 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x14>
    21d0:	2000      	movs	r0, #0
    21d2:	4770      	bx	lr
    21d4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    21d8:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    21dc:	f200 100b 	addw	r0, r0, #267	; 0x10b
    21e0:	4770      	bx	lr
    21e2:	0000      	.short	0x0000
    21e4:	2000151a 	.word	0x2000151a

000021e8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    21e8:	b510      	push	{r4, lr}
    21ea:	f240 12d3 	movw	r2, #467	; 0x1d3
    21ee:	2100      	movs	r1, #0
    21f0:	4808      	ldr	r0, [pc, #32]	; (2214 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    21f2:	f00e fab6 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    21f6:	2208      	movs	r2, #8
    21f8:	21ff      	movs	r1, #255	; 0xff
    21fa:	4807      	ldr	r0, [pc, #28]	; (2218 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    21fc:	f00e fab1 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2200:	4805      	ldr	r0, [pc, #20]	; (2218 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    2202:	2100      	movs	r1, #0
    2204:	1f00      	subs	r0, r0, #4
    2206:	7001      	strb	r1, [r0, #0]
    2208:	7041      	strb	r1, [r0, #1]
    220a:	f44f 7161 	mov.w	r1, #900	; 0x384
    220e:	8041      	strh	r1, [r0, #2]
    2210:	bd10      	pop	{r4, pc}
    2212:	0000      	.short	0x0000
    2214:	2000151a 	.word	0x2000151a
    2218:	20000334 	.word	0x20000334

0000221c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    221c:	4b0b      	ldr	r3, [pc, #44]	; (224c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    221e:	b510      	push	{r4, lr}
    2220:	789c      	ldrb	r4, [r3, #2]
    2222:	4284      	cmp	r4, r0
    2224:	d90f      	bls.n	2246 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    2226:	4418      	add	r0, r3
    2228:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    222c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2230:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    2234:	700b      	strb	r3, [r1, #0]
    2236:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    223a:	6011      	str	r1, [r2, #0]
    223c:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    2240:	8090      	strh	r0, [r2, #4]
    2242:	2001      	movs	r0, #1
    2244:	bd10      	pop	{r4, pc}
    2246:	2000      	movs	r0, #0
    2248:	bd10      	pop	{r4, pc}
    224a:	0000      	.short	0x0000
    224c:	2000151a 	.word	0x2000151a

00002250 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    2250:	4907      	ldr	r1, [pc, #28]	; (2270 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    2252:	788a      	ldrb	r2, [r1, #2]
    2254:	4282      	cmp	r2, r0
    2256:	d909      	bls.n	226c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    2258:	4408      	add	r0, r1
    225a:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    225e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    2262:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    2266:	f000 0001 	and.w	r0, r0, #1
    226a:	4770      	bx	lr
    226c:	2000      	movs	r0, #0
    226e:	4770      	bx	lr
    2270:	2000151a 	.word	0x2000151a

00002274 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    2274:	4801      	ldr	r0, [pc, #4]	; (227c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    2276:	8840      	ldrh	r0, [r0, #2]
    2278:	4770      	bx	lr
    227a:	0000      	.short	0x0000
    227c:	20000330 	.word	0x20000330

00002280 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>:
    2280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2284:	4614      	mov	r4, r2
    2286:	2501      	movs	r5, #1
    2288:	2200      	movs	r2, #0
    228a:	461f      	mov	r7, r3
    228c:	462e      	mov	r6, r5
    228e:	7022      	strb	r2, [r4, #0]
    2290:	f000 f8f6 	bl	2480 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    2294:	2810      	cmp	r0, #16
    2296:	d024      	beq.n	22e2 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    2298:	f8df 8054 	ldr.w	r8, [pc, #84]	; 22f0 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x70>
    229c:	eb08 01c0 	add.w	r1, r8, r0, lsl #3
    22a0:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    22a4:	f001 0101 	and.w	r1, r1, #1
    22a8:	7021      	strb	r1, [r4, #0]
    22aa:	f000 f8b9 	bl	2420 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    22ae:	4604      	mov	r4, r0
    22b0:	2810      	cmp	r0, #16
    22b2:	d016      	beq.n	22e2 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    22b4:	b107      	cbz	r7, 22b8 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x38>
    22b6:	703c      	strb	r4, [r7, #0]
    22b8:	4620      	mov	r0, r4
    22ba:	f7ff ff75 	bl	21a8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    22be:	b180      	cbz	r0, 22e2 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    22c0:	f898 1002 	ldrb.w	r1, [r8, #2]
    22c4:	4640      	mov	r0, r8
    22c6:	42a1      	cmp	r1, r4
    22c8:	d903      	bls.n	22d2 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x52>
    22ca:	1901      	adds	r1, r0, r4
    22cc:	f891 614b 	ldrb.w	r6, [r1, #331]	; 0x14b
    22d0:	e000      	b.n	22d4 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x54>
    22d2:	2600      	movs	r6, #0
    22d4:	eb08 0004 	add.w	r0, r8, r4
    22d8:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    22dc:	2801      	cmp	r0, #1
    22de:	d004      	beq.n	22ea <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x6a>
    22e0:	2500      	movs	r5, #0
    22e2:	ea45 0006 	orr.w	r0, r5, r6
    22e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    22ea:	2501      	movs	r5, #1
    22ec:	e7f9      	b.n	22e2 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    22ee:	0000      	.short	0x0000
    22f0:	2000151a 	.word	0x2000151a

000022f4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    22f4:	b570      	push	{r4, r5, r6, lr}
    22f6:	460d      	mov	r5, r1
    22f8:	4606      	mov	r6, r0
    22fa:	f000 f8c1 	bl	2480 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    22fe:	4c10      	ldr	r4, [pc, #64]	; (2340 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    2300:	2810      	cmp	r0, #16
    2302:	d007      	beq.n	2314 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    2304:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    2308:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    230c:	07c9      	lsls	r1, r1, #31
    230e:	d001      	beq.n	2314 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    2310:	2001      	movs	r0, #1
    2312:	bd70      	pop	{r4, r5, r6, pc}
    2314:	7861      	ldrb	r1, [r4, #1]
    2316:	2908      	cmp	r1, #8
    2318:	d210      	bcs.n	233c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    231a:	2810      	cmp	r0, #16
    231c:	d008      	beq.n	2330 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    231e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2322:	2101      	movs	r1, #1
    2324:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    2328:	7860      	ldrb	r0, [r4, #1]
    232a:	1c40      	adds	r0, r0, #1
    232c:	7060      	strb	r0, [r4, #1]
    232e:	e7ef      	b.n	2310 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    2330:	2201      	movs	r2, #1
    2332:	4629      	mov	r1, r5
    2334:	4630      	mov	r0, r6
    2336:	f000 f887 	bl	2448 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    233a:	e7f5      	b.n	2328 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    233c:	2000      	movs	r0, #0
    233e:	bd70      	pop	{r4, r5, r6, pc}
    2340:	2000151a 	.word	0x2000151a

00002344 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    2344:	b570      	push	{r4, r5, r6, lr}
    2346:	4d0b      	ldr	r5, [pc, #44]	; (2374 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    2348:	7828      	ldrb	r0, [r5, #0]
    234a:	1e40      	subs	r0, r0, #1
    234c:	b244      	sxtb	r4, r0
    234e:	e00a      	b.n	2366 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    2350:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    2354:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    2358:	07c0      	lsls	r0, r0, #31
    235a:	d002      	beq.n	2362 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    235c:	b2e0      	uxtb	r0, r4
    235e:	f000 f8ed 	bl	253c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    2362:	1e64      	subs	r4, r4, #1
    2364:	b264      	sxtb	r4, r4
    2366:	2c00      	cmp	r4, #0
    2368:	daf2      	bge.n	2350 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    236a:	4903      	ldr	r1, [pc, #12]	; (2378 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    236c:	2000      	movs	r0, #0
    236e:	7048      	strb	r0, [r1, #1]
    2370:	bd70      	pop	{r4, r5, r6, pc}
    2372:	0000      	.short	0x0000
    2374:	2000151a 	.word	0x2000151a
    2378:	20000330 	.word	0x20000330

0000237c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    237c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2380:	2400      	movs	r4, #0
    2382:	4625      	mov	r5, r4
    2384:	4e18      	ldr	r6, [pc, #96]	; (23e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    2386:	e029      	b.n	23dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    2388:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    238c:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    2390:	07c0      	lsls	r0, r0, #31
    2392:	d021      	beq.n	23d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    2394:	4628      	mov	r0, r5
    2396:	f000 f843 	bl	2420 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    239a:	4603      	mov	r3, r0
    239c:	f7ff ff04 	bl	21a8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    23a0:	4601      	mov	r1, r0
    23a2:	2000      	movs	r0, #0
    23a4:	2b10      	cmp	r3, #16
    23a6:	d009      	beq.n	23bc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    23a8:	18f2      	adds	r2, r6, r3
    23aa:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    23ae:	f1bc 0f01 	cmp.w	ip, #1
    23b2:	d002      	beq.n	23ba <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    23b4:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    23b8:	b102      	cbz	r2, 23bc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    23ba:	2001      	movs	r0, #1
    23bc:	1e40      	subs	r0, r0, #1
    23be:	4201      	tst	r1, r0
    23c0:	d10a      	bne.n	23d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    23c2:	480a      	ldr	r0, [pc, #40]	; (23ec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    23c4:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    23c8:	5503      	strb	r3, [r0, r4]
    23ca:	4620      	mov	r0, r4
    23cc:	1c64      	adds	r4, r4, #1
    23ce:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    23d2:	b2e4      	uxtb	r4, r4
    23d4:	f006 f844 	bl	8460 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    23d8:	1c6d      	adds	r5, r5, #1
    23da:	b2ed      	uxtb	r5, r5
    23dc:	7830      	ldrb	r0, [r6, #0]
    23de:	42a8      	cmp	r0, r5
    23e0:	d8d2      	bhi.n	2388 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    23e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    23e6:	0000      	.short	0x0000
    23e8:	2000151a 	.word	0x2000151a
    23ec:	20000334 	.word	0x20000334
    23f0:	4602      	mov	r2, r0
    23f2:	4809      	ldr	r0, [pc, #36]	; (2418 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    23f4:	b510      	push	{r4, lr}
    23f6:	7800      	ldrb	r0, [r0, #0]
    23f8:	460b      	mov	r3, r1
    23fa:	b158      	cbz	r0, 2414 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    23fc:	4807      	ldr	r0, [pc, #28]	; (241c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    23fe:	7881      	ldrb	r1, [r0, #2]
    2400:	b141      	cbz	r1, 2414 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    2402:	b10b      	cbz	r3, 2408 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    2404:	1cc0      	adds	r0, r0, #3
    2406:	e001      	b.n	240c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    2408:	4804      	ldr	r0, [pc, #16]	; (241c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    240a:	3083      	adds	r0, #131	; 0x83
    240c:	f005 fa3c 	bl	7888 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    2410:	2001      	movs	r0, #1
    2412:	bd10      	pop	{r4, pc}
    2414:	2000      	movs	r0, #0
    2416:	bd10      	pop	{r4, pc}
    2418:	20000330 	.word	0x20000330
    241c:	2000151a 	.word	0x2000151a
    2420:	4908      	ldr	r1, [pc, #32]	; (2444 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    2422:	b510      	push	{r4, lr}
    2424:	4603      	mov	r3, r0
    2426:	2000      	movs	r0, #0
    2428:	788a      	ldrb	r2, [r1, #2]
    242a:	e006      	b.n	243a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    242c:	180c      	adds	r4, r1, r0
    242e:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    2432:	429c      	cmp	r4, r3
    2434:	d004      	beq.n	2440 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    2436:	1c40      	adds	r0, r0, #1
    2438:	b2c0      	uxtb	r0, r0
    243a:	4282      	cmp	r2, r0
    243c:	d8f6      	bhi.n	242c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    243e:	2010      	movs	r0, #16
    2440:	bd10      	pop	{r4, pc}
    2442:	0000      	.short	0x0000
    2444:	2000151a 	.word	0x2000151a
    2448:	b570      	push	{r4, r5, r6, lr}
    244a:	4b0c      	ldr	r3, [pc, #48]	; (247c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    244c:	4604      	mov	r4, r0
    244e:	7818      	ldrb	r0, [r3, #0]
    2450:	1c45      	adds	r5, r0, #1
    2452:	701d      	strb	r5, [r3, #0]
    2454:	2810      	cmp	r0, #16
    2456:	d303      	bcc.n	2460 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    2458:	2146      	movs	r1, #70	; 0x46
    245a:	2028      	movs	r0, #40	; 0x28
    245c:	f7fe fb02 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2460:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    2464:	680d      	ldr	r5, [r1, #0]
    2466:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    246a:	8889      	ldrh	r1, [r1, #4]
    246c:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    2470:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    2474:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    2478:	bd70      	pop	{r4, r5, r6, pc}
    247a:	0000      	.short	0x0000
    247c:	2000151a 	.word	0x2000151a
    2480:	b5f0      	push	{r4, r5, r6, r7, lr}
    2482:	4c1a      	ldr	r4, [pc, #104]	; (24ec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x170>)
    2484:	4603      	mov	r3, r0
    2486:	2000      	movs	r0, #0
    2488:	7825      	ldrb	r5, [r4, #0]
    248a:	e02a      	b.n	24e2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x166>
    248c:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    2490:	780f      	ldrb	r7, [r1, #0]
    2492:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    2496:	f892 6153 	ldrb.w	r6, [r2, #339]	; 0x153
    249a:	ea87 070c 	eor.w	r7, r7, ip
    249e:	405e      	eors	r6, r3
    24a0:	443e      	add	r6, r7
    24a2:	784f      	ldrb	r7, [r1, #1]
    24a4:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    24a8:	ea87 070c 	eor.w	r7, r7, ip
    24ac:	443e      	add	r6, r7
    24ae:	788f      	ldrb	r7, [r1, #2]
    24b0:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    24b4:	ea87 070c 	eor.w	r7, r7, ip
    24b8:	443e      	add	r6, r7
    24ba:	78cf      	ldrb	r7, [r1, #3]
    24bc:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    24c0:	ea87 070c 	eor.w	r7, r7, ip
    24c4:	443e      	add	r6, r7
    24c6:	790f      	ldrb	r7, [r1, #4]
    24c8:	f892 c158 	ldrb.w	ip, [r2, #344]	; 0x158
    24cc:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
    24d0:	ea87 070c 	eor.w	r7, r7, ip
    24d4:	443e      	add	r6, r7
    24d6:	794f      	ldrb	r7, [r1, #5]
    24d8:	4057      	eors	r7, r2
    24da:	42f7      	cmn	r7, r6
    24dc:	d004      	beq.n	24e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16c>
    24de:	1c40      	adds	r0, r0, #1
    24e0:	b2c0      	uxtb	r0, r0
    24e2:	4285      	cmp	r5, r0
    24e4:	d8d2      	bhi.n	248c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x110>
    24e6:	2010      	movs	r0, #16
    24e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24ea:	0000      	.short	0x0000
    24ec:	2000151a 	.word	0x2000151a
    24f0:	b570      	push	{r4, r5, r6, lr}
    24f2:	4605      	mov	r5, r0
    24f4:	f7ff ff94 	bl	2420 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    24f8:	2810      	cmp	r0, #16
    24fa:	d11c      	bne.n	2536 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    24fc:	4c0e      	ldr	r4, [pc, #56]	; (2538 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1bc>)
    24fe:	7820      	ldrb	r0, [r4, #0]
    2500:	1e40      	subs	r0, r0, #1
    2502:	b2c0      	uxtb	r0, r0
    2504:	7020      	strb	r0, [r4, #0]
    2506:	42a8      	cmp	r0, r5
    2508:	d015      	beq.n	2536 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    250a:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    250e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    2512:	f502 7080 	add.w	r0, r2, #256	; 0x100
    2516:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    251a:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    251e:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    2522:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    2526:	7820      	ldrb	r0, [r4, #0]
    2528:	f7ff ff7a 	bl	2420 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    252c:	2810      	cmp	r0, #16
    252e:	d002      	beq.n	2536 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    2530:	4420      	add	r0, r4
    2532:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    2536:	bd70      	pop	{r4, r5, r6, pc}
    2538:	2000151a 	.word	0x2000151a
    253c:	4905      	ldr	r1, [pc, #20]	; (2554 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1d8>)
    253e:	784a      	ldrb	r2, [r1, #1]
    2540:	1e52      	subs	r2, r2, #1
    2542:	704a      	strb	r2, [r1, #1]
    2544:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    2548:	2200      	movs	r2, #0
    254a:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    254e:	f7ff bfcf 	b.w	24f0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x174>
    2552:	0000      	.short	0x0000
    2554:	2000151a 	.word	0x2000151a

00002558 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>:
    2558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    255c:	4604      	mov	r4, r0
    255e:	f100 0788 	add.w	r7, r0, #136	; 0x88
    2562:	b171      	cbz	r1, 2582 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x2a>
    2564:	f104 06ae 	add.w	r6, r4, #174	; 0xae
    2568:	1e75      	subs	r5, r6, #1
    256a:	2901      	cmp	r1, #1
    256c:	d016      	beq.n	259c <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x44>
    256e:	2902      	cmp	r1, #2
    2570:	d025      	beq.n	25be <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x66>
    2572:	2903      	cmp	r1, #3
    2574:	d110      	bne.n	2598 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x40>
    2576:	4631      	mov	r1, r6
    2578:	4628      	mov	r0, r5
    257a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    257e:	f00b bc8e 	b.w	de9e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    2582:	f44f 722a 	mov.w	r2, #680	; 0x2a8
    2586:	2100      	movs	r1, #0
    2588:	f00e f8eb 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    258c:	4638      	mov	r0, r7
    258e:	f000 f84d 	bl	262c <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xd4>
    2592:	2020      	movs	r0, #32
    2594:	f884 0249 	strb.w	r0, [r4, #585]	; 0x249
    2598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    259c:	6921      	ldr	r1, [r4, #16]
    259e:	480d      	ldr	r0, [pc, #52]	; (25d4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x7c>)
    25a0:	460a      	mov	r2, r1
    25a2:	4408      	add	r0, r1
    25a4:	fbb0 f0f1 	udiv	r0, r0, r1
    25a8:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    25ac:	f640 30b8 	movw	r0, #3000	; 0xbb8
    25b0:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
    25b4:	8b63      	ldrh	r3, [r4, #26]
    25b6:	4638      	mov	r0, r7
    25b8:	f000 f80e 	bl	25d8 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    25bc:	e7db      	b.n	2576 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x1e>
    25be:	6901      	ldr	r1, [r0, #16]
    25c0:	f8b4 3276 	ldrh.w	r3, [r4, #630]	; 0x276
    25c4:	f8d4 2270 	ldr.w	r2, [r4, #624]	; 0x270
    25c8:	4638      	mov	r0, r7
    25ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    25ce:	f000 b803 	b.w	25d8 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    25d2:	0000      	.short	0x0000
    25d4:	01c9c37f 	.word	0x01c9c37f
    25d8:	b510      	push	{r4, lr}
    25da:	2400      	movs	r4, #0
    25dc:	f8a0 404e 	strh.w	r4, [r0, #78]	; 0x4e
    25e0:	f830 4f52 	ldrh.w	r4, [r0, #82]!
    25e4:	434c      	muls	r4, r1
    25e6:	fbb4 f4f2 	udiv	r4, r4, r2
    25ea:	f820 4912 	strh.w	r4, [r0], #-18
    25ee:	f240 2471 	movw	r4, #625	; 0x271
    25f2:	4363      	muls	r3, r4
    25f4:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    25f8:	1e5b      	subs	r3, r3, #1
    25fa:	fbb3 f3f2 	udiv	r3, r3, r2
    25fe:	8203      	strh	r3, [r0, #16]
    2600:	4b09      	ldr	r3, [pc, #36]	; (2628 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xd0>)
    2602:	fbb3 f3f2 	udiv	r3, r3, r2
    2606:	1c5b      	adds	r3, r3, #1
    2608:	82c3      	strh	r3, [r0, #22]
    260a:	8903      	ldrh	r3, [r0, #8]
    260c:	4363      	muls	r3, r4
    260e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    2612:	1e5b      	subs	r3, r3, #1
    2614:	fbb3 f3f2 	udiv	r3, r3, r2
    2618:	6043      	str	r3, [r0, #4]
    261a:	6803      	ldr	r3, [r0, #0]
    261c:	434b      	muls	r3, r1
    261e:	fbb3 f1f2 	udiv	r1, r3, r2
    2622:	6001      	str	r1, [r0, #0]
    2624:	bd10      	pop	{r4, pc}
    2626:	0000      	.short	0x0000
    2628:	02625a00 	.word	0x02625a00
    262c:	2101      	movs	r1, #1
    262e:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    2632:	490b      	ldr	r1, [pc, #44]	; (2660 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x108>)
    2634:	f8c0 106e 	str.w	r1, [r0, #110]	; 0x6e
    2638:	2107      	movs	r1, #7
    263a:	f8c0 1072 	str.w	r1, [r0, #114]	; 0x72
    263e:	f100 016e 	add.w	r1, r0, #110	; 0x6e
    2642:	780a      	ldrb	r2, [r1, #0]
    2644:	f022 0204 	bic.w	r2, r2, #4
    2648:	700a      	strb	r2, [r1, #0]
    264a:	21fe      	movs	r1, #254	; 0xfe
    264c:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    2650:	217f      	movs	r1, #127	; 0x7f
    2652:	7641      	strb	r1, [r0, #25]
    2654:	4903      	ldr	r1, [pc, #12]	; (2664 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x10c>)
    2656:	6081      	str	r1, [r0, #8]
    2658:	2100      	movs	r1, #0
    265a:	e9c0 1100 	strd	r1, r1, [r0]
    265e:	4770      	bx	lr
    2660:	3404492f 	.word	0x3404492f
    2664:	fffce000 	.word	0xfffce000

00002668 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>:
    2668:	4902      	ldr	r1, [pc, #8]	; (2674 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ+0xc>)
    266a:	f991 1000 	ldrsb.w	r1, [r1]
    266e:	f00b bbc7 	b.w	de00 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x28>
    2672:	0000      	.short	0x0000
    2674:	20000350 	.word	0x20000350

00002678 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>:
    2678:	b508      	push	{r3, lr}
    267a:	207f      	movs	r0, #127	; 0x7f
    267c:	f88d 0000 	strb.w	r0, [sp]
    2680:	4668      	mov	r0, sp
    2682:	f005 fded 	bl	8260 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    2686:	b140      	cbz	r0, 269a <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x22>
    2688:	4805      	ldr	r0, [pc, #20]	; (26a0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x28>)
    268a:	7840      	ldrb	r0, [r0, #1]
    268c:	4240      	negs	r0, r0
    268e:	b241      	sxtb	r1, r0
    2690:	f99d 0000 	ldrsb.w	r0, [sp]
    2694:	f00b fbb4 	bl	de00 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x28>
    2698:	bd08      	pop	{r3, pc}
    269a:	f99d 0000 	ldrsb.w	r0, [sp]
    269e:	bd08      	pop	{r3, pc}
    26a0:	20000350 	.word	0x20000350

000026a4 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>:
    26a4:	4909      	ldr	r1, [pc, #36]	; (26cc <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    26a6:	b508      	push	{r3, lr}
    26a8:	7809      	ldrb	r1, [r1, #0]
    26aa:	f88d 1000 	strb.w	r1, [sp]
    26ae:	9900      	ldr	r1, [sp, #0]
    26b0:	9100      	str	r1, [sp, #0]
    26b2:	f89d 1000 	ldrb.w	r1, [sp]
    26b6:	b109      	cbz	r1, 26bc <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x18>
    26b8:	2000      	movs	r0, #0
    26ba:	bd08      	pop	{r3, pc}
    26bc:	4903      	ldr	r1, [pc, #12]	; (26cc <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    26be:	f8d1 2001 	ldr.w	r2, [r1, #1]
    26c2:	6002      	str	r2, [r0, #0]
    26c4:	7949      	ldrb	r1, [r1, #5]
    26c6:	7101      	strb	r1, [r0, #4]
    26c8:	2001      	movs	r0, #1
    26ca:	bd08      	pop	{r3, pc}
    26cc:	20000352 	.word	0x20000352

000026d0 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>:
    26d0:	4905      	ldr	r1, [pc, #20]	; (26e8 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x18>)
    26d2:	22ff      	movs	r2, #255	; 0xff
    26d4:	700a      	strb	r2, [r1, #0]
    26d6:	460a      	mov	r2, r1
    26d8:	6803      	ldr	r3, [r0, #0]
    26da:	f8c2 3001 	str.w	r3, [r2, #1]
    26de:	7900      	ldrb	r0, [r0, #4]
    26e0:	7150      	strb	r0, [r2, #5]
    26e2:	2000      	movs	r0, #0
    26e4:	7008      	strb	r0, [r1, #0]
    26e6:	4770      	bx	lr
    26e8:	20000352 	.word	0x20000352
    26ec:	b570      	push	{r4, r5, r6, lr}
    26ee:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
    26f2:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    26f6:	2401      	movs	r4, #1
    26f8:	fb03 2101 	mla	r1, r3, r1, r2
    26fc:	2225      	movs	r2, #37	; 0x25
    26fe:	fbb1 f3f2 	udiv	r3, r1, r2
    2702:	fb02 1113 	mls	r1, r2, r3, r1
    2706:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    270a:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
    270e:	f001 0307 	and.w	r3, r1, #7
    2712:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
    2716:	fa04 f303 	lsl.w	r3, r4, r3
    271a:	421a      	tst	r2, r3
    271c:	d004      	beq.n	2728 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x58>
    271e:	bf00      	nop
    2720:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33
    2724:	2000      	movs	r0, #0
    2726:	bd70      	pop	{r4, r5, r6, pc}
    2728:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    272c:	fbb1 f3f2 	udiv	r3, r1, r2
    2730:	fb02 1113 	mls	r1, r2, r3, r1
    2734:	1c49      	adds	r1, r1, #1
    2736:	b2c9      	uxtb	r1, r1
    2738:	2300      	movs	r3, #0
    273a:	18c5      	adds	r5, r0, r3
    273c:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
    2740:	428a      	cmp	r2, r1
    2742:	d312      	bcc.n	276a <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x9a>
    2744:	f895 5026 	ldrb.w	r5, [r5, #38]	; 0x26
    2748:	2200      	movs	r2, #0
    274a:	bf00      	nop
    274c:	fa04 f602 	lsl.w	r6, r4, r2
    2750:	4235      	tst	r5, r6
    2752:	d001      	beq.n	2758 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x88>
    2754:	1e49      	subs	r1, r1, #1
    2756:	b2c9      	uxtb	r1, r1
    2758:	b121      	cbz	r1, 2764 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x94>
    275a:	1c52      	adds	r2, r2, #1
    275c:	b2d2      	uxtb	r2, r2
    275e:	2a08      	cmp	r2, #8
    2760:	d3f4      	bcc.n	274c <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x7c>
    2762:	e004      	b.n	276e <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x9e>
    2764:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    2768:	e7da      	b.n	2720 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x50>
    276a:	1a89      	subs	r1, r1, r2
    276c:	b2c9      	uxtb	r1, r1
    276e:	1c5b      	adds	r3, r3, #1
    2770:	b2db      	uxtb	r3, r3
    2772:	2b05      	cmp	r3, #5
    2774:	d3e1      	bcc.n	273a <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x6a>
    2776:	201f      	movs	r0, #31
    2778:	bd70      	pop	{r4, r5, r6, pc}
    277a:	0000      	movs	r0, r0
    277c:	b570      	push	{r4, r5, r6, lr}
    277e:	1c49      	adds	r1, r1, #1
    2780:	2300      	movs	r3, #0
    2782:	b2c9      	uxtb	r1, r1
    2784:	2401      	movs	r4, #1
    2786:	18c5      	adds	r5, r0, r3
    2788:	79aa      	ldrb	r2, [r5, #6]
    278a:	428a      	cmp	r2, r1
    278c:	d312      	bcc.n	27b4 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xe4>
    278e:	f895 5001 	ldrb.w	r5, [r5, #1]
    2792:	2200      	movs	r2, #0
    2794:	fa04 f602 	lsl.w	r6, r4, r2
    2798:	4235      	tst	r5, r6
    279a:	d001      	beq.n	27a0 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xd0>
    279c:	1e49      	subs	r1, r1, #1
    279e:	b2c9      	uxtb	r1, r1
    27a0:	b121      	cbz	r1, 27ac <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xdc>
    27a2:	1c52      	adds	r2, r2, #1
    27a4:	b2d2      	uxtb	r2, r2
    27a6:	2a08      	cmp	r2, #8
    27a8:	d3f4      	bcc.n	2794 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xc4>
    27aa:	e005      	b.n	27b8 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xe8>
    27ac:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    27b0:	b2c0      	uxtb	r0, r0
    27b2:	bd70      	pop	{r4, r5, r6, pc}
    27b4:	1a89      	subs	r1, r1, r2
    27b6:	b2c9      	uxtb	r1, r1
    27b8:	1c5b      	adds	r3, r3, #1
    27ba:	b2db      	uxtb	r3, r3
    27bc:	2b05      	cmp	r3, #5
    27be:	d3e2      	bcc.n	2786 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xb6>
    27c0:	219d      	movs	r1, #157	; 0x9d
    27c2:	2046      	movs	r0, #70	; 0x46
    27c4:	f7fe f94e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000027c8 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>:
    27c8:	7841      	ldrb	r1, [r0, #1]
    27ca:	b141      	cbz	r1, 27de <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    27cc:	78c0      	ldrb	r0, [r0, #3]
    27ce:	282b      	cmp	r0, #43	; 0x2b
    27d0:	d203      	bcs.n	27da <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x12>
    27d2:	4a04      	ldr	r2, [pc, #16]	; (27e4 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x1c>)
    27d4:	5c10      	ldrb	r0, [r2, r0]
    27d6:	4288      	cmp	r0, r1
    27d8:	d101      	bne.n	27de <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    27da:	2001      	movs	r0, #1
    27dc:	4770      	bx	lr
    27de:	2000      	movs	r0, #0
    27e0:	4770      	bx	lr
    27e2:	0000      	.short	0x0000
    27e4:	000108ac 	.word	0x000108ac

000027e8 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>:
    27e8:	b510      	push	{r4, lr}
    27ea:	2201      	movs	r2, #1
    27ec:	70c1      	strb	r1, [r0, #3]
    27ee:	292b      	cmp	r1, #43	; 0x2b
    27f0:	d202      	bcs.n	27f8 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x10>
    27f2:	4a06      	ldr	r2, [pc, #24]	; (280c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x24>)
    27f4:	5c52      	ldrb	r2, [r2, r1]
    27f6:	e006      	b.n	2806 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    27f8:	29ff      	cmp	r1, #255	; 0xff
    27fa:	d004      	beq.n	2806 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    27fc:	f240 4175 	movw	r1, #1141	; 0x475
    2800:	202a      	movs	r0, #42	; 0x2a
    2802:	f7fe f92f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2806:	7042      	strb	r2, [r0, #1]
    2808:	bd10      	pop	{r4, pc}
    280a:	0000      	.short	0x0000
    280c:	000108ac 	.word	0x000108ac

00002810 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    2810:	4904      	ldr	r1, [pc, #16]	; (2824 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    2812:	7c89      	ldrb	r1, [r1, #18]
    2814:	0749      	lsls	r1, r1, #29
    2816:	d400      	bmi.n	281a <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    2818:	b108      	cbz	r0, 281e <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    281a:	2000      	movs	r0, #0
    281c:	4770      	bx	lr
    281e:	2001      	movs	r0, #1
    2820:	4770      	bx	lr
    2822:	0000      	.short	0x0000
    2824:	20000fec 	.word	0x20000fec

00002828 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    2828:	4803      	ldr	r0, [pc, #12]	; (2838 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    282a:	7c80      	ldrb	r0, [r0, #18]
    282c:	0780      	lsls	r0, r0, #30
    282e:	d401      	bmi.n	2834 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    2830:	2001      	movs	r0, #1
    2832:	4770      	bx	lr
    2834:	2000      	movs	r0, #0
    2836:	4770      	bx	lr
    2838:	20000fec 	.word	0x20000fec

0000283c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    283c:	4803      	ldr	r0, [pc, #12]	; (284c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    283e:	7c80      	ldrb	r0, [r0, #18]
    2840:	07c0      	lsls	r0, r0, #31
    2842:	d001      	beq.n	2848 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    2844:	2000      	movs	r0, #0
    2846:	4770      	bx	lr
    2848:	2001      	movs	r0, #1
    284a:	4770      	bx	lr
    284c:	20000fec 	.word	0x20000fec
    2850:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    2854:	4688      	mov	r8, r1
    2856:	4699      	mov	r9, r3
    2858:	4615      	mov	r5, r2
    285a:	4604      	mov	r4, r0
    285c:	a901      	add	r1, sp, #4
    285e:	f00b f924 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    2862:	bbb0      	cbnz	r0, 28d2 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x96>
    2864:	9e02      	ldr	r6, [sp, #8]
    2866:	2001      	movs	r0, #1
    2868:	3688      	adds	r6, #136	; 0x88
    286a:	b17d      	cbz	r5, 288c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x50>
    286c:	4620      	mov	r0, r4
    286e:	f7fe fcdb 	bl	1228 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    2872:	0004      	movs	r4, r0
    2874:	d00d      	beq.n	2892 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x56>
    2876:	4629      	mov	r1, r5
    2878:	f00a fe0c 	bl	d494 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    287c:	b118      	cbz	r0, 2886 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4a>
    287e:	4918      	ldr	r1, [pc, #96]	; (28e0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa4>)
    2880:	8849      	ldrh	r1, [r1, #2]
    2882:	42a9      	cmp	r1, r5
    2884:	d207      	bcs.n	2896 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x5a>
    2886:	2000      	movs	r0, #0
    2888:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    288c:	f886 0024 	strb.w	r0, [r6, #36]	; 0x24
    2890:	e01f      	b.n	28d2 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x96>
    2892:	2167      	movs	r1, #103	; 0x67
    2894:	e020      	b.n	28d8 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x9c>
    2896:	4601      	mov	r1, r0
    2898:	466a      	mov	r2, sp
    289a:	4620      	mov	r0, r4
    289c:	f00a fdf3 	bl	d486 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    28a0:	9800      	ldr	r0, [sp, #0]
    28a2:	2700      	movs	r7, #0
    28a4:	8007      	strh	r7, [r0, #0]
    28a6:	7087      	strb	r7, [r0, #2]
    28a8:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
    28ac:	b109      	cbz	r1, 28b2 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x76>
    28ae:	f04f 0802 	mov.w	r8, #2
    28b2:	4641      	mov	r1, r8
    28b4:	f00b fc00 	bl	e0b8 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    28b8:	9800      	ldr	r0, [sp, #0]
    28ba:	462a      	mov	r2, r5
    28bc:	4649      	mov	r1, r9
    28be:	1cc0      	adds	r0, r0, #3
    28c0:	f00d fed5 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    28c4:	4620      	mov	r0, r4
    28c6:	4629      	mov	r1, r5
    28c8:	f00a fd9b 	bl	d402 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    28cc:	b118      	cbz	r0, 28d6 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x9a>
    28ce:	f886 7024 	strb.w	r7, [r6, #36]	; 0x24
    28d2:	2001      	movs	r0, #1
    28d4:	e7d8      	b.n	2888 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4c>
    28d6:	217c      	movs	r1, #124	; 0x7c
    28d8:	202b      	movs	r0, #43	; 0x2b
    28da:	f7fe f8c3 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    28de:	0000      	.short	0x0000
    28e0:	20000fec 	.word	0x20000fec

000028e4 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    28e4:	4809      	ldr	r0, [pc, #36]	; (290c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    28e6:	b082      	sub	sp, #8
    28e8:	7a00      	ldrb	r0, [r0, #8]
    28ea:	f88d 0000 	strb.w	r0, [sp]
    28ee:	9800      	ldr	r0, [sp, #0]
    28f0:	9000      	str	r0, [sp, #0]
    28f2:	f89d 0000 	ldrb.w	r0, [sp]
    28f6:	2800      	cmp	r0, #0
    28f8:	d105      	bne.n	2906 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x22>
    28fa:	2202      	movs	r2, #2
    28fc:	4904      	ldr	r1, [pc, #16]	; (2910 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x2c>)
    28fe:	4803      	ldr	r0, [pc, #12]	; (290c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    2900:	b002      	add	sp, #8
    2902:	f00b bc0c 	b.w	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2906:	b002      	add	sp, #8
    2908:	4770      	bx	lr
    290a:	0000      	.short	0x0000
    290c:	20001004 	.word	0x20001004
    2910:	0000e165 	.word	0x0000e165

00002914 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    2914:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2918:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 2ad8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c4>
    291c:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 2adc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c8>
    2920:	4683      	mov	fp, r0
    2922:	f04f 0901 	mov.w	r9, #1
    2926:	2600      	movs	r6, #0
    2928:	f8d8 0004 	ldr.w	r0, [r8, #4]
    292c:	7a00      	ldrb	r0, [r0, #8]
    292e:	f88d 0000 	strb.w	r0, [sp]
    2932:	9800      	ldr	r0, [sp, #0]
    2934:	9000      	str	r0, [sp, #0]
    2936:	f89d 1000 	ldrb.w	r1, [sp]
    293a:	292a      	cmp	r1, #42	; 0x2a
    293c:	d106      	bne.n	294c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    293e:	f89a 1013 	ldrb.w	r1, [sl, #19]
    2942:	b119      	cbz	r1, 294c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    2944:	f8ba 0014 	ldrh.w	r0, [sl, #20]
    2948:	2800      	cmp	r0, #0
    294a:	d06f      	beq.n	2a2c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    294c:	2700      	movs	r7, #0
    294e:	f88d 6000 	strb.w	r6, [sp]
    2952:	4668      	mov	r0, sp
    2954:	f000 f924 	bl	2ba0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xb0>
    2958:	f89d 1000 	ldrb.w	r1, [sp]
    295c:	2900      	cmp	r1, #0
    295e:	d1f8      	bne.n	2952 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    2960:	2800      	cmp	r0, #0
    2962:	d063      	beq.n	2a2c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    2964:	4604      	mov	r4, r0
    2966:	7a00      	ldrb	r0, [r0, #8]
    2968:	f88d 0000 	strb.w	r0, [sp]
    296c:	9800      	ldr	r0, [sp, #0]
    296e:	9000      	str	r0, [sp, #0]
    2970:	f89d 5000 	ldrb.w	r5, [sp]
    2974:	1ea8      	subs	r0, r5, #2
    2976:	2830      	cmp	r0, #48	; 0x30
    2978:	d27b      	bcs.n	2a72 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    297a:	e8df f000 	tbb	[pc, r0]
    297e:	3b18      	.short	0x3b18
    2980:	97359727 	.word	0x97359727
    2984:	7b977b3b 	.word	0x7b977b3b
    2988:	7b417b7b 	.word	0x7b417b7b
    298c:	97359797 	.word	0x97359797
    2990:	35977b7b 	.word	0x35977b7b
    2994:	7b979797 	.word	0x7b979797
    2998:	7b97975a 	.word	0x7b97975a
    299c:	8f7b7b97 	.word	0x8f7b7b97
    29a0:	2197977b 	.word	0x2197977b
    29a4:	97816963 	.word	0x97816963
    29a8:	97979797 	.word	0x97979797
    29ac:	6397      	.short	0x6397
    29ae:	6862      	ldr	r2, [r4, #4]
    29b0:	b912      	cbnz	r2, 29b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    29b2:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
    29b6:	e076      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    29b8:	4659      	mov	r1, fp
    29ba:	4620      	mov	r0, r4
    29bc:	4790      	blx	r2
    29be:	e050      	b.n	2a62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14e>
    29c0:	6862      	ldr	r2, [r4, #4]
    29c2:	2a00      	cmp	r2, #0
    29c4:	d1f8      	bne.n	29b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    29c6:	f240 11ad 	movw	r1, #429	; 0x1ad
    29ca:	e06c      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    29cc:	f001 ff70 	bl	48b0 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    29d0:	b128      	cbz	r0, 29de <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xca>
    29d2:	6862      	ldr	r2, [r4, #4]
    29d4:	b12a      	cbz	r2, 29e2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xce>
    29d6:	4659      	mov	r1, fp
    29d8:	4620      	mov	r0, r4
    29da:	4790      	blx	r2
    29dc:	e07a      	b.n	2ad4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c0>
    29de:	2701      	movs	r7, #1
    29e0:	e03f      	b.n	2a62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14e>
    29e2:	f240 2133 	movw	r1, #563	; 0x233
    29e6:	e05e      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    29e8:	6862      	ldr	r2, [r4, #4]
    29ea:	2a00      	cmp	r2, #0
    29ec:	d1e4      	bne.n	29b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    29ee:	f240 213f 	movw	r1, #575	; 0x23f
    29f2:	e058      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    29f4:	6862      	ldr	r2, [r4, #4]
    29f6:	2a00      	cmp	r2, #0
    29f8:	d1de      	bne.n	29b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    29fa:	f240 214b 	movw	r1, #587	; 0x24b
    29fe:	e052      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a00:	6860      	ldr	r0, [r4, #4]
    2a02:	465d      	mov	r5, fp
    2a04:	b180      	cbz	r0, 2a28 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x114>
    2a06:	8804      	ldrh	r4, [r0, #0]
    2a08:	4620      	mov	r0, r4
    2a0a:	f7fe fc0d 	bl	1228 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    2a0e:	b170      	cbz	r0, 2a2e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11a>
    2a10:	706e      	strb	r6, [r5, #1]
    2a12:	220f      	movs	r2, #15
    2a14:	702a      	strb	r2, [r5, #0]
    2a16:	80ec      	strh	r4, [r5, #6]
    2a18:	f8a5 9008 	strh.w	r9, [r5, #8]
    2a1c:	4631      	mov	r1, r6
    2a1e:	f885 9004 	strb.w	r9, [r5, #4]
    2a22:	f00a fdce 	bl	d5c2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    2a26:	e055      	b.n	2ad4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c0>
    2a28:	21ce      	movs	r1, #206	; 0xce
    2a2a:	e03c      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a2c:	e031      	b.n	2a92 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17e>
    2a2e:	21ae      	movs	r1, #174	; 0xae
    2a30:	e039      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a32:	6862      	ldr	r2, [r4, #4]
    2a34:	b11a      	cbz	r2, 2a3e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12a>
    2a36:	4659      	mov	r1, fp
    2a38:	4620      	mov	r0, r4
    2a3a:	4790      	blx	r2
    2a3c:	e7cf      	b.n	29de <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xca>
    2a3e:	f240 2163 	movw	r1, #611	; 0x263
    2a42:	e030      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a44:	6862      	ldr	r2, [r4, #4]
    2a46:	2a00      	cmp	r2, #0
    2a48:	d1b6      	bne.n	29b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    2a4a:	f240 216f 	movw	r1, #623	; 0x26f
    2a4e:	e02a      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a50:	f88b 6001 	strb.w	r6, [fp, #1]
    2a54:	211a      	movs	r1, #26
    2a56:	f88b 1000 	strb.w	r1, [fp]
    2a5a:	f8d4 1009 	ldr.w	r1, [r4, #9]
    2a5e:	f8cb 1004 	str.w	r1, [fp, #4]
    2a62:	7226      	strb	r6, [r4, #8]
    2a64:	2d21      	cmp	r5, #33	; 0x21
    2a66:	d024      	beq.n	2ab2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    2a68:	2d14      	cmp	r5, #20
    2a6a:	d025      	beq.n	2ab8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a4>
    2a6c:	2d22      	cmp	r5, #34	; 0x22
    2a6e:	d02a      	beq.n	2ac6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b2>
    2a70:	e02e      	b.n	2ad0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1bc>
    2a72:	e01b      	b.n	2aac <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x198>
    2a74:	6862      	ldr	r2, [r4, #4]
    2a76:	2a00      	cmp	r2, #0
    2a78:	d19e      	bne.n	29b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    2a7a:	f240 2196 	movw	r1, #662	; 0x296
    2a7e:	e012      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a80:	4817      	ldr	r0, [pc, #92]	; (2ae0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1cc>)
    2a82:	6802      	ldr	r2, [r0, #0]
    2a84:	b122      	cbz	r2, 2a90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17c>
    2a86:	6860      	ldr	r0, [r4, #4]
    2a88:	b128      	cbz	r0, 2a96 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x182>
    2a8a:	8800      	ldrh	r0, [r0, #0]
    2a8c:	4659      	mov	r1, fp
    2a8e:	4790      	blx	r2
    2a90:	2002      	movs	r0, #2
    2a92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a96:	f240 219f 	movw	r1, #671	; 0x29f
    2a9a:	e004      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a9c:	6862      	ldr	r2, [r4, #4]
    2a9e:	2a00      	cmp	r2, #0
    2aa0:	d18a      	bne.n	29b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    2aa2:	f44f 712b 	mov.w	r1, #684	; 0x2ac
    2aa6:	2010      	movs	r0, #16
    2aa8:	f7fd ffdc 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2aac:	f240 21bd 	movw	r1, #701	; 0x2bd
    2ab0:	e7f9      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2ab2:	f7ff feb9 	bl	2828 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    2ab6:	e008      	b.n	2aca <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b6>
    2ab8:	f89b 000e 	ldrb.w	r0, [fp, #14]
    2abc:	f000 0001 	and.w	r0, r0, #1
    2ac0:	f7ff fea6 	bl	2810 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    2ac4:	e001      	b.n	2aca <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b6>
    2ac6:	f7ff feb9 	bl	283c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    2aca:	2800      	cmp	r0, #0
    2acc:	f47f af2c 	bne.w	2928 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14>
    2ad0:	2f00      	cmp	r7, #0
    2ad2:	d1fb      	bne.n	2acc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b8>
    2ad4:	2004      	movs	r0, #4
    2ad6:	e7dc      	b.n	2a92 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17e>
    2ad8:	20001018 	.word	0x20001018
    2adc:	20000fec 	.word	0x20000fec
    2ae0:	200000b0 	.word	0x200000b0

00002ae4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    2ae4:	4901      	ldr	r1, [pc, #4]	; (2aec <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    2ae6:	7008      	strb	r0, [r1, #0]
    2ae8:	f000 b8b0 	b.w	2c4c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x15c>
    2aec:	20000358 	.word	0x20000358

00002af0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY>:
    2af0:	4902      	ldr	r1, [pc, #8]	; (2afc <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xc>)
    2af2:	4801      	ldr	r0, [pc, #4]	; (2af8 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x8>)
    2af4:	6008      	str	r0, [r1, #0]
    2af6:	4770      	bx	lr
    2af8:	00002b01 	.word	0x00002b01
    2afc:	200000b0 	.word	0x200000b0
    2b00:	b538      	push	{r3, r4, r5, lr}
    2b02:	000d      	movs	r5, r1
    2b04:	d014      	beq.n	2b30 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x40>
    2b06:	80a8      	strh	r0, [r5, #4]
    2b08:	2100      	movs	r1, #0
    2b0a:	7269      	strb	r1, [r5, #9]
    2b0c:	f7fe fb76 	bl	11fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    2b10:	4604      	mov	r4, r0
    2b12:	f00a fc9a 	bl	d44a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    2b16:	b168      	cbz	r0, 2b34 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x44>
    2b18:	4601      	mov	r1, r0
    2b1a:	466a      	mov	r2, sp
    2b1c:	4620      	mov	r0, r4
    2b1e:	f00a fcb2 	bl	d486 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    2b22:	80e8      	strh	r0, [r5, #6]
    2b24:	b148      	cbz	r0, 2b3a <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x4a>
    2b26:	28fb      	cmp	r0, #251	; 0xfb
    2b28:	d90a      	bls.n	2b40 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x50>
    2b2a:	f44f 7186 	mov.w	r1, #268	; 0x10c
    2b2e:	e032      	b.n	2b96 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2b30:	21fc      	movs	r1, #252	; 0xfc
    2b32:	e030      	b.n	2b96 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2b34:	f240 1105 	movw	r1, #261	; 0x105
    2b38:	e02d      	b.n	2b96 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2b3a:	f44f 7185 	mov.w	r1, #266	; 0x10a
    2b3e:	e02a      	b.n	2b96 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2b40:	9800      	ldr	r0, [sp, #0]
    2b42:	f00b fa77 	bl	e034 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>
    2b46:	2801      	cmp	r0, #1
    2b48:	d004      	beq.n	2b54 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x64>
    2b4a:	2802      	cmp	r0, #2
    2b4c:	d002      	beq.n	2b54 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x64>
    2b4e:	f44f 718e 	mov.w	r1, #284	; 0x11c
    2b52:	e020      	b.n	2b96 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2b54:	7228      	strb	r0, [r5, #8]
    2b56:	6828      	ldr	r0, [r5, #0]
    2b58:	b1a8      	cbz	r0, 2b86 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x96>
    2b5a:	9900      	ldr	r1, [sp, #0]
    2b5c:	88ea      	ldrh	r2, [r5, #6]
    2b5e:	1cc9      	adds	r1, r1, #3
    2b60:	f00d fd85 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2b64:	4620      	mov	r0, r4
    2b66:	f00a fc38 	bl	d3da <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    2b6a:	b178      	cbz	r0, 2b8c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x9c>
    2b6c:	4620      	mov	r0, r4
    2b6e:	2100      	movs	r1, #0
    2b70:	f00a fd27 	bl	d5c2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    2b74:	b168      	cbz	r0, 2b92 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa2>
    2b76:	4809      	ldr	r0, [pc, #36]	; (2b9c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xac>)
    2b78:	7cc1      	ldrb	r1, [r0, #19]
    2b7a:	2900      	cmp	r1, #0
    2b7c:	d002      	beq.n	2b84 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x94>
    2b7e:	8a81      	ldrh	r1, [r0, #20]
    2b80:	1e49      	subs	r1, r1, #1
    2b82:	8281      	strh	r1, [r0, #20]
    2b84:	bd38      	pop	{r3, r4, r5, pc}
    2b86:	f240 1123 	movw	r1, #291	; 0x123
    2b8a:	e004      	b.n	2b96 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2b8c:	f44f 7194 	mov.w	r1, #296	; 0x128
    2b90:	e001      	b.n	2b96 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2b92:	f240 112d 	movw	r1, #301	; 0x12d
    2b96:	2010      	movs	r0, #16
    2b98:	f7fd ff64 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2b9c:	20000fec 	.word	0x20000fec
    2ba0:	b538      	push	{r3, r4, r5, lr}
    2ba2:	4602      	mov	r2, r0
    2ba4:	4b11      	ldr	r3, [pc, #68]	; (2bec <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xfc>)
    2ba6:	2000      	movs	r0, #0
    2ba8:	7010      	strb	r0, [r2, #0]
    2baa:	6858      	ldr	r0, [r3, #4]
    2bac:	7a01      	ldrb	r1, [r0, #8]
    2bae:	f88d 1000 	strb.w	r1, [sp]
    2bb2:	9900      	ldr	r1, [sp, #0]
    2bb4:	9100      	str	r1, [sp, #0]
    2bb6:	f89d 5000 	ldrb.w	r5, [sp]
    2bba:	2401      	movs	r4, #1
    2bbc:	2d01      	cmp	r5, #1
    2bbe:	d006      	beq.n	2bce <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xde>
    2bc0:	f3ef 8110 	mrs	r1, PRIMASK
    2bc4:	b672      	cpsid	i
    2bc6:	6805      	ldr	r5, [r0, #0]
    2bc8:	605d      	str	r5, [r3, #4]
    2bca:	b111      	cbz	r1, 2bd2 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xe2>
    2bcc:	e002      	b.n	2bd4 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xe4>
    2bce:	2000      	movs	r0, #0
    2bd0:	bd38      	pop	{r3, r4, r5, pc}
    2bd2:	b662      	cpsie	i
    2bd4:	7a01      	ldrb	r1, [r0, #8]
    2bd6:	f88d 1000 	strb.w	r1, [sp]
    2bda:	9900      	ldr	r1, [sp, #0]
    2bdc:	9100      	str	r1, [sp, #0]
    2bde:	f89d 3000 	ldrb.w	r3, [sp]
    2be2:	2b00      	cmp	r3, #0
    2be4:	d1f4      	bne.n	2bd0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xe0>
    2be6:	7014      	strb	r4, [r2, #0]
    2be8:	bd38      	pop	{r3, r4, r5, pc}
    2bea:	0000      	.short	0x0000
    2bec:	20001018 	.word	0x20001018
    2bf0:	b538      	push	{r3, r4, r5, lr}
    2bf2:	b1d0      	cbz	r0, 2c2a <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x13a>
    2bf4:	6041      	str	r1, [r0, #4]
    2bf6:	f100 0108 	add.w	r1, r0, #8
    2bfa:	700a      	strb	r2, [r1, #0]
    2bfc:	f3ef 8310 	mrs	r3, PRIMASK
    2c00:	b672      	cpsid	i
    2c02:	4c10      	ldr	r4, [pc, #64]	; (2c44 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x154>)
    2c04:	6004      	str	r4, [r0, #0]
    2c06:	1f21      	subs	r1, r4, #4
    2c08:	684a      	ldr	r2, [r1, #4]
    2c0a:	b14a      	cbz	r2, 2c20 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x130>
    2c0c:	7a12      	ldrb	r2, [r2, #8]
    2c0e:	f88d 2000 	strb.w	r2, [sp]
    2c12:	9a00      	ldr	r2, [sp, #0]
    2c14:	9200      	str	r2, [sp, #0]
    2c16:	f89d 5000 	ldrb.w	r5, [sp]
    2c1a:	2d01      	cmp	r5, #1
    2c1c:	d100      	bne.n	2c20 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x130>
    2c1e:	600c      	str	r4, [r1, #0]
    2c20:	680a      	ldr	r2, [r1, #0]
    2c22:	6010      	str	r0, [r2, #0]
    2c24:	6008      	str	r0, [r1, #0]
    2c26:	b12b      	cbz	r3, 2c34 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x144>
    2c28:	e005      	b.n	2c36 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x146>
    2c2a:	f240 21e2 	movw	r1, #738	; 0x2e2
    2c2e:	2010      	movs	r0, #16
    2c30:	f7fd ff18 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2c34:	b662      	cpsie	i
    2c36:	4804      	ldr	r0, [pc, #16]	; (2c48 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x158>)
    2c38:	7800      	ldrb	r0, [r0, #0]
    2c3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2c3e:	f009 bc5f 	b.w	c500 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2c42:	0000      	.short	0x0000
    2c44:	2000101c 	.word	0x2000101c
    2c48:	20000358 	.word	0x20000358
    2c4c:	4808      	ldr	r0, [pc, #32]	; (2c70 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x180>)
    2c4e:	b510      	push	{r4, lr}
    2c50:	2100      	movs	r1, #0
    2c52:	6141      	str	r1, [r0, #20]
    2c54:	6181      	str	r1, [r0, #24]
    2c56:	61c1      	str	r1, [r0, #28]
    2c58:	6201      	str	r1, [r0, #32]
    2c5a:	2212      	movs	r2, #18
    2c5c:	f00d fd81 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2c60:	4803      	ldr	r0, [pc, #12]	; (2c70 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x180>)
    2c62:	3014      	adds	r0, #20
    2c64:	2101      	movs	r1, #1
    2c66:	7301      	strb	r1, [r0, #12]
    2c68:	1d01      	adds	r1, r0, #4
    2c6a:	6041      	str	r1, [r0, #4]
    2c6c:	6001      	str	r1, [r0, #0]
    2c6e:	bd10      	pop	{r4, pc}
    2c70:	20001004 	.word	0x20001004

00002c74 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    2c74:	b4f0      	push	{r4, r5, r6, r7}
    2c76:	8150      	strh	r0, [r2, #10]
    2c78:	890c      	ldrh	r4, [r1, #8]
    2c7a:	4613      	mov	r3, r2
    2c7c:	8194      	strh	r4, [r2, #12]
    2c7e:	898a      	ldrh	r2, [r1, #12]
    2c80:	81da      	strh	r2, [r3, #14]
    2c82:	8948      	ldrh	r0, [r1, #10]
    2c84:	8218      	strh	r0, [r3, #16]
    2c86:	89cd      	ldrh	r5, [r1, #14]
    2c88:	825d      	strh	r5, [r3, #18]
    2c8a:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    2c8c:	42ae      	cmp	r6, r5
    2c8e:	d108      	bne.n	2ca2 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    2c90:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    2c92:	4285      	cmp	r5, r0
    2c94:	d105      	bne.n	2ca2 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    2c96:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    2c98:	4295      	cmp	r5, r2
    2c9a:	d102      	bne.n	2ca2 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    2c9c:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
    2c9e:	42a2      	cmp	r2, r4
    2ca0:	d001      	beq.n	2ca6 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    2ca2:	2201      	movs	r2, #1
    2ca4:	e000      	b.n	2ca8 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x34>
    2ca6:	2200      	movs	r2, #0
    2ca8:	751a      	strb	r2, [r3, #20]
    2caa:	8548      	strh	r0, [r1, #42]	; 0x2a
    2cac:	8a58      	ldrh	r0, [r3, #18]
    2cae:	85c8      	strh	r0, [r1, #46]	; 0x2e
    2cb0:	8998      	ldrh	r0, [r3, #12]
    2cb2:	8588      	strh	r0, [r1, #44]	; 0x2c
    2cb4:	89d8      	ldrh	r0, [r3, #14]
    2cb6:	8608      	strh	r0, [r1, #48]	; 0x30
    2cb8:	bcf0      	pop	{r4, r5, r6, r7}
    2cba:	2214      	movs	r2, #20
    2cbc:	4901      	ldr	r1, [pc, #4]	; (2cc4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x50>)
    2cbe:	4618      	mov	r0, r3
    2cc0:	f00b ba41 	b.w	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    2cc4:	0000e323 	.word	0x0000e323

00002cc8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    2cc8:	8150      	strh	r0, [r2, #10]
    2cca:	8a88      	ldrh	r0, [r1, #20]
    2ccc:	8190      	strh	r0, [r2, #12]
    2cce:	8ac8      	ldrh	r0, [r1, #22]
    2cd0:	81d0      	strh	r0, [r2, #14]
    2cd2:	8b08      	ldrh	r0, [r1, #24]
    2cd4:	8210      	strh	r0, [r2, #16]
    2cd6:	8b48      	ldrh	r0, [r1, #26]
    2cd8:	4613      	mov	r3, r2
    2cda:	8250      	strh	r0, [r2, #18]
    2cdc:	2221      	movs	r2, #33	; 0x21
    2cde:	4902      	ldr	r1, [pc, #8]	; (2ce8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>)
    2ce0:	4618      	mov	r0, r3
    2ce2:	f00b ba1c 	b.w	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2ce6:	0000      	.short	0x0000
    2ce8:	0000e359 	.word	0x0000e359

00002cec <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    2cec:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cee:	f06f 021f 	mvn.w	r2, #31
    2cf2:	0c01      	lsrs	r1, r0, #16
    2cf4:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    2cf8:	251f      	movs	r5, #31
    2cfa:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    2cfe:	3854      	subs	r0, #84	; 0x54
    2d00:	d00d      	beq.n	2d1e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2d02:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    2d06:	3855      	subs	r0, #85	; 0x55
    2d08:	d009      	beq.n	2d1e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2d0a:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    2d0e:	38aa      	subs	r0, #170	; 0xaa
    2d10:	d005      	beq.n	2d1e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2d12:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    2d16:	38aa      	subs	r0, #170	; 0xaa
    2d18:	d001      	beq.n	2d1e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2d1a:	2001      	movs	r0, #1
    2d1c:	e000      	b.n	2d20 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    2d1e:	2000      	movs	r0, #0
    2d20:	2200      	movs	r2, #0
    2d22:	4613      	mov	r3, r2
    2d24:	ea4f 0402 	mov.w	r4, r2
    2d28:	ea82 0701 	eor.w	r7, r2, r1
    2d2c:	43ff      	mvns	r7, r7
    2d2e:	431f      	orrs	r7, r3
    2d30:	1c7f      	adds	r7, r7, #1
    2d32:	d00f      	beq.n	2d54 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    2d34:	f006 0701 	and.w	r7, r6, #1
    2d38:	0852      	lsrs	r2, r2, #1
    2d3a:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    2d3e:	f005 0701 	and.w	r7, r5, #1
    2d42:	085b      	lsrs	r3, r3, #1
    2d44:	0876      	lsrs	r6, r6, #1
    2d46:	086d      	lsrs	r5, r5, #1
    2d48:	1c64      	adds	r4, r4, #1
    2d4a:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    2d4e:	2c16      	cmp	r4, #22
    2d50:	d3ea      	bcc.n	2d28 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    2d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d54:	2000      	movs	r0, #0
    2d56:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002d58 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA>:
    2d58:	b510      	push	{r4, lr}
    2d5a:	4604      	mov	r4, r0
    2d5c:	f00b fb8c 	bl	e478 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    2d60:	b308      	cbz	r0, 2da6 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2d62:	43e0      	mvns	r0, r4
    2d64:	f00b fb88 	bl	e478 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    2d68:	b1e8      	cbz	r0, 2da6 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2d6a:	16a0      	asrs	r0, r4, #26
    2d6c:	ea80 0060 	eor.w	r0, r0, r0, asr #1
    2d70:	1e41      	subs	r1, r0, #1
    2d72:	4208      	tst	r0, r1
    2d74:	d017      	beq.n	2da6 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2d76:	4620      	mov	r0, r4
    2d78:	f00b fbcd 	bl	e516 <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A>
    2d7c:	2818      	cmp	r0, #24
    2d7e:	d812      	bhi.n	2da6 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2d80:	b2a0      	uxth	r0, r4
    2d82:	ebb0 4f14 	cmp.w	r0, r4, lsr #16
    2d86:	d107      	bne.n	2d98 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x40>
    2d88:	f04f 11ff 	mov.w	r1, #16711935	; 0xff00ff
    2d8c:	ea01 2114 	and.w	r1, r1, r4, lsr #8
    2d90:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
    2d94:	4281      	cmp	r1, r0
    2d96:	d006      	beq.n	2da6 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2d98:	4804      	ldr	r0, [pc, #16]	; (2dac <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x54>)
    2d9a:	4044      	eors	r4, r0
    2d9c:	1e60      	subs	r0, r4, #1
    2d9e:	4204      	tst	r4, r0
    2da0:	d001      	beq.n	2da6 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2da2:	2001      	movs	r0, #1
    2da4:	bd10      	pop	{r4, pc}
    2da6:	2000      	movs	r0, #0
    2da8:	bd10      	pop	{r4, pc}
    2daa:	0000      	.short	0x0000
    2dac:	8e89bed6 	.word	0x8e89bed6

00002db0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    2db0:	b510      	push	{r4, lr}
    2db2:	4804      	ldr	r0, [pc, #16]	; (2dc4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    2db4:	f00b fb71 	bl	e49a <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x7a>
    2db8:	4802      	ldr	r0, [pc, #8]	; (2dc4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    2dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2dbe:	3008      	adds	r0, #8
    2dc0:	f00b bb6b 	b.w	e49a <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x7a>
    2dc4:	200000b4 	.word	0x200000b4

00002dc8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    2dc8:	4801      	ldr	r0, [pc, #4]	; (2dd0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    2dca:	f000 b803 	b.w	2dd4 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    2dce:	0000      	.short	0x0000
    2dd0:	200000bc 	.word	0x200000bc
    2dd4:	b510      	push	{r4, lr}
    2dd6:	e9d0 2100 	ldrd	r2, r1, [r0]
    2dda:	4b09      	ldr	r3, [pc, #36]	; (2e00 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    2ddc:	4c09      	ldr	r4, [pc, #36]	; (2e04 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    2dde:	4353      	muls	r3, r2
    2de0:	4354      	muls	r4, r2
    2de2:	4051      	eors	r1, r2
    2de4:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    2de8:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    2dec:	ea4f 41f1 	mov.w	r1, r1, ror #19
    2df0:	e9c0 2100 	strd	r2, r1, [r0]
    2df4:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    2df8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2dfc:	4618      	mov	r0, r3
    2dfe:	bd10      	pop	{r4, pc}
    2e00:	c6ef3760 	.word	0xc6ef3760
    2e04:	9e3779bb 	.word	0x9e3779bb

00002e08 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>:
    2e08:	b570      	push	{r4, r5, r6, lr}
    2e0a:	6845      	ldr	r5, [r0, #4]
    2e0c:	1d0c      	adds	r4, r1, #4
    2e0e:	2300      	movs	r3, #0
    2e10:	f895 20a6 	ldrb.w	r2, [r5, #166]	; 0xa6
    2e14:	3588      	adds	r5, #136	; 0x88
    2e16:	2601      	movs	r6, #1
    2e18:	4619      	mov	r1, r3
    2e1a:	4628      	mov	r0, r5
    2e1c:	f00a fe6e 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2e20:	b190      	cbz	r0, 2e48 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x40>
    2e22:	6820      	ldr	r0, [r4, #0]
    2e24:	4a09      	ldr	r2, [pc, #36]	; (2e4c <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x44>)
    2e26:	7921      	ldrb	r1, [r4, #4]
    2e28:	4010      	ands	r0, r2
    2e2a:	f8c5 006e 	str.w	r0, [r5, #110]	; 0x6e
    2e2e:	f001 0107 	and.w	r1, r1, #7
    2e32:	f8c5 1072 	str.w	r1, [r5, #114]	; 0x72
    2e36:	2000      	movs	r0, #0
    2e38:	f8a5 005a 	strh.w	r0, [r5, #90]	; 0x5a
    2e3c:	f885 605c 	strb.w	r6, [r5, #92]	; 0x5c
    2e40:	2004      	movs	r0, #4
    2e42:	77a8      	strb	r0, [r5, #30]
    2e44:	2000      	movs	r0, #0
    2e46:	bd70      	pop	{r4, r5, r6, pc}
    2e48:	2001      	movs	r0, #1
    2e4a:	bd70      	pop	{r4, r5, r6, pc}
    2e4c:	3704492f 	.word	0x3704492f

00002e50 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>:
    2e50:	b510      	push	{r4, lr}
    2e52:	1d04      	adds	r4, r0, #4
    2e54:	f004 fce0 	bl	7818 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    2e58:	4a03      	ldr	r2, [pc, #12]	; (2e68 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY+0x18>)
    2e5a:	f001 0107 	and.w	r1, r1, #7
    2e5e:	4010      	ands	r0, r2
    2e60:	6020      	str	r0, [r4, #0]
    2e62:	6061      	str	r1, [r4, #4]
    2e64:	bd10      	pop	{r4, pc}
    2e66:	0000      	.short	0x0000
    2e68:	3704492f 	.word	0x3704492f

00002e6c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>:
    2e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2e70:	4605      	mov	r5, r0
    2e72:	7803      	ldrb	r3, [r0, #0]
    2e74:	6840      	ldr	r0, [r0, #4]
    2e76:	1d0f      	adds	r7, r1, #4
    2e78:	f100 0688 	add.w	r6, r0, #136	; 0x88
    2e7c:	f500 74a9 	add.w	r4, r0, #338	; 0x152
    2e80:	4680      	mov	r8, r0
    2e82:	7f72      	ldrb	r2, [r6, #29]
    2e84:	2107      	movs	r1, #7
    2e86:	4630      	mov	r0, r6
    2e88:	f00a fe38 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2e8c:	b1d0      	cbz	r0, 2ec4 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x58>
    2e8e:	6838      	ldr	r0, [r7, #0]
    2e90:	4a17      	ldr	r2, [pc, #92]	; (2ef0 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x84>)
    2e92:	7939      	ldrb	r1, [r7, #4]
    2e94:	4010      	ands	r0, r2
    2e96:	f8c6 006e 	str.w	r0, [r6, #110]	; 0x6e
    2e9a:	f001 0107 	and.w	r1, r1, #7
    2e9e:	f8c6 1072 	str.w	r1, [r6, #114]	; 0x72
    2ea2:	2000      	movs	r0, #0
    2ea4:	f886 0058 	strb.w	r0, [r6, #88]	; 0x58
    2ea8:	7770      	strb	r0, [r6, #29]
    2eaa:	6869      	ldr	r1, [r5, #4]
    2eac:	f881 014b 	strb.w	r0, [r1, #331]	; 0x14b
    2eb0:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
    2eb4:	f88d 1000 	strb.w	r1, [sp]
    2eb8:	9900      	ldr	r1, [sp, #0]
    2eba:	9100      	str	r1, [sp, #0]
    2ebc:	f89d 1000 	ldrb.w	r1, [sp]
    2ec0:	b999      	cbnz	r1, 2eea <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x7e>
    2ec2:	e002      	b.n	2eca <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x5e>
    2ec4:	2001      	movs	r0, #1
    2ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2eca:	f8b8 1000 	ldrh.w	r1, [r8]
    2ece:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    2ed2:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    2ed6:	6839      	ldr	r1, [r7, #0]
    2ed8:	66e1      	str	r1, [r4, #108]	; 0x6c
    2eda:	6879      	ldr	r1, [r7, #4]
    2edc:	6721      	str	r1, [r4, #112]	; 0x70
    2ede:	2208      	movs	r2, #8
    2ee0:	4904      	ldr	r1, [pc, #16]	; (2ef4 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x88>)
    2ee2:	f104 0060 	add.w	r0, r4, #96	; 0x60
    2ee6:	f00b f91a 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2eea:	2000      	movs	r0, #0
    2eec:	e7eb      	b.n	2ec6 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x5a>
    2eee:	0000      	.short	0x0000
    2ef0:	3704492f 	.word	0x3704492f
    2ef4:	0000e621 	.word	0x0000e621

00002ef8 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>:
    2ef8:	b570      	push	{r4, r5, r6, lr}
    2efa:	1d0d      	adds	r5, r1, #4
    2efc:	6844      	ldr	r4, [r0, #4]
    2efe:	f004 fc8b 	bl	7818 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    2f02:	4a06      	ldr	r2, [pc, #24]	; (2f1c <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ+0x24>)
    2f04:	4010      	ands	r0, r2
    2f06:	f001 0207 	and.w	r2, r1, #7
    2f0a:	f894 10f6 	ldrb.w	r1, [r4, #246]	; 0xf6
    2f0e:	4001      	ands	r1, r0
    2f10:	f361 0007 	bfi	r0, r1, #0, #8
    2f14:	6028      	str	r0, [r5, #0]
    2f16:	606a      	str	r2, [r5, #4]
    2f18:	bd70      	pop	{r4, r5, r6, pc}
    2f1a:	0000      	.short	0x0000
    2f1c:	3704492f 	.word	0x3704492f

00002f20 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>:
    2f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f24:	6844      	ldr	r4, [r0, #4]
    2f26:	460d      	mov	r5, r1
    2f28:	7803      	ldrb	r3, [r0, #0]
    2f2a:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    2f2e:	3488      	adds	r4, #136	; 0x88
    2f30:	2701      	movs	r7, #1
    2f32:	2108      	movs	r1, #8
    2f34:	4620      	mov	r0, r4
    2f36:	f00a fde1 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2f3a:	b930      	cbnz	r0, 2f4a <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x2a>
    2f3c:	2300      	movs	r3, #0
    2f3e:	7fa2      	ldrb	r2, [r4, #30]
    2f40:	4619      	mov	r1, r3
    2f42:	4620      	mov	r0, r4
    2f44:	f00a fdda 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2f48:	b320      	cbz	r0, 2f94 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x74>
    2f4a:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
    2f4e:	f04f 0600 	mov.w	r6, #0
    2f52:	0780      	lsls	r0, r0, #30
    2f54:	d419      	bmi.n	2f8a <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x6a>
    2f56:	4628      	mov	r0, r5
    2f58:	f00b f8c8 	bl	e0ec <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>
    2f5c:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    2f60:	f835 0f05 	ldrh.w	r0, [r5, #5]!
    2f64:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    2f68:	8868      	ldrh	r0, [r5, #2]
    2f6a:	f8a4 006c 	strh.w	r0, [r4, #108]	; 0x6c
    2f6e:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
    2f72:	f040 0002 	orr.w	r0, r0, #2
    2f76:	f884 005f 	strb.w	r0, [r4, #95]	; 0x5f
    2f7a:	07c0      	lsls	r0, r0, #31
    2f7c:	d00d      	beq.n	2f9a <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x7a>
    2f7e:	2203      	movs	r2, #3
    2f80:	4912      	ldr	r1, [pc, #72]	; (2fcc <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0xac>)
    2f82:	f104 0060 	add.w	r0, r4, #96	; 0x60
    2f86:	f00b f8de 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    2f8a:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
    2f8e:	07c0      	lsls	r0, r0, #31
    2f90:	d003      	beq.n	2f9a <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x7a>
    2f92:	e00e      	b.n	2fb2 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x92>
    2f94:	2001      	movs	r0, #1
    2f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f9a:	2300      	movs	r3, #0
    2f9c:	7fa2      	ldrb	r2, [r4, #30]
    2f9e:	4619      	mov	r1, r3
    2fa0:	4620      	mov	r0, r4
    2fa2:	f00a fdab 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2fa6:	b140      	cbz	r0, 2fba <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x9a>
    2fa8:	77a7      	strb	r7, [r4, #30]
    2faa:	f884 705c 	strb.w	r7, [r4, #92]	; 0x5c
    2fae:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    2fb2:	7f60      	ldrb	r0, [r4, #29]
    2fb4:	2801      	cmp	r0, #1
    2fb6:	d004      	beq.n	2fc2 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0xa2>
    2fb8:	e006      	b.n	2fc8 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0xa8>
    2fba:	2148      	movs	r1, #72	; 0x48
    2fbc:	2040      	movs	r0, #64	; 0x40
    2fbe:	f7fd fd51 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2fc2:	7766      	strb	r6, [r4, #29]
    2fc4:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
    2fc8:	2000      	movs	r0, #0
    2fca:	e7e4      	b.n	2f96 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x76>
    2fcc:	0000e64f 	.word	0x0000e64f

00002fd0 <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY>:
    2fd0:	4907      	ldr	r1, [pc, #28]	; (2ff0 <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY+0x20>)
    2fd2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    2fd6:	1300      	asrs	r0, r0, #12
    2fd8:	7809      	ldrb	r1, [r1, #0]
    2fda:	b240      	sxtb	r0, r0
    2fdc:	4249      	negs	r1, r1
    2fde:	b249      	sxtb	r1, r1
    2fe0:	4408      	add	r0, r1
    2fe2:	f300 0007 	ssat	r0, #8, r0
    2fe6:	2800      	cmp	r0, #0
    2fe8:	dc00      	bgt.n	2fec <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY+0x1c>
    2fea:	2000      	movs	r0, #0
    2fec:	b2c0      	uxtb	r0, r0
    2fee:	4770      	bx	lr
    2ff0:	200000c4 	.word	0x200000c4

00002ff4 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>:
    2ff4:	4a04      	ldr	r2, [pc, #16]	; (3008 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ+0x14>)
    2ff6:	6892      	ldr	r2, [r2, #8]
    2ff8:	f5c2 5380 	rsb	r3, r2, #4096	; 0x1000
    2ffc:	434b      	muls	r3, r1
    2ffe:	4342      	muls	r2, r0
    3000:	eb03 3022 	add.w	r0, r3, r2, asr #12
    3004:	4770      	bx	lr
    3006:	0000      	.short	0x0000
    3008:	200000c4 	.word	0x200000c4

0000300c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>:
    300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    300e:	6844      	ldr	r4, [r0, #4]
    3010:	4606      	mov	r6, r0
    3012:	f104 0588 	add.w	r5, r4, #136	; 0x88
    3016:	f000 f87f 	bl	3118 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x10c>
    301a:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    301e:	2901      	cmp	r1, #1
    3020:	d11a      	bne.n	3058 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    3022:	2800      	cmp	r0, #0
    3024:	d018      	beq.n	3058 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    3026:	6870      	ldr	r0, [r6, #4]
    3028:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    302c:	f88d 1000 	strb.w	r1, [sp]
    3030:	9900      	ldr	r1, [sp, #0]
    3032:	9100      	str	r1, [sp, #0]
    3034:	f89d 1000 	ldrb.w	r1, [sp]
    3038:	f500 70a9 	add.w	r0, r0, #338	; 0x152
    303c:	2900      	cmp	r1, #0
    303e:	d10b      	bne.n	3058 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    3040:	8821      	ldrh	r1, [r4, #0]
    3042:	8141      	strh	r1, [r0, #10]
    3044:	7e69      	ldrb	r1, [r5, #25]
    3046:	7301      	strb	r1, [r0, #12]
    3048:	7ea9      	ldrb	r1, [r5, #26]
    304a:	7341      	strb	r1, [r0, #13]
    304c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3050:	221f      	movs	r2, #31
    3052:	4902      	ldr	r1, [pc, #8]	; (305c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>)
    3054:	f00b b863 	b.w	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    305a:	0000      	.short	0x0000
    305c:	0000e6e7 	.word	0x0000e6e7
    3060:	f500 6100 	add.w	r1, r0, #2048	; 0x800
    3064:	4a0d      	ldr	r2, [pc, #52]	; (309c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x90>)
    3066:	b510      	push	{r4, lr}
    3068:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    306c:	1309      	asrs	r1, r1, #12
    306e:	1300      	asrs	r0, r0, #12
    3070:	b24b      	sxtb	r3, r1
    3072:	f992 4000 	ldrsb.w	r4, [r2]
    3076:	4240      	negs	r0, r0
    3078:	2100      	movs	r1, #0
    307a:	b240      	sxtb	r0, r0
    307c:	42a3      	cmp	r3, r4
    307e:	da02      	bge.n	3086 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x7a>
    3080:	f992 1002 	ldrsb.w	r1, [r2, #2]
    3084:	e005      	b.n	3092 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x86>
    3086:	f992 4001 	ldrsb.w	r4, [r2, #1]
    308a:	42a3      	cmp	r3, r4
    308c:	dd04      	ble.n	3098 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x8c>
    308e:	f992 1003 	ldrsb.w	r1, [r2, #3]
    3092:	4408      	add	r0, r1
    3094:	f300 0107 	ssat	r1, #8, r0
    3098:	4608      	mov	r0, r1
    309a:	bd10      	pop	{r4, pc}
    309c:	200000c4 	.word	0x200000c4
    30a0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    30a4:	2200      	movs	r2, #0
    30a6:	704a      	strb	r2, [r1, #1]
    30a8:	f5a0 75fe 	sub.w	r5, r0, #508	; 0x1fc
    30ac:	700a      	strb	r2, [r1, #0]
    30ae:	f5a0 74ba 	sub.w	r4, r0, #372	; 0x174
    30b2:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    30b6:	f00c f928 	bl	f30a <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    30ba:	4606      	mov	r6, r0
    30bc:	68a0      	ldr	r0, [r4, #8]
    30be:	f7ff ffcf 	bl	3060 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    30c2:	0007      	movs	r7, r0
    30c4:	d021      	beq.n	310a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    30c6:	4620      	mov	r0, r4
    30c8:	f00b fb15 	bl	e6f6 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x66>
    30cc:	2800      	cmp	r0, #0
    30ce:	d01c      	beq.n	310a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    30d0:	8828      	ldrh	r0, [r5, #0]
    30d2:	4669      	mov	r1, sp
    30d4:	f00a fce9 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    30d8:	b118      	cbz	r0, 30e2 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xd6>
    30da:	2189      	movs	r1, #137	; 0x89
    30dc:	207a      	movs	r0, #122	; 0x7a
    30de:	f7fd fcc1 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    30e2:	1c76      	adds	r6, r6, #1
    30e4:	b2f1      	uxtb	r1, r6
    30e6:	2302      	movs	r3, #2
    30e8:	463a      	mov	r2, r7
    30ea:	4668      	mov	r0, sp
    30ec:	f00c f92c 	bl	f348 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>
    30f0:	2800      	cmp	r0, #0
    30f2:	d10a      	bne.n	310a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    30f4:	4806      	ldr	r0, [pc, #24]	; (3110 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x104>)
    30f6:	4907      	ldr	r1, [pc, #28]	; (3114 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x108>)
    30f8:	7900      	ldrb	r0, [r0, #4]
    30fa:	fba0 6501 	umull	r6, r5, r0, r1
    30fe:	f008 f847 	bl	b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    3102:	1980      	adds	r0, r0, r6
    3104:	4169      	adcs	r1, r5
    3106:	e9c4 0100 	strd	r0, r1, [r4]
    310a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    310e:	0000      	.short	0x0000
    3110:	200000c4 	.word	0x200000c4
    3114:	000f4240 	.word	0x000f4240
    3118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    311c:	4607      	mov	r7, r0
    311e:	f7ff faab 	bl	2678 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    3122:	687c      	ldr	r4, [r7, #4]
    3124:	4605      	mov	r5, r0
    3126:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
    312a:	3488      	adds	r4, #136	; 0x88
    312c:	287f      	cmp	r0, #127	; 0x7f
    312e:	d03c      	beq.n	31aa <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19e>
    3130:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    3134:	687e      	ldr	r6, [r7, #4]
    3136:	76a0      	strb	r0, [r4, #26]
    3138:	4629      	mov	r1, r5
    313a:	68a0      	ldr	r0, [r4, #8]
    313c:	f7ff ff5a 	bl	2ff4 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>
    3140:	60a0      	str	r0, [r4, #8]
    3142:	481b      	ldr	r0, [pc, #108]	; (31b0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a4>)
    3144:	7940      	ldrb	r0, [r0, #5]
    3146:	b190      	cbz	r0, 316e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x162>
    3148:	6878      	ldr	r0, [r7, #4]
    314a:	f100 0888 	add.w	r8, r0, #136	; 0x88
    314e:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
    3152:	f7ff ff85 	bl	3060 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    3156:	b150      	cbz	r0, 316e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x162>
    3158:	4640      	mov	r0, r8
    315a:	f00b facc 	bl	e6f6 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x66>
    315e:	b130      	cbz	r0, 316e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x162>
    3160:	6878      	ldr	r0, [r7, #4]
    3162:	2231      	movs	r2, #49	; 0x31
    3164:	4913      	ldr	r1, [pc, #76]	; (31b4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a8>)
    3166:	f500 70fe 	add.w	r0, r0, #508	; 0x1fc
    316a:	f00a ffec 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    316e:	f994 001b 	ldrsb.w	r0, [r4, #27]
    3172:	2100      	movs	r1, #0
    3174:	1a28      	subs	r0, r5, r0
    3176:	d500      	bpl.n	317a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x16e>
    3178:	4240      	negs	r0, r0
    317a:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
    317e:	4282      	cmp	r2, r0
    3180:	dc10      	bgt.n	31a4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x198>
    3182:	2aff      	cmp	r2, #255	; 0xff
    3184:	d00e      	beq.n	31a4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x198>
    3186:	7f20      	ldrb	r0, [r4, #28]
    3188:	1c40      	adds	r0, r0, #1
    318a:	b2c0      	uxtb	r0, r0
    318c:	7720      	strb	r0, [r4, #28]
    318e:	f896 202a 	ldrb.w	r2, [r6, #42]	; 0x2a
    3192:	4290      	cmp	r0, r2
    3194:	d802      	bhi.n	319c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x190>
    3196:	7ee0      	ldrb	r0, [r4, #27]
    3198:	287f      	cmp	r0, #127	; 0x7f
    319a:	d103      	bne.n	31a4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x198>
    319c:	2000      	movs	r0, #0
    319e:	76e5      	strb	r5, [r4, #27]
    31a0:	7720      	strb	r0, [r4, #28]
    31a2:	2101      	movs	r1, #1
    31a4:	4608      	mov	r0, r1
    31a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    31aa:	2000      	movs	r0, #0
    31ac:	e7fb      	b.n	31a6 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19a>
    31ae:	0000      	.short	0x0000
    31b0:	200000c4 	.word	0x200000c4
    31b4:	000030a1 	.word	0x000030a1

000031b8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>:
    31b8:	4801      	ldr	r0, [pc, #4]	; (31c0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY+0x8>)
    31ba:	6840      	ldr	r0, [r0, #4]
    31bc:	30a0      	adds	r0, #160	; 0xa0
    31be:	4770      	bx	lr
    31c0:	200000d0 	.word	0x200000d0

000031c4 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>:
    31c4:	b510      	push	{r4, lr}
    31c6:	4c21      	ldr	r4, [pc, #132]	; (324c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x88>)
    31c8:	6860      	ldr	r0, [r4, #4]
    31ca:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    31ce:	f00b fabb 	bl	e748 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    31d2:	6861      	ldr	r1, [r4, #4]
    31d4:	f881 0049 	strb.w	r0, [r1, #73]	; 0x49
    31d8:	314a      	adds	r1, #74	; 0x4a
    31da:	f7fe fa23 	bl	1624 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    31de:	6860      	ldr	r0, [r4, #4]
    31e0:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    31e4:	f00b fab7 	bl	e756 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc6>
    31e8:	6861      	ldr	r1, [r4, #4]
    31ea:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    31ee:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    31f2:	314a      	adds	r1, #74	; 0x4a
    31f4:	f00b fa94 	bl	e720 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x90>
    31f8:	b930      	cbnz	r0, 3208 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x44>
    31fa:	6861      	ldr	r1, [r4, #4]
    31fc:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    3200:	314a      	adds	r1, #74	; 0x4a
    3202:	f00b fa96 	bl	e732 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    3206:	b108      	cbz	r0, 320c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x48>
    3208:	2101      	movs	r1, #1
    320a:	e000      	b.n	320e <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x4a>
    320c:	2100      	movs	r1, #0
    320e:	6860      	ldr	r0, [r4, #4]
    3210:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    3214:	b919      	cbnz	r1, 321e <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x5a>
    3216:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    321a:	2800      	cmp	r0, #0
    321c:	d014      	beq.n	3248 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x84>
    321e:	f7ff f829 	bl	2274 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    3222:	490b      	ldr	r1, [pc, #44]	; (3250 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x8c>)
    3224:	fba0 2301 	umull	r2, r3, r0, r1
    3228:	6860      	ldr	r0, [r4, #4]
    322a:	3090      	adds	r0, #144	; 0x90
    322c:	f00b fae5 	bl	e7fa <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x90>
    3230:	6860      	ldr	r0, [r4, #4]
    3232:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3236:	b110      	cbz	r0, 323e <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x7a>
    3238:	2000      	movs	r0, #0
    323a:	f7fe ff8d 	bl	2158 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    323e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3242:	2000      	movs	r0, #0
    3244:	f000 be38 	b.w	3eb8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x420>
    3248:	bd10      	pop	{r4, pc}
    324a:	0000      	.short	0x0000
    324c:	200000d0 	.word	0x200000d0
    3250:	000f4240 	.word	0x000f4240

00003254 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>:
    3254:	4a04      	ldr	r2, [pc, #16]	; (3268 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x14>)
    3256:	2803      	cmp	r0, #3
    3258:	6852      	ldr	r2, [r2, #4]
    325a:	d100      	bne.n	325e <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0xa>
    325c:	6551      	str	r1, [r2, #84]	; 0x54
    325e:	f882 0058 	strb.w	r0, [r2, #88]	; 0x58
    3262:	2000      	movs	r0, #0
    3264:	4770      	bx	lr
    3266:	0000      	.short	0x0000
    3268:	200000d0 	.word	0x200000d0

0000326c <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI>:
    326c:	4806      	ldr	r0, [pc, #24]	; (3288 <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI+0x1c>)
    326e:	b508      	push	{r3, lr}
    3270:	6840      	ldr	r0, [r0, #4]
    3272:	7a00      	ldrb	r0, [r0, #8]
    3274:	f88d 0000 	strb.w	r0, [sp]
    3278:	9800      	ldr	r0, [sp, #0]
    327a:	9000      	str	r0, [sp, #0]
    327c:	f89d 0000 	ldrb.w	r0, [sp]
    3280:	2800      	cmp	r0, #0
    3282:	d000      	beq.n	3286 <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI+0x1a>
    3284:	2001      	movs	r0, #1
    3286:	bd08      	pop	{r3, pc}
    3288:	200000d0 	.word	0x200000d0

0000328c <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>:
    328c:	4902      	ldr	r1, [pc, #8]	; (3298 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ+0xc>)
    328e:	6849      	ldr	r1, [r1, #4]
    3290:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    3294:	2000      	movs	r0, #0
    3296:	4770      	bx	lr
    3298:	200000d0 	.word	0x200000d0

0000329c <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>:
    329c:	480a      	ldr	r0, [pc, #40]	; (32c8 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x2c>)
    329e:	6841      	ldr	r1, [r0, #4]
    32a0:	6e88      	ldr	r0, [r1, #104]	; 0x68
    32a2:	b170      	cbz	r0, 32c2 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x26>
    32a4:	f101 006d 	add.w	r0, r1, #109	; 0x6d
    32a8:	22ff      	movs	r2, #255	; 0xff
    32aa:	7002      	strb	r2, [r0, #0]
    32ac:	2200      	movs	r2, #0
    32ae:	668a      	str	r2, [r1, #104]	; 0x68
    32b0:	7002      	strb	r2, [r0, #0]
    32b2:	f891 106c 	ldrb.w	r1, [r1, #108]	; 0x6c
    32b6:	2001      	movs	r0, #1
    32b8:	4088      	lsls	r0, r1
    32ba:	4904      	ldr	r1, [pc, #16]	; (32cc <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x30>)
    32bc:	6008      	str	r0, [r1, #0]
    32be:	2000      	movs	r0, #0
    32c0:	4770      	bx	lr
    32c2:	200c      	movs	r0, #12
    32c4:	4770      	bx	lr
    32c6:	0000      	.short	0x0000
    32c8:	200000d0 	.word	0x200000d0
    32cc:	4001f508 	.word	0x4001f508

000032d0 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>:
    32d0:	4602      	mov	r2, r0
    32d2:	480c      	ldr	r0, [pc, #48]	; (3304 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x34>)
    32d4:	b510      	push	{r4, lr}
    32d6:	6082      	str	r2, [r0, #8]
    32d8:	68c0      	ldr	r0, [r0, #12]
    32da:	460c      	mov	r4, r1
    32dc:	b168      	cbz	r0, 32fa <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x2a>
    32de:	f000 ffe5 	bl	42ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2ac>
    32e2:	f00b fb70 	bl	e9c6 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>
    32e6:	4620      	mov	r0, r4
    32e8:	f000 f8c0 	bl	346c <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    32ec:	2800      	cmp	r0, #0
    32ee:	d007      	beq.n	3300 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x30>
    32f0:	f640 119d 	movw	r1, #2461	; 0x99d
    32f4:	2032      	movs	r0, #50	; 0x32
    32f6:	f7fd fbb5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    32fa:	f640 1197 	movw	r1, #2455	; 0x997
    32fe:	e7f9      	b.n	32f4 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x24>
    3300:	bd10      	pop	{r4, pc}
    3302:	0000      	.short	0x0000
    3304:	200000d0 	.word	0x200000d0

00003308 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>:
    3308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    330c:	4c0f      	ldr	r4, [pc, #60]	; (334c <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x44>)
    330e:	4605      	mov	r5, r0
    3310:	4616      	mov	r6, r2
    3312:	6860      	ldr	r0, [r4, #4]
    3314:	460f      	mov	r7, r1
    3316:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    331a:	f00b fa1c 	bl	e756 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc6>
    331e:	b158      	cbz	r0, 3338 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    3320:	b955      	cbnz	r5, 3338 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    3322:	4638      	mov	r0, r7
    3324:	f00b fa10 	bl	e748 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    3328:	4631      	mov	r1, r6
    332a:	f00a fb6c 	bl	da06 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    332e:	2808      	cmp	r0, #8
    3330:	d002      	beq.n	3338 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    3332:	2001      	movs	r0, #1
    3334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3338:	6860      	ldr	r0, [r4, #4]
    333a:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    333e:	f00b fa03 	bl	e748 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    3342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3346:	f7fe b999 	b.w	167c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    334a:	0000      	.short	0x0000
    334c:	200000d0 	.word	0x200000d0

00003350 <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A>:
    3350:	b510      	push	{r4, lr}
    3352:	4c0a      	ldr	r4, [pc, #40]	; (337c <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A+0x2c>)
    3354:	6860      	ldr	r0, [r4, #4]
    3356:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3358:	b159      	cbz	r1, 3372 <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A+0x22>
    335a:	2202      	movs	r2, #2
    335c:	7242      	strb	r2, [r0, #9]
    335e:	8809      	ldrh	r1, [r1, #0]
    3360:	8141      	strh	r1, [r0, #10]
    3362:	2212      	movs	r2, #18
    3364:	4906      	ldr	r1, [pc, #24]	; (3380 <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A+0x30>)
    3366:	f00a feda 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    336a:	6861      	ldr	r1, [r4, #4]
    336c:	2000      	movs	r0, #0
    336e:	6548      	str	r0, [r1, #84]	; 0x54
    3370:	bd10      	pop	{r4, pc}
    3372:	f240 4122 	movw	r1, #1058	; 0x422
    3376:	2032      	movs	r0, #50	; 0x32
    3378:	f7fd fb74 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    337c:	200000d0 	.word	0x200000d0
    3380:	000036b5 	.word	0x000036b5

00003384 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>:
    3384:	b570      	push	{r4, r5, r6, lr}
    3386:	4c13      	ldr	r4, [pc, #76]	; (33d4 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x50>)
    3388:	4615      	mov	r5, r2
    338a:	460e      	mov	r6, r1
    338c:	2800      	cmp	r0, #0
    338e:	d016      	beq.n	33be <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x3a>
    3390:	f04f 0200 	mov.w	r2, #0
    3394:	6861      	ldr	r1, [r4, #4]
    3396:	f801 2f51 	strb.w	r2, [r1, #81]!
    339a:	7248      	strb	r0, [r1, #9]
    339c:	f04f 0008 	mov.w	r0, #8
    33a0:	f881 002a 	strb.w	r0, [r1, #42]	; 0x2a
    33a4:	d114      	bne.n	33d0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    33a6:	4630      	mov	r0, r6
    33a8:	f00b f9ce 	bl	e748 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    33ac:	4629      	mov	r1, r5
    33ae:	f00a fb2a 	bl	da06 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    33b2:	6861      	ldr	r1, [r4, #4]
    33b4:	2808      	cmp	r0, #8
    33b6:	f881 007b 	strb.w	r0, [r1, #123]	; 0x7b
    33ba:	d003      	beq.n	33c4 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x40>
    33bc:	e008      	b.n	33d0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    33be:	f04f 0201 	mov.w	r2, #1
    33c2:	e7e7      	b.n	3394 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x10>
    33c4:	4630      	mov	r0, r6
    33c6:	f00b f9c6 	bl	e756 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc6>
    33ca:	b108      	cbz	r0, 33d0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    33cc:	2012      	movs	r0, #18
    33ce:	bd70      	pop	{r4, r5, r6, pc}
    33d0:	2000      	movs	r0, #0
    33d2:	bd70      	pop	{r4, r5, r6, pc}
    33d4:	200000d0 	.word	0x200000d0

000033d8 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI>:
    33d8:	b510      	push	{r4, lr}
    33da:	b1b1      	cbz	r1, 340a <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI+0x32>
    33dc:	4a0d      	ldr	r2, [pc, #52]	; (3414 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI+0x3c>)
    33de:	6852      	ldr	r2, [r2, #4]
    33e0:	f882 005f 	strb.w	r0, [r2, #95]	; 0x5f
    33e4:	6808      	ldr	r0, [r1, #0]
    33e6:	6610      	str	r0, [r2, #96]	; 0x60
    33e8:	8888      	ldrh	r0, [r1, #4]
    33ea:	f8a2 0064 	strh.w	r0, [r2, #100]	; 0x64
    33ee:	f892 0049 	ldrb.w	r0, [r2, #73]	; 0x49
    33f2:	f852 1f54 	ldr.w	r1, [r2, #84]!
    33f6:	7248      	strb	r0, [r1, #9]
    33f8:	f852 0908 	ldr.w	r0, [r2], #-8
    33fc:	f852 1c02 	ldr.w	r1, [r2, #-2]
    3400:	f8c0 100a 	str.w	r1, [r0, #10]
    3404:	8851      	ldrh	r1, [r2, #2]
    3406:	81c1      	strh	r1, [r0, #14]
    3408:	bd10      	pop	{r4, pc}
    340a:	f640 31a7 	movw	r1, #2983	; 0xba7
    340e:	2032      	movs	r0, #50	; 0x32
    3410:	f7fd fb28 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3414:	200000d0 	.word	0x200000d0

00003418 <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI>:
    3418:	4902      	ldr	r1, [pc, #8]	; (3424 <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI+0xc>)
    341a:	4801      	ldr	r0, [pc, #4]	; (3420 <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI+0x8>)
    341c:	60c8      	str	r0, [r1, #12]
    341e:	4770      	bx	lr
    3420:	000044e8 	.word	0x000044e8
    3424:	200000d0 	.word	0x200000d0

00003428 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>:
    3428:	4902      	ldr	r1, [pc, #8]	; (3434 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA+0xc>)
    342a:	6849      	ldr	r1, [r1, #4]
    342c:	f881 0048 	strb.w	r0, [r1, #72]	; 0x48
    3430:	4770      	bx	lr
    3432:	0000      	.short	0x0000
    3434:	200000d0 	.word	0x200000d0

00003438 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>:
    3438:	b570      	push	{r4, r5, r6, lr}
    343a:	4605      	mov	r5, r0
    343c:	f7fd ff0c 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    3440:	4604      	mov	r4, r0
    3442:	f7fd ff0f 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    3446:	4621      	mov	r1, r4
    3448:	f00b f9d5 	bl	e7f6 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    344c:	0001      	movs	r1, r0
    344e:	d006      	beq.n	345e <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x26>
    3450:	4805      	ldr	r0, [pc, #20]	; (3468 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x30>)
    3452:	68c0      	ldr	r0, [r0, #12]
    3454:	6802      	ldr	r2, [r0, #0]
    3456:	4628      	mov	r0, r5
    3458:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    345c:	4710      	bx	r2
    345e:	f640 21ab 	movw	r1, #2731	; 0xaab
    3462:	2032      	movs	r0, #50	; 0x32
    3464:	f7fd fafe 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3468:	200000d0 	.word	0x200000d0

0000346c <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>:
    346c:	b570      	push	{r4, r5, r6, lr}
    346e:	4d19      	ldr	r5, [pc, #100]	; (34d4 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x68>)
    3470:	4604      	mov	r4, r0
    3472:	6868      	ldr	r0, [r5, #4]
    3474:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    3478:	2901      	cmp	r1, #1
    347a:	d004      	beq.n	3486 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x1a>
    347c:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    3480:	b108      	cbz	r0, 3486 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x1a>
    3482:	200c      	movs	r0, #12
    3484:	bd70      	pop	{r4, r5, r6, pc}
    3486:	f7fd ff11 	bl	12ac <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>
    348a:	f00b fa9c 	bl	e9c6 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>
    348e:	f000 f8c1 	bl	3614 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    3492:	2246      	movs	r2, #70	; 0x46
    3494:	2100      	movs	r1, #0
    3496:	6868      	ldr	r0, [r5, #4]
    3498:	f00d f963 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    349c:	6869      	ldr	r1, [r5, #4]
    349e:	2200      	movs	r2, #0
    34a0:	2001      	movs	r0, #1
    34a2:	f881 205d 	strb.w	r2, [r1, #93]	; 0x5d
    34a6:	f881 0051 	strb.w	r0, [r1, #81]	; 0x51
    34aa:	f881 2058 	strb.w	r2, [r1, #88]	; 0x58
    34ae:	f881 207a 	strb.w	r2, [r1, #122]	; 0x7a
    34b2:	f881 405e 	strb.w	r4, [r1, #94]	; 0x5e
    34b6:	f881 2098 	strb.w	r2, [r1, #152]	; 0x98
    34ba:	2007      	movs	r0, #7
    34bc:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    34c0:	f101 006d 	add.w	r0, r1, #109	; 0x6d
    34c4:	23ff      	movs	r3, #255	; 0xff
    34c6:	7003      	strb	r3, [r0, #0]
    34c8:	f881 206c 	strb.w	r2, [r1, #108]	; 0x6c
    34cc:	668a      	str	r2, [r1, #104]	; 0x68
    34ce:	7002      	strb	r2, [r0, #0]
    34d0:	2000      	movs	r0, #0
    34d2:	bd70      	pop	{r4, r5, r6, pc}
    34d4:	200000d0 	.word	0x200000d0

000034d8 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>:
    34d8:	4805      	ldr	r0, [pc, #20]	; (34f0 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ+0x18>)
    34da:	b510      	push	{r4, lr}
    34dc:	6840      	ldr	r0, [r0, #4]
    34de:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    34e2:	f00b f931 	bl	e748 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    34e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    34ea:	f7fe b8c7 	b.w	167c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    34ee:	0000      	.short	0x0000
    34f0:	200000d0 	.word	0x200000d0

000034f4 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>:
    34f4:	b140      	cbz	r0, 3508 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    34f6:	2802      	cmp	r0, #2
    34f8:	d006      	beq.n	3508 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    34fa:	2200      	movs	r2, #0
    34fc:	4903      	ldr	r1, [pc, #12]	; (350c <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x18>)
    34fe:	6849      	ldr	r1, [r1, #4]
    3500:	f801 2f51 	strb.w	r2, [r1, #81]!
    3504:	7208      	strb	r0, [r1, #8]
    3506:	4770      	bx	lr
    3508:	2201      	movs	r2, #1
    350a:	e7f7      	b.n	34fc <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x8>
    350c:	200000d0 	.word	0x200000d0

00003510 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>:
    3510:	4902      	ldr	r1, [pc, #8]	; (351c <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A+0xc>)
    3512:	6849      	ldr	r1, [r1, #4]
    3514:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    3518:	4770      	bx	lr
    351a:	0000      	.short	0x0000
    351c:	200000d0 	.word	0x200000d0

00003520 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>:
    3520:	b510      	push	{r4, lr}
    3522:	4603      	mov	r3, r0
    3524:	7800      	ldrb	r0, [r0, #0]
    3526:	07c0      	lsls	r0, r0, #31
    3528:	d005      	beq.n	3536 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x16>
    352a:	7858      	ldrb	r0, [r3, #1]
    352c:	2100      	movs	r1, #0
    352e:	f7ff fe91 	bl	3254 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    3532:	2800      	cmp	r0, #0
    3534:	d10c      	bne.n	3550 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x30>
    3536:	4c07      	ldr	r4, [pc, #28]	; (3554 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x34>)
    3538:	7898      	ldrb	r0, [r3, #2]
    353a:	6861      	ldr	r1, [r4, #4]
    353c:	f881 0048 	strb.w	r0, [r1, #72]	; 0x48
    3540:	78d8      	ldrb	r0, [r3, #3]
    3542:	f7ff ffd7 	bl	34f4 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>
    3546:	6861      	ldr	r1, [r4, #4]
    3548:	7918      	ldrb	r0, [r3, #4]
    354a:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    354e:	2000      	movs	r0, #0
    3550:	bd10      	pop	{r4, pc}
    3552:	0000      	.short	0x0000
    3554:	200000d0 	.word	0x200000d0

00003558 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>:
    3558:	4801      	ldr	r0, [pc, #4]	; (3560 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY+0x8>)
    355a:	68c0      	ldr	r0, [r0, #12]
    355c:	6840      	ldr	r0, [r0, #4]
    355e:	4700      	bx	r0
    3560:	200000d0 	.word	0x200000d0

00003564 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>:
    3564:	4807      	ldr	r0, [pc, #28]	; (3584 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY+0x20>)
    3566:	b508      	push	{r3, lr}
    3568:	6840      	ldr	r0, [r0, #4]
    356a:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    356e:	f88d 0000 	strb.w	r0, [sp]
    3572:	9800      	ldr	r0, [sp, #0]
    3574:	9000      	str	r0, [sp, #0]
    3576:	f89d 0000 	ldrb.w	r0, [sp]
    357a:	2800      	cmp	r0, #0
    357c:	d000      	beq.n	3580 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY+0x1c>
    357e:	2001      	movs	r0, #1
    3580:	bd08      	pop	{r3, pc}
    3582:	0000      	.short	0x0000
    3584:	200000d0 	.word	0x200000d0

00003588 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>:
    3588:	b510      	push	{r4, lr}
    358a:	f000 f951 	bl	3830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    358e:	4b0c      	ldr	r3, [pc, #48]	; (35c0 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x38>)
    3590:	b140      	cbz	r0, 35a4 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x1c>
    3592:	6858      	ldr	r0, [r3, #4]
    3594:	2101      	movs	r1, #1
    3596:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
    359a:	6d41      	ldr	r1, [r0, #84]	; 0x54
    359c:	8809      	ldrh	r1, [r1, #0]
    359e:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    35a2:	e004      	b.n	35ae <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x26>
    35a4:	6859      	ldr	r1, [r3, #4]
    35a6:	2000      	movs	r0, #0
    35a8:	f801 0f42 	strb.w	r0, [r1, #66]!
    35ac:	8048      	strh	r0, [r1, #2]
    35ae:	6858      	ldr	r0, [r3, #4]
    35b0:	2217      	movs	r2, #23
    35b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    35b6:	4903      	ldr	r1, [pc, #12]	; (35c4 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x3c>)
    35b8:	3038      	adds	r0, #56	; 0x38
    35ba:	f00a bdb0 	b.w	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    35be:	0000      	.short	0x0000
    35c0:	200000d0 	.word	0x200000d0
    35c4:	00004245 	.word	0x00004245

000035c8 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    35c8:	4802      	ldr	r0, [pc, #8]	; (35d4 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    35ca:	6840      	ldr	r0, [r0, #4]
    35cc:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    35d0:	4770      	bx	lr
    35d2:	0000      	.short	0x0000
    35d4:	200000d0 	.word	0x200000d0

000035d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    35d8:	b510      	push	{r4, lr}
    35da:	f000 f929 	bl	3830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    35de:	490c      	ldr	r1, [pc, #48]	; (3610 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>)
    35e0:	b128      	cbz	r0, 35ee <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    35e2:	6848      	ldr	r0, [r1, #4]
    35e4:	f890 005a 	ldrb.w	r0, [r0, #90]	; 0x5a
    35e8:	2801      	cmp	r0, #1
    35ea:	d00e      	beq.n	360a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32>
    35ec:	e00c      	b.n	3608 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    35ee:	6849      	ldr	r1, [r1, #4]
    35f0:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    35f4:	2801      	cmp	r0, #1
    35f6:	d001      	beq.n	35fc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    35f8:	2802      	cmp	r0, #2
    35fa:	d105      	bne.n	3608 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    35fc:	f891 0059 	ldrb.w	r0, [r1, #89]	; 0x59
    3600:	2801      	cmp	r0, #1
    3602:	d003      	beq.n	360c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    3604:	2803      	cmp	r0, #3
    3606:	d001      	beq.n	360c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    3608:	2000      	movs	r0, #0
    360a:	bd10      	pop	{r4, pc}
    360c:	2001      	movs	r0, #1
    360e:	bd10      	pop	{r4, pc}
    3610:	200000d0 	.word	0x200000d0
    3614:	b510      	push	{r4, lr}
    3616:	4c07      	ldr	r4, [pc, #28]	; (3634 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c>)
    3618:	6860      	ldr	r0, [r4, #4]
    361a:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
    361e:	2800      	cmp	r0, #0
    3620:	d007      	beq.n	3632 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a>
    3622:	f004 fb23 	bl	7c6c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3626:	f004 f947 	bl	78b8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    362a:	6861      	ldr	r1, [r4, #4]
    362c:	2000      	movs	r0, #0
    362e:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    3632:	bd10      	pop	{r4, pc}
    3634:	200000d0 	.word	0x200000d0
    3638:	b518      	push	{r3, r4, lr}
    363a:	2300      	movs	r3, #0
    363c:	704b      	strb	r3, [r1, #1]
    363e:	2207      	movs	r2, #7
    3640:	700a      	strb	r2, [r1, #0]
    3642:	4a07      	ldr	r2, [pc, #28]	; (3660 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x88>)
    3644:	6852      	ldr	r2, [r2, #4]
    3646:	7203      	strb	r3, [r0, #8]
    3648:	6b54      	ldr	r4, [r2, #52]	; 0x34
    364a:	604c      	str	r4, [r1, #4]
    364c:	7a04      	ldrb	r4, [r0, #8]
    364e:	f88d 4000 	strb.w	r4, [sp]
    3652:	9c00      	ldr	r4, [sp, #0]
    3654:	9400      	str	r4, [sp, #0]
    3656:	f89d 4000 	ldrb.w	r4, [sp]
    365a:	2c00      	cmp	r4, #0
    365c:	d1f3      	bne.n	3646 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6e>
    365e:	bd18      	pop	{r3, r4, pc}
    3660:	200000d0 	.word	0x200000d0
    3664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3668:	4d10      	ldr	r5, [pc, #64]	; (36ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd4>)
    366a:	4606      	mov	r6, r0
    366c:	460f      	mov	r7, r1
    366e:	6868      	ldr	r0, [r5, #4]
    3670:	490f      	ldr	r1, [pc, #60]	; (36b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd8>)
    3672:	f890 007a 	ldrb.w	r0, [r0, #122]	; 0x7a
    3676:	5c0c      	ldrb	r4, [r1, r0]
    3678:	4620      	mov	r0, r4
    367a:	f004 fe37 	bl	82ec <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    367e:	6868      	ldr	r0, [r5, #4]
    3680:	2101      	movs	r1, #1
    3682:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
    3686:	2025      	movs	r0, #37	; 0x25
    3688:	f004 fe06 	bl	8298 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    368c:	4638      	mov	r0, r7
    368e:	f004 fd39 	bl	8104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    3692:	f04f 0101 	mov.w	r1, #1
    3696:	4608      	mov	r0, r1
    3698:	b126      	cbz	r6, 36a4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcc>
    369a:	f004 fb93 	bl	7dc4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    369e:	b918      	cbnz	r0, 36a8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd0>
    36a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    36a4:	f004 fb54 	bl	7d50 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    36a8:	2001      	movs	r0, #1
    36aa:	e7f9      	b.n	36a0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc8>
    36ac:	200000d0 	.word	0x200000d0
    36b0:	000108d7 	.word	0x000108d7
    36b4:	b570      	push	{r4, r5, r6, lr}
    36b6:	4e1a      	ldr	r6, [pc, #104]	; (3720 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x148>)
    36b8:	460c      	mov	r4, r1
    36ba:	6870      	ldr	r0, [r6, #4]
    36bc:	7a41      	ldrb	r1, [r0, #9]
    36be:	b191      	cbz	r1, 36e6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x10e>
    36c0:	8940      	ldrh	r0, [r0, #10]
    36c2:	2100      	movs	r1, #0
    36c4:	f00a f858 	bl	d778 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    36c8:	0005      	movs	r5, r0
    36ca:	d025      	beq.n	3718 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x140>
    36cc:	8828      	ldrh	r0, [r5, #0]
    36ce:	f00a f8da 	bl	d886 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    36d2:	8828      	ldrh	r0, [r5, #0]
    36d4:	2100      	movs	r1, #0
    36d6:	f7fd fc29 	bl	f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    36da:	b188      	cbz	r0, 3700 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x128>
    36dc:	f240 31f2 	movw	r1, #1010	; 0x3f2
    36e0:	2032      	movs	r0, #50	; 0x32
    36e2:	f7fd f9bf 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    36e6:	6d41      	ldr	r1, [r0, #84]	; 0x54
    36e8:	f8d0 200e 	ldr.w	r2, [r0, #14]
    36ec:	f841 2f03 	str.w	r2, [r1, #3]!
    36f0:	8a42      	ldrh	r2, [r0, #18]
    36f2:	808a      	strh	r2, [r1, #4]
    36f4:	7b40      	ldrb	r0, [r0, #13]
    36f6:	f00b f827 	bl	e748 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    36fa:	6871      	ldr	r1, [r6, #4]
    36fc:	6d49      	ldr	r1, [r1, #84]	; 0x54
    36fe:	7088      	strb	r0, [r1, #2]
    3700:	2500      	movs	r5, #0
    3702:	7065      	strb	r5, [r4, #1]
    3704:	2015      	movs	r0, #21
    3706:	7020      	strb	r0, [r4, #0]
    3708:	6871      	ldr	r1, [r6, #4]
    370a:	2221      	movs	r2, #33	; 0x21
    370c:	1d20      	adds	r0, r4, #4
    370e:	3109      	adds	r1, #9
    3710:	f00c ffad 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3714:	71e5      	strb	r5, [r4, #7]
    3716:	bd70      	pop	{r4, r5, r6, pc}
    3718:	f240 31ee 	movw	r1, #1006	; 0x3ee
    371c:	e7e0      	b.n	36e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x108>
    371e:	0000      	.short	0x0000
    3720:	200000d0 	.word	0x200000d0
    3724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3726:	2600      	movs	r6, #0
    3728:	460f      	mov	r7, r1
    372a:	4605      	mov	r5, r0
    372c:	f88d 6000 	strb.w	r6, [sp]
    3730:	466b      	mov	r3, sp
    3732:	f000 f895 	bl	3860 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x288>
    3736:	0001      	movs	r1, r0
    3738:	4810      	ldr	r0, [pc, #64]	; (377c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1a4>)
    373a:	d003      	beq.n	3744 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16c>
    373c:	6840      	ldr	r0, [r0, #4]
    373e:	f880 6081 	strb.w	r6, [r0, #129]	; 0x81
    3742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3744:	6840      	ldr	r0, [r0, #4]
    3746:	f89d 1000 	ldrb.w	r1, [sp]
    374a:	2f07      	cmp	r7, #7
    374c:	f890 4051 	ldrb.w	r4, [r0, #81]	; 0x51
    3750:	d301      	bcc.n	3756 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x17e>
    3752:	4634      	mov	r4, r6
    3754:	e002      	b.n	375c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x184>
    3756:	0022      	movs	r2, r4
    3758:	d100      	bne.n	375c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x184>
    375a:	460c      	mov	r4, r1
    375c:	f880 4081 	strb.w	r4, [r0, #129]	; 0x81
    3760:	6869      	ldr	r1, [r5, #4]
    3762:	2900      	cmp	r1, #0
    3764:	d0ed      	beq.n	3742 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16a>
    3766:	7c69      	ldrb	r1, [r5, #17]
    3768:	f880 1089 	strb.w	r1, [r0, #137]	; 0x89
    376c:	6869      	ldr	r1, [r5, #4]
    376e:	680a      	ldr	r2, [r1, #0]
    3770:	f840 2f82 	str.w	r2, [r0, #130]!
    3774:	8889      	ldrh	r1, [r1, #4]
    3776:	8081      	strh	r1, [r0, #4]
    3778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    377a:	0000      	.short	0x0000
    377c:	200000d0 	.word	0x200000d0
    3780:	b510      	push	{r4, lr}
    3782:	4915      	ldr	r1, [pc, #84]	; (37d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x200>)
    3784:	6842      	ldr	r2, [r0, #4]
    3786:	6849      	ldr	r1, [r1, #4]
    3788:	7813      	ldrb	r3, [r2, #0]
    378a:	f891 4082 	ldrb.w	r4, [r1, #130]	; 0x82
    378e:	42a3      	cmp	r3, r4
    3790:	d11f      	bne.n	37d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    3792:	7853      	ldrb	r3, [r2, #1]
    3794:	f891 4083 	ldrb.w	r4, [r1, #131]	; 0x83
    3798:	42a3      	cmp	r3, r4
    379a:	d11a      	bne.n	37d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    379c:	7893      	ldrb	r3, [r2, #2]
    379e:	f891 4084 	ldrb.w	r4, [r1, #132]	; 0x84
    37a2:	42a3      	cmp	r3, r4
    37a4:	d115      	bne.n	37d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    37a6:	78d3      	ldrb	r3, [r2, #3]
    37a8:	f891 4085 	ldrb.w	r4, [r1, #133]	; 0x85
    37ac:	42a3      	cmp	r3, r4
    37ae:	d110      	bne.n	37d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    37b0:	7913      	ldrb	r3, [r2, #4]
    37b2:	f891 4086 	ldrb.w	r4, [r1, #134]	; 0x86
    37b6:	42a3      	cmp	r3, r4
    37b8:	d10b      	bne.n	37d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    37ba:	7952      	ldrb	r2, [r2, #5]
    37bc:	f891 3087 	ldrb.w	r3, [r1, #135]	; 0x87
    37c0:	429a      	cmp	r2, r3
    37c2:	d106      	bne.n	37d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    37c4:	7c40      	ldrb	r0, [r0, #17]
    37c6:	f891 1089 	ldrb.w	r1, [r1, #137]	; 0x89
    37ca:	4288      	cmp	r0, r1
    37cc:	d101      	bne.n	37d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    37ce:	2001      	movs	r0, #1
    37d0:	bd10      	pop	{r4, pc}
    37d2:	2000      	movs	r0, #0
    37d4:	bd10      	pop	{r4, pc}
    37d6:	0000      	.short	0x0000
    37d8:	200000d0 	.word	0x200000d0
    37dc:	b510      	push	{r4, lr}
    37de:	7801      	ldrb	r1, [r0, #0]
    37e0:	b08c      	sub	sp, #48	; 0x30
    37e2:	f001 040f 	and.w	r4, r1, #15
    37e6:	4622      	mov	r2, r4
    37e8:	a901      	add	r1, sp, #4
    37ea:	f000 ff0b 	bl	4604 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    37ee:	f004 fa5f 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    37f2:	f000 fba1 	bl	3f38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a0>
    37f6:	2c04      	cmp	r4, #4
    37f8:	d114      	bne.n	3824 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24c>
    37fa:	a801      	add	r0, sp, #4
    37fc:	f7ff ffc0 	bl	3780 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1a8>
    3800:	b180      	cbz	r0, 3824 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24c>
    3802:	a80b      	add	r0, sp, #44	; 0x2c
    3804:	f000 fba0 	bl	3f48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4b0>
    3808:	f99d 002c 	ldrsb.w	r0, [sp, #44]	; 0x2c
    380c:	9000      	str	r0, [sp, #0]
    380e:	4807      	ldr	r0, [pc, #28]	; (382c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x254>)
    3810:	6840      	ldr	r0, [r0, #4]
    3812:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
    3816:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
    381a:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    381e:	a801      	add	r0, sp, #4
    3820:	f00b f886 	bl	e930 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>
    3824:	b00c      	add	sp, #48	; 0x30
    3826:	2005      	movs	r0, #5
    3828:	bd10      	pop	{r4, pc}
    382a:	0000      	.short	0x0000
    382c:	200000d0 	.word	0x200000d0
    3830:	4804      	ldr	r0, [pc, #16]	; (3844 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x26c>)
    3832:	6840      	ldr	r0, [r0, #4]
    3834:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    3838:	2803      	cmp	r0, #3
    383a:	d001      	beq.n	3840 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    383c:	2000      	movs	r0, #0
    383e:	4770      	bx	lr
    3840:	2001      	movs	r0, #1
    3842:	4770      	bx	lr
    3844:	200000d0 	.word	0x200000d0
    3848:	7c82      	ldrb	r2, [r0, #18]
    384a:	6883      	ldr	r3, [r0, #8]
    384c:	4803      	ldr	r0, [pc, #12]	; (385c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x284>)
    384e:	6841      	ldr	r1, [r0, #4]
    3850:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    3854:	314a      	adds	r1, #74	; 0x4a
    3856:	f00a b81a 	b.w	d88e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    385a:	0000      	.short	0x0000
    385c:	200000d0 	.word	0x200000d0
    3860:	b570      	push	{r4, r5, r6, lr}
    3862:	6841      	ldr	r1, [r0, #4]
    3864:	461e      	mov	r6, r3
    3866:	4604      	mov	r4, r0
    3868:	b1c1      	cbz	r1, 389c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c4>
    386a:	7c60      	ldrb	r0, [r4, #17]
    386c:	f00a ff61 	bl	e732 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    3870:	4d10      	ldr	r5, [pc, #64]	; (38b4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2dc>)
    3872:	6869      	ldr	r1, [r5, #4]
    3874:	f891 107c 	ldrb.w	r1, [r1, #124]	; 0x7c
    3878:	b141      	cbz	r1, 388c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2b4>
    387a:	b138      	cbz	r0, 388c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2b4>
    387c:	f00a f8b9 	bl	d9f2 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    3880:	6869      	ldr	r1, [r5, #4]
    3882:	f801 0f78 	strb.w	r0, [r1, #120]!
    3886:	7048      	strb	r0, [r1, #1]
    3888:	2001      	movs	r0, #1
    388a:	71c8      	strb	r0, [r1, #7]
    388c:	686b      	ldr	r3, [r5, #4]
    388e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
    3892:	28ff      	cmp	r0, #255	; 0xff
    3894:	d004      	beq.n	38a0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c8>
    3896:	f7fe fcdb 	bl	2250 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    389a:	7030      	strb	r0, [r6, #0]
    389c:	2000      	movs	r0, #0
    389e:	bd70      	pop	{r4, r5, r6, pc}
    38a0:	7c60      	ldrb	r0, [r4, #17]
    38a2:	4632      	mov	r2, r6
    38a4:	3378      	adds	r3, #120	; 0x78
    38a6:	6861      	ldr	r1, [r4, #4]
    38a8:	f7fe fcea 	bl	2280 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>
    38ac:	f080 0001 	eor.w	r0, r0, #1
    38b0:	bd70      	pop	{r4, r5, r6, pc}
    38b2:	0000      	.short	0x0000
    38b4:	200000d0 	.word	0x200000d0
    38b8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    38bc:	4c40      	ldr	r4, [pc, #256]	; (39c0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3e8>)
    38be:	2500      	movs	r5, #0
    38c0:	466f      	mov	r7, sp
    38c2:	6860      	ldr	r0, [r4, #4]
    38c4:	7245      	strb	r5, [r0, #9]
    38c6:	6d41      	ldr	r1, [r0, #84]	; 0x54
    38c8:	880a      	ldrh	r2, [r1, #0]
    38ca:	8142      	strh	r2, [r0, #10]
    38cc:	6908      	ldr	r0, [r1, #16]
    38ce:	f00a f8fc 	bl	daca <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    38d2:	6861      	ldr	r1, [r4, #4]
    38d4:	f821 0f20 	strh.w	r0, [r1, #32]!
    38d8:	6b48      	ldr	r0, [r1, #52]	; 0x34
    38da:	8b02      	ldrh	r2, [r0, #24]
    38dc:	804a      	strh	r2, [r1, #2]
    38de:	8b40      	ldrh	r0, [r0, #26]
    38e0:	8088      	strh	r0, [r1, #4]
    38e2:	718d      	strb	r5, [r1, #6]
    38e4:	20ff      	movs	r0, #255	; 0xff
    38e6:	71c8      	strb	r0, [r1, #7]
    38e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
    38ec:	8108      	strh	r0, [r1, #8]
    38ee:	4669      	mov	r1, sp
    38f0:	68a0      	ldr	r0, [r4, #8]
    38f2:	f00a fb24 	bl	df3e <sym_SKY6LLKHYM3MTKIUASL3OKO4LAKLVGGKKAJ3I2Y>
    38f6:	68a0      	ldr	r0, [r4, #8]
    38f8:	7800      	ldrb	r0, [r0, #0]
    38fa:	f3c0 1680 	ubfx	r6, r0, #6, #1
    38fe:	6860      	ldr	r0, [r4, #4]
    3900:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3904:	b120      	cbz	r0, 3910 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x338>
    3906:	4639      	mov	r1, r7
    3908:	4630      	mov	r0, r6
    390a:	f00a ff12 	bl	e732 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    390e:	b940      	cbnz	r0, 3922 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34a>
    3910:	6860      	ldr	r0, [r4, #4]
    3912:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
    3916:	b158      	cbz	r0, 3930 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x358>
    3918:	4639      	mov	r1, r7
    391a:	4630      	mov	r0, r6
    391c:	f00a ff00 	bl	e720 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x90>
    3920:	b130      	cbz	r0, 3930 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x358>
    3922:	6860      	ldr	r0, [r4, #4]
    3924:	9900      	ldr	r1, [sp, #0]
    3926:	6141      	str	r1, [r0, #20]
    3928:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    392c:	8301      	strh	r1, [r0, #24]
    392e:	e002      	b.n	3936 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x35e>
    3930:	6860      	ldr	r0, [r4, #4]
    3932:	6145      	str	r5, [r0, #20]
    3934:	8305      	strh	r5, [r0, #24]
    3936:	6861      	ldr	r1, [r4, #4]
    3938:	f891 0079 	ldrb.w	r0, [r1, #121]	; 0x79
    393c:	28ff      	cmp	r0, #255	; 0xff
    393e:	d017      	beq.n	3970 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x398>
    3940:	f101 020e 	add.w	r2, r1, #14
    3944:	310d      	adds	r1, #13
    3946:	f7fe fc69 	bl	221c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    394a:	b160      	cbz	r0, 3966 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38e>
    394c:	6860      	ldr	r0, [r4, #4]
    394e:	7b41      	ldrb	r1, [r0, #13]
    3950:	f041 0102 	orr.w	r1, r1, #2
    3954:	7341      	strb	r1, [r0, #13]
    3956:	f8d0 1082 	ldr.w	r1, [r0, #130]	; 0x82
    395a:	f8c0 101a 	str.w	r1, [r0, #26]
    395e:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
    3962:	83c1      	strh	r1, [r0, #30]
    3964:	e010      	b.n	3988 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3b0>
    3966:	f241 5197 	movw	r1, #5527	; 0x1597
    396a:	2032      	movs	r0, #50	; 0x32
    396c:	f7fd f87a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3970:	f891 0089 	ldrb.w	r0, [r1, #137]	; 0x89
    3974:	7348      	strb	r0, [r1, #13]
    3976:	f8d1 0082 	ldr.w	r0, [r1, #130]	; 0x82
    397a:	f841 0f0e 	str.w	r0, [r1, #14]!
    397e:	f8b1 0078 	ldrh.w	r0, [r1, #120]	; 0x78
    3982:	8088      	strh	r0, [r1, #4]
    3984:	60cd      	str	r5, [r1, #12]
    3986:	820d      	strh	r5, [r1, #16]
    3988:	6860      	ldr	r0, [r4, #4]
    398a:	6d42      	ldr	r2, [r0, #84]	; 0x54
    398c:	f890 105e 	ldrb.w	r1, [r0, #94]	; 0x5e
    3990:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
    3994:	2212      	movs	r2, #18
    3996:	490b      	ldr	r1, [pc, #44]	; (39c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3ec>)
    3998:	f00a fbc1 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    399c:	6860      	ldr	r0, [r4, #4]
    399e:	6d41      	ldr	r1, [r0, #84]	; 0x54
    39a0:	302a      	adds	r0, #42	; 0x2a
    39a2:	880a      	ldrh	r2, [r1, #0]
    39a4:	4908      	ldr	r1, [pc, #32]	; (39c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3f0>)
    39a6:	868a      	strh	r2, [r1, #52]	; 0x34
    39a8:	6d4a      	ldr	r2, [r1, #84]	; 0x54
    39aa:	f892 20ad 	ldrb.w	r2, [r2, #173]	; 0xad
    39ae:	f881 2036 	strb.w	r2, [r1, #54]	; 0x36
    39b2:	2206      	movs	r2, #6
    39b4:	4905      	ldr	r1, [pc, #20]	; (39cc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3f4>)
    39b6:	f00a fbc6 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    39ba:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    39be:	0000      	.short	0x0000
    39c0:	200000d0 	.word	0x200000d0
    39c4:	000036b5 	.word	0x000036b5
    39c8:	20000ca0 	.word	0x20000ca0
    39cc:	00003639 	.word	0x00003639
    39d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    39d4:	4c4c      	ldr	r4, [pc, #304]	; (3b08 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x70>)
    39d6:	4606      	mov	r6, r0
    39d8:	2100      	movs	r1, #0
    39da:	e9d4 5001 	ldrd	r5, r0, [r4, #4]
    39de:	3570      	adds	r5, #112	; 0x70
    39e0:	8001      	strh	r1, [r0, #0]
    39e2:	2e03      	cmp	r6, #3
    39e4:	d002      	beq.n	39ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x414>
    39e6:	2e05      	cmp	r6, #5
    39e8:	d004      	beq.n	39f4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x41c>
    39ea:	e051      	b.n	3a90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4b8>
    39ec:	2103      	movs	r1, #3
    39ee:	f00a fabd 	bl	df6c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    39f2:	e04d      	b.n	3a90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4b8>
    39f4:	2105      	movs	r1, #5
    39f6:	f00a fab9 	bl	df6c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    39fa:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    39fe:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3a00:	6949      	ldr	r1, [r1, #20]
    3a02:	f8c7 100f 	str.w	r1, [r7, #15]
    3a06:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3a08:	69c9      	ldr	r1, [r1, #28]
    3a0a:	74f9      	strb	r1, [r7, #19]
    3a0c:	0a0a      	lsrs	r2, r1, #8
    3a0e:	753a      	strb	r2, [r7, #20]
    3a10:	0c09      	lsrs	r1, r1, #16
    3a12:	7579      	strb	r1, [r7, #21]
    3a14:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3a16:	6901      	ldr	r1, [r0, #16]
    3a18:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    3a1a:	f00a f9dd 	bl	ddd8 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    3a1e:	75b8      	strb	r0, [r7, #22]
    3a20:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    3a24:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3a26:	6901      	ldr	r1, [r0, #16]
    3a28:	6a00      	ldr	r0, [r0, #32]
    3a2a:	f00a f9be 	bl	ddaa <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    3a2e:	75f8      	strb	r0, [r7, #23]
    3a30:	0a00      	lsrs	r0, r0, #8
    3a32:	7638      	strb	r0, [r7, #24]
    3a34:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    3a38:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3a3a:	6900      	ldr	r0, [r0, #16]
    3a3c:	f00a f845 	bl	daca <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    3a40:	7678      	strb	r0, [r7, #25]
    3a42:	0a00      	lsrs	r0, r0, #8
    3a44:	76b8      	strb	r0, [r7, #26]
    3a46:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    3a4a:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3a4c:	8b09      	ldrh	r1, [r1, #24]
    3a4e:	f807 1f1b 	strb.w	r1, [r7, #27]!
    3a52:	0a09      	lsrs	r1, r1, #8
    3a54:	7079      	strb	r1, [r7, #1]
    3a56:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3a58:	8b49      	ldrh	r1, [r1, #26]
    3a5a:	70b9      	strb	r1, [r7, #2]
    3a5c:	0a09      	lsrs	r1, r1, #8
    3a5e:	70f9      	strb	r1, [r7, #3]
    3a60:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3a62:	f851 2fae 	ldr.w	r2, [r1, #174]!
    3a66:	607a      	str	r2, [r7, #4]
    3a68:	7909      	ldrb	r1, [r1, #4]
    3a6a:	7239      	strb	r1, [r7, #8]
    3a6c:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3a6e:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
    3a72:	7a78      	ldrb	r0, [r7, #9]
    3a74:	f001 011f 	and.w	r1, r1, #31
    3a78:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
    3a7c:	4308      	orrs	r0, r1
    3a7e:	7278      	strb	r0, [r7, #9]
    3a80:	f003 fefa 	bl	7878 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
    3a84:	7a79      	ldrb	r1, [r7, #9]
    3a86:	f001 011f 	and.w	r1, r1, #31
    3a8a:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
    3a8e:	7279      	strb	r1, [r7, #9]
    3a90:	f105 0112 	add.w	r1, r5, #18
    3a94:	68a0      	ldr	r0, [r4, #8]
    3a96:	f00a fa84 	bl	dfa2 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    3a9a:	7e69      	ldrb	r1, [r5, #25]
    3a9c:	68a0      	ldr	r0, [r4, #8]
    3a9e:	f00a fa86 	bl	dfae <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    3aa2:	6860      	ldr	r0, [r4, #4]
    3aa4:	f100 054a 	add.w	r5, r0, #74	; 0x4a
    3aa8:	f890 7049 	ldrb.w	r7, [r0, #73]	; 0x49
    3aac:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3ab0:	b188      	cbz	r0, 3ad6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3e>
    3ab2:	f7ff febd 	bl	3830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    3ab6:	b130      	cbz	r0, 3ac6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2e>
    3ab8:	6860      	ldr	r0, [r4, #4]
    3aba:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
    3abe:	b111      	cbz	r1, 3ac6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2e>
    3ac0:	f890 007b 	ldrb.w	r0, [r0, #123]	; 0x7b
    3ac4:	e002      	b.n	3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>
    3ac6:	6860      	ldr	r0, [r4, #4]
    3ac8:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    3acc:	f7fe fb78 	bl	21c0 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>
    3ad0:	b108      	cbz	r0, 3ad6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3e>
    3ad2:	2701      	movs	r7, #1
    3ad4:	4605      	mov	r5, r0
    3ad6:	4629      	mov	r1, r5
    3ad8:	68a0      	ldr	r0, [r4, #8]
    3ada:	f00a fa6f 	bl	dfbc <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    3ade:	4639      	mov	r1, r7
    3ae0:	68a0      	ldr	r0, [r4, #8]
    3ae2:	f00a fa71 	bl	dfc8 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    3ae6:	68a0      	ldr	r0, [r4, #8]
    3ae8:	f004 fb0c 	bl	8104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    3aec:	2e05      	cmp	r6, #5
    3aee:	d108      	bne.n	3b02 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6a>
    3af0:	6860      	ldr	r0, [r4, #4]
    3af2:	682a      	ldr	r2, [r5, #0]
    3af4:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3af6:	f8c1 200a 	str.w	r2, [r1, #10]
    3afa:	88aa      	ldrh	r2, [r5, #4]
    3afc:	81ca      	strh	r2, [r1, #14]
    3afe:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3b00:	7247      	strb	r7, [r0, #9]
    3b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b06:	0000      	.short	0x0000
    3b08:	200000d0 	.word	0x200000d0
    3b0c:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    3b10:	4f65      	ldr	r7, [pc, #404]	; (3ca8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x210>)
    3b12:	4604      	mov	r4, r0
    3b14:	6878      	ldr	r0, [r7, #4]
    3b16:	f890 8081 	ldrb.w	r8, [r0, #129]	; 0x81
    3b1a:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3b1e:	b180      	cbz	r0, 3b42 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xaa>
    3b20:	2600      	movs	r6, #0
    3b22:	2500      	movs	r5, #0
    3b24:	7ca0      	ldrb	r0, [r4, #18]
    3b26:	68a1      	ldr	r1, [r4, #8]
    3b28:	f00a fe03 	bl	e732 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    3b2c:	4682      	mov	sl, r0
    3b2e:	f7ff fe7f 	bl	3830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    3b32:	b140      	cbz	r0, 3b46 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xae>
    3b34:	6878      	ldr	r0, [r7, #4]
    3b36:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
    3b3a:	b121      	cbz	r1, 3b46 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xae>
    3b3c:	f890 007b 	ldrb.w	r0, [r0, #123]	; 0x7b
    3b40:	e004      	b.n	3b4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb4>
    3b42:	2601      	movs	r6, #1
    3b44:	e7ed      	b.n	3b22 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8a>
    3b46:	6878      	ldr	r0, [r7, #4]
    3b48:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    3b4c:	4683      	mov	fp, r0
    3b4e:	f7fe fae9 	bl	2124 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    3b52:	ea5f 0900 	movs.w	r9, r0
    3b56:	d00c      	beq.n	3b72 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xda>
    3b58:	4658      	mov	r0, fp
    3b5a:	f7fe fad7 	bl	210c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    3b5e:	b100      	cbz	r0, 3b62 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xca>
    3b60:	2601      	movs	r6, #1
    3b62:	f1ba 0f00 	cmp.w	sl, #0
    3b66:	d004      	beq.n	3b72 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xda>
    3b68:	4648      	mov	r0, r9
    3b6a:	68a1      	ldr	r1, [r4, #8]
    3b6c:	f009 fef4 	bl	d958 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>
    3b70:	4605      	mov	r5, r0
    3b72:	6878      	ldr	r0, [r7, #4]
    3b74:	46b9      	mov	r9, r7
    3b76:	f890 7049 	ldrb.w	r7, [r0, #73]	; 0x49
    3b7a:	b10d      	cbz	r5, 3b80 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe8>
    3b7c:	f047 0702 	orr.w	r7, r7, #2
    3b80:	f7ff fe56 	bl	3830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    3b84:	b3a0      	cbz	r0, 3bf0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x158>
    3b86:	6860      	ldr	r0, [r4, #4]
    3b88:	f8d9 1004 	ldr.w	r1, [r9, #4]
    3b8c:	7802      	ldrb	r2, [r0, #0]
    3b8e:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
    3b92:	429a      	cmp	r2, r3
    3b94:	d11f      	bne.n	3bd6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x13e>
    3b96:	7842      	ldrb	r2, [r0, #1]
    3b98:	f891 3061 	ldrb.w	r3, [r1, #97]	; 0x61
    3b9c:	429a      	cmp	r2, r3
    3b9e:	d11a      	bne.n	3bd6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x13e>
    3ba0:	7882      	ldrb	r2, [r0, #2]
    3ba2:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    3ba6:	429a      	cmp	r2, r3
    3ba8:	d115      	bne.n	3bd6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x13e>
    3baa:	78c2      	ldrb	r2, [r0, #3]
    3bac:	f891 3063 	ldrb.w	r3, [r1, #99]	; 0x63
    3bb0:	429a      	cmp	r2, r3
    3bb2:	d110      	bne.n	3bd6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x13e>
    3bb4:	7902      	ldrb	r2, [r0, #4]
    3bb6:	f891 3064 	ldrb.w	r3, [r1, #100]	; 0x64
    3bba:	429a      	cmp	r2, r3
    3bbc:	d10b      	bne.n	3bd6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x13e>
    3bbe:	7940      	ldrb	r0, [r0, #5]
    3bc0:	f891 2065 	ldrb.w	r2, [r1, #101]	; 0x65
    3bc4:	4290      	cmp	r0, r2
    3bc6:	d106      	bne.n	3bd6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x13e>
    3bc8:	7c60      	ldrb	r0, [r4, #17]
    3bca:	f891 105f 	ldrb.w	r1, [r1, #95]	; 0x5f
    3bce:	4288      	cmp	r0, r1
    3bd0:	d101      	bne.n	3bd6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x13e>
    3bd2:	2001      	movs	r0, #1
    3bd4:	e000      	b.n	3bd8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x140>
    3bd6:	2000      	movs	r0, #0
    3bd8:	4f34      	ldr	r7, [pc, #208]	; (3cac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x214>)
    3bda:	4682      	mov	sl, r0
    3bdc:	f897 0078 	ldrb.w	r0, [r7, #120]	; 0x78
    3be0:	2808      	cmp	r0, #8
    3be2:	d006      	beq.n	3bf2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x15a>
    3be4:	f897 107b 	ldrb.w	r1, [r7, #123]	; 0x7b
    3be8:	4288      	cmp	r0, r1
    3bea:	d102      	bne.n	3bf2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x15a>
    3bec:	2001      	movs	r0, #1
    3bee:	e001      	b.n	3bf4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x15c>
    3bf0:	e021      	b.n	3c36 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x19e>
    3bf2:	2000      	movs	r0, #0
    3bf4:	4681      	mov	r9, r0
    3bf6:	b925      	cbnz	r5, 3c02 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16a>
    3bf8:	b12e      	cbz	r6, 3c06 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16e>
    3bfa:	4620      	mov	r0, r4
    3bfc:	f7ff fe24 	bl	3848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x270>
    3c00:	b108      	cbz	r0, 3c06 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16e>
    3c02:	2001      	movs	r0, #1
    3c04:	e000      	b.n	3c08 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x170>
    3c06:	2000      	movs	r0, #0
    3c08:	f1b8 0f00 	cmp.w	r8, #0
    3c0c:	d009      	beq.n	3c22 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18a>
    3c0e:	f897 105a 	ldrb.w	r1, [r7, #90]	; 0x5a
    3c12:	2901      	cmp	r1, #1
    3c14:	d003      	beq.n	3c1e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x186>
    3c16:	b921      	cbnz	r1, 3c22 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18a>
    3c18:	ea5a 0109 	orrs.w	r1, sl, r9
    3c1c:	d001      	beq.n	3c22 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18a>
    3c1e:	2101      	movs	r1, #1
    3c20:	e000      	b.n	3c24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18c>
    3c22:	2100      	movs	r1, #0
    3c24:	4208      	tst	r0, r1
    3c26:	d003      	beq.n	3c30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x198>
    3c28:	200c      	movs	r0, #12
    3c2a:	b004      	add	sp, #16
    3c2c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    3c30:	f004 f83e 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3c34:	e036      	b.n	3ca4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20c>
    3c36:	f004 f83b 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3c3a:	f1b8 0f00 	cmp.w	r8, #0
    3c3e:	d031      	beq.n	3ca4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20c>
    3c40:	4620      	mov	r0, r4
    3c42:	f7ff fe01 	bl	3848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x270>
    3c46:	b900      	cbnz	r0, 3c4a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b2>
    3c48:	b175      	cbz	r5, 3c68 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1d0>
    3c4a:	a803      	add	r0, sp, #12
    3c4c:	f000 f97c 	bl	3f48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4b0>
    3c50:	f8d9 2004 	ldr.w	r2, [r9, #4]
    3c54:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3c58:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3c5c:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3c60:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3c64:	463b      	mov	r3, r7
    3c66:	e018      	b.n	3c9a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x202>
    3c68:	f8d9 0004 	ldr.w	r0, [r9, #4]
    3c6c:	464d      	mov	r5, r9
    3c6e:	f890 0059 	ldrb.w	r0, [r0, #89]	; 0x59
    3c72:	2803      	cmp	r0, #3
    3c74:	d001      	beq.n	3c7a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1e2>
    3c76:	2802      	cmp	r0, #2
    3c78:	d114      	bne.n	3ca4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20c>
    3c7a:	f1ba 0f00 	cmp.w	sl, #0
    3c7e:	d011      	beq.n	3ca4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20c>
    3c80:	a803      	add	r0, sp, #12
    3c82:	f000 f961 	bl	3f48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4b0>
    3c86:	686a      	ldr	r2, [r5, #4]
    3c88:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3c8c:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3c90:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3c94:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3c98:	23fe      	movs	r3, #254	; 0xfe
    3c9a:	2101      	movs	r1, #1
    3c9c:	4620      	mov	r0, r4
    3c9e:	324a      	adds	r2, #74	; 0x4a
    3ca0:	f00a fdce 	bl	e840 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3ca4:	2005      	movs	r0, #5
    3ca6:	e7c0      	b.n	3c2a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x192>
    3ca8:	200000d0 	.word	0x200000d0
    3cac:	20000ca0 	.word	0x20000ca0
    3cb0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    3cb2:	4c3f      	ldr	r4, [pc, #252]	; (3db0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x318>)
    3cb4:	4605      	mov	r5, r0
    3cb6:	6860      	ldr	r0, [r4, #4]
    3cb8:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    3cbc:	2900      	cmp	r1, #0
    3cbe:	d06c      	beq.n	3d9a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x302>
    3cc0:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    3cc4:	2802      	cmp	r0, #2
    3cc6:	d02c      	beq.n	3d22 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28a>
    3cc8:	2801      	cmp	r0, #1
    3cca:	d043      	beq.n	3d54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2bc>
    3ccc:	f7ff fdb0 	bl	3830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    3cd0:	2800      	cmp	r0, #0
    3cd2:	d067      	beq.n	3da4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x30c>
    3cd4:	686a      	ldr	r2, [r5, #4]
    3cd6:	6861      	ldr	r1, [r4, #4]
    3cd8:	7810      	ldrb	r0, [r2, #0]
    3cda:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
    3cde:	4298      	cmp	r0, r3
    3ce0:	d14c      	bne.n	3d7c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2e4>
    3ce2:	7850      	ldrb	r0, [r2, #1]
    3ce4:	f891 3061 	ldrb.w	r3, [r1, #97]	; 0x61
    3ce8:	4298      	cmp	r0, r3
    3cea:	d147      	bne.n	3d7c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2e4>
    3cec:	7890      	ldrb	r0, [r2, #2]
    3cee:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    3cf2:	4298      	cmp	r0, r3
    3cf4:	d142      	bne.n	3d7c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2e4>
    3cf6:	78d0      	ldrb	r0, [r2, #3]
    3cf8:	f891 3063 	ldrb.w	r3, [r1, #99]	; 0x63
    3cfc:	4298      	cmp	r0, r3
    3cfe:	d13d      	bne.n	3d7c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2e4>
    3d00:	7910      	ldrb	r0, [r2, #4]
    3d02:	f891 3064 	ldrb.w	r3, [r1, #100]	; 0x64
    3d06:	4298      	cmp	r0, r3
    3d08:	d138      	bne.n	3d7c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2e4>
    3d0a:	7950      	ldrb	r0, [r2, #5]
    3d0c:	f891 2065 	ldrb.w	r2, [r1, #101]	; 0x65
    3d10:	4290      	cmp	r0, r2
    3d12:	d133      	bne.n	3d7c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2e4>
    3d14:	7c68      	ldrb	r0, [r5, #17]
    3d16:	f891 205f 	ldrb.w	r2, [r1, #95]	; 0x5f
    3d1a:	4290      	cmp	r0, r2
    3d1c:	d12e      	bne.n	3d7c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2e4>
    3d1e:	2001      	movs	r0, #1
    3d20:	e02d      	b.n	3d7e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2e6>
    3d22:	a803      	add	r0, sp, #12
    3d24:	f000 f910 	bl	3f48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4b0>
    3d28:	6862      	ldr	r2, [r4, #4]
    3d2a:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3d2e:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3d32:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3d36:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3d3a:	23ff      	movs	r3, #255	; 0xff
    3d3c:	2100      	movs	r1, #0
    3d3e:	4628      	mov	r0, r5
    3d40:	324a      	adds	r2, #74	; 0x4a
    3d42:	f00a fd7d 	bl	e840 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3d46:	6861      	ldr	r1, [r4, #4]
    3d48:	2001      	movs	r0, #1
    3d4a:	f881 0098 	strb.w	r0, [r1, #152]	; 0x98
    3d4e:	200b      	movs	r0, #11
    3d50:	b004      	add	sp, #16
    3d52:	bd70      	pop	{r4, r5, r6, pc}
    3d54:	a803      	add	r0, sp, #12
    3d56:	f000 f8f7 	bl	3f48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4b0>
    3d5a:	6862      	ldr	r2, [r4, #4]
    3d5c:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3d60:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3d64:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3d68:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3d6c:	23ff      	movs	r3, #255	; 0xff
    3d6e:	2100      	movs	r1, #0
    3d70:	4628      	mov	r0, r5
    3d72:	324a      	adds	r2, #74	; 0x4a
    3d74:	f00a fd64 	bl	e840 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3d78:	2005      	movs	r0, #5
    3d7a:	e7e9      	b.n	3d50 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2b8>
    3d7c:	2000      	movs	r0, #0
    3d7e:	f891 105a 	ldrb.w	r1, [r1, #90]	; 0x5a
    3d82:	2901      	cmp	r1, #1
    3d84:	d00c      	beq.n	3da0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x308>
    3d86:	b958      	cbnz	r0, 3da0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x308>
    3d88:	490a      	ldr	r1, [pc, #40]	; (3db4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x31c>)
    3d8a:	f891 007b 	ldrb.w	r0, [r1, #123]	; 0x7b
    3d8e:	2808      	cmp	r0, #8
    3d90:	d003      	beq.n	3d9a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x302>
    3d92:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
    3d96:	4281      	cmp	r1, r0
    3d98:	d002      	beq.n	3da0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x308>
    3d9a:	f003 ff89 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3d9e:	e7eb      	b.n	3d78 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2e0>
    3da0:	200c      	movs	r0, #12
    3da2:	e7d5      	b.n	3d50 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2b8>
    3da4:	f640 61df 	movw	r1, #3807	; 0xedf
    3da8:	2032      	movs	r0, #50	; 0x32
    3daa:	f7fc fe5b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3dae:	0000      	.short	0x0000
    3db0:	200000d0 	.word	0x200000d0
    3db4:	20000ca0 	.word	0x20000ca0
    3db8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    3dba:	4c1e      	ldr	r4, [pc, #120]	; (3e34 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x39c>)
    3dbc:	4605      	mov	r5, r0
    3dbe:	6860      	ldr	r0, [r4, #4]
    3dc0:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    3dc4:	b129      	cbz	r1, 3dd2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x33a>
    3dc6:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    3dca:	2802      	cmp	r0, #2
    3dcc:	d004      	beq.n	3dd8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x340>
    3dce:	2801      	cmp	r0, #1
    3dd0:	d01b      	beq.n	3e0a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x372>
    3dd2:	f003 ff6d 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3dd6:	e02a      	b.n	3e2e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x396>
    3dd8:	a803      	add	r0, sp, #12
    3dda:	f000 f8b5 	bl	3f48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4b0>
    3dde:	6862      	ldr	r2, [r4, #4]
    3de0:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3de4:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3de8:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3dec:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3df0:	23ff      	movs	r3, #255	; 0xff
    3df2:	2106      	movs	r1, #6
    3df4:	4628      	mov	r0, r5
    3df6:	324a      	adds	r2, #74	; 0x4a
    3df8:	f00a fd22 	bl	e840 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3dfc:	6862      	ldr	r2, [r4, #4]
    3dfe:	200b      	movs	r0, #11
    3e00:	2100      	movs	r1, #0
    3e02:	f882 1098 	strb.w	r1, [r2, #152]	; 0x98
    3e06:	b004      	add	sp, #16
    3e08:	bd70      	pop	{r4, r5, r6, pc}
    3e0a:	a803      	add	r0, sp, #12
    3e0c:	f000 f89c 	bl	3f48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4b0>
    3e10:	6862      	ldr	r2, [r4, #4]
    3e12:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3e16:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3e1a:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3e1e:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3e22:	23ff      	movs	r3, #255	; 0xff
    3e24:	2106      	movs	r1, #6
    3e26:	4628      	mov	r0, r5
    3e28:	324a      	adds	r2, #74	; 0x4a
    3e2a:	f00a fd09 	bl	e840 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3e2e:	2005      	movs	r0, #5
    3e30:	e7e9      	b.n	3e06 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x36e>
    3e32:	0000      	.short	0x0000
    3e34:	200000d0 	.word	0x200000d0
    3e38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    3e3a:	b389      	cbz	r1, 3ea0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x408>
    3e3c:	2901      	cmp	r1, #1
    3e3e:	d034      	beq.n	3eaa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x412>
    3e40:	2505      	movs	r5, #5
    3e42:	2902      	cmp	r1, #2
    3e44:	d004      	beq.n	3e50 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3b8>
    3e46:	2906      	cmp	r1, #6
    3e48:	d025      	beq.n	3e96 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3fe>
    3e4a:	f003 ff31 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3e4e:	e01f      	b.n	3e90 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3f8>
    3e50:	4606      	mov	r6, r0
    3e52:	f003 ff2d 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3e56:	4c17      	ldr	r4, [pc, #92]	; (3eb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x41c>)
    3e58:	6860      	ldr	r0, [r4, #4]
    3e5a:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    3e5e:	b1b9      	cbz	r1, 3e90 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3f8>
    3e60:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    3e64:	2801      	cmp	r0, #1
    3e66:	d001      	beq.n	3e6c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3d4>
    3e68:	2802      	cmp	r0, #2
    3e6a:	d111      	bne.n	3e90 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3f8>
    3e6c:	a803      	add	r0, sp, #12
    3e6e:	f000 f86b 	bl	3f48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4b0>
    3e72:	6862      	ldr	r2, [r4, #4]
    3e74:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3e78:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3e7c:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3e80:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3e84:	23ff      	movs	r3, #255	; 0xff
    3e86:	2102      	movs	r1, #2
    3e88:	4630      	mov	r0, r6
    3e8a:	324a      	adds	r2, #74	; 0x4a
    3e8c:	f00a fcd8 	bl	e840 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3e90:	b004      	add	sp, #16
    3e92:	4628      	mov	r0, r5
    3e94:	bd70      	pop	{r4, r5, r6, pc}
    3e96:	b004      	add	sp, #16
    3e98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3e9c:	f7ff bf8c 	b.w	3db8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x320>
    3ea0:	b004      	add	sp, #16
    3ea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3ea6:	f7ff bf03 	b.w	3cb0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x218>
    3eaa:	b004      	add	sp, #16
    3eac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3eb0:	f7ff be2c 	b.w	3b0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x74>
    3eb4:	200000d0 	.word	0x200000d0
    3eb8:	b570      	push	{r4, r5, r6, lr}
    3eba:	4c11      	ldr	r4, [pc, #68]	; (3f00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x468>)
    3ebc:	4605      	mov	r5, r0
    3ebe:	6861      	ldr	r1, [r4, #4]
    3ec0:	f891 005d 	ldrb.w	r0, [r1, #93]	; 0x5d
    3ec4:	2800      	cmp	r0, #0
    3ec6:	d019      	beq.n	3efc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x464>
    3ec8:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    3ecc:	2800      	cmp	r0, #0
    3ece:	d015      	beq.n	3efc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x464>
    3ed0:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    3ed4:	314a      	adds	r1, #74	; 0x4a
    3ed6:	f00a fc2c 	bl	e732 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    3eda:	b140      	cbz	r0, 3eee <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x456>
    3edc:	f7fe f8ec 	bl	20b8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    3ee0:	6861      	ldr	r1, [r4, #4]
    3ee2:	462a      	mov	r2, r5
    3ee4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3ee8:	314a      	adds	r1, #74	; 0x4a
    3eea:	f009 bd00 	b.w	d8ee <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    3eee:	6860      	ldr	r0, [r4, #4]
    3ef0:	4629      	mov	r1, r5
    3ef2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3ef6:	304a      	adds	r0, #74	; 0x4a
    3ef8:	f009 bce8 	b.w	d8cc <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    3efc:	bd70      	pop	{r4, r5, r6, pc}
    3efe:	0000      	.short	0x0000
    3f00:	200000d0 	.word	0x200000d0
    3f04:	4602      	mov	r2, r0
    3f06:	480b      	ldr	r0, [pc, #44]	; (3f34 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x49c>)
    3f08:	b082      	sub	sp, #8
    3f0a:	6840      	ldr	r0, [r0, #4]
    3f0c:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    3f10:	f88d 1000 	strb.w	r1, [sp]
    3f14:	9900      	ldr	r1, [sp, #0]
    3f16:	9100      	str	r1, [sp, #0]
    3f18:	f89d 1000 	ldrb.w	r1, [sp]
    3f1c:	2900      	cmp	r1, #0
    3f1e:	d107      	bne.n	3f30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x498>
    3f20:	6e81      	ldr	r1, [r0, #104]	; 0x68
    3f22:	2900      	cmp	r1, #0
    3f24:	d004      	beq.n	3f30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x498>
    3f26:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
    3f2a:	b002      	add	sp, #8
    3f2c:	f007 b912 	b.w	b154 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    3f30:	b002      	add	sp, #8
    3f32:	4770      	bx	lr
    3f34:	200000d0 	.word	0x200000d0
    3f38:	b510      	push	{r4, lr}
    3f3a:	f7fe fb9d 	bl	2678 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    3f3e:	4901      	ldr	r1, [pc, #4]	; (3f44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4ac>)
    3f40:	7008      	strb	r0, [r1, #0]
    3f42:	bd10      	pop	{r4, pc}
    3f44:	200000d0 	.word	0x200000d0
    3f48:	4a07      	ldr	r2, [pc, #28]	; (3f68 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4d0>)
    3f4a:	b510      	push	{r4, lr}
    3f4c:	f992 1000 	ldrsb.w	r1, [r2]
    3f50:	297f      	cmp	r1, #127	; 0x7f
    3f52:	d003      	beq.n	3f5c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c4>
    3f54:	7001      	strb	r1, [r0, #0]
    3f56:	207f      	movs	r0, #127	; 0x7f
    3f58:	7010      	strb	r0, [r2, #0]
    3f5a:	bd10      	pop	{r4, pc}
    3f5c:	f44f 6189 	mov.w	r1, #1096	; 0x448
    3f60:	2032      	movs	r0, #50	; 0x32
    3f62:	f7fc fd7f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f66:	0000      	.short	0x0000
    3f68:	200000d0 	.word	0x200000d0
    3f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f70:	4607      	mov	r7, r0
    3f72:	f7fd f971 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    3f76:	4604      	mov	r4, r0
    3f78:	f7fd f974 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    3f7c:	4621      	mov	r1, r4
    3f7e:	f00a fc3a 	bl	e7f6 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    3f82:	0005      	movs	r5, r0
    3f84:	d012      	beq.n	3fac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x514>
    3f86:	4c2d      	ldr	r4, [pc, #180]	; (403c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3c>)
    3f88:	6860      	ldr	r0, [r4, #4]
    3f8a:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    3f8e:	2801      	cmp	r0, #1
    3f90:	d004      	beq.n	3f9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x504>
    3f92:	2802      	cmp	r0, #2
    3f94:	d002      	beq.n	3f9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x504>
    3f96:	f7ff fc4b 	bl	3830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    3f9a:	b150      	cbz	r0, 3fb2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x51a>
    3f9c:	f06f 0613 	mvn.w	r6, #19
    3fa0:	b33f      	cbz	r7, 3ff2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x55a>
    3fa2:	4628      	mov	r0, r5
    3fa4:	f009 ffb3 	bl	df0e <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ>
    3fa8:	b950      	cbnz	r0, 3fc0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x528>
    3faa:	e005      	b.n	3fb8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x520>
    3fac:	f241 5142 	movw	r1, #5442	; 0x1542
    3fb0:	e03a      	b.n	4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>
    3fb2:	f241 5148 	movw	r1, #5448	; 0x1548
    3fb6:	e037      	b.n	4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>
    3fb8:	4628      	mov	r0, r5
    3fba:	f009 ffca 	bl	df52 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI>
    3fbe:	b1c0      	cbz	r0, 3ff2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x55a>
    3fc0:	6861      	ldr	r1, [r4, #4]
    3fc2:	4628      	mov	r0, r5
    3fc4:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    3fc8:	2a05      	cmp	r2, #5
    3fca:	d202      	bcs.n	3fd2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x53a>
    3fcc:	f241 41cc 	movw	r1, #5324	; 0x14cc
    3fd0:	e02a      	b.n	4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>
    3fd2:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    3fd6:	2a0b      	cmp	r2, #11
    3fd8:	d302      	bcc.n	3fe0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x548>
    3fda:	f241 41cd 	movw	r1, #5325	; 0x14cd
    3fde:	e023      	b.n	4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>
    3fe0:	68e2      	ldr	r2, [r4, #12]
    3fe2:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
    3fe6:	6952      	ldr	r2, [r2, #20]
    3fe8:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    3fec:	5851      	ldr	r1, [r2, r1]
    3fee:	4788      	blx	r1
    3ff0:	e016      	b.n	4020 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x20>
    3ff2:	6860      	ldr	r0, [r4, #4]
    3ff4:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    3ff8:	2905      	cmp	r1, #5
    3ffa:	d202      	bcs.n	4002 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2>
    3ffc:	f241 5138 	movw	r1, #5432	; 0x1538
    4000:	e012      	b.n	4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>
    4002:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    4006:	290b      	cmp	r1, #11
    4008:	d302      	bcc.n	4010 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x10>
    400a:	f241 5139 	movw	r1, #5433	; 0x1539
    400e:	e00b      	b.n	4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>
    4010:	68e1      	ldr	r1, [r4, #12]
    4012:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    4016:	6989      	ldr	r1, [r1, #24]
    4018:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    401c:	5808      	ldr	r0, [r1, r0]
    401e:	4780      	blx	r0
    4020:	280f      	cmp	r0, #15
    4022:	d304      	bcc.n	402e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2e>
    4024:	f241 515d 	movw	r1, #5469	; 0x155d
    4028:	2032      	movs	r0, #50	; 0x32
    402a:	f7fc fd1b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    402e:	68e1      	ldr	r1, [r4, #12]
    4030:	6909      	ldr	r1, [r1, #16]
    4032:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    4036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    403a:	4700      	bx	r0
    403c:	200000d0 	.word	0x200000d0
    4040:	b510      	push	{r4, lr}
    4042:	b118      	cbz	r0, 404c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4c>
    4044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4048:	f000 b922 	b.w	4290 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x290>
    404c:	2900      	cmp	r1, #0
    404e:	d01d      	beq.n	408c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8c>
    4050:	480f      	ldr	r0, [pc, #60]	; (4090 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x90>)
    4052:	6841      	ldr	r1, [r0, #4]
    4054:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    4058:	2a0b      	cmp	r2, #11
    405a:	d202      	bcs.n	4062 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x62>
    405c:	f241 6118 	movw	r1, #5656	; 0x1618
    4060:	e005      	b.n	406e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6e>
    4062:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    4066:	2a0f      	cmp	r2, #15
    4068:	d304      	bcc.n	4074 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x74>
    406a:	f241 6119 	movw	r1, #5657	; 0x1619
    406e:	2032      	movs	r0, #50	; 0x32
    4070:	f7fc fcf8 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4074:	68c0      	ldr	r0, [r0, #12]
    4076:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
    407a:	6880      	ldr	r0, [r0, #8]
    407c:	f06f 022b 	mvn.w	r2, #43	; 0x2b
    4080:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    4084:	5840      	ldr	r0, [r0, r1]
    4086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    408a:	4700      	bx	r0
    408c:	bd10      	pop	{r4, pc}
    408e:	0000      	.short	0x0000
    4090:	200000d0 	.word	0x200000d0
    4094:	b510      	push	{r4, lr}
    4096:	f7ff fabd 	bl	3614 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    409a:	f000 f907 	bl	42ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2ac>
    409e:	4805      	ldr	r0, [pc, #20]	; (40b4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb4>)
    40a0:	6881      	ldr	r1, [r0, #8]
    40a2:	2000      	movs	r0, #0
    40a4:	f7ff fc08 	bl	38b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2e0>
    40a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    40ac:	2002      	movs	r0, #2
    40ae:	f000 bae1 	b.w	4674 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA>
    40b2:	0000      	.short	0x0000
    40b4:	200000d0 	.word	0x200000d0
    40b8:	b510      	push	{r4, lr}
    40ba:	f7fd f8cd 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    40be:	4604      	mov	r4, r0
    40c0:	f7fd f8d0 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    40c4:	4621      	mov	r1, r4
    40c6:	f00a fb96 	bl	e7f6 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    40ca:	b150      	cbz	r0, 40e2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe2>
    40cc:	f004 f81a 	bl	8104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    40d0:	2000      	movs	r0, #0
    40d2:	f003 fee3 	bl	7e9c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    40d6:	4905      	ldr	r1, [pc, #20]	; (40ec <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xec>)
    40d8:	2006      	movs	r0, #6
    40da:	6849      	ldr	r1, [r1, #4]
    40dc:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    40e0:	bd10      	pop	{r4, pc}
    40e2:	f240 612b 	movw	r1, #1579	; 0x62b
    40e6:	2032      	movs	r0, #50	; 0x32
    40e8:	f7fc fcbc 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    40ec:	200000d0 	.word	0x200000d0
    40f0:	490f      	ldr	r1, [pc, #60]	; (4130 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x130>)
    40f2:	b510      	push	{r4, lr}
    40f4:	6848      	ldr	r0, [r1, #4]
    40f6:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    40fa:	2a06      	cmp	r2, #6
    40fc:	d202      	bcs.n	4104 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x104>
    40fe:	f241 6146 	movw	r1, #5702	; 0x1646
    4102:	e005      	b.n	4110 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x110>
    4104:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    4108:	2a0b      	cmp	r2, #11
    410a:	d304      	bcc.n	4116 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x116>
    410c:	f241 6147 	movw	r1, #5703	; 0x1647
    4110:	2032      	movs	r0, #50	; 0x32
    4112:	f7fc fca7 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4116:	68c9      	ldr	r1, [r1, #12]
    4118:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    411c:	68c9      	ldr	r1, [r1, #12]
    411e:	f06f 0213 	mvn.w	r2, #19
    4122:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    4126:	5808      	ldr	r0, [r1, r0]
    4128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    412c:	4700      	bx	r0
    412e:	0000      	.short	0x0000
    4130:	200000d0 	.word	0x200000d0
    4134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4138:	4c31      	ldr	r4, [pc, #196]	; (4200 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x200>)
    413a:	4605      	mov	r5, r0
    413c:	460e      	mov	r6, r1
    413e:	6860      	ldr	r0, [r4, #4]
    4140:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    4144:	b120      	cbz	r0, 4150 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x150>
    4146:	2801      	cmp	r0, #1
    4148:	d002      	beq.n	4150 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x150>
    414a:	200c      	movs	r0, #12
    414c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4150:	f003 ff32 	bl	7fb8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4154:	f003 fd8a 	bl	7c6c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    4158:	f003 fbae 	bl	78b8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    415c:	f004 f9b0 	bl	84c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    4160:	4828      	ldr	r0, [pc, #160]	; (4204 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x204>)
    4162:	f003 fe93 	bl	7e8c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4166:	4828      	ldr	r0, [pc, #160]	; (4208 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x208>)
    4168:	f004 f890 	bl	828c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    416c:	4827      	ldr	r0, [pc, #156]	; (420c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x20c>)
    416e:	f004 f883 	bl	8278 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    4172:	4630      	mov	r0, r6
    4174:	f003 ffc6 	bl	8104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    4178:	7968      	ldrb	r0, [r5, #5]
    417a:	b110      	cbz	r0, 4182 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x182>
    417c:	2001      	movs	r0, #1
    417e:	f7ff fec1 	bl	3f04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x46c>
    4182:	7928      	ldrb	r0, [r5, #4]
    4184:	2803      	cmp	r0, #3
    4186:	d001      	beq.n	418c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x18c>
    4188:	b118      	cbz	r0, 4192 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x192>
    418a:	e018      	b.n	41be <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1be>
    418c:	f640 2141 	movw	r1, #2625	; 0xa41
    4190:	e033      	b.n	41fa <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1fa>
    4192:	6861      	ldr	r1, [r4, #4]
    4194:	2000      	movs	r0, #0
    4196:	2503      	movs	r5, #3
    4198:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    419c:	f891 207a 	ldrb.w	r2, [r1, #122]	; 0x7a
    41a0:	1c52      	adds	r2, r2, #1
    41a2:	fbb2 f7f5 	udiv	r7, r2, r5
    41a6:	fb05 2217 	mls	r2, r5, r7, r2
    41aa:	f881 207a 	strb.w	r2, [r1, #122]	; 0x7a
    41ae:	fa23 f202 	lsr.w	r2, r3, r2
    41b2:	07d2      	lsls	r2, r2, #31
    41b4:	d103      	bne.n	41be <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1be>
    41b6:	1c40      	adds	r0, r0, #1
    41b8:	b2c0      	uxtb	r0, r0
    41ba:	2803      	cmp	r0, #3
    41bc:	d3ee      	bcc.n	419c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x19c>
    41be:	6860      	ldr	r0, [r4, #4]
    41c0:	f990 005e 	ldrsb.w	r0, [r0, #94]	; 0x5e
    41c4:	f003 ff7c 	bl	80c0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    41c8:	4631      	mov	r1, r6
    41ca:	2001      	movs	r0, #1
    41cc:	f7ff fa4a 	bl	3664 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c>
    41d0:	2800      	cmp	r0, #0
    41d2:	d0bb      	beq.n	414c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x14c>
    41d4:	f000 f922 	bl	441c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x41c>
    41d8:	6860      	ldr	r0, [r4, #4]
    41da:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
    41de:	b138      	cbz	r0, 41f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1f0>
    41e0:	f7fd ff6e 	bl	20c0 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>
    41e4:	480a      	ldr	r0, [pc, #40]	; (4210 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x210>)
    41e6:	6800      	ldr	r0, [r0, #0]
    41e8:	2803      	cmp	r0, #3
    41ea:	d004      	beq.n	41f6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1f6>
    41ec:	2000      	movs	r0, #0
    41ee:	e7ad      	b.n	414c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x14c>
    41f0:	f7fe f8c4 	bl	237c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    41f4:	e7f6      	b.n	41e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e4>
    41f6:	f640 2153 	movw	r1, #2643	; 0xa53
    41fa:	2032      	movs	r0, #50	; 0x32
    41fc:	f7fc fc32 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4200:	200000d0 	.word	0x200000d0
    4204:	00004504 	.word	0x00004504
    4208:	00555555 	.word	0x00555555
    420c:	8e89bed6 	.word	0x8e89bed6
    4210:	40001550 	.word	0x40001550
    4214:	b510      	push	{r4, lr}
    4216:	2000      	movs	r0, #0
    4218:	f7ff fe74 	bl	3f04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x46c>
    421c:	4808      	ldr	r0, [pc, #32]	; (4240 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x240>)
    421e:	6840      	ldr	r0, [r0, #4]
    4220:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    4224:	b128      	cbz	r0, 4232 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x232>
    4226:	2801      	cmp	r0, #1
    4228:	d003      	beq.n	4232 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x232>
    422a:	2802      	cmp	r0, #2
    422c:	d004      	beq.n	4238 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x238>
    422e:	200c      	movs	r0, #12
    4230:	bd10      	pop	{r4, pc}
    4232:	f000 f82d 	bl	4290 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x290>
    4236:	e001      	b.n	423c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x23c>
    4238:	f000 f840 	bl	42bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2bc>
    423c:	2000      	movs	r0, #0
    423e:	bd10      	pop	{r4, pc}
    4240:	200000d0 	.word	0x200000d0
    4244:	b510      	push	{r4, lr}
    4246:	2000      	movs	r0, #0
    4248:	7048      	strb	r0, [r1, #1]
    424a:	2019      	movs	r0, #25
    424c:	7008      	strb	r0, [r1, #0]
    424e:	480f      	ldr	r0, [pc, #60]	; (428c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28c>)
    4250:	6840      	ldr	r0, [r0, #4]
    4252:	f8d0 0042 	ldr.w	r0, [r0, #66]	; 0x42
    4256:	6048      	str	r0, [r1, #4]
    4258:	7908      	ldrb	r0, [r1, #4]
    425a:	2801      	cmp	r0, #1
    425c:	d114      	bne.n	4288 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x288>
    425e:	88cc      	ldrh	r4, [r1, #6]
    4260:	2100      	movs	r1, #0
    4262:	4620      	mov	r0, r4
    4264:	f009 fa88 	bl	d778 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    4268:	2800      	cmp	r0, #0
    426a:	d00d      	beq.n	4288 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x288>
    426c:	4620      	mov	r0, r4
    426e:	f009 fb0a 	bl	d886 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    4272:	2100      	movs	r1, #0
    4274:	4620      	mov	r0, r4
    4276:	f7fc fe59 	bl	f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    427a:	2800      	cmp	r0, #0
    427c:	d004      	beq.n	4288 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x288>
    427e:	f44f 6182 	mov.w	r1, #1040	; 0x410
    4282:	2032      	movs	r0, #50	; 0x32
    4284:	f7fc fbee 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4288:	bd10      	pop	{r4, pc}
    428a:	0000      	.short	0x0000
    428c:	200000d0 	.word	0x200000d0
    4290:	b510      	push	{r4, lr}
    4292:	f7ff f9bf 	bl	3614 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    4296:	4904      	ldr	r1, [pc, #16]	; (42a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2a8>)
    4298:	2001      	movs	r0, #1
    429a:	6849      	ldr	r1, [r1, #4]
    429c:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    42a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    42a4:	f000 bb0a 	b.w	48bc <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ>
    42a8:	200000d0 	.word	0x200000d0
    42ac:	4902      	ldr	r1, [pc, #8]	; (42b8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2b8>)
    42ae:	2000      	movs	r0, #0
    42b0:	6849      	ldr	r1, [r1, #4]
    42b2:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    42b6:	4770      	bx	lr
    42b8:	200000d0 	.word	0x200000d0
    42bc:	b570      	push	{r4, r5, r6, lr}
    42be:	f7fc ffcb 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    42c2:	4604      	mov	r4, r0
    42c4:	f7fc ffce 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    42c8:	4621      	mov	r1, r4
    42ca:	f00a fa94 	bl	e7f6 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    42ce:	0004      	movs	r4, r0
    42d0:	d020      	beq.n	4314 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x314>
    42d2:	f00a fa9d 	bl	e810 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    42d6:	2000      	movs	r0, #0
    42d8:	f000 f9fa 	bl	46d0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    42dc:	b1f8      	cbz	r0, 431e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x31e>
    42de:	4d20      	ldr	r5, [pc, #128]	; (4360 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x360>)
    42e0:	6868      	ldr	r0, [r5, #4]
    42e2:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    42e6:	2802      	cmp	r0, #2
    42e8:	d003      	beq.n	42f2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2f2>
    42ea:	4621      	mov	r1, r4
    42ec:	2000      	movs	r0, #0
    42ee:	f7ff f9b9 	bl	3664 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c>
    42f2:	1ce0      	adds	r0, r4, #3
    42f4:	f009 fb7a 	bl	d9ec <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    42f8:	6869      	ldr	r1, [r5, #4]
    42fa:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    42fe:	b128      	cbz	r0, 430c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x30c>
    4300:	2440      	movs	r4, #64	; 0x40
    4302:	f003 faf9 	bl	78f8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    4306:	4620      	mov	r0, r4
    4308:	f003 fcbe 	bl	7c88 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    430c:	f7ff fa90 	bl	3830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    4310:	b970      	cbnz	r0, 4330 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x330>
    4312:	e008      	b.n	4326 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x326>
    4314:	f240 5119 	movw	r1, #1305	; 0x519
    4318:	2032      	movs	r0, #50	; 0x32
    431a:	f7fc fba3 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    431e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4322:	f7ff bfb5 	b.w	4290 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x290>
    4326:	6868      	ldr	r0, [r5, #4]
    4328:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    432c:	2802      	cmp	r0, #2
    432e:	d104      	bne.n	433a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x33a>
    4330:	2100      	movs	r1, #0
    4332:	2201      	movs	r2, #1
    4334:	4608      	mov	r0, r1
    4336:	f003 ff6d 	bl	8214 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    433a:	6868      	ldr	r0, [r5, #4]
    433c:	21ff      	movs	r1, #255	; 0xff
    433e:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
    4342:	f880 1079 	strb.w	r1, [r0, #121]	; 0x79
    4346:	2100      	movs	r1, #0
    4348:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
    434c:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    4350:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    4354:	f880 1098 	strb.w	r1, [r0, #152]	; 0x98
    4358:	2105      	movs	r1, #5
    435a:	f880 1070 	strb.w	r1, [r0, #112]	; 0x70
    435e:	bd70      	pop	{r4, r5, r6, pc}
    4360:	200000d0 	.word	0x200000d0
    4364:	b570      	push	{r4, r5, r6, lr}
    4366:	f7fc ff77 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    436a:	4604      	mov	r4, r0
    436c:	f7fc ff7a 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    4370:	4621      	mov	r1, r4
    4372:	f00a fa40 	bl	e7f6 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    4376:	0005      	movs	r5, r0
    4378:	d028      	beq.n	43cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3cc>
    437a:	4e19      	ldr	r6, [pc, #100]	; (43e0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3e0>)
    437c:	2004      	movs	r0, #4
    437e:	6874      	ldr	r4, [r6, #4]
    4380:	3470      	adds	r4, #112	; 0x70
    4382:	f000 f9a5 	bl	46d0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    4386:	b330      	cbz	r0, 43d6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3d6>
    4388:	200c      	movs	r0, #12
    438a:	7020      	strb	r0, [r4, #0]
    438c:	2000      	movs	r0, #0
    438e:	f000 f971 	bl	4674 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA>
    4392:	7828      	ldrb	r0, [r5, #0]
    4394:	6871      	ldr	r1, [r6, #4]
    4396:	f3c0 1040 	ubfx	r0, r0, #5, #1
    439a:	f881 008a 	strb.w	r0, [r1, #138]	; 0x8a
    439e:	2005      	movs	r0, #5
    43a0:	f7ff fb16 	bl	39d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3f8>
    43a4:	4a0f      	ldr	r2, [pc, #60]	; (43e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3e4>)
    43a6:	68b1      	ldr	r1, [r6, #8]
    43a8:	2520      	movs	r5, #32
    43aa:	6d50      	ldr	r0, [r2, #84]	; 0x54
    43ac:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
    43b0:	7808      	ldrb	r0, [r1, #0]
    43b2:	ea05 1343 	and.w	r3, r5, r3, lsl #5
    43b6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    43ba:	4318      	orrs	r0, r3
    43bc:	7008      	strb	r0, [r1, #0]
    43be:	6d50      	ldr	r0, [r2, #84]	; 0x54
    43c0:	7ea2      	ldrb	r2, [r4, #26]
    43c2:	f810 1fad 	ldrb.w	r1, [r0, #173]!
    43c6:	4011      	ands	r1, r2
    43c8:	7001      	strb	r1, [r0, #0]
    43ca:	bd70      	pop	{r4, r5, r6, pc}
    43cc:	f240 619a 	movw	r1, #1690	; 0x69a
    43d0:	2032      	movs	r0, #50	; 0x32
    43d2:	f7fc fb47 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    43d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    43da:	f7ff bf59 	b.w	4290 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x290>
    43de:	0000      	.short	0x0000
    43e0:	200000d0 	.word	0x200000d0
    43e4:	20000ca0 	.word	0x20000ca0
    43e8:	b510      	push	{r4, lr}
    43ea:	2003      	movs	r0, #3
    43ec:	f000 f970 	bl	46d0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    43f0:	b168      	cbz	r0, 440e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x40e>
    43f2:	2003      	movs	r0, #3
    43f4:	f7ff faec 	bl	39d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3f8>
    43f8:	2201      	movs	r2, #1
    43fa:	4611      	mov	r1, r2
    43fc:	2000      	movs	r0, #0
    43fe:	f003 ff09 	bl	8214 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    4402:	4905      	ldr	r1, [pc, #20]	; (4418 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x418>)
    4404:	200b      	movs	r0, #11
    4406:	6849      	ldr	r1, [r1, #4]
    4408:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    440c:	bd10      	pop	{r4, pc}
    440e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4412:	f7ff bf3d 	b.w	4290 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x290>
    4416:	0000      	.short	0x0000
    4418:	200000d0 	.word	0x200000d0
    441c:	b570      	push	{r4, r5, r6, lr}
    441e:	4d19      	ldr	r5, [pc, #100]	; (4484 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x484>)
    4420:	2000      	movs	r0, #0
    4422:	686c      	ldr	r4, [r5, #4]
    4424:	f884 0098 	strb.w	r0, [r4, #152]	; 0x98
    4428:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
    442c:	b910      	cbnz	r0, 4434 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x434>
    442e:	f894 007d 	ldrb.w	r0, [r4, #125]	; 0x7d
    4432:	b308      	cbz	r0, 4478 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x478>
    4434:	e9f4 1024 	ldrd	r1, r0, [r4, #144]!	; 0x90
    4438:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    443c:	4050      	eors	r0, r2
    443e:	ea70 0101 	orns	r1, r0, r1
    4442:	d019      	beq.n	4478 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x478>
    4444:	f006 fea4 	bl	b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4448:	e9d4 2300 	ldrd	r2, r3, [r4]
    444c:	1a80      	subs	r0, r0, r2
    444e:	4199      	sbcs	r1, r3
    4450:	d312      	bcc.n	4478 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x478>
    4452:	f7fd ff0f 	bl	2274 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    4456:	490c      	ldr	r1, [pc, #48]	; (4488 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x488>)
    4458:	fba0 2301 	umull	r2, r3, r0, r1
    445c:	6868      	ldr	r0, [r5, #4]
    445e:	3090      	adds	r0, #144	; 0x90
    4460:	f00a f9cb 	bl	e7fa <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x90>
    4464:	6868      	ldr	r0, [r5, #4]
    4466:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    446a:	b110      	cbz	r0, 4472 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x472>
    446c:	2001      	movs	r0, #1
    446e:	f7fd fe73 	bl	2158 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    4472:	2001      	movs	r0, #1
    4474:	f7ff fd20 	bl	3eb8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x420>
    4478:	6869      	ldr	r1, [r5, #4]
    447a:	2002      	movs	r0, #2
    447c:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    4480:	bd70      	pop	{r4, r5, r6, pc}
    4482:	0000      	.short	0x0000
    4484:	200000d0 	.word	0x200000d0
    4488:	000f4240 	.word	0x000f4240
    448c:	000042ad 	.word	0x000042ad
    4490:	00004291 	.word	0x00004291
    4494:	0000e7d7 	.word	0x0000e7d7
    4498:	0000e7d7 	.word	0x0000e7d7
    449c:	0000e7d7 	.word	0x0000e7d7
    44a0:	000042bd 	.word	0x000042bd
    44a4:	0000e7d7 	.word	0x0000e7d7
    44a8:	0000e7d7 	.word	0x0000e7d7
    44ac:	0000e7d7 	.word	0x0000e7d7
    44b0:	0000e7d7 	.word	0x0000e7d7
    44b4:	0000e7d7 	.word	0x0000e7d7
    44b8:	000043e9 	.word	0x000043e9
    44bc:	00004365 	.word	0x00004365
    44c0:	0000e7d7 	.word	0x0000e7d7
    44c4:	0000e7d7 	.word	0x0000e7d7
    44c8:	000040b9 	.word	0x000040b9
    44cc:	00004095 	.word	0x00004095
    44d0:	00000000 	.word	0x00000000
    44d4:	0000e7e1 	.word	0x0000e7e1
    44d8:	0000e77f 	.word	0x0000e77f
    44dc:	0000e791 	.word	0x0000e791
    44e0:	0000e79f 	.word	0x0000e79f
    44e4:	000037dd 	.word	0x000037dd
    44e8:	00004135 	.word	0x00004135
    44ec:	00004215 	.word	0x00004215
    44f0:	000044c8 	.word	0x000044c8
    44f4:	000044d0 	.word	0x000044d0
    44f8:	0000448c 	.word	0x0000448c
    44fc:	000044e0 	.word	0x000044e0
    4500:	000044d8 	.word	0x000044d8
    4504:	000040f1 	.word	0x000040f1
    4508:	00003f6d 	.word	0x00003f6d
    450c:	00004041 	.word	0x00004041
    4510:	0000e7f3 	.word	0x0000e7f3
    4514:	b570      	push	{r4, r5, r6, lr}
    4516:	4604      	mov	r4, r0
    4518:	7800      	ldrb	r0, [r0, #0]
    451a:	2805      	cmp	r0, #5
    451c:	d001      	beq.n	4522 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x522>
    451e:	2148      	movs	r1, #72	; 0x48
    4520:	e058      	b.n	45d4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5d4>
    4522:	7ba0      	ldrb	r0, [r4, #14]
    4524:	06c0      	lsls	r0, r0, #27
    4526:	d401      	bmi.n	452c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x52c>
    4528:	2149      	movs	r1, #73	; 0x49
    452a:	e053      	b.n	45d4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5d4>
    452c:	221c      	movs	r2, #28
    452e:	1d21      	adds	r1, r4, #4
    4530:	482f      	ldr	r0, [pc, #188]	; (45f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5f0>)
    4532:	f00c f89c 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4536:	482e      	ldr	r0, [pc, #184]	; (45f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5f0>)
    4538:	7b22      	ldrb	r2, [r4, #12]
    453a:	f104 0120 	add.w	r1, r4, #32
    453e:	301c      	adds	r0, #28
    4540:	f00c f895 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4544:	482a      	ldr	r0, [pc, #168]	; (45f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5f0>)
    4546:	f04f 0201 	mov.w	r2, #1
    454a:	7a81      	ldrb	r1, [r0, #10]
    454c:	0749      	lsls	r1, r1, #29
    454e:	d502      	bpl.n	4556 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x556>
    4550:	7cc1      	ldrb	r1, [r0, #19]
    4552:	29fe      	cmp	r1, #254	; 0xfe
    4554:	d00c      	beq.n	4570 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x570>
    4556:	2304      	movs	r3, #4
    4558:	7023      	strb	r3, [r4, #0]
    455a:	6801      	ldr	r1, [r0, #0]
    455c:	6061      	str	r1, [r4, #4]
    455e:	6841      	ldr	r1, [r0, #4]
    4560:	60a1      	str	r1, [r4, #8]
    4562:	8901      	ldrh	r1, [r0, #8]
    4564:	81a1      	strh	r1, [r4, #12]
    4566:	7a81      	ldrb	r1, [r0, #10]
    4568:	070d      	lsls	r5, r1, #28
    456a:	d519      	bpl.n	45a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5a0>
    456c:	73a3      	strb	r3, [r4, #14]
    456e:	e02d      	b.n	45cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5cc>
    4570:	2113      	movs	r1, #19
    4572:	7021      	strb	r1, [r4, #0]
    4574:	7801      	ldrb	r1, [r0, #0]
    4576:	7121      	strb	r1, [r4, #4]
    4578:	7162      	strb	r2, [r4, #5]
    457a:	7841      	ldrb	r1, [r0, #1]
    457c:	71a1      	strb	r1, [r4, #6]
    457e:	f8d0 1002 	ldr.w	r1, [r0, #2]
    4582:	f8c4 1007 	str.w	r1, [r4, #7]
    4586:	88c1      	ldrh	r1, [r0, #6]
    4588:	f8a4 100b 	strh.w	r1, [r4, #11]
    458c:	21fe      	movs	r1, #254	; 0xfe
    458e:	7361      	strb	r1, [r4, #13]
    4590:	6941      	ldr	r1, [r0, #20]
    4592:	f8c4 100e 	str.w	r1, [r4, #14]
    4596:	8b01      	ldrh	r1, [r0, #24]
    4598:	8261      	strh	r1, [r4, #18]
    459a:	7a40      	ldrb	r0, [r0, #9]
    459c:	7520      	strb	r0, [r4, #20]
    459e:	bd70      	pop	{r4, r5, r6, pc}
    45a0:	07cb      	lsls	r3, r1, #31
    45a2:	d003      	beq.n	45ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5ac>
    45a4:	078b      	lsls	r3, r1, #30
    45a6:	d501      	bpl.n	45ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5ac>
    45a8:	2100      	movs	r1, #0
    45aa:	e00e      	b.n	45ca <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5ca>
    45ac:	074b      	lsls	r3, r1, #29
    45ae:	d501      	bpl.n	45b4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5b4>
    45b0:	73a2      	strb	r2, [r4, #14]
    45b2:	e00b      	b.n	45cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5cc>
    45b4:	07ca      	lsls	r2, r1, #31
    45b6:	d110      	bne.n	45da <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5da>
    45b8:	078a      	lsls	r2, r1, #30
    45ba:	d501      	bpl.n	45c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5c0>
    45bc:	2102      	movs	r1, #2
    45be:	e004      	b.n	45ca <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5ca>
    45c0:	07ca      	lsls	r2, r1, #31
    45c2:	d10a      	bne.n	45da <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5da>
    45c4:	0789      	lsls	r1, r1, #30
    45c6:	d408      	bmi.n	45da <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5da>
    45c8:	2103      	movs	r1, #3
    45ca:	73a1      	strb	r1, [r4, #14]
    45cc:	7a02      	ldrb	r2, [r0, #8]
    45ce:	2a1f      	cmp	r2, #31
    45d0:	d905      	bls.n	45de <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5de>
    45d2:	218d      	movs	r1, #141	; 0x8d
    45d4:	2033      	movs	r0, #51	; 0x33
    45d6:	f7fc fa45 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45da:	218a      	movs	r1, #138	; 0x8a
    45dc:	e7fa      	b.n	45d4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5d4>
    45de:	f104 000f 	add.w	r0, r4, #15
    45e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    45e6:	4902      	ldr	r1, [pc, #8]	; (45f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5f0>)
    45e8:	311c      	adds	r1, #28
    45ea:	f00c b840 	b.w	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    45ee:	0000      	.short	0x0000
    45f0:	200016fd 	.word	0x200016fd
    45f4:	2100      	movs	r1, #0
    45f6:	7201      	strb	r1, [r0, #8]
    45f8:	2204      	movs	r2, #4
    45fa:	4901      	ldr	r1, [pc, #4]	; (4600 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x600>)
    45fc:	f009 bd8f 	b.w	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    4600:	0000e9cb 	.word	0x0000e9cb

00004604 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>:
    4604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4608:	4616      	mov	r6, r2
    460a:	460c      	mov	r4, r1
    460c:	4605      	mov	r5, r0
    460e:	f009 fc9c 	bl	df4a <sym_GTN2QTPVJUP6VPTTNNKS6RR7APIHG3FG2T7SNQY>
    4612:	7460      	strb	r0, [r4, #17]
    4614:	4628      	mov	r0, r5
    4616:	f009 fc8f 	bl	df38 <sym_2RWLERIIOLMYS4LVQVNNIFLEQSG65A5Q5F2FPLA>
    461a:	74a0      	strb	r0, [r4, #18]
    461c:	1cea      	adds	r2, r5, #3
    461e:	4b14      	ldr	r3, [pc, #80]	; (4670 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x6c>)
    4620:	1d90      	adds	r0, r2, #6
    4622:	2100      	movs	r1, #0
    4624:	2e07      	cmp	r6, #7
    4626:	d21f      	bcs.n	4668 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x64>
    4628:	e8df f006 	tbb	[pc, r6]
    462c:	1e110b04 	.word	0x1e110b04
    4630:	00041e13 	.word	0x00041e13
    4634:	781b      	ldrb	r3, [r3, #0]
    4636:	e00d      	b.n	4654 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    4638:	60e0      	str	r0, [r4, #12]
    463a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    463e:	60e1      	str	r1, [r4, #12]
    4640:	e7fb      	b.n	463a <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x36>
    4642:	785b      	ldrb	r3, [r3, #1]
    4644:	7063      	strb	r3, [r4, #1]
    4646:	e9c4 2001 	strd	r2, r0, [r4, #4]
    464a:	7421      	strb	r1, [r4, #16]
    464c:	e7f7      	b.n	463e <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    464e:	789b      	ldrb	r3, [r3, #2]
    4650:	e000      	b.n	4654 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    4652:	78db      	ldrb	r3, [r3, #3]
    4654:	7063      	strb	r3, [r4, #1]
    4656:	e9c4 2101 	strd	r2, r1, [r4, #4]
    465a:	786a      	ldrb	r2, [r5, #1]
    465c:	1f92      	subs	r2, r2, #6
    465e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    4662:	7422      	strb	r2, [r4, #16]
    4664:	d0eb      	beq.n	463e <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    4666:	e7e7      	b.n	4638 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x34>
    4668:	7061      	strb	r1, [r4, #1]
    466a:	6061      	str	r1, [r4, #4]
    466c:	60a1      	str	r1, [r4, #8]
    466e:	e7ec      	b.n	464a <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    4670:	000108da 	.word	0x000108da

00004674 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA>:
    4674:	b570      	push	{r4, r5, r6, lr}
    4676:	b140      	cbz	r0, 468a <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x16>
    4678:	2801      	cmp	r0, #1
    467a:	d006      	beq.n	468a <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x16>
    467c:	2802      	cmp	r0, #2
    467e:	d00a      	beq.n	4696 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x22>
    4680:	2803      	cmp	r0, #3
    4682:	d006      	beq.n	4692 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x1e>
    4684:	f640 01c8 	movw	r1, #2248	; 0x8c8
    4688:	e015      	b.n	46b6 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x42>
    468a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    468e:	f000 b97d 	b.w	498c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38>
    4692:	2001      	movs	r0, #1
    4694:	e000      	b.n	4698 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x24>
    4696:	2000      	movs	r0, #0
    4698:	4c0c      	ldr	r4, [pc, #48]	; (46cc <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x58>)
    469a:	2101      	movs	r1, #1
    469c:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    46a0:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    46a4:	6a20      	ldr	r0, [r4, #32]
    46a6:	2500      	movs	r5, #0
    46a8:	f880 5248 	strb.w	r5, [r0, #584]	; 0x248
    46ac:	7821      	ldrb	r1, [r4, #0]
    46ae:	2905      	cmp	r1, #5
    46b0:	d004      	beq.n	46bc <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x48>
    46b2:	f640 0149 	movw	r1, #2121	; 0x849
    46b6:	2021      	movs	r0, #33	; 0x21
    46b8:	f7fc f9d4 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46bc:	f000 fd9a 	bl	51f4 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I>
    46c0:	6225      	str	r5, [r4, #32]
    46c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    46c6:	f000 b9c5 	b.w	4a54 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    46ca:	0000      	.short	0x0000
    46cc:	20000d48 	.word	0x20000d48

000046d0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>:
    46d0:	b570      	push	{r4, r5, r6, lr}
    46d2:	4605      	mov	r5, r0
    46d4:	f006 fd5c 	bl	b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    46d8:	4c16      	ldr	r4, [pc, #88]	; (4734 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x64>)
    46da:	6921      	ldr	r1, [r4, #16]
    46dc:	1a46      	subs	r6, r0, r1
    46de:	b155      	cbz	r5, 46f6 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x26>
    46e0:	2d03      	cmp	r5, #3
    46e2:	d00d      	beq.n	4700 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x30>
    46e4:	2d04      	cmp	r5, #4
    46e6:	d00e      	beq.n	4706 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
    46e8:	2d06      	cmp	r5, #6
    46ea:	d01d      	beq.n	4728 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x58>
    46ec:	f240 31d6 	movw	r1, #982	; 0x3d6
    46f0:	2021      	movs	r0, #33	; 0x21
    46f2:	f7fc f9b7 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46f6:	2001      	movs	r0, #1
    46f8:	f00a fa05 	bl	eb06 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    46fc:	3098      	adds	r0, #152	; 0x98
    46fe:	e004      	b.n	470a <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3a>
    4700:	f44f 7057 	mov.w	r0, #860	; 0x35c
    4704:	e001      	b.n	470a <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3a>
    4706:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    470a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    470c:	1835      	adds	r5, r6, r0
    470e:	39f4      	subs	r1, #244	; 0xf4
    4710:	428d      	cmp	r5, r1
    4712:	d307      	bcc.n	4724 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x54>
    4714:	2600      	movs	r6, #0
    4716:	f000 fac9 	bl	4cac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x358>
    471a:	b140      	cbz	r0, 472e <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    471c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    471e:	38f4      	subs	r0, #244	; 0xf4
    4720:	4285      	cmp	r5, r0
    4722:	d203      	bcs.n	472c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5c>
    4724:	2601      	movs	r6, #1
    4726:	e002      	b.n	472e <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    4728:	2001      	movs	r0, #1
    472a:	bd70      	pop	{r4, r5, r6, pc}
    472c:	2600      	movs	r6, #0
    472e:	4630      	mov	r0, r6
    4730:	bd70      	pop	{r4, r5, r6, pc}
    4732:	0000      	.short	0x0000
    4734:	20000d48 	.word	0x20000d48

00004738 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI>:
    4738:	b5f0      	push	{r4, r5, r6, r7, lr}
    473a:	4c1e      	ldr	r4, [pc, #120]	; (47b4 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x7c>)
    473c:	4607      	mov	r7, r0
    473e:	b087      	sub	sp, #28
    4740:	7820      	ldrb	r0, [r4, #0]
    4742:	460e      	mov	r6, r1
    4744:	b110      	cbz	r0, 474c <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x14>
    4746:	200c      	movs	r0, #12
    4748:	b007      	add	sp, #28
    474a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    474c:	f7fe fd34 	bl	31b8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4750:	4605      	mov	r5, r0
    4752:	6227      	str	r7, [r4, #32]
    4754:	f897 0248 	ldrb.w	r0, [r7, #584]	; 0x248
    4758:	b110      	cbz	r0, 4760 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x28>
    475a:	f44f 713f 	mov.w	r1, #764	; 0x2fc
    475e:	e025      	b.n	47ac <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    4760:	2005      	movs	r0, #5
    4762:	7020      	strb	r0, [r4, #0]
    4764:	2000      	movs	r0, #0
    4766:	7060      	strb	r0, [r4, #1]
    4768:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    476c:	f000 fae4 	bl	4d38 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e4>
    4770:	64a0      	str	r0, [r4, #72]	; 0x48
    4772:	2100      	movs	r1, #0
    4774:	4810      	ldr	r0, [pc, #64]	; (47b8 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x80>)
    4776:	f006 fadd 	bl	ad34 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    477a:	7028      	strb	r0, [r5, #0]
    477c:	2820      	cmp	r0, #32
    477e:	d00d      	beq.n	479c <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x64>
    4780:	4633      	mov	r3, r6
    4782:	2200      	movs	r2, #0
    4784:	2101      	movs	r1, #1
    4786:	4668      	mov	r0, sp
    4788:	f000 fb30 	bl	4dec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x498>
    478c:	b148      	cbz	r0, 47a2 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x6a>
    478e:	7828      	ldrb	r0, [r5, #0]
    4790:	4669      	mov	r1, sp
    4792:	f00a f9e3 	bl	eb5c <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6c>
    4796:	b138      	cbz	r0, 47a8 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x70>
    4798:	2000      	movs	r0, #0
    479a:	e7d5      	b.n	4748 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x10>
    479c:	f240 310a 	movw	r1, #778	; 0x30a
    47a0:	e004      	b.n	47ac <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    47a2:	f240 310d 	movw	r1, #781	; 0x30d
    47a6:	e001      	b.n	47ac <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    47a8:	f240 310e 	movw	r1, #782	; 0x30e
    47ac:	2021      	movs	r0, #33	; 0x21
    47ae:	f7fc f959 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    47b2:	0000      	.short	0x0000
    47b4:	20000d48 	.word	0x20000d48
    47b8:	00004a75 	.word	0x00004a75

000047bc <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI>:
    47bc:	4902      	ldr	r1, [pc, #8]	; (47c8 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI+0xc>)
    47be:	6a09      	ldr	r1, [r1, #32]
    47c0:	6001      	str	r1, [r0, #0]
    47c2:	f000 b83d 	b.w	4840 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    47c6:	0000      	.short	0x0000
    47c8:	20000d48 	.word	0x20000d48

000047cc <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>:
    47cc:	b570      	push	{r4, r5, r6, lr}
    47ce:	b086      	sub	sp, #24
    47d0:	4606      	mov	r6, r0
    47d2:	b111      	cbz	r1, 47da <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xe>
    47d4:	2011      	movs	r0, #17
    47d6:	b006      	add	sp, #24
    47d8:	bd70      	pop	{r4, r5, r6, pc}
    47da:	4c17      	ldr	r4, [pc, #92]	; (4838 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x6c>)
    47dc:	7820      	ldrb	r0, [r4, #0]
    47de:	b108      	cbz	r0, 47e4 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x18>
    47e0:	200c      	movs	r0, #12
    47e2:	e7f8      	b.n	47d6 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xa>
    47e4:	f7fe fce8 	bl	31b8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    47e8:	4605      	mov	r5, r0
    47ea:	2000      	movs	r0, #0
    47ec:	7060      	strb	r0, [r4, #1]
    47ee:	2004      	movs	r0, #4
    47f0:	7020      	strb	r0, [r4, #0]
    47f2:	f000 faa1 	bl	4d38 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e4>
    47f6:	64a0      	str	r0, [r4, #72]	; 0x48
    47f8:	2100      	movs	r1, #0
    47fa:	4810      	ldr	r0, [pc, #64]	; (483c <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x70>)
    47fc:	f006 fa9a 	bl	ad34 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    4800:	7028      	strb	r0, [r5, #0]
    4802:	2820      	cmp	r0, #32
    4804:	d00d      	beq.n	4822 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x56>
    4806:	4633      	mov	r3, r6
    4808:	2200      	movs	r2, #0
    480a:	2101      	movs	r1, #1
    480c:	4668      	mov	r0, sp
    480e:	f000 faed 	bl	4dec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x498>
    4812:	b148      	cbz	r0, 4828 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x5c>
    4814:	7828      	ldrb	r0, [r5, #0]
    4816:	4669      	mov	r1, sp
    4818:	f00a f9a0 	bl	eb5c <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6c>
    481c:	b138      	cbz	r0, 482e <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x62>
    481e:	2000      	movs	r0, #0
    4820:	e7d9      	b.n	47d6 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xa>
    4822:	f240 3162 	movw	r1, #866	; 0x362
    4826:	e004      	b.n	4832 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x66>
    4828:	f44f 7159 	mov.w	r1, #868	; 0x364
    482c:	e001      	b.n	4832 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x66>
    482e:	f240 3165 	movw	r1, #869	; 0x365
    4832:	2021      	movs	r0, #33	; 0x21
    4834:	f7fc f916 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4838:	20000d48 	.word	0x20000d48
    483c:	00004a75 	.word	0x00004a75

00004840 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>:
    4840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4844:	2700      	movs	r7, #0
    4846:	f7fe fcb7 	bl	31b8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    484a:	4c18      	ldr	r4, [pc, #96]	; (48ac <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x6c>)
    484c:	4605      	mov	r5, r0
    484e:	7820      	ldrb	r0, [r4, #0]
    4850:	2804      	cmp	r0, #4
    4852:	d005      	beq.n	4860 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    4854:	7820      	ldrb	r0, [r4, #0]
    4856:	2805      	cmp	r0, #5
    4858:	d002      	beq.n	4860 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    485a:	200c      	movs	r0, #12
    485c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4860:	2001      	movs	r0, #1
    4862:	7060      	strb	r0, [r4, #1]
    4864:	7b20      	ldrb	r0, [r4, #12]
    4866:	b160      	cbz	r0, 4882 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x42>
    4868:	f3ef 8610 	mrs	r6, PRIMASK
    486c:	b672      	cpsid	i
    486e:	7b20      	ldrb	r0, [r4, #12]
    4870:	b128      	cbz	r0, 487e <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    4872:	7b60      	ldrb	r0, [r4, #13]
    4874:	b118      	cbz	r0, 487e <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    4876:	f009 ff78 	bl	e76a <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    487a:	f000 f8eb 	bl	4a54 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    487e:	b126      	cbz	r6, 488a <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4a>
    4880:	e004      	b.n	488c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    4882:	7828      	ldrb	r0, [r5, #0]
    4884:	f005 ffea 	bl	a85c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    4888:	e000      	b.n	488c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    488a:	b662      	cpsie	i
    488c:	7828      	ldrb	r0, [r5, #0]
    488e:	f006 f939 	bl	ab04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    4892:	f000 fc03 	bl	509c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x748>
    4896:	2000      	movs	r0, #0
    4898:	7060      	strb	r0, [r4, #1]
    489a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    489e:	b100      	cbz	r0, 48a2 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x62>
    48a0:	270c      	movs	r7, #12
    48a2:	f000 fc27 	bl	50f4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7a0>
    48a6:	4638      	mov	r0, r7
    48a8:	e7d8      	b.n	485c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x1c>
    48aa:	0000      	.short	0x0000
    48ac:	20000d48 	.word	0x20000d48

000048b0 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>:
    48b0:	4801      	ldr	r0, [pc, #4]	; (48b8 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ+0x8>)
    48b2:	7800      	ldrb	r0, [r0, #0]
    48b4:	4770      	bx	lr
    48b6:	0000      	.short	0x0000
    48b8:	20000d48 	.word	0x20000d48

000048bc <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ>:
    48bc:	b510      	push	{r4, lr}
    48be:	4c10      	ldr	r4, [pc, #64]	; (4900 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x44>)
    48c0:	b086      	sub	sp, #24
    48c2:	7b20      	ldrb	r0, [r4, #12]
    48c4:	b1b0      	cbz	r0, 48f4 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    48c6:	7860      	ldrb	r0, [r4, #1]
    48c8:	b9a0      	cbnz	r0, 48f4 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    48ca:	2300      	movs	r3, #0
    48cc:	461a      	mov	r2, r3
    48ce:	4619      	mov	r1, r3
    48d0:	4668      	mov	r0, sp
    48d2:	f000 fa8b 	bl	4dec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x498>
    48d6:	b158      	cbz	r0, 48f0 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x34>
    48d8:	f7fe fc6e 	bl	31b8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    48dc:	7800      	ldrb	r0, [r0, #0]
    48de:	4669      	mov	r1, sp
    48e0:	f00a f93c 	bl	eb5c <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6c>
    48e4:	b930      	cbnz	r0, 48f4 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    48e6:	f240 71ae 	movw	r1, #1966	; 0x7ae
    48ea:	2021      	movs	r0, #33	; 0x21
    48ec:	f7fc f8ba 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48f0:	2001      	movs	r0, #1
    48f2:	70a0      	strb	r0, [r4, #2]
    48f4:	b006      	add	sp, #24
    48f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    48fa:	f000 b8ab 	b.w	4a54 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    48fe:	0000      	.short	0x0000
    4900:	20000d48 	.word	0x20000d48

00004904 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q>:
    4904:	b508      	push	{r3, lr}
    4906:	2260      	movs	r2, #96	; 0x60
    4908:	2100      	movs	r1, #0
    490a:	480c      	ldr	r0, [pc, #48]	; (493c <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q+0x38>)
    490c:	f00b ff29 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4910:	f7fe fc52 	bl	31b8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4914:	2120      	movs	r1, #32
    4916:	7001      	strb	r1, [r0, #0]
    4918:	f000 f812 	bl	4940 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>
    491c:	b120      	cbz	r0, 4928 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q+0x24>
    491e:	f240 2135 	movw	r1, #565	; 0x235
    4922:	2021      	movs	r0, #33	; 0x21
    4924:	f7fc f89e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4928:	f242 7010 	movw	r0, #10000	; 0x2710
    492c:	9000      	str	r0, [sp, #0]
    492e:	2201      	movs	r2, #1
    4930:	4669      	mov	r1, sp
    4932:	1080      	asrs	r0, r0, #2
    4934:	f000 f940 	bl	4bb8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x264>
    4938:	bd08      	pop	{r3, pc}
    493a:	0000      	.short	0x0000
    493c:	20000d48 	.word	0x20000d48

00004940 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>:
    4940:	4803      	ldr	r0, [pc, #12]	; (4950 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ+0x10>)
    4942:	b510      	push	{r4, lr}
    4944:	7800      	ldrb	r0, [r0, #0]
    4946:	b108      	cbz	r0, 494c <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ+0xc>
    4948:	f7ff ff7a 	bl	4840 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    494c:	2000      	movs	r0, #0
    494e:	bd10      	pop	{r4, pc}
    4950:	20000d48 	.word	0x20000d48

00004954 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>:
    4954:	490c      	ldr	r1, [pc, #48]	; (4988 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x34>)
    4956:	b508      	push	{r3, lr}
    4958:	7809      	ldrb	r1, [r1, #0]
    495a:	b121      	cbz	r1, 4966 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x12>
    495c:	f44f 7147 	mov.w	r1, #796	; 0x31c
    4960:	2021      	movs	r0, #33	; 0x21
    4962:	f7fc f87f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4966:	2300      	movs	r3, #0
    4968:	9300      	str	r3, [sp, #0]
    496a:	7801      	ldrb	r1, [r0, #0]
    496c:	461a      	mov	r2, r3
    496e:	07c9      	lsls	r1, r1, #31
    4970:	d003      	beq.n	497a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x26>
    4972:	e9d0 3001 	ldrd	r3, r0, [r0, #4]
    4976:	2201      	movs	r2, #1
    4978:	9000      	str	r0, [sp, #0]
    497a:	4669      	mov	r1, sp
    497c:	4618      	mov	r0, r3
    497e:	f000 f91b 	bl	4bb8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x264>
    4982:	2000      	movs	r0, #0
    4984:	bd08      	pop	{r3, pc}
    4986:	0000      	.short	0x0000
    4988:	20000d48 	.word	0x20000d48
    498c:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    4990:	4c2e      	ldr	r4, [pc, #184]	; (4a4c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xf8>)
    4992:	4680      	mov	r8, r0
    4994:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
    4998:	461e      	mov	r6, r3
    499a:	f003 fad3 	bl	7f44 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    499e:	4607      	mov	r7, r0
    49a0:	6a20      	ldr	r0, [r4, #32]
    49a2:	2101      	movs	r1, #1
    49a4:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
    49a8:	f880 106b 	strb.w	r1, [r0, #107]	; 0x6b
    49ac:	3062      	adds	r0, #98	; 0x62
    49ae:	21ff      	movs	r1, #255	; 0xff
    49b0:	7281      	strb	r1, [r0, #10]
    49b2:	6a20      	ldr	r0, [r4, #32]
    49b4:	f04f 0900 	mov.w	r9, #0
    49b8:	4649      	mov	r1, r9
    49ba:	302c      	adds	r0, #44	; 0x2c
    49bc:	f009 fc5e 	bl	e27c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    49c0:	462a      	mov	r2, r5
    49c2:	4633      	mov	r3, r6
    49c4:	2101      	movs	r1, #1
    49c6:	4640      	mov	r0, r8
    49c8:	9700      	str	r7, [sp, #0]
    49ca:	f00a f8ae 	bl	eb2a <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x3a>
    49ce:	6a27      	ldr	r7, [r4, #32]
    49d0:	4606      	mov	r6, r0
    49d2:	460d      	mov	r5, r1
    49d4:	f8d7 8010 	ldr.w	r8, [r7, #16]
    49d8:	f002 fa5a 	bl	6e90 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>
    49dc:	f104 0140 	add.w	r1, r4, #64	; 0x40
    49e0:	4288      	cmp	r0, r1
    49e2:	d00b      	beq.n	49fc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa8>
    49e4:	e9cd 6500 	strd	r6, r5, [sp]
    49e8:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
    49ec:	4642      	mov	r2, r8
    49ee:	f00a fc18 	bl	f222 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    49f2:	4540      	cmp	r0, r8
    49f4:	d903      	bls.n	49fe <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaa>
    49f6:	f240 410c 	movw	r1, #1036	; 0x40c
    49fa:	e01d      	b.n	4a38 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xe4>
    49fc:	2000      	movs	r0, #0
    49fe:	4914      	ldr	r1, [pc, #80]	; (4a50 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xfc>)
    4a00:	4607      	mov	r7, r0
    4a02:	6809      	ldr	r1, [r1, #0]
    4a04:	4288      	cmp	r0, r1
    4a06:	6a20      	ldr	r0, [r4, #32]
    4a08:	6901      	ldr	r1, [r0, #16]
    4a0a:	d202      	bcs.n	4a12 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbe>
    4a0c:	440f      	add	r7, r1
    4a0e:	6201      	str	r1, [r0, #32]
    4a10:	e004      	b.n	4a1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xc8>
    4a12:	4638      	mov	r0, r7
    4a14:	f009 f9cf 	bl	ddb6 <sym_MCZ5ZKWAPWEBLVDHDY2XS3XBNNW7L43ADSWQSTI>
    4a18:	6a21      	ldr	r1, [r4, #32]
    4a1a:	6208      	str	r0, [r1, #32]
    4a1c:	6a20      	ldr	r0, [r4, #32]
    4a1e:	6901      	ldr	r1, [r0, #16]
    4a20:	2005      	movs	r0, #5
    4a22:	f009 f9d0 	bl	ddc6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    4a26:	6a21      	ldr	r1, [r4, #32]
    4a28:	8488      	strh	r0, [r1, #36]	; 0x24
    4a2a:	6a21      	ldr	r1, [r4, #32]
    4a2c:	6a0a      	ldr	r2, [r1, #32]
    4a2e:	1aba      	subs	r2, r7, r2
    4a30:	4290      	cmp	r0, r2
    4a32:	d804      	bhi.n	4a3e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xea>
    4a34:	f640 0137 	movw	r1, #2103	; 0x837
    4a38:	2021      	movs	r0, #33	; 0x21
    4a3a:	f7fc f813 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a3e:	19f2      	adds	r2, r6, r7
    4a40:	eb45 0509 	adc.w	r5, r5, r9
    4a44:	e9c1 258a 	strd	r2, r5, [r1, #552]	; 0x228
    4a48:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    4a4c:	20000d48 	.word	0x20000d48
    4a50:	200000e0 	.word	0x200000e0
    4a54:	b510      	push	{r4, lr}
    4a56:	4c06      	ldr	r4, [pc, #24]	; (4a70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x11c>)
    4a58:	7b20      	ldrb	r0, [r4, #12]
    4a5a:	2800      	cmp	r0, #0
    4a5c:	d006      	beq.n	4a6c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x118>
    4a5e:	f003 fa77 	bl	7f50 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    4a62:	f006 f98f 	bl	ad84 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    4a66:	2000      	movs	r0, #0
    4a68:	7320      	strb	r0, [r4, #12]
    4a6a:	7360      	strb	r0, [r4, #13]
    4a6c:	bd10      	pop	{r4, pc}
    4a6e:	0000      	.short	0x0000
    4a70:	20000d48 	.word	0x20000d48
    4a74:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a76:	b087      	sub	sp, #28
    4a78:	460d      	mov	r5, r1
    4a7a:	f7fe fb9d 	bl	31b8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4a7e:	2701      	movs	r7, #1
    4a80:	4c3f      	ldr	r4, [pc, #252]	; (4b80 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x22c>)
    4a82:	2d09      	cmp	r5, #9
    4a84:	d278      	bcs.n	4b78 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x224>
    4a86:	e8df f005 	tbb	[pc, r5]
    4a8a:	3905      	.short	0x3905
    4a8c:	774a4f4f 	.word	0x774a4f4f
    4a90:	00726d64 	.word	0x00726d64
    4a94:	7327      	strb	r7, [r4, #12]
    4a96:	7861      	ldrb	r1, [r4, #1]
    4a98:	2900      	cmp	r1, #0
    4a9a:	d12d      	bne.n	4af8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4a9c:	7800      	ldrb	r0, [r0, #0]
    4a9e:	f005 fabb 	bl	a018 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    4aa2:	4605      	mov	r5, r0
    4aa4:	460e      	mov	r6, r1
    4aa6:	e9c4 0104 	strd	r0, r1, [r4, #16]
    4aaa:	f000 fb3f 	bl	512c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d8>
    4aae:	b118      	cbz	r0, 4ab8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x164>
    4ab0:	2000      	movs	r0, #0
    4ab2:	f88d 0004 	strb.w	r0, [sp, #4]
    4ab6:	e001      	b.n	4abc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x168>
    4ab8:	f88d 7004 	strb.w	r7, [sp, #4]
    4abc:	f000 f950 	bl	4d60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    4ac0:	4633      	mov	r3, r6
    4ac2:	462a      	mov	r2, r5
    4ac4:	f00a f84c 	bl	eb60 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    4ac8:	6861      	ldr	r1, [r4, #4]
    4aca:	fbb0 f2f1 	udiv	r2, r0, r1
    4ace:	fb01 0012 	mls	r0, r1, r2, r0
    4ad2:	b150      	cbz	r0, 4aea <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x196>
    4ad4:	f05f 0000 	movs.w	r0, #0
    4ad8:	f88d 0005 	strb.w	r0, [sp, #5]
    4adc:	4668      	mov	r0, sp
    4ade:	f7fe fcab 	bl	3438 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>
    4ae2:	b120      	cbz	r0, 4aee <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x19a>
    4ae4:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
    4ae8:	e043      	b.n	4b72 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21e>
    4aea:	2001      	movs	r0, #1
    4aec:	e7f4      	b.n	4ad8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x184>
    4aee:	6b20      	ldr	r0, [r4, #48]	; 0x30
    4af0:	38e3      	subs	r0, #227	; 0xe3
    4af2:	63a0      	str	r0, [r4, #56]	; 0x38
    4af4:	f006 fa60 	bl	afb8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    4af8:	b007      	add	sp, #28
    4afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4afc:	7860      	ldrb	r0, [r4, #1]
    4afe:	b130      	cbz	r0, 4b0e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1ba>
    4b00:	f009 fe33 	bl	e76a <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    4b04:	b007      	add	sp, #28
    4b06:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4b0a:	f7ff bfa3 	b.w	4a54 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    4b0e:	7367      	strb	r7, [r4, #13]
    4b10:	f7fe fd22 	bl	3558 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>
    4b14:	2800      	cmp	r0, #0
    4b16:	d0ef      	beq.n	4af8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4b18:	f240 11e1 	movw	r1, #481	; 0x1e1
    4b1c:	e029      	b.n	4b72 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21e>
    4b1e:	b007      	add	sp, #28
    4b20:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4b24:	f003 bbe8 	b.w	82f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    4b28:	7805      	ldrb	r5, [r0, #0]
    4b2a:	2300      	movs	r3, #0
    4b2c:	2201      	movs	r2, #1
    4b2e:	4619      	mov	r1, r3
    4b30:	4668      	mov	r0, sp
    4b32:	f000 f95b 	bl	4dec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x498>
    4b36:	b140      	cbz	r0, 4b4a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1f6>
    4b38:	4669      	mov	r1, sp
    4b3a:	4628      	mov	r0, r5
    4b3c:	f00a f80e 	bl	eb5c <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6c>
    4b40:	2800      	cmp	r0, #0
    4b42:	d1d9      	bne.n	4af8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4b44:	f240 71c9 	movw	r1, #1993	; 0x7c9
    4b48:	e013      	b.n	4b72 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21e>
    4b4a:	70a7      	strb	r7, [r4, #2]
    4b4c:	f000 f81a 	bl	4b84 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x230>
    4b50:	e7d2      	b.n	4af8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4b52:	f000 f8ab 	bl	4cac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x358>
    4b56:	2800      	cmp	r0, #0
    4b58:	d1ce      	bne.n	4af8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4b5a:	b007      	add	sp, #28
    4b5c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4b60:	f009 be01 	b.w	e766 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>
    4b64:	b007      	add	sp, #28
    4b66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4b6a:	f000 b80b 	b.w	4b84 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x230>
    4b6e:	f240 2113 	movw	r1, #531	; 0x213
    4b72:	2021      	movs	r0, #33	; 0x21
    4b74:	f7fb ff76 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b78:	f240 2117 	movw	r1, #535	; 0x217
    4b7c:	e7f9      	b.n	4b72 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21e>
    4b7e:	0000      	.short	0x0000
    4b80:	20000d48 	.word	0x20000d48
    4b84:	b510      	push	{r4, lr}
    4b86:	4c0b      	ldr	r4, [pc, #44]	; (4bb4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x260>)
    4b88:	7820      	ldrb	r0, [r4, #0]
    4b8a:	b138      	cbz	r0, 4b9c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x248>
    4b8c:	f000 fa86 	bl	509c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x748>
    4b90:	78a0      	ldrb	r0, [r4, #2]
    4b92:	b150      	cbz	r0, 4baa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x256>
    4b94:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    4b98:	b128      	cbz	r0, 4ba6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x252>
    4b9a:	e006      	b.n	4baa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x256>
    4b9c:	f240 117b 	movw	r1, #379	; 0x17b
    4ba0:	2021      	movs	r0, #33	; 0x21
    4ba2:	f7fb ff5f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ba6:	f7fe fcef 	bl	3588 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>
    4baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4bae:	f000 baa1 	b.w	50f4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7a0>
    4bb2:	0000      	.short	0x0000
    4bb4:	20000d48 	.word	0x20000d48
    4bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4bbc:	4d11      	ldr	r5, [pc, #68]	; (4c04 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2b0>)
    4bbe:	4616      	mov	r6, r2
    4bc0:	460f      	mov	r7, r1
    4bc2:	2400      	movs	r4, #0
    4bc4:	6068      	str	r0, [r5, #4]
    4bc6:	f009 ff93 	bl	eaf0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    4bca:	f8df c03c 	ldr.w	ip, [pc, #60]	; 4c08 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2b4>
    4bce:	2100      	movs	r1, #0
    4bd0:	f81c 2001 	ldrb.w	r2, [ip, r1]
    4bd4:	4232      	tst	r2, r6
    4bd6:	d007      	beq.n	4be8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x294>
    4bd8:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    4bdc:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    4be0:	1a1b      	subs	r3, r3, r0
    4be2:	1c64      	adds	r4, r4, #1
    4be4:	b2e4      	uxtb	r4, r4
    4be6:	6093      	str	r3, [r2, #8]
    4be8:	1c49      	adds	r1, r1, #1
    4bea:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    4bee:	d0ef      	beq.n	4bd0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x27c>
    4bf0:	f016 0f0e 	tst.w	r6, #14
    4bf4:	d004      	beq.n	4c00 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2ac>
    4bf6:	f240 7103 	movw	r1, #1795	; 0x703
    4bfa:	2021      	movs	r0, #33	; 0x21
    4bfc:	f7fb ff32 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4c04:	20000d48 	.word	0x20000d48
    4c08:	000108de 	.word	0x000108de
    4c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4c10:	b086      	sub	sp, #24
    4c12:	4692      	mov	sl, r2
    4c14:	4607      	mov	r7, r0
    4c16:	4689      	mov	r9, r1
    4c18:	f000 fa94 	bl	5144 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f0>
    4c1c:	4d22      	ldr	r5, [pc, #136]	; (4ca8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x354>)
    4c1e:	f04f 0800 	mov.w	r8, #0
    4c22:	686a      	ldr	r2, [r5, #4]
    4c24:	1886      	adds	r6, r0, r2
    4c26:	eb41 0108 	adc.w	r1, r1, r8
    4c2a:	460c      	mov	r4, r1
    4c2c:	460b      	mov	r3, r1
    4c2e:	4632      	mov	r2, r6
    4c30:	4638      	mov	r0, r7
    4c32:	4649      	mov	r1, r9
    4c34:	f009 ff94 	bl	eb60 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    4c38:	4607      	mov	r7, r0
    4c3a:	f009 ff88 	bl	eb4e <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x5e>
    4c3e:	4287      	cmp	r7, r0
    4c40:	da13      	bge.n	4c6a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x316>
    4c42:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
    4c46:	f000 fa7d 	bl	5144 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f0>
    4c4a:	4632      	mov	r2, r6
    4c4c:	4623      	mov	r3, r4
    4c4e:	f009 ff87 	bl	eb60 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    4c52:	6869      	ldr	r1, [r5, #4]
    4c54:	fbb0 f1f1 	udiv	r1, r0, r1
    4c58:	f8ca 1000 	str.w	r1, [sl]
    4c5c:	6868      	ldr	r0, [r5, #4]
    4c5e:	1980      	adds	r0, r0, r6
    4c60:	eb48 0104 	adc.w	r1, r8, r4
    4c64:	b006      	add	sp, #24
    4c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4c6a:	f88d 8000 	strb.w	r8, [sp]
    4c6e:	6b68      	ldr	r0, [r5, #52]	; 0x34
    4c70:	9001      	str	r0, [sp, #4]
    4c72:	f009 ff26 	bl	eac2 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    4c76:	f8ad 0008 	strh.w	r0, [sp, #8]
    4c7a:	2001      	movs	r0, #1
    4c7c:	f88d 000b 	strb.w	r0, [sp, #11]
    4c80:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
    4c84:	f000 fa5e 	bl	5144 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f0>
    4c88:	e9cd 0104 	strd	r0, r1, [sp, #16]
    4c8c:	f000 f9ec 	bl	5068 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x714>
    4c90:	f88d 000a 	strb.w	r0, [sp, #10]
    4c94:	4668      	mov	r0, sp
    4c96:	6869      	ldr	r1, [r5, #4]
    4c98:	f009 f83c 	bl	dd14 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    4c9c:	f8ca 0000 	str.w	r0, [sl]
    4ca0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    4ca4:	e7de      	b.n	4c64 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x310>
    4ca6:	0000      	.short	0x0000
    4ca8:	20000d48 	.word	0x20000d48
    4cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4cb0:	f006 fa6e 	bl	b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4cb4:	4c1f      	ldr	r4, [pc, #124]	; (4d34 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e0>)
    4cb6:	4606      	mov	r6, r0
    4cb8:	460d      	mov	r5, r1
    4cba:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    4cbe:	f000 f9d3 	bl	5068 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x714>
    4cc2:	4607      	mov	r7, r0
    4cc4:	f005 f94c 	bl	9f60 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    4cc8:	4602      	mov	r2, r0
    4cca:	2865      	cmp	r0, #101	; 0x65
    4ccc:	d323      	bcc.n	4d16 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c2>
    4cce:	1c50      	adds	r0, r2, #1
    4cd0:	d024      	beq.n	4d1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c8>
    4cd2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4cd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4cd6:	1888      	adds	r0, r1, r2
    4cd8:	4283      	cmp	r3, r0
    4cda:	d800      	bhi.n	4cde <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38a>
    4cdc:	1a5a      	subs	r2, r3, r1
    4cde:	f06f 0039 	mvn.w	r0, #57	; 0x39
    4ce2:	1830      	adds	r0, r6, r0
    4ce4:	f145 31ff 	adc.w	r1, r5, #4294967295
    4ce8:	f000 fa42 	bl	5170 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x81c>
    4cec:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4cee:	4408      	add	r0, r1
    4cf0:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4cf2:	1a45      	subs	r5, r0, r1
    4cf4:	f241 3088 	movw	r0, #5000	; 0x1388
    4cf8:	4285      	cmp	r5, r0
    4cfa:	d900      	bls.n	4cfe <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3aa>
    4cfc:	4605      	mov	r5, r0
    4cfe:	f006 fa47 	bl	b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4d02:	1b80      	subs	r0, r0, r6
    4d04:	f100 009d 	add.w	r0, r0, #157	; 0x9d
    4d08:	4285      	cmp	r5, r0
    4d0a:	d304      	bcc.n	4d16 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c2>
    4d0c:	4639      	mov	r1, r7
    4d0e:	4628      	mov	r0, r5
    4d10:	f005 f848 	bl	9da4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    4d14:	b120      	cbz	r0, 4d20 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3cc>
    4d16:	2000      	movs	r0, #0
    4d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d1c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4d1e:	e7e7      	b.n	4cf0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x39c>
    4d20:	6b20      	ldr	r0, [r4, #48]	; 0x30
    4d22:	4428      	add	r0, r5
    4d24:	6320      	str	r0, [r4, #48]	; 0x30
    4d26:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    4d28:	4428      	add	r0, r5
    4d2a:	63a0      	str	r0, [r4, #56]	; 0x38
    4d2c:	f006 f944 	bl	afb8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    4d30:	2001      	movs	r0, #1
    4d32:	e7f1      	b.n	4d18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c4>
    4d34:	20000d48 	.word	0x20000d48
    4d38:	b510      	push	{r4, lr}
    4d3a:	2400      	movs	r4, #0
    4d3c:	f009 fed8 	bl	eaf0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    4d40:	4a06      	ldr	r2, [pc, #24]	; (4d5c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x408>)
    4d42:	2100      	movs	r1, #0
    4d44:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    4d48:	4404      	add	r4, r0
    4d4a:	689b      	ldr	r3, [r3, #8]
    4d4c:	1c49      	adds	r1, r1, #1
    4d4e:	441c      	add	r4, r3
    4d50:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    4d54:	d0f6      	beq.n	4d44 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3f0>
    4d56:	4620      	mov	r0, r4
    4d58:	bd10      	pop	{r4, pc}
    4d5a:	0000      	.short	0x0000
    4d5c:	20000d48 	.word	0x20000d48
    4d60:	4901      	ldr	r1, [pc, #4]	; (4d68 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x414>)
    4d62:	e9d1 0110 	ldrd	r0, r1, [r1, #64]	; 0x40
    4d66:	4770      	bx	lr
    4d68:	20000d48 	.word	0x20000d48
    4d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d70:	4606      	mov	r6, r0
    4d72:	481d      	ldr	r0, [pc, #116]	; (4de8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x494>)
    4d74:	4688      	mov	r8, r1
    4d76:	4615      	mov	r5, r2
    4d78:	e9d0 100a 	ldrd	r1, r0, [r0, #40]	; 0x28
    4d7c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    4d80:	2701      	movs	r7, #1
    4d82:	4050      	eors	r0, r2
    4d84:	b086      	sub	sp, #24
    4d86:	ea70 0101 	orns	r1, r0, r1
    4d8a:	d021      	beq.n	4dd0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x47c>
    4d8c:	2400      	movs	r4, #0
    4d8e:	f88d 4000 	strb.w	r4, [sp]
    4d92:	9501      	str	r5, [sp, #4]
    4d94:	f009 fe95 	bl	eac2 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    4d98:	f8ad 0008 	strh.w	r0, [sp, #8]
    4d9c:	f88d 700b 	strb.w	r7, [sp, #11]
    4da0:	f009 fed5 	bl	eb4e <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x5e>
    4da4:	1982      	adds	r2, r0, r6
    4da6:	eb44 0008 	adc.w	r0, r4, r8
    4daa:	e9cd 2004 	strd	r2, r0, [sp, #16]
    4dae:	2002      	movs	r0, #2
    4db0:	f88d 000a 	strb.w	r0, [sp, #10]
    4db4:	4668      	mov	r0, sp
    4db6:	f005 fc21 	bl	a5fc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    4dba:	b168      	cbz	r0, 4dd8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x484>
    4dbc:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
    4dc0:	194a      	adds	r2, r1, r5
    4dc2:	4909      	ldr	r1, [pc, #36]	; (4de8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x494>)
    4dc4:	4160      	adcs	r0, r4
    4dc6:	e9d1 310a 	ldrd	r3, r1, [r1, #40]	; 0x28
    4dca:	1a9a      	subs	r2, r3, r2
    4dcc:	4181      	sbcs	r1, r0
    4dce:	d408      	bmi.n	4de2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x48e>
    4dd0:	2001      	movs	r0, #1
    4dd2:	b006      	add	sp, #24
    4dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4dd8:	f240 5135 	movw	r1, #1333	; 0x535
    4ddc:	2021      	movs	r0, #33	; 0x21
    4dde:	f7fb fe41 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4de2:	2000      	movs	r0, #0
    4de4:	e7f5      	b.n	4dd2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x47e>
    4de6:	0000      	.short	0x0000
    4de8:	20000d48 	.word	0x20000d48
    4dec:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4df0:	b087      	sub	sp, #28
    4df2:	4614      	mov	r4, r2
    4df4:	4606      	mov	r6, r0
    4df6:	f006 f9cb 	bl	b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4dfa:	4d99      	ldr	r5, [pc, #612]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4dfc:	4680      	mov	r8, r0
    4dfe:	4689      	mov	r9, r1
    4e00:	68a8      	ldr	r0, [r5, #8]
    4e02:	f04f 0a00 	mov.w	sl, #0
    4e06:	9002      	str	r0, [sp, #8]
    4e08:	f7ff ff96 	bl	4d38 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e4>
    4e0c:	6869      	ldr	r1, [r5, #4]
    4e0e:	4288      	cmp	r0, r1
    4e10:	d101      	bne.n	4e16 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4c2>
    4e12:	2001      	movs	r0, #1
    4e14:	e000      	b.n	4e18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4c4>
    4e16:	2000      	movs	r0, #0
    4e18:	9004      	str	r0, [sp, #16]
    4e1a:	4020      	ands	r0, r4
    4e1c:	9003      	str	r0, [sp, #12]
    4e1e:	9808      	ldr	r0, [sp, #32]
    4e20:	2800      	cmp	r0, #0
    4e22:	d07f      	beq.n	4f24 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5d0>
    4e24:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    4e28:	eb18 0b02 	adds.w	fp, r8, r2
    4e2c:	f149 0400 	adc.w	r4, r9, #0
    4e30:	f002 f834 	bl	6e9c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>
    4e34:	9000      	str	r0, [sp, #0]
    4e36:	488a      	ldr	r0, [pc, #552]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4e38:	7800      	ldrb	r0, [r0, #0]
    4e3a:	4f89      	ldr	r7, [pc, #548]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4e3c:	3740      	adds	r7, #64	; 0x40
    4e3e:	2805      	cmp	r0, #5
    4e40:	d135      	bne.n	4eae <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x55a>
    4e42:	4887      	ldr	r0, [pc, #540]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4e44:	6a00      	ldr	r0, [r0, #32]
    4e46:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    4e4a:	f002 f807 	bl	6e5c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>
    4e4e:	9900      	ldr	r1, [sp, #0]
    4e50:	4605      	mov	r5, r0
    4e52:	4288      	cmp	r0, r1
    4e54:	d009      	beq.n	4e6a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x516>
    4e56:	4882      	ldr	r0, [pc, #520]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4e58:	4629      	mov	r1, r5
    4e5a:	6a00      	ldr	r0, [r0, #32]
    4e5c:	f500 700a 	add.w	r0, r0, #552	; 0x228
    4e60:	f001 ffc0 	bl	6de4 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    4e64:	2000      	movs	r0, #0
    4e66:	61b8      	str	r0, [r7, #24]
    4e68:	e00c      	b.n	4e84 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x530>
    4e6a:	497d      	ldr	r1, [pc, #500]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4e6c:	6a08      	ldr	r0, [r1, #32]
    4e6e:	f500 700a 	add.w	r0, r0, #552	; 0x228
    4e72:	61b8      	str	r0, [r7, #24]
    4e74:	6a08      	ldr	r0, [r1, #32]
    4e76:	6c8a      	ldr	r2, [r1, #72]	; 0x48
    4e78:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    4e7c:	4282      	cmp	r2, r0
    4e7e:	d300      	bcc.n	4e82 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x52e>
    4e80:	4610      	mov	r0, r2
    4e82:	6488      	str	r0, [r1, #72]	; 0x48
    4e84:	4876      	ldr	r0, [pc, #472]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4e86:	6a00      	ldr	r0, [r0, #32]
    4e88:	b158      	cbz	r0, 4ea2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x54e>
    4e8a:	b16d      	cbz	r5, 4ea8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x554>
    4e8c:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
    4e90:	f8d5 c000 	ldr.w	ip, [r5]
    4e94:	eb1c 0303 	adds.w	r3, ip, r3
    4e98:	eb41 010a 	adc.w	r1, r1, sl
    4e9c:	e9c0 318a 	strd	r3, r1, [r0, #552]	; 0x228
    4ea0:	e005      	b.n	4eae <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x55a>
    4ea2:	f240 7185 	movw	r1, #1925	; 0x785
    4ea6:	e01a      	b.n	4ede <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x58a>
    4ea8:	2100      	movs	r1, #0
    4eaa:	e9c0 118a 	strd	r1, r1, [r0, #552]	; 0x228
    4eae:	4638      	mov	r0, r7
    4eb0:	9900      	ldr	r1, [sp, #0]
    4eb2:	f001 ff97 	bl	6de4 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    4eb6:	486a      	ldr	r0, [pc, #424]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4eb8:	9a00      	ldr	r2, [sp, #0]
    4eba:	6845      	ldr	r5, [r0, #4]
    4ebc:	b192      	cbz	r2, 4ee4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x590>
    4ebe:	e9d2 1301 	ldrd	r1, r3, [r2, #4]
    4ec2:	6817      	ldr	r7, [r2, #0]
    4ec4:	e9cd b400 	strd	fp, r4, [sp]
    4ec8:	18f8      	adds	r0, r7, r3
    4eca:	eb41 010a 	adc.w	r1, r1, sl
    4ece:	462a      	mov	r2, r5
    4ed0:	f00a f9a7 	bl	f222 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    4ed4:	4601      	mov	r1, r0
    4ed6:	42a8      	cmp	r0, r5
    4ed8:	d905      	bls.n	4ee6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x592>
    4eda:	f240 31f9 	movw	r1, #1017	; 0x3f9
    4ede:	2021      	movs	r0, #33	; 0x21
    4ee0:	f7fb fdc0 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ee4:	2100      	movs	r1, #0
    4ee6:	eb1b 0501 	adds.w	r5, fp, r1
    4eea:	495d      	ldr	r1, [pc, #372]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4eec:	4650      	mov	r0, sl
    4eee:	4144      	adcs	r4, r0
    4ef0:	684a      	ldr	r2, [r1, #4]
    4ef2:	1aab      	subs	r3, r5, r2
    4ef4:	eb64 020a 	sbc.w	r2, r4, sl
    4ef8:	e9c1 3210 	strd	r3, r2, [r1, #64]	; 0x40
    4efc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4efe:	3128      	adds	r1, #40	; 0x28
    4f00:	b152      	cbz	r2, 4f18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5c4>
    4f02:	f242 7310 	movw	r3, #10000	; 0x2710
    4f06:	435a      	muls	r2, r3
    4f08:	18aa      	adds	r2, r5, r2
    4f0a:	eb44 000a 	adc.w	r0, r4, sl
    4f0e:	e9c1 2000 	strd	r2, r0, [r1]
    4f12:	2001      	movs	r0, #1
    4f14:	e051      	b.n	4fba <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x666>
    4f16:	e005      	b.n	4f24 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5d0>
    4f18:	f04f 30ff 	mov.w	r0, #4294967295
    4f1c:	0842      	lsrs	r2, r0, #1
    4f1e:	e9c1 0200 	strd	r0, r2, [r1]
    4f22:	e7f6      	b.n	4f12 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5be>
    4f24:	9803      	ldr	r0, [sp, #12]
    4f26:	b1d8      	cbz	r0, 4f60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x60c>
    4f28:	2001      	movs	r0, #1
    4f2a:	f009 fdec 	bl	eb06 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    4f2e:	4604      	mov	r4, r0
    4f30:	2001      	movs	r0, #1
    4f32:	f003 f8f7 	bl	8124 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    4f36:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    4f3a:	4401      	add	r1, r0
    4f3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4f40:	fbb1 f0f0 	udiv	r0, r1, r0
    4f44:	1822      	adds	r2, r4, r0
    4f46:	4640      	mov	r0, r8
    4f48:	4649      	mov	r1, r9
    4f4a:	32f4      	adds	r2, #244	; 0xf4
    4f4c:	f7ff ff0e 	bl	4d6c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x418>
    4f50:	b908      	cbnz	r0, 4f56 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x602>
    4f52:	2000      	movs	r0, #0
    4f54:	9002      	str	r0, [sp, #8]
    4f56:	4645      	mov	r5, r8
    4f58:	464c      	mov	r4, r9
    4f5a:	f8cd a014 	str.w	sl, [sp, #20]
    4f5e:	e02d      	b.n	4fbc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x668>
    4f60:	b13c      	cbz	r4, 4f72 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x61e>
    4f62:	aa05      	add	r2, sp, #20
    4f64:	4640      	mov	r0, r8
    4f66:	4649      	mov	r1, r9
    4f68:	f7ff fe50 	bl	4c0c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2b8>
    4f6c:	4605      	mov	r5, r0
    4f6e:	460c      	mov	r4, r1
    4f70:	e024      	b.n	4fbc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x668>
    4f72:	4640      	mov	r0, r8
    4f74:	4649      	mov	r1, r9
    4f76:	f000 f8e5 	bl	5144 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f0>
    4f7a:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>
    4f7e:	4602      	mov	r2, r0
    4f80:	4608      	mov	r0, r1
    4f82:	f8db 1008 	ldr.w	r1, [fp, #8]
    4f86:	9102      	str	r1, [sp, #8]
    4f88:	f8db 3004 	ldr.w	r3, [fp, #4]
    4f8c:	4657      	mov	r7, sl
    4f8e:	189d      	adds	r5, r3, r2
    4f90:	eb4a 0400 	adc.w	r4, sl, r0
    4f94:	e9db 0104 	ldrd	r0, r1, [fp, #16]
    4f98:	f000 f8c8 	bl	512c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d8>
    4f9c:	f8db 1004 	ldr.w	r1, [fp, #4]
    4fa0:	4348      	muls	r0, r1
    4fa2:	9000      	str	r0, [sp, #0]
    4fa4:	f7ff fedc 	bl	4d60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    4fa8:	9a00      	ldr	r2, [sp, #0]
    4faa:	1880      	adds	r0, r0, r2
    4fac:	4179      	adcs	r1, r7
    4fae:	e9cb 0110 	strd	r0, r1, [fp, #64]	; 0x40
    4fb2:	4621      	mov	r1, r4
    4fb4:	4628      	mov	r0, r5
    4fb6:	f000 f8b9 	bl	512c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d8>
    4fba:	9005      	str	r0, [sp, #20]
    4fbc:	2001      	movs	r0, #1
    4fbe:	f009 fda2 	bl	eb06 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    4fc2:	4607      	mov	r7, r0
    4fc4:	2001      	movs	r0, #1
    4fc6:	f003 f8ad 	bl	8124 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    4fca:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    4fce:	4401      	add	r1, r0
    4fd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4fd4:	fbb1 f0f0 	udiv	r0, r1, r0
    4fd8:	4407      	add	r7, r0
    4fda:	4628      	mov	r0, r5
    4fdc:	4621      	mov	r1, r4
    4fde:	37f4      	adds	r7, #244	; 0xf4
    4fe0:	9a02      	ldr	r2, [sp, #8]
    4fe2:	f000 f8c5 	bl	5170 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x81c>
    4fe6:	491e      	ldr	r1, [pc, #120]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4fe8:	eb01 028a 	add.w	r2, r1, sl, lsl #2
    4fec:	6892      	ldr	r2, [r2, #8]
    4fee:	4282      	cmp	r2, r0
    4ff0:	d800      	bhi.n	4ff4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6a0>
    4ff2:	4610      	mov	r0, r2
    4ff4:	6348      	str	r0, [r1, #52]	; 0x34
    4ff6:	9a08      	ldr	r2, [sp, #32]
    4ff8:	b10a      	cbz	r2, 4ffe <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6aa>
    4ffa:	e9c1 5404 	strd	r5, r4, [r1, #16]
    4ffe:	e9c1 5406 	strd	r5, r4, [r1, #24]
    5002:	468b      	mov	fp, r1
    5004:	9904      	ldr	r1, [sp, #16]
    5006:	b111      	cbz	r1, 500e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6ba>
    5008:	f8cb 7030 	str.w	r7, [fp, #48]	; 0x30
    500c:	e001      	b.n	5012 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6be>
    500e:	f8cb 0030 	str.w	r0, [fp, #48]	; 0x30
    5012:	2001      	movs	r0, #1
    5014:	72f0      	strb	r0, [r6, #11]
    5016:	f009 fd54 	bl	eac2 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    501a:	8130      	strh	r0, [r6, #8]
    501c:	4628      	mov	r0, r5
    501e:	4621      	mov	r1, r4
    5020:	f000 f822 	bl	5068 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x714>
    5024:	72b0      	strb	r0, [r6, #10]
    5026:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
    502a:	6070      	str	r0, [r6, #4]
    502c:	9803      	ldr	r0, [sp, #12]
    502e:	b148      	cbz	r0, 5044 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6f0>
    5030:	2001      	movs	r0, #1
    5032:	7030      	strb	r0, [r6, #0]
    5034:	4a0b      	ldr	r2, [pc, #44]	; (5064 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x710>)
    5036:	4640      	mov	r0, r8
    5038:	4649      	mov	r1, r9
    503a:	f000 f899 	bl	5170 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x81c>
    503e:	1bc0      	subs	r0, r0, r7
    5040:	6130      	str	r0, [r6, #16]
    5042:	e003      	b.n	504c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6f8>
    5044:	f886 a000 	strb.w	sl, [r6]
    5048:	e9c6 5404 	strd	r5, r4, [r6, #16]
    504c:	f8db 0034 	ldr.w	r0, [fp, #52]	; 0x34
    5050:	42b8      	cmp	r0, r7
    5052:	d303      	bcc.n	505c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x708>
    5054:	2001      	movs	r0, #1
    5056:	b00b      	add	sp, #44	; 0x2c
    5058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    505c:	2000      	movs	r0, #0
    505e:	e7fa      	b.n	5056 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x702>
    5060:	20000d48 	.word	0x20000d48
    5064:	0f424000 	.word	0x0f424000
    5068:	b570      	push	{r4, r5, r6, lr}
    506a:	4604      	mov	r4, r0
    506c:	480a      	ldr	r0, [pc, #40]	; (5098 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x744>)
    506e:	460d      	mov	r5, r1
    5070:	7801      	ldrb	r1, [r0, #0]
    5072:	2904      	cmp	r1, #4
    5074:	d10d      	bne.n	5092 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x73e>
    5076:	6840      	ldr	r0, [r0, #4]
    5078:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    507c:	0046      	lsls	r6, r0, #1
    507e:	f7ff fe6f 	bl	4d60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    5082:	4622      	mov	r2, r4
    5084:	462b      	mov	r3, r5
    5086:	f009 fd6b 	bl	eb60 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    508a:	42b0      	cmp	r0, r6
    508c:	d201      	bcs.n	5092 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x73e>
    508e:	2002      	movs	r0, #2
    5090:	bd70      	pop	{r4, r5, r6, pc}
    5092:	2001      	movs	r0, #1
    5094:	bd70      	pop	{r4, r5, r6, pc}
    5096:	0000      	.short	0x0000
    5098:	20000d48 	.word	0x20000d48
    509c:	b570      	push	{r4, r5, r6, lr}
    509e:	4d14      	ldr	r5, [pc, #80]	; (50f0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x79c>)
    50a0:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    50a4:	f105 0440 	add.w	r4, r5, #64	; 0x40
    50a8:	2800      	cmp	r0, #0
    50aa:	7828      	ldrb	r0, [r5, #0]
    50ac:	d00f      	beq.n	50ce <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x77a>
    50ae:	2805      	cmp	r0, #5
    50b0:	d004      	beq.n	50bc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x768>
    50b2:	f240 2157 	movw	r1, #599	; 0x257
    50b6:	2021      	movs	r0, #33	; 0x21
    50b8:	f7fb fcd4 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50bc:	4620      	mov	r0, r4
    50be:	f009 fd1d 	bl	eafc <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0xc>
    50c2:	b178      	cbz	r0, 50e4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x790>
    50c4:	4620      	mov	r0, r4
    50c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    50ca:	f001 be69 	b.w	6da0 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    50ce:	2805      	cmp	r0, #5
    50d0:	d108      	bne.n	50e4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x790>
    50d2:	4620      	mov	r0, r4
    50d4:	f009 fd12 	bl	eafc <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0xc>
    50d8:	b920      	cbnz	r0, 50e4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x790>
    50da:	6a28      	ldr	r0, [r5, #32]
    50dc:	f500 700a 	add.w	r0, r0, #552	; 0x228
    50e0:	f001 fea0 	bl	6e24 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    50e4:	4620      	mov	r0, r4
    50e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    50ea:	f001 be9b 	b.w	6e24 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    50ee:	0000      	.short	0x0000
    50f0:	20000d48 	.word	0x20000d48
    50f4:	b510      	push	{r4, lr}
    50f6:	f7fe f8d1 	bl	329c <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    50fa:	490b      	ldr	r1, [pc, #44]	; (5128 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d4>)
    50fc:	2000      	movs	r0, #0
    50fe:	7088      	strb	r0, [r1, #2]
    5100:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
    5104:	6208      	str	r0, [r1, #32]
    5106:	7008      	strb	r0, [r1, #0]
    5108:	f7fe f856 	bl	31b8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    510c:	4604      	mov	r4, r0
    510e:	7800      	ldrb	r0, [r0, #0]
    5110:	f005 fcd6 	bl	aac0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    5114:	b110      	cbz	r0, 511c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7c8>
    5116:	2020      	movs	r0, #32
    5118:	7020      	strb	r0, [r4, #0]
    511a:	bd10      	pop	{r4, pc}
    511c:	f240 3192 	movw	r1, #914	; 0x392
    5120:	2021      	movs	r0, #33	; 0x21
    5122:	f7fb fc9f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5126:	0000      	.short	0x0000
    5128:	20000d48 	.word	0x20000d48
    512c:	b510      	push	{r4, lr}
    512e:	4604      	mov	r4, r0
    5130:	f7ff fe16 	bl	4d60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    5134:	4902      	ldr	r1, [pc, #8]	; (5140 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7ec>)
    5136:	1a20      	subs	r0, r4, r0
    5138:	6849      	ldr	r1, [r1, #4]
    513a:	fbb0 f0f1 	udiv	r0, r0, r1
    513e:	bd10      	pop	{r4, pc}
    5140:	20000d48 	.word	0x20000d48
    5144:	b570      	push	{r4, r5, r6, lr}
    5146:	4604      	mov	r4, r0
    5148:	460d      	mov	r5, r1
    514a:	f7ff fe09 	bl	4d60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    514e:	4622      	mov	r2, r4
    5150:	462b      	mov	r3, r5
    5152:	f009 fd05 	bl	eb60 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    5156:	4905      	ldr	r1, [pc, #20]	; (516c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x818>)
    5158:	684c      	ldr	r4, [r1, #4]
    515a:	fbb0 f0f4 	udiv	r0, r0, r4
    515e:	4344      	muls	r4, r0
    5160:	f7ff fdfe 	bl	4d60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    5164:	1900      	adds	r0, r0, r4
    5166:	f141 0100 	adc.w	r1, r1, #0
    516a:	bd70      	pop	{r4, r5, r6, pc}
    516c:	20000d48 	.word	0x20000d48
    5170:	4b0a      	ldr	r3, [pc, #40]	; (519c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x848>)
    5172:	b510      	push	{r4, lr}
    5174:	e9d3 430a 	ldrd	r4, r3, [r3, #40]	; 0x28
    5178:	1a20      	subs	r0, r4, r0
    517a:	eb63 0301 	sbc.w	r3, r3, r1
    517e:	2400      	movs	r4, #0
    5180:	4621      	mov	r1, r4
    5182:	1a24      	subs	r4, r4, r0
    5184:	4199      	sbcs	r1, r3
    5186:	da06      	bge.n	5196 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x842>
    5188:	2100      	movs	r1, #0
    518a:	1a14      	subs	r4, r2, r0
    518c:	eb71 0403 	sbcs.w	r4, r1, r3
    5190:	da00      	bge.n	5194 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x840>
    5192:	4610      	mov	r0, r2
    5194:	bd10      	pop	{r4, pc}
    5196:	2000      	movs	r0, #0
    5198:	bd10      	pop	{r4, pc}
    519a:	0000      	.short	0x0000
    519c:	20000d48 	.word	0x20000d48

000051a0 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>:
    51a0:	b570      	push	{r4, r5, r6, lr}
    51a2:	f002 fecf 	bl	7f44 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    51a6:	4c0d      	ldr	r4, [pc, #52]	; (51dc <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x3c>)
    51a8:	4606      	mov	r6, r0
    51aa:	4602      	mov	r2, r0
    51ac:	e9d4 5101 	ldrd	r5, r1, [r4, #4]
    51b0:	4628      	mov	r0, r5
    51b2:	f008 fc90 	bl	dad6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    51b6:	6060      	str	r0, [r4, #4]
    51b8:	42a8      	cmp	r0, r5
    51ba:	d005      	beq.n	51c8 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x28>
    51bc:	68e1      	ldr	r1, [r4, #12]
    51be:	1b40      	subs	r0, r0, r5
    51c0:	4408      	add	r0, r1
    51c2:	60e0      	str	r0, [r4, #12]
    51c4:	f005 fef8 	bl	afb8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    51c8:	6860      	ldr	r0, [r4, #4]
    51ca:	42b0      	cmp	r0, r6
    51cc:	d301      	bcc.n	51d2 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x32>
    51ce:	7820      	ldrb	r0, [r4, #0]
    51d0:	b108      	cbz	r0, 51d6 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x36>
    51d2:	2000      	movs	r0, #0
    51d4:	bd70      	pop	{r4, r5, r6, pc}
    51d6:	2001      	movs	r0, #1
    51d8:	bd70      	pop	{r4, r5, r6, pc}
    51da:	0000      	.short	0x0000
    51dc:	20001028 	.word	0x20001028

000051e0 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>:
    51e0:	4903      	ldr	r1, [pc, #12]	; (51f0 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x10>)
    51e2:	2000      	movs	r0, #0
    51e4:	6008      	str	r0, [r1, #0]
    51e6:	6048      	str	r0, [r1, #4]
    51e8:	6088      	str	r0, [r1, #8]
    51ea:	60c8      	str	r0, [r1, #12]
    51ec:	f000 b856 	b.w	529c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x30>
    51f0:	20001028 	.word	0x20001028

000051f4 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I>:
    51f4:	b510      	push	{r4, lr}
    51f6:	b086      	sub	sp, #24
    51f8:	0004      	movs	r4, r0
    51fa:	d005      	beq.n	5208 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x14>
    51fc:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    5200:	b128      	cbz	r0, 520e <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x1a>
    5202:	f240 1177 	movw	r1, #375	; 0x177
    5206:	e025      	b.n	5254 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x60>
    5208:	f44f 71bb 	mov.w	r1, #374	; 0x176
    520c:	e022      	b.n	5254 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x60>
    520e:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    5212:	2820      	cmp	r0, #32
    5214:	d002      	beq.n	521c <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x28>
    5216:	f240 1179 	movw	r1, #377	; 0x179
    521a:	e01b      	b.n	5254 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x60>
    521c:	4621      	mov	r1, r4
    521e:	480f      	ldr	r0, [pc, #60]	; (525c <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x68>)
    5220:	f005 fd88 	bl	ad34 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    5224:	f884 0249 	strb.w	r0, [r4, #585]	; 0x249
    5228:	2820      	cmp	r0, #32
    522a:	d00e      	beq.n	524a <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x56>
    522c:	2300      	movs	r3, #0
    522e:	2201      	movs	r2, #1
    5230:	4621      	mov	r1, r4
    5232:	4668      	mov	r0, sp
    5234:	f009 fce8 	bl	ec08 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x2e>
    5238:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    523c:	4669      	mov	r1, sp
    523e:	f009 fdca 	bl	edd6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1fc>
    5242:	b128      	cbz	r0, 5250 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x5c>
    5244:	b006      	add	sp, #24
    5246:	2000      	movs	r0, #0
    5248:	bd10      	pop	{r4, pc}
    524a:	f44f 71be 	mov.w	r1, #380	; 0x17c
    524e:	e001      	b.n	5254 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x60>
    5250:	f240 117f 	movw	r1, #383	; 0x17f
    5254:	2035      	movs	r0, #53	; 0x35
    5256:	f7fb fc05 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    525a:	0000      	.short	0x0000
    525c:	0000535d 	.word	0x0000535d

00005260 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>:
    5260:	4901      	ldr	r1, [pc, #4]	; (5268 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x8>)
    5262:	7048      	strb	r0, [r1, #1]
    5264:	4770      	bx	lr
    5266:	0000      	.short	0x0000
    5268:	20001028 	.word	0x20001028

0000526c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>:
    526c:	b570      	push	{r4, r5, r6, lr}
    526e:	4605      	mov	r5, r0
    5270:	4809      	ldr	r0, [pc, #36]	; (5298 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x2c>)
    5272:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    5276:	fbb0 f4f1 	udiv	r4, r0, r1
    527a:	f009 fc39 	bl	eaf0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    527e:	1901      	adds	r1, r0, r4
    5280:	4628      	mov	r0, r5
    5282:	f501 719d 	add.w	r1, r1, #314	; 0x13a
    5286:	f009 f812 	bl	e2ae <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    528a:	f640 0148 	movw	r1, #2120	; 0x848
    528e:	4288      	cmp	r0, r1
    5290:	d300      	bcc.n	5294 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x28>
    5292:	4608      	mov	r0, r1
    5294:	b280      	uxth	r0, r0
    5296:	bd70      	pop	{r4, r5, r6, pc}
    5298:	000122f9 	.word	0x000122f9
    529c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    52a0:	4d15      	ldr	r5, [pc, #84]	; (52f8 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x8c>)
    52a2:	2001      	movs	r0, #1
    52a4:	7028      	strb	r0, [r5, #0]
    52a6:	2400      	movs	r4, #0
    52a8:	f64f 76ff 	movw	r6, #65535	; 0xffff
    52ac:	e00b      	b.n	52c6 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x5a>
    52ae:	2100      	movs	r1, #0
    52b0:	f008 fa62 	bl	d778 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    52b4:	0007      	movs	r7, r0
    52b6:	d009      	beq.n	52cc <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x60>
    52b8:	f897 0249 	ldrb.w	r0, [r7, #585]	; 0x249
    52bc:	f005 fc22 	bl	ab04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    52c0:	4638      	mov	r0, r7
    52c2:	f009 fd59 	bl	ed78 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x19e>
    52c6:	9400      	str	r4, [sp, #0]
    52c8:	9401      	str	r4, [sp, #4]
    52ca:	e00d      	b.n	52e8 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x7c>
    52cc:	f240 1199 	movw	r1, #409	; 0x199
    52d0:	2035      	movs	r0, #53	; 0x35
    52d2:	f7fb fbc7 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    52d6:	9800      	ldr	r0, [sp, #0]
    52d8:	b130      	cbz	r0, 52e8 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x7c>
    52da:	f890 1248 	ldrb.w	r1, [r0, #584]	; 0x248
    52de:	b119      	cbz	r1, 52e8 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x7c>
    52e0:	8800      	ldrh	r0, [r0, #0]
    52e2:	42b0      	cmp	r0, r6
    52e4:	d1e3      	bne.n	52ae <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x42>
    52e6:	e004      	b.n	52f2 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x86>
    52e8:	4668      	mov	r0, sp
    52ea:	f7fb fdd9 	bl	ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    52ee:	2800      	cmp	r0, #0
    52f0:	d0f1      	beq.n	52d6 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x6a>
    52f2:	702c      	strb	r4, [r5, #0]
    52f4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    52f8:	20001028 	.word	0x20001028
    52fc:	b510      	push	{r4, lr}
    52fe:	4604      	mov	r4, r0
    5300:	2901      	cmp	r1, #1
    5302:	d102      	bne.n	530a <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x9e>
    5304:	480a      	ldr	r0, [pc, #40]	; (5330 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xc4>)
    5306:	7800      	ldrb	r0, [r0, #0]
    5308:	b140      	cbz	r0, 531c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xb0>
    530a:	2004      	movs	r0, #4
    530c:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
    5310:	f002 fe1e 	bl	7f50 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    5314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5318:	f005 bd34 	b.w	ad84 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    531c:	2200      	movs	r2, #0
    531e:	2101      	movs	r1, #1
    5320:	4620      	mov	r0, r4
    5322:	f009 fd41 	bl	eda8 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1ce>
    5326:	f834 0f9c 	ldrh.w	r0, [r4, #156]!
    532a:	1c40      	adds	r0, r0, #1
    532c:	8020      	strh	r0, [r4, #0]
    532e:	e7ef      	b.n	5310 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xa4>
    5330:	20001028 	.word	0x20001028
    5334:	b510      	push	{r4, lr}
    5336:	4604      	mov	r4, r0
    5338:	4608      	mov	r0, r1
    533a:	f002 fef3 	bl	8124 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    533e:	4906      	ldr	r1, [pc, #24]	; (5358 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xec>)
    5340:	f200 709d 	addw	r0, r0, #1949	; 0x79d
    5344:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
    5348:	4408      	add	r0, r1
    534a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    534e:	fbb0 f0f1 	udiv	r0, r0, r1
    5352:	f500 709d 	add.w	r0, r0, #314	; 0x13a
    5356:	bd10      	pop	{r4, pc}
    5358:	0000edda 	.word	0x0000edda
    535c:	b570      	push	{r4, r5, r6, lr}
    535e:	0004      	movs	r4, r0
    5360:	d008      	beq.n	5374 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x108>
    5362:	2909      	cmp	r1, #9
    5364:	d25f      	bcs.n	5426 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1ba>
    5366:	e8df f001 	tbb	[pc, r1]
    536a:	3807      	.short	0x3807
    536c:	5e3c4040 	.word	0x5e3c4040
    5370:	00594e47 	.word	0x00594e47
    5374:	21b7      	movs	r1, #183	; 0xb7
    5376:	e053      	b.n	5420 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1b4>
    5378:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    537c:	b358      	cbz	r0, 53d6 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x16a>
    537e:	4620      	mov	r0, r4
    5380:	f000 f928 	bl	55d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>
    5384:	f009 fbb4 	bl	eaf0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    5388:	f200 103b 	addw	r0, r0, #315	; 0x13b
    538c:	b285      	uxth	r5, r0
    538e:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    5392:	2128      	movs	r1, #40	; 0x28
    5394:	f009 fc24 	bl	ebe0 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x6>
    5398:	182e      	adds	r6, r5, r0
    539a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    539c:	6920      	ldr	r0, [r4, #16]
    539e:	4288      	cmp	r0, r1
    53a0:	d200      	bcs.n	53a4 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x138>
    53a2:	4601      	mov	r1, r0
    53a4:	4632      	mov	r2, r6
    53a6:	4620      	mov	r0, r4
    53a8:	f008 fef1 	bl	e18e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    53ac:	4d1f      	ldr	r5, [pc, #124]	; (542c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1c0>)
    53ae:	6068      	str	r0, [r5, #4]
    53b0:	7869      	ldrb	r1, [r5, #1]
    53b2:	b121      	cbz	r1, 53be <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x152>
    53b4:	4632      	mov	r2, r6
    53b6:	4620      	mov	r0, r4
    53b8:	6921      	ldr	r1, [r4, #16]
    53ba:	f008 fee8 	bl	e18e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    53be:	60a8      	str	r0, [r5, #8]
    53c0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    53c4:	f008 ff44 	bl	e250 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    53c8:	f5a0 7095 	sub.w	r0, r0, #298	; 0x12a
    53cc:	60e8      	str	r0, [r5, #12]
    53ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    53d2:	f005 bdf1 	b.w	afb8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    53d6:	21bf      	movs	r1, #191	; 0xbf
    53d8:	e022      	b.n	5420 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1b4>
    53da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    53de:	f009 bd0d 	b.w	edfc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>
    53e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    53e6:	f002 bf87 	b.w	82f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    53ea:	4620      	mov	r0, r4
    53ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    53f0:	2201      	movs	r2, #1
    53f2:	2100      	movs	r1, #0
    53f4:	f009 bcd8 	b.w	eda8 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1ce>
    53f8:	2001      	movs	r0, #1
    53fa:	f004 fcc3 	bl	9d84 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    53fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5402:	f008 bad7 	b.w	d9b4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    5406:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    540a:	2804      	cmp	r0, #4
    540c:	d001      	beq.n	5412 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1a6>
    540e:	21fe      	movs	r1, #254	; 0xfe
    5410:	e006      	b.n	5420 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1b4>
    5412:	4620      	mov	r0, r4
    5414:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5418:	f009 bcae 	b.w	ed78 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x19e>
    541c:	f44f 7183 	mov.w	r1, #262	; 0x106
    5420:	2035      	movs	r0, #53	; 0x35
    5422:	f7fb fb1f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5426:	f44f 7185 	mov.w	r1, #266	; 0x10a
    542a:	e7f9      	b.n	5420 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1b4>
    542c:	20001028 	.word	0x20001028

00005430 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>:
    5430:	4806      	ldr	r0, [pc, #24]	; (544c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x1c>)
    5432:	4905      	ldr	r1, [pc, #20]	; (5448 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x18>)
    5434:	6501      	str	r1, [r0, #80]	; 0x50
    5436:	4906      	ldr	r1, [pc, #24]	; (5450 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x20>)
    5438:	6541      	str	r1, [r0, #84]	; 0x54
    543a:	4807      	ldr	r0, [pc, #28]	; (5458 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x28>)
    543c:	4905      	ldr	r1, [pc, #20]	; (5454 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x24>)
    543e:	6501      	str	r1, [r0, #80]	; 0x50
    5440:	4906      	ldr	r1, [pc, #24]	; (545c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x2c>)
    5442:	6541      	str	r1, [r0, #84]	; 0x54
    5444:	4770      	bx	lr
    5446:	0000      	.short	0x0000
    5448:	000065f9 	.word	0x000065f9
    544c:	200000f8 	.word	0x200000f8
    5450:	000066d1 	.word	0x000066d1
    5454:	0000efcf 	.word	0x0000efcf
    5458:	200001a4 	.word	0x200001a4
    545c:	0000eff9 	.word	0x0000eff9

00005460 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>:
    5460:	b570      	push	{r4, r5, r6, lr}
    5462:	4605      	mov	r5, r0
    5464:	f8b0 00d6 	ldrh.w	r0, [r0, #214]	; 0xd6
    5468:	f895 10a9 	ldrb.w	r1, [r5, #169]	; 0xa9
    546c:	b1c9      	cbz	r1, 54a2 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x42>
    546e:	f8b5 10d8 	ldrh.w	r1, [r5, #216]	; 0xd8
    5472:	1a0c      	subs	r4, r1, r0
    5474:	f1b4 0404 	subs.w	r4, r4, #4
    5478:	f895 00d4 	ldrb.w	r0, [r5, #212]	; 0xd4
    547c:	b140      	cbz	r0, 5490 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x30>
    547e:	f895 20a5 	ldrb.w	r2, [r5, #165]	; 0xa5
    5482:	2300      	movs	r3, #0
    5484:	2109      	movs	r1, #9
    5486:	f105 0088 	add.w	r0, r5, #136	; 0x88
    548a:	f008 fb37 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    548e:	b160      	cbz	r0, 54aa <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    5490:	4628      	mov	r0, r5
    5492:	f009 feb7 	bl	f204 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x408>
    5496:	b138      	cbz	r0, 54a8 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x48>
    5498:	e9d5 1032 	ldrd	r1, r0, [r5, #200]	; 0xc8
    549c:	1a40      	subs	r0, r0, r1
    549e:	1f00      	subs	r0, r0, #4
    54a0:	e003      	b.n	54aa <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    54a2:	f1c0 0402 	rsb	r4, r0, #2
    54a6:	e7e7      	b.n	5478 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x18>
    54a8:	4620      	mov	r0, r4
    54aa:	42a0      	cmp	r0, r4
    54ac:	da00      	bge.n	54b0 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x50>
    54ae:	4604      	mov	r4, r0
    54b0:	2c00      	cmp	r4, #0
    54b2:	dc01      	bgt.n	54b8 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x58>
    54b4:	2000      	movs	r0, #0
    54b6:	bd70      	pop	{r4, r5, r6, pc}
    54b8:	b2a0      	uxth	r0, r4
    54ba:	bd70      	pop	{r4, r5, r6, pc}

000054bc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>:
    54bc:	481d      	ldr	r0, [pc, #116]	; (5534 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x78>)
    54be:	491c      	ldr	r1, [pc, #112]	; (5530 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x74>)
    54c0:	6081      	str	r1, [r0, #8]
    54c2:	491d      	ldr	r1, [pc, #116]	; (5538 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x7c>)
    54c4:	61c1      	str	r1, [r0, #28]
    54c6:	491d      	ldr	r1, [pc, #116]	; (553c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x80>)
    54c8:	62c1      	str	r1, [r0, #44]	; 0x2c
    54ca:	491d      	ldr	r1, [pc, #116]	; (5540 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x84>)
    54cc:	6101      	str	r1, [r0, #16]
    54ce:	491d      	ldr	r1, [pc, #116]	; (5544 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x88>)
    54d0:	6141      	str	r1, [r0, #20]
    54d2:	491d      	ldr	r1, [pc, #116]	; (5548 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x8c>)
    54d4:	6441      	str	r1, [r0, #68]	; 0x44
    54d6:	491d      	ldr	r1, [pc, #116]	; (554c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x90>)
    54d8:	6181      	str	r1, [r0, #24]
    54da:	491d      	ldr	r1, [pc, #116]	; (5550 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x94>)
    54dc:	6301      	str	r1, [r0, #48]	; 0x30
    54de:	491d      	ldr	r1, [pc, #116]	; (5554 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x98>)
    54e0:	6241      	str	r1, [r0, #36]	; 0x24
    54e2:	491d      	ldr	r1, [pc, #116]	; (5558 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x9c>)
    54e4:	64c1      	str	r1, [r0, #76]	; 0x4c
    54e6:	491d      	ldr	r1, [pc, #116]	; (555c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa0>)
    54e8:	6481      	str	r1, [r0, #72]	; 0x48
    54ea:	491d      	ldr	r1, [pc, #116]	; (5560 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa4>)
    54ec:	6341      	str	r1, [r0, #52]	; 0x34
    54ee:	491d      	ldr	r1, [pc, #116]	; (5564 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa8>)
    54f0:	6381      	str	r1, [r0, #56]	; 0x38
    54f2:	481e      	ldr	r0, [pc, #120]	; (556c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb0>)
    54f4:	491c      	ldr	r1, [pc, #112]	; (5568 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xac>)
    54f6:	6081      	str	r1, [r0, #8]
    54f8:	491d      	ldr	r1, [pc, #116]	; (5570 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb4>)
    54fa:	61c1      	str	r1, [r0, #28]
    54fc:	491d      	ldr	r1, [pc, #116]	; (5574 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb8>)
    54fe:	6201      	str	r1, [r0, #32]
    5500:	491d      	ldr	r1, [pc, #116]	; (5578 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xbc>)
    5502:	6041      	str	r1, [r0, #4]
    5504:	491d      	ldr	r1, [pc, #116]	; (557c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc0>)
    5506:	6001      	str	r1, [r0, #0]
    5508:	491d      	ldr	r1, [pc, #116]	; (5580 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc4>)
    550a:	6281      	str	r1, [r0, #40]	; 0x28
    550c:	491d      	ldr	r1, [pc, #116]	; (5584 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc8>)
    550e:	62c1      	str	r1, [r0, #44]	; 0x2c
    5510:	491d      	ldr	r1, [pc, #116]	; (5588 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xcc>)
    5512:	60c1      	str	r1, [r0, #12]
    5514:	491d      	ldr	r1, [pc, #116]	; (558c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd0>)
    5516:	6181      	str	r1, [r0, #24]
    5518:	491d      	ldr	r1, [pc, #116]	; (5590 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd4>)
    551a:	6301      	str	r1, [r0, #48]	; 0x30
    551c:	491d      	ldr	r1, [pc, #116]	; (5594 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd8>)
    551e:	6481      	str	r1, [r0, #72]	; 0x48
    5520:	491d      	ldr	r1, [pc, #116]	; (5598 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xdc>)
    5522:	64c1      	str	r1, [r0, #76]	; 0x4c
    5524:	491d      	ldr	r1, [pc, #116]	; (559c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xe0>)
    5526:	6441      	str	r1, [r0, #68]	; 0x44
    5528:	491d      	ldr	r1, [pc, #116]	; (55a0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xe4>)
    552a:	6241      	str	r1, [r0, #36]	; 0x24
    552c:	4770      	bx	lr
    552e:	0000      	.short	0x0000
    5530:	00006a01 	.word	0x00006a01
    5534:	200000f8 	.word	0x200000f8
    5538:	00006a45 	.word	0x00006a45
    553c:	0000eedd 	.word	0x0000eedd
    5540:	00006539 	.word	0x00006539
    5544:	0000eefd 	.word	0x0000eefd
    5548:	00006905 	.word	0x00006905
    554c:	00006985 	.word	0x00006985
    5550:	00006a8d 	.word	0x00006a8d
    5554:	00006575 	.word	0x00006575
    5558:	0000eeaf 	.word	0x0000eeaf
    555c:	0000ee79 	.word	0x0000ee79
    5560:	00006939 	.word	0x00006939
    5564:	00006751 	.word	0x00006751
    5568:	0000f197 	.word	0x0000f197
    556c:	200001a4 	.word	0x200001a4
    5570:	0000f1c7 	.word	0x0000f1c7
    5574:	0000efcb 	.word	0x0000efcb
    5578:	0000ef3d 	.word	0x0000ef3d
    557c:	0000ef67 	.word	0x0000ef67
    5580:	0000f05b 	.word	0x0000f05b
    5584:	0000f08d 	.word	0x0000f08d
    5588:	0000ef91 	.word	0x0000ef91
    558c:	0000f179 	.word	0x0000f179
    5590:	0000f201 	.word	0x0000f201
    5594:	0000f027 	.word	0x0000f027
    5598:	0000f051 	.word	0x0000f051
    559c:	0000f157 	.word	0x0000f157
    55a0:	0000f023 	.word	0x0000f023

000055a4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>:
    55a4:	4806      	ldr	r0, [pc, #24]	; (55c0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c>)
    55a6:	4905      	ldr	r1, [pc, #20]	; (55bc <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18>)
    55a8:	6581      	str	r1, [r0, #88]	; 0x58
    55aa:	4906      	ldr	r1, [pc, #24]	; (55c4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x20>)
    55ac:	65c1      	str	r1, [r0, #92]	; 0x5c
    55ae:	4807      	ldr	r0, [pc, #28]	; (55cc <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x28>)
    55b0:	4905      	ldr	r1, [pc, #20]	; (55c8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24>)
    55b2:	6581      	str	r1, [r0, #88]	; 0x58
    55b4:	4906      	ldr	r1, [pc, #24]	; (55d0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2c>)
    55b6:	6601      	str	r1, [r0, #96]	; 0x60
    55b8:	4770      	bx	lr
    55ba:	0000      	.short	0x0000
    55bc:	0000675d 	.word	0x0000675d
    55c0:	200000f8 	.word	0x200000f8
    55c4:	00006895 	.word	0x00006895
    55c8:	0000f0b3 	.word	0x0000f0b3
    55cc:	200001a4 	.word	0x200001a4
    55d0:	0000f0dd 	.word	0x0000f0dd

000055d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>:
    55d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    55d6:	4d39      	ldr	r5, [pc, #228]	; (56bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe8>)
    55d8:	2600      	movs	r6, #0
    55da:	f1a5 070c 	sub.w	r7, r5, #12
    55de:	702e      	strb	r6, [r5, #0]
    55e0:	6068      	str	r0, [r5, #4]
    55e2:	807e      	strh	r6, [r7, #2]
    55e4:	707e      	strb	r6, [r7, #1]
    55e6:	4604      	mov	r4, r0
    55e8:	703e      	strb	r6, [r7, #0]
    55ea:	8800      	ldrh	r0, [r0, #0]
    55ec:	f7fb fff6 	bl	15dc <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    55f0:	6868      	ldr	r0, [r5, #4]
    55f2:	8800      	ldrh	r0, [r0, #0]
    55f4:	f7fb ff9a 	bl	152c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    55f8:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    55fc:	1c40      	adds	r0, r0, #1
    55fe:	b282      	uxth	r2, r0
    5600:	6868      	ldr	r0, [r5, #4]
    5602:	f100 0388 	add.w	r3, r0, #136	; 0x88
    5606:	4601      	mov	r1, r0
    5608:	4618      	mov	r0, r3
    560a:	f008 fc26 	bl	de5a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    560e:	b120      	cbz	r0, 561a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x46>
    5610:	f240 11c1 	movw	r1, #449	; 0x1c1
    5614:	2036      	movs	r0, #54	; 0x36
    5616:	f7fb fa25 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    561a:	f8a4 624a 	strh.w	r6, [r4, #586]	; 0x24a
    561e:	f894 00a6 	ldrb.w	r0, [r4, #166]	; 0xa6
    5622:	2825      	cmp	r0, #37	; 0x25
    5624:	d10a      	bne.n	563c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x68>
    5626:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    562a:	f8b4 1260 	ldrh.w	r1, [r4, #608]	; 0x260
    562e:	1a40      	subs	r0, r0, r1
    5630:	b200      	sxth	r0, r0
    5632:	2800      	cmp	r0, #0
    5634:	db02      	blt.n	563c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x68>
    5636:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
    563a:	e011      	b.n	5660 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c>
    563c:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
    5640:	2825      	cmp	r0, #37	; 0x25
    5642:	d003      	beq.n	564c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x78>
    5644:	2826      	cmp	r0, #38	; 0x26
    5646:	d001      	beq.n	564c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x78>
    5648:	2827      	cmp	r0, #39	; 0x27
    564a:	d10c      	bne.n	5666 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x92>
    564c:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    5650:	f8b4 1260 	ldrh.w	r1, [r4, #608]	; 0x260
    5654:	1a40      	subs	r0, r0, r1
    5656:	b200      	sxth	r0, r0
    5658:	2800      	cmp	r0, #0
    565a:	db04      	blt.n	5666 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x92>
    565c:	f884 60a5 	strb.w	r6, [r4, #165]	; 0xa5
    5660:	f000 febe 	bl	63e0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd14>
    5664:	b318      	cbz	r0, 56ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    5666:	f000 fd43 	bl	60f0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa24>
    566a:	2800      	cmp	r0, #0
    566c:	d125      	bne.n	56ba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe6>
    566e:	6868      	ldr	r0, [r5, #4]
    5670:	3088      	adds	r0, #136	; 0x88
    5672:	f009 fbd1 	bl	ee18 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5676:	b120      	cbz	r0, 5682 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xae>
    5678:	6868      	ldr	r0, [r5, #4]
    567a:	f890 012e 	ldrb.w	r0, [r0, #302]	; 0x12e
    567e:	f000 fbdd 	bl	5e3c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x770>
    5682:	480f      	ldr	r0, [pc, #60]	; (56c0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xec>)
    5684:	9000      	str	r0, [sp, #0]
    5686:	e9d7 0103 	ldrd	r0, r1, [r7, #12]
    568a:	4b0e      	ldr	r3, [pc, #56]	; (56c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf0>)
    568c:	4a0e      	ldr	r2, [pc, #56]	; (56c8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf4>)
    568e:	f7fc f827 	bl	16e0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    5692:	6868      	ldr	r0, [r5, #4]
    5694:	2300      	movs	r3, #0
    5696:	2105      	movs	r1, #5
    5698:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    569c:	3088      	adds	r0, #136	; 0x88
    569e:	f008 fa2d 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    56a2:	2800      	cmp	r0, #0
    56a4:	d009      	beq.n	56ba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe6>
    56a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    56aa:	f7fc b813 	b.w	16d4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    56ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    56b2:	2100      	movs	r1, #0
    56b4:	4608      	mov	r0, r1
    56b6:	f000 bcc3 	b.w	6040 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x974>
    56ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    56bc:	200000f0 	.word	0x200000f0
    56c0:	00006041 	.word	0x00006041
    56c4:	000058a9 	.word	0x000058a9
    56c8:	00006359 	.word	0x00006359

000056cc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>:
    56cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56ce:	460d      	mov	r5, r1
    56d0:	4604      	mov	r4, r0
    56d2:	2600      	movs	r6, #0
    56d4:	e051      	b.n	577a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xae>
    56d6:	bf00      	nop
    56d8:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    56dc:	1c40      	adds	r0, r0, #1
    56de:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    56e2:	f8b4 00d6 	ldrh.w	r0, [r4, #214]	; 0xd6
    56e6:	1c40      	adds	r0, r0, #1
    56e8:	f8a4 00d6 	strh.w	r0, [r4, #214]	; 0xd6
    56ec:	4620      	mov	r0, r4
    56ee:	f009 fd89 	bl	f204 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x408>
    56f2:	b198      	cbz	r0, 571c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x50>
    56f4:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
    56f8:	1c40      	adds	r0, r0, #1
    56fa:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
    56fe:	4620      	mov	r0, r4
    5700:	f009 fbab 	bl	ee5a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    5704:	e9d4 0132 	ldrd	r0, r1, [r4, #200]	; 0xc8
    5708:	4288      	cmp	r0, r1
    570a:	d307      	bcc.n	571c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x50>
    570c:	220f      	movs	r2, #15
    570e:	491d      	ldr	r1, [pc, #116]	; (5784 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb8>)
    5710:	f504 70b0 	add.w	r0, r4, #352	; 0x160
    5714:	f8c4 60c8 	str.w	r6, [r4, #200]	; 0xc8
    5718:	f008 fd15 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    571c:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    5720:	b120      	cbz	r0, 572c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x60>
    5722:	f8b4 00dc 	ldrh.w	r0, [r4, #220]	; 0xdc
    5726:	1c40      	adds	r0, r0, #1
    5728:	f8a4 00dc 	strh.w	r0, [r4, #220]	; 0xdc
    572c:	f894 00e4 	ldrb.w	r0, [r4, #228]	; 0xe4
    5730:	b120      	cbz	r0, 573c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x70>
    5732:	f8b4 00e2 	ldrh.w	r0, [r4, #226]	; 0xe2
    5736:	1c40      	adds	r0, r0, #1
    5738:	f8a4 00e2 	strh.w	r0, [r4, #226]	; 0xe2
    573c:	f894 0138 	ldrb.w	r0, [r4, #312]	; 0x138
    5740:	f88d 0000 	strb.w	r0, [sp]
    5744:	9800      	ldr	r0, [sp, #0]
    5746:	9000      	str	r0, [sp, #0]
    5748:	f89d 0000 	ldrb.w	r0, [sp]
    574c:	b940      	cbnz	r0, 5760 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x94>
    574e:	f894 20a7 	ldrb.w	r2, [r4, #167]	; 0xa7
    5752:	2300      	movs	r3, #0
    5754:	2101      	movs	r1, #1
    5756:	f104 0088 	add.w	r0, r4, #136	; 0x88
    575a:	f008 f9cf 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    575e:	b120      	cbz	r0, 576a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9e>
    5760:	f8b4 00da 	ldrh.w	r0, [r4, #218]	; 0xda
    5764:	1c40      	adds	r0, r0, #1
    5766:	f8a4 00da 	strh.w	r0, [r4, #218]	; 0xda
    576a:	4620      	mov	r0, r4
    576c:	f000 fa30 	bl	5bd0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x504>
    5770:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    5774:	1c40      	adds	r0, r0, #1
    5776:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
    577a:	1e6d      	subs	r5, r5, #1
    577c:	b2ad      	uxth	r5, r5
    577e:	d2ab      	bcs.n	56d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc>
    5780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5782:	0000      	.short	0x0000
    5784:	0000e63d 	.word	0x0000e63d
    5788:	4411      	add	r1, r2
    578a:	78c2      	ldrb	r2, [r0, #3]
    578c:	480c      	ldr	r0, [pc, #48]	; (57c0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf4>)
    578e:	1d89      	adds	r1, r1, #6
    5790:	b289      	uxth	r1, r1
    5792:	6840      	ldr	r0, [r0, #4]
    5794:	2a01      	cmp	r2, #1
    5796:	d006      	beq.n	57a6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xda>
    5798:	b142      	cbz	r2, 57ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe0>
    579a:	2a18      	cmp	r2, #24
    579c:	d105      	bne.n	57aa <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde>
    579e:	f890 2262 	ldrb.w	r2, [r0, #610]	; 0x262
    57a2:	b132      	cbz	r2, 57b2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe6>
    57a4:	e009      	b.n	57ba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xee>
    57a6:	f8a0 125e 	strh.w	r1, [r0, #606]	; 0x25e
    57aa:	4770      	bx	lr
    57ac:	f8a0 1266 	strh.w	r1, [r0, #614]	; 0x266
    57b0:	4770      	bx	lr
    57b2:	f890 2263 	ldrb.w	r2, [r0, #611]	; 0x263
    57b6:	b902      	cbnz	r2, 57ba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xee>
    57b8:	2100      	movs	r1, #0
    57ba:	f8a0 1260 	strh.w	r1, [r0, #608]	; 0x260
    57be:	4770      	bx	lr
    57c0:	200000f0 	.word	0x200000f0
    57c4:	490b      	ldr	r1, [pc, #44]	; (57f4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x128>)
    57c6:	78c2      	ldrb	r2, [r0, #3]
    57c8:	6849      	ldr	r1, [r1, #4]
    57ca:	2a01      	cmp	r2, #1
    57cc:	d006      	beq.n	57dc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x110>
    57ce:	b15a      	cbz	r2, 57e8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c>
    57d0:	2a18      	cmp	r2, #24
    57d2:	d108      	bne.n	57e6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11a>
    57d4:	f8b1 1260 	ldrh.w	r1, [r1, #608]	; 0x260
    57d8:	f008 bc54 	b.w	e084 <sym_AYZTYWE6SD5T6ZDLITENLNSRAVS5VKE23BWONUA>
    57dc:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
    57e0:	7241      	strb	r1, [r0, #9]
    57e2:	0a09      	lsrs	r1, r1, #8
    57e4:	7281      	strb	r1, [r0, #10]
    57e6:	4770      	bx	lr
    57e8:	f8b1 1266 	ldrh.w	r1, [r1, #614]	; 0x266
    57ec:	7341      	strb	r1, [r0, #13]
    57ee:	0a09      	lsrs	r1, r1, #8
    57f0:	7381      	strb	r1, [r0, #14]
    57f2:	4770      	bx	lr
    57f4:	200000f0 	.word	0x200000f0
    57f8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    57fa:	4c2a      	ldr	r4, [pc, #168]	; (58a4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d8>)
    57fc:	2300      	movs	r3, #0
    57fe:	4619      	mov	r1, r3
    5800:	6860      	ldr	r0, [r4, #4]
    5802:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5806:	3088      	adds	r0, #136	; 0x88
    5808:	f008 f978 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    580c:	2800      	cmp	r0, #0
    580e:	d048      	beq.n	58a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5810:	6860      	ldr	r0, [r4, #4]
    5812:	f890 125c 	ldrb.w	r1, [r0, #604]	; 0x25c
    5816:	f88d 1000 	strb.w	r1, [sp]
    581a:	9900      	ldr	r1, [sp, #0]
    581c:	9100      	str	r1, [sp, #0]
    581e:	f89d 1000 	ldrb.w	r1, [sp]
    5822:	2500      	movs	r5, #0
    5824:	2900      	cmp	r1, #0
    5826:	d03c      	beq.n	58a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5828:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    582c:	f008 f9c9 	bl	dbc2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    5830:	2800      	cmp	r0, #0
    5832:	d136      	bne.n	58a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5834:	6860      	ldr	r0, [r4, #4]
    5836:	f8b0 009c 	ldrh.w	r0, [r0, #156]	; 0x9c
    583a:	280a      	cmp	r0, #10
    583c:	d931      	bls.n	58a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    583e:	4668      	mov	r0, sp
    5840:	f7fc ff30 	bl	26a4 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
    5844:	2800      	cmp	r0, #0
    5846:	d02c      	beq.n	58a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5848:	6861      	ldr	r1, [r4, #4]
    584a:	2205      	movs	r2, #5
    584c:	4668      	mov	r0, sp
    584e:	31ae      	adds	r1, #174	; 0xae
    5850:	f00a fefb 	bl	1064a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    5854:	b310      	cbz	r0, 589c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d0>
    5856:	6860      	ldr	r0, [r4, #4]
    5858:	f8d0 1258 	ldr.w	r1, [r0, #600]	; 0x258
    585c:	7808      	ldrb	r0, [r1, #0]
    585e:	b158      	cbz	r0, 5878 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1ac>
    5860:	2205      	movs	r2, #5
    5862:	4668      	mov	r0, sp
    5864:	1c49      	adds	r1, r1, #1
    5866:	f00a fef0 	bl	1064a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    586a:	2800      	cmp	r0, #0
    586c:	d119      	bne.n	58a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    586e:	6860      	ldr	r0, [r4, #4]
    5870:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    5874:	7800      	ldrb	r0, [r0, #0]
    5876:	b940      	cbnz	r0, 588a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1be>
    5878:	6860      	ldr	r0, [r4, #4]
    587a:	9900      	ldr	r1, [sp, #0]
    587c:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    5880:	f8c0 1001 	str.w	r1, [r0, #1]
    5884:	f89d 1004 	ldrb.w	r1, [sp, #4]
    5888:	7141      	strb	r1, [r0, #5]
    588a:	6860      	ldr	r0, [r4, #4]
    588c:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    5890:	7801      	ldrb	r1, [r0, #0]
    5892:	1c49      	adds	r1, r1, #1
    5894:	7001      	strb	r1, [r0, #0]
    5896:	2001      	movs	r0, #1
    5898:	f000 fe0c 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    589c:	6860      	ldr	r0, [r4, #4]
    589e:	f880 525c 	strb.w	r5, [r0, #604]	; 0x25c
    58a2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    58a4:	200000f0 	.word	0x200000f0
    58a8:	4a0c      	ldr	r2, [pc, #48]	; (58dc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x210>)
    58aa:	7851      	ldrb	r1, [r2, #1]
    58ac:	b9a1      	cbnz	r1, 58d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x20c>
    58ae:	f102 010c 	add.w	r1, r2, #12
    58b2:	2801      	cmp	r0, #1
    58b4:	6849      	ldr	r1, [r1, #4]
    58b6:	d008      	beq.n	58ca <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1fe>
    58b8:	7890      	ldrb	r0, [r2, #2]
    58ba:	0740      	lsls	r0, r0, #29
    58bc:	d503      	bpl.n	58c6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1fa>
    58be:	f891 00a7 	ldrb.w	r0, [r1, #167]	; 0xa7
    58c2:	2806      	cmp	r0, #6
    58c4:	d008      	beq.n	58d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x20c>
    58c6:	2001      	movs	r0, #1
    58c8:	4770      	bx	lr
    58ca:	f8b1 0050 	ldrh.w	r0, [r1, #80]	; 0x50
    58ce:	8e89      	ldrh	r1, [r1, #52]	; 0x34
    58d0:	4288      	cmp	r0, r1
    58d2:	d801      	bhi.n	58d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x20c>
    58d4:	f7ff bc64 	b.w	51a0 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>
    58d8:	2000      	movs	r0, #0
    58da:	4770      	bx	lr
    58dc:	200000e4 	.word	0x200000e4
    58e0:	b538      	push	{r3, r4, r5, lr}
    58e2:	4c93      	ldr	r4, [pc, #588]	; (5b30 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x464>)
    58e4:	6860      	ldr	r0, [r4, #4]
    58e6:	3088      	adds	r0, #136	; 0x88
    58e8:	f009 fa96 	bl	ee18 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    58ec:	2800      	cmp	r0, #0
    58ee:	d164      	bne.n	59ba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ee>
    58f0:	6860      	ldr	r0, [r4, #4]
    58f2:	2300      	movs	r3, #0
    58f4:	2101      	movs	r1, #1
    58f6:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
    58fa:	3088      	adds	r0, #136	; 0x88
    58fc:	f008 f8fe 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5900:	2800      	cmp	r0, #0
    5902:	d15a      	bne.n	59ba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ee>
    5904:	6860      	ldr	r0, [r4, #4]
    5906:	f890 1138 	ldrb.w	r1, [r0, #312]	; 0x138
    590a:	f88d 1000 	strb.w	r1, [sp]
    590e:	9900      	ldr	r1, [sp, #0]
    5910:	9100      	str	r1, [sp, #0]
    5912:	f89d 1000 	ldrb.w	r1, [sp]
    5916:	b109      	cbz	r1, 591c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x250>
    5918:	2002      	movs	r0, #2
    591a:	e03c      	b.n	5996 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ca>
    591c:	2500      	movs	r5, #0
    591e:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5922:	462b      	mov	r3, r5
    5924:	4629      	mov	r1, r5
    5926:	3088      	adds	r0, #136	; 0x88
    5928:	f008 f8e8 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    592c:	b128      	cbz	r0, 593a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x26e>
    592e:	6860      	ldr	r0, [r4, #4]
    5930:	f890 00d4 	ldrb.w	r0, [r0, #212]	; 0xd4
    5934:	b108      	cbz	r0, 593a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x26e>
    5936:	2012      	movs	r0, #18
    5938:	e02d      	b.n	5996 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ca>
    593a:	6860      	ldr	r0, [r4, #4]
    593c:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5940:	2a19      	cmp	r2, #25
    5942:	d027      	beq.n	5994 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2c8>
    5944:	dc06      	bgt.n	5954 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x288>
    5946:	2a03      	cmp	r2, #3
    5948:	d029      	beq.n	599e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2d2>
    594a:	2a12      	cmp	r2, #18
    594c:	d01e      	beq.n	598c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2c0>
    594e:	2a13      	cmp	r2, #19
    5950:	d104      	bne.n	595c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x290>
    5952:	e019      	b.n	5988 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2bc>
    5954:	2a24      	cmp	r2, #36	; 0x24
    5956:	d02a      	beq.n	59ae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2e2>
    5958:	2a2f      	cmp	r2, #47	; 0x2f
    595a:	d02f      	beq.n	59bc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2f0>
    595c:	2300      	movs	r3, #0
    595e:	2104      	movs	r1, #4
    5960:	3088      	adds	r0, #136	; 0x88
    5962:	f008 f8cb 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5966:	2800      	cmp	r0, #0
    5968:	d127      	bne.n	59ba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ee>
    596a:	6860      	ldr	r0, [r4, #4]
    596c:	f890 10a6 	ldrb.w	r1, [r0, #166]	; 0xa6
    5970:	291e      	cmp	r1, #30
    5972:	d048      	beq.n	5a06 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x33a>
    5974:	dc29      	bgt.n	59ca <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2fe>
    5976:	2901      	cmp	r1, #1
    5978:	d036      	beq.n	59e8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x31c>
    597a:	2902      	cmp	r1, #2
    597c:	d041      	beq.n	5a02 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x336>
    597e:	2903      	cmp	r1, #3
    5980:	d02c      	beq.n	59dc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x310>
    5982:	2904      	cmp	r1, #4
    5984:	d13c      	bne.n	5a00 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x334>
    5986:	e0b7      	b.n	5af8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x42c>
    5988:	200b      	movs	r0, #11
    598a:	e004      	b.n	5996 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ca>
    598c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5990:	f000 bca2 	b.w	62d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc0c>
    5994:	2006      	movs	r0, #6
    5996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    599a:	f000 bd8b 	b.w	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    599e:	f890 1129 	ldrb.w	r1, [r0, #297]	; 0x129
    59a2:	f880 1130 	strb.w	r1, [r0, #304]	; 0x130
    59a6:	2007      	movs	r0, #7
    59a8:	f000 fd84 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    59ac:	e009      	b.n	59c2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2f6>
    59ae:	2018      	movs	r0, #24
    59b0:	f000 fd80 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    59b4:	6860      	ldr	r0, [r4, #4]
    59b6:	f8a0 50dc 	strh.w	r5, [r0, #220]	; 0xdc
    59ba:	bd38      	pop	{r3, r4, r5, pc}
    59bc:	2001      	movs	r0, #1
    59be:	f000 fd81 	bl	64c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xdf8>
    59c2:	6860      	ldr	r0, [r4, #4]
    59c4:	f880 50a5 	strb.w	r5, [r0, #165]	; 0xa5
    59c8:	bd38      	pop	{r3, r4, r5, pc}
    59ca:	291f      	cmp	r1, #31
    59cc:	d01b      	beq.n	5a06 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x33a>
    59ce:	2922      	cmp	r1, #34	; 0x22
    59d0:	d061      	beq.n	5a96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3ca>
    59d2:	2928      	cmp	r1, #40	; 0x28
    59d4:	d071      	beq.n	5aba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3ee>
    59d6:	292f      	cmp	r1, #47	; 0x2f
    59d8:	d17d      	bne.n	5ad6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    59da:	e089      	b.n	5af0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x424>
    59dc:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    59e0:	f880 1130 	strb.w	r1, [r0, #304]	; 0x130
    59e4:	2007      	movs	r0, #7
    59e6:	e08a      	b.n	5afe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x432>
    59e8:	200c      	movs	r0, #12
    59ea:	f000 fd63 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    59ee:	6860      	ldr	r0, [r4, #4]
    59f0:	f820 5fe2 	strh.w	r5, [r0, #226]!
    59f4:	7941      	ldrb	r1, [r0, #5]
    59f6:	f041 0101 	orr.w	r1, r1, #1
    59fa:	7141      	strb	r1, [r0, #5]
    59fc:	f800 5c3c 	strb.w	r5, [r0, #-60]
    5a00:	e069      	b.n	5ad6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    5a02:	2013      	movs	r0, #19
    5a04:	e039      	b.n	5a7a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3ae>
    5a06:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    5a0a:	f88d 2000 	strb.w	r2, [sp]
    5a0e:	9a00      	ldr	r2, [sp, #0]
    5a10:	9200      	str	r2, [sp, #0]
    5a12:	f89d 2000 	ldrb.w	r2, [sp]
    5a16:	bbba      	cbnz	r2, 5a88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3bc>
    5a18:	f890 213a 	ldrb.w	r2, [r0, #314]	; 0x13a
    5a1c:	f88d 2000 	strb.w	r2, [sp]
    5a20:	9a00      	ldr	r2, [sp, #0]
    5a22:	9200      	str	r2, [sp, #0]
    5a24:	f89d 2000 	ldrb.w	r2, [sp]
    5a28:	b37a      	cbz	r2, 5a8a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3be>
    5a2a:	2925      	cmp	r1, #37	; 0x25
    5a2c:	d031      	beq.n	5a92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3c6>
    5a2e:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    5a32:	2925      	cmp	r1, #37	; 0x25
    5a34:	d02d      	beq.n	5a92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3c6>
    5a36:	2926      	cmp	r1, #38	; 0x26
    5a38:	d02b      	beq.n	5a92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3c6>
    5a3a:	2300      	movs	r3, #0
    5a3c:	f200 2262 	addw	r2, r0, #610	; 0x262
    5a40:	f500 719d 	add.w	r1, r0, #314	; 0x13a
    5a44:	f008 fb95 	bl	e172 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    5a48:	6860      	ldr	r0, [r4, #4]
    5a4a:	211f      	movs	r1, #31
    5a4c:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    5a50:	f880 513a 	strb.w	r5, [r0, #314]	; 0x13a
    5a54:	6860      	ldr	r0, [r4, #4]
    5a56:	f008 fba7 	bl	e1a8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    5a5a:	2104      	movs	r1, #4
    5a5c:	6860      	ldr	r0, [r4, #4]
    5a5e:	f009 f881 	bl	eb64 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    5a62:	f000 f867 	bl	5b34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x468>
    5a66:	6861      	ldr	r1, [r4, #4]
    5a68:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    5a6c:	8bc2      	ldrh	r2, [r0, #30]
    5a6e:	f8a1 2130 	strh.w	r2, [r1, #304]	; 0x130
    5a72:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    5a74:	f8a1 0132 	strh.w	r0, [r1, #306]	; 0x132
    5a78:	2015      	movs	r0, #21
    5a7a:	f000 fd1b 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    5a7e:	6860      	ldr	r0, [r4, #4]
    5a80:	f8a0 50e2 	strh.w	r5, [r0, #226]	; 0xe2
    5a84:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    5a88:	e025      	b.n	5ad6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    5a8a:	e7ff      	b.n	5a8c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3c0>
    5a8c:	291f      	cmp	r1, #31
    5a8e:	d0e1      	beq.n	5a54 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x388>
    5a90:	e021      	b.n	5ad6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    5a92:	2301      	movs	r3, #1
    5a94:	e7d2      	b.n	5a3c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x370>
    5a96:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    5a9a:	2901      	cmp	r1, #1
    5a9c:	d108      	bne.n	5ab0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3e4>
    5a9e:	f890 1145 	ldrb.w	r1, [r0, #325]	; 0x145
    5aa2:	f88d 1000 	strb.w	r1, [sp]
    5aa6:	9900      	ldr	r1, [sp, #0]
    5aa8:	9100      	str	r1, [sp, #0]
    5aaa:	f89d 1000 	ldrb.w	r1, [sp]
    5aae:	b129      	cbz	r1, 5abc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3f0>
    5ab0:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    5ab4:	2902      	cmp	r1, #2
    5ab6:	d006      	beq.n	5ac6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3fa>
    5ab8:	e00d      	b.n	5ad6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    5aba:	e01f      	b.n	5afc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x430>
    5abc:	f8d0 1062 	ldr.w	r1, [r0, #98]	; 0x62
    5ac0:	f8d0 0146 	ldr.w	r0, [r0, #326]	; 0x146
    5ac4:	e002      	b.n	5acc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x400>
    5ac6:	f850 1f62 	ldr.w	r1, [r0, #98]!
    5aca:	6840      	ldr	r0, [r0, #4]
    5acc:	f000 fd04 	bl	64d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe0c>
    5ad0:	2018      	movs	r0, #24
    5ad2:	f000 fcef 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    5ad6:	6860      	ldr	r0, [r4, #4]
    5ad8:	3088      	adds	r0, #136	; 0x88
    5ada:	f009 f99d 	bl	ee18 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5ade:	2800      	cmp	r0, #0
    5ae0:	f47f af72 	bne.w	59c8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2fc>
    5ae4:	6860      	ldr	r0, [r4, #4]
    5ae6:	3088      	adds	r0, #136	; 0x88
    5ae8:	f009 f996 	bl	ee18 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5aec:	b158      	cbz	r0, 5b06 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x43a>
    5aee:	e015      	b.n	5b1c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x450>
    5af0:	2000      	movs	r0, #0
    5af2:	f000 fce7 	bl	64c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xdf8>
    5af6:	e004      	b.n	5b02 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x436>
    5af8:	2009      	movs	r0, #9
    5afa:	e000      	b.n	5afe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x432>
    5afc:	2024      	movs	r0, #36	; 0x24
    5afe:	f000 fcd9 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    5b02:	6860      	ldr	r0, [r4, #4]
    5b04:	e7be      	b.n	5a84 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3b8>
    5b06:	6860      	ldr	r0, [r4, #4]
    5b08:	2300      	movs	r3, #0
    5b0a:	4619      	mov	r1, r3
    5b0c:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5b10:	3088      	adds	r0, #136	; 0x88
    5b12:	f007 fff3 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5b16:	b108      	cbz	r0, 5b1c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x450>
    5b18:	f000 fb14 	bl	6144 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa78>
    5b1c:	6860      	ldr	r0, [r4, #4]
    5b1e:	3088      	adds	r0, #136	; 0x88
    5b20:	f009 f97a 	bl	ee18 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5b24:	2800      	cmp	r0, #0
    5b26:	d1db      	bne.n	5ae0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x414>
    5b28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5b2c:	f7ff be64 	b.w	57f8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12c>
    5b30:	200000f0 	.word	0x200000f0
    5b34:	4808      	ldr	r0, [pc, #32]	; (5b58 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x48c>)
    5b36:	6843      	ldr	r3, [r0, #4]
    5b38:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
    5b3c:	2801      	cmp	r0, #1
    5b3e:	d006      	beq.n	5b4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x482>
    5b40:	f503 72b5 	add.w	r2, r3, #362	; 0x16a
    5b44:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    5b48:	8818      	ldrh	r0, [r3, #0]
    5b4a:	f7fd b893 	b.w	2c74 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    5b4e:	2002      	movs	r0, #2
    5b50:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
    5b54:	4770      	bx	lr
    5b56:	0000      	.short	0x0000
    5b58:	200000f0 	.word	0x200000f0
    5b5c:	b538      	push	{r3, r4, r5, lr}
    5b5e:	4d1a      	ldr	r5, [pc, #104]	; (5bc8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4fc>)
    5b60:	686b      	ldr	r3, [r5, #4]
    5b62:	f893 10a5 	ldrb.w	r1, [r3, #165]	; 0xa5
    5b66:	2917      	cmp	r1, #23
    5b68:	d001      	beq.n	5b6e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4a2>
    5b6a:	2914      	cmp	r1, #20
    5b6c:	d102      	bne.n	5b74 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4a8>
    5b6e:	f893 10e6 	ldrb.w	r1, [r3, #230]	; 0xe6
    5b72:	b109      	cbz	r1, 5b78 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4ac>
    5b74:	2002      	movs	r0, #2
    5b76:	bd38      	pop	{r3, r4, r5, pc}
    5b78:	2400      	movs	r4, #0
    5b7a:	f883 40e5 	strb.w	r4, [r3, #229]	; 0xe5
    5b7e:	f883 40e0 	strb.w	r4, [r3, #224]	; 0xe0
    5b82:	f893 121a 	ldrb.w	r1, [r3, #538]	; 0x21a
    5b86:	f88d 1000 	strb.w	r1, [sp]
    5b8a:	9900      	ldr	r1, [sp, #0]
    5b8c:	9100      	str	r1, [sp, #0]
    5b8e:	f89d 1000 	ldrb.w	r1, [sp]
    5b92:	b121      	cbz	r1, 5b9e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4d2>
    5b94:	f240 31df 	movw	r1, #991	; 0x3df
    5b98:	2036      	movs	r0, #54	; 0x36
    5b9a:	f7fa ff63 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b9e:	8819      	ldrh	r1, [r3, #0]
    5ba0:	f8a3 121e 	strh.w	r1, [r3, #542]	; 0x21e
    5ba4:	f883 021c 	strb.w	r0, [r3, #540]	; 0x21c
    5ba8:	f883 4220 	strb.w	r4, [r3, #544]	; 0x220
    5bac:	f883 4278 	strb.w	r4, [r3, #632]	; 0x278
    5bb0:	f203 2012 	addw	r0, r3, #530	; 0x212
    5bb4:	220c      	movs	r2, #12
    5bb6:	4905      	ldr	r1, [pc, #20]	; (5bcc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x500>)
    5bb8:	f008 fab1 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5bbc:	6868      	ldr	r0, [r5, #4]
    5bbe:	f880 40a5 	strb.w	r4, [r0, #165]	; 0xa5
    5bc2:	2000      	movs	r0, #0
    5bc4:	bd38      	pop	{r3, r4, r5, pc}
    5bc6:	0000      	.short	0x0000
    5bc8:	200000f0 	.word	0x200000f0
    5bcc:	0000e5a1 	.word	0x0000e5a1
    5bd0:	b570      	push	{r4, r5, r6, lr}
    5bd2:	4604      	mov	r4, r0
    5bd4:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    5bd8:	2500      	movs	r5, #0
    5bda:	280b      	cmp	r0, #11
    5bdc:	d001      	beq.n	5be2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x516>
    5bde:	280c      	cmp	r0, #12
    5be0:	d108      	bne.n	5bf4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x528>
    5be2:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
    5be6:	f8b4 225e 	ldrh.w	r2, [r4, #606]	; 0x25e
    5bea:	1a89      	subs	r1, r1, r2
    5bec:	1c49      	adds	r1, r1, #1
    5bee:	0409      	lsls	r1, r1, #16
    5bf0:	0c09      	lsrs	r1, r1, #16
    5bf2:	d032      	beq.n	5c5a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x58e>
    5bf4:	280d      	cmp	r0, #13
    5bf6:	d001      	beq.n	5bfc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x530>
    5bf8:	280e      	cmp	r0, #14
    5bfa:	d12d      	bne.n	5c58 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x58c>
    5bfc:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    5c00:	f8b4 1266 	ldrh.w	r1, [r4, #614]	; 0x266
    5c04:	1a40      	subs	r0, r0, r1
    5c06:	1c40      	adds	r0, r0, #1
    5c08:	0400      	lsls	r0, r0, #16
    5c0a:	0c00      	lsrs	r0, r0, #16
    5c0c:	d124      	bne.n	5c58 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x58c>
    5c0e:	8820      	ldrh	r0, [r4, #0]
    5c10:	f8a4 01d2 	strh.w	r0, [r4, #466]	; 0x1d2
    5c14:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
    5c18:	f007 ff57 	bl	daca <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    5c1c:	f8a4 01d4 	strh.w	r0, [r4, #468]	; 0x1d4
    5c20:	f8b4 0274 	ldrh.w	r0, [r4, #628]	; 0x274
    5c24:	f8a4 01d6 	strh.w	r0, [r4, #470]	; 0x1d6
    5c28:	f8b4 0276 	ldrh.w	r0, [r4, #630]	; 0x276
    5c2c:	f8a4 01d8 	strh.w	r0, [r4, #472]	; 0x1d8
    5c30:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
    5c34:	2209      	movs	r2, #9
    5c36:	4919      	ldr	r1, [pc, #100]	; (5c9c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5d0>)
    5c38:	f504 70e3 	add.w	r0, r4, #454	; 0x1c6
    5c3c:	f008 fa83 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    5c40:	f884 5264 	strb.w	r5, [r4, #612]	; 0x264
    5c44:	2102      	movs	r1, #2
    5c46:	4620      	mov	r0, r4
    5c48:	f7fc fc86 	bl	2558 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    5c4c:	2103      	movs	r1, #3
    5c4e:	4620      	mov	r0, r4
    5c50:	f008 ff88 	bl	eb64 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    5c54:	f884 50a5 	strb.w	r5, [r4, #165]	; 0xa5
    5c58:	bd70      	pop	{r4, r5, r6, pc}
    5c5a:	f8d4 0258 	ldr.w	r0, [r4, #600]	; 0x258
    5c5e:	f8d0 1001 	ldr.w	r1, [r0, #1]
    5c62:	f8c4 10ae 	str.w	r1, [r4, #174]	; 0xae
    5c66:	7940      	ldrb	r0, [r0, #5]
    5c68:	f884 00b2 	strb.w	r0, [r4, #178]	; 0xb2
    5c6c:	2103      	movs	r1, #3
    5c6e:	4620      	mov	r0, r4
    5c70:	f7fc fc72 	bl	2558 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    5c74:	f8d4 0258 	ldr.w	r0, [r4, #600]	; 0x258
    5c78:	7800      	ldrb	r0, [r0, #0]
    5c7a:	b148      	cbz	r0, 5c90 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5c4>
    5c7c:	2101      	movs	r1, #1
    5c7e:	20fe      	movs	r0, #254	; 0xfe
    5c80:	f001 f858 	bl	6d34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1668>
    5c84:	f884 50a5 	strb.w	r5, [r4, #165]	; 0xa5
    5c88:	20ff      	movs	r0, #255	; 0xff
    5c8a:	f884 00fe 	strb.w	r0, [r4, #254]	; 0xfe
    5c8e:	bd70      	pop	{r4, r5, r6, pc}
    5c90:	f240 2152 	movw	r1, #594	; 0x252
    5c94:	2036      	movs	r0, #54	; 0x36
    5c96:	f7fa fee5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c9a:	0000      	.short	0x0000
    5c9c:	0000e563 	.word	0x0000e563
    5ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ca2:	4d28      	ldr	r5, [pc, #160]	; (5d44 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x678>)
    5ca4:	f04f 0600 	mov.w	r6, #0
    5ca8:	f105 040c 	add.w	r4, r5, #12
    5cac:	8869      	ldrh	r1, [r5, #2]
    5cae:	0748      	lsls	r0, r1, #29
    5cb0:	d510      	bpl.n	5cd4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x608>
    5cb2:	6860      	ldr	r0, [r4, #4]
    5cb4:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5cb8:	2a03      	cmp	r2, #3
    5cba:	d004      	beq.n	5cc6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5fa>
    5cbc:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
    5cc0:	2a06      	cmp	r2, #6
    5cc2:	d107      	bne.n	5cd4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x608>
    5cc4:	e002      	b.n	5ccc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x600>
    5cc6:	f240 7109 	movw	r1, #1801	; 0x709
    5cca:	e025      	b.n	5d18 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x64c>
    5ccc:	2201      	movs	r2, #1
    5cce:	702a      	strb	r2, [r5, #0]
    5cd0:	f880 60a7 	strb.w	r6, [r0, #167]	; 0xa7
    5cd4:	0788      	lsls	r0, r1, #30
    5cd6:	d50a      	bpl.n	5cee <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x622>
    5cd8:	6868      	ldr	r0, [r5, #4]
    5cda:	78c0      	ldrb	r0, [r0, #3]
    5cdc:	282b      	cmp	r0, #43	; 0x2b
    5cde:	d219      	bcs.n	5d14 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x648>
    5ce0:	4919      	ldr	r1, [pc, #100]	; (5d48 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x67c>)
    5ce2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    5ce6:	b1a9      	cbz	r1, 5d14 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x648>
    5ce8:	4816      	ldr	r0, [pc, #88]	; (5d44 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x678>)
    5cea:	300c      	adds	r0, #12
    5cec:	4788      	blx	r1
    5cee:	f000 f86d 	bl	5dcc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x700>
    5cf2:	f000 f82b 	bl	5d4c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x680>
    5cf6:	4607      	mov	r7, r0
    5cf8:	7868      	ldrb	r0, [r5, #1]
    5cfa:	0700      	lsls	r0, r0, #28
    5cfc:	d51c      	bpl.n	5d38 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x66c>
    5cfe:	6860      	ldr	r0, [r4, #4]
    5d00:	2300      	movs	r3, #0
    5d02:	2105      	movs	r1, #5
    5d04:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5d08:	3088      	adds	r0, #136	; 0x88
    5d0a:	f007 fef7 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5d0e:	b130      	cbz	r0, 5d1e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x652>
    5d10:	2708      	movs	r7, #8
    5d12:	e011      	b.n	5d38 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x66c>
    5d14:	f640 0149 	movw	r1, #2121	; 0x849
    5d18:	2036      	movs	r0, #54	; 0x36
    5d1a:	f7fa fea3 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d1e:	4669      	mov	r1, sp
    5d20:	2003      	movs	r0, #3
    5d22:	9600      	str	r6, [sp, #0]
    5d24:	f7fb fdb2 	bl	188c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5d28:	9800      	ldr	r0, [sp, #0]
    5d2a:	b128      	cbz	r0, 5d38 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x66c>
    5d2c:	7206      	strb	r6, [r0, #8]
    5d2e:	222a      	movs	r2, #42	; 0x2a
    5d30:	6861      	ldr	r1, [r4, #4]
    5d32:	9800      	ldr	r0, [sp, #0]
    5d34:	f008 f9f3 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5d38:	6860      	ldr	r0, [r4, #4]
    5d3a:	f7ff ff49 	bl	5bd0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x504>
    5d3e:	4638      	mov	r0, r7
    5d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5d42:	0000      	.short	0x0000
    5d44:	200000e4 	.word	0x200000e4
    5d48:	200001a4 	.word	0x200001a4
    5d4c:	b570      	push	{r4, r5, r6, lr}
    5d4e:	4c1d      	ldr	r4, [pc, #116]	; (5dc4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6f8>)
    5d50:	2000      	movs	r0, #0
    5d52:	78a1      	ldrb	r1, [r4, #2]
    5d54:	07c9      	lsls	r1, r1, #31
    5d56:	d01d      	beq.n	5d94 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6c8>
    5d58:	68a0      	ldr	r0, [r4, #8]
    5d5a:	2300      	movs	r3, #0
    5d5c:	2105      	movs	r1, #5
    5d5e:	78c5      	ldrb	r5, [r0, #3]
    5d60:	f104 000c 	add.w	r0, r4, #12
    5d64:	6840      	ldr	r0, [r0, #4]
    5d66:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5d6a:	3088      	adds	r0, #136	; 0x88
    5d6c:	f007 fec6 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5d70:	b188      	cbz	r0, 5d96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5d72:	2d06      	cmp	r5, #6
    5d74:	d00f      	beq.n	5d96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5d76:	dc06      	bgt.n	5d86 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ba>
    5d78:	2d02      	cmp	r5, #2
    5d7a:	d00c      	beq.n	5d96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5d7c:	2d04      	cmp	r5, #4
    5d7e:	d00a      	beq.n	5d96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5d80:	2d05      	cmp	r5, #5
    5d82:	d106      	bne.n	5d92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6c6>
    5d84:	e007      	b.n	5d96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5d86:	2d0b      	cmp	r5, #11
    5d88:	d005      	beq.n	5d96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5d8a:	2d0d      	cmp	r5, #13
    5d8c:	d003      	beq.n	5d96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5d8e:	2d11      	cmp	r5, #17
    5d90:	d001      	beq.n	5d96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5d92:	2008      	movs	r0, #8
    5d94:	bd70      	pop	{r4, r5, r6, pc}
    5d96:	68a0      	ldr	r0, [r4, #8]
    5d98:	f7fc fd16 	bl	27c8 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>
    5d9c:	b160      	cbz	r0, 5db8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ec>
    5d9e:	68a0      	ldr	r0, [r4, #8]
    5da0:	78c0      	ldrb	r0, [r0, #3]
    5da2:	282b      	cmp	r0, #43	; 0x2b
    5da4:	d208      	bcs.n	5db8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ec>
    5da6:	4908      	ldr	r1, [pc, #32]	; (5dc8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6fc>)
    5da8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    5dac:	b121      	cbz	r1, 5db8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ec>
    5dae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5db2:	4804      	ldr	r0, [pc, #16]	; (5dc4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6f8>)
    5db4:	300c      	adds	r0, #12
    5db6:	4708      	bx	r1
    5db8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5dbc:	2000      	movs	r0, #0
    5dbe:	f000 bbdf 	b.w	6580 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb4>
    5dc2:	0000      	.short	0x0000
    5dc4:	200000e4 	.word	0x200000e4
    5dc8:	200000f8 	.word	0x200000f8
    5dcc:	b570      	push	{r4, r5, r6, lr}
    5dce:	4d1a      	ldr	r5, [pc, #104]	; (5e38 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x76c>)
    5dd0:	78a8      	ldrb	r0, [r5, #2]
    5dd2:	0700      	lsls	r0, r0, #28
    5dd4:	d52e      	bpl.n	5e34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x768>
    5dd6:	f105 040c 	add.w	r4, r5, #12
    5dda:	2100      	movs	r1, #0
    5ddc:	6860      	ldr	r0, [r4, #4]
    5dde:	f890 012e 	ldrb.w	r0, [r0, #302]	; 0x12e
    5de2:	f000 ffa7 	bl	6d34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1668>
    5de6:	6860      	ldr	r0, [r4, #4]
    5de8:	3088      	adds	r0, #136	; 0x88
    5dea:	f009 f815 	bl	ee18 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5dee:	b160      	cbz	r0, 5e0a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x73e>
    5df0:	6860      	ldr	r0, [r4, #4]
    5df2:	21fe      	movs	r1, #254	; 0xfe
    5df4:	f880 112e 	strb.w	r1, [r0, #302]	; 0x12e
    5df8:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    5dfc:	290b      	cmp	r1, #11
    5dfe:	d009      	beq.n	5e14 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x748>
    5e00:	290d      	cmp	r1, #13
    5e02:	d009      	beq.n	5e18 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x74c>
    5e04:	2925      	cmp	r1, #37	; 0x25
    5e06:	d10c      	bne.n	5e22 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x756>
    5e08:	e008      	b.n	5e1c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x750>
    5e0a:	f640 0155 	movw	r1, #2133	; 0x855
    5e0e:	2036      	movs	r0, #54	; 0x36
    5e10:	f7fa fe28 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e14:	210c      	movs	r1, #12
    5e16:	e002      	b.n	5e1e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x752>
    5e18:	210e      	movs	r1, #14
    5e1a:	e000      	b.n	5e1e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x752>
    5e1c:	2126      	movs	r1, #38	; 0x26
    5e1e:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    5e22:	f890 10a7 	ldrb.w	r1, [r0, #167]	; 0xa7
    5e26:	2907      	cmp	r1, #7
    5e28:	d104      	bne.n	5e34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x768>
    5e2a:	2102      	movs	r1, #2
    5e2c:	7029      	strb	r1, [r5, #0]
    5e2e:	2100      	movs	r1, #0
    5e30:	f880 10a7 	strb.w	r1, [r0, #167]	; 0xa7
    5e34:	bd70      	pop	{r4, r5, r6, pc}
    5e36:	0000      	.short	0x0000
    5e38:	200000e4 	.word	0x200000e4
    5e3c:	b538      	push	{r3, r4, r5, lr}
    5e3e:	4605      	mov	r5, r0
    5e40:	4668      	mov	r0, sp
    5e42:	f7fb fbb5 	bl	15b0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    5e46:	b348      	cbz	r0, 5e9c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x7d0>
    5e48:	2222      	movs	r2, #34	; 0x22
    5e4a:	2100      	movs	r1, #0
    5e4c:	9800      	ldr	r0, [sp, #0]
    5e4e:	f00a fc88 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5e52:	2103      	movs	r1, #3
    5e54:	9800      	ldr	r0, [sp, #0]
    5e56:	f008 f92f 	bl	e0b8 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    5e5a:	9800      	ldr	r0, [sp, #0]
    5e5c:	7801      	ldrb	r1, [r0, #0]
    5e5e:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    5e62:	7001      	strb	r1, [r0, #0]
    5e64:	4629      	mov	r1, r5
    5e66:	f7fc fcbf 	bl	27e8 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>
    5e6a:	2100      	movs	r1, #0
    5e6c:	4c73      	ldr	r4, [pc, #460]	; (603c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x970>)
    5e6e:	2d26      	cmp	r5, #38	; 0x26
    5e70:	d277      	bcs.n	5f62 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x896>
    5e72:	e8df f005 	tbb	[pc, r5]
    5e76:	222a      	.short	0x222a
    5e78:	dbdb5216 	.word	0xdbdb5216
    5e7c:	7b771cd4 	.word	0x7b771cd4
    5e80:	db6bd4d4 	.word	0xdb6bd4d4
    5e84:	bcdbdbdb 	.word	0xbcdbdbdb
    5e88:	8080d4d4 	.word	0x8080d4d4
    5e8c:	dba3db99 	.word	0xdba3db99
    5e90:	dbdbdbdb 	.word	0xdbdbdbdb
    5e94:	dbdbdbdb 	.word	0xdbdbdbdb
    5e98:	b6b6b6db 	.word	0xb6b6b6db
    5e9c:	f640 217b 	movw	r1, #2683	; 0xa7b
    5ea0:	e0c9      	b.n	6036 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x96a>
    5ea2:	6860      	ldr	r0, [r4, #4]
    5ea4:	9900      	ldr	r1, [sp, #0]
    5ea6:	f890 0139 	ldrb.w	r0, [r0, #313]	; 0x139
    5eaa:	7108      	strb	r0, [r1, #4]
    5eac:	e0b7      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5eae:	6861      	ldr	r1, [r4, #4]
    5eb0:	9800      	ldr	r0, [sp, #0]
    5eb2:	f891 1130 	ldrb.w	r1, [r1, #304]	; 0x130
    5eb6:	7101      	strb	r1, [r0, #4]
    5eb8:	e0b1      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5eba:	6860      	ldr	r0, [r4, #4]
    5ebc:	f8d0 1258 	ldr.w	r1, [r0, #600]	; 0x258
    5ec0:	9800      	ldr	r0, [sp, #0]
    5ec2:	1c49      	adds	r1, r1, #1
    5ec4:	f008 f889 	bl	dfda <sym_UODFQA44OAUGQWVRPEK2IIKSCIFD37IIPLUYFSI>
    5ec8:	e0a9      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5eca:	6860      	ldr	r0, [r4, #4]
    5ecc:	9d00      	ldr	r5, [sp, #0]
    5ece:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
    5ed2:	f8b0 0268 	ldrh.w	r0, [r0, #616]	; 0x268
    5ed6:	f007 ff7f 	bl	ddd8 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    5eda:	7128      	strb	r0, [r5, #4]
    5edc:	6860      	ldr	r0, [r4, #4]
    5ede:	9d00      	ldr	r5, [sp, #0]
    5ee0:	f500 701b 	add.w	r0, r0, #620	; 0x26c
    5ee4:	c803      	ldmia	r0, {r0, r1}
    5ee6:	f007 ff60 	bl	ddaa <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    5eea:	7168      	strb	r0, [r5, #5]
    5eec:	0a00      	lsrs	r0, r0, #8
    5eee:	71a8      	strb	r0, [r5, #6]
    5ef0:	6860      	ldr	r0, [r4, #4]
    5ef2:	9d00      	ldr	r5, [sp, #0]
    5ef4:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
    5ef8:	f007 fde7 	bl	daca <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    5efc:	71e8      	strb	r0, [r5, #7]
    5efe:	0a00      	lsrs	r0, r0, #8
    5f00:	7228      	strb	r0, [r5, #8]
    5f02:	6862      	ldr	r2, [r4, #4]
    5f04:	9800      	ldr	r0, [sp, #0]
    5f06:	f8b2 1274 	ldrh.w	r1, [r2, #628]	; 0x274
    5f0a:	7241      	strb	r1, [r0, #9]
    5f0c:	0a09      	lsrs	r1, r1, #8
    5f0e:	7281      	strb	r1, [r0, #10]
    5f10:	f8b2 1276 	ldrh.w	r1, [r2, #630]	; 0x276
    5f14:	f008 f866 	bl	dfe4 <sym_ZZDNF2NNUMTRE4Y6NUTK3CJU3EQI64HKYHSTDAI>
    5f18:	e081      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5f1a:	6861      	ldr	r1, [r4, #4]
    5f1c:	9800      	ldr	r0, [sp, #0]
    5f1e:	f201 2179 	addw	r1, r1, #633	; 0x279
    5f22:	f008 f874 	bl	e00e <sym_NSDJKDRKPUUB5EAI3OMDTFOWZBLYJSPI3VQSNXQ>
    5f26:	6861      	ldr	r1, [r4, #4]
    5f28:	9800      	ldr	r0, [sp, #0]
    5f2a:	f201 2181 	addw	r1, r1, #641	; 0x281
    5f2e:	f008 f867 	bl	e000 <sym_ZLXXGUFNBKYTUHSDKKKU4A6O7RMXODI4OQA6IUY>
    5f32:	6861      	ldr	r1, [r4, #4]
    5f34:	9800      	ldr	r0, [sp, #0]
    5f36:	f201 2193 	addw	r1, r1, #659	; 0x293
    5f3a:	f008 f86d 	bl	e018 <sym_LPOR4PC6XUIXDNEKJLY3JL3BKNV2UZG2OR7FAKQ>
    5f3e:	6861      	ldr	r1, [r4, #4]
    5f40:	9800      	ldr	r0, [sp, #0]
    5f42:	f501 7190 	add.w	r1, r1, #288	; 0x120
    5f46:	f008 f85e 	bl	e006 <sym_3LF2RG2XP7QRT5FAEZFOPL4L5RIBP3MCQ5PY7XY>
    5f4a:	e068      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5f4c:	9800      	ldr	r0, [sp, #0]
    5f4e:	220c      	movs	r2, #12
    5f50:	7102      	strb	r2, [r0, #4]
    5f52:	2259      	movs	r2, #89	; 0x59
    5f54:	7142      	strb	r2, [r0, #5]
    5f56:	7181      	strb	r1, [r0, #6]
    5f58:	214b      	movs	r1, #75	; 0x4b
    5f5a:	71c1      	strb	r1, [r0, #7]
    5f5c:	2112      	movs	r1, #18
    5f5e:	7201      	strb	r1, [r0, #8]
    5f60:	e05d      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5f62:	e063      	b.n	602c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x960>
    5f64:	9800      	ldr	r0, [sp, #0]
    5f66:	f7fc ff73 	bl	2e50 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>
    5f6a:	e058      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5f6c:	4833      	ldr	r0, [pc, #204]	; (603c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x970>)
    5f6e:	9900      	ldr	r1, [sp, #0]
    5f70:	f7fc ffc2 	bl	2ef8 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>
    5f74:	e053      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5f76:	6860      	ldr	r0, [r4, #4]
    5f78:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    5f7c:	9800      	ldr	r0, [sp, #0]
    5f7e:	f008 f8ab 	bl	e0d8 <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>
    5f82:	6860      	ldr	r0, [r4, #4]
    5f84:	f8b0 1130 	ldrh.w	r1, [r0, #304]	; 0x130
    5f88:	9800      	ldr	r0, [sp, #0]
    5f8a:	f008 f8a9 	bl	e0e0 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>
    5f8e:	6860      	ldr	r0, [r4, #4]
    5f90:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    5f94:	9800      	ldr	r0, [sp, #0]
    5f96:	f008 f897 	bl	e0c8 <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>
    5f9a:	6860      	ldr	r0, [r4, #4]
    5f9c:	f8b0 1132 	ldrh.w	r1, [r0, #306]	; 0x132
    5fa0:	9800      	ldr	r0, [sp, #0]
    5fa2:	f008 f895 	bl	e0d0 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>
    5fa6:	e03a      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5fa8:	6861      	ldr	r1, [r4, #4]
    5faa:	9800      	ldr	r0, [sp, #0]
    5fac:	f891 1146 	ldrb.w	r1, [r1, #326]	; 0x146
    5fb0:	7101      	strb	r1, [r0, #4]
    5fb2:	6861      	ldr	r1, [r4, #4]
    5fb4:	f891 1147 	ldrb.w	r1, [r1, #327]	; 0x147
    5fb8:	7141      	strb	r1, [r0, #5]
    5fba:	e030      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5fbc:	6860      	ldr	r0, [r4, #4]
    5fbe:	f890 0263 	ldrb.w	r0, [r0, #611]	; 0x263
    5fc2:	f007 fe50 	bl	dc66 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    5fc6:	4601      	mov	r1, r0
    5fc8:	9800      	ldr	r0, [sp, #0]
    5fca:	f008 f861 	bl	e090 <sym_SG4OPFPHWHCVU6FHRG2ZQ5GV7RHUGBHEKN6N55A>
    5fce:	6860      	ldr	r0, [r4, #4]
    5fd0:	f890 0262 	ldrb.w	r0, [r0, #610]	; 0x262
    5fd4:	f007 fe47 	bl	dc66 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    5fd8:	4601      	mov	r1, r0
    5fda:	9800      	ldr	r0, [sp, #0]
    5fdc:	f008 f856 	bl	e08c <sym_SAWOREXGWRJNX5IOUMHBRACZ6DWRXOAHPPFX4TA>
    5fe0:	e01d      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5fe2:	4a16      	ldr	r2, [pc, #88]	; (603c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x970>)
    5fe4:	4628      	mov	r0, r5
    5fe6:	9900      	ldr	r1, [sp, #0]
    5fe8:	f009 f947 	bl	f27a <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>
    5fec:	e017      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5fee:	6860      	ldr	r0, [r4, #4]
    5ff0:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    5ff4:	b141      	cbz	r1, 6008 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x93c>
    5ff6:	f890 112d 	ldrb.w	r1, [r0, #301]	; 0x12d
    5ffa:	9800      	ldr	r0, [sp, #0]
    5ffc:	f008 f856 	bl	e0ac <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    6000:	6860      	ldr	r0, [r4, #4]
    6002:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    6006:	e007      	b.n	6018 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x94c>
    6008:	f890 112b 	ldrb.w	r1, [r0, #299]	; 0x12b
    600c:	9800      	ldr	r0, [sp, #0]
    600e:	f008 f84d 	bl	e0ac <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    6012:	6860      	ldr	r0, [r4, #4]
    6014:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
    6018:	9800      	ldr	r0, [sp, #0]
    601a:	f008 f84b 	bl	e0b4 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>
    601e:	f7fb faa1 	bl	1564 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    6022:	b130      	cbz	r0, 6032 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x966>
    6024:	9800      	ldr	r0, [sp, #0]
    6026:	f7ff fbcd 	bl	57c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8>
    602a:	bd38      	pop	{r3, r4, r5, pc}
    602c:	f640 314e 	movw	r1, #2894	; 0xb4e
    6030:	e001      	b.n	6036 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x96a>
    6032:	f640 3154 	movw	r1, #2900	; 0xb54
    6036:	2036      	movs	r0, #54	; 0x36
    6038:	f7fa fd14 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    603c:	200000f0 	.word	0x200000f0
    6040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6044:	4e28      	ldr	r6, [pc, #160]	; (60e8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa1c>)
    6046:	4680      	mov	r8, r0
    6048:	460d      	mov	r5, r1
    604a:	8870      	ldrh	r0, [r6, #2]
    604c:	f106 040c 	add.w	r4, r6, #12
    6050:	05c1      	lsls	r1, r0, #23
    6052:	6860      	ldr	r0, [r4, #4]
    6054:	f04f 0700 	mov.w	r7, #0
    6058:	d502      	bpl.n	6060 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x994>
    605a:	f8a0 70d6 	strh.w	r7, [r0, #214]	; 0xd6
    605e:	e004      	b.n	606a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x99e>
    6060:	f8b0 10d6 	ldrh.w	r1, [r0, #214]	; 0xd6
    6064:	1c49      	adds	r1, r1, #1
    6066:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
    606a:	f009 f8cb 	bl	f204 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x408>
    606e:	b1f0      	cbz	r0, 60ae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9e2>
    6070:	8870      	ldrh	r0, [r6, #2]
    6072:	0500      	lsls	r0, r0, #20
    6074:	d506      	bpl.n	6084 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9b8>
    6076:	6860      	ldr	r0, [r4, #4]
    6078:	f890 10ab 	ldrb.w	r1, [r0, #171]	; 0xab
    607c:	b111      	cbz	r1, 6084 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9b8>
    607e:	f8c0 70c8 	str.w	r7, [r0, #200]	; 0xc8
    6082:	e014      	b.n	60ae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9e2>
    6084:	6860      	ldr	r0, [r4, #4]
    6086:	f8d0 10c8 	ldr.w	r1, [r0, #200]	; 0xc8
    608a:	1c49      	adds	r1, r1, #1
    608c:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
    6090:	f008 fee3 	bl	ee5a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    6094:	6860      	ldr	r0, [r4, #4]
    6096:	e9d0 1232 	ldrd	r1, r2, [r0, #200]	; 0xc8
    609a:	4291      	cmp	r1, r2
    609c:	d307      	bcc.n	60ae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9e2>
    609e:	f8c0 70c8 	str.w	r7, [r0, #200]	; 0xc8
    60a2:	220f      	movs	r2, #15
    60a4:	4911      	ldr	r1, [pc, #68]	; (60ec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa20>)
    60a6:	f500 70b0 	add.w	r0, r0, #352	; 0x160
    60aa:	f008 f84c 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    60ae:	8870      	ldrh	r0, [r6, #2]
    60b0:	f410 7f40 	tst.w	r0, #768	; 0x300
    60b4:	d008      	beq.n	60c8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9fc>
    60b6:	6860      	ldr	r0, [r4, #4]
    60b8:	f890 10a9 	ldrb.w	r1, [r0, #169]	; 0xa9
    60bc:	b921      	cbnz	r1, 60c8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9fc>
    60be:	2101      	movs	r1, #1
    60c0:	f880 10a9 	strb.w	r1, [r0, #169]	; 0xa9
    60c4:	f008 fd4e 	bl	eb64 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    60c8:	ea58 0005 	orrs.w	r0, r8, r5
    60cc:	d104      	bne.n	60d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa0c>
    60ce:	f7ff fde7 	bl	5ca0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5d4>
    60d2:	4605      	mov	r5, r0
    60d4:	f7ff fc04 	bl	58e0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x214>
    60d8:	4629      	mov	r1, r5
    60da:	4640      	mov	r0, r8
    60dc:	f000 fd36 	bl	6b4c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1480>
    60e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    60e4:	f7fb ba28 	b.w	1538 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    60e8:	200000e4 	.word	0x200000e4
    60ec:	0000e63d 	.word	0x0000e63d
    60f0:	4813      	ldr	r0, [pc, #76]	; (6140 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa74>)
    60f2:	6840      	ldr	r0, [r0, #4]
    60f4:	f890 10e0 	ldrb.w	r1, [r0, #224]	; 0xe0
    60f8:	b129      	cbz	r1, 6106 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa3a>
    60fa:	f8b0 10dc 	ldrh.w	r1, [r0, #220]	; 0xdc
    60fe:	f8b0 20de 	ldrh.w	r2, [r0, #222]	; 0xde
    6102:	4291      	cmp	r1, r2
    6104:	d215      	bcs.n	6132 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa66>
    6106:	f890 10e4 	ldrb.w	r1, [r0, #228]	; 0xe4
    610a:	b129      	cbz	r1, 6118 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa4c>
    610c:	f8b0 10e2 	ldrh.w	r1, [r0, #226]	; 0xe2
    6110:	f8b0 20de 	ldrh.w	r2, [r0, #222]	; 0xde
    6114:	4291      	cmp	r1, r2
    6116:	d20c      	bcs.n	6132 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa66>
    6118:	f8b0 20da 	ldrh.w	r2, [r0, #218]	; 0xda
    611c:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    6120:	428a      	cmp	r2, r1
    6122:	d206      	bcs.n	6132 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa66>
    6124:	f890 20a9 	ldrb.w	r2, [r0, #169]	; 0xa9
    6128:	f8b0 00d6 	ldrh.w	r0, [r0, #214]	; 0xd6
    612c:	b11a      	cbz	r2, 6136 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa6a>
    612e:	4288      	cmp	r0, r1
    6130:	d303      	bcc.n	613a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa6e>
    6132:	2001      	movs	r0, #1
    6134:	4770      	bx	lr
    6136:	2806      	cmp	r0, #6
    6138:	d2fb      	bcs.n	6132 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa66>
    613a:	2000      	movs	r0, #0
    613c:	4770      	bx	lr
    613e:	0000      	.short	0x0000
    6140:	200000f0 	.word	0x200000f0
    6144:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    6146:	4c63      	ldr	r4, [pc, #396]	; (62d4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc08>)
    6148:	6860      	ldr	r0, [r4, #4]
    614a:	f890 1264 	ldrb.w	r1, [r0, #612]	; 0x264
    614e:	f88d 1000 	strb.w	r1, [sp]
    6152:	9900      	ldr	r1, [sp, #0]
    6154:	9100      	str	r1, [sp, #0]
    6156:	f89d 1000 	ldrb.w	r1, [sp]
    615a:	2500      	movs	r5, #0
    615c:	b129      	cbz	r1, 616a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa9e>
    615e:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    6162:	f007 fd2e 	bl	dbc2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    6166:	2800      	cmp	r0, #0
    6168:	d07d      	beq.n	6266 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    616a:	6860      	ldr	r0, [r4, #4]
    616c:	f890 1278 	ldrb.w	r1, [r0, #632]	; 0x278
    6170:	b181      	cbz	r1, 6194 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xac8>
    6172:	f890 10aa 	ldrb.w	r1, [r0, #170]	; 0xaa
    6176:	b149      	cbz	r1, 618c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xac0>
    6178:	f890 00ab 	ldrb.w	r0, [r0, #171]	; 0xab
    617c:	b108      	cbz	r0, 6182 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xab6>
    617e:	200a      	movs	r0, #10
    6180:	e071      	b.n	6266 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    6182:	f640 01dc 	movw	r1, #2268	; 0x8dc
    6186:	2036      	movs	r0, #54	; 0x36
    6188:	f7fa fc6c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    618c:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    6190:	f000 b8a2 	b.w	62d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc0c>
    6194:	f890 114b 	ldrb.w	r1, [r0, #331]	; 0x14b
    6198:	b109      	cbz	r1, 619e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xad2>
    619a:	2008      	movs	r0, #8
    619c:	e063      	b.n	6266 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    619e:	f890 114a 	ldrb.w	r1, [r0, #330]	; 0x14a
    61a2:	b179      	cbz	r1, 61c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaf8>
    61a4:	f890 00e7 	ldrb.w	r0, [r0, #231]	; 0xe7
    61a8:	0780      	lsls	r0, r0, #30
    61aa:	d10a      	bne.n	61c2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaf6>
    61ac:	200c      	movs	r0, #12
    61ae:	f000 f981 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    61b2:	6860      	ldr	r0, [r4, #4]
    61b4:	f810 1fe7 	ldrb.w	r1, [r0, #231]!
    61b8:	f041 0101 	orr.w	r1, r1, #1
    61bc:	7001      	strb	r1, [r0, #0]
    61be:	f880 5063 	strb.w	r5, [r0, #99]	; 0x63
    61c2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    61c4:	f890 113a 	ldrb.w	r1, [r0, #314]	; 0x13a
    61c8:	f88d 1004 	strb.w	r1, [sp, #4]
    61cc:	9901      	ldr	r1, [sp, #4]
    61ce:	9101      	str	r1, [sp, #4]
    61d0:	f89d 1004 	ldrb.w	r1, [sp, #4]
    61d4:	b141      	cbz	r1, 61e8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb1c>
    61d6:	f890 113b 	ldrb.w	r1, [r0, #315]	; 0x13b
    61da:	f88d 1000 	strb.w	r1, [sp]
    61de:	9900      	ldr	r1, [sp, #0]
    61e0:	9100      	str	r1, [sp, #0]
    61e2:	f89d 1000 	ldrb.w	r1, [sp]
    61e6:	b121      	cbz	r1, 61f2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb26>
    61e8:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    61ec:	2901      	cmp	r1, #1
    61ee:	d021      	beq.n	6234 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb68>
    61f0:	e02e      	b.n	6250 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb84>
    61f2:	f890 10a6 	ldrb.w	r1, [r0, #166]	; 0xa6
    61f6:	2925      	cmp	r1, #37	; 0x25
    61f8:	d01a      	beq.n	6230 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb64>
    61fa:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    61fe:	2925      	cmp	r1, #37	; 0x25
    6200:	d016      	beq.n	6230 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb64>
    6202:	2926      	cmp	r1, #38	; 0x26
    6204:	d014      	beq.n	6230 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb64>
    6206:	2300      	movs	r3, #0
    6208:	f200 2262 	addw	r2, r0, #610	; 0x262
    620c:	f500 719d 	add.w	r1, r0, #314	; 0x13a
    6210:	f007 ffaf 	bl	e172 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    6214:	6860      	ldr	r0, [r4, #4]
    6216:	f880 513a 	strb.w	r5, [r0, #314]	; 0x13a
    621a:	6861      	ldr	r1, [r4, #4]
    621c:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    6220:	8bc2      	ldrh	r2, [r0, #30]
    6222:	f8a1 2130 	strh.w	r2, [r1, #304]	; 0x130
    6226:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    6228:	f8a1 0132 	strh.w	r0, [r1, #306]	; 0x132
    622c:	2014      	movs	r0, #20
    622e:	e01a      	b.n	6266 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    6230:	2301      	movs	r3, #1
    6232:	e7e9      	b.n	6208 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb3c>
    6234:	f890 1145 	ldrb.w	r1, [r0, #325]	; 0x145
    6238:	f88d 1000 	strb.w	r1, [sp]
    623c:	9900      	ldr	r1, [sp, #0]
    623e:	9100      	str	r1, [sp, #0]
    6240:	f89d 1000 	ldrb.w	r1, [sp]
    6244:	b921      	cbnz	r1, 6250 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb84>
    6246:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    624a:	f007 fcba 	bl	dbc2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    624e:	b170      	cbz	r0, 626e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xba2>
    6250:	6860      	ldr	r0, [r4, #4]
    6252:	f890 1151 	ldrb.w	r1, [r0, #337]	; 0x151
    6256:	f88d 1000 	strb.w	r1, [sp]
    625a:	9900      	ldr	r1, [sp, #0]
    625c:	9100      	str	r1, [sp, #0]
    625e:	f89d 1000 	ldrb.w	r1, [sp]
    6262:	b329      	cbz	r1, 62b0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbe4>
    6264:	2023      	movs	r0, #35	; 0x23
    6266:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    626a:	f000 b923 	b.w	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    626e:	6860      	ldr	r0, [r4, #4]
    6270:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    6274:	f008 fdd8 	bl	ee28 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    6278:	4605      	mov	r5, r0
    627a:	6860      	ldr	r0, [r4, #4]
    627c:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    6280:	f008 fdd2 	bl	ee28 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    6284:	4606      	mov	r6, r0
    6286:	6860      	ldr	r0, [r4, #4]
    6288:	f890 1146 	ldrb.w	r1, [r0, #326]	; 0x146
    628c:	4628      	mov	r0, r5
    628e:	f008 fdd6 	bl	ee3e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    6292:	b158      	cbz	r0, 62ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbe0>
    6294:	6860      	ldr	r0, [r4, #4]
    6296:	f890 1147 	ldrb.w	r1, [r0, #327]	; 0x147
    629a:	4630      	mov	r0, r6
    629c:	f008 fdcf 	bl	ee3e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    62a0:	b120      	cbz	r0, 62ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbe0>
    62a2:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    62a6:	2000      	movs	r0, #0
    62a8:	f000 b8de 	b.w	6468 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    62ac:	2016      	movs	r0, #22
    62ae:	e7da      	b.n	6266 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    62b0:	f890 014e 	ldrb.w	r0, [r0, #334]	; 0x14e
    62b4:	f88d 0000 	strb.w	r0, [sp]
    62b8:	9800      	ldr	r0, [sp, #0]
    62ba:	9000      	str	r0, [sp, #0]
    62bc:	f89d 0000 	ldrb.w	r0, [sp]
    62c0:	2800      	cmp	r0, #0
    62c2:	f43f af7e 	beq.w	61c2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaf6>
    62c6:	2025      	movs	r0, #37	; 0x25
    62c8:	f000 f8f4 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    62cc:	6860      	ldr	r0, [r4, #4]
    62ce:	f880 514e 	strb.w	r5, [r0, #334]	; 0x14e
    62d2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    62d4:	200000f0 	.word	0x200000f0
    62d8:	b510      	push	{r4, lr}
    62da:	4c1e      	ldr	r4, [pc, #120]	; (6354 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc88>)
    62dc:	6862      	ldr	r2, [r4, #4]
    62de:	f892 0134 	ldrb.w	r0, [r2, #308]	; 0x134
    62e2:	2808      	cmp	r0, #8
    62e4:	d20d      	bcs.n	6302 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc36>
    62e6:	f1c0 0108 	rsb	r1, r0, #8
    62ea:	f200 2093 	addw	r0, r0, #659	; 0x293
    62ee:	b2c9      	uxtb	r1, r1
    62f0:	4410      	add	r0, r2
    62f2:	f7fa fc49 	bl	b88 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    62f6:	6861      	ldr	r1, [r4, #4]
    62f8:	f891 2134 	ldrb.w	r2, [r1, #308]	; 0x134
    62fc:	4410      	add	r0, r2
    62fe:	f881 0134 	strb.w	r0, [r1, #308]	; 0x134
    6302:	6862      	ldr	r2, [r4, #4]
    6304:	f892 0134 	ldrb.w	r0, [r2, #308]	; 0x134
    6308:	3808      	subs	r0, #8
    630a:	2804      	cmp	r0, #4
    630c:	d20d      	bcs.n	632a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc5e>
    630e:	f1c0 0104 	rsb	r1, r0, #4
    6312:	f500 7090 	add.w	r0, r0, #288	; 0x120
    6316:	b2c9      	uxtb	r1, r1
    6318:	4410      	add	r0, r2
    631a:	f7fa fc35 	bl	b88 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    631e:	6861      	ldr	r1, [r4, #4]
    6320:	f891 2134 	ldrb.w	r2, [r1, #308]	; 0x134
    6324:	4410      	add	r0, r2
    6326:	f881 0134 	strb.w	r0, [r1, #308]	; 0x134
    632a:	6860      	ldr	r0, [r4, #4]
    632c:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    6330:	290c      	cmp	r1, #12
    6332:	d30e      	bcc.n	6352 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc86>
    6334:	d005      	beq.n	6342 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc76>
    6336:	f640 31c5 	movw	r1, #3013	; 0xbc5
    633a:	f04f 0036 	mov.w	r0, #54	; 0x36
    633e:	f7fa fb91 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6342:	2100      	movs	r1, #0
    6344:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
    6348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    634c:	2003      	movs	r0, #3
    634e:	f000 b8b1 	b.w	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    6352:	bd10      	pop	{r4, pc}
    6354:	200000f0 	.word	0x200000f0
    6358:	b570      	push	{r4, r5, r6, lr}
    635a:	4b20      	ldr	r3, [pc, #128]	; (63dc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd10>)
    635c:	4602      	mov	r2, r0
    635e:	460c      	mov	r4, r1
    6360:	8858      	ldrh	r0, [r3, #2]
    6362:	4310      	orrs	r0, r2
    6364:	8058      	strh	r0, [r3, #2]
    6366:	f103 000c 	add.w	r0, r3, #12
    636a:	0791      	lsls	r1, r2, #30
    636c:	6840      	ldr	r0, [r0, #4]
    636e:	ea4f 71c2 	mov.w	r1, r2, lsl #31
    6372:	d507      	bpl.n	6384 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcb8>
    6374:	b121      	cbz	r1, 6380 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcb4>
    6376:	f640 41cc 	movw	r1, #3276	; 0xccc
    637a:	2036      	movs	r0, #54	; 0x36
    637c:	f7fa fb72 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6380:	605c      	str	r4, [r3, #4]
    6382:	e003      	b.n	638c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcc0>
    6384:	b101      	cbz	r1, 6388 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcbc>
    6386:	609c      	str	r4, [r3, #8]
    6388:	0791      	lsls	r1, r2, #30
    638a:	d515      	bpl.n	63b8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcec>
    638c:	78e1      	ldrb	r1, [r4, #3]
    638e:	2906      	cmp	r1, #6
    6390:	d002      	beq.n	6398 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xccc>
    6392:	290b      	cmp	r1, #11
    6394:	d110      	bne.n	63b8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcec>
    6396:	e008      	b.n	63aa <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcde>
    6398:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    639c:	2919      	cmp	r1, #25
    639e:	d10b      	bne.n	63b8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcec>
    63a0:	2100      	movs	r1, #0
    63a2:	e9c0 1142 	strd	r1, r1, [r0, #264]	; 0x108
    63a6:	2101      	movs	r1, #1
    63a8:	e004      	b.n	63b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xce8>
    63aa:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    63ae:	2913      	cmp	r1, #19
    63b0:	d102      	bne.n	63b8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcec>
    63b2:	2100      	movs	r1, #0
    63b4:	f880 10ab 	strb.w	r1, [r0, #171]	; 0xab
    63b8:	0691      	lsls	r1, r2, #26
    63ba:	d501      	bpl.n	63c0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcf4>
    63bc:	2108      	movs	r1, #8
    63be:	7059      	strb	r1, [r3, #1]
    63c0:	0611      	lsls	r1, r2, #24
    63c2:	d50a      	bpl.n	63da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd0e>
    63c4:	8b02      	ldrh	r2, [r0, #24]
    63c6:	f8b0 109c 	ldrh.w	r1, [r0, #156]	; 0x9c
    63ca:	4620      	mov	r0, r4
    63cc:	f7ff f9dc 	bl	5788 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbc>
    63d0:	4620      	mov	r0, r4
    63d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    63d6:	f7ff b9f5 	b.w	57c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8>
    63da:	bd70      	pop	{r4, r5, r6, pc}
    63dc:	200000e4 	.word	0x200000e4
    63e0:	b570      	push	{r4, r5, r6, lr}
    63e2:	4c20      	ldr	r4, [pc, #128]	; (6464 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd98>)
    63e4:	2501      	movs	r5, #1
    63e6:	6862      	ldr	r2, [r4, #4]
    63e8:	f892 1262 	ldrb.w	r1, [r2, #610]	; 0x262
    63ec:	b909      	cbnz	r1, 63f2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd26>
    63ee:	f892 106a 	ldrb.w	r1, [r2, #106]	; 0x6a
    63f2:	f892 0263 	ldrb.w	r0, [r2, #611]	; 0x263
    63f6:	b908      	cbnz	r0, 63fc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd30>
    63f8:	f892 006b 	ldrb.w	r0, [r2, #107]	; 0x6b
    63fc:	f102 0362 	add.w	r3, r2, #98	; 0x62
    6400:	7219      	strb	r1, [r3, #8]
    6402:	7258      	strb	r0, [r3, #9]
    6404:	20ff      	movs	r0, #255	; 0xff
    6406:	7298      	strb	r0, [r3, #10]
    6408:	4610      	mov	r0, r2
    640a:	f008 fffa 	bl	f402 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>
    640e:	2000      	movs	r0, #0
    6410:	f000 f82a 	bl	6468 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    6414:	6860      	ldr	r0, [r4, #4]
    6416:	302c      	adds	r0, #44	; 0x2c
    6418:	f007 ff1a 	bl	e250 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    641c:	4606      	mov	r6, r0
    641e:	6860      	ldr	r0, [r4, #4]
    6420:	f007 fec2 	bl	e1a8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    6424:	b130      	cbz	r0, 6434 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd68>
    6426:	6861      	ldr	r1, [r4, #4]
    6428:	f501 72b5 	add.w	r2, r1, #362	; 0x16a
    642c:	f831 0b2c 	ldrh.w	r0, [r1], #44
    6430:	f7fc fc20 	bl	2c74 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    6434:	2104      	movs	r1, #4
    6436:	6860      	ldr	r0, [r4, #4]
    6438:	f008 fb94 	bl	eb64 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    643c:	6860      	ldr	r0, [r4, #4]
    643e:	302c      	adds	r0, #44	; 0x2c
    6440:	f007 ff06 	bl	e250 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    6444:	4604      	mov	r4, r0
    6446:	42a6      	cmp	r6, r4
    6448:	d20a      	bcs.n	6460 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd94>
    644a:	f003 fdd5 	bl	9ff8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    644e:	4601      	mov	r1, r0
    6450:	1ba0      	subs	r0, r4, r6
    6452:	2865      	cmp	r0, #101	; 0x65
    6454:	d200      	bcs.n	6458 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd8c>
    6456:	2065      	movs	r0, #101	; 0x65
    6458:	f003 fca4 	bl	9da4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    645c:	b100      	cbz	r0, 6460 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd94>
    645e:	2500      	movs	r5, #0
    6460:	4628      	mov	r0, r5
    6462:	bd70      	pop	{r4, r5, r6, pc}
    6464:	200000f0 	.word	0x200000f0
    6468:	b510      	push	{r4, lr}
    646a:	4c10      	ldr	r4, [pc, #64]	; (64ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde0>)
    646c:	6861      	ldr	r1, [r4, #4]
    646e:	880a      	ldrh	r2, [r1, #0]
    6470:	f8a1 21ae 	strh.w	r2, [r1, #430]	; 0x1ae
    6474:	f881 01ac 	strb.w	r0, [r1, #428]	; 0x1ac
    6478:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    647c:	f008 fcd4 	bl	ee28 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    6480:	6861      	ldr	r1, [r4, #4]
    6482:	f881 01b0 	strb.w	r0, [r1, #432]	; 0x1b0
    6486:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    648a:	f008 fccd 	bl	ee28 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    648e:	6863      	ldr	r3, [r4, #4]
    6490:	2215      	movs	r2, #21
    6492:	4907      	ldr	r1, [pc, #28]	; (64b0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde4>)
    6494:	f883 01b1 	strb.w	r0, [r3, #433]	; 0x1b1
    6498:	f503 70d1 	add.w	r0, r3, #418	; 0x1a2
    649c:	f007 fe53 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    64a0:	6861      	ldr	r1, [r4, #4]
    64a2:	2000      	movs	r0, #0
    64a4:	f881 0144 	strb.w	r0, [r1, #324]	; 0x144
    64a8:	bd10      	pop	{r4, pc}
    64aa:	0000      	.short	0x0000
    64ac:	200000f0 	.word	0x200000f0
    64b0:	00010189 	.word	0x00010189
    64b4:	4902      	ldr	r1, [pc, #8]	; (64c0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xdf4>)
    64b6:	6849      	ldr	r1, [r1, #4]
    64b8:	f881 012e 	strb.w	r0, [r1, #302]	; 0x12e
    64bc:	f000 bb10 	b.w	6ae0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1414>
    64c0:	200000f0 	.word	0x200000f0
    64c4:	4903      	ldr	r1, [pc, #12]	; (64d4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe08>)
    64c6:	6849      	ldr	r1, [r1, #4]
    64c8:	f881 0130 	strb.w	r0, [r1, #304]	; 0x130
    64cc:	2011      	movs	r0, #17
    64ce:	f7ff bff1 	b.w	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    64d2:	0000      	.short	0x0000
    64d4:	200000f0 	.word	0x200000f0
    64d8:	b538      	push	{r3, r4, r5, lr}
    64da:	4c11      	ldr	r4, [pc, #68]	; (6520 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe54>)
    64dc:	6862      	ldr	r2, [r4, #4]
    64de:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
    64e2:	f8ad 2000 	strh.w	r2, [sp]
    64e6:	f007 fbe5 	bl	dcb4 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
    64ea:	f89d 3000 	ldrb.w	r3, [sp]
    64ee:	b2c2      	uxtb	r2, r0
    64f0:	2100      	movs	r1, #0
    64f2:	4293      	cmp	r3, r2
    64f4:	d003      	beq.n	64fe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe32>
    64f6:	6863      	ldr	r3, [r4, #4]
    64f8:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
    64fc:	e002      	b.n	6504 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe38>
    64fe:	6862      	ldr	r2, [r4, #4]
    6500:	f882 1262 	strb.w	r1, [r2, #610]	; 0x262
    6504:	f89d 2001 	ldrb.w	r2, [sp, #1]
    6508:	f3c0 2007 	ubfx	r0, r0, #8, #8
    650c:	4282      	cmp	r2, r0
    650e:	d003      	beq.n	6518 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe4c>
    6510:	6861      	ldr	r1, [r4, #4]
    6512:	f881 0263 	strb.w	r0, [r1, #611]	; 0x263
    6516:	bd38      	pop	{r3, r4, r5, pc}
    6518:	6860      	ldr	r0, [r4, #4]
    651a:	f880 1263 	strb.w	r1, [r0, #611]	; 0x263
    651e:	bd38      	pop	{r3, r4, r5, pc}
    6520:	200000f0 	.word	0x200000f0
    6524:	4a03      	ldr	r2, [pc, #12]	; (6534 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe68>)
    6526:	6852      	ldr	r2, [r2, #4]
    6528:	f882 012a 	strb.w	r0, [r2, #298]	; 0x12a
    652c:	f882 112b 	strb.w	r1, [r2, #299]	; 0x12b
    6530:	4770      	bx	lr
    6532:	0000      	.short	0x0000
    6534:	200000f0 	.word	0x200000f0
    6538:	b570      	push	{r4, r5, r6, lr}
    653a:	6841      	ldr	r1, [r0, #4]
    653c:	4604      	mov	r4, r0
    653e:	f891 00a5 	ldrb.w	r0, [r1, #165]	; 0xa5
    6542:	2814      	cmp	r0, #20
    6544:	d001      	beq.n	654a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe7e>
    6546:	2002      	movs	r0, #2
    6548:	bd70      	pop	{r4, r5, r6, pc}
    654a:	4d09      	ldr	r5, [pc, #36]	; (6570 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xea4>)
    654c:	f201 219b 	addw	r1, r1, #667	; 0x29b
    6550:	68a8      	ldr	r0, [r5, #8]
    6552:	f007 fd6a 	bl	e02a <sym_G3E5J3DBBC3WRZ26KQDVAZEPSZL4FITDNFKJBAY>
    6556:	6861      	ldr	r1, [r4, #4]
    6558:	68a8      	ldr	r0, [r5, #8]
    655a:	f501 7192 	add.w	r1, r1, #292	; 0x124
    655e:	f007 fd61 	bl	e024 <sym_RHFWG2VAMMSM6HNQIXGIQMU7QUNXB2XIV4NQREY>
    6562:	6861      	ldr	r1, [r4, #4]
    6564:	2017      	movs	r0, #23
    6566:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    656a:	2000      	movs	r0, #0
    656c:	bd70      	pop	{r4, r5, r6, pc}
    656e:	0000      	.short	0x0000
    6570:	200000e4 	.word	0x200000e4
    6574:	4901      	ldr	r1, [pc, #4]	; (657c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb0>)
    6576:	6889      	ldr	r1, [r1, #8]
    6578:	f7fc bc78 	b.w	2e6c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>
    657c:	200000e4 	.word	0x200000e4
    6580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6584:	4e1b      	ldr	r6, [pc, #108]	; (65f4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf28>)
    6586:	2500      	movs	r5, #0
    6588:	f106 010c 	add.w	r1, r6, #12
    658c:	2703      	movs	r7, #3
    658e:	f8d1 c004 	ldr.w	ip, [r1, #4]
    6592:	2401      	movs	r4, #1
    6594:	b1a0      	cbz	r0, 65c0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xef4>
    6596:	68b0      	ldr	r0, [r6, #8]
    6598:	78c0      	ldrb	r0, [r0, #3]
    659a:	f88c 0129 	strb.w	r0, [ip, #297]	; 0x129
    659e:	fa04 f000 	lsl.w	r0, r4, r0
    65a2:	f3c0 50c0 	ubfx	r0, r0, #23, #1
    65a6:	b130      	cbz	r0, 65b6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeea>
    65a8:	f88c 70a5 	strb.w	r7, [ip, #165]	; 0xa5
    65ac:	f8ac 50dc 	strh.w	r5, [ip, #220]	; 0xdc
    65b0:	f88c 40e0 	strb.w	r4, [ip, #224]	; 0xe0
    65b4:	e019      	b.n	65ea <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf1e>
    65b6:	f240 6195 	movw	r1, #1685	; 0x695
    65ba:	2036      	movs	r0, #54	; 0x36
    65bc:	f7fa fa52 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    65c0:	4688      	mov	r8, r1
    65c2:	2300      	movs	r3, #0
    65c4:	f89c 20a6 	ldrb.w	r2, [ip, #166]	; 0xa6
    65c8:	f10c 0088 	add.w	r0, ip, #136	; 0x88
    65cc:	4619      	mov	r1, r3
    65ce:	f007 fa95 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    65d2:	b168      	cbz	r0, 65f0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf24>
    65d4:	68b0      	ldr	r0, [r6, #8]
    65d6:	78c1      	ldrb	r1, [r0, #3]
    65d8:	f8d8 0004 	ldr.w	r0, [r8, #4]
    65dc:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    65e0:	f800 7fa6 	strb.w	r7, [r0, #166]!
    65e4:	8785      	strh	r5, [r0, #60]	; 0x3c
    65e6:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    65ea:	2000      	movs	r0, #0
    65ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    65f0:	2001      	movs	r0, #1
    65f2:	e7fb      	b.n	65ec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf20>
    65f4:	200000e4 	.word	0x200000e4
    65f8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    65fc:	4604      	mov	r4, r0
    65fe:	6840      	ldr	r0, [r0, #4]
    6600:	2300      	movs	r3, #0
    6602:	4619      	mov	r1, r3
    6604:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    6608:	3088      	adds	r0, #136	; 0x88
    660a:	f007 fa77 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    660e:	b310      	cbz	r0, 6656 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8a>
    6610:	4d2e      	ldr	r5, [pc, #184]	; (66cc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1000>)
    6612:	68a8      	ldr	r0, [r5, #8]
    6614:	f007 fd1a 	bl	e04c <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    6618:	b300      	cbz	r0, 665c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf90>
    661a:	68a8      	ldr	r0, [r5, #8]
    661c:	f007 fd10 	bl	e040 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    6620:	4607      	mov	r7, r0
    6622:	68a8      	ldr	r0, [r5, #8]
    6624:	f007 fd10 	bl	e048 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    6628:	4680      	mov	r8, r0
    662a:	68a8      	ldr	r0, [r5, #8]
    662c:	f007 fd06 	bl	e03c <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    6630:	4606      	mov	r6, r0
    6632:	68a8      	ldr	r0, [r5, #8]
    6634:	f007 fd06 	bl	e044 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    6638:	4601      	mov	r1, r0
    663a:	9700      	str	r7, [sp, #0]
    663c:	6860      	ldr	r0, [r4, #4]
    663e:	4643      	mov	r3, r8
    6640:	4632      	mov	r2, r6
    6642:	302c      	adds	r0, #44	; 0x2c
    6644:	f007 fe3e 	bl	e2c4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    6648:	6860      	ldr	r0, [r4, #4]
    664a:	2501      	movs	r5, #1
    664c:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    6650:	291d      	cmp	r1, #29
    6652:	d008      	beq.n	6666 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf9a>
    6654:	e009      	b.n	666a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf9e>
    6656:	2001      	movs	r0, #1
    6658:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    665c:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    6660:	2000      	movs	r0, #0
    6662:	f7ff bf8d 	b.w	6580 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb4>
    6666:	f880 5060 	strb.w	r5, [r0, #96]	; 0x60
    666a:	6860      	ldr	r0, [r4, #4]
    666c:	2600      	movs	r6, #0
    666e:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    6672:	2901      	cmp	r1, #1
    6674:	d011      	beq.n	669a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfce>
    6676:	f890 113b 	ldrb.w	r1, [r0, #315]	; 0x13b
    667a:	f88d 1004 	strb.w	r1, [sp, #4]
    667e:	9901      	ldr	r1, [sp, #4]
    6680:	9101      	str	r1, [sp, #4]
    6682:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6686:	b941      	cbnz	r1, 669a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfce>
    6688:	f890 113a 	ldrb.w	r1, [r0, #314]	; 0x13a
    668c:	f88d 1000 	strb.w	r1, [sp]
    6690:	9900      	ldr	r1, [sp, #0]
    6692:	9100      	str	r1, [sp, #0]
    6694:	f89d 1000 	ldrb.w	r1, [sp]
    6698:	b151      	cbz	r1, 66b0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfe4>
    669a:	211f      	movs	r1, #31
    669c:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    66a0:	6860      	ldr	r0, [r4, #4]
    66a2:	f8a0 60e2 	strh.w	r6, [r0, #226]	; 0xe2
    66a6:	6860      	ldr	r0, [r4, #4]
    66a8:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    66ac:	2000      	movs	r0, #0
    66ae:	e7d3      	b.n	6658 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8c>
    66b0:	211e      	movs	r1, #30
    66b2:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    66b6:	4805      	ldr	r0, [pc, #20]	; (66cc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1000>)
    66b8:	300c      	adds	r0, #12
    66ba:	6843      	ldr	r3, [r0, #4]
    66bc:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    66c0:	8818      	ldrh	r0, [r3, #0]
    66c2:	f503 72c0 	add.w	r2, r3, #384	; 0x180
    66c6:	f7fc faff 	bl	2cc8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    66ca:	e7e9      	b.n	66a0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfd4>
    66cc:	200000e4 	.word	0x200000e4
    66d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    66d4:	4604      	mov	r4, r0
    66d6:	6840      	ldr	r0, [r0, #4]
    66d8:	2300      	movs	r3, #0
    66da:	210a      	movs	r1, #10
    66dc:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    66e0:	3088      	adds	r0, #136	; 0x88
    66e2:	f007 fa0b 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    66e6:	b370      	cbz	r0, 6746 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x107a>
    66e8:	4d18      	ldr	r5, [pc, #96]	; (674c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1080>)
    66ea:	68a8      	ldr	r0, [r5, #8]
    66ec:	f007 fcae 	bl	e04c <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    66f0:	b1e8      	cbz	r0, 672e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1062>
    66f2:	68a8      	ldr	r0, [r5, #8]
    66f4:	f007 fca4 	bl	e040 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    66f8:	4607      	mov	r7, r0
    66fa:	68a8      	ldr	r0, [r5, #8]
    66fc:	f007 fca4 	bl	e048 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    6700:	4680      	mov	r8, r0
    6702:	68a8      	ldr	r0, [r5, #8]
    6704:	f007 fc9a 	bl	e03c <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    6708:	4606      	mov	r6, r0
    670a:	68a8      	ldr	r0, [r5, #8]
    670c:	f007 fc9a 	bl	e044 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    6710:	4601      	mov	r1, r0
    6712:	9700      	str	r7, [sp, #0]
    6714:	6860      	ldr	r0, [r4, #4]
    6716:	4643      	mov	r3, r8
    6718:	4632      	mov	r2, r6
    671a:	302c      	adds	r0, #44	; 0x2c
    671c:	f007 fdd2 	bl	e2c4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    6720:	6860      	ldr	r0, [r4, #4]
    6722:	f007 fd41 	bl	e1a8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    6726:	2104      	movs	r1, #4
    6728:	6860      	ldr	r0, [r4, #4]
    672a:	f008 fa1b 	bl	eb64 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    672e:	6861      	ldr	r1, [r4, #4]
    6730:	2000      	movs	r0, #0
    6732:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    6736:	6861      	ldr	r1, [r4, #4]
    6738:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    673c:	f7ff f9fa 	bl	5b34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x468>
    6740:	2000      	movs	r0, #0
    6742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6746:	e7ff      	b.n	6748 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x107c>
    6748:	2001      	movs	r0, #1
    674a:	e7fa      	b.n	6742 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1076>
    674c:	200000e4 	.word	0x200000e4
    6750:	4901      	ldr	r1, [pc, #4]	; (6758 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x108c>)
    6752:	6889      	ldr	r1, [r1, #8]
    6754:	f7fc bb58 	b.w	2e08 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>
    6758:	200000e4 	.word	0x200000e4
    675c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6760:	4604      	mov	r4, r0
    6762:	6840      	ldr	r0, [r0, #4]
    6764:	f04f 0800 	mov.w	r8, #0
    6768:	b086      	sub	sp, #24
    676a:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    676e:	4643      	mov	r3, r8
    6770:	4641      	mov	r1, r8
    6772:	3088      	adds	r0, #136	; 0x88
    6774:	f007 f9c2 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6778:	b190      	cbz	r0, 67a0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d4>
    677a:	6860      	ldr	r0, [r4, #4]
    677c:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    6780:	2824      	cmp	r0, #36	; 0x24
    6782:	d011      	beq.n	67a8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10dc>
    6784:	2825      	cmp	r0, #37	; 0x25
    6786:	d00f      	beq.n	67a8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10dc>
    6788:	2826      	cmp	r0, #38	; 0x26
    678a:	d00d      	beq.n	67a8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10dc>
    678c:	4668      	mov	r0, sp
    678e:	f7fa fefd 	bl	158c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    6792:	b158      	cbz	r0, 67ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10e0>
    6794:	9800      	ldr	r0, [sp, #0]
    6796:	a903      	add	r1, sp, #12
    6798:	78c0      	ldrb	r0, [r0, #3]
    679a:	f88d 000c 	strb.w	r0, [sp, #12]
    679e:	e006      	b.n	67ae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10e2>
    67a0:	2001      	movs	r0, #1
    67a2:	b006      	add	sp, #24
    67a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    67a8:	2020      	movs	r0, #32
    67aa:	e7fa      	b.n	67a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d6>
    67ac:	2100      	movs	r1, #0
    67ae:	6860      	ldr	r0, [r4, #4]
    67b0:	ab02      	add	r3, sp, #8
    67b2:	2216      	movs	r2, #22
    67b4:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    67b8:	f007 fa5b 	bl	dc72 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>
    67bc:	2501      	movs	r5, #1
    67be:	2600      	movs	r6, #0
    67c0:	b180      	cbz	r0, 67e4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1118>
    67c2:	2116      	movs	r1, #22
    67c4:	f89d 0008 	ldrb.w	r0, [sp, #8]
    67c8:	f7ff feac 	bl	6524 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe58>
    67cc:	6861      	ldr	r1, [r4, #4]
    67ce:	202f      	movs	r0, #47	; 0x2f
    67d0:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    67d4:	6860      	ldr	r0, [r4, #4]
    67d6:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    67da:	6860      	ldr	r0, [r4, #4]
    67dc:	f8a0 60e2 	strh.w	r6, [r0, #226]	; 0xe2
    67e0:	2000      	movs	r0, #0
    67e2:	e7de      	b.n	67a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d6>
    67e4:	4f29      	ldr	r7, [pc, #164]	; (688c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c0>)
    67e6:	68b8      	ldr	r0, [r7, #8]
    67e8:	f007 fc42 	bl	e070 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>
    67ec:	b1b8      	cbz	r0, 681e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1152>
    67ee:	68b8      	ldr	r0, [r7, #8]
    67f0:	6862      	ldr	r2, [r4, #4]
    67f2:	7901      	ldrb	r1, [r0, #4]
    67f4:	f001 0107 	and.w	r1, r1, #7
    67f8:	f882 1062 	strb.w	r1, [r2, #98]	; 0x62
    67fc:	7940      	ldrb	r0, [r0, #5]
    67fe:	f000 0107 	and.w	r1, r0, #7
    6802:	6860      	ldr	r0, [r4, #4]
    6804:	f880 1063 	strb.w	r1, [r0, #99]	; 0x63
    6808:	6860      	ldr	r0, [r4, #4]
    680a:	f890 2145 	ldrb.w	r2, [r0, #325]	; 0x145
    680e:	f88d 200c 	strb.w	r2, [sp, #12]
    6812:	9a03      	ldr	r2, [sp, #12]
    6814:	9203      	str	r2, [sp, #12]
    6816:	f89d 200c 	ldrb.w	r2, [sp, #12]
    681a:	bb5a      	cbnz	r2, 6874 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11a8>
    681c:	e004      	b.n	6828 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x115c>
    681e:	2000      	movs	r0, #0
    6820:	f7ff feae 	bl	6580 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb4>
    6824:	4680      	mov	r8, r0
    6826:	e02f      	b.n	6888 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11bc>
    6828:	f890 2144 	ldrb.w	r2, [r0, #324]	; 0x144
    682c:	2a01      	cmp	r2, #1
    682e:	d021      	beq.n	6874 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11a8>
    6830:	f100 026a 	add.w	r2, r0, #106	; 0x6a
    6834:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
    6838:	7857      	ldrb	r7, [r2, #1]
    683a:	429f      	cmp	r7, r3
    683c:	d106      	bne.n	684c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1180>
    683e:	7812      	ldrb	r2, [r2, #0]
    6840:	428a      	cmp	r2, r1
    6842:	d103      	bne.n	684c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1180>
    6844:	2102      	movs	r1, #2
    6846:	f880 1144 	strb.w	r1, [r0, #324]	; 0x144
    684a:	e013      	b.n	6874 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11a8>
    684c:	480f      	ldr	r0, [pc, #60]	; (688c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c0>)
    684e:	300c      	adds	r0, #12
    6850:	6841      	ldr	r1, [r0, #4]
    6852:	f501 70cf 	add.w	r0, r1, #414	; 0x19e
    6856:	880a      	ldrh	r2, [r1, #0]
    6858:	f820 2b02 	strh.w	r2, [r0], #2
    685c:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
    6860:	f800 2b01 	strb.w	r2, [r0], #1
    6864:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    6868:	f800 190d 	strb.w	r1, [r0], #-13
    686c:	2222      	movs	r2, #34	; 0x22
    686e:	4908      	ldr	r1, [pc, #32]	; (6890 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c4>)
    6870:	f007 fc55 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6874:	6861      	ldr	r1, [r4, #4]
    6876:	2022      	movs	r0, #34	; 0x22
    6878:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    687c:	6860      	ldr	r0, [r4, #4]
    687e:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    6882:	6860      	ldr	r0, [r4, #4]
    6884:	f8a0 60e2 	strh.w	r6, [r0, #226]	; 0xe2
    6888:	4640      	mov	r0, r8
    688a:	e78a      	b.n	67a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d6>
    688c:	200000e4 	.word	0x200000e4
    6890:	000101b3 	.word	0x000101b3
    6894:	b570      	push	{r4, r5, r6, lr}
    6896:	4604      	mov	r4, r0
    6898:	6840      	ldr	r0, [r0, #4]
    689a:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    689e:	2820      	cmp	r0, #32
    68a0:	d001      	beq.n	68a6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11da>
    68a2:	2001      	movs	r0, #1
    68a4:	bd70      	pop	{r4, r5, r6, pc}
    68a6:	4e16      	ldr	r6, [pc, #88]	; (6900 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1234>)
    68a8:	68b0      	ldr	r0, [r6, #8]
    68aa:	f007 fbf3 	bl	e094 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ>
    68ae:	b1f0      	cbz	r0, 68ee <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1222>
    68b0:	68b0      	ldr	r0, [r6, #8]
    68b2:	6862      	ldr	r2, [r4, #4]
    68b4:	7901      	ldrb	r1, [r0, #4]
    68b6:	7940      	ldrb	r0, [r0, #5]
    68b8:	f001 0107 	and.w	r1, r1, #7
    68bc:	f361 0507 	bfi	r5, r1, #0, #8
    68c0:	4629      	mov	r1, r5
    68c2:	f000 0007 	and.w	r0, r0, #7
    68c6:	f360 210f 	bfi	r1, r0, #8, #8
    68ca:	2001      	movs	r0, #1
    68cc:	f882 00e0 	strb.w	r0, [r2, #224]	; 0xe0
    68d0:	6862      	ldr	r2, [r4, #4]
    68d2:	2000      	movs	r0, #0
    68d4:	f8a2 00dc 	strh.w	r0, [r2, #220]	; 0xdc
    68d8:	6862      	ldr	r2, [r4, #4]
    68da:	2024      	movs	r0, #36	; 0x24
    68dc:	f882 00a5 	strb.w	r0, [r2, #165]	; 0xa5
    68e0:	6860      	ldr	r0, [r4, #4]
    68e2:	f8d0 0146 	ldr.w	r0, [r0, #326]	; 0x146
    68e6:	f7ff fdf7 	bl	64d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe0c>
    68ea:	2000      	movs	r0, #0
    68ec:	bd70      	pop	{r4, r5, r6, pc}
    68ee:	2001      	movs	r0, #1
    68f0:	f7ff fe46 	bl	6580 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb4>
    68f4:	4604      	mov	r4, r0
    68f6:	201e      	movs	r0, #30
    68f8:	f7ff fdb6 	bl	6468 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    68fc:	4620      	mov	r0, r4
    68fe:	bd70      	pop	{r4, r5, r6, pc}
    6900:	200000e4 	.word	0x200000e4
    6904:	b570      	push	{r4, r5, r6, lr}
    6906:	4604      	mov	r4, r0
    6908:	6840      	ldr	r0, [r0, #4]
    690a:	4d0a      	ldr	r5, [pc, #40]	; (6934 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1268>)
    690c:	f810 1ff6 	ldrb.w	r1, [r0, #246]!
    6910:	f041 0104 	orr.w	r1, r1, #4
    6914:	7001      	strb	r1, [r0, #0]
    6916:	68a8      	ldr	r0, [r5, #8]
    6918:	f007 fbc6 	bl	e0a8 <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>
    691c:	4606      	mov	r6, r0
    691e:	68a8      	ldr	r0, [r5, #8]
    6920:	f007 fbc6 	bl	e0b0 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>
    6924:	4601      	mov	r1, r0
    6926:	4622      	mov	r2, r4
    6928:	4630      	mov	r0, r6
    692a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    692e:	f000 b8b3 	b.w	6a98 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13cc>
    6932:	0000      	.short	0x0000
    6934:	200000e4 	.word	0x200000e4
    6938:	4a11      	ldr	r2, [pc, #68]	; (6980 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12b4>)
    693a:	4911      	ldr	r1, [pc, #68]	; (6980 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12b4>)
    693c:	320c      	adds	r2, #12
    693e:	6852      	ldr	r2, [r2, #4]
    6940:	6889      	ldr	r1, [r1, #8]
    6942:	f892 30a5 	ldrb.w	r3, [r2, #165]	; 0xa5
    6946:	7909      	ldrb	r1, [r1, #4]
    6948:	f1a3 0210 	sub.w	r2, r3, #16
    694c:	2a0c      	cmp	r2, #12
    694e:	d801      	bhi.n	6954 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1288>
    6950:	2303      	movs	r3, #3
    6952:	e008      	b.n	6966 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    6954:	2b28      	cmp	r3, #40	; 0x28
    6956:	d00a      	beq.n	696e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12a2>
    6958:	2b1d      	cmp	r3, #29
    695a:	d00a      	beq.n	6972 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12a6>
    695c:	2b05      	cmp	r3, #5
    695e:	d00a      	beq.n	6976 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12aa>
    6960:	2b20      	cmp	r3, #32
    6962:	d00a      	beq.n	697a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12ae>
    6964:	23fe      	movs	r3, #254	; 0xfe
    6966:	4602      	mov	r2, r0
    6968:	4618      	mov	r0, r3
    696a:	f000 b895 	b.w	6a98 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13cc>
    696e:	2323      	movs	r3, #35	; 0x23
    6970:	e7f9      	b.n	6966 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    6972:	2314      	movs	r3, #20
    6974:	e7f7      	b.n	6966 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    6976:	2312      	movs	r3, #18
    6978:	e7f5      	b.n	6966 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    697a:	2316      	movs	r3, #22
    697c:	e7f3      	b.n	6966 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    697e:	0000      	.short	0x0000
    6980:	200000e4 	.word	0x200000e4
    6984:	b570      	push	{r4, r5, r6, lr}
    6986:	4604      	mov	r4, r0
    6988:	6840      	ldr	r0, [r0, #4]
    698a:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    698e:	291b      	cmp	r1, #27
    6990:	d001      	beq.n	6996 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12ca>
    6992:	2002      	movs	r0, #2
    6994:	bd70      	pop	{r4, r5, r6, pc}
    6996:	2500      	movs	r5, #0
    6998:	f880 50e5 	strb.w	r5, [r0, #229]	; 0xe5
    699c:	6860      	ldr	r0, [r4, #4]
    699e:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    69a2:	6860      	ldr	r0, [r4, #4]
    69a4:	f880 5278 	strb.w	r5, [r0, #632]	; 0x278
    69a8:	6860      	ldr	r0, [r4, #4]
    69aa:	f890 10e6 	ldrb.w	r1, [r0, #230]	; 0xe6
    69ae:	b161      	cbz	r1, 69ca <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12fe>
    69b0:	f880 50e6 	strb.w	r5, [r0, #230]	; 0xe6
    69b4:	6860      	ldr	r0, [r4, #4]
    69b6:	220d      	movs	r2, #13
    69b8:	8801      	ldrh	r1, [r0, #0]
    69ba:	f8a0 121e 	strh.w	r1, [r0, #542]	; 0x21e
    69be:	6860      	ldr	r0, [r4, #4]
    69c0:	490d      	ldr	r1, [pc, #52]	; (69f8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x132c>)
    69c2:	f880 521c 	strb.w	r5, [r0, #540]	; 0x21c
    69c6:	6860      	ldr	r0, [r4, #4]
    69c8:	e00c      	b.n	69e4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1318>
    69ca:	8801      	ldrh	r1, [r0, #0]
    69cc:	f8a0 121e 	strh.w	r1, [r0, #542]	; 0x21e
    69d0:	6860      	ldr	r0, [r4, #4]
    69d2:	f880 521c 	strb.w	r5, [r0, #540]	; 0x21c
    69d6:	6861      	ldr	r1, [r4, #4]
    69d8:	2001      	movs	r0, #1
    69da:	220c      	movs	r2, #12
    69dc:	f881 0220 	strb.w	r0, [r1, #544]	; 0x220
    69e0:	4906      	ldr	r1, [pc, #24]	; (69fc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1330>)
    69e2:	6860      	ldr	r0, [r4, #4]
    69e4:	f200 2012 	addw	r0, r0, #530	; 0x212
    69e8:	f007 fb99 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    69ec:	6860      	ldr	r0, [r4, #4]
    69ee:	f880 50a5 	strb.w	r5, [r0, #165]	; 0xa5
    69f2:	2000      	movs	r0, #0
    69f4:	bd70      	pop	{r4, r5, r6, pc}
    69f6:	0000      	.short	0x0000
    69f8:	0000e5bf 	.word	0x0000e5bf
    69fc:	0000e5a1 	.word	0x0000e5a1
    6a00:	b510      	push	{r4, lr}
    6a02:	4604      	mov	r4, r0
    6a04:	6840      	ldr	r0, [r0, #4]
    6a06:	2300      	movs	r3, #0
    6a08:	2101      	movs	r1, #1
    6a0a:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
    6a0e:	3088      	adds	r0, #136	; 0x88
    6a10:	f007 f874 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6a14:	b108      	cbz	r0, 6a1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x134e>
    6a16:	2000      	movs	r0, #0
    6a18:	bd10      	pop	{r4, pc}
    6a1a:	4809      	ldr	r0, [pc, #36]	; (6a40 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1374>)
    6a1c:	6880      	ldr	r0, [r0, #8]
    6a1e:	f007 fb63 	bl	e0e8 <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>
    6a22:	6861      	ldr	r1, [r4, #4]
    6a24:	f881 00a8 	strb.w	r0, [r1, #168]	; 0xa8
    6a28:	6861      	ldr	r1, [r4, #4]
    6a2a:	2006      	movs	r0, #6
    6a2c:	f881 00a7 	strb.w	r0, [r1, #167]	; 0xa7
    6a30:	6861      	ldr	r1, [r4, #4]
    6a32:	2000      	movs	r0, #0
    6a34:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    6a38:	6861      	ldr	r1, [r4, #4]
    6a3a:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    6a3e:	e7ea      	b.n	6a16 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x134a>
    6a40:	200000e4 	.word	0x200000e4
    6a44:	4602      	mov	r2, r0
    6a46:	480f      	ldr	r0, [pc, #60]	; (6a84 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b8>)
    6a48:	b510      	push	{r4, lr}
    6a4a:	6880      	ldr	r0, [r0, #8]
    6a4c:	6851      	ldr	r1, [r2, #4]
    6a4e:	2400      	movs	r4, #0
    6a50:	7900      	ldrb	r0, [r0, #4]
    6a52:	f891 10a5 	ldrb.w	r1, [r1, #165]	; 0xa5
    6a56:	2812      	cmp	r0, #18
    6a58:	d006      	beq.n	6a68 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x139c>
    6a5a:	2814      	cmp	r0, #20
    6a5c:	d004      	beq.n	6a68 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x139c>
    6a5e:	2816      	cmp	r0, #22
    6a60:	d002      	beq.n	6a68 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x139c>
    6a62:	2823      	cmp	r0, #35	; 0x23
    6a64:	d10c      	bne.n	6a80 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b4>
    6a66:	e004      	b.n	6a72 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13a6>
    6a68:	2101      	movs	r1, #1
    6a6a:	f000 f91d 	bl	6ca8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15dc>
    6a6e:	4604      	mov	r4, r0
    6a70:	e006      	b.n	6a80 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b4>
    6a72:	2928      	cmp	r1, #40	; 0x28
    6a74:	d104      	bne.n	6a80 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b4>
    6a76:	4804      	ldr	r0, [pc, #16]	; (6a88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13bc>)
    6a78:	6801      	ldr	r1, [r0, #0]
    6a7a:	b109      	cbz	r1, 6a80 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b4>
    6a7c:	4610      	mov	r0, r2
    6a7e:	4788      	blx	r1
    6a80:	4620      	mov	r0, r4
    6a82:	bd10      	pop	{r4, pc}
    6a84:	200000e4 	.word	0x200000e4
    6a88:	20000254 	.word	0x20000254
    6a8c:	4901      	ldr	r1, [pc, #4]	; (6a94 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13c8>)
    6a8e:	6889      	ldr	r1, [r1, #8]
    6a90:	f7fc ba46 	b.w	2f20 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>
    6a94:	200000e4 	.word	0x200000e4
    6a98:	4603      	mov	r3, r0
    6a9a:	2000      	movs	r0, #0
    6a9c:	2b23      	cmp	r3, #35	; 0x23
    6a9e:	d017      	beq.n	6ad0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1404>
    6aa0:	dc0b      	bgt.n	6aba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13ee>
    6aa2:	2b03      	cmp	r3, #3
    6aa4:	d011      	beq.n	6aca <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13fe>
    6aa6:	2b12      	cmp	r3, #18
    6aa8:	d003      	beq.n	6ab2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13e6>
    6aaa:	2b14      	cmp	r3, #20
    6aac:	d001      	beq.n	6ab2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13e6>
    6aae:	2b16      	cmp	r3, #22
    6ab0:	d10a      	bne.n	6ac8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13fc>
    6ab2:	2100      	movs	r1, #0
    6ab4:	4618      	mov	r0, r3
    6ab6:	f000 b8f7 	b.w	6ca8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15dc>
    6aba:	2b24      	cmp	r3, #36	; 0x24
    6abc:	d008      	beq.n	6ad0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1404>
    6abe:	2b25      	cmp	r3, #37	; 0x25
    6ac0:	d006      	beq.n	6ad0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1404>
    6ac2:	2bfe      	cmp	r3, #254	; 0xfe
    6ac4:	d100      	bne.n	6ac8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13fc>
    6ac6:	2002      	movs	r0, #2
    6ac8:	4770      	bx	lr
    6aca:	4608      	mov	r0, r1
    6acc:	f7ff b846 	b.w	5b5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x490>
    6ad0:	4a02      	ldr	r2, [pc, #8]	; (6adc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1410>)
    6ad2:	6812      	ldr	r2, [r2, #0]
    6ad4:	2a00      	cmp	r2, #0
    6ad6:	d0f7      	beq.n	6ac8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13fc>
    6ad8:	4618      	mov	r0, r3
    6ada:	4710      	bx	r2
    6adc:	20000250 	.word	0x20000250
    6ae0:	280c      	cmp	r0, #12
    6ae2:	d01a      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6ae4:	2813      	cmp	r0, #19
    6ae6:	d018      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6ae8:	2818      	cmp	r0, #24
    6aea:	d016      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6aec:	4910      	ldr	r1, [pc, #64]	; (6b30 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1464>)
    6aee:	2200      	movs	r2, #0
    6af0:	2811      	cmp	r0, #17
    6af2:	6849      	ldr	r1, [r1, #4]
    6af4:	d012      	beq.n	6b1c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1450>
    6af6:	2807      	cmp	r0, #7
    6af8:	d00f      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6afa:	2809      	cmp	r0, #9
    6afc:	d00d      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6afe:	2815      	cmp	r0, #21
    6b00:	d012      	beq.n	6b28 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x145c>
    6b02:	2824      	cmp	r0, #36	; 0x24
    6b04:	d009      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6b06:	2801      	cmp	r0, #1
    6b08:	d007      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6b0a:	2800      	cmp	r0, #0
    6b0c:	d005      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6b0e:	2802      	cmp	r0, #2
    6b10:	d003      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6b12:	f821 2fdc 	strh.w	r2, [r1, #220]!
    6b16:	2001      	movs	r0, #1
    6b18:	7108      	strb	r0, [r1, #4]
    6b1a:	4770      	bx	lr
    6b1c:	f891 0130 	ldrb.w	r0, [r1, #304]	; 0x130
    6b20:	b110      	cbz	r0, 6b28 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x145c>
    6b22:	f8a1 20dc 	strh.w	r2, [r1, #220]	; 0xdc
    6b26:	4770      	bx	lr
    6b28:	f8a1 20e2 	strh.w	r2, [r1, #226]	; 0xe2
    6b2c:	4770      	bx	lr
    6b2e:	0000      	.short	0x0000
    6b30:	200000f0 	.word	0x200000f0
    6b34:	4904      	ldr	r1, [pc, #16]	; (6b48 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x147c>)
    6b36:	2000      	movs	r0, #0
    6b38:	6849      	ldr	r1, [r1, #4]
    6b3a:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    6b3e:	f8a1 00dc 	strh.w	r0, [r1, #220]	; 0xdc
    6b42:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    6b46:	4770      	bx	lr
    6b48:	200000f0 	.word	0x200000f0
    6b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6b50:	4d53      	ldr	r5, [pc, #332]	; (6ca0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15d4>)
    6b52:	4680      	mov	r8, r0
    6b54:	460f      	mov	r7, r1
    6b56:	6868      	ldr	r0, [r5, #4]
    6b58:	f100 0488 	add.w	r4, r0, #136	; 0x88
    6b5c:	f890 0138 	ldrb.w	r0, [r0, #312]	; 0x138
    6b60:	f88d 0000 	strb.w	r0, [sp]
    6b64:	9800      	ldr	r0, [sp, #0]
    6b66:	9000      	str	r0, [sp, #0]
    6b68:	f89d 0000 	ldrb.w	r0, [sp]
    6b6c:	2600      	movs	r6, #0
    6b6e:	b930      	cbnz	r0, 6b7e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14b2>
    6b70:	7fe2      	ldrb	r2, [r4, #31]
    6b72:	2300      	movs	r3, #0
    6b74:	2101      	movs	r1, #1
    6b76:	4620      	mov	r0, r4
    6b78:	f006 ffc0 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6b7c:	b120      	cbz	r0, 6b88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14bc>
    6b7e:	f8b4 0052 	ldrh.w	r0, [r4, #82]	; 0x52
    6b82:	1c40      	adds	r0, r0, #1
    6b84:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
    6b88:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
    6b8c:	b121      	cbz	r1, 6b98 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14cc>
    6b8e:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
    6b92:	1c40      	adds	r0, r0, #1
    6b94:	f8a4 0054 	strh.w	r0, [r4, #84]	; 0x54
    6b98:	f994 005c 	ldrsb.w	r0, [r4, #92]	; 0x5c
    6b9c:	b120      	cbz	r0, 6ba8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14dc>
    6b9e:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
    6ba2:	1c52      	adds	r2, r2, #1
    6ba4:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
    6ba8:	f1b8 0f00 	cmp.w	r8, #0
    6bac:	d114      	bne.n	6bd8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x150c>
    6bae:	4a3c      	ldr	r2, [pc, #240]	; (6ca0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15d4>)
    6bb0:	3a0c      	subs	r2, #12
    6bb2:	7812      	ldrb	r2, [r2, #0]
    6bb4:	2a02      	cmp	r2, #2
    6bb6:	d006      	beq.n	6bc6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14fa>
    6bb8:	2a01      	cmp	r2, #1
    6bba:	d006      	beq.n	6bca <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14fe>
    6bbc:	b1df      	cbz	r7, 6bf6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x152a>
    6bbe:	06f8      	lsls	r0, r7, #27
    6bc0:	d508      	bpl.n	6bd4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1508>
    6bc2:	201e      	movs	r0, #30
    6bc4:	e043      	b.n	6c4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6bc6:	2016      	movs	r0, #22
    6bc8:	e041      	b.n	6c4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6bca:	6868      	ldr	r0, [r5, #4]
    6bcc:	f890 00a8 	ldrb.w	r0, [r0, #168]	; 0xa8
    6bd0:	bba0      	cbnz	r0, 6c3c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1570>
    6bd2:	e05e      	b.n	6c92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15c6>
    6bd4:	0738      	lsls	r0, r7, #28
    6bd6:	d501      	bpl.n	6bdc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1510>
    6bd8:	203d      	movs	r0, #61	; 0x3d
    6bda:	e038      	b.n	6c4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6bdc:	07b8      	lsls	r0, r7, #30
    6bde:	d001      	beq.n	6be4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1518>
    6be0:	202a      	movs	r0, #42	; 0x2a
    6be2:	e034      	b.n	6c4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6be4:	06b8      	lsls	r0, r7, #26
    6be6:	d404      	bmi.n	6bf2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1526>
    6be8:	f640 515f 	movw	r1, #3423	; 0xd5f
    6bec:	2036      	movs	r0, #54	; 0x36
    6bee:	f7f9 ff39 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6bf2:	2023      	movs	r0, #35	; 0x23
    6bf4:	e02b      	b.n	6c4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6bf6:	b129      	cbz	r1, 6c04 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1538>
    6bf8:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
    6bfc:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
    6c00:	4291      	cmp	r1, r2
    6c02:	d81a      	bhi.n	6c3a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x156e>
    6c04:	b128      	cbz	r0, 6c12 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1546>
    6c06:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
    6c0a:	f8b4 1056 	ldrh.w	r1, [r4, #86]	; 0x56
    6c0e:	4288      	cmp	r0, r1
    6c10:	d813      	bhi.n	6c3a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x156e>
    6c12:	f8b4 1052 	ldrh.w	r1, [r4, #82]	; 0x52
    6c16:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
    6c1a:	4281      	cmp	r1, r0
    6c1c:	d309      	bcc.n	6c32 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1566>
    6c1e:	686a      	ldr	r2, [r5, #4]
    6c20:	f892 2138 	ldrb.w	r2, [r2, #312]	; 0x138
    6c24:	f88d 2000 	strb.w	r2, [sp]
    6c28:	9a00      	ldr	r2, [sp, #0]
    6c2a:	9200      	str	r2, [sp, #0]
    6c2c:	f89d 2000 	ldrb.w	r2, [sp]
    6c30:	b91a      	cbnz	r2, 6c3a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x156e>
    6c32:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
    6c36:	4291      	cmp	r1, r2
    6c38:	d301      	bcc.n	6c3e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1572>
    6c3a:	2022      	movs	r0, #34	; 0x22
    6c3c:	e007      	b.n	6c4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6c3e:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    6c42:	b301      	cbz	r1, 6c86 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15ba>
    6c44:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
    6c48:	4281      	cmp	r1, r0
    6c4a:	d322      	bcc.n	6c92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15c6>
    6c4c:	2008      	movs	r0, #8
    6c4e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    6c52:	220b      	movs	r2, #11
    6c54:	4913      	ldr	r1, [pc, #76]	; (6ca4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15d8>)
    6c56:	f104 0034 	add.w	r0, r4, #52	; 0x34
    6c5a:	f007 fa60 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6c5e:	7766      	strb	r6, [r4, #29]
    6c60:	77a6      	strb	r6, [r4, #30]
    6c62:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
    6c66:	2102      	movs	r1, #2
    6c68:	6868      	ldr	r0, [r5, #4]
    6c6a:	f007 ff7b 	bl	eb64 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    6c6e:	6868      	ldr	r0, [r5, #4]
    6c70:	f890 112e 	ldrb.w	r1, [r0, #302]	; 0x12e
    6c74:	2901      	cmp	r1, #1
    6c76:	d104      	bne.n	6c82 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15b6>
    6c78:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    6c7c:	7801      	ldrb	r1, [r0, #0]
    6c7e:	1e49      	subs	r1, r1, #1
    6c80:	7001      	strb	r1, [r0, #0]
    6c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6c86:	f8b4 004e 	ldrh.w	r0, [r4, #78]	; 0x4e
    6c8a:	2806      	cmp	r0, #6
    6c8c:	d301      	bcc.n	6c92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15c6>
    6c8e:	203e      	movs	r0, #62	; 0x3e
    6c90:	e7dd      	b.n	6c4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6c92:	6868      	ldr	r0, [r5, #4]
    6c94:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6c98:	2100      	movs	r1, #0
    6c9a:	f007 bf63 	b.w	eb64 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    6c9e:	0000      	.short	0x0000
    6ca0:	200000f0 	.word	0x200000f0
    6ca4:	0000e51f 	.word	0x0000e51f
    6ca8:	b570      	push	{r4, r5, r6, lr}
    6caa:	460e      	mov	r6, r1
    6cac:	4601      	mov	r1, r0
    6cae:	6850      	ldr	r0, [r2, #4]
    6cb0:	4614      	mov	r4, r2
    6cb2:	2500      	movs	r5, #0
    6cb4:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    6cb8:	481d      	ldr	r0, [pc, #116]	; (6d30 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1664>)
    6cba:	6840      	ldr	r0, [r0, #4]
    6cbc:	3088      	adds	r0, #136	; 0x88
    6cbe:	2912      	cmp	r1, #18
    6cc0:	d008      	beq.n	6cd4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1608>
    6cc2:	2914      	cmp	r1, #20
    6cc4:	d010      	beq.n	6ce8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x161c>
    6cc6:	2916      	cmp	r1, #22
    6cc8:	d01e      	beq.n	6d08 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x163c>
    6cca:	f240 613e 	movw	r1, #1598	; 0x63e
    6cce:	2036      	movs	r0, #54	; 0x36
    6cd0:	f7f9 fec8 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6cd4:	2109      	movs	r1, #9
    6cd6:	2300      	movs	r3, #0
    6cd8:	f006 ff10 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6cdc:	b330      	cbz	r0, 6d2c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6cde:	4620      	mov	r0, r4
    6ce0:	f008 f8e5 	bl	eeae <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xb2>
    6ce4:	4605      	mov	r5, r0
    6ce6:	e021      	b.n	6d2c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6ce8:	210a      	movs	r1, #10
    6cea:	2300      	movs	r3, #0
    6cec:	f006 ff06 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6cf0:	b1e0      	cbz	r0, 6d2c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6cf2:	f7ff ff1f 	bl	6b34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1468>
    6cf6:	b126      	cbz	r6, 6d02 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1636>
    6cf8:	6860      	ldr	r0, [r4, #4]
    6cfa:	2105      	movs	r1, #5
    6cfc:	30f6      	adds	r0, #246	; 0xf6
    6cfe:	f008 f86f 	bl	ede0 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x206>
    6d02:	f7fe ff17 	bl	5b34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x468>
    6d06:	e011      	b.n	6d2c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6d08:	2a20      	cmp	r2, #32
    6d0a:	d10f      	bne.n	6d2c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6d0c:	f7ff ff12 	bl	6b34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1468>
    6d10:	b14e      	cbz	r6, 6d26 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x165a>
    6d12:	6860      	ldr	r0, [r4, #4]
    6d14:	2108      	movs	r1, #8
    6d16:	30f6      	adds	r0, #246	; 0xf6
    6d18:	f008 f862 	bl	ede0 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x206>
    6d1c:	6860      	ldr	r0, [r4, #4]
    6d1e:	210b      	movs	r1, #11
    6d20:	30f6      	adds	r0, #246	; 0xf6
    6d22:	f008 f85d 	bl	ede0 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x206>
    6d26:	201a      	movs	r0, #26
    6d28:	f7ff fb9e 	bl	6468 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    6d2c:	4628      	mov	r0, r5
    6d2e:	bd70      	pop	{r4, r5, r6, pc}
    6d30:	200000f0 	.word	0x200000f0
    6d34:	4a19      	ldr	r2, [pc, #100]	; (6d9c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16d0>)
    6d36:	2901      	cmp	r1, #1
    6d38:	6852      	ldr	r2, [r2, #4]
    6d3a:	d010      	beq.n	6d5e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1692>
    6d3c:	2100      	movs	r1, #0
    6d3e:	b1c8      	cbz	r0, 6d74 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16a8>
    6d40:	2801      	cmp	r0, #1
    6d42:	d022      	beq.n	6d8a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16be>
    6d44:	2803      	cmp	r0, #3
    6d46:	d109      	bne.n	6d5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6d48:	f892 00a5 	ldrb.w	r0, [r2, #165]	; 0xa5
    6d4c:	2814      	cmp	r0, #20
    6d4e:	d005      	beq.n	6d5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6d50:	2817      	cmp	r0, #23
    6d52:	d003      	beq.n	6d5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6d54:	2819      	cmp	r0, #25
    6d56:	d001      	beq.n	6d5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6d58:	f882 1278 	strb.w	r1, [r2, #632]	; 0x278
    6d5c:	4770      	bx	lr
    6d5e:	f892 012e 	ldrb.w	r0, [r2, #302]	; 0x12e
    6d62:	2801      	cmp	r0, #1
    6d64:	d0fa      	beq.n	6d5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6d66:	bf00      	nop
    6d68:	f8d2 0258 	ldr.w	r0, [r2, #600]	; 0x258
    6d6c:	7801      	ldrb	r1, [r0, #0]
    6d6e:	1e49      	subs	r1, r1, #1
    6d70:	7001      	strb	r1, [r0, #0]
    6d72:	4770      	bx	lr
    6d74:	f8b2 009c 	ldrh.w	r0, [r2, #156]	; 0x9c
    6d78:	f8b2 3266 	ldrh.w	r3, [r2, #614]	; 0x266
    6d7c:	1ac0      	subs	r0, r0, r3
    6d7e:	b200      	sxth	r0, r0
    6d80:	2800      	cmp	r0, #0
    6d82:	dbf6      	blt.n	6d72 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16a6>
    6d84:	f882 1264 	strb.w	r1, [r2, #612]	; 0x264
    6d88:	4770      	bx	lr
    6d8a:	f8b2 009c 	ldrh.w	r0, [r2, #156]	; 0x9c
    6d8e:	f8b2 125e 	ldrh.w	r1, [r2, #606]	; 0x25e
    6d92:	1a40      	subs	r0, r0, r1
    6d94:	b200      	sxth	r0, r0
    6d96:	2800      	cmp	r0, #0
    6d98:	dae6      	bge.n	6d68 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x169c>
    6d9a:	4770      	bx	lr
    6d9c:	200000f0 	.word	0x200000f0

00006da0 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>:
    6da0:	b510      	push	{r4, lr}
    6da2:	6981      	ldr	r1, [r0, #24]
    6da4:	b119      	cbz	r1, 6dae <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0xe>
    6da6:	6882      	ldr	r2, [r0, #8]
    6da8:	688b      	ldr	r3, [r1, #8]
    6daa:	429a      	cmp	r2, r3
    6dac:	d203      	bcs.n	6db6 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x16>
    6dae:	21c0      	movs	r1, #192	; 0xc0
    6db0:	2037      	movs	r0, #55	; 0x37
    6db2:	f7f9 fe57 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6db6:	6942      	ldr	r2, [r0, #20]
    6db8:	614a      	str	r2, [r1, #20]
    6dba:	6903      	ldr	r3, [r0, #16]
    6dbc:	610b      	str	r3, [r1, #16]
    6dbe:	b10a      	cbz	r2, 6dc4 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x24>
    6dc0:	6111      	str	r1, [r2, #16]
    6dc2:	e001      	b.n	6dc8 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x28>
    6dc4:	4a06      	ldr	r2, [pc, #24]	; (6de0 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x40>)
    6dc6:	6011      	str	r1, [r2, #0]
    6dc8:	690a      	ldr	r2, [r1, #16]
    6dca:	b132      	cbz	r2, 6dda <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3a>
    6dcc:	6151      	str	r1, [r2, #20]
    6dce:	e9d0 2002 	ldrd	r2, r0, [r0, #8]
    6dd2:	4410      	add	r0, r2
    6dd4:	688a      	ldr	r2, [r1, #8]
    6dd6:	1a80      	subs	r0, r0, r2
    6dd8:	e000      	b.n	6ddc <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3c>
    6dda:	2000      	movs	r0, #0
    6ddc:	60c8      	str	r0, [r1, #12]
    6dde:	bd10      	pop	{r4, pc}
    6de0:	20000258 	.word	0x20000258

00006de4 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>:
    6de4:	b510      	push	{r4, lr}
    6de6:	2200      	movs	r2, #0
    6de8:	6141      	str	r1, [r0, #20]
    6dea:	b189      	cbz	r1, 6e10 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x2c>
    6dec:	690b      	ldr	r3, [r1, #16]
    6dee:	6108      	str	r0, [r1, #16]
    6df0:	6103      	str	r3, [r0, #16]
    6df2:	b103      	cbz	r3, 6df6 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    6df4:	6158      	str	r0, [r3, #20]
    6df6:	6941      	ldr	r1, [r0, #20]
    6df8:	60c2      	str	r2, [r0, #12]
    6dfa:	2900      	cmp	r1, #0
    6dfc:	d00f      	beq.n	6e1e <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3a>
    6dfe:	68cb      	ldr	r3, [r1, #12]
    6e00:	b163      	cbz	r3, 6e1c <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x38>
    6e02:	6884      	ldr	r4, [r0, #8]
    6e04:	42a3      	cmp	r3, r4
    6e06:	d207      	bcs.n	6e18 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x34>
    6e08:	212b      	movs	r1, #43	; 0x2b
    6e0a:	2037      	movs	r0, #55	; 0x37
    6e0c:	f7f9 fe2a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e10:	4903      	ldr	r1, [pc, #12]	; (6e20 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3c>)
    6e12:	6102      	str	r2, [r0, #16]
    6e14:	6008      	str	r0, [r1, #0]
    6e16:	e7ee      	b.n	6df6 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    6e18:	1b1b      	subs	r3, r3, r4
    6e1a:	60c3      	str	r3, [r0, #12]
    6e1c:	60ca      	str	r2, [r1, #12]
    6e1e:	bd10      	pop	{r4, pc}
    6e20:	20000258 	.word	0x20000258

00006e24 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>:
    6e24:	6941      	ldr	r1, [r0, #20]
    6e26:	b149      	cbz	r1, 6e3c <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x18>
    6e28:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    6e2c:	441a      	add	r2, r3
    6e2e:	68cb      	ldr	r3, [r1, #12]
    6e30:	441a      	add	r2, r3
    6e32:	60ca      	str	r2, [r1, #12]
    6e34:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
    6e38:	6111      	str	r1, [r2, #16]
    6e3a:	e002      	b.n	6e42 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x1e>
    6e3c:	4a06      	ldr	r2, [pc, #24]	; (6e58 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x34>)
    6e3e:	6901      	ldr	r1, [r0, #16]
    6e40:	6011      	str	r1, [r2, #0]
    6e42:	e9d0 1004 	ldrd	r1, r0, [r0, #16]
    6e46:	b109      	cbz	r1, 6e4c <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x28>
    6e48:	6148      	str	r0, [r1, #20]
    6e4a:	4770      	bx	lr
    6e4c:	2800      	cmp	r0, #0
    6e4e:	d0fc      	beq.n	6e4a <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x26>
    6e50:	2100      	movs	r1, #0
    6e52:	60c1      	str	r1, [r0, #12]
    6e54:	4770      	bx	lr
    6e56:	0000      	.short	0x0000
    6e58:	20000258 	.word	0x20000258

00006e5c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>:
    6e5c:	b510      	push	{r4, lr}
    6e5e:	4604      	mov	r4, r0
    6e60:	490a      	ldr	r1, [pc, #40]	; (6e8c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x30>)
    6e62:	2000      	movs	r0, #0
    6e64:	4602      	mov	r2, r0
    6e66:	6809      	ldr	r1, [r1, #0]
    6e68:	1e43      	subs	r3, r0, #1
    6e6a:	e008      	b.n	6e7e <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x22>
    6e6c:	68ca      	ldr	r2, [r1, #12]
    6e6e:	42a2      	cmp	r2, r4
    6e70:	d303      	bcc.n	6e7a <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    6e72:	429a      	cmp	r2, r3
    6e74:	d201      	bcs.n	6e7a <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    6e76:	4613      	mov	r3, r2
    6e78:	4608      	mov	r0, r1
    6e7a:	460a      	mov	r2, r1
    6e7c:	6909      	ldr	r1, [r1, #16]
    6e7e:	2900      	cmp	r1, #0
    6e80:	d1f4      	bne.n	6e6c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x10>
    6e82:	2800      	cmp	r0, #0
    6e84:	d100      	bne.n	6e88 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x2c>
    6e86:	4610      	mov	r0, r2
    6e88:	bd10      	pop	{r4, pc}
    6e8a:	0000      	.short	0x0000
    6e8c:	20000258 	.word	0x20000258

00006e90 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>:
    6e90:	4801      	ldr	r0, [pc, #4]	; (6e98 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I+0x8>)
    6e92:	6800      	ldr	r0, [r0, #0]
    6e94:	4770      	bx	lr
    6e96:	0000      	.short	0x0000
    6e98:	20000258 	.word	0x20000258

00006e9c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>:
    6e9c:	4804      	ldr	r0, [pc, #16]	; (6eb0 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x14>)
    6e9e:	6801      	ldr	r1, [r0, #0]
    6ea0:	2000      	movs	r0, #0
    6ea2:	e001      	b.n	6ea8 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0xc>
    6ea4:	4608      	mov	r0, r1
    6ea6:	6909      	ldr	r1, [r1, #16]
    6ea8:	2900      	cmp	r1, #0
    6eaa:	d1fb      	bne.n	6ea4 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x8>
    6eac:	4770      	bx	lr
    6eae:	0000      	.short	0x0000
    6eb0:	20000258 	.word	0x20000258

00006eb4 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>:
    6eb4:	4801      	ldr	r0, [pc, #4]	; (6ebc <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA+0x8>)
    6eb6:	2100      	movs	r1, #0
    6eb8:	6001      	str	r1, [r0, #0]
    6eba:	4770      	bx	lr
    6ebc:	20000258 	.word	0x20000258

00006ec0 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>:
    6ec0:	4903      	ldr	r1, [pc, #12]	; (6ed0 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0x10>)
    6ec2:	2000      	movs	r0, #0
    6ec4:	6809      	ldr	r1, [r1, #0]
    6ec6:	2900      	cmp	r1, #0
    6ec8:	d000      	beq.n	6ecc <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0xc>
    6eca:	200c      	movs	r0, #12
    6ecc:	4770      	bx	lr
    6ece:	0000      	.short	0x0000
    6ed0:	20000258 	.word	0x20000258

00006ed4 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    6ed4:	b570      	push	{r4, r5, r6, lr}
    6ed6:	6844      	ldr	r4, [r0, #4]
    6ed8:	220d      	movs	r2, #13
    6eda:	f504 759c 	add.w	r5, r4, #312	; 0x138
    6ede:	2100      	movs	r1, #0
    6ee0:	f104 0078 	add.w	r0, r4, #120	; 0x78
    6ee4:	f009 fc3d 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6ee8:	f44f 70a7 	mov.w	r0, #334	; 0x14e
    6eec:	2100      	movs	r1, #0
    6eee:	f8a4 114c 	strh.w	r1, [r4, #332]	; 0x14c
    6ef2:	5501      	strb	r1, [r0, r4]
    6ef4:	f8a5 1017 	strh.w	r1, [r5, #23]
    6ef8:	7669      	strb	r1, [r5, #25]
    6efa:	4608      	mov	r0, r1
    6efc:	f05f 017f 	movs.w	r1, #127	; 0x7f
    6f00:	eb04 0240 	add.w	r2, r4, r0, lsl #1
    6f04:	1c40      	adds	r0, r0, #1
    6f06:	b2c0      	uxtb	r0, r0
    6f08:	f882 107d 	strb.w	r1, [r2, #125]	; 0x7d
    6f0c:	2802      	cmp	r0, #2
    6f0e:	d3f7      	bcc.n	6f00 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x2c>
    6f10:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    6f14:	4620      	mov	r0, r4
    6f16:	f008 fa4e 	bl	f3b6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    6f1a:	2000      	movs	r0, #0
    6f1c:	21ff      	movs	r1, #255	; 0xff
    6f1e:	1822      	adds	r2, r4, r0
    6f20:	1c40      	adds	r0, r0, #1
    6f22:	b2c0      	uxtb	r0, r0
    6f24:	f882 1080 	strb.w	r1, [r2, #128]	; 0x80
    6f28:	2802      	cmp	r0, #2
    6f2a:	d3f8      	bcc.n	6f1e <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x4a>
    6f2c:	bd70      	pop	{r4, r5, r6, pc}
	...

00006f30 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>:
    6f30:	b500      	push	{lr}
    6f32:	7941      	ldrb	r1, [r0, #5]
    6f34:	b095      	sub	sp, #84	; 0x54
    6f36:	b141      	cbz	r1, 6f4a <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    6f38:	2901      	cmp	r1, #1
    6f3a:	d006      	beq.n	6f4a <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    6f3c:	2902      	cmp	r1, #2
    6f3e:	d004      	beq.n	6f4a <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    6f40:	2903      	cmp	r1, #3
    6f42:	d002      	beq.n	6f4a <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    6f44:	2012      	movs	r0, #18
    6f46:	b015      	add	sp, #84	; 0x54
    6f48:	bd00      	pop	{pc}
    6f4a:	7901      	ldrb	r1, [r0, #4]
    6f4c:	f88d 1000 	strb.w	r1, [sp]
    6f50:	7b01      	ldrb	r1, [r0, #12]
    6f52:	f88d 1001 	strb.w	r1, [sp, #1]
    6f56:	7942      	ldrb	r2, [r0, #5]
    6f58:	2100      	movs	r1, #0
    6f5a:	2301      	movs	r3, #1
    6f5c:	b3f2      	cbz	r2, 6fdc <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xac>
    6f5e:	2a02      	cmp	r2, #2
    6f60:	d03d      	beq.n	6fde <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xae>
    6f62:	f88d 3002 	strb.w	r3, [sp, #2]
    6f66:	bf00      	nop
    6f68:	f8d0 2006 	ldr.w	r2, [r0, #6]
    6f6c:	f8cd 2003 	str.w	r2, [sp, #3]
    6f70:	8942      	ldrh	r2, [r0, #10]
    6f72:	f8ad 2007 	strh.w	r2, [sp, #7]
    6f76:	f88d 3009 	strb.w	r3, [sp, #9]
    6f7a:	f830 2b01 	ldrh.w	r2, [r0], #1
    6f7e:	f240 2371 	movw	r3, #625	; 0x271
    6f82:	435a      	muls	r2, r3
    6f84:	9203      	str	r2, [sp, #12]
    6f86:	f8b0 2001 	ldrh.w	r2, [r0, #1]
    6f8a:	435a      	muls	r2, r3
    6f8c:	9206      	str	r2, [sp, #24]
    6f8e:	8982      	ldrh	r2, [r0, #12]
    6f90:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    6f94:	89c2      	ldrh	r2, [r0, #14]
    6f96:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
    6f9a:	8a02      	ldrh	r2, [r0, #16]
    6f9c:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    6fa0:	8a42      	ldrh	r2, [r0, #18]
    6fa2:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
    6fa6:	8a82      	ldrh	r2, [r0, #20]
    6fa8:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    6fac:	8ac0      	ldrh	r0, [r0, #22]
    6fae:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    6fb2:	2007      	movs	r0, #7
    6fb4:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    6fb8:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
    6fbc:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
    6fc0:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    6fc4:	9806      	ldr	r0, [sp, #24]
    6fc6:	f000 fa0d 	bl	73e4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x168>
    6fca:	b158      	cbz	r0, 6fe4 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb4>
    6fcc:	9803      	ldr	r0, [sp, #12]
    6fce:	f000 f9fd 	bl	73cc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x150>
    6fd2:	b138      	cbz	r0, 6fe4 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb4>
    6fd4:	4668      	mov	r0, sp
    6fd6:	f008 fc5b 	bl	f890 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>
    6fda:	e7b4      	b.n	6f46 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>
    6fdc:	e7ff      	b.n	6fde <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xae>
    6fde:	f88d 1002 	strb.w	r1, [sp, #2]
    6fe2:	e7c1      	b.n	6f68 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x38>
    6fe4:	2030      	movs	r0, #48	; 0x30
    6fe6:	e7ae      	b.n	6f46 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>

00006fe8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    6fe8:	4903      	ldr	r1, [pc, #12]	; (6ff8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    6fea:	884a      	ldrh	r2, [r1, #2]
    6fec:	8002      	strh	r2, [r0, #0]
    6fee:	7809      	ldrb	r1, [r1, #0]
    6ff0:	7081      	strb	r1, [r0, #2]
    6ff2:	2000      	movs	r0, #0
    6ff4:	4770      	bx	lr
    6ff6:	0000      	.short	0x0000
    6ff8:	20000fec 	.word	0x20000fec

00006ffc <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    6ffc:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    6ffe:	460c      	mov	r4, r1
    7000:	4605      	mov	r5, r0
    7002:	8800      	ldrh	r0, [r0, #0]
    7004:	4669      	mov	r1, sp
    7006:	f006 fd50 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    700a:	2200      	movs	r2, #0
    700c:	b128      	cbz	r0, 701a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a>
    700e:	f8c4 2002 	str.w	r2, [r4, #2]
    7012:	71a2      	strb	r2, [r4, #6]
    7014:	8022      	strh	r2, [r4, #0]
    7016:	2002      	movs	r0, #2
    7018:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    701a:	9901      	ldr	r1, [sp, #4]
    701c:	f111 0188 	adds.w	r1, r1, #136	; 0x88
    7020:	f881 2076 	strb.w	r2, [r1, #118]	; 0x76
    7024:	f8d1 0026 	ldr.w	r0, [r1, #38]	; 0x26
    7028:	f8c4 0002 	str.w	r0, [r4, #2]
    702c:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
    7030:	71a0      	strb	r0, [r4, #6]
    7032:	8828      	ldrh	r0, [r5, #0]
    7034:	8020      	strh	r0, [r4, #0]
    7036:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
    703a:	f88d 0008 	strb.w	r0, [sp, #8]
    703e:	9802      	ldr	r0, [sp, #8]
    7040:	9002      	str	r0, [sp, #8]
    7042:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7046:	2800      	cmp	r0, #0
    7048:	d1ea      	bne.n	7020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>
    704a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000704c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    704c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    704e:	460d      	mov	r5, r1
    7050:	4606      	mov	r6, r0
    7052:	8800      	ldrh	r0, [r0, #0]
    7054:	4669      	mov	r1, sp
    7056:	f006 fd28 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    705a:	2800      	cmp	r0, #0
    705c:	d11a      	bne.n	7094 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    705e:	f8dd 4004 	ldr.w	r4, [sp, #4]
    7062:	2700      	movs	r7, #0
    7064:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    7068:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    706c:	f008 fe08 	bl	fc80 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x44>
    7070:	70a8      	strb	r0, [r5, #2]
    7072:	7860      	ldrb	r0, [r4, #1]
    7074:	f008 fe04 	bl	fc80 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x44>
    7078:	70e8      	strb	r0, [r5, #3]
    707a:	78a0      	ldrb	r0, [r4, #2]
    707c:	f88d 0008 	strb.w	r0, [sp, #8]
    7080:	9802      	ldr	r0, [sp, #8]
    7082:	9002      	str	r0, [sp, #8]
    7084:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7088:	3c6a      	subs	r4, #106	; 0x6a
    708a:	2800      	cmp	r0, #0
    708c:	d1ea      	bne.n	7064 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    708e:	8830      	ldrh	r0, [r6, #0]
    7090:	8028      	strh	r0, [r5, #0]
    7092:	2000      	movs	r0, #0
    7094:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00007098 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    7098:	4903      	ldr	r1, [pc, #12]	; (70a8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    709a:	888a      	ldrh	r2, [r1, #4]
    709c:	8002      	strh	r2, [r0, #0]
    709e:	88c9      	ldrh	r1, [r1, #6]
    70a0:	8041      	strh	r1, [r0, #2]
    70a2:	2000      	movs	r0, #0
    70a4:	4770      	bx	lr
    70a6:	0000      	.short	0x0000
    70a8:	2000026a 	.word	0x2000026a

000070ac <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    70ac:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    70ae:	2400      	movs	r4, #0
    70b0:	a902      	add	r1, sp, #8
    70b2:	f88d 4004 	strb.w	r4, [sp, #4]
    70b6:	f88d 4008 	strb.w	r4, [sp, #8]
    70ba:	9100      	str	r1, [sp, #0]
    70bc:	7882      	ldrb	r2, [r0, #2]
    70be:	7841      	ldrb	r1, [r0, #1]
    70c0:	7800      	ldrb	r0, [r0, #0]
    70c2:	ab01      	add	r3, sp, #4
    70c4:	f008 ffdb 	bl	1007e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x442>
    70c8:	2800      	cmp	r0, #0
    70ca:	d112      	bne.n	70f2 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    70cc:	f89d 0004 	ldrb.w	r0, [sp, #4]
    70d0:	f008 fded 	bl	fcae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x72>
    70d4:	b170      	cbz	r0, 70f4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    70d6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    70da:	f008 fde8 	bl	fcae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x72>
    70de:	b148      	cbz	r0, 70f4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    70e0:	4805      	ldr	r0, [pc, #20]	; (70f8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    70e2:	f89d 1004 	ldrb.w	r1, [sp, #4]
    70e6:	7381      	strb	r1, [r0, #14]
    70e8:	f89d 1008 	ldrb.w	r1, [sp, #8]
    70ec:	73c1      	strb	r1, [r0, #15]
    70ee:	8204      	strh	r4, [r0, #16]
    70f0:	2000      	movs	r0, #0
    70f2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    70f4:	2011      	movs	r0, #17
    70f6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    70f8:	20000fec 	.word	0x20000fec

000070fc <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>:
    70fc:	b51c      	push	{r2, r3, r4, lr}
    70fe:	4604      	mov	r4, r0
    7100:	f006 fcbd 	bl	da7e <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>
    7104:	b148      	cbz	r0, 711a <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x1e>
    7106:	4620      	mov	r0, r4
    7108:	f7fb fae2 	bl	26d0 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>
    710c:	4909      	ldr	r1, [pc, #36]	; (7134 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x38>)
    710e:	24ff      	movs	r4, #255	; 0xff
    7110:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    7114:	e9cd 0100 	strd	r0, r1, [sp]
    7118:	e004      	b.n	7124 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x28>
    711a:	2012      	movs	r0, #18
    711c:	bd1c      	pop	{r2, r3, r4, pc}
    711e:	9800      	ldr	r0, [sp, #0]
    7120:	f880 425c 	strb.w	r4, [r0, #604]	; 0x25c
    7124:	4668      	mov	r0, sp
    7126:	f7f9 febb 	bl	ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    712a:	2800      	cmp	r0, #0
    712c:	d0f7      	beq.n	711e <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x22>
    712e:	2000      	movs	r0, #0
    7130:	bd1c      	pop	{r2, r3, r4, pc}
    7132:	0000      	.short	0x0000
    7134:	00007718 	.word	0x00007718

00007138 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    7138:	7801      	ldrb	r1, [r0, #0]
    713a:	b171      	cbz	r1, 715a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    713c:	7841      	ldrb	r1, [r0, #1]
    713e:	b161      	cbz	r1, 715a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    7140:	8841      	ldrh	r1, [r0, #2]
    7142:	291b      	cmp	r1, #27
    7144:	d309      	bcc.n	715a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    7146:	8881      	ldrh	r1, [r0, #4]
    7148:	291b      	cmp	r1, #27
    714a:	d306      	bcc.n	715a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    714c:	4904      	ldr	r1, [pc, #16]	; (7160 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    714e:	6802      	ldr	r2, [r0, #0]
    7150:	600a      	str	r2, [r1, #0]
    7152:	8880      	ldrh	r0, [r0, #4]
    7154:	8088      	strh	r0, [r1, #4]
    7156:	2000      	movs	r0, #0
    7158:	4770      	bx	lr
    715a:	2012      	movs	r0, #18
    715c:	4770      	bx	lr
    715e:	0000      	.short	0x0000
    7160:	20000fec 	.word	0x20000fec

00007164 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    7164:	6800      	ldr	r0, [r0, #0]
    7166:	f240 41e2 	movw	r1, #1250	; 0x4e2
    716a:	4288      	cmp	r0, r1
    716c:	d303      	bcc.n	7176 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    716e:	4903      	ldr	r1, [pc, #12]	; (717c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    7170:	6088      	str	r0, [r1, #8]
    7172:	2000      	movs	r0, #0
    7174:	4770      	bx	lr
    7176:	2012      	movs	r0, #18
    7178:	4770      	bx	lr
    717a:	0000      	.short	0x0000
    717c:	20000fec 	.word	0x20000fec

00007180 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>:
    7180:	b510      	push	{r4, lr}
    7182:	b086      	sub	sp, #24
    7184:	4604      	mov	r4, r0
    7186:	f008 fe6d 	bl	fe64 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x228>
    718a:	2800      	cmp	r0, #0
    718c:	d103      	bne.n	7196 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    718e:	f008 ff63 	bl	10058 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41c>
    7192:	b110      	cbz	r0, 719a <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x1a>
    7194:	200c      	movs	r0, #12
    7196:	b006      	add	sp, #24
    7198:	bd10      	pop	{r4, pc}
    719a:	2102      	movs	r1, #2
    719c:	f104 0010 	add.w	r0, r4, #16
    71a0:	f000 f92c 	bl	73fc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x180>
    71a4:	78a0      	ldrb	r0, [r4, #2]
    71a6:	f88d 0008 	strb.w	r0, [sp, #8]
    71aa:	78a0      	ldrb	r0, [r4, #2]
    71ac:	f88d 0000 	strb.w	r0, [sp]
    71b0:	7860      	ldrb	r0, [r4, #1]
    71b2:	f88d 0003 	strb.w	r0, [sp, #3]
    71b6:	7820      	ldrb	r0, [r4, #0]
    71b8:	f88d 0002 	strb.w	r0, [sp, #2]
    71bc:	7e20      	ldrb	r0, [r4, #24]
    71be:	f88d 0004 	strb.w	r0, [sp, #4]
    71c2:	78a0      	ldrb	r0, [r4, #2]
    71c4:	07c0      	lsls	r0, r0, #31
    71c6:	d00b      	beq.n	71e0 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x60>
    71c8:	78e0      	ldrb	r0, [r4, #3]
    71ca:	2801      	cmp	r0, #1
    71cc:	d011      	beq.n	71f2 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x72>
    71ce:	b190      	cbz	r0, 71f6 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x76>
    71d0:	f05f 0000 	movs.w	r0, #0
    71d4:	f88d 0001 	strb.w	r0, [sp, #1]
    71d8:	68a0      	ldr	r0, [r4, #8]
    71da:	9003      	str	r0, [sp, #12]
    71dc:	6920      	ldr	r0, [r4, #16]
    71de:	9004      	str	r0, [sp, #16]
    71e0:	a802      	add	r0, sp, #8
    71e2:	f7fd fbb7 	bl	4954 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    71e6:	2800      	cmp	r0, #0
    71e8:	d1d5      	bne.n	7196 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    71ea:	4668      	mov	r0, sp
    71ec:	f7fc f998 	bl	3520 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>
    71f0:	e7d1      	b.n	7196 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    71f2:	2002      	movs	r0, #2
    71f4:	e7ee      	b.n	71d4 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
    71f6:	2001      	movs	r0, #1
    71f8:	e7ec      	b.n	71d4 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
	...

000071fc <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>:
    71fc:	4801      	ldr	r0, [pc, #4]	; (7204 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA+0x8>)
    71fe:	f990 0000 	ldrsb.w	r0, [r0]
    7202:	4770      	bx	lr
    7204:	2000025c 	.word	0x2000025c

00007208 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    7208:	4a03      	ldr	r2, [pc, #12]	; (7218 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    720a:	e9d2 1200 	ldrd	r1, r2, [r2]
    720e:	6001      	str	r1, [r0, #0]
    7210:	6042      	str	r2, [r0, #4]
    7212:	2000      	movs	r0, #0
    7214:	4770      	bx	lr
    7216:	0000      	.short	0x0000
    7218:	00007718 	.word	0x00007718

0000721c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    721c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    721e:	8800      	ldrh	r0, [r0, #0]
    7220:	4669      	mov	r1, sp
    7222:	f006 fc42 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7226:	b968      	cbnz	r0, 7244 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    7228:	2401      	movs	r4, #1
    722a:	9801      	ldr	r0, [sp, #4]
    722c:	f008 fefe 	bl	1002c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f0>
    7230:	b140      	cbz	r0, 7244 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    7232:	9801      	ldr	r0, [sp, #4]
    7234:	4601      	mov	r1, r0
    7236:	f890 214a 	ldrb.w	r2, [r0, #330]	; 0x14a
    723a:	3088      	adds	r0, #136	; 0x88
    723c:	f501 71a5 	add.w	r1, r1, #330	; 0x14a
    7240:	b95a      	cbnz	r2, 725a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
    7242:	e001      	b.n	7248 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
    7244:	2002      	movs	r0, #2
    7246:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    7248:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
    724c:	f88d 2008 	strb.w	r2, [sp, #8]
    7250:	9a02      	ldr	r2, [sp, #8]
    7252:	9202      	str	r2, [sp, #8]
    7254:	f89d 2008 	ldrb.w	r2, [sp, #8]
    7258:	b10a      	cbz	r2, 725e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
    725a:	203a      	movs	r0, #58	; 0x3a
    725c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    725e:	f890 205f 	ldrb.w	r2, [r0, #95]	; 0x5f
    7262:	0792      	lsls	r2, r2, #30
    7264:	d006      	beq.n	7274 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>
    7266:	2203      	movs	r2, #3
    7268:	4903      	ldr	r1, [pc, #12]	; (7278 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x5c>)
    726a:	3060      	adds	r0, #96	; 0x60
    726c:	f006 ff6b 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    7270:	2000      	movs	r0, #0
    7272:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    7274:	700c      	strb	r4, [r1, #0]
    7276:	e7fb      	b.n	7270 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x54>
    7278:	0000e64f 	.word	0x0000e64f

0000727c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ>:
    727c:	b510      	push	{r4, lr}
    727e:	2005      	movs	r0, #5
    7280:	f000 fabe 	bl	7800 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    7284:	f7fe f8d4 	bl	5430 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>
    7288:	4902      	ldr	r1, [pc, #8]	; (7294 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x18>)
    728a:	4801      	ldr	r0, [pc, #4]	; (7290 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x14>)
    728c:	6048      	str	r0, [r1, #4]
    728e:	bd10      	pop	{r4, pc}
    7290:	00007299 	.word	0x00007299
    7294:	2000025c 	.word	0x2000025c
    7298:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    729c:	4613      	mov	r3, r2
    729e:	4a33      	ldr	r2, [pc, #204]	; (736c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xf0>)
    72a0:	460f      	mov	r7, r1
    72a2:	f8b0 1054 	ldrh.w	r1, [r0, #84]	; 0x54
    72a6:	8814      	ldrh	r4, [r2, #0]
    72a8:	f8b0 6052 	ldrh.w	r6, [r0, #82]	; 0x52
    72ac:	428c      	cmp	r4, r1
    72ae:	d200      	bcs.n	72b2 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x36>
    72b0:	4621      	mov	r1, r4
    72b2:	4688      	mov	r8, r1
    72b4:	8891      	ldrh	r1, [r2, #4]
    72b6:	42b1      	cmp	r1, r6
    72b8:	d200      	bcs.n	72bc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x40>
    72ba:	460e      	mov	r6, r1
    72bc:	8851      	ldrh	r1, [r2, #2]
    72be:	f640 0448 	movw	r4, #2120	; 0x848
    72c2:	42a1      	cmp	r1, r4
    72c4:	d300      	bcc.n	72c8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x4c>
    72c6:	4621      	mov	r1, r4
    72c8:	88d5      	ldrh	r5, [r2, #6]
    72ca:	42a5      	cmp	r5, r4
    72cc:	d300      	bcc.n	72d0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x54>
    72ce:	4625      	mov	r5, r4
    72d0:	42a1      	cmp	r1, r4
    72d2:	d200      	bcs.n	72d6 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x5a>
    72d4:	460c      	mov	r4, r1
    72d6:	f44f 72a4 	mov.w	r2, #328	; 0x148
    72da:	2e1b      	cmp	r6, #27
    72dc:	d001      	beq.n	72e2 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x66>
    72de:	4295      	cmp	r5, r2
    72e0:	d104      	bne.n	72ec <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x70>
    72e2:	f1b8 0f1b 	cmp.w	r8, #27
    72e6:	d03e      	beq.n	7366 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xea>
    72e8:	4294      	cmp	r4, r2
    72ea:	d03c      	beq.n	7366 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xea>
    72ec:	466a      	mov	r2, sp
    72ee:	4619      	mov	r1, r3
    72f0:	f008 fe43 	bl	ff7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33e>
    72f4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    72f8:	4641      	mov	r1, r8
    72fa:	4540      	cmp	r0, r8
    72fc:	d900      	bls.n	7300 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x84>
    72fe:	4608      	mov	r0, r1
    7300:	80f8      	strh	r0, [r7, #6]
    7302:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7306:	42a1      	cmp	r1, r4
    7308:	d800      	bhi.n	730c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x90>
    730a:	460c      	mov	r4, r1
    730c:	813c      	strh	r4, [r7, #8]
    730e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    7312:	42b1      	cmp	r1, r6
    7314:	d800      	bhi.n	7318 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x9c>
    7316:	460e      	mov	r6, r1
    7318:	807e      	strh	r6, [r7, #2]
    731a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    731e:	42a9      	cmp	r1, r5
    7320:	d800      	bhi.n	7324 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xa8>
    7322:	460d      	mov	r5, r1
    7324:	80bd      	strh	r5, [r7, #4]
    7326:	21ff      	movs	r1, #255	; 0xff
    7328:	7039      	strb	r1, [r7, #0]
    732a:	381b      	subs	r0, #27
    732c:	28e0      	cmp	r0, #224	; 0xe0
    732e:	d902      	bls.n	7336 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xba>
    7330:	f640 516e 	movw	r1, #3438	; 0xd6e
    7334:	e014      	b.n	7360 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xe4>
    7336:	3e1b      	subs	r6, #27
    7338:	2ee0      	cmp	r6, #224	; 0xe0
    733a:	d902      	bls.n	7342 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xc6>
    733c:	f44f 6157 	mov.w	r1, #3440	; 0xd70
    7340:	e00e      	b.n	7360 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xe4>
    7342:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    7346:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    734a:	4284      	cmp	r4, r0
    734c:	d902      	bls.n	7354 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xd8>
    734e:	f640 5172 	movw	r1, #3442	; 0xd72
    7352:	e005      	b.n	7360 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xe4>
    7354:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    7358:	4285      	cmp	r5, r0
    735a:	d904      	bls.n	7366 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xea>
    735c:	f640 5174 	movw	r1, #3444	; 0xd74
    7360:	2039      	movs	r0, #57	; 0x39
    7362:	f7f9 fb7f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7366:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    736a:	0000      	.short	0x0000
    736c:	2000026a 	.word	0x2000026a
    7370:	b510      	push	{r4, lr}
    7372:	480e      	ldr	r0, [pc, #56]	; (73ac <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x130>)
    7374:	2100      	movs	r1, #0
    7376:	4b0e      	ldr	r3, [pc, #56]	; (73b0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x134>)
    7378:	74c1      	strb	r1, [r0, #19]
    737a:	8281      	strh	r1, [r0, #20]
    737c:	221b      	movs	r2, #27
    737e:	801a      	strh	r2, [r3, #0]
    7380:	f44f 74a4 	mov.w	r4, #328	; 0x148
    7384:	805c      	strh	r4, [r3, #2]
    7386:	809a      	strh	r2, [r3, #4]
    7388:	80dc      	strh	r4, [r3, #6]
    738a:	7381      	strb	r1, [r0, #14]
    738c:	73c1      	strb	r1, [r0, #15]
    738e:	2303      	movs	r3, #3
    7390:	7003      	strb	r3, [r0, #0]
    7392:	2302      	movs	r3, #2
    7394:	7043      	strb	r3, [r0, #1]
    7396:	8042      	strh	r2, [r0, #2]
    7398:	8082      	strh	r2, [r0, #4]
    739a:	f640 62a6 	movw	r2, #3750	; 0xea6
    739e:	6082      	str	r2, [r0, #8]
    73a0:	7481      	strb	r1, [r0, #18]
    73a2:	7301      	strb	r1, [r0, #12]
    73a4:	4802      	ldr	r0, [pc, #8]	; (73b0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x134>)
    73a6:	1f80      	subs	r0, r0, #6
    73a8:	7001      	strb	r1, [r0, #0]
    73aa:	bd10      	pop	{r4, pc}
    73ac:	20000fec 	.word	0x20000fec
    73b0:	2000026a 	.word	0x2000026a
    73b4:	4904      	ldr	r1, [pc, #16]	; (73c8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x14c>)
    73b6:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    73ba:	4288      	cmp	r0, r1
    73bc:	d301      	bcc.n	73c2 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x146>
    73be:	2000      	movs	r0, #0
    73c0:	4770      	bx	lr
    73c2:	2001      	movs	r0, #1
    73c4:	4770      	bx	lr
    73c6:	0000      	.short	0x0000
    73c8:	0270f3cc 	.word	0x0270f3cc
    73cc:	4904      	ldr	r1, [pc, #16]	; (73e0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x164>)
    73ce:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    73d2:	4288      	cmp	r0, r1
    73d4:	d301      	bcc.n	73da <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x15e>
    73d6:	2000      	movs	r0, #0
    73d8:	4770      	bx	lr
    73da:	2001      	movs	r0, #1
    73dc:	4770      	bx	lr
    73de:	0000      	.short	0x0000
    73e0:	009c363d 	.word	0x009c363d
    73e4:	4904      	ldr	r1, [pc, #16]	; (73f8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x17c>)
    73e6:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    73ea:	4288      	cmp	r0, r1
    73ec:	d301      	bcc.n	73f2 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x176>
    73ee:	2000      	movs	r0, #0
    73f0:	4770      	bx	lr
    73f2:	2001      	movs	r0, #1
    73f4:	4770      	bx	lr
    73f6:	0000      	.short	0x0000
    73f8:	009c363d 	.word	0x009c363d
    73fc:	b530      	push	{r4, r5, lr}
    73fe:	2200      	movs	r2, #0
    7400:	4d07      	ldr	r5, [pc, #28]	; (7420 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1a4>)
    7402:	e009      	b.n	7418 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x19c>
    7404:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    7408:	462b      	mov	r3, r5
    740a:	429c      	cmp	r4, r3
    740c:	d800      	bhi.n	7410 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x194>
    740e:	4623      	mov	r3, r4
    7410:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    7414:	1c52      	adds	r2, r2, #1
    7416:	b2d2      	uxtb	r2, r2
    7418:	428a      	cmp	r2, r1
    741a:	d3f3      	bcc.n	7404 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x188>
    741c:	bd30      	pop	{r4, r5, pc}
    741e:	0000      	.short	0x0000
    7420:	00f42400 	.word	0x00f42400
    7424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7428:	4604      	mov	r4, r0
    742a:	a05c      	add	r0, pc, #368	; (adr r0, 759c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x320>)
    742c:	4688      	mov	r8, r1
    742e:	e9d0 7600 	ldrd	r7, r6, [r0]
    7432:	b087      	sub	sp, #28
    7434:	4699      	mov	r9, r3
    7436:	4615      	mov	r5, r2
    7438:	2100      	movs	r1, #0
    743a:	4620      	mov	r0, r4
    743c:	f7fb f88c 	bl	2558 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    7440:	f8a4 8000 	strh.w	r8, [r4]
    7444:	4857      	ldr	r0, [pc, #348]	; (75a4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x328>)
    7446:	f8c4 0258 	str.w	r0, [r4, #600]	; 0x258
    744a:	f000 f9e5 	bl	7818 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    744e:	0940      	lsrs	r0, r0, #5
    7450:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    7454:	07c1      	lsls	r1, r0, #31
    7456:	f8df 8150 	ldr.w	r8, [pc, #336]	; 75a8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x32c>
    745a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    745e:	d006      	beq.n	746e <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1f2>
    7460:	f8b8 2002 	ldrh.w	r2, [r8, #2]
    7464:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    7468:	84c2      	strh	r2, [r0, #38]	; 0x26
    746a:	8501      	strh	r1, [r0, #40]	; 0x28
    746c:	e002      	b.n	7474 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1f8>
    746e:	211b      	movs	r1, #27
    7470:	84c1      	strh	r1, [r0, #38]	; 0x26
    7472:	8501      	strh	r1, [r0, #40]	; 0x28
    7474:	f000 f9d0 	bl	7818 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    7478:	0788      	lsls	r0, r1, #30
    747a:	d506      	bpl.n	748a <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x20e>
    747c:	2000      	movs	r0, #0
    747e:	f88d 0000 	strb.w	r0, [sp]
    7482:	4668      	mov	r0, sp
    7484:	9401      	str	r4, [sp, #4]
    7486:	f7ff fd25 	bl	6ed4 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    748a:	f898 1001 	ldrb.w	r1, [r8, #1]
    748e:	9100      	str	r1, [sp, #0]
    7490:	f898 3000 	ldrb.w	r3, [r8]
    7494:	f8b8 2004 	ldrh.w	r2, [r8, #4]
    7498:	f8b8 1002 	ldrh.w	r1, [r8, #2]
    749c:	8820      	ldrh	r0, [r4, #0]
    749e:	f7f9 fded 	bl	107c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    74a2:	b120      	cbz	r0, 74ae <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x232>
    74a4:	f640 7106 	movw	r1, #3846	; 0xf06
    74a8:	2039      	movs	r0, #57	; 0x39
    74aa:	f7f9 fadb 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74ae:	f006 ffb7 	bl	e420 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>
    74b2:	6160      	str	r0, [r4, #20]
    74b4:	f1b9 0f00 	cmp.w	r9, #0
    74b8:	d004      	beq.n	74c4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x248>
    74ba:	f7fb fc85 	bl	2dc8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    74be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    74c2:	61e0      	str	r0, [r4, #28]
    74c4:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
    74c8:	eb05 0040 	add.w	r0, r5, r0, lsl #1
    74cc:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
    74ce:	f006 faf8 	bl	dac2 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    74d2:	6120      	str	r0, [r4, #16]
    74d4:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
    74d8:	eb05 0040 	add.w	r0, r5, r0, lsl #1
    74dc:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    74de:	8320      	strh	r0, [r4, #24]
    74e0:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
    74e4:	eb05 0040 	add.w	r0, r5, r0, lsl #1
    74e8:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    74ea:	8360      	strh	r0, [r4, #26]
    74ec:	7a68      	ldrb	r0, [r5, #9]
    74ee:	f008 fbbd 	bl	fc6c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30>
    74f2:	f8d8 1008 	ldr.w	r1, [r8, #8]
    74f6:	4645      	mov	r5, r8
    74f8:	4620      	mov	r0, r4
    74fa:	62e1      	str	r1, [r4, #44]	; 0x2c
    74fc:	f007 fb6d 	bl	ebda <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY>
    7500:	f8c4 70ae 	str.w	r7, [r4, #174]	; 0xae
    7504:	f884 60b2 	strb.w	r6, [r4, #178]	; 0xb2
    7508:	20ff      	movs	r0, #255	; 0xff
    750a:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    750e:	4825      	ldr	r0, [pc, #148]	; (75a4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x328>)
    7510:	3808      	subs	r0, #8
    7512:	6843      	ldr	r3, [r0, #4]
    7514:	b123      	cbz	r3, 7520 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x2a4>
    7516:	2201      	movs	r2, #1
    7518:	f504 719d 	add.w	r1, r4, #314	; 0x13a
    751c:	4620      	mov	r0, r4
    751e:	4798      	blx	r3
    7520:	8821      	ldrh	r1, [r4, #0]
    7522:	f8ad 1004 	strh.w	r1, [sp, #4]
    7526:	7ba9      	ldrb	r1, [r5, #14]
    7528:	f88d 1006 	strb.w	r1, [sp, #6]
    752c:	7be9      	ldrb	r1, [r5, #15]
    752e:	f88d 1007 	strb.w	r1, [sp, #7]
    7532:	8a29      	ldrh	r1, [r5, #16]
    7534:	f8ad 1008 	strh.w	r1, [sp, #8]
    7538:	a904      	add	r1, sp, #16
    753a:	9100      	str	r1, [sp, #0]
    753c:	2000      	movs	r0, #0
    753e:	ab03      	add	r3, sp, #12
    7540:	aa01      	add	r2, sp, #4
    7542:	4621      	mov	r1, r4
    7544:	f008 fd4f 	bl	ffe6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3aa>
    7548:	0005      	movs	r5, r0
    754a:	d10f      	bne.n	756c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x2f0>
    754c:	f89d 000c 	ldrb.w	r0, [sp, #12]
    7550:	f88d 0014 	strb.w	r0, [sp, #20]
    7554:	f89d 0010 	ldrb.w	r0, [sp, #16]
    7558:	f88d 0015 	strb.w	r0, [sp, #21]
    755c:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    7560:	f8ad 0016 	strh.w	r0, [sp, #22]
    7564:	a905      	add	r1, sp, #20
    7566:	4620      	mov	r0, r4
    7568:	f006 fb79 	bl	dc5e <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    756c:	f7fb fc2c 	bl	2dc8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    7570:	210c      	movs	r1, #12
    7572:	fbb0 f2f1 	udiv	r2, r0, r1
    7576:	fb01 0012 	mls	r0, r1, r2, r0
    757a:	1d40      	adds	r0, r0, #5
    757c:	b2c0      	uxtb	r0, r0
    757e:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
    7582:	2809      	cmp	r0, #9
    7584:	d202      	bcs.n	758c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x310>
    7586:	3008      	adds	r0, #8
    7588:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
    758c:	2101      	movs	r1, #1
    758e:	4620      	mov	r0, r4
    7590:	f7fa ffe2 	bl	2558 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    7594:	b007      	add	sp, #28
    7596:	4628      	mov	r0, r5
    7598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    759c:	ffffffff 	.word	0xffffffff
    75a0:	0000001f 	.word	0x0000001f
    75a4:	20000264 	.word	0x20000264
    75a8:	20000fec 	.word	0x20000fec
    75ac:	4a09      	ldr	r2, [pc, #36]	; (75d4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x358>)
    75ae:	4290      	cmp	r0, r2
    75b0:	d80b      	bhi.n	75ca <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x34e>
    75b2:	2901      	cmp	r1, #1
    75b4:	d002      	beq.n	75bc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x340>
    75b6:	2904      	cmp	r1, #4
    75b8:	d003      	beq.n	75c2 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x346>
    75ba:	e008      	b.n	75ce <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x352>
    75bc:	f240 7153 	movw	r1, #1875	; 0x753
    75c0:	e001      	b.n	75c6 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x34a>
    75c2:	f640 11c4 	movw	r1, #2500	; 0x9c4
    75c6:	4288      	cmp	r0, r1
    75c8:	d201      	bcs.n	75ce <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x352>
    75ca:	2000      	movs	r0, #0
    75cc:	4770      	bx	lr
    75ce:	2001      	movs	r0, #1
    75d0:	4770      	bx	lr
    75d2:	0000      	.short	0x0000
    75d4:	0270fd8f 	.word	0x0270fd8f
    75d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    75dc:	b088      	sub	sp, #32
    75de:	4604      	mov	r4, r0
    75e0:	8800      	ldrh	r0, [r0, #0]
    75e2:	a906      	add	r1, sp, #24
    75e4:	f006 fa61 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    75e8:	2800      	cmp	r0, #0
    75ea:	d147      	bne.n	767c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    75ec:	9807      	ldr	r0, [sp, #28]
    75ee:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    75f2:	f88d 1008 	strb.w	r1, [sp, #8]
    75f6:	9902      	ldr	r1, [sp, #8]
    75f8:	9102      	str	r1, [sp, #8]
    75fa:	f89d 1008 	ldrb.w	r1, [sp, #8]
    75fe:	3088      	adds	r0, #136	; 0x88
    7600:	b101      	cbz	r1, 7604 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x388>
    7602:	2101      	movs	r1, #1
    7604:	f88d 100c 	strb.w	r1, [sp, #12]
    7608:	7f81      	ldrb	r1, [r0, #30]
    760a:	f04f 0801 	mov.w	r8, #1
    760e:	291e      	cmp	r1, #30
    7610:	d102      	bne.n	7618 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x39c>
    7612:	f89d 100c 	ldrb.w	r1, [sp, #12]
    7616:	b149      	cbz	r1, 762c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3b0>
    7618:	f05f 0100 	movs.w	r1, #0
    761c:	f88d 1004 	strb.w	r1, [sp, #4]
    7620:	2105      	movs	r1, #5
    7622:	306e      	adds	r0, #110	; 0x6e
    7624:	f007 ff37 	bl	f496 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
    7628:	b110      	cbz	r0, 7630 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3b4>
    762a:	e004      	b.n	7636 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3ba>
    762c:	2101      	movs	r1, #1
    762e:	e7f5      	b.n	761c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3a0>
    7630:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7634:	b308      	cbz	r0, 767a <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3fe>
    7636:	8921      	ldrh	r1, [r4, #8]
    7638:	88e0      	ldrh	r0, [r4, #6]
    763a:	f008 fb4d 	bl	fcd8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    763e:	2800      	cmp	r0, #0
    7640:	d11c      	bne.n	767c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    7642:	88a1      	ldrh	r1, [r4, #4]
    7644:	8860      	ldrh	r0, [r4, #2]
    7646:	f008 fb47 	bl	fcd8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    764a:	2800      	cmp	r0, #0
    764c:	d116      	bne.n	767c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    764e:	8921      	ldrh	r1, [r4, #8]
    7650:	88e0      	ldrh	r0, [r4, #6]
    7652:	f008 fb37 	bl	fcc4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x88>
    7656:	2800      	cmp	r0, #0
    7658:	d110      	bne.n	767c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    765a:	88a1      	ldrh	r1, [r4, #4]
    765c:	8860      	ldrh	r0, [r4, #2]
    765e:	f008 fb31 	bl	fcc4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x88>
    7662:	0006      	movs	r6, r0
    7664:	d10a      	bne.n	767c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    7666:	9807      	ldr	r0, [sp, #28]
    7668:	f500 759d 	add.w	r5, r0, #314	; 0x13a
    766c:	27ff      	movs	r7, #255	; 0xff
    766e:	706f      	strb	r7, [r5, #1]
    7670:	f89d 100c 	ldrb.w	r1, [sp, #12]
    7674:	b129      	cbz	r1, 7682 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x406>
    7676:	263a      	movs	r6, #58	; 0x3a
    7678:	e02e      	b.n	76d8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x45c>
    767a:	201a      	movs	r0, #26
    767c:	b008      	add	sp, #32
    767e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7682:	4641      	mov	r1, r8
    7684:	aa03      	add	r2, sp, #12
    7686:	f008 fc78 	bl	ff7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33e>
    768a:	8861      	ldrh	r1, [r4, #2]
    768c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    7690:	4281      	cmp	r1, r0
    7692:	d200      	bcs.n	7696 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x41a>
    7694:	4608      	mov	r0, r1
    7696:	80e8      	strh	r0, [r5, #6]
    7698:	88a1      	ldrh	r1, [r4, #4]
    769a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    769e:	4281      	cmp	r1, r0
    76a0:	d200      	bcs.n	76a4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x428>
    76a2:	4608      	mov	r0, r1
    76a4:	8128      	strh	r0, [r5, #8]
    76a6:	88e2      	ldrh	r2, [r4, #6]
    76a8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    76ac:	428a      	cmp	r2, r1
    76ae:	d200      	bcs.n	76b2 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x436>
    76b0:	4611      	mov	r1, r2
    76b2:	8069      	strh	r1, [r5, #2]
    76b4:	8922      	ldrh	r2, [r4, #8]
    76b6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    76ba:	428a      	cmp	r2, r1
    76bc:	d200      	bcs.n	76c0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x444>
    76be:	4611      	mov	r1, r2
    76c0:	f640 0248 	movw	r2, #2120	; 0x848
    76c4:	80a9      	strh	r1, [r5, #4]
    76c6:	4291      	cmp	r1, r2
    76c8:	d300      	bcc.n	76cc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x450>
    76ca:	4611      	mov	r1, r2
    76cc:	80a9      	strh	r1, [r5, #4]
    76ce:	4290      	cmp	r0, r2
    76d0:	d200      	bcs.n	76d4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x458>
    76d2:	4602      	mov	r2, r0
    76d4:	812a      	strh	r2, [r5, #8]
    76d6:	702f      	strb	r7, [r5, #0]
    76d8:	2000      	movs	r0, #0
    76da:	7068      	strb	r0, [r5, #1]
    76dc:	4630      	mov	r0, r6
    76de:	e7cd      	b.n	767c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    76e0:	b510      	push	{r4, lr}
    76e2:	4604      	mov	r4, r0
    76e4:	88c1      	ldrh	r1, [r0, #6]
    76e6:	8880      	ldrh	r0, [r0, #4]
    76e8:	f008 faf6 	bl	fcd8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    76ec:	2800      	cmp	r0, #0
    76ee:	d10f      	bne.n	7710 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x494>
    76f0:	8861      	ldrh	r1, [r4, #2]
    76f2:	8820      	ldrh	r0, [r4, #0]
    76f4:	f008 faf0 	bl	fcd8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    76f8:	2800      	cmp	r0, #0
    76fa:	d109      	bne.n	7710 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x494>
    76fc:	4805      	ldr	r0, [pc, #20]	; (7714 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x498>)
    76fe:	88a1      	ldrh	r1, [r4, #4]
    7700:	8081      	strh	r1, [r0, #4]
    7702:	8821      	ldrh	r1, [r4, #0]
    7704:	8001      	strh	r1, [r0, #0]
    7706:	88e1      	ldrh	r1, [r4, #6]
    7708:	80c1      	strh	r1, [r0, #6]
    770a:	8861      	ldrh	r1, [r4, #2]
    770c:	8041      	strh	r1, [r0, #2]
    770e:	2000      	movs	r0, #0
    7710:	bd10      	pop	{r4, pc}
    7712:	0000      	.short	0x0000
    7714:	2000026a 	.word	0x2000026a
    7718:	0c124b0c 	.word	0x0c124b0c
    771c:	124b0059 	.word	0x124b0059
	...

00007728 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    7728:	b570      	push	{r4, r5, r6, lr}
    772a:	460d      	mov	r5, r1
    772c:	f7fb f9da 	bl	2ae4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    7730:	4c05      	ldr	r4, [pc, #20]	; (7748 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x20>)
    7732:	6065      	str	r5, [r4, #4]
    7734:	68a0      	ldr	r0, [r4, #8]
    7736:	f008 fcd1 	bl	100dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a0>
    773a:	f008 f9f7 	bl	fb2c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    773e:	f7fb fb37 	bl	2db0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    7742:	2001      	movs	r0, #1
    7744:	7020      	strb	r0, [r4, #0]
    7746:	bd70      	pop	{r4, r5, r6, pc}
    7748:	20000274 	.word	0x20000274

0000774c <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>:
    774c:	4801      	ldr	r0, [pc, #4]	; (7754 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ+0x8>)
    774e:	7800      	ldrb	r0, [r0, #0]
    7750:	4770      	bx	lr
    7752:	0000      	.short	0x0000
    7754:	20000274 	.word	0x20000274

00007758 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    7758:	b510      	push	{r4, lr}
    775a:	4c06      	ldr	r4, [pc, #24]	; (7774 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x1c>)
    775c:	68e0      	ldr	r0, [r4, #12]
    775e:	f008 fcbd 	bl	100dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a0>
    7762:	6920      	ldr	r0, [r4, #16]
    7764:	f008 fcba 	bl	100dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a0>
    7768:	f008 fa68 	bl	fc3c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    776c:	2000      	movs	r0, #0
    776e:	7020      	strb	r0, [r4, #0]
    7770:	bd10      	pop	{r4, pc}
    7772:	0000      	.short	0x0000
    7774:	20000274 	.word	0x20000274

00007778 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>:
    7778:	b510      	push	{r4, lr}
    777a:	4908      	ldr	r1, [pc, #32]	; (779c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x24>)
    777c:	4808      	ldr	r0, [pc, #32]	; (77a0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    777e:	f008 fca0 	bl	100c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x486>
    7782:	4807      	ldr	r0, [pc, #28]	; (77a0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    7784:	4907      	ldr	r1, [pc, #28]	; (77a4 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x2c>)
    7786:	1d00      	adds	r0, r0, #4
    7788:	f008 fc9b 	bl	100c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x486>
    778c:	4804      	ldr	r0, [pc, #16]	; (77a0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    778e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7792:	4905      	ldr	r1, [pc, #20]	; (77a8 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x30>)
    7794:	3008      	adds	r0, #8
    7796:	f008 bc94 	b.w	100c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x486>
    779a:	0000      	.short	0x0000
    779c:	20000290 	.word	0x20000290
    77a0:	2000027c 	.word	0x2000027c
    77a4:	20000298 	.word	0x20000298
    77a8:	20000288 	.word	0x20000288
    77ac:	b510      	push	{r4, lr}
    77ae:	f7fb fe33 	bl	3418 <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI>
    77b2:	f000 f813 	bl	77dc <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x64>
    77b6:	f006 f868 	bl	d88a <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    77ba:	4907      	ldr	r1, [pc, #28]	; (77d8 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x60>)
    77bc:	f5a1 7081 	sub.w	r0, r1, #258	; 0x102
    77c0:	f7f9 ff72 	bl	16a8 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    77c4:	2000      	movs	r0, #0
    77c6:	f005 ffbe 	bl	d746 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    77ca:	f7fd fe77 	bl	54bc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>
    77ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    77d2:	f7fb b98d 	b.w	2af0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY>
    77d6:	0000      	.short	0x0000
    77d8:	2000183a 	.word	0x2000183a
    77dc:	b510      	push	{r4, lr}
    77de:	f7ff fb69 	bl	6eb4 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>
    77e2:	f7fd f88f 	bl	4904 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q>
    77e6:	f7fd fcfb 	bl	51e0 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>
    77ea:	f7ff fd07 	bl	71fc <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>
    77ee:	4601      	mov	r1, r0
    77f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    77f4:	4801      	ldr	r0, [pc, #4]	; (77fc <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x84>)
    77f6:	f7fb bd6b 	b.w	32d0 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>
    77fa:	0000      	.short	0x0000
    77fc:	20001738 	.word	0x20001738

00007800 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    7800:	4a04      	ldr	r2, [pc, #16]	; (7814 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    7802:	08c1      	lsrs	r1, r0, #3
    7804:	f000 0307 	and.w	r3, r0, #7
    7808:	2001      	movs	r0, #1
    780a:	4098      	lsls	r0, r3
    780c:	5c53      	ldrb	r3, [r2, r1]
    780e:	4303      	orrs	r3, r0
    7810:	5453      	strb	r3, [r2, r1]
    7812:	4770      	bx	lr
    7814:	20000020 	.word	0x20000020

00007818 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    7818:	4901      	ldr	r1, [pc, #4]	; (7820 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    781a:	e9d1 0100 	ldrd	r0, r1, [r1]
    781e:	4770      	bx	lr
    7820:	20000020 	.word	0x20000020

00007824 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    7824:	4806      	ldr	r0, [pc, #24]	; (7840 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    7826:	8801      	ldrh	r1, [r0, #0]
    7828:	7900      	ldrb	r0, [r0, #4]
    782a:	0602      	lsls	r2, r0, #24
    782c:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    7830:	f000 0001 	and.w	r0, r0, #1
    7834:	1800      	adds	r0, r0, r0
    7836:	b2c0      	uxtb	r0, r0
    7838:	f040 0001 	orr.w	r0, r0, #1
    783c:	4770      	bx	lr
    783e:	0000      	.short	0x0000
    7840:	20000020 	.word	0x20000020

00007844 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    7844:	b510      	push	{r4, lr}
    7846:	f004 fc99 	bl	c17c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    784a:	2200      	movs	r2, #0
    784c:	4b08      	ldr	r3, [pc, #32]	; (7870 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    784e:	4611      	mov	r1, r2
    7850:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    7854:	4284      	cmp	r4, r0
    7856:	d303      	bcc.n	7860 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    7858:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    785c:	7882      	ldrb	r2, [r0, #2]
    785e:	e003      	b.n	7868 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    7860:	1c49      	adds	r1, r1, #1
    7862:	b2c9      	uxtb	r1, r1
    7864:	290c      	cmp	r1, #12
    7866:	d3f3      	bcc.n	7850 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    7868:	4802      	ldr	r0, [pc, #8]	; (7874 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    786a:	7002      	strb	r2, [r0, #0]
    786c:	bd10      	pop	{r4, pc}
    786e:	0000      	.short	0x0000
    7870:	00010158 	.word	0x00010158
    7874:	20000359 	.word	0x20000359

00007878 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
    7878:	4802      	ldr	r0, [pc, #8]	; (7884 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0xc>)
    787a:	7800      	ldrb	r0, [r0, #0]
    787c:	f000 0007 	and.w	r0, r0, #7
    7880:	4770      	bx	lr
    7882:	0000      	.short	0x0000
    7884:	20000359 	.word	0x20000359

00007888 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    7888:	b570      	push	{r4, r5, r6, lr}
    788a:	4605      	mov	r5, r0
    788c:	4616      	mov	r6, r2
    788e:	460c      	mov	r4, r1
    7890:	2002      	movs	r0, #2
    7892:	f000 f9b7 	bl	7c04 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7896:	4906      	ldr	r1, [pc, #24]	; (78b0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    7898:	2001      	movs	r0, #1
    789a:	1ef6      	subs	r6, r6, #3
    789c:	7008      	strb	r0, [r1, #0]
    789e:	4805      	ldr	r0, [pc, #20]	; (78b4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    78a0:	6006      	str	r6, [r0, #0]
    78a2:	4804      	ldr	r0, [pc, #16]	; (78b4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    78a4:	3808      	subs	r0, #8
    78a6:	6005      	str	r5, [r0, #0]
    78a8:	1f00      	subs	r0, r0, #4
    78aa:	6004      	str	r4, [r0, #0]
    78ac:	bd70      	pop	{r4, r5, r6, pc}
    78ae:	0000      	.short	0x0000
    78b0:	2000035a 	.word	0x2000035a
    78b4:	4000f510 	.word	0x4000f510

000078b8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    78b8:	b510      	push	{r4, lr}
    78ba:	4c0c      	ldr	r4, [pc, #48]	; (78ec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    78bc:	7820      	ldrb	r0, [r4, #0]
    78be:	b180      	cbz	r0, 78e2 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    78c0:	490b      	ldr	r1, [pc, #44]	; (78f0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    78c2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    78c6:	6008      	str	r0, [r1, #0]
    78c8:	f000 f86a 	bl	79a0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    78cc:	2100      	movs	r1, #0
    78ce:	b120      	cbz	r0, 78da <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    78d0:	2001      	movs	r0, #1
    78d2:	7060      	strb	r0, [r4, #1]
    78d4:	4807      	ldr	r0, [pc, #28]	; (78f4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    78d6:	6800      	ldr	r0, [r0, #0]
    78d8:	e001      	b.n	78de <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    78da:	7061      	strb	r1, [r4, #1]
    78dc:	2010      	movs	r0, #16
    78de:	70a0      	strb	r0, [r4, #2]
    78e0:	7021      	strb	r1, [r4, #0]
    78e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    78e6:	2000      	movs	r0, #0
    78e8:	f000 b98c 	b.w	7c04 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    78ec:	2000035a 	.word	0x2000035a
    78f0:	4001f508 	.word	0x4001f508
    78f4:	4000f400 	.word	0x4000f400

000078f8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    78f8:	b510      	push	{r4, lr}
    78fa:	2002      	movs	r0, #2
    78fc:	f000 f982 	bl	7c04 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7900:	4904      	ldr	r1, [pc, #16]	; (7914 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    7902:	2001      	movs	r0, #1
    7904:	7008      	strb	r0, [r1, #0]
    7906:	f000 f859 	bl	79bc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    790a:	4903      	ldr	r1, [pc, #12]	; (7918 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    790c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7910:	6008      	str	r0, [r1, #0]
    7912:	bd10      	pop	{r4, pc}
    7914:	2000035a 	.word	0x2000035a
    7918:	4001f504 	.word	0x4001f504

0000791c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    791c:	4803      	ldr	r0, [pc, #12]	; (792c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    791e:	2100      	movs	r1, #0
    7920:	7001      	strb	r1, [r0, #0]
    7922:	7041      	strb	r1, [r0, #1]
    7924:	2110      	movs	r1, #16
    7926:	7081      	strb	r1, [r0, #2]
    7928:	4770      	bx	lr
    792a:	0000      	.short	0x0000
    792c:	2000035a 	.word	0x2000035a

00007930 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    7930:	4807      	ldr	r0, [pc, #28]	; (7950 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    7932:	b510      	push	{r4, lr}
    7934:	7801      	ldrb	r1, [r0, #0]
    7936:	b141      	cbz	r1, 794a <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    7938:	f000 f832 	bl	79a0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    793c:	b118      	cbz	r0, 7946 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    793e:	4805      	ldr	r0, [pc, #20]	; (7954 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    7940:	6800      	ldr	r0, [r0, #0]
    7942:	b2c0      	uxtb	r0, r0
    7944:	bd10      	pop	{r4, pc}
    7946:	2010      	movs	r0, #16
    7948:	bd10      	pop	{r4, pc}
    794a:	7880      	ldrb	r0, [r0, #2]
    794c:	bd10      	pop	{r4, pc}
    794e:	0000      	.short	0x0000
    7950:	2000035a 	.word	0x2000035a
    7954:	4000f400 	.word	0x4000f400

00007958 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    7958:	4808      	ldr	r0, [pc, #32]	; (797c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    795a:	b510      	push	{r4, lr}
    795c:	7801      	ldrb	r1, [r0, #0]
    795e:	b159      	cbz	r1, 7978 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    7960:	4807      	ldr	r0, [pc, #28]	; (7980 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    7962:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7966:	b128      	cbz	r0, 7974 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    7968:	f000 f80c 	bl	7984 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    796c:	2800      	cmp	r0, #0
    796e:	d000      	beq.n	7972 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    7970:	2001      	movs	r0, #1
    7972:	bd10      	pop	{r4, pc}
    7974:	2002      	movs	r0, #2
    7976:	bd10      	pop	{r4, pc}
    7978:	7840      	ldrb	r0, [r0, #1]
    797a:	bd10      	pop	{r4, pc}
    797c:	2000035a 	.word	0x2000035a
    7980:	4000f000 	.word	0x4000f000
    7984:	4805      	ldr	r0, [pc, #20]	; (799c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    7986:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    798a:	b111      	cbz	r1, 7992 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    798c:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    7990:	b108      	cbz	r0, 7996 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    7992:	2000      	movs	r0, #0
    7994:	4770      	bx	lr
    7996:	2001      	movs	r0, #1
    7998:	4770      	bx	lr
    799a:	0000      	.short	0x0000
    799c:	4000f000 	.word	0x4000f000
    79a0:	4805      	ldr	r0, [pc, #20]	; (79b8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    79a2:	b510      	push	{r4, lr}
    79a4:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    79a8:	b120      	cbz	r0, 79b4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    79aa:	f7ff ffeb 	bl	7984 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    79ae:	b108      	cbz	r0, 79b4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    79b0:	2001      	movs	r0, #1
    79b2:	bd10      	pop	{r4, pc}
    79b4:	2000      	movs	r0, #0
    79b6:	bd10      	pop	{r4, pc}
    79b8:	4000f000 	.word	0x4000f000
    79bc:	4804      	ldr	r0, [pc, #16]	; (79d0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    79be:	2100      	movs	r1, #0
    79c0:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    79c4:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    79c8:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    79cc:	4770      	bx	lr
    79ce:	0000      	.short	0x0000
    79d0:	4000f000 	.word	0x4000f000

000079d4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    79d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    79d8:	4604      	mov	r4, r0
    79da:	461e      	mov	r6, r3
    79dc:	4690      	mov	r8, r2
    79de:	460f      	mov	r7, r1
    79e0:	2001      	movs	r0, #1
    79e2:	f000 f90f 	bl	7c04 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    79e6:	4d1e      	ldr	r5, [pc, #120]	; (7a60 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    79e8:	481e      	ldr	r0, [pc, #120]	; (7a64 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    79ea:	f004 0103 	and.w	r1, r4, #3
    79ee:	712e      	strb	r6, [r5, #4]
    79f0:	6800      	ldr	r0, [r0, #0]
    79f2:	0432      	lsls	r2, r6, #16
    79f4:	f361 0007 	bfi	r0, r1, #0, #8
    79f8:	f366 200f 	bfi	r0, r6, #8, #8
    79fc:	0c00      	lsrs	r0, r0, #16
    79fe:	4e1a      	ldr	r6, [pc, #104]	; (7a68 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    7a00:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    7a04:	4308      	orrs	r0, r1
    7a06:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    7a0a:	4818      	ldr	r0, [pc, #96]	; (7a6c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    7a0c:	6007      	str	r7, [r0, #0]
    7a0e:	f008 fd91 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7a12:	b938      	cbnz	r0, 7a24 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    7a14:	4815      	ldr	r0, [pc, #84]	; (7a6c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    7a16:	3010      	adds	r0, #16
    7a18:	6801      	ldr	r1, [r0, #0]
    7a1a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    7a1e:	ea41 0108 	orr.w	r1, r1, r8
    7a22:	6001      	str	r1, [r0, #0]
    7a24:	f000 f8e4 	bl	7bf0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    7a28:	b10c      	cbz	r4, 7a2e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    7a2a:	2c04      	cmp	r4, #4
    7a2c:	d107      	bne.n	7a3e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    7a2e:	4811      	ldr	r0, [pc, #68]	; (7a74 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    7a30:	490d      	ldr	r1, [pc, #52]	; (7a68 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    7a32:	4a0f      	ldr	r2, [pc, #60]	; (7a70 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    7a34:	1d09      	adds	r1, r1, #4
    7a36:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    7a3a:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    7a3e:	2001      	movs	r0, #1
    7a40:	7068      	strb	r0, [r5, #1]
    7a42:	70ec      	strb	r4, [r5, #3]
    7a44:	b11c      	cbz	r4, 7a4e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7a46:	2c01      	cmp	r4, #1
    7a48:	d001      	beq.n	7a4e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7a4a:	2c02      	cmp	r4, #2
    7a4c:	d106      	bne.n	7a5c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    7a4e:	7028      	strb	r0, [r5, #0]
    7a50:	2100      	movs	r1, #0
    7a52:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    7a56:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    7a5a:	6030      	str	r0, [r6, #0]
    7a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7a60:	2000035d 	.word	0x2000035d
    7a64:	00007c00 	.word	0x00007c00
    7a68:	4000f000 	.word	0x4000f000
    7a6c:	4000f508 	.word	0x4000f508
    7a70:	4000f100 	.word	0x4000f100
    7a74:	4001f088 	.word	0x4001f088

00007a78 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    7a78:	b570      	push	{r4, r5, r6, lr}
    7a7a:	4a1c      	ldr	r2, [pc, #112]	; (7aec <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    7a7c:	7853      	ldrb	r3, [r2, #1]
    7a7e:	b1a3      	cbz	r3, 7aaa <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    7a80:	4b1b      	ldr	r3, [pc, #108]	; (7af0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    7a82:	6019      	str	r1, [r3, #0]
    7a84:	1d19      	adds	r1, r3, #4
    7a86:	6008      	str	r0, [r1, #0]
    7a88:	2501      	movs	r5, #1
    7a8a:	7095      	strb	r5, [r2, #2]
    7a8c:	4610      	mov	r0, r2
    7a8e:	78d6      	ldrb	r6, [r2, #3]
    7a90:	4b18      	ldr	r3, [pc, #96]	; (7af4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7a92:	7800      	ldrb	r0, [r0, #0]
    7a94:	4c18      	ldr	r4, [pc, #96]	; (7af8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    7a96:	2100      	movs	r1, #0
    7a98:	b156      	cbz	r6, 7ab0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    7a9a:	2e04      	cmp	r6, #4
    7a9c:	d01b      	beq.n	7ad6 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    7a9e:	b308      	cbz	r0, 7ae4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    7aa0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7aa4:	0668      	lsls	r0, r5, #25
    7aa6:	6018      	str	r0, [r3, #0]
    7aa8:	bd70      	pop	{r4, r5, r6, pc}
    7aaa:	f240 11bd 	movw	r1, #445	; 0x1bd
    7aae:	e01a      	b.n	7ae6 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    7ab0:	b178      	cbz	r0, 7ad2 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    7ab2:	4620      	mov	r0, r4
    7ab4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7ab8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    7abc:	601e      	str	r6, [r3, #0]
    7abe:	1271      	asrs	r1, r6, #9
    7ac0:	f008 fbc2 	bl	10248 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7ac4:	2800      	cmp	r0, #0
    7ac6:	d0ef      	beq.n	7aa8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    7ac8:	6065      	str	r5, [r4, #4]
    7aca:	480a      	ldr	r0, [pc, #40]	; (7af4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7acc:	1d00      	adds	r0, r0, #4
    7ace:	6006      	str	r6, [r0, #0]
    7ad0:	bd70      	pop	{r4, r5, r6, pc}
    7ad2:	21b3      	movs	r1, #179	; 0xb3
    7ad4:	e007      	b.n	7ae6 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    7ad6:	7015      	strb	r5, [r2, #0]
    7ad8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7adc:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    7ae0:	6025      	str	r5, [r4, #0]
    7ae2:	bd70      	pop	{r4, r5, r6, pc}
    7ae4:	21c6      	movs	r1, #198	; 0xc6
    7ae6:	203c      	movs	r0, #60	; 0x3c
    7ae8:	f7f8 ffbc 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7aec:	2000035d 	.word	0x2000035d
    7af0:	4000f50c 	.word	0x4000f50c
    7af4:	4001f504 	.word	0x4001f504
    7af8:	4000f000 	.word	0x4000f000

00007afc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    7afc:	b570      	push	{r4, r5, r6, lr}
    7afe:	4d05      	ldr	r5, [pc, #20]	; (7b14 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    7b00:	2400      	movs	r4, #0
    7b02:	7828      	ldrb	r0, [r5, #0]
    7b04:	b110      	cbz	r0, 7b0c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    7b06:	f000 f873 	bl	7bf0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    7b0a:	702c      	strb	r4, [r5, #0]
    7b0c:	706c      	strb	r4, [r5, #1]
    7b0e:	70ac      	strb	r4, [r5, #2]
    7b10:	bd70      	pop	{r4, r5, r6, pc}
    7b12:	0000      	.short	0x0000
    7b14:	2000035d 	.word	0x2000035d

00007b18 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    7b18:	4802      	ldr	r0, [pc, #8]	; (7b24 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    7b1a:	2100      	movs	r1, #0
    7b1c:	7001      	strb	r1, [r0, #0]
    7b1e:	7041      	strb	r1, [r0, #1]
    7b20:	7081      	strb	r1, [r0, #2]
    7b22:	4770      	bx	lr
    7b24:	2000035d 	.word	0x2000035d

00007b28 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    7b28:	480b      	ldr	r0, [pc, #44]	; (7b58 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    7b2a:	b510      	push	{r4, lr}
    7b2c:	7800      	ldrb	r0, [r0, #0]
    7b2e:	b158      	cbz	r0, 7b48 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    7b30:	f44f 7182 	mov.w	r1, #260	; 0x104
    7b34:	4809      	ldr	r0, [pc, #36]	; (7b5c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    7b36:	f008 fb87 	bl	10248 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7b3a:	b140      	cbz	r0, 7b4e <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    7b3c:	4808      	ldr	r0, [pc, #32]	; (7b60 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    7b3e:	6800      	ldr	r0, [r0, #0]
    7b40:	2800      	cmp	r0, #0
    7b42:	d000      	beq.n	7b46 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    7b44:	2001      	movs	r0, #1
    7b46:	bd10      	pop	{r4, pc}
    7b48:	f240 2123 	movw	r1, #547	; 0x223
    7b4c:	e001      	b.n	7b52 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    7b4e:	f44f 7109 	mov.w	r1, #548	; 0x224
    7b52:	203c      	movs	r0, #60	; 0x3c
    7b54:	f7f8 ff86 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b58:	2000035d 	.word	0x2000035d
    7b5c:	4000f000 	.word	0x4000f000
    7b60:	4000f400 	.word	0x4000f400

00007b64 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    7b64:	4801      	ldr	r0, [pc, #4]	; (7b6c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    7b66:	2101      	movs	r1, #1
    7b68:	6081      	str	r1, [r0, #8]
    7b6a:	4770      	bx	lr
    7b6c:	4000f000 	.word	0x4000f000

00007b70 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    7b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7b74:	481b      	ldr	r0, [pc, #108]	; (7be4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    7b76:	7800      	ldrb	r0, [r0, #0]
    7b78:	b1d8      	cbz	r0, 7bb2 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    7b7a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 7be8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    7b7e:	f44f 7682 	mov.w	r6, #260	; 0x104
    7b82:	4631      	mov	r1, r6
    7b84:	4640      	mov	r0, r8
    7b86:	f008 fb5f 	bl	10248 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7b8a:	2800      	cmp	r0, #0
    7b8c:	d128      	bne.n	7be0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    7b8e:	2002      	movs	r0, #2
    7b90:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    7b94:	4c15      	ldr	r4, [pc, #84]	; (7bec <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    7b96:	6820      	ldr	r0, [r4, #0]
    7b98:	43c0      	mvns	r0, r0
    7b9a:	f340 1500 	sbfx	r5, r0, #4, #1
    7b9e:	6820      	ldr	r0, [r4, #0]
    7ba0:	f040 0010 	orr.w	r0, r0, #16
    7ba4:	6020      	str	r0, [r4, #0]
    7ba6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    7baa:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    7bae:	1c6d      	adds	r5, r5, #1
    7bb0:	e008      	b.n	7bc4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    7bb2:	f240 212f 	movw	r1, #559	; 0x22f
    7bb6:	203c      	movs	r0, #60	; 0x3c
    7bb8:	f7f8 ff54 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7bbc:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    7bc0:	f008 fcf8 	bl	105b4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    7bc4:	4631      	mov	r1, r6
    7bc6:	4640      	mov	r0, r8
    7bc8:	f008 fb3e 	bl	10248 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7bcc:	2800      	cmp	r0, #0
    7bce:	d0f5      	beq.n	7bbc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    7bd0:	b91d      	cbnz	r5, 7bda <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    7bd2:	6820      	ldr	r0, [r4, #0]
    7bd4:	f020 0010 	bic.w	r0, r0, #16
    7bd8:	6020      	str	r0, [r4, #0]
    7bda:	2002      	movs	r0, #2
    7bdc:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    7be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7be4:	2000035d 	.word	0x2000035d
    7be8:	4000f000 	.word	0x4000f000
    7bec:	e000ed10 	.word	0xe000ed10
    7bf0:	4902      	ldr	r1, [pc, #8]	; (7bfc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    7bf2:	4801      	ldr	r0, [pc, #4]	; (7bf8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    7bf4:	6008      	str	r0, [r1, #0]
    7bf6:	4770      	bx	lr
    7bf8:	02020000 	.word	0x02020000
    7bfc:	4001f508 	.word	0x4001f508
    7c00:	00010000 	.word	0x00010000

00007c04 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    7c04:	b510      	push	{r4, lr}
    7c06:	4604      	mov	r4, r0
    7c08:	f000 f820 	bl	7c4c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    7c0c:	2c00      	cmp	r4, #0
    7c0e:	d00e      	beq.n	7c2e <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    7c10:	4a0b      	ldr	r2, [pc, #44]	; (7c40 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7c12:	480b      	ldr	r0, [pc, #44]	; (7c40 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7c14:	490b      	ldr	r1, [pc, #44]	; (7c44 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    7c16:	3214      	adds	r2, #20
    7c18:	2c01      	cmp	r4, #1
    7c1a:	d005      	beq.n	7c28 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    7c1c:	2c02      	cmp	r4, #2
    7c1e:	d007      	beq.n	7c30 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    7c20:	2182      	movs	r1, #130	; 0x82
    7c22:	203d      	movs	r0, #61	; 0x3d
    7c24:	f7f8 ff1e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c28:	2302      	movs	r3, #2
    7c2a:	6003      	str	r3, [r0, #0]
    7c2c:	6011      	str	r1, [r2, #0]
    7c2e:	bd10      	pop	{r4, pc}
    7c30:	2303      	movs	r3, #3
    7c32:	6003      	str	r3, [r0, #0]
    7c34:	6011      	str	r1, [r2, #0]
    7c36:	4904      	ldr	r1, [pc, #16]	; (7c48 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    7c38:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7c3c:	6008      	str	r0, [r1, #0]
    7c3e:	bd10      	pop	{r4, pc}
    7c40:	4000f500 	.word	0x4000f500
    7c44:	2000193c 	.word	0x2000193c
    7c48:	4001f504 	.word	0x4001f504
    7c4c:	4805      	ldr	r0, [pc, #20]	; (7c64 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    7c4e:	b510      	push	{r4, lr}
    7c50:	2100      	movs	r1, #0
    7c52:	6001      	str	r1, [r0, #0]
    7c54:	6001      	str	r1, [r0, #0]
    7c56:	f7ff ff51 	bl	7afc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    7c5a:	4903      	ldr	r1, [pc, #12]	; (7c68 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    7c5c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7c60:	6008      	str	r0, [r1, #0]
    7c62:	bd10      	pop	{r4, pc}
    7c64:	4000f500 	.word	0x4000f500
    7c68:	4001f508 	.word	0x4001f508

00007c6c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    7c6c:	4805      	ldr	r0, [pc, #20]	; (7c84 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    7c6e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    7c72:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    7c76:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7c7a:	2100      	movs	r1, #0
    7c7c:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    7c80:	4770      	bx	lr
    7c82:	0000      	.short	0x0000
    7c84:	40001000 	.word	0x40001000

00007c88 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    7c88:	4904      	ldr	r1, [pc, #16]	; (7c9c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    7c8a:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    7c8e:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    7c92:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    7c96:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    7c9a:	4770      	bx	lr
    7c9c:	40001000 	.word	0x40001000

00007ca0 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    7ca0:	4902      	ldr	r1, [pc, #8]	; (7cac <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    7ca2:	5c08      	ldrb	r0, [r1, r0]
    7ca4:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    7ca8:	4770      	bx	lr
    7caa:	0000      	.short	0x0000
    7cac:	00008972 	.word	0x00008972

00007cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    7cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7cb2:	4c24      	ldr	r4, [pc, #144]	; (7d44 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    7cb4:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    7cb8:	f010 0f10 	tst.w	r0, #16
    7cbc:	d001      	beq.n	7cc2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    7cbe:	2701      	movs	r7, #1
    7cc0:	e000      	b.n	7cc4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    7cc2:	2700      	movs	r7, #0
    7cc4:	2010      	movs	r0, #16
    7cc6:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    7cca:	2002      	movs	r0, #2
    7ccc:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    7cd0:	481d      	ldr	r0, [pc, #116]	; (7d48 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    7cd2:	2500      	movs	r5, #0
    7cd4:	491d      	ldr	r1, [pc, #116]	; (7d4c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    7cd6:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    7cda:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    7cde:	6008      	str	r0, [r1, #0]
    7ce0:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    7ce4:	f44f 7688 	mov.w	r6, #272	; 0x110
    7ce8:	f010 0fff 	tst.w	r0, #255	; 0xff
    7cec:	d019      	beq.n	7d22 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    7cee:	20ff      	movs	r0, #255	; 0xff
    7cf0:	f88d 0000 	strb.w	r0, [sp]
    7cf4:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7cf8:	2001      	movs	r0, #1
    7cfa:	6120      	str	r0, [r4, #16]
    7cfc:	e005      	b.n	7d0a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    7cfe:	bf00      	nop
    7d00:	f89d 0000 	ldrb.w	r0, [sp]
    7d04:	1e40      	subs	r0, r0, #1
    7d06:	f88d 0000 	strb.w	r0, [sp]
    7d0a:	f89d 0000 	ldrb.w	r0, [sp]
    7d0e:	b128      	cbz	r0, 7d1c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    7d10:	4631      	mov	r1, r6
    7d12:	4620      	mov	r0, r4
    7d14:	f008 fac7 	bl	102a6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7d18:	2800      	cmp	r0, #0
    7d1a:	d0f1      	beq.n	7d00 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    7d1c:	f89d 0000 	ldrb.w	r0, [sp]
    7d20:	b158      	cbz	r0, 7d3a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    7d22:	f000 fc15 	bl	8550 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    7d26:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7d2a:	f000 fda3 	bl	8874 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    7d2e:	2f00      	cmp	r7, #0
    7d30:	d002      	beq.n	7d38 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    7d32:	2010      	movs	r0, #16
    7d34:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    7d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7d3a:	f640 01aa 	movw	r1, #2218	; 0x8aa
    7d3e:	203e      	movs	r0, #62	; 0x3e
    7d40:	f7f8 fe90 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d44:	40001000 	.word	0x40001000
    7d48:	20001048 	.word	0x20001048
    7d4c:	4001f508 	.word	0x4001f508

00007d50 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    7d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d54:	4d18      	ldr	r5, [pc, #96]	; (7db8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    7d56:	4607      	mov	r7, r0
    7d58:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    7d5c:	07c2      	lsls	r2, r0, #31
    7d5e:	d00f      	beq.n	7d80 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    7d60:	4c16      	ldr	r4, [pc, #88]	; (7dbc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    7d62:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    7d66:	f042 0201 	orr.w	r2, r2, #1
    7d6a:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    7d6e:	f040 0002 	orr.w	r0, r0, #2
    7d72:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    7d76:	2601      	movs	r6, #1
    7d78:	b13f      	cbz	r7, 7d8a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    7d7a:	2f01      	cmp	r7, #1
    7d7c:	d00b      	beq.n	7d96 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    7d7e:	e010      	b.n	7da2 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7d80:	f240 7185 	movw	r1, #1925	; 0x785
    7d84:	203e      	movs	r0, #62	; 0x3e
    7d86:	f7f8 fe6d 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d8a:	4608      	mov	r0, r1
    7d8c:	f000 fdcc 	bl	8928 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x468>
    7d90:	726e      	strb	r6, [r5, #9]
    7d92:	6026      	str	r6, [r4, #0]
    7d94:	e005      	b.n	7da2 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7d96:	4608      	mov	r0, r1
    7d98:	f000 fdac 	bl	88f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    7d9c:	2002      	movs	r0, #2
    7d9e:	7268      	strb	r0, [r5, #9]
    7da0:	6066      	str	r6, [r4, #4]
    7da2:	4807      	ldr	r0, [pc, #28]	; (7dc0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7da4:	64c6      	str	r6, [r0, #76]	; 0x4c
    7da6:	4806      	ldr	r0, [pc, #24]	; (7dc0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7da8:	300c      	adds	r0, #12
    7daa:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    7dae:	4638      	mov	r0, r7
    7db0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7db4:	f000 bd30 	b.w	8818 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    7db8:	20001048 	.word	0x20001048
    7dbc:	40001000 	.word	0x40001000
    7dc0:	40008000 	.word	0x40008000

00007dc4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    7dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7dc8:	4c2c      	ldr	r4, [pc, #176]	; (7e7c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    7dca:	0006      	movs	r6, r0
    7dcc:	4d2c      	ldr	r5, [pc, #176]	; (7e80 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    7dce:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    7dd2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 7e84 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    7dd6:	f040 0002 	orr.w	r0, r0, #2
    7dda:	4689      	mov	r9, r1
    7ddc:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    7de0:	f04f 0700 	mov.w	r7, #0
    7de4:	d002      	beq.n	7dec <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    7de6:	2e01      	cmp	r6, #1
    7de8:	d020      	beq.n	7e2c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    7dea:	e036      	b.n	7e5a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    7dec:	4608      	mov	r0, r1
    7dee:	f000 fd9b 	bl	8928 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x468>
    7df2:	2001      	movs	r0, #1
    7df4:	7260      	strb	r0, [r4, #9]
    7df6:	79e0      	ldrb	r0, [r4, #7]
    7df8:	2801      	cmp	r0, #1
    7dfa:	d105      	bne.n	7e08 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    7dfc:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    7e00:	f040 0008 	orr.w	r0, r0, #8
    7e04:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7e08:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7e0a:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    7e0e:	62a0      	str	r0, [r4, #40]	; 0x28
    7e10:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    7e14:	f8c8 0000 	str.w	r0, [r8]
    7e18:	491b      	ldr	r1, [pc, #108]	; (7e88 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    7e1a:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    7e1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    7e22:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    7e26:	fbb0 f7f1 	udiv	r7, r0, r1
    7e2a:	e016      	b.n	7e5a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    7e2c:	4608      	mov	r0, r1
    7e2e:	f000 fd61 	bl	88f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    7e32:	2002      	movs	r0, #2
    7e34:	7260      	strb	r0, [r4, #9]
    7e36:	79e0      	ldrb	r0, [r4, #7]
    7e38:	2801      	cmp	r0, #1
    7e3a:	d105      	bne.n	7e48 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    7e3c:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    7e40:	f040 0004 	orr.w	r0, r0, #4
    7e44:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7e48:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7e4a:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    7e4e:	62a0      	str	r0, [r4, #40]	; 0x28
    7e50:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    7e54:	f8c8 0000 	str.w	r0, [r8]
    7e58:	2729      	movs	r7, #41	; 0x29
    7e5a:	f000 fbe5 	bl	8628 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    7e5e:	f008 fa6a 	bl	10336 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    7e62:	b120      	cbz	r0, 7e6e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    7e64:	f7ff ff24 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7e68:	2000      	movs	r0, #0
    7e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7e6e:	2100      	movs	r1, #0
    7e70:	4630      	mov	r0, r6
    7e72:	f000 fcd1 	bl	8818 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    7e76:	4638      	mov	r0, r7
    7e78:	e7f7      	b.n	7e6a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    7e7a:	0000      	.short	0x0000
    7e7c:	20001048 	.word	0x20001048
    7e80:	40001000 	.word	0x40001000
    7e84:	4001f504 	.word	0x4001f504
    7e88:	0000896c 	.word	0x0000896c

00007e8c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    7e8c:	b510      	push	{r4, lr}
    7e8e:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    7e90:	4901      	ldr	r1, [pc, #4]	; (7e98 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    7e92:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    7e96:	bd10      	pop	{r4, pc}
    7e98:	20001038 	.word	0x20001038

00007e9c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    7e9c:	b570      	push	{r4, r5, r6, lr}
    7e9e:	4c0f      	ldr	r4, [pc, #60]	; (7edc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    7ea0:	4603      	mov	r3, r0
    7ea2:	2002      	movs	r0, #2
    7ea4:	7320      	strb	r0, [r4, #12]
    7ea6:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    7eaa:	2096      	movs	r0, #150	; 0x96
    7eac:	f894 1020 	ldrb.w	r1, [r4, #32]
    7eb0:	7d22      	ldrb	r2, [r4, #20]
    7eb2:	2d01      	cmp	r5, #1
    7eb4:	d00e      	beq.n	7ed4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    7eb6:	f000 fd95 	bl	89e4 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    7eba:	6120      	str	r0, [r4, #16]
    7ebc:	4808      	ldr	r0, [pc, #32]	; (7ee0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    7ebe:	2100      	movs	r1, #0
    7ec0:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    7ec4:	6921      	ldr	r1, [r4, #16]
    7ec6:	69e0      	ldr	r0, [r4, #28]
    7ec8:	4408      	add	r0, r1
    7eca:	4905      	ldr	r1, [pc, #20]	; (7ee0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    7ecc:	1d09      	adds	r1, r1, #4
    7ece:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    7ed2:	bd70      	pop	{r4, r5, r6, pc}
    7ed4:	f000 fda4 	bl	8a20 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    7ed8:	e7ef      	b.n	7eba <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    7eda:	0000      	.short	0x0000
    7edc:	20001048 	.word	0x20001048
    7ee0:	40008000 	.word	0x40008000

00007ee4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    7ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ee8:	2238      	movs	r2, #56	; 0x38
    7eea:	2100      	movs	r1, #0
    7eec:	4813      	ldr	r0, [pc, #76]	; (7f3c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    7eee:	f008 fc38 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7ef2:	f000 fcbf 	bl	8874 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    7ef6:	f008 faf2 	bl	104de <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    7efa:	4d11      	ldr	r5, [pc, #68]	; (7f40 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7efc:	4e10      	ldr	r6, [pc, #64]	; (7f40 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7efe:	2400      	movs	r4, #0
    7f00:	4f0f      	ldr	r7, [pc, #60]	; (7f40 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7f02:	3508      	adds	r5, #8
    7f04:	3610      	adds	r6, #16
    7f06:	b928      	cbnz	r0, 7f14 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    7f08:	f008 fb00 	bl	1050c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    7f0c:	b910      	cbnz	r0, 7f14 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    7f0e:	f008 fb07 	bl	10520 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    7f12:	b108      	cbz	r0, 7f18 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    7f14:	2224      	movs	r2, #36	; 0x24
    7f16:	e006      	b.n	7f26 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    7f18:	f008 fb42 	bl	105a0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    7f1c:	b910      	cbnz	r0, 7f24 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    7f1e:	f008 fb35 	bl	1058c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    7f22:	b140      	cbz	r0, 7f36 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    7f24:	2240      	movs	r2, #64	; 0x40
    7f26:	21ff      	movs	r1, #255	; 0xff
    7f28:	4638      	mov	r0, r7
    7f2a:	f008 fc1a 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7f2e:	602c      	str	r4, [r5, #0]
    7f30:	6034      	str	r4, [r6, #0]
    7f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7f36:	2238      	movs	r2, #56	; 0x38
    7f38:	e7f5      	b.n	7f26 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    7f3a:	0000      	.short	0x0000
    7f3c:	20001048 	.word	0x20001048
    7f40:	40000e00 	.word	0x40000e00

00007f44 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    7f44:	4801      	ldr	r0, [pc, #4]	; (7f4c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    7f46:	69c0      	ldr	r0, [r0, #28]
    7f48:	4770      	bx	lr
    7f4a:	0000      	.short	0x0000
    7f4c:	20001048 	.word	0x20001048

00007f50 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    7f50:	b510      	push	{r4, lr}
    7f52:	f000 fc43 	bl	87dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>
    7f56:	f7ff feab 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7f5a:	f004 fb8d 	bl	c678 <mpsl_fem_disable>
    7f5e:	b130      	cbz	r0, 7f6e <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    7f60:	1c40      	adds	r0, r0, #1
    7f62:	d004      	beq.n	7f6e <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    7f64:	f240 516d 	movw	r1, #1389	; 0x56d
    7f68:	203e      	movs	r0, #62	; 0x3e
    7f6a:	f7f8 fd7b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f6e:	480f      	ldr	r0, [pc, #60]	; (7fac <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    7f70:	4a0f      	ldr	r2, [pc, #60]	; (7fb0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    7f72:	6a81      	ldr	r1, [r0, #40]	; 0x28
    7f74:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    7f78:	6011      	str	r1, [r2, #0]
    7f7a:	2400      	movs	r4, #0
    7f7c:	6284      	str	r4, [r0, #40]	; 0x28
    7f7e:	7304      	strb	r4, [r0, #12]
    7f80:	61c4      	str	r4, [r0, #28]
    7f82:	6184      	str	r4, [r0, #24]
    7f84:	f000 fc2a 	bl	87dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>
    7f88:	480a      	ldr	r0, [pc, #40]	; (7fb4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    7f8a:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    7f8e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    7f92:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    7f96:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    7f9a:	2001      	movs	r0, #1
    7f9c:	f008 f972 	bl	10284 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    7fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7fa4:	2001      	movs	r0, #1
    7fa6:	f008 b960 	b.w	1026a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    7faa:	0000      	.short	0x0000
    7fac:	20001048 	.word	0x20001048
    7fb0:	4001f508 	.word	0x4001f508
    7fb4:	40008000 	.word	0x40008000

00007fb8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    7fb8:	b570      	push	{r4, r5, r6, lr}
    7fba:	2001      	movs	r0, #1
    7fbc:	f008 f962 	bl	10284 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    7fc0:	4c37      	ldr	r4, [pc, #220]	; (80a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa0>)
    7fc2:	2000      	movs	r0, #0
    7fc4:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    7fc8:	2001      	movs	r0, #1
    7fca:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    7fce:	f008 fabd 	bl	1054c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    7fd2:	4d34      	ldr	r5, [pc, #208]	; (80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>)
    7fd4:	b118      	cbz	r0, 7fde <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    7fd6:	6828      	ldr	r0, [r5, #0]
    7fd8:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    7fdc:	6028      	str	r0, [r5, #0]
    7fde:	f008 faa9 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7fe2:	b128      	cbz	r0, 7ff0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    7fe4:	6828      	ldr	r0, [r5, #0]
    7fe6:	4930      	ldr	r1, [pc, #192]	; (80a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa8>)
    7fe8:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    7fec:	4308      	orrs	r0, r1
    7fee:	6028      	str	r0, [r5, #0]
    7ff0:	f008 fabc 	bl	1056c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    7ff4:	b138      	cbz	r0, 8006 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6>
    7ff6:	482b      	ldr	r0, [pc, #172]	; (80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>)
    7ff8:	1d00      	adds	r0, r0, #4
    7ffa:	6801      	ldr	r1, [r0, #0]
    7ffc:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    8000:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    8004:	6001      	str	r1, [r0, #0]
    8006:	4927      	ldr	r1, [pc, #156]	; (80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>)
    8008:	4828      	ldr	r0, [pc, #160]	; (80ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xac>)
    800a:	313c      	adds	r1, #60	; 0x3c
    800c:	6008      	str	r0, [r1, #0]
    800e:	f004 fb6d 	bl	c6ec <mpsl_fem_device_config_254_apply_get>
    8012:	b140      	cbz	r0, 8026 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26>
    8014:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    8018:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    801c:	1c41      	adds	r1, r0, #1
    801e:	d002      	beq.n	8026 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26>
    8020:	4920      	ldr	r1, [pc, #128]	; (80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>)
    8022:	3110      	adds	r1, #16
    8024:	6008      	str	r0, [r1, #0]
    8026:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    802a:	6e00      	ldr	r0, [r0, #96]	; 0x60
    802c:	1c41      	adds	r1, r0, #1
    802e:	d004      	beq.n	803a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a>
    8030:	491f      	ldr	r1, [pc, #124]	; (80b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb0>)
    8032:	680a      	ldr	r2, [r1, #0]
    8034:	f360 4217 	bfi	r2, r0, #16, #8
    8038:	600a      	str	r2, [r1, #0]
    803a:	f240 1103 	movw	r1, #259	; 0x103
    803e:	f240 605b 	movw	r0, #1627	; 0x65b
    8042:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    8046:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    804a:	2001      	movs	r0, #1
    804c:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    8050:	f000 f842 	bl	80d8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8054:	f240 2001 	movw	r0, #513	; 0x201
    8058:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    805c:	2002      	movs	r0, #2
    805e:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    8062:	4914      	ldr	r1, [pc, #80]	; (80b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb4>)
    8064:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    8068:	6008      	str	r0, [r1, #0]
    806a:	4913      	ldr	r1, [pc, #76]	; (80b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb8>)
    806c:	2000      	movs	r0, #0
    806e:	4d13      	ldr	r5, [pc, #76]	; (80bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbc>)
    8070:	8608      	strh	r0, [r1, #48]	; 0x30
    8072:	3110      	adds	r1, #16
    8074:	61c8      	str	r0, [r1, #28]
    8076:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    807a:	7028      	strb	r0, [r5, #0]
    807c:	2001      	movs	r0, #1
    807e:	f008 f8f4 	bl	1026a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    8082:	2010      	movs	r0, #16
    8084:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    8088:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    808c:	2002      	movs	r0, #2
    808e:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    8092:	6868      	ldr	r0, [r5, #4]
    8094:	2800      	cmp	r0, #0
    8096:	d002      	beq.n	809e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9e>
    8098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    809c:	4700      	bx	r0
    809e:	bd70      	pop	{r4, r5, r6, pc}
    80a0:	40001000 	.word	0x40001000
    80a4:	4000173c 	.word	0x4000173c
    80a8:	80000096 	.word	0x80000096
    80ac:	8900002c 	.word	0x8900002c
    80b0:	4000158c 	.word	0x4000158c
    80b4:	4001f504 	.word	0x4001f504
    80b8:	20001038 	.word	0x20001038
    80bc:	200002a0 	.word	0x200002a0

000080c0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    80c0:	4901      	ldr	r1, [pc, #4]	; (80c8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    80c2:	7548      	strb	r0, [r1, #21]
    80c4:	4770      	bx	lr
    80c6:	0000      	.short	0x0000
    80c8:	20001048 	.word	0x20001048

000080cc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    80cc:	4901      	ldr	r1, [pc, #4]	; (80d4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    80ce:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    80d2:	4770      	bx	lr
    80d4:	000089c0 	.word	0x000089c0

000080d8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    80d8:	4908      	ldr	r1, [pc, #32]	; (80fc <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    80da:	b510      	push	{r4, lr}
    80dc:	7508      	strb	r0, [r1, #20]
    80de:	4908      	ldr	r1, [pc, #32]	; (8100 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    80e0:	2801      	cmp	r0, #1
    80e2:	d006      	beq.n	80f2 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    80e4:	2802      	cmp	r0, #2
    80e6:	d006      	beq.n	80f6 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    80e8:	f640 5186 	movw	r1, #3462	; 0xd86
    80ec:	203e      	movs	r0, #62	; 0x3e
    80ee:	f7f8 fcb9 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    80f2:	2003      	movs	r0, #3
    80f4:	e000      	b.n	80f8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    80f6:	2004      	movs	r0, #4
    80f8:	6008      	str	r0, [r1, #0]
    80fa:	bd10      	pop	{r4, pc}
    80fc:	20001048 	.word	0x20001048
    8100:	40001510 	.word	0x40001510

00008104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    8104:	4905      	ldr	r1, [pc, #20]	; (811c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    8106:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    810a:	4805      	ldr	r0, [pc, #20]	; (8120 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    810c:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    8110:	f041 0101 	orr.w	r1, r1, #1
    8114:	7001      	strb	r1, [r0, #0]
    8116:	f000 ba4d 	b.w	85b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    811a:	0000      	.short	0x0000
    811c:	40001000 	.word	0x40001000
    8120:	20001048 	.word	0x20001048

00008124 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    8124:	4901      	ldr	r1, [pc, #4]	; (812c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    8126:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    812a:	4770      	bx	lr
    812c:	000089cc 	.word	0x000089cc

00008130 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    8130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8134:	4e30      	ldr	r6, [pc, #192]	; (81f8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    8136:	4c31      	ldr	r4, [pc, #196]	; (81fc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>)
    8138:	4688      	mov	r8, r1
    813a:	0007      	movs	r7, r0
    813c:	4615      	mov	r5, r2
    813e:	f04f 0901 	mov.w	r9, #1
    8142:	d006      	beq.n	8152 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22>
    8144:	2f01      	cmp	r7, #1
    8146:	d012      	beq.n	816e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3e>
    8148:	f640 012d 	movw	r1, #2093	; 0x82d
    814c:	203e      	movs	r0, #62	; 0x3e
    814e:	f7f8 fc89 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8152:	4610      	mov	r0, r2
    8154:	f000 fbe8 	bl	8928 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x468>
    8158:	4829      	ldr	r0, [pc, #164]	; (8200 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    815a:	f884 9009 	strb.w	r9, [r4, #9]
    815e:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
    8162:	4640      	mov	r0, r8
    8164:	f000 fb8e 	bl	8884 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>
    8168:	4605      	mov	r5, r0
    816a:	4630      	mov	r0, r6
    816c:	e00c      	b.n	8188 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    816e:	4610      	mov	r0, r2
    8170:	f000 fbc0 	bl	88f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    8174:	2002      	movs	r0, #2
    8176:	7260      	strb	r0, [r4, #9]
    8178:	f649 71ba 	movw	r1, #40890	; 0x9fba
    817c:	4640      	mov	r0, r8
    817e:	f000 fb81 	bl	8884 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>
    8182:	4605      	mov	r5, r0
    8184:	481c      	ldr	r0, [pc, #112]	; (81f8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    8186:	1d00      	adds	r0, r0, #4
    8188:	f000 fb3a 	bl	8800 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x340>
    818c:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8204 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    8190:	f8c8 5540 	str.w	r5, [r8, #1344]	; 0x540
    8194:	f8df a074 	ldr.w	sl, [pc, #116]	; 820c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>
    8198:	481b      	ldr	r0, [pc, #108]	; (8208 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    819a:	f8ca 0510 	str.w	r0, [sl, #1296]	; 0x510
    819e:	2010      	movs	r0, #16
    81a0:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    81a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    81a6:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    81aa:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    81ae:	62a0      	str	r0, [r4, #40]	; 0x28
    81b0:	4817      	ldr	r0, [pc, #92]	; (8210 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    81b2:	6006      	str	r6, [r0, #0]
    81b4:	f000 fa38 	bl	8628 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    81b8:	4641      	mov	r1, r8
    81ba:	f8c8 904c 	str.w	r9, [r8, #76]	; 0x4c
    81be:	4811      	ldr	r0, [pc, #68]	; (8204 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    81c0:	300c      	adds	r0, #12
    81c2:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    81c6:	42a8      	cmp	r0, r5
    81c8:	d310      	bcc.n	81ec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    81ca:	2000      	movs	r0, #0
    81cc:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    81d0:	f8ca 0514 	str.w	r0, [sl, #1300]	; 0x514
    81d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    81d6:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
    81da:	62a0      	str	r0, [r4, #40]	; 0x28
    81dc:	480c      	ldr	r0, [pc, #48]	; (8210 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    81de:	1d00      	adds	r0, r0, #4
    81e0:	6006      	str	r6, [r0, #0]
    81e2:	f7ff fd65 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    81e6:	2000      	movs	r0, #0
    81e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    81ec:	4629      	mov	r1, r5
    81ee:	4638      	mov	r0, r7
    81f0:	f000 fb12 	bl	8818 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    81f4:	2001      	movs	r0, #1
    81f6:	e7f7      	b.n	81e8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>
    81f8:	40001000 	.word	0x40001000
    81fc:	20001048 	.word	0x20001048
    8200:	0000896c 	.word	0x0000896c
    8204:	40008000 	.word	0x40008000
    8208:	40008140 	.word	0x40008140
    820c:	4001f098 	.word	0x4001f098
    8210:	4001f504 	.word	0x4001f504

00008214 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    8214:	4b0d      	ldr	r3, [pc, #52]	; (824c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    8216:	b510      	push	{r4, lr}
    8218:	71d8      	strb	r0, [r3, #7]
    821a:	729a      	strb	r2, [r3, #10]
    821c:	b151      	cbz	r1, 8234 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    821e:	2002      	movs	r0, #2
    8220:	7218      	strb	r0, [r3, #8]
    8222:	2801      	cmp	r0, #1
    8224:	d008      	beq.n	8238 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    8226:	2802      	cmp	r0, #2
    8228:	d00f      	beq.n	824a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    822a:	f640 2163 	movw	r1, #2659	; 0xa63
    822e:	203e      	movs	r0, #62	; 0x3e
    8230:	f7f8 fc18 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8234:	2001      	movs	r0, #1
    8236:	e7f3      	b.n	8220 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    8238:	7a58      	ldrb	r0, [r3, #9]
    823a:	2802      	cmp	r0, #2
    823c:	d105      	bne.n	824a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    823e:	f000 f97d 	bl	853c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    8242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8246:	f000 bab1 	b.w	87ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>
    824a:	bd10      	pop	{r4, pc}
    824c:	20001048 	.word	0x20001048

00008250 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    8250:	4902      	ldr	r1, [pc, #8]	; (825c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    8252:	2000      	movs	r0, #0
    8254:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8258:	4770      	bx	lr
    825a:	0000      	.short	0x0000
    825c:	40008000 	.word	0x40008000

00008260 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    8260:	4904      	ldr	r1, [pc, #16]	; (8274 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    8262:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    8266:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    826a:	4249      	negs	r1, r1
    826c:	7001      	strb	r1, [r0, #0]
    826e:	2001      	movs	r0, #1
    8270:	4770      	bx	lr
    8272:	0000      	.short	0x0000
    8274:	40001000 	.word	0x40001000

00008278 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    8278:	4903      	ldr	r1, [pc, #12]	; (8288 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    827a:	0e02      	lsrs	r2, r0, #24
    827c:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    8280:	0200      	lsls	r0, r0, #8
    8282:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    8286:	4770      	bx	lr
    8288:	40001000 	.word	0x40001000

0000828c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    828c:	4901      	ldr	r1, [pc, #4]	; (8294 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    828e:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    8292:	4770      	bx	lr
    8294:	40001000 	.word	0x40001000

00008298 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    8298:	b510      	push	{r4, lr}
    829a:	2200      	movs	r2, #0
    829c:	2901      	cmp	r1, #1
    829e:	d006      	beq.n	82ae <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    82a0:	2902      	cmp	r1, #2
    82a2:	d002      	beq.n	82aa <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    82a4:	f240 21d9 	movw	r1, #729	; 0x2d9
    82a8:	e014      	b.n	82d4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    82aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    82ae:	490b      	ldr	r1, [pc, #44]	; (82dc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    82b0:	430a      	orrs	r2, r1
    82b2:	490b      	ldr	r1, [pc, #44]	; (82e0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    82b4:	600a      	str	r2, [r1, #0]
    82b6:	490b      	ldr	r1, [pc, #44]	; (82e4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    82b8:	4308      	orrs	r0, r1
    82ba:	4909      	ldr	r1, [pc, #36]	; (82e0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    82bc:	1d09      	adds	r1, r1, #4
    82be:	6008      	str	r0, [r1, #0]
    82c0:	4809      	ldr	r0, [pc, #36]	; (82e8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    82c2:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    82c6:	b2c0      	uxtb	r0, r0
    82c8:	2803      	cmp	r0, #3
    82ca:	d001      	beq.n	82d0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    82cc:	280b      	cmp	r0, #11
    82ce:	d104      	bne.n	82da <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    82d0:	f240 21f1 	movw	r1, #753	; 0x2f1
    82d4:	203e      	movs	r0, #62	; 0x3e
    82d6:	f7f8 fbc5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    82da:	bd10      	pop	{r4, pc}
    82dc:	00100108 	.word	0x00100108
    82e0:	40001514 	.word	0x40001514
    82e4:	02030000 	.word	0x02030000
    82e8:	40001000 	.word	0x40001000

000082ec <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    82ec:	4901      	ldr	r1, [pc, #4]	; (82f4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    82ee:	7588      	strb	r0, [r1, #22]
    82f0:	4770      	bx	lr
    82f2:	0000      	.short	0x0000
    82f4:	20001048 	.word	0x20001048

000082f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    82f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    82fc:	4853      	ldr	r0, [pc, #332]	; (844c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    82fe:	f04f 0a01 	mov.w	sl, #1
    8302:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    8306:	4851      	ldr	r0, [pc, #324]	; (844c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    8308:	300c      	adds	r0, #12
    830a:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    830e:	f008 f810 	bl	10332 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    8312:	4c4f      	ldr	r4, [pc, #316]	; (8450 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    8314:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    8318:	f000 f91a 	bl	8550 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    831c:	494d      	ldr	r1, [pc, #308]	; (8454 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    831e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    8320:	6008      	str	r0, [r1, #0]
    8322:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8458 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    8326:	2000      	movs	r0, #0
    8328:	62a0      	str	r0, [r4, #40]	; 0x28
    832a:	f8d8 2200 	ldr.w	r2, [r8, #512]	; 0x200
    832e:	f240 131d 	movw	r3, #285	; 0x11d
    8332:	439a      	bics	r2, r3
    8334:	f8c8 2200 	str.w	r2, [r8, #512]	; 0x200
    8338:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    833c:	f000 f988 	bl	8650 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    8340:	4605      	mov	r5, r0
    8342:	4842      	ldr	r0, [pc, #264]	; (844c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    8344:	3008      	adds	r0, #8
    8346:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    834a:	4e40      	ldr	r6, [pc, #256]	; (844c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    834c:	61e0      	str	r0, [r4, #28]
    834e:	1d36      	adds	r6, r6, #4
    8350:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    8354:	61a0      	str	r0, [r4, #24]
    8356:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    835a:	7d21      	ldrb	r1, [r4, #20]
    835c:	f884 1020 	strb.w	r1, [r4, #32]
    8360:	7a61      	ldrb	r1, [r4, #9]
    8362:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    8366:	46a1      	mov	r9, r4
    8368:	2400      	movs	r4, #0
    836a:	4639      	mov	r1, r7
    836c:	4628      	mov	r0, r5
    836e:	f000 f9e3 	bl	8738 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x278>
    8372:	b910      	cbnz	r0, 837a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    8374:	f8c8 a010 	str.w	sl, [r8, #16]
    8378:	2401      	movs	r4, #1
    837a:	4f35      	ldr	r7, [pc, #212]	; (8450 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    837c:	07e8      	lsls	r0, r5, #31
    837e:	f1a7 0710 	sub.w	r7, r7, #16
    8382:	d002      	beq.n	838a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    8384:	6838      	ldr	r0, [r7, #0]
    8386:	4780      	blx	r0
    8388:	e034      	b.n	83f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfc>
    838a:	07a8      	lsls	r0, r5, #30
    838c:	d529      	bpl.n	83e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    838e:	0768      	lsls	r0, r5, #29
    8390:	d421      	bmi.n	83d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    8392:	f008 f8eb 	bl	1056c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8396:	b9f0      	cbnz	r0, 83d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    8398:	f008 f8d8 	bl	1054c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    839c:	b9d8      	cbnz	r0, 83d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    839e:	482f      	ldr	r0, [pc, #188]	; (845c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>)
    83a0:	6800      	ldr	r0, [r0, #0]
    83a2:	f3c0 5242 	ubfx	r2, r0, #21, #3
    83a6:	f3c0 6100 	ubfx	r1, r0, #24, #1
    83aa:	f000 0c0f 	and.w	ip, r0, #15
    83ae:	f3c0 1303 	ubfx	r3, r0, #4, #4
    83b2:	f3c0 2803 	ubfx	r8, r0, #8, #4
    83b6:	b171      	cbz	r1, 83d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    83b8:	f1bc 0f00 	cmp.w	ip, #0
    83bc:	d003      	beq.n	83c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    83be:	b113      	cbz	r3, 83c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    83c0:	f1b8 0f00 	cmp.w	r8, #0
    83c4:	d107      	bne.n	83d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    83c6:	f3c0 4004 	ubfx	r0, r0, #16, #5
    83ca:	2801      	cmp	r0, #1
    83cc:	d103      	bne.n	83d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    83ce:	2a03      	cmp	r2, #3
    83d0:	d201      	bcs.n	83d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    83d2:	f045 0504 	orr.w	r5, r5, #4
    83d6:	f345 0080 	sbfx	r0, r5, #2, #1
    83da:	4621      	mov	r1, r4
    83dc:	1c40      	adds	r0, r0, #1
    83de:	687a      	ldr	r2, [r7, #4]
    83e0:	e007      	b.n	83f2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfa>
    83e2:	f015 0f28 	tst.w	r5, #40	; 0x28
    83e6:	d005      	beq.n	83f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfc>
    83e8:	f345 1140 	sbfx	r1, r5, #5, #1
    83ec:	68ba      	ldr	r2, [r7, #8]
    83ee:	4620      	mov	r0, r4
    83f0:	1c49      	adds	r1, r1, #1
    83f2:	4790      	blx	r2
    83f4:	06e8      	lsls	r0, r5, #27
    83f6:	d501      	bpl.n	83fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x104>
    83f8:	68f8      	ldr	r0, [r7, #12]
    83fa:	4780      	blx	r0
    83fc:	f899 1009 	ldrb.w	r1, [r9, #9]
    8400:	4648      	mov	r0, r9
    8402:	2902      	cmp	r1, #2
    8404:	d120      	bne.n	8448 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    8406:	7b01      	ldrb	r1, [r0, #12]
    8408:	2900      	cmp	r1, #0
    840a:	d01d      	beq.n	8448 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    840c:	2902      	cmp	r1, #2
    840e:	d004      	beq.n	841a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x122>
    8410:	2901      	cmp	r1, #1
    8412:	d009      	beq.n	8428 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x130>
    8414:	f640 4166 	movw	r1, #3174	; 0xc66
    8418:	e00d      	b.n	8436 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
    841a:	69c1      	ldr	r1, [r0, #28]
    841c:	f8d9 0010 	ldr.w	r0, [r9, #16]
    8420:	4408      	add	r0, r1
    8422:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    8426:	e00b      	b.n	8440 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x148>
    8428:	6901      	ldr	r1, [r0, #16]
    842a:	f8d9 001c 	ldr.w	r0, [r9, #28]
    842e:	4281      	cmp	r1, r0
    8430:	d804      	bhi.n	843c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    8432:	f640 4167 	movw	r1, #3175	; 0xc67
    8436:	203e      	movs	r0, #62	; 0x3e
    8438:	f7f8 fb14 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    843c:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    8440:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8444:	f000 b9bc 	b.w	87c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    8448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    844c:	40008000 	.word	0x40008000
    8450:	20001048 	.word	0x20001048
    8454:	4001f508 	.word	0x4001f508
    8458:	40001000 	.word	0x40001000
    845c:	40001450 	.word	0x40001450

00008460 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    8460:	b570      	push	{r4, r5, r6, lr}
    8462:	4b16      	ldr	r3, [pc, #88]	; (84bc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5c>)
    8464:	888c      	ldrh	r4, [r1, #4]
    8466:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    846a:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    846e:	780c      	ldrb	r4, [r1, #0]
    8470:	f8d1 1001 	ldr.w	r1, [r1, #1]
    8474:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    8478:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    847c:	f8d3 1640 	ldr.w	r1, [r3, #1600]	; 0x640
    8480:	2401      	movs	r4, #1
    8482:	4084      	lsls	r4, r0
    8484:	b2c9      	uxtb	r1, r1
    8486:	b2e5      	uxtb	r5, r4
    8488:	4329      	orrs	r1, r5
    848a:	b132      	cbz	r2, 849a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    848c:	2a01      	cmp	r2, #1
    848e:	d00a      	beq.n	84a6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x46>
    8490:	f240 51d4 	movw	r1, #1492	; 0x5d4
    8494:	203e      	movs	r0, #62	; 0x3e
    8496:	f7f8 fae5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    849a:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    849e:	f3c0 2007 	ubfx	r0, r0, #8, #8
    84a2:	43a0      	bics	r0, r4
    84a4:	e004      	b.n	84b0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    84a6:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    84aa:	f3c0 2007 	ubfx	r0, r0, #8, #8
    84ae:	4328      	orrs	r0, r5
    84b0:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    84b4:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    84b8:	bd70      	pop	{r4, r5, r6, pc}
    84ba:	0000      	.short	0x0000
    84bc:	40001000 	.word	0x40001000

000084c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    84c0:	4901      	ldr	r1, [pc, #4]	; (84c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    84c2:	2001      	movs	r0, #1
    84c4:	7008      	strb	r0, [r1, #0]
    84c6:	4770      	bx	lr
    84c8:	200002a0 	.word	0x200002a0
    84cc:	480b      	ldr	r0, [pc, #44]	; (84fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c>)
    84ce:	7d81      	ldrb	r1, [r0, #22]
    84d0:	480b      	ldr	r0, [pc, #44]	; (8500 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    84d2:	5c40      	ldrb	r0, [r0, r1]
    84d4:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    84d8:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    84dc:	d204      	bcs.n	84e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28>
    84de:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    84e2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    84e6:	e001      	b.n	84ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    84e8:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    84ec:	4a05      	ldr	r2, [pc, #20]	; (8504 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>)
    84ee:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    84f2:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    84f6:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    84fa:	4770      	bx	lr
    84fc:	20001048 	.word	0x20001048
    8500:	00008972 	.word	0x00008972
    8504:	40001000 	.word	0x40001000
    8508:	b508      	push	{r3, lr}
    850a:	490b      	ldr	r1, [pc, #44]	; (8538 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>)
    850c:	466b      	mov	r3, sp
    850e:	f991 2015 	ldrsb.w	r2, [r1, #21]
    8512:	7d89      	ldrb	r1, [r1, #22]
    8514:	f000 fad0 	bl	8ab8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    8518:	f99d 0000 	ldrsb.w	r0, [sp]
    851c:	f000 faa0 	bl	8a60 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    8520:	f10d 0001 	add.w	r0, sp, #1
    8524:	f004 f8cc 	bl	c6c0 <mpsl_fem_pa_gain_set>
    8528:	2800      	cmp	r0, #0
    852a:	d004      	beq.n	8536 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x76>
    852c:	f240 6115 	movw	r1, #1557	; 0x615
    8530:	203e      	movs	r0, #62	; 0x3e
    8532:	f7f8 fa97 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8536:	bd08      	pop	{r3, pc}
    8538:	20001048 	.word	0x20001048
    853c:	4803      	ldr	r0, [pc, #12]	; (854c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>)
    853e:	7a01      	ldrb	r1, [r0, #8]
    8540:	2901      	cmp	r1, #1
    8542:	d102      	bne.n	854a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8a>
    8544:	7a80      	ldrb	r0, [r0, #10]
    8546:	f7ff bfdf 	b.w	8508 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    854a:	4770      	bx	lr
    854c:	20001048 	.word	0x20001048
    8550:	480d      	ldr	r0, [pc, #52]	; (8588 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>)
    8552:	b510      	push	{r4, lr}
    8554:	7a40      	ldrb	r0, [r0, #9]
    8556:	2801      	cmp	r0, #1
    8558:	d00c      	beq.n	8574 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    855a:	2802      	cmp	r0, #2
    855c:	d113      	bne.n	8586 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    855e:	f004 f891 	bl	c684 <mpsl_fem_lna_configuration_clear>
    8562:	2800      	cmp	r0, #0
    8564:	d00f      	beq.n	8586 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    8566:	1c40      	adds	r0, r0, #1
    8568:	d00d      	beq.n	8586 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    856a:	f640 01c1 	movw	r1, #2241	; 0x8c1
    856e:	203e      	movs	r0, #62	; 0x3e
    8570:	f7f8 fa78 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8574:	f004 f898 	bl	c6a8 <mpsl_fem_pa_configuration_clear>
    8578:	2800      	cmp	r0, #0
    857a:	d004      	beq.n	8586 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    857c:	1c40      	adds	r0, r0, #1
    857e:	d002      	beq.n	8586 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    8580:	f640 01bb 	movw	r1, #2235	; 0x8bb
    8584:	e7f3      	b.n	856e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xae>
    8586:	bd10      	pop	{r4, pc}
    8588:	20001048 	.word	0x20001048
    858c:	4808      	ldr	r0, [pc, #32]	; (85b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    858e:	2100      	movs	r1, #0
    8590:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    8594:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    8598:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    859c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    85a0:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    85a4:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    85a8:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    85ac:	4770      	bx	lr
    85ae:	0000      	.short	0x0000
    85b0:	40001000 	.word	0x40001000
    85b4:	4818      	ldr	r0, [pc, #96]	; (8618 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x158>)
    85b6:	b510      	push	{r4, lr}
    85b8:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    85bc:	07c1      	lsls	r1, r0, #31
    85be:	d029      	beq.n	8614 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    85c0:	0781      	lsls	r1, r0, #30
    85c2:	d514      	bpl.n	85ee <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12e>
    85c4:	4815      	ldr	r0, [pc, #84]	; (861c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    85c6:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    85ca:	f041 0101 	orr.w	r1, r1, #1
    85ce:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    85d2:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    85d6:	b2c0      	uxtb	r0, r0
    85d8:	280b      	cmp	r0, #11
    85da:	d005      	beq.n	85e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    85dc:	280a      	cmp	r0, #10
    85de:	d003      	beq.n	85e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    85e0:	2803      	cmp	r0, #3
    85e2:	d001      	beq.n	85e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    85e4:	2802      	cmp	r0, #2
    85e6:	d115      	bne.n	8614 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    85e8:	f240 613e 	movw	r1, #1598	; 0x63e
    85ec:	e00f      	b.n	860e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x14e>
    85ee:	0740      	lsls	r0, r0, #29
    85f0:	d510      	bpl.n	8614 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    85f2:	480a      	ldr	r0, [pc, #40]	; (861c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    85f4:	490a      	ldr	r1, [pc, #40]	; (8620 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x160>)
    85f6:	3008      	adds	r0, #8
    85f8:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    85fc:	f44f 71a0 	mov.w	r1, #320	; 0x140
    8600:	4808      	ldr	r0, [pc, #32]	; (8624 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x164>)
    8602:	f007 fe55 	bl	102b0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    8606:	2800      	cmp	r0, #0
    8608:	d004      	beq.n	8614 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    860a:	f240 6146 	movw	r1, #1606	; 0x646
    860e:	203e      	movs	r0, #62	; 0x3e
    8610:	f7f8 fa28 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8614:	bd10      	pop	{r4, pc}
    8616:	0000      	.short	0x0000
    8618:	20001048 	.word	0x20001048
    861c:	40001000 	.word	0x40001000
    8620:	4001f098 	.word	0x4001f098
    8624:	40008000 	.word	0x40008000
    8628:	4808      	ldr	r0, [pc, #32]	; (864c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>)
    862a:	4601      	mov	r1, r0
    862c:	79c2      	ldrb	r2, [r0, #7]
    862e:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    8632:	b112      	cbz	r2, 863a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17a>
    8634:	2a01      	cmp	r2, #1
    8636:	d003      	beq.n	8640 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x180>
    8638:	e006      	b.n	8648 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    863a:	f041 0102 	orr.w	r1, r1, #2
    863e:	e001      	b.n	8644 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x184>
    8640:	f041 0104 	orr.w	r1, r1, #4
    8644:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    8648:	f7ff bfb4 	b.w	85b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    864c:	20001048 	.word	0x20001048
    8650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8654:	4d34      	ldr	r5, [pc, #208]	; (8728 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x268>)
    8656:	2400      	movs	r4, #0
    8658:	7b28      	ldrb	r0, [r5, #12]
    865a:	b138      	cbz	r0, 866c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    865c:	f44f 71a2 	mov.w	r1, #324	; 0x144
    8660:	4832      	ldr	r0, [pc, #200]	; (872c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26c>)
    8662:	f007 fe25 	bl	102b0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    8666:	b108      	cbz	r0, 866c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    8668:	2601      	movs	r6, #1
    866a:	e000      	b.n	866e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ae>
    866c:	2600      	movs	r6, #0
    866e:	7a68      	ldrb	r0, [r5, #9]
    8670:	4f2f      	ldr	r7, [pc, #188]	; (8730 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x270>)
    8672:	f44f 7186 	mov.w	r1, #268	; 0x10c
    8676:	2801      	cmp	r0, #1
    8678:	d002      	beq.n	8680 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    867a:	2802      	cmp	r0, #2
    867c:	d006      	beq.n	868c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    867e:	e016      	b.n	86ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    8680:	4638      	mov	r0, r7
    8682:	f007 fe10 	bl	102a6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    8686:	b190      	cbz	r0, 86ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    8688:	2408      	movs	r4, #8
    868a:	e010      	b.n	86ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    868c:	4638      	mov	r0, r7
    868e:	f007 fe0a 	bl	102a6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    8692:	b100      	cbz	r0, 8696 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d6>
    8694:	2402      	movs	r4, #2
    8696:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
    869a:	43c0      	mvns	r0, r0
    869c:	f340 0000 	sbfx	r0, r0, #0, #1
    86a0:	1c40      	adds	r0, r0, #1
    86a2:	d101      	bne.n	86a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    86a4:	f044 0404 	orr.w	r4, r4, #4
    86a8:	b10e      	cbz	r6, 86ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    86aa:	f044 0401 	orr.w	r4, r4, #1
    86ae:	f014 0f0b 	tst.w	r4, #11
    86b2:	d107      	bne.n	86c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    86b4:	f44f 7188 	mov.w	r1, #272	; 0x110
    86b8:	4638      	mov	r0, r7
    86ba:	f007 fdf4 	bl	102a6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    86be:	b108      	cbz	r0, 86c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    86c0:	f044 0410 	orr.w	r4, r4, #16
    86c4:	481b      	ldr	r0, [pc, #108]	; (8734 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>)
    86c6:	7800      	ldrb	r0, [r0, #0]
    86c8:	b1f8      	cbz	r0, 870a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24a>
    86ca:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    86ce:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    86d2:	d007      	beq.n	86e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    86d4:	f44f 718a 	mov.w	r1, #276	; 0x114
    86d8:	4638      	mov	r0, r7
    86da:	f007 fde4 	bl	102a6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    86de:	b108      	cbz	r0, 86e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    86e0:	2001      	movs	r0, #1
    86e2:	e000      	b.n	86e6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    86e4:	2000      	movs	r0, #0
    86e6:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    86ea:	b13e      	cbz	r6, 86fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    86ec:	f44f 718c 	mov.w	r1, #280	; 0x118
    86f0:	4638      	mov	r0, r7
    86f2:	f007 fdd8 	bl	102a6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    86f6:	b108      	cbz	r0, 86fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    86f8:	2001      	movs	r0, #1
    86fa:	e000      	b.n	86fe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    86fc:	2000      	movs	r0, #0
    86fe:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    8702:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    8706:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    870a:	f7ff ff3f 	bl	858c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    870e:	06e0      	lsls	r0, r4, #27
    8710:	d506      	bpl.n	8720 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    8712:	0720      	lsls	r0, r4, #28
    8714:	d404      	bmi.n	8720 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    8716:	7a68      	ldrb	r0, [r5, #9]
    8718:	2801      	cmp	r0, #1
    871a:	d101      	bne.n	8720 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    871c:	f044 0420 	orr.w	r4, r4, #32
    8720:	4620      	mov	r0, r4
    8722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8726:	0000      	.short	0x0000
    8728:	20001048 	.word	0x20001048
    872c:	40008000 	.word	0x40008000
    8730:	40001000 	.word	0x40001000
    8734:	200002a0 	.word	0x200002a0
    8738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    873c:	4c1a      	ldr	r4, [pc, #104]	; (87a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e8>)
    873e:	460d      	mov	r5, r1
    8740:	7a21      	ldrb	r1, [r4, #8]
    8742:	b129      	cbz	r1, 8750 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x290>
    8744:	f010 0f11 	tst.w	r0, #17
    8748:	d007      	beq.n	875a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x29a>
    874a:	f7ff fab1 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    874e:	e024      	b.n	879a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2da>
    8750:	f000 f890 	bl	8874 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    8754:	2000      	movs	r0, #0
    8756:	7320      	strb	r0, [r4, #12]
    8758:	e01f      	b.n	879a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2da>
    875a:	2901      	cmp	r1, #1
    875c:	d001      	beq.n	8762 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    875e:	2601      	movs	r6, #1
    8760:	e000      	b.n	8764 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a4>
    8762:	2600      	movs	r6, #0
    8764:	79e0      	ldrb	r0, [r4, #7]
    8766:	2801      	cmp	r0, #1
    8768:	d00e      	beq.n	8788 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>
    876a:	2700      	movs	r7, #0
    876c:	f000 f882 	bl	8874 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    8770:	2196      	movs	r1, #150	; 0x96
    8772:	4630      	mov	r0, r6
    8774:	f000 f894 	bl	88a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    8778:	4601      	mov	r1, r0
    877a:	b14f      	cbz	r7, 8790 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>
    877c:	353b      	adds	r5, #59	; 0x3b
    877e:	428d      	cmp	r5, r1
    8780:	d904      	bls.n	878c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>
    8782:	2000      	movs	r0, #0
    8784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8788:	2701      	movs	r7, #1
    878a:	e7ef      	b.n	876c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ac>
    878c:	2001      	movs	r0, #1
    878e:	71e0      	strb	r0, [r4, #7]
    8790:	7aa2      	ldrb	r2, [r4, #10]
    8792:	4630      	mov	r0, r6
    8794:	f7ff fccc 	bl	8130 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    8798:	b108      	cbz	r0, 879e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2de>
    879a:	2001      	movs	r0, #1
    879c:	e7f2      	b.n	8784 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    879e:	f640 21c4 	movw	r1, #2756	; 0xac4
    87a2:	203e      	movs	r0, #62	; 0x3e
    87a4:	f7f8 f95e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87a8:	20001048 	.word	0x20001048
    87ac:	4803      	ldr	r0, [pc, #12]	; (87bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2fc>)
    87ae:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    87b2:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    87b6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    87ba:	4770      	bx	lr
    87bc:	40001000 	.word	0x40001000
    87c0:	4804      	ldr	r0, [pc, #16]	; (87d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x314>)
    87c2:	6a81      	ldr	r1, [r0, #40]	; 0x28
    87c4:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    87c8:	6281      	str	r1, [r0, #40]	; 0x28
    87ca:	4903      	ldr	r1, [pc, #12]	; (87d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x318>)
    87cc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    87d0:	6008      	str	r0, [r1, #0]
    87d2:	4770      	bx	lr
    87d4:	20001048 	.word	0x20001048
    87d8:	4001f504 	.word	0x4001f504
    87dc:	4a07      	ldr	r2, [pc, #28]	; (87fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    87de:	2000      	movs	r0, #0
    87e0:	3208      	adds	r2, #8
    87e2:	4906      	ldr	r1, [pc, #24]	; (87fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    87e4:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    87e8:	1d0a      	adds	r2, r1, #4
    87ea:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    87ee:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    87f2:	4902      	ldr	r1, [pc, #8]	; (87fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    87f4:	310c      	adds	r1, #12
    87f6:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    87fa:	4770      	bx	lr
    87fc:	40008000 	.word	0x40008000
    8800:	4903      	ldr	r1, [pc, #12]	; (8810 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x350>)
    8802:	79c9      	ldrb	r1, [r1, #7]
    8804:	2900      	cmp	r1, #0
    8806:	d102      	bne.n	880e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34e>
    8808:	4902      	ldr	r1, [pc, #8]	; (8814 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>)
    880a:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    880e:	4770      	bx	lr
    8810:	20001048 	.word	0x20001048
    8814:	4001f098 	.word	0x4001f098
    8818:	b510      	push	{r4, lr}
    881a:	4a14      	ldr	r2, [pc, #80]	; (886c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    881c:	b120      	cbz	r0, 8828 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x368>
    881e:	2801      	cmp	r0, #1
    8820:	d011      	beq.n	8846 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x386>
    8822:	f240 7169 	movw	r1, #1897	; 0x769
    8826:	e01c      	b.n	8862 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a2>
    8828:	f101 0028 	add.w	r0, r1, #40	; 0x28
    882c:	e9c2 1002 	strd	r1, r0, [r2, #8]
    8830:	490f      	ldr	r1, [pc, #60]	; (8870 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>)
    8832:	480e      	ldr	r0, [pc, #56]	; (886c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    8834:	f003 ff3e 	bl	c6b4 <mpsl_fem_pa_configuration_set>
    8838:	2800      	cmp	r0, #0
    883a:	d015      	beq.n	8868 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    883c:	1c40      	adds	r0, r0, #1
    883e:	d013      	beq.n	8868 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    8840:	f44f 61eb 	mov.w	r1, #1880	; 0x758
    8844:	e00d      	b.n	8862 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a2>
    8846:	f101 0029 	add.w	r0, r1, #41	; 0x29
    884a:	e9c2 1002 	strd	r1, r0, [r2, #8]
    884e:	4908      	ldr	r1, [pc, #32]	; (8870 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>)
    8850:	4806      	ldr	r0, [pc, #24]	; (886c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    8852:	f003 ff1d 	bl	c690 <mpsl_fem_lna_configuration_set>
    8856:	2800      	cmp	r0, #0
    8858:	d006      	beq.n	8868 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    885a:	1c40      	adds	r0, r0, #1
    885c:	d004      	beq.n	8868 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    885e:	f240 7165 	movw	r1, #1893	; 0x765
    8862:	203e      	movs	r0, #62	; 0x3e
    8864:	f7f8 f8fe 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8868:	bd10      	pop	{r4, pc}
    886a:	0000      	.short	0x0000
    886c:	200002a8 	.word	0x200002a8
    8870:	0000899c 	.word	0x0000899c
    8874:	4802      	ldr	r0, [pc, #8]	; (8880 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c0>)
    8876:	2100      	movs	r1, #0
    8878:	71c1      	strb	r1, [r0, #7]
    887a:	7201      	strb	r1, [r0, #8]
    887c:	7241      	strb	r1, [r0, #9]
    887e:	4770      	bx	lr
    8880:	20001048 	.word	0x20001048
    8884:	4a05      	ldr	r2, [pc, #20]	; (889c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3dc>)
    8886:	79d2      	ldrb	r2, [r2, #7]
    8888:	2a01      	cmp	r2, #1
    888a:	d006      	beq.n	889a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3da>
    888c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8890:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    8894:	fbb1 f1f2 	udiv	r1, r1, r2
    8898:	1a40      	subs	r0, r0, r1
    889a:	4770      	bx	lr
    889c:	20001048 	.word	0x20001048
    88a0:	b570      	push	{r4, r5, r6, lr}
    88a2:	4c13      	ldr	r4, [pc, #76]	; (88f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x430>)
    88a4:	4603      	mov	r3, r0
    88a6:	460d      	mov	r5, r1
    88a8:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    88ac:	2000      	movs	r0, #0
    88ae:	b15a      	cbz	r2, 88c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    88b0:	4621      	mov	r1, r4
    88b2:	f891 1020 	ldrb.w	r1, [r1, #32]
    88b6:	b163      	cbz	r3, 88d2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x412>
    88b8:	2b01      	cmp	r3, #1
    88ba:	d111      	bne.n	88e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x420>
    88bc:	2a01      	cmp	r2, #1
    88be:	4628      	mov	r0, r5
    88c0:	d012      	beq.n	88e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    88c2:	f007 fcfa 	bl	102ba <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    88c6:	e009      	b.n	88dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    88c8:	f640 016e 	movw	r1, #2158	; 0x86e
    88cc:	203e      	movs	r0, #62	; 0x3e
    88ce:	f7f8 f8c9 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    88d2:	2a01      	cmp	r2, #1
    88d4:	4628      	mov	r0, r5
    88d6:	d004      	beq.n	88e2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x422>
    88d8:	f007 fcfd 	bl	102d6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    88dc:	69e1      	ldr	r1, [r4, #28]
    88de:	4408      	add	r0, r1
    88e0:	bd70      	pop	{r4, r5, r6, pc}
    88e2:	f000 f8d1 	bl	8a88 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    88e6:	e7f9      	b.n	88dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    88e8:	f000 f8c0 	bl	8a6c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    88ec:	e7f6      	b.n	88dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    88ee:	0000      	.short	0x0000
    88f0:	20001048 	.word	0x20001048
    88f4:	b510      	push	{r4, lr}
    88f6:	f7ff fbef 	bl	80d8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    88fa:	f7ff fde7 	bl	84cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    88fe:	f7ff fe1d 	bl	853c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    8902:	f7ff ff53 	bl	87ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>
    8906:	f007 fe31 	bl	1056c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    890a:	2800      	cmp	r0, #0
    890c:	d108      	bne.n	8920 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    890e:	f007 fe1d 	bl	1054c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    8912:	2800      	cmp	r0, #0
    8914:	d104      	bne.n	8920 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    8916:	4803      	ldr	r0, [pc, #12]	; (8924 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x464>)
    8918:	6801      	ldr	r1, [r0, #0]
    891a:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    891e:	6001      	str	r1, [r0, #0]
    8920:	bd10      	pop	{r4, pc}
    8922:	0000      	.short	0x0000
    8924:	40001568 	.word	0x40001568
    8928:	b510      	push	{r4, lr}
    892a:	4604      	mov	r4, r0
    892c:	f7ff fbd4 	bl	80d8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8930:	f7ff fdcc 	bl	84cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    8934:	4620      	mov	r0, r4
    8936:	f7ff fde7 	bl	8508 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    893a:	f007 fe17 	bl	1056c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    893e:	2800      	cmp	r0, #0
    8940:	d00d      	beq.n	895e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49e>
    8942:	4a09      	ldr	r2, [pc, #36]	; (8968 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a8>)
    8944:	6811      	ldr	r1, [r2, #0]
    8946:	0650      	lsls	r0, r2, #25
    8948:	2c02      	cmp	r4, #2
    894a:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    894e:	d007      	beq.n	8960 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a0>
    8950:	f3c0 2006 	ubfx	r0, r0, #8, #7
    8954:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    8958:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    895c:	6010      	str	r0, [r2, #0]
    895e:	bd10      	pop	{r4, pc}
    8960:	f3c0 6006 	ubfx	r0, r0, #24, #7
    8964:	e7f6      	b.n	8954 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>
    8966:	0000      	.short	0x0000
    8968:	40001588 	.word	0x40001588
    896c:	a62c0000 	.word	0xa62c0000
    8970:	0604a1e0 	.word	0x0604a1e0
    8974:	0e0c0a08 	.word	0x0e0c0a08
    8978:	16141210 	.word	0x16141210
    897c:	201e1c18 	.word	0x201e1c18
    8980:	28262422 	.word	0x28262422
    8984:	302e2c2a 	.word	0x302e2c2a
    8988:	38363432 	.word	0x38363432
    898c:	403e3c3a 	.word	0x403e3c3a
    8990:	48464442 	.word	0x48464442
    8994:	024e4c4a 	.word	0x024e4c4a
    8998:	0000501a 	.word	0x0000501a
    899c:	00000001 	.word	0x00000001
    89a0:	40001110 	.word	0x40001110
	...
    89b8:	00001e14 	.word	0x00001e14
    89bc:	00001130 	.word	0x00001130
    89c0:	00000000 	.word	0x00000000
    89c4:	00000028 	.word	0x00000028
    89c8:	00000018 	.word	0x00000018
    89cc:	00000000 	.word	0x00000000
    89d0:	00001e14 	.word	0x00001e14
    89d4:	00001130 	.word	0x00001130
    89d8:	00000000 	.word	0x00000000
    89dc:	00001770 	.word	0x00001770
    89e0:	00000fa0 	.word	0x00000fa0

000089e4 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    89e4:	b570      	push	{r4, r5, r6, lr}
    89e6:	4605      	mov	r5, r0
    89e8:	4614      	mov	r4, r2
    89ea:	4608      	mov	r0, r1
    89ec:	f7ff fb9a 	bl	8124 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    89f0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    89f4:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    89f8:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    89fc:	4807      	ldr	r0, [pc, #28]	; (8a1c <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    89fe:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    8a02:	4408      	add	r0, r1
    8a04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8a08:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    8a0c:	fbb0 f5f1 	udiv	r5, r0, r1
    8a10:	4620      	mov	r0, r4
    8a12:	f7ff fb5b 	bl	80cc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8a16:	4428      	add	r0, r5
    8a18:	1d40      	adds	r0, r0, #5
    8a1a:	bd70      	pop	{r4, r5, r6, pc}
    8a1c:	00008aac 	.word	0x00008aac

00008a20 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    8a20:	b570      	push	{r4, r5, r6, lr}
    8a22:	4d0e      	ldr	r5, [pc, #56]	; (8a5c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    8a24:	461c      	mov	r4, r3
    8a26:	3d08      	subs	r5, #8
    8a28:	4b0c      	ldr	r3, [pc, #48]	; (8a5c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    8a2a:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    8a2e:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    8a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8a36:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    8a3a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    8a3e:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    8a42:	4418      	add	r0, r3
    8a44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8a48:	fbb0 f5f1 	udiv	r5, r0, r1
    8a4c:	4610      	mov	r0, r2
    8a4e:	f7ff fb3d 	bl	80cc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8a52:	4428      	add	r0, r5
    8a54:	4420      	add	r0, r4
    8a56:	1d40      	adds	r0, r0, #5
    8a58:	bd70      	pop	{r4, r5, r6, pc}
    8a5a:	0000      	.short	0x0000
    8a5c:	00008aac 	.word	0x00008aac

00008a60 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    8a60:	4901      	ldr	r1, [pc, #4]	; (8a68 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    8a62:	b2c0      	uxtb	r0, r0
    8a64:	6008      	str	r0, [r1, #0]
    8a66:	4770      	bx	lr
    8a68:	4000150c 	.word	0x4000150c

00008a6c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    8a6c:	4a05      	ldr	r2, [pc, #20]	; (8a84 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    8a6e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8a72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8a76:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    8a7a:	fbb1 f1f2 	udiv	r1, r1, r2
    8a7e:	4408      	add	r0, r1
    8a80:	1e80      	subs	r0, r0, #2
    8a82:	4770      	bx	lr
    8a84:	00008aa4 	.word	0x00008aa4

00008a88 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    8a88:	4a05      	ldr	r2, [pc, #20]	; (8aa0 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    8a8a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8a8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8a92:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    8a96:	fbb1 f1f2 	udiv	r1, r1, r2
    8a9a:	4408      	add	r0, r1
    8a9c:	4770      	bx	lr
    8a9e:	0000      	.short	0x0000
    8aa0:	00008aa4 	.word	0x00008aa4
    8aa4:	05dc0000 	.word	0x05dc0000
    8aa8:	000003e8 	.word	0x000003e8
    8aac:	00000000 	.word	0x00000000
    8ab0:	00001e14 	.word	0x00001e14
    8ab4:	00001130 	.word	0x00001130

00008ab8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    8ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8abc:	461e      	mov	r6, r3
    8abe:	4617      	mov	r7, r2
    8ac0:	460c      	mov	r4, r1
    8ac2:	4605      	mov	r5, r0
    8ac4:	f000 f856 	bl	8b74 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    8ac8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8b70 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    8acc:	4680      	mov	r8, r0
    8ace:	f899 0000 	ldrb.w	r0, [r9]
    8ad2:	42a8      	cmp	r0, r5
    8ad4:	d110      	bne.n	8af8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8ad6:	f899 1001 	ldrb.w	r1, [r9, #1]
    8ada:	4648      	mov	r0, r9
    8adc:	42a1      	cmp	r1, r4
    8ade:	d10b      	bne.n	8af8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8ae0:	f990 1002 	ldrsb.w	r1, [r0, #2]
    8ae4:	42b9      	cmp	r1, r7
    8ae6:	d107      	bne.n	8af8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8ae8:	78c2      	ldrb	r2, [r0, #3]
    8aea:	4542      	cmp	r2, r8
    8aec:	d104      	bne.n	8af8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8aee:	8881      	ldrh	r1, [r0, #4]
    8af0:	8031      	strh	r1, [r6, #0]
    8af2:	7980      	ldrb	r0, [r0, #6]
    8af4:	70b0      	strb	r0, [r6, #2]
    8af6:	e037      	b.n	8b68 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb0>
    8af8:	463a      	mov	r2, r7
    8afa:	4621      	mov	r1, r4
    8afc:	2d01      	cmp	r5, #1
    8afe:	d009      	beq.n	8b14 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    8b00:	2d02      	cmp	r5, #2
    8b02:	d009      	beq.n	8b18 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    8b04:	2d04      	cmp	r5, #4
    8b06:	d009      	beq.n	8b1c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    8b08:	2d08      	cmp	r5, #8
    8b0a:	d009      	beq.n	8b20 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    8b0c:	f240 4162 	movw	r1, #1122	; 0x462
    8b10:	2006      	movs	r0, #6
    8b12:	e00c      	b.n	8b2e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    8b14:	2000      	movs	r0, #0
    8b16:	e004      	b.n	8b22 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8b18:	2001      	movs	r0, #1
    8b1a:	e002      	b.n	8b22 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8b1c:	2003      	movs	r0, #3
    8b1e:	e000      	b.n	8b22 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8b20:	2002      	movs	r0, #2
    8b22:	466b      	mov	r3, sp
    8b24:	f000 f89e 	bl	8c64 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    8b28:	b118      	cbz	r0, 8b32 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    8b2a:	213d      	movs	r1, #61	; 0x3d
    8b2c:	2075      	movs	r0, #117	; 0x75
    8b2e:	f7f7 ff99 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b32:	4620      	mov	r0, r4
    8b34:	f7ff f8b4 	bl	7ca0 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    8b38:	4602      	mov	r2, r0
    8b3a:	2300      	movs	r3, #0
    8b3c:	4631      	mov	r1, r6
    8b3e:	f99d 0000 	ldrsb.w	r0, [sp]
    8b42:	f003 fdc9 	bl	c6d8 <mpsl_fem_tx_power_split>
    8b46:	4601      	mov	r1, r0
    8b48:	f889 1007 	strb.w	r1, [r9, #7]
    8b4c:	8831      	ldrh	r1, [r6, #0]
    8b4e:	f8a9 1004 	strh.w	r1, [r9, #4]
    8b52:	78b1      	ldrb	r1, [r6, #2]
    8b54:	f889 1006 	strb.w	r1, [r9, #6]
    8b58:	f889 5000 	strb.w	r5, [r9]
    8b5c:	f889 4001 	strb.w	r4, [r9, #1]
    8b60:	f889 7002 	strb.w	r7, [r9, #2]
    8b64:	f889 8003 	strb.w	r8, [r9, #3]
    8b68:	f999 0007 	ldrsb.w	r0, [r9, #7]
    8b6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8b70:	20000362 	.word	0x20000362

00008b74 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    8b74:	4801      	ldr	r0, [pc, #4]	; (8b7c <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    8b76:	7800      	ldrb	r0, [r0, #0]
    8b78:	4770      	bx	lr
    8b7a:	0000      	.short	0x0000
    8b7c:	200002c0 	.word	0x200002c0

00008b80 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    8b80:	b570      	push	{r4, r5, r6, lr}
    8b82:	4c17      	ldr	r4, [pc, #92]	; (8be0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
    8b84:	7860      	ldrb	r0, [r4, #1]
    8b86:	2800      	cmp	r0, #0
    8b88:	d123      	bne.n	8bd2 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
    8b8a:	2001      	movs	r0, #1
    8b8c:	7060      	strb	r0, [r4, #1]
    8b8e:	f007 fcc7 	bl	10520 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    8b92:	f06f 0527 	mvn.w	r5, #39	; 0x27
    8b96:	b928      	cbnz	r0, 8ba4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8b98:	f007 fcf8 	bl	1058c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    8b9c:	b910      	cbnz	r0, 8ba4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8b9e:	f007 fcff 	bl	105a0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    8ba2:	b120      	cbz	r0, 8bae <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
    8ba4:	480f      	ldr	r0, [pc, #60]	; (8be4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8ba6:	6060      	str	r0, [r4, #4]
    8ba8:	70a5      	strb	r5, [r4, #2]
    8baa:	2008      	movs	r0, #8
    8bac:	e010      	b.n	8bd0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
    8bae:	f007 fc8c 	bl	104ca <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    8bb2:	b940      	cbnz	r0, 8bc6 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8bb4:	f007 fc93 	bl	104de <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    8bb8:	b928      	cbnz	r0, 8bc6 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8bba:	f007 fca7 	bl	1050c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    8bbe:	b910      	cbnz	r0, 8bc6 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8bc0:	f007 fcb8 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    8bc4:	b130      	cbz	r0, 8bd4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
    8bc6:	4807      	ldr	r0, [pc, #28]	; (8be4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8bc8:	3031      	adds	r0, #49	; 0x31
    8bca:	6060      	str	r0, [r4, #4]
    8bcc:	70a5      	strb	r5, [r4, #2]
    8bce:	2004      	movs	r0, #4
    8bd0:	70e0      	strb	r0, [r4, #3]
    8bd2:	bd70      	pop	{r4, r5, r6, pc}
    8bd4:	f240 113f 	movw	r1, #319	; 0x13f
    8bd8:	2074      	movs	r0, #116	; 0x74
    8bda:	f003 fbbd 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8bde:	0000      	.short	0x0000
    8be0:	200002c0 	.word	0x200002c0
    8be4:	000108ed 	.word	0x000108ed

00008be8 <mpsl_tx_power_radio_supported_power_adjust>:
    8be8:	4a06      	ldr	r2, [pc, #24]	; (8c04 <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
    8bea:	b500      	push	{lr}
    8bec:	f992 2003 	ldrsb.w	r2, [r2, #3]
    8bf0:	4290      	cmp	r0, r2
    8bf2:	db01      	blt.n	8bf8 <mpsl_tx_power_radio_supported_power_adjust+0x10>
    8bf4:	4610      	mov	r0, r2
    8bf6:	bd00      	pop	{pc}
    8bf8:	f000 f808 	bl	8c0c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
    8bfc:	4902      	ldr	r1, [pc, #8]	; (8c08 <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    8bfe:	5608      	ldrsb	r0, [r1, r0]
    8c00:	bd00      	pop	{pc}
    8c02:	0000      	.short	0x0000
    8c04:	200002c0 	.word	0x200002c0
    8c08:	000108df 	.word	0x000108df

00008c0c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
    8c0c:	4602      	mov	r2, r0
    8c0e:	4813      	ldr	r0, [pc, #76]	; (8c5c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
    8c10:	b510      	push	{r4, lr}
    8c12:	f990 3003 	ldrsb.w	r3, [r0, #3]
    8c16:	429a      	cmp	r2, r3
    8c18:	db01      	blt.n	8c1e <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
    8c1a:	200d      	movs	r0, #13
    8c1c:	bd10      	pop	{r4, pc}
    8c1e:	f990 3002 	ldrsb.w	r3, [r0, #2]
    8c22:	429a      	cmp	r2, r3
    8c24:	dc01      	bgt.n	8c2a <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
    8c26:	2000      	movs	r0, #0
    8c28:	bd10      	pop	{r4, pc}
    8c2a:	b101      	cbz	r1, 8c2e <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
    8c2c:	2101      	movs	r1, #1
    8c2e:	1ad4      	subs	r4, r2, r3
    8c30:	6843      	ldr	r3, [r0, #4]
    8c32:	5d18      	ldrb	r0, [r3, r4]
    8c34:	4c0a      	ldr	r4, [pc, #40]	; (8c60 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    8c36:	5624      	ldrsb	r4, [r4, r0]
    8c38:	4294      	cmp	r4, r2
    8c3a:	d0f5      	beq.n	8c28 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8c3c:	4c08      	ldr	r4, [pc, #32]	; (8c60 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    8c3e:	4408      	add	r0, r1
    8c40:	343f      	adds	r4, #63	; 0x3f
    8c42:	b2c0      	uxtb	r0, r0
    8c44:	b2d2      	uxtb	r2, r2
    8c46:	42a3      	cmp	r3, r4
    8c48:	d1ee      	bne.n	8c28 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8c4a:	2900      	cmp	r1, #0
    8c4c:	d0ec      	beq.n	8c28 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8c4e:	2a01      	cmp	r2, #1
    8c50:	d001      	beq.n	8c56 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
    8c52:	2a02      	cmp	r2, #2
    8c54:	d1e8      	bne.n	8c28 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8c56:	1c40      	adds	r0, r0, #1
    8c58:	b2c0      	uxtb	r0, r0
    8c5a:	bd10      	pop	{r4, pc}
    8c5c:	200002c0 	.word	0x200002c0
    8c60:	000108df 	.word	0x000108df

00008c64 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    8c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c68:	461c      	mov	r4, r3
    8c6a:	4690      	mov	r8, r2
    8c6c:	460d      	mov	r5, r1
    8c6e:	4606      	mov	r6, r0
    8c70:	f06f 0715 	mvn.w	r7, #21
    8c74:	2804      	cmp	r0, #4
    8c76:	d804      	bhi.n	8c82 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8c78:	b11c      	cbz	r4, 8c82 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8c7a:	f007 fb37 	bl	102ec <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x16>
    8c7e:	42a8      	cmp	r0, r5
    8c80:	d802      	bhi.n	8c88 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    8c82:	4638      	mov	r0, r7
    8c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8c88:	4805      	ldr	r0, [pc, #20]	; (8ca0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    8c8a:	4642      	mov	r2, r8
    8c8c:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    8c90:	b118      	cbz	r0, 8c9a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8c92:	5740      	ldrsb	r0, [r0, r5]
    8c94:	4282      	cmp	r2, r0
    8c96:	dd00      	ble.n	8c9a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8c98:	4602      	mov	r2, r0
    8c9a:	7022      	strb	r2, [r4, #0]
    8c9c:	2000      	movs	r0, #0
    8c9e:	e7f1      	b.n	8c84 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    8ca0:	20001080 	.word	0x20001080

00008ca4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    8ca4:	4801      	ldr	r0, [pc, #4]	; (8cac <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    8ca6:	7800      	ldrb	r0, [r0, #0]
    8ca8:	4770      	bx	lr
    8caa:	0000      	.short	0x0000
    8cac:	200002c8 	.word	0x200002c8

00008cb0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    8cb0:	4905      	ldr	r1, [pc, #20]	; (8cc8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    8cb2:	780a      	ldrb	r2, [r1, #0]
    8cb4:	4290      	cmp	r0, r2
    8cb6:	d301      	bcc.n	8cbc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    8cb8:	2000      	movs	r0, #0
    8cba:	4770      	bx	lr
    8cbc:	6849      	ldr	r1, [r1, #4]
    8cbe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8cc2:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    8cc6:	4770      	bx	lr
    8cc8:	200002c8 	.word	0x200002c8

00008ccc <MPSL_IRQ_RADIO_Handler>:
    8ccc:	490e      	ldr	r1, [pc, #56]	; (8d08 <MPSL_IRQ_RADIO_Handler+0x3c>)
    8cce:	b510      	push	{r4, lr}
    8cd0:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
    8cd4:	2820      	cmp	r0, #32
    8cd6:	d012      	beq.n	8cfe <MPSL_IRQ_RADIO_Handler+0x32>
    8cd8:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
    8cdc:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
    8ce0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    8ce4:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    8ce8:	f891 1032 	ldrb.w	r1, [r1, #50]	; 0x32
    8cec:	6840      	ldr	r0, [r0, #4]
    8cee:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    8cf2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    8cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8cfa:	2104      	movs	r1, #4
    8cfc:	4710      	bx	r2
    8cfe:	f640 01bc 	movw	r1, #2236	; 0x8bc
    8d02:	2070      	movs	r0, #112	; 0x70
    8d04:	f003 fb28 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8d08:	20001494 	.word	0x20001494
    8d0c:	b570      	push	{r4, r5, r6, lr}
    8d0e:	4605      	mov	r5, r0
    8d10:	2a20      	cmp	r2, #32
    8d12:	d028      	beq.n	8d66 <MPSL_IRQ_RADIO_Handler+0x9a>
    8d14:	4819      	ldr	r0, [pc, #100]	; (8d7c <MPSL_IRQ_RADIO_Handler+0xb0>)
    8d16:	4c1a      	ldr	r4, [pc, #104]	; (8d80 <MPSL_IRQ_RADIO_Handler+0xb4>)
    8d18:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    8d1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8d20:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    8d24:	4423      	add	r3, r4
    8d26:	2920      	cmp	r1, #32
    8d28:	d022      	beq.n	8d70 <MPSL_IRQ_RADIO_Handler+0xa4>
    8d2a:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    8d2e:	7840      	ldrb	r0, [r0, #1]
    8d30:	784c      	ldrb	r4, [r1, #1]
    8d32:	7048      	strb	r0, [r1, #1]
    8d34:	4620      	mov	r0, r4
    8d36:	4601      	mov	r1, r0
    8d38:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    8d3c:	4291      	cmp	r1, r2
    8d3e:	7005      	strb	r5, [r0, #0]
    8d40:	7840      	ldrb	r0, [r0, #1]
    8d42:	d1f8      	bne.n	8d36 <MPSL_IRQ_RADIO_Handler+0x6a>
    8d44:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    8d48:	2a20      	cmp	r2, #32
    8d4a:	bf1a      	itte	ne
    8d4c:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    8d50:	7054      	strbne	r4, [r2, #1]
    8d52:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    8d56:	2220      	movs	r2, #32
    8d58:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    8d5c:	f88c 2001 	strb.w	r2, [ip, #1]
    8d60:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    8d64:	bd70      	pop	{r4, r5, r6, pc}
    8d66:	f44f 7126 	mov.w	r1, #664	; 0x298
    8d6a:	2070      	movs	r0, #112	; 0x70
    8d6c:	f003 faf4 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8d70:	f893 4020 	ldrb.w	r4, [r3, #32]
    8d74:	7840      	ldrb	r0, [r0, #1]
    8d76:	f883 0020 	strb.w	r0, [r3, #32]
    8d7a:	e7db      	b.n	8d34 <MPSL_IRQ_RADIO_Handler+0x68>
    8d7c:	20001414 	.word	0x20001414
    8d80:	20001494 	.word	0x20001494
    8d84:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d88:	b08d      	sub	sp, #52	; 0x34
    8d8a:	4615      	mov	r5, r2
    8d8c:	460c      	mov	r4, r1
    8d8e:	f002 fa11 	bl	b1b4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    8d92:	4428      	add	r0, r5
    8d94:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8d98:	9008      	str	r0, [sp, #32]
    8d9a:	6821      	ldr	r1, [r4, #0]
    8d9c:	1a08      	subs	r0, r1, r0
    8d9e:	0200      	lsls	r0, r0, #8
    8da0:	17c1      	asrs	r1, r0, #31
    8da2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    8da6:	1200      	asrs	r0, r0, #8
    8da8:	2800      	cmp	r0, #0
    8daa:	f300 80f0 	bgt.w	8f8e <MPSL_IRQ_RADIO_Handler+0x2c2>
    8dae:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    8db2:	48cd      	ldr	r0, [pc, #820]	; (90e8 <MPSL_IRQ_RADIO_Handler+0x41c>)
    8db4:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    8db8:	4408      	add	r0, r1
    8dba:	9009      	str	r0, [sp, #36]	; 0x24
    8dbc:	f890 5020 	ldrb.w	r5, [r0, #32]
    8dc0:	2020      	movs	r0, #32
    8dc2:	4eca      	ldr	r6, [pc, #808]	; (90ec <MPSL_IRQ_RADIO_Handler+0x420>)
    8dc4:	f10d 0a18 	add.w	sl, sp, #24
    8dc8:	f10d 091c 	add.w	r9, sp, #28
    8dcc:	f88d 0018 	strb.w	r0, [sp, #24]
    8dd0:	2d20      	cmp	r5, #32
    8dd2:	bf1c      	itt	ne
    8dd4:	48c6      	ldrne	r0, [pc, #792]	; (90f0 <MPSL_IRQ_RADIO_Handler+0x424>)
    8dd6:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    8dda:	d038      	beq.n	8e4e <MPSL_IRQ_RADIO_Handler+0x182>
    8ddc:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    8de0:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    8de4:	f100 0108 	add.w	r1, r0, #8
    8de8:	68c0      	ldr	r0, [r0, #12]
    8dea:	6827      	ldr	r7, [r4, #0]
    8dec:	1a38      	subs	r0, r7, r0
    8dee:	0200      	lsls	r0, r0, #8
    8df0:	17c2      	asrs	r2, r0, #31
    8df2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8df6:	1200      	asrs	r0, r0, #8
    8df8:	d429      	bmi.n	8e4e <MPSL_IRQ_RADIO_Handler+0x182>
    8dfa:	89e0      	ldrh	r0, [r4, #14]
    8dfc:	b300      	cbz	r0, 8e40 <MPSL_IRQ_RADIO_Handler+0x174>
    8dfe:	89c8      	ldrh	r0, [r1, #14]
    8e00:	b9f0      	cbnz	r0, 8e40 <MPSL_IRQ_RADIO_Handler+0x174>
    8e02:	6808      	ldr	r0, [r1, #0]
    8e04:	9003      	str	r0, [sp, #12]
    8e06:	f003 f907 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8e0a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8e0e:	bf08      	it	eq
    8e10:	200d      	moveq	r0, #13
    8e12:	d00b      	beq.n	8e2c <MPSL_IRQ_RADIO_Handler+0x160>
    8e14:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8e18:	3856      	subs	r0, #86	; 0x56
    8e1a:	bf08      	it	eq
    8e1c:	201c      	moveq	r0, #28
    8e1e:	d005      	beq.n	8e2c <MPSL_IRQ_RADIO_Handler+0x160>
    8e20:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8e24:	389f      	subs	r0, #159	; 0x9f
    8e26:	bf14      	ite	ne
    8e28:	2000      	movne	r0, #0
    8e2a:	2032      	moveq	r0, #50	; 0x32
    8e2c:	1c41      	adds	r1, r0, #1
    8e2e:	9803      	ldr	r0, [sp, #12]
    8e30:	1a38      	subs	r0, r7, r0
    8e32:	0200      	lsls	r0, r0, #8
    8e34:	17c2      	asrs	r2, r0, #31
    8e36:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8e3a:	1200      	asrs	r0, r0, #8
    8e3c:	4288      	cmp	r0, r1
    8e3e:	db06      	blt.n	8e4e <MPSL_IRQ_RADIO_Handler+0x182>
    8e40:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    8e44:	f88a 5000 	strb.w	r5, [sl]
    8e48:	7845      	ldrb	r5, [r0, #1]
    8e4a:	2d20      	cmp	r5, #32
    8e4c:	d1c6      	bne.n	8ddc <MPSL_IRQ_RADIO_Handler+0x110>
    8e4e:	f89a 0000 	ldrb.w	r0, [sl]
    8e52:	f889 0000 	strb.w	r0, [r9]
    8e56:	2d20      	cmp	r5, #32
    8e58:	bf1c      	itt	ne
    8e5a:	48a5      	ldrne	r0, [pc, #660]	; (90f0 <MPSL_IRQ_RADIO_Handler+0x424>)
    8e5c:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    8e60:	f000 813e 	beq.w	90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    8e64:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    8e68:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    8e6c:	6861      	ldr	r1, [r4, #4]
    8e6e:	f8d7 8008 	ldr.w	r8, [r7, #8]
    8e72:	f107 0008 	add.w	r0, r7, #8
    8e76:	eba8 0101 	sub.w	r1, r8, r1
    8e7a:	0209      	lsls	r1, r1, #8
    8e7c:	17ca      	asrs	r2, r1, #31
    8e7e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    8e82:	1209      	asrs	r1, r1, #8
    8e84:	d427      	bmi.n	8ed6 <MPSL_IRQ_RADIO_Handler+0x20a>
    8e86:	89c0      	ldrh	r0, [r0, #14]
    8e88:	2800      	cmp	r0, #0
    8e8a:	f000 8129 	beq.w	90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    8e8e:	89e0      	ldrh	r0, [r4, #14]
    8e90:	2800      	cmp	r0, #0
    8e92:	f040 8125 	bne.w	90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    8e96:	f8d4 a000 	ldr.w	sl, [r4]
    8e9a:	f003 f8bd 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8e9e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8ea2:	bf08      	it	eq
    8ea4:	200d      	moveq	r0, #13
    8ea6:	d00b      	beq.n	8ec0 <MPSL_IRQ_RADIO_Handler+0x1f4>
    8ea8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8eac:	3856      	subs	r0, #86	; 0x56
    8eae:	bf08      	it	eq
    8eb0:	201c      	moveq	r0, #28
    8eb2:	d005      	beq.n	8ec0 <MPSL_IRQ_RADIO_Handler+0x1f4>
    8eb4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8eb8:	389f      	subs	r0, #159	; 0x9f
    8eba:	bf14      	ite	ne
    8ebc:	2000      	movne	r0, #0
    8ebe:	2032      	moveq	r0, #50	; 0x32
    8ec0:	1c41      	adds	r1, r0, #1
    8ec2:	eba8 000a 	sub.w	r0, r8, sl
    8ec6:	0200      	lsls	r0, r0, #8
    8ec8:	17c2      	asrs	r2, r0, #31
    8eca:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8ece:	1200      	asrs	r0, r0, #8
    8ed0:	4288      	cmp	r0, r1
    8ed2:	f280 8105 	bge.w	90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    8ed6:	f889 5000 	strb.w	r5, [r9]
    8eda:	7e38      	ldrb	r0, [r7, #24]
    8edc:	7c21      	ldrb	r1, [r4, #16]
    8ede:	4288      	cmp	r0, r1
    8ee0:	d906      	bls.n	8ef0 <MPSL_IRQ_RADIO_Handler+0x224>
    8ee2:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    8ee6:	7845      	ldrb	r5, [r0, #1]
    8ee8:	2d20      	cmp	r5, #32
    8eea:	d1bb      	bne.n	8e64 <MPSL_IRQ_RADIO_Handler+0x198>
    8eec:	f000 b8f8 	b.w	90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    8ef0:	f89d 001c 	ldrb.w	r0, [sp, #28]
    8ef4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    8ef8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    8efc:	8ac1      	ldrh	r1, [r0, #22]
    8efe:	68c5      	ldr	r5, [r0, #12]
    8f00:	bbe1      	cbnz	r1, 8f7c <MPSL_IRQ_RADIO_Handler+0x2b0>
    8f02:	89e1      	ldrh	r1, [r4, #14]
    8f04:	b3d1      	cbz	r1, 8f7c <MPSL_IRQ_RADIO_Handler+0x2b0>
    8f06:	6887      	ldr	r7, [r0, #8]
    8f08:	f003 f886 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8f0c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8f10:	bf08      	it	eq
    8f12:	200d      	moveq	r0, #13
    8f14:	d00b      	beq.n	8f2e <MPSL_IRQ_RADIO_Handler+0x262>
    8f16:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8f1a:	3856      	subs	r0, #86	; 0x56
    8f1c:	bf08      	it	eq
    8f1e:	201c      	moveq	r0, #28
    8f20:	d005      	beq.n	8f2e <MPSL_IRQ_RADIO_Handler+0x262>
    8f22:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8f26:	389f      	subs	r0, #159	; 0x9f
    8f28:	bf14      	ite	ne
    8f2a:	2000      	movne	r0, #0
    8f2c:	2032      	moveq	r0, #50	; 0x32
    8f2e:	1c41      	adds	r1, r0, #1
    8f30:	1be8      	subs	r0, r5, r7
    8f32:	0200      	lsls	r0, r0, #8
    8f34:	17c2      	asrs	r2, r0, #31
    8f36:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8f3a:	1200      	asrs	r0, r0, #8
    8f3c:	4288      	cmp	r0, r1
    8f3e:	da1d      	bge.n	8f7c <MPSL_IRQ_RADIO_Handler+0x2b0>
    8f40:	f003 f86a 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8f44:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8f48:	bf08      	it	eq
    8f4a:	200d      	moveq	r0, #13
    8f4c:	d00b      	beq.n	8f66 <MPSL_IRQ_RADIO_Handler+0x29a>
    8f4e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8f52:	3856      	subs	r0, #86	; 0x56
    8f54:	bf08      	it	eq
    8f56:	201c      	moveq	r0, #28
    8f58:	d005      	beq.n	8f66 <MPSL_IRQ_RADIO_Handler+0x29a>
    8f5a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8f5e:	389f      	subs	r0, #159	; 0x9f
    8f60:	bf14      	ite	ne
    8f62:	2000      	movne	r0, #0
    8f64:	2032      	moveq	r0, #50	; 0x32
    8f66:	f89d 101c 	ldrb.w	r1, [sp, #28]
    8f6a:	1c40      	adds	r0, r0, #1
    8f6c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    8f70:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    8f74:	6889      	ldr	r1, [r1, #8]
    8f76:	4408      	add	r0, r1
    8f78:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    8f7c:	9808      	ldr	r0, [sp, #32]
    8f7e:	1a28      	subs	r0, r5, r0
    8f80:	0200      	lsls	r0, r0, #8
    8f82:	17c1      	asrs	r1, r0, #31
    8f84:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    8f88:	1200      	asrs	r0, r0, #8
    8f8a:	2800      	cmp	r0, #0
    8f8c:	dd03      	ble.n	8f96 <MPSL_IRQ_RADIO_Handler+0x2ca>
    8f8e:	b011      	add	sp, #68	; 0x44
    8f90:	2000      	movs	r0, #0
    8f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8f96:	6820      	ldr	r0, [r4, #0]
    8f98:	42a8      	cmp	r0, r5
    8f9a:	d902      	bls.n	8fa2 <MPSL_IRQ_RADIO_Handler+0x2d6>
    8f9c:	68a1      	ldr	r1, [r4, #8]
    8f9e:	1c49      	adds	r1, r1, #1
    8fa0:	60a1      	str	r1, [r4, #8]
    8fa2:	6861      	ldr	r1, [r4, #4]
    8fa4:	f10d 0a18 	add.w	sl, sp, #24
    8fa8:	1a08      	subs	r0, r1, r0
    8faa:	4428      	add	r0, r5
    8fac:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
    8fb0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8fb4:	e9c4 1000 	strd	r1, r0, [r4]
    8fb8:	9810      	ldr	r0, [sp, #64]	; 0x40
    8fba:	900b      	str	r0, [sp, #44]	; 0x2c
    8fbc:	9809      	ldr	r0, [sp, #36]	; 0x24
    8fbe:	f10d 081c 	add.w	r8, sp, #28
    8fc2:	f890 5020 	ldrb.w	r5, [r0, #32]
    8fc6:	2020      	movs	r0, #32
    8fc8:	f88d 0018 	strb.w	r0, [sp, #24]
    8fcc:	2d20      	cmp	r5, #32
    8fce:	d03c      	beq.n	904a <MPSL_IRQ_RADIO_Handler+0x37e>
    8fd0:	4947      	ldr	r1, [pc, #284]	; (90f0 <MPSL_IRQ_RADIO_Handler+0x424>)
    8fd2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8fd4:	eb01 1b80 	add.w	fp, r1, r0, lsl #6
    8fd8:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    8fdc:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    8fe0:	f100 0108 	add.w	r1, r0, #8
    8fe4:	68c0      	ldr	r0, [r0, #12]
    8fe6:	6827      	ldr	r7, [r4, #0]
    8fe8:	1a38      	subs	r0, r7, r0
    8fea:	0200      	lsls	r0, r0, #8
    8fec:	17c2      	asrs	r2, r0, #31
    8fee:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8ff2:	1200      	asrs	r0, r0, #8
    8ff4:	d429      	bmi.n	904a <MPSL_IRQ_RADIO_Handler+0x37e>
    8ff6:	89e0      	ldrh	r0, [r4, #14]
    8ff8:	b300      	cbz	r0, 903c <MPSL_IRQ_RADIO_Handler+0x370>
    8ffa:	89c8      	ldrh	r0, [r1, #14]
    8ffc:	b9f0      	cbnz	r0, 903c <MPSL_IRQ_RADIO_Handler+0x370>
    8ffe:	f8d1 9000 	ldr.w	r9, [r1]
    9002:	f003 f809 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9006:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    900a:	bf08      	it	eq
    900c:	200d      	moveq	r0, #13
    900e:	d00b      	beq.n	9028 <MPSL_IRQ_RADIO_Handler+0x35c>
    9010:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9014:	3856      	subs	r0, #86	; 0x56
    9016:	bf08      	it	eq
    9018:	201c      	moveq	r0, #28
    901a:	d005      	beq.n	9028 <MPSL_IRQ_RADIO_Handler+0x35c>
    901c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9020:	389f      	subs	r0, #159	; 0x9f
    9022:	bf14      	ite	ne
    9024:	2000      	movne	r0, #0
    9026:	2032      	moveq	r0, #50	; 0x32
    9028:	1c41      	adds	r1, r0, #1
    902a:	eba7 0009 	sub.w	r0, r7, r9
    902e:	0200      	lsls	r0, r0, #8
    9030:	17c2      	asrs	r2, r0, #31
    9032:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    9036:	1200      	asrs	r0, r0, #8
    9038:	4288      	cmp	r0, r1
    903a:	db06      	blt.n	904a <MPSL_IRQ_RADIO_Handler+0x37e>
    903c:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    9040:	f88a 5000 	strb.w	r5, [sl]
    9044:	7845      	ldrb	r5, [r0, #1]
    9046:	2d20      	cmp	r5, #32
    9048:	d1c6      	bne.n	8fd8 <MPSL_IRQ_RADIO_Handler+0x30c>
    904a:	f89a 0000 	ldrb.w	r0, [sl]
    904e:	f888 0000 	strb.w	r0, [r8]
    9052:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9054:	2d20      	cmp	r5, #32
    9056:	bf1c      	itt	ne
    9058:	4925      	ldrne	r1, [pc, #148]	; (90f0 <MPSL_IRQ_RADIO_Handler+0x424>)
    905a:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    905e:	d03f      	beq.n	90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    9060:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    9064:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    9068:	6860      	ldr	r0, [r4, #4]
    906a:	f8d7 9008 	ldr.w	r9, [r7, #8]
    906e:	f107 0108 	add.w	r1, r7, #8
    9072:	eba9 0000 	sub.w	r0, r9, r0
    9076:	0200      	lsls	r0, r0, #8
    9078:	17c2      	asrs	r2, r0, #31
    907a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    907e:	1200      	asrs	r0, r0, #8
    9080:	d422      	bmi.n	90c8 <MPSL_IRQ_RADIO_Handler+0x3fc>
    9082:	89c8      	ldrh	r0, [r1, #14]
    9084:	b360      	cbz	r0, 90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    9086:	89e0      	ldrh	r0, [r4, #14]
    9088:	bb50      	cbnz	r0, 90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    908a:	f8d4 a000 	ldr.w	sl, [r4]
    908e:	f002 ffc3 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9092:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9096:	bf08      	it	eq
    9098:	200d      	moveq	r0, #13
    909a:	d00b      	beq.n	90b4 <MPSL_IRQ_RADIO_Handler+0x3e8>
    909c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    90a0:	3856      	subs	r0, #86	; 0x56
    90a2:	bf08      	it	eq
    90a4:	201c      	moveq	r0, #28
    90a6:	d005      	beq.n	90b4 <MPSL_IRQ_RADIO_Handler+0x3e8>
    90a8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    90ac:	389f      	subs	r0, #159	; 0x9f
    90ae:	bf14      	ite	ne
    90b0:	2000      	movne	r0, #0
    90b2:	2032      	moveq	r0, #50	; 0x32
    90b4:	1c41      	adds	r1, r0, #1
    90b6:	eba9 000a 	sub.w	r0, r9, sl
    90ba:	0200      	lsls	r0, r0, #8
    90bc:	17c2      	asrs	r2, r0, #31
    90be:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    90c2:	1200      	asrs	r0, r0, #8
    90c4:	4288      	cmp	r0, r1
    90c6:	da0b      	bge.n	90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    90c8:	f888 5000 	strb.w	r5, [r8]
    90cc:	7e38      	ldrb	r0, [r7, #24]
    90ce:	7c21      	ldrb	r1, [r4, #16]
    90d0:	4288      	cmp	r0, r1
    90d2:	f67f af0d 	bls.w	8ef0 <MPSL_IRQ_RADIO_Handler+0x224>
    90d6:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    90da:	7845      	ldrb	r5, [r0, #1]
    90dc:	2d20      	cmp	r5, #32
    90de:	d1bf      	bne.n	9060 <MPSL_IRQ_RADIO_Handler+0x394>
    90e0:	b011      	add	sp, #68	; 0x44
    90e2:	2001      	movs	r0, #1
    90e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    90e8:	20001494 	.word	0x20001494
    90ec:	20001094 	.word	0x20001094
    90f0:	20001414 	.word	0x20001414
    90f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    90f8:	460f      	mov	r7, r1
    90fa:	4606      	mov	r6, r0
    90fc:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    9100:	494b      	ldr	r1, [pc, #300]	; (9230 <MPSL_IRQ_RADIO_Handler+0x564>)
    9102:	4699      	mov	r9, r3
    9104:	4408      	add	r0, r1
    9106:	4692      	mov	sl, r2
    9108:	f890 4020 	ldrb.w	r4, [r0, #32]
    910c:	2020      	movs	r0, #32
    910e:	7010      	strb	r0, [r2, #0]
    9110:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
    9114:	2c20      	cmp	r4, #32
    9116:	bf1c      	itt	ne
    9118:	4846      	ldrne	r0, [pc, #280]	; (9234 <MPSL_IRQ_RADIO_Handler+0x568>)
    911a:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    911e:	d038      	beq.n	9192 <MPSL_IRQ_RADIO_Handler+0x4c6>
    9120:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    9124:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    9128:	f100 0108 	add.w	r1, r0, #8
    912c:	68c0      	ldr	r0, [r0, #12]
    912e:	6835      	ldr	r5, [r6, #0]
    9130:	1a28      	subs	r0, r5, r0
    9132:	0200      	lsls	r0, r0, #8
    9134:	17c2      	asrs	r2, r0, #31
    9136:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    913a:	1200      	asrs	r0, r0, #8
    913c:	d429      	bmi.n	9192 <MPSL_IRQ_RADIO_Handler+0x4c6>
    913e:	89f0      	ldrh	r0, [r6, #14]
    9140:	b300      	cbz	r0, 9184 <MPSL_IRQ_RADIO_Handler+0x4b8>
    9142:	89c8      	ldrh	r0, [r1, #14]
    9144:	b9f0      	cbnz	r0, 9184 <MPSL_IRQ_RADIO_Handler+0x4b8>
    9146:	6808      	ldr	r0, [r1, #0]
    9148:	9000      	str	r0, [sp, #0]
    914a:	f002 ff65 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    914e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9152:	bf08      	it	eq
    9154:	200d      	moveq	r0, #13
    9156:	d00b      	beq.n	9170 <MPSL_IRQ_RADIO_Handler+0x4a4>
    9158:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    915c:	3856      	subs	r0, #86	; 0x56
    915e:	bf08      	it	eq
    9160:	201c      	moveq	r0, #28
    9162:	d005      	beq.n	9170 <MPSL_IRQ_RADIO_Handler+0x4a4>
    9164:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9168:	389f      	subs	r0, #159	; 0x9f
    916a:	bf14      	ite	ne
    916c:	2000      	movne	r0, #0
    916e:	2032      	moveq	r0, #50	; 0x32
    9170:	1c41      	adds	r1, r0, #1
    9172:	9800      	ldr	r0, [sp, #0]
    9174:	1a28      	subs	r0, r5, r0
    9176:	0200      	lsls	r0, r0, #8
    9178:	17c2      	asrs	r2, r0, #31
    917a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    917e:	1200      	asrs	r0, r0, #8
    9180:	4288      	cmp	r0, r1
    9182:	db06      	blt.n	9192 <MPSL_IRQ_RADIO_Handler+0x4c6>
    9184:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    9188:	f88a 4000 	strb.w	r4, [sl]
    918c:	7844      	ldrb	r4, [r0, #1]
    918e:	2c20      	cmp	r4, #32
    9190:	d1c6      	bne.n	9120 <MPSL_IRQ_RADIO_Handler+0x454>
    9192:	f89a 0000 	ldrb.w	r0, [sl]
    9196:	f889 0000 	strb.w	r0, [r9]
    919a:	2c20      	cmp	r4, #32
    919c:	bf1c      	itt	ne
    919e:	4825      	ldrne	r0, [pc, #148]	; (9234 <MPSL_IRQ_RADIO_Handler+0x568>)
    91a0:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
    91a4:	d040      	beq.n	9228 <MPSL_IRQ_RADIO_Handler+0x55c>
    91a6:	bf00      	nop
    91a8:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    91ac:	eb08 0780 	add.w	r7, r8, r0, lsl #2
    91b0:	6870      	ldr	r0, [r6, #4]
    91b2:	68bd      	ldr	r5, [r7, #8]
    91b4:	f107 0108 	add.w	r1, r7, #8
    91b8:	1a28      	subs	r0, r5, r0
    91ba:	0200      	lsls	r0, r0, #8
    91bc:	17c2      	asrs	r2, r0, #31
    91be:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    91c2:	1200      	asrs	r0, r0, #8
    91c4:	d422      	bmi.n	920c <MPSL_IRQ_RADIO_Handler+0x540>
    91c6:	89c8      	ldrh	r0, [r1, #14]
    91c8:	b370      	cbz	r0, 9228 <MPSL_IRQ_RADIO_Handler+0x55c>
    91ca:	89f0      	ldrh	r0, [r6, #14]
    91cc:	bb60      	cbnz	r0, 9228 <MPSL_IRQ_RADIO_Handler+0x55c>
    91ce:	f8d6 b000 	ldr.w	fp, [r6]
    91d2:	f002 ff21 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    91d6:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    91da:	bf08      	it	eq
    91dc:	200d      	moveq	r0, #13
    91de:	d00b      	beq.n	91f8 <MPSL_IRQ_RADIO_Handler+0x52c>
    91e0:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    91e4:	3856      	subs	r0, #86	; 0x56
    91e6:	bf08      	it	eq
    91e8:	201c      	moveq	r0, #28
    91ea:	d005      	beq.n	91f8 <MPSL_IRQ_RADIO_Handler+0x52c>
    91ec:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    91f0:	389f      	subs	r0, #159	; 0x9f
    91f2:	bf14      	ite	ne
    91f4:	2000      	movne	r0, #0
    91f6:	2032      	moveq	r0, #50	; 0x32
    91f8:	1c41      	adds	r1, r0, #1
    91fa:	eba5 000b 	sub.w	r0, r5, fp
    91fe:	0200      	lsls	r0, r0, #8
    9200:	17c2      	asrs	r2, r0, #31
    9202:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    9206:	1200      	asrs	r0, r0, #8
    9208:	4288      	cmp	r0, r1
    920a:	da0d      	bge.n	9228 <MPSL_IRQ_RADIO_Handler+0x55c>
    920c:	f889 4000 	strb.w	r4, [r9]
    9210:	7e38      	ldrb	r0, [r7, #24]
    9212:	7c31      	ldrb	r1, [r6, #16]
    9214:	4288      	cmp	r0, r1
    9216:	d802      	bhi.n	921e <MPSL_IRQ_RADIO_Handler+0x552>
    9218:	2000      	movs	r0, #0
    921a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    921e:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
    9222:	7844      	ldrb	r4, [r0, #1]
    9224:	2c20      	cmp	r4, #32
    9226:	d1bf      	bne.n	91a8 <MPSL_IRQ_RADIO_Handler+0x4dc>
    9228:	2001      	movs	r0, #1
    922a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    922e:	0000      	.short	0x0000
    9230:	20001494 	.word	0x20001494
    9234:	20001414 	.word	0x20001414
    9238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    923c:	b098      	sub	sp, #96	; 0x60
    923e:	4615      	mov	r5, r2
    9240:	f002 fa7a 	bl	b738 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    9244:	4604      	mov	r4, r0
    9246:	f002 fd0f 	bl	bc68 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    924a:	4606      	mov	r6, r0
    924c:	9819      	ldr	r0, [sp, #100]	; 0x64
    924e:	2801      	cmp	r0, #1
    9250:	bf18      	it	ne
    9252:	2802      	cmpne	r0, #2
    9254:	d005      	beq.n	9262 <MPSL_IRQ_RADIO_Handler+0x596>
    9256:	f640 1192 	movw	r1, #2450	; 0x992
    925a:	f04f 0070 	mov.w	r0, #112	; 0x70
    925e:	f003 f87b 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9262:	49fa      	ldr	r1, [pc, #1000]	; (964c <MPSL_IRQ_RADIO_Handler+0x980>)
    9264:	2001      	movs	r0, #1
    9266:	6008      	str	r0, [r1, #0]
    9268:	49f9      	ldr	r1, [pc, #996]	; (9650 <MPSL_IRQ_RADIO_Handler+0x984>)
    926a:	6889      	ldr	r1, [r1, #8]
    926c:	6008      	str	r0, [r1, #0]
    926e:	2000      	movs	r0, #0
    9270:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    9274:	900a      	str	r0, [sp, #40]	; 0x28
    9276:	1e40      	subs	r0, r0, #1
    9278:	900b      	str	r0, [sp, #44]	; 0x2c
    927a:	49f6      	ldr	r1, [pc, #984]	; (9654 <MPSL_IRQ_RADIO_Handler+0x988>)
    927c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    9280:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    9284:	e9d1 0302 	ldrd	r0, r3, [r1, #8]
    9288:	e9d1 c204 	ldrd	ip, r2, [r1, #16]
    928c:	e9cd 030c 	strd	r0, r3, [sp, #48]	; 0x30
    9290:	e9cd c20e 	strd	ip, r2, [sp, #56]	; 0x38
    9294:	6989      	ldr	r1, [r1, #24]
    9296:	9110      	str	r1, [sp, #64]	; 0x40
    9298:	f007 f856 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    929c:	4602      	mov	r2, r0
    929e:	f8bd 803e 	ldrh.w	r8, [sp, #62]	; 0x3e
    92a2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    92a6:	4bec      	ldr	r3, [pc, #944]	; (9658 <MPSL_IRQ_RADIO_Handler+0x98c>)
    92a8:	4440      	add	r0, r8
    92aa:	1c41      	adds	r1, r0, #1
    92ac:	1850      	adds	r0, r2, r1
    92ae:	429a      	cmp	r2, r3
    92b0:	d854      	bhi.n	935c <MPSL_IRQ_RADIO_Handler+0x690>
    92b2:	4dea      	ldr	r5, [pc, #936]	; (965c <MPSL_IRQ_RADIO_Handler+0x990>)
    92b4:	42a9      	cmp	r1, r5
    92b6:	dc58      	bgt.n	936a <MPSL_IRQ_RADIO_Handler+0x69e>
    92b8:	426a      	negs	r2, r5
    92ba:	4291      	cmp	r1, r2
    92bc:	db5d      	blt.n	937a <MPSL_IRQ_RADIO_Handler+0x6ae>
    92be:	1c59      	adds	r1, r3, #1
    92c0:	4281      	cmp	r1, r0
    92c2:	bfdc      	itt	le
    92c4:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    92c8:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    92cc:	dd05      	ble.n	92da <MPSL_IRQ_RADIO_Handler+0x60e>
    92ce:	2800      	cmp	r0, #0
    92d0:	bfbc      	itt	lt
    92d2:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    92d6:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    92da:	9014      	str	r0, [sp, #80]	; 0x50
    92dc:	48e0      	ldr	r0, [pc, #896]	; (9660 <MPSL_IRQ_RADIO_Handler+0x994>)
    92de:	f1b8 0f00 	cmp.w	r8, #0
    92e2:	8b80      	ldrh	r0, [r0, #28]
    92e4:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
    92e8:	bf14      	ite	ne
    92ea:	f04f 0a01 	movne.w	sl, #1
    92ee:	f04f 0a00 	moveq.w	sl, #0
    92f2:	f002 ffb9 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    92f6:	9016      	str	r0, [sp, #88]	; 0x58
    92f8:	f1ba 0f00 	cmp.w	sl, #0
    92fc:	d008      	beq.n	9310 <MPSL_IRQ_RADIO_Handler+0x644>
    92fe:	48d8      	ldr	r0, [pc, #864]	; (9660 <MPSL_IRQ_RADIO_Handler+0x994>)
    9300:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    9302:	f1b0 3fff 	cmp.w	r0, #4294967295
    9306:	bf02      	ittt	eq
    9308:	9816      	ldreq	r0, [sp, #88]	; 0x58
    930a:	2800      	cmpeq	r0, #0
    930c:	2701      	moveq	r7, #1
    930e:	d001      	beq.n	9314 <MPSL_IRQ_RADIO_Handler+0x648>
    9310:	f04f 0700 	mov.w	r7, #0
    9314:	f002 fe80 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9318:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    931c:	bf08      	it	eq
    931e:	200d      	moveq	r0, #13
    9320:	d00b      	beq.n	933a <MPSL_IRQ_RADIO_Handler+0x66e>
    9322:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9326:	3856      	subs	r0, #86	; 0x56
    9328:	bf08      	it	eq
    932a:	201c      	moveq	r0, #28
    932c:	d005      	beq.n	933a <MPSL_IRQ_RADIO_Handler+0x66e>
    932e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9332:	389f      	subs	r0, #159	; 0x9f
    9334:	bf14      	ite	ne
    9336:	2000      	movne	r0, #0
    9338:	2032      	moveq	r0, #50	; 0x32
    933a:	f04f 0900 	mov.w	r9, #0
    933e:	46cb      	mov	fp, r9
    9340:	9013      	str	r0, [sp, #76]	; 0x4c
    9342:	4546      	cmp	r6, r8
    9344:	d936      	bls.n	93b4 <MPSL_IRQ_RADIO_Handler+0x6e8>
    9346:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9348:	f8df 930c 	ldr.w	r9, [pc, #780]	; 9658 <MPSL_IRQ_RADIO_Handler+0x98c>
    934c:	ea6f 0c06 	mvn.w	ip, r6
    9350:	4669      	mov	r1, sp
    9352:	aa17      	add	r2, sp, #92	; 0x5c
    9354:	eb03 000c 	add.w	r0, r3, ip
    9358:	454b      	cmp	r3, r9
    935a:	d904      	bls.n	9366 <MPSL_IRQ_RADIO_Handler+0x69a>
    935c:	f240 519e 	movw	r1, #1438	; 0x59e
    9360:	2070      	movs	r0, #112	; 0x70
    9362:	f002 fff9 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9366:	45ac      	cmp	ip, r5
    9368:	dd04      	ble.n	9374 <MPSL_IRQ_RADIO_Handler+0x6a8>
    936a:	f240 519f 	movw	r1, #1439	; 0x59f
    936e:	2070      	movs	r0, #112	; 0x70
    9370:	f002 fff2 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9374:	4bbb      	ldr	r3, [pc, #748]	; (9664 <MPSL_IRQ_RADIO_Handler+0x998>)
    9376:	459c      	cmp	ip, r3
    9378:	da04      	bge.n	9384 <MPSL_IRQ_RADIO_Handler+0x6b8>
    937a:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    937e:	2070      	movs	r0, #112	; 0x70
    9380:	f002 ffea 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9384:	4bb8      	ldr	r3, [pc, #736]	; (9668 <MPSL_IRQ_RADIO_Handler+0x99c>)
    9386:	4283      	cmp	r3, r0
    9388:	bfdc      	itt	le
    938a:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    938e:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    9392:	dd05      	ble.n	93a0 <MPSL_IRQ_RADIO_Handler+0x6d4>
    9394:	2800      	cmp	r0, #0
    9396:	bfbc      	itt	lt
    9398:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    939c:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    93a0:	f001 ff24 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    93a4:	9800      	ldr	r0, [sp, #0]
    93a6:	990c      	ldr	r1, [sp, #48]	; 0x30
    93a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    93ac:	9000      	str	r0, [sp, #0]
    93ae:	1a08      	subs	r0, r1, r0
    93b0:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    93b4:	2f00      	cmp	r7, #0
    93b6:	bf18      	it	ne
    93b8:	f8dd b04c 	ldrne.w	fp, [sp, #76]	; 0x4c
    93bc:	d105      	bne.n	93ca <MPSL_IRQ_RADIO_Handler+0x6fe>
    93be:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    93c2:	2800      	cmp	r0, #0
    93c4:	bf18      	it	ne
    93c6:	f04f 0b02 	movne.w	fp, #2
    93ca:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    93ce:	d008      	beq.n	93e2 <MPSL_IRQ_RADIO_Handler+0x716>
    93d0:	980c      	ldr	r0, [sp, #48]	; 0x30
    93d2:	1b00      	subs	r0, r0, r4
    93d4:	0200      	lsls	r0, r0, #8
    93d6:	17c1      	asrs	r1, r0, #31
    93d8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    93dc:	1200      	asrs	r0, r0, #8
    93de:	2801      	cmp	r0, #1
    93e0:	da02      	bge.n	93e8 <MPSL_IRQ_RADIO_Handler+0x71c>
    93e2:	2003      	movs	r0, #3
    93e4:	9d18      	ldr	r5, [sp, #96]	; 0x60
    93e6:	e00d      	b.n	9404 <MPSL_IRQ_RADIO_Handler+0x738>
    93e8:	b157      	cbz	r7, 9400 <MPSL_IRQ_RADIO_Handler+0x734>
    93ea:	489d      	ldr	r0, [pc, #628]	; (9660 <MPSL_IRQ_RADIO_Handler+0x994>)
    93ec:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    93f0:	b130      	cbz	r0, 9400 <MPSL_IRQ_RADIO_Handler+0x734>
    93f2:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    93f6:	f110 0b00 	adds.w	fp, r0, #0
    93fa:	bf18      	it	ne
    93fc:	f04f 0b02 	movne.w	fp, #2
    9400:	4625      	mov	r5, r4
    9402:	2000      	movs	r0, #0
    9404:	4483      	add	fp, r0
    9406:	980c      	ldr	r0, [sp, #48]	; 0x30
    9408:	eba0 0009 	sub.w	r0, r0, r9
    940c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9410:	1e48      	subs	r0, r1, #1
    9412:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9416:	1b42      	subs	r2, r0, r5
    9418:	0212      	lsls	r2, r2, #8
    941a:	17d3      	asrs	r3, r2, #31
    941c:	eb02 6213 	add.w	r2, r2, r3, lsr #24
    9420:	1212      	asrs	r2, r2, #8
    9422:	455a      	cmp	r2, fp
    9424:	db04      	blt.n	9430 <MPSL_IRQ_RADIO_Handler+0x764>
    9426:	f1b9 0f00 	cmp.w	r9, #0
    942a:	bf18      	it	ne
    942c:	910c      	strne	r1, [sp, #48]	; 0x30
    942e:	e02d      	b.n	948c <MPSL_IRQ_RADIO_Handler+0x7c0>
    9430:	f1b9 0f00 	cmp.w	r9, #0
    9434:	d005      	beq.n	9442 <MPSL_IRQ_RADIO_Handler+0x776>
    9436:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
    943a:	b920      	cbnz	r0, 9446 <MPSL_IRQ_RADIO_Handler+0x77a>
    943c:	f002 fc0a 	bl	bc54 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    9440:	b108      	cbz	r0, 9446 <MPSL_IRQ_RADIO_Handler+0x77a>
    9442:	b9af      	cbnz	r7, 9470 <MPSL_IRQ_RADIO_Handler+0x7a4>
    9444:	e00c      	b.n	9460 <MPSL_IRQ_RADIO_Handler+0x794>
    9446:	b92f      	cbnz	r7, 9454 <MPSL_IRQ_RADIO_Handler+0x788>
    9448:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    944c:	2800      	cmp	r0, #0
    944e:	bf18      	it	ne
    9450:	f1ab 0b02 	subne.w	fp, fp, #2
    9454:	f04f 0900 	mov.w	r9, #0
    9458:	f88d 9044 	strb.w	r9, [sp, #68]	; 0x44
    945c:	464e      	mov	r6, r9
    945e:	e007      	b.n	9470 <MPSL_IRQ_RADIO_Handler+0x7a4>
    9460:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    9464:	b120      	cbz	r0, 9470 <MPSL_IRQ_RADIO_Handler+0x7a4>
    9466:	2000      	movs	r0, #0
    9468:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    946c:	f1ab 0b02 	sub.w	fp, fp, #2
    9470:	980c      	ldr	r0, [sp, #48]	; 0x30
    9472:	eba0 0109 	sub.w	r1, r0, r9
    9476:	1e48      	subs	r0, r1, #1
    9478:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    947c:	1b42      	subs	r2, r0, r5
    947e:	0212      	lsls	r2, r2, #8
    9480:	17d3      	asrs	r3, r2, #31
    9482:	eb02 6213 	add.w	r2, r2, r3, lsr #24
    9486:	1212      	asrs	r2, r2, #8
    9488:	455a      	cmp	r2, fp
    948a:	db7d      	blt.n	9588 <MPSL_IRQ_RADIO_Handler+0x8bc>
    948c:	4a74      	ldr	r2, [pc, #464]	; (9660 <MPSL_IRQ_RADIO_Handler+0x994>)
    948e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    9490:	1a89      	subs	r1, r1, r2
    9492:	0209      	lsls	r1, r1, #8
    9494:	17cb      	asrs	r3, r1, #31
    9496:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    949a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    949c:	1209      	asrs	r1, r1, #8
    949e:	b93b      	cbnz	r3, 94b0 <MPSL_IRQ_RADIO_Handler+0x7e4>
    94a0:	f1b2 3fff 	cmp.w	r2, #4294967295
    94a4:	bf1c      	itt	ne
    94a6:	9a13      	ldrne	r2, [sp, #76]	; 0x4c
    94a8:	4291      	cmpne	r1, r2
    94aa:	bfb8      	it	lt
    94ac:	2100      	movlt	r1, #0
    94ae:	db00      	blt.n	94b2 <MPSL_IRQ_RADIO_Handler+0x7e6>
    94b0:	2101      	movs	r1, #1
    94b2:	ea3a 0101 	bics.w	r1, sl, r1
    94b6:	d167      	bne.n	9588 <MPSL_IRQ_RADIO_Handler+0x8bc>
    94b8:	9919      	ldr	r1, [sp, #100]	; 0x64
    94ba:	4605      	mov	r5, r0
    94bc:	f04f 0900 	mov.w	r9, #0
    94c0:	9105      	str	r1, [sp, #20]
    94c2:	f001 fffd 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    94c6:	1a28      	subs	r0, r5, r0
    94c8:	0200      	lsls	r0, r0, #8
    94ca:	17c1      	asrs	r1, r0, #31
    94cc:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    94d0:	ea4f 2b20 	mov.w	fp, r0, asr #8
    94d4:	f002 fda0 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    94d8:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    94dc:	bf08      	it	eq
    94de:	200d      	moveq	r0, #13
    94e0:	d00b      	beq.n	94fa <MPSL_IRQ_RADIO_Handler+0x82e>
    94e2:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    94e6:	3856      	subs	r0, #86	; 0x56
    94e8:	bf08      	it	eq
    94ea:	201c      	moveq	r0, #28
    94ec:	d005      	beq.n	94fa <MPSL_IRQ_RADIO_Handler+0x82e>
    94ee:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    94f2:	389f      	subs	r0, #159	; 0x9f
    94f4:	bf14      	ite	ne
    94f6:	2000      	movne	r0, #0
    94f8:	2032      	moveq	r0, #50	; 0x32
    94fa:	300b      	adds	r0, #11
    94fc:	4558      	cmp	r0, fp
    94fe:	dd1f      	ble.n	9540 <MPSL_IRQ_RADIO_Handler+0x874>
    9500:	9805      	ldr	r0, [sp, #20]
    9502:	2801      	cmp	r0, #1
    9504:	d001      	beq.n	950a <MPSL_IRQ_RADIO_Handler+0x83e>
    9506:	b147      	cbz	r7, 951a <MPSL_IRQ_RADIO_Handler+0x84e>
    9508:	e012      	b.n	9530 <MPSL_IRQ_RADIO_Handler+0x864>
    950a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    950e:	d11c      	bne.n	954a <MPSL_IRQ_RADIO_Handler+0x87e>
    9510:	f640 1113 	movw	r1, #2323	; 0x913
    9514:	2070      	movs	r0, #112	; 0x70
    9516:	f002 ff1f 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    951a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    951e:	d007      	beq.n	9530 <MPSL_IRQ_RADIO_Handler+0x864>
    9520:	1b60      	subs	r0, r4, r5
    9522:	0200      	lsls	r0, r0, #8
    9524:	17c1      	asrs	r1, r0, #31
    9526:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    952a:	1200      	asrs	r0, r0, #8
    952c:	2804      	cmp	r0, #4
    952e:	dd04      	ble.n	953a <MPSL_IRQ_RADIO_Handler+0x86e>
    9530:	462c      	mov	r4, r5
    9532:	4620      	mov	r0, r4
    9534:	f001 ffea 	bl	b50c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    9538:	e007      	b.n	954a <MPSL_IRQ_RADIO_Handler+0x87e>
    953a:	2800      	cmp	r0, #0
    953c:	dc63      	bgt.n	9606 <MPSL_IRQ_RADIO_Handler+0x93a>
    953e:	e004      	b.n	954a <MPSL_IRQ_RADIO_Handler+0x87e>
    9540:	462c      	mov	r4, r5
    9542:	4620      	mov	r0, r4
    9544:	f001 ffe2 	bl	b50c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    9548:	46d1      	mov	r9, sl
    954a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    954e:	d055      	beq.n	95fc <MPSL_IRQ_RADIO_Handler+0x930>
    9550:	980c      	ldr	r0, [sp, #48]	; 0x30
    9552:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9554:	1b00      	subs	r0, r0, r4
    9556:	1b12      	subs	r2, r2, r4
    9558:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    955c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9560:	2801      	cmp	r0, #1
    9562:	d350      	bcc.n	9606 <MPSL_IRQ_RADIO_Handler+0x93a>
    9564:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    9568:	bf98      	it	ls
    956a:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    956e:	d84a      	bhi.n	9606 <MPSL_IRQ_RADIO_Handler+0x93a>
    9570:	4620      	mov	r0, r4
    9572:	f006 fee9 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9576:	9914      	ldr	r1, [sp, #80]	; 0x50
    9578:	4a38      	ldr	r2, [pc, #224]	; (965c <MPSL_IRQ_RADIO_Handler+0x990>)
    957a:	1a0d      	subs	r5, r1, r0
    957c:	f04f 0b00 	mov.w	fp, #0
    9580:	1aaa      	subs	r2, r5, r2
    9582:	f17b 0200 	sbcs.w	r2, fp, #0
    9586:	e000      	b.n	958a <MPSL_IRQ_RADIO_Handler+0x8be>
    9588:	e03d      	b.n	9606 <MPSL_IRQ_RADIO_Handler+0x93a>
    958a:	d316      	bcc.n	95ba <MPSL_IRQ_RADIO_Handler+0x8ee>
    958c:	4a33      	ldr	r2, [pc, #204]	; (965c <MPSL_IRQ_RADIO_Handler+0x990>)
    958e:	1a43      	subs	r3, r0, r1
    9590:	1a9a      	subs	r2, r3, r2
    9592:	f17b 0200 	sbcs.w	r2, fp, #0
    9596:	d310      	bcc.n	95ba <MPSL_IRQ_RADIO_Handler+0x8ee>
    9598:	4a2f      	ldr	r2, [pc, #188]	; (9658 <MPSL_IRQ_RADIO_Handler+0x98c>)
    959a:	42aa      	cmp	r2, r5
    959c:	bf3e      	ittt	cc
    959e:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    95a2:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    95a6:	1845      	addcc	r5, r0, r1
    95a8:	d307      	bcc.n	95ba <MPSL_IRQ_RADIO_Handler+0x8ee>
    95aa:	429a      	cmp	r2, r3
    95ac:	d22f      	bcs.n	960e <MPSL_IRQ_RADIO_Handler+0x942>
    95ae:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    95b2:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    95b6:	4408      	add	r0, r1
    95b8:	4245      	negs	r5, r0
    95ba:	4f29      	ldr	r7, [pc, #164]	; (9660 <MPSL_IRQ_RADIO_Handler+0x994>)
    95bc:	7fb8      	ldrb	r0, [r7, #30]
    95be:	b358      	cbz	r0, 9618 <MPSL_IRQ_RADIO_Handler+0x94c>
    95c0:	9819      	ldr	r0, [sp, #100]	; 0x64
    95c2:	2801      	cmp	r0, #1
    95c4:	d005      	beq.n	95d2 <MPSL_IRQ_RADIO_Handler+0x906>
    95c6:	2002      	movs	r0, #2
    95c8:	f002 f9f0 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    95cc:	2001      	movs	r0, #1
    95ce:	f002 f9ed 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    95d2:	45b0      	cmp	r8, r6
    95d4:	d22c      	bcs.n	9630 <MPSL_IRQ_RADIO_Handler+0x964>
    95d6:	eba5 0106 	sub.w	r1, r5, r6
    95da:	f04f 0002 	mov.w	r0, #2
    95de:	f002 f92f 	bl	b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    95e2:	b390      	cbz	r0, 964a <MPSL_IRQ_RADIO_Handler+0x97e>
    95e4:	f1b8 0f00 	cmp.w	r8, #0
    95e8:	bf1c      	itt	ne
    95ea:	eba5 0108 	subne.w	r1, r5, r8
    95ee:	2001      	movne	r0, #1
    95f0:	d044      	beq.n	967c <MPSL_IRQ_RADIO_Handler+0x9b0>
    95f2:	bf00      	nop
    95f4:	f002 f924 	bl	b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    95f8:	b338      	cbz	r0, 964a <MPSL_IRQ_RADIO_Handler+0x97e>
    95fa:	e03f      	b.n	967c <MPSL_IRQ_RADIO_Handler+0x9b0>
    95fc:	f640 2131 	movw	r1, #2609	; 0xa31
    9600:	2070      	movs	r0, #112	; 0x70
    9602:	f002 fea9 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9606:	b01b      	add	sp, #108	; 0x6c
    9608:	2000      	movs	r0, #0
    960a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    960e:	f640 3105 	movw	r1, #2821	; 0xb05
    9612:	2070      	movs	r0, #112	; 0x70
    9614:	f002 fea0 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9618:	45b0      	cmp	r8, r6
    961a:	bf34      	ite	cc
    961c:	4630      	movcc	r0, r6
    961e:	4640      	movcs	r0, r8
    9620:	301e      	adds	r0, #30
    9622:	42a8      	cmp	r0, r5
    9624:	dbcc      	blt.n	95c0 <MPSL_IRQ_RADIO_Handler+0x8f4>
    9626:	f640 2145 	movw	r1, #2629	; 0xa45
    962a:	2070      	movs	r0, #112	; 0x70
    962c:	f002 fe94 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9630:	d91c      	bls.n	966c <MPSL_IRQ_RADIO_Handler+0x9a0>
    9632:	eba5 0108 	sub.w	r1, r5, r8
    9636:	2001      	movs	r0, #1
    9638:	f002 f902 	bl	b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    963c:	b128      	cbz	r0, 964a <MPSL_IRQ_RADIO_Handler+0x97e>
    963e:	2e00      	cmp	r6, #0
    9640:	bf1c      	itt	ne
    9642:	1ba9      	subne	r1, r5, r6
    9644:	2002      	movne	r0, #2
    9646:	d019      	beq.n	967c <MPSL_IRQ_RADIO_Handler+0x9b0>
    9648:	e7d4      	b.n	95f4 <MPSL_IRQ_RADIO_Handler+0x928>
    964a:	e042      	b.n	96d2 <MPSL_IRQ_RADIO_Handler+0xa06>
    964c:	40000508 	.word	0x40000508
    9650:	200002d0 	.word	0x200002d0
    9654:	20001094 	.word	0x20001094
    9658:	1e847fff 	.word	0x1e847fff
    965c:	0f424000 	.word	0x0f424000
    9660:	20001494 	.word	0x20001494
    9664:	f0bdc000 	.word	0xf0bdc000
    9668:	1e848000 	.word	0x1e848000
    966c:	ea56 0008 	orrs.w	r0, r6, r8
    9670:	d004      	beq.n	967c <MPSL_IRQ_RADIO_Handler+0x9b0>
    9672:	f640 1176 	movw	r1, #2422	; 0x976
    9676:	2070      	movs	r0, #112	; 0x70
    9678:	f002 fe6e 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    967c:	4629      	mov	r1, r5
    967e:	2000      	movs	r0, #0
    9680:	f002 f8de 	bl	b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9684:	b328      	cbz	r0, 96d2 <MPSL_IRQ_RADIO_Handler+0xa06>
    9686:	2601      	movs	r6, #1
    9688:	f1ba 0f00 	cmp.w	sl, #0
    968c:	bf04      	itt	eq
    968e:	f897 0030 	ldrbeq.w	r0, [r7, #48]	; 0x30
    9692:	2800      	cmpeq	r0, #0
    9694:	d002      	beq.n	969c <MPSL_IRQ_RADIO_Handler+0x9d0>
    9696:	f1b9 0f00 	cmp.w	r9, #0
    969a:	d024      	beq.n	96e6 <MPSL_IRQ_RADIO_Handler+0xa1a>
    969c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    969e:	f1b0 3fff 	cmp.w	r0, #4294967295
    96a2:	d004      	beq.n	96ae <MPSL_IRQ_RADIO_Handler+0x9e2>
    96a4:	f002 fcbe 	bl	c024 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    96a8:	f04f 30ff 	mov.w	r0, #4294967295
    96ac:	62f8      	str	r0, [r7, #44]	; 0x2c
    96ae:	f1b9 0f00 	cmp.w	r9, #0
    96b2:	d01c      	beq.n	96ee <MPSL_IRQ_RADIO_Handler+0xa22>
    96b4:	9813      	ldr	r0, [sp, #76]	; 0x4c
    96b6:	1a20      	subs	r0, r4, r0
    96b8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    96bc:	2005      	movs	r0, #5
    96be:	f002 f8bf 	bl	b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    96c2:	b360      	cbz	r0, 971e <MPSL_IRQ_RADIO_Handler+0xa52>
    96c4:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
    96c8:	2800      	cmp	r0, #0
    96ca:	bf08      	it	eq
    96cc:	f887 6030 	strbeq.w	r6, [r7, #48]	; 0x30
    96d0:	e015      	b.n	96fe <MPSL_IRQ_RADIO_Handler+0xa32>
    96d2:	2002      	movs	r0, #2
    96d4:	f002 f96a 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    96d8:	2001      	movs	r0, #1
    96da:	f002 f967 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    96de:	b01b      	add	sp, #108	; 0x6c
    96e0:	2000      	movs	r0, #0
    96e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    96e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    96e8:	f1b0 3fff 	cmp.w	r0, #4294967295
    96ec:	d012      	beq.n	9714 <MPSL_IRQ_RADIO_Handler+0xa48>
    96ee:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
    96f2:	b120      	cbz	r0, 96fe <MPSL_IRQ_RADIO_Handler+0xa32>
    96f4:	2005      	movs	r0, #5
    96f6:	f002 f959 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    96fa:	f887 b030 	strb.w	fp, [r7, #48]	; 0x30
    96fe:	eba5 0008 	sub.w	r0, r5, r8
    9702:	f1a0 0119 	sub.w	r1, r0, #25
    9706:	2900      	cmp	r1, #0
    9708:	dc0e      	bgt.n	9728 <MPSL_IRQ_RADIO_Handler+0xa5c>
    970a:	f640 216e 	movw	r1, #2670	; 0xa6e
    970e:	2070      	movs	r0, #112	; 0x70
    9710:	f002 fe22 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9714:	f002 fca2 	bl	c05c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    9718:	f001 fed2 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    971c:	e7c6      	b.n	96ac <MPSL_IRQ_RADIO_Handler+0x9e0>
    971e:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    9722:	2070      	movs	r0, #112	; 0x70
    9724:	f002 fe18 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9728:	2003      	movs	r0, #3
    972a:	f002 f889 	bl	b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    972e:	b1c0      	cbz	r0, 9762 <MPSL_IRQ_RADIO_Handler+0xa96>
    9730:	480e      	ldr	r0, [pc, #56]	; (976c <MPSL_IRQ_RADIO_Handler+0xaa0>)
    9732:	6880      	ldr	r0, [r0, #8]
    9734:	f8c0 b000 	str.w	fp, [r0]
    9738:	480d      	ldr	r0, [pc, #52]	; (9770 <MPSL_IRQ_RADIO_Handler+0xaa4>)
    973a:	f8c0 b000 	str.w	fp, [r0]
    973e:	ac0a      	add	r4, sp, #40	; 0x28
    9740:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    9744:	6038      	str	r0, [r7, #0]
    9746:	6079      	str	r1, [r7, #4]
    9748:	60ba      	str	r2, [r7, #8]
    974a:	60fb      	str	r3, [r7, #12]
    974c:	ac0e      	add	r4, sp, #56	; 0x38
    974e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    9752:	6138      	str	r0, [r7, #16]
    9754:	6179      	str	r1, [r7, #20]
    9756:	61ba      	str	r2, [r7, #24]
    9758:	61fb      	str	r3, [r7, #28]
    975a:	b01b      	add	sp, #108	; 0x6c
    975c:	2001      	movs	r0, #1
    975e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9762:	f640 2176 	movw	r1, #2678	; 0xa76
    9766:	2070      	movs	r0, #112	; 0x70
    9768:	f002 fdf6 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    976c:	200002d0 	.word	0x200002d0
    9770:	40000508 	.word	0x40000508
    9774:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9778:	4614      	mov	r4, r2
    977a:	460d      	mov	r5, r1
    977c:	f04f 0a00 	mov.w	sl, #0
    9780:	890a      	ldrh	r2, [r1, #8]
    9782:	4651      	mov	r1, sl
    9784:	f362 411f 	bfi	r1, r2, #16, #16
    9788:	7aaa      	ldrb	r2, [r5, #10]
    978a:	46d1      	mov	r9, sl
    978c:	f362 0907 	bfi	r9, r2, #0, #8
    9790:	7aea      	ldrb	r2, [r5, #11]
    9792:	4606      	mov	r6, r0
    9794:	f362 290f 	bfi	r9, r2, #8, #8
    9798:	782a      	ldrb	r2, [r5, #0]
    979a:	b083      	sub	sp, #12
    979c:	6840      	ldr	r0, [r0, #4]
    979e:	f8c4 a000 	str.w	sl, [r4]
    97a2:	f362 4917 	bfi	r9, r2, #16, #8
    97a6:	f8c4 a004 	str.w	sl, [r4, #4]
    97aa:	f8c4 9010 	str.w	r9, [r4, #16]
    97ae:	e9c4 0102 	strd	r0, r1, [r4, #8]
    97b2:	4f9d      	ldr	r7, [pc, #628]	; (9a28 <MPSL_IRQ_RADIO_Handler+0xd5c>)
    97b4:	6870      	ldr	r0, [r6, #4]
    97b6:	fba0 8907 	umull	r8, r9, r0, r7
    97ba:	6830      	ldr	r0, [r6, #0]
    97bc:	f006 fdc4 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    97c0:	eb10 0108 	adds.w	r1, r0, r8
    97c4:	eb4a 0209 	adc.w	r2, sl, r9
    97c8:	7828      	ldrb	r0, [r5, #0]
    97ca:	ea4f 0967 	mov.w	r9, r7, asr #1
    97ce:	f1c9 0b00 	rsb	fp, r9, #0
    97d2:	b170      	cbz	r0, 97f2 <MPSL_IRQ_RADIO_Handler+0xb26>
    97d4:	89e0      	ldrh	r0, [r4, #14]
    97d6:	f894 8011 	ldrb.w	r8, [r4, #17]
    97da:	43c0      	mvns	r0, r0
    97dc:	f8d5 a004 	ldr.w	sl, [r5, #4]
    97e0:	f104 020c 	add.w	r2, r4, #12
    97e4:	4548      	cmp	r0, r9
    97e6:	dd7c      	ble.n	98e2 <MPSL_IRQ_RADIO_Handler+0xc16>
    97e8:	f240 519f 	movw	r1, #1439	; 0x59f
    97ec:	2070      	movs	r0, #112	; 0x70
    97ee:	f002 fdb3 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    97f2:	f8df c238 	ldr.w	ip, [pc, #568]	; 9a2c <MPSL_IRQ_RADIO_Handler+0xd60>
    97f6:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
    97fa:	eb11 0a0c 	adds.w	sl, r1, ip
    97fe:	f142 0c00 	adc.w	ip, r2, #0
    9802:	ebb0 0a0a 	subs.w	sl, r0, sl
    9806:	eb73 0c0c 	sbcs.w	ip, r3, ip
    980a:	d272      	bcs.n	98f2 <MPSL_IRQ_RADIO_Handler+0xc26>
    980c:	1a41      	subs	r1, r0, r1
    980e:	eb73 0102 	sbcs.w	r1, r3, r2
    9812:	d36e      	bcc.n	98f2 <MPSL_IRQ_RADIO_Handler+0xc26>
    9814:	ebb0 0608 	subs.w	r6, r0, r8
    9818:	42b7      	cmp	r7, r6
    981a:	d82b      	bhi.n	9874 <MPSL_IRQ_RADIO_Handler+0xba8>
    981c:	89e0      	ldrh	r0, [r4, #14]
    981e:	f1a6 58f4 	sub.w	r8, r6, #511705088	; 0x1e800000
    9822:	f5a8 2890 	sub.w	r8, r8, #294912	; 0x48000
    9826:	43c1      	mvns	r1, r0
    9828:	4a81      	ldr	r2, [pc, #516]	; (9a30 <MPSL_IRQ_RADIO_Handler+0xd64>)
    982a:	eb08 0001 	add.w	r0, r8, r1
    982e:	4542      	cmp	r2, r8
    9830:	d32b      	bcc.n	988a <MPSL_IRQ_RADIO_Handler+0xbbe>
    9832:	4549      	cmp	r1, r9
    9834:	dcd8      	bgt.n	97e8 <MPSL_IRQ_RADIO_Handler+0xb1c>
    9836:	4559      	cmp	r1, fp
    9838:	db66      	blt.n	9908 <MPSL_IRQ_RADIO_Handler+0xc3c>
    983a:	4287      	cmp	r7, r0
    983c:	bfdc      	itt	le
    983e:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    9842:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    9846:	dd05      	ble.n	9854 <MPSL_IRQ_RADIO_Handler+0xb88>
    9848:	2800      	cmp	r0, #0
    984a:	bfbc      	itt	lt
    984c:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    9850:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    9854:	466a      	mov	r2, sp
    9856:	a901      	add	r1, sp, #4
    9858:	f001 fcc8 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    985c:	89e0      	ldrh	r0, [r4, #14]
    985e:	f89d 1000 	ldrb.w	r1, [sp]
    9862:	1a30      	subs	r0, r6, r0
    9864:	1a40      	subs	r0, r0, r1
    9866:	1e40      	subs	r0, r0, #1
    9868:	42b8      	cmp	r0, r7
    986a:	d302      	bcc.n	9872 <MPSL_IRQ_RADIO_Handler+0xba6>
    986c:	68a0      	ldr	r0, [r4, #8]
    986e:	1c40      	adds	r0, r0, #1
    9870:	60a0      	str	r0, [r4, #8]
    9872:	4646      	mov	r6, r8
    9874:	89e0      	ldrh	r0, [r4, #14]
    9876:	4b6e      	ldr	r3, [pc, #440]	; (9a30 <MPSL_IRQ_RADIO_Handler+0xd64>)
    9878:	43c1      	mvns	r1, r0
    987a:	686d      	ldr	r5, [r5, #4]
    987c:	f894 8011 	ldrb.w	r8, [r4, #17]
    9880:	1870      	adds	r0, r6, r1
    9882:	f104 020c 	add.w	r2, r4, #12
    9886:	429e      	cmp	r6, r3
    9888:	d904      	bls.n	9894 <MPSL_IRQ_RADIO_Handler+0xbc8>
    988a:	f240 519e 	movw	r1, #1438	; 0x59e
    988e:	2070      	movs	r0, #112	; 0x70
    9890:	f002 fd62 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9894:	4549      	cmp	r1, r9
    9896:	dca7      	bgt.n	97e8 <MPSL_IRQ_RADIO_Handler+0xb1c>
    9898:	4559      	cmp	r1, fp
    989a:	db35      	blt.n	9908 <MPSL_IRQ_RADIO_Handler+0xc3c>
    989c:	4287      	cmp	r7, r0
    989e:	bfdc      	itt	le
    98a0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    98a4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    98a8:	dd05      	ble.n	98b6 <MPSL_IRQ_RADIO_Handler+0xbea>
    98aa:	2800      	cmp	r0, #0
    98ac:	bfbc      	itt	lt
    98ae:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    98b2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    98b6:	4621      	mov	r1, r4
    98b8:	f001 fc98 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    98bc:	6820      	ldr	r0, [r4, #0]
    98be:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    98c2:	1970      	adds	r0, r6, r5
    98c4:	1c40      	adds	r0, r0, #1
    98c6:	6021      	str	r1, [r4, #0]
    98c8:	f1b8 0f00 	cmp.w	r8, #0
    98cc:	bf08      	it	eq
    98ce:	307a      	addeq	r0, #122	; 0x7a
    98d0:	d004      	beq.n	98dc <MPSL_IRQ_RADIO_Handler+0xc10>
    98d2:	f1b8 0f01 	cmp.w	r8, #1
    98d6:	bf08      	it	eq
    98d8:	3048      	addeq	r0, #72	; 0x48
    98da:	d13a      	bne.n	9952 <MPSL_IRQ_RADIO_Handler+0xc86>
    98dc:	f001 fc6a 	bl	b1b4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    98e0:	e001      	b.n	98e6 <MPSL_IRQ_RADIO_Handler+0xc1a>
    98e2:	e00e      	b.n	9902 <MPSL_IRQ_RADIO_Handler+0xc36>
    98e4:	e005      	b.n	98f2 <MPSL_IRQ_RADIO_Handler+0xc26>
    98e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    98ea:	6060      	str	r0, [r4, #4]
    98ec:	b007      	add	sp, #28
    98ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    98f2:	6830      	ldr	r0, [r6, #0]
    98f4:	1e40      	subs	r0, r0, #1
    98f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    98fa:	6020      	str	r0, [r4, #0]
    98fc:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
    9900:	e7f3      	b.n	98ea <MPSL_IRQ_RADIO_Handler+0xc1e>
    9902:	4601      	mov	r1, r0
    9904:	4558      	cmp	r0, fp
    9906:	da04      	bge.n	9912 <MPSL_IRQ_RADIO_Handler+0xc46>
    9908:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    990c:	2070      	movs	r0, #112	; 0x70
    990e:	f002 fd23 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9912:	4287      	cmp	r7, r0
    9914:	bfdc      	itt	le
    9916:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    991a:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    991e:	dd05      	ble.n	992c <MPSL_IRQ_RADIO_Handler+0xc60>
    9920:	2800      	cmp	r0, #0
    9922:	bfbc      	itt	lt
    9924:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    9928:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    992c:	4621      	mov	r1, r4
    992e:	f001 fc5d 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9932:	6820      	ldr	r0, [r4, #0]
    9934:	f1b8 0f00 	cmp.w	r8, #0
    9938:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    993c:	f10a 0001 	add.w	r0, sl, #1
    9940:	6021      	str	r1, [r4, #0]
    9942:	bf08      	it	eq
    9944:	307a      	addeq	r0, #122	; 0x7a
    9946:	d009      	beq.n	995c <MPSL_IRQ_RADIO_Handler+0xc90>
    9948:	f1b8 0f01 	cmp.w	r8, #1
    994c:	bf08      	it	eq
    994e:	3048      	addeq	r0, #72	; 0x48
    9950:	d004      	beq.n	995c <MPSL_IRQ_RADIO_Handler+0xc90>
    9952:	f240 6139 	movw	r1, #1593	; 0x639
    9956:	2070      	movs	r0, #112	; 0x70
    9958:	f002 fcfe 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    995c:	f001 fc2a 	bl	b1b4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9960:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9964:	6061      	str	r1, [r4, #4]
    9966:	f8b4 900e 	ldrh.w	r9, [r4, #14]
    996a:	aa01      	add	r2, sp, #4
    996c:	4669      	mov	r1, sp
    996e:	4648      	mov	r0, r9
    9970:	6837      	ldr	r7, [r6, #0]
    9972:	f001 fc3b 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9976:	f002 f977 	bl	bc68 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    997a:	f001 fc1b 	bl	b1b4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    997e:	4680      	mov	r8, r0
    9980:	482c      	ldr	r0, [pc, #176]	; (9a34 <MPSL_IRQ_RADIO_Handler+0xd68>)
    9982:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
    9986:	2920      	cmp	r1, #32
    9988:	d02a      	beq.n	99e0 <MPSL_IRQ_RADIO_Handler+0xd14>
    998a:	68c0      	ldr	r0, [r0, #12]
    998c:	1d40      	adds	r0, r0, #5
    998e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9992:	bf00      	nop
    9994:	e9d4 2100 	ldrd	r2, r1, [r4]
    9998:	1a89      	subs	r1, r1, r2
    999a:	4401      	add	r1, r0
    999c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    99a0:	e9c4 0100 	strd	r0, r1, [r4]
    99a4:	6831      	ldr	r1, [r6, #0]
    99a6:	4281      	cmp	r1, r0
    99a8:	d902      	bls.n	99b0 <MPSL_IRQ_RADIO_Handler+0xce4>
    99aa:	68a0      	ldr	r0, [r4, #8]
    99ac:	1c40      	adds	r0, r0, #1
    99ae:	60a0      	str	r0, [r4, #8]
    99b0:	6832      	ldr	r2, [r6, #0]
    99b2:	6928      	ldr	r0, [r5, #16]
    99b4:	4621      	mov	r1, r4
    99b6:	9b06      	ldr	r3, [sp, #24]
    99b8:	f7ff f9e4 	bl	8d84 <MPSL_IRQ_RADIO_Handler+0xb8>
    99bc:	2800      	cmp	r0, #0
    99be:	bf1c      	itt	ne
    99c0:	b007      	addne	sp, #28
    99c2:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99c6:	e9d4 1000 	ldrd	r1, r0, [r4]
    99ca:	1a40      	subs	r0, r0, r1
    99cc:	6831      	ldr	r1, [r6, #0]
    99ce:	6021      	str	r1, [r4, #0]
    99d0:	6831      	ldr	r1, [r6, #0]
    99d2:	4408      	add	r0, r1
    99d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    99d8:	6060      	str	r0, [r4, #4]
    99da:	b007      	add	sp, #28
    99dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99e0:	3709      	adds	r7, #9
    99e2:	f1b9 0f00 	cmp.w	r9, #0
    99e6:	d016      	beq.n	9a16 <MPSL_IRQ_RADIO_Handler+0xd4a>
    99e8:	f002 fc3e 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    99ec:	b998      	cbnz	r0, 9a16 <MPSL_IRQ_RADIO_Handler+0xd4a>
    99ee:	f002 fb13 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    99f2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    99f6:	bf08      	it	eq
    99f8:	200d      	moveq	r0, #13
    99fa:	d00b      	beq.n	9a14 <MPSL_IRQ_RADIO_Handler+0xd48>
    99fc:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9a00:	3856      	subs	r0, #86	; 0x56
    9a02:	bf08      	it	eq
    9a04:	201c      	moveq	r0, #28
    9a06:	d005      	beq.n	9a14 <MPSL_IRQ_RADIO_Handler+0xd48>
    9a08:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9a0c:	389f      	subs	r0, #159	; 0x9f
    9a0e:	bf14      	ite	ne
    9a10:	2000      	movne	r0, #0
    9a12:	2032      	moveq	r0, #50	; 0x32
    9a14:	4407      	add	r7, r0
    9a16:	9800      	ldr	r0, [sp, #0]
    9a18:	4580      	cmp	r8, r0
    9a1a:	bf84      	itt	hi
    9a1c:	eba8 0000 	subhi.w	r0, r8, r0
    9a20:	4407      	addhi	r7, r0
    9a22:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    9a26:	e7b5      	b.n	9994 <MPSL_IRQ_RADIO_Handler+0xcc8>
    9a28:	1e848000 	.word	0x1e848000
    9a2c:	0f424000 	.word	0x0f424000
    9a30:	1e847fff 	.word	0x1e847fff
    9a34:	20001494 	.word	0x20001494
    9a38:	b570      	push	{r4, r5, r6, lr}
    9a3a:	4d1e      	ldr	r5, [pc, #120]	; (9ab4 <MPSL_IRQ_RADIO_Handler+0xde8>)
    9a3c:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    9a40:	2820      	cmp	r0, #32
    9a42:	bf18      	it	ne
    9a44:	bd70      	popne	{r4, r5, r6, pc}
    9a46:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    9a4a:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    9a4e:	4428      	add	r0, r5
    9a50:	f890 4020 	ldrb.w	r4, [r0, #32]
    9a54:	2c20      	cmp	r4, #32
    9a56:	d027      	beq.n	9aa8 <MPSL_IRQ_RADIO_Handler+0xddc>
    9a58:	4b17      	ldr	r3, [pc, #92]	; (9ab8 <MPSL_IRQ_RADIO_Handler+0xdec>)
    9a5a:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    9a5e:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    9a62:	7849      	ldrb	r1, [r1, #1]
    9a64:	f880 1020 	strb.w	r1, [r0, #32]
    9a68:	20ff      	movs	r0, #255	; 0xff
    9a6a:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    9a6e:	f885 4032 	strb.w	r4, [r5, #50]	; 0x32
    9a72:	4621      	mov	r1, r4
    9a74:	2002      	movs	r0, #2
    9a76:	f000 f891 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    9a7a:	2000      	movs	r0, #0
    9a7c:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    9a80:	77a8      	strb	r0, [r5, #30]
    9a82:	490e      	ldr	r1, [pc, #56]	; (9abc <MPSL_IRQ_RADIO_Handler+0xdf0>)
    9a84:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    9a88:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    9a8c:	7e00      	ldrb	r0, [r0, #24]
    9a8e:	2800      	cmp	r0, #0
    9a90:	bf08      	it	eq
    9a92:	f002 fdcb 	bleq	c62c <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    9a96:	2000      	movs	r0, #0
    9a98:	4909      	ldr	r1, [pc, #36]	; (9ac0 <MPSL_IRQ_RADIO_Handler+0xdf4>)
    9a9a:	6849      	ldr	r1, [r1, #4]
    9a9c:	2900      	cmp	r1, #0
    9a9e:	bf08      	it	eq
    9aa0:	bd70      	popeq	{r4, r5, r6, pc}
    9aa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9aa6:	4708      	bx	r1
    9aa8:	f240 3132 	movw	r1, #818	; 0x332
    9aac:	2070      	movs	r0, #112	; 0x70
    9aae:	f002 fc53 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9ab2:	0000      	.short	0x0000
    9ab4:	20001494 	.word	0x20001494
    9ab8:	20001414 	.word	0x20001414
    9abc:	20001094 	.word	0x20001094
    9ac0:	200002d0 	.word	0x200002d0
    9ac4:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9ac8:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 9b8c <MPSL_IRQ_RADIO_Handler+0xec0>
    9acc:	f898 5031 	ldrb.w	r5, [r8, #49]	; 0x31
    9ad0:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9ad4:	4440      	add	r0, r8
    9ad6:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    9ada:	2c20      	cmp	r4, #32
    9adc:	bf08      	it	eq
    9ade:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9ae2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 9b90 <MPSL_IRQ_RADIO_Handler+0xec4>
    9ae6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 9b94 <MPSL_IRQ_RADIO_Handler+0xec8>
    9aea:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
    9aee:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    9af2:	2607      	movs	r6, #7
    9af4:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    9af8:	2801      	cmp	r0, #1
    9afa:	d00e      	beq.n	9b1a <MPSL_IRQ_RADIO_Handler+0xe4e>
    9afc:	2804      	cmp	r0, #4
    9afe:	bf08      	it	eq
    9b00:	2602      	moveq	r6, #2
    9b02:	d00a      	beq.n	9b1a <MPSL_IRQ_RADIO_Handler+0xe4e>
    9b04:	2805      	cmp	r0, #5
    9b06:	bf0c      	ite	eq
    9b08:	2603      	moveq	r6, #3
    9b0a:	2806      	cmpne	r0, #6
    9b0c:	d005      	beq.n	9b1a <MPSL_IRQ_RADIO_Handler+0xe4e>
    9b0e:	f640 01dd 	movw	r1, #2269	; 0x8dd
    9b12:	f04f 0070 	mov.w	r0, #112	; 0x70
    9b16:	f002 fc1f 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9b1a:	f1bb 0f00 	cmp.w	fp, #0
    9b1e:	bf18      	it	ne
    9b20:	f3af 8000 	nopne.w
    9b24:	f3ef 8010 	mrs	r0, PRIMASK
    9b28:	b672      	cpsid	i
    9b2a:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    9b2e:	784a      	ldrb	r2, [r1, #1]
    9b30:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    9b34:	4441      	add	r1, r8
    9b36:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    9b3a:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    9b3e:	42a2      	cmp	r2, r4
    9b40:	bf04      	itt	eq
    9b42:	2220      	moveq	r2, #32
    9b44:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    9b48:	b1c0      	cbz	r0, 9b7c <MPSL_IRQ_RADIO_Handler+0xeb0>
    9b4a:	462a      	mov	r2, r5
    9b4c:	4621      	mov	r1, r4
    9b4e:	2001      	movs	r0, #1
    9b50:	f000 f824 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    9b54:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9b58:	eb09 0081 	add.w	r0, r9, r1, lsl #2
    9b5c:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    9b60:	6840      	ldr	r0, [r0, #4]
    9b62:	4631      	mov	r1, r6
    9b64:	4790      	blx	r2
    9b66:	f898 5031 	ldrb.w	r5, [r8, #49]	; 0x31
    9b6a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9b6e:	4440      	add	r0, r8
    9b70:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    9b74:	2c20      	cmp	r4, #32
    9b76:	d1ba      	bne.n	9aee <MPSL_IRQ_RADIO_Handler+0xe22>
    9b78:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9b7c:	4806      	ldr	r0, [pc, #24]	; (9b98 <MPSL_IRQ_RADIO_Handler+0xecc>)
    9b7e:	2800      	cmp	r0, #0
    9b80:	bf18      	it	ne
    9b82:	f3af 8000 	nopne.w
    9b86:	b662      	cpsie	i
    9b88:	e7df      	b.n	9b4a <MPSL_IRQ_RADIO_Handler+0xe7e>
    9b8a:	0000      	.short	0x0000
    9b8c:	20001494 	.word	0x20001494
    9b90:	00000000 	.word	0x00000000
    9b94:	20001414 	.word	0x20001414
    9b98:	00000000 	.word	0x00000000
    9b9c:	f8df c058 	ldr.w	ip, [pc, #88]	; 9bf8 <MPSL_IRQ_RADIO_Handler+0xf2c>
    9ba0:	b510      	push	{r4, lr}
    9ba2:	2300      	movs	r3, #0
    9ba4:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    9ba8:	2807      	cmp	r0, #7
    9baa:	d21f      	bcs.n	9bec <MPSL_IRQ_RADIO_Handler+0xf20>
    9bac:	e8df f000 	tbb	[pc, r0]
    9bb0:	05050505 	.word	0x05050505
    9bb4:	00040404 	.word	0x00040404
    9bb8:	2301      	movs	r3, #1
    9bba:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    9bbe:	2b00      	cmp	r3, #0
    9bc0:	bf08      	it	eq
    9bc2:	bd10      	popeq	{r4, pc}
    9bc4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    9bc8:	480c      	ldr	r0, [pc, #48]	; (9bfc <MPSL_IRQ_RADIO_Handler+0xf30>)
    9bca:	4402      	add	r2, r0
    9bcc:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    9bd0:	2820      	cmp	r0, #32
    9bd2:	bf0e      	itee	eq
    9bd4:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    9bd8:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    9bdc:	7041      	strbne	r1, [r0, #1]
    9bde:	2020      	movs	r0, #32
    9be0:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    9be4:	7058      	strb	r0, [r3, #1]
    9be6:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    9bea:	bd10      	pop	{r4, pc}
    9bec:	f240 216e 	movw	r1, #622	; 0x26e
    9bf0:	2070      	movs	r0, #112	; 0x70
    9bf2:	f002 fbb1 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9bf6:	0000      	.short	0x0000
    9bf8:	20001414 	.word	0x20001414
    9bfc:	20001494 	.word	0x20001494
    9c00:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9c04:	460f      	mov	r7, r1
    9c06:	4680      	mov	r8, r0
    9c08:	f8df a160 	ldr.w	sl, [pc, #352]	; 9d6c <MPSL_IRQ_RADIO_Handler+0x10a0>
    9c0c:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    9c10:	4450      	add	r0, sl
    9c12:	f1b8 0f01 	cmp.w	r8, #1
    9c16:	f890 4020 	ldrb.w	r4, [r0, #32]
    9c1a:	4625      	mov	r5, r4
    9c1c:	bf18      	it	ne
    9c1e:	f1b8 0f02 	cmpne.w	r8, #2
    9c22:	d005      	beq.n	9c30 <MPSL_IRQ_RADIO_Handler+0xf64>
    9c24:	f640 21ac 	movw	r1, #2732	; 0xaac
    9c28:	f04f 0070 	mov.w	r0, #112	; 0x70
    9c2c:	f002 fb94 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9c30:	f04f 0b00 	mov.w	fp, #0
    9c34:	2d20      	cmp	r5, #32
    9c36:	d042      	beq.n	9cbe <MPSL_IRQ_RADIO_Handler+0xff2>
    9c38:	f89a 001e 	ldrb.w	r0, [sl, #30]
    9c3c:	2600      	movs	r6, #0
    9c3e:	2800      	cmp	r0, #0
    9c40:	bf08      	it	eq
    9c42:	2602      	moveq	r6, #2
    9c44:	f001 fc3c 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9c48:	f8df c124 	ldr.w	ip, [pc, #292]	; 9d70 <MPSL_IRQ_RADIO_Handler+0x10a4>
    9c4c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9c50:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    9c54:	688a      	ldr	r2, [r1, #8]
    9c56:	68c9      	ldr	r1, [r1, #12]
    9c58:	1a12      	subs	r2, r2, r0
    9c5a:	1a09      	subs	r1, r1, r0
    9c5c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9c60:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9c64:	4296      	cmp	r6, r2
    9c66:	bf99      	ittee	ls
    9c68:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    9c6c:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9c70:	4a40      	ldrhi	r2, [pc, #256]	; (9d74 <MPSL_IRQ_RADIO_Handler+0x10a8>)
    9c72:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
    9c76:	d920      	bls.n	9cba <MPSL_IRQ_RADIO_Handler+0xfee>
    9c78:	4622      	mov	r2, r4
    9c7a:	eb09 0142 	add.w	r1, r9, r2, lsl #1
    9c7e:	784c      	ldrb	r4, [r1, #1]
    9c80:	2c20      	cmp	r4, #32
    9c82:	d012      	beq.n	9caa <MPSL_IRQ_RADIO_Handler+0xfde>
    9c84:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9c88:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    9c8c:	688b      	ldr	r3, [r1, #8]
    9c8e:	68c9      	ldr	r1, [r1, #12]
    9c90:	1a1b      	subs	r3, r3, r0
    9c92:	1a09      	subs	r1, r1, r0
    9c94:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    9c98:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9c9c:	429e      	cmp	r6, r3
    9c9e:	bf9c      	itt	ls
    9ca0:	f5b3 0f00 	cmpls.w	r3, #8388608	; 0x800000
    9ca4:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9ca8:	d8e6      	bhi.n	9c78 <MPSL_IRQ_RADIO_Handler+0xfac>
    9caa:	2a20      	cmp	r2, #32
    9cac:	d005      	beq.n	9cba <MPSL_IRQ_RADIO_Handler+0xfee>
    9cae:	463b      	mov	r3, r7
    9cb0:	2120      	movs	r1, #32
    9cb2:	2004      	movs	r0, #4
    9cb4:	f7ff f82a 	bl	8d0c <MPSL_IRQ_RADIO_Handler+0x40>
    9cb8:	4604      	mov	r4, r0
    9cba:	42ac      	cmp	r4, r5
    9cbc:	d116      	bne.n	9cec <MPSL_IRQ_RADIO_Handler+0x1020>
    9cbe:	482e      	ldr	r0, [pc, #184]	; (9d78 <MPSL_IRQ_RADIO_Handler+0x10ac>)
    9cc0:	2800      	cmp	r0, #0
    9cc2:	bf18      	it	ne
    9cc4:	f3af 8000 	nopne.w
    9cc8:	f001 fbfa 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9ccc:	4603      	mov	r3, r0
    9cce:	f89a 0033 	ldrb.w	r0, [sl, #51]	; 0x33
    9cd2:	2820      	cmp	r0, #32
    9cd4:	d00d      	beq.n	9cf2 <MPSL_IRQ_RADIO_Handler+0x1026>
    9cd6:	f8da 0008 	ldr.w	r0, [sl, #8]
    9cda:	1c99      	adds	r1, r3, #2
    9cdc:	1a08      	subs	r0, r1, r0
    9cde:	0200      	lsls	r0, r0, #8
    9ce0:	17c1      	asrs	r1, r0, #31
    9ce2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    9ce6:	1200      	asrs	r0, r0, #8
    9ce8:	2800      	cmp	r0, #0
    9cea:	dd02      	ble.n	9cf2 <MPSL_IRQ_RADIO_Handler+0x1026>
    9cec:	2000      	movs	r0, #0
    9cee:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9cf2:	2d20      	cmp	r5, #32
    9cf4:	d014      	beq.n	9d20 <MPSL_IRQ_RADIO_Handler+0x1054>
    9cf6:	462a      	mov	r2, r5
    9cf8:	4641      	mov	r1, r8
    9cfa:	4618      	mov	r0, r3
    9cfc:	f7ff fa9c 	bl	9238 <MPSL_IRQ_RADIO_Handler+0x56c>
    9d00:	2800      	cmp	r0, #0
    9d02:	bf1e      	ittt	ne
    9d04:	f88a 5033 	strbne.w	r5, [sl, #51]	; 0x33
    9d08:	2002      	movne	r0, #2
    9d0a:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9d0e:	463b      	mov	r3, r7
    9d10:	462a      	mov	r2, r5
    9d12:	2120      	movs	r1, #32
    9d14:	2004      	movs	r0, #4
    9d16:	f7fe fff9 	bl	8d0c <MPSL_IRQ_RADIO_Handler+0x40>
    9d1a:	2000      	movs	r0, #0
    9d1c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9d20:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
    9d24:	f1b0 3fff 	cmp.w	r0, #4294967295
    9d28:	d005      	beq.n	9d36 <MPSL_IRQ_RADIO_Handler+0x106a>
    9d2a:	f002 f97b 	bl	c024 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    9d2e:	f04f 30ff 	mov.w	r0, #4294967295
    9d32:	f8ca 002c 	str.w	r0, [sl, #44]	; 0x2c
    9d36:	f89a 0030 	ldrb.w	r0, [sl, #48]	; 0x30
    9d3a:	b120      	cbz	r0, 9d46 <MPSL_IRQ_RADIO_Handler+0x107a>
    9d3c:	2005      	movs	r0, #5
    9d3e:	f001 fe35 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9d42:	f88a b030 	strb.w	fp, [sl, #48]	; 0x30
    9d46:	2004      	movs	r0, #4
    9d48:	f001 fe30 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9d4c:	f001 fe9e 	bl	ba8c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    9d50:	2020      	movs	r0, #32
    9d52:	f88a 0033 	strb.w	r0, [sl, #51]	; 0x33
    9d56:	4809      	ldr	r0, [pc, #36]	; (9d7c <MPSL_IRQ_RADIO_Handler+0x10b0>)
    9d58:	6880      	ldr	r0, [r0, #8]
    9d5a:	f8c0 b000 	str.w	fp, [r0]
    9d5e:	4808      	ldr	r0, [pc, #32]	; (9d80 <MPSL_IRQ_RADIO_Handler+0x10b4>)
    9d60:	f8c0 b000 	str.w	fp, [r0]
    9d64:	2001      	movs	r0, #1
    9d66:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9d6a:	0000      	.short	0x0000
    9d6c:	20001494 	.word	0x20001494
    9d70:	20001094 	.word	0x20001094
    9d74:	20001414 	.word	0x20001414
    9d78:	00000000 	.word	0x00000000
    9d7c:	200002d0 	.word	0x200002d0
    9d80:	40000508 	.word	0x40000508

00009d84 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    9d84:	4906      	ldr	r1, [pc, #24]	; (9da0 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    9d86:	b510      	push	{r4, lr}
    9d88:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
    9d8c:	2a20      	cmp	r2, #32
    9d8e:	bf1c      	itt	ne
    9d90:	7788      	strbne	r0, [r1, #30]
    9d92:	bd10      	popne	{r4, pc}
    9d94:	f240 319a 	movw	r1, #922	; 0x39a
    9d98:	2070      	movs	r0, #112	; 0x70
    9d9a:	f002 fadd 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9d9e:	0000      	.short	0x0000
    9da0:	20001494 	.word	0x20001494

00009da4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    9da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9da8:	4e69      	ldr	r6, [pc, #420]	; (9f50 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    9daa:	4607      	mov	r7, r0
    9dac:	b08d      	sub	sp, #52	; 0x34
    9dae:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
    9db2:	4688      	mov	r8, r1
    9db4:	2820      	cmp	r0, #32
    9db6:	d055      	beq.n	9e64 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc0>
    9db8:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
    9dbc:	f106 0408 	add.w	r4, r6, #8
    9dc0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    9dc4:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
    9dc8:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
    9dcc:	2020      	movs	r0, #32
    9dce:	f88d 0020 	strb.w	r0, [sp, #32]
    9dd2:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    9dd6:	aa0a      	add	r2, sp, #40	; 0x28
    9dd8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    9ddc:	4430      	add	r0, r6
    9dde:	a909      	add	r1, sp, #36	; 0x24
    9de0:	f890 5020 	ldrb.w	r5, [r0, #32]
    9de4:	68f0      	ldr	r0, [r6, #12]
    9de6:	9002      	str	r0, [sp, #8]
    9de8:	6830      	ldr	r0, [r6, #0]
    9dea:	4438      	add	r0, r7
    9dec:	f001 f9fe 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9df0:	f8da 000c 	ldr.w	r0, [sl, #12]
    9df4:	9909      	ldr	r1, [sp, #36]	; 0x24
    9df6:	2f65      	cmp	r7, #101	; 0x65
    9df8:	4408      	add	r0, r1
    9dfa:	d338      	bcc.n	9e6e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    9dfc:	4a55      	ldr	r2, [pc, #340]	; (9f54 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b0>)
    9dfe:	2100      	movs	r1, #0
    9e00:	1bd2      	subs	r2, r2, r7
    9e02:	eb71 0201 	sbcs.w	r2, r1, r1
    9e06:	d332      	bcc.n	9e6e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    9e08:	6822      	ldr	r2, [r4, #0]
    9e0a:	1a82      	subs	r2, r0, r2
    9e0c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9e10:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    9e14:	d82b      	bhi.n	9e6e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    9e16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9e1a:	6060      	str	r0, [r4, #4]
    9e1c:	4630      	mov	r0, r6
    9e1e:	f884 8010 	strb.w	r8, [r4, #16]
    9e22:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
    9e26:	f10d 0a20 	add.w	sl, sp, #32
    9e2a:	2d20      	cmp	r5, #32
    9e2c:	bf1c      	itt	ne
    9e2e:	494a      	ldrne	r1, [pc, #296]	; (9f58 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    9e30:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    9e34:	d050      	beq.n	9ed8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    9e36:	bf00      	nop
    9e38:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    9e3c:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    9e40:	6861      	ldr	r1, [r4, #4]
    9e42:	f8d8 6008 	ldr.w	r6, [r8, #8]
    9e46:	f108 0008 	add.w	r0, r8, #8
    9e4a:	1a71      	subs	r1, r6, r1
    9e4c:	0209      	lsls	r1, r1, #8
    9e4e:	17ca      	asrs	r2, r1, #31
    9e50:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    9e54:	1209      	asrs	r1, r1, #8
    9e56:	d42d      	bmi.n	9eb4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x110>
    9e58:	89c0      	ldrh	r0, [r0, #14]
    9e5a:	2800      	cmp	r0, #0
    9e5c:	d03c      	beq.n	9ed8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    9e5e:	89e0      	ldrh	r0, [r4, #14]
    9e60:	b148      	cbz	r0, 9e76 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    9e62:	e039      	b.n	9ed8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    9e64:	f640 3173 	movw	r1, #2931	; 0xb73
    9e68:	2070      	movs	r0, #112	; 0x70
    9e6a:	f002 fa75 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9e6e:	b00d      	add	sp, #52	; 0x34
    9e70:	2001      	movs	r0, #1
    9e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e76:	6820      	ldr	r0, [r4, #0]
    9e78:	900c      	str	r0, [sp, #48]	; 0x30
    9e7a:	f002 f8cd 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9e7e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9e82:	bf08      	it	eq
    9e84:	200d      	moveq	r0, #13
    9e86:	d00b      	beq.n	9ea0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    9e88:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9e8c:	3856      	subs	r0, #86	; 0x56
    9e8e:	bf08      	it	eq
    9e90:	201c      	moveq	r0, #28
    9e92:	d005      	beq.n	9ea0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    9e94:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9e98:	389f      	subs	r0, #159	; 0x9f
    9e9a:	bf14      	ite	ne
    9e9c:	2000      	movne	r0, #0
    9e9e:	2032      	moveq	r0, #50	; 0x32
    9ea0:	1c41      	adds	r1, r0, #1
    9ea2:	980c      	ldr	r0, [sp, #48]	; 0x30
    9ea4:	1a30      	subs	r0, r6, r0
    9ea6:	0200      	lsls	r0, r0, #8
    9ea8:	17c2      	asrs	r2, r0, #31
    9eaa:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    9eae:	1200      	asrs	r0, r0, #8
    9eb0:	4288      	cmp	r0, r1
    9eb2:	da11      	bge.n	9ed8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    9eb4:	f88a 5000 	strb.w	r5, [sl]
    9eb8:	f898 1018 	ldrb.w	r1, [r8, #24]
    9ebc:	7c20      	ldrb	r0, [r4, #16]
    9ebe:	4281      	cmp	r1, r0
    9ec0:	d805      	bhi.n	9ece <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    9ec2:	9802      	ldr	r0, [sp, #8]
    9ec4:	6060      	str	r0, [r4, #4]
    9ec6:	b00d      	add	sp, #52	; 0x34
    9ec8:	2002      	movs	r0, #2
    9eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ece:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    9ed2:	7845      	ldrb	r5, [r0, #1]
    9ed4:	2d20      	cmp	r5, #32
    9ed6:	d1af      	bne.n	9e38 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x94>
    9ed8:	2005      	movs	r0, #5
    9eda:	f001 fd67 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9ede:	4c1c      	ldr	r4, [pc, #112]	; (9f50 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    9ee0:	f04f 30ff 	mov.w	r0, #4294967295
    9ee4:	6060      	str	r0, [r4, #4]
    9ee6:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    9eea:	f89d 2020 	ldrb.w	r2, [sp, #32]
    9eee:	2120      	movs	r1, #32
    9ef0:	2a20      	cmp	r2, #32
    9ef2:	d003      	beq.n	9efc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x158>
    9ef4:	2005      	movs	r0, #5
    9ef6:	f7fe ff09 	bl	8d0c <MPSL_IRQ_RADIO_Handler+0x40>
    9efa:	e004      	b.n	9f06 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x162>
    9efc:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    9f00:	4420      	add	r0, r4
    9f02:	f890 0020 	ldrb.w	r0, [r0, #32]
    9f06:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
    9f0a:	4913      	ldr	r1, [pc, #76]	; (9f58 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    9f0c:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    9f10:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
    9f14:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    9f18:	7048      	strb	r0, [r1, #1]
    9f1a:	6820      	ldr	r0, [r4, #0]
    9f1c:	4438      	add	r0, r7
    9f1e:	6020      	str	r0, [r4, #0]
    9f20:	20ff      	movs	r0, #255	; 0xff
    9f22:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    9f26:	7e60      	ldrb	r0, [r4, #25]
    9f28:	2801      	cmp	r0, #1
    9f2a:	d105      	bne.n	9f38 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x194>
    9f2c:	68e0      	ldr	r0, [r4, #12]
    9f2e:	1e40      	subs	r0, r0, #1
    9f30:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9f34:	f001 fb9e 	bl	b674 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    9f38:	f89d 0020 	ldrb.w	r0, [sp, #32]
    9f3c:	2820      	cmp	r0, #32
    9f3e:	d003      	beq.n	9f48 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a4>
    9f40:	4806      	ldr	r0, [pc, #24]	; (9f5c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b8>)
    9f42:	7840      	ldrb	r0, [r0, #1]
    9f44:	f002 fadc 	bl	c500 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9f48:	b00d      	add	sp, #52	; 0x34
    9f4a:	2000      	movs	r0, #0
    9f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f50:	20001494 	.word	0x20001494
    9f54:	0f424000 	.word	0x0f424000
    9f58:	20001414 	.word	0x20001414
    9f5c:	200002d0 	.word	0x200002d0

00009f60 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    9f60:	b570      	push	{r4, r5, r6, lr}
    9f62:	4a24      	ldr	r2, [pc, #144]	; (9ff4 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x94>)
    9f64:	f892 1032 	ldrb.w	r1, [r2, #50]	; 0x32
    9f68:	2920      	cmp	r1, #32
    9f6a:	d03a      	beq.n	9fe2 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x82>
    9f6c:	f892 1032 	ldrb.w	r1, [r2, #50]	; 0x32
    9f70:	f5a2 6380 	sub.w	r3, r2, #1024	; 0x400
    9f74:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    9f78:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
    9f7c:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
    9f80:	f892 4031 	ldrb.w	r4, [r2, #49]	; 0x31
    9f84:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    9f88:	4411      	add	r1, r2
    9f8a:	f891 1020 	ldrb.w	r1, [r1, #32]
    9f8e:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    9f92:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    9f96:	2920      	cmp	r1, #32
    9f98:	d028      	beq.n	9fec <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8c>
    9f9a:	ebc1 05c1 	rsb	r5, r1, r1, lsl #3
    9f9e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    9fa2:	7e2d      	ldrb	r5, [r5, #24]
    9fa4:	4285      	cmp	r5, r0
    9fa6:	bf84      	itt	hi
    9fa8:	eb04 0141 	addhi.w	r1, r4, r1, lsl #1
    9fac:	7849      	ldrbhi	r1, [r1, #1]
    9fae:	d8f2      	bhi.n	9f96 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x36>
    9fb0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    9fb4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    9fb8:	f8dc 000c 	ldr.w	r0, [ip, #12]
    9fbc:	6889      	ldr	r1, [r1, #8]
    9fbe:	6814      	ldr	r4, [r2, #0]
    9fc0:	1a08      	subs	r0, r1, r0
    9fc2:	0200      	lsls	r0, r0, #8
    9fc4:	17c1      	asrs	r1, r0, #31
    9fc6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    9fca:	1200      	asrs	r0, r0, #8
    9fcc:	d407      	bmi.n	9fde <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7e>
    9fce:	f006 f9bb 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9fd2:	f104 0165 	add.w	r1, r4, #101	; 0x65
    9fd6:	4288      	cmp	r0, r1
    9fd8:	bf24      	itt	cs
    9fda:	1b00      	subcs	r0, r0, r4
    9fdc:	bd70      	popcs	{r4, r5, r6, pc}
    9fde:	2000      	movs	r0, #0
    9fe0:	bd70      	pop	{r4, r5, r6, pc}
    9fe2:	f640 3145 	movw	r1, #2885	; 0xb45
    9fe6:	2070      	movs	r0, #112	; 0x70
    9fe8:	f002 f9b6 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9fec:	f04f 30ff 	mov.w	r0, #4294967295
    9ff0:	bd70      	pop	{r4, r5, r6, pc}
    9ff2:	0000      	.short	0x0000
    9ff4:	20001494 	.word	0x20001494

00009ff8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    9ff8:	4806      	ldr	r0, [pc, #24]	; (a014 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    9ffa:	b510      	push	{r4, lr}
    9ffc:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
    a000:	2920      	cmp	r1, #32
    a002:	bf1c      	itt	ne
    a004:	7e00      	ldrbne	r0, [r0, #24]
    a006:	bd10      	popne	{r4, pc}
    a008:	f640 316d 	movw	r1, #2925	; 0xb6d
    a00c:	2070      	movs	r0, #112	; 0x70
    a00e:	f002 f9a3 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a012:	0000      	.short	0x0000
    a014:	20001494 	.word	0x20001494

0000a018 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    a018:	b570      	push	{r4, r5, r6, lr}
    a01a:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
    a01e:	4809      	ldr	r0, [pc, #36]	; (a044 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x2c>)
    a020:	eb00 0481 	add.w	r4, r0, r1, lsl #2
    a024:	4908      	ldr	r1, [pc, #32]	; (a048 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x30>)
    a026:	6920      	ldr	r0, [r4, #16]
    a028:	fba0 5601 	umull	r5, r6, r0, r1
    a02c:	68a0      	ldr	r0, [r4, #8]
    a02e:	f006 f98b 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a032:	8ae1      	ldrh	r1, [r4, #22]
    a034:	7d22      	ldrb	r2, [r4, #20]
    a036:	1c40      	adds	r0, r0, #1
    a038:	4411      	add	r1, r2
    a03a:	4408      	add	r0, r1
    a03c:	1940      	adds	r0, r0, r5
    a03e:	f146 0100 	adc.w	r1, r6, #0
    a042:	bd70      	pop	{r4, r5, r6, pc}
    a044:	20001094 	.word	0x20001094
    a048:	1e848000 	.word	0x1e848000

0000a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    a04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a04e:	4d6f      	ldr	r5, [pc, #444]	; (a20c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    a050:	2601      	movs	r6, #1
    a052:	f505 6480 	add.w	r4, r5, #1024	; 0x400
    a056:	4a6e      	ldr	r2, [pc, #440]	; (a210 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    a058:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    a05a:	2808      	cmp	r0, #8
    a05c:	d272      	bcs.n	a144 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    a05e:	e8df f000 	tbb	[pc, r0]
    a062:	7704      	.short	0x7704
    a064:	44cfb19f 	.word	0x44cfb19f
    a068:	bbb6      	.short	0xbbb6
    a06a:	f1b1 3fff 	cmp.w	r1, #4294967295
    a06e:	d104      	bne.n	a07a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2e>
    a070:	f001 fff4 	bl	c05c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a074:	f001 fa24 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a078:	62e0      	str	r0, [r4, #44]	; 0x2c
    a07a:	8ae0      	ldrh	r0, [r4, #22]
    a07c:	b110      	cbz	r0, a084 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x38>
    a07e:	f002 f8f3 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a082:	b180      	cbz	r0, a0a6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    a084:	f7ff fcd8 	bl	9a38 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a088:	20ff      	movs	r0, #255	; 0xff
    a08a:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    a08e:	6861      	ldr	r1, [r4, #4]
    a090:	f1b1 3fff 	cmp.w	r1, #4294967295
    a094:	d003      	beq.n	a09e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x52>
    a096:	2005      	movs	r0, #5
    a098:	f001 fbd2 	bl	b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    a09c:	b140      	cbz	r0, a0b0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x64>
    a09e:	7e60      	ldrb	r0, [r4, #25]
    a0a0:	2801      	cmp	r0, #1
    a0a2:	d110      	bne.n	a0c6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x7a>
    a0a4:	e009      	b.n	a0ba <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6e>
    a0a6:	f640 0169 	movw	r1, #2153	; 0x869
    a0aa:	2070      	movs	r0, #112	; 0x70
    a0ac:	f002 f954 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a0b0:	f640 016e 	movw	r1, #2158	; 0x86e
    a0b4:	2070      	movs	r0, #112	; 0x70
    a0b6:	f002 f94f 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a0ba:	68e0      	ldr	r0, [r4, #12]
    a0bc:	1e40      	subs	r0, r0, #1
    a0be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a0c2:	f001 fad7 	bl	b674 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    a0c6:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a0ca:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a0ce:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a0d2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a0d6:	6840      	ldr	r0, [r0, #4]
    a0d8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a0dc:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a0e0:	b001      	add	sp, #4
    a0e2:	2101      	movs	r1, #1
    a0e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a0e8:	4710      	bx	r2
    a0ea:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    a0ee:	b158      	cbz	r0, a108 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xbc>
    a0f0:	f1b1 3fff 	cmp.w	r1, #4294967295
    a0f4:	d104      	bne.n	a100 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb4>
    a0f6:	f001 ffb1 	bl	c05c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a0fa:	f001 f9e1 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a0fe:	62e0      	str	r0, [r4, #44]	; 0x2c
    a100:	2000      	movs	r0, #0
    a102:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    a106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a108:	f7ff fc96 	bl	9a38 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a10c:	f04f 30ff 	mov.w	r0, #4294967295
    a110:	6060      	str	r0, [r4, #4]
    a112:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    a116:	f88d 0000 	strb.w	r0, [sp]
    a11a:	f89d 0000 	ldrb.w	r0, [sp]
    a11e:	b190      	cbz	r0, a146 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    a120:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a124:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a128:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a12c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a130:	6840      	ldr	r0, [r0, #4]
    a132:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a136:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a13a:	b001      	add	sp, #4
    a13c:	2106      	movs	r1, #6
    a13e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a142:	4710      	bx	r2
    a144:	e05c      	b.n	a200 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>
    a146:	f640 0185 	movw	r1, #2181	; 0x885
    a14a:	2070      	movs	r0, #112	; 0x70
    a14c:	f002 f904 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a150:	f7ff fc72 	bl	9a38 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a154:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    a158:	f002 f886 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a15c:	b120      	cbz	r0, a168 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11c>
    a15e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    a160:	f1b0 3fff 	cmp.w	r0, #4294967295
    a164:	d005      	beq.n	a172 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    a166:	e009      	b.n	a17c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x130>
    a168:	f640 0193 	movw	r1, #2195	; 0x893
    a16c:	2070      	movs	r0, #112	; 0x70
    a16e:	f002 f8f3 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a172:	f001 ff73 	bl	c05c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a176:	f001 f9a3 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a17a:	62e0      	str	r0, [r4, #44]	; 0x2c
    a17c:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a180:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a184:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a188:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a18c:	6840      	ldr	r0, [r0, #4]
    a18e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a192:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a196:	b001      	add	sp, #4
    a198:	2100      	movs	r1, #0
    a19a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a19e:	4710      	bx	r2
    a1a0:	f001 fd44 	bl	bc2c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    a1a4:	8ae0      	ldrh	r0, [r4, #22]
    a1a6:	b110      	cbz	r0, a1ae <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x162>
    a1a8:	f002 f85e 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a1ac:	b128      	cbz	r0, a1ba <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x16e>
    a1ae:	f001 fd51 	bl	bc54 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    a1b2:	2800      	cmp	r0, #0
    a1b4:	bf18      	it	ne
    a1b6:	7766      	strbne	r6, [r4, #29]
    a1b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a1ba:	f640 019d 	movw	r1, #2205	; 0x89d
    a1be:	2070      	movs	r0, #112	; 0x70
    a1c0:	f002 f8ca 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a1c4:	4813      	ldr	r0, [pc, #76]	; (a214 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    a1c6:	6006      	str	r6, [r0, #0]
    a1c8:	6890      	ldr	r0, [r2, #8]
    a1ca:	6006      	str	r6, [r0, #0]
    a1cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a1ce:	7810      	ldrb	r0, [r2, #0]
    a1d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a1d4:	f002 b994 	b.w	c500 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a1d8:	f7ff fc2e 	bl	9a38 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a1dc:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a1e0:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a1e4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a1e8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a1ec:	6840      	ldr	r0, [r0, #4]
    a1ee:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a1f2:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a1f6:	b001      	add	sp, #4
    a1f8:	2105      	movs	r1, #5
    a1fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a1fe:	4710      	bx	r2
    a200:	f44f 610b 	mov.w	r1, #2224	; 0x8b0
    a204:	2070      	movs	r0, #112	; 0x70
    a206:	f002 f8a7 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a20a:	0000      	.short	0x0000
    a20c:	20001094 	.word	0x20001094
    a210:	200002d0 	.word	0x200002d0
    a214:	40000508 	.word	0x40000508

0000a218 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    a218:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a21c:	4682      	mov	sl, r0
    a21e:	48ef      	ldr	r0, [pc, #956]	; (a5dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c4>)
    a220:	b095      	sub	sp, #84	; 0x54
    a222:	6800      	ldr	r0, [r0, #0]
    a224:	4dee      	ldr	r5, [pc, #952]	; (a5e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>)
    a226:	05c0      	lsls	r0, r0, #23
    a228:	0dc0      	lsrs	r0, r0, #23
    a22a:	d00e      	beq.n	a24a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    a22c:	3810      	subs	r0, #16
    a22e:	b240      	sxtb	r0, r0
    a230:	2800      	cmp	r0, #0
    a232:	bfb8      	it	lt
    a234:	f000 000f 	andlt.w	r0, r0, #15
    a238:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a23c:	bfac      	ite	ge
    a23e:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a242:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a246:	0940      	lsrs	r0, r0, #5
    a248:	d00d      	beq.n	a266 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    a24a:	9816      	ldr	r0, [sp, #88]	; 0x58
    a24c:	f04f 0b00 	mov.w	fp, #0
    a250:	7800      	ldrb	r0, [r0, #0]
    a252:	2800      	cmp	r0, #0
    a254:	bf18      	it	ne
    a256:	2801      	cmpne	r0, #1
    a258:	d018      	beq.n	a28c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    a25a:	f240 713b 	movw	r1, #1851	; 0x73b
    a25e:	f04f 0070 	mov.w	r0, #112	; 0x70
    a262:	f002 f879 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a266:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    a26a:	f04f 0b01 	mov.w	fp, #1
    a26e:	2820      	cmp	r0, #32
    a270:	d007      	beq.n	a282 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    a272:	9816      	ldr	r0, [sp, #88]	; 0x58
    a274:	7800      	ldrb	r0, [r0, #0]
    a276:	b148      	cbz	r0, a28c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    a278:	f240 7137 	movw	r1, #1847	; 0x737
    a27c:	2070      	movs	r0, #112	; 0x70
    a27e:	f002 f86b 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a282:	f240 7134 	movw	r1, #1844	; 0x734
    a286:	2070      	movs	r0, #112	; 0x70
    a288:	f002 f866 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a28c:	4cd5      	ldr	r4, [pc, #852]	; (a5e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3cc>)
    a28e:	b124      	cbz	r4, a29a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    a290:	2100      	movs	r1, #0
    a292:	f240 703e 	movw	r0, #1854	; 0x73e
    a296:	f3af 8000 	nop.w
    a29a:	2000      	movs	r0, #0
    a29c:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    a2a0:	49d1      	ldr	r1, [pc, #836]	; (a5e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d0>)
    a2a2:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    a2a6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    a2aa:	f04f 0901 	mov.w	r9, #1
    a2ae:	9000      	str	r0, [sp, #0]
    a2b0:	b124      	cbz	r4, a2bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    a2b2:	2100      	movs	r1, #0
    a2b4:	f240 7049 	movw	r0, #1865	; 0x749
    a2b8:	f3af 8000 	nop.w
    a2bc:	f1b9 0f00 	cmp.w	r9, #0
    a2c0:	d00a      	beq.n	a2d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc0>
    a2c2:	bf00      	nop
    a2c4:	f895 6031 	ldrb.w	r6, [r5, #49]	; 0x31
    a2c8:	f04f 0800 	mov.w	r8, #0
    a2cc:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    a2d0:	f1bb 0f00 	cmp.w	fp, #0
    a2d4:	d007      	beq.n	a2e6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xce>
    a2d6:	e038      	b.n	a34a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x132>
    a2d8:	48c4      	ldr	r0, [pc, #784]	; (a5ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    a2da:	2800      	cmp	r0, #0
    a2dc:	bf18      	it	ne
    a2de:	f3af 8000 	nopne.w
    a2e2:	b662      	cpsie	i
    a2e4:	e7ee      	b.n	a2c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    a2e6:	4637      	mov	r7, r6
    a2e8:	2001      	movs	r0, #1
    a2ea:	ea20 0607 	bic.w	r6, r0, r7
    a2ee:	48c0      	ldr	r0, [pc, #768]	; (a5f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    a2f0:	2240      	movs	r2, #64	; 0x40
    a2f2:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    a2f6:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    a2fa:	f006 f9b8 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a2fe:	b124      	cbz	r4, a30a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf2>
    a300:	2100      	movs	r1, #0
    a302:	f240 505e 	movw	r0, #1374	; 0x55e
    a306:	f3af 8000 	nop.w
    a30a:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    a30e:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a312:	4429      	add	r1, r5
    a314:	4428      	add	r0, r5
    a316:	8c0a      	ldrh	r2, [r1, #32]
    a318:	8402      	strh	r2, [r0, #32]
    a31a:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    a31e:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    a322:	b124      	cbz	r4, a32e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    a324:	2100      	movs	r1, #0
    a326:	f240 5062 	movw	r0, #1378	; 0x562
    a32a:	f3af 8000 	nop.w
    a32e:	b124      	cbz	r4, a33a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    a330:	2100      	movs	r1, #0
    a332:	f240 7053 	movw	r0, #1875	; 0x753
    a336:	f3af 8000 	nop.w
    a33a:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a33e:	f88d 0008 	strb.w	r0, [sp, #8]
    a342:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a346:	2800      	cmp	r0, #0
    a348:	d1b2      	bne.n	a2b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a34a:	b124      	cbz	r4, a356 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    a34c:	2100      	movs	r1, #0
    a34e:	f240 705d 	movw	r0, #1885	; 0x75d
    a352:	f3af 8000 	nop.w
    a356:	a802      	add	r0, sp, #8
    a358:	f001 f8b8 	bl	b4cc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    a35c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    a360:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    a364:	4633      	mov	r3, r6
    a366:	aa09      	add	r2, sp, #36	; 0x24
    a368:	a80e      	add	r0, sp, #56	; 0x38
    a36a:	9916      	ldr	r1, [sp, #88]	; 0x58
    a36c:	f7ff fa02 	bl	9774 <MPSL_IRQ_RADIO_Handler+0xaa8>
    a370:	b124      	cbz	r4, a37c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x164>
    a372:	2100      	movs	r1, #0
    a374:	f240 7064 	movw	r0, #1892	; 0x764
    a378:	f3af 8000 	nop.w
    a37c:	4a9c      	ldr	r2, [pc, #624]	; (a5f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    a37e:	990e      	ldr	r1, [sp, #56]	; 0x38
    a380:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    a384:	a809      	add	r0, sp, #36	; 0x24
    a386:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
    a38a:	2a01      	cmp	r2, #1
    a38c:	bf18      	it	ne
    a38e:	2a02      	cmpne	r2, #2
    a390:	d138      	bne.n	a404 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    a392:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a396:	eba2 0201 	sub.w	r2, r2, r1
    a39a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    a39e:	eba3 0101 	sub.w	r1, r3, r1
    a3a2:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    a3a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a3aa:	2a02      	cmp	r2, #2
    a3ac:	d364      	bcc.n	a478 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    a3ae:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    a3b2:	bf98      	it	ls
    a3b4:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    a3b8:	d85e      	bhi.n	a478 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    a3ba:	f04f 0801 	mov.w	r8, #1
    a3be:	ab14      	add	r3, sp, #80	; 0x50
    a3c0:	aa13      	add	r2, sp, #76	; 0x4c
    a3c2:	4631      	mov	r1, r6
    a3c4:	f7fe fe96 	bl	90f4 <MPSL_IRQ_RADIO_Handler+0x428>
    a3c8:	2800      	cmp	r0, #0
    a3ca:	d05d      	beq.n	a488 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    a3cc:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    a3d0:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    a3d4:	4633      	mov	r3, r6
    a3d6:	428a      	cmp	r2, r1
    a3d8:	d05a      	beq.n	a490 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x278>
    a3da:	2005      	movs	r0, #5
    a3dc:	f7fe fc96 	bl	8d0c <MPSL_IRQ_RADIO_Handler+0x40>
    a3e0:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    a3e4:	7048      	strb	r0, [r1, #1]
    a3e6:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    a3ea:	2820      	cmp	r0, #32
    a3ec:	bf1c      	itt	ne
    a3ee:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    a3f2:	f880 a001 	strbne.w	sl, [r0, #1]
    a3f6:	d057      	beq.n	a4a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x290>
    a3f8:	4632      	mov	r2, r6
    a3fa:	4651      	mov	r1, sl
    a3fc:	f05f 0003 	movs.w	r0, #3
    a400:	f7ff fbcc 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    a404:	b124      	cbz	r4, a410 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f8>
    a406:	2100      	movs	r1, #0
    a408:	f240 7069 	movw	r0, #1897	; 0x769
    a40c:	f3af 8000 	nop.w
    a410:	4878      	ldr	r0, [pc, #480]	; (a5f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3dc>)
    a412:	2800      	cmp	r0, #0
    a414:	bf18      	it	ne
    a416:	f3af 8000 	nopne.w
    a41a:	f3ef 8910 	mrs	r9, PRIMASK
    a41e:	b672      	cpsid	i
    a420:	b124      	cbz	r4, a42c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x214>
    a422:	2100      	movs	r1, #0
    a424:	f240 706f 	movw	r0, #1903	; 0x76f
    a428:	f3af 8000 	nop.w
    a42c:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a430:	f88d 0008 	strb.w	r0, [sp, #8]
    a434:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a438:	2800      	cmp	r0, #0
    a43a:	f47f af39 	bne.w	a2b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a43e:	b124      	cbz	r4, a44a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x232>
    a440:	2100      	movs	r1, #0
    a442:	f240 7077 	movw	r0, #1911	; 0x777
    a446:	f3af 8000 	nop.w
    a44a:	af09      	add	r7, sp, #36	; 0x24
    a44c:	9800      	ldr	r0, [sp, #0]
    a44e:	e897 100e 	ldmia.w	r7, {r1, r2, r3, ip}
    a452:	f100 0708 	add.w	r7, r0, #8
    a456:	f1b8 0f00 	cmp.w	r8, #0
    a45a:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    a45e:	990d      	ldr	r1, [sp, #52]	; 0x34
    a460:	6181      	str	r1, [r0, #24]
    a462:	d051      	beq.n	a508 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    a464:	b124      	cbz	r4, a470 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    a466:	2100      	movs	r1, #0
    a468:	f240 7084 	movw	r0, #1924	; 0x784
    a46c:	f3af 8000 	nop.w
    a470:	f1bb 0f00 	cmp.w	fp, #0
    a474:	d139      	bne.n	a4ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a476:	e01f      	b.n	a4b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a0>
    a478:	4632      	mov	r2, r6
    a47a:	4651      	mov	r1, sl
    a47c:	2004      	movs	r0, #4
    a47e:	f7ff fb8d 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    a482:	f04f 0801 	mov.w	r8, #1
    a486:	e7bd      	b.n	a404 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    a488:	4632      	mov	r2, r6
    a48a:	4651      	mov	r1, sl
    a48c:	2004      	movs	r0, #4
    a48e:	e7b7      	b.n	a400 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e8>
    a490:	2920      	cmp	r1, #32
    a492:	bf19      	ittee	ne
    a494:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    a498:	7840      	ldrbne	r0, [r0, #1]
    a49a:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    a49e:	4428      	addeq	r0, r5
    a4a0:	bf08      	it	eq
    a4a2:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    a4a6:	e79b      	b.n	a3e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    a4a8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    a4ac:	4429      	add	r1, r5
    a4ae:	f881 a020 	strb.w	sl, [r1, #32]
    a4b2:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    a4b6:	e79f      	b.n	a3f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e0>
    a4b8:	9811      	ldr	r0, [sp, #68]	; 0x44
    a4ba:	f010 0fff 	tst.w	r0, #255	; 0xff
    a4be:	d014      	beq.n	a4ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a4c0:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    a4c4:	2820      	cmp	r0, #32
    a4c6:	d110      	bne.n	a4ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a4c8:	b124      	cbz	r4, a4d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2bc>
    a4ca:	2100      	movs	r1, #0
    a4cc:	f240 7089 	movw	r0, #1929	; 0x789
    a4d0:	f3af 8000 	nop.w
    a4d4:	4631      	mov	r1, r6
    a4d6:	2002      	movs	r0, #2
    a4d8:	f7ff fb92 	bl	9c00 <MPSL_IRQ_RADIO_Handler+0xf34>
    a4dc:	9010      	str	r0, [sp, #64]	; 0x40
    a4de:	b920      	cbnz	r0, a4ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a4e0:	9816      	ldr	r0, [sp, #88]	; 0x58
    a4e2:	7800      	ldrb	r0, [r0, #0]
    a4e4:	b1e8      	cbz	r0, a522 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30a>
    a4e6:	2801      	cmp	r0, #1
    a4e8:	d02a      	beq.n	a540 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    a4ea:	b124      	cbz	r4, a4f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    a4ec:	2100      	movs	r1, #0
    a4ee:	f240 70a6 	movw	r0, #1958	; 0x7a6
    a4f2:	f3af 8000 	nop.w
    a4f6:	20ff      	movs	r0, #255	; 0xff
    a4f8:	f1bb 0f00 	cmp.w	fp, #0
    a4fc:	bf18      	it	ne
    a4fe:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
    a502:	d026      	beq.n	a552 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33a>
    a504:	f04f 0801 	mov.w	r8, #1
    a508:	b124      	cbz	r4, a514 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
    a50a:	2100      	movs	r1, #0
    a50c:	f240 70b7 	movw	r0, #1975	; 0x7b7
    a510:	f3af 8000 	nop.w
    a514:	9810      	ldr	r0, [sp, #64]	; 0x40
    a516:	4e38      	ldr	r6, [pc, #224]	; (a5f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e0>)
    a518:	2802      	cmp	r0, #2
    a51a:	d023      	beq.n	a564 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x34c>
    a51c:	2801      	cmp	r0, #1
    a51e:	d029      	beq.n	a574 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
    a520:	e02d      	b.n	a57e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    a522:	b124      	cbz	r4, a52e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x316>
    a524:	2100      	movs	r1, #0
    a526:	f240 7091 	movw	r0, #1937	; 0x791
    a52a:	f3af 8000 	nop.w
    a52e:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    a532:	4651      	mov	r1, sl
    a534:	2004      	movs	r0, #4
    a536:	f7ff fb31 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    a53a:	f04f 0801 	mov.w	r8, #1
    a53e:	e7e3      	b.n	a508 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    a540:	2c00      	cmp	r4, #0
    a542:	f43f aeb5 	beq.w	a2b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a546:	2100      	movs	r1, #0
    a548:	f240 709c 	movw	r0, #1948	; 0x79c
    a54c:	f3af 8000 	nop.w
    a550:	e6ae      	b.n	a2b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a552:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    a556:	2101      	movs	r1, #1
    a558:	4391      	bics	r1, r2
    a55a:	f885 1031 	strb.w	r1, [r5, #49]	; 0x31
    a55e:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    a562:	e7cf      	b.n	a504 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ec>
    a564:	68a8      	ldr	r0, [r5, #8]
    a566:	990e      	ldr	r1, [sp, #56]	; 0x38
    a568:	1a40      	subs	r0, r0, r1
    a56a:	f005 feed 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a56e:	6871      	ldr	r1, [r6, #4]
    a570:	b921      	cbnz	r1, a57c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x364>
    a572:	e004      	b.n	a57e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    a574:	6871      	ldr	r1, [r6, #4]
    a576:	f04f 30ff 	mov.w	r0, #4294967295
    a57a:	b101      	cbz	r1, a57e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    a57c:	4788      	blx	r1
    a57e:	f1b9 0f00 	cmp.w	r9, #0
    a582:	d024      	beq.n	a5ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b6>
    a584:	b124      	cbz	r4, a590 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>
    a586:	2100      	movs	r1, #0
    a588:	f240 70c7 	movw	r0, #1991	; 0x7c7
    a58c:	f3af 8000 	nop.w
    a590:	f1b8 0f00 	cmp.w	r8, #0
    a594:	d011      	beq.n	a5ba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a2>
    a596:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    a59a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    a59e:	4428      	add	r0, r5
    a5a0:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    a5a4:	2820      	cmp	r0, #32
    a5a6:	d008      	beq.n	a5ba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a2>
    a5a8:	b124      	cbz	r4, a5b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39c>
    a5aa:	2100      	movs	r1, #0
    a5ac:	f240 70ce 	movw	r0, #1998	; 0x7ce
    a5b0:	f3af 8000 	nop.w
    a5b4:	7870      	ldrb	r0, [r6, #1]
    a5b6:	f001 ffa3 	bl	c500 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a5ba:	b124      	cbz	r4, a5c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ae>
    a5bc:	2100      	movs	r1, #0
    a5be:	f240 70d3 	movw	r0, #2003	; 0x7d3
    a5c2:	f3af 8000 	nop.w
    a5c6:	b017      	add	sp, #92	; 0x5c
    a5c8:	4640      	mov	r0, r8
    a5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a5ce:	4807      	ldr	r0, [pc, #28]	; (a5ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    a5d0:	2800      	cmp	r0, #0
    a5d2:	bf18      	it	ne
    a5d4:	f3af 8000 	nopne.w
    a5d8:	b662      	cpsie	i
    a5da:	e7d3      	b.n	a584 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36c>
    a5dc:	e000ed04 	.word	0xe000ed04
    a5e0:	20001494 	.word	0x20001494
    a5e4:	00000000 	.word	0x00000000
    a5e8:	20001094 	.word	0x20001094
    a5ec:	00000000 	.word	0x00000000
    a5f0:	20001414 	.word	0x20001414
    a5f4:	00000000 	.word	0x00000000
    a5f8:	200002d0 	.word	0x200002d0

0000a5fc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    a5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a600:	4606      	mov	r6, r0
    a602:	7800      	ldrb	r0, [r0, #0]
    a604:	b08d      	sub	sp, #52	; 0x34
    a606:	b118      	cbz	r0, a610 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    a608:	b00d      	add	sp, #52	; 0x34
    a60a:	2000      	movs	r0, #0
    a60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a610:	488c      	ldr	r0, [pc, #560]	; (a844 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>)
    a612:	6800      	ldr	r0, [r0, #0]
    a614:	05c0      	lsls	r0, r0, #23
    a616:	0dc0      	lsrs	r0, r0, #23
    a618:	d00e      	beq.n	a638 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    a61a:	3810      	subs	r0, #16
    a61c:	b240      	sxtb	r0, r0
    a61e:	2800      	cmp	r0, #0
    a620:	bfb8      	it	lt
    a622:	f000 000f 	andlt.w	r0, r0, #15
    a626:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a62a:	bfac      	ite	ge
    a62c:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a630:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a634:	0940      	lsrs	r0, r0, #5
    a636:	d0e7      	beq.n	a608 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    a638:	4d83      	ldr	r5, [pc, #524]	; (a848 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24c>)
    a63a:	4c84      	ldr	r4, [pc, #528]	; (a84c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x250>)
    a63c:	f04f 0b01 	mov.w	fp, #1
    a640:	2700      	movs	r7, #0
    a642:	b125      	cbz	r5, a64e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    a644:	2100      	movs	r1, #0
    a646:	f240 50e5 	movw	r0, #1509	; 0x5e5
    a64a:	f3af 8000 	nop.w
    a64e:	f894 a031 	ldrb.w	sl, [r4, #49]	; 0x31
    a652:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    a656:	f04f 0900 	mov.w	r9, #0
    a65a:	b125      	cbz	r5, a666 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x6a>
    a65c:	2100      	movs	r1, #0
    a65e:	f240 50ea 	movw	r0, #1514	; 0x5ea
    a662:	f3af 8000 	nop.w
    a666:	487a      	ldr	r0, [pc, #488]	; (a850 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>)
    a668:	ea2b 080a 	bic.w	r8, fp, sl
    a66c:	eb00 118a 	add.w	r1, r0, sl, lsl #6
    a670:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    a674:	2240      	movs	r2, #64	; 0x40
    a676:	f005 fffa 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a67a:	b125      	cbz	r5, a686 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x8a>
    a67c:	2100      	movs	r1, #0
    a67e:	f240 505e 	movw	r0, #1374	; 0x55e
    a682:	f3af 8000 	nop.w
    a686:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    a68a:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    a68e:	4421      	add	r1, r4
    a690:	4420      	add	r0, r4
    a692:	8c0a      	ldrh	r2, [r1, #32]
    a694:	8402      	strh	r2, [r0, #32]
    a696:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    a69a:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    a69e:	b125      	cbz	r5, a6aa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xae>
    a6a0:	2100      	movs	r1, #0
    a6a2:	f240 5062 	movw	r0, #1378	; 0x562
    a6a6:	f3af 8000 	nop.w
    a6aa:	b125      	cbz	r5, a6b6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xba>
    a6ac:	2100      	movs	r1, #0
    a6ae:	f240 50ef 	movw	r0, #1519	; 0x5ef
    a6b2:	f3af 8000 	nop.w
    a6b6:	a808      	add	r0, sp, #32
    a6b8:	f000 ff08 	bl	b4cc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    a6bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    a6c0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    a6c4:	4643      	mov	r3, r8
    a6c6:	466a      	mov	r2, sp
    a6c8:	4631      	mov	r1, r6
    a6ca:	a80a      	add	r0, sp, #40	; 0x28
    a6cc:	f7ff f852 	bl	9774 <MPSL_IRQ_RADIO_Handler+0xaa8>
    a6d0:	b125      	cbz	r5, a6dc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe0>
    a6d2:	2100      	movs	r1, #0
    a6d4:	f240 50f5 	movw	r0, #1525	; 0x5f5
    a6d8:	f3af 8000 	nop.w
    a6dc:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a6e0:	2820      	cmp	r0, #32
    a6e2:	d01a      	beq.n	a71a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    a6e4:	68e0      	ldr	r0, [r4, #12]
    a6e6:	9900      	ldr	r1, [sp, #0]
    a6e8:	1a09      	subs	r1, r1, r0
    a6ea:	0209      	lsls	r1, r1, #8
    a6ec:	17ca      	asrs	r2, r1, #31
    a6ee:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    a6f2:	1209      	asrs	r1, r1, #8
    a6f4:	d511      	bpl.n	a71a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    a6f6:	9900      	ldr	r1, [sp, #0]
    a6f8:	4281      	cmp	r1, r0
    a6fa:	d902      	bls.n	a702 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x106>
    a6fc:	9902      	ldr	r1, [sp, #8]
    a6fe:	1c49      	adds	r1, r1, #1
    a700:	9102      	str	r1, [sp, #8]
    a702:	e9dd 2100 	ldrd	r2, r1, [sp]
    a706:	1a89      	subs	r1, r1, r2
    a708:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    a70c:	4408      	add	r0, r1
    a70e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a712:	e9cd 2000 	strd	r2, r0, [sp]
    a716:	f04f 0901 	mov.w	r9, #1
    a71a:	b125      	cbz	r5, a726 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12a>
    a71c:	2100      	movs	r1, #0
    a71e:	f240 50ff 	movw	r0, #1535	; 0x5ff
    a722:	f3af 8000 	nop.w
    a726:	9900      	ldr	r1, [sp, #0]
    a728:	980a      	ldr	r0, [sp, #40]	; 0x28
    a72a:	9a01      	ldr	r2, [sp, #4]
    a72c:	1a09      	subs	r1, r1, r0
    a72e:	1a10      	subs	r0, r2, r0
    a730:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a734:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a738:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    a73c:	bf98      	it	ls
    a73e:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    a742:	d809      	bhi.n	a758 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x15c>
    a744:	4643      	mov	r3, r8
    a746:	4669      	mov	r1, sp
    a748:	4842      	ldr	r0, [pc, #264]	; (a854 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x258>)
    a74a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a74c:	f7fe fb1a 	bl	8d84 <MPSL_IRQ_RADIO_Handler+0xb8>
    a750:	ea59 0000 	orrs.w	r0, r9, r0
    a754:	d129      	bne.n	a7aa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ae>
    a756:	e042      	b.n	a7de <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e2>
    a758:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a75a:	f8bd a00e 	ldrh.w	sl, [sp, #14]
    a75e:	9002      	str	r0, [sp, #8]
    a760:	aa09      	add	r2, sp, #36	; 0x24
    a762:	a907      	add	r1, sp, #28
    a764:	4650      	mov	r0, sl
    a766:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    a76a:	f000 fd3f 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a76e:	f001 fa7b 	bl	bc68 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    a772:	f000 fd1f 	bl	b1b4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a776:	4681      	mov	r9, r0
    a778:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a77c:	2820      	cmp	r0, #32
    a77e:	d03b      	beq.n	a7f8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    a780:	68e0      	ldr	r0, [r4, #12]
    a782:	1d40      	adds	r0, r0, #5
    a784:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a788:	9900      	ldr	r1, [sp, #0]
    a78a:	4281      	cmp	r1, r0
    a78c:	d902      	bls.n	a794 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x198>
    a78e:	9902      	ldr	r1, [sp, #8]
    a790:	1c49      	adds	r1, r1, #1
    a792:	9102      	str	r1, [sp, #8]
    a794:	e9dd 2100 	ldrd	r2, r1, [sp]
    a798:	1a89      	subs	r1, r1, r2
    a79a:	9000      	str	r0, [sp, #0]
    a79c:	4408      	add	r0, r1
    a79e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a7a2:	9001      	str	r0, [sp, #4]
    a7a4:	201f      	movs	r0, #31
    a7a6:	f88d 000c 	strb.w	r0, [sp, #12]
    a7aa:	9800      	ldr	r0, [sp, #0]
    a7ac:	f005 fdcc 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a7b0:	1c41      	adds	r1, r0, #1
    a7b2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    a7b6:	f89d 200c 	ldrb.w	r2, [sp, #12]
    a7ba:	4410      	add	r0, r2
    a7bc:	4408      	add	r0, r1
    a7be:	e9c6 0704 	strd	r0, r7, [r6, #16]
    a7c2:	b125      	cbz	r5, a7ce <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d2>
    a7c4:	2100      	movs	r1, #0
    a7c6:	f240 601a 	movw	r0, #1562	; 0x61a
    a7ca:	f3af 8000 	nop.w
    a7ce:	e9d6 1004 	ldrd	r1, r0, [r6, #16]
    a7d2:	4a21      	ldr	r2, [pc, #132]	; (a858 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25c>)
    a7d4:	9b02      	ldr	r3, [sp, #8]
    a7d6:	fbe3 1002 	umlal	r1, r0, r3, r2
    a7da:	e9c6 1004 	strd	r1, r0, [r6, #16]
    a7de:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    a7e2:	f88d 0014 	strb.w	r0, [sp, #20]
    a7e6:	f89d 0014 	ldrb.w	r0, [sp, #20]
    a7ea:	2800      	cmp	r0, #0
    a7ec:	f47f af29 	bne.w	a642 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x46>
    a7f0:	b00d      	add	sp, #52	; 0x34
    a7f2:	2001      	movs	r0, #1
    a7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a7f8:	f108 0809 	add.w	r8, r8, #9
    a7fc:	f1ba 0f00 	cmp.w	sl, #0
    a800:	d016      	beq.n	a830 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    a802:	f001 fd31 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a806:	b998      	cbnz	r0, a830 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    a808:	f001 fc06 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    a80c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    a810:	bf08      	it	eq
    a812:	200d      	moveq	r0, #13
    a814:	d00b      	beq.n	a82e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    a816:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    a81a:	3856      	subs	r0, #86	; 0x56
    a81c:	bf08      	it	eq
    a81e:	201c      	moveq	r0, #28
    a820:	d005      	beq.n	a82e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    a822:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    a826:	389f      	subs	r0, #159	; 0x9f
    a828:	bf14      	ite	ne
    a82a:	4638      	movne	r0, r7
    a82c:	2032      	moveq	r0, #50	; 0x32
    a82e:	4480      	add	r8, r0
    a830:	9807      	ldr	r0, [sp, #28]
    a832:	4581      	cmp	r9, r0
    a834:	bf84      	itt	hi
    a836:	eba9 0000 	subhi.w	r0, r9, r0
    a83a:	4480      	addhi	r8, r0
    a83c:	f028 407f 	bic.w	r0, r8, #4278190080	; 0xff000000
    a840:	e7a2      	b.n	a788 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x18c>
    a842:	0000      	.short	0x0000
    a844:	e000ed04 	.word	0xe000ed04
    a848:	00000000 	.word	0x00000000
    a84c:	20001494 	.word	0x20001494
    a850:	20001414 	.word	0x20001414
    a854:	0f424000 	.word	0x0f424000
    a858:	1e848000 	.word	0x1e848000

0000a85c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    a85c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a860:	4d92      	ldr	r5, [pc, #584]	; (aaac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x250>)
    a862:	b08c      	sub	sp, #48	; 0x30
    a864:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    a868:	2000      	movs	r0, #0
    a86a:	9008      	str	r0, [sp, #32]
    a86c:	9006      	str	r0, [sp, #24]
    a86e:	2001      	movs	r0, #1
    a870:	4c8f      	ldr	r4, [pc, #572]	; (aab0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>)
    a872:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    a876:	f04f 0800 	mov.w	r8, #0
    a87a:	4607      	mov	r7, r0
    a87c:	9007      	str	r0, [sp, #28]
    a87e:	b124      	cbz	r4, a88a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    a880:	2100      	movs	r1, #0
    a882:	f240 70e4 	movw	r0, #2020	; 0x7e4
    a886:	f3af 8000 	nop.w
    a88a:	9807      	ldr	r0, [sp, #28]
    a88c:	2800      	cmp	r0, #0
    a88e:	d03c      	beq.n	a90a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    a890:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    a894:	b124      	cbz	r4, a8a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    a896:	2100      	movs	r1, #0
    a898:	f240 70e9 	movw	r0, #2025	; 0x7e9
    a89c:	f3af 8000 	nop.w
    a8a0:	f895 a031 	ldrb.w	sl, [r5, #49]	; 0x31
    a8a4:	2240      	movs	r2, #64	; 0x40
    a8a6:	ea27 060a 	bic.w	r6, r7, sl
    a8aa:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    a8ae:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    a8b2:	4683      	mov	fp, r0
    a8b4:	f005 fedb 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a8b8:	b124      	cbz	r4, a8c4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    a8ba:	2100      	movs	r1, #0
    a8bc:	f240 505e 	movw	r0, #1374	; 0x55e
    a8c0:	f3af 8000 	nop.w
    a8c4:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a8c8:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    a8cc:	4428      	add	r0, r5
    a8ce:	4429      	add	r1, r5
    a8d0:	9000      	str	r0, [sp, #0]
    a8d2:	8c0a      	ldrh	r2, [r1, #32]
    a8d4:	8402      	strh	r2, [r0, #32]
    a8d6:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    a8da:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    a8de:	b124      	cbz	r4, a8ea <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    a8e0:	2100      	movs	r1, #0
    a8e2:	f240 5062 	movw	r0, #1378	; 0x562
    a8e6:	f3af 8000 	nop.w
    a8ea:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a8ee:	f88d 0008 	strb.w	r0, [sp, #8]
    a8f2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a8f6:	b178      	cbz	r0, a918 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    a8f8:	2c00      	cmp	r4, #0
    a8fa:	bf1c      	itt	ne
    a8fc:	2100      	movne	r1, #0
    a8fe:	f240 70ef 	movwne	r0, #2031	; 0x7ef
    a902:	d0bc      	beq.n	a87e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a904:	f3af 8000 	nop.w
    a908:	e7b9      	b.n	a87e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a90a:	486a      	ldr	r0, [pc, #424]	; (aab4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    a90c:	2800      	cmp	r0, #0
    a90e:	bf18      	it	ne
    a910:	f3af 8000 	nopne.w
    a914:	b662      	cpsie	i
    a916:	e7bb      	b.n	a890 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    a918:	b124      	cbz	r4, a924 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    a91a:	2100      	movs	r1, #0
    a91c:	f240 70f3 	movw	r0, #2035	; 0x7f3
    a920:	f3af 8000 	nop.w
    a924:	980c      	ldr	r0, [sp, #48]	; 0x30
    a926:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    a92a:	2803      	cmp	r0, #3
    a92c:	d17e      	bne.n	aa2c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    a92e:	9a00      	ldr	r2, [sp, #0]
    a930:	990c      	ldr	r1, [sp, #48]	; 0x30
    a932:	f892 0020 	ldrb.w	r0, [r2, #32]
    a936:	4288      	cmp	r0, r1
    a938:	bf14      	ite	ne
    a93a:	f04f 0a00 	movne.w	sl, #0
    a93e:	f04f 0a01 	moveq.w	sl, #1
    a942:	f102 0c20 	add.w	ip, r2, #32
    a946:	4683      	mov	fp, r0
    a948:	2220      	movs	r2, #32
    a94a:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    a94e:	e003      	b.n	a958 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    a950:	4602      	mov	r2, r0
    a952:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    a956:	7840      	ldrb	r0, [r0, #1]
    a958:	4288      	cmp	r0, r1
    a95a:	d002      	beq.n	a962 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    a95c:	2820      	cmp	r0, #32
    a95e:	d00a      	beq.n	a976 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    a960:	e7f6      	b.n	a950 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    a962:	2820      	cmp	r0, #32
    a964:	d007      	beq.n	a976 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    a966:	4583      	cmp	fp, r0
    a968:	d107      	bne.n	a97a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    a96a:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    a96e:	7840      	ldrb	r0, [r0, #1]
    a970:	f88c 0000 	strb.w	r0, [ip]
    a974:	e007      	b.n	a986 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    a976:	4640      	mov	r0, r8
    a978:	e00c      	b.n	a994 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    a97a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    a97e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    a982:	7840      	ldrb	r0, [r0, #1]
    a984:	7048      	strb	r0, [r1, #1]
    a986:	b124      	cbz	r4, a992 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    a988:	2100      	movs	r1, #0
    a98a:	f240 40c9 	movw	r0, #1225	; 0x4c9
    a98e:	f3af 8000 	nop.w
    a992:	4638      	mov	r0, r7
    a994:	46c3      	mov	fp, r8
    a996:	ea10 0f0a 	tst.w	r0, sl
    a99a:	bf18      	it	ne
    a99c:	46bb      	movne	fp, r7
    a99e:	2800      	cmp	r0, #0
    a9a0:	d04e      	beq.n	aa40 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    a9a2:	b124      	cbz	r4, a9ae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    a9a4:	2100      	movs	r1, #0
    a9a6:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    a9aa:	f3af 8000 	nop.w
    a9ae:	4632      	mov	r2, r6
    a9b0:	2001      	movs	r0, #1
    a9b2:	990c      	ldr	r1, [sp, #48]	; 0x30
    a9b4:	f7ff f8f2 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    a9b8:	b124      	cbz	r4, a9c4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    a9ba:	2100      	movs	r1, #0
    a9bc:	f640 0001 	movw	r0, #2049	; 0x801
    a9c0:	f3af 8000 	nop.w
    a9c4:	483c      	ldr	r0, [pc, #240]	; (aab8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25c>)
    a9c6:	2800      	cmp	r0, #0
    a9c8:	bf18      	it	ne
    a9ca:	f3af 8000 	nopne.w
    a9ce:	f3ef 8010 	mrs	r0, PRIMASK
    a9d2:	b672      	cpsid	i
    a9d4:	9007      	str	r0, [sp, #28]
    a9d6:	b124      	cbz	r4, a9e2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    a9d8:	2100      	movs	r1, #0
    a9da:	f640 0006 	movw	r0, #2054	; 0x806
    a9de:	f3af 8000 	nop.w
    a9e2:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a9e6:	f88d 0008 	strb.w	r0, [sp, #8]
    a9ea:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a9ee:	b138      	cbz	r0, aa00 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    a9f0:	2c00      	cmp	r4, #0
    a9f2:	bf1c      	itt	ne
    a9f4:	2100      	movne	r1, #0
    a9f6:	f640 000a 	movwne	r0, #2058	; 0x80a
    a9fa:	f43f af40 	beq.w	a87e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a9fe:	e781      	b.n	a904 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    aa00:	f1bb 0f00 	cmp.w	fp, #0
    aa04:	d009      	beq.n	aa1a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    aa06:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    aa0a:	2820      	cmp	r0, #32
    aa0c:	d105      	bne.n	aa1a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    aa0e:	4631      	mov	r1, r6
    aa10:	2002      	movs	r0, #2
    aa12:	f7ff f8f5 	bl	9c00 <MPSL_IRQ_RADIO_Handler+0xf34>
    aa16:	9006      	str	r0, [sp, #24]
    aa18:	b1f8      	cbz	r0, aa5a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    aa1a:	b124      	cbz	r4, aa26 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    aa1c:	2100      	movs	r1, #0
    aa1e:	f640 001e 	movw	r0, #2078	; 0x81e
    aa22:	f3af 8000 	nop.w
    aa26:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    aa2a:	e000      	b.n	aa2e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    aa2c:	e008      	b.n	aa40 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    aa2e:	ea27 0000 	bic.w	r0, r7, r0
    aa32:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    aa36:	20ff      	movs	r0, #255	; 0xff
    aa38:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    aa3c:	2001      	movs	r0, #1
    aa3e:	9008      	str	r0, [sp, #32]
    aa40:	b124      	cbz	r4, aa4c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    aa42:	2100      	movs	r1, #0
    aa44:	f640 0027 	movw	r0, #2087	; 0x827
    aa48:	f3af 8000 	nop.w
    aa4c:	9806      	ldr	r0, [sp, #24]
    aa4e:	4e1b      	ldr	r6, [pc, #108]	; (aabc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    aa50:	2802      	cmp	r0, #2
    aa52:	d009      	beq.n	aa68 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    aa54:	2801      	cmp	r0, #1
    aa56:	d010      	beq.n	aa7a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21e>
    aa58:	e014      	b.n	aa84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    aa5a:	b19c      	cbz	r4, aa84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    aa5c:	2100      	movs	r1, #0
    aa5e:	f640 0019 	movw	r0, #2073	; 0x819
    aa62:	f3af 8000 	nop.w
    aa66:	e7ec      	b.n	aa42 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    aa68:	f000 fd2a 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    aa6c:	68a9      	ldr	r1, [r5, #8]
    aa6e:	1a08      	subs	r0, r1, r0
    aa70:	f005 fc6a 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    aa74:	6871      	ldr	r1, [r6, #4]
    aa76:	b921      	cbnz	r1, aa82 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x226>
    aa78:	e004      	b.n	aa84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    aa7a:	6871      	ldr	r1, [r6, #4]
    aa7c:	f04f 30ff 	mov.w	r0, #4294967295
    aa80:	b101      	cbz	r1, aa84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    aa82:	4788      	blx	r1
    aa84:	9807      	ldr	r0, [sp, #28]
    aa86:	b148      	cbz	r0, aa9c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x240>
    aa88:	b124      	cbz	r4, aa94 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x238>
    aa8a:	2100      	movs	r1, #0
    aa8c:	f640 003c 	movw	r0, #2108	; 0x83c
    aa90:	f3af 8000 	nop.w
    aa94:	9808      	ldr	r0, [sp, #32]
    aa96:	b00d      	add	sp, #52	; 0x34
    aa98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aa9c:	4805      	ldr	r0, [pc, #20]	; (aab4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    aa9e:	2800      	cmp	r0, #0
    aaa0:	bf18      	it	ne
    aaa2:	f3af 8000 	nopne.w
    aaa6:	b662      	cpsie	i
    aaa8:	e7ee      	b.n	aa88 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>
    aaaa:	0000      	.short	0x0000
    aaac:	20001494 	.word	0x20001494
	...
    aabc:	200002d0 	.word	0x200002d0

0000aac0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    aac0:	b510      	push	{r4, lr}
    aac2:	2820      	cmp	r0, #32
    aac4:	d211      	bcs.n	aaea <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    aac6:	490e      	ldr	r1, [pc, #56]	; (ab00 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    aac8:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    aacc:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    aad0:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    aad4:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    aad8:	b13b      	cbz	r3, aaea <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    aada:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    aade:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    aae2:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    aae6:	2a01      	cmp	r2, #1
    aae8:	d001      	beq.n	aaee <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    aaea:	2000      	movs	r0, #0
    aaec:	bd10      	pop	{r4, pc}
    aaee:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
    aaf2:	4601      	mov	r1, r0
    aaf4:	2000      	movs	r0, #0
    aaf6:	f7ff f851 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    aafa:	2001      	movs	r0, #1
    aafc:	bd10      	pop	{r4, pc}
    aafe:	0000      	.short	0x0000
    ab00:	20001494 	.word	0x20001494

0000ab04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    ab04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab08:	4e86      	ldr	r6, [pc, #536]	; (ad24 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    ab0a:	4680      	mov	r8, r0
    ab0c:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    ab10:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    ab14:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    ab18:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    ab1c:	2800      	cmp	r0, #0
    ab1e:	d071      	beq.n	ac04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    ab20:	f896 9031 	ldrb.w	r9, [r6, #49]	; 0x31
    ab24:	4d80      	ldr	r5, [pc, #512]	; (ad28 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    ab26:	b125      	cbz	r5, ab32 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    ab28:	2100      	movs	r1, #0
    ab2a:	f640 30b9 	movw	r0, #3001	; 0xbb9
    ab2e:	f3af 8000 	nop.w
    ab32:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    ab36:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    ab3a:	2801      	cmp	r0, #1
    ab3c:	d018      	beq.n	ab70 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    ab3e:	b2c0      	uxtb	r0, r0
    ab40:	2804      	cmp	r0, #4
    ab42:	bf1c      	itt	ne
    ab44:	2805      	cmpne	r0, #5
    ab46:	2806      	cmpne	r0, #6
    ab48:	d061      	beq.n	ac0e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    ab4a:	b12d      	cbz	r5, ab58 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    ab4c:	f04f 0100 	mov.w	r1, #0
    ab50:	f640 30c5 	movw	r0, #3013	; 0xbc5
    ab54:	f3af 8000 	nop.w
    ab58:	f005 fd2c 	bl	105b4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    ab5c:	b125      	cbz	r5, ab68 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    ab5e:	2100      	movs	r1, #0
    ab60:	f640 30c9 	movw	r0, #3017	; 0xbc9
    ab64:	f3af 8000 	nop.w
    ab68:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    ab6c:	2801      	cmp	r0, #1
    ab6e:	d1e6      	bne.n	ab3e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    ab70:	2401      	movs	r4, #1
    ab72:	b125      	cbz	r5, ab7e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    ab74:	2100      	movs	r1, #0
    ab76:	f44f 603d 	mov.w	r0, #3024	; 0xbd0
    ab7a:	f3af 8000 	nop.w
    ab7e:	2c00      	cmp	r4, #0
    ab80:	d04b      	beq.n	ac1a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    ab82:	2000      	movs	r0, #0
    ab84:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    ab88:	b125      	cbz	r5, ab94 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    ab8a:	2100      	movs	r1, #0
    ab8c:	f640 30d5 	movw	r0, #3029	; 0xbd5
    ab90:	f3af 8000 	nop.w
    ab94:	f896 b031 	ldrb.w	fp, [r6, #49]	; 0x31
    ab98:	2001      	movs	r0, #1
    ab9a:	ea20 090b 	bic.w	r9, r0, fp
    ab9e:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    aba2:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    aba6:	2240      	movs	r2, #64	; 0x40
    aba8:	f005 fd61 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    abac:	b125      	cbz	r5, abb8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    abae:	2100      	movs	r1, #0
    abb0:	f240 505e 	movw	r0, #1374	; 0x55e
    abb4:	f3af 8000 	nop.w
    abb8:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    abbc:	eb00 0a06 	add.w	sl, r0, r6
    abc0:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    abc4:	4430      	add	r0, r6
    abc6:	8c01      	ldrh	r1, [r0, #32]
    abc8:	f8aa 1020 	strh.w	r1, [sl, #32]
    abcc:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    abd0:	f88a 0022 	strb.w	r0, [sl, #34]	; 0x22
    abd4:	b125      	cbz	r5, abe0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    abd6:	2100      	movs	r1, #0
    abd8:	f240 5062 	movw	r0, #1378	; 0x562
    abdc:	f3af 8000 	nop.w
    abe0:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    abe4:	f88d 0000 	strb.w	r0, [sp]
    abe8:	f89d 0000 	ldrb.w	r0, [sp]
    abec:	b1e0      	cbz	r0, ac28 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    abee:	2d00      	cmp	r5, #0
    abf0:	bf1c      	itt	ne
    abf2:	2100      	movne	r1, #0
    abf4:	f640 30db 	movwne	r0, #3035	; 0xbdb
    abf8:	d0bb      	beq.n	ab72 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    abfa:	bf00      	nop
    abfc:	f3af 8000 	nop.w
    ac00:	e7b7      	b.n	ab72 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    ac02:	e7ff      	b.n	ac04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    ac04:	f44f 613b 	mov.w	r1, #2992	; 0xbb0
    ac08:	2070      	movs	r0, #112	; 0x70
    ac0a:	f001 fba5 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ac0e:	464a      	mov	r2, r9
    ac10:	4641      	mov	r1, r8
    ac12:	2001      	movs	r0, #1
    ac14:	f7fe ffc2 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    ac18:	e7a0      	b.n	ab5c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    ac1a:	4844      	ldr	r0, [pc, #272]	; (ad2c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    ac1c:	2800      	cmp	r0, #0
    ac1e:	bf18      	it	ne
    ac20:	f3af 8000 	nopne.w
    ac24:	b662      	cpsie	i
    ac26:	e7ac      	b.n	ab82 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    ac28:	b125      	cbz	r5, ac34 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    ac2a:	2100      	movs	r1, #0
    ac2c:	f640 30df 	movw	r0, #3039	; 0xbdf
    ac30:	f3af 8000 	nop.w
    ac34:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    ac38:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    ac3c:	4640      	mov	r0, r8
    ac3e:	461c      	mov	r4, r3
    ac40:	f04f 0b20 	mov.w	fp, #32
    ac44:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    ac48:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    ac4c:	e004      	b.n	ac58 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    ac4e:	46a3      	mov	fp, r4
    ac50:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    ac54:	f89c 4001 	ldrb.w	r4, [ip, #1]
    ac58:	4284      	cmp	r4, r0
    ac5a:	d002      	beq.n	ac62 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    ac5c:	2c20      	cmp	r4, #32
    ac5e:	d02b      	beq.n	acb8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    ac60:	e7f5      	b.n	ac4e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    ac62:	2c20      	cmp	r4, #32
    ac64:	d028      	beq.n	acb8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    ac66:	42a3      	cmp	r3, r4
    ac68:	d104      	bne.n	ac74 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    ac6a:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    ac6e:	7840      	ldrb	r0, [r0, #1]
    ac70:	7008      	strb	r0, [r1, #0]
    ac72:	e005      	b.n	ac80 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    ac74:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    ac78:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    ac7c:	7840      	ldrb	r0, [r0, #1]
    ac7e:	7048      	strb	r0, [r1, #1]
    ac80:	f1ba 0f00 	cmp.w	sl, #0
    ac84:	d011      	beq.n	acaa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    ac86:	b125      	cbz	r5, ac92 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    ac88:	2100      	movs	r1, #0
    ac8a:	f240 40c1 	movw	r0, #1217	; 0x4c1
    ac8e:	f3af 8000 	nop.w
    ac92:	f89a 0000 	ldrb.w	r0, [sl]
    ac96:	42a0      	cmp	r0, r4
    ac98:	d107      	bne.n	acaa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    ac9a:	b125      	cbz	r5, aca6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    ac9c:	2100      	movs	r1, #0
    ac9e:	f240 40c4 	movw	r0, #1220	; 0x4c4
    aca2:	f3af 8000 	nop.w
    aca6:	f88a b000 	strb.w	fp, [sl]
    acaa:	b15d      	cbz	r5, acc4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    acac:	2100      	movs	r1, #0
    acae:	f240 40c9 	movw	r0, #1225	; 0x4c9
    acb2:	f3af 8000 	nop.w
    acb6:	e000      	b.n	acba <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    acb8:	b125      	cbz	r5, acc4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    acba:	2100      	movs	r1, #0
    acbc:	f640 30e3 	movw	r0, #3043	; 0xbe3
    acc0:	f3af 8000 	nop.w
    acc4:	481a      	ldr	r0, [pc, #104]	; (ad30 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    acc6:	2800      	cmp	r0, #0
    acc8:	bf18      	it	ne
    acca:	f3af 8000 	nopne.w
    acce:	f3ef 8410 	mrs	r4, PRIMASK
    acd2:	b672      	cpsid	i
    acd4:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    acd8:	f88d 0000 	strb.w	r0, [sp]
    acdc:	f89d 0000 	ldrb.w	r0, [sp]
    ace0:	b138      	cbz	r0, acf2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    ace2:	2d00      	cmp	r5, #0
    ace4:	bf1c      	itt	ne
    ace6:	2100      	movne	r1, #0
    ace8:	f640 30e9 	movwne	r0, #3049	; 0xbe9
    acec:	f43f af41 	beq.w	ab72 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    acf0:	e784      	b.n	abfc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    acf2:	f886 9031 	strb.w	r9, [r6, #49]	; 0x31
    acf6:	20ff      	movs	r0, #255	; 0xff
    acf8:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    acfc:	b154      	cbz	r4, ad14 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    acfe:	2d00      	cmp	r5, #0
    ad00:	bf08      	it	eq
    ad02:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ad06:	2100      	movs	r1, #0
    ad08:	f640 30f6 	movw	r0, #3062	; 0xbf6
    ad0c:	f3af 8000 	nop.w
    ad10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ad14:	4805      	ldr	r0, [pc, #20]	; (ad2c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    ad16:	2800      	cmp	r0, #0
    ad18:	bf18      	it	ne
    ad1a:	f3af 8000 	nopne.w
    ad1e:	b662      	cpsie	i
    ad20:	e7ed      	b.n	acfe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    ad22:	0000      	.short	0x0000
    ad24:	20001494 	.word	0x20001494
	...

0000ad34 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    ad34:	b570      	push	{r4, r5, r6, lr}
    ad36:	460d      	mov	r5, r1
    ad38:	4606      	mov	r6, r0
    ad3a:	f001 fa83 	bl	c244 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    ad3e:	480f      	ldr	r0, [pc, #60]	; (ad7c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    ad40:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    ad44:	2400      	movs	r4, #0
    ad46:	3880      	subs	r0, #128	; 0x80
    ad48:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    ad4c:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    ad50:	b129      	cbz	r1, ad5e <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    ad52:	1c61      	adds	r1, r4, #1
    ad54:	b2cc      	uxtb	r4, r1
    ad56:	2c20      	cmp	r4, #32
    ad58:	d3f8      	bcc.n	ad4c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    ad5a:	2020      	movs	r0, #32
    ad5c:	bd70      	pop	{r4, r5, r6, pc}
    ad5e:	4808      	ldr	r0, [pc, #32]	; (ad80 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    ad60:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    ad64:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
    ad68:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    ad6c:	4621      	mov	r1, r4
    ad6e:	6045      	str	r5, [r0, #4]
    ad70:	2001      	movs	r0, #1
    ad72:	f7fe ff13 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    ad76:	4620      	mov	r0, r4
    ad78:	bd70      	pop	{r4, r5, r6, pc}
    ad7a:	0000      	.short	0x0000
    ad7c:	20001494 	.word	0x20001494
    ad80:	20001094 	.word	0x20001094

0000ad84 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    ad84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad88:	b083      	sub	sp, #12
    ad8a:	f000 fb99 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    ad8e:	4605      	mov	r5, r0
    ad90:	f000 fe7c 	bl	ba8c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    ad94:	4c84      	ldr	r4, [pc, #528]	; (afa8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x224>)
    ad96:	6860      	ldr	r0, [r4, #4]
    ad98:	f1b0 3fff 	cmp.w	r0, #4294967295
    ad9c:	bf1c      	itt	ne
    ad9e:	f04f 30ff 	movne.w	r0, #4294967295
    ada2:	6060      	strne	r0, [r4, #4]
    ada4:	7fa0      	ldrb	r0, [r4, #30]
    ada6:	f8df 9204 	ldr.w	r9, [pc, #516]	; afac <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x228>
    adaa:	b990      	cbnz	r0, add2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4e>
    adac:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    adb0:	1a40      	subs	r0, r0, r1
    adb2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    adb6:	f44f 710c 	mov.w	r1, #560	; 0x230
    adba:	f001 fa2f 	bl	c21c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    adbe:	68e1      	ldr	r1, [r4, #12]
    adc0:	4408      	add	r0, r1
    adc2:	1a28      	subs	r0, r5, r0
    adc4:	0200      	lsls	r0, r0, #8
    adc6:	17c1      	asrs	r1, r0, #31
    adc8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    adcc:	1200      	asrs	r0, r0, #8
    adce:	0fc0      	lsrs	r0, r0, #31
    add0:	d012      	beq.n	adf8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x74>
    add2:	7e60      	ldrb	r0, [r4, #25]
    add4:	b320      	cbz	r0, ae20 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    add6:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    adda:	f88d 0000 	strb.w	r0, [sp]
    adde:	f89d 0000 	ldrb.w	r0, [sp]
    ade2:	b1e8      	cbz	r0, ae20 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    ade4:	f000 fcae 	bl	b744 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    ade8:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    adec:	b1f0      	cbz	r0, ae2c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa8>
    adee:	f240 31f5 	movw	r1, #1013	; 0x3f5
    adf2:	2070      	movs	r0, #112	; 0x70
    adf4:	f001 fab0 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    adf8:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    adfc:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    ae00:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    ae04:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    ae08:	6840      	ldr	r0, [r0, #4]
    ae0a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    ae0e:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    ae12:	2108      	movs	r1, #8
    ae14:	4790      	blx	r2
    ae16:	f240 31dd 	movw	r1, #989	; 0x3dd
    ae1a:	2070      	movs	r0, #112	; 0x70
    ae1c:	f001 fa9c 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ae20:	1ce8      	adds	r0, r5, #3
    ae22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ae26:	f000 fb71 	bl	b50c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    ae2a:	e7dd      	b.n	ade8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x64>
    ae2c:	2001      	movs	r0, #1
    ae2e:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    ae32:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    ae36:	2820      	cmp	r0, #32
    ae38:	d021      	beq.n	ae7e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
    ae3a:	f894 8032 	ldrb.w	r8, [r4, #50]	; 0x32
    ae3e:	2020      	movs	r0, #32
    ae40:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
    ae44:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    ae48:	2000      	movs	r0, #0
    ae4a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    ae4e:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    ae52:	6020      	str	r0, [r4, #0]
    ae54:	f000 ff0e 	bl	bc74 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    ae58:	7720      	strb	r0, [r4, #28]
    ae5a:	f894 6031 	ldrb.w	r6, [r4, #49]	; 0x31
    ae5e:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    ae62:	1907      	adds	r7, r0, r4
    ae64:	f897 0020 	ldrb.w	r0, [r7, #32]
    ae68:	2820      	cmp	r0, #32
    ae6a:	d058      	beq.n	af1e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    ae6c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    ae70:	eb09 0980 	add.w	r9, r9, r0, lsl #2
    ae74:	f899 001a 	ldrb.w	r0, [r9, #26]
    ae78:	2801      	cmp	r0, #1
    ae7a:	d005      	beq.n	ae88 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
    ae7c:	e04f      	b.n	af1e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    ae7e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    ae82:	2070      	movs	r0, #112	; 0x70
    ae84:	f001 fa68 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ae88:	f8b9 b016 	ldrh.w	fp, [r9, #22]
    ae8c:	aa01      	add	r2, sp, #4
    ae8e:	4669      	mov	r1, sp
    ae90:	4658      	mov	r0, fp
    ae92:	f000 f9ab 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    ae96:	f000 fee7 	bl	bc68 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    ae9a:	f000 f98b 	bl	b1b4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    ae9e:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    aea2:	2820      	cmp	r0, #32
    aea4:	d004      	beq.n	aeb0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12c>
    aea6:	68e0      	ldr	r0, [r4, #12]
    aea8:	1d40      	adds	r0, r0, #5
    aeaa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    aeae:	e01d      	b.n	aeec <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x168>
    aeb0:	f105 0a09 	add.w	sl, r5, #9
    aeb4:	f1bb 0f00 	cmp.w	fp, #0
    aeb8:	d016      	beq.n	aee8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    aeba:	f001 f9d5 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    aebe:	b998      	cbnz	r0, aee8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    aec0:	f001 f8aa 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    aec4:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    aec8:	bf08      	it	eq
    aeca:	200d      	moveq	r0, #13
    aecc:	d00b      	beq.n	aee6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    aece:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    aed2:	3856      	subs	r0, #86	; 0x56
    aed4:	bf08      	it	eq
    aed6:	201c      	moveq	r0, #28
    aed8:	d005      	beq.n	aee6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    aeda:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    aede:	389f      	subs	r0, #159	; 0x9f
    aee0:	bf14      	ite	ne
    aee2:	2000      	movne	r0, #0
    aee4:	2032      	moveq	r0, #50	; 0x32
    aee6:	4482      	add	sl, r0
    aee8:	f02a 407f 	bic.w	r0, sl, #4278190080	; 0xff000000
    aeec:	f8d9 2008 	ldr.w	r2, [r9, #8]
    aef0:	1a81      	subs	r1, r0, r2
    aef2:	0209      	lsls	r1, r1, #8
    aef4:	17cb      	asrs	r3, r1, #31
    aef6:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    aefa:	1209      	asrs	r1, r1, #8
    aefc:	2900      	cmp	r1, #0
    aefe:	dc0e      	bgt.n	af1e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    af00:	f109 0308 	add.w	r3, r9, #8
    af04:	4282      	cmp	r2, r0
    af06:	d202      	bcs.n	af0e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18a>
    af08:	6899      	ldr	r1, [r3, #8]
    af0a:	1e49      	subs	r1, r1, #1
    af0c:	6099      	str	r1, [r3, #8]
    af0e:	e9d3 2100 	ldrd	r2, r1, [r3]
    af12:	1a89      	subs	r1, r1, r2
    af14:	6018      	str	r0, [r3, #0]
    af16:	4408      	add	r0, r1
    af18:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    af1c:	6058      	str	r0, [r3, #4]
    af1e:	4631      	mov	r1, r6
    af20:	2001      	movs	r0, #1
    af22:	f7fe fe6d 	bl	9c00 <MPSL_IRQ_RADIO_Handler+0xf34>
    af26:	ea5f 0900 	movs.w	r9, r0
    af2a:	d0f8      	beq.n	af1e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    af2c:	4820      	ldr	r0, [pc, #128]	; (afb0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x22c>)
    af2e:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    af32:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    af36:	2802      	cmp	r0, #2
    af38:	d104      	bne.n	af44 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>
    af3a:	4632      	mov	r2, r6
    af3c:	4641      	mov	r1, r8
    af3e:	2006      	movs	r0, #6
    af40:	f7fe fe2c 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    af44:	20ff      	movs	r0, #255	; 0xff
    af46:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    af4a:	f897 0021 	ldrb.w	r0, [r7, #33]	; 0x21
    af4e:	4e19      	ldr	r6, [pc, #100]	; (afb4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x230>)
    af50:	2820      	cmp	r0, #32
    af52:	bf1c      	itt	ne
    af54:	7870      	ldrbne	r0, [r6, #1]
    af56:	f001 fad3 	blne	c500 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    af5a:	7f20      	ldrb	r0, [r4, #28]
    af5c:	b120      	cbz	r0, af68 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1e4>
    af5e:	f000 fe65 	bl	bc2c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    af62:	2000      	movs	r0, #0
    af64:	7720      	strb	r0, [r4, #28]
    af66:	7760      	strb	r0, [r4, #29]
    af68:	f1b9 0f02 	cmp.w	r9, #2
    af6c:	d011      	beq.n	af92 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x20e>
    af6e:	f1b9 0f01 	cmp.w	r9, #1
    af72:	bf1c      	itt	ne
    af74:	b003      	addne	sp, #12
    af76:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af7a:	f04f 30ff 	mov.w	r0, #4294967295
    af7e:	6871      	ldr	r1, [r6, #4]
    af80:	2900      	cmp	r1, #0
    af82:	bf04      	itt	eq
    af84:	b003      	addeq	sp, #12
    af86:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af8a:	b003      	add	sp, #12
    af8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    af90:	4708      	bx	r1
    af92:	68a0      	ldr	r0, [r4, #8]
    af94:	1b40      	subs	r0, r0, r5
    af96:	f005 f9d7 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    af9a:	6871      	ldr	r1, [r6, #4]
    af9c:	2900      	cmp	r1, #0
    af9e:	d1f4      	bne.n	af8a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x206>
    afa0:	b003      	add	sp, #12
    afa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    afa6:	0000      	.short	0x0000
    afa8:	20001494 	.word	0x20001494
    afac:	20001094 	.word	0x20001094
    afb0:	20001414 	.word	0x20001414
    afb4:	200002d0 	.word	0x200002d0

0000afb8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    afb8:	b570      	push	{r4, r5, r6, lr}
    afba:	4c42      	ldr	r4, [pc, #264]	; (b0c4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    afbc:	4605      	mov	r5, r0
    afbe:	b082      	sub	sp, #8
    afc0:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    afc4:	2820      	cmp	r0, #32
    afc6:	d008      	beq.n	afda <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    afc8:	6860      	ldr	r0, [r4, #4]
    afca:	f1b0 3fff 	cmp.w	r0, #4294967295
    afce:	d009      	beq.n	afe4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    afd0:	f640 21e4 	movw	r1, #2788	; 0xae4
    afd4:	2070      	movs	r0, #112	; 0x70
    afd6:	f001 f9bf 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    afda:	f640 21e3 	movw	r1, #2787	; 0xae3
    afde:	2070      	movs	r0, #112	; 0x70
    afe0:	f001 f9ba 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    afe4:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    afe8:	4937      	ldr	r1, [pc, #220]	; (b0c8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    afea:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    afee:	eb01 0680 	add.w	r6, r1, r0, lsl #2
    aff2:	68b0      	ldr	r0, [r6, #8]
    aff4:	f005 f9a8 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    aff8:	4602      	mov	r2, r0
    affa:	8af0      	ldrh	r0, [r6, #22]
    affc:	7d31      	ldrb	r1, [r6, #20]
    affe:	4b33      	ldr	r3, [pc, #204]	; (b0cc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    b000:	4408      	add	r0, r1
    b002:	1c40      	adds	r0, r0, #1
    b004:	1811      	adds	r1, r2, r0
    b006:	429a      	cmp	r2, r3
    b008:	d817      	bhi.n	b03a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    b00a:	4a31      	ldr	r2, [pc, #196]	; (b0d0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    b00c:	4290      	cmp	r0, r2
    b00e:	dc1b      	bgt.n	b048 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    b010:	f1c2 0c00 	rsb	ip, r2, #0
    b014:	4560      	cmp	r0, ip
    b016:	db1e      	blt.n	b056 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    b018:	0056      	lsls	r6, r2, #1
    b01a:	428e      	cmp	r6, r1
    b01c:	bfdc      	itt	le
    b01e:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    b022:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    b026:	dd05      	ble.n	b034 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    b028:	2900      	cmp	r1, #0
    b02a:	bfbc      	itt	lt
    b02c:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    b030:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    b034:	1948      	adds	r0, r1, r5
    b036:	4299      	cmp	r1, r3
    b038:	d904      	bls.n	b044 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    b03a:	f240 519e 	movw	r1, #1438	; 0x59e
    b03e:	2070      	movs	r0, #112	; 0x70
    b040:	f001 f98a 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b044:	4295      	cmp	r5, r2
    b046:	dd04      	ble.n	b052 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    b048:	f240 519f 	movw	r1, #1439	; 0x59f
    b04c:	2070      	movs	r0, #112	; 0x70
    b04e:	f001 f983 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b052:	4565      	cmp	r5, ip
    b054:	da04      	bge.n	b060 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    b056:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    b05a:	2070      	movs	r0, #112	; 0x70
    b05c:	f001 f97c 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b060:	4286      	cmp	r6, r0
    b062:	bfdc      	itt	le
    b064:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    b068:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    b06c:	dd05      	ble.n	b07a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    b06e:	2800      	cmp	r0, #0
    b070:	bfbc      	itt	lt
    b072:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    b076:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    b07a:	aa01      	add	r2, sp, #4
    b07c:	4669      	mov	r1, sp
    b07e:	f000 f8b5 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    b082:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b086:	280f      	cmp	r0, #15
    b088:	bf8c      	ite	hi
    b08a:	2001      	movhi	r0, #1
    b08c:	2000      	movls	r0, #0
    b08e:	9900      	ldr	r1, [sp, #0]
    b090:	4408      	add	r0, r1
    b092:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    b096:	6061      	str	r1, [r4, #4]
    b098:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    b09c:	f88d 0000 	strb.w	r0, [sp]
    b0a0:	f89d 0000 	ldrb.w	r0, [sp]
    b0a4:	2800      	cmp	r0, #0
    b0a6:	bf04      	itt	eq
    b0a8:	b002      	addeq	sp, #8
    b0aa:	bd70      	popeq	{r4, r5, r6, pc}
    b0ac:	2005      	movs	r0, #5
    b0ae:	f000 fbc7 	bl	b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    b0b2:	2800      	cmp	r0, #0
    b0b4:	bf1c      	itt	ne
    b0b6:	b002      	addne	sp, #8
    b0b8:	bd70      	popne	{r4, r5, r6, pc}
    b0ba:	f640 21eb 	movw	r1, #2795	; 0xaeb
    b0be:	2070      	movs	r0, #112	; 0x70
    b0c0:	f001 f94a 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b0c4:	20001494 	.word	0x20001494
    b0c8:	20001094 	.word	0x20001094
    b0cc:	1e847fff 	.word	0x1e847fff
    b0d0:	0f424000 	.word	0x0f424000

0000b0d4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    b0d4:	b570      	push	{r4, r5, r6, lr}
    b0d6:	4c1c      	ldr	r4, [pc, #112]	; (b148 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
    b0d8:	2120      	movs	r1, #32
    b0da:	f884 1020 	strb.w	r1, [r4, #32]
    b0de:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    b0e2:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    b0e6:	2000      	movs	r0, #0
    b0e8:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    b0ec:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
    b0f0:	1e42      	subs	r2, r0, #1
    b0f2:	e9c4 0200 	strd	r0, r2, [r4]
    b0f6:	77a0      	strb	r0, [r4, #30]
    b0f8:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    b0fc:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    b100:	7720      	strb	r0, [r4, #28]
    b102:	7760      	strb	r0, [r4, #29]
    b104:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
    b108:	62e2      	str	r2, [r4, #44]	; 0x2c
    b10a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    b10e:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    b112:	2210      	movs	r2, #16
    b114:	7088      	strb	r0, [r1, #2]
    b116:	f801 0f04 	strb.w	r0, [r1, #4]!
    b11a:	1e52      	subs	r2, r2, #1
    b11c:	d1fa      	bne.n	b114 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x40>
    b11e:	f000 fdb3 	bl	bc88 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    b122:	4d0a      	ldr	r5, [pc, #40]	; (b14c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
    b124:	2601      	movs	r6, #1
    b126:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    b12a:	20ff      	movs	r0, #255	; 0xff
    b12c:	7028      	strb	r0, [r5, #0]
    b12e:	4808      	ldr	r0, [pc, #32]	; (b150 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    b130:	f001 f9c8 	bl	c4c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    b134:	7068      	strb	r0, [r5, #1]
    b136:	f001 fa33 	bl	c5a0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    b13a:	60a8      	str	r0, [r5, #8]
    b13c:	f000 fd2e 	bl	bb9c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    b140:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    b144:	bd70      	pop	{r4, r5, r6, pc}
    b146:	0000      	.short	0x0000
    b148:	20001494 	.word	0x20001494
    b14c:	200002d0 	.word	0x200002d0
    b150:	00009ac5 	.word	0x00009ac5

0000b154 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    b154:	b570      	push	{r4, r5, r6, lr}
    b156:	4605      	mov	r5, r0
    b158:	2001      	movs	r0, #1
    b15a:	fa00 f405 	lsl.w	r4, r0, r5
    b15e:	460e      	mov	r6, r1
    b160:	2a00      	cmp	r2, #0
    b162:	bf08      	it	eq
    b164:	4808      	ldreq	r0, [pc, #32]	; (b188 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    b166:	d00c      	beq.n	b182 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    b168:	2000      	movs	r0, #0
    b16a:	f000 fcfd 	bl	bb68 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    b16e:	00e9      	lsls	r1, r5, #3
    b170:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    b174:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    b178:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    b17c:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    b180:	4802      	ldr	r0, [pc, #8]	; (b18c <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    b182:	6004      	str	r4, [r0, #0]
    b184:	bd70      	pop	{r4, r5, r6, pc}
    b186:	0000      	.short	0x0000
    b188:	4001f508 	.word	0x4001f508
    b18c:	4001f504 	.word	0x4001f504

0000b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    b190:	b500      	push	{lr}
    b192:	b083      	sub	sp, #12
    b194:	4668      	mov	r0, sp
    b196:	f000 f999 	bl	b4cc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    b19a:	9800      	ldr	r0, [sp, #0]
    b19c:	f005 f8d4 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b1a0:	9a01      	ldr	r2, [sp, #4]
    b1a2:	4b03      	ldr	r3, [pc, #12]	; (b1b0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q+0x20>)
    b1a4:	2100      	movs	r1, #0
    b1a6:	fbe2 0103 	umlal	r0, r1, r2, r3
    b1aa:	b003      	add	sp, #12
    b1ac:	bd00      	pop	{pc}
    b1ae:	0000      	.short	0x0000
    b1b0:	1e848000 	.word	0x1e848000

0000b1b4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    b1b4:	0b41      	lsrs	r1, r0, #13
    b1b6:	f248 6237 	movw	r2, #34359	; 0x8637
    b1ba:	4351      	muls	r1, r2
    b1bc:	0c0a      	lsrs	r2, r1, #16
    b1be:	4b09      	ldr	r3, [pc, #36]	; (b1e4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    b1c0:	0251      	lsls	r1, r2, #9
    b1c2:	fb02 0203 	mla	r2, r2, r3, r0
    b1c6:	4808      	ldr	r0, [pc, #32]	; (b1e8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    b1c8:	4350      	muls	r0, r2
    b1ca:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    b1ce:	306e      	adds	r0, #110	; 0x6e
    b1d0:	0d40      	lsrs	r0, r0, #21
    b1d2:	425b      	negs	r3, r3
    b1d4:	fb10 f303 	smulbb	r3, r0, r3
    b1d8:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    b1dc:	bf88      	it	hi
    b1de:	1c49      	addhi	r1, r1, #1
    b1e0:	4408      	add	r0, r1
    b1e2:	4770      	bx	lr
    b1e4:	ffffc2f7 	.word	0xffffc2f7
    b1e8:	00010c6f 	.word	0x00010c6f

0000b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    b1ec:	0b43      	lsrs	r3, r0, #13
    b1ee:	f248 6c37 	movw	ip, #34359	; 0x8637
    b1f2:	fb03 f30c 	mul.w	r3, r3, ip
    b1f6:	b430      	push	{r4, r5}
    b1f8:	0c1b      	lsrs	r3, r3, #16
    b1fa:	f8df c044 	ldr.w	ip, [pc, #68]	; b240 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    b1fe:	025c      	lsls	r4, r3, #9
    b200:	fb03 030c 	mla	r3, r3, ip, r0
    b204:	480f      	ldr	r0, [pc, #60]	; (b244 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    b206:	4358      	muls	r0, r3
    b208:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    b20c:	eb04 000c 	add.w	r0, r4, ip
    b210:	f643 5409 	movw	r4, #15625	; 0x3d09
    b214:	fb1c f404 	smulbb	r4, ip, r4
    b218:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    b21c:	f643 5508 	movw	r5, #15624	; 0x3d08
    b220:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    b224:	442c      	add	r4, r5
    b226:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    b22a:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    b22e:	bf84      	itt	hi
    b230:	f04f 0c00 	movhi.w	ip, #0
    b234:	1c40      	addhi	r0, r0, #1
    b236:	6008      	str	r0, [r1, #0]
    b238:	f882 c000 	strb.w	ip, [r2]
    b23c:	bc30      	pop	{r4, r5}
    b23e:	4770      	bx	lr
    b240:	ffffc2f7 	.word	0xffffc2f7
    b244:	00010c6f 	.word	0x00010c6f

0000b248 <MPSL_IRQ_RTC0_Handler>:
    b248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b24c:	4d3b      	ldr	r5, [pc, #236]	; (b33c <MPSL_IRQ_RTC0_Handler+0xf4>)
    b24e:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b252:	f8df 80ec 	ldr.w	r8, [pc, #236]	; b340 <MPSL_IRQ_RTC0_Handler+0xf8>
    b256:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    b25a:	f44f 6600 	mov.w	r6, #2048	; 0x800
    b25e:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    b262:	f04f 0400 	mov.w	r4, #0
    b266:	d019      	beq.n	b29c <MPSL_IRQ_RTC0_Handler+0x54>
    b268:	4836      	ldr	r0, [pc, #216]	; (b344 <MPSL_IRQ_RTC0_Handler+0xfc>)
    b26a:	6800      	ldr	r0, [r0, #0]
    b26c:	b1b0      	cbz	r0, b29c <MPSL_IRQ_RTC0_Handler+0x54>
    b26e:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    b272:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b276:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
    b27a:	f8d8 1000 	ldr.w	r1, [r8]
    b27e:	1a40      	subs	r0, r0, r1
    b280:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b284:	2802      	cmp	r0, #2
    b286:	d302      	bcc.n	b28e <MPSL_IRQ_RTC0_Handler+0x46>
    b288:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b28c:	d906      	bls.n	b29c <MPSL_IRQ_RTC0_Handler+0x54>
    b28e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    b292:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b296:	2004      	movs	r0, #4
    b298:	f7fe fed8 	bl	a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b29c:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b2a0:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    b2a4:	d01a      	beq.n	b2dc <MPSL_IRQ_RTC0_Handler+0x94>
    b2a6:	4828      	ldr	r0, [pc, #160]	; (b348 <MPSL_IRQ_RTC0_Handler+0x100>)
    b2a8:	6800      	ldr	r0, [r0, #0]
    b2aa:	b1b8      	cbz	r0, b2dc <MPSL_IRQ_RTC0_Handler+0x94>
    b2ac:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
    b2b0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b2b4:	4825      	ldr	r0, [pc, #148]	; (b34c <MPSL_IRQ_RTC0_Handler+0x104>)
    b2b6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b2ba:	f8d8 1000 	ldr.w	r1, [r8]
    b2be:	1a40      	subs	r0, r0, r1
    b2c0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b2c4:	2802      	cmp	r0, #2
    b2c6:	d302      	bcc.n	b2ce <MPSL_IRQ_RTC0_Handler+0x86>
    b2c8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b2cc:	d906      	bls.n	b2dc <MPSL_IRQ_RTC0_Handler+0x94>
    b2ce:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    b2d2:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b2d6:	2005      	movs	r0, #5
    b2d8:	f7fe feb8 	bl	a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b2dc:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b2e0:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    b2e4:	d01a      	beq.n	b31c <MPSL_IRQ_RTC0_Handler+0xd4>
    b2e6:	481a      	ldr	r0, [pc, #104]	; (b350 <MPSL_IRQ_RTC0_Handler+0x108>)
    b2e8:	6800      	ldr	r0, [r0, #0]
    b2ea:	b1b8      	cbz	r0, b31c <MPSL_IRQ_RTC0_Handler+0xd4>
    b2ec:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    b2f0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b2f4:	4817      	ldr	r0, [pc, #92]	; (b354 <MPSL_IRQ_RTC0_Handler+0x10c>)
    b2f6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b2fa:	f8d8 1000 	ldr.w	r1, [r8]
    b2fe:	1a40      	subs	r0, r0, r1
    b300:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b304:	2802      	cmp	r0, #2
    b306:	d302      	bcc.n	b30e <MPSL_IRQ_RTC0_Handler+0xc6>
    b308:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b30c:	d906      	bls.n	b31c <MPSL_IRQ_RTC0_Handler+0xd4>
    b30e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    b312:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b316:	2006      	movs	r0, #6
    b318:	f7fe fe98 	bl	a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b31c:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b320:	2800      	cmp	r0, #0
    b322:	bf08      	it	eq
    b324:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b328:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    b32c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b330:	4809      	ldr	r0, [pc, #36]	; (b358 <MPSL_IRQ_RTC0_Handler+0x110>)
    b332:	68c1      	ldr	r1, [r0, #12]
    b334:	1c49      	adds	r1, r1, #1
    b336:	60c1      	str	r1, [r0, #12]
    b338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b33c:	4000b000 	.word	0x4000b000
    b340:	4000b504 	.word	0x4000b504
    b344:	4000b140 	.word	0x4000b140
    b348:	4000b144 	.word	0x4000b144
    b34c:	4000b004 	.word	0x4000b004
    b350:	4000b148 	.word	0x4000b148
    b354:	4000b008 	.word	0x4000b008
    b358:	200002dc 	.word	0x200002dc

0000b35c <MPSL_IRQ_TIMER0_Handler>:
    b35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b360:	4d38      	ldr	r5, [pc, #224]	; (b444 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    b362:	7828      	ldrb	r0, [r5, #0]
    b364:	2804      	cmp	r0, #4
    b366:	d068      	beq.n	b43a <MPSL_IRQ_TIMER0_Handler+0xde>
    b368:	1ca8      	adds	r0, r5, #2
    b36a:	2201      	movs	r2, #1
    b36c:	7801      	ldrb	r1, [r0, #0]
    b36e:	b159      	cbz	r1, b388 <MPSL_IRQ_TIMER0_Handler+0x2c>
    b370:	2901      	cmp	r1, #1
    b372:	bf08      	it	eq
    b374:	706a      	strbeq	r2, [r5, #1]
    b376:	d002      	beq.n	b37e <MPSL_IRQ_TIMER0_Handler+0x22>
    b378:	7869      	ldrb	r1, [r5, #1]
    b37a:	2900      	cmp	r1, #0
    b37c:	d058      	beq.n	b430 <MPSL_IRQ_TIMER0_Handler+0xd4>
    b37e:	2102      	movs	r1, #2
    b380:	7001      	strb	r1, [r0, #0]
    b382:	7840      	ldrb	r0, [r0, #1]
    b384:	f000 fb12 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b388:	4c2f      	ldr	r4, [pc, #188]	; (b448 <MPSL_IRQ_TIMER0_Handler+0xec>)
    b38a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b38e:	f04f 0800 	mov.w	r8, #0
    b392:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    b396:	f44f 7780 	mov.w	r7, #256	; 0x100
    b39a:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    b39e:	d00a      	beq.n	b3b6 <MPSL_IRQ_TIMER0_Handler+0x5a>
    b3a0:	482a      	ldr	r0, [pc, #168]	; (b44c <MPSL_IRQ_TIMER0_Handler+0xf0>)
    b3a2:	6800      	ldr	r0, [r0, #0]
    b3a4:	b138      	cbz	r0, b3b6 <MPSL_IRQ_TIMER0_Handler+0x5a>
    b3a6:	2003      	movs	r0, #3
    b3a8:	f000 fb00 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b3ac:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b3b0:	2003      	movs	r0, #3
    b3b2:	f7fe fe4b 	bl	a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b3b6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b3ba:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    b3be:	d00a      	beq.n	b3d6 <MPSL_IRQ_TIMER0_Handler+0x7a>
    b3c0:	4823      	ldr	r0, [pc, #140]	; (b450 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    b3c2:	6800      	ldr	r0, [r0, #0]
    b3c4:	b138      	cbz	r0, b3d6 <MPSL_IRQ_TIMER0_Handler+0x7a>
    b3c6:	2002      	movs	r0, #2
    b3c8:	f000 faf0 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b3cc:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b3d0:	2002      	movs	r0, #2
    b3d2:	f7fe fe3b 	bl	a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b3d6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b3da:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    b3de:	d00a      	beq.n	b3f6 <MPSL_IRQ_TIMER0_Handler+0x9a>
    b3e0:	481c      	ldr	r0, [pc, #112]	; (b454 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    b3e2:	6800      	ldr	r0, [r0, #0]
    b3e4:	b138      	cbz	r0, b3f6 <MPSL_IRQ_TIMER0_Handler+0x9a>
    b3e6:	2001      	movs	r0, #1
    b3e8:	f000 fae0 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b3ec:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b3f0:	2001      	movs	r0, #1
    b3f2:	f7fe fe2b 	bl	a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b3f6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b3fa:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    b3fe:	bf08      	it	eq
    b400:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b404:	4814      	ldr	r0, [pc, #80]	; (b458 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    b406:	6800      	ldr	r0, [r0, #0]
    b408:	2800      	cmp	r0, #0
    b40a:	bf08      	it	eq
    b40c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b410:	2000      	movs	r0, #0
    b412:	f000 facb 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b416:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b41a:	2004      	movs	r0, #4
    b41c:	7028      	strb	r0, [r5, #0]
    b41e:	f8c5 8004 	str.w	r8, [r5, #4]
    b422:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    b426:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b42a:	2000      	movs	r0, #0
    b42c:	f7fe be0e 	b.w	a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b430:	f44f 6195 	mov.w	r1, #1192	; 0x4a8
    b434:	206c      	movs	r0, #108	; 0x6c
    b436:	f000 ff8f 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b43a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b43e:	2007      	movs	r0, #7
    b440:	f7fe be04 	b.w	a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b444:	200002dc 	.word	0x200002dc
    b448:	40008000 	.word	0x40008000
    b44c:	4000814c 	.word	0x4000814c
    b450:	40008148 	.word	0x40008148
    b454:	40008144 	.word	0x40008144
    b458:	40008140 	.word	0x40008140
    b45c:	2201      	movs	r2, #1
    b45e:	0211      	lsls	r1, r2, #8
    b460:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b464:	2000      	movs	r0, #0
    b466:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    b46a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    b46e:	f3bf 8f4f 	dsb	sy
    b472:	f3bf 8f6f 	isb	sy
    b476:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    b47a:	490e      	ldr	r1, [pc, #56]	; (b4b4 <MPSL_IRQ_TIMER0_Handler+0x158>)
    b47c:	f841 2f04 	str.w	r2, [r1, #4]!
    b480:	1e43      	subs	r3, r0, #1
    b482:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    b486:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    b48a:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    b48e:	4b0a      	ldr	r3, [pc, #40]	; (b4b8 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    b490:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b494:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    b498:	1d1b      	adds	r3, r3, #4
    b49a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b49e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    b4a2:	1d1b      	adds	r3, r3, #4
    b4a4:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b4a8:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    b4ac:	60ca      	str	r2, [r1, #12]
    b4ae:	4903      	ldr	r1, [pc, #12]	; (b4bc <MPSL_IRQ_TIMER0_Handler+0x160>)
    b4b0:	7048      	strb	r0, [r1, #1]
    b4b2:	4770      	bx	lr
    b4b4:	40008000 	.word	0x40008000
    b4b8:	40008004 	.word	0x40008004
    b4bc:	200002dc 	.word	0x200002dc

0000b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    b4c0:	4801      	ldr	r0, [pc, #4]	; (b4c8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    b4c2:	6800      	ldr	r0, [r0, #0]
    b4c4:	4770      	bx	lr
    b4c6:	0000      	.short	0x0000
    b4c8:	4000b504 	.word	0x4000b504

0000b4cc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
    b4cc:	b430      	push	{r4, r5}
    b4ce:	f3ef 8c10 	mrs	ip, PRIMASK
    b4d2:	b672      	cpsid	i
    b4d4:	2500      	movs	r5, #0
    b4d6:	4b0b      	ldr	r3, [pc, #44]	; (b504 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
    b4d8:	4a0b      	ldr	r2, [pc, #44]	; (b508 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
    b4da:	bf00      	nop
    b4dc:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    b4e0:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
    b4e4:	b12c      	cbz	r4, b4f2 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
    b4e6:	68d1      	ldr	r1, [r2, #12]
    b4e8:	1c49      	adds	r1, r1, #1
    b4ea:	60d1      	str	r1, [r2, #12]
    b4ec:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    b4f0:	e7f4      	b.n	b4dc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
    b4f2:	68d2      	ldr	r2, [r2, #12]
    b4f4:	f1bc 0f00 	cmp.w	ip, #0
    b4f8:	d100      	bne.n	b4fc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
    b4fa:	b662      	cpsie	i
    b4fc:	e9c0 1200 	strd	r1, r2, [r0]
    b500:	bc30      	pop	{r4, r5}
    b502:	4770      	bx	lr
    b504:	4000b000 	.word	0x4000b000
    b508:	200002dc 	.word	0x200002dc

0000b50c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    b50c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b510:	f8df 8134 	ldr.w	r8, [pc, #308]	; b648 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>
    b514:	4605      	mov	r5, r0
    b516:	f1a8 0602 	sub.w	r6, r8, #2
    b51a:	f898 3000 	ldrb.w	r3, [r8]
    b51e:	68b0      	ldr	r0, [r6, #8]
    b520:	2b01      	cmp	r3, #1
    b522:	bf04      	itt	eq
    b524:	42a8      	cmpeq	r0, r5
    b526:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b52a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    b52e:	4a47      	ldr	r2, [pc, #284]	; (b64c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    b530:	6011      	str	r1, [r2, #0]
    b532:	4948      	ldr	r1, [pc, #288]	; (b654 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>)
    b534:	4a46      	ldr	r2, [pc, #280]	; (b650 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x144>)
    b536:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    b53a:	f101 0c04 	add.w	ip, r1, #4
    b53e:	f04f 0400 	mov.w	r4, #0
    b542:	2b00      	cmp	r3, #0
    b544:	d055      	beq.n	b5f2 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xe6>
    b546:	4a44      	ldr	r2, [pc, #272]	; (b658 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x14c>)
    b548:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    b54c:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    b550:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    b554:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    b558:	2701      	movs	r7, #1
    b55a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    b55e:	2a00      	cmp	r2, #0
    b560:	bf01      	itttt	eq
    b562:	f8d1 2104 	ldreq.w	r2, [r1, #260]	; 0x104
    b566:	2a00      	cmpeq	r2, #0
    b568:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    b56c:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    b570:	f04f 0a10 	mov.w	sl, #16
    b574:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    b578:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    b57c:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    b580:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    b584:	4a35      	ldr	r2, [pc, #212]	; (b65c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x150>)
    b586:	f8d2 c000 	ldr.w	ip, [r2]
    b58a:	eba5 0c0c 	sub.w	ip, r5, ip
    b58e:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    b592:	f1bc 0f02 	cmp.w	ip, #2
    b596:	d337      	bcc.n	b608 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfc>
    b598:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    b59c:	d834      	bhi.n	b608 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfc>
    b59e:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    b5a2:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    b5a6:	f8c1 c344 	str.w	ip, [r1, #836]	; 0x344
    b5aa:	b12b      	cbz	r3, b5b8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xac>
    b5ac:	6811      	ldr	r1, [r2, #0]
    b5ae:	1a41      	subs	r1, r0, r1
    b5b0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    b5b4:	2902      	cmp	r1, #2
    b5b6:	d3f9      	bcc.n	b5ac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa0>
    b5b8:	6077      	str	r7, [r6, #4]
    b5ba:	7034      	strb	r4, [r6, #0]
    b5bc:	f7ff ff4e 	bl	b45c <MPSL_IRQ_TIMER0_Handler+0x100>
    b5c0:	4827      	ldr	r0, [pc, #156]	; (b660 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x154>)
    b5c2:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    b5c6:	f364 0101 	bfi	r1, r4, #0, #2
    b5ca:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    b5ce:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    b5d2:	2102      	movs	r1, #2
    b5d4:	f361 0201 	bfi	r2, r1, #0, #2
    b5d8:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    b5dc:	fa9a f1aa 	rbit	r1, sl
    b5e0:	fab1 f181 	clz	r1, r1
    b5e4:	2909      	cmp	r1, #9
    b5e6:	d917      	bls.n	b618 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>
    b5e8:	f240 3155 	movw	r1, #853	; 0x355
    b5ec:	a01d      	add	r0, pc, #116	; (adr r0, b664 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x158>)
    b5ee:	f000 fe87 	bl	c300 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    b5f2:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    b5f6:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    b5fa:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    b5fe:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    b602:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    b606:	e7a5      	b.n	b554 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    b608:	2000      	movs	r0, #0
    b60a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b60e:	f44f 7127 	mov.w	r1, #668	; 0x29c
    b612:	206c      	movs	r0, #108	; 0x6c
    b614:	f000 fea0 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b618:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    b61c:	60c7      	str	r7, [r0, #12]
    b61e:	6871      	ldr	r1, [r6, #4]
    b620:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b624:	f44f 7080 	mov.w	r0, #256	; 0x100
    b628:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    b62c:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    b630:	490f      	ldr	r1, [pc, #60]	; (b670 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x164>)
    b632:	05c0      	lsls	r0, r0, #23
    b634:	6008      	str	r0, [r1, #0]
    b636:	2004      	movs	r0, #4
    b638:	60b5      	str	r5, [r6, #8]
    b63a:	f888 0001 	strb.w	r0, [r8, #1]
    b63e:	f888 7000 	strb.w	r7, [r8]
    b642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b646:	0000      	.short	0x0000
    b648:	200002de 	.word	0x200002de
    b64c:	4001f508 	.word	0x4001f508
    b650:	fffbfffd 	.word	0xfffbfffd
    b654:	4000b000 	.word	0x4000b000
    b658:	fffafffd 	.word	0xfffafffd
    b65c:	4000b504 	.word	0x4000b504
    b660:	40008000 	.word	0x40008000
    b664:	5f66726e 	.word	0x5f66726e
    b668:	656d6974 	.word	0x656d6974
    b66c:	00682e72 	.word	0x00682e72
    b670:	4001f504 	.word	0x4001f504

0000b674 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    b674:	b570      	push	{r4, r5, r6, lr}
    b676:	4c2a      	ldr	r4, [pc, #168]	; (b720 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    b678:	68a1      	ldr	r1, [r4, #8]
    b67a:	4281      	cmp	r1, r0
    b67c:	bf14      	ite	ne
    b67e:	2201      	movne	r2, #1
    b680:	2200      	moveq	r2, #0
    b682:	f8df c0a0 	ldr.w	ip, [pc, #160]	; b724 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    b686:	f89c 5000 	ldrb.w	r5, [ip]
    b68a:	2d02      	cmp	r5, #2
    b68c:	d002      	beq.n	b694 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    b68e:	2a00      	cmp	r2, #0
    b690:	d034      	beq.n	b6fc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    b692:	e002      	b.n	b69a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    b694:	2a00      	cmp	r2, #0
    b696:	bf08      	it	eq
    b698:	bd70      	popeq	{r4, r5, r6, pc}
    b69a:	7862      	ldrb	r2, [r4, #1]
    b69c:	b39a      	cbz	r2, b706 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    b69e:	4b22      	ldr	r3, [pc, #136]	; (b728 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    b6a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    b6a4:	601a      	str	r2, [r3, #0]
    b6a6:	4b21      	ldr	r3, [pc, #132]	; (b72c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    b6a8:	1392      	asrs	r2, r2, #14
    b6aa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    b6ae:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    b6b2:	2200      	movs	r2, #0
    b6b4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    b6b8:	4a1d      	ldr	r2, [pc, #116]	; (b730 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    b6ba:	6816      	ldr	r6, [r2, #0]
    b6bc:	1b86      	subs	r6, r0, r6
    b6be:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    b6c2:	2e02      	cmp	r6, #2
    b6c4:	d324      	bcc.n	b710 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    b6c6:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    b6ca:	d821      	bhi.n	b710 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    b6cc:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b6d0:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    b6d4:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    b6d8:	b12d      	cbz	r5, b6e6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    b6da:	6813      	ldr	r3, [r2, #0]
    b6dc:	1acb      	subs	r3, r1, r3
    b6de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b6e2:	2b02      	cmp	r3, #2
    b6e4:	d3f9      	bcc.n	b6da <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    b6e6:	4b13      	ldr	r3, [pc, #76]	; (b734 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    b6e8:	2102      	movs	r1, #2
    b6ea:	074a      	lsls	r2, r1, #29
    b6ec:	601a      	str	r2, [r3, #0]
    b6ee:	60a0      	str	r0, [r4, #8]
    b6f0:	2004      	movs	r0, #4
    b6f2:	f88c 0001 	strb.w	r0, [ip, #1]
    b6f6:	f88c 1000 	strb.w	r1, [ip]
    b6fa:	bd70      	pop	{r4, r5, r6, pc}
    b6fc:	f240 21aa 	movw	r1, #682	; 0x2aa
    b700:	206c      	movs	r0, #108	; 0x6c
    b702:	f000 fe29 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b706:	f240 21ae 	movw	r1, #686	; 0x2ae
    b70a:	206c      	movs	r0, #108	; 0x6c
    b70c:	f000 fe24 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b710:	2000      	movs	r0, #0
    b712:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b716:	f240 21ba 	movw	r1, #698	; 0x2ba
    b71a:	206c      	movs	r0, #108	; 0x6c
    b71c:	f000 fe1c 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b720:	200002dc 	.word	0x200002dc
    b724:	200002de 	.word	0x200002de
    b728:	4001f508 	.word	0x4001f508
    b72c:	4000b000 	.word	0x4000b000
    b730:	4000b504 	.word	0x4000b504
    b734:	4001f504 	.word	0x4001f504

0000b738 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    b738:	4801      	ldr	r0, [pc, #4]	; (b740 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    b73a:	6880      	ldr	r0, [r0, #8]
    b73c:	4770      	bx	lr
    b73e:	0000      	.short	0x0000
    b740:	200002dc 	.word	0x200002dc

0000b744 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    b744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b748:	4836      	ldr	r0, [pc, #216]	; (b824 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    b74a:	4a35      	ldr	r2, [pc, #212]	; (b820 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    b74c:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    b750:	f8df c0d4 	ldr.w	ip, [pc, #212]	; b828 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>
    b754:	1d03      	adds	r3, r0, #4
    b756:	2100      	movs	r1, #0
    b758:	f89c 4000 	ldrb.w	r4, [ip]
    b75c:	b184      	cbz	r4, b780 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3c>
    b75e:	4a33      	ldr	r2, [pc, #204]	; (b82c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    b760:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    b764:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    b768:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b76c:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    b770:	2301      	movs	r3, #1
    b772:	2a00      	cmp	r2, #0
    b774:	bf04      	itt	eq
    b776:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    b77a:	2800      	cmpeq	r0, #0
    b77c:	d111      	bne.n	b7a2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5e>
    b77e:	e00a      	b.n	b796 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x52>
    b780:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    b784:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    b788:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    b78c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    b790:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b794:	e7ea      	b.n	b76c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    b796:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b79a:	f44f 6000 	mov.w	r0, #2048	; 0x800
    b79e:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    b7a2:	2c02      	cmp	r4, #2
    b7a4:	d004      	beq.n	b7b0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6c>
    b7a6:	f240 21c6 	movw	r1, #710	; 0x2c6
    b7aa:	206c      	movs	r0, #108	; 0x6c
    b7ac:	f000 fdd4 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b7b0:	4e1f      	ldr	r6, [pc, #124]	; (b830 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    b7b2:	6830      	ldr	r0, [r6, #0]
    b7b4:	4c1f      	ldr	r4, [pc, #124]	; (b834 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    b7b6:	1cc0      	adds	r0, r0, #3
    b7b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b7bc:	68a2      	ldr	r2, [r4, #8]
    b7be:	4d1e      	ldr	r5, [pc, #120]	; (b838 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    b7c0:	4290      	cmp	r0, r2
    b7c2:	d00b      	beq.n	b7dc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    b7c4:	6837      	ldr	r7, [r6, #0]
    b7c6:	1bd7      	subs	r7, r2, r7
    b7c8:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    b7cc:	2f04      	cmp	r7, #4
    b7ce:	d305      	bcc.n	b7dc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    b7d0:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    b7d4:	d802      	bhi.n	b7dc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    b7d6:	f7ff fe99 	bl	b50c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    b7da:	e01b      	b.n	b814 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    b7dc:	6830      	ldr	r0, [r6, #0]
    b7de:	1a10      	subs	r0, r2, r0
    b7e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b7e4:	2802      	cmp	r0, #2
    b7e6:	d313      	bcc.n	b810 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    b7e8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b7ec:	d810      	bhi.n	b810 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    b7ee:	4a13      	ldr	r2, [pc, #76]	; (b83c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    b7f0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b7f4:	6010      	str	r0, [r2, #0]
    b7f6:	6063      	str	r3, [r4, #4]
    b7f8:	7021      	strb	r1, [r4, #0]
    b7fa:	606b      	str	r3, [r5, #4]
    b7fc:	60eb      	str	r3, [r5, #12]
    b7fe:	0040      	lsls	r0, r0, #1
    b800:	1f11      	subs	r1, r2, #4
    b802:	6008      	str	r0, [r1, #0]
    b804:	2004      	movs	r0, #4
    b806:	f88c 0001 	strb.w	r0, [ip, #1]
    b80a:	f88c 3000 	strb.w	r3, [ip]
    b80e:	e001      	b.n	b814 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    b810:	6063      	str	r3, [r4, #4]
    b812:	7021      	strb	r1, [r4, #0]
    b814:	6860      	ldr	r0, [r4, #4]
    b816:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    b81a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b81e:	0000      	.short	0x0000
    b820:	fffbfffd 	.word	0xfffbfffd
    b824:	4000b000 	.word	0x4000b000
    b828:	200002de 	.word	0x200002de
    b82c:	fffafffd 	.word	0xfffafffd
    b830:	4000b504 	.word	0x4000b504
    b834:	200002dc 	.word	0x200002dc
    b838:	40008000 	.word	0x40008000
    b83c:	4001f508 	.word	0x4001f508

0000b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    b840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b844:	4a54      	ldr	r2, [pc, #336]	; (b998 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x158>)
    b846:	2500      	movs	r5, #0
    b848:	2401      	movs	r4, #1
    b84a:	f892 c000 	ldrb.w	ip, [r2]
    b84e:	7853      	ldrb	r3, [r2, #1]
    b850:	f44f 76a0 	mov.w	r6, #320	; 0x140
    b854:	2807      	cmp	r0, #7
    b856:	d27d      	bcs.n	b954 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    b858:	e8df f000 	tbb	[pc, r0]
    b85c:	04040404 	.word	0x04040404
    b860:	00585858 	.word	0x00585858
    b864:	4a4d      	ldr	r2, [pc, #308]	; (b99c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x15c>)
    b866:	6897      	ldr	r7, [r2, #8]
    b868:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    b86c:	bf04      	itt	eq
    b86e:	7852      	ldrbeq	r2, [r2, #1]
    b870:	2a00      	cmpeq	r2, #0
    b872:	d003      	beq.n	b87c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    b874:	f1bc 0f02 	cmp.w	ip, #2
    b878:	d005      	beq.n	b886 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    b87a:	e026      	b.n	b8ca <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    b87c:	f240 3156 	movw	r1, #854	; 0x356
    b880:	206c      	movs	r0, #108	; 0x6c
    b882:	f000 fd69 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b886:	1f1a      	subs	r2, r3, #4
    b888:	b2d2      	uxtb	r2, r2
    b88a:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    b88e:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    b892:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    b896:	2200      	movs	r2, #0
    b898:	f1bc 0f01 	cmp.w	ip, #1
    b89c:	d003      	beq.n	b8a6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
    b89e:	f1bc 0f02 	cmp.w	ip, #2
    b8a2:	d008      	beq.n	b8b6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
    b8a4:	e00e      	b.n	b8c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    b8a6:	2b04      	cmp	r3, #4
    b8a8:	bf24      	itt	cs
    b8aa:	6837      	ldrcs	r7, [r6, #0]
    b8ac:	2f00      	cmpcs	r7, #0
    b8ae:	bf08      	it	eq
    b8b0:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    b8b4:	e006      	b.n	b8c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    b8b6:	2b04      	cmp	r3, #4
    b8b8:	bf24      	itt	cs
    b8ba:	6837      	ldrcs	r7, [r6, #0]
    b8bc:	2f00      	cmpcs	r7, #0
    b8be:	bf08      	it	eq
    b8c0:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
    b8c4:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
    b8c8:	d1e5      	bne.n	b896 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
    b8ca:	f8df c0d4 	ldr.w	ip, [pc, #212]	; b9a0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>
    b8ce:	f100 0210 	add.w	r2, r0, #16
    b8d2:	fa04 f202 	lsl.w	r2, r4, r2
    b8d6:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    b8da:	f04f 0340 	mov.w	r3, #64	; 0x40
    b8de:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    b8e2:	b2db      	uxtb	r3, r3
    b8e4:	4463      	add	r3, ip
    b8e6:	601c      	str	r4, [r3, #0]
    b8e8:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    b8ec:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    b8f0:	eba1 0303 	sub.w	r3, r1, r3
    b8f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b8f8:	2b03      	cmp	r3, #3
    b8fa:	bf26      	itte	cs
    b8fc:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    b900:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
    b904:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
    b908:	d237      	bcs.n	b97a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13a>
    b90a:	e03c      	b.n	b986 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x146>
    b90c:	f1bc 0f00 	cmp.w	ip, #0
    b910:	d006      	beq.n	b920 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    b912:	4283      	cmp	r3, r0
    b914:	d104      	bne.n	b920 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    b916:	f240 3176 	movw	r1, #886	; 0x376
    b91a:	206c      	movs	r0, #108	; 0x6c
    b91c:	f000 fd1c 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b920:	1f02      	subs	r2, r0, #4
    b922:	b2d3      	uxtb	r3, r2
    b924:	2b03      	cmp	r3, #3
    b926:	d304      	bcc.n	b932 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf2>
    b928:	f240 11d1 	movw	r1, #465	; 0x1d1
    b92c:	206c      	movs	r0, #108	; 0x6c
    b92e:	f000 fd13 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b932:	f8df c070 	ldr.w	ip, [pc, #112]	; b9a4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>
    b936:	f103 0210 	add.w	r2, r3, #16
    b93a:	fa04 f202 	lsl.w	r2, r4, r2
    b93e:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    b942:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
    b946:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    b94a:	f84c 5003 	str.w	r5, [ip, r3]
    b94e:	4b16      	ldr	r3, [pc, #88]	; (b9a8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    b950:	681b      	ldr	r3, [r3, #0]
    b952:	e000      	b.n	b956 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    b954:	e01a      	b.n	b98c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x14c>
    b956:	1f00      	subs	r0, r0, #4
    b958:	1acb      	subs	r3, r1, r3
    b95a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b95e:	b2c0      	uxtb	r0, r0
    b960:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    b964:	2b02      	cmp	r3, #2
    b966:	d30b      	bcc.n	b980 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    b968:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    b96c:	d808      	bhi.n	b980 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    b96e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    b972:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
    b976:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
    b97a:	2001      	movs	r0, #1
    b97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b980:	2100      	movs	r1, #0
    b982:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    b986:	2000      	movs	r0, #0
    b988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b98c:	f240 317a 	movw	r1, #890	; 0x37a
    b990:	206c      	movs	r0, #108	; 0x6c
    b992:	f000 fce1 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b996:	0000      	.short	0x0000
    b998:	200002de 	.word	0x200002de
    b99c:	200002dc 	.word	0x200002dc
    b9a0:	40008000 	.word	0x40008000
    b9a4:	4000b000 	.word	0x4000b000
    b9a8:	4000b504 	.word	0x4000b504

0000b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    b9ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b9b0:	2601      	movs	r6, #1
    b9b2:	2700      	movs	r7, #0
    b9b4:	f44f 78a0 	mov.w	r8, #320	; 0x140
    b9b8:	2807      	cmp	r0, #7
    b9ba:	d251      	bcs.n	ba60 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    b9bc:	e8df f000 	tbb	[pc, r0]
    b9c0:	04040404 	.word	0x04040404
    b9c4:	00191919 	.word	0x00191919
    b9c8:	f100 0110 	add.w	r1, r0, #16
    b9cc:	fa06 f201 	lsl.w	r2, r6, r1
    b9d0:	4926      	ldr	r1, [pc, #152]	; (ba6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    b9d2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    b9d6:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    b9da:	2200      	movs	r2, #0
    b9dc:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    b9e0:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    b9e4:	508f      	str	r7, [r1, r2]
    b9e6:	4922      	ldr	r1, [pc, #136]	; (ba70 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    b9e8:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    b9ec:	9000      	str	r0, [sp, #0]
    b9ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b9f2:	4d20      	ldr	r5, [pc, #128]	; (ba74 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    b9f4:	1f01      	subs	r1, r0, #4
    b9f6:	b2cc      	uxtb	r4, r1
    b9f8:	7829      	ldrb	r1, [r5, #0]
    b9fa:	b179      	cbz	r1, ba1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    b9fc:	786a      	ldrb	r2, [r5, #1]
    b9fe:	4282      	cmp	r2, r0
    ba00:	d10c      	bne.n	ba1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    ba02:	4a1d      	ldr	r2, [pc, #116]	; (ba78 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    ba04:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    ba08:	6010      	str	r0, [r2, #0]
    ba0a:	2901      	cmp	r1, #1
    ba0c:	bf08      	it	eq
    ba0e:	f7ff fd25 	bleq	b45c <MPSL_IRQ_TIMER0_Handler+0x100>
    ba12:	702f      	strb	r7, [r5, #0]
    ba14:	4919      	ldr	r1, [pc, #100]	; (ba7c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    ba16:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    ba1a:	6088      	str	r0, [r1, #8]
    ba1c:	4918      	ldr	r1, [pc, #96]	; (ba80 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    ba1e:	f104 0010 	add.w	r0, r4, #16
    ba22:	fa06 f000 	lsl.w	r0, r6, r0
    ba26:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    ba2a:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    ba2e:	00a0      	lsls	r0, r4, #2
    ba30:	4408      	add	r0, r1
    ba32:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    ba36:	4a13      	ldr	r2, [pc, #76]	; (ba84 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    ba38:	6812      	ldr	r2, [r2, #0]
    ba3a:	1a80      	subs	r0, r0, r2
    ba3c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ba40:	2802      	cmp	r0, #2
    ba42:	d307      	bcc.n	ba54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    ba44:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    ba48:	2000      	movs	r0, #0
    ba4a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    ba4e:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    ba52:	500f      	str	r7, [r1, r0]
    ba54:	480c      	ldr	r0, [pc, #48]	; (ba88 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    ba56:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    ba5a:	9000      	str	r0, [sp, #0]
    ba5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ba60:	f240 31fe 	movw	r1, #1022	; 0x3fe
    ba64:	206c      	movs	r0, #108	; 0x6c
    ba66:	f000 fc77 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ba6a:	0000      	.short	0x0000
    ba6c:	40008000 	.word	0x40008000
    ba70:	40008140 	.word	0x40008140
    ba74:	200002de 	.word	0x200002de
    ba78:	4001f508 	.word	0x4001f508
    ba7c:	200002dc 	.word	0x200002dc
    ba80:	4000b000 	.word	0x4000b000
    ba84:	4000b504 	.word	0x4000b504
    ba88:	4000b140 	.word	0x4000b140

0000ba8c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    ba8c:	4825      	ldr	r0, [pc, #148]	; (bb24 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
    ba8e:	4a24      	ldr	r2, [pc, #144]	; (bb20 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
    ba90:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    ba94:	4924      	ldr	r1, [pc, #144]	; (bb28 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
    ba96:	1d03      	adds	r3, r0, #4
    ba98:	f891 c000 	ldrb.w	ip, [r1]
    ba9c:	2100      	movs	r1, #0
    ba9e:	f1bc 0f00 	cmp.w	ip, #0
    baa2:	d010      	beq.n	bac6 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    baa4:	4a21      	ldr	r2, [pc, #132]	; (bb2c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
    baa6:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    baaa:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    baae:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bab2:	bf00      	nop
    bab4:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    bab8:	2a00      	cmp	r2, #0
    baba:	bf04      	itt	eq
    babc:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    bac0:	2800      	cmpeq	r0, #0
    bac2:	d111      	bne.n	bae8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
    bac4:	e00a      	b.n	badc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    bac6:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    baca:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    bace:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    bad2:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    bad6:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bada:	e7eb      	b.n	bab4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    badc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    bae0:	f44f 6000 	mov.w	r0, #2048	; 0x800
    bae4:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    bae8:	4811      	ldr	r0, [pc, #68]	; (bb30 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
    baea:	f04f 32ff 	mov.w	r2, #4294967295
    baee:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    baf2:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    baf6:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    bafa:	f100 0204 	add.w	r2, r0, #4
    bafe:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bb02:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bb06:	f102 0204 	add.w	r2, r2, #4
    bb0a:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bb0e:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
    bb12:	f102 0204 	add.w	r2, r2, #4
    bb16:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bb1a:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    bb1e:	4770      	bx	lr
    bb20:	fffbfffd 	.word	0xfffbfffd
    bb24:	4000b000 	.word	0x4000b000
    bb28:	200002de 	.word	0x200002de
    bb2c:	fffafffd 	.word	0xfffafffd
    bb30:	40008000 	.word	0x40008000

0000bb34 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    bb34:	b510      	push	{r4, lr}
    bb36:	2807      	cmp	r0, #7
    bb38:	d20d      	bcs.n	bb56 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    bb3a:	e8df f000 	tbb	[pc, r0]
    bb3e:	0404      	.short	0x0404
    bb40:	06060404 	.word	0x06060404
    bb44:	0006      	.short	0x0006
    bb46:	4906      	ldr	r1, [pc, #24]	; (bb60 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    bb48:	e002      	b.n	bb50 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    bb4a:	1f00      	subs	r0, r0, #4
    bb4c:	4905      	ldr	r1, [pc, #20]	; (bb64 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    bb4e:	b2c0      	uxtb	r0, r0
    bb50:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    bb54:	bd10      	pop	{r4, pc}
    bb56:	f240 319e 	movw	r1, #926	; 0x39e
    bb5a:	206c      	movs	r0, #108	; 0x6c
    bb5c:	f000 fbfc 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bb60:	40008140 	.word	0x40008140
    bb64:	4000b140 	.word	0x4000b140

0000bb68 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    bb68:	b510      	push	{r4, lr}
    bb6a:	2807      	cmp	r0, #7
    bb6c:	d20d      	bcs.n	bb8a <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    bb6e:	e8df f000 	tbb	[pc, r0]
    bb72:	0404      	.short	0x0404
    bb74:	06060404 	.word	0x06060404
    bb78:	0006      	.short	0x0006
    bb7a:	4906      	ldr	r1, [pc, #24]	; (bb94 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    bb7c:	e002      	b.n	bb84 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    bb7e:	1f00      	subs	r0, r0, #4
    bb80:	4905      	ldr	r1, [pc, #20]	; (bb98 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    bb82:	b2c0      	uxtb	r0, r0
    bb84:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    bb88:	bd10      	pop	{r4, pc}
    bb8a:	f240 319e 	movw	r1, #926	; 0x39e
    bb8e:	206c      	movs	r0, #108	; 0x6c
    bb90:	f000 fbe2 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bb94:	40008140 	.word	0x40008140
    bb98:	4000b140 	.word	0x4000b140

0000bb9c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    bb9c:	b570      	push	{r4, r5, r6, lr}
    bb9e:	481f      	ldr	r0, [pc, #124]	; (bc1c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
    bba0:	2400      	movs	r4, #0
    bba2:	2104      	movs	r1, #4
    bba4:	7004      	strb	r4, [r0, #0]
    bba6:	1e80      	subs	r0, r0, #2
    bba8:	7001      	strb	r1, [r0, #0]
    bbaa:	0589      	lsls	r1, r1, #22
    bbac:	60c4      	str	r4, [r0, #12]
    bbae:	6081      	str	r1, [r0, #8]
    bbb0:	f7ff fc54 	bl	b45c <MPSL_IRQ_TIMER0_Handler+0x100>
    bbb4:	2501      	movs	r5, #1
    bbb6:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    bbba:	02eb      	lsls	r3, r5, #11
    bbbc:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    bbc0:	f3bf 8f4f 	dsb	sy
    bbc4:	f3bf 8f6f 	isb	sy
    bbc8:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    bbcc:	4814      	ldr	r0, [pc, #80]	; (bc20 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
    bbce:	6045      	str	r5, [r0, #4]
    bbd0:	6085      	str	r5, [r0, #8]
    bbd2:	4914      	ldr	r1, [pc, #80]	; (bc24 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
    bbd4:	680a      	ldr	r2, [r1, #0]
    bbd6:	2a00      	cmp	r2, #0
    bbd8:	d1fc      	bne.n	bbd4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
    bbda:	1e51      	subs	r1, r2, #1
    bbdc:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    bbe0:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    bbe4:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    bbe8:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    bbec:	490e      	ldr	r1, [pc, #56]	; (bc28 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
    bbee:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    bbf2:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    bbf6:	1d09      	adds	r1, r1, #4
    bbf8:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    bbfc:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    bc00:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    bc04:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    bc08:	6005      	str	r5, [r0, #0]
    bc0a:	f44f 7182 	mov.w	r1, #260	; 0x104
    bc0e:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
    bc12:	2102      	movs	r1, #2
    bc14:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    bc18:	bd70      	pop	{r4, r5, r6, pc}
    bc1a:	0000      	.short	0x0000
    bc1c:	200002de 	.word	0x200002de
    bc20:	4000b000 	.word	0x4000b000
    bc24:	4000b504 	.word	0x4000b504
    bc28:	4000b004 	.word	0x4000b004

0000bc2c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    bc2c:	4808      	ldr	r0, [pc, #32]	; (bc50 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    bc2e:	f990 0000 	ldrsb.w	r0, [r0]
    bc32:	2800      	cmp	r0, #0
    bc34:	bfb8      	it	lt
    bc36:	4770      	bxlt	lr
    bc38:	f000 011f 	and.w	r1, r0, #31
    bc3c:	2201      	movs	r2, #1
    bc3e:	fa02 f101 	lsl.w	r1, r2, r1
    bc42:	0940      	lsrs	r0, r0, #5
    bc44:	0080      	lsls	r0, r0, #2
    bc46:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bc4a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    bc4e:	4770      	bx	lr
    bc50:	2000036a 	.word	0x2000036a

0000bc54 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    bc54:	4803      	ldr	r0, [pc, #12]	; (bc64 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    bc56:	7800      	ldrb	r0, [r0, #0]
    bc58:	2803      	cmp	r0, #3
    bc5a:	bf0c      	ite	eq
    bc5c:	2001      	moveq	r0, #1
    bc5e:	2000      	movne	r0, #0
    bc60:	4770      	bx	lr
    bc62:	0000      	.short	0x0000
    bc64:	2000033c 	.word	0x2000033c

0000bc68 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    bc68:	4801      	ldr	r0, [pc, #4]	; (bc70 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    bc6a:	8840      	ldrh	r0, [r0, #2]
    bc6c:	4770      	bx	lr
    bc6e:	0000      	.short	0x0000
    bc70:	2000033c 	.word	0x2000033c

0000bc74 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    bc74:	4803      	ldr	r0, [pc, #12]	; (bc84 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    bc76:	7800      	ldrb	r0, [r0, #0]
    bc78:	2802      	cmp	r0, #2
    bc7a:	bf16      	itet	ne
    bc7c:	2803      	cmpne	r0, #3
    bc7e:	2001      	moveq	r0, #1
    bc80:	2000      	movne	r0, #0
    bc82:	4770      	bx	lr
    bc84:	2000033c 	.word	0x2000033c

0000bc88 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    bc88:	4802      	ldr	r0, [pc, #8]	; (bc94 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    bc8a:	2100      	movs	r1, #0
    bc8c:	7001      	strb	r1, [r0, #0]
    bc8e:	8041      	strh	r1, [r0, #2]
    bc90:	4770      	bx	lr
    bc92:	0000      	.short	0x0000
    bc94:	2000033c 	.word	0x2000033c

0000bc98 <MPSL_IRQ_CLOCK_Handler>:
    bc98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bc9c:	4c16      	ldr	r4, [pc, #88]	; (bcf8 <MPSL_IRQ_CLOCK_Handler+0x60>)
    bc9e:	7a60      	ldrb	r0, [r4, #9]
    bca0:	2800      	cmp	r0, #0
    bca2:	d027      	beq.n	bcf4 <MPSL_IRQ_CLOCK_Handler+0x5c>
    bca4:	f44f 7180 	mov.w	r1, #256	; 0x100
    bca8:	058d      	lsls	r5, r1, #22
    bcaa:	4628      	mov	r0, r5
    bcac:	f004 fb77 	bl	1039e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bcb0:	4680      	mov	r8, r0
    bcb2:	f44f 7182 	mov.w	r1, #260	; 0x104
    bcb6:	4628      	mov	r0, r5
    bcb8:	f004 fb71 	bl	1039e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bcbc:	2600      	movs	r6, #0
    bcbe:	4607      	mov	r7, r0
    bcc0:	f1b8 0f00 	cmp.w	r8, #0
    bcc4:	d009      	beq.n	bcda <MPSL_IRQ_CLOCK_Handler+0x42>
    bcc6:	2001      	movs	r0, #1
    bcc8:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bccc:	7920      	ldrb	r0, [r4, #4]
    bcce:	b120      	cbz	r0, bcda <MPSL_IRQ_CLOCK_Handler+0x42>
    bcd0:	7126      	strb	r6, [r4, #4]
    bcd2:	69e0      	ldr	r0, [r4, #28]
    bcd4:	b108      	cbz	r0, bcda <MPSL_IRQ_CLOCK_Handler+0x42>
    bcd6:	4780      	blx	r0
    bcd8:	61e6      	str	r6, [r4, #28]
    bcda:	b137      	cbz	r7, bcea <MPSL_IRQ_CLOCK_Handler+0x52>
    bcdc:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    bce0:	2002      	movs	r0, #2
    bce2:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bce6:	f000 fa57 	bl	c198 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    bcea:	4640      	mov	r0, r8
    bcec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bcf0:	f000 b858 	b.w	bda4 <MPSL_IRQ_CLOCK_Handler+0x10c>
    bcf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bcf8:	200002ec 	.word	0x200002ec
    bcfc:	b510      	push	{r4, lr}
    bcfe:	f004 fbf8 	bl	104f2 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    bd02:	b930      	cbnz	r0, bd12 <MPSL_IRQ_CLOCK_Handler+0x7a>
    bd04:	f004 fc16 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bd08:	b918      	cbnz	r0, bd12 <MPSL_IRQ_CLOCK_Handler+0x7a>
    bd0a:	f004 fc49 	bl	105a0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    bd0e:	2800      	cmp	r0, #0
    bd10:	d002      	beq.n	bd18 <MPSL_IRQ_CLOCK_Handler+0x80>
    bd12:	4902      	ldr	r1, [pc, #8]	; (bd1c <MPSL_IRQ_CLOCK_Handler+0x84>)
    bd14:	2002      	movs	r0, #2
    bd16:	6008      	str	r0, [r1, #0]
    bd18:	bd10      	pop	{r4, pc}
    bd1a:	0000      	.short	0x0000
    bd1c:	40000c34 	.word	0x40000c34
    bd20:	b570      	push	{r4, r5, r6, lr}
    bd22:	f000 f99b 	bl	c05c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    bd26:	f000 fa9f 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    bd2a:	4c09      	ldr	r4, [pc, #36]	; (bd50 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    bd2c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bd30:	b130      	cbz	r0, bd40 <MPSL_IRQ_CLOCK_Handler+0xa8>
    bd32:	f7ff ffe3 	bl	bcfc <MPSL_IRQ_CLOCK_Handler+0x64>
    bd36:	2001      	movs	r0, #1
    bd38:	6128      	str	r0, [r5, #16]
    bd3a:	2004      	movs	r0, #4
    bd3c:	72a0      	strb	r0, [r4, #10]
    bd3e:	e004      	b.n	bd4a <MPSL_IRQ_CLOCK_Handler+0xb2>
    bd40:	2003      	movs	r0, #3
    bd42:	72a0      	strb	r0, [r4, #10]
    bd44:	2001      	movs	r0, #1
    bd46:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    bd4a:	2000      	movs	r0, #0
    bd4c:	71e0      	strb	r0, [r4, #7]
    bd4e:	bd70      	pop	{r4, r5, r6, pc}
    bd50:	200002ec 	.word	0x200002ec
    bd54:	b570      	push	{r4, r5, r6, lr}
    bd56:	4c12      	ldr	r4, [pc, #72]	; (bda0 <MPSL_IRQ_CLOCK_Handler+0x108>)
    bd58:	79a0      	ldrb	r0, [r4, #6]
    bd5a:	b1e0      	cbz	r0, bd96 <MPSL_IRQ_CLOCK_Handler+0xfe>
    bd5c:	79e1      	ldrb	r1, [r4, #7]
    bd5e:	1e40      	subs	r0, r0, #1
    bd60:	4281      	cmp	r1, r0
    bd62:	da18      	bge.n	bd96 <MPSL_IRQ_CLOCK_Handler+0xfe>
    bd64:	f000 fa80 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    bd68:	4605      	mov	r5, r0
    bd6a:	f000 fb69 	bl	c440 <mpsl_temperature_get>
    bd6e:	79a1      	ldrb	r1, [r4, #6]
    bd70:	2901      	cmp	r1, #1
    bd72:	d902      	bls.n	bd7a <MPSL_IRQ_CLOCK_Handler+0xe2>
    bd74:	79e1      	ldrb	r1, [r4, #7]
    bd76:	1c49      	adds	r1, r1, #1
    bd78:	71e1      	strb	r1, [r4, #7]
    bd7a:	b10d      	cbz	r5, bd80 <MPSL_IRQ_CLOCK_Handler+0xe8>
    bd7c:	6961      	ldr	r1, [r4, #20]
    bd7e:	e000      	b.n	bd82 <MPSL_IRQ_CLOCK_Handler+0xea>
    bd80:	6921      	ldr	r1, [r4, #16]
    bd82:	1a41      	subs	r1, r0, r1
    bd84:	2902      	cmp	r1, #2
    bd86:	da02      	bge.n	bd8e <MPSL_IRQ_CLOCK_Handler+0xf6>
    bd88:	f111 0f02 	cmn.w	r1, #2
    bd8c:	dc07      	bgt.n	bd9e <MPSL_IRQ_CLOCK_Handler+0x106>
    bd8e:	b10d      	cbz	r5, bd94 <MPSL_IRQ_CLOCK_Handler+0xfc>
    bd90:	6160      	str	r0, [r4, #20]
    bd92:	e000      	b.n	bd96 <MPSL_IRQ_CLOCK_Handler+0xfe>
    bd94:	6120      	str	r0, [r4, #16]
    bd96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bd9a:	f7ff bfc1 	b.w	bd20 <MPSL_IRQ_CLOCK_Handler+0x88>
    bd9e:	bd70      	pop	{r4, r5, r6, pc}
    bda0:	200002ec 	.word	0x200002ec
    bda4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bda8:	4606      	mov	r6, r0
    bdaa:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bdae:	f44f 7186 	mov.w	r1, #268	; 0x10c
    bdb2:	4628      	mov	r0, r5
    bdb4:	f004 faf3 	bl	1039e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bdb8:	4680      	mov	r8, r0
    bdba:	f44f 7188 	mov.w	r1, #272	; 0x110
    bdbe:	4628      	mov	r0, r5
    bdc0:	f004 faed 	bl	1039e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bdc4:	4c27      	ldr	r4, [pc, #156]	; (be64 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    bdc6:	4682      	mov	sl, r0
    bdc8:	7827      	ldrb	r7, [r4, #0]
    bdca:	f104 0008 	add.w	r0, r4, #8
    bdce:	f004 fb5a 	bl	10486 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    bdd2:	b110      	cbz	r0, bdda <MPSL_IRQ_CLOCK_Handler+0x142>
    bdd4:	f44f 71db 	mov.w	r1, #438	; 0x1b6
    bdd8:	e016      	b.n	be08 <MPSL_IRQ_CLOCK_Handler+0x170>
    bdda:	f04f 0901 	mov.w	r9, #1
    bdde:	b146      	cbz	r6, bdf2 <MPSL_IRQ_CLOCK_Handler+0x15a>
    bde0:	7aa0      	ldrb	r0, [r4, #10]
    bde2:	2803      	cmp	r0, #3
    bde4:	d105      	bne.n	bdf2 <MPSL_IRQ_CLOCK_Handler+0x15a>
    bde6:	2004      	movs	r0, #4
    bde8:	72a0      	strb	r0, [r4, #10]
    bdea:	f7ff ff87 	bl	bcfc <MPSL_IRQ_CLOCK_Handler+0x64>
    bdee:	f8c5 9010 	str.w	r9, [r5, #16]
    bdf2:	2600      	movs	r6, #0
    bdf4:	f1b8 0f00 	cmp.w	r8, #0
    bdf8:	d018      	beq.n	be2c <MPSL_IRQ_CLOCK_Handler+0x194>
    bdfa:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    bdfe:	7aa0      	ldrb	r0, [r4, #10]
    be00:	2804      	cmp	r0, #4
    be02:	d004      	beq.n	be0e <MPSL_IRQ_CLOCK_Handler+0x176>
    be04:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    be08:	206d      	movs	r0, #109	; 0x6d
    be0a:	f000 faa5 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    be0e:	f004 fb70 	bl	104f2 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    be12:	b928      	cbnz	r0, be20 <MPSL_IRQ_CLOCK_Handler+0x188>
    be14:	f004 fb8e 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    be18:	b910      	cbnz	r0, be20 <MPSL_IRQ_CLOCK_Handler+0x188>
    be1a:	f004 fbc1 	bl	105a0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    be1e:	b108      	cbz	r0, be24 <MPSL_IRQ_CLOCK_Handler+0x18c>
    be20:	4811      	ldr	r0, [pc, #68]	; (be68 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    be22:	6006      	str	r6, [r0, #0]
    be24:	2002      	movs	r0, #2
    be26:	72a0      	strb	r0, [r4, #10]
    be28:	f000 f8fc 	bl	c024 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    be2c:	f1ba 0f00 	cmp.w	sl, #0
    be30:	d008      	beq.n	be44 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    be32:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    be36:	7aa0      	ldrb	r0, [r4, #10]
    be38:	2802      	cmp	r0, #2
    be3a:	d101      	bne.n	be40 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    be3c:	f7ff ff8a 	bl	bd54 <MPSL_IRQ_CLOCK_Handler+0xbc>
    be40:	f8c5 9014 	str.w	r9, [r5, #20]
    be44:	b13f      	cbz	r7, be56 <MPSL_IRQ_CLOCK_Handler+0x1be>
    be46:	7026      	strb	r6, [r4, #0]
    be48:	7aa0      	ldrb	r0, [r4, #10]
    be4a:	2802      	cmp	r0, #2
    be4c:	d101      	bne.n	be52 <MPSL_IRQ_CLOCK_Handler+0x1ba>
    be4e:	f7ff ff67 	bl	bd20 <MPSL_IRQ_CLOCK_Handler+0x88>
    be52:	f000 f8e7 	bl	c024 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    be56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    be5a:	4802      	ldr	r0, [pc, #8]	; (be64 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    be5c:	3008      	adds	r0, #8
    be5e:	f004 bb29 	b.w	104b4 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    be62:	0000      	.short	0x0000
    be64:	200002ec 	.word	0x200002ec
    be68:	40000c34 	.word	0x40000c34
    be6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be70:	4c49      	ldr	r4, [pc, #292]	; (bf98 <MPSL_IRQ_CLOCK_Handler+0x300>)
    be72:	2700      	movs	r7, #0
    be74:	4606      	mov	r6, r0
    be76:	61a7      	str	r7, [r4, #24]
    be78:	7842      	ldrb	r2, [r0, #1]
    be7a:	7881      	ldrb	r1, [r0, #2]
    be7c:	7800      	ldrb	r0, [r0, #0]
    be7e:	72e0      	strb	r0, [r4, #11]
    be80:	7162      	strb	r2, [r4, #5]
    be82:	71a1      	strb	r1, [r4, #6]
    be84:	71e7      	strb	r7, [r4, #7]
    be86:	f04f 0801 	mov.w	r8, #1
    be8a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    be8e:	2805      	cmp	r0, #5
    be90:	d225      	bcs.n	bede <MPSL_IRQ_CLOCK_Handler+0x246>
    be92:	e8df f000 	tbb	[pc, r0]
    be96:	0310      	.short	0x0310
    be98:	00222006 	.word	0x00222006
    be9c:	f8c4 8018 	str.w	r8, [r4, #24]
    bea0:	e009      	b.n	beb6 <MPSL_IRQ_CLOCK_Handler+0x21e>
    bea2:	f000 f8db 	bl	c05c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    bea6:	2101      	movs	r1, #1
    bea8:	4628      	mov	r0, r5
    beaa:	f004 fa7d 	bl	103a8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    beae:	2800      	cmp	r0, #0
    beb0:	d0f9      	beq.n	bea6 <MPSL_IRQ_CLOCK_Handler+0x20e>
    beb2:	2002      	movs	r0, #2
    beb4:	61a0      	str	r0, [r4, #24]
    beb6:	f004 faa3 	bl	10400 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    beba:	b1c0      	cbz	r0, beee <MPSL_IRQ_CLOCK_Handler+0x256>
    bebc:	f000 f9ee 	bl	c29c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    bec0:	7e21      	ldrb	r1, [r4, #24]
    bec2:	f001 0103 	and.w	r1, r1, #3
    bec6:	4288      	cmp	r0, r1
    bec8:	d111      	bne.n	beee <MPSL_IRQ_CLOCK_Handler+0x256>
    beca:	79b0      	ldrb	r0, [r6, #6]
    becc:	b160      	cbz	r0, bee8 <MPSL_IRQ_CLOCK_Handler+0x250>
    bece:	2002      	movs	r0, #2
    bed0:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    bed4:	e044      	b.n	bf60 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    bed6:	4831      	ldr	r0, [pc, #196]	; (bf9c <MPSL_IRQ_CLOCK_Handler+0x304>)
    bed8:	e7ec      	b.n	beb4 <MPSL_IRQ_CLOCK_Handler+0x21c>
    beda:	4831      	ldr	r0, [pc, #196]	; (bfa0 <MPSL_IRQ_CLOCK_Handler+0x308>)
    bedc:	e7ea      	b.n	beb4 <MPSL_IRQ_CLOCK_Handler+0x21c>
    bede:	f240 313d 	movw	r1, #829	; 0x33d
    bee2:	206d      	movs	r0, #109	; 0x6d
    bee4:	f000 fa38 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bee8:	f000 f9ac 	bl	c244 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    beec:	e038      	b.n	bf60 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    beee:	f8c5 800c 	str.w	r8, [r5, #12]
    bef2:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    bef6:	69a0      	ldr	r0, [r4, #24]
    bef8:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    befc:	f004 fae5 	bl	104ca <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    bf00:	b940      	cbnz	r0, bf14 <MPSL_IRQ_CLOCK_Handler+0x27c>
    bf02:	f004 faec 	bl	104de <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    bf06:	b928      	cbnz	r0, bf14 <MPSL_IRQ_CLOCK_Handler+0x27c>
    bf08:	f004 fb00 	bl	1050c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    bf0c:	b910      	cbnz	r0, bf14 <MPSL_IRQ_CLOCK_Handler+0x27c>
    bf0e:	f004 fb11 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bf12:	b138      	cbz	r0, bf24 <MPSL_IRQ_CLOCK_Handler+0x28c>
    bf14:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bf18:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    bf1c:	4921      	ldr	r1, [pc, #132]	; (bfa4 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    bf1e:	f3c0 3042 	ubfx	r0, r0, #13, #3
    bf22:	6008      	str	r0, [r1, #0]
    bf24:	f004 fad1 	bl	104ca <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    bf28:	b940      	cbnz	r0, bf3c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    bf2a:	f004 fad8 	bl	104de <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    bf2e:	b928      	cbnz	r0, bf3c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    bf30:	f004 faec 	bl	1050c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    bf34:	b910      	cbnz	r0, bf3c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    bf36:	f004 fafd 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bf3a:	b118      	cbz	r0, bf44 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    bf3c:	4919      	ldr	r1, [pc, #100]	; (bfa4 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    bf3e:	3110      	adds	r1, #16
    bf40:	f8c1 8000 	str.w	r8, [r1]
    bf44:	f8c5 8008 	str.w	r8, [r5, #8]
    bf48:	2002      	movs	r0, #2
    bf4a:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    bf4e:	79b0      	ldrb	r0, [r6, #6]
    bf50:	b930      	cbnz	r0, bf60 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    bf52:	f000 f829 	bl	bfa8 <MPSL_IRQ_CLOCK_Handler+0x310>
    bf56:	2002      	movs	r0, #2
    bf58:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bf5c:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    bf60:	79a0      	ldrb	r0, [r4, #6]
    bf62:	b170      	cbz	r0, bf82 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    bf64:	7830      	ldrb	r0, [r6, #0]
    bf66:	b960      	cbnz	r0, bf82 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    bf68:	f000 f97e 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    bf6c:	4606      	mov	r6, r0
    bf6e:	f000 fa67 	bl	c440 <mpsl_temperature_get>
    bf72:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    bf76:	b116      	cbz	r6, bf7e <MPSL_IRQ_CLOCK_Handler+0x2e6>
    bf78:	e9c4 1004 	strd	r1, r0, [r4, #16]
    bf7c:	e001      	b.n	bf82 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    bf7e:	e9c4 0104 	strd	r0, r1, [r4, #16]
    bf82:	2101      	movs	r1, #1
    bf84:	4628      	mov	r0, r5
    bf86:	f004 fa0f 	bl	103a8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    bf8a:	b108      	cbz	r0, bf90 <MPSL_IRQ_CLOCK_Handler+0x2f8>
    bf8c:	f000 f966 	bl	c25c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    bf90:	72a7      	strb	r7, [r4, #10]
    bf92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bf96:	0000      	.short	0x0000
    bf98:	200002ec 	.word	0x200002ec
    bf9c:	00020001 	.word	0x00020001
    bfa0:	00030001 	.word	0x00030001
    bfa4:	4000053c 	.word	0x4000053c
    bfa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bfac:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bfb0:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    bfb4:	f010 0f02 	tst.w	r0, #2
    bfb8:	d011      	beq.n	bfde <MPSL_IRQ_CLOCK_Handler+0x346>
    bfba:	4c16      	ldr	r4, [pc, #88]	; (c014 <MPSL_IRQ_CLOCK_Handler+0x37c>)
    bfbc:	6820      	ldr	r0, [r4, #0]
    bfbe:	43c0      	mvns	r0, r0
    bfc0:	f340 1600 	sbfx	r6, r0, #4, #1
    bfc4:	6820      	ldr	r0, [r4, #0]
    bfc6:	f040 0010 	orr.w	r0, r0, #16
    bfca:	6020      	str	r0, [r4, #0]
    bfcc:	f44f 7782 	mov.w	r7, #260	; 0x104
    bfd0:	4639      	mov	r1, r7
    bfd2:	4628      	mov	r0, r5
    bfd4:	1c76      	adds	r6, r6, #1
    bfd6:	f004 f9e2 	bl	1039e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bfda:	b128      	cbz	r0, bfe8 <MPSL_IRQ_CLOCK_Handler+0x350>
    bfdc:	e00a      	b.n	bff4 <MPSL_IRQ_CLOCK_Handler+0x35c>
    bfde:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    bfe2:	206d      	movs	r0, #109	; 0x6d
    bfe4:	f000 f9b8 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bfe8:	f004 fae6 	bl	105b8 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
    bfec:	e002      	b.n	bff4 <MPSL_IRQ_CLOCK_Handler+0x35c>
    bfee:	bf00      	nop
    bff0:	f004 fae0 	bl	105b4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    bff4:	4639      	mov	r1, r7
    bff6:	4628      	mov	r0, r5
    bff8:	f004 f9d1 	bl	1039e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bffc:	2800      	cmp	r0, #0
    bffe:	d0f7      	beq.n	bff0 <MPSL_IRQ_CLOCK_Handler+0x358>
    c000:	f000 f920 	bl	c244 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    c004:	2e00      	cmp	r6, #0
    c006:	d103      	bne.n	c010 <MPSL_IRQ_CLOCK_Handler+0x378>
    c008:	6820      	ldr	r0, [r4, #0]
    c00a:	f020 0010 	bic.w	r0, r0, #16
    c00e:	6020      	str	r0, [r4, #0]
    c010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c014:	e000ed10 	.word	0xe000ed10

0000c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    c018:	4801      	ldr	r0, [pc, #4]	; (c020 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    c01a:	89c0      	ldrh	r0, [r0, #14]
    c01c:	4770      	bx	lr
    c01e:	0000      	.short	0x0000
    c020:	200002ec 	.word	0x200002ec

0000c024 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    c024:	b510      	push	{r4, lr}
    c026:	f3ef 8410 	mrs	r4, PRIMASK
    c02a:	b672      	cpsid	i
    c02c:	480a      	ldr	r0, [pc, #40]	; (c058 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    c02e:	7841      	ldrb	r1, [r0, #1]
    c030:	b129      	cbz	r1, c03e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    c032:	7841      	ldrb	r1, [r0, #1]
    c034:	1e49      	subs	r1, r1, #1
    c036:	7041      	strb	r1, [r0, #1]
    c038:	7841      	ldrb	r1, [r0, #1]
    c03a:	b129      	cbz	r1, c048 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    c03c:	e008      	b.n	c050 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    c03e:	f240 1119 	movw	r1, #281	; 0x119
    c042:	206d      	movs	r0, #109	; 0x6d
    c044:	f000 f988 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c048:	7880      	ldrb	r0, [r0, #2]
    c04a:	b908      	cbnz	r0, c050 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    c04c:	f000 f91a 	bl	c284 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    c050:	2c00      	cmp	r4, #0
    c052:	d100      	bne.n	c056 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    c054:	b662      	cpsie	i
    c056:	bd10      	pop	{r4, pc}
    c058:	200002ec 	.word	0x200002ec

0000c05c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    c05c:	b510      	push	{r4, lr}
    c05e:	f3ef 8410 	mrs	r4, PRIMASK
    c062:	b672      	cpsid	i
    c064:	4806      	ldr	r0, [pc, #24]	; (c080 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    c066:	7841      	ldrb	r1, [r0, #1]
    c068:	1c49      	adds	r1, r1, #1
    c06a:	7041      	strb	r1, [r0, #1]
    c06c:	7840      	ldrb	r0, [r0, #1]
    c06e:	2801      	cmp	r0, #1
    c070:	d101      	bne.n	c076 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    c072:	f004 f9b0 	bl	103d6 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    c076:	2c00      	cmp	r4, #0
    c078:	d100      	bne.n	c07c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    c07a:	b662      	cpsie	i
    c07c:	bd10      	pop	{r4, pc}
    c07e:	0000      	.short	0x0000
    c080:	200002ec 	.word	0x200002ec

0000c084 <mpsl_clock_hfclk_release>:
    c084:	4805      	ldr	r0, [pc, #20]	; (c09c <mpsl_clock_hfclk_release+0x18>)
    c086:	b510      	push	{r4, lr}
    c088:	78c1      	ldrb	r1, [r0, #3]
    c08a:	b121      	cbz	r1, c096 <mpsl_clock_hfclk_release+0x12>
    c08c:	2100      	movs	r1, #0
    c08e:	7101      	strb	r1, [r0, #4]
    c090:	70c1      	strb	r1, [r0, #3]
    c092:	f7ff ffc7 	bl	c024 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    c096:	2000      	movs	r0, #0
    c098:	bd10      	pop	{r4, pc}
    c09a:	0000      	.short	0x0000
    c09c:	200002ec 	.word	0x200002ec

0000c0a0 <mpsl_clock_hfclk_request>:
    c0a0:	b570      	push	{r4, r5, r6, lr}
    c0a2:	4c0c      	ldr	r4, [pc, #48]	; (c0d4 <mpsl_clock_hfclk_request+0x34>)
    c0a4:	78e1      	ldrb	r1, [r4, #3]
    c0a6:	b961      	cbnz	r1, c0c2 <mpsl_clock_hfclk_request+0x22>
    c0a8:	2501      	movs	r5, #1
    c0aa:	70e5      	strb	r5, [r4, #3]
    c0ac:	61e0      	str	r0, [r4, #28]
    c0ae:	f7ff ffd5 	bl	c05c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c0b2:	f000 f8d9 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c0b6:	b130      	cbz	r0, c0c6 <mpsl_clock_hfclk_request+0x26>
    c0b8:	69e0      	ldr	r0, [r4, #28]
    c0ba:	b110      	cbz	r0, c0c2 <mpsl_clock_hfclk_request+0x22>
    c0bc:	4780      	blx	r0
    c0be:	2000      	movs	r0, #0
    c0c0:	61e0      	str	r0, [r4, #28]
    c0c2:	2000      	movs	r0, #0
    c0c4:	bd70      	pop	{r4, r5, r6, pc}
    c0c6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c0ca:	7125      	strb	r5, [r4, #4]
    c0cc:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    c0d0:	e7f7      	b.n	c0c2 <mpsl_clock_hfclk_request+0x22>
    c0d2:	0000      	.short	0x0000
    c0d4:	200002ec 	.word	0x200002ec

0000c0d8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    c0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c0dc:	0005      	movs	r5, r0
    c0de:	f06f 0015 	mvn.w	r0, #21
    c0e2:	d03f      	beq.n	c164 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c0e4:	7829      	ldrb	r1, [r5, #0]
    c0e6:	2904      	cmp	r1, #4
    c0e8:	d83c      	bhi.n	c164 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c0ea:	2900      	cmp	r1, #0
    c0ec:	7869      	ldrb	r1, [r5, #1]
    c0ee:	d03b      	beq.n	c168 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    c0f0:	2900      	cmp	r1, #0
    c0f2:	d137      	bne.n	c164 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c0f4:	78a9      	ldrb	r1, [r5, #2]
    c0f6:	2900      	cmp	r1, #0
    c0f8:	d134      	bne.n	c164 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c0fa:	2000      	movs	r0, #0
    c0fc:	f004 f93e 	bl	1037c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    c100:	2000      	movs	r0, #0
    c102:	f004 f92e 	bl	10362 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    c106:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    c10a:	f04f 31ff 	mov.w	r1, #4294967295
    c10e:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    c112:	2600      	movs	r6, #0
    c114:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    c118:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    c11c:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    c120:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    c124:	4c14      	ldr	r4, [pc, #80]	; (c178 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    c126:	7066      	strb	r6, [r4, #1]
    c128:	88a8      	ldrh	r0, [r5, #4]
    c12a:	81a0      	strh	r0, [r4, #12]
    c12c:	f004 f94a 	bl	103c4 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    c130:	2701      	movs	r7, #1
    c132:	b108      	cbz	r0, c138 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    c134:	70e7      	strb	r7, [r4, #3]
    c136:	7067      	strb	r7, [r4, #1]
    c138:	2101      	movs	r1, #1
    c13a:	4640      	mov	r0, r8
    c13c:	f004 f934 	bl	103a8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c140:	b108      	cbz	r0, c146 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    c142:	f000 f88b 	bl	c25c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    c146:	f240 50f5 	movw	r0, #1525	; 0x5f5
    c14a:	81e0      	strh	r0, [r4, #14]
    c14c:	4628      	mov	r0, r5
    c14e:	f7ff fe8d 	bl	be6c <MPSL_IRQ_CLOCK_Handler+0x1d4>
    c152:	7267      	strb	r7, [r4, #9]
    c154:	2000      	movs	r0, #0
    c156:	f004 f904 	bl	10362 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    c15a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c15e:	4630      	mov	r0, r6
    c160:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    c164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c168:	2900      	cmp	r1, #0
    c16a:	d0fb      	beq.n	c164 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c16c:	2920      	cmp	r1, #32
    c16e:	d8f9      	bhi.n	c164 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c170:	78a9      	ldrb	r1, [r5, #2]
    c172:	2921      	cmp	r1, #33	; 0x21
    c174:	d9c1      	bls.n	c0fa <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    c176:	e7f5      	b.n	c164 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c178:	200002ec 	.word	0x200002ec

0000c17c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    c17c:	4801      	ldr	r0, [pc, #4]	; (c184 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    c17e:	8980      	ldrh	r0, [r0, #12]
    c180:	4770      	bx	lr
    c182:	0000      	.short	0x0000
    c184:	200002ec 	.word	0x200002ec

0000c188 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    c188:	4802      	ldr	r0, [pc, #8]	; (c194 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    c18a:	7a80      	ldrb	r0, [r0, #10]
    c18c:	2800      	cmp	r0, #0
    c18e:	d000      	beq.n	c192 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    c190:	2001      	movs	r0, #1
    c192:	4770      	bx	lr
    c194:	200002ec 	.word	0x200002ec

0000c198 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    c198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c19a:	4d1f      	ldr	r5, [pc, #124]	; (c218 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c19c:	7ae8      	ldrb	r0, [r5, #11]
    c19e:	2800      	cmp	r0, #0
    c1a0:	d10f      	bne.n	c1c2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c1a2:	7e28      	ldrb	r0, [r5, #24]
    c1a4:	f000 0003 	and.w	r0, r0, #3
    c1a8:	f004 f91a 	bl	103e0 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c1ac:	2800      	cmp	r0, #0
    c1ae:	d008      	beq.n	c1c2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c1b0:	f3ef 8110 	mrs	r1, PRIMASK
    c1b4:	b672      	cpsid	i
    c1b6:	f7ff ffe7 	bl	c188 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    c1ba:	b118      	cbz	r0, c1c4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    c1bc:	2900      	cmp	r1, #0
    c1be:	d100      	bne.n	c1c2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c1c0:	b662      	cpsie	i
    c1c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c1c4:	2601      	movs	r6, #1
    c1c6:	72ae      	strb	r6, [r5, #10]
    c1c8:	b901      	cbnz	r1, c1cc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    c1ca:	b662      	cpsie	i
    c1cc:	2018      	movs	r0, #24
    c1ce:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    c1d2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    c1d6:	61a6      	str	r6, [r4, #24]
    c1d8:	f44f 7020 	mov.w	r0, #640	; 0x280
    c1dc:	f8ad 0000 	strh.w	r0, [sp]
    c1e0:	f8bd 0000 	ldrh.w	r0, [sp]
    c1e4:	1e41      	subs	r1, r0, #1
    c1e6:	f8ad 1000 	strh.w	r1, [sp]
    c1ea:	d2f9      	bcs.n	c1e0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    c1ec:	2700      	movs	r7, #0
    c1ee:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    c1f2:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    c1f6:	4808      	ldr	r0, [pc, #32]	; (c218 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c1f8:	3008      	adds	r0, #8
    c1fa:	f004 f957 	bl	104ac <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    c1fe:	702f      	strb	r7, [r5, #0]
    c200:	f7ff fd8e 	bl	bd20 <MPSL_IRQ_CLOCK_Handler+0x88>
    c204:	6166      	str	r6, [r4, #20]
    c206:	7968      	ldrb	r0, [r5, #5]
    c208:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    c20c:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    c210:	2018      	movs	r0, #24
    c212:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    c216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c218:	200002ec 	.word	0x200002ec

0000c21c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c21c:	4602      	mov	r2, r0
    c21e:	b510      	push	{r4, lr}
    c220:	2000      	movs	r0, #0
    c222:	2900      	cmp	r1, #0
    c224:	d00a      	beq.n	c23c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c226:	2a00      	cmp	r2, #0
    c228:	d008      	beq.n	c23c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c22a:	fba2 0101 	umull	r0, r1, r2, r1
    c22e:	1e40      	subs	r0, r0, #1
    c230:	4a03      	ldr	r2, [pc, #12]	; (c240 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x24>)
    c232:	f141 31ff 	adc.w	r1, r1, #4294967295
    c236:	f004 f9c1 	bl	105bc <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    c23a:	1c40      	adds	r0, r0, #1
    c23c:	bd10      	pop	{r4, pc}
    c23e:	0000      	.short	0x0000
    c240:	000f4240 	.word	0x000f4240

0000c244 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    c244:	b510      	push	{r4, lr}
    c246:	4c04      	ldr	r4, [pc, #16]	; (c258 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    c248:	7e20      	ldrb	r0, [r4, #24]
    c24a:	f000 0003 	and.w	r0, r0, #3
    c24e:	f004 f8c7 	bl	103e0 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c252:	2800      	cmp	r0, #0
    c254:	d0f8      	beq.n	c248 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    c256:	bd10      	pop	{r4, pc}
    c258:	200002ec 	.word	0x200002ec

0000c25c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    c25c:	4901      	ldr	r1, [pc, #4]	; (c264 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    c25e:	2001      	movs	r0, #1
    c260:	7008      	strb	r0, [r1, #0]
    c262:	4770      	bx	lr
    c264:	2000036b 	.word	0x2000036b

0000c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    c268:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c26c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    c270:	b918      	cbnz	r0, c27a <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    c272:	4803      	ldr	r0, [pc, #12]	; (c280 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    c274:	7800      	ldrb	r0, [r0, #0]
    c276:	2800      	cmp	r0, #0
    c278:	d000      	beq.n	c27c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    c27a:	2001      	movs	r0, #1
    c27c:	4770      	bx	lr
    c27e:	0000      	.short	0x0000
    c280:	2000036b 	.word	0x2000036b

0000c284 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    c284:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c288:	2101      	movs	r1, #1
    c28a:	6041      	str	r1, [r0, #4]
    c28c:	2100      	movs	r1, #0
    c28e:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c292:	4801      	ldr	r0, [pc, #4]	; (c298 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    c294:	7001      	strb	r1, [r0, #0]
    c296:	4770      	bx	lr
    c298:	2000036b 	.word	0x2000036b

0000c29c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    c29c:	4802      	ldr	r0, [pc, #8]	; (c2a8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    c29e:	6800      	ldr	r0, [r0, #0]
    c2a0:	f000 0003 	and.w	r0, r0, #3
    c2a4:	4770      	bx	lr
    c2a6:	0000      	.short	0x0000
    c2a8:	4000041c 	.word	0x4000041c
    c2ac:	b510      	push	{r4, lr}
    c2ae:	b131      	cbz	r1, c2be <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    c2b0:	2901      	cmp	r1, #1
    c2b2:	d007      	beq.n	c2c4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    c2b4:	f240 3102 	movw	r1, #770	; 0x302
    c2b8:	a005      	add	r0, pc, #20	; (adr r0, c2d0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    c2ba:	f000 f821 	bl	c300 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    c2be:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    c2c2:	e001      	b.n	c2c8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    c2c4:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    c2c8:	f000 0001 	and.w	r0, r0, #1
    c2cc:	bd10      	pop	{r4, pc}
    c2ce:	0000      	.short	0x0000
    c2d0:	5f66726e 	.word	0x5f66726e
    c2d4:	636f6c63 	.word	0x636f6c63
    c2d8:	00682e6b 	.word	0x00682e6b
    c2dc:	f3bf 8f4f 	dsb	sy
    c2e0:	4805      	ldr	r0, [pc, #20]	; (c2f8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    c2e2:	6801      	ldr	r1, [r0, #0]
    c2e4:	4a05      	ldr	r2, [pc, #20]	; (c2fc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    c2e6:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    c2ea:	4311      	orrs	r1, r2
    c2ec:	6001      	str	r1, [r0, #0]
    c2ee:	f3bf 8f4f 	dsb	sy
    c2f2:	bf00      	nop
    c2f4:	e7fd      	b.n	c2f2 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    c2f6:	0000      	.short	0x0000
    c2f8:	e000ed0c 	.word	0xe000ed0c
    c2fc:	05fa0004 	.word	0x05fa0004

0000c300 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    c300:	b672      	cpsid	i
    c302:	4a03      	ldr	r2, [pc, #12]	; (c310 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    c304:	6852      	ldr	r2, [r2, #4]
    c306:	b102      	cbz	r2, c30a <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    c308:	4790      	blx	r2
    c30a:	f7ff ffe7 	bl	c2dc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c30e:	0000      	.short	0x0000
    c310:	2000030c 	.word	0x2000030c
    c314:	4806      	ldr	r0, [pc, #24]	; (c330 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    c316:	b510      	push	{r4, lr}
    c318:	2100      	movs	r1, #0
    c31a:	6001      	str	r1, [r0, #0]
    c31c:	2101      	movs	r1, #1
    c31e:	6001      	str	r1, [r0, #0]
    c320:	4608      	mov	r0, r1
    c322:	f004 f884 	bl	1042e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c32a:	2001      	movs	r0, #1
    c32c:	f004 b872 	b.w	10414 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c330:	40001ffc 	.word	0x40001ffc
    c334:	4807      	ldr	r0, [pc, #28]	; (c354 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    c336:	b510      	push	{r4, lr}
    c338:	2101      	movs	r1, #1
    c33a:	6041      	str	r1, [r0, #4]
    c33c:	1e89      	subs	r1, r1, #2
    c33e:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    c342:	200c      	movs	r0, #12
    c344:	f004 f873 	bl	1042e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c34c:	200c      	movs	r0, #12
    c34e:	f004 b861 	b.w	10414 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c352:	0000      	.short	0x0000
    c354:	4000c000 	.word	0x4000c000

0000c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    c358:	b50e      	push	{r1, r2, r3, lr}
    c35a:	b672      	cpsid	i
    c35c:	4a0f      	ldr	r2, [pc, #60]	; (c39c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    c35e:	6855      	ldr	r5, [r2, #4]
    c360:	b1d5      	cbz	r5, c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    c362:	2200      	movs	r2, #0
    c364:	4603      	mov	r3, r0
    c366:	466e      	mov	r6, sp
    c368:	240a      	movs	r4, #10
    c36a:	e003      	b.n	c374 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    c36c:	fbb0 f0f4 	udiv	r0, r0, r4
    c370:	1c52      	adds	r2, r2, #1
    c372:	b2d2      	uxtb	r2, r2
    c374:	2800      	cmp	r0, #0
    c376:	d1f9      	bne.n	c36c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    c378:	54b0      	strb	r0, [r6, r2]
    c37a:	e009      	b.n	c390 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    c37c:	fbb3 f0f4 	udiv	r0, r3, r4
    c380:	fb04 3010 	mls	r0, r4, r0, r3
    c384:	fbb3 f3f4 	udiv	r3, r3, r4
    c388:	1e52      	subs	r2, r2, #1
    c38a:	b2d2      	uxtb	r2, r2
    c38c:	3030      	adds	r0, #48	; 0x30
    c38e:	54b0      	strb	r0, [r6, r2]
    c390:	2a00      	cmp	r2, #0
    c392:	d1f3      	bne.n	c37c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    c394:	4630      	mov	r0, r6
    c396:	47a8      	blx	r5
    c398:	f7ff ffa0 	bl	c2dc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c39c:	2000030c 	.word	0x2000030c

0000c3a0 <mpsl_init>:
    c3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c3a4:	4c18      	ldr	r4, [pc, #96]	; (c408 <mpsl_init+0x68>)
    c3a6:	4606      	mov	r6, r0
    c3a8:	4617      	mov	r7, r2
    c3aa:	7860      	ldrb	r0, [r4, #1]
    c3ac:	460d      	mov	r5, r1
    c3ae:	b118      	cbz	r0, c3b8 <mpsl_init+0x18>
    c3b0:	f04f 30ff 	mov.w	r0, #4294967295
    c3b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c3b8:	f7fc fbe2 	bl	8b80 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    c3bc:	b906      	cbnz	r6, c3c0 <mpsl_init+0x20>
    c3be:	4e13      	ldr	r6, [pc, #76]	; (c40c <mpsl_init+0x6c>)
    c3c0:	6067      	str	r7, [r4, #4]
    c3c2:	7025      	strb	r5, [r4, #0]
    c3c4:	f7ff ffa6 	bl	c314 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    c3c8:	f7ff ffb4 	bl	c334 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    c3cc:	4630      	mov	r0, r6
    c3ce:	f7ff fe83 	bl	c0d8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    c3d2:	0006      	movs	r6, r0
    c3d4:	d1ee      	bne.n	c3b4 <mpsl_init+0x14>
    c3d6:	f7fe fe7d 	bl	b0d4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    c3da:	f7ff fedd 	bl	c198 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    c3de:	f003 ff98 	bl	10312 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    c3e2:	4628      	mov	r0, r5
    c3e4:	f004 f816 	bl	10414 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c3e8:	2001      	movs	r0, #1
    c3ea:	2d00      	cmp	r5, #0
    c3ec:	db09      	blt.n	c402 <mpsl_init+0x62>
    c3ee:	f005 011f 	and.w	r1, r5, #31
    c3f2:	fa00 f101 	lsl.w	r1, r0, r1
    c3f6:	096a      	lsrs	r2, r5, #5
    c3f8:	0092      	lsls	r2, r2, #2
    c3fa:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    c3fe:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    c402:	7060      	strb	r0, [r4, #1]
    c404:	4630      	mov	r0, r6
    c406:	e7d5      	b.n	c3b4 <mpsl_init+0x14>
    c408:	2000030c 	.word	0x2000030c
    c40c:	00010450 	.word	0x00010450

0000c410 <mpsl_is_initialized>:
    c410:	4801      	ldr	r0, [pc, #4]	; (c418 <mpsl_is_initialized+0x8>)
    c412:	7840      	ldrb	r0, [r0, #1]
    c414:	4770      	bx	lr
    c416:	0000      	.short	0x0000
    c418:	2000030c 	.word	0x2000030c

0000c41c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    c41c:	4807      	ldr	r0, [pc, #28]	; (c43c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    c41e:	f990 0000 	ldrsb.w	r0, [r0]
    c422:	2800      	cmp	r0, #0
    c424:	db09      	blt.n	c43a <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    c426:	f000 021f 	and.w	r2, r0, #31
    c42a:	2101      	movs	r1, #1
    c42c:	4091      	lsls	r1, r2
    c42e:	0940      	lsrs	r0, r0, #5
    c430:	0080      	lsls	r0, r0, #2
    c432:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c436:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c43a:	4770      	bx	lr
    c43c:	2000030c 	.word	0x2000030c

0000c440 <mpsl_temperature_get>:
    c440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c444:	2601      	movs	r6, #1
    c446:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c44a:	0331      	lsls	r1, r6, #12
    c44c:	f04f 0800 	mov.w	r8, #0
    c450:	4640      	mov	r0, r8
    c452:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    c456:	f3bf 8f4f 	dsb	sy
    c45a:	f3bf 8f6f 	isb	sy
    c45e:	4c16      	ldr	r4, [pc, #88]	; (c4b8 <mpsl_temperature_get+0x78>)
    c460:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    c464:	200c      	movs	r0, #12
    c466:	f004 f801 	bl	1046c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c46a:	4d14      	ldr	r5, [pc, #80]	; (c4bc <mpsl_temperature_get+0x7c>)
    c46c:	6828      	ldr	r0, [r5, #0]
    c46e:	43c0      	mvns	r0, r0
    c470:	f340 1700 	sbfx	r7, r0, #4, #1
    c474:	6828      	ldr	r0, [r5, #0]
    c476:	f040 0010 	orr.w	r0, r0, #16
    c47a:	6028      	str	r0, [r5, #0]
    c47c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    c480:	6026      	str	r6, [r4, #0]
    c482:	1c7f      	adds	r7, r7, #1
    c484:	e002      	b.n	c48c <mpsl_temperature_get+0x4c>
    c486:	bf00      	nop
    c488:	f004 f894 	bl	105b4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c48c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    c490:	2800      	cmp	r0, #0
    c492:	d0f9      	beq.n	c488 <mpsl_temperature_get+0x48>
    c494:	b91f      	cbnz	r7, c49e <mpsl_temperature_get+0x5e>
    c496:	6828      	ldr	r0, [r5, #0]
    c498:	f020 0010 	bic.w	r0, r0, #16
    c49c:	6028      	str	r0, [r5, #0]
    c49e:	4808      	ldr	r0, [pc, #32]	; (c4c0 <mpsl_temperature_get+0x80>)
    c4a0:	6805      	ldr	r5, [r0, #0]
    c4a2:	6066      	str	r6, [r4, #4]
    c4a4:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    c4a8:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    c4ac:	200c      	movs	r0, #12
    c4ae:	f003 ffdd 	bl	1046c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c4b2:	4628      	mov	r0, r5
    c4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c4b8:	4000c000 	.word	0x4000c000
    c4bc:	e000ed10 	.word	0xe000ed10
    c4c0:	4000c508 	.word	0x4000c508

0000c4c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    c4c4:	b510      	push	{r4, lr}
    c4c6:	4602      	mov	r2, r0
    c4c8:	2005      	movs	r0, #5
    c4ca:	490c      	ldr	r1, [pc, #48]	; (c4fc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    c4cc:	e004      	b.n	c4d8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    c4ce:	bf00      	nop
    c4d0:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    c4d4:	791b      	ldrb	r3, [r3, #4]
    c4d6:	b133      	cbz	r3, c4e6 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    c4d8:	1e40      	subs	r0, r0, #1
    c4da:	b2c0      	uxtb	r0, r0
    c4dc:	d2f8      	bcs.n	c4d0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    c4de:	2148      	movs	r1, #72	; 0x48
    c4e0:	2069      	movs	r0, #105	; 0x69
    c4e2:	f7ff ff39 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c4e6:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    c4ea:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    c4ee:	2200      	movs	r2, #0
    c4f0:	714a      	strb	r2, [r1, #5]
    c4f2:	718a      	strb	r2, [r1, #6]
    c4f4:	2201      	movs	r2, #1
    c4f6:	710a      	strb	r2, [r1, #4]
    c4f8:	bd10      	pop	{r4, pc}
    c4fa:	0000      	.short	0x0000
    c4fc:	200014cc 	.word	0x200014cc

0000c500 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    c500:	b510      	push	{r4, lr}
    c502:	2805      	cmp	r0, #5
    c504:	d301      	bcc.n	c50a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    c506:	2158      	movs	r1, #88	; 0x58
    c508:	e006      	b.n	c518 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    c50a:	490a      	ldr	r1, [pc, #40]	; (c534 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    c50c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    c510:	7901      	ldrb	r1, [r0, #4]
    c512:	2901      	cmp	r1, #1
    c514:	d003      	beq.n	c51e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    c516:	2159      	movs	r1, #89	; 0x59
    c518:	2069      	movs	r0, #105	; 0x69
    c51a:	f7ff ff1d 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c51e:	7941      	ldrb	r1, [r0, #5]
    c520:	7982      	ldrb	r2, [r0, #6]
    c522:	1c49      	adds	r1, r1, #1
    c524:	b2c9      	uxtb	r1, r1
    c526:	428a      	cmp	r2, r1
    c528:	d000      	beq.n	c52c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    c52a:	7141      	strb	r1, [r0, #5]
    c52c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c530:	f7ff bf74 	b.w	c41c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    c534:	200014cc 	.word	0x200014cc

0000c538 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    c538:	b510      	push	{r4, lr}
    c53a:	2805      	cmp	r0, #5
    c53c:	d303      	bcc.n	c546 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    c53e:	214f      	movs	r1, #79	; 0x4f
    c540:	2069      	movs	r0, #105	; 0x69
    c542:	f7ff ff09 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c546:	4a03      	ldr	r2, [pc, #12]	; (c554 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    c548:	2100      	movs	r1, #0
    c54a:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    c54e:	7101      	strb	r1, [r0, #4]
    c550:	bd10      	pop	{r4, pc}
    c552:	0000      	.short	0x0000
    c554:	200014cc 	.word	0x200014cc

0000c558 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    c558:	b570      	push	{r4, r5, r6, lr}
    c55a:	2505      	movs	r5, #5
    c55c:	4e0e      	ldr	r6, [pc, #56]	; (c598 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    c55e:	4c0f      	ldr	r4, [pc, #60]	; (c59c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    c560:	e016      	b.n	c590 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c562:	7821      	ldrb	r1, [r4, #0]
    c564:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    c568:	7902      	ldrb	r2, [r0, #4]
    c56a:	2a01      	cmp	r2, #1
    c56c:	d108      	bne.n	c580 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c56e:	7942      	ldrb	r2, [r0, #5]
    c570:	7983      	ldrb	r3, [r0, #6]
    c572:	429a      	cmp	r2, r3
    c574:	d004      	beq.n	c580 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c576:	7942      	ldrb	r2, [r0, #5]
    c578:	7182      	strb	r2, [r0, #6]
    c57a:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    c57e:	4780      	blx	r0
    c580:	7820      	ldrb	r0, [r4, #0]
    c582:	1c40      	adds	r0, r0, #1
    c584:	b2c0      	uxtb	r0, r0
    c586:	7020      	strb	r0, [r4, #0]
    c588:	2805      	cmp	r0, #5
    c58a:	d301      	bcc.n	c590 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c58c:	2000      	movs	r0, #0
    c58e:	7020      	strb	r0, [r4, #0]
    c590:	1e6d      	subs	r5, r5, #1
    c592:	b2ed      	uxtb	r5, r5
    c594:	d2e5      	bcs.n	c562 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    c596:	bd70      	pop	{r4, r5, r6, pc}
    c598:	200014cc 	.word	0x200014cc
    c59c:	2000036c 	.word	0x2000036c

0000c5a0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    c5a0:	b500      	push	{lr}
    c5a2:	f003 ff92 	bl	104ca <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c5a6:	b940      	cbnz	r0, c5ba <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c5a8:	f003 ff99 	bl	104de <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c5ac:	b928      	cbnz	r0, c5ba <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c5ae:	f003 ffad 	bl	1050c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c5b2:	b910      	cbnz	r0, c5ba <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c5b4:	f003 ffbe 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c5b8:	b108      	cbz	r0, c5be <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    c5ba:	4802      	ldr	r0, [pc, #8]	; (c5c4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    c5bc:	bd00      	pop	{pc}
    c5be:	4802      	ldr	r0, [pc, #8]	; (c5c8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    c5c0:	bd00      	pop	{pc}
    c5c2:	0000      	.short	0x0000
    c5c4:	4000050c 	.word	0x4000050c
    c5c8:	4001e700 	.word	0x4001e700
    c5cc:	b510      	push	{r4, lr}
    c5ce:	f003 ffb1 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c5d2:	b330      	cbz	r0, c622 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x82>
    c5d4:	f3ef 8010 	mrs	r0, PRIMASK
    c5d8:	b1c8      	cbz	r0, c60e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x6e>
    c5da:	2100      	movs	r1, #0
    c5dc:	b672      	cpsid	i
    c5de:	4812      	ldr	r0, [pc, #72]	; (c628 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x88>)
    c5e0:	6802      	ldr	r2, [r0, #0]
    c5e2:	6803      	ldr	r3, [r0, #0]
    c5e4:	f3c2 1200 	ubfx	r2, r2, #4, #1
    c5e8:	f043 0310 	orr.w	r3, r3, #16
    c5ec:	6003      	str	r3, [r0, #0]
    c5ee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c5f2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c5f6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    c5fa:	431c      	orrs	r4, r3
    c5fc:	d000      	beq.n	c600 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x60>
    c5fe:	bf40      	sev
    c600:	bf20      	wfe
    c602:	bf00      	nop
    c604:	bf00      	nop
    c606:	bf00      	nop
    c608:	bf00      	nop
    c60a:	b112      	cbz	r2, c612 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x72>
    c60c:	e005      	b.n	c61a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x7a>
    c60e:	2101      	movs	r1, #1
    c610:	e7e4      	b.n	c5dc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x3c>
    c612:	6802      	ldr	r2, [r0, #0]
    c614:	f022 0210 	bic.w	r2, r2, #16
    c618:	6002      	str	r2, [r0, #0]
    c61a:	2900      	cmp	r1, #0
    c61c:	d000      	beq.n	c620 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x80>
    c61e:	b662      	cpsie	i
    c620:	bd10      	pop	{r4, pc}
    c622:	bf20      	wfe
    c624:	bd10      	pop	{r4, pc}
    c626:	0000      	.short	0x0000
    c628:	e000ed10 	.word	0xe000ed10

0000c62c <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    c62c:	4901      	ldr	r1, [pc, #4]	; (c634 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    c62e:	2001      	movs	r0, #1
    c630:	7088      	strb	r0, [r1, #2]
    c632:	4770      	bx	lr
    c634:	20000314 	.word	0x20000314

0000c638 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    c638:	0001083b 00010873 0001085d 0001084b     ;...s...]...K...
    c648:	00010857 00010845 00010839 00010837     W...E...9...7...
    c658:	0001086f 00010863 00010851 0001083f     o...c...Q...?...
    c668:	00010831 00010829 0001082d 00010823     1...)...-...#...

0000c678 <mpsl_fem_disable>:
    c678:	4801      	ldr	r0, [pc, #4]	; (c680 <mpsl_fem_disable+0x8>)
    c67a:	6800      	ldr	r0, [r0, #0]
    c67c:	6800      	ldr	r0, [r0, #0]
    c67e:	4700      	bx	r0
    c680:	20000328 	.word	0x20000328

0000c684 <mpsl_fem_lna_configuration_clear>:
    c684:	4801      	ldr	r0, [pc, #4]	; (c68c <mpsl_fem_lna_configuration_clear+0x8>)
    c686:	6800      	ldr	r0, [r0, #0]
    c688:	6940      	ldr	r0, [r0, #20]
    c68a:	4700      	bx	r0
    c68c:	20000328 	.word	0x20000328

0000c690 <mpsl_fem_lna_configuration_set>:
    c690:	4a01      	ldr	r2, [pc, #4]	; (c698 <mpsl_fem_lna_configuration_set+0x8>)
    c692:	6812      	ldr	r2, [r2, #0]
    c694:	68d2      	ldr	r2, [r2, #12]
    c696:	4710      	bx	r2
    c698:	20000328 	.word	0x20000328

0000c69c <mpsl_fem_lna_is_configured>:
    c69c:	4901      	ldr	r1, [pc, #4]	; (c6a4 <mpsl_fem_lna_is_configured+0x8>)
    c69e:	6809      	ldr	r1, [r1, #0]
    c6a0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    c6a2:	4708      	bx	r1
    c6a4:	20000328 	.word	0x20000328

0000c6a8 <mpsl_fem_pa_configuration_clear>:
    c6a8:	4801      	ldr	r0, [pc, #4]	; (c6b0 <mpsl_fem_pa_configuration_clear+0x8>)
    c6aa:	6800      	ldr	r0, [r0, #0]
    c6ac:	6900      	ldr	r0, [r0, #16]
    c6ae:	4700      	bx	r0
    c6b0:	20000328 	.word	0x20000328

0000c6b4 <mpsl_fem_pa_configuration_set>:
    c6b4:	4a01      	ldr	r2, [pc, #4]	; (c6bc <mpsl_fem_pa_configuration_set+0x8>)
    c6b6:	6812      	ldr	r2, [r2, #0]
    c6b8:	6892      	ldr	r2, [r2, #8]
    c6ba:	4710      	bx	r2
    c6bc:	20000328 	.word	0x20000328

0000c6c0 <mpsl_fem_pa_gain_set>:
    c6c0:	4901      	ldr	r1, [pc, #4]	; (c6c8 <mpsl_fem_pa_gain_set+0x8>)
    c6c2:	6809      	ldr	r1, [r1, #0]
    c6c4:	6a49      	ldr	r1, [r1, #36]	; 0x24
    c6c6:	4708      	bx	r1
    c6c8:	20000328 	.word	0x20000328

0000c6cc <mpsl_fem_pa_is_configured>:
    c6cc:	4901      	ldr	r1, [pc, #4]	; (c6d4 <mpsl_fem_pa_is_configured+0x8>)
    c6ce:	6809      	ldr	r1, [r1, #0]
    c6d0:	6a89      	ldr	r1, [r1, #40]	; 0x28
    c6d2:	4708      	bx	r1
    c6d4:	20000328 	.word	0x20000328

0000c6d8 <mpsl_fem_tx_power_split>:
    c6d8:	b430      	push	{r4, r5}
    c6da:	4c03      	ldr	r4, [pc, #12]	; (c6e8 <mpsl_fem_tx_power_split+0x10>)
    c6dc:	6824      	ldr	r4, [r4, #0]
    c6de:	6864      	ldr	r4, [r4, #4]
    c6e0:	46a4      	mov	ip, r4
    c6e2:	bc30      	pop	{r4, r5}
    c6e4:	4760      	bx	ip
    c6e6:	0000      	.short	0x0000
    c6e8:	20000328 	.word	0x20000328

0000c6ec <mpsl_fem_device_config_254_apply_get>:
    c6ec:	4801      	ldr	r0, [pc, #4]	; (c6f4 <mpsl_fem_device_config_254_apply_get+0x8>)
    c6ee:	7800      	ldrb	r0, [r0, #0]
    c6f0:	4770      	bx	lr
    c6f2:	0000      	.short	0x0000
    c6f4:	2000036d 	.word	0x2000036d

0000c6f8 <__udivmoddi4>:
    c6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c6fc:	4686      	mov	lr, r0
    c6fe:	468c      	mov	ip, r1
    c700:	4608      	mov	r0, r1
    c702:	9e08      	ldr	r6, [sp, #32]
    c704:	4615      	mov	r5, r2
    c706:	4674      	mov	r4, lr
    c708:	4619      	mov	r1, r3
    c70a:	2b00      	cmp	r3, #0
    c70c:	f040 80c2 	bne.w	c894 <__udivmoddi4+0x19c>
    c710:	4285      	cmp	r5, r0
    c712:	fab2 f282 	clz	r2, r2
    c716:	d945      	bls.n	c7a4 <__udivmoddi4+0xac>
    c718:	b14a      	cbz	r2, c72e <__udivmoddi4+0x36>
    c71a:	f1c2 0320 	rsb	r3, r2, #32
    c71e:	fa00 fc02 	lsl.w	ip, r0, r2
    c722:	fa2e f303 	lsr.w	r3, lr, r3
    c726:	4095      	lsls	r5, r2
    c728:	ea43 0c0c 	orr.w	ip, r3, ip
    c72c:	4094      	lsls	r4, r2
    c72e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c732:	b2a8      	uxth	r0, r5
    c734:	fbbc f8fe 	udiv	r8, ip, lr
    c738:	0c23      	lsrs	r3, r4, #16
    c73a:	fb0e cc18 	mls	ip, lr, r8, ip
    c73e:	fb08 f900 	mul.w	r9, r8, r0
    c742:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    c746:	4599      	cmp	r9, r3
    c748:	d928      	bls.n	c79c <__udivmoddi4+0xa4>
    c74a:	18eb      	adds	r3, r5, r3
    c74c:	f108 37ff 	add.w	r7, r8, #4294967295
    c750:	d204      	bcs.n	c75c <__udivmoddi4+0x64>
    c752:	4599      	cmp	r9, r3
    c754:	d902      	bls.n	c75c <__udivmoddi4+0x64>
    c756:	f1a8 0702 	sub.w	r7, r8, #2
    c75a:	442b      	add	r3, r5
    c75c:	eba3 0309 	sub.w	r3, r3, r9
    c760:	b2a4      	uxth	r4, r4
    c762:	fbb3 fcfe 	udiv	ip, r3, lr
    c766:	fb0e 331c 	mls	r3, lr, ip, r3
    c76a:	fb0c f000 	mul.w	r0, ip, r0
    c76e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c772:	42a0      	cmp	r0, r4
    c774:	d914      	bls.n	c7a0 <__udivmoddi4+0xa8>
    c776:	192c      	adds	r4, r5, r4
    c778:	f10c 33ff 	add.w	r3, ip, #4294967295
    c77c:	d204      	bcs.n	c788 <__udivmoddi4+0x90>
    c77e:	42a0      	cmp	r0, r4
    c780:	d902      	bls.n	c788 <__udivmoddi4+0x90>
    c782:	f1ac 0302 	sub.w	r3, ip, #2
    c786:	442c      	add	r4, r5
    c788:	1a24      	subs	r4, r4, r0
    c78a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    c78e:	b11e      	cbz	r6, c798 <__udivmoddi4+0xa0>
    c790:	40d4      	lsrs	r4, r2
    c792:	2300      	movs	r3, #0
    c794:	6034      	str	r4, [r6, #0]
    c796:	6073      	str	r3, [r6, #4]
    c798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c79c:	4647      	mov	r7, r8
    c79e:	e7dd      	b.n	c75c <__udivmoddi4+0x64>
    c7a0:	4663      	mov	r3, ip
    c7a2:	e7f1      	b.n	c788 <__udivmoddi4+0x90>
    c7a4:	bb92      	cbnz	r2, c80c <__udivmoddi4+0x114>
    c7a6:	1b43      	subs	r3, r0, r5
    c7a8:	2101      	movs	r1, #1
    c7aa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c7ae:	b2af      	uxth	r7, r5
    c7b0:	fbb3 fcfe 	udiv	ip, r3, lr
    c7b4:	0c20      	lsrs	r0, r4, #16
    c7b6:	fb0e 331c 	mls	r3, lr, ip, r3
    c7ba:	fb0c f807 	mul.w	r8, ip, r7
    c7be:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    c7c2:	4598      	cmp	r8, r3
    c7c4:	d962      	bls.n	c88c <__udivmoddi4+0x194>
    c7c6:	18eb      	adds	r3, r5, r3
    c7c8:	f10c 30ff 	add.w	r0, ip, #4294967295
    c7cc:	d204      	bcs.n	c7d8 <__udivmoddi4+0xe0>
    c7ce:	4598      	cmp	r8, r3
    c7d0:	d902      	bls.n	c7d8 <__udivmoddi4+0xe0>
    c7d2:	f1ac 0002 	sub.w	r0, ip, #2
    c7d6:	442b      	add	r3, r5
    c7d8:	eba3 0308 	sub.w	r3, r3, r8
    c7dc:	b2a4      	uxth	r4, r4
    c7de:	fbb3 fcfe 	udiv	ip, r3, lr
    c7e2:	fb0e 331c 	mls	r3, lr, ip, r3
    c7e6:	fb0c f707 	mul.w	r7, ip, r7
    c7ea:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c7ee:	42a7      	cmp	r7, r4
    c7f0:	d94e      	bls.n	c890 <__udivmoddi4+0x198>
    c7f2:	192c      	adds	r4, r5, r4
    c7f4:	f10c 33ff 	add.w	r3, ip, #4294967295
    c7f8:	d204      	bcs.n	c804 <__udivmoddi4+0x10c>
    c7fa:	42a7      	cmp	r7, r4
    c7fc:	d902      	bls.n	c804 <__udivmoddi4+0x10c>
    c7fe:	f1ac 0302 	sub.w	r3, ip, #2
    c802:	442c      	add	r4, r5
    c804:	1be4      	subs	r4, r4, r7
    c806:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c80a:	e7c0      	b.n	c78e <__udivmoddi4+0x96>
    c80c:	f1c2 0320 	rsb	r3, r2, #32
    c810:	fa20 f103 	lsr.w	r1, r0, r3
    c814:	4095      	lsls	r5, r2
    c816:	4090      	lsls	r0, r2
    c818:	fa2e f303 	lsr.w	r3, lr, r3
    c81c:	4303      	orrs	r3, r0
    c81e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c822:	b2af      	uxth	r7, r5
    c824:	fbb1 fcfe 	udiv	ip, r1, lr
    c828:	fb0e 101c 	mls	r0, lr, ip, r1
    c82c:	0c19      	lsrs	r1, r3, #16
    c82e:	fb0c f807 	mul.w	r8, ip, r7
    c832:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c836:	4588      	cmp	r8, r1
    c838:	fa04 f402 	lsl.w	r4, r4, r2
    c83c:	d922      	bls.n	c884 <__udivmoddi4+0x18c>
    c83e:	1869      	adds	r1, r5, r1
    c840:	f10c 30ff 	add.w	r0, ip, #4294967295
    c844:	d204      	bcs.n	c850 <__udivmoddi4+0x158>
    c846:	4588      	cmp	r8, r1
    c848:	d902      	bls.n	c850 <__udivmoddi4+0x158>
    c84a:	f1ac 0002 	sub.w	r0, ip, #2
    c84e:	4429      	add	r1, r5
    c850:	eba1 0108 	sub.w	r1, r1, r8
    c854:	b29b      	uxth	r3, r3
    c856:	fbb1 fcfe 	udiv	ip, r1, lr
    c85a:	fb0e 111c 	mls	r1, lr, ip, r1
    c85e:	fb0c f707 	mul.w	r7, ip, r7
    c862:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c866:	429f      	cmp	r7, r3
    c868:	d90e      	bls.n	c888 <__udivmoddi4+0x190>
    c86a:	18eb      	adds	r3, r5, r3
    c86c:	f10c 31ff 	add.w	r1, ip, #4294967295
    c870:	d204      	bcs.n	c87c <__udivmoddi4+0x184>
    c872:	429f      	cmp	r7, r3
    c874:	d902      	bls.n	c87c <__udivmoddi4+0x184>
    c876:	f1ac 0102 	sub.w	r1, ip, #2
    c87a:	442b      	add	r3, r5
    c87c:	1bdb      	subs	r3, r3, r7
    c87e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c882:	e792      	b.n	c7aa <__udivmoddi4+0xb2>
    c884:	4660      	mov	r0, ip
    c886:	e7e3      	b.n	c850 <__udivmoddi4+0x158>
    c888:	4661      	mov	r1, ip
    c88a:	e7f7      	b.n	c87c <__udivmoddi4+0x184>
    c88c:	4660      	mov	r0, ip
    c88e:	e7a3      	b.n	c7d8 <__udivmoddi4+0xe0>
    c890:	4663      	mov	r3, ip
    c892:	e7b7      	b.n	c804 <__udivmoddi4+0x10c>
    c894:	4283      	cmp	r3, r0
    c896:	d906      	bls.n	c8a6 <__udivmoddi4+0x1ae>
    c898:	b916      	cbnz	r6, c8a0 <__udivmoddi4+0x1a8>
    c89a:	2100      	movs	r1, #0
    c89c:	4608      	mov	r0, r1
    c89e:	e77b      	b.n	c798 <__udivmoddi4+0xa0>
    c8a0:	e9c6 e000 	strd	lr, r0, [r6]
    c8a4:	e7f9      	b.n	c89a <__udivmoddi4+0x1a2>
    c8a6:	fab3 f783 	clz	r7, r3
    c8aa:	b98f      	cbnz	r7, c8d0 <__udivmoddi4+0x1d8>
    c8ac:	4283      	cmp	r3, r0
    c8ae:	d301      	bcc.n	c8b4 <__udivmoddi4+0x1bc>
    c8b0:	4572      	cmp	r2, lr
    c8b2:	d808      	bhi.n	c8c6 <__udivmoddi4+0x1ce>
    c8b4:	ebbe 0402 	subs.w	r4, lr, r2
    c8b8:	eb60 0303 	sbc.w	r3, r0, r3
    c8bc:	2001      	movs	r0, #1
    c8be:	469c      	mov	ip, r3
    c8c0:	b91e      	cbnz	r6, c8ca <__udivmoddi4+0x1d2>
    c8c2:	2100      	movs	r1, #0
    c8c4:	e768      	b.n	c798 <__udivmoddi4+0xa0>
    c8c6:	4638      	mov	r0, r7
    c8c8:	e7fa      	b.n	c8c0 <__udivmoddi4+0x1c8>
    c8ca:	e9c6 4c00 	strd	r4, ip, [r6]
    c8ce:	e7f8      	b.n	c8c2 <__udivmoddi4+0x1ca>
    c8d0:	f1c7 0c20 	rsb	ip, r7, #32
    c8d4:	40bb      	lsls	r3, r7
    c8d6:	fa22 f40c 	lsr.w	r4, r2, ip
    c8da:	431c      	orrs	r4, r3
    c8dc:	fa2e f10c 	lsr.w	r1, lr, ip
    c8e0:	fa20 f30c 	lsr.w	r3, r0, ip
    c8e4:	40b8      	lsls	r0, r7
    c8e6:	4301      	orrs	r1, r0
    c8e8:	ea4f 4914 	mov.w	r9, r4, lsr #16
    c8ec:	fa0e f507 	lsl.w	r5, lr, r7
    c8f0:	fbb3 f8f9 	udiv	r8, r3, r9
    c8f4:	fa1f fe84 	uxth.w	lr, r4
    c8f8:	fb09 3018 	mls	r0, r9, r8, r3
    c8fc:	0c0b      	lsrs	r3, r1, #16
    c8fe:	fb08 fa0e 	mul.w	sl, r8, lr
    c902:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    c906:	459a      	cmp	sl, r3
    c908:	fa02 f207 	lsl.w	r2, r2, r7
    c90c:	d940      	bls.n	c990 <__udivmoddi4+0x298>
    c90e:	18e3      	adds	r3, r4, r3
    c910:	f108 30ff 	add.w	r0, r8, #4294967295
    c914:	d204      	bcs.n	c920 <__udivmoddi4+0x228>
    c916:	459a      	cmp	sl, r3
    c918:	d902      	bls.n	c920 <__udivmoddi4+0x228>
    c91a:	f1a8 0002 	sub.w	r0, r8, #2
    c91e:	4423      	add	r3, r4
    c920:	eba3 030a 	sub.w	r3, r3, sl
    c924:	b289      	uxth	r1, r1
    c926:	fbb3 f8f9 	udiv	r8, r3, r9
    c92a:	fb09 3318 	mls	r3, r9, r8, r3
    c92e:	fb08 fe0e 	mul.w	lr, r8, lr
    c932:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c936:	458e      	cmp	lr, r1
    c938:	d92c      	bls.n	c994 <__udivmoddi4+0x29c>
    c93a:	1861      	adds	r1, r4, r1
    c93c:	f108 33ff 	add.w	r3, r8, #4294967295
    c940:	d204      	bcs.n	c94c <__udivmoddi4+0x254>
    c942:	458e      	cmp	lr, r1
    c944:	d902      	bls.n	c94c <__udivmoddi4+0x254>
    c946:	f1a8 0302 	sub.w	r3, r8, #2
    c94a:	4421      	add	r1, r4
    c94c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c950:	fba0 9802 	umull	r9, r8, r0, r2
    c954:	eba1 010e 	sub.w	r1, r1, lr
    c958:	4541      	cmp	r1, r8
    c95a:	46ce      	mov	lr, r9
    c95c:	4643      	mov	r3, r8
    c95e:	d302      	bcc.n	c966 <__udivmoddi4+0x26e>
    c960:	d106      	bne.n	c970 <__udivmoddi4+0x278>
    c962:	454d      	cmp	r5, r9
    c964:	d204      	bcs.n	c970 <__udivmoddi4+0x278>
    c966:	ebb9 0e02 	subs.w	lr, r9, r2
    c96a:	eb68 0304 	sbc.w	r3, r8, r4
    c96e:	3801      	subs	r0, #1
    c970:	2e00      	cmp	r6, #0
    c972:	d0a6      	beq.n	c8c2 <__udivmoddi4+0x1ca>
    c974:	ebb5 020e 	subs.w	r2, r5, lr
    c978:	eb61 0103 	sbc.w	r1, r1, r3
    c97c:	fa01 fc0c 	lsl.w	ip, r1, ip
    c980:	fa22 f307 	lsr.w	r3, r2, r7
    c984:	ea4c 0303 	orr.w	r3, ip, r3
    c988:	40f9      	lsrs	r1, r7
    c98a:	e9c6 3100 	strd	r3, r1, [r6]
    c98e:	e798      	b.n	c8c2 <__udivmoddi4+0x1ca>
    c990:	4640      	mov	r0, r8
    c992:	e7c5      	b.n	c920 <__udivmoddi4+0x228>
    c994:	4643      	mov	r3, r8
    c996:	e7d9      	b.n	c94c <__udivmoddi4+0x254>

0000c998 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    c998:	b50e      	push	{r1, r2, r3, lr}
    c99a:	4601      	mov	r1, r0
    c99c:	4668      	mov	r0, sp
    c99e:	f000 f804 	bl	c9aa <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    c9a2:	4668      	mov	r0, sp
    c9a4:	f001 fba4 	bl	e0f0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    c9a8:	bd0e      	pop	{r1, r2, r3, pc}

0000c9aa <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    c9aa:	880a      	ldrh	r2, [r1, #0]
    c9ac:	f3c2 020b 	ubfx	r2, r2, #0, #12
    c9b0:	8082      	strh	r2, [r0, #4]
    c9b2:	884a      	ldrh	r2, [r1, #2]
    c9b4:	80c2      	strh	r2, [r0, #6]
    c9b6:	784a      	ldrb	r2, [r1, #1]
    c9b8:	0993      	lsrs	r3, r2, #6
    c9ba:	2200      	movs	r2, #0
    c9bc:	7242      	strb	r2, [r0, #9]
    c9be:	784b      	ldrb	r3, [r1, #1]
    c9c0:	f3c3 1301 	ubfx	r3, r3, #4, #2
    c9c4:	b11b      	cbz	r3, c9ce <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c9c6:	2b01      	cmp	r3, #1
    c9c8:	d005      	beq.n	c9d6 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    c9ca:	2b02      	cmp	r3, #2
    c9cc:	d005      	beq.n	c9da <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    c9ce:	7202      	strb	r2, [r0, #8]
    c9d0:	1d09      	adds	r1, r1, #4
    c9d2:	6001      	str	r1, [r0, #0]
    c9d4:	4770      	bx	lr
    c9d6:	2201      	movs	r2, #1
    c9d8:	e7f9      	b.n	c9ce <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c9da:	2202      	movs	r2, #2
    c9dc:	e7f7      	b.n	c9ce <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000c9de <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    c9de:	b510      	push	{r4, lr}
    c9e0:	460c      	mov	r4, r1
    c9e2:	7909      	ldrb	r1, [r1, #4]
    c9e4:	7001      	strb	r1, [r0, #0]
    c9e6:	7841      	ldrb	r1, [r0, #1]
    c9e8:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    c9ec:	7041      	strb	r1, [r0, #1]
    c9ee:	88a2      	ldrh	r2, [r4, #4]
    c9f0:	f3c2 2203 	ubfx	r2, r2, #8, #4
    c9f4:	4311      	orrs	r1, r2
    c9f6:	7041      	strb	r1, [r0, #1]
    c9f8:	79a2      	ldrb	r2, [r4, #6]
    c9fa:	7082      	strb	r2, [r0, #2]
    c9fc:	88e2      	ldrh	r2, [r4, #6]
    c9fe:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    ca02:	0a12      	lsrs	r2, r2, #8
    ca04:	70c2      	strb	r2, [r0, #3]
    ca06:	7041      	strb	r1, [r0, #1]
    ca08:	7a22      	ldrb	r2, [r4, #8]
    ca0a:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    ca0e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    ca12:	7041      	strb	r1, [r0, #1]
    ca14:	7a62      	ldrb	r2, [r4, #9]
    ca16:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    ca1a:	7041      	strb	r1, [r0, #1]
    ca1c:	6821      	ldr	r1, [r4, #0]
    ca1e:	1d02      	adds	r2, r0, #4
    ca20:	4291      	cmp	r1, r2
    ca22:	d006      	beq.n	ca32 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    ca24:	88e2      	ldrh	r2, [r4, #6]
    ca26:	2afb      	cmp	r2, #251	; 0xfb
    ca28:	d300      	bcc.n	ca2c <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    ca2a:	22fb      	movs	r2, #251	; 0xfb
    ca2c:	1d00      	adds	r0, r0, #4
    ca2e:	f003 fe1e 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ca32:	79a0      	ldrb	r0, [r4, #6]
    ca34:	1d00      	adds	r0, r0, #4
    ca36:	b2c0      	uxtb	r0, r0
    ca38:	bd10      	pop	{r4, pc}

0000ca3a <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>:
    ca3a:	b430      	push	{r4, r5}
    ca3c:	790a      	ldrb	r2, [r1, #4]
    ca3e:	7002      	strb	r2, [r0, #0]
    ca40:	7842      	ldrb	r2, [r0, #1]
    ca42:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    ca46:	7042      	strb	r2, [r0, #1]
    ca48:	888b      	ldrh	r3, [r1, #4]
    ca4a:	f3c3 2303 	ubfx	r3, r3, #8, #4
    ca4e:	431a      	orrs	r2, r3
    ca50:	7042      	strb	r2, [r0, #1]
    ca52:	798b      	ldrb	r3, [r1, #6]
    ca54:	7083      	strb	r3, [r0, #2]
    ca56:	78c3      	ldrb	r3, [r0, #3]
    ca58:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
    ca5c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ca60:	70c3      	strb	r3, [r0, #3]
    ca62:	88cc      	ldrh	r4, [r1, #6]
    ca64:	f3c4 2405 	ubfx	r4, r4, #8, #6
    ca68:	4323      	orrs	r3, r4
    ca6a:	70c3      	strb	r3, [r0, #3]
    ca6c:	7042      	strb	r2, [r0, #1]
    ca6e:	7a0c      	ldrb	r4, [r1, #8]
    ca70:	f004 0403 	and.w	r4, r4, #3
    ca74:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    ca78:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    ca7c:	7042      	strb	r2, [r0, #1]
    ca7e:	7a4c      	ldrb	r4, [r1, #9]
    ca80:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
    ca84:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    ca88:	7042      	strb	r2, [r0, #1]
    ca8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    ca8e:	70c2      	strb	r2, [r0, #3]
    ca90:	680b      	ldr	r3, [r1, #0]
    ca92:	1d02      	adds	r2, r0, #4
    ca94:	4293      	cmp	r3, r2
    ca96:	d005      	beq.n	caa4 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY+0x6a>
    ca98:	88ca      	ldrh	r2, [r1, #6]
    ca9a:	bc30      	pop	{r4, r5}
    ca9c:	4619      	mov	r1, r3
    ca9e:	1d00      	adds	r0, r0, #4
    caa0:	f003 bde5 	b.w	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    caa4:	bc30      	pop	{r4, r5}
    caa6:	4770      	bx	lr

0000caa8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    caa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    caac:	4604      	mov	r4, r0
    caae:	f891 c000 	ldrb.w	ip, [r1]
    cab2:	460d      	mov	r5, r1
    cab4:	2000      	movs	r0, #0
    cab6:	270c      	movs	r7, #12
    cab8:	263e      	movs	r6, #62	; 0x3e
    caba:	2312      	movs	r3, #18
    cabc:	22ff      	movs	r2, #255	; 0xff
    cabe:	f04f 0b10 	mov.w	fp, #16
    cac2:	f04f 0905 	mov.w	r9, #5
    cac6:	f104 010d 	add.w	r1, r4, #13
    caca:	f04f 0e14 	mov.w	lr, #20
    cace:	f04f 0a11 	mov.w	sl, #17
    cad2:	f1bc 0f23 	cmp.w	ip, #35	; 0x23
    cad6:	d271      	bcs.n	cbbc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    cad8:	e8df f00c 	tbb	[pc, ip]
    cadc:	2c291270 	.word	0x2c291270
    cae0:	8c70f431 	.word	0x8c70f431
    cae4:	d5c1a796 	.word	0xd5c1a796
    cae8:	f1f2f5d8 	.word	0xf1f2f5d8
    caec:	537070f0 	.word	0x537070f0
    caf0:	eeef7170 	.word	0xeeef7170
    caf4:	eaebeced 	.word	0xeaebeced
    caf8:	e6e7e8e9 	.word	0xe6e7e8e9
    cafc:	00e470e5 	.word	0x00e470e5
    cb00:	7027      	strb	r7, [r4, #0]
    cb02:	7928      	ldrb	r0, [r5, #4]
    cb04:	70a0      	strb	r0, [r4, #2]
    cb06:	7968      	ldrb	r0, [r5, #5]
    cb08:	70e0      	strb	r0, [r4, #3]
    cb0a:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cb0e:	0a00      	lsrs	r0, r0, #8
    cb10:	7120      	strb	r0, [r4, #4]
    cb12:	79e8      	ldrb	r0, [r5, #7]
    cb14:	7160      	strb	r0, [r4, #5]
    cb16:	7a28      	ldrb	r0, [r5, #8]
    cb18:	71a0      	strb	r0, [r4, #6]
    cb1a:	8928      	ldrh	r0, [r5, #8]
    cb1c:	0a00      	lsrs	r0, r0, #8
    cb1e:	71e0      	strb	r0, [r4, #7]
    cb20:	7aa8      	ldrb	r0, [r5, #10]
    cb22:	7220      	strb	r0, [r4, #8]
    cb24:	8968      	ldrh	r0, [r5, #10]
    cb26:	0a00      	lsrs	r0, r0, #8
    cb28:	7260      	strb	r0, [r4, #9]
    cb2a:	2008      	movs	r0, #8
    cb2c:	e137      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cb2e:	f884 b000 	strb.w	fp, [r4]
    cb32:	e001      	b.n	cb38 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x90>
    cb34:	201a      	movs	r0, #26
    cb36:	7020      	strb	r0, [r4, #0]
    cb38:	7928      	ldrb	r0, [r5, #4]
    cb3a:	70a0      	strb	r0, [r4, #2]
    cb3c:	e136      	b.n	cdac <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
    cb3e:	7026      	strb	r6, [r4, #0]
    cb40:	2002      	movs	r0, #2
    cb42:	70a0      	strb	r0, [r4, #2]
    cb44:	f815 0f04 	ldrb.w	r0, [r5, #4]!
    cb48:	70e0      	strb	r0, [r4, #3]
    cb4a:	7aa8      	ldrb	r0, [r5, #10]
    cb4c:	7120      	strb	r0, [r4, #4]
    cb4e:	7868      	ldrb	r0, [r5, #1]
    cb50:	7160      	strb	r0, [r4, #5]
    cb52:	f8d5 0002 	ldr.w	r0, [r5, #2]
    cb56:	f8c4 0006 	str.w	r0, [r4, #6]
    cb5a:	88e8      	ldrh	r0, [r5, #6]
    cb5c:	8160      	strh	r0, [r4, #10]
    cb5e:	7a28      	ldrb	r0, [r5, #8]
    cb60:	7320      	strb	r0, [r4, #12]
    cb62:	7a2e      	ldrb	r6, [r5, #8]
    cb64:	2e1f      	cmp	r6, #31
    cb66:	d300      	bcc.n	cb6a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xc2>
    cb68:	261f      	movs	r6, #31
    cb6a:	4608      	mov	r0, r1
    cb6c:	4632      	mov	r2, r6
    cb6e:	f105 010b 	add.w	r1, r5, #11
    cb72:	f003 fd7c 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cb76:	360d      	adds	r6, #13
    cb78:	7a69      	ldrb	r1, [r5, #9]
    cb7a:	55a1      	strb	r1, [r4, r6]
    cb7c:	1e76      	subs	r6, r6, #1
    cb7e:	b2f0      	uxtb	r0, r6
    cb80:	e10b      	b.n	cd9a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f2>
    cb82:	7026      	strb	r6, [r4, #0]
    cb84:	200b      	movs	r0, #11
    cb86:	70a0      	strb	r0, [r4, #2]
    cb88:	7928      	ldrb	r0, [r5, #4]
    cb8a:	70e0      	strb	r0, [r4, #3]
    cb8c:	7968      	ldrb	r0, [r5, #5]
    cb8e:	7120      	strb	r0, [r4, #4]
    cb90:	79a8      	ldrb	r0, [r5, #6]
    cb92:	7160      	strb	r0, [r4, #5]
    cb94:	f8d5 0007 	ldr.w	r0, [r5, #7]
    cb98:	f8c4 0006 	str.w	r0, [r4, #6]
    cb9c:	f8b5 000b 	ldrh.w	r0, [r5, #11]
    cba0:	8160      	strh	r0, [r4, #10]
    cba2:	7b68      	ldrb	r0, [r5, #13]
    cba4:	7320      	strb	r0, [r4, #12]
    cba6:	f8d5 000e 	ldr.w	r0, [r5, #14]
    cbaa:	f8c4 000d 	str.w	r0, [r4, #13]
    cbae:	8a68      	ldrh	r0, [r5, #18]
    cbb0:	f8a4 0011 	strh.w	r0, [r4, #17]
    cbb4:	7d28      	ldrb	r0, [r5, #20]
    cbb6:	74e0      	strb	r0, [r4, #19]
    cbb8:	4618      	mov	r0, r3
    cbba:	e0f0      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cbbc:	e0f1      	b.n	cda2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fa>
    cbbe:	2029      	movs	r0, #41	; 0x29
    cbc0:	f7f4 f8c6 	bl	d50 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cbc4:	b148      	cbz	r0, cbda <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x132>
    cbc6:	7026      	strb	r6, [r4, #0]
    cbc8:	2029      	movs	r0, #41	; 0x29
    cbca:	70a0      	strb	r0, [r4, #2]
    cbcc:	2221      	movs	r2, #33	; 0x21
    cbce:	1d29      	adds	r1, r5, #4
    cbd0:	1ce0      	adds	r0, r4, #3
    cbd2:	f003 fd4c 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cbd6:	2022      	movs	r0, #34	; 0x22
    cbd8:	e0e1      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cbda:	200a      	movs	r0, #10
    cbdc:	f7f4 f8b8 	bl	d50 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cbe0:	2800      	cmp	r0, #0
    cbe2:	4629      	mov	r1, r5
    cbe4:	4620      	mov	r0, r4
    cbe6:	d002      	beq.n	cbee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x146>
    cbe8:	f000 f9a0 	bl	cf2c <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0x52>
    cbec:	e0d5      	b.n	cd9a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f2>
    cbee:	f000 f974 	bl	ceda <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>
    cbf2:	e0d2      	b.n	cd9a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f2>
    cbf4:	7026      	strb	r6, [r4, #0]
    cbf6:	f884 e002 	strb.w	lr, [r4, #2]
    cbfa:	7928      	ldrb	r0, [r5, #4]
    cbfc:	70e0      	strb	r0, [r4, #3]
    cbfe:	88a8      	ldrh	r0, [r5, #4]
    cc00:	0a00      	lsrs	r0, r0, #8
    cc02:	7120      	strb	r0, [r4, #4]
    cc04:	79a8      	ldrb	r0, [r5, #6]
    cc06:	e104      	b.n	ce12 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    cc08:	223e      	movs	r2, #62	; 0x3e
    cc0a:	7022      	strb	r2, [r4, #0]
    cc0c:	2204      	movs	r2, #4
    cc0e:	70a2      	strb	r2, [r4, #2]
    cc10:	6868      	ldr	r0, [r5, #4]
    cc12:	f8c4 0003 	str.w	r0, [r4, #3]
    cc16:	68a8      	ldr	r0, [r5, #8]
    cc18:	f8c4 0007 	str.w	r0, [r4, #7]
    cc1c:	89a8      	ldrh	r0, [r5, #12]
    cc1e:	f8a4 000b 	strh.w	r0, [r4, #11]
    cc22:	7ba8      	ldrb	r0, [r5, #14]
    cc24:	7360      	strb	r0, [r4, #13]
    cc26:	200c      	movs	r0, #12
    cc28:	e0b9      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cc2a:	7026      	strb	r6, [r4, #0]
    cc2c:	2003      	movs	r0, #3
    cc2e:	70a0      	strb	r0, [r4, #2]
    cc30:	7928      	ldrb	r0, [r5, #4]
    cc32:	70e0      	strb	r0, [r4, #3]
    cc34:	79a8      	ldrb	r0, [r5, #6]
    cc36:	7120      	strb	r0, [r4, #4]
    cc38:	88e8      	ldrh	r0, [r5, #6]
    cc3a:	0a00      	lsrs	r0, r0, #8
    cc3c:	7160      	strb	r0, [r4, #5]
    cc3e:	7a28      	ldrb	r0, [r5, #8]
    cc40:	71a0      	strb	r0, [r4, #6]
    cc42:	8928      	ldrh	r0, [r5, #8]
    cc44:	0a00      	lsrs	r0, r0, #8
    cc46:	71e0      	strb	r0, [r4, #7]
    cc48:	7aa8      	ldrb	r0, [r5, #10]
    cc4a:	7220      	strb	r0, [r4, #8]
    cc4c:	8968      	ldrh	r0, [r5, #10]
    cc4e:	0a00      	lsrs	r0, r0, #8
    cc50:	7260      	strb	r0, [r4, #9]
    cc52:	7b28      	ldrb	r0, [r5, #12]
    cc54:	72a0      	strb	r0, [r4, #10]
    cc56:	89a8      	ldrh	r0, [r5, #12]
    cc58:	0a00      	lsrs	r0, r0, #8
    cc5a:	72e0      	strb	r0, [r4, #11]
    cc5c:	e116      	b.n	ce8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e4>
    cc5e:	7026      	strb	r6, [r4, #0]
    cc60:	f884 9002 	strb.w	r9, [r4, #2]
    cc64:	7928      	ldrb	r0, [r5, #4]
    cc66:	70e0      	strb	r0, [r4, #3]
    cc68:	88a8      	ldrh	r0, [r5, #4]
    cc6a:	0a00      	lsrs	r0, r0, #8
    cc6c:	7120      	strb	r0, [r4, #4]
    cc6e:	f8d5 0006 	ldr.w	r0, [r5, #6]
    cc72:	f8c4 0005 	str.w	r0, [r4, #5]
    cc76:	f8d5 000a 	ldr.w	r0, [r5, #10]
    cc7a:	f8c4 0009 	str.w	r0, [r4, #9]
    cc7e:	89e8      	ldrh	r0, [r5, #14]
    cc80:	f8a4 000d 	strh.w	r0, [r4, #13]
    cc84:	e127      	b.n	ced6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x42e>
    cc86:	f884 a000 	strb.w	sl, [r4]
    cc8a:	e049      	b.n	cd20 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x278>
    cc8c:	f884 9000 	strb.w	r9, [r4]
    cc90:	7928      	ldrb	r0, [r5, #4]
    cc92:	70a0      	strb	r0, [r4, #2]
    cc94:	7968      	ldrb	r0, [r5, #5]
    cc96:	70e0      	strb	r0, [r4, #3]
    cc98:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cc9c:	0a00      	lsrs	r0, r0, #8
    cc9e:	7120      	strb	r0, [r4, #4]
    cca0:	79e8      	ldrb	r0, [r5, #7]
    cca2:	e0b6      	b.n	ce12 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    cca4:	e102      	b.n	ceac <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x404>
    cca6:	e0d5      	b.n	ce54 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ac>
    cca8:	e0b6      	b.n	ce18 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x370>
    ccaa:	e0e1      	b.n	ce70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3c8>
    ccac:	e0f0      	b.n	ce90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e8>
    ccae:	e0a8      	b.n	ce02 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
    ccb0:	e090      	b.n	cdd4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32c>
    ccb2:	e08c      	b.n	cdce <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    ccb4:	e077      	b.n	cda6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fe>
    ccb6:	e07b      	b.n	cdb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x308>
    ccb8:	e01e      	b.n	ccf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    ccba:	e01a      	b.n	ccf2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24a>
    ccbc:	e02e      	b.n	cd1c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x274>
    ccbe:	e028      	b.n	cd12 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x26a>
    ccc0:	e00c      	b.n	ccdc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    ccc2:	e000      	b.n	ccc6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x21e>
    ccc4:	e033      	b.n	cd2e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x286>
    ccc6:	2008      	movs	r0, #8
    ccc8:	7020      	strb	r0, [r4, #0]
    ccca:	7928      	ldrb	r0, [r5, #4]
    cccc:	70a0      	strb	r0, [r4, #2]
    ccce:	79a8      	ldrb	r0, [r5, #6]
    ccd0:	70e0      	strb	r0, [r4, #3]
    ccd2:	88e8      	ldrh	r0, [r5, #6]
    ccd4:	0a00      	lsrs	r0, r0, #8
    ccd6:	7120      	strb	r0, [r4, #4]
    ccd8:	7a28      	ldrb	r0, [r5, #8]
    ccda:	e09a      	b.n	ce12 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    ccdc:	2030      	movs	r0, #48	; 0x30
    ccde:	7020      	strb	r0, [r4, #0]
    cce0:	7928      	ldrb	r0, [r5, #4]
    cce2:	70a0      	strb	r0, [r4, #2]
    cce4:	79a8      	ldrb	r0, [r5, #6]
    cce6:	70e0      	strb	r0, [r4, #3]
    cce8:	88e8      	ldrh	r0, [r5, #6]
    ccea:	0a00      	lsrs	r0, r0, #8
    ccec:	7120      	strb	r0, [r4, #4]
    ccee:	2003      	movs	r0, #3
    ccf0:	e055      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ccf2:	7026      	strb	r6, [r4, #0]
    ccf4:	2007      	movs	r0, #7
    ccf6:	e091      	b.n	ce1c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    ccf8:	7026      	strb	r6, [r4, #0]
    ccfa:	70a7      	strb	r7, [r4, #2]
    ccfc:	7928      	ldrb	r0, [r5, #4]
    ccfe:	70e0      	strb	r0, [r4, #3]
    cd00:	79a8      	ldrb	r0, [r5, #6]
    cd02:	7120      	strb	r0, [r4, #4]
    cd04:	88e8      	ldrh	r0, [r5, #6]
    cd06:	0a00      	lsrs	r0, r0, #8
    cd08:	7160      	strb	r0, [r4, #5]
    cd0a:	7a28      	ldrb	r0, [r5, #8]
    cd0c:	71a0      	strb	r0, [r4, #6]
    cd0e:	7a68      	ldrb	r0, [r5, #9]
    cd10:	e05a      	b.n	cdc8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x320>
    cd12:	1d29      	adds	r1, r5, #4
    cd14:	4620      	mov	r0, r4
    cd16:	f7f3 ffdb 	bl	cd0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x94>
    cd1a:	e03e      	b.n	cd9a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f2>
    cd1c:	2057      	movs	r0, #87	; 0x57
    cd1e:	7020      	strb	r0, [r4, #0]
    cd20:	7928      	ldrb	r0, [r5, #4]
    cd22:	70a0      	strb	r0, [r4, #2]
    cd24:	88a8      	ldrh	r0, [r5, #4]
    cd26:	0a00      	lsrs	r0, r0, #8
    cd28:	70e0      	strb	r0, [r4, #3]
    cd2a:	2002      	movs	r0, #2
    cd2c:	e037      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cd2e:	7026      	strb	r6, [r4, #0]
    cd30:	220d      	movs	r2, #13
    cd32:	70a2      	strb	r2, [r4, #2]
    cd34:	792a      	ldrb	r2, [r5, #4]
    cd36:	70e2      	strb	r2, [r4, #3]
    cd38:	89ea      	ldrh	r2, [r5, #14]
    cd3a:	80a2      	strh	r2, [r4, #4]
    cd3c:	796a      	ldrb	r2, [r5, #5]
    cd3e:	71a2      	strb	r2, [r4, #6]
    cd40:	f8d5 2006 	ldr.w	r2, [r5, #6]
    cd44:	f8c4 2007 	str.w	r2, [r4, #7]
    cd48:	896a      	ldrh	r2, [r5, #10]
    cd4a:	f8a4 200b 	strh.w	r2, [r4, #11]
    cd4e:	7c2a      	ldrb	r2, [r5, #16]
    cd50:	4620      	mov	r0, r4
    cd52:	7362      	strb	r2, [r4, #13]
    cd54:	1d29      	adds	r1, r5, #4
    cd56:	7c6a      	ldrb	r2, [r5, #17]
    cd58:	7382      	strb	r2, [r0, #14]
    cd5a:	7b8a      	ldrb	r2, [r1, #14]
    cd5c:	73c2      	strb	r2, [r0, #15]
    cd5e:	7e8a      	ldrb	r2, [r1, #26]
    cd60:	7402      	strb	r2, [r0, #16]
    cd62:	7a4a      	ldrb	r2, [r1, #9]
    cd64:	7442      	strb	r2, [r0, #17]
    cd66:	f8b1 2011 	ldrh.w	r2, [r1, #17]
    cd6a:	f8ad 2000 	strh.w	r2, [sp]
    cd6e:	8242      	strh	r2, [r0, #18]
    cd70:	7cca      	ldrb	r2, [r1, #19]
    cd72:	7502      	strb	r2, [r0, #20]
    cd74:	694a      	ldr	r2, [r1, #20]
    cd76:	f8c0 2015 	str.w	r2, [r0, #21]
    cd7a:	8b0a      	ldrh	r2, [r1, #24]
    cd7c:	f8a0 2019 	strh.w	r2, [r0, #25]
    cd80:	7a0a      	ldrb	r2, [r1, #8]
    cd82:	76c2      	strb	r2, [r0, #27]
    cd84:	7a0d      	ldrb	r5, [r1, #8]
    cd86:	2de5      	cmp	r5, #229	; 0xe5
    cd88:	d300      	bcc.n	cd8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2e4>
    cd8a:	25e5      	movs	r5, #229	; 0xe5
    cd8c:	462a      	mov	r2, r5
    cd8e:	301c      	adds	r0, #28
    cd90:	311c      	adds	r1, #28
    cd92:	f003 fc6c 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cd96:	351a      	adds	r5, #26
    cd98:	b2e8      	uxtb	r0, r5
    cd9a:	2800      	cmp	r0, #0
    cd9c:	d001      	beq.n	cda2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fa>
    cd9e:	7060      	strb	r0, [r4, #1]
    cda0:	1c80      	adds	r0, r0, #2
    cda2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cda6:	7026      	strb	r6, [r4, #0]
    cda8:	f884 a002 	strb.w	sl, [r4, #2]
    cdac:	2001      	movs	r0, #1
    cdae:	e7f6      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cdb0:	7026      	strb	r6, [r4, #0]
    cdb2:	70a3      	strb	r3, [r4, #2]
    cdb4:	7928      	ldrb	r0, [r5, #4]
    cdb6:	70e0      	strb	r0, [r4, #3]
    cdb8:	7968      	ldrb	r0, [r5, #5]
    cdba:	7120      	strb	r0, [r4, #4]
    cdbc:	79a8      	ldrb	r0, [r5, #6]
    cdbe:	7160      	strb	r0, [r4, #5]
    cdc0:	88e8      	ldrh	r0, [r5, #6]
    cdc2:	0a00      	lsrs	r0, r0, #8
    cdc4:	71a0      	strb	r0, [r4, #6]
    cdc6:	7a28      	ldrb	r0, [r5, #8]
    cdc8:	71e0      	strb	r0, [r4, #7]
    cdca:	2006      	movs	r0, #6
    cdcc:	e7e7      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cdce:	7026      	strb	r6, [r4, #0]
    cdd0:	2020      	movs	r0, #32
    cdd2:	e041      	b.n	ce58 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3b0>
    cdd4:	7026      	strb	r6, [r4, #0]
    cdd6:	2021      	movs	r0, #33	; 0x21
    cdd8:	70a0      	strb	r0, [r4, #2]
    cdda:	7928      	ldrb	r0, [r5, #4]
    cddc:	70e0      	strb	r0, [r4, #3]
    cdde:	7968      	ldrb	r0, [r5, #5]
    cde0:	7120      	strb	r0, [r4, #4]
    cde2:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cde6:	0a00      	lsrs	r0, r0, #8
    cde8:	7160      	strb	r0, [r4, #5]
    cdea:	79e8      	ldrb	r0, [r5, #7]
    cdec:	71a0      	strb	r0, [r4, #6]
    cdee:	7a28      	ldrb	r0, [r5, #8]
    cdf0:	71e0      	strb	r0, [r4, #7]
    cdf2:	7a68      	ldrb	r0, [r5, #9]
    cdf4:	7220      	strb	r0, [r4, #8]
    cdf6:	7aa8      	ldrb	r0, [r5, #10]
    cdf8:	7260      	strb	r0, [r4, #9]
    cdfa:	7ae8      	ldrb	r0, [r5, #11]
    cdfc:	72a0      	strb	r0, [r4, #10]
    cdfe:	2009      	movs	r0, #9
    ce00:	e7cd      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ce02:	7022      	strb	r2, [r4, #0]
    ce04:	20a1      	movs	r0, #161	; 0xa1
    ce06:	70a0      	strb	r0, [r4, #2]
    ce08:	7928      	ldrb	r0, [r5, #4]
    ce0a:	70e0      	strb	r0, [r4, #3]
    ce0c:	7968      	ldrb	r0, [r5, #5]
    ce0e:	7120      	strb	r0, [r4, #4]
    ce10:	2000      	movs	r0, #0
    ce12:	7160      	strb	r0, [r4, #5]
    ce14:	2004      	movs	r0, #4
    ce16:	e7c2      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ce18:	7022      	strb	r2, [r4, #0]
    ce1a:	20a2      	movs	r0, #162	; 0xa2
    ce1c:	70a0      	strb	r0, [r4, #2]
    ce1e:	7928      	ldrb	r0, [r5, #4]
    ce20:	70e0      	strb	r0, [r4, #3]
    ce22:	88a8      	ldrh	r0, [r5, #4]
    ce24:	0a00      	lsrs	r0, r0, #8
    ce26:	7120      	strb	r0, [r4, #4]
    ce28:	79a8      	ldrb	r0, [r5, #6]
    ce2a:	7160      	strb	r0, [r4, #5]
    ce2c:	88e8      	ldrh	r0, [r5, #6]
    ce2e:	0a00      	lsrs	r0, r0, #8
    ce30:	71a0      	strb	r0, [r4, #6]
    ce32:	7a28      	ldrb	r0, [r5, #8]
    ce34:	71e0      	strb	r0, [r4, #7]
    ce36:	8928      	ldrh	r0, [r5, #8]
    ce38:	0a00      	lsrs	r0, r0, #8
    ce3a:	7220      	strb	r0, [r4, #8]
    ce3c:	7aa8      	ldrb	r0, [r5, #10]
    ce3e:	7260      	strb	r0, [r4, #9]
    ce40:	8968      	ldrh	r0, [r5, #10]
    ce42:	0a00      	lsrs	r0, r0, #8
    ce44:	72a0      	strb	r0, [r4, #10]
    ce46:	7b28      	ldrb	r0, [r5, #12]
    ce48:	72e0      	strb	r0, [r4, #11]
    ce4a:	89a8      	ldrh	r0, [r5, #12]
    ce4c:	0a00      	lsrs	r0, r0, #8
    ce4e:	7320      	strb	r0, [r4, #12]
    ce50:	200b      	movs	r0, #11
    ce52:	e7a4      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ce54:	7022      	strb	r2, [r4, #0]
    ce56:	20a3      	movs	r0, #163	; 0xa3
    ce58:	70a0      	strb	r0, [r4, #2]
    ce5a:	7928      	ldrb	r0, [r5, #4]
    ce5c:	70e0      	strb	r0, [r4, #3]
    ce5e:	88a8      	ldrh	r0, [r5, #4]
    ce60:	0a00      	lsrs	r0, r0, #8
    ce62:	7120      	strb	r0, [r4, #4]
    ce64:	79a8      	ldrb	r0, [r5, #6]
    ce66:	7160      	strb	r0, [r4, #5]
    ce68:	79e8      	ldrb	r0, [r5, #7]
    ce6a:	71a0      	strb	r0, [r4, #6]
    ce6c:	2005      	movs	r0, #5
    ce6e:	e796      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ce70:	7026      	strb	r6, [r4, #0]
    ce72:	2013      	movs	r0, #19
    ce74:	70a0      	strb	r0, [r4, #2]
    ce76:	7928      	ldrb	r0, [r5, #4]
    ce78:	70e0      	strb	r0, [r4, #3]
    ce7a:	7968      	ldrb	r0, [r5, #5]
    ce7c:	7120      	strb	r0, [r4, #4]
    ce7e:	f8d5 0006 	ldr.w	r0, [r5, #6]
    ce82:	f8c4 0005 	str.w	r0, [r4, #5]
    ce86:	8968      	ldrh	r0, [r5, #10]
    ce88:	f8a4 0009 	strh.w	r0, [r4, #9]
    ce8c:	200a      	movs	r0, #10
    ce8e:	e786      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ce90:	7022      	strb	r2, [r4, #0]
    ce92:	20a4      	movs	r0, #164	; 0xa4
    ce94:	70a0      	strb	r0, [r4, #2]
    ce96:	7928      	ldrb	r0, [r5, #4]
    ce98:	70e0      	strb	r0, [r4, #3]
    ce9a:	88a8      	ldrh	r0, [r5, #4]
    ce9c:	0a00      	lsrs	r0, r0, #8
    ce9e:	7120      	strb	r0, [r4, #4]
    cea0:	79a8      	ldrb	r0, [r5, #6]
    cea2:	7160      	strb	r0, [r4, #5]
    cea4:	79e8      	ldrb	r0, [r5, #7]
    cea6:	71a0      	strb	r0, [r4, #6]
    cea8:	2007      	movs	r0, #7
    ceaa:	e778      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ceac:	7022      	strb	r2, [r4, #0]
    ceae:	2080      	movs	r0, #128	; 0x80
    ceb0:	70a0      	strb	r0, [r4, #2]
    ceb2:	88a9      	ldrh	r1, [r5, #4]
    ceb4:	f8a4 1003 	strh.w	r1, [r4, #3]
    ceb8:	88e9      	ldrh	r1, [r5, #6]
    ceba:	f8a4 1005 	strh.w	r1, [r4, #5]
    cebe:	7a29      	ldrb	r1, [r5, #8]
    cec0:	71e1      	strb	r1, [r4, #7]
    cec2:	8969      	ldrh	r1, [r5, #10]
    cec4:	8121      	strh	r1, [r4, #8]
    cec6:	89a9      	ldrh	r1, [r5, #12]
    cec8:	8161      	strh	r1, [r4, #10]
    ceca:	89e9      	ldrh	r1, [r5, #14]
    cecc:	81a1      	strh	r1, [r4, #12]
    cece:	7c29      	ldrb	r1, [r5, #16]
    ced0:	f001 0101 	and.w	r1, r1, #1
    ced4:	73a1      	strb	r1, [r4, #14]
    ced6:	200d      	movs	r0, #13
    ced8:	e761      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>

0000ceda <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>:
    ceda:	223e      	movs	r2, #62	; 0x3e
    cedc:	7002      	strb	r2, [r0, #0]
    cede:	2201      	movs	r2, #1
    cee0:	7082      	strb	r2, [r0, #2]
    cee2:	790a      	ldrb	r2, [r1, #4]
    cee4:	70c2      	strb	r2, [r0, #3]
    cee6:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    ceea:	7102      	strb	r2, [r0, #4]
    ceec:	880a      	ldrh	r2, [r1, #0]
    ceee:	0a12      	lsrs	r2, r2, #8
    cef0:	7142      	strb	r2, [r0, #5]
    cef2:	788a      	ldrb	r2, [r1, #2]
    cef4:	7182      	strb	r2, [r0, #6]
    cef6:	78ca      	ldrb	r2, [r1, #3]
    cef8:	71c2      	strb	r2, [r0, #7]
    cefa:	684a      	ldr	r2, [r1, #4]
    cefc:	6082      	str	r2, [r0, #8]
    cefe:	890a      	ldrh	r2, [r1, #8]
    cf00:	8182      	strh	r2, [r0, #12]
    cf02:	7d8a      	ldrb	r2, [r1, #22]
    cf04:	7382      	strb	r2, [r0, #14]
    cf06:	8aca      	ldrh	r2, [r1, #22]
    cf08:	0a12      	lsrs	r2, r2, #8
    cf0a:	73c2      	strb	r2, [r0, #15]
    cf0c:	7e0a      	ldrb	r2, [r1, #24]
    cf0e:	7402      	strb	r2, [r0, #16]
    cf10:	8b0a      	ldrh	r2, [r1, #24]
    cf12:	0a12      	lsrs	r2, r2, #8
    cf14:	7442      	strb	r2, [r0, #17]
    cf16:	7e8a      	ldrb	r2, [r1, #26]
    cf18:	7482      	strb	r2, [r0, #18]
    cf1a:	8b4a      	ldrh	r2, [r1, #26]
    cf1c:	0a12      	lsrs	r2, r2, #8
    cf1e:	74c2      	strb	r2, [r0, #19]
    cf20:	7f09      	ldrb	r1, [r1, #28]
    cf22:	7501      	strb	r1, [r0, #20]
    cf24:	2113      	movs	r1, #19
    cf26:	7041      	strb	r1, [r0, #1]
    cf28:	4608      	mov	r0, r1
    cf2a:	4770      	bx	lr
    cf2c:	223e      	movs	r2, #62	; 0x3e
    cf2e:	7002      	strb	r2, [r0, #0]
    cf30:	220a      	movs	r2, #10
    cf32:	7082      	strb	r2, [r0, #2]
    cf34:	790a      	ldrb	r2, [r1, #4]
    cf36:	70c2      	strb	r2, [r0, #3]
    cf38:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    cf3c:	7102      	strb	r2, [r0, #4]
    cf3e:	880a      	ldrh	r2, [r1, #0]
    cf40:	0a12      	lsrs	r2, r2, #8
    cf42:	7142      	strb	r2, [r0, #5]
    cf44:	788a      	ldrb	r2, [r1, #2]
    cf46:	7182      	strb	r2, [r0, #6]
    cf48:	78ca      	ldrb	r2, [r1, #3]
    cf4a:	71c2      	strb	r2, [r0, #7]
    cf4c:	684a      	ldr	r2, [r1, #4]
    cf4e:	6082      	str	r2, [r0, #8]
    cf50:	890a      	ldrh	r2, [r1, #8]
    cf52:	8182      	strh	r2, [r0, #12]
    cf54:	f8d1 200a 	ldr.w	r2, [r1, #10]
    cf58:	f8c0 200e 	str.w	r2, [r0, #14]
    cf5c:	89ca      	ldrh	r2, [r1, #14]
    cf5e:	8242      	strh	r2, [r0, #18]
    cf60:	690a      	ldr	r2, [r1, #16]
    cf62:	6142      	str	r2, [r0, #20]
    cf64:	8a8a      	ldrh	r2, [r1, #20]
    cf66:	8302      	strh	r2, [r0, #24]
    cf68:	7d8a      	ldrb	r2, [r1, #22]
    cf6a:	7682      	strb	r2, [r0, #26]
    cf6c:	8aca      	ldrh	r2, [r1, #22]
    cf6e:	0a12      	lsrs	r2, r2, #8
    cf70:	76c2      	strb	r2, [r0, #27]
    cf72:	7e0a      	ldrb	r2, [r1, #24]
    cf74:	7702      	strb	r2, [r0, #28]
    cf76:	8b0a      	ldrh	r2, [r1, #24]
    cf78:	0a12      	lsrs	r2, r2, #8
    cf7a:	7742      	strb	r2, [r0, #29]
    cf7c:	7e8a      	ldrb	r2, [r1, #26]
    cf7e:	7782      	strb	r2, [r0, #30]
    cf80:	8b4a      	ldrh	r2, [r1, #26]
    cf82:	0a12      	lsrs	r2, r2, #8
    cf84:	77c2      	strb	r2, [r0, #31]
    cf86:	7f09      	ldrb	r1, [r1, #28]
    cf88:	f880 1020 	strb.w	r1, [r0, #32]
    cf8c:	211f      	movs	r1, #31
    cf8e:	7041      	strb	r1, [r0, #1]
    cf90:	4608      	mov	r0, r1
    cf92:	4770      	bx	lr
    cf94:	094a      	lsrs	r2, r1, #5
    cf96:	f001 011f 	and.w	r1, r1, #31
    cf9a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    cf9e:	40c8      	lsrs	r0, r1
    cfa0:	f000 0001 	and.w	r0, r0, #1
    cfa4:	4770      	bx	lr

0000cfa6 <sdc_hci_data_put>:
    cfa6:	b510      	push	{r4, lr}
    cfa8:	f06f 0415 	mvn.w	r4, #21
    cfac:	b120      	cbz	r0, cfb8 <sdc_hci_data_put+0x12>
    cfae:	f7ff fcf3 	bl	c998 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    cfb2:	b108      	cbz	r0, cfb8 <sdc_hci_data_put+0x12>
    cfb4:	2000      	movs	r0, #0
    cfb6:	bd10      	pop	{r4, pc}
    cfb8:	4620      	mov	r0, r4
    cfba:	bd10      	pop	{r4, pc}

0000cfbc <sdc_hci_get>:
    cfbc:	b510      	push	{r4, lr}
    cfbe:	460c      	mov	r4, r1
    cfc0:	b130      	cbz	r0, cfd0 <sdc_hci_get+0x14>
    cfc2:	b12c      	cbz	r4, cfd0 <sdc_hci_get+0x14>
    cfc4:	f7f3 fe3a 	bl	c3c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    cfc8:	b128      	cbz	r0, cfd6 <sdc_hci_get+0x1a>
    cfca:	7020      	strb	r0, [r4, #0]
    cfcc:	2000      	movs	r0, #0
    cfce:	bd10      	pop	{r4, pc}
    cfd0:	f06f 0015 	mvn.w	r0, #21
    cfd4:	bd10      	pop	{r4, pc}
    cfd6:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cfda:	bd10      	pop	{r4, pc}

0000cfdc <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    cfdc:	f002 bd48 	b.w	fa70 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000cfe0 <sdc_hci_cmd_cb_read_transmit_power_level>:
    cfe0:	f002 bd63 	b.w	faaa <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000cfe4 <sdc_hci_cmd_cb_set_event_mask>:
    cfe4:	b510      	push	{r4, lr}
    cfe6:	f7f3 fecd 	bl	d84 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    cfea:	2000      	movs	r0, #0
    cfec:	bd10      	pop	{r4, pc}

0000cfee <sdc_hci_cmd_cb_set_event_mask_page_2>:
    cfee:	b510      	push	{r4, lr}
    cff0:	f7f3 feda 	bl	da8 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    cff4:	2000      	movs	r0, #0
    cff6:	bd10      	pop	{r4, pc}

0000cff8 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    cff8:	f002 bd78 	b.w	faec <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000cffc <sdc_hci_cmd_vs_conn_event_extend>:
    cffc:	b508      	push	{r3, lr}
    cffe:	7800      	ldrb	r0, [r0, #0]
    d000:	f88d 0000 	strb.w	r0, [sp]
    d004:	4668      	mov	r0, sp
    d006:	f002 fd0f 	bl	fa28 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    d00a:	bd08      	pop	{r3, pc}

0000d00c <sdc_hci_cmd_vs_conn_update>:
    d00c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    d00e:	2100      	movs	r1, #0
    d010:	9100      	str	r1, [sp, #0]
    d012:	9101      	str	r1, [sp, #4]
    d014:	9102      	str	r1, [sp, #8]
    d016:	9103      	str	r1, [sp, #12]
    d018:	f8d0 1002 	ldr.w	r1, [r0, #2]
    d01c:	f641 524c 	movw	r2, #7500	; 0x1d4c
    d020:	4291      	cmp	r1, r2
    d022:	d304      	bcc.n	d02e <sdc_hci_cmd_vs_conn_update+0x22>
    d024:	f240 42e2 	movw	r2, #1250	; 0x4e2
    d028:	fbb1 f1f2 	udiv	r1, r1, r2
    d02c:	e005      	b.n	d03a <sdc_hci_cmd_vs_conn_update+0x2e>
    d02e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d032:	fbb1 f1f2 	udiv	r1, r1, r2
    d036:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    d03a:	8802      	ldrh	r2, [r0, #0]
    d03c:	b289      	uxth	r1, r1
    d03e:	f8ad 2000 	strh.w	r2, [sp]
    d042:	f8ad 1002 	strh.w	r1, [sp, #2]
    d046:	f8ad 1004 	strh.w	r1, [sp, #4]
    d04a:	88c1      	ldrh	r1, [r0, #6]
    d04c:	f8ad 1006 	strh.w	r1, [sp, #6]
    d050:	8900      	ldrh	r0, [r0, #8]
    d052:	f8ad 0008 	strh.w	r0, [sp, #8]
    d056:	4668      	mov	r0, sp
    d058:	f002 fa99 	bl	f58e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    d05c:	b004      	add	sp, #16
    d05e:	bd10      	pop	{r4, pc}

0000d060 <sdc_hci_cmd_vs_event_length_set>:
    d060:	f7fa b880 	b.w	7164 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000d064 <sdc_hci_cmd_vs_llpm_mode_set>:
    d064:	2001      	movs	r0, #1
    d066:	4770      	bx	lr

0000d068 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    d068:	7800      	ldrb	r0, [r0, #0]
    d06a:	b100      	cbz	r0, d06e <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    d06c:	2001      	movs	r0, #1
    d06e:	f002 bc0a 	b.w	f886 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000d072 <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    d072:	b510      	push	{r4, lr}
    d074:	4604      	mov	r4, r0
    d076:	f7ff f9e3 	bl	c440 <mpsl_temperature_get>
    d07a:	17c1      	asrs	r1, r0, #31
    d07c:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    d080:	1080      	asrs	r0, r0, #2
    d082:	287f      	cmp	r0, #127	; 0x7f
    d084:	dd01      	ble.n	d08a <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    d086:	207f      	movs	r0, #127	; 0x7f
    d088:	e004      	b.n	d094 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d08a:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    d08e:	4288      	cmp	r0, r1
    d090:	da00      	bge.n	d094 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d092:	4608      	mov	r0, r1
    d094:	7020      	strb	r0, [r4, #0]
    d096:	2000      	movs	r0, #0
    d098:	bd10      	pop	{r4, pc}

0000d09a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    d09a:	b570      	push	{r4, r5, r6, lr}
    d09c:	4605      	mov	r5, r0
    d09e:	2210      	movs	r2, #16
    d0a0:	2100      	movs	r1, #0
    d0a2:	f003 fb5e 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d0a6:	2210      	movs	r2, #16
    d0a8:	2100      	movs	r1, #0
    d0aa:	f105 0010 	add.w	r0, r5, #16
    d0ae:	f003 fb58 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d0b2:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    d0b6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    d0ba:	1c40      	adds	r0, r0, #1
    d0bc:	d10b      	bne.n	d0d6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d0be:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d0c2:	1c40      	adds	r0, r0, #1
    d0c4:	d107      	bne.n	d0d6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d0c6:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    d0ca:	1c40      	adds	r0, r0, #1
    d0cc:	d103      	bne.n	d0d6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d0ce:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    d0d2:	1c40      	adds	r0, r0, #1
    d0d4:	d00b      	beq.n	d0ee <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    d0d6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    d0da:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d0de:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    d0e2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    d0e6:	612a      	str	r2, [r5, #16]
    d0e8:	6168      	str	r0, [r5, #20]
    d0ea:	61a9      	str	r1, [r5, #24]
    d0ec:	61eb      	str	r3, [r5, #28]
    d0ee:	2000      	movs	r0, #0
    d0f0:	f7f4 fac4 	bl	167c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d0f4:	b918      	cbnz	r0, d0fe <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    d0f6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    d0fa:	07c0      	lsls	r0, r0, #31
    d0fc:	d118      	bne.n	d130 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d0fe:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    d102:	1c40      	adds	r0, r0, #1
    d104:	d10b      	bne.n	d11e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d106:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    d10a:	1c40      	adds	r0, r0, #1
    d10c:	d107      	bne.n	d11e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d10e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    d112:	1c40      	adds	r0, r0, #1
    d114:	d103      	bne.n	d11e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d116:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    d11a:	1c40      	adds	r0, r0, #1
    d11c:	d008      	beq.n	d130 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d11e:	f854 0f90 	ldr.w	r0, [r4, #144]!
    d122:	6861      	ldr	r1, [r4, #4]
    d124:	68a2      	ldr	r2, [r4, #8]
    d126:	68e3      	ldr	r3, [r4, #12]
    d128:	6028      	str	r0, [r5, #0]
    d12a:	6069      	str	r1, [r5, #4]
    d12c:	60aa      	str	r2, [r5, #8]
    d12e:	60eb      	str	r3, [r5, #12]
    d130:	2000      	movs	r0, #0
    d132:	bd70      	pop	{r4, r5, r6, pc}

0000d134 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    d134:	b538      	push	{r3, r4, r5, lr}
    d136:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d13a:	4604      	mov	r4, r0
    d13c:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d140:	1c40      	adds	r0, r0, #1
    d142:	d105      	bne.n	d150 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    d144:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    d148:	43c0      	mvns	r0, r0
    d14a:	0400      	lsls	r0, r0, #16
    d14c:	0c00      	lsrs	r0, r0, #16
    d14e:	d03e      	beq.n	d1ce <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d150:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    d154:	07c0      	lsls	r0, r0, #31
    d156:	d03a      	beq.n	d1ce <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d158:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d15c:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    d160:	f8ad 1000 	strh.w	r1, [sp]
    d164:	f8c4 0001 	str.w	r0, [r4, #1]
    d168:	f8bd 0000 	ldrh.w	r0, [sp]
    d16c:	f8a4 0005 	strh.w	r0, [r4, #5]
    d170:	79a0      	ldrb	r0, [r4, #6]
    d172:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    d176:	71a0      	strb	r0, [r4, #6]
    d178:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    d17c:	1c40      	adds	r0, r0, #1
    d17e:	d00f      	beq.n	d1a0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d180:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    d184:	1c40      	adds	r0, r0, #1
    d186:	d00b      	beq.n	d1a0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d188:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    d18c:	1c40      	adds	r0, r0, #1
    d18e:	d007      	beq.n	d1a0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d190:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    d194:	1c40      	adds	r0, r0, #1
    d196:	d003      	beq.n	d1a0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d198:	2000      	movs	r0, #0
    d19a:	f7f4 fa6f 	bl	167c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d19e:	b140      	cbz	r0, d1b2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    d1a0:	2210      	movs	r2, #16
    d1a2:	2100      	movs	r1, #0
    d1a4:	1de0      	adds	r0, r4, #7
    d1a6:	f003 fadc 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d1aa:	2001      	movs	r0, #1
    d1ac:	7020      	strb	r0, [r4, #0]
    d1ae:	2000      	movs	r0, #0
    d1b0:	bd38      	pop	{r3, r4, r5, pc}
    d1b2:	f855 2f90 	ldr.w	r2, [r5, #144]!
    d1b6:	6869      	ldr	r1, [r5, #4]
    d1b8:	68a8      	ldr	r0, [r5, #8]
    d1ba:	68eb      	ldr	r3, [r5, #12]
    d1bc:	f8c4 2007 	str.w	r2, [r4, #7]
    d1c0:	f8c4 100b 	str.w	r1, [r4, #11]
    d1c4:	f8c4 000f 	str.w	r0, [r4, #15]
    d1c8:	f8c4 3013 	str.w	r3, [r4, #19]
    d1cc:	e7ed      	b.n	d1aa <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    d1ce:	2000      	movs	r0, #0
    d1d0:	e7ec      	b.n	d1ac <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000d1d2 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    d1d2:	f002 bc18 	b.w	fa06 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000d1d6 <sdc_hci_cmd_ip_read_bd_addr>:
    d1d6:	f002 bc5c 	b.w	fa92 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000d1da <sdc_hci_cmd_ip_read_local_version_information>:
    d1da:	f7fa b815 	b.w	7208 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000d1de <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    d1de:	f002 b9b5 	b.w	f54c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000d1e2 <sdc_hci_cmd_le_clear_filter_accept_list>:
    d1e2:	f002 b9ca 	b.w	f57a <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000d1e6 <sdc_hci_cmd_le_conn_update>:
    d1e6:	f002 b9d2 	b.w	f58e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>

0000d1ea <sdc_hci_cmd_le_create_conn>:
    d1ea:	f7f9 bea1 	b.w	6f30 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>

0000d1ee <sdc_hci_cmd_le_create_conn_cancel>:
    d1ee:	f002 ba11 	b.w	f614 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>

0000d1f2 <sdc_hci_cmd_le_enable_encryption>:
    d1f2:	f002 bb05 	b.w	f800 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>

0000d1f6 <sdc_hci_cmd_le_encrypt>:
    d1f6:	f002 ba1d 	b.w	f634 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000d1fa <sdc_hci_cmd_le_rand>:
    d1fa:	f002 ba24 	b.w	f646 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000d1fe <sdc_hci_cmd_le_read_buffer_size>:
    d1fe:	f7f9 bef3 	b.w	6fe8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000d202 <sdc_hci_cmd_le_read_channel_map>:
    d202:	f7f9 befb 	b.w	6ffc <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000d206 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    d206:	f002 ba58 	b.w	f6ba <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000d20a <sdc_hci_cmd_le_read_max_data_length>:
    d20a:	f002 ba22 	b.w	f652 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000d20e <sdc_hci_cmd_le_read_phy>:
    d20e:	f7f9 bf1d 	b.w	704c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000d212 <sdc_hci_cmd_le_read_remote_features>:
    d212:	f002 ba27 	b.w	f664 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000d216 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    d216:	f7f9 bf3f 	b.w	7098 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000d21a <sdc_hci_cmd_le_read_transmit_power>:
    d21a:	f002 ba3e 	b.w	f69a <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000d21e <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    d21e:	f002 ba50 	b.w	f6c2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000d222 <sdc_hci_cmd_le_set_data_length>:
    d222:	f002 ba63 	b.w	f6ec <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000d226 <sdc_hci_cmd_le_set_default_phy>:
    d226:	f7f9 bf41 	b.w	70ac <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000d22a <sdc_hci_cmd_le_set_event_mask>:
    d22a:	b510      	push	{r4, lr}
    d22c:	f7f3 fd98 	bl	d60 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    d230:	2000      	movs	r0, #0
    d232:	bd10      	pop	{r4, pc}

0000d234 <sdc_hci_cmd_le_set_host_channel_classification>:
    d234:	f7f9 bf62 	b.w	70fc <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>

0000d238 <sdc_hci_cmd_le_set_phy>:
    d238:	f002 ba78 	b.w	f72c <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000d23c <sdc_hci_cmd_le_set_random_address>:
    d23c:	f002 ba8f 	b.w	f75e <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000d240 <sdc_hci_cmd_le_set_scan_enable>:
    d240:	f002 ba9b 	b.w	f77a <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>

0000d244 <sdc_hci_cmd_le_set_scan_params>:
    d244:	f002 baaf 	b.w	f7a6 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>

0000d248 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    d248:	f002 bb0c 	b.w	f864 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000d24c <sdc_hci_cmd_lc_disconnect>:
    d24c:	f002 b933 	b.w	f4b6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000d250 <sdc_hci_cmd_lc_read_remote_version_information>:
    d250:	f7f9 bfe4 	b.w	721c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    d254:	b570      	push	{r4, r5, r6, lr}
    d256:	880b      	ldrh	r3, [r1, #0]
    d258:	7cc4      	ldrb	r4, [r0, #19]
    d25a:	f100 0518 	add.w	r5, r0, #24
    d25e:	f3c3 060e 	ubfx	r6, r3, #0, #15
    d262:	8802      	ldrh	r2, [r0, #0]
    d264:	4435      	add	r5, r6
    d266:	1d64      	adds	r4, r4, #5
    d268:	882d      	ldrh	r5, [r5, #0]
    d26a:	4422      	add	r2, r4
    d26c:	b292      	uxth	r2, r2
    d26e:	4425      	add	r5, r4
    d270:	1e54      	subs	r4, r2, #1
    d272:	442c      	add	r4, r5
    d274:	fb94 f4f2 	sdiv	r4, r4, r2
    d278:	fb02 6204 	mla	r2, r2, r4, r6
    d27c:	8840      	ldrh	r0, [r0, #2]
    d27e:	b292      	uxth	r2, r2
    d280:	4290      	cmp	r0, r2
    d282:	d903      	bls.n	d28c <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d284:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d288:	4310      	orrs	r0, r2
    d28a:	e002      	b.n	d292 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d28c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d290:	4398      	bics	r0, r3
    d292:	8008      	strh	r0, [r1, #0]
    d294:	bd70      	pop	{r4, r5, r6, pc}
    d296:	0442      	lsls	r2, r0, #17
    d298:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    d29c:	d107      	bne.n	d2ae <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d29e:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d2a2:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d2a6:	4288      	cmp	r0, r1
    d2a8:	d001      	beq.n	d2ae <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d2aa:	2001      	movs	r0, #1
    d2ac:	4770      	bx	lr
    d2ae:	2000      	movs	r0, #0
    d2b0:	4770      	bx	lr

0000d2b2 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d2b2:	8881      	ldrh	r1, [r0, #4]
    d2b4:	88c0      	ldrh	r0, [r0, #6]
    d2b6:	4288      	cmp	r0, r1
    d2b8:	d101      	bne.n	d2be <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    d2ba:	2001      	movs	r0, #1
    d2bc:	4770      	bx	lr
    d2be:	2000      	movs	r0, #0
    d2c0:	4770      	bx	lr

0000d2c2 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    d2c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d2c6:	460f      	mov	r7, r1
    d2c8:	4604      	mov	r4, r0
    d2ca:	f100 0118 	add.w	r1, r0, #24
    d2ce:	8880      	ldrh	r0, [r0, #4]
    d2d0:	2600      	movs	r6, #0
    d2d2:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d2d6:	1845      	adds	r5, r0, r1
    d2d8:	603e      	str	r6, [r7, #0]
    d2da:	89e0      	ldrh	r0, [r4, #14]
    d2dc:	2800      	cmp	r0, #0
    d2de:	d016      	beq.n	d30e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    d2e0:	8961      	ldrh	r1, [r4, #10]
    d2e2:	4408      	add	r0, r1
    d2e4:	b280      	uxth	r0, r0
    d2e6:	8160      	strh	r0, [r4, #10]
    d2e8:	8829      	ldrh	r1, [r5, #0]
    d2ea:	4288      	cmp	r0, r1
    d2ec:	d905      	bls.n	d2fa <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    d2ee:	f240 1151 	movw	r1, #337	; 0x151
    d2f2:	f04f 0014 	mov.w	r0, #20
    d2f6:	f7f3 fbb5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d2fa:	d106      	bne.n	d30a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    d2fc:	f104 0104 	add.w	r1, r4, #4
    d300:	4620      	mov	r0, r4
    d302:	f7ff ffa7 	bl	d254 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d306:	8166      	strh	r6, [r4, #10]
    d308:	603d      	str	r5, [r7, #0]
    d30a:	81e6      	strh	r6, [r4, #14]
    d30c:	2001      	movs	r0, #1
    d30e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d312 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d316:	4604      	mov	r4, r0
    d318:	f100 0318 	add.w	r3, r0, #24
    d31c:	88c0      	ldrh	r0, [r0, #6]
    d31e:	460e      	mov	r6, r1
    d320:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d324:	8a20      	ldrh	r0, [r4, #16]
    d326:	19d9      	adds	r1, r3, r7
    d328:	b108      	cbz	r0, d32e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    d32a:	42b0      	cmp	r0, r6
    d32c:	d202      	bcs.n	d334 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    d32e:	2000      	movs	r0, #0
    d330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d334:	89a0      	ldrh	r0, [r4, #12]
    d336:	2500      	movs	r5, #0
    d338:	b140      	cbz	r0, d34c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    d33a:	f8b1 c000 	ldrh.w	ip, [r1]
    d33e:	4560      	cmp	r0, ip
    d340:	d006      	beq.n	d350 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    d342:	f44f 7101 	mov.w	r1, #516	; 0x204
    d346:	2014      	movs	r0, #20
    d348:	f7f3 fb8c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d34c:	800d      	strh	r5, [r1, #0]
    d34e:	e00e      	b.n	d36e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d350:	f894 c013 	ldrb.w	ip, [r4, #19]
    d354:	4418      	add	r0, r3
    d356:	f10c 0c05 	add.w	ip, ip, #5
    d35a:	44bc      	add	ip, r7
    d35c:	4460      	add	r0, ip
    d35e:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    d362:	f820 cc03 	strh.w	ip, [r0, #-3]
    d366:	f894 c016 	ldrb.w	ip, [r4, #22]
    d36a:	f800 cc01 	strb.w	ip, [r0, #-1]
    d36e:	89a0      	ldrh	r0, [r4, #12]
    d370:	4430      	add	r0, r6
    d372:	81a0      	strh	r0, [r4, #12]
    d374:	8808      	ldrh	r0, [r1, #0]
    d376:	4430      	add	r0, r6
    d378:	8008      	strh	r0, [r1, #0]
    d37a:	b12a      	cbz	r2, d388 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
    d37c:	1da1      	adds	r1, r4, #6
    d37e:	4620      	mov	r0, r4
    d380:	f7ff ff68 	bl	d254 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d384:	81a5      	strh	r5, [r4, #12]
    d386:	e00a      	b.n	d39e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
    d388:	7ce0      	ldrb	r0, [r4, #19]
    d38a:	89a1      	ldrh	r1, [r4, #12]
    d38c:	1d40      	adds	r0, r0, #5
    d38e:	4438      	add	r0, r7
    d390:	4419      	add	r1, r3
    d392:	4408      	add	r0, r1
    d394:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d398:	82a1      	strh	r1, [r4, #20]
    d39a:	7880      	ldrb	r0, [r0, #2]
    d39c:	75a0      	strb	r0, [r4, #22]
    d39e:	8225      	strh	r5, [r4, #16]
    d3a0:	2001      	movs	r0, #1
    d3a2:	e7c5      	b.n	d330 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000d3a4 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    d3a4:	1c80      	adds	r0, r0, #2
    d3a6:	4770      	bx	lr

0000d3a8 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>:
    d3a8:	b510      	push	{r4, lr}
    d3aa:	88c2      	ldrh	r2, [r0, #6]
    d3ac:	8903      	ldrh	r3, [r0, #8]
    d3ae:	f3c2 010e 	ubfx	r1, r2, #0, #15
    d3b2:	f3c3 040e 	ubfx	r4, r3, #0, #15
    d3b6:	1a61      	subs	r1, r4, r1
    d3b8:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
    d3bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    d3c0:	429a      	cmp	r2, r3
    d3c2:	d101      	bne.n	d3c8 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY+0x20>
    d3c4:	8842      	ldrh	r2, [r0, #2]
    d3c6:	4411      	add	r1, r2
    d3c8:	7cc2      	ldrb	r2, [r0, #19]
    d3ca:	8800      	ldrh	r0, [r0, #0]
    d3cc:	4410      	add	r0, r2
    d3ce:	1d40      	adds	r0, r0, #5
    d3d0:	b280      	uxth	r0, r0
    d3d2:	fb91 f0f0 	sdiv	r0, r1, r0
    d3d6:	b280      	uxth	r0, r0
    d3d8:	bd10      	pop	{r4, pc}

0000d3da <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d3da:	b510      	push	{r4, lr}
    d3dc:	4604      	mov	r4, r0
    d3de:	88c0      	ldrh	r0, [r0, #6]
    d3e0:	88a1      	ldrh	r1, [r4, #4]
    d3e2:	4281      	cmp	r1, r0
    d3e4:	d003      	beq.n	d3ee <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d3e6:	8960      	ldrh	r0, [r4, #10]
    d3e8:	b908      	cbnz	r0, d3ee <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d3ea:	89e0      	ldrh	r0, [r4, #14]
    d3ec:	b108      	cbz	r0, d3f2 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x18>
    d3ee:	2000      	movs	r0, #0
    d3f0:	bd10      	pop	{r4, pc}
    d3f2:	1d21      	adds	r1, r4, #4
    d3f4:	4620      	mov	r0, r4
    d3f6:	f7ff ff2d 	bl	d254 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d3fa:	2000      	movs	r0, #0
    d3fc:	81e0      	strh	r0, [r4, #14]
    d3fe:	2001      	movs	r0, #1
    d400:	bd10      	pop	{r4, pc}

0000d402 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d402:	b510      	push	{r4, lr}
    d404:	4604      	mov	r4, r0
    d406:	f100 0218 	add.w	r2, r0, #24
    d40a:	88c0      	ldrh	r0, [r0, #6]
    d40c:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d410:	4402      	add	r2, r0
    d412:	8820      	ldrh	r0, [r4, #0]
    d414:	2845      	cmp	r0, #69	; 0x45
    d416:	d200      	bcs.n	d41a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d418:	2045      	movs	r0, #69	; 0x45
    d41a:	4288      	cmp	r0, r1
    d41c:	d204      	bcs.n	d428 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d41e:	f44f 7182 	mov.w	r1, #260	; 0x104
    d422:	2014      	movs	r0, #20
    d424:	f7f3 fb1e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d428:	7ca0      	ldrb	r0, [r4, #18]
    d42a:	2800      	cmp	r0, #0
    d42c:	d003      	beq.n	d436 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d42e:	8810      	ldrh	r0, [r2, #0]
    d430:	4288      	cmp	r0, r1
    d432:	d201      	bcs.n	d438 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d434:	2000      	movs	r0, #0
    d436:	bd10      	pop	{r4, pc}
    d438:	8011      	strh	r1, [r2, #0]
    d43a:	1da1      	adds	r1, r4, #6
    d43c:	4620      	mov	r0, r4
    d43e:	f7ff ff09 	bl	d254 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d442:	2000      	movs	r0, #0
    d444:	74a0      	strb	r0, [r4, #18]
    d446:	2001      	movs	r0, #1
    d448:	bd10      	pop	{r4, pc}

0000d44a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d44a:	b510      	push	{r4, lr}
    d44c:	88c4      	ldrh	r4, [r0, #6]
    d44e:	8883      	ldrh	r3, [r0, #4]
    d450:	4601      	mov	r1, r0
    d452:	f100 0218 	add.w	r2, r0, #24
    d456:	f3c3 000e 	ubfx	r0, r3, #0, #15
    d45a:	4410      	add	r0, r2
    d45c:	42a3      	cmp	r3, r4
    d45e:	d002      	beq.n	d466 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
    d460:	8949      	ldrh	r1, [r1, #10]
    d462:	2900      	cmp	r1, #0
    d464:	d000      	beq.n	d468 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1e>
    d466:	2000      	movs	r0, #0
    d468:	bd10      	pop	{r4, pc}

0000d46a <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    d46a:	8803      	ldrh	r3, [r0, #0]
    d46c:	2b45      	cmp	r3, #69	; 0x45
    d46e:	d200      	bcs.n	d472 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    d470:	2345      	movs	r3, #69	; 0x45
    d472:	8013      	strh	r3, [r2, #0]
    d474:	88c2      	ldrh	r2, [r0, #6]
    d476:	f3c2 030e 	ubfx	r3, r2, #0, #15
    d47a:	f100 0218 	add.w	r2, r0, #24
    d47e:	441a      	add	r2, r3
    d480:	600a      	str	r2, [r1, #0]
    d482:	8980      	ldrh	r0, [r0, #12]
    d484:	4770      	bx	lr

0000d486 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d486:	7cc0      	ldrb	r0, [r0, #19]
    d488:	1d40      	adds	r0, r0, #5
    d48a:	4408      	add	r0, r1
    d48c:	1ec0      	subs	r0, r0, #3
    d48e:	6010      	str	r0, [r2, #0]
    d490:	8808      	ldrh	r0, [r1, #0]
    d492:	4770      	bx	lr

0000d494 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d498:	460e      	mov	r6, r1
    d49a:	88c1      	ldrh	r1, [r0, #6]
    d49c:	8902      	ldrh	r2, [r0, #8]
    d49e:	4604      	mov	r4, r0
    d4a0:	f100 0818 	add.w	r8, r0, #24
    d4a4:	8800      	ldrh	r0, [r0, #0]
    d4a6:	f3c1 050e 	ubfx	r5, r1, #0, #15
    d4aa:	f3c2 070e 	ubfx	r7, r2, #0, #15
    d4ae:	2845      	cmp	r0, #69	; 0x45
    d4b0:	d200      	bcs.n	d4b4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d4b2:	2045      	movs	r0, #69	; 0x45
    d4b4:	42b0      	cmp	r0, r6
    d4b6:	d203      	bcs.n	d4c0 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d4b8:	21c6      	movs	r1, #198	; 0xc6
    d4ba:	2014      	movs	r0, #20
    d4bc:	f7f3 fad2 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d4c0:	4610      	mov	r0, r2
    d4c2:	f7ff fee8 	bl	d296 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d4c6:	b110      	cbz	r0, d4ce <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    d4c8:	2000      	movs	r0, #0
    d4ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d4ce:	42af      	cmp	r7, r5
    d4d0:	d908      	bls.n	d4e4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d4d2:	7ce1      	ldrb	r1, [r4, #19]
    d4d4:	1b78      	subs	r0, r7, r5
    d4d6:	1a40      	subs	r0, r0, r1
    d4d8:	1f40      	subs	r0, r0, #5
    d4da:	4286      	cmp	r6, r0
    d4dc:	dd02      	ble.n	d4e4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d4de:	2000      	movs	r0, #0
    d4e0:	74a0      	strb	r0, [r4, #18]
    d4e2:	e7f1      	b.n	d4c8 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    d4e4:	eb08 0005 	add.w	r0, r8, r5
    d4e8:	2101      	movs	r1, #1
    d4ea:	8006      	strh	r6, [r0, #0]
    d4ec:	74a1      	strb	r1, [r4, #18]
    d4ee:	e7ec      	b.n	d4ca <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000d4f0 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    d4f0:	b538      	push	{r3, r4, r5, lr}
    d4f2:	88c4      	ldrh	r4, [r0, #6]
    d4f4:	8881      	ldrh	r1, [r0, #4]
    d4f6:	f100 0218 	add.w	r2, r0, #24
    d4fa:	f3c1 030e 	ubfx	r3, r1, #0, #15
    d4fe:	441a      	add	r2, r3
    d500:	42a1      	cmp	r1, r4
    d502:	d010      	beq.n	d526 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d504:	8943      	ldrh	r3, [r0, #10]
    d506:	89c5      	ldrh	r5, [r0, #14]
    d508:	8812      	ldrh	r2, [r2, #0]
    d50a:	442b      	add	r3, r5
    d50c:	4293      	cmp	r3, r2
    d50e:	d308      	bcc.n	d522 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    d510:	f8ad 1000 	strh.w	r1, [sp]
    d514:	4669      	mov	r1, sp
    d516:	f7ff fe9d 	bl	d254 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d51a:	f8bd 0000 	ldrh.w	r0, [sp]
    d51e:	42a0      	cmp	r0, r4
    d520:	d001      	beq.n	d526 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d522:	2001      	movs	r0, #1
    d524:	bd38      	pop	{r3, r4, r5, pc}
    d526:	2000      	movs	r0, #0
    d528:	bd38      	pop	{r3, r4, r5, pc}

0000d52a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    d52a:	b570      	push	{r4, r5, r6, lr}
    d52c:	88c6      	ldrh	r6, [r0, #6]
    d52e:	8885      	ldrh	r5, [r0, #4]
    d530:	4603      	mov	r3, r0
    d532:	f100 0418 	add.w	r4, r0, #24
    d536:	f3c5 000e 	ubfx	r0, r5, #0, #15
    d53a:	4420      	add	r0, r4
    d53c:	42b5      	cmp	r5, r6
    d53e:	d102      	bne.n	d546 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    d540:	2000      	movs	r0, #0
    d542:	81d8      	strh	r0, [r3, #14]
    d544:	bd70      	pop	{r4, r5, r6, pc}
    d546:	8804      	ldrh	r4, [r0, #0]
    d548:	895d      	ldrh	r5, [r3, #10]
    d54a:	7cde      	ldrb	r6, [r3, #19]
    d54c:	1b64      	subs	r4, r4, r5
    d54e:	4435      	add	r5, r6
    d550:	4428      	add	r0, r5
    d552:	880d      	ldrh	r5, [r1, #0]
    d554:	b2a4      	uxth	r4, r4
    d556:	1c80      	adds	r0, r0, #2
    d558:	42a5      	cmp	r5, r4
    d55a:	d900      	bls.n	d55e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    d55c:	800c      	strh	r4, [r1, #0]
    d55e:	895c      	ldrh	r4, [r3, #10]
    d560:	b124      	cbz	r4, d56c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    d562:	2400      	movs	r4, #0
    d564:	7014      	strb	r4, [r2, #0]
    d566:	8809      	ldrh	r1, [r1, #0]
    d568:	81d9      	strh	r1, [r3, #14]
    d56a:	bd70      	pop	{r4, r5, r6, pc}
    d56c:	2401      	movs	r4, #1
    d56e:	e7f9      	b.n	d564 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000d570 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d574:	461d      	mov	r5, r3
    d576:	4616      	mov	r6, r2
    d578:	9f06      	ldr	r7, [sp, #24]
    d57a:	460b      	mov	r3, r1
    d57c:	4604      	mov	r4, r0
    d57e:	463a      	mov	r2, r7
    d580:	4629      	mov	r1, r5
    d582:	4630      	mov	r0, r6
    d584:	f000 f839 	bl	d5fa <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d588:	4283      	cmp	r3, r0
    d58a:	d201      	bcs.n	d590 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    d58c:	219e      	movs	r1, #158	; 0x9e
    d58e:	e012      	b.n	d5b6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d590:	07a0      	lsls	r0, r4, #30
    d592:	d001      	beq.n	d598 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    d594:	219f      	movs	r1, #159	; 0x9f
    d596:	e00e      	b.n	d5b6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d598:	2218      	movs	r2, #24
    d59a:	2100      	movs	r1, #0
    d59c:	4620      	mov	r0, r4
    d59e:	f003 f8e0 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d5a2:	19a8      	adds	r0, r5, r6
    d5a4:	1d40      	adds	r0, r0, #5
    d5a6:	4378      	muls	r0, r7
    d5a8:	b280      	uxth	r0, r0
    d5aa:	74e5      	strb	r5, [r4, #19]
    d5ac:	8060      	strh	r0, [r4, #2]
    d5ae:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d5b2:	d903      	bls.n	d5bc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    d5b4:	21a4      	movs	r1, #164	; 0xa4
    d5b6:	2014      	movs	r0, #20
    d5b8:	f7f3 fa54 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d5bc:	8026      	strh	r6, [r4, #0]
    d5be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d5c2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d5c2:	b570      	push	{r4, r5, r6, lr}
    d5c4:	460b      	mov	r3, r1
    d5c6:	4604      	mov	r4, r0
    d5c8:	f100 0118 	add.w	r1, r0, #24
    d5cc:	8902      	ldrh	r2, [r0, #8]
    d5ce:	8880      	ldrh	r0, [r0, #4]
    d5d0:	f3c2 050e 	ubfx	r5, r2, #0, #15
    d5d4:	440d      	add	r5, r1
    d5d6:	4282      	cmp	r2, r0
    d5d8:	d101      	bne.n	d5de <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    d5da:	2000      	movs	r0, #0
    d5dc:	bd70      	pop	{r4, r5, r6, pc}
    d5de:	b123      	cbz	r3, d5ea <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    d5e0:	7ce2      	ldrb	r2, [r4, #19]
    d5e2:	1ca9      	adds	r1, r5, #2
    d5e4:	4618      	mov	r0, r3
    d5e6:	f003 f842 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d5ea:	882d      	ldrh	r5, [r5, #0]
    d5ec:	f104 0108 	add.w	r1, r4, #8
    d5f0:	4620      	mov	r0, r4
    d5f2:	f7ff fe2f 	bl	d254 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d5f6:	4628      	mov	r0, r5
    d5f8:	bd70      	pop	{r4, r5, r6, pc}

0000d5fa <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d5fa:	4401      	add	r1, r0
    d5fc:	1d49      	adds	r1, r1, #5
    d5fe:	4351      	muls	r1, r2
    d600:	b28a      	uxth	r2, r1
    d602:	2100      	movs	r1, #0
    d604:	2845      	cmp	r0, #69	; 0x45
    d606:	d202      	bcs.n	d60e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    d608:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    d60c:	b281      	uxth	r1, r0
    d60e:	3218      	adds	r2, #24
    d610:	1850      	adds	r0, r2, r1
    d612:	b280      	uxth	r0, r0
    d614:	4770      	bx	lr

0000d616 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d616:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d61a:	4688      	mov	r8, r1
    d61c:	88c1      	ldrh	r1, [r0, #6]
    d61e:	4604      	mov	r4, r0
    d620:	8900      	ldrh	r0, [r0, #8]
    d622:	f3c1 060e 	ubfx	r6, r1, #0, #15
    d626:	f104 0518 	add.w	r5, r4, #24
    d62a:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d62e:	eb05 0906 	add.w	r9, r5, r6
    d632:	f7ff fe30 	bl	d296 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d636:	2200      	movs	r2, #0
    d638:	b998      	cbnz	r0, d662 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d63a:	8820      	ldrh	r0, [r4, #0]
    d63c:	2845      	cmp	r0, #69	; 0x45
    d63e:	d200      	bcs.n	d642 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d640:	2045      	movs	r0, #69	; 0x45
    d642:	42b7      	cmp	r7, r6
    d644:	d906      	bls.n	d654 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d646:	7ce3      	ldrb	r3, [r4, #19]
    d648:	1bb9      	subs	r1, r7, r6
    d64a:	1ac9      	subs	r1, r1, r3
    d64c:	1f49      	subs	r1, r1, #5
    d64e:	4281      	cmp	r1, r0
    d650:	da00      	bge.n	d654 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d652:	4608      	mov	r0, r1
    d654:	89a1      	ldrh	r1, [r4, #12]
    d656:	b111      	cbz	r1, d65e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d658:	f8b9 3000 	ldrh.w	r3, [r9]
    d65c:	1ac0      	subs	r0, r0, r3
    d65e:	4540      	cmp	r0, r8
    d660:	da03      	bge.n	d66a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d662:	8222      	strh	r2, [r4, #16]
    d664:	2000      	movs	r0, #0
    d666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d66a:	7ce0      	ldrb	r0, [r4, #19]
    d66c:	4429      	add	r1, r5
    d66e:	1d40      	adds	r0, r0, #5
    d670:	4430      	add	r0, r6
    d672:	4408      	add	r0, r1
    d674:	f8a4 8010 	strh.w	r8, [r4, #16]
    d678:	1ec0      	subs	r0, r0, #3
    d67a:	e7f4      	b.n	d666 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d67c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d67c:	b570      	push	{r4, r5, r6, lr}
    d67e:	2300      	movs	r3, #0
    d680:	f1a1 0208 	sub.w	r2, r1, #8
    d684:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    d688:	42a2      	cmp	r2, r4
    d68a:	d304      	bcc.n	d696 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d68c:	f240 11cd 	movw	r1, #461	; 0x1cd
    d690:	2015      	movs	r0, #21
    d692:	f7f3 f9e7 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d696:	6802      	ldr	r2, [r0, #0]
    d698:	b90a      	cbnz	r2, d69e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    d69a:	e01e      	b.n	d6da <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d69c:	4610      	mov	r0, r2
    d69e:	6802      	ldr	r2, [r0, #0]
    d6a0:	8893      	ldrh	r3, [r2, #4]
    d6a2:	428b      	cmp	r3, r1
    d6a4:	d002      	beq.n	d6ac <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    d6a6:	6813      	ldr	r3, [r2, #0]
    d6a8:	2b00      	cmp	r3, #0
    d6aa:	d1f7      	bne.n	d69c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    d6ac:	8894      	ldrh	r4, [r2, #4]
    d6ae:	4613      	mov	r3, r2
    d6b0:	428c      	cmp	r4, r1
    d6b2:	d101      	bne.n	d6b8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    d6b4:	6811      	ldr	r1, [r2, #0]
    d6b6:	e00d      	b.n	d6d4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    d6b8:	f101 0508 	add.w	r5, r1, #8
    d6bc:	b2ae      	uxth	r6, r5
    d6be:	2500      	movs	r5, #0
    d6c0:	42b4      	cmp	r4, r6
    d6c2:	d309      	bcc.n	d6d8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    d6c4:	1a64      	subs	r4, r4, r1
    d6c6:	4411      	add	r1, r2
    d6c8:	600d      	str	r5, [r1, #0]
    d6ca:	808c      	strh	r4, [r1, #4]
    d6cc:	6802      	ldr	r2, [r0, #0]
    d6ce:	6812      	ldr	r2, [r2, #0]
    d6d0:	6002      	str	r2, [r0, #0]
    d6d2:	600a      	str	r2, [r1, #0]
    d6d4:	6001      	str	r1, [r0, #0]
    d6d6:	e000      	b.n	d6da <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d6d8:	2300      	movs	r3, #0
    d6da:	4618      	mov	r0, r3
    d6dc:	bd70      	pop	{r4, r5, r6, pc}

0000d6de <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d6de:	b510      	push	{r4, lr}
    d6e0:	000c      	movs	r4, r1
    d6e2:	d004      	beq.n	d6ee <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    d6e4:	2c08      	cmp	r4, #8
    d6e6:	d207      	bcs.n	d6f8 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d6e8:	f240 1195 	movw	r1, #405	; 0x195
    d6ec:	e00a      	b.n	d704 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    d6ee:	b108      	cbz	r0, d6f4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    d6f0:	2100      	movs	r1, #0
    d6f2:	6001      	str	r1, [r0, #0]
    d6f4:	2000      	movs	r0, #0
    d6f6:	bd10      	pop	{r4, pc}
    d6f8:	b158      	cbz	r0, d712 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    d6fa:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    d6fe:	d304      	bcc.n	d70a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    d700:	f240 11a7 	movw	r1, #423	; 0x1a7
    d704:	2015      	movs	r0, #21
    d706:	f7f3 f9ad 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d70a:	b2a1      	uxth	r1, r4
    d70c:	6800      	ldr	r0, [r0, #0]
    d70e:	f000 f814 	bl	d73a <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d712:	1d20      	adds	r0, r4, #4
    d714:	bd10      	pop	{r4, pc}

0000d716 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d716:	2100      	movs	r1, #0
    d718:	6802      	ldr	r2, [r0, #0]
    d71a:	e003      	b.n	d724 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d71c:	8893      	ldrh	r3, [r2, #4]
    d71e:	6812      	ldr	r2, [r2, #0]
    d720:	4419      	add	r1, r3
    d722:	b289      	uxth	r1, r1
    d724:	2a00      	cmp	r2, #0
    d726:	d1f9      	bne.n	d71c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d728:	f000 b807 	b.w	d73a <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d72c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d72c:	2300      	movs	r3, #0
    d72e:	600b      	str	r3, [r1, #0]
    d730:	808a      	strh	r2, [r1, #4]
    d732:	6802      	ldr	r2, [r0, #0]
    d734:	600a      	str	r2, [r1, #0]
    d736:	6001      	str	r1, [r0, #0]
    d738:	4770      	bx	lr
    d73a:	2300      	movs	r3, #0
    d73c:	6043      	str	r3, [r0, #4]
    d73e:	1d02      	adds	r2, r0, #4
    d740:	8101      	strh	r1, [r0, #8]
    d742:	6002      	str	r2, [r0, #0]
    d744:	4770      	bx	lr

0000d746 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    d746:	b51c      	push	{r2, r3, r4, lr}
    d748:	4604      	mov	r4, r0
    d74a:	2000      	movs	r0, #0
    d74c:	9001      	str	r0, [sp, #4]
    d74e:	9000      	str	r0, [sp, #0]
    d750:	f88d 4006 	strb.w	r4, [sp, #6]
    d754:	e00a      	b.n	d76c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d756:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d75a:	4621      	mov	r1, r4
    d75c:	f7f3 fbe6 	bl	f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    d760:	b120      	cbz	r0, d76c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d762:	f44f 7129 	mov.w	r1, #676	; 0x2a4
    d766:	2017      	movs	r0, #23
    d768:	f7f3 f97c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d76c:	4668      	mov	r0, sp
    d76e:	f7f3 fb97 	bl	ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    d772:	2800      	cmp	r0, #0
    d774:	d0ef      	beq.n	d756 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    d776:	bd1c      	pop	{r2, r3, r4, pc}

0000d778 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    d778:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d77c:	3aff      	subs	r2, #255	; 0xff
    d77e:	d000      	beq.n	d782 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xa>
    d780:	b109      	cbz	r1, d786 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xe>
    d782:	2000      	movs	r0, #0
    d784:	4770      	bx	lr
    d786:	f7f3 bc23 	b.w	fd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa4>
    d78a:	b510      	push	{r4, lr}
    d78c:	4604      	mov	r4, r0
    d78e:	f7f3 fc6b 	bl	1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
    d792:	42a0      	cmp	r0, r4
    d794:	d901      	bls.n	d79a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x22>
    d796:	2001      	movs	r0, #1
    d798:	bd10      	pop	{r4, pc}
    d79a:	2000      	movs	r0, #0
    d79c:	bd10      	pop	{r4, pc}

0000d79e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d79e:	b570      	push	{r4, r5, r6, lr}
    d7a0:	460e      	mov	r6, r1
    d7a2:	461d      	mov	r5, r3
    d7a4:	4611      	mov	r1, r2
    d7a6:	f000 f813 	bl	d7d0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    d7aa:	4604      	mov	r4, r0
    d7ac:	4629      	mov	r1, r5
    d7ae:	4630      	mov	r0, r6
    d7b0:	f000 f804 	bl	d7bc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    d7b4:	4420      	add	r0, r4
    d7b6:	1d00      	adds	r0, r0, #4
    d7b8:	b280      	uxth	r0, r0
    d7ba:	bd70      	pop	{r4, r5, r6, pc}
    d7bc:	b510      	push	{r4, lr}
    d7be:	460a      	mov	r2, r1
    d7c0:	2109      	movs	r1, #9
    d7c2:	f7ff ff1a 	bl	d5fa <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d7c6:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d7ca:	1cc0      	adds	r0, r0, #3
    d7cc:	4008      	ands	r0, r1
    d7ce:	bd10      	pop	{r4, pc}
    d7d0:	b510      	push	{r4, lr}
    d7d2:	460a      	mov	r2, r1
    d7d4:	210a      	movs	r1, #10
    d7d6:	f7ff ff10 	bl	d5fa <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d7da:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d7de:	1cc0      	adds	r0, r0, #3
    d7e0:	4008      	ands	r0, r1
    d7e2:	bd10      	pop	{r4, pc}
    d7e4:	2800      	cmp	r0, #0
    d7e6:	db09      	blt.n	d7fc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5e>
    d7e8:	f000 021f 	and.w	r2, r0, #31
    d7ec:	2101      	movs	r1, #1
    d7ee:	4091      	lsls	r1, r2
    d7f0:	0940      	lsrs	r0, r0, #5
    d7f2:	0080      	lsls	r0, r0, #2
    d7f4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d7f8:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d7fc:	4770      	bx	lr
    d7fe:	2800      	cmp	r0, #0
    d800:	db0d      	blt.n	d81e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    d802:	f000 021f 	and.w	r2, r0, #31
    d806:	2101      	movs	r1, #1
    d808:	4091      	lsls	r1, r2
    d80a:	0940      	lsrs	r0, r0, #5
    d80c:	0080      	lsls	r0, r0, #2
    d80e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d812:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d816:	f3bf 8f4f 	dsb	sy
    d81a:	f3bf 8f6f 	isb	sy
    d81e:	4770      	bx	lr
    d820:	b510      	push	{r4, lr}
    d822:	200e      	movs	r0, #14
    d824:	f7ff ffeb 	bl	d7fe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x60>
    d828:	200e      	movs	r0, #14
    d82a:	f7ff ffdb 	bl	d7e4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    d82e:	200f      	movs	r0, #15
    d830:	f7ff ffe5 	bl	d7fe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x60>
    d834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d838:	200f      	movs	r0, #15
    d83a:	f7ff bfd3 	b.w	d7e4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    d83e:	2800      	cmp	r0, #0
    d840:	db09      	blt.n	d856 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb8>
    d842:	f000 021f 	and.w	r2, r0, #31
    d846:	2101      	movs	r1, #1
    d848:	4091      	lsls	r1, r2
    d84a:	0940      	lsrs	r0, r0, #5
    d84c:	0080      	lsls	r0, r0, #2
    d84e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d852:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d856:	4770      	bx	lr
    d858:	5840      	ldr	r0, [r0, r1]
    d85a:	2800      	cmp	r0, #0
    d85c:	d000      	beq.n	d860 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc2>
    d85e:	2001      	movs	r0, #1
    d860:	4770      	bx	lr

0000d862 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    d862:	b510      	push	{r4, lr}
    d864:	4604      	mov	r4, r0
    d866:	4620      	mov	r0, r4
    d868:	f7f3 fd70 	bl	134c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>
    d86c:	2811      	cmp	r0, #17
    d86e:	d0fa      	beq.n	d866 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    d870:	bd10      	pop	{r4, pc}

0000d872 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    d872:	b510      	push	{r4, lr}
    d874:	f7ff fff5 	bl	d862 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    d878:	2800      	cmp	r0, #0
    d87a:	d003      	beq.n	d884 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    d87c:	21a0      	movs	r1, #160	; 0xa0
    d87e:	201d      	movs	r0, #29
    d880:	f7f3 f8f0 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d884:	bd10      	pop	{r4, pc}

0000d886 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    d886:	f7f3 bebf 	b.w	1608 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000d88a <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    d88a:	f7f3 bead 	b.w	15e8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000d88e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    d88e:	b510      	push	{r4, lr}
    d890:	4050      	eors	r0, r2
    d892:	780a      	ldrb	r2, [r1, #0]
    d894:	781c      	ldrb	r4, [r3, #0]
    d896:	4062      	eors	r2, r4
    d898:	4410      	add	r0, r2
    d89a:	784a      	ldrb	r2, [r1, #1]
    d89c:	785c      	ldrb	r4, [r3, #1]
    d89e:	4062      	eors	r2, r4
    d8a0:	4410      	add	r0, r2
    d8a2:	788a      	ldrb	r2, [r1, #2]
    d8a4:	789c      	ldrb	r4, [r3, #2]
    d8a6:	4062      	eors	r2, r4
    d8a8:	4410      	add	r0, r2
    d8aa:	78ca      	ldrb	r2, [r1, #3]
    d8ac:	78dc      	ldrb	r4, [r3, #3]
    d8ae:	4062      	eors	r2, r4
    d8b0:	4410      	add	r0, r2
    d8b2:	790a      	ldrb	r2, [r1, #4]
    d8b4:	791c      	ldrb	r4, [r3, #4]
    d8b6:	7949      	ldrb	r1, [r1, #5]
    d8b8:	4062      	eors	r2, r4
    d8ba:	4410      	add	r0, r2
    d8bc:	795a      	ldrb	r2, [r3, #5]
    d8be:	4051      	eors	r1, r2
    d8c0:	42c1      	cmn	r1, r0
    d8c2:	d101      	bne.n	d8c8 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    d8c4:	2001      	movs	r0, #1
    d8c6:	bd10      	pop	{r4, pc}
    d8c8:	2000      	movs	r0, #0
    d8ca:	bd10      	pop	{r4, pc}

0000d8cc <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    d8cc:	b510      	push	{r4, lr}
    d8ce:	2900      	cmp	r1, #0
    d8d0:	4604      	mov	r4, r0
    d8d2:	f04f 0106 	mov.w	r1, #6
    d8d6:	d002      	beq.n	d8de <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    d8d8:	f7f3 f956 	bl	b88 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d8dc:	e001      	b.n	d8e2 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    d8de:	f7f3 f961 	bl	ba4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d8e2:	7960      	ldrb	r0, [r4, #5]
    d8e4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d8e8:	7160      	strb	r0, [r4, #5]
    d8ea:	bd10      	pop	{r4, pc}

0000d8ec <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    d8ec:	4770      	bx	lr

0000d8ee <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    d8ee:	b530      	push	{r4, r5, lr}
    d8f0:	460c      	mov	r4, r1
    d8f2:	4605      	mov	r5, r0
    d8f4:	b08d      	sub	sp, #52	; 0x34
    d8f6:	f04f 0103 	mov.w	r1, #3
    d8fa:	f104 0003 	add.w	r0, r4, #3
    d8fe:	b112      	cbz	r2, d906 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    d900:	f7f3 f942 	bl	b88 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d904:	e001      	b.n	d90a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    d906:	f7f3 f94d 	bl	ba4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d90a:	7960      	ldrb	r0, [r4, #5]
    d90c:	220d      	movs	r2, #13
    d90e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d912:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    d916:	7160      	strb	r0, [r4, #5]
    d918:	2100      	movs	r1, #0
    d91a:	a804      	add	r0, sp, #16
    d91c:	f002 ff21 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d920:	78e0      	ldrb	r0, [r4, #3]
    d922:	f88d 001f 	strb.w	r0, [sp, #31]
    d926:	7920      	ldrb	r0, [r4, #4]
    d928:	f88d 001e 	strb.w	r0, [sp, #30]
    d92c:	7960      	ldrb	r0, [r4, #5]
    d92e:	f88d 001d 	strb.w	r0, [sp, #29]
    d932:	2210      	movs	r2, #16
    d934:	4629      	mov	r1, r5
    d936:	4668      	mov	r0, sp
    d938:	f002 fe99 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d93c:	4668      	mov	r0, sp
    d93e:	f7ff ff98 	bl	d872 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d942:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    d946:	7020      	strb	r0, [r4, #0]
    d948:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    d94c:	7060      	strb	r0, [r4, #1]
    d94e:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    d952:	70a0      	strb	r0, [r4, #2]
    d954:	b00d      	add	sp, #52	; 0x34
    d956:	bd30      	pop	{r4, r5, pc}

0000d958 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>:
    d958:	b530      	push	{r4, r5, lr}
    d95a:	b08d      	sub	sp, #52	; 0x34
    d95c:	460c      	mov	r4, r1
    d95e:	4605      	mov	r5, r0
    d960:	220d      	movs	r2, #13
    d962:	2100      	movs	r1, #0
    d964:	a804      	add	r0, sp, #16
    d966:	f002 fefc 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d96a:	78e0      	ldrb	r0, [r4, #3]
    d96c:	f88d 001f 	strb.w	r0, [sp, #31]
    d970:	7920      	ldrb	r0, [r4, #4]
    d972:	f88d 001e 	strb.w	r0, [sp, #30]
    d976:	7960      	ldrb	r0, [r4, #5]
    d978:	f88d 001d 	strb.w	r0, [sp, #29]
    d97c:	2210      	movs	r2, #16
    d97e:	4629      	mov	r1, r5
    d980:	4668      	mov	r0, sp
    d982:	f002 fe74 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d986:	4668      	mov	r0, sp
    d988:	f7ff ff73 	bl	d872 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d98c:	7820      	ldrb	r0, [r4, #0]
    d98e:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    d992:	4288      	cmp	r0, r1
    d994:	d10c      	bne.n	d9b0 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    d996:	7860      	ldrb	r0, [r4, #1]
    d998:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
    d99c:	4288      	cmp	r0, r1
    d99e:	d107      	bne.n	d9b0 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    d9a0:	78a0      	ldrb	r0, [r4, #2]
    d9a2:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
    d9a6:	4288      	cmp	r0, r1
    d9a8:	d102      	bne.n	d9b0 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    d9aa:	2001      	movs	r0, #1
    d9ac:	b00d      	add	sp, #52	; 0x34
    d9ae:	bd30      	pop	{r4, r5, pc}
    d9b0:	2000      	movs	r0, #0
    d9b2:	e7fb      	b.n	d9ac <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x54>

0000d9b4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    d9b4:	f7f4 b98e 	b.w	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    d9b8:	b510      	push	{r4, lr}
    d9ba:	2801      	cmp	r0, #1
    d9bc:	d008      	beq.n	d9d0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x1c>
    d9be:	2802      	cmp	r0, #2
    d9c0:	d004      	beq.n	d9cc <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    d9c2:	f240 4122 	movw	r1, #1058	; 0x422
    d9c6:	2006      	movs	r0, #6
    d9c8:	f7f3 f84c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d9cc:	2001      	movs	r0, #1
    d9ce:	bd10      	pop	{r4, pc}
    d9d0:	2000      	movs	r0, #0
    d9d2:	bd10      	pop	{r4, pc}
    d9d4:	2900      	cmp	r1, #0
    d9d6:	d004      	beq.n	d9e2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2e>
    d9d8:	2801      	cmp	r0, #1
    d9da:	d003      	beq.n	d9e4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    d9dc:	2901      	cmp	r1, #1
    d9de:	d001      	beq.n	d9e4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    d9e0:	2002      	movs	r0, #2
    d9e2:	4770      	bx	lr
    d9e4:	2001      	movs	r0, #1
    d9e6:	4770      	bx	lr
    d9e8:	f7ff bd9f 	b.w	d52a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000d9ec <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    d9ec:	2101      	movs	r1, #1
    d9ee:	f7f4 bcff 	b.w	23f0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000d9f2 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    d9f2:	b510      	push	{r4, lr}
    d9f4:	f002 fc16 	bl	10224 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    d9f8:	b118      	cbz	r0, da02 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    d9fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d9fe:	f7f9 bf97 	b.w	7930 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    da02:	20ff      	movs	r0, #255	; 0xff
    da04:	bd10      	pop	{r4, pc}

0000da06 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    da06:	b510      	push	{r4, lr}
    da08:	f7f4 fd3a 	bl	2480 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    da0c:	2810      	cmp	r0, #16
    da0e:	d003      	beq.n	da18 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    da10:	f7f4 fd06 	bl	2420 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    da14:	2810      	cmp	r0, #16
    da16:	d100      	bne.n	da1a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    da18:	2008      	movs	r0, #8
    da1a:	bd10      	pop	{r4, pc}

0000da1c <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    da1c:	b510      	push	{r4, lr}
    da1e:	f7f4 fd2f 	bl	2480 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    da22:	2810      	cmp	r0, #16
    da24:	d003      	beq.n	da2e <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    da26:	f7f4 fd89 	bl	253c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    da2a:	2001      	movs	r0, #1
    da2c:	bd10      	pop	{r4, pc}
    da2e:	2000      	movs	r0, #0
    da30:	bd10      	pop	{r4, pc}

0000da32 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    da32:	b570      	push	{r4, r5, r6, lr}
    da34:	460e      	mov	r6, r1
    da36:	b08c      	sub	sp, #48	; 0x30
    da38:	4614      	mov	r4, r2
    da3a:	4601      	mov	r1, r0
    da3c:	461d      	mov	r5, r3
    da3e:	2210      	movs	r2, #16
    da40:	4668      	mov	r0, sp
    da42:	f000 f997 	bl	dd74 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    da46:	2210      	movs	r2, #16
    da48:	4631      	mov	r1, r6
    da4a:	a804      	add	r0, sp, #16
    da4c:	f000 f992 	bl	dd74 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    da50:	4668      	mov	r0, sp
    da52:	f7ff ff0e 	bl	d872 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    da56:	a908      	add	r1, sp, #32
    da58:	f04f 0210 	mov.w	r2, #16
    da5c:	4628      	mov	r0, r5
    da5e:	b11c      	cbz	r4, da68 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    da60:	f000 f988 	bl	dd74 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    da64:	b00c      	add	sp, #48	; 0x30
    da66:	bd70      	pop	{r4, r5, r6, pc}
    da68:	f002 fe01 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    da6c:	e7fa      	b.n	da64 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>
    da6e:	0781      	lsls	r1, r0, #30
    da70:	d501      	bpl.n	da76 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x44>
    da72:	2002      	movs	r0, #2
    da74:	4770      	bx	lr
    da76:	07c0      	lsls	r0, r0, #31
    da78:	d0fc      	beq.n	da74 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x42>
    da7a:	2001      	movs	r0, #1
    da7c:	4770      	bx	lr

0000da7e <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>:
    da7e:	b570      	push	{r4, r5, r6, lr}
    da80:	4606      	mov	r6, r0
    da82:	7900      	ldrb	r0, [r0, #4]
    da84:	0940      	lsrs	r0, r0, #5
    da86:	d10e      	bne.n	daa6 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x28>
    da88:	2500      	movs	r5, #0
    da8a:	462c      	mov	r4, r5
    da8c:	5d30      	ldrb	r0, [r6, r4]
    da8e:	f000 fd31 	bl	e4f4 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    da92:	1c64      	adds	r4, r4, #1
    da94:	4428      	add	r0, r5
    da96:	b2e4      	uxtb	r4, r4
    da98:	b2c5      	uxtb	r5, r0
    da9a:	2c05      	cmp	r4, #5
    da9c:	d3f6      	bcc.n	da8c <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0xe>
    da9e:	2d01      	cmp	r5, #1
    daa0:	d901      	bls.n	daa6 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x28>
    daa2:	2001      	movs	r0, #1
    daa4:	bd70      	pop	{r4, r5, r6, pc}
    daa6:	2000      	movs	r0, #0
    daa8:	bd70      	pop	{r4, r5, r6, pc}

0000daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    daaa:	b510      	push	{r4, lr}
    daac:	460c      	mov	r4, r1
    daae:	2100      	movs	r1, #0
    dab0:	f7ff fe62 	bl	d778 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    dab4:	6060      	str	r0, [r4, #4]
    dab6:	b110      	cbz	r0, dabe <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x14>
    dab8:	2000      	movs	r0, #0
    daba:	7020      	strb	r0, [r4, #0]
    dabc:	bd10      	pop	{r4, pc}
    dabe:	2002      	movs	r0, #2
    dac0:	bd10      	pop	{r4, pc}

0000dac2 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    dac2:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dac6:	4348      	muls	r0, r1
    dac8:	4770      	bx	lr

0000daca <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    daca:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dace:	fbb0 f0f1 	udiv	r0, r0, r1
    dad2:	b280      	uxth	r0, r0
    dad4:	4770      	bx	lr

0000dad6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    dad6:	b570      	push	{r4, r5, r6, lr}
    dad8:	4604      	mov	r4, r0
    dada:	4290      	cmp	r0, r2
    dadc:	d20b      	bcs.n	daf6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    dade:	1b10      	subs	r0, r2, r4
    dae0:	2865      	cmp	r0, #101	; 0x65
    dae2:	d200      	bcs.n	dae6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    dae4:	2065      	movs	r0, #101	; 0x65
    dae6:	1825      	adds	r5, r4, r0
    dae8:	428d      	cmp	r5, r1
    daea:	d803      	bhi.n	daf4 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    daec:	2103      	movs	r1, #3
    daee:	f7fc f959 	bl	9da4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    daf2:	b108      	cbz	r0, daf8 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    daf4:	4620      	mov	r0, r4
    daf6:	bd70      	pop	{r4, r5, r6, pc}
    daf8:	4628      	mov	r0, r5
    dafa:	bd70      	pop	{r4, r5, r6, pc}

0000dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    dafc:	b510      	push	{r4, lr}
    dafe:	f1a2 0310 	sub.w	r3, r2, #16
    db02:	290d      	cmp	r1, #13
    db04:	d258      	bcs.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db06:	e8df f001 	tbb	[pc, r1]
    db0a:	0907      	.short	0x0907
    db0c:	1d1a150e 	.word	0x1d1a150e
    db10:	5937342c 	.word	0x5937342c
    db14:	0053423b 	.word	0x0053423b
    db18:	b38a      	cbz	r2, db7e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x82>
    db1a:	e04d      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db1c:	2a06      	cmp	r2, #6
    db1e:	d049      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db20:	2a07      	cmp	r2, #7
    db22:	d047      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db24:	e048      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db26:	2a0b      	cmp	r2, #11
    db28:	d044      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db2a:	2a0c      	cmp	r2, #12
    db2c:	d042      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db2e:	2a0a      	cmp	r2, #10
    db30:	d040      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db32:	e041      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db34:	2a0d      	cmp	r2, #13
    db36:	d03d      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db38:	2a0e      	cmp	r2, #14
    db3a:	d03b      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db3c:	e03c      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db3e:	2b0c      	cmp	r3, #12
    db40:	d938      	bls.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db42:	e039      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db44:	2a13      	cmp	r2, #19
    db46:	d035      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db48:	2a12      	cmp	r2, #18
    db4a:	d033      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db4c:	f890 005e 	ldrb.w	r0, [r0, #94]	; 0x5e
    db50:	b120      	cbz	r0, db5c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x60>
    db52:	2a13      	cmp	r2, #19
    db54:	d330      	bcc.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db56:	2a1b      	cmp	r2, #27
    db58:	d92c      	bls.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db5a:	e02d      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db5c:	2a17      	cmp	r2, #23
    db5e:	d2fa      	bcs.n	db56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x5a>
    db60:	e02a      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db62:	2b03      	cmp	r3, #3
    db64:	d926      	bls.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db66:	f890 005e 	ldrb.w	r0, [r0, #94]	; 0x5e
    db6a:	b300      	cbz	r0, dbae <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb2>
    db6c:	2a1c      	cmp	r2, #28
    db6e:	d921      	bls.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db70:	e022      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db72:	2a04      	cmp	r2, #4
    db74:	d01e      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db76:	e01f      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db78:	2a01      	cmp	r2, #1
    db7a:	d01b      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db7c:	e01c      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db7e:	e019      	b.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db80:	2a1d      	cmp	r2, #29
    db82:	d017      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db84:	2a1e      	cmp	r2, #30
    db86:	d015      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db88:	2a1f      	cmp	r2, #31
    db8a:	d013      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db8c:	e014      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db8e:	2a20      	cmp	r2, #32
    db90:	d010      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db92:	2a21      	cmp	r2, #33	; 0x21
    db94:	d00e      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db96:	2a22      	cmp	r2, #34	; 0x22
    db98:	d00c      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db9a:	2a23      	cmp	r2, #35	; 0x23
    db9c:	d00a      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db9e:	2a24      	cmp	r2, #36	; 0x24
    dba0:	d008      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dba2:	2a25      	cmp	r2, #37	; 0x25
    dba4:	d006      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dba6:	2a26      	cmp	r2, #38	; 0x26
    dba8:	d004      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dbaa:	2a2e      	cmp	r2, #46	; 0x2e
    dbac:	d002      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dbae:	e003      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dbb0:	2a28      	cmp	r2, #40	; 0x28
    dbb2:	d101      	bne.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dbb4:	2001      	movs	r0, #1
    dbb6:	bd10      	pop	{r4, pc}
    dbb8:	2000      	movs	r0, #0
    dbba:	bd10      	pop	{r4, pc}
    dbbc:	2a05      	cmp	r2, #5
    dbbe:	d1fb      	bne.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dbc0:	e7f8      	b.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>

0000dbc2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    dbc2:	280b      	cmp	r0, #11
    dbc4:	d019      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbc6:	280c      	cmp	r0, #12
    dbc8:	d017      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbca:	280a      	cmp	r0, #10
    dbcc:	d015      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbce:	280d      	cmp	r0, #13
    dbd0:	d013      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbd2:	280e      	cmp	r0, #14
    dbd4:	d011      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbd6:	2820      	cmp	r0, #32
    dbd8:	d00f      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbda:	2821      	cmp	r0, #33	; 0x21
    dbdc:	d00d      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbde:	2822      	cmp	r0, #34	; 0x22
    dbe0:	d00b      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbe2:	2823      	cmp	r0, #35	; 0x23
    dbe4:	d009      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbe6:	2824      	cmp	r0, #36	; 0x24
    dbe8:	d007      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbea:	2825      	cmp	r0, #37	; 0x25
    dbec:	d005      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbee:	2826      	cmp	r0, #38	; 0x26
    dbf0:	d003      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbf2:	282e      	cmp	r0, #46	; 0x2e
    dbf4:	d001      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbf6:	2000      	movs	r0, #0
    dbf8:	4770      	bx	lr
    dbfa:	2001      	movs	r0, #1
    dbfc:	4770      	bx	lr

0000dbfe <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    dbfe:	f011 0f0c 	tst.w	r1, #12
    dc02:	d018      	beq.n	dc36 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    dc04:	074a      	lsls	r2, r1, #29
    dc06:	f44f 7116 	mov.w	r1, #600	; 0x258
    dc0a:	2a00      	cmp	r2, #0
    dc0c:	da02      	bge.n	dc14 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    dc0e:	f04f 0210 	mov.w	r2, #16
    dc12:	e001      	b.n	dc18 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    dc14:	f04f 0240 	mov.w	r2, #64	; 0x40
    dc18:	da01      	bge.n	dc1e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    dc1a:	f04f 0196 	mov.w	r1, #150	; 0x96
    dc1e:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    dc22:	eba0 0301 	sub.w	r3, r0, r1
    dc26:	4288      	cmp	r0, r1
    dc28:	d903      	bls.n	dc32 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    dc2a:	fb93 f0f2 	sdiv	r0, r3, r2
    dc2e:	b280      	uxth	r0, r0
    dc30:	4770      	bx	lr
    dc32:	2000      	movs	r0, #0
    dc34:	4770      	bx	lr
    dc36:	2902      	cmp	r1, #2
    dc38:	d008      	beq.n	dc4c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    dc3a:	2870      	cmp	r0, #112	; 0x70
    dc3c:	d9f9      	bls.n	dc32 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    dc3e:	3870      	subs	r0, #112	; 0x70
    dc40:	17c1      	asrs	r1, r0, #31
    dc42:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    dc46:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    dc4a:	4770      	bx	lr
    dc4c:	283c      	cmp	r0, #60	; 0x3c
    dc4e:	d9f0      	bls.n	dc32 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    dc50:	383c      	subs	r0, #60	; 0x3c
    dc52:	17c1      	asrs	r1, r0, #31
    dc54:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    dc58:	f3c0 008f 	ubfx	r0, r0, #2, #16
    dc5c:	4770      	bx	lr

0000dc5e <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    dc5e:	6809      	ldr	r1, [r1, #0]
    dc60:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    dc64:	4770      	bx	lr

0000dc66 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>:
    dc66:	2801      	cmp	r0, #1
    dc68:	d002      	beq.n	dc70 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    dc6a:	2802      	cmp	r0, #2
    dc6c:	d000      	beq.n	dc70 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    dc6e:	2000      	movs	r0, #0
    dc70:	4770      	bx	lr

0000dc72 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>:
    dc72:	b530      	push	{r4, r5, lr}
    dc74:	242a      	movs	r4, #42	; 0x2a
    dc76:	2523      	movs	r5, #35	; 0x23
    dc78:	2a16      	cmp	r2, #22
    dc7a:	d109      	bne.n	dc90 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    dc7c:	280b      	cmp	r0, #11
    dc7e:	d00b      	beq.n	dc98 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    dc80:	280c      	cmp	r0, #12
    dc82:	d009      	beq.n	dc98 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    dc84:	280d      	cmp	r0, #13
    dc86:	d007      	beq.n	dc98 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    dc88:	280e      	cmp	r0, #14
    dc8a:	d005      	beq.n	dc98 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    dc8c:	2820      	cmp	r0, #32
    dc8e:	d005      	beq.n	dc9c <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2a>
    dc90:	b171      	cbz	r1, dcb0 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x3e>
    dc92:	2a16      	cmp	r2, #22
    dc94:	d10c      	bne.n	dcb0 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x3e>
    dc96:	e004      	b.n	dca2 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x30>
    dc98:	701c      	strb	r4, [r3, #0]
    dc9a:	e000      	b.n	dc9e <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2c>
    dc9c:	701d      	strb	r5, [r3, #0]
    dc9e:	2001      	movs	r0, #1
    dca0:	bd30      	pop	{r4, r5, pc}
    dca2:	7808      	ldrb	r0, [r1, #0]
    dca4:	2801      	cmp	r0, #1
    dca6:	d0f7      	beq.n	dc98 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    dca8:	2800      	cmp	r0, #0
    dcaa:	d0f5      	beq.n	dc98 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    dcac:	2816      	cmp	r0, #22
    dcae:	d0f5      	beq.n	dc9c <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2a>
    dcb0:	2000      	movs	r0, #0
    dcb2:	bd30      	pop	{r4, r5, pc}

0000dcb4 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>:
    dcb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dcb6:	b2cf      	uxtb	r7, r1
    dcb8:	4606      	mov	r6, r0
    dcba:	f3c1 2407 	ubfx	r4, r1, #8, #8
    dcbe:	4621      	mov	r1, r4
    dcc0:	4638      	mov	r0, r7
    dcc2:	f000 f88f 	bl	dde4 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0xc>
    dcc6:	b2f5      	uxtb	r5, r6
    dcc8:	f3c6 2607 	ubfx	r6, r6, #8, #8
    dccc:	b920      	cbnz	r0, dcd8 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x24>
    dcce:	4631      	mov	r1, r6
    dcd0:	4628      	mov	r0, r5
    dcd2:	f000 f887 	bl	dde4 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0xc>
    dcd6:	b140      	cbz	r0, dcea <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x36>
    dcd8:	4027      	ands	r7, r4
    dcda:	4035      	ands	r5, r6
    dcdc:	403d      	ands	r5, r7
    dcde:	4644      	mov	r4, r8
    dce0:	f365 0407 	bfi	r4, r5, #0, #8
    dce4:	f365 240f 	bfi	r4, r5, #8, #8
    dce8:	e006      	b.n	dcf8 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x44>
    dcea:	4025      	ands	r5, r4
    dcec:	4644      	mov	r4, r8
    dcee:	f365 0407 	bfi	r4, r5, #0, #8
    dcf2:	403e      	ands	r6, r7
    dcf4:	f366 240f 	bfi	r4, r6, #8, #8
    dcf8:	b2e0      	uxtb	r0, r4
    dcfa:	f7ff feb8 	bl	da6e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    dcfe:	f88d 0000 	strb.w	r0, [sp]
    dd02:	f3c4 2007 	ubfx	r0, r4, #8, #8
    dd06:	f7ff feb2 	bl	da6e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    dd0a:	f88d 0001 	strb.w	r0, [sp, #1]
    dd0e:	f8bd 0000 	ldrh.w	r0, [sp]
    dd12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000dd14 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    dd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd18:	4607      	mov	r7, r0
    dd1a:	460e      	mov	r6, r1
    dd1c:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    dd20:	f7fc fc6c 	bl	a5fc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    dd24:	b198      	cbz	r0, dd4e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    dd26:	b31e      	cbz	r6, dd70 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    dd28:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    dd2c:	1b40      	subs	r0, r0, r5
    dd2e:	2300      	movs	r3, #0
    dd30:	eb61 0104 	sbc.w	r1, r1, r4
    dd34:	461a      	mov	r2, r3
    dd36:	1a1b      	subs	r3, r3, r0
    dd38:	418a      	sbcs	r2, r1
    dd3a:	da19      	bge.n	dd70 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    dd3c:	1c42      	adds	r2, r0, #1
    dd3e:	f171 0100 	sbcs.w	r1, r1, #0
    dd42:	db07      	blt.n	dd54 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    dd44:	f240 211b 	movw	r1, #539	; 0x21b
    dd48:	2029      	movs	r0, #41	; 0x29
    dd4a:	f7f2 fe8b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd4e:	f240 2111 	movw	r1, #529	; 0x211
    dd52:	e7f9      	b.n	dd48 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    dd54:	4430      	add	r0, r6
    dd56:	1e40      	subs	r0, r0, #1
    dd58:	fbb0 f1f6 	udiv	r1, r0, r6
    dd5c:	fb01 f006 	mul.w	r0, r1, r6
    dd60:	1828      	adds	r0, r5, r0
    dd62:	f144 0400 	adc.w	r4, r4, #0
    dd66:	e9c7 0404 	strd	r0, r4, [r7, #16]
    dd6a:	4608      	mov	r0, r1
    dd6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dd70:	2000      	movs	r0, #0
    dd72:	e7fb      	b.n	dd6c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000dd74 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    dd74:	b530      	push	{r4, r5, lr}
    dd76:	4613      	mov	r3, r2
    dd78:	e006      	b.n	dd88 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    dd7a:	18cc      	adds	r4, r1, r3
    dd7c:	1ad5      	subs	r5, r2, r3
    dd7e:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    dd82:	1e5b      	subs	r3, r3, #1
    dd84:	5544      	strb	r4, [r0, r5]
    dd86:	b2db      	uxtb	r3, r3
    dd88:	2b00      	cmp	r3, #0
    dd8a:	d1f6      	bne.n	dd7a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    dd8c:	bd30      	pop	{r4, r5, pc}

0000dd8e <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    dd8e:	2300      	movs	r3, #0
    dd90:	6403      	str	r3, [r0, #64]	; 0x40
    dd92:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    dd96:	f240 2371 	movw	r3, #625	; 0x271
    dd9a:	435a      	muls	r2, r3
    dd9c:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    dda0:	1e52      	subs	r2, r2, #1
    dda2:	fbb2 f1f1 	udiv	r1, r2, r1
    dda6:	6441      	str	r1, [r0, #68]	; 0x44
    dda8:	4770      	bx	lr

0000ddaa <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>:
    ddaa:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ddae:	fbb0 f0f1 	udiv	r0, r0, r1
    ddb2:	b280      	uxth	r0, r0
    ddb4:	4770      	bx	lr

0000ddb6 <sym_MCZ5ZKWAPWEBLVDHDY2XS3XBNNW7L43ADSWQSTI>:
    ddb6:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ddba:	fbb0 f2f1 	udiv	r2, r0, r1
    ddbe:	fb01 0112 	mls	r1, r1, r2, r0
    ddc2:	1a40      	subs	r0, r0, r1
    ddc4:	4770      	bx	lr

0000ddc6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    ddc6:	f240 2171 	movw	r1, #625	; 0x271
    ddca:	fb10 f001 	smulbb	r0, r0, r1
    ddce:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ddd2:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    ddd6:	4770      	bx	lr

0000ddd8 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>:
    ddd8:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dddc:	fbb0 f0f1 	udiv	r0, r0, r1
    dde0:	b2c0      	uxtb	r0, r0
    dde2:	4770      	bx	lr
    dde4:	2801      	cmp	r0, #1
    dde6:	d002      	beq.n	ddee <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x16>
    dde8:	2802      	cmp	r0, #2
    ddea:	d003      	beq.n	ddf4 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x1c>
    ddec:	e004      	b.n	ddf8 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x20>
    ddee:	2901      	cmp	r1, #1
    ddf0:	d004      	beq.n	ddfc <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x24>
    ddf2:	e001      	b.n	ddf8 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x20>
    ddf4:	2902      	cmp	r1, #2
    ddf6:	d001      	beq.n	ddfc <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x24>
    ddf8:	2000      	movs	r0, #0
    ddfa:	4770      	bx	lr
    ddfc:	2001      	movs	r0, #1
    ddfe:	4770      	bx	lr
    de00:	4401      	add	r1, r0
    de02:	2914      	cmp	r1, #20
    de04:	dd01      	ble.n	de0a <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x32>
    de06:	2014      	movs	r0, #20
    de08:	4770      	bx	lr
    de0a:	f06f 007e 	mvn.w	r0, #126	; 0x7e
    de0e:	4281      	cmp	r1, r0
    de10:	dbfa      	blt.n	de08 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x30>
    de12:	b248      	sxtb	r0, r1
    de14:	4770      	bx	lr

0000de16 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    de16:	b570      	push	{r4, r5, r6, lr}
    de18:	4605      	mov	r5, r0
    de1a:	ea81 4011 	eor.w	r0, r1, r1, lsr #16
    de1e:	b286      	uxth	r6, r0
    de20:	4610      	mov	r0, r2
    de22:	7aec      	ldrb	r4, [r5, #11]
    de24:	4631      	mov	r1, r6
    de26:	f000 f863 	bl	def0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x52>
    de2a:	4070      	eors	r0, r6
    de2c:	2125      	movs	r1, #37	; 0x25
    de2e:	fbb0 f2f1 	udiv	r2, r0, r1
    de32:	fb01 0112 	mls	r1, r1, r2, r0
    de36:	eb05 02d1 	add.w	r2, r5, r1, lsr #3
    de3a:	f001 0307 	and.w	r3, r1, #7
    de3e:	7852      	ldrb	r2, [r2, #1]
    de40:	2601      	movs	r6, #1
    de42:	409e      	lsls	r6, r3
    de44:	4232      	tst	r2, r6
    de46:	d001      	beq.n	de4c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x36>
    de48:	4608      	mov	r0, r1
    de4a:	bd70      	pop	{r4, r5, r6, pc}
    de4c:	4344      	muls	r4, r0
    de4e:	0c21      	lsrs	r1, r4, #16
    de50:	4628      	mov	r0, r5
    de52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    de56:	f7f4 bc91 	b.w	277c <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xac>

0000de5a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    de5a:	b510      	push	{r4, lr}
    de5c:	4604      	mov	r4, r0
    de5e:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    de62:	b108      	cbz	r0, de68 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    de64:	2825      	cmp	r0, #37	; 0x25
    de66:	d901      	bls.n	de6c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    de68:	2012      	movs	r0, #18
    de6a:	bd10      	pop	{r4, pc}
    de6c:	b132      	cbz	r2, de7c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>
    de6e:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
    de72:	b128      	cbz	r0, de80 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x26>
    de74:	2801      	cmp	r0, #1
    de76:	d009      	beq.n	de8c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x32>
    de78:	201f      	movs	r0, #31
    de7a:	bd10      	pop	{r4, pc}
    de7c:	2000      	movs	r0, #0
    de7e:	bd10      	pop	{r4, pc}
    de80:	4620      	mov	r0, r4
    de82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    de86:	4611      	mov	r1, r2
    de88:	f7f4 bc30 	b.w	26ec <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x1c>
    de8c:	8aa2      	ldrh	r2, [r4, #20]
    de8e:	6949      	ldr	r1, [r1, #20]
    de90:	f104 0025 	add.w	r0, r4, #37	; 0x25
    de94:	f7ff ffbf 	bl	de16 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    de98:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    de9c:	e7ee      	b.n	de7c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>

0000de9e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    de9e:	b570      	push	{r4, r5, r6, lr}
    dea0:	4604      	mov	r4, r0
    dea2:	1c40      	adds	r0, r0, #1
    dea4:	4288      	cmp	r0, r1
    dea6:	d004      	beq.n	deb2 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    dea8:	6808      	ldr	r0, [r1, #0]
    deaa:	f8c4 0001 	str.w	r0, [r4, #1]
    deae:	7908      	ldrb	r0, [r1, #4]
    deb0:	7160      	strb	r0, [r4, #5]
    deb2:	7960      	ldrb	r0, [r4, #5]
    deb4:	f000 001f 	and.w	r0, r0, #31
    deb8:	7160      	strb	r0, [r4, #5]
    deba:	2000      	movs	r0, #0
    debc:	72e0      	strb	r0, [r4, #11]
    debe:	4605      	mov	r5, r0
    dec0:	1966      	adds	r6, r4, r5
    dec2:	7870      	ldrb	r0, [r6, #1]
    dec4:	f000 fb16 	bl	e4f4 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    dec8:	71b0      	strb	r0, [r6, #6]
    deca:	7ae1      	ldrb	r1, [r4, #11]
    decc:	1c6d      	adds	r5, r5, #1
    dece:	4408      	add	r0, r1
    ded0:	b2ed      	uxtb	r5, r5
    ded2:	72e0      	strb	r0, [r4, #11]
    ded4:	2d05      	cmp	r5, #5
    ded6:	d3f3      	bcc.n	dec0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    ded8:	bd70      	pop	{r4, r5, r6, pc}
    deda:	b2c1      	uxtb	r1, r0
    dedc:	fa91 f1a1 	rbit	r1, r1
    dee0:	0a00      	lsrs	r0, r0, #8
    dee2:	0e09      	lsrs	r1, r1, #24
    dee4:	fa90 f0a0 	rbit	r0, r0
    dee8:	0e00      	lsrs	r0, r0, #24
    deea:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    deee:	4770      	bx	lr
    def0:	b570      	push	{r4, r5, r6, lr}
    def2:	460d      	mov	r5, r1
    def4:	4048      	eors	r0, r1
    def6:	2400      	movs	r4, #0
    def8:	f7ff ffef 	bl	deda <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x3c>
    defc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    df00:	1c64      	adds	r4, r4, #1
    df02:	4428      	add	r0, r5
    df04:	b2e4      	uxtb	r4, r4
    df06:	b280      	uxth	r0, r0
    df08:	2c03      	cmp	r4, #3
    df0a:	d3f5      	bcc.n	def8 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x5a>
    df0c:	bd70      	pop	{r4, r5, r6, pc}

0000df0e <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ>:
    df0e:	7841      	ldrb	r1, [r0, #1]
    df10:	7800      	ldrb	r0, [r0, #0]
    df12:	f010 000f 	ands.w	r0, r0, #15
    df16:	d005      	beq.n	df24 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x16>
    df18:	2801      	cmp	r0, #1
    df1a:	d007      	beq.n	df2c <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x1e>
    df1c:	2802      	cmp	r0, #2
    df1e:	d001      	beq.n	df24 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x16>
    df20:	2806      	cmp	r0, #6
    df22:	d105      	bne.n	df30 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x22>
    df24:	1f89      	subs	r1, r1, #6
    df26:	291f      	cmp	r1, #31
    df28:	d904      	bls.n	df34 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x26>
    df2a:	e001      	b.n	df30 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x22>
    df2c:	290c      	cmp	r1, #12
    df2e:	d001      	beq.n	df34 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x26>
    df30:	2000      	movs	r0, #0
    df32:	4770      	bx	lr
    df34:	2001      	movs	r0, #1
    df36:	4770      	bx	lr

0000df38 <sym_2RWLERIIOLMYS4LVQVNNIFLEQSG65A5Q5F2FPLA>:
    df38:	7800      	ldrb	r0, [r0, #0]
    df3a:	09c0      	lsrs	r0, r0, #7
    df3c:	4770      	bx	lr

0000df3e <sym_SKY6LLKHYM3MTKIUASL3OKO4LAKLVGGKKAJ3I2Y>:
    df3e:	f850 2f03 	ldr.w	r2, [r0, #3]!
    df42:	600a      	str	r2, [r1, #0]
    df44:	8880      	ldrh	r0, [r0, #4]
    df46:	8088      	strh	r0, [r1, #4]
    df48:	4770      	bx	lr

0000df4a <sym_GTN2QTPVJUP6VPTTNNKS6RR7APIHG3FG2T7SNQY>:
    df4a:	7800      	ldrb	r0, [r0, #0]
    df4c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    df50:	4770      	bx	lr

0000df52 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI>:
    df52:	7801      	ldrb	r1, [r0, #0]
    df54:	f001 010f 	and.w	r1, r1, #15
    df58:	2904      	cmp	r1, #4
    df5a:	d105      	bne.n	df68 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x16>
    df5c:	7840      	ldrb	r0, [r0, #1]
    df5e:	1f80      	subs	r0, r0, #6
    df60:	281f      	cmp	r0, #31
    df62:	d801      	bhi.n	df68 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x16>
    df64:	2001      	movs	r0, #1
    df66:	4770      	bx	lr
    df68:	2000      	movs	r0, #0
    df6a:	4770      	bx	lr

0000df6c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    df6c:	b510      	push	{r4, lr}
    df6e:	7802      	ldrb	r2, [r0, #0]
    df70:	f001 030f 	and.w	r3, r1, #15
    df74:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    df78:	431a      	orrs	r2, r3
    df7a:	7002      	strb	r2, [r0, #0]
    df7c:	2907      	cmp	r1, #7
    df7e:	d20c      	bcs.n	df9a <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    df80:	e8df f001 	tbb	[pc, r1]
    df84:	06040604 	.word	0x06040604
    df88:	00040804 	.word	0x00040804
    df8c:	2106      	movs	r1, #6
    df8e:	e002      	b.n	df96 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    df90:	210c      	movs	r1, #12
    df92:	e000      	b.n	df96 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    df94:	2122      	movs	r1, #34	; 0x22
    df96:	7041      	strb	r1, [r0, #1]
    df98:	bd10      	pop	{r4, pc}
    df9a:	21a8      	movs	r1, #168	; 0xa8
    df9c:	202a      	movs	r0, #42	; 0x2a
    df9e:	f7f2 fd61 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000dfa2 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    dfa2:	680a      	ldr	r2, [r1, #0]
    dfa4:	f840 2f09 	str.w	r2, [r0, #9]!
    dfa8:	8889      	ldrh	r1, [r1, #4]
    dfaa:	8081      	strh	r1, [r0, #4]
    dfac:	4770      	bx	lr

0000dfae <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    dfae:	7802      	ldrb	r2, [r0, #0]
    dfb0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    dfb4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    dfb8:	7002      	strb	r2, [r0, #0]
    dfba:	4770      	bx	lr

0000dfbc <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    dfbc:	680a      	ldr	r2, [r1, #0]
    dfbe:	f840 2f03 	str.w	r2, [r0, #3]!
    dfc2:	8889      	ldrh	r1, [r1, #4]
    dfc4:	8081      	strh	r1, [r0, #4]
    dfc6:	4770      	bx	lr

0000dfc8 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    dfc8:	7802      	ldrb	r2, [r0, #0]
    dfca:	2340      	movs	r3, #64	; 0x40
    dfcc:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    dfd0:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    dfd4:	430a      	orrs	r2, r1
    dfd6:	7002      	strb	r2, [r0, #0]
    dfd8:	4770      	bx	lr

0000dfda <sym_UODFQA44OAUGQWVRPEK2IIKSCIFD37IIPLUYFSI>:
    dfda:	680a      	ldr	r2, [r1, #0]
    dfdc:	6042      	str	r2, [r0, #4]
    dfde:	7909      	ldrb	r1, [r1, #4]
    dfe0:	7201      	strb	r1, [r0, #8]
    dfe2:	4770      	bx	lr

0000dfe4 <sym_ZZDNF2NNUMTRE4Y6NUTK3CJU3EQI64HKYHSTDAI>:
    dfe4:	72c1      	strb	r1, [r0, #11]
    dfe6:	0a09      	lsrs	r1, r1, #8
    dfe8:	7301      	strb	r1, [r0, #12]
    dfea:	4770      	bx	lr

0000dfec <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>:
    dfec:	b510      	push	{r4, lr}
    dfee:	29fb      	cmp	r1, #251	; 0xfb
    dff0:	d904      	bls.n	dffc <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI+0x10>
    dff2:	f240 61a9 	movw	r1, #1705	; 0x6a9
    dff6:	202a      	movs	r0, #42	; 0x2a
    dff8:	f7f2 fd34 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dffc:	7041      	strb	r1, [r0, #1]
    dffe:	bd10      	pop	{r4, pc}

0000e000 <sym_ZLXXGUFNBKYTUHSDKKKU4A6O7RMXODI4OQA6IUY>:
    e000:	8809      	ldrh	r1, [r1, #0]
    e002:	8181      	strh	r1, [r0, #12]
    e004:	4770      	bx	lr

0000e006 <sym_3LF2RG2XP7QRT5FAEZFOPL4L5RIBP3MCQ5PY7XY>:
    e006:	6809      	ldr	r1, [r1, #0]
    e008:	f8c0 1016 	str.w	r1, [r0, #22]
    e00c:	4770      	bx	lr

0000e00e <sym_NSDJKDRKPUUB5EAI3OMDTFOWZBLYJSPI3VQSNXQ>:
    e00e:	680a      	ldr	r2, [r1, #0]
    e010:	6042      	str	r2, [r0, #4]
    e012:	6849      	ldr	r1, [r1, #4]
    e014:	6081      	str	r1, [r0, #8]
    e016:	4770      	bx	lr

0000e018 <sym_LPOR4PC6XUIXDNEKJLY3JL3BKNV2UZG2OR7FAKQ>:
    e018:	680a      	ldr	r2, [r1, #0]
    e01a:	f840 2f0e 	str.w	r2, [r0, #14]!
    e01e:	6849      	ldr	r1, [r1, #4]
    e020:	6041      	str	r1, [r0, #4]
    e022:	4770      	bx	lr

0000e024 <sym_RHFWG2VAMMSM6HNQIXGIQMU7QUNXB2XIV4NQREY>:
    e024:	68c0      	ldr	r0, [r0, #12]
    e026:	6008      	str	r0, [r1, #0]
    e028:	4770      	bx	lr

0000e02a <sym_G3E5J3DBBC3WRZ26KQDVAZEPSZL4FITDNFKJBAY>:
    e02a:	6842      	ldr	r2, [r0, #4]
    e02c:	600a      	str	r2, [r1, #0]
    e02e:	6880      	ldr	r0, [r0, #8]
    e030:	6048      	str	r0, [r1, #4]
    e032:	4770      	bx	lr

0000e034 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>:
    e034:	7800      	ldrb	r0, [r0, #0]
    e036:	f000 0003 	and.w	r0, r0, #3
    e03a:	4770      	bx	lr

0000e03c <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>:
    e03c:	8880      	ldrh	r0, [r0, #4]
    e03e:	4770      	bx	lr

0000e040 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>:
    e040:	88c0      	ldrh	r0, [r0, #6]
    e042:	4770      	bx	lr

0000e044 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>:
    e044:	8900      	ldrh	r0, [r0, #8]
    e046:	4770      	bx	lr

0000e048 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>:
    e048:	8940      	ldrh	r0, [r0, #10]
    e04a:	4770      	bx	lr

0000e04c <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>:
    e04c:	8901      	ldrh	r1, [r0, #8]
    e04e:	291b      	cmp	r1, #27
    e050:	d30c      	bcc.n	e06c <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e052:	8941      	ldrh	r1, [r0, #10]
    e054:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e058:	4291      	cmp	r1, r2
    e05a:	d307      	bcc.n	e06c <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e05c:	8881      	ldrh	r1, [r0, #4]
    e05e:	291b      	cmp	r1, #27
    e060:	d304      	bcc.n	e06c <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e062:	88c0      	ldrh	r0, [r0, #6]
    e064:	4290      	cmp	r0, r2
    e066:	d301      	bcc.n	e06c <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e068:	2001      	movs	r0, #1
    e06a:	4770      	bx	lr
    e06c:	2000      	movs	r0, #0
    e06e:	4770      	bx	lr

0000e070 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>:
    e070:	7901      	ldrb	r1, [r0, #4]
    e072:	0749      	lsls	r1, r1, #29
    e074:	d004      	beq.n	e080 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e076:	7940      	ldrb	r0, [r0, #5]
    e078:	0740      	lsls	r0, r0, #29
    e07a:	d001      	beq.n	e080 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e07c:	2001      	movs	r0, #1
    e07e:	4770      	bx	lr
    e080:	2000      	movs	r0, #0
    e082:	4770      	bx	lr

0000e084 <sym_AYZTYWE6SD5T6ZDLITENLNSRAVS5VKE23BWONUA>:
    e084:	7181      	strb	r1, [r0, #6]
    e086:	0a09      	lsrs	r1, r1, #8
    e088:	71c1      	strb	r1, [r0, #7]
    e08a:	4770      	bx	lr

0000e08c <sym_SAWOREXGWRJNX5IOUMHBRACZ6DWRXOAHPPFX4TA>:
    e08c:	7101      	strb	r1, [r0, #4]
    e08e:	4770      	bx	lr

0000e090 <sym_SG4OPFPHWHCVU6FHRG2ZQ5GV7RHUGBHEKN6N55A>:
    e090:	7141      	strb	r1, [r0, #5]
    e092:	4770      	bx	lr

0000e094 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ>:
    e094:	7901      	ldrb	r1, [r0, #4]
    e096:	0749      	lsls	r1, r1, #29
    e098:	d004      	beq.n	e0a4 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ+0x10>
    e09a:	7940      	ldrb	r0, [r0, #5]
    e09c:	0740      	lsls	r0, r0, #29
    e09e:	d001      	beq.n	e0a4 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ+0x10>
    e0a0:	2001      	movs	r0, #1
    e0a2:	4770      	bx	lr
    e0a4:	2000      	movs	r0, #0
    e0a6:	4770      	bx	lr

0000e0a8 <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>:
    e0a8:	7900      	ldrb	r0, [r0, #4]
    e0aa:	4770      	bx	lr

0000e0ac <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>:
    e0ac:	7101      	strb	r1, [r0, #4]
    e0ae:	4770      	bx	lr

0000e0b0 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>:
    e0b0:	7940      	ldrb	r0, [r0, #5]
    e0b2:	4770      	bx	lr

0000e0b4 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>:
    e0b4:	7141      	strb	r1, [r0, #5]
    e0b6:	4770      	bx	lr

0000e0b8 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>:
    e0b8:	7802      	ldrb	r2, [r0, #0]
    e0ba:	f001 0103 	and.w	r1, r1, #3
    e0be:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    e0c2:	430a      	orrs	r2, r1
    e0c4:	7002      	strb	r2, [r0, #0]
    e0c6:	4770      	bx	lr

0000e0c8 <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>:
    e0c8:	7101      	strb	r1, [r0, #4]
    e0ca:	0a09      	lsrs	r1, r1, #8
    e0cc:	7141      	strb	r1, [r0, #5]
    e0ce:	4770      	bx	lr

0000e0d0 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>:
    e0d0:	7181      	strb	r1, [r0, #6]
    e0d2:	0a09      	lsrs	r1, r1, #8
    e0d4:	71c1      	strb	r1, [r0, #7]
    e0d6:	4770      	bx	lr

0000e0d8 <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>:
    e0d8:	7201      	strb	r1, [r0, #8]
    e0da:	0a09      	lsrs	r1, r1, #8
    e0dc:	7241      	strb	r1, [r0, #9]
    e0de:	4770      	bx	lr

0000e0e0 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>:
    e0e0:	7281      	strb	r1, [r0, #10]
    e0e2:	0a09      	lsrs	r1, r1, #8
    e0e4:	72c1      	strb	r1, [r0, #11]
    e0e6:	4770      	bx	lr

0000e0e8 <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>:
    e0e8:	7900      	ldrb	r0, [r0, #4]
    e0ea:	4770      	bx	lr

0000e0ec <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>:
    e0ec:	7900      	ldrb	r0, [r0, #4]
    e0ee:	4770      	bx	lr

0000e0f0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    e0f0:	b510      	push	{r4, lr}
    e0f2:	7a01      	ldrb	r1, [r0, #8]
    e0f4:	b119      	cbz	r1, e0fe <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    e0f6:	2901      	cmp	r1, #1
    e0f8:	d006      	beq.n	e108 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    e0fa:	2000      	movs	r0, #0
    e0fc:	bd10      	pop	{r4, pc}
    e0fe:	88c2      	ldrh	r2, [r0, #6]
    e100:	6803      	ldr	r3, [r0, #0]
    e102:	8880      	ldrh	r0, [r0, #4]
    e104:	2102      	movs	r1, #2
    e106:	e003      	b.n	e110 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    e108:	88c2      	ldrh	r2, [r0, #6]
    e10a:	6803      	ldr	r3, [r0, #0]
    e10c:	8880      	ldrh	r0, [r0, #4]
    e10e:	2101      	movs	r1, #1
    e110:	f7f4 fb9e 	bl	2850 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x14>
    e114:	b908      	cbnz	r0, e11a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    e116:	f7f4 fbe5 	bl	28e4 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    e11a:	2001      	movs	r0, #1
    e11c:	bd10      	pop	{r4, pc}

0000e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>:
    e11e:	b508      	push	{r3, lr}
    e120:	7a03      	ldrb	r3, [r0, #8]
    e122:	f88d 3000 	strb.w	r3, [sp]
    e126:	9b00      	ldr	r3, [sp, #0]
    e128:	9300      	str	r3, [sp, #0]
    e12a:	f89d 3000 	ldrb.w	r3, [sp]
    e12e:	b123      	cbz	r3, e13a <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x1c>
    e130:	f240 3117 	movw	r1, #791	; 0x317
    e134:	2010      	movs	r0, #16
    e136:	f7f2 fc95 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e13a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e13e:	f7f4 bd57 	b.w	2bf0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x100>

0000e142 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    e142:	f7f4 bd83 	b.w	2c4c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x15c>

0000e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>:
    e146:	7a03      	ldrb	r3, [r0, #8]
    e148:	b082      	sub	sp, #8
    e14a:	f88d 3000 	strb.w	r3, [sp]
    e14e:	9b00      	ldr	r3, [sp, #0]
    e150:	9300      	str	r3, [sp, #0]
    e152:	f89d 3000 	ldrb.w	r3, [sp]
    e156:	2b00      	cmp	r3, #0
    e158:	d102      	bne.n	e160 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0x1a>
    e15a:	b002      	add	sp, #8
    e15c:	f7f4 bd48 	b.w	2bf0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x100>
    e160:	b002      	add	sp, #8
    e162:	4770      	bx	lr
    e164:	2000      	movs	r0, #0
    e166:	7048      	strb	r0, [r1, #1]
    e168:	2003      	movs	r0, #3
    e16a:	7008      	strb	r0, [r1, #0]
    e16c:	2001      	movs	r0, #1
    e16e:	7108      	strb	r0, [r1, #4]
    e170:	4770      	bx	lr

0000e172 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e172:	b510      	push	{r4, lr}
    e174:	888c      	ldrh	r4, [r1, #4]
    e176:	890a      	ldrh	r2, [r1, #8]
    e178:	884b      	ldrh	r3, [r1, #2]
    e17a:	88c9      	ldrh	r1, [r1, #6]
    e17c:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    e180:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    e184:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    e188:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    e18c:	bd10      	pop	{r4, pc}

0000e18e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e18e:	b570      	push	{r4, r5, r6, lr}
    e190:	4615      	mov	r5, r2
    e192:	460c      	mov	r4, r1
    e194:	f000 f91a 	bl	e3cc <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x108>
    e198:	3096      	adds	r0, #150	; 0x96
    e19a:	4428      	add	r0, r5
    e19c:	42a0      	cmp	r0, r4
    e19e:	d801      	bhi.n	e1a4 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e1a0:	1a20      	subs	r0, r4, r0
    e1a2:	bd70      	pop	{r4, r5, r6, pc}
    e1a4:	2000      	movs	r0, #0
    e1a6:	bd70      	pop	{r4, r5, r6, pc}

0000e1a8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e1a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e1ac:	4604      	mov	r4, r0
    e1ae:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    e1b0:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    e1b2:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    e1b6:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    e1ba:	4285      	cmp	r5, r0
    e1bc:	d300      	bcc.n	e1c0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    e1be:	4605      	mov	r5, r0
    e1c0:	4620      	mov	r0, r4
    e1c2:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    e1c6:	f000 f89c 	bl	e302 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    e1ca:	4601      	mov	r1, r0
    e1cc:	86e5      	strh	r5, [r4, #54]	; 0x36
    e1ce:	8761      	strh	r1, [r4, #58]	; 0x3a
    e1d0:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    e1d2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e1d6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    e1d8:	4680      	mov	r8, r0
    e1da:	42aa      	cmp	r2, r5
    e1dc:	d200      	bcs.n	e1e0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    e1de:	462a      	mov	r2, r5
    e1e0:	428b      	cmp	r3, r1
    e1e2:	d200      	bcs.n	e1e6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    e1e4:	460b      	mov	r3, r1
    e1e6:	8202      	strh	r2, [r0, #16]
    e1e8:	f8a8 3012 	strh.w	r3, [r8, #18]
    e1ec:	42bd      	cmp	r5, r7
    e1ee:	d101      	bne.n	e1f4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    e1f0:	42b1      	cmp	r1, r6
    e1f2:	d001      	beq.n	e1f8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    e1f4:	2001      	movs	r0, #1
    e1f6:	e000      	b.n	e1fa <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    e1f8:	2000      	movs	r0, #0
    e1fa:	4681      	mov	r9, r0
    e1fc:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    e200:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e204:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    e206:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    e208:	4285      	cmp	r5, r0
    e20a:	d300      	bcc.n	e20e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    e20c:	4605      	mov	r5, r0
    e20e:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    e212:	4620      	mov	r0, r4
    e214:	f000 f87d 	bl	e312 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    e218:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    e21c:	2902      	cmp	r1, #2
    e21e:	d108      	bne.n	e232 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    e220:	42af      	cmp	r7, r5
    e222:	d200      	bcs.n	e226 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    e224:	463d      	mov	r5, r7
    e226:	4286      	cmp	r6, r0
    e228:	d200      	bcs.n	e22c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    e22a:	4630      	mov	r0, r6
    e22c:	2100      	movs	r1, #0
    e22e:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    e232:	f8a8 5008 	strh.w	r5, [r8, #8]
    e236:	f8a8 000c 	strh.w	r0, [r8, #12]
    e23a:	42bd      	cmp	r5, r7
    e23c:	d101      	bne.n	e242 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    e23e:	42b0      	cmp	r0, r6
    e240:	d001      	beq.n	e246 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    e242:	2001      	movs	r0, #1
    e244:	e000      	b.n	e248 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    e246:	2000      	movs	r0, #0
    e248:	ea40 0009 	orr.w	r0, r0, r9
    e24c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e250 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    e250:	6840      	ldr	r0, [r0, #4]
    e252:	4770      	bx	lr

0000e254 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    e254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e258:	4616      	mov	r6, r2
    e25a:	460f      	mov	r7, r1
    e25c:	4604      	mov	r4, r0
    e25e:	f000 f8b5 	bl	e3cc <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x108>
    e262:	4605      	mov	r5, r0
    e264:	463a      	mov	r2, r7
    e266:	6921      	ldr	r1, [r4, #16]
    e268:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e26a:	f000 f845 	bl	e2f8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
    e26e:	19a9      	adds	r1, r5, r6
    e270:	4281      	cmp	r1, r0
    e272:	d300      	bcc.n	e276 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    e274:	4608      	mov	r0, r1
    e276:	6320      	str	r0, [r4, #48]	; 0x30
    e278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e27c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e27c:	221b      	movs	r2, #27
    e27e:	8402      	strh	r2, [r0, #32]
    e280:	8382      	strh	r2, [r0, #28]
    e282:	82c2      	strh	r2, [r0, #22]
    e284:	8282      	strh	r2, [r0, #20]
    e286:	8142      	strh	r2, [r0, #10]
    e288:	8202      	strh	r2, [r0, #16]
    e28a:	8102      	strh	r2, [r0, #8]
    e28c:	8542      	strh	r2, [r0, #42]	; 0x2a
    e28e:	8582      	strh	r2, [r0, #44]	; 0x2c
    e290:	8482      	strh	r2, [r0, #36]	; 0x24
    e292:	2900      	cmp	r1, #0
    e294:	d10a      	bne.n	e2ac <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e296:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e29a:	8441      	strh	r1, [r0, #34]	; 0x22
    e29c:	83c1      	strh	r1, [r0, #30]
    e29e:	8341      	strh	r1, [r0, #26]
    e2a0:	8301      	strh	r1, [r0, #24]
    e2a2:	81c1      	strh	r1, [r0, #14]
    e2a4:	8241      	strh	r1, [r0, #18]
    e2a6:	8181      	strh	r1, [r0, #12]
    e2a8:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e2aa:	8601      	strh	r1, [r0, #48]	; 0x30
    e2ac:	4770      	bx	lr

0000e2ae <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e2ae:	6800      	ldr	r0, [r0, #0]
    e2b0:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e2b4:	4290      	cmp	r0, r2
    e2b6:	d903      	bls.n	e2c0 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e2b8:	1a40      	subs	r0, r0, r1
    e2ba:	389c      	subs	r0, #156	; 0x9c
    e2bc:	0840      	lsrs	r0, r0, #1
    e2be:	4770      	bx	lr
    e2c0:	2000      	movs	r0, #0
    e2c2:	4770      	bx	lr

0000e2c4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e2c4:	b510      	push	{r4, lr}
    e2c6:	9c02      	ldr	r4, [sp, #8]
    e2c8:	8281      	strh	r1, [r0, #20]
    e2ca:	82c2      	strh	r2, [r0, #22]
    e2cc:	8303      	strh	r3, [r0, #24]
    e2ce:	8344      	strh	r4, [r0, #26]
    e2d0:	bd10      	pop	{r4, pc}
    e2d2:	1d00      	adds	r0, r0, #4
    e2d4:	b510      	push	{r4, lr}
    e2d6:	b280      	uxth	r0, r0
    e2d8:	2901      	cmp	r1, #1
    e2da:	d006      	beq.n	e2ea <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x26>
    e2dc:	2902      	cmp	r1, #2
    e2de:	d007      	beq.n	e2f0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x2c>
    e2e0:	f240 2126 	movw	r1, #550	; 0x226
    e2e4:	2006      	movs	r0, #6
    e2e6:	f7f2 fbbd 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2ea:	00c0      	lsls	r0, r0, #3
    e2ec:	3050      	adds	r0, #80	; 0x50
    e2ee:	e001      	b.n	e2f4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x30>
    e2f0:	0080      	lsls	r0, r0, #2
    e2f2:	302c      	adds	r0, #44	; 0x2c
    e2f4:	b280      	uxth	r0, r0
    e2f6:	bd10      	pop	{r4, pc}
    e2f8:	4288      	cmp	r0, r1
    e2fa:	d300      	bcc.n	e2fe <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3a>
    e2fc:	4608      	mov	r0, r1
    e2fe:	1a80      	subs	r0, r0, r2
    e300:	4770      	bx	lr
    e302:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    e306:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    e30a:	4281      	cmp	r1, r0
    e30c:	d200      	bcs.n	e310 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4c>
    e30e:	4608      	mov	r0, r1
    e310:	4770      	bx	lr
    e312:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e316:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    e31a:	4281      	cmp	r1, r0
    e31c:	d200      	bcs.n	e320 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x5c>
    e31e:	4608      	mov	r0, r1
    e320:	4770      	bx	lr
    e322:	b538      	push	{r3, r4, r5, lr}
    e324:	2200      	movs	r2, #0
    e326:	f1a0 0318 	sub.w	r3, r0, #24
    e32a:	2416      	movs	r4, #22
    e32c:	7202      	strb	r2, [r0, #8]
    e32e:	704a      	strb	r2, [r1, #1]
    e330:	700c      	strb	r4, [r1, #0]
    e332:	f8d3 5022 	ldr.w	r5, [r3, #34]	; 0x22
    e336:	604d      	str	r5, [r1, #4]
    e338:	f8d3 5026 	ldr.w	r5, [r3, #38]	; 0x26
    e33c:	608d      	str	r5, [r1, #8]
    e33e:	f8d3 502a 	ldr.w	r5, [r3, #42]	; 0x2a
    e342:	60cd      	str	r5, [r1, #12]
    e344:	7a05      	ldrb	r5, [r0, #8]
    e346:	f88d 5000 	strb.w	r5, [sp]
    e34a:	9d00      	ldr	r5, [sp, #0]
    e34c:	9500      	str	r5, [sp, #0]
    e34e:	f89d 5000 	ldrb.w	r5, [sp]
    e352:	2d00      	cmp	r5, #0
    e354:	d1ea      	bne.n	e32c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x68>
    e356:	bd38      	pop	{r3, r4, r5, pc}
    e358:	b5f0      	push	{r4, r5, r6, r7, lr}
    e35a:	b087      	sub	sp, #28
    e35c:	460d      	mov	r5, r1
    e35e:	4604      	mov	r4, r0
    e360:	f7f4 fa62 	bl	2828 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    e364:	2600      	movs	r6, #0
    e366:	b328      	cbz	r0, e3b4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf0>
    e368:	f5a4 70c0 	sub.w	r0, r4, #384	; 0x180
    e36c:	7226      	strb	r6, [r4, #8]
    e36e:	8807      	ldrh	r7, [r0, #0]
    e370:	a903      	add	r1, sp, #12
    e372:	4638      	mov	r0, r7
    e374:	f001 fb39 	bl	f9ea <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    e378:	b108      	cbz	r0, e37e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xba>
    e37a:	21fd      	movs	r1, #253	; 0xfd
    e37c:	e017      	b.n	e3ae <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xea>
    e37e:	f8ad 7000 	strh.w	r7, [sp]
    e382:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    e386:	f8ad 0002 	strh.w	r0, [sp, #2]
    e38a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    e38e:	f8ad 0004 	strh.w	r0, [sp, #4]
    e392:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    e396:	f8ad 0006 	strh.w	r0, [sp, #6]
    e39a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    e39e:	f8ad 0008 	strh.w	r0, [sp, #8]
    e3a2:	4668      	mov	r0, sp
    e3a4:	f001 fb48 	bl	fa38 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    e3a8:	b120      	cbz	r0, e3b4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf0>
    e3aa:	f44f 7183 	mov.w	r1, #262	; 0x106
    e3ae:	202c      	movs	r0, #44	; 0x2c
    e3b0:	f7f2 fb58 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e3b4:	201f      	movs	r0, #31
    e3b6:	7028      	strb	r0, [r5, #0]
    e3b8:	706e      	strb	r6, [r5, #1]
    e3ba:	f854 0f0a 	ldr.w	r0, [r4, #10]!
    e3be:	6068      	str	r0, [r5, #4]
    e3c0:	6860      	ldr	r0, [r4, #4]
    e3c2:	60a8      	str	r0, [r5, #8]
    e3c4:	8920      	ldrh	r0, [r4, #8]
    e3c6:	81a8      	strh	r0, [r5, #12]
    e3c8:	b007      	add	sp, #28
    e3ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e3cc:	2196      	movs	r1, #150	; 0x96
    e3ce:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    e3d2:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    e3d6:	f000 b800 	b.w	e3da <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x116>
    e3da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e3de:	460d      	mov	r5, r1
    e3e0:	4606      	mov	r6, r0
    e3e2:	4698      	mov	r8, r3
    e3e4:	4617      	mov	r7, r2
    e3e6:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e3e8:	4611      	mov	r1, r2
    e3ea:	f7ff ff72 	bl	e2d2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e3ee:	4604      	mov	r4, r0
    e3f0:	4639      	mov	r1, r7
    e3f2:	4630      	mov	r0, r6
    e3f4:	f7ff ff8d 	bl	e312 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    e3f8:	42a0      	cmp	r0, r4
    e3fa:	d200      	bcs.n	e3fe <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x13a>
    e3fc:	4604      	mov	r4, r0
    e3fe:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e400:	4641      	mov	r1, r8
    e402:	f7ff ff66 	bl	e2d2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e406:	4607      	mov	r7, r0
    e408:	4641      	mov	r1, r8
    e40a:	4630      	mov	r0, r6
    e40c:	f7ff ff79 	bl	e302 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    e410:	42b8      	cmp	r0, r7
    e412:	d300      	bcc.n	e416 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x152>
    e414:	4638      	mov	r0, r7
    e416:	4420      	add	r0, r4
    e418:	4428      	add	r0, r5
    e41a:	1d80      	adds	r0, r0, #6
    e41c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e420 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>:
    e420:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e424:	2700      	movs	r7, #0
    e426:	463d      	mov	r5, r7
    e428:	2623      	movs	r6, #35	; 0x23
    e42a:	46b8      	mov	r8, r7
    e42c:	f7f4 fccc 	bl	2dc8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    e430:	4604      	mov	r4, r0
    e432:	f7f4 fc91 	bl	2d58 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA>
    e436:	b190      	cbz	r0, e45e <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3e>
    e438:	f8cd 8000 	str.w	r8, [sp]
    e43c:	f8cd 8004 	str.w	r8, [sp, #4]
    e440:	e003      	b.n	e44a <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x2a>
    e442:	9800      	ldr	r0, [sp, #0]
    e444:	6941      	ldr	r1, [r0, #20]
    e446:	42a1      	cmp	r1, r4
    e448:	d009      	beq.n	e45e <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3e>
    e44a:	4668      	mov	r0, sp
    e44c:	f7f2 fd28 	bl	ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    e450:	2800      	cmp	r0, #0
    e452:	d0f6      	beq.n	e442 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x22>
    e454:	4625      	mov	r5, r4
    e456:	4620      	mov	r0, r4
    e458:	f7f4 fc48 	bl	2cec <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    e45c:	4607      	mov	r7, r0
    e45e:	1e76      	subs	r6, r6, #1
    e460:	d001      	beq.n	e466 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x46>
    e462:	2f00      	cmp	r7, #0
    e464:	d0e2      	beq.n	e42c <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0xc>
    e466:	b115      	cbz	r5, e46e <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x4e>
    e468:	4628      	mov	r0, r5
    e46a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e46e:	f240 1167 	movw	r1, #359	; 0x167
    e472:	200f      	movs	r0, #15
    e474:	f7f2 faf6 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e478:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e47c:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e480:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e484:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e488:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e48c:	ea10 0f40 	tst.w	r0, r0, lsl #1
    e490:	d001      	beq.n	e496 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x76>
    e492:	2000      	movs	r0, #0
    e494:	4770      	bx	lr
    e496:	2001      	movs	r0, #1
    e498:	4770      	bx	lr
    e49a:	b510      	push	{r4, lr}
    e49c:	4604      	mov	r4, r0
    e49e:	2108      	movs	r1, #8
    e4a0:	4620      	mov	r0, r4
    e4a2:	f7f2 fb7f 	bl	ba4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e4a6:	6820      	ldr	r0, [r4, #0]
    e4a8:	2800      	cmp	r0, #0
    e4aa:	d102      	bne.n	e4b2 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x92>
    e4ac:	6860      	ldr	r0, [r4, #4]
    e4ae:	2800      	cmp	r0, #0
    e4b0:	d0f5      	beq.n	e49e <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x7e>
    e4b2:	bd10      	pop	{r4, pc}

0000e4b4 <sym_B4SOI7ZERMZJ76YVIJFCACJN3HNVAJYEHZSLSTQ>:
    e4b4:	f000 3155 	and.w	r1, r0, #1431655765	; 0x55555555
    e4b8:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
    e4bc:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    e4c0:	4408      	add	r0, r1
    e4c2:	f000 3133 	and.w	r1, r0, #858993459	; 0x33333333
    e4c6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
    e4ca:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    e4ce:	4408      	add	r0, r1
    e4d0:	f000 310f 	and.w	r1, r0, #252645135	; 0xf0f0f0f
    e4d4:	f04f 320f 	mov.w	r2, #252645135	; 0xf0f0f0f
    e4d8:	ea02 1010 	and.w	r0, r2, r0, lsr #4
    e4dc:	4408      	add	r0, r1
    e4de:	f000 11ff 	and.w	r1, r0, #16711935	; 0xff00ff
    e4e2:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
    e4e6:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    e4ea:	4408      	add	r0, r1
    e4ec:	eb00 4010 	add.w	r0, r0, r0, lsr #16
    e4f0:	b2c0      	uxtb	r0, r0
    e4f2:	4770      	bx	lr

0000e4f4 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    e4f4:	f000 0155 	and.w	r1, r0, #85	; 0x55
    e4f8:	2255      	movs	r2, #85	; 0x55
    e4fa:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    e4fe:	4408      	add	r0, r1
    e500:	f000 0133 	and.w	r1, r0, #51	; 0x33
    e504:	2233      	movs	r2, #51	; 0x33
    e506:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    e50a:	4408      	add	r0, r1
    e50c:	f000 010f 	and.w	r1, r0, #15
    e510:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    e514:	4770      	bx	lr

0000e516 <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A>:
    e516:	ea80 0060 	eor.w	r0, r0, r0, asr #1
    e51a:	f7ff bfcb 	b.w	e4b4 <sym_B4SOI7ZERMZJ76YVIJFCACJN3HNVAJYEHZSLSTQ>

0000e51e <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI>:
    e51e:	b510      	push	{r4, lr}
    e520:	f1a0 0234 	sub.w	r2, r0, #52	; 0x34
    e524:	f830 4cbc 	ldrh.w	r4, [r0, #-188]
    e528:	2000      	movs	r0, #0
    e52a:	7048      	strb	r0, [r1, #1]
    e52c:	230c      	movs	r3, #12
    e52e:	700b      	strb	r3, [r1, #0]
    e530:	7108      	strb	r0, [r1, #4]
    e532:	f8a1 4005 	strh.w	r4, [r1, #5]
    e536:	f892 003d 	ldrb.w	r0, [r2, #61]	; 0x3d
    e53a:	71c8      	strb	r0, [r1, #7]
    e53c:	4620      	mov	r0, r4
    e53e:	f7f2 fe5d 	bl	11fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e542:	f7fe feb6 	bl	d2b2 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    e546:	b140      	cbz	r0, e55a <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI+0x3c>
    e548:	4620      	mov	r0, r4
    e54a:	f7ff f99c 	bl	d886 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    e54e:	4620      	mov	r0, r4
    e550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e554:	2100      	movs	r1, #0
    e556:	f7f2 bce9 	b.w	f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e55a:	2160      	movs	r1, #96	; 0x60
    e55c:	2063      	movs	r0, #99	; 0x63
    e55e:	f7f2 fa81 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e562 <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y>:
    e562:	b538      	push	{r3, r4, r5, lr}
    e564:	2200      	movs	r2, #0
    e566:	704a      	strb	r2, [r1, #1]
    e568:	2309      	movs	r3, #9
    e56a:	700b      	strb	r3, [r1, #0]
    e56c:	f1a0 0474 	sub.w	r4, r0, #116	; 0x74
    e570:	f5a0 73e3 	sub.w	r3, r0, #454	; 0x1c6
    e574:	7202      	strb	r2, [r0, #8]
    e576:	84da      	strh	r2, [r3, #38]	; 0x26
    e578:	f8d4 507e 	ldr.w	r5, [r4, #126]	; 0x7e
    e57c:	604d      	str	r5, [r1, #4]
    e57e:	f8d4 5082 	ldr.w	r5, [r4, #130]	; 0x82
    e582:	608d      	str	r5, [r1, #8]
    e584:	f8b4 5086 	ldrh.w	r5, [r4, #134]	; 0x86
    e588:	818d      	strh	r5, [r1, #12]
    e58a:	710a      	strb	r2, [r1, #4]
    e58c:	7a05      	ldrb	r5, [r0, #8]
    e58e:	f88d 5000 	strb.w	r5, [sp]
    e592:	9d00      	ldr	r5, [sp, #0]
    e594:	9500      	str	r5, [sp, #0]
    e596:	f89d 5000 	ldrb.w	r5, [sp]
    e59a:	2d00      	cmp	r5, #0
    e59c:	d1ea      	bne.n	e574 <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y+0x12>
    e59e:	bd38      	pop	{r3, r4, r5, pc}

0000e5a0 <sym_2TCPCDAUQ3FXZYG56Z6ZP7VCFNUJTBV3EZJYPGY>:
    e5a0:	2200      	movs	r2, #0
    e5a2:	704a      	strb	r2, [r1, #1]
    e5a4:	220d      	movs	r2, #13
    e5a6:	700a      	strb	r2, [r1, #0]
    e5a8:	f100 020a 	add.w	r2, r0, #10
    e5ac:	7a83      	ldrb	r3, [r0, #10]
    e5ae:	f2a0 2012 	subw	r0, r0, #530	; 0x212
    e5b2:	710b      	strb	r3, [r1, #4]
    e5b4:	8800      	ldrh	r0, [r0, #0]
    e5b6:	80c8      	strh	r0, [r1, #6]
    e5b8:	7910      	ldrb	r0, [r2, #4]
    e5ba:	7208      	strb	r0, [r1, #8]
    e5bc:	4770      	bx	lr

0000e5be <sym_S6U6ANENQP6QL5TLITNXPOYFSB26Q5AFTW32CXI>:
    e5be:	2200      	movs	r2, #0
    e5c0:	704a      	strb	r2, [r1, #1]
    e5c2:	220e      	movs	r2, #14
    e5c4:	700a      	strb	r2, [r1, #0]
    e5c6:	7a82      	ldrb	r2, [r0, #10]
    e5c8:	f2a0 2012 	subw	r0, r0, #530	; 0x212
    e5cc:	710a      	strb	r2, [r1, #4]
    e5ce:	8800      	ldrh	r0, [r0, #0]
    e5d0:	80c8      	strh	r0, [r1, #6]
    e5d2:	4770      	bx	lr

0000e5d4 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>:
    e5d4:	b510      	push	{r4, lr}
    e5d6:	6844      	ldr	r4, [r0, #4]
    e5d8:	7803      	ldrb	r3, [r0, #0]
    e5da:	2100      	movs	r1, #0
    e5dc:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    e5e0:	3488      	adds	r4, #136	; 0x88
    e5e2:	4620      	mov	r0, r4
    e5e4:	f7ff fa8a 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e5e8:	b110      	cbz	r0, e5f0 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY+0x1c>
    e5ea:	2004      	movs	r0, #4
    e5ec:	7760      	strb	r0, [r4, #29]
    e5ee:	bd10      	pop	{r4, pc}
    e5f0:	21aa      	movs	r1, #170	; 0xaa
    e5f2:	201c      	movs	r0, #28
    e5f4:	f7f2 fa36 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e5f8 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>:
    e5f8:	b510      	push	{r4, lr}
    e5fa:	4604      	mov	r4, r0
    e5fc:	6840      	ldr	r0, [r0, #4]
    e5fe:	2300      	movs	r3, #0
    e600:	4619      	mov	r1, r3
    e602:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    e606:	3088      	adds	r0, #136	; 0x88
    e608:	f7ff fa78 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e60c:	b120      	cbz	r0, e618 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x20>
    e60e:	6861      	ldr	r1, [r4, #4]
    e610:	2000      	movs	r0, #0
    e612:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    e616:	bd10      	pop	{r4, pc}
    e618:	21b2      	movs	r1, #178	; 0xb2
    e61a:	201c      	movs	r0, #28
    e61c:	f7f2 fa22 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e620:	2200      	movs	r2, #0
    e622:	704a      	strb	r2, [r1, #1]
    e624:	2208      	movs	r2, #8
    e626:	700a      	strb	r2, [r1, #0]
    e628:	f850 2f09 	ldr.w	r2, [r0, #9]!
    e62c:	604a      	str	r2, [r1, #4]
    e62e:	6842      	ldr	r2, [r0, #4]
    e630:	608a      	str	r2, [r1, #8]
    e632:	8902      	ldrh	r2, [r0, #8]
    e634:	818a      	strh	r2, [r1, #12]
    e636:	7a80      	ldrb	r0, [r0, #10]
    e638:	7388      	strb	r0, [r1, #14]
    e63a:	4770      	bx	lr

0000e63c <sym_NK4HRRKGX3ST3ARVTU6HUEXLOWZFFBMCIDNT3EI>:
    e63c:	2200      	movs	r2, #0
    e63e:	704a      	strb	r2, [r1, #1]
    e640:	2210      	movs	r2, #16
    e642:	f5a0 70b0 	sub.w	r0, r0, #352	; 0x160
    e646:	700a      	strb	r2, [r1, #0]
    e648:	8800      	ldrh	r0, [r0, #0]
    e64a:	8088      	strh	r0, [r1, #4]
    e64c:	4770      	bx	lr

0000e64e <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A>:
    e64e:	b538      	push	{r3, r4, r5, lr}
    e650:	2400      	movs	r4, #0
    e652:	704c      	strb	r4, [r1, #1]
    e654:	2501      	movs	r5, #1
    e656:	700d      	strb	r5, [r1, #0]
    e658:	f1a0 0260 	sub.w	r2, r0, #96	; 0x60
    e65c:	f1a0 03e8 	sub.w	r3, r0, #232	; 0xe8
    e660:	710c      	strb	r4, [r1, #4]
    e662:	7204      	strb	r4, [r0, #8]
    e664:	881d      	ldrh	r5, [r3, #0]
    e666:	f8a1 5005 	strh.w	r5, [r1, #5]
    e66a:	f892 5069 	ldrb.w	r5, [r2, #105]	; 0x69
    e66e:	71cd      	strb	r5, [r1, #7]
    e670:	f8b2 506a 	ldrh.w	r5, [r2, #106]	; 0x6a
    e674:	810d      	strh	r5, [r1, #8]
    e676:	f8b2 506c 	ldrh.w	r5, [r2, #108]	; 0x6c
    e67a:	814d      	strh	r5, [r1, #10]
    e67c:	7a05      	ldrb	r5, [r0, #8]
    e67e:	f88d 5000 	strb.w	r5, [sp]
    e682:	9d00      	ldr	r5, [sp, #0]
    e684:	9500      	str	r5, [sp, #0]
    e686:	f89d 5000 	ldrb.w	r5, [sp]
    e68a:	2d00      	cmp	r5, #0
    e68c:	d1e9      	bne.n	e662 <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A+0x14>
    e68e:	bd38      	pop	{r3, r4, r5, pc}

0000e690 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>:
    e690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e694:	7803      	ldrb	r3, [r0, #0]
    e696:	6840      	ldr	r0, [r0, #4]
    e698:	2501      	movs	r5, #1
    e69a:	f100 0488 	add.w	r4, r0, #136	; 0x88
    e69e:	f500 779c 	add.w	r7, r0, #312	; 0x138
    e6a2:	f890 00e7 	ldrb.w	r0, [r0, #231]	; 0xe7
    e6a6:	f04f 0600 	mov.w	r6, #0
    e6aa:	0780      	lsls	r0, r0, #30
    e6ac:	d410      	bmi.n	e6d0 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x40>
    e6ae:	7f62      	ldrb	r2, [r4, #29]
    e6b0:	2100      	movs	r1, #0
    e6b2:	4620      	mov	r0, r4
    e6b4:	f7ff fa22 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e6b8:	b130      	cbz	r0, e6c8 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x38>
    e6ba:	7765      	strb	r5, [r4, #29]
    e6bc:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
    e6c0:	f8a4 6054 	strh.w	r6, [r4, #84]	; 0x54
    e6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e6c8:	216e      	movs	r1, #110	; 0x6e
    e6ca:	2040      	movs	r0, #64	; 0x40
    e6cc:	f7f2 f9ca 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e6d0:	2300      	movs	r3, #0
    e6d2:	7fa2      	ldrb	r2, [r4, #30]
    e6d4:	4619      	mov	r1, r3
    e6d6:	4620      	mov	r0, r4
    e6d8:	f7ff fa10 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e6dc:	b108      	cbz	r0, e6e2 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x52>
    e6de:	f884 605c 	strb.w	r6, [r4, #92]	; 0x5c
    e6e2:	74be      	strb	r6, [r7, #18]
    e6e4:	e7ee      	b.n	e6c4 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x34>
    e6e6:	2200      	movs	r2, #0
    e6e8:	704a      	strb	r2, [r1, #1]
    e6ea:	221d      	movs	r2, #29
    e6ec:	700a      	strb	r2, [r1, #0]
    e6ee:	f8d0 000a 	ldr.w	r0, [r0, #10]
    e6f2:	6048      	str	r0, [r1, #4]
    e6f4:	4770      	bx	lr
    e6f6:	b510      	push	{r4, lr}
    e6f8:	4604      	mov	r4, r0
    e6fa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    e6fe:	e9d4 1000 	ldrd	r1, r0, [r4]
    e702:	4050      	eors	r0, r2
    e704:	ea70 0101 	orns	r1, r0, r1
    e708:	d008      	beq.n	e71c <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x8c>
    e70a:	f7fc fd41 	bl	b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    e70e:	e9d4 2300 	ldrd	r2, r3, [r4]
    e712:	1a80      	subs	r0, r0, r2
    e714:	4199      	sbcs	r1, r3
    e716:	d301      	bcc.n	e71c <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x8c>
    e718:	2001      	movs	r0, #1
    e71a:	bd10      	pop	{r4, pc}
    e71c:	2000      	movs	r0, #0
    e71e:	bd10      	pop	{r4, pc}
    e720:	2801      	cmp	r0, #1
    e722:	d102      	bne.n	e72a <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x9a>
    e724:	7948      	ldrb	r0, [r1, #5]
    e726:	0980      	lsrs	r0, r0, #6
    e728:	d001      	beq.n	e72e <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x9e>
    e72a:	2000      	movs	r0, #0
    e72c:	4770      	bx	lr
    e72e:	2001      	movs	r0, #1
    e730:	4770      	bx	lr
    e732:	2801      	cmp	r0, #1
    e734:	d106      	bne.n	e744 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb4>
    e736:	7948      	ldrb	r0, [r1, #5]
    e738:	2101      	movs	r1, #1
    e73a:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    e73e:	d101      	bne.n	e744 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb4>
    e740:	2001      	movs	r0, #1
    e742:	4770      	bx	lr
    e744:	2000      	movs	r0, #0
    e746:	4770      	bx	lr
    e748:	b118      	cbz	r0, e752 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc2>
    e74a:	2802      	cmp	r0, #2
    e74c:	d001      	beq.n	e752 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc2>
    e74e:	2001      	movs	r0, #1
    e750:	4770      	bx	lr
    e752:	2000      	movs	r0, #0
    e754:	4770      	bx	lr
    e756:	2802      	cmp	r0, #2
    e758:	d003      	beq.n	e762 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xd2>
    e75a:	2803      	cmp	r0, #3
    e75c:	d001      	beq.n	e762 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xd2>
    e75e:	2000      	movs	r0, #0
    e760:	4770      	bx	lr
    e762:	2001      	movs	r0, #1
    e764:	4770      	bx	lr

0000e766 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>:
    e766:	f7f5 bd93 	b.w	4290 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x290>

0000e76a <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>:
    e76a:	b510      	push	{r4, lr}
    e76c:	2000      	movs	r0, #0
    e76e:	f7f5 fbc9 	bl	3f04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x46c>
    e772:	f7f4 ff4f 	bl	3614 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    e776:	f7f5 fd99 	bl	42ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2ac>
    e77a:	2000      	movs	r0, #0
    e77c:	bd10      	pop	{r4, pc}
    e77e:	b510      	push	{r4, lr}
    e780:	f7f5 fbda 	bl	3f38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a0>
    e784:	f7f4 ff46 	bl	3614 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    e788:	f7f9 fa92 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e78c:	2005      	movs	r0, #5
    e78e:	bd10      	pop	{r4, pc}
    e790:	b510      	push	{r4, lr}
    e792:	f7f5 fbd1 	bl	3f38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a0>
    e796:	f7f9 fa8b 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e79a:	2005      	movs	r0, #5
    e79c:	bd10      	pop	{r4, pc}
    e79e:	b530      	push	{r4, r5, lr}
    e7a0:	b08b      	sub	sp, #44	; 0x2c
    e7a2:	4605      	mov	r5, r0
    e7a4:	f7f5 fbc8 	bl	3f38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a0>
    e7a8:	7828      	ldrb	r0, [r5, #0]
    e7aa:	4669      	mov	r1, sp
    e7ac:	f000 040f 	and.w	r4, r0, #15
    e7b0:	4622      	mov	r2, r4
    e7b2:	4628      	mov	r0, r5
    e7b4:	f7f5 ff26 	bl	4604 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    e7b8:	2200      	movs	r2, #0
    e7ba:	4621      	mov	r1, r4
    e7bc:	4668      	mov	r0, sp
    e7be:	f7f4 ffb1 	bl	3724 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x14c>
    e7c2:	4621      	mov	r1, r4
    e7c4:	4668      	mov	r0, sp
    e7c6:	f7f5 fb37 	bl	3e38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3a0>
    e7ca:	4604      	mov	r4, r0
    e7cc:	f7f4 ff22 	bl	3614 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    e7d0:	b00b      	add	sp, #44	; 0x2c
    e7d2:	4620      	mov	r0, r4
    e7d4:	bd30      	pop	{r4, r5, pc}
    e7d6:	f240 31a7 	movw	r1, #935	; 0x3a7
    e7da:	2032      	movs	r0, #50	; 0x32
    e7dc:	f7f2 f942 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e7e0:	b510      	push	{r4, lr}
    e7e2:	f7f5 fba9 	bl	3f38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a0>
    e7e6:	f7f9 fa63 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e7ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e7ee:	f7f5 bd65 	b.w	42bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2bc>
    e7f2:	f7f5 bd4d 	b.w	4290 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x290>
    e7f6:	f7fe bf0e 	b.w	d616 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    e7fa:	b570      	push	{r4, r5, r6, lr}
    e7fc:	4614      	mov	r4, r2
    e7fe:	461d      	mov	r5, r3
    e800:	4606      	mov	r6, r0
    e802:	f7fc fcc5 	bl	b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    e806:	1900      	adds	r0, r0, r4
    e808:	4169      	adcs	r1, r5
    e80a:	e9c6 0100 	strd	r0, r1, [r6]
    e80e:	bd70      	pop	{r4, r5, r6, pc}

0000e810 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>:
    e810:	b510      	push	{r4, lr}
    e812:	f7f2 fd27 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e816:	f000 f944 	bl	eaa2 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    e81a:	4604      	mov	r4, r0
    e81c:	221c      	movs	r2, #28
    e81e:	2100      	movs	r1, #0
    e820:	3009      	adds	r0, #9
    e822:	f001 ff9e 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e826:	207f      	movs	r0, #127	; 0x7f
    e828:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    e82c:	21ff      	movs	r1, #255	; 0xff
    e82e:	75e1      	strb	r1, [r4, #23]
    e830:	72a1      	strb	r1, [r4, #10]
    e832:	7721      	strb	r1, [r4, #28]
    e834:	7ce0      	ldrb	r0, [r4, #19]
    e836:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    e83a:	3020      	adds	r0, #32
    e83c:	74e0      	strb	r0, [r4, #19]
    e83e:	bd10      	pop	{r4, pc}

0000e840 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>:
    e840:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    e844:	461d      	mov	r5, r3
    e846:	e9dd ba0b 	ldrd	fp, sl, [sp, #44]	; 0x2c
    e84a:	4616      	mov	r6, r2
    e84c:	4688      	mov	r8, r1
    e84e:	4681      	mov	r9, r0
    e850:	f7f2 fd08 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e854:	4604      	mov	r4, r0
    e856:	f7fe fda7 	bl	d3a8 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    e85a:	2801      	cmp	r0, #1
    e85c:	d066      	beq.n	e92c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xec>
    e85e:	4620      	mov	r0, r4
    e860:	f000 f91f 	bl	eaa2 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    e864:	4604      	mov	r4, r0
    e866:	221c      	movs	r2, #28
    e868:	2100      	movs	r1, #0
    e86a:	3009      	adds	r0, #9
    e86c:	f001 ff79 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e870:	2701      	movs	r7, #1
    e872:	7267      	strb	r7, [r4, #9]
    e874:	ea5f 0008 	movs.w	r0, r8
    e878:	d009      	beq.n	e88e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x4e>
    e87a:	2801      	cmp	r0, #1
    e87c:	d00b      	beq.n	e896 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x56>
    e87e:	2802      	cmp	r0, #2
    e880:	d02d      	beq.n	e8de <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x9e>
    e882:	f1b8 0f06 	cmp.w	r8, #6
    e886:	d02c      	beq.n	e8e2 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa2>
    e888:	f240 310b 	movw	r1, #779	; 0x30b
    e88c:	e04b      	b.n	e926 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe6>
    e88e:	7ce0      	ldrb	r0, [r4, #19]
    e890:	f040 0001 	orr.w	r0, r0, #1
    e894:	e026      	b.n	e8e4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa4>
    e896:	7ce0      	ldrb	r0, [r4, #19]
    e898:	f040 0005 	orr.w	r0, r0, #5
    e89c:	f040 0010 	orr.w	r0, r0, #16
    e8a0:	74e0      	strb	r0, [r4, #19]
    e8a2:	f104 030a 	add.w	r3, r4, #10
    e8a6:	1c5a      	adds	r2, r3, #1
    e8a8:	4648      	mov	r0, r9
    e8aa:	990a      	ldr	r1, [sp, #40]	; 0x28
    e8ac:	f000 f8de 	bl	ea6c <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa6>
    e8b0:	f884 a012 	strb.w	sl, [r4, #18]
    e8b4:	7567      	strb	r7, [r4, #21]
    e8b6:	2000      	movs	r0, #0
    e8b8:	75a0      	strb	r0, [r4, #22]
    e8ba:	20ff      	movs	r0, #255	; 0xff
    e8bc:	75e0      	strb	r0, [r4, #23]
    e8be:	7ce1      	ldrb	r1, [r4, #19]
    e8c0:	0749      	lsls	r1, r1, #29
    e8c2:	d518      	bpl.n	e8f6 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb6>
    e8c4:	f104 001d 	add.w	r0, r4, #29
    e8c8:	1e41      	subs	r1, r0, #1
    e8ca:	2d02      	cmp	r5, #2
    e8cc:	d00d      	beq.n	e8ea <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xaa>
    e8ce:	2d03      	cmp	r5, #3
    e8d0:	d00b      	beq.n	e8ea <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xaa>
    e8d2:	f8d9 2008 	ldr.w	r2, [r9, #8]
    e8d6:	6813      	ldr	r3, [r2, #0]
    e8d8:	6003      	str	r3, [r0, #0]
    e8da:	8892      	ldrh	r2, [r2, #4]
    e8dc:	e008      	b.n	e8f0 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb0>
    e8de:	7ce0      	ldrb	r0, [r4, #19]
    e8e0:	e7dc      	b.n	e89c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    e8e2:	7ce0      	ldrb	r0, [r4, #19]
    e8e4:	f040 0002 	orr.w	r0, r0, #2
    e8e8:	e7d8      	b.n	e89c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    e8ea:	6832      	ldr	r2, [r6, #0]
    e8ec:	6002      	str	r2, [r0, #0]
    e8ee:	88b2      	ldrh	r2, [r6, #4]
    e8f0:	8082      	strh	r2, [r0, #4]
    e8f2:	700d      	strb	r5, [r1, #0]
    e8f4:	e000      	b.n	e8f8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb8>
    e8f6:	7720      	strb	r0, [r4, #28]
    e8f8:	207f      	movs	r0, #127	; 0x7f
    e8fa:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    e8fe:	f884 b024 	strb.w	fp, [r4, #36]	; 0x24
    e902:	f7f2 fca9 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    e906:	4605      	mov	r5, r0
    e908:	f7f2 fcac 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e90c:	2201      	movs	r2, #1
    e90e:	4629      	mov	r1, r5
    e910:	f000 f8d0 	bl	eab4 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xee>
    e914:	b128      	cbz	r0, e922 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe2>
    e916:	4620      	mov	r0, r4
    e918:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    e91c:	2100      	movs	r1, #0
    e91e:	f7f5 be69 	b.w	45f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5f4>
    e922:	f240 312b 	movw	r1, #811	; 0x32b
    e926:	2033      	movs	r0, #51	; 0x33
    e928:	f7f2 f89c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e92c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000e930 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>:
    e930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e934:	461e      	mov	r6, r3
    e936:	4617      	mov	r7, r2
    e938:	4689      	mov	r9, r1
    e93a:	4682      	mov	sl, r0
    e93c:	f8dd 8020 	ldr.w	r8, [sp, #32]
    e940:	f7f2 fc90 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e944:	4604      	mov	r4, r0
    e946:	f7fe fd2f 	bl	d3a8 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    e94a:	2801      	cmp	r0, #1
    e94c:	d039      	beq.n	e9c2 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x92>
    e94e:	4620      	mov	r0, r4
    e950:	f000 f8a7 	bl	eaa2 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    e954:	4604      	mov	r4, r0
    e956:	221c      	movs	r2, #28
    e958:	2100      	movs	r1, #0
    e95a:	3009      	adds	r0, #9
    e95c:	f001 ff01 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e960:	2501      	movs	r5, #1
    e962:	f104 030a 	add.w	r3, r4, #10
    e966:	7265      	strb	r5, [r4, #9]
    e968:	1c5a      	adds	r2, r3, #1
    e96a:	4649      	mov	r1, r9
    e96c:	4650      	mov	r0, sl
    e96e:	f000 f87d 	bl	ea6c <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa6>
    e972:	f884 8012 	strb.w	r8, [r4, #18]
    e976:	7ce0      	ldrb	r0, [r4, #19]
    e978:	21ff      	movs	r1, #255	; 0xff
    e97a:	f367 0000 	bfi	r0, r7, #0, #1
    e97e:	f040 001a 	orr.w	r0, r0, #26
    e982:	74e0      	strb	r0, [r4, #19]
    e984:	7565      	strb	r5, [r4, #21]
    e986:	2000      	movs	r0, #0
    e988:	75a0      	strb	r0, [r4, #22]
    e98a:	75e1      	strb	r1, [r4, #23]
    e98c:	7721      	strb	r1, [r4, #28]
    e98e:	207f      	movs	r0, #127	; 0x7f
    e990:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    e994:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    e998:	f7f2 fc5e 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    e99c:	4605      	mov	r5, r0
    e99e:	f7f2 fc61 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e9a2:	2201      	movs	r2, #1
    e9a4:	4629      	mov	r1, r5
    e9a6:	f000 f885 	bl	eab4 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xee>
    e9aa:	b128      	cbz	r0, e9b8 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x88>
    e9ac:	4620      	mov	r0, r4
    e9ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e9b2:	2100      	movs	r1, #0
    e9b4:	f7f5 be1e 	b.w	45f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5f4>
    e9b8:	f44f 7156 	mov.w	r1, #856	; 0x358
    e9bc:	2033      	movs	r0, #51	; 0x33
    e9be:	f7f2 f851 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e9c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e9c6 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>:
    e9c6:	f7ff bf23 	b.w	e810 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    e9ca:	b5f0      	push	{r4, r5, r6, r7, lr}
    e9cc:	b08b      	sub	sp, #44	; 0x2c
    e9ce:	460f      	mov	r7, r1
    e9d0:	f7f2 fc48 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e9d4:	4604      	mov	r4, r0
    e9d6:	f7fe fd38 	bl	d44a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    e9da:	0005      	movs	r5, r0
    e9dc:	d00c      	beq.n	e9f8 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x32>
    e9de:	4620      	mov	r0, r4
    e9e0:	4629      	mov	r1, r5
    e9e2:	aa0a      	add	r2, sp, #40	; 0x28
    e9e4:	f7fe fd4f 	bl	d486 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    e9e8:	4606      	mov	r6, r0
    e9ea:	f7f2 fc35 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    e9ee:	42b0      	cmp	r0, r6
    e9f0:	d005      	beq.n	e9fe <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x38>
    e9f2:	f240 11ab 	movw	r1, #427	; 0x1ab
    e9f6:	e036      	b.n	ea66 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa0>
    e9f8:	f240 11a1 	movw	r1, #417	; 0x1a1
    e9fc:	e033      	b.n	ea66 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa0>
    e9fe:	4669      	mov	r1, sp
    ea00:	980a      	ldr	r0, [sp, #40]	; 0x28
    ea02:	f000 f859 	bl	eab8 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    ea06:	1d3e      	adds	r6, r7, #4
    ea08:	4628      	mov	r0, r5
    ea0a:	f7fe fccb 	bl	d3a4 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    ea0e:	4605      	mov	r5, r0
    ea10:	f100 0109 	add.w	r1, r0, #9
    ea14:	221c      	movs	r2, #28
    ea16:	4630      	mov	r0, r6
    ea18:	f001 fe29 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ea1c:	7ce8      	ldrb	r0, [r5, #19]
    ea1e:	f04f 0500 	mov.w	r5, #0
    ea22:	06c1      	lsls	r1, r0, #27
    ea24:	d50d      	bpl.n	ea42 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7c>
    ea26:	0740      	lsls	r0, r0, #29
    ea28:	d40a      	bmi.n	ea40 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7a>
    ea2a:	f89d 2010 	ldrb.w	r2, [sp, #16]
    ea2e:	f106 001c 	add.w	r0, r6, #28
    ea32:	9903      	ldr	r1, [sp, #12]
    ea34:	f001 fe1b 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ea38:	f89d 0010 	ldrb.w	r0, [sp, #16]
    ea3c:	7230      	strb	r0, [r6, #8]
    ea3e:	e000      	b.n	ea42 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7c>
    ea40:	7235      	strb	r5, [r6, #8]
    ea42:	707d      	strb	r5, [r7, #1]
    ea44:	2005      	movs	r0, #5
    ea46:	7038      	strb	r0, [r7, #0]
    ea48:	4638      	mov	r0, r7
    ea4a:	f7f5 fd63 	bl	4514 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x514>
    ea4e:	4620      	mov	r0, r4
    ea50:	f7fe fcc3 	bl	d3da <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    ea54:	b128      	cbz	r0, ea62 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x9c>
    ea56:	4620      	mov	r0, r4
    ea58:	2100      	movs	r1, #0
    ea5a:	f7fe fdb2 	bl	d5c2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    ea5e:	b00b      	add	sp, #44	; 0x2c
    ea60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea62:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    ea66:	2033      	movs	r0, #51	; 0x33
    ea68:	f7f1 fffc 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea6c:	b510      	push	{r4, lr}
    ea6e:	461c      	mov	r4, r3
    ea70:	460b      	mov	r3, r1
    ea72:	29ff      	cmp	r1, #255	; 0xff
    ea74:	d00d      	beq.n	ea92 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xcc>
    ea76:	4621      	mov	r1, r4
    ea78:	4618      	mov	r0, r3
    ea7a:	f7f3 fbcf 	bl	221c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    ea7e:	b120      	cbz	r0, ea8a <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xc4>
    ea80:	7820      	ldrb	r0, [r4, #0]
    ea82:	f040 0002 	orr.w	r0, r0, #2
    ea86:	7020      	strb	r0, [r4, #0]
    ea88:	bd10      	pop	{r4, pc}
    ea8a:	21dc      	movs	r1, #220	; 0xdc
    ea8c:	2033      	movs	r0, #51	; 0x33
    ea8e:	f7f1 ffe9 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea92:	7c41      	ldrb	r1, [r0, #17]
    ea94:	7021      	strb	r1, [r4, #0]
    ea96:	6840      	ldr	r0, [r0, #4]
    ea98:	6801      	ldr	r1, [r0, #0]
    ea9a:	6011      	str	r1, [r2, #0]
    ea9c:	8880      	ldrh	r0, [r0, #4]
    ea9e:	8090      	strh	r0, [r2, #4]
    eaa0:	bd10      	pop	{r4, pc}
    eaa2:	b51c      	push	{r2, r3, r4, lr}
    eaa4:	4669      	mov	r1, sp
    eaa6:	aa01      	add	r2, sp, #4
    eaa8:	f7fe fcdf 	bl	d46a <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    eaac:	9800      	ldr	r0, [sp, #0]
    eaae:	f7fe fc79 	bl	d3a4 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    eab2:	bd1c      	pop	{r2, r3, r4, pc}
    eab4:	f7fe bc2d 	b.w	d312 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>

0000eab8 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>:
    eab8:	7802      	ldrb	r2, [r0, #0]
    eaba:	f002 020f 	and.w	r2, r2, #15
    eabe:	f7f5 bda1 	b.w	4604 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>

0000eac2 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>:
    eac2:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    eac4:	255e      	movs	r5, #94	; 0x5e
    eac6:	4668      	mov	r0, sp
    eac8:	f7fd fe00 	bl	c6cc <mpsl_fem_pa_is_configured>
    eacc:	f89d 0000 	ldrb.w	r0, [sp]
    ead0:	b108      	cbz	r0, ead6 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x14>
    ead2:	2401      	movs	r4, #1
    ead4:	e000      	b.n	ead8 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x16>
    ead6:	2400      	movs	r4, #0
    ead8:	a801      	add	r0, sp, #4
    eada:	f7fd fddf 	bl	c69c <mpsl_fem_lna_is_configured>
    eade:	f89d 0004 	ldrb.w	r0, [sp, #4]
    eae2:	b100      	cbz	r0, eae6 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x24>
    eae4:	2001      	movs	r0, #1
    eae6:	4304      	orrs	r4, r0
    eae8:	d000      	beq.n	eaec <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x2a>
    eaea:	2568      	movs	r5, #104	; 0x68
    eaec:	4628      	mov	r0, r5
    eaee:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000eaf0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>:
    eaf0:	b510      	push	{r4, lr}
    eaf2:	f7ff ffe6 	bl	eac2 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    eaf6:	3069      	adds	r0, #105	; 0x69
    eaf8:	b280      	uxth	r0, r0
    eafa:	bd10      	pop	{r4, pc}
    eafc:	6980      	ldr	r0, [r0, #24]
    eafe:	2800      	cmp	r0, #0
    eb00:	d000      	beq.n	eb04 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x14>
    eb02:	2001      	movs	r0, #1
    eb04:	4770      	bx	lr
    eb06:	b510      	push	{r4, lr}
    eb08:	2802      	cmp	r0, #2
    eb0a:	d006      	beq.n	eb1a <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x2a>
    eb0c:	2108      	movs	r1, #8
    eb0e:	2801      	cmp	r0, #1
    eb10:	d005      	beq.n	eb1e <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x2e>
    eb12:	21f5      	movs	r1, #245	; 0xf5
    eb14:	2005      	movs	r0, #5
    eb16:	f7f1 ffa5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb1a:	2104      	movs	r1, #4
    eb1c:	e7f7      	b.n	eb0e <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x1e>
    eb1e:	202a      	movs	r0, #42	; 0x2a
    eb20:	2228      	movs	r2, #40	; 0x28
    eb22:	fb11 2000 	smlabb	r0, r1, r0, r2
    eb26:	b280      	uxth	r0, r0
    eb28:	bd10      	pop	{r4, pc}
    eb2a:	9800      	ldr	r0, [sp, #0]
    eb2c:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    eb30:	1810      	adds	r0, r2, r0
    eb32:	f143 0300 	adc.w	r3, r3, #0
    eb36:	1840      	adds	r0, r0, r1
    eb38:	f143 0100 	adc.w	r1, r3, #0
    eb3c:	3833      	subs	r0, #51	; 0x33
    eb3e:	f161 0100 	sbc.w	r1, r1, #0
    eb42:	f240 42e2 	movw	r2, #1250	; 0x4e2
    eb46:	1880      	adds	r0, r0, r2
    eb48:	f141 0100 	adc.w	r1, r1, #0
    eb4c:	4770      	bx	lr
    eb4e:	b510      	push	{r4, lr}
    eb50:	f7ff ffb7 	bl	eac2 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    eb54:	f500 7081 	add.w	r0, r0, #258	; 0x102
    eb58:	b280      	uxth	r0, r0
    eb5a:	bd10      	pop	{r4, pc}
    eb5c:	f7fb bb5c 	b.w	a218 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    eb60:	1a10      	subs	r0, r2, r0
    eb62:	4770      	bx	lr

0000eb64 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>:
    eb64:	b510      	push	{r4, lr}
    eb66:	2905      	cmp	r1, #5
    eb68:	d22d      	bcs.n	ebc6 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x62>
    eb6a:	e8df f001 	tbb	[pc, r1]
    eb6e:	0a05      	.short	0x0a05
    eb70:	00280e03 	.word	0x00280e03
    eb74:	2100      	movs	r1, #0
    eb76:	e000      	b.n	eb7a <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x16>
    eb78:	2101      	movs	r1, #1
    eb7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eb7e:	f7f6 bbbd 	b.w	52fc <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x90>
    eb82:	2103      	movs	r1, #3
    eb84:	f880 1248 	strb.w	r1, [r0, #584]	; 0x248
    eb88:	bd10      	pop	{r4, pc}
    eb8a:	4604      	mov	r4, r0
    eb8c:	6900      	ldr	r0, [r0, #16]
    eb8e:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    eb92:	f8d4 026c 	ldr.w	r0, [r4, #620]	; 0x26c
    eb96:	6220      	str	r0, [r4, #32]
    eb98:	f8b4 0268 	ldrh.w	r0, [r4, #616]	; 0x268
    eb9c:	84a0      	strh	r0, [r4, #36]	; 0x24
    eb9e:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
    eba2:	6120      	str	r0, [r4, #16]
    eba4:	f8b4 0274 	ldrh.w	r0, [r4, #628]	; 0x274
    eba8:	8320      	strh	r0, [r4, #24]
    ebaa:	f8b4 0276 	ldrh.w	r0, [r4, #630]	; 0x276
    ebae:	8360      	strh	r0, [r4, #26]
    ebb0:	4620      	mov	r0, r4
    ebb2:	f000 f817 	bl	ebe4 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa>
    ebb6:	2002      	movs	r0, #2
    ebb8:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
    ebbc:	bd10      	pop	{r4, pc}
    ebbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ebc2:	f000 b80f 	b.w	ebe4 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa>
    ebc6:	f240 21fd 	movw	r1, #765	; 0x2fd
    ebca:	2035      	movs	r0, #53	; 0x35
    ebcc:	f7f1 ff4a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ebd0 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>:
    ebd0:	b510      	push	{r4, lr}
    ebd2:	f7f6 fb63 	bl	529c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x30>
    ebd6:	2000      	movs	r0, #0
    ebd8:	bd10      	pop	{r4, pc}

0000ebda <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY>:
    ebda:	f8c0 1230 	str.w	r1, [r0, #560]	; 0x230
    ebde:	4770      	bx	lr
    ebe0:	2000      	movs	r0, #0
    ebe2:	4770      	bx	lr
    ebe4:	b570      	push	{r4, r5, r6, lr}
    ebe6:	4604      	mov	r4, r0
    ebe8:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    ebec:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    ebf0:	f7f6 fba0 	bl	5334 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xc8>
    ebf4:	4605      	mov	r5, r0
    ebf6:	f7ff ff7b 	bl	eaf0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    ebfa:	4601      	mov	r1, r0
    ebfc:	462a      	mov	r2, r5
    ebfe:	4620      	mov	r0, r4
    ec00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ec04:	f7ff bb26 	b.w	e254 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    ec08:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    ec0c:	469a      	mov	sl, r3
    ec0e:	4691      	mov	r9, r2
    ec10:	460c      	mov	r4, r1
    ec12:	4606      	mov	r6, r0
    ec14:	2500      	movs	r5, #0
    ec16:	f7ff ff54 	bl	eac2 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    ec1a:	4680      	mov	r8, r0
    ec1c:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
    ec20:	280d      	cmp	r0, #13
    ec22:	d017      	beq.n	ec54 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x7a>
    ec24:	280e      	cmp	r0, #14
    ec26:	d015      	beq.n	ec54 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x7a>
    ec28:	2000      	movs	r0, #0
    ec2a:	4683      	mov	fp, r0
    ec2c:	f1ba 0f00 	cmp.w	sl, #0
    ec30:	d003      	beq.n	ec3a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x60>
    ec32:	2101      	movs	r1, #1
    ec34:	4620      	mov	r0, r4
    ec36:	f7f6 fd49 	bl	56cc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    ec3a:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    ec3e:	2701      	movs	r7, #1
    ec40:	b150      	cbz	r0, ec58 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x7e>
    ec42:	2801      	cmp	r0, #1
    ec44:	d01a      	beq.n	ec7c <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa2>
    ec46:	2802      	cmp	r0, #2
    ec48:	d012      	beq.n	ec70 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x96>
    ec4a:	2803      	cmp	r0, #3
    ec4c:	d016      	beq.n	ec7c <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa2>
    ec4e:	f240 2136 	movw	r1, #566	; 0x236
    ec52:	e08e      	b.n	ed72 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x198>
    ec54:	2001      	movs	r0, #1
    ec56:	e7e8      	b.n	ec2a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x50>
    ec58:	f1b9 0f00 	cmp.w	r9, #0
    ec5c:	d005      	beq.n	ec6a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x90>
    ec5e:	f884 7248 	strb.w	r7, [r4, #584]	; 0x248
    ec62:	4620      	mov	r0, r4
    ec64:	f7ff ffbe 	bl	ebe4 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa>
    ec68:	e009      	b.n	ec7e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa4>
    ec6a:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
    ec6e:	e080      	b.n	ed72 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x198>
    ec70:	2003      	movs	r0, #3
    ec72:	f8d4 5250 	ldr.w	r5, [r4, #592]	; 0x250
    ec76:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
    ec7a:	e000      	b.n	ec7e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa4>
    ec7c:	6925      	ldr	r5, [r4, #16]
    ec7e:	e9d4 108a 	ldrd	r1, r0, [r4, #552]	; 0x228
    ec82:	f04f 0900 	mov.w	r9, #0
    ec86:	1949      	adds	r1, r1, r5
    ec88:	eb40 0009 	adc.w	r0, r0, r9
    ec8c:	e9c4 108a 	strd	r1, r0, [r4, #552]	; 0x228
    ec90:	e9c6 1004 	strd	r1, r0, [r6, #16]
    ec94:	f886 9000 	strb.w	r9, [r6]
    ec98:	f8a6 8008 	strh.w	r8, [r6, #8]
    ec9c:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
    eca0:	280d      	cmp	r0, #13
    eca2:	d02b      	beq.n	ecfc <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x122>
    eca4:	280b      	cmp	r0, #11
    eca6:	d029      	beq.n	ecfc <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x122>
    eca8:	2825      	cmp	r0, #37	; 0x25
    ecaa:	d027      	beq.n	ecfc <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x122>
    ecac:	2000      	movs	r0, #0
    ecae:	4680      	mov	r8, r0
    ecb0:	4620      	mov	r0, r4
    ecb2:	f7f6 fbd5 	bl	5460 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    ecb6:	4601      	mov	r1, r0
    ecb8:	f1a8 0001 	sub.w	r0, r8, #1
    ecbc:	4201      	tst	r1, r0
    ecbe:	d102      	bne.n	ecc6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    ecc0:	f886 900a 	strb.w	r9, [r6, #10]
    ecc4:	e005      	b.n	ecd2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xf8>
    ecc6:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    ecca:	2801      	cmp	r0, #1
    eccc:	d018      	beq.n	ed00 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x126>
    ecce:	2002      	movs	r0, #2
    ecd0:	72b0      	strb	r0, [r6, #10]
    ecd2:	72f7      	strb	r7, [r6, #11]
    ecd4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    ecd8:	f7ff faba 	bl	e250 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    ecdc:	6070      	str	r0, [r6, #4]
    ecde:	ea3a 000b 	bics.w	r0, sl, fp
    ece2:	d042      	beq.n	ed6a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x190>
    ece4:	4629      	mov	r1, r5
    ece6:	4630      	mov	r0, r6
    ece8:	f7ff f814 	bl	dd14 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    ecec:	b287      	uxth	r7, r0
    ecee:	4620      	mov	r0, r4
    ecf0:	f7f6 fbb6 	bl	5460 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    ecf4:	f1b8 0f00 	cmp.w	r8, #0
    ecf8:	d004      	beq.n	ed04 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x12a>
    ecfa:	e018      	b.n	ed2e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x154>
    ecfc:	2001      	movs	r0, #1
    ecfe:	e7d6      	b.n	ecae <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xd4>
    ed00:	72b7      	strb	r7, [r6, #10]
    ed02:	e7e6      	b.n	ecd2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xf8>
    ed04:	42b8      	cmp	r0, r7
    ed06:	d812      	bhi.n	ed2e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x154>
    ed08:	f886 900a 	strb.w	r9, [r6, #10]
    ed0c:	e9d4 328a 	ldrd	r3, r2, [r4, #552]	; 0x228
    ed10:	4607      	mov	r7, r0
    ed12:	fb05 f107 	mul.w	r1, r5, r7
    ed16:	1859      	adds	r1, r3, r1
    ed18:	eb42 0209 	adc.w	r2, r2, r9
    ed1c:	e9c6 1204 	strd	r1, r2, [r6, #16]
    ed20:	b32d      	cbz	r5, ed6e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x194>
    ed22:	4629      	mov	r1, r5
    ed24:	4630      	mov	r0, r6
    ed26:	f7fe fff5 	bl	dd14 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    ed2a:	4438      	add	r0, r7
    ed2c:	b287      	uxth	r7, r0
    ed2e:	4639      	mov	r1, r7
    ed30:	4620      	mov	r0, r4
    ed32:	f7f6 fccb 	bl	56cc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    ed36:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    ed3a:	e9c4 018a 	strd	r0, r1, [r4, #552]	; 0x228
    ed3e:	6f20      	ldr	r0, [r4, #112]	; 0x70
    ed40:	2800      	cmp	r0, #0
    ed42:	d012      	beq.n	ed6a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x190>
    ed44:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    ed48:	f8b4 20d2 	ldrh.w	r2, [r4, #210]	; 0xd2
    ed4c:	1a80      	subs	r0, r0, r2
    ed4e:	b201      	sxth	r1, r0
    ed50:	2900      	cmp	r1, #0
    ed52:	dd0a      	ble.n	ed6a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x190>
    ed54:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    ed58:	4401      	add	r1, r0
    ed5a:	1e49      	subs	r1, r1, #1
    ed5c:	fb91 f1f0 	sdiv	r1, r1, r0
    ed60:	b289      	uxth	r1, r1
    ed62:	fb01 2000 	mla	r0, r1, r0, r2
    ed66:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
    ed6a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    ed6e:	f44f 711e 	mov.w	r1, #632	; 0x278
    ed72:	2035      	movs	r0, #53	; 0x35
    ed74:	f7f1 fe76 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed78:	b510      	push	{r4, lr}
    ed7a:	4604      	mov	r4, r0
    ed7c:	2000      	movs	r0, #0
    ed7e:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
    ed82:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    ed86:	f7fb fe9b 	bl	aac0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ed8a:	b140      	cbz	r0, ed9e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1c4>
    ed8c:	2020      	movs	r0, #32
    ed8e:	f884 0249 	strb.w	r0, [r4, #585]	; 0x249
    ed92:	f504 700a 	add.w	r0, r4, #552	; 0x228
    ed96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed9a:	f7f8 b843 	b.w	6e24 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    ed9e:	f44f 71c4 	mov.w	r1, #392	; 0x188
    eda2:	2035      	movs	r0, #53	; 0x35
    eda4:	f7f1 fe5e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eda8:	b510      	push	{r4, lr}
    edaa:	4613      	mov	r3, r2
    edac:	460a      	mov	r2, r1
    edae:	b086      	sub	sp, #24
    edb0:	4604      	mov	r4, r0
    edb2:	4601      	mov	r1, r0
    edb4:	4668      	mov	r0, sp
    edb6:	f7ff ff27 	bl	ec08 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x2e>
    edba:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    edbe:	4669      	mov	r1, sp
    edc0:	f000 f809 	bl	edd6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1fc>
    edc4:	2800      	cmp	r0, #0
    edc6:	d104      	bne.n	edd2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1f8>
    edc8:	f240 21a6 	movw	r1, #678	; 0x2a6
    edcc:	2035      	movs	r0, #53	; 0x35
    edce:	f7f1 fe49 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    edd2:	b006      	add	sp, #24
    edd4:	bd10      	pop	{r4, pc}
    edd6:	f7fb ba1f 	b.w	a218 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    edda:	0000      	.short	0x0000
    eddc:	a1e0a62c 	.word	0xa1e0a62c
    ede0:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    ede4:	f001 0307 	and.w	r3, r1, #7
    ede8:	7802      	ldrb	r2, [r0, #0]
    edea:	2101      	movs	r1, #1
    edec:	4099      	lsls	r1, r3
    edee:	438a      	bics	r2, r1
    edf0:	7002      	strb	r2, [r0, #0]
    edf2:	4770      	bx	lr

0000edf4 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
    edf4:	f7f2 b990 	b.w	1118 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000edf8 <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>:
    edf8:	2000      	movs	r0, #0
    edfa:	4770      	bx	lr

0000edfc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>:
    edfc:	b510      	push	{r4, lr}
    edfe:	f7f7 f977 	bl	60f0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa24>
    ee02:	b128      	cbz	r0, ee10 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14>
    ee04:	2000      	movs	r0, #0
    ee06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee0a:	4601      	mov	r1, r0
    ee0c:	f7f7 b918 	b.w	6040 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x974>
    ee10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee14:	f7f2 bd86 	b.w	1924 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>
    ee18:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    ee1c:	28fe      	cmp	r0, #254	; 0xfe
    ee1e:	d001      	beq.n	ee24 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x28>
    ee20:	2001      	movs	r0, #1
    ee22:	4770      	bx	lr
    ee24:	2000      	movs	r0, #0
    ee26:	4770      	bx	lr
    ee28:	b510      	push	{r4, lr}
    ee2a:	2801      	cmp	r0, #1
    ee2c:	d006      	beq.n	ee3c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    ee2e:	2802      	cmp	r0, #2
    ee30:	d004      	beq.n	ee3c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    ee32:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    ee36:	2006      	movs	r0, #6
    ee38:	f7f1 fe14 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee3c:	bd10      	pop	{r4, pc}
    ee3e:	2801      	cmp	r0, #1
    ee40:	d002      	beq.n	ee48 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4c>
    ee42:	2802      	cmp	r0, #2
    ee44:	d105      	bne.n	ee52 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    ee46:	e002      	b.n	ee4e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x52>
    ee48:	2901      	cmp	r1, #1
    ee4a:	d004      	beq.n	ee56 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    ee4c:	e001      	b.n	ee52 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    ee4e:	2902      	cmp	r1, #2
    ee50:	d001      	beq.n	ee56 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    ee52:	2000      	movs	r0, #0
    ee54:	4770      	bx	lr
    ee56:	2001      	movs	r0, #1
    ee58:	4770      	bx	lr
    ee5a:	e9d0 1232 	ldrd	r1, r2, [r0, #200]	; 0xc8
    ee5e:	428a      	cmp	r2, r1
    ee60:	d301      	bcc.n	ee66 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6a>
    ee62:	1a51      	subs	r1, r2, r1
    ee64:	e000      	b.n	ee68 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6c>
    ee66:	2100      	movs	r1, #0
    ee68:	8b02      	ldrh	r2, [r0, #24]
    ee6a:	1d52      	adds	r2, r2, #5
    ee6c:	428a      	cmp	r2, r1
    ee6e:	d302      	bcc.n	ee76 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7a>
    ee70:	2101      	movs	r1, #1
    ee72:	f880 10d4 	strb.w	r1, [r0, #212]	; 0xd4
    ee76:	4770      	bx	lr
    ee78:	b510      	push	{r4, lr}
    ee7a:	4604      	mov	r4, r0
    ee7c:	6840      	ldr	r0, [r0, #4]
    ee7e:	2300      	movs	r3, #0
    ee80:	4619      	mov	r1, r3
    ee82:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    ee86:	3088      	adds	r0, #136	; 0x88
    ee88:	f7fe fe38 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ee8c:	b168      	cbz	r0, eeaa <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xae>
    ee8e:	6861      	ldr	r1, [r4, #4]
    ee90:	2000      	movs	r0, #0
    ee92:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    ee96:	6861      	ldr	r1, [r4, #4]
    ee98:	2001      	movs	r0, #1
    ee9a:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    ee9e:	6861      	ldr	r1, [r4, #4]
    eea0:	2002      	movs	r0, #2
    eea2:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    eea6:	2000      	movs	r0, #0
    eea8:	bd10      	pop	{r4, pc}
    eeaa:	2001      	movs	r0, #1
    eeac:	bd10      	pop	{r4, pc}
    eeae:	b510      	push	{r4, lr}
    eeb0:	4604      	mov	r4, r0
    eeb2:	6840      	ldr	r0, [r0, #4]
    eeb4:	2300      	movs	r3, #0
    eeb6:	2109      	movs	r1, #9
    eeb8:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    eebc:	3088      	adds	r0, #136	; 0x88
    eebe:	f7fe fe1d 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    eec2:	2800      	cmp	r0, #0
    eec4:	d009      	beq.n	eeda <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xde>
    eec6:	6861      	ldr	r1, [r4, #4]
    eec8:	2000      	movs	r0, #0
    eeca:	f881 00d4 	strb.w	r0, [r1, #212]	; 0xd4
    eece:	6861      	ldr	r1, [r4, #4]
    eed0:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    eed4:	6861      	ldr	r1, [r4, #4]
    eed6:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    eeda:	bd10      	pop	{r4, pc}
    eedc:	6841      	ldr	r1, [r0, #4]
    eede:	f891 20a5 	ldrb.w	r2, [r1, #165]	; 0xa5
    eee2:	2a10      	cmp	r2, #16
    eee4:	d001      	beq.n	eeea <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xee>
    eee6:	2002      	movs	r0, #2
    eee8:	4770      	bx	lr
    eeea:	2200      	movs	r2, #0
    eeec:	f881 20aa 	strb.w	r2, [r1, #170]	; 0xaa
    eef0:	6840      	ldr	r0, [r0, #4]
    eef2:	2113      	movs	r1, #19
    eef4:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    eef8:	4610      	mov	r0, r2
    eefa:	4770      	bx	lr
    eefc:	b510      	push	{r4, lr}
    eefe:	4604      	mov	r4, r0
    ef00:	6840      	ldr	r0, [r0, #4]
    ef02:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    ef06:	2917      	cmp	r1, #23
    ef08:	d001      	beq.n	ef0e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x112>
    ef0a:	2002      	movs	r0, #2
    ef0c:	bd10      	pop	{r4, pc}
    ef0e:	f500 7388 	add.w	r3, r0, #272	; 0x110
    ef12:	f200 2193 	addw	r1, r0, #659	; 0x293
    ef16:	2200      	movs	r2, #0
    ef18:	f200 2083 	addw	r0, r0, #643	; 0x283
    ef1c:	f7fe fd89 	bl	da32 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    ef20:	6862      	ldr	r2, [r4, #4]
    ef22:	2000      	movs	r0, #0
    ef24:	e9c2 0040 	strd	r0, r0, [r2, #256]	; 0x100
    ef28:	6861      	ldr	r1, [r4, #4]
    ef2a:	2001      	movs	r0, #1
    ef2c:	f881 00aa 	strb.w	r0, [r1, #170]	; 0xaa
    ef30:	6861      	ldr	r1, [r4, #4]
    ef32:	2019      	movs	r0, #25
    ef34:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    ef38:	2000      	movs	r0, #0
    ef3a:	bd10      	pop	{r4, pc}
    ef3c:	b510      	push	{r4, lr}
    ef3e:	4604      	mov	r4, r0
    ef40:	6840      	ldr	r0, [r0, #4]
    ef42:	2300      	movs	r3, #0
    ef44:	4619      	mov	r1, r3
    ef46:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    ef4a:	3088      	adds	r0, #136	; 0x88
    ef4c:	f7fe fdd6 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ef50:	b120      	cbz	r0, ef5c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x160>
    ef52:	6861      	ldr	r1, [r4, #4]
    ef54:	200b      	movs	r0, #11
    ef56:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    ef5a:	bd10      	pop	{r4, pc}
    ef5c:	f240 7156 	movw	r1, #1878	; 0x756
    ef60:	2036      	movs	r0, #54	; 0x36
    ef62:	f7f1 fd7f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef66:	b510      	push	{r4, lr}
    ef68:	4604      	mov	r4, r0
    ef6a:	6840      	ldr	r0, [r0, #4]
    ef6c:	2300      	movs	r3, #0
    ef6e:	4619      	mov	r1, r3
    ef70:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    ef74:	3088      	adds	r0, #136	; 0x88
    ef76:	f7fe fdc1 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ef7a:	b120      	cbz	r0, ef86 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x18a>
    ef7c:	6861      	ldr	r1, [r4, #4]
    ef7e:	200d      	movs	r0, #13
    ef80:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    ef84:	bd10      	pop	{r4, pc}
    ef86:	f240 715c 	movw	r1, #1884	; 0x75c
    ef8a:	2036      	movs	r0, #54	; 0x36
    ef8c:	f7f1 fd6a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef90:	b510      	push	{r4, lr}
    ef92:	4604      	mov	r4, r0
    ef94:	6840      	ldr	r0, [r0, #4]
    ef96:	2300      	movs	r3, #0
    ef98:	4619      	mov	r1, r3
    ef9a:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    ef9e:	3088      	adds	r0, #136	; 0x88
    efa0:	f7fe fdac 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    efa4:	b918      	cbnz	r0, efae <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1b2>
    efa6:	6860      	ldr	r0, [r4, #4]
    efa8:	f890 00e6 	ldrb.w	r0, [r0, #230]	; 0xe6
    efac:	b140      	cbz	r0, efc0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c4>
    efae:	6861      	ldr	r1, [r4, #4]
    efb0:	2001      	movs	r0, #1
    efb2:	f881 00e5 	strb.w	r0, [r1, #229]	; 0xe5
    efb6:	6861      	ldr	r1, [r4, #4]
    efb8:	2014      	movs	r0, #20
    efba:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    efbe:	bd10      	pop	{r4, pc}
    efc0:	f240 7171 	movw	r1, #1905	; 0x771
    efc4:	2036      	movs	r0, #54	; 0x36
    efc6:	f7f1 fd4d 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    efca:	f7ff bb03 	b.w	e5d4 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>
    efce:	b510      	push	{r4, lr}
    efd0:	4604      	mov	r4, r0
    efd2:	6840      	ldr	r0, [r0, #4]
    efd4:	2300      	movs	r3, #0
    efd6:	4619      	mov	r1, r3
    efd8:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    efdc:	3088      	adds	r0, #136	; 0x88
    efde:	f7fe fd8d 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    efe2:	b120      	cbz	r0, efee <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1f2>
    efe4:	6861      	ldr	r1, [r4, #4]
    efe6:	201d      	movs	r0, #29
    efe8:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    efec:	bd10      	pop	{r4, pc}
    efee:	f240 7192 	movw	r1, #1938	; 0x792
    eff2:	2036      	movs	r0, #54	; 0x36
    eff4:	f7f1 fd36 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eff8:	b510      	push	{r4, lr}
    effa:	4604      	mov	r4, r0
    effc:	6840      	ldr	r0, [r0, #4]
    effe:	2300      	movs	r3, #0
    f000:	4619      	mov	r1, r3
    f002:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    f006:	3088      	adds	r0, #136	; 0x88
    f008:	f7fe fd78 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f00c:	b120      	cbz	r0, f018 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x21c>
    f00e:	6861      	ldr	r1, [r4, #4]
    f010:	2000      	movs	r0, #0
    f012:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    f016:	bd10      	pop	{r4, pc}
    f018:	f240 7199 	movw	r1, #1945	; 0x799
    f01c:	2036      	movs	r0, #54	; 0x36
    f01e:	f7f1 fd21 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f022:	f7ff bae9 	b.w	e5f8 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>
    f026:	b510      	push	{r4, lr}
    f028:	4604      	mov	r4, r0
    f02a:	6840      	ldr	r0, [r0, #4]
    f02c:	2300      	movs	r3, #0
    f02e:	4619      	mov	r1, r3
    f030:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f034:	3088      	adds	r0, #136	; 0x88
    f036:	f7fe fd61 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f03a:	b120      	cbz	r0, f046 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x24a>
    f03c:	6861      	ldr	r1, [r4, #4]
    f03e:	2005      	movs	r0, #5
    f040:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f044:	bd10      	pop	{r4, pc}
    f046:	f240 7185 	movw	r1, #1925	; 0x785
    f04a:	2036      	movs	r0, #54	; 0x36
    f04c:	f7f1 fd0a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f050:	6840      	ldr	r0, [r0, #4]
    f052:	2100      	movs	r1, #0
    f054:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    f058:	4770      	bx	lr
    f05a:	b510      	push	{r4, lr}
    f05c:	4604      	mov	r4, r0
    f05e:	6840      	ldr	r0, [r0, #4]
    f060:	2300      	movs	r3, #0
    f062:	4619      	mov	r1, r3
    f064:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f068:	3088      	adds	r0, #136	; 0x88
    f06a:	f7fe fd47 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f06e:	b140      	cbz	r0, f082 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x286>
    f070:	6861      	ldr	r1, [r4, #4]
    f072:	2001      	movs	r0, #1
    f074:	f881 00e5 	strb.w	r0, [r1, #229]	; 0xe5
    f078:	6861      	ldr	r1, [r4, #4]
    f07a:	2010      	movs	r0, #16
    f07c:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f080:	bd10      	pop	{r4, pc}
    f082:	f240 7162 	movw	r1, #1890	; 0x762
    f086:	2036      	movs	r0, #54	; 0x36
    f088:	f7f1 fcec 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f08c:	b510      	push	{r4, lr}
    f08e:	6841      	ldr	r1, [r0, #4]
    f090:	f891 20a5 	ldrb.w	r2, [r1, #165]	; 0xa5
    f094:	2a13      	cmp	r2, #19
    f096:	d004      	beq.n	f0a2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2a6>
    f098:	f240 716a 	movw	r1, #1898	; 0x76a
    f09c:	2036      	movs	r0, #54	; 0x36
    f09e:	f7f1 fce1 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0a2:	2201      	movs	r2, #1
    f0a4:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    f0a8:	6840      	ldr	r0, [r0, #4]
    f0aa:	2112      	movs	r1, #18
    f0ac:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    f0b0:	bd10      	pop	{r4, pc}
    f0b2:	b510      	push	{r4, lr}
    f0b4:	4604      	mov	r4, r0
    f0b6:	6840      	ldr	r0, [r0, #4]
    f0b8:	2300      	movs	r3, #0
    f0ba:	4619      	mov	r1, r3
    f0bc:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f0c0:	3088      	adds	r0, #136	; 0x88
    f0c2:	f7fe fd1b 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f0c6:	b120      	cbz	r0, f0d2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2d6>
    f0c8:	6861      	ldr	r1, [r4, #4]
    f0ca:	2020      	movs	r0, #32
    f0cc:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f0d0:	bd10      	pop	{r4, pc}
    f0d2:	f240 71a2 	movw	r1, #1954	; 0x7a2
    f0d6:	2036      	movs	r0, #54	; 0x36
    f0d8:	f7f1 fcc4 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0dc:	b570      	push	{r4, r5, r6, lr}
    f0de:	6841      	ldr	r1, [r0, #4]
    f0e0:	4604      	mov	r4, r0
    f0e2:	f891 0262 	ldrb.w	r0, [r1, #610]	; 0x262
    f0e6:	b910      	cbnz	r0, f0ee <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2f2>
    f0e8:	f891 0263 	ldrb.w	r0, [r1, #611]	; 0x263
    f0ec:	b178      	cbz	r0, f10e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x312>
    f0ee:	2000      	movs	r0, #0
    f0f0:	f891 30a6 	ldrb.w	r3, [r1, #166]	; 0xa6
    f0f4:	2225      	movs	r2, #37	; 0x25
    f0f6:	2500      	movs	r5, #0
    f0f8:	2b22      	cmp	r3, #34	; 0x22
    f0fa:	d00a      	beq.n	f112 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x316>
    f0fc:	f891 30a5 	ldrb.w	r3, [r1, #165]	; 0xa5
    f100:	2b24      	cmp	r3, #36	; 0x24
    f102:	d01b      	beq.n	f13c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x340>
    f104:	f240 71ce 	movw	r1, #1998	; 0x7ce
    f108:	2036      	movs	r0, #54	; 0x36
    f10a:	f7f1 fcab 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f10e:	2001      	movs	r0, #1
    f110:	e7ee      	b.n	f0f0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2f4>
    f112:	b168      	cbz	r0, f130 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x334>
    f114:	f881 50a6 	strb.w	r5, [r1, #166]	; 0xa6
    f118:	6860      	ldr	r0, [r4, #4]
    f11a:	f890 0144 	ldrb.w	r0, [r0, #324]	; 0x144
    f11e:	2801      	cmp	r0, #1
    f120:	d102      	bne.n	f128 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x32c>
    f122:	2000      	movs	r0, #0
    f124:	f7f7 f9a0 	bl	6468 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    f128:	6860      	ldr	r0, [r4, #4]
    f12a:	f880 5144 	strb.w	r5, [r0, #324]	; 0x144
    f12e:	e001      	b.n	f134 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x338>
    f130:	f881 20a6 	strb.w	r2, [r1, #166]	; 0xa6
    f134:	6860      	ldr	r0, [r4, #4]
    f136:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    f13a:	bd70      	pop	{r4, r5, r6, pc}
    f13c:	b128      	cbz	r0, f14a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x34e>
    f13e:	f881 50a5 	strb.w	r5, [r1, #165]	; 0xa5
    f142:	2000      	movs	r0, #0
    f144:	f7f7 f990 	bl	6468 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    f148:	e001      	b.n	f14e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x352>
    f14a:	f881 20a5 	strb.w	r2, [r1, #165]	; 0xa5
    f14e:	6860      	ldr	r0, [r4, #4]
    f150:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    f154:	bd70      	pop	{r4, r5, r6, pc}
    f156:	6842      	ldr	r2, [r0, #4]
    f158:	2100      	movs	r1, #0
    f15a:	f892 3130 	ldrb.w	r3, [r2, #304]	; 0x130
    f15e:	b12b      	cbz	r3, f16c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x370>
    f160:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
    f164:	6840      	ldr	r0, [r0, #4]
    f166:	f880 10e0 	strb.w	r1, [r0, #224]	; 0xe0
    f16a:	4770      	bx	lr
    f16c:	f882 10a6 	strb.w	r1, [r2, #166]	; 0xa6
    f170:	6840      	ldr	r0, [r0, #4]
    f172:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    f176:	4770      	bx	lr
    f178:	b510      	push	{r4, lr}
    f17a:	6840      	ldr	r0, [r0, #4]
    f17c:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    f180:	2919      	cmp	r1, #25
    f182:	d004      	beq.n	f18e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x392>
    f184:	f240 717a 	movw	r1, #1914	; 0x77a
    f188:	2036      	movs	r0, #54	; 0x36
    f18a:	f7f1 fc6b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f18e:	211b      	movs	r1, #27
    f190:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    f194:	bd10      	pop	{r4, pc}
    f196:	b510      	push	{r4, lr}
    f198:	4604      	mov	r4, r0
    f19a:	6840      	ldr	r0, [r0, #4]
    f19c:	2300      	movs	r3, #0
    f19e:	2101      	movs	r1, #1
    f1a0:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
    f1a4:	3088      	adds	r0, #136	; 0x88
    f1a6:	f7fe fca9 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f1aa:	2800      	cmp	r0, #0
    f1ac:	d10a      	bne.n	f1c4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x3c8>
    f1ae:	6861      	ldr	r1, [r4, #4]
    f1b0:	2007      	movs	r0, #7
    f1b2:	f881 00a7 	strb.w	r0, [r1, #167]	; 0xa7
    f1b6:	6861      	ldr	r1, [r4, #4]
    f1b8:	2000      	movs	r0, #0
    f1ba:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    f1be:	6861      	ldr	r1, [r4, #4]
    f1c0:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    f1c4:	bd10      	pop	{r4, pc}
    f1c6:	b570      	push	{r4, r5, r6, lr}
    f1c8:	4604      	mov	r4, r0
    f1ca:	6840      	ldr	r0, [r0, #4]
    f1cc:	2300      	movs	r3, #0
    f1ce:	4619      	mov	r1, r3
    f1d0:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    f1d4:	3088      	adds	r0, #136	; 0x88
    f1d6:	f7fe fc91 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f1da:	2500      	movs	r5, #0
    f1dc:	b110      	cbz	r0, f1e4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x3e8>
    f1de:	6860      	ldr	r0, [r4, #4]
    f1e0:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    f1e4:	6860      	ldr	r0, [r4, #4]
    f1e6:	2300      	movs	r3, #0
    f1e8:	4619      	mov	r1, r3
    f1ea:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f1ee:	3088      	adds	r0, #136	; 0x88
    f1f0:	f7fe fc84 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f1f4:	2800      	cmp	r0, #0
    f1f6:	d002      	beq.n	f1fe <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x402>
    f1f8:	6860      	ldr	r0, [r4, #4]
    f1fa:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    f1fe:	bd70      	pop	{r4, r5, r6, pc}
    f200:	f7ff ba46 	b.w	e690 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>
    f204:	b510      	push	{r4, lr}
    f206:	f890 10ab 	ldrb.w	r1, [r0, #171]	; 0xab
    f20a:	b941      	cbnz	r1, f21e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x422>
    f20c:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f210:	2300      	movs	r3, #0
    f212:	2106      	movs	r1, #6
    f214:	3088      	adds	r0, #136	; 0x88
    f216:	f7fe fc71 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f21a:	2800      	cmp	r0, #0
    f21c:	d000      	beq.n	f220 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x424>
    f21e:	2001      	movs	r0, #1
    f220:	bd10      	pop	{r4, pc}

0000f222 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>:
    f222:	b510      	push	{r4, lr}
    f224:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    f228:	1ac3      	subs	r3, r0, r3
    f22a:	eb61 0104 	sbc.w	r1, r1, r4
    f22e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    f232:	17e0      	asrs	r0, r4, #31
    f234:	1ae4      	subs	r4, r4, r3
    f236:	4188      	sbcs	r0, r1
    f238:	da05      	bge.n	f246 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x24>
    f23a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    f23e:	1a18      	subs	r0, r3, r0
    f240:	f171 0000 	sbcs.w	r0, r1, #0
    f244:	db03      	blt.n	f24e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x2c>
    f246:	21b0      	movs	r1, #176	; 0xb0
    f248:	2037      	movs	r0, #55	; 0x37
    f24a:	f7f1 fc0b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f24e:	2900      	cmp	r1, #0
    f250:	da00      	bge.n	f254 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x32>
    f252:	425b      	negs	r3, r3
    f254:	fbb3 f0f2 	udiv	r0, r3, r2
    f258:	fb02 3010 	mls	r0, r2, r0, r3
    f25c:	2900      	cmp	r1, #0
    f25e:	da02      	bge.n	f266 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x44>
    f260:	2800      	cmp	r0, #0
    f262:	d000      	beq.n	f266 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x44>
    f264:	1a10      	subs	r0, r2, r0
    f266:	bd10      	pop	{r4, pc}
    f268:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f26c:	f001 0107 	and.w	r1, r1, #7
    f270:	7800      	ldrb	r0, [r0, #0]
    f272:	40c8      	lsrs	r0, r1
    f274:	f000 0001 	and.w	r0, r0, #1
    f278:	4770      	bx	lr

0000f27a <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>:
    f27a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f27e:	6856      	ldr	r6, [r2, #4]
    f280:	460c      	mov	r4, r1
    f282:	f506 759c 	add.w	r5, r6, #312	; 0x138
    f286:	f106 0788 	add.w	r7, r6, #136	; 0x88
    f28a:	2823      	cmp	r0, #35	; 0x23
    f28c:	d008      	beq.n	f2a0 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x26>
    f28e:	2824      	cmp	r0, #36	; 0x24
    f290:	d014      	beq.n	f2bc <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x42>
    f292:	2825      	cmp	r0, #37	; 0x25
    f294:	d02a      	beq.n	f2ec <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x72>
    f296:	f44f 718d 	mov.w	r1, #282	; 0x11a
    f29a:	2078      	movs	r0, #120	; 0x78
    f29c:	f7f1 fbe2 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f2a0:	7de8      	ldrb	r0, [r5, #23]
    f2a2:	f000 f8d6 	bl	f452 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    f2a6:	7de9      	ldrb	r1, [r5, #23]
    f2a8:	7121      	strb	r1, [r4, #4]
    f2aa:	7e29      	ldrb	r1, [r5, #24]
    f2ac:	eb06 0040 	add.w	r0, r6, r0, lsl #1
    f2b0:	7161      	strb	r1, [r4, #5]
    f2b2:	f890 0079 	ldrb.w	r0, [r0, #121]	; 0x79
    f2b6:	71a0      	strb	r0, [r4, #6]
    f2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f2bc:	7d28      	ldrb	r0, [r5, #20]
    f2be:	f000 f8c8 	bl	f452 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    f2c2:	eb06 0640 	add.w	r6, r6, r0, lsl #1
    f2c6:	7f78      	ldrb	r0, [r7, #29]
    f2c8:	3678      	adds	r6, #120	; 0x78
    f2ca:	2828      	cmp	r0, #40	; 0x28
    f2cc:	d00c      	beq.n	f2e8 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x6e>
    f2ce:	68b8      	ldr	r0, [r7, #8]
    f2d0:	f7f3 fe7e 	bl	2fd0 <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY>
    f2d4:	7831      	ldrb	r1, [r6, #0]
    f2d6:	7121      	strb	r1, [r4, #4]
    f2d8:	7d69      	ldrb	r1, [r5, #21]
    f2da:	7161      	strb	r1, [r4, #5]
    f2dc:	7871      	ldrb	r1, [r6, #1]
    f2de:	71a1      	strb	r1, [r4, #6]
    f2e0:	71e0      	strb	r0, [r4, #7]
    f2e2:	2000      	movs	r0, #0
    f2e4:	75a8      	strb	r0, [r5, #22]
    f2e6:	e7e7      	b.n	f2b8 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x3e>
    f2e8:	20ff      	movs	r0, #255	; 0xff
    f2ea:	e7f3      	b.n	f2d4 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x5a>
    f2ec:	7d28      	ldrb	r0, [r5, #20]
    f2ee:	f000 f8b0 	bl	f452 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    f2f2:	eb06 0040 	add.w	r0, r6, r0, lsl #1
    f2f6:	7d29      	ldrb	r1, [r5, #20]
    f2f8:	7121      	strb	r1, [r4, #4]
    f2fa:	f810 1f78 	ldrb.w	r1, [r0, #120]!
    f2fe:	7161      	strb	r1, [r4, #5]
    f300:	7d69      	ldrb	r1, [r5, #21]
    f302:	71a1      	strb	r1, [r4, #6]
    f304:	7840      	ldrb	r0, [r0, #1]
    f306:	71e0      	strb	r0, [r4, #7]
    f308:	e7d6      	b.n	f2b8 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x3e>

0000f30a <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>:
    f30a:	b510      	push	{r4, lr}
    f30c:	2801      	cmp	r0, #1
    f30e:	d006      	beq.n	f31e <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x14>
    f310:	2802      	cmp	r0, #2
    f312:	d006      	beq.n	f322 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x18>
    f314:	f240 2162 	movw	r1, #610	; 0x262
    f318:	2078      	movs	r0, #120	; 0x78
    f31a:	f7f1 fba3 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f31e:	2000      	movs	r0, #0
    f320:	bd10      	pop	{r4, pc}
    f322:	2001      	movs	r0, #1
    f324:	bd10      	pop	{r4, pc}

0000f326 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>:
    f326:	207f      	movs	r0, #127	; 0x7f
    f328:	f000 b8ad 	b.w	f486 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x84>

0000f32c <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>:
    f32c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f330:	f000 b8a9 	b.w	f486 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x84>

0000f334 <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>:
    f334:	b510      	push	{r4, lr}
    f336:	4604      	mov	r4, r0
    f338:	f7f8 fa6e 	bl	7818 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f33c:	1e64      	subs	r4, r4, #1
    f33e:	b2e2      	uxtb	r2, r4
    f340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f344:	f000 b86b 	b.w	f41e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1c>

0000f348 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>:
    f348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f34c:	4607      	mov	r7, r0
    f34e:	461e      	mov	r6, r3
    f350:	4690      	mov	r8, r2
    f352:	460c      	mov	r4, r1
    f354:	4608      	mov	r0, r1
    f356:	f7ff ffed 	bl	f334 <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>
    f35a:	b1f8      	cbz	r0, f39c <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    f35c:	687d      	ldr	r5, [r7, #4]
    f35e:	2121      	movs	r1, #33	; 0x21
    f360:	f105 00f6 	add.w	r0, r5, #246	; 0xf6
    f364:	3588      	adds	r5, #136	; 0x88
    f366:	f7ff ff7f 	bl	f268 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    f36a:	b1c8      	cbz	r0, f3a0 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x58>
    f36c:	1e64      	subs	r4, r4, #1
    f36e:	f8d5 1072 	ldr.w	r1, [r5, #114]	; 0x72
    f372:	f8d5 006e 	ldr.w	r0, [r5, #110]	; 0x6e
    f376:	b2e2      	uxtb	r2, r4
    f378:	f000 f851 	bl	f41e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1c>
    f37c:	b180      	cbz	r0, f3a0 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x58>
    f37e:	6878      	ldr	r0, [r7, #4]
    f380:	f890 1151 	ldrb.w	r1, [r0, #337]	; 0x151
    f384:	f88d 1000 	strb.w	r1, [sp]
    f388:	9900      	ldr	r1, [sp, #0]
    f38a:	9100      	str	r1, [sp, #0]
    f38c:	f89d 1000 	ldrb.w	r1, [sp]
    f390:	f200 104f 	addw	r0, r0, #335	; 0x14f
    f394:	b131      	cbz	r1, f3a4 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x5c>
    f396:	203a      	movs	r0, #58	; 0x3a
    f398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f39c:	2011      	movs	r0, #17
    f39e:	e7fb      	b.n	f398 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>
    f3a0:	201a      	movs	r0, #26
    f3a2:	e7f9      	b.n	f398 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>
    f3a4:	1c81      	adds	r1, r0, #2
    f3a6:	700e      	strb	r6, [r1, #0]
    f3a8:	2101      	movs	r1, #1
    f3aa:	40a1      	lsls	r1, r4
    f3ac:	7001      	strb	r1, [r0, #0]
    f3ae:	f880 8001 	strb.w	r8, [r0, #1]
    f3b2:	2000      	movs	r0, #0
    f3b4:	e7f0      	b.n	f398 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>

0000f3b6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    f3b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f3ba:	460d      	mov	r5, r1
    f3bc:	4606      	mov	r6, r0
    f3be:	f7ff ffb2 	bl	f326 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>
    f3c2:	4607      	mov	r7, r0
    f3c4:	f7ff ffb2 	bl	f32c <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>
    f3c8:	2400      	movs	r4, #0
    f3ca:	4285      	cmp	r5, r0
    f3cc:	d100      	bne.n	f3d0 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
    f3ce:	2401      	movs	r4, #1
    f3d0:	42bd      	cmp	r5, r7
    f3d2:	d101      	bne.n	f3d8 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
    f3d4:	f044 0402 	orr.w	r4, r4, #2
    f3d8:	f000 f834 	bl	f444 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x42>
    f3dc:	2200      	movs	r2, #0
    f3de:	4601      	mov	r1, r0
    f3e0:	2301      	movs	r3, #1
    f3e2:	fa03 f002 	lsl.w	r0, r3, r2
    f3e6:	4208      	tst	r0, r1
    f3e8:	d005      	beq.n	f3f6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x40>
    f3ea:	eb06 0042 	add.w	r0, r6, r2, lsl #1
    f3ee:	f880 5079 	strb.w	r5, [r0, #121]	; 0x79
    f3f2:	f880 4078 	strb.w	r4, [r0, #120]	; 0x78
    f3f6:	1c52      	adds	r2, r2, #1
    f3f8:	b2d2      	uxtb	r2, r2
    f3fa:	2a02      	cmp	r2, #2
    f3fc:	d3f1      	bcc.n	f3e2 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
    f3fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f402 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>:
    f402:	b510      	push	{r4, lr}
    f404:	4604      	mov	r4, r0
    f406:	4608      	mov	r0, r1
    f408:	f7ff ff7f 	bl	f30a <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    f40c:	2802      	cmp	r0, #2
    f40e:	d205      	bcs.n	f41c <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1a>
    f410:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    f414:	f890 0079 	ldrb.w	r0, [r0, #121]	; 0x79
    f418:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    f41c:	bd10      	pop	{r4, pc}
    f41e:	b510      	push	{r4, lr}
    f420:	4614      	mov	r4, r2
    f422:	4602      	mov	r2, r0
    f424:	2000      	movs	r0, #0
    f426:	4603      	mov	r3, r0
    f428:	2c02      	cmp	r4, #2
    f42a:	d205      	bcs.n	f438 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x36>
    f42c:	4610      	mov	r0, r2
    f42e:	f000 f821 	bl	f474 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x72>
    f432:	2101      	movs	r1, #1
    f434:	40a1      	lsls	r1, r4
    f436:	b2cb      	uxtb	r3, r1
    f438:	4203      	tst	r3, r0
    f43a:	d001      	beq.n	f440 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x3e>
    f43c:	2001      	movs	r0, #1
    f43e:	bd10      	pop	{r4, pc}
    f440:	2000      	movs	r0, #0
    f442:	bd10      	pop	{r4, pc}
    f444:	b510      	push	{r4, lr}
    f446:	f7f8 f9e7 	bl	7818 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f44a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f44e:	f000 b811 	b.w	f474 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x72>
    f452:	4601      	mov	r1, r0
    f454:	b510      	push	{r4, lr}
    f456:	2000      	movs	r0, #0
    f458:	2301      	movs	r3, #1
    f45a:	fa03 f200 	lsl.w	r2, r3, r0
    f45e:	420a      	tst	r2, r1
    f460:	d107      	bne.n	f472 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x70>
    f462:	1c40      	adds	r0, r0, #1
    f464:	b2c0      	uxtb	r0, r0
    f466:	2802      	cmp	r0, #2
    f468:	d3f7      	bcc.n	f45a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x58>
    f46a:	213c      	movs	r1, #60	; 0x3c
    f46c:	2078      	movs	r0, #120	; 0x78
    f46e:	f7f1 faf9 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f472:	bd10      	pop	{r4, pc}
    f474:	0a00      	lsrs	r0, r0, #8
    f476:	2201      	movs	r2, #1
    f478:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    f47c:	07c0      	lsls	r0, r0, #31
    f47e:	d000      	beq.n	f482 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x80>
    f480:	2203      	movs	r2, #3
    f482:	4610      	mov	r0, r2
    f484:	4770      	bx	lr
    f486:	b508      	push	{r3, lr}
    f488:	2301      	movs	r3, #1
    f48a:	f640 1288 	movw	r2, #2440	; 0x988
    f48e:	4669      	mov	r1, sp
    f490:	f7fd f922 	bl	c6d8 <mpsl_fem_tx_power_split>
    f494:	bd08      	pop	{r3, pc}
    f496:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f49a:	f001 0107 	and.w	r1, r1, #7
    f49e:	7800      	ldrb	r0, [r0, #0]
    f4a0:	40c8      	lsrs	r0, r1
    f4a2:	f000 0001 	and.w	r0, r0, #1
    f4a6:	4770      	bx	lr
    f4a8:	b118      	cbz	r0, f4b2 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xb0>
    f4aa:	2802      	cmp	r0, #2
    f4ac:	d001      	beq.n	f4b2 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xb0>
    f4ae:	2001      	movs	r0, #1
    f4b0:	4770      	bx	lr
    f4b2:	2000      	movs	r0, #0
    f4b4:	4770      	bx	lr

0000f4b6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    f4b6:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f4b8:	7881      	ldrb	r1, [r0, #2]
    f4ba:	2500      	movs	r5, #0
    f4bc:	4604      	mov	r4, r0
    f4be:	291a      	cmp	r1, #26
    f4c0:	d024      	beq.n	f50c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    f4c2:	dc0e      	bgt.n	f4e2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    f4c4:	2916      	cmp	r1, #22
    f4c6:	d22b      	bcs.n	f520 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f4c8:	e8df f001 	tbb	[pc, r1]
    f4cc:	2a2a2a2a 	.word	0x2a2a2a2a
    f4d0:	2a2a202a 	.word	0x2a2a202a
    f4d4:	2a2a2a2a 	.word	0x2a2a2a2a
    f4d8:	2a2a2a2a 	.word	0x2a2a2a2a
    f4dc:	202a2a2a 	.word	0x202a2a2a
    f4e0:	2020      	.short	0x2020
    f4e2:	292a      	cmp	r1, #42	; 0x2a
    f4e4:	d01c      	beq.n	f520 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f4e6:	dc0b      	bgt.n	f500 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    f4e8:	f1a1 011e 	sub.w	r1, r1, #30
    f4ec:	290c      	cmp	r1, #12
    f4ee:	d217      	bcs.n	f520 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f4f0:	e8df f001 	tbb	[pc, r1]
    f4f4:	16161616 	.word	0x16161616
    f4f8:	16161616 	.word	0x16161616
    f4fc:	0c161616 	.word	0x0c161616
    f500:	393a      	subs	r1, #58	; 0x3a
    f502:	2902      	cmp	r1, #2
    f504:	d20c      	bcs.n	f520 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f506:	e8df f001 	tbb	[pc, r1]
    f50a:	010b      	.short	0x010b
    f50c:	8820      	ldrh	r0, [r4, #0]
    f50e:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    f512:	d205      	bcs.n	f520 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f514:	4669      	mov	r1, sp
    f516:	f7fe fac8 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f51a:	b118      	cbz	r0, f524 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
    f51c:	2002      	movs	r0, #2
    f51e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f520:	2012      	movs	r0, #18
    f522:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f524:	9901      	ldr	r1, [sp, #4]
    f526:	f891 0138 	ldrb.w	r0, [r1, #312]	; 0x138
    f52a:	f88d 0008 	strb.w	r0, [sp, #8]
    f52e:	9802      	ldr	r0, [sp, #8]
    f530:	9002      	str	r0, [sp, #8]
    f532:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f536:	f501 719c 	add.w	r1, r1, #312	; 0x138
    f53a:	b108      	cbz	r0, f540 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8a>
    f53c:	200c      	movs	r0, #12
    f53e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f540:	78a0      	ldrb	r0, [r4, #2]
    f542:	7048      	strb	r0, [r1, #1]
    f544:	20ff      	movs	r0, #255	; 0xff
    f546:	7008      	strb	r0, [r1, #0]
    f548:	4628      	mov	r0, r5
    f54a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f54c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    f54c:	b510      	push	{r4, lr}
    f54e:	4604      	mov	r4, r0
    f550:	f000 fdac 	bl	100ac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x470>
    f554:	b108      	cbz	r0, f55a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    f556:	200c      	movs	r0, #12
    f558:	bd10      	pop	{r4, pc}
    f55a:	7820      	ldrb	r0, [r4, #0]
    f55c:	b118      	cbz	r0, f566 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f55e:	2801      	cmp	r0, #1
    f560:	d001      	beq.n	f566 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f562:	2012      	movs	r0, #18
    f564:	bd10      	pop	{r4, pc}
    f566:	f7ff ff9f 	bl	f4a8 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    f56a:	1c61      	adds	r1, r4, #1
    f56c:	f7f2 fec2 	bl	22f4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    f570:	b108      	cbz	r0, f576 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    f572:	2000      	movs	r0, #0
    f574:	bd10      	pop	{r4, pc}
    f576:	2007      	movs	r0, #7
    f578:	bd10      	pop	{r4, pc}

0000f57a <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    f57a:	b510      	push	{r4, lr}
    f57c:	f000 fd96 	bl	100ac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x470>
    f580:	b108      	cbz	r0, f586 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    f582:	200c      	movs	r0, #12
    f584:	bd10      	pop	{r4, pc}
    f586:	f7f2 fedd 	bl	2344 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    f58a:	2000      	movs	r0, #0
    f58c:	bd10      	pop	{r4, pc}

0000f58e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
    f58e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f592:	4605      	mov	r5, r0
    f594:	f000 fb2f 	bl	fbf6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
    f598:	2800      	cmp	r0, #0
    f59a:	d112      	bne.n	f5c2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    f59c:	8828      	ldrh	r0, [r5, #0]
    f59e:	2100      	movs	r1, #0
    f5a0:	f7fe f8ea 	bl	d778 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f5a4:	0004      	movs	r4, r0
    f5a6:	d00e      	beq.n	f5c6 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    f5a8:	f000 fd40 	bl	1002c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f0>
    f5ac:	b158      	cbz	r0, f5c6 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    f5ae:	f894 0264 	ldrb.w	r0, [r4, #612]	; 0x264
    f5b2:	f88d 0000 	strb.w	r0, [sp]
    f5b6:	9800      	ldr	r0, [sp, #0]
    f5b8:	9000      	str	r0, [sp, #0]
    f5ba:	f89d 0000 	ldrb.w	r0, [sp]
    f5be:	b120      	cbz	r0, f5ca <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x3c>
    f5c0:	203a      	movs	r0, #58	; 0x3a
    f5c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f5c6:	2002      	movs	r0, #2
    f5c8:	e7fb      	b.n	f5c2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    f5ca:	f04f 0800 	mov.w	r8, #0
    f5ce:	88a8      	ldrh	r0, [r5, #4]
    f5d0:	f7fe fa77 	bl	dac2 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    f5d4:	4607      	mov	r7, r0
    f5d6:	4601      	mov	r1, r0
    f5d8:	2005      	movs	r0, #5
    f5da:	f7fe fbf4 	bl	ddc6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    f5de:	4606      	mov	r6, r0
    f5e0:	4639      	mov	r1, r7
    f5e2:	2008      	movs	r0, #8
    f5e4:	f7fe fbef 	bl	ddc6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    f5e8:	42b0      	cmp	r0, r6
    f5ea:	d301      	bcc.n	f5f0 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x62>
    f5ec:	42be      	cmp	r6, r7
    f5ee:	d301      	bcc.n	f5f4 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x66>
    f5f0:	2012      	movs	r0, #18
    f5f2:	e7e6      	b.n	f5c2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    f5f4:	f8a4 6268 	strh.w	r6, [r4, #616]	; 0x268
    f5f8:	e9c4 879b 	strd	r8, r7, [r4, #620]	; 0x26c
    f5fc:	88e8      	ldrh	r0, [r5, #6]
    f5fe:	f8a4 0274 	strh.w	r0, [r4, #628]	; 0x274
    f602:	8928      	ldrh	r0, [r5, #8]
    f604:	f8a4 0276 	strh.w	r0, [r4, #630]	; 0x276
    f608:	f504 7419 	add.w	r4, r4, #612	; 0x264
    f60c:	20ff      	movs	r0, #255	; 0xff
    f60e:	7020      	strb	r0, [r4, #0]
    f610:	2000      	movs	r0, #0
    f612:	e7d6      	b.n	f5c2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>

0000f614 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>:
    f614:	b508      	push	{r3, lr}
    f616:	f7f5 f94b 	bl	48b0 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    f61a:	2805      	cmp	r0, #5
    f61c:	d001      	beq.n	f622 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0xe>
    f61e:	200c      	movs	r0, #12
    f620:	bd08      	pop	{r3, pc}
    f622:	4668      	mov	r0, sp
    f624:	f7f5 f8ca 	bl	47bc <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI>
    f628:	2800      	cmp	r0, #0
    f62a:	d1f9      	bne.n	f620 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0xc>
    f62c:	f7f3 fe90 	bl	3350 <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A>
    f630:	2000      	movs	r0, #0
    f632:	bd08      	pop	{r3, pc}

0000f634 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    f634:	b510      	push	{r4, lr}
    f636:	460b      	mov	r3, r1
    f638:	2201      	movs	r2, #1
    f63a:	f100 0110 	add.w	r1, r0, #16
    f63e:	f7fe f9f8 	bl	da32 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    f642:	2000      	movs	r0, #0
    f644:	bd10      	pop	{r4, pc}

0000f646 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    f646:	b510      	push	{r4, lr}
    f648:	2108      	movs	r1, #8
    f64a:	f7f1 faab 	bl	ba4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    f64e:	2000      	movs	r0, #0
    f650:	bd10      	pop	{r4, pc}

0000f652 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    f652:	21fb      	movs	r1, #251	; 0xfb
    f654:	8001      	strh	r1, [r0, #0]
    f656:	f640 0248 	movw	r2, #2120	; 0x848
    f65a:	8042      	strh	r2, [r0, #2]
    f65c:	8081      	strh	r1, [r0, #4]
    f65e:	80c2      	strh	r2, [r0, #6]
    f660:	2000      	movs	r0, #0
    f662:	4770      	bx	lr

0000f664 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    f664:	b51c      	push	{r2, r3, r4, lr}
    f666:	8800      	ldrh	r0, [r0, #0]
    f668:	4669      	mov	r1, sp
    f66a:	f7fe fa1e 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f66e:	2800      	cmp	r0, #0
    f670:	d10c      	bne.n	f68c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
    f672:	9c01      	ldr	r4, [sp, #4]
    f674:	f89d 0000 	ldrb.w	r0, [sp]
    f678:	f504 749c 	add.w	r4, r4, #312	; 0x138
    f67c:	b918      	cbnz	r0, f686 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x22>
    f67e:	9801      	ldr	r0, [sp, #4]
    f680:	f000 fcd4 	bl	1002c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f0>
    f684:	b118      	cbz	r0, f68e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
    f686:	7ce0      	ldrb	r0, [r4, #19]
    f688:	b118      	cbz	r0, f692 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2e>
    f68a:	203a      	movs	r0, #58	; 0x3a
    f68c:	bd1c      	pop	{r2, r3, r4, pc}
    f68e:	2002      	movs	r0, #2
    f690:	bd1c      	pop	{r2, r3, r4, pc}
    f692:	2001      	movs	r0, #1
    f694:	74e0      	strb	r0, [r4, #19]
    f696:	2000      	movs	r0, #0
    f698:	bd1c      	pop	{r2, r3, r4, pc}

0000f69a <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    f69a:	b510      	push	{r4, lr}
    f69c:	4604      	mov	r4, r0
    f69e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f6a2:	f000 fce4 	bl	1006e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x432>
    f6a6:	f7f2 ffdf 	bl	2668 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    f6aa:	7020      	strb	r0, [r4, #0]
    f6ac:	f000 fcbb 	bl	10026 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3ea>
    f6b0:	f7f2 ffda 	bl	2668 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    f6b4:	7060      	strb	r0, [r4, #1]
    f6b6:	2000      	movs	r0, #0
    f6b8:	bd10      	pop	{r4, pc}

0000f6ba <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    f6ba:	2108      	movs	r1, #8
    f6bc:	7001      	strb	r1, [r0, #0]
    f6be:	2000      	movs	r0, #0
    f6c0:	4770      	bx	lr

0000f6c2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    f6c2:	b510      	push	{r4, lr}
    f6c4:	4604      	mov	r4, r0
    f6c6:	f000 fcf1 	bl	100ac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x470>
    f6ca:	b108      	cbz	r0, f6d0 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    f6cc:	200c      	movs	r0, #12
    f6ce:	bd10      	pop	{r4, pc}
    f6d0:	7820      	ldrb	r0, [r4, #0]
    f6d2:	b108      	cbz	r0, f6d8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    f6d4:	2801      	cmp	r0, #1
    f6d6:	d107      	bne.n	f6e8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f6d8:	f7ff fee6 	bl	f4a8 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    f6dc:	1c61      	adds	r1, r4, #1
    f6de:	f7fe f99d 	bl	da1c <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    f6e2:	b108      	cbz	r0, f6e8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f6e4:	2000      	movs	r0, #0
    f6e6:	bd10      	pop	{r4, pc}
    f6e8:	2012      	movs	r0, #18
    f6ea:	bd10      	pop	{r4, pc}

0000f6ec <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    f6ec:	b50e      	push	{r1, r2, r3, lr}
    f6ee:	8882      	ldrh	r2, [r0, #4]
    f6f0:	f244 2390 	movw	r3, #17040	; 0x4290
    f6f4:	429a      	cmp	r2, r3
    f6f6:	d901      	bls.n	f6fc <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
    f6f8:	2012      	movs	r0, #18
    f6fa:	bd0e      	pop	{r1, r2, r3, pc}
    f6fc:	f640 0348 	movw	r3, #2120	; 0x848
    f700:	429a      	cmp	r2, r3
    f702:	d300      	bcc.n	f706 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    f704:	461a      	mov	r2, r3
    f706:	8803      	ldrh	r3, [r0, #0]
    f708:	f8ad 3000 	strh.w	r3, [sp]
    f70c:	8843      	ldrh	r3, [r0, #2]
    f70e:	f8ad 3002 	strh.w	r3, [sp, #2]
    f712:	f8ad 2004 	strh.w	r2, [sp, #4]
    f716:	8843      	ldrh	r3, [r0, #2]
    f718:	f8ad 3006 	strh.w	r3, [sp, #6]
    f71c:	f8ad 2008 	strh.w	r2, [sp, #8]
    f720:	8800      	ldrh	r0, [r0, #0]
    f722:	8008      	strh	r0, [r1, #0]
    f724:	4668      	mov	r0, sp
    f726:	f7f7 ff57 	bl	75d8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x35c>
    f72a:	bd0e      	pop	{r1, r2, r3, pc}

0000f72c <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    f72c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f72e:	4604      	mov	r4, r0
    f730:	f10d 0007 	add.w	r0, sp, #7
    f734:	9000      	str	r0, [sp, #0]
    f736:	7922      	ldrb	r2, [r4, #4]
    f738:	78e1      	ldrb	r1, [r4, #3]
    f73a:	78a0      	ldrb	r0, [r4, #2]
    f73c:	f10d 0306 	add.w	r3, sp, #6
    f740:	f000 fc9d 	bl	1007e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x442>
    f744:	2800      	cmp	r0, #0
    f746:	d109      	bne.n	f75c <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
    f748:	8820      	ldrh	r0, [r4, #0]
    f74a:	f8ad 0004 	strh.w	r0, [sp, #4]
    f74e:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    f752:	f8ad 0008 	strh.w	r0, [sp, #8]
    f756:	a801      	add	r0, sp, #4
    f758:	f000 f970 	bl	fa3c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    f75c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f75e <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    f75e:	b510      	push	{r4, lr}
    f760:	4604      	mov	r4, r0
    f762:	2001      	movs	r0, #1
    f764:	f000 fa97 	bl	fc96 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5a>
    f768:	b128      	cbz	r0, f776 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    f76a:	4621      	mov	r1, r4
    f76c:	2001      	movs	r0, #1
    f76e:	f7f1 ff71 	bl	1654 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f772:	2000      	movs	r0, #0
    f774:	bd10      	pop	{r4, pc}
    f776:	200c      	movs	r0, #12
    f778:	bd10      	pop	{r4, pc}

0000f77a <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>:
    f77a:	b51c      	push	{r2, r3, r4, lr}
    f77c:	7801      	ldrb	r1, [r0, #0]
    f77e:	f88d 1000 	strb.w	r1, [sp]
    f782:	7840      	ldrb	r0, [r0, #1]
    f784:	f88d 0001 	strb.w	r0, [sp, #1]
    f788:	2000      	movs	r0, #0
    f78a:	f8ad 0002 	strh.w	r0, [sp, #2]
    f78e:	f8ad 0004 	strh.w	r0, [sp, #4]
    f792:	4601      	mov	r1, r0
    f794:	4668      	mov	r0, sp
    f796:	f000 face 	bl	fd36 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfa>
    f79a:	2800      	cmp	r0, #0
    f79c:	d102      	bne.n	f7a4 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ+0x2a>
    f79e:	4668      	mov	r0, sp
    f7a0:	f000 faa8 	bl	fcf4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb8>
    f7a4:	bd1c      	pop	{r2, r3, r4, pc}

0000f7a6 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>:
    f7a6:	b500      	push	{lr}
    f7a8:	b087      	sub	sp, #28
    f7aa:	7941      	ldrb	r1, [r0, #5]
    f7ac:	f88d 1000 	strb.w	r1, [sp]
    f7b0:	7981      	ldrb	r1, [r0, #6]
    f7b2:	f88d 1001 	strb.w	r1, [sp, #1]
    f7b6:	2101      	movs	r1, #1
    f7b8:	f88d 1002 	strb.w	r1, [sp, #2]
    f7bc:	7801      	ldrb	r1, [r0, #0]
    f7be:	f88d 1003 	strb.w	r1, [sp, #3]
    f7c2:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    f7c6:	f240 2271 	movw	r2, #625	; 0x271
    f7ca:	4351      	muls	r1, r2
    f7cc:	9102      	str	r1, [sp, #8]
    f7ce:	f8b0 0003 	ldrh.w	r0, [r0, #3]
    f7d2:	4350      	muls	r0, r2
    f7d4:	9004      	str	r0, [sp, #16]
    f7d6:	2007      	movs	r0, #7
    f7d8:	f88d 0018 	strb.w	r0, [sp, #24]
    f7dc:	2000      	movs	r0, #0
    f7de:	f88d 0019 	strb.w	r0, [sp, #25]
    f7e2:	9804      	ldr	r0, [sp, #16]
    f7e4:	f7f7 fdfe 	bl	73e4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x168>
    f7e8:	b140      	cbz	r0, f7fc <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    f7ea:	9802      	ldr	r0, [sp, #8]
    f7ec:	f7f7 fdee 	bl	73cc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x150>
    f7f0:	b120      	cbz	r0, f7fc <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    f7f2:	4668      	mov	r0, sp
    f7f4:	f7f7 fcc4 	bl	7180 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>
    f7f8:	b007      	add	sp, #28
    f7fa:	bd00      	pop	{pc}
    f7fc:	2030      	movs	r0, #48	; 0x30
    f7fe:	e7fb      	b.n	f7f8 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x52>

0000f800 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>:
    f800:	b570      	push	{r4, r5, r6, lr}
    f802:	4605      	mov	r5, r0
    f804:	8800      	ldrh	r0, [r0, #0]
    f806:	2100      	movs	r1, #0
    f808:	f7fd ffb6 	bl	d778 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f80c:	0004      	movs	r4, r0
    f80e:	d007      	beq.n	f820 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    f810:	f000 fc0c 	bl	1002c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f0>
    f814:	b120      	cbz	r0, f820 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    f816:	f894 0278 	ldrb.w	r0, [r4, #632]	; 0x278
    f81a:	b118      	cbz	r0, f824 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x24>
    f81c:	203a      	movs	r0, #58	; 0x3a
    f81e:	bd70      	pop	{r4, r5, r6, pc}
    f820:	2002      	movs	r0, #2
    f822:	bd70      	pop	{r4, r5, r6, pc}
    f824:	2100      	movs	r1, #0
    f826:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
    f82a:	f7ff fe34 	bl	f496 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
    f82e:	2801      	cmp	r0, #1
    f830:	d001      	beq.n	f836 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x36>
    f832:	201a      	movs	r0, #26
    f834:	bd70      	pop	{r4, r5, r6, pc}
    f836:	f8d5 0002 	ldr.w	r0, [r5, #2]
    f83a:	f8c4 0279 	str.w	r0, [r4, #633]	; 0x279
    f83e:	f8d5 0006 	ldr.w	r0, [r5, #6]
    f842:	f8c4 027d 	str.w	r0, [r4, #637]	; 0x27d
    f846:	8968      	ldrh	r0, [r5, #10]
    f848:	f8a4 0281 	strh.w	r0, [r4, #641]	; 0x281
    f84c:	2210      	movs	r2, #16
    f84e:	f105 010c 	add.w	r1, r5, #12
    f852:	f204 2083 	addw	r0, r4, #643	; 0x283
    f856:	f000 ff0a 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f85a:	2001      	movs	r0, #1
    f85c:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
    f860:	2000      	movs	r0, #0
    f862:	bd70      	pop	{r4, r5, r6, pc}

0000f864 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    f864:	b51c      	push	{r2, r3, r4, lr}
    f866:	8801      	ldrh	r1, [r0, #0]
    f868:	f8ad 1000 	strh.w	r1, [sp]
    f86c:	8841      	ldrh	r1, [r0, #2]
    f86e:	f8ad 1002 	strh.w	r1, [sp, #2]
    f872:	8801      	ldrh	r1, [r0, #0]
    f874:	f8ad 1004 	strh.w	r1, [sp, #4]
    f878:	8840      	ldrh	r0, [r0, #2]
    f87a:	f8ad 0006 	strh.w	r0, [sp, #6]
    f87e:	4668      	mov	r0, sp
    f880:	f7f7 ff2e 	bl	76e0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x464>
    f884:	bd1c      	pop	{r2, r3, r4, pc}

0000f886 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    f886:	b510      	push	{r4, lr}
    f888:	f7f1 ff08 	bl	169c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    f88c:	2000      	movs	r0, #0
    f88e:	bd10      	pop	{r4, pc}

0000f890 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>:
    f890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    f894:	4604      	mov	r4, r0
    f896:	7a40      	ldrb	r0, [r0, #9]
    f898:	0781      	lsls	r1, r0, #30
    f89a:	d502      	bpl.n	f8a2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x12>
    f89c:	f040 0001 	orr.w	r0, r0, #1
    f8a0:	7260      	strb	r0, [r4, #9]
    f8a2:	4620      	mov	r0, r4
    f8a4:	f000 fa67 	bl	fd76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13a>
    f8a8:	2800      	cmp	r0, #0
    f8aa:	d103      	bne.n	f8b4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>
    f8ac:	f000 fbd4 	bl	10058 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41c>
    f8b0:	b118      	cbz	r0, f8ba <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a>
    f8b2:	200c      	movs	r0, #12
    f8b4:	b004      	add	sp, #16
    f8b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f8ba:	f7f3 fcd7 	bl	326c <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI>
    f8be:	b910      	cbnz	r0, f8c6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x36>
    f8c0:	f7f3 fe50 	bl	3564 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>
    f8c4:	b108      	cbz	r0, f8ca <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3a>
    f8c6:	203a      	movs	r0, #58	; 0x3a
    f8c8:	e7f4      	b.n	f8b4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>
    f8ca:	2103      	movs	r1, #3
    f8cc:	f104 0018 	add.w	r0, r4, #24
    f8d0:	f7f7 fd94 	bl	73fc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x180>
    f8d4:	2100      	movs	r1, #0
    f8d6:	4668      	mov	r0, sp
    f8d8:	f7f1 fb02 	bl	ee0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    f8dc:	0006      	movs	r6, r0
    f8de:	d008      	beq.n	f8f2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x62>
    f8e0:	2301      	movs	r3, #1
    f8e2:	4622      	mov	r2, r4
    f8e4:	f8bd 1000 	ldrh.w	r1, [sp]
    f8e8:	f7f7 fd9c 	bl	7424 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1a8>
    f8ec:	0005      	movs	r5, r0
    f8ee:	d002      	beq.n	f8f6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x66>
    f8f0:	e06c      	b.n	f9cc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    f8f2:	2009      	movs	r0, #9
    f8f4:	e7de      	b.n	f8b4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>
    f8f6:	7860      	ldrb	r0, [r4, #1]
    f8f8:	f7f3 fd96 	bl	3428 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>
    f8fc:	78a1      	ldrb	r1, [r4, #2]
    f8fe:	7820      	ldrb	r0, [r4, #0]
    f900:	1ce2      	adds	r2, r4, #3
    f902:	f7f3 fd01 	bl	3308 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>
    f906:	b148      	cbz	r0, f91c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x8c>
    f908:	f7f3 fc5c 	bl	31c4 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    f90c:	78a1      	ldrb	r1, [r4, #2]
    f90e:	7820      	ldrb	r0, [r4, #0]
    f910:	1ce2      	adds	r2, r4, #3
    f912:	f7f3 fd37 	bl	3384 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>
    f916:	0005      	movs	r5, r0
    f918:	d002      	beq.n	f920 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x90>
    f91a:	e057      	b.n	f9cc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    f91c:	2512      	movs	r5, #18
    f91e:	e055      	b.n	f9cc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    f920:	4631      	mov	r1, r6
    f922:	2003      	movs	r0, #3
    f924:	f7f3 fc96 	bl	3254 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    f928:	4605      	mov	r5, r0
    f92a:	78a0      	ldrb	r0, [r4, #2]
    f92c:	f7ff fdbc 	bl	f4a8 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    f930:	1ce1      	adds	r1, r4, #3
    f932:	f7f3 fd51 	bl	33d8 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI>
    f936:	bb1d      	cbnz	r5, f980 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf0>
    f938:	7820      	ldrb	r0, [r4, #0]
    f93a:	f04f 0800 	mov.w	r8, #0
    f93e:	2701      	movs	r7, #1
    f940:	bb20      	cbnz	r0, f98c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xfc>
    f942:	f894 a002 	ldrb.w	sl, [r4, #2]
    f946:	f104 0903 	add.w	r9, r4, #3
    f94a:	f8cd 8004 	str.w	r8, [sp, #4]
    f94e:	f8cd 8008 	str.w	r8, [sp, #8]
    f952:	e016      	b.n	f982 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf2>
    f954:	9d01      	ldr	r5, [sp, #4]
    f956:	42ae      	cmp	r6, r5
    f958:	d013      	beq.n	f982 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf2>
    f95a:	4650      	mov	r0, sl
    f95c:	f7ff fda4 	bl	f4a8 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    f960:	78aa      	ldrb	r2, [r5, #2]
    f962:	1ceb      	adds	r3, r5, #3
    f964:	4649      	mov	r1, r9
    f966:	f7fd ff92 	bl	d88e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    f96a:	b150      	cbz	r0, f982 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf2>
    f96c:	7a6a      	ldrb	r2, [r5, #9]
    f96e:	7a70      	ldrb	r0, [r6, #9]
    f970:	f105 030a 	add.w	r3, r5, #10
    f974:	f106 010a 	add.w	r1, r6, #10
    f978:	f7fd ff89 	bl	d88e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    f97c:	b108      	cbz	r0, f982 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf2>
    f97e:	250b      	movs	r5, #11
    f980:	e024      	b.n	f9cc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    f982:	a801      	add	r0, sp, #4
    f984:	f7f1 fa8c 	bl	ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f988:	2800      	cmp	r0, #0
    f98a:	d0e3      	beq.n	f954 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xc4>
    f98c:	4638      	mov	r0, r7
    f98e:	f7f3 fc7d 	bl	328c <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>
    f992:	0005      	movs	r5, r0
    f994:	d11a      	bne.n	f9cc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    f996:	f88d 8004 	strb.w	r8, [sp, #4]
    f99a:	7a60      	ldrb	r0, [r4, #9]
    f99c:	07c0      	lsls	r0, r0, #31
    f99e:	d005      	beq.n	f9ac <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x11c>
    f9a0:	68e0      	ldr	r0, [r4, #12]
    f9a2:	9002      	str	r0, [sp, #8]
    f9a4:	69a0      	ldr	r0, [r4, #24]
    f9a6:	9003      	str	r0, [sp, #12]
    f9a8:	f88d 7004 	strb.w	r7, [sp, #4]
    f9ac:	a801      	add	r0, sp, #4
    f9ae:	f7f4 ffd1 	bl	4954 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    f9b2:	4605      	mov	r5, r0
    f9b4:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    f9b8:	f7f3 fdaa 	bl	3510 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>
    f9bc:	b935      	cbnz	r5, f9cc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    f9be:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
    f9c2:	4630      	mov	r0, r6
    f9c4:	f7f4 feb8 	bl	4738 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI>
    f9c8:	0005      	movs	r5, r0
    f9ca:	d00c      	beq.n	f9e6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x156>
    f9cc:	8830      	ldrh	r0, [r6, #0]
    f9ce:	f7fd ff5a 	bl	d886 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    f9d2:	8830      	ldrh	r0, [r6, #0]
    f9d4:	2100      	movs	r1, #0
    f9d6:	f7f1 faa9 	bl	f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    f9da:	b120      	cbz	r0, f9e6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x156>
    f9dc:	f241 1139 	movw	r1, #4409	; 0x1139
    f9e0:	2039      	movs	r0, #57	; 0x39
    f9e2:	f7f1 f83f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f9e6:	4628      	mov	r0, r5
    f9e8:	e764      	b.n	f8b4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>

0000f9ea <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    f9ea:	b51c      	push	{r2, r3, r4, lr}
    f9ec:	460c      	mov	r4, r1
    f9ee:	4669      	mov	r1, sp
    f9f0:	f7fe f85b 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f9f4:	2800      	cmp	r0, #0
    f9f6:	d105      	bne.n	fa04 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
    f9f8:	2101      	movs	r1, #1
    f9fa:	4622      	mov	r2, r4
    f9fc:	9801      	ldr	r0, [sp, #4]
    f9fe:	f000 fabc 	bl	ff7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33e>
    fa02:	2000      	movs	r0, #0
    fa04:	bd1c      	pop	{r2, r3, r4, pc}

0000fa06 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    fa06:	b510      	push	{r4, lr}
    fa08:	4604      	mov	r4, r0
    fa0a:	f7f7 fe9f 	bl	774c <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>
    fa0e:	b118      	cbz	r0, fa18 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x12>
    fa10:	2000      	movs	r0, #0
    fa12:	f000 f940 	bl	fc96 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5a>
    fa16:	b128      	cbz	r0, fa24 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x1e>
    fa18:	4621      	mov	r1, r4
    fa1a:	2000      	movs	r0, #0
    fa1c:	f7f1 fe1a 	bl	1654 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    fa20:	2000      	movs	r0, #0
    fa22:	bd10      	pop	{r4, pc}
    fa24:	200c      	movs	r0, #12
    fa26:	bd10      	pop	{r4, pc}

0000fa28 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    fa28:	b510      	push	{r4, lr}
    fa2a:	7800      	ldrb	r0, [r0, #0]
    fa2c:	b100      	cbz	r0, fa30 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
    fa2e:	2001      	movs	r0, #1
    fa30:	f7f5 fc16 	bl	5260 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>
    fa34:	2000      	movs	r0, #0
    fa36:	bd10      	pop	{r4, pc}

0000fa38 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    fa38:	f7f7 bdce 	b.w	75d8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x35c>

0000fa3c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    fa3c:	b510      	push	{r4, lr}
    fa3e:	4604      	mov	r4, r0
    fa40:	8880      	ldrh	r0, [r0, #4]
    fa42:	b128      	cbz	r0, fa50 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fa44:	2801      	cmp	r0, #1
    fa46:	d003      	beq.n	fa50 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fa48:	2802      	cmp	r0, #2
    fa4a:	d001      	beq.n	fa50 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fa4c:	2012      	movs	r0, #18
    fa4e:	bd10      	pop	{r4, pc}
    fa50:	78e0      	ldrb	r0, [r4, #3]
    fa52:	f000 f92c 	bl	fcae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x72>
    fa56:	b148      	cbz	r0, fa6c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    fa58:	78a0      	ldrb	r0, [r4, #2]
    fa5a:	f000 f928 	bl	fcae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x72>
    fa5e:	b128      	cbz	r0, fa6c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    fa60:	4620      	mov	r0, r4
    fa62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa66:	2101      	movs	r1, #1
    fa68:	f000 b862 	b.w	fb30 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    fa6c:	2011      	movs	r0, #17
    fa6e:	bd10      	pop	{r4, pc}

0000fa70 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    fa70:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fa72:	460c      	mov	r4, r1
    fa74:	4605      	mov	r5, r0
    fa76:	8800      	ldrh	r0, [r0, #0]
    fa78:	4669      	mov	r1, sp
    fa7a:	f7fe f816 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fa7e:	2800      	cmp	r0, #0
    fa80:	d106      	bne.n	fa90 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    fa82:	9801      	ldr	r0, [sp, #4]
    fa84:	8829      	ldrh	r1, [r5, #0]
    fa86:	8021      	strh	r1, [r4, #0]
    fa88:	f8b0 00d0 	ldrh.w	r0, [r0, #208]	; 0xd0
    fa8c:	8060      	strh	r0, [r4, #2]
    fa8e:	2000      	movs	r0, #0
    fa90:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000fa92 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    fa92:	b510      	push	{r4, lr}
    fa94:	4604      	mov	r4, r0
    fa96:	4601      	mov	r1, r0
    fa98:	2000      	movs	r0, #0
    fa9a:	f7f1 fdc3 	bl	1624 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    fa9e:	b910      	cbnz	r0, faa6 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    faa0:	2000      	movs	r0, #0
    faa2:	6020      	str	r0, [r4, #0]
    faa4:	80a0      	strh	r0, [r4, #4]
    faa6:	2000      	movs	r0, #0
    faa8:	bd10      	pop	{r4, pc}

0000faaa <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    faaa:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    faac:	460c      	mov	r4, r1
    faae:	4605      	mov	r5, r0
    fab0:	8800      	ldrh	r0, [r0, #0]
    fab2:	4669      	mov	r1, sp
    fab4:	f7fd fff9 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fab8:	b108      	cbz	r0, fabe <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    faba:	2002      	movs	r0, #2
    fabc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fabe:	78a8      	ldrb	r0, [r5, #2]
    fac0:	b158      	cbz	r0, fada <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x30>
    fac2:	f000 fab0 	bl	10026 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3ea>
    fac6:	70a0      	strb	r0, [r4, #2]
    fac8:	8828      	ldrh	r0, [r5, #0]
    faca:	8020      	strh	r0, [r4, #0]
    facc:	f994 0002 	ldrsb.w	r0, [r4, #2]
    fad0:	f7f2 fdca 	bl	2668 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fad4:	70a0      	strb	r0, [r4, #2]
    fad6:	2000      	movs	r0, #0
    fad8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fada:	9801      	ldr	r0, [sp, #4]
    fadc:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    fae0:	e7f1      	b.n	fac6 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000fae2 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    fae2:	b510      	push	{r4, lr}
    fae4:	f7f7 fe38 	bl	7758 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    fae8:	2000      	movs	r0, #0
    faea:	bd10      	pop	{r4, pc}

0000faec <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    faec:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    faf0:	4604      	mov	r4, r0
    faf2:	8840      	ldrh	r0, [r0, #2]
    faf4:	460d      	mov	r5, r1
    faf6:	b1b8      	cbz	r0, fb28 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
    faf8:	8820      	ldrh	r0, [r4, #0]
    fafa:	4669      	mov	r1, sp
    fafc:	f7fd ffd5 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fb00:	2800      	cmp	r0, #0
    fb02:	d10f      	bne.n	fb24 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
    fb04:	8820      	ldrh	r0, [r4, #0]
    fb06:	8028      	strh	r0, [r5, #0]
    fb08:	9e01      	ldr	r6, [sp, #4]
    fb0a:	f106 0510 	add.w	r5, r6, #16
    fb0e:	3688      	adds	r6, #136	; 0x88
    fb10:	682f      	ldr	r7, [r5, #0]
    fb12:	8862      	ldrh	r2, [r4, #2]
    fb14:	4639      	mov	r1, r7
    fb16:	4630      	mov	r0, r6
    fb18:	f7fe f939 	bl	dd8e <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    fb1c:	6828      	ldr	r0, [r5, #0]
    fb1e:	42b8      	cmp	r0, r7
    fb20:	d1f6      	bne.n	fb10 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
    fb22:	2000      	movs	r0, #0
    fb24:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    fb28:	2012      	movs	r0, #18
    fb2a:	e7fb      	b.n	fb24 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0000fb2c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    fb2c:	f000 b886 	b.w	fc3c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000fb30 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    fb30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fb34:	b086      	sub	sp, #24
    fb36:	4689      	mov	r9, r1
    fb38:	4607      	mov	r7, r0
    fb3a:	8800      	ldrh	r0, [r0, #0]
    fb3c:	a901      	add	r1, sp, #4
    fb3e:	f7fd ffb4 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fb42:	2800      	cmp	r0, #0
    fb44:	d136      	bne.n	fbb4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
    fb46:	9802      	ldr	r0, [sp, #8]
    fb48:	4601      	mov	r1, r0
    fb4a:	4688      	mov	r8, r1
    fb4c:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    fb50:	f500 749c 	add.w	r4, r0, #312	; 0x138
    fb54:	f88d 1000 	strb.w	r1, [sp]
    fb58:	9900      	ldr	r1, [sp, #0]
    fb5a:	9100      	str	r1, [sp, #0]
    fb5c:	f89d 1000 	ldrb.w	r1, [sp]
    fb60:	3088      	adds	r0, #136	; 0x88
    fb62:	b109      	cbz	r1, fb68 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
    fb64:	2601      	movs	r6, #1
    fb66:	e000      	b.n	fb6a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
    fb68:	2600      	movs	r6, #0
    fb6a:	7f81      	ldrb	r1, [r0, #30]
    fb6c:	2922      	cmp	r1, #34	; 0x22
    fb6e:	d100      	bne.n	fb72 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
    fb70:	b13e      	cbz	r6, fb82 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
    fb72:	2500      	movs	r5, #0
    fb74:	306e      	adds	r0, #110	; 0x6e
    fb76:	2108      	movs	r1, #8
    fb78:	4682      	mov	sl, r0
    fb7a:	f7ff fc8c 	bl	f496 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
    fb7e:	b110      	cbz	r0, fb86 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
    fb80:	e007      	b.n	fb92 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
    fb82:	2501      	movs	r5, #1
    fb84:	e7f6      	b.n	fb74 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
    fb86:	210b      	movs	r1, #11
    fb88:	4650      	mov	r0, sl
    fb8a:	f7ff fc84 	bl	f496 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
    fb8e:	b900      	cbnz	r0, fb92 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
    fb90:	b17d      	cbz	r5, fbb2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x82>
    fb92:	a804      	add	r0, sp, #16
    fb94:	9000      	str	r0, [sp, #0]
    fb96:	f89d 0004 	ldrb.w	r0, [sp, #4]
    fb9a:	ab03      	add	r3, sp, #12
    fb9c:	463a      	mov	r2, r7
    fb9e:	4641      	mov	r1, r8
    fba0:	f000 fa21 	bl	ffe6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3aa>
    fba4:	0005      	movs	r5, r0
    fba6:	d105      	bne.n	fbb4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
    fba8:	340c      	adds	r4, #12
    fbaa:	20ff      	movs	r0, #255	; 0xff
    fbac:	7060      	strb	r0, [r4, #1]
    fbae:	b936      	cbnz	r6, fbbe <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    fbb0:	e003      	b.n	fbba <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    fbb2:	201a      	movs	r0, #26
    fbb4:	b006      	add	sp, #24
    fbb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fbba:	7820      	ldrb	r0, [r4, #0]
    fbbc:	b108      	cbz	r0, fbc2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x92>
    fbbe:	253a      	movs	r5, #58	; 0x3a
    fbc0:	e012      	b.n	fbe8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
    fbc2:	f884 9000 	strb.w	r9, [r4]
    fbc6:	f89d 000c 	ldrb.w	r0, [sp, #12]
    fbca:	70a0      	strb	r0, [r4, #2]
    fbcc:	f89d 1010 	ldrb.w	r1, [sp, #16]
    fbd0:	70e1      	strb	r1, [r4, #3]
    fbd2:	f88d 0000 	strb.w	r0, [sp]
    fbd6:	f88d 1001 	strb.w	r1, [sp, #1]
    fbda:	88b8      	ldrh	r0, [r7, #4]
    fbdc:	f8ad 0002 	strh.w	r0, [sp, #2]
    fbe0:	4669      	mov	r1, sp
    fbe2:	4640      	mov	r0, r8
    fbe4:	f7fe f83b 	bl	dc5e <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    fbe8:	2000      	movs	r0, #0
    fbea:	7060      	strb	r0, [r4, #1]
    fbec:	4628      	mov	r0, r5
    fbee:	e7e1      	b.n	fbb4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>

0000fbf0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    fbf0:	2008      	movs	r0, #8
    fbf2:	f7f7 be05 	b.w	7800 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

0000fbf6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
    fbf6:	b510      	push	{r4, lr}
    fbf8:	4604      	mov	r4, r0
    fbfa:	2000      	movs	r0, #0
    fbfc:	8822      	ldrh	r2, [r4, #0]
    fbfe:	b086      	sub	sp, #24
    fc00:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
    fc04:	39ff      	subs	r1, #255	; 0xff
    fc06:	d008      	beq.n	fc1a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
    fc08:	a903      	add	r1, sp, #12
    fc0a:	4610      	mov	r0, r2
    fc0c:	f7fd ff4d 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fc10:	b110      	cbz	r0, fc18 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
    fc12:	2002      	movs	r0, #2
    fc14:	b006      	add	sp, #24
    fc16:	bd10      	pop	{r4, pc}
    fc18:	9804      	ldr	r0, [sp, #16]
    fc1a:	8921      	ldrh	r1, [r4, #8]
    fc1c:	89a3      	ldrh	r3, [r4, #12]
    fc1e:	8962      	ldrh	r2, [r4, #10]
    fc20:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    fc24:	88e3      	ldrh	r3, [r4, #6]
    fc26:	88a2      	ldrh	r2, [r4, #4]
    fc28:	8861      	ldrh	r1, [r4, #2]
    fc2a:	f000 f97b 	bl	ff24 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e8>
    fc2e:	b108      	cbz	r0, fc34 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
    fc30:	2000      	movs	r0, #0
    fc32:	e7ef      	b.n	fc14 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
    fc34:	2030      	movs	r0, #48	; 0x30
    fc36:	e7ed      	b.n	fc14 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>

0000fc38 <sym_7ZWRNRN6OJ5G7BJWG232R5QOQBW4NK4HJWYOG5A>:
    fc38:	f7f5 bcb4 	b.w	55a4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>

0000fc3c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    fc3c:	b510      	push	{r4, lr}
    fc3e:	f7fd fe55 	bl	d8ec <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    fc42:	f7f2 fad1 	bl	21e8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    fc46:	f7f7 fdfd 	bl	7844 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    fc4a:	f7fe fa7a 	bl	e142 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    fc4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fc52:	f7f7 bb8d 	b.w	7370 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xf4>
    fc56:	f44f 71a4 	mov.w	r1, #328	; 0x148
    fc5a:	4288      	cmp	r0, r1
    fc5c:	d303      	bcc.n	fc66 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a>
    fc5e:	f640 0148 	movw	r1, #2120	; 0x848
    fc62:	4288      	cmp	r0, r1
    fc64:	d300      	bcc.n	fc68 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c>
    fc66:	4608      	mov	r0, r1
    fc68:	b280      	uxth	r0, r0
    fc6a:	4770      	bx	lr
    fc6c:	07c1      	lsls	r1, r0, #31
    fc6e:	d001      	beq.n	fc74 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x38>
    fc70:	2001      	movs	r0, #1
    fc72:	4770      	bx	lr
    fc74:	0780      	lsls	r0, r0, #30
    fc76:	d501      	bpl.n	fc7c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x40>
    fc78:	2002      	movs	r0, #2
    fc7a:	4770      	bx	lr
    fc7c:	2000      	movs	r0, #0
    fc7e:	4770      	bx	lr
    fc80:	b510      	push	{r4, lr}
    fc82:	2801      	cmp	r0, #1
    fc84:	d006      	beq.n	fc94 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>
    fc86:	2802      	cmp	r0, #2
    fc88:	d004      	beq.n	fc94 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>
    fc8a:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    fc8e:	2006      	movs	r0, #6
    fc90:	f7f0 fee8 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fc94:	bd10      	pop	{r4, pc}
    fc96:	b510      	push	{r4, lr}
    fc98:	f000 f9de 	bl	10058 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41c>
    fc9c:	b128      	cbz	r0, fcaa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6e>
    fc9e:	f7f3 fc93 	bl	35c8 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
    fca2:	2801      	cmp	r0, #1
    fca4:	d001      	beq.n	fcaa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6e>
    fca6:	2000      	movs	r0, #0
    fca8:	bd10      	pop	{r4, pc}
    fcaa:	2001      	movs	r0, #1
    fcac:	bd10      	pop	{r4, pc}
    fcae:	b510      	push	{r4, lr}
    fcb0:	0004      	movs	r4, r0
    fcb2:	d005      	beq.n	fcc0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x84>
    fcb4:	f7f7 fdb6 	bl	7824 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fcb8:	4384      	bics	r4, r0
    fcba:	d001      	beq.n	fcc0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x84>
    fcbc:	2000      	movs	r0, #0
    fcbe:	bd10      	pop	{r4, pc}
    fcc0:	2001      	movs	r0, #1
    fcc2:	bd10      	pop	{r4, pc}
    fcc4:	28fb      	cmp	r0, #251	; 0xfb
    fcc6:	d803      	bhi.n	fcd0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x94>
    fcc8:	f640 0048 	movw	r0, #2120	; 0x848
    fccc:	4281      	cmp	r1, r0
    fcce:	d901      	bls.n	fcd4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x98>
    fcd0:	2011      	movs	r0, #17
    fcd2:	4770      	bx	lr
    fcd4:	2000      	movs	r0, #0
    fcd6:	4770      	bx	lr
    fcd8:	381b      	subs	r0, #27
    fcda:	28e1      	cmp	r0, #225	; 0xe1
    fcdc:	d206      	bcs.n	fcec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb0>
    fcde:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    fce2:	d303      	bcc.n	fcec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb0>
    fce4:	f244 2090 	movw	r0, #17040	; 0x4290
    fce8:	4281      	cmp	r1, r0
    fcea:	d901      	bls.n	fcf0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb4>
    fcec:	2012      	movs	r0, #18
    fcee:	4770      	bx	lr
    fcf0:	2000      	movs	r0, #0
    fcf2:	4770      	bx	lr
    fcf4:	b510      	push	{r4, lr}
    fcf6:	4604      	mov	r4, r0
    fcf8:	7800      	ldrb	r0, [r0, #0]
    fcfa:	2801      	cmp	r0, #1
    fcfc:	d009      	beq.n	fd12 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd6>
    fcfe:	f7f4 fdd7 	bl	48b0 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    fd02:	2805      	cmp	r0, #5
    fd04:	d003      	beq.n	fd0e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd2>
    fd06:	f7f4 fd9b 	bl	4840 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    fd0a:	2800      	cmp	r0, #0
    fd0c:	d000      	beq.n	fd10 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd4>
    fd0e:	200c      	movs	r0, #12
    fd10:	bd10      	pop	{r4, pc}
    fd12:	f7f3 fc27 	bl	3564 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>
    fd16:	b108      	cbz	r0, fd1c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe0>
    fd18:	203a      	movs	r0, #58	; 0x3a
    fd1a:	bd10      	pop	{r4, pc}
    fd1c:	f7f3 fbdc 	bl	34d8 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>
    fd20:	b138      	cbz	r0, fd32 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf6>
    fd22:	f7f3 fa4f 	bl	31c4 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    fd26:	88a1      	ldrh	r1, [r4, #4]
    fd28:	8860      	ldrh	r0, [r4, #2]
    fd2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fd2e:	f7f4 bd4d 	b.w	47cc <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>
    fd32:	2012      	movs	r0, #18
    fd34:	bd10      	pop	{r4, pc}
    fd36:	7802      	ldrb	r2, [r0, #0]
    fd38:	2a01      	cmp	r2, #1
    fd3a:	d001      	beq.n	fd40 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x104>
    fd3c:	b1ba      	cbz	r2, fd6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x132>
    fd3e:	e018      	b.n	fd72 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    fd40:	7842      	ldrb	r2, [r0, #1]
    fd42:	b13a      	cbz	r2, fd54 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x118>
    fd44:	2a01      	cmp	r2, #1
    fd46:	d005      	beq.n	fd54 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x118>
    fd48:	2a02      	cmp	r2, #2
    fd4a:	d112      	bne.n	fd72 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    fd4c:	b189      	cbz	r1, fd72 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    fd4e:	8881      	ldrh	r1, [r0, #4]
    fd50:	b179      	cbz	r1, fd72 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    fd52:	e000      	b.n	fd56 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x11a>
    fd54:	b159      	cbz	r1, fd6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x132>
    fd56:	8841      	ldrh	r1, [r0, #2]
    fd58:	b149      	cbz	r1, fd6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x132>
    fd5a:	8880      	ldrh	r0, [r0, #4]
    fd5c:	b138      	cbz	r0, fd6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x132>
    fd5e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    fd62:	0049      	lsls	r1, r1, #1
    fd64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    fd68:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
    fd6c:	d201      	bcs.n	fd72 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    fd6e:	2000      	movs	r0, #0
    fd70:	4770      	bx	lr
    fd72:	2012      	movs	r0, #18
    fd74:	4770      	bx	lr
    fd76:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    fd7a:	7a45      	ldrb	r5, [r0, #9]
    fd7c:	4604      	mov	r4, r0
    fd7e:	0768      	lsls	r0, r5, #29
    fd80:	d06c      	beq.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fd82:	08e8      	lsrs	r0, r5, #3
    fd84:	d16a      	bne.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fd86:	2d02      	cmp	r5, #2
    fd88:	d068      	beq.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fd8a:	f7f7 fd4b 	bl	7824 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fd8e:	ea25 0000 	bic.w	r0, r5, r0
    fd92:	0740      	lsls	r0, r0, #29
    fd94:	d102      	bne.n	fd9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x160>
    fd96:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    fd9a:	b110      	cbz	r0, fda2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x166>
    fd9c:	2011      	movs	r0, #17
    fd9e:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    fda2:	2d01      	cmp	r5, #1
    fda4:	d15a      	bne.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fda6:	27ff      	movs	r7, #255	; 0xff
    fda8:	2101      	movs	r1, #1
    fdaa:	69a0      	ldr	r0, [r4, #24]
    fdac:	f7f7 fbfe 	bl	75ac <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x330>
    fdb0:	b3e8      	cbz	r0, fe2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f2>
    fdb2:	46a8      	mov	r8, r5
    fdb4:	2600      	movs	r6, #0
    fdb6:	4635      	mov	r5, r6
    fdb8:	42bd      	cmp	r5, r7
    fdba:	d02f      	beq.n	fe1c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1e0>
    fdbc:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    fdc0:	6988      	ldr	r0, [r1, #24]
    fdc2:	68c9      	ldr	r1, [r1, #12]
    fdc4:	4288      	cmp	r0, r1
    fdc6:	d849      	bhi.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fdc8:	4406      	add	r6, r0
    fdca:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    fdce:	4681      	mov	r9, r0
    fdd0:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
    fdd2:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    fdd6:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    fdd8:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    fddc:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    fdde:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    fde0:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    fde2:	2000      	movs	r0, #0
    fde4:	f000 f89e 	bl	ff24 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e8>
    fde8:	b308      	cbz	r0, fe2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f2>
    fdea:	b1bd      	cbz	r5, fe1c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1e0>
    fdec:	f8b9 1024 	ldrh.w	r1, [r9, #36]	; 0x24
    fdf0:	f8b9 0022 	ldrh.w	r0, [r9, #34]	; 0x22
    fdf4:	4281      	cmp	r1, r0
    fdf6:	d131      	bne.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fdf8:	f8b9 102a 	ldrh.w	r1, [r9, #42]	; 0x2a
    fdfc:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
    fe00:	4281      	cmp	r1, r0
    fe02:	d12b      	bne.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe04:	f8b9 1030 	ldrh.w	r1, [r9, #48]	; 0x30
    fe08:	f8b9 002e 	ldrh.w	r0, [r9, #46]	; 0x2e
    fe0c:	4281      	cmp	r1, r0
    fe0e:	d125      	bne.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe10:	f8b9 1036 	ldrh.w	r1, [r9, #54]	; 0x36
    fe14:	f8b9 0034 	ldrh.w	r0, [r9, #52]	; 0x34
    fe18:	4281      	cmp	r1, r0
    fe1a:	d11f      	bne.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe1c:	1c6d      	adds	r5, r5, #1
    fe1e:	b2ed      	uxtb	r5, r5
    fe20:	4545      	cmp	r5, r8
    fe22:	d3c9      	bcc.n	fdb8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x17c>
    fe24:	68e0      	ldr	r0, [r4, #12]
    fe26:	42b0      	cmp	r0, r6
    fe28:	d318      	bcc.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe2a:	7820      	ldrb	r0, [r4, #0]
    fe2c:	e000      	b.n	fe30 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f4>
    fe2e:	e003      	b.n	fe38 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1fc>
    fe30:	b120      	cbz	r0, fe3c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x200>
    fe32:	2801      	cmp	r0, #1
    fe34:	d112      	bne.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe36:	e004      	b.n	fe42 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x206>
    fe38:	2030      	movs	r0, #48	; 0x30
    fe3a:	e7b0      	b.n	fd9e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x162>
    fe3c:	78a0      	ldrb	r0, [r4, #2]
    fe3e:	2800      	cmp	r0, #0
    fe40:	d1f7      	bne.n	fe32 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f6>
    fe42:	7860      	ldrb	r0, [r4, #1]
    fe44:	b128      	cbz	r0, fe52 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
    fe46:	2801      	cmp	r0, #1
    fe48:	d003      	beq.n	fe52 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
    fe4a:	2802      	cmp	r0, #2
    fe4c:	d001      	beq.n	fe52 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
    fe4e:	2803      	cmp	r0, #3
    fe50:	d104      	bne.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe52:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    fe56:	b108      	cbz	r0, fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe58:	2807      	cmp	r0, #7
    fe5a:	d901      	bls.n	fe60 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x224>
    fe5c:	2012      	movs	r0, #18
    fe5e:	e79e      	b.n	fd9e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x162>
    fe60:	2000      	movs	r0, #0
    fe62:	e79c      	b.n	fd9e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x162>
    fe64:	b570      	push	{r4, r5, r6, lr}
    fe66:	4604      	mov	r4, r0
    fe68:	7800      	ldrb	r0, [r0, #0]
    fe6a:	2500      	movs	r5, #0
    fe6c:	2801      	cmp	r0, #1
    fe6e:	d004      	beq.n	fe7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23e>
    fe70:	b118      	cbz	r0, fe7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23e>
    fe72:	2802      	cmp	r0, #2
    fe74:	d001      	beq.n	fe7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23e>
    fe76:	2803      	cmp	r0, #3
    fe78:	d139      	bne.n	feee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b2>
    fe7a:	7860      	ldrb	r0, [r4, #1]
    fe7c:	b128      	cbz	r0, fe8a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x24e>
    fe7e:	2801      	cmp	r0, #1
    fe80:	d003      	beq.n	fe8a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x24e>
    fe82:	2802      	cmp	r0, #2
    fe84:	d001      	beq.n	fe8a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x24e>
    fe86:	2803      	cmp	r0, #3
    fe88:	d131      	bne.n	feee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b2>
    fe8a:	7e60      	ldrb	r0, [r4, #25]
    fe8c:	b948      	cbnz	r0, fea2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x266>
    fe8e:	78a0      	ldrb	r0, [r4, #2]
    fe90:	2801      	cmp	r0, #1
    fe92:	d12c      	bne.n	feee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b2>
    fe94:	f7f7 fcc6 	bl	7824 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fe98:	4601      	mov	r1, r0
    fe9a:	78a0      	ldrb	r0, [r4, #2]
    fe9c:	ea30 0101 	bics.w	r1, r0, r1
    fea0:	d001      	beq.n	fea6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x26a>
    fea2:	2011      	movs	r0, #17
    fea4:	bd70      	pop	{r4, r5, r6, pc}
    fea6:	07c0      	lsls	r0, r0, #31
    fea8:	d006      	beq.n	feb8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x27c>
    feaa:	78e0      	ldrb	r0, [r4, #3]
    feac:	2301      	movs	r3, #1
    feae:	6922      	ldr	r2, [r4, #16]
    feb0:	68a1      	ldr	r1, [r4, #8]
    feb2:	f000 f820 	bl	fef6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ba>
    feb6:	4605      	mov	r5, r0
    feb8:	78a0      	ldrb	r0, [r4, #2]
    feba:	0780      	lsls	r0, r0, #30
    febc:	d506      	bpl.n	fecc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x290>
    febe:	78e0      	ldrb	r0, [r4, #3]
    fec0:	2302      	movs	r3, #2
    fec2:	6922      	ldr	r2, [r4, #16]
    fec4:	68a1      	ldr	r1, [r4, #8]
    fec6:	f000 f816 	bl	fef6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ba>
    feca:	4305      	orrs	r5, r0
    fecc:	78a0      	ldrb	r0, [r4, #2]
    fece:	0740      	lsls	r0, r0, #29
    fed0:	d506      	bpl.n	fee0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a4>
    fed2:	78e0      	ldrb	r0, [r4, #3]
    fed4:	2304      	movs	r3, #4
    fed6:	6922      	ldr	r2, [r4, #16]
    fed8:	68a1      	ldr	r1, [r4, #8]
    feda:	f000 f80c 	bl	fef6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ba>
    fede:	4305      	orrs	r5, r0
    fee0:	b10d      	cbz	r5, fee6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2aa>
    fee2:	4628      	mov	r0, r5
    fee4:	bd70      	pop	{r4, r5, r6, pc}
    fee6:	7e20      	ldrb	r0, [r4, #24]
    fee8:	b108      	cbz	r0, feee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b2>
    feea:	2807      	cmp	r0, #7
    feec:	d901      	bls.n	fef2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b6>
    feee:	2012      	movs	r0, #18
    fef0:	bd70      	pop	{r4, r5, r6, pc}
    fef2:	2000      	movs	r0, #0
    fef4:	bd70      	pop	{r4, r5, r6, pc}
    fef6:	b570      	push	{r4, r5, r6, lr}
    fef8:	4614      	mov	r4, r2
    fefa:	460d      	mov	r5, r1
    fefc:	b108      	cbz	r0, ff02 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c6>
    fefe:	2801      	cmp	r0, #1
    ff00:	d10a      	bne.n	ff18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2dc>
    ff02:	4619      	mov	r1, r3
    ff04:	4610      	mov	r0, r2
    ff06:	f7f7 fb51 	bl	75ac <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x330>
    ff0a:	b138      	cbz	r0, ff1c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e0>
    ff0c:	4628      	mov	r0, r5
    ff0e:	f7f7 fa51 	bl	73b4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x138>
    ff12:	b118      	cbz	r0, ff1c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e0>
    ff14:	42ac      	cmp	r4, r5
    ff16:	d903      	bls.n	ff20 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e4>
    ff18:	2012      	movs	r0, #18
    ff1a:	bd70      	pop	{r4, r5, r6, pc}
    ff1c:	2030      	movs	r0, #48	; 0x30
    ff1e:	bd70      	pop	{r4, r5, r6, pc}
    ff20:	2000      	movs	r0, #0
    ff22:	bd70      	pop	{r4, r5, r6, pc}
    ff24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ff28:	461d      	mov	r5, r3
    ff2a:	4610      	mov	r0, r2
    ff2c:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
    ff30:	1f8b      	subs	r3, r1, #6
    ff32:	f640 427a 	movw	r2, #3194	; 0xc7a
    ff36:	9e08      	ldr	r6, [sp, #32]
    ff38:	4293      	cmp	r3, r2
    ff3a:	d81c      	bhi.n	ff76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ff3c:	1f83      	subs	r3, r0, #6
    ff3e:	4293      	cmp	r3, r2
    ff40:	d819      	bhi.n	ff76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ff42:	4281      	cmp	r1, r0
    ff44:	d817      	bhi.n	ff76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ff46:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    ff4a:	d214      	bcs.n	ff76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ff4c:	f1a4 010a 	sub.w	r1, r4, #10
    ff50:	1f12      	subs	r2, r2, #4
    ff52:	4291      	cmp	r1, r2
    ff54:	d80f      	bhi.n	ff76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ff56:	f7fd fdb4 	bl	dac2 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    ff5a:	1c6d      	adds	r5, r5, #1
    ff5c:	4368      	muls	r0, r5
    ff5e:	f240 2171 	movw	r1, #625	; 0x271
    ff62:	0040      	lsls	r0, r0, #1
    ff64:	434c      	muls	r4, r1
    ff66:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
    ff6a:	d204      	bcs.n	ff76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ff6c:	42b7      	cmp	r7, r6
    ff6e:	d802      	bhi.n	ff76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ff70:	2001      	movs	r0, #1
    ff72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ff76:	2000      	movs	r0, #0
    ff78:	e7fb      	b.n	ff72 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x336>
    ff7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ff7e:	4606      	mov	r6, r0
    ff80:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
    ff84:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
    ff88:	4615      	mov	r5, r2
    ff8a:	302c      	adds	r0, #44	; 0x2c
    ff8c:	f7f5 f96e 	bl	526c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>
    ff90:	4680      	mov	r8, r0
    ff92:	2102      	movs	r1, #2
    ff94:	f7fd fe33 	bl	dbfe <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    ff98:	4287      	cmp	r7, r0
    ff9a:	d200      	bcs.n	ff9e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x362>
    ff9c:	4638      	mov	r0, r7
    ff9e:	4607      	mov	r7, r0
    ffa0:	2102      	movs	r1, #2
    ffa2:	4640      	mov	r0, r8
    ffa4:	f7fd fe2b 	bl	dbfe <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    ffa8:	4284      	cmp	r4, r0
    ffaa:	d200      	bcs.n	ffae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x372>
    ffac:	4620      	mov	r0, r4
    ffae:	8831      	ldrh	r1, [r6, #0]
    ffb0:	8029      	strh	r1, [r5, #0]
    ffb2:	2f1b      	cmp	r7, #27
    ffb4:	d913      	bls.n	ffde <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3a2>
    ffb6:	2ffb      	cmp	r7, #251	; 0xfb
    ffb8:	d300      	bcc.n	ffbc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x380>
    ffba:	27fb      	movs	r7, #251	; 0xfb
    ffbc:	806f      	strh	r7, [r5, #2]
    ffbe:	281b      	cmp	r0, #27
    ffc0:	d90f      	bls.n	ffe2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3a6>
    ffc2:	28fb      	cmp	r0, #251	; 0xfb
    ffc4:	d300      	bcc.n	ffc8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x38c>
    ffc6:	20fb      	movs	r0, #251	; 0xfb
    ffc8:	80e8      	strh	r0, [r5, #6]
    ffca:	4640      	mov	r0, r8
    ffcc:	f7ff fe43 	bl	fc56 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a>
    ffd0:	80a8      	strh	r0, [r5, #4]
    ffd2:	4640      	mov	r0, r8
    ffd4:	f7ff fe3f 	bl	fc56 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a>
    ffd8:	8128      	strh	r0, [r5, #8]
    ffda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ffde:	271b      	movs	r7, #27
    ffe0:	e7ec      	b.n	ffbc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x380>
    ffe2:	201b      	movs	r0, #27
    ffe4:	e7f0      	b.n	ffc8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x38c>
    ffe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ffea:	7890      	ldrb	r0, [r2, #2]
    ffec:	9e06      	ldr	r6, [sp, #24]
    ffee:	461d      	mov	r5, r3
    fff0:	4614      	mov	r4, r2
    fff2:	b908      	cbnz	r0, fff8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3bc>
    fff4:	f7f7 fc16 	bl	7824 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fff8:	78e4      	ldrb	r4, [r4, #3]
    fffa:	4607      	mov	r7, r0
    fffc:	b914      	cbnz	r4, 10004 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3c8>
    fffe:	f7f7 fc11 	bl	7824 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10002:	4604      	mov	r4, r0
   10004:	b16f      	cbz	r7, 10022 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e6>
   10006:	b164      	cbz	r4, 10022 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e6>
   10008:	4638      	mov	r0, r7
   1000a:	f7ff fe2f 	bl	fc6c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30>
   1000e:	4620      	mov	r0, r4
   10010:	f7ff fe2c 	bl	fc6c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30>
   10014:	b12f      	cbz	r7, 10022 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e6>
   10016:	b124      	cbz	r4, 10022 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e6>
   10018:	702f      	strb	r7, [r5, #0]
   1001a:	7034      	strb	r4, [r6, #0]
   1001c:	2000      	movs	r0, #0
   1001e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10022:	2009      	movs	r0, #9
   10024:	e7fb      	b.n	1001e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e2>
   10026:	207f      	movs	r0, #127	; 0x7f
   10028:	f000 b821 	b.w	1006e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x432>
   1002c:	b508      	push	{r3, lr}
   1002e:	f890 1248 	ldrb.w	r1, [r0, #584]	; 0x248
   10032:	f890 00c4 	ldrb.w	r0, [r0, #196]	; 0xc4
   10036:	f88d 0000 	strb.w	r0, [sp]
   1003a:	9800      	ldr	r0, [sp, #0]
   1003c:	9000      	str	r0, [sp, #0]
   1003e:	f89d 0000 	ldrb.w	r0, [sp]
   10042:	b100      	cbz	r0, 10046 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x40a>
   10044:	2001      	movs	r0, #1
   10046:	1e40      	subs	r0, r0, #1
   10048:	4208      	tst	r0, r1
   1004a:	d003      	beq.n	10054 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x418>
   1004c:	2904      	cmp	r1, #4
   1004e:	d001      	beq.n	10054 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x418>
   10050:	2001      	movs	r0, #1
   10052:	bd08      	pop	{r3, pc}
   10054:	2000      	movs	r0, #0
   10056:	bd08      	pop	{r3, pc}
   10058:	b510      	push	{r4, lr}
   1005a:	f7f4 fc29 	bl	48b0 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
   1005e:	2804      	cmp	r0, #4
   10060:	d003      	beq.n	1006a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x42e>
   10062:	2805      	cmp	r0, #5
   10064:	d001      	beq.n	1006a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x42e>
   10066:	2000      	movs	r0, #0
   10068:	bd10      	pop	{r4, pc}
   1006a:	2001      	movs	r0, #1
   1006c:	bd10      	pop	{r4, pc}
   1006e:	b508      	push	{r3, lr}
   10070:	f640 1288 	movw	r2, #2440	; 0x988
   10074:	2300      	movs	r3, #0
   10076:	4669      	mov	r1, sp
   10078:	f7fc fb2e 	bl	c6d8 <mpsl_fem_tx_power_split>
   1007c:	bd08      	pop	{r3, pc}
   1007e:	b530      	push	{r4, r5, lr}
   10080:	f340 0400 	sbfx	r4, r0, #0, #1
   10084:	f340 0040 	sbfx	r0, r0, #1, #1
   10088:	1c40      	adds	r0, r0, #1
   1008a:	9d03      	ldr	r5, [sp, #12]
   1008c:	1c64      	adds	r4, r4, #1
   1008e:	d000      	beq.n	10092 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x456>
   10090:	b119      	cbz	r1, 1009a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x45e>
   10092:	b100      	cbz	r0, 10096 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x45a>
   10094:	b10a      	cbz	r2, 1009a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x45e>
   10096:	b91c      	cbnz	r4, 100a0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x464>
   10098:	e001      	b.n	1009e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x462>
   1009a:	2011      	movs	r0, #17
   1009c:	bd30      	pop	{r4, r5, pc}
   1009e:	2100      	movs	r1, #0
   100a0:	7019      	strb	r1, [r3, #0]
   100a2:	b900      	cbnz	r0, 100a6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x46a>
   100a4:	2200      	movs	r2, #0
   100a6:	702a      	strb	r2, [r5, #0]
   100a8:	2000      	movs	r0, #0
   100aa:	bd30      	pop	{r4, r5, pc}
   100ac:	b510      	push	{r4, lr}
   100ae:	f7ff ffd3 	bl	10058 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41c>
   100b2:	b120      	cbz	r0, 100be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x482>
   100b4:	f7f3 fa90 	bl	35d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
   100b8:	b108      	cbz	r0, 100be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x482>
   100ba:	2001      	movs	r0, #1
   100bc:	bd10      	pop	{r4, pc}
   100be:	2000      	movs	r0, #0
   100c0:	bd10      	pop	{r4, pc}
   100c2:	6802      	ldr	r2, [r0, #0]
   100c4:	b912      	cbnz	r2, 100cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x490>
   100c6:	6001      	str	r1, [r0, #0]
   100c8:	4770      	bx	lr
   100ca:	4602      	mov	r2, r0
   100cc:	6850      	ldr	r0, [r2, #4]
   100ce:	b108      	cbz	r0, 100d4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x498>
   100d0:	428a      	cmp	r2, r1
   100d2:	d1fa      	bne.n	100ca <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x48e>
   100d4:	428a      	cmp	r2, r1
   100d6:	d0f7      	beq.n	100c8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x48c>
   100d8:	6051      	str	r1, [r2, #4]
   100da:	4770      	bx	lr
   100dc:	b510      	push	{r4, lr}
   100de:	4604      	mov	r4, r0
   100e0:	e002      	b.n	100e8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ac>
   100e2:	6820      	ldr	r0, [r4, #0]
   100e4:	4780      	blx	r0
   100e6:	6864      	ldr	r4, [r4, #4]
   100e8:	2c00      	cmp	r4, #0
   100ea:	d1fa      	bne.n	100e2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a6>
   100ec:	bd10      	pop	{r4, pc}
   100ee:	b510      	push	{r4, lr}
   100f0:	2000      	movs	r0, #0
   100f2:	f7fd fb28 	bl	d746 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   100f6:	f7f1 f86d 	bl	11d4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   100fa:	f7f1 fa75 	bl	15e8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   100fe:	f7f1 fc03 	bl	1908 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   10102:	2800      	cmp	r0, #0
   10104:	d003      	beq.n	1010e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4d2>
   10106:	21df      	movs	r1, #223	; 0xdf
   10108:	2001      	movs	r0, #1
   1010a:	f7f0 fcab 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1010e:	bd10      	pop	{r4, pc}
   10110:	b510      	push	{r4, lr}
   10112:	f000 f80a 	bl	1012a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ee>
   10116:	f7fe fe6f 	bl	edf8 <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>
   1011a:	2800      	cmp	r0, #0
   1011c:	d004      	beq.n	10128 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ec>
   1011e:	f240 1161 	movw	r1, #353	; 0x161
   10122:	2001      	movs	r0, #1
   10124:	f7f0 fc9e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10128:	bd10      	pop	{r4, pc}
   1012a:	b510      	push	{r4, lr}
   1012c:	f7f4 fc08 	bl	4940 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>
   10130:	b110      	cbz	r0, 10138 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4fc>
   10132:	f240 113b 	movw	r1, #315	; 0x13b
   10136:	e004      	b.n	10142 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x506>
   10138:	f7fe fd4a 	bl	ebd0 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
   1013c:	b120      	cbz	r0, 10148 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x50c>
   1013e:	f44f 719e 	mov.w	r1, #316	; 0x13c
   10142:	2001      	movs	r0, #1
   10144:	f7f0 fc8e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10148:	f7f7 f858 	bl	71fc <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>
   1014c:	f7f3 f98e 	bl	346c <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
   10150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10154:	f7f6 beb4 	b.w	6ec0 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>
   10158:	000b0001 	.word	0x000b0001
   1015c:	000a0002 	.word	0x000a0002
   10160:	00090005 	.word	0x00090005
   10164:	0008000a 	.word	0x0008000a
   10168:	00070014 	.word	0x00070014
   1016c:	0006001e 	.word	0x0006001e
   10170:	00050032 	.word	0x00050032
   10174:	0004004b 	.word	0x0004004b
   10178:	00030064 	.word	0x00030064
   1017c:	00020096 	.word	0x00020096
   10180:	000100fa 	.word	0x000100fa
   10184:	000001f4 	.word	0x000001f4

00010188 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA>:
   10188:	b518      	push	{r3, r4, lr}
   1018a:	2200      	movs	r2, #0
   1018c:	704a      	strb	r2, [r1, #1]
   1018e:	2317      	movs	r3, #23
   10190:	700b      	strb	r3, [r1, #0]
   10192:	7202      	strb	r2, [r0, #8]
   10194:	f8d0 400a 	ldr.w	r4, [r0, #10]
   10198:	604c      	str	r4, [r1, #4]
   1019a:	89c3      	ldrh	r3, [r0, #14]
   1019c:	810b      	strh	r3, [r1, #8]
   1019e:	7a03      	ldrb	r3, [r0, #8]
   101a0:	f88d 3000 	strb.w	r3, [sp]
   101a4:	9b00      	ldr	r3, [sp, #0]
   101a6:	9300      	str	r3, [sp, #0]
   101a8:	f89d 3000 	ldrb.w	r3, [sp]
   101ac:	2b00      	cmp	r3, #0
   101ae:	d1f0      	bne.n	10192 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0xa>
   101b0:	bd18      	pop	{r3, r4, pc}

000101b2 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY>:
   101b2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   101b4:	460d      	mov	r5, r1
   101b6:	4604      	mov	r4, r0
   101b8:	f7f2 fb40 	bl	283c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
   101bc:	2600      	movs	r6, #0
   101be:	b1f8      	cbz	r0, 10200 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4e>
   101c0:	f5a4 70ca 	sub.w	r0, r4, #404	; 0x194
   101c4:	7226      	strb	r6, [r4, #8]
   101c6:	8800      	ldrh	r0, [r0, #0]
   101c8:	f8ad 0000 	strh.w	r0, [sp]
   101cc:	a902      	add	r1, sp, #8
   101ce:	f7fd fc6c 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   101d2:	b108      	cbz	r0, 101d8 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x26>
   101d4:	2124      	movs	r1, #36	; 0x24
   101d6:	e010      	b.n	101fa <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x48>
   101d8:	9803      	ldr	r0, [sp, #12]
   101da:	f810 1f66 	ldrb.w	r1, [r0, #102]!
   101de:	f88d 1002 	strb.w	r1, [sp, #2]
   101e2:	7841      	ldrb	r1, [r0, #1]
   101e4:	f88d 1003 	strb.w	r1, [sp, #3]
   101e8:	8840      	ldrh	r0, [r0, #2]
   101ea:	f8ad 0004 	strh.w	r0, [sp, #4]
   101ee:	2102      	movs	r1, #2
   101f0:	4668      	mov	r0, sp
   101f2:	f7ff fc9d 	bl	fb30 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   101f6:	b118      	cbz	r0, 10200 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4e>
   101f8:	213a      	movs	r1, #58	; 0x3a
   101fa:	207e      	movs	r0, #126	; 0x7e
   101fc:	f7f0 fc32 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10200:	2020      	movs	r0, #32
   10202:	7028      	strb	r0, [r5, #0]
   10204:	706e      	strb	r6, [r5, #1]
   10206:	f8d4 000a 	ldr.w	r0, [r4, #10]
   1020a:	6068      	str	r0, [r5, #4]
   1020c:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

0001020e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   1020e:	b510      	push	{r4, lr}
   10210:	f7f7 fe68 	bl	7ee4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   10214:	f000 f81d 	bl	10252 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   10218:	f7f7 fb80 	bl	791c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   1021c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10220:	f7f7 bc7a 	b.w	7b18 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00010224 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   10224:	b510      	push	{r4, lr}
   10226:	24c8      	movs	r4, #200	; 0xc8
   10228:	1e64      	subs	r4, r4, #1
   1022a:	b2e4      	uxtb	r4, r4
   1022c:	f7f7 fb94 	bl	7958 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   10230:	2802      	cmp	r0, #2
   10232:	d003      	beq.n	1023c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   10234:	2801      	cmp	r0, #1
   10236:	d000      	beq.n	1023a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   10238:	2000      	movs	r0, #0
   1023a:	bd10      	pop	{r4, pc}
   1023c:	2c00      	cmp	r4, #0
   1023e:	d1f3      	bne.n	10228 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   10240:	21ca      	movs	r1, #202	; 0xca
   10242:	203b      	movs	r0, #59	; 0x3b
   10244:	f7f0 fc0e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10248:	5840      	ldr	r0, [r0, r1]
   1024a:	2800      	cmp	r0, #0
   1024c:	d000      	beq.n	10250 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   1024e:	2001      	movs	r0, #1
   10250:	4770      	bx	lr

00010252 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   10252:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   10256:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1025a:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   1025e:	f3bf 8f4f 	dsb	sy
   10262:	f3bf 8f6f 	isb	sy
   10266:	f7f7 bcf1 	b.w	7c4c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   1026a:	2800      	cmp	r0, #0
   1026c:	db09      	blt.n	10282 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   1026e:	f000 021f 	and.w	r2, r0, #31
   10272:	2101      	movs	r1, #1
   10274:	4091      	lsls	r1, r2
   10276:	0940      	lsrs	r0, r0, #5
   10278:	0080      	lsls	r0, r0, #2
   1027a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1027e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10282:	4770      	bx	lr
   10284:	2800      	cmp	r0, #0
   10286:	db0d      	blt.n	102a4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   10288:	f000 021f 	and.w	r2, r0, #31
   1028c:	2101      	movs	r1, #1
   1028e:	4091      	lsls	r1, r2
   10290:	0940      	lsrs	r0, r0, #5
   10292:	0080      	lsls	r0, r0, #2
   10294:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10298:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   1029c:	f3bf 8f4f 	dsb	sy
   102a0:	f3bf 8f6f 	isb	sy
   102a4:	4770      	bx	lr
   102a6:	5840      	ldr	r0, [r0, r1]
   102a8:	2800      	cmp	r0, #0
   102aa:	d000      	beq.n	102ae <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   102ac:	2001      	movs	r0, #1
   102ae:	4770      	bx	lr
   102b0:	5840      	ldr	r0, [r0, r1]
   102b2:	2800      	cmp	r0, #0
   102b4:	d000      	beq.n	102b8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   102b6:	2001      	movs	r0, #1
   102b8:	4770      	bx	lr

000102ba <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   102ba:	b510      	push	{r4, lr}
   102bc:	4604      	mov	r4, r0
   102be:	4608      	mov	r0, r1
   102c0:	f7f7 ff30 	bl	8124 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   102c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   102c8:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   102cc:	fbb0 f0f1 	udiv	r0, r0, r1
   102d0:	1a20      	subs	r0, r4, r0
   102d2:	1e80      	subs	r0, r0, #2
   102d4:	bd10      	pop	{r4, pc}

000102d6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   102d6:	b510      	push	{r4, lr}
   102d8:	4604      	mov	r4, r0
   102da:	4608      	mov	r0, r1
   102dc:	f7f7 ff22 	bl	8124 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   102e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   102e4:	fbb0 f0f1 	udiv	r0, r0, r1
   102e8:	1a20      	subs	r0, r4, r0
   102ea:	bd10      	pop	{r4, pc}
   102ec:	2804      	cmp	r0, #4
   102ee:	d202      	bcs.n	102f6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x20>
   102f0:	f04f 0028 	mov.w	r0, #40	; 0x28
   102f4:	4770      	bx	lr
   102f6:	d102      	bne.n	102fe <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x28>
   102f8:	f04f 0010 	mov.w	r0, #16
   102fc:	4770      	bx	lr
   102fe:	f04f 0000 	mov.w	r0, #0
   10302:	4770      	bx	lr
   10304:	2100      	movs	r1, #0
   10306:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   1030a:	f800 1f24 	strb.w	r1, [r0, #36]!
   1030e:	7041      	strb	r1, [r0, #1]
   10310:	4770      	bx	lr

00010312 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
   10312:	b570      	push	{r4, r5, r6, lr}
   10314:	f7f8 fcc6 	bl	8ca4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   10318:	4605      	mov	r5, r0
   1031a:	2400      	movs	r4, #0
   1031c:	e006      	b.n	1032c <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
   1031e:	4620      	mov	r0, r4
   10320:	f7f8 fcc6 	bl	8cb0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   10324:	f7ff ffee 	bl	10304 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
   10328:	1c64      	adds	r4, r4, #1
   1032a:	b2e4      	uxtb	r4, r4
   1032c:	42ac      	cmp	r4, r5
   1032e:	d3f6      	bcc.n	1031e <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
   10330:	bd70      	pop	{r4, r5, r6, pc}

00010332 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
   10332:	f7fb b8c5 	b.w	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

00010336 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
   10336:	b510      	push	{r4, lr}
   10338:	2000      	movs	r0, #0
   1033a:	f7fb fbfb 	bl	bb34 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
   1033e:	6800      	ldr	r0, [r0, #0]
   10340:	2800      	cmp	r0, #0
   10342:	bf18      	it	ne
   10344:	2001      	movne	r0, #1
   10346:	bd10      	pop	{r4, pc}

00010348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
   10348:	0a41      	lsrs	r1, r0, #9
   1034a:	f643 5209 	movw	r2, #15625	; 0x3d09
   1034e:	4351      	muls	r1, r2
   10350:	f3c0 0008 	ubfx	r0, r0, #0, #9
   10354:	fb10 f002 	smulbb	r0, r0, r2
   10358:	f500 7080 	add.w	r0, r0, #256	; 0x100
   1035c:	eb01 2050 	add.w	r0, r1, r0, lsr #9
   10360:	4770      	bx	lr
   10362:	2800      	cmp	r0, #0
   10364:	db09      	blt.n	1037a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
   10366:	f000 021f 	and.w	r2, r0, #31
   1036a:	2101      	movs	r1, #1
   1036c:	4091      	lsls	r1, r2
   1036e:	0940      	lsrs	r0, r0, #5
   10370:	0080      	lsls	r0, r0, #2
   10372:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10376:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1037a:	4770      	bx	lr
   1037c:	2800      	cmp	r0, #0
   1037e:	db0d      	blt.n	1039c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
   10380:	f000 021f 	and.w	r2, r0, #31
   10384:	2101      	movs	r1, #1
   10386:	4091      	lsls	r1, r2
   10388:	0940      	lsrs	r0, r0, #5
   1038a:	0080      	lsls	r0, r0, #2
   1038c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10390:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10394:	f3bf 8f4f 	dsb	sy
   10398:	f3bf 8f6f 	isb	sy
   1039c:	4770      	bx	lr
   1039e:	5840      	ldr	r0, [r0, r1]
   103a0:	2800      	cmp	r0, #0
   103a2:	d000      	beq.n	103a6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x5e>
   103a4:	2001      	movs	r0, #1
   103a6:	4770      	bx	lr
   103a8:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
   103ac:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
   103b0:	f002 0201 	and.w	r2, r2, #1
   103b4:	03c0      	lsls	r0, r0, #15
   103b6:	d503      	bpl.n	103c0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   103b8:	428a      	cmp	r2, r1
   103ba:	d101      	bne.n	103c0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   103bc:	2001      	movs	r0, #1
   103be:	4770      	bx	lr
   103c0:	2000      	movs	r0, #0
   103c2:	4770      	bx	lr

000103c4 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
   103c4:	b510      	push	{r4, lr}
   103c6:	2101      	movs	r1, #1
   103c8:	0788      	lsls	r0, r1, #30
   103ca:	f7fb ff6f 	bl	c2ac <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   103ce:	2800      	cmp	r0, #0
   103d0:	d000      	beq.n	103d4 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
   103d2:	2001      	movs	r0, #1
   103d4:	bd10      	pop	{r4, pc}

000103d6 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
   103d6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   103da:	2101      	movs	r1, #1
   103dc:	6001      	str	r1, [r0, #0]
   103de:	4770      	bx	lr

000103e0 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
   103e0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   103e4:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
   103e8:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
   103ec:	f002 0203 	and.w	r2, r2, #3
   103f0:	03c9      	lsls	r1, r1, #15
   103f2:	d503      	bpl.n	103fc <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   103f4:	4282      	cmp	r2, r0
   103f6:	d101      	bne.n	103fc <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   103f8:	2001      	movs	r0, #1
   103fa:	4770      	bx	lr
   103fc:	2000      	movs	r0, #0
   103fe:	4770      	bx	lr

00010400 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
   10400:	b510      	push	{r4, lr}
   10402:	2100      	movs	r1, #0
   10404:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10408:	f7fb ff50 	bl	c2ac <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   1040c:	2800      	cmp	r0, #0
   1040e:	d000      	beq.n	10412 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
   10410:	2001      	movs	r0, #1
   10412:	bd10      	pop	{r4, pc}
   10414:	2800      	cmp	r0, #0
   10416:	db09      	blt.n	1042c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
   10418:	f000 021f 	and.w	r2, r0, #31
   1041c:	2101      	movs	r1, #1
   1041e:	4091      	lsls	r1, r2
   10420:	0940      	lsrs	r0, r0, #5
   10422:	0080      	lsls	r0, r0, #2
   10424:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10428:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1042c:	4770      	bx	lr
   1042e:	2800      	cmp	r0, #0
   10430:	db0d      	blt.n	1044e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
   10432:	f000 021f 	and.w	r2, r0, #31
   10436:	2101      	movs	r1, #1
   10438:	4091      	lsls	r1, r2
   1043a:	0940      	lsrs	r0, r0, #5
   1043c:	0080      	lsls	r0, r0, #2
   1043e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10442:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10446:	f3bf 8f4f 	dsb	sy
   1044a:	f3bf 8f6f 	isb	sy
   1044e:	4770      	bx	lr
   10450:	00021000 	.word	0x00021000
   10454:	000000fa 	.word	0x000000fa
   10458:	cc9ef18c 	.word	0xcc9ef18c
   1045c:	a7d74134 	.word	0xa7d74134
   10460:	1459f70e 	.word	0x1459f70e
   10464:	67d72bbb 	.word	0x67d72bbb
   10468:	ebbebb7f 	.word	0xebbebb7f
   1046c:	2800      	cmp	r0, #0
   1046e:	db09      	blt.n	10484 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
   10470:	f000 021f 	and.w	r2, r0, #31
   10474:	2101      	movs	r1, #1
   10476:	4091      	lsls	r1, r2
   10478:	0940      	lsrs	r0, r0, #5
   1047a:	0080      	lsls	r0, r0, #2
   1047c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10480:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10484:	4770      	bx	lr

00010486 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
   10486:	f3ef 8110 	mrs	r1, PRIMASK
   1048a:	b672      	cpsid	i
   1048c:	7802      	ldrb	r2, [r0, #0]
   1048e:	2a01      	cmp	r2, #1
   10490:	d001      	beq.n	10496 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
   10492:	2201      	movs	r2, #1
   10494:	e000      	b.n	10498 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
   10496:	2200      	movs	r2, #0
   10498:	2301      	movs	r3, #1
   1049a:	7003      	strb	r3, [r0, #0]
   1049c:	b901      	cbnz	r1, 104a0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
   1049e:	b662      	cpsie	i
   104a0:	b10a      	cbz	r2, 104a6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
   104a2:	2000      	movs	r0, #0
   104a4:	4770      	bx	lr
   104a6:	f06f 0022 	mvn.w	r0, #34	; 0x22
   104aa:	4770      	bx	lr

000104ac <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
   104ac:	2100      	movs	r1, #0
   104ae:	7001      	strb	r1, [r0, #0]
   104b0:	4608      	mov	r0, r1
   104b2:	4770      	bx	lr

000104b4 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
   104b4:	f3ef 8110 	mrs	r1, PRIMASK
   104b8:	b672      	cpsid	i
   104ba:	2200      	movs	r2, #0
   104bc:	7002      	strb	r2, [r0, #0]
   104be:	b901      	cbnz	r1, 104c2 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
   104c0:	b662      	cpsie	i
   104c2:	2000      	movs	r0, #0
   104c4:	4770      	bx	lr

000104c6 <mpsl_low_priority_process>:
   104c6:	f7fc b847 	b.w	c558 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

000104ca <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
   104ca:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   104ce:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   104d2:	280f      	cmp	r0, #15
   104d4:	d001      	beq.n	104da <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
   104d6:	2000      	movs	r0, #0
   104d8:	4770      	bx	lr
   104da:	2001      	movs	r0, #1
   104dc:	4770      	bx	lr

000104de <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
   104de:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   104e2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   104e6:	280a      	cmp	r0, #10
   104e8:	d001      	beq.n	104ee <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
   104ea:	2000      	movs	r0, #0
   104ec:	4770      	bx	lr
   104ee:	2001      	movs	r0, #1
   104f0:	4770      	bx	lr

000104f2 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
   104f2:	b500      	push	{lr}
   104f4:	f7ff fff3 	bl	104de <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   104f8:	b120      	cbz	r0, 10504 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
   104fa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   104fe:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10502:	b108      	cbz	r0, 10508 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
   10504:	2000      	movs	r0, #0
   10506:	bd00      	pop	{pc}
   10508:	2001      	movs	r0, #1
   1050a:	bd00      	pop	{pc}

0001050c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
   1050c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10510:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10514:	280e      	cmp	r0, #14
   10516:	d001      	beq.n	1051c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
   10518:	2000      	movs	r0, #0
   1051a:	4770      	bx	lr
   1051c:	2001      	movs	r0, #1
   1051e:	4770      	bx	lr

00010520 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
   10520:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10524:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10528:	2810      	cmp	r0, #16
   1052a:	d001      	beq.n	10530 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
   1052c:	2000      	movs	r0, #0
   1052e:	4770      	bx	lr
   10530:	2001      	movs	r0, #1
   10532:	4770      	bx	lr

00010534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
   10534:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10538:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   1053c:	2806      	cmp	r0, #6
   1053e:	d003      	beq.n	10548 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10540:	1c40      	adds	r0, r0, #1
   10542:	d001      	beq.n	10548 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10544:	2000      	movs	r0, #0
   10546:	4770      	bx	lr
   10548:	2001      	movs	r0, #1
   1054a:	4770      	bx	lr

0001054c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
   1054c:	b500      	push	{lr}
   1054e:	f7ff fff1 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10552:	b148      	cbz	r0, 10568 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10554:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10558:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   1055c:	2806      	cmp	r0, #6
   1055e:	d303      	bcc.n	10568 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10560:	1c40      	adds	r0, r0, #1
   10562:	d001      	beq.n	10568 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10564:	2001      	movs	r0, #1
   10566:	bd00      	pop	{pc}
   10568:	2000      	movs	r0, #0
   1056a:	bd00      	pop	{pc}

0001056c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
   1056c:	b500      	push	{lr}
   1056e:	f7ff ffe1 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10572:	b138      	cbz	r0, 10584 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
   10574:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10578:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   1057c:	2806      	cmp	r0, #6
   1057e:	d303      	bcc.n	10588 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10580:	1c40      	adds	r0, r0, #1
   10582:	d001      	beq.n	10588 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10584:	2000      	movs	r0, #0
   10586:	bd00      	pop	{pc}
   10588:	2001      	movs	r0, #1
   1058a:	bd00      	pop	{pc}

0001058c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
   1058c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10590:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10594:	280d      	cmp	r0, #13
   10596:	d001      	beq.n	1059c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
   10598:	2000      	movs	r0, #0
   1059a:	4770      	bx	lr
   1059c:	2001      	movs	r0, #1
   1059e:	4770      	bx	lr

000105a0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
   105a0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   105a4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   105a8:	2808      	cmp	r0, #8
   105aa:	d001      	beq.n	105b0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
   105ac:	2000      	movs	r0, #0
   105ae:	4770      	bx	lr
   105b0:	2001      	movs	r0, #1
   105b2:	4770      	bx	lr

000105b4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
   105b4:	f7fc b80a 	b.w	c5cc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

000105b8 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
   105b8:	f7fc b808 	b.w	c5cc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

000105bc <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>:
   105bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   105c0:	428a      	cmp	r2, r1
   105c2:	d803      	bhi.n	105cc <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x10>
   105c4:	2179      	movs	r1, #121	; 0x79
   105c6:	2096      	movs	r0, #150	; 0x96
   105c8:	f7fb fec6 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   105cc:	fab2 f382 	clz	r3, r2
   105d0:	b13b      	cbz	r3, 105e2 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x26>
   105d2:	4099      	lsls	r1, r3
   105d4:	f1c3 0420 	rsb	r4, r3, #32
   105d8:	fa20 f404 	lsr.w	r4, r0, r4
   105dc:	4321      	orrs	r1, r4
   105de:	4098      	lsls	r0, r3
   105e0:	409a      	lsls	r2, r3
   105e2:	0c14      	lsrs	r4, r2, #16
   105e4:	0c07      	lsrs	r7, r0, #16
   105e6:	b286      	uxth	r6, r0
   105e8:	fbb1 f0f4 	udiv	r0, r1, r4
   105ec:	fbb1 f3f4 	udiv	r3, r1, r4
   105f0:	fb04 1c10 	mls	ip, r4, r0, r1
   105f4:	b295      	uxth	r5, r2
   105f6:	fb03 f005 	mul.w	r0, r3, r5
   105fa:	eb07 4c0c 	add.w	ip, r7, ip, lsl #16
   105fe:	4560      	cmp	r0, ip
   10600:	d907      	bls.n	10612 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x56>
   10602:	eba0 000c 	sub.w	r0, r0, ip
   10606:	4290      	cmp	r0, r2
   10608:	d901      	bls.n	1060e <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x52>
   1060a:	2002      	movs	r0, #2
   1060c:	e000      	b.n	10610 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x54>
   1060e:	2001      	movs	r0, #1
   10610:	1a1b      	subs	r3, r3, r0
   10612:	0409      	lsls	r1, r1, #16
   10614:	0418      	lsls	r0, r3, #16
   10616:	19c9      	adds	r1, r1, r7
   10618:	fba3 3702 	umull	r3, r7, r3, r2
   1061c:	1acf      	subs	r7, r1, r3
   1061e:	fbb7 f1f4 	udiv	r1, r7, r4
   10622:	fbb7 f3f4 	udiv	r3, r7, r4
   10626:	fb04 7413 	mls	r4, r4, r3, r7
   1062a:	fb01 f305 	mul.w	r3, r1, r5
   1062e:	eb06 4404 	add.w	r4, r6, r4, lsl #16
   10632:	42a3      	cmp	r3, r4
   10634:	d906      	bls.n	10644 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x88>
   10636:	1b1b      	subs	r3, r3, r4
   10638:	4293      	cmp	r3, r2
   1063a:	d901      	bls.n	10640 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x84>
   1063c:	2202      	movs	r2, #2
   1063e:	e000      	b.n	10642 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x86>
   10640:	2201      	movs	r2, #1
   10642:	1a89      	subs	r1, r1, r2
   10644:	4308      	orrs	r0, r1
   10646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001064a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
   1064a:	2a00      	cmp	r2, #0
   1064c:	bf04      	itt	eq
   1064e:	2000      	moveq	r0, #0
   10650:	4770      	bxeq	lr
   10652:	1e52      	subs	r2, r2, #1
   10654:	d007      	beq.n	10666 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
   10656:	7803      	ldrb	r3, [r0, #0]
   10658:	f891 c000 	ldrb.w	ip, [r1]
   1065c:	4563      	cmp	r3, ip
   1065e:	bf04      	itt	eq
   10660:	1c40      	addeq	r0, r0, #1
   10662:	1c49      	addeq	r1, r1, #1
   10664:	d0f5      	beq.n	10652 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
   10666:	7800      	ldrb	r0, [r0, #0]
   10668:	7809      	ldrb	r1, [r1, #0]
   1066a:	1a40      	subs	r0, r0, r1
   1066c:	4770      	bx	lr

0001066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
   1066e:	b4f0      	push	{r4, r5, r6, r7}
   10670:	ea80 0c01 	eor.w	ip, r0, r1
   10674:	4603      	mov	r3, r0
   10676:	f01c 0f03 	tst.w	ip, #3
   1067a:	d13c      	bne.n	106f6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   1067c:	f013 0f03 	tst.w	r3, #3
   10680:	d00b      	beq.n	1069a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
   10682:	2a00      	cmp	r2, #0
   10684:	bf04      	itt	eq
   10686:	bcf0      	popeq	{r4, r5, r6, r7}
   10688:	4770      	bxeq	lr
   1068a:	f811 cb01 	ldrb.w	ip, [r1], #1
   1068e:	f803 cb01 	strb.w	ip, [r3], #1
   10692:	1e52      	subs	r2, r2, #1
   10694:	f013 0f03 	tst.w	r3, #3
   10698:	d1f3      	bne.n	10682 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
   1069a:	2a03      	cmp	r2, #3
   1069c:	d94f      	bls.n	1073e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   1069e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   106a2:	d24c      	bcs.n	1073e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   106a4:	f1c2 0c00 	rsb	ip, r2, #0
   106a8:	ea4f 74ec 	mov.w	r4, ip, asr #31
   106ac:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
   106b0:	ea4f 0cac 	mov.w	ip, ip, asr #2
   106b4:	f1cc 0c00 	rsb	ip, ip, #0
   106b8:	f1bc 0f00 	cmp.w	ip, #0
   106bc:	dd1b      	ble.n	106f6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   106be:	1f0d      	subs	r5, r1, #4
   106c0:	1f1c      	subs	r4, r3, #4
   106c2:	f01c 0f01 	tst.w	ip, #1
   106c6:	d003      	beq.n	106d0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
   106c8:	f855 6f04 	ldr.w	r6, [r5, #4]!
   106cc:	f844 6f04 	str.w	r6, [r4, #4]!
   106d0:	ea5f 066c 	movs.w	r6, ip, asr #1
   106d4:	d007      	beq.n	106e6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
   106d6:	686f      	ldr	r7, [r5, #4]
   106d8:	6067      	str	r7, [r4, #4]
   106da:	f855 7f08 	ldr.w	r7, [r5, #8]!
   106de:	f844 7f08 	str.w	r7, [r4, #8]!
   106e2:	1e76      	subs	r6, r6, #1
   106e4:	d1f7      	bne.n	106d6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
   106e6:	eb01 018c 	add.w	r1, r1, ip, lsl #2
   106ea:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   106ee:	f1cc 0c00 	rsb	ip, ip, #0
   106f2:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   106f6:	2a00      	cmp	r2, #0
   106f8:	bf04      	itt	eq
   106fa:	bcf0      	popeq	{r4, r5, r6, r7}
   106fc:	4770      	bxeq	lr
   106fe:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10702:	d226      	bcs.n	10752 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   10704:	2a00      	cmp	r2, #0
   10706:	bfdc      	itt	le
   10708:	bcf0      	pople	{r4, r5, r6, r7}
   1070a:	4770      	bxle	lr
   1070c:	1e49      	subs	r1, r1, #1
   1070e:	1e5b      	subs	r3, r3, #1
   10710:	f012 0f01 	tst.w	r2, #1
   10714:	d003      	beq.n	1071e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
   10716:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   1071a:	f803 cf01 	strb.w	ip, [r3, #1]!
   1071e:	1052      	asrs	r2, r2, #1
   10720:	bf04      	itt	eq
   10722:	bcf0      	popeq	{r4, r5, r6, r7}
   10724:	4770      	bxeq	lr
   10726:	f891 c001 	ldrb.w	ip, [r1, #1]
   1072a:	f883 c001 	strb.w	ip, [r3, #1]
   1072e:	f811 cf02 	ldrb.w	ip, [r1, #2]!
   10732:	f803 cf02 	strb.w	ip, [r3, #2]!
   10736:	1e52      	subs	r2, r2, #1
   10738:	d1f5      	bne.n	10726 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
   1073a:	bcf0      	pop	{r4, r5, r6, r7}
   1073c:	4770      	bx	lr
   1073e:	2a04      	cmp	r2, #4
   10740:	d3d9      	bcc.n	106f6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10742:	f851 cb04 	ldr.w	ip, [r1], #4
   10746:	1f12      	subs	r2, r2, #4
   10748:	f843 cb04 	str.w	ip, [r3], #4
   1074c:	2a04      	cmp	r2, #4
   1074e:	d2f8      	bcs.n	10742 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
   10750:	e7d1      	b.n	106f6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10752:	f811 cb01 	ldrb.w	ip, [r1], #1
   10756:	f803 cb01 	strb.w	ip, [r3], #1
   1075a:	1e52      	subs	r2, r2, #1
   1075c:	d1f9      	bne.n	10752 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   1075e:	bcf0      	pop	{r4, r5, r6, r7}
   10760:	4770      	bx	lr

00010762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
   10762:	b470      	push	{r4, r5, r6}
   10764:	4603      	mov	r3, r0
   10766:	f001 0cff 	and.w	ip, r1, #255	; 0xff
   1076a:	f010 0f03 	tst.w	r0, #3
   1076e:	d009      	beq.n	10784 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
   10770:	2a00      	cmp	r2, #0
   10772:	bf04      	itt	eq
   10774:	bc70      	popeq	{r4, r5, r6}
   10776:	4770      	bxeq	lr
   10778:	f803 cb01 	strb.w	ip, [r3], #1
   1077c:	1e52      	subs	r2, r2, #1
   1077e:	f013 0f03 	tst.w	r3, #3
   10782:	d1f5      	bne.n	10770 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
   10784:	b2c9      	uxtb	r1, r1
   10786:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1078a:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
   1078e:	2a03      	cmp	r2, #3
   10790:	d939      	bls.n	10806 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   10792:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10796:	d236      	bcs.n	10806 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   10798:	4251      	negs	r1, r2
   1079a:	17cc      	asrs	r4, r1, #31
   1079c:	eb01 7194 	add.w	r1, r1, r4, lsr #30
   107a0:	1089      	asrs	r1, r1, #2
   107a2:	424e      	negs	r6, r1
   107a4:	2e00      	cmp	r6, #0
   107a6:	dd11      	ble.n	107cc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   107a8:	1f19      	subs	r1, r3, #4
   107aa:	f016 0f01 	tst.w	r6, #1
   107ae:	bf18      	it	ne
   107b0:	f841 5f04 	strne.w	r5, [r1, #4]!
   107b4:	1074      	asrs	r4, r6, #1
   107b6:	d004      	beq.n	107c2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
   107b8:	604d      	str	r5, [r1, #4]
   107ba:	f841 5f08 	str.w	r5, [r1, #8]!
   107be:	1e64      	subs	r4, r4, #1
   107c0:	d1fa      	bne.n	107b8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
   107c2:	4271      	negs	r1, r6
   107c4:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   107c8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   107cc:	2a00      	cmp	r2, #0
   107ce:	bf04      	itt	eq
   107d0:	bc70      	popeq	{r4, r5, r6}
   107d2:	4770      	bxeq	lr
   107d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   107d8:	d21d      	bcs.n	10816 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   107da:	2a00      	cmp	r2, #0
   107dc:	bfdc      	itt	le
   107de:	bc70      	pople	{r4, r5, r6}
   107e0:	4770      	bxle	lr
   107e2:	1e59      	subs	r1, r3, #1
   107e4:	f012 0f01 	tst.w	r2, #1
   107e8:	bf18      	it	ne
   107ea:	f801 cf01 	strbne.w	ip, [r1, #1]!
   107ee:	1052      	asrs	r2, r2, #1
   107f0:	bf04      	itt	eq
   107f2:	bc70      	popeq	{r4, r5, r6}
   107f4:	4770      	bxeq	lr
   107f6:	f881 c001 	strb.w	ip, [r1, #1]
   107fa:	f801 cf02 	strb.w	ip, [r1, #2]!
   107fe:	1e52      	subs	r2, r2, #1
   10800:	d1f9      	bne.n	107f6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
   10802:	bc70      	pop	{r4, r5, r6}
   10804:	4770      	bx	lr
   10806:	2a04      	cmp	r2, #4
   10808:	d3e0      	bcc.n	107cc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   1080a:	1f12      	subs	r2, r2, #4
   1080c:	f843 5b04 	str.w	r5, [r3], #4
   10810:	2a04      	cmp	r2, #4
   10812:	d2fa      	bcs.n	1080a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
   10814:	e7da      	b.n	107cc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10816:	f803 cb01 	strb.w	ip, [r3], #1
   1081a:	1e52      	subs	r2, r2, #1
   1081c:	d1fb      	bne.n	10816 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   1081e:	bc70      	pop	{r4, r5, r6}
   10820:	4770      	bx	lr
   10822:	f04f 30ff 	mov.w	r0, #4294967295
   10826:	4770      	bx	lr
   10828:	2000      	movs	r0, #0
   1082a:	4770      	bx	lr
   1082c:	2000      	movs	r0, #0
   1082e:	4770      	bx	lr
   10830:	f04f 30ff 	mov.w	r0, #4294967295
   10834:	4770      	bx	lr
   10836:	4770      	bx	lr
   10838:	4770      	bx	lr
   1083a:	2000      	movs	r0, #0
   1083c:	4770      	bx	lr
   1083e:	2100      	movs	r1, #0
   10840:	7001      	strb	r1, [r0, #0]
   10842:	4770      	bx	lr
   10844:	f04f 30ff 	mov.w	r0, #4294967295
   10848:	4770      	bx	lr
   1084a:	f04f 30ff 	mov.w	r0, #4294967295
   1084e:	4770      	bx	lr
   10850:	2100      	movs	r1, #0
   10852:	7001      	strb	r1, [r0, #0]
   10854:	4770      	bx	lr
   10856:	f04f 30ff 	mov.w	r0, #4294967295
   1085a:	4770      	bx	lr
   1085c:	f04f 30ff 	mov.w	r0, #4294967295
   10860:	4770      	bx	lr
   10862:	7800      	ldrb	r0, [r0, #0]
   10864:	2800      	cmp	r0, #0
   10866:	d001      	beq.n	1086c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
   10868:	f06f 0015 	mvn.w	r0, #21
   1086c:	4770      	bx	lr
   1086e:	2000      	movs	r0, #0
   10870:	4770      	bx	lr
   10872:	2200      	movs	r2, #0
   10874:	f000 b802 	b.w	1087c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

00010878 <mpsl_fem_init>:
   10878:	f7f8 b982 	b.w	8b80 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

0001087c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
   1087c:	b570      	push	{r4, r5, r6, lr}
   1087e:	4614      	mov	r4, r2
   10880:	460d      	mov	r5, r1
   10882:	1b00      	subs	r0, r0, r4
   10884:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   10888:	4288      	cmp	r0, r1
   1088a:	da01      	bge.n	10890 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
   1088c:	4608      	mov	r0, r1
   1088e:	e002      	b.n	10896 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   10890:	287f      	cmp	r0, #127	; 0x7f
   10892:	dd00      	ble.n	10896 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   10894:	207f      	movs	r0, #127	; 0x7f
   10896:	4619      	mov	r1, r3
   10898:	b240      	sxtb	r0, r0
   1089a:	f7f8 f9a5 	bl	8be8 <mpsl_tx_power_radio_supported_power_adjust>
   1089e:	7028      	strb	r0, [r5, #0]
   108a0:	706c      	strb	r4, [r5, #1]
   108a2:	2100      	movs	r1, #0
   108a4:	4420      	add	r0, r4
   108a6:	70a9      	strb	r1, [r5, #2]
   108a8:	b240      	sxtb	r0, r0
   108aa:	bd70      	pop	{r4, r5, r6, pc}
   108ac:	1702080c 	.word	0x1702080c
   108b0:	0201010d 	.word	0x0201010d
   108b4:	01010909 	.word	0x01010909
   108b8:	18090206 	.word	0x18090206
   108bc:	01010318 	.word	0x01010318
   108c0:	03030909 	.word	0x03030909
   108c4:	01020305 	.word	0x01020305
   108c8:	24020223 	.word	0x24020223
   108cc:	04041009 	.word	0x04041009
   108d0:	0b0b0505 	.word	0x0b0b0505
   108d4:	0b04      	.short	0x0b04
   108d6:	2b          	.byte	0x2b
   108d7:	25          	.byte	0x25
   108d8:	2726      	.short	0x2726
   108da:	0301      	.short	0x0301
   108dc:	0101      	.short	0x0101
   108de:	01          	.byte	0x01
   108df:	d8          	.byte	0xd8
   108e0:	f8f4f0ec 	.word	0xf8f4f0ec
   108e4:	030200fc 	.word	0x030200fc
   108e8:	07060504 	.word	0x07060504
   108ec:	00000008 	.word	0x00000008
	...
   10900:	01010100 	.word	0x01010100
   10904:	02020201 	.word	0x02020201
   10908:	03030302 	.word	0x03030302
   1090c:	04040403 	.word	0x04040403
   10910:	05050504 	.word	0x05050504
   10914:	07060605 	.word	0x07060605
   10918:	0b0a0908 	.word	0x0b0a0908
   1091c:	00000d0c 	.word	0x00000d0c
	...
   10930:	01010000 	.word	0x01010000
   10934:	02020101 	.word	0x02020101
   10938:	03030202 	.word	0x03030202
   1093c:	04040303 	.word	0x04040303
   10940:	05050404 	.word	0x05050404
   10944:	06060505 	.word	0x06060505
   10948:	00090806 	.word	0x00090806

0001094c <settings_frame_cb>:
        .id = TTPMS_SETTINGS_FRAME_ID,
        .mask = CAN_STD_ID_MASK
};

void settings_frame_cb(const struct device *dev, struct can_frame *frame, void *user_data)
{
   1094c:	b510      	push	{r4, lr}
   1094e:	b09a      	sub	sp, #104	; 0x68
   10950:	460c      	mov	r4, r1
    if (frame->data[0] && 0x01) {
   10952:	7a0b      	ldrb	r3, [r1, #8]
   10954:	2b00      	cmp	r3, #0
   10956:	d04b      	beq.n	109f0 <settings_frame_cb+0xa4>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10958:	4b6f      	ldr	r3, [pc, #444]	; (10b18 <settings_frame_cb+0x1cc>)
   1095a:	f3bf 8f5b 	dmb	ish
   1095e:	e853 2f00 	ldrex	r2, [r3]
   10962:	f442 7180 	orr.w	r1, r2, #256	; 0x100
   10966:	e843 1000 	strex	r0, r1, [r3]
   1096a:	2800      	cmp	r0, #0
   1096c:	d1f7      	bne.n	1095e <settings_frame_cb+0x12>
   1096e:	f3bf 8f5b 	dmb	ish
		if(!atomic_test_and_set_bit(flags, TEMP_ENABLED_FLAG)) {
   10972:	f412 7f80 	tst.w	r2, #256	; 0x100
   10976:	d015      	beq.n	109a4 <settings_frame_cb+0x58>
		if(atomic_test_and_clear_bit(flags, TEMP_ENABLED_FLAG)) {
			LOG_INF("TEMP DISABLED via CAN");
		}
	}

	if (frame->data[0] && 0x02) {
   10978:	7a23      	ldrb	r3, [r4, #8]
   1097a:	2b00      	cmp	r3, #0
   1097c:	f000 8094 	beq.w	10aa8 <settings_frame_cb+0x15c>
   10980:	4b65      	ldr	r3, [pc, #404]	; (10b18 <settings_frame_cb+0x1cc>)
   10982:	f3bf 8f5b 	dmb	ish
   10986:	e853 2f00 	ldrex	r2, [r3]
   1098a:	f442 7100 	orr.w	r1, r2, #512	; 0x200
   1098e:	e843 1000 	strex	r0, r1, [r3]
   10992:	2800      	cmp	r0, #0
   10994:	d1f7      	bne.n	10986 <settings_frame_cb+0x3a>
   10996:	f3bf 8f5b 	dmb	ish
		if(!atomic_test_and_set_bit(flags, PRESSURE_ENABLED_FLAG)) {
   1099a:	f412 7f00 	tst.w	r2, #512	; 0x200
   1099e:	d05d      	beq.n	10a5c <settings_frame_cb+0x110>
	} else {
		if(atomic_test_and_clear_bit(flags, PRESSURE_ENABLED_FLAG)) {
			LOG_INF("PRESSURE DISABLED via CAN");
		}
	}
}
   109a0:	b01a      	add	sp, #104	; 0x68
   109a2:	bd10      	pop	{r4, pc}
			LOG_INF("TEMP ENABLED via CAN");
   109a4:	4b5d      	ldr	r3, [pc, #372]	; (10b1c <settings_frame_cb+0x1d0>)
   109a6:	930d      	str	r3, [sp, #52]	; 0x34
   109a8:	2302      	movs	r3, #2
   109aa:	f88d 3004 	strb.w	r3, [sp, #4]
   109ae:	2300      	movs	r3, #0
   109b0:	f88d 3005 	strb.w	r3, [sp, #5]
   109b4:	f88d 3006 	strb.w	r3, [sp, #6]
   109b8:	f88d 3007 	strb.w	r3, [sp, #7]
   109bc:	9a01      	ldr	r2, [sp, #4]
   109be:	920c      	str	r2, [sp, #48]	; 0x30
   109c0:	4619      	mov	r1, r3
   109c2:	f363 0100 	bfi	r1, r3, #0, #1
   109c6:	f363 0141 	bfi	r1, r3, #1, #1
   109ca:	f363 0182 	bfi	r1, r3, #2, #1
   109ce:	f363 01c5 	bfi	r1, r3, #3, #3
   109d2:	2203      	movs	r2, #3
   109d4:	f362 1188 	bfi	r1, r2, #6, #3
   109d8:	2208      	movs	r2, #8
   109da:	f362 2152 	bfi	r1, r2, #9, #10
   109de:	f363 41de 	bfi	r1, r3, #19, #12
   109e2:	f363 71df 	bfi	r1, r3, #31, #1
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
   109e6:	aa0c      	add	r2, sp, #48	; 0x30
   109e8:	484d      	ldr	r0, [pc, #308]	; (10b20 <settings_frame_cb+0x1d4>)
   109ea:	f016 f934 	bl	26c56 <z_impl_z_log_msg_static_create>
   109ee:	e7c3      	b.n	10978 <settings_frame_cb+0x2c>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   109f0:	4b49      	ldr	r3, [pc, #292]	; (10b18 <settings_frame_cb+0x1cc>)
   109f2:	f3bf 8f5b 	dmb	ish
   109f6:	e853 2f00 	ldrex	r2, [r3]
   109fa:	f422 7180 	bic.w	r1, r2, #256	; 0x100
   109fe:	e843 1000 	strex	r0, r1, [r3]
   10a02:	2800      	cmp	r0, #0
   10a04:	d1f7      	bne.n	109f6 <settings_frame_cb+0xaa>
   10a06:	f3bf 8f5b 	dmb	ish
		if(atomic_test_and_clear_bit(flags, TEMP_ENABLED_FLAG)) {
   10a0a:	f412 7f80 	tst.w	r2, #256	; 0x100
   10a0e:	d0b3      	beq.n	10978 <settings_frame_cb+0x2c>
			LOG_INF("TEMP DISABLED via CAN");
   10a10:	4b44      	ldr	r3, [pc, #272]	; (10b24 <settings_frame_cb+0x1d8>)
   10a12:	9307      	str	r3, [sp, #28]
   10a14:	2302      	movs	r3, #2
   10a16:	f88d 3004 	strb.w	r3, [sp, #4]
   10a1a:	2300      	movs	r3, #0
   10a1c:	f88d 3005 	strb.w	r3, [sp, #5]
   10a20:	f88d 3006 	strb.w	r3, [sp, #6]
   10a24:	f88d 3007 	strb.w	r3, [sp, #7]
   10a28:	9a01      	ldr	r2, [sp, #4]
   10a2a:	9206      	str	r2, [sp, #24]
   10a2c:	4619      	mov	r1, r3
   10a2e:	f363 0100 	bfi	r1, r3, #0, #1
   10a32:	f363 0141 	bfi	r1, r3, #1, #1
   10a36:	f363 0182 	bfi	r1, r3, #2, #1
   10a3a:	f363 01c5 	bfi	r1, r3, #3, #3
   10a3e:	2203      	movs	r2, #3
   10a40:	f362 1188 	bfi	r1, r2, #6, #3
   10a44:	2208      	movs	r2, #8
   10a46:	f362 2152 	bfi	r1, r2, #9, #10
   10a4a:	f363 41de 	bfi	r1, r3, #19, #12
   10a4e:	f363 71df 	bfi	r1, r3, #31, #1
   10a52:	aa06      	add	r2, sp, #24
   10a54:	4832      	ldr	r0, [pc, #200]	; (10b20 <settings_frame_cb+0x1d4>)
   10a56:	f016 f8fe 	bl	26c56 <z_impl_z_log_msg_static_create>
   10a5a:	e78d      	b.n	10978 <settings_frame_cb+0x2c>
			LOG_INF("PRESSURE ENABLED via CAN");
   10a5c:	4b32      	ldr	r3, [pc, #200]	; (10b28 <settings_frame_cb+0x1dc>)
   10a5e:	9319      	str	r3, [sp, #100]	; 0x64
   10a60:	2302      	movs	r3, #2
   10a62:	f88d 3004 	strb.w	r3, [sp, #4]
   10a66:	2300      	movs	r3, #0
   10a68:	f88d 3005 	strb.w	r3, [sp, #5]
   10a6c:	f88d 3006 	strb.w	r3, [sp, #6]
   10a70:	f88d 3007 	strb.w	r3, [sp, #7]
   10a74:	9a01      	ldr	r2, [sp, #4]
   10a76:	9218      	str	r2, [sp, #96]	; 0x60
   10a78:	4619      	mov	r1, r3
   10a7a:	f363 0100 	bfi	r1, r3, #0, #1
   10a7e:	f363 0141 	bfi	r1, r3, #1, #1
   10a82:	f363 0182 	bfi	r1, r3, #2, #1
   10a86:	f363 01c5 	bfi	r1, r3, #3, #3
   10a8a:	2203      	movs	r2, #3
   10a8c:	f362 1188 	bfi	r1, r2, #6, #3
   10a90:	2208      	movs	r2, #8
   10a92:	f362 2152 	bfi	r1, r2, #9, #10
   10a96:	f363 41de 	bfi	r1, r3, #19, #12
   10a9a:	f363 71df 	bfi	r1, r3, #31, #1
   10a9e:	aa18      	add	r2, sp, #96	; 0x60
   10aa0:	481f      	ldr	r0, [pc, #124]	; (10b20 <settings_frame_cb+0x1d4>)
   10aa2:	f016 f8d8 	bl	26c56 <z_impl_z_log_msg_static_create>
   10aa6:	e77b      	b.n	109a0 <settings_frame_cb+0x54>
   10aa8:	4b1b      	ldr	r3, [pc, #108]	; (10b18 <settings_frame_cb+0x1cc>)
   10aaa:	f3bf 8f5b 	dmb	ish
   10aae:	e853 2f00 	ldrex	r2, [r3]
   10ab2:	f422 7100 	bic.w	r1, r2, #512	; 0x200
   10ab6:	e843 1000 	strex	r0, r1, [r3]
   10aba:	2800      	cmp	r0, #0
   10abc:	d1f7      	bne.n	10aae <settings_frame_cb+0x162>
   10abe:	f3bf 8f5b 	dmb	ish
		if(atomic_test_and_clear_bit(flags, PRESSURE_ENABLED_FLAG)) {
   10ac2:	f412 7f00 	tst.w	r2, #512	; 0x200
   10ac6:	f43f af6b 	beq.w	109a0 <settings_frame_cb+0x54>
			LOG_INF("PRESSURE DISABLED via CAN");
   10aca:	4b18      	ldr	r3, [pc, #96]	; (10b2c <settings_frame_cb+0x1e0>)
   10acc:	9313      	str	r3, [sp, #76]	; 0x4c
   10ace:	2302      	movs	r3, #2
   10ad0:	f88d 3004 	strb.w	r3, [sp, #4]
   10ad4:	2300      	movs	r3, #0
   10ad6:	f88d 3005 	strb.w	r3, [sp, #5]
   10ada:	f88d 3006 	strb.w	r3, [sp, #6]
   10ade:	f88d 3007 	strb.w	r3, [sp, #7]
   10ae2:	9a01      	ldr	r2, [sp, #4]
   10ae4:	9212      	str	r2, [sp, #72]	; 0x48
   10ae6:	4619      	mov	r1, r3
   10ae8:	f363 0100 	bfi	r1, r3, #0, #1
   10aec:	f363 0141 	bfi	r1, r3, #1, #1
   10af0:	f363 0182 	bfi	r1, r3, #2, #1
   10af4:	f363 01c5 	bfi	r1, r3, #3, #3
   10af8:	2203      	movs	r2, #3
   10afa:	f362 1188 	bfi	r1, r2, #6, #3
   10afe:	2208      	movs	r2, #8
   10b00:	f362 2152 	bfi	r1, r2, #9, #10
   10b04:	f363 41de 	bfi	r1, r3, #19, #12
   10b08:	f363 71df 	bfi	r1, r3, #31, #1
   10b0c:	aa12      	add	r2, sp, #72	; 0x48
   10b0e:	4804      	ldr	r0, [pc, #16]	; (10b20 <settings_frame_cb+0x1d4>)
   10b10:	f016 f8a1 	bl	26c56 <z_impl_z_log_msg_static_create>
}
   10b14:	e744      	b.n	109a0 <settings_frame_cb+0x54>
   10b16:	bf00      	nop
   10b18:	200079d8 	.word	0x200079d8
   10b1c:	0002d238 	.word	0x0002d238
   10b20:	0002d174 	.word	0x0002d174
   10b24:	0002d250 	.word	0x0002d250
   10b28:	0002d268 	.word	0x0002d268
   10b2c:	0002d284 	.word	0x0002d284

00010b30 <IFL_temp_subscribed_cb>:
	.connected = connected,
	.disconnected = disconnected,
};

void IFL_temp_subscribed_cb(struct bt_conn *conn, uint8_t err, struct bt_gatt_subscribe_params *params)
{
   10b30:	b500      	push	{lr}
   10b32:	b095      	sub	sp, #84	; 0x54
	if(params->value == BT_GATT_CCC_NOTIFY) {
   10b34:	8a13      	ldrh	r3, [r2, #16]
   10b36:	2b01      	cmp	r3, #1
   10b38:	d036      	beq.n	10ba8 <IFL_temp_subscribed_cb+0x78>

		atomic_set_bit(flags, IFL_SUBSCRIBED_FLAG);
		LOG_INF("IFL_temp_subscribed_cb: subscribed");

	} else if (params->value == 0) {
   10b3a:	2b00      	cmp	r3, #0
   10b3c:	d167      	bne.n	10c0e <IFL_temp_subscribed_cb+0xde>
   10b3e:	4b46      	ldr	r3, [pc, #280]	; (10c58 <IFL_temp_subscribed_cb+0x128>)
   10b40:	f3bf 8f5b 	dmb	ish
   10b44:	e853 1f00 	ldrex	r1, [r3]
   10b48:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
   10b4c:	e843 1200 	strex	r2, r1, [r3]
   10b50:	2a00      	cmp	r2, #0
   10b52:	d1f7      	bne.n	10b44 <IFL_temp_subscribed_cb+0x14>
   10b54:	f3bf 8f5b 	dmb	ish

		atomic_clear_bit(flags, IFL_SUBSCRIBED_FLAG);
		LOG_INF("IFL_temp_subscribed_cb: unsubscribed");
   10b58:	4b40      	ldr	r3, [pc, #256]	; (10c5c <IFL_temp_subscribed_cb+0x12c>)
   10b5a:	930d      	str	r3, [sp, #52]	; 0x34
   10b5c:	2302      	movs	r3, #2
   10b5e:	f88d 3004 	strb.w	r3, [sp, #4]
   10b62:	2300      	movs	r3, #0
   10b64:	f88d 3005 	strb.w	r3, [sp, #5]
   10b68:	f88d 3006 	strb.w	r3, [sp, #6]
   10b6c:	f88d 3007 	strb.w	r3, [sp, #7]
   10b70:	9a01      	ldr	r2, [sp, #4]
   10b72:	920c      	str	r2, [sp, #48]	; 0x30
   10b74:	4619      	mov	r1, r3
   10b76:	f363 0100 	bfi	r1, r3, #0, #1
   10b7a:	f363 0141 	bfi	r1, r3, #1, #1
   10b7e:	f363 0182 	bfi	r1, r3, #2, #1
   10b82:	f363 01c5 	bfi	r1, r3, #3, #3
   10b86:	2203      	movs	r2, #3
   10b88:	f362 1188 	bfi	r1, r2, #6, #3
   10b8c:	2208      	movs	r2, #8
   10b8e:	f362 2152 	bfi	r1, r2, #9, #10
   10b92:	f363 41de 	bfi	r1, r3, #19, #12
   10b96:	f363 71df 	bfi	r1, r3, #31, #1
   10b9a:	aa0c      	add	r2, sp, #48	; 0x30
   10b9c:	4830      	ldr	r0, [pc, #192]	; (10c60 <IFL_temp_subscribed_cb+0x130>)
   10b9e:	f016 f85a 	bl	26c56 <z_impl_z_log_msg_static_create>

	} else {
		LOG_WRN("IFL_temp_subscribed_cb: unknown CCC value");
	}
}
   10ba2:	b015      	add	sp, #84	; 0x54
   10ba4:	f85d fb04 	ldr.w	pc, [sp], #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10ba8:	4b2b      	ldr	r3, [pc, #172]	; (10c58 <IFL_temp_subscribed_cb+0x128>)
   10baa:	f3bf 8f5b 	dmb	ish
   10bae:	e853 1f00 	ldrex	r1, [r3]
   10bb2:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
   10bb6:	e843 1200 	strex	r2, r1, [r3]
   10bba:	2a00      	cmp	r2, #0
   10bbc:	d1f7      	bne.n	10bae <IFL_temp_subscribed_cb+0x7e>
   10bbe:	f3bf 8f5b 	dmb	ish
		LOG_INF("IFL_temp_subscribed_cb: subscribed");
   10bc2:	4b28      	ldr	r3, [pc, #160]	; (10c64 <IFL_temp_subscribed_cb+0x134>)
   10bc4:	9313      	str	r3, [sp, #76]	; 0x4c
   10bc6:	2302      	movs	r3, #2
   10bc8:	f88d 3004 	strb.w	r3, [sp, #4]
   10bcc:	2300      	movs	r3, #0
   10bce:	f88d 3005 	strb.w	r3, [sp, #5]
   10bd2:	f88d 3006 	strb.w	r3, [sp, #6]
   10bd6:	f88d 3007 	strb.w	r3, [sp, #7]
   10bda:	9a01      	ldr	r2, [sp, #4]
   10bdc:	9212      	str	r2, [sp, #72]	; 0x48
   10bde:	4619      	mov	r1, r3
   10be0:	f363 0100 	bfi	r1, r3, #0, #1
   10be4:	f363 0141 	bfi	r1, r3, #1, #1
   10be8:	f363 0182 	bfi	r1, r3, #2, #1
   10bec:	f363 01c5 	bfi	r1, r3, #3, #3
   10bf0:	2203      	movs	r2, #3
   10bf2:	f362 1188 	bfi	r1, r2, #6, #3
   10bf6:	2208      	movs	r2, #8
   10bf8:	f362 2152 	bfi	r1, r2, #9, #10
   10bfc:	f363 41de 	bfi	r1, r3, #19, #12
   10c00:	f363 71df 	bfi	r1, r3, #31, #1
   10c04:	aa12      	add	r2, sp, #72	; 0x48
   10c06:	4816      	ldr	r0, [pc, #88]	; (10c60 <IFL_temp_subscribed_cb+0x130>)
   10c08:	f016 f825 	bl	26c56 <z_impl_z_log_msg_static_create>
   10c0c:	e7c9      	b.n	10ba2 <IFL_temp_subscribed_cb+0x72>
		LOG_WRN("IFL_temp_subscribed_cb: unknown CCC value");
   10c0e:	4b16      	ldr	r3, [pc, #88]	; (10c68 <IFL_temp_subscribed_cb+0x138>)
   10c10:	9307      	str	r3, [sp, #28]
   10c12:	2202      	movs	r2, #2
   10c14:	f88d 2004 	strb.w	r2, [sp, #4]
   10c18:	2300      	movs	r3, #0
   10c1a:	f88d 3005 	strb.w	r3, [sp, #5]
   10c1e:	f88d 3006 	strb.w	r3, [sp, #6]
   10c22:	f88d 3007 	strb.w	r3, [sp, #7]
   10c26:	9901      	ldr	r1, [sp, #4]
   10c28:	9106      	str	r1, [sp, #24]
   10c2a:	4619      	mov	r1, r3
   10c2c:	f363 0100 	bfi	r1, r3, #0, #1
   10c30:	f363 0141 	bfi	r1, r3, #1, #1
   10c34:	f363 0182 	bfi	r1, r3, #2, #1
   10c38:	f363 01c5 	bfi	r1, r3, #3, #3
   10c3c:	f362 1188 	bfi	r1, r2, #6, #3
   10c40:	2208      	movs	r2, #8
   10c42:	f362 2152 	bfi	r1, r2, #9, #10
   10c46:	f363 41de 	bfi	r1, r3, #19, #12
   10c4a:	f363 71df 	bfi	r1, r3, #31, #1
   10c4e:	aa06      	add	r2, sp, #24
   10c50:	4803      	ldr	r0, [pc, #12]	; (10c60 <IFL_temp_subscribed_cb+0x130>)
   10c52:	f016 f800 	bl	26c56 <z_impl_z_log_msg_static_create>
}
   10c56:	e7a4      	b.n	10ba2 <IFL_temp_subscribed_cb+0x72>
   10c58:	200079d8 	.word	0x200079d8
   10c5c:	0002d2c4 	.word	0x0002d2c4
   10c60:	0002d174 	.word	0x0002d174
   10c64:	0002d2a0 	.word	0x0002d2a0
   10c68:	0002d2ec 	.word	0x0002d2ec

00010c6c <status_CAN_tx_work_handler>:
{
   10c6c:	b500      	push	{lr}
   10c6e:	b083      	sub	sp, #12
	can_send(can_dev, &TTPMS_status, K_FOREVER, NULL, NULL);
   10c70:	4b07      	ldr	r3, [pc, #28]	; (10c90 <status_CAN_tx_work_handler+0x24>)
   10c72:	6818      	ldr	r0, [r3, #0]
		union { uintptr_t x; void * val; } parm4 = { .val = user_data };
		return (int) arch_syscall_invoke6(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, parm3.x, parm4.x, K_SYSCALL_CAN_SEND);
	}
#endif
	compiler_barrier();
	return z_impl_can_send(dev, frame, timeout, callback, user_data);
   10c74:	2300      	movs	r3, #0
   10c76:	9301      	str	r3, [sp, #4]
   10c78:	9300      	str	r3, [sp, #0]
   10c7a:	f04f 32ff 	mov.w	r2, #4294967295
   10c7e:	f04f 33ff 	mov.w	r3, #4294967295
   10c82:	4904      	ldr	r1, [pc, #16]	; (10c94 <status_CAN_tx_work_handler+0x28>)
   10c84:	f00e fe3e 	bl	1f904 <z_impl_can_send>
}
   10c88:	b003      	add	sp, #12
   10c8a:	f85d fb04 	ldr.w	pc, [sp], #4
   10c8e:	bf00      	nop
   10c90:	200006cc 	.word	0x200006cc
   10c94:	200006bc 	.word	0x200006bc

00010c98 <IFL_CAN_tx_work_handler>:
{
   10c98:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c9a:	b083      	sub	sp, #12
	can_send(can_dev, &IFL_temp_1, K_FOREVER, NULL, NULL);
   10c9c:	4d0b      	ldr	r5, [pc, #44]	; (10ccc <IFL_CAN_tx_work_handler+0x34>)
   10c9e:	6828      	ldr	r0, [r5, #0]
   10ca0:	f04f 36ff 	mov.w	r6, #4294967295
   10ca4:	f04f 37ff 	mov.w	r7, #4294967295
   10ca8:	2400      	movs	r4, #0
   10caa:	9401      	str	r4, [sp, #4]
   10cac:	9400      	str	r4, [sp, #0]
   10cae:	4632      	mov	r2, r6
   10cb0:	463b      	mov	r3, r7
   10cb2:	4907      	ldr	r1, [pc, #28]	; (10cd0 <IFL_CAN_tx_work_handler+0x38>)
   10cb4:	f00e fe26 	bl	1f904 <z_impl_can_send>
	can_send(can_dev, &IFL_temp_2, K_FOREVER, NULL, NULL);
   10cb8:	6828      	ldr	r0, [r5, #0]
   10cba:	9401      	str	r4, [sp, #4]
   10cbc:	9400      	str	r4, [sp, #0]
   10cbe:	4632      	mov	r2, r6
   10cc0:	463b      	mov	r3, r7
   10cc2:	4904      	ldr	r1, [pc, #16]	; (10cd4 <IFL_CAN_tx_work_handler+0x3c>)
   10cc4:	f00e fe1e 	bl	1f904 <z_impl_can_send>
}
   10cc8:	b003      	add	sp, #12
   10cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10ccc:	200006cc 	.word	0x200006cc
   10cd0:	200006ac 	.word	0x200006ac
   10cd4:	2000069c 	.word	0x2000069c

00010cd8 <bt_addr_le_to_str>:
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
   10cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10cda:	b08b      	sub	sp, #44	; 0x2c
   10cdc:	4604      	mov	r4, r0
   10cde:	460d      	mov	r5, r1
   10ce0:	4616      	mov	r6, r2
	char type[10];

	switch (addr->type) {
   10ce2:	7803      	ldrb	r3, [r0, #0]
   10ce4:	2b03      	cmp	r3, #3
   10ce6:	d82c      	bhi.n	10d42 <bt_addr_le_to_str+0x6a>
   10ce8:	e8df f003 	tbb	[pc, r3]
   10cec:	26211c02 	.word	0x26211c02
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   10cf0:	4917      	ldr	r1, [pc, #92]	; (10d50 <bt_addr_le_to_str+0x78>)
   10cf2:	a807      	add	r0, sp, #28
   10cf4:	f016 fb96 	bl	27424 <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   10cf8:	7963      	ldrb	r3, [r4, #5]
   10cfa:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   10cfc:	78e1      	ldrb	r1, [r4, #3]
   10cfe:	78a0      	ldrb	r0, [r4, #2]
   10d00:	7867      	ldrb	r7, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   10d02:	f10d 0c1c 	add.w	ip, sp, #28
   10d06:	f8cd c014 	str.w	ip, [sp, #20]
   10d0a:	9704      	str	r7, [sp, #16]
   10d0c:	9003      	str	r0, [sp, #12]
   10d0e:	9102      	str	r1, [sp, #8]
   10d10:	9201      	str	r2, [sp, #4]
   10d12:	9300      	str	r3, [sp, #0]
   10d14:	79a3      	ldrb	r3, [r4, #6]
   10d16:	4a0f      	ldr	r2, [pc, #60]	; (10d54 <bt_addr_le_to_str+0x7c>)
   10d18:	4631      	mov	r1, r6
   10d1a:	4628      	mov	r0, r5
   10d1c:	f014 fea2 	bl	25a64 <snprintk>
}
   10d20:	b00b      	add	sp, #44	; 0x2c
   10d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   10d24:	490c      	ldr	r1, [pc, #48]	; (10d58 <bt_addr_le_to_str+0x80>)
   10d26:	a807      	add	r0, sp, #28
   10d28:	f016 fb7c 	bl	27424 <strcpy>
		break;
   10d2c:	e7e4      	b.n	10cf8 <bt_addr_le_to_str+0x20>
		strcpy(type, "public-id");
   10d2e:	490b      	ldr	r1, [pc, #44]	; (10d5c <bt_addr_le_to_str+0x84>)
   10d30:	a807      	add	r0, sp, #28
   10d32:	f016 fb77 	bl	27424 <strcpy>
		break;
   10d36:	e7df      	b.n	10cf8 <bt_addr_le_to_str+0x20>
		strcpy(type, "random-id");
   10d38:	4909      	ldr	r1, [pc, #36]	; (10d60 <bt_addr_le_to_str+0x88>)
   10d3a:	a807      	add	r0, sp, #28
   10d3c:	f016 fb72 	bl	27424 <strcpy>
		break;
   10d40:	e7da      	b.n	10cf8 <bt_addr_le_to_str+0x20>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   10d42:	4a08      	ldr	r2, [pc, #32]	; (10d64 <bt_addr_le_to_str+0x8c>)
   10d44:	210a      	movs	r1, #10
   10d46:	a807      	add	r0, sp, #28
   10d48:	f014 fe8c 	bl	25a64 <snprintk>
		break;
   10d4c:	e7d4      	b.n	10cf8 <bt_addr_le_to_str+0x20>
   10d4e:	bf00      	nop
   10d50:	0002d318 	.word	0x0002d318
   10d54:	0002d340 	.word	0x0002d340
   10d58:	0002d320 	.word	0x0002d320
   10d5c:	0002d328 	.word	0x0002d328
   10d60:	0002d334 	.word	0x0002d334
   10d64:	0002f044 	.word	0x0002f044

00010d68 <disconnected>:
{
   10d68:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d6a:	b08b      	sub	sp, #44	; 0x2c
   10d6c:	af00      	add	r7, sp, #0
   10d6e:	460d      	mov	r5, r1
	const bt_addr_le_t *addr = bt_conn_get_dst(conn);
   10d70:	f017 f86f 	bl	27e52 <bt_conn_get_dst>
   10d74:	4604      	mov	r4, r0
	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
   10d76:	221e      	movs	r2, #30
   10d78:	f107 0108 	add.w	r1, r7, #8
   10d7c:	f7ff ffac 	bl	10cd8 <bt_addr_le_to_str>
	return memcmp(a, b, sizeof(*a));
   10d80:	2207      	movs	r2, #7
   10d82:	49b8      	ldr	r1, [pc, #736]	; (11064 <disconnected+0x2fc>)
   10d84:	4620      	mov	r0, r4
   10d86:	f016 fb8f 	bl	274a8 <memcmp>
	if (bt_addr_le_eq(addr, &IFL_bt_addr)) {
   10d8a:	2800      	cmp	r0, #0
   10d8c:	d177      	bne.n	10e7e <disconnected+0x116>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10d8e:	4bb6      	ldr	r3, [pc, #728]	; (11068 <disconnected+0x300>)
   10d90:	f3bf 8f5b 	dmb	ish
   10d94:	e853 2f00 	ldrex	r2, [r3]
   10d98:	f022 0201 	bic.w	r2, r2, #1
   10d9c:	e843 2100 	strex	r1, r2, [r3]
   10da0:	2900      	cmp	r1, #0
   10da2:	d1f7      	bne.n	10d94 <disconnected+0x2c>
   10da4:	f3bf 8f5b 	dmb	ish
   10da8:	f3bf 8f5b 	dmb	ish
   10dac:	e853 1f00 	ldrex	r1, [r3]
   10db0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
   10db4:	e843 1200 	strex	r2, r1, [r3]
   10db8:	2a00      	cmp	r2, #0
   10dba:	d1f7      	bne.n	10dac <disconnected+0x44>
   10dbc:	f3bf 8f5b 	dmb	ish
		LOG_INF("Internal FL disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   10dc0:	466c      	mov	r4, sp
   10dc2:	2300      	movs	r3, #0
   10dc4:	713b      	strb	r3, [r7, #4]
   10dc6:	2302      	movs	r3, #2
   10dc8:	717b      	strb	r3, [r7, #5]
   10dca:	b08a      	sub	sp, #40	; 0x28
   10dcc:	46ec      	mov	ip, sp
   10dce:	f11c 0210 	adds.w	r2, ip, #16
   10dd2:	d01a      	beq.n	10e0a <disconnected+0xa2>
   10dd4:	2012      	movs	r0, #18
   10dd6:	b122      	cbz	r2, 10de2 <disconnected+0x7a>
   10dd8:	2804      	cmp	r0, #4
   10dda:	dd02      	ble.n	10de2 <disconnected+0x7a>
   10ddc:	4ba3      	ldr	r3, [pc, #652]	; (1106c <disconnected+0x304>)
   10dde:	f8cc 3014 	str.w	r3, [ip, #20]
   10de2:	2300      	movs	r3, #0
   10de4:	703b      	strb	r3, [r7, #0]
   10de6:	2302      	movs	r3, #2
   10de8:	707b      	strb	r3, [r7, #1]
   10dea:	b1da      	cbz	r2, 10e24 <disconnected+0xbc>
   10dec:	4603      	mov	r3, r0
   10dee:	2808      	cmp	r0, #8
   10df0:	dd03      	ble.n	10dfa <disconnected+0x92>
   10df2:	f107 0108 	add.w	r1, r7, #8
   10df6:	f8cc 1018 	str.w	r1, [ip, #24]
   10dfa:	2b0c      	cmp	r3, #12
   10dfc:	dd01      	ble.n	10e02 <disconnected+0x9a>
   10dfe:	f8cc 501c 	str.w	r5, [ip, #28]
   10e02:	f10c 0320 	add.w	r3, ip, #32
   10e06:	2100      	movs	r1, #0
   10e08:	e00a      	b.n	10e20 <disconnected+0xb8>
   10e0a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10e0e:	e7e2      	b.n	10dd6 <disconnected+0x6e>
   10e10:	f101 0528 	add.w	r5, r1, #40	; 0x28
   10e14:	443d      	add	r5, r7
   10e16:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   10e1a:	f803 5b01 	strb.w	r5, [r3], #1
   10e1e:	3101      	adds	r1, #1
   10e20:	2901      	cmp	r1, #1
   10e22:	d9f5      	bls.n	10e10 <disconnected+0xa8>
   10e24:	2811      	cmp	r0, #17
   10e26:	dd27      	ble.n	10e78 <disconnected+0x110>
   10e28:	2312      	movs	r3, #18
   10e2a:	b14a      	cbz	r2, 10e40 <disconnected+0xd8>
   10e2c:	2104      	movs	r1, #4
   10e2e:	7139      	strb	r1, [r7, #4]
   10e30:	2100      	movs	r1, #0
   10e32:	7179      	strb	r1, [r7, #5]
   10e34:	71b9      	strb	r1, [r7, #6]
   10e36:	2101      	movs	r1, #1
   10e38:	71f9      	strb	r1, [r7, #7]
   10e3a:	6878      	ldr	r0, [r7, #4]
   10e3c:	f8cc 0010 	str.w	r0, [ip, #16]
   10e40:	2100      	movs	r1, #0
   10e42:	f36f 0100 	bfc	r1, #0, #1
   10e46:	f36f 0141 	bfc	r1, #1, #1
   10e4a:	f36f 0182 	bfc	r1, #2, #1
   10e4e:	f36f 01c5 	bfc	r1, #3, #3
   10e52:	2003      	movs	r0, #3
   10e54:	f360 1188 	bfi	r1, r0, #6, #3
   10e58:	f3c3 0309 	ubfx	r3, r3, #0, #10
   10e5c:	f363 2152 	bfi	r1, r3, #9, #10
   10e60:	f36f 41de 	bfc	r1, #19, #12
   10e64:	f36f 71df 	bfc	r1, #31, #1
   10e68:	2300      	movs	r3, #0
   10e6a:	4881      	ldr	r0, [pc, #516]	; (11070 <disconnected+0x308>)
   10e6c:	f015 fef3 	bl	26c56 <z_impl_z_log_msg_static_create>
   10e70:	46a5      	mov	sp, r4
}
   10e72:	372c      	adds	r7, #44	; 0x2c
   10e74:	46bd      	mov	sp, r7
   10e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_INF("Internal FL disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   10e78:	f06f 031b 	mvn.w	r3, #27
   10e7c:	e7d5      	b.n	10e2a <disconnected+0xc2>
   10e7e:	2207      	movs	r2, #7
   10e80:	497c      	ldr	r1, [pc, #496]	; (11074 <disconnected+0x30c>)
   10e82:	4620      	mov	r0, r4
   10e84:	f016 fb10 	bl	274a8 <memcmp>
	} else if (bt_addr_le_eq(addr, &IFR_bt_addr)) {
   10e88:	2800      	cmp	r0, #0
   10e8a:	d171      	bne.n	10f70 <disconnected+0x208>
   10e8c:	4b76      	ldr	r3, [pc, #472]	; (11068 <disconnected+0x300>)
   10e8e:	f3bf 8f5b 	dmb	ish
   10e92:	e853 2f00 	ldrex	r2, [r3]
   10e96:	f022 0202 	bic.w	r2, r2, #2
   10e9a:	e843 2100 	strex	r1, r2, [r3]
   10e9e:	2900      	cmp	r1, #0
   10ea0:	d1f7      	bne.n	10e92 <disconnected+0x12a>
   10ea2:	f3bf 8f5b 	dmb	ish
   10ea6:	f3bf 8f5b 	dmb	ish
   10eaa:	e853 1f00 	ldrex	r1, [r3]
   10eae:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   10eb2:	e843 1200 	strex	r2, r1, [r3]
   10eb6:	2a00      	cmp	r2, #0
   10eb8:	d1f7      	bne.n	10eaa <disconnected+0x142>
   10eba:	f3bf 8f5b 	dmb	ish
		LOG_INF("Internal FR disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   10ebe:	466e      	mov	r6, sp
   10ec0:	2300      	movs	r3, #0
   10ec2:	713b      	strb	r3, [r7, #4]
   10ec4:	2302      	movs	r3, #2
   10ec6:	717b      	strb	r3, [r7, #5]
   10ec8:	b08a      	sub	sp, #40	; 0x28
   10eca:	466c      	mov	r4, sp
   10ecc:	f114 0210 	adds.w	r2, r4, #16
   10ed0:	d021      	beq.n	10f16 <disconnected+0x1ae>
   10ed2:	2012      	movs	r0, #18
   10ed4:	b11a      	cbz	r2, 10ede <disconnected+0x176>
   10ed6:	2804      	cmp	r0, #4
   10ed8:	dd01      	ble.n	10ede <disconnected+0x176>
   10eda:	4b67      	ldr	r3, [pc, #412]	; (11078 <disconnected+0x310>)
   10edc:	6163      	str	r3, [r4, #20]
   10ede:	2300      	movs	r3, #0
   10ee0:	703b      	strb	r3, [r7, #0]
   10ee2:	2302      	movs	r3, #2
   10ee4:	707b      	strb	r3, [r7, #1]
   10ee6:	b1ca      	cbz	r2, 10f1c <disconnected+0x1b4>
   10ee8:	4603      	mov	r3, r0
   10eea:	2808      	cmp	r0, #8
   10eec:	dd02      	ble.n	10ef4 <disconnected+0x18c>
   10eee:	f107 0108 	add.w	r1, r7, #8
   10ef2:	61a1      	str	r1, [r4, #24]
   10ef4:	2b0c      	cmp	r3, #12
   10ef6:	dd00      	ble.n	10efa <disconnected+0x192>
   10ef8:	61e5      	str	r5, [r4, #28]
   10efa:	f104 0320 	add.w	r3, r4, #32
   10efe:	2100      	movs	r1, #0
   10f00:	2901      	cmp	r1, #1
   10f02:	d80b      	bhi.n	10f1c <disconnected+0x1b4>
   10f04:	f101 0528 	add.w	r5, r1, #40	; 0x28
   10f08:	443d      	add	r5, r7
   10f0a:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   10f0e:	f803 5b01 	strb.w	r5, [r3], #1
   10f12:	3101      	adds	r1, #1
   10f14:	e7f4      	b.n	10f00 <disconnected+0x198>
   10f16:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10f1a:	e7db      	b.n	10ed4 <disconnected+0x16c>
   10f1c:	2811      	cmp	r0, #17
   10f1e:	dd24      	ble.n	10f6a <disconnected+0x202>
   10f20:	2312      	movs	r3, #18
   10f22:	b142      	cbz	r2, 10f36 <disconnected+0x1ce>
   10f24:	2104      	movs	r1, #4
   10f26:	7139      	strb	r1, [r7, #4]
   10f28:	2100      	movs	r1, #0
   10f2a:	7179      	strb	r1, [r7, #5]
   10f2c:	71b9      	strb	r1, [r7, #6]
   10f2e:	2101      	movs	r1, #1
   10f30:	71f9      	strb	r1, [r7, #7]
   10f32:	6878      	ldr	r0, [r7, #4]
   10f34:	6120      	str	r0, [r4, #16]
   10f36:	2100      	movs	r1, #0
   10f38:	f36f 0100 	bfc	r1, #0, #1
   10f3c:	f36f 0141 	bfc	r1, #1, #1
   10f40:	f36f 0182 	bfc	r1, #2, #1
   10f44:	f36f 01c5 	bfc	r1, #3, #3
   10f48:	2003      	movs	r0, #3
   10f4a:	f360 1188 	bfi	r1, r0, #6, #3
   10f4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
   10f52:	f363 2152 	bfi	r1, r3, #9, #10
   10f56:	f36f 41de 	bfc	r1, #19, #12
   10f5a:	f36f 71df 	bfc	r1, #31, #1
   10f5e:	2300      	movs	r3, #0
   10f60:	4843      	ldr	r0, [pc, #268]	; (11070 <disconnected+0x308>)
   10f62:	f015 fe78 	bl	26c56 <z_impl_z_log_msg_static_create>
   10f66:	46b5      	mov	sp, r6
   10f68:	e783      	b.n	10e72 <disconnected+0x10a>
   10f6a:	f06f 031b 	mvn.w	r3, #27
   10f6e:	e7d8      	b.n	10f22 <disconnected+0x1ba>
   10f70:	2207      	movs	r2, #7
   10f72:	4942      	ldr	r1, [pc, #264]	; (1107c <disconnected+0x314>)
   10f74:	4620      	mov	r0, r4
   10f76:	f016 fa97 	bl	274a8 <memcmp>
	} else if (bt_addr_le_eq(addr, &IRL_bt_addr)) {
   10f7a:	2800      	cmp	r0, #0
   10f7c:	f040 8082 	bne.w	11084 <disconnected+0x31c>
   10f80:	4b39      	ldr	r3, [pc, #228]	; (11068 <disconnected+0x300>)
   10f82:	f3bf 8f5b 	dmb	ish
   10f86:	e853 2f00 	ldrex	r2, [r3]
   10f8a:	f022 0204 	bic.w	r2, r2, #4
   10f8e:	e843 2100 	strex	r1, r2, [r3]
   10f92:	2900      	cmp	r1, #0
   10f94:	d1f7      	bne.n	10f86 <disconnected+0x21e>
   10f96:	f3bf 8f5b 	dmb	ish
   10f9a:	f3bf 8f5b 	dmb	ish
   10f9e:	e853 1f00 	ldrex	r1, [r3]
   10fa2:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   10fa6:	e843 1200 	strex	r2, r1, [r3]
   10faa:	2a00      	cmp	r2, #0
   10fac:	d1f7      	bne.n	10f9e <disconnected+0x236>
   10fae:	f3bf 8f5b 	dmb	ish
		LOG_INF("Internal RL disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   10fb2:	466e      	mov	r6, sp
   10fb4:	2300      	movs	r3, #0
   10fb6:	713b      	strb	r3, [r7, #4]
   10fb8:	2302      	movs	r3, #2
   10fba:	717b      	strb	r3, [r7, #5]
   10fbc:	b08a      	sub	sp, #40	; 0x28
   10fbe:	466c      	mov	r4, sp
   10fc0:	f114 0210 	adds.w	r2, r4, #16
   10fc4:	d017      	beq.n	10ff6 <disconnected+0x28e>
   10fc6:	2012      	movs	r0, #18
   10fc8:	b11a      	cbz	r2, 10fd2 <disconnected+0x26a>
   10fca:	2804      	cmp	r0, #4
   10fcc:	dd01      	ble.n	10fd2 <disconnected+0x26a>
   10fce:	4b2c      	ldr	r3, [pc, #176]	; (11080 <disconnected+0x318>)
   10fd0:	6163      	str	r3, [r4, #20]
   10fd2:	2300      	movs	r3, #0
   10fd4:	703b      	strb	r3, [r7, #0]
   10fd6:	2302      	movs	r3, #2
   10fd8:	707b      	strb	r3, [r7, #1]
   10fda:	b1ca      	cbz	r2, 11010 <disconnected+0x2a8>
   10fdc:	4603      	mov	r3, r0
   10fde:	2808      	cmp	r0, #8
   10fe0:	dd02      	ble.n	10fe8 <disconnected+0x280>
   10fe2:	f107 0108 	add.w	r1, r7, #8
   10fe6:	61a1      	str	r1, [r4, #24]
   10fe8:	2b0c      	cmp	r3, #12
   10fea:	dd00      	ble.n	10fee <disconnected+0x286>
   10fec:	61e5      	str	r5, [r4, #28]
   10fee:	f104 0320 	add.w	r3, r4, #32
   10ff2:	2100      	movs	r1, #0
   10ff4:	e00a      	b.n	1100c <disconnected+0x2a4>
   10ff6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10ffa:	e7e5      	b.n	10fc8 <disconnected+0x260>
   10ffc:	f101 0528 	add.w	r5, r1, #40	; 0x28
   11000:	443d      	add	r5, r7
   11002:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   11006:	f803 5b01 	strb.w	r5, [r3], #1
   1100a:	3101      	adds	r1, #1
   1100c:	2901      	cmp	r1, #1
   1100e:	d9f5      	bls.n	10ffc <disconnected+0x294>
   11010:	2811      	cmp	r0, #17
   11012:	dd24      	ble.n	1105e <disconnected+0x2f6>
   11014:	2312      	movs	r3, #18
   11016:	b142      	cbz	r2, 1102a <disconnected+0x2c2>
   11018:	2104      	movs	r1, #4
   1101a:	7139      	strb	r1, [r7, #4]
   1101c:	2100      	movs	r1, #0
   1101e:	7179      	strb	r1, [r7, #5]
   11020:	71b9      	strb	r1, [r7, #6]
   11022:	2101      	movs	r1, #1
   11024:	71f9      	strb	r1, [r7, #7]
   11026:	6878      	ldr	r0, [r7, #4]
   11028:	6120      	str	r0, [r4, #16]
   1102a:	2100      	movs	r1, #0
   1102c:	f36f 0100 	bfc	r1, #0, #1
   11030:	f36f 0141 	bfc	r1, #1, #1
   11034:	f36f 0182 	bfc	r1, #2, #1
   11038:	f36f 01c5 	bfc	r1, #3, #3
   1103c:	2003      	movs	r0, #3
   1103e:	f360 1188 	bfi	r1, r0, #6, #3
   11042:	f3c3 0309 	ubfx	r3, r3, #0, #10
   11046:	f363 2152 	bfi	r1, r3, #9, #10
   1104a:	f36f 41de 	bfc	r1, #19, #12
   1104e:	f36f 71df 	bfc	r1, #31, #1
   11052:	2300      	movs	r3, #0
   11054:	4806      	ldr	r0, [pc, #24]	; (11070 <disconnected+0x308>)
   11056:	f015 fdfe 	bl	26c56 <z_impl_z_log_msg_static_create>
   1105a:	46b5      	mov	sp, r6
   1105c:	e709      	b.n	10e72 <disconnected+0x10a>
   1105e:	f06f 031b 	mvn.w	r3, #27
   11062:	e7d8      	b.n	11016 <disconnected+0x2ae>
   11064:	200079d0 	.word	0x200079d0
   11068:	200079d8 	.word	0x200079d8
   1106c:	0002d364 	.word	0x0002d364
   11070:	0002d174 	.word	0x0002d174
   11074:	200079c8 	.word	0x200079c8
   11078:	0002d398 	.word	0x0002d398
   1107c:	200079c0 	.word	0x200079c0
   11080:	0002d3cc 	.word	0x0002d3cc
   11084:	2207      	movs	r2, #7
   11086:	49b5      	ldr	r1, [pc, #724]	; (1135c <disconnected+0x5f4>)
   11088:	4620      	mov	r0, r4
   1108a:	f016 fa0d 	bl	274a8 <memcmp>
	} else if (bt_addr_le_eq(addr, &IRR_bt_addr)) {
   1108e:	2800      	cmp	r0, #0
   11090:	d171      	bne.n	11176 <disconnected+0x40e>
   11092:	4bb3      	ldr	r3, [pc, #716]	; (11360 <disconnected+0x5f8>)
   11094:	f3bf 8f5b 	dmb	ish
   11098:	e853 2f00 	ldrex	r2, [r3]
   1109c:	f022 0208 	bic.w	r2, r2, #8
   110a0:	e843 2100 	strex	r1, r2, [r3]
   110a4:	2900      	cmp	r1, #0
   110a6:	d1f7      	bne.n	11098 <disconnected+0x330>
   110a8:	f3bf 8f5b 	dmb	ish
   110ac:	f3bf 8f5b 	dmb	ish
   110b0:	e853 1f00 	ldrex	r1, [r3]
   110b4:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   110b8:	e843 1200 	strex	r2, r1, [r3]
   110bc:	2a00      	cmp	r2, #0
   110be:	d1f7      	bne.n	110b0 <disconnected+0x348>
   110c0:	f3bf 8f5b 	dmb	ish
		LOG_INF("Internal RR disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   110c4:	466e      	mov	r6, sp
   110c6:	2300      	movs	r3, #0
   110c8:	713b      	strb	r3, [r7, #4]
   110ca:	2302      	movs	r3, #2
   110cc:	717b      	strb	r3, [r7, #5]
   110ce:	b08a      	sub	sp, #40	; 0x28
   110d0:	466c      	mov	r4, sp
   110d2:	f114 0210 	adds.w	r2, r4, #16
   110d6:	d017      	beq.n	11108 <disconnected+0x3a0>
   110d8:	2012      	movs	r0, #18
   110da:	b11a      	cbz	r2, 110e4 <disconnected+0x37c>
   110dc:	2804      	cmp	r0, #4
   110de:	dd01      	ble.n	110e4 <disconnected+0x37c>
   110e0:	4ba0      	ldr	r3, [pc, #640]	; (11364 <disconnected+0x5fc>)
   110e2:	6163      	str	r3, [r4, #20]
   110e4:	2300      	movs	r3, #0
   110e6:	703b      	strb	r3, [r7, #0]
   110e8:	2302      	movs	r3, #2
   110ea:	707b      	strb	r3, [r7, #1]
   110ec:	b1ca      	cbz	r2, 11122 <disconnected+0x3ba>
   110ee:	4603      	mov	r3, r0
   110f0:	2808      	cmp	r0, #8
   110f2:	dd02      	ble.n	110fa <disconnected+0x392>
   110f4:	f107 0108 	add.w	r1, r7, #8
   110f8:	61a1      	str	r1, [r4, #24]
   110fa:	2b0c      	cmp	r3, #12
   110fc:	dd00      	ble.n	11100 <disconnected+0x398>
   110fe:	61e5      	str	r5, [r4, #28]
   11100:	f104 0320 	add.w	r3, r4, #32
   11104:	2100      	movs	r1, #0
   11106:	e00a      	b.n	1111e <disconnected+0x3b6>
   11108:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1110c:	e7e5      	b.n	110da <disconnected+0x372>
   1110e:	f101 0528 	add.w	r5, r1, #40	; 0x28
   11112:	443d      	add	r5, r7
   11114:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   11118:	f803 5b01 	strb.w	r5, [r3], #1
   1111c:	3101      	adds	r1, #1
   1111e:	2901      	cmp	r1, #1
   11120:	d9f5      	bls.n	1110e <disconnected+0x3a6>
   11122:	2811      	cmp	r0, #17
   11124:	dd24      	ble.n	11170 <disconnected+0x408>
   11126:	2312      	movs	r3, #18
   11128:	b142      	cbz	r2, 1113c <disconnected+0x3d4>
   1112a:	2104      	movs	r1, #4
   1112c:	7139      	strb	r1, [r7, #4]
   1112e:	2100      	movs	r1, #0
   11130:	7179      	strb	r1, [r7, #5]
   11132:	71b9      	strb	r1, [r7, #6]
   11134:	2101      	movs	r1, #1
   11136:	71f9      	strb	r1, [r7, #7]
   11138:	6878      	ldr	r0, [r7, #4]
   1113a:	6120      	str	r0, [r4, #16]
   1113c:	2100      	movs	r1, #0
   1113e:	f36f 0100 	bfc	r1, #0, #1
   11142:	f36f 0141 	bfc	r1, #1, #1
   11146:	f36f 0182 	bfc	r1, #2, #1
   1114a:	f36f 01c5 	bfc	r1, #3, #3
   1114e:	2003      	movs	r0, #3
   11150:	f360 1188 	bfi	r1, r0, #6, #3
   11154:	f3c3 0309 	ubfx	r3, r3, #0, #10
   11158:	f363 2152 	bfi	r1, r3, #9, #10
   1115c:	f36f 41de 	bfc	r1, #19, #12
   11160:	f36f 71df 	bfc	r1, #31, #1
   11164:	2300      	movs	r3, #0
   11166:	4880      	ldr	r0, [pc, #512]	; (11368 <disconnected+0x600>)
   11168:	f015 fd75 	bl	26c56 <z_impl_z_log_msg_static_create>
   1116c:	46b5      	mov	sp, r6
   1116e:	e680      	b.n	10e72 <disconnected+0x10a>
   11170:	f06f 031b 	mvn.w	r3, #27
   11174:	e7d8      	b.n	11128 <disconnected+0x3c0>
   11176:	2207      	movs	r2, #7
   11178:	497c      	ldr	r1, [pc, #496]	; (1136c <disconnected+0x604>)
   1117a:	4620      	mov	r0, r4
   1117c:	f016 f994 	bl	274a8 <memcmp>
	} else if (bt_addr_le_eq(addr, &EFL_bt_addr)) {
   11180:	2800      	cmp	r0, #0
   11182:	d171      	bne.n	11268 <disconnected+0x500>
   11184:	4b76      	ldr	r3, [pc, #472]	; (11360 <disconnected+0x5f8>)
   11186:	f3bf 8f5b 	dmb	ish
   1118a:	e853 2f00 	ldrex	r2, [r3]
   1118e:	f022 0210 	bic.w	r2, r2, #16
   11192:	e843 2100 	strex	r1, r2, [r3]
   11196:	2900      	cmp	r1, #0
   11198:	d1f7      	bne.n	1118a <disconnected+0x422>
   1119a:	f3bf 8f5b 	dmb	ish
   1119e:	f3bf 8f5b 	dmb	ish
   111a2:	e853 1f00 	ldrex	r1, [r3]
   111a6:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
   111aa:	e843 1200 	strex	r2, r1, [r3]
   111ae:	2a00      	cmp	r2, #0
   111b0:	d1f7      	bne.n	111a2 <disconnected+0x43a>
   111b2:	f3bf 8f5b 	dmb	ish
		LOG_INF("External FL disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   111b6:	466e      	mov	r6, sp
   111b8:	2300      	movs	r3, #0
   111ba:	713b      	strb	r3, [r7, #4]
   111bc:	2302      	movs	r3, #2
   111be:	717b      	strb	r3, [r7, #5]
   111c0:	b08a      	sub	sp, #40	; 0x28
   111c2:	466c      	mov	r4, sp
   111c4:	f114 0210 	adds.w	r2, r4, #16
   111c8:	d017      	beq.n	111fa <disconnected+0x492>
   111ca:	2012      	movs	r0, #18
   111cc:	b11a      	cbz	r2, 111d6 <disconnected+0x46e>
   111ce:	2804      	cmp	r0, #4
   111d0:	dd01      	ble.n	111d6 <disconnected+0x46e>
   111d2:	4b67      	ldr	r3, [pc, #412]	; (11370 <disconnected+0x608>)
   111d4:	6163      	str	r3, [r4, #20]
   111d6:	2300      	movs	r3, #0
   111d8:	703b      	strb	r3, [r7, #0]
   111da:	2302      	movs	r3, #2
   111dc:	707b      	strb	r3, [r7, #1]
   111de:	b1ca      	cbz	r2, 11214 <disconnected+0x4ac>
   111e0:	4603      	mov	r3, r0
   111e2:	2808      	cmp	r0, #8
   111e4:	dd02      	ble.n	111ec <disconnected+0x484>
   111e6:	f107 0108 	add.w	r1, r7, #8
   111ea:	61a1      	str	r1, [r4, #24]
   111ec:	2b0c      	cmp	r3, #12
   111ee:	dd00      	ble.n	111f2 <disconnected+0x48a>
   111f0:	61e5      	str	r5, [r4, #28]
   111f2:	f104 0320 	add.w	r3, r4, #32
   111f6:	2100      	movs	r1, #0
   111f8:	e00a      	b.n	11210 <disconnected+0x4a8>
   111fa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   111fe:	e7e5      	b.n	111cc <disconnected+0x464>
   11200:	f101 0528 	add.w	r5, r1, #40	; 0x28
   11204:	443d      	add	r5, r7
   11206:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   1120a:	f803 5b01 	strb.w	r5, [r3], #1
   1120e:	3101      	adds	r1, #1
   11210:	2901      	cmp	r1, #1
   11212:	d9f5      	bls.n	11200 <disconnected+0x498>
   11214:	2811      	cmp	r0, #17
   11216:	dd24      	ble.n	11262 <disconnected+0x4fa>
   11218:	2312      	movs	r3, #18
   1121a:	b142      	cbz	r2, 1122e <disconnected+0x4c6>
   1121c:	2104      	movs	r1, #4
   1121e:	7139      	strb	r1, [r7, #4]
   11220:	2100      	movs	r1, #0
   11222:	7179      	strb	r1, [r7, #5]
   11224:	71b9      	strb	r1, [r7, #6]
   11226:	2101      	movs	r1, #1
   11228:	71f9      	strb	r1, [r7, #7]
   1122a:	6878      	ldr	r0, [r7, #4]
   1122c:	6120      	str	r0, [r4, #16]
   1122e:	2100      	movs	r1, #0
   11230:	f36f 0100 	bfc	r1, #0, #1
   11234:	f36f 0141 	bfc	r1, #1, #1
   11238:	f36f 0182 	bfc	r1, #2, #1
   1123c:	f36f 01c5 	bfc	r1, #3, #3
   11240:	2003      	movs	r0, #3
   11242:	f360 1188 	bfi	r1, r0, #6, #3
   11246:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1124a:	f363 2152 	bfi	r1, r3, #9, #10
   1124e:	f36f 41de 	bfc	r1, #19, #12
   11252:	f36f 71df 	bfc	r1, #31, #1
   11256:	2300      	movs	r3, #0
   11258:	4843      	ldr	r0, [pc, #268]	; (11368 <disconnected+0x600>)
   1125a:	f015 fcfc 	bl	26c56 <z_impl_z_log_msg_static_create>
   1125e:	46b5      	mov	sp, r6
   11260:	e607      	b.n	10e72 <disconnected+0x10a>
   11262:	f06f 031b 	mvn.w	r3, #27
   11266:	e7d8      	b.n	1121a <disconnected+0x4b2>
   11268:	2207      	movs	r2, #7
   1126a:	4942      	ldr	r1, [pc, #264]	; (11374 <disconnected+0x60c>)
   1126c:	4620      	mov	r0, r4
   1126e:	f016 f91b 	bl	274a8 <memcmp>
	} else if (bt_addr_le_eq(addr, &EFR_bt_addr)) {
   11272:	2800      	cmp	r0, #0
   11274:	f040 8082 	bne.w	1137c <disconnected+0x614>
   11278:	4b39      	ldr	r3, [pc, #228]	; (11360 <disconnected+0x5f8>)
   1127a:	f3bf 8f5b 	dmb	ish
   1127e:	e853 2f00 	ldrex	r2, [r3]
   11282:	f022 0220 	bic.w	r2, r2, #32
   11286:	e843 2100 	strex	r1, r2, [r3]
   1128a:	2900      	cmp	r1, #0
   1128c:	d1f7      	bne.n	1127e <disconnected+0x516>
   1128e:	f3bf 8f5b 	dmb	ish
   11292:	f3bf 8f5b 	dmb	ish
   11296:	e853 1f00 	ldrex	r1, [r3]
   1129a:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
   1129e:	e843 1200 	strex	r2, r1, [r3]
   112a2:	2a00      	cmp	r2, #0
   112a4:	d1f7      	bne.n	11296 <disconnected+0x52e>
   112a6:	f3bf 8f5b 	dmb	ish
		LOG_INF("External FR disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   112aa:	466e      	mov	r6, sp
   112ac:	2300      	movs	r3, #0
   112ae:	713b      	strb	r3, [r7, #4]
   112b0:	2302      	movs	r3, #2
   112b2:	717b      	strb	r3, [r7, #5]
   112b4:	b08a      	sub	sp, #40	; 0x28
   112b6:	466c      	mov	r4, sp
   112b8:	f114 0210 	adds.w	r2, r4, #16
   112bc:	d017      	beq.n	112ee <disconnected+0x586>
   112be:	2012      	movs	r0, #18
   112c0:	b11a      	cbz	r2, 112ca <disconnected+0x562>
   112c2:	2804      	cmp	r0, #4
   112c4:	dd01      	ble.n	112ca <disconnected+0x562>
   112c6:	4b2c      	ldr	r3, [pc, #176]	; (11378 <disconnected+0x610>)
   112c8:	6163      	str	r3, [r4, #20]
   112ca:	2300      	movs	r3, #0
   112cc:	703b      	strb	r3, [r7, #0]
   112ce:	2302      	movs	r3, #2
   112d0:	707b      	strb	r3, [r7, #1]
   112d2:	b1ca      	cbz	r2, 11308 <disconnected+0x5a0>
   112d4:	4603      	mov	r3, r0
   112d6:	2808      	cmp	r0, #8
   112d8:	dd02      	ble.n	112e0 <disconnected+0x578>
   112da:	f107 0108 	add.w	r1, r7, #8
   112de:	61a1      	str	r1, [r4, #24]
   112e0:	2b0c      	cmp	r3, #12
   112e2:	dd00      	ble.n	112e6 <disconnected+0x57e>
   112e4:	61e5      	str	r5, [r4, #28]
   112e6:	f104 0320 	add.w	r3, r4, #32
   112ea:	2100      	movs	r1, #0
   112ec:	e00a      	b.n	11304 <disconnected+0x59c>
   112ee:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   112f2:	e7e5      	b.n	112c0 <disconnected+0x558>
   112f4:	f101 0528 	add.w	r5, r1, #40	; 0x28
   112f8:	443d      	add	r5, r7
   112fa:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   112fe:	f803 5b01 	strb.w	r5, [r3], #1
   11302:	3101      	adds	r1, #1
   11304:	2901      	cmp	r1, #1
   11306:	d9f5      	bls.n	112f4 <disconnected+0x58c>
   11308:	2811      	cmp	r0, #17
   1130a:	dd24      	ble.n	11356 <disconnected+0x5ee>
   1130c:	2312      	movs	r3, #18
   1130e:	b142      	cbz	r2, 11322 <disconnected+0x5ba>
   11310:	2104      	movs	r1, #4
   11312:	7139      	strb	r1, [r7, #4]
   11314:	2100      	movs	r1, #0
   11316:	7179      	strb	r1, [r7, #5]
   11318:	71b9      	strb	r1, [r7, #6]
   1131a:	2101      	movs	r1, #1
   1131c:	71f9      	strb	r1, [r7, #7]
   1131e:	6878      	ldr	r0, [r7, #4]
   11320:	6120      	str	r0, [r4, #16]
   11322:	2100      	movs	r1, #0
   11324:	f36f 0100 	bfc	r1, #0, #1
   11328:	f36f 0141 	bfc	r1, #1, #1
   1132c:	f36f 0182 	bfc	r1, #2, #1
   11330:	f36f 01c5 	bfc	r1, #3, #3
   11334:	2003      	movs	r0, #3
   11336:	f360 1188 	bfi	r1, r0, #6, #3
   1133a:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1133e:	f363 2152 	bfi	r1, r3, #9, #10
   11342:	f36f 41de 	bfc	r1, #19, #12
   11346:	f36f 71df 	bfc	r1, #31, #1
   1134a:	2300      	movs	r3, #0
   1134c:	4806      	ldr	r0, [pc, #24]	; (11368 <disconnected+0x600>)
   1134e:	f015 fc82 	bl	26c56 <z_impl_z_log_msg_static_create>
   11352:	46b5      	mov	sp, r6
   11354:	e58d      	b.n	10e72 <disconnected+0x10a>
   11356:	f06f 031b 	mvn.w	r3, #27
   1135a:	e7d8      	b.n	1130e <disconnected+0x5a6>
   1135c:	200079b8 	.word	0x200079b8
   11360:	200079d8 	.word	0x200079d8
   11364:	0002d400 	.word	0x0002d400
   11368:	0002d174 	.word	0x0002d174
   1136c:	200079b0 	.word	0x200079b0
   11370:	0002d434 	.word	0x0002d434
   11374:	200079a8 	.word	0x200079a8
   11378:	0002d468 	.word	0x0002d468
   1137c:	2207      	movs	r2, #7
   1137e:	49a6      	ldr	r1, [pc, #664]	; (11618 <disconnected+0x8b0>)
   11380:	4620      	mov	r0, r4
   11382:	f016 f891 	bl	274a8 <memcmp>
	} else if (bt_addr_le_eq(addr, &ERL_bt_addr)) {
   11386:	2800      	cmp	r0, #0
   11388:	d171      	bne.n	1146e <disconnected+0x706>
   1138a:	4ba4      	ldr	r3, [pc, #656]	; (1161c <disconnected+0x8b4>)
   1138c:	f3bf 8f5b 	dmb	ish
   11390:	e853 2f00 	ldrex	r2, [r3]
   11394:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   11398:	e843 2100 	strex	r1, r2, [r3]
   1139c:	2900      	cmp	r1, #0
   1139e:	d1f7      	bne.n	11390 <disconnected+0x628>
   113a0:	f3bf 8f5b 	dmb	ish
   113a4:	f3bf 8f5b 	dmb	ish
   113a8:	e853 1f00 	ldrex	r1, [r3]
   113ac:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
   113b0:	e843 1200 	strex	r2, r1, [r3]
   113b4:	2a00      	cmp	r2, #0
   113b6:	d1f7      	bne.n	113a8 <disconnected+0x640>
   113b8:	f3bf 8f5b 	dmb	ish
		LOG_INF("External RL disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   113bc:	466e      	mov	r6, sp
   113be:	2300      	movs	r3, #0
   113c0:	713b      	strb	r3, [r7, #4]
   113c2:	2302      	movs	r3, #2
   113c4:	717b      	strb	r3, [r7, #5]
   113c6:	b08a      	sub	sp, #40	; 0x28
   113c8:	466c      	mov	r4, sp
   113ca:	f114 0210 	adds.w	r2, r4, #16
   113ce:	d017      	beq.n	11400 <disconnected+0x698>
   113d0:	2012      	movs	r0, #18
   113d2:	b11a      	cbz	r2, 113dc <disconnected+0x674>
   113d4:	2804      	cmp	r0, #4
   113d6:	dd01      	ble.n	113dc <disconnected+0x674>
   113d8:	4b91      	ldr	r3, [pc, #580]	; (11620 <disconnected+0x8b8>)
   113da:	6163      	str	r3, [r4, #20]
   113dc:	2300      	movs	r3, #0
   113de:	703b      	strb	r3, [r7, #0]
   113e0:	2302      	movs	r3, #2
   113e2:	707b      	strb	r3, [r7, #1]
   113e4:	b1ca      	cbz	r2, 1141a <disconnected+0x6b2>
   113e6:	4603      	mov	r3, r0
   113e8:	2808      	cmp	r0, #8
   113ea:	dd02      	ble.n	113f2 <disconnected+0x68a>
   113ec:	f107 0108 	add.w	r1, r7, #8
   113f0:	61a1      	str	r1, [r4, #24]
   113f2:	2b0c      	cmp	r3, #12
   113f4:	dd00      	ble.n	113f8 <disconnected+0x690>
   113f6:	61e5      	str	r5, [r4, #28]
   113f8:	f104 0320 	add.w	r3, r4, #32
   113fc:	2100      	movs	r1, #0
   113fe:	e00a      	b.n	11416 <disconnected+0x6ae>
   11400:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11404:	e7e5      	b.n	113d2 <disconnected+0x66a>
   11406:	f101 0528 	add.w	r5, r1, #40	; 0x28
   1140a:	443d      	add	r5, r7
   1140c:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   11410:	f803 5b01 	strb.w	r5, [r3], #1
   11414:	3101      	adds	r1, #1
   11416:	2901      	cmp	r1, #1
   11418:	d9f5      	bls.n	11406 <disconnected+0x69e>
   1141a:	2811      	cmp	r0, #17
   1141c:	dd24      	ble.n	11468 <disconnected+0x700>
   1141e:	2312      	movs	r3, #18
   11420:	b142      	cbz	r2, 11434 <disconnected+0x6cc>
   11422:	2104      	movs	r1, #4
   11424:	7139      	strb	r1, [r7, #4]
   11426:	2100      	movs	r1, #0
   11428:	7179      	strb	r1, [r7, #5]
   1142a:	71b9      	strb	r1, [r7, #6]
   1142c:	2101      	movs	r1, #1
   1142e:	71f9      	strb	r1, [r7, #7]
   11430:	6878      	ldr	r0, [r7, #4]
   11432:	6120      	str	r0, [r4, #16]
   11434:	2100      	movs	r1, #0
   11436:	f36f 0100 	bfc	r1, #0, #1
   1143a:	f36f 0141 	bfc	r1, #1, #1
   1143e:	f36f 0182 	bfc	r1, #2, #1
   11442:	f36f 01c5 	bfc	r1, #3, #3
   11446:	2003      	movs	r0, #3
   11448:	f360 1188 	bfi	r1, r0, #6, #3
   1144c:	f3c3 0309 	ubfx	r3, r3, #0, #10
   11450:	f363 2152 	bfi	r1, r3, #9, #10
   11454:	f36f 41de 	bfc	r1, #19, #12
   11458:	f36f 71df 	bfc	r1, #31, #1
   1145c:	2300      	movs	r3, #0
   1145e:	4871      	ldr	r0, [pc, #452]	; (11624 <disconnected+0x8bc>)
   11460:	f015 fbf9 	bl	26c56 <z_impl_z_log_msg_static_create>
   11464:	46b5      	mov	sp, r6
   11466:	e504      	b.n	10e72 <disconnected+0x10a>
   11468:	f06f 031b 	mvn.w	r3, #27
   1146c:	e7d8      	b.n	11420 <disconnected+0x6b8>
   1146e:	2207      	movs	r2, #7
   11470:	496d      	ldr	r1, [pc, #436]	; (11628 <disconnected+0x8c0>)
   11472:	4620      	mov	r0, r4
   11474:	f016 f818 	bl	274a8 <memcmp>
	} else if (bt_addr_le_eq(addr, &ERR_bt_addr)) {
   11478:	b320      	cbz	r0, 114c4 <disconnected+0x75c>
		LOG_WRN("UNRECOGNIZED SENSOR DISCONNECTED, addr: %s (reason 0x%02x)", addr_str, reason);
   1147a:	466c      	mov	r4, sp
   1147c:	2300      	movs	r3, #0
   1147e:	713b      	strb	r3, [r7, #4]
   11480:	2302      	movs	r3, #2
   11482:	717b      	strb	r3, [r7, #5]
   11484:	b08a      	sub	sp, #40	; 0x28
   11486:	466e      	mov	r6, sp
   11488:	f116 0210 	adds.w	r2, r6, #16
   1148c:	f000 808c 	beq.w	115a8 <disconnected+0x840>
   11490:	2012      	movs	r0, #18
   11492:	b11a      	cbz	r2, 1149c <disconnected+0x734>
   11494:	2804      	cmp	r0, #4
   11496:	dd01      	ble.n	1149c <disconnected+0x734>
   11498:	4b64      	ldr	r3, [pc, #400]	; (1162c <disconnected+0x8c4>)
   1149a:	6173      	str	r3, [r6, #20]
   1149c:	2300      	movs	r3, #0
   1149e:	703b      	strb	r3, [r7, #0]
   114a0:	2302      	movs	r3, #2
   114a2:	707b      	strb	r3, [r7, #1]
   114a4:	2a00      	cmp	r2, #0
   114a6:	f000 808c 	beq.w	115c2 <disconnected+0x85a>
   114aa:	4603      	mov	r3, r0
   114ac:	2808      	cmp	r0, #8
   114ae:	dd02      	ble.n	114b6 <disconnected+0x74e>
   114b0:	f107 0108 	add.w	r1, r7, #8
   114b4:	61b1      	str	r1, [r6, #24]
   114b6:	2b0c      	cmp	r3, #12
   114b8:	dd00      	ble.n	114bc <disconnected+0x754>
   114ba:	61f5      	str	r5, [r6, #28]
   114bc:	f106 0320 	add.w	r3, r6, #32
   114c0:	2100      	movs	r1, #0
   114c2:	e07c      	b.n	115be <disconnected+0x856>
   114c4:	4b55      	ldr	r3, [pc, #340]	; (1161c <disconnected+0x8b4>)
   114c6:	f3bf 8f5b 	dmb	ish
   114ca:	e853 2f00 	ldrex	r2, [r3]
   114ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   114d2:	e843 2100 	strex	r1, r2, [r3]
   114d6:	2900      	cmp	r1, #0
   114d8:	d1f7      	bne.n	114ca <disconnected+0x762>
   114da:	f3bf 8f5b 	dmb	ish
   114de:	f3bf 8f5b 	dmb	ish
   114e2:	e853 1f00 	ldrex	r1, [r3]
   114e6:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
   114ea:	e843 1200 	strex	r2, r1, [r3]
   114ee:	2a00      	cmp	r2, #0
   114f0:	d1f7      	bne.n	114e2 <disconnected+0x77a>
   114f2:	f3bf 8f5b 	dmb	ish
		LOG_INF("External RR disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   114f6:	466e      	mov	r6, sp
   114f8:	2300      	movs	r3, #0
   114fa:	713b      	strb	r3, [r7, #4]
   114fc:	2302      	movs	r3, #2
   114fe:	717b      	strb	r3, [r7, #5]
   11500:	b08a      	sub	sp, #40	; 0x28
   11502:	466c      	mov	r4, sp
   11504:	f114 0210 	adds.w	r2, r4, #16
   11508:	d017      	beq.n	1153a <disconnected+0x7d2>
   1150a:	2012      	movs	r0, #18
   1150c:	b11a      	cbz	r2, 11516 <disconnected+0x7ae>
   1150e:	2804      	cmp	r0, #4
   11510:	dd01      	ble.n	11516 <disconnected+0x7ae>
   11512:	4b47      	ldr	r3, [pc, #284]	; (11630 <disconnected+0x8c8>)
   11514:	6163      	str	r3, [r4, #20]
   11516:	2300      	movs	r3, #0
   11518:	703b      	strb	r3, [r7, #0]
   1151a:	2302      	movs	r3, #2
   1151c:	707b      	strb	r3, [r7, #1]
   1151e:	b1ca      	cbz	r2, 11554 <disconnected+0x7ec>
   11520:	4603      	mov	r3, r0
   11522:	2808      	cmp	r0, #8
   11524:	dd02      	ble.n	1152c <disconnected+0x7c4>
   11526:	f107 0108 	add.w	r1, r7, #8
   1152a:	61a1      	str	r1, [r4, #24]
   1152c:	2b0c      	cmp	r3, #12
   1152e:	dd00      	ble.n	11532 <disconnected+0x7ca>
   11530:	61e5      	str	r5, [r4, #28]
   11532:	f104 0320 	add.w	r3, r4, #32
   11536:	2100      	movs	r1, #0
   11538:	e00a      	b.n	11550 <disconnected+0x7e8>
   1153a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1153e:	e7e5      	b.n	1150c <disconnected+0x7a4>
   11540:	f101 0528 	add.w	r5, r1, #40	; 0x28
   11544:	443d      	add	r5, r7
   11546:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   1154a:	f803 5b01 	strb.w	r5, [r3], #1
   1154e:	3101      	adds	r1, #1
   11550:	2901      	cmp	r1, #1
   11552:	d9f5      	bls.n	11540 <disconnected+0x7d8>
   11554:	2811      	cmp	r0, #17
   11556:	dd24      	ble.n	115a2 <disconnected+0x83a>
   11558:	2312      	movs	r3, #18
   1155a:	b142      	cbz	r2, 1156e <disconnected+0x806>
   1155c:	2104      	movs	r1, #4
   1155e:	7139      	strb	r1, [r7, #4]
   11560:	2100      	movs	r1, #0
   11562:	7179      	strb	r1, [r7, #5]
   11564:	71b9      	strb	r1, [r7, #6]
   11566:	2101      	movs	r1, #1
   11568:	71f9      	strb	r1, [r7, #7]
   1156a:	6878      	ldr	r0, [r7, #4]
   1156c:	6120      	str	r0, [r4, #16]
   1156e:	2100      	movs	r1, #0
   11570:	f36f 0100 	bfc	r1, #0, #1
   11574:	f36f 0141 	bfc	r1, #1, #1
   11578:	f36f 0182 	bfc	r1, #2, #1
   1157c:	f36f 01c5 	bfc	r1, #3, #3
   11580:	2003      	movs	r0, #3
   11582:	f360 1188 	bfi	r1, r0, #6, #3
   11586:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1158a:	f363 2152 	bfi	r1, r3, #9, #10
   1158e:	f36f 41de 	bfc	r1, #19, #12
   11592:	f36f 71df 	bfc	r1, #31, #1
   11596:	2300      	movs	r3, #0
   11598:	4822      	ldr	r0, [pc, #136]	; (11624 <disconnected+0x8bc>)
   1159a:	f015 fb5c 	bl	26c56 <z_impl_z_log_msg_static_create>
   1159e:	46b5      	mov	sp, r6
   115a0:	e467      	b.n	10e72 <disconnected+0x10a>
   115a2:	f06f 031b 	mvn.w	r3, #27
   115a6:	e7d8      	b.n	1155a <disconnected+0x7f2>
		LOG_WRN("UNRECOGNIZED SENSOR DISCONNECTED, addr: %s (reason 0x%02x)", addr_str, reason);
   115a8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   115ac:	e771      	b.n	11492 <disconnected+0x72a>
   115ae:	f101 0528 	add.w	r5, r1, #40	; 0x28
   115b2:	443d      	add	r5, r7
   115b4:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   115b8:	f803 5b01 	strb.w	r5, [r3], #1
   115bc:	3101      	adds	r1, #1
   115be:	2901      	cmp	r1, #1
   115c0:	d9f5      	bls.n	115ae <disconnected+0x846>
   115c2:	2811      	cmp	r0, #17
   115c4:	dd24      	ble.n	11610 <disconnected+0x8a8>
   115c6:	2312      	movs	r3, #18
   115c8:	b142      	cbz	r2, 115dc <disconnected+0x874>
   115ca:	2104      	movs	r1, #4
   115cc:	7139      	strb	r1, [r7, #4]
   115ce:	2100      	movs	r1, #0
   115d0:	7179      	strb	r1, [r7, #5]
   115d2:	71b9      	strb	r1, [r7, #6]
   115d4:	2101      	movs	r1, #1
   115d6:	71f9      	strb	r1, [r7, #7]
   115d8:	6878      	ldr	r0, [r7, #4]
   115da:	6130      	str	r0, [r6, #16]
   115dc:	2100      	movs	r1, #0
   115de:	f36f 0100 	bfc	r1, #0, #1
   115e2:	f36f 0141 	bfc	r1, #1, #1
   115e6:	f36f 0182 	bfc	r1, #2, #1
   115ea:	f36f 01c5 	bfc	r1, #3, #3
   115ee:	2002      	movs	r0, #2
   115f0:	f360 1188 	bfi	r1, r0, #6, #3
   115f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
   115f8:	f363 2152 	bfi	r1, r3, #9, #10
   115fc:	f36f 41de 	bfc	r1, #19, #12
   11600:	f36f 71df 	bfc	r1, #31, #1
   11604:	2300      	movs	r3, #0
   11606:	4807      	ldr	r0, [pc, #28]	; (11624 <disconnected+0x8bc>)
   11608:	f015 fb25 	bl	26c56 <z_impl_z_log_msg_static_create>
   1160c:	46a5      	mov	sp, r4
}
   1160e:	e430      	b.n	10e72 <disconnected+0x10a>
		LOG_WRN("UNRECOGNIZED SENSOR DISCONNECTED, addr: %s (reason 0x%02x)", addr_str, reason);
   11610:	f06f 031b 	mvn.w	r3, #27
   11614:	e7d8      	b.n	115c8 <disconnected+0x860>
   11616:	bf00      	nop
   11618:	200079a0 	.word	0x200079a0
   1161c:	200079d8 	.word	0x200079d8
   11620:	0002d49c 	.word	0x0002d49c
   11624:	0002d174 	.word	0x0002d174
   11628:	20007998 	.word	0x20007998
   1162c:	0002d504 	.word	0x0002d504
   11630:	0002d4d0 	.word	0x0002d4d0

00011634 <connected>:
{
   11634:	b5f0      	push	{r4, r5, r6, r7, lr}
   11636:	b0bb      	sub	sp, #236	; 0xec
   11638:	af00      	add	r7, sp, #0
   1163a:	460c      	mov	r4, r1
	const bt_addr_le_t *addr = bt_conn_get_dst(conn);
   1163c:	f016 fc09 	bl	27e52 <bt_conn_get_dst>
   11640:	4605      	mov	r5, r0
	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
   11642:	221e      	movs	r2, #30
   11644:	f107 0108 	add.w	r1, r7, #8
   11648:	f7ff fb46 	bl	10cd8 <bt_addr_le_to_str>
	if (err) {
   1164c:	2c00      	cmp	r4, #0
   1164e:	d07c      	beq.n	1174a <connected+0x116>
		LOG_WRN("Failed to connect to %s (%u)", addr_str, err);
   11650:	466d      	mov	r5, sp
   11652:	2300      	movs	r3, #0
   11654:	713b      	strb	r3, [r7, #4]
   11656:	2302      	movs	r3, #2
   11658:	717b      	strb	r3, [r7, #5]
   1165a:	b08a      	sub	sp, #40	; 0x28
   1165c:	46ec      	mov	ip, sp
   1165e:	f11c 0210 	adds.w	r2, ip, #16
   11662:	d01a      	beq.n	1169a <connected+0x66>
   11664:	2012      	movs	r0, #18
   11666:	b122      	cbz	r2, 11672 <connected+0x3e>
   11668:	2804      	cmp	r0, #4
   1166a:	dd02      	ble.n	11672 <connected+0x3e>
   1166c:	4baf      	ldr	r3, [pc, #700]	; (1192c <connected+0x2f8>)
   1166e:	f8cc 3014 	str.w	r3, [ip, #20]
   11672:	2300      	movs	r3, #0
   11674:	703b      	strb	r3, [r7, #0]
   11676:	2302      	movs	r3, #2
   11678:	707b      	strb	r3, [r7, #1]
   1167a:	b1da      	cbz	r2, 116b4 <connected+0x80>
   1167c:	4603      	mov	r3, r0
   1167e:	2808      	cmp	r0, #8
   11680:	dd03      	ble.n	1168a <connected+0x56>
   11682:	f107 0108 	add.w	r1, r7, #8
   11686:	f8cc 1018 	str.w	r1, [ip, #24]
   1168a:	2b0c      	cmp	r3, #12
   1168c:	dd01      	ble.n	11692 <connected+0x5e>
   1168e:	f8cc 401c 	str.w	r4, [ip, #28]
   11692:	f10c 0320 	add.w	r3, ip, #32
   11696:	2100      	movs	r1, #0
   11698:	e00a      	b.n	116b0 <connected+0x7c>
   1169a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1169e:	e7e2      	b.n	11666 <connected+0x32>
   116a0:	f101 04e8 	add.w	r4, r1, #232	; 0xe8
   116a4:	443c      	add	r4, r7
   116a6:	f814 4ce8 	ldrb.w	r4, [r4, #-232]
   116aa:	f803 4b01 	strb.w	r4, [r3], #1
   116ae:	3101      	adds	r1, #1
   116b0:	2901      	cmp	r1, #1
   116b2:	d9f5      	bls.n	116a0 <connected+0x6c>
   116b4:	2811      	cmp	r0, #17
   116b6:	dd45      	ble.n	11744 <connected+0x110>
   116b8:	2312      	movs	r3, #18
   116ba:	b14a      	cbz	r2, 116d0 <connected+0x9c>
   116bc:	2104      	movs	r1, #4
   116be:	7139      	strb	r1, [r7, #4]
   116c0:	2100      	movs	r1, #0
   116c2:	7179      	strb	r1, [r7, #5]
   116c4:	71b9      	strb	r1, [r7, #6]
   116c6:	2101      	movs	r1, #1
   116c8:	71f9      	strb	r1, [r7, #7]
   116ca:	6878      	ldr	r0, [r7, #4]
   116cc:	f8cc 0010 	str.w	r0, [ip, #16]
   116d0:	2100      	movs	r1, #0
   116d2:	f36f 0100 	bfc	r1, #0, #1
   116d6:	f36f 0141 	bfc	r1, #1, #1
   116da:	f36f 0182 	bfc	r1, #2, #1
   116de:	f36f 01c5 	bfc	r1, #3, #3
   116e2:	2002      	movs	r0, #2
   116e4:	f360 1188 	bfi	r1, r0, #6, #3
   116e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
   116ec:	f363 2152 	bfi	r1, r3, #9, #10
   116f0:	f36f 41de 	bfc	r1, #19, #12
   116f4:	f36f 71df 	bfc	r1, #31, #1
   116f8:	2300      	movs	r3, #0
   116fa:	488d      	ldr	r0, [pc, #564]	; (11930 <connected+0x2fc>)
   116fc:	f015 faab 	bl	26c56 <z_impl_z_log_msg_static_create>
   11700:	46ad      	mov	sp, r5
	err = bt_conn_le_create_auto(&scan_param, &conn_param);
   11702:	498c      	ldr	r1, [pc, #560]	; (11934 <connected+0x300>)
   11704:	488c      	ldr	r0, [pc, #560]	; (11938 <connected+0x304>)
   11706:	f009 fd33 	bl	1b170 <bt_conn_le_create_auto>
	if (err) {
   1170a:	f010 0fff 	tst.w	r0, #255	; 0xff
   1170e:	f000 8561 	beq.w	121d4 <connected+0xba0>
		LOG_ERR("Failed to start automatically connecting (err %d)", err);
   11712:	b2c0      	uxtb	r0, r0
   11714:	466d      	mov	r5, sp
   11716:	b088      	sub	sp, #32
   11718:	466b      	mov	r3, sp
   1171a:	f113 0210 	adds.w	r2, r3, #16
   1171e:	f000 8531 	beq.w	12184 <connected+0xb50>
   11722:	210c      	movs	r1, #12
   11724:	b142      	cbz	r2, 11738 <connected+0x104>
   11726:	460c      	mov	r4, r1
   11728:	2904      	cmp	r1, #4
   1172a:	dd01      	ble.n	11730 <connected+0xfc>
   1172c:	4e83      	ldr	r6, [pc, #524]	; (1193c <connected+0x308>)
   1172e:	615e      	str	r6, [r3, #20]
   11730:	2c08      	cmp	r4, #8
   11732:	f340 852b 	ble.w	1218c <connected+0xb58>
   11736:	6198      	str	r0, [r3, #24]
   11738:	290b      	cmp	r1, #11
   1173a:	f340 854e 	ble.w	121da <connected+0xba6>
   1173e:	240c      	movs	r4, #12
   11740:	f000 bd26 	b.w	12190 <connected+0xb5c>
		LOG_WRN("Failed to connect to %s (%u)", addr_str, err);
   11744:	f06f 031b 	mvn.w	r3, #27
   11748:	e7b7      	b.n	116ba <connected+0x86>
   1174a:	2207      	movs	r2, #7
   1174c:	497c      	ldr	r1, [pc, #496]	; (11940 <connected+0x30c>)
   1174e:	4628      	mov	r0, r5
   11750:	f015 feaa 	bl	274a8 <memcmp>
		if (bt_addr_le_eq(addr, &IFL_bt_addr)) {
   11754:	2800      	cmp	r0, #0
   11756:	f040 808a 	bne.w	1186e <connected+0x23a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1175a:	4b7a      	ldr	r3, [pc, #488]	; (11944 <connected+0x310>)
   1175c:	f3bf 8f5b 	dmb	ish
   11760:	e853 2f00 	ldrex	r2, [r3]
   11764:	f042 0101 	orr.w	r1, r2, #1
   11768:	e843 1000 	strex	r0, r1, [r3]
   1176c:	2800      	cmp	r0, #0
   1176e:	d1f7      	bne.n	11760 <connected+0x12c>
   11770:	f3bf 8f5b 	dmb	ish
			if(atomic_test_and_set_bit(flags, IFL_CONNECTED_FLAG)) {
   11774:	f012 0f01 	tst.w	r2, #1
   11778:	d11d      	bne.n	117b6 <connected+0x182>
			LOG_INF("Internal FL connected, addr: %s", addr_str);
   1177a:	466d      	mov	r5, sp
   1177c:	2300      	movs	r3, #0
   1177e:	713b      	strb	r3, [r7, #4]
   11780:	2302      	movs	r3, #2
   11782:	717b      	strb	r3, [r7, #5]
   11784:	b088      	sub	sp, #32
   11786:	466c      	mov	r4, sp
   11788:	f114 0210 	adds.w	r2, r4, #16
   1178c:	d037      	beq.n	117fe <connected+0x1ca>
   1178e:	200e      	movs	r0, #14
   11790:	b11a      	cbz	r2, 1179a <connected+0x166>
   11792:	2804      	cmp	r0, #4
   11794:	dd01      	ble.n	1179a <connected+0x166>
   11796:	4b6c      	ldr	r3, [pc, #432]	; (11948 <connected+0x314>)
   11798:	6163      	str	r3, [r4, #20]
   1179a:	2300      	movs	r3, #0
   1179c:	703b      	strb	r3, [r7, #0]
   1179e:	2302      	movs	r3, #2
   117a0:	707b      	strb	r3, [r7, #1]
   117a2:	b3d2      	cbz	r2, 1181a <connected+0x1e6>
   117a4:	2808      	cmp	r0, #8
   117a6:	dd02      	ble.n	117ae <connected+0x17a>
   117a8:	f107 0308 	add.w	r3, r7, #8
   117ac:	61a3      	str	r3, [r4, #24]
   117ae:	f104 031c 	add.w	r3, r4, #28
   117b2:	2100      	movs	r1, #0
   117b4:	e02f      	b.n	11816 <connected+0x1e2>
				LOG_WRN("WARNING, DUPLICATE CONNECTION:");
   117b6:	4b65      	ldr	r3, [pc, #404]	; (1194c <connected+0x318>)
   117b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   117bc:	2202      	movs	r2, #2
   117be:	713a      	strb	r2, [r7, #4]
   117c0:	2300      	movs	r3, #0
   117c2:	717b      	strb	r3, [r7, #5]
   117c4:	71bb      	strb	r3, [r7, #6]
   117c6:	71fb      	strb	r3, [r7, #7]
   117c8:	6879      	ldr	r1, [r7, #4]
   117ca:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
   117ce:	4619      	mov	r1, r3
   117d0:	f363 0100 	bfi	r1, r3, #0, #1
   117d4:	f363 0141 	bfi	r1, r3, #1, #1
   117d8:	f363 0182 	bfi	r1, r3, #2, #1
   117dc:	f363 01c5 	bfi	r1, r3, #3, #3
   117e0:	f362 1188 	bfi	r1, r2, #6, #3
   117e4:	2208      	movs	r2, #8
   117e6:	f362 2152 	bfi	r1, r2, #9, #10
   117ea:	f363 41de 	bfi	r1, r3, #19, #12
   117ee:	f363 71df 	bfi	r1, r3, #31, #1
   117f2:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
   117f6:	484e      	ldr	r0, [pc, #312]	; (11930 <connected+0x2fc>)
   117f8:	f015 fa2d 	bl	26c56 <z_impl_z_log_msg_static_create>
   117fc:	e7bd      	b.n	1177a <connected+0x146>
			LOG_INF("Internal FL connected, addr: %s", addr_str);
   117fe:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11802:	e7c5      	b.n	11790 <connected+0x15c>
   11804:	f101 06e8 	add.w	r6, r1, #232	; 0xe8
   11808:	eb06 0c07 	add.w	ip, r6, r7
   1180c:	f81c cce8 	ldrb.w	ip, [ip, #-232]
   11810:	f803 cb01 	strb.w	ip, [r3], #1
   11814:	3101      	adds	r1, #1
   11816:	2901      	cmp	r1, #1
   11818:	d9f4      	bls.n	11804 <connected+0x1d0>
   1181a:	280d      	cmp	r0, #13
   1181c:	dd24      	ble.n	11868 <connected+0x234>
   1181e:	230e      	movs	r3, #14
   11820:	b142      	cbz	r2, 11834 <connected+0x200>
   11822:	2103      	movs	r1, #3
   11824:	7139      	strb	r1, [r7, #4]
   11826:	2100      	movs	r1, #0
   11828:	7179      	strb	r1, [r7, #5]
   1182a:	71b9      	strb	r1, [r7, #6]
   1182c:	2101      	movs	r1, #1
   1182e:	71f9      	strb	r1, [r7, #7]
   11830:	6878      	ldr	r0, [r7, #4]
   11832:	6120      	str	r0, [r4, #16]
   11834:	2100      	movs	r1, #0
   11836:	f36f 0100 	bfc	r1, #0, #1
   1183a:	f36f 0141 	bfc	r1, #1, #1
   1183e:	f36f 0182 	bfc	r1, #2, #1
   11842:	f36f 01c5 	bfc	r1, #3, #3
   11846:	2003      	movs	r0, #3
   11848:	f360 1188 	bfi	r1, r0, #6, #3
   1184c:	f3c3 0309 	ubfx	r3, r3, #0, #10
   11850:	f363 2152 	bfi	r1, r3, #9, #10
   11854:	f36f 41de 	bfc	r1, #19, #12
   11858:	f36f 71df 	bfc	r1, #31, #1
   1185c:	2300      	movs	r3, #0
   1185e:	4834      	ldr	r0, [pc, #208]	; (11930 <connected+0x2fc>)
   11860:	f015 f9f9 	bl	26c56 <z_impl_z_log_msg_static_create>
   11864:	46ad      	mov	sp, r5
   11866:	e74c      	b.n	11702 <connected+0xce>
   11868:	f06f 031b 	mvn.w	r3, #27
   1186c:	e7d8      	b.n	11820 <connected+0x1ec>
   1186e:	2207      	movs	r2, #7
   11870:	4937      	ldr	r1, [pc, #220]	; (11950 <connected+0x31c>)
   11872:	4628      	mov	r0, r5
   11874:	f015 fe18 	bl	274a8 <memcmp>
		} else if (bt_addr_le_eq(addr, &IFR_bt_addr)) {
   11878:	2800      	cmp	r0, #0
   1187a:	f040 80a1 	bne.w	119c0 <connected+0x38c>
   1187e:	4b31      	ldr	r3, [pc, #196]	; (11944 <connected+0x310>)
   11880:	f3bf 8f5b 	dmb	ish
   11884:	e853 2f00 	ldrex	r2, [r3]
   11888:	f042 0102 	orr.w	r1, r2, #2
   1188c:	e843 1000 	strex	r0, r1, [r3]
   11890:	2800      	cmp	r0, #0
   11892:	d1f7      	bne.n	11884 <connected+0x250>
   11894:	f3bf 8f5b 	dmb	ish
			if(atomic_test_and_set_bit(flags, IFR_CONNECTED_FLAG)) {
   11898:	f012 0f02 	tst.w	r2, #2
   1189c:	d11e      	bne.n	118dc <connected+0x2a8>
			LOG_INF("Internal FR connected, addr: %s", addr_str);
   1189e:	466d      	mov	r5, sp
   118a0:	2300      	movs	r3, #0
   118a2:	713b      	strb	r3, [r7, #4]
   118a4:	2302      	movs	r3, #2
   118a6:	717b      	strb	r3, [r7, #5]
   118a8:	b088      	sub	sp, #32
   118aa:	466c      	mov	r4, sp
   118ac:	f114 0210 	adds.w	r2, r4, #16
   118b0:	d038      	beq.n	11924 <connected+0x2f0>
   118b2:	200e      	movs	r0, #14
   118b4:	b11a      	cbz	r2, 118be <connected+0x28a>
   118b6:	2804      	cmp	r0, #4
   118b8:	dd01      	ble.n	118be <connected+0x28a>
   118ba:	4b26      	ldr	r3, [pc, #152]	; (11954 <connected+0x320>)
   118bc:	6163      	str	r3, [r4, #20]
   118be:	2300      	movs	r3, #0
   118c0:	703b      	strb	r3, [r7, #0]
   118c2:	2302      	movs	r3, #2
   118c4:	707b      	strb	r3, [r7, #1]
   118c6:	2a00      	cmp	r2, #0
   118c8:	d050      	beq.n	1196c <connected+0x338>
   118ca:	2808      	cmp	r0, #8
   118cc:	dd02      	ble.n	118d4 <connected+0x2a0>
   118ce:	f107 0308 	add.w	r3, r7, #8
   118d2:	61a3      	str	r3, [r4, #24]
   118d4:	f104 031c 	add.w	r3, r4, #28
   118d8:	2100      	movs	r1, #0
   118da:	e045      	b.n	11968 <connected+0x334>
				LOG_WRN("WARNING, DUPLICATE CONNECTION:");
   118dc:	4b1b      	ldr	r3, [pc, #108]	; (1194c <connected+0x318>)
   118de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
   118e2:	2202      	movs	r2, #2
   118e4:	713a      	strb	r2, [r7, #4]
   118e6:	2300      	movs	r3, #0
   118e8:	717b      	strb	r3, [r7, #5]
   118ea:	71bb      	strb	r3, [r7, #6]
   118ec:	71fb      	strb	r3, [r7, #7]
   118ee:	6879      	ldr	r1, [r7, #4]
   118f0:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
   118f4:	4619      	mov	r1, r3
   118f6:	f363 0100 	bfi	r1, r3, #0, #1
   118fa:	f363 0141 	bfi	r1, r3, #1, #1
   118fe:	f363 0182 	bfi	r1, r3, #2, #1
   11902:	f363 01c5 	bfi	r1, r3, #3, #3
   11906:	f362 1188 	bfi	r1, r2, #6, #3
   1190a:	2208      	movs	r2, #8
   1190c:	f362 2152 	bfi	r1, r2, #9, #10
   11910:	f363 41de 	bfi	r1, r3, #19, #12
   11914:	f363 71df 	bfi	r1, r3, #31, #1
   11918:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
   1191c:	4804      	ldr	r0, [pc, #16]	; (11930 <connected+0x2fc>)
   1191e:	f015 f99a 	bl	26c56 <z_impl_z_log_msg_static_create>
   11922:	e7bc      	b.n	1189e <connected+0x26a>
			LOG_INF("Internal FR connected, addr: %s", addr_str);
   11924:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11928:	e7c4      	b.n	118b4 <connected+0x280>
   1192a:	bf00      	nop
   1192c:	0002d540 	.word	0x0002d540
   11930:	0002d174 	.word	0x0002d174
   11934:	20000694 	.word	0x20000694
   11938:	20000684 	.word	0x20000684
   1193c:	0002d6a8 	.word	0x0002d6a8
   11940:	200079d0 	.word	0x200079d0
   11944:	200079d8 	.word	0x200079d8
   11948:	0002d580 	.word	0x0002d580
   1194c:	0002d560 	.word	0x0002d560
   11950:	200079c8 	.word	0x200079c8
   11954:	0002d5a0 	.word	0x0002d5a0
   11958:	f101 06e8 	add.w	r6, r1, #232	; 0xe8
   1195c:	443e      	add	r6, r7
   1195e:	f816 6ce8 	ldrb.w	r6, [r6, #-232]
   11962:	f803 6b01 	strb.w	r6, [r3], #1
   11966:	3101      	adds	r1, #1
   11968:	2901      	cmp	r1, #1
   1196a:	d9f5      	bls.n	11958 <connected+0x324>
   1196c:	280d      	cmp	r0, #13
   1196e:	dd24      	ble.n	119ba <connected+0x386>
   11970:	230e      	movs	r3, #14
   11972:	b142      	cbz	r2, 11986 <connected+0x352>
   11974:	2103      	movs	r1, #3
   11976:	7139      	strb	r1, [r7, #4]
   11978:	2100      	movs	r1, #0
   1197a:	7179      	strb	r1, [r7, #5]
   1197c:	71b9      	strb	r1, [r7, #6]
   1197e:	2101      	movs	r1, #1
   11980:	71f9      	strb	r1, [r7, #7]
   11982:	6878      	ldr	r0, [r7, #4]
   11984:	6120      	str	r0, [r4, #16]
   11986:	2100      	movs	r1, #0
   11988:	f36f 0100 	bfc	r1, #0, #1
   1198c:	f36f 0141 	bfc	r1, #1, #1
   11990:	f36f 0182 	bfc	r1, #2, #1
   11994:	f36f 01c5 	bfc	r1, #3, #3
   11998:	2003      	movs	r0, #3
   1199a:	f360 1188 	bfi	r1, r0, #6, #3
   1199e:	f3c3 0309 	ubfx	r3, r3, #0, #10
   119a2:	f363 2152 	bfi	r1, r3, #9, #10
   119a6:	f36f 41de 	bfc	r1, #19, #12
   119aa:	f36f 71df 	bfc	r1, #31, #1
   119ae:	2300      	movs	r3, #0
   119b0:	48c3      	ldr	r0, [pc, #780]	; (11cc0 <connected+0x68c>)
   119b2:	f015 f950 	bl	26c56 <z_impl_z_log_msg_static_create>
   119b6:	46ad      	mov	sp, r5
   119b8:	e6a3      	b.n	11702 <connected+0xce>
   119ba:	f06f 031b 	mvn.w	r3, #27
   119be:	e7d8      	b.n	11972 <connected+0x33e>
   119c0:	2207      	movs	r2, #7
   119c2:	49c0      	ldr	r1, [pc, #768]	; (11cc4 <connected+0x690>)
   119c4:	4628      	mov	r0, r5
   119c6:	f015 fd6f 	bl	274a8 <memcmp>
		} else if (bt_addr_le_eq(addr, &IRL_bt_addr)) {
   119ca:	2800      	cmp	r0, #0
   119cc:	f040 8089 	bne.w	11ae2 <connected+0x4ae>
   119d0:	4bbd      	ldr	r3, [pc, #756]	; (11cc8 <connected+0x694>)
   119d2:	f3bf 8f5b 	dmb	ish
   119d6:	e853 2f00 	ldrex	r2, [r3]
   119da:	f042 0104 	orr.w	r1, r2, #4
   119de:	e843 1000 	strex	r0, r1, [r3]
   119e2:	2800      	cmp	r0, #0
   119e4:	d1f7      	bne.n	119d6 <connected+0x3a2>
   119e6:	f3bf 8f5b 	dmb	ish
			if(atomic_test_and_set_bit(flags, IRL_CONNECTED_FLAG)) {
   119ea:	f012 0f04 	tst.w	r2, #4
   119ee:	d11d      	bne.n	11a2c <connected+0x3f8>
			LOG_INF("Internal RL connected, addr: %s", addr_str);
   119f0:	466d      	mov	r5, sp
   119f2:	2300      	movs	r3, #0
   119f4:	713b      	strb	r3, [r7, #4]
   119f6:	2302      	movs	r3, #2
   119f8:	717b      	strb	r3, [r7, #5]
   119fa:	b088      	sub	sp, #32
   119fc:	466c      	mov	r4, sp
   119fe:	f114 0210 	adds.w	r2, r4, #16
   11a02:	d037      	beq.n	11a74 <connected+0x440>
   11a04:	200e      	movs	r0, #14
   11a06:	b11a      	cbz	r2, 11a10 <connected+0x3dc>
   11a08:	2804      	cmp	r0, #4
   11a0a:	dd01      	ble.n	11a10 <connected+0x3dc>
   11a0c:	4baf      	ldr	r3, [pc, #700]	; (11ccc <connected+0x698>)
   11a0e:	6163      	str	r3, [r4, #20]
   11a10:	2300      	movs	r3, #0
   11a12:	703b      	strb	r3, [r7, #0]
   11a14:	2302      	movs	r3, #2
   11a16:	707b      	strb	r3, [r7, #1]
   11a18:	b3ca      	cbz	r2, 11a8e <connected+0x45a>
   11a1a:	2808      	cmp	r0, #8
   11a1c:	dd02      	ble.n	11a24 <connected+0x3f0>
   11a1e:	f107 0308 	add.w	r3, r7, #8
   11a22:	61a3      	str	r3, [r4, #24]
   11a24:	f104 031c 	add.w	r3, r4, #28
   11a28:	2100      	movs	r1, #0
   11a2a:	e02e      	b.n	11a8a <connected+0x456>
				LOG_WRN("WARNING, DUPLICATE CONNECTION:");
   11a2c:	4ba8      	ldr	r3, [pc, #672]	; (11cd0 <connected+0x69c>)
   11a2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
   11a32:	2202      	movs	r2, #2
   11a34:	713a      	strb	r2, [r7, #4]
   11a36:	2300      	movs	r3, #0
   11a38:	717b      	strb	r3, [r7, #5]
   11a3a:	71bb      	strb	r3, [r7, #6]
   11a3c:	71fb      	strb	r3, [r7, #7]
   11a3e:	6879      	ldr	r1, [r7, #4]
   11a40:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
   11a44:	4619      	mov	r1, r3
   11a46:	f363 0100 	bfi	r1, r3, #0, #1
   11a4a:	f363 0141 	bfi	r1, r3, #1, #1
   11a4e:	f363 0182 	bfi	r1, r3, #2, #1
   11a52:	f363 01c5 	bfi	r1, r3, #3, #3
   11a56:	f362 1188 	bfi	r1, r2, #6, #3
   11a5a:	2208      	movs	r2, #8
   11a5c:	f362 2152 	bfi	r1, r2, #9, #10
   11a60:	f363 41de 	bfi	r1, r3, #19, #12
   11a64:	f363 71df 	bfi	r1, r3, #31, #1
   11a68:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
   11a6c:	4894      	ldr	r0, [pc, #592]	; (11cc0 <connected+0x68c>)
   11a6e:	f015 f8f2 	bl	26c56 <z_impl_z_log_msg_static_create>
   11a72:	e7bd      	b.n	119f0 <connected+0x3bc>
			LOG_INF("Internal RL connected, addr: %s", addr_str);
   11a74:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11a78:	e7c5      	b.n	11a06 <connected+0x3d2>
   11a7a:	f101 06e8 	add.w	r6, r1, #232	; 0xe8
   11a7e:	443e      	add	r6, r7
   11a80:	f816 6ce8 	ldrb.w	r6, [r6, #-232]
   11a84:	f803 6b01 	strb.w	r6, [r3], #1
   11a88:	3101      	adds	r1, #1
   11a8a:	2901      	cmp	r1, #1
   11a8c:	d9f5      	bls.n	11a7a <connected+0x446>
   11a8e:	280d      	cmp	r0, #13
   11a90:	dd24      	ble.n	11adc <connected+0x4a8>
   11a92:	230e      	movs	r3, #14
   11a94:	b142      	cbz	r2, 11aa8 <connected+0x474>
   11a96:	2103      	movs	r1, #3
   11a98:	7139      	strb	r1, [r7, #4]
   11a9a:	2100      	movs	r1, #0
   11a9c:	7179      	strb	r1, [r7, #5]
   11a9e:	71b9      	strb	r1, [r7, #6]
   11aa0:	2101      	movs	r1, #1
   11aa2:	71f9      	strb	r1, [r7, #7]
   11aa4:	6878      	ldr	r0, [r7, #4]
   11aa6:	6120      	str	r0, [r4, #16]
   11aa8:	2100      	movs	r1, #0
   11aaa:	f36f 0100 	bfc	r1, #0, #1
   11aae:	f36f 0141 	bfc	r1, #1, #1
   11ab2:	f36f 0182 	bfc	r1, #2, #1
   11ab6:	f36f 01c5 	bfc	r1, #3, #3
   11aba:	2003      	movs	r0, #3
   11abc:	f360 1188 	bfi	r1, r0, #6, #3
   11ac0:	f3c3 0309 	ubfx	r3, r3, #0, #10
   11ac4:	f363 2152 	bfi	r1, r3, #9, #10
   11ac8:	f36f 41de 	bfc	r1, #19, #12
   11acc:	f36f 71df 	bfc	r1, #31, #1
   11ad0:	2300      	movs	r3, #0
   11ad2:	487b      	ldr	r0, [pc, #492]	; (11cc0 <connected+0x68c>)
   11ad4:	f015 f8bf 	bl	26c56 <z_impl_z_log_msg_static_create>
   11ad8:	46ad      	mov	sp, r5
   11ada:	e612      	b.n	11702 <connected+0xce>
   11adc:	f06f 031b 	mvn.w	r3, #27
   11ae0:	e7d8      	b.n	11a94 <connected+0x460>
   11ae2:	2207      	movs	r2, #7
   11ae4:	497b      	ldr	r1, [pc, #492]	; (11cd4 <connected+0x6a0>)
   11ae6:	4628      	mov	r0, r5
   11ae8:	f015 fcde 	bl	274a8 <memcmp>
		} else if (bt_addr_le_eq(addr, &IRR_bt_addr)) {
   11aec:	2800      	cmp	r0, #0
   11aee:	f040 8089 	bne.w	11c04 <connected+0x5d0>
   11af2:	4b75      	ldr	r3, [pc, #468]	; (11cc8 <connected+0x694>)
   11af4:	f3bf 8f5b 	dmb	ish
   11af8:	e853 2f00 	ldrex	r2, [r3]
   11afc:	f042 0108 	orr.w	r1, r2, #8
   11b00:	e843 1000 	strex	r0, r1, [r3]
   11b04:	2800      	cmp	r0, #0
   11b06:	d1f7      	bne.n	11af8 <connected+0x4c4>
   11b08:	f3bf 8f5b 	dmb	ish
			if(atomic_test_and_set_bit(flags, IRR_CONNECTED_FLAG)) {
   11b0c:	f012 0f08 	tst.w	r2, #8
   11b10:	d11d      	bne.n	11b4e <connected+0x51a>
			LOG_INF("Internal RR connected, addr: %s", addr_str);
   11b12:	466d      	mov	r5, sp
   11b14:	2300      	movs	r3, #0
   11b16:	713b      	strb	r3, [r7, #4]
   11b18:	2302      	movs	r3, #2
   11b1a:	717b      	strb	r3, [r7, #5]
   11b1c:	b088      	sub	sp, #32
   11b1e:	466c      	mov	r4, sp
   11b20:	f114 0210 	adds.w	r2, r4, #16
   11b24:	d037      	beq.n	11b96 <connected+0x562>
   11b26:	200e      	movs	r0, #14
   11b28:	b11a      	cbz	r2, 11b32 <connected+0x4fe>
   11b2a:	2804      	cmp	r0, #4
   11b2c:	dd01      	ble.n	11b32 <connected+0x4fe>
   11b2e:	4b6a      	ldr	r3, [pc, #424]	; (11cd8 <connected+0x6a4>)
   11b30:	6163      	str	r3, [r4, #20]
   11b32:	2300      	movs	r3, #0
   11b34:	703b      	strb	r3, [r7, #0]
   11b36:	2302      	movs	r3, #2
   11b38:	707b      	strb	r3, [r7, #1]
   11b3a:	b3ca      	cbz	r2, 11bb0 <connected+0x57c>
   11b3c:	2808      	cmp	r0, #8
   11b3e:	dd02      	ble.n	11b46 <connected+0x512>
   11b40:	f107 0308 	add.w	r3, r7, #8
   11b44:	61a3      	str	r3, [r4, #24]
   11b46:	f104 031c 	add.w	r3, r4, #28
   11b4a:	2100      	movs	r1, #0
   11b4c:	e02e      	b.n	11bac <connected+0x578>
				LOG_WRN("WARNING, DUPLICATE CONNECTION:");
   11b4e:	4b60      	ldr	r3, [pc, #384]	; (11cd0 <connected+0x69c>)
   11b50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   11b54:	2202      	movs	r2, #2
   11b56:	713a      	strb	r2, [r7, #4]
   11b58:	2300      	movs	r3, #0
   11b5a:	717b      	strb	r3, [r7, #5]
   11b5c:	71bb      	strb	r3, [r7, #6]
   11b5e:	71fb      	strb	r3, [r7, #7]
   11b60:	6879      	ldr	r1, [r7, #4]
   11b62:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
   11b66:	4619      	mov	r1, r3
   11b68:	f363 0100 	bfi	r1, r3, #0, #1
   11b6c:	f363 0141 	bfi	r1, r3, #1, #1
   11b70:	f363 0182 	bfi	r1, r3, #2, #1
   11b74:	f363 01c5 	bfi	r1, r3, #3, #3
   11b78:	f362 1188 	bfi	r1, r2, #6, #3
   11b7c:	2208      	movs	r2, #8
   11b7e:	f362 2152 	bfi	r1, r2, #9, #10
   11b82:	f363 41de 	bfi	r1, r3, #19, #12
   11b86:	f363 71df 	bfi	r1, r3, #31, #1
   11b8a:	f107 0298 	add.w	r2, r7, #152	; 0x98
   11b8e:	484c      	ldr	r0, [pc, #304]	; (11cc0 <connected+0x68c>)
   11b90:	f015 f861 	bl	26c56 <z_impl_z_log_msg_static_create>
   11b94:	e7bd      	b.n	11b12 <connected+0x4de>
			LOG_INF("Internal RR connected, addr: %s", addr_str);
   11b96:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11b9a:	e7c5      	b.n	11b28 <connected+0x4f4>
   11b9c:	f101 06e8 	add.w	r6, r1, #232	; 0xe8
   11ba0:	443e      	add	r6, r7
   11ba2:	f816 6ce8 	ldrb.w	r6, [r6, #-232]
   11ba6:	f803 6b01 	strb.w	r6, [r3], #1
   11baa:	3101      	adds	r1, #1
   11bac:	2901      	cmp	r1, #1
   11bae:	d9f5      	bls.n	11b9c <connected+0x568>
   11bb0:	280d      	cmp	r0, #13
   11bb2:	dd24      	ble.n	11bfe <connected+0x5ca>
   11bb4:	230e      	movs	r3, #14
   11bb6:	b142      	cbz	r2, 11bca <connected+0x596>
   11bb8:	2103      	movs	r1, #3
   11bba:	7139      	strb	r1, [r7, #4]
   11bbc:	2100      	movs	r1, #0
   11bbe:	7179      	strb	r1, [r7, #5]
   11bc0:	71b9      	strb	r1, [r7, #6]
   11bc2:	2101      	movs	r1, #1
   11bc4:	71f9      	strb	r1, [r7, #7]
   11bc6:	6878      	ldr	r0, [r7, #4]
   11bc8:	6120      	str	r0, [r4, #16]
   11bca:	2100      	movs	r1, #0
   11bcc:	f36f 0100 	bfc	r1, #0, #1
   11bd0:	f36f 0141 	bfc	r1, #1, #1
   11bd4:	f36f 0182 	bfc	r1, #2, #1
   11bd8:	f36f 01c5 	bfc	r1, #3, #3
   11bdc:	2003      	movs	r0, #3
   11bde:	f360 1188 	bfi	r1, r0, #6, #3
   11be2:	f3c3 0309 	ubfx	r3, r3, #0, #10
   11be6:	f363 2152 	bfi	r1, r3, #9, #10
   11bea:	f36f 41de 	bfc	r1, #19, #12
   11bee:	f36f 71df 	bfc	r1, #31, #1
   11bf2:	2300      	movs	r3, #0
   11bf4:	4832      	ldr	r0, [pc, #200]	; (11cc0 <connected+0x68c>)
   11bf6:	f015 f82e 	bl	26c56 <z_impl_z_log_msg_static_create>
   11bfa:	46ad      	mov	sp, r5
   11bfc:	e581      	b.n	11702 <connected+0xce>
   11bfe:	f06f 031b 	mvn.w	r3, #27
   11c02:	e7d8      	b.n	11bb6 <connected+0x582>
   11c04:	2207      	movs	r2, #7
   11c06:	4935      	ldr	r1, [pc, #212]	; (11cdc <connected+0x6a8>)
   11c08:	4628      	mov	r0, r5
   11c0a:	f015 fc4d 	bl	274a8 <memcmp>
		} else if (bt_addr_le_eq(addr, &EFL_bt_addr)) {
   11c0e:	2800      	cmp	r0, #0
   11c10:	f040 809c 	bne.w	11d4c <connected+0x718>
   11c14:	4b2c      	ldr	r3, [pc, #176]	; (11cc8 <connected+0x694>)
   11c16:	f3bf 8f5b 	dmb	ish
   11c1a:	e853 2f00 	ldrex	r2, [r3]
   11c1e:	f042 0110 	orr.w	r1, r2, #16
   11c22:	e843 1000 	strex	r0, r1, [r3]
   11c26:	2800      	cmp	r0, #0
   11c28:	d1f7      	bne.n	11c1a <connected+0x5e6>
   11c2a:	f3bf 8f5b 	dmb	ish
			if(atomic_test_and_set_bit(flags, EFL_CONNECTED_FLAG)) {
   11c2e:	f012 0f10 	tst.w	r2, #16
   11c32:	d11e      	bne.n	11c72 <connected+0x63e>
			LOG_INF("External FL connected, addr: %s", addr_str);
   11c34:	466d      	mov	r5, sp
   11c36:	2300      	movs	r3, #0
   11c38:	713b      	strb	r3, [r7, #4]
   11c3a:	2302      	movs	r3, #2
   11c3c:	717b      	strb	r3, [r7, #5]
   11c3e:	b088      	sub	sp, #32
   11c40:	466c      	mov	r4, sp
   11c42:	f114 0210 	adds.w	r2, r4, #16
   11c46:	d038      	beq.n	11cba <connected+0x686>
   11c48:	200e      	movs	r0, #14
   11c4a:	b11a      	cbz	r2, 11c54 <connected+0x620>
   11c4c:	2804      	cmp	r0, #4
   11c4e:	dd01      	ble.n	11c54 <connected+0x620>
   11c50:	4b23      	ldr	r3, [pc, #140]	; (11ce0 <connected+0x6ac>)
   11c52:	6163      	str	r3, [r4, #20]
   11c54:	2300      	movs	r3, #0
   11c56:	703b      	strb	r3, [r7, #0]
   11c58:	2302      	movs	r3, #2
   11c5a:	707b      	strb	r3, [r7, #1]
   11c5c:	2a00      	cmp	r2, #0
   11c5e:	d04b      	beq.n	11cf8 <connected+0x6c4>
   11c60:	2808      	cmp	r0, #8
   11c62:	dd02      	ble.n	11c6a <connected+0x636>
   11c64:	f107 0308 	add.w	r3, r7, #8
   11c68:	61a3      	str	r3, [r4, #24]
   11c6a:	f104 031c 	add.w	r3, r4, #28
   11c6e:	2100      	movs	r1, #0
   11c70:	e040      	b.n	11cf4 <connected+0x6c0>
				LOG_WRN("WARNING, DUPLICATE CONNECTION:");
   11c72:	4b17      	ldr	r3, [pc, #92]	; (11cd0 <connected+0x69c>)
   11c74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   11c78:	2202      	movs	r2, #2
   11c7a:	713a      	strb	r2, [r7, #4]
   11c7c:	2300      	movs	r3, #0
   11c7e:	717b      	strb	r3, [r7, #5]
   11c80:	71bb      	strb	r3, [r7, #6]
   11c82:	71fb      	strb	r3, [r7, #7]
   11c84:	6879      	ldr	r1, [r7, #4]
   11c86:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
   11c8a:	4619      	mov	r1, r3
   11c8c:	f363 0100 	bfi	r1, r3, #0, #1
   11c90:	f363 0141 	bfi	r1, r3, #1, #1
   11c94:	f363 0182 	bfi	r1, r3, #2, #1
   11c98:	f363 01c5 	bfi	r1, r3, #3, #3
   11c9c:	f362 1188 	bfi	r1, r2, #6, #3
   11ca0:	2208      	movs	r2, #8
   11ca2:	f362 2152 	bfi	r1, r2, #9, #10
   11ca6:	f363 41de 	bfi	r1, r3, #19, #12
   11caa:	f363 71df 	bfi	r1, r3, #31, #1
   11cae:	f107 0280 	add.w	r2, r7, #128	; 0x80
   11cb2:	4803      	ldr	r0, [pc, #12]	; (11cc0 <connected+0x68c>)
   11cb4:	f014 ffcf 	bl	26c56 <z_impl_z_log_msg_static_create>
   11cb8:	e7bc      	b.n	11c34 <connected+0x600>
			LOG_INF("External FL connected, addr: %s", addr_str);
   11cba:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11cbe:	e7c4      	b.n	11c4a <connected+0x616>
   11cc0:	0002d174 	.word	0x0002d174
   11cc4:	200079c0 	.word	0x200079c0
   11cc8:	200079d8 	.word	0x200079d8
   11ccc:	0002d5c0 	.word	0x0002d5c0
   11cd0:	0002d560 	.word	0x0002d560
   11cd4:	200079b8 	.word	0x200079b8
   11cd8:	0002d5e0 	.word	0x0002d5e0
   11cdc:	200079b0 	.word	0x200079b0
   11ce0:	0002d600 	.word	0x0002d600
   11ce4:	f101 06e8 	add.w	r6, r1, #232	; 0xe8
   11ce8:	443e      	add	r6, r7
   11cea:	f816 6ce8 	ldrb.w	r6, [r6, #-232]
   11cee:	f803 6b01 	strb.w	r6, [r3], #1
   11cf2:	3101      	adds	r1, #1
   11cf4:	2901      	cmp	r1, #1
   11cf6:	d9f5      	bls.n	11ce4 <connected+0x6b0>
   11cf8:	280d      	cmp	r0, #13
   11cfa:	dd24      	ble.n	11d46 <connected+0x712>
   11cfc:	230e      	movs	r3, #14
   11cfe:	b142      	cbz	r2, 11d12 <connected+0x6de>
   11d00:	2103      	movs	r1, #3
   11d02:	7139      	strb	r1, [r7, #4]
   11d04:	2100      	movs	r1, #0
   11d06:	7179      	strb	r1, [r7, #5]
   11d08:	71b9      	strb	r1, [r7, #6]
   11d0a:	2101      	movs	r1, #1
   11d0c:	71f9      	strb	r1, [r7, #7]
   11d0e:	6878      	ldr	r0, [r7, #4]
   11d10:	6120      	str	r0, [r4, #16]
   11d12:	2100      	movs	r1, #0
   11d14:	f36f 0100 	bfc	r1, #0, #1
   11d18:	f36f 0141 	bfc	r1, #1, #1
   11d1c:	f36f 0182 	bfc	r1, #2, #1
   11d20:	f36f 01c5 	bfc	r1, #3, #3
   11d24:	2003      	movs	r0, #3
   11d26:	f360 1188 	bfi	r1, r0, #6, #3
   11d2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
   11d2e:	f363 2152 	bfi	r1, r3, #9, #10
   11d32:	f36f 41de 	bfc	r1, #19, #12
   11d36:	f36f 71df 	bfc	r1, #31, #1
   11d3a:	2300      	movs	r3, #0
   11d3c:	48be      	ldr	r0, [pc, #760]	; (12038 <connected+0xa04>)
   11d3e:	f014 ff8a 	bl	26c56 <z_impl_z_log_msg_static_create>
   11d42:	46ad      	mov	sp, r5
   11d44:	e4dd      	b.n	11702 <connected+0xce>
   11d46:	f06f 031b 	mvn.w	r3, #27
   11d4a:	e7d8      	b.n	11cfe <connected+0x6ca>
   11d4c:	2207      	movs	r2, #7
   11d4e:	49bb      	ldr	r1, [pc, #748]	; (1203c <connected+0xa08>)
   11d50:	4628      	mov	r0, r5
   11d52:	f015 fba9 	bl	274a8 <memcmp>
		} else if (bt_addr_le_eq(addr, &EFR_bt_addr)) {
   11d56:	2800      	cmp	r0, #0
   11d58:	f040 8087 	bne.w	11e6a <connected+0x836>
   11d5c:	4bb8      	ldr	r3, [pc, #736]	; (12040 <connected+0xa0c>)
   11d5e:	f3bf 8f5b 	dmb	ish
   11d62:	e853 2f00 	ldrex	r2, [r3]
   11d66:	f042 0120 	orr.w	r1, r2, #32
   11d6a:	e843 1000 	strex	r0, r1, [r3]
   11d6e:	2800      	cmp	r0, #0
   11d70:	d1f7      	bne.n	11d62 <connected+0x72e>
   11d72:	f3bf 8f5b 	dmb	ish
			if(atomic_test_and_set_bit(flags, EFR_CONNECTED_FLAG)) {
   11d76:	f012 0f20 	tst.w	r2, #32
   11d7a:	d11d      	bne.n	11db8 <connected+0x784>
			LOG_INF("External FR connected, addr: %s", addr_str);
   11d7c:	466d      	mov	r5, sp
   11d7e:	2300      	movs	r3, #0
   11d80:	713b      	strb	r3, [r7, #4]
   11d82:	2302      	movs	r3, #2
   11d84:	717b      	strb	r3, [r7, #5]
   11d86:	b088      	sub	sp, #32
   11d88:	466c      	mov	r4, sp
   11d8a:	f114 0210 	adds.w	r2, r4, #16
   11d8e:	d035      	beq.n	11dfc <connected+0x7c8>
   11d90:	200e      	movs	r0, #14
   11d92:	b11a      	cbz	r2, 11d9c <connected+0x768>
   11d94:	2804      	cmp	r0, #4
   11d96:	dd01      	ble.n	11d9c <connected+0x768>
   11d98:	4baa      	ldr	r3, [pc, #680]	; (12044 <connected+0xa10>)
   11d9a:	6163      	str	r3, [r4, #20]
   11d9c:	2300      	movs	r3, #0
   11d9e:	703b      	strb	r3, [r7, #0]
   11da0:	2302      	movs	r3, #2
   11da2:	707b      	strb	r3, [r7, #1]
   11da4:	b3ba      	cbz	r2, 11e16 <connected+0x7e2>
   11da6:	2808      	cmp	r0, #8
   11da8:	dd02      	ble.n	11db0 <connected+0x77c>
   11daa:	f107 0308 	add.w	r3, r7, #8
   11dae:	61a3      	str	r3, [r4, #24]
   11db0:	f104 031c 	add.w	r3, r4, #28
   11db4:	2100      	movs	r1, #0
   11db6:	e02c      	b.n	11e12 <connected+0x7de>
				LOG_WRN("WARNING, DUPLICATE CONNECTION:");
   11db8:	4ba3      	ldr	r3, [pc, #652]	; (12048 <connected+0xa14>)
   11dba:	66fb      	str	r3, [r7, #108]	; 0x6c
   11dbc:	2202      	movs	r2, #2
   11dbe:	713a      	strb	r2, [r7, #4]
   11dc0:	2300      	movs	r3, #0
   11dc2:	717b      	strb	r3, [r7, #5]
   11dc4:	71bb      	strb	r3, [r7, #6]
   11dc6:	71fb      	strb	r3, [r7, #7]
   11dc8:	6879      	ldr	r1, [r7, #4]
   11dca:	66b9      	str	r1, [r7, #104]	; 0x68
   11dcc:	4619      	mov	r1, r3
   11dce:	f363 0100 	bfi	r1, r3, #0, #1
   11dd2:	f363 0141 	bfi	r1, r3, #1, #1
   11dd6:	f363 0182 	bfi	r1, r3, #2, #1
   11dda:	f363 01c5 	bfi	r1, r3, #3, #3
   11dde:	f362 1188 	bfi	r1, r2, #6, #3
   11de2:	2208      	movs	r2, #8
   11de4:	f362 2152 	bfi	r1, r2, #9, #10
   11de8:	f363 41de 	bfi	r1, r3, #19, #12
   11dec:	f363 71df 	bfi	r1, r3, #31, #1
   11df0:	f107 0268 	add.w	r2, r7, #104	; 0x68
   11df4:	4890      	ldr	r0, [pc, #576]	; (12038 <connected+0xa04>)
   11df6:	f014 ff2e 	bl	26c56 <z_impl_z_log_msg_static_create>
   11dfa:	e7bf      	b.n	11d7c <connected+0x748>
			LOG_INF("External FR connected, addr: %s", addr_str);
   11dfc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11e00:	e7c7      	b.n	11d92 <connected+0x75e>
   11e02:	f101 06e8 	add.w	r6, r1, #232	; 0xe8
   11e06:	443e      	add	r6, r7
   11e08:	f816 6ce8 	ldrb.w	r6, [r6, #-232]
   11e0c:	f803 6b01 	strb.w	r6, [r3], #1
   11e10:	3101      	adds	r1, #1
   11e12:	2901      	cmp	r1, #1
   11e14:	d9f5      	bls.n	11e02 <connected+0x7ce>
   11e16:	280d      	cmp	r0, #13
   11e18:	dd24      	ble.n	11e64 <connected+0x830>
   11e1a:	230e      	movs	r3, #14
   11e1c:	b142      	cbz	r2, 11e30 <connected+0x7fc>
   11e1e:	2103      	movs	r1, #3
   11e20:	7139      	strb	r1, [r7, #4]
   11e22:	2100      	movs	r1, #0
   11e24:	7179      	strb	r1, [r7, #5]
   11e26:	71b9      	strb	r1, [r7, #6]
   11e28:	2101      	movs	r1, #1
   11e2a:	71f9      	strb	r1, [r7, #7]
   11e2c:	6878      	ldr	r0, [r7, #4]
   11e2e:	6120      	str	r0, [r4, #16]
   11e30:	2100      	movs	r1, #0
   11e32:	f36f 0100 	bfc	r1, #0, #1
   11e36:	f36f 0141 	bfc	r1, #1, #1
   11e3a:	f36f 0182 	bfc	r1, #2, #1
   11e3e:	f36f 01c5 	bfc	r1, #3, #3
   11e42:	2003      	movs	r0, #3
   11e44:	f360 1188 	bfi	r1, r0, #6, #3
   11e48:	f3c3 0309 	ubfx	r3, r3, #0, #10
   11e4c:	f363 2152 	bfi	r1, r3, #9, #10
   11e50:	f36f 41de 	bfc	r1, #19, #12
   11e54:	f36f 71df 	bfc	r1, #31, #1
   11e58:	2300      	movs	r3, #0
   11e5a:	4877      	ldr	r0, [pc, #476]	; (12038 <connected+0xa04>)
   11e5c:	f014 fefb 	bl	26c56 <z_impl_z_log_msg_static_create>
   11e60:	46ad      	mov	sp, r5
   11e62:	e44e      	b.n	11702 <connected+0xce>
   11e64:	f06f 031b 	mvn.w	r3, #27
   11e68:	e7d8      	b.n	11e1c <connected+0x7e8>
   11e6a:	2207      	movs	r2, #7
   11e6c:	4977      	ldr	r1, [pc, #476]	; (1204c <connected+0xa18>)
   11e6e:	4628      	mov	r0, r5
   11e70:	f015 fb1a 	bl	274a8 <memcmp>
		} else if (bt_addr_le_eq(addr, &ERL_bt_addr)) {
   11e74:	2800      	cmp	r0, #0
   11e76:	f040 8088 	bne.w	11f8a <connected+0x956>
   11e7a:	4b71      	ldr	r3, [pc, #452]	; (12040 <connected+0xa0c>)
   11e7c:	f3bf 8f5b 	dmb	ish
   11e80:	e853 2f00 	ldrex	r2, [r3]
   11e84:	f042 0140 	orr.w	r1, r2, #64	; 0x40
   11e88:	e843 1000 	strex	r0, r1, [r3]
   11e8c:	2800      	cmp	r0, #0
   11e8e:	d1f7      	bne.n	11e80 <connected+0x84c>
   11e90:	f3bf 8f5b 	dmb	ish
			if(atomic_test_and_set_bit(flags, ERL_CONNECTED_FLAG)) {
   11e94:	f012 0f40 	tst.w	r2, #64	; 0x40
   11e98:	d11d      	bne.n	11ed6 <connected+0x8a2>
			LOG_INF("External RL connected, addr: %s", addr_str);
   11e9a:	466d      	mov	r5, sp
   11e9c:	2300      	movs	r3, #0
   11e9e:	713b      	strb	r3, [r7, #4]
   11ea0:	2302      	movs	r3, #2
   11ea2:	717b      	strb	r3, [r7, #5]
   11ea4:	b088      	sub	sp, #32
   11ea6:	466c      	mov	r4, sp
   11ea8:	f114 0210 	adds.w	r2, r4, #16
   11eac:	d035      	beq.n	11f1a <connected+0x8e6>
   11eae:	200e      	movs	r0, #14
   11eb0:	b11a      	cbz	r2, 11eba <connected+0x886>
   11eb2:	2804      	cmp	r0, #4
   11eb4:	dd01      	ble.n	11eba <connected+0x886>
   11eb6:	4b66      	ldr	r3, [pc, #408]	; (12050 <connected+0xa1c>)
   11eb8:	6163      	str	r3, [r4, #20]
   11eba:	2300      	movs	r3, #0
   11ebc:	703b      	strb	r3, [r7, #0]
   11ebe:	2302      	movs	r3, #2
   11ec0:	707b      	strb	r3, [r7, #1]
   11ec2:	b3ba      	cbz	r2, 11f34 <connected+0x900>
   11ec4:	2808      	cmp	r0, #8
   11ec6:	dd02      	ble.n	11ece <connected+0x89a>
   11ec8:	f107 0308 	add.w	r3, r7, #8
   11ecc:	61a3      	str	r3, [r4, #24]
   11ece:	f104 031c 	add.w	r3, r4, #28
   11ed2:	2100      	movs	r1, #0
   11ed4:	e02c      	b.n	11f30 <connected+0x8fc>
				LOG_WRN("WARNING, DUPLICATE CONNECTION:");
   11ed6:	4b5c      	ldr	r3, [pc, #368]	; (12048 <connected+0xa14>)
   11ed8:	657b      	str	r3, [r7, #84]	; 0x54
   11eda:	2202      	movs	r2, #2
   11edc:	713a      	strb	r2, [r7, #4]
   11ede:	2300      	movs	r3, #0
   11ee0:	717b      	strb	r3, [r7, #5]
   11ee2:	71bb      	strb	r3, [r7, #6]
   11ee4:	71fb      	strb	r3, [r7, #7]
   11ee6:	6879      	ldr	r1, [r7, #4]
   11ee8:	6539      	str	r1, [r7, #80]	; 0x50
   11eea:	4619      	mov	r1, r3
   11eec:	f363 0100 	bfi	r1, r3, #0, #1
   11ef0:	f363 0141 	bfi	r1, r3, #1, #1
   11ef4:	f363 0182 	bfi	r1, r3, #2, #1
   11ef8:	f363 01c5 	bfi	r1, r3, #3, #3
   11efc:	f362 1188 	bfi	r1, r2, #6, #3
   11f00:	2208      	movs	r2, #8
   11f02:	f362 2152 	bfi	r1, r2, #9, #10
   11f06:	f363 41de 	bfi	r1, r3, #19, #12
   11f0a:	f363 71df 	bfi	r1, r3, #31, #1
   11f0e:	f107 0250 	add.w	r2, r7, #80	; 0x50
   11f12:	4849      	ldr	r0, [pc, #292]	; (12038 <connected+0xa04>)
   11f14:	f014 fe9f 	bl	26c56 <z_impl_z_log_msg_static_create>
   11f18:	e7bf      	b.n	11e9a <connected+0x866>
			LOG_INF("External RL connected, addr: %s", addr_str);
   11f1a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11f1e:	e7c7      	b.n	11eb0 <connected+0x87c>
   11f20:	f101 06e8 	add.w	r6, r1, #232	; 0xe8
   11f24:	443e      	add	r6, r7
   11f26:	f816 6ce8 	ldrb.w	r6, [r6, #-232]
   11f2a:	f803 6b01 	strb.w	r6, [r3], #1
   11f2e:	3101      	adds	r1, #1
   11f30:	2901      	cmp	r1, #1
   11f32:	d9f5      	bls.n	11f20 <connected+0x8ec>
   11f34:	280d      	cmp	r0, #13
   11f36:	dd25      	ble.n	11f84 <connected+0x950>
   11f38:	230e      	movs	r3, #14
   11f3a:	b142      	cbz	r2, 11f4e <connected+0x91a>
   11f3c:	2103      	movs	r1, #3
   11f3e:	7139      	strb	r1, [r7, #4]
   11f40:	2100      	movs	r1, #0
   11f42:	7179      	strb	r1, [r7, #5]
   11f44:	71b9      	strb	r1, [r7, #6]
   11f46:	2101      	movs	r1, #1
   11f48:	71f9      	strb	r1, [r7, #7]
   11f4a:	6878      	ldr	r0, [r7, #4]
   11f4c:	6120      	str	r0, [r4, #16]
   11f4e:	2100      	movs	r1, #0
   11f50:	f36f 0100 	bfc	r1, #0, #1
   11f54:	f36f 0141 	bfc	r1, #1, #1
   11f58:	f36f 0182 	bfc	r1, #2, #1
   11f5c:	f36f 01c5 	bfc	r1, #3, #3
   11f60:	2003      	movs	r0, #3
   11f62:	f360 1188 	bfi	r1, r0, #6, #3
   11f66:	f3c3 0309 	ubfx	r3, r3, #0, #10
   11f6a:	f363 2152 	bfi	r1, r3, #9, #10
   11f6e:	f36f 41de 	bfc	r1, #19, #12
   11f72:	f36f 71df 	bfc	r1, #31, #1
   11f76:	2300      	movs	r3, #0
   11f78:	482f      	ldr	r0, [pc, #188]	; (12038 <connected+0xa04>)
   11f7a:	f014 fe6c 	bl	26c56 <z_impl_z_log_msg_static_create>
   11f7e:	46ad      	mov	sp, r5
   11f80:	f7ff bbbf 	b.w	11702 <connected+0xce>
   11f84:	f06f 031b 	mvn.w	r3, #27
   11f88:	e7d7      	b.n	11f3a <connected+0x906>
   11f8a:	2207      	movs	r2, #7
   11f8c:	4931      	ldr	r1, [pc, #196]	; (12054 <connected+0xa20>)
   11f8e:	4628      	mov	r0, r5
   11f90:	f015 fa8a 	bl	274a8 <memcmp>
		} else if (bt_addr_le_eq(addr, &ERR_bt_addr)) {
   11f94:	b300      	cbz	r0, 11fd8 <connected+0x9a4>
			LOG_WRN("UNRECOGNIZED SENSOR CONNECTED, addr: %s", addr_str);
   11f96:	466c      	mov	r4, sp
   11f98:	2300      	movs	r3, #0
   11f9a:	713b      	strb	r3, [r7, #4]
   11f9c:	2302      	movs	r3, #2
   11f9e:	717b      	strb	r3, [r7, #5]
   11fa0:	b088      	sub	sp, #32
   11fa2:	466b      	mov	r3, sp
   11fa4:	f113 0210 	adds.w	r2, r3, #16
   11fa8:	f000 80b4 	beq.w	12114 <connected+0xae0>
   11fac:	250e      	movs	r5, #14
   11fae:	b11a      	cbz	r2, 11fb8 <connected+0x984>
   11fb0:	2d04      	cmp	r5, #4
   11fb2:	dd01      	ble.n	11fb8 <connected+0x984>
   11fb4:	4928      	ldr	r1, [pc, #160]	; (12058 <connected+0xa24>)
   11fb6:	6159      	str	r1, [r3, #20]
   11fb8:	2100      	movs	r1, #0
   11fba:	7039      	strb	r1, [r7, #0]
   11fbc:	2102      	movs	r1, #2
   11fbe:	7079      	strb	r1, [r7, #1]
   11fc0:	2a00      	cmp	r2, #0
   11fc2:	f000 80b4 	beq.w	1212e <connected+0xafa>
   11fc6:	2d08      	cmp	r5, #8
   11fc8:	dd02      	ble.n	11fd0 <connected+0x99c>
   11fca:	f107 0108 	add.w	r1, r7, #8
   11fce:	6199      	str	r1, [r3, #24]
   11fd0:	f103 011c 	add.w	r1, r3, #28
   11fd4:	2000      	movs	r0, #0
   11fd6:	e0a8      	b.n	1212a <connected+0xaf6>
   11fd8:	4b19      	ldr	r3, [pc, #100]	; (12040 <connected+0xa0c>)
   11fda:	f3bf 8f5b 	dmb	ish
   11fde:	e853 2f00 	ldrex	r2, [r3]
   11fe2:	f042 0180 	orr.w	r1, r2, #128	; 0x80
   11fe6:	e843 1000 	strex	r0, r1, [r3]
   11fea:	2800      	cmp	r0, #0
   11fec:	d1f7      	bne.n	11fde <connected+0x9aa>
   11fee:	f3bf 8f5b 	dmb	ish
			if(atomic_test_and_set_bit(flags, ERR_CONNECTED_FLAG)) {
   11ff2:	f012 0f80 	tst.w	r2, #128	; 0x80
   11ff6:	d133      	bne.n	12060 <connected+0xa2c>
			LOG_INF("External RR connected, addr: %s", addr_str);
   11ff8:	466d      	mov	r5, sp
   11ffa:	2300      	movs	r3, #0
   11ffc:	713b      	strb	r3, [r7, #4]
   11ffe:	2302      	movs	r3, #2
   12000:	717b      	strb	r3, [r7, #5]
   12002:	b088      	sub	sp, #32
   12004:	466b      	mov	r3, sp
   12006:	f113 0210 	adds.w	r2, r3, #16
   1200a:	d04b      	beq.n	120a4 <connected+0xa70>
   1200c:	200e      	movs	r0, #14
   1200e:	b11a      	cbz	r2, 12018 <connected+0x9e4>
   12010:	2804      	cmp	r0, #4
   12012:	dd01      	ble.n	12018 <connected+0x9e4>
   12014:	4911      	ldr	r1, [pc, #68]	; (1205c <connected+0xa28>)
   12016:	6159      	str	r1, [r3, #20]
   12018:	2100      	movs	r1, #0
   1201a:	7039      	strb	r1, [r7, #0]
   1201c:	2102      	movs	r1, #2
   1201e:	7079      	strb	r1, [r7, #1]
   12020:	2a00      	cmp	r2, #0
   12022:	d04c      	beq.n	120be <connected+0xa8a>
   12024:	2808      	cmp	r0, #8
   12026:	dd02      	ble.n	1202e <connected+0x9fa>
   12028:	f107 0108 	add.w	r1, r7, #8
   1202c:	6199      	str	r1, [r3, #24]
   1202e:	f103 011c 	add.w	r1, r3, #28
   12032:	2400      	movs	r4, #0
   12034:	e041      	b.n	120ba <connected+0xa86>
   12036:	bf00      	nop
   12038:	0002d174 	.word	0x0002d174
   1203c:	200079a8 	.word	0x200079a8
   12040:	200079d8 	.word	0x200079d8
   12044:	0002d620 	.word	0x0002d620
   12048:	0002d560 	.word	0x0002d560
   1204c:	200079a0 	.word	0x200079a0
   12050:	0002d640 	.word	0x0002d640
   12054:	20007998 	.word	0x20007998
   12058:	0002d680 	.word	0x0002d680
   1205c:	0002d660 	.word	0x0002d660
				LOG_WRN("WARNING, DUPLICATE CONNECTION:");
   12060:	4b5f      	ldr	r3, [pc, #380]	; (121e0 <connected+0xbac>)
   12062:	63fb      	str	r3, [r7, #60]	; 0x3c
   12064:	2202      	movs	r2, #2
   12066:	713a      	strb	r2, [r7, #4]
   12068:	2300      	movs	r3, #0
   1206a:	717b      	strb	r3, [r7, #5]
   1206c:	71bb      	strb	r3, [r7, #6]
   1206e:	71fb      	strb	r3, [r7, #7]
   12070:	6879      	ldr	r1, [r7, #4]
   12072:	63b9      	str	r1, [r7, #56]	; 0x38
   12074:	4619      	mov	r1, r3
   12076:	f363 0100 	bfi	r1, r3, #0, #1
   1207a:	f363 0141 	bfi	r1, r3, #1, #1
   1207e:	f363 0182 	bfi	r1, r3, #2, #1
   12082:	f363 01c5 	bfi	r1, r3, #3, #3
   12086:	f362 1188 	bfi	r1, r2, #6, #3
   1208a:	2208      	movs	r2, #8
   1208c:	f362 2152 	bfi	r1, r2, #9, #10
   12090:	f363 41de 	bfi	r1, r3, #19, #12
   12094:	f363 71df 	bfi	r1, r3, #31, #1
   12098:	f107 0238 	add.w	r2, r7, #56	; 0x38
   1209c:	4851      	ldr	r0, [pc, #324]	; (121e4 <connected+0xbb0>)
   1209e:	f014 fdda 	bl	26c56 <z_impl_z_log_msg_static_create>
   120a2:	e7a9      	b.n	11ff8 <connected+0x9c4>
			LOG_INF("External RR connected, addr: %s", addr_str);
   120a4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   120a8:	e7b1      	b.n	1200e <connected+0x9da>
   120aa:	f104 06e8 	add.w	r6, r4, #232	; 0xe8
   120ae:	443e      	add	r6, r7
   120b0:	f816 6ce8 	ldrb.w	r6, [r6, #-232]
   120b4:	f801 6b01 	strb.w	r6, [r1], #1
   120b8:	3401      	adds	r4, #1
   120ba:	2c01      	cmp	r4, #1
   120bc:	d9f5      	bls.n	120aa <connected+0xa76>
   120be:	280d      	cmp	r0, #13
   120c0:	dd25      	ble.n	1210e <connected+0xada>
   120c2:	240e      	movs	r4, #14
   120c4:	b142      	cbz	r2, 120d8 <connected+0xaa4>
   120c6:	2103      	movs	r1, #3
   120c8:	7139      	strb	r1, [r7, #4]
   120ca:	2100      	movs	r1, #0
   120cc:	7179      	strb	r1, [r7, #5]
   120ce:	71b9      	strb	r1, [r7, #6]
   120d0:	2101      	movs	r1, #1
   120d2:	71f9      	strb	r1, [r7, #7]
   120d4:	6878      	ldr	r0, [r7, #4]
   120d6:	6118      	str	r0, [r3, #16]
   120d8:	2100      	movs	r1, #0
   120da:	f36f 0100 	bfc	r1, #0, #1
   120de:	f36f 0141 	bfc	r1, #1, #1
   120e2:	f36f 0182 	bfc	r1, #2, #1
   120e6:	f36f 01c5 	bfc	r1, #3, #3
   120ea:	2303      	movs	r3, #3
   120ec:	f363 1188 	bfi	r1, r3, #6, #3
   120f0:	f3c4 0409 	ubfx	r4, r4, #0, #10
   120f4:	f364 2152 	bfi	r1, r4, #9, #10
   120f8:	f36f 41de 	bfc	r1, #19, #12
   120fc:	f36f 71df 	bfc	r1, #31, #1
   12100:	2300      	movs	r3, #0
   12102:	4838      	ldr	r0, [pc, #224]	; (121e4 <connected+0xbb0>)
   12104:	f014 fda7 	bl	26c56 <z_impl_z_log_msg_static_create>
   12108:	46ad      	mov	sp, r5
   1210a:	f7ff bafa 	b.w	11702 <connected+0xce>
   1210e:	f06f 041b 	mvn.w	r4, #27
   12112:	e7d7      	b.n	120c4 <connected+0xa90>
			LOG_WRN("UNRECOGNIZED SENSOR CONNECTED, addr: %s", addr_str);
   12114:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   12118:	e749      	b.n	11fae <connected+0x97a>
   1211a:	f100 06e8 	add.w	r6, r0, #232	; 0xe8
   1211e:	443e      	add	r6, r7
   12120:	f816 6ce8 	ldrb.w	r6, [r6, #-232]
   12124:	f801 6b01 	strb.w	r6, [r1], #1
   12128:	3001      	adds	r0, #1
   1212a:	2801      	cmp	r0, #1
   1212c:	d9f5      	bls.n	1211a <connected+0xae6>
   1212e:	2d0d      	cmp	r5, #13
   12130:	dd25      	ble.n	1217e <connected+0xb4a>
   12132:	250e      	movs	r5, #14
   12134:	b142      	cbz	r2, 12148 <connected+0xb14>
   12136:	2103      	movs	r1, #3
   12138:	7139      	strb	r1, [r7, #4]
   1213a:	2100      	movs	r1, #0
   1213c:	7179      	strb	r1, [r7, #5]
   1213e:	71b9      	strb	r1, [r7, #6]
   12140:	2101      	movs	r1, #1
   12142:	71f9      	strb	r1, [r7, #7]
   12144:	6878      	ldr	r0, [r7, #4]
   12146:	6118      	str	r0, [r3, #16]
   12148:	2100      	movs	r1, #0
   1214a:	f36f 0100 	bfc	r1, #0, #1
   1214e:	f36f 0141 	bfc	r1, #1, #1
   12152:	f36f 0182 	bfc	r1, #2, #1
   12156:	f36f 01c5 	bfc	r1, #3, #3
   1215a:	2302      	movs	r3, #2
   1215c:	f363 1188 	bfi	r1, r3, #6, #3
   12160:	f3c5 0509 	ubfx	r5, r5, #0, #10
   12164:	f365 2152 	bfi	r1, r5, #9, #10
   12168:	f36f 41de 	bfc	r1, #19, #12
   1216c:	f36f 71df 	bfc	r1, #31, #1
   12170:	2300      	movs	r3, #0
   12172:	481c      	ldr	r0, [pc, #112]	; (121e4 <connected+0xbb0>)
   12174:	f014 fd6f 	bl	26c56 <z_impl_z_log_msg_static_create>
   12178:	46a5      	mov	sp, r4
   1217a:	f7ff bac2 	b.w	11702 <connected+0xce>
   1217e:	f06f 051b 	mvn.w	r5, #27
   12182:	e7d7      	b.n	12134 <connected+0xb00>
		LOG_ERR("Failed to start automatically connecting (err %d)", err);
   12184:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12188:	f7ff bacc 	b.w	11724 <connected+0xf0>
   1218c:	f06f 041b 	mvn.w	r4, #27
   12190:	b13a      	cbz	r2, 121a2 <connected+0xb6e>
   12192:	2103      	movs	r1, #3
   12194:	7139      	strb	r1, [r7, #4]
   12196:	2100      	movs	r1, #0
   12198:	7179      	strb	r1, [r7, #5]
   1219a:	71b9      	strb	r1, [r7, #6]
   1219c:	71f9      	strb	r1, [r7, #7]
   1219e:	6878      	ldr	r0, [r7, #4]
   121a0:	6118      	str	r0, [r3, #16]
   121a2:	2100      	movs	r1, #0
   121a4:	f36f 0100 	bfc	r1, #0, #1
   121a8:	f36f 0141 	bfc	r1, #1, #1
   121ac:	f36f 0182 	bfc	r1, #2, #1
   121b0:	f36f 01c5 	bfc	r1, #3, #3
   121b4:	2301      	movs	r3, #1
   121b6:	f363 1188 	bfi	r1, r3, #6, #3
   121ba:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   121be:	f363 2152 	bfi	r1, r3, #9, #10
   121c2:	f36f 41de 	bfc	r1, #19, #12
   121c6:	f36f 71df 	bfc	r1, #31, #1
   121ca:	2300      	movs	r3, #0
   121cc:	4805      	ldr	r0, [pc, #20]	; (121e4 <connected+0xbb0>)
   121ce:	f014 fd42 	bl	26c56 <z_impl_z_log_msg_static_create>
   121d2:	46ad      	mov	sp, r5
}
   121d4:	37ec      	adds	r7, #236	; 0xec
   121d6:	46bd      	mov	sp, r7
   121d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Failed to start automatically connecting (err %d)", err);
   121da:	f06f 041b 	mvn.w	r4, #27
   121de:	e7d7      	b.n	12190 <connected+0xb5c>
   121e0:	0002d560 	.word	0x0002d560
   121e4:	0002d174 	.word	0x0002d174

000121e8 <IFL_temp_notify_cb>:

uint8_t IFL_temp_notify_cb(struct bt_conn *conn, struct bt_gatt_subscribe_params *params, const void *data, uint16_t length)
{
   121e8:	b510      	push	{r4, lr}
   121ea:	b09a      	sub	sp, #104	; 0x68
	
	if (data == NULL){	// When successfully unsubscribed, (or if unpurposefully unsubscribed?), notify callback is called one last time with data set to NULL (from Zephyr docs)
   121ec:	b39a      	cbz	r2, 12256 <IFL_temp_notify_cb+0x6e>
   121ee:	4614      	mov	r4, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   121f0:	f3bf 8f5b 	dmb	ish
   121f4:	4a6d      	ldr	r2, [pc, #436]	; (123ac <IFL_temp_notify_cb+0x1c4>)
   121f6:	6812      	ldr	r2, [r2, #0]
   121f8:	f3bf 8f5b 	dmb	ish
		LOG_INF("IFL_temp_notify_cb: unsubscribed");
		atomic_clear_bit(flags, IFL_SUBSCRIBED_FLAG);
		return BT_GATT_ITER_STOP;
	}

	if (!atomic_test_bit(flags, TEMP_ENABLED_FLAG)) {	// if temp is not enabled, we need to unsubscribe
   121fc:	f412 7f80 	tst.w	r2, #256	; 0x100
   12200:	d05f      	beq.n	122c2 <IFL_temp_notify_cb+0xda>
		LOG_INF("IFL_temp_notify_cb: attempting to unsubscribe");
		return BT_GATT_ITER_STOP;	// returning this tells the BT Host to unsubscribe us
	}

	if (length != 16) {
   12202:	2b10      	cmp	r3, #16
   12204:	f000 8085 	beq.w	12312 <IFL_temp_notify_cb+0x12a>
		LOG_ERR("IFL_temp_notify_cb: Invalid data received from notification");
   12208:	4b69      	ldr	r3, [pc, #420]	; (123b0 <IFL_temp_notify_cb+0x1c8>)
   1220a:	930d      	str	r3, [sp, #52]	; 0x34
   1220c:	2302      	movs	r3, #2
   1220e:	f88d 3004 	strb.w	r3, [sp, #4]
   12212:	2300      	movs	r3, #0
   12214:	f88d 3005 	strb.w	r3, [sp, #5]
   12218:	f88d 3006 	strb.w	r3, [sp, #6]
   1221c:	f88d 3007 	strb.w	r3, [sp, #7]
   12220:	9a01      	ldr	r2, [sp, #4]
   12222:	920c      	str	r2, [sp, #48]	; 0x30
   12224:	4619      	mov	r1, r3
   12226:	f363 0100 	bfi	r1, r3, #0, #1
   1222a:	f363 0141 	bfi	r1, r3, #1, #1
   1222e:	f363 0182 	bfi	r1, r3, #2, #1
   12232:	f363 01c5 	bfi	r1, r3, #3, #3
   12236:	2401      	movs	r4, #1
   12238:	f364 1188 	bfi	r1, r4, #6, #3
   1223c:	2208      	movs	r2, #8
   1223e:	f362 2152 	bfi	r1, r2, #9, #10
   12242:	f363 41de 	bfi	r1, r3, #19, #12
   12246:	f363 71df 	bfi	r1, r3, #31, #1
   1224a:	aa0c      	add	r2, sp, #48	; 0x30
   1224c:	4859      	ldr	r0, [pc, #356]	; (123b4 <IFL_temp_notify_cb+0x1cc>)
   1224e:	f014 fd02 	bl	26c56 <z_impl_z_log_msg_static_create>
		return BT_GATT_ITER_CONTINUE;
   12252:	4620      	mov	r0, r4
   12254:	e033      	b.n	122be <IFL_temp_notify_cb+0xd6>
		LOG_INF("IFL_temp_notify_cb: unsubscribed");
   12256:	4b58      	ldr	r3, [pc, #352]	; (123b8 <IFL_temp_notify_cb+0x1d0>)
   12258:	9319      	str	r3, [sp, #100]	; 0x64
   1225a:	2302      	movs	r3, #2
   1225c:	f88d 3004 	strb.w	r3, [sp, #4]
   12260:	2400      	movs	r4, #0
   12262:	f88d 4005 	strb.w	r4, [sp, #5]
   12266:	f88d 4006 	strb.w	r4, [sp, #6]
   1226a:	f88d 4007 	strb.w	r4, [sp, #7]
   1226e:	9b01      	ldr	r3, [sp, #4]
   12270:	9318      	str	r3, [sp, #96]	; 0x60
   12272:	4621      	mov	r1, r4
   12274:	f364 0100 	bfi	r1, r4, #0, #1
   12278:	f364 0141 	bfi	r1, r4, #1, #1
   1227c:	f364 0182 	bfi	r1, r4, #2, #1
   12280:	f364 01c5 	bfi	r1, r4, #3, #3
   12284:	2303      	movs	r3, #3
   12286:	f363 1188 	bfi	r1, r3, #6, #3
   1228a:	2308      	movs	r3, #8
   1228c:	f363 2152 	bfi	r1, r3, #9, #10
   12290:	f364 41de 	bfi	r1, r4, #19, #12
   12294:	f364 71df 	bfi	r1, r4, #31, #1
   12298:	4623      	mov	r3, r4
   1229a:	aa18      	add	r2, sp, #96	; 0x60
   1229c:	4845      	ldr	r0, [pc, #276]	; (123b4 <IFL_temp_notify_cb+0x1cc>)
   1229e:	f014 fcda 	bl	26c56 <z_impl_z_log_msg_static_create>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   122a2:	4b42      	ldr	r3, [pc, #264]	; (123ac <IFL_temp_notify_cb+0x1c4>)
   122a4:	f3bf 8f5b 	dmb	ish
   122a8:	e853 1f00 	ldrex	r1, [r3]
   122ac:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
   122b0:	e843 1200 	strex	r2, r1, [r3]
   122b4:	2a00      	cmp	r2, #0
   122b6:	d1f7      	bne.n	122a8 <IFL_temp_notify_cb+0xc0>
   122b8:	f3bf 8f5b 	dmb	ish
		return BT_GATT_ITER_STOP;
   122bc:	4620      	mov	r0, r4
	// let the system workqueue actually send the frames (can_send is blocking)
	k_work_submit(&IFL_CAN_tx_work);

	return BT_GATT_ITER_CONTINUE;

}
   122be:	b01a      	add	sp, #104	; 0x68
   122c0:	bd10      	pop	{r4, pc}
		LOG_INF("IFL_temp_notify_cb: attempting to unsubscribe");
   122c2:	4b3e      	ldr	r3, [pc, #248]	; (123bc <IFL_temp_notify_cb+0x1d4>)
   122c4:	9313      	str	r3, [sp, #76]	; 0x4c
   122c6:	2302      	movs	r3, #2
   122c8:	f88d 3004 	strb.w	r3, [sp, #4]
   122cc:	2400      	movs	r4, #0
   122ce:	f88d 4005 	strb.w	r4, [sp, #5]
   122d2:	f88d 4006 	strb.w	r4, [sp, #6]
   122d6:	f88d 4007 	strb.w	r4, [sp, #7]
   122da:	9b01      	ldr	r3, [sp, #4]
   122dc:	9312      	str	r3, [sp, #72]	; 0x48
   122de:	4621      	mov	r1, r4
   122e0:	f364 0100 	bfi	r1, r4, #0, #1
   122e4:	f364 0141 	bfi	r1, r4, #1, #1
   122e8:	f364 0182 	bfi	r1, r4, #2, #1
   122ec:	f364 01c5 	bfi	r1, r4, #3, #3
   122f0:	2303      	movs	r3, #3
   122f2:	f363 1188 	bfi	r1, r3, #6, #3
   122f6:	2308      	movs	r3, #8
   122f8:	f363 2152 	bfi	r1, r3, #9, #10
   122fc:	f364 41de 	bfi	r1, r4, #19, #12
   12300:	f364 71df 	bfi	r1, r4, #31, #1
   12304:	4623      	mov	r3, r4
   12306:	aa12      	add	r2, sp, #72	; 0x48
   12308:	482a      	ldr	r0, [pc, #168]	; (123b4 <IFL_temp_notify_cb+0x1cc>)
   1230a:	f014 fca4 	bl	26c56 <z_impl_z_log_msg_static_create>
		return BT_GATT_ITER_STOP;	// returning this tells the BT Host to unsubscribe us
   1230e:	4620      	mov	r0, r4
   12310:	e7d5      	b.n	122be <IFL_temp_notify_cb+0xd6>
	LOG_INF("IFL_temp_notify_cb: Notification received");
   12312:	4b2b      	ldr	r3, [pc, #172]	; (123c0 <IFL_temp_notify_cb+0x1d8>)
   12314:	9307      	str	r3, [sp, #28]
   12316:	2302      	movs	r3, #2
   12318:	f88d 3004 	strb.w	r3, [sp, #4]
   1231c:	2300      	movs	r3, #0
   1231e:	f88d 3005 	strb.w	r3, [sp, #5]
   12322:	f88d 3006 	strb.w	r3, [sp, #6]
   12326:	f88d 3007 	strb.w	r3, [sp, #7]
   1232a:	9a01      	ldr	r2, [sp, #4]
   1232c:	9206      	str	r2, [sp, #24]
   1232e:	4619      	mov	r1, r3
   12330:	f363 0100 	bfi	r1, r3, #0, #1
   12334:	f363 0141 	bfi	r1, r3, #1, #1
   12338:	f363 0182 	bfi	r1, r3, #2, #1
   1233c:	f363 01c5 	bfi	r1, r3, #3, #3
   12340:	2203      	movs	r2, #3
   12342:	f362 1188 	bfi	r1, r2, #6, #3
   12346:	2208      	movs	r2, #8
   12348:	f362 2152 	bfi	r1, r2, #9, #10
   1234c:	f363 41de 	bfi	r1, r3, #19, #12
   12350:	f363 71df 	bfi	r1, r3, #31, #1
   12354:	aa06      	add	r2, sp, #24
   12356:	4817      	ldr	r0, [pc, #92]	; (123b4 <IFL_temp_notify_cb+0x1cc>)
   12358:	f014 fc7d 	bl	26c56 <z_impl_z_log_msg_static_create>
	IFL_temp_1.data[0] = ((uint8_t *)data)[0];
   1235c:	7822      	ldrb	r2, [r4, #0]
   1235e:	4b19      	ldr	r3, [pc, #100]	; (123c4 <IFL_temp_notify_cb+0x1dc>)
   12360:	721a      	strb	r2, [r3, #8]
	IFL_temp_1.data[1] = ((uint8_t *)data)[1];
   12362:	7862      	ldrb	r2, [r4, #1]
   12364:	725a      	strb	r2, [r3, #9]
	IFL_temp_1.data[2] = ((uint8_t *)data)[2];
   12366:	78a2      	ldrb	r2, [r4, #2]
   12368:	729a      	strb	r2, [r3, #10]
	IFL_temp_1.data[3] = ((uint8_t *)data)[3];
   1236a:	78e2      	ldrb	r2, [r4, #3]
   1236c:	72da      	strb	r2, [r3, #11]
	IFL_temp_1.data[4] = ((uint8_t *)data)[4];
   1236e:	7922      	ldrb	r2, [r4, #4]
   12370:	731a      	strb	r2, [r3, #12]
	IFL_temp_1.data[5] = ((uint8_t *)data)[5];
   12372:	7962      	ldrb	r2, [r4, #5]
   12374:	735a      	strb	r2, [r3, #13]
	IFL_temp_1.data[6] = ((uint8_t *)data)[6];
   12376:	79a2      	ldrb	r2, [r4, #6]
   12378:	739a      	strb	r2, [r3, #14]
	IFL_temp_1.data[7] = ((uint8_t *)data)[7];
   1237a:	79e2      	ldrb	r2, [r4, #7]
   1237c:	73da      	strb	r2, [r3, #15]
	IFL_temp_2.data[0] = ((uint8_t *)data)[8];
   1237e:	7a22      	ldrb	r2, [r4, #8]
   12380:	4b11      	ldr	r3, [pc, #68]	; (123c8 <IFL_temp_notify_cb+0x1e0>)
   12382:	721a      	strb	r2, [r3, #8]
	IFL_temp_2.data[1] = ((uint8_t *)data)[9];
   12384:	7a62      	ldrb	r2, [r4, #9]
   12386:	725a      	strb	r2, [r3, #9]
	IFL_temp_2.data[2] = ((uint8_t *)data)[10];
   12388:	7aa2      	ldrb	r2, [r4, #10]
   1238a:	729a      	strb	r2, [r3, #10]
	IFL_temp_2.data[3] = ((uint8_t *)data)[11];
   1238c:	7ae2      	ldrb	r2, [r4, #11]
   1238e:	72da      	strb	r2, [r3, #11]
	IFL_temp_2.data[4] = ((uint8_t *)data)[12];
   12390:	7b22      	ldrb	r2, [r4, #12]
   12392:	731a      	strb	r2, [r3, #12]
	IFL_temp_2.data[5] = ((uint8_t *)data)[13];
   12394:	7b62      	ldrb	r2, [r4, #13]
   12396:	735a      	strb	r2, [r3, #13]
	IFL_temp_2.data[6] = ((uint8_t *)data)[14];
   12398:	7ba2      	ldrb	r2, [r4, #14]
   1239a:	739a      	strb	r2, [r3, #14]
	IFL_temp_2.data[7] = ((uint8_t *)data)[15];
   1239c:	7be2      	ldrb	r2, [r4, #15]
   1239e:	73da      	strb	r2, [r3, #15]
	k_work_submit(&IFL_CAN_tx_work);
   123a0:	480a      	ldr	r0, [pc, #40]	; (123cc <IFL_temp_notify_cb+0x1e4>)
   123a2:	f011 ffbb 	bl	2431c <k_work_submit>
	return BT_GATT_ITER_CONTINUE;
   123a6:	2001      	movs	r0, #1
   123a8:	e789      	b.n	122be <IFL_temp_notify_cb+0xd6>
   123aa:	bf00      	nop
   123ac:	200079d8 	.word	0x200079d8
   123b0:	0002d730 	.word	0x0002d730
   123b4:	0002d174 	.word	0x0002d174
   123b8:	0002d6dc 	.word	0x0002d6dc
   123bc:	0002d700 	.word	0x0002d700
   123c0:	0002d76c 	.word	0x0002d76c
   123c4:	200006ac 	.word	0x200006ac
   123c8:	2000069c 	.word	0x2000069c
   123cc:	20000664 	.word	0x20000664

000123d0 <main>:
/* --- BLE STUFF END --- */



void main(void)
{
   123d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123d4:	b09d      	sub	sp, #116	; 0x74
   123d6:	af00      	add	r7, sp, #0
	LOG_INF("Running ttpms_v2_receiver");
   123d8:	4bb8      	ldr	r3, [pc, #736]	; (126bc <main+0x2ec>)
   123da:	627b      	str	r3, [r7, #36]	; 0x24
   123dc:	2302      	movs	r3, #2
   123de:	713b      	strb	r3, [r7, #4]
   123e0:	2300      	movs	r3, #0
   123e2:	717b      	strb	r3, [r7, #5]
   123e4:	71bb      	strb	r3, [r7, #6]
   123e6:	71fb      	strb	r3, [r7, #7]
   123e8:	687a      	ldr	r2, [r7, #4]
   123ea:	623a      	str	r2, [r7, #32]
   123ec:	4619      	mov	r1, r3
   123ee:	f363 0100 	bfi	r1, r3, #0, #1
   123f2:	f363 0141 	bfi	r1, r3, #1, #1
   123f6:	f363 0182 	bfi	r1, r3, #2, #1
   123fa:	f363 01c5 	bfi	r1, r3, #3, #3
   123fe:	2203      	movs	r2, #3
   12400:	f362 1188 	bfi	r1, r2, #6, #3
   12404:	2208      	movs	r2, #8
   12406:	f362 2152 	bfi	r1, r2, #9, #10
   1240a:	f363 41de 	bfi	r1, r3, #19, #12
   1240e:	f363 71df 	bfi	r1, r3, #31, #1
   12412:	f107 0220 	add.w	r2, r7, #32
   12416:	48aa      	ldr	r0, [pc, #680]	; (126c0 <main+0x2f0>)
   12418:	f014 fc1d 	bl	26c56 <z_impl_z_log_msg_static_create>

	int err;
	
	if (!device_is_ready(can_dev)) {
   1241c:	4ba9      	ldr	r3, [pc, #676]	; (126c4 <main+0x2f4>)
   1241e:	6818      	ldr	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   12420:	f019 fc7b 	bl	2bd1a <z_device_is_ready>
   12424:	2800      	cmp	r0, #0
   12426:	d036      	beq.n	12496 <main+0xc6>
		LOG_WRN("CAN device not ready");
		return;
	}

	err = can_start(can_dev);
   12428:	4ba6      	ldr	r3, [pc, #664]	; (126c4 <main+0x2f4>)
   1242a:	6818      	ldr	r0, [r3, #0]
 */
__syscall int can_start(const struct device *dev);

static inline int z_impl_can_start(const struct device *dev)
{
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
   1242c:	6883      	ldr	r3, [r0, #8]

	return api->start(dev);
   1242e:	685b      	ldr	r3, [r3, #4]
   12430:	4798      	blx	r3
	if (err != 0) {
   12432:	4605      	mov	r5, r0
   12434:	2800      	cmp	r0, #0
   12436:	d150      	bne.n	124da <main+0x10a>
		LOG_WRN("Error starting CAN controller (err %d)", err);
		return;
	}

	err = can_add_rx_filter(can_dev, settings_frame_cb, NULL, &settings_frame_filter);
   12438:	4ba2      	ldr	r3, [pc, #648]	; (126c4 <main+0x2f4>)
   1243a:	6818      	ldr	r0, [r3, #0]
 * @retval -ENOTSUP if the requested filter type is not supported.
 */
static inline int can_add_rx_filter(const struct device *dev, can_rx_callback_t callback,
				    void *user_data, const struct can_filter *filter)
{
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
   1243c:	6883      	ldr	r3, [r0, #8]

	if (filter == NULL || (filter->flags & (CAN_FILTER_DATA | CAN_FILTER_RTR)) == 0) {
		return -EINVAL;
	}

	return api->add_rx_filter(dev, callback, user_data, filter);
   1243e:	699c      	ldr	r4, [r3, #24]
   12440:	4ba1      	ldr	r3, [pc, #644]	; (126c8 <main+0x2f8>)
   12442:	2200      	movs	r2, #0
   12444:	49a1      	ldr	r1, [pc, #644]	; (126cc <main+0x2fc>)
   12446:	47a0      	blx	r4
	if (err < 0) {
   12448:	2800      	cmp	r0, #0
   1244a:	f2c0 8088 	blt.w	1255e <main+0x18e>


	bt_addr_le_t addr;

	// create self BT address
	err = bt_addr_le_from_str(TTPMS_RX_BT_ID, "random", &addr);
   1244e:	f107 0208 	add.w	r2, r7, #8
   12452:	499f      	ldr	r1, [pc, #636]	; (126d0 <main+0x300>)
   12454:	489f      	ldr	r0, [pc, #636]	; (126d4 <main+0x304>)
   12456:	f004 fd4f 	bl	16ef8 <bt_addr_le_from_str>
	if (err) {
   1245a:	4604      	mov	r4, r0
   1245c:	2800      	cmp	r0, #0
   1245e:	f000 80e8 	beq.w	12632 <main+0x262>
		LOG_WRN("Invalid BT address (err %d)", err);
   12462:	46e9      	mov	r9, sp
   12464:	b088      	sub	sp, #32
   12466:	466b      	mov	r3, sp
   12468:	f113 0210 	adds.w	r2, r3, #16
   1246c:	f000 80ba 	beq.w	125e4 <main+0x214>
   12470:	210c      	movs	r1, #12
   12472:	b152      	cbz	r2, 1248a <main+0xba>
   12474:	4608      	mov	r0, r1
   12476:	2904      	cmp	r1, #4
   12478:	dd03      	ble.n	12482 <main+0xb2>
   1247a:	f8df c25c 	ldr.w	ip, [pc, #604]	; 126d8 <main+0x308>
   1247e:	f8c3 c014 	str.w	ip, [r3, #20]
   12482:	2808      	cmp	r0, #8
   12484:	f340 80b1 	ble.w	125ea <main+0x21a>
   12488:	619c      	str	r4, [r3, #24]
   1248a:	290b      	cmp	r1, #11
   1248c:	f340 80f9 	ble.w	12682 <main+0x2b2>
   12490:	f04f 0c0c 	mov.w	ip, #12
   12494:	e0ab      	b.n	125ee <main+0x21e>
		LOG_WRN("CAN device not ready");
   12496:	4b91      	ldr	r3, [pc, #580]	; (126dc <main+0x30c>)
   12498:	66fb      	str	r3, [r7, #108]	; 0x6c
   1249a:	2202      	movs	r2, #2
   1249c:	713a      	strb	r2, [r7, #4]
   1249e:	2300      	movs	r3, #0
   124a0:	717b      	strb	r3, [r7, #5]
   124a2:	71bb      	strb	r3, [r7, #6]
   124a4:	71fb      	strb	r3, [r7, #7]
   124a6:	6879      	ldr	r1, [r7, #4]
   124a8:	66b9      	str	r1, [r7, #104]	; 0x68
   124aa:	4619      	mov	r1, r3
   124ac:	f363 0100 	bfi	r1, r3, #0, #1
   124b0:	f363 0141 	bfi	r1, r3, #1, #1
   124b4:	f363 0182 	bfi	r1, r3, #2, #1
   124b8:	f363 01c5 	bfi	r1, r3, #3, #3
   124bc:	f362 1188 	bfi	r1, r2, #6, #3
   124c0:	2208      	movs	r2, #8
   124c2:	f362 2152 	bfi	r1, r2, #9, #10
   124c6:	f363 41de 	bfi	r1, r3, #19, #12
   124ca:	f363 71df 	bfi	r1, r3, #31, #1
   124ce:	f107 0268 	add.w	r2, r7, #104	; 0x68
   124d2:	487b      	ldr	r0, [pc, #492]	; (126c0 <main+0x2f0>)
   124d4:	f014 fbbf 	bl	26c56 <z_impl_z_log_msg_static_create>
		return;
   124d8:	e03a      	b.n	12550 <main+0x180>
		LOG_WRN("Error starting CAN controller (err %d)", err);
   124da:	466e      	mov	r6, sp
   124dc:	b088      	sub	sp, #32
   124de:	466b      	mov	r3, sp
   124e0:	f113 0210 	adds.w	r2, r3, #16
   124e4:	d00d      	beq.n	12502 <main+0x132>
   124e6:	210c      	movs	r1, #12
   124e8:	b13a      	cbz	r2, 124fa <main+0x12a>
   124ea:	4608      	mov	r0, r1
   124ec:	2904      	cmp	r1, #4
   124ee:	dd01      	ble.n	124f4 <main+0x124>
   124f0:	4c7b      	ldr	r4, [pc, #492]	; (126e0 <main+0x310>)
   124f2:	615c      	str	r4, [r3, #20]
   124f4:	2808      	cmp	r0, #8
   124f6:	dd07      	ble.n	12508 <main+0x138>
   124f8:	619d      	str	r5, [r3, #24]
   124fa:	290b      	cmp	r1, #11
   124fc:	dd2c      	ble.n	12558 <main+0x188>
   124fe:	240c      	movs	r4, #12
   12500:	e004      	b.n	1250c <main+0x13c>
   12502:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12506:	e7ef      	b.n	124e8 <main+0x118>
   12508:	f06f 041b 	mvn.w	r4, #27
   1250c:	b13a      	cbz	r2, 1251e <main+0x14e>
   1250e:	2103      	movs	r1, #3
   12510:	7139      	strb	r1, [r7, #4]
   12512:	2100      	movs	r1, #0
   12514:	7179      	strb	r1, [r7, #5]
   12516:	71b9      	strb	r1, [r7, #6]
   12518:	71f9      	strb	r1, [r7, #7]
   1251a:	6878      	ldr	r0, [r7, #4]
   1251c:	6118      	str	r0, [r3, #16]
   1251e:	2100      	movs	r1, #0
   12520:	f36f 0100 	bfc	r1, #0, #1
   12524:	f36f 0141 	bfc	r1, #1, #1
   12528:	f36f 0182 	bfc	r1, #2, #1
   1252c:	f36f 01c5 	bfc	r1, #3, #3
   12530:	2302      	movs	r3, #2
   12532:	f363 1188 	bfi	r1, r3, #6, #3
   12536:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1253a:	f363 2152 	bfi	r1, r3, #9, #10
   1253e:	f36f 41de 	bfc	r1, #19, #12
   12542:	f36f 71df 	bfc	r1, #31, #1
   12546:	2300      	movs	r3, #0
   12548:	485d      	ldr	r0, [pc, #372]	; (126c0 <main+0x2f0>)
   1254a:	f014 fb84 	bl	26c56 <z_impl_z_log_msg_static_create>
   1254e:	46b5      	mov	sp, r6
			k_work_submit(&status_CAN_tx_work);
		}
		
	}
	
}
   12550:	3774      	adds	r7, #116	; 0x74
   12552:	46bd      	mov	sp, r7
   12554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_WRN("Error starting CAN controller (err %d)", err);
   12558:	f06f 041b 	mvn.w	r4, #27
   1255c:	e7d6      	b.n	1250c <main+0x13c>
		LOG_ERR("Unable to add CAN RX filter (err %d)", err);
   1255e:	466c      	mov	r4, sp
   12560:	b088      	sub	sp, #32
   12562:	466b      	mov	r3, sp
   12564:	f113 0210 	adds.w	r2, r3, #16
   12568:	d011      	beq.n	1258e <main+0x1be>
   1256a:	210c      	movs	r1, #12
   1256c:	b152      	cbz	r2, 12584 <main+0x1b4>
   1256e:	468c      	mov	ip, r1
   12570:	2904      	cmp	r1, #4
   12572:	dd03      	ble.n	1257c <main+0x1ac>
   12574:	f8df e16c 	ldr.w	lr, [pc, #364]	; 126e4 <main+0x314>
   12578:	f8c3 e014 	str.w	lr, [r3, #20]
   1257c:	f1bc 0f08 	cmp.w	ip, #8
   12580:	dd08      	ble.n	12594 <main+0x1c4>
   12582:	6198      	str	r0, [r3, #24]
   12584:	290b      	cmp	r1, #11
   12586:	dd2a      	ble.n	125de <main+0x20e>
   12588:	f04f 0c0c 	mov.w	ip, #12
   1258c:	e004      	b.n	12598 <main+0x1c8>
   1258e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12592:	e7eb      	b.n	1256c <main+0x19c>
   12594:	f06f 0c1b 	mvn.w	ip, #27
   12598:	b13a      	cbz	r2, 125aa <main+0x1da>
   1259a:	2103      	movs	r1, #3
   1259c:	7139      	strb	r1, [r7, #4]
   1259e:	2100      	movs	r1, #0
   125a0:	7179      	strb	r1, [r7, #5]
   125a2:	71b9      	strb	r1, [r7, #6]
   125a4:	71f9      	strb	r1, [r7, #7]
   125a6:	6878      	ldr	r0, [r7, #4]
   125a8:	6118      	str	r0, [r3, #16]
   125aa:	2100      	movs	r1, #0
   125ac:	f36f 0100 	bfc	r1, #0, #1
   125b0:	f36f 0141 	bfc	r1, #1, #1
   125b4:	f36f 0182 	bfc	r1, #2, #1
   125b8:	f36f 01c5 	bfc	r1, #3, #3
   125bc:	2301      	movs	r3, #1
   125be:	f363 1188 	bfi	r1, r3, #6, #3
   125c2:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   125c6:	f363 2152 	bfi	r1, r3, #9, #10
   125ca:	f36f 41de 	bfc	r1, #19, #12
   125ce:	f36f 71df 	bfc	r1, #31, #1
   125d2:	2300      	movs	r3, #0
   125d4:	483a      	ldr	r0, [pc, #232]	; (126c0 <main+0x2f0>)
   125d6:	f014 fb3e 	bl	26c56 <z_impl_z_log_msg_static_create>
   125da:	46a5      	mov	sp, r4
   125dc:	e737      	b.n	1244e <main+0x7e>
   125de:	f06f 0c1b 	mvn.w	ip, #27
   125e2:	e7d9      	b.n	12598 <main+0x1c8>
		LOG_WRN("Invalid BT address (err %d)", err);
   125e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   125e8:	e743      	b.n	12472 <main+0xa2>
   125ea:	f06f 0c1b 	mvn.w	ip, #27
   125ee:	b13a      	cbz	r2, 12600 <main+0x230>
   125f0:	2103      	movs	r1, #3
   125f2:	7139      	strb	r1, [r7, #4]
   125f4:	2100      	movs	r1, #0
   125f6:	7179      	strb	r1, [r7, #5]
   125f8:	71b9      	strb	r1, [r7, #6]
   125fa:	71f9      	strb	r1, [r7, #7]
   125fc:	6878      	ldr	r0, [r7, #4]
   125fe:	6118      	str	r0, [r3, #16]
   12600:	2100      	movs	r1, #0
   12602:	f36f 0100 	bfc	r1, #0, #1
   12606:	f36f 0141 	bfc	r1, #1, #1
   1260a:	f36f 0182 	bfc	r1, #2, #1
   1260e:	f36f 01c5 	bfc	r1, #3, #3
   12612:	2302      	movs	r3, #2
   12614:	f363 1188 	bfi	r1, r3, #6, #3
   12618:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   1261c:	f363 2152 	bfi	r1, r3, #9, #10
   12620:	f36f 41de 	bfc	r1, #19, #12
   12624:	f36f 71df 	bfc	r1, #31, #1
   12628:	2300      	movs	r3, #0
   1262a:	4825      	ldr	r0, [pc, #148]	; (126c0 <main+0x2f0>)
   1262c:	f014 fb13 	bl	26c56 <z_impl_z_log_msg_static_create>
   12630:	46cd      	mov	sp, r9
	bt_identity = bt_id_create(&addr, NULL);
   12632:	2100      	movs	r1, #0
   12634:	f107 0008 	add.w	r0, r7, #8
   12638:	f007 f9fa 	bl	19a30 <bt_id_create>
	if (bt_identity < 0) {
   1263c:	f1b0 0900 	subs.w	r9, r0, #0
   12640:	db22      	blt.n	12688 <main+0x2b8>
	err = bt_enable(NULL);
   12642:	2000      	movs	r0, #0
   12644:	f007 f814 	bl	19670 <bt_enable>
	if (err) {
   12648:	4684      	mov	ip, r0
   1264a:	2800      	cmp	r0, #0
   1264c:	f000 80c2 	beq.w	127d4 <main+0x404>
		LOG_WRN("Bluetooth init failed (err %d)", err);
   12650:	466c      	mov	r4, sp
   12652:	b088      	sub	sp, #32
   12654:	466b      	mov	r3, sp
   12656:	f113 0210 	adds.w	r2, r3, #16
   1265a:	d071      	beq.n	12740 <main+0x370>
   1265c:	210c      	movs	r1, #12
   1265e:	b152      	cbz	r2, 12676 <main+0x2a6>
   12660:	4608      	mov	r0, r1
   12662:	2904      	cmp	r1, #4
   12664:	dd03      	ble.n	1266e <main+0x29e>
   12666:	f8df e080 	ldr.w	lr, [pc, #128]	; 126e8 <main+0x318>
   1266a:	f8c3 e014 	str.w	lr, [r3, #20]
   1266e:	2808      	cmp	r0, #8
   12670:	dd69      	ble.n	12746 <main+0x376>
   12672:	f8c3 c018 	str.w	ip, [r3, #24]
   12676:	290b      	cmp	r1, #11
   12678:	f340 80a9 	ble.w	127ce <main+0x3fe>
   1267c:	f04f 0c0c 	mov.w	ip, #12
   12680:	e063      	b.n	1274a <main+0x37a>
		LOG_WRN("Invalid BT address (err %d)", err);
   12682:	f06f 0c1b 	mvn.w	ip, #27
   12686:	e7b2      	b.n	125ee <main+0x21e>
		LOG_WRN("Creating new BT ID failed (err %d)", err);
   12688:	46ea      	mov	sl, sp
   1268a:	b088      	sub	sp, #32
   1268c:	466b      	mov	r3, sp
   1268e:	f113 0210 	adds.w	r2, r3, #16
   12692:	d00f      	beq.n	126b4 <main+0x2e4>
   12694:	210c      	movs	r1, #12
   12696:	b14a      	cbz	r2, 126ac <main+0x2dc>
   12698:	4608      	mov	r0, r1
   1269a:	2904      	cmp	r1, #4
   1269c:	dd03      	ble.n	126a6 <main+0x2d6>
   1269e:	f8df c04c 	ldr.w	ip, [pc, #76]	; 126ec <main+0x31c>
   126a2:	f8c3 c014 	str.w	ip, [r3, #20]
   126a6:	2808      	cmp	r0, #8
   126a8:	dd22      	ble.n	126f0 <main+0x320>
   126aa:	619c      	str	r4, [r3, #24]
   126ac:	290b      	cmp	r1, #11
   126ae:	dd44      	ble.n	1273a <main+0x36a>
   126b0:	240c      	movs	r4, #12
   126b2:	e01f      	b.n	126f4 <main+0x324>
   126b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   126b8:	e7ed      	b.n	12696 <main+0x2c6>
   126ba:	bf00      	nop
   126bc:	0002d798 	.word	0x0002d798
   126c0:	0002d174 	.word	0x0002d174
   126c4:	200006cc 	.word	0x200006cc
   126c8:	0002d9dc 	.word	0x0002d9dc
   126cc:	0001094d 	.word	0x0001094d
   126d0:	0002d320 	.word	0x0002d320
   126d4:	0002d81c 	.word	0x0002d81c
   126d8:	0002d830 	.word	0x0002d830
   126dc:	0002d7b4 	.word	0x0002d7b4
   126e0:	0002d7cc 	.word	0x0002d7cc
   126e4:	0002d7f4 	.word	0x0002d7f4
   126e8:	0002d870 	.word	0x0002d870
   126ec:	0002d84c 	.word	0x0002d84c
   126f0:	f06f 041b 	mvn.w	r4, #27
   126f4:	b13a      	cbz	r2, 12706 <main+0x336>
   126f6:	2103      	movs	r1, #3
   126f8:	7139      	strb	r1, [r7, #4]
   126fa:	2100      	movs	r1, #0
   126fc:	7179      	strb	r1, [r7, #5]
   126fe:	71b9      	strb	r1, [r7, #6]
   12700:	71f9      	strb	r1, [r7, #7]
   12702:	6878      	ldr	r0, [r7, #4]
   12704:	6118      	str	r0, [r3, #16]
   12706:	2100      	movs	r1, #0
   12708:	f36f 0100 	bfc	r1, #0, #1
   1270c:	f36f 0141 	bfc	r1, #1, #1
   12710:	f36f 0182 	bfc	r1, #2, #1
   12714:	f36f 01c5 	bfc	r1, #3, #3
   12718:	2302      	movs	r3, #2
   1271a:	f363 1188 	bfi	r1, r3, #6, #3
   1271e:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   12722:	f363 2152 	bfi	r1, r3, #9, #10
   12726:	f36f 41de 	bfc	r1, #19, #12
   1272a:	f36f 71df 	bfc	r1, #31, #1
   1272e:	2300      	movs	r3, #0
   12730:	48aa      	ldr	r0, [pc, #680]	; (129dc <main+0x60c>)
   12732:	f014 fa90 	bl	26c56 <z_impl_z_log_msg_static_create>
   12736:	46d5      	mov	sp, sl
   12738:	e783      	b.n	12642 <main+0x272>
   1273a:	f06f 041b 	mvn.w	r4, #27
   1273e:	e7d9      	b.n	126f4 <main+0x324>
		LOG_WRN("Bluetooth init failed (err %d)", err);
   12740:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12744:	e78b      	b.n	1265e <main+0x28e>
   12746:	f06f 0c1b 	mvn.w	ip, #27
   1274a:	b13a      	cbz	r2, 1275c <main+0x38c>
   1274c:	2103      	movs	r1, #3
   1274e:	7139      	strb	r1, [r7, #4]
   12750:	2100      	movs	r1, #0
   12752:	7179      	strb	r1, [r7, #5]
   12754:	71b9      	strb	r1, [r7, #6]
   12756:	71f9      	strb	r1, [r7, #7]
   12758:	6878      	ldr	r0, [r7, #4]
   1275a:	6118      	str	r0, [r3, #16]
   1275c:	2100      	movs	r1, #0
   1275e:	f36f 0100 	bfc	r1, #0, #1
   12762:	f36f 0141 	bfc	r1, #1, #1
   12766:	f36f 0182 	bfc	r1, #2, #1
   1276a:	f36f 01c5 	bfc	r1, #3, #3
   1276e:	2302      	movs	r3, #2
   12770:	f363 1188 	bfi	r1, r3, #6, #3
   12774:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   12778:	f36c 2152 	bfi	r1, ip, #9, #10
   1277c:	f36f 41de 	bfc	r1, #19, #12
   12780:	f36f 71df 	bfc	r1, #31, #1
   12784:	2300      	movs	r3, #0
   12786:	4895      	ldr	r0, [pc, #596]	; (129dc <main+0x60c>)
   12788:	f014 fa65 	bl	26c56 <z_impl_z_log_msg_static_create>
   1278c:	46a5      	mov	sp, r4
	err = bt_addr_le_from_str(TTPMS_IFL_BT_ID, "random", &IFL_bt_addr);
   1278e:	4a94      	ldr	r2, [pc, #592]	; (129e0 <main+0x610>)
   12790:	4994      	ldr	r1, [pc, #592]	; (129e4 <main+0x614>)
   12792:	4895      	ldr	r0, [pc, #596]	; (129e8 <main+0x618>)
   12794:	f004 fbb0 	bl	16ef8 <bt_addr_le_from_str>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   12798:	4684      	mov	ip, r0
   1279a:	2800      	cmp	r0, #0
   1279c:	d064      	beq.n	12868 <main+0x498>
   1279e:	466c      	mov	r4, sp
   127a0:	b088      	sub	sp, #32
   127a2:	466b      	mov	r3, sp
   127a4:	f113 0210 	adds.w	r2, r3, #16
   127a8:	d037      	beq.n	1281a <main+0x44a>
   127aa:	210c      	movs	r1, #12
   127ac:	b152      	cbz	r2, 127c4 <main+0x3f4>
   127ae:	4608      	mov	r0, r1
   127b0:	2904      	cmp	r1, #4
   127b2:	dd03      	ble.n	127bc <main+0x3ec>
   127b4:	f8df e234 	ldr.w	lr, [pc, #564]	; 129ec <main+0x61c>
   127b8:	f8c3 e014 	str.w	lr, [r3, #20]
   127bc:	2808      	cmp	r0, #8
   127be:	dd2f      	ble.n	12820 <main+0x450>
   127c0:	f8c3 c018 	str.w	ip, [r3, #24]
   127c4:	290b      	cmp	r1, #11
   127c6:	dd6f      	ble.n	128a8 <main+0x4d8>
   127c8:	f04f 0c0c 	mov.w	ip, #12
   127cc:	e02a      	b.n	12824 <main+0x454>
		LOG_WRN("Bluetooth init failed (err %d)", err);
   127ce:	f06f 0c1b 	mvn.w	ip, #27
   127d2:	e7ba      	b.n	1274a <main+0x37a>
		LOG_INF("Bluetooth initialized");
   127d4:	4b86      	ldr	r3, [pc, #536]	; (129f0 <main+0x620>)
   127d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   127d8:	2302      	movs	r3, #2
   127da:	713b      	strb	r3, [r7, #4]
   127dc:	2300      	movs	r3, #0
   127de:	717b      	strb	r3, [r7, #5]
   127e0:	71bb      	strb	r3, [r7, #6]
   127e2:	71fb      	strb	r3, [r7, #7]
   127e4:	687a      	ldr	r2, [r7, #4]
   127e6:	63ba      	str	r2, [r7, #56]	; 0x38
   127e8:	4619      	mov	r1, r3
   127ea:	f363 0100 	bfi	r1, r3, #0, #1
   127ee:	f363 0141 	bfi	r1, r3, #1, #1
   127f2:	f363 0182 	bfi	r1, r3, #2, #1
   127f6:	f363 01c5 	bfi	r1, r3, #3, #3
   127fa:	2203      	movs	r2, #3
   127fc:	f362 1188 	bfi	r1, r2, #6, #3
   12800:	2208      	movs	r2, #8
   12802:	f362 2152 	bfi	r1, r2, #9, #10
   12806:	f363 41de 	bfi	r1, r3, #19, #12
   1280a:	f363 71df 	bfi	r1, r3, #31, #1
   1280e:	f107 0238 	add.w	r2, r7, #56	; 0x38
   12812:	4872      	ldr	r0, [pc, #456]	; (129dc <main+0x60c>)
   12814:	f014 fa1f 	bl	26c56 <z_impl_z_log_msg_static_create>
   12818:	e7b9      	b.n	1278e <main+0x3be>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   1281a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1281e:	e7c5      	b.n	127ac <main+0x3dc>
   12820:	f06f 0c1b 	mvn.w	ip, #27
   12824:	b13a      	cbz	r2, 12836 <main+0x466>
   12826:	2103      	movs	r1, #3
   12828:	7139      	strb	r1, [r7, #4]
   1282a:	2100      	movs	r1, #0
   1282c:	7179      	strb	r1, [r7, #5]
   1282e:	71b9      	strb	r1, [r7, #6]
   12830:	71f9      	strb	r1, [r7, #7]
   12832:	6878      	ldr	r0, [r7, #4]
   12834:	6118      	str	r0, [r3, #16]
   12836:	2100      	movs	r1, #0
   12838:	f36f 0100 	bfc	r1, #0, #1
   1283c:	f36f 0141 	bfc	r1, #1, #1
   12840:	f36f 0182 	bfc	r1, #2, #1
   12844:	f36f 01c5 	bfc	r1, #3, #3
   12848:	2302      	movs	r3, #2
   1284a:	f363 1188 	bfi	r1, r3, #6, #3
   1284e:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   12852:	f363 2152 	bfi	r1, r3, #9, #10
   12856:	f36f 41de 	bfc	r1, #19, #12
   1285a:	f36f 71df 	bfc	r1, #31, #1
   1285e:	2300      	movs	r3, #0
   12860:	485e      	ldr	r0, [pc, #376]	; (129dc <main+0x60c>)
   12862:	f014 f9f8 	bl	26c56 <z_impl_z_log_msg_static_create>
   12866:	46a5      	mov	sp, r4
	err = bt_addr_le_from_str(TTPMS_IFR_BT_ID, "random", &IFR_bt_addr);
   12868:	4a62      	ldr	r2, [pc, #392]	; (129f4 <main+0x624>)
   1286a:	495e      	ldr	r1, [pc, #376]	; (129e4 <main+0x614>)
   1286c:	4862      	ldr	r0, [pc, #392]	; (129f8 <main+0x628>)
   1286e:	f004 fb43 	bl	16ef8 <bt_addr_le_from_str>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   12872:	4684      	mov	ip, r0
   12874:	2800      	cmp	r0, #0
   12876:	d041      	beq.n	128fc <main+0x52c>
   12878:	466c      	mov	r4, sp
   1287a:	b088      	sub	sp, #32
   1287c:	466b      	mov	r3, sp
   1287e:	f113 0210 	adds.w	r2, r3, #16
   12882:	d014      	beq.n	128ae <main+0x4de>
   12884:	210c      	movs	r1, #12
   12886:	b152      	cbz	r2, 1289e <main+0x4ce>
   12888:	4608      	mov	r0, r1
   1288a:	2904      	cmp	r1, #4
   1288c:	dd03      	ble.n	12896 <main+0x4c6>
   1288e:	f8df e15c 	ldr.w	lr, [pc, #348]	; 129ec <main+0x61c>
   12892:	f8c3 e014 	str.w	lr, [r3, #20]
   12896:	2808      	cmp	r0, #8
   12898:	dd0c      	ble.n	128b4 <main+0x4e4>
   1289a:	f8c3 c018 	str.w	ip, [r3, #24]
   1289e:	290b      	cmp	r1, #11
   128a0:	dd4c      	ble.n	1293c <main+0x56c>
   128a2:	f04f 0c0c 	mov.w	ip, #12
   128a6:	e007      	b.n	128b8 <main+0x4e8>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   128a8:	f06f 0c1b 	mvn.w	ip, #27
   128ac:	e7ba      	b.n	12824 <main+0x454>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   128ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   128b2:	e7e8      	b.n	12886 <main+0x4b6>
   128b4:	f06f 0c1b 	mvn.w	ip, #27
   128b8:	b13a      	cbz	r2, 128ca <main+0x4fa>
   128ba:	2103      	movs	r1, #3
   128bc:	7139      	strb	r1, [r7, #4]
   128be:	2100      	movs	r1, #0
   128c0:	7179      	strb	r1, [r7, #5]
   128c2:	71b9      	strb	r1, [r7, #6]
   128c4:	71f9      	strb	r1, [r7, #7]
   128c6:	6878      	ldr	r0, [r7, #4]
   128c8:	6118      	str	r0, [r3, #16]
   128ca:	2100      	movs	r1, #0
   128cc:	f36f 0100 	bfc	r1, #0, #1
   128d0:	f36f 0141 	bfc	r1, #1, #1
   128d4:	f36f 0182 	bfc	r1, #2, #1
   128d8:	f36f 01c5 	bfc	r1, #3, #3
   128dc:	2302      	movs	r3, #2
   128de:	f363 1188 	bfi	r1, r3, #6, #3
   128e2:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   128e6:	f363 2152 	bfi	r1, r3, #9, #10
   128ea:	f36f 41de 	bfc	r1, #19, #12
   128ee:	f36f 71df 	bfc	r1, #31, #1
   128f2:	2300      	movs	r3, #0
   128f4:	4839      	ldr	r0, [pc, #228]	; (129dc <main+0x60c>)
   128f6:	f014 f9ae 	bl	26c56 <z_impl_z_log_msg_static_create>
   128fa:	46a5      	mov	sp, r4
	err = bt_addr_le_from_str(TTPMS_IRL_BT_ID, "random", &IRL_bt_addr);
   128fc:	4a3f      	ldr	r2, [pc, #252]	; (129fc <main+0x62c>)
   128fe:	4939      	ldr	r1, [pc, #228]	; (129e4 <main+0x614>)
   12900:	483f      	ldr	r0, [pc, #252]	; (12a00 <main+0x630>)
   12902:	f004 faf9 	bl	16ef8 <bt_addr_le_from_str>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   12906:	4684      	mov	ip, r0
   12908:	2800      	cmp	r0, #0
   1290a:	d041      	beq.n	12990 <main+0x5c0>
   1290c:	466c      	mov	r4, sp
   1290e:	b088      	sub	sp, #32
   12910:	466b      	mov	r3, sp
   12912:	f113 0210 	adds.w	r2, r3, #16
   12916:	d014      	beq.n	12942 <main+0x572>
   12918:	210c      	movs	r1, #12
   1291a:	b152      	cbz	r2, 12932 <main+0x562>
   1291c:	4608      	mov	r0, r1
   1291e:	2904      	cmp	r1, #4
   12920:	dd03      	ble.n	1292a <main+0x55a>
   12922:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 129ec <main+0x61c>
   12926:	f8c3 e014 	str.w	lr, [r3, #20]
   1292a:	2808      	cmp	r0, #8
   1292c:	dd0c      	ble.n	12948 <main+0x578>
   1292e:	f8c3 c018 	str.w	ip, [r3, #24]
   12932:	290b      	cmp	r1, #11
   12934:	dd4c      	ble.n	129d0 <main+0x600>
   12936:	f04f 0c0c 	mov.w	ip, #12
   1293a:	e007      	b.n	1294c <main+0x57c>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   1293c:	f06f 0c1b 	mvn.w	ip, #27
   12940:	e7ba      	b.n	128b8 <main+0x4e8>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   12942:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12946:	e7e8      	b.n	1291a <main+0x54a>
   12948:	f06f 0c1b 	mvn.w	ip, #27
   1294c:	b13a      	cbz	r2, 1295e <main+0x58e>
   1294e:	2103      	movs	r1, #3
   12950:	7139      	strb	r1, [r7, #4]
   12952:	2100      	movs	r1, #0
   12954:	7179      	strb	r1, [r7, #5]
   12956:	71b9      	strb	r1, [r7, #6]
   12958:	71f9      	strb	r1, [r7, #7]
   1295a:	6878      	ldr	r0, [r7, #4]
   1295c:	6118      	str	r0, [r3, #16]
   1295e:	2100      	movs	r1, #0
   12960:	f36f 0100 	bfc	r1, #0, #1
   12964:	f36f 0141 	bfc	r1, #1, #1
   12968:	f36f 0182 	bfc	r1, #2, #1
   1296c:	f36f 01c5 	bfc	r1, #3, #3
   12970:	2302      	movs	r3, #2
   12972:	f363 1188 	bfi	r1, r3, #6, #3
   12976:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   1297a:	f363 2152 	bfi	r1, r3, #9, #10
   1297e:	f36f 41de 	bfc	r1, #19, #12
   12982:	f36f 71df 	bfc	r1, #31, #1
   12986:	2300      	movs	r3, #0
   12988:	4814      	ldr	r0, [pc, #80]	; (129dc <main+0x60c>)
   1298a:	f014 f964 	bl	26c56 <z_impl_z_log_msg_static_create>
   1298e:	46a5      	mov	sp, r4
	err = bt_addr_le_from_str(TTPMS_IRR_BT_ID, "random", &IRR_bt_addr);
   12990:	4a1c      	ldr	r2, [pc, #112]	; (12a04 <main+0x634>)
   12992:	4914      	ldr	r1, [pc, #80]	; (129e4 <main+0x614>)
   12994:	481c      	ldr	r0, [pc, #112]	; (12a08 <main+0x638>)
   12996:	f004 faaf 	bl	16ef8 <bt_addr_le_from_str>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   1299a:	4684      	mov	ip, r0
   1299c:	2800      	cmp	r0, #0
   1299e:	d059      	beq.n	12a54 <main+0x684>
   129a0:	466c      	mov	r4, sp
   129a2:	b088      	sub	sp, #32
   129a4:	466b      	mov	r3, sp
   129a6:	f113 0210 	adds.w	r2, r3, #16
   129aa:	d014      	beq.n	129d6 <main+0x606>
   129ac:	210c      	movs	r1, #12
   129ae:	b152      	cbz	r2, 129c6 <main+0x5f6>
   129b0:	4608      	mov	r0, r1
   129b2:	2904      	cmp	r1, #4
   129b4:	dd03      	ble.n	129be <main+0x5ee>
   129b6:	f8df e034 	ldr.w	lr, [pc, #52]	; 129ec <main+0x61c>
   129ba:	f8c3 e014 	str.w	lr, [r3, #20]
   129be:	2808      	cmp	r0, #8
   129c0:	dd24      	ble.n	12a0c <main+0x63c>
   129c2:	f8c3 c018 	str.w	ip, [r3, #24]
   129c6:	290b      	cmp	r1, #11
   129c8:	dd64      	ble.n	12a94 <main+0x6c4>
   129ca:	f04f 0c0c 	mov.w	ip, #12
   129ce:	e01f      	b.n	12a10 <main+0x640>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   129d0:	f06f 0c1b 	mvn.w	ip, #27
   129d4:	e7ba      	b.n	1294c <main+0x57c>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   129d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   129da:	e7e8      	b.n	129ae <main+0x5de>
   129dc:	0002d174 	.word	0x0002d174
   129e0:	200079d0 	.word	0x200079d0
   129e4:	0002d320 	.word	0x0002d320
   129e8:	0002d8a8 	.word	0x0002d8a8
   129ec:	0002d830 	.word	0x0002d830
   129f0:	0002d890 	.word	0x0002d890
   129f4:	200079c8 	.word	0x200079c8
   129f8:	0002d8bc 	.word	0x0002d8bc
   129fc:	200079c0 	.word	0x200079c0
   12a00:	0002d8d0 	.word	0x0002d8d0
   12a04:	200079b8 	.word	0x200079b8
   12a08:	0002d8e4 	.word	0x0002d8e4
   12a0c:	f06f 0c1b 	mvn.w	ip, #27
   12a10:	b13a      	cbz	r2, 12a22 <main+0x652>
   12a12:	2103      	movs	r1, #3
   12a14:	7139      	strb	r1, [r7, #4]
   12a16:	2100      	movs	r1, #0
   12a18:	7179      	strb	r1, [r7, #5]
   12a1a:	71b9      	strb	r1, [r7, #6]
   12a1c:	71f9      	strb	r1, [r7, #7]
   12a1e:	6878      	ldr	r0, [r7, #4]
   12a20:	6118      	str	r0, [r3, #16]
   12a22:	2100      	movs	r1, #0
   12a24:	f36f 0100 	bfc	r1, #0, #1
   12a28:	f36f 0141 	bfc	r1, #1, #1
   12a2c:	f36f 0182 	bfc	r1, #2, #1
   12a30:	f36f 01c5 	bfc	r1, #3, #3
   12a34:	2302      	movs	r3, #2
   12a36:	f363 1188 	bfi	r1, r3, #6, #3
   12a3a:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   12a3e:	f363 2152 	bfi	r1, r3, #9, #10
   12a42:	f36f 41de 	bfc	r1, #19, #12
   12a46:	f36f 71df 	bfc	r1, #31, #1
   12a4a:	2300      	movs	r3, #0
   12a4c:	48a7      	ldr	r0, [pc, #668]	; (12cec <main+0x91c>)
   12a4e:	f014 f902 	bl	26c56 <z_impl_z_log_msg_static_create>
   12a52:	46a5      	mov	sp, r4
	err = bt_addr_le_from_str(TTPMS_EFL_BT_ID, "random", &EFL_bt_addr);
   12a54:	4aa6      	ldr	r2, [pc, #664]	; (12cf0 <main+0x920>)
   12a56:	49a7      	ldr	r1, [pc, #668]	; (12cf4 <main+0x924>)
   12a58:	48a7      	ldr	r0, [pc, #668]	; (12cf8 <main+0x928>)
   12a5a:	f004 fa4d 	bl	16ef8 <bt_addr_le_from_str>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   12a5e:	4684      	mov	ip, r0
   12a60:	2800      	cmp	r0, #0
   12a62:	d041      	beq.n	12ae8 <main+0x718>
   12a64:	466c      	mov	r4, sp
   12a66:	b088      	sub	sp, #32
   12a68:	466b      	mov	r3, sp
   12a6a:	f113 0210 	adds.w	r2, r3, #16
   12a6e:	d014      	beq.n	12a9a <main+0x6ca>
   12a70:	210c      	movs	r1, #12
   12a72:	b152      	cbz	r2, 12a8a <main+0x6ba>
   12a74:	4608      	mov	r0, r1
   12a76:	2904      	cmp	r1, #4
   12a78:	dd03      	ble.n	12a82 <main+0x6b2>
   12a7a:	f8df e280 	ldr.w	lr, [pc, #640]	; 12cfc <main+0x92c>
   12a7e:	f8c3 e014 	str.w	lr, [r3, #20]
   12a82:	2808      	cmp	r0, #8
   12a84:	dd0c      	ble.n	12aa0 <main+0x6d0>
   12a86:	f8c3 c018 	str.w	ip, [r3, #24]
   12a8a:	290b      	cmp	r1, #11
   12a8c:	dd4c      	ble.n	12b28 <main+0x758>
   12a8e:	f04f 0c0c 	mov.w	ip, #12
   12a92:	e007      	b.n	12aa4 <main+0x6d4>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   12a94:	f06f 0c1b 	mvn.w	ip, #27
   12a98:	e7ba      	b.n	12a10 <main+0x640>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   12a9a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12a9e:	e7e8      	b.n	12a72 <main+0x6a2>
   12aa0:	f06f 0c1b 	mvn.w	ip, #27
   12aa4:	b13a      	cbz	r2, 12ab6 <main+0x6e6>
   12aa6:	2103      	movs	r1, #3
   12aa8:	7139      	strb	r1, [r7, #4]
   12aaa:	2100      	movs	r1, #0
   12aac:	7179      	strb	r1, [r7, #5]
   12aae:	71b9      	strb	r1, [r7, #6]
   12ab0:	71f9      	strb	r1, [r7, #7]
   12ab2:	6878      	ldr	r0, [r7, #4]
   12ab4:	6118      	str	r0, [r3, #16]
   12ab6:	2100      	movs	r1, #0
   12ab8:	f36f 0100 	bfc	r1, #0, #1
   12abc:	f36f 0141 	bfc	r1, #1, #1
   12ac0:	f36f 0182 	bfc	r1, #2, #1
   12ac4:	f36f 01c5 	bfc	r1, #3, #3
   12ac8:	2302      	movs	r3, #2
   12aca:	f363 1188 	bfi	r1, r3, #6, #3
   12ace:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   12ad2:	f363 2152 	bfi	r1, r3, #9, #10
   12ad6:	f36f 41de 	bfc	r1, #19, #12
   12ada:	f36f 71df 	bfc	r1, #31, #1
   12ade:	2300      	movs	r3, #0
   12ae0:	4882      	ldr	r0, [pc, #520]	; (12cec <main+0x91c>)
   12ae2:	f014 f8b8 	bl	26c56 <z_impl_z_log_msg_static_create>
   12ae6:	46a5      	mov	sp, r4
	err = bt_addr_le_from_str(TTPMS_EFR_BT_ID, "random", &EFR_bt_addr);
   12ae8:	4a85      	ldr	r2, [pc, #532]	; (12d00 <main+0x930>)
   12aea:	4982      	ldr	r1, [pc, #520]	; (12cf4 <main+0x924>)
   12aec:	4885      	ldr	r0, [pc, #532]	; (12d04 <main+0x934>)
   12aee:	f004 fa03 	bl	16ef8 <bt_addr_le_from_str>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   12af2:	4684      	mov	ip, r0
   12af4:	2800      	cmp	r0, #0
   12af6:	d041      	beq.n	12b7c <main+0x7ac>
   12af8:	466c      	mov	r4, sp
   12afa:	b088      	sub	sp, #32
   12afc:	466b      	mov	r3, sp
   12afe:	f113 0210 	adds.w	r2, r3, #16
   12b02:	d014      	beq.n	12b2e <main+0x75e>
   12b04:	210c      	movs	r1, #12
   12b06:	b152      	cbz	r2, 12b1e <main+0x74e>
   12b08:	4608      	mov	r0, r1
   12b0a:	2904      	cmp	r1, #4
   12b0c:	dd03      	ble.n	12b16 <main+0x746>
   12b0e:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 12cfc <main+0x92c>
   12b12:	f8c3 e014 	str.w	lr, [r3, #20]
   12b16:	2808      	cmp	r0, #8
   12b18:	dd0c      	ble.n	12b34 <main+0x764>
   12b1a:	f8c3 c018 	str.w	ip, [r3, #24]
   12b1e:	290b      	cmp	r1, #11
   12b20:	dd4c      	ble.n	12bbc <main+0x7ec>
   12b22:	f04f 0c0c 	mov.w	ip, #12
   12b26:	e007      	b.n	12b38 <main+0x768>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   12b28:	f06f 0c1b 	mvn.w	ip, #27
   12b2c:	e7ba      	b.n	12aa4 <main+0x6d4>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   12b2e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12b32:	e7e8      	b.n	12b06 <main+0x736>
   12b34:	f06f 0c1b 	mvn.w	ip, #27
   12b38:	b13a      	cbz	r2, 12b4a <main+0x77a>
   12b3a:	2103      	movs	r1, #3
   12b3c:	7139      	strb	r1, [r7, #4]
   12b3e:	2100      	movs	r1, #0
   12b40:	7179      	strb	r1, [r7, #5]
   12b42:	71b9      	strb	r1, [r7, #6]
   12b44:	71f9      	strb	r1, [r7, #7]
   12b46:	6878      	ldr	r0, [r7, #4]
   12b48:	6118      	str	r0, [r3, #16]
   12b4a:	2100      	movs	r1, #0
   12b4c:	f36f 0100 	bfc	r1, #0, #1
   12b50:	f36f 0141 	bfc	r1, #1, #1
   12b54:	f36f 0182 	bfc	r1, #2, #1
   12b58:	f36f 01c5 	bfc	r1, #3, #3
   12b5c:	2302      	movs	r3, #2
   12b5e:	f363 1188 	bfi	r1, r3, #6, #3
   12b62:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   12b66:	f363 2152 	bfi	r1, r3, #9, #10
   12b6a:	f36f 41de 	bfc	r1, #19, #12
   12b6e:	f36f 71df 	bfc	r1, #31, #1
   12b72:	2300      	movs	r3, #0
   12b74:	485d      	ldr	r0, [pc, #372]	; (12cec <main+0x91c>)
   12b76:	f014 f86e 	bl	26c56 <z_impl_z_log_msg_static_create>
   12b7a:	46a5      	mov	sp, r4
	err = bt_addr_le_from_str(TTPMS_ERL_BT_ID, "random", &ERL_bt_addr);
   12b7c:	4a62      	ldr	r2, [pc, #392]	; (12d08 <main+0x938>)
   12b7e:	495d      	ldr	r1, [pc, #372]	; (12cf4 <main+0x924>)
   12b80:	4862      	ldr	r0, [pc, #392]	; (12d0c <main+0x93c>)
   12b82:	f004 f9b9 	bl	16ef8 <bt_addr_le_from_str>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   12b86:	4684      	mov	ip, r0
   12b88:	2800      	cmp	r0, #0
   12b8a:	d041      	beq.n	12c10 <main+0x840>
   12b8c:	466c      	mov	r4, sp
   12b8e:	b088      	sub	sp, #32
   12b90:	466b      	mov	r3, sp
   12b92:	f113 0210 	adds.w	r2, r3, #16
   12b96:	d014      	beq.n	12bc2 <main+0x7f2>
   12b98:	210c      	movs	r1, #12
   12b9a:	b152      	cbz	r2, 12bb2 <main+0x7e2>
   12b9c:	4608      	mov	r0, r1
   12b9e:	2904      	cmp	r1, #4
   12ba0:	dd03      	ble.n	12baa <main+0x7da>
   12ba2:	f8df e158 	ldr.w	lr, [pc, #344]	; 12cfc <main+0x92c>
   12ba6:	f8c3 e014 	str.w	lr, [r3, #20]
   12baa:	2808      	cmp	r0, #8
   12bac:	dd0c      	ble.n	12bc8 <main+0x7f8>
   12bae:	f8c3 c018 	str.w	ip, [r3, #24]
   12bb2:	290b      	cmp	r1, #11
   12bb4:	dd4c      	ble.n	12c50 <main+0x880>
   12bb6:	f04f 0c0c 	mov.w	ip, #12
   12bba:	e007      	b.n	12bcc <main+0x7fc>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   12bbc:	f06f 0c1b 	mvn.w	ip, #27
   12bc0:	e7ba      	b.n	12b38 <main+0x768>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   12bc2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12bc6:	e7e8      	b.n	12b9a <main+0x7ca>
   12bc8:	f06f 0c1b 	mvn.w	ip, #27
   12bcc:	b13a      	cbz	r2, 12bde <main+0x80e>
   12bce:	2103      	movs	r1, #3
   12bd0:	7139      	strb	r1, [r7, #4]
   12bd2:	2100      	movs	r1, #0
   12bd4:	7179      	strb	r1, [r7, #5]
   12bd6:	71b9      	strb	r1, [r7, #6]
   12bd8:	71f9      	strb	r1, [r7, #7]
   12bda:	6878      	ldr	r0, [r7, #4]
   12bdc:	6118      	str	r0, [r3, #16]
   12bde:	2100      	movs	r1, #0
   12be0:	f36f 0100 	bfc	r1, #0, #1
   12be4:	f36f 0141 	bfc	r1, #1, #1
   12be8:	f36f 0182 	bfc	r1, #2, #1
   12bec:	f36f 01c5 	bfc	r1, #3, #3
   12bf0:	2302      	movs	r3, #2
   12bf2:	f363 1188 	bfi	r1, r3, #6, #3
   12bf6:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   12bfa:	f363 2152 	bfi	r1, r3, #9, #10
   12bfe:	f36f 41de 	bfc	r1, #19, #12
   12c02:	f36f 71df 	bfc	r1, #31, #1
   12c06:	2300      	movs	r3, #0
   12c08:	4838      	ldr	r0, [pc, #224]	; (12cec <main+0x91c>)
   12c0a:	f014 f824 	bl	26c56 <z_impl_z_log_msg_static_create>
   12c0e:	46a5      	mov	sp, r4
	err = bt_addr_le_from_str(TTPMS_ERR_BT_ID, "random", &ERR_bt_addr);
   12c10:	4a3f      	ldr	r2, [pc, #252]	; (12d10 <main+0x940>)
   12c12:	4938      	ldr	r1, [pc, #224]	; (12cf4 <main+0x924>)
   12c14:	483f      	ldr	r0, [pc, #252]	; (12d14 <main+0x944>)
   12c16:	f004 f96f 	bl	16ef8 <bt_addr_le_from_str>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   12c1a:	4684      	mov	ip, r0
   12c1c:	2800      	cmp	r0, #0
   12c1e:	d041      	beq.n	12ca4 <main+0x8d4>
   12c20:	466c      	mov	r4, sp
   12c22:	b088      	sub	sp, #32
   12c24:	466b      	mov	r3, sp
   12c26:	f113 0210 	adds.w	r2, r3, #16
   12c2a:	d014      	beq.n	12c56 <main+0x886>
   12c2c:	210c      	movs	r1, #12
   12c2e:	b152      	cbz	r2, 12c46 <main+0x876>
   12c30:	4608      	mov	r0, r1
   12c32:	2904      	cmp	r1, #4
   12c34:	dd03      	ble.n	12c3e <main+0x86e>
   12c36:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 12cfc <main+0x92c>
   12c3a:	f8c3 e014 	str.w	lr, [r3, #20]
   12c3e:	2808      	cmp	r0, #8
   12c40:	dd0c      	ble.n	12c5c <main+0x88c>
   12c42:	f8c3 c018 	str.w	ip, [r3, #24]
   12c46:	290b      	cmp	r1, #11
   12c48:	dd4a      	ble.n	12ce0 <main+0x910>
   12c4a:	f04f 0c0c 	mov.w	ip, #12
   12c4e:	e007      	b.n	12c60 <main+0x890>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   12c50:	f06f 0c1b 	mvn.w	ip, #27
   12c54:	e7ba      	b.n	12bcc <main+0x7fc>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   12c56:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12c5a:	e7e8      	b.n	12c2e <main+0x85e>
   12c5c:	f06f 0c1b 	mvn.w	ip, #27
   12c60:	b13a      	cbz	r2, 12c72 <main+0x8a2>
   12c62:	2103      	movs	r1, #3
   12c64:	7139      	strb	r1, [r7, #4]
   12c66:	2100      	movs	r1, #0
   12c68:	7179      	strb	r1, [r7, #5]
   12c6a:	71b9      	strb	r1, [r7, #6]
   12c6c:	71f9      	strb	r1, [r7, #7]
   12c6e:	6878      	ldr	r0, [r7, #4]
   12c70:	6118      	str	r0, [r3, #16]
   12c72:	2100      	movs	r1, #0
   12c74:	f36f 0100 	bfc	r1, #0, #1
   12c78:	f36f 0141 	bfc	r1, #1, #1
   12c7c:	f36f 0182 	bfc	r1, #2, #1
   12c80:	f36f 01c5 	bfc	r1, #3, #3
   12c84:	2302      	movs	r3, #2
   12c86:	f363 1188 	bfi	r1, r3, #6, #3
   12c8a:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   12c8e:	f363 2152 	bfi	r1, r3, #9, #10
   12c92:	f36f 41de 	bfc	r1, #19, #12
   12c96:	f36f 71df 	bfc	r1, #31, #1
   12c9a:	2300      	movs	r3, #0
   12c9c:	4813      	ldr	r0, [pc, #76]	; (12cec <main+0x91c>)
   12c9e:	f013 ffda 	bl	26c56 <z_impl_z_log_msg_static_create>
   12ca2:	46a5      	mov	sp, r4
	err = bt_le_filter_accept_list_add(&IFL_bt_addr);
   12ca4:	481c      	ldr	r0, [pc, #112]	; (12d18 <main+0x948>)
   12ca6:	f006 fde9 	bl	1987c <bt_le_filter_accept_list_add>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   12caa:	4684      	mov	ip, r0
   12cac:	2800      	cmp	r0, #0
   12cae:	d05b      	beq.n	12d68 <main+0x998>
   12cb0:	466c      	mov	r4, sp
   12cb2:	b088      	sub	sp, #32
   12cb4:	466b      	mov	r3, sp
   12cb6:	f113 0210 	adds.w	r2, r3, #16
   12cba:	d014      	beq.n	12ce6 <main+0x916>
   12cbc:	210c      	movs	r1, #12
   12cbe:	b152      	cbz	r2, 12cd6 <main+0x906>
   12cc0:	4608      	mov	r0, r1
   12cc2:	2904      	cmp	r1, #4
   12cc4:	dd03      	ble.n	12cce <main+0x8fe>
   12cc6:	f8df e054 	ldr.w	lr, [pc, #84]	; 12d1c <main+0x94c>
   12cca:	f8c3 e014 	str.w	lr, [r3, #20]
   12cce:	2808      	cmp	r0, #8
   12cd0:	dd26      	ble.n	12d20 <main+0x950>
   12cd2:	f8c3 c018 	str.w	ip, [r3, #24]
   12cd6:	290b      	cmp	r1, #11
   12cd8:	dd64      	ble.n	12da4 <main+0x9d4>
   12cda:	f04f 0c0c 	mov.w	ip, #12
   12cde:	e021      	b.n	12d24 <main+0x954>
	if (err) { LOG_WRN("Invalid BT address (err %d)", err); }
   12ce0:	f06f 0c1b 	mvn.w	ip, #27
   12ce4:	e7bc      	b.n	12c60 <main+0x890>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   12ce6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12cea:	e7e8      	b.n	12cbe <main+0x8ee>
   12cec:	0002d174 	.word	0x0002d174
   12cf0:	200079b0 	.word	0x200079b0
   12cf4:	0002d320 	.word	0x0002d320
   12cf8:	0002d8f8 	.word	0x0002d8f8
   12cfc:	0002d830 	.word	0x0002d830
   12d00:	200079a8 	.word	0x200079a8
   12d04:	0002d90c 	.word	0x0002d90c
   12d08:	200079a0 	.word	0x200079a0
   12d0c:	0002d920 	.word	0x0002d920
   12d10:	20007998 	.word	0x20007998
   12d14:	0002d934 	.word	0x0002d934
   12d18:	200079d0 	.word	0x200079d0
   12d1c:	0002d948 	.word	0x0002d948
   12d20:	f06f 0c1b 	mvn.w	ip, #27
   12d24:	b13a      	cbz	r2, 12d36 <main+0x966>
   12d26:	2103      	movs	r1, #3
   12d28:	7139      	strb	r1, [r7, #4]
   12d2a:	2100      	movs	r1, #0
   12d2c:	7179      	strb	r1, [r7, #5]
   12d2e:	71b9      	strb	r1, [r7, #6]
   12d30:	71f9      	strb	r1, [r7, #7]
   12d32:	6878      	ldr	r0, [r7, #4]
   12d34:	6118      	str	r0, [r3, #16]
   12d36:	2100      	movs	r1, #0
   12d38:	f36f 0100 	bfc	r1, #0, #1
   12d3c:	f36f 0141 	bfc	r1, #1, #1
   12d40:	f36f 0182 	bfc	r1, #2, #1
   12d44:	f36f 01c5 	bfc	r1, #3, #3
   12d48:	2302      	movs	r3, #2
   12d4a:	f363 1188 	bfi	r1, r3, #6, #3
   12d4e:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   12d52:	f363 2152 	bfi	r1, r3, #9, #10
   12d56:	f36f 41de 	bfc	r1, #19, #12
   12d5a:	f36f 71df 	bfc	r1, #31, #1
   12d5e:	2300      	movs	r3, #0
   12d60:	48a3      	ldr	r0, [pc, #652]	; (12ff0 <main+0xc20>)
   12d62:	f013 ff78 	bl	26c56 <z_impl_z_log_msg_static_create>
   12d66:	46a5      	mov	sp, r4
	err = bt_le_filter_accept_list_add(&IFR_bt_addr);
   12d68:	48a2      	ldr	r0, [pc, #648]	; (12ff4 <main+0xc24>)
   12d6a:	f006 fd87 	bl	1987c <bt_le_filter_accept_list_add>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   12d6e:	4684      	mov	ip, r0
   12d70:	2800      	cmp	r0, #0
   12d72:	d041      	beq.n	12df8 <main+0xa28>
   12d74:	466c      	mov	r4, sp
   12d76:	b088      	sub	sp, #32
   12d78:	466b      	mov	r3, sp
   12d7a:	f113 0210 	adds.w	r2, r3, #16
   12d7e:	d014      	beq.n	12daa <main+0x9da>
   12d80:	210c      	movs	r1, #12
   12d82:	b152      	cbz	r2, 12d9a <main+0x9ca>
   12d84:	4608      	mov	r0, r1
   12d86:	2904      	cmp	r1, #4
   12d88:	dd03      	ble.n	12d92 <main+0x9c2>
   12d8a:	f8df e26c 	ldr.w	lr, [pc, #620]	; 12ff8 <main+0xc28>
   12d8e:	f8c3 e014 	str.w	lr, [r3, #20]
   12d92:	2808      	cmp	r0, #8
   12d94:	dd0c      	ble.n	12db0 <main+0x9e0>
   12d96:	f8c3 c018 	str.w	ip, [r3, #24]
   12d9a:	290b      	cmp	r1, #11
   12d9c:	dd4a      	ble.n	12e34 <main+0xa64>
   12d9e:	f04f 0c0c 	mov.w	ip, #12
   12da2:	e007      	b.n	12db4 <main+0x9e4>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   12da4:	f06f 0c1b 	mvn.w	ip, #27
   12da8:	e7bc      	b.n	12d24 <main+0x954>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   12daa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12dae:	e7e8      	b.n	12d82 <main+0x9b2>
   12db0:	f06f 0c1b 	mvn.w	ip, #27
   12db4:	b13a      	cbz	r2, 12dc6 <main+0x9f6>
   12db6:	2103      	movs	r1, #3
   12db8:	7139      	strb	r1, [r7, #4]
   12dba:	2100      	movs	r1, #0
   12dbc:	7179      	strb	r1, [r7, #5]
   12dbe:	71b9      	strb	r1, [r7, #6]
   12dc0:	71f9      	strb	r1, [r7, #7]
   12dc2:	6878      	ldr	r0, [r7, #4]
   12dc4:	6118      	str	r0, [r3, #16]
   12dc6:	2100      	movs	r1, #0
   12dc8:	f36f 0100 	bfc	r1, #0, #1
   12dcc:	f36f 0141 	bfc	r1, #1, #1
   12dd0:	f36f 0182 	bfc	r1, #2, #1
   12dd4:	f36f 01c5 	bfc	r1, #3, #3
   12dd8:	2302      	movs	r3, #2
   12dda:	f363 1188 	bfi	r1, r3, #6, #3
   12dde:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   12de2:	f363 2152 	bfi	r1, r3, #9, #10
   12de6:	f36f 41de 	bfc	r1, #19, #12
   12dea:	f36f 71df 	bfc	r1, #31, #1
   12dee:	2300      	movs	r3, #0
   12df0:	487f      	ldr	r0, [pc, #508]	; (12ff0 <main+0xc20>)
   12df2:	f013 ff30 	bl	26c56 <z_impl_z_log_msg_static_create>
   12df6:	46a5      	mov	sp, r4
	err = bt_le_filter_accept_list_add(&IRL_bt_addr);
   12df8:	4880      	ldr	r0, [pc, #512]	; (12ffc <main+0xc2c>)
   12dfa:	f006 fd3f 	bl	1987c <bt_le_filter_accept_list_add>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   12dfe:	4684      	mov	ip, r0
   12e00:	2800      	cmp	r0, #0
   12e02:	d041      	beq.n	12e88 <main+0xab8>
   12e04:	466c      	mov	r4, sp
   12e06:	b088      	sub	sp, #32
   12e08:	466b      	mov	r3, sp
   12e0a:	f113 0210 	adds.w	r2, r3, #16
   12e0e:	d014      	beq.n	12e3a <main+0xa6a>
   12e10:	210c      	movs	r1, #12
   12e12:	b152      	cbz	r2, 12e2a <main+0xa5a>
   12e14:	4608      	mov	r0, r1
   12e16:	2904      	cmp	r1, #4
   12e18:	dd03      	ble.n	12e22 <main+0xa52>
   12e1a:	f8df e1dc 	ldr.w	lr, [pc, #476]	; 12ff8 <main+0xc28>
   12e1e:	f8c3 e014 	str.w	lr, [r3, #20]
   12e22:	2808      	cmp	r0, #8
   12e24:	dd0c      	ble.n	12e40 <main+0xa70>
   12e26:	f8c3 c018 	str.w	ip, [r3, #24]
   12e2a:	290b      	cmp	r1, #11
   12e2c:	dd4a      	ble.n	12ec4 <main+0xaf4>
   12e2e:	f04f 0c0c 	mov.w	ip, #12
   12e32:	e007      	b.n	12e44 <main+0xa74>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   12e34:	f06f 0c1b 	mvn.w	ip, #27
   12e38:	e7bc      	b.n	12db4 <main+0x9e4>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   12e3a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12e3e:	e7e8      	b.n	12e12 <main+0xa42>
   12e40:	f06f 0c1b 	mvn.w	ip, #27
   12e44:	b13a      	cbz	r2, 12e56 <main+0xa86>
   12e46:	2103      	movs	r1, #3
   12e48:	7139      	strb	r1, [r7, #4]
   12e4a:	2100      	movs	r1, #0
   12e4c:	7179      	strb	r1, [r7, #5]
   12e4e:	71b9      	strb	r1, [r7, #6]
   12e50:	71f9      	strb	r1, [r7, #7]
   12e52:	6878      	ldr	r0, [r7, #4]
   12e54:	6118      	str	r0, [r3, #16]
   12e56:	2100      	movs	r1, #0
   12e58:	f36f 0100 	bfc	r1, #0, #1
   12e5c:	f36f 0141 	bfc	r1, #1, #1
   12e60:	f36f 0182 	bfc	r1, #2, #1
   12e64:	f36f 01c5 	bfc	r1, #3, #3
   12e68:	2302      	movs	r3, #2
   12e6a:	f363 1188 	bfi	r1, r3, #6, #3
   12e6e:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   12e72:	f363 2152 	bfi	r1, r3, #9, #10
   12e76:	f36f 41de 	bfc	r1, #19, #12
   12e7a:	f36f 71df 	bfc	r1, #31, #1
   12e7e:	2300      	movs	r3, #0
   12e80:	485b      	ldr	r0, [pc, #364]	; (12ff0 <main+0xc20>)
   12e82:	f013 fee8 	bl	26c56 <z_impl_z_log_msg_static_create>
   12e86:	46a5      	mov	sp, r4
	err = bt_le_filter_accept_list_add(&IRR_bt_addr);
   12e88:	485d      	ldr	r0, [pc, #372]	; (13000 <main+0xc30>)
   12e8a:	f006 fcf7 	bl	1987c <bt_le_filter_accept_list_add>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   12e8e:	4684      	mov	ip, r0
   12e90:	2800      	cmp	r0, #0
   12e92:	d041      	beq.n	12f18 <main+0xb48>
   12e94:	466c      	mov	r4, sp
   12e96:	b088      	sub	sp, #32
   12e98:	466b      	mov	r3, sp
   12e9a:	f113 0210 	adds.w	r2, r3, #16
   12e9e:	d014      	beq.n	12eca <main+0xafa>
   12ea0:	210c      	movs	r1, #12
   12ea2:	b152      	cbz	r2, 12eba <main+0xaea>
   12ea4:	4608      	mov	r0, r1
   12ea6:	2904      	cmp	r1, #4
   12ea8:	dd03      	ble.n	12eb2 <main+0xae2>
   12eaa:	f8df e14c 	ldr.w	lr, [pc, #332]	; 12ff8 <main+0xc28>
   12eae:	f8c3 e014 	str.w	lr, [r3, #20]
   12eb2:	2808      	cmp	r0, #8
   12eb4:	dd0c      	ble.n	12ed0 <main+0xb00>
   12eb6:	f8c3 c018 	str.w	ip, [r3, #24]
   12eba:	290b      	cmp	r1, #11
   12ebc:	dd4a      	ble.n	12f54 <main+0xb84>
   12ebe:	f04f 0c0c 	mov.w	ip, #12
   12ec2:	e007      	b.n	12ed4 <main+0xb04>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   12ec4:	f06f 0c1b 	mvn.w	ip, #27
   12ec8:	e7bc      	b.n	12e44 <main+0xa74>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   12eca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12ece:	e7e8      	b.n	12ea2 <main+0xad2>
   12ed0:	f06f 0c1b 	mvn.w	ip, #27
   12ed4:	b13a      	cbz	r2, 12ee6 <main+0xb16>
   12ed6:	2103      	movs	r1, #3
   12ed8:	7139      	strb	r1, [r7, #4]
   12eda:	2100      	movs	r1, #0
   12edc:	7179      	strb	r1, [r7, #5]
   12ede:	71b9      	strb	r1, [r7, #6]
   12ee0:	71f9      	strb	r1, [r7, #7]
   12ee2:	6878      	ldr	r0, [r7, #4]
   12ee4:	6118      	str	r0, [r3, #16]
   12ee6:	2100      	movs	r1, #0
   12ee8:	f36f 0100 	bfc	r1, #0, #1
   12eec:	f36f 0141 	bfc	r1, #1, #1
   12ef0:	f36f 0182 	bfc	r1, #2, #1
   12ef4:	f36f 01c5 	bfc	r1, #3, #3
   12ef8:	2302      	movs	r3, #2
   12efa:	f363 1188 	bfi	r1, r3, #6, #3
   12efe:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   12f02:	f363 2152 	bfi	r1, r3, #9, #10
   12f06:	f36f 41de 	bfc	r1, #19, #12
   12f0a:	f36f 71df 	bfc	r1, #31, #1
   12f0e:	2300      	movs	r3, #0
   12f10:	4837      	ldr	r0, [pc, #220]	; (12ff0 <main+0xc20>)
   12f12:	f013 fea0 	bl	26c56 <z_impl_z_log_msg_static_create>
   12f16:	46a5      	mov	sp, r4
	err = bt_le_filter_accept_list_add(&EFL_bt_addr);
   12f18:	483a      	ldr	r0, [pc, #232]	; (13004 <main+0xc34>)
   12f1a:	f006 fcaf 	bl	1987c <bt_le_filter_accept_list_add>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   12f1e:	4684      	mov	ip, r0
   12f20:	2800      	cmp	r0, #0
   12f22:	d041      	beq.n	12fa8 <main+0xbd8>
   12f24:	466c      	mov	r4, sp
   12f26:	b088      	sub	sp, #32
   12f28:	466b      	mov	r3, sp
   12f2a:	f113 0210 	adds.w	r2, r3, #16
   12f2e:	d014      	beq.n	12f5a <main+0xb8a>
   12f30:	210c      	movs	r1, #12
   12f32:	b152      	cbz	r2, 12f4a <main+0xb7a>
   12f34:	4608      	mov	r0, r1
   12f36:	2904      	cmp	r1, #4
   12f38:	dd03      	ble.n	12f42 <main+0xb72>
   12f3a:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 12ff8 <main+0xc28>
   12f3e:	f8c3 e014 	str.w	lr, [r3, #20]
   12f42:	2808      	cmp	r0, #8
   12f44:	dd0c      	ble.n	12f60 <main+0xb90>
   12f46:	f8c3 c018 	str.w	ip, [r3, #24]
   12f4a:	290b      	cmp	r1, #11
   12f4c:	dd4a      	ble.n	12fe4 <main+0xc14>
   12f4e:	f04f 0c0c 	mov.w	ip, #12
   12f52:	e007      	b.n	12f64 <main+0xb94>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   12f54:	f06f 0c1b 	mvn.w	ip, #27
   12f58:	e7bc      	b.n	12ed4 <main+0xb04>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   12f5a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12f5e:	e7e8      	b.n	12f32 <main+0xb62>
   12f60:	f06f 0c1b 	mvn.w	ip, #27
   12f64:	b13a      	cbz	r2, 12f76 <main+0xba6>
   12f66:	2103      	movs	r1, #3
   12f68:	7139      	strb	r1, [r7, #4]
   12f6a:	2100      	movs	r1, #0
   12f6c:	7179      	strb	r1, [r7, #5]
   12f6e:	71b9      	strb	r1, [r7, #6]
   12f70:	71f9      	strb	r1, [r7, #7]
   12f72:	6878      	ldr	r0, [r7, #4]
   12f74:	6118      	str	r0, [r3, #16]
   12f76:	2100      	movs	r1, #0
   12f78:	f36f 0100 	bfc	r1, #0, #1
   12f7c:	f36f 0141 	bfc	r1, #1, #1
   12f80:	f36f 0182 	bfc	r1, #2, #1
   12f84:	f36f 01c5 	bfc	r1, #3, #3
   12f88:	2302      	movs	r3, #2
   12f8a:	f363 1188 	bfi	r1, r3, #6, #3
   12f8e:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   12f92:	f363 2152 	bfi	r1, r3, #9, #10
   12f96:	f36f 41de 	bfc	r1, #19, #12
   12f9a:	f36f 71df 	bfc	r1, #31, #1
   12f9e:	2300      	movs	r3, #0
   12fa0:	4813      	ldr	r0, [pc, #76]	; (12ff0 <main+0xc20>)
   12fa2:	f013 fe58 	bl	26c56 <z_impl_z_log_msg_static_create>
   12fa6:	46a5      	mov	sp, r4
	err = bt_le_filter_accept_list_add(&EFR_bt_addr);
   12fa8:	4817      	ldr	r0, [pc, #92]	; (13008 <main+0xc38>)
   12faa:	f006 fc67 	bl	1987c <bt_le_filter_accept_list_add>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   12fae:	4684      	mov	ip, r0
   12fb0:	2800      	cmp	r0, #0
   12fb2:	d04f      	beq.n	13054 <main+0xc84>
   12fb4:	466c      	mov	r4, sp
   12fb6:	b088      	sub	sp, #32
   12fb8:	466b      	mov	r3, sp
   12fba:	f113 0210 	adds.w	r2, r3, #16
   12fbe:	d014      	beq.n	12fea <main+0xc1a>
   12fc0:	210c      	movs	r1, #12
   12fc2:	b152      	cbz	r2, 12fda <main+0xc0a>
   12fc4:	4608      	mov	r0, r1
   12fc6:	2904      	cmp	r1, #4
   12fc8:	dd03      	ble.n	12fd2 <main+0xc02>
   12fca:	f8df e02c 	ldr.w	lr, [pc, #44]	; 12ff8 <main+0xc28>
   12fce:	f8c3 e014 	str.w	lr, [r3, #20]
   12fd2:	2808      	cmp	r0, #8
   12fd4:	dd1a      	ble.n	1300c <main+0xc3c>
   12fd6:	f8c3 c018 	str.w	ip, [r3, #24]
   12fda:	290b      	cmp	r1, #11
   12fdc:	dd58      	ble.n	13090 <main+0xcc0>
   12fde:	f04f 0c0c 	mov.w	ip, #12
   12fe2:	e015      	b.n	13010 <main+0xc40>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   12fe4:	f06f 0c1b 	mvn.w	ip, #27
   12fe8:	e7bc      	b.n	12f64 <main+0xb94>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   12fea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12fee:	e7e8      	b.n	12fc2 <main+0xbf2>
   12ff0:	0002d174 	.word	0x0002d174
   12ff4:	200079c8 	.word	0x200079c8
   12ff8:	0002d948 	.word	0x0002d948
   12ffc:	200079c0 	.word	0x200079c0
   13000:	200079b8 	.word	0x200079b8
   13004:	200079b0 	.word	0x200079b0
   13008:	200079a8 	.word	0x200079a8
   1300c:	f06f 0c1b 	mvn.w	ip, #27
   13010:	b13a      	cbz	r2, 13022 <main+0xc52>
   13012:	2103      	movs	r1, #3
   13014:	7139      	strb	r1, [r7, #4]
   13016:	2100      	movs	r1, #0
   13018:	7179      	strb	r1, [r7, #5]
   1301a:	71b9      	strb	r1, [r7, #6]
   1301c:	71f9      	strb	r1, [r7, #7]
   1301e:	6878      	ldr	r0, [r7, #4]
   13020:	6118      	str	r0, [r3, #16]
   13022:	2100      	movs	r1, #0
   13024:	f36f 0100 	bfc	r1, #0, #1
   13028:	f36f 0141 	bfc	r1, #1, #1
   1302c:	f36f 0182 	bfc	r1, #2, #1
   13030:	f36f 01c5 	bfc	r1, #3, #3
   13034:	2302      	movs	r3, #2
   13036:	f363 1188 	bfi	r1, r3, #6, #3
   1303a:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   1303e:	f363 2152 	bfi	r1, r3, #9, #10
   13042:	f36f 41de 	bfc	r1, #19, #12
   13046:	f36f 71df 	bfc	r1, #31, #1
   1304a:	2300      	movs	r3, #0
   1304c:	48c3      	ldr	r0, [pc, #780]	; (1335c <main+0xf8c>)
   1304e:	f013 fe02 	bl	26c56 <z_impl_z_log_msg_static_create>
   13052:	46a5      	mov	sp, r4
	err = bt_le_filter_accept_list_add(&ERL_bt_addr);
   13054:	48c2      	ldr	r0, [pc, #776]	; (13360 <main+0xf90>)
   13056:	f006 fc11 	bl	1987c <bt_le_filter_accept_list_add>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   1305a:	4684      	mov	ip, r0
   1305c:	2800      	cmp	r0, #0
   1305e:	d041      	beq.n	130e4 <main+0xd14>
   13060:	466c      	mov	r4, sp
   13062:	b088      	sub	sp, #32
   13064:	466b      	mov	r3, sp
   13066:	f113 0210 	adds.w	r2, r3, #16
   1306a:	d014      	beq.n	13096 <main+0xcc6>
   1306c:	210c      	movs	r1, #12
   1306e:	b152      	cbz	r2, 13086 <main+0xcb6>
   13070:	4608      	mov	r0, r1
   13072:	2904      	cmp	r1, #4
   13074:	dd03      	ble.n	1307e <main+0xcae>
   13076:	f8df e2ec 	ldr.w	lr, [pc, #748]	; 13364 <main+0xf94>
   1307a:	f8c3 e014 	str.w	lr, [r3, #20]
   1307e:	2808      	cmp	r0, #8
   13080:	dd0c      	ble.n	1309c <main+0xccc>
   13082:	f8c3 c018 	str.w	ip, [r3, #24]
   13086:	290b      	cmp	r1, #11
   13088:	dd4a      	ble.n	13120 <main+0xd50>
   1308a:	f04f 0c0c 	mov.w	ip, #12
   1308e:	e007      	b.n	130a0 <main+0xcd0>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   13090:	f06f 0c1b 	mvn.w	ip, #27
   13094:	e7bc      	b.n	13010 <main+0xc40>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   13096:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1309a:	e7e8      	b.n	1306e <main+0xc9e>
   1309c:	f06f 0c1b 	mvn.w	ip, #27
   130a0:	b13a      	cbz	r2, 130b2 <main+0xce2>
   130a2:	2103      	movs	r1, #3
   130a4:	7139      	strb	r1, [r7, #4]
   130a6:	2100      	movs	r1, #0
   130a8:	7179      	strb	r1, [r7, #5]
   130aa:	71b9      	strb	r1, [r7, #6]
   130ac:	71f9      	strb	r1, [r7, #7]
   130ae:	6878      	ldr	r0, [r7, #4]
   130b0:	6118      	str	r0, [r3, #16]
   130b2:	2100      	movs	r1, #0
   130b4:	f36f 0100 	bfc	r1, #0, #1
   130b8:	f36f 0141 	bfc	r1, #1, #1
   130bc:	f36f 0182 	bfc	r1, #2, #1
   130c0:	f36f 01c5 	bfc	r1, #3, #3
   130c4:	2302      	movs	r3, #2
   130c6:	f363 1188 	bfi	r1, r3, #6, #3
   130ca:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   130ce:	f363 2152 	bfi	r1, r3, #9, #10
   130d2:	f36f 41de 	bfc	r1, #19, #12
   130d6:	f36f 71df 	bfc	r1, #31, #1
   130da:	2300      	movs	r3, #0
   130dc:	489f      	ldr	r0, [pc, #636]	; (1335c <main+0xf8c>)
   130de:	f013 fdba 	bl	26c56 <z_impl_z_log_msg_static_create>
   130e2:	46a5      	mov	sp, r4
	err = bt_le_filter_accept_list_add(&ERR_bt_addr);
   130e4:	48a0      	ldr	r0, [pc, #640]	; (13368 <main+0xf98>)
   130e6:	f006 fbc9 	bl	1987c <bt_le_filter_accept_list_add>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   130ea:	4684      	mov	ip, r0
   130ec:	2800      	cmp	r0, #0
   130ee:	d041      	beq.n	13174 <main+0xda4>
   130f0:	466c      	mov	r4, sp
   130f2:	b088      	sub	sp, #32
   130f4:	466b      	mov	r3, sp
   130f6:	f113 0210 	adds.w	r2, r3, #16
   130fa:	d014      	beq.n	13126 <main+0xd56>
   130fc:	210c      	movs	r1, #12
   130fe:	b152      	cbz	r2, 13116 <main+0xd46>
   13100:	4608      	mov	r0, r1
   13102:	2904      	cmp	r1, #4
   13104:	dd03      	ble.n	1310e <main+0xd3e>
   13106:	f8df e25c 	ldr.w	lr, [pc, #604]	; 13364 <main+0xf94>
   1310a:	f8c3 e014 	str.w	lr, [r3, #20]
   1310e:	2808      	cmp	r0, #8
   13110:	dd0c      	ble.n	1312c <main+0xd5c>
   13112:	f8c3 c018 	str.w	ip, [r3, #24]
   13116:	290b      	cmp	r1, #11
   13118:	dd4b      	ble.n	131b2 <main+0xde2>
   1311a:	f04f 0c0c 	mov.w	ip, #12
   1311e:	e007      	b.n	13130 <main+0xd60>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   13120:	f06f 0c1b 	mvn.w	ip, #27
   13124:	e7bc      	b.n	130a0 <main+0xcd0>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   13126:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1312a:	e7e8      	b.n	130fe <main+0xd2e>
   1312c:	f06f 0c1b 	mvn.w	ip, #27
   13130:	b13a      	cbz	r2, 13142 <main+0xd72>
   13132:	2103      	movs	r1, #3
   13134:	7139      	strb	r1, [r7, #4]
   13136:	2100      	movs	r1, #0
   13138:	7179      	strb	r1, [r7, #5]
   1313a:	71b9      	strb	r1, [r7, #6]
   1313c:	71f9      	strb	r1, [r7, #7]
   1313e:	6878      	ldr	r0, [r7, #4]
   13140:	6118      	str	r0, [r3, #16]
   13142:	2100      	movs	r1, #0
   13144:	f36f 0100 	bfc	r1, #0, #1
   13148:	f36f 0141 	bfc	r1, #1, #1
   1314c:	f36f 0182 	bfc	r1, #2, #1
   13150:	f36f 01c5 	bfc	r1, #3, #3
   13154:	2302      	movs	r3, #2
   13156:	f363 1188 	bfi	r1, r3, #6, #3
   1315a:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   1315e:	f363 2152 	bfi	r1, r3, #9, #10
   13162:	f36f 41de 	bfc	r1, #19, #12
   13166:	f36f 71df 	bfc	r1, #31, #1
   1316a:	2300      	movs	r3, #0
   1316c:	487b      	ldr	r0, [pc, #492]	; (1335c <main+0xf8c>)
   1316e:	f013 fd72 	bl	26c56 <z_impl_z_log_msg_static_create>
   13172:	46a5      	mov	sp, r4
	err = bt_conn_le_create_auto(&scan_param, &conn_param);
   13174:	497d      	ldr	r1, [pc, #500]	; (1336c <main+0xf9c>)
   13176:	487e      	ldr	r0, [pc, #504]	; (13370 <main+0xfa0>)
   13178:	f007 fffa 	bl	1b170 <bt_conn_le_create_auto>
	if (err) {
   1317c:	4684      	mov	ip, r0
   1317e:	2800      	cmp	r0, #0
   13180:	d041      	beq.n	13206 <main+0xe36>
		LOG_ERR("Failed to start automatically connecting (err %d)", err);
   13182:	466c      	mov	r4, sp
   13184:	b088      	sub	sp, #32
   13186:	466b      	mov	r3, sp
   13188:	f113 0210 	adds.w	r2, r3, #16
   1318c:	d014      	beq.n	131b8 <main+0xde8>
   1318e:	210c      	movs	r1, #12
   13190:	b152      	cbz	r2, 131a8 <main+0xdd8>
   13192:	4608      	mov	r0, r1
   13194:	2904      	cmp	r1, #4
   13196:	dd03      	ble.n	131a0 <main+0xdd0>
   13198:	f8df e1d8 	ldr.w	lr, [pc, #472]	; 13374 <main+0xfa4>
   1319c:	f8c3 e014 	str.w	lr, [r3, #20]
   131a0:	2808      	cmp	r0, #8
   131a2:	dd0c      	ble.n	131be <main+0xdee>
   131a4:	f8c3 c018 	str.w	ip, [r3, #24]
   131a8:	290b      	cmp	r1, #11
   131aa:	dd2e      	ble.n	1320a <main+0xe3a>
   131ac:	f04f 0c0c 	mov.w	ip, #12
   131b0:	e007      	b.n	131c2 <main+0xdf2>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   131b2:	f06f 0c1b 	mvn.w	ip, #27
   131b6:	e7bb      	b.n	13130 <main+0xd60>
		LOG_ERR("Failed to start automatically connecting (err %d)", err);
   131b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   131bc:	e7e8      	b.n	13190 <main+0xdc0>
   131be:	f06f 0c1b 	mvn.w	ip, #27
   131c2:	b13a      	cbz	r2, 131d4 <main+0xe04>
   131c4:	2103      	movs	r1, #3
   131c6:	7139      	strb	r1, [r7, #4]
   131c8:	2100      	movs	r1, #0
   131ca:	7179      	strb	r1, [r7, #5]
   131cc:	71b9      	strb	r1, [r7, #6]
   131ce:	71f9      	strb	r1, [r7, #7]
   131d0:	6878      	ldr	r0, [r7, #4]
   131d2:	6118      	str	r0, [r3, #16]
   131d4:	2100      	movs	r1, #0
   131d6:	f36f 0100 	bfc	r1, #0, #1
   131da:	f36f 0141 	bfc	r1, #1, #1
   131de:	f36f 0182 	bfc	r1, #2, #1
   131e2:	f36f 01c5 	bfc	r1, #3, #3
   131e6:	2301      	movs	r3, #1
   131e8:	f363 1188 	bfi	r1, r3, #6, #3
   131ec:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   131f0:	f363 2152 	bfi	r1, r3, #9, #10
   131f4:	f36f 41de 	bfc	r1, #19, #12
   131f8:	f36f 71df 	bfc	r1, #31, #1
   131fc:	2300      	movs	r3, #0
   131fe:	4857      	ldr	r0, [pc, #348]	; (1335c <main+0xf8c>)
   13200:	f013 fd29 	bl	26c56 <z_impl_z_log_msg_static_create>
   13204:	46a5      	mov	sp, r4
   13206:	462c      	mov	r4, r5
   13208:	e0d3      	b.n	133b2 <main+0xfe2>
   1320a:	f06f 0c1b 	mvn.w	ip, #27
   1320e:	e7d8      	b.n	131c2 <main+0xdf2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13210:	f3bf 8f5b 	dmb	ish
   13214:	4b58      	ldr	r3, [pc, #352]	; (13378 <main+0xfa8>)
   13216:	681b      	ldr	r3, [r3, #0]
   13218:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(flags, IFL_CONNECTED_FLAG) && !atomic_test_bit(flags, IFL_SUBSCRIBED_FLAG)) // if connected and not subscribed, we need to subscribe
   1321c:	f013 0f01 	tst.w	r3, #1
   13220:	f000 80d1 	beq.w	133c6 <main+0xff6>
   13224:	f3bf 8f5b 	dmb	ish
   13228:	4b53      	ldr	r3, [pc, #332]	; (13378 <main+0xfa8>)
   1322a:	681b      	ldr	r3, [r3, #0]
   1322c:	f3bf 8f5b 	dmb	ish
   13230:	f413 6f80 	tst.w	r3, #1024	; 0x400
   13234:	f040 80c7 	bne.w	133c6 <main+0xff6>
				LOG_INF("main: Attempting to subscribe to IFL temp");
   13238:	4b50      	ldr	r3, [pc, #320]	; (1337c <main+0xfac>)
   1323a:	657b      	str	r3, [r7, #84]	; 0x54
   1323c:	2302      	movs	r3, #2
   1323e:	713b      	strb	r3, [r7, #4]
   13240:	2300      	movs	r3, #0
   13242:	717b      	strb	r3, [r7, #5]
   13244:	71bb      	strb	r3, [r7, #6]
   13246:	71fb      	strb	r3, [r7, #7]
   13248:	687a      	ldr	r2, [r7, #4]
   1324a:	653a      	str	r2, [r7, #80]	; 0x50
   1324c:	f363 0600 	bfi	r6, r3, #0, #1
   13250:	f363 0641 	bfi	r6, r3, #1, #1
   13254:	f363 0682 	bfi	r6, r3, #2, #1
   13258:	f363 06c5 	bfi	r6, r3, #3, #3
   1325c:	2203      	movs	r2, #3
   1325e:	f362 1688 	bfi	r6, r2, #6, #3
   13262:	2208      	movs	r2, #8
   13264:	f362 2652 	bfi	r6, r2, #9, #10
   13268:	f363 46de 	bfi	r6, r3, #19, #12
   1326c:	f363 76df 	bfi	r6, r3, #31, #1
   13270:	f107 0250 	add.w	r2, r7, #80	; 0x50
   13274:	4631      	mov	r1, r6
   13276:	4839      	ldr	r0, [pc, #228]	; (1335c <main+0xf8c>)
   13278:	f013 fced 	bl	26c56 <z_impl_z_log_msg_static_create>
				IFL_subscribe_params.value = BT_GATT_CCC_NOTIFY;	// this gets changed to 0 by the BT stack after an unsubscription event, need to set it back
   1327c:	f8df b100 	ldr.w	fp, [pc, #256]	; 13380 <main+0xfb0>
   13280:	2301      	movs	r3, #1
   13282:	f8ab 3010 	strh.w	r3, [fp, #16]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13286:	4b3c      	ldr	r3, [pc, #240]	; (13378 <main+0xfa8>)
   13288:	f3bf 8f5b 	dmb	ish
   1328c:	e853 1f00 	ldrex	r1, [r3]
   13290:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
   13294:	e843 1200 	strex	r2, r1, [r3]
   13298:	2a00      	cmp	r2, #0
   1329a:	d1f7      	bne.n	1328c <main+0xebc>
   1329c:	f3bf 8f5b 	dmb	ish
				conn = bt_conn_lookup_addr_le(bt_identity, &IFL_bt_addr);
   132a0:	4938      	ldr	r1, [pc, #224]	; (13384 <main+0xfb4>)
   132a2:	fa5f f089 	uxtb.w	r0, r9
   132a6:	f007 ff07 	bl	1b0b8 <bt_conn_lookup_addr_le>
   132aa:	4682      	mov	sl, r0
				err = bt_gatt_subscribe(conn, &IFL_subscribe_params);
   132ac:	4659      	mov	r1, fp
   132ae:	f016 fb24 	bl	298fa <bt_gatt_subscribe>
				if (err) {
   132b2:	4684      	mov	ip, r0
   132b4:	2800      	cmp	r0, #0
   132b6:	d04a      	beq.n	1334e <main+0xf7e>
					LOG_WRN("main: Failed to subscribe to IFL temp (err %d)", err);
   132b8:	46eb      	mov	fp, sp
   132ba:	b088      	sub	sp, #32
   132bc:	466b      	mov	r3, sp
   132be:	f113 0210 	adds.w	r2, r3, #16
   132c2:	d010      	beq.n	132e6 <main+0xf16>
   132c4:	210c      	movs	r1, #12
   132c6:	b152      	cbz	r2, 132de <main+0xf0e>
   132c8:	4608      	mov	r0, r1
   132ca:	2904      	cmp	r1, #4
   132cc:	dd03      	ble.n	132d6 <main+0xf06>
   132ce:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 13388 <main+0xfb8>
   132d2:	f8c3 e014 	str.w	lr, [r3, #20]
   132d6:	2808      	cmp	r0, #8
   132d8:	dd08      	ble.n	132ec <main+0xf1c>
   132da:	f8c3 c018 	str.w	ip, [r3, #24]
   132de:	290b      	cmp	r1, #11
   132e0:	dd39      	ble.n	13356 <main+0xf86>
   132e2:	210c      	movs	r1, #12
   132e4:	e004      	b.n	132f0 <main+0xf20>
   132e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   132ea:	e7ec      	b.n	132c6 <main+0xef6>
   132ec:	f06f 011b 	mvn.w	r1, #27
   132f0:	b13a      	cbz	r2, 13302 <main+0xf32>
   132f2:	2003      	movs	r0, #3
   132f4:	7138      	strb	r0, [r7, #4]
   132f6:	2000      	movs	r0, #0
   132f8:	7178      	strb	r0, [r7, #5]
   132fa:	71b8      	strb	r0, [r7, #6]
   132fc:	71f8      	strb	r0, [r7, #7]
   132fe:	6878      	ldr	r0, [r7, #4]
   13300:	6118      	str	r0, [r3, #16]
   13302:	f36f 0800 	bfc	r8, #0, #1
   13306:	f36f 0841 	bfc	r8, #1, #1
   1330a:	f36f 0882 	bfc	r8, #2, #1
   1330e:	f36f 08c5 	bfc	r8, #3, #3
   13312:	2302      	movs	r3, #2
   13314:	f363 1888 	bfi	r8, r3, #6, #3
   13318:	f401 737b 	and.w	r3, r1, #1004	; 0x3ec
   1331c:	f363 2852 	bfi	r8, r3, #9, #10
   13320:	f36f 48de 	bfc	r8, #19, #12
   13324:	f36f 78df 	bfc	r8, #31, #1
   13328:	2300      	movs	r3, #0
   1332a:	4641      	mov	r1, r8
   1332c:	480b      	ldr	r0, [pc, #44]	; (1335c <main+0xf8c>)
   1332e:	f013 fc92 	bl	26c56 <z_impl_z_log_msg_static_create>
   13332:	46dd      	mov	sp, fp
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13334:	4b10      	ldr	r3, [pc, #64]	; (13378 <main+0xfa8>)
   13336:	f3bf 8f5b 	dmb	ish
   1333a:	e853 1f00 	ldrex	r1, [r3]
   1333e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
   13342:	e843 1200 	strex	r2, r1, [r3]
   13346:	2a00      	cmp	r2, #0
   13348:	d1f7      	bne.n	1333a <main+0xf6a>
   1334a:	f3bf 8f5b 	dmb	ish
				bt_conn_unref(conn);
   1334e:	4650      	mov	r0, sl
   13350:	f014 fcfe 	bl	27d50 <bt_conn_unref>
   13354:	e037      	b.n	133c6 <main+0xff6>
					LOG_WRN("main: Failed to subscribe to IFL temp (err %d)", err);
   13356:	f06f 011b 	mvn.w	r1, #27
   1335a:	e7c9      	b.n	132f0 <main+0xf20>
   1335c:	0002d174 	.word	0x0002d174
   13360:	200079a0 	.word	0x200079a0
   13364:	0002d948 	.word	0x0002d948
   13368:	20007998 	.word	0x20007998
   1336c:	20000694 	.word	0x20000694
   13370:	20000684 	.word	0x20000684
   13374:	0002d6a8 	.word	0x0002d6a8
   13378:	200079d8 	.word	0x200079d8
   1337c:	0002d980 	.word	0x0002d980
   13380:	20000648 	.word	0x20000648
   13384:	200079d0 	.word	0x200079d0
   13388:	0002d9ac 	.word	0x0002d9ac
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1338c:	f3bf 8f5b 	dmb	ish
   13390:	4b1c      	ldr	r3, [pc, #112]	; (13404 <main+0x1034>)
   13392:	681b      	ldr	r3, [r3, #0]
   13394:	f3bf 8f5b 	dmb	ish
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   13398:	f3c3 2340 	ubfx	r3, r3, #9, #1
			TTPMS_status.data[0] = (atomic_test_bit(flags, TEMP_ENABLED_FLAG) && (atomic_test_bit(flags, PRESSURE_ENABLED_FLAG) << 1));
   1339c:	005a      	lsls	r2, r3, #1
   1339e:	b32b      	cbz	r3, 133ec <main+0x101c>
   133a0:	2201      	movs	r2, #1
   133a2:	e023      	b.n	133ec <main+0x101c>
			TTPMS_status.data[1] = (atomic_get(flags) && 0xFF);
   133a4:	462a      	mov	r2, r5
   133a6:	4b18      	ldr	r3, [pc, #96]	; (13408 <main+0x1038>)
   133a8:	725a      	strb	r2, [r3, #9]
			k_work_submit(&status_CAN_tx_work);
   133aa:	4818      	ldr	r0, [pc, #96]	; (1340c <main+0x103c>)
   133ac:	f010 ffb6 	bl	2431c <k_work_submit>
			counter = 0;
   133b0:	462c      	mov	r4, r5
   133b2:	f3bf 8f5b 	dmb	ish
   133b6:	4b13      	ldr	r3, [pc, #76]	; (13404 <main+0x1034>)
   133b8:	681b      	ldr	r3, [r3, #0]
   133ba:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(flags, TEMP_ENABLED_FLAG))	{ // if temp is enabled, make sure we are subscribed to all connected sensors
   133be:	f413 7f80 	tst.w	r3, #256	; 0x100
   133c2:	f47f af25 	bne.w	13210 <main+0xe40>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
   133c6:	f640 40cd 	movw	r0, #3277	; 0xccd
   133ca:	2100      	movs	r1, #0
   133cc:	f011 fb80 	bl	24ad0 <z_impl_k_sleep>
		counter++;
   133d0:	3401      	adds	r4, #1
		if (counter >= 5) {		// send out TTPMS status message to dash every 500ms
   133d2:	2c04      	cmp	r4, #4
   133d4:	dded      	ble.n	133b2 <main+0xfe2>
   133d6:	f3bf 8f5b 	dmb	ish
   133da:	4b0a      	ldr	r3, [pc, #40]	; (13404 <main+0x1034>)
   133dc:	681b      	ldr	r3, [r3, #0]
   133de:	f3bf 8f5b 	dmb	ish
   133e2:	f3c3 2200 	ubfx	r2, r3, #8, #1
			TTPMS_status.data[0] = (atomic_test_bit(flags, TEMP_ENABLED_FLAG) && (atomic_test_bit(flags, PRESSURE_ENABLED_FLAG) << 1));
   133e6:	f413 7f80 	tst.w	r3, #256	; 0x100
   133ea:	d1cf      	bne.n	1338c <main+0xfbc>
   133ec:	4b06      	ldr	r3, [pc, #24]	; (13408 <main+0x1038>)
   133ee:	721a      	strb	r2, [r3, #8]
   133f0:	f3bf 8f5b 	dmb	ish
   133f4:	4b03      	ldr	r3, [pc, #12]	; (13404 <main+0x1034>)
   133f6:	681b      	ldr	r3, [r3, #0]
   133f8:	f3bf 8f5b 	dmb	ish
			TTPMS_status.data[1] = (atomic_get(flags) && 0xFF);
   133fc:	2b00      	cmp	r3, #0
   133fe:	d0d1      	beq.n	133a4 <main+0xfd4>
   13400:	2201      	movs	r2, #1
   13402:	e7d0      	b.n	133a6 <main+0xfd6>
   13404:	200079d8 	.word	0x200079d8
   13408:	200006bc 	.word	0x200006bc
   1340c:	20000674 	.word	0x20000674

00013410 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   13410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13414:	b091      	sub	sp, #68	; 0x44
   13416:	9205      	str	r2, [sp, #20]
   13418:	9302      	str	r3, [sp, #8]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   1341a:	4613      	mov	r3, r2
   1341c:	f002 0204 	and.w	r2, r2, #4
   13420:	9200      	str	r2, [sp, #0]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   13422:	f3c3 02c2 	ubfx	r2, r3, #3, #3
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   13426:	f010 0303 	ands.w	r3, r0, #3
   1342a:	9301      	str	r3, [sp, #4]
   1342c:	f040 8223 	bne.w	13876 <cbvprintf_package+0x466>
   13430:	4607      	mov	r7, r0
   13432:	468a      	mov	sl, r1
   13434:	3201      	adds	r2, #1
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   13436:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   13438:	2800      	cmp	r0, #0
   1343a:	d047      	beq.n	134cc <cbvprintf_package+0xbc>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   1343c:	b127      	cbz	r7, 13448 <cbvprintf_package+0x38>
   1343e:	1be3      	subs	r3, r4, r7
   13440:	3304      	adds	r3, #4
   13442:	4553      	cmp	r3, sl
   13444:	f200 821a 	bhi.w	1387c <cbvprintf_package+0x46c>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
   13448:	9b02      	ldr	r3, [sp, #8]
   1344a:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   1344c:	9b01      	ldr	r3, [sp, #4]
   1344e:	9304      	str	r3, [sp, #16]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   13450:	9306      	str	r3, [sp, #24]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   13452:	9303      	str	r3, [sp, #12]
	bool parsing = false;
   13454:	2600      	movs	r6, #0
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   13456:	f04f 3bff 	mov.w	fp, #4294967295
	align = VA_STACK_ALIGN(char *);
   1345a:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
   1345e:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
   13460:	b10f      	cbz	r7, 13466 <cbvprintf_package+0x56>
				*(const char **)buf = s;
   13462:	9b02      	ldr	r3, [sp, #8]
   13464:	6023      	str	r3, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   13466:	1e53      	subs	r3, r2, #1
   13468:	9307      	str	r3, [sp, #28]
   1346a:	2a00      	cmp	r2, #0
   1346c:	f340 815f 	ble.w	1372e <cbvprintf_package+0x31e>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
   13470:	9b05      	ldr	r3, [sp, #20]
   13472:	f013 0202 	ands.w	r2, r3, #2
   13476:	d026      	beq.n	134c6 <cbvprintf_package+0xb6>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   13478:	2001      	movs	r0, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   1347a:	1be1      	subs	r1, r4, r7
   1347c:	088b      	lsrs	r3, r1, #2
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   1347e:	b11a      	cbz	r2, 13488 <cbvprintf_package+0x78>
   13480:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   13484:	f080 8200 	bcs.w	13888 <cbvprintf_package+0x478>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   13488:	9903      	ldr	r1, [sp, #12]
   1348a:	290f      	cmp	r1, #15
   1348c:	f200 81ff 	bhi.w	1388e <cbvprintf_package+0x47e>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
   13490:	2f00      	cmp	r7, #0
   13492:	f000 8164 	beq.w	1375e <cbvprintf_package+0x34e>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
   13496:	b2db      	uxtb	r3, r3
   13498:	f101 0240 	add.w	r2, r1, #64	; 0x40
   1349c:	446a      	add	r2, sp
   1349e:	f802 3c10 	strb.w	r3, [r2, #-16]
					str_ptr_arg[s_idx] = arg_idx;
   134a2:	f802 bc20 	strb.w	fp, [r2, #-32]
					if (is_ro) {
   134a6:	2800      	cmp	r0, #0
   134a8:	f000 8155 	beq.w	13756 <cbvprintf_package+0x346>
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   134ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
   134b0:	f101 0240 	add.w	r2, r1, #64	; 0x40
   134b4:	446a      	add	r2, sp
   134b6:	f802 3c10 	strb.w	r3, [r2, #-16]
						s_ro_cnt++;
   134ba:	9b04      	ldr	r3, [sp, #16]
   134bc:	3301      	adds	r3, #1
   134be:	9304      	str	r3, [sp, #16]
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
   134c0:	9b03      	ldr	r3, [sp, #12]
   134c2:	3301      	adds	r3, #1
   134c4:	9303      	str	r3, [sp, #12]
			}
			buf += sizeof(char *);
   134c6:	3404      	adds	r4, #4

			is_str_arg = false;
   134c8:	2200      	movs	r2, #0
   134ca:	e03d      	b.n	13548 <cbvprintf_package+0x138>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   134cc:	f001 0a07 	and.w	sl, r1, #7
   134d0:	4454      	add	r4, sl
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   134d2:	f1ca 0a08 	rsb	sl, sl, #8
   134d6:	e7b1      	b.n	1343c <cbvprintf_package+0x2c>
				parsing = false;
   134d8:	2600      	movs	r6, #0
   134da:	e034      	b.n	13546 <cbvprintf_package+0x136>
   134dc:	2600      	movs	r6, #0
   134de:	e032      	b.n	13546 <cbvprintf_package+0x136>
   134e0:	2600      	movs	r6, #0
   134e2:	e030      	b.n	13546 <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(intmax_t);
   134e4:	f04f 0808 	mov.w	r8, #8
				size = sizeof(intmax_t);
   134e8:	46c1      	mov	r9, r8
   134ea:	e02c      	b.n	13546 <cbvprintf_package+0x136>
				if (*fmt == '%') {
   134ec:	2925      	cmp	r1, #37	; 0x25
   134ee:	d12a      	bne.n	13546 <cbvprintf_package+0x136>
					arg_idx++;
   134f0:	f10b 0b01 	add.w	fp, fp, #1
					parsing = true;
   134f4:	2601      	movs	r6, #1
					align = VA_STACK_ALIGN(int);
   134f6:	f04f 0804 	mov.w	r8, #4
					size = sizeof(int);
   134fa:	46c1      	mov	r9, r8
				continue;
   134fc:	e023      	b.n	13546 <cbvprintf_package+0x136>
			switch (*fmt) {
   134fe:	2947      	cmp	r1, #71	; 0x47
   13500:	d8ec      	bhi.n	134dc <cbvprintf_package+0xcc>
   13502:	292a      	cmp	r1, #42	; 0x2a
   13504:	d312      	bcc.n	1352c <cbvprintf_package+0x11c>
   13506:	392a      	subs	r1, #42	; 0x2a
   13508:	b2c9      	uxtb	r1, r1
   1350a:	2001      	movs	r0, #1
   1350c:	fa00 f101 	lsl.w	r1, r0, r1
   13510:	f64f 70da 	movw	r0, #65498	; 0xffda
   13514:	4201      	tst	r1, r0
   13516:	d116      	bne.n	13546 <cbvprintf_package+0x136>
   13518:	f011 5f62 	tst.w	r1, #947912704	; 0x38800000
   1351c:	f040 80c4 	bne.w	136a8 <cbvprintf_package+0x298>
   13520:	f011 0f01 	tst.w	r1, #1
   13524:	f040 808e 	bne.w	13644 <cbvprintf_package+0x234>
				parsing = false;
   13528:	2600      	movs	r6, #0
   1352a:	e00c      	b.n	13546 <cbvprintf_package+0x136>
			switch (*fmt) {
   1352c:	2925      	cmp	r1, #37	; 0x25
   1352e:	d103      	bne.n	13538 <cbvprintf_package+0x128>
				arg_idx--;
   13530:	f10b 3bff 	add.w	fp, fp, #4294967295
				parsing = false;
   13534:	2600      	movs	r6, #0
				continue;
   13536:	e006      	b.n	13546 <cbvprintf_package+0x136>
			switch (*fmt) {
   13538:	d901      	bls.n	1353e <cbvprintf_package+0x12e>
				parsing = false;
   1353a:	2600      	movs	r6, #0
   1353c:	e003      	b.n	13546 <cbvprintf_package+0x136>
			switch (*fmt) {
   1353e:	2920      	cmp	r1, #32
   13540:	d001      	beq.n	13546 <cbvprintf_package+0x136>
   13542:	2923      	cmp	r1, #35	; 0x23
   13544:	d1cc      	bne.n	134e0 <cbvprintf_package+0xd0>
				parsing = false;
   13546:	461d      	mov	r5, r3
			if (*++fmt == '\0') {
   13548:	1c6b      	adds	r3, r5, #1
   1354a:	7869      	ldrb	r1, [r5, #1]
   1354c:	2900      	cmp	r1, #0
   1354e:	f000 811d 	beq.w	1378c <cbvprintf_package+0x37c>
			if (!parsing) {
   13552:	2e00      	cmp	r6, #0
   13554:	d0ca      	beq.n	134ec <cbvprintf_package+0xdc>
			switch (*fmt) {
   13556:	297a      	cmp	r1, #122	; 0x7a
   13558:	d8be      	bhi.n	134d8 <cbvprintf_package+0xc8>
   1355a:	294c      	cmp	r1, #76	; 0x4c
   1355c:	d3cf      	bcc.n	134fe <cbvprintf_package+0xee>
   1355e:	394c      	subs	r1, #76	; 0x4c
   13560:	292e      	cmp	r1, #46	; 0x2e
   13562:	d861      	bhi.n	13628 <cbvprintf_package+0x218>
   13564:	a001      	add	r0, pc, #4	; (adr r0, 1356c <cbvprintf_package+0x15c>)
   13566:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   1356a:	bf00      	nop
   1356c:	00013547 	.word	0x00013547
   13570:	00013629 	.word	0x00013629
   13574:	00013629 	.word	0x00013629
   13578:	00013629 	.word	0x00013629
   1357c:	00013629 	.word	0x00013629
   13580:	00013629 	.word	0x00013629
   13584:	00013629 	.word	0x00013629
   13588:	00013629 	.word	0x00013629
   1358c:	00013629 	.word	0x00013629
   13590:	00013629 	.word	0x00013629
   13594:	00013629 	.word	0x00013629
   13598:	00013629 	.word	0x00013629
   1359c:	0001363d 	.word	0x0001363d
   135a0:	00013629 	.word	0x00013629
   135a4:	00013629 	.word	0x00013629
   135a8:	00013629 	.word	0x00013629
   135ac:	00013629 	.word	0x00013629
   135b0:	00013629 	.word	0x00013629
   135b4:	00013629 	.word	0x00013629
   135b8:	00013629 	.word	0x00013629
   135bc:	00013629 	.word	0x00013629
   135c0:	000136a9 	.word	0x000136a9
   135c4:	00013629 	.word	0x00013629
   135c8:	0001363d 	.word	0x0001363d
   135cc:	0001363d 	.word	0x0001363d
   135d0:	000136a9 	.word	0x000136a9
   135d4:	000136a9 	.word	0x000136a9
   135d8:	000136a9 	.word	0x000136a9
   135dc:	00013547 	.word	0x00013547
   135e0:	0001363d 	.word	0x0001363d
   135e4:	000134e5 	.word	0x000134e5
   135e8:	00013629 	.word	0x00013629
   135ec:	00013547 	.word	0x00013547
   135f0:	00013629 	.word	0x00013629
   135f4:	00013707 	.word	0x00013707
   135f8:	0001363d 	.word	0x0001363d
   135fc:	00013707 	.word	0x00013707
   13600:	00013629 	.word	0x00013629
   13604:	00013629 	.word	0x00013629
   13608:	00013711 	.word	0x00013711
   1360c:	00013635 	.word	0x00013635
   13610:	0001363d 	.word	0x0001363d
   13614:	00013629 	.word	0x00013629
   13618:	00013629 	.word	0x00013629
   1361c:	0001363d 	.word	0x0001363d
   13620:	00013629 	.word	0x00013629
   13624:	0001362d 	.word	0x0001362d
				parsing = false;
   13628:	2600      	movs	r6, #0
   1362a:	e78c      	b.n	13546 <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(size_t);
   1362c:	f04f 0804 	mov.w	r8, #4
				size = sizeof(size_t);
   13630:	46c1      	mov	r9, r8
				continue;
   13632:	e788      	b.n	13546 <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(ptrdiff_t);
   13634:	f04f 0804 	mov.w	r8, #4
				size = sizeof(ptrdiff_t);
   13638:	46c1      	mov	r9, r8
				continue;
   1363a:	e784      	b.n	13546 <cbvprintf_package+0x136>
				if (fmt[-1] == 'l') {
   1363c:	7829      	ldrb	r1, [r5, #0]
   1363e:	296c      	cmp	r1, #108	; 0x6c
   13640:	d024      	beq.n	1368c <cbvprintf_package+0x27c>
				parsing = false;
   13642:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
   13644:	4444      	add	r4, r8
   13646:	3c01      	subs	r4, #1
   13648:	f1c8 0100 	rsb	r1, r8, #0
   1364c:	400c      	ands	r4, r1
   1364e:	4620      	mov	r0, r4
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   13650:	b127      	cbz	r7, 1365c <cbvprintf_package+0x24c>
   13652:	1be1      	subs	r1, r4, r7
   13654:	4449      	add	r1, r9
   13656:	4551      	cmp	r1, sl
   13658:	f200 8113 	bhi.w	13882 <cbvprintf_package+0x472>
		if (is_str_arg) {
   1365c:	2a00      	cmp	r2, #0
   1365e:	d15d      	bne.n	1371c <cbvprintf_package+0x30c>
		} else if (size == sizeof(int)) {
   13660:	f1b9 0f04 	cmp.w	r9, #4
   13664:	f000 808a 	beq.w	1377c <cbvprintf_package+0x36c>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
   13668:	f1b9 0f08 	cmp.w	r9, #8
   1366c:	f040 8112 	bne.w	13894 <cbvprintf_package+0x484>
			long long v = va_arg(ap, long long);
   13670:	991a      	ldr	r1, [sp, #104]	; 0x68
   13672:	3107      	adds	r1, #7
   13674:	f021 0107 	bic.w	r1, r1, #7
   13678:	f101 0008 	add.w	r0, r1, #8
   1367c:	901a      	str	r0, [sp, #104]	; 0x68
   1367e:	e9d1 0100 	ldrd	r0, r1, [r1]

			if (buf0 != NULL) {
   13682:	b10f      	cbz	r7, 13688 <cbvprintf_package+0x278>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
   13684:	e9c4 0100 	strd	r0, r1, [r4]
				}
			}
			buf += sizeof(long long);
   13688:	3408      	adds	r4, #8
   1368a:	e75c      	b.n	13546 <cbvprintf_package+0x136>
					if (fmt[-2] == 'l') {
   1368c:	f813 1c02 	ldrb.w	r1, [r3, #-2]
   13690:	296c      	cmp	r1, #108	; 0x6c
   13692:	d004      	beq.n	1369e <cbvprintf_package+0x28e>
				parsing = false;
   13694:	2600      	movs	r6, #0
						align = VA_STACK_ALIGN(long);
   13696:	f04f 0804 	mov.w	r8, #4
						size = sizeof(long);
   1369a:	46c1      	mov	r9, r8
   1369c:	e7d2      	b.n	13644 <cbvprintf_package+0x234>
				parsing = false;
   1369e:	2600      	movs	r6, #0
						align = VA_STACK_ALIGN(long long);
   136a0:	f04f 0808 	mov.w	r8, #8
						size = sizeof(long long);
   136a4:	46c1      	mov	r9, r8
   136a6:	e7cd      	b.n	13644 <cbvprintf_package+0x234>
				if (fmt[-1] == 'L') {
   136a8:	7829      	ldrb	r1, [r5, #0]
   136aa:	294c      	cmp	r1, #76	; 0x4c
   136ac:	d01b      	beq.n	136e6 <cbvprintf_package+0x2d6>
					v.d = va_arg(ap, double);
   136ae:	991a      	ldr	r1, [sp, #104]	; 0x68
   136b0:	3107      	adds	r1, #7
   136b2:	f021 0107 	bic.w	r1, r1, #7
   136b6:	f101 0008 	add.w	r0, r1, #8
   136ba:	901a      	str	r0, [sp, #104]	; 0x68
   136bc:	e9d1 0100 	ldrd	r0, r1, [r1]
				buf = (void *) ROUND_UP(buf, align);
   136c0:	3407      	adds	r4, #7
   136c2:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
   136c6:	b147      	cbz	r7, 136da <cbvprintf_package+0x2ca>
					if (BUF_OFFSET + size > len) {
   136c8:	1be6      	subs	r6, r4, r7
   136ca:	3608      	adds	r6, #8
   136cc:	4556      	cmp	r6, sl
   136ce:	d814      	bhi.n	136fa <cbvprintf_package+0x2ea>
					} else if (fmt[-1] == 'L') {
   136d0:	782d      	ldrb	r5, [r5, #0]
   136d2:	2d4c      	cmp	r5, #76	; 0x4c
   136d4:	d014      	beq.n	13700 <cbvprintf_package+0x2f0>
						*(double *)buf = v.d;
   136d6:	e9c4 0100 	strd	r0, r1, [r4]
				buf += size;
   136da:	3408      	adds	r4, #8
				parsing = false;
   136dc:	2600      	movs	r6, #0
				continue;
   136de:	f04f 0808 	mov.w	r8, #8
   136e2:	46c1      	mov	r9, r8
   136e4:	e72f      	b.n	13546 <cbvprintf_package+0x136>
					v.ld = va_arg(ap, long double);
   136e6:	991a      	ldr	r1, [sp, #104]	; 0x68
   136e8:	3107      	adds	r1, #7
   136ea:	f021 0107 	bic.w	r1, r1, #7
   136ee:	f101 0008 	add.w	r0, r1, #8
   136f2:	901a      	str	r0, [sp, #104]	; 0x68
   136f4:	e9d1 0100 	ldrd	r0, r1, [r1]
					size = sizeof(long double);
   136f8:	e7e2      	b.n	136c0 <cbvprintf_package+0x2b0>
						return -ENOSPC;
   136fa:	f06f 001b 	mvn.w	r0, #27
   136fe:	e0b7      	b.n	13870 <cbvprintf_package+0x460>
						*(long double *)buf = v.ld;
   13700:	e9c4 0100 	strd	r0, r1, [r4]
   13704:	e7e9      	b.n	136da <cbvprintf_package+0x2ca>
				parsing = false;
   13706:	2600      	movs	r6, #0
				align = VA_STACK_ALIGN(void *);
   13708:	f04f 0804 	mov.w	r8, #4
				size = sizeof(void *);
   1370c:	46c1      	mov	r9, r8
   1370e:	e799      	b.n	13644 <cbvprintf_package+0x234>
				is_str_arg = true;
   13710:	4632      	mov	r2, r6
				parsing = false;
   13712:	2600      	movs	r6, #0
				align = VA_STACK_ALIGN(void *);
   13714:	f04f 0804 	mov.w	r8, #4
				size = sizeof(void *);
   13718:	46c1      	mov	r9, r8
   1371a:	e793      	b.n	13644 <cbvprintf_package+0x234>
			s = va_arg(ap, char *);
   1371c:	4604      	mov	r4, r0
   1371e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   13720:	1d11      	adds	r1, r2, #4
   13722:	911a      	str	r1, [sp, #104]	; 0x68
   13724:	6812      	ldr	r2, [r2, #0]
   13726:	9202      	str	r2, [sp, #8]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   13728:	9a07      	ldr	r2, [sp, #28]
			if (*++fmt == '\0') {
   1372a:	461d      	mov	r5, r3
   1372c:	e698      	b.n	13460 <cbvprintf_package+0x50>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   1372e:	4b5f      	ldr	r3, [pc, #380]	; (138ac <cbvprintf_package+0x49c>)
   13730:	9a02      	ldr	r2, [sp, #8]
   13732:	429a      	cmp	r2, r3
   13734:	d304      	bcc.n	13740 <cbvprintf_package+0x330>
   13736:	4b5e      	ldr	r3, [pc, #376]	; (138b0 <cbvprintf_package+0x4a0>)
   13738:	429a      	cmp	r2, r3
   1373a:	d30a      	bcc.n	13752 <cbvprintf_package+0x342>
   1373c:	2300      	movs	r3, #0
   1373e:	e000      	b.n	13742 <cbvprintf_package+0x332>
   13740:	2300      	movs	r3, #0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   13742:	2b00      	cmp	r3, #0
   13744:	f47f ae94 	bne.w	13470 <cbvprintf_package+0x60>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
   13748:	9b05      	ldr	r3, [sp, #20]
   1374a:	f003 0202 	and.w	r2, r3, #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   1374e:	2000      	movs	r0, #0
   13750:	e693      	b.n	1347a <cbvprintf_package+0x6a>
   13752:	2301      	movs	r3, #1
   13754:	e7f5      	b.n	13742 <cbvprintf_package+0x332>
						s_rw_cnt++;
   13756:	9b06      	ldr	r3, [sp, #24]
   13758:	3301      	adds	r3, #1
   1375a:	9306      	str	r3, [sp, #24]
   1375c:	e6b0      	b.n	134c0 <cbvprintf_package+0xb0>
				} else if (is_ro) {
   1375e:	b110      	cbz	r0, 13766 <cbvprintf_package+0x356>
					len += 1;
   13760:	f10a 0a01 	add.w	sl, sl, #1
   13764:	e6ac      	b.n	134c0 <cbvprintf_package+0xb0>
				} else if (rws_pos_en) {
   13766:	9b00      	ldr	r3, [sp, #0]
   13768:	b113      	cbz	r3, 13770 <cbvprintf_package+0x360>
					len += 2;
   1376a:	f10a 0a02 	add.w	sl, sl, #2
   1376e:	e6a7      	b.n	134c0 <cbvprintf_package+0xb0>
					len += strlen(s) + 1 + 1;
   13770:	9802      	ldr	r0, [sp, #8]
   13772:	f013 fe7b 	bl	2746c <strlen>
   13776:	1c83      	adds	r3, r0, #2
   13778:	449a      	add	sl, r3
   1377a:	e6a1      	b.n	134c0 <cbvprintf_package+0xb0>
			int v = va_arg(ap, int);
   1377c:	991a      	ldr	r1, [sp, #104]	; 0x68
   1377e:	1d08      	adds	r0, r1, #4
   13780:	901a      	str	r0, [sp, #104]	; 0x68
   13782:	6809      	ldr	r1, [r1, #0]
			if (buf0 != NULL) {
   13784:	b107      	cbz	r7, 13788 <cbvprintf_package+0x378>
				*(int *)buf = v;
   13786:	6021      	str	r1, [r4, #0]
			buf += sizeof(int);
   13788:	3404      	adds	r4, #4
   1378a:	e6dc      	b.n	13546 <cbvprintf_package+0x136>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
   1378c:	1be3      	subs	r3, r4, r7
   1378e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   13792:	f080 8082 	bcs.w	1389a <cbvprintf_package+0x48a>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
   13796:	b197      	cbz	r7, 137be <cbvprintf_package+0x3ae>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
   13798:	2200      	movs	r2, #0
   1379a:	603a      	str	r2, [r7, #0]

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   1379c:	089b      	lsrs	r3, r3, #2
   1379e:	703b      	strb	r3, [r7, #0]

	if (rws_pos_en) {
   137a0:	9b00      	ldr	r3, [sp, #0]
   137a2:	b183      	cbz	r3, 137c6 <cbvprintf_package+0x3b6>
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   137a4:	9b06      	ldr	r3, [sp, #24]
   137a6:	70fb      	strb	r3, [r7, #3]
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   137a8:	9b04      	ldr	r3, [sp, #16]
   137aa:	70bb      	strb	r3, [r7, #2]
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
   137ac:	bb1b      	cbnz	r3, 137f6 <cbvprintf_package+0x3e6>
			/* retrieve the string pointer */
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
			/* clear the in-buffer pointer (less entropy if compressed) */
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
   137ae:	9d01      	ldr	r5, [sp, #4]
   137b0:	f8dd 900c 	ldr.w	r9, [sp, #12]
   137b4:	f8dd b010 	ldr.w	fp, [sp, #16]
   137b8:	f8dd 8008 	ldr.w	r8, [sp, #8]
   137bc:	e03b      	b.n	13836 <cbvprintf_package+0x426>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   137be:	4453      	add	r3, sl
   137c0:	f1a3 0008 	sub.w	r0, r3, #8
   137c4:	e054      	b.n	13870 <cbvprintf_package+0x460>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   137c6:	9b06      	ldr	r3, [sp, #24]
   137c8:	707b      	strb	r3, [r7, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   137ca:	e7ed      	b.n	137a8 <cbvprintf_package+0x398>
		for (i = 0; i < s_idx; i++) {
   137cc:	3301      	adds	r3, #1
   137ce:	4298      	cmp	r0, r3
   137d0:	d9ed      	bls.n	137ae <cbvprintf_package+0x39e>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   137d2:	f103 0240 	add.w	r2, r3, #64	; 0x40
   137d6:	446a      	add	r2, sp
   137d8:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   137dc:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
   137e0:	2a00      	cmp	r2, #0
   137e2:	daf3      	bge.n	137cc <cbvprintf_package+0x3bc>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   137e4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   137e8:	1be2      	subs	r2, r4, r7
   137ea:	3201      	adds	r2, #1
   137ec:	4552      	cmp	r2, sl
   137ee:	d857      	bhi.n	138a0 <cbvprintf_package+0x490>
			*buf++ = pos;
   137f0:	f804 1b01 	strb.w	r1, [r4], #1
   137f4:	e7ea      	b.n	137cc <cbvprintf_package+0x3bc>
		for (i = 0; i < s_idx; i++) {
   137f6:	9b01      	ldr	r3, [sp, #4]
   137f8:	9803      	ldr	r0, [sp, #12]
   137fa:	e7e8      	b.n	137ce <cbvprintf_package+0x3be>
		if (rws_pos_en) {
   137fc:	9b00      	ldr	r3, [sp, #0]
   137fe:	b33b      	cbz	r3, 13850 <cbvprintf_package+0x440>
			*buf++ = str_ptr_arg[i];
   13800:	f105 0340 	add.w	r3, r5, #64	; 0x40
   13804:	446b      	add	r3, sp
   13806:	f813 3c20 	ldrb.w	r3, [r3, #-32]
   1380a:	f804 3b01 	strb.w	r3, [r4], #1
			size = 0;
   1380e:	9e01      	ldr	r6, [sp, #4]
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
   13810:	1be3      	subs	r3, r4, r7
   13812:	4433      	add	r3, r6
   13814:	3301      	adds	r3, #1
   13816:	4553      	cmp	r3, sl
   13818:	d845      	bhi.n	138a6 <cbvprintf_package+0x496>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
   1381a:	f105 0340 	add.w	r3, r5, #64	; 0x40
   1381e:	446b      	add	r3, sp
   13820:	f813 3c10 	ldrb.w	r3, [r3, #-16]
   13824:	f804 3b01 	strb.w	r3, [r4], #1
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
   13828:	4632      	mov	r2, r6
   1382a:	4641      	mov	r1, r8
   1382c:	4620      	mov	r0, r4
   1382e:	f013 fe4d 	bl	274cc <memcpy>
		buf += size;
   13832:	4434      	add	r4, r6
	for (i = 0; i < s_idx; i++) {
   13834:	3501      	adds	r5, #1
   13836:	45a9      	cmp	r9, r5
   13838:	d919      	bls.n	1386e <cbvprintf_package+0x45e>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   1383a:	f1bb 0f00 	cmp.w	fp, #0
   1383e:	d0dd      	beq.n	137fc <cbvprintf_package+0x3ec>
   13840:	f105 0340 	add.w	r3, r5, #64	; 0x40
   13844:	446b      	add	r3, sp
   13846:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
   1384a:	2b00      	cmp	r3, #0
   1384c:	dad6      	bge.n	137fc <cbvprintf_package+0x3ec>
   1384e:	e7f1      	b.n	13834 <cbvprintf_package+0x424>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   13850:	f105 0340 	add.w	r3, r5, #64	; 0x40
   13854:	446b      	add	r3, sp
   13856:	f813 3c10 	ldrb.w	r3, [r3, #-16]
   1385a:	f857 8023 	ldr.w	r8, [r7, r3, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   1385e:	2200      	movs	r2, #0
   13860:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
			size = strlen(s) + 1;
   13864:	4640      	mov	r0, r8
   13866:	f013 fe01 	bl	2746c <strlen>
   1386a:	1c46      	adds	r6, r0, #1
   1386c:	e7d0      	b.n	13810 <cbvprintf_package+0x400>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
   1386e:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   13870:	b011      	add	sp, #68	; 0x44
   13872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
   13876:	f06f 000d 	mvn.w	r0, #13
   1387a:	e7f9      	b.n	13870 <cbvprintf_package+0x460>
		return -ENOSPC;
   1387c:	f06f 001b 	mvn.w	r0, #27
   13880:	e7f6      	b.n	13870 <cbvprintf_package+0x460>
			return -ENOSPC;
   13882:	f06f 001b 	mvn.w	r0, #27
   13886:	e7f3      	b.n	13870 <cbvprintf_package+0x460>
					return -EINVAL;
   13888:	f06f 0015 	mvn.w	r0, #21
   1388c:	e7f0      	b.n	13870 <cbvprintf_package+0x460>
					return -EINVAL;
   1388e:	f06f 0015 	mvn.w	r0, #21
   13892:	e7ed      	b.n	13870 <cbvprintf_package+0x460>
			return -EINVAL;
   13894:	f06f 0015 	mvn.w	r0, #21
   13898:	e7ea      	b.n	13870 <cbvprintf_package+0x460>
		return -EINVAL;
   1389a:	f06f 0015 	mvn.w	r0, #21
   1389e:	e7e7      	b.n	13870 <cbvprintf_package+0x460>
				return -ENOSPC;
   138a0:	f06f 001b 	mvn.w	r0, #27
   138a4:	e7e4      	b.n	13870 <cbvprintf_package+0x460>
			return -ENOSPC;
   138a6:	f06f 001b 	mvn.w	r0, #27
   138aa:	e7e1      	b.n	13870 <cbvprintf_package+0x460>
   138ac:	0002cce8 	.word	0x0002cce8
   138b0:	0003010c 	.word	0x0003010c

000138b4 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
   138b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138b8:	b097      	sub	sp, #92	; 0x5c
   138ba:	af00      	add	r7, sp, #0
   138bc:	4683      	mov	fp, r0
   138be:	61ba      	str	r2, [r7, #24]
   138c0:	613b      	str	r3, [r7, #16]
	__ASSERT_NO_MSG(in_packaged != NULL);

	uint8_t *buf = in_packaged;
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
   138c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   138c6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   138ca:	623b      	str	r3, [r7, #32]
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   138cc:	60f9      	str	r1, [r7, #12]
   138ce:	b151      	cbz	r1, 138e6 <cbprintf_package_convert+0x32>

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
   138d0:	f89b 6002 	ldrb.w	r6, [fp, #2]
   138d4:	46b1      	mov	r9, r6
	ro_cpy = ros_nbr &&
   138d6:	b156      	cbz	r6, 138ee <cbprintf_package_convert+0x3a>
   138d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   138dc:	f013 0f01 	tst.w	r3, #1
   138e0:	d111      	bne.n	13906 <cbprintf_package_convert+0x52>
   138e2:	2300      	movs	r3, #0
   138e4:	e004      	b.n	138f0 <cbprintf_package_convert+0x3c>
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   138e6:	f011 fff1 	bl	258cc <get_package_len>
   138ea:	60f8      	str	r0, [r7, #12]
   138ec:	e7f0      	b.n	138d0 <cbprintf_package_convert+0x1c>
	ro_cpy = ros_nbr &&
   138ee:	2300      	movs	r3, #0
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
   138f0:	f89b 2003 	ldrb.w	r2, [fp, #3]
   138f4:	627a      	str	r2, [r7, #36]	; 0x24
	rw_cpy = rws_nbr > 0 &&
   138f6:	b142      	cbz	r2, 1390a <cbprintf_package_convert+0x56>
   138f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   138fc:	f012 0f02 	tst.w	r2, #2
   13900:	d122      	bne.n	13948 <cbprintf_package_convert+0x94>
   13902:	2200      	movs	r2, #0
   13904:	e002      	b.n	1390c <cbprintf_package_convert+0x58>
	ro_cpy = ros_nbr &&
   13906:	2301      	movs	r3, #1
   13908:	e7f2      	b.n	138f0 <cbprintf_package_convert+0x3c>
	rw_cpy = rws_nbr > 0 &&
   1390a:	2200      	movs	r2, #0

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
   1390c:	b902      	cbnz	r2, 13910 <cbprintf_package_convert+0x5c>
   1390e:	b1eb      	cbz	r3, 1394c <cbprintf_package_convert+0x98>

	/* If we got here, it means that coping will be more complex and will be
	 * done with strings appending.
	 * Retrieve the size of the arg list.
	 */
	args_size = in_desc->len * sizeof(int);
   13910:	f89b 5000 	ldrb.w	r5, [fp]
   13914:	00aa      	lsls	r2, r5, #2
   13916:	60ba      	str	r2, [r7, #8]
	int out_len;

	/* Pointer to array with string locations. Array starts with read-only
	 * string locations.
	 */
	const char *fmt = *(const char **)(buf + sizeof(void *));
   13918:	f8db 2004 	ldr.w	r2, [fp, #4]
   1391c:	617a      	str	r2, [r7, #20]
	uint8_t *str_pos = &buf[args_size];
   1391e:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
	size_t strl_cnt = 0;

	/* If null destination, just calculate output length. */
	if (cb == NULL) {
   13922:	69ba      	ldr	r2, [r7, #24]
   13924:	b1f2      	cbz	r2, 13964 <cbprintf_package_convert+0xb0>

	/* If read-only strings shall be appended to the output package copy
	 * their indexes to the local array, otherwise indicate that indexes
	 * shall remain in the output package.
	 */
	if (ro_cpy) {
   13926:	2b00      	cmp	r3, #0
   13928:	f040 8112 	bne.w	13b50 <cbprintf_package_convert+0x29c>
		scpy_cnt = ros_nbr;
		keep_cnt = 0;
		dst = cpy_str_pos;
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   1392c:	f1b9 0f00 	cmp.w	r9, #0
   13930:	f000 811d 	beq.w	13b6e <cbprintf_package_convert+0x2ba>
   13934:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   13938:	f013 0f04 	tst.w	r3, #4
   1393c:	f040 811b 	bne.w	13b76 <cbprintf_package_convert+0x2c2>
		keep_cnt = ros_nbr;
		dst = keep_str_pos;
	} else {
		scpy_cnt = 0;
		keep_cnt = 0;
		dst = NULL;
   13940:	2000      	movs	r0, #0
		keep_cnt = 0;
   13942:	61f8      	str	r0, [r7, #28]
		scpy_cnt = 0;
   13944:	4606      	mov	r6, r0
   13946:	e107      	b.n	13b58 <cbprintf_package_convert+0x2a4>
	rw_cpy = rws_nbr > 0 &&
   13948:	2201      	movs	r2, #1
   1394a:	e7df      	b.n	1390c <cbprintf_package_convert+0x58>
		if (cb) {
   1394c:	69bb      	ldr	r3, [r7, #24]
   1394e:	b11b      	cbz	r3, 13958 <cbprintf_package_convert+0xa4>
			cb(in_packaged, in_len, ctx);
   13950:	693a      	ldr	r2, [r7, #16]
   13952:	68f9      	ldr	r1, [r7, #12]
   13954:	4658      	mov	r0, fp
   13956:	4798      	blx	r3
		return in_len;
   13958:	68fc      	ldr	r4, [r7, #12]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
   1395a:	4620      	mov	r0, r4
   1395c:	375c      	adds	r7, #92	; 0x5c
   1395e:	46bd      	mov	sp, r7
   13960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_len = (int)in_len;
   13964:	68fc      	ldr	r4, [r7, #12]
		if (ro_cpy) {
   13966:	bb2b      	cbnz	r3, 139b4 <cbprintf_package_convert+0x100>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   13968:	f1b9 0f00 	cmp.w	r9, #0
   1396c:	d038      	beq.n	139e0 <cbprintf_package_convert+0x12c>
   1396e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   13972:	f013 0304 	ands.w	r3, r3, #4
   13976:	613b      	str	r3, [r7, #16]
   13978:	d027      	beq.n	139ca <cbprintf_package_convert+0x116>
				str_pos += ros_nbr;
   1397a:	444d      	add	r5, r9
	size_t strl_cnt = 0;
   1397c:	2300      	movs	r3, #0
   1397e:	613b      	str	r3, [r7, #16]
   13980:	e023      	b.n	139ca <cbprintf_package_convert+0x116>
				out_len += len;
   13982:	4404      	add	r4, r0
				str_pos++;
   13984:	3501      	adds	r5, #1
			for (int i = 0; i < ros_nbr; i++) {
   13986:	3601      	adds	r6, #1
   13988:	454e      	cmp	r6, r9
   1398a:	d21a      	bcs.n	139c2 <cbprintf_package_convert+0x10e>
				const char *str = *(const char **)&buf32[*str_pos];
   1398c:	782a      	ldrb	r2, [r5, #0]
				int len = append_string(cb, NULL, str, 0);
   1398e:	2300      	movs	r3, #0
   13990:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
   13994:	4619      	mov	r1, r3
   13996:	69b8      	ldr	r0, [r7, #24]
   13998:	f011 ffad 	bl	258f6 <append_string>
				if (strl && strl_cnt < strl_len) {
   1399c:	f1ba 0f00 	cmp.w	sl, #0
   139a0:	d0ef      	beq.n	13982 <cbprintf_package_convert+0xce>
   139a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   139a6:	4598      	cmp	r8, r3
   139a8:	d2eb      	bcs.n	13982 <cbprintf_package_convert+0xce>
					strl[strl_cnt++] = (uint16_t)len;
   139aa:	f82a 0018 	strh.w	r0, [sl, r8, lsl #1]
   139ae:	f108 0801 	add.w	r8, r8, #1
   139b2:	e7e6      	b.n	13982 <cbprintf_package_convert+0xce>
			for (int i = 0; i < ros_nbr; i++) {
   139b4:	2600      	movs	r6, #0
	size_t strl_cnt = 0;
   139b6:	46b0      	mov	r8, r6
   139b8:	f8c7 a01c 	str.w	sl, [r7, #28]
   139bc:	f8d7 a084 	ldr.w	sl, [r7, #132]	; 0x84
   139c0:	e7e2      	b.n	13988 <cbprintf_package_convert+0xd4>
   139c2:	f8c7 8010 	str.w	r8, [r7, #16]
   139c6:	f8d7 a01c 	ldr.w	sl, [r7, #28]
		bool drop_ro_str_pos = !(flags &
   139ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   139ce:	f003 0305 	and.w	r3, r3, #5
   139d2:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < rws_nbr; i++) {
   139d4:	f04f 0800 	mov.w	r8, #0
   139d8:	46a1      	mov	r9, r4
   139da:	f8c7 b01c 	str.w	fp, [r7, #28]
   139de:	e0a1      	b.n	13b24 <cbprintf_package_convert+0x270>
	size_t strl_cnt = 0;
   139e0:	f8c7 9010 	str.w	r9, [r7, #16]
   139e4:	e7f1      	b.n	139ca <cbprintf_package_convert+0x116>
   139e6:	2500      	movs	r5, #0
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   139e8:	6a3b      	ldr	r3, [r7, #32]
   139ea:	b97b      	cbnz	r3, 13a0c <cbprintf_package_convert+0x158>
			if (is_ro) {
   139ec:	2d00      	cmp	r5, #0
   139ee:	d07b      	beq.n	13ae8 <cbprintf_package_convert+0x234>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   139f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   139f4:	f013 0f01 	tst.w	r3, #1
   139f8:	d17b      	bne.n	13af2 <cbprintf_package_convert+0x23e>
					out_len -= drop_ro_str_pos ? 2 : 1;
   139fa:	68fb      	ldr	r3, [r7, #12]
   139fc:	2b00      	cmp	r3, #0
   139fe:	d171      	bne.n	13ae4 <cbprintf_package_convert+0x230>
   13a00:	2302      	movs	r3, #2
   13a02:	eba9 0903 	sub.w	r9, r9, r3
   13a06:	e08a      	b.n	13b1e <cbprintf_package_convert+0x26a>
   13a08:	2501      	movs	r5, #1
   13a0a:	e7ed      	b.n	139e8 <cbprintf_package_convert+0x134>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   13a0c:	4659      	mov	r1, fp
   13a0e:	6978      	ldr	r0, [r7, #20]
   13a10:	f011 ffb8 	bl	25984 <is_ptr>
   13a14:	2800      	cmp	r0, #0
   13a16:	d0e9      	beq.n	139ec <cbprintf_package_convert+0x138>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   13a18:	466c      	mov	r4, sp
   13a1a:	2300      	movs	r3, #0
   13a1c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
   13a20:	2302      	movs	r3, #2
   13a22:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
   13a26:	b08a      	sub	sp, #40	; 0x28
   13a28:	4669      	mov	r1, sp
   13a2a:	f111 0210 	adds.w	r2, r1, #16
   13a2e:	d039      	beq.n	13aa4 <cbprintf_package_convert+0x1f0>
   13a30:	2512      	movs	r5, #18
   13a32:	b11a      	cbz	r2, 13a3c <cbprintf_package_convert+0x188>
   13a34:	2d04      	cmp	r5, #4
   13a36:	dd01      	ble.n	13a3c <cbprintf_package_convert+0x188>
   13a38:	4bb3      	ldr	r3, [pc, #716]	; (13d08 <cbprintf_package_convert+0x454>)
   13a3a:	614b      	str	r3, [r1, #20]
   13a3c:	2300      	movs	r3, #0
   13a3e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
   13a42:	2302      	movs	r3, #2
   13a44:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
   13a48:	bb7a      	cbnz	r2, 13aaa <cbprintf_package_convert+0x1f6>
   13a4a:	2d11      	cmp	r5, #17
   13a4c:	dd47      	ble.n	13ade <cbprintf_package_convert+0x22a>
   13a4e:	2312      	movs	r3, #18
   13a50:	b162      	cbz	r2, 13a6c <cbprintf_package_convert+0x1b8>
   13a52:	2004      	movs	r0, #4
   13a54:	f887 002c 	strb.w	r0, [r7, #44]	; 0x2c
   13a58:	2000      	movs	r0, #0
   13a5a:	f887 002d 	strb.w	r0, [r7, #45]	; 0x2d
   13a5e:	f887 002e 	strb.w	r0, [r7, #46]	; 0x2e
   13a62:	2001      	movs	r0, #1
   13a64:	f887 002f 	strb.w	r0, [r7, #47]	; 0x2f
   13a68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   13a6a:	6108      	str	r0, [r1, #16]
   13a6c:	f36f 0a00 	bfc	sl, #0, #1
   13a70:	f36f 0a41 	bfc	sl, #1, #1
   13a74:	f36f 0a82 	bfc	sl, #2, #1
   13a78:	f36f 0ac5 	bfc	sl, #3, #3
   13a7c:	2102      	movs	r1, #2
   13a7e:	f361 1a88 	bfi	sl, r1, #6, #3
   13a82:	f3c3 0309 	ubfx	r3, r3, #0, #10
   13a86:	f363 2a52 	bfi	sl, r3, #9, #10
   13a8a:	f36f 4ade 	bfc	sl, #19, #12
   13a8e:	f36f 7adf 	bfc	sl, #31, #1
   13a92:	2300      	movs	r3, #0
   13a94:	4651      	mov	r1, sl
   13a96:	489d      	ldr	r0, [pc, #628]	; (13d0c <cbprintf_package_convert+0x458>)
   13a98:	f013 f8dd 	bl	26c56 <z_impl_z_log_msg_static_create>
   13a9c:	46a5      	mov	sp, r4
				out_len -= 2;
   13a9e:	f1a9 0902 	sub.w	r9, r9, #2
				continue;
   13aa2:	e03c      	b.n	13b1e <cbprintf_package_convert+0x26a>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   13aa4:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   13aa8:	e7c3      	b.n	13a32 <cbprintf_package_convert+0x17e>
   13aaa:	462b      	mov	r3, r5
   13aac:	2d08      	cmp	r5, #8
   13aae:	dd01      	ble.n	13ab4 <cbprintf_package_convert+0x200>
   13ab0:	6978      	ldr	r0, [r7, #20]
   13ab2:	6188      	str	r0, [r1, #24]
   13ab4:	2b0c      	cmp	r3, #12
   13ab6:	dd01      	ble.n	13abc <cbprintf_package_convert+0x208>
   13ab8:	f8c1 b01c 	str.w	fp, [r1, #28]
   13abc:	f101 0320 	add.w	r3, r1, #32
   13ac0:	2000      	movs	r0, #0
   13ac2:	e009      	b.n	13ad8 <cbprintf_package_convert+0x224>
   13ac4:	f100 0c30 	add.w	ip, r0, #48	; 0x30
   13ac8:	f107 0e28 	add.w	lr, r7, #40	; 0x28
   13acc:	44f4      	add	ip, lr
   13ace:	f81c cc30 	ldrb.w	ip, [ip, #-48]
   13ad2:	f803 cb01 	strb.w	ip, [r3], #1
   13ad6:	3001      	adds	r0, #1
   13ad8:	2801      	cmp	r0, #1
   13ada:	d9f3      	bls.n	13ac4 <cbprintf_package_convert+0x210>
   13adc:	e7b5      	b.n	13a4a <cbprintf_package_convert+0x196>
   13ade:	f06f 031b 	mvn.w	r3, #27
   13ae2:	e7b5      	b.n	13a50 <cbprintf_package_convert+0x19c>
					out_len -= drop_ro_str_pos ? 2 : 1;
   13ae4:	2301      	movs	r3, #1
   13ae6:	e78c      	b.n	13a02 <cbprintf_package_convert+0x14e>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   13ae8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   13aec:	f013 0f02 	tst.w	r3, #2
   13af0:	d015      	beq.n	13b1e <cbprintf_package_convert+0x26a>
				len = append_string(cb, NULL, str, 0);
   13af2:	2300      	movs	r3, #0
   13af4:	4622      	mov	r2, r4
   13af6:	4619      	mov	r1, r3
   13af8:	69b8      	ldr	r0, [r7, #24]
   13afa:	f011 fefc 	bl	258f6 <append_string>
				if (strl && strl_cnt < strl_len) {
   13afe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   13b02:	b153      	cbz	r3, 13b1a <cbprintf_package_convert+0x266>
   13b04:	693b      	ldr	r3, [r7, #16]
   13b06:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   13b0a:	4293      	cmp	r3, r2
   13b0c:	d205      	bcs.n	13b1a <cbprintf_package_convert+0x266>
					strl[strl_cnt++] = (uint16_t)len;
   13b0e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   13b12:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
   13b16:	3301      	adds	r3, #1
   13b18:	613b      	str	r3, [r7, #16]
				out_len += (len - 1);
   13b1a:	3801      	subs	r0, #1
   13b1c:	4481      	add	r9, r0
		for (int i = 0; i < rws_nbr; i++) {
   13b1e:	f108 0801 	add.w	r8, r8, #1
			uint8_t arg_pos = *str_pos++;
   13b22:	4635      	mov	r5, r6
		for (int i = 0; i < rws_nbr; i++) {
   13b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13b26:	4598      	cmp	r8, r3
   13b28:	d210      	bcs.n	13b4c <cbprintf_package_convert+0x298>
			uint8_t arg_idx = *str_pos++;
   13b2a:	462e      	mov	r6, r5
   13b2c:	f816 bb02 	ldrb.w	fp, [r6], #2
			uint8_t arg_pos = *str_pos++;
   13b30:	786b      	ldrb	r3, [r5, #1]
			const char *str = *(const char **)&buf32[arg_pos];
   13b32:	69fa      	ldr	r2, [r7, #28]
   13b34:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   13b38:	4b75      	ldr	r3, [pc, #468]	; (13d10 <cbprintf_package_convert+0x45c>)
   13b3a:	429c      	cmp	r4, r3
   13b3c:	f4ff af53 	bcc.w	139e6 <cbprintf_package_convert+0x132>
   13b40:	4b74      	ldr	r3, [pc, #464]	; (13d14 <cbprintf_package_convert+0x460>)
   13b42:	429c      	cmp	r4, r3
   13b44:	f4ff af60 	bcc.w	13a08 <cbprintf_package_convert+0x154>
   13b48:	2500      	movs	r5, #0
   13b4a:	e74d      	b.n	139e8 <cbprintf_package_convert+0x134>
   13b4c:	464c      	mov	r4, r9
   13b4e:	e704      	b.n	1395a <cbprintf_package_convert+0xa6>
		dst = cpy_str_pos;
   13b50:	f107 0044 	add.w	r0, r7, #68	; 0x44
		keep_cnt = 0;
   13b54:	2300      	movs	r3, #0
   13b56:	61fb      	str	r3, [r7, #28]
	if (dst) {
   13b58:	b118      	cbz	r0, 13b62 <cbprintf_package_convert+0x2ae>
		memcpy(dst, str_pos, ros_nbr);
   13b5a:	464a      	mov	r2, r9
   13b5c:	4629      	mov	r1, r5
   13b5e:	f013 fcb5 	bl	274cc <memcpy>
	str_pos += ros_nbr;
   13b62:	444d      	add	r5, r9
	for (int i = 0; i < rws_nbr; i++) {
   13b64:	f04f 0800 	mov.w	r8, #0
   13b68:	f8c7 9004 	str.w	r9, [r7, #4]
   13b6c:	e01e      	b.n	13bac <cbprintf_package_convert+0x2f8>
		dst = NULL;
   13b6e:	2000      	movs	r0, #0
		keep_cnt = 0;
   13b70:	61f8      	str	r0, [r7, #28]
		scpy_cnt = 0;
   13b72:	4606      	mov	r6, r0
   13b74:	e7f0      	b.n	13b58 <cbprintf_package_convert+0x2a4>
		keep_cnt = ros_nbr;
   13b76:	61fe      	str	r6, [r7, #28]
		dst = keep_str_pos;
   13b78:	f107 0034 	add.w	r0, r7, #52	; 0x34
		scpy_cnt = 0;
   13b7c:	2600      	movs	r6, #0
   13b7e:	e7eb      	b.n	13b58 <cbprintf_package_convert+0x2a4>
   13b80:	2500      	movs	r5, #0
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   13b82:	6a3b      	ldr	r3, [r7, #32]
   13b84:	bb33      	cbnz	r3, 13bd4 <cbprintf_package_convert+0x320>
		if (is_ro) {
   13b86:	2d00      	cmp	r5, #0
   13b88:	d03b      	beq.n	13c02 <cbprintf_package_convert+0x34e>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   13b8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   13b8e:	f013 0f01 	tst.w	r3, #1
   13b92:	d026      	beq.n	13be2 <cbprintf_package_convert+0x32e>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   13b94:	1c73      	adds	r3, r6, #1
   13b96:	f106 0230 	add.w	r2, r6, #48	; 0x30
   13b9a:	f107 0128 	add.w	r1, r7, #40	; 0x28
   13b9e:	1856      	adds	r6, r2, r1
   13ba0:	f806 9c14 	strb.w	r9, [r6, #-20]
   13ba4:	b2de      	uxtb	r6, r3
	for (int i = 0; i < rws_nbr; i++) {
   13ba6:	f108 0801 	add.w	r8, r8, #1
		uint8_t arg_pos = *str_pos++;
   13baa:	4625      	mov	r5, r4
	for (int i = 0; i < rws_nbr; i++) {
   13bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13bae:	4598      	cmp	r8, r3
   13bb0:	d24a      	bcs.n	13c48 <cbprintf_package_convert+0x394>
		uint8_t arg_idx = *str_pos++;
   13bb2:	462c      	mov	r4, r5
   13bb4:	f814 ab02 	ldrb.w	sl, [r4], #2
		uint8_t arg_pos = *str_pos++;
   13bb8:	f895 9001 	ldrb.w	r9, [r5, #1]
		const char *str = *(const char **)&buf32[arg_pos];
   13bbc:	f85b 3029 	ldr.w	r3, [fp, r9, lsl #2]
   13bc0:	4a53      	ldr	r2, [pc, #332]	; (13d10 <cbprintf_package_convert+0x45c>)
   13bc2:	4293      	cmp	r3, r2
   13bc4:	d3dc      	bcc.n	13b80 <cbprintf_package_convert+0x2cc>
   13bc6:	4a53      	ldr	r2, [pc, #332]	; (13d14 <cbprintf_package_convert+0x460>)
   13bc8:	4293      	cmp	r3, r2
   13bca:	d301      	bcc.n	13bd0 <cbprintf_package_convert+0x31c>
   13bcc:	2500      	movs	r5, #0
   13bce:	e7d8      	b.n	13b82 <cbprintf_package_convert+0x2ce>
   13bd0:	2501      	movs	r5, #1
   13bd2:	e7d6      	b.n	13b82 <cbprintf_package_convert+0x2ce>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   13bd4:	4651      	mov	r1, sl
   13bd6:	6978      	ldr	r0, [r7, #20]
   13bd8:	f011 fed4 	bl	25984 <is_ptr>
   13bdc:	2800      	cmp	r0, #0
   13bde:	d0d2      	beq.n	13b86 <cbprintf_package_convert+0x2d2>
   13be0:	e7e1      	b.n	13ba6 <cbprintf_package_convert+0x2f2>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   13be2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   13be6:	f013 0f04 	tst.w	r3, #4
   13bea:	d0dc      	beq.n	13ba6 <cbprintf_package_convert+0x2f2>
				keep_str_pos[keep_cnt++] = arg_pos;
   13bec:	69fa      	ldr	r2, [r7, #28]
   13bee:	1c53      	adds	r3, r2, #1
   13bf0:	3230      	adds	r2, #48	; 0x30
   13bf2:	f107 0128 	add.w	r1, r7, #40	; 0x28
   13bf6:	440a      	add	r2, r1
   13bf8:	f802 9c24 	strb.w	r9, [r2, #-36]
   13bfc:	b2db      	uxtb	r3, r3
   13bfe:	61fb      	str	r3, [r7, #28]
   13c00:	e7d1      	b.n	13ba6 <cbprintf_package_convert+0x2f2>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   13c02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   13c06:	f013 0f02 	tst.w	r3, #2
   13c0a:	d009      	beq.n	13c20 <cbprintf_package_convert+0x36c>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   13c0c:	1c73      	adds	r3, r6, #1
   13c0e:	f106 0230 	add.w	r2, r6, #48	; 0x30
   13c12:	f107 0128 	add.w	r1, r7, #40	; 0x28
   13c16:	1856      	adds	r6, r2, r1
   13c18:	f806 9c14 	strb.w	r9, [r6, #-20]
   13c1c:	b2de      	uxtb	r6, r3
   13c1e:	e7c2      	b.n	13ba6 <cbprintf_package_convert+0x2f2>
				keep_str_pos[keep_cnt++] = arg_idx;
   13c20:	69f8      	ldr	r0, [r7, #28]
   13c22:	1c43      	adds	r3, r0, #1
   13c24:	f100 0130 	add.w	r1, r0, #48	; 0x30
   13c28:	f107 0228 	add.w	r2, r7, #40	; 0x28
   13c2c:	188a      	adds	r2, r1, r2
   13c2e:	f802 ac24 	strb.w	sl, [r2, #-36]
				keep_str_pos[keep_cnt++] = arg_pos;
   13c32:	4602      	mov	r2, r0
   13c34:	3202      	adds	r2, #2
   13c36:	b2d2      	uxtb	r2, r2
   13c38:	61fa      	str	r2, [r7, #28]
   13c3a:	f107 0258 	add.w	r2, r7, #88	; 0x58
   13c3e:	fa52 f383 	uxtab	r3, r2, r3
   13c42:	f803 9c24 	strb.w	r9, [r3, #-36]
   13c46:	e7ae      	b.n	13ba6 <cbprintf_package_convert+0x2f2>
	out_desc.len = in_desc->len;
   13c48:	f8d7 9004 	ldr.w	r9, [r7, #4]
   13c4c:	f89b 3000 	ldrb.w	r3, [fp]
   13c50:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   13c54:	f89b 3001 	ldrb.w	r3, [fp, #1]
   13c58:	4433      	add	r3, r6
   13c5a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   13c5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   13c62:	f013 0f02 	tst.w	r3, #2
   13c66:	d10e      	bne.n	13c86 <cbprintf_package_convert+0x3d2>
   13c68:	69fb      	ldr	r3, [r7, #28]
   13c6a:	f3c3 0347 	ubfx	r3, r3, #1, #8
   13c6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   13c72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   13c76:	f013 0f01 	tst.w	r3, #1
   13c7a:	d106      	bne.n	13c8a <cbprintf_package_convert+0x3d6>
   13c7c:	f013 0f04 	tst.w	r3, #4
   13c80:	d13f      	bne.n	13d02 <cbprintf_package_convert+0x44e>
   13c82:	2300      	movs	r3, #0
   13c84:	e002      	b.n	13c8c <cbprintf_package_convert+0x3d8>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   13c86:	2300      	movs	r3, #0
   13c88:	e7f1      	b.n	13c6e <cbprintf_package_convert+0x3ba>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   13c8a:	2300      	movs	r3, #0
   13c8c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	struct cbprintf_package_desc in_desc_backup = *in_desc;
   13c90:	f8db 0000 	ldr.w	r0, [fp]
   13c94:	6338      	str	r0, [r7, #48]	; 0x30
	*in_desc = out_desc;
   13c96:	6d78      	ldr	r0, [r7, #84]	; 0x54
   13c98:	f8cb 0000 	str.w	r0, [fp]
	rv = cb(in_packaged, args_size, ctx);
   13c9c:	f8d7 8010 	ldr.w	r8, [r7, #16]
   13ca0:	4642      	mov	r2, r8
   13ca2:	68b9      	ldr	r1, [r7, #8]
   13ca4:	4658      	mov	r0, fp
   13ca6:	f8d7 a018 	ldr.w	sl, [r7, #24]
   13caa:	47d0      	blx	sl
	if (rv < 0) {
   13cac:	1e04      	subs	r4, r0, #0
   13cae:	f6ff ae54 	blt.w	1395a <cbprintf_package_convert+0xa6>
	*in_desc = in_desc_backup;
   13cb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
   13cb4:	f8cb 0000 	str.w	r0, [fp]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   13cb8:	f8c7 8010 	str.w	r8, [r7, #16]
   13cbc:	4642      	mov	r2, r8
   13cbe:	69f9      	ldr	r1, [r7, #28]
   13cc0:	f107 0034 	add.w	r0, r7, #52	; 0x34
   13cc4:	47d0      	blx	sl
	if (rv < 0) {
   13cc6:	2800      	cmp	r0, #0
   13cc8:	db57      	blt.n	13d7a <cbprintf_package_convert+0x4c6>
	out_len += rv;
   13cca:	eb04 0800 	add.w	r8, r4, r0
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   13cce:	68b9      	ldr	r1, [r7, #8]
   13cd0:	4449      	add	r1, r9
   13cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13cd4:	eb01 0143 	add.w	r1, r1, r3, lsl #1
	rv = cb(str_pos, strs_len, ctx);
   13cd8:	f8d7 9010 	ldr.w	r9, [r7, #16]
   13cdc:	464a      	mov	r2, r9
   13cde:	68fb      	ldr	r3, [r7, #12]
   13ce0:	1a59      	subs	r1, r3, r1
   13ce2:	4628      	mov	r0, r5
   13ce4:	47d0      	blx	sl
	if (rv < 0) {
   13ce6:	1e04      	subs	r4, r0, #0
   13ce8:	f6ff ae37 	blt.w	1395a <cbprintf_package_convert+0xa6>
	out_len += rv;
   13cec:	eb08 0504 	add.w	r5, r8, r4
	for (int i = 0; i < scpy_cnt; i++) {
   13cf0:	f04f 0800 	mov.w	r8, #0
   13cf4:	627e      	str	r6, [r7, #36]	; 0x24
   13cf6:	f8c7 b020 	str.w	fp, [r7, #32]
   13cfa:	4656      	mov	r6, sl
   13cfc:	f8d7 b084 	ldr.w	fp, [r7, #132]	; 0x84
   13d00:	e01f      	b.n	13d42 <cbprintf_package_convert+0x48e>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   13d02:	69fb      	ldr	r3, [r7, #28]
   13d04:	e7c2      	b.n	13c8c <cbprintf_package_convert+0x3d8>
   13d06:	bf00      	nop
   13d08:	0002d9ec 	.word	0x0002d9ec
   13d0c:	0002d10c 	.word	0x0002d10c
   13d10:	0002cce8 	.word	0x0002cce8
   13d14:	0003010c 	.word	0x0003010c
		uint16_t str_len = strl ? strl[i] : 0;
   13d18:	f04f 0a00 	mov.w	sl, #0
		rv = cb(&loc, 1, ctx);
   13d1c:	464a      	mov	r2, r9
   13d1e:	2101      	movs	r1, #1
   13d20:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   13d24:	47b0      	blx	r6
		if (rv < 0) {
   13d26:	2800      	cmp	r0, #0
   13d28:	db29      	blt.n	13d7e <cbprintf_package_convert+0x4ca>
		out_len += rv;
   13d2a:	4405      	add	r5, r0
		rv = append_string(cb, ctx, str, str_len);
   13d2c:	4653      	mov	r3, sl
   13d2e:	4622      	mov	r2, r4
   13d30:	4649      	mov	r1, r9
   13d32:	4630      	mov	r0, r6
   13d34:	f011 fddf 	bl	258f6 <append_string>
		if (rv < 0) {
   13d38:	2800      	cmp	r0, #0
   13d3a:	db22      	blt.n	13d82 <cbprintf_package_convert+0x4ce>
		out_len += rv;
   13d3c:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
   13d3e:	f108 0801 	add.w	r8, r8, #1
   13d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13d44:	4598      	cmp	r8, r3
   13d46:	da11      	bge.n	13d6c <cbprintf_package_convert+0x4b8>
		uint8_t loc = cpy_str_pos[i];
   13d48:	f108 0330 	add.w	r3, r8, #48	; 0x30
   13d4c:	f107 0228 	add.w	r2, r7, #40	; 0x28
   13d50:	4413      	add	r3, r2
   13d52:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   13d56:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		const char *str = *(const char **)&buf32[loc];
   13d5a:	6a3a      	ldr	r2, [r7, #32]
   13d5c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
   13d60:	f1bb 0f00 	cmp.w	fp, #0
   13d64:	d0d8      	beq.n	13d18 <cbprintf_package_convert+0x464>
   13d66:	f83b a018 	ldrh.w	sl, [fp, r8, lsl #1]
   13d6a:	e7d7      	b.n	13d1c <cbprintf_package_convert+0x468>
	(void)cb(NULL, 0, ctx);
   13d6c:	693a      	ldr	r2, [r7, #16]
   13d6e:	2100      	movs	r1, #0
   13d70:	4608      	mov	r0, r1
   13d72:	69bb      	ldr	r3, [r7, #24]
   13d74:	4798      	blx	r3
	return out_len;
   13d76:	462c      	mov	r4, r5
   13d78:	e5ef      	b.n	1395a <cbprintf_package_convert+0xa6>
		return rv;
   13d7a:	4604      	mov	r4, r0
   13d7c:	e5ed      	b.n	1395a <cbprintf_package_convert+0xa6>
   13d7e:	4604      	mov	r4, r0
   13d80:	e5eb      	b.n	1395a <cbprintf_package_convert+0xa6>
   13d82:	4604      	mov	r4, r0
   13d84:	e5e9      	b.n	1395a <cbprintf_package_convert+0xa6>
   13d86:	bf00      	nop

00013d88 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
   13d88:	4b01      	ldr	r3, [pc, #4]	; (13d90 <__printk_hook_install+0x8>)
   13d8a:	6018      	str	r0, [r3, #0]
}
   13d8c:	4770      	bx	lr
   13d8e:	bf00      	nop
   13d90:	200006d0 	.word	0x200006d0

00013d94 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   13d94:	b510      	push	{r4, lr}
   13d96:	b086      	sub	sp, #24
   13d98:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   13d9a:	9003      	str	r0, [sp, #12]
   13d9c:	9104      	str	r1, [sp, #16]
   13d9e:	2100      	movs	r1, #0
   13da0:	9105      	str	r1, [sp, #20]
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   13da2:	9100      	str	r1, [sp, #0]
   13da4:	a903      	add	r1, sp, #12
   13da6:	4806      	ldr	r0, [pc, #24]	; (13dc0 <vsnprintk+0x2c>)
   13da8:	f000 f924 	bl	13ff4 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   13dac:	9b05      	ldr	r3, [sp, #20]
   13dae:	9a04      	ldr	r2, [sp, #16]
   13db0:	4293      	cmp	r3, r2
   13db2:	da01      	bge.n	13db8 <vsnprintk+0x24>
		str[ctx.count] = '\0';
   13db4:	2200      	movs	r2, #0
   13db6:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
   13db8:	9805      	ldr	r0, [sp, #20]
   13dba:	b006      	add	sp, #24
   13dbc:	bd10      	pop	{r4, pc}
   13dbe:	bf00      	nop
   13dc0:	00025a11 	.word	0x00025a11

00013dc4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   13dc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13dc8:	b083      	sub	sp, #12
   13dca:	4604      	mov	r4, r0
   13dcc:	4608      	mov	r0, r1
   13dce:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   13dd0:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   13dd2:	f013 0f08 	tst.w	r3, #8
   13dd6:	d105      	bne.n	13de4 <process_event+0x20>
   13dd8:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   13ddc:	2300      	movs	r3, #0
   13dde:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
   13de0:	9301      	str	r3, [sp, #4]
}
   13de2:	e055      	b.n	13e90 <process_event+0xcc>
		if (evt == EVT_COMPLETE) {
   13de4:	2901      	cmp	r1, #1
   13de6:	d009      	beq.n	13dfc <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   13de8:	f043 0320 	orr.w	r3, r3, #32
   13dec:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   13dee:	f385 8811 	msr	BASEPRI, r5
   13df2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   13df6:	b003      	add	sp, #12
   13df8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   13dfc:	f043 0310 	orr.w	r3, r3, #16
   13e00:	8323      	strh	r3, [r4, #24]
   13e02:	e7f4      	b.n	13dee <process_event+0x2a>
			evt = process_recheck(mgr);
   13e04:	4620      	mov	r0, r4
   13e06:	f012 f874 	bl	25ef2 <process_recheck>
   13e0a:	e043      	b.n	13e94 <process_event+0xd0>
			res = mgr->last_res;
   13e0c:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
   13e10:	464a      	mov	r2, r9
   13e12:	4669      	mov	r1, sp
   13e14:	4620      	mov	r0, r4
   13e16:	f012 f885 	bl	25f24 <process_complete>
		onoff_transition_fn transit = NULL;
   13e1a:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   13e1e:	8b23      	ldrh	r3, [r4, #24]
   13e20:	f003 0707 	and.w	r7, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   13e24:	42b7      	cmp	r7, r6
   13e26:	d069      	beq.n	13efc <process_event+0x138>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   13e28:	68a2      	ldr	r2, [r4, #8]
   13e2a:	2a00      	cmp	r2, #0
   13e2c:	d066      	beq.n	13efc <process_event+0x138>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   13e2e:	2201      	movs	r2, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   13e30:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   13e34:	8323      	strh	r3, [r4, #24]
   13e36:	f385 8811 	msr	BASEPRI, r5
   13e3a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   13e3e:	2a00      	cmp	r2, #0
   13e40:	d164      	bne.n	13f0c <process_event+0x148>
   13e42:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
   13e44:	b12b      	cbz	r3, 13e52 <process_event+0x8e>
				notify_all(mgr, &clients, state, res);
   13e46:	464b      	mov	r3, r9
   13e48:	463a      	mov	r2, r7
   13e4a:	4669      	mov	r1, sp
   13e4c:	4620      	mov	r0, r4
   13e4e:	f012 f8e2 	bl	26016 <notify_all>
			if (transit != NULL) {
   13e52:	f1b8 0f00 	cmp.w	r8, #0
   13e56:	d002      	beq.n	13e5e <process_event+0x9a>
				transit(mgr, transition_complete);
   13e58:	4934      	ldr	r1, [pc, #208]	; (13f2c <process_event+0x168>)
   13e5a:	4620      	mov	r0, r4
   13e5c:	47c0      	blx	r8
	__asm__ volatile(
   13e5e:	f04f 0340 	mov.w	r3, #64	; 0x40
   13e62:	f3ef 8511 	mrs	r5, BASEPRI
   13e66:	f383 8812 	msr	BASEPRI_MAX, r3
   13e6a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   13e6e:	8b23      	ldrh	r3, [r4, #24]
   13e70:	f023 0308 	bic.w	r3, r3, #8
   13e74:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   13e76:	8b23      	ldrh	r3, [r4, #24]
   13e78:	f013 0f10 	tst.w	r3, #16
   13e7c:	d04c      	beq.n	13f18 <process_event+0x154>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   13e7e:	f023 0310 	bic.w	r3, r3, #16
   13e82:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   13e84:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   13e86:	8b26      	ldrh	r6, [r4, #24]
   13e88:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
   13e8c:	2800      	cmp	r0, #0
   13e8e:	d0ae      	beq.n	13dee <process_event+0x2a>
		if (evt == EVT_RECHECK) {
   13e90:	2802      	cmp	r0, #2
   13e92:	d0b7      	beq.n	13e04 <process_event+0x40>
		if (evt == EVT_NOP) {
   13e94:	2800      	cmp	r0, #0
   13e96:	d0aa      	beq.n	13dee <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
   13e98:	3801      	subs	r0, #1
   13e9a:	2804      	cmp	r0, #4
   13e9c:	d82a      	bhi.n	13ef4 <process_event+0x130>
   13e9e:	a301      	add	r3, pc, #4	; (adr r3, 13ea4 <process_event+0xe0>)
   13ea0:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   13ea4:	00013e0d 	.word	0x00013e0d
   13ea8:	00013ef5 	.word	0x00013ef5
   13eac:	00013eb9 	.word	0x00013eb9
   13eb0:	00013ecd 	.word	0x00013ecd
   13eb4:	00013ee1 	.word	0x00013ee1
			transit = mgr->transitions->start;
   13eb8:	6923      	ldr	r3, [r4, #16]
   13eba:	f8d3 8000 	ldr.w	r8, [r3]
			set_state(mgr, ONOFF_STATE_TO_ON);
   13ebe:	2106      	movs	r1, #6
   13ec0:	4620      	mov	r0, r4
   13ec2:	f011 ffec 	bl	25e9e <set_state>
		res = 0;
   13ec6:	f04f 0900 	mov.w	r9, #0
   13eca:	e7a8      	b.n	13e1e <process_event+0x5a>
			transit = mgr->transitions->stop;
   13ecc:	6923      	ldr	r3, [r4, #16]
   13ece:	f8d3 8004 	ldr.w	r8, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
   13ed2:	2104      	movs	r1, #4
   13ed4:	4620      	mov	r0, r4
   13ed6:	f011 ffe2 	bl	25e9e <set_state>
		res = 0;
   13eda:	f04f 0900 	mov.w	r9, #0
   13ede:	e79e      	b.n	13e1e <process_event+0x5a>
			transit = mgr->transitions->reset;
   13ee0:	6923      	ldr	r3, [r4, #16]
   13ee2:	f8d3 8008 	ldr.w	r8, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
   13ee6:	2105      	movs	r1, #5
   13ee8:	4620      	mov	r0, r4
   13eea:	f011 ffd8 	bl	25e9e <set_state>
		res = 0;
   13eee:	f04f 0900 	mov.w	r9, #0
   13ef2:	e794      	b.n	13e1e <process_event+0x5a>
		if (evt == EVT_NOP) {
   13ef4:	f04f 0800 	mov.w	r8, #0
   13ef8:	46c1      	mov	r9, r8
   13efa:	e790      	b.n	13e1e <process_event+0x5a>
   13efc:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
   13efe:	b10a      	cbz	r2, 13f04 <process_event+0x140>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   13f00:	2200      	movs	r2, #0
   13f02:	e795      	b.n	13e30 <process_event+0x6c>
		    || (transit != NULL)) {
   13f04:	f1b8 0f00 	cmp.w	r8, #0
   13f08:	d192      	bne.n	13e30 <process_event+0x6c>
   13f0a:	e7b4      	b.n	13e76 <process_event+0xb2>
				notify_monitors(mgr, state, res);
   13f0c:	464a      	mov	r2, r9
   13f0e:	4639      	mov	r1, r7
   13f10:	4620      	mov	r0, r4
   13f12:	f011 ffcc 	bl	25eae <notify_monitors>
   13f16:	e794      	b.n	13e42 <process_event+0x7e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   13f18:	f013 0f20 	tst.w	r3, #32
   13f1c:	d004      	beq.n	13f28 <process_event+0x164>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   13f1e:	f023 0320 	bic.w	r3, r3, #32
   13f22:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
   13f24:	2002      	movs	r0, #2
   13f26:	e7ae      	b.n	13e86 <process_event+0xc2>
		evt = EVT_NOP;
   13f28:	2000      	movs	r0, #0
   13f2a:	e7ac      	b.n	13e86 <process_event+0xc2>
   13f2c:	00026045 	.word	0x00026045

00013f30 <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
   13f30:	4684      	mov	ip, r0
   13f32:	4608      	mov	r0, r1
	bool loop = true;
   13f34:	2201      	movs	r2, #1
   13f36:	e026      	b.n	13f86 <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
   13f38:	f89c 3000 	ldrb.w	r3, [ip]
   13f3c:	f043 0304 	orr.w	r3, r3, #4
   13f40:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
   13f44:	b1f2      	cbz	r2, 13f84 <extract_flags+0x54>
			++sp;
   13f46:	3001      	adds	r0, #1
   13f48:	e01c      	b.n	13f84 <extract_flags+0x54>
			conv->flag_plus = true;
   13f4a:	f89c 3000 	ldrb.w	r3, [ip]
   13f4e:	f043 0308 	orr.w	r3, r3, #8
   13f52:	f88c 3000 	strb.w	r3, [ip]
			break;
   13f56:	e7f5      	b.n	13f44 <extract_flags+0x14>
			conv->flag_space = true;
   13f58:	f89c 3000 	ldrb.w	r3, [ip]
   13f5c:	f043 0310 	orr.w	r3, r3, #16
   13f60:	f88c 3000 	strb.w	r3, [ip]
			break;
   13f64:	e7ee      	b.n	13f44 <extract_flags+0x14>
			conv->flag_hash = true;
   13f66:	f89c 3000 	ldrb.w	r3, [ip]
   13f6a:	f043 0320 	orr.w	r3, r3, #32
   13f6e:	f88c 3000 	strb.w	r3, [ip]
			break;
   13f72:	e7e7      	b.n	13f44 <extract_flags+0x14>
			conv->flag_zero = true;
   13f74:	f89c 3000 	ldrb.w	r3, [ip]
   13f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13f7c:	f88c 3000 	strb.w	r3, [ip]
			break;
   13f80:	e7e0      	b.n	13f44 <extract_flags+0x14>
		switch (*sp) {
   13f82:	2200      	movs	r2, #0
		}
	} while (loop);
   13f84:	b342      	cbz	r2, 13fd8 <extract_flags+0xa8>
		switch (*sp) {
   13f86:	7803      	ldrb	r3, [r0, #0]
   13f88:	3b20      	subs	r3, #32
   13f8a:	2b10      	cmp	r3, #16
   13f8c:	d8f9      	bhi.n	13f82 <extract_flags+0x52>
   13f8e:	a101      	add	r1, pc, #4	; (adr r1, 13f94 <extract_flags+0x64>)
   13f90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   13f94:	00013f59 	.word	0x00013f59
   13f98:	00013f83 	.word	0x00013f83
   13f9c:	00013f83 	.word	0x00013f83
   13fa0:	00013f67 	.word	0x00013f67
   13fa4:	00013f83 	.word	0x00013f83
   13fa8:	00013f83 	.word	0x00013f83
   13fac:	00013f83 	.word	0x00013f83
   13fb0:	00013f83 	.word	0x00013f83
   13fb4:	00013f83 	.word	0x00013f83
   13fb8:	00013f83 	.word	0x00013f83
   13fbc:	00013f83 	.word	0x00013f83
   13fc0:	00013f4b 	.word	0x00013f4b
   13fc4:	00013f83 	.word	0x00013f83
   13fc8:	00013f39 	.word	0x00013f39
   13fcc:	00013f83 	.word	0x00013f83
   13fd0:	00013f83 	.word	0x00013f83
   13fd4:	00013f75 	.word	0x00013f75

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
   13fd8:	f89c 3000 	ldrb.w	r3, [ip]
   13fdc:	f003 0344 	and.w	r3, r3, #68	; 0x44
   13fe0:	2b44      	cmp	r3, #68	; 0x44
   13fe2:	d000      	beq.n	13fe6 <extract_flags+0xb6>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
   13fe4:	4770      	bx	lr
		conv->flag_zero = false;
   13fe6:	f89c 3000 	ldrb.w	r3, [ip]
   13fea:	f36f 1386 	bfc	r3, #6, #1
   13fee:	f88c 3000 	strb.w	r3, [ip]
   13ff2:	e7f7      	b.n	13fe4 <extract_flags+0xb4>

00013ff4 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   13ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ff8:	b091      	sub	sp, #68	; 0x44
   13ffa:	4606      	mov	r6, r0
   13ffc:	460d      	mov	r5, r1
   13ffe:	4691      	mov	r9, r2
   14000:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   14002:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   14004:	f899 0000 	ldrb.w	r0, [r9]
   14008:	2800      	cmp	r0, #0
   1400a:	f000 82b9 	beq.w	14580 <z_cbvprintf_impl+0x58c>
		if (*fp != '%') {
   1400e:	2825      	cmp	r0, #37	; 0x25
   14010:	d008      	beq.n	14024 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
   14012:	f109 0901 	add.w	r9, r9, #1
   14016:	4629      	mov	r1, r5
   14018:	47b0      	blx	r6
   1401a:	2800      	cmp	r0, #0
   1401c:	f2c0 82b1 	blt.w	14582 <z_cbvprintf_impl+0x58e>
   14020:	3401      	adds	r4, #1
			continue;
   14022:	e7ef      	b.n	14004 <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
   14024:	2300      	movs	r3, #0
   14026:	9304      	str	r3, [sp, #16]
   14028:	9305      	str	r3, [sp, #20]
   1402a:	9306      	str	r3, [sp, #24]
   1402c:	9307      	str	r3, [sp, #28]
   1402e:	9308      	str	r3, [sp, #32]
   14030:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
   14032:	4649      	mov	r1, r9
   14034:	a806      	add	r0, sp, #24
   14036:	f012 fa35 	bl	264a4 <extract_conversion>
   1403a:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
   1403c:	f89d 3019 	ldrb.w	r3, [sp, #25]
   14040:	f013 0f01 	tst.w	r3, #1
   14044:	f000 8097 	beq.w	14176 <z_cbvprintf_impl+0x182>
			width = va_arg(ap, int);
   14048:	9b03      	ldr	r3, [sp, #12]
   1404a:	1d1a      	adds	r2, r3, #4
   1404c:	9203      	str	r2, [sp, #12]
   1404e:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
   14050:	2f00      	cmp	r7, #0
   14052:	f2c0 8088 	blt.w	14166 <z_cbvprintf_impl+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
   14056:	f89d 3019 	ldrb.w	r3, [sp, #25]
   1405a:	f013 0f04 	tst.w	r3, #4
   1405e:	f000 809c 	beq.w	1419a <z_cbvprintf_impl+0x1a6>
			int arg = va_arg(ap, int);
   14062:	9b03      	ldr	r3, [sp, #12]
   14064:	1d1a      	adds	r2, r3, #4
   14066:	9203      	str	r2, [sp, #12]
   14068:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
   1406c:	f1ba 0f00 	cmp.w	sl, #0
   14070:	f2c0 808a 	blt.w	14188 <z_cbvprintf_impl+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
   14074:	2300      	movs	r3, #0
   14076:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
   14078:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
   1407a:	f89d 301a 	ldrb.w	r3, [sp, #26]
   1407e:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
   14082:	f89d 1019 	ldrb.w	r1, [sp, #25]
   14086:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
   1408a:	2b01      	cmp	r3, #1
   1408c:	f000 808e 	beq.w	141ac <z_cbvprintf_impl+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
   14090:	2b02      	cmp	r3, #2
   14092:	f000 80d3 	beq.w	1423c <z_cbvprintf_impl+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
   14096:	2b04      	cmp	r3, #4
   14098:	f000 8124 	beq.w	142e4 <z_cbvprintf_impl+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
   1409c:	2b03      	cmp	r3, #3
   1409e:	f000 813b 	beq.w	14318 <z_cbvprintf_impl+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
   140a2:	f89d 8018 	ldrb.w	r8, [sp, #24]
   140a6:	f018 0b03 	ands.w	fp, r8, #3
   140aa:	f040 813b 	bne.w	14324 <z_cbvprintf_impl+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
   140ae:	f89d 301b 	ldrb.w	r3, [sp, #27]
   140b2:	3b25      	subs	r3, #37	; 0x25
   140b4:	2b53      	cmp	r3, #83	; 0x53
   140b6:	f200 81ca 	bhi.w	1444e <z_cbvprintf_impl+0x45a>
   140ba:	e8df f013 	tbh	[pc, r3, lsl #1]
   140be:	0140      	.short	0x0140
   140c0:	01c801c8 	.word	0x01c801c8
   140c4:	01c801c8 	.word	0x01c801c8
   140c8:	01c801c8 	.word	0x01c801c8
   140cc:	01c801c8 	.word	0x01c801c8
   140d0:	01c801c8 	.word	0x01c801c8
   140d4:	01c801c8 	.word	0x01c801c8
   140d8:	01c801c8 	.word	0x01c801c8
   140dc:	01c801c8 	.word	0x01c801c8
   140e0:	01c801c8 	.word	0x01c801c8
   140e4:	01c801c8 	.word	0x01c801c8
   140e8:	01c801c8 	.word	0x01c801c8
   140ec:	01c801c8 	.word	0x01c801c8
   140f0:	01c801c8 	.word	0x01c801c8
   140f4:	01c801c8 	.word	0x01c801c8
   140f8:	01c801c8 	.word	0x01c801c8
   140fc:	01c801c8 	.word	0x01c801c8
   14100:	01c801c8 	.word	0x01c801c8
   14104:	01c801c8 	.word	0x01c801c8
   14108:	01c801c8 	.word	0x01c801c8
   1410c:	01c801c8 	.word	0x01c801c8
   14110:	01c801c8 	.word	0x01c801c8
   14114:	01c801c8 	.word	0x01c801c8
   14118:	01c801c8 	.word	0x01c801c8
   1411c:	01c801c8 	.word	0x01c801c8
   14120:	01c801c8 	.word	0x01c801c8
   14124:	01c80181 	.word	0x01c80181
   14128:	01c801c8 	.word	0x01c801c8
   1412c:	01c801c8 	.word	0x01c801c8
   14130:	01c801c8 	.word	0x01c801c8
   14134:	01c801c8 	.word	0x01c801c8
   14138:	015e01c8 	.word	0x015e01c8
   1413c:	01c80167 	.word	0x01c80167
   14140:	01c801c8 	.word	0x01c801c8
   14144:	016701c8 	.word	0x016701c8
   14148:	01c801c8 	.word	0x01c801c8
   1414c:	01c801c8 	.word	0x01c801c8
   14150:	018101bd 	.word	0x018101bd
   14154:	01c801a1 	.word	0x01c801a1
   14158:	014d01c8 	.word	0x014d01c8
   1415c:	018101c8 	.word	0x018101c8
   14160:	01c801c8 	.word	0x01c801c8
   14164:	0181      	.short	0x0181
				conv->flag_dash = true;
   14166:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1416a:	f043 0304 	orr.w	r3, r3, #4
   1416e:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
   14172:	427f      	negs	r7, r7
   14174:	e76f      	b.n	14056 <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
   14176:	f99d 3018 	ldrsb.w	r3, [sp, #24]
   1417a:	2b00      	cmp	r3, #0
   1417c:	db02      	blt.n	14184 <z_cbvprintf_impl+0x190>
		int width = -1;
   1417e:	f04f 37ff 	mov.w	r7, #4294967295
   14182:	e768      	b.n	14056 <z_cbvprintf_impl+0x62>
			width = conv->width_value;
   14184:	9f07      	ldr	r7, [sp, #28]
   14186:	e766      	b.n	14056 <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
   14188:	f89d 3019 	ldrb.w	r3, [sp, #25]
   1418c:	f36f 0341 	bfc	r3, #1, #1
   14190:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
   14194:	f04f 3aff 	mov.w	sl, #4294967295
   14198:	e76c      	b.n	14074 <z_cbvprintf_impl+0x80>
		} else if (conv->prec_present) {
   1419a:	f013 0f02 	tst.w	r3, #2
   1419e:	d002      	beq.n	141a6 <z_cbvprintf_impl+0x1b2>
			precision = conv->prec_value;
   141a0:	f8dd a020 	ldr.w	sl, [sp, #32]
   141a4:	e766      	b.n	14074 <z_cbvprintf_impl+0x80>
		int precision = -1;
   141a6:	f04f 3aff 	mov.w	sl, #4294967295
   141aa:	e763      	b.n	14074 <z_cbvprintf_impl+0x80>
			switch (length_mod) {
   141ac:	1ecb      	subs	r3, r1, #3
   141ae:	2b04      	cmp	r3, #4
   141b0:	d804      	bhi.n	141bc <z_cbvprintf_impl+0x1c8>
   141b2:	e8df f003 	tbb	[pc, r3]
   141b6:	1d0b      	.short	0x1d0b
   141b8:	3529      	.short	0x3529
   141ba:	35          	.byte	0x35
   141bb:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   141bc:	9b03      	ldr	r3, [sp, #12]
   141be:	1d1a      	adds	r2, r3, #4
   141c0:	9203      	str	r2, [sp, #12]
   141c2:	681b      	ldr	r3, [r3, #0]
   141c4:	17da      	asrs	r2, r3, #31
   141c6:	9304      	str	r3, [sp, #16]
   141c8:	9205      	str	r2, [sp, #20]
				break;
   141ca:	e006      	b.n	141da <z_cbvprintf_impl+0x1e6>
					value->sint = va_arg(ap, long);
   141cc:	9b03      	ldr	r3, [sp, #12]
   141ce:	1d1a      	adds	r2, r3, #4
   141d0:	9203      	str	r2, [sp, #12]
   141d2:	681b      	ldr	r3, [r3, #0]
   141d4:	17da      	asrs	r2, r3, #31
   141d6:	9304      	str	r3, [sp, #16]
   141d8:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
   141da:	2901      	cmp	r1, #1
   141dc:	d028      	beq.n	14230 <z_cbvprintf_impl+0x23c>
			} else if (length_mod == LENGTH_H) {
   141de:	2902      	cmp	r1, #2
   141e0:	f47f af5f 	bne.w	140a2 <z_cbvprintf_impl+0xae>
				value->sint = (short)value->sint;
   141e4:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
   141e8:	17da      	asrs	r2, r3, #31
   141ea:	9304      	str	r3, [sp, #16]
   141ec:	9205      	str	r2, [sp, #20]
   141ee:	e758      	b.n	140a2 <z_cbvprintf_impl+0xae>
					(sint_value_type)va_arg(ap, long long);
   141f0:	9b03      	ldr	r3, [sp, #12]
   141f2:	3307      	adds	r3, #7
   141f4:	f023 0307 	bic.w	r3, r3, #7
   141f8:	f103 0208 	add.w	r2, r3, #8
   141fc:	9203      	str	r2, [sp, #12]
   141fe:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   14202:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   14206:	e7e8      	b.n	141da <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
   14208:	9b03      	ldr	r3, [sp, #12]
   1420a:	3307      	adds	r3, #7
   1420c:	f023 0307 	bic.w	r3, r3, #7
   14210:	f103 0208 	add.w	r2, r3, #8
   14214:	9203      	str	r2, [sp, #12]
   14216:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   1421a:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   1421e:	e7dc      	b.n	141da <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   14220:	9b03      	ldr	r3, [sp, #12]
   14222:	1d1a      	adds	r2, r3, #4
   14224:	9203      	str	r2, [sp, #12]
   14226:	681b      	ldr	r3, [r3, #0]
   14228:	17da      	asrs	r2, r3, #31
				value->sint =
   1422a:	9304      	str	r3, [sp, #16]
   1422c:	9205      	str	r2, [sp, #20]
				break;
   1422e:	e7d4      	b.n	141da <z_cbvprintf_impl+0x1e6>
				value->sint = (signed char)value->sint;
   14230:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   14234:	17da      	asrs	r2, r3, #31
   14236:	9304      	str	r3, [sp, #16]
   14238:	9205      	str	r2, [sp, #20]
   1423a:	e732      	b.n	140a2 <z_cbvprintf_impl+0xae>
			switch (length_mod) {
   1423c:	1ecb      	subs	r3, r1, #3
   1423e:	2b04      	cmp	r3, #4
   14240:	d804      	bhi.n	1424c <z_cbvprintf_impl+0x258>
   14242:	e8df f003 	tbb	[pc, r3]
   14246:	1f0b      	.short	0x1f0b
   14248:	4135      	.short	0x4135
   1424a:	41          	.byte	0x41
   1424b:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
   1424c:	9b03      	ldr	r3, [sp, #12]
   1424e:	1d1a      	adds	r2, r3, #4
   14250:	9203      	str	r2, [sp, #12]
   14252:	681b      	ldr	r3, [r3, #0]
   14254:	9304      	str	r3, [sp, #16]
   14256:	2300      	movs	r3, #0
   14258:	9305      	str	r3, [sp, #20]
				break;
   1425a:	e01e      	b.n	1429a <z_cbvprintf_impl+0x2a6>
				    && (conv->specifier == 'c')) {
   1425c:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
   14260:	2b63      	cmp	r3, #99	; 0x63
   14262:	d007      	beq.n	14274 <z_cbvprintf_impl+0x280>
					value->uint = va_arg(ap, unsigned long);
   14264:	9b03      	ldr	r3, [sp, #12]
   14266:	1d1a      	adds	r2, r3, #4
   14268:	9203      	str	r2, [sp, #12]
   1426a:	681b      	ldr	r3, [r3, #0]
   1426c:	9304      	str	r3, [sp, #16]
   1426e:	2300      	movs	r3, #0
   14270:	9305      	str	r3, [sp, #20]
   14272:	e012      	b.n	1429a <z_cbvprintf_impl+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
   14274:	9b03      	ldr	r3, [sp, #12]
   14276:	1d1a      	adds	r2, r3, #4
   14278:	9203      	str	r2, [sp, #12]
   1427a:	681b      	ldr	r3, [r3, #0]
   1427c:	9304      	str	r3, [sp, #16]
   1427e:	2300      	movs	r3, #0
   14280:	9305      	str	r3, [sp, #20]
   14282:	e00a      	b.n	1429a <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap,
   14284:	9b03      	ldr	r3, [sp, #12]
   14286:	3307      	adds	r3, #7
   14288:	f023 0307 	bic.w	r3, r3, #7
   1428c:	f103 0208 	add.w	r2, r3, #8
   14290:	9203      	str	r2, [sp, #12]
   14292:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   14296:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
   1429a:	2901      	cmp	r1, #1
   1429c:	d01c      	beq.n	142d8 <z_cbvprintf_impl+0x2e4>
			} else if (length_mod == LENGTH_H) {
   1429e:	2902      	cmp	r1, #2
   142a0:	f47f aeff 	bne.w	140a2 <z_cbvprintf_impl+0xae>
				value->uint = (unsigned short)value->uint;
   142a4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   142a8:	9304      	str	r3, [sp, #16]
   142aa:	2300      	movs	r3, #0
   142ac:	9305      	str	r3, [sp, #20]
   142ae:	e6f8      	b.n	140a2 <z_cbvprintf_impl+0xae>
					(uint_value_type)va_arg(ap,
   142b0:	9b03      	ldr	r3, [sp, #12]
   142b2:	3307      	adds	r3, #7
   142b4:	f023 0307 	bic.w	r3, r3, #7
   142b8:	f103 0208 	add.w	r2, r3, #8
   142bc:	9203      	str	r2, [sp, #12]
   142be:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   142c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   142c6:	e7e8      	b.n	1429a <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
   142c8:	9b03      	ldr	r3, [sp, #12]
   142ca:	1d1a      	adds	r2, r3, #4
   142cc:	9203      	str	r2, [sp, #12]
   142ce:	681b      	ldr	r3, [r3, #0]
				value->uint =
   142d0:	9304      	str	r3, [sp, #16]
   142d2:	2300      	movs	r3, #0
   142d4:	9305      	str	r3, [sp, #20]
				break;
   142d6:	e7e0      	b.n	1429a <z_cbvprintf_impl+0x2a6>
				value->uint = (unsigned char)value->uint;
   142d8:	f89d 3010 	ldrb.w	r3, [sp, #16]
   142dc:	9304      	str	r3, [sp, #16]
   142de:	2300      	movs	r3, #0
   142e0:	9305      	str	r3, [sp, #20]
   142e2:	e6de      	b.n	140a2 <z_cbvprintf_impl+0xae>
			if (length_mod == LENGTH_UPPER_L) {
   142e4:	2908      	cmp	r1, #8
   142e6:	d00b      	beq.n	14300 <z_cbvprintf_impl+0x30c>
				value->dbl = va_arg(ap, double);
   142e8:	9b03      	ldr	r3, [sp, #12]
   142ea:	3307      	adds	r3, #7
   142ec:	f023 0307 	bic.w	r3, r3, #7
   142f0:	f103 0208 	add.w	r2, r3, #8
   142f4:	9203      	str	r2, [sp, #12]
   142f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   142fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
   142fe:	e6d0      	b.n	140a2 <z_cbvprintf_impl+0xae>
				value->ldbl = va_arg(ap, long double);
   14300:	9b03      	ldr	r3, [sp, #12]
   14302:	3307      	adds	r3, #7
   14304:	f023 0307 	bic.w	r3, r3, #7
   14308:	f103 0208 	add.w	r2, r3, #8
   1430c:	9203      	str	r2, [sp, #12]
   1430e:	e9d3 2300 	ldrd	r2, r3, [r3]
   14312:	e9cd 2304 	strd	r2, r3, [sp, #16]
   14316:	e6c4      	b.n	140a2 <z_cbvprintf_impl+0xae>
			value->ptr = va_arg(ap, void *);
   14318:	9b03      	ldr	r3, [sp, #12]
   1431a:	1d1a      	adds	r2, r3, #4
   1431c:	9203      	str	r2, [sp, #12]
   1431e:	681b      	ldr	r3, [r3, #0]
   14320:	9304      	str	r3, [sp, #16]
   14322:	e6be      	b.n	140a2 <z_cbvprintf_impl+0xae>
			OUTS(sp, fp);
   14324:	9f02      	ldr	r7, [sp, #8]
   14326:	463b      	mov	r3, r7
   14328:	464a      	mov	r2, r9
   1432a:	4629      	mov	r1, r5
   1432c:	4630      	mov	r0, r6
   1432e:	f012 f95f 	bl	265f0 <outs>
   14332:	2800      	cmp	r0, #0
   14334:	f2c0 8125 	blt.w	14582 <z_cbvprintf_impl+0x58e>
   14338:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
   1433a:	46b9      	mov	r9, r7
			continue;
   1433c:	e662      	b.n	14004 <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
   1433e:	4629      	mov	r1, r5
   14340:	2025      	movs	r0, #37	; 0x25
   14342:	47b0      	blx	r6
   14344:	2800      	cmp	r0, #0
   14346:	f2c0 811c 	blt.w	14582 <z_cbvprintf_impl+0x58e>
   1434a:	3401      	adds	r4, #1
		char sign = 0;
   1434c:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
   1434e:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
   14352:	f04f 0900 	mov.w	r9, #0
			break;
   14356:	e07f      	b.n	14458 <z_cbvprintf_impl+0x464>
		case 's': {
			bps = (const char *)value->ptr;
   14358:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
   1435c:	f1ba 0f00 	cmp.w	sl, #0
   14360:	db07      	blt.n	14372 <z_cbvprintf_impl+0x37e>
				len = strnlen(bps, precision);
   14362:	4651      	mov	r1, sl
   14364:	4648      	mov	r0, r9
   14366:	f013 f88a 	bl	2747e <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
   1436a:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
   1436e:	46d8      	mov	r8, fp
			precision = -1;

			break;
   14370:	e072      	b.n	14458 <z_cbvprintf_impl+0x464>
				len = strlen(bps);
   14372:	4648      	mov	r0, r9
   14374:	f013 f87a 	bl	2746c <strlen>
   14378:	e7f7      	b.n	1436a <z_cbvprintf_impl+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1437a:	9b04      	ldr	r3, [sp, #16]
   1437c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
   14380:	46d8      	mov	r8, fp
			bpe = buf + 1;
   14382:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
   14386:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
   1438a:	e065      	b.n	14458 <z_cbvprintf_impl+0x464>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
   1438c:	f018 0f08 	tst.w	r8, #8
   14390:	d105      	bne.n	1439e <z_cbvprintf_impl+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
   14392:	f018 0810 	ands.w	r8, r8, #16
   14396:	d004      	beq.n	143a2 <z_cbvprintf_impl+0x3ae>
				sign = ' ';
   14398:	f04f 0820 	mov.w	r8, #32
   1439c:	e001      	b.n	143a2 <z_cbvprintf_impl+0x3ae>
				sign = '+';
   1439e:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
   143a2:	9a04      	ldr	r2, [sp, #16]
   143a4:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
   143a6:	2b00      	cmp	r3, #0
   143a8:	db02      	blt.n	143b0 <z_cbvprintf_impl+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
   143aa:	9204      	str	r2, [sp, #16]
   143ac:	9305      	str	r3, [sp, #20]
   143ae:	e008      	b.n	143c2 <z_cbvprintf_impl+0x3ce>
				value->uint = (uint_value_type)-sint;
   143b0:	4252      	negs	r2, r2
   143b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   143b6:	9204      	str	r2, [sp, #16]
   143b8:	9305      	str	r3, [sp, #20]
				sign = '-';
   143ba:	f04f 082d 	mov.w	r8, #45	; 0x2d
   143be:	e000      	b.n	143c2 <z_cbvprintf_impl+0x3ce>
		switch (conv->specifier) {
   143c0:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
   143c2:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   143c6:	9300      	str	r3, [sp, #0]
   143c8:	ab0a      	add	r3, sp, #40	; 0x28
   143ca:	aa06      	add	r2, sp, #24
   143cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   143d0:	f012 f89f 	bl	26512 <encode_uint>
   143d4:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
   143d6:	f1ba 0f00 	cmp.w	sl, #0
   143da:	db6c      	blt.n	144b6 <z_cbvprintf_impl+0x4c2>
				size_t len = bpe - bps;
   143dc:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   143e0:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
   143e4:	f89d 2018 	ldrb.w	r2, [sp, #24]
   143e8:	f36f 1286 	bfc	r2, #6, #1
   143ec:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
   143f0:	459a      	cmp	sl, r3
   143f2:	d963      	bls.n	144bc <z_cbvprintf_impl+0x4c8>
					conv->pad0_value = precision - (int)len;
   143f4:	ebaa 0303 	sub.w	r3, sl, r3
   143f8:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
   143fa:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   143fe:	e02b      	b.n	14458 <z_cbvprintf_impl+0x464>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
   14400:	9804      	ldr	r0, [sp, #16]
   14402:	b928      	cbnz	r0, 14410 <z_cbvprintf_impl+0x41c>
		char sign = 0;
   14404:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
   14406:	f8df a180 	ldr.w	sl, [pc, #384]	; 14588 <z_cbvprintf_impl+0x594>
			bps = "(nil)";
   1440a:	f1aa 0905 	sub.w	r9, sl, #5
   1440e:	e023      	b.n	14458 <z_cbvprintf_impl+0x464>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   14410:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   14414:	9300      	str	r3, [sp, #0]
   14416:	ab0a      	add	r3, sp, #40	; 0x28
   14418:	aa06      	add	r2, sp, #24
   1441a:	2100      	movs	r1, #0
   1441c:	f012 f879 	bl	26512 <encode_uint>
   14420:	4681      	mov	r9, r0
				conv->altform_0c = true;
   14422:	f89d 301a 	ldrb.w	r3, [sp, #26]
   14426:	f043 0310 	orr.w	r3, r3, #16
   1442a:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
   1442e:	2378      	movs	r3, #120	; 0x78
   14430:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
   14434:	46d8      	mov	r8, fp
				goto prec_int_pad0;
   14436:	e7ce      	b.n	143d6 <z_cbvprintf_impl+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
   14438:	4622      	mov	r2, r4
   1443a:	9904      	ldr	r1, [sp, #16]
   1443c:	a806      	add	r0, sp, #24
   1443e:	f012 f8b8 	bl	265b2 <store_count>
		char sign = 0;
   14442:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
   14444:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
   14448:	f04f 0900 	mov.w	r9, #0
			}

			break;
   1444c:	e004      	b.n	14458 <z_cbvprintf_impl+0x464>
		switch (conv->specifier) {
   1444e:	46d8      	mov	r8, fp
   14450:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   14454:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
   14458:	f1b9 0f00 	cmp.w	r9, #0
   1445c:	f000 808d 	beq.w	1457a <z_cbvprintf_impl+0x586>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
   14460:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
   14464:	f1b8 0f00 	cmp.w	r8, #0
   14468:	d000      	beq.n	1446c <z_cbvprintf_impl+0x478>
			nj_len += 1U;
   1446a:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
   1446c:	f89d 201a 	ldrb.w	r2, [sp, #26]
   14470:	f012 0f10 	tst.w	r2, #16
   14474:	d025      	beq.n	144c2 <z_cbvprintf_impl+0x4ce>
			nj_len += 2U;
   14476:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
   14478:	9907      	ldr	r1, [sp, #28]
   1447a:	440b      	add	r3, r1
		if (conv->pad_fp) {
   1447c:	f012 0f40 	tst.w	r2, #64	; 0x40
   14480:	d001      	beq.n	14486 <z_cbvprintf_impl+0x492>
			nj_len += conv->pad0_pre_exp;
   14482:	9a08      	ldr	r2, [sp, #32]
   14484:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
   14486:	2f00      	cmp	r7, #0
   14488:	dd31      	ble.n	144ee <z_cbvprintf_impl+0x4fa>
			width -= (int)nj_len;
   1448a:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
   1448c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   14490:	f013 0f04 	tst.w	r3, #4
   14494:	d12b      	bne.n	144ee <z_cbvprintf_impl+0x4fa>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
   14496:	f013 0f40 	tst.w	r3, #64	; 0x40
   1449a:	d017      	beq.n	144cc <z_cbvprintf_impl+0x4d8>
					if (sign != 0) {
   1449c:	f1b8 0f00 	cmp.w	r8, #0
   144a0:	d017      	beq.n	144d2 <z_cbvprintf_impl+0x4de>
						OUTC(sign);
   144a2:	4629      	mov	r1, r5
   144a4:	4640      	mov	r0, r8
   144a6:	47b0      	blx	r6
   144a8:	2800      	cmp	r0, #0
   144aa:	db6a      	blt.n	14582 <z_cbvprintf_impl+0x58e>
   144ac:	3401      	adds	r4, #1
						sign = 0;
   144ae:	46d8      	mov	r8, fp
					}
					pad = '0';
   144b0:	f04f 0b30 	mov.w	fp, #48	; 0x30
   144b4:	e00f      	b.n	144d6 <z_cbvprintf_impl+0x4e2>
		const char *bpe = buf + sizeof(buf);
   144b6:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   144ba:	e7cd      	b.n	14458 <z_cbvprintf_impl+0x464>
   144bc:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   144c0:	e7ca      	b.n	14458 <z_cbvprintf_impl+0x464>
		} else if (conv->altform_0) {
   144c2:	f012 0f08 	tst.w	r2, #8
   144c6:	d0d7      	beq.n	14478 <z_cbvprintf_impl+0x484>
			nj_len += 1U;
   144c8:	3301      	adds	r3, #1
   144ca:	e7d5      	b.n	14478 <z_cbvprintf_impl+0x484>
				char pad = ' ';
   144cc:	f04f 0b20 	mov.w	fp, #32
   144d0:	e001      	b.n	144d6 <z_cbvprintf_impl+0x4e2>
					pad = '0';
   144d2:	f04f 0b30 	mov.w	fp, #48	; 0x30
   144d6:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
   144d8:	1e5f      	subs	r7, r3, #1
   144da:	2b00      	cmp	r3, #0
   144dc:	dd07      	ble.n	144ee <z_cbvprintf_impl+0x4fa>
					OUTC(pad);
   144de:	4629      	mov	r1, r5
   144e0:	4658      	mov	r0, fp
   144e2:	47b0      	blx	r6
   144e4:	2800      	cmp	r0, #0
   144e6:	db4c      	blt.n	14582 <z_cbvprintf_impl+0x58e>
   144e8:	3401      	adds	r4, #1
				while (width-- > 0) {
   144ea:	463b      	mov	r3, r7
   144ec:	e7f4      	b.n	144d8 <z_cbvprintf_impl+0x4e4>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
   144ee:	f1b8 0f00 	cmp.w	r8, #0
   144f2:	d005      	beq.n	14500 <z_cbvprintf_impl+0x50c>
			OUTC(sign);
   144f4:	4629      	mov	r1, r5
   144f6:	4640      	mov	r0, r8
   144f8:	47b0      	blx	r6
   144fa:	2800      	cmp	r0, #0
   144fc:	db41      	blt.n	14582 <z_cbvprintf_impl+0x58e>
   144fe:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
   14500:	f89d 301a 	ldrb.w	r3, [sp, #26]
   14504:	f3c3 1200 	ubfx	r2, r3, #4, #1
   14508:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   1450c:	431a      	orrs	r2, r3
   1450e:	d005      	beq.n	1451c <z_cbvprintf_impl+0x528>
				OUTC('0');
   14510:	4629      	mov	r1, r5
   14512:	2030      	movs	r0, #48	; 0x30
   14514:	47b0      	blx	r6
   14516:	2800      	cmp	r0, #0
   14518:	db33      	blt.n	14582 <z_cbvprintf_impl+0x58e>
   1451a:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
   1451c:	f89d 301a 	ldrb.w	r3, [sp, #26]
   14520:	f013 0f10 	tst.w	r3, #16
   14524:	d006      	beq.n	14534 <z_cbvprintf_impl+0x540>
				OUTC(conv->specifier);
   14526:	4629      	mov	r1, r5
   14528:	f89d 001b 	ldrb.w	r0, [sp, #27]
   1452c:	47b0      	blx	r6
   1452e:	2800      	cmp	r0, #0
   14530:	db27      	blt.n	14582 <z_cbvprintf_impl+0x58e>
   14532:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
   14534:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
   14536:	f103 38ff 	add.w	r8, r3, #4294967295
   1453a:	2b00      	cmp	r3, #0
   1453c:	dd07      	ble.n	1454e <z_cbvprintf_impl+0x55a>
				OUTC('0');
   1453e:	4629      	mov	r1, r5
   14540:	2030      	movs	r0, #48	; 0x30
   14542:	47b0      	blx	r6
   14544:	2800      	cmp	r0, #0
   14546:	db1c      	blt.n	14582 <z_cbvprintf_impl+0x58e>
   14548:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   1454a:	4643      	mov	r3, r8
   1454c:	e7f3      	b.n	14536 <z_cbvprintf_impl+0x542>
			}

			OUTS(bps, bpe);
   1454e:	4653      	mov	r3, sl
   14550:	464a      	mov	r2, r9
   14552:	4629      	mov	r1, r5
   14554:	4630      	mov	r0, r6
   14556:	f012 f84b 	bl	265f0 <outs>
   1455a:	2800      	cmp	r0, #0
   1455c:	db11      	blt.n	14582 <z_cbvprintf_impl+0x58e>
   1455e:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
   14560:	2f00      	cmp	r7, #0
   14562:	dd07      	ble.n	14574 <z_cbvprintf_impl+0x580>
			OUTC(' ');
   14564:	4629      	mov	r1, r5
   14566:	2020      	movs	r0, #32
   14568:	47b0      	blx	r6
   1456a:	2800      	cmp	r0, #0
   1456c:	db09      	blt.n	14582 <z_cbvprintf_impl+0x58e>
   1456e:	3401      	adds	r4, #1
			--width;
   14570:	3f01      	subs	r7, #1
   14572:	e7f5      	b.n	14560 <z_cbvprintf_impl+0x56c>
		fp = extract_conversion(conv, sp);
   14574:	f8dd 9008 	ldr.w	r9, [sp, #8]
   14578:	e544      	b.n	14004 <z_cbvprintf_impl+0x10>
   1457a:	f8dd 9008 	ldr.w	r9, [sp, #8]
   1457e:	e541      	b.n	14004 <z_cbvprintf_impl+0x10>
		}
	}

	return count;
   14580:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
   14582:	b011      	add	sp, #68	; 0x44
   14584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14588:	0002daa9 	.word	0x0002daa9

0001458c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   1458c:	f00e b810 	b.w	225b0 <SystemInit>

00014590 <msg_process>:
		return true;
	}
}

static void msg_process(union log_msg_generic *msg)
{
   14590:	b538      	push	{r3, r4, r5, lr}
   14592:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   14594:	4c0b      	ldr	r4, [pc, #44]	; (145c4 <msg_process+0x34>)
   14596:	e000      	b.n	1459a <msg_process+0xa>
   14598:	3410      	adds	r4, #16
   1459a:	4b0b      	ldr	r3, [pc, #44]	; (145c8 <msg_process+0x38>)
   1459c:	429c      	cmp	r4, r3
   1459e:	d20f      	bcs.n	145c0 <msg_process+0x30>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   145a0:	6863      	ldr	r3, [r4, #4]
   145a2:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend) &&
   145a4:	2b00      	cmp	r3, #0
   145a6:	d0f7      	beq.n	14598 <msg_process+0x8>
		    msg_filter_check(backend, msg)) {
   145a8:	4629      	mov	r1, r5
   145aa:	4620      	mov	r0, r4
   145ac:	f012 fadb 	bl	26b66 <msg_filter_check>
		if (log_backend_is_active(backend) &&
   145b0:	2800      	cmp	r0, #0
   145b2:	d0f1      	beq.n	14598 <msg_process+0x8>
	backend->api->process(backend, msg);
   145b4:	6823      	ldr	r3, [r4, #0]
   145b6:	681b      	ldr	r3, [r3, #0]
   145b8:	4629      	mov	r1, r5
   145ba:	4620      	mov	r0, r4
   145bc:	4798      	blx	r3
}
   145be:	e7eb      	b.n	14598 <msg_process+0x8>
			log_backend_msg_process(backend, msg);
		}
	}
}
   145c0:	bd38      	pop	{r3, r4, r5, pc}
   145c2:	bf00      	nop
   145c4:	0002d184 	.word	0x0002d184
   145c8:	0002d1a4 	.word	0x0002d1a4

000145cc <log_backend_notify_all>:
	return mpsc_pbuf_get_max_utilization(&log_buffer, max);
}

static void log_backend_notify_all(enum log_backend_evt event,
				   union log_backend_evt_arg *arg)
{
   145cc:	b570      	push	{r4, r5, r6, lr}
   145ce:	4606      	mov	r6, r0
   145d0:	460d      	mov	r5, r1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   145d2:	4c08      	ldr	r4, [pc, #32]	; (145f4 <log_backend_notify_all+0x28>)
   145d4:	e004      	b.n	145e0 <log_backend_notify_all+0x14>
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
		backend->api->notify(backend, event, arg);
   145d6:	462a      	mov	r2, r5
   145d8:	4631      	mov	r1, r6
   145da:	4620      	mov	r0, r4
   145dc:	4798      	blx	r3
   145de:	3410      	adds	r4, #16
   145e0:	4b05      	ldr	r3, [pc, #20]	; (145f8 <log_backend_notify_all+0x2c>)
   145e2:	429c      	cmp	r4, r3
   145e4:	d204      	bcs.n	145f0 <log_backend_notify_all+0x24>
	if (backend->api->notify) {
   145e6:	6823      	ldr	r3, [r4, #0]
   145e8:	699b      	ldr	r3, [r3, #24]
   145ea:	2b00      	cmp	r3, #0
   145ec:	d1f3      	bne.n	145d6 <log_backend_notify_all+0xa>
   145ee:	e7f6      	b.n	145de <log_backend_notify_all+0x12>
		log_backend_notify(backend, event, arg);
	}
}
   145f0:	bd70      	pop	{r4, r5, r6, pc}
   145f2:	bf00      	nop
   145f4:	0002d184 	.word	0x0002d184
   145f8:	0002d1a4 	.word	0x0002d1a4

000145fc <activate_foreach_backend>:
{
   145fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14600:	4607      	mov	r7, r0
	uint32_t mask_cpy = mask;
   14602:	4605      	mov	r5, r0
	while (mask_cpy) {
   14604:	e00a      	b.n	1461c <activate_foreach_backend+0x20>
			mask &= ~BIT(i);
   14606:	ea07 0708 	and.w	r7, r7, r8
					   backend->cb->ctx,
   1460a:	4b14      	ldr	r3, [pc, #80]	; (1465c <activate_foreach_backend+0x60>)
   1460c:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   14610:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
   14612:	2204      	movs	r2, #4
   14614:	6819      	ldr	r1, [r3, #0]
   14616:	4620      	mov	r0, r4
   14618:	f000 faa4 	bl	14b64 <log_backend_enable>
	while (mask_cpy) {
   1461c:	b1d5      	cbz	r5, 14654 <activate_foreach_backend+0x58>
		uint32_t i = __builtin_ctz(mask_cpy);
   1461e:	fa95 f6a5 	rbit	r6, r5
   14622:	fab6 f686 	clz	r6, r6
	STRUCT_SECTION_GET(log_backend, idx, &backend);
   14626:	4c0d      	ldr	r4, [pc, #52]	; (1465c <activate_foreach_backend+0x60>)
   14628:	eb04 1406 	add.w	r4, r4, r6, lsl #4
		mask_cpy &= ~BIT(i);
   1462c:	2301      	movs	r3, #1
   1462e:	40b3      	lsls	r3, r6
   14630:	ea6f 0803 	mvn.w	r8, r3
   14634:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   14638:	7b23      	ldrb	r3, [r4, #12]
   1463a:	2b00      	cmp	r3, #0
   1463c:	d0ee      	beq.n	1461c <activate_foreach_backend+0x20>
	if (backend->api->is_ready != NULL) {
   1463e:	0133      	lsls	r3, r6, #4
   14640:	4a06      	ldr	r2, [pc, #24]	; (1465c <activate_foreach_backend+0x60>)
   14642:	58d3      	ldr	r3, [r2, r3]
   14644:	691b      	ldr	r3, [r3, #16]
   14646:	2b00      	cmp	r3, #0
   14648:	d0dd      	beq.n	14606 <activate_foreach_backend+0xa>
		return backend->api->is_ready(backend);
   1464a:	4620      	mov	r0, r4
   1464c:	4798      	blx	r3
   1464e:	2800      	cmp	r0, #0
   14650:	d1e4      	bne.n	1461c <activate_foreach_backend+0x20>
   14652:	e7d8      	b.n	14606 <activate_foreach_backend+0xa>
}
   14654:	4638      	mov	r0, r7
   14656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1465a:	bf00      	nop
   1465c:	0002d184 	.word	0x0002d184

00014660 <z_log_init>:
{
   14660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14664:	4680      	mov	r8, r0
   14666:	460f      	mov	r7, r1
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   14668:	4b20      	ldr	r3, [pc, #128]	; (146ec <z_log_init+0x8c>)
   1466a:	f3bf 8f5b 	dmb	ish
   1466e:	e853 5f00 	ldrex	r5, [r3]
   14672:	1c6a      	adds	r2, r5, #1
   14674:	e843 2100 	strex	r1, r2, [r3]
   14678:	2900      	cmp	r1, #0
   1467a:	d1f8      	bne.n	1466e <z_log_init+0xe>
   1467c:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   14680:	2d00      	cmp	r5, #0
   14682:	d12f      	bne.n	146e4 <z_log_init+0x84>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   14684:	4c1a      	ldr	r4, [pc, #104]	; (146f0 <z_log_init+0x90>)
	int i = 0;
   14686:	2600      	movs	r6, #0
   14688:	e007      	b.n	1469a <z_log_init+0x3a>
						   backend->cb->ctx,
   1468a:	6863      	ldr	r3, [r4, #4]
				log_backend_enable(backend,
   1468c:	2204      	movs	r2, #4
   1468e:	6819      	ldr	r1, [r3, #0]
   14690:	4620      	mov	r0, r4
   14692:	f000 fa67 	bl	14b64 <log_backend_enable>
			i++;
   14696:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   14698:	3410      	adds	r4, #16
   1469a:	4b16      	ldr	r3, [pc, #88]	; (146f4 <z_log_init+0x94>)
   1469c:	429c      	cmp	r4, r3
   1469e:	d213      	bcs.n	146c8 <z_log_init+0x68>
		if (backend->autostart) {
   146a0:	7b23      	ldrb	r3, [r4, #12]
   146a2:	2b00      	cmp	r3, #0
   146a4:	d0f8      	beq.n	14698 <z_log_init+0x38>
	if (backend->api->init) {
   146a6:	6823      	ldr	r3, [r4, #0]
   146a8:	68db      	ldr	r3, [r3, #12]
   146aa:	b10b      	cbz	r3, 146b0 <z_log_init+0x50>
		backend->api->init(backend);
   146ac:	4620      	mov	r0, r4
   146ae:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
   146b0:	6823      	ldr	r3, [r4, #0]
   146b2:	691b      	ldr	r3, [r3, #16]
   146b4:	2b00      	cmp	r3, #0
   146b6:	d0e8      	beq.n	1468a <z_log_init+0x2a>
		return backend->api->is_ready(backend);
   146b8:	4620      	mov	r0, r4
   146ba:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   146bc:	2800      	cmp	r0, #0
   146be:	d0e4      	beq.n	1468a <z_log_init+0x2a>
				mask |= BIT(i);
   146c0:	2301      	movs	r3, #1
   146c2:	40b3      	lsls	r3, r6
   146c4:	431d      	orrs	r5, r3
   146c6:	e7e6      	b.n	14696 <z_log_init+0x36>
	if (blocking) {
   146c8:	f1b8 0f00 	cmp.w	r8, #0
   146cc:	d00b      	beq.n	146e6 <z_log_init+0x86>
		while (mask) {
   146ce:	b155      	cbz	r5, 146e6 <z_log_init+0x86>
			mask = activate_foreach_backend(mask);
   146d0:	4628      	mov	r0, r5
   146d2:	f7ff ff93 	bl	145fc <activate_foreach_backend>
   146d6:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   146d8:	2f00      	cmp	r7, #0
   146da:	d0f8      	beq.n	146ce <z_log_init+0x6e>
				k_msleep(10);
   146dc:	200a      	movs	r0, #10
   146de:	f012 fa48 	bl	26b72 <k_msleep>
   146e2:	e7f4      	b.n	146ce <z_log_init+0x6e>
		return 0;
   146e4:	2500      	movs	r5, #0
}
   146e6:	4628      	mov	r0, r5
   146e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   146ec:	200079f0 	.word	0x200079f0
   146f0:	0002d184 	.word	0x0002d184
   146f4:	0002d1a4 	.word	0x0002d1a4

000146f8 <thread_set>:
{
   146f8:	b508      	push	{r3, lr}
	proc_tid = process_tid;
   146fa:	4b06      	ldr	r3, [pc, #24]	; (14714 <thread_set+0x1c>)
   146fc:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   146fe:	b118      	cbz	r0, 14708 <thread_set+0x10>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   14700:	4b05      	ldr	r3, [pc, #20]	; (14718 <thread_set+0x20>)
   14702:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
   14704:	2b09      	cmp	r3, #9
   14706:	dc00      	bgt.n	1470a <thread_set+0x12>
}
   14708:	bd08      	pop	{r3, pc}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1470a:	4804      	ldr	r0, [pc, #16]	; (1471c <thread_set+0x24>)
   1470c:	f00f fc84 	bl	24018 <z_impl_k_sem_give>
}
   14710:	e7fa      	b.n	14708 <thread_set+0x10>
   14712:	bf00      	nop
   14714:	200079e4 	.word	0x200079e4
   14718:	200079ec 	.word	0x200079ec
   1471c:	20000adc 	.word	0x20000adc

00014720 <log_process_thread_timer_expiry_fn>:

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
   14720:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   14722:	4802      	ldr	r0, [pc, #8]	; (1472c <log_process_thread_timer_expiry_fn+0xc>)
   14724:	f00f fc78 	bl	24018 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
   14728:	bd08      	pop	{r3, pc}
   1472a:	bf00      	nop
   1472c:	20000adc 	.word	0x20000adc

00014730 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   14730:	b530      	push	{r4, r5, lr}
   14732:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   14734:	2200      	movs	r2, #0
   14736:	490f      	ldr	r1, [pc, #60]	; (14774 <enable_logger+0x44>)
   14738:	480f      	ldr	r0, [pc, #60]	; (14778 <enable_logger+0x48>)
   1473a:	f018 f8db 	bl	2c8f4 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1473e:	4d0f      	ldr	r5, [pc, #60]	; (1477c <enable_logger+0x4c>)
   14740:	2200      	movs	r2, #0
   14742:	2300      	movs	r3, #0
   14744:	e9cd 2306 	strd	r2, r3, [sp, #24]
   14748:	2400      	movs	r4, #0
   1474a:	9404      	str	r4, [sp, #16]
   1474c:	230e      	movs	r3, #14
   1474e:	9303      	str	r3, [sp, #12]
   14750:	9402      	str	r4, [sp, #8]
   14752:	9401      	str	r4, [sp, #4]
   14754:	9400      	str	r4, [sp, #0]
   14756:	4b0a      	ldr	r3, [pc, #40]	; (14780 <enable_logger+0x50>)
   14758:	f44f 7240 	mov.w	r2, #768	; 0x300
   1475c:	4909      	ldr	r1, [pc, #36]	; (14784 <enable_logger+0x54>)
   1475e:	4628      	mov	r0, r5
   14760:	f017 fbde 	bl	2bf20 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   14764:	4908      	ldr	r1, [pc, #32]	; (14788 <enable_logger+0x58>)
   14766:	4628      	mov	r0, r5
   14768:	f00f fa6a 	bl	23c40 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
   1476c:	4620      	mov	r0, r4
   1476e:	b009      	add	sp, #36	; 0x24
   14770:	bd30      	pop	{r4, r5, pc}
   14772:	bf00      	nop
   14774:	00014721 	.word	0x00014721
   14778:	20001f08 	.word	0x20001f08
   1477c:	20001a48 	.word	0x20001a48
   14780:	00014ac5 	.word	0x00014ac5
   14784:	20008f00 	.word	0x20008f00
   14788:	0002daac 	.word	0x0002daac

0001478c <log_format_func_t_get>:
}
   1478c:	4b01      	ldr	r3, [pc, #4]	; (14794 <log_format_func_t_get+0x8>)
   1478e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   14792:	4770      	bx	lr
   14794:	0002dac8 	.word	0x0002dac8

00014798 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
   14798:	b148      	cbz	r0, 147ae <log_set_timestamp_func+0x16>
{
   1479a:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
   1479c:	4a05      	ldr	r2, [pc, #20]	; (147b4 <log_set_timestamp_func+0x1c>)
   1479e:	6010      	str	r0, [r2, #0]
	timestamp_freq = freq;
   147a0:	4b05      	ldr	r3, [pc, #20]	; (147b8 <log_set_timestamp_func+0x20>)
   147a2:	6019      	str	r1, [r3, #0]
		log_output_timestamp_freq_set(freq);
   147a4:	4608      	mov	r0, r1
   147a6:	f000 fbff 	bl	14fa8 <log_output_timestamp_freq_set>
	return 0;
   147aa:	2000      	movs	r0, #0
}
   147ac:	bd08      	pop	{r3, pc}
		return -EINVAL;
   147ae:	f06f 0015 	mvn.w	r0, #21
}
   147b2:	4770      	bx	lr
   147b4:	200006d4 	.word	0x200006d4
   147b8:	200079e0 	.word	0x200079e0

000147bc <z_log_notify_backend_enabled>:
{
   147bc:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   147be:	4b05      	ldr	r3, [pc, #20]	; (147d4 <z_log_notify_backend_enabled+0x18>)
   147c0:	781b      	ldrb	r3, [r3, #0]
   147c2:	b11b      	cbz	r3, 147cc <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
   147c4:	4b03      	ldr	r3, [pc, #12]	; (147d4 <z_log_notify_backend_enabled+0x18>)
   147c6:	2201      	movs	r2, #1
   147c8:	701a      	strb	r2, [r3, #0]
}
   147ca:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
   147cc:	4802      	ldr	r0, [pc, #8]	; (147d8 <z_log_notify_backend_enabled+0x1c>)
   147ce:	f00f fc23 	bl	24018 <z_impl_k_sem_give>
}
   147d2:	e7f7      	b.n	147c4 <z_log_notify_backend_enabled+0x8>
   147d4:	20008ec6 	.word	0x20008ec6
   147d8:	20000adc 	.word	0x20000adc

000147dc <z_log_dropped>:
   147dc:	4b0d      	ldr	r3, [pc, #52]	; (14814 <z_log_dropped+0x38>)
   147de:	f3bf 8f5b 	dmb	ish
   147e2:	e853 1f00 	ldrex	r1, [r3]
   147e6:	3101      	adds	r1, #1
   147e8:	e843 1200 	strex	r2, r1, [r3]
   147ec:	2a00      	cmp	r2, #0
   147ee:	d1f8      	bne.n	147e2 <z_log_dropped+0x6>
   147f0:	f3bf 8f5b 	dmb	ish
	if (buffered) {
   147f4:	b900      	cbnz	r0, 147f8 <z_log_dropped+0x1c>
}
   147f6:	4770      	bx	lr
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   147f8:	4b07      	ldr	r3, [pc, #28]	; (14818 <z_log_dropped+0x3c>)
   147fa:	f3bf 8f5b 	dmb	ish
   147fe:	e853 1f00 	ldrex	r1, [r3]
   14802:	3901      	subs	r1, #1
   14804:	e843 1200 	strex	r2, r1, [r3]
   14808:	2a00      	cmp	r2, #0
   1480a:	d1f8      	bne.n	147fe <z_log_dropped+0x22>
   1480c:	f3bf 8f5b 	dmb	ish
   14810:	e7f1      	b.n	147f6 <z_log_dropped+0x1a>
   14812:	bf00      	nop
   14814:	200079e8 	.word	0x200079e8
   14818:	200079ec 	.word	0x200079ec

0001481c <z_log_dropped_read_and_clear>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1481c:	4b06      	ldr	r3, [pc, #24]	; (14838 <z_log_dropped_read_and_clear+0x1c>)
}
   1481e:	2000      	movs	r0, #0
   14820:	4601      	mov	r1, r0
   14822:	f3bf 8f5b 	dmb	ish
   14826:	e853 0f00 	ldrex	r0, [r3]
   1482a:	e843 1200 	strex	r2, r1, [r3]
   1482e:	2a00      	cmp	r2, #0
   14830:	d1f9      	bne.n	14826 <z_log_dropped_read_and_clear+0xa>
   14832:	f3bf 8f5b 	dmb	ish
   14836:	4770      	bx	lr
   14838:	200079e8 	.word	0x200079e8

0001483c <dropped_notify>:
{
   1483c:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   1483e:	f7ff ffed 	bl	1481c <z_log_dropped_read_and_clear>
   14842:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   14844:	4c09      	ldr	r4, [pc, #36]	; (1486c <dropped_notify+0x30>)
   14846:	e000      	b.n	1484a <dropped_notify+0xe>
   14848:	3410      	adds	r4, #16
   1484a:	4b09      	ldr	r3, [pc, #36]	; (14870 <dropped_notify+0x34>)
   1484c:	429c      	cmp	r4, r3
   1484e:	d20b      	bcs.n	14868 <dropped_notify+0x2c>
	return backend->cb->active;
   14850:	6863      	ldr	r3, [r4, #4]
   14852:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   14854:	2b00      	cmp	r3, #0
   14856:	d0f7      	beq.n	14848 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
   14858:	6823      	ldr	r3, [r4, #0]
   1485a:	685b      	ldr	r3, [r3, #4]
   1485c:	2b00      	cmp	r3, #0
   1485e:	d0f3      	beq.n	14848 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
   14860:	4629      	mov	r1, r5
   14862:	4620      	mov	r0, r4
   14864:	4798      	blx	r3
   14866:	e7ef      	b.n	14848 <dropped_notify+0xc>
}
   14868:	bd38      	pop	{r3, r4, r5, pc}
   1486a:	bf00      	nop
   1486c:	0002d184 	.word	0x0002d184
   14870:	0002d1a4 	.word	0x0002d1a4

00014874 <z_log_dropped_pending>:
	return dropped_cnt > 0;
   14874:	4b03      	ldr	r3, [pc, #12]	; (14884 <z_log_dropped_pending+0x10>)
   14876:	6818      	ldr	r0, [r3, #0]
}
   14878:	2800      	cmp	r0, #0
   1487a:	bfd4      	ite	le
   1487c:	2000      	movle	r0, #0
   1487e:	2001      	movgt	r0, #1
   14880:	4770      	bx	lr
   14882:	bf00      	nop
   14884:	200079e8 	.word	0x200079e8

00014888 <z_log_msg_init>:
{
   14888:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
   1488a:	4c04      	ldr	r4, [pc, #16]	; (1489c <z_log_msg_init+0x14>)
   1488c:	4904      	ldr	r1, [pc, #16]	; (148a0 <z_log_msg_init+0x18>)
   1488e:	4620      	mov	r0, r4
   14890:	f011 ffc3 	bl	2681a <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
   14894:	4b03      	ldr	r3, [pc, #12]	; (148a4 <z_log_msg_init+0x1c>)
   14896:	601c      	str	r4, [r3, #0]
}
   14898:	bd10      	pop	{r4, pc}
   1489a:	bf00      	nop
   1489c:	20000a1c 	.word	0x20000a1c
   148a0:	0002dab4 	.word	0x0002dab4
   148a4:	200079dc 	.word	0x200079dc

000148a8 <log_core_init>:
{
   148a8:	b508      	push	{r3, lr}
	panic_mode = false;
   148aa:	2300      	movs	r3, #0
   148ac:	4a05      	ldr	r2, [pc, #20]	; (148c4 <log_core_init+0x1c>)
   148ae:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   148b0:	4a05      	ldr	r2, [pc, #20]	; (148c8 <log_core_init+0x20>)
   148b2:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
   148b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   148b8:	4804      	ldr	r0, [pc, #16]	; (148cc <log_core_init+0x24>)
   148ba:	f7ff ff6d 	bl	14798 <log_set_timestamp_func>
		z_log_msg_init();
   148be:	f7ff ffe3 	bl	14888 <z_log_msg_init>
}
   148c2:	bd08      	pop	{r3, pc}
   148c4:	20008ec7 	.word	0x20008ec7
   148c8:	200079e8 	.word	0x200079e8
   148cc:	00026b6b 	.word	0x00026b6b

000148d0 <z_log_msg_alloc>:
{
   148d0:	b508      	push	{r3, lr}
   148d2:	4601      	mov	r1, r0
	return msg_alloc(&log_buffer, wlen);
   148d4:	4801      	ldr	r0, [pc, #4]	; (148dc <z_log_msg_alloc+0xc>)
   148d6:	f012 f962 	bl	26b9e <msg_alloc>
}
   148da:	bd08      	pop	{r3, pc}
   148dc:	20000a1c 	.word	0x20000a1c

000148e0 <z_log_msg_local_claim>:
{
   148e0:	b508      	push	{r3, lr}
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
   148e2:	4802      	ldr	r0, [pc, #8]	; (148ec <z_log_msg_local_claim+0xc>)
   148e4:	f012 f871 	bl	269ca <mpsc_pbuf_claim>
}
   148e8:	bd08      	pop	{r3, pc}
   148ea:	bf00      	nop
   148ec:	20000a1c 	.word	0x20000a1c

000148f0 <z_log_msg_free>:
{
   148f0:	b508      	push	{r3, lr}
   148f2:	4601      	mov	r1, r0
	msg_free(curr_log_buffer, msg);
   148f4:	4b02      	ldr	r3, [pc, #8]	; (14900 <z_log_msg_free+0x10>)
   148f6:	6818      	ldr	r0, [r3, #0]
   148f8:	f012 f957 	bl	26baa <msg_free>
}
   148fc:	bd08      	pop	{r3, pc}
   148fe:	bf00      	nop
   14900:	200079dc 	.word	0x200079dc

00014904 <z_log_msg_pending>:
{
   14904:	b508      	push	{r3, lr}
		return msg_pending(&log_buffer);
   14906:	4802      	ldr	r0, [pc, #8]	; (14910 <z_log_msg_pending+0xc>)
   14908:	f012 f953 	bl	26bb2 <msg_pending>
}
   1490c:	bd08      	pop	{r3, pc}
   1490e:	bf00      	nop
   14910:	20000a1c 	.word	0x20000a1c

00014914 <z_impl_log_process>:
{
   14914:	b510      	push	{r4, lr}
   14916:	b082      	sub	sp, #8
	k_timeout_t backoff = K_NO_WAIT;
   14918:	2200      	movs	r2, #0
   1491a:	2300      	movs	r3, #0
   1491c:	e9cd 2300 	strd	r2, r3, [sp]
	if (!backend_attached) {
   14920:	4b28      	ldr	r3, [pc, #160]	; (149c4 <z_impl_log_process+0xb0>)
   14922:	7818      	ldrb	r0, [r3, #0]
   14924:	b908      	cbnz	r0, 1492a <z_impl_log_process+0x16>
}
   14926:	b002      	add	sp, #8
   14928:	bd10      	pop	{r4, pc}
	msg = z_log_msg_claim(&backoff);
   1492a:	4668      	mov	r0, sp
   1492c:	f012 f959 	bl	26be2 <z_log_msg_claim>
	if (msg) {
   14930:	4604      	mov	r4, r0
   14932:	b188      	cbz	r0, 14958 <z_impl_log_process+0x44>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   14934:	4b24      	ldr	r3, [pc, #144]	; (149c8 <z_impl_log_process+0xb4>)
   14936:	f3bf 8f5b 	dmb	ish
   1493a:	e853 1f00 	ldrex	r1, [r3]
   1493e:	3901      	subs	r1, #1
   14940:	e843 1200 	strex	r2, r1, [r3]
   14944:	2a00      	cmp	r2, #0
   14946:	d1f8      	bne.n	1493a <z_impl_log_process+0x26>
   14948:	f3bf 8f5b 	dmb	ish
		msg_process(msg);
   1494c:	4620      	mov	r0, r4
   1494e:	f7ff fe1f 	bl	14590 <msg_process>
		z_log_msg_free(msg);
   14952:	4620      	mov	r0, r4
   14954:	f7ff ffcc 	bl	148f0 <z_log_msg_free>
		bool dropped_pend = z_log_dropped_pending();
   14958:	f7ff ff8c 	bl	14874 <z_log_dropped_pending>
		if ((dropped_pend || unordered_pend) &&
   1495c:	b958      	cbnz	r0, 14976 <z_impl_log_process+0x62>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
   1495e:	4a1b      	ldr	r2, [pc, #108]	; (149cc <z_impl_log_process+0xb8>)
   14960:	6813      	ldr	r3, [r2, #0]
   14962:	6851      	ldr	r1, [r2, #4]
   14964:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
   14968:	f141 0100 	adc.w	r1, r1, #0
   1496c:	6013      	str	r3, [r2, #0]
   1496e:	6051      	str	r1, [r2, #4]
	return z_log_msg_pending();
   14970:	f7ff ffc8 	bl	14904 <z_log_msg_pending>
   14974:	e7d7      	b.n	14926 <z_impl_log_process+0x12>
	return z_impl_k_uptime_ticks();
   14976:	f017 ff7a 	bl	2c86e <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   1497a:	014a      	lsls	r2, r1, #5
   1497c:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   14980:	0143      	lsls	r3, r0, #5
   14982:	1a1b      	subs	r3, r3, r0
   14984:	eb62 0201 	sbc.w	r2, r2, r1
   14988:	0092      	lsls	r2, r2, #2
   1498a:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   1498e:	009b      	lsls	r3, r3, #2
   14990:	181b      	adds	r3, r3, r0
   14992:	eb42 0201 	adc.w	r2, r2, r1
   14996:	00d2      	lsls	r2, r2, #3
   14998:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   1499c:	f3c3 3310 	ubfx	r3, r3, #12, #17
   149a0:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
   149a4:	0bd2      	lsrs	r2, r2, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   149a6:	4809      	ldr	r0, [pc, #36]	; (149cc <z_impl_log_process+0xb8>)
   149a8:	6801      	ldr	r1, [r0, #0]
   149aa:	6840      	ldr	r0, [r0, #4]
   149ac:	1a5b      	subs	r3, r3, r1
   149ae:	eb62 0200 	sbc.w	r2, r2, r0
		if ((dropped_pend || unordered_pend) &&
   149b2:	f240 31e9 	movw	r1, #1001	; 0x3e9
   149b6:	428b      	cmp	r3, r1
   149b8:	f172 0200 	sbcs.w	r2, r2, #0
   149bc:	d3cf      	bcc.n	1495e <z_impl_log_process+0x4a>
				dropped_notify();
   149be:	f7ff ff3d 	bl	1483c <dropped_notify>
			if (unordered_pend) {
   149c2:	e7cc      	b.n	1495e <z_impl_log_process+0x4a>
   149c4:	20008ec6 	.word	0x20008ec6
   149c8:	200079ec 	.word	0x200079ec
   149cc:	20001f00 	.word	0x20001f00

000149d0 <z_impl_log_panic>:
	if (panic_mode) {
   149d0:	4b0f      	ldr	r3, [pc, #60]	; (14a10 <z_impl_log_panic+0x40>)
   149d2:	781b      	ldrb	r3, [r3, #0]
   149d4:	b103      	cbz	r3, 149d8 <z_impl_log_panic+0x8>
   149d6:	4770      	bx	lr
{
   149d8:	b510      	push	{r4, lr}
	(void)z_log_init(true, false);
   149da:	2100      	movs	r1, #0
   149dc:	2001      	movs	r0, #1
   149de:	f7ff fe3f 	bl	14660 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   149e2:	4c0c      	ldr	r4, [pc, #48]	; (14a14 <z_impl_log_panic+0x44>)
   149e4:	e000      	b.n	149e8 <z_impl_log_panic+0x18>
   149e6:	3410      	adds	r4, #16
   149e8:	4b0b      	ldr	r3, [pc, #44]	; (14a18 <z_impl_log_panic+0x48>)
   149ea:	429c      	cmp	r4, r3
   149ec:	d208      	bcs.n	14a00 <z_impl_log_panic+0x30>
	return backend->cb->active;
   149ee:	6863      	ldr	r3, [r4, #4]
   149f0:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   149f2:	2b00      	cmp	r3, #0
   149f4:	d0f7      	beq.n	149e6 <z_impl_log_panic+0x16>
	backend->api->panic(backend);
   149f6:	6823      	ldr	r3, [r4, #0]
   149f8:	689b      	ldr	r3, [r3, #8]
   149fa:	4620      	mov	r0, r4
   149fc:	4798      	blx	r3
}
   149fe:	e7f2      	b.n	149e6 <z_impl_log_panic+0x16>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
   14a00:	f7ff ff88 	bl	14914 <z_impl_log_process>
		while (log_process() == true) {
   14a04:	2800      	cmp	r0, #0
   14a06:	d1fb      	bne.n	14a00 <z_impl_log_panic+0x30>
	panic_mode = true;
   14a08:	4b01      	ldr	r3, [pc, #4]	; (14a10 <z_impl_log_panic+0x40>)
   14a0a:	2201      	movs	r2, #1
   14a0c:	701a      	strb	r2, [r3, #0]
}
   14a0e:	bd10      	pop	{r4, pc}
   14a10:	20008ec7 	.word	0x20008ec7
   14a14:	0002d184 	.word	0x0002d184
   14a18:	0002d1a4 	.word	0x0002d1a4

00014a1c <z_log_msg_post_finalize>:
{
   14a1c:	b510      	push	{r4, lr}
   14a1e:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   14a20:	4b1b      	ldr	r3, [pc, #108]	; (14a90 <z_log_msg_post_finalize+0x74>)
   14a22:	f3bf 8f5b 	dmb	ish
   14a26:	e853 2f00 	ldrex	r2, [r3]
   14a2a:	1c51      	adds	r1, r2, #1
   14a2c:	e843 1000 	strex	r0, r1, [r3]
   14a30:	2800      	cmp	r0, #0
   14a32:	d1f8      	bne.n	14a26 <z_log_msg_post_finalize+0xa>
   14a34:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
   14a38:	4b16      	ldr	r3, [pc, #88]	; (14a94 <z_log_msg_post_finalize+0x78>)
   14a3a:	781b      	ldrb	r3, [r3, #0]
   14a3c:	b963      	cbnz	r3, 14a58 <z_log_msg_post_finalize+0x3c>
	} else if (proc_tid != NULL) {
   14a3e:	4b16      	ldr	r3, [pc, #88]	; (14a98 <z_log_msg_post_finalize+0x7c>)
   14a40:	681b      	ldr	r3, [r3, #0]
   14a42:	b1bb      	cbz	r3, 14a74 <z_log_msg_post_finalize+0x58>
		if (cnt == 0) {
   14a44:	b1c2      	cbz	r2, 14a78 <z_log_msg_post_finalize+0x5c>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   14a46:	2a0a      	cmp	r2, #10
   14a48:	d114      	bne.n	14a74 <z_log_msg_post_finalize+0x58>
	z_impl_k_timer_stop(timer);
   14a4a:	4814      	ldr	r0, [pc, #80]	; (14a9c <z_log_msg_post_finalize+0x80>)
   14a4c:	f017 ff5e 	bl	2c90c <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   14a50:	4813      	ldr	r0, [pc, #76]	; (14aa0 <z_log_msg_post_finalize+0x84>)
   14a52:	f00f fae1 	bl	24018 <z_impl_k_sem_give>
}
   14a56:	e00d      	b.n	14a74 <z_log_msg_post_finalize+0x58>
   14a58:	f04f 0340 	mov.w	r3, #64	; 0x40
   14a5c:	f3ef 8411 	mrs	r4, BASEPRI
   14a60:	f383 8812 	msr	BASEPRI_MAX, r3
   14a64:	f3bf 8f6f 	isb	sy
   14a68:	f7ff ff54 	bl	14914 <z_impl_log_process>
	__asm__ volatile(
   14a6c:	f384 8811 	msr	BASEPRI, r4
   14a70:	f3bf 8f6f 	isb	sy
   14a74:	b002      	add	sp, #8
   14a76:	bd10      	pop	{r4, pc}
	z_impl_k_timer_start(timer, duration, period);
   14a78:	2200      	movs	r2, #0
   14a7a:	2300      	movs	r3, #0
   14a7c:	e9cd 2300 	strd	r2, r3, [sp]
   14a80:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   14a84:	2300      	movs	r3, #0
   14a86:	4805      	ldr	r0, [pc, #20]	; (14a9c <z_log_msg_post_finalize+0x80>)
   14a88:	f010 fab0 	bl	24fec <z_impl_k_timer_start>
   14a8c:	e7f2      	b.n	14a74 <z_log_msg_post_finalize+0x58>
   14a8e:	bf00      	nop
   14a90:	200079ec 	.word	0x200079ec
   14a94:	20008ec7 	.word	0x20008ec7
   14a98:	200079e4 	.word	0x200079e4
   14a9c:	20001f08 	.word	0x20001f08
   14aa0:	20000adc 	.word	0x20000adc

00014aa4 <z_log_msg_commit>:
{
   14aa4:	b510      	push	{r4, lr}
   14aa6:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   14aa8:	4b04      	ldr	r3, [pc, #16]	; (14abc <z_log_msg_commit+0x18>)
   14aaa:	681b      	ldr	r3, [r3, #0]
   14aac:	4798      	blx	r3
   14aae:	60a0      	str	r0, [r4, #8]
	msg_commit(&log_buffer, msg);
   14ab0:	4621      	mov	r1, r4
   14ab2:	4803      	ldr	r0, [pc, #12]	; (14ac0 <z_log_msg_commit+0x1c>)
   14ab4:	f012 f899 	bl	26bea <msg_commit>
}
   14ab8:	bd10      	pop	{r4, pc}
   14aba:	bf00      	nop
   14abc:	200006d4 	.word	0x200006d4
   14ac0:	20000a1c 	.word	0x20000a1c

00014ac4 <log_process_thread_func>:
{
   14ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t activate_mask = z_log_init(false, false);
   14ac8:	2100      	movs	r1, #0
   14aca:	4608      	mov	r0, r1
   14acc:	f7ff fdc8 	bl	14660 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   14ad0:	4680      	mov	r8, r0
   14ad2:	b140      	cbz	r0, 14ae6 <log_process_thread_func+0x22>
   14ad4:	f240 6667 	movw	r6, #1639	; 0x667
   14ad8:	2700      	movs	r7, #0
	return z_impl_z_current_get();
   14ada:	f010 f859 	bl	24b90 <z_impl_z_current_get>
	thread_set(k_current_get());
   14ade:	f7ff fe0b 	bl	146f8 <thread_set>
	bool processed_any = false;
   14ae2:	2500      	movs	r5, #0
   14ae4:	e015      	b.n	14b12 <log_process_thread_func+0x4e>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   14ae6:	f04f 36ff 	mov.w	r6, #4294967295
   14aea:	f04f 37ff 	mov.w	r7, #4294967295
   14aee:	e7f4      	b.n	14ada <log_process_thread_func+0x16>
			activate_mask = activate_foreach_backend(activate_mask);
   14af0:	4640      	mov	r0, r8
   14af2:	f7ff fd83 	bl	145fc <activate_foreach_backend>
			if (!activate_mask) {
   14af6:	4680      	mov	r8, r0
   14af8:	b970      	cbnz	r0, 14b18 <log_process_thread_func+0x54>
				timeout = K_FOREVER;
   14afa:	f04f 36ff 	mov.w	r6, #4294967295
   14afe:	f04f 37ff 	mov.w	r7, #4294967295
   14b02:	e009      	b.n	14b18 <log_process_thread_func+0x54>
   14b04:	462c      	mov	r4, r5
	return z_impl_k_sem_take(sem, timeout);
   14b06:	4632      	mov	r2, r6
   14b08:	463b      	mov	r3, r7
   14b0a:	4809      	ldr	r0, [pc, #36]	; (14b30 <log_process_thread_func+0x6c>)
   14b0c:	f00f faac 	bl	24068 <z_impl_k_sem_take>
{
   14b10:	4625      	mov	r5, r4
		if (activate_mask) {
   14b12:	f1b8 0f00 	cmp.w	r8, #0
   14b16:	d1eb      	bne.n	14af0 <log_process_thread_func+0x2c>
   14b18:	f7ff fefc 	bl	14914 <z_impl_log_process>
		if (log_process() == false) {
   14b1c:	4604      	mov	r4, r0
   14b1e:	2800      	cmp	r0, #0
   14b20:	d1f6      	bne.n	14b10 <log_process_thread_func+0x4c>
			if (processed_any) {
   14b22:	2d00      	cmp	r5, #0
   14b24:	d0ee      	beq.n	14b04 <log_process_thread_func+0x40>
				log_backend_notify_all(LOG_BACKEND_EVT_PROCESS_THREAD_DONE, NULL);
   14b26:	2100      	movs	r1, #0
   14b28:	4608      	mov	r0, r1
   14b2a:	f7ff fd4f 	bl	145cc <log_backend_notify_all>
   14b2e:	e7ea      	b.n	14b06 <log_process_thread_func+0x42>
   14b30:	20000adc 	.word	0x20000adc

00014b34 <log_src_cnt_get>:
	if (z_log_is_local_domain(domain_id)) {
		return log_const_source_id(__log_const_end);
	}

	return link_source_count(domain_id);
}
   14b34:	4802      	ldr	r0, [pc, #8]	; (14b40 <log_src_cnt_get+0xc>)
   14b36:	4b03      	ldr	r3, [pc, #12]	; (14b44 <log_src_cnt_get+0x10>)
   14b38:	1ac0      	subs	r0, r0, r3
   14b3a:	08c0      	lsrs	r0, r0, #3
   14b3c:	4770      	bx	lr
   14b3e:	bf00      	nop
   14b40:	0002d184 	.word	0x0002d184
   14b44:	0002d08c 	.word	0x0002d08c

00014b48 <log_source_name_get>:

	return (const char *)cached;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
   14b48:	b510      	push	{r4, lr}
   14b4a:	460c      	mov	r4, r1
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
   14b4c:	f7ff fff2 	bl	14b34 <log_src_cnt_get>
   14b50:	42a0      	cmp	r0, r4
   14b52:	d903      	bls.n	14b5c <log_source_name_get+0x14>
			return __log_const_start[source_id].name;
   14b54:	4b02      	ldr	r3, [pc, #8]	; (14b60 <log_source_name_get+0x18>)
   14b56:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			return NULL;
		}
	}

	return link_source_name_get(domain_id, source_id);
}
   14b5a:	bd10      	pop	{r4, pc}
			return NULL;
   14b5c:	2000      	movs	r0, #0
   14b5e:	e7fc      	b.n	14b5a <log_source_name_get+0x12>
   14b60:	0002d08c 	.word	0x0002d08c

00014b64 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
   14b64:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   14b66:	4b09      	ldr	r3, [pc, #36]	; (14b8c <log_backend_enable+0x28>)
   14b68:	1ac3      	subs	r3, r0, r3
   14b6a:	111b      	asrs	r3, r3, #4
   14b6c:	3301      	adds	r3, #1
	backend->cb->id = id;
   14b6e:	f8d0 c004 	ldr.w	ip, [r0, #4]
   14b72:	f88c 3004 	strb.w	r3, [ip, #4]

	log_backend_id_set(backend, id);
	backend->cb->level = level;
   14b76:	6843      	ldr	r3, [r0, #4]
   14b78:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
   14b7a:	6843      	ldr	r3, [r0, #4]
   14b7c:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   14b7e:	6843      	ldr	r3, [r0, #4]
   14b80:	2201      	movs	r2, #1
   14b82:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
   14b84:	f7ff fe1a 	bl	147bc <z_log_notify_backend_enabled>
}
   14b88:	bd08      	pop	{r3, pc}
   14b8a:	bf00      	nop
   14b8c:	0002d184 	.word	0x0002d184

00014b90 <cbprintf_package_copy>:
{
   14b90:	b500      	push	{lr}
   14b92:	b089      	sub	sp, #36	; 0x24
	struct z_cbprintf_buf_desc buf_desc = {
   14b94:	9205      	str	r2, [sp, #20]
   14b96:	9306      	str	r3, [sp, #24]
   14b98:	2300      	movs	r3, #0
   14b9a:	9307      	str	r3, [sp, #28]
	return cbprintf_package_convert(in_packaged, in_len,
   14b9c:	b162      	cbz	r2, 14bb8 <cbprintf_package_copy+0x28>
   14b9e:	4a07      	ldr	r2, [pc, #28]	; (14bbc <cbprintf_package_copy+0x2c>)
   14ba0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14ba2:	9302      	str	r3, [sp, #8]
   14ba4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14ba6:	9301      	str	r3, [sp, #4]
   14ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14baa:	9300      	str	r3, [sp, #0]
   14bac:	ab05      	add	r3, sp, #20
   14bae:	f7fe fe81 	bl	138b4 <cbprintf_package_convert>
}
   14bb2:	b009      	add	sp, #36	; 0x24
   14bb4:	f85d fb04 	ldr.w	pc, [sp], #4
	return cbprintf_package_convert(in_packaged, in_len,
   14bb8:	2200      	movs	r2, #0
   14bba:	e7f1      	b.n	14ba0 <cbprintf_package_copy+0x10>
   14bbc:	00026bfb 	.word	0x00026bfb

00014bc0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   14bc0:	b40e      	push	{r1, r2, r3}
   14bc2:	b500      	push	{lr}
   14bc4:	b084      	sub	sp, #16
   14bc6:	4601      	mov	r1, r0
   14bc8:	ab05      	add	r3, sp, #20
   14bca:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
   14bce:	9303      	str	r3, [sp, #12]
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   14bd0:	2000      	movs	r0, #0
   14bd2:	9000      	str	r0, [sp, #0]
   14bd4:	4803      	ldr	r0, [pc, #12]	; (14be4 <print_formatted+0x24>)
   14bd6:	f7ff fa0d 	bl	13ff4 <z_cbvprintf_impl>
	length = cbvprintf(out_func, (void *)output, fmt, args);
	va_end(args);

	return length;
}
   14bda:	b004      	add	sp, #16
   14bdc:	f85d eb04 	ldr.w	lr, [sp], #4
   14be0:	b003      	add	sp, #12
   14be2:	4770      	bx	lr
   14be4:	00026e1b 	.word	0x00026e1b

00014be8 <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
   14be8:	b530      	push	{r4, r5, lr}
   14bea:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP);


	if (!format) {
   14bec:	f011 0f44 	tst.w	r1, #68	; 0x44
   14bf0:	d005      	beq.n	14bfe <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
   14bf2:	4b1a      	ldr	r3, [pc, #104]	; (14c5c <timestamp_print+0x74>)
   14bf4:	681c      	ldr	r4, [r3, #0]
   14bf6:	b934      	cbnz	r4, 14c06 <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
   14bf8:	2000      	movs	r0, #0
	}

	return length;
}
   14bfa:	b005      	add	sp, #20
   14bfc:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
   14bfe:	4918      	ldr	r1, [pc, #96]	; (14c60 <timestamp_print+0x78>)
   14c00:	f7ff ffde 	bl	14bc0 <print_formatted>
   14c04:	e7f9      	b.n	14bfa <timestamp_print+0x12>
		timestamp /= timestamp_div;
   14c06:	4b17      	ldr	r3, [pc, #92]	; (14c64 <timestamp_print+0x7c>)
   14c08:	6819      	ldr	r1, [r3, #0]
   14c0a:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
   14c0e:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
   14c12:	4a15      	ldr	r2, [pc, #84]	; (14c68 <timestamp_print+0x80>)
   14c14:	fba2 320c 	umull	r3, r2, r2, ip
   14c18:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
   14c1a:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   14c1e:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
   14c22:	4b12      	ldr	r3, [pc, #72]	; (14c6c <timestamp_print+0x84>)
   14c24:	fba3 530e 	umull	r5, r3, r3, lr
   14c28:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
   14c2a:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
   14c2e:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   14c32:	fb0c f101 	mul.w	r1, ip, r1
   14c36:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   14c3a:	fb04 1115 	mls	r1, r4, r5, r1
   14c3e:	fb0c f101 	mul.w	r1, ip, r1
   14c42:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
   14c46:	9102      	str	r1, [sp, #8]
   14c48:	9501      	str	r5, [sp, #4]
   14c4a:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   14c4e:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
   14c52:	9100      	str	r1, [sp, #0]
   14c54:	4906      	ldr	r1, [pc, #24]	; (14c70 <timestamp_print+0x88>)
   14c56:	f7ff ffb3 	bl	14bc0 <print_formatted>
   14c5a:	e7ce      	b.n	14bfa <timestamp_print+0x12>
   14c5c:	200079f8 	.word	0x200079f8
   14c60:	0002dae8 	.word	0x0002dae8
   14c64:	200079f4 	.word	0x200079f4
   14c68:	91a2b3c5 	.word	0x91a2b3c5
   14c6c:	88888889 	.word	0x88888889
   14c70:	0002daf4 	.word	0x0002daf4

00014c74 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
   14c74:	b161      	cbz	r1, 14c90 <color_print+0x1c>
{
   14c76:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   14c78:	b12a      	cbz	r2, 14c86 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
   14c7a:	4a06      	ldr	r2, [pc, #24]	; (14c94 <color_print+0x20>)
   14c7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   14c80:	b912      	cbnz	r2, 14c88 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   14c82:	4a05      	ldr	r2, [pc, #20]	; (14c98 <color_print+0x24>)
   14c84:	e000      	b.n	14c88 <color_print+0x14>
   14c86:	4a04      	ldr	r2, [pc, #16]	; (14c98 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
   14c88:	4904      	ldr	r1, [pc, #16]	; (14c9c <color_print+0x28>)
   14c8a:	f7ff ff99 	bl	14bc0 <print_formatted>
	}
}
   14c8e:	bd08      	pop	{r3, pc}
   14c90:	4770      	bx	lr
   14c92:	bf00      	nop
   14c94:	0002db98 	.word	0x0002db98
   14c98:	0002db10 	.word	0x0002db10
   14c9c:	0002db18 	.word	0x0002db18

00014ca0 <ids_print>:
		     bool level_on,
		     bool func_on,
		     const char *domain,
		     const char *source,
		     uint32_t level)
{
   14ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14ca4:	4605      	mov	r5, r0
   14ca6:	4690      	mov	r8, r2
   14ca8:	461e      	mov	r6, r3
   14caa:	9f06      	ldr	r7, [sp, #24]
	int total = 0;

	if (level_on) {
   14cac:	b981      	cbnz	r1, 14cd0 <ids_print+0x30>
	int total = 0;
   14cae:	2400      	movs	r4, #0
		total += print_formatted(output, "<%s> ", severity[level]);
	}

	if (domain) {
   14cb0:	b12e      	cbz	r6, 14cbe <ids_print+0x1e>
		total += print_formatted(output, "%s/", domain);
   14cb2:	4632      	mov	r2, r6
   14cb4:	4910      	ldr	r1, [pc, #64]	; (14cf8 <ids_print+0x58>)
   14cb6:	4628      	mov	r0, r5
   14cb8:	f7ff ff82 	bl	14bc0 <print_formatted>
   14cbc:	4404      	add	r4, r0
	}

	if (source) {
   14cbe:	b1b7      	cbz	r7, 14cee <ids_print+0x4e>
		total += print_formatted(output,
   14cc0:	f1b8 0f00 	cmp.w	r8, #0
   14cc4:	d00d      	beq.n	14ce2 <ids_print+0x42>
				(func_on &&
   14cc6:	9b07      	ldr	r3, [sp, #28]
   14cc8:	2b04      	cmp	r3, #4
   14cca:	d013      	beq.n	14cf4 <ids_print+0x54>
		total += print_formatted(output,
   14ccc:	490b      	ldr	r1, [pc, #44]	; (14cfc <ids_print+0x5c>)
   14cce:	e009      	b.n	14ce4 <ids_print+0x44>
		total += print_formatted(output, "<%s> ", severity[level]);
   14cd0:	4b0b      	ldr	r3, [pc, #44]	; (14d00 <ids_print+0x60>)
   14cd2:	9a07      	ldr	r2, [sp, #28]
   14cd4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   14cd8:	490a      	ldr	r1, [pc, #40]	; (14d04 <ids_print+0x64>)
   14cda:	f7ff ff71 	bl	14bc0 <print_formatted>
   14cde:	4604      	mov	r4, r0
   14ce0:	e7e6      	b.n	14cb0 <ids_print+0x10>
		total += print_formatted(output,
   14ce2:	4906      	ldr	r1, [pc, #24]	; (14cfc <ids_print+0x5c>)
   14ce4:	463a      	mov	r2, r7
   14ce6:	4628      	mov	r0, r5
   14ce8:	f7ff ff6a 	bl	14bc0 <print_formatted>
   14cec:	4404      	add	r4, r0
				"%s." : "%s: ",
				source);
	}

	return total;
}
   14cee:	4620      	mov	r0, r4
   14cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
   14cf4:	4904      	ldr	r1, [pc, #16]	; (14d08 <ids_print+0x68>)
   14cf6:	e7f5      	b.n	14ce4 <ids_print+0x44>
   14cf8:	0002db30 	.word	0x0002db30
   14cfc:	0002db20 	.word	0x0002db20
   14d00:	0002dbac 	.word	0x0002dbac
   14d04:	0002db28 	.word	0x0002db28
   14d08:	0002db1c 	.word	0x0002db1c

00014d0c <prefix_print>:
			     bool func_on,
			     log_timestamp_t timestamp,
			     const char *domain,
			     const char *source,
			     uint8_t level)
{
   14d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d10:	b085      	sub	sp, #20
   14d12:	4605      	mov	r5, r0
   14d14:	460c      	mov	r4, r1
   14d16:	4616      	mov	r6, r2
   14d18:	9303      	str	r3, [sp, #12]
   14d1a:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   14d1e:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   14d22:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   14d26:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
   14d2a:	f011 ff64 	bl	26bf6 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
   14d2e:	b1d8      	cbz	r0, 14d68 <prefix_print+0x5c>
   14d30:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
   14d32:	4912      	ldr	r1, [pc, #72]	; (14d7c <prefix_print+0x70>)
   14d34:	4628      	mov	r0, r5
   14d36:	f7ff ff43 	bl	14bc0 <print_formatted>
   14d3a:	4607      	mov	r7, r0
	}

	if (stamp) {
   14d3c:	f1bb 0f00 	cmp.w	fp, #0
   14d40:	d114      	bne.n	14d6c <prefix_print+0x60>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
   14d42:	4642      	mov	r2, r8
   14d44:	4651      	mov	r1, sl
   14d46:	4628      	mov	r0, r5
   14d48:	f012 f827 	bl	26d9a <color_prefix>
	}

	length += ids_print(output, level_on, func_on, domain, source, level);
   14d4c:	f8cd 8004 	str.w	r8, [sp, #4]
   14d50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14d52:	9300      	str	r3, [sp, #0]
   14d54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14d56:	4632      	mov	r2, r6
   14d58:	4649      	mov	r1, r9
   14d5a:	4628      	mov	r0, r5
   14d5c:	f7ff ffa0 	bl	14ca0 <ids_print>

	return length;
}
   14d60:	4438      	add	r0, r7
   14d62:	b005      	add	sp, #20
   14d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
   14d68:	2700      	movs	r7, #0
   14d6a:	e7e7      	b.n	14d3c <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
   14d6c:	9a03      	ldr	r2, [sp, #12]
   14d6e:	4621      	mov	r1, r4
   14d70:	4628      	mov	r0, r5
   14d72:	f7ff ff39 	bl	14be8 <timestamp_print>
   14d76:	4407      	add	r7, r0
   14d78:	e7e3      	b.n	14d42 <prefix_print+0x36>
   14d7a:	bf00      	nop
   14d7c:	0002db34 	.word	0x0002db34

00014d80 <newline_print>:
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   14d80:	f011 0f10 	tst.w	r1, #16
   14d84:	d10b      	bne.n	14d9e <newline_print+0x1e>
{
   14d86:	b508      	push	{r3, lr}
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   14d88:	f011 0f20 	tst.w	r1, #32
   14d8c:	d003      	beq.n	14d96 <newline_print+0x16>
		print_formatted(ctx, "\n");
   14d8e:	4904      	ldr	r1, [pc, #16]	; (14da0 <newline_print+0x20>)
   14d90:	f7ff ff16 	bl	14bc0 <print_formatted>
}
   14d94:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
   14d96:	4903      	ldr	r1, [pc, #12]	; (14da4 <newline_print+0x24>)
   14d98:	f7ff ff12 	bl	14bc0 <print_formatted>
   14d9c:	e7fa      	b.n	14d94 <newline_print+0x14>
   14d9e:	4770      	bx	lr
   14da0:	00030008 	.word	0x00030008
   14da4:	0002db38 	.word	0x0002db38

00014da8 <hexdump_line_print>:
{
   14da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14dac:	4605      	mov	r5, r0
   14dae:	460f      	mov	r7, r1
   14db0:	4616      	mov	r6, r2
   14db2:	4698      	mov	r8, r3
	newline_print(output, flags);
   14db4:	9906      	ldr	r1, [sp, #24]
   14db6:	f7ff ffe3 	bl	14d80 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
   14dba:	2400      	movs	r4, #0
   14dbc:	4544      	cmp	r4, r8
   14dbe:	da05      	bge.n	14dcc <hexdump_line_print+0x24>
		print_formatted(output, " ");
   14dc0:	4923      	ldr	r1, [pc, #140]	; (14e50 <hexdump_line_print+0xa8>)
   14dc2:	4628      	mov	r0, r5
   14dc4:	f7ff fefc 	bl	14bc0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   14dc8:	3401      	adds	r4, #1
   14dca:	e7f7      	b.n	14dbc <hexdump_line_print+0x14>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   14dcc:	2400      	movs	r4, #0
   14dce:	e009      	b.n	14de4 <hexdump_line_print+0x3c>
			print_formatted(output, " ");
   14dd0:	491f      	ldr	r1, [pc, #124]	; (14e50 <hexdump_line_print+0xa8>)
   14dd2:	4628      	mov	r0, r5
   14dd4:	f7ff fef4 	bl	14bc0 <print_formatted>
   14dd8:	e00b      	b.n	14df2 <hexdump_line_print+0x4a>
			print_formatted(output, "   ");
   14dda:	491e      	ldr	r1, [pc, #120]	; (14e54 <hexdump_line_print+0xac>)
   14ddc:	4628      	mov	r0, r5
   14dde:	f7ff feef 	bl	14bc0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   14de2:	3401      	adds	r4, #1
   14de4:	2c0f      	cmp	r4, #15
   14de6:	dc0c      	bgt.n	14e02 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
   14de8:	2c00      	cmp	r4, #0
   14dea:	dd02      	ble.n	14df2 <hexdump_line_print+0x4a>
   14dec:	f014 0f07 	tst.w	r4, #7
   14df0:	d0ee      	beq.n	14dd0 <hexdump_line_print+0x28>
		if (i < length) {
   14df2:	42b4      	cmp	r4, r6
   14df4:	d2f1      	bcs.n	14dda <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
   14df6:	5d3a      	ldrb	r2, [r7, r4]
   14df8:	4917      	ldr	r1, [pc, #92]	; (14e58 <hexdump_line_print+0xb0>)
   14dfa:	4628      	mov	r0, r5
   14dfc:	f7ff fee0 	bl	14bc0 <print_formatted>
   14e00:	e7ef      	b.n	14de2 <hexdump_line_print+0x3a>
	print_formatted(output, "|");
   14e02:	4916      	ldr	r1, [pc, #88]	; (14e5c <hexdump_line_print+0xb4>)
   14e04:	4628      	mov	r0, r5
   14e06:	f7ff fedb 	bl	14bc0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   14e0a:	2400      	movs	r4, #0
   14e0c:	e009      	b.n	14e22 <hexdump_line_print+0x7a>
			print_formatted(output, " ");
   14e0e:	4910      	ldr	r1, [pc, #64]	; (14e50 <hexdump_line_print+0xa8>)
   14e10:	4628      	mov	r0, r5
   14e12:	f7ff fed5 	bl	14bc0 <print_formatted>
   14e16:	e00b      	b.n	14e30 <hexdump_line_print+0x88>
			print_formatted(output, "%c",
   14e18:	4911      	ldr	r1, [pc, #68]	; (14e60 <hexdump_line_print+0xb8>)
   14e1a:	4628      	mov	r0, r5
   14e1c:	f7ff fed0 	bl	14bc0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   14e20:	3401      	adds	r4, #1
   14e22:	2c0f      	cmp	r4, #15
   14e24:	dc12      	bgt.n	14e4c <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
   14e26:	2c00      	cmp	r4, #0
   14e28:	dd02      	ble.n	14e30 <hexdump_line_print+0x88>
   14e2a:	f014 0f07 	tst.w	r4, #7
   14e2e:	d0ee      	beq.n	14e0e <hexdump_line_print+0x66>
		if (i < length) {
   14e30:	42b4      	cmp	r4, r6
   14e32:	d206      	bcs.n	14e42 <hexdump_line_print+0x9a>
			unsigned char c = (unsigned char)data[i];
   14e34:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
   14e36:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
   14e3a:	2b5e      	cmp	r3, #94	; 0x5e
   14e3c:	d9ec      	bls.n	14e18 <hexdump_line_print+0x70>
   14e3e:	222e      	movs	r2, #46	; 0x2e
   14e40:	e7ea      	b.n	14e18 <hexdump_line_print+0x70>
			print_formatted(output, " ");
   14e42:	4903      	ldr	r1, [pc, #12]	; (14e50 <hexdump_line_print+0xa8>)
   14e44:	4628      	mov	r0, r5
   14e46:	f7ff febb 	bl	14bc0 <print_formatted>
   14e4a:	e7e9      	b.n	14e20 <hexdump_line_print+0x78>
}
   14e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14e50:	0002db2c 	.word	0x0002db2c
   14e54:	0002db44 	.word	0x0002db44
   14e58:	0002db3c 	.word	0x0002db3c
   14e5c:	0002db48 	.word	0x0002db48
   14e60:	0002db4c 	.word	0x0002db4c

00014e64 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   14e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14e68:	b084      	sub	sp, #16
   14e6a:	4604      	mov	r4, r0
   14e6c:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   14e70:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   14e72:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
   14e74:	b995      	cbnz	r5, 14e9c <log_output_process+0x38>
		prefix_offset = 0;
		/* source set to 1 indicates raw string and contrary to printk
		 * case it should not append anything to the output (printk is
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   14e76:	2b01      	cmp	r3, #1
   14e78:	d01b      	beq.n	14eb2 <log_output_process+0x4e>
   14e7a:	4817      	ldr	r0, [pc, #92]	; (14ed8 <log_output_process+0x74>)
		prefix_offset = 0;
   14e7c:	f04f 0800 	mov.w	r8, #0
	}

	if (package) {
   14e80:	b127      	cbz	r7, 14e8c <log_output_process+0x28>
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   14e82:	463b      	mov	r3, r7
   14e84:	4622      	mov	r2, r4
   14e86:	4915      	ldr	r1, [pc, #84]	; (14edc <log_output_process+0x78>)
   14e88:	f010 fd4c 	bl	25924 <cbpprintf_external>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   14e8c:	b9ae      	cbnz	r6, 14eba <log_output_process+0x56>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   14e8e:	b9ed      	cbnz	r5, 14ecc <log_output_process+0x68>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   14e90:	4620      	mov	r0, r4
   14e92:	f011 ffb5 	bl	26e00 <log_output_flush>
}
   14e96:	b004      	add	sp, #16
   14e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		prefix_offset = prefix_print(output, flags, 0, timestamp, domain, source, level);
   14e9c:	9502      	str	r5, [sp, #8]
   14e9e:	9301      	str	r3, [sp, #4]
   14ea0:	9200      	str	r2, [sp, #0]
   14ea2:	460b      	mov	r3, r1
   14ea4:	2200      	movs	r2, #0
   14ea6:	990e      	ldr	r1, [sp, #56]	; 0x38
   14ea8:	f7ff ff30 	bl	14d0c <prefix_print>
   14eac:	4680      	mov	r8, r0
		cb = out_func;
   14eae:	480c      	ldr	r0, [pc, #48]	; (14ee0 <log_output_process+0x7c>)
   14eb0:	e7e6      	b.n	14e80 <log_output_process+0x1c>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   14eb2:	480b      	ldr	r0, [pc, #44]	; (14ee0 <log_output_process+0x7c>)
		prefix_offset = 0;
   14eb4:	f04f 0800 	mov.w	r8, #0
   14eb8:	e7e2      	b.n	14e80 <log_output_process+0x1c>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
   14eba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14ebc:	9300      	str	r3, [sp, #0]
   14ebe:	4643      	mov	r3, r8
   14ec0:	4632      	mov	r2, r6
   14ec2:	990c      	ldr	r1, [sp, #48]	; 0x30
   14ec4:	4620      	mov	r0, r4
   14ec6:	f011 ff80 	bl	26dca <log_msg_hexdump>
   14eca:	e7e0      	b.n	14e8e <log_output_process+0x2a>
		postfix_print(output, flags, level);
   14ecc:	462a      	mov	r2, r5
   14ece:	990e      	ldr	r1, [sp, #56]	; 0x38
   14ed0:	4620      	mov	r0, r4
   14ed2:	f011 ff6e 	bl	26db2 <postfix_print>
   14ed6:	e7db      	b.n	14e90 <log_output_process+0x2c>
   14ed8:	00026e53 	.word	0x00026e53
   14edc:	00026d8b 	.word	0x00026d8b
   14ee0:	00026e1b 	.word	0x00026e1b

00014ee4 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   14ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14ee8:	b086      	sub	sp, #24
   14eea:	4605      	mov	r5, r0
   14eec:	460c      	mov	r4, r1
   14eee:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   14ef0:	f8d1 8008 	ldr.w	r8, [r1, #8]
	return msg->hdr.desc.level;
   14ef4:	880e      	ldrh	r6, [r1, #0]
   14ef6:	f3c6 1682 	ubfx	r6, r6, #6, #3
	return msg->hdr.desc.domain;
   14efa:	7808      	ldrb	r0, [r1, #0]
   14efc:	f3c0 00c2 	ubfx	r0, r0, #3, #3
	return msg->hdr.source;
   14f00:	684b      	ldr	r3, [r1, #4]
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
   14f02:	b133      	cbz	r3, 14f12 <log_output_msg_process+0x2e>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   14f04:	4a11      	ldr	r2, [pc, #68]	; (14f4c <log_output_msg_process+0x68>)
   14f06:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
   14f08:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   14f0c:	2900      	cmp	r1, #0
   14f0e:	da18      	bge.n	14f42 <log_output_msg_process+0x5e>
   14f10:	2300      	movs	r3, #0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   14f12:	4622      	mov	r2, r4
   14f14:	f852 1b10 	ldr.w	r1, [r2], #16
   14f18:	f3c1 2149 	ubfx	r1, r1, #9, #10
	*len = msg->hdr.desc.data_len;
   14f1c:	8860      	ldrh	r0, [r4, #2]
   14f1e:	f3c0 00cb 	ubfx	r0, r0, #3, #12
	return msg->data + msg->hdr.desc.package_len;
   14f22:	1854      	adds	r4, r2, r1
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   14f24:	b901      	cbnz	r1, 14f28 <log_output_msg_process+0x44>
   14f26:	2200      	movs	r2, #0
   14f28:	9704      	str	r7, [sp, #16]
   14f2a:	9003      	str	r0, [sp, #12]
   14f2c:	9402      	str	r4, [sp, #8]
   14f2e:	9201      	str	r2, [sp, #4]
   14f30:	9600      	str	r6, [sp, #0]
   14f32:	2200      	movs	r2, #0
   14f34:	4641      	mov	r1, r8
   14f36:	4628      	mov	r0, r5
   14f38:	f7ff ff94 	bl	14e64 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   14f3c:	b006      	add	sp, #24
   14f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   14f42:	f7ff fe01 	bl	14b48 <log_source_name_get>
   14f46:	4603      	mov	r3, r0
   14f48:	e7e3      	b.n	14f12 <log_output_msg_process+0x2e>
   14f4a:	bf00      	nop
   14f4c:	0002d08c 	.word	0x0002d08c

00014f50 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   14f50:	b570      	push	{r4, r5, r6, lr}
   14f52:	b082      	sub	sp, #8
   14f54:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
   14f56:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   14f58:	f242 730f 	movw	r3, #9999	; 0x270f
   14f5c:	428b      	cmp	r3, r1
   14f5e:	bf28      	it	cs
   14f60:	460b      	movcs	r3, r1
   14f62:	4a0e      	ldr	r2, [pc, #56]	; (14f9c <log_output_dropped_process+0x4c>)
   14f64:	2105      	movs	r1, #5
   14f66:	4668      	mov	r0, sp
   14f68:	f010 fd7c 	bl	25a64 <snprintk>
   14f6c:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
   14f6e:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   14f70:	685b      	ldr	r3, [r3, #4]
   14f72:	220b      	movs	r2, #11
   14f74:	490a      	ldr	r1, [pc, #40]	; (14fa0 <log_output_dropped_process+0x50>)
   14f76:	4628      	mov	r0, r5
   14f78:	f011 fefa 	bl	26d70 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
   14f7c:	6863      	ldr	r3, [r4, #4]
   14f7e:	685b      	ldr	r3, [r3, #4]
   14f80:	4632      	mov	r2, r6
   14f82:	4669      	mov	r1, sp
   14f84:	4628      	mov	r0, r5
   14f86:	f011 fef3 	bl	26d70 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
   14f8a:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   14f8c:	685b      	ldr	r3, [r3, #4]
   14f8e:	221b      	movs	r2, #27
   14f90:	4904      	ldr	r1, [pc, #16]	; (14fa4 <log_output_dropped_process+0x54>)
   14f92:	4628      	mov	r0, r5
   14f94:	f011 feec 	bl	26d70 <buffer_write>
}
   14f98:	b002      	add	sp, #8
   14f9a:	bd70      	pop	{r4, r5, r6, pc}
   14f9c:	0002ef6c 	.word	0x0002ef6c
   14fa0:	0002db6c 	.word	0x0002db6c
   14fa4:	0002db50 	.word	0x0002db50

00014fa8 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   14fa8:	4b07      	ldr	r3, [pc, #28]	; (14fc8 <log_output_timestamp_freq_set+0x20>)
   14faa:	2201      	movs	r2, #1
   14fac:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   14fae:	e004      	b.n	14fba <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
   14fb0:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   14fb2:	4a05      	ldr	r2, [pc, #20]	; (14fc8 <log_output_timestamp_freq_set+0x20>)
   14fb4:	6813      	ldr	r3, [r2, #0]
   14fb6:	005b      	lsls	r3, r3, #1
   14fb8:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   14fba:	4b04      	ldr	r3, [pc, #16]	; (14fcc <log_output_timestamp_freq_set+0x24>)
   14fbc:	4298      	cmp	r0, r3
   14fbe:	d8f7      	bhi.n	14fb0 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
   14fc0:	4b03      	ldr	r3, [pc, #12]	; (14fd0 <log_output_timestamp_freq_set+0x28>)
   14fc2:	6018      	str	r0, [r3, #0]
}
   14fc4:	4770      	bx	lr
   14fc6:	bf00      	nop
   14fc8:	200079f4 	.word	0x200079f4
   14fcc:	000f4240 	.word	0x000f4240
   14fd0:	200079f8 	.word	0x200079f8

00014fd4 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   14fd4:	4b03      	ldr	r3, [pc, #12]	; (14fe4 <log_backend_rtt_init+0x10>)
   14fd6:	2201      	movs	r2, #1
   14fd8:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
   14fda:	4b03      	ldr	r3, [pc, #12]	; (14fe8 <log_backend_rtt_init+0x14>)
   14fdc:	4a03      	ldr	r2, [pc, #12]	; (14fec <log_backend_rtt_init+0x18>)
   14fde:	601a      	str	r2, [r3, #0]
}
   14fe0:	4770      	bx	lr
   14fe2:	bf00      	nop
   14fe4:	20008ec8 	.word	0x20008ec8
   14fe8:	20007a24 	.word	0x20007a24
   14fec:	20007a28 	.word	0x20007a28

00014ff0 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   14ff0:	4b01      	ldr	r3, [pc, #4]	; (14ff8 <format_set+0x8>)
   14ff2:	6019      	str	r1, [r3, #0]
	return 0;
}
   14ff4:	2000      	movs	r0, #0
   14ff6:	4770      	bx	lr
   14ff8:	20007a10 	.word	0x20007a10

00014ffc <on_failed_write>:
{
   14ffc:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
   14ffe:	b918      	cbnz	r0, 15008 <on_failed_write+0xc>
		host_present = false;
   15000:	4b07      	ldr	r3, [pc, #28]	; (15020 <on_failed_write+0x24>)
   15002:	2200      	movs	r2, #0
   15004:	701a      	strb	r2, [r3, #0]
}
   15006:	bd08      	pop	{r3, pc}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   15008:	4b06      	ldr	r3, [pc, #24]	; (15024 <on_failed_write+0x28>)
   1500a:	781b      	ldrb	r3, [r3, #0]
	} else if (is_sync_mode()) {
   1500c:	b123      	cbz	r3, 15018 <on_failed_write+0x1c>
	z_impl_k_busy_wait(usec_to_wait);
   1500e:	f241 3088 	movw	r0, #5000	; 0x1388
   15012:	f017 fc30 	bl	2c876 <z_impl_k_busy_wait>
}
   15016:	e7f6      	b.n	15006 <on_failed_write+0xa>
		k_msleep(CONFIG_LOG_BACKEND_RTT_RETRY_DELAY_MS);
   15018:	2005      	movs	r0, #5
   1501a:	f011 ff29 	bl	26e70 <k_msleep>
}
   1501e:	e7f2      	b.n	15006 <on_failed_write+0xa>
   15020:	20008ec8 	.word	0x20008ec8
   15024:	20008ec9 	.word	0x20008ec9

00015028 <on_write>:
{
   15028:	b538      	push	{r3, r4, r5, lr}
   1502a:	4604      	mov	r4, r0
	host_present = true;
   1502c:	4b0a      	ldr	r3, [pc, #40]	; (15058 <on_write+0x30>)
   1502e:	2201      	movs	r2, #1
   15030:	701a      	strb	r2, [r3, #0]
	return panic_mode;
   15032:	4b0a      	ldr	r3, [pc, #40]	; (1505c <on_write+0x34>)
   15034:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
   15036:	b92b      	cbnz	r3, 15044 <on_write+0x1c>
}
   15038:	bd38      	pop	{r3, r4, r5, pc}
			on_failed_write(retry_cnt--);
   1503a:	1e65      	subs	r5, r4, #1
   1503c:	4620      	mov	r0, r4
   1503e:	f7ff ffdd 	bl	14ffc <on_failed_write>
   15042:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   15044:	2000      	movs	r0, #0
   15046:	f00e fae7 	bl	23618 <SEGGER_RTT_HasDataUp>
   1504a:	2800      	cmp	r0, #0
   1504c:	d0f4      	beq.n	15038 <on_write+0x10>
   1504e:	4b02      	ldr	r3, [pc, #8]	; (15058 <on_write+0x30>)
   15050:	781b      	ldrb	r3, [r3, #0]
   15052:	2b00      	cmp	r3, #0
   15054:	d1f1      	bne.n	1503a <on_write+0x12>
   15056:	e7ef      	b.n	15038 <on_write+0x10>
   15058:	20008ec8 	.word	0x20008ec8
   1505c:	20008ec9 	.word	0x20008ec9

00015060 <data_out_block_mode>:
{
   15060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15062:	4606      	mov	r6, r0
   15064:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   15066:	2704      	movs	r7, #4
   15068:	e00d      	b.n	15086 <data_out_block_mode+0x26>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   1506a:	462a      	mov	r2, r5
   1506c:	4631      	mov	r1, r6
   1506e:	2000      	movs	r0, #0
   15070:	f00e fa38 	bl	234e4 <SEGGER_RTT_WriteSkipNoLock>
   15074:	4604      	mov	r4, r0
   15076:	e014      	b.n	150a2 <data_out_block_mode+0x42>
			on_write(retry_cnt);
   15078:	4638      	mov	r0, r7
   1507a:	f7ff ffd5 	bl	15028 <on_write>
	} while ((ret == 0) && host_present);
   1507e:	b9dc      	cbnz	r4, 150b8 <data_out_block_mode+0x58>
   15080:	4b11      	ldr	r3, [pc, #68]	; (150c8 <data_out_block_mode+0x68>)
   15082:	781b      	ldrb	r3, [r3, #0]
   15084:	b1c3      	cbz	r3, 150b8 <data_out_block_mode+0x58>
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   15086:	4b11      	ldr	r3, [pc, #68]	; (150cc <data_out_block_mode+0x6c>)
   15088:	781b      	ldrb	r3, [r3, #0]
		if (!is_sync_mode()) {
   1508a:	2b00      	cmp	r3, #0
   1508c:	d1ed      	bne.n	1506a <data_out_block_mode+0xa>
			RTT_LOCK();
   1508e:	f00e fad3 	bl	23638 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   15092:	462a      	mov	r2, r5
   15094:	4631      	mov	r1, r6
   15096:	2000      	movs	r0, #0
   15098:	f00e fa24 	bl	234e4 <SEGGER_RTT_WriteSkipNoLock>
   1509c:	4604      	mov	r4, r0
			RTT_UNLOCK();
   1509e:	f00e fad7 	bl	23650 <zephyr_rtt_mutex_unlock>
		if (ret) {
   150a2:	2c00      	cmp	r4, #0
   150a4:	d1e8      	bne.n	15078 <data_out_block_mode+0x18>
		} else if (host_present) {
   150a6:	4b08      	ldr	r3, [pc, #32]	; (150c8 <data_out_block_mode+0x68>)
   150a8:	781b      	ldrb	r3, [r3, #0]
   150aa:	2b00      	cmp	r3, #0
   150ac:	d0e7      	beq.n	1507e <data_out_block_mode+0x1e>
			retry_cnt--;
   150ae:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
   150b0:	4638      	mov	r0, r7
   150b2:	f7ff ffa3 	bl	14ffc <on_failed_write>
   150b6:	e7e2      	b.n	1507e <data_out_block_mode+0x1e>
	return ((ret == 0) && host_present) ? 0 : length;
   150b8:	b914      	cbnz	r4, 150c0 <data_out_block_mode+0x60>
   150ba:	4b03      	ldr	r3, [pc, #12]	; (150c8 <data_out_block_mode+0x68>)
   150bc:	781b      	ldrb	r3, [r3, #0]
   150be:	b903      	cbnz	r3, 150c2 <data_out_block_mode+0x62>
   150c0:	462c      	mov	r4, r5
}
   150c2:	4620      	mov	r0, r4
   150c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   150c6:	bf00      	nop
   150c8:	20008ec8 	.word	0x20008ec8
   150cc:	20008ec9 	.word	0x20008ec9

000150d0 <panic>:
{
   150d0:	b508      	push	{r3, lr}
	panic_mode = true;
   150d2:	4b03      	ldr	r3, [pc, #12]	; (150e0 <panic+0x10>)
   150d4:	2201      	movs	r2, #1
   150d6:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   150d8:	4802      	ldr	r0, [pc, #8]	; (150e4 <panic+0x14>)
   150da:	f011 fe91 	bl	26e00 <log_output_flush>
}
   150de:	bd08      	pop	{r3, pc}
   150e0:	20008ec9 	.word	0x20008ec9
   150e4:	0002dbec 	.word	0x0002dbec

000150e8 <dropped>:
{
   150e8:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   150ea:	4802      	ldr	r0, [pc, #8]	; (150f4 <dropped+0xc>)
   150ec:	f7ff ff30 	bl	14f50 <log_output_dropped_process>
}
   150f0:	bd08      	pop	{r3, pc}
   150f2:	bf00      	nop
   150f4:	0002dbec 	.word	0x0002dbec

000150f8 <process>:
{
   150f8:	b510      	push	{r4, lr}
   150fa:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   150fc:	4b04      	ldr	r3, [pc, #16]	; (15110 <process+0x18>)
   150fe:	6818      	ldr	r0, [r3, #0]
   15100:	f7ff fb44 	bl	1478c <log_format_func_t_get>
   15104:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
   15106:	220f      	movs	r2, #15
   15108:	4621      	mov	r1, r4
   1510a:	4802      	ldr	r0, [pc, #8]	; (15114 <process+0x1c>)
   1510c:	4798      	blx	r3
}
   1510e:	bd10      	pop	{r4, pc}
   15110:	20007a10 	.word	0x20007a10
   15114:	0002dbec 	.word	0x0002dbec

00015118 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   15118:	b570      	push	{r4, r5, r6, lr}
   1511a:	4606      	mov	r6, r0
   1511c:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
   1511e:	2400      	movs	r4, #0
   15120:	e005      	b.n	1512e <char_out+0x16>
			uart_poll_out(uart_dev, data[i]);
   15122:	5d31      	ldrb	r1, [r6, r4]
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
   15124:	4804      	ldr	r0, [pc, #16]	; (15138 <char_out+0x20>)
   15126:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   15128:	685b      	ldr	r3, [r3, #4]
   1512a:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   1512c:	3401      	adds	r4, #1
   1512e:	42ac      	cmp	r4, r5
   15130:	d3f7      	bcc.n	15122 <char_out+0xa>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
   15132:	4628      	mov	r0, r5
   15134:	bd70      	pop	{r4, r5, r6, pc}
   15136:	bf00      	nop
   15138:	0002ce38 	.word	0x0002ce38

0001513c <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   1513c:	4b01      	ldr	r3, [pc, #4]	; (15144 <format_set+0x8>)
   1513e:	6019      	str	r1, [r3, #0]
	return 0;
}
   15140:	2000      	movs	r0, #0
   15142:	4770      	bx	lr
   15144:	20007a58 	.word	0x20007a58

00015148 <panic>:
		}
	}
}

static void panic(struct log_backend const *const backend)
{
   15148:	b508      	push	{r3, lr}
	in_panic = true;
   1514a:	4b03      	ldr	r3, [pc, #12]	; (15158 <panic+0x10>)
   1514c:	2201      	movs	r2, #1
   1514e:	701a      	strb	r2, [r3, #0]
	log_output_flush(output);
   15150:	4802      	ldr	r0, [pc, #8]	; (1515c <panic+0x14>)
   15152:	f011 fe55 	bl	26e00 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
   15156:	bd08      	pop	{r3, pc}
   15158:	20008eca 	.word	0x20008eca
   1515c:	0002dc38 	.word	0x0002dc38

00015160 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
   15160:	b508      	push	{r3, lr}
	log_output_dropped_process(output, cnt);
   15162:	4802      	ldr	r0, [pc, #8]	; (1516c <dropped+0xc>)
   15164:	f7ff fef4 	bl	14f50 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
   15168:	bd08      	pop	{r3, pc}
   1516a:	bf00      	nop
   1516c:	0002dc38 	.word	0x0002dc38

00015170 <process>:
{
   15170:	b510      	push	{r4, lr}
   15172:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   15174:	4b04      	ldr	r3, [pc, #16]	; (15188 <process+0x18>)
   15176:	6818      	ldr	r0, [r3, #0]
   15178:	f7ff fb08 	bl	1478c <log_format_func_t_get>
   1517c:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
   1517e:	220f      	movs	r2, #15
   15180:	4621      	mov	r1, r4
   15182:	4802      	ldr	r0, [pc, #8]	; (1518c <process+0x1c>)
   15184:	4798      	blx	r3
}
   15186:	bd10      	pop	{r4, pc}
   15188:	20007a58 	.word	0x20007a58
   1518c:	0002dc38 	.word	0x0002dc38

00015190 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   15190:	b570      	push	{r4, r5, r6, lr}
   15192:	4605      	mov	r5, r0
	__asm__ volatile(
   15194:	f04f 0340 	mov.w	r3, #64	; 0x40
   15198:	f3ef 8611 	mrs	r6, BASEPRI
   1519c:	f383 8812 	msr	BASEPRI_MAX, r3
   151a0:	f3bf 8f6f 	isb	sy
   151a4:	4b0e      	ldr	r3, [pc, #56]	; (151e0 <pm_state_notify+0x50>)
   151a6:	681c      	ldr	r4, [r3, #0]
   151a8:	e00d      	b.n	151c6 <pm_state_notify+0x36>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
   151aa:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
   151ac:	b13a      	cbz	r2, 151be <pm_state_notify+0x2e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   151ae:	4b0d      	ldr	r3, [pc, #52]	; (151e4 <pm_state_notify+0x54>)
   151b0:	7d1b      	ldrb	r3, [r3, #20]
   151b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   151b6:	490c      	ldr	r1, [pc, #48]	; (151e8 <pm_state_notify+0x58>)
   151b8:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
   151bc:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   151be:	4623      	mov	r3, r4
	return node->next;
   151c0:	6824      	ldr	r4, [r4, #0]
   151c2:	b104      	cbz	r4, 151c6 <pm_state_notify+0x36>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   151c4:	b123      	cbz	r3, 151d0 <pm_state_notify+0x40>
   151c6:	b12c      	cbz	r4, 151d4 <pm_state_notify+0x44>
		if (entering_state) {
   151c8:	2d00      	cmp	r5, #0
   151ca:	d0ee      	beq.n	151aa <pm_state_notify+0x1a>
			callback = notifier->state_entry;
   151cc:	6862      	ldr	r2, [r4, #4]
   151ce:	e7ed      	b.n	151ac <pm_state_notify+0x1c>
   151d0:	461c      	mov	r4, r3
   151d2:	e7f8      	b.n	151c6 <pm_state_notify+0x36>
	__asm__ volatile(
   151d4:	f386 8811 	msr	BASEPRI, r6
   151d8:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   151dc:	bd70      	pop	{r4, r5, r6, pc}
   151de:	bf00      	nop
   151e0:	20007a74 	.word	0x20007a74
   151e4:	20008e80 	.word	0x20008e80
   151e8:	20007a68 	.word	0x20007a68

000151ec <pm_exit_pos_ops>:
{
   151ec:	b508      	push	{r3, lr}
	if (pm_state_exit_post_ops != NULL) {
   151ee:	4b06      	ldr	r3, [pc, #24]	; (15208 <pm_exit_pos_ops+0x1c>)
   151f0:	b123      	cbz	r3, 151fc <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
   151f2:	7841      	ldrb	r1, [r0, #1]
   151f4:	7800      	ldrb	r0, [r0, #0]
   151f6:	f012 f9d0 	bl	2759a <pm_state_exit_post_ops>
}
   151fa:	bd08      	pop	{r3, pc}
   151fc:	2300      	movs	r3, #0
   151fe:	f383 8811 	msr	BASEPRI, r3
   15202:	f3bf 8f6f 	isb	sy
   15206:	e7f8      	b.n	151fa <pm_exit_pos_ops+0xe>
   15208:	0002759b 	.word	0x0002759b

0001520c <pm_system_resume>:

void pm_system_resume(void)
{
   1520c:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   1520e:	4b0e      	ldr	r3, [pc, #56]	; (15248 <pm_system_resume+0x3c>)
   15210:	7d1c      	ldrb	r4, [r3, #20]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   15212:	4621      	mov	r1, r4
   15214:	480d      	ldr	r0, [pc, #52]	; (1524c <pm_system_resume+0x40>)
   15216:	f011 fe42 	bl	26e9e <atomic_test_and_clear_bit>
   1521a:	b900      	cbnz	r0, 1521e <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
   1521c:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
   1521e:	0065      	lsls	r5, r4, #1
   15220:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   15224:	4e0a      	ldr	r6, [pc, #40]	; (15250 <pm_system_resume+0x44>)
   15226:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   1522a:	f7ff ffdf 	bl	151ec <pm_exit_pos_ops>
		pm_state_notify(false);
   1522e:	2000      	movs	r0, #0
   15230:	f7ff ffae 	bl	15190 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   15234:	192b      	adds	r3, r5, r4
   15236:	0099      	lsls	r1, r3, #2
   15238:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1523c:	2200      	movs	r2, #0
   1523e:	5072      	str	r2, [r6, r1]
   15240:	605a      	str	r2, [r3, #4]
   15242:	609a      	str	r2, [r3, #8]
}
   15244:	e7ea      	b.n	1521c <pm_system_resume+0x10>
   15246:	bf00      	nop
   15248:	20008e80 	.word	0x20008e80
   1524c:	20007a7c 	.word	0x20007a7c
   15250:	20007a68 	.word	0x20007a68

00015254 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   15254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15256:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
   15258:	4b38      	ldr	r3, [pc, #224]	; (1533c <pm_system_suspend+0xe8>)
   1525a:	7d1c      	ldrb	r4, [r3, #20]
	__asm__ volatile(
   1525c:	f04f 0340 	mov.w	r3, #64	; 0x40
   15260:	f3ef 8611 	mrs	r6, BASEPRI
   15264:	f383 8812 	msr	BASEPRI_MAX, r3
   15268:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   1526c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   15270:	4b33      	ldr	r3, [pc, #204]	; (15340 <pm_system_suspend+0xec>)
   15272:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   15276:	2b00      	cmp	r3, #0
   15278:	d039      	beq.n	152ee <pm_system_suspend+0x9a>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   1527a:	4b32      	ldr	r3, [pc, #200]	; (15344 <pm_system_suspend+0xf0>)
   1527c:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   15280:	4f2f      	ldr	r7, [pc, #188]	; (15340 <pm_system_suspend+0xec>)
   15282:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   15286:	eb07 0382 	add.w	r3, r7, r2, lsl #2
   1528a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1528e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   15292:	2300      	movs	r3, #0
   15294:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
   15298:	f386 8811 	msr	BASEPRI, r6
   1529c:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   152a0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   152a4:	4a27      	ldr	r2, [pc, #156]	; (15344 <pm_system_suspend+0xf0>)
   152a6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   152aa:	2b00      	cmp	r3, #0
   152ac:	d044      	beq.n	15338 <pm_system_suspend+0xe4>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   152ae:	f1b5 3fff 	cmp.w	r5, #4294967295
   152b2:	d12b      	bne.n	1530c <pm_system_suspend+0xb8>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   152b4:	f00f f91a 	bl	244ec <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   152b8:	2001      	movs	r0, #1
   152ba:	f7ff ff69 	bl	15190 <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
   152be:	4621      	mov	r1, r4
   152c0:	4821      	ldr	r0, [pc, #132]	; (15348 <pm_system_suspend+0xf4>)
   152c2:	f011 fe08 	bl	26ed6 <atomic_set_bit>
	if (pm_state_set != NULL) {
   152c6:	4b21      	ldr	r3, [pc, #132]	; (1534c <pm_system_suspend+0xf8>)
   152c8:	b15b      	cbz	r3, 152e2 <pm_system_suspend+0x8e>
		pm_state_set(info->state, info->substate_id);
   152ca:	4a1e      	ldr	r2, [pc, #120]	; (15344 <pm_system_suspend+0xf0>)
   152cc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   152d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   152d4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   152d8:	7859      	ldrb	r1, [r3, #1]
   152da:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
   152de:	f012 f954 	bl	2758a <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   152e2:	f7ff ff93 	bl	1520c <pm_system_resume>
	k_sched_unlock();
   152e6:	f00f fb03 	bl	248f0 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   152ea:	2001      	movs	r0, #1
}
   152ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		info = pm_policy_next_state(id, ticks);
   152ee:	4601      	mov	r1, r0
   152f0:	4620      	mov	r0, r4
   152f2:	f000 f831 	bl	15358 <pm_policy_next_state>
		if (info != NULL) {
   152f6:	2800      	cmp	r0, #0
   152f8:	d0ce      	beq.n	15298 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
   152fa:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   152fe:	4b11      	ldr	r3, [pc, #68]	; (15344 <pm_system_suspend+0xf0>)
   15300:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   15304:	c807      	ldmia	r0, {r0, r1, r2}
   15306:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   1530a:	e7c5      	b.n	15298 <pm_system_suspend+0x44>
		     k_us_to_ticks_ceil32(
   1530c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   15310:	4b0c      	ldr	r3, [pc, #48]	; (15344 <pm_system_suspend+0xf0>)
   15312:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   15316:	6898      	ldr	r0, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
   15318:	0c41      	lsrs	r1, r0, #17
   1531a:	03c0      	lsls	r0, r0, #15
   1531c:	4b0c      	ldr	r3, [pc, #48]	; (15350 <pm_system_suspend+0xfc>)
   1531e:	18c0      	adds	r0, r0, r3
   15320:	4a0c      	ldr	r2, [pc, #48]	; (15354 <pm_system_suspend+0x100>)
   15322:	f04f 0300 	mov.w	r3, #0
   15326:	f141 0100 	adc.w	r1, r1, #0
   1532a:	f7ea fee9 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   1532e:	2101      	movs	r1, #1
   15330:	1a28      	subs	r0, r5, r0
   15332:	f017 fa6d 	bl	2c810 <z_set_timeout_expiry>
   15336:	e7bd      	b.n	152b4 <pm_system_suspend+0x60>
		return false;
   15338:	2000      	movs	r0, #0
   1533a:	e7d7      	b.n	152ec <pm_system_suspend+0x98>
   1533c:	20008e80 	.word	0x20008e80
   15340:	20007a5c 	.word	0x20007a5c
   15344:	20007a68 	.word	0x20007a68
   15348:	20007a7c 	.word	0x20007a7c
   1534c:	0002758b 	.word	0x0002758b
   15350:	000f423f 	.word	0x000f423f
   15354:	000f4240 	.word	0x000f4240

00015358 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   15358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1535c:	b082      	sub	sp, #8
   1535e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   15360:	a901      	add	r1, sp, #4
   15362:	f000 f845 	bl	153f0 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   15366:	1e44      	subs	r4, r0, #1
   15368:	b224      	sxth	r4, r4
   1536a:	e007      	b.n	1537c <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
   1536c:	f1b6 3fff 	cmp.w	r6, #4294967295
   15370:	d033      	beq.n	153da <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
   15372:	4480      	add	r8, r0
		if ((ticks == K_TICKS_FOREVER) ||
   15374:	45b0      	cmp	r8, r6
   15376:	d930      	bls.n	153da <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   15378:	3c01      	subs	r4, #1
   1537a:	b224      	sxth	r4, r4
   1537c:	2c00      	cmp	r4, #0
   1537e:	db2b      	blt.n	153d8 <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
   15380:	9b01      	ldr	r3, [sp, #4]
   15382:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   15386:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
   1538a:	7869      	ldrb	r1, [r5, #1]
   1538c:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
   15390:	f011 fdb4 	bl	26efc <pm_policy_state_lock_is_active>
   15394:	2800      	cmp	r0, #0
   15396:	d1ef      	bne.n	15378 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
   15398:	6868      	ldr	r0, [r5, #4]
   1539a:	0c41      	lsrs	r1, r0, #17
   1539c:	03c0      	lsls	r0, r0, #15
   1539e:	4f11      	ldr	r7, [pc, #68]	; (153e4 <pm_policy_next_state+0x8c>)
   153a0:	19c0      	adds	r0, r0, r7
   153a2:	4a11      	ldr	r2, [pc, #68]	; (153e8 <pm_policy_next_state+0x90>)
   153a4:	f04f 0300 	mov.w	r3, #0
   153a8:	f141 0100 	adc.w	r1, r1, #0
   153ac:	f7ea fea8 	bl	100 <__aeabi_uldivmod>
   153b0:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
   153b2:	68ab      	ldr	r3, [r5, #8]
   153b4:	0c59      	lsrs	r1, r3, #17
   153b6:	03db      	lsls	r3, r3, #15
   153b8:	19d8      	adds	r0, r3, r7
   153ba:	4a0b      	ldr	r2, [pc, #44]	; (153e8 <pm_policy_next_state+0x90>)
   153bc:	f04f 0300 	mov.w	r3, #0
   153c0:	f141 0100 	adc.w	r1, r1, #0
   153c4:	f7ea fe9c 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   153c8:	4b08      	ldr	r3, [pc, #32]	; (153ec <pm_policy_next_state+0x94>)
   153ca:	681b      	ldr	r3, [r3, #0]
   153cc:	f1b3 3fff 	cmp.w	r3, #4294967295
   153d0:	d0cc      	beq.n	1536c <pm_policy_next_state+0x14>
   153d2:	4283      	cmp	r3, r0
   153d4:	d8ca      	bhi.n	1536c <pm_policy_next_state+0x14>
   153d6:	e7cf      	b.n	15378 <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
   153d8:	2500      	movs	r5, #0
}
   153da:	4628      	mov	r0, r5
   153dc:	b002      	add	sp, #8
   153de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   153e2:	bf00      	nop
   153e4:	000f423f 	.word	0x000f423f
   153e8:	000f4240 	.word	0x000f4240
   153ec:	200006d8 	.word	0x200006d8

000153f0 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   153f0:	b908      	cbnz	r0, 153f6 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   153f2:	4b02      	ldr	r3, [pc, #8]	; (153fc <pm_state_cpu_get_all+0xc>)
   153f4:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   153f6:	2000      	movs	r0, #0
   153f8:	4770      	bx	lr
   153fa:	bf00      	nop
   153fc:	0002dc4c 	.word	0x0002dc4c

00015400 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   15400:	b470      	push	{r4, r5, r6}
   15402:	b08d      	sub	sp, #52	; 0x34
   15404:	4606      	mov	r6, r0
   15406:	460d      	mov	r5, r1
	const unsigned int rconst[11] = {
   15408:	f10d 0c04 	add.w	ip, sp, #4
   1540c:	4c2b      	ldr	r4, [pc, #172]	; (154bc <tc_aes128_set_encrypt_key+0xbc>)
   1540e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   15410:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   15414:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   15416:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1541a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   1541e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   15422:	2e00      	cmp	r6, #0
   15424:	d045      	beq.n	154b2 <tc_aes128_set_encrypt_key+0xb2>
   15426:	4630      	mov	r0, r6
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   15428:	2d00      	cmp	r5, #0
   1542a:	d044      	beq.n	154b6 <tc_aes128_set_encrypt_key+0xb6>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
   1542c:	2300      	movs	r3, #0
   1542e:	e00f      	b.n	15450 <tc_aes128_set_encrypt_key+0x50>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   15430:	f815 4023 	ldrb.w	r4, [r5, r3, lsl #2]
   15434:	eb05 0183 	add.w	r1, r5, r3, lsl #2
   15438:	784a      	ldrb	r2, [r1, #1]
   1543a:	0412      	lsls	r2, r2, #16
   1543c:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   15440:	788c      	ldrb	r4, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   15442:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   15446:	78c9      	ldrb	r1, [r1, #3]
   15448:	430a      	orrs	r2, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1544a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < Nk; ++i) {
   1544e:	3301      	adds	r3, #1
   15450:	2b03      	cmp	r3, #3
   15452:	d9ed      	bls.n	15430 <tc_aes128_set_encrypt_key+0x30>
   15454:	e006      	b.n	15464 <tc_aes128_set_encrypt_key+0x64>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
   15456:	1f19      	subs	r1, r3, #4
   15458:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   1545c:	404a      	eors	r2, r1
   1545e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
   15462:	3301      	adds	r3, #1
   15464:	2b2b      	cmp	r3, #43	; 0x2b
   15466:	d820      	bhi.n	154aa <tc_aes128_set_encrypt_key+0xaa>
		t = s->words[i-1];
   15468:	1e5a      	subs	r2, r3, #1
   1546a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if ((i % Nk) == 0) {
   1546e:	f013 0f03 	tst.w	r3, #3
   15472:	d1f0      	bne.n	15456 <tc_aes128_set_encrypt_key+0x56>
	return (((a) >> 24)|((a) << 8));
   15474:	ea4f 6232 	mov.w	r2, r2, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   15478:	0e11      	lsrs	r1, r2, #24
   1547a:	4c11      	ldr	r4, [pc, #68]	; (154c0 <tc_aes128_set_encrypt_key+0xc0>)
   1547c:	5c65      	ldrb	r5, [r4, r1]
   1547e:	f3c2 4107 	ubfx	r1, r2, #16, #8
   15482:	5c61      	ldrb	r1, [r4, r1]
   15484:	0409      	lsls	r1, r1, #16
   15486:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   1548a:	f3c2 2507 	ubfx	r5, r2, #8, #8
   1548e:	5d65      	ldrb	r5, [r4, r5]
   15490:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   15494:	b2d2      	uxtb	r2, r2
   15496:	5ca2      	ldrb	r2, [r4, r2]
   15498:	4311      	orrs	r1, r2
   1549a:	f023 0203 	bic.w	r2, r3, #3
   1549e:	3230      	adds	r2, #48	; 0x30
   154a0:	446a      	add	r2, sp
   154a2:	f852 2c2c 	ldr.w	r2, [r2, #-44]
   154a6:	404a      	eors	r2, r1
   154a8:	e7d5      	b.n	15456 <tc_aes128_set_encrypt_key+0x56>
	}

	return TC_CRYPTO_SUCCESS;
   154aa:	2001      	movs	r0, #1
}
   154ac:	b00d      	add	sp, #52	; 0x34
   154ae:	bc70      	pop	{r4, r5, r6}
   154b0:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   154b2:	2000      	movs	r0, #0
   154b4:	e7fa      	b.n	154ac <tc_aes128_set_encrypt_key+0xac>
		return TC_CRYPTO_FAIL;
   154b6:	2000      	movs	r0, #0
   154b8:	e7f8      	b.n	154ac <tc_aes128_set_encrypt_key+0xac>
   154ba:	bf00      	nop
   154bc:	0002d1f0 	.word	0x0002d1f0
   154c0:	0002dc4c 	.word	0x0002dc4c

000154c4 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   154c4:	2800      	cmp	r0, #0
   154c6:	d04e      	beq.n	15566 <tc_aes_encrypt+0xa2>
{
   154c8:	b570      	push	{r4, r5, r6, lr}
   154ca:	b084      	sub	sp, #16
   154cc:	4615      	mov	r5, r2
   154ce:	4606      	mov	r6, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   154d0:	2900      	cmp	r1, #0
   154d2:	d04a      	beq.n	1556a <tc_aes_encrypt+0xa6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   154d4:	2a00      	cmp	r2, #0
   154d6:	d04a      	beq.n	1556e <tc_aes_encrypt+0xaa>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   154d8:	2310      	movs	r3, #16
   154da:	460a      	mov	r2, r1
   154dc:	4619      	mov	r1, r3
   154de:	4668      	mov	r0, sp
   154e0:	f011 fd0e 	bl	26f00 <_copy>
	add_round_key(state, s->words);
   154e4:	4629      	mov	r1, r5
   154e6:	4668      	mov	r0, sp
   154e8:	f011 fd24 	bl	26f34 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   154ec:	2400      	movs	r4, #0
   154ee:	e014      	b.n	1551a <tc_aes_encrypt+0x56>
		s[i] = sbox[s[i]];
   154f0:	f81d 1003 	ldrb.w	r1, [sp, r3]
   154f4:	481f      	ldr	r0, [pc, #124]	; (15574 <tc_aes_encrypt+0xb0>)
   154f6:	5c41      	ldrb	r1, [r0, r1]
   154f8:	f80d 1003 	strb.w	r1, [sp, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   154fc:	3301      	adds	r3, #1
   154fe:	2b0f      	cmp	r3, #15
   15500:	d9f6      	bls.n	154f0 <tc_aes_encrypt+0x2c>
		sub_bytes(state);
		shift_rows(state);
   15502:	4668      	mov	r0, sp
   15504:	f011 fd57 	bl	26fb6 <shift_rows>
		mix_columns(state);
   15508:	4668      	mov	r0, sp
   1550a:	f011 fdce 	bl	270aa <mix_columns>
		add_round_key(state, s->words + Nb*(i+1));
   1550e:	3401      	adds	r4, #1
   15510:	eb05 1104 	add.w	r1, r5, r4, lsl #4
   15514:	4668      	mov	r0, sp
   15516:	f011 fd0d 	bl	26f34 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1551a:	2c08      	cmp	r4, #8
   1551c:	d801      	bhi.n	15522 <tc_aes_encrypt+0x5e>
	for (i = 0; i < (Nb * Nk); ++i) {
   1551e:	2300      	movs	r3, #0
   15520:	e7ed      	b.n	154fe <tc_aes_encrypt+0x3a>
   15522:	2300      	movs	r3, #0
   15524:	e006      	b.n	15534 <tc_aes_encrypt+0x70>
		s[i] = sbox[s[i]];
   15526:	f81d 2003 	ldrb.w	r2, [sp, r3]
   1552a:	4912      	ldr	r1, [pc, #72]	; (15574 <tc_aes_encrypt+0xb0>)
   1552c:	5c8a      	ldrb	r2, [r1, r2]
   1552e:	f80d 2003 	strb.w	r2, [sp, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   15532:	3301      	adds	r3, #1
   15534:	2b0f      	cmp	r3, #15
   15536:	d9f6      	bls.n	15526 <tc_aes_encrypt+0x62>
	}

	sub_bytes(state);
	shift_rows(state);
   15538:	4668      	mov	r0, sp
   1553a:	f011 fd3c 	bl	26fb6 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1553e:	1c61      	adds	r1, r4, #1
   15540:	eb05 1101 	add.w	r1, r5, r1, lsl #4
   15544:	4668      	mov	r0, sp
   15546:	f011 fcf5 	bl	26f34 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1554a:	2310      	movs	r3, #16
   1554c:	466a      	mov	r2, sp
   1554e:	4619      	mov	r1, r3
   15550:	4630      	mov	r0, r6
   15552:	f011 fcd5 	bl	26f00 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   15556:	2210      	movs	r2, #16
   15558:	2100      	movs	r1, #0
   1555a:	4668      	mov	r0, sp
   1555c:	f011 fcdd 	bl	26f1a <_set>

	return TC_CRYPTO_SUCCESS;
   15560:	2001      	movs	r0, #1
}
   15562:	b004      	add	sp, #16
   15564:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   15566:	2000      	movs	r0, #0
}
   15568:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   1556a:	2000      	movs	r0, #0
   1556c:	e7f9      	b.n	15562 <tc_aes_encrypt+0x9e>
		return TC_CRYPTO_FAIL;
   1556e:	2000      	movs	r0, #0
   15570:	e7f7      	b.n	15562 <tc_aes_encrypt+0x9e>
   15572:	bf00      	nop
   15574:	0002dc4c 	.word	0x0002dc4c

00015578 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   15578:	4901      	ldr	r1, [pc, #4]	; (15580 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1557a:	2210      	movs	r2, #16
	str	r2, [r1]
   1557c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1557e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   15580:	e000ed10 	.word	0xe000ed10

00015584 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   15584:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   15586:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   15588:	f380 8811 	msr	BASEPRI, r0
	isb
   1558c:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   15590:	f3bf 8f4f 	dsb	sy
   15594:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   15596:	b662      	cpsie	i
	isb
   15598:	f3bf 8f6f 	isb	sy

	bx	lr
   1559c:	4770      	bx	lr
   1559e:	bf00      	nop

000155a0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   155a0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   155a2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   155a4:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   155a8:	f3bf 8f4f 	dsb	sy
   155ac:	bf20      	wfe

	msr	BASEPRI, r0
   155ae:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   155b2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   155b4:	4770      	bx	lr
   155b6:	bf00      	nop

000155b8 <esf_dump>:
#include <kernel_arch_data.h>
#include <zephyr/logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
   155b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   155bc:	b082      	sub	sp, #8
   155be:	af00      	add	r7, sp, #0
   155c0:	4604      	mov	r4, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   155c2:	f8d0 e000 	ldr.w	lr, [r0]
   155c6:	f8d0 c004 	ldr.w	ip, [r0, #4]
   155ca:	6886      	ldr	r6, [r0, #8]
   155cc:	466d      	mov	r5, sp
   155ce:	b08a      	sub	sp, #40	; 0x28
   155d0:	466b      	mov	r3, sp
   155d2:	f113 0210 	adds.w	r2, r3, #16
   155d6:	f000 80f3 	beq.w	157c0 <esf_dump+0x208>
   155da:	2114      	movs	r1, #20
   155dc:	b18a      	cbz	r2, 15602 <esf_dump+0x4a>
   155de:	4608      	mov	r0, r1
   155e0:	2904      	cmp	r1, #4
   155e2:	dd03      	ble.n	155ec <esf_dump+0x34>
   155e4:	f8df 8208 	ldr.w	r8, [pc, #520]	; 157f0 <esf_dump+0x238>
   155e8:	f8c3 8014 	str.w	r8, [r3, #20]
   155ec:	2808      	cmp	r0, #8
   155ee:	dd01      	ble.n	155f4 <esf_dump+0x3c>
   155f0:	f8c3 e018 	str.w	lr, [r3, #24]
   155f4:	280c      	cmp	r0, #12
   155f6:	dd01      	ble.n	155fc <esf_dump+0x44>
   155f8:	f8c3 c01c 	str.w	ip, [r3, #28]
   155fc:	2810      	cmp	r0, #16
   155fe:	dd00      	ble.n	15602 <esf_dump+0x4a>
   15600:	621e      	str	r6, [r3, #32]
   15602:	2913      	cmp	r1, #19
   15604:	f340 80df 	ble.w	157c6 <esf_dump+0x20e>
   15608:	f04f 0c14 	mov.w	ip, #20
   1560c:	b13a      	cbz	r2, 1561e <esf_dump+0x66>
   1560e:	2105      	movs	r1, #5
   15610:	7139      	strb	r1, [r7, #4]
   15612:	2100      	movs	r1, #0
   15614:	7179      	strb	r1, [r7, #5]
   15616:	71b9      	strb	r1, [r7, #6]
   15618:	71f9      	strb	r1, [r7, #7]
   1561a:	6878      	ldr	r0, [r7, #4]
   1561c:	6118      	str	r0, [r3, #16]
   1561e:	2100      	movs	r1, #0
   15620:	f36f 0100 	bfc	r1, #0, #1
   15624:	f36f 0141 	bfc	r1, #1, #1
   15628:	f36f 0182 	bfc	r1, #2, #1
   1562c:	f36f 01c5 	bfc	r1, #3, #3
   15630:	2301      	movs	r3, #1
   15632:	f363 1188 	bfi	r1, r3, #6, #3
   15636:	f40c 7c7d 	and.w	ip, ip, #1012	; 0x3f4
   1563a:	f36c 2152 	bfi	r1, ip, #9, #10
   1563e:	f36f 41de 	bfc	r1, #19, #12
   15642:	f36f 71df 	bfc	r1, #31, #1
   15646:	2300      	movs	r3, #0
   15648:	486a      	ldr	r0, [pc, #424]	; (157f4 <esf_dump+0x23c>)
   1564a:	f011 fb04 	bl	26c56 <z_impl_z_log_msg_static_create>
   1564e:	46ad      	mov	sp, r5
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   15650:	f8d4 e00c 	ldr.w	lr, [r4, #12]
   15654:	f8d4 c010 	ldr.w	ip, [r4, #16]
   15658:	6966      	ldr	r6, [r4, #20]
   1565a:	466d      	mov	r5, sp
   1565c:	b08a      	sub	sp, #40	; 0x28
   1565e:	466b      	mov	r3, sp
   15660:	f113 0210 	adds.w	r2, r3, #16
   15664:	f000 80b2 	beq.w	157cc <esf_dump+0x214>
   15668:	2114      	movs	r1, #20
   1566a:	b18a      	cbz	r2, 15690 <esf_dump+0xd8>
   1566c:	4608      	mov	r0, r1
   1566e:	2904      	cmp	r1, #4
   15670:	dd03      	ble.n	1567a <esf_dump+0xc2>
   15672:	f8df 8184 	ldr.w	r8, [pc, #388]	; 157f8 <esf_dump+0x240>
   15676:	f8c3 8014 	str.w	r8, [r3, #20]
   1567a:	2808      	cmp	r0, #8
   1567c:	dd01      	ble.n	15682 <esf_dump+0xca>
   1567e:	f8c3 e018 	str.w	lr, [r3, #24]
   15682:	280c      	cmp	r0, #12
   15684:	dd01      	ble.n	1568a <esf_dump+0xd2>
   15686:	f8c3 c01c 	str.w	ip, [r3, #28]
   1568a:	2810      	cmp	r0, #16
   1568c:	dd00      	ble.n	15690 <esf_dump+0xd8>
   1568e:	621e      	str	r6, [r3, #32]
   15690:	2913      	cmp	r1, #19
   15692:	f340 809e 	ble.w	157d2 <esf_dump+0x21a>
   15696:	f04f 0c14 	mov.w	ip, #20
   1569a:	b13a      	cbz	r2, 156ac <esf_dump+0xf4>
   1569c:	2105      	movs	r1, #5
   1569e:	7139      	strb	r1, [r7, #4]
   156a0:	2100      	movs	r1, #0
   156a2:	7179      	strb	r1, [r7, #5]
   156a4:	71b9      	strb	r1, [r7, #6]
   156a6:	71f9      	strb	r1, [r7, #7]
   156a8:	6878      	ldr	r0, [r7, #4]
   156aa:	6118      	str	r0, [r3, #16]
   156ac:	2100      	movs	r1, #0
   156ae:	f36f 0100 	bfc	r1, #0, #1
   156b2:	f36f 0141 	bfc	r1, #1, #1
   156b6:	f36f 0182 	bfc	r1, #2, #1
   156ba:	f36f 01c5 	bfc	r1, #3, #3
   156be:	2301      	movs	r3, #1
   156c0:	f363 1188 	bfi	r1, r3, #6, #3
   156c4:	f40c 7c7d 	and.w	ip, ip, #1012	; 0x3f4
   156c8:	f36c 2152 	bfi	r1, ip, #9, #10
   156cc:	f36f 41de 	bfc	r1, #19, #12
   156d0:	f36f 71df 	bfc	r1, #31, #1
   156d4:	2300      	movs	r3, #0
   156d6:	4847      	ldr	r0, [pc, #284]	; (157f4 <esf_dump+0x23c>)
   156d8:	f011 fabd 	bl	26c56 <z_impl_z_log_msg_static_create>
   156dc:	46ad      	mov	sp, r5
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   156de:	69e6      	ldr	r6, [r4, #28]
   156e0:	466d      	mov	r5, sp
   156e2:	b088      	sub	sp, #32
   156e4:	466b      	mov	r3, sp
   156e6:	f113 0210 	adds.w	r2, r3, #16
   156ea:	d075      	beq.n	157d8 <esf_dump+0x220>
   156ec:	210c      	movs	r1, #12
   156ee:	b14a      	cbz	r2, 15704 <esf_dump+0x14c>
   156f0:	4608      	mov	r0, r1
   156f2:	2904      	cmp	r1, #4
   156f4:	dd03      	ble.n	156fe <esf_dump+0x146>
   156f6:	f8df c104 	ldr.w	ip, [pc, #260]	; 157fc <esf_dump+0x244>
   156fa:	f8c3 c014 	str.w	ip, [r3, #20]
   156fe:	2808      	cmp	r0, #8
   15700:	dd00      	ble.n	15704 <esf_dump+0x14c>
   15702:	619e      	str	r6, [r3, #24]
   15704:	290b      	cmp	r1, #11
   15706:	dd6a      	ble.n	157de <esf_dump+0x226>
   15708:	f04f 0c0c 	mov.w	ip, #12
   1570c:	b13a      	cbz	r2, 1571e <esf_dump+0x166>
   1570e:	2103      	movs	r1, #3
   15710:	7139      	strb	r1, [r7, #4]
   15712:	2100      	movs	r1, #0
   15714:	7179      	strb	r1, [r7, #5]
   15716:	71b9      	strb	r1, [r7, #6]
   15718:	71f9      	strb	r1, [r7, #7]
   1571a:	6878      	ldr	r0, [r7, #4]
   1571c:	6118      	str	r0, [r3, #16]
   1571e:	2100      	movs	r1, #0
   15720:	f36f 0100 	bfc	r1, #0, #1
   15724:	f36f 0141 	bfc	r1, #1, #1
   15728:	f36f 0182 	bfc	r1, #2, #1
   1572c:	f36f 01c5 	bfc	r1, #3, #3
   15730:	2301      	movs	r3, #1
   15732:	f363 1188 	bfi	r1, r3, #6, #3
   15736:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   1573a:	f36c 2152 	bfi	r1, ip, #9, #10
   1573e:	f36f 41de 	bfc	r1, #19, #12
   15742:	f36f 71df 	bfc	r1, #31, #1
   15746:	2300      	movs	r3, #0
   15748:	482a      	ldr	r0, [pc, #168]	; (157f4 <esf_dump+0x23c>)
   1574a:	f011 fa84 	bl	26c56 <z_impl_z_log_msg_static_create>
   1574e:	46ad      	mov	sp, r5
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   15750:	69a4      	ldr	r4, [r4, #24]
   15752:	b088      	sub	sp, #32
   15754:	466b      	mov	r3, sp
   15756:	f113 0210 	adds.w	r2, r3, #16
   1575a:	d043      	beq.n	157e4 <esf_dump+0x22c>
   1575c:	210c      	movs	r1, #12
   1575e:	b13a      	cbz	r2, 15770 <esf_dump+0x1b8>
   15760:	4608      	mov	r0, r1
   15762:	2904      	cmp	r1, #4
   15764:	dd01      	ble.n	1576a <esf_dump+0x1b2>
   15766:	4d26      	ldr	r5, [pc, #152]	; (15800 <esf_dump+0x248>)
   15768:	615d      	str	r5, [r3, #20]
   1576a:	2808      	cmp	r0, #8
   1576c:	dd00      	ble.n	15770 <esf_dump+0x1b8>
   1576e:	619c      	str	r4, [r3, #24]
   15770:	290b      	cmp	r1, #11
   15772:	dd3a      	ble.n	157ea <esf_dump+0x232>
   15774:	240c      	movs	r4, #12
   15776:	b13a      	cbz	r2, 15788 <esf_dump+0x1d0>
   15778:	2103      	movs	r1, #3
   1577a:	7139      	strb	r1, [r7, #4]
   1577c:	2100      	movs	r1, #0
   1577e:	7179      	strb	r1, [r7, #5]
   15780:	71b9      	strb	r1, [r7, #6]
   15782:	71f9      	strb	r1, [r7, #7]
   15784:	6878      	ldr	r0, [r7, #4]
   15786:	6118      	str	r0, [r3, #16]
   15788:	2100      	movs	r1, #0
   1578a:	f36f 0100 	bfc	r1, #0, #1
   1578e:	f36f 0141 	bfc	r1, #1, #1
   15792:	f36f 0182 	bfc	r1, #2, #1
   15796:	f36f 01c5 	bfc	r1, #3, #3
   1579a:	2301      	movs	r3, #1
   1579c:	f363 1188 	bfi	r1, r3, #6, #3
   157a0:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   157a4:	f364 2152 	bfi	r1, r4, #9, #10
   157a8:	f36f 41de 	bfc	r1, #19, #12
   157ac:	f36f 71df 	bfc	r1, #31, #1
   157b0:	2300      	movs	r3, #0
   157b2:	4810      	ldr	r0, [pc, #64]	; (157f4 <esf_dump+0x23c>)
   157b4:	f011 fa4f 	bl	26c56 <z_impl_z_log_msg_static_create>
		esf->basic.pc);
}
   157b8:	3708      	adds	r7, #8
   157ba:	46bd      	mov	sp, r7
   157bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   157c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   157c4:	e70a      	b.n	155dc <esf_dump+0x24>
   157c6:	f06f 0c1b 	mvn.w	ip, #27
   157ca:	e71f      	b.n	1560c <esf_dump+0x54>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   157cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   157d0:	e74b      	b.n	1566a <esf_dump+0xb2>
   157d2:	f06f 0c1b 	mvn.w	ip, #27
   157d6:	e760      	b.n	1569a <esf_dump+0xe2>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   157d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   157dc:	e787      	b.n	156ee <esf_dump+0x136>
   157de:	f06f 0c1b 	mvn.w	ip, #27
   157e2:	e793      	b.n	1570c <esf_dump+0x154>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   157e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   157e8:	e7b9      	b.n	1575e <esf_dump+0x1a6>
   157ea:	f06f 041b 	mvn.w	r4, #27
   157ee:	e7c2      	b.n	15776 <esf_dump+0x1be>
   157f0:	0002dd4c 	.word	0x0002dd4c
   157f4:	0002d154 	.word	0x0002d154
   157f8:	0002dd7c 	.word	0x0002dd7c
   157fc:	0002ddac 	.word	0x0002ddac
   15800:	0002ddbc 	.word	0x0002ddbc

00015804 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   15804:	2800      	cmp	r0, #0
   15806:	db07      	blt.n	15818 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15808:	f000 021f 	and.w	r2, r0, #31
   1580c:	0940      	lsrs	r0, r0, #5
   1580e:	2301      	movs	r3, #1
   15810:	4093      	lsls	r3, r2
   15812:	4a02      	ldr	r2, [pc, #8]	; (1581c <__NVIC_EnableIRQ+0x18>)
   15814:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
   15818:	4770      	bx	lr
   1581a:	bf00      	nop
   1581c:	e000e100 	.word	0xe000e100

00015820 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   15820:	2800      	cmp	r0, #0
   15822:	db0c      	blt.n	1583e <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15824:	f000 021f 	and.w	r2, r0, #31
   15828:	0940      	lsrs	r0, r0, #5
   1582a:	2301      	movs	r3, #1
   1582c:	4093      	lsls	r3, r2
   1582e:	3020      	adds	r0, #32
   15830:	4a03      	ldr	r2, [pc, #12]	; (15840 <__NVIC_DisableIRQ+0x20>)
   15832:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   15836:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1583a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
   1583e:	4770      	bx	lr
   15840:	e000e100 	.word	0xe000e100

00015844 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   15844:	2800      	cmp	r0, #0
   15846:	db08      	blt.n	1585a <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15848:	0149      	lsls	r1, r1, #5
   1584a:	b2c9      	uxtb	r1, r1
   1584c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
   15850:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
   15854:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
   15858:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1585a:	f000 000f 	and.w	r0, r0, #15
   1585e:	0149      	lsls	r1, r1, #5
   15860:	b2c9      	uxtb	r1, r1
   15862:	4b01      	ldr	r3, [pc, #4]	; (15868 <__NVIC_SetPriority+0x24>)
   15864:	5419      	strb	r1, [r3, r0]
  }
}
   15866:	4770      	bx	lr
   15868:	e000ed14 	.word	0xe000ed14

0001586c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   1586c:	0942      	lsrs	r2, r0, #5
   1586e:	4b05      	ldr	r3, [pc, #20]	; (15884 <arch_irq_is_enabled+0x18>)
   15870:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   15874:	f000 001f 	and.w	r0, r0, #31
   15878:	2301      	movs	r3, #1
   1587a:	fa03 f000 	lsl.w	r0, r3, r0
}
   1587e:	4010      	ands	r0, r2
   15880:	4770      	bx	lr
   15882:	bf00      	nop
   15884:	e000e100 	.word	0xe000e100

00015888 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   15888:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   1588a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   1588c:	4b05      	ldr	r3, [pc, #20]	; (158a4 <_arch_isr_direct_pm+0x1c>)
   1588e:	699b      	ldr	r3, [r3, #24]
   15890:	b90b      	cbnz	r3, 15896 <_arch_isr_direct_pm+0xe>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   15892:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   15894:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   15896:	4b03      	ldr	r3, [pc, #12]	; (158a4 <_arch_isr_direct_pm+0x1c>)
   15898:	2200      	movs	r2, #0
   1589a:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   1589c:	f016 fb62 	bl	2bf64 <z_pm_save_idle_exit>
   158a0:	e7f7      	b.n	15892 <_arch_isr_direct_pm+0xa>
   158a2:	bf00      	nop
   158a4:	20008e80 	.word	0x20008e80

000158a8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   158a8:	bf30      	wfi
    b z_SysNmiOnReset
   158aa:	f7ff bffd 	b.w	158a8 <z_SysNmiOnReset>
   158ae:	bf00      	nop

000158b0 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   158b0:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   158b2:	4b0b      	ldr	r3, [pc, #44]	; (158e0 <z_arm_prep_c+0x30>)
   158b4:	4a0b      	ldr	r2, [pc, #44]	; (158e4 <z_arm_prep_c+0x34>)
   158b6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   158ba:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   158bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   158c0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   158c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   158c8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   158cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   158d0:	f00e f896 	bl	23a00 <z_bss_zero>
	z_data_copy();
   158d4:	f00f f9ae 	bl	24c34 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   158d8:	f000 ffc2 	bl	16860 <z_arm_interrupt_init>
	z_cstart();
   158dc:	f00e f8ee 	bl	23abc <z_cstart>
   158e0:	e000ed00 	.word	0xe000ed00
   158e4:	00000000 	.word	0x00000000

000158e8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   158e8:	4a0a      	ldr	r2, [pc, #40]	; (15914 <arch_swap+0x2c>)
   158ea:	6893      	ldr	r3, [r2, #8]
   158ec:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
   158f0:	4909      	ldr	r1, [pc, #36]	; (15918 <arch_swap+0x30>)
   158f2:	6809      	ldr	r1, [r1, #0]
   158f4:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   158f8:	4908      	ldr	r1, [pc, #32]	; (1591c <arch_swap+0x34>)
   158fa:	684b      	ldr	r3, [r1, #4]
   158fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   15900:	604b      	str	r3, [r1, #4]
   15902:	2300      	movs	r3, #0
   15904:	f383 8811 	msr	BASEPRI, r3
   15908:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   1590c:	6893      	ldr	r3, [r2, #8]
}
   1590e:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   15912:	4770      	bx	lr
   15914:	20008e80 	.word	0x20008e80
   15918:	0002fed4 	.word	0x0002fed4
   1591c:	e000ed00 	.word	0xe000ed00

00015920 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   15920:	4913      	ldr	r1, [pc, #76]	; (15970 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   15922:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   15924:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   15928:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1592a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1592e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   15932:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   15934:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   15938:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   1593c:	4f0d      	ldr	r7, [pc, #52]	; (15974 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1593e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   15942:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   15944:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   15946:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   15948:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
   1594c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   1594e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   15952:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   15956:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   15958:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   1595a:	f001 f831 	bl	169c0 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   1595e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   15962:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   15966:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1596a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1596e:	4770      	bx	lr
    ldr r1, =_kernel
   15970:	20008e80 	.word	0x20008e80
    ldr v4, =_SCS_ICSR
   15974:	e000ed04 	.word	0xe000ed04

00015978 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   15978:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   1597c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1597e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   15982:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   15986:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   15988:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   1598c:	2902      	cmp	r1, #2
    beq _oops
   1598e:	d0ff      	beq.n	15990 <_oops>

00015990 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   15990:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   15992:	f011 fcc1 	bl	27318 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   15996:	bd01      	pop	{r0, pc}

00015998 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   15998:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1599a:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   1599e:	490e      	ldr	r1, [pc, #56]	; (159d8 <arch_new_thread+0x40>)
   159a0:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   159a4:	f021 0101 	bic.w	r1, r1, #1
   159a8:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   159ac:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   159b0:	9b01      	ldr	r3, [sp, #4]
   159b2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   159b6:	9b02      	ldr	r3, [sp, #8]
   159b8:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   159bc:	9b03      	ldr	r3, [sp, #12]
   159be:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   159c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   159c6:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
   159ca:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   159cc:	2300      	movs	r3, #0
   159ce:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   159d2:	bc10      	pop	{r4}
   159d4:	4770      	bx	lr
   159d6:	bf00      	nop
   159d8:	00025a81 	.word	0x00025a81

000159dc <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   159dc:	4b10      	ldr	r3, [pc, #64]	; (15a20 <z_check_thread_stack_fail+0x44>)
   159de:	689b      	ldr	r3, [r3, #8]

	if (thread == NULL) {
   159e0:	b1bb      	cbz	r3, 15a12 <z_check_thread_stack_fail+0x36>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   159e2:	f110 0f16 	cmn.w	r0, #22
   159e6:	d00b      	beq.n	15a00 <z_check_thread_stack_fail+0x24>
   159e8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   159ec:	f1a2 0c40 	sub.w	ip, r2, #64	; 0x40
   159f0:	4584      	cmp	ip, r0
   159f2:	d810      	bhi.n	15a16 <z_check_thread_stack_fail+0x3a>
   159f4:	4282      	cmp	r2, r0
   159f6:	d910      	bls.n	15a1a <z_check_thread_stack_fail+0x3e>
   159f8:	428a      	cmp	r2, r1
   159fa:	d807      	bhi.n	15a0c <z_check_thread_stack_fail+0x30>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   159fc:	2000      	movs	r0, #0
   159fe:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   15a00:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   15a04:	428a      	cmp	r2, r1
   15a06:	d801      	bhi.n	15a0c <z_check_thread_stack_fail+0x30>
	return 0;
   15a08:	2000      	movs	r0, #0
}
   15a0a:	4770      	bx	lr
		return thread->stack_info.start;
   15a0c:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
   15a10:	4770      	bx	lr
		return 0;
   15a12:	2000      	movs	r0, #0
   15a14:	4770      	bx	lr
	return 0;
   15a16:	2000      	movs	r0, #0
   15a18:	4770      	bx	lr
   15a1a:	2000      	movs	r0, #0
   15a1c:	4770      	bx	lr
   15a1e:	bf00      	nop
   15a20:	20008e80 	.word	0x20008e80

00015a24 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   15a24:	b508      	push	{r3, lr}
   15a26:	460d      	mov	r5, r1
   15a28:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   15a2a:	4b08      	ldr	r3, [pc, #32]	; (15a4c <arch_switch_to_main_thread+0x28>)
   15a2c:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   15a2e:	f000 ffc7 	bl	169c0 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   15a32:	4620      	mov	r0, r4
   15a34:	f385 8809 	msr	PSP, r5
   15a38:	2100      	movs	r1, #0
   15a3a:	b663      	cpsie	if
   15a3c:	f381 8811 	msr	BASEPRI, r1
   15a40:	f3bf 8f6f 	isb	sy
   15a44:	2200      	movs	r2, #0
   15a46:	2300      	movs	r3, #0
   15a48:	f010 f81a 	bl	25a80 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   15a4c:	20008e80 	.word	0x20008e80

00015a50 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   15a50:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   15a52:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   15a54:	4a0b      	ldr	r2, [pc, #44]	; (15a84 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   15a56:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   15a58:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   15a5a:	bf1e      	ittt	ne
	movne	r1, #0
   15a5c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   15a5e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   15a60:	f016 fa80 	blne	2bf64 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   15a64:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   15a66:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   15a6a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   15a6e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   15a72:	4905      	ldr	r1, [pc, #20]	; (15a88 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   15a74:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   15a76:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   15a78:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   15a7a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   15a7e:	4903      	ldr	r1, [pc, #12]	; (15a8c <_isr_wrapper+0x3c>)
	bx r1
   15a80:	4708      	bx	r1
   15a82:	0000      	.short	0x0000
	ldr r2, =_kernel
   15a84:	20008e80 	.word	0x20008e80
	ldr r1, =_sw_isr_table
   15a88:	0002ce80 	.word	0x0002ce80
	ldr r1, =z_arm_int_exit
   15a8c:	00015a91 	.word	0x00015a91

00015a90 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   15a90:	4b04      	ldr	r3, [pc, #16]	; (15aa4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   15a92:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   15a94:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   15a96:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   15a98:	d003      	beq.n	15aa2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   15a9a:	4903      	ldr	r1, [pc, #12]	; (15aa8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   15a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   15aa0:	600a      	str	r2, [r1, #0]

00015aa2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   15aa2:	4770      	bx	lr
	ldr r3, =_kernel
   15aa4:	20008e80 	.word	0x20008e80
	ldr r1, =_SCS_ICSR
   15aa8:	e000ed04 	.word	0xe000ed04

00015aac <z_arm_is_synchronous_svc>:
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

static inline bool z_arm_is_synchronous_svc(z_arch_esf_t *esf)
{
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   15aac:	6981      	ldr	r1, [r0, #24]
	/* Note: ARMv6-M does not support CCR.BFHFNMIGN so this access
	 * could generate a fault if the pc was invalid.
	 */
	uint16_t fault_insn = *(ret_addr - 1);
#else
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   15aae:	4b0d      	ldr	r3, [pc, #52]	; (15ae4 <z_arm_is_synchronous_svc+0x38>)
   15ab0:	695a      	ldr	r2, [r3, #20]
   15ab2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   15ab6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   15ab8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15abc:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();

	uint16_t fault_insn = *(ret_addr - 1);
   15ac0:	f831 1c02 	ldrh.w	r1, [r1, #-2]

	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   15ac4:	695a      	ldr	r2, [r3, #20]
   15ac6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   15aca:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   15acc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15ad0:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
#endif /* ARMV6_M_ARMV8_M_BASELINE && !ARMV8_M_BASELINE */

	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   15ad4:	f64d 7302 	movw	r3, #57090	; 0xdf02
   15ad8:	4299      	cmp	r1, r3
   15ada:	d001      	beq.n	15ae0 <z_arm_is_synchronous_svc+0x34>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
		return true;
	}
#undef _SVC_OPCODE
	return false;
   15adc:	2000      	movs	r0, #0
   15ade:	4770      	bx	lr
		return true;
   15ae0:	2001      	movs	r0, #1
}
   15ae2:	4770      	bx	lr
   15ae4:	e000ed00 	.word	0xe000ed00

00015ae8 <get_esf>:
 *
 * @return ESF pointer on success, otherwise return NULL
 */
static inline z_arch_esf_t *get_esf(uint32_t msp, uint32_t psp, uint32_t exc_return,
	bool *nested_exc)
{
   15ae8:	b510      	push	{r4, lr}
   15aea:	b088      	sub	sp, #32
	bool alternative_state_exc = false;
	z_arch_esf_t *ptr_esf = NULL;

	*nested_exc = false;
   15aec:	2400      	movs	r4, #0
   15aee:	701c      	strb	r4, [r3, #0]

	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   15af0:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
   15af4:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
   15af8:	d134      	bne.n	15b64 <get_esf+0x7c>
	}
#else
	/* The processor has a single execution state.
	 * We verify that the Thread mode is using PSP.
	 */
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   15afa:	f002 040c 	and.w	r4, r2, #12
   15afe:	2c08      	cmp	r4, #8
   15b00:	d005      	beq.n	15b0e <get_esf+0x26>
		return NULL;
	}
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	if (!alternative_state_exc) {
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   15b02:	f012 0f08 	tst.w	r2, #8
   15b06:	d02a      	beq.n	15b5e <get_esf+0x76>
			/* Returning to thread mode */
			ptr_esf =  (z_arch_esf_t *)psp;
   15b08:	4608      	mov	r0, r1
			*nested_exc = true;
		}
	}

	return ptr_esf;
}
   15b0a:	b008      	add	sp, #32
   15b0c:	bd10      	pop	{r4, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   15b0e:	4b16      	ldr	r3, [pc, #88]	; (15b68 <get_esf+0x80>)
   15b10:	9307      	str	r3, [sp, #28]
   15b12:	2302      	movs	r3, #2
   15b14:	f88d 3004 	strb.w	r3, [sp, #4]
   15b18:	2400      	movs	r4, #0
   15b1a:	f88d 4005 	strb.w	r4, [sp, #5]
   15b1e:	f88d 4006 	strb.w	r4, [sp, #6]
   15b22:	f88d 4007 	strb.w	r4, [sp, #7]
   15b26:	9b01      	ldr	r3, [sp, #4]
   15b28:	9306      	str	r3, [sp, #24]
   15b2a:	4621      	mov	r1, r4
   15b2c:	f364 0100 	bfi	r1, r4, #0, #1
   15b30:	f364 0141 	bfi	r1, r4, #1, #1
   15b34:	f364 0182 	bfi	r1, r4, #2, #1
   15b38:	f364 01c5 	bfi	r1, r4, #3, #3
   15b3c:	2301      	movs	r3, #1
   15b3e:	f363 1188 	bfi	r1, r3, #6, #3
   15b42:	2308      	movs	r3, #8
   15b44:	f363 2152 	bfi	r1, r3, #9, #10
   15b48:	f364 41de 	bfi	r1, r4, #19, #12
   15b4c:	f364 71df 	bfi	r1, r4, #31, #1
   15b50:	4623      	mov	r3, r4
   15b52:	aa06      	add	r2, sp, #24
   15b54:	4805      	ldr	r0, [pc, #20]	; (15b6c <get_esf+0x84>)
   15b56:	f011 f87e 	bl	26c56 <z_impl_z_log_msg_static_create>
		return NULL;
   15b5a:	4620      	mov	r0, r4
   15b5c:	e7d5      	b.n	15b0a <get_esf+0x22>
			*nested_exc = true;
   15b5e:	2201      	movs	r2, #1
   15b60:	701a      	strb	r2, [r3, #0]
   15b62:	e7d2      	b.n	15b0a <get_esf+0x22>
		return NULL;
   15b64:	2000      	movs	r0, #0
   15b66:	e7d0      	b.n	15b0a <get_esf+0x22>
   15b68:	0002ddec 	.word	0x0002ddec
   15b6c:	0002d154 	.word	0x0002d154

00015b70 <bus_fault>:
{
   15b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15b74:	b0ac      	sub	sp, #176	; 0xb0
   15b76:	af00      	add	r7, sp, #0
   15b78:	4605      	mov	r5, r0
   15b7a:	460e      	mov	r6, r1
   15b7c:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** BUS FAULT *****");
   15b7e:	4bbc      	ldr	r3, [pc, #752]	; (15e70 <bus_fault+0x300>)
   15b80:	61fb      	str	r3, [r7, #28]
   15b82:	2302      	movs	r3, #2
   15b84:	713b      	strb	r3, [r7, #4]
   15b86:	2300      	movs	r3, #0
   15b88:	717b      	strb	r3, [r7, #5]
   15b8a:	71bb      	strb	r3, [r7, #6]
   15b8c:	71fb      	strb	r3, [r7, #7]
   15b8e:	687a      	ldr	r2, [r7, #4]
   15b90:	61ba      	str	r2, [r7, #24]
   15b92:	4619      	mov	r1, r3
   15b94:	f363 0100 	bfi	r1, r3, #0, #1
   15b98:	f363 0141 	bfi	r1, r3, #1, #1
   15b9c:	f363 0182 	bfi	r1, r3, #2, #1
   15ba0:	f363 01c5 	bfi	r1, r3, #3, #3
   15ba4:	2201      	movs	r2, #1
   15ba6:	f362 1188 	bfi	r1, r2, #6, #3
   15baa:	2208      	movs	r2, #8
   15bac:	f362 2152 	bfi	r1, r2, #9, #10
   15bb0:	f363 41de 	bfi	r1, r3, #19, #12
   15bb4:	f363 71df 	bfi	r1, r3, #31, #1
   15bb8:	f107 0218 	add.w	r2, r7, #24
   15bbc:	48ad      	ldr	r0, [pc, #692]	; (15e74 <bus_fault+0x304>)
   15bbe:	f011 f84a 	bl	26c56 <z_impl_z_log_msg_static_create>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   15bc2:	4bad      	ldr	r3, [pc, #692]	; (15e78 <bus_fault+0x308>)
   15bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15bc6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   15bca:	d12a      	bne.n	15c22 <bus_fault+0xb2>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   15bcc:	4baa      	ldr	r3, [pc, #680]	; (15e78 <bus_fault+0x308>)
   15bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15bd0:	f413 6f00 	tst.w	r3, #2048	; 0x800
   15bd4:	d148      	bne.n	15c68 <bus_fault+0xf8>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   15bd6:	4ba8      	ldr	r3, [pc, #672]	; (15e78 <bus_fault+0x308>)
   15bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15bda:	f413 7f00 	tst.w	r3, #512	; 0x200
   15bde:	d166      	bne.n	15cae <bus_fault+0x13e>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   15be0:	4ba5      	ldr	r3, [pc, #660]	; (15e78 <bus_fault+0x308>)
   15be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15be4:	f413 6f80 	tst.w	r3, #1024	; 0x400
   15be8:	f040 80d5 	bne.w	15d96 <bus_fault+0x226>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   15bec:	4ba2      	ldr	r3, [pc, #648]	; (15e78 <bus_fault+0x308>)
   15bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15bf0:	f413 7f80 	tst.w	r3, #256	; 0x100
   15bf4:	f040 80f2 	bne.w	15ddc <bus_fault+0x26c>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   15bf8:	4b9f      	ldr	r3, [pc, #636]	; (15e78 <bus_fault+0x308>)
   15bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15bfc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   15c00:	f040 8111 	bne.w	15e26 <bus_fault+0x2b6>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   15c04:	4a9c      	ldr	r2, [pc, #624]	; (15e78 <bus_fault+0x308>)
   15c06:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15c08:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   15c0c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   15c0e:	2101      	movs	r1, #1
   15c10:	4628      	mov	r0, r5
   15c12:	f011 fba8 	bl	27366 <memory_fault_recoverable>
   15c16:	7020      	strb	r0, [r4, #0]
}
   15c18:	2000      	movs	r0, #0
   15c1a:	37b0      	adds	r7, #176	; 0xb0
   15c1c:	46bd      	mov	sp, r7
   15c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Stacking error");
   15c22:	4b96      	ldr	r3, [pc, #600]	; (15e7c <bus_fault+0x30c>)
   15c24:	637b      	str	r3, [r7, #52]	; 0x34
   15c26:	2302      	movs	r3, #2
   15c28:	713b      	strb	r3, [r7, #4]
   15c2a:	2300      	movs	r3, #0
   15c2c:	717b      	strb	r3, [r7, #5]
   15c2e:	71bb      	strb	r3, [r7, #6]
   15c30:	71fb      	strb	r3, [r7, #7]
   15c32:	687a      	ldr	r2, [r7, #4]
   15c34:	633a      	str	r2, [r7, #48]	; 0x30
   15c36:	4619      	mov	r1, r3
   15c38:	f363 0100 	bfi	r1, r3, #0, #1
   15c3c:	f363 0141 	bfi	r1, r3, #1, #1
   15c40:	f363 0182 	bfi	r1, r3, #2, #1
   15c44:	f363 01c5 	bfi	r1, r3, #3, #3
   15c48:	2201      	movs	r2, #1
   15c4a:	f362 1188 	bfi	r1, r2, #6, #3
   15c4e:	2208      	movs	r2, #8
   15c50:	f362 2152 	bfi	r1, r2, #9, #10
   15c54:	f363 41de 	bfi	r1, r3, #19, #12
   15c58:	f363 71df 	bfi	r1, r3, #31, #1
   15c5c:	f107 0230 	add.w	r2, r7, #48	; 0x30
   15c60:	4884      	ldr	r0, [pc, #528]	; (15e74 <bus_fault+0x304>)
   15c62:	f010 fff8 	bl	26c56 <z_impl_z_log_msg_static_create>
   15c66:	e7b1      	b.n	15bcc <bus_fault+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   15c68:	4b85      	ldr	r3, [pc, #532]	; (15e80 <bus_fault+0x310>)
   15c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   15c6c:	2302      	movs	r3, #2
   15c6e:	713b      	strb	r3, [r7, #4]
   15c70:	2300      	movs	r3, #0
   15c72:	717b      	strb	r3, [r7, #5]
   15c74:	71bb      	strb	r3, [r7, #6]
   15c76:	71fb      	strb	r3, [r7, #7]
   15c78:	687a      	ldr	r2, [r7, #4]
   15c7a:	64ba      	str	r2, [r7, #72]	; 0x48
   15c7c:	4619      	mov	r1, r3
   15c7e:	f363 0100 	bfi	r1, r3, #0, #1
   15c82:	f363 0141 	bfi	r1, r3, #1, #1
   15c86:	f363 0182 	bfi	r1, r3, #2, #1
   15c8a:	f363 01c5 	bfi	r1, r3, #3, #3
   15c8e:	2201      	movs	r2, #1
   15c90:	f362 1188 	bfi	r1, r2, #6, #3
   15c94:	2208      	movs	r2, #8
   15c96:	f362 2152 	bfi	r1, r2, #9, #10
   15c9a:	f363 41de 	bfi	r1, r3, #19, #12
   15c9e:	f363 71df 	bfi	r1, r3, #31, #1
   15ca2:	f107 0248 	add.w	r2, r7, #72	; 0x48
   15ca6:	4873      	ldr	r0, [pc, #460]	; (15e74 <bus_fault+0x304>)
   15ca8:	f010 ffd5 	bl	26c56 <z_impl_z_log_msg_static_create>
   15cac:	e793      	b.n	15bd6 <bus_fault+0x66>
		PR_FAULT_INFO("  Precise data bus error");
   15cae:	4b75      	ldr	r3, [pc, #468]	; (15e84 <bus_fault+0x314>)
   15cb0:	667b      	str	r3, [r7, #100]	; 0x64
   15cb2:	2302      	movs	r3, #2
   15cb4:	713b      	strb	r3, [r7, #4]
   15cb6:	2300      	movs	r3, #0
   15cb8:	717b      	strb	r3, [r7, #5]
   15cba:	71bb      	strb	r3, [r7, #6]
   15cbc:	71fb      	strb	r3, [r7, #7]
   15cbe:	687a      	ldr	r2, [r7, #4]
   15cc0:	663a      	str	r2, [r7, #96]	; 0x60
   15cc2:	4619      	mov	r1, r3
   15cc4:	f363 0100 	bfi	r1, r3, #0, #1
   15cc8:	f363 0141 	bfi	r1, r3, #1, #1
   15ccc:	f363 0182 	bfi	r1, r3, #2, #1
   15cd0:	f363 01c5 	bfi	r1, r3, #3, #3
   15cd4:	2201      	movs	r2, #1
   15cd6:	f362 1188 	bfi	r1, r2, #6, #3
   15cda:	2208      	movs	r2, #8
   15cdc:	f362 2152 	bfi	r1, r2, #9, #10
   15ce0:	f363 41de 	bfi	r1, r3, #19, #12
   15ce4:	f363 71df 	bfi	r1, r3, #31, #1
   15ce8:	f107 0260 	add.w	r2, r7, #96	; 0x60
   15cec:	4861      	ldr	r0, [pc, #388]	; (15e74 <bus_fault+0x304>)
   15cee:	f010 ffb2 	bl	26c56 <z_impl_z_log_msg_static_create>
		STORE_xFAR(bfar, SCB->BFAR);
   15cf2:	4b61      	ldr	r3, [pc, #388]	; (15e78 <bus_fault+0x308>)
   15cf4:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   15cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15cf8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   15cfc:	f43f af70 	beq.w	15be0 <bus_fault+0x70>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   15d00:	46e8      	mov	r8, sp
   15d02:	b088      	sub	sp, #32
   15d04:	466b      	mov	r3, sp
   15d06:	f113 0210 	adds.w	r2, r3, #16
   15d0a:	d011      	beq.n	15d30 <bus_fault+0x1c0>
   15d0c:	210c      	movs	r1, #12
   15d0e:	b152      	cbz	r2, 15d26 <bus_fault+0x1b6>
   15d10:	468c      	mov	ip, r1
   15d12:	2904      	cmp	r1, #4
   15d14:	dd03      	ble.n	15d1e <bus_fault+0x1ae>
   15d16:	f8df e170 	ldr.w	lr, [pc, #368]	; 15e88 <bus_fault+0x318>
   15d1a:	f8c3 e014 	str.w	lr, [r3, #20]
   15d1e:	f1bc 0f08 	cmp.w	ip, #8
   15d22:	dd08      	ble.n	15d36 <bus_fault+0x1c6>
   15d24:	6198      	str	r0, [r3, #24]
   15d26:	290b      	cmp	r1, #11
   15d28:	dd32      	ble.n	15d90 <bus_fault+0x220>
   15d2a:	f04f 0c0c 	mov.w	ip, #12
   15d2e:	e004      	b.n	15d3a <bus_fault+0x1ca>
   15d30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   15d34:	e7eb      	b.n	15d0e <bus_fault+0x19e>
   15d36:	f06f 0c1b 	mvn.w	ip, #27
   15d3a:	b13a      	cbz	r2, 15d4c <bus_fault+0x1dc>
   15d3c:	2103      	movs	r1, #3
   15d3e:	7139      	strb	r1, [r7, #4]
   15d40:	2100      	movs	r1, #0
   15d42:	7179      	strb	r1, [r7, #5]
   15d44:	71b9      	strb	r1, [r7, #6]
   15d46:	71f9      	strb	r1, [r7, #7]
   15d48:	6878      	ldr	r0, [r7, #4]
   15d4a:	6118      	str	r0, [r3, #16]
   15d4c:	2100      	movs	r1, #0
   15d4e:	f36f 0100 	bfc	r1, #0, #1
   15d52:	f36f 0141 	bfc	r1, #1, #1
   15d56:	f36f 0182 	bfc	r1, #2, #1
   15d5a:	f36f 01c5 	bfc	r1, #3, #3
   15d5e:	2301      	movs	r3, #1
   15d60:	f363 1188 	bfi	r1, r3, #6, #3
   15d64:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   15d68:	f363 2152 	bfi	r1, r3, #9, #10
   15d6c:	f36f 41de 	bfc	r1, #19, #12
   15d70:	f36f 71df 	bfc	r1, #31, #1
   15d74:	2300      	movs	r3, #0
   15d76:	483f      	ldr	r0, [pc, #252]	; (15e74 <bus_fault+0x304>)
   15d78:	f010 ff6d 	bl	26c56 <z_impl_z_log_msg_static_create>
   15d7c:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   15d7e:	2e00      	cmp	r6, #0
   15d80:	f43f af2e 	beq.w	15be0 <bus_fault+0x70>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   15d84:	4a3c      	ldr	r2, [pc, #240]	; (15e78 <bus_fault+0x308>)
   15d86:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15d88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   15d8c:	6293      	str	r3, [r2, #40]	; 0x28
   15d8e:	e727      	b.n	15be0 <bus_fault+0x70>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   15d90:	f06f 0c1b 	mvn.w	ip, #27
   15d94:	e7d1      	b.n	15d3a <bus_fault+0x1ca>
		PR_FAULT_INFO("  Imprecise data bus error");
   15d96:	4b3d      	ldr	r3, [pc, #244]	; (15e8c <bus_fault+0x31c>)
   15d98:	67fb      	str	r3, [r7, #124]	; 0x7c
   15d9a:	2302      	movs	r3, #2
   15d9c:	713b      	strb	r3, [r7, #4]
   15d9e:	2300      	movs	r3, #0
   15da0:	717b      	strb	r3, [r7, #5]
   15da2:	71bb      	strb	r3, [r7, #6]
   15da4:	71fb      	strb	r3, [r7, #7]
   15da6:	687a      	ldr	r2, [r7, #4]
   15da8:	67ba      	str	r2, [r7, #120]	; 0x78
   15daa:	4619      	mov	r1, r3
   15dac:	f363 0100 	bfi	r1, r3, #0, #1
   15db0:	f363 0141 	bfi	r1, r3, #1, #1
   15db4:	f363 0182 	bfi	r1, r3, #2, #1
   15db8:	f363 01c5 	bfi	r1, r3, #3, #3
   15dbc:	2201      	movs	r2, #1
   15dbe:	f362 1188 	bfi	r1, r2, #6, #3
   15dc2:	2208      	movs	r2, #8
   15dc4:	f362 2152 	bfi	r1, r2, #9, #10
   15dc8:	f363 41de 	bfi	r1, r3, #19, #12
   15dcc:	f363 71df 	bfi	r1, r3, #31, #1
   15dd0:	f107 0278 	add.w	r2, r7, #120	; 0x78
   15dd4:	4827      	ldr	r0, [pc, #156]	; (15e74 <bus_fault+0x304>)
   15dd6:	f010 ff3e 	bl	26c56 <z_impl_z_log_msg_static_create>
   15dda:	e707      	b.n	15bec <bus_fault+0x7c>
		PR_FAULT_INFO("  Instruction bus error");
   15ddc:	4b2c      	ldr	r3, [pc, #176]	; (15e90 <bus_fault+0x320>)
   15dde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   15de2:	2302      	movs	r3, #2
   15de4:	713b      	strb	r3, [r7, #4]
   15de6:	2300      	movs	r3, #0
   15de8:	717b      	strb	r3, [r7, #5]
   15dea:	71bb      	strb	r3, [r7, #6]
   15dec:	71fb      	strb	r3, [r7, #7]
   15dee:	687a      	ldr	r2, [r7, #4]
   15df0:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
   15df4:	4619      	mov	r1, r3
   15df6:	f363 0100 	bfi	r1, r3, #0, #1
   15dfa:	f363 0141 	bfi	r1, r3, #1, #1
   15dfe:	f363 0182 	bfi	r1, r3, #2, #1
   15e02:	f363 01c5 	bfi	r1, r3, #3, #3
   15e06:	2201      	movs	r2, #1
   15e08:	f362 1188 	bfi	r1, r2, #6, #3
   15e0c:	2208      	movs	r2, #8
   15e0e:	f362 2152 	bfi	r1, r2, #9, #10
   15e12:	f363 41de 	bfi	r1, r3, #19, #12
   15e16:	f363 71df 	bfi	r1, r3, #31, #1
   15e1a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
   15e1e:	4815      	ldr	r0, [pc, #84]	; (15e74 <bus_fault+0x304>)
   15e20:	f010 ff19 	bl	26c56 <z_impl_z_log_msg_static_create>
   15e24:	e6ee      	b.n	15c04 <bus_fault+0x94>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   15e26:	4b1b      	ldr	r3, [pc, #108]	; (15e94 <bus_fault+0x324>)
   15e28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   15e2c:	2302      	movs	r3, #2
   15e2e:	713b      	strb	r3, [r7, #4]
   15e30:	2300      	movs	r3, #0
   15e32:	717b      	strb	r3, [r7, #5]
   15e34:	71bb      	strb	r3, [r7, #6]
   15e36:	71fb      	strb	r3, [r7, #7]
   15e38:	687a      	ldr	r2, [r7, #4]
   15e3a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   15e3e:	4619      	mov	r1, r3
   15e40:	f363 0100 	bfi	r1, r3, #0, #1
   15e44:	f363 0141 	bfi	r1, r3, #1, #1
   15e48:	f363 0182 	bfi	r1, r3, #2, #1
   15e4c:	f363 01c5 	bfi	r1, r3, #3, #3
   15e50:	2201      	movs	r2, #1
   15e52:	f362 1188 	bfi	r1, r2, #6, #3
   15e56:	2208      	movs	r2, #8
   15e58:	f362 2152 	bfi	r1, r2, #9, #10
   15e5c:	f363 41de 	bfi	r1, r3, #19, #12
   15e60:	f363 71df 	bfi	r1, r3, #31, #1
   15e64:	f107 0290 	add.w	r2, r7, #144	; 0x90
   15e68:	4802      	ldr	r0, [pc, #8]	; (15e74 <bus_fault+0x304>)
   15e6a:	f010 fef4 	bl	26c56 <z_impl_z_log_msg_static_create>
   15e6e:	e6c9      	b.n	15c04 <bus_fault+0x94>
   15e70:	0002de18 	.word	0x0002de18
   15e74:	0002d154 	.word	0x0002d154
   15e78:	e000ed00 	.word	0xe000ed00
   15e7c:	0002de30 	.word	0x0002de30
   15e80:	0002de44 	.word	0x0002de44
   15e84:	0002de58 	.word	0x0002de58
   15e88:	0002de74 	.word	0x0002de74
   15e8c:	0002de8c 	.word	0x0002de8c
   15e90:	0002dea8 	.word	0x0002dea8
   15e94:	0002dec0 	.word	0x0002dec0

00015e98 <usage_fault>:
{
   15e98:	b500      	push	{lr}
   15e9a:	b0ad      	sub	sp, #180	; 0xb4
	PR_FAULT_INFO("***** USAGE FAULT *****");
   15e9c:	4b9a      	ldr	r3, [pc, #616]	; (16108 <usage_fault+0x270>)
   15e9e:	9307      	str	r3, [sp, #28]
   15ea0:	2302      	movs	r3, #2
   15ea2:	f88d 3004 	strb.w	r3, [sp, #4]
   15ea6:	2300      	movs	r3, #0
   15ea8:	f88d 3005 	strb.w	r3, [sp, #5]
   15eac:	f88d 3006 	strb.w	r3, [sp, #6]
   15eb0:	f88d 3007 	strb.w	r3, [sp, #7]
   15eb4:	9a01      	ldr	r2, [sp, #4]
   15eb6:	9206      	str	r2, [sp, #24]
   15eb8:	4619      	mov	r1, r3
   15eba:	f363 0100 	bfi	r1, r3, #0, #1
   15ebe:	f363 0141 	bfi	r1, r3, #1, #1
   15ec2:	f363 0182 	bfi	r1, r3, #2, #1
   15ec6:	f363 01c5 	bfi	r1, r3, #3, #3
   15eca:	2201      	movs	r2, #1
   15ecc:	f362 1188 	bfi	r1, r2, #6, #3
   15ed0:	2208      	movs	r2, #8
   15ed2:	f362 2152 	bfi	r1, r2, #9, #10
   15ed6:	f363 41de 	bfi	r1, r3, #19, #12
   15eda:	f363 71df 	bfi	r1, r3, #31, #1
   15ede:	aa06      	add	r2, sp, #24
   15ee0:	488a      	ldr	r0, [pc, #552]	; (1610c <usage_fault+0x274>)
   15ee2:	f010 feb8 	bl	26c56 <z_impl_z_log_msg_static_create>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   15ee6:	4b8a      	ldr	r3, [pc, #552]	; (16110 <usage_fault+0x278>)
   15ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15eea:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   15eee:	d126      	bne.n	15f3e <usage_fault+0xa6>
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   15ef0:	4b87      	ldr	r3, [pc, #540]	; (16110 <usage_fault+0x278>)
   15ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15ef4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   15ef8:	d147      	bne.n	15f8a <usage_fault+0xf2>
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   15efa:	4b85      	ldr	r3, [pc, #532]	; (16110 <usage_fault+0x278>)
   15efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15efe:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   15f02:	d168      	bne.n	15fd6 <usage_fault+0x13e>
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   15f04:	4b82      	ldr	r3, [pc, #520]	; (16110 <usage_fault+0x278>)
   15f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15f08:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   15f0c:	f040 8089 	bne.w	16022 <usage_fault+0x18a>
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   15f10:	4b7f      	ldr	r3, [pc, #508]	; (16110 <usage_fault+0x278>)
   15f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15f14:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   15f18:	f040 80a9 	bne.w	1606e <usage_fault+0x1d6>
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   15f1c:	4b7c      	ldr	r3, [pc, #496]	; (16110 <usage_fault+0x278>)
   15f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15f20:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   15f24:	f040 80c9 	bne.w	160ba <usage_fault+0x222>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   15f28:	4a79      	ldr	r2, [pc, #484]	; (16110 <usage_fault+0x278>)
   15f2a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15f2c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   15f30:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   15f34:	6293      	str	r3, [r2, #40]	; 0x28
}
   15f36:	2000      	movs	r0, #0
   15f38:	b02d      	add	sp, #180	; 0xb4
   15f3a:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Division by zero");
   15f3e:	4b75      	ldr	r3, [pc, #468]	; (16114 <usage_fault+0x27c>)
   15f40:	930d      	str	r3, [sp, #52]	; 0x34
   15f42:	2302      	movs	r3, #2
   15f44:	f88d 3004 	strb.w	r3, [sp, #4]
   15f48:	2300      	movs	r3, #0
   15f4a:	f88d 3005 	strb.w	r3, [sp, #5]
   15f4e:	f88d 3006 	strb.w	r3, [sp, #6]
   15f52:	f88d 3007 	strb.w	r3, [sp, #7]
   15f56:	9a01      	ldr	r2, [sp, #4]
   15f58:	920c      	str	r2, [sp, #48]	; 0x30
   15f5a:	4619      	mov	r1, r3
   15f5c:	f363 0100 	bfi	r1, r3, #0, #1
   15f60:	f363 0141 	bfi	r1, r3, #1, #1
   15f64:	f363 0182 	bfi	r1, r3, #2, #1
   15f68:	f363 01c5 	bfi	r1, r3, #3, #3
   15f6c:	2201      	movs	r2, #1
   15f6e:	f362 1188 	bfi	r1, r2, #6, #3
   15f72:	2208      	movs	r2, #8
   15f74:	f362 2152 	bfi	r1, r2, #9, #10
   15f78:	f363 41de 	bfi	r1, r3, #19, #12
   15f7c:	f363 71df 	bfi	r1, r3, #31, #1
   15f80:	aa0c      	add	r2, sp, #48	; 0x30
   15f82:	4862      	ldr	r0, [pc, #392]	; (1610c <usage_fault+0x274>)
   15f84:	f010 fe67 	bl	26c56 <z_impl_z_log_msg_static_create>
   15f88:	e7b2      	b.n	15ef0 <usage_fault+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
   15f8a:	4b63      	ldr	r3, [pc, #396]	; (16118 <usage_fault+0x280>)
   15f8c:	9313      	str	r3, [sp, #76]	; 0x4c
   15f8e:	2302      	movs	r3, #2
   15f90:	f88d 3004 	strb.w	r3, [sp, #4]
   15f94:	2300      	movs	r3, #0
   15f96:	f88d 3005 	strb.w	r3, [sp, #5]
   15f9a:	f88d 3006 	strb.w	r3, [sp, #6]
   15f9e:	f88d 3007 	strb.w	r3, [sp, #7]
   15fa2:	9a01      	ldr	r2, [sp, #4]
   15fa4:	9212      	str	r2, [sp, #72]	; 0x48
   15fa6:	4619      	mov	r1, r3
   15fa8:	f363 0100 	bfi	r1, r3, #0, #1
   15fac:	f363 0141 	bfi	r1, r3, #1, #1
   15fb0:	f363 0182 	bfi	r1, r3, #2, #1
   15fb4:	f363 01c5 	bfi	r1, r3, #3, #3
   15fb8:	2201      	movs	r2, #1
   15fba:	f362 1188 	bfi	r1, r2, #6, #3
   15fbe:	2208      	movs	r2, #8
   15fc0:	f362 2152 	bfi	r1, r2, #9, #10
   15fc4:	f363 41de 	bfi	r1, r3, #19, #12
   15fc8:	f363 71df 	bfi	r1, r3, #31, #1
   15fcc:	aa12      	add	r2, sp, #72	; 0x48
   15fce:	484f      	ldr	r0, [pc, #316]	; (1610c <usage_fault+0x274>)
   15fd0:	f010 fe41 	bl	26c56 <z_impl_z_log_msg_static_create>
   15fd4:	e791      	b.n	15efa <usage_fault+0x62>
		PR_FAULT_INFO("  No coprocessor instructions");
   15fd6:	4b51      	ldr	r3, [pc, #324]	; (1611c <usage_fault+0x284>)
   15fd8:	9319      	str	r3, [sp, #100]	; 0x64
   15fda:	2302      	movs	r3, #2
   15fdc:	f88d 3004 	strb.w	r3, [sp, #4]
   15fe0:	2300      	movs	r3, #0
   15fe2:	f88d 3005 	strb.w	r3, [sp, #5]
   15fe6:	f88d 3006 	strb.w	r3, [sp, #6]
   15fea:	f88d 3007 	strb.w	r3, [sp, #7]
   15fee:	9a01      	ldr	r2, [sp, #4]
   15ff0:	9218      	str	r2, [sp, #96]	; 0x60
   15ff2:	4619      	mov	r1, r3
   15ff4:	f363 0100 	bfi	r1, r3, #0, #1
   15ff8:	f363 0141 	bfi	r1, r3, #1, #1
   15ffc:	f363 0182 	bfi	r1, r3, #2, #1
   16000:	f363 01c5 	bfi	r1, r3, #3, #3
   16004:	2201      	movs	r2, #1
   16006:	f362 1188 	bfi	r1, r2, #6, #3
   1600a:	2208      	movs	r2, #8
   1600c:	f362 2152 	bfi	r1, r2, #9, #10
   16010:	f363 41de 	bfi	r1, r3, #19, #12
   16014:	f363 71df 	bfi	r1, r3, #31, #1
   16018:	aa18      	add	r2, sp, #96	; 0x60
   1601a:	483c      	ldr	r0, [pc, #240]	; (1610c <usage_fault+0x274>)
   1601c:	f010 fe1b 	bl	26c56 <z_impl_z_log_msg_static_create>
   16020:	e770      	b.n	15f04 <usage_fault+0x6c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   16022:	4b3f      	ldr	r3, [pc, #252]	; (16120 <usage_fault+0x288>)
   16024:	931f      	str	r3, [sp, #124]	; 0x7c
   16026:	2302      	movs	r3, #2
   16028:	f88d 3004 	strb.w	r3, [sp, #4]
   1602c:	2300      	movs	r3, #0
   1602e:	f88d 3005 	strb.w	r3, [sp, #5]
   16032:	f88d 3006 	strb.w	r3, [sp, #6]
   16036:	f88d 3007 	strb.w	r3, [sp, #7]
   1603a:	9a01      	ldr	r2, [sp, #4]
   1603c:	921e      	str	r2, [sp, #120]	; 0x78
   1603e:	4619      	mov	r1, r3
   16040:	f363 0100 	bfi	r1, r3, #0, #1
   16044:	f363 0141 	bfi	r1, r3, #1, #1
   16048:	f363 0182 	bfi	r1, r3, #2, #1
   1604c:	f363 01c5 	bfi	r1, r3, #3, #3
   16050:	2201      	movs	r2, #1
   16052:	f362 1188 	bfi	r1, r2, #6, #3
   16056:	2208      	movs	r2, #8
   16058:	f362 2152 	bfi	r1, r2, #9, #10
   1605c:	f363 41de 	bfi	r1, r3, #19, #12
   16060:	f363 71df 	bfi	r1, r3, #31, #1
   16064:	aa1e      	add	r2, sp, #120	; 0x78
   16066:	4829      	ldr	r0, [pc, #164]	; (1610c <usage_fault+0x274>)
   16068:	f010 fdf5 	bl	26c56 <z_impl_z_log_msg_static_create>
   1606c:	e750      	b.n	15f10 <usage_fault+0x78>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   1606e:	4b2d      	ldr	r3, [pc, #180]	; (16124 <usage_fault+0x28c>)
   16070:	9325      	str	r3, [sp, #148]	; 0x94
   16072:	2302      	movs	r3, #2
   16074:	f88d 3004 	strb.w	r3, [sp, #4]
   16078:	2300      	movs	r3, #0
   1607a:	f88d 3005 	strb.w	r3, [sp, #5]
   1607e:	f88d 3006 	strb.w	r3, [sp, #6]
   16082:	f88d 3007 	strb.w	r3, [sp, #7]
   16086:	9a01      	ldr	r2, [sp, #4]
   16088:	9224      	str	r2, [sp, #144]	; 0x90
   1608a:	4619      	mov	r1, r3
   1608c:	f363 0100 	bfi	r1, r3, #0, #1
   16090:	f363 0141 	bfi	r1, r3, #1, #1
   16094:	f363 0182 	bfi	r1, r3, #2, #1
   16098:	f363 01c5 	bfi	r1, r3, #3, #3
   1609c:	2201      	movs	r2, #1
   1609e:	f362 1188 	bfi	r1, r2, #6, #3
   160a2:	2208      	movs	r2, #8
   160a4:	f362 2152 	bfi	r1, r2, #9, #10
   160a8:	f363 41de 	bfi	r1, r3, #19, #12
   160ac:	f363 71df 	bfi	r1, r3, #31, #1
   160b0:	aa24      	add	r2, sp, #144	; 0x90
   160b2:	4816      	ldr	r0, [pc, #88]	; (1610c <usage_fault+0x274>)
   160b4:	f010 fdcf 	bl	26c56 <z_impl_z_log_msg_static_create>
   160b8:	e730      	b.n	15f1c <usage_fault+0x84>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   160ba:	4b1b      	ldr	r3, [pc, #108]	; (16128 <usage_fault+0x290>)
   160bc:	932b      	str	r3, [sp, #172]	; 0xac
   160be:	2302      	movs	r3, #2
   160c0:	f88d 3004 	strb.w	r3, [sp, #4]
   160c4:	2300      	movs	r3, #0
   160c6:	f88d 3005 	strb.w	r3, [sp, #5]
   160ca:	f88d 3006 	strb.w	r3, [sp, #6]
   160ce:	f88d 3007 	strb.w	r3, [sp, #7]
   160d2:	9a01      	ldr	r2, [sp, #4]
   160d4:	922a      	str	r2, [sp, #168]	; 0xa8
   160d6:	4619      	mov	r1, r3
   160d8:	f363 0100 	bfi	r1, r3, #0, #1
   160dc:	f363 0141 	bfi	r1, r3, #1, #1
   160e0:	f363 0182 	bfi	r1, r3, #2, #1
   160e4:	f363 01c5 	bfi	r1, r3, #3, #3
   160e8:	2201      	movs	r2, #1
   160ea:	f362 1188 	bfi	r1, r2, #6, #3
   160ee:	2208      	movs	r2, #8
   160f0:	f362 2152 	bfi	r1, r2, #9, #10
   160f4:	f363 41de 	bfi	r1, r3, #19, #12
   160f8:	f363 71df 	bfi	r1, r3, #31, #1
   160fc:	aa2a      	add	r2, sp, #168	; 0xa8
   160fe:	4803      	ldr	r0, [pc, #12]	; (1610c <usage_fault+0x274>)
   16100:	f010 fda9 	bl	26c56 <z_impl_z_log_msg_static_create>
   16104:	e710      	b.n	15f28 <usage_fault+0x90>
   16106:	bf00      	nop
   16108:	0002def0 	.word	0x0002def0
   1610c:	0002d154 	.word	0x0002d154
   16110:	e000ed00 	.word	0xe000ed00
   16114:	0002df08 	.word	0x0002df08
   16118:	0002df1c 	.word	0x0002df1c
   1611c:	0002df38 	.word	0x0002df38
   16120:	0002df58 	.word	0x0002df58
   16124:	0002df80 	.word	0x0002df80
   16128:	0002df9c 	.word	0x0002df9c

0001612c <debug_monitor>:
{
   1612c:	b500      	push	{lr}
   1612e:	b089      	sub	sp, #36	; 0x24
	*recoverable = false;
   16130:	2300      	movs	r3, #0
   16132:	700b      	strb	r3, [r1, #0]
	PR_FAULT_INFO(
   16134:	4a13      	ldr	r2, [pc, #76]	; (16184 <debug_monitor+0x58>)
   16136:	9207      	str	r2, [sp, #28]
   16138:	2202      	movs	r2, #2
   1613a:	f88d 2004 	strb.w	r2, [sp, #4]
   1613e:	f88d 3005 	strb.w	r3, [sp, #5]
   16142:	f88d 3006 	strb.w	r3, [sp, #6]
   16146:	f88d 3007 	strb.w	r3, [sp, #7]
   1614a:	9a01      	ldr	r2, [sp, #4]
   1614c:	9206      	str	r2, [sp, #24]
   1614e:	4619      	mov	r1, r3
   16150:	f363 0100 	bfi	r1, r3, #0, #1
   16154:	f363 0141 	bfi	r1, r3, #1, #1
   16158:	f363 0182 	bfi	r1, r3, #2, #1
   1615c:	f363 01c5 	bfi	r1, r3, #3, #3
   16160:	2201      	movs	r2, #1
   16162:	f362 1188 	bfi	r1, r2, #6, #3
   16166:	2208      	movs	r2, #8
   16168:	f362 2152 	bfi	r1, r2, #9, #10
   1616c:	f363 41de 	bfi	r1, r3, #19, #12
   16170:	f363 71df 	bfi	r1, r3, #31, #1
   16174:	aa06      	add	r2, sp, #24
   16176:	4804      	ldr	r0, [pc, #16]	; (16188 <debug_monitor+0x5c>)
   16178:	f010 fd6d 	bl	26c56 <z_impl_z_log_msg_static_create>
}
   1617c:	b009      	add	sp, #36	; 0x24
   1617e:	f85d fb04 	ldr.w	pc, [sp], #4
   16182:	bf00      	nop
   16184:	0002dfc8 	.word	0x0002dfc8
   16188:	0002d154 	.word	0x0002d154

0001618c <reserved_exception>:
{
   1618c:	b590      	push	{r4, r7, lr}
   1618e:	b083      	sub	sp, #12
   16190:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** %s %d) *****",
   16192:	290f      	cmp	r1, #15
   16194:	dc23      	bgt.n	161de <reserved_exception+0x52>
   16196:	4c30      	ldr	r4, [pc, #192]	; (16258 <reserved_exception+0xcc>)
   16198:	3910      	subs	r1, #16
   1619a:	2300      	movs	r3, #0
   1619c:	713b      	strb	r3, [r7, #4]
   1619e:	2302      	movs	r3, #2
   161a0:	717b      	strb	r3, [r7, #5]
   161a2:	b08a      	sub	sp, #40	; 0x28
   161a4:	46ec      	mov	ip, sp
   161a6:	f11c 0210 	adds.w	r2, ip, #16
   161aa:	d01a      	beq.n	161e2 <reserved_exception+0x56>
   161ac:	2012      	movs	r0, #18
   161ae:	b122      	cbz	r2, 161ba <reserved_exception+0x2e>
   161b0:	2804      	cmp	r0, #4
   161b2:	dd02      	ble.n	161ba <reserved_exception+0x2e>
   161b4:	4b29      	ldr	r3, [pc, #164]	; (1625c <reserved_exception+0xd0>)
   161b6:	f8cc 3014 	str.w	r3, [ip, #20]
   161ba:	2300      	movs	r3, #0
   161bc:	703b      	strb	r3, [r7, #0]
   161be:	2302      	movs	r3, #2
   161c0:	707b      	strb	r3, [r7, #1]
   161c2:	b1e2      	cbz	r2, 161fe <reserved_exception+0x72>
   161c4:	4603      	mov	r3, r0
   161c6:	2808      	cmp	r0, #8
   161c8:	dd01      	ble.n	161ce <reserved_exception+0x42>
   161ca:	f8cc 4018 	str.w	r4, [ip, #24]
   161ce:	2b0c      	cmp	r3, #12
   161d0:	dd01      	ble.n	161d6 <reserved_exception+0x4a>
   161d2:	f8cc 101c 	str.w	r1, [ip, #28]
   161d6:	f10c 0320 	add.w	r3, ip, #32
   161da:	2100      	movs	r1, #0
   161dc:	e00d      	b.n	161fa <reserved_exception+0x6e>
   161de:	4c20      	ldr	r4, [pc, #128]	; (16260 <reserved_exception+0xd4>)
   161e0:	e7da      	b.n	16198 <reserved_exception+0xc>
   161e2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   161e6:	e7e2      	b.n	161ae <reserved_exception+0x22>
   161e8:	f101 0408 	add.w	r4, r1, #8
   161ec:	eb04 0e07 	add.w	lr, r4, r7
   161f0:	f81e ec08 	ldrb.w	lr, [lr, #-8]
   161f4:	f803 eb01 	strb.w	lr, [r3], #1
   161f8:	3101      	adds	r1, #1
   161fa:	2901      	cmp	r1, #1
   161fc:	d9f4      	bls.n	161e8 <reserved_exception+0x5c>
   161fe:	2811      	cmp	r0, #17
   16200:	dd26      	ble.n	16250 <reserved_exception+0xc4>
   16202:	2312      	movs	r3, #18
   16204:	b14a      	cbz	r2, 1621a <reserved_exception+0x8e>
   16206:	2104      	movs	r1, #4
   16208:	7139      	strb	r1, [r7, #4]
   1620a:	2100      	movs	r1, #0
   1620c:	7179      	strb	r1, [r7, #5]
   1620e:	71b9      	strb	r1, [r7, #6]
   16210:	2101      	movs	r1, #1
   16212:	71f9      	strb	r1, [r7, #7]
   16214:	6878      	ldr	r0, [r7, #4]
   16216:	f8cc 0010 	str.w	r0, [ip, #16]
   1621a:	2100      	movs	r1, #0
   1621c:	f36f 0100 	bfc	r1, #0, #1
   16220:	f36f 0141 	bfc	r1, #1, #1
   16224:	f36f 0182 	bfc	r1, #2, #1
   16228:	f36f 01c5 	bfc	r1, #3, #3
   1622c:	2001      	movs	r0, #1
   1622e:	f360 1188 	bfi	r1, r0, #6, #3
   16232:	f3c3 0309 	ubfx	r3, r3, #0, #10
   16236:	f363 2152 	bfi	r1, r3, #9, #10
   1623a:	f36f 41de 	bfc	r1, #19, #12
   1623e:	f36f 71df 	bfc	r1, #31, #1
   16242:	2300      	movs	r3, #0
   16244:	4807      	ldr	r0, [pc, #28]	; (16264 <reserved_exception+0xd8>)
   16246:	f010 fd06 	bl	26c56 <z_impl_z_log_msg_static_create>
}
   1624a:	370c      	adds	r7, #12
   1624c:	46bd      	mov	sp, r7
   1624e:	bd90      	pop	{r4, r7, pc}
	PR_FAULT_INFO("***** %s %d) *****",
   16250:	f06f 031b 	mvn.w	r3, #27
   16254:	e7d6      	b.n	16204 <reserved_exception+0x78>
   16256:	bf00      	nop
   16258:	0002dfec 	.word	0x0002dfec
   1625c:	0002e020 	.word	0x0002e020
   16260:	0002e004 	.word	0x0002e004
   16264:	0002d154 	.word	0x0002d154

00016268 <mem_manage_fault>:
{
   16268:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1626c:	b0a7      	sub	sp, #156	; 0x9c
   1626e:	af00      	add	r7, sp, #0
   16270:	4605      	mov	r5, r0
   16272:	460c      	mov	r4, r1
   16274:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   16276:	4bbc      	ldr	r3, [pc, #752]	; (16568 <mem_manage_fault+0x300>)
   16278:	61fb      	str	r3, [r7, #28]
   1627a:	2302      	movs	r3, #2
   1627c:	713b      	strb	r3, [r7, #4]
   1627e:	2300      	movs	r3, #0
   16280:	717b      	strb	r3, [r7, #5]
   16282:	71bb      	strb	r3, [r7, #6]
   16284:	71fb      	strb	r3, [r7, #7]
   16286:	687a      	ldr	r2, [r7, #4]
   16288:	61ba      	str	r2, [r7, #24]
   1628a:	4619      	mov	r1, r3
   1628c:	f363 0100 	bfi	r1, r3, #0, #1
   16290:	f363 0141 	bfi	r1, r3, #1, #1
   16294:	f363 0182 	bfi	r1, r3, #2, #1
   16298:	f363 01c5 	bfi	r1, r3, #3, #3
   1629c:	2201      	movs	r2, #1
   1629e:	f362 1188 	bfi	r1, r2, #6, #3
   162a2:	2208      	movs	r2, #8
   162a4:	f362 2152 	bfi	r1, r2, #9, #10
   162a8:	f363 41de 	bfi	r1, r3, #19, #12
   162ac:	f363 71df 	bfi	r1, r3, #31, #1
   162b0:	f107 0218 	add.w	r2, r7, #24
   162b4:	48ad      	ldr	r0, [pc, #692]	; (1656c <mem_manage_fault+0x304>)
   162b6:	f010 fcce 	bl	26c56 <z_impl_z_log_msg_static_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   162ba:	4bad      	ldr	r3, [pc, #692]	; (16570 <mem_manage_fault+0x308>)
   162bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   162be:	f013 0f10 	tst.w	r3, #16
   162c2:	d140      	bne.n	16346 <mem_manage_fault+0xde>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   162c4:	4baa      	ldr	r3, [pc, #680]	; (16570 <mem_manage_fault+0x308>)
   162c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   162c8:	f013 0f08 	tst.w	r3, #8
   162cc:	d15e      	bne.n	1638c <mem_manage_fault+0x124>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   162ce:	4ba8      	ldr	r3, [pc, #672]	; (16570 <mem_manage_fault+0x308>)
   162d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   162d2:	f013 0f02 	tst.w	r3, #2
   162d6:	d17c      	bne.n	163d2 <mem_manage_fault+0x16a>
	uint32_t mmfar = -EINVAL;
   162d8:	f06f 0815 	mvn.w	r8, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   162dc:	4ba4      	ldr	r3, [pc, #656]	; (16570 <mem_manage_fault+0x308>)
   162de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   162e0:	f013 0f01 	tst.w	r3, #1
   162e4:	f040 80ec 	bne.w	164c0 <mem_manage_fault+0x258>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   162e8:	4ba1      	ldr	r3, [pc, #644]	; (16570 <mem_manage_fault+0x308>)
   162ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   162ec:	f013 0f20 	tst.w	r3, #32
   162f0:	f040 8109 	bne.w	16506 <mem_manage_fault+0x29e>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   162f4:	4b9e      	ldr	r3, [pc, #632]	; (16570 <mem_manage_fault+0x308>)
   162f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   162f8:	f013 0f10 	tst.w	r3, #16
   162fc:	d104      	bne.n	16308 <mem_manage_fault+0xa0>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   162fe:	4b9c      	ldr	r3, [pc, #624]	; (16570 <mem_manage_fault+0x308>)
   16300:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   16302:	f014 0402 	ands.w	r4, r4, #2
   16306:	d005      	beq.n	16314 <mem_manage_fault+0xac>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   16308:	4b99      	ldr	r3, [pc, #612]	; (16570 <mem_manage_fault+0x308>)
   1630a:	685c      	ldr	r4, [r3, #4]
   1630c:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
   16310:	f040 811e 	bne.w	16550 <mem_manage_fault+0x2e8>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   16314:	4b96      	ldr	r3, [pc, #600]	; (16570 <mem_manage_fault+0x308>)
   16316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16318:	f013 0f20 	tst.w	r3, #32
   1631c:	d004      	beq.n	16328 <mem_manage_fault+0xc0>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   1631e:	4a94      	ldr	r2, [pc, #592]	; (16570 <mem_manage_fault+0x308>)
   16320:	6a53      	ldr	r3, [r2, #36]	; 0x24
   16322:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   16326:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   16328:	4a91      	ldr	r2, [pc, #580]	; (16570 <mem_manage_fault+0x308>)
   1632a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1632c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   16330:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   16332:	2101      	movs	r1, #1
   16334:	4628      	mov	r0, r5
   16336:	f011 f816 	bl	27366 <memory_fault_recoverable>
   1633a:	7030      	strb	r0, [r6, #0]
}
   1633c:	4620      	mov	r0, r4
   1633e:	379c      	adds	r7, #156	; 0x9c
   16340:	46bd      	mov	sp, r7
   16342:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
   16346:	4b8b      	ldr	r3, [pc, #556]	; (16574 <mem_manage_fault+0x30c>)
   16348:	637b      	str	r3, [r7, #52]	; 0x34
   1634a:	2302      	movs	r3, #2
   1634c:	713b      	strb	r3, [r7, #4]
   1634e:	2300      	movs	r3, #0
   16350:	717b      	strb	r3, [r7, #5]
   16352:	71bb      	strb	r3, [r7, #6]
   16354:	71fb      	strb	r3, [r7, #7]
   16356:	687a      	ldr	r2, [r7, #4]
   16358:	633a      	str	r2, [r7, #48]	; 0x30
   1635a:	4619      	mov	r1, r3
   1635c:	f363 0100 	bfi	r1, r3, #0, #1
   16360:	f363 0141 	bfi	r1, r3, #1, #1
   16364:	f363 0182 	bfi	r1, r3, #2, #1
   16368:	f363 01c5 	bfi	r1, r3, #3, #3
   1636c:	2201      	movs	r2, #1
   1636e:	f362 1188 	bfi	r1, r2, #6, #3
   16372:	2208      	movs	r2, #8
   16374:	f362 2152 	bfi	r1, r2, #9, #10
   16378:	f363 41de 	bfi	r1, r3, #19, #12
   1637c:	f363 71df 	bfi	r1, r3, #31, #1
   16380:	f107 0230 	add.w	r2, r7, #48	; 0x30
   16384:	4879      	ldr	r0, [pc, #484]	; (1656c <mem_manage_fault+0x304>)
   16386:	f010 fc66 	bl	26c56 <z_impl_z_log_msg_static_create>
   1638a:	e79b      	b.n	162c4 <mem_manage_fault+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   1638c:	4b7a      	ldr	r3, [pc, #488]	; (16578 <mem_manage_fault+0x310>)
   1638e:	64fb      	str	r3, [r7, #76]	; 0x4c
   16390:	2302      	movs	r3, #2
   16392:	713b      	strb	r3, [r7, #4]
   16394:	2300      	movs	r3, #0
   16396:	717b      	strb	r3, [r7, #5]
   16398:	71bb      	strb	r3, [r7, #6]
   1639a:	71fb      	strb	r3, [r7, #7]
   1639c:	687a      	ldr	r2, [r7, #4]
   1639e:	64ba      	str	r2, [r7, #72]	; 0x48
   163a0:	4619      	mov	r1, r3
   163a2:	f363 0100 	bfi	r1, r3, #0, #1
   163a6:	f363 0141 	bfi	r1, r3, #1, #1
   163aa:	f363 0182 	bfi	r1, r3, #2, #1
   163ae:	f363 01c5 	bfi	r1, r3, #3, #3
   163b2:	2201      	movs	r2, #1
   163b4:	f362 1188 	bfi	r1, r2, #6, #3
   163b8:	2208      	movs	r2, #8
   163ba:	f362 2152 	bfi	r1, r2, #9, #10
   163be:	f363 41de 	bfi	r1, r3, #19, #12
   163c2:	f363 71df 	bfi	r1, r3, #31, #1
   163c6:	f107 0248 	add.w	r2, r7, #72	; 0x48
   163ca:	4868      	ldr	r0, [pc, #416]	; (1656c <mem_manage_fault+0x304>)
   163cc:	f010 fc43 	bl	26c56 <z_impl_z_log_msg_static_create>
   163d0:	e77d      	b.n	162ce <mem_manage_fault+0x66>
		PR_FAULT_INFO("  Data Access Violation");
   163d2:	4b6a      	ldr	r3, [pc, #424]	; (1657c <mem_manage_fault+0x314>)
   163d4:	667b      	str	r3, [r7, #100]	; 0x64
   163d6:	2302      	movs	r3, #2
   163d8:	713b      	strb	r3, [r7, #4]
   163da:	2300      	movs	r3, #0
   163dc:	717b      	strb	r3, [r7, #5]
   163de:	71bb      	strb	r3, [r7, #6]
   163e0:	71fb      	strb	r3, [r7, #7]
   163e2:	687a      	ldr	r2, [r7, #4]
   163e4:	663a      	str	r2, [r7, #96]	; 0x60
   163e6:	4619      	mov	r1, r3
   163e8:	f363 0100 	bfi	r1, r3, #0, #1
   163ec:	f363 0141 	bfi	r1, r3, #1, #1
   163f0:	f363 0182 	bfi	r1, r3, #2, #1
   163f4:	f363 01c5 	bfi	r1, r3, #3, #3
   163f8:	2201      	movs	r2, #1
   163fa:	f362 1188 	bfi	r1, r2, #6, #3
   163fe:	2208      	movs	r2, #8
   16400:	f362 2152 	bfi	r1, r2, #9, #10
   16404:	f363 41de 	bfi	r1, r3, #19, #12
   16408:	f363 71df 	bfi	r1, r3, #31, #1
   1640c:	f107 0260 	add.w	r2, r7, #96	; 0x60
   16410:	4856      	ldr	r0, [pc, #344]	; (1656c <mem_manage_fault+0x304>)
   16412:	f010 fc20 	bl	26c56 <z_impl_z_log_msg_static_create>
		uint32_t temp = SCB->MMFAR;
   16416:	4b56      	ldr	r3, [pc, #344]	; (16570 <mem_manage_fault+0x308>)
   16418:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1641c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1641e:	f013 0f80 	tst.w	r3, #128	; 0x80
   16422:	d04a      	beq.n	164ba <mem_manage_fault+0x252>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   16424:	46e9      	mov	r9, sp
   16426:	b088      	sub	sp, #32
   16428:	466b      	mov	r3, sp
   1642a:	f113 0210 	adds.w	r2, r3, #16
   1642e:	d011      	beq.n	16454 <mem_manage_fault+0x1ec>
   16430:	210c      	movs	r1, #12
   16432:	b152      	cbz	r2, 1644a <mem_manage_fault+0x1e2>
   16434:	4608      	mov	r0, r1
   16436:	2904      	cmp	r1, #4
   16438:	dd03      	ble.n	16442 <mem_manage_fault+0x1da>
   1643a:	f8df c144 	ldr.w	ip, [pc, #324]	; 16580 <mem_manage_fault+0x318>
   1643e:	f8c3 c014 	str.w	ip, [r3, #20]
   16442:	2808      	cmp	r0, #8
   16444:	dd09      	ble.n	1645a <mem_manage_fault+0x1f2>
   16446:	f8c3 8018 	str.w	r8, [r3, #24]
   1644a:	290b      	cmp	r1, #11
   1644c:	dd32      	ble.n	164b4 <mem_manage_fault+0x24c>
   1644e:	f04f 0c0c 	mov.w	ip, #12
   16452:	e004      	b.n	1645e <mem_manage_fault+0x1f6>
   16454:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   16458:	e7eb      	b.n	16432 <mem_manage_fault+0x1ca>
   1645a:	f06f 0c1b 	mvn.w	ip, #27
   1645e:	b13a      	cbz	r2, 16470 <mem_manage_fault+0x208>
   16460:	2103      	movs	r1, #3
   16462:	7139      	strb	r1, [r7, #4]
   16464:	2100      	movs	r1, #0
   16466:	7179      	strb	r1, [r7, #5]
   16468:	71b9      	strb	r1, [r7, #6]
   1646a:	71f9      	strb	r1, [r7, #7]
   1646c:	6878      	ldr	r0, [r7, #4]
   1646e:	6118      	str	r0, [r3, #16]
   16470:	2100      	movs	r1, #0
   16472:	f36f 0100 	bfc	r1, #0, #1
   16476:	f36f 0141 	bfc	r1, #1, #1
   1647a:	f36f 0182 	bfc	r1, #2, #1
   1647e:	f36f 01c5 	bfc	r1, #3, #3
   16482:	2301      	movs	r3, #1
   16484:	f363 1188 	bfi	r1, r3, #6, #3
   16488:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   1648c:	f363 2152 	bfi	r1, r3, #9, #10
   16490:	f36f 41de 	bfc	r1, #19, #12
   16494:	f36f 71df 	bfc	r1, #31, #1
   16498:	2300      	movs	r3, #0
   1649a:	4834      	ldr	r0, [pc, #208]	; (1656c <mem_manage_fault+0x304>)
   1649c:	f010 fbdb 	bl	26c56 <z_impl_z_log_msg_static_create>
   164a0:	46cd      	mov	sp, r9
			if (from_hard_fault != 0) {
   164a2:	2c00      	cmp	r4, #0
   164a4:	f43f af1a 	beq.w	162dc <mem_manage_fault+0x74>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   164a8:	4a31      	ldr	r2, [pc, #196]	; (16570 <mem_manage_fault+0x308>)
   164aa:	6a93      	ldr	r3, [r2, #40]	; 0x28
   164ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   164b0:	6293      	str	r3, [r2, #40]	; 0x28
   164b2:	e713      	b.n	162dc <mem_manage_fault+0x74>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   164b4:	f06f 0c1b 	mvn.w	ip, #27
   164b8:	e7d1      	b.n	1645e <mem_manage_fault+0x1f6>
	uint32_t mmfar = -EINVAL;
   164ba:	f06f 0815 	mvn.w	r8, #21
   164be:	e70d      	b.n	162dc <mem_manage_fault+0x74>
		PR_FAULT_INFO("  Instruction Access Violation");
   164c0:	4b30      	ldr	r3, [pc, #192]	; (16584 <mem_manage_fault+0x31c>)
   164c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   164c4:	2302      	movs	r3, #2
   164c6:	713b      	strb	r3, [r7, #4]
   164c8:	2300      	movs	r3, #0
   164ca:	717b      	strb	r3, [r7, #5]
   164cc:	71bb      	strb	r3, [r7, #6]
   164ce:	71fb      	strb	r3, [r7, #7]
   164d0:	687a      	ldr	r2, [r7, #4]
   164d2:	67ba      	str	r2, [r7, #120]	; 0x78
   164d4:	4619      	mov	r1, r3
   164d6:	f363 0100 	bfi	r1, r3, #0, #1
   164da:	f363 0141 	bfi	r1, r3, #1, #1
   164de:	f363 0182 	bfi	r1, r3, #2, #1
   164e2:	f363 01c5 	bfi	r1, r3, #3, #3
   164e6:	2201      	movs	r2, #1
   164e8:	f362 1188 	bfi	r1, r2, #6, #3
   164ec:	2208      	movs	r2, #8
   164ee:	f362 2152 	bfi	r1, r2, #9, #10
   164f2:	f363 41de 	bfi	r1, r3, #19, #12
   164f6:	f363 71df 	bfi	r1, r3, #31, #1
   164fa:	f107 0278 	add.w	r2, r7, #120	; 0x78
   164fe:	481b      	ldr	r0, [pc, #108]	; (1656c <mem_manage_fault+0x304>)
   16500:	f010 fba9 	bl	26c56 <z_impl_z_log_msg_static_create>
   16504:	e6f0      	b.n	162e8 <mem_manage_fault+0x80>
		PR_FAULT_INFO(
   16506:	4b20      	ldr	r3, [pc, #128]	; (16588 <mem_manage_fault+0x320>)
   16508:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   1650c:	2302      	movs	r3, #2
   1650e:	713b      	strb	r3, [r7, #4]
   16510:	2300      	movs	r3, #0
   16512:	717b      	strb	r3, [r7, #5]
   16514:	71bb      	strb	r3, [r7, #6]
   16516:	71fb      	strb	r3, [r7, #7]
   16518:	687a      	ldr	r2, [r7, #4]
   1651a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   1651e:	4619      	mov	r1, r3
   16520:	f363 0100 	bfi	r1, r3, #0, #1
   16524:	f363 0141 	bfi	r1, r3, #1, #1
   16528:	f363 0182 	bfi	r1, r3, #2, #1
   1652c:	f363 01c5 	bfi	r1, r3, #3, #3
   16530:	2201      	movs	r2, #1
   16532:	f362 1188 	bfi	r1, r2, #6, #3
   16536:	2208      	movs	r2, #8
   16538:	f362 2152 	bfi	r1, r2, #9, #10
   1653c:	f363 41de 	bfi	r1, r3, #19, #12
   16540:	f363 71df 	bfi	r1, r3, #31, #1
   16544:	f107 0290 	add.w	r2, r7, #144	; 0x90
   16548:	4808      	ldr	r0, [pc, #32]	; (1656c <mem_manage_fault+0x304>)
   1654a:	f010 fb84 	bl	26c56 <z_impl_z_log_msg_static_create>
   1654e:	e6d1      	b.n	162f4 <mem_manage_fault+0x8c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   16550:	4629      	mov	r1, r5
   16552:	4640      	mov	r0, r8
   16554:	f7ff fa42 	bl	159dc <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   16558:	4604      	mov	r4, r0
   1655a:	2800      	cmp	r0, #0
   1655c:	f43f aeda 	beq.w	16314 <mem_manage_fault+0xac>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   16560:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   16564:	2402      	movs	r4, #2
   16566:	e6d5      	b.n	16314 <mem_manage_fault+0xac>
   16568:	0002e034 	.word	0x0002e034
   1656c:	0002d154 	.word	0x0002d154
   16570:	e000ed00 	.word	0xe000ed00
   16574:	0002e04c 	.word	0x0002e04c
   16578:	0002de44 	.word	0x0002de44
   1657c:	0002e080 	.word	0x0002e080
   16580:	0002e098 	.word	0x0002e098
   16584:	0002e0b0 	.word	0x0002e0b0
   16588:	0002dec0 	.word	0x0002dec0

0001658c <hard_fault>:
{
   1658c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1658e:	b09b      	sub	sp, #108	; 0x6c
   16590:	af00      	add	r7, sp, #0
   16592:	4606      	mov	r6, r0
   16594:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
   16596:	4b85      	ldr	r3, [pc, #532]	; (167ac <hard_fault+0x220>)
   16598:	61fb      	str	r3, [r7, #28]
   1659a:	2302      	movs	r3, #2
   1659c:	713b      	strb	r3, [r7, #4]
   1659e:	2400      	movs	r4, #0
   165a0:	717c      	strb	r4, [r7, #5]
   165a2:	71bc      	strb	r4, [r7, #6]
   165a4:	71fc      	strb	r4, [r7, #7]
   165a6:	687b      	ldr	r3, [r7, #4]
   165a8:	61bb      	str	r3, [r7, #24]
   165aa:	4621      	mov	r1, r4
   165ac:	f364 0100 	bfi	r1, r4, #0, #1
   165b0:	f364 0141 	bfi	r1, r4, #1, #1
   165b4:	f364 0182 	bfi	r1, r4, #2, #1
   165b8:	f364 01c5 	bfi	r1, r4, #3, #3
   165bc:	2301      	movs	r3, #1
   165be:	f363 1188 	bfi	r1, r3, #6, #3
   165c2:	2308      	movs	r3, #8
   165c4:	f363 2152 	bfi	r1, r3, #9, #10
   165c8:	f364 41de 	bfi	r1, r4, #19, #12
   165cc:	f364 71df 	bfi	r1, r4, #31, #1
   165d0:	4623      	mov	r3, r4
   165d2:	f107 0218 	add.w	r2, r7, #24
   165d6:	4876      	ldr	r0, [pc, #472]	; (167b0 <hard_fault+0x224>)
   165d8:	f010 fb3d 	bl	26c56 <z_impl_z_log_msg_static_create>
	*recoverable = false;
   165dc:	702c      	strb	r4, [r5, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   165de:	4b75      	ldr	r3, [pc, #468]	; (167b4 <hard_fault+0x228>)
   165e0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   165e2:	f014 0402 	ands.w	r4, r4, #2
   165e6:	d10c      	bne.n	16602 <hard_fault+0x76>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   165e8:	4b72      	ldr	r3, [pc, #456]	; (167b4 <hard_fault+0x228>)
   165ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   165ec:	2b00      	cmp	r3, #0
   165ee:	db2c      	blt.n	1664a <hard_fault+0xbe>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   165f0:	4b70      	ldr	r3, [pc, #448]	; (167b4 <hard_fault+0x228>)
   165f2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   165f4:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
   165f8:	d14a      	bne.n	16690 <hard_fault+0x104>
}
   165fa:	4620      	mov	r0, r4
   165fc:	376c      	adds	r7, #108	; 0x6c
   165fe:	46bd      	mov	sp, r7
   16600:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Bus fault on vector table read");
   16602:	4b6d      	ldr	r3, [pc, #436]	; (167b8 <hard_fault+0x22c>)
   16604:	667b      	str	r3, [r7, #100]	; 0x64
   16606:	2302      	movs	r3, #2
   16608:	713b      	strb	r3, [r7, #4]
   1660a:	2400      	movs	r4, #0
   1660c:	717c      	strb	r4, [r7, #5]
   1660e:	71bc      	strb	r4, [r7, #6]
   16610:	71fc      	strb	r4, [r7, #7]
   16612:	687b      	ldr	r3, [r7, #4]
   16614:	663b      	str	r3, [r7, #96]	; 0x60
   16616:	4621      	mov	r1, r4
   16618:	f364 0100 	bfi	r1, r4, #0, #1
   1661c:	f364 0141 	bfi	r1, r4, #1, #1
   16620:	f364 0182 	bfi	r1, r4, #2, #1
   16624:	f364 01c5 	bfi	r1, r4, #3, #3
   16628:	2301      	movs	r3, #1
   1662a:	f363 1188 	bfi	r1, r3, #6, #3
   1662e:	2308      	movs	r3, #8
   16630:	f363 2152 	bfi	r1, r3, #9, #10
   16634:	f364 41de 	bfi	r1, r4, #19, #12
   16638:	f364 71df 	bfi	r1, r4, #31, #1
   1663c:	4623      	mov	r3, r4
   1663e:	f107 0260 	add.w	r2, r7, #96	; 0x60
   16642:	485b      	ldr	r0, [pc, #364]	; (167b0 <hard_fault+0x224>)
   16644:	f010 fb07 	bl	26c56 <z_impl_z_log_msg_static_create>
   16648:	e7d7      	b.n	165fa <hard_fault+0x6e>
		PR_EXC("  Debug event");
   1664a:	4b5c      	ldr	r3, [pc, #368]	; (167bc <hard_fault+0x230>)
   1664c:	64fb      	str	r3, [r7, #76]	; 0x4c
   1664e:	2302      	movs	r3, #2
   16650:	713b      	strb	r3, [r7, #4]
   16652:	2300      	movs	r3, #0
   16654:	717b      	strb	r3, [r7, #5]
   16656:	71bb      	strb	r3, [r7, #6]
   16658:	71fb      	strb	r3, [r7, #7]
   1665a:	687a      	ldr	r2, [r7, #4]
   1665c:	64ba      	str	r2, [r7, #72]	; 0x48
   1665e:	4619      	mov	r1, r3
   16660:	f363 0100 	bfi	r1, r3, #0, #1
   16664:	f363 0141 	bfi	r1, r3, #1, #1
   16668:	f363 0182 	bfi	r1, r3, #2, #1
   1666c:	f363 01c5 	bfi	r1, r3, #3, #3
   16670:	2201      	movs	r2, #1
   16672:	f362 1188 	bfi	r1, r2, #6, #3
   16676:	2208      	movs	r2, #8
   16678:	f362 2152 	bfi	r1, r2, #9, #10
   1667c:	f363 41de 	bfi	r1, r3, #19, #12
   16680:	f363 71df 	bfi	r1, r3, #31, #1
   16684:	f107 0248 	add.w	r2, r7, #72	; 0x48
   16688:	4849      	ldr	r0, [pc, #292]	; (167b0 <hard_fault+0x224>)
   1668a:	f010 fae4 	bl	26c56 <z_impl_z_log_msg_static_create>
   1668e:	e7b4      	b.n	165fa <hard_fault+0x6e>
		PR_EXC("  Fault escalation (see below)");
   16690:	4b4b      	ldr	r3, [pc, #300]	; (167c0 <hard_fault+0x234>)
   16692:	637b      	str	r3, [r7, #52]	; 0x34
   16694:	2302      	movs	r3, #2
   16696:	713b      	strb	r3, [r7, #4]
   16698:	2300      	movs	r3, #0
   1669a:	717b      	strb	r3, [r7, #5]
   1669c:	71bb      	strb	r3, [r7, #6]
   1669e:	71fb      	strb	r3, [r7, #7]
   166a0:	687a      	ldr	r2, [r7, #4]
   166a2:	633a      	str	r2, [r7, #48]	; 0x30
   166a4:	4619      	mov	r1, r3
   166a6:	f363 0100 	bfi	r1, r3, #0, #1
   166aa:	f363 0141 	bfi	r1, r3, #1, #1
   166ae:	f363 0182 	bfi	r1, r3, #2, #1
   166b2:	f363 01c5 	bfi	r1, r3, #3, #3
   166b6:	2201      	movs	r2, #1
   166b8:	f362 1188 	bfi	r1, r2, #6, #3
   166bc:	2208      	movs	r2, #8
   166be:	f362 2152 	bfi	r1, r2, #9, #10
   166c2:	f363 41de 	bfi	r1, r3, #19, #12
   166c6:	f363 71df 	bfi	r1, r3, #31, #1
   166ca:	f107 0230 	add.w	r2, r7, #48	; 0x30
   166ce:	4838      	ldr	r0, [pc, #224]	; (167b0 <hard_fault+0x224>)
   166d0:	f010 fac1 	bl	26c56 <z_impl_z_log_msg_static_create>
		if (z_arm_is_synchronous_svc(esf)) {
   166d4:	4630      	mov	r0, r6
   166d6:	f7ff f9e9 	bl	15aac <z_arm_is_synchronous_svc>
   166da:	2800      	cmp	r0, #0
   166dc:	d042      	beq.n	16764 <hard_fault+0x1d8>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   166de:	6834      	ldr	r4, [r6, #0]
   166e0:	466d      	mov	r5, sp
   166e2:	b088      	sub	sp, #32
   166e4:	466b      	mov	r3, sp
   166e6:	f113 0210 	adds.w	r2, r3, #16
   166ea:	d00f      	beq.n	1670c <hard_fault+0x180>
   166ec:	210c      	movs	r1, #12
   166ee:	b14a      	cbz	r2, 16704 <hard_fault+0x178>
   166f0:	4608      	mov	r0, r1
   166f2:	2904      	cmp	r1, #4
   166f4:	dd03      	ble.n	166fe <hard_fault+0x172>
   166f6:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 167c4 <hard_fault+0x238>
   166fa:	f8c3 c014 	str.w	ip, [r3, #20]
   166fe:	2808      	cmp	r0, #8
   16700:	dd07      	ble.n	16712 <hard_fault+0x186>
   16702:	619c      	str	r4, [r3, #24]
   16704:	290b      	cmp	r1, #11
   16706:	dd2a      	ble.n	1675e <hard_fault+0x1d2>
   16708:	240c      	movs	r4, #12
   1670a:	e004      	b.n	16716 <hard_fault+0x18a>
   1670c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   16710:	e7ed      	b.n	166ee <hard_fault+0x162>
   16712:	f06f 041b 	mvn.w	r4, #27
   16716:	b13a      	cbz	r2, 16728 <hard_fault+0x19c>
   16718:	2103      	movs	r1, #3
   1671a:	7139      	strb	r1, [r7, #4]
   1671c:	2100      	movs	r1, #0
   1671e:	7179      	strb	r1, [r7, #5]
   16720:	71b9      	strb	r1, [r7, #6]
   16722:	71f9      	strb	r1, [r7, #7]
   16724:	6878      	ldr	r0, [r7, #4]
   16726:	6118      	str	r0, [r3, #16]
   16728:	2100      	movs	r1, #0
   1672a:	f36f 0100 	bfc	r1, #0, #1
   1672e:	f36f 0141 	bfc	r1, #1, #1
   16732:	f36f 0182 	bfc	r1, #2, #1
   16736:	f36f 01c5 	bfc	r1, #3, #3
   1673a:	2301      	movs	r3, #1
   1673c:	f363 1188 	bfi	r1, r3, #6, #3
   16740:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   16744:	f363 2152 	bfi	r1, r3, #9, #10
   16748:	f36f 41de 	bfc	r1, #19, #12
   1674c:	f36f 71df 	bfc	r1, #31, #1
   16750:	2300      	movs	r3, #0
   16752:	4817      	ldr	r0, [pc, #92]	; (167b0 <hard_fault+0x224>)
   16754:	f010 fa7f 	bl	26c56 <z_impl_z_log_msg_static_create>
   16758:	46ad      	mov	sp, r5
			reason = esf->basic.r0;
   1675a:	6834      	ldr	r4, [r6, #0]
   1675c:	e74d      	b.n	165fa <hard_fault+0x6e>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   1675e:	f06f 041b 	mvn.w	r4, #27
   16762:	e7d8      	b.n	16716 <hard_fault+0x18a>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   16764:	4b13      	ldr	r3, [pc, #76]	; (167b4 <hard_fault+0x228>)
   16766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16768:	f013 0fff 	tst.w	r3, #255	; 0xff
   1676c:	d10f      	bne.n	1678e <hard_fault+0x202>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   1676e:	4b11      	ldr	r3, [pc, #68]	; (167b4 <hard_fault+0x228>)
   16770:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   16772:	f414 447f 	ands.w	r4, r4, #65280	; 0xff00
   16776:	d111      	bne.n	1679c <hard_fault+0x210>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   16778:	4b0e      	ldr	r3, [pc, #56]	; (167b4 <hard_fault+0x228>)
   1677a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1677c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   16780:	f4ff af3b 	bcc.w	165fa <hard_fault+0x6e>
			reason = usage_fault(esf);
   16784:	4630      	mov	r0, r6
   16786:	f7ff fb87 	bl	15e98 <usage_fault>
   1678a:	4604      	mov	r4, r0
	return reason;
   1678c:	e735      	b.n	165fa <hard_fault+0x6e>
			reason = mem_manage_fault(esf, 1, recoverable);
   1678e:	462a      	mov	r2, r5
   16790:	2101      	movs	r1, #1
   16792:	4630      	mov	r0, r6
   16794:	f7ff fd68 	bl	16268 <mem_manage_fault>
   16798:	4604      	mov	r4, r0
   1679a:	e72e      	b.n	165fa <hard_fault+0x6e>
			reason = bus_fault(esf, 1, recoverable);
   1679c:	462a      	mov	r2, r5
   1679e:	2101      	movs	r1, #1
   167a0:	4630      	mov	r0, r6
   167a2:	f7ff f9e5 	bl	15b70 <bus_fault>
   167a6:	4604      	mov	r4, r0
   167a8:	e727      	b.n	165fa <hard_fault+0x6e>
   167aa:	bf00      	nop
   167ac:	0002e0d0 	.word	0x0002e0d0
   167b0:	0002d154 	.word	0x0002d154
   167b4:	e000ed00 	.word	0xe000ed00
   167b8:	0002e0e8 	.word	0x0002e0e8
   167bc:	0002e10c 	.word	0x0002e10c
   167c0:	0002e11c 	.word	0x0002e11c
   167c4:	0002e13c 	.word	0x0002e13c

000167c8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   167c8:	b530      	push	{r4, r5, lr}
   167ca:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   167cc:	4b1a      	ldr	r3, [pc, #104]	; (16838 <z_arm_fault+0x70>)
   167ce:	685c      	ldr	r4, [r3, #4]
   167d0:	f3c4 0408 	ubfx	r4, r4, #0, #9
   167d4:	2300      	movs	r3, #0
   167d6:	f383 8811 	msr	BASEPRI, r3
   167da:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(0);

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
   167de:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   167e2:	f7ff f981 	bl	15ae8 <get_esf>
   167e6:	4605      	mov	r5, r0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   167e8:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   167ec:	4621      	mov	r1, r4
   167ee:	f010 fdbc 	bl	2736a <fault_handle>
	if (recoverable) {
   167f2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   167f6:	b10b      	cbz	r3, 167fc <z_arm_fault+0x34>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   167f8:	b00b      	add	sp, #44	; 0x2c
   167fa:	bd30      	pop	{r4, r5, pc}
   167fc:	4604      	mov	r4, r0
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   167fe:	2220      	movs	r2, #32
   16800:	4629      	mov	r1, r5
   16802:	a801      	add	r0, sp, #4
   16804:	f010 fe62 	bl	274cc <memcpy>
	if (nested_exc) {
   16808:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1680c:	b14b      	cbz	r3, 16822 <z_arm_fault+0x5a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1680e:	9b08      	ldr	r3, [sp, #32]
   16810:	f3c3 0208 	ubfx	r2, r3, #0, #9
   16814:	b95a      	cbnz	r2, 1682e <z_arm_fault+0x66>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   16816:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   1681a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1681e:	9308      	str	r3, [sp, #32]
   16820:	e005      	b.n	1682e <z_arm_fault+0x66>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   16822:	9b08      	ldr	r3, [sp, #32]
   16824:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   16828:	f023 0301 	bic.w	r3, r3, #1
   1682c:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   1682e:	a901      	add	r1, sp, #4
   16830:	4620      	mov	r0, r4
   16832:	f010 fd65 	bl	27300 <z_arm_fatal_error>
   16836:	e7df      	b.n	167f8 <z_arm_fault+0x30>
   16838:	e000ed00 	.word	0xe000ed00

0001683c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1683c:	4a02      	ldr	r2, [pc, #8]	; (16848 <z_arm_fault_init+0xc>)
   1683e:	6953      	ldr	r3, [r2, #20]
   16840:	f043 0310 	orr.w	r3, r3, #16
   16844:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   16846:	4770      	bx	lr
   16848:	e000ed00 	.word	0xe000ed00

0001684c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   1684c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   16850:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   16854:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   16856:	4672      	mov	r2, lr
	bl z_arm_fault
   16858:	f7ff ffb6 	bl	167c8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   1685c:	bd01      	pop	{r0, pc}
   1685e:	bf00      	nop

00016860 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   16860:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   16862:	e006      	b.n	16872 <z_arm_interrupt_init+0x12>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16864:	f003 030f 	and.w	r3, r3, #15
   16868:	4909      	ldr	r1, [pc, #36]	; (16890 <z_arm_interrupt_init+0x30>)
   1686a:	4419      	add	r1, r3
   1686c:	2340      	movs	r3, #64	; 0x40
   1686e:	760b      	strb	r3, [r1, #24]
   16870:	3201      	adds	r2, #1
   16872:	2a2f      	cmp	r2, #47	; 0x2f
   16874:	dc0a      	bgt.n	1688c <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   16876:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   16878:	2b00      	cmp	r3, #0
   1687a:	dbf3      	blt.n	16864 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1687c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   16880:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   16884:	2140      	movs	r1, #64	; 0x40
   16886:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   1688a:	e7f1      	b.n	16870 <z_arm_interrupt_init+0x10>
	}
}
   1688c:	4770      	bx	lr
   1688e:	bf00      	nop
   16890:	e000ecfc 	.word	0xe000ecfc

00016894 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
   16894:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
   16896:	4913      	ldr	r1, [pc, #76]	; (168e4 <__start+0x50>)
    strb r0, [r1]
   16898:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   1689a:	2000      	movs	r0, #0
    msr CONTROL, r0
   1689c:	f380 8814 	msr	CONTROL, r0
    isb
   168a0:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   168a4:	f7fd fe72 	bl	1458c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   168a8:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   168aa:	490f      	ldr	r1, [pc, #60]	; (168e8 <__start+0x54>)
    str r0, [r1]
   168ac:	6008      	str	r0, [r1, #0]
    dsb
   168ae:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   168b2:	480e      	ldr	r0, [pc, #56]	; (168ec <__start+0x58>)
    msr msp, r0
   168b4:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   168b8:	f000 f830 	bl	1691c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   168bc:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   168be:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   168c2:	480b      	ldr	r0, [pc, #44]	; (168f0 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   168c4:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   168c8:	1840      	adds	r0, r0, r1
    msr PSP, r0
   168ca:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   168ce:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   168d2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   168d4:	4308      	orrs	r0, r1
    msr CONTROL, r0
   168d6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   168da:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   168de:	f7fe ffe7 	bl	158b0 <z_arm_prep_c>
   168e2:	0000      	.short	0x0000
    ldr r1, =z_sys_post_kernel
   168e4:	20008ed3 	.word	0x20008ed3
    ldr r1, =_SCS_MPU_CTRL
   168e8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   168ec:	2000ba80 	.word	0x2000ba80
    ldr r0, =z_interrupt_stacks
   168f0:	2000acc0 	.word	0x2000acc0

000168f4 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   168f4:	4b08      	ldr	r3, [pc, #32]	; (16918 <z_arm_clear_arm_mpu_config+0x24>)
   168f6:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
   168fa:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
   168fe:	2300      	movs	r3, #0
   16900:	e006      	b.n	16910 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
   16902:	4a05      	ldr	r2, [pc, #20]	; (16918 <z_arm_clear_arm_mpu_config+0x24>)
   16904:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
   16908:	2100      	movs	r1, #0
   1690a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
   1690e:	3301      	adds	r3, #1
   16910:	4283      	cmp	r3, r0
   16912:	dbf6      	blt.n	16902 <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
   16914:	4770      	bx	lr
   16916:	bf00      	nop
   16918:	e000ed00 	.word	0xe000ed00

0001691c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   1691c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   1691e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   16920:	2400      	movs	r4, #0
   16922:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   16926:	f7ff ffe5 	bl	168f4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   1692a:	4623      	mov	r3, r4
   1692c:	e008      	b.n	16940 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
   1692e:	f103 0120 	add.w	r1, r3, #32
   16932:	4a0e      	ldr	r2, [pc, #56]	; (1696c <z_arm_init_arch_hw_at_boot+0x50>)
   16934:	f04f 30ff 	mov.w	r0, #4294967295
   16938:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   1693c:	3301      	adds	r3, #1
   1693e:	b2db      	uxtb	r3, r3
   16940:	2b07      	cmp	r3, #7
   16942:	d9f4      	bls.n	1692e <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   16944:	2300      	movs	r3, #0
   16946:	e008      	b.n	1695a <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
   16948:	f103 0160 	add.w	r1, r3, #96	; 0x60
   1694c:	4a07      	ldr	r2, [pc, #28]	; (1696c <z_arm_init_arch_hw_at_boot+0x50>)
   1694e:	f04f 30ff 	mov.w	r0, #4294967295
   16952:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   16956:	3301      	adds	r3, #1
   16958:	b2db      	uxtb	r3, r3
   1695a:	2b07      	cmp	r3, #7
   1695c:	d9f4      	bls.n	16948 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   1695e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   16960:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16964:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   16968:	bd10      	pop	{r4, pc}
   1696a:	bf00      	nop
   1696c:	e000e100 	.word	0xe000e100

00016970 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   16970:	b508      	push	{r3, lr}
	if (_current == thread) {
   16972:	4b0a      	ldr	r3, [pc, #40]	; (1699c <z_impl_k_thread_abort+0x2c>)
   16974:	689b      	ldr	r3, [r3, #8]
   16976:	4283      	cmp	r3, r0
   16978:	d002      	beq.n	16980 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
   1697a:	f00e f90f 	bl	24b9c <z_thread_abort>
}
   1697e:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   16980:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   16984:	2b00      	cmp	r3, #0
   16986:	d0f8      	beq.n	1697a <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   16988:	4b05      	ldr	r3, [pc, #20]	; (169a0 <z_impl_k_thread_abort+0x30>)
   1698a:	685a      	ldr	r2, [r3, #4]
   1698c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   16990:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   16992:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   16994:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   16998:	625a      	str	r2, [r3, #36]	; 0x24
   1699a:	e7ee      	b.n	1697a <z_impl_k_thread_abort+0xa>
   1699c:	20008e80 	.word	0x20008e80
   169a0:	e000ed00 	.word	0xe000ed00

000169a4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   169a4:	b508      	push	{r3, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   169a6:	4b03      	ldr	r3, [pc, #12]	; (169b4 <z_arm_configure_static_mpu_regions+0x10>)
   169a8:	4a03      	ldr	r2, [pc, #12]	; (169b8 <z_arm_configure_static_mpu_regions+0x14>)
   169aa:	2101      	movs	r1, #1
   169ac:	4803      	ldr	r0, [pc, #12]	; (169bc <z_arm_configure_static_mpu_regions+0x18>)
   169ae:	f010 fd31 	bl	27414 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   169b2:	bd08      	pop	{r3, pc}
   169b4:	20020000 	.word	0x20020000
   169b8:	20000000 	.word	0x20000000
   169bc:	0002e158 	.word	0x0002e158

000169c0 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   169c0:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   169c2:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   169c6:	3b40      	subs	r3, #64	; 0x40
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   169c8:	4804      	ldr	r0, [pc, #16]	; (169dc <z_arm_configure_dynamic_mpu_regions+0x1c>)
   169ca:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
   169cc:	2340      	movs	r3, #64	; 0x40
   169ce:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   169d0:	4b03      	ldr	r3, [pc, #12]	; (169e0 <z_arm_configure_dynamic_mpu_regions+0x20>)
   169d2:	6083      	str	r3, [r0, #8]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   169d4:	2101      	movs	r1, #1
   169d6:	f010 fd21 	bl	2741c <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_enable();
#endif
}
   169da:	bd08      	pop	{r3, pc}
   169dc:	20007a80 	.word	0x20007a80
   169e0:	150b0000 	.word	0x150b0000

000169e4 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   169e4:	4a08      	ldr	r2, [pc, #32]	; (16a08 <region_init+0x24>)
   169e6:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   169ea:	680b      	ldr	r3, [r1, #0]
   169ec:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   169f0:	4303      	orrs	r3, r0
   169f2:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   169f6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   169fa:	688b      	ldr	r3, [r1, #8]
   169fc:	f043 0301 	orr.w	r3, r3, #1
   16a00:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
   16a04:	4770      	bx	lr
   16a06:	bf00      	nop
   16a08:	e000ed00 	.word	0xe000ed00

00016a0c <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
   16a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   16a0e:	b083      	sub	sp, #12
   16a10:	af00      	add	r7, sp, #0
   16a12:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   16a14:	2807      	cmp	r0, #7
   16a16:	d805      	bhi.n	16a24 <region_allocate_and_init+0x18>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   16a18:	f7ff ffe4 	bl	169e4 <region_init>

	return index;
   16a1c:	4620      	mov	r0, r4
}
   16a1e:	370c      	adds	r7, #12
   16a20:	46bd      	mov	sp, r7
   16a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   16a24:	466d      	mov	r5, sp
   16a26:	b088      	sub	sp, #32
   16a28:	466b      	mov	r3, sp
   16a2a:	f113 0210 	adds.w	r2, r3, #16
   16a2e:	d031      	beq.n	16a94 <region_allocate_and_init+0x88>
   16a30:	210c      	movs	r1, #12
   16a32:	b13a      	cbz	r2, 16a44 <region_allocate_and_init+0x38>
   16a34:	4608      	mov	r0, r1
   16a36:	2904      	cmp	r1, #4
   16a38:	dd01      	ble.n	16a3e <region_allocate_and_init+0x32>
   16a3a:	4e19      	ldr	r6, [pc, #100]	; (16aa0 <region_allocate_and_init+0x94>)
   16a3c:	615e      	str	r6, [r3, #20]
   16a3e:	2808      	cmp	r0, #8
   16a40:	dd00      	ble.n	16a44 <region_allocate_and_init+0x38>
   16a42:	619c      	str	r4, [r3, #24]
   16a44:	290b      	cmp	r1, #11
   16a46:	dd28      	ble.n	16a9a <region_allocate_and_init+0x8e>
   16a48:	240c      	movs	r4, #12
   16a4a:	b13a      	cbz	r2, 16a5c <region_allocate_and_init+0x50>
   16a4c:	2103      	movs	r1, #3
   16a4e:	7139      	strb	r1, [r7, #4]
   16a50:	2100      	movs	r1, #0
   16a52:	7179      	strb	r1, [r7, #5]
   16a54:	71b9      	strb	r1, [r7, #6]
   16a56:	71f9      	strb	r1, [r7, #7]
   16a58:	6878      	ldr	r0, [r7, #4]
   16a5a:	6118      	str	r0, [r3, #16]
   16a5c:	2100      	movs	r1, #0
   16a5e:	f36f 0100 	bfc	r1, #0, #1
   16a62:	f36f 0141 	bfc	r1, #1, #1
   16a66:	f36f 0182 	bfc	r1, #2, #1
   16a6a:	f36f 01c5 	bfc	r1, #3, #3
   16a6e:	2301      	movs	r3, #1
   16a70:	f363 1188 	bfi	r1, r3, #6, #3
   16a74:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   16a78:	f364 2152 	bfi	r1, r4, #9, #10
   16a7c:	f36f 41de 	bfc	r1, #19, #12
   16a80:	f36f 71df 	bfc	r1, #31, #1
   16a84:	2300      	movs	r3, #0
   16a86:	4807      	ldr	r0, [pc, #28]	; (16aa4 <region_allocate_and_init+0x98>)
   16a88:	f010 f8e5 	bl	26c56 <z_impl_z_log_msg_static_create>
   16a8c:	46ad      	mov	sp, r5
		return -EINVAL;
   16a8e:	f06f 0015 	mvn.w	r0, #21
   16a92:	e7c4      	b.n	16a1e <region_allocate_and_init+0x12>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   16a94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   16a98:	e7cb      	b.n	16a32 <region_allocate_and_init+0x26>
   16a9a:	f06f 041b 	mvn.w	r4, #27
   16a9e:	e7d4      	b.n	16a4a <region_allocate_and_init+0x3e>
   16aa0:	0002e168 	.word	0x0002e168
   16aa4:	0002d144 	.word	0x0002d144

00016aa8 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   16aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16aac:	b082      	sub	sp, #8
   16aae:	af00      	add	r7, sp, #0
   16ab0:	4681      	mov	r9, r0
   16ab2:	4688      	mov	r8, r1
   16ab4:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
   16ab6:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
   16ab8:	2500      	movs	r5, #0
   16aba:	e00f      	b.n	16adc <mpu_configure_regions+0x34>
		}
		/* Non-empty region. */

		if (do_sanity_check &&
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   16abc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   16ac0:	e024      	b.n	16b0c <mpu_configure_regions+0x64>
   16ac2:	f06f 041b 	mvn.w	r4, #27
   16ac6:	e02d      	b.n	16b24 <mpu_configure_regions+0x7c>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   16ac8:	4621      	mov	r1, r4
   16aca:	b2f0      	uxtb	r0, r6
   16acc:	f010 fc83 	bl	273d6 <mpu_configure_region>
   16ad0:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
   16ad2:	f110 0f16 	cmn.w	r0, #22
   16ad6:	d049      	beq.n	16b6c <mpu_configure_regions+0xc4>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
   16ad8:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
   16ada:	3501      	adds	r5, #1
   16adc:	4545      	cmp	r5, r8
   16ade:	da45      	bge.n	16b6c <mpu_configure_regions+0xc4>
		if (regions[i].size == 0U) {
   16ae0:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   16ae4:	eb09 0484 	add.w	r4, r9, r4, lsl #2
   16ae8:	6862      	ldr	r2, [r4, #4]
   16aea:	2a00      	cmp	r2, #0
   16aec:	d0f5      	beq.n	16ada <mpu_configure_regions+0x32>
		if (do_sanity_check &&
   16aee:	f1ba 0f00 	cmp.w	sl, #0
   16af2:	d0e9      	beq.n	16ac8 <mpu_configure_regions+0x20>
				(!mpu_partition_is_valid(&regions[i]))) {
   16af4:	4620      	mov	r0, r4
   16af6:	f010 fc5d 	bl	273b4 <mpu_partition_is_valid>
		if (do_sanity_check &&
   16afa:	2800      	cmp	r0, #0
   16afc:	d1e4      	bne.n	16ac8 <mpu_configure_regions+0x20>
			LOG_ERR("Partition %u: sanity check failed.", i);
   16afe:	466e      	mov	r6, sp
   16b00:	b088      	sub	sp, #32
   16b02:	466b      	mov	r3, sp
   16b04:	f113 0210 	adds.w	r2, r3, #16
   16b08:	d0d8      	beq.n	16abc <mpu_configure_regions+0x14>
   16b0a:	210c      	movs	r1, #12
   16b0c:	b13a      	cbz	r2, 16b1e <mpu_configure_regions+0x76>
   16b0e:	4608      	mov	r0, r1
   16b10:	2904      	cmp	r1, #4
   16b12:	dd01      	ble.n	16b18 <mpu_configure_regions+0x70>
   16b14:	4c18      	ldr	r4, [pc, #96]	; (16b78 <mpu_configure_regions+0xd0>)
   16b16:	615c      	str	r4, [r3, #20]
   16b18:	2808      	cmp	r0, #8
   16b1a:	dd00      	ble.n	16b1e <mpu_configure_regions+0x76>
   16b1c:	619d      	str	r5, [r3, #24]
   16b1e:	290b      	cmp	r1, #11
   16b20:	ddcf      	ble.n	16ac2 <mpu_configure_regions+0x1a>
   16b22:	240c      	movs	r4, #12
   16b24:	b13a      	cbz	r2, 16b36 <mpu_configure_regions+0x8e>
   16b26:	2103      	movs	r1, #3
   16b28:	7139      	strb	r1, [r7, #4]
   16b2a:	2100      	movs	r1, #0
   16b2c:	7179      	strb	r1, [r7, #5]
   16b2e:	71b9      	strb	r1, [r7, #6]
   16b30:	71f9      	strb	r1, [r7, #7]
   16b32:	6878      	ldr	r0, [r7, #4]
   16b34:	6118      	str	r0, [r3, #16]
   16b36:	2100      	movs	r1, #0
   16b38:	f36f 0100 	bfc	r1, #0, #1
   16b3c:	f36f 0141 	bfc	r1, #1, #1
   16b40:	f36f 0182 	bfc	r1, #2, #1
   16b44:	f36f 01c5 	bfc	r1, #3, #3
   16b48:	2301      	movs	r3, #1
   16b4a:	f363 1188 	bfi	r1, r3, #6, #3
   16b4e:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   16b52:	f363 2152 	bfi	r1, r3, #9, #10
   16b56:	f36f 41de 	bfc	r1, #19, #12
   16b5a:	f36f 71df 	bfc	r1, #31, #1
   16b5e:	2300      	movs	r3, #0
   16b60:	4806      	ldr	r0, [pc, #24]	; (16b7c <mpu_configure_regions+0xd4>)
   16b62:	f010 f878 	bl	26c56 <z_impl_z_log_msg_static_create>
   16b66:	46b5      	mov	sp, r6
			return -EINVAL;
   16b68:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
   16b6c:	4630      	mov	r0, r6
   16b6e:	3708      	adds	r7, #8
   16b70:	46bd      	mov	sp, r7
   16b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16b76:	bf00      	nop
   16b78:	0002e190 	.word	0x0002e190
   16b7c:	0002d144 	.word	0x0002d144

00016b80 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
   16b80:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   16b82:	4c03      	ldr	r4, [pc, #12]	; (16b90 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   16b84:	2301      	movs	r3, #1
   16b86:	7822      	ldrb	r2, [r4, #0]
   16b88:	f7ff ff8e 	bl	16aa8 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   16b8c:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
   16b8e:	bd10      	pop	{r4, pc}
   16b90:	20008ecb 	.word	0x20008ecb

00016b94 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   16b94:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   16b96:	2300      	movs	r3, #0
   16b98:	4a09      	ldr	r2, [pc, #36]	; (16bc0 <mpu_configure_dynamic_mpu_regions+0x2c>)
   16b9a:	7812      	ldrb	r2, [r2, #0]
   16b9c:	f7ff ff84 	bl	16aa8 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   16ba0:	f110 0f16 	cmn.w	r0, #22
   16ba4:	d00a      	beq.n	16bbc <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   16ba6:	4603      	mov	r3, r0
   16ba8:	e006      	b.n	16bb8 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
   16baa:	4a06      	ldr	r2, [pc, #24]	; (16bc4 <mpu_configure_dynamic_mpu_regions+0x30>)
   16bac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
   16bb0:	2100      	movs	r1, #0
   16bb2:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
   16bb6:	3301      	adds	r3, #1
   16bb8:	2b07      	cmp	r3, #7
   16bba:	ddf6      	ble.n	16baa <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
   16bbc:	bd08      	pop	{r3, pc}
   16bbe:	bf00      	nop
   16bc0:	20008ecb 	.word	0x20008ecb
   16bc4:	e000ed00 	.word	0xe000ed00

00016bc8 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   16bc8:	4b04      	ldr	r3, [pc, #16]	; (16bdc <arm_core_mpu_enable+0x14>)
   16bca:	2205      	movs	r2, #5
   16bcc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   16bd0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16bd4:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   16bd8:	4770      	bx	lr
   16bda:	bf00      	nop
   16bdc:	e000ed00 	.word	0xe000ed00

00016be0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   16be0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   16be4:	4b02      	ldr	r3, [pc, #8]	; (16bf0 <arm_core_mpu_disable+0x10>)
   16be6:	2200      	movs	r2, #0
   16be8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   16bec:	4770      	bx	lr
   16bee:	bf00      	nop
   16bf0:	e000ed00 	.word	0xe000ed00

00016bf4 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   16bf4:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   16bf6:	4b0e      	ldr	r3, [pc, #56]	; (16c30 <z_arm_mpu_init+0x3c>)
   16bf8:	681d      	ldr	r5, [r3, #0]
   16bfa:	2d08      	cmp	r5, #8
   16bfc:	d815      	bhi.n	16c2a <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   16bfe:	f7ff ffef 	bl	16be0 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   16c02:	2400      	movs	r4, #0
   16c04:	e009      	b.n	16c1a <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   16c06:	4b0a      	ldr	r3, [pc, #40]	; (16c30 <z_arm_mpu_init+0x3c>)
   16c08:	6859      	ldr	r1, [r3, #4]
   16c0a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   16c0e:	0093      	lsls	r3, r2, #2
   16c10:	4419      	add	r1, r3
   16c12:	4620      	mov	r0, r4
   16c14:	f7ff fee6 	bl	169e4 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   16c18:	3401      	adds	r4, #1
   16c1a:	42a5      	cmp	r5, r4
   16c1c:	d8f3      	bhi.n	16c06 <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   16c1e:	4b05      	ldr	r3, [pc, #20]	; (16c34 <z_arm_mpu_init+0x40>)
   16c20:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   16c22:	f7ff ffd1 	bl	16bc8 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   16c26:	2000      	movs	r0, #0
}
   16c28:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   16c2a:	f04f 30ff 	mov.w	r0, #4294967295
   16c2e:	e7fb      	b.n	16c28 <z_arm_mpu_init+0x34>
   16c30:	0002e1b4 	.word	0x0002e1b4
   16c34:	20008ecb 	.word	0x20008ecb

00016c38 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   16c38:	4b01      	ldr	r3, [pc, #4]	; (16c40 <__stdout_hook_install+0x8>)
   16c3a:	6018      	str	r0, [r3, #0]
}
   16c3c:	4770      	bx	lr
   16c3e:	bf00      	nop
   16c40:	200006dc 	.word	0x200006dc

00016c44 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   16c44:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   16c48:	4905      	ldr	r1, [pc, #20]	; (16c60 <__NVIC_SystemReset+0x1c>)
   16c4a:	68ca      	ldr	r2, [r1, #12]
   16c4c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   16c50:	4b04      	ldr	r3, [pc, #16]	; (16c64 <__NVIC_SystemReset+0x20>)
   16c52:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   16c54:	60cb      	str	r3, [r1, #12]
   16c56:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   16c5a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   16c5c:	e7fd      	b.n	16c5a <__NVIC_SystemReset+0x16>
   16c5e:	bf00      	nop
   16c60:	e000ed00 	.word	0xe000ed00
   16c64:	05fa0004 	.word	0x05fa0004

00016c68 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   16c68:	f04f 0340 	mov.w	r3, #64	; 0x40
   16c6c:	f3ef 8211 	mrs	r2, BASEPRI
   16c70:	f383 8812 	msr	BASEPRI_MAX, r3
   16c74:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   16c78:	2301      	movs	r3, #1
   16c7a:	4906      	ldr	r1, [pc, #24]	; (16c94 <nordicsemi_nrf52_init+0x2c>)
   16c7c:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   16c80:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   16c84:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   16c88:	f382 8811 	msr	BASEPRI, r2
   16c8c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   16c90:	2000      	movs	r0, #0
   16c92:	4770      	bx	lr
   16c94:	4001e000 	.word	0x4001e000

00016c98 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   16c98:	b130      	cbz	r0, 16ca8 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
   16c9a:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   16c9c:	4b03      	ldr	r3, [pc, #12]	; (16cac <arch_busy_wait+0x14>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   16c9e:	0180      	lsls	r0, r0, #6
   16ca0:	f043 0301 	orr.w	r3, r3, #1
   16ca4:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
   16ca6:	bd08      	pop	{r3, pc}
   16ca8:	4770      	bx	lr
   16caa:	bf00      	nop
   16cac:	0002d230 	.word	0x0002d230

00016cb0 <bt_addr_le_to_str>:
{
   16cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   16cb2:	b08b      	sub	sp, #44	; 0x2c
   16cb4:	4604      	mov	r4, r0
   16cb6:	460d      	mov	r5, r1
   16cb8:	4616      	mov	r6, r2
	switch (addr->type) {
   16cba:	7803      	ldrb	r3, [r0, #0]
   16cbc:	2b03      	cmp	r3, #3
   16cbe:	d82c      	bhi.n	16d1a <bt_addr_le_to_str+0x6a>
   16cc0:	e8df f003 	tbb	[pc, r3]
   16cc4:	26211c02 	.word	0x26211c02
		strcpy(type, "public");
   16cc8:	4917      	ldr	r1, [pc, #92]	; (16d28 <bt_addr_le_to_str+0x78>)
   16cca:	a807      	add	r0, sp, #28
   16ccc:	f010 fbaa 	bl	27424 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   16cd0:	7963      	ldrb	r3, [r4, #5]
   16cd2:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   16cd4:	78e1      	ldrb	r1, [r4, #3]
   16cd6:	78a0      	ldrb	r0, [r4, #2]
   16cd8:	7867      	ldrb	r7, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   16cda:	f10d 0c1c 	add.w	ip, sp, #28
   16cde:	f8cd c014 	str.w	ip, [sp, #20]
   16ce2:	9704      	str	r7, [sp, #16]
   16ce4:	9003      	str	r0, [sp, #12]
   16ce6:	9102      	str	r1, [sp, #8]
   16ce8:	9201      	str	r2, [sp, #4]
   16cea:	9300      	str	r3, [sp, #0]
   16cec:	79a3      	ldrb	r3, [r4, #6]
   16cee:	4a0f      	ldr	r2, [pc, #60]	; (16d2c <bt_addr_le_to_str+0x7c>)
   16cf0:	4631      	mov	r1, r6
   16cf2:	4628      	mov	r0, r5
   16cf4:	f00e feb6 	bl	25a64 <snprintk>
}
   16cf8:	b00b      	add	sp, #44	; 0x2c
   16cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   16cfc:	490c      	ldr	r1, [pc, #48]	; (16d30 <bt_addr_le_to_str+0x80>)
   16cfe:	a807      	add	r0, sp, #28
   16d00:	f010 fb90 	bl	27424 <strcpy>
		break;
   16d04:	e7e4      	b.n	16cd0 <bt_addr_le_to_str+0x20>
		strcpy(type, "public-id");
   16d06:	490b      	ldr	r1, [pc, #44]	; (16d34 <bt_addr_le_to_str+0x84>)
   16d08:	a807      	add	r0, sp, #28
   16d0a:	f010 fb8b 	bl	27424 <strcpy>
		break;
   16d0e:	e7df      	b.n	16cd0 <bt_addr_le_to_str+0x20>
		strcpy(type, "random-id");
   16d10:	4909      	ldr	r1, [pc, #36]	; (16d38 <bt_addr_le_to_str+0x88>)
   16d12:	a807      	add	r0, sp, #28
   16d14:	f010 fb86 	bl	27424 <strcpy>
		break;
   16d18:	e7da      	b.n	16cd0 <bt_addr_le_to_str+0x20>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   16d1a:	4a08      	ldr	r2, [pc, #32]	; (16d3c <bt_addr_le_to_str+0x8c>)
   16d1c:	210a      	movs	r1, #10
   16d1e:	a807      	add	r0, sp, #28
   16d20:	f00e fea0 	bl	25a64 <snprintk>
		break;
   16d24:	e7d4      	b.n	16cd0 <bt_addr_le_to_str+0x20>
   16d26:	bf00      	nop
   16d28:	0002d318 	.word	0x0002d318
   16d2c:	0002d340 	.word	0x0002d340
   16d30:	0002d320 	.word	0x0002d320
   16d34:	0002d328 	.word	0x0002d328
   16d38:	0002d334 	.word	0x0002d334
   16d3c:	0002f044 	.word	0x0002f044

00016d40 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   16d40:	2940      	cmp	r1, #64	; 0x40
   16d42:	bf28      	it	cs
   16d44:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
   16d46:	2300      	movs	r3, #0
   16d48:	428b      	cmp	r3, r1
   16d4a:	d21c      	bcs.n	16d86 <bt_hex+0x46>
{
   16d4c:	b430      	push	{r4, r5}
		str[i * 2] = hex[b[i] >> 4];
   16d4e:	f810 c003 	ldrb.w	ip, [r0, r3]
   16d52:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
   16d56:	005a      	lsls	r2, r3, #1
   16d58:	4d0d      	ldr	r5, [pc, #52]	; (16d90 <bt_hex+0x50>)
   16d5a:	f815 c00c 	ldrb.w	ip, [r5, ip]
   16d5e:	4c0d      	ldr	r4, [pc, #52]	; (16d94 <bt_hex+0x54>)
   16d60:	f804 c013 	strb.w	ip, [r4, r3, lsl #1]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   16d64:	f810 c003 	ldrb.w	ip, [r0, r3]
   16d68:	f00c 0c0f 	and.w	ip, ip, #15
   16d6c:	3201      	adds	r2, #1
   16d6e:	f815 500c 	ldrb.w	r5, [r5, ip]
   16d72:	54a5      	strb	r5, [r4, r2]
	for (i = 0; i < len; i++) {
   16d74:	3301      	adds	r3, #1
   16d76:	428b      	cmp	r3, r1
   16d78:	d3e9      	bcc.n	16d4e <bt_hex+0xe>
	}

	str[i * 2] = '\0';
   16d7a:	4806      	ldr	r0, [pc, #24]	; (16d94 <bt_hex+0x54>)
   16d7c:	2200      	movs	r2, #0
   16d7e:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]

	return str;
}
   16d82:	bc30      	pop	{r4, r5}
   16d84:	4770      	bx	lr
	str[i * 2] = '\0';
   16d86:	4803      	ldr	r0, [pc, #12]	; (16d94 <bt_hex+0x54>)
   16d88:	2200      	movs	r2, #0
   16d8a:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
}
   16d8e:	4770      	bx	lr
   16d90:	0002e208 	.word	0x0002e208
   16d94:	20007aac 	.word	0x20007aac

00016d98 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   16d98:	b510      	push	{r4, lr}
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));
   16d9a:	4c03      	ldr	r4, [pc, #12]	; (16da8 <bt_addr_le_str+0x10>)
   16d9c:	221e      	movs	r2, #30
   16d9e:	4621      	mov	r1, r4
   16da0:	f7ff ff86 	bl	16cb0 <bt_addr_le_to_str>

	return str;
}
   16da4:	4620      	mov	r0, r4
   16da6:	bd10      	pop	{r4, pc}
   16da8:	20007a8c 	.word	0x20007a8c

00016dac <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   16dac:	b570      	push	{r4, r5, r6, lr}
   16dae:	b084      	sub	sp, #16
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   16db0:	ae02      	add	r6, sp, #8
   16db2:	2400      	movs	r4, #0
   16db4:	9402      	str	r4, [sp, #8]
   16db6:	9403      	str	r4, [sp, #12]
   16db8:	4b08      	ldr	r3, [pc, #32]	; (16ddc <long_wq_init+0x30>)
   16dba:	9302      	str	r3, [sp, #8]

	k_work_queue_init(&bt_long_wq);
   16dbc:	4d08      	ldr	r5, [pc, #32]	; (16de0 <long_wq_init+0x34>)
   16dbe:	4628      	mov	r0, r5
   16dc0:	f015 fab6 	bl	2c330 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   16dc4:	9600      	str	r6, [sp, #0]
   16dc6:	230a      	movs	r3, #10
   16dc8:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   16dcc:	4905      	ldr	r1, [pc, #20]	; (16de4 <long_wq_init+0x38>)
   16dce:	4628      	mov	r0, r5
   16dd0:	f00d faac 	bl	2432c <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   16dd4:	4620      	mov	r0, r4
   16dd6:	b004      	add	sp, #16
   16dd8:	bd70      	pop	{r4, r5, r6, pc}
   16dda:	bf00      	nop
   16ddc:	0002e21c 	.word	0x0002e21c
   16de0:	20001f40 	.word	0x20001f40
   16de4:	20009240 	.word	0x20009240

00016de8 <bt_long_wq_schedule>:
{
   16de8:	b508      	push	{r3, lr}
   16dea:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   16dec:	4801      	ldr	r0, [pc, #4]	; (16df4 <bt_long_wq_schedule+0xc>)
   16dee:	f015 fac1 	bl	2c374 <k_work_schedule_for_queue>
}
   16df2:	bd08      	pop	{r3, pc}
   16df4:	20001f40 	.word	0x20001f40

00016df8 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   16df8:	b510      	push	{r4, lr}
   16dfa:	4686      	mov	lr, r0
   16dfc:	468c      	mov	ip, r1
	switch (src->type) {
   16dfe:	7803      	ldrb	r3, [r0, #0]
   16e00:	2b01      	cmp	r3, #1
   16e02:	d018      	beq.n	16e36 <uuid_to_uuid128+0x3e>
   16e04:	2b02      	cmp	r3, #2
   16e06:	d032      	beq.n	16e6e <uuid_to_uuid128+0x76>
   16e08:	b103      	cbz	r3, 16e0c <uuid_to_uuid128+0x14>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   16e0a:	bd10      	pop	{r4, pc}
		*dst = uuid128_base;
   16e0c:	4c1b      	ldr	r4, [pc, #108]	; (16e7c <uuid_to_uuid128+0x84>)
   16e0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   16e10:	f8cc 0000 	str.w	r0, [ip]
   16e14:	f8cc 1004 	str.w	r1, [ip, #4]
   16e18:	f8cc 2008 	str.w	r2, [ip, #8]
   16e1c:	f8cc 300c 	str.w	r3, [ip, #12]
   16e20:	7823      	ldrb	r3, [r4, #0]
   16e22:	f88c 3010 	strb.w	r3, [ip, #16]
		sys_put_le16(BT_UUID_16(src)->val,
   16e26:	f8be 3002 	ldrh.w	r3, [lr, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   16e2a:	f88c 300d 	strb.w	r3, [ip, #13]
	dst[1] = val >> 8;
   16e2e:	0a1b      	lsrs	r3, r3, #8
   16e30:	f88c 300e 	strb.w	r3, [ip, #14]
}
   16e34:	e7e9      	b.n	16e0a <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
   16e36:	4c11      	ldr	r4, [pc, #68]	; (16e7c <uuid_to_uuid128+0x84>)
   16e38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   16e3a:	f8cc 0000 	str.w	r0, [ip]
   16e3e:	f8cc 1004 	str.w	r1, [ip, #4]
   16e42:	f8cc 2008 	str.w	r2, [ip, #8]
   16e46:	f8cc 300c 	str.w	r3, [ip, #12]
   16e4a:	7823      	ldrb	r3, [r4, #0]
   16e4c:	f88c 3010 	strb.w	r3, [ip, #16]
		sys_put_le32(BT_UUID_32(src)->val,
   16e50:	f8de 3004 	ldr.w	r3, [lr, #4]
	dst[0] = val;
   16e54:	f88c 300d 	strb.w	r3, [ip, #13]
	dst[1] = val >> 8;
   16e58:	f3c3 2207 	ubfx	r2, r3, #8, #8
   16e5c:	f88c 200e 	strb.w	r2, [ip, #14]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   16e60:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   16e62:	f88c 200f 	strb.w	r2, [ip, #15]
	dst[1] = val >> 8;
   16e66:	0e1b      	lsrs	r3, r3, #24
   16e68:	f88c 3010 	strb.w	r3, [ip, #16]
}
   16e6c:	e7cd      	b.n	16e0a <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
   16e6e:	2211      	movs	r2, #17
   16e70:	4601      	mov	r1, r0
   16e72:	4660      	mov	r0, ip
   16e74:	f010 fb2a 	bl	274cc <memcpy>
		return;
   16e78:	e7c7      	b.n	16e0a <uuid_to_uuid128+0x12>
   16e7a:	bf00      	nop
   16e7c:	0002e228 	.word	0x0002e228

00016e80 <bt_addr_from_str>:

	return 0;
}

int bt_addr_from_str(const char *str, bt_addr_t *addr)
{
   16e80:	b5f0      	push	{r4, r5, r6, r7, lr}
   16e82:	b083      	sub	sp, #12
   16e84:	4605      	mov	r5, r0
   16e86:	460f      	mov	r7, r1
	int i, j;
	uint8_t tmp;

	if (strlen(str) != 17U) {
   16e88:	f010 faf0 	bl	2746c <strlen>
   16e8c:	2811      	cmp	r0, #17
   16e8e:	d12a      	bne.n	16ee6 <bt_addr_from_str+0x66>
		return -EINVAL;
	}

	for (i = 5, j = 1; *str != '\0'; str++, j++) {
   16e90:	2401      	movs	r4, #1
   16e92:	2605      	movs	r6, #5
   16e94:	e012      	b.n	16ebc <bt_addr_from_str+0x3c>
		if (!(j % 3) && (*str != ':')) {
			return -EINVAL;
		} else if (*str == ':') {
   16e96:	2a3a      	cmp	r2, #58	; 0x3a
   16e98:	d020      	beq.n	16edc <bt_addr_from_str+0x5c>
			i--;
			continue;
		}

		addr->val[i] = addr->val[i] << 4;
   16e9a:	5dbb      	ldrb	r3, [r7, r6]
   16e9c:	011b      	lsls	r3, r3, #4
   16e9e:	55bb      	strb	r3, [r7, r6]

		if (char2hex(*str, &tmp) < 0) {
   16ea0:	f10d 0107 	add.w	r1, sp, #7
   16ea4:	7828      	ldrb	r0, [r5, #0]
   16ea6:	f00e fd94 	bl	259d2 <char2hex>
   16eaa:	2800      	cmp	r0, #0
   16eac:	db1e      	blt.n	16eec <bt_addr_from_str+0x6c>
			return -EINVAL;
		}

		addr->val[i] |= tmp;
   16eae:	5dbb      	ldrb	r3, [r7, r6]
   16eb0:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16eb4:	4313      	orrs	r3, r2
   16eb6:	55bb      	strb	r3, [r7, r6]
	for (i = 5, j = 1; *str != '\0'; str++, j++) {
   16eb8:	3501      	adds	r5, #1
   16eba:	3401      	adds	r4, #1
   16ebc:	782a      	ldrb	r2, [r5, #0]
   16ebe:	b17a      	cbz	r2, 16ee0 <bt_addr_from_str+0x60>
		if (!(j % 3) && (*str != ':')) {
   16ec0:	4b0c      	ldr	r3, [pc, #48]	; (16ef4 <bt_addr_from_str+0x74>)
   16ec2:	fb83 1304 	smull	r1, r3, r3, r4
   16ec6:	eba3 73e4 	sub.w	r3, r3, r4, asr #31
   16eca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   16ece:	429c      	cmp	r4, r3
   16ed0:	d1e1      	bne.n	16e96 <bt_addr_from_str+0x16>
   16ed2:	2a3a      	cmp	r2, #58	; 0x3a
   16ed4:	d0df      	beq.n	16e96 <bt_addr_from_str+0x16>
			return -EINVAL;
   16ed6:	f06f 0015 	mvn.w	r0, #21
   16eda:	e002      	b.n	16ee2 <bt_addr_from_str+0x62>
			i--;
   16edc:	3e01      	subs	r6, #1
			continue;
   16ede:	e7eb      	b.n	16eb8 <bt_addr_from_str+0x38>
	}

	return 0;
   16ee0:	2000      	movs	r0, #0
}
   16ee2:	b003      	add	sp, #12
   16ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   16ee6:	f06f 0015 	mvn.w	r0, #21
   16eea:	e7fa      	b.n	16ee2 <bt_addr_from_str+0x62>
			return -EINVAL;
   16eec:	f06f 0015 	mvn.w	r0, #21
   16ef0:	e7f7      	b.n	16ee2 <bt_addr_from_str+0x62>
   16ef2:	bf00      	nop
   16ef4:	55555556 	.word	0x55555556

00016ef8 <bt_addr_le_from_str>:

int bt_addr_le_from_str(const char *str, const char *type, bt_addr_le_t *addr)
{
   16ef8:	b538      	push	{r3, r4, r5, lr}
   16efa:	460d      	mov	r5, r1
   16efc:	4614      	mov	r4, r2
	int err;

	err = bt_addr_from_str(str, &addr->a);
   16efe:	1c51      	adds	r1, r2, #1
   16f00:	f7ff ffbe 	bl	16e80 <bt_addr_from_str>
	if (err < 0) {
   16f04:	2800      	cmp	r0, #0
   16f06:	db06      	blt.n	16f16 <bt_addr_le_from_str+0x1e>
		return err;
	}

	if (!strcmp(type, "public") || !strcmp(type, "(public)")) {
   16f08:	491e      	ldr	r1, [pc, #120]	; (16f84 <bt_addr_le_from_str+0x8c>)
   16f0a:	4628      	mov	r0, r5
   16f0c:	f010 fac1 	bl	27492 <strcmp>
   16f10:	b910      	cbnz	r0, 16f18 <bt_addr_le_from_str+0x20>
		addr->type = BT_ADDR_LE_PUBLIC;
   16f12:	2000      	movs	r0, #0
   16f14:	7020      	strb	r0, [r4, #0]
	} else {
		return -EINVAL;
	}

	return 0;
}
   16f16:	bd38      	pop	{r3, r4, r5, pc}
	if (!strcmp(type, "public") || !strcmp(type, "(public)")) {
   16f18:	491b      	ldr	r1, [pc, #108]	; (16f88 <bt_addr_le_from_str+0x90>)
   16f1a:	4628      	mov	r0, r5
   16f1c:	f010 fab9 	bl	27492 <strcmp>
   16f20:	2800      	cmp	r0, #0
   16f22:	d0f6      	beq.n	16f12 <bt_addr_le_from_str+0x1a>
	} else if (!strcmp(type, "random") || !strcmp(type, "(random)")) {
   16f24:	4919      	ldr	r1, [pc, #100]	; (16f8c <bt_addr_le_from_str+0x94>)
   16f26:	4628      	mov	r0, r5
   16f28:	f010 fab3 	bl	27492 <strcmp>
   16f2c:	b918      	cbnz	r0, 16f36 <bt_addr_le_from_str+0x3e>
		addr->type = BT_ADDR_LE_RANDOM;
   16f2e:	2301      	movs	r3, #1
   16f30:	7023      	strb	r3, [r4, #0]
	return 0;
   16f32:	2000      	movs	r0, #0
		addr->type = BT_ADDR_LE_RANDOM;
   16f34:	e7ef      	b.n	16f16 <bt_addr_le_from_str+0x1e>
	} else if (!strcmp(type, "random") || !strcmp(type, "(random)")) {
   16f36:	4916      	ldr	r1, [pc, #88]	; (16f90 <bt_addr_le_from_str+0x98>)
   16f38:	4628      	mov	r0, r5
   16f3a:	f010 faaa 	bl	27492 <strcmp>
   16f3e:	2800      	cmp	r0, #0
   16f40:	d0f5      	beq.n	16f2e <bt_addr_le_from_str+0x36>
	} else if (!strcmp(type, "public-id") || !strcmp(type, "(public-id)")) {
   16f42:	4914      	ldr	r1, [pc, #80]	; (16f94 <bt_addr_le_from_str+0x9c>)
   16f44:	4628      	mov	r0, r5
   16f46:	f010 faa4 	bl	27492 <strcmp>
   16f4a:	b918      	cbnz	r0, 16f54 <bt_addr_le_from_str+0x5c>
		addr->type = BT_ADDR_LE_PUBLIC_ID;
   16f4c:	2302      	movs	r3, #2
   16f4e:	7023      	strb	r3, [r4, #0]
	return 0;
   16f50:	2000      	movs	r0, #0
		addr->type = BT_ADDR_LE_PUBLIC_ID;
   16f52:	e7e0      	b.n	16f16 <bt_addr_le_from_str+0x1e>
	} else if (!strcmp(type, "public-id") || !strcmp(type, "(public-id)")) {
   16f54:	4910      	ldr	r1, [pc, #64]	; (16f98 <bt_addr_le_from_str+0xa0>)
   16f56:	4628      	mov	r0, r5
   16f58:	f010 fa9b 	bl	27492 <strcmp>
   16f5c:	2800      	cmp	r0, #0
   16f5e:	d0f5      	beq.n	16f4c <bt_addr_le_from_str+0x54>
	} else if (!strcmp(type, "random-id") || !strcmp(type, "(random-id)")) {
   16f60:	490e      	ldr	r1, [pc, #56]	; (16f9c <bt_addr_le_from_str+0xa4>)
   16f62:	4628      	mov	r0, r5
   16f64:	f010 fa95 	bl	27492 <strcmp>
   16f68:	b918      	cbnz	r0, 16f72 <bt_addr_le_from_str+0x7a>
		addr->type = BT_ADDR_LE_RANDOM_ID;
   16f6a:	2303      	movs	r3, #3
   16f6c:	7023      	strb	r3, [r4, #0]
	return 0;
   16f6e:	2000      	movs	r0, #0
		addr->type = BT_ADDR_LE_RANDOM_ID;
   16f70:	e7d1      	b.n	16f16 <bt_addr_le_from_str+0x1e>
	} else if (!strcmp(type, "random-id") || !strcmp(type, "(random-id)")) {
   16f72:	490b      	ldr	r1, [pc, #44]	; (16fa0 <bt_addr_le_from_str+0xa8>)
   16f74:	4628      	mov	r0, r5
   16f76:	f010 fa8c 	bl	27492 <strcmp>
   16f7a:	2800      	cmp	r0, #0
   16f7c:	d0f5      	beq.n	16f6a <bt_addr_le_from_str+0x72>
		return -EINVAL;
   16f7e:	f06f 0015 	mvn.w	r0, #21
   16f82:	e7c8      	b.n	16f16 <bt_addr_le_from_str+0x1e>
   16f84:	0002d318 	.word	0x0002d318
   16f88:	0002e23c 	.word	0x0002e23c
   16f8c:	0002d320 	.word	0x0002d320
   16f90:	0002e248 	.word	0x0002e248
   16f94:	0002d328 	.word	0x0002d328
   16f98:	0002e254 	.word	0x0002e254
   16f9c:	0002d334 	.word	0x0002d334
   16fa0:	0002e260 	.word	0x0002e260

00016fa4 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   16fa4:	b538      	push	{r3, r4, r5, lr}
   16fa6:	4604      	mov	r4, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   16fa8:	4805      	ldr	r0, [pc, #20]	; (16fc0 <bt_buf_get_rx+0x1c>)
   16faa:	f012 ff08 	bl	29dbe <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   16fae:	4605      	mov	r5, r0
   16fb0:	b120      	cbz	r0, 16fbc <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   16fb2:	2100      	movs	r1, #0
   16fb4:	300c      	adds	r0, #12
   16fb6:	f012 ff13 	bl	29de0 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   16fba:	762c      	strb	r4, [r5, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   16fbc:	4628      	mov	r0, r5
   16fbe:	bd38      	pop	{r3, r4, r5, pc}
   16fc0:	20000bd4 	.word	0x20000bd4

00016fc4 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   16fc4:	b510      	push	{r4, lr}
   16fc6:	4602      	mov	r2, r0
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   16fc8:	4b0a      	ldr	r3, [pc, #40]	; (16ff4 <bt_buf_get_cmd_complete+0x30>)
   16fca:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   16fce:	b158      	cbz	r0, 16fe8 <bt_buf_get_cmd_complete+0x24>
		buf = net_buf_ref(bt_dev.sent_cmd);
   16fd0:	f012 ff5f 	bl	29e92 <net_buf_ref>
   16fd4:	4604      	mov	r4, r0
   16fd6:	2301      	movs	r3, #1
   16fd8:	7603      	strb	r3, [r0, #24]

		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0U;
   16fda:	2100      	movs	r1, #0
   16fdc:	8201      	strh	r1, [r0, #16]
   16fde:	300c      	adds	r0, #12
   16fe0:	f012 fefe 	bl	29de0 <net_buf_simple_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   16fe4:	4620      	mov	r0, r4
   16fe6:	bd10      	pop	{r4, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   16fe8:	460b      	mov	r3, r1
   16fea:	2001      	movs	r0, #1
   16fec:	f7ff ffda 	bl	16fa4 <bt_buf_get_rx>
   16ff0:	4604      	mov	r4, r0
   16ff2:	e7f7      	b.n	16fe4 <bt_buf_get_cmd_complete+0x20>
   16ff4:	20000370 	.word	0x20000370

00016ff8 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   16ff8:	b510      	push	{r4, lr}
	switch (evt) {
   16ffa:	280f      	cmp	r0, #15
   16ffc:	d90d      	bls.n	1701a <bt_buf_get_evt+0x22>
   16ffe:	2813      	cmp	r0, #19
   17000:	d10d      	bne.n	1701e <bt_buf_get_evt+0x26>
	return net_buf_alloc_fixed(pool, timeout);
   17002:	4814      	ldr	r0, [pc, #80]	; (17054 <bt_buf_get_evt+0x5c>)
   17004:	f012 fedb 	bl	29dbe <net_buf_alloc_fixed>
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		{
			struct net_buf *buf;

			buf = net_buf_alloc(&num_complete_pool, timeout);
			if (buf) {
   17008:	4604      	mov	r4, r0
   1700a:	b198      	cbz	r0, 17034 <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   1700c:	2100      	movs	r1, #0
   1700e:	300c      	adds	r0, #12
   17010:	f012 fee6 	bl	29de0 <net_buf_simple_reserve>
   17014:	2301      	movs	r3, #1
   17016:	7623      	strb	r3, [r4, #24]
}
   17018:	e00c      	b.n	17034 <bt_buf_get_evt+0x3c>
	switch (evt) {
   1701a:	280e      	cmp	r0, #14
   1701c:	d205      	bcs.n	1702a <bt_buf_get_evt+0x32>
#endif /* CONFIG_BT_CONN || CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
		if (discardable) {
   1701e:	b959      	cbnz	r1, 17038 <bt_buf_get_evt+0x40>
			}

			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   17020:	2001      	movs	r0, #1
   17022:	f7ff ffbf 	bl	16fa4 <bt_buf_get_rx>
   17026:	4604      	mov	r4, r0
   17028:	e004      	b.n	17034 <bt_buf_get_evt+0x3c>
		return bt_buf_get_cmd_complete(timeout);
   1702a:	4610      	mov	r0, r2
   1702c:	4619      	mov	r1, r3
   1702e:	f7ff ffc9 	bl	16fc4 <bt_buf_get_cmd_complete>
   17032:	4604      	mov	r4, r0
	}
}
   17034:	4620      	mov	r0, r4
   17036:	bd10      	pop	{r4, pc}
	return net_buf_alloc_fixed(pool, timeout);
   17038:	4807      	ldr	r0, [pc, #28]	; (17058 <bt_buf_get_evt+0x60>)
   1703a:	f012 fec0 	bl	29dbe <net_buf_alloc_fixed>
			if (buf) {
   1703e:	4604      	mov	r4, r0
   17040:	2800      	cmp	r0, #0
   17042:	d0f7      	beq.n	17034 <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   17044:	2100      	movs	r1, #0
   17046:	300c      	adds	r0, #12
   17048:	f012 feca 	bl	29de0 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1704c:	2301      	movs	r3, #1
   1704e:	7623      	strb	r3, [r4, #24]
			return buf;
   17050:	e7f0      	b.n	17034 <bt_buf_get_evt+0x3c>
   17052:	bf00      	nop
   17054:	20000c00 	.word	0x20000c00
   17058:	20000b50 	.word	0x20000b50

0001705c <conn_handle_disconnected>:
	(void)memset(disconnected_handles, 0, sizeof(disconnected_handles));
}

static void conn_handle_disconnected(uint16_t handle)
{
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   1705c:	2300      	movs	r3, #0
   1705e:	e000      	b.n	17062 <conn_handle_disconnected+0x6>
   17060:	3301      	adds	r3, #1
   17062:	2b07      	cmp	r3, #7
   17064:	d80a      	bhi.n	1707c <conn_handle_disconnected+0x20>
		if (!disconnected_handles[i]) {
   17066:	4a06      	ldr	r2, [pc, #24]	; (17080 <conn_handle_disconnected+0x24>)
   17068:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   1706c:	2a00      	cmp	r2, #0
   1706e:	d1f7      	bne.n	17060 <conn_handle_disconnected+0x4>
			/* Use invalid connection handle bits so that connection
			 * handle 0 can be used as a valid non-zero handle.
			 */
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   17070:	f440 4270 	orr.w	r2, r0, #61440	; 0xf000
   17074:	4902      	ldr	r1, [pc, #8]	; (17080 <conn_handle_disconnected+0x24>)
   17076:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
   1707a:	e7f1      	b.n	17060 <conn_handle_disconnected+0x4>
		}
	}
}
   1707c:	4770      	bx	lr
   1707e:	bf00      	nop
   17080:	20007b30 	.word	0x20007b30

00017084 <conn_handle_is_disconnected>:

static bool conn_handle_is_disconnected(uint16_t handle)
{
	handle |= ~BT_ACL_HANDLE_MASK;
   17084:	f440 4070 	orr.w	r0, r0, #61440	; 0xf000

	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   17088:	2300      	movs	r3, #0
   1708a:	2b07      	cmp	r3, #7
   1708c:	d80c      	bhi.n	170a8 <conn_handle_is_disconnected+0x24>
		if (disconnected_handles[i] == handle) {
   1708e:	4a07      	ldr	r2, [pc, #28]	; (170ac <conn_handle_is_disconnected+0x28>)
   17090:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   17094:	4282      	cmp	r2, r0
   17096:	d001      	beq.n	1709c <conn_handle_is_disconnected+0x18>
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   17098:	3301      	adds	r3, #1
   1709a:	e7f6      	b.n	1708a <conn_handle_is_disconnected+0x6>
			disconnected_handles[i] = 0;
   1709c:	4a03      	ldr	r2, [pc, #12]	; (170ac <conn_handle_is_disconnected+0x28>)
   1709e:	2100      	movs	r1, #0
   170a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			return true;
   170a4:	2001      	movs	r0, #1
   170a6:	4770      	bx	lr
		}
	}

	return false;
   170a8:	2000      	movs	r0, #0
}
   170aa:	4770      	bx	lr
   170ac:	20007b30 	.word	0x20007b30

000170b0 <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   170b0:	68c2      	ldr	r2, [r0, #12]

	LOG_DBG("status 0x%02x", rp->status);

	bt_dev.hci_version = rp->hci_version;
   170b2:	7851      	ldrb	r1, [r2, #1]
   170b4:	4b08      	ldr	r3, [pc, #32]	; (170d8 <read_local_ver_complete+0x28>)
   170b6:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   170ba:	8851      	ldrh	r1, [r2, #2]
   170bc:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   170c0:	7911      	ldrb	r1, [r2, #4]
   170c2:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   170c6:	f8b2 1007 	ldrh.w	r1, [r2, #7]
   170ca:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   170ce:	f8b2 2005 	ldrh.w	r2, [r2, #5]
   170d2:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
}
   170d6:	4770      	bx	lr
   170d8:	20000370 	.word	0x20000370

000170dc <le_read_supp_states_complete>:

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
   170dc:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
   170de:	68c0      	ldr	r0, [r0, #12]

	LOG_DBG("status 0x%02x", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
   170e0:	3001      	adds	r0, #1
   170e2:	f010 fadb 	bl	2769c <sys_get_le64>
   170e6:	4b02      	ldr	r3, [pc, #8]	; (170f0 <le_read_supp_states_complete+0x14>)
   170e8:	e9c3 0136 	strd	r0, r1, [r3, #216]	; 0xd8
}
   170ec:	bd08      	pop	{r3, pc}
   170ee:	bf00      	nop
   170f0:	20000370 	.word	0x20000370

000170f4 <hci_reset_complete>:
{
   170f4:	b508      	push	{r3, lr}
	uint8_t status = buf->data[0];
   170f6:	68c3      	ldr	r3, [r0, #12]
   170f8:	781b      	ldrb	r3, [r3, #0]
	if (status) {
   170fa:	b99b      	cbnz	r3, 17124 <hci_reset_complete+0x30>
		bt_scan_reset();
   170fc:	f002 ff90 	bl	1a020 <bt_scan_reset>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17100:	4b09      	ldr	r3, [pc, #36]	; (17128 <hci_reset_complete+0x34>)
   17102:	f3bf 8f5b 	dmb	ish
   17106:	681a      	ldr	r2, [r3, #0]
   17108:	f3bf 8f5b 	dmb	ish
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1710c:	f002 0209 	and.w	r2, r2, #9
   17110:	f3bf 8f5b 	dmb	ish
   17114:	e853 1f00 	ldrex	r1, [r3]
   17118:	e843 2000 	strex	r0, r2, [r3]
   1711c:	2800      	cmp	r0, #0
   1711e:	d1f9      	bne.n	17114 <hci_reset_complete+0x20>
   17120:	f3bf 8f5b 	dmb	ish
}
   17124:	bd08      	pop	{r3, pc}
   17126:	bf00      	nop
   17128:	2000043c 	.word	0x2000043c

0001712c <read_local_features_complete>:
{
   1712c:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   1712e:	68c1      	ldr	r1, [r0, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   17130:	2208      	movs	r2, #8
   17132:	3101      	adds	r1, #1
   17134:	4801      	ldr	r0, [pc, #4]	; (1713c <read_local_features_complete+0x10>)
   17136:	f010 f9c9 	bl	274cc <memcpy>
}
   1713a:	bd08      	pop	{r3, pc}
   1713c:	200003e0 	.word	0x200003e0

00017140 <read_supported_commands_complete>:
{
   17140:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   17142:	68c1      	ldr	r1, [r0, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
   17144:	2240      	movs	r2, #64	; 0x40
   17146:	3101      	adds	r1, #1
   17148:	4801      	ldr	r0, [pc, #4]	; (17150 <read_supported_commands_complete+0x10>)
   1714a:	f010 f9bf 	bl	274cc <memcpy>
}
   1714e:	bd08      	pop	{r3, pc}
   17150:	200003e8 	.word	0x200003e8

00017154 <read_le_features_complete>:
{
   17154:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   17156:	68c1      	ldr	r1, [r0, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   17158:	2208      	movs	r2, #8
   1715a:	3101      	adds	r1, #1
   1715c:	4801      	ldr	r0, [pc, #4]	; (17164 <read_le_features_complete+0x10>)
   1715e:	f010 f9b5 	bl	274cc <memcpy>
}
   17162:	bd08      	pop	{r3, pc}
   17164:	20000440 	.word	0x20000440

00017168 <le_read_buffer_size_complete>:
{
   17168:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   1716a:	68c2      	ldr	r2, [r0, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   1716c:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   17170:	b299      	uxth	r1, r3
   17172:	4806      	ldr	r0, [pc, #24]	; (1718c <le_read_buffer_size_complete+0x24>)
   17174:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
   17178:	b901      	cbnz	r1, 1717c <le_read_buffer_size_complete+0x14>
}
   1717a:	bd08      	pop	{r3, pc}
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   1717c:	78d1      	ldrb	r1, [r2, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1717e:	460a      	mov	r2, r1
   17180:	f500 7080 	add.w	r0, r0, #256	; 0x100
   17184:	f014 ffc7 	bl	2c116 <z_impl_k_sem_init>
   17188:	e7f7      	b.n	1717a <le_read_buffer_size_complete+0x12>
   1718a:	bf00      	nop
   1718c:	20000370 	.word	0x20000370

00017190 <read_buffer_size_complete>:
{
   17190:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   17192:	68c2      	ldr	r2, [r0, #12]
	if (bt_dev.le.acl_mtu) {
   17194:	4b08      	ldr	r3, [pc, #32]	; (171b8 <read_buffer_size_complete+0x28>)
   17196:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   1719a:	b103      	cbz	r3, 1719e <read_buffer_size_complete+0xe>
}
   1719c:	bd08      	pop	{r3, pc}
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   1719e:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   171a2:	4805      	ldr	r0, [pc, #20]	; (171b8 <read_buffer_size_complete+0x28>)
   171a4:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	pkts = sys_le16_to_cpu(rp->acl_max_num);
   171a8:	8891      	ldrh	r1, [r2, #4]
   171aa:	460a      	mov	r2, r1
   171ac:	f500 7080 	add.w	r0, r0, #256	; 0x100
   171b0:	f014 ffb1 	bl	2c116 <z_impl_k_sem_init>
   171b4:	e7f2      	b.n	1719c <read_buffer_size_complete+0xc>
   171b6:	bf00      	nop
   171b8:	20000370 	.word	0x20000370

000171bc <hci_data_buf_overflow>:
{
   171bc:	b5b0      	push	{r4, r5, r7, lr}
   171be:	b082      	sub	sp, #8
   171c0:	af00      	add	r7, sp, #0
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   171c2:	68c3      	ldr	r3, [r0, #12]
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   171c4:	781c      	ldrb	r4, [r3, #0]
   171c6:	b088      	sub	sp, #32
   171c8:	466b      	mov	r3, sp
   171ca:	f113 0210 	adds.w	r2, r3, #16
   171ce:	d031      	beq.n	17234 <hci_data_buf_overflow+0x78>
   171d0:	210c      	movs	r1, #12
   171d2:	b13a      	cbz	r2, 171e4 <hci_data_buf_overflow+0x28>
   171d4:	4608      	mov	r0, r1
   171d6:	2904      	cmp	r1, #4
   171d8:	dd01      	ble.n	171de <hci_data_buf_overflow+0x22>
   171da:	4d19      	ldr	r5, [pc, #100]	; (17240 <hci_data_buf_overflow+0x84>)
   171dc:	615d      	str	r5, [r3, #20]
   171de:	2808      	cmp	r0, #8
   171e0:	dd00      	ble.n	171e4 <hci_data_buf_overflow+0x28>
   171e2:	619c      	str	r4, [r3, #24]
   171e4:	290b      	cmp	r1, #11
   171e6:	dd28      	ble.n	1723a <hci_data_buf_overflow+0x7e>
   171e8:	f04f 0c0c 	mov.w	ip, #12
   171ec:	b13a      	cbz	r2, 171fe <hci_data_buf_overflow+0x42>
   171ee:	2103      	movs	r1, #3
   171f0:	7139      	strb	r1, [r7, #4]
   171f2:	2100      	movs	r1, #0
   171f4:	7179      	strb	r1, [r7, #5]
   171f6:	71b9      	strb	r1, [r7, #6]
   171f8:	71f9      	strb	r1, [r7, #7]
   171fa:	6878      	ldr	r0, [r7, #4]
   171fc:	6118      	str	r0, [r3, #16]
   171fe:	2100      	movs	r1, #0
   17200:	f36f 0100 	bfc	r1, #0, #1
   17204:	f36f 0141 	bfc	r1, #1, #1
   17208:	f36f 0182 	bfc	r1, #2, #1
   1720c:	f36f 01c5 	bfc	r1, #3, #3
   17210:	2302      	movs	r3, #2
   17212:	f363 1188 	bfi	r1, r3, #6, #3
   17216:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   1721a:	f36c 2152 	bfi	r1, ip, #9, #10
   1721e:	f36f 41de 	bfc	r1, #19, #12
   17222:	f36f 71df 	bfc	r1, #31, #1
   17226:	2300      	movs	r3, #0
   17228:	4806      	ldr	r0, [pc, #24]	; (17244 <hci_data_buf_overflow+0x88>)
   1722a:	f00f fd14 	bl	26c56 <z_impl_z_log_msg_static_create>
}
   1722e:	3708      	adds	r7, #8
   17230:	46bd      	mov	sp, r7
   17232:	bdb0      	pop	{r4, r5, r7, pc}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   17234:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17238:	e7cb      	b.n	171d2 <hci_data_buf_overflow+0x16>
   1723a:	f06f 0c1b 	mvn.w	ip, #27
   1723e:	e7d5      	b.n	171ec <hci_data_buf_overflow+0x30>
   17240:	0002e29c 	.word	0x0002e29c
   17244:	0002d0bc 	.word	0x0002d0bc

00017248 <handle_event_common>:
{
   17248:	b5f0      	push	{r4, r5, r6, r7, lr}
   1724a:	b083      	sub	sp, #12
   1724c:	af00      	add	r7, sp, #0
   1724e:	4604      	mov	r4, r0
   17250:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   17252:	f04f 0c00 	mov.w	ip, #0
   17256:	4563      	cmp	r3, ip
   17258:	d955      	bls.n	17306 <handle_event_common+0xbe>
		const struct event_handler *handler = &handlers[i];
   1725a:	eb02 01cc 	add.w	r1, r2, ip, lsl #3
		if (handler->event != event) {
   1725e:	f812 e03c 	ldrb.w	lr, [r2, ip, lsl #3]
   17262:	45a6      	cmp	lr, r4
   17264:	d109      	bne.n	1727a <handle_event_common+0x32>
		if (buf->len < handler->min_len) {
   17266:	8a03      	ldrh	r3, [r0, #16]
   17268:	784a      	ldrb	r2, [r1, #1]
   1726a:	4293      	cmp	r3, r2
   1726c:	d308      	bcc.n	17280 <handle_event_common+0x38>
		handler->handler(buf);
   1726e:	684b      	ldr	r3, [r1, #4]
   17270:	4798      	blx	r3
		return 0;
   17272:	2000      	movs	r0, #0
}
   17274:	370c      	adds	r7, #12
   17276:	46bd      	mov	sp, r7
   17278:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < num_handlers; i++) {
   1727a:	f10c 0c01 	add.w	ip, ip, #1
   1727e:	e7ea      	b.n	17256 <handle_event_common+0xe>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   17280:	466d      	mov	r5, sp
   17282:	b088      	sub	sp, #32
   17284:	4669      	mov	r1, sp
   17286:	f111 0210 	adds.w	r2, r1, #16
   1728a:	d036      	beq.n	172fa <handle_event_common+0xb2>
   1728c:	2010      	movs	r0, #16
   1728e:	b162      	cbz	r2, 172aa <handle_event_common+0x62>
   17290:	4684      	mov	ip, r0
   17292:	2804      	cmp	r0, #4
   17294:	dd01      	ble.n	1729a <handle_event_common+0x52>
   17296:	4e1d      	ldr	r6, [pc, #116]	; (1730c <handle_event_common+0xc4>)
   17298:	614e      	str	r6, [r1, #20]
   1729a:	f1bc 0f08 	cmp.w	ip, #8
   1729e:	dd00      	ble.n	172a2 <handle_event_common+0x5a>
   172a0:	618b      	str	r3, [r1, #24]
   172a2:	f1bc 0f0c 	cmp.w	ip, #12
   172a6:	dd00      	ble.n	172aa <handle_event_common+0x62>
   172a8:	61cc      	str	r4, [r1, #28]
   172aa:	280f      	cmp	r0, #15
   172ac:	dd28      	ble.n	17300 <handle_event_common+0xb8>
   172ae:	2310      	movs	r3, #16
   172b0:	b13a      	cbz	r2, 172c2 <handle_event_common+0x7a>
   172b2:	2004      	movs	r0, #4
   172b4:	7138      	strb	r0, [r7, #4]
   172b6:	2000      	movs	r0, #0
   172b8:	7178      	strb	r0, [r7, #5]
   172ba:	71b8      	strb	r0, [r7, #6]
   172bc:	71f8      	strb	r0, [r7, #7]
   172be:	6878      	ldr	r0, [r7, #4]
   172c0:	6108      	str	r0, [r1, #16]
   172c2:	2100      	movs	r1, #0
   172c4:	f36f 0100 	bfc	r1, #0, #1
   172c8:	f36f 0141 	bfc	r1, #1, #1
   172cc:	f36f 0182 	bfc	r1, #2, #1
   172d0:	f36f 01c5 	bfc	r1, #3, #3
   172d4:	2001      	movs	r0, #1
   172d6:	f360 1188 	bfi	r1, r0, #6, #3
   172da:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
   172de:	f363 2152 	bfi	r1, r3, #9, #10
   172e2:	f36f 41de 	bfc	r1, #19, #12
   172e6:	f36f 71df 	bfc	r1, #31, #1
   172ea:	2300      	movs	r3, #0
   172ec:	4808      	ldr	r0, [pc, #32]	; (17310 <handle_event_common+0xc8>)
   172ee:	f00f fcb2 	bl	26c56 <z_impl_z_log_msg_static_create>
   172f2:	46ad      	mov	sp, r5
			return -EINVAL;
   172f4:	f06f 0015 	mvn.w	r0, #21
   172f8:	e7bc      	b.n	17274 <handle_event_common+0x2c>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   172fa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   172fe:	e7c6      	b.n	1728e <handle_event_common+0x46>
   17300:	f06f 031b 	mvn.w	r3, #27
   17304:	e7d4      	b.n	172b0 <handle_event_common+0x68>
	return -EOPNOTSUPP;
   17306:	f06f 005e 	mvn.w	r0, #94	; 0x5e
   1730a:	e7b3      	b.n	17274 <handle_event_common+0x2c>
   1730c:	0002e2c4 	.word	0x0002e2c4
   17310:	0002d0bc 	.word	0x0002d0bc

00017314 <find_pending_connect>:
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
   17314:	b108      	cbz	r0, 1731a <find_pending_connect+0x6>
	return NULL;
   17316:	2000      	movs	r0, #0
}
   17318:	4770      	bx	lr
{
   1731a:	b508      	push	{r3, lr}
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   1731c:	2206      	movs	r2, #6
   1731e:	f003 fef1 	bl	1b104 <bt_conn_lookup_state_le>
		if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) && !conn) {
   17322:	b100      	cbz	r0, 17326 <find_pending_connect+0x12>
}
   17324:	bd08      	pop	{r3, pc}
			conn = bt_conn_lookup_state_le(BT_ID_DEFAULT,
   17326:	2203      	movs	r2, #3
   17328:	4902      	ldr	r1, [pc, #8]	; (17334 <find_pending_connect+0x20>)
   1732a:	2000      	movs	r0, #0
   1732c:	f003 feea 	bl	1b104 <bt_conn_lookup_state_le>
		return conn;
   17330:	e7f8      	b.n	17324 <find_pending_connect+0x10>
   17332:	bf00      	nop
   17334:	0002e1e8 	.word	0x0002e1e8

00017338 <hci_disconn_complete>:
{
   17338:	b5f0      	push	{r4, r5, r6, r7, lr}
   1733a:	b083      	sub	sp, #12
   1733c:	af00      	add	r7, sp, #0
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1733e:	68c4      	ldr	r4, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17340:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
   17344:	7823      	ldrb	r3, [r4, #0]
   17346:	b113      	cbz	r3, 1734e <hci_disconn_complete+0x16>
}
   17348:	370c      	adds	r7, #12
   1734a:	46bd      	mov	sp, r7
   1734c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_handle(handle);
   1734e:	4630      	mov	r0, r6
   17350:	f003 fc2c 	bl	1abac <bt_conn_lookup_handle>
	if (!conn) {
   17354:	4605      	mov	r5, r0
   17356:	b158      	cbz	r0, 17370 <hci_disconn_complete+0x38>
	conn->err = evt->reason;
   17358:	78e3      	ldrb	r3, [r4, #3]
   1735a:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1735c:	2100      	movs	r1, #0
   1735e:	f003 fc2f 	bl	1abc0 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   17362:	78ab      	ldrb	r3, [r5, #2]
   17364:	2b01      	cmp	r3, #1
   17366:	d03f      	beq.n	173e8 <hci_disconn_complete+0xb0>
		bt_conn_unref(conn);
   17368:	4628      	mov	r0, r5
   1736a:	f010 fcf1 	bl	27d50 <bt_conn_unref>
		return;
   1736e:	e7eb      	b.n	17348 <hci_disconn_complete+0x10>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   17370:	466d      	mov	r5, sp
   17372:	b088      	sub	sp, #32
   17374:	466b      	mov	r3, sp
   17376:	f113 0210 	adds.w	r2, r3, #16
   1737a:	d02f      	beq.n	173dc <hci_disconn_complete+0xa4>
   1737c:	210c      	movs	r1, #12
   1737e:	b13a      	cbz	r2, 17390 <hci_disconn_complete+0x58>
   17380:	4608      	mov	r0, r1
   17382:	2904      	cmp	r1, #4
   17384:	dd01      	ble.n	1738a <hci_disconn_complete+0x52>
   17386:	4c1a      	ldr	r4, [pc, #104]	; (173f0 <hci_disconn_complete+0xb8>)
   17388:	615c      	str	r4, [r3, #20]
   1738a:	2808      	cmp	r0, #8
   1738c:	dd00      	ble.n	17390 <hci_disconn_complete+0x58>
   1738e:	619e      	str	r6, [r3, #24]
   17390:	290b      	cmp	r1, #11
   17392:	dd26      	ble.n	173e2 <hci_disconn_complete+0xaa>
   17394:	240c      	movs	r4, #12
   17396:	b13a      	cbz	r2, 173a8 <hci_disconn_complete+0x70>
   17398:	2103      	movs	r1, #3
   1739a:	7139      	strb	r1, [r7, #4]
   1739c:	2100      	movs	r1, #0
   1739e:	7179      	strb	r1, [r7, #5]
   173a0:	71b9      	strb	r1, [r7, #6]
   173a2:	71f9      	strb	r1, [r7, #7]
   173a4:	6878      	ldr	r0, [r7, #4]
   173a6:	6118      	str	r0, [r3, #16]
   173a8:	2100      	movs	r1, #0
   173aa:	f36f 0100 	bfc	r1, #0, #1
   173ae:	f36f 0141 	bfc	r1, #1, #1
   173b2:	f36f 0182 	bfc	r1, #2, #1
   173b6:	f36f 01c5 	bfc	r1, #3, #3
   173ba:	2301      	movs	r3, #1
   173bc:	f363 1188 	bfi	r1, r3, #6, #3
   173c0:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   173c4:	f363 2152 	bfi	r1, r3, #9, #10
   173c8:	f36f 41de 	bfc	r1, #19, #12
   173cc:	f36f 71df 	bfc	r1, #31, #1
   173d0:	2300      	movs	r3, #0
   173d2:	4808      	ldr	r0, [pc, #32]	; (173f4 <hci_disconn_complete+0xbc>)
   173d4:	f00f fc3f 	bl	26c56 <z_impl_z_log_msg_static_create>
   173d8:	46ad      	mov	sp, r5
		return;
   173da:	e7b5      	b.n	17348 <hci_disconn_complete+0x10>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   173dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   173e0:	e7cd      	b.n	1737e <hci_disconn_complete+0x46>
   173e2:	f06f 041b 	mvn.w	r4, #27
   173e6:	e7d6      	b.n	17396 <hci_disconn_complete+0x5e>
	bt_conn_unref(conn);
   173e8:	4628      	mov	r0, r5
   173ea:	f010 fcb1 	bl	27d50 <bt_conn_unref>
   173ee:	e7ab      	b.n	17348 <hci_disconn_complete+0x10>
   173f0:	0002e2e8 	.word	0x0002e2e8
   173f4:	0002d0bc 	.word	0x0002d0bc

000173f8 <le_phy_update_complete>:
{
   173f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   173fa:	b083      	sub	sp, #12
   173fc:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
   173fe:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17400:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   17404:	4620      	mov	r0, r4
   17406:	f003 fbd1 	bl	1abac <bt_conn_lookup_handle>
	if (!conn) {
   1740a:	b120      	cbz	r0, 17416 <le_phy_update_complete+0x1e>
	bt_conn_unref(conn);
   1740c:	f010 fca0 	bl	27d50 <bt_conn_unref>
}
   17410:	370c      	adds	r7, #12
   17412:	46bd      	mov	sp, r7
   17414:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   17416:	466d      	mov	r5, sp
   17418:	b088      	sub	sp, #32
   1741a:	466b      	mov	r3, sp
   1741c:	f113 0210 	adds.w	r2, r3, #16
   17420:	d02f      	beq.n	17482 <le_phy_update_complete+0x8a>
   17422:	210c      	movs	r1, #12
   17424:	b13a      	cbz	r2, 17436 <le_phy_update_complete+0x3e>
   17426:	4608      	mov	r0, r1
   17428:	2904      	cmp	r1, #4
   1742a:	dd01      	ble.n	17430 <le_phy_update_complete+0x38>
   1742c:	4e18      	ldr	r6, [pc, #96]	; (17490 <le_phy_update_complete+0x98>)
   1742e:	615e      	str	r6, [r3, #20]
   17430:	2808      	cmp	r0, #8
   17432:	dd00      	ble.n	17436 <le_phy_update_complete+0x3e>
   17434:	619c      	str	r4, [r3, #24]
   17436:	290b      	cmp	r1, #11
   17438:	dd26      	ble.n	17488 <le_phy_update_complete+0x90>
   1743a:	240c      	movs	r4, #12
   1743c:	b13a      	cbz	r2, 1744e <le_phy_update_complete+0x56>
   1743e:	2103      	movs	r1, #3
   17440:	7139      	strb	r1, [r7, #4]
   17442:	2100      	movs	r1, #0
   17444:	7179      	strb	r1, [r7, #5]
   17446:	71b9      	strb	r1, [r7, #6]
   17448:	71f9      	strb	r1, [r7, #7]
   1744a:	6878      	ldr	r0, [r7, #4]
   1744c:	6118      	str	r0, [r3, #16]
   1744e:	2100      	movs	r1, #0
   17450:	f36f 0100 	bfc	r1, #0, #1
   17454:	f36f 0141 	bfc	r1, #1, #1
   17458:	f36f 0182 	bfc	r1, #2, #1
   1745c:	f36f 01c5 	bfc	r1, #3, #3
   17460:	2301      	movs	r3, #1
   17462:	f363 1188 	bfi	r1, r3, #6, #3
   17466:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1746a:	f363 2152 	bfi	r1, r3, #9, #10
   1746e:	f36f 41de 	bfc	r1, #19, #12
   17472:	f36f 71df 	bfc	r1, #31, #1
   17476:	2300      	movs	r3, #0
   17478:	4806      	ldr	r0, [pc, #24]	; (17494 <le_phy_update_complete+0x9c>)
   1747a:	f00f fbec 	bl	26c56 <z_impl_z_log_msg_static_create>
   1747e:	46ad      	mov	sp, r5
		return;
   17480:	e7c6      	b.n	17410 <le_phy_update_complete+0x18>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   17482:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17486:	e7cd      	b.n	17424 <le_phy_update_complete+0x2c>
   17488:	f06f 041b 	mvn.w	r4, #27
   1748c:	e7d6      	b.n	1743c <le_phy_update_complete+0x44>
   1748e:	bf00      	nop
   17490:	0002e310 	.word	0x0002e310
   17494:	0002d0bc 	.word	0x0002d0bc

00017498 <le_data_len_change>:
{
   17498:	b5f0      	push	{r4, r5, r6, r7, lr}
   1749a:	b083      	sub	sp, #12
   1749c:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
   1749e:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   174a0:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   174a2:	4620      	mov	r0, r4
   174a4:	f003 fb82 	bl	1abac <bt_conn_lookup_handle>
	if (!conn) {
   174a8:	b120      	cbz	r0, 174b4 <le_data_len_change+0x1c>
	bt_conn_unref(conn);
   174aa:	f010 fc51 	bl	27d50 <bt_conn_unref>
}
   174ae:	370c      	adds	r7, #12
   174b0:	46bd      	mov	sp, r7
   174b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   174b4:	466d      	mov	r5, sp
   174b6:	b088      	sub	sp, #32
   174b8:	466b      	mov	r3, sp
   174ba:	f113 0210 	adds.w	r2, r3, #16
   174be:	d02f      	beq.n	17520 <le_data_len_change+0x88>
   174c0:	210c      	movs	r1, #12
   174c2:	b13a      	cbz	r2, 174d4 <le_data_len_change+0x3c>
   174c4:	4608      	mov	r0, r1
   174c6:	2904      	cmp	r1, #4
   174c8:	dd01      	ble.n	174ce <le_data_len_change+0x36>
   174ca:	4e18      	ldr	r6, [pc, #96]	; (1752c <le_data_len_change+0x94>)
   174cc:	615e      	str	r6, [r3, #20]
   174ce:	2808      	cmp	r0, #8
   174d0:	dd00      	ble.n	174d4 <le_data_len_change+0x3c>
   174d2:	619c      	str	r4, [r3, #24]
   174d4:	290b      	cmp	r1, #11
   174d6:	dd26      	ble.n	17526 <le_data_len_change+0x8e>
   174d8:	240c      	movs	r4, #12
   174da:	b13a      	cbz	r2, 174ec <le_data_len_change+0x54>
   174dc:	2103      	movs	r1, #3
   174de:	7139      	strb	r1, [r7, #4]
   174e0:	2100      	movs	r1, #0
   174e2:	7179      	strb	r1, [r7, #5]
   174e4:	71b9      	strb	r1, [r7, #6]
   174e6:	71f9      	strb	r1, [r7, #7]
   174e8:	6878      	ldr	r0, [r7, #4]
   174ea:	6118      	str	r0, [r3, #16]
   174ec:	2100      	movs	r1, #0
   174ee:	f36f 0100 	bfc	r1, #0, #1
   174f2:	f36f 0141 	bfc	r1, #1, #1
   174f6:	f36f 0182 	bfc	r1, #2, #1
   174fa:	f36f 01c5 	bfc	r1, #3, #3
   174fe:	2301      	movs	r3, #1
   17500:	f363 1188 	bfi	r1, r3, #6, #3
   17504:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   17508:	f363 2152 	bfi	r1, r3, #9, #10
   1750c:	f36f 41de 	bfc	r1, #19, #12
   17510:	f36f 71df 	bfc	r1, #31, #1
   17514:	2300      	movs	r3, #0
   17516:	4806      	ldr	r0, [pc, #24]	; (17530 <le_data_len_change+0x98>)
   17518:	f00f fb9d 	bl	26c56 <z_impl_z_log_msg_static_create>
   1751c:	46ad      	mov	sp, r5
		return;
   1751e:	e7c6      	b.n	174ae <le_data_len_change+0x16>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   17520:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17524:	e7cd      	b.n	174c2 <le_data_len_change+0x2a>
   17526:	f06f 041b 	mvn.w	r4, #27
   1752a:	e7d6      	b.n	174da <le_data_len_change+0x42>
   1752c:	0002e310 	.word	0x0002e310
   17530:	0002d0bc 	.word	0x0002d0bc

00017534 <hci_num_completed_packets>:
{
   17534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17538:	b089      	sub	sp, #36	; 0x24
   1753a:	af00      	add	r7, sp, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   1753c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	for (i = 0; i < evt->num_handles; i++) {
   17540:	2600      	movs	r6, #0
   17542:	e09e      	b.n	17682 <hci_num_completed_packets+0x14e>
			LOG_ERR("No connection for handle %u", handle);
   17544:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17548:	e0b3      	b.n	176b2 <hci_num_completed_packets+0x17e>
   1754a:	f06f 011b 	mvn.w	r1, #27
   1754e:	b13a      	cbz	r2, 17560 <hci_num_completed_packets+0x2c>
   17550:	2003      	movs	r0, #3
   17552:	7138      	strb	r0, [r7, #4]
   17554:	2000      	movs	r0, #0
   17556:	7178      	strb	r0, [r7, #5]
   17558:	71b8      	strb	r0, [r7, #6]
   1755a:	71f8      	strb	r0, [r7, #7]
   1755c:	6878      	ldr	r0, [r7, #4]
   1755e:	6118      	str	r0, [r3, #16]
   17560:	f36f 0800 	bfc	r8, #0, #1
   17564:	f36f 0841 	bfc	r8, #1, #1
   17568:	f36f 0882 	bfc	r8, #2, #1
   1756c:	f36f 08c5 	bfc	r8, #3, #3
   17570:	2301      	movs	r3, #1
   17572:	f363 1888 	bfi	r8, r3, #6, #3
   17576:	f401 717b 	and.w	r1, r1, #1004	; 0x3ec
   1757a:	f361 2852 	bfi	r8, r1, #9, #10
   1757e:	f36f 48de 	bfc	r8, #19, #12
   17582:	f36f 78df 	bfc	r8, #31, #1
   17586:	2300      	movs	r3, #0
   17588:	4641      	mov	r1, r8
   1758a:	4856      	ldr	r0, [pc, #344]	; (176e4 <hci_num_completed_packets+0x1b0>)
   1758c:	f00f fb63 	bl	26c56 <z_impl_z_log_msg_static_create>
   17590:	46a5      	mov	sp, r4
			continue;
   17592:	e075      	b.n	17680 <hci_num_completed_packets+0x14c>
			LOG_ERR("No connection for handle %u", handle);
   17594:	f06f 011b 	mvn.w	r1, #27
   17598:	e7d9      	b.n	1754e <hci_num_completed_packets+0x1a>
				conn->pending_no_cb--;
   1759a:	3b01      	subs	r3, #1
   1759c:	61e3      	str	r3, [r4, #28]
   1759e:	f382 8811 	msr	BASEPRI, r2
   175a2:	f3bf 8f6f 	isb	sy
				k_sem_give(bt_conn_get_pkts(conn));
   175a6:	4620      	mov	r0, r4
   175a8:	f002 ffd8 	bl	1a55c <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   175ac:	f00c fd34 	bl	24018 <z_impl_k_sem_give>
				continue;
   175b0:	e024      	b.n	175fc <hci_num_completed_packets+0xc8>
   175b2:	f382 8811 	msr	BASEPRI, r2
   175b6:	f3bf 8f6f 	isb	sy
			if (!node) {
   175ba:	2b00      	cmp	r3, #0
   175bc:	d03b      	beq.n	17636 <hci_num_completed_packets+0x102>
	__asm__ volatile(
   175be:	f04f 0140 	mov.w	r1, #64	; 0x40
   175c2:	f3ef 8211 	mrs	r2, BASEPRI
   175c6:	f381 8812 	msr	BASEPRI_MAX, r1
   175ca:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   175ce:	68d9      	ldr	r1, [r3, #12]
   175d0:	61e1      	str	r1, [r4, #28]
			tx->pending_no_cb = 0U;
   175d2:	2100      	movs	r1, #0
   175d4:	60d9      	str	r1, [r3, #12]
	parent->next = child;
   175d6:	6019      	str	r1, [r3, #0]
	return list->tail;
   175d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   175da:	2900      	cmp	r1, #0
   175dc:	d07a      	beq.n	176d4 <hci_num_completed_packets+0x1a0>
	parent->next = child;
   175de:	600b      	str	r3, [r1, #0]
	list->tail = node;
   175e0:	6263      	str	r3, [r4, #36]	; 0x24
	__asm__ volatile(
   175e2:	f382 8811 	msr	BASEPRI, r2
   175e6:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   175ea:	f104 0028 	add.w	r0, r4, #40	; 0x28
   175ee:	f00c fe95 	bl	2431c <k_work_submit>
			k_sem_give(bt_conn_get_pkts(conn));
   175f2:	4620      	mov	r0, r4
   175f4:	f002 ffb2 	bl	1a55c <bt_conn_get_pkts>
   175f8:	f00c fd0e 	bl	24018 <z_impl_k_sem_give>
			LOG_ERR("No connection for handle %u", handle);
   175fc:	46ab      	mov	fp, r5
		while (count--) {
   175fe:	f10b 35ff 	add.w	r5, fp, #4294967295
   17602:	b2ad      	uxth	r5, r5
   17604:	f1bb 0f00 	cmp.w	fp, #0
   17608:	d037      	beq.n	1767a <hci_num_completed_packets+0x146>
	__asm__ volatile(
   1760a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1760e:	f3ef 8311 	mrs	r3, BASEPRI
   17612:	f382 8812 	msr	BASEPRI_MAX, r2
   17616:	f3bf 8f6f 	isb	sy
   1761a:	461a      	mov	r2, r3
			if (conn->pending_no_cb) {
   1761c:	69e3      	ldr	r3, [r4, #28]
   1761e:	2b00      	cmp	r3, #0
   17620:	d1bb      	bne.n	1759a <hci_num_completed_packets+0x66>
	return list->head;
   17622:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   17624:	2b00      	cmp	r3, #0
   17626:	d0c4      	beq.n	175b2 <hci_num_completed_packets+0x7e>
	return node->next;
   17628:	6819      	ldr	r1, [r3, #0]
	list->head = node;
   1762a:	6161      	str	r1, [r4, #20]
	return list->tail;
   1762c:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1762e:	4283      	cmp	r3, r0
   17630:	d1bf      	bne.n	175b2 <hci_num_completed_packets+0x7e>
	list->tail = node;
   17632:	61a1      	str	r1, [r4, #24]
}
   17634:	e7bd      	b.n	175b2 <hci_num_completed_packets+0x7e>
				LOG_ERR("packets count mismatch");
   17636:	4b2c      	ldr	r3, [pc, #176]	; (176e8 <hci_num_completed_packets+0x1b4>)
   17638:	61fb      	str	r3, [r7, #28]
   1763a:	2302      	movs	r3, #2
   1763c:	713b      	strb	r3, [r7, #4]
   1763e:	2300      	movs	r3, #0
   17640:	717b      	strb	r3, [r7, #5]
   17642:	71bb      	strb	r3, [r7, #6]
   17644:	71fb      	strb	r3, [r7, #7]
   17646:	687a      	ldr	r2, [r7, #4]
   17648:	61ba      	str	r2, [r7, #24]
   1764a:	f363 0900 	bfi	r9, r3, #0, #1
   1764e:	f363 0941 	bfi	r9, r3, #1, #1
   17652:	f363 0982 	bfi	r9, r3, #2, #1
   17656:	f363 09c5 	bfi	r9, r3, #3, #3
   1765a:	2201      	movs	r2, #1
   1765c:	f362 1988 	bfi	r9, r2, #6, #3
   17660:	2208      	movs	r2, #8
   17662:	f362 2952 	bfi	r9, r2, #9, #10
   17666:	f363 49de 	bfi	r9, r3, #19, #12
   1766a:	f363 79df 	bfi	r9, r3, #31, #1
   1766e:	f107 0218 	add.w	r2, r7, #24
   17672:	4649      	mov	r1, r9
   17674:	481b      	ldr	r0, [pc, #108]	; (176e4 <hci_num_completed_packets+0x1b0>)
   17676:	f00f faee 	bl	26c56 <z_impl_z_log_msg_static_create>
		bt_conn_unref(conn);
   1767a:	4620      	mov	r0, r4
   1767c:	f010 fb68 	bl	27d50 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   17680:	3601      	adds	r6, #1
   17682:	f89a 3000 	ldrb.w	r3, [sl]
   17686:	429e      	cmp	r6, r3
   17688:	da27      	bge.n	176da <hci_num_completed_packets+0x1a6>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   1768a:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
   1768e:	f8b3 5001 	ldrh.w	r5, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   17692:	f8b3 b003 	ldrh.w	fp, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   17696:	4628      	mov	r0, r5
   17698:	f003 fa88 	bl	1abac <bt_conn_lookup_handle>
		if (!conn) {
   1769c:	4604      	mov	r4, r0
   1769e:	2800      	cmp	r0, #0
   176a0:	d1ad      	bne.n	175fe <hci_num_completed_packets+0xca>
			LOG_ERR("No connection for handle %u", handle);
   176a2:	466c      	mov	r4, sp
   176a4:	b088      	sub	sp, #32
   176a6:	466b      	mov	r3, sp
   176a8:	f113 0210 	adds.w	r2, r3, #16
   176ac:	f43f af4a 	beq.w	17544 <hci_num_completed_packets+0x10>
   176b0:	210c      	movs	r1, #12
   176b2:	b152      	cbz	r2, 176ca <hci_num_completed_packets+0x196>
   176b4:	4608      	mov	r0, r1
   176b6:	2904      	cmp	r1, #4
   176b8:	dd03      	ble.n	176c2 <hci_num_completed_packets+0x18e>
   176ba:	f8df c030 	ldr.w	ip, [pc, #48]	; 176ec <hci_num_completed_packets+0x1b8>
   176be:	f8c3 c014 	str.w	ip, [r3, #20]
   176c2:	2808      	cmp	r0, #8
   176c4:	f77f af41 	ble.w	1754a <hci_num_completed_packets+0x16>
   176c8:	619d      	str	r5, [r3, #24]
   176ca:	290b      	cmp	r1, #11
   176cc:	f77f af62 	ble.w	17594 <hci_num_completed_packets+0x60>
   176d0:	210c      	movs	r1, #12
   176d2:	e73c      	b.n	1754e <hci_num_completed_packets+0x1a>
	list->tail = node;
   176d4:	6263      	str	r3, [r4, #36]	; 0x24
	list->head = node;
   176d6:	6223      	str	r3, [r4, #32]
}
   176d8:	e783      	b.n	175e2 <hci_num_completed_packets+0xae>
}
   176da:	3724      	adds	r7, #36	; 0x24
   176dc:	46bd      	mov	sp, r7
   176de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176e2:	bf00      	nop
   176e4:	0002d0bc 	.word	0x0002d0bc
   176e8:	0002e350 	.word	0x0002e350
   176ec:	0002e334 	.word	0x0002e334

000176f0 <hci_cmd_done>:
{
   176f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   176f4:	b082      	sub	sp, #8
   176f6:	af00      	add	r7, sp, #0
   176f8:	4605      	mov	r5, r0
   176fa:	460e      	mov	r6, r1
   176fc:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   176fe:	7a90      	ldrb	r0, [r2, #10]
   17700:	f007 f9f4 	bl	1eaec <net_buf_pool_get>
   17704:	4b75      	ldr	r3, [pc, #468]	; (178dc <hci_cmd_done+0x1ec>)
   17706:	4283      	cmp	r3, r0
   17708:	d050      	beq.n	177ac <hci_cmd_done+0xbc>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   1770a:	f894 800a 	ldrb.w	r8, [r4, #10]
   1770e:	4640      	mov	r0, r8
   17710:	f007 f9ec 	bl	1eaec <net_buf_pool_get>
   17714:	466e      	mov	r6, sp
   17716:	b08a      	sub	sp, #40	; 0x28
   17718:	466b      	mov	r3, sp
   1771a:	f113 0210 	adds.w	r2, r3, #16
   1771e:	d03f      	beq.n	177a0 <hci_cmd_done+0xb0>
   17720:	2418      	movs	r4, #24
   17722:	b1a2      	cbz	r2, 1774e <hci_cmd_done+0x5e>
   17724:	4621      	mov	r1, r4
   17726:	2c04      	cmp	r4, #4
   17728:	dd03      	ble.n	17732 <hci_cmd_done+0x42>
   1772a:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 178e0 <hci_cmd_done+0x1f0>
   1772e:	f8c3 c014 	str.w	ip, [r3, #20]
   17732:	2908      	cmp	r1, #8
   17734:	dd00      	ble.n	17738 <hci_cmd_done+0x48>
   17736:	619d      	str	r5, [r3, #24]
   17738:	290c      	cmp	r1, #12
   1773a:	dd01      	ble.n	17740 <hci_cmd_done+0x50>
   1773c:	f8c3 801c 	str.w	r8, [r3, #28]
   17740:	2910      	cmp	r1, #16
   17742:	dd00      	ble.n	17746 <hci_cmd_done+0x56>
   17744:	6218      	str	r0, [r3, #32]
   17746:	2914      	cmp	r1, #20
   17748:	dd01      	ble.n	1774e <hci_cmd_done+0x5e>
   1774a:	4964      	ldr	r1, [pc, #400]	; (178dc <hci_cmd_done+0x1ec>)
   1774c:	6259      	str	r1, [r3, #36]	; 0x24
   1774e:	2c17      	cmp	r4, #23
   17750:	dd29      	ble.n	177a6 <hci_cmd_done+0xb6>
   17752:	2418      	movs	r4, #24
   17754:	b13a      	cbz	r2, 17766 <hci_cmd_done+0x76>
   17756:	2106      	movs	r1, #6
   17758:	7139      	strb	r1, [r7, #4]
   1775a:	2100      	movs	r1, #0
   1775c:	7179      	strb	r1, [r7, #5]
   1775e:	71b9      	strb	r1, [r7, #6]
   17760:	71f9      	strb	r1, [r7, #7]
   17762:	6878      	ldr	r0, [r7, #4]
   17764:	6118      	str	r0, [r3, #16]
   17766:	2100      	movs	r1, #0
   17768:	f36f 0100 	bfc	r1, #0, #1
   1776c:	f36f 0141 	bfc	r1, #1, #1
   17770:	f36f 0182 	bfc	r1, #2, #1
   17774:	f36f 01c5 	bfc	r1, #3, #3
   17778:	2302      	movs	r3, #2
   1777a:	f363 1188 	bfi	r1, r3, #6, #3
   1777e:	f404 747f 	and.w	r4, r4, #1020	; 0x3fc
   17782:	f364 2152 	bfi	r1, r4, #9, #10
   17786:	f36f 41de 	bfc	r1, #19, #12
   1778a:	f36f 71df 	bfc	r1, #31, #1
   1778e:	2300      	movs	r3, #0
   17790:	4854      	ldr	r0, [pc, #336]	; (178e4 <hci_cmd_done+0x1f4>)
   17792:	f00f fa60 	bl	26c56 <z_impl_z_log_msg_static_create>
   17796:	46b5      	mov	sp, r6
}
   17798:	3708      	adds	r7, #8
   1779a:	46bd      	mov	sp, r7
   1779c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   177a0:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   177a4:	e7bd      	b.n	17722 <hci_cmd_done+0x32>
   177a6:	f06f 041b 	mvn.w	r4, #27
   177aa:	e7d3      	b.n	17754 <hci_cmd_done+0x64>
	if (cmd(buf)->opcode != opcode) {
   177ac:	4620      	mov	r0, r4
   177ae:	f012 fa63 	bl	29c78 <net_buf_id>
   177b2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   177b6:	4b4c      	ldr	r3, [pc, #304]	; (178e8 <hci_cmd_done+0x1f8>)
   177b8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   177bc:	885b      	ldrh	r3, [r3, #2]
   177be:	429d      	cmp	r5, r3
   177c0:	d133      	bne.n	1782a <hci_cmd_done+0x13a>
	if (bt_dev.sent_cmd) {
   177c2:	4b4a      	ldr	r3, [pc, #296]	; (178ec <hci_cmd_done+0x1fc>)
   177c4:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   177c8:	b128      	cbz	r0, 177d6 <hci_cmd_done+0xe6>
		net_buf_unref(bt_dev.sent_cmd);
   177ca:	f012 fb3f 	bl	29e4c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   177ce:	4b47      	ldr	r3, [pc, #284]	; (178ec <hci_cmd_done+0x1fc>)
   177d0:	2200      	movs	r2, #0
   177d2:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   177d6:	4620      	mov	r0, r4
   177d8:	f012 fa4e 	bl	29c78 <net_buf_id>
   177dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   177e0:	4b41      	ldr	r3, [pc, #260]	; (178e8 <hci_cmd_done+0x1f8>)
   177e2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   177e6:	685b      	ldr	r3, [r3, #4]
   177e8:	b10b      	cbz	r3, 177ee <hci_cmd_done+0xfe>
   177ea:	2e00      	cmp	r6, #0
   177ec:	d067      	beq.n	178be <hci_cmd_done+0x1ce>
	if (cmd(buf)->sync) {
   177ee:	4620      	mov	r0, r4
   177f0:	f012 fa42 	bl	29c78 <net_buf_id>
   177f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   177f8:	4b3b      	ldr	r3, [pc, #236]	; (178e8 <hci_cmd_done+0x1f8>)
   177fa:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   177fe:	689b      	ldr	r3, [r3, #8]
   17800:	2b00      	cmp	r3, #0
   17802:	d0c9      	beq.n	17798 <hci_cmd_done+0xa8>
		cmd(buf)->status = status;
   17804:	4620      	mov	r0, r4
   17806:	f012 fa37 	bl	29c78 <net_buf_id>
   1780a:	4d37      	ldr	r5, [pc, #220]	; (178e8 <hci_cmd_done+0x1f8>)
   1780c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17810:	f805 6020 	strb.w	r6, [r5, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
   17814:	4620      	mov	r0, r4
   17816:	f012 fa2f 	bl	29c78 <net_buf_id>
   1781a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1781e:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   17822:	68a8      	ldr	r0, [r5, #8]
   17824:	f00c fbf8 	bl	24018 <z_impl_k_sem_give>
}
   17828:	e7b6      	b.n	17798 <hci_cmd_done+0xa8>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   1782a:	4620      	mov	r0, r4
   1782c:	f012 fa24 	bl	29c78 <net_buf_id>
   17830:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17834:	4b2c      	ldr	r3, [pc, #176]	; (178e8 <hci_cmd_done+0x1f8>)
   17836:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   1783a:	885c      	ldrh	r4, [r3, #2]
   1783c:	466e      	mov	r6, sp
   1783e:	b088      	sub	sp, #32
   17840:	466b      	mov	r3, sp
   17842:	f113 0210 	adds.w	r2, r3, #16
   17846:	d034      	beq.n	178b2 <hci_cmd_done+0x1c2>
   17848:	2110      	movs	r1, #16
   1784a:	b162      	cbz	r2, 17866 <hci_cmd_done+0x176>
   1784c:	4608      	mov	r0, r1
   1784e:	2904      	cmp	r1, #4
   17850:	dd03      	ble.n	1785a <hci_cmd_done+0x16a>
   17852:	f8df c09c 	ldr.w	ip, [pc, #156]	; 178f0 <hci_cmd_done+0x200>
   17856:	f8c3 c014 	str.w	ip, [r3, #20]
   1785a:	2808      	cmp	r0, #8
   1785c:	dd00      	ble.n	17860 <hci_cmd_done+0x170>
   1785e:	619d      	str	r5, [r3, #24]
   17860:	280c      	cmp	r0, #12
   17862:	dd00      	ble.n	17866 <hci_cmd_done+0x176>
   17864:	61dc      	str	r4, [r3, #28]
   17866:	290f      	cmp	r1, #15
   17868:	dd26      	ble.n	178b8 <hci_cmd_done+0x1c8>
   1786a:	2410      	movs	r4, #16
   1786c:	b13a      	cbz	r2, 1787e <hci_cmd_done+0x18e>
   1786e:	2104      	movs	r1, #4
   17870:	7139      	strb	r1, [r7, #4]
   17872:	2100      	movs	r1, #0
   17874:	7179      	strb	r1, [r7, #5]
   17876:	71b9      	strb	r1, [r7, #6]
   17878:	71f9      	strb	r1, [r7, #7]
   1787a:	6878      	ldr	r0, [r7, #4]
   1787c:	6118      	str	r0, [r3, #16]
   1787e:	2100      	movs	r1, #0
   17880:	f36f 0100 	bfc	r1, #0, #1
   17884:	f36f 0141 	bfc	r1, #1, #1
   17888:	f36f 0182 	bfc	r1, #2, #1
   1788c:	f36f 01c5 	bfc	r1, #3, #3
   17890:	2302      	movs	r3, #2
   17892:	f363 1188 	bfi	r1, r3, #6, #3
   17896:	f404 737d 	and.w	r3, r4, #1012	; 0x3f4
   1789a:	f363 2152 	bfi	r1, r3, #9, #10
   1789e:	f36f 41de 	bfc	r1, #19, #12
   178a2:	f36f 71df 	bfc	r1, #31, #1
   178a6:	2300      	movs	r3, #0
   178a8:	480e      	ldr	r0, [pc, #56]	; (178e4 <hci_cmd_done+0x1f4>)
   178aa:	f00f f9d4 	bl	26c56 <z_impl_z_log_msg_static_create>
   178ae:	46b5      	mov	sp, r6
		return;
   178b0:	e772      	b.n	17798 <hci_cmd_done+0xa8>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   178b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   178b6:	e7c8      	b.n	1784a <hci_cmd_done+0x15a>
   178b8:	f06f 041b 	mvn.w	r4, #27
   178bc:	e7d6      	b.n	1786c <hci_cmd_done+0x17c>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   178be:	4620      	mov	r0, r4
   178c0:	f012 f9da 	bl	29c78 <net_buf_id>
   178c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   178c8:	4b07      	ldr	r3, [pc, #28]	; (178e8 <hci_cmd_done+0x1f8>)
   178ca:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   178ce:	685b      	ldr	r3, [r3, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   178d0:	7a1a      	ldrb	r2, [r3, #8]
   178d2:	6859      	ldr	r1, [r3, #4]
   178d4:	6818      	ldr	r0, [r3, #0]
   178d6:	f00f ff37 	bl	27748 <atomic_set_bit_to>
   178da:	e788      	b.n	177ee <hci_cmd_done+0xfe>
   178dc:	20000ba8 	.word	0x20000ba8
   178e0:	0002e368 	.word	0x0002e368
   178e4:	0002d0bc 	.word	0x0002d0bc
   178e8:	20007b40 	.word	0x20007b40
   178ec:	20000370 	.word	0x20000370
   178f0:	0002e3a0 	.word	0x0002e3a0

000178f4 <le_remote_feat_complete>:
{
   178f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   178f6:	b083      	sub	sp, #12
   178f8:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   178fa:	68c4      	ldr	r4, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   178fc:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
   17900:	4630      	mov	r0, r6
   17902:	f003 f953 	bl	1abac <bt_conn_lookup_handle>
	if (!conn) {
   17906:	b1b0      	cbz	r0, 17936 <le_remote_feat_complete+0x42>
   17908:	4605      	mov	r5, r0
	if (!evt->status) {
   1790a:	7823      	ldrb	r3, [r4, #0]
   1790c:	2b00      	cmp	r3, #0
   1790e:	d04e      	beq.n	179ae <le_remote_feat_complete+0xba>
	atomic_set_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH);
   17910:	1d2b      	adds	r3, r5, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17912:	f3bf 8f5b 	dmb	ish
   17916:	e853 1f00 	ldrex	r1, [r3]
   1791a:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   1791e:	e843 1200 	strex	r2, r1, [r3]
   17922:	2a00      	cmp	r2, #0
   17924:	d1f7      	bne.n	17916 <le_remote_feat_complete+0x22>
   17926:	f3bf 8f5b 	dmb	ish
	bt_conn_unref(conn);
   1792a:	4628      	mov	r0, r5
   1792c:	f010 fa10 	bl	27d50 <bt_conn_unref>
}
   17930:	370c      	adds	r7, #12
   17932:	46bd      	mov	sp, r7
   17934:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   17936:	466d      	mov	r5, sp
   17938:	b088      	sub	sp, #32
   1793a:	466b      	mov	r3, sp
   1793c:	f113 0210 	adds.w	r2, r3, #16
   17940:	d02f      	beq.n	179a2 <le_remote_feat_complete+0xae>
   17942:	210c      	movs	r1, #12
   17944:	b13a      	cbz	r2, 17956 <le_remote_feat_complete+0x62>
   17946:	4608      	mov	r0, r1
   17948:	2904      	cmp	r1, #4
   1794a:	dd01      	ble.n	17950 <le_remote_feat_complete+0x5c>
   1794c:	4c1b      	ldr	r4, [pc, #108]	; (179bc <le_remote_feat_complete+0xc8>)
   1794e:	615c      	str	r4, [r3, #20]
   17950:	2808      	cmp	r0, #8
   17952:	dd00      	ble.n	17956 <le_remote_feat_complete+0x62>
   17954:	619e      	str	r6, [r3, #24]
   17956:	290b      	cmp	r1, #11
   17958:	dd26      	ble.n	179a8 <le_remote_feat_complete+0xb4>
   1795a:	240c      	movs	r4, #12
   1795c:	b13a      	cbz	r2, 1796e <le_remote_feat_complete+0x7a>
   1795e:	2103      	movs	r1, #3
   17960:	7139      	strb	r1, [r7, #4]
   17962:	2100      	movs	r1, #0
   17964:	7179      	strb	r1, [r7, #5]
   17966:	71b9      	strb	r1, [r7, #6]
   17968:	71f9      	strb	r1, [r7, #7]
   1796a:	6878      	ldr	r0, [r7, #4]
   1796c:	6118      	str	r0, [r3, #16]
   1796e:	2100      	movs	r1, #0
   17970:	f36f 0100 	bfc	r1, #0, #1
   17974:	f36f 0141 	bfc	r1, #1, #1
   17978:	f36f 0182 	bfc	r1, #2, #1
   1797c:	f36f 01c5 	bfc	r1, #3, #3
   17980:	2301      	movs	r3, #1
   17982:	f363 1188 	bfi	r1, r3, #6, #3
   17986:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1798a:	f364 2152 	bfi	r1, r4, #9, #10
   1798e:	f36f 41de 	bfc	r1, #19, #12
   17992:	f36f 71df 	bfc	r1, #31, #1
   17996:	2300      	movs	r3, #0
   17998:	4809      	ldr	r0, [pc, #36]	; (179c0 <le_remote_feat_complete+0xcc>)
   1799a:	f00f f95c 	bl	26c56 <z_impl_z_log_msg_static_create>
   1799e:	46ad      	mov	sp, r5
		return;
   179a0:	e7c6      	b.n	17930 <le_remote_feat_complete+0x3c>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   179a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   179a6:	e7cd      	b.n	17944 <le_remote_feat_complete+0x50>
   179a8:	f06f 041b 	mvn.w	r4, #27
   179ac:	e7d6      	b.n	1795c <le_remote_feat_complete+0x68>
		memcpy(conn->le.features, evt->features,
   179ae:	2208      	movs	r2, #8
   179b0:	1ce1      	adds	r1, r4, #3
   179b2:	30ac      	adds	r0, #172	; 0xac
   179b4:	f00f fd8a 	bl	274cc <memcpy>
   179b8:	e7aa      	b.n	17910 <le_remote_feat_complete+0x1c>
   179ba:	bf00      	nop
   179bc:	0002e310 	.word	0x0002e310
   179c0:	0002d0bc 	.word	0x0002d0bc

000179c4 <hci_cmd_status>:
{
   179c4:	b538      	push	{r3, r4, r5, lr}
   179c6:	4604      	mov	r4, r0
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   179c8:	2104      	movs	r1, #4
   179ca:	300c      	adds	r0, #12
   179cc:	f012 faaf 	bl	29f2e <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   179d0:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   179d2:	4622      	mov	r2, r4
   179d4:	7801      	ldrb	r1, [r0, #0]
   179d6:	8840      	ldrh	r0, [r0, #2]
   179d8:	f7ff fe8a 	bl	176f0 <hci_cmd_done>
	if (ncmd) {
   179dc:	b905      	cbnz	r5, 179e0 <hci_cmd_status+0x1c>
}
   179de:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
   179e0:	4801      	ldr	r0, [pc, #4]	; (179e8 <hci_cmd_status+0x24>)
   179e2:	f00c fb19 	bl	24018 <z_impl_k_sem_give>
   179e6:	e7fa      	b.n	179de <hci_cmd_status+0x1a>
   179e8:	20000488 	.word	0x20000488

000179ec <hci_cmd_complete>:
{
   179ec:	b538      	push	{r3, r4, r5, lr}
   179ee:	4604      	mov	r4, r0
   179f0:	2103      	movs	r1, #3
   179f2:	300c      	adds	r0, #12
   179f4:	f012 fa9b 	bl	29f2e <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   179f8:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
   179fa:	68e3      	ldr	r3, [r4, #12]
	hci_cmd_done(opcode, status, buf);
   179fc:	4622      	mov	r2, r4
   179fe:	7819      	ldrb	r1, [r3, #0]
   17a00:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   17a04:	f7ff fe74 	bl	176f0 <hci_cmd_done>
	if (ncmd) {
   17a08:	b905      	cbnz	r5, 17a0c <hci_cmd_complete+0x20>
}
   17a0a:	bd38      	pop	{r3, r4, r5, pc}
   17a0c:	4801      	ldr	r0, [pc, #4]	; (17a14 <hci_cmd_complete+0x28>)
   17a0e:	f00c fb03 	bl	24018 <z_impl_k_sem_give>
   17a12:	e7fa      	b.n	17a0a <hci_cmd_complete+0x1e>
   17a14:	20000488 	.word	0x20000488

00017a18 <hci_hardware_error>:
{
   17a18:	b5b0      	push	{r4, r5, r7, lr}
   17a1a:	b082      	sub	sp, #8
   17a1c:	af00      	add	r7, sp, #0
   17a1e:	2101      	movs	r1, #1
   17a20:	300c      	adds	r0, #12
   17a22:	f012 fa84 	bl	29f2e <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   17a26:	7804      	ldrb	r4, [r0, #0]
   17a28:	b088      	sub	sp, #32
   17a2a:	466b      	mov	r3, sp
   17a2c:	f113 0210 	adds.w	r2, r3, #16
   17a30:	d031      	beq.n	17a96 <hci_hardware_error+0x7e>
   17a32:	210c      	movs	r1, #12
   17a34:	b13a      	cbz	r2, 17a46 <hci_hardware_error+0x2e>
   17a36:	4608      	mov	r0, r1
   17a38:	2904      	cmp	r1, #4
   17a3a:	dd01      	ble.n	17a40 <hci_hardware_error+0x28>
   17a3c:	4d19      	ldr	r5, [pc, #100]	; (17aa4 <hci_hardware_error+0x8c>)
   17a3e:	615d      	str	r5, [r3, #20]
   17a40:	2808      	cmp	r0, #8
   17a42:	dd00      	ble.n	17a46 <hci_hardware_error+0x2e>
   17a44:	619c      	str	r4, [r3, #24]
   17a46:	290b      	cmp	r1, #11
   17a48:	dd28      	ble.n	17a9c <hci_hardware_error+0x84>
   17a4a:	f04f 0c0c 	mov.w	ip, #12
   17a4e:	b13a      	cbz	r2, 17a60 <hci_hardware_error+0x48>
   17a50:	2103      	movs	r1, #3
   17a52:	7139      	strb	r1, [r7, #4]
   17a54:	2100      	movs	r1, #0
   17a56:	7179      	strb	r1, [r7, #5]
   17a58:	71b9      	strb	r1, [r7, #6]
   17a5a:	71f9      	strb	r1, [r7, #7]
   17a5c:	6878      	ldr	r0, [r7, #4]
   17a5e:	6118      	str	r0, [r3, #16]
   17a60:	2100      	movs	r1, #0
   17a62:	f36f 0100 	bfc	r1, #0, #1
   17a66:	f36f 0141 	bfc	r1, #1, #1
   17a6a:	f36f 0182 	bfc	r1, #2, #1
   17a6e:	f36f 01c5 	bfc	r1, #3, #3
   17a72:	2301      	movs	r3, #1
   17a74:	f363 1188 	bfi	r1, r3, #6, #3
   17a78:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   17a7c:	f36c 2152 	bfi	r1, ip, #9, #10
   17a80:	f36f 41de 	bfc	r1, #19, #12
   17a84:	f36f 71df 	bfc	r1, #31, #1
   17a88:	2300      	movs	r3, #0
   17a8a:	4807      	ldr	r0, [pc, #28]	; (17aa8 <hci_hardware_error+0x90>)
   17a8c:	f00f f8e3 	bl	26c56 <z_impl_z_log_msg_static_create>
}
   17a90:	3708      	adds	r7, #8
   17a92:	46bd      	mov	sp, r7
   17a94:	bdb0      	pop	{r4, r5, r7, pc}
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   17a96:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17a9a:	e7cb      	b.n	17a34 <hci_hardware_error+0x1c>
   17a9c:	f06f 0c1b 	mvn.w	ip, #27
   17aa0:	e7d5      	b.n	17a4e <hci_hardware_error+0x36>
   17aa2:	bf00      	nop
   17aa4:	0002e3d4 	.word	0x0002e3d4
   17aa8:	0002d0bc 	.word	0x0002d0bc

00017aac <handle_event>:
{
   17aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17ab0:	b082      	sub	sp, #8
   17ab2:	af00      	add	r7, sp, #0
   17ab4:	4605      	mov	r5, r0
   17ab6:	460c      	mov	r4, r1
	err = handle_event_common(event, buf, handlers, num_handlers);
   17ab8:	f7ff fbc6 	bl	17248 <handle_event_common>
	if (err == -EOPNOTSUPP) {
   17abc:	f110 0f5f 	cmn.w	r0, #95	; 0x5f
   17ac0:	d003      	beq.n	17aca <handle_event+0x1e>
}
   17ac2:	3708      	adds	r7, #8
   17ac4:	46bd      	mov	sp, r7
   17ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   17aca:	f8b4 8010 	ldrh.w	r8, [r4, #16]
   17ace:	4641      	mov	r1, r8
   17ad0:	68e0      	ldr	r0, [r4, #12]
   17ad2:	f7ff f935 	bl	16d40 <bt_hex>
   17ad6:	466e      	mov	r6, sp
   17ad8:	2302      	movs	r3, #2
   17ada:	713b      	strb	r3, [r7, #4]
   17adc:	2304      	movs	r3, #4
   17ade:	717b      	strb	r3, [r7, #5]
   17ae0:	b08a      	sub	sp, #40	; 0x28
   17ae2:	466c      	mov	r4, sp
   17ae4:	f114 0210 	adds.w	r2, r4, #16
   17ae8:	d01c      	beq.n	17b24 <handle_event+0x78>
   17aea:	f04f 0c16 	mov.w	ip, #22
   17aee:	b162      	cbz	r2, 17b0a <handle_event+0x5e>
   17af0:	4663      	mov	r3, ip
   17af2:	f1bc 0f04 	cmp.w	ip, #4
   17af6:	dd01      	ble.n	17afc <handle_event+0x50>
   17af8:	4926      	ldr	r1, [pc, #152]	; (17b94 <handle_event+0xe8>)
   17afa:	6161      	str	r1, [r4, #20]
   17afc:	2b08      	cmp	r3, #8
   17afe:	dd00      	ble.n	17b02 <handle_event+0x56>
   17b00:	61a5      	str	r5, [r4, #24]
   17b02:	2b0c      	cmp	r3, #12
   17b04:	dd01      	ble.n	17b0a <handle_event+0x5e>
   17b06:	f8c4 801c 	str.w	r8, [r4, #28]
   17b0a:	2302      	movs	r3, #2
   17b0c:	703b      	strb	r3, [r7, #0]
   17b0e:	2304      	movs	r3, #4
   17b10:	707b      	strb	r3, [r7, #1]
   17b12:	b1a2      	cbz	r2, 17b3e <handle_event+0x92>
   17b14:	f1bc 0f10 	cmp.w	ip, #16
   17b18:	dd00      	ble.n	17b1c <handle_event+0x70>
   17b1a:	6220      	str	r0, [r4, #32]
   17b1c:	f104 0324 	add.w	r3, r4, #36	; 0x24
   17b20:	2100      	movs	r1, #0
   17b22:	e00a      	b.n	17b3a <handle_event+0x8e>
   17b24:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   17b28:	e7e1      	b.n	17aee <handle_event+0x42>
   17b2a:	f101 0008 	add.w	r0, r1, #8
   17b2e:	4438      	add	r0, r7
   17b30:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   17b34:	f803 0b01 	strb.w	r0, [r3], #1
   17b38:	3101      	adds	r1, #1
   17b3a:	2901      	cmp	r1, #1
   17b3c:	d9f5      	bls.n	17b2a <handle_event+0x7e>
   17b3e:	f1bc 0f15 	cmp.w	ip, #21
   17b42:	dd24      	ble.n	17b8e <handle_event+0xe2>
   17b44:	2316      	movs	r3, #22
   17b46:	b142      	cbz	r2, 17b5a <handle_event+0xae>
   17b48:	2105      	movs	r1, #5
   17b4a:	7139      	strb	r1, [r7, #4]
   17b4c:	2100      	movs	r1, #0
   17b4e:	7179      	strb	r1, [r7, #5]
   17b50:	71b9      	strb	r1, [r7, #6]
   17b52:	2101      	movs	r1, #1
   17b54:	71f9      	strb	r1, [r7, #7]
   17b56:	6878      	ldr	r0, [r7, #4]
   17b58:	6120      	str	r0, [r4, #16]
   17b5a:	2100      	movs	r1, #0
   17b5c:	f36f 0100 	bfc	r1, #0, #1
   17b60:	f36f 0141 	bfc	r1, #1, #1
   17b64:	f36f 0182 	bfc	r1, #2, #1
   17b68:	f36f 01c5 	bfc	r1, #3, #3
   17b6c:	2002      	movs	r0, #2
   17b6e:	f360 1188 	bfi	r1, r0, #6, #3
   17b72:	f3c3 0309 	ubfx	r3, r3, #0, #10
   17b76:	f363 2152 	bfi	r1, r3, #9, #10
   17b7a:	f36f 41de 	bfc	r1, #19, #12
   17b7e:	f36f 71df 	bfc	r1, #31, #1
   17b82:	2300      	movs	r3, #0
   17b84:	4804      	ldr	r0, [pc, #16]	; (17b98 <handle_event+0xec>)
   17b86:	f00f f866 	bl	26c56 <z_impl_z_log_msg_static_create>
   17b8a:	46b5      	mov	sp, r6
}
   17b8c:	e799      	b.n	17ac2 <handle_event+0x16>
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   17b8e:	f06f 031b 	mvn.w	r3, #27
   17b92:	e7d8      	b.n	17b46 <handle_event+0x9a>
   17b94:	0002e3f8 	.word	0x0002e3f8
   17b98:	0002d0bc 	.word	0x0002d0bc

00017b9c <hci_event>:
{
   17b9c:	b538      	push	{r3, r4, r5, lr}
   17b9e:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17ba0:	8a03      	ldrh	r3, [r0, #16]
   17ba2:	2b01      	cmp	r3, #1
   17ba4:	d915      	bls.n	17bd2 <hci_event+0x36>
   17ba6:	2102      	movs	r1, #2
   17ba8:	f104 000c 	add.w	r0, r4, #12
   17bac:	f012 f9bf 	bl	29f2e <net_buf_simple_pull_mem>
   17bb0:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   17bb2:	7800      	ldrb	r0, [r0, #0]
   17bb4:	f00f fd8b 	bl	276ce <bt_hci_evt_get_flags>
   17bb8:	f010 0f02 	tst.w	r0, #2
   17bbc:	d017      	beq.n	17bee <hci_event+0x52>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   17bbe:	2304      	movs	r3, #4
   17bc0:	4a12      	ldr	r2, [pc, #72]	; (17c0c <hci_event+0x70>)
   17bc2:	4621      	mov	r1, r4
   17bc4:	7828      	ldrb	r0, [r5, #0]
   17bc6:	f7ff ff71 	bl	17aac <handle_event>
	net_buf_unref(buf);
   17bca:	4620      	mov	r0, r4
   17bcc:	f012 f93e 	bl	29e4c <net_buf_unref>
}
   17bd0:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17bd2:	f640 136d 	movw	r3, #2413	; 0x96d
   17bd6:	4a0e      	ldr	r2, [pc, #56]	; (17c10 <hci_event+0x74>)
   17bd8:	490e      	ldr	r1, [pc, #56]	; (17c14 <hci_event+0x78>)
   17bda:	480f      	ldr	r0, [pc, #60]	; (17c18 <hci_event+0x7c>)
   17bdc:	f00e fd22 	bl	26624 <assert_print>
   17be0:	4040      	eors	r0, r0
   17be2:	f380 8811 	msr	BASEPRI, r0
   17be6:	f04f 0003 	mov.w	r0, #3
   17bea:	df02      	svc	2
   17bec:	e7db      	b.n	17ba6 <hci_event+0xa>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   17bee:	f640 1371 	movw	r3, #2417	; 0x971
   17bf2:	4a07      	ldr	r2, [pc, #28]	; (17c10 <hci_event+0x74>)
   17bf4:	4909      	ldr	r1, [pc, #36]	; (17c1c <hci_event+0x80>)
   17bf6:	4808      	ldr	r0, [pc, #32]	; (17c18 <hci_event+0x7c>)
   17bf8:	f00e fd14 	bl	26624 <assert_print>
   17bfc:	4040      	eors	r0, r0
   17bfe:	f380 8811 	msr	BASEPRI, r0
   17c02:	f04f 0003 	mov.w	r0, #3
   17c06:	df02      	svc	2
   17c08:	e7d9      	b.n	17bbe <hci_event+0x22>
   17c0a:	bf00      	nop
   17c0c:	0002e870 	.word	0x0002e870
   17c10:	0002e41c 	.word	0x0002e41c
   17c14:	0002e450 	.word	0x0002e450
   17c18:	0002e46c 	.word	0x0002e46c
   17c1c:	0002e48c 	.word	0x0002e48c

00017c20 <hci_le_meta_event>:
{
   17c20:	b510      	push	{r4, lr}
   17c22:	4604      	mov	r4, r0
   17c24:	2101      	movs	r1, #1
   17c26:	300c      	adds	r0, #12
   17c28:	f012 f981 	bl	29f2e <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   17c2c:	2308      	movs	r3, #8
   17c2e:	4a03      	ldr	r2, [pc, #12]	; (17c3c <hci_le_meta_event+0x1c>)
   17c30:	4621      	mov	r1, r4
   17c32:	7800      	ldrb	r0, [r0, #0]
   17c34:	f7ff ff3a 	bl	17aac <handle_event>
}
   17c38:	bd10      	pop	{r4, pc}
   17c3a:	bf00      	nop
   17c3c:	0002e890 	.word	0x0002e890

00017c40 <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
   17c40:	b5b0      	push	{r4, r5, r7, lr}
   17c42:	b082      	sub	sp, #8
   17c44:	af00      	add	r7, sp, #0
   17c46:	4601      	mov	r1, r0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   17c48:	4824      	ldr	r0, [pc, #144]	; (17cdc <rx_queue_put+0x9c>)
   17c4a:	f012 f8cd 	bl	29de8 <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   17c4e:	4924      	ldr	r1, [pc, #144]	; (17ce0 <rx_queue_put+0xa0>)
   17c50:	4824      	ldr	r0, [pc, #144]	; (17ce4 <rx_queue_put+0xa4>)
   17c52:	f014 fb63 	bl	2c31c <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
   17c56:	2800      	cmp	r0, #0
   17c58:	db02      	blt.n	17c60 <rx_queue_put+0x20>
		LOG_ERR("Could not submit rx_work: %d", err);
	}
}
   17c5a:	3708      	adds	r7, #8
   17c5c:	46bd      	mov	sp, r7
   17c5e:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("Could not submit rx_work: %d", err);
   17c60:	466c      	mov	r4, sp
   17c62:	b088      	sub	sp, #32
   17c64:	466b      	mov	r3, sp
   17c66:	f113 0210 	adds.w	r2, r3, #16
   17c6a:	d031      	beq.n	17cd0 <rx_queue_put+0x90>
   17c6c:	210c      	movs	r1, #12
   17c6e:	b142      	cbz	r2, 17c82 <rx_queue_put+0x42>
   17c70:	468c      	mov	ip, r1
   17c72:	2904      	cmp	r1, #4
   17c74:	dd01      	ble.n	17c7a <rx_queue_put+0x3a>
   17c76:	4d1c      	ldr	r5, [pc, #112]	; (17ce8 <rx_queue_put+0xa8>)
   17c78:	615d      	str	r5, [r3, #20]
   17c7a:	f1bc 0f08 	cmp.w	ip, #8
   17c7e:	dd00      	ble.n	17c82 <rx_queue_put+0x42>
   17c80:	6198      	str	r0, [r3, #24]
   17c82:	290b      	cmp	r1, #11
   17c84:	dd27      	ble.n	17cd6 <rx_queue_put+0x96>
   17c86:	f04f 0c0c 	mov.w	ip, #12
   17c8a:	b13a      	cbz	r2, 17c9c <rx_queue_put+0x5c>
   17c8c:	2103      	movs	r1, #3
   17c8e:	7139      	strb	r1, [r7, #4]
   17c90:	2100      	movs	r1, #0
   17c92:	7179      	strb	r1, [r7, #5]
   17c94:	71b9      	strb	r1, [r7, #6]
   17c96:	71f9      	strb	r1, [r7, #7]
   17c98:	6878      	ldr	r0, [r7, #4]
   17c9a:	6118      	str	r0, [r3, #16]
   17c9c:	2100      	movs	r1, #0
   17c9e:	f36f 0100 	bfc	r1, #0, #1
   17ca2:	f36f 0141 	bfc	r1, #1, #1
   17ca6:	f36f 0182 	bfc	r1, #2, #1
   17caa:	f36f 01c5 	bfc	r1, #3, #3
   17cae:	2301      	movs	r3, #1
   17cb0:	f363 1188 	bfi	r1, r3, #6, #3
   17cb4:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   17cb8:	f36c 2152 	bfi	r1, ip, #9, #10
   17cbc:	f36f 41de 	bfc	r1, #19, #12
   17cc0:	f36f 71df 	bfc	r1, #31, #1
   17cc4:	2300      	movs	r3, #0
   17cc6:	4809      	ldr	r0, [pc, #36]	; (17cec <rx_queue_put+0xac>)
   17cc8:	f00e ffc5 	bl	26c56 <z_impl_z_log_msg_static_create>
   17ccc:	46a5      	mov	sp, r4
}
   17cce:	e7c4      	b.n	17c5a <rx_queue_put+0x1a>
		LOG_ERR("Could not submit rx_work: %d", err);
   17cd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17cd4:	e7cb      	b.n	17c6e <rx_queue_put+0x2e>
   17cd6:	f06f 0c1b 	mvn.w	ip, #27
   17cda:	e7d6      	b.n	17c8a <rx_queue_put+0x4a>
   17cdc:	200004a4 	.word	0x200004a4
   17ce0:	200007a8 	.word	0x200007a8
   17ce4:	200020d0 	.word	0x200020d0
   17ce8:	0002e4bc 	.word	0x0002e4bc
   17cec:	0002d0bc 	.word	0x0002d0bc

00017cf0 <hci_acl>:
{
   17cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   17cf2:	b083      	sub	sp, #12
   17cf4:	af00      	add	r7, sp, #0
   17cf6:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17cf8:	8a03      	ldrh	r3, [r0, #16]
   17cfa:	2b03      	cmp	r3, #3
   17cfc:	d952      	bls.n	17da4 <hci_acl+0xb4>
   17cfe:	2104      	movs	r1, #4
   17d00:	f104 000c 	add.w	r0, r4, #12
   17d04:	f012 f913 	bl	29f2e <net_buf_simple_pull_mem>
	len = sys_le16_to_cpu(hdr->len);
   17d08:	8846      	ldrh	r6, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   17d0a:	8800      	ldrh	r0, [r0, #0]
	flags = bt_acl_flags(handle);
   17d0c:	0b05      	lsrs	r5, r0, #12
	acl(buf)->handle = bt_acl_handle(handle);
   17d0e:	f3c0 000b 	ubfx	r0, r0, #0, #12
   17d12:	8360      	strh	r0, [r4, #26]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   17d14:	23ff      	movs	r3, #255	; 0xff
   17d16:	7663      	strb	r3, [r4, #25]
	if (buf->len != len) {
   17d18:	f8b4 c010 	ldrh.w	ip, [r4, #16]
   17d1c:	45b4      	cmp	ip, r6
   17d1e:	d055      	beq.n	17dcc <hci_acl+0xdc>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   17d20:	466d      	mov	r5, sp
   17d22:	b088      	sub	sp, #32
   17d24:	466b      	mov	r3, sp
   17d26:	f113 0210 	adds.w	r2, r3, #16
   17d2a:	d049      	beq.n	17dc0 <hci_acl+0xd0>
   17d2c:	2110      	movs	r1, #16
   17d2e:	b16a      	cbz	r2, 17d4c <hci_acl+0x5c>
   17d30:	4608      	mov	r0, r1
   17d32:	2904      	cmp	r1, #4
   17d34:	dd03      	ble.n	17d3e <hci_acl+0x4e>
   17d36:	f8df e138 	ldr.w	lr, [pc, #312]	; 17e70 <hci_acl+0x180>
   17d3a:	f8c3 e014 	str.w	lr, [r3, #20]
   17d3e:	2808      	cmp	r0, #8
   17d40:	dd01      	ble.n	17d46 <hci_acl+0x56>
   17d42:	f8c3 c018 	str.w	ip, [r3, #24]
   17d46:	280c      	cmp	r0, #12
   17d48:	dd00      	ble.n	17d4c <hci_acl+0x5c>
   17d4a:	61de      	str	r6, [r3, #28]
   17d4c:	290f      	cmp	r1, #15
   17d4e:	dd3a      	ble.n	17dc6 <hci_acl+0xd6>
   17d50:	f04f 0c10 	mov.w	ip, #16
   17d54:	b13a      	cbz	r2, 17d66 <hci_acl+0x76>
   17d56:	2104      	movs	r1, #4
   17d58:	7139      	strb	r1, [r7, #4]
   17d5a:	2100      	movs	r1, #0
   17d5c:	7179      	strb	r1, [r7, #5]
   17d5e:	71b9      	strb	r1, [r7, #6]
   17d60:	71f9      	strb	r1, [r7, #7]
   17d62:	6878      	ldr	r0, [r7, #4]
   17d64:	6118      	str	r0, [r3, #16]
   17d66:	2100      	movs	r1, #0
   17d68:	f36f 0100 	bfc	r1, #0, #1
   17d6c:	f36f 0141 	bfc	r1, #1, #1
   17d70:	f36f 0182 	bfc	r1, #2, #1
   17d74:	f36f 01c5 	bfc	r1, #3, #3
   17d78:	2301      	movs	r3, #1
   17d7a:	f363 1188 	bfi	r1, r3, #6, #3
   17d7e:	f40c 7c7d 	and.w	ip, ip, #1012	; 0x3f4
   17d82:	f36c 2152 	bfi	r1, ip, #9, #10
   17d86:	f36f 41de 	bfc	r1, #19, #12
   17d8a:	f36f 71df 	bfc	r1, #31, #1
   17d8e:	2300      	movs	r3, #0
   17d90:	4838      	ldr	r0, [pc, #224]	; (17e74 <hci_acl+0x184>)
   17d92:	f00e ff60 	bl	26c56 <z_impl_z_log_msg_static_create>
   17d96:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   17d98:	4620      	mov	r0, r4
   17d9a:	f012 f857 	bl	29e4c <net_buf_unref>
}
   17d9e:	370c      	adds	r7, #12
   17da0:	46bd      	mov	sp, r7
   17da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17da4:	f240 13ed 	movw	r3, #493	; 0x1ed
   17da8:	4a33      	ldr	r2, [pc, #204]	; (17e78 <hci_acl+0x188>)
   17daa:	4934      	ldr	r1, [pc, #208]	; (17e7c <hci_acl+0x18c>)
   17dac:	4834      	ldr	r0, [pc, #208]	; (17e80 <hci_acl+0x190>)
   17dae:	f00e fc39 	bl	26624 <assert_print>
   17db2:	4040      	eors	r0, r0
   17db4:	f380 8811 	msr	BASEPRI, r0
   17db8:	f04f 0003 	mov.w	r0, #3
   17dbc:	df02      	svc	2
   17dbe:	e79e      	b.n	17cfe <hci_acl+0xe>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   17dc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17dc4:	e7b3      	b.n	17d2e <hci_acl+0x3e>
   17dc6:	f06f 0c1b 	mvn.w	ip, #27
   17dca:	e7c3      	b.n	17d54 <hci_acl+0x64>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   17dcc:	f002 feee 	bl	1abac <bt_conn_lookup_handle>
	if (!conn) {
   17dd0:	4606      	mov	r6, r0
   17dd2:	b158      	cbz	r0, 17dec <hci_acl+0xfc>
	acl(buf)->index = bt_conn_index(conn);
   17dd4:	f003 f89c 	bl	1af10 <bt_conn_index>
   17dd8:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   17dda:	462a      	mov	r2, r5
   17ddc:	4621      	mov	r1, r4
   17dde:	4630      	mov	r0, r6
   17de0:	f00f ff83 	bl	27cea <bt_conn_recv>
	bt_conn_unref(conn);
   17de4:	4630      	mov	r0, r6
   17de6:	f00f ffb3 	bl	27d50 <bt_conn_unref>
   17dea:	e7d8      	b.n	17d9e <hci_acl+0xae>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   17dec:	8b65      	ldrh	r5, [r4, #26]
   17dee:	466e      	mov	r6, sp
   17df0:	b088      	sub	sp, #32
   17df2:	466b      	mov	r3, sp
   17df4:	f113 0210 	adds.w	r2, r3, #16
   17df8:	d034      	beq.n	17e64 <hci_acl+0x174>
   17dfa:	210c      	movs	r1, #12
   17dfc:	b14a      	cbz	r2, 17e12 <hci_acl+0x122>
   17dfe:	4608      	mov	r0, r1
   17e00:	2904      	cmp	r1, #4
   17e02:	dd03      	ble.n	17e0c <hci_acl+0x11c>
   17e04:	f8df c07c 	ldr.w	ip, [pc, #124]	; 17e84 <hci_acl+0x194>
   17e08:	f8c3 c014 	str.w	ip, [r3, #20]
   17e0c:	2808      	cmp	r0, #8
   17e0e:	dd00      	ble.n	17e12 <hci_acl+0x122>
   17e10:	619d      	str	r5, [r3, #24]
   17e12:	290b      	cmp	r1, #11
   17e14:	dd29      	ble.n	17e6a <hci_acl+0x17a>
   17e16:	250c      	movs	r5, #12
   17e18:	b13a      	cbz	r2, 17e2a <hci_acl+0x13a>
   17e1a:	2103      	movs	r1, #3
   17e1c:	7139      	strb	r1, [r7, #4]
   17e1e:	2100      	movs	r1, #0
   17e20:	7179      	strb	r1, [r7, #5]
   17e22:	71b9      	strb	r1, [r7, #6]
   17e24:	71f9      	strb	r1, [r7, #7]
   17e26:	6878      	ldr	r0, [r7, #4]
   17e28:	6118      	str	r0, [r3, #16]
   17e2a:	2100      	movs	r1, #0
   17e2c:	f36f 0100 	bfc	r1, #0, #1
   17e30:	f36f 0141 	bfc	r1, #1, #1
   17e34:	f36f 0182 	bfc	r1, #2, #1
   17e38:	f36f 01c5 	bfc	r1, #3, #3
   17e3c:	2301      	movs	r3, #1
   17e3e:	f363 1188 	bfi	r1, r3, #6, #3
   17e42:	f405 757b 	and.w	r5, r5, #1004	; 0x3ec
   17e46:	f365 2152 	bfi	r1, r5, #9, #10
   17e4a:	f36f 41de 	bfc	r1, #19, #12
   17e4e:	f36f 71df 	bfc	r1, #31, #1
   17e52:	2300      	movs	r3, #0
   17e54:	4807      	ldr	r0, [pc, #28]	; (17e74 <hci_acl+0x184>)
   17e56:	f00e fefe 	bl	26c56 <z_impl_z_log_msg_static_create>
   17e5a:	46b5      	mov	sp, r6
		net_buf_unref(buf);
   17e5c:	4620      	mov	r0, r4
   17e5e:	f011 fff5 	bl	29e4c <net_buf_unref>
		return;
   17e62:	e79c      	b.n	17d9e <hci_acl+0xae>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   17e64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17e68:	e7c8      	b.n	17dfc <hci_acl+0x10c>
   17e6a:	f06f 051b 	mvn.w	r5, #27
   17e6e:	e7d3      	b.n	17e18 <hci_acl+0x128>
   17e70:	0002e4dc 	.word	0x0002e4dc
   17e74:	0002d0bc 	.word	0x0002d0bc
   17e78:	0002e41c 	.word	0x0002e41c
   17e7c:	0002e450 	.word	0x0002e450
   17e80:	0002e46c 	.word	0x0002e46c
   17e84:	0002e500 	.word	0x0002e500

00017e88 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   17e88:	b5f0      	push	{r4, r5, r6, r7, lr}
   17e8a:	b083      	sub	sp, #12
   17e8c:	af00      	add	r7, sp, #0
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   17e8e:	484c      	ldr	r0, [pc, #304]	; (17fc0 <rx_work_handler+0x138>)
   17e90:	f011 ffc0 	bl	29e14 <net_buf_slist_get>
	if (!buf) {
   17e94:	2800      	cmp	r0, #0
   17e96:	d04e      	beq.n	17f36 <rx_work_handler+0xae>
   17e98:	4604      	mov	r4, r0
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   17e9a:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   17e9c:	2b01      	cmp	r3, #1
   17e9e:	d004      	beq.n	17eaa <rx_work_handler+0x22>
   17ea0:	2b03      	cmp	r3, #3
   17ea2:	d105      	bne.n	17eb0 <rx_work_handler+0x28>
#if defined(CONFIG_BT_CONN)
	case BT_BUF_ACL_IN:
		hci_acl(buf);
   17ea4:	f7ff ff24 	bl	17cf0 <hci_acl>
		break;
   17ea8:	e03b      	b.n	17f22 <rx_work_handler+0x9a>
	case BT_BUF_ISO_IN:
		hci_iso(buf);
		break;
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
   17eaa:	f7ff fe77 	bl	17b9c <hci_event>
		break;
   17eae:	e038      	b.n	17f22 <rx_work_handler+0x9a>
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   17eb0:	466d      	mov	r5, sp
   17eb2:	b088      	sub	sp, #32
   17eb4:	4669      	mov	r1, sp
   17eb6:	f111 0210 	adds.w	r2, r1, #16
   17eba:	d03f      	beq.n	17f3c <rx_work_handler+0xb4>
   17ebc:	200c      	movs	r0, #12
   17ebe:	b142      	cbz	r2, 17ed2 <rx_work_handler+0x4a>
   17ec0:	4684      	mov	ip, r0
   17ec2:	2804      	cmp	r0, #4
   17ec4:	dd01      	ble.n	17eca <rx_work_handler+0x42>
   17ec6:	4e3f      	ldr	r6, [pc, #252]	; (17fc4 <rx_work_handler+0x13c>)
   17ec8:	614e      	str	r6, [r1, #20]
   17eca:	f1bc 0f08 	cmp.w	ip, #8
   17ece:	dd00      	ble.n	17ed2 <rx_work_handler+0x4a>
   17ed0:	618b      	str	r3, [r1, #24]
   17ed2:	280b      	cmp	r0, #11
   17ed4:	dd35      	ble.n	17f42 <rx_work_handler+0xba>
   17ed6:	230c      	movs	r3, #12
   17ed8:	b13a      	cbz	r2, 17eea <rx_work_handler+0x62>
   17eda:	2003      	movs	r0, #3
   17edc:	7138      	strb	r0, [r7, #4]
   17ede:	2000      	movs	r0, #0
   17ee0:	7178      	strb	r0, [r7, #5]
   17ee2:	71b8      	strb	r0, [r7, #6]
   17ee4:	71f8      	strb	r0, [r7, #7]
   17ee6:	6878      	ldr	r0, [r7, #4]
   17ee8:	6108      	str	r0, [r1, #16]
   17eea:	2100      	movs	r1, #0
   17eec:	f36f 0100 	bfc	r1, #0, #1
   17ef0:	f36f 0141 	bfc	r1, #1, #1
   17ef4:	f36f 0182 	bfc	r1, #2, #1
   17ef8:	f36f 01c5 	bfc	r1, #3, #3
   17efc:	2001      	movs	r0, #1
   17efe:	f360 1188 	bfi	r1, r0, #6, #3
   17f02:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   17f06:	f363 2152 	bfi	r1, r3, #9, #10
   17f0a:	f36f 41de 	bfc	r1, #19, #12
   17f0e:	f36f 71df 	bfc	r1, #31, #1
   17f12:	2300      	movs	r3, #0
   17f14:	482c      	ldr	r0, [pc, #176]	; (17fc8 <rx_work_handler+0x140>)
   17f16:	f00e fe9e 	bl	26c56 <z_impl_z_log_msg_static_create>
   17f1a:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   17f1c:	4620      	mov	r0, r4
   17f1e:	f011 ff95 	bl	29e4c <net_buf_unref>
	return list->head;
   17f22:	4b2a      	ldr	r3, [pc, #168]	; (17fcc <rx_work_handler+0x144>)
   17f24:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   17f28:	b12b      	cbz	r3, 17f36 <rx_work_handler+0xae>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   17f2a:	4929      	ldr	r1, [pc, #164]	; (17fd0 <rx_work_handler+0x148>)
   17f2c:	4829      	ldr	r0, [pc, #164]	; (17fd4 <rx_work_handler+0x14c>)
   17f2e:	f014 f9f5 	bl	2c31c <k_work_submit_to_queue>
#endif
		if (err < 0) {
   17f32:	2800      	cmp	r0, #0
   17f34:	db08      	blt.n	17f48 <rx_work_handler+0xc0>
			LOG_ERR("Could not submit rx_work: %d", err);
		}
	}
}
   17f36:	370c      	adds	r7, #12
   17f38:	46bd      	mov	sp, r7
   17f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   17f3c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   17f40:	e7bd      	b.n	17ebe <rx_work_handler+0x36>
   17f42:	f06f 031b 	mvn.w	r3, #27
   17f46:	e7c7      	b.n	17ed8 <rx_work_handler+0x50>
			LOG_ERR("Could not submit rx_work: %d", err);
   17f48:	466d      	mov	r5, sp
   17f4a:	b088      	sub	sp, #32
   17f4c:	466b      	mov	r3, sp
   17f4e:	f113 0210 	adds.w	r2, r3, #16
   17f52:	d02f      	beq.n	17fb4 <rx_work_handler+0x12c>
   17f54:	210c      	movs	r1, #12
   17f56:	b13a      	cbz	r2, 17f68 <rx_work_handler+0xe0>
   17f58:	460c      	mov	r4, r1
   17f5a:	2904      	cmp	r1, #4
   17f5c:	dd01      	ble.n	17f62 <rx_work_handler+0xda>
   17f5e:	4e1e      	ldr	r6, [pc, #120]	; (17fd8 <rx_work_handler+0x150>)
   17f60:	615e      	str	r6, [r3, #20]
   17f62:	2c08      	cmp	r4, #8
   17f64:	dd00      	ble.n	17f68 <rx_work_handler+0xe0>
   17f66:	6198      	str	r0, [r3, #24]
   17f68:	290b      	cmp	r1, #11
   17f6a:	dd26      	ble.n	17fba <rx_work_handler+0x132>
   17f6c:	240c      	movs	r4, #12
   17f6e:	b13a      	cbz	r2, 17f80 <rx_work_handler+0xf8>
   17f70:	2103      	movs	r1, #3
   17f72:	7139      	strb	r1, [r7, #4]
   17f74:	2100      	movs	r1, #0
   17f76:	7179      	strb	r1, [r7, #5]
   17f78:	71b9      	strb	r1, [r7, #6]
   17f7a:	71f9      	strb	r1, [r7, #7]
   17f7c:	6878      	ldr	r0, [r7, #4]
   17f7e:	6118      	str	r0, [r3, #16]
   17f80:	2100      	movs	r1, #0
   17f82:	f36f 0100 	bfc	r1, #0, #1
   17f86:	f36f 0141 	bfc	r1, #1, #1
   17f8a:	f36f 0182 	bfc	r1, #2, #1
   17f8e:	f36f 01c5 	bfc	r1, #3, #3
   17f92:	2301      	movs	r3, #1
   17f94:	f363 1188 	bfi	r1, r3, #6, #3
   17f98:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   17f9c:	f363 2152 	bfi	r1, r3, #9, #10
   17fa0:	f36f 41de 	bfc	r1, #19, #12
   17fa4:	f36f 71df 	bfc	r1, #31, #1
   17fa8:	2300      	movs	r3, #0
   17faa:	4807      	ldr	r0, [pc, #28]	; (17fc8 <rx_work_handler+0x140>)
   17fac:	f00e fe53 	bl	26c56 <z_impl_z_log_msg_static_create>
   17fb0:	46ad      	mov	sp, r5
   17fb2:	e7c0      	b.n	17f36 <rx_work_handler+0xae>
   17fb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17fb8:	e7cd      	b.n	17f56 <rx_work_handler+0xce>
   17fba:	f06f 041b 	mvn.w	r4, #27
   17fbe:	e7d6      	b.n	17f6e <rx_work_handler+0xe6>
   17fc0:	200004a4 	.word	0x200004a4
   17fc4:	0002e524 	.word	0x0002e524
   17fc8:	0002d0bc 	.word	0x0002d0bc
   17fcc:	20000370 	.word	0x20000370
   17fd0:	200007a8 	.word	0x200007a8
   17fd4:	200020d0 	.word	0x200020d0
   17fd8:	0002e4bc 	.word	0x0002e4bc

00017fdc <le_conn_update_complete>:
{
   17fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   17fde:	b083      	sub	sp, #12
   17fe0:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   17fe2:	68c4      	ldr	r4, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   17fe4:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
   17fe8:	4630      	mov	r0, r6
   17fea:	f002 fddf 	bl	1abac <bt_conn_lookup_handle>
	if (!conn) {
   17fee:	b1d0      	cbz	r0, 18026 <le_conn_update_complete+0x4a>
   17ff0:	4605      	mov	r5, r0
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   17ff2:	7823      	ldrb	r3, [r4, #0]
   17ff4:	2b1a      	cmp	r3, #26
   17ff6:	d052      	beq.n	1809e <le_conn_update_complete+0xc2>
		if (!evt->status) {
   17ff8:	7823      	ldrb	r3, [r4, #0]
   17ffa:	b95b      	cbnz	r3, 18014 <le_conn_update_complete+0x38>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   17ffc:	f8b4 3003 	ldrh.w	r3, [r4, #3]
   18000:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   18004:	f8b4 3005 	ldrh.w	r3, [r4, #5]
   18008:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1800c:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   18010:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
		notify_le_param_updated(conn);
   18014:	4628      	mov	r0, r5
   18016:	f002 ffc5 	bl	1afa4 <notify_le_param_updated>
	bt_conn_unref(conn);
   1801a:	4628      	mov	r0, r5
   1801c:	f00f fe98 	bl	27d50 <bt_conn_unref>
}
   18020:	370c      	adds	r7, #12
   18022:	46bd      	mov	sp, r7
   18024:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   18026:	466d      	mov	r5, sp
   18028:	b088      	sub	sp, #32
   1802a:	466b      	mov	r3, sp
   1802c:	f113 0210 	adds.w	r2, r3, #16
   18030:	d02f      	beq.n	18092 <le_conn_update_complete+0xb6>
   18032:	210c      	movs	r1, #12
   18034:	b13a      	cbz	r2, 18046 <le_conn_update_complete+0x6a>
   18036:	4608      	mov	r0, r1
   18038:	2904      	cmp	r1, #4
   1803a:	dd01      	ble.n	18040 <le_conn_update_complete+0x64>
   1803c:	4c25      	ldr	r4, [pc, #148]	; (180d4 <le_conn_update_complete+0xf8>)
   1803e:	615c      	str	r4, [r3, #20]
   18040:	2808      	cmp	r0, #8
   18042:	dd00      	ble.n	18046 <le_conn_update_complete+0x6a>
   18044:	619e      	str	r6, [r3, #24]
   18046:	290b      	cmp	r1, #11
   18048:	dd26      	ble.n	18098 <le_conn_update_complete+0xbc>
   1804a:	240c      	movs	r4, #12
   1804c:	b13a      	cbz	r2, 1805e <le_conn_update_complete+0x82>
   1804e:	2103      	movs	r1, #3
   18050:	7039      	strb	r1, [r7, #0]
   18052:	2100      	movs	r1, #0
   18054:	7079      	strb	r1, [r7, #1]
   18056:	70b9      	strb	r1, [r7, #2]
   18058:	70f9      	strb	r1, [r7, #3]
   1805a:	6838      	ldr	r0, [r7, #0]
   1805c:	6118      	str	r0, [r3, #16]
   1805e:	2100      	movs	r1, #0
   18060:	f36f 0100 	bfc	r1, #0, #1
   18064:	f36f 0141 	bfc	r1, #1, #1
   18068:	f36f 0182 	bfc	r1, #2, #1
   1806c:	f36f 01c5 	bfc	r1, #3, #3
   18070:	2301      	movs	r3, #1
   18072:	f363 1188 	bfi	r1, r3, #6, #3
   18076:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1807a:	f364 2152 	bfi	r1, r4, #9, #10
   1807e:	f36f 41de 	bfc	r1, #19, #12
   18082:	f36f 71df 	bfc	r1, #31, #1
   18086:	2300      	movs	r3, #0
   18088:	4813      	ldr	r0, [pc, #76]	; (180d8 <le_conn_update_complete+0xfc>)
   1808a:	f00e fde4 	bl	26c56 <z_impl_z_log_msg_static_create>
   1808e:	46ad      	mov	sp, r5
		return;
   18090:	e7c6      	b.n	18020 <le_conn_update_complete+0x44>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   18092:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   18096:	e7cd      	b.n	18034 <le_conn_update_complete+0x58>
   18098:	f06f 041b 	mvn.w	r4, #27
   1809c:	e7d6      	b.n	1804c <le_conn_update_complete+0x70>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   1809e:	78c3      	ldrb	r3, [r0, #3]
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   180a0:	2b01      	cmp	r3, #1
   180a2:	d1a9      	bne.n	17ff8 <le_conn_update_complete+0x1c>
	    !atomic_test_and_set_bit(conn->flags,
   180a4:	210a      	movs	r1, #10
   180a6:	3004      	adds	r0, #4
   180a8:	f00f fb73 	bl	27792 <atomic_test_and_set_bit>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   180ac:	2800      	cmp	r0, #0
   180ae:	d1a3      	bne.n	17ff8 <le_conn_update_complete+0x1c>
		param.interval_min = conn->le.interval_min;
   180b0:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
   180b4:	803b      	strh	r3, [r7, #0]
		param.interval_max = conn->le.interval_max;
   180b6:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
   180ba:	807b      	strh	r3, [r7, #2]
		param.latency = conn->le.pending_latency;
   180bc:	f8b5 30a8 	ldrh.w	r3, [r5, #168]	; 0xa8
   180c0:	80bb      	strh	r3, [r7, #4]
		param.timeout = conn->le.pending_timeout;
   180c2:	f8b5 30aa 	ldrh.w	r3, [r5, #170]	; 0xaa
   180c6:	80fb      	strh	r3, [r7, #6]
		bt_l2cap_update_conn_param(conn, &param);
   180c8:	4639      	mov	r1, r7
   180ca:	4628      	mov	r0, r5
   180cc:	f00f ff91 	bl	27ff2 <bt_l2cap_update_conn_param>
				     BT_CONN_PERIPHERAL_PARAM_L2CAP)) {
   180d0:	e7a3      	b.n	1801a <le_conn_update_complete+0x3e>
   180d2:	bf00      	nop
   180d4:	0002e310 	.word	0x0002e310
   180d8:	0002d0bc 	.word	0x0002d0bc

000180dc <bt_hci_cmd_state_set_init>:
{
   180dc:	b510      	push	{r4, lr}
   180de:	460c      	mov	r4, r1
	state->target = target;
   180e0:	600a      	str	r2, [r1, #0]
	state->bit = bit;
   180e2:	604b      	str	r3, [r1, #4]
	state->val = val;
   180e4:	f89d 3008 	ldrb.w	r3, [sp, #8]
   180e8:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   180ea:	f011 fdc5 	bl	29c78 <net_buf_id>
   180ee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   180f2:	4b02      	ldr	r3, [pc, #8]	; (180fc <bt_hci_cmd_state_set_init+0x20>)
   180f4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   180f8:	605c      	str	r4, [r3, #4]
}
   180fa:	bd10      	pop	{r4, pc}
   180fc:	20007b40 	.word	0x20007b40

00018100 <bt_hci_cmd_create>:
{
   18100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18104:	4606      	mov	r6, r0
   18106:	460f      	mov	r7, r1
	return net_buf_alloc_fixed(pool, timeout);
   18108:	f04f 32ff 	mov.w	r2, #4294967295
   1810c:	f04f 33ff 	mov.w	r3, #4294967295
   18110:	4818      	ldr	r0, [pc, #96]	; (18174 <bt_hci_cmd_create+0x74>)
   18112:	f011 fe54 	bl	29dbe <net_buf_alloc_fixed>
   18116:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   18118:	f100 090c 	add.w	r9, r0, #12
   1811c:	2100      	movs	r1, #0
   1811e:	4648      	mov	r0, r9
   18120:	f011 fe5e 	bl	29de0 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   18124:	f04f 0800 	mov.w	r8, #0
   18128:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
   1812c:	4620      	mov	r0, r4
   1812e:	f011 fda3 	bl	29c78 <net_buf_id>
   18132:	4d11      	ldr	r5, [pc, #68]	; (18178 <bt_hci_cmd_create+0x78>)
   18134:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18138:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1813c:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   1813e:	4620      	mov	r0, r4
   18140:	f011 fd9a 	bl	29c78 <net_buf_id>
   18144:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18148:	eb05 0380 	add.w	r3, r5, r0, lsl #2
   1814c:	f8c3 8008 	str.w	r8, [r3, #8]
	cmd(buf)->state = NULL;
   18150:	4620      	mov	r0, r4
   18152:	f011 fd91 	bl	29c78 <net_buf_id>
   18156:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1815a:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   1815e:	f8c5 8004 	str.w	r8, [r5, #4]
	return net_buf_simple_add(&buf->b, len);
   18162:	2103      	movs	r1, #3
   18164:	4648      	mov	r0, r9
   18166:	f011 feb8 	bl	29eda <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   1816a:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   1816c:	7087      	strb	r7, [r0, #2]
}
   1816e:	4620      	mov	r0, r4
   18170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18174:	20000ba8 	.word	0x20000ba8
   18178:	20007b40 	.word	0x20007b40

0001817c <bt_hci_cmd_send_sync>:
{
   1817c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18180:	b088      	sub	sp, #32
   18182:	af00      	add	r7, sp, #0
   18184:	4606      	mov	r6, r0
   18186:	4615      	mov	r5, r2
	if (!buf) {
   18188:	460c      	mov	r4, r1
   1818a:	2900      	cmp	r1, #0
   1818c:	d06f      	beq.n	1826e <bt_hci_cmd_send_sync+0xf2>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1818e:	f107 0808 	add.w	r8, r7, #8
   18192:	2201      	movs	r2, #1
   18194:	2100      	movs	r1, #0
   18196:	4640      	mov	r0, r8
   18198:	f013 ffbd 	bl	2c116 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   1819c:	4620      	mov	r0, r4
   1819e:	f011 fd6b 	bl	29c78 <net_buf_id>
   181a2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   181a6:	4b49      	ldr	r3, [pc, #292]	; (182cc <bt_hci_cmd_send_sync+0x150>)
   181a8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   181ac:	f8c3 8008 	str.w	r8, [r3, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   181b0:	4620      	mov	r0, r4
   181b2:	f011 fe6e 	bl	29e92 <net_buf_ref>
   181b6:	4601      	mov	r1, r0
   181b8:	4845      	ldr	r0, [pc, #276]	; (182d0 <bt_hci_cmd_send_sync+0x154>)
   181ba:	f011 fe43 	bl	29e44 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   181be:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   181c2:	2300      	movs	r3, #0
   181c4:	4640      	mov	r0, r8
   181c6:	f00b ff4f 	bl	24068 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   181ca:	4680      	mov	r8, r0
   181cc:	2800      	cmp	r0, #0
   181ce:	d156      	bne.n	1827e <bt_hci_cmd_send_sync+0x102>
	status = cmd(buf)->status;
   181d0:	4620      	mov	r0, r4
   181d2:	f011 fd51 	bl	29c78 <net_buf_id>
   181d6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   181da:	4b3c      	ldr	r3, [pc, #240]	; (182cc <bt_hci_cmd_send_sync+0x150>)
   181dc:	f813 8020 	ldrb.w	r8, [r3, r0, lsl #2]
	if (status) {
   181e0:	f1b8 0f00 	cmp.w	r8, #0
   181e4:	d066      	beq.n	182b4 <bt_hci_cmd_send_sync+0x138>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   181e6:	466d      	mov	r5, sp
   181e8:	b088      	sub	sp, #32
   181ea:	466b      	mov	r3, sp
   181ec:	f113 0210 	adds.w	r2, r3, #16
   181f0:	d057      	beq.n	182a2 <bt_hci_cmd_send_sync+0x126>
   181f2:	2110      	movs	r1, #16
   181f4:	b16a      	cbz	r2, 18212 <bt_hci_cmd_send_sync+0x96>
   181f6:	4608      	mov	r0, r1
   181f8:	2904      	cmp	r1, #4
   181fa:	dd03      	ble.n	18204 <bt_hci_cmd_send_sync+0x88>
   181fc:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 182d4 <bt_hci_cmd_send_sync+0x158>
   18200:	f8c3 c014 	str.w	ip, [r3, #20]
   18204:	2808      	cmp	r0, #8
   18206:	dd00      	ble.n	1820a <bt_hci_cmd_send_sync+0x8e>
   18208:	619e      	str	r6, [r3, #24]
   1820a:	280c      	cmp	r0, #12
   1820c:	dd01      	ble.n	18212 <bt_hci_cmd_send_sync+0x96>
   1820e:	f8c3 801c 	str.w	r8, [r3, #28]
   18212:	290f      	cmp	r1, #15
   18214:	dd48      	ble.n	182a8 <bt_hci_cmd_send_sync+0x12c>
   18216:	2610      	movs	r6, #16
   18218:	b13a      	cbz	r2, 1822a <bt_hci_cmd_send_sync+0xae>
   1821a:	2104      	movs	r1, #4
   1821c:	7139      	strb	r1, [r7, #4]
   1821e:	2100      	movs	r1, #0
   18220:	7179      	strb	r1, [r7, #5]
   18222:	71b9      	strb	r1, [r7, #6]
   18224:	71f9      	strb	r1, [r7, #7]
   18226:	6878      	ldr	r0, [r7, #4]
   18228:	6118      	str	r0, [r3, #16]
   1822a:	2100      	movs	r1, #0
   1822c:	f36f 0100 	bfc	r1, #0, #1
   18230:	f36f 0141 	bfc	r1, #1, #1
   18234:	f36f 0182 	bfc	r1, #2, #1
   18238:	f36f 01c5 	bfc	r1, #3, #3
   1823c:	2302      	movs	r3, #2
   1823e:	f363 1188 	bfi	r1, r3, #6, #3
   18242:	f406 737d 	and.w	r3, r6, #1012	; 0x3f4
   18246:	f363 2152 	bfi	r1, r3, #9, #10
   1824a:	f36f 41de 	bfc	r1, #19, #12
   1824e:	f36f 71df 	bfc	r1, #31, #1
   18252:	2300      	movs	r3, #0
   18254:	4820      	ldr	r0, [pc, #128]	; (182d8 <bt_hci_cmd_send_sync+0x15c>)
   18256:	f00e fcfe 	bl	26c56 <z_impl_z_log_msg_static_create>
   1825a:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   1825c:	4620      	mov	r0, r4
   1825e:	f011 fdf5 	bl	29e4c <net_buf_unref>
		switch (status) {
   18262:	f1b8 0f09 	cmp.w	r8, #9
   18266:	d022      	beq.n	182ae <bt_hci_cmd_send_sync+0x132>
			return -EIO;
   18268:	f06f 0004 	mvn.w	r0, #4
   1826c:	e025      	b.n	182ba <bt_hci_cmd_send_sync+0x13e>
		buf = bt_hci_cmd_create(opcode, 0);
   1826e:	f7ff ff47 	bl	18100 <bt_hci_cmd_create>
		if (!buf) {
   18272:	4604      	mov	r4, r0
   18274:	2800      	cmp	r0, #0
   18276:	d18a      	bne.n	1818e <bt_hci_cmd_send_sync+0x12>
			return -ENOBUFS;
   18278:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1827c:	e01d      	b.n	182ba <bt_hci_cmd_send_sync+0x13e>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   1827e:	f240 1349 	movw	r3, #329	; 0x149
   18282:	4a16      	ldr	r2, [pc, #88]	; (182dc <bt_hci_cmd_send_sync+0x160>)
   18284:	4916      	ldr	r1, [pc, #88]	; (182e0 <bt_hci_cmd_send_sync+0x164>)
   18286:	4817      	ldr	r0, [pc, #92]	; (182e4 <bt_hci_cmd_send_sync+0x168>)
   18288:	f00e f9cc 	bl	26624 <assert_print>
   1828c:	4641      	mov	r1, r8
   1828e:	4816      	ldr	r0, [pc, #88]	; (182e8 <bt_hci_cmd_send_sync+0x16c>)
   18290:	f00e f9c8 	bl	26624 <assert_print>
   18294:	4040      	eors	r0, r0
   18296:	f380 8811 	msr	BASEPRI, r0
   1829a:	f04f 0003 	mov.w	r0, #3
   1829e:	df02      	svc	2
   182a0:	e796      	b.n	181d0 <bt_hci_cmd_send_sync+0x54>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   182a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   182a6:	e7a5      	b.n	181f4 <bt_hci_cmd_send_sync+0x78>
   182a8:	f06f 061b 	mvn.w	r6, #27
   182ac:	e7b4      	b.n	18218 <bt_hci_cmd_send_sync+0x9c>
			return -ECONNREFUSED;
   182ae:	f06f 006e 	mvn.w	r0, #110	; 0x6e
   182b2:	e002      	b.n	182ba <bt_hci_cmd_send_sync+0x13e>
	if (rsp) {
   182b4:	b12d      	cbz	r5, 182c2 <bt_hci_cmd_send_sync+0x146>
		*rsp = buf;
   182b6:	602c      	str	r4, [r5, #0]
	return 0;
   182b8:	2000      	movs	r0, #0
}
   182ba:	3720      	adds	r7, #32
   182bc:	46bd      	mov	sp, r7
   182be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   182c2:	4620      	mov	r0, r4
   182c4:	f011 fdc2 	bl	29e4c <net_buf_unref>
	return 0;
   182c8:	2000      	movs	r0, #0
   182ca:	e7f6      	b.n	182ba <bt_hci_cmd_send_sync+0x13e>
   182cc:	20007b40 	.word	0x20007b40
   182d0:	200004ac 	.word	0x200004ac
   182d4:	0002e564 	.word	0x0002e564
   182d8:	0002d0bc 	.word	0x0002d0bc
   182dc:	0002e41c 	.word	0x0002e41c
   182e0:	0002e538 	.word	0x0002e538
   182e4:	0002e46c 	.word	0x0002e46c
   182e8:	0002e544 	.word	0x0002e544

000182ec <common_init>:
{
   182ec:	b510      	push	{r4, lr}
   182ee:	b082      	sub	sp, #8
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   182f0:	4b22      	ldr	r3, [pc, #136]	; (1837c <common_init+0x90>)
   182f2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   182f6:	689b      	ldr	r3, [r3, #8]
   182f8:	f013 0f01 	tst.w	r3, #1
   182fc:	d10d      	bne.n	1831a <common_init+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   182fe:	aa01      	add	r2, sp, #4
   18300:	2100      	movs	r1, #0
   18302:	f640 4003 	movw	r0, #3075	; 0xc03
   18306:	f7ff ff39 	bl	1817c <bt_hci_cmd_send_sync>
		if (err) {
   1830a:	4604      	mov	r4, r0
   1830c:	b968      	cbnz	r0, 1832a <common_init+0x3e>
		hci_reset_complete(rsp);
   1830e:	9801      	ldr	r0, [sp, #4]
   18310:	f7fe fef0 	bl	170f4 <hci_reset_complete>
		net_buf_unref(rsp);
   18314:	9801      	ldr	r0, [sp, #4]
   18316:	f011 fd99 	bl	29e4c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   1831a:	aa01      	add	r2, sp, #4
   1831c:	2100      	movs	r1, #0
   1831e:	f241 0003 	movw	r0, #4099	; 0x1003
   18322:	f7ff ff2b 	bl	1817c <bt_hci_cmd_send_sync>
	if (err) {
   18326:	4604      	mov	r4, r0
   18328:	b110      	cbz	r0, 18330 <common_init+0x44>
}
   1832a:	4620      	mov	r0, r4
   1832c:	b002      	add	sp, #8
   1832e:	bd10      	pop	{r4, pc}
	read_local_features_complete(rsp);
   18330:	9801      	ldr	r0, [sp, #4]
   18332:	f7fe fefb 	bl	1712c <read_local_features_complete>
	net_buf_unref(rsp);
   18336:	9801      	ldr	r0, [sp, #4]
   18338:	f011 fd88 	bl	29e4c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   1833c:	aa01      	add	r2, sp, #4
   1833e:	2100      	movs	r1, #0
   18340:	f241 0001 	movw	r0, #4097	; 0x1001
   18344:	f7ff ff1a 	bl	1817c <bt_hci_cmd_send_sync>
	if (err) {
   18348:	4604      	mov	r4, r0
   1834a:	2800      	cmp	r0, #0
   1834c:	d1ed      	bne.n	1832a <common_init+0x3e>
	read_local_ver_complete(rsp);
   1834e:	9801      	ldr	r0, [sp, #4]
   18350:	f7fe feae 	bl	170b0 <read_local_ver_complete>
	net_buf_unref(rsp);
   18354:	9801      	ldr	r0, [sp, #4]
   18356:	f011 fd79 	bl	29e4c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   1835a:	aa01      	add	r2, sp, #4
   1835c:	2100      	movs	r1, #0
   1835e:	f241 0002 	movw	r0, #4098	; 0x1002
   18362:	f7ff ff0b 	bl	1817c <bt_hci_cmd_send_sync>
	if (err) {
   18366:	4604      	mov	r4, r0
   18368:	2800      	cmp	r0, #0
   1836a:	d1de      	bne.n	1832a <common_init+0x3e>
	read_supported_commands_complete(rsp);
   1836c:	9801      	ldr	r0, [sp, #4]
   1836e:	f7fe fee7 	bl	17140 <read_supported_commands_complete>
	net_buf_unref(rsp);
   18372:	9801      	ldr	r0, [sp, #4]
   18374:	f011 fd6a 	bl	29e4c <net_buf_unref>
	return 0;
   18378:	e7d7      	b.n	1832a <common_init+0x3e>
   1837a:	bf00      	nop
   1837c:	20000370 	.word	0x20000370

00018380 <hci_le_read_max_data_len>:
{
   18380:	b570      	push	{r4, r5, r6, lr}
   18382:	b088      	sub	sp, #32
   18384:	4605      	mov	r5, r0
   18386:	460c      	mov	r4, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   18388:	aa01      	add	r2, sp, #4
   1838a:	2100      	movs	r1, #0
   1838c:	f242 002f 	movw	r0, #8239	; 0x202f
   18390:	f7ff fef4 	bl	1817c <bt_hci_cmd_send_sync>
	if (err) {
   18394:	4606      	mov	r6, r0
   18396:	b960      	cbnz	r0, 183b2 <hci_le_read_max_data_len+0x32>
	rp = (void *)rsp->data;
   18398:	9801      	ldr	r0, [sp, #4]
   1839a:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   1839c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   183a0:	802a      	strh	r2, [r5, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   183a2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   183a6:	8023      	strh	r3, [r4, #0]
	net_buf_unref(rsp);
   183a8:	f011 fd50 	bl	29e4c <net_buf_unref>
}
   183ac:	4630      	mov	r0, r6
   183ae:	b008      	add	sp, #32
   183b0:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("Failed to read DLE max data len");
   183b2:	4b13      	ldr	r3, [pc, #76]	; (18400 <hci_le_read_max_data_len+0x80>)
   183b4:	9307      	str	r3, [sp, #28]
   183b6:	2302      	movs	r3, #2
   183b8:	f88d 3000 	strb.w	r3, [sp]
   183bc:	2300      	movs	r3, #0
   183be:	f88d 3001 	strb.w	r3, [sp, #1]
   183c2:	f88d 3002 	strb.w	r3, [sp, #2]
   183c6:	f88d 3003 	strb.w	r3, [sp, #3]
   183ca:	9a00      	ldr	r2, [sp, #0]
   183cc:	9206      	str	r2, [sp, #24]
   183ce:	4619      	mov	r1, r3
   183d0:	f363 0100 	bfi	r1, r3, #0, #1
   183d4:	f363 0141 	bfi	r1, r3, #1, #1
   183d8:	f363 0182 	bfi	r1, r3, #2, #1
   183dc:	f363 01c5 	bfi	r1, r3, #3, #3
   183e0:	2201      	movs	r2, #1
   183e2:	f362 1188 	bfi	r1, r2, #6, #3
   183e6:	2208      	movs	r2, #8
   183e8:	f362 2152 	bfi	r1, r2, #9, #10
   183ec:	f363 41de 	bfi	r1, r3, #19, #12
   183f0:	f363 71df 	bfi	r1, r3, #31, #1
   183f4:	aa06      	add	r2, sp, #24
   183f6:	4803      	ldr	r0, [pc, #12]	; (18404 <hci_le_read_max_data_len+0x84>)
   183f8:	f00e fc2d 	bl	26c56 <z_impl_z_log_msg_static_create>
		return err;
   183fc:	e7d6      	b.n	183ac <hci_le_read_max_data_len+0x2c>
   183fe:	bf00      	nop
   18400:	0002e580 	.word	0x0002e580
   18404:	0002d0bc 	.word	0x0002d0bc

00018408 <le_set_event_mask>:
{
   18408:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   1840a:	2108      	movs	r1, #8
   1840c:	f242 0001 	movw	r0, #8193	; 0x2001
   18410:	f7ff fe76 	bl	18100 <bt_hci_cmd_create>
	if (!buf) {
   18414:	b330      	cbz	r0, 18464 <le_set_event_mask+0x5c>
   18416:	4604      	mov	r4, r0
   18418:	2108      	movs	r1, #8
   1841a:	300c      	adds	r0, #12
   1841c:	f011 fd5d 	bl	29eda <net_buf_simple_add>
   18420:	4602      	mov	r2, r0
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   18422:	4b12      	ldr	r3, [pc, #72]	; (1846c <le_set_event_mask+0x64>)
   18424:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   18428:	f013 0f02 	tst.w	r3, #2
   1842c:	d117      	bne.n	1845e <le_set_event_mask+0x56>
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   1842e:	200f      	movs	r0, #15
   18430:	2100      	movs	r1, #0
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   18432:	f013 0f20 	tst.w	r3, #32
   18436:	d001      	beq.n	1843c <le_set_event_mask+0x34>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   18438:	f040 0040 	orr.w	r0, r0, #64	; 0x40
		    (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
   1843c:	4b0b      	ldr	r3, [pc, #44]	; (1846c <le_set_event_mask+0x64>)
   1843e:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   18442:	f013 0f09 	tst.w	r3, #9
   18446:	d001      	beq.n	1844c <le_set_event_mask+0x44>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   18448:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
	sys_put_le64(mask, cp_mask->events);
   1844c:	f00f f915 	bl	2767a <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   18450:	2200      	movs	r2, #0
   18452:	4621      	mov	r1, r4
   18454:	f242 0001 	movw	r0, #8193	; 0x2001
   18458:	f7ff fe90 	bl	1817c <bt_hci_cmd_send_sync>
}
   1845c:	bd10      	pop	{r4, pc}
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   1845e:	202f      	movs	r0, #47	; 0x2f
   18460:	2100      	movs	r1, #0
   18462:	e7e6      	b.n	18432 <le_set_event_mask+0x2a>
		return -ENOBUFS;
   18464:	f06f 0068 	mvn.w	r0, #104	; 0x68
   18468:	e7f8      	b.n	1845c <le_set_event_mask+0x54>
   1846a:	bf00      	nop
   1846c:	20000370 	.word	0x20000370

00018470 <le_init>:
{
   18470:	b510      	push	{r4, lr}
   18472:	b08a      	sub	sp, #40	; 0x28
	if (!BT_FEAT_LE(bt_dev.features)) {
   18474:	4b5a      	ldr	r3, [pc, #360]	; (185e0 <le_init+0x170>)
   18476:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   1847a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1847e:	d00a      	beq.n	18496 <le_init+0x26>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   18480:	aa03      	add	r2, sp, #12
   18482:	2100      	movs	r1, #0
   18484:	f242 0003 	movw	r0, #8195	; 0x2003
   18488:	f7ff fe78 	bl	1817c <bt_hci_cmd_send_sync>
	if (err) {
   1848c:	4603      	mov	r3, r0
   1848e:	b350      	cbz	r0, 184e6 <le_init+0x76>
}
   18490:	4618      	mov	r0, r3
   18492:	b00a      	add	sp, #40	; 0x28
   18494:	bd10      	pop	{r4, pc}
		LOG_ERR("Non-LE capable controller detected!");
   18496:	4b53      	ldr	r3, [pc, #332]	; (185e4 <le_init+0x174>)
   18498:	9309      	str	r3, [sp, #36]	; 0x24
   1849a:	2302      	movs	r3, #2
   1849c:	f88d 3008 	strb.w	r3, [sp, #8]
   184a0:	2300      	movs	r3, #0
   184a2:	f88d 3009 	strb.w	r3, [sp, #9]
   184a6:	f88d 300a 	strb.w	r3, [sp, #10]
   184aa:	f88d 300b 	strb.w	r3, [sp, #11]
   184ae:	9a02      	ldr	r2, [sp, #8]
   184b0:	9208      	str	r2, [sp, #32]
   184b2:	4619      	mov	r1, r3
   184b4:	f363 0100 	bfi	r1, r3, #0, #1
   184b8:	f363 0141 	bfi	r1, r3, #1, #1
   184bc:	f363 0182 	bfi	r1, r3, #2, #1
   184c0:	f363 01c5 	bfi	r1, r3, #3, #3
   184c4:	2201      	movs	r2, #1
   184c6:	f362 1188 	bfi	r1, r2, #6, #3
   184ca:	2208      	movs	r2, #8
   184cc:	f362 2152 	bfi	r1, r2, #9, #10
   184d0:	f363 41de 	bfi	r1, r3, #19, #12
   184d4:	f363 71df 	bfi	r1, r3, #31, #1
   184d8:	aa08      	add	r2, sp, #32
   184da:	4843      	ldr	r0, [pc, #268]	; (185e8 <le_init+0x178>)
   184dc:	f00e fbbb 	bl	26c56 <z_impl_z_log_msg_static_create>
		return -ENODEV;
   184e0:	f06f 0312 	mvn.w	r3, #18
   184e4:	e7d4      	b.n	18490 <le_init+0x20>
	read_le_features_complete(rsp);
   184e6:	9803      	ldr	r0, [sp, #12]
   184e8:	f7fe fe34 	bl	17154 <read_le_features_complete>
	net_buf_unref(rsp);
   184ec:	9803      	ldr	r0, [sp, #12]
   184ee:	f011 fcad 	bl	29e4c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   184f2:	aa03      	add	r2, sp, #12
   184f4:	2100      	movs	r1, #0
   184f6:	f242 0002 	movw	r0, #8194	; 0x2002
   184fa:	f7ff fe3f 	bl	1817c <bt_hci_cmd_send_sync>
		if (err) {
   184fe:	4603      	mov	r3, r0
   18500:	2800      	cmp	r0, #0
   18502:	d1c5      	bne.n	18490 <le_init+0x20>
		le_read_buffer_size_complete(rsp);
   18504:	9803      	ldr	r0, [sp, #12]
   18506:	f7fe fe2f 	bl	17168 <le_read_buffer_size_complete>
		net_buf_unref(rsp);
   1850a:	9803      	ldr	r0, [sp, #12]
   1850c:	f011 fc9e 	bl	29e4c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   18510:	4b33      	ldr	r3, [pc, #204]	; (185e0 <le_init+0x170>)
   18512:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   18516:	f013 0f20 	tst.w	r3, #32
   1851a:	d032      	beq.n	18582 <le_init+0x112>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   1851c:	4b30      	ldr	r3, [pc, #192]	; (185e0 <le_init+0x170>)
   1851e:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   18522:	f013 0f08 	tst.w	r3, #8
   18526:	d144      	bne.n	185b2 <le_init+0x142>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   18528:	4b2d      	ldr	r3, [pc, #180]	; (185e0 <le_init+0x170>)
   1852a:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   1852e:	f013 0f20 	tst.w	r3, #32
   18532:	d022      	beq.n	1857a <le_init+0x10a>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   18534:	a902      	add	r1, sp, #8
   18536:	f10d 0006 	add.w	r0, sp, #6
   1853a:	f7ff ff21 	bl	18380 <hci_le_read_max_data_len>
		if (err) {
   1853e:	4603      	mov	r3, r0
   18540:	2800      	cmp	r0, #0
   18542:	d1a5      	bne.n	18490 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   18544:	2104      	movs	r1, #4
   18546:	f242 0024 	movw	r0, #8228	; 0x2024
   1854a:	f7ff fdd9 	bl	18100 <bt_hci_cmd_create>
		if (!buf) {
   1854e:	4604      	mov	r4, r0
   18550:	2800      	cmp	r0, #0
   18552:	d03f      	beq.n	185d4 <le_init+0x164>
   18554:	2104      	movs	r1, #4
   18556:	300c      	adds	r0, #12
   18558:	f011 fcbf 	bl	29eda <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   1855c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   18560:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   18562:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   18566:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   18568:	2200      	movs	r2, #0
   1856a:	4621      	mov	r1, r4
   1856c:	f242 0024 	movw	r0, #8228	; 0x2024
   18570:	f7ff fe04 	bl	1817c <bt_hci_cmd_send_sync>
		if (err) {
   18574:	4603      	mov	r3, r0
   18576:	2800      	cmp	r0, #0
   18578:	d18a      	bne.n	18490 <le_init+0x20>
	return  le_set_event_mask();
   1857a:	f7ff ff45 	bl	18408 <le_set_event_mask>
   1857e:	4603      	mov	r3, r0
   18580:	e786      	b.n	18490 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   18582:	2102      	movs	r1, #2
   18584:	f640 406d 	movw	r0, #3181	; 0xc6d
   18588:	f7ff fdba 	bl	18100 <bt_hci_cmd_create>
		if (!buf) {
   1858c:	4604      	mov	r4, r0
   1858e:	b320      	cbz	r0, 185da <le_init+0x16a>
   18590:	2102      	movs	r1, #2
   18592:	300c      	adds	r0, #12
   18594:	f011 fca1 	bl	29eda <net_buf_simple_add>
		cp_le->le = 0x01;
   18598:	2301      	movs	r3, #1
   1859a:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   1859c:	2200      	movs	r2, #0
   1859e:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   185a0:	4621      	mov	r1, r4
   185a2:	f640 406d 	movw	r0, #3181	; 0xc6d
   185a6:	f7ff fde9 	bl	1817c <bt_hci_cmd_send_sync>
		if (err) {
   185aa:	4603      	mov	r3, r0
   185ac:	2800      	cmp	r0, #0
   185ae:	d0b5      	beq.n	1851c <le_init+0xac>
   185b0:	e76e      	b.n	18490 <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   185b2:	aa03      	add	r2, sp, #12
   185b4:	2100      	movs	r1, #0
   185b6:	f242 001c 	movw	r0, #8220	; 0x201c
   185ba:	f7ff fddf 	bl	1817c <bt_hci_cmd_send_sync>
		if (err) {
   185be:	4603      	mov	r3, r0
   185c0:	2800      	cmp	r0, #0
   185c2:	f47f af65 	bne.w	18490 <le_init+0x20>
		le_read_supp_states_complete(rsp);
   185c6:	9803      	ldr	r0, [sp, #12]
   185c8:	f7fe fd88 	bl	170dc <le_read_supp_states_complete>
		net_buf_unref(rsp);
   185cc:	9803      	ldr	r0, [sp, #12]
   185ce:	f011 fc3d 	bl	29e4c <net_buf_unref>
   185d2:	e7a9      	b.n	18528 <le_init+0xb8>
			return -ENOBUFS;
   185d4:	f06f 0368 	mvn.w	r3, #104	; 0x68
   185d8:	e75a      	b.n	18490 <le_init+0x20>
			return -ENOBUFS;
   185da:	f06f 0368 	mvn.w	r3, #104	; 0x68
   185de:	e757      	b.n	18490 <le_init+0x20>
   185e0:	20000370 	.word	0x20000370
   185e4:	0002e5a0 	.word	0x0002e5a0
   185e8:	0002d0bc 	.word	0x0002d0bc

000185ec <bt_br_init>:
{
   185ec:	b510      	push	{r4, lr}
   185ee:	b082      	sub	sp, #8
	if (bt_dev.le.acl_mtu) {
   185f0:	4b0b      	ldr	r3, [pc, #44]	; (18620 <bt_br_init+0x34>)
   185f2:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   185f6:	b11b      	cbz	r3, 18600 <bt_br_init+0x14>
		return 0;
   185f8:	2400      	movs	r4, #0
}
   185fa:	4620      	mov	r0, r4
   185fc:	b002      	add	sp, #8
   185fe:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   18600:	aa01      	add	r2, sp, #4
   18602:	2100      	movs	r1, #0
   18604:	f241 0005 	movw	r0, #4101	; 0x1005
   18608:	f7ff fdb8 	bl	1817c <bt_hci_cmd_send_sync>
	if (err) {
   1860c:	4604      	mov	r4, r0
   1860e:	2800      	cmp	r0, #0
   18610:	d1f3      	bne.n	185fa <bt_br_init+0xe>
	read_buffer_size_complete(rsp);
   18612:	9801      	ldr	r0, [sp, #4]
   18614:	f7fe fdbc 	bl	17190 <read_buffer_size_complete>
	net_buf_unref(rsp);
   18618:	9801      	ldr	r0, [sp, #4]
   1861a:	f011 fc17 	bl	29e4c <net_buf_unref>
	return 0;
   1861e:	e7ec      	b.n	185fa <bt_br_init+0xe>
   18620:	20000370 	.word	0x20000370

00018624 <set_event_mask>:
{
   18624:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   18626:	2108      	movs	r1, #8
   18628:	f640 4001 	movw	r0, #3073	; 0xc01
   1862c:	f7ff fd68 	bl	18100 <bt_hci_cmd_create>
	if (!buf) {
   18630:	b188      	cbz	r0, 18656 <set_event_mask+0x32>
   18632:	4604      	mov	r4, r0
   18634:	2108      	movs	r1, #8
   18636:	300c      	adds	r0, #12
   18638:	f011 fc4f 	bl	29eda <net_buf_simple_add>
   1863c:	4602      	mov	r2, r0
	sys_put_le64(mask, ev->events);
   1863e:	4807      	ldr	r0, [pc, #28]	; (1865c <set_event_mask+0x38>)
   18640:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   18644:	f00f f819 	bl	2767a <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   18648:	2200      	movs	r2, #0
   1864a:	4621      	mov	r1, r4
   1864c:	f640 4001 	movw	r0, #3073	; 0xc01
   18650:	f7ff fd94 	bl	1817c <bt_hci_cmd_send_sync>
}
   18654:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
   18656:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1865a:	e7fb      	b.n	18654 <set_event_mask+0x30>
   1865c:	02008810 	.word	0x02008810

00018660 <hci_vs_init>:
{
   18660:	b510      	push	{r4, lr}
   18662:	b094      	sub	sp, #80	; 0x50
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   18664:	aa01      	add	r2, sp, #4
   18666:	2100      	movs	r1, #0
   18668:	f64f 4001 	movw	r0, #64513	; 0xfc01
   1866c:	f7ff fd86 	bl	1817c <bt_hci_cmd_send_sync>
	if (err) {
   18670:	bb60      	cbnz	r0, 186cc <hci_vs_init+0x6c>
	net_buf_unref(rsp);
   18672:	9801      	ldr	r0, [sp, #4]
   18674:	f011 fbea 	bl	29e4c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   18678:	aa01      	add	r2, sp, #4
   1867a:	2100      	movs	r1, #0
   1867c:	f64f 4002 	movw	r0, #64514	; 0xfc02
   18680:	f7ff fd7c 	bl	1817c <bt_hci_cmd_send_sync>
	if (err) {
   18684:	2800      	cmp	r0, #0
   18686:	d147      	bne.n	18718 <hci_vs_init+0xb8>
	rp.cmds = (void *)rsp->data;
   18688:	9b01      	ldr	r3, [sp, #4]
   1868a:	68d9      	ldr	r1, [r3, #12]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   1868c:	4c47      	ldr	r4, [pc, #284]	; (187ac <hci_vs_init+0x14c>)
   1868e:	2202      	movs	r2, #2
   18690:	3101      	adds	r1, #1
   18692:	4620      	mov	r0, r4
   18694:	f00e ff1a 	bl	274cc <memcpy>
	net_buf_unref(rsp);
   18698:	9801      	ldr	r0, [sp, #4]
   1869a:	f011 fbd7 	bl	29e4c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   1869e:	7823      	ldrb	r3, [r4, #0]
   186a0:	f013 0f04 	tst.w	r3, #4
   186a4:	d036      	beq.n	18714 <hci_vs_init+0xb4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   186a6:	aa01      	add	r2, sp, #4
   186a8:	2100      	movs	r1, #0
   186aa:	f64f 4003 	movw	r0, #64515	; 0xfc03
   186ae:	f7ff fd65 	bl	1817c <bt_hci_cmd_send_sync>
		if (err) {
   186b2:	2800      	cmp	r0, #0
   186b4:	d155      	bne.n	18762 <hci_vs_init+0x102>
		rp.feat = (void *)rsp->data;
   186b6:	9b01      	ldr	r3, [sp, #4]
   186b8:	68d9      	ldr	r1, [r3, #12]
		memcpy(bt_dev.vs_features, rp.feat->features,
   186ba:	2201      	movs	r2, #1
   186bc:	4411      	add	r1, r2
   186be:	483c      	ldr	r0, [pc, #240]	; (187b0 <hci_vs_init+0x150>)
   186c0:	f00e ff04 	bl	274cc <memcpy>
		net_buf_unref(rsp);
   186c4:	9801      	ldr	r0, [sp, #4]
   186c6:	f011 fbc1 	bl	29e4c <net_buf_unref>
   186ca:	e023      	b.n	18714 <hci_vs_init+0xb4>
		LOG_WRN("Vendor HCI extensions not available");
   186cc:	4b39      	ldr	r3, [pc, #228]	; (187b4 <hci_vs_init+0x154>)
   186ce:	9313      	str	r3, [sp, #76]	; 0x4c
   186d0:	2202      	movs	r2, #2
   186d2:	f88d 2000 	strb.w	r2, [sp]
   186d6:	2300      	movs	r3, #0
   186d8:	f88d 3001 	strb.w	r3, [sp, #1]
   186dc:	f88d 3002 	strb.w	r3, [sp, #2]
   186e0:	f88d 3003 	strb.w	r3, [sp, #3]
   186e4:	9900      	ldr	r1, [sp, #0]
   186e6:	9112      	str	r1, [sp, #72]	; 0x48
   186e8:	4619      	mov	r1, r3
   186ea:	f363 0100 	bfi	r1, r3, #0, #1
   186ee:	f363 0141 	bfi	r1, r3, #1, #1
   186f2:	f363 0182 	bfi	r1, r3, #2, #1
   186f6:	f363 01c5 	bfi	r1, r3, #3, #3
   186fa:	f362 1188 	bfi	r1, r2, #6, #3
   186fe:	2208      	movs	r2, #8
   18700:	f362 2152 	bfi	r1, r2, #9, #10
   18704:	f363 41de 	bfi	r1, r3, #19, #12
   18708:	f363 71df 	bfi	r1, r3, #31, #1
   1870c:	aa12      	add	r2, sp, #72	; 0x48
   1870e:	482a      	ldr	r0, [pc, #168]	; (187b8 <hci_vs_init+0x158>)
   18710:	f00e faa1 	bl	26c56 <z_impl_z_log_msg_static_create>
}
   18714:	b014      	add	sp, #80	; 0x50
   18716:	bd10      	pop	{r4, pc}
		LOG_WRN("Failed to read supported vendor commands");
   18718:	4b28      	ldr	r3, [pc, #160]	; (187bc <hci_vs_init+0x15c>)
   1871a:	930d      	str	r3, [sp, #52]	; 0x34
   1871c:	2202      	movs	r2, #2
   1871e:	f88d 2000 	strb.w	r2, [sp]
   18722:	2300      	movs	r3, #0
   18724:	f88d 3001 	strb.w	r3, [sp, #1]
   18728:	f88d 3002 	strb.w	r3, [sp, #2]
   1872c:	f88d 3003 	strb.w	r3, [sp, #3]
   18730:	9900      	ldr	r1, [sp, #0]
   18732:	910c      	str	r1, [sp, #48]	; 0x30
   18734:	4619      	mov	r1, r3
   18736:	f363 0100 	bfi	r1, r3, #0, #1
   1873a:	f363 0141 	bfi	r1, r3, #1, #1
   1873e:	f363 0182 	bfi	r1, r3, #2, #1
   18742:	f363 01c5 	bfi	r1, r3, #3, #3
   18746:	f362 1188 	bfi	r1, r2, #6, #3
   1874a:	2208      	movs	r2, #8
   1874c:	f362 2152 	bfi	r1, r2, #9, #10
   18750:	f363 41de 	bfi	r1, r3, #19, #12
   18754:	f363 71df 	bfi	r1, r3, #31, #1
   18758:	aa0c      	add	r2, sp, #48	; 0x30
   1875a:	4817      	ldr	r0, [pc, #92]	; (187b8 <hci_vs_init+0x158>)
   1875c:	f00e fa7b 	bl	26c56 <z_impl_z_log_msg_static_create>
		return;
   18760:	e7d8      	b.n	18714 <hci_vs_init+0xb4>
			LOG_WRN("Failed to read supported vendor features");
   18762:	4b17      	ldr	r3, [pc, #92]	; (187c0 <hci_vs_init+0x160>)
   18764:	9307      	str	r3, [sp, #28]
   18766:	2202      	movs	r2, #2
   18768:	f88d 2000 	strb.w	r2, [sp]
   1876c:	2300      	movs	r3, #0
   1876e:	f88d 3001 	strb.w	r3, [sp, #1]
   18772:	f88d 3002 	strb.w	r3, [sp, #2]
   18776:	f88d 3003 	strb.w	r3, [sp, #3]
   1877a:	9900      	ldr	r1, [sp, #0]
   1877c:	9106      	str	r1, [sp, #24]
   1877e:	4619      	mov	r1, r3
   18780:	f363 0100 	bfi	r1, r3, #0, #1
   18784:	f363 0141 	bfi	r1, r3, #1, #1
   18788:	f363 0182 	bfi	r1, r3, #2, #1
   1878c:	f363 01c5 	bfi	r1, r3, #3, #3
   18790:	f362 1188 	bfi	r1, r2, #6, #3
   18794:	2208      	movs	r2, #8
   18796:	f362 2152 	bfi	r1, r2, #9, #10
   1879a:	f363 41de 	bfi	r1, r3, #19, #12
   1879e:	f363 71df 	bfi	r1, r3, #31, #1
   187a2:	aa06      	add	r2, sp, #24
   187a4:	4804      	ldr	r0, [pc, #16]	; (187b8 <hci_vs_init+0x158>)
   187a6:	f00e fa56 	bl	26c56 <z_impl_z_log_msg_static_create>
			return;
   187aa:	e7b3      	b.n	18714 <hci_vs_init+0xb4>
   187ac:	20000429 	.word	0x20000429
   187b0:	20000428 	.word	0x20000428
   187b4:	0002e5c4 	.word	0x0002e5c4
   187b8:	0002d0bc 	.word	0x0002d0bc
   187bc:	0002e5e8 	.word	0x0002e5e8
   187c0:	0002e614 	.word	0x0002e614

000187c4 <hci_init>:
{
   187c4:	b500      	push	{lr}
   187c6:	b089      	sub	sp, #36	; 0x24
	err = common_init();
   187c8:	f7ff fd90 	bl	182ec <common_init>
	if (err) {
   187cc:	4603      	mov	r3, r0
   187ce:	b118      	cbz	r0, 187d8 <hci_init+0x14>
}
   187d0:	4618      	mov	r0, r3
   187d2:	b009      	add	sp, #36	; 0x24
   187d4:	f85d fb04 	ldr.w	pc, [sp], #4
	err = le_init();
   187d8:	f7ff fe4a 	bl	18470 <le_init>
	if (err) {
   187dc:	4603      	mov	r3, r0
   187de:	2800      	cmp	r0, #0
   187e0:	d1f6      	bne.n	187d0 <hci_init+0xc>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   187e2:	4b21      	ldr	r3, [pc, #132]	; (18868 <hci_init+0xa4>)
   187e4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   187e8:	f013 0f20 	tst.w	r3, #32
   187ec:	d00e      	beq.n	1880c <hci_init+0x48>
	else if (!bt_dev.le.acl_mtu) {
   187ee:	4b1e      	ldr	r3, [pc, #120]	; (18868 <hci_init+0xa4>)
   187f0:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   187f4:	b183      	cbz	r3, 18818 <hci_init+0x54>
	err = set_event_mask();
   187f6:	f7ff ff15 	bl	18624 <set_event_mask>
	if (err) {
   187fa:	4603      	mov	r3, r0
   187fc:	2800      	cmp	r0, #0
   187fe:	d1e7      	bne.n	187d0 <hci_init+0xc>
	hci_vs_init();
   18800:	f7ff ff2e 	bl	18660 <hci_vs_init>
	err = bt_id_init();
   18804:	f001 fb3e 	bl	19e84 <bt_id_init>
   18808:	4603      	mov	r3, r0
	if (err) {
   1880a:	e7e1      	b.n	187d0 <hci_init+0xc>
		err = bt_br_init();
   1880c:	f7ff feee 	bl	185ec <bt_br_init>
		if (err) {
   18810:	4603      	mov	r3, r0
   18812:	2800      	cmp	r0, #0
   18814:	d0ef      	beq.n	187f6 <hci_init+0x32>
   18816:	e7db      	b.n	187d0 <hci_init+0xc>
		LOG_ERR("ACL BR/EDR buffers not initialized");
   18818:	4b14      	ldr	r3, [pc, #80]	; (1886c <hci_init+0xa8>)
   1881a:	9307      	str	r3, [sp, #28]
   1881c:	2302      	movs	r3, #2
   1881e:	f88d 3004 	strb.w	r3, [sp, #4]
   18822:	2300      	movs	r3, #0
   18824:	f88d 3005 	strb.w	r3, [sp, #5]
   18828:	f88d 3006 	strb.w	r3, [sp, #6]
   1882c:	f88d 3007 	strb.w	r3, [sp, #7]
   18830:	9a01      	ldr	r2, [sp, #4]
   18832:	9206      	str	r2, [sp, #24]
   18834:	4619      	mov	r1, r3
   18836:	f363 0100 	bfi	r1, r3, #0, #1
   1883a:	f363 0141 	bfi	r1, r3, #1, #1
   1883e:	f363 0182 	bfi	r1, r3, #2, #1
   18842:	f363 01c5 	bfi	r1, r3, #3, #3
   18846:	2201      	movs	r2, #1
   18848:	f362 1188 	bfi	r1, r2, #6, #3
   1884c:	2208      	movs	r2, #8
   1884e:	f362 2152 	bfi	r1, r2, #9, #10
   18852:	f363 41de 	bfi	r1, r3, #19, #12
   18856:	f363 71df 	bfi	r1, r3, #31, #1
   1885a:	aa06      	add	r2, sp, #24
   1885c:	4804      	ldr	r0, [pc, #16]	; (18870 <hci_init+0xac>)
   1885e:	f00e f9fa 	bl	26c56 <z_impl_z_log_msg_static_create>
		return -EIO;
   18862:	f06f 0304 	mvn.w	r3, #4
   18866:	e7b3      	b.n	187d0 <hci_init+0xc>
   18868:	20000370 	.word	0x20000370
   1886c:	0002e640 	.word	0x0002e640
   18870:	0002d0bc 	.word	0x0002d0bc

00018874 <bt_le_create_conn_legacy>:
{
   18874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18878:	b086      	sub	sp, #24
   1887a:	4604      	mov	r4, r0
		use_filter = atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT);
   1887c:	2100      	movs	r1, #0
   1887e:	3004      	adds	r0, #4
   18880:	f00e ff3e 	bl	27700 <atomic_test_bit>
   18884:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
   18886:	f10d 010b 	add.w	r1, sp, #11
   1888a:	f001 fac9 	bl	19e20 <bt_id_set_create_conn_own_addr>
	if (err) {
   1888e:	b110      	cbz	r0, 18896 <bt_le_create_conn_legacy+0x22>
}
   18890:	b006      	add	sp, #24
   18892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
   18896:	2119      	movs	r1, #25
   18898:	f242 000d 	movw	r0, #8205	; 0x200d
   1889c:	f7ff fc30 	bl	18100 <bt_hci_cmd_create>
	if (!buf) {
   188a0:	4607      	mov	r7, r0
   188a2:	2800      	cmp	r0, #0
   188a4:	d04b      	beq.n	1893e <bt_le_create_conn_legacy+0xca>
   188a6:	2119      	movs	r1, #25
   188a8:	300c      	adds	r0, #12
   188aa:	f011 fb16 	bl	29eda <net_buf_simple_add>
   188ae:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
   188b0:	2219      	movs	r2, #25
   188b2:	2100      	movs	r1, #0
   188b4:	f00e fe39 	bl	2752a <memset>
	cp->own_addr_type = own_addr_type;
   188b8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   188bc:	732b      	strb	r3, [r5, #12]
	if (use_filter) {
   188be:	b35e      	cbz	r6, 18918 <bt_le_create_conn_legacy+0xa4>
	memcpy(dst, src, sizeof(*dst));
   188c0:	2207      	movs	r2, #7
   188c2:	4920      	ldr	r1, [pc, #128]	; (18944 <bt_le_create_conn_legacy+0xd0>)
   188c4:	1d68      	adds	r0, r5, #5
   188c6:	f00e fe01 	bl	274cc <memcpy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_FILTER;
   188ca:	2301      	movs	r3, #1
   188cc:	712b      	strb	r3, [r5, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   188ce:	4a1e      	ldr	r2, [pc, #120]	; (18948 <bt_le_create_conn_legacy+0xd4>)
   188d0:	8993      	ldrh	r3, [r2, #12]
   188d2:	802b      	strh	r3, [r5, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   188d4:	89d3      	ldrh	r3, [r2, #14]
   188d6:	806b      	strh	r3, [r5, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   188d8:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
   188dc:	f8a5 300d 	strh.w	r3, [r5, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
   188e0:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
   188e4:	f8a5 300f 	strh.w	r3, [r5, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
   188e8:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   188ec:	f8a5 3011 	strh.w	r3, [r5, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
   188f0:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   188f4:	f8a5 3013 	strh.w	r3, [r5, #19]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   188f8:	2301      	movs	r3, #1
   188fa:	9300      	str	r3, [sp, #0]
   188fc:	230c      	movs	r3, #12
   188fe:	32cc      	adds	r2, #204	; 0xcc
   18900:	eb0d 0103 	add.w	r1, sp, r3
   18904:	4638      	mov	r0, r7
   18906:	f7ff fbe9 	bl	180dc <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   1890a:	2200      	movs	r2, #0
   1890c:	4639      	mov	r1, r7
   1890e:	f242 000d 	movw	r0, #8205	; 0x200d
   18912:	f7ff fc33 	bl	1817c <bt_hci_cmd_send_sync>
   18916:	e7bb      	b.n	18890 <bt_le_create_conn_legacy+0x1c>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
   18918:	f104 0888 	add.w	r8, r4, #136	; 0x88
		if (!bt_addr_le_eq(&conn->le.resp_addr, BT_ADDR_LE_ANY)) {
   1891c:	f104 0696 	add.w	r6, r4, #150	; 0x96
	return memcmp(a, b, sizeof(*a));
   18920:	2207      	movs	r2, #7
   18922:	4908      	ldr	r1, [pc, #32]	; (18944 <bt_le_create_conn_legacy+0xd0>)
   18924:	4630      	mov	r0, r6
   18926:	f00e fdbf 	bl	274a8 <memcmp>
   1892a:	b900      	cbnz	r0, 1892e <bt_le_create_conn_legacy+0xba>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
   1892c:	4646      	mov	r6, r8
	memcpy(dst, src, sizeof(*dst));
   1892e:	2207      	movs	r2, #7
   18930:	4631      	mov	r1, r6
   18932:	1d68      	adds	r0, r5, #5
   18934:	f00e fdca 	bl	274cc <memcpy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   18938:	2300      	movs	r3, #0
   1893a:	712b      	strb	r3, [r5, #4]
   1893c:	e7c7      	b.n	188ce <bt_le_create_conn_legacy+0x5a>
		return -ENOBUFS;
   1893e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   18942:	e7a5      	b.n	18890 <bt_le_create_conn_legacy+0x1c>
   18944:	0002e1f0 	.word	0x0002e1f0
   18948:	20000370 	.word	0x20000370

0001894c <bt_hci_le_rand>:
{
   1894c:	b570      	push	{r4, r5, r6, lr}
   1894e:	b082      	sub	sp, #8
   18950:	4606      	mov	r6, r0
   18952:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   18954:	4b12      	ldr	r3, [pc, #72]	; (189a0 <bt_hci_le_rand+0x54>)
   18956:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
   1895a:	2b00      	cmp	r3, #0
   1895c:	da1d      	bge.n	1899a <bt_hci_le_rand+0x4e>
	while (len > 0) {
   1895e:	b1c4      	cbz	r4, 18992 <bt_hci_le_rand+0x46>
		count = MIN(len, sizeof(rp->rand));
   18960:	4625      	mov	r5, r4
   18962:	2c08      	cmp	r4, #8
   18964:	bf28      	it	cs
   18966:	2508      	movcs	r5, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   18968:	aa01      	add	r2, sp, #4
   1896a:	2100      	movs	r1, #0
   1896c:	f242 0018 	movw	r0, #8216	; 0x2018
   18970:	f7ff fc04 	bl	1817c <bt_hci_cmd_send_sync>
		if (err) {
   18974:	4603      	mov	r3, r0
   18976:	b968      	cbnz	r0, 18994 <bt_hci_le_rand+0x48>
		rp = (void *)rsp->data;
   18978:	9b01      	ldr	r3, [sp, #4]
   1897a:	68d9      	ldr	r1, [r3, #12]
		memcpy(buffer, rp->rand, count);
   1897c:	462a      	mov	r2, r5
   1897e:	3101      	adds	r1, #1
   18980:	4630      	mov	r0, r6
   18982:	f00e fda3 	bl	274cc <memcpy>
		net_buf_unref(rsp);
   18986:	9801      	ldr	r0, [sp, #4]
   18988:	f011 fa60 	bl	29e4c <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   1898c:	442e      	add	r6, r5
		len -= count;
   1898e:	1b64      	subs	r4, r4, r5
   18990:	e7e5      	b.n	1895e <bt_hci_le_rand+0x12>
	return 0;
   18992:	2300      	movs	r3, #0
}
   18994:	4618      	mov	r0, r3
   18996:	b002      	add	sp, #8
   18998:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   1899a:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1899e:	e7f9      	b.n	18994 <bt_hci_le_rand+0x48>
   189a0:	20000370 	.word	0x20000370

000189a4 <le_conn_complete_cancel>:
{
   189a4:	b510      	push	{r4, lr}
   189a6:	b088      	sub	sp, #32
	conn = find_pending_connect(BT_HCI_ROLE_CENTRAL, NULL);
   189a8:	2100      	movs	r1, #0
   189aa:	4608      	mov	r0, r1
   189ac:	f7fe fcb2 	bl	17314 <find_pending_connect>
	if (!conn) {
   189b0:	b178      	cbz	r0, 189d2 <le_conn_complete_cancel+0x2e>
   189b2:	4604      	mov	r4, r0
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   189b4:	2302      	movs	r3, #2
   189b6:	7243      	strb	r3, [r0, #9]
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   189b8:	2100      	movs	r1, #0
   189ba:	3004      	adds	r0, #4
   189bc:	f00e fea0 	bl	27700 <atomic_test_bit>
   189c0:	b368      	cbz	r0, 18a1e <le_conn_complete_cancel+0x7a>
			bt_le_create_conn(conn);
   189c2:	4620      	mov	r0, r4
   189c4:	f00e ff17 	bl	277f6 <bt_le_create_conn>
	bt_conn_unref(conn);
   189c8:	4620      	mov	r0, r4
   189ca:	f00f f9c1 	bl	27d50 <bt_conn_unref>
}
   189ce:	b008      	add	sp, #32
   189d0:	bd10      	pop	{r4, pc}
		LOG_ERR("No pending central connection");
   189d2:	4b15      	ldr	r3, [pc, #84]	; (18a28 <le_conn_complete_cancel+0x84>)
   189d4:	9307      	str	r3, [sp, #28]
   189d6:	2302      	movs	r3, #2
   189d8:	f88d 3004 	strb.w	r3, [sp, #4]
   189dc:	2300      	movs	r3, #0
   189de:	f88d 3005 	strb.w	r3, [sp, #5]
   189e2:	f88d 3006 	strb.w	r3, [sp, #6]
   189e6:	f88d 3007 	strb.w	r3, [sp, #7]
   189ea:	9a01      	ldr	r2, [sp, #4]
   189ec:	9206      	str	r2, [sp, #24]
   189ee:	4619      	mov	r1, r3
   189f0:	f363 0100 	bfi	r1, r3, #0, #1
   189f4:	f363 0141 	bfi	r1, r3, #1, #1
   189f8:	f363 0182 	bfi	r1, r3, #2, #1
   189fc:	f363 01c5 	bfi	r1, r3, #3, #3
   18a00:	2201      	movs	r2, #1
   18a02:	f362 1188 	bfi	r1, r2, #6, #3
   18a06:	2208      	movs	r2, #8
   18a08:	f362 2152 	bfi	r1, r2, #9, #10
   18a0c:	f363 41de 	bfi	r1, r3, #19, #12
   18a10:	f363 71df 	bfi	r1, r3, #31, #1
   18a14:	aa06      	add	r2, sp, #24
   18a16:	4805      	ldr	r0, [pc, #20]	; (18a2c <le_conn_complete_cancel+0x88>)
   18a18:	f00e f91d 	bl	26c56 <z_impl_z_log_msg_static_create>
		return;
   18a1c:	e7d7      	b.n	189ce <le_conn_complete_cancel+0x2a>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   18a1e:	2100      	movs	r1, #0
   18a20:	4620      	mov	r0, r4
   18a22:	f002 f8cd 	bl	1abc0 <bt_conn_set_state>
   18a26:	e7cf      	b.n	189c8 <le_conn_complete_cancel+0x24>
   18a28:	0002e664 	.word	0x0002e664
   18a2c:	0002d0bc 	.word	0x0002d0bc

00018a30 <bt_le_create_conn_cancel>:
{
   18a30:	b530      	push	{r4, r5, lr}
   18a32:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   18a34:	2100      	movs	r1, #0
   18a36:	f242 000e 	movw	r0, #8206	; 0x200e
   18a3a:	f7ff fb61 	bl	18100 <bt_hci_cmd_create>
   18a3e:	4604      	mov	r4, r0
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   18a40:	2500      	movs	r5, #0
   18a42:	9500      	str	r5, [sp, #0]
   18a44:	230c      	movs	r3, #12
   18a46:	4a06      	ldr	r2, [pc, #24]	; (18a60 <bt_le_create_conn_cancel+0x30>)
   18a48:	eb0d 0103 	add.w	r1, sp, r3
   18a4c:	f7ff fb46 	bl	180dc <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
   18a50:	462a      	mov	r2, r5
   18a52:	4621      	mov	r1, r4
   18a54:	f242 000e 	movw	r0, #8206	; 0x200e
   18a58:	f7ff fb90 	bl	1817c <bt_hci_cmd_send_sync>
}
   18a5c:	b007      	add	sp, #28
   18a5e:	bd30      	pop	{r4, r5, pc}
   18a60:	2000043c 	.word	0x2000043c

00018a64 <conn_auto_initiate>:
	if (conn->state != BT_CONN_CONNECTED) {
   18a64:	7a83      	ldrb	r3, [r0, #10]
   18a66:	2b07      	cmp	r3, #7
   18a68:	d000      	beq.n	18a6c <conn_auto_initiate+0x8>
   18a6a:	4770      	bx	lr
{
   18a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   18a6e:	b085      	sub	sp, #20
   18a70:	af02      	add	r7, sp, #8
   18a72:	4604      	mov	r4, r0
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   18a74:	210d      	movs	r1, #13
   18a76:	3004      	adds	r0, #4
   18a78:	f00e fe42 	bl	27700 <atomic_test_bit>
   18a7c:	2800      	cmp	r0, #0
   18a7e:	d144      	bne.n	18b0a <conn_auto_initiate+0xa6>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   18a80:	78e3      	ldrb	r3, [r4, #3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   18a82:	b12b      	cbz	r3, 18a90 <conn_auto_initiate+0x2c>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   18a84:	4b7a      	ldr	r3, [pc, #488]	; (18c70 <conn_auto_initiate+0x20c>)
   18a86:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   18a8a:	f013 0f08 	tst.w	r3, #8
   18a8e:	d03c      	beq.n	18b0a <conn_auto_initiate+0xa6>
		err = hci_le_read_remote_features(conn);
   18a90:	4620      	mov	r0, r4
   18a92:	f00e fe97 	bl	277c4 <hci_le_read_remote_features>
		if (err) {
   18a96:	4606      	mov	r6, r0
   18a98:	b3b8      	cbz	r0, 18b0a <conn_auto_initiate+0xa6>
			LOG_ERR("Failed read remote features (%d)", err);
   18a9a:	466d      	mov	r5, sp
   18a9c:	b088      	sub	sp, #32
   18a9e:	ab02      	add	r3, sp, #8
   18aa0:	f113 0210 	adds.w	r2, r3, #16
   18aa4:	d04b      	beq.n	18b3e <conn_auto_initiate+0xda>
   18aa6:	210c      	movs	r1, #12
   18aa8:	b14a      	cbz	r2, 18abe <conn_auto_initiate+0x5a>
   18aaa:	4608      	mov	r0, r1
   18aac:	2904      	cmp	r1, #4
   18aae:	dd03      	ble.n	18ab8 <conn_auto_initiate+0x54>
   18ab0:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 18c74 <conn_auto_initiate+0x210>
   18ab4:	f8c3 c014 	str.w	ip, [r3, #20]
   18ab8:	2808      	cmp	r0, #8
   18aba:	dd00      	ble.n	18abe <conn_auto_initiate+0x5a>
   18abc:	619e      	str	r6, [r3, #24]
   18abe:	290b      	cmp	r1, #11
   18ac0:	dd40      	ble.n	18b44 <conn_auto_initiate+0xe0>
   18ac2:	f04f 0c0c 	mov.w	ip, #12
   18ac6:	b13a      	cbz	r2, 18ad8 <conn_auto_initiate+0x74>
   18ac8:	2103      	movs	r1, #3
   18aca:	7139      	strb	r1, [r7, #4]
   18acc:	2100      	movs	r1, #0
   18ace:	7179      	strb	r1, [r7, #5]
   18ad0:	71b9      	strb	r1, [r7, #6]
   18ad2:	71f9      	strb	r1, [r7, #7]
   18ad4:	6878      	ldr	r0, [r7, #4]
   18ad6:	6118      	str	r0, [r3, #16]
   18ad8:	2100      	movs	r1, #0
   18ada:	f36f 0100 	bfc	r1, #0, #1
   18ade:	f36f 0141 	bfc	r1, #1, #1
   18ae2:	f36f 0182 	bfc	r1, #2, #1
   18ae6:	f36f 01c5 	bfc	r1, #3, #3
   18aea:	2301      	movs	r3, #1
   18aec:	f363 1188 	bfi	r1, r3, #6, #3
   18af0:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   18af4:	f36c 2152 	bfi	r1, ip, #9, #10
   18af8:	f36f 41de 	bfc	r1, #19, #12
   18afc:	f36f 71df 	bfc	r1, #31, #1
   18b00:	2300      	movs	r3, #0
   18b02:	485d      	ldr	r0, [pc, #372]	; (18c78 <conn_auto_initiate+0x214>)
   18b04:	f00e f8a7 	bl	26c56 <z_impl_z_log_msg_static_create>
   18b08:	46ad      	mov	sp, r5
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
   18b0a:	4b59      	ldr	r3, [pc, #356]	; (18c70 <conn_auto_initiate+0x20c>)
   18b0c:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   18b10:	f013 0f01 	tst.w	r3, #1
   18b14:	d003      	beq.n	18b1e <conn_auto_initiate+0xba>
	    !skip_auto_phy_update_on_conn_establishment(conn)) {
   18b16:	4620      	mov	r0, r4
   18b18:	f00e fdef 	bl	276fa <skip_auto_phy_update_on_conn_establishment>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
   18b1c:	b1a8      	cbz	r0, 18b4a <conn_auto_initiate+0xe6>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   18b1e:	4b54      	ldr	r3, [pc, #336]	; (18c70 <conn_auto_initiate+0x20c>)
   18b20:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   18b24:	f013 0f20 	tst.w	r3, #32
   18b28:	d006      	beq.n	18b38 <conn_auto_initiate+0xd4>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   18b2a:	4b51      	ldr	r3, [pc, #324]	; (18c70 <conn_auto_initiate+0x20c>)
   18b2c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   18b30:	689b      	ldr	r3, [r3, #8]
   18b32:	f013 0f02 	tst.w	r3, #2
   18b36:	d150      	bne.n	18bda <conn_auto_initiate+0x176>
}
   18b38:	370c      	adds	r7, #12
   18b3a:	46bd      	mov	sp, r7
   18b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_ERR("Failed read remote features (%d)", err);
   18b3e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   18b42:	e7b1      	b.n	18aa8 <conn_auto_initiate+0x44>
   18b44:	f06f 0c1b 	mvn.w	ip, #27
   18b48:	e7bd      	b.n	18ac6 <conn_auto_initiate+0x62>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   18b4a:	2100      	movs	r1, #0
   18b4c:	9100      	str	r1, [sp, #0]
   18b4e:	2302      	movs	r3, #2
   18b50:	461a      	mov	r2, r3
   18b52:	4620      	mov	r0, r4
   18b54:	f00e fe8a 	bl	2786c <bt_le_set_phy>
		if (err) {
   18b58:	4605      	mov	r5, r0
   18b5a:	2800      	cmp	r0, #0
   18b5c:	d0df      	beq.n	18b1e <conn_auto_initiate+0xba>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   18b5e:	466e      	mov	r6, sp
   18b60:	b088      	sub	sp, #32
   18b62:	ab02      	add	r3, sp, #8
   18b64:	f113 0210 	adds.w	r2, r3, #16
   18b68:	d031      	beq.n	18bce <conn_auto_initiate+0x16a>
   18b6a:	210c      	movs	r1, #12
   18b6c:	b14a      	cbz	r2, 18b82 <conn_auto_initiate+0x11e>
   18b6e:	4608      	mov	r0, r1
   18b70:	2904      	cmp	r1, #4
   18b72:	dd03      	ble.n	18b7c <conn_auto_initiate+0x118>
   18b74:	f8df c104 	ldr.w	ip, [pc, #260]	; 18c7c <conn_auto_initiate+0x218>
   18b78:	f8c3 c014 	str.w	ip, [r3, #20]
   18b7c:	2808      	cmp	r0, #8
   18b7e:	dd00      	ble.n	18b82 <conn_auto_initiate+0x11e>
   18b80:	619d      	str	r5, [r3, #24]
   18b82:	290b      	cmp	r1, #11
   18b84:	dd26      	ble.n	18bd4 <conn_auto_initiate+0x170>
   18b86:	250c      	movs	r5, #12
   18b88:	b13a      	cbz	r2, 18b9a <conn_auto_initiate+0x136>
   18b8a:	2103      	movs	r1, #3
   18b8c:	7139      	strb	r1, [r7, #4]
   18b8e:	2100      	movs	r1, #0
   18b90:	7179      	strb	r1, [r7, #5]
   18b92:	71b9      	strb	r1, [r7, #6]
   18b94:	71f9      	strb	r1, [r7, #7]
   18b96:	6878      	ldr	r0, [r7, #4]
   18b98:	6118      	str	r0, [r3, #16]
   18b9a:	2100      	movs	r1, #0
   18b9c:	f36f 0100 	bfc	r1, #0, #1
   18ba0:	f36f 0141 	bfc	r1, #1, #1
   18ba4:	f36f 0182 	bfc	r1, #2, #1
   18ba8:	f36f 01c5 	bfc	r1, #3, #3
   18bac:	2301      	movs	r3, #1
   18bae:	f363 1188 	bfi	r1, r3, #6, #3
   18bb2:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   18bb6:	f363 2152 	bfi	r1, r3, #9, #10
   18bba:	f36f 41de 	bfc	r1, #19, #12
   18bbe:	f36f 71df 	bfc	r1, #31, #1
   18bc2:	2300      	movs	r3, #0
   18bc4:	482c      	ldr	r0, [pc, #176]	; (18c78 <conn_auto_initiate+0x214>)
   18bc6:	f00e f846 	bl	26c56 <z_impl_z_log_msg_static_create>
   18bca:	46b5      	mov	sp, r6
   18bcc:	e7a7      	b.n	18b1e <conn_auto_initiate+0xba>
   18bce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   18bd2:	e7cb      	b.n	18b6c <conn_auto_initiate+0x108>
   18bd4:	f06f 051b 	mvn.w	r5, #27
   18bd8:	e7d6      	b.n	18b88 <conn_auto_initiate+0x124>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   18bda:	1cb9      	adds	r1, r7, #2
   18bdc:	4638      	mov	r0, r7
   18bde:	f7ff fbcf 	bl	18380 <hci_le_read_max_data_len>
			if (!err) {
   18be2:	2800      	cmp	r0, #0
   18be4:	d1a8      	bne.n	18b38 <conn_auto_initiate+0xd4>
				err = bt_le_set_data_len(conn,
   18be6:	887a      	ldrh	r2, [r7, #2]
   18be8:	8839      	ldrh	r1, [r7, #0]
   18bea:	4620      	mov	r0, r4
   18bec:	f00e fe21 	bl	27832 <bt_le_set_data_len>
				if (err) {
   18bf0:	4604      	mov	r4, r0
   18bf2:	2800      	cmp	r0, #0
   18bf4:	d0a0      	beq.n	18b38 <conn_auto_initiate+0xd4>
					LOG_ERR("Failed to set data len (%d)", err);
   18bf6:	466d      	mov	r5, sp
   18bf8:	b088      	sub	sp, #32
   18bfa:	ab02      	add	r3, sp, #8
   18bfc:	f113 0210 	adds.w	r2, r3, #16
   18c00:	d02f      	beq.n	18c62 <conn_auto_initiate+0x1fe>
   18c02:	210c      	movs	r1, #12
   18c04:	b13a      	cbz	r2, 18c16 <conn_auto_initiate+0x1b2>
   18c06:	4608      	mov	r0, r1
   18c08:	2904      	cmp	r1, #4
   18c0a:	dd01      	ble.n	18c10 <conn_auto_initiate+0x1ac>
   18c0c:	4e1c      	ldr	r6, [pc, #112]	; (18c80 <conn_auto_initiate+0x21c>)
   18c0e:	615e      	str	r6, [r3, #20]
   18c10:	2808      	cmp	r0, #8
   18c12:	dd00      	ble.n	18c16 <conn_auto_initiate+0x1b2>
   18c14:	619c      	str	r4, [r3, #24]
   18c16:	290b      	cmp	r1, #11
   18c18:	dd26      	ble.n	18c68 <conn_auto_initiate+0x204>
   18c1a:	240c      	movs	r4, #12
   18c1c:	b13a      	cbz	r2, 18c2e <conn_auto_initiate+0x1ca>
   18c1e:	2103      	movs	r1, #3
   18c20:	7139      	strb	r1, [r7, #4]
   18c22:	2100      	movs	r1, #0
   18c24:	7179      	strb	r1, [r7, #5]
   18c26:	71b9      	strb	r1, [r7, #6]
   18c28:	71f9      	strb	r1, [r7, #7]
   18c2a:	6878      	ldr	r0, [r7, #4]
   18c2c:	6118      	str	r0, [r3, #16]
   18c2e:	2100      	movs	r1, #0
   18c30:	f36f 0100 	bfc	r1, #0, #1
   18c34:	f36f 0141 	bfc	r1, #1, #1
   18c38:	f36f 0182 	bfc	r1, #2, #1
   18c3c:	f36f 01c5 	bfc	r1, #3, #3
   18c40:	2301      	movs	r3, #1
   18c42:	f363 1188 	bfi	r1, r3, #6, #3
   18c46:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   18c4a:	f363 2152 	bfi	r1, r3, #9, #10
   18c4e:	f36f 41de 	bfc	r1, #19, #12
   18c52:	f36f 71df 	bfc	r1, #31, #1
   18c56:	2300      	movs	r3, #0
   18c58:	4807      	ldr	r0, [pc, #28]	; (18c78 <conn_auto_initiate+0x214>)
   18c5a:	f00d fffc 	bl	26c56 <z_impl_z_log_msg_static_create>
   18c5e:	46ad      	mov	sp, r5
		}
   18c60:	e76a      	b.n	18b38 <conn_auto_initiate+0xd4>
					LOG_ERR("Failed to set data len (%d)", err);
   18c62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   18c66:	e7cd      	b.n	18c04 <conn_auto_initiate+0x1a0>
   18c68:	f06f 041b 	mvn.w	r4, #27
   18c6c:	e7d6      	b.n	18c1c <conn_auto_initiate+0x1b8>
   18c6e:	bf00      	nop
   18c70:	20000370 	.word	0x20000370
   18c74:	0002e684 	.word	0x0002e684
   18c78:	0002d0bc 	.word	0x0002d0bc
   18c7c:	0002e6a8 	.word	0x0002e6a8
   18c80:	0002e6c0 	.word	0x0002e6c0

00018c84 <bt_hci_le_enh_conn_complete>:
{
   18c84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18c88:	b087      	sub	sp, #28
   18c8a:	af00      	add	r7, sp, #0
   18c8c:	4604      	mov	r4, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   18c8e:	f8b0 8001 	ldrh.w	r8, [r0, #1]
   18c92:	fa1f f988 	uxth.w	r9, r8
	bool is_disconnected = conn_handle_is_disconnected(handle);
   18c96:	4648      	mov	r0, r9
   18c98:	f7fe f9f4 	bl	17084 <conn_handle_is_disconnected>
   18c9c:	4606      	mov	r6, r0
	if (evt->status) {
   18c9e:	7820      	ldrb	r0, [r4, #0]
   18ca0:	2800      	cmp	r0, #0
   18ca2:	d046      	beq.n	18d32 <bt_hci_le_enh_conn_complete+0xae>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   18ca4:	2802      	cmp	r0, #2
   18ca6:	d038      	beq.n	18d1a <bt_hci_le_enh_conn_complete+0x96>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   18ca8:	466d      	mov	r5, sp
   18caa:	b088      	sub	sp, #32
   18cac:	466b      	mov	r3, sp
   18cae:	f113 0210 	adds.w	r2, r3, #16
   18cb2:	d038      	beq.n	18d26 <bt_hci_le_enh_conn_complete+0xa2>
   18cb4:	210c      	movs	r1, #12
   18cb6:	b13a      	cbz	r2, 18cc8 <bt_hci_le_enh_conn_complete+0x44>
   18cb8:	460c      	mov	r4, r1
   18cba:	2904      	cmp	r1, #4
   18cbc:	dd01      	ble.n	18cc2 <bt_hci_le_enh_conn_complete+0x3e>
   18cbe:	4e91      	ldr	r6, [pc, #580]	; (18f04 <bt_hci_le_enh_conn_complete+0x280>)
   18cc0:	615e      	str	r6, [r3, #20]
   18cc2:	2c08      	cmp	r4, #8
   18cc4:	dd00      	ble.n	18cc8 <bt_hci_le_enh_conn_complete+0x44>
   18cc6:	6198      	str	r0, [r3, #24]
   18cc8:	290b      	cmp	r1, #11
   18cca:	dd2f      	ble.n	18d2c <bt_hci_le_enh_conn_complete+0xa8>
   18ccc:	240c      	movs	r4, #12
   18cce:	b13a      	cbz	r2, 18ce0 <bt_hci_le_enh_conn_complete+0x5c>
   18cd0:	2103      	movs	r1, #3
   18cd2:	7139      	strb	r1, [r7, #4]
   18cd4:	2100      	movs	r1, #0
   18cd6:	7179      	strb	r1, [r7, #5]
   18cd8:	71b9      	strb	r1, [r7, #6]
   18cda:	71f9      	strb	r1, [r7, #7]
   18cdc:	6878      	ldr	r0, [r7, #4]
   18cde:	6118      	str	r0, [r3, #16]
   18ce0:	2100      	movs	r1, #0
   18ce2:	f36f 0100 	bfc	r1, #0, #1
   18ce6:	f36f 0141 	bfc	r1, #1, #1
   18cea:	f36f 0182 	bfc	r1, #2, #1
   18cee:	f36f 01c5 	bfc	r1, #3, #3
   18cf2:	2302      	movs	r3, #2
   18cf4:	f363 1188 	bfi	r1, r3, #6, #3
   18cf8:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   18cfc:	f364 2152 	bfi	r1, r4, #9, #10
   18d00:	f36f 41de 	bfc	r1, #19, #12
   18d04:	f36f 71df 	bfc	r1, #31, #1
   18d08:	2300      	movs	r3, #0
   18d0a:	487f      	ldr	r0, [pc, #508]	; (18f08 <bt_hci_le_enh_conn_complete+0x284>)
   18d0c:	f00d ffa3 	bl	26c56 <z_impl_z_log_msg_static_create>
   18d10:	46ad      	mov	sp, r5
}
   18d12:	371c      	adds	r7, #28
   18d14:	46bd      	mov	sp, r7
   18d16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			le_conn_complete_cancel();
   18d1a:	f7ff fe43 	bl	189a4 <le_conn_complete_cancel>
			bt_le_scan_update(false);
   18d1e:	2000      	movs	r0, #0
   18d20:	f001 f9d8 	bl	1a0d4 <bt_le_scan_update>
			return;
   18d24:	e7f5      	b.n	18d12 <bt_hci_le_enh_conn_complete+0x8e>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   18d26:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   18d2a:	e7c4      	b.n	18cb6 <bt_hci_le_enh_conn_complete+0x32>
   18d2c:	f06f 041b 	mvn.w	r4, #27
   18d30:	e7cd      	b.n	18cce <bt_hci_le_enh_conn_complete+0x4a>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   18d32:	7923      	ldrb	r3, [r4, #4]
   18d34:	3b02      	subs	r3, #2
   18d36:	b2db      	uxtb	r3, r3
   18d38:	2b01      	cmp	r3, #1
   18d3a:	d95b      	bls.n	18df4 <bt_hci_le_enh_conn_complete+0x170>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   18d3c:	78e3      	ldrb	r3, [r4, #3]
   18d3e:	2b01      	cmp	r3, #1
   18d40:	d06b      	beq.n	18e1a <bt_hci_le_enh_conn_complete+0x196>
				bt_lookup_id_addr(id, &evt->peer_addr));
   18d42:	1d25      	adds	r5, r4, #4
		bt_addr_le_copy(&id_addr,
   18d44:	4629      	mov	r1, r5
   18d46:	f00e fe21 	bl	2798c <bt_lookup_id_addr>
   18d4a:	4601      	mov	r1, r0
   18d4c:	2207      	movs	r2, #7
   18d4e:	f107 0008 	add.w	r0, r7, #8
   18d52:	f00e fbbb 	bl	274cc <memcpy>
   18d56:	2207      	movs	r2, #7
   18d58:	4629      	mov	r1, r5
   18d5a:	f107 0010 	add.w	r0, r7, #16
   18d5e:	f00e fbb5 	bl	274cc <memcpy>
	conn = find_pending_connect(evt->role, &id_addr);
   18d62:	f107 0108 	add.w	r1, r7, #8
   18d66:	78e0      	ldrb	r0, [r4, #3]
   18d68:	f7fe fad4 	bl	17314 <find_pending_connect>
   18d6c:	4605      	mov	r5, r0
	    evt->role == BT_HCI_ROLE_CENTRAL) {
   18d6e:	78e3      	ldrb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   18d70:	b963      	cbnz	r3, 18d8c <bt_hci_le_enh_conn_complete+0x108>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18d72:	4b66      	ldr	r3, [pc, #408]	; (18f0c <bt_hci_le_enh_conn_complete+0x288>)
   18d74:	f3bf 8f5b 	dmb	ish
   18d78:	e853 1f00 	ldrex	r1, [r3]
   18d7c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   18d80:	e843 1200 	strex	r2, r1, [r3]
   18d84:	2a00      	cmp	r2, #0
   18d86:	d1f7      	bne.n	18d78 <bt_hci_le_enh_conn_complete+0xf4>
   18d88:	f3bf 8f5b 	dmb	ish
	if (!conn) {
   18d8c:	2d00      	cmp	r5, #0
   18d8e:	d048      	beq.n	18e22 <bt_hci_le_enh_conn_complete+0x19e>
	conn->handle = handle;
   18d90:	4628      	mov	r0, r5
   18d92:	f820 8b88 	strh.w	r8, [r0], #136
   18d96:	2207      	movs	r2, #7
   18d98:	f107 0108 	add.w	r1, r7, #8
   18d9c:	f00e fb96 	bl	274cc <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   18da0:	f8b4 3017 	ldrh.w	r3, [r4, #23]
   18da4:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   18da8:	f8b4 3019 	ldrh.w	r3, [r4, #25]
   18dac:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   18db0:	f8b4 301b 	ldrh.w	r3, [r4, #27]
   18db4:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
   18db8:	78e3      	ldrb	r3, [r4, #3]
   18dba:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
   18dbc:	2200      	movs	r2, #0
   18dbe:	726a      	strb	r2, [r5, #9]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   18dc0:	2b00      	cmp	r3, #0
   18dc2:	f000 8088 	beq.w	18ed6 <bt_hci_le_enh_conn_complete+0x252>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   18dc6:	2107      	movs	r1, #7
   18dc8:	4628      	mov	r0, r5
   18dca:	f001 fef9 	bl	1abc0 <bt_conn_set_state>
	if (is_disconnected) {
   18dce:	2e00      	cmp	r6, #0
   18dd0:	f040 8093 	bne.w	18efa <bt_hci_le_enh_conn_complete+0x276>
	bt_conn_connected(conn);
   18dd4:	4628      	mov	r0, r5
   18dd6:	f00e fff4 	bl	27dc2 <bt_conn_connected>
	conn_auto_initiate(conn);
   18dda:	4628      	mov	r0, r5
   18ddc:	f7ff fe42 	bl	18a64 <conn_auto_initiate>
	bt_conn_unref(conn);
   18de0:	4628      	mov	r0, r5
   18de2:	f00e ffb5 	bl	27d50 <bt_conn_unref>
	    conn->role == BT_HCI_ROLE_CENTRAL) {
   18de6:	78eb      	ldrb	r3, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   18de8:	2b00      	cmp	r3, #0
   18dea:	d192      	bne.n	18d12 <bt_hci_le_enh_conn_complete+0x8e>
		bt_le_scan_update(false);
   18dec:	2000      	movs	r0, #0
   18dee:	f001 f971 	bl	1a0d4 <bt_le_scan_update>
   18df2:	e78e      	b.n	18d12 <bt_hci_le_enh_conn_complete+0x8e>
   18df4:	2207      	movs	r2, #7
   18df6:	1d21      	adds	r1, r4, #4
   18df8:	f107 0008 	add.w	r0, r7, #8
   18dfc:	f00e fb66 	bl	274cc <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   18e00:	7a3b      	ldrb	r3, [r7, #8]
   18e02:	3b02      	subs	r3, #2
   18e04:	723b      	strb	r3, [r7, #8]
	memcpy(dst, src, sizeof(*dst));
   18e06:	2206      	movs	r2, #6
   18e08:	f104 0111 	add.w	r1, r4, #17
   18e0c:	f107 0011 	add.w	r0, r7, #17
   18e10:	f00e fb5c 	bl	274cc <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   18e14:	2301      	movs	r3, #1
   18e16:	743b      	strb	r3, [r7, #16]
   18e18:	e7a3      	b.n	18d62 <bt_hci_le_enh_conn_complete+0xde>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   18e1a:	4b3d      	ldr	r3, [pc, #244]	; (18f10 <bt_hci_le_enh_conn_complete+0x28c>)
   18e1c:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   18e20:	e78f      	b.n	18d42 <bt_hci_le_enh_conn_complete+0xbe>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   18e22:	1d20      	adds	r0, r4, #4
   18e24:	f7fd ffb8 	bl	16d98 <bt_addr_le_str>
   18e28:	466d      	mov	r5, sp
   18e2a:	2300      	movs	r3, #0
   18e2c:	713b      	strb	r3, [r7, #4]
   18e2e:	2302      	movs	r3, #2
   18e30:	717b      	strb	r3, [r7, #5]
   18e32:	b088      	sub	sp, #32
   18e34:	466c      	mov	r4, sp
   18e36:	f114 0210 	adds.w	r2, r4, #16
   18e3a:	d011      	beq.n	18e60 <bt_hci_le_enh_conn_complete+0x1dc>
   18e3c:	260e      	movs	r6, #14
   18e3e:	b11a      	cbz	r2, 18e48 <bt_hci_le_enh_conn_complete+0x1c4>
   18e40:	2e04      	cmp	r6, #4
   18e42:	dd01      	ble.n	18e48 <bt_hci_le_enh_conn_complete+0x1c4>
   18e44:	4b33      	ldr	r3, [pc, #204]	; (18f14 <bt_hci_le_enh_conn_complete+0x290>)
   18e46:	6163      	str	r3, [r4, #20]
   18e48:	2300      	movs	r3, #0
   18e4a:	703b      	strb	r3, [r7, #0]
   18e4c:	2302      	movs	r3, #2
   18e4e:	707b      	strb	r3, [r7, #1]
   18e50:	b19a      	cbz	r2, 18e7a <bt_hci_le_enh_conn_complete+0x1f6>
   18e52:	2e08      	cmp	r6, #8
   18e54:	dd00      	ble.n	18e58 <bt_hci_le_enh_conn_complete+0x1d4>
   18e56:	61a0      	str	r0, [r4, #24]
   18e58:	f104 031c 	add.w	r3, r4, #28
   18e5c:	2100      	movs	r1, #0
   18e5e:	e00a      	b.n	18e76 <bt_hci_le_enh_conn_complete+0x1f2>
   18e60:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   18e64:	e7eb      	b.n	18e3e <bt_hci_le_enh_conn_complete+0x1ba>
   18e66:	f101 0018 	add.w	r0, r1, #24
   18e6a:	4438      	add	r0, r7
   18e6c:	f810 0c18 	ldrb.w	r0, [r0, #-24]
   18e70:	f803 0b01 	strb.w	r0, [r3], #1
   18e74:	3101      	adds	r1, #1
   18e76:	2901      	cmp	r1, #1
   18e78:	d9f5      	bls.n	18e66 <bt_hci_le_enh_conn_complete+0x1e2>
   18e7a:	2e0d      	cmp	r6, #13
   18e7c:	dd28      	ble.n	18ed0 <bt_hci_le_enh_conn_complete+0x24c>
   18e7e:	230e      	movs	r3, #14
   18e80:	b142      	cbz	r2, 18e94 <bt_hci_le_enh_conn_complete+0x210>
   18e82:	2103      	movs	r1, #3
   18e84:	7139      	strb	r1, [r7, #4]
   18e86:	2100      	movs	r1, #0
   18e88:	7179      	strb	r1, [r7, #5]
   18e8a:	71b9      	strb	r1, [r7, #6]
   18e8c:	2101      	movs	r1, #1
   18e8e:	71f9      	strb	r1, [r7, #7]
   18e90:	6878      	ldr	r0, [r7, #4]
   18e92:	6120      	str	r0, [r4, #16]
   18e94:	2100      	movs	r1, #0
   18e96:	f36f 0100 	bfc	r1, #0, #1
   18e9a:	f36f 0141 	bfc	r1, #1, #1
   18e9e:	f36f 0182 	bfc	r1, #2, #1
   18ea2:	f36f 01c5 	bfc	r1, #3, #3
   18ea6:	2001      	movs	r0, #1
   18ea8:	f360 1188 	bfi	r1, r0, #6, #3
   18eac:	f3c3 0309 	ubfx	r3, r3, #0, #10
   18eb0:	f363 2152 	bfi	r1, r3, #9, #10
   18eb4:	f36f 41de 	bfc	r1, #19, #12
   18eb8:	f36f 71df 	bfc	r1, #31, #1
   18ebc:	2300      	movs	r3, #0
   18ebe:	4812      	ldr	r0, [pc, #72]	; (18f08 <bt_hci_le_enh_conn_complete+0x284>)
   18ec0:	f00d fec9 	bl	26c56 <z_impl_z_log_msg_static_create>
   18ec4:	46ad      	mov	sp, r5
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   18ec6:	211f      	movs	r1, #31
   18ec8:	4648      	mov	r0, r9
   18eca:	f00e fc98 	bl	277fe <bt_hci_disconnect>
		return;
   18ece:	e720      	b.n	18d12 <bt_hci_le_enh_conn_complete+0x8e>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   18ed0:	f06f 031b 	mvn.w	r3, #27
   18ed4:	e7d4      	b.n	18e80 <bt_hci_le_enh_conn_complete+0x1fc>
	memcpy(dst, src, sizeof(*dst));
   18ed6:	2207      	movs	r2, #7
   18ed8:	f107 0110 	add.w	r1, r7, #16
   18edc:	f105 0096 	add.w	r0, r5, #150	; 0x96
   18ee0:	f00e faf4 	bl	274cc <memcpy>
					&bt_dev.id_addr[conn->id]);
   18ee4:	7a29      	ldrb	r1, [r5, #8]
   18ee6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   18eea:	2207      	movs	r2, #7
   18eec:	4b08      	ldr	r3, [pc, #32]	; (18f10 <bt_hci_le_enh_conn_complete+0x28c>)
   18eee:	4419      	add	r1, r3
   18ef0:	f105 008f 	add.w	r0, r5, #143	; 0x8f
   18ef4:	f00e faea 	bl	274cc <memcpy>
}
   18ef8:	e765      	b.n	18dc6 <bt_hci_le_enh_conn_complete+0x142>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   18efa:	2101      	movs	r1, #1
   18efc:	4628      	mov	r0, r5
   18efe:	f001 fe5f 	bl	1abc0 <bt_conn_set_state>
   18f02:	e767      	b.n	18dd4 <bt_hci_le_enh_conn_complete+0x150>
   18f04:	0002e6dc 	.word	0x0002e6dc
   18f08:	0002d0bc 	.word	0x0002d0bc
   18f0c:	2000043c 	.word	0x2000043c
   18f10:	20000370 	.word	0x20000370
   18f14:	0002e6f8 	.word	0x0002e6f8

00018f18 <le_legacy_conn_complete>:
{
   18f18:	b510      	push	{r4, lr}
   18f1a:	b088      	sub	sp, #32
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   18f1c:	68c1      	ldr	r1, [r0, #12]
	enh.status         = evt->status;
   18f1e:	780b      	ldrb	r3, [r1, #0]
   18f20:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   18f24:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   18f28:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   18f2c:	78cb      	ldrb	r3, [r1, #3]
   18f2e:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   18f32:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   18f36:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   18f3a:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   18f3e:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   18f42:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   18f46:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   18f4a:	7c4b      	ldrb	r3, [r1, #17]
   18f4c:	f88d 301d 	strb.w	r3, [sp, #29]
	memcpy(dst, src, sizeof(*dst));
   18f50:	2207      	movs	r2, #7
   18f52:	3104      	adds	r1, #4
   18f54:	a801      	add	r0, sp, #4
   18f56:	f00e fab9 	bl	274cc <memcpy>
	memcpy(dst, src, sizeof(*dst));
   18f5a:	4c09      	ldr	r4, [pc, #36]	; (18f80 <le_legacy_conn_complete+0x68>)
   18f5c:	2206      	movs	r2, #6
   18f5e:	4621      	mov	r1, r4
   18f60:	f10d 000b 	add.w	r0, sp, #11
   18f64:	f00e fab2 	bl	274cc <memcpy>
   18f68:	2206      	movs	r2, #6
   18f6a:	4621      	mov	r1, r4
   18f6c:	f10d 0011 	add.w	r0, sp, #17
   18f70:	f00e faac 	bl	274cc <memcpy>
	enh_conn_complete(&enh);
   18f74:	4668      	mov	r0, sp
   18f76:	f00e fc9e 	bl	278b6 <enh_conn_complete>
}
   18f7a:	b008      	add	sp, #32
   18f7c:	bd10      	pop	{r4, pc}
   18f7e:	bf00      	nop
   18f80:	0002e200 	.word	0x0002e200

00018f84 <bt_send>:
{
   18f84:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
   18f86:	4b03      	ldr	r3, [pc, #12]	; (18f94 <bt_send+0x10>)
   18f88:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   18f8c:	695b      	ldr	r3, [r3, #20]
   18f8e:	4798      	blx	r3
}
   18f90:	bd08      	pop	{r3, pc}
   18f92:	bf00      	nop
   18f94:	20000370 	.word	0x20000370

00018f98 <bt_hci_cmd_send>:
{
   18f98:	b5f0      	push	{r4, r5, r6, r7, lr}
   18f9a:	b083      	sub	sp, #12
   18f9c:	af00      	add	r7, sp, #0
   18f9e:	4604      	mov	r4, r0
	if (!buf) {
   18fa0:	460d      	mov	r5, r1
   18fa2:	b161      	cbz	r1, 18fbe <bt_hci_cmd_send+0x26>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   18fa4:	f640 4335 	movw	r3, #3125	; 0xc35
   18fa8:	429c      	cmp	r4, r3
   18faa:	d010      	beq.n	18fce <bt_hci_cmd_send+0x36>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   18fac:	4629      	mov	r1, r5
   18fae:	482c      	ldr	r0, [pc, #176]	; (19060 <bt_hci_cmd_send+0xc8>)
   18fb0:	f010 ff48 	bl	29e44 <net_buf_put>
	return 0;
   18fb4:	2400      	movs	r4, #0
}
   18fb6:	4620      	mov	r0, r4
   18fb8:	370c      	adds	r7, #12
   18fba:	46bd      	mov	sp, r7
   18fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   18fbe:	f7ff f89f 	bl	18100 <bt_hci_cmd_create>
		if (!buf) {
   18fc2:	4605      	mov	r5, r0
   18fc4:	2800      	cmp	r0, #0
   18fc6:	d1ed      	bne.n	18fa4 <bt_hci_cmd_send+0xc>
			return -ENOBUFS;
   18fc8:	f06f 0468 	mvn.w	r4, #104	; 0x68
   18fcc:	e7f3      	b.n	18fb6 <bt_hci_cmd_send+0x1e>
		err = bt_send(buf);
   18fce:	4628      	mov	r0, r5
   18fd0:	f7ff ffd8 	bl	18f84 <bt_send>
		if (err) {
   18fd4:	4604      	mov	r4, r0
   18fd6:	2800      	cmp	r0, #0
   18fd8:	d0ed      	beq.n	18fb6 <bt_hci_cmd_send+0x1e>
			LOG_ERR("Unable to send to driver (err %d)", err);
   18fda:	466e      	mov	r6, sp
   18fdc:	b088      	sub	sp, #32
   18fde:	466b      	mov	r3, sp
   18fe0:	f113 0210 	adds.w	r2, r3, #16
   18fe4:	d035      	beq.n	19052 <bt_hci_cmd_send+0xba>
   18fe6:	210c      	movs	r1, #12
   18fe8:	b14a      	cbz	r2, 18ffe <bt_hci_cmd_send+0x66>
   18fea:	4608      	mov	r0, r1
   18fec:	2904      	cmp	r1, #4
   18fee:	dd03      	ble.n	18ff8 <bt_hci_cmd_send+0x60>
   18ff0:	f8df c070 	ldr.w	ip, [pc, #112]	; 19064 <bt_hci_cmd_send+0xcc>
   18ff4:	f8c3 c014 	str.w	ip, [r3, #20]
   18ff8:	2808      	cmp	r0, #8
   18ffa:	dd00      	ble.n	18ffe <bt_hci_cmd_send+0x66>
   18ffc:	619c      	str	r4, [r3, #24]
   18ffe:	290b      	cmp	r1, #11
   19000:	dd2a      	ble.n	19058 <bt_hci_cmd_send+0xc0>
   19002:	f04f 0c0c 	mov.w	ip, #12
   19006:	b13a      	cbz	r2, 19018 <bt_hci_cmd_send+0x80>
   19008:	2103      	movs	r1, #3
   1900a:	7139      	strb	r1, [r7, #4]
   1900c:	2100      	movs	r1, #0
   1900e:	7179      	strb	r1, [r7, #5]
   19010:	71b9      	strb	r1, [r7, #6]
   19012:	71f9      	strb	r1, [r7, #7]
   19014:	6878      	ldr	r0, [r7, #4]
   19016:	6118      	str	r0, [r3, #16]
   19018:	2100      	movs	r1, #0
   1901a:	f36f 0100 	bfc	r1, #0, #1
   1901e:	f36f 0141 	bfc	r1, #1, #1
   19022:	f36f 0182 	bfc	r1, #2, #1
   19026:	f36f 01c5 	bfc	r1, #3, #3
   1902a:	2301      	movs	r3, #1
   1902c:	f363 1188 	bfi	r1, r3, #6, #3
   19030:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   19034:	f36c 2152 	bfi	r1, ip, #9, #10
   19038:	f36f 41de 	bfc	r1, #19, #12
   1903c:	f36f 71df 	bfc	r1, #31, #1
   19040:	2300      	movs	r3, #0
   19042:	4809      	ldr	r0, [pc, #36]	; (19068 <bt_hci_cmd_send+0xd0>)
   19044:	f00d fe07 	bl	26c56 <z_impl_z_log_msg_static_create>
   19048:	46b5      	mov	sp, r6
			net_buf_unref(buf);
   1904a:	4628      	mov	r0, r5
   1904c:	f010 fefe 	bl	29e4c <net_buf_unref>
		return err;
   19050:	e7b1      	b.n	18fb6 <bt_hci_cmd_send+0x1e>
			LOG_ERR("Unable to send to driver (err %d)", err);
   19052:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   19056:	e7c7      	b.n	18fe8 <bt_hci_cmd_send+0x50>
   19058:	f06f 0c1b 	mvn.w	ip, #27
   1905c:	e7d3      	b.n	19006 <bt_hci_cmd_send+0x6e>
   1905e:	bf00      	nop
   19060:	200004ac 	.word	0x200004ac
   19064:	0002e714 	.word	0x0002e714
   19068:	0002d0bc 	.word	0x0002d0bc

0001906c <le_conn_param_neg_reply>:
{
   1906c:	b570      	push	{r4, r5, r6, lr}
   1906e:	b088      	sub	sp, #32
   19070:	4605      	mov	r5, r0
   19072:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   19074:	2103      	movs	r1, #3
   19076:	f242 0021 	movw	r0, #8225	; 0x2021
   1907a:	f7ff f841 	bl	18100 <bt_hci_cmd_create>
	if (!buf) {
   1907e:	b168      	cbz	r0, 1909c <le_conn_param_neg_reply+0x30>
   19080:	4606      	mov	r6, r0
   19082:	2103      	movs	r1, #3
   19084:	300c      	adds	r0, #12
   19086:	f010 ff28 	bl	29eda <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   1908a:	8005      	strh	r5, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   1908c:	7084      	strb	r4, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1908e:	4631      	mov	r1, r6
   19090:	f242 0021 	movw	r0, #8225	; 0x2021
   19094:	f7ff ff80 	bl	18f98 <bt_hci_cmd_send>
}
   19098:	b008      	add	sp, #32
   1909a:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("Unable to allocate buffer");
   1909c:	4b12      	ldr	r3, [pc, #72]	; (190e8 <le_conn_param_neg_reply+0x7c>)
   1909e:	9307      	str	r3, [sp, #28]
   190a0:	2302      	movs	r3, #2
   190a2:	f88d 3004 	strb.w	r3, [sp, #4]
   190a6:	2300      	movs	r3, #0
   190a8:	f88d 3005 	strb.w	r3, [sp, #5]
   190ac:	f88d 3006 	strb.w	r3, [sp, #6]
   190b0:	f88d 3007 	strb.w	r3, [sp, #7]
   190b4:	9a01      	ldr	r2, [sp, #4]
   190b6:	9206      	str	r2, [sp, #24]
   190b8:	4619      	mov	r1, r3
   190ba:	f363 0100 	bfi	r1, r3, #0, #1
   190be:	f363 0141 	bfi	r1, r3, #1, #1
   190c2:	f363 0182 	bfi	r1, r3, #2, #1
   190c6:	f363 01c5 	bfi	r1, r3, #3, #3
   190ca:	2201      	movs	r2, #1
   190cc:	f362 1188 	bfi	r1, r2, #6, #3
   190d0:	2208      	movs	r2, #8
   190d2:	f362 2152 	bfi	r1, r2, #9, #10
   190d6:	f363 41de 	bfi	r1, r3, #19, #12
   190da:	f363 71df 	bfi	r1, r3, #31, #1
   190de:	aa06      	add	r2, sp, #24
   190e0:	4802      	ldr	r0, [pc, #8]	; (190ec <le_conn_param_neg_reply+0x80>)
   190e2:	f00d fdb8 	bl	26c56 <z_impl_z_log_msg_static_create>
		return;
   190e6:	e7d7      	b.n	19098 <le_conn_param_neg_reply+0x2c>
   190e8:	0002e738 	.word	0x0002e738
   190ec:	0002d0bc 	.word	0x0002d0bc

000190f0 <le_conn_param_req>:
{
   190f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   190f2:	b085      	sub	sp, #20
   190f4:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   190f6:	68c3      	ldr	r3, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   190f8:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   190fa:	885a      	ldrh	r2, [r3, #2]
   190fc:	813a      	strh	r2, [r7, #8]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   190fe:	889a      	ldrh	r2, [r3, #4]
   19100:	817a      	strh	r2, [r7, #10]
	param.latency = sys_le16_to_cpu(evt->latency);
   19102:	88da      	ldrh	r2, [r3, #6]
   19104:	81ba      	strh	r2, [r7, #12]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   19106:	891b      	ldrh	r3, [r3, #8]
   19108:	81fb      	strh	r3, [r7, #14]
	conn = bt_conn_lookup_handle(handle);
   1910a:	4620      	mov	r0, r4
   1910c:	f001 fd4e 	bl	1abac <bt_conn_lookup_handle>
	if (!conn) {
   19110:	b180      	cbz	r0, 19134 <le_conn_param_req+0x44>
   19112:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
   19114:	f107 0108 	add.w	r1, r7, #8
   19118:	f001 ff94 	bl	1b044 <le_param_req>
   1911c:	2800      	cmp	r0, #0
   1911e:	d149      	bne.n	191b4 <le_conn_param_req+0xc4>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   19120:	211e      	movs	r1, #30
   19122:	4620      	mov	r0, r4
   19124:	f7ff ffa2 	bl	1906c <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   19128:	4628      	mov	r0, r5
   1912a:	f00e fe11 	bl	27d50 <bt_conn_unref>
}
   1912e:	3714      	adds	r7, #20
   19130:	46bd      	mov	sp, r7
   19132:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   19134:	466e      	mov	r6, sp
   19136:	b088      	sub	sp, #32
   19138:	466b      	mov	r3, sp
   1913a:	f113 0210 	adds.w	r2, r3, #16
   1913e:	d033      	beq.n	191a8 <le_conn_param_req+0xb8>
   19140:	210c      	movs	r1, #12
   19142:	b13a      	cbz	r2, 19154 <le_conn_param_req+0x64>
   19144:	4608      	mov	r0, r1
   19146:	2904      	cmp	r1, #4
   19148:	dd01      	ble.n	1914e <le_conn_param_req+0x5e>
   1914a:	4d1d      	ldr	r5, [pc, #116]	; (191c0 <le_conn_param_req+0xd0>)
   1914c:	615d      	str	r5, [r3, #20]
   1914e:	2808      	cmp	r0, #8
   19150:	dd00      	ble.n	19154 <le_conn_param_req+0x64>
   19152:	619c      	str	r4, [r3, #24]
   19154:	290b      	cmp	r1, #11
   19156:	dd2a      	ble.n	191ae <le_conn_param_req+0xbe>
   19158:	250c      	movs	r5, #12
   1915a:	b13a      	cbz	r2, 1916c <le_conn_param_req+0x7c>
   1915c:	2103      	movs	r1, #3
   1915e:	7139      	strb	r1, [r7, #4]
   19160:	2100      	movs	r1, #0
   19162:	7179      	strb	r1, [r7, #5]
   19164:	71b9      	strb	r1, [r7, #6]
   19166:	71f9      	strb	r1, [r7, #7]
   19168:	6878      	ldr	r0, [r7, #4]
   1916a:	6118      	str	r0, [r3, #16]
   1916c:	2100      	movs	r1, #0
   1916e:	f36f 0100 	bfc	r1, #0, #1
   19172:	f36f 0141 	bfc	r1, #1, #1
   19176:	f36f 0182 	bfc	r1, #2, #1
   1917a:	f36f 01c5 	bfc	r1, #3, #3
   1917e:	2301      	movs	r3, #1
   19180:	f363 1188 	bfi	r1, r3, #6, #3
   19184:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   19188:	f363 2152 	bfi	r1, r3, #9, #10
   1918c:	f36f 41de 	bfc	r1, #19, #12
   19190:	f36f 71df 	bfc	r1, #31, #1
   19194:	2300      	movs	r3, #0
   19196:	480b      	ldr	r0, [pc, #44]	; (191c4 <le_conn_param_req+0xd4>)
   19198:	f00d fd5d 	bl	26c56 <z_impl_z_log_msg_static_create>
   1919c:	46b5      	mov	sp, r6
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1919e:	2102      	movs	r1, #2
   191a0:	4620      	mov	r0, r4
   191a2:	f7ff ff63 	bl	1906c <le_conn_param_neg_reply>
		return;
   191a6:	e7c2      	b.n	1912e <le_conn_param_req+0x3e>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   191a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   191ac:	e7c9      	b.n	19142 <le_conn_param_req+0x52>
   191ae:	f06f 051b 	mvn.w	r5, #27
   191b2:	e7d2      	b.n	1915a <le_conn_param_req+0x6a>
		le_conn_param_req_reply(handle, &param);
   191b4:	f107 0108 	add.w	r1, r7, #8
   191b8:	4620      	mov	r0, r4
   191ba:	f00e fbad 	bl	27918 <le_conn_param_req_reply>
   191be:	e7b3      	b.n	19128 <le_conn_param_req+0x38>
   191c0:	0002e310 	.word	0x0002e310
   191c4:	0002d0bc 	.word	0x0002d0bc

000191c8 <send_cmd>:
{
   191c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   191ca:	b089      	sub	sp, #36	; 0x24
   191cc:	af00      	add	r7, sp, #0
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   191ce:	2200      	movs	r2, #0
   191d0:	2300      	movs	r3, #0
   191d2:	4855      	ldr	r0, [pc, #340]	; (19328 <send_cmd+0x160>)
   191d4:	f010 fdfa 	bl	29dcc <net_buf_get>
	BT_ASSERT(buf);
   191d8:	4605      	mov	r5, r0
   191da:	2800      	cmp	r0, #0
   191dc:	d055      	beq.n	1928a <send_cmd+0xc2>
   191de:	4c53      	ldr	r4, [pc, #332]	; (1932c <send_cmd+0x164>)
   191e0:	f04f 32ff 	mov.w	r2, #4294967295
   191e4:	f04f 33ff 	mov.w	r3, #4294967295
   191e8:	4620      	mov	r0, r4
   191ea:	f00a ff3d 	bl	24068 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   191ee:	69a3      	ldr	r3, [r4, #24]
   191f0:	b34b      	cbz	r3, 19246 <send_cmd+0x7e>
		LOG_ERR("Uncleared pending sent_cmd");
   191f2:	4b4f      	ldr	r3, [pc, #316]	; (19330 <send_cmd+0x168>)
   191f4:	61fb      	str	r3, [r7, #28]
   191f6:	2302      	movs	r3, #2
   191f8:	713b      	strb	r3, [r7, #4]
   191fa:	2400      	movs	r4, #0
   191fc:	717c      	strb	r4, [r7, #5]
   191fe:	71bc      	strb	r4, [r7, #6]
   19200:	71fc      	strb	r4, [r7, #7]
   19202:	687b      	ldr	r3, [r7, #4]
   19204:	61bb      	str	r3, [r7, #24]
   19206:	4621      	mov	r1, r4
   19208:	f364 0100 	bfi	r1, r4, #0, #1
   1920c:	f364 0141 	bfi	r1, r4, #1, #1
   19210:	f364 0182 	bfi	r1, r4, #2, #1
   19214:	f364 01c5 	bfi	r1, r4, #3, #3
   19218:	2301      	movs	r3, #1
   1921a:	f363 1188 	bfi	r1, r3, #6, #3
   1921e:	2308      	movs	r3, #8
   19220:	f363 2152 	bfi	r1, r3, #9, #10
   19224:	f364 41de 	bfi	r1, r4, #19, #12
   19228:	f364 71df 	bfi	r1, r4, #31, #1
   1922c:	4623      	mov	r3, r4
   1922e:	f107 0218 	add.w	r2, r7, #24
   19232:	4840      	ldr	r0, [pc, #256]	; (19334 <send_cmd+0x16c>)
   19234:	f00d fd0f 	bl	26c56 <z_impl_z_log_msg_static_create>
		net_buf_unref(bt_dev.sent_cmd);
   19238:	4e3f      	ldr	r6, [pc, #252]	; (19338 <send_cmd+0x170>)
   1923a:	f8d6 0130 	ldr.w	r0, [r6, #304]	; 0x130
   1923e:	f010 fe05 	bl	29e4c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   19242:	f8c6 4130 	str.w	r4, [r6, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   19246:	4628      	mov	r0, r5
   19248:	f010 fe23 	bl	29e92 <net_buf_ref>
   1924c:	4b3a      	ldr	r3, [pc, #232]	; (19338 <send_cmd+0x170>)
   1924e:	f8c3 0130 	str.w	r0, [r3, #304]	; 0x130
	err = bt_send(buf);
   19252:	4628      	mov	r0, r5
   19254:	f7ff fe96 	bl	18f84 <bt_send>
	if (err) {
   19258:	4604      	mov	r4, r0
   1925a:	2800      	cmp	r0, #0
   1925c:	d05d      	beq.n	1931a <send_cmd+0x152>
		LOG_ERR("Unable to send to driver (err %d)", err);
   1925e:	466e      	mov	r6, sp
   19260:	b088      	sub	sp, #32
   19262:	466b      	mov	r3, sp
   19264:	f113 0210 	adds.w	r2, r3, #16
   19268:	d01d      	beq.n	192a6 <send_cmd+0xde>
   1926a:	210c      	movs	r1, #12
   1926c:	b14a      	cbz	r2, 19282 <send_cmd+0xba>
   1926e:	4608      	mov	r0, r1
   19270:	2904      	cmp	r1, #4
   19272:	dd03      	ble.n	1927c <send_cmd+0xb4>
   19274:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 1933c <send_cmd+0x174>
   19278:	f8c3 c014 	str.w	ip, [r3, #20]
   1927c:	2808      	cmp	r0, #8
   1927e:	dd15      	ble.n	192ac <send_cmd+0xe4>
   19280:	619c      	str	r4, [r3, #24]
   19282:	290b      	cmp	r1, #11
   19284:	dd4c      	ble.n	19320 <send_cmd+0x158>
   19286:	240c      	movs	r4, #12
   19288:	e012      	b.n	192b0 <send_cmd+0xe8>
	BT_ASSERT(buf);
   1928a:	f44f 6318 	mov.w	r3, #2432	; 0x980
   1928e:	4a2c      	ldr	r2, [pc, #176]	; (19340 <send_cmd+0x178>)
   19290:	492c      	ldr	r1, [pc, #176]	; (19344 <send_cmd+0x17c>)
   19292:	482d      	ldr	r0, [pc, #180]	; (19348 <send_cmd+0x180>)
   19294:	f00d f9c6 	bl	26624 <assert_print>
   19298:	4040      	eors	r0, r0
   1929a:	f380 8811 	msr	BASEPRI, r0
   1929e:	f04f 0003 	mov.w	r0, #3
   192a2:	df02      	svc	2
   192a4:	e79b      	b.n	191de <send_cmd+0x16>
		LOG_ERR("Unable to send to driver (err %d)", err);
   192a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   192aa:	e7df      	b.n	1926c <send_cmd+0xa4>
   192ac:	f06f 041b 	mvn.w	r4, #27
   192b0:	b13a      	cbz	r2, 192c2 <send_cmd+0xfa>
   192b2:	2103      	movs	r1, #3
   192b4:	7139      	strb	r1, [r7, #4]
   192b6:	2100      	movs	r1, #0
   192b8:	7179      	strb	r1, [r7, #5]
   192ba:	71b9      	strb	r1, [r7, #6]
   192bc:	71f9      	strb	r1, [r7, #7]
   192be:	6878      	ldr	r0, [r7, #4]
   192c0:	6118      	str	r0, [r3, #16]
   192c2:	2100      	movs	r1, #0
   192c4:	f36f 0100 	bfc	r1, #0, #1
   192c8:	f36f 0141 	bfc	r1, #1, #1
   192cc:	f36f 0182 	bfc	r1, #2, #1
   192d0:	f36f 01c5 	bfc	r1, #3, #3
   192d4:	2301      	movs	r3, #1
   192d6:	f363 1188 	bfi	r1, r3, #6, #3
   192da:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   192de:	f363 2152 	bfi	r1, r3, #9, #10
   192e2:	f36f 41de 	bfc	r1, #19, #12
   192e6:	f36f 71df 	bfc	r1, #31, #1
   192ea:	2300      	movs	r3, #0
   192ec:	4811      	ldr	r0, [pc, #68]	; (19334 <send_cmd+0x16c>)
   192ee:	f00d fcb2 	bl	26c56 <z_impl_z_log_msg_static_create>
   192f2:	46b5      	mov	sp, r6
	z_impl_k_sem_give(sem);
   192f4:	480d      	ldr	r0, [pc, #52]	; (1932c <send_cmd+0x164>)
   192f6:	f00a fe8f 	bl	24018 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   192fa:	4628      	mov	r0, r5
   192fc:	f010 fcbc 	bl	29c78 <net_buf_id>
   19300:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   19304:	4b11      	ldr	r3, [pc, #68]	; (1934c <send_cmd+0x184>)
   19306:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   1930a:	462a      	mov	r2, r5
   1930c:	211f      	movs	r1, #31
   1930e:	8858      	ldrh	r0, [r3, #2]
   19310:	f7fe f9ee 	bl	176f0 <hci_cmd_done>
		net_buf_unref(buf);
   19314:	4628      	mov	r0, r5
   19316:	f010 fd99 	bl	29e4c <net_buf_unref>
}
   1931a:	3724      	adds	r7, #36	; 0x24
   1931c:	46bd      	mov	sp, r7
   1931e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to send to driver (err %d)", err);
   19320:	f06f 041b 	mvn.w	r4, #27
   19324:	e7c4      	b.n	192b0 <send_cmd+0xe8>
   19326:	bf00      	nop
   19328:	200004ac 	.word	0x200004ac
   1932c:	20000488 	.word	0x20000488
   19330:	0002e754 	.word	0x0002e754
   19334:	0002d0bc 	.word	0x0002d0bc
   19338:	20000370 	.word	0x20000370
   1933c:	0002e714 	.word	0x0002e714
   19340:	0002e41c 	.word	0x0002e41c
   19344:	0002f50c 	.word	0x0002f50c
   19348:	0002e46c 	.word	0x0002e46c
   1934c:	20007b40 	.word	0x20007b40

00019350 <process_events>:
{
   19350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19354:	b082      	sub	sp, #8
   19356:	af00      	add	r7, sp, #0
   19358:	4604      	mov	r4, r0
   1935a:	460d      	mov	r5, r1
	LOG_DBG("count %d", count);
   1935c:	e03c      	b.n	193d8 <process_events+0x88>
				send_cmd();
   1935e:	f7ff ff33 	bl	191c8 <send_cmd>
   19362:	e037      	b.n	193d4 <process_events+0x84>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   19364:	46e8      	mov	r8, sp
   19366:	b088      	sub	sp, #32
   19368:	4669      	mov	r1, sp
   1936a:	f111 0210 	adds.w	r2, r1, #16
   1936e:	d045      	beq.n	193fc <process_events+0xac>
   19370:	200c      	movs	r0, #12
   19372:	b152      	cbz	r2, 1938a <process_events+0x3a>
   19374:	4684      	mov	ip, r0
   19376:	2804      	cmp	r0, #4
   19378:	dd03      	ble.n	19382 <process_events+0x32>
   1937a:	f8df e094 	ldr.w	lr, [pc, #148]	; 19410 <process_events+0xc0>
   1937e:	f8c1 e014 	str.w	lr, [r1, #20]
   19382:	f1bc 0f08 	cmp.w	ip, #8
   19386:	dd00      	ble.n	1938a <process_events+0x3a>
   19388:	618b      	str	r3, [r1, #24]
   1938a:	280b      	cmp	r0, #11
   1938c:	dd39      	ble.n	19402 <process_events+0xb2>
   1938e:	230c      	movs	r3, #12
   19390:	b13a      	cbz	r2, 193a2 <process_events+0x52>
   19392:	2003      	movs	r0, #3
   19394:	7138      	strb	r0, [r7, #4]
   19396:	2000      	movs	r0, #0
   19398:	7178      	strb	r0, [r7, #5]
   1939a:	71b8      	strb	r0, [r7, #6]
   1939c:	71f8      	strb	r0, [r7, #7]
   1939e:	6878      	ldr	r0, [r7, #4]
   193a0:	6108      	str	r0, [r1, #16]
   193a2:	f36f 0600 	bfc	r6, #0, #1
   193a6:	f36f 0641 	bfc	r6, #1, #1
   193aa:	f36f 0682 	bfc	r6, #2, #1
   193ae:	f36f 06c5 	bfc	r6, #3, #3
   193b2:	2102      	movs	r1, #2
   193b4:	f361 1688 	bfi	r6, r1, #6, #3
   193b8:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   193bc:	f363 2652 	bfi	r6, r3, #9, #10
   193c0:	f36f 46de 	bfc	r6, #19, #12
   193c4:	f36f 76df 	bfc	r6, #31, #1
   193c8:	2300      	movs	r3, #0
   193ca:	4631      	mov	r1, r6
   193cc:	4811      	ldr	r0, [pc, #68]	; (19414 <process_events+0xc4>)
   193ce:	f00d fc42 	bl	26c56 <z_impl_z_log_msg_static_create>
   193d2:	46c5      	mov	sp, r8
	for (; count; ev++, count--) {
   193d4:	3414      	adds	r4, #20
   193d6:	3d01      	subs	r5, #1
   193d8:	b1b5      	cbz	r5, 19408 <process_events+0xb8>
		switch (ev->state) {
   193da:	68e3      	ldr	r3, [r4, #12]
   193dc:	f3c3 3386 	ubfx	r3, r3, #14, #7
   193e0:	2b01      	cmp	r3, #1
   193e2:	d9f7      	bls.n	193d4 <process_events+0x84>
   193e4:	2b04      	cmp	r3, #4
   193e6:	d1bd      	bne.n	19364 <process_events+0x14>
			if (ev->tag == BT_EVENT_CMD_TX) {
   193e8:	7b23      	ldrb	r3, [r4, #12]
   193ea:	2b00      	cmp	r3, #0
   193ec:	d0b7      	beq.n	1935e <process_events+0xe>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   193ee:	2b01      	cmp	r3, #1
   193f0:	d1f0      	bne.n	193d4 <process_events+0x84>
					conn = CONTAINER_OF(ev->fifo,
   193f2:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
   193f4:	3838      	subs	r0, #56	; 0x38
   193f6:	f002 f8ab 	bl	1b550 <bt_conn_process_tx>
   193fa:	e7eb      	b.n	193d4 <process_events+0x84>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   193fc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   19400:	e7b7      	b.n	19372 <process_events+0x22>
   19402:	f06f 031b 	mvn.w	r3, #27
   19406:	e7c3      	b.n	19390 <process_events+0x40>
}
   19408:	3708      	adds	r7, #8
   1940a:	46bd      	mov	sp, r7
   1940c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19410:	0002e770 	.word	0x0002e770
   19414:	0002d0bc 	.word	0x0002d0bc

00019418 <hci_tx_thread>:
{
   19418:	b538      	push	{r3, r4, r5, lr}
   1941a:	e012      	b.n	19442 <hci_tx_thread+0x2a>
		BT_ASSERT(err == 0);
   1941c:	f640 13e6 	movw	r3, #2534	; 0x9e6
   19420:	4a12      	ldr	r2, [pc, #72]	; (1946c <hci_tx_thread+0x54>)
   19422:	4913      	ldr	r1, [pc, #76]	; (19470 <hci_tx_thread+0x58>)
   19424:	4813      	ldr	r0, [pc, #76]	; (19474 <hci_tx_thread+0x5c>)
   19426:	f00d f8fd 	bl	26624 <assert_print>
   1942a:	4040      	eors	r0, r0
   1942c:	f380 8811 	msr	BASEPRI, r0
   19430:	f04f 0003 	mov.w	r0, #3
   19434:	df02      	svc	2
		process_events(events, ev_count);
   19436:	4621      	mov	r1, r4
   19438:	480f      	ldr	r0, [pc, #60]	; (19478 <hci_tx_thread+0x60>)
   1943a:	f7ff ff89 	bl	19350 <process_events>
	z_impl_k_yield();
   1943e:	f00b fab5 	bl	249ac <z_impl_k_yield>
		events[0].state = K_POLL_STATE_NOT_READY;
   19442:	4d0d      	ldr	r5, [pc, #52]	; (19478 <hci_tx_thread+0x60>)
   19444:	68eb      	ldr	r3, [r5, #12]
   19446:	f36f 3394 	bfc	r3, #14, #7
   1944a:	60eb      	str	r3, [r5, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1944c:	f105 0014 	add.w	r0, r5, #20
   19450:	f001 fb84 	bl	1ab5c <bt_conn_prepare_events>
   19454:	1c44      	adds	r4, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   19456:	f04f 32ff 	mov.w	r2, #4294967295
   1945a:	f04f 33ff 	mov.w	r3, #4294967295
   1945e:	4621      	mov	r1, r4
   19460:	4628      	mov	r0, r5
   19462:	f00b fe1b 	bl	2509c <z_impl_k_poll>
		BT_ASSERT(err == 0);
   19466:	2800      	cmp	r0, #0
   19468:	d1d8      	bne.n	1941c <hci_tx_thread+0x4>
   1946a:	e7e4      	b.n	19436 <hci_tx_thread+0x1e>
   1946c:	0002e41c 	.word	0x0002e41c
   19470:	0002e538 	.word	0x0002e538
   19474:	0002e46c 	.word	0x0002e46c
   19478:	200006e0 	.word	0x200006e0

0001947c <hci_event_prio>:
{
   1947c:	b570      	push	{r4, r5, r6, lr}
   1947e:	b082      	sub	sp, #8
   19480:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   19482:	f100 050c 	add.w	r5, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   19486:	4628      	mov	r0, r5
   19488:	f010 fd69 	bl	29f5e <net_buf_simple_headroom>
   1948c:	f8ad 0004 	strh.w	r0, [sp, #4]
	state->len = buf->len;
   19490:	8a23      	ldrh	r3, [r4, #16]
   19492:	f8ad 3006 	strh.w	r3, [sp, #6]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   19496:	2b01      	cmp	r3, #1
   19498:	d91e      	bls.n	194d8 <hci_event_prio+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   1949a:	2102      	movs	r1, #2
   1949c:	4628      	mov	r0, r5
   1949e:	f010 fd46 	bl	29f2e <net_buf_simple_pull_mem>
   194a2:	4606      	mov	r6, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   194a4:	7800      	ldrb	r0, [r0, #0]
   194a6:	f00e f912 	bl	276ce <bt_hci_evt_get_flags>
   194aa:	4605      	mov	r5, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   194ac:	f010 0f01 	tst.w	r0, #1
   194b0:	d020      	beq.n	194f4 <hci_event_prio+0x78>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   194b2:	2305      	movs	r3, #5
   194b4:	4a18      	ldr	r2, [pc, #96]	; (19518 <hci_event_prio+0x9c>)
   194b6:	4621      	mov	r1, r4
   194b8:	7830      	ldrb	r0, [r6, #0]
   194ba:	f7fe faf7 	bl	17aac <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   194be:	f015 0f02 	tst.w	r5, #2
   194c2:	d025      	beq.n	19510 <hci_event_prio+0x94>
	buf->data = buf->__buf + state->offset;
   194c4:	6963      	ldr	r3, [r4, #20]
   194c6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   194ca:	4413      	add	r3, r2
   194cc:	60e3      	str	r3, [r4, #12]
	buf->len = state->len;
   194ce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   194d2:	8223      	strh	r3, [r4, #16]
}
   194d4:	b002      	add	sp, #8
   194d6:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   194d8:	f640 537b 	movw	r3, #3451	; 0xd7b
   194dc:	4a0f      	ldr	r2, [pc, #60]	; (1951c <hci_event_prio+0xa0>)
   194de:	4910      	ldr	r1, [pc, #64]	; (19520 <hci_event_prio+0xa4>)
   194e0:	4810      	ldr	r0, [pc, #64]	; (19524 <hci_event_prio+0xa8>)
   194e2:	f00d f89f 	bl	26624 <assert_print>
   194e6:	4040      	eors	r0, r0
   194e8:	f380 8811 	msr	BASEPRI, r0
   194ec:	f04f 0003 	mov.w	r0, #3
   194f0:	df02      	svc	2
   194f2:	e7d2      	b.n	1949a <hci_event_prio+0x1e>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   194f4:	f640 537f 	movw	r3, #3455	; 0xd7f
   194f8:	4a08      	ldr	r2, [pc, #32]	; (1951c <hci_event_prio+0xa0>)
   194fa:	490b      	ldr	r1, [pc, #44]	; (19528 <hci_event_prio+0xac>)
   194fc:	4809      	ldr	r0, [pc, #36]	; (19524 <hci_event_prio+0xa8>)
   194fe:	f00d f891 	bl	26624 <assert_print>
   19502:	4040      	eors	r0, r0
   19504:	f380 8811 	msr	BASEPRI, r0
   19508:	f04f 0003 	mov.w	r0, #3
   1950c:	df02      	svc	2
   1950e:	e7d0      	b.n	194b2 <hci_event_prio+0x36>
		net_buf_unref(buf);
   19510:	4620      	mov	r0, r4
   19512:	f010 fc9b 	bl	29e4c <net_buf_unref>
}
   19516:	e7dd      	b.n	194d4 <hci_event_prio+0x58>
   19518:	0002e848 	.word	0x0002e848
   1951c:	0002e41c 	.word	0x0002e41c
   19520:	0002e450 	.word	0x0002e450
   19524:	0002e46c 	.word	0x0002e46c
   19528:	0002e794 	.word	0x0002e794

0001952c <bt_recv>:
{
   1952c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1952e:	b083      	sub	sp, #12
   19530:	af00      	add	r7, sp, #0
   19532:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   19534:	7e03      	ldrb	r3, [r0, #24]
	switch (bt_buf_get_type(buf)) {
   19536:	2b01      	cmp	r3, #1
   19538:	d007      	beq.n	1954a <bt_recv+0x1e>
   1953a:	2b03      	cmp	r3, #3
   1953c:	d11b      	bne.n	19576 <bt_recv+0x4a>
		rx_queue_put(buf);
   1953e:	f7fe fb7f 	bl	17c40 <rx_queue_put>
		return 0;
   19542:	2000      	movs	r0, #0
}
   19544:	370c      	adds	r7, #12
   19546:	46bd      	mov	sp, r7
   19548:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct bt_hci_evt_hdr *hdr = (void *)buf->data;
   1954a:	68c3      	ldr	r3, [r0, #12]
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1954c:	7818      	ldrb	r0, [r3, #0]
   1954e:	f00e f8be 	bl	276ce <bt_hci_evt_get_flags>
   19552:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   19554:	f010 0f01 	tst.w	r0, #1
   19558:	d104      	bne.n	19564 <bt_recv+0x38>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1955a:	f015 0f02 	tst.w	r5, #2
   1955e:	d105      	bne.n	1956c <bt_recv+0x40>
		return 0;
   19560:	2000      	movs	r0, #0
   19562:	e7ef      	b.n	19544 <bt_recv+0x18>
			hci_event_prio(buf);
   19564:	4620      	mov	r0, r4
   19566:	f7ff ff89 	bl	1947c <hci_event_prio>
   1956a:	e7f6      	b.n	1955a <bt_recv+0x2e>
			rx_queue_put(buf);
   1956c:	4620      	mov	r0, r4
   1956e:	f7fe fb67 	bl	17c40 <rx_queue_put>
		return 0;
   19572:	2000      	movs	r0, #0
   19574:	e7e6      	b.n	19544 <bt_recv+0x18>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   19576:	466d      	mov	r5, sp
   19578:	b088      	sub	sp, #32
   1957a:	4669      	mov	r1, sp
   1957c:	f111 0210 	adds.w	r2, r1, #16
   19580:	d035      	beq.n	195ee <bt_recv+0xc2>
   19582:	200c      	movs	r0, #12
   19584:	b142      	cbz	r2, 19598 <bt_recv+0x6c>
   19586:	4684      	mov	ip, r0
   19588:	2804      	cmp	r0, #4
   1958a:	dd01      	ble.n	19590 <bt_recv+0x64>
   1958c:	4e1b      	ldr	r6, [pc, #108]	; (195fc <bt_recv+0xd0>)
   1958e:	614e      	str	r6, [r1, #20]
   19590:	f1bc 0f08 	cmp.w	ip, #8
   19594:	dd00      	ble.n	19598 <bt_recv+0x6c>
   19596:	618b      	str	r3, [r1, #24]
   19598:	280b      	cmp	r0, #11
   1959a:	dd2b      	ble.n	195f4 <bt_recv+0xc8>
   1959c:	230c      	movs	r3, #12
   1959e:	b13a      	cbz	r2, 195b0 <bt_recv+0x84>
   195a0:	2003      	movs	r0, #3
   195a2:	7138      	strb	r0, [r7, #4]
   195a4:	2000      	movs	r0, #0
   195a6:	7178      	strb	r0, [r7, #5]
   195a8:	71b8      	strb	r0, [r7, #6]
   195aa:	71f8      	strb	r0, [r7, #7]
   195ac:	6878      	ldr	r0, [r7, #4]
   195ae:	6108      	str	r0, [r1, #16]
   195b0:	2100      	movs	r1, #0
   195b2:	f36f 0100 	bfc	r1, #0, #1
   195b6:	f36f 0141 	bfc	r1, #1, #1
   195ba:	f36f 0182 	bfc	r1, #2, #1
   195be:	f36f 01c5 	bfc	r1, #3, #3
   195c2:	2001      	movs	r0, #1
   195c4:	f360 1188 	bfi	r1, r0, #6, #3
   195c8:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   195cc:	f363 2152 	bfi	r1, r3, #9, #10
   195d0:	f36f 41de 	bfc	r1, #19, #12
   195d4:	f36f 71df 	bfc	r1, #31, #1
   195d8:	2300      	movs	r3, #0
   195da:	4809      	ldr	r0, [pc, #36]	; (19600 <bt_recv+0xd4>)
   195dc:	f00d fb3b 	bl	26c56 <z_impl_z_log_msg_static_create>
   195e0:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   195e2:	4620      	mov	r0, r4
   195e4:	f010 fc32 	bl	29e4c <net_buf_unref>
		return -EINVAL;
   195e8:	f06f 0015 	mvn.w	r0, #21
   195ec:	e7aa      	b.n	19544 <bt_recv+0x18>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   195ee:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   195f2:	e7c7      	b.n	19584 <bt_recv+0x58>
   195f4:	f06f 031b 	mvn.w	r3, #27
   195f8:	e7d1      	b.n	1959e <bt_recv+0x72>
   195fa:	bf00      	nop
   195fc:	0002e7b0 	.word	0x0002e7b0
   19600:	0002d0bc 	.word	0x0002d0bc

00019604 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   19604:	4b0a      	ldr	r3, [pc, #40]	; (19630 <bt_hci_driver_register+0x2c>)
   19606:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   1960a:	b943      	cbnz	r3, 1961e <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
   1960c:	68c3      	ldr	r3, [r0, #12]
   1960e:	b14b      	cbz	r3, 19624 <bt_hci_driver_register+0x20>
   19610:	6943      	ldr	r3, [r0, #20]
   19612:	b153      	cbz	r3, 1962a <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
   19614:	4b06      	ldr	r3, [pc, #24]	; (19630 <bt_hci_driver_register+0x2c>)
   19616:	f8c3 0154 	str.w	r0, [r3, #340]	; 0x154
	return 0;
   1961a:	2000      	movs	r0, #0
   1961c:	4770      	bx	lr
		return -EALREADY;
   1961e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   19622:	4770      	bx	lr
		return -EINVAL;
   19624:	f06f 0015 	mvn.w	r0, #21
   19628:	4770      	bx	lr
   1962a:	f06f 0015 	mvn.w	r0, #21
}
   1962e:	4770      	bx	lr
   19630:	20000370 	.word	0x20000370

00019634 <bt_finalize_init>:
{
   19634:	b508      	push	{r3, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19636:	4b08      	ldr	r3, [pc, #32]	; (19658 <bt_finalize_init+0x24>)
   19638:	f3bf 8f5b 	dmb	ish
   1963c:	e853 1f00 	ldrex	r1, [r3]
   19640:	f041 0104 	orr.w	r1, r1, #4
   19644:	e843 1200 	strex	r2, r1, [r3]
   19648:	2a00      	cmp	r2, #0
   1964a:	d1f7      	bne.n	1963c <bt_finalize_init+0x8>
   1964c:	f3bf 8f5b 	dmb	ish
		bt_le_scan_update(false);
   19650:	2000      	movs	r0, #0
   19652:	f000 fd3f 	bl	1a0d4 <bt_le_scan_update>
}
   19656:	bd08      	pop	{r3, pc}
   19658:	2000043c 	.word	0x2000043c

0001965c <init_work>:
{
   1965c:	b508      	push	{r3, lr}
	err = bt_init();
   1965e:	f00e f980 	bl	27962 <bt_init>
	if (ready_cb) {
   19662:	4b02      	ldr	r3, [pc, #8]	; (1966c <init_work+0x10>)
   19664:	681b      	ldr	r3, [r3, #0]
   19666:	b103      	cbz	r3, 1966a <init_work+0xe>
		ready_cb(err);
   19668:	4798      	blx	r3
}
   1966a:	bd08      	pop	{r3, pc}
   1966c:	20007b58 	.word	0x20007b58

00019670 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   19670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19674:	b090      	sub	sp, #64	; 0x40
   19676:	af08      	add	r7, sp, #32
	int err;

	if (!bt_dev.drv) {
   19678:	4b69      	ldr	r3, [pc, #420]	; (19820 <bt_enable+0x1b0>)
   1967a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   1967e:	2b00      	cmp	r3, #0
   19680:	d063      	beq.n	1974a <bt_enable+0xda>
   19682:	4605      	mov	r5, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19684:	4b67      	ldr	r3, [pc, #412]	; (19824 <bt_enable+0x1b4>)
   19686:	f3bf 8f5b 	dmb	ish
   1968a:	e853 2f00 	ldrex	r2, [r3]
   1968e:	f022 0202 	bic.w	r2, r2, #2
   19692:	e843 2100 	strex	r1, r2, [r3]
   19696:	2900      	cmp	r1, #0
   19698:	d1f7      	bne.n	1968a <bt_enable+0x1a>
   1969a:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1969e:	f3bf 8f5b 	dmb	ish
   196a2:	e853 2f00 	ldrex	r2, [r3]
   196a6:	f042 0101 	orr.w	r1, r2, #1
   196aa:	e843 1000 	strex	r0, r1, [r3]
   196ae:	2800      	cmp	r0, #0
   196b0:	d1f7      	bne.n	196a2 <bt_enable+0x32>
   196b2:	f3bf 8f5b 	dmb	ish
		return -ENODEV;
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_DISABLE);

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   196b6:	f012 0f01 	tst.w	r2, #1
   196ba:	f040 80ae 	bne.w	1981a <bt_enable+0x1aa>
		if (err) {
			LOG_WRN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   196be:	4b5a      	ldr	r3, [pc, #360]	; (19828 <bt_enable+0x1b8>)
   196c0:	601d      	str	r5, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   196c2:	4e5a      	ldr	r6, [pc, #360]	; (1982c <bt_enable+0x1bc>)
   196c4:	2201      	movs	r2, #1
   196c6:	4611      	mov	r1, r2
   196c8:	4630      	mov	r0, r6
   196ca:	f012 fd24 	bl	2c116 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   196ce:	f106 0024 	add.w	r0, r6, #36	; 0x24
   196d2:	f012 fcfd 	bl	2c0d0 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   196d6:	f8df 8158 	ldr.w	r8, [pc, #344]	; 19830 <bt_enable+0x1c0>
   196da:	2200      	movs	r2, #0
   196dc:	2300      	movs	r3, #0
   196de:	e9cd 2306 	strd	r2, r3, [sp, #24]
   196e2:	2400      	movs	r4, #0
   196e4:	9404      	str	r4, [sp, #16]
   196e6:	f06f 0308 	mvn.w	r3, #8
   196ea:	9303      	str	r3, [sp, #12]
   196ec:	9402      	str	r4, [sp, #8]
   196ee:	9401      	str	r4, [sp, #4]
   196f0:	9400      	str	r4, [sp, #0]
   196f2:	4b50      	ldr	r3, [pc, #320]	; (19834 <bt_enable+0x1c4>)
   196f4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   196f8:	494f      	ldr	r1, [pc, #316]	; (19838 <bt_enable+0x1c8>)
   196fa:	4640      	mov	r0, r8
   196fc:	f012 fc10 	bl	2bf20 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   19700:	494e      	ldr	r1, [pc, #312]	; (1983c <bt_enable+0x1cc>)
   19702:	4640      	mov	r0, r8
   19704:	f00a fa9c 	bl	23c40 <z_impl_k_thread_name_set>
			0, K_NO_WAIT);
	k_thread_name_set(&tx_thread_data, "BT TX");

#if defined(CONFIG_BT_RECV_WORKQ_BT)
	/* RX thread */
	k_work_queue_init(&bt_workq);
   19708:	f8df 8134 	ldr.w	r8, [pc, #308]	; 19840 <bt_enable+0x1d0>
   1970c:	4640      	mov	r0, r8
   1970e:	f012 fe0f 	bl	2c330 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   19712:	9400      	str	r4, [sp, #0]
   19714:	f06f 0307 	mvn.w	r3, #7
   19718:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1971c:	4949      	ldr	r1, [pc, #292]	; (19844 <bt_enable+0x1d4>)
   1971e:	4640      	mov	r0, r8
   19720:	f00a fe04 	bl	2432c <k_work_queue_start>
   19724:	4948      	ldr	r1, [pc, #288]	; (19848 <bt_enable+0x1d8>)
   19726:	4640      	mov	r0, r8
   19728:	f00a fa8a 	bl	23c40 <z_impl_k_thread_name_set>
			   CONFIG_BT_RX_STACK_SIZE,
			   K_PRIO_COOP(CONFIG_BT_RX_PRIO), NULL);
	k_thread_name_set(&bt_workq.thread, "BT RX");
#endif

	err = bt_dev.drv->open();
   1972c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   1972e:	68db      	ldr	r3, [r3, #12]
   19730:	4798      	blx	r3
	if (err) {
   19732:	4604      	mov	r4, r0
   19734:	bb70      	cbnz	r0, 19794 <bt_enable+0x124>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   19736:	2d00      	cmp	r5, #0
   19738:	d06b      	beq.n	19812 <bt_enable+0x1a2>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
   1973a:	4844      	ldr	r0, [pc, #272]	; (1984c <bt_enable+0x1dc>)
   1973c:	f00a fdee 	bl	2431c <k_work_submit>
	return 0;
}
   19740:	4620      	mov	r0, r4
   19742:	3720      	adds	r7, #32
   19744:	46bd      	mov	sp, r7
   19746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("No HCI driver registered");
   1974a:	4b41      	ldr	r3, [pc, #260]	; (19850 <bt_enable+0x1e0>)
   1974c:	61fb      	str	r3, [r7, #28]
   1974e:	2302      	movs	r3, #2
   19750:	713b      	strb	r3, [r7, #4]
   19752:	2300      	movs	r3, #0
   19754:	717b      	strb	r3, [r7, #5]
   19756:	71bb      	strb	r3, [r7, #6]
   19758:	71fb      	strb	r3, [r7, #7]
   1975a:	687a      	ldr	r2, [r7, #4]
   1975c:	61ba      	str	r2, [r7, #24]
   1975e:	4619      	mov	r1, r3
   19760:	f363 0100 	bfi	r1, r3, #0, #1
   19764:	f363 0141 	bfi	r1, r3, #1, #1
   19768:	f363 0182 	bfi	r1, r3, #2, #1
   1976c:	f363 01c5 	bfi	r1, r3, #3, #3
   19770:	2201      	movs	r2, #1
   19772:	f362 1188 	bfi	r1, r2, #6, #3
   19776:	2208      	movs	r2, #8
   19778:	f362 2152 	bfi	r1, r2, #9, #10
   1977c:	f363 41de 	bfi	r1, r3, #19, #12
   19780:	f363 71df 	bfi	r1, r3, #31, #1
   19784:	f107 0218 	add.w	r2, r7, #24
   19788:	4832      	ldr	r0, [pc, #200]	; (19854 <bt_enable+0x1e4>)
   1978a:	f00d fa64 	bl	26c56 <z_impl_z_log_msg_static_create>
		return -ENODEV;
   1978e:	f06f 0412 	mvn.w	r4, #18
   19792:	e7d5      	b.n	19740 <bt_enable+0xd0>
		LOG_ERR("HCI driver open failed (%d)", err);
   19794:	466e      	mov	r6, sp
   19796:	b088      	sub	sp, #32
   19798:	4633      	mov	r3, r6
   1979a:	f116 0210 	adds.w	r2, r6, #16
   1979e:	d00d      	beq.n	197bc <bt_enable+0x14c>
   197a0:	210c      	movs	r1, #12
   197a2:	b13a      	cbz	r2, 197b4 <bt_enable+0x144>
   197a4:	4608      	mov	r0, r1
   197a6:	2904      	cmp	r1, #4
   197a8:	dd01      	ble.n	197ae <bt_enable+0x13e>
   197aa:	4d2b      	ldr	r5, [pc, #172]	; (19858 <bt_enable+0x1e8>)
   197ac:	615d      	str	r5, [r3, #20]
   197ae:	2808      	cmp	r0, #8
   197b0:	dd07      	ble.n	197c2 <bt_enable+0x152>
   197b2:	619c      	str	r4, [r3, #24]
   197b4:	290b      	cmp	r1, #11
   197b6:	dd29      	ble.n	1980c <bt_enable+0x19c>
   197b8:	250c      	movs	r5, #12
   197ba:	e004      	b.n	197c6 <bt_enable+0x156>
   197bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   197c0:	e7ef      	b.n	197a2 <bt_enable+0x132>
   197c2:	f06f 051b 	mvn.w	r5, #27
   197c6:	b13a      	cbz	r2, 197d8 <bt_enable+0x168>
   197c8:	2103      	movs	r1, #3
   197ca:	7139      	strb	r1, [r7, #4]
   197cc:	2100      	movs	r1, #0
   197ce:	7179      	strb	r1, [r7, #5]
   197d0:	71b9      	strb	r1, [r7, #6]
   197d2:	71f9      	strb	r1, [r7, #7]
   197d4:	6878      	ldr	r0, [r7, #4]
   197d6:	6118      	str	r0, [r3, #16]
   197d8:	2100      	movs	r1, #0
   197da:	f36f 0100 	bfc	r1, #0, #1
   197de:	f36f 0141 	bfc	r1, #1, #1
   197e2:	f36f 0182 	bfc	r1, #2, #1
   197e6:	f36f 01c5 	bfc	r1, #3, #3
   197ea:	2301      	movs	r3, #1
   197ec:	f363 1188 	bfi	r1, r3, #6, #3
   197f0:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   197f4:	f363 2152 	bfi	r1, r3, #9, #10
   197f8:	f36f 41de 	bfc	r1, #19, #12
   197fc:	f36f 71df 	bfc	r1, #31, #1
   19800:	2300      	movs	r3, #0
   19802:	4814      	ldr	r0, [pc, #80]	; (19854 <bt_enable+0x1e4>)
   19804:	f00d fa27 	bl	26c56 <z_impl_z_log_msg_static_create>
   19808:	46b5      	mov	sp, r6
		return err;
   1980a:	e799      	b.n	19740 <bt_enable+0xd0>
		LOG_ERR("HCI driver open failed (%d)", err);
   1980c:	f06f 051b 	mvn.w	r5, #27
   19810:	e7d9      	b.n	197c6 <bt_enable+0x156>
		return bt_init();
   19812:	f00e f8a6 	bl	27962 <bt_init>
   19816:	4604      	mov	r4, r0
   19818:	e792      	b.n	19740 <bt_enable+0xd0>
		return -EALREADY;
   1981a:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1981e:	e78f      	b.n	19740 <bt_enable+0xd0>
   19820:	20000370 	.word	0x20000370
   19824:	2000043c 	.word	0x2000043c
   19828:	20007b58 	.word	0x20007b58
   1982c:	20000488 	.word	0x20000488
   19830:	20002018 	.word	0x20002018
   19834:	00019419 	.word	0x00019419
   19838:	200097c0 	.word	0x200097c0
   1983c:	0002e7e0 	.word	0x0002e7e0
   19840:	200020d0 	.word	0x200020d0
   19844:	20009e00 	.word	0x20009e00
   19848:	0002e7e8 	.word	0x0002e7e8
   1984c:	2000042c 	.word	0x2000042c
   19850:	0002e7c4 	.word	0x0002e7c4
   19854:	0002d0bc 	.word	0x0002d0bc
   19858:	0002e7f0 	.word	0x0002e7f0

0001985c <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1985c:	f3bf 8f5b 	dmb	ish
   19860:	4b03      	ldr	r3, [pc, #12]	; (19870 <bt_is_ready+0x14>)
   19862:	6818      	ldr	r0, [r3, #0]
   19864:	f3bf 8f5b 	dmb	ish
   19868:	f3c0 0080 	ubfx	r0, r0, #2, #1
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   1986c:	4770      	bx	lr
   1986e:	bf00      	nop
   19870:	2000043c 	.word	0x2000043c

00019874 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   19874:	4800      	ldr	r0, [pc, #0]	; (19878 <bt_get_name+0x4>)
   19876:	4770      	bx	lr
   19878:	0002e80c 	.word	0x0002e80c

0001987c <bt_le_filter_accept_list_add>:
	}
}

#if defined(CONFIG_BT_FILTER_ACCEPT_LIST)
int bt_le_filter_accept_list_add(const bt_addr_le_t *addr)
{
   1987c:	b530      	push	{r4, r5, lr}
   1987e:	b089      	sub	sp, #36	; 0x24
   19880:	f3bf 8f5b 	dmb	ish
   19884:	4b27      	ldr	r3, [pc, #156]	; (19924 <bt_le_filter_accept_list_add+0xa8>)
   19886:	681b      	ldr	r3, [r3, #0]
   19888:	f3bf 8f5b 	dmb	ish
	struct bt_hci_cp_le_add_dev_to_fal *cp;
	struct net_buf *buf;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1988c:	f013 0f04 	tst.w	r3, #4
   19890:	d041      	beq.n	19916 <bt_le_filter_accept_list_add+0x9a>
   19892:	4604      	mov	r4, r0
		return -EAGAIN;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_FAL, sizeof(*cp));
   19894:	2107      	movs	r1, #7
   19896:	f242 0011 	movw	r0, #8209	; 0x2011
   1989a:	f7fe fc31 	bl	18100 <bt_hci_cmd_create>
	if (!buf) {
   1989e:	4605      	mov	r5, r0
   198a0:	2800      	cmp	r0, #0
   198a2:	d03b      	beq.n	1991c <bt_le_filter_accept_list_add+0xa0>
	return net_buf_simple_add(&buf->b, len);
   198a4:	2107      	movs	r1, #7
   198a6:	300c      	adds	r0, #12
   198a8:	f010 fb17 	bl	29eda <net_buf_simple_add>
	memcpy(dst, src, sizeof(*dst));
   198ac:	2207      	movs	r2, #7
   198ae:	4621      	mov	r1, r4
   198b0:	f00d fe0c 	bl	274cc <memcpy>
	}

	cp = net_buf_add(buf, sizeof(*cp));
	bt_addr_le_copy(&cp->addr, addr);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_FAL, buf, NULL);
   198b4:	2200      	movs	r2, #0
   198b6:	4629      	mov	r1, r5
   198b8:	f242 0011 	movw	r0, #8209	; 0x2011
   198bc:	f7fe fc5e 	bl	1817c <bt_hci_cmd_send_sync>
	if (err) {
   198c0:	4604      	mov	r4, r0
   198c2:	b910      	cbnz	r0, 198ca <bt_le_filter_accept_list_add+0x4e>

		return err;
	}

	return 0;
}
   198c4:	4620      	mov	r0, r4
   198c6:	b009      	add	sp, #36	; 0x24
   198c8:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Failed to add device to filter accept list");
   198ca:	4b17      	ldr	r3, [pc, #92]	; (19928 <bt_le_filter_accept_list_add+0xac>)
   198cc:	9307      	str	r3, [sp, #28]
   198ce:	2302      	movs	r3, #2
   198d0:	f88d 3004 	strb.w	r3, [sp, #4]
   198d4:	2300      	movs	r3, #0
   198d6:	f88d 3005 	strb.w	r3, [sp, #5]
   198da:	f88d 3006 	strb.w	r3, [sp, #6]
   198de:	f88d 3007 	strb.w	r3, [sp, #7]
   198e2:	9a01      	ldr	r2, [sp, #4]
   198e4:	9206      	str	r2, [sp, #24]
   198e6:	4619      	mov	r1, r3
   198e8:	f363 0100 	bfi	r1, r3, #0, #1
   198ec:	f363 0141 	bfi	r1, r3, #1, #1
   198f0:	f363 0182 	bfi	r1, r3, #2, #1
   198f4:	f363 01c5 	bfi	r1, r3, #3, #3
   198f8:	2201      	movs	r2, #1
   198fa:	f362 1188 	bfi	r1, r2, #6, #3
   198fe:	2208      	movs	r2, #8
   19900:	f362 2152 	bfi	r1, r2, #9, #10
   19904:	f363 41de 	bfi	r1, r3, #19, #12
   19908:	f363 71df 	bfi	r1, r3, #31, #1
   1990c:	aa06      	add	r2, sp, #24
   1990e:	4807      	ldr	r0, [pc, #28]	; (1992c <bt_le_filter_accept_list_add+0xb0>)
   19910:	f00d f9a1 	bl	26c56 <z_impl_z_log_msg_static_create>
		return err;
   19914:	e7d6      	b.n	198c4 <bt_le_filter_accept_list_add+0x48>
		return -EAGAIN;
   19916:	f06f 040a 	mvn.w	r4, #10
   1991a:	e7d3      	b.n	198c4 <bt_le_filter_accept_list_add+0x48>
		return -ENOBUFS;
   1991c:	f06f 0468 	mvn.w	r4, #104	; 0x68
   19920:	e7d0      	b.n	198c4 <bt_le_filter_accept_list_add+0x48>
   19922:	bf00      	nop
   19924:	2000043c 	.word	0x2000043c
   19928:	0002e81c 	.word	0x0002e81c
   1992c:	0002d0bc 	.word	0x0002d0bc

00019930 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   19930:	b570      	push	{r4, r5, r6, lr}
   19932:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   19934:	2400      	movs	r4, #0
   19936:	e001      	b.n	1993c <id_find+0xc>
   19938:	3401      	adds	r4, #1
   1993a:	b2e4      	uxtb	r4, r4
   1993c:	4b09      	ldr	r3, [pc, #36]	; (19964 <id_find+0x34>)
   1993e:	79db      	ldrb	r3, [r3, #7]
   19940:	42a3      	cmp	r3, r4
   19942:	d90b      	bls.n	1995c <id_find+0x2c>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   19944:	4626      	mov	r6, r4
   19946:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   1994a:	2207      	movs	r2, #7
   1994c:	4b05      	ldr	r3, [pc, #20]	; (19964 <id_find+0x34>)
   1994e:	4419      	add	r1, r3
   19950:	4628      	mov	r0, r5
   19952:	f00d fda9 	bl	274a8 <memcmp>
   19956:	2800      	cmp	r0, #0
   19958:	d1ee      	bne.n	19938 <id_find+0x8>
   1995a:	e001      	b.n	19960 <id_find+0x30>
			return id;
		}
	}

	return -ENOENT;
   1995c:	f06f 0601 	mvn.w	r6, #1
}
   19960:	4630      	mov	r0, r6
   19962:	bd70      	pop	{r4, r5, r6, pc}
   19964:	20000370 	.word	0x20000370

00019968 <set_random_address>:
{
   19968:	b570      	push	{r4, r5, r6, lr}
   1996a:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   1996c:	2206      	movs	r2, #6
   1996e:	4914      	ldr	r1, [pc, #80]	; (199c0 <set_random_address+0x58>)
   19970:	f00d fd9a 	bl	274a8 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   19974:	4605      	mov	r5, r0
   19976:	b908      	cbnz	r0, 1997c <set_random_address+0x14>
}
   19978:	4628      	mov	r0, r5
   1997a:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   1997c:	2106      	movs	r1, #6
   1997e:	f242 0005 	movw	r0, #8197	; 0x2005
   19982:	f7fe fbbd 	bl	18100 <bt_hci_cmd_create>
	if (!buf) {
   19986:	4605      	mov	r5, r0
   19988:	b1b8      	cbz	r0, 199ba <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1998a:	2206      	movs	r2, #6
   1998c:	4621      	mov	r1, r4
   1998e:	300c      	adds	r0, #12
   19990:	f010 faa9 	bl	29ee6 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   19994:	2200      	movs	r2, #0
   19996:	4629      	mov	r1, r5
   19998:	f242 0005 	movw	r0, #8197	; 0x2005
   1999c:	f7fe fbee 	bl	1817c <bt_hci_cmd_send_sync>
	if (err) {
   199a0:	4605      	mov	r5, r0
   199a2:	2800      	cmp	r0, #0
   199a4:	d1e8      	bne.n	19978 <set_random_address+0x10>
	memcpy(dst, src, sizeof(*dst));
   199a6:	4e06      	ldr	r6, [pc, #24]	; (199c0 <set_random_address+0x58>)
   199a8:	2206      	movs	r2, #6
   199aa:	4621      	mov	r1, r4
   199ac:	4630      	mov	r0, r6
   199ae:	f00d fd8d 	bl	274cc <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   199b2:	2301      	movs	r3, #1
   199b4:	f806 3c01 	strb.w	r3, [r6, #-1]
	return 0;
   199b8:	e7de      	b.n	19978 <set_random_address+0x10>
		return -ENOBUFS;
   199ba:	f06f 0568 	mvn.w	r5, #104	; 0x68
   199be:	e7db      	b.n	19978 <set_random_address+0x10>
   199c0:	200003d1 	.word	0x200003d1

000199c4 <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   199c4:	b570      	push	{r4, r5, r6, lr}
   199c6:	b082      	sub	sp, #8
   199c8:	4605      	mov	r5, r0
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   199ca:	460e      	mov	r6, r1
   199cc:	b129      	cbz	r1, 199da <id_create+0x16>
	return memcmp(a, b, sizeof(*a));
   199ce:	2207      	movs	r2, #7
   199d0:	4915      	ldr	r1, [pc, #84]	; (19a28 <id_create+0x64>)
   199d2:	4630      	mov	r0, r6
   199d4:	f00d fd68 	bl	274a8 <memcmp>
   199d8:	b9d8      	cbnz	r0, 19a12 <id_create+0x4e>
		bt_addr_le_t new_addr;

		do {
			int err;

			err = bt_addr_le_create_static(&new_addr);
   199da:	4668      	mov	r0, sp
   199dc:	f00d fe3f 	bl	2765e <bt_addr_le_create_static>
			if (err) {
   199e0:	4604      	mov	r4, r0
   199e2:	b998      	cbnz	r0, 19a0c <id_create+0x48>
				return err;
			}
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);
   199e4:	4668      	mov	r0, sp
   199e6:	f7ff ffa3 	bl	19930 <id_find>
   199ea:	2800      	cmp	r0, #0
   199ec:	daf5      	bge.n	199da <id_create+0x16>

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   199ee:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   199f2:	4b0e      	ldr	r3, [pc, #56]	; (19a2c <id_create+0x68>)
   199f4:	441d      	add	r5, r3
	memcpy(dst, src, sizeof(*dst));
   199f6:	2207      	movs	r2, #7
   199f8:	4669      	mov	r1, sp
   199fa:	4628      	mov	r0, r5
   199fc:	f00d fd66 	bl	274cc <memcpy>

		if (addr) {
   19a00:	b126      	cbz	r6, 19a0c <id_create+0x48>
   19a02:	2207      	movs	r2, #7
   19a04:	4629      	mov	r1, r5
   19a06:	4630      	mov	r0, r6
   19a08:	f00d fd60 	bl	274cc <memcpy>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
}
   19a0c:	4620      	mov	r0, r4
   19a0e:	b002      	add	sp, #8
   19a10:	bd70      	pop	{r4, r5, r6, pc}
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   19a12:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   19a16:	2207      	movs	r2, #7
   19a18:	4631      	mov	r1, r6
   19a1a:	4804      	ldr	r0, [pc, #16]	; (19a2c <id_create+0x68>)
   19a1c:	4428      	add	r0, r5
   19a1e:	f00d fd55 	bl	274cc <memcpy>
	return 0;
   19a22:	2400      	movs	r4, #0
}
   19a24:	e7f2      	b.n	19a0c <id_create+0x48>
   19a26:	bf00      	nop
   19a28:	0002e1f0 	.word	0x0002e1f0
   19a2c:	20000370 	.word	0x20000370

00019a30 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   19a30:	b570      	push	{r4, r5, r6, lr}
   19a32:	b08a      	sub	sp, #40	; 0x28
   19a34:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   19a36:	4605      	mov	r5, r0
   19a38:	b188      	cbz	r0, 19a5e <bt_id_create+0x2e>
	return memcmp(a, b, sizeof(*a));
   19a3a:	2207      	movs	r2, #7
   19a3c:	4938      	ldr	r1, [pc, #224]	; (19b20 <bt_id_create+0xf0>)
   19a3e:	f00d fd33 	bl	274a8 <memcmp>
   19a42:	b160      	cbz	r0, 19a5e <bt_id_create+0x2e>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   19a44:	782b      	ldrb	r3, [r5, #0]
   19a46:	2b01      	cmp	r3, #1
   19a48:	d135      	bne.n	19ab6 <bt_id_create+0x86>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
   19a4a:	79ab      	ldrb	r3, [r5, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
   19a4c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19a50:	2bc0      	cmp	r3, #192	; 0xc0
   19a52:	d130      	bne.n	19ab6 <bt_id_create+0x86>
			LOG_ERR("Only static random identity address supported");
			return -EINVAL;
		}

		if (id_find(addr) >= 0) {
   19a54:	4628      	mov	r0, r5
   19a56:	f7ff ff6b 	bl	19930 <id_find>
   19a5a:	2800      	cmp	r0, #0
   19a5c:	da56      	bge.n	19b0c <bt_id_create+0xdc>
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   19a5e:	2c00      	cmp	r4, #0
   19a60:	d157      	bne.n	19b12 <bt_id_create+0xe2>
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   19a62:	4b30      	ldr	r3, [pc, #192]	; (19b24 <bt_id_create+0xf4>)
   19a64:	79db      	ldrb	r3, [r3, #7]
   19a66:	2b01      	cmp	r3, #1
   19a68:	d056      	beq.n	19b18 <bt_id_create+0xe8>
   19a6a:	f3bf 8f5b 	dmb	ish
   19a6e:	4b2e      	ldr	r3, [pc, #184]	; (19b28 <bt_id_create+0xf8>)
   19a70:	681b      	ldr	r3, [r3, #0]
   19a72:	f3bf 8f5b 	dmb	ish
		return -ENOMEM;
	}

	/* bt_rand is not available before Bluetooth enable has been called */
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   19a76:	f013 0f01 	tst.w	r3, #1
   19a7a:	d10d      	bne.n	19a98 <bt_id_create+0x68>
		uint8_t zero_irk[16] = { 0 };
   19a7c:	2300      	movs	r3, #0
   19a7e:	9300      	str	r3, [sp, #0]
   19a80:	9301      	str	r3, [sp, #4]
   19a82:	9302      	str	r3, [sp, #8]
   19a84:	9303      	str	r3, [sp, #12]

		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   19a86:	2d00      	cmp	r5, #0
   19a88:	d03d      	beq.n	19b06 <bt_id_create+0xd6>
   19a8a:	2207      	movs	r2, #7
   19a8c:	4924      	ldr	r1, [pc, #144]	; (19b20 <bt_id_create+0xf0>)
   19a8e:	4628      	mov	r0, r5
   19a90:	f00d fd0a 	bl	274a8 <memcmp>
   19a94:	2800      	cmp	r0, #0
   19a96:	d036      	beq.n	19b06 <bt_id_create+0xd6>
		    !(irk && memcmp(irk, zero_irk, 16))) {
			return -EINVAL;
		}
	}

	new_id = bt_dev.id_count;
   19a98:	4b22      	ldr	r3, [pc, #136]	; (19b24 <bt_id_create+0xf4>)
   19a9a:	79de      	ldrb	r6, [r3, #7]
	err = id_create(new_id, addr, irk);
   19a9c:	4622      	mov	r2, r4
   19a9e:	4629      	mov	r1, r5
   19aa0:	4630      	mov	r0, r6
   19aa2:	f7ff ff8f 	bl	199c4 <id_create>
	if (err) {
   19aa6:	b920      	cbnz	r0, 19ab2 <bt_id_create+0x82>
		return err;
	} else {
		bt_dev.id_count++;
   19aa8:	4a1e      	ldr	r2, [pc, #120]	; (19b24 <bt_id_create+0xf4>)
   19aaa:	79d3      	ldrb	r3, [r2, #7]
   19aac:	3301      	adds	r3, #1
   19aae:	71d3      	strb	r3, [r2, #7]
	}

	return new_id;
   19ab0:	4630      	mov	r0, r6
}
   19ab2:	b00a      	add	sp, #40	; 0x28
   19ab4:	bd70      	pop	{r4, r5, r6, pc}
			LOG_ERR("Only static random identity address supported");
   19ab6:	4b1d      	ldr	r3, [pc, #116]	; (19b2c <bt_id_create+0xfc>)
   19ab8:	9309      	str	r3, [sp, #36]	; 0x24
   19aba:	2302      	movs	r3, #2
   19abc:	f88d 3000 	strb.w	r3, [sp]
   19ac0:	2300      	movs	r3, #0
   19ac2:	f88d 3001 	strb.w	r3, [sp, #1]
   19ac6:	f88d 3002 	strb.w	r3, [sp, #2]
   19aca:	f88d 3003 	strb.w	r3, [sp, #3]
   19ace:	9a00      	ldr	r2, [sp, #0]
   19ad0:	9208      	str	r2, [sp, #32]
   19ad2:	4619      	mov	r1, r3
   19ad4:	f363 0100 	bfi	r1, r3, #0, #1
   19ad8:	f363 0141 	bfi	r1, r3, #1, #1
   19adc:	f363 0182 	bfi	r1, r3, #2, #1
   19ae0:	f363 01c5 	bfi	r1, r3, #3, #3
   19ae4:	2201      	movs	r2, #1
   19ae6:	f362 1188 	bfi	r1, r2, #6, #3
   19aea:	2208      	movs	r2, #8
   19aec:	f362 2152 	bfi	r1, r2, #9, #10
   19af0:	f363 41de 	bfi	r1, r3, #19, #12
   19af4:	f363 71df 	bfi	r1, r3, #31, #1
   19af8:	aa08      	add	r2, sp, #32
   19afa:	480d      	ldr	r0, [pc, #52]	; (19b30 <bt_id_create+0x100>)
   19afc:	f00d f8ab 	bl	26c56 <z_impl_z_log_msg_static_create>
			return -EINVAL;
   19b00:	f06f 0015 	mvn.w	r0, #21
   19b04:	e7d5      	b.n	19ab2 <bt_id_create+0x82>
			return -EINVAL;
   19b06:	f06f 0015 	mvn.w	r0, #21
   19b0a:	e7d2      	b.n	19ab2 <bt_id_create+0x82>
			return -EALREADY;
   19b0c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   19b10:	e7cf      	b.n	19ab2 <bt_id_create+0x82>
		return -EINVAL;
   19b12:	f06f 0015 	mvn.w	r0, #21
   19b16:	e7cc      	b.n	19ab2 <bt_id_create+0x82>
		return -ENOMEM;
   19b18:	f06f 000b 	mvn.w	r0, #11
   19b1c:	e7c9      	b.n	19ab2 <bt_id_create+0x82>
   19b1e:	bf00      	nop
   19b20:	0002e1f0 	.word	0x0002e1f0
   19b24:	20000370 	.word	0x20000370
   19b28:	2000043c 	.word	0x2000043c
   19b2c:	0002e8ec 	.word	0x0002e8ec
   19b30:	0002d0c4 	.word	0x0002d0c4

00019b34 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   19b34:	b530      	push	{r4, r5, lr}
   19b36:	b08f      	sub	sp, #60	; 0x3c
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   19b38:	b1f0      	cbz	r0, 19b78 <bt_id_read_public_addr+0x44>
   19b3a:	4605      	mov	r5, r0
		LOG_WRN("Invalid input parameters");
		return 0U;
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   19b3c:	aa01      	add	r2, sp, #4
   19b3e:	2100      	movs	r1, #0
   19b40:	f241 0009 	movw	r0, #4105	; 0x1009
   19b44:	f7fe fb1a 	bl	1817c <bt_hci_cmd_send_sync>
	if (err) {
   19b48:	2800      	cmp	r0, #0
   19b4a:	d13c      	bne.n	19bc6 <bt_id_read_public_addr+0x92>
		LOG_WRN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   19b4c:	9b01      	ldr	r3, [sp, #4]
   19b4e:	68dc      	ldr	r4, [r3, #12]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   19b50:	3401      	adds	r4, #1
	return memcmp(a, b, sizeof(*a));
   19b52:	2206      	movs	r2, #6
   19b54:	4935      	ldr	r1, [pc, #212]	; (19c2c <bt_id_read_public_addr+0xf8>)
   19b56:	4620      	mov	r0, r4
   19b58:	f00d fca6 	bl	274a8 <memcmp>
   19b5c:	b130      	cbz	r0, 19b6c <bt_id_read_public_addr+0x38>
   19b5e:	2206      	movs	r2, #6
   19b60:	4933      	ldr	r1, [pc, #204]	; (19c30 <bt_id_read_public_addr+0xfc>)
   19b62:	4620      	mov	r0, r4
   19b64:	f00d fca0 	bl	274a8 <memcmp>
   19b68:	2800      	cmp	r0, #0
   19b6a:	d153      	bne.n	19c14 <bt_id_read_public_addr+0xe0>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		LOG_DBG("Controller has no public address");
		net_buf_unref(rsp);
   19b6c:	9801      	ldr	r0, [sp, #4]
   19b6e:	f010 f96d 	bl	29e4c <net_buf_unref>
		return 0U;
   19b72:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   19b74:	b00f      	add	sp, #60	; 0x3c
   19b76:	bd30      	pop	{r4, r5, pc}
		LOG_WRN("Invalid input parameters");
   19b78:	4b2e      	ldr	r3, [pc, #184]	; (19c34 <bt_id_read_public_addr+0x100>)
   19b7a:	930d      	str	r3, [sp, #52]	; 0x34
   19b7c:	2302      	movs	r3, #2
   19b7e:	f88d 3000 	strb.w	r3, [sp]
   19b82:	2400      	movs	r4, #0
   19b84:	f88d 4001 	strb.w	r4, [sp, #1]
   19b88:	f88d 4002 	strb.w	r4, [sp, #2]
   19b8c:	f88d 4003 	strb.w	r4, [sp, #3]
   19b90:	9a00      	ldr	r2, [sp, #0]
   19b92:	920c      	str	r2, [sp, #48]	; 0x30
   19b94:	4621      	mov	r1, r4
   19b96:	f364 0100 	bfi	r1, r4, #0, #1
   19b9a:	f364 0141 	bfi	r1, r4, #1, #1
   19b9e:	f364 0182 	bfi	r1, r4, #2, #1
   19ba2:	f364 01c5 	bfi	r1, r4, #3, #3
   19ba6:	f363 1188 	bfi	r1, r3, #6, #3
   19baa:	2308      	movs	r3, #8
   19bac:	f363 2152 	bfi	r1, r3, #9, #10
   19bb0:	f364 41de 	bfi	r1, r4, #19, #12
   19bb4:	f364 71df 	bfi	r1, r4, #31, #1
   19bb8:	4623      	mov	r3, r4
   19bba:	aa0c      	add	r2, sp, #48	; 0x30
   19bbc:	481e      	ldr	r0, [pc, #120]	; (19c38 <bt_id_read_public_addr+0x104>)
   19bbe:	f00d f84a 	bl	26c56 <z_impl_z_log_msg_static_create>
		return 0U;
   19bc2:	4620      	mov	r0, r4
   19bc4:	e7d6      	b.n	19b74 <bt_id_read_public_addr+0x40>
		LOG_WRN("Failed to read public address");
   19bc6:	4b1d      	ldr	r3, [pc, #116]	; (19c3c <bt_id_read_public_addr+0x108>)
   19bc8:	9307      	str	r3, [sp, #28]
   19bca:	2302      	movs	r3, #2
   19bcc:	f88d 3000 	strb.w	r3, [sp]
   19bd0:	2400      	movs	r4, #0
   19bd2:	f88d 4001 	strb.w	r4, [sp, #1]
   19bd6:	f88d 4002 	strb.w	r4, [sp, #2]
   19bda:	f88d 4003 	strb.w	r4, [sp, #3]
   19bde:	9a00      	ldr	r2, [sp, #0]
   19be0:	9206      	str	r2, [sp, #24]
   19be2:	4621      	mov	r1, r4
   19be4:	f364 0100 	bfi	r1, r4, #0, #1
   19be8:	f364 0141 	bfi	r1, r4, #1, #1
   19bec:	f364 0182 	bfi	r1, r4, #2, #1
   19bf0:	f364 01c5 	bfi	r1, r4, #3, #3
   19bf4:	f363 1188 	bfi	r1, r3, #6, #3
   19bf8:	2308      	movs	r3, #8
   19bfa:	f363 2152 	bfi	r1, r3, #9, #10
   19bfe:	f364 41de 	bfi	r1, r4, #19, #12
   19c02:	f364 71df 	bfi	r1, r4, #31, #1
   19c06:	4623      	mov	r3, r4
   19c08:	aa06      	add	r2, sp, #24
   19c0a:	480b      	ldr	r0, [pc, #44]	; (19c38 <bt_id_read_public_addr+0x104>)
   19c0c:	f00d f823 	bl	26c56 <z_impl_z_log_msg_static_create>
		return 0U;
   19c10:	4620      	mov	r0, r4
   19c12:	e7af      	b.n	19b74 <bt_id_read_public_addr+0x40>
	memcpy(dst, src, sizeof(*dst));
   19c14:	2206      	movs	r2, #6
   19c16:	4621      	mov	r1, r4
   19c18:	1c68      	adds	r0, r5, #1
   19c1a:	f00d fc57 	bl	274cc <memcpy>
	addr->type = BT_ADDR_LE_PUBLIC;
   19c1e:	2300      	movs	r3, #0
   19c20:	702b      	strb	r3, [r5, #0]
	net_buf_unref(rsp);
   19c22:	9801      	ldr	r0, [sp, #4]
   19c24:	f010 f912 	bl	29e4c <net_buf_unref>
	return 1U;
   19c28:	2001      	movs	r0, #1
   19c2a:	e7a3      	b.n	19b74 <bt_id_read_public_addr+0x40>
   19c2c:	0002e200 	.word	0x0002e200
   19c30:	0002e1f8 	.word	0x0002e1f8
   19c34:	0002e91c 	.word	0x0002e91c
   19c38:	0002d0c4 	.word	0x0002d0c4
   19c3c:	0002e938 	.word	0x0002e938

00019c40 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   19c40:	b500      	push	{lr}
   19c42:	b083      	sub	sp, #12
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   19c44:	4668      	mov	r0, sp
   19c46:	f7ff ff75 	bl	19b34 <bt_id_read_public_addr>
   19c4a:	4b06      	ldr	r3, [pc, #24]	; (19c64 <bt_setup_public_id_addr+0x24>)
   19c4c:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   19c4e:	b918      	cbnz	r0, 19c58 <bt_setup_public_id_addr+0x18>
		return 0;
   19c50:	2000      	movs	r0, #0
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
}
   19c52:	b003      	add	sp, #12
   19c54:	f85d fb04 	ldr.w	pc, [sp], #4
	return id_create(BT_ID_DEFAULT, &addr, irk);
   19c58:	2200      	movs	r2, #0
   19c5a:	4669      	mov	r1, sp
   19c5c:	4610      	mov	r0, r2
   19c5e:	f7ff feb1 	bl	199c4 <id_create>
   19c62:	e7f6      	b.n	19c52 <bt_setup_public_id_addr+0x12>
   19c64:	20000370 	.word	0x20000370

00019c68 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   19c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19c6c:	b094      	sub	sp, #80	; 0x50
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   19c6e:	4b4d      	ldr	r3, [pc, #308]	; (19da4 <bt_read_static_addr+0x13c>)
   19c70:	f893 50ba 	ldrb.w	r5, [r3, #186]	; 0xba
   19c74:	f015 0501 	ands.w	r5, r5, #1
   19c78:	d010      	beq.n	19c9c <bt_read_static_addr+0x34>
   19c7a:	4606      	mov	r6, r0
   19c7c:	4688      	mov	r8, r1
		LOG_WRN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   19c7e:	aa01      	add	r2, sp, #4
   19c80:	2100      	movs	r1, #0
   19c82:	f64f 4009 	movw	r0, #64521	; 0xfc09
   19c86:	f7fe fa79 	bl	1817c <bt_hci_cmd_send_sync>
	if (err) {
   19c8a:	4604      	mov	r4, r0
   19c8c:	bb58      	cbnz	r0, 19ce6 <bt_read_static_addr+0x7e>
		LOG_WRN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   19c8e:	9b01      	ldr	r3, [sp, #4]
   19c90:	68df      	ldr	r7, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
   19c92:	787d      	ldrb	r5, [r7, #1]
   19c94:	4545      	cmp	r5, r8
   19c96:	bf28      	it	cs
   19c98:	4645      	movcs	r5, r8
		LOG_WRN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
   19c9a:	e053      	b.n	19d44 <bt_read_static_addr+0xdc>
		LOG_WRN("Read Static Addresses command not available");
   19c9c:	4b42      	ldr	r3, [pc, #264]	; (19da8 <bt_read_static_addr+0x140>)
   19c9e:	9313      	str	r3, [sp, #76]	; 0x4c
   19ca0:	2202      	movs	r2, #2
   19ca2:	f88d 2000 	strb.w	r2, [sp]
   19ca6:	2300      	movs	r3, #0
   19ca8:	f88d 3001 	strb.w	r3, [sp, #1]
   19cac:	f88d 3002 	strb.w	r3, [sp, #2]
   19cb0:	f88d 3003 	strb.w	r3, [sp, #3]
   19cb4:	9900      	ldr	r1, [sp, #0]
   19cb6:	9112      	str	r1, [sp, #72]	; 0x48
   19cb8:	4619      	mov	r1, r3
   19cba:	f363 0100 	bfi	r1, r3, #0, #1
   19cbe:	f363 0141 	bfi	r1, r3, #1, #1
   19cc2:	f363 0182 	bfi	r1, r3, #2, #1
   19cc6:	f363 01c5 	bfi	r1, r3, #3, #3
   19cca:	f362 1188 	bfi	r1, r2, #6, #3
   19cce:	2208      	movs	r2, #8
   19cd0:	f362 2152 	bfi	r1, r2, #9, #10
   19cd4:	f363 41de 	bfi	r1, r3, #19, #12
   19cd8:	f363 71df 	bfi	r1, r3, #31, #1
   19cdc:	aa12      	add	r2, sp, #72	; 0x48
   19cde:	4833      	ldr	r0, [pc, #204]	; (19dac <bt_read_static_addr+0x144>)
   19ce0:	f00c ffb9 	bl	26c56 <z_impl_z_log_msg_static_create>
		return 0;
   19ce4:	e034      	b.n	19d50 <bt_read_static_addr+0xe8>
		LOG_WRN("Failed to read static addresses");
   19ce6:	4b32      	ldr	r3, [pc, #200]	; (19db0 <bt_read_static_addr+0x148>)
   19ce8:	930d      	str	r3, [sp, #52]	; 0x34
   19cea:	2302      	movs	r3, #2
   19cec:	f88d 3000 	strb.w	r3, [sp]
   19cf0:	2500      	movs	r5, #0
   19cf2:	f88d 5001 	strb.w	r5, [sp, #1]
   19cf6:	f88d 5002 	strb.w	r5, [sp, #2]
   19cfa:	f88d 5003 	strb.w	r5, [sp, #3]
   19cfe:	9a00      	ldr	r2, [sp, #0]
   19d00:	920c      	str	r2, [sp, #48]	; 0x30
   19d02:	4629      	mov	r1, r5
   19d04:	f365 0100 	bfi	r1, r5, #0, #1
   19d08:	f365 0141 	bfi	r1, r5, #1, #1
   19d0c:	f365 0182 	bfi	r1, r5, #2, #1
   19d10:	f365 01c5 	bfi	r1, r5, #3, #3
   19d14:	f363 1188 	bfi	r1, r3, #6, #3
   19d18:	2308      	movs	r3, #8
   19d1a:	f363 2152 	bfi	r1, r3, #9, #10
   19d1e:	f365 41de 	bfi	r1, r5, #19, #12
   19d22:	f365 71df 	bfi	r1, r5, #31, #1
   19d26:	462b      	mov	r3, r5
   19d28:	aa0c      	add	r2, sp, #48	; 0x30
   19d2a:	4820      	ldr	r0, [pc, #128]	; (19dac <bt_read_static_addr+0x144>)
   19d2c:	f00c ff93 	bl	26c56 <z_impl_z_log_msg_static_create>
		return 0;
   19d30:	e00e      	b.n	19d50 <bt_read_static_addr+0xe8>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   19d32:	2216      	movs	r2, #22
   19d34:	fb02 f004 	mul.w	r0, r2, r4
   19d38:	1839      	adds	r1, r7, r0
   19d3a:	3102      	adds	r1, #2
   19d3c:	4430      	add	r0, r6
   19d3e:	f00d fbc5 	bl	274cc <memcpy>
	for (i = 0; i < cnt; i++) {
   19d42:	3401      	adds	r4, #1
   19d44:	42a5      	cmp	r5, r4
   19d46:	dcf4      	bgt.n	19d32 <bt_read_static_addr+0xca>
	}

	net_buf_unref(rsp);
   19d48:	9801      	ldr	r0, [sp, #4]
   19d4a:	f010 f87f 	bl	29e4c <net_buf_unref>
	if (!cnt) {
   19d4e:	b11d      	cbz	r5, 19d58 <bt_read_static_addr+0xf0>
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   19d50:	4628      	mov	r0, r5
   19d52:	b014      	add	sp, #80	; 0x50
   19d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_WRN("No static addresses stored in controller");
   19d58:	4b16      	ldr	r3, [pc, #88]	; (19db4 <bt_read_static_addr+0x14c>)
   19d5a:	9307      	str	r3, [sp, #28]
   19d5c:	2202      	movs	r2, #2
   19d5e:	f88d 2000 	strb.w	r2, [sp]
   19d62:	2300      	movs	r3, #0
   19d64:	f88d 3001 	strb.w	r3, [sp, #1]
   19d68:	f88d 3002 	strb.w	r3, [sp, #2]
   19d6c:	f88d 3003 	strb.w	r3, [sp, #3]
   19d70:	9900      	ldr	r1, [sp, #0]
   19d72:	9106      	str	r1, [sp, #24]
   19d74:	4619      	mov	r1, r3
   19d76:	f363 0100 	bfi	r1, r3, #0, #1
   19d7a:	f363 0141 	bfi	r1, r3, #1, #1
   19d7e:	f363 0182 	bfi	r1, r3, #2, #1
   19d82:	f363 01c5 	bfi	r1, r3, #3, #3
   19d86:	f362 1188 	bfi	r1, r2, #6, #3
   19d8a:	2208      	movs	r2, #8
   19d8c:	f362 2152 	bfi	r1, r2, #9, #10
   19d90:	f363 41de 	bfi	r1, r3, #19, #12
   19d94:	f363 71df 	bfi	r1, r3, #31, #1
   19d98:	aa06      	add	r2, sp, #24
   19d9a:	4804      	ldr	r0, [pc, #16]	; (19dac <bt_read_static_addr+0x144>)
   19d9c:	f00c ff5b 	bl	26c56 <z_impl_z_log_msg_static_create>
   19da0:	e7d6      	b.n	19d50 <bt_read_static_addr+0xe8>
   19da2:	bf00      	nop
   19da4:	20000370 	.word	0x20000370
   19da8:	0002e958 	.word	0x0002e958
   19dac:	0002d0c4 	.word	0x0002d0c4
   19db0:	0002e984 	.word	0x0002e984
   19db4:	0002e9a4 	.word	0x0002e9a4

00019db8 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   19db8:	b510      	push	{r4, lr}
   19dba:	b088      	sub	sp, #32
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   19dbc:	4b17      	ldr	r3, [pc, #92]	; (19e1c <bt_setup_random_id_addr+0x64>)
   19dbe:	79dc      	ldrb	r4, [r3, #7]
   19dc0:	b934      	cbnz	r4, 19dd0 <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   19dc2:	2101      	movs	r1, #1
   19dc4:	a802      	add	r0, sp, #8
   19dc6:	f7ff ff4f 	bl	19c68 <bt_read_static_addr>
   19dca:	4b14      	ldr	r3, [pc, #80]	; (19e1c <bt_setup_random_id_addr+0x64>)
   19dcc:	71d8      	strb	r0, [r3, #7]

		if (bt_dev.id_count) {
   19dce:	b948      	cbnz	r0, 19de4 <bt_setup_random_id_addr+0x2c>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   19dd0:	2100      	movs	r1, #0
   19dd2:	4608      	mov	r0, r1
   19dd4:	f7ff fe2c 	bl	19a30 <bt_id_create>
   19dd8:	4603      	mov	r3, r0
}
   19dda:	4618      	mov	r0, r3
   19ddc:	b008      	add	sp, #32
   19dde:	bd10      	pop	{r4, pc}
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   19de0:	3401      	adds	r4, #1
   19de2:	b2e4      	uxtb	r4, r4
   19de4:	4b0d      	ldr	r3, [pc, #52]	; (19e1c <bt_setup_random_id_addr+0x64>)
   19de6:	79db      	ldrb	r3, [r3, #7]
   19de8:	42a3      	cmp	r3, r4
   19dea:	d914      	bls.n	19e16 <bt_setup_random_id_addr+0x5e>
   19dec:	2206      	movs	r2, #6
   19dee:	2116      	movs	r1, #22
   19df0:	ab02      	add	r3, sp, #8
   19df2:	fb01 3104 	mla	r1, r1, r4, r3
   19df6:	f10d 0001 	add.w	r0, sp, #1
   19dfa:	f00d fb67 	bl	274cc <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   19dfe:	2301      	movs	r3, #1
   19e00:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   19e04:	2200      	movs	r2, #0
   19e06:	4669      	mov	r1, sp
   19e08:	4620      	mov	r0, r4
   19e0a:	f7ff fddb 	bl	199c4 <id_create>
				if (err) {
   19e0e:	4603      	mov	r3, r0
   19e10:	2800      	cmp	r0, #0
   19e12:	d0e5      	beq.n	19de0 <bt_setup_random_id_addr+0x28>
   19e14:	e7e1      	b.n	19dda <bt_setup_random_id_addr+0x22>
			return 0;
   19e16:	2300      	movs	r3, #0
   19e18:	e7df      	b.n	19dda <bt_setup_random_id_addr+0x22>
   19e1a:	bf00      	nop
   19e1c:	20000370 	.word	0x20000370

00019e20 <bt_id_set_create_conn_own_addr>:

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
	int err;

	CHECKIF(own_addr_type == NULL) {
   19e20:	b181      	cbz	r1, 19e44 <bt_id_set_create_conn_own_addr+0x24>
{
   19e22:	b510      	push	{r4, lr}
   19e24:	460c      	mov	r4, r1

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
   19e26:	4b09      	ldr	r3, [pc, #36]	; (19e4c <bt_id_set_create_conn_own_addr+0x2c>)
   19e28:	781b      	ldrb	r3, [r3, #0]
   19e2a:	2b01      	cmp	r3, #1
   19e2c:	d004      	beq.n	19e38 <bt_id_set_create_conn_own_addr+0x18>
			if (err) {
				return err;
			}
		}

		*own_addr_type = addr->type;
   19e2e:	4b07      	ldr	r3, [pc, #28]	; (19e4c <bt_id_set_create_conn_own_addr+0x2c>)
   19e30:	781b      	ldrb	r3, [r3, #0]
   19e32:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   19e34:	2000      	movs	r0, #0
}
   19e36:	bd10      	pop	{r4, pc}
			err = set_random_address(&addr->a);
   19e38:	4805      	ldr	r0, [pc, #20]	; (19e50 <bt_id_set_create_conn_own_addr+0x30>)
   19e3a:	f7ff fd95 	bl	19968 <set_random_address>
			if (err) {
   19e3e:	2800      	cmp	r0, #0
   19e40:	d0f5      	beq.n	19e2e <bt_id_set_create_conn_own_addr+0xe>
   19e42:	e7f8      	b.n	19e36 <bt_id_set_create_conn_own_addr+0x16>
		return -EINVAL;
   19e44:	f06f 0015 	mvn.w	r0, #21
}
   19e48:	4770      	bx	lr
   19e4a:	bf00      	nop
   19e4c:	20000370 	.word	0x20000370
   19e50:	20000371 	.word	0x20000371

00019e54 <bt_id_set_scan_own_addr>:

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
	int err;

	CHECKIF(own_addr_type == NULL) {
   19e54:	b181      	cbz	r1, 19e78 <bt_id_set_scan_own_addr+0x24>
{
   19e56:	b510      	push	{r4, lr}
   19e58:	460c      	mov	r4, r1
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   19e5a:	4b09      	ldr	r3, [pc, #36]	; (19e80 <bt_id_set_scan_own_addr+0x2c>)
   19e5c:	781b      	ldrb	r3, [r3, #0]
   19e5e:	700b      	strb	r3, [r1, #0]
		/* Use NRPA unless identity has been explicitly requested
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
   19e60:	f00d fd92 	bl	27988 <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
   19e64:	b108      	cbz	r0, 19e6a <bt_id_set_scan_own_addr+0x16>
				return err;
			}
		}
	}

	return 0;
   19e66:	2000      	movs	r0, #0
}
   19e68:	bd10      	pop	{r4, pc}
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   19e6a:	f00d fd97 	bl	2799c <bt_id_set_private_addr>
			if (err) {
   19e6e:	2800      	cmp	r0, #0
   19e70:	d1fa      	bne.n	19e68 <bt_id_set_scan_own_addr+0x14>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   19e72:	2301      	movs	r3, #1
   19e74:	7023      	strb	r3, [r4, #0]
   19e76:	e7f7      	b.n	19e68 <bt_id_set_scan_own_addr+0x14>
		return -EINVAL;
   19e78:	f06f 0015 	mvn.w	r0, #21
}
   19e7c:	4770      	bx	lr
   19e7e:	bf00      	nop
   19e80:	20000370 	.word	0x20000370

00019e84 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   19e84:	b510      	push	{r4, lr}
   19e86:	b094      	sub	sp, #80	; 0x50
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   19e88:	4b45      	ldr	r3, [pc, #276]	; (19fa0 <bt_id_init+0x11c>)
   19e8a:	79db      	ldrb	r3, [r3, #7]
   19e8c:	b133      	cbz	r3, 19e9c <bt_id_init+0x18>
			LOG_ERR("Unable to set identity address");
			return err;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   19e8e:	4b44      	ldr	r3, [pc, #272]	; (19fa0 <bt_id_init+0x11c>)
   19e90:	79db      	ldrb	r3, [r3, #7]
   19e92:	b373      	cbz	r3, 19ef2 <bt_id_init+0x6e>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   19e94:	2400      	movs	r4, #0
}
   19e96:	4620      	mov	r0, r4
   19e98:	b014      	add	sp, #80	; 0x50
   19e9a:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
   19e9c:	f7ff fed0 	bl	19c40 <bt_setup_public_id_addr>
		if (err) {
   19ea0:	4604      	mov	r4, r0
   19ea2:	2800      	cmp	r0, #0
   19ea4:	d0f3      	beq.n	19e8e <bt_id_init+0xa>
			LOG_ERR("Unable to set identity address");
   19ea6:	4b3f      	ldr	r3, [pc, #252]	; (19fa4 <bt_id_init+0x120>)
   19ea8:	9307      	str	r3, [sp, #28]
   19eaa:	2302      	movs	r3, #2
   19eac:	f88d 3004 	strb.w	r3, [sp, #4]
   19eb0:	2300      	movs	r3, #0
   19eb2:	f88d 3005 	strb.w	r3, [sp, #5]
   19eb6:	f88d 3006 	strb.w	r3, [sp, #6]
   19eba:	f88d 3007 	strb.w	r3, [sp, #7]
   19ebe:	9a01      	ldr	r2, [sp, #4]
   19ec0:	9206      	str	r2, [sp, #24]
   19ec2:	4619      	mov	r1, r3
   19ec4:	f363 0100 	bfi	r1, r3, #0, #1
   19ec8:	f363 0141 	bfi	r1, r3, #1, #1
   19ecc:	f363 0182 	bfi	r1, r3, #2, #1
   19ed0:	f363 01c5 	bfi	r1, r3, #3, #3
   19ed4:	2201      	movs	r2, #1
   19ed6:	f362 1188 	bfi	r1, r2, #6, #3
   19eda:	2208      	movs	r2, #8
   19edc:	f362 2152 	bfi	r1, r2, #9, #10
   19ee0:	f363 41de 	bfi	r1, r3, #19, #12
   19ee4:	f363 71df 	bfi	r1, r3, #31, #1
   19ee8:	aa06      	add	r2, sp, #24
   19eea:	482f      	ldr	r0, [pc, #188]	; (19fa8 <bt_id_init+0x124>)
   19eec:	f00c feb3 	bl	26c56 <z_impl_z_log_msg_static_create>
			return err;
   19ef0:	e7d1      	b.n	19e96 <bt_id_init+0x12>
		err = bt_setup_random_id_addr();
   19ef2:	f7ff ff61 	bl	19db8 <bt_setup_random_id_addr>
		if (err) {
   19ef6:	4604      	mov	r4, r0
   19ef8:	bb58      	cbnz	r0, 19f52 <bt_id_init+0xce>
		err = set_random_address(&bt_dev.id_addr[0].a);
   19efa:	482c      	ldr	r0, [pc, #176]	; (19fac <bt_id_init+0x128>)
   19efc:	f7ff fd34 	bl	19968 <set_random_address>
		if (err) {
   19f00:	4604      	mov	r4, r0
   19f02:	2800      	cmp	r0, #0
   19f04:	d0c7      	beq.n	19e96 <bt_id_init+0x12>
			LOG_ERR("Unable to set random address");
   19f06:	4b2a      	ldr	r3, [pc, #168]	; (19fb0 <bt_id_init+0x12c>)
   19f08:	930d      	str	r3, [sp, #52]	; 0x34
   19f0a:	2302      	movs	r3, #2
   19f0c:	f88d 3004 	strb.w	r3, [sp, #4]
   19f10:	2300      	movs	r3, #0
   19f12:	f88d 3005 	strb.w	r3, [sp, #5]
   19f16:	f88d 3006 	strb.w	r3, [sp, #6]
   19f1a:	f88d 3007 	strb.w	r3, [sp, #7]
   19f1e:	9a01      	ldr	r2, [sp, #4]
   19f20:	920c      	str	r2, [sp, #48]	; 0x30
   19f22:	4619      	mov	r1, r3
   19f24:	f363 0100 	bfi	r1, r3, #0, #1
   19f28:	f363 0141 	bfi	r1, r3, #1, #1
   19f2c:	f363 0182 	bfi	r1, r3, #2, #1
   19f30:	f363 01c5 	bfi	r1, r3, #3, #3
   19f34:	2201      	movs	r2, #1
   19f36:	f362 1188 	bfi	r1, r2, #6, #3
   19f3a:	2208      	movs	r2, #8
   19f3c:	f362 2152 	bfi	r1, r2, #9, #10
   19f40:	f363 41de 	bfi	r1, r3, #19, #12
   19f44:	f363 71df 	bfi	r1, r3, #31, #1
   19f48:	aa0c      	add	r2, sp, #48	; 0x30
   19f4a:	4817      	ldr	r0, [pc, #92]	; (19fa8 <bt_id_init+0x124>)
   19f4c:	f00c fe83 	bl	26c56 <z_impl_z_log_msg_static_create>
			return err;
   19f50:	e7a1      	b.n	19e96 <bt_id_init+0x12>
			LOG_ERR("Unable to set identity address");
   19f52:	4b14      	ldr	r3, [pc, #80]	; (19fa4 <bt_id_init+0x120>)
   19f54:	9313      	str	r3, [sp, #76]	; 0x4c
   19f56:	2302      	movs	r3, #2
   19f58:	f88d 3004 	strb.w	r3, [sp, #4]
   19f5c:	2300      	movs	r3, #0
   19f5e:	f88d 3005 	strb.w	r3, [sp, #5]
   19f62:	f88d 3006 	strb.w	r3, [sp, #6]
   19f66:	f88d 3007 	strb.w	r3, [sp, #7]
   19f6a:	9a01      	ldr	r2, [sp, #4]
   19f6c:	9212      	str	r2, [sp, #72]	; 0x48
   19f6e:	4619      	mov	r1, r3
   19f70:	f363 0100 	bfi	r1, r3, #0, #1
   19f74:	f363 0141 	bfi	r1, r3, #1, #1
   19f78:	f363 0182 	bfi	r1, r3, #2, #1
   19f7c:	f363 01c5 	bfi	r1, r3, #3, #3
   19f80:	2201      	movs	r2, #1
   19f82:	f362 1188 	bfi	r1, r2, #6, #3
   19f86:	2208      	movs	r2, #8
   19f88:	f362 2152 	bfi	r1, r2, #9, #10
   19f8c:	f363 41de 	bfi	r1, r3, #19, #12
   19f90:	f363 71df 	bfi	r1, r3, #31, #1
   19f94:	aa12      	add	r2, sp, #72	; 0x48
   19f96:	4804      	ldr	r0, [pc, #16]	; (19fa8 <bt_id_init+0x124>)
   19f98:	f00c fe5d 	bl	26c56 <z_impl_z_log_msg_static_create>
			return err;
   19f9c:	e77b      	b.n	19e96 <bt_id_init+0x12>
   19f9e:	bf00      	nop
   19fa0:	20000370 	.word	0x20000370
   19fa4:	0002e9d0 	.word	0x0002e9d0
   19fa8:	0002d0c4 	.word	0x0002d0c4
   19fac:	20000371 	.word	0x20000371
   19fb0:	0002e9f0 	.word	0x0002e9f0

00019fb4 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   19fb4:	b530      	push	{r4, r5, lr}
   19fb6:	b087      	sub	sp, #28
   19fb8:	4604      	mov	r4, r0
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   19fba:	2102      	movs	r1, #2
   19fbc:	f242 000c 	movw	r0, #8204	; 0x200c
   19fc0:	f7fe f89e 	bl	18100 <bt_hci_cmd_create>
	if (!buf) {
   19fc4:	b330      	cbz	r0, 1a014 <bt_le_scan_set_enable_legacy+0x60>
   19fc6:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   19fc8:	2102      	movs	r1, #2
   19fca:	300c      	adds	r0, #12
   19fcc:	f00f ff85 	bl	29eda <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   19fd0:	2c01      	cmp	r4, #1
   19fd2:	d015      	beq.n	1a000 <bt_le_scan_set_enable_legacy+0x4c>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
						 BT_DEV_SCAN_FILTER_DUP);
	} else {
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
   19fd4:	2300      	movs	r3, #0
   19fd6:	7043      	strb	r3, [r0, #1]
	}

	cp->enable = enable;
   19fd8:	7004      	strb	r4, [r0, #0]

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   19fda:	2c01      	cmp	r4, #1
   19fdc:	bf14      	ite	ne
   19fde:	2400      	movne	r4, #0
   19fe0:	2401      	moveq	r4, #1
   19fe2:	9400      	str	r4, [sp, #0]
   19fe4:	2306      	movs	r3, #6
   19fe6:	4a0d      	ldr	r2, [pc, #52]	; (1a01c <bt_le_scan_set_enable_legacy+0x68>)
   19fe8:	a903      	add	r1, sp, #12
   19fea:	4628      	mov	r0, r5
   19fec:	f7fe f876 	bl	180dc <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   19ff0:	2200      	movs	r2, #0
   19ff2:	4629      	mov	r1, r5
   19ff4:	f242 000c 	movw	r0, #8204	; 0x200c
   19ff8:	f7fe f8c0 	bl	1817c <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   19ffc:	b007      	add	sp, #28
   19ffe:	bd30      	pop	{r4, r5, pc}
   1a000:	f3bf 8f5b 	dmb	ish
   1a004:	4b05      	ldr	r3, [pc, #20]	; (1a01c <bt_le_scan_set_enable_legacy+0x68>)
   1a006:	681b      	ldr	r3, [r3, #0]
   1a008:	f3bf 8f5b 	dmb	ish
   1a00c:	f3c3 2340 	ubfx	r3, r3, #9, #1
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   1a010:	7043      	strb	r3, [r0, #1]
   1a012:	e7e1      	b.n	19fd8 <bt_le_scan_set_enable_legacy+0x24>
		return -ENOBUFS;
   1a014:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a018:	e7f0      	b.n	19ffc <bt_le_scan_set_enable_legacy+0x48>
   1a01a:	bf00      	nop
   1a01c:	2000043c 	.word	0x2000043c

0001a020 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   1a020:	4b01      	ldr	r3, [pc, #4]	; (1a028 <bt_scan_reset+0x8>)
   1a022:	2200      	movs	r2, #0
   1a024:	601a      	str	r2, [r3, #0]
}
   1a026:	4770      	bx	lr
   1a028:	20007b64 	.word	0x20007b64

0001a02c <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
   1a02c:	b570      	push	{r4, r5, r6, lr}
   1a02e:	b082      	sub	sp, #8
   1a030:	4604      	mov	r4, r0
   1a032:	460e      	mov	r6, r1
   1a034:	4615      	mov	r5, r2
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
   1a036:	2207      	movs	r2, #7
   1a038:	2100      	movs	r1, #0
   1a03a:	4668      	mov	r0, sp
   1a03c:	f00d fa75 	bl	2752a <memset>

	set_param.scan_type = scan_type;
   1a040:	f88d 4000 	strb.w	r4, [sp]

	/* for the rest parameters apply default values according to
	 *  spec 4.2, vol2, part E, 7.8.10
	 */
	set_param.interval = sys_cpu_to_le16(interval);
   1a044:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
   1a048:	f8ad 5003 	strh.w	r5, [sp, #3]
   1a04c:	f3bf 8f5b 	dmb	ish
   1a050:	4b1f      	ldr	r3, [pc, #124]	; (1a0d0 <start_le_scan_legacy+0xa4>)
   1a052:	681b      	ldr	r3, [r3, #0]
   1a054:	f3bf 8f5b 	dmb	ish

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
   1a058:	f413 6f80 	tst.w	r3, #1024	; 0x400
   1a05c:	d010      	beq.n	1a080 <start_le_scan_legacy+0x54>
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
   1a05e:	2301      	movs	r3, #1
   1a060:	f88d 3006 	strb.w	r3, [sp, #6]
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
   1a064:	2c01      	cmp	r4, #1
   1a066:	bf14      	ite	ne
   1a068:	2400      	movne	r4, #0
   1a06a:	2401      	moveq	r4, #1
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   1a06c:	f10d 0105 	add.w	r1, sp, #5
   1a070:	4620      	mov	r0, r4
   1a072:	f7ff feef 	bl	19e54 <bt_id_set_scan_own_addr>
	if (err) {
   1a076:	4605      	mov	r5, r0
   1a078:	b130      	cbz	r0, 1a088 <start_le_scan_legacy+0x5c>
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
   1a07a:	4628      	mov	r0, r5
   1a07c:	b002      	add	sp, #8
   1a07e:	bd70      	pop	{r4, r5, r6, pc}
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   1a080:	2300      	movs	r3, #0
   1a082:	f88d 3006 	strb.w	r3, [sp, #6]
   1a086:	e7ed      	b.n	1a064 <start_le_scan_legacy+0x38>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   1a088:	2107      	movs	r1, #7
   1a08a:	f242 000b 	movw	r0, #8203	; 0x200b
   1a08e:	f7fe f837 	bl	18100 <bt_hci_cmd_create>
	if (!buf) {
   1a092:	4605      	mov	r5, r0
   1a094:	b1c8      	cbz	r0, 1a0ca <start_le_scan_legacy+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1a096:	2207      	movs	r2, #7
   1a098:	4669      	mov	r1, sp
   1a09a:	300c      	adds	r0, #12
   1a09c:	f00f ff23 	bl	29ee6 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   1a0a0:	2200      	movs	r2, #0
   1a0a2:	4629      	mov	r1, r5
   1a0a4:	f242 000b 	movw	r0, #8203	; 0x200b
   1a0a8:	f7fe f868 	bl	1817c <bt_hci_cmd_send_sync>
	if (err) {
   1a0ac:	4605      	mov	r5, r0
   1a0ae:	2800      	cmp	r0, #0
   1a0b0:	d1e3      	bne.n	1a07a <start_le_scan_legacy+0x4e>
	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   1a0b2:	2001      	movs	r0, #1
   1a0b4:	f00d fcc2 	bl	27a3c <bt_le_scan_set_enable>
	if (err) {
   1a0b8:	4605      	mov	r5, r0
   1a0ba:	2800      	cmp	r0, #0
   1a0bc:	d1dd      	bne.n	1a07a <start_le_scan_legacy+0x4e>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);
   1a0be:	4622      	mov	r2, r4
   1a0c0:	2108      	movs	r1, #8
   1a0c2:	4803      	ldr	r0, [pc, #12]	; (1a0d0 <start_le_scan_legacy+0xa4>)
   1a0c4:	f00d fc95 	bl	279f2 <atomic_set_bit_to>
	return 0;
   1a0c8:	e7d7      	b.n	1a07a <start_le_scan_legacy+0x4e>
		return -ENOBUFS;
   1a0ca:	f06f 0568 	mvn.w	r5, #104	; 0x68
   1a0ce:	e7d4      	b.n	1a07a <start_le_scan_legacy+0x4e>
   1a0d0:	2000043c 	.word	0x2000043c

0001a0d4 <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
   1a0d4:	b538      	push	{r3, r4, r5, lr}
   1a0d6:	f3bf 8f5b 	dmb	ish
   1a0da:	4b21      	ldr	r3, [pc, #132]	; (1a160 <bt_le_scan_update+0x8c>)
   1a0dc:	681b      	ldr	r3, [r3, #0]
   1a0de:	f3bf 8f5b 	dmb	ish
   1a0e2:	f3c3 14c0 	ubfx	r4, r3, #7, #1
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1a0e6:	f013 0f80 	tst.w	r3, #128	; 0x80
   1a0ea:	d002      	beq.n	1a0f2 <bt_le_scan_update+0x1e>
		return 0;
   1a0ec:	2400      	movs	r4, #0
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   1a0ee:	4620      	mov	r0, r4
   1a0f0:	bd38      	pop	{r3, r4, r5, pc}
   1a0f2:	4605      	mov	r5, r0
   1a0f4:	f3bf 8f5b 	dmb	ish
   1a0f8:	4b19      	ldr	r3, [pc, #100]	; (1a160 <bt_le_scan_update+0x8c>)
   1a0fa:	681b      	ldr	r3, [r3, #0]
   1a0fc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   1a100:	f013 0f40 	tst.w	r3, #64	; 0x40
   1a104:	d003      	beq.n	1a10e <bt_le_scan_update+0x3a>
		err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   1a106:	2000      	movs	r0, #0
   1a108:	f00d fc98 	bl	27a3c <bt_le_scan_set_enable>
		if (err) {
   1a10c:	bb28      	cbnz	r0, 1a15a <bt_le_scan_update+0x86>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   1a10e:	2206      	movs	r2, #6
   1a110:	2100      	movs	r1, #0
   1a112:	4608      	mov	r0, r1
   1a114:	f000 fff6 	bl	1b104 <bt_conn_lookup_state_le>
		if (conn) {
   1a118:	b110      	cbz	r0, 1a120 <bt_le_scan_update+0x4c>
			bt_conn_unref(conn);
   1a11a:	f00d fe19 	bl	27d50 <bt_conn_unref>
			return 0;
   1a11e:	e7e6      	b.n	1a0ee <bt_le_scan_update+0x1a>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   1a120:	2202      	movs	r2, #2
   1a122:	2100      	movs	r1, #0
   1a124:	4608      	mov	r0, r1
   1a126:	f000 ffed 	bl	1b104 <bt_conn_lookup_state_le>
		if (conn) {
   1a12a:	4603      	mov	r3, r0
   1a12c:	2800      	cmp	r0, #0
   1a12e:	d0de      	beq.n	1a0ee <bt_le_scan_update+0x1a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a130:	4a0b      	ldr	r2, [pc, #44]	; (1a160 <bt_le_scan_update+0x8c>)
   1a132:	f3bf 8f5b 	dmb	ish
   1a136:	e852 0f00 	ldrex	r0, [r2]
   1a13a:	f440 7000 	orr.w	r0, r0, #512	; 0x200
   1a13e:	e842 0100 	strex	r1, r0, [r2]
   1a142:	2900      	cmp	r1, #0
   1a144:	d1f7      	bne.n	1a136 <bt_le_scan_update+0x62>
   1a146:	f3bf 8f5b 	dmb	ish
			bt_conn_unref(conn);
   1a14a:	4618      	mov	r0, r3
   1a14c:	f00d fe00 	bl	27d50 <bt_conn_unref>
			return start_passive_scan(fast_scan);
   1a150:	4628      	mov	r0, r5
   1a152:	f00d fc77 	bl	27a44 <start_passive_scan>
   1a156:	4604      	mov	r4, r0
   1a158:	e7c9      	b.n	1a0ee <bt_le_scan_update+0x1a>
			return err;
   1a15a:	4604      	mov	r4, r0
   1a15c:	e7c7      	b.n	1a0ee <bt_le_scan_update+0x1a>
   1a15e:	bf00      	nop
   1a160:	2000043c 	.word	0x2000043c

0001a164 <check_pending_conn>:

#if defined(CONFIG_BT_CENTRAL)
static void check_pending_conn(const bt_addr_le_t *id_addr,
			       const bt_addr_le_t *addr, uint8_t adv_props)
{
   1a164:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a166:	f3bf 8f5b 	dmb	ish
   1a16a:	4b20      	ldr	r3, [pc, #128]	; (1a1ec <check_pending_conn+0x88>)
   1a16c:	681b      	ldr	r3, [r3, #0]
   1a16e:	f3bf 8f5b 	dmb	ish
	struct bt_conn *conn;

	/* No connections are allowed during explicit scanning */
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1a172:	f013 0f80 	tst.w	r3, #128	; 0x80
   1a176:	d103      	bne.n	1a180 <check_pending_conn+0x1c>
   1a178:	460c      	mov	r4, r1
		return;
	}

	/* Return if event is not connectable */
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
   1a17a:	f012 0f01 	tst.w	r2, #1
   1a17e:	d100      	bne.n	1a182 <check_pending_conn+0x1e>
failed:
	conn->err = BT_HCI_ERR_UNSPECIFIED;
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
	bt_conn_unref(conn);
	bt_le_scan_update(false);
}
   1a180:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
   1a182:	2202      	movs	r2, #2
   1a184:	4601      	mov	r1, r0
   1a186:	2000      	movs	r0, #0
   1a188:	f000 ffbc 	bl	1b104 <bt_conn_lookup_state_le>
	if (!conn) {
   1a18c:	4605      	mov	r5, r0
   1a18e:	2800      	cmp	r0, #0
   1a190:	d0f6      	beq.n	1a180 <check_pending_conn+0x1c>
   1a192:	f3bf 8f5b 	dmb	ish
   1a196:	4b15      	ldr	r3, [pc, #84]	; (1a1ec <check_pending_conn+0x88>)
   1a198:	681b      	ldr	r3, [r3, #0]
   1a19a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   1a19e:	f013 0f40 	tst.w	r3, #64	; 0x40
   1a1a2:	d003      	beq.n	1a1ac <check_pending_conn+0x48>
	    bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE)) {
   1a1a4:	2000      	movs	r0, #0
   1a1a6:	f00d fc49 	bl	27a3c <bt_le_scan_set_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   1a1aa:	b948      	cbnz	r0, 1a1c0 <check_pending_conn+0x5c>
	memcpy(dst, src, sizeof(*dst));
   1a1ac:	2207      	movs	r2, #7
   1a1ae:	4621      	mov	r1, r4
   1a1b0:	f105 0096 	add.w	r0, r5, #150	; 0x96
   1a1b4:	f00d f98a 	bl	274cc <memcpy>
	if (bt_le_create_conn(conn)) {
   1a1b8:	4628      	mov	r0, r5
   1a1ba:	f00d fb1c 	bl	277f6 <bt_le_create_conn>
   1a1be:	b160      	cbz	r0, 1a1da <check_pending_conn+0x76>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   1a1c0:	231f      	movs	r3, #31
   1a1c2:	726b      	strb	r3, [r5, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1a1c4:	2100      	movs	r1, #0
   1a1c6:	4628      	mov	r0, r5
   1a1c8:	f000 fcfa 	bl	1abc0 <bt_conn_set_state>
	bt_conn_unref(conn);
   1a1cc:	4628      	mov	r0, r5
   1a1ce:	f00d fdbf 	bl	27d50 <bt_conn_unref>
	bt_le_scan_update(false);
   1a1d2:	2000      	movs	r0, #0
   1a1d4:	f7ff ff7e 	bl	1a0d4 <bt_le_scan_update>
   1a1d8:	e7d2      	b.n	1a180 <check_pending_conn+0x1c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING);
   1a1da:	2106      	movs	r1, #6
   1a1dc:	4628      	mov	r0, r5
   1a1de:	f000 fcef 	bl	1abc0 <bt_conn_set_state>
	bt_conn_unref(conn);
   1a1e2:	4628      	mov	r0, r5
   1a1e4:	f00d fdb4 	bl	27d50 <bt_conn_unref>
	return;
   1a1e8:	e7ca      	b.n	1a180 <check_pending_conn+0x1c>
   1a1ea:	bf00      	nop
   1a1ec:	2000043c 	.word	0x2000043c

0001a1f0 <le_adv_recv>:
	}
}

static void le_adv_recv(bt_addr_le_t *addr, struct bt_le_scan_recv_info *info,
			struct net_buf_simple *buf, uint16_t len)
{
   1a1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1f4:	b085      	sub	sp, #20
   1a1f6:	4682      	mov	sl, r0
   1a1f8:	4688      	mov	r8, r1
   1a1fa:	4614      	mov	r4, r2
   1a1fc:	4699      	mov	r9, r3
   1a1fe:	f3bf 8f5b 	dmb	ish
   1a202:	4b44      	ldr	r3, [pc, #272]	; (1a314 <le_adv_recv+0x124>)
   1a204:	681b      	ldr	r3, [r3, #0]
   1a206:	f3bf 8f5b 	dmb	ish
	bt_addr_le_t id_addr;

	LOG_DBG("%s event %u, len %u, rssi %d dBm", bt_addr_le_str(addr), info->adv_type, len,
		info->rssi);

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   1a20a:	f013 0f80 	tst.w	r3, #128	; 0x80
   1a20e:	d003      	beq.n	1a218 <le_adv_recv+0x28>
	    !IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
	    (info->adv_props & BT_HCI_LE_ADV_PROP_DIRECT)) {
   1a210:	890b      	ldrh	r3, [r1, #8]
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   1a212:	f013 0f04 	tst.w	r3, #4
   1a216:	d179      	bne.n	1a30c <le_adv_recv+0x11c>
		LOG_DBG("Dropped direct adv report");
		return;
	}

	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   1a218:	f89a 2000 	ldrb.w	r2, [sl]
   1a21c:	1e93      	subs	r3, r2, #2
   1a21e:	b2db      	uxtb	r3, r3
   1a220:	2b01      	cmp	r3, #1
   1a222:	d934      	bls.n	1a28e <le_adv_recv+0x9e>
	    addr->type == BT_ADDR_LE_RANDOM_ID) {
		bt_addr_le_copy(&id_addr, addr);
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   1a224:	2aff      	cmp	r2, #255	; 0xff
   1a226:	d03d      	beq.n	1a2a4 <le_adv_recv+0xb4>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
	} else {
		bt_addr_le_copy(&id_addr,
   1a228:	4651      	mov	r1, sl
   1a22a:	2000      	movs	r0, #0
   1a22c:	f00d fbae 	bl	2798c <bt_lookup_id_addr>
   1a230:	4601      	mov	r1, r0
   1a232:	2207      	movs	r2, #7
   1a234:	a801      	add	r0, sp, #4
   1a236:	f00d f949 	bl	274cc <memcpy>
				bt_lookup_id_addr(BT_ID_DEFAULT, addr));
	}

	if (scan_dev_found_cb) {
   1a23a:	4b37      	ldr	r3, [pc, #220]	; (1a318 <le_adv_recv+0x128>)
   1a23c:	681b      	ldr	r3, [r3, #0]
   1a23e:	b1c3      	cbz	r3, 1a272 <le_adv_recv+0x82>
	state->offset = net_buf_simple_headroom(buf);
   1a240:	4620      	mov	r0, r4
   1a242:	f00f fe8c 	bl	29f5e <net_buf_simple_headroom>
   1a246:	4605      	mov	r5, r0
   1a248:	f8ad 000c 	strh.w	r0, [sp, #12]
	state->len = buf->len;
   1a24c:	88a6      	ldrh	r6, [r4, #4]
   1a24e:	f8ad 600e 	strh.w	r6, [sp, #14]
		net_buf_simple_save(buf, &state);

		buf->len = len;
   1a252:	f8a4 9004 	strh.w	r9, [r4, #4]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   1a256:	4b30      	ldr	r3, [pc, #192]	; (1a318 <le_adv_recv+0x128>)
   1a258:	681f      	ldr	r7, [r3, #0]
   1a25a:	4623      	mov	r3, r4
   1a25c:	f898 2007 	ldrb.w	r2, [r8, #7]
   1a260:	f998 1005 	ldrsb.w	r1, [r8, #5]
   1a264:	a801      	add	r0, sp, #4
   1a266:	47b8      	blx	r7
	buf->data = buf->__buf + state->offset;
   1a268:	68a3      	ldr	r3, [r4, #8]
   1a26a:	fa13 f585 	uxtah	r5, r3, r5
   1a26e:	6025      	str	r5, [r4, #0]
	buf->len = state->len;
   1a270:	80a6      	strh	r6, [r4, #4]

		net_buf_simple_restore(buf, &state);
	}

	info->addr = &id_addr;
   1a272:	ab01      	add	r3, sp, #4
   1a274:	f8c8 3000 	str.w	r3, [r8]
   1a278:	4b28      	ldr	r3, [pc, #160]	; (1a31c <le_adv_recv+0x12c>)
   1a27a:	681e      	ldr	r6, [r3, #0]

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   1a27c:	b1c6      	cbz	r6, 1a2b0 <le_adv_recv+0xc0>
   1a27e:	3e08      	subs	r6, #8
Z_GENLIST_PEEK_NEXT(slist, snode)
   1a280:	f116 0508 	adds.w	r5, r6, #8
   1a284:	d019      	beq.n	1a2ba <le_adv_recv+0xca>
	return node->next;
   1a286:	68b5      	ldr	r5, [r6, #8]
   1a288:	b1bd      	cbz	r5, 1a2ba <le_adv_recv+0xca>
   1a28a:	3d08      	subs	r5, #8
   1a28c:	e015      	b.n	1a2ba <le_adv_recv+0xca>
   1a28e:	2207      	movs	r2, #7
   1a290:	4651      	mov	r1, sl
   1a292:	a801      	add	r0, sp, #4
   1a294:	f00d f91a 	bl	274cc <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1a298:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1a29c:	3b02      	subs	r3, #2
   1a29e:	f88d 3004 	strb.w	r3, [sp, #4]
   1a2a2:	e7ca      	b.n	1a23a <le_adv_recv+0x4a>
   1a2a4:	2207      	movs	r2, #7
   1a2a6:	491e      	ldr	r1, [pc, #120]	; (1a320 <le_adv_recv+0x130>)
   1a2a8:	a801      	add	r0, sp, #4
   1a2aa:	f00d f90f 	bl	274cc <memcpy>
}
   1a2ae:	e7c4      	b.n	1a23a <le_adv_recv+0x4a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   1a2b0:	4635      	mov	r5, r6
   1a2b2:	e002      	b.n	1a2ba <le_adv_recv+0xca>
   1a2b4:	462a      	mov	r2, r5
   1a2b6:	462e      	mov	r6, r5
   1a2b8:	4615      	mov	r5, r2
   1a2ba:	b1f6      	cbz	r6, 1a2fa <le_adv_recv+0x10a>
		if (listener->recv) {
   1a2bc:	6833      	ldr	r3, [r6, #0]
   1a2be:	b1ab      	cbz	r3, 1a2ec <le_adv_recv+0xfc>
	state->offset = net_buf_simple_headroom(buf);
   1a2c0:	4620      	mov	r0, r4
   1a2c2:	f00f fe4c 	bl	29f5e <net_buf_simple_headroom>
   1a2c6:	4607      	mov	r7, r0
   1a2c8:	f8ad 000c 	strh.w	r0, [sp, #12]
	state->len = buf->len;
   1a2cc:	f8b4 b004 	ldrh.w	fp, [r4, #4]
   1a2d0:	f8ad b00e 	strh.w	fp, [sp, #14]
			net_buf_simple_save(buf, &state);

			buf->len = len;
   1a2d4:	f8a4 9004 	strh.w	r9, [r4, #4]
			listener->recv(info, buf);
   1a2d8:	6833      	ldr	r3, [r6, #0]
   1a2da:	4621      	mov	r1, r4
   1a2dc:	4640      	mov	r0, r8
   1a2de:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
   1a2e0:	68a3      	ldr	r3, [r4, #8]
   1a2e2:	fa13 f787 	uxtah	r7, r3, r7
   1a2e6:	6027      	str	r7, [r4, #0]
	buf->len = state->len;
   1a2e8:	f8a4 b004 	strh.w	fp, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   1a2ec:	2d00      	cmp	r5, #0
   1a2ee:	d0e1      	beq.n	1a2b4 <le_adv_recv+0xc4>
   1a2f0:	68aa      	ldr	r2, [r5, #8]
   1a2f2:	2a00      	cmp	r2, #0
   1a2f4:	d0df      	beq.n	1a2b6 <le_adv_recv+0xc6>
   1a2f6:	3a08      	subs	r2, #8
   1a2f8:	e7dd      	b.n	1a2b6 <le_adv_recv+0xc6>
			net_buf_simple_restore(buf, &state);
		}
	}

	/* Clear pointer to this stack frame before returning to calling function */
	info->addr = NULL;
   1a2fa:	2300      	movs	r3, #0
   1a2fc:	f8c8 3000 	str.w	r3, [r8]

#if defined(CONFIG_BT_CENTRAL)
	check_pending_conn(&id_addr, addr, info->adv_props);
   1a300:	f898 2008 	ldrb.w	r2, [r8, #8]
   1a304:	4651      	mov	r1, sl
   1a306:	a801      	add	r0, sp, #4
   1a308:	f7ff ff2c 	bl	1a164 <check_pending_conn>
#endif /* CONFIG_BT_CENTRAL */
}
   1a30c:	b005      	add	sp, #20
   1a30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a312:	bf00      	nop
   1a314:	2000043c 	.word	0x2000043c
   1a318:	20007b64 	.word	0x20007b64
   1a31c:	20007b5c 	.word	0x20007b5c
   1a320:	0002e1f0 	.word	0x0002e1f0

0001a324 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   1a324:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a326:	b08b      	sub	sp, #44	; 0x2c
   1a328:	4607      	mov	r7, r0
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   1a32a:	f100 060c 	add.w	r6, r0, #12
   1a32e:	4630      	mov	r0, r6
   1a330:	f00f fe05 	bl	29f3e <net_buf_simple_pull_u8>
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	LOG_DBG("Adv number of reports %u",  num_reports);
   1a334:	e02b      	b.n	1a38e <bt_hci_le_adv_report+0x6a>
	return net_buf_simple_pull_mem(&buf->b, len);
   1a336:	2109      	movs	r1, #9
   1a338:	4630      	mov	r0, r6
   1a33a:	f00f fdf8 	bl	29f2e <net_buf_simple_pull_mem>
   1a33e:	4604      	mov	r4, r0
			break;
		}

		evt = net_buf_pull_mem(buf, sizeof(*evt));

		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   1a340:	2301      	movs	r3, #1
   1a342:	f88d 300c 	strb.w	r3, [sp, #12]
		adv_info.secondary_phy = 0;
   1a346:	2200      	movs	r2, #0
   1a348:	f88d 200d 	strb.w	r2, [sp, #13]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   1a34c:	237f      	movs	r3, #127	; 0x7f
   1a34e:	f88d 3006 	strb.w	r3, [sp, #6]
		adv_info.rssi = evt->data[evt->length];
   1a352:	7a03      	ldrb	r3, [r0, #8]
   1a354:	4403      	add	r3, r0
   1a356:	f993 3009 	ldrsb.w	r3, [r3, #9]
   1a35a:	f88d 3005 	strb.w	r3, [sp, #5]
		adv_info.sid = BT_GAP_SID_INVALID;
   1a35e:	23ff      	movs	r3, #255	; 0xff
   1a360:	f88d 3004 	strb.w	r3, [sp, #4]
		adv_info.interval = 0U;
   1a364:	f8ad 200a 	strh.w	r2, [sp, #10]

		adv_info.adv_type = evt->evt_type;
   1a368:	7800      	ldrb	r0, [r0, #0]
   1a36a:	f88d 0007 	strb.w	r0, [sp, #7]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
   1a36e:	f00d fb2f 	bl	279d0 <get_adv_props_legacy>
   1a372:	f8ad 0008 	strh.w	r0, [sp, #8]

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   1a376:	7a23      	ldrb	r3, [r4, #8]
   1a378:	4632      	mov	r2, r6
   1a37a:	4669      	mov	r1, sp
   1a37c:	1c60      	adds	r0, r4, #1
   1a37e:	f7ff ff37 	bl	1a1f0 <le_adv_recv>

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   1a382:	7a21      	ldrb	r1, [r4, #8]
	return net_buf_simple_pull(&buf->b, len);
   1a384:	3101      	adds	r1, #1
   1a386:	4630      	mov	r0, r6
   1a388:	f00f fdc9 	bl	29f1e <net_buf_simple_pull>
	while (num_reports--) {
   1a38c:	4628      	mov	r0, r5
   1a38e:	1e45      	subs	r5, r0, #1
   1a390:	b2ed      	uxtb	r5, r5
   1a392:	b338      	cbz	r0, 1a3e4 <bt_hci_le_adv_report+0xc0>
		if (buf->len < sizeof(*evt)) {
   1a394:	8a3b      	ldrh	r3, [r7, #16]
   1a396:	2b08      	cmp	r3, #8
   1a398:	d8cd      	bhi.n	1a336 <bt_hci_le_adv_report+0x12>
			LOG_ERR("Unexpected end of buffer");
   1a39a:	4b13      	ldr	r3, [pc, #76]	; (1a3e8 <bt_hci_le_adv_report+0xc4>)
   1a39c:	9309      	str	r3, [sp, #36]	; 0x24
   1a39e:	2302      	movs	r3, #2
   1a3a0:	f88d 3000 	strb.w	r3, [sp]
   1a3a4:	2300      	movs	r3, #0
   1a3a6:	f88d 3001 	strb.w	r3, [sp, #1]
   1a3aa:	f88d 3002 	strb.w	r3, [sp, #2]
   1a3ae:	f88d 3003 	strb.w	r3, [sp, #3]
   1a3b2:	9a00      	ldr	r2, [sp, #0]
   1a3b4:	9208      	str	r2, [sp, #32]
   1a3b6:	4619      	mov	r1, r3
   1a3b8:	f363 0100 	bfi	r1, r3, #0, #1
   1a3bc:	f363 0141 	bfi	r1, r3, #1, #1
   1a3c0:	f363 0182 	bfi	r1, r3, #2, #1
   1a3c4:	f363 01c5 	bfi	r1, r3, #3, #3
   1a3c8:	2201      	movs	r2, #1
   1a3ca:	f362 1188 	bfi	r1, r2, #6, #3
   1a3ce:	2208      	movs	r2, #8
   1a3d0:	f362 2152 	bfi	r1, r2, #9, #10
   1a3d4:	f363 41de 	bfi	r1, r3, #19, #12
   1a3d8:	f363 71df 	bfi	r1, r3, #31, #1
   1a3dc:	aa08      	add	r2, sp, #32
   1a3de:	4803      	ldr	r0, [pc, #12]	; (1a3ec <bt_hci_le_adv_report+0xc8>)
   1a3e0:	f00c fc39 	bl	26c56 <z_impl_z_log_msg_static_create>
	}
}
   1a3e4:	b00b      	add	sp, #44	; 0x2c
   1a3e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a3e8:	0002ea18 	.word	0x0002ea18
   1a3ec:	0002d0d4 	.word	0x0002d0d4

0001a3f0 <state2str>:
#endif /* CONFIG_BT_CONN */
}

static inline const char *state2str(bt_conn_state_t state)
{
	switch (state) {
   1a3f0:	2808      	cmp	r0, #8
   1a3f2:	d816      	bhi.n	1a422 <state2str+0x32>
   1a3f4:	e8df f000 	tbb	[pc, r0]
   1a3f8:	0d071705 	.word	0x0d071705
   1a3fc:	110f090b 	.word	0x110f090b
   1a400:	13          	.byte	0x13
   1a401:	00          	.byte	0x00
   1a402:	480a      	ldr	r0, [pc, #40]	; (1a42c <state2str+0x3c>)
   1a404:	4770      	bx	lr
	case BT_CONN_DISCONNECTED:
		return "disconnected";
	case BT_CONN_DISCONNECT_COMPLETE:
		return "disconnect-complete";
	case BT_CONN_CONNECTING_SCAN:
		return "connecting-scan";
   1a406:	480a      	ldr	r0, [pc, #40]	; (1a430 <state2str+0x40>)
   1a408:	4770      	bx	lr
	case BT_CONN_CONNECTING_DIR_ADV:
		return "connecting-dir-adv";
   1a40a:	480a      	ldr	r0, [pc, #40]	; (1a434 <state2str+0x44>)
   1a40c:	4770      	bx	lr
	case BT_CONN_CONNECTING_ADV:
		return "connecting-adv";
   1a40e:	480a      	ldr	r0, [pc, #40]	; (1a438 <state2str+0x48>)
   1a410:	4770      	bx	lr
	case BT_CONN_CONNECTING_AUTO:
		return "connecting-auto";
   1a412:	480a      	ldr	r0, [pc, #40]	; (1a43c <state2str+0x4c>)
   1a414:	4770      	bx	lr
	case BT_CONN_CONNECTING:
		return "connecting";
   1a416:	480a      	ldr	r0, [pc, #40]	; (1a440 <state2str+0x50>)
   1a418:	4770      	bx	lr
	case BT_CONN_CONNECTED:
		return "connected";
   1a41a:	480a      	ldr	r0, [pc, #40]	; (1a444 <state2str+0x54>)
   1a41c:	4770      	bx	lr
	case BT_CONN_DISCONNECTING:
		return "disconnecting";
   1a41e:	480a      	ldr	r0, [pc, #40]	; (1a448 <state2str+0x58>)
   1a420:	4770      	bx	lr
	default:
		return "(unknown)";
   1a422:	480a      	ldr	r0, [pc, #40]	; (1a44c <state2str+0x5c>)
   1a424:	4770      	bx	lr
		return "disconnect-complete";
   1a426:	480a      	ldr	r0, [pc, #40]	; (1a450 <state2str+0x60>)
	}
}
   1a428:	4770      	bx	lr
   1a42a:	bf00      	nop
   1a42c:	0002ea3c 	.word	0x0002ea3c
   1a430:	0002ea60 	.word	0x0002ea60
   1a434:	0002ea70 	.word	0x0002ea70
   1a438:	0002ea84 	.word	0x0002ea84
   1a43c:	0002ea94 	.word	0x0002ea94
   1a440:	0002eaa4 	.word	0x0002eaa4
   1a444:	0002ed94 	.word	0x0002ed94
   1a448:	0002eab0 	.word	0x0002eab0
   1a44c:	0002eac0 	.word	0x0002eac0
   1a450:	0002ea4c 	.word	0x0002ea4c

0001a454 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   1a454:	b538      	push	{r3, r4, r5, lr}
   1a456:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1a458:	4b0c      	ldr	r3, [pc, #48]	; (1a48c <notify_connected+0x38>)
   1a45a:	681c      	ldr	r4, [r3, #0]
   1a45c:	e003      	b.n	1a466 <notify_connected+0x12>
		if (cb->connected) {
			cb->connected(conn, conn->err);
   1a45e:	7a69      	ldrb	r1, [r5, #9]
   1a460:	4628      	mov	r0, r5
   1a462:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1a464:	6924      	ldr	r4, [r4, #16]
   1a466:	b11c      	cbz	r4, 1a470 <notify_connected+0x1c>
		if (cb->connected) {
   1a468:	6823      	ldr	r3, [r4, #0]
   1a46a:	2b00      	cmp	r3, #0
   1a46c:	d1f7      	bne.n	1a45e <notify_connected+0xa>
   1a46e:	e7f9      	b.n	1a464 <notify_connected+0x10>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a470:	4c07      	ldr	r4, [pc, #28]	; (1a490 <notify_connected+0x3c>)
   1a472:	e000      	b.n	1a476 <notify_connected+0x22>
   1a474:	3414      	adds	r4, #20
   1a476:	4b07      	ldr	r3, [pc, #28]	; (1a494 <notify_connected+0x40>)
   1a478:	429c      	cmp	r4, r3
   1a47a:	d206      	bcs.n	1a48a <notify_connected+0x36>
		if (cb->connected) {
   1a47c:	6823      	ldr	r3, [r4, #0]
   1a47e:	2b00      	cmp	r3, #0
   1a480:	d0f8      	beq.n	1a474 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   1a482:	7a69      	ldrb	r1, [r5, #9]
   1a484:	4628      	mov	r0, r5
   1a486:	4798      	blx	r3
   1a488:	e7f4      	b.n	1a474 <notify_connected+0x20>
		}
	}
}
   1a48a:	bd38      	pop	{r3, r4, r5, pc}
   1a48c:	20007b98 	.word	0x20007b98
   1a490:	0002d068 	.word	0x0002d068
   1a494:	0002d07c 	.word	0x0002d07c

0001a498 <notify_disconnected>:

static void notify_disconnected(struct bt_conn *conn)
{
   1a498:	b538      	push	{r3, r4, r5, lr}
   1a49a:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1a49c:	4b0c      	ldr	r3, [pc, #48]	; (1a4d0 <notify_disconnected+0x38>)
   1a49e:	681c      	ldr	r4, [r3, #0]
   1a4a0:	e003      	b.n	1a4aa <notify_disconnected+0x12>
		if (cb->disconnected) {
			cb->disconnected(conn, conn->err);
   1a4a2:	7a69      	ldrb	r1, [r5, #9]
   1a4a4:	4628      	mov	r0, r5
   1a4a6:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1a4a8:	6924      	ldr	r4, [r4, #16]
   1a4aa:	b11c      	cbz	r4, 1a4b4 <notify_disconnected+0x1c>
		if (cb->disconnected) {
   1a4ac:	6863      	ldr	r3, [r4, #4]
   1a4ae:	2b00      	cmp	r3, #0
   1a4b0:	d1f7      	bne.n	1a4a2 <notify_disconnected+0xa>
   1a4b2:	e7f9      	b.n	1a4a8 <notify_disconnected+0x10>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a4b4:	4c07      	ldr	r4, [pc, #28]	; (1a4d4 <notify_disconnected+0x3c>)
   1a4b6:	e000      	b.n	1a4ba <notify_disconnected+0x22>
   1a4b8:	3414      	adds	r4, #20
   1a4ba:	4b07      	ldr	r3, [pc, #28]	; (1a4d8 <notify_disconnected+0x40>)
   1a4bc:	429c      	cmp	r4, r3
   1a4be:	d206      	bcs.n	1a4ce <notify_disconnected+0x36>
		if (cb->disconnected) {
   1a4c0:	6863      	ldr	r3, [r4, #4]
   1a4c2:	2b00      	cmp	r3, #0
   1a4c4:	d0f8      	beq.n	1a4b8 <notify_disconnected+0x20>
			cb->disconnected(conn, conn->err);
   1a4c6:	7a69      	ldrb	r1, [r5, #9]
   1a4c8:	4628      	mov	r0, r5
   1a4ca:	4798      	blx	r3
   1a4cc:	e7f4      	b.n	1a4b8 <notify_disconnected+0x20>
		}
	}
}
   1a4ce:	bd38      	pop	{r3, r4, r5, pc}
   1a4d0:	20007b98 	.word	0x20007b98
   1a4d4:	0002d068 	.word	0x0002d068
   1a4d8:	0002d07c 	.word	0x0002d07c

0001a4dc <create_param_setup>:

	return true;
}

static void create_param_setup(const struct bt_conn_le_create_param *param)
{
   1a4dc:	b410      	push	{r4}
	bt_dev.create_param = *param;
   1a4de:	4c0c      	ldr	r4, [pc, #48]	; (1a510 <create_param_setup+0x34>)
   1a4e0:	f104 0c08 	add.w	ip, r4, #8
   1a4e4:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   1a4e6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	bt_dev.create_param.timeout =
		(bt_dev.create_param.timeout != 0) ?
   1a4ea:	8aa3      	ldrh	r3, [r4, #20]
	bt_dev.create_param.timeout =
   1a4ec:	b90b      	cbnz	r3, 1a4f2 <create_param_setup+0x16>
   1a4ee:	f44f 7396 	mov.w	r3, #300	; 0x12c
   1a4f2:	4a07      	ldr	r2, [pc, #28]	; (1a510 <create_param_setup+0x34>)
   1a4f4:	8293      	strh	r3, [r2, #20]
		bt_dev.create_param.timeout :
		(MSEC_PER_SEC / 10) * CONFIG_BT_CREATE_CONN_TIMEOUT;

	bt_dev.create_param.interval_coded =
		(bt_dev.create_param.interval_coded != 0) ?
   1a4f6:	8a13      	ldrh	r3, [r2, #16]
	bt_dev.create_param.interval_coded =
   1a4f8:	b903      	cbnz	r3, 1a4fc <create_param_setup+0x20>
   1a4fa:	8993      	ldrh	r3, [r2, #12]
   1a4fc:	4a04      	ldr	r2, [pc, #16]	; (1a510 <create_param_setup+0x34>)
   1a4fe:	8213      	strh	r3, [r2, #16]
		bt_dev.create_param.interval_coded :
		bt_dev.create_param.interval;

	bt_dev.create_param.window_coded =
		(bt_dev.create_param.window_coded != 0) ?
   1a500:	8a53      	ldrh	r3, [r2, #18]
	bt_dev.create_param.window_coded =
   1a502:	b903      	cbnz	r3, 1a506 <create_param_setup+0x2a>
   1a504:	89d3      	ldrh	r3, [r2, #14]
   1a506:	4a02      	ldr	r2, [pc, #8]	; (1a510 <create_param_setup+0x34>)
   1a508:	8253      	strh	r3, [r2, #18]
		bt_dev.create_param.window_coded :
		bt_dev.create_param.window;
}
   1a50a:	bc10      	pop	{r4}
   1a50c:	4770      	bx	lr
   1a50e:	bf00      	nop
   1a510:	20000370 	.word	0x20000370

0001a514 <tx_free>:
{
   1a514:	b508      	push	{r3, lr}
   1a516:	4601      	mov	r1, r0
	tx->cb = NULL;
   1a518:	2300      	movs	r3, #0
   1a51a:	6043      	str	r3, [r0, #4]
	tx->user_data = NULL;
   1a51c:	6083      	str	r3, [r0, #8]
	tx->pending_no_cb = 0U;
   1a51e:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   1a520:	4801      	ldr	r0, [pc, #4]	; (1a528 <tx_free+0x14>)
   1a522:	f011 fde1 	bl	2c0e8 <k_queue_append>
}
   1a526:	bd08      	pop	{r3, pc}
   1a528:	20000b0c 	.word	0x20000b0c

0001a52c <conn_tx_alloc>:
{
   1a52c:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
   1a52e:	f00a fb2f 	bl	24b90 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1a532:	4b08      	ldr	r3, [pc, #32]	; (1a554 <conn_tx_alloc+0x28>)
   1a534:	4283      	cmp	r3, r0
   1a536:	d007      	beq.n	1a548 <conn_tx_alloc+0x1c>
	return z_impl_k_queue_get(queue, timeout);
   1a538:	f04f 32ff 	mov.w	r2, #4294967295
   1a53c:	f04f 33ff 	mov.w	r3, #4294967295
   1a540:	4805      	ldr	r0, [pc, #20]	; (1a558 <conn_tx_alloc+0x2c>)
   1a542:	f009 fd2b 	bl	23f9c <z_impl_k_queue_get>
}
   1a546:	bd08      	pop	{r3, pc}
   1a548:	2200      	movs	r2, #0
   1a54a:	2300      	movs	r3, #0
   1a54c:	4802      	ldr	r0, [pc, #8]	; (1a558 <conn_tx_alloc+0x2c>)
   1a54e:	f009 fd25 	bl	23f9c <z_impl_k_queue_get>
		return k_fifo_get(&free_tx, K_NO_WAIT);
   1a552:	e7f8      	b.n	1a546 <conn_tx_alloc+0x1a>
   1a554:	200078b8 	.word	0x200078b8
   1a558:	20000b0c 	.word	0x20000b0c

0001a55c <bt_conn_get_pkts>:
}
   1a55c:	4800      	ldr	r0, [pc, #0]	; (1a560 <bt_conn_get_pkts+0x4>)
   1a55e:	4770      	bx	lr
   1a560:	20000470 	.word	0x20000470

0001a564 <send_frag>:
{
   1a564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a568:	b083      	sub	sp, #12
   1a56a:	af00      	add	r7, sp, #0
   1a56c:	4605      	mov	r5, r0
   1a56e:	460e      	mov	r6, r1
   1a570:	4692      	mov	sl, r2
   1a572:	461c      	mov	r4, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   1a574:	f8d1 8018 	ldr.w	r8, [r1, #24]
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
   1a578:	f7ff fff0 	bl	1a55c <bt_conn_get_pkts>
   1a57c:	4681      	mov	r9, r0
	return z_impl_k_sem_take(sem, timeout);
   1a57e:	f04f 32ff 	mov.w	r2, #4294967295
   1a582:	f04f 33ff 	mov.w	r3, #4294967295
   1a586:	f009 fd6f 	bl	24068 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   1a58a:	7aab      	ldrb	r3, [r5, #10]
   1a58c:	2b07      	cmp	r3, #7
   1a58e:	d17f      	bne.n	1a690 <send_frag+0x12c>
   1a590:	f04f 0240 	mov.w	r2, #64	; 0x40
   1a594:	f3ef 8311 	mrs	r3, BASEPRI
   1a598:	f382 8812 	msr	BASEPRI_MAX, r2
   1a59c:	f3bf 8f6f 	isb	sy
	if (tx) {
   1a5a0:	f1b8 0f00 	cmp.w	r8, #0
   1a5a4:	d01a      	beq.n	1a5dc <send_frag+0x78>
	parent->next = child;
   1a5a6:	2200      	movs	r2, #0
   1a5a8:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
   1a5ac:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_APPEND(slist, snode)
   1a5ae:	b182      	cbz	r2, 1a5d2 <send_frag+0x6e>
	parent->next = child;
   1a5b0:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
   1a5b4:	f8c5 8018 	str.w	r8, [r5, #24]
	__asm__ volatile(
   1a5b8:	f383 8811 	msr	BASEPRI, r3
   1a5bc:	f3bf 8f6f 	isb	sy
		err = send_acl(conn, buf, flags);
   1a5c0:	4652      	mov	r2, sl
   1a5c2:	4631      	mov	r1, r6
   1a5c4:	4628      	mov	r0, r5
   1a5c6:	f00d fad7 	bl	27b78 <send_acl>
	if (err) {
   1a5ca:	4684      	mov	ip, r0
   1a5cc:	b998      	cbnz	r0, 1a5f6 <send_frag+0x92>
	return true;
   1a5ce:	2001      	movs	r0, #1
   1a5d0:	e06c      	b.n	1a6ac <send_frag+0x148>
   1a5d2:	f8c5 8018 	str.w	r8, [r5, #24]
	list->head = node;
   1a5d6:	f8c5 8014 	str.w	r8, [r5, #20]
}
   1a5da:	e7ed      	b.n	1a5b8 <send_frag+0x54>
	return list->tail;
   1a5dc:	69aa      	ldr	r2, [r5, #24]
		if (tail_tx) {
   1a5de:	b13a      	cbz	r2, 1a5f0 <send_frag+0x8c>
			pending_no_cb = &tail_tx->pending_no_cb;
   1a5e0:	f102 0b0c 	add.w	fp, r2, #12
		(*pending_no_cb)++;
   1a5e4:	f8db 2000 	ldr.w	r2, [fp]
   1a5e8:	3201      	adds	r2, #1
   1a5ea:	f8cb 2000 	str.w	r2, [fp]
   1a5ee:	e7e3      	b.n	1a5b8 <send_frag+0x54>
			pending_no_cb = &conn->pending_no_cb;
   1a5f0:	f105 0b1c 	add.w	fp, r5, #28
   1a5f4:	e7f6      	b.n	1a5e4 <send_frag+0x80>
		LOG_ERR("Unable to send to driver (err %d)", err);
   1a5f6:	46ea      	mov	sl, sp
   1a5f8:	b088      	sub	sp, #32
   1a5fa:	466b      	mov	r3, sp
   1a5fc:	f113 0210 	adds.w	r2, r3, #16
   1a600:	d058      	beq.n	1a6b4 <send_frag+0x150>
   1a602:	210c      	movs	r1, #12
   1a604:	b152      	cbz	r2, 1a61c <send_frag+0xb8>
   1a606:	4608      	mov	r0, r1
   1a608:	2904      	cmp	r1, #4
   1a60a:	dd03      	ble.n	1a614 <send_frag+0xb0>
   1a60c:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 1a6d8 <send_frag+0x174>
   1a610:	f8c3 e014 	str.w	lr, [r3, #20]
   1a614:	2808      	cmp	r0, #8
   1a616:	dd01      	ble.n	1a61c <send_frag+0xb8>
   1a618:	f8c3 c018 	str.w	ip, [r3, #24]
   1a61c:	290b      	cmp	r1, #11
   1a61e:	dd4c      	ble.n	1a6ba <send_frag+0x156>
   1a620:	f04f 0c0c 	mov.w	ip, #12
   1a624:	b13a      	cbz	r2, 1a636 <send_frag+0xd2>
   1a626:	2103      	movs	r1, #3
   1a628:	7139      	strb	r1, [r7, #4]
   1a62a:	2100      	movs	r1, #0
   1a62c:	7179      	strb	r1, [r7, #5]
   1a62e:	71b9      	strb	r1, [r7, #6]
   1a630:	71f9      	strb	r1, [r7, #7]
   1a632:	6878      	ldr	r0, [r7, #4]
   1a634:	6118      	str	r0, [r3, #16]
   1a636:	2100      	movs	r1, #0
   1a638:	f36f 0100 	bfc	r1, #0, #1
   1a63c:	f36f 0141 	bfc	r1, #1, #1
   1a640:	f36f 0182 	bfc	r1, #2, #1
   1a644:	f36f 01c5 	bfc	r1, #3, #3
   1a648:	2301      	movs	r3, #1
   1a64a:	f363 1188 	bfi	r1, r3, #6, #3
   1a64e:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   1a652:	f363 2152 	bfi	r1, r3, #9, #10
   1a656:	f36f 41de 	bfc	r1, #19, #12
   1a65a:	f36f 71df 	bfc	r1, #31, #1
   1a65e:	2300      	movs	r3, #0
   1a660:	481e      	ldr	r0, [pc, #120]	; (1a6dc <send_frag+0x178>)
   1a662:	f00c faf8 	bl	26c56 <z_impl_z_log_msg_static_create>
   1a666:	46d5      	mov	sp, sl
	__asm__ volatile(
   1a668:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a66c:	f3ef 8a11 	mrs	sl, BASEPRI
   1a670:	f383 8812 	msr	BASEPRI_MAX, r3
   1a674:	f3bf 8f6f 	isb	sy
		if (tx) {
   1a678:	f1b8 0f00 	cmp.w	r8, #0
   1a67c:	d020      	beq.n	1a6c0 <send_frag+0x15c>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   1a67e:	4641      	mov	r1, r8
   1a680:	f105 0014 	add.w	r0, r5, #20
   1a684:	f00d f9fd 	bl	27a82 <sys_slist_find_and_remove>
	__asm__ volatile(
   1a688:	f38a 8811 	msr	BASEPRI, sl
   1a68c:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1a690:	4648      	mov	r0, r9
   1a692:	f009 fcc1 	bl	24018 <z_impl_k_sem_give>
	if (tx) {
   1a696:	f1b8 0f00 	cmp.w	r8, #0
   1a69a:	d005      	beq.n	1a6a8 <send_frag+0x144>
		tx_data(buf)->tx = NULL;
   1a69c:	2300      	movs	r3, #0
   1a69e:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
   1a6a0:	4641      	mov	r1, r8
   1a6a2:	4628      	mov	r0, r5
   1a6a4:	f00d fa32 	bl	27b0c <conn_tx_destroy>
	if (always_consume) {
   1a6a8:	b984      	cbnz	r4, 1a6cc <send_frag+0x168>
	return false;
   1a6aa:	4620      	mov	r0, r4
}
   1a6ac:	370c      	adds	r7, #12
   1a6ae:	46bd      	mov	sp, r7
   1a6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_ERR("Unable to send to driver (err %d)", err);
   1a6b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1a6b8:	e7a4      	b.n	1a604 <send_frag+0xa0>
   1a6ba:	f06f 0c1b 	mvn.w	ip, #27
   1a6be:	e7b1      	b.n	1a624 <send_frag+0xc0>
			(*pending_no_cb)--;
   1a6c0:	f8db 3000 	ldr.w	r3, [fp]
   1a6c4:	3b01      	subs	r3, #1
   1a6c6:	f8cb 3000 	str.w	r3, [fp]
   1a6ca:	e7dd      	b.n	1a688 <send_frag+0x124>
		net_buf_unref(buf);
   1a6cc:	4630      	mov	r0, r6
   1a6ce:	f00f fbbd 	bl	29e4c <net_buf_unref>
	return false;
   1a6d2:	2000      	movs	r0, #0
   1a6d4:	e7ea      	b.n	1a6ac <send_frag+0x148>
   1a6d6:	bf00      	nop
   1a6d8:	0002e714 	.word	0x0002e714
   1a6dc:	0002d0ac 	.word	0x0002d0ac

0001a6e0 <bt_conn_new>:
{
   1a6e0:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   1a6e2:	2300      	movs	r3, #0
   1a6e4:	428b      	cmp	r3, r1
   1a6e6:	d229      	bcs.n	1a73c <bt_conn_new+0x5c>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1a6e8:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   1a6ec:	eb00 1484 	add.w	r4, r0, r4, lsl #6
   1a6f0:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1a6f4:	f04f 0c01 	mov.w	ip, #1
   1a6f8:	f3bf 8f5b 	dmb	ish
   1a6fc:	e852 ef00 	ldrex	lr, [r2]
   1a700:	f1be 0f00 	cmp.w	lr, #0
   1a704:	d103      	bne.n	1a70e <bt_conn_new+0x2e>
   1a706:	e842 c500 	strex	r5, ip, [r2]
   1a70a:	2d00      	cmp	r5, #0
   1a70c:	d1f6      	bne.n	1a6fc <bt_conn_new+0x1c>
   1a70e:	f3bf 8f5b 	dmb	ish
   1a712:	d111      	bne.n	1a738 <bt_conn_new+0x58>
	if (!conn) {
   1a714:	b174      	cbz	r4, 1a734 <bt_conn_new+0x54>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   1a716:	22b8      	movs	r2, #184	; 0xb8
   1a718:	2100      	movs	r1, #0
   1a71a:	4620      	mov	r0, r4
   1a71c:	f00c ff05 	bl	2752a <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   1a720:	4907      	ldr	r1, [pc, #28]	; (1a740 <bt_conn_new+0x60>)
   1a722:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1a726:	f011 fe09 	bl	2c33c <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   1a72a:	4906      	ldr	r1, [pc, #24]	; (1a744 <bt_conn_new+0x64>)
   1a72c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1a730:	f011 fdd8 	bl	2c2e4 <k_work_init>
}
   1a734:	4620      	mov	r0, r4
   1a736:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < size; i++) {
   1a738:	4463      	add	r3, ip
   1a73a:	e7d3      	b.n	1a6e4 <bt_conn_new+0x4>
	struct bt_conn *conn = NULL;
   1a73c:	2400      	movs	r4, #0
   1a73e:	e7e9      	b.n	1a714 <bt_conn_new+0x34>
   1a740:	0001b331 	.word	0x0001b331
   1a744:	00027b03 	.word	0x00027b03

0001a748 <acl_conn_new>:
{
   1a748:	b508      	push	{r3, lr}
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1a74a:	2108      	movs	r1, #8
   1a74c:	4801      	ldr	r0, [pc, #4]	; (1a754 <acl_conn_new+0xc>)
   1a74e:	f7ff ffc7 	bl	1a6e0 <bt_conn_new>
}
   1a752:	bd08      	pop	{r3, pc}
   1a754:	200021a8 	.word	0x200021a8

0001a758 <bt_acl_recv>:
{
   1a758:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a75a:	b095      	sub	sp, #84	; 0x54
   1a75c:	af00      	add	r7, sp, #0
   1a75e:	4604      	mov	r4, r0
   1a760:	460d      	mov	r5, r1
	switch (flags) {
   1a762:	2a01      	cmp	r2, #1
   1a764:	d05a      	beq.n	1a81c <bt_acl_recv+0xc4>
   1a766:	4613      	mov	r3, r2
   1a768:	2a02      	cmp	r2, #2
   1a76a:	f040 80c4 	bne.w	1a8f6 <bt_acl_recv+0x19e>
		if (conn->rx) {
   1a76e:	6903      	ldr	r3, [r0, #16]
   1a770:	b323      	cbz	r3, 1a7bc <bt_acl_recv+0x64>
			LOG_ERR("Unexpected first L2CAP frame");
   1a772:	4ba0      	ldr	r3, [pc, #640]	; (1a9f4 <bt_acl_recv+0x29c>)
   1a774:	61fb      	str	r3, [r7, #28]
   1a776:	2302      	movs	r3, #2
   1a778:	713b      	strb	r3, [r7, #4]
   1a77a:	2300      	movs	r3, #0
   1a77c:	717b      	strb	r3, [r7, #5]
   1a77e:	71bb      	strb	r3, [r7, #6]
   1a780:	71fb      	strb	r3, [r7, #7]
   1a782:	687a      	ldr	r2, [r7, #4]
   1a784:	61ba      	str	r2, [r7, #24]
   1a786:	4619      	mov	r1, r3
   1a788:	f363 0100 	bfi	r1, r3, #0, #1
   1a78c:	f363 0141 	bfi	r1, r3, #1, #1
   1a790:	f363 0182 	bfi	r1, r3, #2, #1
   1a794:	f363 01c5 	bfi	r1, r3, #3, #3
   1a798:	2201      	movs	r2, #1
   1a79a:	f362 1188 	bfi	r1, r2, #6, #3
   1a79e:	2208      	movs	r2, #8
   1a7a0:	f362 2152 	bfi	r1, r2, #9, #10
   1a7a4:	f363 41de 	bfi	r1, r3, #19, #12
   1a7a8:	f363 71df 	bfi	r1, r3, #31, #1
   1a7ac:	f107 0218 	add.w	r2, r7, #24
   1a7b0:	4891      	ldr	r0, [pc, #580]	; (1a9f8 <bt_acl_recv+0x2a0>)
   1a7b2:	f00c fa50 	bl	26c56 <z_impl_z_log_msg_static_create>
			bt_conn_reset_rx_state(conn);
   1a7b6:	4620      	mov	r0, r4
   1a7b8:	f00d fa41 	bl	27c3e <bt_conn_reset_rx_state>
		conn->rx = buf;
   1a7bc:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1a7be:	6921      	ldr	r1, [r4, #16]
   1a7c0:	8a08      	ldrh	r0, [r1, #16]
   1a7c2:	2801      	cmp	r0, #1
   1a7c4:	f240 80db 	bls.w	1a97e <bt_acl_recv+0x226>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1a7c8:	68cb      	ldr	r3, [r1, #12]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
   1a7ca:	785a      	ldrb	r2, [r3, #1]
   1a7cc:	781b      	ldrb	r3, [r3, #0]
   1a7ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1a7d2:	3304      	adds	r3, #4
   1a7d4:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1a7d6:	4283      	cmp	r3, r0
   1a7d8:	f200 80d1 	bhi.w	1a97e <bt_acl_recv+0x226>
	if (conn->rx->len > acl_total_len) {
   1a7dc:	f080 8103 	bcs.w	1a9e6 <bt_acl_recv+0x28e>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   1a7e0:	466d      	mov	r5, sp
   1a7e2:	b088      	sub	sp, #32
   1a7e4:	4669      	mov	r1, sp
   1a7e6:	f111 0210 	adds.w	r2, r1, #16
   1a7ea:	f000 80ce 	beq.w	1a98a <bt_acl_recv+0x232>
   1a7ee:	2610      	movs	r6, #16
   1a7f0:	b17a      	cbz	r2, 1a812 <bt_acl_recv+0xba>
   1a7f2:	46b4      	mov	ip, r6
   1a7f4:	2e04      	cmp	r6, #4
   1a7f6:	dd03      	ble.n	1a800 <bt_acl_recv+0xa8>
   1a7f8:	f8df e200 	ldr.w	lr, [pc, #512]	; 1a9fc <bt_acl_recv+0x2a4>
   1a7fc:	f8c1 e014 	str.w	lr, [r1, #20]
   1a800:	f1bc 0f08 	cmp.w	ip, #8
   1a804:	dd00      	ble.n	1a808 <bt_acl_recv+0xb0>
   1a806:	6188      	str	r0, [r1, #24]
   1a808:	f1bc 0f0c 	cmp.w	ip, #12
   1a80c:	f340 80c0 	ble.w	1a990 <bt_acl_recv+0x238>
   1a810:	61cb      	str	r3, [r1, #28]
   1a812:	2e0f      	cmp	r6, #15
   1a814:	f340 80e4 	ble.w	1a9e0 <bt_acl_recv+0x288>
   1a818:	2310      	movs	r3, #16
   1a81a:	e0bb      	b.n	1a994 <bt_acl_recv+0x23c>
		if (!conn->rx) {
   1a81c:	6900      	ldr	r0, [r0, #16]
   1a81e:	b180      	cbz	r0, 1a842 <bt_acl_recv+0xea>
		if (!buf->len) {
   1a820:	8a0e      	ldrh	r6, [r1, #16]
   1a822:	b3be      	cbz	r6, 1a894 <bt_acl_recv+0x13c>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   1a824:	300c      	adds	r0, #12
   1a826:	f00f fb9e 	bl	29f66 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1a82a:	42b0      	cmp	r0, r6
   1a82c:	d336      	bcc.n	1a89c <bt_acl_recv+0x144>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
   1a82e:	6920      	ldr	r0, [r4, #16]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1a830:	8a2a      	ldrh	r2, [r5, #16]
   1a832:	68e9      	ldr	r1, [r5, #12]
   1a834:	300c      	adds	r0, #12
   1a836:	f00f fb56 	bl	29ee6 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1a83a:	4628      	mov	r0, r5
   1a83c:	f00f fb06 	bl	29e4c <net_buf_unref>
		break;
   1a840:	e7bd      	b.n	1a7be <bt_acl_recv+0x66>
			LOG_ERR("Unexpected L2CAP continuation");
   1a842:	4b6f      	ldr	r3, [pc, #444]	; (1aa00 <bt_acl_recv+0x2a8>)
   1a844:	64fb      	str	r3, [r7, #76]	; 0x4c
   1a846:	2302      	movs	r3, #2
   1a848:	713b      	strb	r3, [r7, #4]
   1a84a:	2300      	movs	r3, #0
   1a84c:	717b      	strb	r3, [r7, #5]
   1a84e:	71bb      	strb	r3, [r7, #6]
   1a850:	71fb      	strb	r3, [r7, #7]
   1a852:	687a      	ldr	r2, [r7, #4]
   1a854:	64ba      	str	r2, [r7, #72]	; 0x48
   1a856:	4619      	mov	r1, r3
   1a858:	f363 0100 	bfi	r1, r3, #0, #1
   1a85c:	f363 0141 	bfi	r1, r3, #1, #1
   1a860:	f363 0182 	bfi	r1, r3, #2, #1
   1a864:	f363 01c5 	bfi	r1, r3, #3, #3
   1a868:	2201      	movs	r2, #1
   1a86a:	f362 1188 	bfi	r1, r2, #6, #3
   1a86e:	2208      	movs	r2, #8
   1a870:	f362 2152 	bfi	r1, r2, #9, #10
   1a874:	f363 41de 	bfi	r1, r3, #19, #12
   1a878:	f363 71df 	bfi	r1, r3, #31, #1
   1a87c:	f107 0248 	add.w	r2, r7, #72	; 0x48
   1a880:	485d      	ldr	r0, [pc, #372]	; (1a9f8 <bt_acl_recv+0x2a0>)
   1a882:	f00c f9e8 	bl	26c56 <z_impl_z_log_msg_static_create>
			bt_conn_reset_rx_state(conn);
   1a886:	4620      	mov	r0, r4
   1a888:	f00d f9d9 	bl	27c3e <bt_conn_reset_rx_state>
			net_buf_unref(buf);
   1a88c:	4628      	mov	r0, r5
   1a88e:	f00f fadd 	bl	29e4c <net_buf_unref>
			return;
   1a892:	e074      	b.n	1a97e <bt_acl_recv+0x226>
			net_buf_unref(buf);
   1a894:	4608      	mov	r0, r1
   1a896:	f00f fad9 	bl	29e4c <net_buf_unref>
			return;
   1a89a:	e070      	b.n	1a97e <bt_acl_recv+0x226>
			LOG_ERR("Not enough buffer space for L2CAP data");
   1a89c:	4b59      	ldr	r3, [pc, #356]	; (1aa04 <bt_acl_recv+0x2ac>)
   1a89e:	637b      	str	r3, [r7, #52]	; 0x34
   1a8a0:	2302      	movs	r3, #2
   1a8a2:	713b      	strb	r3, [r7, #4]
   1a8a4:	2600      	movs	r6, #0
   1a8a6:	717e      	strb	r6, [r7, #5]
   1a8a8:	71be      	strb	r6, [r7, #6]
   1a8aa:	71fe      	strb	r6, [r7, #7]
   1a8ac:	687b      	ldr	r3, [r7, #4]
   1a8ae:	633b      	str	r3, [r7, #48]	; 0x30
   1a8b0:	4631      	mov	r1, r6
   1a8b2:	f366 0100 	bfi	r1, r6, #0, #1
   1a8b6:	f366 0141 	bfi	r1, r6, #1, #1
   1a8ba:	f366 0182 	bfi	r1, r6, #2, #1
   1a8be:	f366 01c5 	bfi	r1, r6, #3, #3
   1a8c2:	2301      	movs	r3, #1
   1a8c4:	f363 1188 	bfi	r1, r3, #6, #3
   1a8c8:	2308      	movs	r3, #8
   1a8ca:	f363 2152 	bfi	r1, r3, #9, #10
   1a8ce:	f366 41de 	bfi	r1, r6, #19, #12
   1a8d2:	f366 71df 	bfi	r1, r6, #31, #1
   1a8d6:	4633      	mov	r3, r6
   1a8d8:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1a8dc:	4846      	ldr	r0, [pc, #280]	; (1a9f8 <bt_acl_recv+0x2a0>)
   1a8de:	f00c f9ba 	bl	26c56 <z_impl_z_log_msg_static_create>
			bt_l2cap_recv(conn, conn->rx, false);
   1a8e2:	4632      	mov	r2, r6
   1a8e4:	6921      	ldr	r1, [r4, #16]
   1a8e6:	4620      	mov	r0, r4
   1a8e8:	f001 f9ba 	bl	1bc60 <bt_l2cap_recv>
			conn->rx = NULL;
   1a8ec:	6126      	str	r6, [r4, #16]
			net_buf_unref(buf);
   1a8ee:	4628      	mov	r0, r5
   1a8f0:	f00f faac 	bl	29e4c <net_buf_unref>
			return;
   1a8f4:	e043      	b.n	1a97e <bt_acl_recv+0x226>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   1a8f6:	466e      	mov	r6, sp
   1a8f8:	b088      	sub	sp, #32
   1a8fa:	4669      	mov	r1, sp
   1a8fc:	f111 0210 	adds.w	r2, r1, #16
   1a900:	d010      	beq.n	1a924 <bt_acl_recv+0x1cc>
   1a902:	200c      	movs	r0, #12
   1a904:	b152      	cbz	r2, 1a91c <bt_acl_recv+0x1c4>
   1a906:	4684      	mov	ip, r0
   1a908:	2804      	cmp	r0, #4
   1a90a:	dd03      	ble.n	1a914 <bt_acl_recv+0x1bc>
   1a90c:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 1aa08 <bt_acl_recv+0x2b0>
   1a910:	f8c1 e014 	str.w	lr, [r1, #20]
   1a914:	f1bc 0f08 	cmp.w	ip, #8
   1a918:	dd07      	ble.n	1a92a <bt_acl_recv+0x1d2>
   1a91a:	618b      	str	r3, [r1, #24]
   1a91c:	280b      	cmp	r0, #11
   1a91e:	dd31      	ble.n	1a984 <bt_acl_recv+0x22c>
   1a920:	230c      	movs	r3, #12
   1a922:	e004      	b.n	1a92e <bt_acl_recv+0x1d6>
   1a924:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1a928:	e7ec      	b.n	1a904 <bt_acl_recv+0x1ac>
   1a92a:	f06f 031b 	mvn.w	r3, #27
   1a92e:	b13a      	cbz	r2, 1a940 <bt_acl_recv+0x1e8>
   1a930:	2003      	movs	r0, #3
   1a932:	7138      	strb	r0, [r7, #4]
   1a934:	2000      	movs	r0, #0
   1a936:	7178      	strb	r0, [r7, #5]
   1a938:	71b8      	strb	r0, [r7, #6]
   1a93a:	71f8      	strb	r0, [r7, #7]
   1a93c:	6878      	ldr	r0, [r7, #4]
   1a93e:	6108      	str	r0, [r1, #16]
   1a940:	2100      	movs	r1, #0
   1a942:	f36f 0100 	bfc	r1, #0, #1
   1a946:	f36f 0141 	bfc	r1, #1, #1
   1a94a:	f36f 0182 	bfc	r1, #2, #1
   1a94e:	f36f 01c5 	bfc	r1, #3, #3
   1a952:	2001      	movs	r0, #1
   1a954:	f360 1188 	bfi	r1, r0, #6, #3
   1a958:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   1a95c:	f363 2152 	bfi	r1, r3, #9, #10
   1a960:	f36f 41de 	bfc	r1, #19, #12
   1a964:	f36f 71df 	bfc	r1, #31, #1
   1a968:	2300      	movs	r3, #0
   1a96a:	4823      	ldr	r0, [pc, #140]	; (1a9f8 <bt_acl_recv+0x2a0>)
   1a96c:	f00c f973 	bl	26c56 <z_impl_z_log_msg_static_create>
   1a970:	46b5      	mov	sp, r6
		bt_conn_reset_rx_state(conn);
   1a972:	4620      	mov	r0, r4
   1a974:	f00d f963 	bl	27c3e <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   1a978:	4628      	mov	r0, r5
   1a97a:	f00f fa67 	bl	29e4c <net_buf_unref>
}
   1a97e:	3754      	adds	r7, #84	; 0x54
   1a980:	46bd      	mov	sp, r7
   1a982:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   1a984:	f06f 031b 	mvn.w	r3, #27
   1a988:	e7d1      	b.n	1a92e <bt_acl_recv+0x1d6>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   1a98a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   1a98e:	e72f      	b.n	1a7f0 <bt_acl_recv+0x98>
   1a990:	f06f 031b 	mvn.w	r3, #27
   1a994:	b13a      	cbz	r2, 1a9a6 <bt_acl_recv+0x24e>
   1a996:	2004      	movs	r0, #4
   1a998:	7138      	strb	r0, [r7, #4]
   1a99a:	2000      	movs	r0, #0
   1a99c:	7178      	strb	r0, [r7, #5]
   1a99e:	71b8      	strb	r0, [r7, #6]
   1a9a0:	71f8      	strb	r0, [r7, #7]
   1a9a2:	6878      	ldr	r0, [r7, #4]
   1a9a4:	6108      	str	r0, [r1, #16]
   1a9a6:	2100      	movs	r1, #0
   1a9a8:	f36f 0100 	bfc	r1, #0, #1
   1a9ac:	f36f 0141 	bfc	r1, #1, #1
   1a9b0:	f36f 0182 	bfc	r1, #2, #1
   1a9b4:	f36f 01c5 	bfc	r1, #3, #3
   1a9b8:	2001      	movs	r0, #1
   1a9ba:	f360 1188 	bfi	r1, r0, #6, #3
   1a9be:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
   1a9c2:	f363 2152 	bfi	r1, r3, #9, #10
   1a9c6:	f36f 41de 	bfc	r1, #19, #12
   1a9ca:	f36f 71df 	bfc	r1, #31, #1
   1a9ce:	2300      	movs	r3, #0
   1a9d0:	4809      	ldr	r0, [pc, #36]	; (1a9f8 <bt_acl_recv+0x2a0>)
   1a9d2:	f00c f940 	bl	26c56 <z_impl_z_log_msg_static_create>
   1a9d6:	46ad      	mov	sp, r5
		bt_conn_reset_rx_state(conn);
   1a9d8:	4620      	mov	r0, r4
   1a9da:	f00d f930 	bl	27c3e <bt_conn_reset_rx_state>
		return;
   1a9de:	e7ce      	b.n	1a97e <bt_acl_recv+0x226>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   1a9e0:	f06f 031b 	mvn.w	r3, #27
   1a9e4:	e7d6      	b.n	1a994 <bt_acl_recv+0x23c>
	conn->rx = NULL;
   1a9e6:	2300      	movs	r3, #0
   1a9e8:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   1a9ea:	2201      	movs	r2, #1
   1a9ec:	4620      	mov	r0, r4
   1a9ee:	f001 f937 	bl	1bc60 <bt_l2cap_recv>
   1a9f2:	e7c4      	b.n	1a97e <bt_acl_recv+0x226>
   1a9f4:	0002eacc 	.word	0x0002eacc
   1a9f8:	0002d0ac 	.word	0x0002d0ac
   1a9fc:	0002eb54 	.word	0x0002eb54
   1aa00:	0002eaec 	.word	0x0002eaec
   1aa04:	0002eb0c 	.word	0x0002eb0c
   1aa08:	0002eb34 	.word	0x0002eb34

0001aa0c <bt_conn_send_cb>:
{
   1aa0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aa10:	b094      	sub	sp, #80	; 0x50
   1aa12:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   1aa14:	7a83      	ldrb	r3, [r0, #10]
   1aa16:	2b07      	cmp	r3, #7
   1aa18:	d11b      	bne.n	1aa52 <bt_conn_send_cb+0x46>
   1aa1a:	4604      	mov	r4, r0
   1aa1c:	460d      	mov	r5, r1
   1aa1e:	4616      	mov	r6, r2
	if (cb) {
   1aa20:	2a00      	cmp	r2, #0
   1aa22:	f000 8090 	beq.w	1ab46 <bt_conn_send_cb+0x13a>
		tx = conn_tx_alloc();
   1aa26:	f7ff fd81 	bl	1a52c <conn_tx_alloc>
		if (!tx) {
   1aa2a:	4680      	mov	r8, r0
   1aa2c:	2800      	cmp	r0, #0
   1aa2e:	d038      	beq.n	1aaa2 <bt_conn_send_cb+0x96>
		if (conn->state != BT_CONN_CONNECTED) {
   1aa30:	7aa3      	ldrb	r3, [r4, #10]
   1aa32:	2b07      	cmp	r3, #7
   1aa34:	d15d      	bne.n	1aaf2 <bt_conn_send_cb+0xe6>
		tx->cb = cb;
   1aa36:	6046      	str	r6, [r0, #4]
		tx->user_data = user_data;
   1aa38:	6087      	str	r7, [r0, #8]
		tx->pending_no_cb = 0U;
   1aa3a:	2300      	movs	r3, #0
   1aa3c:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   1aa3e:	61a8      	str	r0, [r5, #24]
	net_buf_put(&conn->tx_queue, buf);
   1aa40:	4629      	mov	r1, r5
   1aa42:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1aa46:	f00f f9fd 	bl	29e44 <net_buf_put>
	return 0;
   1aa4a:	2000      	movs	r0, #0
}
   1aa4c:	b014      	add	sp, #80	; 0x50
   1aa4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("not connected!");
   1aa52:	4b3e      	ldr	r3, [pc, #248]	; (1ab4c <bt_conn_send_cb+0x140>)
   1aa54:	9313      	str	r3, [sp, #76]	; 0x4c
   1aa56:	2302      	movs	r3, #2
   1aa58:	f88d 3004 	strb.w	r3, [sp, #4]
   1aa5c:	2300      	movs	r3, #0
   1aa5e:	f88d 3005 	strb.w	r3, [sp, #5]
   1aa62:	f88d 3006 	strb.w	r3, [sp, #6]
   1aa66:	f88d 3007 	strb.w	r3, [sp, #7]
   1aa6a:	9a01      	ldr	r2, [sp, #4]
   1aa6c:	9212      	str	r2, [sp, #72]	; 0x48
   1aa6e:	4619      	mov	r1, r3
   1aa70:	f363 0100 	bfi	r1, r3, #0, #1
   1aa74:	f363 0141 	bfi	r1, r3, #1, #1
   1aa78:	f363 0182 	bfi	r1, r3, #2, #1
   1aa7c:	f363 01c5 	bfi	r1, r3, #3, #3
   1aa80:	2201      	movs	r2, #1
   1aa82:	f362 1188 	bfi	r1, r2, #6, #3
   1aa86:	2208      	movs	r2, #8
   1aa88:	f362 2152 	bfi	r1, r2, #9, #10
   1aa8c:	f363 41de 	bfi	r1, r3, #19, #12
   1aa90:	f363 71df 	bfi	r1, r3, #31, #1
   1aa94:	aa12      	add	r2, sp, #72	; 0x48
   1aa96:	482e      	ldr	r0, [pc, #184]	; (1ab50 <bt_conn_send_cb+0x144>)
   1aa98:	f00c f8dd 	bl	26c56 <z_impl_z_log_msg_static_create>
		return -ENOTCONN;
   1aa9c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1aaa0:	e7d4      	b.n	1aa4c <bt_conn_send_cb+0x40>
			LOG_ERR("Unable to allocate TX context");
   1aaa2:	4b2c      	ldr	r3, [pc, #176]	; (1ab54 <bt_conn_send_cb+0x148>)
   1aaa4:	930d      	str	r3, [sp, #52]	; 0x34
   1aaa6:	2302      	movs	r3, #2
   1aaa8:	f88d 3004 	strb.w	r3, [sp, #4]
   1aaac:	2300      	movs	r3, #0
   1aaae:	f88d 3005 	strb.w	r3, [sp, #5]
   1aab2:	f88d 3006 	strb.w	r3, [sp, #6]
   1aab6:	f88d 3007 	strb.w	r3, [sp, #7]
   1aaba:	9a01      	ldr	r2, [sp, #4]
   1aabc:	920c      	str	r2, [sp, #48]	; 0x30
   1aabe:	4619      	mov	r1, r3
   1aac0:	f363 0100 	bfi	r1, r3, #0, #1
   1aac4:	f363 0141 	bfi	r1, r3, #1, #1
   1aac8:	f363 0182 	bfi	r1, r3, #2, #1
   1aacc:	f363 01c5 	bfi	r1, r3, #3, #3
   1aad0:	2201      	movs	r2, #1
   1aad2:	f362 1188 	bfi	r1, r2, #6, #3
   1aad6:	2208      	movs	r2, #8
   1aad8:	f362 2152 	bfi	r1, r2, #9, #10
   1aadc:	f363 41de 	bfi	r1, r3, #19, #12
   1aae0:	f363 71df 	bfi	r1, r3, #31, #1
   1aae4:	aa0c      	add	r2, sp, #48	; 0x30
   1aae6:	481a      	ldr	r0, [pc, #104]	; (1ab50 <bt_conn_send_cb+0x144>)
   1aae8:	f00c f8b5 	bl	26c56 <z_impl_z_log_msg_static_create>
			return -ENOBUFS;
   1aaec:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1aaf0:	e7ac      	b.n	1aa4c <bt_conn_send_cb+0x40>
			LOG_WRN("Disconnected while allocating context");
   1aaf2:	4b19      	ldr	r3, [pc, #100]	; (1ab58 <bt_conn_send_cb+0x14c>)
   1aaf4:	9307      	str	r3, [sp, #28]
   1aaf6:	2202      	movs	r2, #2
   1aaf8:	f88d 2004 	strb.w	r2, [sp, #4]
   1aafc:	2300      	movs	r3, #0
   1aafe:	f88d 3005 	strb.w	r3, [sp, #5]
   1ab02:	f88d 3006 	strb.w	r3, [sp, #6]
   1ab06:	f88d 3007 	strb.w	r3, [sp, #7]
   1ab0a:	9901      	ldr	r1, [sp, #4]
   1ab0c:	9106      	str	r1, [sp, #24]
   1ab0e:	4619      	mov	r1, r3
   1ab10:	f363 0100 	bfi	r1, r3, #0, #1
   1ab14:	f363 0141 	bfi	r1, r3, #1, #1
   1ab18:	f363 0182 	bfi	r1, r3, #2, #1
   1ab1c:	f363 01c5 	bfi	r1, r3, #3, #3
   1ab20:	f362 1188 	bfi	r1, r2, #6, #3
   1ab24:	2208      	movs	r2, #8
   1ab26:	f362 2152 	bfi	r1, r2, #9, #10
   1ab2a:	f363 41de 	bfi	r1, r3, #19, #12
   1ab2e:	f363 71df 	bfi	r1, r3, #31, #1
   1ab32:	aa06      	add	r2, sp, #24
   1ab34:	4806      	ldr	r0, [pc, #24]	; (1ab50 <bt_conn_send_cb+0x144>)
   1ab36:	f00c f88e 	bl	26c56 <z_impl_z_log_msg_static_create>
			tx_free(tx);
   1ab3a:	4640      	mov	r0, r8
   1ab3c:	f7ff fcea 	bl	1a514 <tx_free>
			return -ENOTCONN;
   1ab40:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1ab44:	e782      	b.n	1aa4c <bt_conn_send_cb+0x40>
		tx_data(buf)->tx = NULL;
   1ab46:	2300      	movs	r3, #0
   1ab48:	618b      	str	r3, [r1, #24]
   1ab4a:	e779      	b.n	1aa40 <bt_conn_send_cb+0x34>
   1ab4c:	0002eb70 	.word	0x0002eb70
   1ab50:	0002d0ac 	.word	0x0002d0ac
   1ab54:	0002eb80 	.word	0x0002eb80
   1ab58:	0002eba0 	.word	0x0002eba0

0001ab5c <bt_conn_prepare_events>:
{
   1ab5c:	b570      	push	{r4, r5, r6, lr}
   1ab5e:	4606      	mov	r6, r0
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
   1ab60:	4c10      	ldr	r4, [pc, #64]	; (1aba4 <bt_conn_prepare_events+0x48>)
   1ab62:	4620      	mov	r0, r4
   1ab64:	f012 f890 	bl	2cc88 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1ab68:	4623      	mov	r3, r4
   1ab6a:	2200      	movs	r2, #0
   1ab6c:	2101      	movs	r1, #1
   1ab6e:	4630      	mov	r0, r6
   1ab70:	f012 f863 	bl	2cc3a <k_poll_event_init>
   1ab74:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1ab76:	2400      	movs	r4, #0
   1ab78:	e000      	b.n	1ab7c <bt_conn_prepare_events+0x20>
   1ab7a:	3401      	adds	r4, #1
   1ab7c:	2c07      	cmp	r4, #7
   1ab7e:	d80e      	bhi.n	1ab9e <bt_conn_prepare_events+0x42>
		conn = &acl_conns[i];
   1ab80:	eb04 0044 	add.w	r0, r4, r4, lsl #1
		if (!conn_prepare_events(conn, &events[ev_count])) {
   1ab84:	eb05 0185 	add.w	r1, r5, r5, lsl #2
   1ab88:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   1ab8c:	4b06      	ldr	r3, [pc, #24]	; (1aba8 <bt_conn_prepare_events+0x4c>)
   1ab8e:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   1ab92:	f00d f87e 	bl	27c92 <conn_prepare_events>
   1ab96:	2800      	cmp	r0, #0
   1ab98:	d1ef      	bne.n	1ab7a <bt_conn_prepare_events+0x1e>
			ev_count++;
   1ab9a:	3501      	adds	r5, #1
   1ab9c:	e7ed      	b.n	1ab7a <bt_conn_prepare_events+0x1e>
}
   1ab9e:	4628      	mov	r0, r5
   1aba0:	bd70      	pop	{r4, r5, r6, pc}
   1aba2:	bf00      	nop
   1aba4:	200007b8 	.word	0x200007b8
   1aba8:	200021a8 	.word	0x200021a8

0001abac <bt_conn_lookup_handle>:
{
   1abac:	b508      	push	{r3, lr}
   1abae:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   1abb0:	2108      	movs	r1, #8
   1abb2:	4802      	ldr	r0, [pc, #8]	; (1abbc <bt_conn_lookup_handle+0x10>)
   1abb4:	f00d f8d9 	bl	27d6a <conn_lookup_handle>
}
   1abb8:	bd08      	pop	{r3, pc}
   1abba:	bf00      	nop
   1abbc:	200021a8 	.word	0x200021a8

0001abc0 <bt_conn_set_state>:
{
   1abc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1abc2:	b083      	sub	sp, #12
   1abc4:	af00      	add	r7, sp, #0
   1abc6:	460d      	mov	r5, r1
	if (conn->state == state) {
   1abc8:	7a86      	ldrb	r6, [r0, #10]
   1abca:	428e      	cmp	r6, r1
   1abcc:	d014      	beq.n	1abf8 <bt_conn_set_state+0x38>
   1abce:	4604      	mov	r4, r0
	conn->state = state;
   1abd0:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   1abd2:	2e00      	cmp	r6, #0
   1abd4:	d068      	beq.n	1aca8 <bt_conn_set_state+0xe8>
   1abd6:	2e06      	cmp	r6, #6
   1abd8:	d06c      	beq.n	1acb4 <bt_conn_set_state+0xf4>
	switch (conn->state) {
   1abda:	7aa3      	ldrb	r3, [r4, #10]
   1abdc:	2b08      	cmp	r3, #8
   1abde:	f200 814e 	bhi.w	1ae7e <bt_conn_set_state+0x2be>
   1abe2:	e8df f013 	tbh	[pc, r3, lsl #1]
   1abe6:	007d      	.short	0x007d
   1abe8:	005b0148 	.word	0x005b0148
   1abec:	005b005b 	.word	0x005b005b
   1abf0:	0121005b 	.word	0x0121005b
   1abf4:	005b006e 	.word	0x005b006e
		LOG_WRN("no transition %s", state2str(state));
   1abf8:	4608      	mov	r0, r1
   1abfa:	f7ff fbf9 	bl	1a3f0 <state2str>
   1abfe:	466d      	mov	r5, sp
   1ac00:	2300      	movs	r3, #0
   1ac02:	713b      	strb	r3, [r7, #4]
   1ac04:	2302      	movs	r3, #2
   1ac06:	717b      	strb	r3, [r7, #5]
   1ac08:	b088      	sub	sp, #32
   1ac0a:	466c      	mov	r4, sp
   1ac0c:	f114 0210 	adds.w	r2, r4, #16
   1ac10:	d011      	beq.n	1ac36 <bt_conn_set_state+0x76>
   1ac12:	260e      	movs	r6, #14
   1ac14:	b11a      	cbz	r2, 1ac1e <bt_conn_set_state+0x5e>
   1ac16:	2e04      	cmp	r6, #4
   1ac18:	dd01      	ble.n	1ac1e <bt_conn_set_state+0x5e>
   1ac1a:	4bb7      	ldr	r3, [pc, #732]	; (1aef8 <bt_conn_set_state+0x338>)
   1ac1c:	6163      	str	r3, [r4, #20]
   1ac1e:	2300      	movs	r3, #0
   1ac20:	703b      	strb	r3, [r7, #0]
   1ac22:	2302      	movs	r3, #2
   1ac24:	707b      	strb	r3, [r7, #1]
   1ac26:	b19a      	cbz	r2, 1ac50 <bt_conn_set_state+0x90>
   1ac28:	2e08      	cmp	r6, #8
   1ac2a:	dd00      	ble.n	1ac2e <bt_conn_set_state+0x6e>
   1ac2c:	61a0      	str	r0, [r4, #24]
   1ac2e:	f104 031c 	add.w	r3, r4, #28
   1ac32:	2100      	movs	r1, #0
   1ac34:	e00a      	b.n	1ac4c <bt_conn_set_state+0x8c>
   1ac36:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   1ac3a:	e7eb      	b.n	1ac14 <bt_conn_set_state+0x54>
   1ac3c:	f101 0008 	add.w	r0, r1, #8
   1ac40:	4438      	add	r0, r7
   1ac42:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   1ac46:	f803 0b01 	strb.w	r0, [r3], #1
   1ac4a:	3101      	adds	r1, #1
   1ac4c:	2901      	cmp	r1, #1
   1ac4e:	d9f5      	bls.n	1ac3c <bt_conn_set_state+0x7c>
   1ac50:	2e0d      	cmp	r6, #13
   1ac52:	dd26      	ble.n	1aca2 <bt_conn_set_state+0xe2>
   1ac54:	230e      	movs	r3, #14
   1ac56:	b142      	cbz	r2, 1ac6a <bt_conn_set_state+0xaa>
   1ac58:	2103      	movs	r1, #3
   1ac5a:	7139      	strb	r1, [r7, #4]
   1ac5c:	2100      	movs	r1, #0
   1ac5e:	7179      	strb	r1, [r7, #5]
   1ac60:	71b9      	strb	r1, [r7, #6]
   1ac62:	2101      	movs	r1, #1
   1ac64:	71f9      	strb	r1, [r7, #7]
   1ac66:	6878      	ldr	r0, [r7, #4]
   1ac68:	6120      	str	r0, [r4, #16]
   1ac6a:	2100      	movs	r1, #0
   1ac6c:	f36f 0100 	bfc	r1, #0, #1
   1ac70:	f36f 0141 	bfc	r1, #1, #1
   1ac74:	f36f 0182 	bfc	r1, #2, #1
   1ac78:	f36f 01c5 	bfc	r1, #3, #3
   1ac7c:	2002      	movs	r0, #2
   1ac7e:	f360 1188 	bfi	r1, r0, #6, #3
   1ac82:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1ac86:	f363 2152 	bfi	r1, r3, #9, #10
   1ac8a:	f36f 41de 	bfc	r1, #19, #12
   1ac8e:	f36f 71df 	bfc	r1, #31, #1
   1ac92:	2300      	movs	r3, #0
   1ac94:	4899      	ldr	r0, [pc, #612]	; (1aefc <bt_conn_set_state+0x33c>)
   1ac96:	f00b ffde 	bl	26c56 <z_impl_z_log_msg_static_create>
   1ac9a:	46ad      	mov	sp, r5
}
   1ac9c:	370c      	adds	r7, #12
   1ac9e:	46bd      	mov	sp, r7
   1aca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_WRN("no transition %s", state2str(state));
   1aca2:	f06f 031b 	mvn.w	r3, #27
   1aca6:	e7d6      	b.n	1ac56 <bt_conn_set_state+0x96>
		if (conn->type != BT_CONN_TYPE_ISO) {
   1aca8:	7883      	ldrb	r3, [r0, #2]
   1acaa:	2b08      	cmp	r3, #8
   1acac:	d095      	beq.n	1abda <bt_conn_set_state+0x1a>
			bt_conn_ref(conn);
   1acae:	f00d f828 	bl	27d02 <bt_conn_ref>
   1acb2:	e792      	b.n	1abda <bt_conn_set_state+0x1a>
		    conn->type == BT_CONN_TYPE_LE) {
   1acb4:	7883      	ldrb	r3, [r0, #2]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1acb6:	2b01      	cmp	r3, #1
   1acb8:	d18f      	bne.n	1abda <bt_conn_set_state+0x1a>
			k_work_cancel_delayable(&conn->deferred_work);
   1acba:	3058      	adds	r0, #88	; 0x58
   1acbc:	f011 fb91 	bl	2c3e2 <k_work_cancel_delayable>
   1acc0:	e78b      	b.n	1abda <bt_conn_set_state+0x1a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1acc2:	78a3      	ldrb	r3, [r4, #2]
   1acc4:	2b04      	cmp	r3, #4
   1acc6:	d0e9      	beq.n	1ac9c <bt_conn_set_state+0xdc>
		k_fifo_init(&conn->tx_queue);
   1acc8:	f104 0038 	add.w	r0, r4, #56	; 0x38
	z_impl_k_queue_init(queue);
   1accc:	f011 fa00 	bl	2c0d0 <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1acd0:	2100      	movs	r1, #0
   1acd2:	488b      	ldr	r0, [pc, #556]	; (1af00 <bt_conn_set_state+0x340>)
   1acd4:	f00a fa40 	bl	25158 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   1acd8:	2300      	movs	r3, #0
   1acda:	6523      	str	r3, [r4, #80]	; 0x50
	list->tail = NULL;
   1acdc:	6563      	str	r3, [r4, #84]	; 0x54
}
   1acde:	e7dd      	b.n	1ac9c <bt_conn_set_state+0xdc>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1ace0:	78a3      	ldrb	r3, [r4, #2]
   1ace2:	2b04      	cmp	r3, #4
   1ace4:	d016      	beq.n	1ad14 <bt_conn_set_state+0x154>
		switch (old_state) {
   1ace6:	2e08      	cmp	r6, #8
   1ace8:	d8d8      	bhi.n	1ac9c <bt_conn_set_state+0xdc>
   1acea:	a301      	add	r3, pc, #4	; (adr r3, 1acf0 <bt_conn_set_state+0x130>)
   1acec:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1acf0:	0001adb1 	.word	0x0001adb1
   1acf4:	0001ad1d 	.word	0x0001ad1d
   1acf8:	0001ad79 	.word	0x0001ad79
   1acfc:	0001ada1 	.word	0x0001ada1
   1ad00:	0001ada9 	.word	0x0001ada9
   1ad04:	0001ad8d 	.word	0x0001ad8d
   1ad08:	0001ad65 	.word	0x0001ad65
   1ad0c:	0001ac9d 	.word	0x0001ac9d
   1ad10:	0001adb1 	.word	0x0001adb1
			bt_conn_unref(conn);
   1ad14:	4620      	mov	r0, r4
   1ad16:	f00d f81b 	bl	27d50 <bt_conn_unref>
			break;
   1ad1a:	e7bf      	b.n	1ac9c <bt_conn_set_state+0xdc>
			tx_notify(conn);
   1ad1c:	4620      	mov	r0, r4
   1ad1e:	f00c fecd 	bl	27abc <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1ad22:	78a3      	ldrb	r3, [r4, #2]
   1ad24:	2b01      	cmp	r3, #1
   1ad26:	d011      	beq.n	1ad4c <bt_conn_set_state+0x18c>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
   1ad28:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ad2a:	f3bf 8f5b 	dmb	ish
   1ad2e:	e854 3f00 	ldrex	r3, [r4]
   1ad32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1ad36:	e844 3200 	strex	r2, r3, [r4]
   1ad3a:	2a00      	cmp	r2, #0
   1ad3c:	d1f7      	bne.n	1ad2e <bt_conn_set_state+0x16e>
   1ad3e:	f3bf 8f5b 	dmb	ish
   1ad42:	2100      	movs	r1, #0
   1ad44:	486e      	ldr	r0, [pc, #440]	; (1af00 <bt_conn_set_state+0x340>)
   1ad46:	f00a fa07 	bl	25158 <z_impl_k_poll_signal_raise>
   1ad4a:	e7a7      	b.n	1ac9c <bt_conn_set_state+0xdc>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   1ad4c:	f104 0558 	add.w	r5, r4, #88	; 0x58
   1ad50:	4628      	mov	r0, r5
   1ad52:	f011 faff 	bl	2c354 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1ad56:	f010 0f0c 	tst.w	r0, #12
   1ad5a:	d0e5      	beq.n	1ad28 <bt_conn_set_state+0x168>
				k_work_cancel_delayable(&conn->deferred_work);
   1ad5c:	4628      	mov	r0, r5
   1ad5e:	f011 fb40 	bl	2c3e2 <k_work_cancel_delayable>
   1ad62:	e7e1      	b.n	1ad28 <bt_conn_set_state+0x168>
			if (conn->err) {
   1ad64:	7a63      	ldrb	r3, [r4, #9]
   1ad66:	b91b      	cbnz	r3, 1ad70 <bt_conn_set_state+0x1b0>
			bt_conn_unref(conn);
   1ad68:	4620      	mov	r0, r4
   1ad6a:	f00c fff1 	bl	27d50 <bt_conn_unref>
			break;
   1ad6e:	e795      	b.n	1ac9c <bt_conn_set_state+0xdc>
				notify_connected(conn);
   1ad70:	4620      	mov	r0, r4
   1ad72:	f7ff fb6f 	bl	1a454 <notify_connected>
   1ad76:	e7f7      	b.n	1ad68 <bt_conn_set_state+0x1a8>
			if (conn->err) {
   1ad78:	7a63      	ldrb	r3, [r4, #9]
   1ad7a:	b91b      	cbnz	r3, 1ad84 <bt_conn_set_state+0x1c4>
			bt_conn_unref(conn);
   1ad7c:	4620      	mov	r0, r4
   1ad7e:	f00c ffe7 	bl	27d50 <bt_conn_unref>
			break;
   1ad82:	e78b      	b.n	1ac9c <bt_conn_set_state+0xdc>
				notify_connected(conn);
   1ad84:	4620      	mov	r0, r4
   1ad86:	f7ff fb65 	bl	1a454 <notify_connected>
   1ad8a:	e7f7      	b.n	1ad7c <bt_conn_set_state+0x1bc>
			if (conn->err) {
   1ad8c:	7a63      	ldrb	r3, [r4, #9]
   1ad8e:	b91b      	cbnz	r3, 1ad98 <bt_conn_set_state+0x1d8>
			bt_conn_unref(conn);
   1ad90:	4620      	mov	r0, r4
   1ad92:	f00c ffdd 	bl	27d50 <bt_conn_unref>
			break;
   1ad96:	e781      	b.n	1ac9c <bt_conn_set_state+0xdc>
				notify_connected(conn);
   1ad98:	4620      	mov	r0, r4
   1ad9a:	f7ff fb5b 	bl	1a454 <notify_connected>
   1ad9e:	e7f7      	b.n	1ad90 <bt_conn_set_state+0x1d0>
			bt_conn_unref(conn);
   1ada0:	4620      	mov	r0, r4
   1ada2:	f00c ffd5 	bl	27d50 <bt_conn_unref>
			break;
   1ada6:	e779      	b.n	1ac9c <bt_conn_set_state+0xdc>
			bt_conn_unref(conn);
   1ada8:	4620      	mov	r0, r4
   1adaa:	f00c ffd1 	bl	27d50 <bt_conn_unref>
			break;
   1adae:	e775      	b.n	1ac9c <bt_conn_set_state+0xdc>
			LOG_WRN("Invalid (%u) old state", state);
   1adb0:	466e      	mov	r6, sp
   1adb2:	b088      	sub	sp, #32
   1adb4:	466b      	mov	r3, sp
   1adb6:	f113 0210 	adds.w	r2, r3, #16
   1adba:	d02f      	beq.n	1ae1c <bt_conn_set_state+0x25c>
   1adbc:	210c      	movs	r1, #12
   1adbe:	b13a      	cbz	r2, 1add0 <bt_conn_set_state+0x210>
   1adc0:	4608      	mov	r0, r1
   1adc2:	2904      	cmp	r1, #4
   1adc4:	dd01      	ble.n	1adca <bt_conn_set_state+0x20a>
   1adc6:	4c4f      	ldr	r4, [pc, #316]	; (1af04 <bt_conn_set_state+0x344>)
   1adc8:	615c      	str	r4, [r3, #20]
   1adca:	2808      	cmp	r0, #8
   1adcc:	dd00      	ble.n	1add0 <bt_conn_set_state+0x210>
   1adce:	619d      	str	r5, [r3, #24]
   1add0:	290b      	cmp	r1, #11
   1add2:	dd26      	ble.n	1ae22 <bt_conn_set_state+0x262>
   1add4:	240c      	movs	r4, #12
   1add6:	b13a      	cbz	r2, 1ade8 <bt_conn_set_state+0x228>
   1add8:	2103      	movs	r1, #3
   1adda:	7139      	strb	r1, [r7, #4]
   1addc:	2100      	movs	r1, #0
   1adde:	7179      	strb	r1, [r7, #5]
   1ade0:	71b9      	strb	r1, [r7, #6]
   1ade2:	71f9      	strb	r1, [r7, #7]
   1ade4:	6878      	ldr	r0, [r7, #4]
   1ade6:	6118      	str	r0, [r3, #16]
   1ade8:	2100      	movs	r1, #0
   1adea:	f36f 0100 	bfc	r1, #0, #1
   1adee:	f36f 0141 	bfc	r1, #1, #1
   1adf2:	f36f 0182 	bfc	r1, #2, #1
   1adf6:	f36f 01c5 	bfc	r1, #3, #3
   1adfa:	2302      	movs	r3, #2
   1adfc:	f363 1188 	bfi	r1, r3, #6, #3
   1ae00:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1ae04:	f363 2152 	bfi	r1, r3, #9, #10
   1ae08:	f36f 41de 	bfc	r1, #19, #12
   1ae0c:	f36f 71df 	bfc	r1, #31, #1
   1ae10:	2300      	movs	r3, #0
   1ae12:	483a      	ldr	r0, [pc, #232]	; (1aefc <bt_conn_set_state+0x33c>)
   1ae14:	f00b ff1f 	bl	26c56 <z_impl_z_log_msg_static_create>
   1ae18:	46b5      	mov	sp, r6
   1ae1a:	e73f      	b.n	1ac9c <bt_conn_set_state+0xdc>
   1ae1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1ae20:	e7cd      	b.n	1adbe <bt_conn_set_state+0x1fe>
   1ae22:	f06f 041b 	mvn.w	r4, #27
   1ae26:	e7d6      	b.n	1add6 <bt_conn_set_state+0x216>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1ae28:	78a3      	ldrb	r3, [r4, #2]
   1ae2a:	2b04      	cmp	r3, #4
   1ae2c:	f43f af36 	beq.w	1ac9c <bt_conn_set_state+0xdc>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1ae30:	2b01      	cmp	r3, #1
   1ae32:	f47f af33 	bne.w	1ac9c <bt_conn_set_state+0xdc>
			k_work_schedule(&conn->deferred_work,
   1ae36:	3458      	adds	r4, #88	; 0x58
					K_MSEC(10 * bt_dev.create_param.timeout));
   1ae38:	4b33      	ldr	r3, [pc, #204]	; (1af08 <bt_conn_set_state+0x348>)
   1ae3a:	8a98      	ldrh	r0, [r3, #20]
   1ae3c:	b1c0      	cbz	r0, 1ae70 <bt_conn_set_state+0x2b0>
   1ae3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1ae42:	0040      	lsls	r0, r0, #1
   1ae44:	2100      	movs	r1, #0
			return ((t * to_hz + off) / from_hz);
   1ae46:	03c9      	lsls	r1, r1, #15
   1ae48:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   1ae4c:	03c0      	lsls	r0, r0, #15
   1ae4e:	f240 33e7 	movw	r3, #999	; 0x3e7
   1ae52:	18c0      	adds	r0, r0, r3
   1ae54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ae58:	f04f 0300 	mov.w	r3, #0
   1ae5c:	f141 0100 	adc.w	r1, r1, #0
   1ae60:	f7e5 f94e 	bl	100 <__aeabi_uldivmod>
   1ae64:	4602      	mov	r2, r0
   1ae66:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
   1ae68:	4620      	mov	r0, r4
   1ae6a:	f009 fa9d 	bl	243a8 <k_work_schedule>
   1ae6e:	e715      	b.n	1ac9c <bt_conn_set_state+0xdc>
					K_MSEC(10 * bt_dev.create_param.timeout));
   1ae70:	2000      	movs	r0, #0
   1ae72:	4601      	mov	r1, r0
   1ae74:	e7e7      	b.n	1ae46 <bt_conn_set_state+0x286>
		process_unack_tx(conn);
   1ae76:	4620      	mov	r0, r4
   1ae78:	f00c fe9f 	bl	27bba <process_unack_tx>
		break;
   1ae7c:	e70e      	b.n	1ac9c <bt_conn_set_state+0xdc>
		LOG_WRN("no valid (%u) state was set", state);
   1ae7e:	466e      	mov	r6, sp
   1ae80:	b088      	sub	sp, #32
   1ae82:	466b      	mov	r3, sp
   1ae84:	f113 0210 	adds.w	r2, r3, #16
   1ae88:	d130      	bne.n	1aeec <bt_conn_set_state+0x32c>
   1ae8a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1ae8e:	b13a      	cbz	r2, 1aea0 <bt_conn_set_state+0x2e0>
   1ae90:	4608      	mov	r0, r1
   1ae92:	2904      	cmp	r1, #4
   1ae94:	dd01      	ble.n	1ae9a <bt_conn_set_state+0x2da>
   1ae96:	4c1d      	ldr	r4, [pc, #116]	; (1af0c <bt_conn_set_state+0x34c>)
   1ae98:	615c      	str	r4, [r3, #20]
   1ae9a:	2808      	cmp	r0, #8
   1ae9c:	dd00      	ble.n	1aea0 <bt_conn_set_state+0x2e0>
   1ae9e:	619d      	str	r5, [r3, #24]
   1aea0:	290b      	cmp	r1, #11
   1aea2:	dd25      	ble.n	1aef0 <bt_conn_set_state+0x330>
   1aea4:	240c      	movs	r4, #12
   1aea6:	b13a      	cbz	r2, 1aeb8 <bt_conn_set_state+0x2f8>
   1aea8:	2103      	movs	r1, #3
   1aeaa:	7139      	strb	r1, [r7, #4]
   1aeac:	2100      	movs	r1, #0
   1aeae:	7179      	strb	r1, [r7, #5]
   1aeb0:	71b9      	strb	r1, [r7, #6]
   1aeb2:	71f9      	strb	r1, [r7, #7]
   1aeb4:	6878      	ldr	r0, [r7, #4]
   1aeb6:	6118      	str	r0, [r3, #16]
   1aeb8:	2100      	movs	r1, #0
   1aeba:	f36f 0100 	bfc	r1, #0, #1
   1aebe:	f36f 0141 	bfc	r1, #1, #1
   1aec2:	f36f 0182 	bfc	r1, #2, #1
   1aec6:	f36f 01c5 	bfc	r1, #3, #3
   1aeca:	2302      	movs	r3, #2
   1aecc:	f363 1188 	bfi	r1, r3, #6, #3
   1aed0:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1aed4:	f364 2152 	bfi	r1, r4, #9, #10
   1aed8:	f36f 41de 	bfc	r1, #19, #12
   1aedc:	f36f 71df 	bfc	r1, #31, #1
   1aee0:	2300      	movs	r3, #0
   1aee2:	4806      	ldr	r0, [pc, #24]	; (1aefc <bt_conn_set_state+0x33c>)
   1aee4:	f00b feb7 	bl	26c56 <z_impl_z_log_msg_static_create>
   1aee8:	46b5      	mov	sp, r6
   1aeea:	e6d7      	b.n	1ac9c <bt_conn_set_state+0xdc>
   1aeec:	210c      	movs	r1, #12
   1aeee:	e7ce      	b.n	1ae8e <bt_conn_set_state+0x2ce>
   1aef0:	f06f 041b 	mvn.w	r4, #27
   1aef4:	e7d7      	b.n	1aea6 <bt_conn_set_state+0x2e6>
   1aef6:	bf00      	nop
   1aef8:	0002ebc8 	.word	0x0002ebc8
   1aefc:	0002d0ac 	.word	0x0002d0ac
   1af00:	200007b8 	.word	0x200007b8
   1af04:	0002ebdc 	.word	0x0002ebdc
   1af08:	20000370 	.word	0x20000370
   1af0c:	0002ebf4 	.word	0x0002ebf4

0001af10 <bt_conn_index>:
		index = conn - acl_conns;
   1af10:	4b03      	ldr	r3, [pc, #12]	; (1af20 <bt_conn_index+0x10>)
   1af12:	1ac0      	subs	r0, r0, r3
   1af14:	1180      	asrs	r0, r0, #6
   1af16:	4b03      	ldr	r3, [pc, #12]	; (1af24 <bt_conn_index+0x14>)
   1af18:	fb03 f000 	mul.w	r0, r3, r0
}
   1af1c:	b2c0      	uxtb	r0, r0
   1af1e:	4770      	bx	lr
   1af20:	200021a8 	.word	0x200021a8
   1af24:	aaaaaaab 	.word	0xaaaaaaab

0001af28 <bt_conn_create_pdu_timeout>:
{
   1af28:	b530      	push	{r4, r5, lr}
   1af2a:	b089      	sub	sp, #36	; 0x24
   1af2c:	460c      	mov	r4, r1
	if (!pool) {
   1af2e:	4601      	mov	r1, r0
   1af30:	b158      	cbz	r0, 1af4a <bt_conn_create_pdu_timeout+0x22>
	return net_buf_alloc_fixed(pool, timeout);
   1af32:	4608      	mov	r0, r1
   1af34:	f00e ff43 	bl	29dbe <net_buf_alloc_fixed>
	if (!buf) {
   1af38:	4605      	mov	r5, r0
   1af3a:	b140      	cbz	r0, 1af4e <bt_conn_create_pdu_timeout+0x26>
	net_buf_simple_reserve(&buf->b, reserve);
   1af3c:	1d21      	adds	r1, r4, #4
   1af3e:	300c      	adds	r0, #12
   1af40:	f00e ff4e 	bl	29de0 <net_buf_simple_reserve>
}
   1af44:	4628      	mov	r0, r5
   1af46:	b009      	add	sp, #36	; 0x24
   1af48:	bd30      	pop	{r4, r5, pc}
		pool = &acl_tx_pool;
   1af4a:	4913      	ldr	r1, [pc, #76]	; (1af98 <bt_conn_create_pdu_timeout+0x70>)
   1af4c:	e7f1      	b.n	1af32 <bt_conn_create_pdu_timeout+0xa>
		LOG_WRN("Unable to allocate buffer within timeout");
   1af4e:	4b13      	ldr	r3, [pc, #76]	; (1af9c <bt_conn_create_pdu_timeout+0x74>)
   1af50:	9307      	str	r3, [sp, #28]
   1af52:	2202      	movs	r2, #2
   1af54:	f88d 2004 	strb.w	r2, [sp, #4]
   1af58:	2300      	movs	r3, #0
   1af5a:	f88d 3005 	strb.w	r3, [sp, #5]
   1af5e:	f88d 3006 	strb.w	r3, [sp, #6]
   1af62:	f88d 3007 	strb.w	r3, [sp, #7]
   1af66:	9901      	ldr	r1, [sp, #4]
   1af68:	9106      	str	r1, [sp, #24]
   1af6a:	4619      	mov	r1, r3
   1af6c:	f363 0100 	bfi	r1, r3, #0, #1
   1af70:	f363 0141 	bfi	r1, r3, #1, #1
   1af74:	f363 0182 	bfi	r1, r3, #2, #1
   1af78:	f363 01c5 	bfi	r1, r3, #3, #3
   1af7c:	f362 1188 	bfi	r1, r2, #6, #3
   1af80:	2208      	movs	r2, #8
   1af82:	f362 2152 	bfi	r1, r2, #9, #10
   1af86:	f363 41de 	bfi	r1, r3, #19, #12
   1af8a:	f363 71df 	bfi	r1, r3, #31, #1
   1af8e:	aa06      	add	r2, sp, #24
   1af90:	4803      	ldr	r0, [pc, #12]	; (1afa0 <bt_conn_create_pdu_timeout+0x78>)
   1af92:	f00b fe60 	bl	26c56 <z_impl_z_log_msg_static_create>
		return NULL;
   1af96:	e7d5      	b.n	1af44 <bt_conn_create_pdu_timeout+0x1c>
   1af98:	20000b24 	.word	0x20000b24
   1af9c:	0002ec10 	.word	0x0002ec10
   1afa0:	0002d0ac 	.word	0x0002d0ac

0001afa4 <notify_le_param_updated>:
{
   1afa4:	b570      	push	{r4, r5, r6, lr}
   1afa6:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1afa8:	1d05      	adds	r5, r0, #4
   1afaa:	2109      	movs	r1, #9
   1afac:	4628      	mov	r0, r5
   1afae:	f00c fdd6 	bl	27b5e <atomic_test_bit>
   1afb2:	b178      	cbz	r0, 1afd4 <notify_le_param_updated+0x30>
	    conn->le.interval >= conn->le.interval_min &&
   1afb4:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
   1afb8:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1afbc:	4293      	cmp	r3, r2
   1afbe:	d309      	bcc.n	1afd4 <notify_le_param_updated+0x30>
	    conn->le.interval <= conn->le.interval_max &&
   1afc0:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
	    conn->le.interval >= conn->le.interval_min &&
   1afc4:	4293      	cmp	r3, r2
   1afc6:	d805      	bhi.n	1afd4 <notify_le_param_updated+0x30>
	    conn->le.latency == conn->le.pending_latency &&
   1afc8:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   1afcc:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1afd0:	429a      	cmp	r2, r3
   1afd2:	d002      	beq.n	1afda <notify_le_param_updated+0x36>
	for (cb = callback_list; cb; cb = cb->_next) {
   1afd4:	4b18      	ldr	r3, [pc, #96]	; (1b038 <notify_le_param_updated+0x94>)
   1afd6:	681d      	ldr	r5, [r3, #0]
   1afd8:	e015      	b.n	1b006 <notify_le_param_updated+0x62>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1afda:	f3bf 8f5b 	dmb	ish
   1afde:	e855 3f00 	ldrex	r3, [r5]
   1afe2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   1afe6:	e845 3200 	strex	r2, r3, [r5]
   1afea:	2a00      	cmp	r2, #0
   1afec:	d1f7      	bne.n	1afde <notify_le_param_updated+0x3a>
   1afee:	f3bf 8f5b 	dmb	ish
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
}
   1aff2:	e7ef      	b.n	1afd4 <notify_le_param_updated+0x30>
			cb->le_param_updated(conn, conn->le.interval,
   1aff4:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1aff8:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1affc:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1b000:	4620      	mov	r0, r4
   1b002:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1b004:	692d      	ldr	r5, [r5, #16]
   1b006:	b11d      	cbz	r5, 1b010 <notify_le_param_updated+0x6c>
		if (cb->le_param_updated) {
   1b008:	68ee      	ldr	r6, [r5, #12]
   1b00a:	2e00      	cmp	r6, #0
   1b00c:	d1f2      	bne.n	1aff4 <notify_le_param_updated+0x50>
   1b00e:	e7f9      	b.n	1b004 <notify_le_param_updated+0x60>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1b010:	4d0a      	ldr	r5, [pc, #40]	; (1b03c <notify_le_param_updated+0x98>)
   1b012:	e000      	b.n	1b016 <notify_le_param_updated+0x72>
   1b014:	3514      	adds	r5, #20
   1b016:	4b0a      	ldr	r3, [pc, #40]	; (1b040 <notify_le_param_updated+0x9c>)
   1b018:	429d      	cmp	r5, r3
   1b01a:	d20b      	bcs.n	1b034 <notify_le_param_updated+0x90>
		if (cb->le_param_updated) {
   1b01c:	68ee      	ldr	r6, [r5, #12]
   1b01e:	2e00      	cmp	r6, #0
   1b020:	d0f8      	beq.n	1b014 <notify_le_param_updated+0x70>
			cb->le_param_updated(conn, conn->le.interval,
   1b022:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1b026:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1b02a:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1b02e:	4620      	mov	r0, r4
   1b030:	47b0      	blx	r6
   1b032:	e7ef      	b.n	1b014 <notify_le_param_updated+0x70>
}
   1b034:	bd70      	pop	{r4, r5, r6, pc}
   1b036:	bf00      	nop
   1b038:	20007b98 	.word	0x20007b98
   1b03c:	0002d068 	.word	0x0002d068
   1b040:	0002d07c 	.word	0x0002d07c

0001b044 <le_param_req>:
{
   1b044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b046:	4606      	mov	r6, r0
   1b048:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1b04a:	4608      	mov	r0, r1
   1b04c:	f00c fc3c 	bl	278c8 <bt_le_conn_params_valid>
   1b050:	4607      	mov	r7, r0
   1b052:	b338      	cbz	r0, 1b0a4 <le_param_req+0x60>
	for (cb = callback_list; cb; cb = cb->_next) {
   1b054:	4b15      	ldr	r3, [pc, #84]	; (1b0ac <le_param_req+0x68>)
   1b056:	681c      	ldr	r4, [r3, #0]
   1b058:	e000      	b.n	1b05c <le_param_req+0x18>
   1b05a:	6924      	ldr	r4, [r4, #16]
   1b05c:	b16c      	cbz	r4, 1b07a <le_param_req+0x36>
		if (!cb->le_param_req) {
   1b05e:	68a3      	ldr	r3, [r4, #8]
   1b060:	2b00      	cmp	r3, #0
   1b062:	d0fa      	beq.n	1b05a <le_param_req+0x16>
		if (!cb->le_param_req(conn, param)) {
   1b064:	4629      	mov	r1, r5
   1b066:	4630      	mov	r0, r6
   1b068:	4798      	blx	r3
   1b06a:	b1d0      	cbz	r0, 1b0a2 <le_param_req+0x5e>
		if (!bt_le_conn_params_valid(param)) {
   1b06c:	4628      	mov	r0, r5
   1b06e:	f00c fc2b 	bl	278c8 <bt_le_conn_params_valid>
   1b072:	2800      	cmp	r0, #0
   1b074:	d1f1      	bne.n	1b05a <le_param_req+0x16>
			return false;
   1b076:	4607      	mov	r7, r0
   1b078:	e014      	b.n	1b0a4 <le_param_req+0x60>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1b07a:	4c0d      	ldr	r4, [pc, #52]	; (1b0b0 <le_param_req+0x6c>)
   1b07c:	e000      	b.n	1b080 <le_param_req+0x3c>
   1b07e:	3414      	adds	r4, #20
   1b080:	4b0c      	ldr	r3, [pc, #48]	; (1b0b4 <le_param_req+0x70>)
   1b082:	429c      	cmp	r4, r3
   1b084:	d20e      	bcs.n	1b0a4 <le_param_req+0x60>
		if (!cb->le_param_req) {
   1b086:	68a3      	ldr	r3, [r4, #8]
   1b088:	2b00      	cmp	r3, #0
   1b08a:	d0f8      	beq.n	1b07e <le_param_req+0x3a>
		if (!cb->le_param_req(conn, param)) {
   1b08c:	4629      	mov	r1, r5
   1b08e:	4630      	mov	r0, r6
   1b090:	4798      	blx	r3
   1b092:	b148      	cbz	r0, 1b0a8 <le_param_req+0x64>
		if (!bt_le_conn_params_valid(param)) {
   1b094:	4628      	mov	r0, r5
   1b096:	f00c fc17 	bl	278c8 <bt_le_conn_params_valid>
   1b09a:	2800      	cmp	r0, #0
   1b09c:	d1ef      	bne.n	1b07e <le_param_req+0x3a>
			return false;
   1b09e:	4607      	mov	r7, r0
   1b0a0:	e000      	b.n	1b0a4 <le_param_req+0x60>
			return false;
   1b0a2:	4607      	mov	r7, r0
}
   1b0a4:	4638      	mov	r0, r7
   1b0a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false;
   1b0a8:	4607      	mov	r7, r0
   1b0aa:	e7fb      	b.n	1b0a4 <le_param_req+0x60>
   1b0ac:	20007b98 	.word	0x20007b98
   1b0b0:	0002d068 	.word	0x0002d068
   1b0b4:	0002d07c 	.word	0x0002d07c

0001b0b8 <bt_conn_lookup_addr_le>:
{
   1b0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b0ba:	4607      	mov	r7, r0
   1b0bc:	460e      	mov	r6, r1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1b0be:	2400      	movs	r4, #0
   1b0c0:	e002      	b.n	1b0c8 <bt_conn_lookup_addr_le+0x10>
			bt_conn_unref(conn);
   1b0c2:	f00c fe45 	bl	27d50 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1b0c6:	3401      	adds	r4, #1
   1b0c8:	2c07      	cmp	r4, #7
   1b0ca:	d817      	bhi.n	1b0fc <bt_conn_lookup_addr_le+0x44>
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1b0cc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1b0d0:	480b      	ldr	r0, [pc, #44]	; (1b100 <bt_conn_lookup_addr_le+0x48>)
   1b0d2:	eb00 1083 	add.w	r0, r0, r3, lsl #6
   1b0d6:	f00c fe14 	bl	27d02 <bt_conn_ref>
		if (!conn) {
   1b0da:	4605      	mov	r5, r0
   1b0dc:	2800      	cmp	r0, #0
   1b0de:	d0f2      	beq.n	1b0c6 <bt_conn_lookup_addr_le+0xe>
		if (conn->type != BT_CONN_TYPE_LE) {
   1b0e0:	7883      	ldrb	r3, [r0, #2]
   1b0e2:	2b01      	cmp	r3, #1
   1b0e4:	d1ed      	bne.n	1b0c2 <bt_conn_lookup_addr_le+0xa>
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   1b0e6:	4632      	mov	r2, r6
   1b0e8:	4639      	mov	r1, r7
   1b0ea:	f00c fe8b 	bl	27e04 <bt_conn_is_peer_addr_le>
   1b0ee:	b108      	cbz	r0, 1b0f4 <bt_conn_lookup_addr_le+0x3c>
}
   1b0f0:	4628      	mov	r0, r5
   1b0f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   1b0f4:	4628      	mov	r0, r5
   1b0f6:	f00c fe2b 	bl	27d50 <bt_conn_unref>
			continue;
   1b0fa:	e7e4      	b.n	1b0c6 <bt_conn_lookup_addr_le+0xe>
	return NULL;
   1b0fc:	2500      	movs	r5, #0
   1b0fe:	e7f7      	b.n	1b0f0 <bt_conn_lookup_addr_le+0x38>
   1b100:	200021a8 	.word	0x200021a8

0001b104 <bt_conn_lookup_state_le>:
{
   1b104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b108:	4607      	mov	r7, r0
   1b10a:	460e      	mov	r6, r1
   1b10c:	4690      	mov	r8, r2
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1b10e:	2400      	movs	r4, #0
   1b110:	e00a      	b.n	1b128 <bt_conn_lookup_state_le+0x24>
			bt_conn_unref(conn);
   1b112:	f00c fe1d 	bl	27d50 <bt_conn_unref>
			continue;
   1b116:	e006      	b.n	1b126 <bt_conn_lookup_state_le+0x22>
			bt_conn_unref(conn);
   1b118:	4628      	mov	r0, r5
   1b11a:	f00c fe19 	bl	27d50 <bt_conn_unref>
			continue;
   1b11e:	e002      	b.n	1b126 <bt_conn_lookup_state_le+0x22>
			bt_conn_unref(conn);
   1b120:	4628      	mov	r0, r5
   1b122:	f00c fe15 	bl	27d50 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1b126:	3401      	adds	r4, #1
   1b128:	2c07      	cmp	r4, #7
   1b12a:	d81c      	bhi.n	1b166 <bt_conn_lookup_state_le+0x62>
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1b12c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1b130:	480e      	ldr	r0, [pc, #56]	; (1b16c <bt_conn_lookup_state_le+0x68>)
   1b132:	eb00 1083 	add.w	r0, r0, r3, lsl #6
   1b136:	f00c fde4 	bl	27d02 <bt_conn_ref>
		if (!conn) {
   1b13a:	4605      	mov	r5, r0
   1b13c:	2800      	cmp	r0, #0
   1b13e:	d0f2      	beq.n	1b126 <bt_conn_lookup_state_le+0x22>
		if (conn->type != BT_CONN_TYPE_LE) {
   1b140:	7883      	ldrb	r3, [r0, #2]
   1b142:	2b01      	cmp	r3, #1
   1b144:	d1e5      	bne.n	1b112 <bt_conn_lookup_state_le+0xe>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   1b146:	b12e      	cbz	r6, 1b154 <bt_conn_lookup_state_le+0x50>
   1b148:	4632      	mov	r2, r6
   1b14a:	4639      	mov	r1, r7
   1b14c:	f00c fe5a 	bl	27e04 <bt_conn_is_peer_addr_le>
   1b150:	2800      	cmp	r0, #0
   1b152:	d0e1      	beq.n	1b118 <bt_conn_lookup_state_le+0x14>
		if (!(conn->state == state && conn->id == id)) {
   1b154:	7aab      	ldrb	r3, [r5, #10]
   1b156:	4543      	cmp	r3, r8
   1b158:	d1e2      	bne.n	1b120 <bt_conn_lookup_state_le+0x1c>
   1b15a:	7a2b      	ldrb	r3, [r5, #8]
   1b15c:	42bb      	cmp	r3, r7
   1b15e:	d1df      	bne.n	1b120 <bt_conn_lookup_state_le+0x1c>
}
   1b160:	4628      	mov	r0, r5
   1b162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   1b166:	2500      	movs	r5, #0
   1b168:	e7fa      	b.n	1b160 <bt_conn_lookup_state_le+0x5c>
   1b16a:	bf00      	nop
   1b16c:	200021a8 	.word	0x200021a8

0001b170 <bt_conn_le_create_auto>:

#if defined(CONFIG_BT_FILTER_ACCEPT_LIST)
int bt_conn_le_create_auto(const struct bt_conn_le_create_param *create_param,
			   const struct bt_le_conn_param *param)
{
   1b170:	b570      	push	{r4, r5, r6, lr}
   1b172:	b088      	sub	sp, #32
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b174:	f3bf 8f5b 	dmb	ish
   1b178:	4b4d      	ldr	r3, [pc, #308]	; (1b2b0 <bt_conn_le_create_auto+0x140>)
   1b17a:	681b      	ldr	r3, [r3, #0]
   1b17c:	f3bf 8f5b 	dmb	ish
	struct bt_conn *conn;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1b180:	f013 0f04 	tst.w	r3, #4
   1b184:	f000 8081 	beq.w	1b28a <bt_conn_le_create_auto+0x11a>
   1b188:	4606      	mov	r6, r0
   1b18a:	460d      	mov	r5, r1
		return -EAGAIN;
	}

	if (!bt_le_conn_params_valid(param)) {
   1b18c:	4608      	mov	r0, r1
   1b18e:	f00c fb9b 	bl	278c8 <bt_le_conn_params_valid>
   1b192:	2800      	cmp	r0, #0
   1b194:	d07c      	beq.n	1b290 <bt_conn_le_create_auto+0x120>
		return -EINVAL;
	}

	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, BT_ADDR_LE_NONE,
   1b196:	2203      	movs	r2, #3
   1b198:	4946      	ldr	r1, [pc, #280]	; (1b2b4 <bt_conn_le_create_auto+0x144>)
   1b19a:	2000      	movs	r0, #0
   1b19c:	f7ff ffb2 	bl	1b104 <bt_conn_lookup_state_le>
				       BT_CONN_CONNECTING_AUTO);
	if (conn) {
   1b1a0:	2800      	cmp	r0, #0
   1b1a2:	d13e      	bne.n	1b222 <bt_conn_le_create_auto+0xb2>
   1b1a4:	f3bf 8f5b 	dmb	ish
   1b1a8:	4b41      	ldr	r3, [pc, #260]	; (1b2b0 <bt_conn_le_create_auto+0x140>)
   1b1aa:	681b      	ldr	r3, [r3, #0]
   1b1ac:	f3bf 8f5b 	dmb	ish
	}

	/* Scanning either to connect or explicit scan, either case scanner was
	 * started by application and should not be stopped.
	 */
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   1b1b0:	f013 0f40 	tst.w	r3, #64	; 0x40
   1b1b4:	d16f      	bne.n	1b296 <bt_conn_le_create_auto+0x126>
   1b1b6:	f3bf 8f5b 	dmb	ish
   1b1ba:	4b3d      	ldr	r3, [pc, #244]	; (1b2b0 <bt_conn_le_create_auto+0x140>)
   1b1bc:	681b      	ldr	r3, [r3, #0]
   1b1be:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   1b1c2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   1b1c6:	d169      	bne.n	1b29c <bt_conn_le_create_auto+0x12c>
		return -EINVAL;
	}

	if (!bt_id_scan_random_addr_check()) {
   1b1c8:	f00c fc00 	bl	279cc <bt_id_scan_random_addr_check>
   1b1cc:	2800      	cmp	r0, #0
   1b1ce:	d068      	beq.n	1b2a2 <bt_conn_le_create_auto+0x132>
		return -EINVAL;
	}

	conn = bt_conn_add_le(BT_ID_DEFAULT, BT_ADDR_LE_NONE);
   1b1d0:	4938      	ldr	r1, [pc, #224]	; (1b2b4 <bt_conn_le_create_auto+0x144>)
   1b1d2:	2000      	movs	r0, #0
   1b1d4:	f00c fdff 	bl	27dd6 <bt_conn_add_le>
	if (!conn) {
   1b1d8:	4604      	mov	r4, r0
   1b1da:	2800      	cmp	r0, #0
   1b1dc:	d064      	beq.n	1b2a8 <bt_conn_le_create_auto+0x138>
		return -ENOMEM;
	}

	bt_conn_set_param_le(conn, param);
   1b1de:	4629      	mov	r1, r5
   1b1e0:	f00c fc5f 	bl	27aa2 <bt_conn_set_param_le>
	create_param_setup(create_param);
   1b1e4:	4630      	mov	r0, r6
   1b1e6:	f7ff f979 	bl	1a4dc <create_param_setup>

	atomic_set_bit(conn->flags, BT_CONN_AUTO_CONNECT);
   1b1ea:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b1ec:	f3bf 8f5b 	dmb	ish
   1b1f0:	e853 1f00 	ldrex	r1, [r3]
   1b1f4:	f041 0101 	orr.w	r1, r1, #1
   1b1f8:	e843 1200 	strex	r2, r1, [r3]
   1b1fc:	2a00      	cmp	r2, #0
   1b1fe:	d1f7      	bne.n	1b1f0 <bt_conn_le_create_auto+0x80>
   1b200:	f3bf 8f5b 	dmb	ish
	bt_conn_set_state(conn, BT_CONN_CONNECTING_AUTO);
   1b204:	2103      	movs	r1, #3
   1b206:	4620      	mov	r0, r4
   1b208:	f7ff fcda 	bl	1abc0 <bt_conn_set_state>

	err = bt_le_create_conn(conn);
   1b20c:	4620      	mov	r0, r4
   1b20e:	f00c faf2 	bl	277f6 <bt_le_create_conn>
	if (err) {
   1b212:	4606      	mov	r6, r0
   1b214:	b950      	cbnz	r0, 1b22c <bt_conn_le_create_auto+0xbc>
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   1b216:	4620      	mov	r0, r4
   1b218:	f00c fd9a 	bl	27d50 <bt_conn_unref>
	return 0;
}
   1b21c:	4630      	mov	r0, r6
   1b21e:	b008      	add	sp, #32
   1b220:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_unref(conn);
   1b222:	f00c fd95 	bl	27d50 <bt_conn_unref>
		return -EALREADY;
   1b226:	f06f 0677 	mvn.w	r6, #119	; 0x77
   1b22a:	e7f7      	b.n	1b21c <bt_conn_le_create_auto+0xac>
		LOG_ERR("Failed to start filtered scan");
   1b22c:	4b22      	ldr	r3, [pc, #136]	; (1b2b8 <bt_conn_le_create_auto+0x148>)
   1b22e:	9307      	str	r3, [sp, #28]
   1b230:	2302      	movs	r3, #2
   1b232:	f88d 3004 	strb.w	r3, [sp, #4]
   1b236:	2500      	movs	r5, #0
   1b238:	f88d 5005 	strb.w	r5, [sp, #5]
   1b23c:	f88d 5006 	strb.w	r5, [sp, #6]
   1b240:	f88d 5007 	strb.w	r5, [sp, #7]
   1b244:	9b01      	ldr	r3, [sp, #4]
   1b246:	9306      	str	r3, [sp, #24]
   1b248:	4629      	mov	r1, r5
   1b24a:	f365 0100 	bfi	r1, r5, #0, #1
   1b24e:	f365 0141 	bfi	r1, r5, #1, #1
   1b252:	f365 0182 	bfi	r1, r5, #2, #1
   1b256:	f365 01c5 	bfi	r1, r5, #3, #3
   1b25a:	2301      	movs	r3, #1
   1b25c:	f363 1188 	bfi	r1, r3, #6, #3
   1b260:	2308      	movs	r3, #8
   1b262:	f363 2152 	bfi	r1, r3, #9, #10
   1b266:	f365 41de 	bfi	r1, r5, #19, #12
   1b26a:	f365 71df 	bfi	r1, r5, #31, #1
   1b26e:	462b      	mov	r3, r5
   1b270:	aa06      	add	r2, sp, #24
   1b272:	4812      	ldr	r0, [pc, #72]	; (1b2bc <bt_conn_le_create_auto+0x14c>)
   1b274:	f00b fcef 	bl	26c56 <z_impl_z_log_msg_static_create>
		conn->err = 0;
   1b278:	7265      	strb	r5, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1b27a:	4629      	mov	r1, r5
   1b27c:	4620      	mov	r0, r4
   1b27e:	f7ff fc9f 	bl	1abc0 <bt_conn_set_state>
		bt_conn_unref(conn);
   1b282:	4620      	mov	r0, r4
   1b284:	f00c fd64 	bl	27d50 <bt_conn_unref>
		return err;
   1b288:	e7c8      	b.n	1b21c <bt_conn_le_create_auto+0xac>
		return -EAGAIN;
   1b28a:	f06f 060a 	mvn.w	r6, #10
   1b28e:	e7c5      	b.n	1b21c <bt_conn_le_create_auto+0xac>
		return -EINVAL;
   1b290:	f06f 0615 	mvn.w	r6, #21
   1b294:	e7c2      	b.n	1b21c <bt_conn_le_create_auto+0xac>
		return -EINVAL;
   1b296:	f06f 0615 	mvn.w	r6, #21
   1b29a:	e7bf      	b.n	1b21c <bt_conn_le_create_auto+0xac>
		return -EINVAL;
   1b29c:	f06f 0615 	mvn.w	r6, #21
   1b2a0:	e7bc      	b.n	1b21c <bt_conn_le_create_auto+0xac>
		return -EINVAL;
   1b2a2:	f06f 0615 	mvn.w	r6, #21
   1b2a6:	e7b9      	b.n	1b21c <bt_conn_le_create_auto+0xac>
		return -ENOMEM;
   1b2a8:	f06f 060b 	mvn.w	r6, #11
   1b2ac:	e7b6      	b.n	1b21c <bt_conn_le_create_auto+0xac>
   1b2ae:	bf00      	nop
   1b2b0:	2000043c 	.word	0x2000043c
   1b2b4:	0002e1e8 	.word	0x0002e1e8
   1b2b8:	0002ec3c 	.word	0x0002ec3c
   1b2bc:	0002d0ac 	.word	0x0002d0ac

0001b2c0 <send_conn_le_param_update>:
{
   1b2c0:	b538      	push	{r3, r4, r5, lr}
   1b2c2:	4604      	mov	r4, r0
   1b2c4:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1b2c6:	4608      	mov	r0, r1
   1b2c8:	f00c fafe 	bl	278c8 <bt_le_conn_params_valid>
   1b2cc:	b350      	cbz	r0, 1b324 <send_conn_le_param_update+0x64>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1b2ce:	4b17      	ldr	r3, [pc, #92]	; (1b32c <send_conn_le_param_update+0x6c>)
   1b2d0:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   1b2d4:	f013 0f02 	tst.w	r3, #2
   1b2d8:	d004      	beq.n	1b2e4 <send_conn_le_param_update+0x24>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1b2da:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1b2de:	f013 0f02 	tst.w	r3, #2
   1b2e2:	d113      	bne.n	1b30c <send_conn_le_param_update+0x4c>
	     (conn->role == BT_HCI_ROLE_CENTRAL)) {
   1b2e4:	78e3      	ldrb	r3, [r4, #3]
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1b2e6:	b9c3      	cbnz	r3, 1b31a <send_conn_le_param_update+0x5a>
		rc = bt_conn_le_conn_update(conn, param);
   1b2e8:	4629      	mov	r1, r5
   1b2ea:	4620      	mov	r0, r4
   1b2ec:	f00c fdb3 	bl	27e56 <bt_conn_le_conn_update>
		if (rc == 0) {
   1b2f0:	b9b8      	cbnz	r0, 1b322 <send_conn_le_param_update+0x62>
			conn->le.interval_min = param->interval_min;
   1b2f2:	882b      	ldrh	r3, [r5, #0]
   1b2f4:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   1b2f8:	886b      	ldrh	r3, [r5, #2]
   1b2fa:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   1b2fe:	88ab      	ldrh	r3, [r5, #4]
   1b300:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   1b304:	88eb      	ldrh	r3, [r5, #6]
   1b306:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
		return rc;
   1b30a:	e00a      	b.n	1b322 <send_conn_le_param_update+0x62>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1b30c:	210a      	movs	r1, #10
   1b30e:	1d20      	adds	r0, r4, #4
   1b310:	f00c fc25 	bl	27b5e <atomic_test_bit>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1b314:	2800      	cmp	r0, #0
   1b316:	d1e5      	bne.n	1b2e4 <send_conn_le_param_update+0x24>
   1b318:	e7e6      	b.n	1b2e8 <send_conn_le_param_update+0x28>
	return bt_l2cap_update_conn_param(conn, param);
   1b31a:	4629      	mov	r1, r5
   1b31c:	4620      	mov	r0, r4
   1b31e:	f00c fe68 	bl	27ff2 <bt_l2cap_update_conn_param>
}
   1b322:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1b324:	f06f 0015 	mvn.w	r0, #21
   1b328:	e7fb      	b.n	1b322 <send_conn_le_param_update+0x62>
   1b32a:	bf00      	nop
   1b32c:	20000370 	.word	0x20000370

0001b330 <deferred_work>:
{
   1b330:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b332:	b085      	sub	sp, #20
   1b334:	af00      	add	r7, sp, #0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   1b336:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   1b33a:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
   1b33e:	b1eb      	cbz	r3, 1b37c <deferred_work+0x4c>
   1b340:	4604      	mov	r4, r0
	if (conn->type != BT_CONN_TYPE_LE) {
   1b342:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   1b346:	2b01      	cmp	r3, #1
   1b348:	d115      	bne.n	1b376 <deferred_work+0x46>
	    conn->role == BT_CONN_ROLE_CENTRAL) {
   1b34a:	f810 3c55 	ldrb.w	r3, [r0, #-85]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1b34e:	b1fb      	cbz	r3, 1b390 <deferred_work+0x60>
	if (atomic_test_and_clear_bit(conn->flags,
   1b350:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
   1b354:	2109      	movs	r1, #9
   1b356:	4630      	mov	r0, r6
   1b358:	f00c fbe5 	bl	27b26 <atomic_test_and_clear_bit>
   1b35c:	b9d8      	cbnz	r0, 1b396 <deferred_work+0x66>
   1b35e:	f3bf 8f5b 	dmb	ish
   1b362:	e856 3f00 	ldrex	r3, [r6]
   1b366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1b36a:	e846 3200 	strex	r2, r3, [r6]
   1b36e:	2a00      	cmp	r2, #0
   1b370:	d1f7      	bne.n	1b362 <deferred_work+0x32>
   1b372:	f3bf 8f5b 	dmb	ish
}
   1b376:	3714      	adds	r7, #20
   1b378:	46bd      	mov	sp, r7
   1b37a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_l2cap_disconnected(conn);
   1b37c:	4628      	mov	r0, r5
   1b37e:	f00c fdbf 	bl	27f00 <bt_l2cap_disconnected>
		notify_disconnected(conn);
   1b382:	4628      	mov	r0, r5
   1b384:	f7ff f888 	bl	1a498 <notify_disconnected>
		bt_conn_unref(conn);
   1b388:	4628      	mov	r0, r5
   1b38a:	f00c fce1 	bl	27d50 <bt_conn_unref>
		return;
   1b38e:	e7f2      	b.n	1b376 <deferred_work+0x46>
		bt_le_create_conn_cancel();
   1b390:	f7fd fb4e 	bl	18a30 <bt_le_create_conn_cancel>
		return;
   1b394:	e7ef      	b.n	1b376 <deferred_work+0x46>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1b396:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   1b39a:	813b      	strh	r3, [r7, #8]
   1b39c:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   1b3a0:	817b      	strh	r3, [r7, #10]
   1b3a2:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   1b3a6:	81bb      	strh	r3, [r7, #12]
   1b3a8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   1b3ac:	81fb      	strh	r3, [r7, #14]
		err = send_conn_le_param_update(conn, param);
   1b3ae:	f107 0108 	add.w	r1, r7, #8
   1b3b2:	4628      	mov	r0, r5
   1b3b4:	f7ff ff84 	bl	1b2c0 <send_conn_le_param_update>
		if (!err) {
   1b3b8:	4604      	mov	r4, r0
   1b3ba:	b3b8      	cbz	r0, 1b42c <deferred_work+0xfc>
			LOG_WRN("Send LE param update failed (err %d)", err);
   1b3bc:	466d      	mov	r5, sp
   1b3be:	b088      	sub	sp, #32
   1b3c0:	466b      	mov	r3, sp
   1b3c2:	f113 0210 	adds.w	r2, r3, #16
   1b3c6:	d03e      	beq.n	1b446 <deferred_work+0x116>
   1b3c8:	210c      	movs	r1, #12
   1b3ca:	b14a      	cbz	r2, 1b3e0 <deferred_work+0xb0>
   1b3cc:	4608      	mov	r0, r1
   1b3ce:	2904      	cmp	r1, #4
   1b3d0:	dd03      	ble.n	1b3da <deferred_work+0xaa>
   1b3d2:	f8df c080 	ldr.w	ip, [pc, #128]	; 1b454 <deferred_work+0x124>
   1b3d6:	f8c3 c014 	str.w	ip, [r3, #20]
   1b3da:	2808      	cmp	r0, #8
   1b3dc:	dd00      	ble.n	1b3e0 <deferred_work+0xb0>
   1b3de:	619c      	str	r4, [r3, #24]
   1b3e0:	290b      	cmp	r1, #11
   1b3e2:	dd33      	ble.n	1b44c <deferred_work+0x11c>
   1b3e4:	240c      	movs	r4, #12
   1b3e6:	b13a      	cbz	r2, 1b3f8 <deferred_work+0xc8>
   1b3e8:	2103      	movs	r1, #3
   1b3ea:	7139      	strb	r1, [r7, #4]
   1b3ec:	2100      	movs	r1, #0
   1b3ee:	7179      	strb	r1, [r7, #5]
   1b3f0:	71b9      	strb	r1, [r7, #6]
   1b3f2:	71f9      	strb	r1, [r7, #7]
   1b3f4:	6878      	ldr	r0, [r7, #4]
   1b3f6:	6118      	str	r0, [r3, #16]
   1b3f8:	2100      	movs	r1, #0
   1b3fa:	f36f 0100 	bfc	r1, #0, #1
   1b3fe:	f36f 0141 	bfc	r1, #1, #1
   1b402:	f36f 0182 	bfc	r1, #2, #1
   1b406:	f36f 01c5 	bfc	r1, #3, #3
   1b40a:	2302      	movs	r3, #2
   1b40c:	f363 1188 	bfi	r1, r3, #6, #3
   1b410:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1b414:	f364 2152 	bfi	r1, r4, #9, #10
   1b418:	f36f 41de 	bfc	r1, #19, #12
   1b41c:	f36f 71df 	bfc	r1, #31, #1
   1b420:	2300      	movs	r3, #0
   1b422:	480d      	ldr	r0, [pc, #52]	; (1b458 <deferred_work+0x128>)
   1b424:	f00b fc17 	bl	26c56 <z_impl_z_log_msg_static_create>
   1b428:	46ad      	mov	sp, r5
   1b42a:	e798      	b.n	1b35e <deferred_work+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b42c:	f3bf 8f5b 	dmb	ish
   1b430:	e856 3f00 	ldrex	r3, [r6]
   1b434:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1b438:	e846 3200 	strex	r2, r3, [r6]
   1b43c:	2a00      	cmp	r2, #0
   1b43e:	d1f7      	bne.n	1b430 <deferred_work+0x100>
   1b440:	f3bf 8f5b 	dmb	ish
   1b444:	e78b      	b.n	1b35e <deferred_work+0x2e>
   1b446:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b44a:	e7be      	b.n	1b3ca <deferred_work+0x9a>
   1b44c:	f06f 041b 	mvn.w	r4, #27
   1b450:	e7c9      	b.n	1b3e6 <deferred_work+0xb6>
   1b452:	bf00      	nop
   1b454:	0002ec5c 	.word	0x0002ec5c
   1b458:	0002d0ac 	.word	0x0002d0ac

0001b45c <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   1b45c:	b508      	push	{r3, lr}
   1b45e:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1b460:	4801      	ldr	r0, [pc, #4]	; (1b468 <bt_conn_create_frag_timeout+0xc>)
   1b462:	f7ff fd61 	bl	1af28 <bt_conn_create_pdu_timeout>
#endif /* CONFIG_NET_BUF_LOG */
}
   1b466:	bd08      	pop	{r3, pc}
   1b468:	20000b7c 	.word	0x20000b7c

0001b46c <create_frag>:
{
   1b46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b46e:	4606      	mov	r6, r0
   1b470:	460d      	mov	r5, r1
		frag = bt_conn_create_frag(0);
   1b472:	f04f 32ff 	mov.w	r2, #4294967295
   1b476:	f04f 33ff 	mov.w	r3, #4294967295
   1b47a:	2000      	movs	r0, #0
   1b47c:	f7ff ffee 	bl	1b45c <bt_conn_create_frag_timeout>
   1b480:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1b482:	7ab3      	ldrb	r3, [r6, #10]
   1b484:	2b07      	cmp	r3, #7
   1b486:	d11a      	bne.n	1b4be <create_frag+0x52>
	tx_data(frag)->tx = NULL;
   1b488:	2300      	movs	r3, #0
   1b48a:	6183      	str	r3, [r0, #24]
	return bt_dev.le.acl_mtu;
   1b48c:	4b10      	ldr	r3, [pc, #64]	; (1b4d0 <create_frag+0x64>)
   1b48e:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_tailroom(&buf->b);
   1b492:	f100 070c 	add.w	r7, r0, #12
   1b496:	4638      	mov	r0, r7
   1b498:	f00e fd65 	bl	29f66 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1b49c:	4286      	cmp	r6, r0
   1b49e:	d212      	bcs.n	1b4c6 <create_frag+0x5a>
	return bt_dev.le.acl_mtu;
   1b4a0:	4b0b      	ldr	r3, [pc, #44]	; (1b4d0 <create_frag+0x64>)
   1b4a2:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1b4a6:	4632      	mov	r2, r6
   1b4a8:	f855 1f0c 	ldr.w	r1, [r5, #12]!
   1b4ac:	4638      	mov	r0, r7
   1b4ae:	f00e fd1a 	bl	29ee6 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   1b4b2:	4631      	mov	r1, r6
   1b4b4:	4628      	mov	r0, r5
   1b4b6:	f00e fd32 	bl	29f1e <net_buf_simple_pull>
}
   1b4ba:	4620      	mov	r0, r4
   1b4bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
   1b4be:	f00e fcc5 	bl	29e4c <net_buf_unref>
		return NULL;
   1b4c2:	2400      	movs	r4, #0
   1b4c4:	e7f9      	b.n	1b4ba <create_frag+0x4e>
	return net_buf_simple_tailroom(&buf->b);
   1b4c6:	4638      	mov	r0, r7
   1b4c8:	f00e fd4d 	bl	29f66 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1b4cc:	b286      	uxth	r6, r0
   1b4ce:	e7ea      	b.n	1b4a6 <create_frag+0x3a>
   1b4d0:	20000370 	.word	0x20000370

0001b4d4 <send_buf>:
{
   1b4d4:	b538      	push	{r3, r4, r5, lr}
   1b4d6:	4605      	mov	r5, r0
   1b4d8:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
   1b4da:	8a0b      	ldrh	r3, [r1, #16]
	return bt_dev.le.acl_mtu;
   1b4dc:	4a1b      	ldr	r2, [pc, #108]	; (1b54c <send_buf+0x78>)
   1b4de:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	if (buf->len <= conn_mtu(conn)) {
   1b4e2:	429a      	cmp	r2, r3
   1b4e4:	d21f      	bcs.n	1b526 <send_buf+0x52>
	frag = create_frag(conn, buf);
   1b4e6:	f7ff ffc1 	bl	1b46c <create_frag>
	if (!frag) {
   1b4ea:	4601      	mov	r1, r0
   1b4ec:	b350      	cbz	r0, 1b544 <send_buf+0x70>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   1b4ee:	2301      	movs	r3, #1
   1b4f0:	2200      	movs	r2, #0
   1b4f2:	4628      	mov	r0, r5
   1b4f4:	f7ff f836 	bl	1a564 <send_frag>
   1b4f8:	4603      	mov	r3, r0
   1b4fa:	b1c8      	cbz	r0, 1b530 <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
   1b4fc:	8a23      	ldrh	r3, [r4, #16]
	return bt_dev.le.acl_mtu;
   1b4fe:	4a13      	ldr	r2, [pc, #76]	; (1b54c <send_buf+0x78>)
   1b500:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	while (buf->len > conn_mtu(conn)) {
   1b504:	429a      	cmp	r2, r3
   1b506:	d215      	bcs.n	1b534 <send_buf+0x60>
		frag = create_frag(conn, buf);
   1b508:	4621      	mov	r1, r4
   1b50a:	4628      	mov	r0, r5
   1b50c:	f7ff ffae 	bl	1b46c <create_frag>
		if (!frag) {
   1b510:	4601      	mov	r1, r0
   1b512:	b1c8      	cbz	r0, 1b548 <send_buf+0x74>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1b514:	2301      	movs	r3, #1
   1b516:	461a      	mov	r2, r3
   1b518:	4628      	mov	r0, r5
   1b51a:	f7ff f823 	bl	1a564 <send_frag>
   1b51e:	4603      	mov	r3, r0
   1b520:	2800      	cmp	r0, #0
   1b522:	d1eb      	bne.n	1b4fc <send_buf+0x28>
   1b524:	e004      	b.n	1b530 <send_buf+0x5c>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   1b526:	2300      	movs	r3, #0
   1b528:	2202      	movs	r2, #2
   1b52a:	f7ff f81b 	bl	1a564 <send_frag>
   1b52e:	4603      	mov	r3, r0
}
   1b530:	4618      	mov	r0, r3
   1b532:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, FRAG_END, false);
   1b534:	2300      	movs	r3, #0
   1b536:	2203      	movs	r2, #3
   1b538:	4621      	mov	r1, r4
   1b53a:	4628      	mov	r0, r5
   1b53c:	f7ff f812 	bl	1a564 <send_frag>
   1b540:	4603      	mov	r3, r0
   1b542:	e7f5      	b.n	1b530 <send_buf+0x5c>
		return false;
   1b544:	2300      	movs	r3, #0
   1b546:	e7f3      	b.n	1b530 <send_buf+0x5c>
			return false;
   1b548:	2300      	movs	r3, #0
   1b54a:	e7f1      	b.n	1b530 <send_buf+0x5c>
   1b54c:	20000370 	.word	0x20000370

0001b550 <bt_conn_process_tx>:
{
   1b550:	b570      	push	{r4, r5, r6, lr}
   1b552:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   1b554:	7a83      	ldrb	r3, [r0, #10]
   1b556:	b923      	cbnz	r3, 1b562 <bt_conn_process_tx+0x12>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   1b558:	2106      	movs	r1, #6
   1b55a:	3004      	adds	r0, #4
   1b55c:	f00c fae3 	bl	27b26 <atomic_test_and_clear_bit>
	if (conn->state == BT_CONN_DISCONNECTED &&
   1b560:	b968      	cbnz	r0, 1b57e <bt_conn_process_tx+0x2e>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   1b562:	2200      	movs	r2, #0
   1b564:	2300      	movs	r3, #0
   1b566:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1b56a:	f00e fc2f 	bl	29dcc <net_buf_get>
	BT_ASSERT(buf);
   1b56e:	4605      	mov	r5, r0
   1b570:	b148      	cbz	r0, 1b586 <bt_conn_process_tx+0x36>
	if (!send_buf(conn, buf)) {
   1b572:	4629      	mov	r1, r5
   1b574:	4620      	mov	r0, r4
   1b576:	f7ff ffad 	bl	1b4d4 <send_buf>
   1b57a:	b190      	cbz	r0, 1b5a2 <bt_conn_process_tx+0x52>
}
   1b57c:	bd70      	pop	{r4, r5, r6, pc}
		conn_cleanup(conn);
   1b57e:	4620      	mov	r0, r4
   1b580:	f00c fb66 	bl	27c50 <conn_cleanup>
		return;
   1b584:	e7fa      	b.n	1b57c <bt_conn_process_tx+0x2c>
	BT_ASSERT(buf);
   1b586:	f240 331a 	movw	r3, #794	; 0x31a
   1b58a:	4a0c      	ldr	r2, [pc, #48]	; (1b5bc <bt_conn_process_tx+0x6c>)
   1b58c:	490c      	ldr	r1, [pc, #48]	; (1b5c0 <bt_conn_process_tx+0x70>)
   1b58e:	480d      	ldr	r0, [pc, #52]	; (1b5c4 <bt_conn_process_tx+0x74>)
   1b590:	f00b f848 	bl	26624 <assert_print>
   1b594:	4040      	eors	r0, r0
   1b596:	f380 8811 	msr	BASEPRI, r0
   1b59a:	f04f 0003 	mov.w	r0, #3
   1b59e:	df02      	svc	2
   1b5a0:	e7e7      	b.n	1b572 <bt_conn_process_tx+0x22>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   1b5a2:	69ae      	ldr	r6, [r5, #24]
		tx_data(buf)->tx = NULL;
   1b5a4:	2300      	movs	r3, #0
   1b5a6:	61ab      	str	r3, [r5, #24]
		net_buf_unref(buf);
   1b5a8:	4628      	mov	r0, r5
   1b5aa:	f00e fc4f 	bl	29e4c <net_buf_unref>
		if (tx) {
   1b5ae:	2e00      	cmp	r6, #0
   1b5b0:	d0e4      	beq.n	1b57c <bt_conn_process_tx+0x2c>
			conn_tx_destroy(conn, tx);
   1b5b2:	4631      	mov	r1, r6
   1b5b4:	4620      	mov	r0, r4
   1b5b6:	f00c faa9 	bl	27b0c <conn_tx_destroy>
   1b5ba:	e7df      	b.n	1b57c <bt_conn_process_tx+0x2c>
   1b5bc:	0002ec84 	.word	0x0002ec84
   1b5c0:	0002f50c 	.word	0x0002f50c
   1b5c4:	0002e46c 	.word	0x0002e46c

0001b5c8 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   1b5c8:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   1b5ca:	4814      	ldr	r0, [pc, #80]	; (1b61c <bt_conn_init+0x54>)
   1b5cc:	f010 fd80 	bl	2c0d0 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   1b5d0:	2400      	movs	r4, #0
   1b5d2:	e006      	b.n	1b5e2 <bt_conn_init+0x1a>
		k_fifo_put(&free_tx, &conn_tx[i]);
   1b5d4:	4912      	ldr	r1, [pc, #72]	; (1b620 <bt_conn_init+0x58>)
   1b5d6:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   1b5da:	4810      	ldr	r0, [pc, #64]	; (1b61c <bt_conn_init+0x54>)
   1b5dc:	f010 fd84 	bl	2c0e8 <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   1b5e0:	3401      	adds	r4, #1
   1b5e2:	2c02      	cmp	r4, #2
   1b5e4:	d9f6      	bls.n	1b5d4 <bt_conn_init+0xc>
	}

	bt_att_init();
   1b5e6:	f001 fd9b 	bl	1d120 <bt_att_init>

	err = bt_smp_init();
   1b5ea:	f00e fb02 	bl	29bf2 <bt_smp_init>
	if (err) {
   1b5ee:	4605      	mov	r5, r0
   1b5f0:	b108      	cbz	r0, 1b5f6 <bt_conn_init+0x2e>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   1b5f2:	4628      	mov	r0, r5
   1b5f4:	bd38      	pop	{r3, r4, r5, pc}
	bt_l2cap_init();
   1b5f6:	f00c fd29 	bl	2804c <bt_l2cap_init>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1b5fa:	462c      	mov	r4, r5
   1b5fc:	e002      	b.n	1b604 <bt_conn_init+0x3c>
			bt_conn_unref(conn);
   1b5fe:	f00c fba7 	bl	27d50 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1b602:	3401      	adds	r4, #1
   1b604:	2c07      	cmp	r4, #7
   1b606:	d8f4      	bhi.n	1b5f2 <bt_conn_init+0x2a>
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1b608:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   1b60c:	4b05      	ldr	r3, [pc, #20]	; (1b624 <bt_conn_init+0x5c>)
   1b60e:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   1b612:	f00c fb76 	bl	27d02 <bt_conn_ref>
			if (!conn) {
   1b616:	2800      	cmp	r0, #0
   1b618:	d1f1      	bne.n	1b5fe <bt_conn_init+0x36>
   1b61a:	e7f2      	b.n	1b602 <bt_conn_init+0x3a>
   1b61c:	20000b0c 	.word	0x20000b0c
   1b620:	20007b68 	.word	0x20007b68
   1b624:	200021a8 	.word	0x200021a8

0001b628 <get_ident>:

static uint8_t get_ident(void)
{
	static uint8_t ident;

	ident++;
   1b628:	4905      	ldr	r1, [pc, #20]	; (1b640 <get_ident+0x18>)
   1b62a:	780a      	ldrb	r2, [r1, #0]
   1b62c:	1c53      	adds	r3, r2, #1
   1b62e:	b2db      	uxtb	r3, r3
   1b630:	700b      	strb	r3, [r1, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
   1b632:	b90b      	cbnz	r3, 1b638 <get_ident+0x10>
		ident++;
   1b634:	3202      	adds	r2, #2
   1b636:	700a      	strb	r2, [r1, #0]
	}

	return ident;
}
   1b638:	4b01      	ldr	r3, [pc, #4]	; (1b640 <get_ident+0x18>)
   1b63a:	7818      	ldrb	r0, [r3, #0]
   1b63c:	4770      	bx	lr
   1b63e:	bf00      	nop
   1b640:	20008ecc 	.word	0x20008ecc

0001b644 <l2cap_accept>:
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1b644:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b646:	b083      	sub	sp, #12
   1b648:	af00      	add	r7, sp, #0
		.recv = l2cap_recv,
	};

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1b64a:	2300      	movs	r3, #0
   1b64c:	2b07      	cmp	r3, #7
   1b64e:	d812      	bhi.n	1b676 <l2cap_accept+0x32>
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   1b650:	228c      	movs	r2, #140	; 0x8c
   1b652:	fb03 f202 	mul.w	r2, r3, r2
   1b656:	4c27      	ldr	r4, [pc, #156]	; (1b6f4 <l2cap_accept+0xb0>)
   1b658:	58a2      	ldr	r2, [r4, r2]
   1b65a:	b10a      	cbz	r2, 1b660 <l2cap_accept+0x1c>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1b65c:	3301      	adds	r3, #1
   1b65e:	e7f5      	b.n	1b64c <l2cap_accept+0x8>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   1b660:	4a24      	ldr	r2, [pc, #144]	; (1b6f4 <l2cap_accept+0xb0>)
   1b662:	208c      	movs	r0, #140	; 0x8c
   1b664:	fb00 2303 	mla	r3, r0, r3, r2
   1b668:	4a23      	ldr	r2, [pc, #140]	; (1b6f8 <l2cap_accept+0xb4>)
   1b66a:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   1b66c:	600b      	str	r3, [r1, #0]

		return 0;
   1b66e:	2000      	movs	r0, #0
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   1b670:	370c      	adds	r7, #12
   1b672:	46bd      	mov	sp, r7
   1b674:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_ERR("No available L2CAP context for conn %p", conn);
   1b676:	466d      	mov	r5, sp
   1b678:	b088      	sub	sp, #32
   1b67a:	466b      	mov	r3, sp
   1b67c:	f113 0210 	adds.w	r2, r3, #16
   1b680:	d031      	beq.n	1b6e6 <l2cap_accept+0xa2>
   1b682:	210c      	movs	r1, #12
   1b684:	b13a      	cbz	r2, 1b696 <l2cap_accept+0x52>
   1b686:	460c      	mov	r4, r1
   1b688:	2904      	cmp	r1, #4
   1b68a:	dd01      	ble.n	1b690 <l2cap_accept+0x4c>
   1b68c:	4e1b      	ldr	r6, [pc, #108]	; (1b6fc <l2cap_accept+0xb8>)
   1b68e:	615e      	str	r6, [r3, #20]
   1b690:	2c08      	cmp	r4, #8
   1b692:	dd00      	ble.n	1b696 <l2cap_accept+0x52>
   1b694:	6198      	str	r0, [r3, #24]
   1b696:	290b      	cmp	r1, #11
   1b698:	dd28      	ble.n	1b6ec <l2cap_accept+0xa8>
   1b69a:	240c      	movs	r4, #12
   1b69c:	b13a      	cbz	r2, 1b6ae <l2cap_accept+0x6a>
   1b69e:	2103      	movs	r1, #3
   1b6a0:	7139      	strb	r1, [r7, #4]
   1b6a2:	2100      	movs	r1, #0
   1b6a4:	7179      	strb	r1, [r7, #5]
   1b6a6:	71b9      	strb	r1, [r7, #6]
   1b6a8:	71f9      	strb	r1, [r7, #7]
   1b6aa:	6878      	ldr	r0, [r7, #4]
   1b6ac:	6118      	str	r0, [r3, #16]
   1b6ae:	2100      	movs	r1, #0
   1b6b0:	f36f 0100 	bfc	r1, #0, #1
   1b6b4:	f36f 0141 	bfc	r1, #1, #1
   1b6b8:	f36f 0182 	bfc	r1, #2, #1
   1b6bc:	f36f 01c5 	bfc	r1, #3, #3
   1b6c0:	2301      	movs	r3, #1
   1b6c2:	f363 1188 	bfi	r1, r3, #6, #3
   1b6c6:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1b6ca:	f363 2152 	bfi	r1, r3, #9, #10
   1b6ce:	f36f 41de 	bfc	r1, #19, #12
   1b6d2:	f36f 71df 	bfc	r1, #31, #1
   1b6d6:	2300      	movs	r3, #0
   1b6d8:	4809      	ldr	r0, [pc, #36]	; (1b700 <l2cap_accept+0xbc>)
   1b6da:	f00b fabc 	bl	26c56 <z_impl_z_log_msg_static_create>
   1b6de:	46ad      	mov	sp, r5
	return -ENOMEM;
   1b6e0:	f06f 000b 	mvn.w	r0, #11
   1b6e4:	e7c4      	b.n	1b670 <l2cap_accept+0x2c>
	LOG_ERR("No available L2CAP context for conn %p", conn);
   1b6e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b6ea:	e7cb      	b.n	1b684 <l2cap_accept+0x40>
   1b6ec:	f06f 041b 	mvn.w	r4, #27
   1b6f0:	e7d4      	b.n	1b69c <l2cap_accept+0x58>
   1b6f2:	bf00      	nop
   1b6f4:	20007b9c 	.word	0x20007b9c
   1b6f8:	0002ee7c 	.word	0x0002ee7c
   1b6fc:	0002ecdc 	.word	0x0002ecdc
   1b700:	0002d0cc 	.word	0x0002d0cc

0001b704 <le_conn_param_rsp>:
	if (buf->len < sizeof(*rsp)) {
   1b704:	8a0b      	ldrh	r3, [r1, #16]
   1b706:	2b01      	cmp	r3, #1
   1b708:	d900      	bls.n	1b70c <le_conn_param_rsp+0x8>
   1b70a:	4770      	bx	lr
{
   1b70c:	b500      	push	{lr}
   1b70e:	b089      	sub	sp, #36	; 0x24
		LOG_ERR("Too small LE conn param rsp");
   1b710:	4b13      	ldr	r3, [pc, #76]	; (1b760 <le_conn_param_rsp+0x5c>)
   1b712:	9307      	str	r3, [sp, #28]
   1b714:	2302      	movs	r3, #2
   1b716:	f88d 3004 	strb.w	r3, [sp, #4]
   1b71a:	2300      	movs	r3, #0
   1b71c:	f88d 3005 	strb.w	r3, [sp, #5]
   1b720:	f88d 3006 	strb.w	r3, [sp, #6]
   1b724:	f88d 3007 	strb.w	r3, [sp, #7]
   1b728:	9a01      	ldr	r2, [sp, #4]
   1b72a:	9206      	str	r2, [sp, #24]
   1b72c:	4619      	mov	r1, r3
   1b72e:	f363 0100 	bfi	r1, r3, #0, #1
   1b732:	f363 0141 	bfi	r1, r3, #1, #1
   1b736:	f363 0182 	bfi	r1, r3, #2, #1
   1b73a:	f363 01c5 	bfi	r1, r3, #3, #3
   1b73e:	2201      	movs	r2, #1
   1b740:	f362 1188 	bfi	r1, r2, #6, #3
   1b744:	2208      	movs	r2, #8
   1b746:	f362 2152 	bfi	r1, r2, #9, #10
   1b74a:	f363 41de 	bfi	r1, r3, #19, #12
   1b74e:	f363 71df 	bfi	r1, r3, #31, #1
   1b752:	aa06      	add	r2, sp, #24
   1b754:	4803      	ldr	r0, [pc, #12]	; (1b764 <le_conn_param_rsp+0x60>)
   1b756:	f00b fa7e 	bl	26c56 <z_impl_z_log_msg_static_create>
}
   1b75a:	b009      	add	sp, #36	; 0x24
   1b75c:	f85d fb04 	ldr.w	pc, [sp], #4
   1b760:	0002ed04 	.word	0x0002ed04
   1b764:	0002d0cc 	.word	0x0002d0cc

0001b768 <l2cap_chan_add>:
{
   1b768:	b510      	push	{r4, lr}
   1b76a:	b088      	sub	sp, #32
	if (!le_chan) {
   1b76c:	b199      	cbz	r1, 1b796 <l2cap_chan_add+0x2e>
   1b76e:	460b      	mov	r3, r1
	atomic_clear(chan->status);
   1b770:	3110      	adds	r1, #16
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1b772:	2400      	movs	r4, #0
   1b774:	f3bf 8f5b 	dmb	ish
   1b778:	e851 cf00 	ldrex	ip, [r1]
   1b77c:	e841 4e00 	strex	lr, r4, [r1]
   1b780:	f1be 0f00 	cmp.w	lr, #0
   1b784:	d1f8      	bne.n	1b778 <l2cap_chan_add+0x10>
   1b786:	f3bf 8f5b 	dmb	ish
	bt_l2cap_chan_add(conn, chan, destroy);
   1b78a:	4619      	mov	r1, r3
   1b78c:	f00c fba8 	bl	27ee0 <bt_l2cap_chan_add>
	return true;
   1b790:	2001      	movs	r0, #1
}
   1b792:	b008      	add	sp, #32
   1b794:	bd10      	pop	{r4, pc}
		LOG_ERR("Unable to allocate L2CAP channel ID");
   1b796:	4b14      	ldr	r3, [pc, #80]	; (1b7e8 <l2cap_chan_add+0x80>)
   1b798:	9307      	str	r3, [sp, #28]
   1b79a:	2302      	movs	r3, #2
   1b79c:	f88d 3004 	strb.w	r3, [sp, #4]
   1b7a0:	2400      	movs	r4, #0
   1b7a2:	f88d 4005 	strb.w	r4, [sp, #5]
   1b7a6:	f88d 4006 	strb.w	r4, [sp, #6]
   1b7aa:	f88d 4007 	strb.w	r4, [sp, #7]
   1b7ae:	9b01      	ldr	r3, [sp, #4]
   1b7b0:	9306      	str	r3, [sp, #24]
   1b7b2:	4621      	mov	r1, r4
   1b7b4:	f364 0100 	bfi	r1, r4, #0, #1
   1b7b8:	f364 0141 	bfi	r1, r4, #1, #1
   1b7bc:	f364 0182 	bfi	r1, r4, #2, #1
   1b7c0:	f364 01c5 	bfi	r1, r4, #3, #3
   1b7c4:	2301      	movs	r3, #1
   1b7c6:	f363 1188 	bfi	r1, r3, #6, #3
   1b7ca:	2308      	movs	r3, #8
   1b7cc:	f363 2152 	bfi	r1, r3, #9, #10
   1b7d0:	f364 41de 	bfi	r1, r4, #19, #12
   1b7d4:	f364 71df 	bfi	r1, r4, #31, #1
   1b7d8:	4623      	mov	r3, r4
   1b7da:	aa06      	add	r2, sp, #24
   1b7dc:	4803      	ldr	r0, [pc, #12]	; (1b7ec <l2cap_chan_add+0x84>)
   1b7de:	f00b fa3a 	bl	26c56 <z_impl_z_log_msg_static_create>
		return false;
   1b7e2:	4620      	mov	r0, r4
   1b7e4:	e7d5      	b.n	1b792 <l2cap_chan_add+0x2a>
   1b7e6:	bf00      	nop
   1b7e8:	0002ed20 	.word	0x0002ed20
   1b7ec:	0002d0cc 	.word	0x0002d0cc

0001b7f0 <bt_l2cap_connected>:
{
   1b7f0:	b530      	push	{r4, r5, lr}
   1b7f2:	b083      	sub	sp, #12
   1b7f4:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1b7f6:	4c19      	ldr	r4, [pc, #100]	; (1b85c <bt_l2cap_connected+0x6c>)
   1b7f8:	e000      	b.n	1b7fc <bt_l2cap_connected+0xc>
   1b7fa:	340c      	adds	r4, #12
   1b7fc:	4b18      	ldr	r3, [pc, #96]	; (1b860 <bt_l2cap_connected+0x70>)
   1b7fe:	429c      	cmp	r4, r3
   1b800:	d22a      	bcs.n	1b858 <bt_l2cap_connected+0x68>
		if (fchan->accept(conn, &chan) < 0) {
   1b802:	6863      	ldr	r3, [r4, #4]
   1b804:	a901      	add	r1, sp, #4
   1b806:	4628      	mov	r0, r5
   1b808:	4798      	blx	r3
   1b80a:	2800      	cmp	r0, #0
   1b80c:	dbf5      	blt.n	1b7fa <bt_l2cap_connected+0xa>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   1b80e:	9901      	ldr	r1, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   1b810:	8823      	ldrh	r3, [r4, #0]
   1b812:	828b      	strh	r3, [r1, #20]
		le_chan->tx.cid = fchan->cid;
   1b814:	848b      	strh	r3, [r1, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1b816:	68a2      	ldr	r2, [r4, #8]
   1b818:	4628      	mov	r0, r5
   1b81a:	f7ff ffa5 	bl	1b768 <l2cap_chan_add>
   1b81e:	b1d8      	cbz	r0, 1b858 <bt_l2cap_connected+0x68>
		if (chan->ops->connected) {
   1b820:	9801      	ldr	r0, [sp, #4]
   1b822:	6843      	ldr	r3, [r0, #4]
   1b824:	681b      	ldr	r3, [r3, #0]
   1b826:	b103      	cbz	r3, 1b82a <bt_l2cap_connected+0x3a>
			chan->ops->connected(chan);
   1b828:	4798      	blx	r3
		atomic_set_bit(chan->status, BT_L2CAP_STATUS_OUT);
   1b82a:	9b01      	ldr	r3, [sp, #4]
   1b82c:	3310      	adds	r3, #16
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b82e:	f3bf 8f5b 	dmb	ish
   1b832:	e853 1f00 	ldrex	r1, [r3]
   1b836:	f041 0101 	orr.w	r1, r1, #1
   1b83a:	e843 1200 	strex	r2, r1, [r3]
   1b83e:	2a00      	cmp	r2, #0
   1b840:	d1f7      	bne.n	1b832 <bt_l2cap_connected+0x42>
   1b842:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   1b846:	9801      	ldr	r0, [sp, #4]
   1b848:	6843      	ldr	r3, [r0, #4]
   1b84a:	69db      	ldr	r3, [r3, #28]
   1b84c:	2b00      	cmp	r3, #0
   1b84e:	d0d4      	beq.n	1b7fa <bt_l2cap_connected+0xa>
			chan->ops->status(chan, chan->status);
   1b850:	f100 0110 	add.w	r1, r0, #16
   1b854:	4798      	blx	r3
   1b856:	e7d0      	b.n	1b7fa <bt_l2cap_connected+0xa>
}
   1b858:	b003      	add	sp, #12
   1b85a:	bd30      	pop	{r4, r5, pc}
   1b85c:	0002d044 	.word	0x0002d044
   1b860:	0002d068 	.word	0x0002d068

0001b864 <l2cap_create_le_sig_pdu>:
{
   1b864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b868:	b082      	sub	sp, #8
   1b86a:	af00      	add	r7, sp, #0
   1b86c:	460c      	mov	r4, r1
   1b86e:	4616      	mov	r6, r2
   1b870:	461d      	mov	r5, r3
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
   1b872:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1b876:	2300      	movs	r3, #0
   1b878:	2100      	movs	r1, #0
   1b87a:	4608      	mov	r0, r1
   1b87c:	f00c fb5b 	bl	27f36 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1b880:	4680      	mov	r8, r0
   1b882:	b158      	cbz	r0, 1b89c <l2cap_create_le_sig_pdu+0x38>
	return net_buf_simple_add(&buf->b, len);
   1b884:	2104      	movs	r1, #4
   1b886:	300c      	adds	r0, #12
   1b888:	f00e fb27 	bl	29eda <net_buf_simple_add>
	hdr->code = code;
   1b88c:	7004      	strb	r4, [r0, #0]
	hdr->ident = ident;
   1b88e:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1b890:	8045      	strh	r5, [r0, #2]
}
   1b892:	4640      	mov	r0, r8
   1b894:	3708      	adds	r7, #8
   1b896:	46bd      	mov	sp, r7
   1b898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   1b89c:	466d      	mov	r5, sp
   1b89e:	b088      	sub	sp, #32
   1b8a0:	466b      	mov	r3, sp
   1b8a2:	f113 0210 	adds.w	r2, r3, #16
   1b8a6:	d02f      	beq.n	1b908 <l2cap_create_le_sig_pdu+0xa4>
   1b8a8:	210c      	movs	r1, #12
   1b8aa:	b13a      	cbz	r2, 1b8bc <l2cap_create_le_sig_pdu+0x58>
   1b8ac:	4608      	mov	r0, r1
   1b8ae:	2904      	cmp	r1, #4
   1b8b0:	dd01      	ble.n	1b8b6 <l2cap_create_le_sig_pdu+0x52>
   1b8b2:	4e18      	ldr	r6, [pc, #96]	; (1b914 <l2cap_create_le_sig_pdu+0xb0>)
   1b8b4:	615e      	str	r6, [r3, #20]
   1b8b6:	2808      	cmp	r0, #8
   1b8b8:	dd00      	ble.n	1b8bc <l2cap_create_le_sig_pdu+0x58>
   1b8ba:	619c      	str	r4, [r3, #24]
   1b8bc:	290b      	cmp	r1, #11
   1b8be:	dd26      	ble.n	1b90e <l2cap_create_le_sig_pdu+0xaa>
   1b8c0:	240c      	movs	r4, #12
   1b8c2:	b13a      	cbz	r2, 1b8d4 <l2cap_create_le_sig_pdu+0x70>
   1b8c4:	2103      	movs	r1, #3
   1b8c6:	7139      	strb	r1, [r7, #4]
   1b8c8:	2100      	movs	r1, #0
   1b8ca:	7179      	strb	r1, [r7, #5]
   1b8cc:	71b9      	strb	r1, [r7, #6]
   1b8ce:	71f9      	strb	r1, [r7, #7]
   1b8d0:	6878      	ldr	r0, [r7, #4]
   1b8d2:	6118      	str	r0, [r3, #16]
   1b8d4:	2100      	movs	r1, #0
   1b8d6:	f36f 0100 	bfc	r1, #0, #1
   1b8da:	f36f 0141 	bfc	r1, #1, #1
   1b8de:	f36f 0182 	bfc	r1, #2, #1
   1b8e2:	f36f 01c5 	bfc	r1, #3, #3
   1b8e6:	2301      	movs	r3, #1
   1b8e8:	f363 1188 	bfi	r1, r3, #6, #3
   1b8ec:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1b8f0:	f364 2152 	bfi	r1, r4, #9, #10
   1b8f4:	f36f 41de 	bfc	r1, #19, #12
   1b8f8:	f36f 71df 	bfc	r1, #31, #1
   1b8fc:	2300      	movs	r3, #0
   1b8fe:	4806      	ldr	r0, [pc, #24]	; (1b918 <l2cap_create_le_sig_pdu+0xb4>)
   1b900:	f00b f9a9 	bl	26c56 <z_impl_z_log_msg_static_create>
   1b904:	46ad      	mov	sp, r5
		return NULL;
   1b906:	e7c4      	b.n	1b892 <l2cap_create_le_sig_pdu+0x2e>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   1b908:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b90c:	e7cd      	b.n	1b8aa <l2cap_create_le_sig_pdu+0x46>
   1b90e:	f06f 041b 	mvn.w	r4, #27
   1b912:	e7d6      	b.n	1b8c2 <l2cap_create_le_sig_pdu+0x5e>
   1b914:	0002ed44 	.word	0x0002ed44
   1b918:	0002d0cc 	.word	0x0002d0cc

0001b91c <le_conn_param_update_req>:
{
   1b91c:	b570      	push	{r4, r5, r6, lr}
   1b91e:	b092      	sub	sp, #72	; 0x48
	struct bt_conn *conn = l2cap->chan.chan.conn;
   1b920:	6804      	ldr	r4, [r0, #0]
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   1b922:	68d3      	ldr	r3, [r2, #12]
	if (buf->len < sizeof(*req)) {
   1b924:	8a10      	ldrh	r0, [r2, #16]
   1b926:	2807      	cmp	r0, #7
   1b928:	d936      	bls.n	1b998 <le_conn_param_update_req+0x7c>
   1b92a:	4694      	mov	ip, r2
	if (conn->state != BT_CONN_CONNECTED) {
   1b92c:	7aa2      	ldrb	r2, [r4, #10]
   1b92e:	2a07      	cmp	r2, #7
   1b930:	d158      	bne.n	1b9e4 <le_conn_param_update_req+0xc8>
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   1b932:	78e2      	ldrb	r2, [r4, #3]
   1b934:	2a00      	cmp	r2, #0
   1b936:	d17b      	bne.n	1ba30 <le_conn_param_update_req+0x114>
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   1b938:	881a      	ldrh	r2, [r3, #0]
   1b93a:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   1b93e:	885a      	ldrh	r2, [r3, #2]
   1b940:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(req->latency);
   1b944:	889a      	ldrh	r2, [r3, #4]
   1b946:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(req->timeout);
   1b94a:	88db      	ldrh	r3, [r3, #6]
   1b94c:	f8ad 3016 	strh.w	r3, [sp, #22]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1b950:	2302      	movs	r3, #2
   1b952:	460a      	mov	r2, r1
   1b954:	2113      	movs	r1, #19
   1b956:	4660      	mov	r0, ip
   1b958:	f7ff ff84 	bl	1b864 <l2cap_create_le_sig_pdu>
	if (!buf) {
   1b95c:	4606      	mov	r6, r0
   1b95e:	2800      	cmp	r0, #0
   1b960:	d064      	beq.n	1ba2c <le_conn_param_update_req+0x110>
	accepted = le_param_req(conn, &param);
   1b962:	a904      	add	r1, sp, #16
   1b964:	4620      	mov	r0, r4
   1b966:	f7ff fb6d 	bl	1b044 <le_param_req>
   1b96a:	4605      	mov	r5, r0
   1b96c:	2102      	movs	r1, #2
   1b96e:	f106 000c 	add.w	r0, r6, #12
   1b972:	f00e fab2 	bl	29eda <net_buf_simple_add>
	if (accepted) {
   1b976:	2d00      	cmp	r5, #0
   1b978:	d061      	beq.n	1ba3e <le_conn_param_update_req+0x122>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   1b97a:	2300      	movs	r3, #0
   1b97c:	7003      	strb	r3, [r0, #0]
   1b97e:	7043      	strb	r3, [r0, #1]
	l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
   1b980:	4632      	mov	r2, r6
   1b982:	2105      	movs	r1, #5
   1b984:	4620      	mov	r0, r4
   1b986:	f00c faf0 	bl	27f6a <l2cap_send>
	if (accepted) {
   1b98a:	2d00      	cmp	r5, #0
   1b98c:	d04e      	beq.n	1ba2c <le_conn_param_update_req+0x110>
		bt_conn_le_conn_update(conn, &param);
   1b98e:	a904      	add	r1, sp, #16
   1b990:	4620      	mov	r0, r4
   1b992:	f00c fa60 	bl	27e56 <bt_conn_le_conn_update>
   1b996:	e049      	b.n	1ba2c <le_conn_param_update_req+0x110>
		LOG_ERR("Too small LE conn update param req");
   1b998:	4b2b      	ldr	r3, [pc, #172]	; (1ba48 <le_conn_param_update_req+0x12c>)
   1b99a:	9311      	str	r3, [sp, #68]	; 0x44
   1b99c:	2302      	movs	r3, #2
   1b99e:	f88d 300c 	strb.w	r3, [sp, #12]
   1b9a2:	2300      	movs	r3, #0
   1b9a4:	f88d 300d 	strb.w	r3, [sp, #13]
   1b9a8:	f88d 300e 	strb.w	r3, [sp, #14]
   1b9ac:	f88d 300f 	strb.w	r3, [sp, #15]
   1b9b0:	9a03      	ldr	r2, [sp, #12]
   1b9b2:	9210      	str	r2, [sp, #64]	; 0x40
   1b9b4:	4619      	mov	r1, r3
   1b9b6:	f363 0100 	bfi	r1, r3, #0, #1
   1b9ba:	f363 0141 	bfi	r1, r3, #1, #1
   1b9be:	f363 0182 	bfi	r1, r3, #2, #1
   1b9c2:	f363 01c5 	bfi	r1, r3, #3, #3
   1b9c6:	2201      	movs	r2, #1
   1b9c8:	f362 1188 	bfi	r1, r2, #6, #3
   1b9cc:	2208      	movs	r2, #8
   1b9ce:	f362 2152 	bfi	r1, r2, #9, #10
   1b9d2:	f363 41de 	bfi	r1, r3, #19, #12
   1b9d6:	f363 71df 	bfi	r1, r3, #31, #1
   1b9da:	aa10      	add	r2, sp, #64	; 0x40
   1b9dc:	481b      	ldr	r0, [pc, #108]	; (1ba4c <le_conn_param_update_req+0x130>)
   1b9de:	f00b f93a 	bl	26c56 <z_impl_z_log_msg_static_create>
		return;
   1b9e2:	e023      	b.n	1ba2c <le_conn_param_update_req+0x110>
		LOG_WRN("Not connected");
   1b9e4:	4b1a      	ldr	r3, [pc, #104]	; (1ba50 <le_conn_param_update_req+0x134>)
   1b9e6:	930b      	str	r3, [sp, #44]	; 0x2c
   1b9e8:	2202      	movs	r2, #2
   1b9ea:	f88d 200c 	strb.w	r2, [sp, #12]
   1b9ee:	2300      	movs	r3, #0
   1b9f0:	f88d 300d 	strb.w	r3, [sp, #13]
   1b9f4:	f88d 300e 	strb.w	r3, [sp, #14]
   1b9f8:	f88d 300f 	strb.w	r3, [sp, #15]
   1b9fc:	9903      	ldr	r1, [sp, #12]
   1b9fe:	910a      	str	r1, [sp, #40]	; 0x28
   1ba00:	4619      	mov	r1, r3
   1ba02:	f363 0100 	bfi	r1, r3, #0, #1
   1ba06:	f363 0141 	bfi	r1, r3, #1, #1
   1ba0a:	f363 0182 	bfi	r1, r3, #2, #1
   1ba0e:	f363 01c5 	bfi	r1, r3, #3, #3
   1ba12:	f362 1188 	bfi	r1, r2, #6, #3
   1ba16:	2208      	movs	r2, #8
   1ba18:	f362 2152 	bfi	r1, r2, #9, #10
   1ba1c:	f363 41de 	bfi	r1, r3, #19, #12
   1ba20:	f363 71df 	bfi	r1, r3, #31, #1
   1ba24:	aa0a      	add	r2, sp, #40	; 0x28
   1ba26:	4809      	ldr	r0, [pc, #36]	; (1ba4c <le_conn_param_update_req+0x130>)
   1ba28:	f00b f915 	bl	26c56 <z_impl_z_log_msg_static_create>
}
   1ba2c:	b012      	add	sp, #72	; 0x48
   1ba2e:	bd70      	pop	{r4, r5, r6, pc}
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   1ba30:	2200      	movs	r2, #0
   1ba32:	9200      	str	r2, [sp, #0]
   1ba34:	4613      	mov	r3, r2
   1ba36:	4620      	mov	r0, r4
   1ba38:	f00c faa5 	bl	27f86 <l2cap_send_reject>
		return;
   1ba3c:	e7f6      	b.n	1ba2c <le_conn_param_update_req+0x110>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
   1ba3e:	2301      	movs	r3, #1
   1ba40:	7003      	strb	r3, [r0, #0]
   1ba42:	2300      	movs	r3, #0
   1ba44:	7043      	strb	r3, [r0, #1]
   1ba46:	e79b      	b.n	1b980 <le_conn_param_update_req+0x64>
   1ba48:	0002ed6c 	.word	0x0002ed6c
   1ba4c:	0002d0cc 	.word	0x0002d0cc
   1ba50:	0002ed90 	.word	0x0002ed90

0001ba54 <l2cap_recv>:
{
   1ba54:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ba56:	b091      	sub	sp, #68	; 0x44
   1ba58:	af02      	add	r7, sp, #8
	if (buf->len < sizeof(*hdr)) {
   1ba5a:	8a0b      	ldrh	r3, [r1, #16]
   1ba5c:	2b03      	cmp	r3, #3
   1ba5e:	d924      	bls.n	1baaa <l2cap_recv+0x56>
   1ba60:	4606      	mov	r6, r0
   1ba62:	460c      	mov	r4, r1
	return net_buf_simple_pull_mem(&buf->b, len);
   1ba64:	2104      	movs	r1, #4
   1ba66:	f104 000c 	add.w	r0, r4, #12
   1ba6a:	f00e fa60 	bl	29f2e <net_buf_simple_pull_mem>
   1ba6e:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   1ba70:	8841      	ldrh	r1, [r0, #2]
	if (buf->len != len) {
   1ba72:	8a20      	ldrh	r0, [r4, #16]
   1ba74:	4288      	cmp	r0, r1
   1ba76:	d069      	beq.n	1bb4c <l2cap_recv+0xf8>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1ba78:	466c      	mov	r4, sp
   1ba7a:	b088      	sub	sp, #32
   1ba7c:	ab02      	add	r3, sp, #8
   1ba7e:	f113 0210 	adds.w	r2, r3, #16
   1ba82:	d038      	beq.n	1baf6 <l2cap_recv+0xa2>
   1ba84:	2510      	movs	r5, #16
   1ba86:	b162      	cbz	r2, 1baa2 <l2cap_recv+0x4e>
   1ba88:	462e      	mov	r6, r5
   1ba8a:	2d04      	cmp	r5, #4
   1ba8c:	dd03      	ble.n	1ba96 <l2cap_recv+0x42>
   1ba8e:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 1bc4c <l2cap_recv+0x1f8>
   1ba92:	f8c3 c014 	str.w	ip, [r3, #20]
   1ba96:	2e08      	cmp	r6, #8
   1ba98:	dd00      	ble.n	1ba9c <l2cap_recv+0x48>
   1ba9a:	6198      	str	r0, [r3, #24]
   1ba9c:	2e0c      	cmp	r6, #12
   1ba9e:	dd2d      	ble.n	1bafc <l2cap_recv+0xa8>
   1baa0:	61d9      	str	r1, [r3, #28]
   1baa2:	2d0f      	cmp	r5, #15
   1baa4:	dd4f      	ble.n	1bb46 <l2cap_recv+0xf2>
   1baa6:	2510      	movs	r5, #16
   1baa8:	e02a      	b.n	1bb00 <l2cap_recv+0xac>
		LOG_ERR("Too small L2CAP signaling PDU");
   1baaa:	4b69      	ldr	r3, [pc, #420]	; (1bc50 <l2cap_recv+0x1fc>)
   1baac:	637b      	str	r3, [r7, #52]	; 0x34
   1baae:	2302      	movs	r3, #2
   1bab0:	713b      	strb	r3, [r7, #4]
   1bab2:	2300      	movs	r3, #0
   1bab4:	717b      	strb	r3, [r7, #5]
   1bab6:	71bb      	strb	r3, [r7, #6]
   1bab8:	71fb      	strb	r3, [r7, #7]
   1baba:	687a      	ldr	r2, [r7, #4]
   1babc:	633a      	str	r2, [r7, #48]	; 0x30
   1babe:	4619      	mov	r1, r3
   1bac0:	f363 0100 	bfi	r1, r3, #0, #1
   1bac4:	f363 0141 	bfi	r1, r3, #1, #1
   1bac8:	f363 0182 	bfi	r1, r3, #2, #1
   1bacc:	f363 01c5 	bfi	r1, r3, #3, #3
   1bad0:	2201      	movs	r2, #1
   1bad2:	f362 1188 	bfi	r1, r2, #6, #3
   1bad6:	2208      	movs	r2, #8
   1bad8:	f362 2152 	bfi	r1, r2, #9, #10
   1badc:	f363 41de 	bfi	r1, r3, #19, #12
   1bae0:	f363 71df 	bfi	r1, r3, #31, #1
   1bae4:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1bae8:	485a      	ldr	r0, [pc, #360]	; (1bc54 <l2cap_recv+0x200>)
   1baea:	f00b f8b4 	bl	26c56 <z_impl_z_log_msg_static_create>
}
   1baee:	2000      	movs	r0, #0
   1baf0:	373c      	adds	r7, #60	; 0x3c
   1baf2:	46bd      	mov	sp, r7
   1baf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1baf6:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   1bafa:	e7c4      	b.n	1ba86 <l2cap_recv+0x32>
   1bafc:	f06f 051b 	mvn.w	r5, #27
   1bb00:	b13a      	cbz	r2, 1bb12 <l2cap_recv+0xbe>
   1bb02:	2104      	movs	r1, #4
   1bb04:	7139      	strb	r1, [r7, #4]
   1bb06:	2100      	movs	r1, #0
   1bb08:	7179      	strb	r1, [r7, #5]
   1bb0a:	71b9      	strb	r1, [r7, #6]
   1bb0c:	71f9      	strb	r1, [r7, #7]
   1bb0e:	6878      	ldr	r0, [r7, #4]
   1bb10:	6118      	str	r0, [r3, #16]
   1bb12:	2100      	movs	r1, #0
   1bb14:	f36f 0100 	bfc	r1, #0, #1
   1bb18:	f36f 0141 	bfc	r1, #1, #1
   1bb1c:	f36f 0182 	bfc	r1, #2, #1
   1bb20:	f36f 01c5 	bfc	r1, #3, #3
   1bb24:	2301      	movs	r3, #1
   1bb26:	f363 1188 	bfi	r1, r3, #6, #3
   1bb2a:	f405 737d 	and.w	r3, r5, #1012	; 0x3f4
   1bb2e:	f363 2152 	bfi	r1, r3, #9, #10
   1bb32:	f36f 41de 	bfc	r1, #19, #12
   1bb36:	f36f 71df 	bfc	r1, #31, #1
   1bb3a:	2300      	movs	r3, #0
   1bb3c:	4845      	ldr	r0, [pc, #276]	; (1bc54 <l2cap_recv+0x200>)
   1bb3e:	f00b f88a 	bl	26c56 <z_impl_z_log_msg_static_create>
   1bb42:	46a5      	mov	sp, r4
		return 0;
   1bb44:	e7d3      	b.n	1baee <l2cap_recv+0x9a>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1bb46:	f06f 051b 	mvn.w	r5, #27
   1bb4a:	e7d9      	b.n	1bb00 <l2cap_recv+0xac>
	if (!hdr->ident) {
   1bb4c:	7869      	ldrb	r1, [r5, #1]
   1bb4e:	b1e9      	cbz	r1, 1bb8c <l2cap_recv+0x138>
	switch (hdr->code) {
   1bb50:	782b      	ldrb	r3, [r5, #0]
   1bb52:	2b12      	cmp	r3, #18
   1bb54:	d042      	beq.n	1bbdc <l2cap_recv+0x188>
   1bb56:	2b13      	cmp	r3, #19
   1bb58:	d03b      	beq.n	1bbd2 <l2cap_recv+0x17e>
   1bb5a:	2b01      	cmp	r3, #1
   1bb5c:	d0c7      	beq.n	1baee <l2cap_recv+0x9a>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1bb5e:	466c      	mov	r4, sp
   1bb60:	b088      	sub	sp, #32
   1bb62:	a902      	add	r1, sp, #8
   1bb64:	f111 0210 	adds.w	r2, r1, #16
   1bb68:	d03d      	beq.n	1bbe6 <l2cap_recv+0x192>
   1bb6a:	200c      	movs	r0, #12
   1bb6c:	b152      	cbz	r2, 1bb84 <l2cap_recv+0x130>
   1bb6e:	4684      	mov	ip, r0
   1bb70:	2804      	cmp	r0, #4
   1bb72:	dd03      	ble.n	1bb7c <l2cap_recv+0x128>
   1bb74:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 1bc58 <l2cap_recv+0x204>
   1bb78:	f8c1 e014 	str.w	lr, [r1, #20]
   1bb7c:	f1bc 0f08 	cmp.w	ip, #8
   1bb80:	dd34      	ble.n	1bbec <l2cap_recv+0x198>
   1bb82:	618b      	str	r3, [r1, #24]
   1bb84:	280b      	cmp	r0, #11
   1bb86:	dd5d      	ble.n	1bc44 <l2cap_recv+0x1f0>
   1bb88:	230c      	movs	r3, #12
   1bb8a:	e031      	b.n	1bbf0 <l2cap_recv+0x19c>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   1bb8c:	4b33      	ldr	r3, [pc, #204]	; (1bc5c <l2cap_recv+0x208>)
   1bb8e:	61fb      	str	r3, [r7, #28]
   1bb90:	2302      	movs	r3, #2
   1bb92:	713b      	strb	r3, [r7, #4]
   1bb94:	2300      	movs	r3, #0
   1bb96:	717b      	strb	r3, [r7, #5]
   1bb98:	71bb      	strb	r3, [r7, #6]
   1bb9a:	71fb      	strb	r3, [r7, #7]
   1bb9c:	687a      	ldr	r2, [r7, #4]
   1bb9e:	61ba      	str	r2, [r7, #24]
   1bba0:	4619      	mov	r1, r3
   1bba2:	f363 0100 	bfi	r1, r3, #0, #1
   1bba6:	f363 0141 	bfi	r1, r3, #1, #1
   1bbaa:	f363 0182 	bfi	r1, r3, #2, #1
   1bbae:	f363 01c5 	bfi	r1, r3, #3, #3
   1bbb2:	2201      	movs	r2, #1
   1bbb4:	f362 1188 	bfi	r1, r2, #6, #3
   1bbb8:	2208      	movs	r2, #8
   1bbba:	f362 2152 	bfi	r1, r2, #9, #10
   1bbbe:	f363 41de 	bfi	r1, r3, #19, #12
   1bbc2:	f363 71df 	bfi	r1, r3, #31, #1
   1bbc6:	f107 0218 	add.w	r2, r7, #24
   1bbca:	4822      	ldr	r0, [pc, #136]	; (1bc54 <l2cap_recv+0x200>)
   1bbcc:	f00b f843 	bl	26c56 <z_impl_z_log_msg_static_create>
		return 0;
   1bbd0:	e78d      	b.n	1baee <l2cap_recv+0x9a>
		le_conn_param_rsp(l2cap, buf);
   1bbd2:	4621      	mov	r1, r4
   1bbd4:	4630      	mov	r0, r6
   1bbd6:	f7ff fd95 	bl	1b704 <le_conn_param_rsp>
		break;
   1bbda:	e788      	b.n	1baee <l2cap_recv+0x9a>
			le_conn_param_update_req(l2cap, hdr->ident, buf);
   1bbdc:	4622      	mov	r2, r4
   1bbde:	4630      	mov	r0, r6
   1bbe0:	f7ff fe9c 	bl	1b91c <le_conn_param_update_req>
			break;
   1bbe4:	e783      	b.n	1baee <l2cap_recv+0x9a>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1bbe6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1bbea:	e7bf      	b.n	1bb6c <l2cap_recv+0x118>
   1bbec:	f06f 031b 	mvn.w	r3, #27
   1bbf0:	b13a      	cbz	r2, 1bc02 <l2cap_recv+0x1ae>
   1bbf2:	2003      	movs	r0, #3
   1bbf4:	7138      	strb	r0, [r7, #4]
   1bbf6:	2000      	movs	r0, #0
   1bbf8:	7178      	strb	r0, [r7, #5]
   1bbfa:	71b8      	strb	r0, [r7, #6]
   1bbfc:	71f8      	strb	r0, [r7, #7]
   1bbfe:	6878      	ldr	r0, [r7, #4]
   1bc00:	6108      	str	r0, [r1, #16]
   1bc02:	2100      	movs	r1, #0
   1bc04:	f36f 0100 	bfc	r1, #0, #1
   1bc08:	f36f 0141 	bfc	r1, #1, #1
   1bc0c:	f36f 0182 	bfc	r1, #2, #1
   1bc10:	f36f 01c5 	bfc	r1, #3, #3
   1bc14:	2002      	movs	r0, #2
   1bc16:	f360 1188 	bfi	r1, r0, #6, #3
   1bc1a:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   1bc1e:	f363 2152 	bfi	r1, r3, #9, #10
   1bc22:	f36f 41de 	bfc	r1, #19, #12
   1bc26:	f36f 71df 	bfc	r1, #31, #1
   1bc2a:	2300      	movs	r3, #0
   1bc2c:	4809      	ldr	r0, [pc, #36]	; (1bc54 <l2cap_recv+0x200>)
   1bc2e:	f00b f812 	bl	26c56 <z_impl_z_log_msg_static_create>
   1bc32:	46a5      	mov	sp, r4
		l2cap_send_reject(chan->conn, hdr->ident,
   1bc34:	7869      	ldrb	r1, [r5, #1]
   1bc36:	6830      	ldr	r0, [r6, #0]
   1bc38:	2200      	movs	r2, #0
   1bc3a:	9200      	str	r2, [sp, #0]
   1bc3c:	4613      	mov	r3, r2
   1bc3e:	f00c f9a2 	bl	27f86 <l2cap_send_reject>
		break;
   1bc42:	e754      	b.n	1baee <l2cap_recv+0x9a>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1bc44:	f06f 031b 	mvn.w	r3, #27
   1bc48:	e7d2      	b.n	1bbf0 <l2cap_recv+0x19c>
   1bc4a:	bf00      	nop
   1bc4c:	0002edc0 	.word	0x0002edc0
   1bc50:	0002eda0 	.word	0x0002eda0
   1bc54:	0002d0cc 	.word	0x0002d0cc
   1bc58:	0002ee08 	.word	0x0002ee08
   1bc5c:	0002ede4 	.word	0x0002ede4

0001bc60 <bt_l2cap_recv>:
{
   1bc60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bc64:	b088      	sub	sp, #32
   1bc66:	af00      	add	r7, sp, #0
   1bc68:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1bc6a:	8a0b      	ldrh	r3, [r1, #16]
   1bc6c:	2b03      	cmp	r3, #3
   1bc6e:	d915      	bls.n	1bc9c <bt_l2cap_recv+0x3c>
   1bc70:	4606      	mov	r6, r0
   1bc72:	4615      	mov	r5, r2
   1bc74:	2104      	movs	r1, #4
   1bc76:	f104 000c 	add.w	r0, r4, #12
   1bc7a:	f00e f958 	bl	29f2e <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   1bc7e:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1bc82:	4641      	mov	r1, r8
   1bc84:	4630      	mov	r0, r6
   1bc86:	f00c f9a2 	bl	27fce <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1bc8a:	b368      	cbz	r0, 1bce8 <bt_l2cap_recv+0x88>
	l2cap_chan_recv(chan, buf, complete);
   1bc8c:	462a      	mov	r2, r5
   1bc8e:	4621      	mov	r1, r4
   1bc90:	f00c f90a 	bl	27ea8 <l2cap_chan_recv>
}
   1bc94:	3720      	adds	r7, #32
   1bc96:	46bd      	mov	sp, r7
   1bc98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Too small L2CAP PDU received");
   1bc9c:	4b34      	ldr	r3, [pc, #208]	; (1bd70 <bt_l2cap_recv+0x110>)
   1bc9e:	61fb      	str	r3, [r7, #28]
   1bca0:	2302      	movs	r3, #2
   1bca2:	713b      	strb	r3, [r7, #4]
   1bca4:	2300      	movs	r3, #0
   1bca6:	717b      	strb	r3, [r7, #5]
   1bca8:	71bb      	strb	r3, [r7, #6]
   1bcaa:	71fb      	strb	r3, [r7, #7]
   1bcac:	687a      	ldr	r2, [r7, #4]
   1bcae:	61ba      	str	r2, [r7, #24]
   1bcb0:	4619      	mov	r1, r3
   1bcb2:	f363 0100 	bfi	r1, r3, #0, #1
   1bcb6:	f363 0141 	bfi	r1, r3, #1, #1
   1bcba:	f363 0182 	bfi	r1, r3, #2, #1
   1bcbe:	f363 01c5 	bfi	r1, r3, #3, #3
   1bcc2:	2201      	movs	r2, #1
   1bcc4:	f362 1188 	bfi	r1, r2, #6, #3
   1bcc8:	2208      	movs	r2, #8
   1bcca:	f362 2152 	bfi	r1, r2, #9, #10
   1bcce:	f363 41de 	bfi	r1, r3, #19, #12
   1bcd2:	f363 71df 	bfi	r1, r3, #31, #1
   1bcd6:	f107 0218 	add.w	r2, r7, #24
   1bcda:	4826      	ldr	r0, [pc, #152]	; (1bd74 <bt_l2cap_recv+0x114>)
   1bcdc:	f00a ffbb 	bl	26c56 <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   1bce0:	4620      	mov	r0, r4
   1bce2:	f00e f8b3 	bl	29e4c <net_buf_unref>
		return;
   1bce6:	e7d5      	b.n	1bc94 <bt_l2cap_recv+0x34>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   1bce8:	466d      	mov	r5, sp
   1bcea:	b088      	sub	sp, #32
   1bcec:	466b      	mov	r3, sp
   1bcee:	f113 0210 	adds.w	r2, r3, #16
   1bcf2:	d00e      	beq.n	1bd12 <bt_l2cap_recv+0xb2>
   1bcf4:	210c      	movs	r1, #12
   1bcf6:	b142      	cbz	r2, 1bd0a <bt_l2cap_recv+0xaa>
   1bcf8:	4608      	mov	r0, r1
   1bcfa:	2904      	cmp	r1, #4
   1bcfc:	dd01      	ble.n	1bd02 <bt_l2cap_recv+0xa2>
   1bcfe:	4e1e      	ldr	r6, [pc, #120]	; (1bd78 <bt_l2cap_recv+0x118>)
   1bd00:	615e      	str	r6, [r3, #20]
   1bd02:	2808      	cmp	r0, #8
   1bd04:	dd08      	ble.n	1bd18 <bt_l2cap_recv+0xb8>
   1bd06:	f8c3 8018 	str.w	r8, [r3, #24]
   1bd0a:	290b      	cmp	r1, #11
   1bd0c:	dd2c      	ble.n	1bd68 <bt_l2cap_recv+0x108>
   1bd0e:	260c      	movs	r6, #12
   1bd10:	e004      	b.n	1bd1c <bt_l2cap_recv+0xbc>
   1bd12:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1bd16:	e7ee      	b.n	1bcf6 <bt_l2cap_recv+0x96>
   1bd18:	f06f 061b 	mvn.w	r6, #27
   1bd1c:	b13a      	cbz	r2, 1bd2e <bt_l2cap_recv+0xce>
   1bd1e:	2103      	movs	r1, #3
   1bd20:	7139      	strb	r1, [r7, #4]
   1bd22:	2100      	movs	r1, #0
   1bd24:	7179      	strb	r1, [r7, #5]
   1bd26:	71b9      	strb	r1, [r7, #6]
   1bd28:	71f9      	strb	r1, [r7, #7]
   1bd2a:	6878      	ldr	r0, [r7, #4]
   1bd2c:	6118      	str	r0, [r3, #16]
   1bd2e:	2100      	movs	r1, #0
   1bd30:	f36f 0100 	bfc	r1, #0, #1
   1bd34:	f36f 0141 	bfc	r1, #1, #1
   1bd38:	f36f 0182 	bfc	r1, #2, #1
   1bd3c:	f36f 01c5 	bfc	r1, #3, #3
   1bd40:	2302      	movs	r3, #2
   1bd42:	f363 1188 	bfi	r1, r3, #6, #3
   1bd46:	f406 737b 	and.w	r3, r6, #1004	; 0x3ec
   1bd4a:	f363 2152 	bfi	r1, r3, #9, #10
   1bd4e:	f36f 41de 	bfc	r1, #19, #12
   1bd52:	f36f 71df 	bfc	r1, #31, #1
   1bd56:	2300      	movs	r3, #0
   1bd58:	4806      	ldr	r0, [pc, #24]	; (1bd74 <bt_l2cap_recv+0x114>)
   1bd5a:	f00a ff7c 	bl	26c56 <z_impl_z_log_msg_static_create>
   1bd5e:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   1bd60:	4620      	mov	r0, r4
   1bd62:	f00e f873 	bl	29e4c <net_buf_unref>
		return;
   1bd66:	e795      	b.n	1bc94 <bt_l2cap_recv+0x34>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   1bd68:	f06f 061b 	mvn.w	r6, #27
   1bd6c:	e7d6      	b.n	1bd1c <bt_l2cap_recv+0xbc>
   1bd6e:	bf00      	nop
   1bd70:	0002ee30 	.word	0x0002ee30
   1bd74:	0002d0cc 	.word	0x0002d0cc
   1bd78:	0002ee50 	.word	0x0002ee50

0001bd7c <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   1bd7c:	2852      	cmp	r0, #82	; 0x52
   1bd7e:	d833      	bhi.n	1bde8 <att_op_get_type+0x6c>
   1bd80:	281b      	cmp	r0, #27
   1bd82:	d321      	bcc.n	1bdc8 <att_op_get_type+0x4c>
   1bd84:	f1a0 031b 	sub.w	r3, r0, #27
   1bd88:	2b37      	cmp	r3, #55	; 0x37
   1bd8a:	d82f      	bhi.n	1bdec <att_op_get_type+0x70>
   1bd8c:	e8df f003 	tbb	[pc, r3]
   1bd90:	3b392e37 	.word	0x3b392e37
   1bd94:	2e352a2e 	.word	0x2e352a2e
   1bd98:	2e2e2e37 	.word	0x2e2e2e37
   1bd9c:	2e2e2e2e 	.word	0x2e2e2e2e
   1bda0:	2e2e2e2e 	.word	0x2e2e2e2e
   1bda4:	2e2e2e2e 	.word	0x2e2e2e2e
   1bda8:	2e2e2e2e 	.word	0x2e2e2e2e
   1bdac:	2e2e2e2e 	.word	0x2e2e2e2e
   1bdb0:	2e2e2e2e 	.word	0x2e2e2e2e
   1bdb4:	2e2e2e2e 	.word	0x2e2e2e2e
   1bdb8:	2e2e2e2e 	.word	0x2e2e2e2e
   1bdbc:	2e2e2e2e 	.word	0x2e2e2e2e
   1bdc0:	2e2e2e2e 	.word	0x2e2e2e2e
   1bdc4:	332e2e2e 	.word	0x332e2e2e
   1bdc8:	2819      	cmp	r0, #25
   1bdca:	d80f      	bhi.n	1bdec <att_op_get_type+0x70>
   1bdcc:	b243      	sxtb	r3, r0
   1bdce:	b16b      	cbz	r3, 1bdec <att_op_get_type+0x70>
   1bdd0:	2301      	movs	r3, #1
   1bdd2:	4083      	lsls	r3, r0
   1bdd4:	4a10      	ldr	r2, [pc, #64]	; (1be18 <att_op_get_type+0x9c>)
   1bdd6:	401a      	ands	r2, r3
   1bdd8:	b9ba      	cbnz	r2, 1be0a <att_op_get_type+0x8e>
   1bdda:	4a10      	ldr	r2, [pc, #64]	; (1be1c <att_op_get_type+0xa0>)
   1bddc:	401a      	ands	r2, r3
   1bdde:	b12a      	cbz	r2, 1bdec <att_op_get_type+0x70>
   1bde0:	2001      	movs	r0, #1
   1bde2:	4770      	bx	lr
   1bde4:	2001      	movs	r0, #1
   1bde6:	4770      	bx	lr
   1bde8:	28d2      	cmp	r0, #210	; 0xd2
   1bdea:	d010      	beq.n	1be0e <att_op_get_type+0x92>
		return ATT_NOTIFICATION;
	case BT_ATT_OP_INDICATE:
		return ATT_INDICATION;
	}

	if (op & ATT_CMD_MASK) {
   1bdec:	f010 0f40 	tst.w	r0, #64	; 0x40
   1bdf0:	d10f      	bne.n	1be12 <att_op_get_type+0x96>
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   1bdf2:	2006      	movs	r0, #6
   1bdf4:	4770      	bx	lr
		return ATT_COMMAND;
   1bdf6:	2000      	movs	r0, #0
   1bdf8:	4770      	bx	lr
		return ATT_RESPONSE;
   1bdfa:	2002      	movs	r0, #2
   1bdfc:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1bdfe:	2003      	movs	r0, #3
   1be00:	4770      	bx	lr
		return ATT_INDICATION;
   1be02:	2005      	movs	r0, #5
   1be04:	4770      	bx	lr
		return ATT_CONFIRMATION;
   1be06:	2004      	movs	r0, #4
   1be08:	4770      	bx	lr
		return ATT_RESPONSE;
   1be0a:	2002      	movs	r0, #2
   1be0c:	4770      	bx	lr
		return ATT_COMMAND;
   1be0e:	2000      	movs	r0, #0
   1be10:	4770      	bx	lr
		return ATT_COMMAND;
   1be12:	2000      	movs	r0, #0
}
   1be14:	4770      	bx	lr
   1be16:	bf00      	nop
   1be18:	028aaaaa 	.word	0x028aaaaa
   1be1c:	01455554 	.word	0x01455554

0001be20 <att_cb>:
{
   1be20:	b508      	push	{r3, lr}
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1be22:	68c3      	ldr	r3, [r0, #12]
   1be24:	7818      	ldrb	r0, [r3, #0]
   1be26:	f7ff ffa9 	bl	1bd7c <att_op_get_type>
	switch (op_type) {
   1be2a:	2805      	cmp	r0, #5
   1be2c:	d80a      	bhi.n	1be44 <att_cb+0x24>
   1be2e:	e8df f000 	tbb	[pc, r0]
   1be32:	0507      	.short	0x0507
   1be34:	050b0703 	.word	0x050b0703
   1be38:	4804      	ldr	r0, [pc, #16]	; (1be4c <att_cb+0x2c>)
   1be3a:	e000      	b.n	1be3e <att_cb+0x1e>
		return att_req_sent;
   1be3c:	4804      	ldr	r0, [pc, #16]	; (1be50 <att_cb+0x30>)
}
   1be3e:	bd08      	pop	{r3, pc}
		return att_tx_complete;
   1be40:	4804      	ldr	r0, [pc, #16]	; (1be54 <att_cb+0x34>)
   1be42:	e7fc      	b.n	1be3e <att_cb+0x1e>
	return att_unknown;
   1be44:	4804      	ldr	r0, [pc, #16]	; (1be58 <att_cb+0x38>)
   1be46:	e7fa      	b.n	1be3e <att_cb+0x1e>
		return att_cfm_sent;
   1be48:	4804      	ldr	r0, [pc, #16]	; (1be5c <att_cb+0x3c>)
   1be4a:	e7f8      	b.n	1be3e <att_cb+0x1e>
   1be4c:	00028909 	.word	0x00028909
   1be50:	000288d1 	.word	0x000288d1
   1be54:	000288b5 	.word	0x000288b5
   1be58:	00028899 	.word	0x00028899
   1be5c:	000288ed 	.word	0x000288ed

0001be60 <tx_meta_data_alloc>:
{
   1be60:	b508      	push	{r3, lr}
   1be62:	4602      	mov	r2, r0
   1be64:	460b      	mov	r3, r1
	return z_impl_k_queue_get(queue, timeout);
   1be66:	4802      	ldr	r0, [pc, #8]	; (1be70 <tx_meta_data_alloc+0x10>)
   1be68:	f008 f898 	bl	23f9c <z_impl_k_queue_get>
}
   1be6c:	bd08      	pop	{r3, pc}
   1be6e:	bf00      	nop
   1be70:	20000af4 	.word	0x20000af4

0001be74 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   1be74:	b510      	push	{r4, lr}
   1be76:	b08e      	sub	sp, #56	; 0x38
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   1be78:	7a83      	ldrb	r3, [r0, #10]
   1be7a:	2b07      	cmp	r3, #7
   1be7c:	d109      	bne.n	1be92 <att_get+0x1e>
		LOG_WRN("Not connected");
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1be7e:	2104      	movs	r1, #4
   1be80:	f00c f8a5 	bl	27fce <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1be84:	4604      	mov	r4, r0
   1be86:	b350      	cbz	r0, 1bede <att_get+0x6a>

	att_chan = ATT_CHAN(chan);
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
		 "ATT channel not connected");

	return att_chan->att;
   1be88:	f850 4c04 	ldr.w	r4, [r0, #-4]
}
   1be8c:	4620      	mov	r0, r4
   1be8e:	b00e      	add	sp, #56	; 0x38
   1be90:	bd10      	pop	{r4, pc}
		LOG_WRN("Not connected");
   1be92:	4b26      	ldr	r3, [pc, #152]	; (1bf2c <att_get+0xb8>)
   1be94:	930d      	str	r3, [sp, #52]	; 0x34
   1be96:	2302      	movs	r3, #2
   1be98:	f88d 3004 	strb.w	r3, [sp, #4]
   1be9c:	2400      	movs	r4, #0
   1be9e:	f88d 4005 	strb.w	r4, [sp, #5]
   1bea2:	f88d 4006 	strb.w	r4, [sp, #6]
   1bea6:	f88d 4007 	strb.w	r4, [sp, #7]
   1beaa:	9a01      	ldr	r2, [sp, #4]
   1beac:	920c      	str	r2, [sp, #48]	; 0x30
   1beae:	4621      	mov	r1, r4
   1beb0:	f364 0100 	bfi	r1, r4, #0, #1
   1beb4:	f364 0141 	bfi	r1, r4, #1, #1
   1beb8:	f364 0182 	bfi	r1, r4, #2, #1
   1bebc:	f364 01c5 	bfi	r1, r4, #3, #3
   1bec0:	f363 1188 	bfi	r1, r3, #6, #3
   1bec4:	2308      	movs	r3, #8
   1bec6:	f363 2152 	bfi	r1, r3, #9, #10
   1beca:	f364 41de 	bfi	r1, r4, #19, #12
   1bece:	f364 71df 	bfi	r1, r4, #31, #1
   1bed2:	4623      	mov	r3, r4
   1bed4:	aa0c      	add	r2, sp, #48	; 0x30
   1bed6:	4816      	ldr	r0, [pc, #88]	; (1bf30 <att_get+0xbc>)
   1bed8:	f00a febd 	bl	26c56 <z_impl_z_log_msg_static_create>
		return NULL;
   1bedc:	e7d6      	b.n	1be8c <att_get+0x18>
		LOG_ERR("Unable to find ATT channel");
   1bede:	4b15      	ldr	r3, [pc, #84]	; (1bf34 <att_get+0xc0>)
   1bee0:	9307      	str	r3, [sp, #28]
   1bee2:	2302      	movs	r3, #2
   1bee4:	f88d 3004 	strb.w	r3, [sp, #4]
   1bee8:	2300      	movs	r3, #0
   1beea:	f88d 3005 	strb.w	r3, [sp, #5]
   1beee:	f88d 3006 	strb.w	r3, [sp, #6]
   1bef2:	f88d 3007 	strb.w	r3, [sp, #7]
   1bef6:	9a01      	ldr	r2, [sp, #4]
   1bef8:	9206      	str	r2, [sp, #24]
   1befa:	4619      	mov	r1, r3
   1befc:	f363 0100 	bfi	r1, r3, #0, #1
   1bf00:	f363 0141 	bfi	r1, r3, #1, #1
   1bf04:	f363 0182 	bfi	r1, r3, #2, #1
   1bf08:	f363 01c5 	bfi	r1, r3, #3, #3
   1bf0c:	2201      	movs	r2, #1
   1bf0e:	f362 1188 	bfi	r1, r2, #6, #3
   1bf12:	2208      	movs	r2, #8
   1bf14:	f362 2152 	bfi	r1, r2, #9, #10
   1bf18:	f363 41de 	bfi	r1, r3, #19, #12
   1bf1c:	f363 71df 	bfi	r1, r3, #31, #1
   1bf20:	aa06      	add	r2, sp, #24
   1bf22:	4803      	ldr	r0, [pc, #12]	; (1bf30 <att_get+0xbc>)
   1bf24:	f00a fe97 	bl	26c56 <z_impl_z_log_msg_static_create>
		return NULL;
   1bf28:	e7b0      	b.n	1be8c <att_get+0x18>
   1bf2a:	bf00      	nop
   1bf2c:	0002ed90 	.word	0x0002ed90
   1bf30:	0002d0a4 	.word	0x0002d0a4
   1bf34:	0002eeb0 	.word	0x0002eeb0

0001bf38 <att_chan_new>:
	att_chan_mtu_updated(att_chan);
}
#endif /* CONFIG_BT_EATT */

static struct bt_att_chan *att_chan_new(struct bt_att *att, atomic_val_t flags)
{
   1bf38:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bf3a:	b083      	sub	sp, #12
   1bf3c:	af00      	add	r7, sp, #0
   1bf3e:	4605      	mov	r5, r0
   1bf40:	460e      	mov	r6, r1
	return list->head;
   1bf42:	6a43      	ldr	r3, [r0, #36]	; 0x24
		.reconfigured = bt_att_reconfigured,
	#endif /* CONFIG_BT_EATT */
	};
	struct bt_att_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1bf44:	b103      	cbz	r3, 1bf48 <att_chan_new+0x10>
   1bf46:	3be0      	subs	r3, #224	; 0xe0
   1bf48:	607b      	str	r3, [r7, #4]
	int quota = 0;
   1bf4a:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1bf4c:	e002      	b.n	1bf54 <att_chan_new+0x1c>
		if (chan->att == att) {
			quota++;
   1bf4e:	3201      	adds	r2, #1
   1bf50:	e005      	b.n	1bf5e <att_chan_new+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1bf52:	607b      	str	r3, [r7, #4]
   1bf54:	687c      	ldr	r4, [r7, #4]
   1bf56:	b16c      	cbz	r4, 1bf74 <att_chan_new+0x3c>
		if (chan->att == att) {
   1bf58:	6823      	ldr	r3, [r4, #0]
   1bf5a:	42ab      	cmp	r3, r5
   1bf5c:	d0f7      	beq.n	1bf4e <att_chan_new+0x16>
		}

		if (quota == ATT_CHAN_MAX) {
   1bf5e:	2a01      	cmp	r2, #1
   1bf60:	d070      	beq.n	1c044 <att_chan_new+0x10c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bf62:	f114 03e0 	adds.w	r3, r4, #224	; 0xe0
   1bf66:	d0f4      	beq.n	1bf52 <att_chan_new+0x1a>
	return node->next;
   1bf68:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1bf6c:	2b00      	cmp	r3, #0
   1bf6e:	d0f0      	beq.n	1bf52 <att_chan_new+0x1a>
   1bf70:	3be0      	subs	r3, #224	; 0xe0
   1bf72:	e7ee      	b.n	1bf52 <att_chan_new+0x1a>
			LOG_DBG("Maximum number of channels reached: %d", quota);
			return NULL;
		}
	}

	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1bf74:	2200      	movs	r2, #0
   1bf76:	2300      	movs	r3, #0
   1bf78:	1d39      	adds	r1, r7, #4
   1bf7a:	4833      	ldr	r0, [pc, #204]	; (1c048 <att_chan_new+0x110>)
   1bf7c:	f007 fe0c 	bl	23b98 <k_mem_slab_alloc>
   1bf80:	bb08      	cbnz	r0, 1bfc6 <att_chan_new+0x8e>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
		return NULL;
	}

	(void)memset(chan, 0, sizeof(*chan));
   1bf82:	22e8      	movs	r2, #232	; 0xe8
   1bf84:	2100      	movs	r1, #0
   1bf86:	6878      	ldr	r0, [r7, #4]
   1bf88:	f00b facf 	bl	2752a <memset>
	chan->chan.chan.ops = &ops;
   1bf8c:	6878      	ldr	r0, [r7, #4]
   1bf8e:	4b2f      	ldr	r3, [pc, #188]	; (1c04c <att_chan_new+0x114>)
   1bf90:	6083      	str	r3, [r0, #8]
	k_fifo_init(&chan->tx_queue);
   1bf92:	3098      	adds	r0, #152	; 0x98
	z_impl_k_queue_init(queue);
   1bf94:	f010 f89c 	bl	2c0d0 <z_impl_k_queue_init>
	atomic_set(chan->flags, flags);
   1bf98:	687b      	ldr	r3, [r7, #4]
   1bf9a:	3390      	adds	r3, #144	; 0x90
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1bf9c:	f3bf 8f5b 	dmb	ish
   1bfa0:	e853 2f00 	ldrex	r2, [r3]
   1bfa4:	e843 6100 	strex	r1, r6, [r3]
   1bfa8:	2900      	cmp	r1, #0
   1bfaa:	d1f9      	bne.n	1bfa0 <att_chan_new+0x68>
   1bfac:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   1bfb0:	687b      	ldr	r3, [r7, #4]
   1bfb2:	601d      	str	r5, [r3, #0]
	att_chan_attach(att, chan);
   1bfb4:	6879      	ldr	r1, [r7, #4]
   1bfb6:	4628      	mov	r0, r5
   1bfb8:	f00c f8b9 	bl	2812e <att_chan_attach>

	return chan;
   1bfbc:	687c      	ldr	r4, [r7, #4]
}
   1bfbe:	4620      	mov	r0, r4
   1bfc0:	370c      	adds	r7, #12
   1bfc2:	46bd      	mov	sp, r7
   1bfc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   1bfc6:	682d      	ldr	r5, [r5, #0]
   1bfc8:	466e      	mov	r6, sp
   1bfca:	b088      	sub	sp, #32
   1bfcc:	466b      	mov	r3, sp
   1bfce:	f113 0210 	adds.w	r2, r3, #16
   1bfd2:	d031      	beq.n	1c038 <att_chan_new+0x100>
   1bfd4:	210c      	movs	r1, #12
   1bfd6:	b14a      	cbz	r2, 1bfec <att_chan_new+0xb4>
   1bfd8:	4608      	mov	r0, r1
   1bfda:	2904      	cmp	r1, #4
   1bfdc:	dd03      	ble.n	1bfe6 <att_chan_new+0xae>
   1bfde:	f8df c070 	ldr.w	ip, [pc, #112]	; 1c050 <att_chan_new+0x118>
   1bfe2:	f8c3 c014 	str.w	ip, [r3, #20]
   1bfe6:	2808      	cmp	r0, #8
   1bfe8:	dd00      	ble.n	1bfec <att_chan_new+0xb4>
   1bfea:	619d      	str	r5, [r3, #24]
   1bfec:	290b      	cmp	r1, #11
   1bfee:	dd26      	ble.n	1c03e <att_chan_new+0x106>
   1bff0:	250c      	movs	r5, #12
   1bff2:	b13a      	cbz	r2, 1c004 <att_chan_new+0xcc>
   1bff4:	2103      	movs	r1, #3
   1bff6:	7039      	strb	r1, [r7, #0]
   1bff8:	2100      	movs	r1, #0
   1bffa:	7079      	strb	r1, [r7, #1]
   1bffc:	70b9      	strb	r1, [r7, #2]
   1bffe:	70f9      	strb	r1, [r7, #3]
   1c000:	6838      	ldr	r0, [r7, #0]
   1c002:	6118      	str	r0, [r3, #16]
   1c004:	2100      	movs	r1, #0
   1c006:	f36f 0100 	bfc	r1, #0, #1
   1c00a:	f36f 0141 	bfc	r1, #1, #1
   1c00e:	f36f 0182 	bfc	r1, #2, #1
   1c012:	f36f 01c5 	bfc	r1, #3, #3
   1c016:	2302      	movs	r3, #2
   1c018:	f363 1188 	bfi	r1, r3, #6, #3
   1c01c:	f405 757b 	and.w	r5, r5, #1004	; 0x3ec
   1c020:	f365 2152 	bfi	r1, r5, #9, #10
   1c024:	f36f 41de 	bfc	r1, #19, #12
   1c028:	f36f 71df 	bfc	r1, #31, #1
   1c02c:	2300      	movs	r3, #0
   1c02e:	4809      	ldr	r0, [pc, #36]	; (1c054 <att_chan_new+0x11c>)
   1c030:	f00a fe11 	bl	26c56 <z_impl_z_log_msg_static_create>
   1c034:	46b5      	mov	sp, r6
		return NULL;
   1c036:	e7c2      	b.n	1bfbe <att_chan_new+0x86>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   1c038:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1c03c:	e7cb      	b.n	1bfd6 <att_chan_new+0x9e>
   1c03e:	f06f 051b 	mvn.w	r5, #27
   1c042:	e7d6      	b.n	1bff2 <att_chan_new+0xba>
			return NULL;
   1c044:	2400      	movs	r4, #0
   1c046:	e7ba      	b.n	1bfbe <att_chan_new+0x86>
   1c048:	20000a7c 	.word	0x20000a7c
   1c04c:	200007c8 	.word	0x200007c8
   1c050:	0002eecc 	.word	0x0002eecc
   1c054:	0002d0a4 	.word	0x0002d0a4

0001c058 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1c058:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c05a:	b083      	sub	sp, #12
   1c05c:	af00      	add	r7, sp, #0
   1c05e:	4606      	mov	r6, r0
   1c060:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1c062:	2200      	movs	r2, #0
   1c064:	2300      	movs	r3, #0
   1c066:	1d39      	adds	r1, r7, #4
   1c068:	4830      	ldr	r0, [pc, #192]	; (1c12c <bt_att_accept+0xd4>)
   1c06a:	f007 fd95 	bl	23b98 <k_mem_slab_alloc>
   1c06e:	b9e0      	cbnz	r0, 1c0aa <bt_att_accept+0x52>
   1c070:	4605      	mov	r5, r0
	return z_impl_z_current_get();
   1c072:	f008 fd8d 	bl	24b90 <z_impl_z_current_get>
		LOG_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	att_handle_rsp_thread = k_current_get();
   1c076:	4b2e      	ldr	r3, [pc, #184]	; (1c130 <bt_att_accept+0xd8>)
   1c078:	6018      	str	r0, [r3, #0]

	(void)memset(att, 0, sizeof(*att));
   1c07a:	222c      	movs	r2, #44	; 0x2c
   1c07c:	2100      	movs	r1, #0
   1c07e:	6878      	ldr	r0, [r7, #4]
   1c080:	f00b fa53 	bl	2752a <memset>
	att->conn = conn;
   1c084:	687b      	ldr	r3, [r7, #4]
   1c086:	601e      	str	r6, [r3, #0]
	sys_slist_init(&att->reqs);
   1c088:	6878      	ldr	r0, [r7, #4]
	list->head = NULL;
   1c08a:	2100      	movs	r1, #0
   1c08c:	6041      	str	r1, [r0, #4]
	list->tail = NULL;
   1c08e:	6081      	str	r1, [r0, #8]
	list->head = NULL;
   1c090:	6241      	str	r1, [r0, #36]	; 0x24
	list->tail = NULL;
   1c092:	6281      	str	r1, [r0, #40]	; 0x28
#if defined(CONFIG_BT_EATT)
	k_work_init_delayable(&att->eatt.connection_work,
			      att_enhanced_connection_work_handler);
#endif /* CONFIG_BT_EATT */

	chan = att_chan_new(att, 0);
   1c094:	f7ff ff50 	bl	1bf38 <att_chan_new>
	if (!chan) {
   1c098:	4603      	mov	r3, r0
   1c09a:	2800      	cmp	r0, #0
   1c09c:	d043      	beq.n	1c126 <bt_att_accept+0xce>
		return -ENOMEM;
	}

	*ch = &chan->chan.chan;
   1c09e:	3304      	adds	r3, #4
   1c0a0:	6023      	str	r3, [r4, #0]

	return 0;
}
   1c0a2:	4628      	mov	r0, r5
   1c0a4:	370c      	adds	r7, #12
   1c0a6:	46bd      	mov	sp, r7
   1c0a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("No available ATT context for conn %p", conn);
   1c0aa:	466d      	mov	r5, sp
   1c0ac:	b088      	sub	sp, #32
   1c0ae:	466b      	mov	r3, sp
   1c0b0:	f113 0210 	adds.w	r2, r3, #16
   1c0b4:	d031      	beq.n	1c11a <bt_att_accept+0xc2>
   1c0b6:	210c      	movs	r1, #12
   1c0b8:	b13a      	cbz	r2, 1c0ca <bt_att_accept+0x72>
   1c0ba:	4608      	mov	r0, r1
   1c0bc:	2904      	cmp	r1, #4
   1c0be:	dd01      	ble.n	1c0c4 <bt_att_accept+0x6c>
   1c0c0:	4c1c      	ldr	r4, [pc, #112]	; (1c134 <bt_att_accept+0xdc>)
   1c0c2:	615c      	str	r4, [r3, #20]
   1c0c4:	2808      	cmp	r0, #8
   1c0c6:	dd00      	ble.n	1c0ca <bt_att_accept+0x72>
   1c0c8:	619e      	str	r6, [r3, #24]
   1c0ca:	290b      	cmp	r1, #11
   1c0cc:	dd28      	ble.n	1c120 <bt_att_accept+0xc8>
   1c0ce:	240c      	movs	r4, #12
   1c0d0:	b13a      	cbz	r2, 1c0e2 <bt_att_accept+0x8a>
   1c0d2:	2103      	movs	r1, #3
   1c0d4:	7039      	strb	r1, [r7, #0]
   1c0d6:	2100      	movs	r1, #0
   1c0d8:	7079      	strb	r1, [r7, #1]
   1c0da:	70b9      	strb	r1, [r7, #2]
   1c0dc:	70f9      	strb	r1, [r7, #3]
   1c0de:	6838      	ldr	r0, [r7, #0]
   1c0e0:	6118      	str	r0, [r3, #16]
   1c0e2:	2100      	movs	r1, #0
   1c0e4:	f36f 0100 	bfc	r1, #0, #1
   1c0e8:	f36f 0141 	bfc	r1, #1, #1
   1c0ec:	f36f 0182 	bfc	r1, #2, #1
   1c0f0:	f36f 01c5 	bfc	r1, #3, #3
   1c0f4:	2301      	movs	r3, #1
   1c0f6:	f363 1188 	bfi	r1, r3, #6, #3
   1c0fa:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1c0fe:	f364 2152 	bfi	r1, r4, #9, #10
   1c102:	f36f 41de 	bfc	r1, #19, #12
   1c106:	f36f 71df 	bfc	r1, #31, #1
   1c10a:	2300      	movs	r3, #0
   1c10c:	480a      	ldr	r0, [pc, #40]	; (1c138 <bt_att_accept+0xe0>)
   1c10e:	f00a fda2 	bl	26c56 <z_impl_z_log_msg_static_create>
   1c112:	46ad      	mov	sp, r5
		return -ENOMEM;
   1c114:	f06f 050b 	mvn.w	r5, #11
   1c118:	e7c3      	b.n	1c0a2 <bt_att_accept+0x4a>
		LOG_ERR("No available ATT context for conn %p", conn);
   1c11a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1c11e:	e7cb      	b.n	1c0b8 <bt_att_accept+0x60>
   1c120:	f06f 041b 	mvn.w	r4, #27
   1c124:	e7d4      	b.n	1c0d0 <bt_att_accept+0x78>
		return -ENOMEM;
   1c126:	f06f 050b 	mvn.w	r5, #11
   1c12a:	e7ba      	b.n	1c0a2 <bt_att_accept+0x4a>
   1c12c:	20000a60 	.word	0x20000a60
   1c130:	20008038 	.word	0x20008038
   1c134:	0002eef4 	.word	0x0002eef4
   1c138:	0002d0a4 	.word	0x0002d0a4

0001c13c <bt_att_released>:
{
   1c13c:	b500      	push	{lr}
   1c13e:	b083      	sub	sp, #12
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1c140:	3804      	subs	r0, #4
   1c142:	9001      	str	r0, [sp, #4]
	k_mem_slab_free(&chan_slab, (void **)&chan);
   1c144:	a901      	add	r1, sp, #4
   1c146:	4803      	ldr	r0, [pc, #12]	; (1c154 <bt_att_released+0x18>)
   1c148:	f00f fe91 	bl	2be6e <k_mem_slab_free>
}
   1c14c:	b003      	add	sp, #12
   1c14e:	f85d fb04 	ldr.w	pc, [sp], #4
   1c152:	bf00      	nop
   1c154:	20000a7c 	.word	0x20000a7c

0001c158 <tx_meta_data_free>:
{
   1c158:	b510      	push	{r4, lr}
   1c15a:	4604      	mov	r4, r0
	(void)memset(data, 0, sizeof(*data));
   1c15c:	2214      	movs	r2, #20
   1c15e:	2100      	movs	r1, #0
   1c160:	f00b f9e3 	bl	2752a <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   1c164:	4621      	mov	r1, r4
   1c166:	4802      	ldr	r0, [pc, #8]	; (1c170 <tx_meta_data_free+0x18>)
   1c168:	f00f ffbe 	bl	2c0e8 <k_queue_append>
}
   1c16c:	bd10      	pop	{r4, pc}
   1c16e:	bf00      	nop
   1c170:	20000af4 	.word	0x20000af4

0001c174 <chan_send>:
{
   1c174:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c178:	b08b      	sub	sp, #44	; 0x2c
   1c17a:	4605      	mov	r5, r0
   1c17c:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1c17e:	698f      	ldr	r7, [r1, #24]
	hdr = (void *)buf->data;
   1c180:	68ce      	ldr	r6, [r1, #12]
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   1c182:	2102      	movs	r1, #2
   1c184:	3090      	adds	r0, #144	; 0x90
   1c186:	f00b ffe6 	bl	28156 <atomic_test_bit>
   1c18a:	2800      	cmp	r0, #0
   1c18c:	d05a      	beq.n	1c244 <chan_send+0xd0>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1c18e:	7833      	ldrb	r3, [r6, #0]
   1c190:	2bd2      	cmp	r3, #210	; 0xd2
   1c192:	d023      	beq.n	1c1dc <chan_send+0x68>
	state->offset = net_buf_simple_headroom(buf);
   1c194:	f104 000c 	add.w	r0, r4, #12
   1c198:	f00d fee1 	bl	29f5e <net_buf_simple_headroom>
   1c19c:	4606      	mov	r6, r0
   1c19e:	f8ad 000c 	strh.w	r0, [sp, #12]
	state->len = buf->len;
   1c1a2:	f8b4 8010 	ldrh.w	r8, [r4, #16]
   1c1a6:	f8ad 800e 	strh.w	r8, [sp, #14]
	data->att_chan = chan;
   1c1aa:	603d      	str	r5, [r7, #0]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1c1ac:	682b      	ldr	r3, [r5, #0]
   1c1ae:	681d      	ldr	r5, [r3, #0]
   1c1b0:	4620      	mov	r0, r4
   1c1b2:	f7ff fe35 	bl	1be20 <att_cb>
   1c1b6:	4603      	mov	r3, r0
   1c1b8:	9700      	str	r7, [sp, #0]
   1c1ba:	4622      	mov	r2, r4
   1c1bc:	2104      	movs	r1, #4
   1c1be:	4628      	mov	r0, r5
   1c1c0:	f00b febe 	bl	27f40 <bt_l2cap_send_cb>
	if (err) {
   1c1c4:	4681      	mov	r9, r0
   1c1c6:	b128      	cbz	r0, 1c1d4 <chan_send+0x60>
	buf->data = buf->__buf + state->offset;
   1c1c8:	6963      	ldr	r3, [r4, #20]
   1c1ca:	fa13 f686 	uxtah	r6, r3, r6
   1c1ce:	60e6      	str	r6, [r4, #12]
	buf->len = state->len;
   1c1d0:	f8a4 8010 	strh.w	r8, [r4, #16]
}
   1c1d4:	4648      	mov	r0, r9
   1c1d6:	b00b      	add	sp, #44	; 0x2c
   1c1d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = bt_smp_sign(chan->att->conn, buf);
   1c1dc:	682b      	ldr	r3, [r5, #0]
   1c1de:	4621      	mov	r1, r4
   1c1e0:	6818      	ldr	r0, [r3, #0]
   1c1e2:	f00d fd03 	bl	29bec <bt_smp_sign>
		if (err) {
   1c1e6:	4681      	mov	r9, r0
   1c1e8:	2800      	cmp	r0, #0
   1c1ea:	d0d3      	beq.n	1c194 <chan_send+0x20>
			LOG_ERR("Error signing data");
   1c1ec:	4b17      	ldr	r3, [pc, #92]	; (1c24c <chan_send+0xd8>)
   1c1ee:	9309      	str	r3, [sp, #36]	; 0x24
   1c1f0:	2302      	movs	r3, #2
   1c1f2:	f88d 3008 	strb.w	r3, [sp, #8]
   1c1f6:	2300      	movs	r3, #0
   1c1f8:	f88d 3009 	strb.w	r3, [sp, #9]
   1c1fc:	f88d 300a 	strb.w	r3, [sp, #10]
   1c200:	f88d 300b 	strb.w	r3, [sp, #11]
   1c204:	9a02      	ldr	r2, [sp, #8]
   1c206:	9208      	str	r2, [sp, #32]
   1c208:	4619      	mov	r1, r3
   1c20a:	f363 0100 	bfi	r1, r3, #0, #1
   1c20e:	f363 0141 	bfi	r1, r3, #1, #1
   1c212:	f363 0182 	bfi	r1, r3, #2, #1
   1c216:	f363 01c5 	bfi	r1, r3, #3, #3
   1c21a:	2201      	movs	r2, #1
   1c21c:	f362 1188 	bfi	r1, r2, #6, #3
   1c220:	2208      	movs	r2, #8
   1c222:	f362 2152 	bfi	r1, r2, #9, #10
   1c226:	f363 41de 	bfi	r1, r3, #19, #12
   1c22a:	f363 71df 	bfi	r1, r3, #31, #1
   1c22e:	aa08      	add	r2, sp, #32
   1c230:	4807      	ldr	r0, [pc, #28]	; (1c250 <chan_send+0xdc>)
   1c232:	f00a fd10 	bl	26c56 <z_impl_z_log_msg_static_create>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   1c236:	69a0      	ldr	r0, [r4, #24]
   1c238:	f7ff ff8e 	bl	1c158 <tx_meta_data_free>
			net_buf_unref(buf);
   1c23c:	4620      	mov	r0, r4
   1c23e:	f00d fe05 	bl	29e4c <net_buf_unref>
			return err;
   1c242:	e7c7      	b.n	1c1d4 <chan_send+0x60>
		return -EINVAL;
   1c244:	f06f 0915 	mvn.w	r9, #21
   1c248:	e7c4      	b.n	1c1d4 <chan_send+0x60>
   1c24a:	bf00      	nop
   1c24c:	0002ef1c 	.word	0x0002ef1c
   1c250:	0002d0a4 	.word	0x0002d0a4

0001c254 <read_group_cb>:
{
   1c254:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c256:	b085      	sub	sp, #20
   1c258:	4605      	mov	r5, r0
   1c25a:	460e      	mov	r6, r1
   1c25c:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1c25e:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1c260:	2300      	movs	r3, #0
   1c262:	f88d 3008 	strb.w	r3, [sp, #8]
   1c266:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1c26a:	f8ad 300a 	strh.w	r3, [sp, #10]
   1c26e:	a902      	add	r1, sp, #8
   1c270:	6800      	ldr	r0, [r0, #0]
   1c272:	f00b f9ab 	bl	275cc <bt_uuid_cmp>
   1c276:	b158      	cbz	r0, 1c290 <read_group_cb+0x3c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1c278:	2300      	movs	r3, #0
   1c27a:	f88d 300c 	strb.w	r3, [sp, #12]
   1c27e:	f642 0301 	movw	r3, #10241	; 0x2801
   1c282:	f8ad 300e 	strh.w	r3, [sp, #14]
   1c286:	a903      	add	r1, sp, #12
   1c288:	6828      	ldr	r0, [r5, #0]
   1c28a:	f00b f99f 	bl	275cc <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1c28e:	bb28      	cbnz	r0, 1c2dc <read_group_cb+0x88>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1c290:	6861      	ldr	r1, [r4, #4]
   1c292:	6828      	ldr	r0, [r5, #0]
   1c294:	f00b f99a 	bl	275cc <bt_uuid_cmp>
   1c298:	bb40      	cbnz	r0, 1c2ec <read_group_cb+0x98>
	if (data->rsp->len &&
   1c29a:	68e3      	ldr	r3, [r4, #12]
   1c29c:	781a      	ldrb	r2, [r3, #0]
   1c29e:	b12a      	cbz	r2, 1c2ac <read_group_cb+0x58>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1c2a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1c2a2:	68a1      	ldr	r1, [r4, #8]
   1c2a4:	8a09      	ldrh	r1, [r1, #16]
   1c2a6:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1c2a8:	4293      	cmp	r3, r2
   1c2aa:	db24      	blt.n	1c2f6 <read_group_cb+0xa2>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1c2ac:	68a0      	ldr	r0, [r4, #8]
	return net_buf_simple_add(&buf->b, len);
   1c2ae:	2104      	movs	r1, #4
   1c2b0:	300c      	adds	r0, #12
   1c2b2:	f00d fe12 	bl	29eda <net_buf_simple_add>
   1c2b6:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1c2b8:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1c2ba:	6923      	ldr	r3, [r4, #16]
   1c2bc:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1c2be:	9401      	str	r4, [sp, #4]
   1c2c0:	4b10      	ldr	r3, [pc, #64]	; (1c304 <read_group_cb+0xb0>)
   1c2c2:	9300      	str	r3, [sp, #0]
   1c2c4:	2300      	movs	r3, #0
   1c2c6:	68a2      	ldr	r2, [r4, #8]
   1c2c8:	4629      	mov	r1, r5
   1c2ca:	4638      	mov	r0, r7
   1c2cc:	f00c f966 	bl	2859c <att_chan_read>
	if (read < 0) {
   1c2d0:	2800      	cmp	r0, #0
   1c2d2:	db12      	blt.n	1c2fa <read_group_cb+0xa6>
	if (!data->group) {
   1c2d4:	6923      	ldr	r3, [r4, #16]
   1c2d6:	b193      	cbz	r3, 1c2fe <read_group_cb+0xaa>
	return BT_GATT_ITER_CONTINUE;
   1c2d8:	2001      	movs	r0, #1
   1c2da:	e00a      	b.n	1c2f2 <read_group_cb+0x9e>
		if (data->group &&
   1c2dc:	6923      	ldr	r3, [r4, #16]
   1c2de:	b11b      	cbz	r3, 1c2e8 <read_group_cb+0x94>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   1c2e0:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   1c2e2:	42b2      	cmp	r2, r6
   1c2e4:	d200      	bcs.n	1c2e8 <read_group_cb+0x94>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1c2e6:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1c2e8:	2001      	movs	r0, #1
   1c2ea:	e002      	b.n	1c2f2 <read_group_cb+0x9e>
		data->group = NULL;
   1c2ec:	2300      	movs	r3, #0
   1c2ee:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1c2f0:	2001      	movs	r0, #1
}
   1c2f2:	b005      	add	sp, #20
   1c2f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ITER_STOP;
   1c2f6:	2000      	movs	r0, #0
   1c2f8:	e7fb      	b.n	1c2f2 <read_group_cb+0x9e>
		return BT_GATT_ITER_STOP;
   1c2fa:	2000      	movs	r0, #0
   1c2fc:	e7f9      	b.n	1c2f2 <read_group_cb+0x9e>
		return BT_GATT_ITER_STOP;
   1c2fe:	2000      	movs	r0, #0
   1c300:	e7f7      	b.n	1c2f2 <read_group_cb+0x9e>
   1c302:	bf00      	nop
   1c304:	00028101 	.word	0x00028101

0001c308 <read_type_cb>:
{
   1c308:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c30c:	b083      	sub	sp, #12
   1c30e:	4606      	mov	r6, r0
   1c310:	4688      	mov	r8, r1
   1c312:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1c314:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1c316:	687d      	ldr	r5, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1c318:	6851      	ldr	r1, [r2, #4]
   1c31a:	6800      	ldr	r0, [r0, #0]
   1c31c:	f00b f956 	bl	275cc <bt_uuid_cmp>
   1c320:	b120      	cbz	r0, 1c32c <read_type_cb+0x24>
		return BT_GATT_ITER_CONTINUE;
   1c322:	2501      	movs	r5, #1
}
   1c324:	4628      	mov	r0, r5
   1c326:	b003      	add	sp, #12
   1c328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1c32c:	2295      	movs	r2, #149	; 0x95
   1c32e:	4631      	mov	r1, r6
   1c330:	4628      	mov	r0, r5
   1c332:	f00d fa1c 	bl	2976e <bt_gatt_check_perm>
   1c336:	4605      	mov	r5, r0
   1c338:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1c33a:	b130      	cbz	r0, 1c34a <read_type_cb+0x42>
		if (data->rsp->len) {
   1c33c:	68e3      	ldr	r3, [r4, #12]
   1c33e:	781b      	ldrb	r3, [r3, #0]
   1c340:	b10b      	cbz	r3, 1c346 <read_type_cb+0x3e>
			data->err = 0x00;
   1c342:	2300      	movs	r3, #0
   1c344:	7523      	strb	r3, [r4, #20]
		return BT_GATT_ITER_STOP;
   1c346:	2500      	movs	r5, #0
   1c348:	e7ec      	b.n	1c324 <read_type_cb+0x1c>
	data->err = 0x00;
   1c34a:	f04f 0900 	mov.w	r9, #0
   1c34e:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1c352:	68a0      	ldr	r0, [r4, #8]
   1c354:	f00d fda1 	bl	29e9a <net_buf_frag_last>
   1c358:	2102      	movs	r1, #2
   1c35a:	300c      	adds	r0, #12
   1c35c:	f00d fdbd 	bl	29eda <net_buf_simple_add>
   1c360:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   1c362:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1c366:	9401      	str	r4, [sp, #4]
   1c368:	4b10      	ldr	r3, [pc, #64]	; (1c3ac <read_type_cb+0xa4>)
   1c36a:	9300      	str	r3, [sp, #0]
   1c36c:	464b      	mov	r3, r9
   1c36e:	68a2      	ldr	r2, [r4, #8]
   1c370:	4631      	mov	r1, r6
   1c372:	4638      	mov	r0, r7
   1c374:	f00c f912 	bl	2859c <att_chan_read>
	if (read < 0) {
   1c378:	2800      	cmp	r0, #0
   1c37a:	db06      	blt.n	1c38a <read_type_cb+0x82>
	if (!data->item) {
   1c37c:	6923      	ldr	r3, [r4, #16]
   1c37e:	2b00      	cmp	r3, #0
   1c380:	d0d0      	beq.n	1c324 <read_type_cb+0x1c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1c382:	8d7d      	ldrh	r5, [r7, #42]	; 0x2a
   1c384:	68a3      	ldr	r3, [r4, #8]
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
   1c386:	2200      	movs	r2, #0

	while (buf) {
   1c388:	e006      	b.n	1c398 <read_type_cb+0x90>
		data->err = err_to_att(read);
   1c38a:	f00b fe9d 	bl	280c8 <err_to_att>
   1c38e:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1c390:	e7c8      	b.n	1c324 <read_type_cb+0x1c>
		bytes += buf->len;
   1c392:	8a19      	ldrh	r1, [r3, #16]
   1c394:	440a      	add	r2, r1
		buf = buf->frags;
   1c396:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   1c398:	2b00      	cmp	r3, #0
   1c39a:	d1fa      	bne.n	1c392 <read_type_cb+0x8a>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1c39c:	1aad      	subs	r5, r5, r2
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1c39e:	68e3      	ldr	r3, [r4, #12]
   1c3a0:	781b      	ldrb	r3, [r3, #0]
   1c3a2:	429d      	cmp	r5, r3
   1c3a4:	bf94      	ite	ls
   1c3a6:	2500      	movls	r5, #0
   1c3a8:	2501      	movhi	r5, #1
   1c3aa:	e7bb      	b.n	1c324 <read_type_cb+0x1c>
   1c3ac:	000280d9 	.word	0x000280d9

0001c3b0 <find_type_cb>:
{
   1c3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c3b4:	b097      	sub	sp, #92	; 0x5c
   1c3b6:	af02      	add	r7, sp, #8
   1c3b8:	4605      	mov	r5, r0
   1c3ba:	460e      	mov	r6, r1
   1c3bc:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1c3be:	f8d2 8000 	ldr.w	r8, [r2]
	struct bt_conn *conn = chan->chan.chan.conn;
   1c3c2:	f8d8 9004 	ldr.w	r9, [r8, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1c3c6:	2300      	movs	r3, #0
   1c3c8:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
   1c3cc:	f642 0301 	movw	r3, #10241	; 0x2801
   1c3d0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
   1c3d4:	f107 0148 	add.w	r1, r7, #72	; 0x48
   1c3d8:	6800      	ldr	r0, [r0, #0]
   1c3da:	f00b f8f7 	bl	275cc <bt_uuid_cmp>
   1c3de:	b930      	cbnz	r0, 1c3ee <find_type_cb+0x3e>
	data->group = NULL;
   1c3e0:	2300      	movs	r3, #0
   1c3e2:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   1c3e4:	2001      	movs	r0, #1
}
   1c3e6:	3754      	adds	r7, #84	; 0x54
   1c3e8:	46bd      	mov	sp, r7
   1c3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1c3ee:	2300      	movs	r3, #0
   1c3f0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
   1c3f4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1c3f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
   1c3fc:	f107 014c 	add.w	r1, r7, #76	; 0x4c
   1c400:	6828      	ldr	r0, [r5, #0]
   1c402:	f00b f8e3 	bl	275cc <bt_uuid_cmp>
   1c406:	b928      	cbnz	r0, 1c414 <find_type_cb+0x64>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1c408:	f8b8 c02a 	ldrh.w	ip, [r8, #42]	; 0x2a
   1c40c:	6860      	ldr	r0, [r4, #4]
   1c40e:	4603      	mov	r3, r0
	size_t bytes = 0;
   1c410:	2200      	movs	r2, #0
	while (buf) {
   1c412:	e00a      	b.n	1c42a <find_type_cb+0x7a>
		if (data->group &&
   1c414:	68a3      	ldr	r3, [r4, #8]
   1c416:	b11b      	cbz	r3, 1c420 <find_type_cb+0x70>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   1c418:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   1c41a:	42b2      	cmp	r2, r6
   1c41c:	d200      	bcs.n	1c420 <find_type_cb+0x70>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1c41e:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1c420:	2001      	movs	r0, #1
   1c422:	e7e0      	b.n	1c3e6 <find_type_cb+0x36>
		bytes += buf->len;
   1c424:	8a19      	ldrh	r1, [r3, #16]
   1c426:	440a      	add	r2, r1
		buf = buf->frags;
   1c428:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   1c42a:	2b00      	cmp	r3, #0
   1c42c:	d1fa      	bne.n	1c424 <find_type_cb+0x74>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1c42e:	ebac 0302 	sub.w	r3, ip, r2
   1c432:	2b03      	cmp	r3, #3
   1c434:	d801      	bhi.n	1c43a <find_type_cb+0x8a>
		return BT_GATT_ITER_STOP;
   1c436:	2000      	movs	r0, #0
   1c438:	e7d5      	b.n	1c3e6 <find_type_cb+0x36>
	frag = net_buf_frag_last(data->buf);
   1c43a:	f00d fd2e 	bl	29e9a <net_buf_frag_last>
   1c43e:	6078      	str	r0, [r7, #4]
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1c440:	f8b8 a02a 	ldrh.w	sl, [r8, #42]	; 0x2a
   1c444:	6863      	ldr	r3, [r4, #4]
	size_t bytes = 0;
   1c446:	2200      	movs	r2, #0
	while (buf) {
   1c448:	e002      	b.n	1c450 <find_type_cb+0xa0>
		bytes += buf->len;
   1c44a:	8a19      	ldrh	r1, [r3, #16]
   1c44c:	440a      	add	r2, r1
		buf = buf->frags;
   1c44e:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   1c450:	2b00      	cmp	r3, #0
   1c452:	d1fa      	bne.n	1c44a <find_type_cb+0x9a>
   1c454:	ebaa 0a02 	sub.w	sl, sl, r2
	return net_buf_simple_tailroom(&buf->b);
   1c458:	687b      	ldr	r3, [r7, #4]
   1c45a:	f103 0b0c 	add.w	fp, r3, #12
   1c45e:	4658      	mov	r0, fp
   1c460:	f00d fd81 	bl	29f66 <net_buf_simple_tailroom>
   1c464:	4582      	cmp	sl, r0
   1c466:	d25c      	bcs.n	1c522 <find_type_cb+0x172>
   1c468:	f8b8 002a 	ldrh.w	r0, [r8, #42]	; 0x2a
   1c46c:	6863      	ldr	r3, [r4, #4]
	size_t bytes = 0;
   1c46e:	2200      	movs	r2, #0
	while (buf) {
   1c470:	e002      	b.n	1c478 <find_type_cb+0xc8>
		bytes += buf->len;
   1c472:	8a19      	ldrh	r1, [r3, #16]
   1c474:	440a      	add	r2, r1
		buf = buf->frags;
   1c476:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   1c478:	2b00      	cmp	r3, #0
   1c47a:	d1fa      	bne.n	1c472 <find_type_cb+0xc2>
   1c47c:	1a80      	subs	r0, r0, r2
	if (!len) {
   1c47e:	2800      	cmp	r0, #0
   1c480:	d053      	beq.n	1c52a <find_type_cb+0x17a>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1c482:	f8d5 8004 	ldr.w	r8, [r5, #4]
   1c486:	2300      	movs	r3, #0
   1c488:	9300      	str	r3, [sp, #0]
   1c48a:	2310      	movs	r3, #16
   1c48c:	f107 0238 	add.w	r2, r7, #56	; 0x38
   1c490:	4629      	mov	r1, r5
   1c492:	4648      	mov	r0, r9
   1c494:	47c0      	blx	r8
	if (read < 0) {
   1c496:	1e05      	subs	r5, r0, #0
   1c498:	dba2      	blt.n	1c3e0 <find_type_cb+0x30>
	if (read != data->value_len) {
   1c49a:	7c22      	ldrb	r2, [r4, #16]
   1c49c:	42aa      	cmp	r2, r5
   1c49e:	f000 80aa 	beq.w	1c5f6 <find_type_cb+0x246>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1c4a2:	68e1      	ldr	r1, [r4, #12]
   1c4a4:	f107 0024 	add.w	r0, r7, #36	; 0x24
   1c4a8:	f00b f8ae 	bl	27608 <bt_uuid_create>
   1c4ac:	2800      	cmp	r0, #0
   1c4ae:	d153      	bne.n	1c558 <find_type_cb+0x1a8>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   1c4b0:	7c20      	ldrb	r0, [r4, #16]
   1c4b2:	466e      	mov	r6, sp
   1c4b4:	b088      	sub	sp, #32
   1c4b6:	ab02      	add	r3, sp, #8
   1c4b8:	f113 0210 	adds.w	r2, r3, #16
   1c4bc:	d046      	beq.n	1c54c <find_type_cb+0x19c>
   1c4be:	210c      	movs	r1, #12
   1c4c0:	b14a      	cbz	r2, 1c4d6 <find_type_cb+0x126>
   1c4c2:	460d      	mov	r5, r1
   1c4c4:	2904      	cmp	r1, #4
   1c4c6:	dd03      	ble.n	1c4d0 <find_type_cb+0x120>
   1c4c8:	f8df c158 	ldr.w	ip, [pc, #344]	; 1c624 <find_type_cb+0x274>
   1c4cc:	f8c3 c014 	str.w	ip, [r3, #20]
   1c4d0:	2d08      	cmp	r5, #8
   1c4d2:	dd00      	ble.n	1c4d6 <find_type_cb+0x126>
   1c4d4:	6198      	str	r0, [r3, #24]
   1c4d6:	290b      	cmp	r1, #11
   1c4d8:	dd3b      	ble.n	1c552 <find_type_cb+0x1a2>
   1c4da:	250c      	movs	r5, #12
   1c4dc:	b13a      	cbz	r2, 1c4ee <find_type_cb+0x13e>
   1c4de:	2103      	movs	r1, #3
   1c4e0:	7439      	strb	r1, [r7, #16]
   1c4e2:	2100      	movs	r1, #0
   1c4e4:	7479      	strb	r1, [r7, #17]
   1c4e6:	74b9      	strb	r1, [r7, #18]
   1c4e8:	74f9      	strb	r1, [r7, #19]
   1c4ea:	6938      	ldr	r0, [r7, #16]
   1c4ec:	6118      	str	r0, [r3, #16]
   1c4ee:	2100      	movs	r1, #0
   1c4f0:	f36f 0100 	bfc	r1, #0, #1
   1c4f4:	f36f 0141 	bfc	r1, #1, #1
   1c4f8:	f36f 0182 	bfc	r1, #2, #1
   1c4fc:	f36f 01c5 	bfc	r1, #3, #3
   1c500:	2302      	movs	r3, #2
   1c502:	f363 1188 	bfi	r1, r3, #6, #3
   1c506:	f405 757b 	and.w	r5, r5, #1004	; 0x3ec
   1c50a:	f365 2152 	bfi	r1, r5, #9, #10
   1c50e:	f36f 41de 	bfc	r1, #19, #12
   1c512:	f36f 71df 	bfc	r1, #31, #1
   1c516:	2300      	movs	r3, #0
   1c518:	4843      	ldr	r0, [pc, #268]	; (1c628 <find_type_cb+0x278>)
   1c51a:	f00a fb9c 	bl	26c56 <z_impl_z_log_msg_static_create>
   1c51e:	46b5      	mov	sp, r6
			goto skip;
   1c520:	e75e      	b.n	1c3e0 <find_type_cb+0x30>
	return net_buf_simple_tailroom(&buf->b);
   1c522:	4658      	mov	r0, fp
   1c524:	f00d fd1f 	bl	29f66 <net_buf_simple_tailroom>
   1c528:	e7a9      	b.n	1c47e <find_type_cb+0xce>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1c52a:	6863      	ldr	r3, [r4, #4]
   1c52c:	7a98      	ldrb	r0, [r3, #10]
   1c52e:	f002 fadd 	bl	1eaec <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1c532:	2200      	movs	r2, #0
   1c534:	2300      	movs	r3, #0
   1c536:	f00d fc42 	bl	29dbe <net_buf_alloc_fixed>
		if (!frag) {
   1c53a:	6078      	str	r0, [r7, #4]
   1c53c:	2800      	cmp	r0, #0
   1c53e:	f43f af52 	beq.w	1c3e6 <find_type_cb+0x36>
		net_buf_frag_add(data->buf, frag);
   1c542:	6879      	ldr	r1, [r7, #4]
   1c544:	6860      	ldr	r0, [r4, #4]
   1c546:	f00d fcb9 	bl	29ebc <net_buf_frag_add>
   1c54a:	e79a      	b.n	1c482 <find_type_cb+0xd2>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   1c54c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1c550:	e7b6      	b.n	1c4c0 <find_type_cb+0x110>
   1c552:	f06f 051b 	mvn.w	r5, #27
   1c556:	e7c1      	b.n	1c4dc <find_type_cb+0x12c>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1c558:	b2ea      	uxtb	r2, r5
   1c55a:	f107 0138 	add.w	r1, r7, #56	; 0x38
   1c55e:	f107 0010 	add.w	r0, r7, #16
   1c562:	f00b f851 	bl	27608 <bt_uuid_create>
   1c566:	2800      	cmp	r0, #0
   1c568:	d13d      	bne.n	1c5e6 <find_type_cb+0x236>
			LOG_WRN("Unable to create UUID: size %d", read);
   1c56a:	466e      	mov	r6, sp
   1c56c:	b088      	sub	sp, #32
   1c56e:	ab02      	add	r3, sp, #8
   1c570:	f113 0210 	adds.w	r2, r3, #16
   1c574:	d031      	beq.n	1c5da <find_type_cb+0x22a>
   1c576:	210c      	movs	r1, #12
   1c578:	b14a      	cbz	r2, 1c58e <find_type_cb+0x1de>
   1c57a:	4608      	mov	r0, r1
   1c57c:	2904      	cmp	r1, #4
   1c57e:	dd03      	ble.n	1c588 <find_type_cb+0x1d8>
   1c580:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 1c62c <find_type_cb+0x27c>
   1c584:	f8c3 c014 	str.w	ip, [r3, #20]
   1c588:	2808      	cmp	r0, #8
   1c58a:	dd00      	ble.n	1c58e <find_type_cb+0x1de>
   1c58c:	619d      	str	r5, [r3, #24]
   1c58e:	290b      	cmp	r1, #11
   1c590:	dd26      	ble.n	1c5e0 <find_type_cb+0x230>
   1c592:	250c      	movs	r5, #12
   1c594:	b13a      	cbz	r2, 1c5a6 <find_type_cb+0x1f6>
   1c596:	2103      	movs	r1, #3
   1c598:	7339      	strb	r1, [r7, #12]
   1c59a:	2100      	movs	r1, #0
   1c59c:	7379      	strb	r1, [r7, #13]
   1c59e:	73b9      	strb	r1, [r7, #14]
   1c5a0:	73f9      	strb	r1, [r7, #15]
   1c5a2:	68f8      	ldr	r0, [r7, #12]
   1c5a4:	6118      	str	r0, [r3, #16]
   1c5a6:	2100      	movs	r1, #0
   1c5a8:	f36f 0100 	bfc	r1, #0, #1
   1c5ac:	f36f 0141 	bfc	r1, #1, #1
   1c5b0:	f36f 0182 	bfc	r1, #2, #1
   1c5b4:	f36f 01c5 	bfc	r1, #3, #3
   1c5b8:	2302      	movs	r3, #2
   1c5ba:	f363 1188 	bfi	r1, r3, #6, #3
   1c5be:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   1c5c2:	f363 2152 	bfi	r1, r3, #9, #10
   1c5c6:	f36f 41de 	bfc	r1, #19, #12
   1c5ca:	f36f 71df 	bfc	r1, #31, #1
   1c5ce:	2300      	movs	r3, #0
   1c5d0:	4815      	ldr	r0, [pc, #84]	; (1c628 <find_type_cb+0x278>)
   1c5d2:	f00a fb40 	bl	26c56 <z_impl_z_log_msg_static_create>
   1c5d6:	46b5      	mov	sp, r6
			goto skip;
   1c5d8:	e702      	b.n	1c3e0 <find_type_cb+0x30>
			LOG_WRN("Unable to create UUID: size %d", read);
   1c5da:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1c5de:	e7cb      	b.n	1c578 <find_type_cb+0x1c8>
   1c5e0:	f06f 051b 	mvn.w	r5, #27
   1c5e4:	e7d6      	b.n	1c594 <find_type_cb+0x1e4>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1c5e6:	f107 0110 	add.w	r1, r7, #16
   1c5ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
   1c5ee:	f00a ffed 	bl	275cc <bt_uuid_cmp>
   1c5f2:	b148      	cbz	r0, 1c608 <find_type_cb+0x258>
   1c5f4:	e6f4      	b.n	1c3e0 <find_type_cb+0x30>
	} else if (memcmp(data->value, uuid, read)) {
   1c5f6:	462a      	mov	r2, r5
   1c5f8:	f107 0138 	add.w	r1, r7, #56	; 0x38
   1c5fc:	68e0      	ldr	r0, [r4, #12]
   1c5fe:	f00a ff53 	bl	274a8 <memcmp>
   1c602:	2800      	cmp	r0, #0
   1c604:	f47f aeec 	bne.w	1c3e0 <find_type_cb+0x30>
	data->err = 0x00;
   1c608:	2300      	movs	r3, #0
   1c60a:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1c60c:	2104      	movs	r1, #4
   1c60e:	6878      	ldr	r0, [r7, #4]
   1c610:	300c      	adds	r0, #12
   1c612:	f00d fc62 	bl	29eda <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1c616:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1c618:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1c61a:	68a3      	ldr	r3, [r4, #8]
   1c61c:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1c61e:	2001      	movs	r0, #1
   1c620:	e6e1      	b.n	1c3e6 <find_type_cb+0x36>
   1c622:	bf00      	nop
   1c624:	0002ef30 	.word	0x0002ef30
   1c628:	0002d0a4 	.word	0x0002d0a4
   1c62c:	0002ef50 	.word	0x0002ef50

0001c630 <bt_att_connected>:
{
   1c630:	b510      	push	{r4, lr}
   1c632:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1c634:	3804      	subs	r0, #4
	atomic_set_bit(att_chan->flags, ATT_CONNECTED);
   1c636:	f104 038c 	add.w	r3, r4, #140	; 0x8c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c63a:	f3bf 8f5b 	dmb	ish
   1c63e:	e853 1f00 	ldrex	r1, [r3]
   1c642:	f041 0104 	orr.w	r1, r1, #4
   1c646:	e843 1200 	strex	r2, r1, [r3]
   1c64a:	2a00      	cmp	r2, #0
   1c64c:	d1f7      	bne.n	1c63e <bt_att_connected+0xe>
   1c64e:	f3bf 8f5b 	dmb	ish
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1c652:	2317      	movs	r3, #23
   1c654:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1c656:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   1c658:	f00b ff38 	bl	284cc <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1c65c:	4904      	ldr	r1, [pc, #16]	; (1c670 <bt_att_connected+0x40>)
   1c65e:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   1c662:	f00f fe6b 	bl	2c33c <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   1c666:	6820      	ldr	r0, [r4, #0]
   1c668:	f002 f93e 	bl	1e8e8 <bt_gatt_connected>
}
   1c66c:	bd10      	pop	{r4, pc}
   1c66e:	bf00      	nop
   1c670:	0001d321 	.word	0x0001d321

0001c674 <bt_att_chan_create_pdu>:
{
   1c674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c678:	b089      	sub	sp, #36	; 0x24
   1c67a:	af00      	add	r7, sp, #0
   1c67c:	460c      	mov	r4, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1c67e:	1c53      	adds	r3, r2, #1
   1c680:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1c682:	428b      	cmp	r3, r1
   1c684:	d80b      	bhi.n	1c69e <bt_att_chan_create_pdu+0x2a>
	switch (att_op_get_type(op)) {
   1c686:	4620      	mov	r0, r4
   1c688:	f7ff fb78 	bl	1bd7c <att_op_get_type>
   1c68c:	2802      	cmp	r0, #2
   1c68e:	d04b      	beq.n	1c728 <bt_att_chan_create_pdu+0xb4>
   1c690:	2804      	cmp	r0, #4
   1c692:	d049      	beq.n	1c728 <bt_att_chan_create_pdu+0xb4>
		timeout = K_FOREVER;
   1c694:	f04f 38ff 	mov.w	r8, #4294967295
   1c698:	f04f 39ff 	mov.w	r9, #4294967295
   1c69c:	e048      	b.n	1c730 <bt_att_chan_create_pdu+0xbc>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   1c69e:	466d      	mov	r5, sp
   1c6a0:	b088      	sub	sp, #32
   1c6a2:	466c      	mov	r4, sp
   1c6a4:	f114 0210 	adds.w	r2, r4, #16
   1c6a8:	d012      	beq.n	1c6d0 <bt_att_chan_create_pdu+0x5c>
   1c6aa:	2010      	movs	r0, #16
   1c6ac:	b162      	cbz	r2, 1c6c8 <bt_att_chan_create_pdu+0x54>
   1c6ae:	4606      	mov	r6, r0
   1c6b0:	2804      	cmp	r0, #4
   1c6b2:	dd03      	ble.n	1c6bc <bt_att_chan_create_pdu+0x48>
   1c6b4:	f8df c17c 	ldr.w	ip, [pc, #380]	; 1c834 <bt_att_chan_create_pdu+0x1c0>
   1c6b8:	f8c4 c014 	str.w	ip, [r4, #20]
   1c6bc:	2e08      	cmp	r6, #8
   1c6be:	dd00      	ble.n	1c6c2 <bt_att_chan_create_pdu+0x4e>
   1c6c0:	61a1      	str	r1, [r4, #24]
   1c6c2:	2e0c      	cmp	r6, #12
   1c6c4:	dd07      	ble.n	1c6d6 <bt_att_chan_create_pdu+0x62>
   1c6c6:	61e3      	str	r3, [r4, #28]
   1c6c8:	280f      	cmp	r0, #15
   1c6ca:	dd2a      	ble.n	1c722 <bt_att_chan_create_pdu+0xae>
   1c6cc:	2310      	movs	r3, #16
   1c6ce:	e004      	b.n	1c6da <bt_att_chan_create_pdu+0x66>
   1c6d0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1c6d4:	e7ea      	b.n	1c6ac <bt_att_chan_create_pdu+0x38>
   1c6d6:	f06f 031b 	mvn.w	r3, #27
   1c6da:	b13a      	cbz	r2, 1c6ec <bt_att_chan_create_pdu+0x78>
   1c6dc:	2104      	movs	r1, #4
   1c6de:	7139      	strb	r1, [r7, #4]
   1c6e0:	2100      	movs	r1, #0
   1c6e2:	7179      	strb	r1, [r7, #5]
   1c6e4:	71b9      	strb	r1, [r7, #6]
   1c6e6:	71f9      	strb	r1, [r7, #7]
   1c6e8:	6878      	ldr	r0, [r7, #4]
   1c6ea:	6120      	str	r0, [r4, #16]
   1c6ec:	2100      	movs	r1, #0
   1c6ee:	f36f 0100 	bfc	r1, #0, #1
   1c6f2:	f36f 0141 	bfc	r1, #1, #1
   1c6f6:	f36f 0182 	bfc	r1, #2, #1
   1c6fa:	f36f 01c5 	bfc	r1, #3, #3
   1c6fe:	2002      	movs	r0, #2
   1c700:	f360 1188 	bfi	r1, r0, #6, #3
   1c704:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
   1c708:	f363 2152 	bfi	r1, r3, #9, #10
   1c70c:	f36f 41de 	bfc	r1, #19, #12
   1c710:	f36f 71df 	bfc	r1, #31, #1
   1c714:	2300      	movs	r3, #0
   1c716:	4848      	ldr	r0, [pc, #288]	; (1c838 <bt_att_chan_create_pdu+0x1c4>)
   1c718:	f00a fa9d 	bl	26c56 <z_impl_z_log_msg_static_create>
   1c71c:	46ad      	mov	sp, r5
		return NULL;
   1c71e:	2500      	movs	r5, #0
   1c720:	e01c      	b.n	1c75c <bt_att_chan_create_pdu+0xe8>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   1c722:	f06f 031b 	mvn.w	r3, #27
   1c726:	e7d8      	b.n	1c6da <bt_att_chan_create_pdu+0x66>
		timeout = BT_ATT_TIMEOUT;
   1c728:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   1c72c:	f04f 0900 	mov.w	r9, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1c730:	4642      	mov	r2, r8
   1c732:	464b      	mov	r3, r9
   1c734:	2100      	movs	r1, #0
   1c736:	4608      	mov	r0, r1
   1c738:	f00b fbfd 	bl	27f36 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1c73c:	4605      	mov	r5, r0
   1c73e:	b190      	cbz	r0, 1c766 <bt_att_chan_create_pdu+0xf2>
	data = tx_meta_data_alloc(timeout);
   1c740:	4640      	mov	r0, r8
   1c742:	4649      	mov	r1, r9
   1c744:	f7ff fb8c 	bl	1be60 <tx_meta_data_alloc>
	if (!data) {
   1c748:	4606      	mov	r6, r0
   1c74a:	2800      	cmp	r0, #0
   1c74c:	d04c      	beq.n	1c7e8 <bt_att_chan_create_pdu+0x174>
	bt_att_tx_meta_data(buf) = data;
   1c74e:	61a8      	str	r0, [r5, #24]
   1c750:	2101      	movs	r1, #1
   1c752:	f105 000c 	add.w	r0, r5, #12
   1c756:	f00d fbc0 	bl	29eda <net_buf_simple_add>
	hdr->code = op;
   1c75a:	7004      	strb	r4, [r0, #0]
}
   1c75c:	4628      	mov	r0, r5
   1c75e:	3724      	adds	r7, #36	; 0x24
   1c760:	46bd      	mov	sp, r7
   1c762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1c766:	466e      	mov	r6, sp
   1c768:	b088      	sub	sp, #32
   1c76a:	466b      	mov	r3, sp
   1c76c:	f113 0210 	adds.w	r2, r3, #16
   1c770:	d00f      	beq.n	1c792 <bt_att_chan_create_pdu+0x11e>
   1c772:	210c      	movs	r1, #12
   1c774:	b14a      	cbz	r2, 1c78a <bt_att_chan_create_pdu+0x116>
   1c776:	4608      	mov	r0, r1
   1c778:	2904      	cmp	r1, #4
   1c77a:	dd03      	ble.n	1c784 <bt_att_chan_create_pdu+0x110>
   1c77c:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 1c83c <bt_att_chan_create_pdu+0x1c8>
   1c780:	f8c3 c014 	str.w	ip, [r3, #20]
   1c784:	2808      	cmp	r0, #8
   1c786:	dd07      	ble.n	1c798 <bt_att_chan_create_pdu+0x124>
   1c788:	619c      	str	r4, [r3, #24]
   1c78a:	290b      	cmp	r1, #11
   1c78c:	dd29      	ble.n	1c7e2 <bt_att_chan_create_pdu+0x16e>
   1c78e:	240c      	movs	r4, #12
   1c790:	e004      	b.n	1c79c <bt_att_chan_create_pdu+0x128>
   1c792:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1c796:	e7ed      	b.n	1c774 <bt_att_chan_create_pdu+0x100>
   1c798:	f06f 041b 	mvn.w	r4, #27
   1c79c:	b13a      	cbz	r2, 1c7ae <bt_att_chan_create_pdu+0x13a>
   1c79e:	2103      	movs	r1, #3
   1c7a0:	7139      	strb	r1, [r7, #4]
   1c7a2:	2100      	movs	r1, #0
   1c7a4:	7179      	strb	r1, [r7, #5]
   1c7a6:	71b9      	strb	r1, [r7, #6]
   1c7a8:	71f9      	strb	r1, [r7, #7]
   1c7aa:	6878      	ldr	r0, [r7, #4]
   1c7ac:	6118      	str	r0, [r3, #16]
   1c7ae:	2100      	movs	r1, #0
   1c7b0:	f36f 0100 	bfc	r1, #0, #1
   1c7b4:	f36f 0141 	bfc	r1, #1, #1
   1c7b8:	f36f 0182 	bfc	r1, #2, #1
   1c7bc:	f36f 01c5 	bfc	r1, #3, #3
   1c7c0:	2301      	movs	r3, #1
   1c7c2:	f363 1188 	bfi	r1, r3, #6, #3
   1c7c6:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1c7ca:	f363 2152 	bfi	r1, r3, #9, #10
   1c7ce:	f36f 41de 	bfc	r1, #19, #12
   1c7d2:	f36f 71df 	bfc	r1, #31, #1
   1c7d6:	2300      	movs	r3, #0
   1c7d8:	4817      	ldr	r0, [pc, #92]	; (1c838 <bt_att_chan_create_pdu+0x1c4>)
   1c7da:	f00a fa3c 	bl	26c56 <z_impl_z_log_msg_static_create>
   1c7de:	46b5      	mov	sp, r6
		return NULL;
   1c7e0:	e7bc      	b.n	1c75c <bt_att_chan_create_pdu+0xe8>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1c7e2:	f06f 041b 	mvn.w	r4, #27
   1c7e6:	e7d9      	b.n	1c79c <bt_att_chan_create_pdu+0x128>
		LOG_WRN("Unable to allocate ATT TX meta");
   1c7e8:	4b15      	ldr	r3, [pc, #84]	; (1c840 <bt_att_chan_create_pdu+0x1cc>)
   1c7ea:	61fb      	str	r3, [r7, #28]
   1c7ec:	2202      	movs	r2, #2
   1c7ee:	713a      	strb	r2, [r7, #4]
   1c7f0:	2300      	movs	r3, #0
   1c7f2:	717b      	strb	r3, [r7, #5]
   1c7f4:	71bb      	strb	r3, [r7, #6]
   1c7f6:	71fb      	strb	r3, [r7, #7]
   1c7f8:	6879      	ldr	r1, [r7, #4]
   1c7fa:	61b9      	str	r1, [r7, #24]
   1c7fc:	4619      	mov	r1, r3
   1c7fe:	f363 0100 	bfi	r1, r3, #0, #1
   1c802:	f363 0141 	bfi	r1, r3, #1, #1
   1c806:	f363 0182 	bfi	r1, r3, #2, #1
   1c80a:	f363 01c5 	bfi	r1, r3, #3, #3
   1c80e:	f362 1188 	bfi	r1, r2, #6, #3
   1c812:	2208      	movs	r2, #8
   1c814:	f362 2152 	bfi	r1, r2, #9, #10
   1c818:	f363 41de 	bfi	r1, r3, #19, #12
   1c81c:	f363 71df 	bfi	r1, r3, #31, #1
   1c820:	f107 0218 	add.w	r2, r7, #24
   1c824:	4804      	ldr	r0, [pc, #16]	; (1c838 <bt_att_chan_create_pdu+0x1c4>)
   1c826:	f00a fa16 	bl	26c56 <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   1c82a:	4628      	mov	r0, r5
   1c82c:	f00d fb0e 	bl	29e4c <net_buf_unref>
		return NULL;
   1c830:	4635      	mov	r5, r6
   1c832:	e793      	b.n	1c75c <bt_att_chan_create_pdu+0xe8>
   1c834:	0002ef70 	.word	0x0002ef70
   1c838:	0002d0a4 	.word	0x0002d0a4
   1c83c:	0002ed44 	.word	0x0002ed44
   1c840:	0002ef98 	.word	0x0002ef98

0001c844 <bt_att_recv>:
{
   1c844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c848:	b094      	sub	sp, #80	; 0x50
   1c84a:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   1c84c:	8a0b      	ldrh	r3, [r1, #16]
   1c84e:	b173      	cbz	r3, 1c86e <bt_att_recv+0x2a>
   1c850:	4606      	mov	r6, r0
   1c852:	460d      	mov	r5, r1
   1c854:	f1a0 0804 	sub.w	r8, r0, #4
	return net_buf_simple_pull_mem(&buf->b, len);
   1c858:	2101      	movs	r1, #1
   1c85a:	f105 000c 	add.w	r0, r5, #12
   1c85e:	f00d fb66 	bl	29f2e <net_buf_simple_pull_mem>
   1c862:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1c864:	f856 3c04 	ldr.w	r3, [r6, #-4]
   1c868:	b31b      	cbz	r3, 1c8b2 <bt_att_recv+0x6e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1c86a:	2300      	movs	r3, #0
   1c86c:	e027      	b.n	1c8be <bt_att_recv+0x7a>
		LOG_ERR("Too small ATT PDU received");
   1c86e:	4ba4      	ldr	r3, [pc, #656]	; (1cb00 <bt_att_recv+0x2bc>)
   1c870:	64fb      	str	r3, [r7, #76]	; 0x4c
   1c872:	2302      	movs	r3, #2
   1c874:	713b      	strb	r3, [r7, #4]
   1c876:	2300      	movs	r3, #0
   1c878:	717b      	strb	r3, [r7, #5]
   1c87a:	71bb      	strb	r3, [r7, #6]
   1c87c:	71fb      	strb	r3, [r7, #7]
   1c87e:	687a      	ldr	r2, [r7, #4]
   1c880:	64ba      	str	r2, [r7, #72]	; 0x48
   1c882:	4619      	mov	r1, r3
   1c884:	f363 0100 	bfi	r1, r3, #0, #1
   1c888:	f363 0141 	bfi	r1, r3, #1, #1
   1c88c:	f363 0182 	bfi	r1, r3, #2, #1
   1c890:	f363 01c5 	bfi	r1, r3, #3, #3
   1c894:	2201      	movs	r2, #1
   1c896:	f362 1188 	bfi	r1, r2, #6, #3
   1c89a:	2208      	movs	r2, #8
   1c89c:	f362 2152 	bfi	r1, r2, #9, #10
   1c8a0:	f363 41de 	bfi	r1, r3, #19, #12
   1c8a4:	f363 71df 	bfi	r1, r3, #31, #1
   1c8a8:	f107 0248 	add.w	r2, r7, #72	; 0x48
   1c8ac:	4895      	ldr	r0, [pc, #596]	; (1cb04 <bt_att_recv+0x2c0>)
   1c8ae:	f00a f9d2 	bl	26c56 <z_impl_z_log_msg_static_create>
}
   1c8b2:	2000      	movs	r0, #0
   1c8b4:	3750      	adds	r7, #80	; 0x50
   1c8b6:	46bd      	mov	sp, r7
   1c8b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1c8bc:	3301      	adds	r3, #1
   1c8be:	2b1d      	cmp	r3, #29
   1c8c0:	d837      	bhi.n	1c932 <bt_att_recv+0xee>
		if (hdr->code == handlers[i].op) {
   1c8c2:	f894 c000 	ldrb.w	ip, [r4]
   1c8c6:	4a90      	ldr	r2, [pc, #576]	; (1cb08 <bt_att_recv+0x2c4>)
   1c8c8:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   1c8cc:	4594      	cmp	ip, r2
   1c8ce:	d1f5      	bne.n	1c8bc <bt_att_recv+0x78>
			handler = &handlers[i];
   1c8d0:	4a8d      	ldr	r2, [pc, #564]	; (1cb08 <bt_att_recv+0x2c4>)
   1c8d2:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
		if (handler->type == ATT_REQUEST &&
   1c8d6:	f899 a002 	ldrb.w	sl, [r9, #2]
   1c8da:	f1ba 0f01 	cmp.w	sl, #1
   1c8de:	d07a      	beq.n	1c9d6 <bt_att_recv+0x192>
		} else if (handler->type == ATT_INDICATION &&
   1c8e0:	f1ba 0f05 	cmp.w	sl, #5
   1c8e4:	f000 80a1 	beq.w	1ca2a <bt_att_recv+0x1e6>
	if (buf->len < handler->expect_len) {
   1c8e8:	8a29      	ldrh	r1, [r5, #16]
   1c8ea:	f899 3001 	ldrb.w	r3, [r9, #1]
   1c8ee:	4299      	cmp	r1, r3
   1c8f0:	f080 80ff 	bcs.w	1caf2 <bt_att_recv+0x2ae>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1c8f4:	f894 c000 	ldrb.w	ip, [r4]
   1c8f8:	466d      	mov	r5, sp
   1c8fa:	b088      	sub	sp, #32
   1c8fc:	466b      	mov	r3, sp
   1c8fe:	f113 0210 	adds.w	r2, r3, #16
   1c902:	f000 80bc 	beq.w	1ca7e <bt_att_recv+0x23a>
   1c906:	2010      	movs	r0, #16
   1c908:	b172      	cbz	r2, 1c928 <bt_att_recv+0xe4>
   1c90a:	4606      	mov	r6, r0
   1c90c:	2804      	cmp	r0, #4
   1c90e:	dd03      	ble.n	1c918 <bt_att_recv+0xd4>
   1c910:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 1cb0c <bt_att_recv+0x2c8>
   1c914:	f8c3 e014 	str.w	lr, [r3, #20]
   1c918:	2e08      	cmp	r6, #8
   1c91a:	dd00      	ble.n	1c91e <bt_att_recv+0xda>
   1c91c:	6199      	str	r1, [r3, #24]
   1c91e:	2e0c      	cmp	r6, #12
   1c920:	f340 80b0 	ble.w	1ca84 <bt_att_recv+0x240>
   1c924:	f8c3 c01c 	str.w	ip, [r3, #28]
   1c928:	280f      	cmp	r0, #15
   1c92a:	f340 80df 	ble.w	1caec <bt_att_recv+0x2a8>
   1c92e:	2610      	movs	r6, #16
   1c930:	e0aa      	b.n	1ca88 <bt_att_recv+0x244>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   1c932:	7826      	ldrb	r6, [r4, #0]
   1c934:	466d      	mov	r5, sp
   1c936:	b088      	sub	sp, #32
   1c938:	466b      	mov	r3, sp
   1c93a:	f113 0210 	adds.w	r2, r3, #16
   1c93e:	d00f      	beq.n	1c960 <bt_att_recv+0x11c>
   1c940:	210c      	movs	r1, #12
   1c942:	b14a      	cbz	r2, 1c958 <bt_att_recv+0x114>
   1c944:	4608      	mov	r0, r1
   1c946:	2904      	cmp	r1, #4
   1c948:	dd03      	ble.n	1c952 <bt_att_recv+0x10e>
   1c94a:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 1cb10 <bt_att_recv+0x2cc>
   1c94e:	f8c3 c014 	str.w	ip, [r3, #20]
   1c952:	2808      	cmp	r0, #8
   1c954:	dd07      	ble.n	1c966 <bt_att_recv+0x122>
   1c956:	619e      	str	r6, [r3, #24]
   1c958:	290b      	cmp	r1, #11
   1c95a:	dd39      	ble.n	1c9d0 <bt_att_recv+0x18c>
   1c95c:	260c      	movs	r6, #12
   1c95e:	e004      	b.n	1c96a <bt_att_recv+0x126>
   1c960:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1c964:	e7ed      	b.n	1c942 <bt_att_recv+0xfe>
   1c966:	f06f 061b 	mvn.w	r6, #27
   1c96a:	b13a      	cbz	r2, 1c97c <bt_att_recv+0x138>
   1c96c:	2103      	movs	r1, #3
   1c96e:	7139      	strb	r1, [r7, #4]
   1c970:	2100      	movs	r1, #0
   1c972:	7179      	strb	r1, [r7, #5]
   1c974:	71b9      	strb	r1, [r7, #6]
   1c976:	71f9      	strb	r1, [r7, #7]
   1c978:	6878      	ldr	r0, [r7, #4]
   1c97a:	6118      	str	r0, [r3, #16]
   1c97c:	2100      	movs	r1, #0
   1c97e:	f36f 0100 	bfc	r1, #0, #1
   1c982:	f36f 0141 	bfc	r1, #1, #1
   1c986:	f36f 0182 	bfc	r1, #2, #1
   1c98a:	f36f 01c5 	bfc	r1, #3, #3
   1c98e:	2302      	movs	r3, #2
   1c990:	f363 1188 	bfi	r1, r3, #6, #3
   1c994:	f406 737b 	and.w	r3, r6, #1004	; 0x3ec
   1c998:	f363 2152 	bfi	r1, r3, #9, #10
   1c99c:	f36f 41de 	bfc	r1, #19, #12
   1c9a0:	f36f 71df 	bfc	r1, #31, #1
   1c9a4:	2300      	movs	r3, #0
   1c9a6:	4857      	ldr	r0, [pc, #348]	; (1cb04 <bt_att_recv+0x2c0>)
   1c9a8:	f00a f955 	bl	26c56 <z_impl_z_log_msg_static_create>
   1c9ac:	46ad      	mov	sp, r5
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1c9ae:	7824      	ldrb	r4, [r4, #0]
   1c9b0:	4620      	mov	r0, r4
   1c9b2:	f7ff f9e3 	bl	1bd7c <att_op_get_type>
   1c9b6:	2800      	cmp	r0, #0
   1c9b8:	f43f af7b 	beq.w	1c8b2 <bt_att_recv+0x6e>
   1c9bc:	2805      	cmp	r0, #5
   1c9be:	f43f af78 	beq.w	1c8b2 <bt_att_recv+0x6e>
			send_err_rsp(att_chan, hdr->code, 0,
   1c9c2:	2306      	movs	r3, #6
   1c9c4:	2200      	movs	r2, #0
   1c9c6:	4621      	mov	r1, r4
   1c9c8:	4640      	mov	r0, r8
   1c9ca:	f00b ffc5 	bl	28958 <send_err_rsp>
		return 0;
   1c9ce:	e770      	b.n	1c8b2 <bt_att_recv+0x6e>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   1c9d0:	f06f 061b 	mvn.w	r6, #27
   1c9d4:	e7c9      	b.n	1c96a <bt_att_recv+0x126>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   1c9d6:	2100      	movs	r1, #0
   1c9d8:	f106 008c 	add.w	r0, r6, #140	; 0x8c
   1c9dc:	f00b ff3b 	bl	28856 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   1c9e0:	2800      	cmp	r0, #0
   1c9e2:	f43f af7d 	beq.w	1c8e0 <bt_att_recv+0x9c>
			LOG_WRN("Ignoring unexpected request");
   1c9e6:	4b4b      	ldr	r3, [pc, #300]	; (1cb14 <bt_att_recv+0x2d0>)
   1c9e8:	61fb      	str	r3, [r7, #28]
   1c9ea:	2202      	movs	r2, #2
   1c9ec:	713a      	strb	r2, [r7, #4]
   1c9ee:	2300      	movs	r3, #0
   1c9f0:	717b      	strb	r3, [r7, #5]
   1c9f2:	71bb      	strb	r3, [r7, #6]
   1c9f4:	71fb      	strb	r3, [r7, #7]
   1c9f6:	6879      	ldr	r1, [r7, #4]
   1c9f8:	61b9      	str	r1, [r7, #24]
   1c9fa:	4619      	mov	r1, r3
   1c9fc:	f363 0100 	bfi	r1, r3, #0, #1
   1ca00:	f363 0141 	bfi	r1, r3, #1, #1
   1ca04:	f363 0182 	bfi	r1, r3, #2, #1
   1ca08:	f363 01c5 	bfi	r1, r3, #3, #3
   1ca0c:	f362 1188 	bfi	r1, r2, #6, #3
   1ca10:	2208      	movs	r2, #8
   1ca12:	f362 2152 	bfi	r1, r2, #9, #10
   1ca16:	f363 41de 	bfi	r1, r3, #19, #12
   1ca1a:	f363 71df 	bfi	r1, r3, #31, #1
   1ca1e:	f107 0218 	add.w	r2, r7, #24
   1ca22:	4838      	ldr	r0, [pc, #224]	; (1cb04 <bt_att_recv+0x2c0>)
   1ca24:	f00a f917 	bl	26c56 <z_impl_z_log_msg_static_create>
			return 0;
   1ca28:	e743      	b.n	1c8b2 <bt_att_recv+0x6e>
			   atomic_test_and_set_bit(att_chan->flags,
   1ca2a:	2101      	movs	r1, #1
   1ca2c:	f106 008c 	add.w	r0, r6, #140	; 0x8c
   1ca30:	f00b ff11 	bl	28856 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   1ca34:	2800      	cmp	r0, #0
   1ca36:	f43f af57 	beq.w	1c8e8 <bt_att_recv+0xa4>
			LOG_WRN("Ignoring unexpected indication");
   1ca3a:	4b37      	ldr	r3, [pc, #220]	; (1cb18 <bt_att_recv+0x2d4>)
   1ca3c:	637b      	str	r3, [r7, #52]	; 0x34
   1ca3e:	2202      	movs	r2, #2
   1ca40:	713a      	strb	r2, [r7, #4]
   1ca42:	2300      	movs	r3, #0
   1ca44:	717b      	strb	r3, [r7, #5]
   1ca46:	71bb      	strb	r3, [r7, #6]
   1ca48:	71fb      	strb	r3, [r7, #7]
   1ca4a:	6879      	ldr	r1, [r7, #4]
   1ca4c:	6339      	str	r1, [r7, #48]	; 0x30
   1ca4e:	4619      	mov	r1, r3
   1ca50:	f363 0100 	bfi	r1, r3, #0, #1
   1ca54:	f363 0141 	bfi	r1, r3, #1, #1
   1ca58:	f363 0182 	bfi	r1, r3, #2, #1
   1ca5c:	f363 01c5 	bfi	r1, r3, #3, #3
   1ca60:	f362 1188 	bfi	r1, r2, #6, #3
   1ca64:	2208      	movs	r2, #8
   1ca66:	f362 2152 	bfi	r1, r2, #9, #10
   1ca6a:	f363 41de 	bfi	r1, r3, #19, #12
   1ca6e:	f363 71df 	bfi	r1, r3, #31, #1
   1ca72:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1ca76:	4823      	ldr	r0, [pc, #140]	; (1cb04 <bt_att_recv+0x2c0>)
   1ca78:	f00a f8ed 	bl	26c56 <z_impl_z_log_msg_static_create>
			return 0;
   1ca7c:	e719      	b.n	1c8b2 <bt_att_recv+0x6e>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1ca7e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1ca82:	e741      	b.n	1c908 <bt_att_recv+0xc4>
   1ca84:	f06f 061b 	mvn.w	r6, #27
   1ca88:	b13a      	cbz	r2, 1ca9a <bt_att_recv+0x256>
   1ca8a:	2104      	movs	r1, #4
   1ca8c:	7139      	strb	r1, [r7, #4]
   1ca8e:	2100      	movs	r1, #0
   1ca90:	7179      	strb	r1, [r7, #5]
   1ca92:	71b9      	strb	r1, [r7, #6]
   1ca94:	71f9      	strb	r1, [r7, #7]
   1ca96:	6878      	ldr	r0, [r7, #4]
   1ca98:	6118      	str	r0, [r3, #16]
   1ca9a:	2100      	movs	r1, #0
   1ca9c:	f36f 0100 	bfc	r1, #0, #1
   1caa0:	f36f 0141 	bfc	r1, #1, #1
   1caa4:	f36f 0182 	bfc	r1, #2, #1
   1caa8:	f36f 01c5 	bfc	r1, #3, #3
   1caac:	2301      	movs	r3, #1
   1caae:	f363 1188 	bfi	r1, r3, #6, #3
   1cab2:	f406 767d 	and.w	r6, r6, #1012	; 0x3f4
   1cab6:	f366 2152 	bfi	r1, r6, #9, #10
   1caba:	f36f 41de 	bfc	r1, #19, #12
   1cabe:	f36f 71df 	bfc	r1, #31, #1
   1cac2:	2300      	movs	r3, #0
   1cac4:	480f      	ldr	r0, [pc, #60]	; (1cb04 <bt_att_recv+0x2c0>)
   1cac6:	f00a f8c6 	bl	26c56 <z_impl_z_log_msg_static_create>
   1caca:	46ad      	mov	sp, r5
		err = BT_ATT_ERR_INVALID_PDU;
   1cacc:	2004      	movs	r0, #4
	if (handler->type == ATT_REQUEST && err) {
   1cace:	f899 3002 	ldrb.w	r3, [r9, #2]
   1cad2:	2b01      	cmp	r3, #1
   1cad4:	f47f aeed 	bne.w	1c8b2 <bt_att_recv+0x6e>
   1cad8:	2800      	cmp	r0, #0
   1cada:	f43f aeea 	beq.w	1c8b2 <bt_att_recv+0x6e>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1cade:	4603      	mov	r3, r0
   1cae0:	2200      	movs	r2, #0
   1cae2:	7821      	ldrb	r1, [r4, #0]
   1cae4:	4640      	mov	r0, r8
   1cae6:	f00b ff37 	bl	28958 <send_err_rsp>
   1caea:	e6e2      	b.n	1c8b2 <bt_att_recv+0x6e>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1caec:	f06f 061b 	mvn.w	r6, #27
   1caf0:	e7ca      	b.n	1ca88 <bt_att_recv+0x244>
		err = handler->func(att_chan, buf);
   1caf2:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1caf6:	4629      	mov	r1, r5
   1caf8:	4640      	mov	r0, r8
   1cafa:	4798      	blx	r3
   1cafc:	e7e7      	b.n	1cace <bt_att_recv+0x28a>
   1cafe:	bf00      	nop
   1cb00:	0002efb8 	.word	0x0002efb8
   1cb04:	0002d0a4 	.word	0x0002d0a4
   1cb08:	0002f08c 	.word	0x0002f08c
   1cb0c:	0002f02c 	.word	0x0002f02c
   1cb10:	0002efd4 	.word	0x0002efd4
   1cb14:	0002eff0 	.word	0x0002eff0
   1cb18:	0002f00c 	.word	0x0002f00c

0001cb1c <att_write_rsp>:
{
   1cb1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cb20:	b08a      	sub	sp, #40	; 0x28
   1cb22:	4604      	mov	r4, r0
   1cb24:	4617      	mov	r7, r2
   1cb26:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1cb28:	6803      	ldr	r3, [r0, #0]
   1cb2a:	4688      	mov	r8, r1
   1cb2c:	3900      	subs	r1, #0
   1cb2e:	bf18      	it	ne
   1cb30:	2101      	movne	r1, #1
   1cb32:	6818      	ldr	r0, [r3, #0]
   1cb34:	f00c ffd8 	bl	29ae8 <bt_gatt_change_aware>
   1cb38:	b128      	cbz	r0, 1cb46 <att_write_rsp+0x2a>
	if (!handle) {
   1cb3a:	b975      	cbnz	r5, 1cb5a <att_write_rsp+0x3e>
		return BT_ATT_ERR_INVALID_HANDLE;
   1cb3c:	2601      	movs	r6, #1
}
   1cb3e:	4630      	mov	r0, r6
   1cb40:	b00a      	add	sp, #40	; 0x28
   1cb42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1cb46:	2105      	movs	r1, #5
   1cb48:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1cb4c:	f00b fe83 	bl	28856 <atomic_test_and_set_bit>
   1cb50:	b108      	cbz	r0, 1cb56 <att_write_rsp+0x3a>
			return 0;
   1cb52:	2600      	movs	r6, #0
   1cb54:	e7f3      	b.n	1cb3e <att_write_rsp+0x22>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1cb56:	2612      	movs	r6, #18
   1cb58:	e7f1      	b.n	1cb3e <att_write_rsp+0x22>
	(void)memset(&data, 0, sizeof(data));
   1cb5a:	2218      	movs	r2, #24
   1cb5c:	2100      	movs	r1, #0
   1cb5e:	a804      	add	r0, sp, #16
   1cb60:	f00a fce3 	bl	2752a <memset>
	if (rsp) {
   1cb64:	b13f      	cbz	r7, 1cb76 <att_write_rsp+0x5a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1cb66:	2200      	movs	r2, #0
   1cb68:	4639      	mov	r1, r7
   1cb6a:	4620      	mov	r0, r4
   1cb6c:	f7ff fd82 	bl	1c674 <bt_att_chan_create_pdu>
   1cb70:	9005      	str	r0, [sp, #20]
		if (!data.buf) {
   1cb72:	2800      	cmp	r0, #0
   1cb74:	d03e      	beq.n	1cbf4 <att_write_rsp+0xd8>
	data.conn = chan->att->conn;
   1cb76:	6823      	ldr	r3, [r4, #0]
   1cb78:	681b      	ldr	r3, [r3, #0]
   1cb7a:	9304      	str	r3, [sp, #16]
	data.req = req;
   1cb7c:	f88d 8018 	strb.w	r8, [sp, #24]
	data.offset = offset;
   1cb80:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   1cb84:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	data.value = value;
   1cb88:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1cb8a:	9307      	str	r3, [sp, #28]
	data.len = len;
   1cb8c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1cb90:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1cb94:	2301      	movs	r3, #1
   1cb96:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1cb9a:	ab04      	add	r3, sp, #16
   1cb9c:	9302      	str	r3, [sp, #8]
   1cb9e:	4b16      	ldr	r3, [pc, #88]	; (1cbf8 <att_write_rsp+0xdc>)
   1cba0:	9301      	str	r3, [sp, #4]
   1cba2:	2200      	movs	r2, #0
   1cba4:	9200      	str	r2, [sp, #0]
   1cba6:	4613      	mov	r3, r2
   1cba8:	4629      	mov	r1, r5
   1cbaa:	4628      	mov	r0, r5
   1cbac:	f001 f874 	bl	1dc98 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1cbb0:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   1cbb4:	b936      	cbnz	r6, 1cbc4 <att_write_rsp+0xa8>
	if (data.buf) {
   1cbb6:	9905      	ldr	r1, [sp, #20]
   1cbb8:	2900      	cmp	r1, #0
   1cbba:	d0c0      	beq.n	1cb3e <att_write_rsp+0x22>
		bt_att_chan_send_rsp(chan, data.buf);
   1cbbc:	4620      	mov	r0, r4
   1cbbe:	f00b fc78 	bl	284b2 <bt_att_chan_send_rsp>
   1cbc2:	e7bc      	b.n	1cb3e <att_write_rsp+0x22>
		if (rsp) {
   1cbc4:	b927      	cbnz	r7, 1cbd0 <att_write_rsp+0xb4>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1cbc6:	f1b8 0f18 	cmp.w	r8, #24
   1cbca:	d010      	beq.n	1cbee <att_write_rsp+0xd2>
   1cbcc:	2600      	movs	r6, #0
   1cbce:	e7b6      	b.n	1cb3e <att_write_rsp+0x22>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1cbd0:	9b05      	ldr	r3, [sp, #20]
   1cbd2:	6998      	ldr	r0, [r3, #24]
   1cbd4:	f7ff fac0 	bl	1c158 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1cbd8:	9805      	ldr	r0, [sp, #20]
   1cbda:	f00d f937 	bl	29e4c <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   1cbde:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   1cbe2:	462a      	mov	r2, r5
   1cbe4:	4641      	mov	r1, r8
   1cbe6:	4620      	mov	r0, r4
   1cbe8:	f00b feb6 	bl	28958 <send_err_rsp>
   1cbec:	e7eb      	b.n	1cbc6 <att_write_rsp+0xaa>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1cbee:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   1cbf2:	e7a4      	b.n	1cb3e <att_write_rsp+0x22>
			return BT_ATT_ERR_UNLIKELY;
   1cbf4:	260e      	movs	r6, #14
   1cbf6:	e7a2      	b.n	1cb3e <att_write_rsp+0x22>
   1cbf8:	0002853d 	.word	0x0002853d

0001cbfc <bt_att_create_pdu>:
{
   1cbfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cbfe:	b083      	sub	sp, #12
   1cc00:	af00      	add	r7, sp, #0
   1cc02:	460e      	mov	r6, r1
   1cc04:	4615      	mov	r5, r2
	att = att_get(conn);
   1cc06:	f7ff f935 	bl	1be74 <att_get>
	if (!att) {
   1cc0a:	4604      	mov	r4, r0
   1cc0c:	b300      	cbz	r0, 1cc50 <bt_att_create_pdu+0x54>
	return list->head;
   1cc0e:	6a44      	ldr	r4, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1cc10:	b314      	cbz	r4, 1cc58 <bt_att_create_pdu+0x5c>
   1cc12:	3ce0      	subs	r4, #224	; 0xe0
Z_GENLIST_PEEK_NEXT(slist, snode)
   1cc14:	f114 00e0 	adds.w	r0, r4, #224	; 0xe0
   1cc18:	d007      	beq.n	1cc2a <bt_att_create_pdu+0x2e>
	return node->next;
   1cc1a:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
   1cc1e:	b120      	cbz	r0, 1cc2a <bt_att_create_pdu+0x2e>
   1cc20:	38e0      	subs	r0, #224	; 0xe0
   1cc22:	e002      	b.n	1cc2a <bt_att_create_pdu+0x2e>
   1cc24:	4603      	mov	r3, r0
   1cc26:	4604      	mov	r4, r0
   1cc28:	4618      	mov	r0, r3
   1cc2a:	b1bc      	cbz	r4, 1cc5c <bt_att_create_pdu+0x60>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1cc2c:	1c6b      	adds	r3, r5, #1
   1cc2e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
   1cc30:	4293      	cmp	r3, r2
   1cc32:	d907      	bls.n	1cc44 <bt_att_create_pdu+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1cc34:	2800      	cmp	r0, #0
   1cc36:	d0f5      	beq.n	1cc24 <bt_att_create_pdu+0x28>
   1cc38:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
   1cc3c:	2b00      	cmp	r3, #0
   1cc3e:	d0f2      	beq.n	1cc26 <bt_att_create_pdu+0x2a>
   1cc40:	3be0      	subs	r3, #224	; 0xe0
   1cc42:	e7f0      	b.n	1cc26 <bt_att_create_pdu+0x2a>
		return bt_att_chan_create_pdu(chan, op, len);
   1cc44:	462a      	mov	r2, r5
   1cc46:	4631      	mov	r1, r6
   1cc48:	4620      	mov	r0, r4
   1cc4a:	f7ff fd13 	bl	1c674 <bt_att_chan_create_pdu>
   1cc4e:	4604      	mov	r4, r0
}
   1cc50:	4620      	mov	r0, r4
   1cc52:	370c      	adds	r7, #12
   1cc54:	46bd      	mov	sp, r7
   1cc56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1cc58:	4620      	mov	r0, r4
   1cc5a:	e7e6      	b.n	1cc2a <bt_att_create_pdu+0x2e>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   1cc5c:	3501      	adds	r5, #1
   1cc5e:	466e      	mov	r6, sp
   1cc60:	b088      	sub	sp, #32
   1cc62:	466b      	mov	r3, sp
   1cc64:	f113 0210 	adds.w	r2, r3, #16
   1cc68:	d031      	beq.n	1ccce <bt_att_create_pdu+0xd2>
   1cc6a:	210c      	movs	r1, #12
   1cc6c:	b14a      	cbz	r2, 1cc82 <bt_att_create_pdu+0x86>
   1cc6e:	4608      	mov	r0, r1
   1cc70:	2904      	cmp	r1, #4
   1cc72:	dd03      	ble.n	1cc7c <bt_att_create_pdu+0x80>
   1cc74:	f8df c064 	ldr.w	ip, [pc, #100]	; 1ccdc <bt_att_create_pdu+0xe0>
   1cc78:	f8c3 c014 	str.w	ip, [r3, #20]
   1cc7c:	2808      	cmp	r0, #8
   1cc7e:	dd00      	ble.n	1cc82 <bt_att_create_pdu+0x86>
   1cc80:	619d      	str	r5, [r3, #24]
   1cc82:	290b      	cmp	r1, #11
   1cc84:	dd26      	ble.n	1ccd4 <bt_att_create_pdu+0xd8>
   1cc86:	250c      	movs	r5, #12
   1cc88:	b13a      	cbz	r2, 1cc9a <bt_att_create_pdu+0x9e>
   1cc8a:	2103      	movs	r1, #3
   1cc8c:	7139      	strb	r1, [r7, #4]
   1cc8e:	2100      	movs	r1, #0
   1cc90:	7179      	strb	r1, [r7, #5]
   1cc92:	71b9      	strb	r1, [r7, #6]
   1cc94:	71f9      	strb	r1, [r7, #7]
   1cc96:	6878      	ldr	r0, [r7, #4]
   1cc98:	6118      	str	r0, [r3, #16]
   1cc9a:	2100      	movs	r1, #0
   1cc9c:	f36f 0100 	bfc	r1, #0, #1
   1cca0:	f36f 0141 	bfc	r1, #1, #1
   1cca4:	f36f 0182 	bfc	r1, #2, #1
   1cca8:	f36f 01c5 	bfc	r1, #3, #3
   1ccac:	2302      	movs	r3, #2
   1ccae:	f363 1188 	bfi	r1, r3, #6, #3
   1ccb2:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   1ccb6:	f363 2152 	bfi	r1, r3, #9, #10
   1ccba:	f36f 41de 	bfc	r1, #19, #12
   1ccbe:	f36f 71df 	bfc	r1, #31, #1
   1ccc2:	2300      	movs	r3, #0
   1ccc4:	4806      	ldr	r0, [pc, #24]	; (1cce0 <bt_att_create_pdu+0xe4>)
   1ccc6:	f009 ffc6 	bl	26c56 <z_impl_z_log_msg_static_create>
   1ccca:	46b5      	mov	sp, r6
	return NULL;
   1cccc:	e7c0      	b.n	1cc50 <bt_att_create_pdu+0x54>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   1ccce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1ccd2:	e7cb      	b.n	1cc6c <bt_att_create_pdu+0x70>
   1ccd4:	f06f 051b 	mvn.w	r5, #27
   1ccd8:	e7d6      	b.n	1cc88 <bt_att_create_pdu+0x8c>
   1ccda:	bf00      	nop
   1ccdc:	0002f04c 	.word	0x0002f04c
   1cce0:	0002d0a4 	.word	0x0002d0a4

0001cce4 <att_read_group_rsp>:
{
   1cce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cce8:	b08a      	sub	sp, #40	; 0x28
   1ccea:	4604      	mov	r4, r0
   1ccec:	460f      	mov	r7, r1
   1ccee:	4615      	mov	r5, r2
   1ccf0:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1ccf2:	f8d0 8004 	ldr.w	r8, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1ccf6:	2214      	movs	r2, #20
   1ccf8:	2100      	movs	r1, #0
   1ccfa:	eb0d 0002 	add.w	r0, sp, r2
   1ccfe:	f00a fc14 	bl	2752a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1cd02:	2201      	movs	r2, #1
   1cd04:	2111      	movs	r1, #17
   1cd06:	4640      	mov	r0, r8
   1cd08:	f7ff ff78 	bl	1cbfc <bt_att_create_pdu>
   1cd0c:	9007      	str	r0, [sp, #28]
	if (!data.buf) {
   1cd0e:	b368      	cbz	r0, 1cd6c <att_read_group_rsp+0x88>
	data.chan = chan;
   1cd10:	9405      	str	r4, [sp, #20]
	data.uuid = uuid;
   1cd12:	9706      	str	r7, [sp, #24]
	return net_buf_simple_add(&buf->b, len);
   1cd14:	2101      	movs	r1, #1
   1cd16:	300c      	adds	r0, #12
   1cd18:	f00d f8df 	bl	29eda <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1cd1c:	9008      	str	r0, [sp, #32]
	data.rsp->len = 0U;
   1cd1e:	2200      	movs	r2, #0
   1cd20:	7002      	strb	r2, [r0, #0]
	data.group = NULL;
   1cd22:	9209      	str	r2, [sp, #36]	; 0x24
   1cd24:	ab05      	add	r3, sp, #20
   1cd26:	9302      	str	r3, [sp, #8]
   1cd28:	4b11      	ldr	r3, [pc, #68]	; (1cd70 <att_read_group_rsp+0x8c>)
   1cd2a:	9301      	str	r3, [sp, #4]
   1cd2c:	9200      	str	r2, [sp, #0]
   1cd2e:	4613      	mov	r3, r2
   1cd30:	4631      	mov	r1, r6
   1cd32:	4628      	mov	r0, r5
   1cd34:	f000 ffb0 	bl	1dc98 <bt_gatt_foreach_attr_type>
	if (!data.rsp->len) {
   1cd38:	9b08      	ldr	r3, [sp, #32]
   1cd3a:	781e      	ldrb	r6, [r3, #0]
   1cd3c:	b146      	cbz	r6, 1cd50 <att_read_group_rsp+0x6c>
	bt_att_chan_send_rsp(chan, data.buf);
   1cd3e:	9907      	ldr	r1, [sp, #28]
   1cd40:	4620      	mov	r0, r4
   1cd42:	f00b fbb6 	bl	284b2 <bt_att_chan_send_rsp>
	return 0;
   1cd46:	2600      	movs	r6, #0
}
   1cd48:	4630      	mov	r0, r6
   1cd4a:	b00a      	add	sp, #40	; 0x28
   1cd4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1cd50:	9b07      	ldr	r3, [sp, #28]
   1cd52:	6998      	ldr	r0, [r3, #24]
   1cd54:	f7ff fa00 	bl	1c158 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1cd58:	9807      	ldr	r0, [sp, #28]
   1cd5a:	f00d f877 	bl	29e4c <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   1cd5e:	230a      	movs	r3, #10
   1cd60:	462a      	mov	r2, r5
   1cd62:	2110      	movs	r1, #16
   1cd64:	4620      	mov	r0, r4
   1cd66:	f00b fdf7 	bl	28958 <send_err_rsp>
		return 0;
   1cd6a:	e7ed      	b.n	1cd48 <att_read_group_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
   1cd6c:	260e      	movs	r6, #14
   1cd6e:	e7eb      	b.n	1cd48 <att_read_group_rsp+0x64>
   1cd70:	0001c255 	.word	0x0001c255

0001cd74 <att_read_mult_vl_req>:
{
   1cd74:	b570      	push	{r4, r5, r6, lr}
   1cd76:	b088      	sub	sp, #32
   1cd78:	4606      	mov	r6, r0
   1cd7a:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
   1cd7c:	6844      	ldr	r4, [r0, #4]
	if (!bt_gatt_change_aware(conn, true)) {
   1cd7e:	2101      	movs	r1, #1
   1cd80:	4620      	mov	r0, r4
   1cd82:	f00c feb1 	bl	29ae8 <bt_gatt_change_aware>
   1cd86:	b950      	cbnz	r0, 1cd9e <att_read_mult_vl_req+0x2a>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1cd88:	2105      	movs	r1, #5
   1cd8a:	f106 0090 	add.w	r0, r6, #144	; 0x90
   1cd8e:	f00b fd62 	bl	28856 <atomic_test_and_set_bit>
   1cd92:	b110      	cbz	r0, 1cd9a <att_read_mult_vl_req+0x26>
			return 0;
   1cd94:	2000      	movs	r0, #0
}
   1cd96:	b008      	add	sp, #32
   1cd98:	bd70      	pop	{r4, r5, r6, pc}
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1cd9a:	2012      	movs	r0, #18
   1cd9c:	e7fb      	b.n	1cd96 <att_read_mult_vl_req+0x22>
	(void)memset(&data, 0, sizeof(data));
   1cd9e:	2210      	movs	r2, #16
   1cda0:	2100      	movs	r1, #0
   1cda2:	eb0d 0002 	add.w	r0, sp, r2
   1cda6:	f00a fbc0 	bl	2752a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   1cdaa:	2200      	movs	r2, #0
   1cdac:	2121      	movs	r1, #33	; 0x21
   1cdae:	4620      	mov	r0, r4
   1cdb0:	f7ff ff24 	bl	1cbfc <bt_att_create_pdu>
   1cdb4:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1cdb6:	b378      	cbz	r0, 1ce18 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   1cdb8:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
   1cdba:	8a2b      	ldrh	r3, [r5, #16]
   1cdbc:	2b01      	cmp	r3, #1
   1cdbe:	d925      	bls.n	1ce0c <att_read_mult_vl_req+0x98>
	return net_buf_simple_pull_le16(&buf->b);
   1cdc0:	f105 000c 	add.w	r0, r5, #12
   1cdc4:	f00d f8c3 	bl	29f4e <net_buf_simple_pull_le16>
   1cdc8:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1cdca:	2301      	movs	r3, #1
   1cdcc:	f88d 301c 	strb.w	r3, [sp, #28]
   1cdd0:	ab04      	add	r3, sp, #16
   1cdd2:	9302      	str	r3, [sp, #8]
   1cdd4:	4b11      	ldr	r3, [pc, #68]	; (1ce1c <att_read_mult_vl_req+0xa8>)
   1cdd6:	9301      	str	r3, [sp, #4]
   1cdd8:	2200      	movs	r2, #0
   1cdda:	9200      	str	r2, [sp, #0]
   1cddc:	4613      	mov	r3, r2
   1cdde:	4601      	mov	r1, r0
   1cde0:	f000 ff5a 	bl	1dc98 <bt_gatt_foreach_attr_type>
		if (data.err) {
   1cde4:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1cde8:	2b00      	cmp	r3, #0
   1cdea:	d0e6      	beq.n	1cdba <att_read_mult_vl_req+0x46>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1cdec:	9b06      	ldr	r3, [sp, #24]
   1cdee:	6998      	ldr	r0, [r3, #24]
   1cdf0:	f7ff f9b2 	bl	1c158 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1cdf4:	9806      	ldr	r0, [sp, #24]
   1cdf6:	f00d f829 	bl	29e4c <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_VL_REQ, handle,
   1cdfa:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1cdfe:	4622      	mov	r2, r4
   1ce00:	2120      	movs	r1, #32
   1ce02:	4630      	mov	r0, r6
   1ce04:	f00b fda8 	bl	28958 <send_err_rsp>
			return 0;
   1ce08:	2000      	movs	r0, #0
   1ce0a:	e7c4      	b.n	1cd96 <att_read_mult_vl_req+0x22>
	bt_att_chan_send_rsp(chan, data.buf);
   1ce0c:	9906      	ldr	r1, [sp, #24]
   1ce0e:	4630      	mov	r0, r6
   1ce10:	f00b fb4f 	bl	284b2 <bt_att_chan_send_rsp>
	return 0;
   1ce14:	2000      	movs	r0, #0
   1ce16:	e7be      	b.n	1cd96 <att_read_mult_vl_req+0x22>
		return BT_ATT_ERR_UNLIKELY;
   1ce18:	200e      	movs	r0, #14
   1ce1a:	e7bc      	b.n	1cd96 <att_read_mult_vl_req+0x22>
   1ce1c:	000286f1 	.word	0x000286f1

0001ce20 <att_read_mult_req>:
{
   1ce20:	b570      	push	{r4, r5, r6, lr}
   1ce22:	b088      	sub	sp, #32
   1ce24:	4606      	mov	r6, r0
   1ce26:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
   1ce28:	6844      	ldr	r4, [r0, #4]
	if (!bt_gatt_change_aware(conn, true)) {
   1ce2a:	2101      	movs	r1, #1
   1ce2c:	4620      	mov	r0, r4
   1ce2e:	f00c fe5b 	bl	29ae8 <bt_gatt_change_aware>
   1ce32:	b950      	cbnz	r0, 1ce4a <att_read_mult_req+0x2a>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1ce34:	2105      	movs	r1, #5
   1ce36:	f106 0090 	add.w	r0, r6, #144	; 0x90
   1ce3a:	f00b fd0c 	bl	28856 <atomic_test_and_set_bit>
   1ce3e:	b110      	cbz	r0, 1ce46 <att_read_mult_req+0x26>
			return 0;
   1ce40:	2000      	movs	r0, #0
}
   1ce42:	b008      	add	sp, #32
   1ce44:	bd70      	pop	{r4, r5, r6, pc}
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1ce46:	2012      	movs	r0, #18
   1ce48:	e7fb      	b.n	1ce42 <att_read_mult_req+0x22>
	(void)memset(&data, 0, sizeof(data));
   1ce4a:	2210      	movs	r2, #16
   1ce4c:	2100      	movs	r1, #0
   1ce4e:	eb0d 0002 	add.w	r0, sp, r2
   1ce52:	f00a fb6a 	bl	2752a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1ce56:	2200      	movs	r2, #0
   1ce58:	210f      	movs	r1, #15
   1ce5a:	4620      	mov	r0, r4
   1ce5c:	f7ff fece 	bl	1cbfc <bt_att_create_pdu>
   1ce60:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1ce62:	b378      	cbz	r0, 1cec4 <att_read_mult_req+0xa4>
	data.chan = chan;
   1ce64:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
   1ce66:	8a2b      	ldrh	r3, [r5, #16]
   1ce68:	2b01      	cmp	r3, #1
   1ce6a:	d925      	bls.n	1ceb8 <att_read_mult_req+0x98>
   1ce6c:	f105 000c 	add.w	r0, r5, #12
   1ce70:	f00d f86d 	bl	29f4e <net_buf_simple_pull_le16>
   1ce74:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1ce76:	2301      	movs	r3, #1
   1ce78:	f88d 301c 	strb.w	r3, [sp, #28]
   1ce7c:	ab04      	add	r3, sp, #16
   1ce7e:	9302      	str	r3, [sp, #8]
   1ce80:	4b11      	ldr	r3, [pc, #68]	; (1cec8 <att_read_mult_req+0xa8>)
   1ce82:	9301      	str	r3, [sp, #4]
   1ce84:	2200      	movs	r2, #0
   1ce86:	9200      	str	r2, [sp, #0]
   1ce88:	4613      	mov	r3, r2
   1ce8a:	4601      	mov	r1, r0
   1ce8c:	f000 ff04 	bl	1dc98 <bt_gatt_foreach_attr_type>
		if (data.err) {
   1ce90:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1ce94:	2b00      	cmp	r3, #0
   1ce96:	d0e6      	beq.n	1ce66 <att_read_mult_req+0x46>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1ce98:	9b06      	ldr	r3, [sp, #24]
   1ce9a:	6998      	ldr	r0, [r3, #24]
   1ce9c:	f7ff f95c 	bl	1c158 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1cea0:	9806      	ldr	r0, [sp, #24]
   1cea2:	f00c ffd3 	bl	29e4c <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_REQ, handle,
   1cea6:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1ceaa:	4622      	mov	r2, r4
   1ceac:	210e      	movs	r1, #14
   1ceae:	4630      	mov	r0, r6
   1ceb0:	f00b fd52 	bl	28958 <send_err_rsp>
			return 0;
   1ceb4:	2000      	movs	r0, #0
   1ceb6:	e7c4      	b.n	1ce42 <att_read_mult_req+0x22>
	bt_att_chan_send_rsp(chan, data.buf);
   1ceb8:	9906      	ldr	r1, [sp, #24]
   1ceba:	4630      	mov	r0, r6
   1cebc:	f00b faf9 	bl	284b2 <bt_att_chan_send_rsp>
	return 0;
   1cec0:	2000      	movs	r0, #0
   1cec2:	e7be      	b.n	1ce42 <att_read_mult_req+0x22>
		return BT_ATT_ERR_UNLIKELY;
   1cec4:	200e      	movs	r0, #14
   1cec6:	e7bc      	b.n	1ce42 <att_read_mult_req+0x22>
   1cec8:	00028757 	.word	0x00028757

0001cecc <att_read_rsp>:
{
   1cecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ced0:	b088      	sub	sp, #32
   1ced2:	4604      	mov	r4, r0
   1ced4:	4688      	mov	r8, r1
   1ced6:	4616      	mov	r6, r2
   1ced8:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1ceda:	6847      	ldr	r7, [r0, #4]
	if (!bt_gatt_change_aware(conn, true)) {
   1cedc:	2101      	movs	r1, #1
   1cede:	4638      	mov	r0, r7
   1cee0:	f00c fe02 	bl	29ae8 <bt_gatt_change_aware>
   1cee4:	b128      	cbz	r0, 1cef2 <att_read_rsp+0x26>
	if (!handle) {
   1cee6:	b975      	cbnz	r5, 1cf06 <att_read_rsp+0x3a>
		return BT_ATT_ERR_INVALID_HANDLE;
   1cee8:	2601      	movs	r6, #1
}
   1ceea:	4630      	mov	r0, r6
   1ceec:	b008      	add	sp, #32
   1ceee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1cef2:	2105      	movs	r1, #5
   1cef4:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1cef8:	f00b fcad 	bl	28856 <atomic_test_and_set_bit>
   1cefc:	b108      	cbz	r0, 1cf02 <att_read_rsp+0x36>
			return 0;
   1cefe:	2600      	movs	r6, #0
   1cf00:	e7f3      	b.n	1ceea <att_read_rsp+0x1e>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1cf02:	2612      	movs	r6, #18
   1cf04:	e7f1      	b.n	1ceea <att_read_rsp+0x1e>
	(void)memset(&data, 0, sizeof(data));
   1cf06:	2210      	movs	r2, #16
   1cf08:	2100      	movs	r1, #0
   1cf0a:	eb0d 0002 	add.w	r0, sp, r2
   1cf0e:	f00a fb0c 	bl	2752a <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1cf12:	2200      	movs	r2, #0
   1cf14:	4631      	mov	r1, r6
   1cf16:	4638      	mov	r0, r7
   1cf18:	f7ff fe70 	bl	1cbfc <bt_att_create_pdu>
   1cf1c:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1cf1e:	b350      	cbz	r0, 1cf76 <att_read_rsp+0xaa>
	data.chan = chan;
   1cf20:	9404      	str	r4, [sp, #16]
	data.offset = offset;
   1cf22:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1cf26:	f8ad 3014 	strh.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1cf2a:	2301      	movs	r3, #1
   1cf2c:	f88d 301c 	strb.w	r3, [sp, #28]
   1cf30:	ab04      	add	r3, sp, #16
   1cf32:	9302      	str	r3, [sp, #8]
   1cf34:	4b11      	ldr	r3, [pc, #68]	; (1cf7c <att_read_rsp+0xb0>)
   1cf36:	9301      	str	r3, [sp, #4]
   1cf38:	2200      	movs	r2, #0
   1cf3a:	9200      	str	r2, [sp, #0]
   1cf3c:	4613      	mov	r3, r2
   1cf3e:	4629      	mov	r1, r5
   1cf40:	4628      	mov	r0, r5
   1cf42:	f000 fea9 	bl	1dc98 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1cf46:	f89d 601c 	ldrb.w	r6, [sp, #28]
   1cf4a:	b926      	cbnz	r6, 1cf56 <att_read_rsp+0x8a>
	bt_att_chan_send_rsp(chan, data.buf);
   1cf4c:	9906      	ldr	r1, [sp, #24]
   1cf4e:	4620      	mov	r0, r4
   1cf50:	f00b faaf 	bl	284b2 <bt_att_chan_send_rsp>
	return 0;
   1cf54:	e7c9      	b.n	1ceea <att_read_rsp+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1cf56:	9b06      	ldr	r3, [sp, #24]
   1cf58:	6998      	ldr	r0, [r3, #24]
   1cf5a:	f7ff f8fd 	bl	1c158 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1cf5e:	9806      	ldr	r0, [sp, #24]
   1cf60:	f00c ff74 	bl	29e4c <net_buf_unref>
		send_err_rsp(chan, op, handle, data.err);
   1cf64:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1cf68:	462a      	mov	r2, r5
   1cf6a:	4641      	mov	r1, r8
   1cf6c:	4620      	mov	r0, r4
   1cf6e:	f00b fcf3 	bl	28958 <send_err_rsp>
		return 0;
   1cf72:	2600      	movs	r6, #0
   1cf74:	e7b9      	b.n	1ceea <att_read_rsp+0x1e>
		return BT_ATT_ERR_UNLIKELY;
   1cf76:	260e      	movs	r6, #14
   1cf78:	e7b7      	b.n	1ceea <att_read_rsp+0x1e>
   1cf7a:	bf00      	nop
   1cf7c:	00028757 	.word	0x00028757

0001cf80 <att_read_type_rsp>:
{
   1cf80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cf84:	b08a      	sub	sp, #40	; 0x28
   1cf86:	4604      	mov	r4, r0
   1cf88:	460f      	mov	r7, r1
   1cf8a:	4615      	mov	r5, r2
   1cf8c:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1cf8e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1cf92:	2218      	movs	r2, #24
   1cf94:	2100      	movs	r1, #0
   1cf96:	a804      	add	r0, sp, #16
   1cf98:	f00a fac7 	bl	2752a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1cf9c:	2201      	movs	r2, #1
   1cf9e:	2109      	movs	r1, #9
   1cfa0:	4640      	mov	r0, r8
   1cfa2:	f7ff fe2b 	bl	1cbfc <bt_att_create_pdu>
   1cfa6:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1cfa8:	b380      	cbz	r0, 1d00c <att_read_type_rsp+0x8c>
	data.chan = chan;
   1cfaa:	9404      	str	r4, [sp, #16]
	data.uuid = uuid;
   1cfac:	9705      	str	r7, [sp, #20]
	return net_buf_simple_add(&buf->b, len);
   1cfae:	2101      	movs	r1, #1
   1cfb0:	300c      	adds	r0, #12
   1cfb2:	f00c ff92 	bl	29eda <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1cfb6:	9007      	str	r0, [sp, #28]
	data.rsp->len = 0U;
   1cfb8:	2200      	movs	r2, #0
   1cfba:	7002      	strb	r2, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1cfbc:	230a      	movs	r3, #10
   1cfbe:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1cfc2:	ab04      	add	r3, sp, #16
   1cfc4:	9302      	str	r3, [sp, #8]
   1cfc6:	4b12      	ldr	r3, [pc, #72]	; (1d010 <att_read_type_rsp+0x90>)
   1cfc8:	9301      	str	r3, [sp, #4]
   1cfca:	9200      	str	r2, [sp, #0]
   1cfcc:	4613      	mov	r3, r2
   1cfce:	4631      	mov	r1, r6
   1cfd0:	4628      	mov	r0, r5
   1cfd2:	f000 fe61 	bl	1dc98 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1cfd6:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   1cfda:	b93e      	cbnz	r6, 1cfec <att_read_type_rsp+0x6c>
	bt_att_chan_send_rsp(chan, data.buf);
   1cfdc:	9906      	ldr	r1, [sp, #24]
   1cfde:	4620      	mov	r0, r4
   1cfe0:	f00b fa67 	bl	284b2 <bt_att_chan_send_rsp>
}
   1cfe4:	4630      	mov	r0, r6
   1cfe6:	b00a      	add	sp, #40	; 0x28
   1cfe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1cfec:	9b06      	ldr	r3, [sp, #24]
   1cfee:	6998      	ldr	r0, [r3, #24]
   1cff0:	f7ff f8b2 	bl	1c158 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1cff4:	9806      	ldr	r0, [sp, #24]
   1cff6:	f00c ff29 	bl	29e4c <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, start_handle,
   1cffa:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   1cffe:	462a      	mov	r2, r5
   1d000:	2108      	movs	r1, #8
   1d002:	4620      	mov	r0, r4
   1d004:	f00b fca8 	bl	28958 <send_err_rsp>
		return 0;
   1d008:	2600      	movs	r6, #0
   1d00a:	e7eb      	b.n	1cfe4 <att_read_type_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
   1d00c:	260e      	movs	r6, #14
   1d00e:	e7e9      	b.n	1cfe4 <att_read_type_rsp+0x64>
   1d010:	0001c309 	.word	0x0001c309

0001d014 <att_find_type_rsp>:
{
   1d014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d018:	b08a      	sub	sp, #40	; 0x28
   1d01a:	4604      	mov	r4, r0
   1d01c:	460d      	mov	r5, r1
   1d01e:	4616      	mov	r6, r2
   1d020:	461f      	mov	r7, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1d022:	f8d0 8004 	ldr.w	r8, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1d026:	2214      	movs	r2, #20
   1d028:	2100      	movs	r1, #0
   1d02a:	eb0d 0002 	add.w	r0, sp, r2
   1d02e:	f00a fa7c 	bl	2752a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1d032:	2200      	movs	r2, #0
   1d034:	2107      	movs	r1, #7
   1d036:	4640      	mov	r0, r8
   1d038:	f7ff fde0 	bl	1cbfc <bt_att_create_pdu>
   1d03c:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1d03e:	b378      	cbz	r0, 1d0a0 <att_find_type_rsp+0x8c>
	data.chan = chan;
   1d040:	9405      	str	r4, [sp, #20]
	data.group = NULL;
   1d042:	2200      	movs	r2, #0
   1d044:	9207      	str	r2, [sp, #28]
	data.value = value;
   1d046:	9708      	str	r7, [sp, #32]
	data.value_len = value_len;
   1d048:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1d04c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1d050:	230a      	movs	r3, #10
   1d052:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   1d056:	ab05      	add	r3, sp, #20
   1d058:	9302      	str	r3, [sp, #8]
   1d05a:	4b12      	ldr	r3, [pc, #72]	; (1d0a4 <att_find_type_rsp+0x90>)
   1d05c:	9301      	str	r3, [sp, #4]
   1d05e:	9200      	str	r2, [sp, #0]
   1d060:	4613      	mov	r3, r2
   1d062:	4631      	mov	r1, r6
   1d064:	4628      	mov	r0, r5
   1d066:	f000 fe17 	bl	1dc98 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1d06a:	f89d 6025 	ldrb.w	r6, [sp, #37]	; 0x25
   1d06e:	b93e      	cbnz	r6, 1d080 <att_find_type_rsp+0x6c>
	bt_att_chan_send_rsp(chan, data.buf);
   1d070:	9906      	ldr	r1, [sp, #24]
   1d072:	4620      	mov	r0, r4
   1d074:	f00b fa1d 	bl	284b2 <bt_att_chan_send_rsp>
}
   1d078:	4630      	mov	r0, r6
   1d07a:	b00a      	add	sp, #40	; 0x28
   1d07c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1d080:	9b06      	ldr	r3, [sp, #24]
   1d082:	6998      	ldr	r0, [r3, #24]
   1d084:	f7ff f868 	bl	1c158 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1d088:	9806      	ldr	r0, [sp, #24]
   1d08a:	f00c fedf 	bl	29e4c <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   1d08e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   1d092:	462a      	mov	r2, r5
   1d094:	2106      	movs	r1, #6
   1d096:	4620      	mov	r0, r4
   1d098:	f00b fc5e 	bl	28958 <send_err_rsp>
		return 0;
   1d09c:	2600      	movs	r6, #0
   1d09e:	e7eb      	b.n	1d078 <att_find_type_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
   1d0a0:	260e      	movs	r6, #14
   1d0a2:	e7e9      	b.n	1d078 <att_find_type_rsp+0x64>
   1d0a4:	0001c3b1 	.word	0x0001c3b1

0001d0a8 <att_find_info_rsp>:
{
   1d0a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d0aa:	b089      	sub	sp, #36	; 0x24
   1d0ac:	4604      	mov	r4, r0
   1d0ae:	460f      	mov	r7, r1
   1d0b0:	4616      	mov	r6, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1d0b2:	6845      	ldr	r5, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1d0b4:	2210      	movs	r2, #16
   1d0b6:	2100      	movs	r1, #0
   1d0b8:	eb0d 0002 	add.w	r0, sp, r2
   1d0bc:	f00a fa35 	bl	2752a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1d0c0:	2200      	movs	r2, #0
   1d0c2:	2105      	movs	r1, #5
   1d0c4:	4628      	mov	r0, r5
   1d0c6:	f7ff fd99 	bl	1cbfc <bt_att_create_pdu>
   1d0ca:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
   1d0cc:	b318      	cbz	r0, 1d116 <att_find_info_rsp+0x6e>
	data.chan = chan;
   1d0ce:	9404      	str	r4, [sp, #16]
   1d0d0:	ab04      	add	r3, sp, #16
   1d0d2:	9302      	str	r3, [sp, #8]
   1d0d4:	4b11      	ldr	r3, [pc, #68]	; (1d11c <att_find_info_rsp+0x74>)
   1d0d6:	9301      	str	r3, [sp, #4]
   1d0d8:	2200      	movs	r2, #0
   1d0da:	9200      	str	r2, [sp, #0]
   1d0dc:	4613      	mov	r3, r2
   1d0de:	4631      	mov	r1, r6
   1d0e0:	4638      	mov	r0, r7
   1d0e2:	f000 fdd9 	bl	1dc98 <bt_gatt_foreach_attr_type>
	if (!data.rsp) {
   1d0e6:	9b06      	ldr	r3, [sp, #24]
   1d0e8:	b133      	cbz	r3, 1d0f8 <att_find_info_rsp+0x50>
	bt_att_chan_send_rsp(chan, data.buf);
   1d0ea:	9905      	ldr	r1, [sp, #20]
   1d0ec:	4620      	mov	r0, r4
   1d0ee:	f00b f9e0 	bl	284b2 <bt_att_chan_send_rsp>
	return 0;
   1d0f2:	2000      	movs	r0, #0
}
   1d0f4:	b009      	add	sp, #36	; 0x24
   1d0f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1d0f8:	9b05      	ldr	r3, [sp, #20]
   1d0fa:	6998      	ldr	r0, [r3, #24]
   1d0fc:	f7ff f82c 	bl	1c158 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1d100:	9805      	ldr	r0, [sp, #20]
   1d102:	f00c fea3 	bl	29e4c <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, start_handle,
   1d106:	230a      	movs	r3, #10
   1d108:	463a      	mov	r2, r7
   1d10a:	2104      	movs	r1, #4
   1d10c:	4620      	mov	r0, r4
   1d10e:	f00b fc23 	bl	28958 <send_err_rsp>
		return 0;
   1d112:	2000      	movs	r0, #0
   1d114:	e7ee      	b.n	1d0f4 <att_find_info_rsp+0x4c>
		return BT_ATT_ERR_UNLIKELY;
   1d116:	200e      	movs	r0, #14
   1d118:	e7ec      	b.n	1d0f4 <att_find_info_rsp+0x4c>
   1d11a:	bf00      	nop
   1d11c:	0002879f 	.word	0x0002879f

0001d120 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   1d120:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   1d122:	4809      	ldr	r0, [pc, #36]	; (1d148 <bt_att_init+0x28>)
   1d124:	f00e ffd4 	bl	2c0d0 <z_impl_k_queue_init>
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
   1d128:	2400      	movs	r4, #0
   1d12a:	e008      	b.n	1d13e <bt_att_init+0x1e>
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   1d12c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1d130:	0093      	lsls	r3, r2, #2
   1d132:	4906      	ldr	r1, [pc, #24]	; (1d14c <bt_att_init+0x2c>)
   1d134:	4419      	add	r1, r3
   1d136:	4804      	ldr	r0, [pc, #16]	; (1d148 <bt_att_init+0x28>)
   1d138:	f00e ffd6 	bl	2c0e8 <k_queue_append>
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
   1d13c:	3401      	adds	r4, #1
   1d13e:	2c02      	cmp	r4, #2
   1d140:	d9f4      	bls.n	1d12c <bt_att_init+0xc>
	}

	bt_gatt_init();
   1d142:	f000 fd43 	bl	1dbcc <bt_gatt_init>

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   1d146:	bd10      	pop	{r4, pc}
   1d148:	20000af4 	.word	0x20000af4
   1d14c:	20007ffc 	.word	0x20007ffc

0001d150 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1d150:	b530      	push	{r4, r5, lr}
   1d152:	b083      	sub	sp, #12
   1d154:	4605      	mov	r5, r0
   1d156:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   1d158:	2300      	movs	r3, #0
   1d15a:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1d15c:	f007 fd18 	bl	24b90 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   1d160:	4b0b      	ldr	r3, [pc, #44]	; (1d190 <bt_att_req_alloc+0x40>)
   1d162:	681b      	ldr	r3, [r3, #0]
   1d164:	4283      	cmp	r3, r0
   1d166:	d00e      	beq.n	1d186 <bt_att_req_alloc+0x36>
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1d168:	462a      	mov	r2, r5
   1d16a:	4623      	mov	r3, r4
   1d16c:	a901      	add	r1, sp, #4
   1d16e:	4809      	ldr	r0, [pc, #36]	; (1d194 <bt_att_req_alloc+0x44>)
   1d170:	f006 fd12 	bl	23b98 <k_mem_slab_alloc>
   1d174:	b950      	cbnz	r0, 1d18c <bt_att_req_alloc+0x3c>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1d176:	2210      	movs	r2, #16
   1d178:	2100      	movs	r1, #0
   1d17a:	9801      	ldr	r0, [sp, #4]
   1d17c:	f00a f9d5 	bl	2752a <memset>

	return req;
   1d180:	9801      	ldr	r0, [sp, #4]
}
   1d182:	b003      	add	sp, #12
   1d184:	bd30      	pop	{r4, r5, pc}
		timeout = K_NO_WAIT;
   1d186:	2500      	movs	r5, #0
   1d188:	462c      	mov	r4, r5
   1d18a:	e7ed      	b.n	1d168 <bt_att_req_alloc+0x18>
		return NULL;
   1d18c:	2000      	movs	r0, #0
   1d18e:	e7f8      	b.n	1d182 <bt_att_req_alloc+0x32>
   1d190:	20008038 	.word	0x20008038
   1d194:	20000a98 	.word	0x20000a98

0001d198 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1d198:	b500      	push	{lr}
   1d19a:	b083      	sub	sp, #12
   1d19c:	9001      	str	r0, [sp, #4]
	LOG_DBG("req %p", req);

	if (req->buf) {
   1d19e:	6883      	ldr	r3, [r0, #8]
   1d1a0:	b14b      	cbz	r3, 1d1b6 <bt_att_req_free+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   1d1a2:	6998      	ldr	r0, [r3, #24]
   1d1a4:	f7fe ffd8 	bl	1c158 <tx_meta_data_free>
		net_buf_unref(req->buf);
   1d1a8:	9b01      	ldr	r3, [sp, #4]
   1d1aa:	6898      	ldr	r0, [r3, #8]
   1d1ac:	f00c fe4e 	bl	29e4c <net_buf_unref>
		req->buf = NULL;
   1d1b0:	9b01      	ldr	r3, [sp, #4]
   1d1b2:	2200      	movs	r2, #0
   1d1b4:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1d1b6:	a901      	add	r1, sp, #4
   1d1b8:	4802      	ldr	r0, [pc, #8]	; (1d1c4 <bt_att_req_free+0x2c>)
   1d1ba:	f00e fe58 	bl	2be6e <k_mem_slab_free>
}
   1d1be:	b003      	add	sp, #12
   1d1c0:	f85d fb04 	ldr.w	pc, [sp], #4
   1d1c4:	20000a98 	.word	0x20000a98

0001d1c8 <att_handle_rsp>:
{
   1d1c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d1cc:	b08a      	sub	sp, #40	; 0x28
   1d1ce:	4604      	mov	r4, r0
   1d1d0:	460f      	mov	r7, r1
   1d1d2:	4691      	mov	r9, r2
   1d1d4:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1d1d6:	30b0      	adds	r0, #176	; 0xb0
   1d1d8:	f00f f903 	bl	2c3e2 <k_work_cancel_delayable>
	if (!chan->req) {
   1d1dc:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   1d1e0:	b1f8      	cbz	r0, 1d222 <att_handle_rsp+0x5a>
	if (chan->req == &cancel) {
   1d1e2:	4b25      	ldr	r3, [pc, #148]	; (1d278 <att_handle_rsp+0xb0>)
   1d1e4:	4298      	cmp	r0, r3
   1d1e6:	d042      	beq.n	1d26e <att_handle_rsp+0xa6>
	func = chan->req->func;
   1d1e8:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   1d1ea:	f04f 0a00 	mov.w	sl, #0
   1d1ee:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   1d1f2:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   1d1f6:	f8d0 800c 	ldr.w	r8, [r0, #12]
	bt_att_req_free(chan->req);
   1d1fa:	f7ff ffcd 	bl	1d198 <bt_att_req_free>
	chan->req = NULL;
   1d1fe:	f8c4 a094 	str.w	sl, [r4, #148]	; 0x94
	att_req_send_process(chan->att);
   1d202:	6820      	ldr	r0, [r4, #0]
   1d204:	f00b f822 	bl	2824c <att_req_send_process>
	if (func) {
   1d208:	b13d      	cbz	r5, 1d21a <att_handle_rsp+0x52>
		func(chan->att->conn, err, pdu, len, params);
   1d20a:	6823      	ldr	r3, [r4, #0]
   1d20c:	6818      	ldr	r0, [r3, #0]
   1d20e:	f8cd 8000 	str.w	r8, [sp]
   1d212:	464b      	mov	r3, r9
   1d214:	463a      	mov	r2, r7
   1d216:	4631      	mov	r1, r6
   1d218:	47a8      	blx	r5
}
   1d21a:	2000      	movs	r0, #0
   1d21c:	b00a      	add	sp, #40	; 0x28
   1d21e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LOG_WRN("No pending ATT request");
   1d222:	4b16      	ldr	r3, [pc, #88]	; (1d27c <att_handle_rsp+0xb4>)
   1d224:	9309      	str	r3, [sp, #36]	; 0x24
   1d226:	2302      	movs	r3, #2
   1d228:	f88d 300c 	strb.w	r3, [sp, #12]
   1d22c:	2500      	movs	r5, #0
   1d22e:	f88d 500d 	strb.w	r5, [sp, #13]
   1d232:	f88d 500e 	strb.w	r5, [sp, #14]
   1d236:	f88d 500f 	strb.w	r5, [sp, #15]
   1d23a:	9a03      	ldr	r2, [sp, #12]
   1d23c:	9208      	str	r2, [sp, #32]
   1d23e:	4629      	mov	r1, r5
   1d240:	f365 0100 	bfi	r1, r5, #0, #1
   1d244:	f365 0141 	bfi	r1, r5, #1, #1
   1d248:	f365 0182 	bfi	r1, r5, #2, #1
   1d24c:	f365 01c5 	bfi	r1, r5, #3, #3
   1d250:	f363 1188 	bfi	r1, r3, #6, #3
   1d254:	2308      	movs	r3, #8
   1d256:	f363 2152 	bfi	r1, r3, #9, #10
   1d25a:	f365 41de 	bfi	r1, r5, #19, #12
   1d25e:	f365 71df 	bfi	r1, r5, #31, #1
   1d262:	462b      	mov	r3, r5
   1d264:	aa08      	add	r2, sp, #32
   1d266:	4806      	ldr	r0, [pc, #24]	; (1d280 <att_handle_rsp+0xb8>)
   1d268:	f009 fcf5 	bl	26c56 <z_impl_z_log_msg_static_create>
		goto process;
   1d26c:	e7c9      	b.n	1d202 <att_handle_rsp+0x3a>
		chan->req = NULL;
   1d26e:	2500      	movs	r5, #0
   1d270:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
		goto process;
   1d274:	e7c5      	b.n	1d202 <att_handle_rsp+0x3a>
   1d276:	bf00      	nop
   1d278:	2000803c 	.word	0x2000803c
   1d27c:	0002f068 	.word	0x0002f068
   1d280:	0002d0a4 	.word	0x0002d0a4

0001d284 <att_error_rsp>:
{
   1d284:	b508      	push	{r3, lr}
	rsp = (void *)buf->data;
   1d286:	68ca      	ldr	r2, [r1, #12]
	if (!chan->req || chan->req == &cancel || !rsp->error) {
   1d288:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   1d28c:	b14b      	cbz	r3, 1d2a2 <att_error_rsp+0x1e>
   1d28e:	4908      	ldr	r1, [pc, #32]	; (1d2b0 <att_error_rsp+0x2c>)
   1d290:	428b      	cmp	r3, r1
   1d292:	d008      	beq.n	1d2a6 <att_error_rsp+0x22>
   1d294:	78d3      	ldrb	r3, [r2, #3]
   1d296:	b143      	cbz	r3, 1d2aa <att_error_rsp+0x26>
	return att_handle_rsp(chan, NULL, 0, err);
   1d298:	2200      	movs	r2, #0
   1d29a:	4611      	mov	r1, r2
   1d29c:	f7ff ff94 	bl	1d1c8 <att_handle_rsp>
}
   1d2a0:	bd08      	pop	{r3, pc}
		err = BT_ATT_ERR_UNLIKELY;
   1d2a2:	230e      	movs	r3, #14
   1d2a4:	e7f8      	b.n	1d298 <att_error_rsp+0x14>
   1d2a6:	230e      	movs	r3, #14
   1d2a8:	e7f6      	b.n	1d298 <att_error_rsp+0x14>
   1d2aa:	230e      	movs	r3, #14
   1d2ac:	e7f4      	b.n	1d298 <att_error_rsp+0x14>
   1d2ae:	bf00      	nop
   1d2b0:	2000803c 	.word	0x2000803c

0001d2b4 <att_reset>:
{
   1d2b4:	b530      	push	{r4, r5, lr}
   1d2b6:	b085      	sub	sp, #20
   1d2b8:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1d2ba:	e005      	b.n	1d2c8 <att_reset+0x14>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1d2bc:	69a0      	ldr	r0, [r4, #24]
   1d2be:	f7fe ff4b 	bl	1c158 <tx_meta_data_free>
		net_buf_unref(buf);
   1d2c2:	4620      	mov	r0, r4
   1d2c4:	f00c fdc2 	bl	29e4c <net_buf_unref>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1d2c8:	2200      	movs	r2, #0
   1d2ca:	2300      	movs	r3, #0
   1d2cc:	9803      	ldr	r0, [sp, #12]
   1d2ce:	300c      	adds	r0, #12
   1d2d0:	f00c fd7c 	bl	29dcc <net_buf_get>
   1d2d4:	4604      	mov	r4, r0
   1d2d6:	2800      	cmp	r0, #0
   1d2d8:	d1f0      	bne.n	1d2bc <att_reset+0x8>
   1d2da:	e00b      	b.n	1d2f4 <att_reset+0x40>
	list->tail = node;
   1d2dc:	609a      	str	r2, [r3, #8]
}
   1d2de:	e011      	b.n	1d304 <att_reset+0x50>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1d2e0:	6818      	ldr	r0, [r3, #0]
   1d2e2:	68e3      	ldr	r3, [r4, #12]
   1d2e4:	9300      	str	r3, [sp, #0]
   1d2e6:	2300      	movs	r3, #0
   1d2e8:	461a      	mov	r2, r3
   1d2ea:	210e      	movs	r1, #14
   1d2ec:	47a8      	blx	r5
		bt_att_req_free(req);
   1d2ee:	4620      	mov	r0, r4
   1d2f0:	f7ff ff52 	bl	1d198 <bt_att_req_free>
	while (!sys_slist_is_empty(&att->reqs)) {
   1d2f4:	9b03      	ldr	r3, [sp, #12]
	return list->head;
   1d2f6:	685c      	ldr	r4, [r3, #4]
   1d2f8:	b144      	cbz	r4, 1d30c <att_reset+0x58>
	return node->next;
   1d2fa:	6822      	ldr	r2, [r4, #0]
	list->head = node;
   1d2fc:	605a      	str	r2, [r3, #4]
	return list->tail;
   1d2fe:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d300:	42a1      	cmp	r1, r4
   1d302:	d0eb      	beq.n	1d2dc <att_reset+0x28>
		if (req->func) {
   1d304:	6865      	ldr	r5, [r4, #4]
   1d306:	2d00      	cmp	r5, #0
   1d308:	d1ea      	bne.n	1d2e0 <att_reset+0x2c>
   1d30a:	e7f0      	b.n	1d2ee <att_reset+0x3a>
	att->conn = NULL;
   1d30c:	2200      	movs	r2, #0
   1d30e:	601a      	str	r2, [r3, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   1d310:	a903      	add	r1, sp, #12
   1d312:	4802      	ldr	r0, [pc, #8]	; (1d31c <att_reset+0x68>)
   1d314:	f00e fdab 	bl	2be6e <k_mem_slab_free>
}
   1d318:	b005      	add	sp, #20
   1d31a:	bd30      	pop	{r4, r5, pc}
   1d31c:	20000a60 	.word	0x20000a60

0001d320 <att_timeout>:
{
   1d320:	b510      	push	{r4, lr}
   1d322:	b088      	sub	sp, #32
   1d324:	4604      	mov	r4, r0
	LOG_ERR("ATT Timeout");
   1d326:	4b15      	ldr	r3, [pc, #84]	; (1d37c <att_timeout+0x5c>)
   1d328:	9307      	str	r3, [sp, #28]
   1d32a:	2302      	movs	r3, #2
   1d32c:	f88d 3004 	strb.w	r3, [sp, #4]
   1d330:	2300      	movs	r3, #0
   1d332:	f88d 3005 	strb.w	r3, [sp, #5]
   1d336:	f88d 3006 	strb.w	r3, [sp, #6]
   1d33a:	f88d 3007 	strb.w	r3, [sp, #7]
   1d33e:	9a01      	ldr	r2, [sp, #4]
   1d340:	9206      	str	r2, [sp, #24]
   1d342:	4619      	mov	r1, r3
   1d344:	f363 0100 	bfi	r1, r3, #0, #1
   1d348:	f363 0141 	bfi	r1, r3, #1, #1
   1d34c:	f363 0182 	bfi	r1, r3, #2, #1
   1d350:	f363 01c5 	bfi	r1, r3, #3, #3
   1d354:	2201      	movs	r2, #1
   1d356:	f362 1188 	bfi	r1, r2, #6, #3
   1d35a:	2208      	movs	r2, #8
   1d35c:	f362 2152 	bfi	r1, r2, #9, #10
   1d360:	f363 41de 	bfi	r1, r3, #19, #12
   1d364:	f363 71df 	bfi	r1, r3, #31, #1
   1d368:	aa06      	add	r2, sp, #24
   1d36a:	4805      	ldr	r0, [pc, #20]	; (1d380 <att_timeout+0x60>)
   1d36c:	f009 fc73 	bl	26c56 <z_impl_z_log_msg_static_create>
	bt_att_disconnected(&chan->chan.chan);
   1d370:	f1a4 00ac 	sub.w	r0, r4, #172	; 0xac
   1d374:	f00b fd0b 	bl	28d8e <bt_att_disconnected>
}
   1d378:	b008      	add	sp, #32
   1d37a:	bd10      	pop	{r4, pc}
   1d37c:	0002f080 	.word	0x0002f080
   1d380:	0002d0a4 	.word	0x0002d0a4

0001d384 <bt_att_chan_req_cancel>:
	return 0;
}

static bool bt_att_chan_req_cancel(struct bt_att_chan *chan,
				   struct bt_att_req *req)
{
   1d384:	b508      	push	{r3, lr}
	if (chan->req != req) {
   1d386:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   1d38a:	428b      	cmp	r3, r1
   1d38c:	d001      	beq.n	1d392 <bt_att_chan_req_cancel+0xe>
		return false;
   1d38e:	2000      	movs	r0, #0
	chan->req = &cancel;

	bt_att_req_free(req);

	return true;
}
   1d390:	bd08      	pop	{r3, pc}
	chan->req = &cancel;
   1d392:	4b04      	ldr	r3, [pc, #16]	; (1d3a4 <bt_att_chan_req_cancel+0x20>)
   1d394:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	bt_att_req_free(req);
   1d398:	4608      	mov	r0, r1
   1d39a:	f7ff fefd 	bl	1d198 <bt_att_req_free>
	return true;
   1d39e:	2001      	movs	r0, #1
   1d3a0:	e7f6      	b.n	1d390 <bt_att_chan_req_cancel+0xc>
   1d3a2:	bf00      	nop
   1d3a4:	2000803c 	.word	0x2000803c

0001d3a8 <bt_gatt_service_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1d3a8:	4b0d      	ldr	r3, [pc, #52]	; (1d3e0 <bt_gatt_service_init+0x38>)
   1d3aa:	2201      	movs	r2, #1
   1d3ac:	f3bf 8f5b 	dmb	ish
   1d3b0:	e853 1f00 	ldrex	r1, [r3]
   1d3b4:	2900      	cmp	r1, #0
   1d3b6:	d103      	bne.n	1d3c0 <bt_gatt_service_init+0x18>
   1d3b8:	e843 2000 	strex	r0, r2, [r3]
   1d3bc:	2800      	cmp	r0, #0
   1d3be:	d1f7      	bne.n	1d3b0 <bt_gatt_service_init+0x8>
   1d3c0:	f3bf 8f5b 	dmb	ish
}
#endif

static void bt_gatt_service_init(void)
{
	if (!atomic_cas(&service_init, 0, 1)) {
   1d3c4:	d101      	bne.n	1d3ca <bt_gatt_service_init+0x22>
		return;
	}

	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1d3c6:	4b07      	ldr	r3, [pc, #28]	; (1d3e4 <bt_gatt_service_init+0x3c>)
   1d3c8:	e006      	b.n	1d3d8 <bt_gatt_service_init+0x30>
   1d3ca:	4770      	bx	lr
		last_static_handle += svc->attr_count;
   1d3cc:	685a      	ldr	r2, [r3, #4]
   1d3ce:	4906      	ldr	r1, [pc, #24]	; (1d3e8 <bt_gatt_service_init+0x40>)
   1d3d0:	8808      	ldrh	r0, [r1, #0]
   1d3d2:	4402      	add	r2, r0
   1d3d4:	800a      	strh	r2, [r1, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1d3d6:	3308      	adds	r3, #8
   1d3d8:	4a04      	ldr	r2, [pc, #16]	; (1d3ec <bt_gatt_service_init+0x44>)
   1d3da:	4293      	cmp	r3, r2
   1d3dc:	d3f6      	bcc.n	1d3cc <bt_gatt_service_init+0x24>
	}
}
   1d3de:	4770      	bx	lr
   1d3e0:	200081ec 	.word	0x200081ec
   1d3e4:	0002d07c 	.word	0x0002d07c
   1d3e8:	20008ec4 	.word	0x20008ec4
   1d3ec:	0002d08c 	.word	0x0002d08c

0001d3f0 <gatt_exchange_mtu_func>:

#if defined(CONFIG_BT_GATT_AUTO_UPDATE_MTU)
static void gatt_exchange_mtu_func(struct bt_conn *conn, uint8_t err,
				   struct bt_gatt_exchange_params *params)
{
	if (err) {
   1d3f0:	2900      	cmp	r1, #0
   1d3f2:	d047      	beq.n	1d484 <gatt_exchange_mtu_func+0x94>
{
   1d3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d3f6:	b083      	sub	sp, #12
   1d3f8:	af00      	add	r7, sp, #0
   1d3fa:	460d      	mov	r5, r1
		LOG_WRN("conn %p err 0x%02x", conn, err);
   1d3fc:	466c      	mov	r4, sp
   1d3fe:	b088      	sub	sp, #32
   1d400:	466b      	mov	r3, sp
   1d402:	f113 0210 	adds.w	r2, r3, #16
   1d406:	d037      	beq.n	1d478 <gatt_exchange_mtu_func+0x88>
   1d408:	2110      	movs	r1, #16
   1d40a:	b162      	cbz	r2, 1d426 <gatt_exchange_mtu_func+0x36>
   1d40c:	468c      	mov	ip, r1
   1d40e:	2904      	cmp	r1, #4
   1d410:	dd01      	ble.n	1d416 <gatt_exchange_mtu_func+0x26>
   1d412:	4e1d      	ldr	r6, [pc, #116]	; (1d488 <gatt_exchange_mtu_func+0x98>)
   1d414:	615e      	str	r6, [r3, #20]
   1d416:	f1bc 0f08 	cmp.w	ip, #8
   1d41a:	dd00      	ble.n	1d41e <gatt_exchange_mtu_func+0x2e>
   1d41c:	6198      	str	r0, [r3, #24]
   1d41e:	f1bc 0f0c 	cmp.w	ip, #12
   1d422:	dd00      	ble.n	1d426 <gatt_exchange_mtu_func+0x36>
   1d424:	61dd      	str	r5, [r3, #28]
   1d426:	290f      	cmp	r1, #15
   1d428:	dd29      	ble.n	1d47e <gatt_exchange_mtu_func+0x8e>
   1d42a:	f04f 0c10 	mov.w	ip, #16
   1d42e:	b13a      	cbz	r2, 1d440 <gatt_exchange_mtu_func+0x50>
   1d430:	2104      	movs	r1, #4
   1d432:	7139      	strb	r1, [r7, #4]
   1d434:	2100      	movs	r1, #0
   1d436:	7179      	strb	r1, [r7, #5]
   1d438:	71b9      	strb	r1, [r7, #6]
   1d43a:	71f9      	strb	r1, [r7, #7]
   1d43c:	6878      	ldr	r0, [r7, #4]
   1d43e:	6118      	str	r0, [r3, #16]
   1d440:	2100      	movs	r1, #0
   1d442:	f36f 0100 	bfc	r1, #0, #1
   1d446:	f36f 0141 	bfc	r1, #1, #1
   1d44a:	f36f 0182 	bfc	r1, #2, #1
   1d44e:	f36f 01c5 	bfc	r1, #3, #3
   1d452:	2302      	movs	r3, #2
   1d454:	f363 1188 	bfi	r1, r3, #6, #3
   1d458:	f40c 7c7d 	and.w	ip, ip, #1012	; 0x3f4
   1d45c:	f36c 2152 	bfi	r1, ip, #9, #10
   1d460:	f36f 41de 	bfc	r1, #19, #12
   1d464:	f36f 71df 	bfc	r1, #31, #1
   1d468:	2300      	movs	r3, #0
   1d46a:	4808      	ldr	r0, [pc, #32]	; (1d48c <gatt_exchange_mtu_func+0x9c>)
   1d46c:	f009 fbf3 	bl	26c56 <z_impl_z_log_msg_static_create>
   1d470:	46a5      	mov	sp, r4
	}
}
   1d472:	370c      	adds	r7, #12
   1d474:	46bd      	mov	sp, r7
   1d476:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_WRN("conn %p err 0x%02x", conn, err);
   1d478:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1d47c:	e7c5      	b.n	1d40a <gatt_exchange_mtu_func+0x1a>
   1d47e:	f06f 0c1b 	mvn.w	ip, #27
   1d482:	e7d4      	b.n	1d42e <gatt_exchange_mtu_func+0x3e>
   1d484:	4770      	bx	lr
   1d486:	bf00      	nop
   1d488:	0002f184 	.word	0x0002f184
   1d48c:	0002d0b4 	.word	0x0002d0b4

0001d490 <find_cf_cfg>:
{
   1d490:	b570      	push	{r4, r5, r6, lr}
   1d492:	4606      	mov	r6, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1d494:	2400      	movs	r4, #0
   1d496:	e007      	b.n	1d4a8 <find_cf_cfg+0x18>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1d498:	4628      	mov	r0, r5
	return memcmp(a, b, sizeof(*a));
   1d49a:	2207      	movs	r2, #7
   1d49c:	490d      	ldr	r1, [pc, #52]	; (1d4d4 <find_cf_cfg+0x44>)
   1d49e:	3001      	adds	r0, #1
   1d4a0:	f00a f802 	bl	274a8 <memcmp>
   1d4a4:	b1a0      	cbz	r0, 1d4d0 <find_cf_cfg+0x40>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1d4a6:	3401      	adds	r4, #1
   1d4a8:	2c07      	cmp	r4, #7
   1d4aa:	d810      	bhi.n	1d4ce <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1d4ac:	4d0a      	ldr	r5, [pc, #40]	; (1d4d8 <find_cf_cfg+0x48>)
   1d4ae:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
   1d4b2:	2e00      	cmp	r6, #0
   1d4b4:	d0f0      	beq.n	1d498 <find_cf_cfg+0x8>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1d4b6:	0123      	lsls	r3, r4, #4
   1d4b8:	4907      	ldr	r1, [pc, #28]	; (1d4d8 <find_cf_cfg+0x48>)
   1d4ba:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   1d4be:	3201      	adds	r2, #1
   1d4c0:	5cc9      	ldrb	r1, [r1, r3]
   1d4c2:	4630      	mov	r0, r6
   1d4c4:	f00a fc9e 	bl	27e04 <bt_conn_is_peer_addr_le>
   1d4c8:	2800      	cmp	r0, #0
   1d4ca:	d0ec      	beq.n	1d4a6 <find_cf_cfg+0x16>
   1d4cc:	e000      	b.n	1d4d0 <find_cf_cfg+0x40>
	return NULL;
   1d4ce:	2500      	movs	r5, #0
}
   1d4d0:	4628      	mov	r0, r5
   1d4d2:	bd70      	pop	{r4, r5, r6, pc}
   1d4d4:	0002e1f0 	.word	0x0002e1f0
   1d4d8:	2000810c 	.word	0x2000810c

0001d4dc <find_sc_cfg>:
{
   1d4dc:	b570      	push	{r4, r5, r6, lr}
   1d4de:	4605      	mov	r5, r0
   1d4e0:	460e      	mov	r6, r1
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1d4e2:	2400      	movs	r4, #0
   1d4e4:	e000      	b.n	1d4e8 <find_sc_cfg+0xc>
   1d4e6:	3401      	adds	r4, #1
   1d4e8:	2c07      	cmp	r4, #7
   1d4ea:	d817      	bhi.n	1d51c <find_sc_cfg+0x40>
		if (id == sc_cfg[i].id &&
   1d4ec:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1d4f0:	4a0b      	ldr	r2, [pc, #44]	; (1d520 <find_sc_cfg+0x44>)
   1d4f2:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   1d4f6:	429d      	cmp	r5, r3
   1d4f8:	d1f5      	bne.n	1d4e6 <find_sc_cfg+0xa>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1d4fa:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1d4fe:	eb02 0083 	add.w	r0, r2, r3, lsl #2
   1d502:	2207      	movs	r2, #7
   1d504:	4631      	mov	r1, r6
   1d506:	3001      	adds	r0, #1
   1d508:	f009 ffce 	bl	274a8 <memcmp>
		if (id == sc_cfg[i].id &&
   1d50c:	2800      	cmp	r0, #0
   1d50e:	d1ea      	bne.n	1d4e6 <find_sc_cfg+0xa>
			return &sc_cfg[i];
   1d510:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1d514:	4802      	ldr	r0, [pc, #8]	; (1d520 <find_sc_cfg+0x44>)
   1d516:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   1d51a:	e000      	b.n	1d51e <find_sc_cfg+0x42>
	return NULL;
   1d51c:	2000      	movs	r0, #0
}
   1d51e:	bd70      	pop	{r4, r5, r6, pc}
   1d520:	2000818c 	.word	0x2000818c

0001d524 <find_ccc_cfg>:
{
   1d524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d526:	4607      	mov	r7, r0
   1d528:	460e      	mov	r6, r1
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1d52a:	2400      	movs	r4, #0
   1d52c:	e00a      	b.n	1d544 <find_ccc_cfg+0x20>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1d52e:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   1d532:	eb06 0040 	add.w	r0, r6, r0, lsl #1
   1d536:	2207      	movs	r2, #7
   1d538:	490d      	ldr	r1, [pc, #52]	; (1d570 <find_ccc_cfg+0x4c>)
   1d53a:	3001      	adds	r0, #1
   1d53c:	f009 ffb4 	bl	274a8 <memcmp>
   1d540:	b198      	cbz	r0, 1d56a <find_ccc_cfg+0x46>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1d542:	3401      	adds	r4, #1
   1d544:	2c07      	cmp	r4, #7
   1d546:	d80f      	bhi.n	1d568 <find_ccc_cfg+0x44>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1d548:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1d54c:	eb06 0543 	add.w	r5, r6, r3, lsl #1
		if (conn) {
   1d550:	2f00      	cmp	r7, #0
   1d552:	d0ec      	beq.n	1d52e <find_ccc_cfg+0xa>
						    &cfg->peer)) {
   1d554:	462a      	mov	r2, r5
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1d556:	3201      	adds	r2, #1
   1d558:	f816 1013 	ldrb.w	r1, [r6, r3, lsl #1]
   1d55c:	4638      	mov	r0, r7
   1d55e:	f00a fc51 	bl	27e04 <bt_conn_is_peer_addr_le>
   1d562:	2800      	cmp	r0, #0
   1d564:	d0ed      	beq.n	1d542 <find_ccc_cfg+0x1e>
   1d566:	e000      	b.n	1d56a <find_ccc_cfg+0x46>
	return NULL;
   1d568:	2500      	movs	r5, #0
}
   1d56a:	4628      	mov	r0, r5
   1d56c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d56e:	bf00      	nop
   1d570:	0002e1f0 	.word	0x0002e1f0

0001d574 <gatt_sub_find>:
{
   1d574:	b570      	push	{r4, r5, r6, lr}
   1d576:	4606      	mov	r6, r0
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   1d578:	2400      	movs	r4, #0
   1d57a:	e007      	b.n	1d58c <gatt_sub_find+0x18>
			if (bt_addr_le_eq(&sub->peer, BT_ADDR_LE_ANY)) {
   1d57c:	4628      	mov	r0, r5
   1d57e:	2207      	movs	r2, #7
   1d580:	490d      	ldr	r1, [pc, #52]	; (1d5b8 <gatt_sub_find+0x44>)
   1d582:	3001      	adds	r0, #1
   1d584:	f009 ff90 	bl	274a8 <memcmp>
   1d588:	b1a0      	cbz	r0, 1d5b4 <gatt_sub_find+0x40>
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   1d58a:	3401      	adds	r4, #1
   1d58c:	2c07      	cmp	r4, #7
   1d58e:	d810      	bhi.n	1d5b2 <gatt_sub_find+0x3e>
		struct gatt_sub *sub = &subscriptions[i];
   1d590:	4d0a      	ldr	r5, [pc, #40]	; (1d5bc <gatt_sub_find+0x48>)
   1d592:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
   1d596:	2e00      	cmp	r6, #0
   1d598:	d0f0      	beq.n	1d57c <gatt_sub_find+0x8>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   1d59a:	0123      	lsls	r3, r4, #4
   1d59c:	4907      	ldr	r1, [pc, #28]	; (1d5bc <gatt_sub_find+0x48>)
   1d59e:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   1d5a2:	3201      	adds	r2, #1
   1d5a4:	5cc9      	ldrb	r1, [r1, r3]
   1d5a6:	4630      	mov	r0, r6
   1d5a8:	f00a fc2c 	bl	27e04 <bt_conn_is_peer_addr_le>
   1d5ac:	2800      	cmp	r0, #0
   1d5ae:	d0ec      	beq.n	1d58a <gatt_sub_find+0x16>
   1d5b0:	e000      	b.n	1d5b4 <gatt_sub_find+0x40>
	return NULL;
   1d5b2:	2500      	movs	r5, #0
}
   1d5b4:	4628      	mov	r0, r5
   1d5b6:	bd70      	pop	{r4, r5, r6, pc}
   1d5b8:	0002e1f0 	.word	0x0002e1f0
   1d5bc:	200081fc 	.word	0x200081fc

0001d5c0 <cf_write>:
{
   1d5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d5c4:	b088      	sub	sp, #32
   1d5c6:	461d      	mov	r5, r3
   1d5c8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	if (offset > sizeof(cfg->data)) {
   1d5cc:	2b01      	cmp	r3, #1
   1d5ce:	d856      	bhi.n	1d67e <cf_write+0xbe>
   1d5d0:	4606      	mov	r6, r0
   1d5d2:	4617      	mov	r7, r2
	if (offset + len > sizeof(cfg->data)) {
   1d5d4:	46a8      	mov	r8, r5
   1d5d6:	442b      	add	r3, r5
   1d5d8:	2b01      	cmp	r3, #1
   1d5da:	d853      	bhi.n	1d684 <cf_write+0xc4>
	cfg = find_cf_cfg(conn);
   1d5dc:	f7ff ff58 	bl	1d490 <find_cf_cfg>
	if (!cfg) {
   1d5e0:	4604      	mov	r4, r0
   1d5e2:	b300      	cbz	r0, 1d626 <cf_write+0x66>
	if (!cf_set_value(cfg, value, len)) {
   1d5e4:	462a      	mov	r2, r5
   1d5e6:	4639      	mov	r1, r7
   1d5e8:	4620      	mov	r0, r4
   1d5ea:	f00b fcf5 	bl	28fd8 <cf_set_value>
   1d5ee:	2800      	cmp	r0, #0
   1d5f0:	d04b      	beq.n	1d68a <cf_write+0xca>
	memcpy(dst, src, sizeof(*dst));
   1d5f2:	2207      	movs	r2, #7
   1d5f4:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1d5f8:	1c60      	adds	r0, r4, #1
   1d5fa:	f009 ff67 	bl	274cc <memcpy>
	cfg->id = conn->id;
   1d5fe:	7a33      	ldrb	r3, [r6, #8]
   1d600:	4620      	mov	r0, r4
   1d602:	f800 3b0c 	strb.w	r3, [r0], #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d606:	f3bf 8f5b 	dmb	ish
   1d60a:	e850 3f00 	ldrex	r3, [r0]
   1d60e:	f043 0301 	orr.w	r3, r3, #1
   1d612:	e840 3200 	strex	r2, r3, [r0]
   1d616:	2a00      	cmp	r2, #0
   1d618:	d1f7      	bne.n	1d60a <cf_write+0x4a>
   1d61a:	f3bf 8f5b 	dmb	ish
}
   1d61e:	4640      	mov	r0, r8
   1d620:	b008      	add	sp, #32
   1d622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_cf_cfg(NULL);
   1d626:	f7ff ff33 	bl	1d490 <find_cf_cfg>
	if (!cfg) {
   1d62a:	4604      	mov	r4, r0
   1d62c:	2800      	cmp	r0, #0
   1d62e:	d1d9      	bne.n	1d5e4 <cf_write+0x24>
		LOG_WRN("No space to store Client Supported Features");
   1d630:	4b17      	ldr	r3, [pc, #92]	; (1d690 <cf_write+0xd0>)
   1d632:	9307      	str	r3, [sp, #28]
   1d634:	2202      	movs	r2, #2
   1d636:	f88d 2004 	strb.w	r2, [sp, #4]
   1d63a:	2300      	movs	r3, #0
   1d63c:	f88d 3005 	strb.w	r3, [sp, #5]
   1d640:	f88d 3006 	strb.w	r3, [sp, #6]
   1d644:	f88d 3007 	strb.w	r3, [sp, #7]
   1d648:	9901      	ldr	r1, [sp, #4]
   1d64a:	9106      	str	r1, [sp, #24]
   1d64c:	4619      	mov	r1, r3
   1d64e:	f363 0100 	bfi	r1, r3, #0, #1
   1d652:	f363 0141 	bfi	r1, r3, #1, #1
   1d656:	f363 0182 	bfi	r1, r3, #2, #1
   1d65a:	f363 01c5 	bfi	r1, r3, #3, #3
   1d65e:	f362 1188 	bfi	r1, r2, #6, #3
   1d662:	2208      	movs	r2, #8
   1d664:	f362 2152 	bfi	r1, r2, #9, #10
   1d668:	f363 41de 	bfi	r1, r3, #19, #12
   1d66c:	f363 71df 	bfi	r1, r3, #31, #1
   1d670:	aa06      	add	r2, sp, #24
   1d672:	4808      	ldr	r0, [pc, #32]	; (1d694 <cf_write+0xd4>)
   1d674:	f009 faef 	bl	26c56 <z_impl_z_log_msg_static_create>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1d678:	f06f 0810 	mvn.w	r8, #16
   1d67c:	e7cf      	b.n	1d61e <cf_write+0x5e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d67e:	f06f 0806 	mvn.w	r8, #6
   1d682:	e7cc      	b.n	1d61e <cf_write+0x5e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1d684:	f06f 080c 	mvn.w	r8, #12
   1d688:	e7c9      	b.n	1d61e <cf_write+0x5e>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1d68a:	f06f 0812 	mvn.w	r8, #18
   1d68e:	e7c6      	b.n	1d61e <cf_write+0x5e>
   1d690:	0002f198 	.word	0x0002f198
   1d694:	0002d0b4 	.word	0x0002d0b4

0001d698 <sc_save>:
{
   1d698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d69c:	b088      	sub	sp, #32
   1d69e:	4607      	mov	r7, r0
   1d6a0:	4688      	mov	r8, r1
   1d6a2:	4616      	mov	r6, r2
   1d6a4:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1d6a6:	f7ff ff19 	bl	1d4dc <find_sc_cfg>
	if (!cfg) {
   1d6aa:	4604      	mov	r4, r0
   1d6ac:	b178      	cbz	r0, 1d6ce <sc_save+0x36>
	if (!(cfg->data.start || cfg->data.end)) {
   1d6ae:	8923      	ldrh	r3, [r4, #8]
   1d6b0:	b913      	cbnz	r3, 1d6b8 <sc_save+0x20>
   1d6b2:	8963      	ldrh	r3, [r4, #10]
   1d6b4:	2b00      	cmp	r3, #0
   1d6b6:	d03c      	beq.n	1d732 <sc_save+0x9a>
	modified = update_range(&cfg->data.start, &cfg->data.end, start, end);
   1d6b8:	462b      	mov	r3, r5
   1d6ba:	4632      	mov	r2, r6
   1d6bc:	f104 010a 	add.w	r1, r4, #10
   1d6c0:	f104 0008 	add.w	r0, r4, #8
   1d6c4:	f00b fc66 	bl	28f94 <update_range>
}
   1d6c8:	b008      	add	sp, #32
   1d6ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1d6ce:	491a      	ldr	r1, [pc, #104]	; (1d738 <sc_save+0xa0>)
   1d6d0:	f7ff ff04 	bl	1d4dc <find_sc_cfg>
		if (!cfg) {
   1d6d4:	4604      	mov	r4, r0
   1d6d6:	b130      	cbz	r0, 1d6e6 <sc_save+0x4e>
		cfg->id = id;
   1d6d8:	f800 7b01 	strb.w	r7, [r0], #1
   1d6dc:	2207      	movs	r2, #7
   1d6de:	4641      	mov	r1, r8
   1d6e0:	f009 fef4 	bl	274cc <memcpy>
}
   1d6e4:	e7e3      	b.n	1d6ae <sc_save+0x16>
			LOG_ERR("unable to save SC: no cfg left");
   1d6e6:	4b15      	ldr	r3, [pc, #84]	; (1d73c <sc_save+0xa4>)
   1d6e8:	9307      	str	r3, [sp, #28]
   1d6ea:	2302      	movs	r3, #2
   1d6ec:	f88d 3004 	strb.w	r3, [sp, #4]
   1d6f0:	2300      	movs	r3, #0
   1d6f2:	f88d 3005 	strb.w	r3, [sp, #5]
   1d6f6:	f88d 3006 	strb.w	r3, [sp, #6]
   1d6fa:	f88d 3007 	strb.w	r3, [sp, #7]
   1d6fe:	9a01      	ldr	r2, [sp, #4]
   1d700:	9206      	str	r2, [sp, #24]
   1d702:	4619      	mov	r1, r3
   1d704:	f363 0100 	bfi	r1, r3, #0, #1
   1d708:	f363 0141 	bfi	r1, r3, #1, #1
   1d70c:	f363 0182 	bfi	r1, r3, #2, #1
   1d710:	f363 01c5 	bfi	r1, r3, #3, #3
   1d714:	2201      	movs	r2, #1
   1d716:	f362 1188 	bfi	r1, r2, #6, #3
   1d71a:	2208      	movs	r2, #8
   1d71c:	f362 2152 	bfi	r1, r2, #9, #10
   1d720:	f363 41de 	bfi	r1, r3, #19, #12
   1d724:	f363 71df 	bfi	r1, r3, #31, #1
   1d728:	aa06      	add	r2, sp, #24
   1d72a:	4805      	ldr	r0, [pc, #20]	; (1d740 <sc_save+0xa8>)
   1d72c:	f009 fa93 	bl	26c56 <z_impl_z_log_msg_static_create>
			return;
   1d730:	e7ca      	b.n	1d6c8 <sc_save+0x30>
		cfg->data.start = start;
   1d732:	8126      	strh	r6, [r4, #8]
		cfg->data.end = end;
   1d734:	8165      	strh	r5, [r4, #10]
		goto done;
   1d736:	e7c7      	b.n	1d6c8 <sc_save+0x30>
   1d738:	0002e1f0 	.word	0x0002e1f0
   1d73c:	0002f1c4 	.word	0x0002f1c4
   1d740:	0002d0b4 	.word	0x0002d0b4

0001d744 <clear_ccc_cfg>:
{
   1d744:	b510      	push	{r4, lr}
   1d746:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
   1d748:	2207      	movs	r2, #7
   1d74a:	4904      	ldr	r1, [pc, #16]	; (1d75c <clear_ccc_cfg+0x18>)
   1d74c:	3001      	adds	r0, #1
   1d74e:	f009 febd 	bl	274cc <memcpy>
	cfg->id = 0U;
   1d752:	2300      	movs	r3, #0
   1d754:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   1d756:	8123      	strh	r3, [r4, #8]
}
   1d758:	bd10      	pop	{r4, pc}
   1d75a:	bf00      	nop
   1d75c:	0002e1f0 	.word	0x0002e1f0

0001d760 <bt_gatt_attr_write_ccc>:
{
   1d760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d764:	b089      	sub	sp, #36	; 0x24
   1d766:	461c      	mov	r4, r3
   1d768:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1d76c:	68cf      	ldr	r7, [r1, #12]
	if (offset) {
   1d76e:	2b00      	cmp	r3, #0
   1d770:	d16e      	bne.n	1d850 <bt_gatt_attr_write_ccc+0xf0>
   1d772:	4681      	mov	r9, r0
   1d774:	460e      	mov	r6, r1
	if (!len || len > sizeof(uint16_t)) {
   1d776:	1e63      	subs	r3, r4, #1
   1d778:	b29b      	uxth	r3, r3
   1d77a:	2b01      	cmp	r3, #1
   1d77c:	d86b      	bhi.n	1d856 <bt_gatt_attr_write_ccc+0xf6>
	if (len < sizeof(uint16_t)) {
   1d77e:	2c01      	cmp	r4, #1
   1d780:	d920      	bls.n	1d7c4 <bt_gatt_attr_write_ccc+0x64>
   1d782:	7853      	ldrb	r3, [r2, #1]
   1d784:	7815      	ldrb	r5, [r2, #0]
   1d786:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   1d78a:	4639      	mov	r1, r7
   1d78c:	4648      	mov	r0, r9
   1d78e:	f7ff fec9 	bl	1d524 <find_ccc_cfg>
	if (!cfg) {
   1d792:	4680      	mov	r8, r0
   1d794:	b1c0      	cbz	r0, 1d7c8 <bt_gatt_attr_write_ccc+0x68>
	if (ccc->cfg_write) {
   1d796:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1d798:	b143      	cbz	r3, 1d7ac <bt_gatt_attr_write_ccc+0x4c>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1d79a:	462a      	mov	r2, r5
   1d79c:	4631      	mov	r1, r6
   1d79e:	4648      	mov	r0, r9
   1d7a0:	4798      	blx	r3
		if (write < 0) {
   1d7a2:	2800      	cmp	r0, #0
   1d7a4:	db0b      	blt.n	1d7be <bt_gatt_attr_write_ccc+0x5e>
		if (write != sizeof(value) && write != 1) {
   1d7a6:	3801      	subs	r0, #1
   1d7a8:	2801      	cmp	r0, #1
   1d7aa:	d857      	bhi.n	1d85c <bt_gatt_attr_write_ccc+0xfc>
	cfg->value = value;
   1d7ac:	f8a8 5008 	strh.w	r5, [r8, #8]
	if (cfg->value != ccc->value) {
   1d7b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
   1d7b4:	429d      	cmp	r5, r3
   1d7b6:	d142      	bne.n	1d83e <bt_gatt_attr_write_ccc+0xde>
	if (!value) {
   1d7b8:	2d00      	cmp	r5, #0
   1d7ba:	d045      	beq.n	1d848 <bt_gatt_attr_write_ccc+0xe8>
	return len;
   1d7bc:	4620      	mov	r0, r4
}
   1d7be:	b009      	add	sp, #36	; 0x24
   1d7c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		value = *(uint8_t *)buf;
   1d7c4:	7815      	ldrb	r5, [r2, #0]
   1d7c6:	e7e0      	b.n	1d78a <bt_gatt_attr_write_ccc+0x2a>
		if (!value) {
   1d7c8:	b90d      	cbnz	r5, 1d7ce <bt_gatt_attr_write_ccc+0x6e>
			return len;
   1d7ca:	4620      	mov	r0, r4
   1d7cc:	e7f7      	b.n	1d7be <bt_gatt_attr_write_ccc+0x5e>
		cfg = find_ccc_cfg(NULL, ccc);
   1d7ce:	4639      	mov	r1, r7
   1d7d0:	2000      	movs	r0, #0
   1d7d2:	f7ff fea7 	bl	1d524 <find_ccc_cfg>
		if (!cfg) {
   1d7d6:	4680      	mov	r8, r0
   1d7d8:	b150      	cbz	r0, 1d7f0 <bt_gatt_attr_write_ccc+0x90>
   1d7da:	2207      	movs	r2, #7
   1d7dc:	f109 0188 	add.w	r1, r9, #136	; 0x88
   1d7e0:	3001      	adds	r0, #1
   1d7e2:	f009 fe73 	bl	274cc <memcpy>
		cfg->id = conn->id;
   1d7e6:	f899 3008 	ldrb.w	r3, [r9, #8]
   1d7ea:	f888 3000 	strb.w	r3, [r8]
   1d7ee:	e7d2      	b.n	1d796 <bt_gatt_attr_write_ccc+0x36>
			LOG_WRN("No space to store CCC cfg");
   1d7f0:	4b1c      	ldr	r3, [pc, #112]	; (1d864 <bt_gatt_attr_write_ccc+0x104>)
   1d7f2:	9307      	str	r3, [sp, #28]
   1d7f4:	2202      	movs	r2, #2
   1d7f6:	f88d 2004 	strb.w	r2, [sp, #4]
   1d7fa:	2300      	movs	r3, #0
   1d7fc:	f88d 3005 	strb.w	r3, [sp, #5]
   1d800:	f88d 3006 	strb.w	r3, [sp, #6]
   1d804:	f88d 3007 	strb.w	r3, [sp, #7]
   1d808:	9901      	ldr	r1, [sp, #4]
   1d80a:	9106      	str	r1, [sp, #24]
   1d80c:	4619      	mov	r1, r3
   1d80e:	f363 0100 	bfi	r1, r3, #0, #1
   1d812:	f363 0141 	bfi	r1, r3, #1, #1
   1d816:	f363 0182 	bfi	r1, r3, #2, #1
   1d81a:	f363 01c5 	bfi	r1, r3, #3, #3
   1d81e:	f362 1188 	bfi	r1, r2, #6, #3
   1d822:	2208      	movs	r2, #8
   1d824:	f362 2152 	bfi	r1, r2, #9, #10
   1d828:	f363 41de 	bfi	r1, r3, #19, #12
   1d82c:	f363 71df 	bfi	r1, r3, #31, #1
   1d830:	aa06      	add	r2, sp, #24
   1d832:	480d      	ldr	r0, [pc, #52]	; (1d868 <bt_gatt_attr_write_ccc+0x108>)
   1d834:	f009 fa0f 	bl	26c56 <z_impl_z_log_msg_static_create>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1d838:	f06f 0010 	mvn.w	r0, #16
   1d83c:	e7bf      	b.n	1d7be <bt_gatt_attr_write_ccc+0x5e>
		gatt_ccc_changed(attr, ccc);
   1d83e:	4639      	mov	r1, r7
   1d840:	4630      	mov	r0, r6
   1d842:	f00b fc03 	bl	2904c <gatt_ccc_changed>
   1d846:	e7b7      	b.n	1d7b8 <bt_gatt_attr_write_ccc+0x58>
		clear_ccc_cfg(cfg);
   1d848:	4640      	mov	r0, r8
   1d84a:	f7ff ff7b 	bl	1d744 <clear_ccc_cfg>
   1d84e:	e7b5      	b.n	1d7bc <bt_gatt_attr_write_ccc+0x5c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d850:	f06f 0006 	mvn.w	r0, #6
   1d854:	e7b3      	b.n	1d7be <bt_gatt_attr_write_ccc+0x5e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1d856:	f06f 000c 	mvn.w	r0, #12
   1d85a:	e7b0      	b.n	1d7be <bt_gatt_attr_write_ccc+0x5e>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1d85c:	f06f 000d 	mvn.w	r0, #13
   1d860:	e7ad      	b.n	1d7be <bt_gatt_attr_write_ccc+0x5e>
   1d862:	bf00      	nop
   1d864:	0002f1e4 	.word	0x0002f1e4
   1d868:	0002d0b4 	.word	0x0002d0b4

0001d86c <gatt_sub_free>:
{
   1d86c:	b508      	push	{r3, lr}
   1d86e:	2207      	movs	r2, #7
   1d870:	4902      	ldr	r1, [pc, #8]	; (1d87c <gatt_sub_free+0x10>)
   1d872:	3001      	adds	r0, #1
   1d874:	f009 fe2a 	bl	274cc <memcpy>
}
   1d878:	bd08      	pop	{r3, pc}
   1d87a:	bf00      	nop
   1d87c:	0002e1f0 	.word	0x0002e1f0

0001d880 <sc_clear>:
{
   1d880:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d882:	b083      	sub	sp, #12
   1d884:	af00      	add	r7, sp, #0
   1d886:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1d888:	f100 0588 	add.w	r5, r0, #136	; 0x88
   1d88c:	4629      	mov	r1, r5
   1d88e:	7a00      	ldrb	r0, [r0, #8]
   1d890:	f00a f878 	bl	27984 <bt_addr_le_is_bonded>
   1d894:	2800      	cmp	r0, #0
   1d896:	d042      	beq.n	1d91e <sc_clear+0x9e>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1d898:	4629      	mov	r1, r5
   1d89a:	7a20      	ldrb	r0, [r4, #8]
   1d89c:	f00b fd28 	bl	292f0 <bt_gatt_clear_sc>
		if (err) {
   1d8a0:	4604      	mov	r4, r0
   1d8a2:	2800      	cmp	r0, #0
   1d8a4:	d042      	beq.n	1d92c <sc_clear+0xac>
			LOG_ERR("Failed to clear SC %d", err);
   1d8a6:	466d      	mov	r5, sp
   1d8a8:	b088      	sub	sp, #32
   1d8aa:	466b      	mov	r3, sp
   1d8ac:	f113 0210 	adds.w	r2, r3, #16
   1d8b0:	d02f      	beq.n	1d912 <sc_clear+0x92>
   1d8b2:	210c      	movs	r1, #12
   1d8b4:	b13a      	cbz	r2, 1d8c6 <sc_clear+0x46>
   1d8b6:	4608      	mov	r0, r1
   1d8b8:	2904      	cmp	r1, #4
   1d8ba:	dd01      	ble.n	1d8c0 <sc_clear+0x40>
   1d8bc:	4e1d      	ldr	r6, [pc, #116]	; (1d934 <sc_clear+0xb4>)
   1d8be:	615e      	str	r6, [r3, #20]
   1d8c0:	2808      	cmp	r0, #8
   1d8c2:	dd00      	ble.n	1d8c6 <sc_clear+0x46>
   1d8c4:	619c      	str	r4, [r3, #24]
   1d8c6:	290b      	cmp	r1, #11
   1d8c8:	dd26      	ble.n	1d918 <sc_clear+0x98>
   1d8ca:	240c      	movs	r4, #12
   1d8cc:	b13a      	cbz	r2, 1d8de <sc_clear+0x5e>
   1d8ce:	2103      	movs	r1, #3
   1d8d0:	7139      	strb	r1, [r7, #4]
   1d8d2:	2100      	movs	r1, #0
   1d8d4:	7179      	strb	r1, [r7, #5]
   1d8d6:	71b9      	strb	r1, [r7, #6]
   1d8d8:	71f9      	strb	r1, [r7, #7]
   1d8da:	6878      	ldr	r0, [r7, #4]
   1d8dc:	6118      	str	r0, [r3, #16]
   1d8de:	2100      	movs	r1, #0
   1d8e0:	f36f 0100 	bfc	r1, #0, #1
   1d8e4:	f36f 0141 	bfc	r1, #1, #1
   1d8e8:	f36f 0182 	bfc	r1, #2, #1
   1d8ec:	f36f 01c5 	bfc	r1, #3, #3
   1d8f0:	2301      	movs	r3, #1
   1d8f2:	f363 1188 	bfi	r1, r3, #6, #3
   1d8f6:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1d8fa:	f364 2152 	bfi	r1, r4, #9, #10
   1d8fe:	f36f 41de 	bfc	r1, #19, #12
   1d902:	f36f 71df 	bfc	r1, #31, #1
   1d906:	2300      	movs	r3, #0
   1d908:	480b      	ldr	r0, [pc, #44]	; (1d938 <sc_clear+0xb8>)
   1d90a:	f009 f9a4 	bl	26c56 <z_impl_z_log_msg_static_create>
   1d90e:	46ad      	mov	sp, r5
   1d910:	e00c      	b.n	1d92c <sc_clear+0xac>
   1d912:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1d916:	e7cd      	b.n	1d8b4 <sc_clear+0x34>
   1d918:	f06f 041b 	mvn.w	r4, #27
   1d91c:	e7d6      	b.n	1d8cc <sc_clear+0x4c>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1d91e:	4629      	mov	r1, r5
   1d920:	7a20      	ldrb	r0, [r4, #8]
   1d922:	f7ff fddb 	bl	1d4dc <find_sc_cfg>
		if (cfg) {
   1d926:	b108      	cbz	r0, 1d92c <sc_clear+0xac>
			clear_sc_cfg(cfg);
   1d928:	f00b fcdc 	bl	292e4 <clear_sc_cfg>
}
   1d92c:	370c      	adds	r7, #12
   1d92e:	46bd      	mov	sp, r7
   1d930:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d932:	bf00      	nop
   1d934:	0002f200 	.word	0x0002f200
   1d938:	0002d0b4 	.word	0x0002d0b4

0001d93c <sc_indicate_rsp>:
{
   1d93c:	b510      	push	{r4, lr}
   1d93e:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d940:	4b1b      	ldr	r3, [pc, #108]	; (1d9b0 <sc_indicate_rsp+0x74>)
   1d942:	f3bf 8f5b 	dmb	ish
   1d946:	e853 2f00 	ldrex	r2, [r3]
   1d94a:	f022 0202 	bic.w	r2, r2, #2
   1d94e:	e843 2100 	strex	r1, r2, [r3]
   1d952:	2900      	cmp	r1, #0
   1d954:	d1f7      	bne.n	1d946 <sc_indicate_rsp+0xa>
   1d956:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d95a:	f3bf 8f5b 	dmb	ish
   1d95e:	681b      	ldr	r3, [r3, #0]
   1d960:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1d964:	f013 0f01 	tst.w	r3, #1
   1d968:	d104      	bne.n	1d974 <sc_indicate_rsp+0x38>
	if (bt_att_fixed_chan_only(conn)) {
   1d96a:	4620      	mov	r0, r4
   1d96c:	f00b faa7 	bl	28ebe <bt_att_fixed_chan_only>
   1d970:	b930      	cbnz	r0, 1d980 <sc_indicate_rsp+0x44>
}
   1d972:	bd10      	pop	{r4, pc}
	k_work_reschedule(&gatt_sc.work, timeout);
   1d974:	2200      	movs	r2, #0
   1d976:	2300      	movs	r3, #0
   1d978:	480e      	ldr	r0, [pc, #56]	; (1d9b4 <sc_indicate_rsp+0x78>)
   1d97a:	f006 fd1d 	bl	243b8 <k_work_reschedule>
   1d97e:	e7f4      	b.n	1d96a <sc_indicate_rsp+0x2e>
		cfg = find_cf_cfg(conn);
   1d980:	4620      	mov	r0, r4
   1d982:	f7ff fd85 	bl	1d490 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1d986:	4603      	mov	r3, r0
   1d988:	2800      	cmp	r0, #0
   1d98a:	d0f2      	beq.n	1d972 <sc_indicate_rsp+0x36>
   1d98c:	7a02      	ldrb	r2, [r0, #8]
   1d98e:	f012 0f01 	tst.w	r2, #1
   1d992:	d0ee      	beq.n	1d972 <sc_indicate_rsp+0x36>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1d994:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d996:	f3bf 8f5b 	dmb	ish
   1d99a:	e853 1f00 	ldrex	r1, [r3]
   1d99e:	f041 0101 	orr.w	r1, r1, #1
   1d9a2:	e843 1200 	strex	r2, r1, [r3]
   1d9a6:	2a00      	cmp	r2, #0
   1d9a8:	d1f7      	bne.n	1d99a <sc_indicate_rsp+0x5e>
   1d9aa:	f3bf 8f5b 	dmb	ish
}
   1d9ae:	e7e0      	b.n	1d972 <sc_indicate_rsp+0x36>
   1d9b0:	20002860 	.word	0x20002860
   1d9b4:	20002830 	.word	0x20002830

0001d9b8 <gatt_write_ccc_rsp>:
{
   1d9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d9ba:	b089      	sub	sp, #36	; 0x24
   1d9bc:	4606      	mov	r6, r0
   1d9be:	460d      	mov	r5, r1
   1d9c0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	atomic_clear_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);
   1d9c2:	f104 0314 	add.w	r3, r4, #20
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d9c6:	f3bf 8f5b 	dmb	ish
   1d9ca:	e853 1f00 	ldrex	r1, [r3]
   1d9ce:	f021 0104 	bic.w	r1, r1, #4
   1d9d2:	e843 1200 	strex	r2, r1, [r3]
   1d9d6:	2a00      	cmp	r2, #0
   1d9d8:	d1f7      	bne.n	1d9ca <gatt_write_ccc_rsp+0x12>
   1d9da:	f3bf 8f5b 	dmb	ish
	if (err) {
   1d9de:	b975      	cbnz	r5, 1d9fe <gatt_write_ccc_rsp+0x46>
	} else if (!params->value) {
   1d9e0:	8a23      	ldrh	r3, [r4, #16]
   1d9e2:	b923      	cbnz	r3, 1d9ee <gatt_write_ccc_rsp+0x36>
		params->notify(conn, params, NULL, 0);
   1d9e4:	6827      	ldr	r7, [r4, #0]
   1d9e6:	461a      	mov	r2, r3
   1d9e8:	4621      	mov	r1, r4
   1d9ea:	4630      	mov	r0, r6
   1d9ec:	47b8      	blx	r7
	if (params->subscribe) {
   1d9ee:	6863      	ldr	r3, [r4, #4]
   1d9f0:	b31b      	cbz	r3, 1da3a <gatt_write_ccc_rsp+0x82>
		params->subscribe(conn, err, params);
   1d9f2:	4622      	mov	r2, r4
   1d9f4:	4629      	mov	r1, r5
   1d9f6:	4630      	mov	r0, r6
   1d9f8:	4798      	blx	r3
}
   1d9fa:	b009      	add	sp, #36	; 0x24
   1d9fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sub = gatt_sub_find(conn);
   1d9fe:	4630      	mov	r0, r6
   1da00:	f7ff fdb8 	bl	1d574 <gatt_sub_find>
		if (!sub) {
   1da04:	4601      	mov	r1, r0
   1da06:	2800      	cmp	r0, #0
   1da08:	d0f7      	beq.n	1d9fa <gatt_write_ccc_rsp+0x42>
	return list->head;
   1da0a:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1da0c:	b10b      	cbz	r3, 1da12 <gatt_write_ccc_rsp+0x5a>
	return node->next;
   1da0e:	681a      	ldr	r2, [r3, #0]
   1da10:	e009      	b.n	1da26 <gatt_write_ccc_rsp+0x6e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1da12:	461a      	mov	r2, r3
   1da14:	e007      	b.n	1da26 <gatt_write_ccc_rsp+0x6e>
				gatt_sub_remove(conn, sub, tmp, params);
   1da16:	4623      	mov	r3, r4
   1da18:	4630      	mov	r0, r6
   1da1a:	f00b fbff 	bl	2921c <gatt_sub_remove>
				break;
   1da1e:	e7e6      	b.n	1d9ee <gatt_write_ccc_rsp+0x36>
   1da20:	4610      	mov	r0, r2
   1da22:	4613      	mov	r3, r2
   1da24:	4602      	mov	r2, r0
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   1da26:	2b00      	cmp	r3, #0
   1da28:	d0e1      	beq.n	1d9ee <gatt_write_ccc_rsp+0x36>
			if (node == &params->node) {
   1da2a:	f104 0c18 	add.w	ip, r4, #24
   1da2e:	459c      	cmp	ip, r3
   1da30:	d0f1      	beq.n	1da16 <gatt_write_ccc_rsp+0x5e>
   1da32:	2a00      	cmp	r2, #0
   1da34:	d0f4      	beq.n	1da20 <gatt_write_ccc_rsp+0x68>
	return node->next;
   1da36:	6810      	ldr	r0, [r2, #0]
   1da38:	e7f3      	b.n	1da22 <gatt_write_ccc_rsp+0x6a>
	} else if (params->write) {
   1da3a:	68a3      	ldr	r3, [r4, #8]
   1da3c:	2b00      	cmp	r3, #0
   1da3e:	d0dc      	beq.n	1d9fa <gatt_write_ccc_rsp+0x42>
		LOG_WRN("write callback is deprecated, use subscribe cb instead");
   1da40:	4b15      	ldr	r3, [pc, #84]	; (1da98 <gatt_write_ccc_rsp+0xe0>)
   1da42:	9307      	str	r3, [sp, #28]
   1da44:	2302      	movs	r3, #2
   1da46:	f88d 3004 	strb.w	r3, [sp, #4]
   1da4a:	2700      	movs	r7, #0
   1da4c:	f88d 7005 	strb.w	r7, [sp, #5]
   1da50:	f88d 7006 	strb.w	r7, [sp, #6]
   1da54:	f88d 7007 	strb.w	r7, [sp, #7]
   1da58:	9a01      	ldr	r2, [sp, #4]
   1da5a:	9206      	str	r2, [sp, #24]
   1da5c:	4639      	mov	r1, r7
   1da5e:	f367 0100 	bfi	r1, r7, #0, #1
   1da62:	f367 0141 	bfi	r1, r7, #1, #1
   1da66:	f367 0182 	bfi	r1, r7, #2, #1
   1da6a:	f367 01c5 	bfi	r1, r7, #3, #3
   1da6e:	f363 1188 	bfi	r1, r3, #6, #3
   1da72:	2308      	movs	r3, #8
   1da74:	f363 2152 	bfi	r1, r3, #9, #10
   1da78:	f367 41de 	bfi	r1, r7, #19, #12
   1da7c:	f367 71df 	bfi	r1, r7, #31, #1
   1da80:	463b      	mov	r3, r7
   1da82:	aa06      	add	r2, sp, #24
   1da84:	4805      	ldr	r0, [pc, #20]	; (1da9c <gatt_write_ccc_rsp+0xe4>)
   1da86:	f009 f8e6 	bl	26c56 <z_impl_z_log_msg_static_create>
		params->write(conn, err, NULL);
   1da8a:	68a3      	ldr	r3, [r4, #8]
   1da8c:	463a      	mov	r2, r7
   1da8e:	4629      	mov	r1, r5
   1da90:	4630      	mov	r0, r6
   1da92:	4798      	blx	r3
   1da94:	e7b1      	b.n	1d9fa <gatt_write_ccc_rsp+0x42>
   1da96:	bf00      	nop
   1da98:	0002f218 	.word	0x0002f218
   1da9c:	0002d0b4 	.word	0x0002d0b4

0001daa0 <disconnected_cb>:
{
   1daa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1daa4:	4690      	mov	r8, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1daa6:	6882      	ldr	r2, [r0, #8]
   1daa8:	4b2e      	ldr	r3, [pc, #184]	; (1db64 <disconnected_cb+0xc4>)
   1daaa:	429a      	cmp	r2, r3
   1daac:	d002      	beq.n	1dab4 <disconnected_cb+0x14>
}
   1daae:	2001      	movs	r0, #1
   1dab0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dab4:	4681      	mov	r9, r0
	ccc = attr->user_data;
   1dab6:	68c6      	ldr	r6, [r0, #12]
	if (!ccc->value) {
   1dab8:	f8b6 3050 	ldrh.w	r3, [r6, #80]	; 0x50
   1dabc:	2b00      	cmp	r3, #0
   1dabe:	d0f6      	beq.n	1daae <disconnected_cb+0xe>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1dac0:	2400      	movs	r4, #0
	value_used = false;
   1dac2:	46a2      	mov	sl, r4
   1dac4:	e003      	b.n	1dace <disconnected_cb+0x2e>
				bt_conn_unref(tmp);
   1dac6:	4618      	mov	r0, r3
   1dac8:	f00a f942 	bl	27d50 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1dacc:	3401      	adds	r4, #1
   1dace:	2c07      	cmp	r4, #7
   1dad0:	d83a      	bhi.n	1db48 <disconnected_cb+0xa8>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1dad2:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   1dad6:	eb06 0545 	add.w	r5, r6, r5, lsl #1
		if (!cfg->value) {
   1dada:	892b      	ldrh	r3, [r5, #8]
   1dadc:	2b00      	cmp	r3, #0
   1dade:	d0f5      	beq.n	1dacc <disconnected_cb+0x2c>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1dae0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1dae4:	462f      	mov	r7, r5
   1dae6:	3701      	adds	r7, #1
   1dae8:	463a      	mov	r2, r7
   1daea:	f816 1013 	ldrb.w	r1, [r6, r3, lsl #1]
   1daee:	4640      	mov	r0, r8
   1daf0:	f00a f988 	bl	27e04 <bt_conn_is_peer_addr_le>
   1daf4:	b978      	cbnz	r0, 1db16 <disconnected_cb+0x76>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1daf6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1dafa:	4639      	mov	r1, r7
   1dafc:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
   1db00:	f7fd fada 	bl	1b0b8 <bt_conn_lookup_addr_le>
			if (tmp) {
   1db04:	4603      	mov	r3, r0
   1db06:	2800      	cmp	r0, #0
   1db08:	d0e0      	beq.n	1dacc <disconnected_cb+0x2c>
				if (tmp->state == BT_CONN_CONNECTED) {
   1db0a:	7a82      	ldrb	r2, [r0, #10]
   1db0c:	2a07      	cmp	r2, #7
   1db0e:	d1da      	bne.n	1dac6 <disconnected_cb+0x26>
					value_used = true;
   1db10:	f04f 0a01 	mov.w	sl, #1
   1db14:	e7d7      	b.n	1dac6 <disconnected_cb+0x26>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1db16:	f108 0b88 	add.w	fp, r8, #136	; 0x88
   1db1a:	4659      	mov	r1, fp
   1db1c:	f898 0008 	ldrb.w	r0, [r8, #8]
   1db20:	f009 ff30 	bl	27984 <bt_addr_le_is_bonded>
   1db24:	b950      	cbnz	r0, 1db3c <disconnected_cb+0x9c>
				if (ccc == &sc_ccc) {
   1db26:	4b10      	ldr	r3, [pc, #64]	; (1db68 <disconnected_cb+0xc8>)
   1db28:	429e      	cmp	r6, r3
   1db2a:	d003      	beq.n	1db34 <disconnected_cb+0x94>
				clear_ccc_cfg(cfg);
   1db2c:	4628      	mov	r0, r5
   1db2e:	f7ff fe09 	bl	1d744 <clear_ccc_cfg>
   1db32:	e7cb      	b.n	1dacc <disconnected_cb+0x2c>
					sc_clear(conn);
   1db34:	4640      	mov	r0, r8
   1db36:	f7ff fea3 	bl	1d880 <sc_clear>
   1db3a:	e7f7      	b.n	1db2c <disconnected_cb+0x8c>
   1db3c:	2207      	movs	r2, #7
   1db3e:	4659      	mov	r1, fp
   1db40:	4638      	mov	r0, r7
   1db42:	f009 fcc3 	bl	274cc <memcpy>
}
   1db46:	e7c1      	b.n	1dacc <disconnected_cb+0x2c>
	if (!value_used) {
   1db48:	f1ba 0f00 	cmp.w	sl, #0
   1db4c:	d1af      	bne.n	1daae <disconnected_cb+0xe>
		ccc->value = 0U;
   1db4e:	2300      	movs	r3, #0
   1db50:	f8a6 3050 	strh.w	r3, [r6, #80]	; 0x50
		if (ccc->cfg_changed) {
   1db54:	6d73      	ldr	r3, [r6, #84]	; 0x54
   1db56:	2b00      	cmp	r3, #0
   1db58:	d0a9      	beq.n	1daae <disconnected_cb+0xe>
			ccc->cfg_changed(attr, ccc->value);
   1db5a:	2100      	movs	r1, #0
   1db5c:	4648      	mov	r0, r9
   1db5e:	4798      	blx	r3
   1db60:	e7a5      	b.n	1daae <disconnected_cb+0xe>
   1db62:	bf00      	nop
   1db64:	0001d761 	.word	0x0001d761
   1db68:	2000083c 	.word	0x2000083c

0001db6c <gatt_write_ccc>:
{
   1db6c:	b500      	push	{lr}
   1db6e:	b085      	sub	sp, #20
   1db70:	460a      	mov	r2, r1
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   1db72:	2301      	movs	r3, #1
   1db74:	9302      	str	r3, [sp, #8]
   1db76:	2304      	movs	r3, #4
   1db78:	9301      	str	r3, [sp, #4]
   1db7a:	2312      	movs	r3, #18
   1db7c:	9300      	str	r3, [sp, #0]
   1db7e:	4b03      	ldr	r3, [pc, #12]	; (1db8c <gatt_write_ccc+0x20>)
   1db80:	4903      	ldr	r1, [pc, #12]	; (1db90 <gatt_write_ccc+0x24>)
   1db82:	f00b fc52 	bl	2942a <gatt_req_send>
}
   1db86:	b005      	add	sp, #20
   1db88:	f85d fb04 	ldr.w	pc, [sp], #4
   1db8c:	00029509 	.word	0x00029509
   1db90:	0001d9b9 	.word	0x0001d9b9

0001db94 <clear_cf_cfg>:
{
   1db94:	b510      	push	{r4, lr}
   1db96:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
   1db98:	2207      	movs	r2, #7
   1db9a:	490b      	ldr	r1, [pc, #44]	; (1dbc8 <clear_cf_cfg+0x34>)
   1db9c:	3001      	adds	r0, #1
   1db9e:	f009 fc95 	bl	274cc <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1dba2:	2201      	movs	r2, #1
   1dba4:	2100      	movs	r1, #0
   1dba6:	f104 0008 	add.w	r0, r4, #8
   1dbaa:	f009 fcbe 	bl	2752a <memset>
	atomic_set(cfg->flags, 0);
   1dbae:	340c      	adds	r4, #12
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1dbb0:	2300      	movs	r3, #0
   1dbb2:	f3bf 8f5b 	dmb	ish
   1dbb6:	e854 2f00 	ldrex	r2, [r4]
   1dbba:	e844 3100 	strex	r1, r3, [r4]
   1dbbe:	2900      	cmp	r1, #0
   1dbc0:	d1f9      	bne.n	1dbb6 <clear_cf_cfg+0x22>
   1dbc2:	f3bf 8f5b 	dmb	ish
}
   1dbc6:	bd10      	pop	{r4, pc}
   1dbc8:	0002e1f0 	.word	0x0002e1f0

0001dbcc <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1dbcc:	4b13      	ldr	r3, [pc, #76]	; (1dc1c <bt_gatt_init+0x50>)
   1dbce:	2201      	movs	r2, #1
   1dbd0:	f3bf 8f5b 	dmb	ish
   1dbd4:	e853 1f00 	ldrex	r1, [r3]
   1dbd8:	2900      	cmp	r1, #0
   1dbda:	d103      	bne.n	1dbe4 <bt_gatt_init+0x18>
   1dbdc:	e843 2000 	strex	r0, r2, [r3]
   1dbe0:	2800      	cmp	r0, #0
   1dbe2:	d1f7      	bne.n	1dbd4 <bt_gatt_init+0x8>
   1dbe4:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1dbe8:	d116      	bne.n	1dc18 <bt_gatt_init+0x4c>
{
   1dbea:	b510      	push	{r4, lr}
	bt_gatt_service_init();
   1dbec:	f7ff fbdc 	bl	1d3a8 <bt_gatt_service_init>
	list->head = NULL;
   1dbf0:	4b0b      	ldr	r3, [pc, #44]	; (1dc20 <bt_gatt_init+0x54>)
   1dbf2:	2200      	movs	r2, #0
   1dbf4:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   1dbf6:	605a      	str	r2, [r3, #4]
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1dbf8:	4c0a      	ldr	r4, [pc, #40]	; (1dc24 <bt_gatt_init+0x58>)
   1dbfa:	490b      	ldr	r1, [pc, #44]	; (1dc28 <bt_gatt_init+0x5c>)
   1dbfc:	4620      	mov	r0, r4
   1dbfe:	f00e fb9d 	bl	2c33c <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1dc02:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1dc06:	2300      	movs	r3, #0
   1dc08:	4620      	mov	r0, r4
   1dc0a:	f7f9 f8ed 	bl	16de8 <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1dc0e:	4907      	ldr	r1, [pc, #28]	; (1dc2c <bt_gatt_init+0x60>)
   1dc10:	4807      	ldr	r0, [pc, #28]	; (1dc30 <bt_gatt_init+0x64>)
   1dc12:	f00e fb93 	bl	2c33c <k_work_init_delayable>
}
   1dc16:	bd10      	pop	{r4, pc}
   1dc18:	4770      	bx	lr
   1dc1a:	bf00      	nop
   1dc1c:	200081f0 	.word	0x200081f0
   1dc20:	200081f4 	.word	0x200081f4
   1dc24:	200027b8 	.word	0x200027b8
   1dc28:	00029765 	.word	0x00029765
   1dc2c:	0001e1d9 	.word	0x0001e1d9
   1dc30:	20002830 	.word	0x20002830

0001dc34 <bt_gatt_attr_get_handle>:
	if (!attr) {
   1dc34:	b328      	cbz	r0, 1dc82 <bt_gatt_attr_get_handle+0x4e>
   1dc36:	4684      	mov	ip, r0
	if (attr->handle) {
   1dc38:	8a00      	ldrh	r0, [r0, #16]
   1dc3a:	bb38      	cbnz	r0, 1dc8c <bt_gatt_attr_get_handle+0x58>
{
   1dc3c:	b470      	push	{r4, r5, r6}
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1dc3e:	4d14      	ldr	r5, [pc, #80]	; (1dc90 <bt_gatt_attr_get_handle+0x5c>)
	uint16_t handle = 1;
   1dc40:	2201      	movs	r2, #1
   1dc42:	e003      	b.n	1dc4c <bt_gatt_attr_get_handle+0x18>
			handle += static_svc->attr_count;
   1dc44:	686b      	ldr	r3, [r5, #4]
   1dc46:	4413      	add	r3, r2
   1dc48:	b29a      	uxth	r2, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1dc4a:	3508      	adds	r5, #8
   1dc4c:	4b11      	ldr	r3, [pc, #68]	; (1dc94 <bt_gatt_attr_get_handle+0x60>)
   1dc4e:	429d      	cmp	r5, r3
   1dc50:	d21a      	bcs.n	1dc88 <bt_gatt_attr_get_handle+0x54>
		if ((attr < &static_svc->attrs[0]) ||
   1dc52:	682c      	ldr	r4, [r5, #0]
   1dc54:	4564      	cmp	r4, ip
   1dc56:	d8f5      	bhi.n	1dc44 <bt_gatt_attr_get_handle+0x10>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1dc58:	686e      	ldr	r6, [r5, #4]
   1dc5a:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   1dc5e:	009b      	lsls	r3, r3, #2
   1dc60:	3b14      	subs	r3, #20
   1dc62:	4423      	add	r3, r4
		if ((attr < &static_svc->attrs[0]) ||
   1dc64:	4563      	cmp	r3, ip
   1dc66:	d3ed      	bcc.n	1dc44 <bt_gatt_attr_get_handle+0x10>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1dc68:	2300      	movs	r3, #0
   1dc6a:	429e      	cmp	r6, r3
   1dc6c:	d9ed      	bls.n	1dc4a <bt_gatt_attr_get_handle+0x16>
			if (attr == &static_svc->attrs[i]) {
   1dc6e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1dc72:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   1dc76:	4561      	cmp	r1, ip
   1dc78:	d005      	beq.n	1dc86 <bt_gatt_attr_get_handle+0x52>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1dc7a:	3301      	adds	r3, #1
   1dc7c:	3201      	adds	r2, #1
   1dc7e:	b292      	uxth	r2, r2
   1dc80:	e7f3      	b.n	1dc6a <bt_gatt_attr_get_handle+0x36>
		return 0;
   1dc82:	2000      	movs	r0, #0
   1dc84:	4770      	bx	lr
				return handle;
   1dc86:	4610      	mov	r0, r2
}
   1dc88:	bc70      	pop	{r4, r5, r6}
   1dc8a:	4770      	bx	lr
   1dc8c:	4770      	bx	lr
   1dc8e:	bf00      	nop
   1dc90:	0002d07c 	.word	0x0002d07c
   1dc94:	0002d08c 	.word	0x0002d08c

0001dc98 <bt_gatt_foreach_attr_type>:
{
   1dc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc9c:	b089      	sub	sp, #36	; 0x24
   1dc9e:	4682      	mov	sl, r0
   1dca0:	9107      	str	r1, [sp, #28]
   1dca2:	4690      	mov	r8, r2
   1dca4:	4699      	mov	r9, r3
   1dca6:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   1dca8:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
	if (!num_matches) {
   1dcac:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1dcb0:	b91b      	cbnz	r3, 1dcba <bt_gatt_foreach_attr_type+0x22>
		num_matches = UINT16_MAX;
   1dcb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1dcb6:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
	if (start_handle <= last_static_handle) {
   1dcba:	4b1b      	ldr	r3, [pc, #108]	; (1dd28 <bt_gatt_foreach_attr_type+0x90>)
   1dcbc:	881b      	ldrh	r3, [r3, #0]
   1dcbe:	4553      	cmp	r3, sl
   1dcc0:	d22a      	bcs.n	1dd18 <bt_gatt_foreach_attr_type+0x80>
}
   1dcc2:	b009      	add	sp, #36	; 0x24
   1dcc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				handle += static_svc->attr_count;
   1dcc8:	b28c      	uxth	r4, r1
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1dcca:	3608      	adds	r6, #8
   1dccc:	4b17      	ldr	r3, [pc, #92]	; (1dd2c <bt_gatt_foreach_attr_type+0x94>)
   1dcce:	429e      	cmp	r6, r3
   1dcd0:	d2f7      	bcs.n	1dcc2 <bt_gatt_foreach_attr_type+0x2a>
			if (handle + static_svc->attr_count < start_handle) {
   1dcd2:	6873      	ldr	r3, [r6, #4]
   1dcd4:	18e1      	adds	r1, r4, r3
   1dcd6:	42b9      	cmp	r1, r7
   1dcd8:	d3f6      	bcc.n	1dcc8 <bt_gatt_foreach_attr_type+0x30>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1dcda:	2500      	movs	r5, #0
   1dcdc:	6873      	ldr	r3, [r6, #4]
   1dcde:	42ab      	cmp	r3, r5
   1dce0:	d9f3      	bls.n	1dcca <bt_gatt_foreach_attr_type+0x32>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1dce2:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   1dce6:	f8cd b010 	str.w	fp, [sp, #16]
   1dcea:	f8cd a00c 	str.w	sl, [sp, #12]
   1dcee:	ab12      	add	r3, sp, #72	; 0x48
   1dcf0:	9302      	str	r3, [sp, #8]
   1dcf2:	f8cd 9004 	str.w	r9, [sp, #4]
   1dcf6:	f8cd 8000 	str.w	r8, [sp]
   1dcfa:	9b07      	ldr	r3, [sp, #28]
   1dcfc:	463a      	mov	r2, r7
   1dcfe:	4621      	mov	r1, r4
   1dd00:	f8d6 c000 	ldr.w	ip, [r6]
   1dd04:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
   1dd08:	f00b fb56 	bl	293b8 <gatt_foreach_iter>
   1dd0c:	2800      	cmp	r0, #0
   1dd0e:	d0d8      	beq.n	1dcc2 <bt_gatt_foreach_attr_type+0x2a>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1dd10:	3501      	adds	r5, #1
   1dd12:	3401      	adds	r4, #1
   1dd14:	b2a4      	uxth	r4, r4
   1dd16:	e7e1      	b.n	1dcdc <bt_gatt_foreach_attr_type+0x44>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1dd18:	4e05      	ldr	r6, [pc, #20]	; (1dd30 <bt_gatt_foreach_attr_type+0x98>)
		uint16_t handle = 1;
   1dd1a:	2401      	movs	r4, #1
   1dd1c:	9713      	str	r7, [sp, #76]	; 0x4c
   1dd1e:	4657      	mov	r7, sl
   1dd20:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   1dd24:	e7d2      	b.n	1dccc <bt_gatt_foreach_attr_type+0x34>
   1dd26:	bf00      	nop
   1dd28:	20008ec4 	.word	0x20008ec4
   1dd2c:	0002d08c 	.word	0x0002d08c
   1dd30:	0002d07c 	.word	0x0002d07c

0001dd34 <db_hash_gen>:
{
   1dd34:	b510      	push	{r4, lr}
   1dd36:	b0da      	sub	sp, #360	; 0x168
	uint8_t key[16] = {};
   1dd38:	2300      	movs	r3, #0
   1dd3a:	934a      	str	r3, [sp, #296]	; 0x128
   1dd3c:	934b      	str	r3, [sp, #300]	; 0x12c
   1dd3e:	934c      	str	r3, [sp, #304]	; 0x130
   1dd40:	934d      	str	r3, [sp, #308]	; 0x134
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1dd42:	aa1e      	add	r2, sp, #120	; 0x78
   1dd44:	a94a      	add	r1, sp, #296	; 0x128
   1dd46:	a806      	add	r0, sp, #24
   1dd48:	f009 fa07 	bl	2715a <tc_cmac_setup>
   1dd4c:	b320      	cbz	r0, 1dd98 <db_hash_gen+0x64>
   1dd4e:	ac06      	add	r4, sp, #24
   1dd50:	9402      	str	r4, [sp, #8]
   1dd52:	4b37      	ldr	r3, [pc, #220]	; (1de30 <db_hash_gen+0xfc>)
   1dd54:	9301      	str	r3, [sp, #4]
   1dd56:	2200      	movs	r2, #0
   1dd58:	9200      	str	r2, [sp, #0]
   1dd5a:	4613      	mov	r3, r2
   1dd5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1dd60:	2001      	movs	r0, #1
   1dd62:	f7ff ff99 	bl	1dc98 <bt_gatt_foreach_attr_type>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1dd66:	4621      	mov	r1, r4
   1dd68:	4832      	ldr	r0, [pc, #200]	; (1de34 <db_hash_gen+0x100>)
   1dd6a:	f009 fa93 	bl	27294 <tc_cmac_final>
   1dd6e:	2800      	cmp	r0, #0
   1dd70:	d038      	beq.n	1dde4 <db_hash_gen+0xb0>
	sys_mem_swap(db_hash.hash, sizeof(db_hash.hash));
   1dd72:	2110      	movs	r1, #16
   1dd74:	482f      	ldr	r0, [pc, #188]	; (1de34 <db_hash_gen+0x100>)
   1dd76:	f00b f8f7 	bl	28f68 <sys_mem_swap>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1dd7a:	4b2f      	ldr	r3, [pc, #188]	; (1de38 <db_hash_gen+0x104>)
   1dd7c:	f3bf 8f5b 	dmb	ish
   1dd80:	e853 1f00 	ldrex	r1, [r3]
   1dd84:	f041 0104 	orr.w	r1, r1, #4
   1dd88:	e843 1200 	strex	r2, r1, [r3]
   1dd8c:	2a00      	cmp	r2, #0
   1dd8e:	d1f7      	bne.n	1dd80 <db_hash_gen+0x4c>
   1dd90:	f3bf 8f5b 	dmb	ish
}
   1dd94:	b05a      	add	sp, #360	; 0x168
   1dd96:	bd10      	pop	{r4, pc}
		LOG_ERR("Unable to setup AES CMAC");
   1dd98:	4b28      	ldr	r3, [pc, #160]	; (1de3c <db_hash_gen+0x108>)
   1dd9a:	9359      	str	r3, [sp, #356]	; 0x164
   1dd9c:	2302      	movs	r3, #2
   1dd9e:	f88d 3014 	strb.w	r3, [sp, #20]
   1dda2:	2300      	movs	r3, #0
   1dda4:	f88d 3015 	strb.w	r3, [sp, #21]
   1dda8:	f88d 3016 	strb.w	r3, [sp, #22]
   1ddac:	f88d 3017 	strb.w	r3, [sp, #23]
   1ddb0:	9a05      	ldr	r2, [sp, #20]
   1ddb2:	9258      	str	r2, [sp, #352]	; 0x160
   1ddb4:	4619      	mov	r1, r3
   1ddb6:	f363 0100 	bfi	r1, r3, #0, #1
   1ddba:	f363 0141 	bfi	r1, r3, #1, #1
   1ddbe:	f363 0182 	bfi	r1, r3, #2, #1
   1ddc2:	f363 01c5 	bfi	r1, r3, #3, #3
   1ddc6:	2201      	movs	r2, #1
   1ddc8:	f362 1188 	bfi	r1, r2, #6, #3
   1ddcc:	2208      	movs	r2, #8
   1ddce:	f362 2152 	bfi	r1, r2, #9, #10
   1ddd2:	f363 41de 	bfi	r1, r3, #19, #12
   1ddd6:	f363 71df 	bfi	r1, r3, #31, #1
   1ddda:	aa58      	add	r2, sp, #352	; 0x160
   1dddc:	4818      	ldr	r0, [pc, #96]	; (1de40 <db_hash_gen+0x10c>)
   1ddde:	f008 ff3a 	bl	26c56 <z_impl_z_log_msg_static_create>
		return;
   1dde2:	e7d7      	b.n	1dd94 <db_hash_gen+0x60>
		LOG_ERR("Unable to calculate hash");
   1dde4:	4b17      	ldr	r3, [pc, #92]	; (1de44 <db_hash_gen+0x110>)
   1dde6:	9353      	str	r3, [sp, #332]	; 0x14c
   1dde8:	2302      	movs	r3, #2
   1ddea:	f88d 3014 	strb.w	r3, [sp, #20]
   1ddee:	2300      	movs	r3, #0
   1ddf0:	f88d 3015 	strb.w	r3, [sp, #21]
   1ddf4:	f88d 3016 	strb.w	r3, [sp, #22]
   1ddf8:	f88d 3017 	strb.w	r3, [sp, #23]
   1ddfc:	9a05      	ldr	r2, [sp, #20]
   1ddfe:	9252      	str	r2, [sp, #328]	; 0x148
   1de00:	4619      	mov	r1, r3
   1de02:	f363 0100 	bfi	r1, r3, #0, #1
   1de06:	f363 0141 	bfi	r1, r3, #1, #1
   1de0a:	f363 0182 	bfi	r1, r3, #2, #1
   1de0e:	f363 01c5 	bfi	r1, r3, #3, #3
   1de12:	2201      	movs	r2, #1
   1de14:	f362 1188 	bfi	r1, r2, #6, #3
   1de18:	2208      	movs	r2, #8
   1de1a:	f362 2152 	bfi	r1, r2, #9, #10
   1de1e:	f363 41de 	bfi	r1, r3, #19, #12
   1de22:	f363 71df 	bfi	r1, r3, #31, #1
   1de26:	aa52      	add	r2, sp, #328	; 0x148
   1de28:	4805      	ldr	r0, [pc, #20]	; (1de40 <db_hash_gen+0x10c>)
   1de2a:	f008 ff14 	bl	26c56 <z_impl_z_log_msg_static_create>
		return;
   1de2e:	e7b1      	b.n	1dd94 <db_hash_gen+0x60>
   1de30:	000290c7 	.word	0x000290c7
   1de34:	200027a8 	.word	0x200027a8
   1de38:	20002860 	.word	0x20002860
   1de3c:	0002f250 	.word	0x0002f250
   1de40:	0002d0b4 	.word	0x0002d0b4
   1de44:	0002f26c 	.word	0x0002f26c

0001de48 <db_hash_read>:
{
   1de48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1de4c:	b084      	sub	sp, #16
   1de4e:	4604      	mov	r4, r0
   1de50:	460d      	mov	r5, r1
   1de52:	4616      	mov	r6, r2
   1de54:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1de56:	491f      	ldr	r1, [pc, #124]	; (1ded4 <db_hash_read+0x8c>)
   1de58:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   1de5c:	f00e fad1 	bl	2c402 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1de60:	f3bf 8f5b 	dmb	ish
   1de64:	4b1c      	ldr	r3, [pc, #112]	; (1ded8 <db_hash_read+0x90>)
   1de66:	681b      	ldr	r3, [r3, #0]
   1de68:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1de6c:	f013 0f04 	tst.w	r3, #4
   1de70:	d017      	beq.n	1dea2 <db_hash_read+0x5a>
	cfg = find_cf_cfg(conn);
   1de72:	4620      	mov	r0, r4
   1de74:	f7ff fb0c 	bl	1d490 <find_cf_cfg>
	if (cfg &&
   1de78:	b118      	cbz	r0, 1de82 <db_hash_read+0x3a>
	    CF_ROBUST_CACHING(cfg) &&
   1de7a:	7a02      	ldrb	r2, [r0, #8]
	if (cfg &&
   1de7c:	f012 0f01 	tst.w	r2, #1
   1de80:	d113      	bne.n	1deaa <db_hash_read+0x62>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1de82:	2310      	movs	r3, #16
   1de84:	9302      	str	r3, [sp, #8]
   1de86:	4b15      	ldr	r3, [pc, #84]	; (1dedc <db_hash_read+0x94>)
   1de88:	9301      	str	r3, [sp, #4]
   1de8a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1de8e:	9300      	str	r3, [sp, #0]
   1de90:	463b      	mov	r3, r7
   1de92:	4632      	mov	r2, r6
   1de94:	4629      	mov	r1, r5
   1de96:	4620      	mov	r0, r4
   1de98:	f00b fb6a 	bl	29570 <bt_gatt_attr_read>
}
   1de9c:	b004      	add	sp, #16
   1de9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		db_hash_gen(true);
   1dea2:	2001      	movs	r0, #1
   1dea4:	f7ff ff46 	bl	1dd34 <db_hash_gen>
   1dea8:	e7e3      	b.n	1de72 <db_hash_read+0x2a>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1deaa:	f100 080c 	add.w	r8, r0, #12
   1deae:	2100      	movs	r1, #0
   1deb0:	4640      	mov	r0, r8
   1deb2:	f00b f977 	bl	291a4 <atomic_test_bit>
	    CF_ROBUST_CACHING(cfg) &&
   1deb6:	2800      	cmp	r0, #0
   1deb8:	d1e3      	bne.n	1de82 <db_hash_read+0x3a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1deba:	f3bf 8f5b 	dmb	ish
   1debe:	e858 3f00 	ldrex	r3, [r8]
   1dec2:	f043 0302 	orr.w	r3, r3, #2
   1dec6:	e848 3200 	strex	r2, r3, [r8]
   1deca:	2a00      	cmp	r2, #0
   1decc:	d1f7      	bne.n	1debe <db_hash_read+0x76>
   1dece:	f3bf 8f5b 	dmb	ish
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
}
   1ded2:	e7d6      	b.n	1de82 <db_hash_read+0x3a>
   1ded4:	200027e8 	.word	0x200027e8
   1ded8:	20002860 	.word	0x20002860
   1dedc:	200027a8 	.word	0x200027a8

0001dee0 <gatt_find_by_uuid>:
{
   1dee0:	b510      	push	{r4, lr}
   1dee2:	b084      	sub	sp, #16
   1dee4:	4604      	mov	r4, r0
   1dee6:	460a      	mov	r2, r1
	found->attr = NULL;
   1dee8:	2300      	movs	r3, #0
   1deea:	6003      	str	r3, [r0, #0]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1deec:	9002      	str	r0, [sp, #8]
   1deee:	4907      	ldr	r1, [pc, #28]	; (1df0c <gatt_find_by_uuid+0x2c>)
   1def0:	9101      	str	r1, [sp, #4]
   1def2:	2101      	movs	r1, #1
   1def4:	9100      	str	r1, [sp, #0]
   1def6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1defa:	8880      	ldrh	r0, [r0, #4]
   1defc:	f7ff fecc 	bl	1dc98 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1df00:	6820      	ldr	r0, [r4, #0]
}
   1df02:	3800      	subs	r0, #0
   1df04:	bf18      	it	ne
   1df06:	2001      	movne	r0, #1
   1df08:	b004      	add	sp, #16
   1df0a:	bd10      	pop	{r4, pc}
   1df0c:	000290a7 	.word	0x000290a7

0001df10 <bt_gatt_attr_next>:
{
   1df10:	b510      	push	{r4, lr}
   1df12:	b086      	sub	sp, #24
	struct bt_gatt_attr *next = NULL;
   1df14:	2400      	movs	r4, #0
   1df16:	9405      	str	r4, [sp, #20]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1df18:	f7ff fe8c 	bl	1dc34 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1df1c:	3001      	adds	r0, #1
   1df1e:	b280      	uxth	r0, r0
   1df20:	ab05      	add	r3, sp, #20
   1df22:	9302      	str	r3, [sp, #8]
   1df24:	4b05      	ldr	r3, [pc, #20]	; (1df3c <bt_gatt_attr_next+0x2c>)
   1df26:	9301      	str	r3, [sp, #4]
   1df28:	9400      	str	r4, [sp, #0]
   1df2a:	4623      	mov	r3, r4
   1df2c:	4622      	mov	r2, r4
   1df2e:	4601      	mov	r1, r0
   1df30:	f7ff feb2 	bl	1dc98 <bt_gatt_foreach_attr_type>
}
   1df34:	9805      	ldr	r0, [sp, #20]
   1df36:	b006      	add	sp, #24
   1df38:	bd10      	pop	{r4, pc}
   1df3a:	bf00      	nop
   1df3c:	00029047 	.word	0x00029047

0001df40 <gatt_indicate>:
{
   1df40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1df44:	b096      	sub	sp, #88	; 0x58
   1df46:	4605      	mov	r5, r0
   1df48:	460f      	mov	r7, r1
   1df4a:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1df4c:	2294      	movs	r2, #148	; 0x94
   1df4e:	6861      	ldr	r1, [r4, #4]
   1df50:	f00b fc0d 	bl	2976e <bt_gatt_check_perm>
   1df54:	2800      	cmp	r0, #0
   1df56:	d13f      	bne.n	1dfd8 <gatt_indicate+0x98>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1df58:	2202      	movs	r2, #2
   1df5a:	6861      	ldr	r1, [r4, #4]
   1df5c:	4628      	mov	r0, r5
   1df5e:	f00b fc38 	bl	297d2 <bt_gatt_is_subscribed>
   1df62:	2800      	cmp	r0, #0
   1df64:	d05f      	beq.n	1e026 <gatt_indicate+0xe6>
	len = sizeof(*ind) + params->len;
   1df66:	8aa6      	ldrh	r6, [r4, #20]
   1df68:	3602      	adds	r6, #2
	req = gatt_req_alloc(gatt_indicate_rsp, params, NULL,
   1df6a:	9600      	str	r6, [sp, #0]
   1df6c:	231d      	movs	r3, #29
   1df6e:	2200      	movs	r2, #0
   1df70:	4621      	mov	r1, r4
   1df72:	4859      	ldr	r0, [pc, #356]	; (1e0d8 <gatt_indicate+0x198>)
   1df74:	f00b fa4b 	bl	2940e <gatt_req_alloc>
	if (!req) {
   1df78:	4681      	mov	r9, r0
   1df7a:	2800      	cmp	r0, #0
   1df7c:	f000 80a8 	beq.w	1e0d0 <gatt_indicate+0x190>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1df80:	4632      	mov	r2, r6
   1df82:	211d      	movs	r1, #29
   1df84:	4628      	mov	r0, r5
   1df86:	f7fe fe39 	bl	1cbfc <bt_att_create_pdu>
	if (!buf) {
   1df8a:	4680      	mov	r8, r0
   1df8c:	2800      	cmp	r0, #0
   1df8e:	d071      	beq.n	1e074 <gatt_indicate+0x134>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1df90:	2301      	movs	r3, #1
   1df92:	2200      	movs	r2, #0
   1df94:	4611      	mov	r1, r2
   1df96:	f00a ffbd 	bl	28f14 <bt_att_set_tx_meta_data>
   1df9a:	f108 0a0c 	add.w	sl, r8, #12
   1df9e:	2102      	movs	r1, #2
   1dfa0:	4650      	mov	r0, sl
   1dfa2:	f00b ff9a 	bl	29eda <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1dfa6:	4606      	mov	r6, r0
   1dfa8:	f826 7b02 	strh.w	r7, [r6], #2
   1dfac:	8aa1      	ldrh	r1, [r4, #20]
   1dfae:	4650      	mov	r0, sl
   1dfb0:	f00b ff93 	bl	29eda <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1dfb4:	8aa2      	ldrh	r2, [r4, #20]
   1dfb6:	6921      	ldr	r1, [r4, #16]
   1dfb8:	4630      	mov	r0, r6
   1dfba:	f009 fa87 	bl	274cc <memcpy>
	req->buf = buf;
   1dfbe:	f8c9 8008 	str.w	r8, [r9, #8]
	err = bt_att_req_send(conn, req);
   1dfc2:	4649      	mov	r1, r9
   1dfc4:	4628      	mov	r0, r5
   1dfc6:	f00a ff0c 	bl	28de2 <bt_att_req_send>
	if (err) {
   1dfca:	4604      	mov	r4, r0
   1dfcc:	2800      	cmp	r0, #0
   1dfce:	d17b      	bne.n	1e0c8 <gatt_indicate+0x188>
}
   1dfd0:	4620      	mov	r0, r4
   1dfd2:	b016      	add	sp, #88	; 0x58
   1dfd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LOG_WRN("Link is not encrypted");
   1dfd8:	4b40      	ldr	r3, [pc, #256]	; (1e0dc <gatt_indicate+0x19c>)
   1dfda:	9315      	str	r3, [sp, #84]	; 0x54
   1dfdc:	2202      	movs	r2, #2
   1dfde:	f88d 200c 	strb.w	r2, [sp, #12]
   1dfe2:	2300      	movs	r3, #0
   1dfe4:	f88d 300d 	strb.w	r3, [sp, #13]
   1dfe8:	f88d 300e 	strb.w	r3, [sp, #14]
   1dfec:	f88d 300f 	strb.w	r3, [sp, #15]
   1dff0:	9903      	ldr	r1, [sp, #12]
   1dff2:	9114      	str	r1, [sp, #80]	; 0x50
   1dff4:	4619      	mov	r1, r3
   1dff6:	f363 0100 	bfi	r1, r3, #0, #1
   1dffa:	f363 0141 	bfi	r1, r3, #1, #1
   1dffe:	f363 0182 	bfi	r1, r3, #2, #1
   1e002:	f363 01c5 	bfi	r1, r3, #3, #3
   1e006:	f362 1188 	bfi	r1, r2, #6, #3
   1e00a:	2208      	movs	r2, #8
   1e00c:	f362 2152 	bfi	r1, r2, #9, #10
   1e010:	f363 41de 	bfi	r1, r3, #19, #12
   1e014:	f363 71df 	bfi	r1, r3, #31, #1
   1e018:	aa14      	add	r2, sp, #80	; 0x50
   1e01a:	4831      	ldr	r0, [pc, #196]	; (1e0e0 <gatt_indicate+0x1a0>)
   1e01c:	f008 fe1b 	bl	26c56 <z_impl_z_log_msg_static_create>
		return -EPERM;
   1e020:	f04f 34ff 	mov.w	r4, #4294967295
   1e024:	e7d4      	b.n	1dfd0 <gatt_indicate+0x90>
			LOG_WRN("Device is not subscribed to characteristic");
   1e026:	4b2f      	ldr	r3, [pc, #188]	; (1e0e4 <gatt_indicate+0x1a4>)
   1e028:	930f      	str	r3, [sp, #60]	; 0x3c
   1e02a:	2202      	movs	r2, #2
   1e02c:	f88d 200c 	strb.w	r2, [sp, #12]
   1e030:	2300      	movs	r3, #0
   1e032:	f88d 300d 	strb.w	r3, [sp, #13]
   1e036:	f88d 300e 	strb.w	r3, [sp, #14]
   1e03a:	f88d 300f 	strb.w	r3, [sp, #15]
   1e03e:	9903      	ldr	r1, [sp, #12]
   1e040:	910e      	str	r1, [sp, #56]	; 0x38
   1e042:	4619      	mov	r1, r3
   1e044:	f363 0100 	bfi	r1, r3, #0, #1
   1e048:	f363 0141 	bfi	r1, r3, #1, #1
   1e04c:	f363 0182 	bfi	r1, r3, #2, #1
   1e050:	f363 01c5 	bfi	r1, r3, #3, #3
   1e054:	f362 1188 	bfi	r1, r2, #6, #3
   1e058:	2208      	movs	r2, #8
   1e05a:	f362 2152 	bfi	r1, r2, #9, #10
   1e05e:	f363 41de 	bfi	r1, r3, #19, #12
   1e062:	f363 71df 	bfi	r1, r3, #31, #1
   1e066:	aa0e      	add	r2, sp, #56	; 0x38
   1e068:	481d      	ldr	r0, [pc, #116]	; (1e0e0 <gatt_indicate+0x1a0>)
   1e06a:	f008 fdf4 	bl	26c56 <z_impl_z_log_msg_static_create>
			return -EINVAL;
   1e06e:	f06f 0415 	mvn.w	r4, #21
   1e072:	e7ad      	b.n	1dfd0 <gatt_indicate+0x90>
		LOG_WRN("No buffer available to send indication");
   1e074:	4b1c      	ldr	r3, [pc, #112]	; (1e0e8 <gatt_indicate+0x1a8>)
   1e076:	9309      	str	r3, [sp, #36]	; 0x24
   1e078:	2202      	movs	r2, #2
   1e07a:	f88d 200c 	strb.w	r2, [sp, #12]
   1e07e:	2300      	movs	r3, #0
   1e080:	f88d 300d 	strb.w	r3, [sp, #13]
   1e084:	f88d 300e 	strb.w	r3, [sp, #14]
   1e088:	f88d 300f 	strb.w	r3, [sp, #15]
   1e08c:	9903      	ldr	r1, [sp, #12]
   1e08e:	9108      	str	r1, [sp, #32]
   1e090:	4619      	mov	r1, r3
   1e092:	f363 0100 	bfi	r1, r3, #0, #1
   1e096:	f363 0141 	bfi	r1, r3, #1, #1
   1e09a:	f363 0182 	bfi	r1, r3, #2, #1
   1e09e:	f363 01c5 	bfi	r1, r3, #3, #3
   1e0a2:	f362 1188 	bfi	r1, r2, #6, #3
   1e0a6:	2208      	movs	r2, #8
   1e0a8:	f362 2152 	bfi	r1, r2, #9, #10
   1e0ac:	f363 41de 	bfi	r1, r3, #19, #12
   1e0b0:	f363 71df 	bfi	r1, r3, #31, #1
   1e0b4:	aa08      	add	r2, sp, #32
   1e0b6:	480a      	ldr	r0, [pc, #40]	; (1e0e0 <gatt_indicate+0x1a0>)
   1e0b8:	f008 fdcd 	bl	26c56 <z_impl_z_log_msg_static_create>
		bt_att_req_free(req);
   1e0bc:	4648      	mov	r0, r9
   1e0be:	f7ff f86b 	bl	1d198 <bt_att_req_free>
		return -ENOMEM;
   1e0c2:	f06f 040b 	mvn.w	r4, #11
   1e0c6:	e783      	b.n	1dfd0 <gatt_indicate+0x90>
		bt_att_req_free(req);
   1e0c8:	4648      	mov	r0, r9
   1e0ca:	f7ff f865 	bl	1d198 <bt_att_req_free>
   1e0ce:	e77f      	b.n	1dfd0 <gatt_indicate+0x90>
		return -ENOMEM;
   1e0d0:	f06f 040b 	mvn.w	r4, #11
   1e0d4:	e77c      	b.n	1dfd0 <gatt_indicate+0x90>
   1e0d6:	bf00      	nop
   1e0d8:	00029085 	.word	0x00029085
   1e0dc:	0002f288 	.word	0x0002f288
   1e0e0:	0002d0b4 	.word	0x0002d0b4
   1e0e4:	0002f2a0 	.word	0x0002f2a0
   1e0e8:	0002f2cc 	.word	0x0002f2cc

0001e0ec <bt_gatt_indicate>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e0ec:	f3bf 8f5b 	dmb	ish
   1e0f0:	4b37      	ldr	r3, [pc, #220]	; (1e1d0 <bt_gatt_indicate+0xe4>)
   1e0f2:	681b      	ldr	r3, [r3, #0]
   1e0f4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1e0f8:	f013 0f04 	tst.w	r3, #4
   1e0fc:	d05e      	beq.n	1e1bc <bt_gatt_indicate+0xd0>
{
   1e0fe:	b530      	push	{r4, r5, lr}
   1e100:	b08d      	sub	sp, #52	; 0x34
   1e102:	4605      	mov	r5, r0
   1e104:	460c      	mov	r4, r1
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1e106:	b110      	cbz	r0, 1e10e <bt_gatt_indicate+0x22>
   1e108:	7a83      	ldrb	r3, [r0, #10]
   1e10a:	2b07      	cmp	r3, #7
   1e10c:	d159      	bne.n	1e1c2 <bt_gatt_indicate+0xd6>
	data.attr = params->attr;
   1e10e:	6860      	ldr	r0, [r4, #4]
   1e110:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1e112:	f7ff fd8f 	bl	1dc34 <bt_gatt_attr_get_handle>
   1e116:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1e11a:	6821      	ldr	r1, [r4, #0]
   1e11c:	b341      	cbz	r1, 1e170 <bt_gatt_indicate+0x84>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1e11e:	a805      	add	r0, sp, #20
   1e120:	f7ff fede 	bl	1dee0 <gatt_find_by_uuid>
   1e124:	2800      	cmp	r0, #0
   1e126:	d04f      	beq.n	1e1c8 <bt_gatt_indicate+0xdc>
		params->attr = data.attr;
   1e128:	9b05      	ldr	r3, [sp, #20]
   1e12a:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1e12c:	9b05      	ldr	r3, [sp, #20]
   1e12e:	6818      	ldr	r0, [r3, #0]
   1e130:	2300      	movs	r3, #0
   1e132:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1e136:	f642 0303 	movw	r3, #10243	; 0x2803
   1e13a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1e13e:	a90b      	add	r1, sp, #44	; 0x2c
   1e140:	f009 fa44 	bl	275cc <bt_uuid_cmp>
   1e144:	b948      	cbnz	r0, 1e15a <bt_gatt_indicate+0x6e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1e146:	9805      	ldr	r0, [sp, #20]
   1e148:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1e14a:	799b      	ldrb	r3, [r3, #6]
   1e14c:	f013 0f20 	tst.w	r3, #32
   1e150:	d013      	beq.n	1e17a <bt_gatt_indicate+0x8e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1e152:	f00b fab8 	bl	296c6 <bt_gatt_attr_value_handle>
   1e156:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   1e15a:	b18d      	cbz	r5, 1e180 <bt_gatt_indicate+0x94>
		params->_ref = 1;
   1e15c:	2301      	movs	r3, #1
   1e15e:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1e160:	4622      	mov	r2, r4
   1e162:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1e166:	4628      	mov	r0, r5
   1e168:	f7ff feea 	bl	1df40 <gatt_indicate>
}
   1e16c:	b00d      	add	sp, #52	; 0x34
   1e16e:	bd30      	pop	{r4, r5, pc}
		if (!data.handle) {
   1e170:	2800      	cmp	r0, #0
   1e172:	d1db      	bne.n	1e12c <bt_gatt_indicate+0x40>
			return -ENOENT;
   1e174:	f06f 0001 	mvn.w	r0, #1
   1e178:	e7f8      	b.n	1e16c <bt_gatt_indicate+0x80>
			return -EINVAL;
   1e17a:	f06f 0015 	mvn.w	r0, #21
   1e17e:	e7f5      	b.n	1e16c <bt_gatt_indicate+0x80>
	data.err = -ENOTCONN;
   1e180:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1e184:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1e186:	2302      	movs	r3, #2
   1e188:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.ind_params = params;
   1e18c:	9409      	str	r4, [sp, #36]	; 0x24
	params->_ref = 0;
   1e18e:	2300      	movs	r3, #0
   1e190:	75a3      	strb	r3, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1e192:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1e196:	f642 1202 	movw	r2, #10498	; 0x2902
   1e19a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
   1e19e:	aa05      	add	r2, sp, #20
   1e1a0:	9202      	str	r2, [sp, #8]
   1e1a2:	4a0c      	ldr	r2, [pc, #48]	; (1e1d4 <bt_gatt_indicate+0xe8>)
   1e1a4:	9201      	str	r2, [sp, #4]
   1e1a6:	2201      	movs	r2, #1
   1e1a8:	9200      	str	r2, [sp, #0]
   1e1aa:	aa0a      	add	r2, sp, #40	; 0x28
   1e1ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e1b0:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1e1b4:	f7ff fd70 	bl	1dc98 <bt_gatt_foreach_attr_type>
	return data.err;
   1e1b8:	9807      	ldr	r0, [sp, #28]
   1e1ba:	e7d7      	b.n	1e16c <bt_gatt_indicate+0x80>
		return -EAGAIN;
   1e1bc:	f06f 000a 	mvn.w	r0, #10
}
   1e1c0:	4770      	bx	lr
		return -ENOTCONN;
   1e1c2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1e1c6:	e7d1      	b.n	1e16c <bt_gatt_indicate+0x80>
			return -ENOENT;
   1e1c8:	f06f 0001 	mvn.w	r0, #1
   1e1cc:	e7ce      	b.n	1e16c <bt_gatt_indicate+0x80>
   1e1ce:	bf00      	nop
   1e1d0:	2000043c 	.word	0x2000043c
   1e1d4:	0001e585 	.word	0x0001e585

0001e1d8 <sc_process>:
{
   1e1d8:	b510      	push	{r4, lr}
   1e1da:	b082      	sub	sp, #8
   1e1dc:	4603      	mov	r3, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1e1de:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1e1e2:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   1e1e6:	f830 2c06 	ldrh.w	r2, [r0, #-6]
   1e1ea:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1e1ee:	f1a0 0120 	sub.w	r1, r0, #32
   1e1f2:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e1f6:	f3bf 8f5b 	dmb	ish
   1e1fa:	e854 2f00 	ldrex	r2, [r4]
   1e1fe:	f022 0201 	bic.w	r2, r2, #1
   1e202:	e844 2000 	strex	r0, r2, [r4]
   1e206:	2800      	cmp	r0, #0
   1e208:	d1f7      	bne.n	1e1fa <sc_process+0x22>
   1e20a:	f3bf 8f5b 	dmb	ish
	sc->start = 0U;
   1e20e:	2000      	movs	r0, #0
   1e210:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   1e214:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1e218:	4a0e      	ldr	r2, [pc, #56]	; (1e254 <sc_process+0x7c>)
   1e21a:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   1e21e:	4a0e      	ldr	r2, [pc, #56]	; (1e258 <sc_process+0x80>)
   1e220:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   1e224:	aa01      	add	r2, sp, #4
   1e226:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   1e22a:	2204      	movs	r2, #4
   1e22c:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1e230:	f7ff ff5c 	bl	1e0ec <bt_gatt_indicate>
   1e234:	b108      	cbz	r0, 1e23a <sc_process+0x62>
}
   1e236:	b002      	add	sp, #8
   1e238:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e23a:	f3bf 8f5b 	dmb	ish
   1e23e:	e854 3f00 	ldrex	r3, [r4]
   1e242:	f043 0302 	orr.w	r3, r3, #2
   1e246:	e844 3200 	strex	r2, r3, [r4]
   1e24a:	2a00      	cmp	r2, #0
   1e24c:	d1f7      	bne.n	1e23e <sc_process+0x66>
   1e24e:	f3bf 8f5b 	dmb	ish
   1e252:	e7f0      	b.n	1e236 <sc_process+0x5e>
   1e254:	0002f3c8 	.word	0x0002f3c8
   1e258:	0001d93d 	.word	0x0001d93d

0001e25c <sc_restore>:
{
   1e25c:	b510      	push	{r4, lr}
   1e25e:	b088      	sub	sp, #32
   1e260:	4604      	mov	r4, r0
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1e262:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1e266:	7a00      	ldrb	r0, [r0, #8]
   1e268:	f7ff f938 	bl	1d4dc <find_sc_cfg>
	if (!cfg) {
   1e26c:	b1f0      	cbz	r0, 1e2ac <sc_restore+0x50>
   1e26e:	4603      	mov	r3, r0
	if (!(cfg->data.start || cfg->data.end)) {
   1e270:	8902      	ldrh	r2, [r0, #8]
   1e272:	b90a      	cbnz	r2, 1e278 <sc_restore+0x1c>
   1e274:	8941      	ldrh	r1, [r0, #10]
   1e276:	b1c9      	cbz	r1, 1e2ac <sc_restore+0x50>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1e278:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1e27c:	895b      	ldrh	r3, [r3, #10]
   1e27e:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   1e282:	4620      	mov	r0, r4
   1e284:	f7fc fe44 	bl	1af10 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1e288:	491c      	ldr	r1, [pc, #112]	; (1e2fc <sc_restore+0xa0>)
   1e28a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1e28e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   1e292:	4a1b      	ldr	r2, [pc, #108]	; (1e300 <sc_restore+0xa4>)
   1e294:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1e296:	4a1b      	ldr	r2, [pc, #108]	; (1e304 <sc_restore+0xa8>)
   1e298:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1e29a:	aa01      	add	r2, sp, #4
   1e29c:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1e29e:	2204      	movs	r2, #4
   1e2a0:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1e2a2:	4619      	mov	r1, r3
   1e2a4:	4620      	mov	r0, r4
   1e2a6:	f7ff ff21 	bl	1e0ec <bt_gatt_indicate>
   1e2aa:	b908      	cbnz	r0, 1e2b0 <sc_restore+0x54>
}
   1e2ac:	b008      	add	sp, #32
   1e2ae:	bd10      	pop	{r4, pc}
		LOG_ERR("SC restore indication failed");
   1e2b0:	4b15      	ldr	r3, [pc, #84]	; (1e308 <sc_restore+0xac>)
   1e2b2:	9307      	str	r3, [sp, #28]
   1e2b4:	2302      	movs	r3, #2
   1e2b6:	f88d 3000 	strb.w	r3, [sp]
   1e2ba:	2300      	movs	r3, #0
   1e2bc:	f88d 3001 	strb.w	r3, [sp, #1]
   1e2c0:	f88d 3002 	strb.w	r3, [sp, #2]
   1e2c4:	f88d 3003 	strb.w	r3, [sp, #3]
   1e2c8:	9a00      	ldr	r2, [sp, #0]
   1e2ca:	9206      	str	r2, [sp, #24]
   1e2cc:	4619      	mov	r1, r3
   1e2ce:	f363 0100 	bfi	r1, r3, #0, #1
   1e2d2:	f363 0141 	bfi	r1, r3, #1, #1
   1e2d6:	f363 0182 	bfi	r1, r3, #2, #1
   1e2da:	f363 01c5 	bfi	r1, r3, #3, #3
   1e2de:	2201      	movs	r2, #1
   1e2e0:	f362 1188 	bfi	r1, r2, #6, #3
   1e2e4:	2208      	movs	r2, #8
   1e2e6:	f362 2152 	bfi	r1, r2, #9, #10
   1e2ea:	f363 41de 	bfi	r1, r3, #19, #12
   1e2ee:	f363 71df 	bfi	r1, r3, #31, #1
   1e2f2:	aa06      	add	r2, sp, #24
   1e2f4:	4805      	ldr	r0, [pc, #20]	; (1e30c <sc_restore+0xb0>)
   1e2f6:	f008 fcae 	bl	26c56 <z_impl_z_log_msg_static_create>
   1e2fa:	e7d7      	b.n	1e2ac <sc_restore+0x50>
   1e2fc:	2000804c 	.word	0x2000804c
   1e300:	0002f3c8 	.word	0x0002f3c8
   1e304:	0002932d 	.word	0x0002932d
   1e308:	0002f2f4 	.word	0x0002f2f4
   1e30c:	0002d0b4 	.word	0x0002d0b4

0001e310 <update_ccc>:
{
   1e310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e314:	b082      	sub	sp, #8
   1e316:	af00      	add	r7, sp, #0
	struct bt_conn *conn = data->conn;
   1e318:	f8d2 8000 	ldr.w	r8, [r2]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1e31c:	6882      	ldr	r2, [r0, #8]
   1e31e:	4b39      	ldr	r3, [pc, #228]	; (1e404 <update_ccc+0xf4>)
   1e320:	429a      	cmp	r2, r3
   1e322:	d004      	beq.n	1e32e <update_ccc+0x1e>
}
   1e324:	2001      	movs	r0, #1
   1e326:	3708      	adds	r7, #8
   1e328:	46bd      	mov	sp, r7
   1e32a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e32e:	4605      	mov	r5, r0
	ccc = attr->user_data;
   1e330:	68c6      	ldr	r6, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1e332:	2400      	movs	r4, #0
   1e334:	e037      	b.n	1e3a6 <update_ccc+0x96>
				LOG_WRN("CCC %p not writable", attr);
   1e336:	46ea      	mov	sl, sp
   1e338:	b088      	sub	sp, #32
   1e33a:	466b      	mov	r3, sp
   1e33c:	f113 0210 	adds.w	r2, r3, #16
   1e340:	d05a      	beq.n	1e3f8 <update_ccc+0xe8>
   1e342:	210c      	movs	r1, #12
   1e344:	b14a      	cbz	r2, 1e35a <update_ccc+0x4a>
   1e346:	4608      	mov	r0, r1
   1e348:	2904      	cmp	r1, #4
   1e34a:	dd03      	ble.n	1e354 <update_ccc+0x44>
   1e34c:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 1e408 <update_ccc+0xf8>
   1e350:	f8c3 c014 	str.w	ip, [r3, #20]
   1e354:	2808      	cmp	r0, #8
   1e356:	dd00      	ble.n	1e35a <update_ccc+0x4a>
   1e358:	619d      	str	r5, [r3, #24]
   1e35a:	290b      	cmp	r1, #11
   1e35c:	dd4f      	ble.n	1e3fe <update_ccc+0xee>
   1e35e:	210c      	movs	r1, #12
   1e360:	b13a      	cbz	r2, 1e372 <update_ccc+0x62>
   1e362:	2003      	movs	r0, #3
   1e364:	7138      	strb	r0, [r7, #4]
   1e366:	2000      	movs	r0, #0
   1e368:	7178      	strb	r0, [r7, #5]
   1e36a:	71b8      	strb	r0, [r7, #6]
   1e36c:	71f8      	strb	r0, [r7, #7]
   1e36e:	6878      	ldr	r0, [r7, #4]
   1e370:	6118      	str	r0, [r3, #16]
   1e372:	f36f 0900 	bfc	r9, #0, #1
   1e376:	f36f 0941 	bfc	r9, #1, #1
   1e37a:	f36f 0982 	bfc	r9, #2, #1
   1e37e:	f36f 09c5 	bfc	r9, #3, #3
   1e382:	2302      	movs	r3, #2
   1e384:	f363 1988 	bfi	r9, r3, #6, #3
   1e388:	f401 737b 	and.w	r3, r1, #1004	; 0x3ec
   1e38c:	f363 2952 	bfi	r9, r3, #9, #10
   1e390:	f36f 49de 	bfc	r9, #19, #12
   1e394:	f36f 79df 	bfc	r9, #31, #1
   1e398:	2300      	movs	r3, #0
   1e39a:	4649      	mov	r1, r9
   1e39c:	481b      	ldr	r0, [pc, #108]	; (1e40c <update_ccc+0xfc>)
   1e39e:	f008 fc5a 	bl	26c56 <z_impl_z_log_msg_static_create>
   1e3a2:	46d5      	mov	sp, sl
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1e3a4:	3401      	adds	r4, #1
   1e3a6:	2c07      	cmp	r4, #7
   1e3a8:	d8bc      	bhi.n	1e324 <update_ccc+0x14>
		if (!cfg->value ||
   1e3aa:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1e3ae:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   1e3b2:	891b      	ldrh	r3, [r3, #8]
   1e3b4:	2b00      	cmp	r3, #0
   1e3b6:	d0f5      	beq.n	1e3a4 <update_ccc+0x94>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1e3b8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1e3bc:	eb06 0243 	add.w	r2, r6, r3, lsl #1
   1e3c0:	3201      	adds	r2, #1
   1e3c2:	f816 1013 	ldrb.w	r1, [r6, r3, lsl #1]
   1e3c6:	4640      	mov	r0, r8
   1e3c8:	f009 fd1c 	bl	27e04 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1e3cc:	2800      	cmp	r0, #0
   1e3ce:	d0e9      	beq.n	1e3a4 <update_ccc+0x94>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1e3d0:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1e3d4:	4629      	mov	r1, r5
   1e3d6:	4640      	mov	r0, r8
   1e3d8:	f00b f9c9 	bl	2976e <bt_gatt_check_perm>
		if (err) {
   1e3dc:	b108      	cbz	r0, 1e3e2 <update_ccc+0xd2>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1e3de:	2803      	cmp	r0, #3
   1e3e0:	d0a9      	beq.n	1e336 <update_ccc+0x26>
		gatt_ccc_changed(attr, ccc);
   1e3e2:	4631      	mov	r1, r6
   1e3e4:	4628      	mov	r0, r5
   1e3e6:	f00a fe31 	bl	2904c <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1e3ea:	4b09      	ldr	r3, [pc, #36]	; (1e410 <update_ccc+0x100>)
   1e3ec:	429e      	cmp	r6, r3
   1e3ee:	d199      	bne.n	1e324 <update_ccc+0x14>
			sc_restore(conn);
   1e3f0:	4640      	mov	r0, r8
   1e3f2:	f7ff ff33 	bl	1e25c <sc_restore>
   1e3f6:	e795      	b.n	1e324 <update_ccc+0x14>
				LOG_WRN("CCC %p not writable", attr);
   1e3f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1e3fc:	e7a2      	b.n	1e344 <update_ccc+0x34>
   1e3fe:	f06f 011b 	mvn.w	r1, #27
   1e402:	e7ad      	b.n	1e360 <update_ccc+0x50>
   1e404:	0001d761 	.word	0x0001d761
   1e408:	0002f314 	.word	0x0002f314
   1e40c:	0002d0b4 	.word	0x0002d0b4
   1e410:	2000083c 	.word	0x2000083c

0001e414 <gatt_notify>:
{
   1e414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e418:	b095      	sub	sp, #84	; 0x54
   1e41a:	4605      	mov	r5, r0
   1e41c:	460f      	mov	r7, r1
   1e41e:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1e420:	2294      	movs	r2, #148	; 0x94
   1e422:	6861      	ldr	r1, [r4, #4]
   1e424:	f00b f9a3 	bl	2976e <bt_gatt_check_perm>
   1e428:	bb70      	cbnz	r0, 1e488 <gatt_notify+0x74>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1e42a:	2201      	movs	r2, #1
   1e42c:	6861      	ldr	r1, [r4, #4]
   1e42e:	4628      	mov	r0, r5
   1e430:	f00b f9cf 	bl	297d2 <bt_gatt_is_subscribed>
   1e434:	2800      	cmp	r0, #0
   1e436:	d04e      	beq.n	1e4d6 <gatt_notify+0xc2>
				sizeof(*nfy) + params->len);
   1e438:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1e43a:	3202      	adds	r2, #2
   1e43c:	211b      	movs	r1, #27
   1e43e:	4628      	mov	r0, r5
   1e440:	f7fe fbdc 	bl	1cbfc <bt_att_create_pdu>
	if (!buf) {
   1e444:	4680      	mov	r8, r0
   1e446:	2800      	cmp	r0, #0
   1e448:	d06c      	beq.n	1e524 <gatt_notify+0x110>
   1e44a:	f100 090c 	add.w	r9, r0, #12
   1e44e:	2102      	movs	r1, #2
   1e450:	4648      	mov	r0, r9
   1e452:	f00b fd42 	bl	29eda <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1e456:	4606      	mov	r6, r0
   1e458:	f826 7b02 	strh.w	r7, [r6], #2
   1e45c:	89a1      	ldrh	r1, [r4, #12]
   1e45e:	4648      	mov	r0, r9
   1e460:	f00b fd3b 	bl	29eda <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1e464:	89a2      	ldrh	r2, [r4, #12]
   1e466:	68a1      	ldr	r1, [r4, #8]
   1e468:	4630      	mov	r0, r6
   1e46a:	f009 f82f 	bl	274cc <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1e46e:	2301      	movs	r3, #1
   1e470:	6962      	ldr	r2, [r4, #20]
   1e472:	6921      	ldr	r1, [r4, #16]
   1e474:	4640      	mov	r0, r8
   1e476:	f00a fd4d 	bl	28f14 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1e47a:	4641      	mov	r1, r8
   1e47c:	4628      	mov	r0, r5
   1e47e:	f00a fc98 	bl	28db2 <bt_att_send>
}
   1e482:	b015      	add	sp, #84	; 0x54
   1e484:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_WRN("Link is not encrypted");
   1e488:	4b3a      	ldr	r3, [pc, #232]	; (1e574 <gatt_notify+0x160>)
   1e48a:	9313      	str	r3, [sp, #76]	; 0x4c
   1e48c:	2202      	movs	r2, #2
   1e48e:	f88d 2004 	strb.w	r2, [sp, #4]
   1e492:	2300      	movs	r3, #0
   1e494:	f88d 3005 	strb.w	r3, [sp, #5]
   1e498:	f88d 3006 	strb.w	r3, [sp, #6]
   1e49c:	f88d 3007 	strb.w	r3, [sp, #7]
   1e4a0:	9901      	ldr	r1, [sp, #4]
   1e4a2:	9112      	str	r1, [sp, #72]	; 0x48
   1e4a4:	4619      	mov	r1, r3
   1e4a6:	f363 0100 	bfi	r1, r3, #0, #1
   1e4aa:	f363 0141 	bfi	r1, r3, #1, #1
   1e4ae:	f363 0182 	bfi	r1, r3, #2, #1
   1e4b2:	f363 01c5 	bfi	r1, r3, #3, #3
   1e4b6:	f362 1188 	bfi	r1, r2, #6, #3
   1e4ba:	2208      	movs	r2, #8
   1e4bc:	f362 2152 	bfi	r1, r2, #9, #10
   1e4c0:	f363 41de 	bfi	r1, r3, #19, #12
   1e4c4:	f363 71df 	bfi	r1, r3, #31, #1
   1e4c8:	aa12      	add	r2, sp, #72	; 0x48
   1e4ca:	482b      	ldr	r0, [pc, #172]	; (1e578 <gatt_notify+0x164>)
   1e4cc:	f008 fbc3 	bl	26c56 <z_impl_z_log_msg_static_create>
		return -EPERM;
   1e4d0:	f04f 30ff 	mov.w	r0, #4294967295
   1e4d4:	e7d5      	b.n	1e482 <gatt_notify+0x6e>
			LOG_WRN("Device is not subscribed to characteristic");
   1e4d6:	4b29      	ldr	r3, [pc, #164]	; (1e57c <gatt_notify+0x168>)
   1e4d8:	930d      	str	r3, [sp, #52]	; 0x34
   1e4da:	2202      	movs	r2, #2
   1e4dc:	f88d 2004 	strb.w	r2, [sp, #4]
   1e4e0:	2300      	movs	r3, #0
   1e4e2:	f88d 3005 	strb.w	r3, [sp, #5]
   1e4e6:	f88d 3006 	strb.w	r3, [sp, #6]
   1e4ea:	f88d 3007 	strb.w	r3, [sp, #7]
   1e4ee:	9901      	ldr	r1, [sp, #4]
   1e4f0:	910c      	str	r1, [sp, #48]	; 0x30
   1e4f2:	4619      	mov	r1, r3
   1e4f4:	f363 0100 	bfi	r1, r3, #0, #1
   1e4f8:	f363 0141 	bfi	r1, r3, #1, #1
   1e4fc:	f363 0182 	bfi	r1, r3, #2, #1
   1e500:	f363 01c5 	bfi	r1, r3, #3, #3
   1e504:	f362 1188 	bfi	r1, r2, #6, #3
   1e508:	2208      	movs	r2, #8
   1e50a:	f362 2152 	bfi	r1, r2, #9, #10
   1e50e:	f363 41de 	bfi	r1, r3, #19, #12
   1e512:	f363 71df 	bfi	r1, r3, #31, #1
   1e516:	aa0c      	add	r2, sp, #48	; 0x30
   1e518:	4817      	ldr	r0, [pc, #92]	; (1e578 <gatt_notify+0x164>)
   1e51a:	f008 fb9c 	bl	26c56 <z_impl_z_log_msg_static_create>
			return -EINVAL;
   1e51e:	f06f 0015 	mvn.w	r0, #21
   1e522:	e7ae      	b.n	1e482 <gatt_notify+0x6e>
		LOG_WRN("No buffer available to send notification");
   1e524:	4b16      	ldr	r3, [pc, #88]	; (1e580 <gatt_notify+0x16c>)
   1e526:	9307      	str	r3, [sp, #28]
   1e528:	2202      	movs	r2, #2
   1e52a:	f88d 2004 	strb.w	r2, [sp, #4]
   1e52e:	2300      	movs	r3, #0
   1e530:	f88d 3005 	strb.w	r3, [sp, #5]
   1e534:	f88d 3006 	strb.w	r3, [sp, #6]
   1e538:	f88d 3007 	strb.w	r3, [sp, #7]
   1e53c:	9901      	ldr	r1, [sp, #4]
   1e53e:	9106      	str	r1, [sp, #24]
   1e540:	4619      	mov	r1, r3
   1e542:	f363 0100 	bfi	r1, r3, #0, #1
   1e546:	f363 0141 	bfi	r1, r3, #1, #1
   1e54a:	f363 0182 	bfi	r1, r3, #2, #1
   1e54e:	f363 01c5 	bfi	r1, r3, #3, #3
   1e552:	f362 1188 	bfi	r1, r2, #6, #3
   1e556:	2208      	movs	r2, #8
   1e558:	f362 2152 	bfi	r1, r2, #9, #10
   1e55c:	f363 41de 	bfi	r1, r3, #19, #12
   1e560:	f363 71df 	bfi	r1, r3, #31, #1
   1e564:	aa06      	add	r2, sp, #24
   1e566:	4804      	ldr	r0, [pc, #16]	; (1e578 <gatt_notify+0x164>)
   1e568:	f008 fb75 	bl	26c56 <z_impl_z_log_msg_static_create>
		return -ENOMEM;
   1e56c:	f06f 000b 	mvn.w	r0, #11
   1e570:	e787      	b.n	1e482 <gatt_notify+0x6e>
   1e572:	bf00      	nop
   1e574:	0002f288 	.word	0x0002f288
   1e578:	0002d0b4 	.word	0x0002d0b4
   1e57c:	0002f2a0 	.word	0x0002f2a0
   1e580:	0002f328 	.word	0x0002f328

0001e584 <notify_cb>:
{
   1e584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e588:	b089      	sub	sp, #36	; 0x24
   1e58a:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1e58c:	6882      	ldr	r2, [r0, #8]
   1e58e:	4b67      	ldr	r3, [pc, #412]	; (1e72c <notify_cb+0x1a8>)
   1e590:	429a      	cmp	r2, r3
   1e592:	d005      	beq.n	1e5a0 <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
   1e594:	f04f 0a01 	mov.w	sl, #1
}
   1e598:	4650      	mov	r0, sl
   1e59a:	b009      	add	sp, #36	; 0x24
   1e59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e5a0:	4607      	mov	r7, r0
	ccc = attr->user_data;
   1e5a2:	68c5      	ldr	r5, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1e5a4:	4b62      	ldr	r3, [pc, #392]	; (1e730 <notify_cb+0x1ac>)
   1e5a6:	429d      	cmp	r5, r3
   1e5a8:	d02d      	beq.n	1e606 <notify_cb+0x82>
			err = 0;
   1e5aa:	2400      	movs	r4, #0
   1e5ac:	e085      	b.n	1e6ba <notify_cb+0x136>
				sc = (struct sc_data *)data->ind_params->data;
   1e5ae:	6933      	ldr	r3, [r6, #16]
   1e5b0:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1e5b2:	eb09 0049 	add.w	r0, r9, r9, lsl #1
   1e5b6:	8853      	ldrh	r3, [r2, #2]
   1e5b8:	8812      	ldrh	r2, [r2, #0]
   1e5ba:	4621      	mov	r1, r4
   1e5bc:	4c5d      	ldr	r4, [pc, #372]	; (1e734 <notify_cb+0x1b0>)
   1e5be:	f814 0020 	ldrb.w	r0, [r4, r0, lsl #2]
   1e5c2:	f7ff f869 	bl	1d698 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1e5c6:	f109 0901 	add.w	r9, r9, #1
   1e5ca:	f1b9 0f07 	cmp.w	r9, #7
   1e5ce:	d8ec      	bhi.n	1e5aa <notify_cb+0x26>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1e5d0:	eb09 0349 	add.w	r3, r9, r9, lsl #1
   1e5d4:	4c57      	ldr	r4, [pc, #348]	; (1e734 <notify_cb+0x1b0>)
   1e5d6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   1e5da:	3401      	adds	r4, #1
	return memcmp(a, b, sizeof(*a));
   1e5dc:	2207      	movs	r2, #7
   1e5de:	4956      	ldr	r1, [pc, #344]	; (1e738 <notify_cb+0x1b4>)
   1e5e0:	4620      	mov	r0, r4
   1e5e2:	f008 ff61 	bl	274a8 <memcmp>
   1e5e6:	2800      	cmp	r0, #0
   1e5e8:	d0ed      	beq.n	1e5c6 <notify_cb+0x42>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1e5ea:	eb09 0349 	add.w	r3, r9, r9, lsl #1
   1e5ee:	2207      	movs	r2, #7
   1e5f0:	4621      	mov	r1, r4
   1e5f2:	4850      	ldr	r0, [pc, #320]	; (1e734 <notify_cb+0x1b0>)
   1e5f4:	f810 0023 	ldrb.w	r0, [r0, r3, lsl #2]
   1e5f8:	f7fc fd84 	bl	1b104 <bt_conn_lookup_state_le>
			if (!conn) {
   1e5fc:	2800      	cmp	r0, #0
   1e5fe:	d0d6      	beq.n	1e5ae <notify_cb+0x2a>
			bt_conn_unref(conn);
   1e600:	f009 fba6 	bl	27d50 <bt_conn_unref>
   1e604:	e7df      	b.n	1e5c6 <notify_cb+0x42>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1e606:	f04f 0900 	mov.w	r9, #0
   1e60a:	e7de      	b.n	1e5ca <notify_cb+0x46>
			bt_conn_unref(conn);
   1e60c:	f009 fba0 	bl	27d50 <bt_conn_unref>
			continue;
   1e610:	e052      	b.n	1e6b8 <notify_cb+0x134>
			bt_conn_unref(conn);
   1e612:	4648      	mov	r0, r9
   1e614:	f009 fb9c 	bl	27d50 <bt_conn_unref>
			continue;
   1e618:	e04e      	b.n	1e6b8 <notify_cb+0x134>
			LOG_WRN("Link is not encrypted");
   1e61a:	4b48      	ldr	r3, [pc, #288]	; (1e73c <notify_cb+0x1b8>)
   1e61c:	9307      	str	r3, [sp, #28]
   1e61e:	2202      	movs	r2, #2
   1e620:	f88d 2004 	strb.w	r2, [sp, #4]
   1e624:	2300      	movs	r3, #0
   1e626:	f88d 3005 	strb.w	r3, [sp, #5]
   1e62a:	f88d 3006 	strb.w	r3, [sp, #6]
   1e62e:	f88d 3007 	strb.w	r3, [sp, #7]
   1e632:	9901      	ldr	r1, [sp, #4]
   1e634:	9106      	str	r1, [sp, #24]
   1e636:	f363 0800 	bfi	r8, r3, #0, #1
   1e63a:	f363 0841 	bfi	r8, r3, #1, #1
   1e63e:	f363 0882 	bfi	r8, r3, #2, #1
   1e642:	f363 08c5 	bfi	r8, r3, #3, #3
   1e646:	f362 1888 	bfi	r8, r2, #6, #3
   1e64a:	2208      	movs	r2, #8
   1e64c:	f362 2852 	bfi	r8, r2, #9, #10
   1e650:	f363 48de 	bfi	r8, r3, #19, #12
   1e654:	f363 78df 	bfi	r8, r3, #31, #1
   1e658:	aa06      	add	r2, sp, #24
   1e65a:	4641      	mov	r1, r8
   1e65c:	4838      	ldr	r0, [pc, #224]	; (1e740 <notify_cb+0x1bc>)
   1e65e:	f008 fafa 	bl	26c56 <z_impl_z_log_msg_static_create>
			bt_conn_unref(conn);
   1e662:	4648      	mov	r0, r9
   1e664:	f009 fb74 	bl	27d50 <bt_conn_unref>
			continue;
   1e668:	e026      	b.n	1e6b8 <notify_cb+0x134>
		    (cfg->value & BT_GATT_CCC_INDICATE)) {
   1e66a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1e66e:	eb05 0242 	add.w	r2, r5, r2, lsl #1
   1e672:	8912      	ldrh	r2, [r2, #8]
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1e674:	f012 0f02 	tst.w	r2, #2
   1e678:	d049      	beq.n	1e70e <notify_cb+0x18a>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1e67a:	6932      	ldr	r2, [r6, #16]
   1e67c:	88b1      	ldrh	r1, [r6, #4]
   1e67e:	4648      	mov	r0, r9
   1e680:	f7ff fc5e 	bl	1df40 <gatt_indicate>
			if (err == 0) {
   1e684:	4683      	mov	fp, r0
   1e686:	b970      	cbnz	r0, 1e6a6 <notify_cb+0x122>
				data->ind_params->_ref++;
   1e688:	6932      	ldr	r2, [r6, #16]
   1e68a:	7d93      	ldrb	r3, [r2, #22]
   1e68c:	3301      	adds	r3, #1
   1e68e:	7593      	strb	r3, [r2, #22]
   1e690:	e009      	b.n	1e6a6 <notify_cb+0x122>
			   (cfg->value & BT_GATT_CCC_NOTIFY)) {
   1e692:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1e696:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1e69a:	891b      	ldrh	r3, [r3, #8]
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1e69c:	f013 0f01 	tst.w	r3, #1
   1e6a0:	d13a      	bne.n	1e718 <notify_cb+0x194>
			err = 0;
   1e6a2:	f04f 0b00 	mov.w	fp, #0
		bt_conn_unref(conn);
   1e6a6:	4648      	mov	r0, r9
   1e6a8:	f009 fb52 	bl	27d50 <bt_conn_unref>
		if (err < 0) {
   1e6ac:	f1bb 0f00 	cmp.w	fp, #0
   1e6b0:	f6ff af72 	blt.w	1e598 <notify_cb+0x14>
		data->err = 0;
   1e6b4:	2300      	movs	r3, #0
   1e6b6:	60b3      	str	r3, [r6, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1e6b8:	3401      	adds	r4, #1
   1e6ba:	2c07      	cmp	r4, #7
   1e6bc:	d833      	bhi.n	1e726 <notify_cb+0x1a2>
		if (cfg->value != data->type) {
   1e6be:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1e6c2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1e6c6:	891a      	ldrh	r2, [r3, #8]
   1e6c8:	89b3      	ldrh	r3, [r6, #12]
   1e6ca:	429a      	cmp	r2, r3
   1e6cc:	d1f4      	bne.n	1e6b8 <notify_cb+0x134>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1e6ce:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1e6d2:	eb05 0143 	add.w	r1, r5, r3, lsl #1
   1e6d6:	3101      	adds	r1, #1
   1e6d8:	f815 0013 	ldrb.w	r0, [r5, r3, lsl #1]
   1e6dc:	f7fc fcec 	bl	1b0b8 <bt_conn_lookup_addr_le>
		if (!conn) {
   1e6e0:	4681      	mov	r9, r0
   1e6e2:	2800      	cmp	r0, #0
   1e6e4:	d0e8      	beq.n	1e6b8 <notify_cb+0x134>
		if (conn->state != BT_CONN_CONNECTED) {
   1e6e6:	7a83      	ldrb	r3, [r0, #10]
   1e6e8:	2b07      	cmp	r3, #7
   1e6ea:	d18f      	bne.n	1e60c <notify_cb+0x88>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1e6ec:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1e6ee:	b11b      	cbz	r3, 1e6f8 <notify_cb+0x174>
   1e6f0:	4639      	mov	r1, r7
   1e6f2:	4798      	blx	r3
   1e6f4:	2800      	cmp	r0, #0
   1e6f6:	d08c      	beq.n	1e612 <notify_cb+0x8e>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1e6f8:	2294      	movs	r2, #148	; 0x94
   1e6fa:	4639      	mov	r1, r7
   1e6fc:	4648      	mov	r0, r9
   1e6fe:	f00b f836 	bl	2976e <bt_gatt_check_perm>
   1e702:	4682      	mov	sl, r0
   1e704:	2800      	cmp	r0, #0
   1e706:	d188      	bne.n	1e61a <notify_cb+0x96>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1e708:	89b3      	ldrh	r3, [r6, #12]
   1e70a:	2b02      	cmp	r3, #2
   1e70c:	d0ad      	beq.n	1e66a <notify_cb+0xe6>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1e70e:	2b01      	cmp	r3, #1
   1e710:	d0bf      	beq.n	1e692 <notify_cb+0x10e>
			err = 0;
   1e712:	f04f 0b00 	mov.w	fp, #0
   1e716:	e7c6      	b.n	1e6a6 <notify_cb+0x122>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1e718:	6932      	ldr	r2, [r6, #16]
   1e71a:	88b1      	ldrh	r1, [r6, #4]
   1e71c:	4648      	mov	r0, r9
   1e71e:	f7ff fe79 	bl	1e414 <gatt_notify>
   1e722:	4683      	mov	fp, r0
   1e724:	e7bf      	b.n	1e6a6 <notify_cb+0x122>
	return BT_GATT_ITER_CONTINUE;
   1e726:	f04f 0a01 	mov.w	sl, #1
   1e72a:	e735      	b.n	1e598 <notify_cb+0x14>
   1e72c:	0001d761 	.word	0x0001d761
   1e730:	2000083c 	.word	0x2000083c
   1e734:	2000818c 	.word	0x2000818c
   1e738:	0002e1f0 	.word	0x0002e1f0
   1e73c:	0002f288 	.word	0x0002f288
   1e740:	0002d0b4 	.word	0x0002d0b4

0001e744 <bt_gatt_exchange_mtu>:
	if (conn->state != BT_CONN_CONNECTED) {
   1e744:	7a83      	ldrb	r3, [r0, #10]
   1e746:	2b07      	cmp	r3, #7
   1e748:	d123      	bne.n	1e792 <bt_gatt_exchange_mtu+0x4e>
{
   1e74a:	b570      	push	{r4, r5, r6, lr}
   1e74c:	b084      	sub	sp, #16
   1e74e:	4604      	mov	r4, r0
   1e750:	460d      	mov	r5, r1
	if (atomic_test_and_set_bit(conn->flags, BT_CONN_ATT_MTU_EXCHANGED)) {
   1e752:	1d06      	adds	r6, r0, #4
   1e754:	210c      	movs	r1, #12
   1e756:	4630      	mov	r0, r6
   1e758:	f00a fd31 	bl	291be <atomic_test_and_set_bit>
   1e75c:	b9e0      	cbnz	r0, 1e798 <bt_gatt_exchange_mtu+0x54>
	err = gatt_req_send(conn, gatt_mtu_rsp, params,
   1e75e:	2301      	movs	r3, #1
   1e760:	9302      	str	r3, [sp, #8]
   1e762:	2302      	movs	r3, #2
   1e764:	9301      	str	r3, [sp, #4]
   1e766:	9300      	str	r3, [sp, #0]
   1e768:	4b0d      	ldr	r3, [pc, #52]	; (1e7a0 <bt_gatt_exchange_mtu+0x5c>)
   1e76a:	462a      	mov	r2, r5
   1e76c:	490d      	ldr	r1, [pc, #52]	; (1e7a4 <bt_gatt_exchange_mtu+0x60>)
   1e76e:	4620      	mov	r0, r4
   1e770:	f00a fe5b 	bl	2942a <gatt_req_send>
	if (err) {
   1e774:	b158      	cbz	r0, 1e78e <bt_gatt_exchange_mtu+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e776:	f3bf 8f5b 	dmb	ish
   1e77a:	e856 3f00 	ldrex	r3, [r6]
   1e77e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   1e782:	e846 3200 	strex	r2, r3, [r6]
   1e786:	2a00      	cmp	r2, #0
   1e788:	d1f7      	bne.n	1e77a <bt_gatt_exchange_mtu+0x36>
   1e78a:	f3bf 8f5b 	dmb	ish
}
   1e78e:	b004      	add	sp, #16
   1e790:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTCONN;
   1e792:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   1e796:	4770      	bx	lr
		return -EALREADY;
   1e798:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1e79c:	e7f7      	b.n	1e78e <bt_gatt_exchange_mtu+0x4a>
   1e79e:	bf00      	nop
   1e7a0:	000294f1 	.word	0x000294f1
   1e7a4:	000290bd 	.word	0x000290bd

0001e7a8 <bt_gatt_mult_notification>:
{
   1e7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e7ac:	b087      	sub	sp, #28
   1e7ae:	af00      	add	r7, sp, #0
   1e7b0:	4606      	mov	r6, r0
   1e7b2:	460c      	mov	r4, r1
   1e7b4:	4615      	mov	r5, r2
	sub = gatt_sub_find(conn);
   1e7b6:	f7fe fedd 	bl	1d574 <gatt_sub_find>
	if (!sub) {
   1e7ba:	2800      	cmp	r0, #0
   1e7bc:	d044      	beq.n	1e848 <bt_gatt_mult_notification+0xa0>
   1e7be:	4680      	mov	r8, r0
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   1e7c0:	462a      	mov	r2, r5
   1e7c2:	4621      	mov	r1, r4
   1e7c4:	f107 000c 	add.w	r0, r7, #12
   1e7c8:	f00b fb04 	bl	29dd4 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   1e7cc:	46b1      	mov	r9, r6
   1e7ce:	607d      	str	r5, [r7, #4]
   1e7d0:	e06c      	b.n	1e8ac <bt_gatt_mult_notification+0x104>
			LOG_ERR("Invalid data len %u > %u", len, length);
   1e7d2:	46ab      	mov	fp, r5
   1e7d4:	687d      	ldr	r5, [r7, #4]
   1e7d6:	466e      	mov	r6, sp
   1e7d8:	b088      	sub	sp, #32
   1e7da:	466b      	mov	r3, sp
   1e7dc:	f113 0210 	adds.w	r2, r3, #16
   1e7e0:	d036      	beq.n	1e850 <bt_gatt_mult_notification+0xa8>
   1e7e2:	2110      	movs	r1, #16
   1e7e4:	b15a      	cbz	r2, 1e7fe <bt_gatt_mult_notification+0x56>
   1e7e6:	4608      	mov	r0, r1
   1e7e8:	2904      	cmp	r1, #4
   1e7ea:	dd01      	ble.n	1e7f0 <bt_gatt_mult_notification+0x48>
   1e7ec:	4c3c      	ldr	r4, [pc, #240]	; (1e8e0 <bt_gatt_mult_notification+0x138>)
   1e7ee:	615c      	str	r4, [r3, #20]
   1e7f0:	2808      	cmp	r0, #8
   1e7f2:	dd01      	ble.n	1e7f8 <bt_gatt_mult_notification+0x50>
   1e7f4:	f8c3 b018 	str.w	fp, [r3, #24]
   1e7f8:	280c      	cmp	r0, #12
   1e7fa:	dd00      	ble.n	1e7fe <bt_gatt_mult_notification+0x56>
   1e7fc:	61dd      	str	r5, [r3, #28]
   1e7fe:	290f      	cmp	r1, #15
   1e800:	dd29      	ble.n	1e856 <bt_gatt_mult_notification+0xae>
   1e802:	2410      	movs	r4, #16
   1e804:	b13a      	cbz	r2, 1e816 <bt_gatt_mult_notification+0x6e>
   1e806:	2104      	movs	r1, #4
   1e808:	7239      	strb	r1, [r7, #8]
   1e80a:	2100      	movs	r1, #0
   1e80c:	7279      	strb	r1, [r7, #9]
   1e80e:	72b9      	strb	r1, [r7, #10]
   1e810:	72f9      	strb	r1, [r7, #11]
   1e812:	68b8      	ldr	r0, [r7, #8]
   1e814:	6118      	str	r0, [r3, #16]
   1e816:	2100      	movs	r1, #0
   1e818:	f36f 0100 	bfc	r1, #0, #1
   1e81c:	f36f 0141 	bfc	r1, #1, #1
   1e820:	f36f 0182 	bfc	r1, #2, #1
   1e824:	f36f 01c5 	bfc	r1, #3, #3
   1e828:	2301      	movs	r3, #1
   1e82a:	f363 1188 	bfi	r1, r3, #6, #3
   1e82e:	f404 747d 	and.w	r4, r4, #1012	; 0x3f4
   1e832:	f364 2152 	bfi	r1, r4, #9, #10
   1e836:	f36f 41de 	bfc	r1, #19, #12
   1e83a:	f36f 71df 	bfc	r1, #31, #1
   1e83e:	2300      	movs	r3, #0
   1e840:	4828      	ldr	r0, [pc, #160]	; (1e8e4 <bt_gatt_mult_notification+0x13c>)
   1e842:	f008 fa08 	bl	26c56 <z_impl_z_log_msg_static_create>
   1e846:	46b5      	mov	sp, r6
}
   1e848:	371c      	adds	r7, #28
   1e84a:	46bd      	mov	sp, r7
   1e84c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("Invalid data len %u > %u", len, length);
   1e850:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1e854:	e7c6      	b.n	1e7e4 <bt_gatt_mult_notification+0x3c>
   1e856:	f06f 041b 	mvn.w	r4, #27
   1e85a:	e7d3      	b.n	1e804 <bt_gatt_mult_notification+0x5c>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1e85c:	b1fe      	cbz	r6, 1e89e <bt_gatt_mult_notification+0xf6>
	return node->next;
   1e85e:	69b3      	ldr	r3, [r6, #24]
   1e860:	b103      	cbz	r3, 1e864 <bt_gatt_mult_notification+0xbc>
   1e862:	3b18      	subs	r3, #24
   1e864:	4634      	mov	r4, r6
   1e866:	461e      	mov	r6, r3
   1e868:	b1dc      	cbz	r4, 1e8a2 <bt_gatt_mult_notification+0xfa>
			if (handle != params->value_handle) {
   1e86a:	89a3      	ldrh	r3, [r4, #12]
   1e86c:	459a      	cmp	sl, r3
   1e86e:	d1f5      	bne.n	1e85c <bt_gatt_mult_notification+0xb4>
			if (check_subscribe_security_level(conn, params)) {
   1e870:	4621      	mov	r1, r4
   1e872:	4648      	mov	r0, r9
   1e874:	f00a fc20 	bl	290b8 <check_subscribe_security_level>
   1e878:	2800      	cmp	r0, #0
   1e87a:	d0ef      	beq.n	1e85c <bt_gatt_mult_notification+0xb4>
				if (params->notify(conn, params, nfy->value, len) ==
   1e87c:	462b      	mov	r3, r5
   1e87e:	f10b 0204 	add.w	r2, fp, #4
   1e882:	4621      	mov	r1, r4
   1e884:	4648      	mov	r0, r9
   1e886:	f8d4 c000 	ldr.w	ip, [r4]
   1e88a:	47e0      	blx	ip
   1e88c:	2800      	cmp	r0, #0
   1e88e:	d1e5      	bne.n	1e85c <bt_gatt_mult_notification+0xb4>
					bt_gatt_unsubscribe(conn, params);
   1e890:	4621      	mov	r1, r4
   1e892:	4648      	mov	r0, r9
   1e894:	f00b f89e 	bl	299d4 <bt_gatt_unsubscribe>
   1e898:	e7e0      	b.n	1e85c <bt_gatt_mult_notification+0xb4>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1e89a:	4626      	mov	r6, r4
   1e89c:	e7e4      	b.n	1e868 <bt_gatt_mult_notification+0xc0>
   1e89e:	4633      	mov	r3, r6
   1e8a0:	e7e0      	b.n	1e864 <bt_gatt_mult_notification+0xbc>
		net_buf_simple_pull_mem(&buf, len);
   1e8a2:	4629      	mov	r1, r5
   1e8a4:	f107 000c 	add.w	r0, r7, #12
   1e8a8:	f00b fb41 	bl	29f2e <net_buf_simple_pull_mem>
	while (buf.len > sizeof(*nfy)) {
   1e8ac:	8a3b      	ldrh	r3, [r7, #16]
   1e8ae:	2b04      	cmp	r3, #4
   1e8b0:	d9ca      	bls.n	1e848 <bt_gatt_mult_notification+0xa0>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1e8b2:	2104      	movs	r1, #4
   1e8b4:	f107 000c 	add.w	r0, r7, #12
   1e8b8:	f00b fb39 	bl	29f2e <net_buf_simple_pull_mem>
   1e8bc:	4683      	mov	fp, r0
		handle = sys_cpu_to_le16(nfy->handle);
   1e8be:	f8b0 a000 	ldrh.w	sl, [r0]
		len = sys_cpu_to_le16(nfy->len);
   1e8c2:	8845      	ldrh	r5, [r0, #2]
		if (len > buf.len) {
   1e8c4:	8a3b      	ldrh	r3, [r7, #16]
   1e8c6:	42ab      	cmp	r3, r5
   1e8c8:	d383      	bcc.n	1e7d2 <bt_gatt_mult_notification+0x2a>
	return list->head;
   1e8ca:	f8d8 4008 	ldr.w	r4, [r8, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1e8ce:	2c00      	cmp	r4, #0
   1e8d0:	d0e3      	beq.n	1e89a <bt_gatt_mult_notification+0xf2>
	return node->next;
   1e8d2:	f854 6918 	ldr.w	r6, [r4], #-24
   1e8d6:	2e00      	cmp	r6, #0
   1e8d8:	d0c6      	beq.n	1e868 <bt_gatt_mult_notification+0xc0>
   1e8da:	3e18      	subs	r6, #24
   1e8dc:	e7c4      	b.n	1e868 <bt_gatt_mult_notification+0xc0>
   1e8de:	bf00      	nop
   1e8e0:	0002f354 	.word	0x0002f354
   1e8e4:	0002d0b4 	.word	0x0002d0b4

0001e8e8 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   1e8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e8ea:	b089      	sub	sp, #36	; 0x24
   1e8ec:	af04      	add	r7, sp, #16
   1e8ee:	4604      	mov	r4, r0
	struct conn_data data;

	LOG_DBG("conn %p", conn);

	data.conn = conn;
   1e8f0:	60b8      	str	r0, [r7, #8]
	data.sec = BT_SECURITY_L1;
   1e8f2:	2001      	movs	r0, #1
   1e8f4:	7338      	strb	r0, [r7, #12]
   1e8f6:	f107 0308 	add.w	r3, r7, #8
   1e8fa:	9302      	str	r3, [sp, #8]
   1e8fc:	4b27      	ldr	r3, [pc, #156]	; (1e99c <bt_gatt_connected+0xb4>)
   1e8fe:	9301      	str	r3, [sp, #4]
   1e900:	2200      	movs	r2, #0
   1e902:	9200      	str	r2, [sp, #0]
   1e904:	4613      	mov	r3, r2
   1e906:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e90a:	f7ff f9c5 	bl	1dc98 <bt_gatt_foreach_attr_type>
			LOG_WRN("Failed to set security for bonded peer (%d)", err);
		}
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
   1e90e:	4620      	mov	r0, r4
   1e910:	f00a fdcd 	bl	294ae <add_subscriptions>
#if defined(CONFIG_BT_GATT_AUTO_UPDATE_MTU)
	int err;

	err = bt_gatt_exchange_mtu(conn, &gatt_exchange_params);
   1e914:	4922      	ldr	r1, [pc, #136]	; (1e9a0 <bt_gatt_connected+0xb8>)
   1e916:	4620      	mov	r0, r4
   1e918:	f7ff ff14 	bl	1e744 <bt_gatt_exchange_mtu>
	if (err) {
   1e91c:	b3a8      	cbz	r0, 1e98a <bt_gatt_connected+0xa2>
   1e91e:	4604      	mov	r4, r0
		LOG_WRN("MTU Exchange failed (err %d)", err);
   1e920:	466d      	mov	r5, sp
   1e922:	b088      	sub	sp, #32
   1e924:	ab04      	add	r3, sp, #16
   1e926:	f113 0210 	adds.w	r2, r3, #16
   1e92a:	d031      	beq.n	1e990 <bt_gatt_connected+0xa8>
   1e92c:	210c      	movs	r1, #12
   1e92e:	b13a      	cbz	r2, 1e940 <bt_gatt_connected+0x58>
   1e930:	4608      	mov	r0, r1
   1e932:	2904      	cmp	r1, #4
   1e934:	dd01      	ble.n	1e93a <bt_gatt_connected+0x52>
   1e936:	4e1b      	ldr	r6, [pc, #108]	; (1e9a4 <bt_gatt_connected+0xbc>)
   1e938:	615e      	str	r6, [r3, #20]
   1e93a:	2808      	cmp	r0, #8
   1e93c:	dd00      	ble.n	1e940 <bt_gatt_connected+0x58>
   1e93e:	619c      	str	r4, [r3, #24]
   1e940:	290b      	cmp	r1, #11
   1e942:	dd28      	ble.n	1e996 <bt_gatt_connected+0xae>
   1e944:	240c      	movs	r4, #12
   1e946:	b13a      	cbz	r2, 1e958 <bt_gatt_connected+0x70>
   1e948:	2103      	movs	r1, #3
   1e94a:	7139      	strb	r1, [r7, #4]
   1e94c:	2100      	movs	r1, #0
   1e94e:	7179      	strb	r1, [r7, #5]
   1e950:	71b9      	strb	r1, [r7, #6]
   1e952:	71f9      	strb	r1, [r7, #7]
   1e954:	6878      	ldr	r0, [r7, #4]
   1e956:	6118      	str	r0, [r3, #16]
   1e958:	2100      	movs	r1, #0
   1e95a:	f36f 0100 	bfc	r1, #0, #1
   1e95e:	f36f 0141 	bfc	r1, #1, #1
   1e962:	f36f 0182 	bfc	r1, #2, #1
   1e966:	f36f 01c5 	bfc	r1, #3, #3
   1e96a:	2302      	movs	r3, #2
   1e96c:	f363 1188 	bfi	r1, r3, #6, #3
   1e970:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1e974:	f364 2152 	bfi	r1, r4, #9, #10
   1e978:	f36f 41de 	bfc	r1, #19, #12
   1e97c:	f36f 71df 	bfc	r1, #31, #1
   1e980:	2300      	movs	r3, #0
   1e982:	4809      	ldr	r0, [pc, #36]	; (1e9a8 <bt_gatt_connected+0xc0>)
   1e984:	f008 f967 	bl	26c56 <z_impl_z_log_msg_static_create>
   1e988:	46ad      	mov	sp, r5
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   1e98a:	3714      	adds	r7, #20
   1e98c:	46bd      	mov	sp, r7
   1e98e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_WRN("MTU Exchange failed (err %d)", err);
   1e990:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1e994:	e7cb      	b.n	1e92e <bt_gatt_connected+0x46>
   1e996:	f06f 041b 	mvn.w	r4, #27
   1e99a:	e7d4      	b.n	1e946 <bt_gatt_connected+0x5e>
   1e99c:	0001e311 	.word	0x0001e311
   1e9a0:	200007f0 	.word	0x200007f0
   1e9a4:	0002f370 	.word	0x0002f370
   1e9a8:	0002d0b4 	.word	0x0002d0b4

0001e9ac <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   1e9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e9ae:	4605      	mov	r5, r0
   1e9b0:	460e      	mov	r6, r1
   1e9b2:	4617      	mov	r7, r2
	return list->head;
   1e9b4:	4b0a      	ldr	r3, [pc, #40]	; (1e9e0 <bt_gatt_att_max_mtu_changed+0x34>)
   1e9b6:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1e9b8:	b104      	cbz	r4, 1e9bc <bt_gatt_att_max_mtu_changed+0x10>
   1e9ba:	3c04      	subs	r4, #4
   1e9bc:	b174      	cbz	r4, 1e9dc <bt_gatt_att_max_mtu_changed+0x30>
		if (cb->att_mtu_updated) {
   1e9be:	6823      	ldr	r3, [r4, #0]
   1e9c0:	b143      	cbz	r3, 1e9d4 <bt_gatt_att_max_mtu_changed+0x28>
			cb->att_mtu_updated(conn, tx, rx);
   1e9c2:	463a      	mov	r2, r7
   1e9c4:	4631      	mov	r1, r6
   1e9c6:	4628      	mov	r0, r5
   1e9c8:	4798      	blx	r3
	return node->next;
   1e9ca:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1e9cc:	2c00      	cmp	r4, #0
   1e9ce:	d0f5      	beq.n	1e9bc <bt_gatt_att_max_mtu_changed+0x10>
   1e9d0:	3c04      	subs	r4, #4
   1e9d2:	e7f3      	b.n	1e9bc <bt_gatt_att_max_mtu_changed+0x10>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e9d4:	1d23      	adds	r3, r4, #4
   1e9d6:	d1f8      	bne.n	1e9ca <bt_gatt_att_max_mtu_changed+0x1e>
   1e9d8:	461c      	mov	r4, r3
   1e9da:	e7ef      	b.n	1e9bc <bt_gatt_att_max_mtu_changed+0x10>
		}
	}
}
   1e9dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e9de:	bf00      	nop
   1e9e0:	200081f4 	.word	0x200081f4

0001e9e4 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1e9e4:	b510      	push	{r4, lr}
   1e9e6:	b084      	sub	sp, #16
   1e9e8:	4604      	mov	r4, r0
   1e9ea:	9002      	str	r0, [sp, #8]
   1e9ec:	4b08      	ldr	r3, [pc, #32]	; (1ea10 <bt_gatt_disconnected+0x2c>)
   1e9ee:	9301      	str	r3, [sp, #4]
   1e9f0:	2200      	movs	r2, #0
   1e9f2:	9200      	str	r2, [sp, #0]
   1e9f4:	4613      	mov	r3, r2
   1e9f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e9fa:	2001      	movs	r0, #1
   1e9fc:	f7ff f94c 	bl	1dc98 <bt_gatt_foreach_attr_type>
				     remove_peer_from_attr,
				     &addr_with_id);
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	remove_subscriptions(conn);
   1ea00:	4620      	mov	r0, r4
   1ea02:	f00a fc32 	bl	2926a <remove_subscriptions>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
   1ea06:	4620      	mov	r0, r4
   1ea08:	f00a fd9b 	bl	29542 <remove_cf_cfg>
#endif
}
   1ea0c:	b004      	add	sp, #16
   1ea0e:	bd10      	pop	{r4, pc}
   1ea10:	0001daa1 	.word	0x0001daa1

0001ea14 <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1ea14:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ea16:	b083      	sub	sp, #12
   1ea18:	af00      	add	r7, sp, #0
		.recv = bt_smp_recv,
	};

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1ea1a:	2300      	movs	r3, #0
   1ea1c:	2b07      	cmp	r3, #7
   1ea1e:	d812      	bhi.n	1ea46 <bt_smp_accept+0x32>
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   1ea20:	228c      	movs	r2, #140	; 0x8c
   1ea22:	fb03 f202 	mul.w	r2, r3, r2
   1ea26:	4c27      	ldr	r4, [pc, #156]	; (1eac4 <bt_smp_accept+0xb0>)
   1ea28:	58a2      	ldr	r2, [r4, r2]
   1ea2a:	b10a      	cbz	r2, 1ea30 <bt_smp_accept+0x1c>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1ea2c:	3301      	adds	r3, #1
   1ea2e:	e7f5      	b.n	1ea1c <bt_smp_accept+0x8>
			continue;
		}

		smp->chan.ops = &ops;
   1ea30:	4a24      	ldr	r2, [pc, #144]	; (1eac4 <bt_smp_accept+0xb0>)
   1ea32:	208c      	movs	r0, #140	; 0x8c
   1ea34:	fb00 2303 	mla	r3, r0, r3, r2
   1ea38:	4a23      	ldr	r2, [pc, #140]	; (1eac8 <bt_smp_accept+0xb4>)
   1ea3a:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
   1ea3c:	600b      	str	r3, [r1, #0]

		return 0;
   1ea3e:	2000      	movs	r0, #0
	}

	LOG_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   1ea40:	370c      	adds	r7, #12
   1ea42:	46bd      	mov	sp, r7
   1ea44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_ERR("No available SMP context for conn %p", conn);
   1ea46:	466d      	mov	r5, sp
   1ea48:	b088      	sub	sp, #32
   1ea4a:	466b      	mov	r3, sp
   1ea4c:	f113 0210 	adds.w	r2, r3, #16
   1ea50:	d031      	beq.n	1eab6 <bt_smp_accept+0xa2>
   1ea52:	210c      	movs	r1, #12
   1ea54:	b13a      	cbz	r2, 1ea66 <bt_smp_accept+0x52>
   1ea56:	460c      	mov	r4, r1
   1ea58:	2904      	cmp	r1, #4
   1ea5a:	dd01      	ble.n	1ea60 <bt_smp_accept+0x4c>
   1ea5c:	4e1b      	ldr	r6, [pc, #108]	; (1eacc <bt_smp_accept+0xb8>)
   1ea5e:	615e      	str	r6, [r3, #20]
   1ea60:	2c08      	cmp	r4, #8
   1ea62:	dd00      	ble.n	1ea66 <bt_smp_accept+0x52>
   1ea64:	6198      	str	r0, [r3, #24]
   1ea66:	290b      	cmp	r1, #11
   1ea68:	dd28      	ble.n	1eabc <bt_smp_accept+0xa8>
   1ea6a:	240c      	movs	r4, #12
   1ea6c:	b13a      	cbz	r2, 1ea7e <bt_smp_accept+0x6a>
   1ea6e:	2103      	movs	r1, #3
   1ea70:	7139      	strb	r1, [r7, #4]
   1ea72:	2100      	movs	r1, #0
   1ea74:	7179      	strb	r1, [r7, #5]
   1ea76:	71b9      	strb	r1, [r7, #6]
   1ea78:	71f9      	strb	r1, [r7, #7]
   1ea7a:	6878      	ldr	r0, [r7, #4]
   1ea7c:	6118      	str	r0, [r3, #16]
   1ea7e:	2100      	movs	r1, #0
   1ea80:	f36f 0100 	bfc	r1, #0, #1
   1ea84:	f36f 0141 	bfc	r1, #1, #1
   1ea88:	f36f 0182 	bfc	r1, #2, #1
   1ea8c:	f36f 01c5 	bfc	r1, #3, #3
   1ea90:	2301      	movs	r3, #1
   1ea92:	f363 1188 	bfi	r1, r3, #6, #3
   1ea96:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1ea9a:	f363 2152 	bfi	r1, r3, #9, #10
   1ea9e:	f36f 41de 	bfc	r1, #19, #12
   1eaa2:	f36f 71df 	bfc	r1, #31, #1
   1eaa6:	2300      	movs	r3, #0
   1eaa8:	4809      	ldr	r0, [pc, #36]	; (1ead0 <bt_smp_accept+0xbc>)
   1eaaa:	f008 f8d4 	bl	26c56 <z_impl_z_log_msg_static_create>
   1eaae:	46ad      	mov	sp, r5
	return -ENOMEM;
   1eab0:	f06f 000b 	mvn.w	r0, #11
   1eab4:	e7c4      	b.n	1ea40 <bt_smp_accept+0x2c>
	LOG_ERR("No available SMP context for conn %p", conn);
   1eab6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1eaba:	e7cb      	b.n	1ea54 <bt_smp_accept+0x40>
   1eabc:	f06f 041b 	mvn.w	r4, #27
   1eac0:	e7d4      	b.n	1ea6c <bt_smp_accept+0x58>
   1eac2:	bf00      	nop
   1eac4:	2000827c 	.word	0x2000827c
   1eac8:	0002f4cc 	.word	0x0002f4cc
   1eacc:	0002f4a4 	.word	0x0002f4a4
   1ead0:	0002d0f4 	.word	0x0002d0f4

0001ead4 <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   1ead4:	4b03      	ldr	r3, [pc, #12]	; (1eae4 <pool_id+0x10>)
   1ead6:	1ac0      	subs	r0, r0, r3
   1ead8:	1080      	asrs	r0, r0, #2
}
   1eada:	4b03      	ldr	r3, [pc, #12]	; (1eae8 <pool_id+0x14>)
   1eadc:	fb03 f000 	mul.w	r0, r3, r0
   1eae0:	4770      	bx	lr
   1eae2:	bf00      	nop
   1eae4:	20000b24 	.word	0x20000b24
   1eae8:	ba2e8ba3 	.word	0xba2e8ba3

0001eaec <net_buf_pool_get>:
}
   1eaec:	222c      	movs	r2, #44	; 0x2c
   1eaee:	4b02      	ldr	r3, [pc, #8]	; (1eaf8 <net_buf_pool_get+0xc>)
   1eaf0:	fb02 3000 	mla	r0, r2, r0, r3
   1eaf4:	4770      	bx	lr
   1eaf6:	bf00      	nop
   1eaf8:	20000b24 	.word	0x20000b24

0001eafc <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   1eafc:	b508      	push	{r3, lr}
   1eafe:	4804      	ldr	r0, [pc, #16]	; (1eb10 <xoshiro128_initialize+0x14>)
   1eb00:	f00d f90b 	bl	2bd1a <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
   1eb04:	b108      	cbz	r0, 1eb0a <xoshiro128_initialize+0xe>
		return -ENODEV;
	}
	return 0;
   1eb06:	2000      	movs	r0, #0
}
   1eb08:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1eb0a:	f06f 0012 	mvn.w	r0, #18
   1eb0e:	e7fb      	b.n	1eb08 <xoshiro128_initialize+0xc>
   1eb10:	0002cdf0 	.word	0x0002cdf0

0001eb14 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   1eb14:	4800      	ldr	r0, [pc, #0]	; (1eb18 <get_hf_flags+0x4>)
   1eb16:	4770      	bx	lr
   1eb18:	20008730 	.word	0x20008730

0001eb1c <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   1eb1c:	4b03      	ldr	r3, [pc, #12]	; (1eb2c <get_subsys+0x10>)
   1eb1e:	1ac0      	subs	r0, r0, r3
   1eb20:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
   1eb22:	4b03      	ldr	r3, [pc, #12]	; (1eb30 <get_subsys+0x14>)
   1eb24:	fb03 f000 	mul.w	r0, r3, r0
   1eb28:	4770      	bx	lr
   1eb2a:	bf00      	nop
   1eb2c:	200086f0 	.word	0x200086f0
   1eb30:	b6db6db7 	.word	0xb6db6db7

0001eb34 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1eb34:	b538      	push	{r3, r4, r5, lr}
   1eb36:	4605      	mov	r5, r0
   1eb38:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1eb3a:	f7ff ffef 	bl	1eb1c <get_subsys>
   1eb3e:	4601      	mov	r1, r0
   1eb40:	2240      	movs	r2, #64	; 0x40
   1eb42:	4803      	ldr	r0, [pc, #12]	; (1eb50 <onoff_stop+0x1c>)
   1eb44:	f00b fab2 	bl	2a0ac <stop>
   1eb48:	4601      	mov	r1, r0
	notify(mgr, res);
   1eb4a:	4628      	mov	r0, r5
   1eb4c:	47a0      	blx	r4
}
   1eb4e:	bd38      	pop	{r3, r4, r5, pc}
   1eb50:	0002cda8 	.word	0x0002cda8

0001eb54 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1eb54:	b530      	push	{r4, r5, lr}
   1eb56:	b083      	sub	sp, #12
   1eb58:	4605      	mov	r5, r0
   1eb5a:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1eb5c:	f7ff ffde 	bl	1eb1c <get_subsys>
   1eb60:	4601      	mov	r1, r0
   1eb62:	2340      	movs	r3, #64	; 0x40
   1eb64:	9300      	str	r3, [sp, #0]
   1eb66:	4623      	mov	r3, r4
   1eb68:	4a05      	ldr	r2, [pc, #20]	; (1eb80 <onoff_start+0x2c>)
   1eb6a:	4806      	ldr	r0, [pc, #24]	; (1eb84 <onoff_start+0x30>)
   1eb6c:	f00b fab8 	bl	2a0e0 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1eb70:	1e01      	subs	r1, r0, #0
   1eb72:	db01      	blt.n	1eb78 <onoff_start+0x24>
		notify(mgr, err);
	}
}
   1eb74:	b003      	add	sp, #12
   1eb76:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   1eb78:	4628      	mov	r0, r5
   1eb7a:	47a0      	blx	r4
}
   1eb7c:	e7fa      	b.n	1eb74 <onoff_start+0x20>
   1eb7e:	bf00      	nop
   1eb80:	0002a129 	.word	0x0002a129
   1eb84:	0002cda8 	.word	0x0002cda8

0001eb88 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   1eb88:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   1eb8a:	b110      	cbz	r0, 1eb92 <clock_event_handler+0xa>
   1eb8c:	2801      	cmp	r0, #1
   1eb8e:	d00d      	beq.n	1ebac <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
   1eb90:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1eb92:	2100      	movs	r1, #0
   1eb94:	4808      	ldr	r0, [pc, #32]	; (1ebb8 <clock_event_handler+0x30>)
   1eb96:	f00b fa12 	bl	29fbe <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1eb9a:	6883      	ldr	r3, [r0, #8]
   1eb9c:	f013 0f07 	tst.w	r3, #7
   1eba0:	d1f6      	bne.n	1eb90 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1eba2:	2100      	movs	r1, #0
   1eba4:	4804      	ldr	r0, [pc, #16]	; (1ebb8 <clock_event_handler+0x30>)
   1eba6:	f00b fa6f 	bl	2a088 <clkstarted_handle>
   1ebaa:	e7f1      	b.n	1eb90 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1ebac:	2101      	movs	r1, #1
   1ebae:	4802      	ldr	r0, [pc, #8]	; (1ebb8 <clock_event_handler+0x30>)
   1ebb0:	f00b fa6a 	bl	2a088 <clkstarted_handle>
}
   1ebb4:	e7ec      	b.n	1eb90 <clock_event_handler+0x8>
   1ebb6:	bf00      	nop
   1ebb8:	0002cda8 	.word	0x0002cda8

0001ebbc <generic_hfclk_start>:
{
   1ebbc:	b510      	push	{r4, lr}
   1ebbe:	b082      	sub	sp, #8
	__asm__ volatile(
   1ebc0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ebc4:	f3ef 8411 	mrs	r4, BASEPRI
   1ebc8:	f383 8812 	msr	BASEPRI_MAX, r3
   1ebcc:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1ebd0:	4a14      	ldr	r2, [pc, #80]	; (1ec24 <generic_hfclk_start+0x68>)
   1ebd2:	6813      	ldr	r3, [r2, #0]
   1ebd4:	f043 0102 	orr.w	r1, r3, #2
   1ebd8:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1ebda:	f013 0f01 	tst.w	r3, #1
   1ebde:	d109      	bne.n	1ebf4 <generic_hfclk_start+0x38>
	bool already_started = false;
   1ebe0:	2300      	movs	r3, #0
	__asm__ volatile(
   1ebe2:	f384 8811 	msr	BASEPRI, r4
   1ebe6:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1ebea:	b9b3      	cbnz	r3, 1ec1a <generic_hfclk_start+0x5e>
	hfclk_start();
   1ebec:	f00b faa4 	bl	2a138 <hfclk_start>
}
   1ebf0:	b002      	add	sp, #8
   1ebf2:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   1ebf4:	f10d 0207 	add.w	r2, sp, #7
   1ebf8:	2101      	movs	r1, #1
   1ebfa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1ebfe:	f00b f9bb 	bl	29f78 <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1ec02:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1ec06:	2b01      	cmp	r3, #1
   1ec08:	d001      	beq.n	1ec0e <generic_hfclk_start+0x52>
	bool already_started = false;
   1ec0a:	2300      	movs	r3, #0
   1ec0c:	e7e9      	b.n	1ebe2 <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
   1ec0e:	f7ff ff81 	bl	1eb14 <get_hf_flags>
   1ec12:	f00b fa26 	bl	2a062 <set_on_state>
			already_started = true;
   1ec16:	2301      	movs	r3, #1
   1ec18:	e7e3      	b.n	1ebe2 <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
   1ec1a:	2100      	movs	r1, #0
   1ec1c:	4802      	ldr	r0, [pc, #8]	; (1ec28 <generic_hfclk_start+0x6c>)
   1ec1e:	f00b fa33 	bl	2a088 <clkstarted_handle>
		return;
   1ec22:	e7e5      	b.n	1ebf0 <generic_hfclk_start+0x34>
   1ec24:	20008740 	.word	0x20008740
   1ec28:	0002cda8 	.word	0x0002cda8

0001ec2c <generic_hfclk_stop>:
{
   1ec2c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ec2e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ec32:	f3ef 8411 	mrs	r4, BASEPRI
   1ec36:	f383 8812 	msr	BASEPRI_MAX, r3
   1ec3a:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1ec3e:	4a08      	ldr	r2, [pc, #32]	; (1ec60 <generic_hfclk_stop+0x34>)
   1ec40:	6813      	ldr	r3, [r2, #0]
   1ec42:	f023 0102 	bic.w	r1, r3, #2
   1ec46:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1ec48:	f013 0f01 	tst.w	r3, #1
   1ec4c:	d004      	beq.n	1ec58 <generic_hfclk_stop+0x2c>
	__asm__ volatile(
   1ec4e:	f384 8811 	msr	BASEPRI, r4
   1ec52:	f3bf 8f6f 	isb	sy
}
   1ec56:	bd10      	pop	{r4, pc}
		hfclk_stop();
   1ec58:	f00b fa78 	bl	2a14c <hfclk_stop>
   1ec5c:	e7f7      	b.n	1ec4e <generic_hfclk_stop+0x22>
   1ec5e:	bf00      	nop
   1ec60:	20008740 	.word	0x20008740

0001ec64 <lfclk_spinwait>:
{
   1ec64:	b570      	push	{r4, r5, r6, lr}
   1ec66:	b082      	sub	sp, #8
   1ec68:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1ec6a:	2801      	cmp	r0, #1
   1ec6c:	d107      	bne.n	1ec7e <lfclk_spinwait+0x1a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1ec6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ec72:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1ec76:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1ec7a:	2b01      	cmp	r3, #1
   1ec7c:	d04c      	beq.n	1ed18 <lfclk_spinwait+0xb4>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1ec7e:	f00d f938 	bl	2bef2 <k_is_in_isr>
   1ec82:	4604      	mov	r4, r0
   1ec84:	b918      	cbnz	r0, 1ec8e <lfclk_spinwait+0x2a>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   1ec86:	4b28      	ldr	r3, [pc, #160]	; (1ed28 <lfclk_spinwait+0xc4>)
   1ec88:	781b      	ldrb	r3, [r3, #0]
   1ec8a:	2b00      	cmp	r3, #0
   1ec8c:	d139      	bne.n	1ed02 <lfclk_spinwait+0x9e>
	__asm__ volatile(
   1ec8e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ec92:	f3ef 8611 	mrs	r6, BASEPRI
   1ec96:	f383 8812 	msr	BASEPRI_MAX, r3
   1ec9a:	f3bf 8f6f 	isb	sy
   1ec9e:	2401      	movs	r4, #1
	if (!isr_mode) {
   1eca0:	b924      	cbnz	r4, 1ecac <lfclk_spinwait+0x48>
    p_reg->INTENCLR = mask;
   1eca2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1eca6:	2202      	movs	r2, #2
   1eca8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   1ecac:	aa01      	add	r2, sp, #4
   1ecae:	2100      	movs	r1, #0
   1ecb0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1ecb4:	f00b f960 	bl	29f78 <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1ecb8:	b120      	cbz	r0, 1ecc4 <lfclk_spinwait+0x60>
		 && ((type == target_type)
   1ecba:	9b01      	ldr	r3, [sp, #4]
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1ecbc:	2b01      	cmp	r3, #1
   1ecbe:	d026      	beq.n	1ed0e <lfclk_spinwait+0xaa>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1ecc0:	2d01      	cmp	r5, #1
   1ecc2:	d024      	beq.n	1ed0e <lfclk_spinwait+0xaa>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1ecc4:	b1fc      	cbz	r4, 1ed06 <lfclk_spinwait+0xa2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1ecc6:	4630      	mov	r0, r6
   1ecc8:	f7f6 fc6a 	bl	155a0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1eccc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ecd0:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1ecd4:	2b00      	cmp	r3, #0
   1ecd6:	d1e9      	bne.n	1ecac <lfclk_spinwait+0x48>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1ecd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ecdc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1ece0:	2b00      	cmp	r3, #0
   1ece2:	d0e3      	beq.n	1ecac <lfclk_spinwait+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ece4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ece8:	2200      	movs	r2, #0
   1ecea:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1ecee:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1ecf2:	2201      	movs	r2, #1
   1ecf4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ecf8:	490c      	ldr	r1, [pc, #48]	; (1ed2c <lfclk_spinwait+0xc8>)
   1ecfa:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ecfe:	609a      	str	r2, [r3, #8]
}
   1ed00:	e7d4      	b.n	1ecac <lfclk_spinwait+0x48>
	int key = isr_mode ? irq_lock() : 0;
   1ed02:	2600      	movs	r6, #0
   1ed04:	e7cc      	b.n	1eca0 <lfclk_spinwait+0x3c>
				k_msleep(1);
   1ed06:	2001      	movs	r0, #1
   1ed08:	f00b fa2a 	bl	2a160 <k_msleep>
   1ed0c:	e7de      	b.n	1eccc <lfclk_spinwait+0x68>
	if (isr_mode) {
   1ed0e:	b12c      	cbz	r4, 1ed1c <lfclk_spinwait+0xb8>
	__asm__ volatile(
   1ed10:	f386 8811 	msr	BASEPRI, r6
   1ed14:	f3bf 8f6f 	isb	sy
}
   1ed18:	b002      	add	sp, #8
   1ed1a:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
   1ed1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ed20:	2202      	movs	r2, #2
   1ed22:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1ed26:	e7f7      	b.n	1ed18 <lfclk_spinwait+0xb4>
   1ed28:	20008ed3 	.word	0x20008ed3
   1ed2c:	e000e100 	.word	0xe000e100

0001ed30 <api_blocking_start>:
{
   1ed30:	b500      	push	{lr}
   1ed32:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1ed34:	f8cd d000 	str.w	sp, [sp]
   1ed38:	f8cd d004 	str.w	sp, [sp, #4]
   1ed3c:	2300      	movs	r3, #0
   1ed3e:	9302      	str	r3, [sp, #8]
   1ed40:	2301      	movs	r3, #1
   1ed42:	9303      	str	r3, [sp, #12]
   1ed44:	ab04      	add	r3, sp, #16
   1ed46:	9304      	str	r3, [sp, #16]
   1ed48:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1ed4a:	466b      	mov	r3, sp
   1ed4c:	4a06      	ldr	r2, [pc, #24]	; (1ed68 <api_blocking_start+0x38>)
   1ed4e:	f00b f9e3 	bl	2a118 <api_start>
	if (err < 0) {
   1ed52:	2800      	cmp	r0, #0
   1ed54:	db05      	blt.n	1ed62 <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
   1ed56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1ed5a:	2300      	movs	r3, #0
   1ed5c:	4668      	mov	r0, sp
   1ed5e:	f005 f983 	bl	24068 <z_impl_k_sem_take>
}
   1ed62:	b007      	add	sp, #28
   1ed64:	f85d fb04 	ldr.w	pc, [sp], #4
   1ed68:	0002a18d 	.word	0x0002a18d

0001ed6c <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   1ed6c:	b570      	push	{r4, r5, r6, lr}
   1ed6e:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1ed70:	2200      	movs	r2, #0
   1ed72:	2101      	movs	r1, #1
   1ed74:	4610      	mov	r0, r2
   1ed76:	f008 fadf 	bl	27338 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1ed7a:	4811      	ldr	r0, [pc, #68]	; (1edc0 <clk_init+0x54>)
   1ed7c:	f003 fbe4 	bl	22548 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1ed80:	4b10      	ldr	r3, [pc, #64]	; (1edc4 <clk_init+0x58>)
   1ed82:	4298      	cmp	r0, r3
   1ed84:	d119      	bne.n	1edba <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1ed86:	f00c fe45 	bl	2ba14 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   1ed8a:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1ed8c:	2c01      	cmp	r4, #1
   1ed8e:	d812      	bhi.n	1edb6 <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   1ed90:	4621      	mov	r1, r4
   1ed92:	4630      	mov	r0, r6
   1ed94:	f00b f913 	bl	29fbe <get_sub_data>
   1ed98:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1ed9a:	4621      	mov	r1, r4
   1ed9c:	4630      	mov	r0, r6
   1ed9e:	f00b f91b 	bl	29fd8 <get_onoff_manager>
   1eda2:	4909      	ldr	r1, [pc, #36]	; (1edc8 <clk_init+0x5c>)
   1eda4:	f007 f95c 	bl	26060 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1eda8:	2800      	cmp	r0, #0
   1edaa:	db05      	blt.n	1edb8 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1edac:	2301      	movs	r3, #1
   1edae:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1edb0:	441c      	add	r4, r3
   1edb2:	b2e4      	uxtb	r4, r4
   1edb4:	e7ea      	b.n	1ed8c <clk_init+0x20>
	}

	return 0;
   1edb6:	2000      	movs	r0, #0
}
   1edb8:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1edba:	f06f 0004 	mvn.w	r0, #4
   1edbe:	e7fb      	b.n	1edb8 <clk_init+0x4c>
   1edc0:	0001eb89 	.word	0x0001eb89
   1edc4:	0bad0000 	.word	0x0bad0000
   1edc8:	0002f510 	.word	0x0002f510

0001edcc <z_nrf_clock_control_lf_on>:
{
   1edcc:	b510      	push	{r4, lr}
   1edce:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1edd0:	4b10      	ldr	r3, [pc, #64]	; (1ee14 <z_nrf_clock_control_lf_on+0x48>)
   1edd2:	2101      	movs	r1, #1
   1edd4:	f3bf 8f5b 	dmb	ish
   1edd8:	e853 2f00 	ldrex	r2, [r3]
   1eddc:	e843 1000 	strex	r0, r1, [r3]
   1ede0:	2800      	cmp	r0, #0
   1ede2:	d1f9      	bne.n	1edd8 <z_nrf_clock_control_lf_on+0xc>
   1ede4:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1ede8:	b11a      	cbz	r2, 1edf2 <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
   1edea:	1e63      	subs	r3, r4, #1
   1edec:	2b01      	cmp	r3, #1
   1edee:	d90d      	bls.n	1ee0c <z_nrf_clock_control_lf_on+0x40>
}
   1edf0:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
   1edf2:	4809      	ldr	r0, [pc, #36]	; (1ee18 <z_nrf_clock_control_lf_on+0x4c>)
   1edf4:	f00b f8f0 	bl	29fd8 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1edf8:	4908      	ldr	r1, [pc, #32]	; (1ee1c <z_nrf_clock_control_lf_on+0x50>)
   1edfa:	2300      	movs	r3, #0
   1edfc:	604b      	str	r3, [r1, #4]
   1edfe:	608b      	str	r3, [r1, #8]
   1ee00:	60cb      	str	r3, [r1, #12]
   1ee02:	2301      	movs	r3, #1
   1ee04:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   1ee06:	f007 f948 	bl	2609a <onoff_request>
   1ee0a:	e7ee      	b.n	1edea <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
   1ee0c:	4620      	mov	r0, r4
   1ee0e:	f7ff ff29 	bl	1ec64 <lfclk_spinwait>
		break;
   1ee12:	e7ed      	b.n	1edf0 <z_nrf_clock_control_lf_on+0x24>
   1ee14:	200086ec 	.word	0x200086ec
   1ee18:	0002cda8 	.word	0x0002cda8
   1ee1c:	200086dc 	.word	0x200086dc

0001ee20 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   1ee20:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

#ifdef CONFIG_PRINTK
	__printk_hook_install(rtt_console_out);
   1ee22:	4c04      	ldr	r4, [pc, #16]	; (1ee34 <rtt_console_init+0x14>)
   1ee24:	4620      	mov	r0, r4
   1ee26:	f7f4 ffaf 	bl	13d88 <__printk_hook_install>
#endif
	__stdout_hook_install(rtt_console_out);
   1ee2a:	4620      	mov	r0, r4
   1ee2c:	f7f7 ff04 	bl	16c38 <__stdout_hook_install>

	return 0;
}
   1ee30:	2000      	movs	r0, #0
   1ee32:	bd10      	pop	{r4, pc}
   1ee34:	0001ee39 	.word	0x0001ee39

0001ee38 <rtt_console_out>:
{
   1ee38:	b570      	push	{r4, r5, r6, lr}
   1ee3a:	b082      	sub	sp, #8
   1ee3c:	4606      	mov	r6, r0
	char c = (char)character;
   1ee3e:	f88d 0007 	strb.w	r0, [sp, #7]
	int max_cnt = CONFIG_RTT_TX_RETRY_CNT;
   1ee42:	2502      	movs	r5, #2
		SEGGER_RTT_LOCK();
   1ee44:	f004 fbf8 	bl	23638 <zephyr_rtt_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   1ee48:	2201      	movs	r2, #1
   1ee4a:	f10d 0107 	add.w	r1, sp, #7
   1ee4e:	2000      	movs	r0, #0
   1ee50:	f004 fbac 	bl	235ac <SEGGER_RTT_WriteNoLock>
   1ee54:	4604      	mov	r4, r0
		SEGGER_RTT_UNLOCK();
   1ee56:	f004 fbfb 	bl	23650 <zephyr_rtt_mutex_unlock>
		if (cnt) {
   1ee5a:	b93c      	cbnz	r4, 1ee6c <rtt_console_out+0x34>
		} else if (host_present) {
   1ee5c:	4b08      	ldr	r3, [pc, #32]	; (1ee80 <rtt_console_out+0x48>)
   1ee5e:	781b      	ldrb	r3, [r3, #0]
   1ee60:	b15b      	cbz	r3, 1ee7a <rtt_console_out+0x42>
			if (max_cnt) {
   1ee62:	b13d      	cbz	r5, 1ee74 <rtt_console_out+0x3c>
				wait();
   1ee64:	f00b f9ad 	bl	2a1c2 <wait>
				max_cnt--;
   1ee68:	3d01      	subs	r5, #1
		SEGGER_RTT_LOCK();
   1ee6a:	e7eb      	b.n	1ee44 <rtt_console_out+0xc>
			host_present = true;
   1ee6c:	4b04      	ldr	r3, [pc, #16]	; (1ee80 <rtt_console_out+0x48>)
   1ee6e:	2201      	movs	r2, #1
   1ee70:	701a      	strb	r2, [r3, #0]
   1ee72:	e002      	b.n	1ee7a <rtt_console_out+0x42>
				host_present = false;
   1ee74:	4b02      	ldr	r3, [pc, #8]	; (1ee80 <rtt_console_out+0x48>)
   1ee76:	2200      	movs	r2, #0
   1ee78:	701a      	strb	r2, [r3, #0]
}
   1ee7a:	4630      	mov	r0, r6
   1ee7c:	b002      	add	sp, #8
   1ee7e:	bd70      	pop	{r4, r5, r6, pc}
   1ee80:	20008ecd 	.word	0x20008ecd

0001ee84 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   1ee84:	b510      	push	{r4, lr}
   1ee86:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   1ee88:	280a      	cmp	r0, #10
   1ee8a:	d006      	beq.n	1ee9a <console_out+0x16>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   1ee8c:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
   1ee8e:	4806      	ldr	r0, [pc, #24]	; (1eea8 <console_out+0x24>)
   1ee90:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   1ee92:	685b      	ldr	r3, [r3, #4]
   1ee94:	4798      	blx	r3

	return c;
}
   1ee96:	4620      	mov	r0, r4
   1ee98:	bd10      	pop	{r4, pc}
	const struct uart_driver_api *api =
   1ee9a:	4803      	ldr	r0, [pc, #12]	; (1eea8 <console_out+0x24>)
   1ee9c:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   1ee9e:	685b      	ldr	r3, [r3, #4]
   1eea0:	210d      	movs	r1, #13
   1eea2:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
   1eea4:	e7f2      	b.n	1ee8c <console_out+0x8>
   1eea6:	bf00      	nop
   1eea8:	0002ce38 	.word	0x0002ce38

0001eeac <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
   1eeac:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
   1eeae:	4c04      	ldr	r4, [pc, #16]	; (1eec0 <uart_console_hook_install+0x14>)
   1eeb0:	4620      	mov	r0, r4
   1eeb2:	f7f7 fec1 	bl	16c38 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
   1eeb6:	4620      	mov	r0, r4
   1eeb8:	f7f4 ff66 	bl	13d88 <__printk_hook_install>
#endif
}
   1eebc:	bd10      	pop	{r4, pc}
   1eebe:	bf00      	nop
   1eec0:	0001ee85 	.word	0x0001ee85

0001eec4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1eec4:	b508      	push	{r3, lr}
   1eec6:	4805      	ldr	r0, [pc, #20]	; (1eedc <uart_console_init+0x18>)
   1eec8:	f00c ff27 	bl	2bd1a <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   1eecc:	b118      	cbz	r0, 1eed6 <uart_console_init+0x12>
		return -ENODEV;
	}

	uart_console_hook_install();
   1eece:	f7ff ffed 	bl	1eeac <uart_console_hook_install>

	return 0;
   1eed2:	2000      	movs	r0, #0
}
   1eed4:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1eed6:	f06f 0012 	mvn.w	r0, #18
   1eeda:	e7fb      	b.n	1eed4 <uart_console_init+0x10>
   1eedc:	0002ce38 	.word	0x0002ce38

0001eee0 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1eee0:	b128      	cbz	r0, 1eeee <get_dev+0xe>
   1eee2:	2801      	cmp	r0, #1
   1eee4:	d101      	bne.n	1eeea <get_dev+0xa>
   1eee6:	4803      	ldr	r0, [pc, #12]	; (1eef4 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
   1eee8:	4770      	bx	lr
	const struct device *dev = NULL;
   1eeea:	2000      	movs	r0, #0
   1eeec:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1eeee:	4802      	ldr	r0, [pc, #8]	; (1eef8 <get_dev+0x18>)
   1eef0:	4770      	bx	lr
   1eef2:	bf00      	nop
   1eef4:	0002cdc0 	.word	0x0002cdc0
   1eef8:	0002cdd8 	.word	0x0002cdd8

0001eefc <gpio_nrfx_pin_interrupt_configure>:
{
   1eefc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eefe:	b085      	sub	sp, #20
   1ef00:	460e      	mov	r6, r1
   1ef02:	4619      	mov	r1, r3
	return port->config;
   1ef04:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1ef06:	7b1b      	ldrb	r3, [r3, #12]
   1ef08:	f006 051f 	and.w	r5, r6, #31
   1ef0c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1ef10:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
   1ef14:	d022      	beq.n	1ef5c <gpio_nrfx_pin_interrupt_configure+0x60>
   1ef16:	4607      	mov	r7, r0
   1ef18:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1ef1a:	2300      	movs	r3, #0
   1ef1c:	9301      	str	r3, [sp, #4]
   1ef1e:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
   1ef20:	4610      	mov	r0, r2
   1ef22:	f00b fa34 	bl	2a38e <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1ef26:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
   1ef2a:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1ef2c:	6899      	ldr	r1, [r3, #8]
   1ef2e:	40f1      	lsrs	r1, r6
   1ef30:	f011 0f01 	tst.w	r1, #1
   1ef34:	d102      	bne.n	1ef3c <gpio_nrfx_pin_interrupt_configure+0x40>
   1ef36:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
   1ef3a:	d014      	beq.n	1ef66 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1ef3c:	2300      	movs	r3, #0
   1ef3e:	aa01      	add	r2, sp, #4
   1ef40:	4619      	mov	r1, r3
   1ef42:	4628      	mov	r0, r5
   1ef44:	f003 fe64 	bl	22c10 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1ef48:	4b1b      	ldr	r3, [pc, #108]	; (1efb8 <gpio_nrfx_pin_interrupt_configure+0xbc>)
   1ef4a:	4298      	cmp	r0, r3
   1ef4c:	d131      	bne.n	1efb2 <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1ef4e:	2101      	movs	r1, #1
   1ef50:	4628      	mov	r0, r5
   1ef52:	f003 ffbd 	bl	22ed0 <nrfx_gpiote_trigger_enable>
	return 0;
   1ef56:	2000      	movs	r0, #0
}
   1ef58:	b005      	add	sp, #20
   1ef5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
   1ef5c:	4628      	mov	r0, r5
   1ef5e:	f003 ffe9 	bl	22f34 <nrfx_gpiote_trigger_disable>
		return 0;
   1ef62:	2000      	movs	r0, #0
   1ef64:	e7f8      	b.n	1ef58 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1ef66:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
   1ef6a:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ef6c:	2a01      	cmp	r2, #1
   1ef6e:	d014      	beq.n	1ef9a <gpio_nrfx_pin_interrupt_configure+0x9e>
        case 0: return NRF_P0;
   1ef70:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1ef74:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1ef78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1ef7c:	f013 0f01 	tst.w	r3, #1
   1ef80:	d1dc      	bne.n	1ef3c <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1ef82:	f10d 010f 	add.w	r1, sp, #15
   1ef86:	4628      	mov	r0, r5
   1ef88:	f003 ff46 	bl	22e18 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1ef8c:	4b0b      	ldr	r3, [pc, #44]	; (1efbc <gpio_nrfx_pin_interrupt_configure+0xc0>)
   1ef8e:	4298      	cmp	r0, r3
   1ef90:	d005      	beq.n	1ef9e <gpio_nrfx_pin_interrupt_configure+0xa2>
		trigger_config.p_in_channel = &ch;
   1ef92:	f10d 030f 	add.w	r3, sp, #15
   1ef96:	9302      	str	r3, [sp, #8]
   1ef98:	e7d0      	b.n	1ef3c <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
   1ef9a:	4a09      	ldr	r2, [pc, #36]	; (1efc0 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   1ef9c:	e7ea      	b.n	1ef74 <gpio_nrfx_pin_interrupt_configure+0x78>
			err = nrfx_gpiote_channel_alloc(&ch);
   1ef9e:	f10d 000f 	add.w	r0, sp, #15
   1efa2:	f003 ff8d 	bl	22ec0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1efa6:	4b04      	ldr	r3, [pc, #16]	; (1efb8 <gpio_nrfx_pin_interrupt_configure+0xbc>)
   1efa8:	4298      	cmp	r0, r3
   1efaa:	d0f2      	beq.n	1ef92 <gpio_nrfx_pin_interrupt_configure+0x96>
				return -ENOMEM;
   1efac:	f06f 000b 	mvn.w	r0, #11
   1efb0:	e7d2      	b.n	1ef58 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
   1efb2:	f06f 0015 	mvn.w	r0, #21
   1efb6:	e7cf      	b.n	1ef58 <gpio_nrfx_pin_interrupt_configure+0x5c>
   1efb8:	0bad0000 	.word	0x0bad0000
   1efbc:	0bad0004 	.word	0x0bad0004
   1efc0:	50000300 	.word	0x50000300

0001efc4 <gpio_nrfx_pin_configure>:
{
   1efc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1efc8:	b086      	sub	sp, #24
   1efca:	460e      	mov	r6, r1
   1efcc:	4614      	mov	r4, r2
	return port->config;
   1efce:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1efd2:	f898 300c 	ldrb.w	r3, [r8, #12]
   1efd6:	f001 051f 	and.w	r5, r1, #31
   1efda:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1efde:	f10d 0117 	add.w	r1, sp, #23
   1efe2:	4628      	mov	r0, r5
   1efe4:	f003 ff18 	bl	22e18 <nrfx_gpiote_channel_get>
   1efe8:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1efea:	f414 3f40 	tst.w	r4, #196608	; 0x30000
   1efee:	d03a      	beq.n	1f066 <gpio_nrfx_pin_configure+0xa2>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1eff0:	2100      	movs	r1, #0
   1eff2:	9103      	str	r1, [sp, #12]
   1eff4:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1eff6:	460b      	mov	r3, r1
   1eff8:	aa03      	add	r2, sp, #12
   1effa:	4628      	mov	r0, r5
   1effc:	f003 fe08 	bl	22c10 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1f000:	4b33      	ldr	r3, [pc, #204]	; (1f0d0 <gpio_nrfx_pin_configure+0x10c>)
   1f002:	4298      	cmp	r0, r3
   1f004:	d161      	bne.n	1f0ca <gpio_nrfx_pin_configure+0x106>
	if (free_ch) {
   1f006:	429f      	cmp	r7, r3
   1f008:	d03d      	beq.n	1f086 <gpio_nrfx_pin_configure+0xc2>
	if (flags & GPIO_OUTPUT) {
   1f00a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
   1f00e:	d049      	beq.n	1f0a4 <gpio_nrfx_pin_configure+0xe0>
		int rv = get_drive(flags, &drive);
   1f010:	f10d 0103 	add.w	r1, sp, #3
   1f014:	4620      	mov	r0, r4
   1f016:	f00b f93f 	bl	2a298 <get_drive>
		if (rv != 0) {
   1f01a:	4607      	mov	r7, r0
   1f01c:	bb50      	cbnz	r0, 1f074 <gpio_nrfx_pin_configure+0xb0>
		nrfx_gpiote_output_config_t output_config = {
   1f01e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1f022:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1f026:	f414 3f80 	tst.w	r4, #65536	; 0x10000
   1f02a:	bf0c      	ite	eq
   1f02c:	2301      	moveq	r3, #1
   1f02e:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
   1f030:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
   1f034:	4620      	mov	r0, r4
   1f036:	f00b f972 	bl	2a31e <get_pull>
		nrfx_gpiote_output_config_t output_config = {
   1f03a:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1f03e:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   1f042:	d025      	beq.n	1f090 <gpio_nrfx_pin_configure+0xcc>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1f044:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1f048:	2301      	movs	r3, #1
   1f04a:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   1f04c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1f050:	2200      	movs	r2, #0
   1f052:	a901      	add	r1, sp, #4
   1f054:	4628      	mov	r0, r5
   1f056:	f003 fe6f 	bl	22d38 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1f05a:	4b1d      	ldr	r3, [pc, #116]	; (1f0d0 <gpio_nrfx_pin_configure+0x10c>)
   1f05c:	4298      	cmp	r0, r3
   1f05e:	d009      	beq.n	1f074 <gpio_nrfx_pin_configure+0xb0>
   1f060:	f06f 0715 	mvn.w	r7, #21
   1f064:	e006      	b.n	1f074 <gpio_nrfx_pin_configure+0xb0>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1f066:	4628      	mov	r0, r5
   1f068:	f003 ff86 	bl	22f78 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1f06c:	4b18      	ldr	r3, [pc, #96]	; (1f0d0 <gpio_nrfx_pin_configure+0x10c>)
   1f06e:	429f      	cmp	r7, r3
   1f070:	d004      	beq.n	1f07c <gpio_nrfx_pin_configure+0xb8>
		return 0;
   1f072:	2700      	movs	r7, #0
}
   1f074:	4638      	mov	r0, r7
   1f076:	b006      	add	sp, #24
   1f078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
   1f07c:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1f080:	f003 ff16 	bl	22eb0 <nrfx_gpiote_channel_free>
   1f084:	e7f5      	b.n	1f072 <gpio_nrfx_pin_configure+0xae>
		err = nrfx_gpiote_channel_free(ch);
   1f086:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1f08a:	f003 ff11 	bl	22eb0 <nrfx_gpiote_channel_free>
   1f08e:	e7bc      	b.n	1f00a <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1f090:	f414 2f80 	tst.w	r4, #262144	; 0x40000
   1f094:	d0dc      	beq.n	1f050 <gpio_nrfx_pin_configure+0x8c>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1f096:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1f09a:	2301      	movs	r3, #1
   1f09c:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
   1f09e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   1f0a2:	e7d5      	b.n	1f050 <gpio_nrfx_pin_configure+0x8c>
		.pull = get_pull(flags)
   1f0a4:	4620      	mov	r0, r4
   1f0a6:	f00b f93a 	bl	2a31e <get_pull>
	nrfx_gpiote_input_config_t input_config = {
   1f0aa:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1f0ae:	2300      	movs	r3, #0
   1f0b0:	461a      	mov	r2, r3
   1f0b2:	a902      	add	r1, sp, #8
   1f0b4:	4628      	mov	r0, r5
   1f0b6:	f003 fdab 	bl	22c10 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1f0ba:	4b05      	ldr	r3, [pc, #20]	; (1f0d0 <gpio_nrfx_pin_configure+0x10c>)
   1f0bc:	4298      	cmp	r0, r3
   1f0be:	d101      	bne.n	1f0c4 <gpio_nrfx_pin_configure+0x100>
   1f0c0:	2700      	movs	r7, #0
   1f0c2:	e7d7      	b.n	1f074 <gpio_nrfx_pin_configure+0xb0>
   1f0c4:	f06f 0715 	mvn.w	r7, #21
   1f0c8:	e7d4      	b.n	1f074 <gpio_nrfx_pin_configure+0xb0>
		return -EINVAL;
   1f0ca:	f06f 0715 	mvn.w	r7, #21
   1f0ce:	e7d1      	b.n	1f074 <gpio_nrfx_pin_configure+0xb0>
   1f0d0:	0bad0000 	.word	0x0bad0000

0001f0d4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1f0d4:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1f0d6:	f003 fee1 	bl	22e9c <nrfx_gpiote_is_init>
   1f0da:	b108      	cbz	r0, 1f0e0 <gpio_nrfx_init+0xc>
		return 0;
   1f0dc:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1f0de:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
   1f0e0:	f003 feb2 	bl	22e48 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1f0e4:	4b08      	ldr	r3, [pc, #32]	; (1f108 <gpio_nrfx_init+0x34>)
   1f0e6:	4298      	cmp	r0, r3
   1f0e8:	d10a      	bne.n	1f100 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1f0ea:	2100      	movs	r1, #0
   1f0ec:	4807      	ldr	r0, [pc, #28]	; (1f10c <gpio_nrfx_init+0x38>)
   1f0ee:	f003 fe8d 	bl	22e0c <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1f0f2:	2200      	movs	r2, #0
   1f0f4:	2105      	movs	r1, #5
   1f0f6:	2006      	movs	r0, #6
   1f0f8:	f008 f91e 	bl	27338 <z_arm_irq_priority_set>
	return 0;
   1f0fc:	2000      	movs	r0, #0
   1f0fe:	e7ee      	b.n	1f0de <gpio_nrfx_init+0xa>
		return -EIO;
   1f100:	f06f 0004 	mvn.w	r0, #4
   1f104:	e7eb      	b.n	1f0de <gpio_nrfx_init+0xa>
   1f106:	bf00      	nop
   1f108:	0bad0000 	.word	0x0bad0000
   1f10c:	0002a3c7 	.word	0x0002a3c7

0001f110 <get_nrf_spi_frequency>:

static inline nrf_spi_frequency_t get_nrf_spi_frequency(uint32_t frequency)
{
	/* Get the highest supported frequency not exceeding the requested one.
	 */
	if (frequency < 250000) {
   1f110:	4b13      	ldr	r3, [pc, #76]	; (1f160 <get_nrf_spi_frequency+0x50>)
   1f112:	4298      	cmp	r0, r3
   1f114:	d911      	bls.n	1f13a <get_nrf_spi_frequency+0x2a>
		return NRF_SPI_FREQ_125K;
	} else if (frequency < 500000) {
   1f116:	4b13      	ldr	r3, [pc, #76]	; (1f164 <get_nrf_spi_frequency+0x54>)
   1f118:	4298      	cmp	r0, r3
   1f11a:	d911      	bls.n	1f140 <get_nrf_spi_frequency+0x30>
		return NRF_SPI_FREQ_250K;
	} else if (frequency < 1000000) {
   1f11c:	4b12      	ldr	r3, [pc, #72]	; (1f168 <get_nrf_spi_frequency+0x58>)
   1f11e:	4298      	cmp	r0, r3
   1f120:	d911      	bls.n	1f146 <get_nrf_spi_frequency+0x36>
		return NRF_SPI_FREQ_500K;
	} else if (frequency < 2000000) {
   1f122:	4b12      	ldr	r3, [pc, #72]	; (1f16c <get_nrf_spi_frequency+0x5c>)
   1f124:	4298      	cmp	r0, r3
   1f126:	d911      	bls.n	1f14c <get_nrf_spi_frequency+0x3c>
		return NRF_SPI_FREQ_1M;
	} else if (frequency < 4000000) {
   1f128:	4b11      	ldr	r3, [pc, #68]	; (1f170 <get_nrf_spi_frequency+0x60>)
   1f12a:	4298      	cmp	r0, r3
   1f12c:	d911      	bls.n	1f152 <get_nrf_spi_frequency+0x42>
		return NRF_SPI_FREQ_2M;
	} else if (frequency < 8000000) {
   1f12e:	4b11      	ldr	r3, [pc, #68]	; (1f174 <get_nrf_spi_frequency+0x64>)
   1f130:	4298      	cmp	r0, r3
   1f132:	d211      	bcs.n	1f158 <get_nrf_spi_frequency+0x48>
		return NRF_SPI_FREQ_4M;
   1f134:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1f138:	4770      	bx	lr
		return NRF_SPI_FREQ_125K;
   1f13a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   1f13e:	4770      	bx	lr
		return NRF_SPI_FREQ_250K;
   1f140:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
   1f144:	4770      	bx	lr
		return NRF_SPI_FREQ_500K;
   1f146:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   1f14a:	4770      	bx	lr
		return NRF_SPI_FREQ_1M;
   1f14c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1f150:	4770      	bx	lr
		return NRF_SPI_FREQ_2M;
   1f152:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
   1f156:	4770      	bx	lr
	} else {
		return NRF_SPI_FREQ_8M;
   1f158:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
	}
}
   1f15c:	4770      	bx	lr
   1f15e:	bf00      	nop
   1f160:	0003d08f 	.word	0x0003d08f
   1f164:	0007a11f 	.word	0x0007a11f
   1f168:	000f423f 	.word	0x000f423f
   1f16c:	001e847f 	.word	0x001e847f
   1f170:	003d08ff 	.word	0x003d08ff
   1f174:	007a1200 	.word	0x007a1200

0001f178 <configure>:
	}
}

static int configure(const struct device *dev,
		     const struct spi_config *spi_cfg)
{
   1f178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f17c:	b0a0      	sub	sp, #128	; 0x80
   1f17e:	af00      	add	r7, sp, #0
   1f180:	460c      	mov	r4, r1
	struct spi_nrfx_data *dev_data = dev->data;
   1f182:	6905      	ldr	r5, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   1f184:	6846      	ldr	r6, [r0, #4]
	struct spi_context *ctx = &dev_data->ctx;
	nrfx_spi_config_t config;
	nrfx_err_t result;

	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   1f186:	f895 806d 	ldrb.w	r8, [r5, #109]	; 0x6d
   1f18a:	f1b8 0f00 	cmp.w	r8, #0
   1f18e:	d003      	beq.n	1f198 <configure+0x20>
	._ctx_name.num_cs_gpios = DT_PROP_LEN_OR(_node_id, cs_gpios, 0),

static inline bool spi_context_configured(struct spi_context *ctx,
					  const struct spi_config *config)
{
	return !!(ctx->config == config);
   1f190:	682b      	ldr	r3, [r5, #0]
   1f192:	428b      	cmp	r3, r1
   1f194:	f000 818c 	beq.w	1f4b0 <__kernel_ram_size+0xe0>
		/* Already configured. No need to do it again. */
		return 0;
	}

	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   1f198:	88a3      	ldrh	r3, [r4, #4]
   1f19a:	f413 6f00 	tst.w	r3, #2048	; 0x800
   1f19e:	d14a      	bne.n	1f236 <configure+0xbe>
		LOG_ERR("Half-duplex not supported");
		return -ENOTSUP;
	}

	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1f1a0:	f013 0f01 	tst.w	r3, #1
   1f1a4:	d16c      	bne.n	1f280 <configure+0x108>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
		return -EINVAL;
	}

	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1f1a6:	f013 0f08 	tst.w	r3, #8
   1f1aa:	f040 80bf 	bne.w	1f32c <configure+0x1b4>
	    (spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
		LOG_ERR("Only single line mode is supported");
		return -EINVAL;
	}

	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1f1ae:	f3c3 1345 	ubfx	r3, r3, #5, #6
   1f1b2:	2b08      	cmp	r3, #8
   1f1b4:	f040 80df 	bne.w	1f376 <configure+0x1fe>
		LOG_ERR("Word sizes other than 8 bits are not supported");
		return -EINVAL;
	}

	if (spi_cfg->frequency < 125000) {
   1f1b8:	6822      	ldr	r2, [r4, #0]
   1f1ba:	4bbe      	ldr	r3, [pc, #760]	; (1f4b4 <__kernel_ram_size+0xe4>)
   1f1bc:	429a      	cmp	r2, r3
   1f1be:	f240 80ff 	bls.w	1f3c0 <configure+0x248>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
		return -EINVAL;
	}

	config = dev_config->def_config;
   1f1c2:	f107 0c0c 	add.w	ip, r7, #12
   1f1c6:	f106 0e08 	add.w	lr, r6, #8
   1f1ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1f1ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1f1d2:	f8de 3000 	ldr.w	r3, [lr]
   1f1d6:	f8cc 3000 	str.w	r3, [ip]

	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
   1f1da:	6820      	ldr	r0, [r4, #0]
   1f1dc:	f7ff ff98 	bl	1f110 <get_nrf_spi_frequency>
   1f1e0:	6178      	str	r0, [r7, #20]
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
   1f1e2:	88a3      	ldrh	r3, [r4, #4]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1f1e4:	f013 0f02 	tst.w	r3, #2
   1f1e8:	f000 810f 	beq.w	1f40a <__kernel_ram_size+0x3a>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   1f1ec:	f013 0f04 	tst.w	r3, #4
   1f1f0:	f000 8110 	beq.w	1f414 <__kernel_ram_size+0x44>
			return NRF_SPI_MODE_3;
   1f1f4:	2303      	movs	r3, #3
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
   1f1f6:	763b      	strb	r3, [r7, #24]
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
   1f1f8:	88a3      	ldrh	r3, [r4, #4]
	if (operation & SPI_TRANSFER_LSB) {
   1f1fa:	f013 0f10 	tst.w	r3, #16
   1f1fe:	f000 810d 	beq.w	1f41c <__kernel_ram_size+0x4c>
		return NRF_SPI_BIT_ORDER_LSB_FIRST;
   1f202:	2301      	movs	r3, #1
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
   1f204:	767b      	strb	r3, [r7, #25]

	if (dev_data->initialized) {
   1f206:	f1b8 0f00 	cmp.w	r8, #0
   1f20a:	f040 8109 	bne.w	1f420 <__kernel_ram_size+0x50>
		nrfx_spi_uninit(&dev_config->spi);
		dev_data->initialized = false;
	}

	result = nrfx_spi_init(&dev_config->spi, &config,
   1f20e:	462b      	mov	r3, r5
   1f210:	4aa9      	ldr	r2, [pc, #676]	; (1f4b8 <__kernel_ram_size+0xe8>)
   1f212:	f107 010c 	add.w	r1, r7, #12
   1f216:	4630      	mov	r0, r6
   1f218:	f004 f818 	bl	2324c <nrfx_spi_init>
			       event_handler, dev_data);
	if (result != NRFX_SUCCESS) {
   1f21c:	4ba7      	ldr	r3, [pc, #668]	; (1f4bc <__kernel_ram_size+0xec>)
   1f21e:	4298      	cmp	r0, r3
   1f220:	f040 8105 	bne.w	1f42e <__kernel_ram_size+0x5e>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
		return -EIO;
	}

	dev_data->initialized = true;
   1f224:	2301      	movs	r3, #1
   1f226:	f885 306d 	strb.w	r3, [r5, #109]	; 0x6d

	ctx->config = spi_cfg;
   1f22a:	602c      	str	r4, [r5, #0]

	return 0;
   1f22c:	2000      	movs	r0, #0
}
   1f22e:	3780      	adds	r7, #128	; 0x80
   1f230:	46bd      	mov	sp, r7
   1f232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Half-duplex not supported");
   1f236:	4ba2      	ldr	r3, [pc, #648]	; (1f4c0 <__kernel_ram_size+0xf0>)
   1f238:	67fb      	str	r3, [r7, #124]	; 0x7c
   1f23a:	2302      	movs	r3, #2
   1f23c:	723b      	strb	r3, [r7, #8]
   1f23e:	2300      	movs	r3, #0
   1f240:	727b      	strb	r3, [r7, #9]
   1f242:	72bb      	strb	r3, [r7, #10]
   1f244:	72fb      	strb	r3, [r7, #11]
   1f246:	68ba      	ldr	r2, [r7, #8]
   1f248:	67ba      	str	r2, [r7, #120]	; 0x78
   1f24a:	4619      	mov	r1, r3
   1f24c:	f363 0100 	bfi	r1, r3, #0, #1
   1f250:	f363 0141 	bfi	r1, r3, #1, #1
   1f254:	f363 0182 	bfi	r1, r3, #2, #1
   1f258:	f363 01c5 	bfi	r1, r3, #3, #3
   1f25c:	2201      	movs	r2, #1
   1f25e:	f362 1188 	bfi	r1, r2, #6, #3
   1f262:	2208      	movs	r2, #8
   1f264:	f362 2152 	bfi	r1, r2, #9, #10
   1f268:	f363 41de 	bfi	r1, r3, #19, #12
   1f26c:	f363 71df 	bfi	r1, r3, #31, #1
   1f270:	f107 0278 	add.w	r2, r7, #120	; 0x78
   1f274:	4893      	ldr	r0, [pc, #588]	; (1f4c4 <__kernel_ram_size+0xf4>)
   1f276:	f007 fcee 	bl	26c56 <z_impl_z_log_msg_static_create>
		return -ENOTSUP;
   1f27a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1f27e:	e7d6      	b.n	1f22e <configure+0xb6>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   1f280:	6801      	ldr	r1, [r0, #0]
   1f282:	466d      	mov	r5, sp
   1f284:	2300      	movs	r3, #0
   1f286:	723b      	strb	r3, [r7, #8]
   1f288:	2302      	movs	r3, #2
   1f28a:	727b      	strb	r3, [r7, #9]
   1f28c:	b088      	sub	sp, #32
   1f28e:	466c      	mov	r4, sp
   1f290:	f114 0210 	adds.w	r2, r4, #16
   1f294:	d011      	beq.n	1f2ba <configure+0x142>
   1f296:	200e      	movs	r0, #14
   1f298:	b11a      	cbz	r2, 1f2a2 <configure+0x12a>
   1f29a:	2804      	cmp	r0, #4
   1f29c:	dd01      	ble.n	1f2a2 <configure+0x12a>
   1f29e:	4b8a      	ldr	r3, [pc, #552]	; (1f4c8 <__kernel_ram_size+0xf8>)
   1f2a0:	6163      	str	r3, [r4, #20]
   1f2a2:	2300      	movs	r3, #0
   1f2a4:	713b      	strb	r3, [r7, #4]
   1f2a6:	2302      	movs	r3, #2
   1f2a8:	717b      	strb	r3, [r7, #5]
   1f2aa:	b19a      	cbz	r2, 1f2d4 <configure+0x15c>
   1f2ac:	2808      	cmp	r0, #8
   1f2ae:	dd00      	ble.n	1f2b2 <configure+0x13a>
   1f2b0:	61a1      	str	r1, [r4, #24]
   1f2b2:	f104 031c 	add.w	r3, r4, #28
   1f2b6:	2100      	movs	r1, #0
   1f2b8:	e00a      	b.n	1f2d0 <configure+0x158>
   1f2ba:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1f2be:	e7eb      	b.n	1f298 <configure+0x120>
   1f2c0:	f101 0680 	add.w	r6, r1, #128	; 0x80
   1f2c4:	443e      	add	r6, r7
   1f2c6:	f816 6c7c 	ldrb.w	r6, [r6, #-124]
   1f2ca:	f803 6b01 	strb.w	r6, [r3], #1
   1f2ce:	3101      	adds	r1, #1
   1f2d0:	2901      	cmp	r1, #1
   1f2d2:	d9f5      	bls.n	1f2c0 <configure+0x148>
   1f2d4:	280d      	cmp	r0, #13
   1f2d6:	dd26      	ble.n	1f326 <configure+0x1ae>
   1f2d8:	230e      	movs	r3, #14
   1f2da:	b142      	cbz	r2, 1f2ee <configure+0x176>
   1f2dc:	2103      	movs	r1, #3
   1f2de:	7239      	strb	r1, [r7, #8]
   1f2e0:	2100      	movs	r1, #0
   1f2e2:	7279      	strb	r1, [r7, #9]
   1f2e4:	72b9      	strb	r1, [r7, #10]
   1f2e6:	2101      	movs	r1, #1
   1f2e8:	72f9      	strb	r1, [r7, #11]
   1f2ea:	68b8      	ldr	r0, [r7, #8]
   1f2ec:	6120      	str	r0, [r4, #16]
   1f2ee:	2100      	movs	r1, #0
   1f2f0:	f36f 0100 	bfc	r1, #0, #1
   1f2f4:	f36f 0141 	bfc	r1, #1, #1
   1f2f8:	f36f 0182 	bfc	r1, #2, #1
   1f2fc:	f36f 01c5 	bfc	r1, #3, #3
   1f300:	2001      	movs	r0, #1
   1f302:	f360 1188 	bfi	r1, r0, #6, #3
   1f306:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1f30a:	f363 2152 	bfi	r1, r3, #9, #10
   1f30e:	f36f 41de 	bfc	r1, #19, #12
   1f312:	f36f 71df 	bfc	r1, #31, #1
   1f316:	2300      	movs	r3, #0
   1f318:	486a      	ldr	r0, [pc, #424]	; (1f4c4 <__kernel_ram_size+0xf4>)
   1f31a:	f007 fc9c 	bl	26c56 <z_impl_z_log_msg_static_create>
   1f31e:	46ad      	mov	sp, r5
		return -EINVAL;
   1f320:	f06f 0015 	mvn.w	r0, #21
   1f324:	e783      	b.n	1f22e <configure+0xb6>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   1f326:	f06f 031b 	mvn.w	r3, #27
   1f32a:	e7d6      	b.n	1f2da <configure+0x162>
		LOG_ERR("Loopback mode is not supported");
   1f32c:	4b67      	ldr	r3, [pc, #412]	; (1f4cc <__kernel_ram_size+0xfc>)
   1f32e:	667b      	str	r3, [r7, #100]	; 0x64
   1f330:	2302      	movs	r3, #2
   1f332:	723b      	strb	r3, [r7, #8]
   1f334:	2300      	movs	r3, #0
   1f336:	727b      	strb	r3, [r7, #9]
   1f338:	72bb      	strb	r3, [r7, #10]
   1f33a:	72fb      	strb	r3, [r7, #11]
   1f33c:	68ba      	ldr	r2, [r7, #8]
   1f33e:	663a      	str	r2, [r7, #96]	; 0x60
   1f340:	4619      	mov	r1, r3
   1f342:	f363 0100 	bfi	r1, r3, #0, #1
   1f346:	f363 0141 	bfi	r1, r3, #1, #1
   1f34a:	f363 0182 	bfi	r1, r3, #2, #1
   1f34e:	f363 01c5 	bfi	r1, r3, #3, #3
   1f352:	2201      	movs	r2, #1
   1f354:	f362 1188 	bfi	r1, r2, #6, #3
   1f358:	2208      	movs	r2, #8
   1f35a:	f362 2152 	bfi	r1, r2, #9, #10
   1f35e:	f363 41de 	bfi	r1, r3, #19, #12
   1f362:	f363 71df 	bfi	r1, r3, #31, #1
   1f366:	f107 0260 	add.w	r2, r7, #96	; 0x60
   1f36a:	4856      	ldr	r0, [pc, #344]	; (1f4c4 <__kernel_ram_size+0xf4>)
   1f36c:	f007 fc73 	bl	26c56 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1f370:	f06f 0015 	mvn.w	r0, #21
   1f374:	e75b      	b.n	1f22e <configure+0xb6>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1f376:	4b56      	ldr	r3, [pc, #344]	; (1f4d0 <__kernel_ram_size+0x100>)
   1f378:	64fb      	str	r3, [r7, #76]	; 0x4c
   1f37a:	2302      	movs	r3, #2
   1f37c:	723b      	strb	r3, [r7, #8]
   1f37e:	2300      	movs	r3, #0
   1f380:	727b      	strb	r3, [r7, #9]
   1f382:	72bb      	strb	r3, [r7, #10]
   1f384:	72fb      	strb	r3, [r7, #11]
   1f386:	68ba      	ldr	r2, [r7, #8]
   1f388:	64ba      	str	r2, [r7, #72]	; 0x48
   1f38a:	4619      	mov	r1, r3
   1f38c:	f363 0100 	bfi	r1, r3, #0, #1
   1f390:	f363 0141 	bfi	r1, r3, #1, #1
   1f394:	f363 0182 	bfi	r1, r3, #2, #1
   1f398:	f363 01c5 	bfi	r1, r3, #3, #3
   1f39c:	2201      	movs	r2, #1
   1f39e:	f362 1188 	bfi	r1, r2, #6, #3
   1f3a2:	2208      	movs	r2, #8
   1f3a4:	f362 2152 	bfi	r1, r2, #9, #10
   1f3a8:	f363 41de 	bfi	r1, r3, #19, #12
   1f3ac:	f363 71df 	bfi	r1, r3, #31, #1
   1f3b0:	f107 0248 	add.w	r2, r7, #72	; 0x48
   1f3b4:	4843      	ldr	r0, [pc, #268]	; (1f4c4 <__kernel_ram_size+0xf4>)
   1f3b6:	f007 fc4e 	bl	26c56 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1f3ba:	f06f 0015 	mvn.w	r0, #21
   1f3be:	e736      	b.n	1f22e <configure+0xb6>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1f3c0:	4b44      	ldr	r3, [pc, #272]	; (1f4d4 <__kernel_ram_size+0x104>)
   1f3c2:	637b      	str	r3, [r7, #52]	; 0x34
   1f3c4:	2302      	movs	r3, #2
   1f3c6:	723b      	strb	r3, [r7, #8]
   1f3c8:	2300      	movs	r3, #0
   1f3ca:	727b      	strb	r3, [r7, #9]
   1f3cc:	72bb      	strb	r3, [r7, #10]
   1f3ce:	72fb      	strb	r3, [r7, #11]
   1f3d0:	68ba      	ldr	r2, [r7, #8]
   1f3d2:	633a      	str	r2, [r7, #48]	; 0x30
   1f3d4:	4619      	mov	r1, r3
   1f3d6:	f363 0100 	bfi	r1, r3, #0, #1
   1f3da:	f363 0141 	bfi	r1, r3, #1, #1
   1f3de:	f363 0182 	bfi	r1, r3, #2, #1
   1f3e2:	f363 01c5 	bfi	r1, r3, #3, #3
   1f3e6:	2201      	movs	r2, #1
   1f3e8:	f362 1188 	bfi	r1, r2, #6, #3
   1f3ec:	2208      	movs	r2, #8
   1f3ee:	f362 2152 	bfi	r1, r2, #9, #10
   1f3f2:	f363 41de 	bfi	r1, r3, #19, #12
   1f3f6:	f363 71df 	bfi	r1, r3, #31, #1
   1f3fa:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1f3fe:	4831      	ldr	r0, [pc, #196]	; (1f4c4 <__kernel_ram_size+0xf4>)
   1f400:	f007 fc29 	bl	26c56 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1f404:	f06f 0015 	mvn.w	r0, #21
   1f408:	e711      	b.n	1f22e <configure+0xb6>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   1f40a:	f013 0f04 	tst.w	r3, #4
   1f40e:	d003      	beq.n	1f418 <__kernel_ram_size+0x48>
			return NRF_SPI_MODE_1;
   1f410:	2301      	movs	r3, #1
   1f412:	e6f0      	b.n	1f1f6 <configure+0x7e>
			return NRF_SPI_MODE_2;
   1f414:	2302      	movs	r3, #2
   1f416:	e6ee      	b.n	1f1f6 <configure+0x7e>
			return NRF_SPI_MODE_0;
   1f418:	2300      	movs	r3, #0
   1f41a:	e6ec      	b.n	1f1f6 <configure+0x7e>
		return NRF_SPI_BIT_ORDER_MSB_FIRST;
   1f41c:	2300      	movs	r3, #0
   1f41e:	e6f1      	b.n	1f204 <configure+0x8c>
		nrfx_spi_uninit(&dev_config->spi);
   1f420:	4630      	mov	r0, r6
   1f422:	f003 ff5d 	bl	232e0 <nrfx_spi_uninit>
		dev_data->initialized = false;
   1f426:	2300      	movs	r3, #0
   1f428:	f885 306d 	strb.w	r3, [r5, #109]	; 0x6d
   1f42c:	e6ef      	b.n	1f20e <configure+0x96>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   1f42e:	466d      	mov	r5, sp
   1f430:	b088      	sub	sp, #32
   1f432:	466b      	mov	r3, sp
   1f434:	f113 0210 	adds.w	r2, r3, #16
   1f438:	d00d      	beq.n	1f456 <__kernel_ram_size+0x86>
   1f43a:	210c      	movs	r1, #12
   1f43c:	b13a      	cbz	r2, 1f44e <__kernel_ram_size+0x7e>
   1f43e:	460c      	mov	r4, r1
   1f440:	2904      	cmp	r1, #4
   1f442:	dd01      	ble.n	1f448 <__kernel_ram_size+0x78>
   1f444:	4e24      	ldr	r6, [pc, #144]	; (1f4d8 <__kernel_ram_size+0x108>)
   1f446:	615e      	str	r6, [r3, #20]
   1f448:	2c08      	cmp	r4, #8
   1f44a:	dd07      	ble.n	1f45c <__kernel_ram_size+0x8c>
   1f44c:	6198      	str	r0, [r3, #24]
   1f44e:	290b      	cmp	r1, #11
   1f450:	dd2b      	ble.n	1f4aa <__kernel_ram_size+0xda>
   1f452:	240c      	movs	r4, #12
   1f454:	e004      	b.n	1f460 <__kernel_ram_size+0x90>
   1f456:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1f45a:	e7ef      	b.n	1f43c <__kernel_ram_size+0x6c>
   1f45c:	f06f 041b 	mvn.w	r4, #27
   1f460:	b13a      	cbz	r2, 1f472 <__kernel_ram_size+0xa2>
   1f462:	2103      	movs	r1, #3
   1f464:	7239      	strb	r1, [r7, #8]
   1f466:	2100      	movs	r1, #0
   1f468:	7279      	strb	r1, [r7, #9]
   1f46a:	72b9      	strb	r1, [r7, #10]
   1f46c:	72f9      	strb	r1, [r7, #11]
   1f46e:	68b8      	ldr	r0, [r7, #8]
   1f470:	6118      	str	r0, [r3, #16]
   1f472:	2100      	movs	r1, #0
   1f474:	f36f 0100 	bfc	r1, #0, #1
   1f478:	f36f 0141 	bfc	r1, #1, #1
   1f47c:	f36f 0182 	bfc	r1, #2, #1
   1f480:	f36f 01c5 	bfc	r1, #3, #3
   1f484:	2301      	movs	r3, #1
   1f486:	f363 1188 	bfi	r1, r3, #6, #3
   1f48a:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1f48e:	f363 2152 	bfi	r1, r3, #9, #10
   1f492:	f36f 41de 	bfc	r1, #19, #12
   1f496:	f36f 71df 	bfc	r1, #31, #1
   1f49a:	2300      	movs	r3, #0
   1f49c:	4809      	ldr	r0, [pc, #36]	; (1f4c4 <__kernel_ram_size+0xf4>)
   1f49e:	f007 fbda 	bl	26c56 <z_impl_z_log_msg_static_create>
   1f4a2:	46ad      	mov	sp, r5
		return -EIO;
   1f4a4:	f06f 0004 	mvn.w	r0, #4
   1f4a8:	e6c1      	b.n	1f22e <configure+0xb6>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   1f4aa:	f06f 041b 	mvn.w	r4, #27
   1f4ae:	e7d7      	b.n	1f460 <__kernel_ram_size+0x90>
		return 0;
   1f4b0:	2000      	movs	r0, #0
   1f4b2:	e6bc      	b.n	1f22e <configure+0xb6>
   1f4b4:	0001e847 	.word	0x0001e847
   1f4b8:	0001f609 	.word	0x0001f609
   1f4bc:	0bad0000 	.word	0x0bad0000
   1f4c0:	0002f5e4 	.word	0x0002f5e4
   1f4c4:	0002d16c 	.word	0x0002d16c
   1f4c8:	0002f600 	.word	0x0002f600
   1f4cc:	0002f624 	.word	0x0002f624
   1f4d0:	0002f644 	.word	0x0002f644
   1f4d4:	0002f674 	.word	0x0002f674
   1f4d8:	0002f6a8 	.word	0x0002f6a8

0001f4dc <spi_context_wait_for_completion>:
	}
#endif /* CONFIG_SPI_ASYNC */
}

static inline int spi_context_wait_for_completion(struct spi_context *ctx)
{
   1f4dc:	b530      	push	{r4, r5, lr}
   1f4de:	b089      	sub	sp, #36	; 0x24
   1f4e0:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_SPI_SLAVE) && spi_context_is_slave(ctx)) {
		timeout = K_FOREVER;
	} else {
		uint32_t timeout_ms;

		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1f4e2:	6e03      	ldr	r3, [r0, #96]	; 0x60
   1f4e4:	6d82      	ldr	r2, [r0, #88]	; 0x58
   1f4e6:	4293      	cmp	r3, r2
   1f4e8:	bf38      	it	cc
   1f4ea:	4613      	movcc	r3, r2
   1f4ec:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
   1f4f0:	fb02 f303 	mul.w	r3, r2, r3
			     ctx->config->frequency;
   1f4f4:	4605      	mov	r5, r0
   1f4f6:	f855 2b28 	ldr.w	r2, [r5], #40
   1f4fa:	6812      	ldr	r2, [r2, #0]
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1f4fc:	fbb3 f3f2 	udiv	r3, r3, r2
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   1f500:	33c8      	adds	r3, #200	; 0xc8
   1f502:	0c59      	lsrs	r1, r3, #17
   1f504:	03db      	lsls	r3, r3, #15
   1f506:	f240 32e7 	movw	r2, #999	; 0x3e7
   1f50a:	1898      	adds	r0, r3, r2
   1f50c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f510:	f04f 0300 	mov.w	r3, #0
   1f514:	f141 0100 	adc.w	r1, r1, #0
   1f518:	f7e0 fdf2 	bl	100 <__aeabi_uldivmod>
   1f51c:	4602      	mov	r2, r0
   1f51e:	460b      	mov	r3, r1
   1f520:	4628      	mov	r0, r5
   1f522:	f004 fda1 	bl	24068 <z_impl_k_sem_take>
			return -ETIMEDOUT;
		}
		status = ctx->sync_status;
	}
#else
	if (k_sem_take(&ctx->sync, timeout)) {
   1f526:	b910      	cbnz	r0, 1f52e <spi_context_wait_for_completion+0x52>
		LOG_ERR("Timeout waiting for transfer complete");
		return -ETIMEDOUT;
	}
	status = ctx->sync_status;
   1f528:	6c20      	ldr	r0, [r4, #64]	; 0x40
		return ctx->recv_frames;
	}
#endif /* CONFIG_SPI_SLAVE */

	return status;
}
   1f52a:	b009      	add	sp, #36	; 0x24
   1f52c:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Timeout waiting for transfer complete");
   1f52e:	4b14      	ldr	r3, [pc, #80]	; (1f580 <spi_context_wait_for_completion+0xa4>)
   1f530:	9307      	str	r3, [sp, #28]
   1f532:	2302      	movs	r3, #2
   1f534:	f88d 3004 	strb.w	r3, [sp, #4]
   1f538:	2300      	movs	r3, #0
   1f53a:	f88d 3005 	strb.w	r3, [sp, #5]
   1f53e:	f88d 3006 	strb.w	r3, [sp, #6]
   1f542:	f88d 3007 	strb.w	r3, [sp, #7]
   1f546:	9a01      	ldr	r2, [sp, #4]
   1f548:	9206      	str	r2, [sp, #24]
   1f54a:	4619      	mov	r1, r3
   1f54c:	f363 0100 	bfi	r1, r3, #0, #1
   1f550:	f363 0141 	bfi	r1, r3, #1, #1
   1f554:	f363 0182 	bfi	r1, r3, #2, #1
   1f558:	f363 01c5 	bfi	r1, r3, #3, #3
   1f55c:	2201      	movs	r2, #1
   1f55e:	f362 1188 	bfi	r1, r2, #6, #3
   1f562:	2208      	movs	r2, #8
   1f564:	f362 2152 	bfi	r1, r2, #9, #10
   1f568:	f363 41de 	bfi	r1, r3, #19, #12
   1f56c:	f363 71df 	bfi	r1, r3, #31, #1
   1f570:	aa06      	add	r2, sp, #24
   1f572:	4804      	ldr	r0, [pc, #16]	; (1f584 <spi_context_wait_for_completion+0xa8>)
   1f574:	f007 fb6f 	bl	26c56 <z_impl_z_log_msg_static_create>
		return -ETIMEDOUT;
   1f578:	f06f 0073 	mvn.w	r0, #115	; 0x73
   1f57c:	e7d5      	b.n	1f52a <spi_context_wait_for_completion+0x4e>
   1f57e:	bf00      	nop
   1f580:	0002f6d0 	.word	0x0002f6d0
   1f584:	0002d16c 	.word	0x0002d16c

0001f588 <transfer_next_chunk>:

static void transfer_next_chunk(const struct device *dev)
{
   1f588:	b530      	push	{r4, r5, lr}
   1f58a:	b085      	sub	sp, #20
   1f58c:	4603      	mov	r3, r0
	const struct spi_nrfx_config *dev_config = dev->config;
   1f58e:	6840      	ldr	r0, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1f590:	691c      	ldr	r4, [r3, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1f592:	6da2      	ldr	r2, [r4, #88]	; 0x58
   1f594:	b352      	cbz	r2, 1f5ec <transfer_next_chunk+0x64>
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
   1f596:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1f598:	b353      	cbz	r3, 1f5f0 <transfer_next_chunk+0x68>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   1f59a:	4293      	cmp	r3, r2
   1f59c:	bf28      	it	cs
   1f59e:	4613      	movcs	r3, r2
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
   1f5a0:	b373      	cbz	r3, 1f600 <transfer_next_chunk+0x78>
		nrfx_spi_xfer_desc_t xfer;
		nrfx_err_t result;

		dev_data->chunk_len = chunk_len;
   1f5a2:	66a3      	str	r3, [r4, #104]	; 0x68

		xfer.p_tx_buffer = ctx->tx_buf;
   1f5a4:	6d61      	ldr	r1, [r4, #84]	; 0x54
   1f5a6:	9100      	str	r1, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
   1f5a8:	b321      	cbz	r1, 1f5f4 <transfer_next_chunk+0x6c>
   1f5aa:	bb2a      	cbnz	r2, 1f5f8 <transfer_next_chunk+0x70>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1f5ac:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1f5ae:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   1f5b0:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1f5b2:	b31a      	cbz	r2, 1f5fc <transfer_next_chunk+0x74>
   1f5b4:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1f5b6:	b902      	cbnz	r2, 1f5ba <transfer_next_chunk+0x32>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1f5b8:	4613      	mov	r3, r2
   1f5ba:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&dev_config->spi, &xfer, 0);
   1f5bc:	2200      	movs	r2, #0
   1f5be:	4669      	mov	r1, sp
   1f5c0:	f003 ff02 	bl	233c8 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
   1f5c4:	4b0f      	ldr	r3, [pc, #60]	; (1f604 <transfer_next_chunk+0x7c>)
   1f5c6:	4298      	cmp	r0, r3
   1f5c8:	d00e      	beq.n	1f5e8 <transfer_next_chunk+0x60>
			return;
		}

		error = -EIO;
   1f5ca:	f06f 0504 	mvn.w	r5, #4
	_spi_context_cs_control(ctx, on, false);
   1f5ce:	2200      	movs	r2, #0
   1f5d0:	4611      	mov	r1, r2
   1f5d2:	4620      	mov	r0, r4
   1f5d4:	f00a ff9d 	bl	2a512 <_spi_context_cs_control>
	ctx->sync_status = status;
   1f5d8:	6425      	str	r5, [r4, #64]	; 0x40
	k_sem_give(&ctx->sync);
   1f5da:	f104 0028 	add.w	r0, r4, #40	; 0x28
	z_impl_k_sem_give(sem);
   1f5de:	f004 fd1b 	bl	24018 <z_impl_k_sem_give>
	spi_context_cs_control(ctx, false);

	LOG_DBG("Transaction finished with status %d", error);

	spi_context_complete(ctx, dev, error);
	dev_data->busy = false;
   1f5e2:	2300      	movs	r3, #0
   1f5e4:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   1f5e8:	b005      	add	sp, #20
   1f5ea:	bd30      	pop	{r4, r5, pc}
		return ctx->rx_len;
   1f5ec:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1f5ee:	e7d7      	b.n	1f5a0 <transfer_next_chunk+0x18>
		return ctx->tx_len;
   1f5f0:	4613      	mov	r3, r2
   1f5f2:	e7d5      	b.n	1f5a0 <transfer_next_chunk+0x18>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1f5f4:	2200      	movs	r2, #0
   1f5f6:	e7d9      	b.n	1f5ac <transfer_next_chunk+0x24>
   1f5f8:	461a      	mov	r2, r3
   1f5fa:	e7d7      	b.n	1f5ac <transfer_next_chunk+0x24>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1f5fc:	2300      	movs	r3, #0
   1f5fe:	e7dc      	b.n	1f5ba <transfer_next_chunk+0x32>
	int error = 0;
   1f600:	2500      	movs	r5, #0
   1f602:	e7e4      	b.n	1f5ce <transfer_next_chunk+0x46>
   1f604:	0bad0000 	.word	0x0bad0000

0001f608 <event_handler>:

static void event_handler(const nrfx_spi_evt_t *p_event, void *p_context)
{
	struct spi_nrfx_data *dev_data = p_context;

	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   1f608:	7803      	ldrb	r3, [r0, #0]
   1f60a:	2b00      	cmp	r3, #0
   1f60c:	f040 808f 	bne.w	1f72e <event_handler+0x126>
{
   1f610:	b510      	push	{r4, lr}
   1f612:	b08e      	sub	sp, #56	; 0x38
   1f614:	460c      	mov	r4, r1
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1f616:	6e8a      	ldr	r2, [r1, #104]	; 0x68
	if (!ctx->tx_len) {
   1f618:	6d8b      	ldr	r3, [r1, #88]	; 0x58
   1f61a:	b14b      	cbz	r3, 1f630 <event_handler+0x28>
	if (len > ctx->tx_len) {
   1f61c:	429a      	cmp	r2, r3
   1f61e:	d819      	bhi.n	1f654 <event_handler+0x4c>
	ctx->tx_len -= len;
   1f620:	1a9b      	subs	r3, r3, r2
   1f622:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
   1f624:	2b00      	cmp	r3, #0
   1f626:	d03b      	beq.n	1f6a0 <event_handler+0x98>
	} else if (ctx->tx_buf) {
   1f628:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   1f62a:	b10b      	cbz	r3, 1f630 <event_handler+0x28>
		ctx->tx_buf += dfs * len;
   1f62c:	4413      	add	r3, r2
   1f62e:	654b      	str	r3, [r1, #84]	; 0x54
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1f630:	6ea2      	ldr	r2, [r4, #104]	; 0x68
	if (!ctx->rx_len) {
   1f632:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1f634:	b14b      	cbz	r3, 1f64a <event_handler+0x42>
	if (len > ctx->rx_len) {
   1f636:	429a      	cmp	r2, r3
   1f638:	d842      	bhi.n	1f6c0 <event_handler+0xb8>
	ctx->rx_len -= len;
   1f63a:	1a9b      	subs	r3, r3, r2
   1f63c:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   1f63e:	2b00      	cmp	r3, #0
   1f640:	d064      	beq.n	1f70c <event_handler+0x104>
	} else if (ctx->rx_buf) {
   1f642:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1f644:	b10b      	cbz	r3, 1f64a <event_handler+0x42>
		ctx->rx_buf += dfs * len;
   1f646:	4413      	add	r3, r2
   1f648:	65e3      	str	r3, [r4, #92]	; 0x5c

		transfer_next_chunk(dev_data->dev);
   1f64a:	6e60      	ldr	r0, [r4, #100]	; 0x64
   1f64c:	f7ff ff9c 	bl	1f588 <transfer_next_chunk>
	}
}
   1f650:	b00e      	add	sp, #56	; 0x38
   1f652:	bd10      	pop	{r4, pc}
		LOG_ERR("Update exceeds current buffer");
   1f654:	4b36      	ldr	r3, [pc, #216]	; (1f730 <event_handler+0x128>)
   1f656:	930d      	str	r3, [sp, #52]	; 0x34
   1f658:	2302      	movs	r3, #2
   1f65a:	f88d 3004 	strb.w	r3, [sp, #4]
   1f65e:	2300      	movs	r3, #0
   1f660:	f88d 3005 	strb.w	r3, [sp, #5]
   1f664:	f88d 3006 	strb.w	r3, [sp, #6]
   1f668:	f88d 3007 	strb.w	r3, [sp, #7]
   1f66c:	9a01      	ldr	r2, [sp, #4]
   1f66e:	920c      	str	r2, [sp, #48]	; 0x30
   1f670:	4619      	mov	r1, r3
   1f672:	f363 0100 	bfi	r1, r3, #0, #1
   1f676:	f363 0141 	bfi	r1, r3, #1, #1
   1f67a:	f363 0182 	bfi	r1, r3, #2, #1
   1f67e:	f363 01c5 	bfi	r1, r3, #3, #3
   1f682:	2201      	movs	r2, #1
   1f684:	f362 1188 	bfi	r1, r2, #6, #3
   1f688:	2208      	movs	r2, #8
   1f68a:	f362 2152 	bfi	r1, r2, #9, #10
   1f68e:	f363 41de 	bfi	r1, r3, #19, #12
   1f692:	f363 71df 	bfi	r1, r3, #31, #1
   1f696:	aa0c      	add	r2, sp, #48	; 0x30
   1f698:	4826      	ldr	r0, [pc, #152]	; (1f734 <event_handler+0x12c>)
   1f69a:	f007 fadc 	bl	26c56 <z_impl_z_log_msg_static_create>
		return;
   1f69e:	e7c7      	b.n	1f630 <event_handler+0x28>
		++ctx->current_tx;
   1f6a0:	6c4b      	ldr	r3, [r1, #68]	; 0x44
   1f6a2:	3308      	adds	r3, #8
   1f6a4:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
   1f6a6:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   1f6a8:	3b01      	subs	r3, #1
   1f6aa:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1f6ac:	2301      	movs	r3, #1
   1f6ae:	f101 0258 	add.w	r2, r1, #88	; 0x58
   1f6b2:	3148      	adds	r1, #72	; 0x48
   1f6b4:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1f6b8:	f00a fee4 	bl	2a484 <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
   1f6bc:	6560      	str	r0, [r4, #84]	; 0x54
   1f6be:	e7b7      	b.n	1f630 <event_handler+0x28>
		LOG_ERR("Update exceeds current buffer");
   1f6c0:	4b1b      	ldr	r3, [pc, #108]	; (1f730 <event_handler+0x128>)
   1f6c2:	9307      	str	r3, [sp, #28]
   1f6c4:	2302      	movs	r3, #2
   1f6c6:	f88d 3004 	strb.w	r3, [sp, #4]
   1f6ca:	2300      	movs	r3, #0
   1f6cc:	f88d 3005 	strb.w	r3, [sp, #5]
   1f6d0:	f88d 3006 	strb.w	r3, [sp, #6]
   1f6d4:	f88d 3007 	strb.w	r3, [sp, #7]
   1f6d8:	9a01      	ldr	r2, [sp, #4]
   1f6da:	9206      	str	r2, [sp, #24]
   1f6dc:	4619      	mov	r1, r3
   1f6de:	f363 0100 	bfi	r1, r3, #0, #1
   1f6e2:	f363 0141 	bfi	r1, r3, #1, #1
   1f6e6:	f363 0182 	bfi	r1, r3, #2, #1
   1f6ea:	f363 01c5 	bfi	r1, r3, #3, #3
   1f6ee:	2201      	movs	r2, #1
   1f6f0:	f362 1188 	bfi	r1, r2, #6, #3
   1f6f4:	2208      	movs	r2, #8
   1f6f6:	f362 2152 	bfi	r1, r2, #9, #10
   1f6fa:	f363 41de 	bfi	r1, r3, #19, #12
   1f6fe:	f363 71df 	bfi	r1, r3, #31, #1
   1f702:	aa06      	add	r2, sp, #24
   1f704:	480b      	ldr	r0, [pc, #44]	; (1f734 <event_handler+0x12c>)
   1f706:	f007 faa6 	bl	26c56 <z_impl_z_log_msg_static_create>
		return;
   1f70a:	e79e      	b.n	1f64a <event_handler+0x42>
		++ctx->current_rx;
   1f70c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1f70e:	3308      	adds	r3, #8
   1f710:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   1f712:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1f714:	3b01      	subs	r3, #1
   1f716:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1f718:	2301      	movs	r3, #1
   1f71a:	f104 0260 	add.w	r2, r4, #96	; 0x60
   1f71e:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1f722:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1f726:	f00a fead 	bl	2a484 <spi_context_get_next_buf>
		ctx->rx_buf = (uint8_t *)
   1f72a:	65e0      	str	r0, [r4, #92]	; 0x5c
   1f72c:	e78d      	b.n	1f64a <event_handler+0x42>
   1f72e:	4770      	bx	lr
   1f730:	0002f6f8 	.word	0x0002f6f8
   1f734:	0002d16c 	.word	0x0002d16c

0001f738 <spi_context_cs_configure_all>:
{
   1f738:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f73a:	b083      	sub	sp, #12
   1f73c:	af00      	add	r7, sp, #0
   1f73e:	4605      	mov	r5, r0
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1f740:	6884      	ldr	r4, [r0, #8]
   1f742:	e05d      	b.n	1f800 <spi_context_cs_configure_all+0xc8>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   1f744:	6823      	ldr	r3, [r4, #0]
   1f746:	681e      	ldr	r6, [r3, #0]
   1f748:	7921      	ldrb	r1, [r4, #4]
   1f74a:	466d      	mov	r5, sp
   1f74c:	2300      	movs	r3, #0
   1f74e:	713b      	strb	r3, [r7, #4]
   1f750:	2302      	movs	r3, #2
   1f752:	717b      	strb	r3, [r7, #5]
   1f754:	b08a      	sub	sp, #40	; 0x28
   1f756:	466c      	mov	r4, sp
   1f758:	f114 0210 	adds.w	r2, r4, #16
   1f75c:	d015      	beq.n	1f78a <spi_context_cs_configure_all+0x52>
   1f75e:	2012      	movs	r0, #18
   1f760:	b11a      	cbz	r2, 1f76a <spi_context_cs_configure_all+0x32>
   1f762:	2804      	cmp	r0, #4
   1f764:	dd01      	ble.n	1f76a <spi_context_cs_configure_all+0x32>
   1f766:	4b32      	ldr	r3, [pc, #200]	; (1f830 <spi_context_cs_configure_all+0xf8>)
   1f768:	6163      	str	r3, [r4, #20]
   1f76a:	2300      	movs	r3, #0
   1f76c:	703b      	strb	r3, [r7, #0]
   1f76e:	2302      	movs	r3, #2
   1f770:	707b      	strb	r3, [r7, #1]
   1f772:	b1c2      	cbz	r2, 1f7a6 <spi_context_cs_configure_all+0x6e>
   1f774:	4603      	mov	r3, r0
   1f776:	2808      	cmp	r0, #8
   1f778:	dd00      	ble.n	1f77c <spi_context_cs_configure_all+0x44>
   1f77a:	61a6      	str	r6, [r4, #24]
   1f77c:	2b0c      	cmp	r3, #12
   1f77e:	dd00      	ble.n	1f782 <spi_context_cs_configure_all+0x4a>
   1f780:	61e1      	str	r1, [r4, #28]
   1f782:	f104 0320 	add.w	r3, r4, #32
   1f786:	2100      	movs	r1, #0
   1f788:	e00b      	b.n	1f7a2 <spi_context_cs_configure_all+0x6a>
   1f78a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1f78e:	e7e7      	b.n	1f760 <spi_context_cs_configure_all+0x28>
   1f790:	f101 0608 	add.w	r6, r1, #8
   1f794:	eb06 0c07 	add.w	ip, r6, r7
   1f798:	f81c cc08 	ldrb.w	ip, [ip, #-8]
   1f79c:	f803 cb01 	strb.w	ip, [r3], #1
   1f7a0:	3101      	adds	r1, #1
   1f7a2:	2901      	cmp	r1, #1
   1f7a4:	d9f4      	bls.n	1f790 <spi_context_cs_configure_all+0x58>
   1f7a6:	2811      	cmp	r0, #17
   1f7a8:	dd26      	ble.n	1f7f8 <spi_context_cs_configure_all+0xc0>
   1f7aa:	2312      	movs	r3, #18
   1f7ac:	b142      	cbz	r2, 1f7c0 <spi_context_cs_configure_all+0x88>
   1f7ae:	2104      	movs	r1, #4
   1f7b0:	7139      	strb	r1, [r7, #4]
   1f7b2:	2100      	movs	r1, #0
   1f7b4:	7179      	strb	r1, [r7, #5]
   1f7b6:	71b9      	strb	r1, [r7, #6]
   1f7b8:	2101      	movs	r1, #1
   1f7ba:	71f9      	strb	r1, [r7, #7]
   1f7bc:	6878      	ldr	r0, [r7, #4]
   1f7be:	6120      	str	r0, [r4, #16]
   1f7c0:	2100      	movs	r1, #0
   1f7c2:	f36f 0100 	bfc	r1, #0, #1
   1f7c6:	f36f 0141 	bfc	r1, #1, #1
   1f7ca:	f36f 0182 	bfc	r1, #2, #1
   1f7ce:	f36f 01c5 	bfc	r1, #3, #3
   1f7d2:	2001      	movs	r0, #1
   1f7d4:	f360 1188 	bfi	r1, r0, #6, #3
   1f7d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1f7dc:	f363 2152 	bfi	r1, r3, #9, #10
   1f7e0:	f36f 41de 	bfc	r1, #19, #12
   1f7e4:	f36f 71df 	bfc	r1, #31, #1
   1f7e8:	2300      	movs	r3, #0
   1f7ea:	4812      	ldr	r0, [pc, #72]	; (1f834 <spi_context_cs_configure_all+0xfc>)
   1f7ec:	f007 fa33 	bl	26c56 <z_impl_z_log_msg_static_create>
   1f7f0:	46ad      	mov	sp, r5
			return -ENODEV;
   1f7f2:	f06f 0012 	mvn.w	r0, #18
   1f7f6:	e017      	b.n	1f828 <spi_context_cs_configure_all+0xf0>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   1f7f8:	f06f 031b 	mvn.w	r3, #27
   1f7fc:	e7d6      	b.n	1f7ac <spi_context_cs_configure_all+0x74>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1f7fe:	3408      	adds	r4, #8
   1f800:	68ab      	ldr	r3, [r5, #8]
   1f802:	68ea      	ldr	r2, [r5, #12]
   1f804:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1f808:	429c      	cmp	r4, r3
   1f80a:	d20c      	bcs.n	1f826 <spi_context_cs_configure_all+0xee>
		if (!device_is_ready(cs_gpio->port)) {
   1f80c:	6820      	ldr	r0, [r4, #0]
   1f80e:	f00c fa84 	bl	2bd1a <z_device_is_ready>
   1f812:	2800      	cmp	r0, #0
   1f814:	d096      	beq.n	1f744 <spi_context_cs_configure_all+0xc>
		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
   1f816:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
   1f81a:	4620      	mov	r0, r4
   1f81c:	f00a fe0a 	bl	2a434 <gpio_pin_configure_dt>
		if (ret < 0) {
   1f820:	2800      	cmp	r0, #0
   1f822:	daec      	bge.n	1f7fe <spi_context_cs_configure_all+0xc6>
   1f824:	e000      	b.n	1f828 <spi_context_cs_configure_all+0xf0>
	return 0;
   1f826:	2000      	movs	r0, #0
}
   1f828:	370c      	adds	r7, #12
   1f82a:	46bd      	mov	sp, r7
   1f82c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f82e:	bf00      	nop
   1f830:	0002f718 	.word	0x0002f718
   1f834:	0002d16c 	.word	0x0002d16c

0001f838 <update_sampling_pnt>:
}

static int update_sampling_pnt(uint32_t ts, uint32_t sp, struct can_timing *res,
			       const struct can_timing *max,
			       const struct can_timing *min)
{
   1f838:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f83c:	9f07      	ldr	r7, [sp, #28]
	uint16_t ts1_max = max->phase_seg1 + max->prop_seg;
   1f83e:	f8b3 c004 	ldrh.w	ip, [r3, #4]
   1f842:	f8b3 8002 	ldrh.w	r8, [r3, #2]
   1f846:	44c4      	add	ip, r8
   1f848:	fa1f fc8c 	uxth.w	ip, ip
	uint16_t ts1_min = min->phase_seg1 + min->prop_seg;
   1f84c:	88bd      	ldrh	r5, [r7, #4]
   1f84e:	887c      	ldrh	r4, [r7, #2]
   1f850:	4425      	add	r5, r4
   1f852:	b2ad      	uxth	r5, r5
	uint32_t sp_calc;
	uint16_t ts1, ts2;

	ts2 = ts - (ts * sp) / 1000;
   1f854:	b286      	uxth	r6, r0
   1f856:	fb01 fe00 	mul.w	lr, r1, r0
   1f85a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 1f900 <update_sampling_pnt+0xc8>
   1f85e:	fba9 9e0e 	umull	r9, lr, r9, lr
   1f862:	f3ce 1e8f 	ubfx	lr, lr, #6, #16
   1f866:	eba6 0e0e 	sub.w	lr, r6, lr
   1f86a:	fa1f fe8e 	uxth.w	lr, lr
	ts2 = CLAMP(ts2, min->phase_seg2, max->phase_seg2);
   1f86e:	f8b7 9006 	ldrh.w	r9, [r7, #6]
   1f872:	45f1      	cmp	r9, lr
   1f874:	d22f      	bcs.n	1f8d6 <update_sampling_pnt+0x9e>
   1f876:	88df      	ldrh	r7, [r3, #6]
   1f878:	45be      	cmp	lr, r7
   1f87a:	bf28      	it	cs
   1f87c:	46be      	movcs	lr, r7
	ts1 = ts - CAN_SYNC_SEG - ts2;
   1f87e:	eba6 070e 	sub.w	r7, r6, lr
   1f882:	b2bf      	uxth	r7, r7
   1f884:	3f01      	subs	r7, #1
   1f886:	b2bf      	uxth	r7, r7

	if (ts1 > ts1_max) {
   1f888:	45bc      	cmp	ip, r7
   1f88a:	d226      	bcs.n	1f8da <update_sampling_pnt+0xa2>
		ts1 = ts1_max;
		ts2 = ts - CAN_SYNC_SEG - ts1;
   1f88c:	eba6 0e0c 	sub.w	lr, r6, ip
   1f890:	fa1f fe8e 	uxth.w	lr, lr
   1f894:	f10e 3eff 	add.w	lr, lr, #4294967295
   1f898:	fa1f fe8e 	uxth.w	lr, lr
		if (ts2 > max->phase_seg2) {
   1f89c:	88db      	ldrh	r3, [r3, #6]
   1f89e:	4573      	cmp	r3, lr
   1f8a0:	d328      	bcc.n	1f8f4 <update_sampling_pnt+0xbc>
		if (ts2 < min->phase_seg2) {
			return -1;
		}
	}

	res->prop_seg = CLAMP(ts1 / 2, min->prop_seg, max->prop_seg);
   1f8a2:	ea4f 035c 	mov.w	r3, ip, lsr #1
   1f8a6:	ebb4 0f5c 	cmp.w	r4, ip, lsr #1
   1f8aa:	d203      	bcs.n	1f8b4 <update_sampling_pnt+0x7c>
   1f8ac:	4644      	mov	r4, r8
   1f8ae:	4598      	cmp	r8, r3
   1f8b0:	bf28      	it	cs
   1f8b2:	461c      	movcs	r4, r3
   1f8b4:	8054      	strh	r4, [r2, #2]
	res->phase_seg1 = ts1 - res->prop_seg;
   1f8b6:	ebac 0404 	sub.w	r4, ip, r4
   1f8ba:	8094      	strh	r4, [r2, #4]
	res->phase_seg2 = ts2;
   1f8bc:	f8a2 e006 	strh.w	lr, [r2, #6]

	sp_calc = (CAN_SYNC_SEG + ts1) * 1000 / ts;
   1f8c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1f8c4:	fb0c 3303 	mla	r3, ip, r3, r3
   1f8c8:	fbb3 f0f0 	udiv	r0, r3, r0

	return sp_calc > sp ? sp_calc - sp : sp - sp_calc;
   1f8cc:	4281      	cmp	r1, r0
   1f8ce:	d20f      	bcs.n	1f8f0 <update_sampling_pnt+0xb8>
   1f8d0:	1a40      	subs	r0, r0, r1
}
   1f8d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ts2 = CLAMP(ts2, min->phase_seg2, max->phase_seg2);
   1f8d6:	46ce      	mov	lr, r9
   1f8d8:	e7d1      	b.n	1f87e <update_sampling_pnt+0x46>
	} else if (ts1 < ts1_min) {
   1f8da:	42bd      	cmp	r5, r7
   1f8dc:	d906      	bls.n	1f8ec <update_sampling_pnt+0xb4>
		ts2 = ts - ts1;
   1f8de:	1b76      	subs	r6, r6, r5
   1f8e0:	fa1f fe86 	uxth.w	lr, r6
		if (ts2 < min->phase_seg2) {
   1f8e4:	45f1      	cmp	r9, lr
   1f8e6:	d808      	bhi.n	1f8fa <update_sampling_pnt+0xc2>
		ts1 = ts1_min;
   1f8e8:	46ac      	mov	ip, r5
   1f8ea:	e7da      	b.n	1f8a2 <update_sampling_pnt+0x6a>
	ts1 = ts - CAN_SYNC_SEG - ts2;
   1f8ec:	46bc      	mov	ip, r7
   1f8ee:	e7d8      	b.n	1f8a2 <update_sampling_pnt+0x6a>
	return sp_calc > sp ? sp_calc - sp : sp - sp_calc;
   1f8f0:	1a08      	subs	r0, r1, r0
   1f8f2:	e7ee      	b.n	1f8d2 <update_sampling_pnt+0x9a>
			return -1;
   1f8f4:	f04f 30ff 	mov.w	r0, #4294967295
   1f8f8:	e7eb      	b.n	1f8d2 <update_sampling_pnt+0x9a>
			return -1;
   1f8fa:	f04f 30ff 	mov.w	r0, #4294967295
   1f8fe:	e7e8      	b.n	1f8d2 <update_sampling_pnt+0x9a>
   1f900:	10624dd3 	.word	0x10624dd3

0001f904 <z_impl_can_send>:
{
   1f904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f908:	b08b      	sub	sp, #44	; 0x2c
   1f90a:	4604      	mov	r4, r0
   1f90c:	460f      	mov	r7, r1
   1f90e:	4616      	mov	r6, r2
   1f910:	461d      	mov	r5, r3
   1f912:	9812      	ldr	r0, [sp, #72]	; 0x48
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
   1f914:	f8d4 8008 	ldr.w	r8, [r4, #8]
	if (callback == NULL) {
   1f918:	b150      	cbz	r0, 1f930 <z_impl_can_send+0x2c>
	return api->send(dev, frame, timeout, callback, user_data);
   1f91a:	f8d8 8014 	ldr.w	r8, [r8, #20]
   1f91e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1f920:	9301      	str	r3, [sp, #4]
   1f922:	9000      	str	r0, [sp, #0]
   1f924:	462b      	mov	r3, r5
   1f926:	4620      	mov	r0, r4
   1f928:	47c0      	blx	r8
}
   1f92a:	b00b      	add	sp, #44	; 0x2c
   1f92c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1f930:	f10d 090c 	add.w	r9, sp, #12
   1f934:	2201      	movs	r2, #1
   1f936:	2100      	movs	r1, #0
   1f938:	4648      	mov	r0, r9
   1f93a:	f00c fbec 	bl	2c116 <z_impl_k_sem_init>
		err = api->send(dev, frame, timeout, can_tx_default_cb, &ctx);
   1f93e:	f8d8 8014 	ldr.w	r8, [r8, #20]
   1f942:	f8cd 9004 	str.w	r9, [sp, #4]
   1f946:	4b09      	ldr	r3, [pc, #36]	; (1f96c <z_impl_can_send+0x68>)
   1f948:	9300      	str	r3, [sp, #0]
   1f94a:	4632      	mov	r2, r6
   1f94c:	462b      	mov	r3, r5
   1f94e:	4639      	mov	r1, r7
   1f950:	4620      	mov	r0, r4
   1f952:	47c0      	blx	r8
		if (err != 0) {
   1f954:	2800      	cmp	r0, #0
   1f956:	d1e8      	bne.n	1f92a <z_impl_can_send+0x26>
	return z_impl_k_sem_take(sem, timeout);
   1f958:	f04f 32ff 	mov.w	r2, #4294967295
   1f95c:	f04f 33ff 	mov.w	r3, #4294967295
   1f960:	4648      	mov	r0, r9
   1f962:	f004 fb81 	bl	24068 <z_impl_k_sem_take>
		return ctx.status;
   1f966:	9809      	ldr	r0, [sp, #36]	; 0x24
   1f968:	e7df      	b.n	1f92a <z_impl_can_send+0x26>
   1f96a:	bf00      	nop
   1f96c:	0002a771 	.word	0x0002a771

0001f970 <z_impl_can_calc_timing>:
	return sp_err_min == UINT16_MAX ? -ENOTSUP : (int)sp_err_min;
}

int z_impl_can_calc_timing(const struct device *dev, struct can_timing *res,
			   uint32_t bitrate, uint16_t sample_pnt)
{
   1f970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f974:	b084      	sub	sp, #16
   1f976:	4698      	mov	r8, r3
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
   1f978:	6886      	ldr	r6, [r0, #8]
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
   1f97a:	6887      	ldr	r7, [r0, #8]
	const struct can_timing *min = can_get_timing_min(dev);
	const struct can_timing *max = can_get_timing_max(dev);
	uint32_t core_clock;
	int ret;

	if (bitrate > 1000000) {
   1f97c:	4b0d      	ldr	r3, [pc, #52]	; (1f9b4 <z_impl_can_calc_timing+0x44>)
   1f97e:	429a      	cmp	r2, r3
   1f980:	d815      	bhi.n	1f9ae <z_impl_can_calc_timing+0x3e>
   1f982:	460d      	mov	r5, r1
   1f984:	4614      	mov	r4, r2
   1f986:	3634      	adds	r6, #52	; 0x34
   1f988:	373e      	adds	r7, #62	; 0x3e
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
   1f98a:	6883      	ldr	r3, [r0, #8]
	return api->get_core_clock(dev, rate);
   1f98c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f98e:	a903      	add	r1, sp, #12
   1f990:	4798      	blx	r3
		return -EINVAL;
	}

	ret = can_get_core_clock(dev, &core_clock);
	if (ret != 0) {
   1f992:	b110      	cbz	r0, 1f99a <z_impl_can_calc_timing+0x2a>
		return ret;
	}

	return can_calc_timing_int(core_clock, res, min, max, bitrate, sample_pnt);
}
   1f994:	b004      	add	sp, #16
   1f996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return can_calc_timing_int(core_clock, res, min, max, bitrate, sample_pnt);
   1f99a:	f8cd 8004 	str.w	r8, [sp, #4]
   1f99e:	9400      	str	r4, [sp, #0]
   1f9a0:	463b      	mov	r3, r7
   1f9a2:	4632      	mov	r2, r6
   1f9a4:	4629      	mov	r1, r5
   1f9a6:	9803      	ldr	r0, [sp, #12]
   1f9a8:	f00a fe84 	bl	2a6b4 <can_calc_timing_int>
   1f9ac:	e7f2      	b.n	1f994 <z_impl_can_calc_timing+0x24>
		return -EINVAL;
   1f9ae:	f06f 0015 	mvn.w	r0, #21
   1f9b2:	e7ef      	b.n	1f994 <z_impl_can_calc_timing+0x24>
   1f9b4:	000f4240 	.word	0x000f4240

0001f9b8 <mcp2515_get_state>:
	mcp2515_rx_filter(dev, &frame);
}

static int mcp2515_get_state(const struct device *dev, enum can_state *state,
			     struct can_bus_err_cnt *err_cnt)
{
   1f9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f9bc:	b082      	sub	sp, #8
   1f9be:	af00      	add	r7, sp, #0
   1f9c0:	4606      	mov	r6, r0
   1f9c2:	460d      	mov	r5, r1
   1f9c4:	4614      	mov	r4, r2
	struct mcp2515_data *dev_data = dev->data;
   1f9c6:	f8d0 8010 	ldr.w	r8, [r0, #16]
	uint8_t eflg;
	uint8_t err_cnt_buf[2];
	int ret;

	ret = mcp2515_cmd_read_reg(dev, MCP2515_ADDR_EFLG, &eflg, sizeof(eflg));
   1f9ca:	2301      	movs	r3, #1
   1f9cc:	1dfa      	adds	r2, r7, #7
   1f9ce:	212d      	movs	r1, #45	; 0x2d
   1f9d0:	f00b f809 	bl	2a9e6 <mcp2515_cmd_read_reg>
	if (ret < 0) {
   1f9d4:	2800      	cmp	r0, #0
   1f9d6:	db1a      	blt.n	1fa0e <mcp2515_get_state+0x56>
		LOG_ERR("Failed to read error register [%d]", ret);
		return -EIO;
	}

	if (state != NULL) {
   1f9d8:	b12d      	cbz	r5, 1f9e6 <mcp2515_get_state+0x2e>
		if (!dev_data->started) {
   1f9da:	f898 317a 	ldrb.w	r3, [r8, #378]	; 0x17a
   1f9de:	2b00      	cmp	r3, #0
   1f9e0:	d153      	bne.n	1fa8a <mcp2515_get_state+0xd2>
			*state = CAN_STATE_STOPPED;
   1f9e2:	2304      	movs	r3, #4
   1f9e4:	702b      	strb	r3, [r5, #0]
		} else {
			*state = CAN_STATE_ERROR_ACTIVE;
		}
	}

	if (err_cnt != NULL) {
   1f9e6:	2c00      	cmp	r4, #0
   1f9e8:	f000 80a3 	beq.w	1fb32 <mcp2515_get_state+0x17a>
		ret = mcp2515_cmd_read_reg(dev, MCP2515_ADDR_TEC, err_cnt_buf,
   1f9ec:	2302      	movs	r3, #2
   1f9ee:	1d3a      	adds	r2, r7, #4
   1f9f0:	211c      	movs	r1, #28
   1f9f2:	4630      	mov	r0, r6
   1f9f4:	f00a fff7 	bl	2a9e6 <mcp2515_cmd_read_reg>
					   sizeof(err_cnt_buf));
		if (ret < 0) {
   1f9f8:	2800      	cmp	r0, #0
   1f9fa:	db5c      	blt.n	1fab6 <mcp2515_get_state+0xfe>
			LOG_ERR("Failed to read error counters [%d]", ret);
			return -EIO;
		}

		err_cnt->tx_err_cnt = err_cnt_buf[0];
   1f9fc:	793b      	ldrb	r3, [r7, #4]
   1f9fe:	7023      	strb	r3, [r4, #0]
		err_cnt->rx_err_cnt = err_cnt_buf[1];
   1fa00:	797b      	ldrb	r3, [r7, #5]
   1fa02:	7063      	strb	r3, [r4, #1]
	}

	return 0;
   1fa04:	2000      	movs	r0, #0
}
   1fa06:	3708      	adds	r7, #8
   1fa08:	46bd      	mov	sp, r7
   1fa0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Failed to read error register [%d]", ret);
   1fa0e:	466d      	mov	r5, sp
   1fa10:	b088      	sub	sp, #32
   1fa12:	466b      	mov	r3, sp
   1fa14:	f113 0210 	adds.w	r2, r3, #16
   1fa18:	d031      	beq.n	1fa7e <mcp2515_get_state+0xc6>
   1fa1a:	210c      	movs	r1, #12
   1fa1c:	b13a      	cbz	r2, 1fa2e <mcp2515_get_state+0x76>
   1fa1e:	460c      	mov	r4, r1
   1fa20:	2904      	cmp	r1, #4
   1fa22:	dd01      	ble.n	1fa28 <mcp2515_get_state+0x70>
   1fa24:	4e44      	ldr	r6, [pc, #272]	; (1fb38 <mcp2515_get_state+0x180>)
   1fa26:	615e      	str	r6, [r3, #20]
   1fa28:	2c08      	cmp	r4, #8
   1fa2a:	dd00      	ble.n	1fa2e <mcp2515_get_state+0x76>
   1fa2c:	6198      	str	r0, [r3, #24]
   1fa2e:	290b      	cmp	r1, #11
   1fa30:	dd28      	ble.n	1fa84 <mcp2515_get_state+0xcc>
   1fa32:	240c      	movs	r4, #12
   1fa34:	b13a      	cbz	r2, 1fa46 <mcp2515_get_state+0x8e>
   1fa36:	2103      	movs	r1, #3
   1fa38:	7039      	strb	r1, [r7, #0]
   1fa3a:	2100      	movs	r1, #0
   1fa3c:	7079      	strb	r1, [r7, #1]
   1fa3e:	70b9      	strb	r1, [r7, #2]
   1fa40:	70f9      	strb	r1, [r7, #3]
   1fa42:	6838      	ldr	r0, [r7, #0]
   1fa44:	6118      	str	r0, [r3, #16]
   1fa46:	2100      	movs	r1, #0
   1fa48:	f36f 0100 	bfc	r1, #0, #1
   1fa4c:	f36f 0141 	bfc	r1, #1, #1
   1fa50:	f36f 0182 	bfc	r1, #2, #1
   1fa54:	f36f 01c5 	bfc	r1, #3, #3
   1fa58:	2301      	movs	r3, #1
   1fa5a:	f363 1188 	bfi	r1, r3, #6, #3
   1fa5e:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1fa62:	f363 2152 	bfi	r1, r3, #9, #10
   1fa66:	f36f 41de 	bfc	r1, #19, #12
   1fa6a:	f36f 71df 	bfc	r1, #31, #1
   1fa6e:	2300      	movs	r3, #0
   1fa70:	4832      	ldr	r0, [pc, #200]	; (1fb3c <mcp2515_get_state+0x184>)
   1fa72:	f007 f8f0 	bl	26c56 <z_impl_z_log_msg_static_create>
   1fa76:	46ad      	mov	sp, r5
		return -EIO;
   1fa78:	f06f 0004 	mvn.w	r0, #4
   1fa7c:	e7c3      	b.n	1fa06 <mcp2515_get_state+0x4e>
		LOG_ERR("Failed to read error register [%d]", ret);
   1fa7e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1fa82:	e7cb      	b.n	1fa1c <mcp2515_get_state+0x64>
   1fa84:	f06f 041b 	mvn.w	r4, #27
   1fa88:	e7d4      	b.n	1fa34 <mcp2515_get_state+0x7c>
		} else if (eflg & MCP2515_EFLG_TXBO) {
   1fa8a:	79fb      	ldrb	r3, [r7, #7]
   1fa8c:	f013 0f20 	tst.w	r3, #32
   1fa90:	d002      	beq.n	1fa98 <mcp2515_get_state+0xe0>
			*state = CAN_STATE_BUS_OFF;
   1fa92:	2303      	movs	r3, #3
   1fa94:	702b      	strb	r3, [r5, #0]
   1fa96:	e7a6      	b.n	1f9e6 <mcp2515_get_state+0x2e>
		} else if ((eflg & MCP2515_EFLG_RXEP) || (eflg & MCP2515_EFLG_TXEP)) {
   1fa98:	f013 0f18 	tst.w	r3, #24
   1fa9c:	d002      	beq.n	1faa4 <mcp2515_get_state+0xec>
			*state = CAN_STATE_ERROR_PASSIVE;
   1fa9e:	2302      	movs	r3, #2
   1faa0:	702b      	strb	r3, [r5, #0]
   1faa2:	e7a0      	b.n	1f9e6 <mcp2515_get_state+0x2e>
		} else if (eflg & MCP2515_EFLG_EWARN) {
   1faa4:	f013 0f01 	tst.w	r3, #1
   1faa8:	d002      	beq.n	1fab0 <mcp2515_get_state+0xf8>
			*state = CAN_STATE_ERROR_WARNING;
   1faaa:	2301      	movs	r3, #1
   1faac:	702b      	strb	r3, [r5, #0]
   1faae:	e79a      	b.n	1f9e6 <mcp2515_get_state+0x2e>
			*state = CAN_STATE_ERROR_ACTIVE;
   1fab0:	2300      	movs	r3, #0
   1fab2:	702b      	strb	r3, [r5, #0]
   1fab4:	e797      	b.n	1f9e6 <mcp2515_get_state+0x2e>
			LOG_ERR("Failed to read error counters [%d]", ret);
   1fab6:	466d      	mov	r5, sp
   1fab8:	b088      	sub	sp, #32
   1faba:	466b      	mov	r3, sp
   1fabc:	f113 0210 	adds.w	r2, r3, #16
   1fac0:	d031      	beq.n	1fb26 <mcp2515_get_state+0x16e>
   1fac2:	210c      	movs	r1, #12
   1fac4:	b13a      	cbz	r2, 1fad6 <mcp2515_get_state+0x11e>
   1fac6:	460c      	mov	r4, r1
   1fac8:	2904      	cmp	r1, #4
   1faca:	dd01      	ble.n	1fad0 <mcp2515_get_state+0x118>
   1facc:	4e1c      	ldr	r6, [pc, #112]	; (1fb40 <mcp2515_get_state+0x188>)
   1face:	615e      	str	r6, [r3, #20]
   1fad0:	2c08      	cmp	r4, #8
   1fad2:	dd00      	ble.n	1fad6 <mcp2515_get_state+0x11e>
   1fad4:	6198      	str	r0, [r3, #24]
   1fad6:	290b      	cmp	r1, #11
   1fad8:	dd28      	ble.n	1fb2c <mcp2515_get_state+0x174>
   1fada:	240c      	movs	r4, #12
   1fadc:	b13a      	cbz	r2, 1faee <mcp2515_get_state+0x136>
   1fade:	2103      	movs	r1, #3
   1fae0:	7039      	strb	r1, [r7, #0]
   1fae2:	2100      	movs	r1, #0
   1fae4:	7079      	strb	r1, [r7, #1]
   1fae6:	70b9      	strb	r1, [r7, #2]
   1fae8:	70f9      	strb	r1, [r7, #3]
   1faea:	6838      	ldr	r0, [r7, #0]
   1faec:	6118      	str	r0, [r3, #16]
   1faee:	2100      	movs	r1, #0
   1faf0:	f36f 0100 	bfc	r1, #0, #1
   1faf4:	f36f 0141 	bfc	r1, #1, #1
   1faf8:	f36f 0182 	bfc	r1, #2, #1
   1fafc:	f36f 01c5 	bfc	r1, #3, #3
   1fb00:	2301      	movs	r3, #1
   1fb02:	f363 1188 	bfi	r1, r3, #6, #3
   1fb06:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1fb0a:	f363 2152 	bfi	r1, r3, #9, #10
   1fb0e:	f36f 41de 	bfc	r1, #19, #12
   1fb12:	f36f 71df 	bfc	r1, #31, #1
   1fb16:	2300      	movs	r3, #0
   1fb18:	4808      	ldr	r0, [pc, #32]	; (1fb3c <mcp2515_get_state+0x184>)
   1fb1a:	f007 f89c 	bl	26c56 <z_impl_z_log_msg_static_create>
   1fb1e:	46ad      	mov	sp, r5
			return -EIO;
   1fb20:	f06f 0004 	mvn.w	r0, #4
   1fb24:	e76f      	b.n	1fa06 <mcp2515_get_state+0x4e>
			LOG_ERR("Failed to read error counters [%d]", ret);
   1fb26:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1fb2a:	e7cb      	b.n	1fac4 <mcp2515_get_state+0x10c>
   1fb2c:	f06f 041b 	mvn.w	r4, #27
   1fb30:	e7d4      	b.n	1fadc <mcp2515_get_state+0x124>
	return 0;
   1fb32:	2000      	movs	r0, #0
   1fb34:	e767      	b.n	1fa06 <mcp2515_get_state+0x4e>
   1fb36:	bf00      	nop
   1fb38:	0002f7c4 	.word	0x0002f7c4
   1fb3c:	0002d104 	.word	0x0002d104
   1fb40:	0002f7e8 	.word	0x0002f7e8

0001fb44 <mcp2515_set_mode>:
	struct mcp2515_data *dev_data = dev->data;
   1fb44:	6903      	ldr	r3, [r0, #16]
	if (dev_data->started) {
   1fb46:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
   1fb4a:	2a00      	cmp	r2, #0
   1fb4c:	d158      	bne.n	1fc00 <mcp2515_set_mode+0xbc>
	switch (mode) {
   1fb4e:	2901      	cmp	r1, #1
   1fb50:	d04b      	beq.n	1fbea <mcp2515_set_mode+0xa6>
   1fb52:	2902      	cmp	r1, #2
   1fb54:	d044      	beq.n	1fbe0 <mcp2515_set_mode+0x9c>
   1fb56:	2900      	cmp	r1, #0
   1fb58:	d03e      	beq.n	1fbd8 <mcp2515_set_mode+0x94>
{
   1fb5a:	b5b0      	push	{r4, r5, r7, lr}
   1fb5c:	b082      	sub	sp, #8
   1fb5e:	af00      	add	r7, sp, #0
		LOG_ERR("Unsupported CAN Mode %u", mode);
   1fb60:	466c      	mov	r4, sp
   1fb62:	b088      	sub	sp, #32
   1fb64:	466b      	mov	r3, sp
   1fb66:	f113 0210 	adds.w	r2, r3, #16
   1fb6a:	d043      	beq.n	1fbf4 <mcp2515_set_mode+0xb0>
   1fb6c:	200c      	movs	r0, #12
   1fb6e:	b142      	cbz	r2, 1fb82 <mcp2515_set_mode+0x3e>
   1fb70:	4684      	mov	ip, r0
   1fb72:	2804      	cmp	r0, #4
   1fb74:	dd01      	ble.n	1fb7a <mcp2515_set_mode+0x36>
   1fb76:	4d24      	ldr	r5, [pc, #144]	; (1fc08 <mcp2515_set_mode+0xc4>)
   1fb78:	615d      	str	r5, [r3, #20]
   1fb7a:	f1bc 0f08 	cmp.w	ip, #8
   1fb7e:	dd00      	ble.n	1fb82 <mcp2515_set_mode+0x3e>
   1fb80:	6199      	str	r1, [r3, #24]
   1fb82:	280b      	cmp	r0, #11
   1fb84:	dd39      	ble.n	1fbfa <mcp2515_set_mode+0xb6>
   1fb86:	f04f 0c0c 	mov.w	ip, #12
   1fb8a:	b13a      	cbz	r2, 1fb9c <mcp2515_set_mode+0x58>
   1fb8c:	2103      	movs	r1, #3
   1fb8e:	7139      	strb	r1, [r7, #4]
   1fb90:	2100      	movs	r1, #0
   1fb92:	7179      	strb	r1, [r7, #5]
   1fb94:	71b9      	strb	r1, [r7, #6]
   1fb96:	71f9      	strb	r1, [r7, #7]
   1fb98:	6878      	ldr	r0, [r7, #4]
   1fb9a:	6118      	str	r0, [r3, #16]
   1fb9c:	2100      	movs	r1, #0
   1fb9e:	f36f 0100 	bfc	r1, #0, #1
   1fba2:	f36f 0141 	bfc	r1, #1, #1
   1fba6:	f36f 0182 	bfc	r1, #2, #1
   1fbaa:	f36f 01c5 	bfc	r1, #3, #3
   1fbae:	2301      	movs	r3, #1
   1fbb0:	f363 1188 	bfi	r1, r3, #6, #3
   1fbb4:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   1fbb8:	f363 2152 	bfi	r1, r3, #9, #10
   1fbbc:	f36f 41de 	bfc	r1, #19, #12
   1fbc0:	f36f 71df 	bfc	r1, #31, #1
   1fbc4:	2300      	movs	r3, #0
   1fbc6:	4811      	ldr	r0, [pc, #68]	; (1fc0c <mcp2515_set_mode+0xc8>)
   1fbc8:	f007 f845 	bl	26c56 <z_impl_z_log_msg_static_create>
   1fbcc:	46a5      	mov	sp, r4
		return -ENOTSUP;
   1fbce:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1fbd2:	3708      	adds	r7, #8
   1fbd4:	46bd      	mov	sp, r7
   1fbd6:	bdb0      	pop	{r4, r5, r7, pc}
		dev_data->mcp2515_mode = MCP2515_MODE_NORMAL;
   1fbd8:	2000      	movs	r0, #0
   1fbda:	f883 0179 	strb.w	r0, [r3, #377]	; 0x179
		break;
   1fbde:	4770      	bx	lr
		dev_data->mcp2515_mode = MCP2515_MODE_SILENT;
   1fbe0:	2203      	movs	r2, #3
   1fbe2:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	return 0;
   1fbe6:	2000      	movs	r0, #0
		break;
   1fbe8:	4770      	bx	lr
		dev_data->mcp2515_mode = MCP2515_MODE_LOOPBACK;
   1fbea:	2202      	movs	r2, #2
   1fbec:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	return 0;
   1fbf0:	2000      	movs	r0, #0
		break;
   1fbf2:	4770      	bx	lr
		LOG_ERR("Unsupported CAN Mode %u", mode);
   1fbf4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1fbf8:	e7b9      	b.n	1fb6e <mcp2515_set_mode+0x2a>
   1fbfa:	f06f 0c1b 	mvn.w	ip, #27
   1fbfe:	e7c4      	b.n	1fb8a <mcp2515_set_mode+0x46>
		return -EBUSY;
   1fc00:	f06f 000f 	mvn.w	r0, #15
}
   1fc04:	4770      	bx	lr
   1fc06:	bf00      	nop
   1fc08:	0002f80c 	.word	0x0002f80c
   1fc0c:	0002d104 	.word	0x0002d104

0001fc10 <mcp2515_handle_errors>:

static void mcp2515_handle_errors(const struct device *dev)
{
   1fc10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fc14:	b082      	sub	sp, #8
   1fc16:	af00      	add	r7, sp, #0
   1fc18:	4604      	mov	r4, r0
	struct mcp2515_data *dev_data = dev->data;
   1fc1a:	6906      	ldr	r6, [r0, #16]
	can_state_change_callback_t state_change_cb = dev_data->state_change_cb;
   1fc1c:	f8d6 515c 	ldr.w	r5, [r6, #348]	; 0x15c
	void *state_change_cb_data = dev_data->state_change_cb_data;
   1fc20:	f8d6 8160 	ldr.w	r8, [r6, #352]	; 0x160
	enum can_state state;
	struct can_bus_err_cnt err_cnt;
	int err;

	err = mcp2515_get_state(dev, &state, state_change_cb ? &err_cnt : NULL);
   1fc24:	b1a5      	cbz	r5, 1fc50 <mcp2515_handle_errors+0x40>
   1fc26:	1d3a      	adds	r2, r7, #4
   1fc28:	1df9      	adds	r1, r7, #7
   1fc2a:	4620      	mov	r0, r4
   1fc2c:	f7ff fec4 	bl	1f9b8 <mcp2515_get_state>
	if (err != 0) {
   1fc30:	4684      	mov	ip, r0
   1fc32:	b978      	cbnz	r0, 1fc54 <mcp2515_handle_errors+0x44>
		LOG_ERR("Failed to get CAN controller state [%d]", err);
		return;
	}

	if (state_change_cb && dev_data->old_state != state) {
   1fc34:	2d00      	cmp	r5, #0
   1fc36:	d043      	beq.n	1fcc0 <mcp2515_handle_errors+0xb0>
   1fc38:	f896 3178 	ldrb.w	r3, [r6, #376]	; 0x178
   1fc3c:	79f9      	ldrb	r1, [r7, #7]
   1fc3e:	428b      	cmp	r3, r1
   1fc40:	d03e      	beq.n	1fcc0 <mcp2515_handle_errors+0xb0>
		dev_data->old_state = state;
   1fc42:	f886 1178 	strb.w	r1, [r6, #376]	; 0x178
		state_change_cb(dev, state, err_cnt, state_change_cb_data);
   1fc46:	4643      	mov	r3, r8
   1fc48:	687a      	ldr	r2, [r7, #4]
   1fc4a:	4620      	mov	r0, r4
   1fc4c:	47a8      	blx	r5
   1fc4e:	e037      	b.n	1fcc0 <mcp2515_handle_errors+0xb0>
	err = mcp2515_get_state(dev, &state, state_change_cb ? &err_cnt : NULL);
   1fc50:	2200      	movs	r2, #0
   1fc52:	e7e9      	b.n	1fc28 <mcp2515_handle_errors+0x18>
		LOG_ERR("Failed to get CAN controller state [%d]", err);
   1fc54:	466d      	mov	r5, sp
   1fc56:	b088      	sub	sp, #32
   1fc58:	466b      	mov	r3, sp
   1fc5a:	f113 0210 	adds.w	r2, r3, #16
   1fc5e:	d033      	beq.n	1fcc8 <mcp2515_handle_errors+0xb8>
   1fc60:	210c      	movs	r1, #12
   1fc62:	b142      	cbz	r2, 1fc76 <mcp2515_handle_errors+0x66>
   1fc64:	4608      	mov	r0, r1
   1fc66:	2904      	cmp	r1, #4
   1fc68:	dd01      	ble.n	1fc6e <mcp2515_handle_errors+0x5e>
   1fc6a:	4c1a      	ldr	r4, [pc, #104]	; (1fcd4 <mcp2515_handle_errors+0xc4>)
   1fc6c:	615c      	str	r4, [r3, #20]
   1fc6e:	2808      	cmp	r0, #8
   1fc70:	dd01      	ble.n	1fc76 <mcp2515_handle_errors+0x66>
   1fc72:	f8c3 c018 	str.w	ip, [r3, #24]
   1fc76:	290b      	cmp	r1, #11
   1fc78:	dd29      	ble.n	1fcce <mcp2515_handle_errors+0xbe>
   1fc7a:	240c      	movs	r4, #12
   1fc7c:	b13a      	cbz	r2, 1fc8e <mcp2515_handle_errors+0x7e>
   1fc7e:	2103      	movs	r1, #3
   1fc80:	7039      	strb	r1, [r7, #0]
   1fc82:	2100      	movs	r1, #0
   1fc84:	7079      	strb	r1, [r7, #1]
   1fc86:	70b9      	strb	r1, [r7, #2]
   1fc88:	70f9      	strb	r1, [r7, #3]
   1fc8a:	6838      	ldr	r0, [r7, #0]
   1fc8c:	6118      	str	r0, [r3, #16]
   1fc8e:	2100      	movs	r1, #0
   1fc90:	f36f 0100 	bfc	r1, #0, #1
   1fc94:	f36f 0141 	bfc	r1, #1, #1
   1fc98:	f36f 0182 	bfc	r1, #2, #1
   1fc9c:	f36f 01c5 	bfc	r1, #3, #3
   1fca0:	2301      	movs	r3, #1
   1fca2:	f363 1188 	bfi	r1, r3, #6, #3
   1fca6:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1fcaa:	f364 2152 	bfi	r1, r4, #9, #10
   1fcae:	f36f 41de 	bfc	r1, #19, #12
   1fcb2:	f36f 71df 	bfc	r1, #31, #1
   1fcb6:	2300      	movs	r3, #0
   1fcb8:	4807      	ldr	r0, [pc, #28]	; (1fcd8 <mcp2515_handle_errors+0xc8>)
   1fcba:	f006 ffcc 	bl	26c56 <z_impl_z_log_msg_static_create>
   1fcbe:	46ad      	mov	sp, r5
	}
}
   1fcc0:	3708      	adds	r7, #8
   1fcc2:	46bd      	mov	sp, r7
   1fcc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Failed to get CAN controller state [%d]", err);
   1fcc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1fccc:	e7c9      	b.n	1fc62 <mcp2515_handle_errors+0x52>
   1fcce:	f06f 041b 	mvn.w	r4, #27
   1fcd2:	e7d3      	b.n	1fc7c <mcp2515_handle_errors+0x6c>
   1fcd4:	0002f824 	.word	0x0002f824
   1fcd8:	0002d104 	.word	0x0002d104

0001fcdc <mcp2515_set_timing>:
{
   1fcdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fce0:	b082      	sub	sp, #8
   1fce2:	af00      	add	r7, sp, #0
	struct mcp2515_data *dev_data = dev->data;
   1fce4:	6906      	ldr	r6, [r0, #16]
	if (!timing) {
   1fce6:	2900      	cmp	r1, #0
   1fce8:	f000 8108 	beq.w	1fefc <mcp2515_set_timing+0x220>
   1fcec:	4604      	mov	r4, r0
   1fcee:	460a      	mov	r2, r1
	if (dev_data->started) {
   1fcf0:	f896 317a 	ldrb.w	r3, [r6, #378]	; 0x17a
   1fcf4:	2b00      	cmp	r3, #0
   1fcf6:	f040 8104 	bne.w	1ff02 <mcp2515_set_timing+0x226>
	uint8_t brp = timing->prescaler - 1;
   1fcfa:	7a0b      	ldrb	r3, [r1, #8]
   1fcfc:	3b01      	subs	r3, #1
   1fcfe:	b2db      	uxtb	r3, r3
	if (timing->sjw != CAN_SJW_NO_CHANGE) {
   1fd00:	8809      	ldrh	r1, [r1, #0]
   1fd02:	b121      	cbz	r1, 1fd0e <mcp2515_set_timing+0x32>
		dev_data->sjw = (timing->sjw - 1) << 6;
   1fd04:	3901      	subs	r1, #1
   1fd06:	b2c9      	uxtb	r1, r1
   1fd08:	0189      	lsls	r1, r1, #6
   1fd0a:	f886 117b 	strb.w	r1, [r6, #379]	; 0x17b
	uint8_t cnf1 = dev_data->sjw | brp;
   1fd0e:	f896 517b 	ldrb.w	r5, [r6, #379]	; 0x17b
   1fd12:	431d      	orrs	r5, r3
	const uint8_t phseg1 = (timing->phase_seg1 - 1) << 3;
   1fd14:	8893      	ldrh	r3, [r2, #4]
   1fd16:	3b01      	subs	r3, #1
   1fd18:	b2db      	uxtb	r3, r3
   1fd1a:	00db      	lsls	r3, r3, #3
   1fd1c:	b2db      	uxtb	r3, r3
	const uint8_t prseg = (timing->prop_seg - 1);
   1fd1e:	7891      	ldrb	r1, [r2, #2]
   1fd20:	3901      	subs	r1, #1
   1fd22:	b2c9      	uxtb	r1, r1
	const uint8_t cnf2 = btlmode | sam | phseg1 | prseg;
   1fd24:	430b      	orrs	r3, r1
   1fd26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	const uint8_t phseg2 = (timing->phase_seg2 - 1);
   1fd2a:	7992      	ldrb	r2, [r2, #6]
   1fd2c:	3a01      	subs	r2, #1
	config_buf[0] = cnf3;
   1fd2e:	713a      	strb	r2, [r7, #4]
	config_buf[1] = cnf2;
   1fd30:	717b      	strb	r3, [r7, #5]
	config_buf[2] = cnf1;
   1fd32:	71bd      	strb	r5, [r7, #6]
	config_buf[3] = caninte;
   1fd34:	233f      	movs	r3, #63	; 0x3f
   1fd36:	71fb      	strb	r3, [r7, #7]
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   1fd38:	f506 76b2 	add.w	r6, r6, #356	; 0x164
	return z_impl_k_mutex_lock(mutex, timeout);
   1fd3c:	f04f 32ff 	mov.w	r2, #4294967295
   1fd40:	f04f 33ff 	mov.w	r3, #4294967295
   1fd44:	4630      	mov	r0, r6
   1fd46:	f004 f867 	bl	23e18 <z_impl_k_mutex_lock>
	ret = mcp2515_cmd_write_reg(dev, MCP2515_ADDR_CNF3, config_buf,
   1fd4a:	2304      	movs	r3, #4
   1fd4c:	18fa      	adds	r2, r7, r3
   1fd4e:	2128      	movs	r1, #40	; 0x28
   1fd50:	4620      	mov	r0, r4
   1fd52:	f00a fe08 	bl	2a966 <mcp2515_cmd_write_reg>
	if (ret < 0) {
   1fd56:	1e05      	subs	r5, r0, #0
   1fd58:	db4b      	blt.n	1fdf2 <mcp2515_set_timing+0x116>
	ret = mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_RXB0CTRL, rx0_ctrl,
   1fd5a:	2364      	movs	r3, #100	; 0x64
   1fd5c:	461a      	mov	r2, r3
   1fd5e:	2160      	movs	r1, #96	; 0x60
   1fd60:	4620      	mov	r0, r4
   1fd62:	f00a fde5 	bl	2a930 <mcp2515_cmd_bit_modify>
	if (ret < 0) {
   1fd66:	1e05      	subs	r5, r0, #0
   1fd68:	f2c0 8086 	blt.w	1fe78 <mcp2515_set_timing+0x19c>
	ret = mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_RXB1CTRL, rx1_ctrl,
   1fd6c:	2360      	movs	r3, #96	; 0x60
   1fd6e:	461a      	mov	r2, r3
   1fd70:	2170      	movs	r1, #112	; 0x70
   1fd72:	4620      	mov	r0, r4
   1fd74:	f00a fddc 	bl	2a930 <mcp2515_cmd_bit_modify>
	if (ret < 0) {
   1fd78:	1e05      	subs	r5, r0, #0
   1fd7a:	da6f      	bge.n	1fe5c <mcp2515_set_timing+0x180>
		LOG_ERR("Failed to write RXB1CTRL [%d]", ret);
   1fd7c:	466c      	mov	r4, sp
   1fd7e:	b088      	sub	sp, #32
   1fd80:	466b      	mov	r3, sp
   1fd82:	f113 0210 	adds.w	r2, r3, #16
   1fd86:	f000 80b3 	beq.w	1fef0 <mcp2515_set_timing+0x214>
   1fd8a:	210c      	movs	r1, #12
   1fd8c:	b14a      	cbz	r2, 1fda2 <mcp2515_set_timing+0xc6>
   1fd8e:	4608      	mov	r0, r1
   1fd90:	2904      	cmp	r1, #4
   1fd92:	dd03      	ble.n	1fd9c <mcp2515_set_timing+0xc0>
   1fd94:	f8df c170 	ldr.w	ip, [pc, #368]	; 1ff08 <mcp2515_set_timing+0x22c>
   1fd98:	f8c3 c014 	str.w	ip, [r3, #20]
   1fd9c:	2808      	cmp	r0, #8
   1fd9e:	dd00      	ble.n	1fda2 <mcp2515_set_timing+0xc6>
   1fda0:	619d      	str	r5, [r3, #24]
   1fda2:	290b      	cmp	r1, #11
   1fda4:	f340 80a7 	ble.w	1fef6 <mcp2515_set_timing+0x21a>
   1fda8:	f04f 0c0c 	mov.w	ip, #12
   1fdac:	b13a      	cbz	r2, 1fdbe <mcp2515_set_timing+0xe2>
   1fdae:	2103      	movs	r1, #3
   1fdb0:	7039      	strb	r1, [r7, #0]
   1fdb2:	2100      	movs	r1, #0
   1fdb4:	7079      	strb	r1, [r7, #1]
   1fdb6:	70b9      	strb	r1, [r7, #2]
   1fdb8:	70f9      	strb	r1, [r7, #3]
   1fdba:	6838      	ldr	r0, [r7, #0]
   1fdbc:	6118      	str	r0, [r3, #16]
   1fdbe:	2100      	movs	r1, #0
   1fdc0:	f36f 0100 	bfc	r1, #0, #1
   1fdc4:	f36f 0141 	bfc	r1, #1, #1
   1fdc8:	f36f 0182 	bfc	r1, #2, #1
   1fdcc:	f36f 01c5 	bfc	r1, #3, #3
   1fdd0:	2301      	movs	r3, #1
   1fdd2:	f363 1188 	bfi	r1, r3, #6, #3
   1fdd6:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   1fdda:	f363 2152 	bfi	r1, r3, #9, #10
   1fdde:	f36f 41de 	bfc	r1, #19, #12
   1fde2:	f36f 71df 	bfc	r1, #31, #1
   1fde6:	2300      	movs	r3, #0
   1fde8:	4848      	ldr	r0, [pc, #288]	; (1ff0c <mcp2515_set_timing+0x230>)
   1fdea:	f006 ff34 	bl	26c56 <z_impl_z_log_msg_static_create>
   1fdee:	46a5      	mov	sp, r4
		goto done;
   1fdf0:	e034      	b.n	1fe5c <mcp2515_set_timing+0x180>
		LOG_ERR("Failed to write the configuration [%d]", ret);
   1fdf2:	46e8      	mov	r8, sp
   1fdf4:	b088      	sub	sp, #32
   1fdf6:	466b      	mov	r3, sp
   1fdf8:	f113 0210 	adds.w	r2, r3, #16
   1fdfc:	d036      	beq.n	1fe6c <mcp2515_set_timing+0x190>
   1fdfe:	210c      	movs	r1, #12
   1fe00:	b13a      	cbz	r2, 1fe12 <mcp2515_set_timing+0x136>
   1fe02:	4608      	mov	r0, r1
   1fe04:	2904      	cmp	r1, #4
   1fe06:	dd01      	ble.n	1fe0c <mcp2515_set_timing+0x130>
   1fe08:	4c41      	ldr	r4, [pc, #260]	; (1ff10 <mcp2515_set_timing+0x234>)
   1fe0a:	615c      	str	r4, [r3, #20]
   1fe0c:	2808      	cmp	r0, #8
   1fe0e:	dd00      	ble.n	1fe12 <mcp2515_set_timing+0x136>
   1fe10:	619d      	str	r5, [r3, #24]
   1fe12:	290b      	cmp	r1, #11
   1fe14:	dd2d      	ble.n	1fe72 <mcp2515_set_timing+0x196>
   1fe16:	240c      	movs	r4, #12
   1fe18:	b13a      	cbz	r2, 1fe2a <mcp2515_set_timing+0x14e>
   1fe1a:	2103      	movs	r1, #3
   1fe1c:	7039      	strb	r1, [r7, #0]
   1fe1e:	2100      	movs	r1, #0
   1fe20:	7079      	strb	r1, [r7, #1]
   1fe22:	70b9      	strb	r1, [r7, #2]
   1fe24:	70f9      	strb	r1, [r7, #3]
   1fe26:	6838      	ldr	r0, [r7, #0]
   1fe28:	6118      	str	r0, [r3, #16]
   1fe2a:	2100      	movs	r1, #0
   1fe2c:	f36f 0100 	bfc	r1, #0, #1
   1fe30:	f36f 0141 	bfc	r1, #1, #1
   1fe34:	f36f 0182 	bfc	r1, #2, #1
   1fe38:	f36f 01c5 	bfc	r1, #3, #3
   1fe3c:	2301      	movs	r3, #1
   1fe3e:	f363 1188 	bfi	r1, r3, #6, #3
   1fe42:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1fe46:	f364 2152 	bfi	r1, r4, #9, #10
   1fe4a:	f36f 41de 	bfc	r1, #19, #12
   1fe4e:	f36f 71df 	bfc	r1, #31, #1
   1fe52:	2300      	movs	r3, #0
   1fe54:	482d      	ldr	r0, [pc, #180]	; (1ff0c <mcp2515_set_timing+0x230>)
   1fe56:	f006 fefe 	bl	26c56 <z_impl_z_log_msg_static_create>
   1fe5a:	46c5      	mov	sp, r8
	return z_impl_k_mutex_unlock(mutex);
   1fe5c:	4630      	mov	r0, r6
   1fe5e:	f004 f85f 	bl	23f20 <z_impl_k_mutex_unlock>
}
   1fe62:	4628      	mov	r0, r5
   1fe64:	3708      	adds	r7, #8
   1fe66:	46bd      	mov	sp, r7
   1fe68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Failed to write the configuration [%d]", ret);
   1fe6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1fe70:	e7c6      	b.n	1fe00 <mcp2515_set_timing+0x124>
   1fe72:	f06f 041b 	mvn.w	r4, #27
   1fe76:	e7cf      	b.n	1fe18 <mcp2515_set_timing+0x13c>
		LOG_ERR("Failed to write RXB0CTRL [%d]", ret);
   1fe78:	46e8      	mov	r8, sp
   1fe7a:	b088      	sub	sp, #32
   1fe7c:	466b      	mov	r3, sp
   1fe7e:	f113 0210 	adds.w	r2, r3, #16
   1fe82:	d02f      	beq.n	1fee4 <mcp2515_set_timing+0x208>
   1fe84:	210c      	movs	r1, #12
   1fe86:	b13a      	cbz	r2, 1fe98 <mcp2515_set_timing+0x1bc>
   1fe88:	4608      	mov	r0, r1
   1fe8a:	2904      	cmp	r1, #4
   1fe8c:	dd01      	ble.n	1fe92 <mcp2515_set_timing+0x1b6>
   1fe8e:	4c21      	ldr	r4, [pc, #132]	; (1ff14 <mcp2515_set_timing+0x238>)
   1fe90:	615c      	str	r4, [r3, #20]
   1fe92:	2808      	cmp	r0, #8
   1fe94:	dd00      	ble.n	1fe98 <mcp2515_set_timing+0x1bc>
   1fe96:	619d      	str	r5, [r3, #24]
   1fe98:	290b      	cmp	r1, #11
   1fe9a:	dd26      	ble.n	1feea <mcp2515_set_timing+0x20e>
   1fe9c:	240c      	movs	r4, #12
   1fe9e:	b13a      	cbz	r2, 1feb0 <mcp2515_set_timing+0x1d4>
   1fea0:	2103      	movs	r1, #3
   1fea2:	7039      	strb	r1, [r7, #0]
   1fea4:	2100      	movs	r1, #0
   1fea6:	7079      	strb	r1, [r7, #1]
   1fea8:	70b9      	strb	r1, [r7, #2]
   1feaa:	70f9      	strb	r1, [r7, #3]
   1feac:	6838      	ldr	r0, [r7, #0]
   1feae:	6118      	str	r0, [r3, #16]
   1feb0:	2100      	movs	r1, #0
   1feb2:	f36f 0100 	bfc	r1, #0, #1
   1feb6:	f36f 0141 	bfc	r1, #1, #1
   1feba:	f36f 0182 	bfc	r1, #2, #1
   1febe:	f36f 01c5 	bfc	r1, #3, #3
   1fec2:	2301      	movs	r3, #1
   1fec4:	f363 1188 	bfi	r1, r3, #6, #3
   1fec8:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1fecc:	f364 2152 	bfi	r1, r4, #9, #10
   1fed0:	f36f 41de 	bfc	r1, #19, #12
   1fed4:	f36f 71df 	bfc	r1, #31, #1
   1fed8:	2300      	movs	r3, #0
   1feda:	480c      	ldr	r0, [pc, #48]	; (1ff0c <mcp2515_set_timing+0x230>)
   1fedc:	f006 febb 	bl	26c56 <z_impl_z_log_msg_static_create>
   1fee0:	46c5      	mov	sp, r8
		goto done;
   1fee2:	e7bb      	b.n	1fe5c <mcp2515_set_timing+0x180>
		LOG_ERR("Failed to write RXB0CTRL [%d]", ret);
   1fee4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1fee8:	e7cd      	b.n	1fe86 <mcp2515_set_timing+0x1aa>
   1feea:	f06f 041b 	mvn.w	r4, #27
   1feee:	e7d6      	b.n	1fe9e <mcp2515_set_timing+0x1c2>
		LOG_ERR("Failed to write RXB1CTRL [%d]", ret);
   1fef0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1fef4:	e74a      	b.n	1fd8c <mcp2515_set_timing+0xb0>
   1fef6:	f06f 0c1b 	mvn.w	ip, #27
   1fefa:	e757      	b.n	1fdac <mcp2515_set_timing+0xd0>
		return -EINVAL;
   1fefc:	f06f 0515 	mvn.w	r5, #21
   1ff00:	e7af      	b.n	1fe62 <mcp2515_set_timing+0x186>
		return -EBUSY;
   1ff02:	f06f 050f 	mvn.w	r5, #15
   1ff06:	e7ac      	b.n	1fe62 <mcp2515_set_timing+0x186>
   1ff08:	0002f894 	.word	0x0002f894
   1ff0c:	0002d104 	.word	0x0002d104
   1ff10:	0002f84c 	.word	0x0002f84c
   1ff14:	0002f874 	.word	0x0002f874

0001ff18 <mcp2515_send>:
{
   1ff18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ff1c:	b08c      	sub	sp, #48	; 0x30
   1ff1e:	af00      	add	r7, sp, #0
   1ff20:	460e      	mov	r6, r1
	struct mcp2515_data *dev_data = dev->data;
   1ff22:	6905      	ldr	r5, [r0, #16]
	if (frame->dlc > CAN_MAX_DLC) {
   1ff24:	7909      	ldrb	r1, [r1, #4]
   1ff26:	2908      	cmp	r1, #8
   1ff28:	d847      	bhi.n	1ffba <mcp2515_send+0xa2>
   1ff2a:	4680      	mov	r8, r0
	if ((frame->flags & ~(CAN_FRAME_IDE | CAN_FRAME_RTR)) != 0) {
   1ff2c:	7971      	ldrb	r1, [r6, #5]
   1ff2e:	2903      	cmp	r1, #3
   1ff30:	f200 8088 	bhi.w	20044 <CONFIG_PM_SRAM_SIZE+0x44>
	if (!dev_data->started) {
   1ff34:	f895 117a 	ldrb.w	r1, [r5, #378]	; 0x17a
   1ff38:	2900      	cmp	r1, #0
   1ff3a:	f000 80f8 	beq.w	2012e <CONFIG_PM_SRAM_SIZE+0x12e>
	if (k_sem_take(&dev_data->tx_sem, timeout) != 0) {
   1ff3e:	f105 00e4 	add.w	r0, r5, #228	; 0xe4
	return z_impl_k_sem_take(sem, timeout);
   1ff42:	f004 f891 	bl	24068 <z_impl_k_sem_take>
   1ff46:	4681      	mov	r9, r0
   1ff48:	2800      	cmp	r0, #0
   1ff4a:	f040 80f3 	bne.w	20134 <CONFIG_PM_SRAM_SIZE+0x134>
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   1ff4e:	f505 7ab2 	add.w	sl, r5, #356	; 0x164
	return z_impl_k_mutex_lock(mutex, timeout);
   1ff52:	f04f 32ff 	mov.w	r2, #4294967295
   1ff56:	f04f 33ff 	mov.w	r3, #4294967295
   1ff5a:	4650      	mov	r0, sl
   1ff5c:	f003 ff5c 	bl	23e18 <z_impl_k_mutex_lock>
	uint8_t tx_idx = 0U;
   1ff60:	2400      	movs	r4, #0
	for (; tx_idx < MCP2515_TX_CNT; tx_idx++) {
   1ff62:	2c00      	cmp	r4, #0
   1ff64:	f000 80af 	beq.w	200c6 <CONFIG_PM_SRAM_SIZE+0xc6>
	return z_impl_k_mutex_unlock(mutex);
   1ff68:	4650      	mov	r0, sl
   1ff6a:	f003 ffd9 	bl	23f20 <z_impl_k_mutex_unlock>
	if (tx_idx == MCP2515_TX_CNT) {
   1ff6e:	2c01      	cmp	r4, #1
   1ff70:	f000 80b9 	beq.w	200e6 <CONFIG_PM_SRAM_SIZE+0xe6>
	dev_data->tx_cb[tx_idx].cb = callback;
   1ff74:	f104 031f 	add.w	r3, r4, #31
   1ff78:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   1ff7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1ff7e:	606b      	str	r3, [r5, #4]
	dev_data->tx_cb[tx_idx].cb_arg = user_data;
   1ff80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1ff82:	60ab      	str	r3, [r5, #8]
	mcp2515_convert_canframe_to_mcp2515frame(frame, tx_frame);
   1ff84:	f107 0108 	add.w	r1, r7, #8
   1ff88:	4630      	mov	r0, r6
   1ff8a:	f00a fd6b 	bl	2aa64 <mcp2515_convert_canframe_to_mcp2515frame>
	abc = 2 * tx_idx;
   1ff8e:	0061      	lsls	r1, r4, #1
	len = sizeof(tx_frame) - CAN_MAX_DLC + frame->dlc;
   1ff90:	7933      	ldrb	r3, [r6, #4]
   1ff92:	3305      	adds	r3, #5
	mcp2515_cmd_load_tx_buffer(dev, abc, tx_frame, len);
   1ff94:	b2db      	uxtb	r3, r3
   1ff96:	f107 0208 	add.w	r2, r7, #8
   1ff9a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   1ff9e:	4640      	mov	r0, r8
   1ffa0:	f00a fcf6 	bl	2a990 <mcp2515_cmd_load_tx_buffer>
	nnn = BIT(tx_idx);
   1ffa4:	2101      	movs	r1, #1
   1ffa6:	40a1      	lsls	r1, r4
	mcp2515_cmd_rts(dev, nnn);
   1ffa8:	b2c9      	uxtb	r1, r1
   1ffaa:	4640      	mov	r0, r8
   1ffac:	f00a fd07 	bl	2a9be <mcp2515_cmd_rts>
}
   1ffb0:	4648      	mov	r0, r9
   1ffb2:	3730      	adds	r7, #48	; 0x30
   1ffb4:	46bd      	mov	sp, r7
   1ffb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LOG_ERR("DLC of %d exceeds maximum (%d)",
   1ffba:	466d      	mov	r5, sp
   1ffbc:	b088      	sub	sp, #32
   1ffbe:	466b      	mov	r3, sp
   1ffc0:	f113 0210 	adds.w	r2, r3, #16
   1ffc4:	d011      	beq.n	1ffea <mcp2515_send+0xd2>
   1ffc6:	2010      	movs	r0, #16
   1ffc8:	b15a      	cbz	r2, 1ffe2 <mcp2515_send+0xca>
   1ffca:	4604      	mov	r4, r0
   1ffcc:	2804      	cmp	r0, #4
   1ffce:	dd01      	ble.n	1ffd4 <mcp2515_send+0xbc>
   1ffd0:	4e5a      	ldr	r6, [pc, #360]	; (2013c <CONFIG_PM_SRAM_SIZE+0x13c>)
   1ffd2:	615e      	str	r6, [r3, #20]
   1ffd4:	2c08      	cmp	r4, #8
   1ffd6:	dd00      	ble.n	1ffda <mcp2515_send+0xc2>
   1ffd8:	6199      	str	r1, [r3, #24]
   1ffda:	2c0c      	cmp	r4, #12
   1ffdc:	dd08      	ble.n	1fff0 <mcp2515_send+0xd8>
   1ffde:	2108      	movs	r1, #8
   1ffe0:	61d9      	str	r1, [r3, #28]
   1ffe2:	280f      	cmp	r0, #15
   1ffe4:	dd2b      	ble.n	2003e <CONFIG_PM_SRAM_SIZE+0x3e>
   1ffe6:	2410      	movs	r4, #16
   1ffe8:	e004      	b.n	1fff4 <mcp2515_send+0xdc>
   1ffea:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1ffee:	e7eb      	b.n	1ffc8 <mcp2515_send+0xb0>
   1fff0:	f06f 041b 	mvn.w	r4, #27
   1fff4:	b13a      	cbz	r2, 20006 <CONFIG_PM_SRAM_SIZE+0x6>
   1fff6:	2104      	movs	r1, #4
   1fff8:	7139      	strb	r1, [r7, #4]
   1fffa:	2100      	movs	r1, #0
   1fffc:	7179      	strb	r1, [r7, #5]
   1fffe:	71b9      	strb	r1, [r7, #6]
   20000:	71f9      	strb	r1, [r7, #7]
   20002:	6878      	ldr	r0, [r7, #4]
   20004:	6118      	str	r0, [r3, #16]
   20006:	2100      	movs	r1, #0
   20008:	f36f 0100 	bfc	r1, #0, #1
   2000c:	f36f 0141 	bfc	r1, #1, #1
   20010:	f36f 0182 	bfc	r1, #2, #1
   20014:	f36f 01c5 	bfc	r1, #3, #3
   20018:	2301      	movs	r3, #1
   2001a:	f363 1188 	bfi	r1, r3, #6, #3
   2001e:	f404 737d 	and.w	r3, r4, #1012	; 0x3f4
   20022:	f363 2152 	bfi	r1, r3, #9, #10
   20026:	f36f 41de 	bfc	r1, #19, #12
   2002a:	f36f 71df 	bfc	r1, #31, #1
   2002e:	2300      	movs	r3, #0
   20030:	4843      	ldr	r0, [pc, #268]	; (20140 <CONFIG_PM_SRAM_SIZE+0x140>)
   20032:	f006 fe10 	bl	26c56 <z_impl_z_log_msg_static_create>
   20036:	46ad      	mov	sp, r5
		return -EINVAL;
   20038:	f06f 0915 	mvn.w	r9, #21
   2003c:	e7b8      	b.n	1ffb0 <mcp2515_send+0x98>
		LOG_ERR("DLC of %d exceeds maximum (%d)",
   2003e:	f06f 041b 	mvn.w	r4, #27
   20042:	e7d7      	b.n	1fff4 <mcp2515_send+0xdc>
		LOG_ERR("unsupported CAN frame flags 0x%02x", frame->flags);
   20044:	466d      	mov	r5, sp
   20046:	b088      	sub	sp, #32
   20048:	466b      	mov	r3, sp
   2004a:	f113 0210 	adds.w	r2, r3, #16
   2004e:	d00d      	beq.n	2006c <CONFIG_PM_SRAM_SIZE+0x6c>
   20050:	200c      	movs	r0, #12
   20052:	b13a      	cbz	r2, 20064 <CONFIG_PM_SRAM_SIZE+0x64>
   20054:	4604      	mov	r4, r0
   20056:	2804      	cmp	r0, #4
   20058:	dd01      	ble.n	2005e <CONFIG_PM_SRAM_SIZE+0x5e>
   2005a:	4e3a      	ldr	r6, [pc, #232]	; (20144 <CONFIG_PM_SRAM_SIZE+0x144>)
   2005c:	615e      	str	r6, [r3, #20]
   2005e:	2c08      	cmp	r4, #8
   20060:	dd07      	ble.n	20072 <CONFIG_PM_SRAM_SIZE+0x72>
   20062:	6199      	str	r1, [r3, #24]
   20064:	280b      	cmp	r0, #11
   20066:	dd2b      	ble.n	200c0 <CONFIG_PM_SRAM_SIZE+0xc0>
   20068:	240c      	movs	r4, #12
   2006a:	e004      	b.n	20076 <CONFIG_PM_SRAM_SIZE+0x76>
   2006c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   20070:	e7ef      	b.n	20052 <CONFIG_PM_SRAM_SIZE+0x52>
   20072:	f06f 041b 	mvn.w	r4, #27
   20076:	b13a      	cbz	r2, 20088 <CONFIG_PM_SRAM_SIZE+0x88>
   20078:	2103      	movs	r1, #3
   2007a:	7139      	strb	r1, [r7, #4]
   2007c:	2100      	movs	r1, #0
   2007e:	7179      	strb	r1, [r7, #5]
   20080:	71b9      	strb	r1, [r7, #6]
   20082:	71f9      	strb	r1, [r7, #7]
   20084:	6878      	ldr	r0, [r7, #4]
   20086:	6118      	str	r0, [r3, #16]
   20088:	2100      	movs	r1, #0
   2008a:	f36f 0100 	bfc	r1, #0, #1
   2008e:	f36f 0141 	bfc	r1, #1, #1
   20092:	f36f 0182 	bfc	r1, #2, #1
   20096:	f36f 01c5 	bfc	r1, #3, #3
   2009a:	2301      	movs	r3, #1
   2009c:	f363 1188 	bfi	r1, r3, #6, #3
   200a0:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   200a4:	f363 2152 	bfi	r1, r3, #9, #10
   200a8:	f36f 41de 	bfc	r1, #19, #12
   200ac:	f36f 71df 	bfc	r1, #31, #1
   200b0:	2300      	movs	r3, #0
   200b2:	4823      	ldr	r0, [pc, #140]	; (20140 <CONFIG_PM_SRAM_SIZE+0x140>)
   200b4:	f006 fdcf 	bl	26c56 <z_impl_z_log_msg_static_create>
   200b8:	46ad      	mov	sp, r5
		return -ENOTSUP;
   200ba:	f06f 0985 	mvn.w	r9, #133	; 0x85
   200be:	e777      	b.n	1ffb0 <mcp2515_send+0x98>
		LOG_ERR("unsupported CAN frame flags 0x%02x", frame->flags);
   200c0:	f06f 041b 	mvn.w	r4, #27
   200c4:	e7d7      	b.n	20076 <CONFIG_PM_SRAM_SIZE+0x76>
		if ((BIT(tx_idx) & dev_data->tx_busy_map) == 0) {
   200c6:	f895 3104 	ldrb.w	r3, [r5, #260]	; 0x104
   200ca:	fa23 f204 	lsr.w	r2, r3, r4
   200ce:	f012 0f01 	tst.w	r2, #1
   200d2:	d002      	beq.n	200da <CONFIG_PM_SRAM_SIZE+0xda>
	for (; tx_idx < MCP2515_TX_CNT; tx_idx++) {
   200d4:	3401      	adds	r4, #1
   200d6:	b2e4      	uxtb	r4, r4
   200d8:	e743      	b.n	1ff62 <mcp2515_send+0x4a>
			dev_data->tx_busy_map |= BIT(tx_idx);
   200da:	2201      	movs	r2, #1
   200dc:	40a2      	lsls	r2, r4
   200de:	4313      	orrs	r3, r2
   200e0:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
			break;
   200e4:	e740      	b.n	1ff68 <mcp2515_send+0x50>
		LOG_WRN("no free tx slot available");
   200e6:	4b18      	ldr	r3, [pc, #96]	; (20148 <CONFIG_PM_SRAM_SIZE+0x148>)
   200e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   200ea:	2202      	movs	r2, #2
   200ec:	713a      	strb	r2, [r7, #4]
   200ee:	2300      	movs	r3, #0
   200f0:	717b      	strb	r3, [r7, #5]
   200f2:	71bb      	strb	r3, [r7, #6]
   200f4:	71fb      	strb	r3, [r7, #7]
   200f6:	6879      	ldr	r1, [r7, #4]
   200f8:	62b9      	str	r1, [r7, #40]	; 0x28
   200fa:	4619      	mov	r1, r3
   200fc:	f363 0100 	bfi	r1, r3, #0, #1
   20100:	f363 0141 	bfi	r1, r3, #1, #1
   20104:	f363 0182 	bfi	r1, r3, #2, #1
   20108:	f363 01c5 	bfi	r1, r3, #3, #3
   2010c:	f362 1188 	bfi	r1, r2, #6, #3
   20110:	2208      	movs	r2, #8
   20112:	f362 2152 	bfi	r1, r2, #9, #10
   20116:	f363 41de 	bfi	r1, r3, #19, #12
   2011a:	f363 71df 	bfi	r1, r3, #31, #1
   2011e:	f107 0228 	add.w	r2, r7, #40	; 0x28
   20122:	4807      	ldr	r0, [pc, #28]	; (20140 <CONFIG_PM_SRAM_SIZE+0x140>)
   20124:	f006 fd97 	bl	26c56 <z_impl_z_log_msg_static_create>
		return -EIO;
   20128:	f06f 0904 	mvn.w	r9, #4
   2012c:	e740      	b.n	1ffb0 <mcp2515_send+0x98>
		return -ENETDOWN;
   2012e:	f06f 0972 	mvn.w	r9, #114	; 0x72
   20132:	e73d      	b.n	1ffb0 <mcp2515_send+0x98>
		return -EAGAIN;
   20134:	f06f 090a 	mvn.w	r9, #10
   20138:	e73a      	b.n	1ffb0 <mcp2515_send+0x98>
   2013a:	bf00      	nop
   2013c:	0002f8b4 	.word	0x0002f8b4
   20140:	0002d104 	.word	0x0002d104
   20144:	0002f8d4 	.word	0x0002f8d4
   20148:	0002f8f8 	.word	0x0002f8f8

0002014c <mcp2515_handle_interrupts>:
	return -ENOTSUP;
}
#endif

static void mcp2515_handle_interrupts(const struct device *dev)
{
   2014c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20150:	b089      	sub	sp, #36	; 0x24
   20152:	af00      	add	r7, sp, #0
   20154:	4605      	mov	r5, r0
	const struct mcp2515_config *dev_cfg = dev->config;
   20156:	f8d0 8004 	ldr.w	r8, [r0, #4]
   2015a:	e073      	b.n	20244 <mcp2515_handle_interrupts+0xf8>
	/* Loop until INT pin is inactive (all interrupt flags handled) */
	while (1) {
		ret = mcp2515_cmd_read_reg(dev, MCP2515_ADDR_CANINTF,
				&canintf, 1);
		if (ret != 0) {
			LOG_ERR("Couldn't read INTF register %d", ret);
   2015c:	46e9      	mov	r9, sp
   2015e:	b088      	sub	sp, #32
   20160:	466b      	mov	r3, sp
   20162:	f113 0210 	adds.w	r2, r3, #16
   20166:	d010      	beq.n	2018a <mcp2515_handle_interrupts+0x3e>
   20168:	200c      	movs	r0, #12
   2016a:	b152      	cbz	r2, 20182 <mcp2515_handle_interrupts+0x36>
   2016c:	4684      	mov	ip, r0
   2016e:	2804      	cmp	r0, #4
   20170:	dd03      	ble.n	2017a <mcp2515_handle_interrupts+0x2e>
   20172:	f8df e178 	ldr.w	lr, [pc, #376]	; 202ec <mcp2515_handle_interrupts+0x1a0>
   20176:	f8c3 e014 	str.w	lr, [r3, #20]
   2017a:	f1bc 0f08 	cmp.w	ip, #8
   2017e:	dd07      	ble.n	20190 <mcp2515_handle_interrupts+0x44>
   20180:	6199      	str	r1, [r3, #24]
   20182:	280b      	cmp	r0, #11
   20184:	dd29      	ble.n	201da <mcp2515_handle_interrupts+0x8e>
   20186:	210c      	movs	r1, #12
   20188:	e004      	b.n	20194 <mcp2515_handle_interrupts+0x48>
   2018a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2018e:	e7ec      	b.n	2016a <mcp2515_handle_interrupts+0x1e>
   20190:	f06f 011b 	mvn.w	r1, #27
   20194:	b13a      	cbz	r2, 201a6 <mcp2515_handle_interrupts+0x5a>
   20196:	2003      	movs	r0, #3
   20198:	7038      	strb	r0, [r7, #0]
   2019a:	2000      	movs	r0, #0
   2019c:	7078      	strb	r0, [r7, #1]
   2019e:	70b8      	strb	r0, [r7, #2]
   201a0:	70f8      	strb	r0, [r7, #3]
   201a2:	6838      	ldr	r0, [r7, #0]
   201a4:	6118      	str	r0, [r3, #16]
   201a6:	f36f 0400 	bfc	r4, #0, #1
   201aa:	f36f 0441 	bfc	r4, #1, #1
   201ae:	f36f 0482 	bfc	r4, #2, #1
   201b2:	f36f 04c5 	bfc	r4, #3, #3
   201b6:	2301      	movs	r3, #1
   201b8:	f363 1488 	bfi	r4, r3, #6, #3
   201bc:	f401 737b 	and.w	r3, r1, #1004	; 0x3ec
   201c0:	f363 2452 	bfi	r4, r3, #9, #10
   201c4:	f36f 44de 	bfc	r4, #19, #12
   201c8:	f36f 74df 	bfc	r4, #31, #1
   201cc:	2300      	movs	r3, #0
   201ce:	4621      	mov	r1, r4
   201d0:	4847      	ldr	r0, [pc, #284]	; (202f0 <mcp2515_handle_interrupts+0x1a4>)
   201d2:	f006 fd40 	bl	26c56 <z_impl_z_log_msg_static_create>
   201d6:	46cd      	mov	sp, r9
			continue;
   201d8:	e034      	b.n	20244 <mcp2515_handle_interrupts+0xf8>
			LOG_ERR("Couldn't read INTF register %d", ret);
   201da:	f06f 011b 	mvn.w	r1, #27
   201de:	e7d9      	b.n	20194 <mcp2515_handle_interrupts+0x48>
			/* No interrupt flags set */
			break;
		}

		if (canintf & MCP2515_CANINTF_RX0IF) {
			mcp2515_rx(dev, 0);
   201e0:	2100      	movs	r1, #0
   201e2:	4628      	mov	r0, r5
   201e4:	f00a fd96 	bl	2ad14 <mcp2515_rx>

			/* RX0IF flag cleared automatically during read */
			canintf &= ~MCP2515_CANINTF_RX0IF;
   201e8:	79fb      	ldrb	r3, [r7, #7]
   201ea:	f023 0301 	bic.w	r3, r3, #1
   201ee:	71fb      	strb	r3, [r7, #7]
   201f0:	e037      	b.n	20262 <mcp2515_handle_interrupts+0x116>
		}

		if (canintf & MCP2515_CANINTF_RX1IF) {
			mcp2515_rx(dev, 1);
   201f2:	2101      	movs	r1, #1
   201f4:	4628      	mov	r0, r5
   201f6:	f00a fd8d 	bl	2ad14 <mcp2515_rx>

			/* RX1IF flag cleared automatically during read */
			canintf &= ~MCP2515_CANINTF_RX1IF;
   201fa:	79fb      	ldrb	r3, [r7, #7]
   201fc:	f023 0302 	bic.w	r3, r3, #2
   20200:	71fb      	strb	r3, [r7, #7]
   20202:	e032      	b.n	2026a <mcp2515_handle_interrupts+0x11e>
		}

		if (canintf & MCP2515_CANINTF_TX0IF) {
			mcp2515_tx_done(dev, 0, 0);
   20204:	2200      	movs	r2, #0
   20206:	4611      	mov	r1, r2
   20208:	4628      	mov	r0, r5
   2020a:	f00a fd0f 	bl	2ac2c <mcp2515_tx_done>
   2020e:	e030      	b.n	20272 <mcp2515_handle_interrupts+0x126>
		}

		if (canintf & MCP2515_CANINTF_TX1IF) {
			mcp2515_tx_done(dev, 1, 0);
   20210:	2200      	movs	r2, #0
   20212:	2101      	movs	r1, #1
   20214:	4628      	mov	r0, r5
   20216:	f00a fd09 	bl	2ac2c <mcp2515_tx_done>
   2021a:	e02e      	b.n	2027a <mcp2515_handle_interrupts+0x12e>
		}

		if (canintf & MCP2515_CANINTF_TX2IF) {
			mcp2515_tx_done(dev, 2, 0);
   2021c:	2200      	movs	r2, #0
   2021e:	2102      	movs	r1, #2
   20220:	4628      	mov	r0, r5
   20222:	f00a fd03 	bl	2ac2c <mcp2515_tx_done>
   20226:	e02c      	b.n	20282 <mcp2515_handle_interrupts+0x136>
		}

		if (canintf & MCP2515_CANINTF_ERRIF) {
			mcp2515_handle_errors(dev);
   20228:	4628      	mov	r0, r5
   2022a:	f7ff fcf1 	bl	1fc10 <mcp2515_handle_errors>
   2022e:	e02c      	b.n	2028a <mcp2515_handle_interrupts+0x13e>
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
	return gpio_pin_get(spec->port, spec->pin);
   20230:	f898 1014 	ldrb.w	r1, [r8, #20]
   20234:	f8d8 0010 	ldr.w	r0, [r8, #16]
   20238:	f00a fb11 	bl	2a85e <gpio_pin_get>
					canintf, ~canintf);
		}

		/* Break from loop if INT pin is inactive */
		ret = gpio_pin_get_dt(&dev_cfg->int_gpio);
		if (ret < 0) {
   2023c:	2800      	cmp	r0, #0
   2023e:	db2e      	blt.n	2029e <mcp2515_handle_interrupts+0x152>
			LOG_ERR("Couldn't read INT pin");
		} else if (ret == 0) {
   20240:	2800      	cmp	r0, #0
   20242:	d04f      	beq.n	202e4 <mcp2515_handle_interrupts+0x198>
		ret = mcp2515_cmd_read_reg(dev, MCP2515_ADDR_CANINTF,
   20244:	2301      	movs	r3, #1
   20246:	1dfa      	adds	r2, r7, #7
   20248:	212c      	movs	r1, #44	; 0x2c
   2024a:	4628      	mov	r0, r5
   2024c:	f00a fbcb 	bl	2a9e6 <mcp2515_cmd_read_reg>
		if (ret != 0) {
   20250:	4601      	mov	r1, r0
   20252:	2800      	cmp	r0, #0
   20254:	d182      	bne.n	2015c <mcp2515_handle_interrupts+0x10>
		if (canintf == 0) {
   20256:	79fb      	ldrb	r3, [r7, #7]
   20258:	2b00      	cmp	r3, #0
   2025a:	d043      	beq.n	202e4 <mcp2515_handle_interrupts+0x198>
		if (canintf & MCP2515_CANINTF_RX0IF) {
   2025c:	f013 0f01 	tst.w	r3, #1
   20260:	d1be      	bne.n	201e0 <mcp2515_handle_interrupts+0x94>
		if (canintf & MCP2515_CANINTF_RX1IF) {
   20262:	79fb      	ldrb	r3, [r7, #7]
   20264:	f013 0f02 	tst.w	r3, #2
   20268:	d1c3      	bne.n	201f2 <mcp2515_handle_interrupts+0xa6>
		if (canintf & MCP2515_CANINTF_TX0IF) {
   2026a:	79fb      	ldrb	r3, [r7, #7]
   2026c:	f013 0f04 	tst.w	r3, #4
   20270:	d1c8      	bne.n	20204 <mcp2515_handle_interrupts+0xb8>
		if (canintf & MCP2515_CANINTF_TX1IF) {
   20272:	79fb      	ldrb	r3, [r7, #7]
   20274:	f013 0f08 	tst.w	r3, #8
   20278:	d1ca      	bne.n	20210 <mcp2515_handle_interrupts+0xc4>
		if (canintf & MCP2515_CANINTF_TX2IF) {
   2027a:	79fb      	ldrb	r3, [r7, #7]
   2027c:	f013 0f10 	tst.w	r3, #16
   20280:	d1cc      	bne.n	2021c <mcp2515_handle_interrupts+0xd0>
		if (canintf & MCP2515_CANINTF_ERRIF) {
   20282:	79fb      	ldrb	r3, [r7, #7]
   20284:	f013 0f20 	tst.w	r3, #32
   20288:	d1ce      	bne.n	20228 <mcp2515_handle_interrupts+0xdc>
		if (canintf != 0) {
   2028a:	79fa      	ldrb	r2, [r7, #7]
   2028c:	2a00      	cmp	r2, #0
   2028e:	d0cf      	beq.n	20230 <mcp2515_handle_interrupts+0xe4>
			mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_CANINTF,
   20290:	43d3      	mvns	r3, r2
   20292:	b2db      	uxtb	r3, r3
   20294:	212c      	movs	r1, #44	; 0x2c
   20296:	4628      	mov	r0, r5
   20298:	f00a fb4a 	bl	2a930 <mcp2515_cmd_bit_modify>
   2029c:	e7c8      	b.n	20230 <mcp2515_handle_interrupts+0xe4>
			LOG_ERR("Couldn't read INT pin");
   2029e:	4b15      	ldr	r3, [pc, #84]	; (202f4 <mcp2515_handle_interrupts+0x1a8>)
   202a0:	61fb      	str	r3, [r7, #28]
   202a2:	2302      	movs	r3, #2
   202a4:	703b      	strb	r3, [r7, #0]
   202a6:	2300      	movs	r3, #0
   202a8:	707b      	strb	r3, [r7, #1]
   202aa:	70bb      	strb	r3, [r7, #2]
   202ac:	70fb      	strb	r3, [r7, #3]
   202ae:	683a      	ldr	r2, [r7, #0]
   202b0:	61ba      	str	r2, [r7, #24]
   202b2:	f363 0600 	bfi	r6, r3, #0, #1
   202b6:	f363 0641 	bfi	r6, r3, #1, #1
   202ba:	f363 0682 	bfi	r6, r3, #2, #1
   202be:	f363 06c5 	bfi	r6, r3, #3, #3
   202c2:	2201      	movs	r2, #1
   202c4:	f362 1688 	bfi	r6, r2, #6, #3
   202c8:	2208      	movs	r2, #8
   202ca:	f362 2652 	bfi	r6, r2, #9, #10
   202ce:	f363 46de 	bfi	r6, r3, #19, #12
   202d2:	f363 76df 	bfi	r6, r3, #31, #1
   202d6:	f107 0218 	add.w	r2, r7, #24
   202da:	4631      	mov	r1, r6
   202dc:	4804      	ldr	r0, [pc, #16]	; (202f0 <mcp2515_handle_interrupts+0x1a4>)
   202de:	f006 fcba 	bl	26c56 <z_impl_z_log_msg_static_create>
   202e2:	e7af      	b.n	20244 <mcp2515_handle_interrupts+0xf8>
			/* All interrupt flags handled */
			break;
		}
	}
}
   202e4:	3724      	adds	r7, #36	; 0x24
   202e6:	46bd      	mov	sp, r7
   202e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   202ec:	0002f914 	.word	0x0002f914
   202f0:	0002d104 	.word	0x0002d104
   202f4:	0002f934 	.word	0x0002f934

000202f8 <mcp2515_init>:
	}
};


static int mcp2515_init(const struct device *dev)
{
   202f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   202fc:	b0ad      	sub	sp, #180	; 0xb4
   202fe:	af08      	add	r7, sp, #32
   20300:	4606      	mov	r6, r0
	const struct mcp2515_config *dev_cfg = dev->config;
   20302:	6844      	ldr	r4, [r0, #4]
	struct mcp2515_data *dev_data = dev->data;
   20304:	6905      	ldr	r5, [r0, #16]
	struct can_timing timing;
	int ret;

	k_sem_init(&dev_data->int_sem, 0, 1);
   20306:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
	return z_impl_k_sem_init(sem, initial_count, limit);
   2030a:	2201      	movs	r2, #1
   2030c:	2100      	movs	r1, #0
   2030e:	f00b ff02 	bl	2c116 <z_impl_k_sem_init>
	k_mutex_init(&dev_data->mutex);
   20312:	f505 70b2 	add.w	r0, r5, #356	; 0x164
	return z_impl_k_mutex_init(mutex);
   20316:	f00b fe41 	bl	2bf9c <z_impl_k_mutex_init>
	k_sem_init(&dev_data->tx_sem, MCP2515_TX_CNT, MCP2515_TX_CNT);
   2031a:	f105 00e4 	add.w	r0, r5, #228	; 0xe4
	return z_impl_k_sem_init(sem, initial_count, limit);
   2031e:	2201      	movs	r2, #1
   20320:	4611      	mov	r1, r2
   20322:	f00b fef8 	bl	2c116 <z_impl_k_sem_init>

	if (dev_cfg->phy != NULL) {
   20326:	6b20      	ldr	r0, [r4, #48]	; 0x30
   20328:	b118      	cbz	r0, 20332 <mcp2515_init+0x3a>
   2032a:	f00b fcf6 	bl	2bd1a <z_device_is_ready>
		if (!device_is_ready(dev_cfg->phy)) {
   2032e:	2800      	cmp	r0, #0
   20330:	d07a      	beq.n	20428 <mcp2515_init+0x130>
			LOG_ERR("CAN transceiver not ready");
			return -ENODEV;
		}
	}

	if (!spi_is_ready_dt(&dev_cfg->bus)) {
   20332:	4620      	mov	r0, r4
   20334:	f00a fd11 	bl	2ad5a <spi_is_ready_dt>
   20338:	2800      	cmp	r0, #0
   2033a:	f000 809a 	beq.w	20472 <mcp2515_init+0x17a>
		LOG_ERR("SPI bus %s not ready", dev_cfg->bus.bus->name);
		return -ENODEV;
	}

	/* Reset MCP2515 */
	if (mcp2515_cmd_soft_reset(dev)) {
   2033e:	4630      	mov	r0, r6
   20340:	f00a fae3 	bl	2a90a <mcp2515_cmd_soft_reset>
   20344:	2800      	cmp	r0, #0
   20346:	f040 80eb 	bne.w	20520 <mcp2515_init+0x228>
		LOG_ERR("Soft-reset failed");
		return -EIO;
	}

	/* Initialize interrupt handling  */
	if (!device_is_ready(dev_cfg->int_gpio.port)) {
   2034a:	6920      	ldr	r0, [r4, #16]
   2034c:	f00b fce5 	bl	2bd1a <z_device_is_ready>
   20350:	2800      	cmp	r0, #0
   20352:	f000 810c 	beq.w	2056e <mcp2515_init+0x276>
		LOG_ERR("Interrupt GPIO port not ready");
		return -ENODEV;
	}

	if (gpio_pin_configure_dt(&dev_cfg->int_gpio, GPIO_INPUT)) {
   20356:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   2035a:	f104 0010 	add.w	r0, r4, #16
   2035e:	f00a fa67 	bl	2a830 <gpio_pin_configure_dt>
   20362:	2800      	cmp	r0, #0
   20364:	f040 8128 	bne.w	205b8 <mcp2515_init+0x2c0>
		LOG_ERR("Unable to configure interrupt GPIO");
		return -EINVAL;
	}

	gpio_init_callback(&(dev_data->int_gpio_cb), mcp2515_int_gpio_callback,
			   BIT(dev_cfg->int_gpio.pin));
   20368:	7d22      	ldrb	r2, [r4, #20]
   2036a:	2301      	movs	r3, #1
   2036c:	4093      	lsls	r3, r2
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   2036e:	4ab9      	ldr	r2, [pc, #740]	; (20654 <mcp2515_init+0x35c>)
   20370:	606a      	str	r2, [r5, #4]
	callback->pin_mask = pin_mask;
   20372:	60ab      	str	r3, [r5, #8]

	if (gpio_add_callback(dev_cfg->int_gpio.port,
   20374:	4629      	mov	r1, r5
   20376:	6920      	ldr	r0, [r4, #16]
   20378:	f00a fa81 	bl	2a87e <gpio_add_callback>
   2037c:	2800      	cmp	r0, #0
   2037e:	f040 81cf 	bne.w	20720 <mcp2515_init+0x428>
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   20382:	6920      	ldr	r0, [r4, #16]
   20384:	7d21      	ldrb	r1, [r4, #20]
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   20386:	f04f 62b8 	mov.w	r2, #96468992	; 0x5c00000
   2038a:	f00a fa15 	bl	2a7b8 <z_impl_gpio_pin_interrupt_configure>
			      &(dev_data->int_gpio_cb))) {
		return -EINVAL;
	}

	if (gpio_pin_interrupt_configure_dt(&dev_cfg->int_gpio,
   2038e:	2800      	cmp	r0, #0
   20390:	f040 81c9 	bne.w	20726 <mcp2515_init+0x42e>
					    GPIO_INT_EDGE_TO_ACTIVE)) {
		return -EINVAL;
	}

	k_thread_create(&dev_data->int_thread, dev_data->int_thread_stack,
   20394:	f105 0010 	add.w	r0, r5, #16
   20398:	f8d5 10c8 	ldr.w	r1, [r5, #200]	; 0xc8
			dev_cfg->int_thread_stack_size,
   2039c:	69a2      	ldr	r2, [r4, #24]
			(k_thread_entry_t) mcp2515_int_thread, (void *)dev,
			NULL, NULL, K_PRIO_COOP(dev_cfg->int_thread_priority),
   2039e:	69e3      	ldr	r3, [r4, #28]
	k_thread_create(&dev_data->int_thread, dev_data->int_thread_stack,
   203a0:	3b10      	subs	r3, #16
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   203a2:	f04f 0800 	mov.w	r8, #0
   203a6:	f04f 0900 	mov.w	r9, #0
   203aa:	e9cd 8906 	strd	r8, r9, [sp, #24]
   203ae:	f8cd 8010 	str.w	r8, [sp, #16]
   203b2:	9303      	str	r3, [sp, #12]
   203b4:	f8cd 8008 	str.w	r8, [sp, #8]
   203b8:	f8cd 8004 	str.w	r8, [sp, #4]
   203bc:	9600      	str	r6, [sp, #0]
   203be:	4ba6      	ldr	r3, [pc, #664]	; (20658 <mcp2515_init+0x360>)
   203c0:	f00b fdae 	bl	2bf20 <z_impl_k_thread_create>
			0, K_NO_WAIT);

	(void)memset(dev_data->rx_cb, 0, sizeof(dev_data->rx_cb));
   203c4:	2214      	movs	r2, #20
   203c6:	4641      	mov	r1, r8
   203c8:	f505 7086 	add.w	r0, r5, #268	; 0x10c
   203cc:	f007 f8ad 	bl	2752a <memset>
	(void)memset(dev_data->filter, 0, sizeof(dev_data->filter));
   203d0:	2228      	movs	r2, #40	; 0x28
   203d2:	4641      	mov	r1, r8
   203d4:	f505 709a 	add.w	r0, r5, #308	; 0x134
   203d8:	f007 f8a7 	bl	2752a <memset>
	dev_data->old_state = CAN_STATE_ERROR_ACTIVE;
   203dc:	f885 8178 	strb.w	r8, [r5, #376]	; 0x178

	timing.sjw = dev_cfg->tq_sjw;
   203e0:	f894 3020 	ldrb.w	r3, [r4, #32]
   203e4:	81bb      	strh	r3, [r7, #12]
	if (dev_cfg->sample_point && USE_SP_ALGO) {
   203e6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   203e8:	2b00      	cmp	r3, #0
   203ea:	f000 8145 	beq.w	20678 <mcp2515_init+0x380>
		ret = can_calc_timing(dev, &timing, dev_cfg->bus_speed,
   203ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
	return z_impl_can_calc_timing(dev, res, bitrate, sample_pnt);
   203f0:	f107 010c 	add.w	r1, r7, #12
   203f4:	4630      	mov	r0, r6
   203f6:	f7ff fabb 	bl	1f970 <z_impl_can_calc_timing>
				      dev_cfg->sample_point);
		if (ret == -EINVAL) {
   203fa:	f110 0f16 	cmn.w	r0, #22
   203fe:	f000 8100 	beq.w	20602 <mcp2515_init+0x30a>
	return z_impl_k_usleep(us);
   20402:	2080      	movs	r0, #128	; 0x80
   20404:	f004 fb8e 	bl	24b24 <z_impl_k_usleep>
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
   20408:	68b3      	ldr	r3, [r6, #8]
	return api->set_timing(dev, timing);
   2040a:	691b      	ldr	r3, [r3, #16]
   2040c:	f107 010c 	add.w	r1, r7, #12
   20410:	4630      	mov	r0, r6
   20412:	4798      	blx	r3
	}

	k_usleep(MCP2515_OSC_STARTUP_US);

	ret = can_set_timing(dev, &timing);
	if (ret) {
   20414:	b920      	cbnz	r0, 20420 <mcp2515_init+0x128>
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
   20416:	68b3      	ldr	r3, [r6, #8]
	return api->set_mode(dev, mode);
   20418:	68db      	ldr	r3, [r3, #12]
   2041a:	2100      	movs	r1, #0
   2041c:	4630      	mov	r0, r6
   2041e:	4798      	blx	r3
	}

	ret = can_set_mode(dev, CAN_MODE_NORMAL);

	return ret;
}
   20420:	3794      	adds	r7, #148	; 0x94
   20422:	46bd      	mov	sp, r7
   20424:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			LOG_ERR("CAN transceiver not ready");
   20428:	4b8c      	ldr	r3, [pc, #560]	; (2065c <mcp2515_init+0x364>)
   2042a:	62fb      	str	r3, [r7, #44]	; 0x2c
   2042c:	2302      	movs	r3, #2
   2042e:	723b      	strb	r3, [r7, #8]
   20430:	2300      	movs	r3, #0
   20432:	727b      	strb	r3, [r7, #9]
   20434:	72bb      	strb	r3, [r7, #10]
   20436:	72fb      	strb	r3, [r7, #11]
   20438:	68ba      	ldr	r2, [r7, #8]
   2043a:	62ba      	str	r2, [r7, #40]	; 0x28
   2043c:	4619      	mov	r1, r3
   2043e:	f363 0100 	bfi	r1, r3, #0, #1
   20442:	f363 0141 	bfi	r1, r3, #1, #1
   20446:	f363 0182 	bfi	r1, r3, #2, #1
   2044a:	f363 01c5 	bfi	r1, r3, #3, #3
   2044e:	2201      	movs	r2, #1
   20450:	f362 1188 	bfi	r1, r2, #6, #3
   20454:	2208      	movs	r2, #8
   20456:	f362 2152 	bfi	r1, r2, #9, #10
   2045a:	f363 41de 	bfi	r1, r3, #19, #12
   2045e:	f363 71df 	bfi	r1, r3, #31, #1
   20462:	f107 0228 	add.w	r2, r7, #40	; 0x28
   20466:	487e      	ldr	r0, [pc, #504]	; (20660 <mcp2515_init+0x368>)
   20468:	f006 fbf5 	bl	26c56 <z_impl_z_log_msg_static_create>
			return -ENODEV;
   2046c:	f06f 0012 	mvn.w	r0, #18
   20470:	e7d6      	b.n	20420 <mcp2515_init+0x128>
		LOG_ERR("SPI bus %s not ready", dev_cfg->bus.bus->name);
   20472:	6823      	ldr	r3, [r4, #0]
   20474:	6819      	ldr	r1, [r3, #0]
   20476:	466d      	mov	r5, sp
   20478:	2300      	movs	r3, #0
   2047a:	723b      	strb	r3, [r7, #8]
   2047c:	2302      	movs	r3, #2
   2047e:	727b      	strb	r3, [r7, #9]
   20480:	b088      	sub	sp, #32
   20482:	462c      	mov	r4, r5
   20484:	f115 0210 	adds.w	r2, r5, #16
   20488:	d011      	beq.n	204ae <mcp2515_init+0x1b6>
   2048a:	200e      	movs	r0, #14
   2048c:	b11a      	cbz	r2, 20496 <mcp2515_init+0x19e>
   2048e:	2804      	cmp	r0, #4
   20490:	dd01      	ble.n	20496 <mcp2515_init+0x19e>
   20492:	4b74      	ldr	r3, [pc, #464]	; (20664 <mcp2515_init+0x36c>)
   20494:	6163      	str	r3, [r4, #20]
   20496:	2300      	movs	r3, #0
   20498:	713b      	strb	r3, [r7, #4]
   2049a:	2302      	movs	r3, #2
   2049c:	717b      	strb	r3, [r7, #5]
   2049e:	b19a      	cbz	r2, 204c8 <mcp2515_init+0x1d0>
   204a0:	2808      	cmp	r0, #8
   204a2:	dd00      	ble.n	204a6 <mcp2515_init+0x1ae>
   204a4:	61a1      	str	r1, [r4, #24]
   204a6:	f104 031c 	add.w	r3, r4, #28
   204aa:	2100      	movs	r1, #0
   204ac:	e00a      	b.n	204c4 <mcp2515_init+0x1cc>
   204ae:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   204b2:	e7eb      	b.n	2048c <mcp2515_init+0x194>
   204b4:	f101 0690 	add.w	r6, r1, #144	; 0x90
   204b8:	443e      	add	r6, r7
   204ba:	f816 6c8c 	ldrb.w	r6, [r6, #-140]
   204be:	f803 6b01 	strb.w	r6, [r3], #1
   204c2:	3101      	adds	r1, #1
   204c4:	2901      	cmp	r1, #1
   204c6:	d9f5      	bls.n	204b4 <mcp2515_init+0x1bc>
   204c8:	280d      	cmp	r0, #13
   204ca:	dd26      	ble.n	2051a <mcp2515_init+0x222>
   204cc:	230e      	movs	r3, #14
   204ce:	b142      	cbz	r2, 204e2 <mcp2515_init+0x1ea>
   204d0:	2103      	movs	r1, #3
   204d2:	7239      	strb	r1, [r7, #8]
   204d4:	2100      	movs	r1, #0
   204d6:	7279      	strb	r1, [r7, #9]
   204d8:	72b9      	strb	r1, [r7, #10]
   204da:	2101      	movs	r1, #1
   204dc:	72f9      	strb	r1, [r7, #11]
   204de:	68b8      	ldr	r0, [r7, #8]
   204e0:	6120      	str	r0, [r4, #16]
   204e2:	2100      	movs	r1, #0
   204e4:	f36f 0100 	bfc	r1, #0, #1
   204e8:	f36f 0141 	bfc	r1, #1, #1
   204ec:	f36f 0182 	bfc	r1, #2, #1
   204f0:	f36f 01c5 	bfc	r1, #3, #3
   204f4:	2001      	movs	r0, #1
   204f6:	f360 1188 	bfi	r1, r0, #6, #3
   204fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
   204fe:	f363 2152 	bfi	r1, r3, #9, #10
   20502:	f36f 41de 	bfc	r1, #19, #12
   20506:	f36f 71df 	bfc	r1, #31, #1
   2050a:	2300      	movs	r3, #0
   2050c:	4854      	ldr	r0, [pc, #336]	; (20660 <mcp2515_init+0x368>)
   2050e:	f006 fba2 	bl	26c56 <z_impl_z_log_msg_static_create>
   20512:	46ad      	mov	sp, r5
		return -ENODEV;
   20514:	f06f 0012 	mvn.w	r0, #18
   20518:	e782      	b.n	20420 <mcp2515_init+0x128>
		LOG_ERR("SPI bus %s not ready", dev_cfg->bus.bus->name);
   2051a:	f06f 031b 	mvn.w	r3, #27
   2051e:	e7d6      	b.n	204ce <mcp2515_init+0x1d6>
		LOG_ERR("Soft-reset failed");
   20520:	4b51      	ldr	r3, [pc, #324]	; (20668 <mcp2515_init+0x370>)
   20522:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   20526:	2302      	movs	r3, #2
   20528:	723b      	strb	r3, [r7, #8]
   2052a:	2300      	movs	r3, #0
   2052c:	727b      	strb	r3, [r7, #9]
   2052e:	72bb      	strb	r3, [r7, #10]
   20530:	72fb      	strb	r3, [r7, #11]
   20532:	68ba      	ldr	r2, [r7, #8]
   20534:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
   20538:	4619      	mov	r1, r3
   2053a:	f363 0100 	bfi	r1, r3, #0, #1
   2053e:	f363 0141 	bfi	r1, r3, #1, #1
   20542:	f363 0182 	bfi	r1, r3, #2, #1
   20546:	f363 01c5 	bfi	r1, r3, #3, #3
   2054a:	2201      	movs	r2, #1
   2054c:	f362 1188 	bfi	r1, r2, #6, #3
   20550:	2208      	movs	r2, #8
   20552:	f362 2152 	bfi	r1, r2, #9, #10
   20556:	f363 41de 	bfi	r1, r3, #19, #12
   2055a:	f363 71df 	bfi	r1, r3, #31, #1
   2055e:	f107 0288 	add.w	r2, r7, #136	; 0x88
   20562:	483f      	ldr	r0, [pc, #252]	; (20660 <mcp2515_init+0x368>)
   20564:	f006 fb77 	bl	26c56 <z_impl_z_log_msg_static_create>
		return -EIO;
   20568:	f06f 0004 	mvn.w	r0, #4
   2056c:	e758      	b.n	20420 <mcp2515_init+0x128>
		LOG_ERR("Interrupt GPIO port not ready");
   2056e:	4b3f      	ldr	r3, [pc, #252]	; (2066c <mcp2515_init+0x374>)
   20570:	677b      	str	r3, [r7, #116]	; 0x74
   20572:	2302      	movs	r3, #2
   20574:	723b      	strb	r3, [r7, #8]
   20576:	2300      	movs	r3, #0
   20578:	727b      	strb	r3, [r7, #9]
   2057a:	72bb      	strb	r3, [r7, #10]
   2057c:	72fb      	strb	r3, [r7, #11]
   2057e:	68ba      	ldr	r2, [r7, #8]
   20580:	673a      	str	r2, [r7, #112]	; 0x70
   20582:	4619      	mov	r1, r3
   20584:	f363 0100 	bfi	r1, r3, #0, #1
   20588:	f363 0141 	bfi	r1, r3, #1, #1
   2058c:	f363 0182 	bfi	r1, r3, #2, #1
   20590:	f363 01c5 	bfi	r1, r3, #3, #3
   20594:	2201      	movs	r2, #1
   20596:	f362 1188 	bfi	r1, r2, #6, #3
   2059a:	2208      	movs	r2, #8
   2059c:	f362 2152 	bfi	r1, r2, #9, #10
   205a0:	f363 41de 	bfi	r1, r3, #19, #12
   205a4:	f363 71df 	bfi	r1, r3, #31, #1
   205a8:	f107 0270 	add.w	r2, r7, #112	; 0x70
   205ac:	482c      	ldr	r0, [pc, #176]	; (20660 <mcp2515_init+0x368>)
   205ae:	f006 fb52 	bl	26c56 <z_impl_z_log_msg_static_create>
		return -ENODEV;
   205b2:	f06f 0012 	mvn.w	r0, #18
   205b6:	e733      	b.n	20420 <mcp2515_init+0x128>
		LOG_ERR("Unable to configure interrupt GPIO");
   205b8:	4b2d      	ldr	r3, [pc, #180]	; (20670 <mcp2515_init+0x378>)
   205ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   205bc:	2302      	movs	r3, #2
   205be:	723b      	strb	r3, [r7, #8]
   205c0:	2300      	movs	r3, #0
   205c2:	727b      	strb	r3, [r7, #9]
   205c4:	72bb      	strb	r3, [r7, #10]
   205c6:	72fb      	strb	r3, [r7, #11]
   205c8:	68ba      	ldr	r2, [r7, #8]
   205ca:	65ba      	str	r2, [r7, #88]	; 0x58
   205cc:	4619      	mov	r1, r3
   205ce:	f363 0100 	bfi	r1, r3, #0, #1
   205d2:	f363 0141 	bfi	r1, r3, #1, #1
   205d6:	f363 0182 	bfi	r1, r3, #2, #1
   205da:	f363 01c5 	bfi	r1, r3, #3, #3
   205de:	2201      	movs	r2, #1
   205e0:	f362 1188 	bfi	r1, r2, #6, #3
   205e4:	2208      	movs	r2, #8
   205e6:	f362 2152 	bfi	r1, r2, #9, #10
   205ea:	f363 41de 	bfi	r1, r3, #19, #12
   205ee:	f363 71df 	bfi	r1, r3, #31, #1
   205f2:	f107 0258 	add.w	r2, r7, #88	; 0x58
   205f6:	481a      	ldr	r0, [pc, #104]	; (20660 <mcp2515_init+0x368>)
   205f8:	f006 fb2d 	bl	26c56 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   205fc:	f06f 0015 	mvn.w	r0, #21
   20600:	e70e      	b.n	20420 <mcp2515_init+0x128>
			LOG_ERR("Can't find timing for given param");
   20602:	4b1c      	ldr	r3, [pc, #112]	; (20674 <mcp2515_init+0x37c>)
   20604:	647b      	str	r3, [r7, #68]	; 0x44
   20606:	2302      	movs	r3, #2
   20608:	723b      	strb	r3, [r7, #8]
   2060a:	4643      	mov	r3, r8
   2060c:	f887 8009 	strb.w	r8, [r7, #9]
   20610:	f887 800a 	strb.w	r8, [r7, #10]
   20614:	f887 800b 	strb.w	r8, [r7, #11]
   20618:	68ba      	ldr	r2, [r7, #8]
   2061a:	643a      	str	r2, [r7, #64]	; 0x40
   2061c:	4641      	mov	r1, r8
   2061e:	f368 0100 	bfi	r1, r8, #0, #1
   20622:	f368 0141 	bfi	r1, r8, #1, #1
   20626:	f368 0182 	bfi	r1, r8, #2, #1
   2062a:	f368 01c5 	bfi	r1, r8, #3, #3
   2062e:	2201      	movs	r2, #1
   20630:	f362 1188 	bfi	r1, r2, #6, #3
   20634:	2208      	movs	r2, #8
   20636:	f362 2152 	bfi	r1, r2, #9, #10
   2063a:	f368 41de 	bfi	r1, r8, #19, #12
   2063e:	f368 71df 	bfi	r1, r8, #31, #1
   20642:	f107 0240 	add.w	r2, r7, #64	; 0x40
   20646:	4806      	ldr	r0, [pc, #24]	; (20660 <mcp2515_init+0x368>)
   20648:	f006 fb05 	bl	26c56 <z_impl_z_log_msg_static_create>
			return -EIO;
   2064c:	f06f 0004 	mvn.w	r0, #4
   20650:	e6e6      	b.n	20420 <mcp2515_init+0x128>
   20652:	bf00      	nop
   20654:	0002ac83 	.word	0x0002ac83
   20658:	0002ad3d 	.word	0x0002ad3d
   2065c:	0002f94c 	.word	0x0002f94c
   20660:	0002d104 	.word	0x0002d104
   20664:	0002f968 	.word	0x0002f968
   20668:	0002f980 	.word	0x0002f980
   2066c:	0002f994 	.word	0x0002f994
   20670:	0002f9b4 	.word	0x0002f9b4
   20674:	0002f9d8 	.word	0x0002f9d8
		timing.prop_seg = dev_cfg->tq_prop;
   20678:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   2067c:	81fb      	strh	r3, [r7, #14]
		timing.phase_seg1 = dev_cfg->tq_bs1;
   2067e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   20682:	823b      	strh	r3, [r7, #16]
		timing.phase_seg2 = dev_cfg->tq_bs2;
   20684:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   20688:	827b      	strh	r3, [r7, #18]
		ret = can_calc_prescaler(dev, &timing, dev_cfg->bus_speed);
   2068a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   2068c:	f107 010c 	add.w	r1, r7, #12
   20690:	4630      	mov	r0, r6
   20692:	f00a f873 	bl	2a77c <can_calc_prescaler>
		if (ret) {
   20696:	4604      	mov	r4, r0
   20698:	2800      	cmp	r0, #0
   2069a:	f43f aeb2 	beq.w	20402 <mcp2515_init+0x10a>
			LOG_WRN("Bitrate error: %d", ret);
   2069e:	466d      	mov	r5, sp
   206a0:	b088      	sub	sp, #32
   206a2:	462b      	mov	r3, r5
   206a4:	f115 0210 	adds.w	r2, r5, #16
   206a8:	d00f      	beq.n	206ca <mcp2515_init+0x3d2>
   206aa:	210c      	movs	r1, #12
   206ac:	b14a      	cbz	r2, 206c2 <mcp2515_init+0x3ca>
   206ae:	4608      	mov	r0, r1
   206b0:	2904      	cmp	r1, #4
   206b2:	dd03      	ble.n	206bc <mcp2515_init+0x3c4>
   206b4:	f8df c074 	ldr.w	ip, [pc, #116]	; 2072c <mcp2515_init+0x434>
   206b8:	f8c3 c014 	str.w	ip, [r3, #20]
   206bc:	2808      	cmp	r0, #8
   206be:	dd07      	ble.n	206d0 <mcp2515_init+0x3d8>
   206c0:	619c      	str	r4, [r3, #24]
   206c2:	290b      	cmp	r1, #11
   206c4:	dd29      	ble.n	2071a <mcp2515_init+0x422>
   206c6:	240c      	movs	r4, #12
   206c8:	e004      	b.n	206d4 <mcp2515_init+0x3dc>
   206ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   206ce:	e7ed      	b.n	206ac <mcp2515_init+0x3b4>
   206d0:	f06f 041b 	mvn.w	r4, #27
   206d4:	b13a      	cbz	r2, 206e6 <mcp2515_init+0x3ee>
   206d6:	2103      	movs	r1, #3
   206d8:	7239      	strb	r1, [r7, #8]
   206da:	2100      	movs	r1, #0
   206dc:	7279      	strb	r1, [r7, #9]
   206de:	72b9      	strb	r1, [r7, #10]
   206e0:	72f9      	strb	r1, [r7, #11]
   206e2:	68b8      	ldr	r0, [r7, #8]
   206e4:	6118      	str	r0, [r3, #16]
   206e6:	2100      	movs	r1, #0
   206e8:	f36f 0100 	bfc	r1, #0, #1
   206ec:	f36f 0141 	bfc	r1, #1, #1
   206f0:	f36f 0182 	bfc	r1, #2, #1
   206f4:	f36f 01c5 	bfc	r1, #3, #3
   206f8:	2302      	movs	r3, #2
   206fa:	f363 1188 	bfi	r1, r3, #6, #3
   206fe:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   20702:	f363 2152 	bfi	r1, r3, #9, #10
   20706:	f36f 41de 	bfc	r1, #19, #12
   2070a:	f36f 71df 	bfc	r1, #31, #1
   2070e:	2300      	movs	r3, #0
   20710:	4807      	ldr	r0, [pc, #28]	; (20730 <mcp2515_init+0x438>)
   20712:	f006 faa0 	bl	26c56 <z_impl_z_log_msg_static_create>
   20716:	46ad      	mov	sp, r5
   20718:	e673      	b.n	20402 <mcp2515_init+0x10a>
   2071a:	f06f 041b 	mvn.w	r4, #27
   2071e:	e7d9      	b.n	206d4 <mcp2515_init+0x3dc>
		return -EINVAL;
   20720:	f06f 0015 	mvn.w	r0, #21
   20724:	e67c      	b.n	20420 <mcp2515_init+0x128>
		return -EINVAL;
   20726:	f06f 0015 	mvn.w	r0, #21
   2072a:	e679      	b.n	20420 <mcp2515_init+0x128>
   2072c:	0002f9fc 	.word	0x0002f9fc
   20730:	0002d104 	.word	0x0002d104

00020734 <mcp2515_set_mode_int>:
{
   20734:	b570      	push	{r4, r5, r6, lr}
   20736:	b088      	sub	sp, #32
   20738:	4606      	mov	r6, r0
   2073a:	460d      	mov	r5, r1
	mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_CANCTRL,
   2073c:	014b      	lsls	r3, r1, #5
   2073e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   20742:	22e0      	movs	r2, #224	; 0xe0
   20744:	210f      	movs	r1, #15
   20746:	f00a f8f3 	bl	2a930 <mcp2515_cmd_bit_modify>
	mcp2515_cmd_read_reg(dev, MCP2515_ADDR_CANSTAT, &canstat, 1);
   2074a:	2301      	movs	r3, #1
   2074c:	f10d 0207 	add.w	r2, sp, #7
   20750:	210e      	movs	r1, #14
   20752:	4630      	mov	r0, r6
   20754:	f00a f947 	bl	2a9e6 <mcp2515_cmd_read_reg>
	int retries = MCP2515_MODE_CHANGE_RETRIES;
   20758:	2464      	movs	r4, #100	; 0x64
	while (((canstat & MCP2515_CANSTAT_MODE_MASK) >> MCP2515_CANSTAT_MODE_POS)
   2075a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		!= mcp2515_mode) {
   2075e:	ebb5 1f53 	cmp.w	r5, r3, lsr #5
   20762:	d035      	beq.n	207d0 <mcp2515_set_mode_int+0x9c>
		if (--retries < 0) {
   20764:	3c01      	subs	r4, #1
   20766:	d40b      	bmi.n	20780 <mcp2515_set_mode_int+0x4c>
	return z_impl_k_sleep(timeout);
   20768:	2001      	movs	r0, #1
   2076a:	2100      	movs	r1, #0
   2076c:	f004 f9b0 	bl	24ad0 <z_impl_k_sleep>
		mcp2515_cmd_read_reg(dev, MCP2515_ADDR_CANSTAT, &canstat, 1);
   20770:	2301      	movs	r3, #1
   20772:	f10d 0207 	add.w	r2, sp, #7
   20776:	210e      	movs	r1, #14
   20778:	4630      	mov	r0, r6
   2077a:	f00a f934 	bl	2a9e6 <mcp2515_cmd_read_reg>
   2077e:	e7ec      	b.n	2075a <mcp2515_set_mode_int+0x26>
			LOG_ERR("Timeout trying to set MCP2515 operation mode");
   20780:	4b15      	ldr	r3, [pc, #84]	; (207d8 <mcp2515_set_mode_int+0xa4>)
   20782:	9307      	str	r3, [sp, #28]
   20784:	2302      	movs	r3, #2
   20786:	f88d 3000 	strb.w	r3, [sp]
   2078a:	2300      	movs	r3, #0
   2078c:	f88d 3001 	strb.w	r3, [sp, #1]
   20790:	f88d 3002 	strb.w	r3, [sp, #2]
   20794:	f88d 3003 	strb.w	r3, [sp, #3]
   20798:	9a00      	ldr	r2, [sp, #0]
   2079a:	9206      	str	r2, [sp, #24]
   2079c:	4619      	mov	r1, r3
   2079e:	f363 0100 	bfi	r1, r3, #0, #1
   207a2:	f363 0141 	bfi	r1, r3, #1, #1
   207a6:	f363 0182 	bfi	r1, r3, #2, #1
   207aa:	f363 01c5 	bfi	r1, r3, #3, #3
   207ae:	2201      	movs	r2, #1
   207b0:	f362 1188 	bfi	r1, r2, #6, #3
   207b4:	2208      	movs	r2, #8
   207b6:	f362 2152 	bfi	r1, r2, #9, #10
   207ba:	f363 41de 	bfi	r1, r3, #19, #12
   207be:	f363 71df 	bfi	r1, r3, #31, #1
   207c2:	aa06      	add	r2, sp, #24
   207c4:	4805      	ldr	r0, [pc, #20]	; (207dc <mcp2515_set_mode_int+0xa8>)
   207c6:	f006 fa46 	bl	26c56 <z_impl_z_log_msg_static_create>
			return -EIO;
   207ca:	f06f 0004 	mvn.w	r0, #4
   207ce:	e000      	b.n	207d2 <mcp2515_set_mode_int+0x9e>
	return 0;
   207d0:	2000      	movs	r0, #0
}
   207d2:	b008      	add	sp, #32
   207d4:	bd70      	pop	{r4, r5, r6, pc}
   207d6:	bf00      	nop
   207d8:	0002fa10 	.word	0x0002fa10
   207dc:	0002d104 	.word	0x0002d104

000207e0 <mcp2515_stop>:
{
   207e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   207e4:	b083      	sub	sp, #12
   207e6:	af00      	add	r7, sp, #0
	const struct mcp2515_config *dev_cfg = dev->config;
   207e8:	f8d0 9004 	ldr.w	r9, [r0, #4]
	struct mcp2515_data *dev_data = dev->data;
   207ec:	6905      	ldr	r5, [r0, #16]
	if (!dev_data->started) {
   207ee:	f895 317a 	ldrb.w	r3, [r5, #378]	; 0x17a
   207f2:	2b00      	cmp	r3, #0
   207f4:	f000 80af 	beq.w	20956 <mcp2515_stop+0x176>
   207f8:	4604      	mov	r4, r0
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   207fa:	f505 78b2 	add.w	r8, r5, #356	; 0x164
	return z_impl_k_mutex_lock(mutex, timeout);
   207fe:	f04f 32ff 	mov.w	r2, #4294967295
   20802:	f04f 33ff 	mov.w	r3, #4294967295
   20806:	4640      	mov	r0, r8
   20808:	f003 fb06 	bl	23e18 <z_impl_k_mutex_lock>
	mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_TXB0CTRL,
   2080c:	2300      	movs	r3, #0
   2080e:	2208      	movs	r2, #8
   20810:	2130      	movs	r1, #48	; 0x30
   20812:	4620      	mov	r0, r4
   20814:	f00a f88c 	bl	2a930 <mcp2515_cmd_bit_modify>
	ret = mcp2515_set_mode_int(dev, MCP2515_MODE_CONFIGURATION);
   20818:	2104      	movs	r1, #4
   2081a:	4620      	mov	r0, r4
   2081c:	f7ff ff8a 	bl	20734 <mcp2515_set_mode_int>
	if (ret < 0) {
   20820:	1e06      	subs	r6, r0, #0
   20822:	da42      	bge.n	208aa <mcp2515_stop+0xca>
		LOG_ERR("Failed to enter configuration mode [%d]", ret);
   20824:	466d      	mov	r5, sp
   20826:	b088      	sub	sp, #32
   20828:	466b      	mov	r3, sp
   2082a:	f113 0210 	adds.w	r2, r3, #16
   2082e:	d036      	beq.n	2089e <mcp2515_stop+0xbe>
   20830:	210c      	movs	r1, #12
   20832:	b13a      	cbz	r2, 20844 <mcp2515_stop+0x64>
   20834:	4608      	mov	r0, r1
   20836:	2904      	cmp	r1, #4
   20838:	dd01      	ble.n	2083e <mcp2515_stop+0x5e>
   2083a:	4c49      	ldr	r4, [pc, #292]	; (20960 <mcp2515_stop+0x180>)
   2083c:	615c      	str	r4, [r3, #20]
   2083e:	2808      	cmp	r0, #8
   20840:	dd00      	ble.n	20844 <mcp2515_stop+0x64>
   20842:	619e      	str	r6, [r3, #24]
   20844:	290b      	cmp	r1, #11
   20846:	dd2d      	ble.n	208a4 <mcp2515_stop+0xc4>
   20848:	240c      	movs	r4, #12
   2084a:	b13a      	cbz	r2, 2085c <mcp2515_stop+0x7c>
   2084c:	2103      	movs	r1, #3
   2084e:	7139      	strb	r1, [r7, #4]
   20850:	2100      	movs	r1, #0
   20852:	7179      	strb	r1, [r7, #5]
   20854:	71b9      	strb	r1, [r7, #6]
   20856:	71f9      	strb	r1, [r7, #7]
   20858:	6878      	ldr	r0, [r7, #4]
   2085a:	6118      	str	r0, [r3, #16]
   2085c:	2100      	movs	r1, #0
   2085e:	f36f 0100 	bfc	r1, #0, #1
   20862:	f36f 0141 	bfc	r1, #1, #1
   20866:	f36f 0182 	bfc	r1, #2, #1
   2086a:	f36f 01c5 	bfc	r1, #3, #3
   2086e:	2301      	movs	r3, #1
   20870:	f363 1188 	bfi	r1, r3, #6, #3
   20874:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   20878:	f364 2152 	bfi	r1, r4, #9, #10
   2087c:	f36f 41de 	bfc	r1, #19, #12
   20880:	f36f 71df 	bfc	r1, #31, #1
   20884:	2300      	movs	r3, #0
   20886:	4837      	ldr	r0, [pc, #220]	; (20964 <mcp2515_stop+0x184>)
   20888:	f006 f9e5 	bl	26c56 <z_impl_z_log_msg_static_create>
   2088c:	46ad      	mov	sp, r5
	return z_impl_k_mutex_unlock(mutex);
   2088e:	4640      	mov	r0, r8
   20890:	f003 fb46 	bl	23f20 <z_impl_k_mutex_unlock>
}
   20894:	4630      	mov	r0, r6
   20896:	370c      	adds	r7, #12
   20898:	46bd      	mov	sp, r7
   2089a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("Failed to enter configuration mode [%d]", ret);
   2089e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   208a2:	e7c6      	b.n	20832 <mcp2515_stop+0x52>
   208a4:	f06f 041b 	mvn.w	r4, #27
   208a8:	e7cf      	b.n	2084a <mcp2515_stop+0x6a>
	dev_data->started = false;
   208aa:	2600      	movs	r6, #0
   208ac:	f885 617a 	strb.w	r6, [r5, #378]	; 0x17a
   208b0:	4640      	mov	r0, r8
   208b2:	f003 fb35 	bl	23f20 <z_impl_k_mutex_unlock>
	for (i = 0; i < MCP2515_TX_CNT; i++) {
   208b6:	2e00      	cmp	r6, #0
   208b8:	dd3f      	ble.n	2093a <mcp2515_stop+0x15a>
	if (dev_cfg->phy != NULL) {
   208ba:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
   208be:	2800      	cmp	r0, #0
   208c0:	d04c      	beq.n	2095c <mcp2515_stop+0x17c>
 * @retval 0 If successful.
 * @retval -EIO General input/output error, failed to disable device.
 */
static inline int can_transceiver_disable(const struct device *dev)
{
	const struct can_transceiver_driver_api *api =
   208c2:	6883      	ldr	r3, [r0, #8]
		(const struct can_transceiver_driver_api *)dev->api;

	return api->disable(dev);
   208c4:	685b      	ldr	r3, [r3, #4]
   208c6:	4798      	blx	r3
		if (ret != 0) {
   208c8:	4606      	mov	r6, r0
   208ca:	2800      	cmp	r0, #0
   208cc:	d0e2      	beq.n	20894 <mcp2515_stop+0xb4>
			LOG_ERR("Failed to disable CAN transceiver [%d]", ret);
   208ce:	466d      	mov	r5, sp
   208d0:	b088      	sub	sp, #32
   208d2:	466b      	mov	r3, sp
   208d4:	f113 0210 	adds.w	r2, r3, #16
   208d8:	d037      	beq.n	2094a <mcp2515_stop+0x16a>
   208da:	210c      	movs	r1, #12
   208dc:	b13a      	cbz	r2, 208ee <mcp2515_stop+0x10e>
   208de:	4608      	mov	r0, r1
   208e0:	2904      	cmp	r1, #4
   208e2:	dd01      	ble.n	208e8 <mcp2515_stop+0x108>
   208e4:	4c20      	ldr	r4, [pc, #128]	; (20968 <mcp2515_stop+0x188>)
   208e6:	615c      	str	r4, [r3, #20]
   208e8:	2808      	cmp	r0, #8
   208ea:	dd00      	ble.n	208ee <mcp2515_stop+0x10e>
   208ec:	619e      	str	r6, [r3, #24]
   208ee:	290b      	cmp	r1, #11
   208f0:	dd2e      	ble.n	20950 <mcp2515_stop+0x170>
   208f2:	240c      	movs	r4, #12
   208f4:	b13a      	cbz	r2, 20906 <mcp2515_stop+0x126>
   208f6:	2103      	movs	r1, #3
   208f8:	7139      	strb	r1, [r7, #4]
   208fa:	2100      	movs	r1, #0
   208fc:	7179      	strb	r1, [r7, #5]
   208fe:	71b9      	strb	r1, [r7, #6]
   20900:	71f9      	strb	r1, [r7, #7]
   20902:	6878      	ldr	r0, [r7, #4]
   20904:	6118      	str	r0, [r3, #16]
   20906:	2100      	movs	r1, #0
   20908:	f36f 0100 	bfc	r1, #0, #1
   2090c:	f36f 0141 	bfc	r1, #1, #1
   20910:	f36f 0182 	bfc	r1, #2, #1
   20914:	f36f 01c5 	bfc	r1, #3, #3
   20918:	2301      	movs	r3, #1
   2091a:	f363 1188 	bfi	r1, r3, #6, #3
   2091e:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   20922:	f364 2152 	bfi	r1, r4, #9, #10
   20926:	f36f 41de 	bfc	r1, #19, #12
   2092a:	f36f 71df 	bfc	r1, #31, #1
   2092e:	2300      	movs	r3, #0
   20930:	480c      	ldr	r0, [pc, #48]	; (20964 <mcp2515_stop+0x184>)
   20932:	f006 f990 	bl	26c56 <z_impl_z_log_msg_static_create>
   20936:	46ad      	mov	sp, r5
			return ret;
   20938:	e7ac      	b.n	20894 <mcp2515_stop+0xb4>
		mcp2515_tx_done(dev, i, -ENETDOWN);
   2093a:	f06f 0272 	mvn.w	r2, #114	; 0x72
   2093e:	b2f1      	uxtb	r1, r6
   20940:	4620      	mov	r0, r4
   20942:	f00a f973 	bl	2ac2c <mcp2515_tx_done>
	for (i = 0; i < MCP2515_TX_CNT; i++) {
   20946:	3601      	adds	r6, #1
   20948:	e7b5      	b.n	208b6 <mcp2515_stop+0xd6>
			LOG_ERR("Failed to disable CAN transceiver [%d]", ret);
   2094a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2094e:	e7c5      	b.n	208dc <mcp2515_stop+0xfc>
   20950:	f06f 041b 	mvn.w	r4, #27
   20954:	e7ce      	b.n	208f4 <mcp2515_stop+0x114>
		return -EALREADY;
   20956:	f06f 0677 	mvn.w	r6, #119	; 0x77
   2095a:	e79b      	b.n	20894 <mcp2515_stop+0xb4>
	return 0;
   2095c:	2600      	movs	r6, #0
   2095e:	e799      	b.n	20894 <mcp2515_stop+0xb4>
   20960:	0002fa40 	.word	0x0002fa40
   20964:	0002d104 	.word	0x0002d104
   20968:	0002fa68 	.word	0x0002fa68

0002096c <mcp2515_start>:
{
   2096c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20970:	b083      	sub	sp, #12
   20972:	af00      	add	r7, sp, #0
	const struct mcp2515_config *dev_cfg = dev->config;
   20974:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct mcp2515_data *dev_data = dev->data;
   20978:	6906      	ldr	r6, [r0, #16]
	if (dev_data->started) {
   2097a:	f896 317a 	ldrb.w	r3, [r6, #378]	; 0x17a
   2097e:	2b00      	cmp	r3, #0
   20980:	f040 80a3 	bne.w	20aca <mcp2515_start+0x15e>
   20984:	4604      	mov	r4, r0
	if (dev_cfg->phy != NULL) {
   20986:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
   2098a:	b120      	cbz	r0, 20996 <mcp2515_start+0x2a>
	const struct can_transceiver_driver_api *api =
   2098c:	6883      	ldr	r3, [r0, #8]
	return api->enable(dev);
   2098e:	681b      	ldr	r3, [r3, #0]
   20990:	4798      	blx	r3
		if (ret != 0) {
   20992:	4605      	mov	r5, r0
   20994:	b9d0      	cbnz	r0, 209cc <mcp2515_start+0x60>
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   20996:	f506 79b2 	add.w	r9, r6, #356	; 0x164
	return z_impl_k_mutex_lock(mutex, timeout);
   2099a:	f04f 32ff 	mov.w	r2, #4294967295
   2099e:	f04f 33ff 	mov.w	r3, #4294967295
   209a2:	4648      	mov	r0, r9
   209a4:	f003 fa38 	bl	23e18 <z_impl_k_mutex_lock>
	ret = mcp2515_set_mode_int(dev, dev_data->mcp2515_mode);
   209a8:	f896 1179 	ldrb.w	r1, [r6, #377]	; 0x179
   209ac:	4620      	mov	r0, r4
   209ae:	f7ff fec1 	bl	20734 <mcp2515_set_mode_int>
	if (ret < 0) {
   209b2:	1e05      	subs	r5, r0, #0
   209b4:	db46      	blt.n	20a44 <mcp2515_start+0xd8>
		dev_data->started = true;
   209b6:	2301      	movs	r3, #1
   209b8:	f886 317a 	strb.w	r3, [r6, #378]	; 0x17a
	return z_impl_k_mutex_unlock(mutex);
   209bc:	4648      	mov	r0, r9
   209be:	f003 faaf 	bl	23f20 <z_impl_k_mutex_unlock>
}
   209c2:	4628      	mov	r0, r5
   209c4:	370c      	adds	r7, #12
   209c6:	46bd      	mov	sp, r7
   209c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			LOG_ERR("Failed to enable CAN transceiver [%d]", ret);
   209cc:	466e      	mov	r6, sp
   209ce:	b088      	sub	sp, #32
   209d0:	466b      	mov	r3, sp
   209d2:	f113 0210 	adds.w	r2, r3, #16
   209d6:	d02f      	beq.n	20a38 <mcp2515_start+0xcc>
   209d8:	210c      	movs	r1, #12
   209da:	b13a      	cbz	r2, 209ec <mcp2515_start+0x80>
   209dc:	4608      	mov	r0, r1
   209de:	2904      	cmp	r1, #4
   209e0:	dd01      	ble.n	209e6 <mcp2515_start+0x7a>
   209e2:	4c3b      	ldr	r4, [pc, #236]	; (20ad0 <mcp2515_start+0x164>)
   209e4:	615c      	str	r4, [r3, #20]
   209e6:	2808      	cmp	r0, #8
   209e8:	dd00      	ble.n	209ec <mcp2515_start+0x80>
   209ea:	619d      	str	r5, [r3, #24]
   209ec:	290b      	cmp	r1, #11
   209ee:	dd26      	ble.n	20a3e <mcp2515_start+0xd2>
   209f0:	240c      	movs	r4, #12
   209f2:	b13a      	cbz	r2, 20a04 <mcp2515_start+0x98>
   209f4:	2103      	movs	r1, #3
   209f6:	7139      	strb	r1, [r7, #4]
   209f8:	2100      	movs	r1, #0
   209fa:	7179      	strb	r1, [r7, #5]
   209fc:	71b9      	strb	r1, [r7, #6]
   209fe:	71f9      	strb	r1, [r7, #7]
   20a00:	6878      	ldr	r0, [r7, #4]
   20a02:	6118      	str	r0, [r3, #16]
   20a04:	2100      	movs	r1, #0
   20a06:	f36f 0100 	bfc	r1, #0, #1
   20a0a:	f36f 0141 	bfc	r1, #1, #1
   20a0e:	f36f 0182 	bfc	r1, #2, #1
   20a12:	f36f 01c5 	bfc	r1, #3, #3
   20a16:	2301      	movs	r3, #1
   20a18:	f363 1188 	bfi	r1, r3, #6, #3
   20a1c:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   20a20:	f363 2152 	bfi	r1, r3, #9, #10
   20a24:	f36f 41de 	bfc	r1, #19, #12
   20a28:	f36f 71df 	bfc	r1, #31, #1
   20a2c:	2300      	movs	r3, #0
   20a2e:	4829      	ldr	r0, [pc, #164]	; (20ad4 <mcp2515_start+0x168>)
   20a30:	f006 f911 	bl	26c56 <z_impl_z_log_msg_static_create>
   20a34:	46b5      	mov	sp, r6
			return ret;
   20a36:	e7c4      	b.n	209c2 <mcp2515_start+0x56>
			LOG_ERR("Failed to enable CAN transceiver [%d]", ret);
   20a38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   20a3c:	e7cd      	b.n	209da <mcp2515_start+0x6e>
   20a3e:	f06f 041b 	mvn.w	r4, #27
   20a42:	e7d6      	b.n	209f2 <mcp2515_start+0x86>
		LOG_ERR("Failed to set the mode [%d]", ret);
   20a44:	466c      	mov	r4, sp
   20a46:	b088      	sub	sp, #32
   20a48:	466b      	mov	r3, sp
   20a4a:	f113 0210 	adds.w	r2, r3, #16
   20a4e:	d036      	beq.n	20abe <mcp2515_start+0x152>
   20a50:	210c      	movs	r1, #12
   20a52:	b13a      	cbz	r2, 20a64 <mcp2515_start+0xf8>
   20a54:	4608      	mov	r0, r1
   20a56:	2904      	cmp	r1, #4
   20a58:	dd01      	ble.n	20a5e <mcp2515_start+0xf2>
   20a5a:	4e1f      	ldr	r6, [pc, #124]	; (20ad8 <mcp2515_start+0x16c>)
   20a5c:	615e      	str	r6, [r3, #20]
   20a5e:	2808      	cmp	r0, #8
   20a60:	dd00      	ble.n	20a64 <mcp2515_start+0xf8>
   20a62:	619d      	str	r5, [r3, #24]
   20a64:	290b      	cmp	r1, #11
   20a66:	dd2d      	ble.n	20ac4 <mcp2515_start+0x158>
   20a68:	260c      	movs	r6, #12
   20a6a:	b13a      	cbz	r2, 20a7c <mcp2515_start+0x110>
   20a6c:	2103      	movs	r1, #3
   20a6e:	7139      	strb	r1, [r7, #4]
   20a70:	2100      	movs	r1, #0
   20a72:	7179      	strb	r1, [r7, #5]
   20a74:	71b9      	strb	r1, [r7, #6]
   20a76:	71f9      	strb	r1, [r7, #7]
   20a78:	6878      	ldr	r0, [r7, #4]
   20a7a:	6118      	str	r0, [r3, #16]
   20a7c:	2100      	movs	r1, #0
   20a7e:	f36f 0100 	bfc	r1, #0, #1
   20a82:	f36f 0141 	bfc	r1, #1, #1
   20a86:	f36f 0182 	bfc	r1, #2, #1
   20a8a:	f36f 01c5 	bfc	r1, #3, #3
   20a8e:	2301      	movs	r3, #1
   20a90:	f363 1188 	bfi	r1, r3, #6, #3
   20a94:	f406 737b 	and.w	r3, r6, #1004	; 0x3ec
   20a98:	f363 2152 	bfi	r1, r3, #9, #10
   20a9c:	f36f 41de 	bfc	r1, #19, #12
   20aa0:	f36f 71df 	bfc	r1, #31, #1
   20aa4:	2300      	movs	r3, #0
   20aa6:	480b      	ldr	r0, [pc, #44]	; (20ad4 <mcp2515_start+0x168>)
   20aa8:	f006 f8d5 	bl	26c56 <z_impl_z_log_msg_static_create>
   20aac:	46a5      	mov	sp, r4
		if (dev_cfg->phy != NULL) {
   20aae:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
   20ab2:	2800      	cmp	r0, #0
   20ab4:	d082      	beq.n	209bc <mcp2515_start+0x50>
	const struct can_transceiver_driver_api *api =
   20ab6:	6883      	ldr	r3, [r0, #8]
	return api->disable(dev);
   20ab8:	685b      	ldr	r3, [r3, #4]
   20aba:	4798      	blx	r3
   20abc:	e77e      	b.n	209bc <mcp2515_start+0x50>
		LOG_ERR("Failed to set the mode [%d]", ret);
   20abe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   20ac2:	e7c6      	b.n	20a52 <mcp2515_start+0xe6>
   20ac4:	f06f 061b 	mvn.w	r6, #27
   20ac8:	e7cf      	b.n	20a6a <mcp2515_start+0xfe>
		return -EALREADY;
   20aca:	f06f 0577 	mvn.w	r5, #119	; 0x77
   20ace:	e778      	b.n	209c2 <mcp2515_start+0x56>
   20ad0:	0002fa90 	.word	0x0002fa90
   20ad4:	0002d104 	.word	0x0002d104
   20ad8:	0002fab8 	.word	0x0002fab8

00020adc <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
   20adc:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
   20ade:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   20ae0:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   20ae4:	d06f      	beq.n	20bc6 <baudrate_set+0xea>
   20ae6:	d83a      	bhi.n	20b5e <baudrate_set+0x82>
   20ae8:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   20aec:	d06e      	beq.n	20bcc <baudrate_set+0xf0>
   20aee:	d90a      	bls.n	20b06 <baudrate_set+0x2a>
   20af0:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   20af4:	d075      	beq.n	20be2 <baudrate_set+0x106>
   20af6:	d924      	bls.n	20b42 <baudrate_set+0x66>
   20af8:	f647 2312 	movw	r3, #31250	; 0x7a12
   20afc:	4299      	cmp	r1, r3
   20afe:	d12b      	bne.n	20b58 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   20b00:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   20b04:	e013      	b.n	20b2e <baudrate_set+0x52>
	switch (baudrate) {
   20b06:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   20b0a:	d061      	beq.n	20bd0 <baudrate_set+0xf4>
   20b0c:	d907      	bls.n	20b1e <baudrate_set+0x42>
   20b0e:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   20b12:	d063      	beq.n	20bdc <baudrate_set+0x100>
   20b14:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   20b18:	d110      	bne.n	20b3c <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   20b1a:	4b3c      	ldr	r3, [pc, #240]	; (20c0c <baudrate_set+0x130>)
   20b1c:	e007      	b.n	20b2e <baudrate_set+0x52>
	switch (baudrate) {
   20b1e:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   20b22:	d058      	beq.n	20bd6 <baudrate_set+0xfa>
   20b24:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   20b28:	d105      	bne.n	20b36 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   20b2a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   20b2e:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   20b32:	2000      	movs	r0, #0
   20b34:	4770      	bx	lr
	switch (baudrate) {
   20b36:	f06f 0015 	mvn.w	r0, #21
   20b3a:	4770      	bx	lr
   20b3c:	f06f 0015 	mvn.w	r0, #21
   20b40:	4770      	bx	lr
   20b42:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   20b46:	d04e      	beq.n	20be6 <baudrate_set+0x10a>
   20b48:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   20b4c:	d101      	bne.n	20b52 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   20b4e:	4b30      	ldr	r3, [pc, #192]	; (20c10 <baudrate_set+0x134>)
   20b50:	e7ed      	b.n	20b2e <baudrate_set+0x52>
	switch (baudrate) {
   20b52:	f06f 0015 	mvn.w	r0, #21
   20b56:	4770      	bx	lr
   20b58:	f06f 0015 	mvn.w	r0, #21
   20b5c:	4770      	bx	lr
   20b5e:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   20b62:	d042      	beq.n	20bea <baudrate_set+0x10e>
   20b64:	d909      	bls.n	20b7a <baudrate_set+0x9e>
   20b66:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   20b6a:	d046      	beq.n	20bfa <baudrate_set+0x11e>
   20b6c:	d91f      	bls.n	20bae <baudrate_set+0xd2>
   20b6e:	4b29      	ldr	r3, [pc, #164]	; (20c14 <baudrate_set+0x138>)
   20b70:	4299      	cmp	r1, r3
   20b72:	d148      	bne.n	20c06 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   20b74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   20b78:	e7d9      	b.n	20b2e <baudrate_set+0x52>
	switch (baudrate) {
   20b7a:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   20b7e:	d037      	beq.n	20bf0 <baudrate_set+0x114>
   20b80:	d905      	bls.n	20b8e <baudrate_set+0xb2>
   20b82:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   20b86:	d10f      	bne.n	20ba8 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   20b88:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   20b8c:	e7cf      	b.n	20b2e <baudrate_set+0x52>
	switch (baudrate) {
   20b8e:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   20b92:	4299      	cmp	r1, r3
   20b94:	d02e      	beq.n	20bf4 <baudrate_set+0x118>
   20b96:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   20b9a:	d102      	bne.n	20ba2 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   20b9c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   20ba0:	e7c5      	b.n	20b2e <baudrate_set+0x52>
	switch (baudrate) {
   20ba2:	f06f 0015 	mvn.w	r0, #21
   20ba6:	4770      	bx	lr
   20ba8:	f06f 0015 	mvn.w	r0, #21
   20bac:	4770      	bx	lr
   20bae:	4b1a      	ldr	r3, [pc, #104]	; (20c18 <baudrate_set+0x13c>)
   20bb0:	4299      	cmp	r1, r3
   20bb2:	d025      	beq.n	20c00 <baudrate_set+0x124>
   20bb4:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   20bb8:	d102      	bne.n	20bc0 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   20bba:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   20bbe:	e7b6      	b.n	20b2e <baudrate_set+0x52>
	switch (baudrate) {
   20bc0:	f06f 0015 	mvn.w	r0, #21
   20bc4:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   20bc6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   20bca:	e7b0      	b.n	20b2e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   20bcc:	4b13      	ldr	r3, [pc, #76]	; (20c1c <baudrate_set+0x140>)
   20bce:	e7ae      	b.n	20b2e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   20bd0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   20bd4:	e7ab      	b.n	20b2e <baudrate_set+0x52>
	switch (baudrate) {
   20bd6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   20bda:	e7a8      	b.n	20b2e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   20bdc:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   20be0:	e7a5      	b.n	20b2e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   20be2:	4b0f      	ldr	r3, [pc, #60]	; (20c20 <baudrate_set+0x144>)
   20be4:	e7a3      	b.n	20b2e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   20be6:	4b0f      	ldr	r3, [pc, #60]	; (20c24 <baudrate_set+0x148>)
   20be8:	e7a1      	b.n	20b2e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   20bea:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   20bee:	e79e      	b.n	20b2e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   20bf0:	4b0d      	ldr	r3, [pc, #52]	; (20c28 <baudrate_set+0x14c>)
   20bf2:	e79c      	b.n	20b2e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   20bf4:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   20bf8:	e799      	b.n	20b2e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   20bfa:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   20bfe:	e796      	b.n	20b2e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   20c00:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   20c04:	e793      	b.n	20b2e <baudrate_set+0x52>
	switch (baudrate) {
   20c06:	f06f 0015 	mvn.w	r0, #21
}
   20c0a:	4770      	bx	lr
   20c0c:	0013b000 	.word	0x0013b000
   20c10:	004ea000 	.word	0x004ea000
   20c14:	000f4240 	.word	0x000f4240
   20c18:	0003d090 	.word	0x0003d090
   20c1c:	00275000 	.word	0x00275000
   20c20:	0075c000 	.word	0x0075c000
   20c24:	003af000 	.word	0x003af000
   20c28:	013a9000 	.word	0x013a9000

00020c2c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   20c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20c2e:	4605      	mov	r5, r0
   20c30:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
   20c32:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   20c34:	f00b f95d 	bl	2bef2 <k_is_in_isr>
   20c38:	b910      	cbnz	r0, 20c40 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   20c3a:	4b12      	ldr	r3, [pc, #72]	; (20c84 <uarte_nrfx_poll_out+0x58>)
   20c3c:	781b      	ldrb	r3, [r3, #0]
   20c3e:	b983      	cbnz	r3, 20c62 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   20c40:	f04f 0340 	mov.w	r3, #64	; 0x40
   20c44:	f3ef 8411 	mrs	r4, BASEPRI
   20c48:	f383 8812 	msr	BASEPRI_MAX, r3
   20c4c:	f3bf 8f6f 	isb	sy
#endif

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   20c50:	4628      	mov	r0, r5
   20c52:	f00a f942 	bl	2aeda <is_tx_ready>
   20c56:	b940      	cbnz	r0, 20c6a <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
   20c58:	f384 8811 	msr	BASEPRI, r4
   20c5c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   20c60:	e7ee      	b.n	20c40 <uarte_nrfx_poll_out+0x14>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   20c62:	4628      	mov	r0, r5
   20c64:	f00a f99e 	bl	2afa4 <wait_tx_ready>
   20c68:	4604      	mov	r4, r0
	}

	*data->char_out = c;
   20c6a:	693b      	ldr	r3, [r7, #16]
   20c6c:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   20c6e:	2201      	movs	r2, #1
   20c70:	6939      	ldr	r1, [r7, #16]
   20c72:	4628      	mov	r0, r5
   20c74:	f00a f94b 	bl	2af0e <tx_start>
	__asm__ volatile(
   20c78:	f384 8811 	msr	BASEPRI, r4
   20c7c:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   20c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20c82:	bf00      	nop
   20c84:	20008ed3 	.word	0x20008ed3

00020c88 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   20c88:	b530      	push	{r4, r5, lr}
   20c8a:	b089      	sub	sp, #36	; 0x24
   20c8c:	4604      	mov	r4, r0
   20c8e:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   20c90:	f101 0018 	add.w	r0, r1, #24
   20c94:	f002 f9c4 	bl	23020 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   20c98:	4b1e      	ldr	r3, [pc, #120]	; (20d14 <endtx_stoptx_ppi_init+0x8c>)
   20c9a:	4298      	cmp	r0, r3
   20c9c:	d112      	bne.n	20cc4 <endtx_stoptx_ppi_init+0x3c>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   20c9e:	7e2b      	ldrb	r3, [r5, #24]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   20ca0:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
   20ca4:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   20ca6:	4a1c      	ldr	r2, [pc, #112]	; (20d18 <endtx_stoptx_ppi_init+0x90>)
   20ca8:	33a2      	adds	r3, #162	; 0xa2
   20caa:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   20cae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   20cb2:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   20cb4:	7e29      	ldrb	r1, [r5, #24]
   20cb6:	2301      	movs	r3, #1
   20cb8:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
   20cba:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   20cbe:	2000      	movs	r0, #0
}
   20cc0:	b009      	add	sp, #36	; 0x24
   20cc2:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Failed to allocate PPI Channel");
   20cc4:	4b15      	ldr	r3, [pc, #84]	; (20d1c <endtx_stoptx_ppi_init+0x94>)
   20cc6:	9307      	str	r3, [sp, #28]
   20cc8:	2302      	movs	r3, #2
   20cca:	f88d 3004 	strb.w	r3, [sp, #4]
   20cce:	2300      	movs	r3, #0
   20cd0:	f88d 3005 	strb.w	r3, [sp, #5]
   20cd4:	f88d 3006 	strb.w	r3, [sp, #6]
   20cd8:	f88d 3007 	strb.w	r3, [sp, #7]
   20cdc:	9a01      	ldr	r2, [sp, #4]
   20cde:	9206      	str	r2, [sp, #24]
   20ce0:	4619      	mov	r1, r3
   20ce2:	f363 0100 	bfi	r1, r3, #0, #1
   20ce6:	f363 0141 	bfi	r1, r3, #1, #1
   20cea:	f363 0182 	bfi	r1, r3, #2, #1
   20cee:	f363 01c5 	bfi	r1, r3, #3, #3
   20cf2:	2201      	movs	r2, #1
   20cf4:	f362 1188 	bfi	r1, r2, #6, #3
   20cf8:	2208      	movs	r2, #8
   20cfa:	f362 2152 	bfi	r1, r2, #9, #10
   20cfe:	f363 41de 	bfi	r1, r3, #19, #12
   20d02:	f363 71df 	bfi	r1, r3, #31, #1
   20d06:	aa06      	add	r2, sp, #24
   20d08:	4805      	ldr	r0, [pc, #20]	; (20d20 <endtx_stoptx_ppi_init+0x98>)
   20d0a:	f005 ffa4 	bl	26c56 <z_impl_z_log_msg_static_create>
		return -EIO;
   20d0e:	f06f 0004 	mvn.w	r0, #4
   20d12:	e7d5      	b.n	20cc0 <endtx_stoptx_ppi_init+0x38>
   20d14:	0bad0000 	.word	0x0bad0000
   20d18:	4001f000 	.word	0x4001f000
   20d1c:	0002fb68 	.word	0x0002fb68
   20d20:	0002d17c 	.word	0x0002d17c

00020d24 <random_byte_get>:
	__asm__ volatile(
   20d24:	f04f 0240 	mov.w	r2, #64	; 0x40
   20d28:	f3ef 8311 	mrs	r3, BASEPRI
   20d2c:	f382 8812 	msr	BASEPRI_MAX, r2
   20d30:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   20d34:	4a0a      	ldr	r2, [pc, #40]	; (20d60 <random_byte_get+0x3c>)
   20d36:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   20d3a:	b16a      	cbz	r2, 20d58 <random_byte_get+0x34>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   20d3c:	4a08      	ldr	r2, [pc, #32]	; (20d60 <random_byte_get+0x3c>)
   20d3e:	f8d2 0508 	ldr.w	r0, [r2, #1288]	; 0x508
		retval = nrf_rng_random_value_get(NRF_RNG);
   20d42:	b2c0      	uxtb	r0, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   20d44:	2100      	movs	r1, #0
   20d46:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
   20d4a:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	__asm__ volatile(
   20d4e:	f383 8811 	msr	BASEPRI, r3
   20d52:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   20d56:	4770      	bx	lr
	int retval = -EAGAIN;
   20d58:	f06f 000a 	mvn.w	r0, #10
   20d5c:	e7f7      	b.n	20d4e <random_byte_get+0x2a>
   20d5e:	bf00      	nop
   20d60:	4000d000 	.word	0x4000d000

00020d64 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   20d64:	b5f0      	push	{r4, r5, r6, r7, lr}
   20d66:	4686      	mov	lr, r0
	uint32_t last  = rngp->last;
   20d68:	7885      	ldrb	r5, [r0, #2]
	uint32_t mask  = rngp->mask;
   20d6a:	78c4      	ldrb	r4, [r0, #3]
	__asm__ volatile(
   20d6c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20d70:	f3ef 8011 	mrs	r0, BASEPRI
   20d74:	f383 8812 	msr	BASEPRI_MAX, r3
   20d78:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   20d7c:	f89e 6000 	ldrb.w	r6, [lr]
   20d80:	4633      	mov	r3, r6
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   20d82:	f89e 7001 	ldrb.w	r7, [lr, #1]

	available = (last - first) & mask;
   20d86:	1bad      	subs	r5, r5, r6
   20d88:	4025      	ands	r5, r4
	if (available < len) {
   20d8a:	42aa      	cmp	r2, r5
   20d8c:	d900      	bls.n	20d90 <rng_pool_get+0x2c>
		len = available;
   20d8e:	b2aa      	uxth	r2, r5

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   20d90:	eb06 0c02 	add.w	ip, r6, r2
   20d94:	ea0c 0c04 	and.w	ip, ip, r4
   20d98:	f88e c000 	strb.w	ip, [lr]
	__asm__ volatile(
   20d9c:	f380 8811 	msr	BASEPRI, r0
   20da0:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
   20da4:	4608      	mov	r0, r1
}
   20da6:	e007      	b.n	20db8 <rng_pool_get+0x54>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
   20da8:	eb0e 0203 	add.w	r2, lr, r3
   20dac:	7952      	ldrb	r2, [r2, #5]
   20dae:	f800 2b01 	strb.w	r2, [r0], #1
		first = (first + 1) & mask;
   20db2:	3301      	adds	r3, #1
   20db4:	4023      	ands	r3, r4
	while (likely(len--)) {
   20db6:	4662      	mov	r2, ip
   20db8:	f102 3cff 	add.w	ip, r2, #4294967295
   20dbc:	fa1f fc8c 	uxth.w	ip, ip
   20dc0:	2a00      	cmp	r2, #0
   20dc2:	d1f1      	bne.n	20da8 <rng_pool_get+0x44>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   20dc4:	42be      	cmp	r6, r7
   20dc6:	d10f      	bne.n	20de8 <rng_pool_get+0x84>
	__asm__ volatile(
   20dc8:	f04f 0240 	mov.w	r2, #64	; 0x40
   20dcc:	f3ef 8311 	mrs	r3, BASEPRI
   20dd0:	f382 8812 	msr	BASEPRI_MAX, r2
   20dd4:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   20dd8:	f89e 2000 	ldrb.w	r2, [lr]
   20ddc:	f88e 2001 	strb.w	r2, [lr, #1]
	__asm__ volatile(
   20de0:	f383 8811 	msr	BASEPRI, r3
   20de4:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   20de8:	1a40      	subs	r0, r0, r1
   20dea:	b280      	uxth	r0, r0
	available = available - len;
   20dec:	1a2d      	subs	r5, r5, r0
	if (available <= rngp->threshold) {
   20dee:	f89e 3004 	ldrb.w	r3, [lr, #4]
   20df2:	42ab      	cmp	r3, r5
   20df4:	d302      	bcc.n	20dfc <rng_pool_get+0x98>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   20df6:	4b02      	ldr	r3, [pc, #8]	; (20e00 <rng_pool_get+0x9c>)
   20df8:	2201      	movs	r2, #1
   20dfa:	601a      	str	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   20dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20dfe:	bf00      	nop
   20e00:	4000d000 	.word	0x4000d000

00020e04 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   20e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20e06:	460d      	mov	r5, r1
   20e08:	4614      	mov	r4, r2
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   20e0a:	f013 0f01 	tst.w	r3, #1
   20e0e:	d103      	bne.n	20e18 <entropy_nrf5_get_entropy_isr+0x14>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   20e10:	4826      	ldr	r0, [pc, #152]	; (20eac <entropy_nrf5_get_entropy_isr+0xa8>)
   20e12:	f7ff ffa7 	bl	20d64 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   20e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
   20e18:	b90a      	cbnz	r2, 20e1e <entropy_nrf5_get_entropy_isr+0x1a>
	return cnt;
   20e1a:	4620      	mov	r0, r4
   20e1c:	e7fb      	b.n	20e16 <entropy_nrf5_get_entropy_isr+0x12>
	__asm__ volatile(
   20e1e:	f04f 0340 	mov.w	r3, #64	; 0x40
   20e22:	f3ef 8611 	mrs	r6, BASEPRI
   20e26:	f383 8812 	msr	BASEPRI_MAX, r3
   20e2a:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   20e2e:	200d      	movs	r0, #13
   20e30:	f7f4 fd1c 	bl	1586c <arch_irq_is_enabled>
   20e34:	4607      	mov	r7, r0
		irq_disable(IRQN);
   20e36:	200d      	movs	r0, #13
   20e38:	f006 fa79 	bl	2732e <arch_irq_disable>
	__asm__ volatile(
   20e3c:	f386 8811 	msr	BASEPRI, r6
   20e40:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   20e44:	4b1a      	ldr	r3, [pc, #104]	; (20eb0 <entropy_nrf5_get_entropy_isr+0xac>)
   20e46:	2200      	movs	r2, #0
   20e48:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   20e4c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   20e50:	2201      	movs	r2, #1
   20e52:	601a      	str	r2, [r3, #0]
   20e54:	4b17      	ldr	r3, [pc, #92]	; (20eb4 <entropy_nrf5_get_entropy_isr+0xb0>)
   20e56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   20e5a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   20e5e:	4626      	mov	r6, r4
   20e60:	e00b      	b.n	20e7a <entropy_nrf5_get_entropy_isr+0x76>
	__asm__ volatile(
   20e62:	f04f 0340 	mov.w	r3, #64	; 0x40
   20e66:	f3ef 8011 	mrs	r0, BASEPRI
   20e6a:	f383 8812 	msr	BASEPRI_MAX, r3
   20e6e:	f3bf 8f6f 	isb	sy
	arch_cpu_atomic_idle(key);
   20e72:	f7f4 fb95 	bl	155a0 <arch_cpu_atomic_idle>
}
   20e76:	e000      	b.n	20e7a <entropy_nrf5_get_entropy_isr+0x76>
		} while (len);
   20e78:	b18e      	cbz	r6, 20e9e <entropy_nrf5_get_entropy_isr+0x9a>
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   20e7a:	4b0d      	ldr	r3, [pc, #52]	; (20eb0 <entropy_nrf5_get_entropy_isr+0xac>)
   20e7c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   20e80:	2b00      	cmp	r3, #0
   20e82:	d0ee      	beq.n	20e62 <entropy_nrf5_get_entropy_isr+0x5e>
			byte = random_byte_get();
   20e84:	f7ff ff4e 	bl	20d24 <random_byte_get>
   20e88:	4b0a      	ldr	r3, [pc, #40]	; (20eb4 <entropy_nrf5_get_entropy_isr+0xb0>)
   20e8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   20e8e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			if (byte < 0) {
   20e92:	2800      	cmp	r0, #0
   20e94:	dbf0      	blt.n	20e78 <entropy_nrf5_get_entropy_isr+0x74>
			buf[--len] = byte;
   20e96:	3e01      	subs	r6, #1
   20e98:	b2b6      	uxth	r6, r6
   20e9a:	55a8      	strb	r0, [r5, r6]
   20e9c:	e7ec      	b.n	20e78 <entropy_nrf5_get_entropy_isr+0x74>
		if (irq_enabled) {
   20e9e:	2f00      	cmp	r7, #0
   20ea0:	d0bb      	beq.n	20e1a <entropy_nrf5_get_entropy_isr+0x16>
			irq_enable(IRQN);
   20ea2:	200d      	movs	r0, #13
   20ea4:	f006 fa3e 	bl	27324 <arch_irq_enable>
   20ea8:	e7b7      	b.n	20e1a <entropy_nrf5_get_entropy_isr+0x16>
   20eaa:	bf00      	nop
   20eac:	2000878c 	.word	0x2000878c
   20eb0:	4000d000 	.word	0x4000d000
   20eb4:	e000e100 	.word	0xe000e100

00020eb8 <isr>:
{
   20eb8:	b510      	push	{r4, lr}
	byte = random_byte_get();
   20eba:	f7ff ff33 	bl	20d24 <random_byte_get>
	if (byte < 0) {
   20ebe:	2800      	cmp	r0, #0
   20ec0:	db06      	blt.n	20ed0 <isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   20ec2:	b2c4      	uxtb	r4, r0
   20ec4:	4621      	mov	r1, r4
   20ec6:	480a      	ldr	r0, [pc, #40]	; (20ef0 <isr+0x38>)
   20ec8:	f00a f912 	bl	2b0f0 <rng_pool_put>
	if (ret < 0) {
   20ecc:	2800      	cmp	r0, #0
   20ece:	db00      	blt.n	20ed2 <isr+0x1a>
}
   20ed0:	bd10      	pop	{r4, pc}
		ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.thr),
   20ed2:	4621      	mov	r1, r4
   20ed4:	4807      	ldr	r0, [pc, #28]	; (20ef4 <isr+0x3c>)
   20ed6:	f00a f90b 	bl	2b0f0 <rng_pool_put>
		if (ret < 0) {
   20eda:	2800      	cmp	r0, #0
   20edc:	db03      	blt.n	20ee6 <isr+0x2e>
	z_impl_k_sem_give(sem);
   20ede:	4806      	ldr	r0, [pc, #24]	; (20ef8 <isr+0x40>)
   20ee0:	f003 f89a 	bl	24018 <z_impl_k_sem_give>
}
   20ee4:	e7f4      	b.n	20ed0 <isr+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   20ee6:	4b05      	ldr	r3, [pc, #20]	; (20efc <isr+0x44>)
   20ee8:	2201      	movs	r2, #1
   20eea:	605a      	str	r2, [r3, #4]
}
   20eec:	e7f7      	b.n	20ede <isr+0x26>
   20eee:	bf00      	nop
   20ef0:	2000878c 	.word	0x2000878c
   20ef4:	200087a1 	.word	0x200087a1
   20ef8:	20008774 	.word	0x20008774
   20efc:	4000d000 	.word	0x4000d000

00020f00 <entropy_nrf5_get_entropy>:
{
   20f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20f02:	460f      	mov	r7, r1
   20f04:	4614      	mov	r4, r2
	while (len) {
   20f06:	e007      	b.n	20f18 <entropy_nrf5_get_entropy+0x18>
	return z_impl_k_sem_take(sem, timeout);
   20f08:	f04f 32ff 	mov.w	r2, #4294967295
   20f0c:	f04f 33ff 	mov.w	r3, #4294967295
   20f10:	f106 0018 	add.w	r0, r6, #24
   20f14:	f003 f8a8 	bl	24068 <z_impl_k_sem_take>
   20f18:	b1bc      	cbz	r4, 20f4a <entropy_nrf5_get_entropy+0x4a>
   20f1a:	4e0d      	ldr	r6, [pc, #52]	; (20f50 <entropy_nrf5_get_entropy+0x50>)
   20f1c:	f04f 32ff 	mov.w	r2, #4294967295
   20f20:	f04f 33ff 	mov.w	r3, #4294967295
   20f24:	4630      	mov	r0, r6
   20f26:	f003 f89f 	bl	24068 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   20f2a:	4622      	mov	r2, r4
   20f2c:	4639      	mov	r1, r7
   20f2e:	f106 0045 	add.w	r0, r6, #69	; 0x45
   20f32:	f7ff ff17 	bl	20d64 <rng_pool_get>
   20f36:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   20f38:	4630      	mov	r0, r6
   20f3a:	f003 f86d 	bl	24018 <z_impl_k_sem_give>
		if (bytes == 0U) {
   20f3e:	2d00      	cmp	r5, #0
   20f40:	d0e2      	beq.n	20f08 <entropy_nrf5_get_entropy+0x8>
		len -= bytes;
   20f42:	1b64      	subs	r4, r4, r5
   20f44:	b2a4      	uxth	r4, r4
		buf += bytes;
   20f46:	442f      	add	r7, r5
   20f48:	e7e6      	b.n	20f18 <entropy_nrf5_get_entropy+0x18>
}
   20f4a:	2000      	movs	r0, #0
   20f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20f4e:	bf00      	nop
   20f50:	2000875c 	.word	0x2000875c

00020f54 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   20f54:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   20f56:	4c18      	ldr	r4, [pc, #96]	; (20fb8 <entropy_nrf5_init+0x64>)
   20f58:	2201      	movs	r2, #1
   20f5a:	4611      	mov	r1, r2
   20f5c:	4620      	mov	r0, r4
   20f5e:	f00b f8da 	bl	2c116 <z_impl_k_sem_init>
   20f62:	2201      	movs	r2, #1
   20f64:	2100      	movs	r1, #0
   20f66:	f104 0018 	add.w	r0, r4, #24
   20f6a:	f00b f8d4 	bl	2c116 <z_impl_k_sem_init>
	k_sem_init(&entropy_nrf5_data.sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&entropy_nrf5_data.sem_sync, 0, 1);

	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.thr),
   20f6e:	2204      	movs	r2, #4
   20f70:	2108      	movs	r1, #8
   20f72:	f104 0045 	add.w	r0, r4, #69	; 0x45
   20f76:	f00a f8ce 	bl	2b116 <rng_pool_init>
		      CONFIG_ENTROPY_NRF5_THR_POOL_SIZE,
		      CONFIG_ENTROPY_NRF5_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.isr),
   20f7a:	220c      	movs	r2, #12
   20f7c:	2110      	movs	r1, #16
   20f7e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   20f82:	f00a f8c8 	bl	2b116 <rng_pool_init>
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   20f86:	4b0d      	ldr	r3, [pc, #52]	; (20fbc <entropy_nrf5_init+0x68>)
   20f88:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   20f8c:	f022 0201 	bic.w	r2, r2, #1
   20f90:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   20f94:	2400      	movs	r4, #0
   20f96:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
   20f9a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   20f9e:	2101      	movs	r1, #1
   20fa0:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   20fa4:	6019      	str	r1, [r3, #0]

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   20fa6:	4622      	mov	r2, r4
   20fa8:	200d      	movs	r0, #13
   20faa:	f006 f9c5 	bl	27338 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   20fae:	200d      	movs	r0, #13
   20fb0:	f006 f9b8 	bl	27324 <arch_irq_enable>

	return 0;
}
   20fb4:	4620      	mov	r0, r4
   20fb6:	bd10      	pop	{r4, pc}
   20fb8:	2000875c 	.word	0x2000875c
   20fbc:	4000d000 	.word	0x4000d000

00020fc0 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   20fc0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   20fc4:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   20fc8:	4b01      	ldr	r3, [pc, #4]	; (20fd0 <set_comparator+0x10>)
   20fca:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   20fce:	4770      	bx	lr
   20fd0:	40011000 	.word	0x40011000

00020fd4 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   20fd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   20fd8:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   20fda:	4a02      	ldr	r2, [pc, #8]	; (20fe4 <event_enable+0x10>)
   20fdc:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   20fe0:	4770      	bx	lr
   20fe2:	bf00      	nop
   20fe4:	40011000 	.word	0x40011000

00020fe8 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   20fe8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   20fec:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   20fee:	4a02      	ldr	r2, [pc, #8]	; (20ff8 <event_disable+0x10>)
   20ff0:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   20ff4:	4770      	bx	lr
   20ff6:	bf00      	nop
   20ff8:	40011000 	.word	0x40011000

00020ffc <counter>:
     return p_reg->COUNTER;
   20ffc:	4b01      	ldr	r3, [pc, #4]	; (21004 <counter+0x8>)
   20ffe:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   21002:	4770      	bx	lr
   21004:	40011000 	.word	0x40011000

00021008 <set_alarm>:
 * @param[in] chan A channel for which a new CC value is to be set.
 *
 * @param[in] req_cc Requested CC register value to be set.
 */
static void set_alarm(int32_t chan, uint32_t req_cc)
{
   21008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2100c:	4606      	mov	r6, r0
   2100e:	4688      	mov	r8, r1
	 * (however, even if such spurious event was generated, it would be
	 * properly filtered out in process_channel(), where the target time
	 * is checked).
	 * Clear also the event as it may already be generated at this point.
	 */
	event_disable(chan);
   21010:	f7ff ffea 	bl	20fe8 <event_disable>
	event_clear(chan);
   21014:	4630      	mov	r0, r6
   21016:	f00a f8a8 	bl	2b16a <event_clear>
	uint32_t cc_val = req_cc;
   2101a:	4645      	mov	r5, r8
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   2101c:	2703      	movs	r7, #3
   2101e:	e001      	b.n	21024 <set_alarm+0x1c>
				} else {
					break;
				}
			}

			cc_val = now + cc_inc;
   21020:	193d      	adds	r5, r7, r4
			cc_inc++;
   21022:	3701      	adds	r7, #1
		set_comparator(chan, cc_val);
   21024:	4629      	mov	r1, r5
   21026:	4630      	mov	r0, r6
   21028:	f7ff ffca 	bl	20fc0 <set_comparator>
		event_enable(chan);
   2102c:	4630      	mov	r0, r6
   2102e:	f7ff ffd1 	bl	20fd4 <event_enable>
		now = counter();
   21032:	f7ff ffe3 	bl	20ffc <counter>
   21036:	4604      	mov	r4, r0
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   21038:	1cc1      	adds	r1, r0, #3
   2103a:	4628      	mov	r0, r5
   2103c:	f00a f884 	bl	2b148 <counter_sub>
   21040:	4b0b      	ldr	r3, [pc, #44]	; (21070 <set_alarm+0x68>)
   21042:	4298      	cmp	r0, r3
   21044:	d911      	bls.n	2106a <set_alarm+0x62>
			if (event_check(chan)) {
   21046:	4630      	mov	r0, r6
   21048:	f00a f882 	bl	2b150 <event_check>
   2104c:	2800      	cmp	r0, #0
   2104e:	d0e7      	beq.n	21020 <set_alarm+0x18>
				now = counter();
   21050:	f7ff ffd4 	bl	20ffc <counter>
   21054:	4604      	mov	r4, r0
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   21056:	4641      	mov	r1, r8
   21058:	f00a f876 	bl	2b148 <counter_sub>
   2105c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   21060:	d903      	bls.n	2106a <set_alarm+0x62>
					event_clear(chan);
   21062:	4630      	mov	r0, r6
   21064:	f00a f881 	bl	2b16a <event_clear>
   21068:	e7da      	b.n	21020 <set_alarm+0x18>
		} else {
			break;
		}
	}
}
   2106a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2106e:	bf00      	nop
   21070:	007ffffd 	.word	0x007ffffd

00021074 <compare_int_lock>:
{
   21074:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   21076:	2301      	movs	r3, #1
   21078:	4083      	lsls	r3, r0
   2107a:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2107e:	4a0e      	ldr	r2, [pc, #56]	; (210b8 <compare_int_lock+0x44>)
   21080:	f3bf 8f5b 	dmb	ish
   21084:	e852 1f00 	ldrex	r1, [r2]
   21088:	ea01 0e0c 	and.w	lr, r1, ip
   2108c:	e842 e400 	strex	r4, lr, [r2]
   21090:	2c00      	cmp	r4, #0
   21092:	d1f7      	bne.n	21084 <compare_int_lock+0x10>
   21094:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   21098:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2109c:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   2109e:	4807      	ldr	r0, [pc, #28]	; (210bc <compare_int_lock+0x48>)
   210a0:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   210a4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   210a8:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
   210ac:	420b      	tst	r3, r1
}
   210ae:	bf14      	ite	ne
   210b0:	2001      	movne	r0, #1
   210b2:	2000      	moveq	r0, #0
   210b4:	bd10      	pop	{r4, pc}
   210b6:	bf00      	nop
   210b8:	200087b4 	.word	0x200087b4
   210bc:	40011000 	.word	0x40011000

000210c0 <channel_processing_check_and_clear>:
	sys_clock_announce(dticks);
}

static bool channel_processing_check_and_clear(int32_t chan)
{
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   210c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   210c4:	4083      	lsls	r3, r0
    return p_reg->INTENSET & mask;
   210c6:	4a14      	ldr	r2, [pc, #80]	; (21118 <channel_processing_check_and_clear+0x58>)
   210c8:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   210cc:	4213      	tst	r3, r2
   210ce:	d101      	bne.n	210d4 <channel_processing_check_and_clear+0x14>
			event_clear(chan);
			return true;
		}
	}

	return false;
   210d0:	2000      	movs	r0, #0
}
   210d2:	4770      	bx	lr
{
   210d4:	b510      	push	{r4, lr}
   210d6:	4604      	mov	r4, r0
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   210d8:	2301      	movs	r3, #1
   210da:	4083      	lsls	r3, r0
   210dc:	43db      	mvns	r3, r3
   210de:	490f      	ldr	r1, [pc, #60]	; (2111c <channel_processing_check_and_clear+0x5c>)
   210e0:	f3bf 8f5b 	dmb	ish
   210e4:	e851 2f00 	ldrex	r2, [r1]
   210e8:	ea02 0003 	and.w	r0, r2, r3
   210ec:	e841 0c00 	strex	ip, r0, [r1]
   210f0:	f1bc 0f00 	cmp.w	ip, #0
   210f4:	d1f6      	bne.n	210e4 <channel_processing_check_and_clear+0x24>
   210f6:	f3bf 8f5b 	dmb	ish
   210fa:	fa22 f304 	lsr.w	r3, r2, r4
   210fe:	f013 0f01 	tst.w	r3, #1
   21102:	d103      	bne.n	2110c <channel_processing_check_and_clear+0x4c>
		    event_check(chan)) {
   21104:	4620      	mov	r0, r4
   21106:	f00a f823 	bl	2b150 <event_check>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   2110a:	b118      	cbz	r0, 21114 <channel_processing_check_and_clear+0x54>
			event_clear(chan);
   2110c:	4620      	mov	r0, r4
   2110e:	f00a f82c 	bl	2b16a <event_clear>
			return true;
   21112:	2001      	movs	r0, #1
}
   21114:	bd10      	pop	{r4, pc}
   21116:	bf00      	nop
   21118:	40011000 	.word	0x40011000
   2111c:	200087b0 	.word	0x200087b0

00021120 <compare_int_unlock>:
	if (key) {
   21120:	b901      	cbnz	r1, 21124 <compare_int_unlock+0x4>
}
   21122:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   21124:	2301      	movs	r3, #1
   21126:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21128:	4a11      	ldr	r2, [pc, #68]	; (21170 <compare_int_unlock+0x50>)
   2112a:	f3bf 8f5b 	dmb	ish
   2112e:	e852 cf00 	ldrex	ip, [r2]
   21132:	ea4c 0c03 	orr.w	ip, ip, r3
   21136:	e842 c100 	strex	r1, ip, [r2]
   2113a:	2900      	cmp	r1, #0
   2113c:	d1f7      	bne.n	2112e <compare_int_unlock+0xe>
   2113e:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   21142:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   21146:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   21148:	4a0a      	ldr	r2, [pc, #40]	; (21174 <compare_int_unlock+0x54>)
   2114a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2114e:	f3bf 8f5b 	dmb	ish
   21152:	4b09      	ldr	r3, [pc, #36]	; (21178 <compare_int_unlock+0x58>)
   21154:	681b      	ldr	r3, [r3, #0]
   21156:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   2115a:	40c3      	lsrs	r3, r0
   2115c:	f013 0f01 	tst.w	r3, #1
   21160:	d0df      	beq.n	21122 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   21162:	4b06      	ldr	r3, [pc, #24]	; (2117c <compare_int_unlock+0x5c>)
   21164:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   21168:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   2116c:	e7d9      	b.n	21122 <compare_int_unlock+0x2>
   2116e:	bf00      	nop
   21170:	200087b4 	.word	0x200087b4
   21174:	40011000 	.word	0x40011000
   21178:	200087b0 	.word	0x200087b0
   2117c:	e000e100 	.word	0xe000e100

00021180 <sys_clock_timeout_handler>:
{
   21180:	b538      	push	{r3, r4, r5, lr}
   21182:	4614      	mov	r4, r2
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   21184:	4610      	mov	r0, r2
   21186:	4619      	mov	r1, r3
   21188:	f009 fffb 	bl	2b182 <absolute_time_to_cc>
   2118c:	4602      	mov	r2, r0
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   2118e:	490d      	ldr	r1, [pc, #52]	; (211c4 <sys_clock_timeout_handler+0x44>)
   21190:	680b      	ldr	r3, [r1, #0]
   21192:	1ae0      	subs	r0, r4, r3
	last_count += dticks * CYC_PER_TICK;
   21194:	181b      	adds	r3, r3, r0
   21196:	684c      	ldr	r4, [r1, #4]
   21198:	f144 0400 	adc.w	r4, r4, #0
   2119c:	600b      	str	r3, [r1, #0]
   2119e:	604c      	str	r4, [r1, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   211a0:	f5a2 1300 	sub.w	r3, r2, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   211a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   211a8:	d209      	bcs.n	211be <sys_clock_timeout_handler+0x3e>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   211aa:	4b07      	ldr	r3, [pc, #28]	; (211c8 <sys_clock_timeout_handler+0x48>)
   211ac:	681b      	ldr	r3, [r3, #0]
   211ae:	0a19      	lsrs	r1, r3, #8
   211b0:	061b      	lsls	r3, r3, #24
   211b2:	18d4      	adds	r4, r2, r3
   211b4:	f141 0500 	adc.w	r5, r1, #0
   211b8:	4b04      	ldr	r3, [pc, #16]	; (211cc <sys_clock_timeout_handler+0x4c>)
   211ba:	e9c3 4500 	strd	r4, r5, [r3]
	sys_clock_announce(dticks);
   211be:	f003 fe25 	bl	24e0c <sys_clock_announce>
}
   211c2:	bd38      	pop	{r3, r4, r5, pc}
   211c4:	20002878 	.word	0x20002878
   211c8:	200087b8 	.word	0x200087b8
   211cc:	20002880 	.word	0x20002880

000211d0 <z_nrf_rtc_timer_read>:
{
   211d0:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   211d2:	4b0d      	ldr	r3, [pc, #52]	; (21208 <z_nrf_rtc_timer_read+0x38>)
   211d4:	681c      	ldr	r4, [r3, #0]
   211d6:	0a25      	lsrs	r5, r4, #8
   211d8:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
   211da:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   211de:	f7ff ff0d 	bl	20ffc <counter>
   211e2:	4603      	mov	r3, r0
	val += cntr;
   211e4:	1900      	adds	r0, r0, r4
   211e6:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   211ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   211ee:	d20a      	bcs.n	21206 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   211f0:	4b06      	ldr	r3, [pc, #24]	; (2120c <z_nrf_rtc_timer_read+0x3c>)
   211f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   211f6:	4290      	cmp	r0, r2
   211f8:	eb71 0303 	sbcs.w	r3, r1, r3
   211fc:	d203      	bcs.n	21206 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   211fe:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   21202:	f141 0100 	adc.w	r1, r1, #0
}
   21206:	bd38      	pop	{r3, r4, r5, pc}
   21208:	200087b8 	.word	0x200087b8
   2120c:	20002880 	.word	0x20002880

00021210 <compare_set_nolocks>:
{
   21210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21212:	4606      	mov	r6, r0
   21214:	4614      	mov	r4, r2
   21216:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   21218:	4610      	mov	r0, r2
   2121a:	4619      	mov	r1, r3
   2121c:	f009 ffb1 	bl	2b182 <absolute_time_to_cc>
   21220:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   21222:	f7ff ffd5 	bl	211d0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   21226:	42a0      	cmp	r0, r4
   21228:	eb71 0305 	sbcs.w	r3, r1, r5
   2122c:	d215      	bcs.n	2125a <compare_set_nolocks+0x4a>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   2122e:	1a20      	subs	r0, r4, r0
   21230:	eb65 0101 	sbc.w	r1, r5, r1
   21234:	4b17      	ldr	r3, [pc, #92]	; (21294 <compare_set_nolocks+0x84>)
   21236:	4298      	cmp	r0, r3
   21238:	f171 0100 	sbcs.w	r1, r1, #0
   2123c:	d227      	bcs.n	2128e <compare_set_nolocks+0x7e>
		if (target_time != cc_data[chan].target_time) {
   2123e:	4b16      	ldr	r3, [pc, #88]	; (21298 <compare_set_nolocks+0x88>)
   21240:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   21244:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   21248:	42ab      	cmp	r3, r5
   2124a:	bf08      	it	eq
   2124c:	42a2      	cmpeq	r2, r4
   2124e:	d012      	beq.n	21276 <compare_set_nolocks+0x66>
			set_alarm(chan, cc_value);
   21250:	4639      	mov	r1, r7
   21252:	4630      	mov	r0, r6
   21254:	f7ff fed8 	bl	21008 <set_alarm>
   21258:	e00d      	b.n	21276 <compare_set_nolocks+0x66>
		atomic_or(&force_isr_mask, BIT(chan));
   2125a:	2301      	movs	r3, #1
   2125c:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2125e:	4a0f      	ldr	r2, [pc, #60]	; (2129c <compare_set_nolocks+0x8c>)
   21260:	f3bf 8f5b 	dmb	ish
   21264:	e852 0f00 	ldrex	r0, [r2]
   21268:	4318      	orrs	r0, r3
   2126a:	e842 0100 	strex	r1, r0, [r2]
   2126e:	2900      	cmp	r1, #0
   21270:	d1f8      	bne.n	21264 <compare_set_nolocks+0x54>
   21272:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   21276:	4b08      	ldr	r3, [pc, #32]	; (21298 <compare_set_nolocks+0x88>)
   21278:	0132      	lsls	r2, r6, #4
   2127a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   2127e:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   21282:	9906      	ldr	r1, [sp, #24]
   21284:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   21286:	9b07      	ldr	r3, [sp, #28]
   21288:	6073      	str	r3, [r6, #4]
	return ret;
   2128a:	2000      	movs	r0, #0
}
   2128c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
   2128e:	f06f 0015 	mvn.w	r0, #21
   21292:	e7fb      	b.n	2128c <compare_set_nolocks+0x7c>
   21294:	00800001 	.word	0x00800001
   21298:	20002868 	.word	0x20002868
   2129c:	200087b0 	.word	0x200087b0

000212a0 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   212a0:	b530      	push	{r4, r5, lr}
   212a2:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
   212a4:	2300      	movs	r3, #0
   212a6:	4a1d      	ldr	r2, [pc, #116]	; (2131c <sys_clock_driver_init+0x7c>)
   212a8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   212ac:	2b00      	cmp	r3, #0
   212ae:	dd24      	ble.n	212fa <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
   212b0:	4c1a      	ldr	r4, [pc, #104]	; (2131c <sys_clock_driver_init+0x7c>)
   212b2:	2502      	movs	r5, #2
   212b4:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   212b8:	4b19      	ldr	r3, [pc, #100]	; (21320 <sys_clock_driver_init+0x80>)
   212ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   212be:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   212c2:	2200      	movs	r2, #0
   212c4:	2101      	movs	r1, #1
   212c6:	2011      	movs	r0, #17
   212c8:	f006 f836 	bl	27338 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   212cc:	2011      	movs	r0, #17
   212ce:	f006 f829 	bl	27324 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   212d2:	2301      	movs	r3, #1
   212d4:	60a3      	str	r3, [r4, #8]
   212d6:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   212d8:	4a12      	ldr	r2, [pc, #72]	; (21324 <sys_clock_driver_init+0x84>)
   212da:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   212dc:	2400      	movs	r4, #0
   212de:	9401      	str	r4, [sp, #4]
   212e0:	4b11      	ldr	r3, [pc, #68]	; (21328 <sys_clock_driver_init+0x88>)
   212e2:	9300      	str	r3, [sp, #0]
   212e4:	4a11      	ldr	r2, [pc, #68]	; (2132c <sys_clock_driver_init+0x8c>)
   212e6:	2300      	movs	r3, #0
   212e8:	4620      	mov	r0, r4
   212ea:	f009 ff54 	bl	2b196 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   212ee:	4628      	mov	r0, r5
   212f0:	f7fd fd6c 	bl	1edcc <z_nrf_clock_control_lf_on>

	return 0;
}
   212f4:	4620      	mov	r0, r4
   212f6:	b003      	add	sp, #12
   212f8:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   212fa:	4a0d      	ldr	r2, [pc, #52]	; (21330 <sys_clock_driver_init+0x90>)
   212fc:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   21300:	f04f 30ff 	mov.w	r0, #4294967295
   21304:	f04f 31ff 	mov.w	r1, #4294967295
   21308:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2130c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   21310:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   21312:	4902      	ldr	r1, [pc, #8]	; (2131c <sys_clock_driver_init+0x7c>)
   21314:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   21318:	3301      	adds	r3, #1
   2131a:	e7c7      	b.n	212ac <sys_clock_driver_init+0xc>
   2131c:	40011000 	.word	0x40011000
   21320:	e000e100 	.word	0xe000e100
   21324:	200087b4 	.word	0x200087b4
   21328:	00021181 	.word	0x00021181
   2132c:	007fffff 	.word	0x007fffff
   21330:	20002868 	.word	0x20002868

00021334 <process_channel>:
{
   21334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21338:	b082      	sub	sp, #8
   2133a:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   2133c:	f7ff fec0 	bl	210c0 <channel_processing_check_and_clear>
   21340:	b910      	cbnz	r0, 21348 <process_channel+0x14>
}
   21342:	b002      	add	sp, #8
   21344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   21348:	f7ff ff42 	bl	211d0 <z_nrf_rtc_timer_read>
   2134c:	4682      	mov	sl, r0
   2134e:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
   21350:	f009 ff1a 	bl	2b188 <full_int_lock>
   21354:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
   21356:	4b15      	ldr	r3, [pc, #84]	; (213ac <process_channel+0x78>)
   21358:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   2135c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   21360:	45c2      	cmp	sl, r8
   21362:	eb75 0509 	sbcs.w	r5, r5, r9
   21366:	d20b      	bcs.n	21380 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   21368:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
   2136a:	4630      	mov	r0, r6
   2136c:	f009 ff10 	bl	2b190 <full_int_unlock>
		if (handler) {
   21370:	2d00      	cmp	r5, #0
   21372:	d0e6      	beq.n	21342 <process_channel+0xe>
			handler(chan, expire_time, user_context);
   21374:	9700      	str	r7, [sp, #0]
   21376:	4642      	mov	r2, r8
   21378:	464b      	mov	r3, r9
   2137a:	4620      	mov	r0, r4
   2137c:	47a8      	blx	r5
}
   2137e:	e7e0      	b.n	21342 <process_channel+0xe>
			handler = cc_data[chan].callback;
   21380:	4a0a      	ldr	r2, [pc, #40]	; (213ac <process_channel+0x78>)
   21382:	0123      	lsls	r3, r4, #4
   21384:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   21388:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
   2138a:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
   2138c:	2000      	movs	r0, #0
   2138e:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   21390:	f04f 32ff 	mov.w	r2, #4294967295
   21394:	f04f 33ff 	mov.w	r3, #4294967295
   21398:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   2139c:	4620      	mov	r0, r4
   2139e:	f7ff fe23 	bl	20fe8 <event_disable>
			event_clear(chan);
   213a2:	4620      	mov	r0, r4
   213a4:	f009 fee1 	bl	2b16a <event_clear>
   213a8:	e7df      	b.n	2136a <process_channel+0x36>
   213aa:	bf00      	nop
   213ac:	20002868 	.word	0x20002868

000213b0 <rtc_nrf_isr>:
{
   213b0:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   213b2:	4b0e      	ldr	r3, [pc, #56]	; (213ec <rtc_nrf_isr+0x3c>)
   213b4:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   213b8:	f013 0f02 	tst.w	r3, #2
   213bc:	d00d      	beq.n	213da <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   213be:	4b0b      	ldr	r3, [pc, #44]	; (213ec <rtc_nrf_isr+0x3c>)
   213c0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   213c4:	b14b      	cbz	r3, 213da <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   213c6:	4b09      	ldr	r3, [pc, #36]	; (213ec <rtc_nrf_isr+0x3c>)
   213c8:	2200      	movs	r2, #0
   213ca:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   213ce:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
   213d2:	4a07      	ldr	r2, [pc, #28]	; (213f0 <rtc_nrf_isr+0x40>)
   213d4:	6813      	ldr	r3, [r2, #0]
   213d6:	3301      	adds	r3, #1
   213d8:	6013      	str	r3, [r2, #0]
{
   213da:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   213dc:	2c00      	cmp	r4, #0
   213de:	dd00      	ble.n	213e2 <rtc_nrf_isr+0x32>
}
   213e0:	bd10      	pop	{r4, pc}
		process_channel(chan);
   213e2:	4620      	mov	r0, r4
   213e4:	f7ff ffa6 	bl	21334 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   213e8:	3401      	adds	r4, #1
   213ea:	e7f7      	b.n	213dc <rtc_nrf_isr+0x2c>
   213ec:	40011000 	.word	0x40011000
   213f0:	200087b8 	.word	0x200087b8

000213f4 <sys_clock_set_timeout>:
{
   213f4:	b510      	push	{r4, lr}
   213f6:	b082      	sub	sp, #8
	if (ticks == K_TICKS_FOREVER) {
   213f8:	f1b0 3fff 	cmp.w	r0, #4294967295
   213fc:	d006      	beq.n	2140c <sys_clock_set_timeout+0x18>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   213fe:	2801      	cmp	r0, #1
   21400:	dd09      	ble.n	21416 <sys_clock_set_timeout+0x22>
   21402:	4b15      	ldr	r3, [pc, #84]	; (21458 <sys_clock_set_timeout+0x64>)
   21404:	4298      	cmp	r0, r3
   21406:	dc24      	bgt.n	21452 <sys_clock_set_timeout+0x5e>
   21408:	4604      	mov	r4, r0
   2140a:	e005      	b.n	21418 <sys_clock_set_timeout+0x24>
		sys_busy = false;
   2140c:	4b13      	ldr	r3, [pc, #76]	; (2145c <sys_clock_set_timeout+0x68>)
   2140e:	2200      	movs	r2, #0
   21410:	701a      	strb	r2, [r3, #0]
		cyc = MAX_TICKS * CYC_PER_TICK;
   21412:	4c13      	ldr	r4, [pc, #76]	; (21460 <sys_clock_set_timeout+0x6c>)
   21414:	e003      	b.n	2141e <sys_clock_set_timeout+0x2a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   21416:	2401      	movs	r4, #1
		sys_busy = true;
   21418:	4b10      	ldr	r3, [pc, #64]	; (2145c <sys_clock_set_timeout+0x68>)
   2141a:	2201      	movs	r2, #1
   2141c:	701a      	strb	r2, [r3, #0]
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   2141e:	f7ff fed7 	bl	211d0 <z_nrf_rtc_timer_read>
   21422:	4b10      	ldr	r3, [pc, #64]	; (21464 <sys_clock_set_timeout+0x70>)
   21424:	681a      	ldr	r2, [r3, #0]
   21426:	685b      	ldr	r3, [r3, #4]
   21428:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
   2142a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2142e:	d300      	bcc.n	21432 <sys_clock_set_timeout+0x3e>
		cyc = 0;
   21430:	2400      	movs	r4, #0
	cyc += unannounced;
   21432:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   21434:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
   21438:	d300      	bcc.n	2143c <sys_clock_set_timeout+0x48>
		cyc = MAX_CYCLES;
   2143a:	4c09      	ldr	r4, [pc, #36]	; (21460 <sys_clock_set_timeout+0x6c>)
	uint64_t target_time = cyc + last_count;
   2143c:	2000      	movs	r0, #0
   2143e:	1912      	adds	r2, r2, r4
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   21440:	9001      	str	r0, [sp, #4]
   21442:	4909      	ldr	r1, [pc, #36]	; (21468 <sys_clock_set_timeout+0x74>)
   21444:	9100      	str	r1, [sp, #0]
   21446:	f143 0300 	adc.w	r3, r3, #0
   2144a:	f009 fea4 	bl	2b196 <compare_set>
}
   2144e:	b002      	add	sp, #8
   21450:	bd10      	pop	{r4, pc}
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   21452:	4c03      	ldr	r4, [pc, #12]	; (21460 <sys_clock_set_timeout+0x6c>)
   21454:	e7e0      	b.n	21418 <sys_clock_set_timeout+0x24>
   21456:	bf00      	nop
   21458:	007ffffe 	.word	0x007ffffe
   2145c:	20008ed2 	.word	0x20008ed2
   21460:	007fffff 	.word	0x007fffff
   21464:	20002878 	.word	0x20002878
   21468:	00021181 	.word	0x00021181

0002146c <sys_clock_elapsed>:
{
   2146c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   2146e:	f7ff feaf 	bl	211d0 <z_nrf_rtc_timer_read>
   21472:	4b02      	ldr	r3, [pc, #8]	; (2147c <sys_clock_elapsed+0x10>)
   21474:	681b      	ldr	r3, [r3, #0]
}
   21476:	1ac0      	subs	r0, r0, r3
   21478:	bd08      	pop	{r3, pc}
   2147a:	bf00      	nop
   2147c:	20002878 	.word	0x20002878

00021480 <nrf_gpio_pin_write>:
    if (value == 0)
   21480:	b969      	cbnz	r1, 2149e <nrf_gpio_pin_write+0x1e>
    *p_pin = pin_number & 0x1F;
   21482:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   21486:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21488:	2801      	cmp	r0, #1
   2148a:	d006      	beq.n	2149a <nrf_gpio_pin_write+0x1a>
        case 0: return NRF_P0;
   2148c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   21490:	2301      	movs	r3, #1
   21492:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   21494:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   21498:	4770      	bx	lr
        case 1: return NRF_P1;
   2149a:	4a08      	ldr	r2, [pc, #32]	; (214bc <nrf_gpio_pin_write+0x3c>)
   2149c:	e7f8      	b.n	21490 <nrf_gpio_pin_write+0x10>
    *p_pin = pin_number & 0x1F;
   2149e:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   214a2:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   214a4:	2801      	cmp	r0, #1
   214a6:	d006      	beq.n	214b6 <nrf_gpio_pin_write+0x36>
        case 0: return NRF_P0;
   214a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   214ac:	2301      	movs	r3, #1
   214ae:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   214b0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
   214b4:	4770      	bx	lr
        case 1: return NRF_P1;
   214b6:	4a01      	ldr	r2, [pc, #4]	; (214bc <nrf_gpio_pin_write+0x3c>)
   214b8:	e7f8      	b.n	214ac <nrf_gpio_pin_write+0x2c>
   214ba:	bf00      	nop
   214bc:	50000300 	.word	0x50000300

000214c0 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   214c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   214c4:	b083      	sub	sp, #12
   214c6:	4607      	mov	r7, r0
   214c8:	4688      	mov	r8, r1
   214ca:	4693      	mov	fp, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   214cc:	2400      	movs	r4, #0
   214ce:	e02a      	b.n	21526 <pinctrl_configure_pins+0x66>
		uint32_t write = NO_WRITE;
		nrf_gpio_pin_dir_t dir;
		nrf_gpio_pin_input_t input;

		if (pin == NRF_PIN_DISCONNECTED) {
			pin = 0xFFFFFFFFU;
   214d0:	f04f 35ff 	mov.w	r5, #4294967295
   214d4:	e033      	b.n	2153e <pinctrl_configure_pins+0x7e>
		}

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = pin;
   214d6:	f8cb 550c 	str.w	r5, [fp, #1292]	; 0x50c
			write = 1U;
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   214da:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   214dc:	9601      	str	r6, [sp, #4]
			write = 1U;
   214de:	4631      	mov	r1, r6
		default:
			return -ENOTSUP;
		}

		/* configure GPIO properties */
		if (pin != NRF_PIN_DISCONNECTED) {
   214e0:	2d7f      	cmp	r5, #127	; 0x7f
   214e2:	d01e      	beq.n	21522 <pinctrl_configure_pins+0x62>
			if (write != NO_WRITE) {
   214e4:	f1b1 3fff 	cmp.w	r1, #4294967295
   214e8:	d166      	bne.n	215b8 <pinctrl_configure_pins+0xf8>
				nrf_gpio_pin_write(pin, write);
			}

			/* force input and disconnected buffer for low power */
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   214ea:	f857 200a 	ldr.w	r2, [r7, sl]
   214ee:	f412 5f00 	tst.w	r2, #8192	; 0x2000
   214f2:	d002      	beq.n	214fa <pinctrl_configure_pins+0x3a>
				dir = NRF_GPIO_PIN_DIR_INPUT;
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   214f4:	2601      	movs	r6, #1
				dir = NRF_GPIO_PIN_DIR_INPUT;
   214f6:	2300      	movs	r3, #0
   214f8:	9301      	str	r3, [sp, #4]
			}

			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   214fa:	f3c2 12c1 	ubfx	r2, r2, #7, #2
    *p_pin = pin_number & 0x1F;
   214fe:	f005 011f 	and.w	r1, r5, #31
    return pin_number >> 5;
   21502:	096d      	lsrs	r5, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21504:	2d01      	cmp	r5, #1
   21506:	d05b      	beq.n	215c0 <pinctrl_configure_pins+0x100>
        case 0: return NRF_P0;
   21508:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   2150c:	9b01      	ldr	r3, [sp, #4]
   2150e:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   21512:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   21516:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   2151a:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   2151e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   21522:	3401      	adds	r4, #1
   21524:	b2e4      	uxtb	r4, r4
   21526:	4544      	cmp	r4, r8
   21528:	d24c      	bcs.n	215c4 <pinctrl_configure_pins+0x104>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2152a:	ea4f 0a84 	mov.w	sl, r4, lsl #2
   2152e:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   21532:	f3c3 2943 	ubfx	r9, r3, #9, #4
		uint32_t pin = NRF_GET_PIN(pins[i]);
   21536:	f003 057f 	and.w	r5, r3, #127	; 0x7f
		if (pin == NRF_PIN_DISCONNECTED) {
   2153a:	2d7f      	cmp	r5, #127	; 0x7f
   2153c:	d0c8      	beq.n	214d0 <pinctrl_configure_pins+0x10>
		switch (NRF_GET_FUN(pins[i])) {
   2153e:	0c1b      	lsrs	r3, r3, #16
   21540:	2b06      	cmp	r3, #6
   21542:	d843      	bhi.n	215cc <pinctrl_configure_pins+0x10c>
   21544:	a201      	add	r2, pc, #4	; (adr r2, 2154c <pinctrl_configure_pins+0x8c>)
   21546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2154a:	bf00      	nop
   2154c:	000214d7 	.word	0x000214d7
   21550:	00021569 	.word	0x00021569
   21554:	00021577 	.word	0x00021577
   21558:	00021583 	.word	0x00021583
   2155c:	00021591 	.word	0x00021591
   21560:	0002159f 	.word	0x0002159f
   21564:	000215ab 	.word	0x000215ab
			NRF_PSEL_UART(reg, RXD) = pin;
   21568:	f8cb 5514 	str.w	r5, [fp, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2156c:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2156e:	9601      	str	r6, [sp, #4]
		uint32_t write = NO_WRITE;
   21570:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   21574:	e7b4      	b.n	214e0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, RTS) = pin;
   21576:	f8cb 5508 	str.w	r5, [fp, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2157a:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   2157c:	9601      	str	r6, [sp, #4]
			write = 1U;
   2157e:	4631      	mov	r1, r6
			break;
   21580:	e7ae      	b.n	214e0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, CTS) = pin;
   21582:	f8cb 5510 	str.w	r5, [fp, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   21586:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   21588:	9601      	str	r6, [sp, #4]
		uint32_t write = NO_WRITE;
   2158a:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   2158e:	e7a7      	b.n	214e0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   21590:	f8cb 5508 	str.w	r5, [fp, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   21594:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   21596:	2301      	movs	r3, #1
   21598:	9301      	str	r3, [sp, #4]
			write = 0U;
   2159a:	4631      	mov	r1, r6
			break;
   2159c:	e7a0      	b.n	214e0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   2159e:	f8cb 550c 	str.w	r5, [fp, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   215a2:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   215a4:	9601      	str	r6, [sp, #4]
			write = 0U;
   215a6:	2100      	movs	r1, #0
			break;
   215a8:	e79a      	b.n	214e0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   215aa:	f8cb 5510 	str.w	r5, [fp, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   215ae:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   215b0:	9601      	str	r6, [sp, #4]
		uint32_t write = NO_WRITE;
   215b2:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   215b6:	e793      	b.n	214e0 <pinctrl_configure_pins+0x20>
				nrf_gpio_pin_write(pin, write);
   215b8:	4628      	mov	r0, r5
   215ba:	f7ff ff61 	bl	21480 <nrf_gpio_pin_write>
   215be:	e794      	b.n	214ea <pinctrl_configure_pins+0x2a>
        case 1: return NRF_P1;
   215c0:	4804      	ldr	r0, [pc, #16]	; (215d4 <pinctrl_configure_pins+0x114>)
   215c2:	e7a3      	b.n	2150c <pinctrl_configure_pins+0x4c>
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   215c4:	2000      	movs	r0, #0
}
   215c6:	b003      	add	sp, #12
   215c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (NRF_GET_FUN(pins[i])) {
   215cc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   215d0:	e7f9      	b.n	215c6 <pinctrl_configure_pins+0x106>
   215d2:	bf00      	nop
   215d4:	50000300 	.word	0x50000300

000215d8 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   215d8:	b508      	push	{r3, lr}
   215da:	4602      	mov	r2, r0
   215dc:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   215de:	4802      	ldr	r0, [pc, #8]	; (215e8 <multithreading_lock_acquire+0x10>)
   215e0:	f002 fc1a 	bl	23e18 <z_impl_k_mutex_lock>
	return k_mutex_lock(&mpsl_lock, timeout);
}
   215e4:	bd08      	pop	{r3, pc}
   215e6:	bf00      	nop
   215e8:	20000ab4 	.word	0x20000ab4

000215ec <multithreading_lock_release>:

void multithreading_lock_release(void)
{
   215ec:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   215ee:	4802      	ldr	r0, [pc, #8]	; (215f8 <multithreading_lock_release+0xc>)
   215f0:	f002 fc96 	bl	23f20 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&mpsl_lock);
}
   215f4:	bd08      	pop	{r3, pc}
   215f6:	bf00      	nop
   215f8:	20000ab4 	.word	0x20000ab4

000215fc <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   215fc:	b510      	push	{r4, lr}
   215fe:	b088      	sub	sp, #32
	z_impl_log_panic();
   21600:	f7f3 f9e6 	bl	149d0 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   21604:	4b14      	ldr	r3, [pc, #80]	; (21658 <k_sys_fatal_error_handler+0x5c>)
   21606:	9307      	str	r3, [sp, #28]
   21608:	2302      	movs	r3, #2
   2160a:	f88d 3004 	strb.w	r3, [sp, #4]
   2160e:	2400      	movs	r4, #0
   21610:	f88d 4005 	strb.w	r4, [sp, #5]
   21614:	f88d 4006 	strb.w	r4, [sp, #6]
   21618:	f88d 4007 	strb.w	r4, [sp, #7]
   2161c:	9b01      	ldr	r3, [sp, #4]
   2161e:	9306      	str	r3, [sp, #24]
   21620:	4621      	mov	r1, r4
   21622:	f364 0100 	bfi	r1, r4, #0, #1
   21626:	f364 0141 	bfi	r1, r4, #1, #1
   2162a:	f364 0182 	bfi	r1, r4, #2, #1
   2162e:	f364 01c5 	bfi	r1, r4, #3, #3
   21632:	2301      	movs	r3, #1
   21634:	f363 1188 	bfi	r1, r3, #6, #3
   21638:	2308      	movs	r3, #8
   2163a:	f363 2152 	bfi	r1, r3, #9, #10
   2163e:	f364 41de 	bfi	r1, r4, #19, #12
   21642:	f364 71df 	bfi	r1, r4, #31, #1
   21646:	4623      	mov	r3, r4
   21648:	aa06      	add	r2, sp, #24
   2164a:	4804      	ldr	r0, [pc, #16]	; (2165c <k_sys_fatal_error_handler+0x60>)
   2164c:	f005 fb03 	bl	26c56 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   21650:	4620      	mov	r0, r4
   21652:	f005 ff8b 	bl	2756c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   21656:	bf00      	nop
   21658:	0002fc5c 	.word	0x0002fc5c
   2165c:	0002d11c 	.word	0x0002d11c

00021660 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   21660:	b510      	push	{r4, lr}
   21662:	4603      	mov	r3, r0
   21664:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   21666:	4803      	ldr	r0, [pc, #12]	; (21674 <rand_prio_low_vector_get_blocking+0x14>)
   21668:	6881      	ldr	r1, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   2166a:	680c      	ldr	r4, [r1, #0]
   2166c:	4619      	mov	r1, r3
   2166e:	47a0      	blx	r4
	int err = entropy_get_entropy(entropy_source, p_buff, length);

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   21670:	bd10      	pop	{r4, pc}
   21672:	bf00      	nop
   21674:	0002cdf0 	.word	0x0002cdf0

00021678 <sdc_assertion_handler>:
{
   21678:	b590      	push	{r4, r7, lr}
   2167a:	b083      	sub	sp, #12
   2167c:	af00      	add	r7, sp, #0
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   2167e:	466c      	mov	r4, sp
   21680:	2300      	movs	r3, #0
   21682:	713b      	strb	r3, [r7, #4]
   21684:	2302      	movs	r3, #2
   21686:	717b      	strb	r3, [r7, #5]
   21688:	b08a      	sub	sp, #40	; 0x28
   2168a:	46ec      	mov	ip, sp
   2168c:	f11c 0210 	adds.w	r2, ip, #16
   21690:	d01b      	beq.n	216ca <sdc_assertion_handler+0x52>
   21692:	f04f 0e12 	mov.w	lr, #18
   21696:	b12a      	cbz	r2, 216a4 <sdc_assertion_handler+0x2c>
   21698:	f1be 0f04 	cmp.w	lr, #4
   2169c:	dd02      	ble.n	216a4 <sdc_assertion_handler+0x2c>
   2169e:	4b2b      	ldr	r3, [pc, #172]	; (2174c <sdc_assertion_handler+0xd4>)
   216a0:	f8cc 3014 	str.w	r3, [ip, #20]
   216a4:	2300      	movs	r3, #0
   216a6:	703b      	strb	r3, [r7, #0]
   216a8:	2302      	movs	r3, #2
   216aa:	707b      	strb	r3, [r7, #1]
   216ac:	b1d2      	cbz	r2, 216e4 <sdc_assertion_handler+0x6c>
   216ae:	4673      	mov	r3, lr
   216b0:	f1be 0f08 	cmp.w	lr, #8
   216b4:	dd01      	ble.n	216ba <sdc_assertion_handler+0x42>
   216b6:	f8cc 0018 	str.w	r0, [ip, #24]
   216ba:	2b0c      	cmp	r3, #12
   216bc:	dd01      	ble.n	216c2 <sdc_assertion_handler+0x4a>
   216be:	f8cc 101c 	str.w	r1, [ip, #28]
   216c2:	f10c 0320 	add.w	r3, ip, #32
   216c6:	2100      	movs	r1, #0
   216c8:	e00a      	b.n	216e0 <sdc_assertion_handler+0x68>
   216ca:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   216ce:	e7e2      	b.n	21696 <sdc_assertion_handler+0x1e>
   216d0:	f101 0008 	add.w	r0, r1, #8
   216d4:	4438      	add	r0, r7
   216d6:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   216da:	f803 0b01 	strb.w	r0, [r3], #1
   216de:	3101      	adds	r1, #1
   216e0:	2901      	cmp	r1, #1
   216e2:	d9f5      	bls.n	216d0 <sdc_assertion_handler+0x58>
   216e4:	f1be 0f11 	cmp.w	lr, #17
   216e8:	dd2d      	ble.n	21746 <sdc_assertion_handler+0xce>
   216ea:	2312      	movs	r3, #18
   216ec:	b14a      	cbz	r2, 21702 <sdc_assertion_handler+0x8a>
   216ee:	2104      	movs	r1, #4
   216f0:	7139      	strb	r1, [r7, #4]
   216f2:	2100      	movs	r1, #0
   216f4:	7179      	strb	r1, [r7, #5]
   216f6:	71b9      	strb	r1, [r7, #6]
   216f8:	2101      	movs	r1, #1
   216fa:	71f9      	strb	r1, [r7, #7]
   216fc:	6878      	ldr	r0, [r7, #4]
   216fe:	f8cc 0010 	str.w	r0, [ip, #16]
   21702:	2100      	movs	r1, #0
   21704:	f36f 0100 	bfc	r1, #0, #1
   21708:	f36f 0141 	bfc	r1, #1, #1
   2170c:	f36f 0182 	bfc	r1, #2, #1
   21710:	f36f 01c5 	bfc	r1, #3, #3
   21714:	2001      	movs	r0, #1
   21716:	f360 1188 	bfi	r1, r0, #6, #3
   2171a:	f3c3 0309 	ubfx	r3, r3, #0, #10
   2171e:	f363 2152 	bfi	r1, r3, #9, #10
   21722:	f36f 41de 	bfc	r1, #19, #12
   21726:	f36f 71df 	bfc	r1, #31, #1
   2172a:	2300      	movs	r3, #0
   2172c:	4808      	ldr	r0, [pc, #32]	; (21750 <sdc_assertion_handler+0xd8>)
   2172e:	f005 fa92 	bl	26c56 <z_impl_z_log_msg_static_create>
   21732:	46a5      	mov	sp, r4
	k_oops();
   21734:	4040      	eors	r0, r0
   21736:	f380 8811 	msr	BASEPRI, r0
   2173a:	f04f 0003 	mov.w	r0, #3
   2173e:	df02      	svc	2
}
   21740:	370c      	adds	r7, #12
   21742:	46bd      	mov	sp, r7
   21744:	bd90      	pop	{r4, r7, pc}
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   21746:	f06f 031b 	mvn.w	r3, #27
   2174a:	e7cf      	b.n	216ec <sdc_assertion_handler+0x74>
   2174c:	0002fc7c 	.word	0x0002fc7c
   21750:	0002d0ec 	.word	0x0002d0ec

00021754 <event_packet_process>:
{
   21754:	b570      	push	{r4, r5, r6, lr}
   21756:	b088      	sub	sp, #32
   21758:	4604      	mov	r4, r0
	bool discardable = event_packet_is_discardable(hci_buf);
   2175a:	f009 fd52 	bl	2b202 <event_packet_is_discardable>
   2175e:	4603      	mov	r3, r0
	if (hdr->evt == BT_HCI_EVT_LE_META_EVENT) {
   21760:	7820      	ldrb	r0, [r4, #0]
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   21762:	461d      	mov	r5, r3
   21764:	b18b      	cbz	r3, 2178a <event_packet_process+0x36>
   21766:	2200      	movs	r2, #0
   21768:	2300      	movs	r3, #0
   2176a:	4629      	mov	r1, r5
   2176c:	f7f5 fc44 	bl	16ff8 <bt_buf_get_evt>
	if (!evt_buf) {
   21770:	4606      	mov	r6, r0
   21772:	b178      	cbz	r0, 21794 <event_packet_process+0x40>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   21774:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   21776:	3202      	adds	r2, #2
   21778:	4621      	mov	r1, r4
   2177a:	300c      	adds	r0, #12
   2177c:	f008 fbb3 	bl	29ee6 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   21780:	4630      	mov	r0, r6
   21782:	f7f7 fed3 	bl	1952c <bt_recv>
}
   21786:	b008      	add	sp, #32
   21788:	bd70      	pop	{r4, r5, r6, pc}
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   2178a:	f04f 32ff 	mov.w	r2, #4294967295
   2178e:	f04f 33ff 	mov.w	r3, #4294967295
   21792:	e7ea      	b.n	2176a <event_packet_process+0x16>
		if (discardable) {
   21794:	2d00      	cmp	r5, #0
   21796:	d1f6      	bne.n	21786 <event_packet_process+0x32>
		LOG_ERR("No event buffer available");
   21798:	4b12      	ldr	r3, [pc, #72]	; (217e4 <event_packet_process+0x90>)
   2179a:	9307      	str	r3, [sp, #28]
   2179c:	2302      	movs	r3, #2
   2179e:	f88d 3004 	strb.w	r3, [sp, #4]
   217a2:	2300      	movs	r3, #0
   217a4:	f88d 3005 	strb.w	r3, [sp, #5]
   217a8:	f88d 3006 	strb.w	r3, [sp, #6]
   217ac:	f88d 3007 	strb.w	r3, [sp, #7]
   217b0:	9a01      	ldr	r2, [sp, #4]
   217b2:	9206      	str	r2, [sp, #24]
   217b4:	4619      	mov	r1, r3
   217b6:	f363 0100 	bfi	r1, r3, #0, #1
   217ba:	f363 0141 	bfi	r1, r3, #1, #1
   217be:	f363 0182 	bfi	r1, r3, #2, #1
   217c2:	f363 01c5 	bfi	r1, r3, #3, #3
   217c6:	2201      	movs	r2, #1
   217c8:	f362 1188 	bfi	r1, r2, #6, #3
   217cc:	2208      	movs	r2, #8
   217ce:	f362 2152 	bfi	r1, r2, #9, #10
   217d2:	f363 41de 	bfi	r1, r3, #19, #12
   217d6:	f363 71df 	bfi	r1, r3, #31, #1
   217da:	aa06      	add	r2, sp, #24
   217dc:	4802      	ldr	r0, [pc, #8]	; (217e8 <event_packet_process+0x94>)
   217de:	f005 fa3a 	bl	26c56 <z_impl_z_log_msg_static_create>
		return;
   217e2:	e7d0      	b.n	21786 <event_packet_process+0x32>
   217e4:	0002fca4 	.word	0x0002fca4
   217e8:	0002d0ec 	.word	0x0002d0ec

000217ec <data_packet_process>:
{
   217ec:	b530      	push	{r4, r5, lr}
   217ee:	b089      	sub	sp, #36	; 0x24
   217f0:	4604      	mov	r4, r0
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   217f2:	f04f 32ff 	mov.w	r2, #4294967295
   217f6:	f04f 33ff 	mov.w	r3, #4294967295
   217fa:	2003      	movs	r0, #3
   217fc:	f7f5 fbd2 	bl	16fa4 <bt_buf_get_rx>
	if (!data_buf) {
   21800:	b158      	cbz	r0, 2181a <data_packet_process+0x2e>
   21802:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   21804:	8862      	ldrh	r2, [r4, #2]
   21806:	3204      	adds	r2, #4
   21808:	4621      	mov	r1, r4
   2180a:	300c      	adds	r0, #12
   2180c:	f008 fb6b 	bl	29ee6 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   21810:	4628      	mov	r0, r5
   21812:	f7f7 fe8b 	bl	1952c <bt_recv>
}
   21816:	b009      	add	sp, #36	; 0x24
   21818:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("No data buffer available");
   2181a:	4b13      	ldr	r3, [pc, #76]	; (21868 <data_packet_process+0x7c>)
   2181c:	9307      	str	r3, [sp, #28]
   2181e:	2302      	movs	r3, #2
   21820:	f88d 3004 	strb.w	r3, [sp, #4]
   21824:	2300      	movs	r3, #0
   21826:	f88d 3005 	strb.w	r3, [sp, #5]
   2182a:	f88d 3006 	strb.w	r3, [sp, #6]
   2182e:	f88d 3007 	strb.w	r3, [sp, #7]
   21832:	9a01      	ldr	r2, [sp, #4]
   21834:	9206      	str	r2, [sp, #24]
   21836:	4619      	mov	r1, r3
   21838:	f363 0100 	bfi	r1, r3, #0, #1
   2183c:	f363 0141 	bfi	r1, r3, #1, #1
   21840:	f363 0182 	bfi	r1, r3, #2, #1
   21844:	f363 01c5 	bfi	r1, r3, #3, #3
   21848:	2201      	movs	r2, #1
   2184a:	f362 1188 	bfi	r1, r2, #6, #3
   2184e:	2208      	movs	r2, #8
   21850:	f362 2152 	bfi	r1, r2, #9, #10
   21854:	f363 41de 	bfi	r1, r3, #19, #12
   21858:	f363 71df 	bfi	r1, r3, #31, #1
   2185c:	aa06      	add	r2, sp, #24
   2185e:	4803      	ldr	r0, [pc, #12]	; (2186c <data_packet_process+0x80>)
   21860:	f005 f9f9 	bl	26c56 <z_impl_z_log_msg_static_create>
		return;
   21864:	e7d7      	b.n	21816 <data_packet_process+0x2a>
   21866:	bf00      	nop
   21868:	0002fcc0 	.word	0x0002fcc0
   2186c:	0002d0ec 	.word	0x0002d0ec

00021870 <fetch_and_process_hci_msg>:
{
   21870:	b5f0      	push	{r4, r5, r6, r7, lr}
   21872:	b083      	sub	sp, #12
   21874:	af00      	add	r7, sp, #0
   21876:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   21878:	f04f 30ff 	mov.w	r0, #4294967295
   2187c:	f04f 31ff 	mov.w	r1, #4294967295
   21880:	f7ff feaa 	bl	215d8 <multithreading_lock_acquire>
	if (!errcode) {
   21884:	b118      	cbz	r0, 2188e <fetch_and_process_hci_msg+0x1e>
		return false;
   21886:	2000      	movs	r0, #0
}
   21888:	370c      	adds	r7, #12
   2188a:	46bd      	mov	sp, r7
   2188c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   2188e:	1df9      	adds	r1, r7, #7
   21890:	4620      	mov	r0, r4
   21892:	f000 fb5f 	bl	21f54 <hci_internal_msg_get>
   21896:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   21898:	f7ff fea8 	bl	215ec <multithreading_lock_release>
	if (errcode) {
   2189c:	2d00      	cmp	r5, #0
   2189e:	d1f2      	bne.n	21886 <fetch_and_process_hci_msg+0x16>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   218a0:	79fb      	ldrb	r3, [r7, #7]
   218a2:	2b04      	cmp	r3, #4
   218a4:	d038      	beq.n	21918 <fetch_and_process_hci_msg+0xa8>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   218a6:	2b02      	cmp	r3, #2
   218a8:	d03b      	beq.n	21922 <fetch_and_process_hci_msg+0xb2>
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   218aa:	466d      	mov	r5, sp
   218ac:	b088      	sub	sp, #32
   218ae:	4669      	mov	r1, sp
   218b0:	f111 0210 	adds.w	r2, r1, #16
   218b4:	d03a      	beq.n	2192c <fetch_and_process_hci_msg+0xbc>
   218b6:	200c      	movs	r0, #12
   218b8:	b13a      	cbz	r2, 218ca <fetch_and_process_hci_msg+0x5a>
   218ba:	4604      	mov	r4, r0
   218bc:	2804      	cmp	r0, #4
   218be:	dd01      	ble.n	218c4 <fetch_and_process_hci_msg+0x54>
   218c0:	4e1d      	ldr	r6, [pc, #116]	; (21938 <fetch_and_process_hci_msg+0xc8>)
   218c2:	614e      	str	r6, [r1, #20]
   218c4:	2c08      	cmp	r4, #8
   218c6:	dd00      	ble.n	218ca <fetch_and_process_hci_msg+0x5a>
   218c8:	618b      	str	r3, [r1, #24]
   218ca:	280b      	cmp	r0, #11
   218cc:	dd31      	ble.n	21932 <fetch_and_process_hci_msg+0xc2>
   218ce:	230c      	movs	r3, #12
   218d0:	b13a      	cbz	r2, 218e2 <fetch_and_process_hci_msg+0x72>
   218d2:	2003      	movs	r0, #3
   218d4:	7038      	strb	r0, [r7, #0]
   218d6:	2000      	movs	r0, #0
   218d8:	7078      	strb	r0, [r7, #1]
   218da:	70b8      	strb	r0, [r7, #2]
   218dc:	70f8      	strb	r0, [r7, #3]
   218de:	6838      	ldr	r0, [r7, #0]
   218e0:	6108      	str	r0, [r1, #16]
   218e2:	2100      	movs	r1, #0
   218e4:	f36f 0100 	bfc	r1, #0, #1
   218e8:	f36f 0141 	bfc	r1, #1, #1
   218ec:	f36f 0182 	bfc	r1, #2, #1
   218f0:	f36f 01c5 	bfc	r1, #3, #3
   218f4:	2401      	movs	r4, #1
   218f6:	f364 1188 	bfi	r1, r4, #6, #3
   218fa:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   218fe:	f363 2152 	bfi	r1, r3, #9, #10
   21902:	f36f 41de 	bfc	r1, #19, #12
   21906:	f36f 71df 	bfc	r1, #31, #1
   2190a:	2300      	movs	r3, #0
   2190c:	480b      	ldr	r0, [pc, #44]	; (2193c <fetch_and_process_hci_msg+0xcc>)
   2190e:	f005 f9a2 	bl	26c56 <z_impl_z_log_msg_static_create>
   21912:	46ad      	mov	sp, r5
	return true;
   21914:	4620      	mov	r0, r4
   21916:	e7b7      	b.n	21888 <fetch_and_process_hci_msg+0x18>
		event_packet_process(p_hci_buffer);
   21918:	4620      	mov	r0, r4
   2191a:	f7ff ff1b 	bl	21754 <event_packet_process>
	return true;
   2191e:	2001      	movs	r0, #1
   21920:	e7b2      	b.n	21888 <fetch_and_process_hci_msg+0x18>
		data_packet_process(p_hci_buffer);
   21922:	4620      	mov	r0, r4
   21924:	f7ff ff62 	bl	217ec <data_packet_process>
	return true;
   21928:	2001      	movs	r0, #1
   2192a:	e7ad      	b.n	21888 <fetch_and_process_hci_msg+0x18>
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   2192c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   21930:	e7c2      	b.n	218b8 <fetch_and_process_hci_msg+0x48>
   21932:	f06f 031b 	mvn.w	r3, #27
   21936:	e7cb      	b.n	218d0 <fetch_and_process_hci_msg+0x60>
   21938:	0002fcdc 	.word	0x0002fcdc
   2193c:	0002d0ec 	.word	0x0002d0ec

00021940 <receive_signal_raise>:
{
   21940:	b508      	push	{r3, lr}
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   21942:	4902      	ldr	r1, [pc, #8]	; (2194c <receive_signal_raise+0xc>)
   21944:	4802      	ldr	r0, [pc, #8]	; (21950 <receive_signal_raise+0x10>)
   21946:	f00a fce9 	bl	2c31c <k_work_submit_to_queue>
}
   2194a:	bd08      	pop	{r3, pc}
   2194c:	200088bc 	.word	0x200088bc
   21950:	20007670 	.word	0x20007670

00021954 <acl_handle>:
{
   21954:	b538      	push	{r3, r4, r5, lr}
   21956:	4604      	mov	r4, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   21958:	f04f 30ff 	mov.w	r0, #4294967295
   2195c:	f04f 31ff 	mov.w	r1, #4294967295
   21960:	f7ff fe3a 	bl	215d8 <multithreading_lock_acquire>
	if (!errcode) {
   21964:	4605      	mov	r5, r0
   21966:	b108      	cbz	r0, 2196c <acl_handle+0x18>
}
   21968:	4628      	mov	r0, r5
   2196a:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_put(acl->data);
   2196c:	68e0      	ldr	r0, [r4, #12]
   2196e:	f7eb fb1a 	bl	cfa6 <sdc_hci_data_put>
   21972:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   21974:	f7ff fe3a 	bl	215ec <multithreading_lock_release>
		if (errcode) {
   21978:	2d00      	cmp	r5, #0
   2197a:	d0f5      	beq.n	21968 <acl_handle+0x14>
   2197c:	4902      	ldr	r1, [pc, #8]	; (21988 <acl_handle+0x34>)
   2197e:	4803      	ldr	r0, [pc, #12]	; (2198c <acl_handle+0x38>)
   21980:	f00a fccc 	bl	2c31c <k_work_submit_to_queue>
}
   21984:	e7f0      	b.n	21968 <acl_handle+0x14>
   21986:	bf00      	nop
   21988:	200088bc 	.word	0x200088bc
   2198c:	20007670 	.word	0x20007670

00021990 <cmd_handle>:
{
   21990:	b538      	push	{r3, r4, r5, lr}
   21992:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   21994:	f04f 30ff 	mov.w	r0, #4294967295
   21998:	f04f 31ff 	mov.w	r1, #4294967295
   2199c:	f7ff fe1c 	bl	215d8 <multithreading_lock_acquire>
	if (!errcode) {
   219a0:	4604      	mov	r4, r0
   219a2:	b108      	cbz	r0, 219a8 <cmd_handle+0x18>
}
   219a4:	4620      	mov	r0, r4
   219a6:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_cmd_put(cmd->data);
   219a8:	68e8      	ldr	r0, [r5, #12]
   219aa:	f000 fabf 	bl	21f2c <hci_internal_cmd_put>
   219ae:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   219b0:	f7ff fe1c 	bl	215ec <multithreading_lock_release>
	if (errcode) {
   219b4:	2c00      	cmp	r4, #0
   219b6:	d1f5      	bne.n	219a4 <cmd_handle+0x14>
   219b8:	4902      	ldr	r1, [pc, #8]	; (219c4 <cmd_handle+0x34>)
   219ba:	4803      	ldr	r0, [pc, #12]	; (219c8 <cmd_handle+0x38>)
   219bc:	f00a fcae 	bl	2c31c <k_work_submit_to_queue>
	return 0;
   219c0:	e7f0      	b.n	219a4 <cmd_handle+0x14>
   219c2:	bf00      	nop
   219c4:	200088bc 	.word	0x200088bc
   219c8:	20007670 	.word	0x20007670

000219cc <rand_prio_high_vector_get>:
{
   219cc:	b510      	push	{r4, lr}
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   219ce:	4b08      	ldr	r3, [pc, #32]	; (219f0 <rand_prio_high_vector_get+0x24>)
   219d0:	689b      	ldr	r3, [r3, #8]
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   219d2:	685c      	ldr	r4, [r3, #4]
   219d4:	b144      	cbz	r4, 219e8 <rand_prio_high_vector_get+0x1c>
   219d6:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   219d8:	2300      	movs	r3, #0
   219da:	4601      	mov	r1, r0
   219dc:	4804      	ldr	r0, [pc, #16]	; (219f0 <rand_prio_high_vector_get+0x24>)
   219de:	47a0      	blx	r4
	return ret >= 0 ? ret : 0;
   219e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   219e4:	b2c0      	uxtb	r0, r0
   219e6:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   219e8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   219ec:	e7f8      	b.n	219e0 <rand_prio_high_vector_get+0x14>
   219ee:	bf00      	nop
   219f0:	0002cdf0 	.word	0x0002cdf0

000219f4 <rand_prio_low_vector_get>:
{
   219f4:	b510      	push	{r4, lr}
	const struct entropy_driver_api *api =
   219f6:	4b08      	ldr	r3, [pc, #32]	; (21a18 <rand_prio_low_vector_get+0x24>)
   219f8:	689b      	ldr	r3, [r3, #8]
	if (unlikely(!api->get_entropy_isr)) {
   219fa:	685c      	ldr	r4, [r3, #4]
   219fc:	b144      	cbz	r4, 21a10 <rand_prio_low_vector_get+0x1c>
   219fe:	460a      	mov	r2, r1
	return api->get_entropy_isr(dev, buffer, length, flags);
   21a00:	2300      	movs	r3, #0
   21a02:	4601      	mov	r1, r0
   21a04:	4804      	ldr	r0, [pc, #16]	; (21a18 <rand_prio_low_vector_get+0x24>)
   21a06:	47a0      	blx	r4
	return ret >= 0 ? ret : 0;
   21a08:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   21a0c:	b2c0      	uxtb	r0, r0
   21a0e:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   21a10:	f06f 0085 	mvn.w	r0, #133	; 0x85
   21a14:	e7f8      	b.n	21a08 <rand_prio_low_vector_get+0x14>
   21a16:	bf00      	nop
   21a18:	0002cdf0 	.word	0x0002cdf0

00021a1c <hci_driver_open>:

	return 0;
}

static int hci_driver_open(void)
{
   21a1c:	b5b0      	push	{r4, r5, r7, lr}
   21a1e:	b090      	sub	sp, #64	; 0x40
   21a20:	af00      	add	r7, sp, #0
	LOG_DBG("Open");

	k_work_init(&receive_work, receive_work_handler);
   21a22:	4978      	ldr	r1, [pc, #480]	; (21c04 <hci_driver_open+0x1e8>)
   21a24:	4878      	ldr	r0, [pc, #480]	; (21c08 <hci_driver_open+0x1ec>)
   21a26:	f00a fc5d 	bl	2c2e4 <k_work_init>

	if (IS_ENABLED(CONFIG_BT_CTLR_ECDH)) {
		hci_ecdh_init();
   21a2a:	f000 fc39 	bl	222a0 <hci_ecdh_init>
	}

	uint8_t build_revision[SDC_BUILD_REVISION_SIZE];

	sdc_build_revision_get(build_revision);
   21a2e:	f107 0014 	add.w	r0, r7, #20
   21a32:	f7de ff3d 	bl	8b0 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   21a36:	466c      	mov	r4, sp
   21a38:	2300      	movs	r3, #0
   21a3a:	713b      	strb	r3, [r7, #4]
   21a3c:	2302      	movs	r3, #2
   21a3e:	717b      	strb	r3, [r7, #5]
   21a40:	b088      	sub	sp, #32
   21a42:	46ec      	mov	ip, sp
   21a44:	f11c 0210 	adds.w	r2, ip, #16
   21a48:	d014      	beq.n	21a74 <hci_driver_open+0x58>
   21a4a:	200e      	movs	r0, #14
   21a4c:	b122      	cbz	r2, 21a58 <hci_driver_open+0x3c>
   21a4e:	2804      	cmp	r0, #4
   21a50:	dd02      	ble.n	21a58 <hci_driver_open+0x3c>
   21a52:	4b6e      	ldr	r3, [pc, #440]	; (21c0c <hci_driver_open+0x1f0>)
   21a54:	f8cc 3014 	str.w	r3, [ip, #20]
   21a58:	2300      	movs	r3, #0
   21a5a:	703b      	strb	r3, [r7, #0]
   21a5c:	2302      	movs	r3, #2
   21a5e:	707b      	strb	r3, [r7, #1]
   21a60:	b1b2      	cbz	r2, 21a90 <hci_driver_open+0x74>
   21a62:	2808      	cmp	r0, #8
   21a64:	dd02      	ble.n	21a6c <hci_driver_open+0x50>
   21a66:	4b6a      	ldr	r3, [pc, #424]	; (21c10 <hci_driver_open+0x1f4>)
   21a68:	f8cc 3018 	str.w	r3, [ip, #24]
   21a6c:	f10c 031c 	add.w	r3, ip, #28
   21a70:	2100      	movs	r1, #0
   21a72:	e00b      	b.n	21a8c <hci_driver_open+0x70>
   21a74:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   21a78:	e7e8      	b.n	21a4c <hci_driver_open+0x30>
   21a7a:	f101 0540 	add.w	r5, r1, #64	; 0x40
   21a7e:	eb05 0e07 	add.w	lr, r5, r7
   21a82:	f81e ec40 	ldrb.w	lr, [lr, #-64]
   21a86:	f803 eb01 	strb.w	lr, [r3], #1
   21a8a:	3101      	adds	r1, #1
   21a8c:	2901      	cmp	r1, #1
   21a8e:	d9f4      	bls.n	21a7a <hci_driver_open+0x5e>
   21a90:	280d      	cmp	r0, #13
   21a92:	dd41      	ble.n	21b18 <hci_driver_open+0xfc>
   21a94:	230e      	movs	r3, #14
   21a96:	b14a      	cbz	r2, 21aac <hci_driver_open+0x90>
   21a98:	2103      	movs	r1, #3
   21a9a:	7139      	strb	r1, [r7, #4]
   21a9c:	2100      	movs	r1, #0
   21a9e:	7179      	strb	r1, [r7, #5]
   21aa0:	71b9      	strb	r1, [r7, #6]
   21aa2:	2101      	movs	r1, #1
   21aa4:	71f9      	strb	r1, [r7, #7]
   21aa6:	6878      	ldr	r0, [r7, #4]
   21aa8:	f8cc 0010 	str.w	r0, [ip, #16]
   21aac:	2100      	movs	r1, #0
   21aae:	f36f 0100 	bfc	r1, #0, #1
   21ab2:	f36f 0141 	bfc	r1, #1, #1
   21ab6:	f36f 0182 	bfc	r1, #2, #1
   21aba:	f36f 01c5 	bfc	r1, #3, #3
   21abe:	2003      	movs	r0, #3
   21ac0:	f360 1188 	bfi	r1, r0, #6, #3
   21ac4:	f3c3 0309 	ubfx	r3, r3, #0, #10
   21ac8:	f363 2152 	bfi	r1, r3, #9, #10
   21acc:	2314      	movs	r3, #20
   21ace:	f363 41de 	bfi	r1, r3, #19, #12
   21ad2:	f36f 71df 	bfc	r1, #31, #1
   21ad6:	18fb      	adds	r3, r7, r3
   21ad8:	484e      	ldr	r0, [pc, #312]	; (21c14 <hci_driver_open+0x1f8>)
   21ada:	f005 f8bc 	bl	26c56 <z_impl_z_log_msg_static_create>
   21ade:	46a5      	mov	sp, r4
   21ae0:	484d      	ldr	r0, [pc, #308]	; (21c18 <hci_driver_open+0x1fc>)
   21ae2:	f00a f91a 	bl	2bd1a <z_device_is_ready>
			"SoftDevice Controller build revision: ");

	int err;

	if (!device_is_ready(entropy_source)) {
   21ae6:	b1d0      	cbz	r0, 21b1e <hci_driver_open+0x102>
		LOG_ERR("Entropy source device not ready");
		return -ENODEV;
	}

	sdc_rand_source_t rand_functions = {
   21ae8:	4a4c      	ldr	r2, [pc, #304]	; (21c1c <hci_driver_open+0x200>)
   21aea:	f107 0308 	add.w	r3, r7, #8
   21aee:	ca07      	ldmia	r2, {r0, r1, r2}
   21af0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.rand_prio_low_get = rand_prio_low_vector_get,
		.rand_prio_high_get = rand_prio_high_vector_get,
		.rand_poll = rand_prio_low_vector_get_blocking
	};

	err = sdc_rand_source_register(&rand_functions);
   21af4:	4618      	mov	r0, r3
   21af6:	f7df f871 	bl	bdc <sdc_rand_source_register>
	if (err) {
   21afa:	4603      	mov	r3, r0
   21afc:	bba0      	cbnz	r0, 21b68 <hci_driver_open+0x14c>
		LOG_ERR("Failed to register rand source (%d)", err);
		return -EINVAL;
	}

	err = MULTITHREADING_LOCK_ACQUIRE();
   21afe:	f04f 30ff 	mov.w	r0, #4294967295
   21b02:	f04f 31ff 	mov.w	r1, #4294967295
   21b06:	f7ff fd67 	bl	215d8 <multithreading_lock_acquire>
	if (err) {
   21b0a:	4604      	mov	r4, r0
   21b0c:	2800      	cmp	r0, #0
   21b0e:	d06d      	beq.n	21bec <hci_driver_open+0x1d0>
	}

	MULTITHREADING_LOCK_RELEASE();

	return 0;
}
   21b10:	4620      	mov	r0, r4
   21b12:	3740      	adds	r7, #64	; 0x40
   21b14:	46bd      	mov	sp, r7
   21b16:	bdb0      	pop	{r4, r5, r7, pc}
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   21b18:	f06f 031b 	mvn.w	r3, #27
   21b1c:	e7bb      	b.n	21a96 <hci_driver_open+0x7a>
		LOG_ERR("Entropy source device not ready");
   21b1e:	4b40      	ldr	r3, [pc, #256]	; (21c20 <hci_driver_open+0x204>)
   21b20:	63fb      	str	r3, [r7, #60]	; 0x3c
   21b22:	2302      	movs	r3, #2
   21b24:	713b      	strb	r3, [r7, #4]
   21b26:	2300      	movs	r3, #0
   21b28:	717b      	strb	r3, [r7, #5]
   21b2a:	71bb      	strb	r3, [r7, #6]
   21b2c:	71fb      	strb	r3, [r7, #7]
   21b2e:	687a      	ldr	r2, [r7, #4]
   21b30:	63ba      	str	r2, [r7, #56]	; 0x38
   21b32:	4619      	mov	r1, r3
   21b34:	f363 0100 	bfi	r1, r3, #0, #1
   21b38:	f363 0141 	bfi	r1, r3, #1, #1
   21b3c:	f363 0182 	bfi	r1, r3, #2, #1
   21b40:	f363 01c5 	bfi	r1, r3, #3, #3
   21b44:	2201      	movs	r2, #1
   21b46:	f362 1188 	bfi	r1, r2, #6, #3
   21b4a:	2208      	movs	r2, #8
   21b4c:	f362 2152 	bfi	r1, r2, #9, #10
   21b50:	f363 41de 	bfi	r1, r3, #19, #12
   21b54:	f363 71df 	bfi	r1, r3, #31, #1
   21b58:	f107 0238 	add.w	r2, r7, #56	; 0x38
   21b5c:	482d      	ldr	r0, [pc, #180]	; (21c14 <hci_driver_open+0x1f8>)
   21b5e:	f005 f87a 	bl	26c56 <z_impl_z_log_msg_static_create>
		return -ENODEV;
   21b62:	f06f 0412 	mvn.w	r4, #18
   21b66:	e7d3      	b.n	21b10 <hci_driver_open+0xf4>
		LOG_ERR("Failed to register rand source (%d)", err);
   21b68:	466c      	mov	r4, sp
   21b6a:	b088      	sub	sp, #32
   21b6c:	4669      	mov	r1, sp
   21b6e:	f111 0210 	adds.w	r2, r1, #16
   21b72:	d00e      	beq.n	21b92 <hci_driver_open+0x176>
   21b74:	200c      	movs	r0, #12
   21b76:	b142      	cbz	r2, 21b8a <hci_driver_open+0x16e>
   21b78:	4684      	mov	ip, r0
   21b7a:	2804      	cmp	r0, #4
   21b7c:	dd01      	ble.n	21b82 <hci_driver_open+0x166>
   21b7e:	4d29      	ldr	r5, [pc, #164]	; (21c24 <hci_driver_open+0x208>)
   21b80:	614d      	str	r5, [r1, #20]
   21b82:	f1bc 0f08 	cmp.w	ip, #8
   21b86:	dd07      	ble.n	21b98 <hci_driver_open+0x17c>
   21b88:	618b      	str	r3, [r1, #24]
   21b8a:	280b      	cmp	r0, #11
   21b8c:	dd2b      	ble.n	21be6 <hci_driver_open+0x1ca>
   21b8e:	230c      	movs	r3, #12
   21b90:	e004      	b.n	21b9c <hci_driver_open+0x180>
   21b92:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   21b96:	e7ee      	b.n	21b76 <hci_driver_open+0x15a>
   21b98:	f06f 031b 	mvn.w	r3, #27
   21b9c:	b13a      	cbz	r2, 21bae <hci_driver_open+0x192>
   21b9e:	2003      	movs	r0, #3
   21ba0:	7138      	strb	r0, [r7, #4]
   21ba2:	2000      	movs	r0, #0
   21ba4:	7178      	strb	r0, [r7, #5]
   21ba6:	71b8      	strb	r0, [r7, #6]
   21ba8:	71f8      	strb	r0, [r7, #7]
   21baa:	6878      	ldr	r0, [r7, #4]
   21bac:	6108      	str	r0, [r1, #16]
   21bae:	2100      	movs	r1, #0
   21bb0:	f36f 0100 	bfc	r1, #0, #1
   21bb4:	f36f 0141 	bfc	r1, #1, #1
   21bb8:	f36f 0182 	bfc	r1, #2, #1
   21bbc:	f36f 01c5 	bfc	r1, #3, #3
   21bc0:	2001      	movs	r0, #1
   21bc2:	f360 1188 	bfi	r1, r0, #6, #3
   21bc6:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   21bca:	f363 2152 	bfi	r1, r3, #9, #10
   21bce:	f36f 41de 	bfc	r1, #19, #12
   21bd2:	f36f 71df 	bfc	r1, #31, #1
   21bd6:	2300      	movs	r3, #0
   21bd8:	480e      	ldr	r0, [pc, #56]	; (21c14 <hci_driver_open+0x1f8>)
   21bda:	f005 f83c 	bl	26c56 <z_impl_z_log_msg_static_create>
   21bde:	46a5      	mov	sp, r4
		return -EINVAL;
   21be0:	f06f 0415 	mvn.w	r4, #21
   21be4:	e794      	b.n	21b10 <hci_driver_open+0xf4>
		LOG_ERR("Failed to register rand source (%d)", err);
   21be6:	f06f 031b 	mvn.w	r3, #27
   21bea:	e7d7      	b.n	21b9c <hci_driver_open+0x180>
	err = sdc_enable(receive_signal_raise, sdc_mempool);
   21bec:	490e      	ldr	r1, [pc, #56]	; (21c28 <hci_driver_open+0x20c>)
   21bee:	480f      	ldr	r0, [pc, #60]	; (21c2c <hci_driver_open+0x210>)
   21bf0:	f7de fec6 	bl	980 <sdc_enable>
	if (err) {
   21bf4:	4604      	mov	r4, r0
   21bf6:	b910      	cbnz	r0, 21bfe <hci_driver_open+0x1e2>
	MULTITHREADING_LOCK_RELEASE();
   21bf8:	f7ff fcf8 	bl	215ec <multithreading_lock_release>
	return 0;
   21bfc:	e788      	b.n	21b10 <hci_driver_open+0xf4>
		MULTITHREADING_LOCK_RELEASE();
   21bfe:	f7ff fcf5 	bl	215ec <multithreading_lock_release>
		return err;
   21c02:	e785      	b.n	21b10 <hci_driver_open+0xf4>
   21c04:	0002b2c5 	.word	0x0002b2c5
   21c08:	200088bc 	.word	0x200088bc
   21c0c:	0002db18 	.word	0x0002db18
   21c10:	0002fd18 	.word	0x0002fd18
   21c14:	0002d0ec 	.word	0x0002d0ec
   21c18:	0002cdf0 	.word	0x0002cdf0
   21c1c:	0002d21c 	.word	0x0002d21c
   21c20:	0002fd40 	.word	0x0002fd40
   21c24:	0002fd60 	.word	0x0002fd60
   21c28:	20002888 	.word	0x20002888
   21c2c:	00021941 	.word	0x00021941

00021c30 <configure_memory_usage>:
{
   21c30:	b5b0      	push	{r4, r5, r7, lr}
   21c32:	b082      	sub	sp, #8
   21c34:	af00      	add	r7, sp, #0
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   21c36:	2308      	movs	r3, #8
   21c38:	713b      	strb	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21c3a:	1d3a      	adds	r2, r7, #4
   21c3c:	2101      	movs	r1, #1
   21c3e:	2000      	movs	r0, #0
   21c40:	f7de fe44 	bl	8cc <sdc_cfg_set>
	if (required_memory < 0) {
   21c44:	2800      	cmp	r0, #0
   21c46:	db24      	blt.n	21c92 <configure_memory_usage+0x62>
	cfg.buffer_cfg.rx_packet_size = MAX_RX_PACKET_SIZE;
   21c48:	23fb      	movs	r3, #251	; 0xfb
   21c4a:	717b      	strb	r3, [r7, #5]
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   21c4c:	713b      	strb	r3, [r7, #4]
	cfg.buffer_cfg.rx_packet_count = CONFIG_BT_CTLR_SDC_RX_PACKET_COUNT;
   21c4e:	2302      	movs	r3, #2
   21c50:	71fb      	strb	r3, [r7, #7]
	cfg.buffer_cfg.tx_packet_count = CONFIG_BT_CTLR_SDC_TX_PACKET_COUNT;
   21c52:	2103      	movs	r1, #3
   21c54:	71b9      	strb	r1, [r7, #6]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21c56:	1d3a      	adds	r2, r7, #4
   21c58:	2000      	movs	r0, #0
   21c5a:	f7de fe37 	bl	8cc <sdc_cfg_set>
	if (required_memory < 0) {
   21c5e:	2800      	cmp	r0, #0
   21c60:	db17      	blt.n	21c92 <configure_memory_usage+0x62>
	cfg.event_length.event_length_us =
   21c62:	f641 534c 	movw	r3, #7500	; 0x1d4c
   21c66:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21c68:	1d3a      	adds	r2, r7, #4
   21c6a:	2104      	movs	r1, #4
   21c6c:	2000      	movs	r0, #0
   21c6e:	f7de fe2d 	bl	8cc <sdc_cfg_set>
	if (required_memory < 0) {
   21c72:	2800      	cmp	r0, #0
   21c74:	db0d      	blt.n	21c92 <configure_memory_usage+0x62>
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   21c76:	2303      	movs	r3, #3
   21c78:	713b      	strb	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21c7a:	1d3a      	adds	r2, r7, #4
   21c7c:	2106      	movs	r1, #6
   21c7e:	2000      	movs	r0, #0
   21c80:	f7de fe24 	bl	8cc <sdc_cfg_set>
		if (required_memory < 0) {
   21c84:	2800      	cmp	r0, #0
   21c86:	db04      	blt.n	21c92 <configure_memory_usage+0x62>
	if (required_memory > sizeof(sdc_mempool)) {
   21c88:	f644 532e 	movw	r3, #19758	; 0x4d2e
   21c8c:	4298      	cmp	r0, r3
   21c8e:	d803      	bhi.n	21c98 <configure_memory_usage+0x68>
	return 0;
   21c90:	2000      	movs	r0, #0
}
   21c92:	3708      	adds	r7, #8
   21c94:	46bd      	mov	sp, r7
   21c96:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("Allocated memory too low: %u < %u",
   21c98:	466c      	mov	r4, sp
   21c9a:	b088      	sub	sp, #32
   21c9c:	466b      	mov	r3, sp
   21c9e:	f113 0210 	adds.w	r2, r3, #16
   21ca2:	d03f      	beq.n	21d24 <configure_memory_usage+0xf4>
   21ca4:	2110      	movs	r1, #16
   21ca6:	b172      	cbz	r2, 21cc6 <configure_memory_usage+0x96>
   21ca8:	468c      	mov	ip, r1
   21caa:	2904      	cmp	r1, #4
   21cac:	dd01      	ble.n	21cb2 <configure_memory_usage+0x82>
   21cae:	4d20      	ldr	r5, [pc, #128]	; (21d30 <configure_memory_usage+0x100>)
   21cb0:	615d      	str	r5, [r3, #20]
   21cb2:	f1bc 0f08 	cmp.w	ip, #8
   21cb6:	dd02      	ble.n	21cbe <configure_memory_usage+0x8e>
   21cb8:	f644 552e 	movw	r5, #19758	; 0x4d2e
   21cbc:	619d      	str	r5, [r3, #24]
   21cbe:	f1bc 0f0c 	cmp.w	ip, #12
   21cc2:	dd00      	ble.n	21cc6 <configure_memory_usage+0x96>
   21cc4:	61d8      	str	r0, [r3, #28]
   21cc6:	290f      	cmp	r1, #15
   21cc8:	dd2f      	ble.n	21d2a <configure_memory_usage+0xfa>
   21cca:	f04f 0c10 	mov.w	ip, #16
   21cce:	b13a      	cbz	r2, 21ce0 <configure_memory_usage+0xb0>
   21cd0:	2104      	movs	r1, #4
   21cd2:	7039      	strb	r1, [r7, #0]
   21cd4:	2100      	movs	r1, #0
   21cd6:	7079      	strb	r1, [r7, #1]
   21cd8:	70b9      	strb	r1, [r7, #2]
   21cda:	70f9      	strb	r1, [r7, #3]
   21cdc:	6838      	ldr	r0, [r7, #0]
   21cde:	6118      	str	r0, [r3, #16]
   21ce0:	2100      	movs	r1, #0
   21ce2:	f36f 0100 	bfc	r1, #0, #1
   21ce6:	f36f 0141 	bfc	r1, #1, #1
   21cea:	f36f 0182 	bfc	r1, #2, #1
   21cee:	f36f 01c5 	bfc	r1, #3, #3
   21cf2:	2301      	movs	r3, #1
   21cf4:	f363 1188 	bfi	r1, r3, #6, #3
   21cf8:	f40c 7c7d 	and.w	ip, ip, #1012	; 0x3f4
   21cfc:	f36c 2152 	bfi	r1, ip, #9, #10
   21d00:	f36f 41de 	bfc	r1, #19, #12
   21d04:	f36f 71df 	bfc	r1, #31, #1
   21d08:	2300      	movs	r3, #0
   21d0a:	480a      	ldr	r0, [pc, #40]	; (21d34 <configure_memory_usage+0x104>)
   21d0c:	f004 ffa3 	bl	26c56 <z_impl_z_log_msg_static_create>
   21d10:	46a5      	mov	sp, r4
		k_panic();
   21d12:	4040      	eors	r0, r0
   21d14:	f380 8811 	msr	BASEPRI, r0
   21d18:	f04f 0004 	mov.w	r0, #4
   21d1c:	df02      	svc	2
		return -ENOMEM;
   21d1e:	f06f 000b 	mvn.w	r0, #11
   21d22:	e7b6      	b.n	21c92 <configure_memory_usage+0x62>
		LOG_ERR("Allocated memory too low: %u < %u",
   21d24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   21d28:	e7bd      	b.n	21ca6 <configure_memory_usage+0x76>
   21d2a:	f06f 0c1b 	mvn.w	ip, #27
   21d2e:	e7ce      	b.n	21cce <configure_memory_usage+0x9e>
   21d30:	0002fd84 	.word	0x0002fd84
   21d34:	0002d0ec 	.word	0x0002d0ec

00021d38 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   21d38:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   21d3a:	4806      	ldr	r0, [pc, #24]	; (21d54 <hci_driver_init+0x1c>)
   21d3c:	f7f7 fc62 	bl	19604 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   21d40:	4805      	ldr	r0, [pc, #20]	; (21d58 <hci_driver_init+0x20>)
   21d42:	f7de fe47 	bl	9d4 <sdc_init>

	err = configure_supported_features();
   21d46:	f009 faa3 	bl	2b290 <configure_supported_features>
	if (err) {
   21d4a:	b100      	cbz	r0, 21d4e <hci_driver_init+0x16>
	if (err) {
		return err;
	}

	return err;
}
   21d4c:	bd08      	pop	{r3, pc}
	err = configure_memory_usage();
   21d4e:	f7ff ff6f 	bl	21c30 <configure_memory_usage>
	if (err) {
   21d52:	e7fb      	b.n	21d4c <hci_driver_init+0x14>
   21d54:	0002fdd4 	.word	0x0002fdd4
   21d58:	00021679 	.word	0x00021679

00021d5c <hci_driver_receive_process>:
{
   21d5c:	b508      	push	{r3, lr}
	if (fetch_and_process_hci_msg(&hci_buf[0])) {
   21d5e:	4805      	ldr	r0, [pc, #20]	; (21d74 <hci_driver_receive_process+0x18>)
   21d60:	f7ff fd86 	bl	21870 <fetch_and_process_hci_msg>
   21d64:	b900      	cbnz	r0, 21d68 <hci_driver_receive_process+0xc>
}
   21d66:	bd08      	pop	{r3, pc}
   21d68:	4903      	ldr	r1, [pc, #12]	; (21d78 <hci_driver_receive_process+0x1c>)
   21d6a:	4804      	ldr	r0, [pc, #16]	; (21d7c <hci_driver_receive_process+0x20>)
   21d6c:	f00a fad6 	bl	2c31c <k_work_submit_to_queue>
   21d70:	e7f9      	b.n	21d66 <hci_driver_receive_process+0xa>
   21d72:	bf00      	nop
   21d74:	200087bc 	.word	0x200087bc
   21d78:	200088bc 	.word	0x200088bc
   21d7c:	20007670 	.word	0x20007670

00021d80 <command_generates_command_complete_event>:

static hci_internal_user_cmd_handler_t user_cmd_handler;

static bool command_generates_command_complete_event(uint16_t hci_opcode)
{
	switch (hci_opcode) {
   21d80:	f242 0332 	movw	r3, #8242	; 0x2032
   21d84:	4298      	cmp	r0, r3
   21d86:	d04a      	beq.n	21e1e <command_generates_command_complete_event+0x9e>
   21d88:	d82d      	bhi.n	21de6 <command_generates_command_complete_event+0x66>
   21d8a:	f242 0326 	movw	r3, #8230	; 0x2026
   21d8e:	4298      	cmp	r0, r3
   21d90:	d847      	bhi.n	21e22 <command_generates_command_complete_event+0xa2>
   21d92:	f242 030d 	movw	r3, #8205	; 0x200d
   21d96:	4298      	cmp	r0, r3
   21d98:	d218      	bcs.n	21dcc <command_generates_command_complete_event+0x4c>
   21d9a:	f240 4306 	movw	r3, #1030	; 0x406
   21d9e:	4298      	cmp	r0, r3
   21da0:	d041      	beq.n	21e26 <command_generates_command_complete_event+0xa6>
   21da2:	f240 431d 	movw	r3, #1053	; 0x41d
   21da6:	4298      	cmp	r0, r3
   21da8:	d001      	beq.n	21dae <command_generates_command_complete_event+0x2e>
	case SDC_HCI_OPCODE_CMD_VS_WRITE_REMOTE_TX_POWER:
	case BT_HCI_OP_LE_P256_PUBLIC_KEY:
	case BT_HCI_OP_LE_GENERATE_DHKEY:
		return false;
	default:
		return true;
   21daa:	2001      	movs	r0, #1
   21dac:	4770      	bx	lr
	switch (hci_opcode) {
   21dae:	2000      	movs	r0, #0
   21db0:	4770      	bx	lr
   21db2:	f5a0 5001 	sub.w	r0, r0, #8256	; 0x2040
   21db6:	382d      	subs	r0, #45	; 0x2d
   21db8:	b280      	uxth	r0, r0
   21dba:	4b1e      	ldr	r3, [pc, #120]	; (21e34 <command_generates_command_complete_event+0xb4>)
   21dbc:	40c3      	lsrs	r3, r0
   21dbe:	f013 0f01 	tst.w	r3, #1
   21dc2:	d101      	bne.n	21dc8 <command_generates_command_complete_event+0x48>
		return true;
   21dc4:	2001      	movs	r0, #1
   21dc6:	4770      	bx	lr
	switch (hci_opcode) {
   21dc8:	2000      	movs	r0, #0
   21dca:	4770      	bx	lr
   21dcc:	f5a0 5000 	sub.w	r0, r0, #8192	; 0x2000
   21dd0:	380d      	subs	r0, #13
   21dd2:	b280      	uxth	r0, r0
   21dd4:	4b18      	ldr	r3, [pc, #96]	; (21e38 <command_generates_command_complete_event+0xb8>)
   21dd6:	40c3      	lsrs	r3, r0
   21dd8:	f013 0f01 	tst.w	r3, #1
   21ddc:	d101      	bne.n	21de2 <command_generates_command_complete_event+0x62>
		return true;
   21dde:	2001      	movs	r0, #1
   21de0:	4770      	bx	lr
	switch (hci_opcode) {
   21de2:	2000      	movs	r0, #0
   21de4:	4770      	bx	lr
   21de6:	f242 0385 	movw	r3, #8325	; 0x2085
   21dea:	4298      	cmp	r0, r3
   21dec:	d80b      	bhi.n	21e06 <command_generates_command_complete_event+0x86>
   21dee:	f242 036d 	movw	r3, #8301	; 0x206d
   21df2:	4298      	cmp	r0, r3
   21df4:	d2dd      	bcs.n	21db2 <command_generates_command_complete_event+0x32>
   21df6:	f5a0 5001 	sub.w	r0, r0, #8256	; 0x2040
   21dfa:	3803      	subs	r0, #3
   21dfc:	b280      	uxth	r0, r0
   21dfe:	2801      	cmp	r0, #1
   21e00:	d913      	bls.n	21e2a <command_generates_command_complete_event+0xaa>
		return true;
   21e02:	2001      	movs	r0, #1
   21e04:	4770      	bx	lr
	switch (hci_opcode) {
   21e06:	f64f 5302 	movw	r3, #64770	; 0xfd02
   21e0a:	4298      	cmp	r0, r3
   21e0c:	d00f      	beq.n	21e2e <command_generates_command_complete_event+0xae>
   21e0e:	f64f 530a 	movw	r3, #64778	; 0xfd0a
   21e12:	4298      	cmp	r0, r3
   21e14:	d001      	beq.n	21e1a <command_generates_command_complete_event+0x9a>
		return true;
   21e16:	2001      	movs	r0, #1
	}
}
   21e18:	4770      	bx	lr
	switch (hci_opcode) {
   21e1a:	2000      	movs	r0, #0
   21e1c:	4770      	bx	lr
   21e1e:	2000      	movs	r0, #0
   21e20:	4770      	bx	lr
		return true;
   21e22:	2001      	movs	r0, #1
   21e24:	4770      	bx	lr
	switch (hci_opcode) {
   21e26:	2000      	movs	r0, #0
   21e28:	4770      	bx	lr
   21e2a:	2000      	movs	r0, #0
   21e2c:	4770      	bx	lr
   21e2e:	2000      	movs	r0, #0
   21e30:	4770      	bx	lr
   21e32:	bf00      	nop
   21e34:	01000401 	.word	0x01000401
   21e38:	03001241 	.word	0x03001241

00021e3c <cmd_put>:
	}
}
#endif /* CONFIG_BT_HCI_VS */

static void cmd_put(uint8_t *cmd_in, uint8_t * const raw_event_out)
{
   21e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   21e3e:	b083      	sub	sp, #12
   21e40:	4607      	mov	r7, r0
   21e42:	460e      	mov	r6, r1
   21e44:	7843      	ldrb	r3, [r0, #1]
   21e46:	7805      	ldrb	r5, [r0, #0]
   21e48:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	uint8_t status = BT_HCI_ERR_UNKNOWN_CMD;
	uint16_t opcode = sys_get_le16(cmd_in);
	bool generate_command_status_event;

	/* Assume command complete */
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   21e4c:	2304      	movs	r3, #4
   21e4e:	f88d 3006 	strb.w	r3, [sp, #6]
				      + sizeof(struct bt_hci_evt_cc_status);

	if (user_cmd_handler) {
   21e52:	4b35      	ldr	r3, [pc, #212]	; (21f28 <cmd_put+0xec>)
   21e54:	681c      	ldr	r4, [r3, #0]
   21e56:	b13c      	cbz	r4, 21e68 <cmd_put+0x2c>
		status = user_cmd_handler(cmd_in,
   21e58:	f10d 0307 	add.w	r3, sp, #7
   21e5c:	f10d 0206 	add.w	r2, sp, #6
   21e60:	47a0      	blx	r4
   21e62:	4604      	mov	r4, r0
					  raw_event_out,
					  &return_param_length,
					  &generate_command_status_event);
	}

	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   21e64:	2801      	cmp	r0, #1
   21e66:	d121      	bne.n	21eac <cmd_put+0x70>

		switch (BT_OGF(opcode)) {
   21e68:	0aab      	lsrs	r3, r5, #10
   21e6a:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   21e6e:	d20b      	bcs.n	21e88 <cmd_put+0x4c>
   21e70:	b21a      	sxth	r2, r3
   21e72:	2a00      	cmp	r2, #0
   21e74:	d04b      	beq.n	21f0e <cmd_put+0xd2>
   21e76:	3b01      	subs	r3, #1
   21e78:	2b07      	cmp	r3, #7
   21e7a:	d84a      	bhi.n	21f12 <cmd_put+0xd6>
   21e7c:	e8df f003 	tbb	[pc, r3]
   21e80:	2f274922 	.word	0x2f274922
   21e84:	3f494937 	.word	0x3f494937
   21e88:	2b3f      	cmp	r3, #63	; 0x3f
   21e8a:	d107      	bne.n	21e9c <cmd_put+0x60>
						       raw_event_out,
						       &return_param_length);
			break;
#if defined(CONFIG_BT_HCI_VS)
		case BT_OGF_VS:
			status = vs_cmd_put(cmd_in,
   21e8c:	f10d 0206 	add.w	r2, sp, #6
   21e90:	4631      	mov	r1, r6
   21e92:	4638      	mov	r0, r7
   21e94:	f009 fcdc 	bl	2b850 <vs_cmd_put>
   21e98:	4604      	mov	r4, r0
					    raw_event_out,
					    &return_param_length);
			break;
   21e9a:	e000      	b.n	21e9e <cmd_put+0x62>
		switch (BT_OGF(opcode)) {
   21e9c:	2401      	movs	r4, #1
		default:
			status = BT_HCI_ERR_UNKNOWN_CMD;
			break;
		}

		generate_command_status_event = !command_generates_command_complete_event(opcode);
   21e9e:	4628      	mov	r0, r5
   21ea0:	f7ff ff6e 	bl	21d80 <command_generates_command_complete_event>
   21ea4:	f080 0001 	eor.w	r0, r0, #1
   21ea8:	f88d 0007 	strb.w	r0, [sp, #7]
	}

	if (generate_command_status_event ||
   21eac:	f89d 3007 	ldrb.w	r3, [sp, #7]
   21eb0:	b90b      	cbnz	r3, 21eb6 <cmd_put+0x7a>
   21eb2:	2c01      	cmp	r4, #1
   21eb4:	d12f      	bne.n	21f16 <cmd_put+0xda>
	    (status == BT_HCI_ERR_UNKNOWN_CMD))	{
		encode_command_status(raw_event_out, opcode, status);
   21eb6:	4622      	mov	r2, r4
   21eb8:	4629      	mov	r1, r5
   21eba:	4630      	mov	r0, r6
   21ebc:	f009 fa06 	bl	2b2cc <encode_command_status>
	} else {
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}
   21ec0:	b003      	add	sp, #12
   21ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			status = link_control_cmd_put(cmd_in);
   21ec4:	4638      	mov	r0, r7
   21ec6:	f009 fa1c 	bl	2b302 <link_control_cmd_put>
   21eca:	4604      	mov	r4, r0
			break;
   21ecc:	e7e7      	b.n	21e9e <cmd_put+0x62>
			status = controller_and_baseband_cmd_put(cmd_in,
   21ece:	f10d 0206 	add.w	r2, sp, #6
   21ed2:	4631      	mov	r1, r6
   21ed4:	4638      	mov	r0, r7
   21ed6:	f009 fa2b 	bl	2b330 <controller_and_baseband_cmd_put>
   21eda:	4604      	mov	r4, r0
			break;
   21edc:	e7df      	b.n	21e9e <cmd_put+0x62>
			status = info_param_cmd_put(cmd_in,
   21ede:	f10d 0206 	add.w	r2, sp, #6
   21ee2:	4631      	mov	r1, r6
   21ee4:	4638      	mov	r0, r7
   21ee6:	f009 fb4f 	bl	2b588 <info_param_cmd_put>
   21eea:	4604      	mov	r4, r0
			break;
   21eec:	e7d7      	b.n	21e9e <cmd_put+0x62>
			status = status_param_cmd_put(cmd_in,
   21eee:	f10d 0206 	add.w	r2, sp, #6
   21ef2:	4631      	mov	r1, r6
   21ef4:	4638      	mov	r0, r7
   21ef6:	f009 fa02 	bl	2b2fe <status_param_cmd_put>
   21efa:	4604      	mov	r4, r0
			break;
   21efc:	e7cf      	b.n	21e9e <cmd_put+0x62>
			status = le_controller_cmd_put(cmd_in,
   21efe:	f10d 0206 	add.w	r2, sp, #6
   21f02:	4631      	mov	r1, r6
   21f04:	4638      	mov	r0, r7
   21f06:	f009 fbd5 	bl	2b6b4 <le_controller_cmd_put>
   21f0a:	4604      	mov	r4, r0
			break;
   21f0c:	e7c7      	b.n	21e9e <cmd_put+0x62>
		switch (BT_OGF(opcode)) {
   21f0e:	2401      	movs	r4, #1
   21f10:	e7c5      	b.n	21e9e <cmd_put+0x62>
   21f12:	2401      	movs	r4, #1
   21f14:	e7c3      	b.n	21e9e <cmd_put+0x62>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   21f16:	4623      	mov	r3, r4
   21f18:	f89d 2006 	ldrb.w	r2, [sp, #6]
   21f1c:	4629      	mov	r1, r5
   21f1e:	4630      	mov	r0, r6
   21f20:	f009 f9dd 	bl	2b2de <encode_command_complete_header>
}
   21f24:	e7cc      	b.n	21ec0 <cmd_put+0x84>
   21f26:	bf00      	nop
   21f28:	200088cc 	.word	0x200088cc

00021f2c <hci_internal_cmd_put>:

int hci_internal_cmd_put(uint8_t *cmd_in)
{
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   21f2c:	4b07      	ldr	r3, [pc, #28]	; (21f4c <hci_internal_cmd_put+0x20>)
   21f2e:	781b      	ldrb	r3, [r3, #0]
   21f30:	b94b      	cbnz	r3, 21f46 <hci_internal_cmd_put+0x1a>
{
   21f32:	b510      	push	{r4, lr}
		> HCI_CMD_PACKET_MAX_SIZE) {
		return -EINVAL;
	}

	if (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT)) {
		cmd_put(cmd_in, &cmd_complete_or_status.raw_event[0]);
   21f34:	4c06      	ldr	r4, [pc, #24]	; (21f50 <hci_internal_cmd_put+0x24>)
   21f36:	4621      	mov	r1, r4
   21f38:	f7ff ff80 	bl	21e3c <cmd_put>
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   21f3c:	2301      	movs	r3, #1
   21f3e:	f804 3c01 	strb.w	r3, [r4, #-1]
	}

	return 0;
   21f42:	2000      	movs	r0, #0
}
   21f44:	bd10      	pop	{r4, pc}
		return -NRF_EPERM;
   21f46:	f04f 30ff 	mov.w	r0, #4294967295
}
   21f4a:	4770      	bx	lr
   21f4c:	200088d0 	.word	0x200088d0
   21f50:	200088d1 	.word	0x200088d1

00021f54 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   21f54:	b538      	push	{r3, r4, r5, lr}
   21f56:	460c      	mov	r4, r1
	if (cmd_complete_or_status.occurred) {
   21f58:	4b08      	ldr	r3, [pc, #32]	; (21f7c <hci_internal_msg_get+0x28>)
   21f5a:	781b      	ldrb	r3, [r3, #0]
   21f5c:	b913      	cbnz	r3, 21f64 <hci_internal_msg_get+0x10>
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
   21f5e:	f7eb f82d 	bl	cfbc <sdc_hci_get>
}
   21f62:	bd38      	pop	{r3, r4, r5, pc}
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   21f64:	4d05      	ldr	r5, [pc, #20]	; (21f7c <hci_internal_msg_get+0x28>)
   21f66:	78aa      	ldrb	r2, [r5, #2]
		memcpy(msg_out,
   21f68:	3202      	adds	r2, #2
   21f6a:	1c69      	adds	r1, r5, #1
   21f6c:	f005 faae 	bl	274cc <memcpy>
		cmd_complete_or_status.occurred = false;
   21f70:	2000      	movs	r0, #0
   21f72:	7028      	strb	r0, [r5, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   21f74:	2304      	movs	r3, #4
   21f76:	7023      	strb	r3, [r4, #0]
		return 0;
   21f78:	e7f3      	b.n	21f62 <hci_internal_msg_get+0xe>
   21f7a:	bf00      	nop
   21f7c:	200088d0 	.word	0x200088d0

00021f80 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   21f80:	b538      	push	{r3, r4, r5, lr}
   21f82:	4605      	mov	r5, r0
   21f84:	460c      	mov	r4, r1
   21f86:	4809      	ldr	r0, [pc, #36]	; (21fac <bt_rand+0x2c>)
   21f88:	f009 fec7 	bl	2bd1a <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   21f8c:	f080 0301 	eor.w	r3, r0, #1
   21f90:	f013 0fff 	tst.w	r3, #255	; 0xff
   21f94:	d106      	bne.n	21fa4 <bt_rand+0x24>
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   21f96:	b2a2      	uxth	r2, r4
	const struct entropy_driver_api *api =
   21f98:	4804      	ldr	r0, [pc, #16]	; (21fac <bt_rand+0x2c>)
   21f9a:	6883      	ldr	r3, [r0, #8]
	return api->get_entropy(dev, buffer, length);
   21f9c:	681b      	ldr	r3, [r3, #0]
   21f9e:	4629      	mov	r1, r5
   21fa0:	4798      	blx	r3
}
   21fa2:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   21fa4:	f06f 0012 	mvn.w	r0, #18
   21fa8:	e7fb      	b.n	21fa2 <bt_rand+0x22>
   21faa:	bf00      	nop
   21fac:	0002cdf0 	.word	0x0002cdf0

00021fb0 <public_key>:

#if defined(CONFIG_BT_CTLR_ECDH_LIB_OBERON)
#include <ocrypto_ecdh_p256.h>

static uint8_t public_key(void)
{
   21fb0:	b508      	push	{r3, lr}
   21fb2:	e002      	b.n	21fba <public_key+0xa>
		if (err) {
			return BT_HCI_ERR_UNSPECIFIED;
		}

		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
			err = -1;
   21fb4:	f04f 30ff 	mov.w	r0, #4294967295
			continue;
		}

		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
						   ecdh.private_key_be);
	} while (err);
   21fb8:	b190      	cbz	r0, 21fe0 <public_key+0x30>
		err = bt_rand(ecdh.private_key_be, 32);
   21fba:	2120      	movs	r1, #32
   21fbc:	4809      	ldr	r0, [pc, #36]	; (21fe4 <public_key+0x34>)
   21fbe:	f7ff ffdf 	bl	21f80 <bt_rand>
		if (err) {
   21fc2:	b960      	cbnz	r0, 21fde <public_key+0x2e>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   21fc4:	2220      	movs	r2, #32
   21fc6:	4908      	ldr	r1, [pc, #32]	; (21fe8 <public_key+0x38>)
   21fc8:	4806      	ldr	r0, [pc, #24]	; (21fe4 <public_key+0x34>)
   21fca:	f005 fa6d 	bl	274a8 <memcmp>
   21fce:	2800      	cmp	r0, #0
   21fd0:	d0f0      	beq.n	21fb4 <public_key+0x4>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   21fd2:	4904      	ldr	r1, [pc, #16]	; (21fe4 <public_key+0x34>)
   21fd4:	f101 0020 	add.w	r0, r1, #32
   21fd8:	f003 f904 	bl	251e4 <ocrypto_ecdh_p256_public_key>
   21fdc:	e7ec      	b.n	21fb8 <public_key+0x8>
			return BT_HCI_ERR_UNSPECIFIED;
   21fde:	201f      	movs	r0, #31

	return 0;
}
   21fe0:	bd08      	pop	{r3, pc}
   21fe2:	bf00      	nop
   21fe4:	2000892c 	.word	0x2000892c
   21fe8:	0002fe40 	.word	0x0002fe40

00021fec <ecdh_p256_public_key>:
	return 0;
}
#endif /* defined(BT_CTLR_ECDH_LIB_TINYCRYPT) */

static struct net_buf *ecdh_p256_public_key(void)
{
   21fec:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_meta_event *meta;
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;
	uint8_t status;

	status = public_key();
   21fee:	f7ff ffdf 	bl	21fb0 <public_key>
   21ff2:	4605      	mov	r5, r0

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   21ff4:	f04f 32ff 	mov.w	r2, #4294967295
   21ff8:	f04f 33ff 	mov.w	r3, #4294967295
   21ffc:	2001      	movs	r0, #1
   21ffe:	f7f4 ffd1 	bl	16fa4 <bt_buf_get_rx>
   22002:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   22004:	f100 060c 	add.w	r6, r0, #12
   22008:	2102      	movs	r1, #2
   2200a:	4630      	mov	r0, r6
   2200c:	f007 ff65 	bl	29eda <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   22010:	233e      	movs	r3, #62	; 0x3e
   22012:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   22014:	2342      	movs	r3, #66	; 0x42
   22016:	7043      	strb	r3, [r0, #1]
   22018:	2101      	movs	r1, #1
   2201a:	4630      	mov	r0, r6
   2201c:	f007 ff5d 	bl	29eda <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   22020:	2308      	movs	r3, #8
   22022:	7003      	strb	r3, [r0, #0]
   22024:	2141      	movs	r1, #65	; 0x41
   22026:	4630      	mov	r0, r6
   22028:	f007 ff57 	bl	29eda <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   2202c:	7005      	strb	r5, [r0, #0]

	if (status) {
   2202e:	b91d      	cbnz	r5, 22038 <ecdh_p256_public_key+0x4c>
		(void)memset(evt->key, 0, sizeof(evt->key));
	} else {
		/* Reverse X */
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   22030:	1c42      	adds	r2, r0, #1

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;
   22032:	4b0e      	ldr	r3, [pc, #56]	; (2206c <ecdh_p256_public_key+0x80>)

	for (; length > 0; length--) {
   22034:	2120      	movs	r1, #32
   22036:	e00a      	b.n	2204e <ecdh_p256_public_key+0x62>
		(void)memset(evt->key, 0, sizeof(evt->key));
   22038:	2240      	movs	r2, #64	; 0x40
   2203a:	2100      	movs	r1, #0
   2203c:	3001      	adds	r0, #1
   2203e:	f005 fa74 	bl	2752a <memset>
   22042:	e011      	b.n	22068 <ecdh_p256_public_key+0x7c>
		*pdst++ = *psrc--;
   22044:	f813 c901 	ldrb.w	ip, [r3], #-1
   22048:	f802 cb01 	strb.w	ip, [r2], #1
	for (; length > 0; length--) {
   2204c:	3901      	subs	r1, #1
   2204e:	2900      	cmp	r1, #0
   22050:	d1f8      	bne.n	22044 <ecdh_p256_public_key+0x58>
		/* Reverse Y */
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   22052:	3021      	adds	r0, #33	; 0x21
	psrc += length - 1;
   22054:	4b06      	ldr	r3, [pc, #24]	; (22070 <ecdh_p256_public_key+0x84>)
	for (; length > 0; length--) {
   22056:	2220      	movs	r2, #32
   22058:	e004      	b.n	22064 <ecdh_p256_public_key+0x78>
		*pdst++ = *psrc--;
   2205a:	f813 1901 	ldrb.w	r1, [r3], #-1
   2205e:	f800 1b01 	strb.w	r1, [r0], #1
	for (; length > 0; length--) {
   22062:	3a01      	subs	r2, #1
   22064:	2a00      	cmp	r2, #0
   22066:	d1f8      	bne.n	2205a <ecdh_p256_public_key+0x6e>
	}

	return buf;
}
   22068:	4620      	mov	r0, r4
   2206a:	bd70      	pop	{r4, r5, r6, pc}
   2206c:	2000896b 	.word	0x2000896b
   22070:	2000898b 	.word	0x2000898b

00022074 <common_secret>:
{
   22074:	b5b0      	push	{r4, r5, r7, lr}
   22076:	b082      	sub	sp, #8
   22078:	af00      	add	r7, sp, #0
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   2207a:	b150      	cbz	r0, 22092 <common_secret+0x1e>
   2207c:	4925      	ldr	r1, [pc, #148]	; (22114 <common_secret+0xa0>)
   2207e:	4826      	ldr	r0, [pc, #152]	; (22118 <common_secret+0xa4>)
   22080:	4602      	mov	r2, r0
   22082:	f003 f8c3 	bl	2520c <ocrypto_ecdh_p256_common_secret>
	if (err) {
   22086:	4603      	mov	r3, r0
   22088:	b928      	cbnz	r0, 22096 <common_secret+0x22>
	return 0;
   2208a:	2000      	movs	r0, #0
}
   2208c:	3708      	adds	r7, #8
   2208e:	46bd      	mov	sp, r7
   22090:	bdb0      	pop	{r4, r5, r7, pc}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   22092:	4922      	ldr	r1, [pc, #136]	; (2211c <common_secret+0xa8>)
   22094:	e7f3      	b.n	2207e <common_secret+0xa>
		LOG_ERR("public key is not valid (err %d)", err);
   22096:	466c      	mov	r4, sp
   22098:	b088      	sub	sp, #32
   2209a:	4669      	mov	r1, sp
   2209c:	f111 0210 	adds.w	r2, r1, #16
   220a0:	d031      	beq.n	22106 <common_secret+0x92>
   220a2:	200c      	movs	r0, #12
   220a4:	b142      	cbz	r2, 220b8 <common_secret+0x44>
   220a6:	4684      	mov	ip, r0
   220a8:	2804      	cmp	r0, #4
   220aa:	dd01      	ble.n	220b0 <common_secret+0x3c>
   220ac:	4d1c      	ldr	r5, [pc, #112]	; (22120 <common_secret+0xac>)
   220ae:	614d      	str	r5, [r1, #20]
   220b0:	f1bc 0f08 	cmp.w	ip, #8
   220b4:	dd00      	ble.n	220b8 <common_secret+0x44>
   220b6:	618b      	str	r3, [r1, #24]
   220b8:	280b      	cmp	r0, #11
   220ba:	dd27      	ble.n	2210c <common_secret+0x98>
   220bc:	230c      	movs	r3, #12
   220be:	b13a      	cbz	r2, 220d0 <common_secret+0x5c>
   220c0:	2003      	movs	r0, #3
   220c2:	7138      	strb	r0, [r7, #4]
   220c4:	2000      	movs	r0, #0
   220c6:	7178      	strb	r0, [r7, #5]
   220c8:	71b8      	strb	r0, [r7, #6]
   220ca:	71f8      	strb	r0, [r7, #7]
   220cc:	6878      	ldr	r0, [r7, #4]
   220ce:	6108      	str	r0, [r1, #16]
   220d0:	2100      	movs	r1, #0
   220d2:	f36f 0100 	bfc	r1, #0, #1
   220d6:	f36f 0141 	bfc	r1, #1, #1
   220da:	f36f 0182 	bfc	r1, #2, #1
   220de:	f36f 01c5 	bfc	r1, #3, #3
   220e2:	2001      	movs	r0, #1
   220e4:	f360 1188 	bfi	r1, r0, #6, #3
   220e8:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   220ec:	f363 2152 	bfi	r1, r3, #9, #10
   220f0:	f36f 41de 	bfc	r1, #19, #12
   220f4:	f36f 71df 	bfc	r1, #31, #1
   220f8:	2300      	movs	r3, #0
   220fa:	480a      	ldr	r0, [pc, #40]	; (22124 <common_secret+0xb0>)
   220fc:	f004 fdab 	bl	26c56 <z_impl_z_log_msg_static_create>
   22100:	46a5      	mov	sp, r4
		return BT_HCI_ERR_INVALID_PARAM;
   22102:	2012      	movs	r0, #18
   22104:	e7c2      	b.n	2208c <common_secret+0x18>
		LOG_ERR("public key is not valid (err %d)", err);
   22106:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2210a:	e7cb      	b.n	220a4 <common_secret+0x30>
   2210c:	f06f 031b 	mvn.w	r3, #27
   22110:	e7d5      	b.n	220be <common_secret+0x4a>
   22112:	bf00      	nop
   22114:	0002fe40 	.word	0x0002fe40
   22118:	2000894c 	.word	0x2000894c
   2211c:	2000892c 	.word	0x2000892c
   22120:	0002fdfc 	.word	0x0002fdfc
   22124:	0002d0e4 	.word	0x0002d0e4

00022128 <ecdh_p256_common_secret>:

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   22128:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_meta_event *meta;
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);
   2212a:	f7ff ffa3 	bl	22074 <common_secret>
   2212e:	4605      	mov	r5, r0

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   22130:	f04f 32ff 	mov.w	r2, #4294967295
   22134:	f04f 33ff 	mov.w	r3, #4294967295
   22138:	2001      	movs	r0, #1
   2213a:	f7f4 ff33 	bl	16fa4 <bt_buf_get_rx>
   2213e:	4604      	mov	r4, r0
   22140:	f100 060c 	add.w	r6, r0, #12
   22144:	2102      	movs	r1, #2
   22146:	4630      	mov	r0, r6
   22148:	f007 fec7 	bl	29eda <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   2214c:	233e      	movs	r3, #62	; 0x3e
   2214e:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   22150:	2322      	movs	r3, #34	; 0x22
   22152:	7043      	strb	r3, [r0, #1]
   22154:	2101      	movs	r1, #1
   22156:	4630      	mov	r0, r6
   22158:	f007 febf 	bl	29eda <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   2215c:	2309      	movs	r3, #9
   2215e:	7003      	strb	r3, [r0, #0]
   22160:	2121      	movs	r1, #33	; 0x21
   22162:	4630      	mov	r0, r6
   22164:	f007 feb9 	bl	29eda <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   22168:	7005      	strb	r5, [r0, #0]

	if (status) {
   2216a:	b91d      	cbnz	r5, 22174 <ecdh_p256_common_secret+0x4c>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
	} else {
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   2216c:	3001      	adds	r0, #1
	psrc += length - 1;
   2216e:	4b09      	ldr	r3, [pc, #36]	; (22194 <ecdh_p256_common_secret+0x6c>)
	for (; length > 0; length--) {
   22170:	2220      	movs	r2, #32
   22172:	e00a      	b.n	2218a <ecdh_p256_common_secret+0x62>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   22174:	2220      	movs	r2, #32
   22176:	21ff      	movs	r1, #255	; 0xff
   22178:	3001      	adds	r0, #1
   2217a:	f005 f9d6 	bl	2752a <memset>
   2217e:	e006      	b.n	2218e <ecdh_p256_common_secret+0x66>
		*pdst++ = *psrc--;
   22180:	f813 1901 	ldrb.w	r1, [r3], #-1
   22184:	f800 1b01 	strb.w	r1, [r0], #1
	for (; length > 0; length--) {
   22188:	3a01      	subs	r2, #1
   2218a:	2a00      	cmp	r2, #0
   2218c:	d1f8      	bne.n	22180 <ecdh_p256_common_secret+0x58>
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   2218e:	4620      	mov	r0, r4
   22190:	bd70      	pop	{r4, r5, r6, pc}
   22192:	bf00      	nop
   22194:	2000896b 	.word	0x2000896b

00022198 <work_submit>:

static struct k_thread ecdh_thread_data;
static K_KERNEL_STACK_DEFINE(ecdh_thread_stack, CONFIG_BT_CTLR_ECDH_STACK_SIZE);

static void work_submit(void)
{
   22198:	b508      	push	{r3, lr}
	return z_impl_k_poll_signal_raise(sig, result);
   2219a:	2100      	movs	r1, #0
   2219c:	4801      	ldr	r0, [pc, #4]	; (221a4 <work_submit+0xc>)
   2219e:	f002 ffdb 	bl	25158 <z_impl_k_poll_signal_raise>
	k_poll_signal_raise(&ecdh_signal, 0);
}
   221a2:	bd08      	pop	{r3, pc}
   221a4:	20008918 	.word	0x20008918

000221a8 <ecdh_cmd_process>:
{
   221a8:	b510      	push	{r4, lr}
   221aa:	b088      	sub	sp, #32
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   221ac:	f3bf 8f5b 	dmb	ish
   221b0:	4b25      	ldr	r3, [pc, #148]	; (22248 <ecdh_cmd_process+0xa0>)
   221b2:	681b      	ldr	r3, [r3, #0]
   221b4:	f3bf 8f5b 	dmb	ish
	switch (atomic_get(&cmd)) {
   221b8:	2b02      	cmp	r3, #2
   221ba:	d03d      	beq.n	22238 <ecdh_cmd_process+0x90>
   221bc:	2b04      	cmp	r3, #4
   221be:	d03f      	beq.n	22240 <ecdh_cmd_process+0x98>
   221c0:	2b01      	cmp	r3, #1
   221c2:	d026      	beq.n	22212 <ecdh_cmd_process+0x6a>
		LOG_WRN("Unknown command");
   221c4:	4b21      	ldr	r3, [pc, #132]	; (2224c <ecdh_cmd_process+0xa4>)
   221c6:	9307      	str	r3, [sp, #28]
   221c8:	2302      	movs	r3, #2
   221ca:	f88d 3004 	strb.w	r3, [sp, #4]
   221ce:	2400      	movs	r4, #0
   221d0:	f88d 4005 	strb.w	r4, [sp, #5]
   221d4:	f88d 4006 	strb.w	r4, [sp, #6]
   221d8:	f88d 4007 	strb.w	r4, [sp, #7]
   221dc:	9a01      	ldr	r2, [sp, #4]
   221de:	9206      	str	r2, [sp, #24]
   221e0:	4621      	mov	r1, r4
   221e2:	f364 0100 	bfi	r1, r4, #0, #1
   221e6:	f364 0141 	bfi	r1, r4, #1, #1
   221ea:	f364 0182 	bfi	r1, r4, #2, #1
   221ee:	f364 01c5 	bfi	r1, r4, #3, #3
   221f2:	f363 1188 	bfi	r1, r3, #6, #3
   221f6:	2308      	movs	r3, #8
   221f8:	f363 2152 	bfi	r1, r3, #9, #10
   221fc:	f364 41de 	bfi	r1, r4, #19, #12
   22200:	f364 71df 	bfi	r1, r4, #31, #1
   22204:	4623      	mov	r3, r4
   22206:	aa06      	add	r2, sp, #24
   22208:	4811      	ldr	r0, [pc, #68]	; (22250 <ecdh_cmd_process+0xa8>)
   2220a:	f004 fd24 	bl	26c56 <z_impl_z_log_msg_static_create>
		buf = NULL;
   2220e:	4620      	mov	r0, r4
		break;
   22210:	e001      	b.n	22216 <ecdh_cmd_process+0x6e>
		buf = ecdh_p256_public_key();
   22212:	f7ff feeb 	bl	21fec <ecdh_p256_public_key>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   22216:	4b0c      	ldr	r3, [pc, #48]	; (22248 <ecdh_cmd_process+0xa0>)
   22218:	2200      	movs	r2, #0
   2221a:	f3bf 8f5b 	dmb	ish
   2221e:	e853 1f00 	ldrex	r1, [r3]
   22222:	e843 2400 	strex	r4, r2, [r3]
   22226:	2c00      	cmp	r4, #0
   22228:	d1f9      	bne.n	2221e <ecdh_cmd_process+0x76>
   2222a:	f3bf 8f5b 	dmb	ish
	if (buf) {
   2222e:	b108      	cbz	r0, 22234 <ecdh_cmd_process+0x8c>
		bt_recv(buf);
   22230:	f7f7 f97c 	bl	1952c <bt_recv>
}
   22234:	b008      	add	sp, #32
   22236:	bd10      	pop	{r4, pc}
		buf = ecdh_p256_common_secret(false);
   22238:	2000      	movs	r0, #0
   2223a:	f7ff ff75 	bl	22128 <ecdh_p256_common_secret>
		break;
   2223e:	e7ea      	b.n	22216 <ecdh_cmd_process+0x6e>
		buf = ecdh_p256_common_secret(true);
   22240:	2001      	movs	r0, #1
   22242:	f7ff ff71 	bl	22128 <ecdh_p256_common_secret>
		break;
   22246:	e7e6      	b.n	22216 <ecdh_cmd_process+0x6e>
   22248:	20008928 	.word	0x20008928
   2224c:	0002fe20 	.word	0x0002fe20
   22250:	0002d0e4 	.word	0x0002d0e4

00022254 <ecdh_thread>:

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   22254:	b500      	push	{lr}
   22256:	b087      	sub	sp, #28
	struct k_poll_event events[1] = {
   22258:	2300      	movs	r3, #0
   2225a:	9301      	str	r3, [sp, #4]
   2225c:	9302      	str	r3, [sp, #8]
   2225e:	9303      	str	r3, [sp, #12]
   22260:	9304      	str	r3, [sp, #16]
   22262:	9305      	str	r3, [sp, #20]
   22264:	f89d 3011 	ldrb.w	r3, [sp, #17]
   22268:	2201      	movs	r2, #1
   2226a:	f362 0305 	bfi	r3, r2, #0, #6
   2226e:	f88d 3011 	strb.w	r3, [sp, #17]
   22272:	4b0a      	ldr	r3, [pc, #40]	; (2229c <ecdh_thread+0x48>)
   22274:	9305      	str	r3, [sp, #20]
	return z_impl_k_poll(events, num_events, timeout);
   22276:	f04f 32ff 	mov.w	r2, #4294967295
   2227a:	f04f 33ff 	mov.w	r3, #4294967295
   2227e:	2101      	movs	r1, #1
   22280:	a801      	add	r0, sp, #4
   22282:	f002 ff0b 	bl	2509c <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   22286:	4805      	ldr	r0, [pc, #20]	; (2229c <ecdh_thread+0x48>)
   22288:	f00a fd03 	bl	2cc92 <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   2228c:	9b04      	ldr	r3, [sp, #16]
   2228e:	f36f 3394 	bfc	r3, #14, #7
   22292:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   22294:	f7ff ff88 	bl	221a8 <ecdh_cmd_process>
	while (true) {
   22298:	e7ed      	b.n	22276 <ecdh_thread+0x22>
   2229a:	bf00      	nop
   2229c:	20008918 	.word	0x20008918

000222a0 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   222a0:	b510      	push	{r4, lr}
   222a2:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   222a4:	480d      	ldr	r0, [pc, #52]	; (222dc <hci_ecdh_init+0x3c>)
   222a6:	f00a fcef 	bl	2cc88 <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   222aa:	4c0d      	ldr	r4, [pc, #52]	; (222e0 <hci_ecdh_init+0x40>)
   222ac:	2200      	movs	r2, #0
   222ae:	2300      	movs	r3, #0
   222b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   222b4:	2300      	movs	r3, #0
   222b6:	9304      	str	r3, [sp, #16]
   222b8:	220a      	movs	r2, #10
   222ba:	9203      	str	r2, [sp, #12]
   222bc:	9302      	str	r3, [sp, #8]
   222be:	9301      	str	r3, [sp, #4]
   222c0:	9300      	str	r3, [sp, #0]
   222c2:	4b08      	ldr	r3, [pc, #32]	; (222e4 <hci_ecdh_init+0x44>)
   222c4:	f44f 7262 	mov.w	r2, #904	; 0x388
   222c8:	4907      	ldr	r1, [pc, #28]	; (222e8 <hci_ecdh_init+0x48>)
   222ca:	4620      	mov	r0, r4
   222cc:	f009 fe28 	bl	2bf20 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   222d0:	4906      	ldr	r1, [pc, #24]	; (222ec <hci_ecdh_init+0x4c>)
   222d2:	4620      	mov	r0, r4
   222d4:	f001 fcb4 	bl	23c40 <z_impl_k_thread_name_set>
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   222d8:	b008      	add	sp, #32
   222da:	bd10      	pop	{r4, pc}
   222dc:	20008918 	.word	0x20008918
   222e0:	200075b8 	.word	0x200075b8
   222e4:	00022255 	.word	0x00022255
   222e8:	2000a480 	.word	0x2000a480
   222ec:	0002fe30 	.word	0x0002fe30

000222f0 <hci_ecdh_uninit>:

void hci_ecdh_uninit(void)
{
   222f0:	b508      	push	{r3, lr}
	z_impl_k_thread_abort(thread);
   222f2:	4802      	ldr	r0, [pc, #8]	; (222fc <hci_ecdh_uninit+0xc>)
   222f4:	f7f4 fb3c 	bl	16970 <z_impl_k_thread_abort>
#if !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK)
	k_thread_abort(&ecdh_thread_data);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   222f8:	bd08      	pop	{r3, pc}
   222fa:	bf00      	nop
   222fc:	200075b8 	.word	0x200075b8

00022300 <hci_cmd_le_read_local_p256_public_key>:


uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   22300:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   22302:	4b0a      	ldr	r3, [pc, #40]	; (2232c <hci_cmd_le_read_local_p256_public_key+0x2c>)
   22304:	2201      	movs	r2, #1
   22306:	f3bf 8f5b 	dmb	ish
   2230a:	e853 1f00 	ldrex	r1, [r3]
   2230e:	2900      	cmp	r1, #0
   22310:	d103      	bne.n	2231a <hci_cmd_le_read_local_p256_public_key+0x1a>
   22312:	e843 2000 	strex	r0, r2, [r3]
   22316:	2800      	cmp	r0, #0
   22318:	d1f7      	bne.n	2230a <hci_cmd_le_read_local_p256_public_key+0xa>
   2231a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   2231e:	d103      	bne.n	22328 <hci_cmd_le_read_local_p256_public_key+0x28>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();
   22320:	f7ff ff3a 	bl	22198 <work_submit>

	return 0;
   22324:	2000      	movs	r0, #0
}
   22326:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   22328:	200c      	movs	r0, #12
   2232a:	e7fc      	b.n	22326 <hci_cmd_le_read_local_p256_public_key+0x26>
   2232c:	20008928 	.word	0x20008928

00022330 <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   22330:	b508      	push	{r3, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   22332:	b1a1      	cbz	r1, 2235e <cmd_le_generate_dhkey+0x2e>
   22334:	2204      	movs	r2, #4
   22336:	4b17      	ldr	r3, [pc, #92]	; (22394 <cmd_le_generate_dhkey+0x64>)
   22338:	f3bf 8f5b 	dmb	ish
   2233c:	e853 1f00 	ldrex	r1, [r3]
   22340:	2900      	cmp	r1, #0
   22342:	d104      	bne.n	2234e <cmd_le_generate_dhkey+0x1e>
   22344:	e843 2c00 	strex	ip, r2, [r3]
   22348:	f1bc 0f00 	cmp.w	ip, #0
   2234c:	d1f6      	bne.n	2233c <cmd_le_generate_dhkey+0xc>
   2234e:	f3bf 8f5b 	dmb	ish
   22352:	d11c      	bne.n	2238e <cmd_le_generate_dhkey+0x5e>
	psrc += length - 1;
   22354:	f100 021f 	add.w	r2, r0, #31
	uint8_t *pdst = (uint8_t *)dst;
   22358:	4b0f      	ldr	r3, [pc, #60]	; (22398 <cmd_le_generate_dhkey+0x68>)
	for (; length > 0; length--) {
   2235a:	2120      	movs	r1, #32
   2235c:	e006      	b.n	2236c <cmd_le_generate_dhkey+0x3c>
   2235e:	2202      	movs	r2, #2
   22360:	e7e9      	b.n	22336 <cmd_le_generate_dhkey+0x6>
		*pdst++ = *psrc--;
   22362:	f812 c901 	ldrb.w	ip, [r2], #-1
   22366:	f803 cb01 	strb.w	ip, [r3], #1
	for (; length > 0; length--) {
   2236a:	3901      	subs	r1, #1
   2236c:	2900      	cmp	r1, #0
   2236e:	d1f8      	bne.n	22362 <cmd_le_generate_dhkey+0x32>
	psrc += length - 1;
   22370:	303f      	adds	r0, #63	; 0x3f
	uint8_t *pdst = (uint8_t *)dst;
   22372:	4b0a      	ldr	r3, [pc, #40]	; (2239c <cmd_le_generate_dhkey+0x6c>)
	for (; length > 0; length--) {
   22374:	2220      	movs	r2, #32
   22376:	e004      	b.n	22382 <cmd_le_generate_dhkey+0x52>
		*pdst++ = *psrc--;
   22378:	f810 1901 	ldrb.w	r1, [r0], #-1
   2237c:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   22380:	3a01      	subs	r2, #1
   22382:	2a00      	cmp	r2, #0
   22384:	d1f8      	bne.n	22378 <cmd_le_generate_dhkey+0x48>
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);

	work_submit();
   22386:	f7ff ff07 	bl	22198 <work_submit>

	return 0;
   2238a:	2000      	movs	r0, #0
}
   2238c:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   2238e:	200c      	movs	r0, #12
   22390:	e7fc      	b.n	2238c <cmd_le_generate_dhkey+0x5c>
   22392:	bf00      	nop
   22394:	20008928 	.word	0x20008928
   22398:	2000894c 	.word	0x2000894c
   2239c:	2000896c 	.word	0x2000896c

000223a0 <mpsl_lib_init_internal>:
	return 0;
#endif
}

static int32_t mpsl_lib_init_internal(void)
{
   223a0:	b500      	push	{lr}
   223a2:	b083      	sub	sp, #12
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
   223a4:	f009 fada 	bl	2b95c <m_config_clock_source_get>
   223a8:	f88d 0000 	strb.w	r0, [sp]
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   223ac:	2332      	movs	r3, #50	; 0x32
   223ae:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   223b2:	2300      	movs	r3, #0
   223b4:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.rc_ctiv = (CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD * 4 / 1000);
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
	BUILD_ASSERT(CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_TEMP_DIFF == 2,
		     "MPSL always uses a temperature diff threshold of 0.5 degrees");
#else
	clock_cfg.rc_ctiv = 0;
   223b8:	f88d 3001 	strb.w	r3, [sp, #1]
	clock_cfg.rc_temp_ctiv = 0;
   223bc:	f88d 3002 	strb.w	r3, [sp, #2]
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   223c0:	4a03      	ldr	r2, [pc, #12]	; (223d0 <mpsl_lib_init_internal+0x30>)
   223c2:	2119      	movs	r1, #25
   223c4:	4668      	mov	r0, sp
   223c6:	f7e9 ffeb 	bl	c3a0 <mpsl_init>
		return err;
	}
#endif

	return 0;
}
   223ca:	b003      	add	sp, #12
   223cc:	f85d fb04 	ldr.w	pc, [sp], #4
   223d0:	000223d5 	.word	0x000223d5

000223d4 <m_assert_handler>:
{
   223d4:	b590      	push	{r4, r7, lr}
   223d6:	b083      	sub	sp, #12
   223d8:	af00      	add	r7, sp, #0
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   223da:	466c      	mov	r4, sp
   223dc:	2300      	movs	r3, #0
   223de:	713b      	strb	r3, [r7, #4]
   223e0:	2302      	movs	r3, #2
   223e2:	717b      	strb	r3, [r7, #5]
   223e4:	b08a      	sub	sp, #40	; 0x28
   223e6:	46ec      	mov	ip, sp
   223e8:	f11c 0210 	adds.w	r2, ip, #16
   223ec:	d01b      	beq.n	22426 <m_assert_handler+0x52>
   223ee:	f04f 0e12 	mov.w	lr, #18
   223f2:	b12a      	cbz	r2, 22400 <m_assert_handler+0x2c>
   223f4:	f1be 0f04 	cmp.w	lr, #4
   223f8:	dd02      	ble.n	22400 <m_assert_handler+0x2c>
   223fa:	4b2b      	ldr	r3, [pc, #172]	; (224a8 <m_assert_handler+0xd4>)
   223fc:	f8cc 3014 	str.w	r3, [ip, #20]
   22400:	2300      	movs	r3, #0
   22402:	703b      	strb	r3, [r7, #0]
   22404:	2302      	movs	r3, #2
   22406:	707b      	strb	r3, [r7, #1]
   22408:	b1d2      	cbz	r2, 22440 <m_assert_handler+0x6c>
   2240a:	4673      	mov	r3, lr
   2240c:	f1be 0f08 	cmp.w	lr, #8
   22410:	dd01      	ble.n	22416 <m_assert_handler+0x42>
   22412:	f8cc 0018 	str.w	r0, [ip, #24]
   22416:	2b0c      	cmp	r3, #12
   22418:	dd01      	ble.n	2241e <m_assert_handler+0x4a>
   2241a:	f8cc 101c 	str.w	r1, [ip, #28]
   2241e:	f10c 0320 	add.w	r3, ip, #32
   22422:	2100      	movs	r1, #0
   22424:	e00a      	b.n	2243c <m_assert_handler+0x68>
   22426:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   2242a:	e7e2      	b.n	223f2 <m_assert_handler+0x1e>
   2242c:	f101 0008 	add.w	r0, r1, #8
   22430:	4438      	add	r0, r7
   22432:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   22436:	f803 0b01 	strb.w	r0, [r3], #1
   2243a:	3101      	adds	r1, #1
   2243c:	2901      	cmp	r1, #1
   2243e:	d9f5      	bls.n	2242c <m_assert_handler+0x58>
   22440:	f1be 0f11 	cmp.w	lr, #17
   22444:	dd2d      	ble.n	224a2 <m_assert_handler+0xce>
   22446:	2312      	movs	r3, #18
   22448:	b14a      	cbz	r2, 2245e <m_assert_handler+0x8a>
   2244a:	2104      	movs	r1, #4
   2244c:	7139      	strb	r1, [r7, #4]
   2244e:	2100      	movs	r1, #0
   22450:	7179      	strb	r1, [r7, #5]
   22452:	71b9      	strb	r1, [r7, #6]
   22454:	2101      	movs	r1, #1
   22456:	71f9      	strb	r1, [r7, #7]
   22458:	6878      	ldr	r0, [r7, #4]
   2245a:	f8cc 0010 	str.w	r0, [ip, #16]
   2245e:	2100      	movs	r1, #0
   22460:	f36f 0100 	bfc	r1, #0, #1
   22464:	f36f 0141 	bfc	r1, #1, #1
   22468:	f36f 0182 	bfc	r1, #2, #1
   2246c:	f36f 01c5 	bfc	r1, #3, #3
   22470:	2001      	movs	r0, #1
   22472:	f360 1188 	bfi	r1, r0, #6, #3
   22476:	f3c3 0309 	ubfx	r3, r3, #0, #10
   2247a:	f363 2152 	bfi	r1, r3, #9, #10
   2247e:	f36f 41de 	bfc	r1, #19, #12
   22482:	f36f 71df 	bfc	r1, #31, #1
   22486:	2300      	movs	r3, #0
   22488:	4808      	ldr	r0, [pc, #32]	; (224ac <m_assert_handler+0xd8>)
   2248a:	f004 fbe4 	bl	26c56 <z_impl_z_log_msg_static_create>
   2248e:	46a5      	mov	sp, r4
	k_oops();
   22490:	4040      	eors	r0, r0
   22492:	f380 8811 	msr	BASEPRI, r0
   22496:	f04f 0003 	mov.w	r0, #3
   2249a:	df02      	svc	2
}
   2249c:	370c      	adds	r7, #12
   2249e:	46bd      	mov	sp, r7
   224a0:	bd90      	pop	{r4, r7, pc}
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   224a2:	f06f 031b 	mvn.w	r3, #27
   224a6:	e7cf      	b.n	22448 <m_assert_handler+0x74>
   224a8:	0002fe6c 	.word	0x0002fe6c
   224ac:	0002d13c 	.word	0x0002d13c

000224b0 <mpsl_low_prio_init>:

	return 0;
}

static int mpsl_low_prio_init(const struct device *dev)
{
   224b0:	b530      	push	{r4, r5, lr}
   224b2:	b083      	sub	sp, #12
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   224b4:	4d0d      	ldr	r5, [pc, #52]	; (224ec <mpsl_low_prio_init+0x3c>)
   224b6:	2400      	movs	r4, #0
   224b8:	9400      	str	r4, [sp, #0]
   224ba:	f06f 0309 	mvn.w	r3, #9
   224be:	f44f 6280 	mov.w	r2, #1024	; 0x400
   224c2:	490b      	ldr	r1, [pc, #44]	; (224f0 <mpsl_low_prio_init+0x40>)
   224c4:	4628      	mov	r0, r5
   224c6:	f001 ff31 	bl	2432c <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   224ca:	490a      	ldr	r1, [pc, #40]	; (224f4 <mpsl_low_prio_init+0x44>)
   224cc:	4628      	mov	r0, r5
   224ce:	f001 fbb7 	bl	23c40 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   224d2:	4909      	ldr	r1, [pc, #36]	; (224f8 <mpsl_low_prio_init+0x48>)
   224d4:	4809      	ldr	r0, [pc, #36]	; (224fc <mpsl_low_prio_init+0x4c>)
   224d6:	f009 ff05 	bl	2c2e4 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   224da:	4622      	mov	r2, r4
   224dc:	2104      	movs	r1, #4
   224de:	2019      	movs	r0, #25
   224e0:	f004 ff2a 	bl	27338 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   224e4:	4620      	mov	r0, r4
   224e6:	b003      	add	sp, #12
   224e8:	bd30      	pop	{r4, r5, pc}
   224ea:	bf00      	nop
   224ec:	20007670 	.word	0x20007670
   224f0:	2000a880 	.word	0x2000a880
   224f4:	0002fe80 	.word	0x0002fe80
   224f8:	0002b9e5 	.word	0x0002b9e5
   224fc:	2000898c 	.word	0x2000898c

00022500 <mpsl_low_prio_irq_handler>:
{
   22500:	b508      	push	{r3, lr}
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   22502:	4902      	ldr	r1, [pc, #8]	; (2250c <mpsl_low_prio_irq_handler+0xc>)
   22504:	4802      	ldr	r0, [pc, #8]	; (22510 <mpsl_low_prio_irq_handler+0x10>)
   22506:	f009 ff09 	bl	2c31c <k_work_submit_to_queue>
}
   2250a:	bd08      	pop	{r3, pc}
   2250c:	2000898c 	.word	0x2000898c
   22510:	20007670 	.word	0x20007670

00022514 <mpsl_hfclk_callback>:
#include <mpsl_clock.h>

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
   22514:	b508      	push	{r3, lr}
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   22516:	4b02      	ldr	r3, [pc, #8]	; (22520 <mpsl_hfclk_callback+0xc>)
   22518:	681b      	ldr	r3, [r3, #0]
   2251a:	2000      	movs	r0, #0
   2251c:	4798      	blx	r3
}
   2251e:	bd08      	pop	{r3, pc}
   22520:	2000899c 	.word	0x2000899c

00022524 <nrfx_clock_start>:

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   22524:	b508      	push	{r3, lr}
	switch (domain) {
   22526:	b128      	cbz	r0, 22534 <nrfx_clock_start+0x10>
   22528:	2801      	cmp	r0, #1
   2252a:	d102      	bne.n	22532 <nrfx_clock_start+0xe>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   2252c:	4804      	ldr	r0, [pc, #16]	; (22540 <nrfx_clock_start+0x1c>)
   2252e:	f7e9 fdb7 	bl	c0a0 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   22532:	bd08      	pop	{r3, pc}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   22534:	4b03      	ldr	r3, [pc, #12]	; (22544 <nrfx_clock_start+0x20>)
   22536:	681b      	ldr	r3, [r3, #0]
   22538:	2001      	movs	r0, #1
   2253a:	4798      	blx	r3
}
   2253c:	e7f9      	b.n	22532 <nrfx_clock_start+0xe>
   2253e:	bf00      	nop
   22540:	00022515 	.word	0x00022515
   22544:	2000899c 	.word	0x2000899c

00022548 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   22548:	4b01      	ldr	r3, [pc, #4]	; (22550 <nrfx_clock_init+0x8>)
   2254a:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   2254c:	4801      	ldr	r0, [pc, #4]	; (22554 <nrfx_clock_init+0xc>)
   2254e:	4770      	bx	lr
   22550:	2000899c 	.word	0x2000899c
   22554:	0bad0000 	.word	0x0bad0000

00022558 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   22558:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   2255c:	4905      	ldr	r1, [pc, #20]	; (22574 <__NVIC_SystemReset+0x1c>)
   2255e:	68ca      	ldr	r2, [r1, #12]
   22560:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   22564:	4b04      	ldr	r3, [pc, #16]	; (22578 <__NVIC_SystemReset+0x20>)
   22566:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   22568:	60cb      	str	r3, [r1, #12]
   2256a:	f3bf 8f4f 	dsb	sy
    __NOP();
   2256e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   22570:	e7fd      	b.n	2256e <__NVIC_SystemReset+0x16>
   22572:	bf00      	nop
   22574:	e000ed00 	.word	0xe000ed00
   22578:	05fa0004 	.word	0x05fa0004

0002257c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   2257c:	4b02      	ldr	r3, [pc, #8]	; (22588 <nvmc_wait+0xc>)
   2257e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   22582:	2b00      	cmp	r3, #0
   22584:	d0fa      	beq.n	2257c <nvmc_wait>
}
   22586:	4770      	bx	lr
   22588:	4001e000 	.word	0x4001e000

0002258c <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
   2258c:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   2258e:	4b03      	ldr	r3, [pc, #12]	; (2259c <nvmc_config+0x10>)
   22590:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
   22594:	f7ff fff2 	bl	2257c <nvmc_wait>
}
   22598:	bd08      	pop	{r3, pc}
   2259a:	bf00      	nop
   2259c:	4001e000 	.word	0x4001e000

000225a0 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   225a0:	4b01      	ldr	r3, [pc, #4]	; (225a8 <SystemCoreClockUpdate+0x8>)
   225a2:	4a02      	ldr	r2, [pc, #8]	; (225ac <SystemCoreClockUpdate+0xc>)
   225a4:	601a      	str	r2, [r3, #0]
}
   225a6:	4770      	bx	lr
   225a8:	20000980 	.word	0x20000980
   225ac:	03d09000 	.word	0x03d09000

000225b0 <SystemInit>:

void SystemInit(void)
{
   225b0:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   225b2:	f009 fa34 	bl	2ba1e <nrf52_errata_36>
   225b6:	b140      	cbz	r0, 225ca <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   225b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   225bc:	2200      	movs	r2, #0
   225be:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   225c2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   225c6:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   225ca:	f009 fa32 	bl	2ba32 <nrf52_errata_66>
   225ce:	2800      	cmp	r0, #0
   225d0:	d046      	beq.n	22660 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   225d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   225d6:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   225da:	4b3b      	ldr	r3, [pc, #236]	; (226c8 <SystemInit+0x118>)
   225dc:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   225e0:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   225e4:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   225e8:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   225ec:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   225f0:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   225f4:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   225f8:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   225fc:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   22600:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   22604:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   22608:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   2260c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   22610:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   22614:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   22618:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   2261c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   22620:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   22624:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   22628:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   2262c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   22630:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   22634:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   22638:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   2263c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   22640:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   22644:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   22648:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   2264c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   22650:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   22654:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   22658:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   2265c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   22660:	f009 f9f1 	bl	2ba46 <nrf52_errata_136>
   22664:	b160      	cbz	r0, 22680 <SystemInit+0xd0>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   22666:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2266a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   2266e:	f013 0f01 	tst.w	r3, #1
   22672:	d005      	beq.n	22680 <SystemInit+0xd0>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   22674:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   22678:	f06f 0201 	mvn.w	r2, #1
   2267c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    nrf52_handle_approtect();
   22680:	f009 f9fa 	bl	2ba78 <nrf52_handle_approtect>

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   22684:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   22688:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   2268c:	2b00      	cmp	r3, #0
   2268e:	db08      	blt.n	226a2 <SystemInit+0xf2>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   22690:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   22694:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   22698:	2b00      	cmp	r3, #0
   2269a:	db02      	blt.n	226a2 <SystemInit+0xf2>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
   2269c:	f7ff ff80 	bl	225a0 <SystemCoreClockUpdate>
}
   226a0:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
   226a2:	2001      	movs	r0, #1
   226a4:	f7ff ff72 	bl	2258c <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   226a8:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
   226ac:	2512      	movs	r5, #18
   226ae:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
   226b2:	f7ff ff63 	bl	2257c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   226b6:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
   226ba:	f7ff ff5f 	bl	2257c <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
   226be:	2000      	movs	r0, #0
   226c0:	f7ff ff64 	bl	2258c <nvmc_config>
            NVIC_SystemReset();
   226c4:	f7ff ff48 	bl	22558 <__NVIC_SystemReset>
   226c8:	4000c000 	.word	0x4000c000

000226cc <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   226cc:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   226ce:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   226d0:	fab4 f384 	clz	r3, r4
   226d4:	f1c3 031f 	rsb	r3, r3, #31
   226d8:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
   226dc:	2b00      	cmp	r3, #0
   226de:	db16      	blt.n	2270e <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   226e0:	2201      	movs	r2, #1
   226e2:	fa02 f303 	lsl.w	r3, r2, r3
   226e6:	ea24 0303 	bic.w	r3, r4, r3
   226ea:	f3bf 8f5b 	dmb	ish
   226ee:	e850 2f00 	ldrex	r2, [r0]
   226f2:	42a2      	cmp	r2, r4
   226f4:	d104      	bne.n	22700 <nrfx_flag32_alloc+0x34>
   226f6:	e840 3e00 	strex	lr, r3, [r0]
   226fa:	f1be 0f00 	cmp.w	lr, #0
   226fe:	d1f6      	bne.n	226ee <nrfx_flag32_alloc+0x22>
   22700:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   22704:	d1e3      	bne.n	226ce <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
   22706:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
   2270a:	4802      	ldr	r0, [pc, #8]	; (22714 <nrfx_flag32_alloc+0x48>)
}
   2270c:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
   2270e:	4802      	ldr	r0, [pc, #8]	; (22718 <nrfx_flag32_alloc+0x4c>)
   22710:	e7fc      	b.n	2270c <nrfx_flag32_alloc+0x40>
   22712:	bf00      	nop
   22714:	0bad0000 	.word	0x0bad0000
   22718:	0bad0002 	.word	0x0bad0002

0002271c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   2271c:	6803      	ldr	r3, [r0, #0]
   2271e:	40cb      	lsrs	r3, r1
   22720:	f013 0f01 	tst.w	r3, #1
   22724:	d115      	bne.n	22752 <nrfx_flag32_free+0x36>
{
   22726:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
   22728:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   2272a:	2301      	movs	r3, #1
   2272c:	408b      	lsls	r3, r1
   2272e:	4313      	orrs	r3, r2
   22730:	f3bf 8f5b 	dmb	ish
   22734:	e850 cf00 	ldrex	ip, [r0]
   22738:	4594      	cmp	ip, r2
   2273a:	d104      	bne.n	22746 <nrfx_flag32_free+0x2a>
   2273c:	e840 3e00 	strex	lr, r3, [r0]
   22740:	f1be 0f00 	cmp.w	lr, #0
   22744:	d1f6      	bne.n	22734 <nrfx_flag32_free+0x18>
   22746:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   2274a:	d1ed      	bne.n	22728 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
   2274c:	4802      	ldr	r0, [pc, #8]	; (22758 <nrfx_flag32_free+0x3c>)
}
   2274e:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
   22752:	4802      	ldr	r0, [pc, #8]	; (2275c <nrfx_flag32_free+0x40>)
}
   22754:	4770      	bx	lr
   22756:	bf00      	nop
   22758:	0bad0000 	.word	0x0bad0000
   2275c:	0bad0004 	.word	0x0bad0004

00022760 <nrf_gpio_reconfigure>:
{
   22760:	b5f0      	push	{r4, r5, r6, r7, lr}
   22762:	461c      	mov	r4, r3
   22764:	9f05      	ldr	r7, [sp, #20]
   22766:	9e06      	ldr	r6, [sp, #24]
    *p_pin = pin_number & 0x1F;
   22768:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
   2276c:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2276e:	2801      	cmp	r0, #1
   22770:	d035      	beq.n	227de <nrf_gpio_reconfigure+0x7e>
        case 0: return NRF_P0;
   22772:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   22776:	f50c 73e0 	add.w	r3, ip, #448	; 0x1c0
   2277a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2277e:	b381      	cbz	r1, 227e2 <nrf_gpio_reconfigure+0x82>
   22780:	2001      	movs	r0, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   22782:	b382      	cbz	r2, 227e6 <nrf_gpio_reconfigure+0x86>
   22784:	f04f 0e02 	mov.w	lr, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   22788:	ea40 000e 	orr.w	r0, r0, lr
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2278c:	b374      	cbz	r4, 227ec <nrf_gpio_reconfigure+0x8c>
   2278e:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   22792:	ea40 000e 	orr.w	r0, r0, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   22796:	b367      	cbz	r7, 227f2 <nrf_gpio_reconfigure+0x92>
   22798:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2279c:	ea40 000e 	orr.w	r0, r0, lr
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   227a0:	b356      	cbz	r6, 227f8 <nrf_gpio_reconfigure+0x98>
   227a2:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   227a6:	ea40 000e 	orr.w	r0, r0, lr
    cnf &= ~to_update;
   227aa:	ea23 0000 	bic.w	r0, r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   227ae:	b331      	cbz	r1, 227fe <nrf_gpio_reconfigure+0x9e>
   227b0:	780b      	ldrb	r3, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   227b2:	b332      	cbz	r2, 22802 <nrf_gpio_reconfigure+0xa2>
   227b4:	7812      	ldrb	r2, [r2, #0]
   227b6:	0052      	lsls	r2, r2, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   227b8:	4313      	orrs	r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   227ba:	b324      	cbz	r4, 22806 <nrf_gpio_reconfigure+0xa6>
   227bc:	7822      	ldrb	r2, [r4, #0]
   227be:	0092      	lsls	r2, r2, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   227c0:	4313      	orrs	r3, r2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   227c2:	b317      	cbz	r7, 2280a <nrf_gpio_reconfigure+0xaa>
   227c4:	783a      	ldrb	r2, [r7, #0]
   227c6:	0212      	lsls	r2, r2, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   227c8:	4313      	orrs	r3, r2
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   227ca:	b306      	cbz	r6, 2280e <nrf_gpio_reconfigure+0xae>
   227cc:	7832      	ldrb	r2, [r6, #0]
   227ce:	0412      	lsls	r2, r2, #16
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   227d0:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   227d2:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
   227d4:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
   227d8:	f845 302c 	str.w	r3, [r5, ip, lsl #2]
}
   227dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
   227de:	4d0d      	ldr	r5, [pc, #52]	; (22814 <nrf_gpio_reconfigure+0xb4>)
   227e0:	e7c9      	b.n	22776 <nrf_gpio_reconfigure+0x16>
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   227e2:	2000      	movs	r0, #0
   227e4:	e7cd      	b.n	22782 <nrf_gpio_reconfigure+0x22>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   227e6:	f04f 0e00 	mov.w	lr, #0
   227ea:	e7cd      	b.n	22788 <nrf_gpio_reconfigure+0x28>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   227ec:	f04f 0e00 	mov.w	lr, #0
   227f0:	e7cf      	b.n	22792 <nrf_gpio_reconfigure+0x32>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   227f2:	f04f 0e00 	mov.w	lr, #0
   227f6:	e7d1      	b.n	2279c <nrf_gpio_reconfigure+0x3c>
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   227f8:	f04f 0e00 	mov.w	lr, #0
   227fc:	e7d3      	b.n	227a6 <nrf_gpio_reconfigure+0x46>
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   227fe:	2300      	movs	r3, #0
   22800:	e7d7      	b.n	227b2 <nrf_gpio_reconfigure+0x52>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   22802:	2200      	movs	r2, #0
   22804:	e7d8      	b.n	227b8 <nrf_gpio_reconfigure+0x58>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   22806:	2200      	movs	r2, #0
   22808:	e7da      	b.n	227c0 <nrf_gpio_reconfigure+0x60>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2280a:	2200      	movs	r2, #0
   2280c:	e7dc      	b.n	227c8 <nrf_gpio_reconfigure+0x68>
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2280e:	2200      	movs	r2, #0
   22810:	e7de      	b.n	227d0 <nrf_gpio_reconfigure+0x70>
   22812:	bf00      	nop
   22814:	50000300 	.word	0x50000300

00022818 <nrf_gpio_latches_read_and_clear>:
{
   22818:	b500      	push	{lr}
   2281a:	b083      	sub	sp, #12
   2281c:	4684      	mov	ip, r0
   2281e:	468e      	mov	lr, r1
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   22820:	4b0d      	ldr	r3, [pc, #52]	; (22858 <nrf_gpio_latches_read_and_clear+0x40>)
   22822:	e893 0003 	ldmia.w	r3, {r0, r1}
   22826:	ab02      	add	r3, sp, #8
   22828:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   2282c:	4663      	mov	r3, ip
   2282e:	e00b      	b.n	22848 <nrf_gpio_latches_read_and_clear+0x30>
        *p_masks = gpio_regs[i]->LATCH;
   22830:	a902      	add	r1, sp, #8
   22832:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   22836:	f851 1c08 	ldr.w	r1, [r1, #-8]
   2283a:	f8d1 0520 	ldr.w	r0, [r1, #1312]	; 0x520
   2283e:	f842 0b04 	str.w	r0, [r2], #4
        gpio_regs[i]->LATCH = *p_masks;
   22842:	f8c1 0520 	str.w	r0, [r1, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   22846:	3301      	adds	r3, #1
   22848:	eb0c 000e 	add.w	r0, ip, lr
   2284c:	4298      	cmp	r0, r3
   2284e:	d8ef      	bhi.n	22830 <nrf_gpio_latches_read_and_clear+0x18>
}
   22850:	b003      	add	sp, #12
   22852:	f85d fb04 	ldr.w	pc, [sp], #4
   22856:	bf00      	nop
   22858:	0002d228 	.word	0x0002d228

0002285c <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   2285c:	3008      	adds	r0, #8
   2285e:	4b03      	ldr	r3, [pc, #12]	; (2286c <pin_in_use+0x10>)
   22860:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   22864:	f000 0001 	and.w	r0, r0, #1
   22868:	4770      	bx	lr
   2286a:	bf00      	nop
   2286c:	20000984 	.word	0x20000984

00022870 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   22870:	3008      	adds	r0, #8
   22872:	4b03      	ldr	r3, [pc, #12]	; (22880 <pin_in_use_by_te+0x10>)
   22874:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   22878:	f3c0 1040 	ubfx	r0, r0, #5, #1
   2287c:	4770      	bx	lr
   2287e:	bf00      	nop
   22880:	20000984 	.word	0x20000984

00022884 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   22884:	3008      	adds	r0, #8
   22886:	4b04      	ldr	r3, [pc, #16]	; (22898 <pin_has_trigger+0x14>)
   22888:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   2288c:	f010 001c 	ands.w	r0, r0, #28
   22890:	bf18      	it	ne
   22892:	2001      	movne	r0, #1
   22894:	4770      	bx	lr
   22896:	bf00      	nop
   22898:	20000984 	.word	0x20000984

0002289c <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2289c:	3008      	adds	r0, #8
   2289e:	4b03      	ldr	r3, [pc, #12]	; (228ac <pin_is_output+0x10>)
   228a0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   228a4:	f3c0 0040 	ubfx	r0, r0, #1, #1
   228a8:	4770      	bx	lr
   228aa:	bf00      	nop
   228ac:	20000984 	.word	0x20000984

000228b0 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   228b0:	3008      	adds	r0, #8
   228b2:	4b02      	ldr	r3, [pc, #8]	; (228bc <pin_te_get+0xc>)
   228b4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   228b8:	0b40      	lsrs	r0, r0, #13
   228ba:	4770      	bx	lr
   228bc:	20000984 	.word	0x20000984

000228c0 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   228c0:	2200      	movs	r2, #0
   228c2:	e004      	b.n	228ce <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   228c4:	f04f 33ff 	mov.w	r3, #4294967295
   228c8:	4283      	cmp	r3, r0
   228ca:	d00f      	beq.n	228ec <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   228cc:	3201      	adds	r2, #1
   228ce:	2a29      	cmp	r2, #41	; 0x29
   228d0:	d80a      	bhi.n	228e8 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   228d2:	f102 0308 	add.w	r3, r2, #8
   228d6:	4906      	ldr	r1, [pc, #24]	; (228f0 <handler_in_use+0x30>)
   228d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   228dc:	f413 7f80 	tst.w	r3, #256	; 0x100
   228e0:	d0f0      	beq.n	228c4 <handler_in_use+0x4>
   228e2:	f3c3 2343 	ubfx	r3, r3, #9, #4
   228e6:	e7ef      	b.n	228c8 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
   228e8:	2000      	movs	r0, #0
   228ea:	4770      	bx	lr
            return true;
   228ec:	2001      	movs	r0, #1
}
   228ee:	4770      	bx	lr
   228f0:	20000984 	.word	0x20000984

000228f4 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   228f4:	2300      	movs	r3, #0
   228f6:	b113      	cbz	r3, 228fe <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
   228f8:	f04f 30ff 	mov.w	r0, #4294967295
}
   228fc:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   228fe:	4a07      	ldr	r2, [pc, #28]	; (2291c <find_handler+0x28>)
   22900:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   22904:	4282      	cmp	r2, r0
   22906:	d001      	beq.n	2290c <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   22908:	3301      	adds	r3, #1
   2290a:	e7f4      	b.n	228f6 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   2290c:	4a03      	ldr	r2, [pc, #12]	; (2291c <find_handler+0x28>)
   2290e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   22912:	6852      	ldr	r2, [r2, #4]
   22914:	428a      	cmp	r2, r1
   22916:	d1f7      	bne.n	22908 <find_handler+0x14>
            return i;
   22918:	4618      	mov	r0, r3
   2291a:	4770      	bx	lr
   2291c:	20000984 	.word	0x20000984

00022920 <get_initial_sense>:
    return NRFX_SUCCESS;
}

static inline nrf_gpio_pin_sense_t get_initial_sense(nrfx_gpiote_pin_t pin)
{
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   22920:	f100 0208 	add.w	r2, r0, #8
   22924:	4b0f      	ldr	r3, [pc, #60]	; (22964 <get_initial_sense+0x44>)
   22926:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   2292a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    nrf_gpio_pin_sense_t sense;

    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   2292e:	2b04      	cmp	r3, #4
   22930:	d012      	beq.n	22958 <get_initial_sense+0x38>
    {
        sense = NRF_GPIO_PIN_SENSE_LOW;
    }
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   22932:	2b05      	cmp	r3, #5
   22934:	d012      	beq.n	2295c <get_initial_sense+0x3c>
    *p_pin = pin_number & 0x1F;
   22936:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   2293a:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2293c:	2801      	cmp	r0, #1
   2293e:	d009      	beq.n	22954 <get_initial_sense+0x34>
        case 0: return NRF_P0;
   22940:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return p_reg->IN;
   22944:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   22948:	40d3      	lsrs	r3, r2
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    }
    else
    {
        /* If edge detection start with sensing opposite state. */
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2294a:	f013 0f01 	tst.w	r3, #1
   2294e:	d007      	beq.n	22960 <get_initial_sense+0x40>
   22950:	2003      	movs	r0, #3
   22952:	4770      	bx	lr
        case 1: return NRF_P1;
   22954:	4b04      	ldr	r3, [pc, #16]	; (22968 <get_initial_sense+0x48>)
   22956:	e7f5      	b.n	22944 <get_initial_sense+0x24>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   22958:	2003      	movs	r0, #3
   2295a:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   2295c:	2002      	movs	r0, #2
   2295e:	4770      	bx	lr
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   22960:	2002      	movs	r0, #2
    }

    return sense;
}
   22962:	4770      	bx	lr
   22964:	20000984 	.word	0x20000984
   22968:	50000300 	.word	0x50000300

0002296c <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2296c:	3008      	adds	r0, #8
   2296e:	4b06      	ldr	r3, [pc, #24]	; (22988 <channel_handler_get+0x1c>)
   22970:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   22974:	f410 7f80 	tst.w	r0, #256	; 0x100
   22978:	d004      	beq.n	22984 <channel_handler_get+0x18>
   2297a:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
   2297e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   22982:	4770      	bx	lr
        return NULL;
   22984:	2000      	movs	r0, #0
}
   22986:	4770      	bx	lr
   22988:	20000984 	.word	0x20000984

0002298c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   2298c:	b570      	push	{r4, r5, r6, lr}
   2298e:	4604      	mov	r4, r0
   22990:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
   22992:	f7ff ffeb 	bl	2296c <channel_handler_get>

    if (handler)
   22996:	b120      	cbz	r0, 229a2 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
   22998:	6806      	ldr	r6, [r0, #0]
   2299a:	6842      	ldr	r2, [r0, #4]
   2299c:	4629      	mov	r1, r5
   2299e:	4620      	mov	r0, r4
   229a0:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
   229a2:	4b04      	ldr	r3, [pc, #16]	; (229b4 <call_handler+0x28>)
   229a4:	689b      	ldr	r3, [r3, #8]
   229a6:	b123      	cbz	r3, 229b2 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   229a8:	4a02      	ldr	r2, [pc, #8]	; (229b4 <call_handler+0x28>)
   229aa:	68d2      	ldr	r2, [r2, #12]
   229ac:	4629      	mov	r1, r5
   229ae:	4620      	mov	r0, r4
   229b0:	4798      	blx	r3
    }
}
   229b2:	bd70      	pop	{r4, r5, r6, pc}
   229b4:	20000984 	.word	0x20000984

000229b8 <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
   229b8:	b570      	push	{r4, r5, r6, lr}
   229ba:	4606      	mov	r6, r0
   229bc:	460c      	mov	r4, r1
   229be:	4615      	mov	r5, r2
    if (is_level(trigger))
   229c0:	4608      	mov	r0, r1
   229c2:	f009 f8cd 	bl	2bb60 <is_level>
   229c6:	b960      	cbnz	r0, 229e2 <next_sense_cond_call_handler+0x2a>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   229c8:	2d02      	cmp	r5, #2
   229ca:	d028      	beq.n	22a1e <next_sense_cond_call_handler+0x66>
   229cc:	2102      	movs	r1, #2

        nrf_gpio_cfg_sense_set(pin, next_sense);
   229ce:	4630      	mov	r0, r6
   229d0:	f009 f89e 	bl	2bb10 <nrf_gpio_cfg_sense_set>

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   229d4:	2c03      	cmp	r4, #3
   229d6:	d026      	beq.n	22a26 <next_sense_cond_call_handler+0x6e>
   229d8:	2d02      	cmp	r5, #2
   229da:	d022      	beq.n	22a22 <next_sense_cond_call_handler+0x6a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   229dc:	2d03      	cmp	r5, #3
   229de:	d027      	beq.n	22a30 <next_sense_cond_call_handler+0x78>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
   229e0:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
   229e2:	4621      	mov	r1, r4
   229e4:	4630      	mov	r0, r6
   229e6:	f7ff ffd1 	bl	2298c <call_handler>
    *p_pin = pin_number & 0x1F;
   229ea:	f006 031f 	and.w	r3, r6, #31
    return pin_number >> 5;
   229ee:	0972      	lsrs	r2, r6, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   229f0:	2a01      	cmp	r2, #1
   229f2:	d012      	beq.n	22a1a <next_sense_cond_call_handler+0x62>
        case 0: return NRF_P0;
   229f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   229f8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   229fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   22a00:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
   22a04:	429d      	cmp	r5, r3
   22a06:	d1eb      	bne.n	229e0 <next_sense_cond_call_handler+0x28>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   22a08:	2100      	movs	r1, #0
   22a0a:	4630      	mov	r0, r6
   22a0c:	f009 f880 	bl	2bb10 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   22a10:	4629      	mov	r1, r5
   22a12:	4630      	mov	r0, r6
   22a14:	f009 f87c 	bl	2bb10 <nrf_gpio_cfg_sense_set>
   22a18:	e7e2      	b.n	229e0 <next_sense_cond_call_handler+0x28>
        case 1: return NRF_P1;
   22a1a:	4a07      	ldr	r2, [pc, #28]	; (22a38 <next_sense_cond_call_handler+0x80>)
   22a1c:	e7ec      	b.n	229f8 <next_sense_cond_call_handler+0x40>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   22a1e:	2103      	movs	r1, #3
   22a20:	e7d5      	b.n	229ce <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   22a22:	2c01      	cmp	r4, #1
   22a24:	d1da      	bne.n	229dc <next_sense_cond_call_handler+0x24>
            call_handler(pin, trigger);
   22a26:	4621      	mov	r1, r4
   22a28:	4630      	mov	r0, r6
   22a2a:	f7ff ffaf 	bl	2298c <call_handler>
}
   22a2e:	e7d7      	b.n	229e0 <next_sense_cond_call_handler+0x28>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   22a30:	2c02      	cmp	r4, #2
   22a32:	d1d5      	bne.n	229e0 <next_sense_cond_call_handler+0x28>
   22a34:	e7f7      	b.n	22a26 <next_sense_cond_call_handler+0x6e>
   22a36:	bf00      	nop
   22a38:	50000300 	.word	0x50000300

00022a3c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   22a3c:	f100 0208 	add.w	r2, r0, #8
   22a40:	4b0e      	ldr	r3, [pc, #56]	; (22a7c <release_handler+0x40>)
   22a42:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   22a46:	f413 7f80 	tst.w	r3, #256	; 0x100
   22a4a:	d016      	beq.n	22a7a <release_handler+0x3e>
{
   22a4c:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   22a4e:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   22a52:	4610      	mov	r0, r2
   22a54:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   22a58:	4a08      	ldr	r2, [pc, #32]	; (22a7c <release_handler+0x40>)
   22a5a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
   22a5e:	4620      	mov	r0, r4
   22a60:	f7ff ff2e 	bl	228c0 <handler_in_use>
   22a64:	b100      	cbz	r0, 22a68 <release_handler+0x2c>
}
   22a66:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
   22a68:	4804      	ldr	r0, [pc, #16]	; (22a7c <release_handler+0x40>)
   22a6a:	2300      	movs	r3, #0
   22a6c:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   22a70:	4621      	mov	r1, r4
   22a72:	3068      	adds	r0, #104	; 0x68
   22a74:	f7ff fe52 	bl	2271c <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   22a78:	e7f5      	b.n	22a66 <release_handler+0x2a>
   22a7a:	4770      	bx	lr
   22a7c:	20000984 	.word	0x20000984

00022a80 <pin_handler_trigger_uninit>:
{
   22a80:	b510      	push	{r4, lr}
   22a82:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
   22a84:	f7ff fef4 	bl	22870 <pin_in_use_by_te>
   22a88:	b140      	cbz	r0, 22a9c <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   22a8a:	4620      	mov	r0, r4
   22a8c:	f7ff ff10 	bl	228b0 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   22a90:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   22a94:	4b06      	ldr	r3, [pc, #24]	; (22ab0 <pin_handler_trigger_uninit+0x30>)
   22a96:	2200      	movs	r2, #0
   22a98:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   22a9c:	4620      	mov	r0, r4
   22a9e:	f7ff ffcd 	bl	22a3c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   22aa2:	3408      	adds	r4, #8
   22aa4:	4b03      	ldr	r3, [pc, #12]	; (22ab4 <pin_handler_trigger_uninit+0x34>)
   22aa6:	2200      	movs	r2, #0
   22aa8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
   22aac:	bd10      	pop	{r4, pc}
   22aae:	bf00      	nop
   22ab0:	40006000 	.word	0x40006000
   22ab4:	20000984 	.word	0x20000984

00022ab8 <pin_handler_set>:
{
   22ab8:	b570      	push	{r4, r5, r6, lr}
   22aba:	b082      	sub	sp, #8
   22abc:	4605      	mov	r5, r0
   22abe:	460e      	mov	r6, r1
   22ac0:	4614      	mov	r4, r2
    release_handler(pin);
   22ac2:	f7ff ffbb 	bl	22a3c <release_handler>
    if (!handler)
   22ac6:	b326      	cbz	r6, 22b12 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
   22ac8:	4621      	mov	r1, r4
   22aca:	4630      	mov	r0, r6
   22acc:	f7ff ff12 	bl	228f4 <find_handler>
    if (handler_id < 0)
   22ad0:	1e03      	subs	r3, r0, #0
   22ad2:	db13      	blt.n	22afc <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
   22ad4:	4910      	ldr	r1, [pc, #64]	; (22b18 <pin_handler_set+0x60>)
   22ad6:	f841 6033 	str.w	r6, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   22ada:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   22ade:	6054      	str	r4, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   22ae0:	f105 0008 	add.w	r0, r5, #8
   22ae4:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
   22ae8:	025b      	lsls	r3, r3, #9
   22aea:	b29b      	uxth	r3, r3
   22aec:	4313      	orrs	r3, r2
   22aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   22af2:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    return NRFX_SUCCESS;
   22af6:	4809      	ldr	r0, [pc, #36]	; (22b1c <pin_handler_set+0x64>)
}
   22af8:	b002      	add	sp, #8
   22afa:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   22afc:	f10d 0107 	add.w	r1, sp, #7
   22b00:	4807      	ldr	r0, [pc, #28]	; (22b20 <pin_handler_set+0x68>)
   22b02:	f7ff fde3 	bl	226cc <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   22b06:	4b05      	ldr	r3, [pc, #20]	; (22b1c <pin_handler_set+0x64>)
   22b08:	4298      	cmp	r0, r3
   22b0a:	d1f5      	bne.n	22af8 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
   22b0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   22b10:	e7e0      	b.n	22ad4 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
   22b12:	4802      	ldr	r0, [pc, #8]	; (22b1c <pin_handler_set+0x64>)
   22b14:	e7f0      	b.n	22af8 <pin_handler_set+0x40>
   22b16:	bf00      	nop
   22b18:	20000984 	.word	0x20000984
   22b1c:	0bad0000 	.word	0x0bad0000
   22b20:	200009ec 	.word	0x200009ec

00022b24 <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
   22b24:	b570      	push	{r4, r5, r6, lr}
   22b26:	b082      	sub	sp, #8
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
   22b28:	466a      	mov	r2, sp
   22b2a:	2102      	movs	r1, #2
   22b2c:	2000      	movs	r0, #0
   22b2e:	f7ff fe73 	bl	22818 <nrf_gpio_latches_read_and_clear>
   22b32:	e040      	b.n	22bb6 <port_event_handle+0x92>
   22b34:	4e22      	ldr	r6, [pc, #136]	; (22bc0 <port_event_handle+0x9c>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   22b36:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
   22b3a:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
   22b3e:	f3c2 4201 	ubfx	r2, r2, #16, #2
   22b42:	f7ff ff39 	bl	229b8 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
   22b46:	2301      	movs	r3, #1
   22b48:	40ab      	lsls	r3, r5
   22b4a:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
            while (latch[i])
   22b4e:	ab02      	add	r3, sp, #8
   22b50:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   22b54:	f853 0c08 	ldr.w	r0, [r3, #-8]
   22b58:	b300      	cbz	r0, 22b9c <port_event_handle+0x78>
                uint32_t pin = NRF_CTZ(latch[i]);
   22b5a:	fa90 f0a0 	rbit	r0, r0
   22b5e:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
   22b62:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   22b66:	f100 0208 	add.w	r2, r0, #8
   22b6a:	4b16      	ldr	r3, [pc, #88]	; (22bc4 <port_event_handle+0xa0>)
   22b6c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
   22b70:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   22b74:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
   22b76:	f000 0607 	and.w	r6, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   22b7a:	f81d 2005 	ldrb.w	r2, [sp, r5]
   22b7e:	2301      	movs	r3, #1
   22b80:	40b3      	lsls	r3, r6
   22b82:	43db      	mvns	r3, r3
   22b84:	b25b      	sxtb	r3, r3
   22b86:	4013      	ands	r3, r2
   22b88:	f80d 3005 	strb.w	r3, [sp, r5]
    *p_pin = pin_number & 0x1F;
   22b8c:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
   22b90:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22b92:	2b01      	cmp	r3, #1
   22b94:	d0ce      	beq.n	22b34 <port_event_handle+0x10>
        case 0: return NRF_P0;
   22b96:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
   22b9a:	e7cc      	b.n	22b36 <port_event_handle+0x12>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   22b9c:	3401      	adds	r4, #1
   22b9e:	2c01      	cmp	r4, #1
   22ba0:	d9d5      	bls.n	22b4e <port_event_handle+0x2a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   22ba2:	4b09      	ldr	r3, [pc, #36]	; (22bc8 <port_event_handle+0xa4>)
   22ba4:	2200      	movs	r2, #0
   22ba6:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   22baa:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
   22bae:	4668      	mov	r0, sp
   22bb0:	f008 ffdb 	bl	2bb6a <latch_pending_read_and_check>
   22bb4:	b108      	cbz	r0, 22bba <port_event_handle+0x96>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   22bb6:	2400      	movs	r4, #0
   22bb8:	e7f1      	b.n	22b9e <port_event_handle+0x7a>
}
   22bba:	b002      	add	sp, #8
   22bbc:	bd70      	pop	{r4, r5, r6, pc}
   22bbe:	bf00      	nop
   22bc0:	50000300 	.word	0x50000300
   22bc4:	20000984 	.word	0x20000984
   22bc8:	40006000 	.word	0x40006000

00022bcc <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
   22bcc:	b538      	push	{r3, r4, r5, lr}
   22bce:	4604      	mov	r4, r0
    while (mask)
   22bd0:	e018      	b.n	22c04 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
   22bd2:	fa94 f3a4 	rbit	r3, r4
   22bd6:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   22bda:	2201      	movs	r2, #1
   22bdc:	409a      	lsls	r2, r3
   22bde:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   22be2:	4a0a      	ldr	r2, [pc, #40]	; (22c0c <gpiote_evt_handle+0x40>)
   22be4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   22be8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   22bec:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   22bf0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   22bf4:	f3c0 4001 	ubfx	r0, r0, #16, #2
   22bf8:	f008 ffb0 	bl	2bb5c <gpiote_polarity_to_trigger>
   22bfc:	4601      	mov	r1, r0
   22bfe:	4628      	mov	r0, r5
   22c00:	f7ff fec4 	bl	2298c <call_handler>
    while (mask)
   22c04:	2c00      	cmp	r4, #0
   22c06:	d1e4      	bne.n	22bd2 <gpiote_evt_handle+0x6>
    }
}
   22c08:	bd38      	pop	{r3, r4, r5, pc}
   22c0a:	bf00      	nop
   22c0c:	40006000 	.word	0x40006000

00022c10 <nrfx_gpiote_input_configure>:
{
   22c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22c14:	b084      	sub	sp, #16
   22c16:	4604      	mov	r4, r0
   22c18:	4615      	mov	r5, r2
   22c1a:	461e      	mov	r6, r3
    if (p_input_config)
   22c1c:	b309      	cbz	r1, 22c62 <nrfx_gpiote_input_configure+0x52>
   22c1e:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
   22c20:	f008 ff86 	bl	2bb30 <pin_is_task_output>
   22c24:	2800      	cmp	r0, #0
   22c26:	d13f      	bne.n	22ca8 <nrfx_gpiote_input_configure+0x98>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   22c28:	2300      	movs	r3, #0
   22c2a:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   22c2e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   22c32:	9301      	str	r3, [sp, #4]
   22c34:	9300      	str	r3, [sp, #0]
   22c36:	463b      	mov	r3, r7
   22c38:	f10d 020f 	add.w	r2, sp, #15
   22c3c:	f10d 010e 	add.w	r1, sp, #14
   22c40:	4620      	mov	r0, r4
   22c42:	f7ff fd8d 	bl	22760 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   22c46:	4a38      	ldr	r2, [pc, #224]	; (22d28 <nrfx_gpiote_input_configure+0x118>)
   22c48:	f104 0108 	add.w	r1, r4, #8
   22c4c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   22c50:	f023 0302 	bic.w	r3, r3, #2
   22c54:	b29b      	uxth	r3, r3
   22c56:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   22c5a:	f043 0301 	orr.w	r3, r3, #1
   22c5e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   22c62:	b1bd      	cbz	r5, 22c94 <nrfx_gpiote_input_configure+0x84>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   22c64:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   22c66:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
   22c6a:	4620      	mov	r0, r4
   22c6c:	f7ff fe16 	bl	2289c <pin_is_output>
   22c70:	b1e0      	cbz	r0, 22cac <nrfx_gpiote_input_configure+0x9c>
            if (use_evt)
   22c72:	f1b8 0f00 	cmp.w	r8, #0
   22c76:	d151      	bne.n	22d1c <nrfx_gpiote_input_configure+0x10c>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   22c78:	4a2b      	ldr	r2, [pc, #172]	; (22d28 <nrfx_gpiote_input_configure+0x118>)
   22c7a:	f104 0108 	add.w	r1, r4, #8
   22c7e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   22c82:	f023 031c 	bic.w	r3, r3, #28
   22c86:	b29b      	uxth	r3, r3
   22c88:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   22c8c:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
   22c90:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   22c94:	2e00      	cmp	r6, #0
   22c96:	d045      	beq.n	22d24 <nrfx_gpiote_input_configure+0x114>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   22c98:	6872      	ldr	r2, [r6, #4]
   22c9a:	6831      	ldr	r1, [r6, #0]
   22c9c:	4620      	mov	r0, r4
   22c9e:	f7ff ff0b 	bl	22ab8 <pin_handler_set>
}
   22ca2:	b004      	add	sp, #16
   22ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return NRFX_ERROR_INVALID_PARAM;
   22ca8:	4820      	ldr	r0, [pc, #128]	; (22d2c <nrfx_gpiote_input_configure+0x11c>)
   22caa:	e7fa      	b.n	22ca2 <nrfx_gpiote_input_configure+0x92>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   22cac:	4a1e      	ldr	r2, [pc, #120]	; (22d28 <nrfx_gpiote_input_configure+0x118>)
   22cae:	f104 0108 	add.w	r1, r4, #8
   22cb2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   22cb6:	f023 0320 	bic.w	r3, r3, #32
   22cba:	04db      	lsls	r3, r3, #19
   22cbc:	0cdb      	lsrs	r3, r3, #19
   22cbe:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
   22cc2:	f1b8 0f00 	cmp.w	r8, #0
   22cc6:	d0d7      	beq.n	22c78 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
   22cc8:	2f03      	cmp	r7, #3
   22cca:	d829      	bhi.n	22d20 <nrfx_gpiote_input_configure+0x110>
                uint8_t ch = *p_trigger_config->p_in_channel;
   22ccc:	686b      	ldr	r3, [r5, #4]
   22cce:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   22cd0:	b937      	cbnz	r7, 22ce0 <nrfx_gpiote_input_configure+0xd0>
    p_reg->CONFIG[idx] = 0;
   22cd2:	f505 75a2 	add.w	r5, r5, #324	; 0x144
   22cd6:	4b16      	ldr	r3, [pc, #88]	; (22d30 <nrfx_gpiote_input_configure+0x120>)
   22cd8:	2200      	movs	r2, #0
   22cda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   22cde:	e7cb      	b.n	22c78 <nrfx_gpiote_input_configure+0x68>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
   22ce0:	4638      	mov	r0, r7
   22ce2:	f008 ff3c 	bl	2bb5e <gpiote_trigger_to_polarity>
   22ce6:	4603      	mov	r3, r0
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   22ce8:	4811      	ldr	r0, [pc, #68]	; (22d30 <nrfx_gpiote_input_configure+0x120>)
   22cea:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   22cee:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   22cf2:	f022 0203 	bic.w	r2, r2, #3
   22cf6:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
                    nrf_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
   22cfa:	4622      	mov	r2, r4
   22cfc:	4629      	mov	r1, r5
   22cfe:	f008 fecf 	bl	2baa0 <nrf_gpiote_event_configure>
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   22d02:	4a09      	ldr	r2, [pc, #36]	; (22d28 <nrfx_gpiote_input_configure+0x118>)
   22d04:	f104 0108 	add.w	r1, r4, #8
   22d08:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   22d0c:	036d      	lsls	r5, r5, #13
   22d0e:	b2ad      	uxth	r5, r5
   22d10:	432b      	orrs	r3, r5
   22d12:	f043 0320 	orr.w	r3, r3, #32
   22d16:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
   22d1a:	e7ad      	b.n	22c78 <nrfx_gpiote_input_configure+0x68>
                return NRFX_ERROR_INVALID_PARAM;
   22d1c:	4803      	ldr	r0, [pc, #12]	; (22d2c <nrfx_gpiote_input_configure+0x11c>)
   22d1e:	e7c0      	b.n	22ca2 <nrfx_gpiote_input_configure+0x92>
                    return NRFX_ERROR_INVALID_PARAM;
   22d20:	4802      	ldr	r0, [pc, #8]	; (22d2c <nrfx_gpiote_input_configure+0x11c>)
   22d22:	e7be      	b.n	22ca2 <nrfx_gpiote_input_configure+0x92>
        err = NRFX_SUCCESS;
   22d24:	4803      	ldr	r0, [pc, #12]	; (22d34 <nrfx_gpiote_input_configure+0x124>)
   22d26:	e7bc      	b.n	22ca2 <nrfx_gpiote_input_configure+0x92>
   22d28:	20000984 	.word	0x20000984
   22d2c:	0bad0004 	.word	0x0bad0004
   22d30:	40006000 	.word	0x40006000
   22d34:	0bad0000 	.word	0x0bad0000

00022d38 <nrfx_gpiote_output_configure>:
{
   22d38:	b570      	push	{r4, r5, r6, lr}
   22d3a:	b084      	sub	sp, #16
   22d3c:	4604      	mov	r4, r0
   22d3e:	4615      	mov	r5, r2
    if (p_config)
   22d40:	b329      	cbz	r1, 22d8e <nrfx_gpiote_output_configure+0x56>
   22d42:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   22d44:	f008 ff03 	bl	2bb4e <pin_is_input>
   22d48:	b120      	cbz	r0, 22d54 <nrfx_gpiote_output_configure+0x1c>
   22d4a:	4620      	mov	r0, r4
   22d4c:	f7ff fd90 	bl	22870 <pin_in_use_by_te>
   22d50:	2800      	cmp	r0, #0
   22d52:	d138      	bne.n	22dc6 <nrfx_gpiote_output_configure+0x8e>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   22d54:	4620      	mov	r0, r4
   22d56:	f7ff fd95 	bl	22884 <pin_has_trigger>
   22d5a:	b110      	cbz	r0, 22d62 <nrfx_gpiote_output_configure+0x2a>
   22d5c:	7873      	ldrb	r3, [r6, #1]
   22d5e:	2b01      	cmp	r3, #1
   22d60:	d031      	beq.n	22dc6 <nrfx_gpiote_output_configure+0x8e>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   22d62:	2301      	movs	r3, #1
   22d64:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   22d68:	2300      	movs	r3, #0
   22d6a:	9301      	str	r3, [sp, #4]
   22d6c:	9600      	str	r6, [sp, #0]
   22d6e:	1cb3      	adds	r3, r6, #2
   22d70:	1c72      	adds	r2, r6, #1
   22d72:	f10d 010f 	add.w	r1, sp, #15
   22d76:	4620      	mov	r0, r4
   22d78:	f7ff fcf2 	bl	22760 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   22d7c:	4a1f      	ldr	r2, [pc, #124]	; (22dfc <nrfx_gpiote_output_configure+0xc4>)
   22d7e:	f104 0108 	add.w	r1, r4, #8
   22d82:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   22d86:	f043 0303 	orr.w	r3, r3, #3
   22d8a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   22d8e:	b385      	cbz	r5, 22df2 <nrfx_gpiote_output_configure+0xba>
        if (pin_is_input(pin))
   22d90:	4620      	mov	r0, r4
   22d92:	f008 fedc 	bl	2bb4e <pin_is_input>
   22d96:	bb70      	cbnz	r0, 22df6 <nrfx_gpiote_output_configure+0xbe>
        uint32_t ch = p_task_config->task_ch;
   22d98:	782e      	ldrb	r6, [r5, #0]
    p_reg->CONFIG[idx] = 0;
   22d9a:	f506 72a2 	add.w	r2, r6, #324	; 0x144
   22d9e:	4b18      	ldr	r3, [pc, #96]	; (22e00 <nrfx_gpiote_output_configure+0xc8>)
   22da0:	2100      	movs	r1, #0
   22da2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   22da6:	4a15      	ldr	r2, [pc, #84]	; (22dfc <nrfx_gpiote_output_configure+0xc4>)
   22da8:	f104 0108 	add.w	r1, r4, #8
   22dac:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   22db0:	f023 0320 	bic.w	r3, r3, #32
   22db4:	04db      	lsls	r3, r3, #19
   22db6:	0cdb      	lsrs	r3, r3, #19
   22db8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   22dbc:	786b      	ldrb	r3, [r5, #1]
   22dbe:	b923      	cbnz	r3, 22dca <nrfx_gpiote_output_configure+0x92>
    return NRFX_SUCCESS;
   22dc0:	4810      	ldr	r0, [pc, #64]	; (22e04 <nrfx_gpiote_output_configure+0xcc>)
}
   22dc2:	b004      	add	sp, #16
   22dc4:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_INVALID_PARAM;
   22dc6:	4810      	ldr	r0, [pc, #64]	; (22e08 <nrfx_gpiote_output_configure+0xd0>)
   22dc8:	e7fb      	b.n	22dc2 <nrfx_gpiote_output_configure+0x8a>
                                      p_task_config->init_val);
   22dca:	78aa      	ldrb	r2, [r5, #2]
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   22dcc:	9200      	str	r2, [sp, #0]
   22dce:	4622      	mov	r2, r4
   22dd0:	4631      	mov	r1, r6
   22dd2:	480b      	ldr	r0, [pc, #44]	; (22e00 <nrfx_gpiote_output_configure+0xc8>)
   22dd4:	f008 fe7d 	bl	2bad2 <nrf_gpiote_task_configure>
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   22dd8:	4a08      	ldr	r2, [pc, #32]	; (22dfc <nrfx_gpiote_output_configure+0xc4>)
   22dda:	3408      	adds	r4, #8
   22ddc:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
   22de0:	0376      	lsls	r6, r6, #13
   22de2:	b2b6      	uxth	r6, r6
   22de4:	4333      	orrs	r3, r6
   22de6:	f043 0320 	orr.w	r3, r3, #32
   22dea:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
   22dee:	4805      	ldr	r0, [pc, #20]	; (22e04 <nrfx_gpiote_output_configure+0xcc>)
   22df0:	e7e7      	b.n	22dc2 <nrfx_gpiote_output_configure+0x8a>
   22df2:	4804      	ldr	r0, [pc, #16]	; (22e04 <nrfx_gpiote_output_configure+0xcc>)
   22df4:	e7e5      	b.n	22dc2 <nrfx_gpiote_output_configure+0x8a>
            return NRFX_ERROR_INVALID_PARAM;
   22df6:	4804      	ldr	r0, [pc, #16]	; (22e08 <nrfx_gpiote_output_configure+0xd0>)
   22df8:	e7e3      	b.n	22dc2 <nrfx_gpiote_output_configure+0x8a>
   22dfa:	bf00      	nop
   22dfc:	20000984 	.word	0x20000984
   22e00:	40006000 	.word	0x40006000
   22e04:	0bad0000 	.word	0x0bad0000
   22e08:	0bad0004 	.word	0x0bad0004

00022e0c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   22e0c:	4b01      	ldr	r3, [pc, #4]	; (22e14 <nrfx_gpiote_global_callback_set+0x8>)
   22e0e:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
   22e10:	60d9      	str	r1, [r3, #12]
}
   22e12:	4770      	bx	lr
   22e14:	20000984 	.word	0x20000984

00022e18 <nrfx_gpiote_channel_get>:
{
   22e18:	b538      	push	{r3, r4, r5, lr}
   22e1a:	4604      	mov	r4, r0
   22e1c:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
   22e1e:	f7ff fd27 	bl	22870 <pin_in_use_by_te>
   22e22:	b140      	cbz	r0, 22e36 <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   22e24:	f104 0008 	add.w	r0, r4, #8
   22e28:	4b04      	ldr	r3, [pc, #16]	; (22e3c <nrfx_gpiote_channel_get+0x24>)
   22e2a:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
   22e2e:	0b5b      	lsrs	r3, r3, #13
   22e30:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
   22e32:	4803      	ldr	r0, [pc, #12]	; (22e40 <nrfx_gpiote_channel_get+0x28>)
}
   22e34:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   22e36:	4803      	ldr	r0, [pc, #12]	; (22e44 <nrfx_gpiote_channel_get+0x2c>)
   22e38:	e7fc      	b.n	22e34 <nrfx_gpiote_channel_get+0x1c>
   22e3a:	bf00      	nop
   22e3c:	20000984 	.word	0x20000984
   22e40:	0bad0000 	.word	0x0bad0000
   22e44:	0bad0004 	.word	0x0bad0004

00022e48 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   22e48:	4b0f      	ldr	r3, [pc, #60]	; (22e88 <nrfx_gpiote_init+0x40>)
   22e4a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
   22e4e:	b10b      	cbz	r3, 22e54 <nrfx_gpiote_init+0xc>
        return err_code;
   22e50:	480e      	ldr	r0, [pc, #56]	; (22e8c <nrfx_gpiote_init+0x44>)
}
   22e52:	4770      	bx	lr
{
   22e54:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   22e56:	4c0e      	ldr	r4, [pc, #56]	; (22e90 <nrfx_gpiote_init+0x48>)
   22e58:	2254      	movs	r2, #84	; 0x54
   22e5a:	2100      	movs	r1, #0
   22e5c:	4620      	mov	r0, r4
   22e5e:	f004 fb64 	bl	2752a <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   22e62:	2006      	movs	r0, #6
   22e64:	f004 fa5e 	bl	27324 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   22e68:	4b0a      	ldr	r3, [pc, #40]	; (22e94 <nrfx_gpiote_init+0x4c>)
   22e6a:	2200      	movs	r2, #0
   22e6c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   22e70:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   22e74:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   22e78:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   22e7c:	2301      	movs	r3, #1
   22e7e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   22e82:	65a3      	str	r3, [r4, #88]	; 0x58
    return err_code;
   22e84:	4804      	ldr	r0, [pc, #16]	; (22e98 <nrfx_gpiote_init+0x50>)
}
   22e86:	bd10      	pop	{r4, pc}
   22e88:	20000984 	.word	0x20000984
   22e8c:	0bad0005 	.word	0x0bad0005
   22e90:	20000994 	.word	0x20000994
   22e94:	40006000 	.word	0x40006000
   22e98:	0bad0000 	.word	0x0bad0000

00022e9c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   22e9c:	4b03      	ldr	r3, [pc, #12]	; (22eac <nrfx_gpiote_is_init+0x10>)
   22e9e:	f893 006c 	ldrb.w	r0, [r3, #108]	; 0x6c
}
   22ea2:	3800      	subs	r0, #0
   22ea4:	bf18      	it	ne
   22ea6:	2001      	movne	r0, #1
   22ea8:	4770      	bx	lr
   22eaa:	bf00      	nop
   22eac:	20000984 	.word	0x20000984

00022eb0 <nrfx_gpiote_channel_free>:
{
   22eb0:	b508      	push	{r3, lr}
   22eb2:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   22eb4:	4801      	ldr	r0, [pc, #4]	; (22ebc <nrfx_gpiote_channel_free+0xc>)
   22eb6:	f7ff fc31 	bl	2271c <nrfx_flag32_free>
}
   22eba:	bd08      	pop	{r3, pc}
   22ebc:	200009e8 	.word	0x200009e8

00022ec0 <nrfx_gpiote_channel_alloc>:
{
   22ec0:	b508      	push	{r3, lr}
   22ec2:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   22ec4:	4801      	ldr	r0, [pc, #4]	; (22ecc <nrfx_gpiote_channel_alloc+0xc>)
   22ec6:	f7ff fc01 	bl	226cc <nrfx_flag32_alloc>
}
   22eca:	bd08      	pop	{r3, pc}
   22ecc:	200009e8 	.word	0x200009e8

00022ed0 <nrfx_gpiote_trigger_enable>:
{
   22ed0:	b538      	push	{r3, r4, r5, lr}
   22ed2:	4604      	mov	r4, r0
   22ed4:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   22ed6:	f7ff fccb 	bl	22870 <pin_in_use_by_te>
   22eda:	b300      	cbz	r0, 22f1e <nrfx_gpiote_trigger_enable+0x4e>
   22edc:	4620      	mov	r0, r4
   22ede:	f008 fe36 	bl	2bb4e <pin_is_input>
   22ee2:	b1e0      	cbz	r0, 22f1e <nrfx_gpiote_trigger_enable+0x4e>
        uint8_t ch = pin_te_get(pin);
   22ee4:	4620      	mov	r0, r4
   22ee6:	f7ff fce3 	bl	228b0 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   22eea:	0083      	lsls	r3, r0, #2
   22eec:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
   22ef0:	b29b      	uxth	r3, r3
   22ef2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   22ef6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   22efa:	2200      	movs	r2, #0
   22efc:	601a      	str	r2, [r3, #0]
   22efe:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   22f00:	4a0b      	ldr	r2, [pc, #44]	; (22f30 <nrfx_gpiote_trigger_enable+0x60>)
   22f02:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   22f06:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   22f0a:	f043 0301 	orr.w	r3, r3, #1
   22f0e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
   22f12:	b15d      	cbz	r5, 22f2c <nrfx_gpiote_trigger_enable+0x5c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   22f14:	2301      	movs	r3, #1
   22f16:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   22f18:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   22f1c:	e006      	b.n	22f2c <nrfx_gpiote_trigger_enable+0x5c>
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   22f1e:	4620      	mov	r0, r4
   22f20:	f7ff fcfe 	bl	22920 <get_initial_sense>
   22f24:	4601      	mov	r1, r0
   22f26:	4620      	mov	r0, r4
   22f28:	f008 fdf2 	bl	2bb10 <nrf_gpio_cfg_sense_set>
}
   22f2c:	bd38      	pop	{r3, r4, r5, pc}
   22f2e:	bf00      	nop
   22f30:	40006000 	.word	0x40006000

00022f34 <nrfx_gpiote_trigger_disable>:
{
   22f34:	b510      	push	{r4, lr}
   22f36:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   22f38:	f7ff fc9a 	bl	22870 <pin_in_use_by_te>
   22f3c:	b1a0      	cbz	r0, 22f68 <nrfx_gpiote_trigger_disable+0x34>
   22f3e:	4620      	mov	r0, r4
   22f40:	f008 fe05 	bl	2bb4e <pin_is_input>
   22f44:	b180      	cbz	r0, 22f68 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
   22f46:	4620      	mov	r0, r4
   22f48:	f7ff fcb2 	bl	228b0 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   22f4c:	2201      	movs	r2, #1
   22f4e:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   22f50:	4b08      	ldr	r3, [pc, #32]	; (22f74 <nrfx_gpiote_trigger_disable+0x40>)
   22f52:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   22f56:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   22f5a:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   22f5e:	f022 0203 	bic.w	r2, r2, #3
   22f62:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   22f66:	e003      	b.n	22f70 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   22f68:	2100      	movs	r1, #0
   22f6a:	4620      	mov	r0, r4
   22f6c:	f008 fdd0 	bl	2bb10 <nrf_gpio_cfg_sense_set>
}
   22f70:	bd10      	pop	{r4, pc}
   22f72:	bf00      	nop
   22f74:	40006000 	.word	0x40006000

00022f78 <nrfx_gpiote_pin_uninit>:
{
   22f78:	b510      	push	{r4, lr}
   22f7a:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   22f7c:	f7ff fc6e 	bl	2285c <pin_in_use>
   22f80:	b908      	cbnz	r0, 22f86 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
   22f82:	480c      	ldr	r0, [pc, #48]	; (22fb4 <nrfx_gpiote_pin_uninit+0x3c>)
}
   22f84:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
   22f86:	4620      	mov	r0, r4
   22f88:	f7ff ffd4 	bl	22f34 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   22f8c:	4620      	mov	r0, r4
   22f8e:	f7ff fd77 	bl	22a80 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
   22f92:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   22f96:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22f98:	2c01      	cmp	r4, #1
   22f9a:	d008      	beq.n	22fae <nrfx_gpiote_pin_uninit+0x36>
        case 0: return NRF_P0;
   22f9c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   22fa0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   22fa4:	2102      	movs	r1, #2
   22fa6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return NRFX_SUCCESS;
   22faa:	4803      	ldr	r0, [pc, #12]	; (22fb8 <nrfx_gpiote_pin_uninit+0x40>)
   22fac:	e7ea      	b.n	22f84 <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
   22fae:	4a03      	ldr	r2, [pc, #12]	; (22fbc <nrfx_gpiote_pin_uninit+0x44>)
   22fb0:	e7f6      	b.n	22fa0 <nrfx_gpiote_pin_uninit+0x28>
   22fb2:	bf00      	nop
   22fb4:	0bad0004 	.word	0x0bad0004
   22fb8:	0bad0000 	.word	0x0bad0000
   22fbc:	50000300 	.word	0x50000300

00022fc0 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
   22fc0:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   22fc2:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
   22fc4:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   22fc8:	2100      	movs	r1, #0
    uint32_t status = 0;
   22fca:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   22fcc:	e003      	b.n	22fd6 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
   22fce:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
   22fd0:	3304      	adds	r3, #4
   22fd2:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   22fd4:	3101      	adds	r1, #1
   22fd6:	2907      	cmp	r1, #7
   22fd8:	d814      	bhi.n	23004 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22fda:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   22fde:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
   22fe2:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   22fe4:	2a00      	cmp	r2, #0
   22fe6:	d0f2      	beq.n	22fce <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
   22fe8:	4a0c      	ldr	r2, [pc, #48]	; (2301c <nrfx_gpiote_irq_handler+0x5c>)
   22fea:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   22fee:	4210      	tst	r0, r2
   22ff0:	d0ed      	beq.n	22fce <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
   22ff2:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   22ff6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   22ffa:	2500      	movs	r5, #0
   22ffc:	6015      	str	r5, [r2, #0]
   22ffe:	6812      	ldr	r2, [r2, #0]
            status |= mask;
   23000:	4304      	orrs	r4, r0
   23002:	e7e4      	b.n	22fce <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23004:	4b05      	ldr	r3, [pc, #20]	; (2301c <nrfx_gpiote_irq_handler+0x5c>)
   23006:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   2300a:	b91b      	cbnz	r3, 23014 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
   2300c:	4620      	mov	r0, r4
   2300e:	f7ff fddd 	bl	22bcc <gpiote_evt_handle>
}
   23012:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
   23014:	f7ff fd86 	bl	22b24 <port_event_handle>
   23018:	e7f8      	b.n	2300c <nrfx_gpiote_irq_handler+0x4c>
   2301a:	bf00      	nop
   2301c:	40006000 	.word	0x40006000

00023020 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   23020:	b508      	push	{r3, lr}
   23022:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   23024:	4801      	ldr	r0, [pc, #4]	; (2302c <nrfx_ppi_channel_alloc+0xc>)
   23026:	f7ff fb51 	bl	226cc <nrfx_flag32_alloc>
}
   2302a:	bd08      	pop	{r3, pc}
   2302c:	200009f4 	.word	0x200009f4

00023030 <nrf_gpio_pin_write>:
    if (value == 0)
   23030:	b969      	cbnz	r1, 2304e <nrf_gpio_pin_write+0x1e>
    *p_pin = pin_number & 0x1F;
   23032:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   23036:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   23038:	2801      	cmp	r0, #1
   2303a:	d006      	beq.n	2304a <nrf_gpio_pin_write+0x1a>
        case 0: return NRF_P0;
   2303c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   23040:	2301      	movs	r3, #1
   23042:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   23044:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   23048:	4770      	bx	lr
        case 1: return NRF_P1;
   2304a:	4a08      	ldr	r2, [pc, #32]	; (2306c <nrf_gpio_pin_write+0x3c>)
   2304c:	e7f8      	b.n	23040 <nrf_gpio_pin_write+0x10>
    *p_pin = pin_number & 0x1F;
   2304e:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   23052:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   23054:	2801      	cmp	r0, #1
   23056:	d006      	beq.n	23066 <nrf_gpio_pin_write+0x36>
        case 0: return NRF_P0;
   23058:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2305c:	2301      	movs	r3, #1
   2305e:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   23060:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
   23064:	4770      	bx	lr
        case 1: return NRF_P1;
   23066:	4a01      	ldr	r2, [pc, #4]	; (2306c <nrf_gpio_pin_write+0x3c>)
   23068:	e7f8      	b.n	2305c <nrf_gpio_pin_write+0x2c>
   2306a:	bf00      	nop
   2306c:	50000300 	.word	0x50000300

00023070 <configure_pins>:
static spi_control_block_t m_cb[NRFX_SPI_ENABLED_COUNT];


static void configure_pins(NRF_SPI_Type *            p_spi,
                           nrfx_spi_config_t const * p_config)
{
   23070:	b538      	push	{r3, r4, r5, lr}
   23072:	4605      	mov	r5, r0
   23074:	460c      	mov	r4, r1
    if (!p_config->skip_gpio_cfg)
   23076:	7bcb      	ldrb	r3, [r1, #15]
   23078:	b183      	cbz	r3, 2309c <configure_pins+0x2c>
            nrf_gpio_pin_write(p_config->ss_pin, 1);
            nrf_gpio_cfg_output(p_config->ss_pin);
        }
    }

    if (!p_config->skip_psel_cfg)
   2307a:	7c23      	ldrb	r3, [r4, #16]
   2307c:	b96b      	cbnz	r3, 2309a <configure_pins+0x2a>
    {
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   2307e:	7863      	ldrb	r3, [r4, #1]
                            ? p_config->mosi_pin
                            : NRF_SPI_PIN_NOT_CONNECTED;
   23080:	2bff      	cmp	r3, #255	; 0xff
   23082:	d073      	beq.n	2316c <configure_pins+0xfc>
   23084:	461a      	mov	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   23086:	78a3      	ldrb	r3, [r4, #2]
                            ? p_config->miso_pin
                            : NRF_SPI_PIN_NOT_CONNECTED;
   23088:	2bff      	cmp	r3, #255	; 0xff
   2308a:	d072      	beq.n	23172 <configure_pins+0x102>

        nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
   2308c:	7821      	ldrb	r1, [r4, #0]
                                        uint32_t       sck_pin,
                                        uint32_t       mosi_pin,
                                        uint32_t       miso_pin)
{
#if defined(SPI_PSEL_SCK_CONNECT_Pos)
    p_reg->PSEL.SCK = sck_pin;
   2308e:	f8c5 1508 	str.w	r1, [r5, #1288]	; 0x508
#else
    p_reg->PSELSCK  = sck_pin;
#endif

#if defined(SPI_PSEL_MOSI_CONNECT_Pos)
    p_reg->PSEL.MOSI = mosi_pin;
   23092:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
#else
    p_reg->PSELMOSI = mosi_pin;
#endif

#if defined(SPI_PSEL_MISO_CONNECT_Pos)
    p_reg->PSEL.MISO = miso_pin;
   23096:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
    }
}
   2309a:	bd38      	pop	{r3, r4, r5, pc}
                           p_config->mode <= NRF_SPI_MODE_1 ? 0 : 1);
   2309c:	7b09      	ldrb	r1, [r1, #12]
        nrf_gpio_pin_write(p_config->sck_pin,
   2309e:	2901      	cmp	r1, #1
   230a0:	bf94      	ite	ls
   230a2:	2100      	movls	r1, #0
   230a4:	2101      	movhi	r1, #1
   230a6:	7820      	ldrb	r0, [r4, #0]
   230a8:	f7ff ffc2 	bl	23030 <nrf_gpio_pin_write>
        nrf_gpio_cfg(p_config->sck_pin,
   230ac:	7823      	ldrb	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   230ae:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   230b2:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   230b4:	2b01      	cmp	r3, #1
   230b6:	d04d      	beq.n	23154 <configure_pins+0xe4>
        case 0: return NRF_P0;
   230b8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   230bc:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   230c0:	2201      	movs	r2, #1
   230c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   230c6:	7863      	ldrb	r3, [r4, #1]
   230c8:	2bff      	cmp	r3, #255	; 0xff
   230ca:	d017      	beq.n	230fc <configure_pins+0x8c>
    *p_pin = pin_number & 0x1F;
   230cc:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
   230d0:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   230d2:	4293      	cmp	r3, r2
   230d4:	d040      	beq.n	23158 <configure_pins+0xe8>
        case 0: return NRF_P0;
   230d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   230da:	2301      	movs	r3, #1
   230dc:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   230de:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
            nrf_gpio_cfg_output(p_config->mosi_pin);
   230e2:	7863      	ldrb	r3, [r4, #1]
    *p_pin = pin_number & 0x1F;
   230e4:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   230e8:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   230ea:	2b01      	cmp	r3, #1
   230ec:	d036      	beq.n	2315c <configure_pins+0xec>
        case 0: return NRF_P0;
   230ee:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   230f2:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   230f6:	2203      	movs	r2, #3
   230f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   230fc:	78a3      	ldrb	r3, [r4, #2]
   230fe:	2bff      	cmp	r3, #255	; 0xff
   23100:	d00c      	beq.n	2311c <configure_pins+0xac>
            nrf_gpio_cfg_input(p_config->miso_pin, p_config->miso_pull);
   23102:	7ba1      	ldrb	r1, [r4, #14]
    *p_pin = pin_number & 0x1F;
   23104:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   23108:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2310a:	2b01      	cmp	r3, #1
   2310c:	d028      	beq.n	23160 <configure_pins+0xf0>
        case 0: return NRF_P0;
   2310e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   23112:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   23114:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   23118:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   2311c:	78e3      	ldrb	r3, [r4, #3]
   2311e:	2bff      	cmp	r3, #255	; 0xff
   23120:	d0ab      	beq.n	2307a <configure_pins+0xa>
    *p_pin = pin_number & 0x1F;
   23122:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
   23126:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   23128:	2b01      	cmp	r3, #1
   2312a:	d01b      	beq.n	23164 <configure_pins+0xf4>
        case 0: return NRF_P0;
   2312c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   23130:	2301      	movs	r3, #1
   23132:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   23134:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            nrf_gpio_cfg_output(p_config->ss_pin);
   23138:	78e3      	ldrb	r3, [r4, #3]
    *p_pin = pin_number & 0x1F;
   2313a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   2313e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   23140:	2b01      	cmp	r3, #1
   23142:	d011      	beq.n	23168 <configure_pins+0xf8>
        case 0: return NRF_P0;
   23144:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   23148:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   2314c:	2203      	movs	r2, #3
   2314e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   23152:	e792      	b.n	2307a <configure_pins+0xa>
        case 1: return NRF_P1;
   23154:	4908      	ldr	r1, [pc, #32]	; (23178 <configure_pins+0x108>)
   23156:	e7b1      	b.n	230bc <configure_pins+0x4c>
   23158:	4a07      	ldr	r2, [pc, #28]	; (23178 <configure_pins+0x108>)
   2315a:	e7be      	b.n	230da <configure_pins+0x6a>
   2315c:	4906      	ldr	r1, [pc, #24]	; (23178 <configure_pins+0x108>)
   2315e:	e7c8      	b.n	230f2 <configure_pins+0x82>
   23160:	4805      	ldr	r0, [pc, #20]	; (23178 <configure_pins+0x108>)
   23162:	e7d6      	b.n	23112 <configure_pins+0xa2>
   23164:	4a04      	ldr	r2, [pc, #16]	; (23178 <configure_pins+0x108>)
   23166:	e7e3      	b.n	23130 <configure_pins+0xc0>
   23168:	4903      	ldr	r1, [pc, #12]	; (23178 <configure_pins+0x108>)
   2316a:	e7ed      	b.n	23148 <configure_pins+0xd8>
                            : NRF_SPI_PIN_NOT_CONNECTED;
   2316c:	f04f 32ff 	mov.w	r2, #4294967295
   23170:	e789      	b.n	23086 <configure_pins+0x16>
                            : NRF_SPI_PIN_NOT_CONNECTED;
   23172:	f04f 33ff 	mov.w	r3, #4294967295
   23176:	e789      	b.n	2308c <configure_pins+0x1c>
   23178:	50000300 	.word	0x50000300

0002317c <finish_transfer>:

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
}

static void finish_transfer(spi_control_block_t * p_cb)
{
   2317c:	b508      	push	{r3, lr}
   2317e:	4603      	mov	r3, r0
    // If Slave Select signal is used, this is the time to deactivate it.
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   23180:	7f82      	ldrb	r2, [r0, #30]
   23182:	2aff      	cmp	r2, #255	; 0xff
   23184:	d00a      	beq.n	2319c <finish_transfer+0x20>
    *p_pin = pin_number & 0x1F;
   23186:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   2318a:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2318c:	2a01      	cmp	r2, #1
   2318e:	d00e      	beq.n	231ae <finish_transfer+0x32>
        case 0: return NRF_P0;
   23190:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   23194:	2201      	movs	r2, #1
   23196:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   23198:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
        nrf_gpio_pin_write(p_cb->ss_pin, 1);
    }

    // By clearing this flag before calling the handler we allow subsequent
    // transfers to be started directly from the handler function.
    p_cb->transfer_in_progress = false;
   2319c:	2200      	movs	r2, #0
   2319e:	775a      	strb	r2, [r3, #29]

    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
   231a0:	721a      	strb	r2, [r3, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   231a2:	4618      	mov	r0, r3
   231a4:	f850 2b08 	ldr.w	r2, [r0], #8
   231a8:	6859      	ldr	r1, [r3, #4]
   231aa:	4790      	blx	r2
}
   231ac:	bd08      	pop	{r3, pc}
        case 1: return NRF_P1;
   231ae:	4801      	ldr	r0, [pc, #4]	; (231b4 <finish_transfer+0x38>)
   231b0:	e7f0      	b.n	23194 <finish_transfer+0x18>
   231b2:	bf00      	nop
   231b4:	50000300 	.word	0x50000300

000231b8 <spi_xfer>:
}

static void spi_xfer(NRF_SPI_Type               * p_spi,
                     spi_control_block_t        * p_cb,
                     nrfx_spi_xfer_desc_t const * p_xfer_desc)
{
   231b8:	b538      	push	{r3, r4, r5, lr}
   231ba:	4604      	mov	r4, r0
   231bc:	460d      	mov	r5, r1
    p_cb->bytes_transferred = 0;
   231be:	2300      	movs	r3, #0
   231c0:	620b      	str	r3, [r1, #32]
    p_reg->INTENCLR = mask;
   231c2:	2104      	movs	r1, #4
   231c4:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   231c8:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   231cc:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108

    // Start the transfer by writing some byte to the TXD register;
    // if TX buffer is not empty, take the first byte from this buffer,
    // otherwise - use over-run character.
    nrf_spi_txd_set(p_spi,
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   231d0:	6853      	ldr	r3, [r2, #4]
    nrf_spi_txd_set(p_spi,
   231d2:	b183      	cbz	r3, 231f6 <spi_xfer+0x3e>
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   231d4:	6813      	ldr	r3, [r2, #0]
    nrf_spi_txd_set(p_spi,
   231d6:	781b      	ldrb	r3, [r3, #0]
#endif
}

NRF_STATIC_INLINE void nrf_spi_txd_set(NRF_SPI_Type * p_reg, uint8_t data)
{
    p_reg->TXD = data;
   231d8:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

    // TXD register is double buffered, so next byte to be transmitted can
    // be written immediately, if needed, i.e. if TX or RX transfer is to
    // be more that 1 byte long. Again - if there is something more in TX
    // buffer send it, otherwise use over-run character.
    if (p_xfer_desc->tx_length > 1)
   231dc:	6853      	ldr	r3, [r2, #4]
   231de:	2b01      	cmp	r3, #1
   231e0:	d90b      	bls.n	231fa <spi_xfer+0x42>
    {
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
   231e2:	6813      	ldr	r3, [r2, #0]
   231e4:	785b      	ldrb	r3, [r3, #1]
   231e6:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    // For blocking mode (user handler not provided) wait here for READY
    // events (indicating that the byte from TXD register was transmitted
    // and a new incoming byte was moved to the RXD register) and continue
    // transaction until all requested bytes are transferred.
    // In non-blocking mode - IRQ service routine will do this stuff.
    if (p_cb->handler)
   231ea:	682b      	ldr	r3, [r5, #0]
   231ec:	b163      	cbz	r3, 23208 <spi_xfer+0x50>
    p_reg->INTENSET = mask;
   231ee:	2304      	movs	r3, #4
   231f0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
        {
            nrf_gpio_pin_write(p_cb->ss_pin, 1);
        }
    }
}
   231f4:	bd38      	pop	{r3, r4, r5, pc}
    nrf_spi_txd_set(p_spi,
   231f6:	7feb      	ldrb	r3, [r5, #31]
   231f8:	e7ee      	b.n	231d8 <spi_xfer+0x20>
    else if (p_xfer_desc->rx_length > 1)
   231fa:	68d3      	ldr	r3, [r2, #12]
   231fc:	2b01      	cmp	r3, #1
   231fe:	d9f4      	bls.n	231ea <spi_xfer+0x32>
        nrf_spi_txd_set(p_spi, p_cb->orc);
   23200:	7feb      	ldrb	r3, [r5, #31]
    p_reg->TXD = data;
   23202:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
}
   23206:	e7f0      	b.n	231ea <spi_xfer+0x32>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23208:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
   2320c:	2b00      	cmp	r3, #0
   2320e:	d0fb      	beq.n	23208 <spi_xfer+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23210:	2300      	movs	r3, #0
   23212:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   23216:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
   2321a:	4629      	mov	r1, r5
   2321c:	4620      	mov	r0, r4
   2321e:	f008 fccc 	bl	2bbba <transfer_byte>
   23222:	2800      	cmp	r0, #0
   23224:	d1f0      	bne.n	23208 <spi_xfer+0x50>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   23226:	7fab      	ldrb	r3, [r5, #30]
   23228:	2bff      	cmp	r3, #255	; 0xff
   2322a:	d0e3      	beq.n	231f4 <spi_xfer+0x3c>
    *p_pin = pin_number & 0x1F;
   2322c:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   23230:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   23232:	2b01      	cmp	r3, #1
   23234:	d006      	beq.n	23244 <spi_xfer+0x8c>
        case 0: return NRF_P0;
   23236:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2323a:	2301      	movs	r3, #1
   2323c:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2323e:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
}
   23242:	e7d7      	b.n	231f4 <spi_xfer+0x3c>
        case 1: return NRF_P1;
   23244:	4900      	ldr	r1, [pc, #0]	; (23248 <spi_xfer+0x90>)
   23246:	e7f8      	b.n	2323a <spi_xfer+0x82>
   23248:	50000300 	.word	0x50000300

0002324c <nrfx_spi_init>:
{
   2324c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23250:	4606      	mov	r6, r0
   23252:	460d      	mov	r5, r1
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   23254:	7904      	ldrb	r4, [r0, #4]
    NRF_SPI_Type * p_spi = p_instance->p_reg;
   23256:	6807      	ldr	r7, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   23258:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   2325c:	491d      	ldr	r1, [pc, #116]	; (232d4 <nrfx_spi_init+0x88>)
   2325e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   23262:	7f09      	ldrb	r1, [r1, #28]
   23264:	b111      	cbz	r1, 2326c <nrfx_spi_init+0x20>
        return err_code;
   23266:	481c      	ldr	r0, [pc, #112]	; (232d8 <nrfx_spi_init+0x8c>)
}
   23268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    p_cb->handler = handler;
   2326c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 232d4 <nrfx_spi_init+0x88>
   23270:	ea4f 09c0 	mov.w	r9, r0, lsl #3
   23274:	eb08 01c0 	add.w	r1, r8, r0, lsl #3
   23278:	f848 2009 	str.w	r2, [r8, r9]
    p_cb->p_context = p_context;
   2327c:	604b      	str	r3, [r1, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   2327e:	7beb      	ldrb	r3, [r5, #15]
   23280:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
    p_cb->ss_pin = p_config->ss_pin;
   23284:	78eb      	ldrb	r3, [r5, #3]
   23286:	778b      	strb	r3, [r1, #30]
    p_cb->orc = p_config->orc;
   23288:	796b      	ldrb	r3, [r5, #5]
   2328a:	77cb      	strb	r3, [r1, #31]
    configure_pins(p_spi, p_config);
   2328c:	4629      	mov	r1, r5
   2328e:	4638      	mov	r0, r7
   23290:	f7ff feee 	bl	23070 <configure_pins>
    nrf_spi_frequency_set(p_spi, p_config->frequency);
   23294:	68ab      	ldr	r3, [r5, #8]
}

NRF_STATIC_INLINE void nrf_spi_frequency_set(NRF_SPI_Type *      p_reg,
                                             nrf_spi_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   23296:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
   2329a:	7b6a      	ldrb	r2, [r5, #13]
   2329c:	7b29      	ldrb	r1, [r5, #12]
   2329e:	4638      	mov	r0, r7
   232a0:	f008 fc76 	bl	2bb90 <nrf_spi_configure>
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   232a4:	2301      	movs	r3, #1
   232a6:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
    if (p_cb->handler)
   232aa:	f858 3009 	ldr.w	r3, [r8, r9]
   232ae:	b123      	cbz	r3, 232ba <nrfx_spi_init+0x6e>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   232b0:	6830      	ldr	r0, [r6, #0]
   232b2:	f340 3007 	sbfx	r0, r0, #12, #8
   232b6:	f004 f835 	bl	27324 <arch_irq_enable>
    p_cb->transfer_in_progress = false;
   232ba:	4b06      	ldr	r3, [pc, #24]	; (232d4 <nrfx_spi_init+0x88>)
   232bc:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   232c0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   232c4:	2100      	movs	r1, #0
   232c6:	7751      	strb	r1, [r2, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   232c8:	4613      	mov	r3, r2
   232ca:	2201      	movs	r2, #1
   232cc:	771a      	strb	r2, [r3, #28]
    return err_code;
   232ce:	4803      	ldr	r0, [pc, #12]	; (232dc <nrfx_spi_init+0x90>)
   232d0:	e7ca      	b.n	23268 <nrfx_spi_init+0x1c>
   232d2:	bf00      	nop
   232d4:	200089a0 	.word	0x200089a0
   232d8:	0bad0005 	.word	0x0bad0005
   232dc:	0bad0000 	.word	0x0bad0000

000232e0 <nrfx_spi_uninit>:
{
   232e0:	b538      	push	{r3, r4, r5, lr}
    spi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   232e2:	7904      	ldrb	r4, [r0, #4]
    NRF_SPI_Type * p_spi = p_instance->p_reg;
   232e4:	6805      	ldr	r5, [r0, #0]
    if (p_cb->handler)
   232e6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   232ea:	4b35      	ldr	r3, [pc, #212]	; (233c0 <nrfx_spi_uninit+0xe0>)
   232ec:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
   232f0:	b133      	cbz	r3, 23300 <nrfx_spi_uninit+0x20>
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   232f2:	f345 3007 	sbfx	r0, r5, #12, #8
   232f6:	f004 f81a 	bl	2732e <arch_irq_disable>
    p_reg->INTENCLR = mask;
   232fa:	2304      	movs	r3, #4
   232fc:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Disabled << SPI_ENABLE_ENABLE_Pos);
   23300:	2300      	movs	r3, #0
   23302:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
    if (!p_cb->skip_gpio_cfg)
   23306:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   2330a:	4b2d      	ldr	r3, [pc, #180]	; (233c0 <nrfx_spi_uninit+0xe0>)
   2330c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   23310:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   23314:	2b00      	cmp	r3, #0
   23316:	d143      	bne.n	233a0 <nrfx_spi_uninit+0xc0>
    return p_reg->PSEL.SCK;
   23318:	f8d5 3508 	ldr.w	r3, [r5, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
   2331c:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   23320:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   23322:	2b01      	cmp	r3, #1
   23324:	d044      	beq.n	233b0 <nrfx_spi_uninit+0xd0>
        case 0: return NRF_P0;
   23326:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   2332a:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   2332e:	2202      	movs	r2, #2
   23330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return p_reg->PSEL.MISO;
   23334:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
        if (miso_pin != NRF_SPI_PIN_NOT_CONNECTED)
   23338:	f1b3 3fff 	cmp.w	r3, #4294967295
   2333c:	d00b      	beq.n	23356 <nrfx_spi_uninit+0x76>
    *p_pin = pin_number & 0x1F;
   2333e:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   23342:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   23344:	2b01      	cmp	r3, #1
   23346:	d035      	beq.n	233b4 <nrfx_spi_uninit+0xd4>
        case 0: return NRF_P0;
   23348:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   2334c:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   23350:	2202      	movs	r2, #2
   23352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return p_reg->PSEL.MOSI;
   23356:	f8d5 350c 	ldr.w	r3, [r5, #1292]	; 0x50c
        if (mosi_pin != NRF_SPI_PIN_NOT_CONNECTED)
   2335a:	f1b3 3fff 	cmp.w	r3, #4294967295
   2335e:	d00b      	beq.n	23378 <nrfx_spi_uninit+0x98>
    *p_pin = pin_number & 0x1F;
   23360:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   23364:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   23366:	2b01      	cmp	r3, #1
   23368:	d026      	beq.n	233b8 <nrfx_spi_uninit+0xd8>
        case 0: return NRF_P0;
   2336a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   2336e:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   23372:	2202      	movs	r2, #2
   23374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   23378:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   2337c:	4b10      	ldr	r3, [pc, #64]	; (233c0 <nrfx_spi_uninit+0xe0>)
   2337e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   23382:	7f9b      	ldrb	r3, [r3, #30]
   23384:	2bff      	cmp	r3, #255	; 0xff
   23386:	d00b      	beq.n	233a0 <nrfx_spi_uninit+0xc0>
    *p_pin = pin_number & 0x1F;
   23388:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   2338c:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2338e:	2b01      	cmp	r3, #1
   23390:	d014      	beq.n	233bc <nrfx_spi_uninit+0xdc>
        case 0: return NRF_P0;
   23392:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   23396:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   2339a:	2202      	movs	r2, #2
   2339c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   233a0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   233a4:	4b06      	ldr	r3, [pc, #24]	; (233c0 <nrfx_spi_uninit+0xe0>)
   233a6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   233aa:	2200      	movs	r2, #0
   233ac:	771a      	strb	r2, [r3, #28]
}
   233ae:	bd38      	pop	{r3, r4, r5, pc}
        case 1: return NRF_P1;
   233b0:	4904      	ldr	r1, [pc, #16]	; (233c4 <nrfx_spi_uninit+0xe4>)
   233b2:	e7ba      	b.n	2332a <nrfx_spi_uninit+0x4a>
   233b4:	4903      	ldr	r1, [pc, #12]	; (233c4 <nrfx_spi_uninit+0xe4>)
   233b6:	e7c9      	b.n	2334c <nrfx_spi_uninit+0x6c>
   233b8:	4902      	ldr	r1, [pc, #8]	; (233c4 <nrfx_spi_uninit+0xe4>)
   233ba:	e7d8      	b.n	2336e <nrfx_spi_uninit+0x8e>
   233bc:	4901      	ldr	r1, [pc, #4]	; (233c4 <nrfx_spi_uninit+0xe4>)
   233be:	e7ea      	b.n	23396 <nrfx_spi_uninit+0xb6>
   233c0:	200089a0 	.word	0x200089a0
   233c4:	50000300 	.word	0x50000300

000233c8 <nrfx_spi_xfer>:

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   233c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   233cc:	f890 c004 	ldrb.w	ip, [r0, #4]
   233d0:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
   233d4:	4d21      	ldr	r5, [pc, #132]	; (2345c <nrfx_spi_xfer+0x94>)
   233d6:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   233da:	7f6b      	ldrb	r3, [r5, #29]
   233dc:	2b00      	cmp	r3, #0
   233de:	d13a      	bne.n	23456 <nrfx_spi_xfer+0x8e>
   233e0:	4604      	mov	r4, r0
   233e2:	468e      	mov	lr, r1
   233e4:	4617      	mov	r7, r2
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
   233e6:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
   233ea:	4a1c      	ldr	r2, [pc, #112]	; (2345c <nrfx_spi_xfer+0x94>)
   233ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   233f0:	b10b      	cbz	r3, 233f6 <nrfx_spi_xfer+0x2e>
        {
            p_cb->transfer_in_progress = true;
   233f2:	2201      	movs	r2, #1
   233f4:	776a      	strb	r2, [r5, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   233f6:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
   233fa:	4e18      	ldr	r6, [pc, #96]	; (2345c <nrfx_spi_xfer+0x94>)
   233fc:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
   23400:	f106 080c 	add.w	r8, r6, #12
   23404:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   23408:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
    p_cb->abort = false;
   2340c:	2300      	movs	r3, #0
   2340e:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   23412:	7fb3      	ldrb	r3, [r6, #30]
   23414:	2bff      	cmp	r3, #255	; 0xff
   23416:	d00a      	beq.n	2342e <nrfx_spi_xfer+0x66>
    *p_pin = pin_number & 0x1F;
   23418:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
   2341c:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2341e:	2b01      	cmp	r3, #1
   23420:	d010      	beq.n	23444 <nrfx_spi_xfer+0x7c>
        case 0: return NRF_P0;
   23422:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   23426:	2301      	movs	r3, #1
   23428:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   2342a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    {
        nrf_gpio_pin_write(p_cb->ss_pin, 0);
    }
    if (flags)
   2342e:	b15f      	cbz	r7, 23448 <nrfx_spi_xfer+0x80>
    {
        p_cb->transfer_in_progress = false;
   23430:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
   23434:	4b09      	ldr	r3, [pc, #36]	; (2345c <nrfx_spi_xfer+0x94>)
   23436:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
   2343a:	2200      	movs	r2, #0
   2343c:	775a      	strb	r2, [r3, #29]
        err_code = NRFX_ERROR_NOT_SUPPORTED;
   2343e:	4808      	ldr	r0, [pc, #32]	; (23460 <nrfx_spi_xfer+0x98>)
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   23440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        case 1: return NRF_P1;
   23444:	4a07      	ldr	r2, [pc, #28]	; (23464 <nrfx_spi_xfer+0x9c>)
   23446:	e7ee      	b.n	23426 <nrfx_spi_xfer+0x5e>
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
   23448:	4672      	mov	r2, lr
   2344a:	4629      	mov	r1, r5
   2344c:	6820      	ldr	r0, [r4, #0]
   2344e:	f7ff feb3 	bl	231b8 <spi_xfer>
    nrfx_err_t err_code = NRFX_SUCCESS;
   23452:	4805      	ldr	r0, [pc, #20]	; (23468 <nrfx_spi_xfer+0xa0>)
   23454:	e7f4      	b.n	23440 <nrfx_spi_xfer+0x78>
        return err_code;
   23456:	4805      	ldr	r0, [pc, #20]	; (2346c <nrfx_spi_xfer+0xa4>)
   23458:	e7f2      	b.n	23440 <nrfx_spi_xfer+0x78>
   2345a:	bf00      	nop
   2345c:	200089a0 	.word	0x200089a0
   23460:	0bad0003 	.word	0x0bad0003
   23464:	50000300 	.word	0x50000300
   23468:	0bad0000 	.word	0x0bad0000
   2346c:	0bad000b 	.word	0x0bad000b

00023470 <nrfx_spi_0_irq_handler>:
    }
}

#if NRFX_CHECK(NRFX_SPI0_ENABLED)
void nrfx_spi_0_irq_handler(void)
{
   23470:	b508      	push	{r3, lr}
    irq_handler(NRF_SPI0, &m_cb[NRFX_SPI0_INST_IDX]);
   23472:	4902      	ldr	r1, [pc, #8]	; (2347c <nrfx_spi_0_irq_handler+0xc>)
   23474:	4802      	ldr	r0, [pc, #8]	; (23480 <nrfx_spi_0_irq_handler+0x10>)
   23476:	f008 fbdb 	bl	2bc30 <irq_handler>
}
   2347a:	bd08      	pop	{r3, pc}
   2347c:	200089a0 	.word	0x200089a0
   23480:	40003000 	.word	0x40003000

00023484 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   23484:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   23486:	4c11      	ldr	r4, [pc, #68]	; (234cc <_DoInit+0x48>)
   23488:	2303      	movs	r3, #3
   2348a:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   2348c:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   2348e:	4a10      	ldr	r2, [pc, #64]	; (234d0 <_DoInit+0x4c>)
   23490:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   23492:	4b10      	ldr	r3, [pc, #64]	; (234d4 <_DoInit+0x50>)
   23494:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   23496:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2349a:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   2349c:	2300      	movs	r3, #0
   2349e:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   234a0:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   234a2:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   234a4:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   234a6:	4a0c      	ldr	r2, [pc, #48]	; (234d8 <_DoInit+0x54>)
   234a8:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   234aa:	2210      	movs	r2, #16
   234ac:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   234ae:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   234b0:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   234b2:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   234b4:	4909      	ldr	r1, [pc, #36]	; (234dc <_DoInit+0x58>)
   234b6:	1de0      	adds	r0, r4, #7
   234b8:	f003 ffb4 	bl	27424 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   234bc:	4908      	ldr	r1, [pc, #32]	; (234e0 <_DoInit+0x5c>)
   234be:	4620      	mov	r0, r4
   234c0:	f003 ffb0 	bl	27424 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   234c4:	2320      	movs	r3, #32
   234c6:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   234c8:	bd10      	pop	{r4, pc}
   234ca:	bf00      	nop
   234cc:	20008dd8 	.word	0x20008dd8
   234d0:	0002febc 	.word	0x0002febc
   234d4:	200089d8 	.word	0x200089d8
   234d8:	200089c8 	.word	0x200089c8
   234dc:	0002fec8 	.word	0x0002fec8
   234e0:	0002fecc 	.word	0x0002fecc

000234e4 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   234e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   234e8:	4604      	mov	r4, r0
   234ea:	460e      	mov	r6, r1
   234ec:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   234ee:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   234f2:	4a2d      	ldr	r2, [pc, #180]	; (235a8 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   234f4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   234f8:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   234fa:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   234fc:	42bb      	cmp	r3, r7
   234fe:	d84c      	bhi.n	2359a <SEGGER_RTT_WriteSkipNoLock+0xb6>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   23500:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   23504:	4a28      	ldr	r2, [pc, #160]	; (235a8 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   23506:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   2350a:	f8d2 8020 	ldr.w	r8, [r2, #32]
   2350e:	eba8 0907 	sub.w	r9, r8, r7
   23512:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   23516:	4295      	cmp	r5, r2
   23518:	d904      	bls.n	23524 <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
   2351a:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   2351c:	429d      	cmp	r5, r3
   2351e:	d916      	bls.n	2354e <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
   23520:	2000      	movs	r0, #0
   23522:	e03f      	b.n	235a4 <SEGGER_RTT_WriteSkipNoLock+0xc0>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   23524:	f8df 8080 	ldr.w	r8, [pc, #128]	; 235a8 <SEGGER_RTT_WriteSkipNoLock+0xc4>
   23528:	1c63      	adds	r3, r4, #1
   2352a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2352e:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   23532:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   23534:	462a      	mov	r2, r5
   23536:	4631      	mov	r1, r6
   23538:	4438      	add	r0, r7
   2353a:	f003 ffc7 	bl	274cc <memcpy>
      pRing->WrOff = WrOff + NumBytes;
   2353e:	442f      	add	r7, r5
   23540:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   23544:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
   23548:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
   2354a:	2001      	movs	r0, #1
   2354c:	e02a      	b.n	235a4 <SEGGER_RTT_WriteSkipNoLock+0xc0>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2354e:	1c43      	adds	r3, r0, #1
   23550:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   23554:	4a14      	ldr	r2, [pc, #80]	; (235a8 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   23556:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2355a:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   2355c:	464a      	mov	r2, r9
   2355e:	4631      	mov	r1, r6
   23560:	4438      	add	r0, r7
   23562:	f003 ffb3 	bl	274cc <memcpy>
      NumBytes -= Rem;
   23566:	eba7 0808 	sub.w	r8, r7, r8
      if (NumBytes) {
   2356a:	eb18 0505 	adds.w	r5, r8, r5
   2356e:	d107      	bne.n	23580 <SEGGER_RTT_WriteSkipNoLock+0x9c>
      pRing->WrOff = NumBytes;
   23570:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   23574:	4b0c      	ldr	r3, [pc, #48]	; (235a8 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   23576:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   2357a:	625d      	str	r5, [r3, #36]	; 0x24
      return 1;
   2357c:	2001      	movs	r0, #1
   2357e:	e011      	b.n	235a4 <SEGGER_RTT_WriteSkipNoLock+0xc0>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
   23580:	1c63      	adds	r3, r4, #1
   23582:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   23586:	4a08      	ldr	r2, [pc, #32]	; (235a8 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   23588:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        memcpy((void*)pDst, pData + Rem, NumBytes);
   2358c:	462a      	mov	r2, r5
   2358e:	eb06 0109 	add.w	r1, r6, r9
   23592:	6858      	ldr	r0, [r3, #4]
   23594:	f003 ff9a 	bl	274cc <memcpy>
   23598:	e7ea      	b.n	23570 <SEGGER_RTT_WriteSkipNoLock+0x8c>
    Avail = RdOff - WrOff - 1u;
   2359a:	1bdb      	subs	r3, r3, r7
   2359c:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   2359e:	42ab      	cmp	r3, r5
   235a0:	d2c0      	bcs.n	23524 <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
   235a2:	2000      	movs	r0, #0
}
   235a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   235a8:	20008dd8 	.word	0x20008dd8

000235ac <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   235ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   235ae:	460f      	mov	r7, r1
   235b0:	4616      	mov	r6, r2
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   235b2:	1c45      	adds	r5, r0, #1
   235b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   235b8:	4b16      	ldr	r3, [pc, #88]	; (23614 <SEGGER_RTT_WriteNoLock+0x68>)
   235ba:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   235be:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   235c2:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   235c6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   235c8:	2c01      	cmp	r4, #1
   235ca:	d011      	beq.n	235f0 <SEGGER_RTT_WriteNoLock+0x44>
   235cc:	2c02      	cmp	r4, #2
   235ce:	d01c      	beq.n	2360a <SEGGER_RTT_WriteNoLock+0x5e>
   235d0:	b114      	cbz	r4, 235d8 <SEGGER_RTT_WriteNoLock+0x2c>
   235d2:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
   235d4:	4620      	mov	r0, r4
   235d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
   235d8:	4628      	mov	r0, r5
   235da:	f008 fb38 	bl	2bc4e <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   235de:	4286      	cmp	r6, r0
   235e0:	d8f8      	bhi.n	235d4 <SEGGER_RTT_WriteNoLock+0x28>
      _WriteNoCheck(pRing, pData, NumBytes);
   235e2:	4632      	mov	r2, r6
   235e4:	4639      	mov	r1, r7
   235e6:	4628      	mov	r0, r5
   235e8:	f008 fb3d 	bl	2bc66 <_WriteNoCheck>
      Status = NumBytes;
   235ec:	4634      	mov	r4, r6
   235ee:	e7f1      	b.n	235d4 <SEGGER_RTT_WriteNoLock+0x28>
    Avail = _GetAvailWriteSpace(pRing);
   235f0:	4628      	mov	r0, r5
   235f2:	f008 fb2c 	bl	2bc4e <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   235f6:	4634      	mov	r4, r6
   235f8:	4286      	cmp	r6, r0
   235fa:	bf28      	it	cs
   235fc:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   235fe:	4622      	mov	r2, r4
   23600:	4639      	mov	r1, r7
   23602:	4628      	mov	r0, r5
   23604:	f008 fb2f 	bl	2bc66 <_WriteNoCheck>
    break;
   23608:	e7e4      	b.n	235d4 <SEGGER_RTT_WriteNoLock+0x28>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   2360a:	4628      	mov	r0, r5
   2360c:	f008 fb4d 	bl	2bcaa <_WriteBlocking>
   23610:	4604      	mov	r4, r0
    break;
   23612:	e7df      	b.n	235d4 <SEGGER_RTT_WriteNoLock+0x28>
   23614:	20008dd8 	.word	0x20008dd8

00023618 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   23618:	4b06      	ldr	r3, [pc, #24]	; (23634 <SEGGER_RTT_HasDataUp+0x1c>)
   2361a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   2361e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   23622:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
   23624:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   23628:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   2362c:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   2362e:	1a80      	subs	r0, r0, r2
   23630:	4770      	bx	lr
   23632:	bf00      	nop
   23634:	20008dd8 	.word	0x20008dd8

00023638 <zephyr_rtt_mutex_lock>:
}

#ifdef CONFIG_MULTITHREADING

void zephyr_rtt_mutex_lock(void)
{
   23638:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   2363a:	f04f 32ff 	mov.w	r2, #4294967295
   2363e:	f04f 33ff 	mov.w	r3, #4294967295
   23642:	4802      	ldr	r0, [pc, #8]	; (2364c <zephyr_rtt_mutex_lock+0x14>)
   23644:	f000 fbe8 	bl	23e18 <z_impl_k_mutex_lock>
	k_mutex_lock(&rtt_term_mutex, K_FOREVER);
}
   23648:	bd08      	pop	{r3, pc}
   2364a:	bf00      	nop
   2364c:	20000ac8 	.word	0x20000ac8

00023650 <zephyr_rtt_mutex_unlock>:

void zephyr_rtt_mutex_unlock(void)
{
   23650:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   23652:	4802      	ldr	r0, [pc, #8]	; (2365c <zephyr_rtt_mutex_unlock+0xc>)
   23654:	f000 fc64 	bl	23f20 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&rtt_term_mutex);
}
   23658:	bd08      	pop	{r3, pc}
   2365a:	bf00      	nop
   2365c:	20000ac8 	.word	0x20000ac8

00023660 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   23660:	4b03      	ldr	r3, [pc, #12]	; (23670 <z_device_state_init+0x10>)

	while (dev < __device_end) {
   23662:	e000      	b.n	23666 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
   23664:	3318      	adds	r3, #24
	while (dev < __device_end) {
   23666:	4a03      	ldr	r2, [pc, #12]	; (23674 <z_device_state_init+0x14>)
   23668:	4293      	cmp	r3, r2
   2366a:	d3fb      	bcc.n	23664 <z_device_state_init+0x4>
	}
}
   2366c:	4770      	bx	lr
   2366e:	bf00      	nop
   23670:	0002cda8 	.word	0x0002cda8
   23674:	0002ce80 	.word	0x0002ce80

00023678 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
   23678:	2804      	cmp	r0, #4
   2367a:	d80c      	bhi.n	23696 <reason_to_str+0x1e>
   2367c:	e8df f000 	tbb	[pc, r0]
   23680:	07050d03 	.word	0x07050d03
   23684:	09          	.byte	0x09
   23685:	00          	.byte	0x00
   23686:	4806      	ldr	r0, [pc, #24]	; (236a0 <reason_to_str+0x28>)
   23688:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
   2368a:	4806      	ldr	r0, [pc, #24]	; (236a4 <reason_to_str+0x2c>)
   2368c:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
   2368e:	4806      	ldr	r0, [pc, #24]	; (236a8 <reason_to_str+0x30>)
   23690:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
   23692:	4806      	ldr	r0, [pc, #24]	; (236ac <reason_to_str+0x34>)
   23694:	4770      	bx	lr
	default:
		return "Unknown error";
   23696:	4806      	ldr	r0, [pc, #24]	; (236b0 <reason_to_str+0x38>)
   23698:	4770      	bx	lr
		return "Unhandled interrupt";
   2369a:	4806      	ldr	r0, [pc, #24]	; (236b4 <reason_to_str+0x3c>)
	}
}
   2369c:	4770      	bx	lr
   2369e:	bf00      	nop
   236a0:	0002fed8 	.word	0x0002fed8
   236a4:	0002fefc 	.word	0x0002fefc
   236a8:	0002ff0c 	.word	0x0002ff0c
   236ac:	0002ff18 	.word	0x0002ff18
   236b0:	0002ff28 	.word	0x0002ff28
   236b4:	0002fee8 	.word	0x0002fee8

000236b8 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   236b8:	b130      	cbz	r0, 236c8 <thread_name_get+0x10>
{
   236ba:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   236bc:	f008 fc1f 	bl	2befe <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   236c0:	b120      	cbz	r0, 236cc <thread_name_get+0x14>
   236c2:	7803      	ldrb	r3, [r0, #0]
   236c4:	b123      	cbz	r3, 236d0 <thread_name_get+0x18>
}
   236c6:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
   236c8:	4802      	ldr	r0, [pc, #8]	; (236d4 <thread_name_get+0x1c>)
}
   236ca:	4770      	bx	lr
		thread_name = "unknown";
   236cc:	4801      	ldr	r0, [pc, #4]	; (236d4 <thread_name_get+0x1c>)
   236ce:	e7fa      	b.n	236c6 <thread_name_get+0xe>
   236d0:	4800      	ldr	r0, [pc, #0]	; (236d4 <thread_name_get+0x1c>)
	return thread_name;
   236d2:	e7f8      	b.n	236c6 <thread_name_get+0xe>
   236d4:	0002ff38 	.word	0x0002ff38

000236d8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   236d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   236dc:	b089      	sub	sp, #36	; 0x24
   236de:	af00      	add	r7, sp, #0
   236e0:	4606      	mov	r6, r0
   236e2:	460c      	mov	r4, r1
   236e4:	f04f 0340 	mov.w	r3, #64	; 0x40
   236e8:	f3ef 8811 	mrs	r8, BASEPRI
   236ec:	f383 8812 	msr	BASEPRI_MAX, r3
   236f0:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   236f4:	f001 fa4c 	bl	24b90 <z_impl_z_current_get>
   236f8:	4605      	mov	r5, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   236fa:	4630      	mov	r0, r6
   236fc:	f7ff ffbc 	bl	23678 <reason_to_str>
   23700:	46e9      	mov	r9, sp
   23702:	2301      	movs	r3, #1
   23704:	713b      	strb	r3, [r7, #4]
   23706:	2303      	movs	r3, #3
   23708:	717b      	strb	r3, [r7, #5]
   2370a:	b08a      	sub	sp, #40	; 0x28
   2370c:	46ec      	mov	ip, sp
   2370e:	f11c 0210 	adds.w	r2, ip, #16
   23712:	d021      	beq.n	23758 <z_fatal_error+0x80>
   23714:	f04f 0e16 	mov.w	lr, #22
   23718:	b152      	cbz	r2, 23730 <z_fatal_error+0x58>
   2371a:	4673      	mov	r3, lr
   2371c:	f1be 0f04 	cmp.w	lr, #4
   23720:	dd02      	ble.n	23728 <z_fatal_error+0x50>
   23722:	4976      	ldr	r1, [pc, #472]	; (238fc <z_fatal_error+0x224>)
   23724:	f8cc 1014 	str.w	r1, [ip, #20]
   23728:	2b08      	cmp	r3, #8
   2372a:	dd01      	ble.n	23730 <z_fatal_error+0x58>
   2372c:	f8cc 6018 	str.w	r6, [ip, #24]
   23730:	2301      	movs	r3, #1
   23732:	703b      	strb	r3, [r7, #0]
   23734:	2303      	movs	r3, #3
   23736:	707b      	strb	r3, [r7, #1]
   23738:	b1da      	cbz	r2, 23772 <z_fatal_error+0x9a>
   2373a:	4673      	mov	r3, lr
   2373c:	f1be 0f0c 	cmp.w	lr, #12
   23740:	dd01      	ble.n	23746 <z_fatal_error+0x6e>
   23742:	f8cc 001c 	str.w	r0, [ip, #28]
   23746:	2b10      	cmp	r3, #16
   23748:	dd02      	ble.n	23750 <z_fatal_error+0x78>
   2374a:	2300      	movs	r3, #0
   2374c:	f8cc 3020 	str.w	r3, [ip, #32]
   23750:	f10c 0324 	add.w	r3, ip, #36	; 0x24
   23754:	2100      	movs	r1, #0
   23756:	e00a      	b.n	2376e <z_fatal_error+0x96>
   23758:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   2375c:	e7dc      	b.n	23718 <z_fatal_error+0x40>
   2375e:	f101 0020 	add.w	r0, r1, #32
   23762:	4438      	add	r0, r7
   23764:	f810 0c20 	ldrb.w	r0, [r0, #-32]
   23768:	f803 0b01 	strb.w	r0, [r3], #1
   2376c:	3101      	adds	r1, #1
   2376e:	2901      	cmp	r1, #1
   23770:	d9f5      	bls.n	2375e <z_fatal_error+0x86>
   23772:	f1be 0f15 	cmp.w	lr, #21
   23776:	dd53      	ble.n	23820 <z_fatal_error+0x148>
   23778:	2316      	movs	r3, #22
   2377a:	b14a      	cbz	r2, 23790 <z_fatal_error+0xb8>
   2377c:	2105      	movs	r1, #5
   2377e:	7139      	strb	r1, [r7, #4]
   23780:	2100      	movs	r1, #0
   23782:	7179      	strb	r1, [r7, #5]
   23784:	71b9      	strb	r1, [r7, #6]
   23786:	2101      	movs	r1, #1
   23788:	71f9      	strb	r1, [r7, #7]
   2378a:	6878      	ldr	r0, [r7, #4]
   2378c:	f8cc 0010 	str.w	r0, [ip, #16]
   23790:	2100      	movs	r1, #0
   23792:	f36f 0100 	bfc	r1, #0, #1
   23796:	f36f 0141 	bfc	r1, #1, #1
   2379a:	f36f 0182 	bfc	r1, #2, #1
   2379e:	f36f 01c5 	bfc	r1, #3, #3
   237a2:	2001      	movs	r0, #1
   237a4:	f360 1188 	bfi	r1, r0, #6, #3
   237a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
   237ac:	f363 2152 	bfi	r1, r3, #9, #10
   237b0:	f36f 41de 	bfc	r1, #19, #12
   237b4:	f36f 71df 	bfc	r1, #31, #1
   237b8:	2300      	movs	r3, #0
   237ba:	4851      	ldr	r0, [pc, #324]	; (23900 <z_fatal_error+0x228>)
   237bc:	f003 fa4b 	bl	26c56 <z_impl_z_log_msg_static_create>
   237c0:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   237c2:	b11c      	cbz	r4, 237cc <z_fatal_error+0xf4>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   237c4:	69e3      	ldr	r3, [r4, #28]
   237c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   237ca:	bb63      	cbnz	r3, 23826 <z_fatal_error+0x14e>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   237cc:	4628      	mov	r0, r5
   237ce:	f7ff ff73 	bl	236b8 <thread_name_get>
   237d2:	46e9      	mov	r9, sp
   237d4:	2301      	movs	r3, #1
   237d6:	713b      	strb	r3, [r7, #4]
   237d8:	2303      	movs	r3, #3
   237da:	717b      	strb	r3, [r7, #5]
   237dc:	b08a      	sub	sp, #40	; 0x28
   237de:	46ec      	mov	ip, sp
   237e0:	f11c 0210 	adds.w	r2, ip, #16
   237e4:	d042      	beq.n	2386c <z_fatal_error+0x194>
   237e6:	f04f 0e12 	mov.w	lr, #18
   237ea:	b152      	cbz	r2, 23802 <z_fatal_error+0x12a>
   237ec:	4673      	mov	r3, lr
   237ee:	f1be 0f04 	cmp.w	lr, #4
   237f2:	dd02      	ble.n	237fa <z_fatal_error+0x122>
   237f4:	4943      	ldr	r1, [pc, #268]	; (23904 <z_fatal_error+0x22c>)
   237f6:	f8cc 1014 	str.w	r1, [ip, #20]
   237fa:	2b08      	cmp	r3, #8
   237fc:	dd01      	ble.n	23802 <z_fatal_error+0x12a>
   237fe:	f8cc 5018 	str.w	r5, [ip, #24]
   23802:	2301      	movs	r3, #1
   23804:	703b      	strb	r3, [r7, #0]
   23806:	2303      	movs	r3, #3
   23808:	707b      	strb	r3, [r7, #1]
   2380a:	2a00      	cmp	r2, #0
   2380c:	d03b      	beq.n	23886 <z_fatal_error+0x1ae>
   2380e:	f1be 0f0c 	cmp.w	lr, #12
   23812:	dd01      	ble.n	23818 <z_fatal_error+0x140>
   23814:	f8cc 001c 	str.w	r0, [ip, #28]
   23818:	f10c 0320 	add.w	r3, ip, #32
   2381c:	2100      	movs	r1, #0
   2381e:	e030      	b.n	23882 <z_fatal_error+0x1aa>
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   23820:	f06f 031b 	mvn.w	r3, #27
   23824:	e7a9      	b.n	2377a <z_fatal_error+0xa2>
		LOG_ERR("Fault during interrupt handling\n");
   23826:	4b38      	ldr	r3, [pc, #224]	; (23908 <z_fatal_error+0x230>)
   23828:	61fb      	str	r3, [r7, #28]
   2382a:	2302      	movs	r3, #2
   2382c:	713b      	strb	r3, [r7, #4]
   2382e:	2300      	movs	r3, #0
   23830:	717b      	strb	r3, [r7, #5]
   23832:	71bb      	strb	r3, [r7, #6]
   23834:	71fb      	strb	r3, [r7, #7]
   23836:	687a      	ldr	r2, [r7, #4]
   23838:	61ba      	str	r2, [r7, #24]
   2383a:	4619      	mov	r1, r3
   2383c:	f363 0100 	bfi	r1, r3, #0, #1
   23840:	f363 0141 	bfi	r1, r3, #1, #1
   23844:	f363 0182 	bfi	r1, r3, #2, #1
   23848:	f363 01c5 	bfi	r1, r3, #3, #3
   2384c:	2201      	movs	r2, #1
   2384e:	f362 1188 	bfi	r1, r2, #6, #3
   23852:	2208      	movs	r2, #8
   23854:	f362 2152 	bfi	r1, r2, #9, #10
   23858:	f363 41de 	bfi	r1, r3, #19, #12
   2385c:	f363 71df 	bfi	r1, r3, #31, #1
   23860:	f107 0218 	add.w	r2, r7, #24
   23864:	4826      	ldr	r0, [pc, #152]	; (23900 <z_fatal_error+0x228>)
   23866:	f003 f9f6 	bl	26c56 <z_impl_z_log_msg_static_create>
   2386a:	e7af      	b.n	237cc <z_fatal_error+0xf4>
	LOG_ERR("Current thread: %p (%s)", thread,
   2386c:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   23870:	e7bb      	b.n	237ea <z_fatal_error+0x112>
   23872:	f101 0020 	add.w	r0, r1, #32
   23876:	4438      	add	r0, r7
   23878:	f810 0c20 	ldrb.w	r0, [r0, #-32]
   2387c:	f803 0b01 	strb.w	r0, [r3], #1
   23880:	3101      	adds	r1, #1
   23882:	2901      	cmp	r1, #1
   23884:	d9f5      	bls.n	23872 <z_fatal_error+0x19a>
   23886:	f1be 0f11 	cmp.w	lr, #17
   2388a:	dd33      	ble.n	238f4 <z_fatal_error+0x21c>
   2388c:	2312      	movs	r3, #18
   2388e:	b14a      	cbz	r2, 238a4 <z_fatal_error+0x1cc>
   23890:	2104      	movs	r1, #4
   23892:	7139      	strb	r1, [r7, #4]
   23894:	2100      	movs	r1, #0
   23896:	7179      	strb	r1, [r7, #5]
   23898:	71b9      	strb	r1, [r7, #6]
   2389a:	2101      	movs	r1, #1
   2389c:	71f9      	strb	r1, [r7, #7]
   2389e:	6878      	ldr	r0, [r7, #4]
   238a0:	f8cc 0010 	str.w	r0, [ip, #16]
   238a4:	2100      	movs	r1, #0
   238a6:	f36f 0100 	bfc	r1, #0, #1
   238aa:	f36f 0141 	bfc	r1, #1, #1
   238ae:	f36f 0182 	bfc	r1, #2, #1
   238b2:	f36f 01c5 	bfc	r1, #3, #3
   238b6:	2001      	movs	r0, #1
   238b8:	f360 1188 	bfi	r1, r0, #6, #3
   238bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
   238c0:	f363 2152 	bfi	r1, r3, #9, #10
   238c4:	f36f 41de 	bfc	r1, #19, #12
   238c8:	f36f 71df 	bfc	r1, #31, #1
   238cc:	2300      	movs	r3, #0
   238ce:	480c      	ldr	r0, [pc, #48]	; (23900 <z_fatal_error+0x228>)
   238d0:	f003 f9c1 	bl	26c56 <z_impl_z_log_msg_static_create>
   238d4:	46cd      	mov	sp, r9

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   238d6:	4621      	mov	r1, r4
   238d8:	4630      	mov	r0, r6
   238da:	f7fd fe8f 	bl	215fc <k_sys_fatal_error_handler>
	__asm__ volatile(
   238de:	f388 8811 	msr	BASEPRI, r8
   238e2:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   238e6:	4628      	mov	r0, r5
   238e8:	f7f3 f842 	bl	16970 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   238ec:	3724      	adds	r7, #36	; 0x24
   238ee:	46bd      	mov	sp, r7
   238f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_ERR("Current thread: %p (%s)", thread,
   238f4:	f06f 031b 	mvn.w	r3, #27
   238f8:	e7c9      	b.n	2388e <z_fatal_error+0x1b6>
   238fa:	bf00      	nop
   238fc:	0002ff40 	.word	0x0002ff40
   23900:	0002d154 	.word	0x0002d154
   23904:	0002ff8c 	.word	0x0002ff8c
   23908:	0002ff68 	.word	0x0002ff68

0002390c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
   2390c:	b570      	push	{r4, r5, r6, lr}
   2390e:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   23910:	4b11      	ldr	r3, [pc, #68]	; (23958 <z_sys_init_run_level+0x4c>)
   23912:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   23916:	e009      	b.n	2392c <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   23918:	4240      	negs	r0, r0
   2391a:	e017      	b.n	2394c <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   2391c:	68eb      	ldr	r3, [r5, #12]
   2391e:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   23920:	68ea      	ldr	r2, [r5, #12]
   23922:	7853      	ldrb	r3, [r2, #1]
   23924:	f043 0301 	orr.w	r3, r3, #1
   23928:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2392a:	3408      	adds	r4, #8
   2392c:	1c73      	adds	r3, r6, #1
   2392e:	4a0a      	ldr	r2, [pc, #40]	; (23958 <z_sys_init_run_level+0x4c>)
   23930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   23934:	42a3      	cmp	r3, r4
   23936:	d90d      	bls.n	23954 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   23938:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   2393a:	6823      	ldr	r3, [r4, #0]
   2393c:	4628      	mov	r0, r5
   2393e:	4798      	blx	r3
		if (dev != NULL) {
   23940:	2d00      	cmp	r5, #0
   23942:	d0f2      	beq.n	2392a <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   23944:	2800      	cmp	r0, #0
   23946:	d0eb      	beq.n	23920 <z_sys_init_run_level+0x14>
				if (rc < 0) {
   23948:	2800      	cmp	r0, #0
   2394a:	dbe5      	blt.n	23918 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   2394c:	28ff      	cmp	r0, #255	; 0xff
   2394e:	dde5      	ble.n	2391c <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   23950:	20ff      	movs	r0, #255	; 0xff
   23952:	e7e3      	b.n	2391c <z_sys_init_run_level+0x10>
		}
	}
}
   23954:	bd70      	pop	{r4, r5, r6, pc}
   23956:	bf00      	nop
   23958:	0002ffb4 	.word	0x0002ffb4

0002395c <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   2395c:	b510      	push	{r4, lr}
   2395e:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   23960:	23b8      	movs	r3, #184	; 0xb8
   23962:	4c10      	ldr	r4, [pc, #64]	; (239a4 <init_idle_thread+0x48>)
   23964:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
   23968:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   2396c:	4b0e      	ldr	r3, [pc, #56]	; (239a8 <init_idle_thread+0x4c>)
   2396e:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
	z_setup_new_thread(thread, stack,
   23972:	4a0e      	ldr	r2, [pc, #56]	; (239ac <init_idle_thread+0x50>)
   23974:	9205      	str	r2, [sp, #20]
   23976:	2201      	movs	r2, #1
   23978:	9204      	str	r2, [sp, #16]
   2397a:	220f      	movs	r2, #15
   2397c:	9203      	str	r2, [sp, #12]
   2397e:	2200      	movs	r2, #0
   23980:	9202      	str	r2, [sp, #8]
   23982:	9201      	str	r2, [sp, #4]
   23984:	9300      	str	r3, [sp, #0]
   23986:	4b0a      	ldr	r3, [pc, #40]	; (239b0 <init_idle_thread+0x54>)
   23988:	f44f 72a0 	mov.w	r2, #320	; 0x140
   2398c:	4909      	ldr	r1, [pc, #36]	; (239b4 <init_idle_thread+0x58>)
   2398e:	eb01 11cc 	add.w	r1, r1, ip, lsl #7
   23992:	4620      	mov	r0, r4
   23994:	f000 f974 	bl	23c80 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   23998:	7b63      	ldrb	r3, [r4, #13]
   2399a:	f023 0304 	bic.w	r3, r3, #4
   2399e:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   239a0:	b006      	add	sp, #24
   239a2:	bd10      	pop	{r4, pc}
   239a4:	20007748 	.word	0x20007748
   239a8:	20008e80 	.word	0x20008e80
   239ac:	0002ffa4 	.word	0x0002ffa4
   239b0:	00023ddd 	.word	0x00023ddd
   239b4:	2000b500 	.word	0x2000b500

000239b8 <bg_thread_main>:
{
   239b8:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   239ba:	4b0a      	ldr	r3, [pc, #40]	; (239e4 <bg_thread_main+0x2c>)
   239bc:	2201      	movs	r2, #1
   239be:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   239c0:	2003      	movs	r0, #3
   239c2:	f7ff ffa3 	bl	2390c <z_sys_init_run_level>
	boot_banner();
   239c6:	f001 fc05 	bl	251d4 <boot_banner>
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   239ca:	2004      	movs	r0, #4
   239cc:	f7ff ff9e 	bl	2390c <z_sys_init_run_level>
	z_init_static_threads();
   239d0:	f000 f9ba 	bl	23d48 <z_init_static_threads>
	(void)main();
   239d4:	f7ee fcfc 	bl	123d0 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   239d8:	4a03      	ldr	r2, [pc, #12]	; (239e8 <bg_thread_main+0x30>)
   239da:	7b13      	ldrb	r3, [r2, #12]
   239dc:	f023 0301 	bic.w	r3, r3, #1
   239e0:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   239e2:	bd08      	pop	{r3, pc}
   239e4:	20008ed3 	.word	0x20008ed3
   239e8:	20007800 	.word	0x20007800

000239ec <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   239ec:	b508      	push	{r3, lr}
   239ee:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   239f0:	4a01      	ldr	r2, [pc, #4]	; (239f8 <switch_to_main_thread+0xc>)
   239f2:	4802      	ldr	r0, [pc, #8]	; (239fc <switch_to_main_thread+0x10>)
   239f4:	f7f2 f816 	bl	15a24 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   239f8:	000239b9 	.word	0x000239b9
   239fc:	20007800 	.word	0x20007800

00023a00 <z_bss_zero>:
{
   23a00:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   23a02:	4803      	ldr	r0, [pc, #12]	; (23a10 <z_bss_zero+0x10>)
   23a04:	4a03      	ldr	r2, [pc, #12]	; (23a14 <z_bss_zero+0x14>)
   23a06:	1a12      	subs	r2, r2, r0
   23a08:	2100      	movs	r1, #0
   23a0a:	f008 f996 	bl	2bd3a <z_early_memset>
}
   23a0e:	bd08      	pop	{r3, pc}
   23a10:	20000c30 	.word	0x20000c30
   23a14:	20008ed4 	.word	0x20008ed4

00023a18 <z_init_cpu>:
{
   23a18:	b510      	push	{r4, lr}
   23a1a:	4604      	mov	r4, r0
	init_idle_thread(id);
   23a1c:	f7ff ff9e 	bl	2395c <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   23a20:	23b8      	movs	r3, #184	; 0xb8
   23a22:	490b      	ldr	r1, [pc, #44]	; (23a50 <z_init_cpu+0x38>)
   23a24:	fb03 1104 	mla	r1, r3, r4, r1
   23a28:	4a0a      	ldr	r2, [pc, #40]	; (23a54 <z_init_cpu+0x3c>)
   23a2a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   23a2e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   23a32:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
   23a34:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   23a36:	eb04 1144 	add.w	r1, r4, r4, lsl #5
   23a3a:	4b07      	ldr	r3, [pc, #28]	; (23a58 <z_init_cpu+0x40>)
   23a3c:	eb03 1381 	add.w	r3, r3, r1, lsl #6
   23a40:	f503 6304 	add.w	r3, r3, #2112	; 0x840
	_kernel.cpus[id].irq_stack =
   23a44:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   23a48:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   23a4c:	6053      	str	r3, [r2, #4]
}
   23a4e:	bd10      	pop	{r4, pc}
   23a50:	20007748 	.word	0x20007748
   23a54:	20008e80 	.word	0x20008e80
   23a58:	2000acc0 	.word	0x2000acc0

00023a5c <prepare_multithreading>:
{
   23a5c:	b570      	push	{r4, r5, r6, lr}
   23a5e:	b086      	sub	sp, #24
	z_sched_init();
   23a60:	f000 ff98 	bl	24994 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
   23a64:	4d10      	ldr	r5, [pc, #64]	; (23aa8 <prepare_multithreading+0x4c>)
   23a66:	4b11      	ldr	r3, [pc, #68]	; (23aac <prepare_multithreading+0x50>)
   23a68:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   23a6a:	4b11      	ldr	r3, [pc, #68]	; (23ab0 <prepare_multithreading+0x54>)
   23a6c:	9305      	str	r3, [sp, #20]
   23a6e:	2301      	movs	r3, #1
   23a70:	9304      	str	r3, [sp, #16]
   23a72:	2400      	movs	r4, #0
   23a74:	9403      	str	r4, [sp, #12]
   23a76:	9402      	str	r4, [sp, #8]
   23a78:	9401      	str	r4, [sp, #4]
   23a7a:	9400      	str	r4, [sp, #0]
   23a7c:	4b0d      	ldr	r3, [pc, #52]	; (23ab4 <prepare_multithreading+0x58>)
   23a7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   23a82:	490d      	ldr	r1, [pc, #52]	; (23ab8 <prepare_multithreading+0x5c>)
   23a84:	4628      	mov	r0, r5
   23a86:	f000 f8fb 	bl	23c80 <z_setup_new_thread>
   23a8a:	4606      	mov	r6, r0
   23a8c:	7b6b      	ldrb	r3, [r5, #13]
   23a8e:	f023 0304 	bic.w	r3, r3, #4
   23a92:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
   23a94:	4628      	mov	r0, r5
   23a96:	f008 fd56 	bl	2c546 <z_ready_thread>
	z_init_cpu(0);
   23a9a:	4620      	mov	r0, r4
   23a9c:	f7ff ffbc 	bl	23a18 <z_init_cpu>
}
   23aa0:	4630      	mov	r0, r6
   23aa2:	b006      	add	sp, #24
   23aa4:	bd70      	pop	{r4, r5, r6, pc}
   23aa6:	bf00      	nop
   23aa8:	20007800 	.word	0x20007800
   23aac:	20008e80 	.word	0x20008e80
   23ab0:	0002ffac 	.word	0x0002ffac
   23ab4:	000239b9 	.word	0x000239b9
   23ab8:	2000b680 	.word	0x2000b680

00023abc <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   23abc:	b500      	push	{lr}
   23abe:	b0af      	sub	sp, #188	; 0xbc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   23ac0:	2000      	movs	r0, #0
   23ac2:	f7ff ff23 	bl	2390c <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   23ac6:	4b1f      	ldr	r3, [pc, #124]	; (23b44 <z_cstart+0x88>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   23ac8:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   23acc:	4c1e      	ldr	r4, [pc, #120]	; (23b48 <z_cstart+0x8c>)
   23ace:	6963      	ldr	r3, [r4, #20]
   23ad0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   23ad4:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   23ad6:	23e0      	movs	r3, #224	; 0xe0
   23ad8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   23adc:	2320      	movs	r3, #32
   23ade:	77e3      	strb	r3, [r4, #31]
   23ae0:	2500      	movs	r5, #0
   23ae2:	7625      	strb	r5, [r4, #24]
   23ae4:	7665      	strb	r5, [r4, #25]
   23ae6:	76a5      	strb	r5, [r4, #26]
   23ae8:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   23aec:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23aee:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   23af2:	6263      	str	r3, [r4, #36]	; 0x24
   23af4:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   23af8:	f7f2 fea0 	bl	1683c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   23afc:	f7f1 fd3c 	bl	15578 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   23b00:	f04f 33ff 	mov.w	r3, #4294967295
   23b04:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   23b06:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   23b08:	f7f3 f874 	bl	16bf4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   23b0c:	f7f2 ff4a 	bl	169a4 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   23b10:	f7f0 feca 	bl	148a8 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   23b14:	2401      	movs	r4, #1
   23b16:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   23b1a:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   23b1e:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
   23b20:	9528      	str	r5, [sp, #160]	; 0xa0
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
   23b22:	952a      	str	r5, [sp, #168]	; 0xa8

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   23b24:	4b09      	ldr	r3, [pc, #36]	; (23b4c <z_cstart+0x90>)
   23b26:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   23b2a:	f7ff fd99 	bl	23660 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   23b2e:	4620      	mov	r0, r4
   23b30:	f7ff feec 	bl	2390c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   23b34:	2002      	movs	r0, #2
   23b36:	f7ff fee9 	bl	2390c <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   23b3a:	f7ff ff8f 	bl	23a5c <prepare_multithreading>
   23b3e:	f7ff ff55 	bl	239ec <switch_to_main_thread>
   23b42:	bf00      	nop
   23b44:	2000b500 	.word	0x2000b500
   23b48:	e000ed00 	.word	0xe000ed00
   23b4c:	20008e80 	.word	0x20008e80

00023b50 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   23b50:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   23b52:	4c06      	ldr	r4, [pc, #24]	; (23b6c <statics_init+0x1c>)
   23b54:	e005      	b.n	23b62 <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   23b56:	68a2      	ldr	r2, [r4, #8]
   23b58:	6861      	ldr	r1, [r4, #4]
   23b5a:	4620      	mov	r0, r4
   23b5c:	f008 f8f5 	bl	2bd4a <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   23b60:	3414      	adds	r4, #20
   23b62:	4b03      	ldr	r3, [pc, #12]	; (23b70 <statics_init+0x20>)
   23b64:	429c      	cmp	r4, r3
   23b66:	d3f6      	bcc.n	23b56 <statics_init+0x6>
		}
	}
	return 0;
}
   23b68:	2000      	movs	r0, #0
   23b6a:	bd10      	pop	{r4, pc}
   23b6c:	20000ab4 	.word	0x20000ab4
   23b70:	20000ab4 	.word	0x20000ab4

00023b74 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   23b74:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   23b76:	4c06      	ldr	r4, [pc, #24]	; (23b90 <init_mem_slab_module+0x1c>)
	int rc = 0;
   23b78:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   23b7a:	e000      	b.n	23b7e <init_mem_slab_module+0xa>
   23b7c:	341c      	adds	r4, #28
   23b7e:	4b05      	ldr	r3, [pc, #20]	; (23b94 <init_mem_slab_module+0x20>)
   23b80:	429c      	cmp	r4, r3
   23b82:	d204      	bcs.n	23b8e <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
   23b84:	4620      	mov	r0, r4
   23b86:	f008 f95b 	bl	2be40 <create_free_list>
		if (rc < 0) {
   23b8a:	2800      	cmp	r0, #0
   23b8c:	daf6      	bge.n	23b7c <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
   23b8e:	bd10      	pop	{r4, pc}
   23b90:	20000a60 	.word	0x20000a60
   23b94:	20000ab4 	.word	0x20000ab4

00023b98 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   23b98:	b530      	push	{r4, r5, lr}
   23b9a:	b083      	sub	sp, #12
   23b9c:	460d      	mov	r5, r1
	__asm__ volatile(
   23b9e:	f04f 0140 	mov.w	r1, #64	; 0x40
   23ba2:	f3ef 8c11 	mrs	ip, BASEPRI
   23ba6:	f381 8812 	msr	BASEPRI_MAX, r1
   23baa:	f3bf 8f6f 	isb	sy
   23bae:	4661      	mov	r1, ip
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   23bb0:	6944      	ldr	r4, [r0, #20]
   23bb2:	b164      	cbz	r4, 23bce <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
   23bb4:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   23bb6:	6823      	ldr	r3, [r4, #0]
   23bb8:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   23bba:	6983      	ldr	r3, [r0, #24]
   23bbc:	3301      	adds	r3, #1
   23bbe:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   23bc0:	2000      	movs	r0, #0
	__asm__ volatile(
   23bc2:	f381 8811 	msr	BASEPRI, r1
   23bc6:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   23bca:	b003      	add	sp, #12
   23bcc:	bd30      	pop	{r4, r5, pc}
   23bce:	f100 0e08 	add.w	lr, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   23bd2:	ea53 0402 	orrs.w	r4, r3, r2
   23bd6:	d104      	bne.n	23be2 <k_mem_slab_alloc+0x4a>
		*mem = NULL;
   23bd8:	2300      	movs	r3, #0
   23bda:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   23bdc:	f06f 000b 	mvn.w	r0, #11
   23be0:	e7ef      	b.n	23bc2 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   23be2:	9200      	str	r2, [sp, #0]
   23be4:	9301      	str	r3, [sp, #4]
   23be6:	4602      	mov	r2, r0
   23be8:	4670      	mov	r0, lr
   23bea:	f000 fdcd 	bl	24788 <z_pend_curr>
		if (result == 0) {
   23bee:	2800      	cmp	r0, #0
   23bf0:	d1eb      	bne.n	23bca <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
   23bf2:	4b02      	ldr	r3, [pc, #8]	; (23bfc <k_mem_slab_alloc+0x64>)
   23bf4:	689b      	ldr	r3, [r3, #8]
   23bf6:	695b      	ldr	r3, [r3, #20]
   23bf8:	602b      	str	r3, [r5, #0]
		return result;
   23bfa:	e7e6      	b.n	23bca <k_mem_slab_alloc+0x32>
   23bfc:	20008e80 	.word	0x20008e80

00023c00 <z_thread_monitor_exit>:
	__asm__ volatile(
   23c00:	f04f 0340 	mov.w	r3, #64	; 0x40
   23c04:	f3ef 8111 	mrs	r1, BASEPRI
   23c08:	f383 8812 	msr	BASEPRI_MAX, r3
   23c0c:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   23c10:	4b0a      	ldr	r3, [pc, #40]	; (23c3c <z_thread_monitor_exit+0x3c>)
   23c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   23c14:	4283      	cmp	r3, r0
   23c16:	d104      	bne.n	23c22 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   23c18:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   23c1a:	4b08      	ldr	r3, [pc, #32]	; (23c3c <z_thread_monitor_exit+0x3c>)
   23c1c:	629a      	str	r2, [r3, #40]	; 0x28
   23c1e:	e007      	b.n	23c30 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   23c20:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   23c22:	b113      	cbz	r3, 23c2a <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   23c24:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   23c26:	4282      	cmp	r2, r0
   23c28:	d1fa      	bne.n	23c20 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   23c2a:	b10b      	cbz	r3, 23c30 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   23c2c:	6f42      	ldr	r2, [r0, #116]	; 0x74
   23c2e:	675a      	str	r2, [r3, #116]	; 0x74
	__asm__ volatile(
   23c30:	f381 8811 	msr	BASEPRI, r1
   23c34:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   23c38:	4770      	bx	lr
   23c3a:	bf00      	nop
   23c3c:	20008e80 	.word	0x20008e80

00023c40 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   23c40:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   23c42:	4604      	mov	r4, r0
   23c44:	b140      	cbz	r0, 23c58 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
   23c46:	221f      	movs	r2, #31
   23c48:	f104 0078 	add.w	r0, r4, #120	; 0x78
   23c4c:	f003 fbf4 	bl	27438 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   23c50:	2000      	movs	r0, #0
   23c52:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   23c56:	bd10      	pop	{r4, pc}
		thread = _current;
   23c58:	4b01      	ldr	r3, [pc, #4]	; (23c60 <z_impl_k_thread_name_set+0x20>)
   23c5a:	689c      	ldr	r4, [r3, #8]
   23c5c:	e7f3      	b.n	23c46 <z_impl_k_thread_name_set+0x6>
   23c5e:	bf00      	nop
   23c60:	20008e80 	.word	0x20008e80

00023c64 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   23c64:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23c66:	ea53 0102 	orrs.w	r1, r3, r2
   23c6a:	d102      	bne.n	23c72 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
   23c6c:	f008 f949 	bl	2bf02 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   23c70:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   23c72:	4902      	ldr	r1, [pc, #8]	; (23c7c <schedule_new_thread+0x18>)
   23c74:	3018      	adds	r0, #24
   23c76:	f001 f83f 	bl	24cf8 <z_add_timeout>
   23c7a:	e7f9      	b.n	23c70 <schedule_new_thread+0xc>
   23c7c:	0002c57f 	.word	0x0002c57f

00023c80 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   23c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23c84:	b085      	sub	sp, #20
   23c86:	4604      	mov	r4, r0
   23c88:	460f      	mov	r7, r1
   23c8a:	4615      	mov	r5, r2
   23c8c:	461e      	mov	r6, r3
   23c8e:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   23c92:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   23c96:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   23c9a:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   23c9e:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   23ca2:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   23ca4:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   23ca6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   23ca8:	2204      	movs	r2, #4
   23caa:	9911      	ldr	r1, [sp, #68]	; 0x44
   23cac:	f008 f92d 	bl	2bf0a <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   23cb0:	462a      	mov	r2, r5
   23cb2:	4639      	mov	r1, r7
   23cb4:	4620      	mov	r0, r4
   23cb6:	f008 f909 	bl	2becc <setup_thread_stack>
   23cba:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   23cbc:	f8cd 8008 	str.w	r8, [sp, #8]
   23cc0:	f8cd 9004 	str.w	r9, [sp, #4]
   23cc4:	f8cd a000 	str.w	sl, [sp]
   23cc8:	4633      	mov	r3, r6
   23cca:	4602      	mov	r2, r0
   23ccc:	4639      	mov	r1, r7
   23cce:	4620      	mov	r0, r4
   23cd0:	f7f1 fe62 	bl	15998 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   23cd4:	2300      	movs	r3, #0
   23cd6:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   23cd8:	6666      	str	r6, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
   23cda:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   23cde:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   23ce2:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	__asm__ volatile(
   23ce6:	f04f 0340 	mov.w	r3, #64	; 0x40
   23cea:	f3ef 8211 	mrs	r2, BASEPRI
   23cee:	f383 8812 	msr	BASEPRI_MAX, r3
   23cf2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   23cf6:	4b13      	ldr	r3, [pc, #76]	; (23d44 <z_setup_new_thread+0xc4>)
   23cf8:	6a99      	ldr	r1, [r3, #40]	; 0x28
   23cfa:	6761      	str	r1, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   23cfc:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
   23cfe:	f382 8811 	msr	BASEPRI, r2
   23d02:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   23d06:	f1bb 0f00 	cmp.w	fp, #0
   23d0a:	d013      	beq.n	23d34 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
   23d0c:	221f      	movs	r2, #31
   23d0e:	4659      	mov	r1, fp
   23d10:	f104 0078 	add.w	r0, r4, #120	; 0x78
   23d14:	f003 fb90 	bl	27438 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   23d18:	2300      	movs	r3, #0
   23d1a:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   23d1e:	4b09      	ldr	r3, [pc, #36]	; (23d44 <z_setup_new_thread+0xc4>)
   23d20:	689b      	ldr	r3, [r3, #8]
   23d22:	b15b      	cbz	r3, 23d3c <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   23d24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   23d28:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
   23d2c:	4628      	mov	r0, r5
   23d2e:	b005      	add	sp, #20
   23d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   23d34:	2300      	movs	r3, #0
   23d36:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   23d3a:	e7f0      	b.n	23d1e <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   23d3c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
   23d40:	e7f4      	b.n	23d2c <z_setup_new_thread+0xac>
   23d42:	bf00      	nop
   23d44:	20008e80 	.word	0x20008e80

00023d48 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   23d48:	b530      	push	{r4, r5, lr}
   23d4a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   23d4c:	4c21      	ldr	r4, [pc, #132]	; (23dd4 <z_init_static_threads+0x8c>)
   23d4e:	e014      	b.n	23d7a <z_init_static_threads+0x32>
		z_setup_new_thread(
   23d50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   23d52:	9305      	str	r3, [sp, #20]
   23d54:	6a23      	ldr	r3, [r4, #32]
   23d56:	9304      	str	r3, [sp, #16]
   23d58:	69e3      	ldr	r3, [r4, #28]
   23d5a:	9303      	str	r3, [sp, #12]
   23d5c:	69a3      	ldr	r3, [r4, #24]
   23d5e:	9302      	str	r3, [sp, #8]
   23d60:	6963      	ldr	r3, [r4, #20]
   23d62:	9301      	str	r3, [sp, #4]
   23d64:	6923      	ldr	r3, [r4, #16]
   23d66:	9300      	str	r3, [sp, #0]
   23d68:	68e3      	ldr	r3, [r4, #12]
   23d6a:	68a2      	ldr	r2, [r4, #8]
   23d6c:	6861      	ldr	r1, [r4, #4]
   23d6e:	6820      	ldr	r0, [r4, #0]
   23d70:	f7ff ff86 	bl	23c80 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   23d74:	6823      	ldr	r3, [r4, #0]
   23d76:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   23d78:	3430      	adds	r4, #48	; 0x30
   23d7a:	4b17      	ldr	r3, [pc, #92]	; (23dd8 <z_init_static_threads+0x90>)
   23d7c:	429c      	cmp	r4, r3
   23d7e:	d3e7      	bcc.n	23d50 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   23d80:	f000 fbb4 	bl	244ec <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   23d84:	4c13      	ldr	r4, [pc, #76]	; (23dd4 <z_init_static_threads+0x8c>)
   23d86:	e000      	b.n	23d8a <z_init_static_threads+0x42>
   23d88:	3430      	adds	r4, #48	; 0x30
   23d8a:	4b13      	ldr	r3, [pc, #76]	; (23dd8 <z_init_static_threads+0x90>)
   23d8c:	429c      	cmp	r4, r3
   23d8e:	d21c      	bcs.n	23dca <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   23d90:	6a60      	ldr	r0, [r4, #36]	; 0x24
   23d92:	f1b0 3fff 	cmp.w	r0, #4294967295
   23d96:	d0f7      	beq.n	23d88 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
   23d98:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   23d9a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   23d9e:	17c1      	asrs	r1, r0, #31
   23da0:	03c9      	lsls	r1, r1, #15
   23da2:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   23da6:	03c0      	lsls	r0, r0, #15
   23da8:	f240 33e7 	movw	r3, #999	; 0x3e7
   23dac:	18c0      	adds	r0, r0, r3
   23dae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23db2:	f04f 0300 	mov.w	r3, #0
   23db6:	f141 0100 	adc.w	r1, r1, #0
   23dba:	f7dc f9a1 	bl	100 <__aeabi_uldivmod>
   23dbe:	4602      	mov	r2, r0
   23dc0:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   23dc2:	4628      	mov	r0, r5
   23dc4:	f7ff ff4e 	bl	23c64 <schedule_new_thread>
   23dc8:	e7de      	b.n	23d88 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
   23dca:	f000 fd91 	bl	248f0 <k_sched_unlock>
}
   23dce:	b007      	add	sp, #28
   23dd0:	bd30      	pop	{r4, r5, pc}
   23dd2:	bf00      	nop
   23dd4:	0002d000 	.word	0x0002d000
   23dd8:	0002d000 	.word	0x0002d000

00023ddc <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   23ddc:	b508      	push	{r3, lr}
   23dde:	e001      	b.n	23de4 <idle+0x8>
	arch_cpu_idle();
   23de0:	f7f1 fbd0 	bl	15584 <arch_cpu_idle>
	__asm__ volatile(
   23de4:	f04f 0240 	mov.w	r2, #64	; 0x40
   23de8:	f3ef 8311 	mrs	r3, BASEPRI
   23dec:	f382 8812 	msr	BASEPRI_MAX, r2
   23df0:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   23df4:	f008 fcf5 	bl	2c7e2 <z_get_next_timeout_expiry>
   23df8:	4b05      	ldr	r3, [pc, #20]	; (23e10 <idle+0x34>)
   23dfa:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
   23dfc:	4b05      	ldr	r3, [pc, #20]	; (23e14 <idle+0x38>)
   23dfe:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   23e00:	2b00      	cmp	r3, #0
   23e02:	d0ed      	beq.n	23de0 <idle+0x4>
   23e04:	f7f1 fa26 	bl	15254 <pm_system_suspend>
   23e08:	2800      	cmp	r0, #0
   23e0a:	d1eb      	bne.n	23de4 <idle+0x8>
   23e0c:	e7e8      	b.n	23de0 <idle+0x4>
   23e0e:	bf00      	nop
   23e10:	20008e80 	.word	0x20008e80
   23e14:	20008ed3 	.word	0x20008ed3

00023e18 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   23e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23e1c:	b082      	sub	sp, #8
   23e1e:	4604      	mov	r4, r0
   23e20:	461e      	mov	r6, r3
   23e22:	f04f 0340 	mov.w	r3, #64	; 0x40
   23e26:	f3ef 8511 	mrs	r5, BASEPRI
   23e2a:	f383 8812 	msr	BASEPRI_MAX, r3
   23e2e:	f3bf 8f6f 	isb	sy
   23e32:	462b      	mov	r3, r5

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   23e34:	68c1      	ldr	r1, [r0, #12]
   23e36:	b999      	cbnz	r1, 23e60 <z_impl_k_mutex_lock+0x48>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   23e38:	2900      	cmp	r1, #0
   23e3a:	d151      	bne.n	23ee0 <z_impl_k_mutex_lock+0xc8>
   23e3c:	4a36      	ldr	r2, [pc, #216]	; (23f18 <z_impl_k_mutex_lock+0x100>)
   23e3e:	6892      	ldr	r2, [r2, #8]
   23e40:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   23e44:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   23e46:	3101      	adds	r1, #1
   23e48:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   23e4a:	4a33      	ldr	r2, [pc, #204]	; (23f18 <z_impl_k_mutex_lock+0x100>)
   23e4c:	6892      	ldr	r2, [r2, #8]
   23e4e:	60a2      	str	r2, [r4, #8]
	__asm__ volatile(
   23e50:	f383 8811 	msr	BASEPRI, r3
   23e54:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   23e58:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   23e5a:	b002      	add	sp, #8
   23e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23e60:	4617      	mov	r7, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   23e62:	6880      	ldr	r0, [r0, #8]
   23e64:	4a2c      	ldr	r2, [pc, #176]	; (23f18 <z_impl_k_mutex_lock+0x100>)
   23e66:	6892      	ldr	r2, [r2, #8]
   23e68:	4290      	cmp	r0, r2
   23e6a:	d0e5      	beq.n	23e38 <z_impl_k_mutex_lock+0x20>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   23e6c:	ea56 0107 	orrs.w	r1, r6, r7
   23e70:	d038      	beq.n	23ee4 <z_impl_k_mutex_lock+0xcc>
					    mutex->owner->base.prio);
   23e72:	f990 800e 	ldrsb.w	r8, [r0, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   23e76:	4641      	mov	r1, r8
   23e78:	f992 000e 	ldrsb.w	r0, [r2, #14]
   23e7c:	f008 f878 	bl	2bf70 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   23e80:	4580      	cmp	r8, r0
   23e82:	dc36      	bgt.n	23ef2 <z_impl_k_mutex_lock+0xda>
	bool resched = false;
   23e84:	f04f 0800 	mov.w	r8, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   23e88:	9700      	str	r7, [sp, #0]
   23e8a:	9601      	str	r6, [sp, #4]
   23e8c:	4622      	mov	r2, r4
   23e8e:	4629      	mov	r1, r5
   23e90:	4822      	ldr	r0, [pc, #136]	; (23f1c <z_impl_k_mutex_lock+0x104>)
   23e92:	f000 fc79 	bl	24788 <z_pend_curr>
	if (got_mutex == 0) {
   23e96:	2800      	cmp	r0, #0
   23e98:	d0df      	beq.n	23e5a <z_impl_k_mutex_lock+0x42>
	__asm__ volatile(
   23e9a:	f04f 0340 	mov.w	r3, #64	; 0x40
   23e9e:	f3ef 8511 	mrs	r5, BASEPRI
   23ea2:	f383 8812 	msr	BASEPRI_MAX, r3
   23ea6:	f3bf 8f6f 	isb	sy
   23eaa:	462e      	mov	r6, r5
	if (likely(mutex->owner != NULL)) {
   23eac:	68a3      	ldr	r3, [r4, #8]
   23eae:	b343      	cbz	r3, 23f02 <z_impl_k_mutex_lock+0xea>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   23eb0:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23eb2:	429c      	cmp	r4, r3
   23eb4:	d023      	beq.n	23efe <z_impl_k_mutex_lock+0xe6>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   23eb6:	b313      	cbz	r3, 23efe <z_impl_k_mutex_lock+0xe6>
   23eb8:	6921      	ldr	r1, [r4, #16]
   23eba:	f993 000e 	ldrsb.w	r0, [r3, #14]
   23ebe:	f008 f857 	bl	2bf70 <new_prio_for_inheritance>
   23ec2:	4601      	mov	r1, r0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   23ec4:	4620      	mov	r0, r4
   23ec6:	f008 f85e 	bl	2bf86 <adjust_owner_prio>
   23eca:	b9e8      	cbnz	r0, 23f08 <z_impl_k_mutex_lock+0xf0>
   23ecc:	f1b8 0f00 	cmp.w	r8, #0
   23ed0:	d11a      	bne.n	23f08 <z_impl_k_mutex_lock+0xf0>
	__asm__ volatile(
   23ed2:	f386 8811 	msr	BASEPRI, r6
   23ed6:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   23eda:	f06f 000a 	mvn.w	r0, #10
   23ede:	e7bc      	b.n	23e5a <z_impl_k_mutex_lock+0x42>
					_current->base.prio :
   23ee0:	6922      	ldr	r2, [r4, #16]
   23ee2:	e7af      	b.n	23e44 <z_impl_k_mutex_lock+0x2c>
   23ee4:	f385 8811 	msr	BASEPRI, r5
   23ee8:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   23eec:	f06f 000f 	mvn.w	r0, #15
   23ef0:	e7b3      	b.n	23e5a <z_impl_k_mutex_lock+0x42>
		resched = adjust_owner_prio(mutex, new_prio);
   23ef2:	4601      	mov	r1, r0
   23ef4:	4620      	mov	r0, r4
   23ef6:	f008 f846 	bl	2bf86 <adjust_owner_prio>
   23efa:	4680      	mov	r8, r0
   23efc:	e7c4      	b.n	23e88 <z_impl_k_mutex_lock+0x70>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   23efe:	6921      	ldr	r1, [r4, #16]
   23f00:	e7e0      	b.n	23ec4 <z_impl_k_mutex_lock+0xac>
	if (resched) {
   23f02:	f1b8 0f00 	cmp.w	r8, #0
   23f06:	d0e4      	beq.n	23ed2 <z_impl_k_mutex_lock+0xba>
		z_reschedule(&lock, key);
   23f08:	4629      	mov	r1, r5
   23f0a:	4804      	ldr	r0, [pc, #16]	; (23f1c <z_impl_k_mutex_lock+0x104>)
   23f0c:	f000 fad8 	bl	244c0 <z_reschedule>
	return -EAGAIN;
   23f10:	f06f 000a 	mvn.w	r0, #10
   23f14:	e7a1      	b.n	23e5a <z_impl_k_mutex_lock+0x42>
   23f16:	bf00      	nop
   23f18:	20008e80 	.word	0x20008e80
   23f1c:	20008eac 	.word	0x20008eac

00023f20 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   23f20:	6883      	ldr	r3, [r0, #8]
   23f22:	b38b      	cbz	r3, 23f88 <z_impl_k_mutex_unlock+0x68>
{
   23f24:	b570      	push	{r4, r5, r6, lr}
   23f26:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   23f28:	4a1a      	ldr	r2, [pc, #104]	; (23f94 <z_impl_k_mutex_unlock+0x74>)
   23f2a:	6892      	ldr	r2, [r2, #8]
   23f2c:	4293      	cmp	r3, r2
   23f2e:	d12e      	bne.n	23f8e <z_impl_k_mutex_unlock+0x6e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   23f30:	68c3      	ldr	r3, [r0, #12]
   23f32:	2b01      	cmp	r3, #1
   23f34:	d903      	bls.n	23f3e <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   23f36:	3b01      	subs	r3, #1
   23f38:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   23f3a:	2000      	movs	r0, #0
}
   23f3c:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   23f3e:	f04f 0340 	mov.w	r3, #64	; 0x40
   23f42:	f3ef 8511 	mrs	r5, BASEPRI
   23f46:	f383 8812 	msr	BASEPRI_MAX, r3
   23f4a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   23f4e:	6901      	ldr	r1, [r0, #16]
   23f50:	f008 f819 	bl	2bf86 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   23f54:	4620      	mov	r0, r4
   23f56:	f008 fbab 	bl	2c6b0 <z_unpend_first_thread>
	mutex->owner = new_owner;
   23f5a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   23f5c:	b168      	cbz	r0, 23f7a <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
   23f5e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   23f62:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   23f64:	2400      	movs	r4, #0
   23f66:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   23f6a:	f008 faec 	bl	2c546 <z_ready_thread>
		z_reschedule(&lock, key);
   23f6e:	4629      	mov	r1, r5
   23f70:	4809      	ldr	r0, [pc, #36]	; (23f98 <z_impl_k_mutex_unlock+0x78>)
   23f72:	f000 faa5 	bl	244c0 <z_reschedule>
	return 0;
   23f76:	4620      	mov	r0, r4
   23f78:	e7e0      	b.n	23f3c <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
   23f7a:	2000      	movs	r0, #0
   23f7c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   23f7e:	f385 8811 	msr	BASEPRI, r5
   23f82:	f3bf 8f6f 	isb	sy
   23f86:	e7d9      	b.n	23f3c <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
   23f88:	f06f 0015 	mvn.w	r0, #21
}
   23f8c:	4770      	bx	lr
		return -EPERM;
   23f8e:	f04f 30ff 	mov.w	r0, #4294967295
   23f92:	e7d3      	b.n	23f3c <z_impl_k_mutex_unlock+0x1c>
   23f94:	20008e80 	.word	0x20008e80
   23f98:	20008eac 	.word	0x20008eac

00023f9c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   23f9c:	b510      	push	{r4, lr}
   23f9e:	b082      	sub	sp, #8
   23fa0:	4684      	mov	ip, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   23fa2:	4686      	mov	lr, r0
	__asm__ volatile(
   23fa4:	f04f 0040 	mov.w	r0, #64	; 0x40
   23fa8:	f3ef 8111 	mrs	r1, BASEPRI
   23fac:	f380 8812 	msr	BASEPRI_MAX, r0
   23fb0:	f3bf 8f6f 	isb	sy
   23fb4:	460c      	mov	r4, r1
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   23fb6:	f85e 0b08 	ldr.w	r0, [lr], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   23fba:	b1a0      	cbz	r0, 23fe6 <z_impl_k_queue_get+0x4a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   23fbc:	6803      	ldr	r3, [r0, #0]
   23fbe:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   23fc2:	f8cc 3000 	str.w	r3, [ip]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   23fc6:	f8dc 2004 	ldr.w	r2, [ip, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   23fca:	4290      	cmp	r0, r2
   23fcc:	d008      	beq.n	23fe0 <z_impl_k_queue_get+0x44>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   23fce:	2101      	movs	r1, #1
   23fd0:	f008 f86f 	bl	2c0b2 <z_queue_node_peek>
	__asm__ volatile(
   23fd4:	f384 8811 	msr	BASEPRI, r4
   23fd8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   23fdc:	b002      	add	sp, #8
   23fde:	bd10      	pop	{r4, pc}
	list->tail = node;
   23fe0:	f8cc 3004 	str.w	r3, [ip, #4]
}
   23fe4:	e7f3      	b.n	23fce <z_impl_k_queue_get+0x32>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23fe6:	ea53 0002 	orrs.w	r0, r3, r2
   23fea:	d00a      	beq.n	24002 <z_impl_k_queue_get+0x66>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   23fec:	9200      	str	r2, [sp, #0]
   23fee:	9301      	str	r3, [sp, #4]
   23ff0:	4672      	mov	r2, lr
   23ff2:	4670      	mov	r0, lr
   23ff4:	f000 fbc8 	bl	24788 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   23ff8:	b948      	cbnz	r0, 2400e <z_impl_k_queue_get+0x72>
   23ffa:	4b06      	ldr	r3, [pc, #24]	; (24014 <z_impl_k_queue_get+0x78>)
   23ffc:	689b      	ldr	r3, [r3, #8]
   23ffe:	6958      	ldr	r0, [r3, #20]
   24000:	e7ec      	b.n	23fdc <z_impl_k_queue_get+0x40>
   24002:	f381 8811 	msr	BASEPRI, r1
   24006:	f3bf 8f6f 	isb	sy
		return NULL;
   2400a:	2000      	movs	r0, #0
   2400c:	e7e6      	b.n	23fdc <z_impl_k_queue_get+0x40>
	return (ret != 0) ? NULL : _current->base.swap_data;
   2400e:	2000      	movs	r0, #0
   24010:	e7e4      	b.n	23fdc <z_impl_k_queue_get+0x40>
   24012:	bf00      	nop
   24014:	20008e80 	.word	0x20008e80

00024018 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   24018:	b538      	push	{r3, r4, r5, lr}
   2401a:	4604      	mov	r4, r0
	__asm__ volatile(
   2401c:	f04f 0340 	mov.w	r3, #64	; 0x40
   24020:	f3ef 8511 	mrs	r5, BASEPRI
   24024:	f383 8812 	msr	BASEPRI_MAX, r3
   24028:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   2402c:	f008 fb40 	bl	2c6b0 <z_unpend_first_thread>

	if (thread != NULL) {
   24030:	b148      	cbz	r0, 24046 <z_impl_k_sem_give+0x2e>
   24032:	2200      	movs	r2, #0
   24034:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   24038:	f008 fa85 	bl	2c546 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   2403c:	4629      	mov	r1, r5
   2403e:	4809      	ldr	r0, [pc, #36]	; (24064 <z_impl_k_sem_give+0x4c>)
   24040:	f000 fa3e 	bl	244c0 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   24044:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   24046:	68a3      	ldr	r3, [r4, #8]
   24048:	68e2      	ldr	r2, [r4, #12]
   2404a:	4293      	cmp	r3, r2
   2404c:	d008      	beq.n	24060 <z_impl_k_sem_give+0x48>
   2404e:	2201      	movs	r2, #1
   24050:	4413      	add	r3, r2
   24052:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   24054:	2102      	movs	r1, #2
   24056:	f104 0010 	add.w	r0, r4, #16
   2405a:	f008 fe06 	bl	2cc6a <z_handle_obj_poll_events>
}
   2405e:	e7ed      	b.n	2403c <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   24060:	2200      	movs	r2, #0
   24062:	e7f5      	b.n	24050 <z_impl_k_sem_give+0x38>
   24064:	20008eac 	.word	0x20008eac

00024068 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   24068:	b510      	push	{r4, lr}
   2406a:	b082      	sub	sp, #8
   2406c:	f04f 0440 	mov.w	r4, #64	; 0x40
   24070:	f3ef 8111 	mrs	r1, BASEPRI
   24074:	f384 8812 	msr	BASEPRI_MAX, r4
   24078:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   2407c:	6884      	ldr	r4, [r0, #8]
   2407e:	b144      	cbz	r4, 24092 <z_impl_k_sem_take+0x2a>
		sem->count--;
   24080:	3c01      	subs	r4, #1
   24082:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   24084:	f381 8811 	msr	BASEPRI, r1
   24088:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   2408c:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   2408e:	b002      	add	sp, #8
   24090:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24092:	ea53 0402 	orrs.w	r4, r3, r2
   24096:	d006      	beq.n	240a6 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   24098:	9200      	str	r2, [sp, #0]
   2409a:	9301      	str	r3, [sp, #4]
   2409c:	4602      	mov	r2, r0
   2409e:	4805      	ldr	r0, [pc, #20]	; (240b4 <z_impl_k_sem_take+0x4c>)
   240a0:	f000 fb72 	bl	24788 <z_pend_curr>
	return ret;
   240a4:	e7f3      	b.n	2408e <z_impl_k_sem_take+0x26>
   240a6:	f381 8811 	msr	BASEPRI, r1
   240aa:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   240ae:	f06f 000f 	mvn.w	r0, #15
   240b2:	e7ec      	b.n	2408e <z_impl_k_sem_take+0x26>
   240b4:	20008eac 	.word	0x20008eac

000240b8 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   240b8:	b510      	push	{r4, lr}
   240ba:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   240bc:	4b08      	ldr	r3, [pc, #32]	; (240e0 <k_sys_work_q_init+0x28>)
   240be:	9302      	str	r3, [sp, #8]
   240c0:	2400      	movs	r4, #0
   240c2:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   240c6:	ab02      	add	r3, sp, #8
   240c8:	9300      	str	r3, [sp, #0]
   240ca:	f04f 33ff 	mov.w	r3, #4294967295
   240ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
   240d2:	4904      	ldr	r1, [pc, #16]	; (240e4 <k_sys_work_q_init+0x2c>)
   240d4:	4804      	ldr	r0, [pc, #16]	; (240e8 <k_sys_work_q_init+0x30>)
   240d6:	f000 f929 	bl	2432c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   240da:	4620      	mov	r0, r4
   240dc:	b004      	add	sp, #16
   240de:	bd10      	pop	{r4, pc}
   240e0:	0002ffd0 	.word	0x0002ffd0
   240e4:	2000bac0 	.word	0x2000bac0
   240e8:	200078b8 	.word	0x200078b8

000240ec <queue_submit_locked>:
 * @retval -EBUSY if the submission was rejected (draining, plugged)
 */
static inline int queue_submit_locked(struct k_work_q *queue,
				      struct k_work *work)
{
	if (queue == NULL) {
   240ec:	b370      	cbz	r0, 2414c <queue_submit_locked+0x60>
{
   240ee:	b538      	push	{r3, r4, r5, lr}
   240f0:	460d      	mov	r5, r1
   240f2:	4604      	mov	r4, r0
		return -EINVAL;
	}

	int ret = -EBUSY;
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   240f4:	4b1b      	ldr	r3, [pc, #108]	; (24164 <queue_submit_locked+0x78>)
   240f6:	689b      	ldr	r3, [r3, #8]
   240f8:	4283      	cmp	r3, r0
   240fa:	d01b      	beq.n	24134 <queue_submit_locked+0x48>
   240fc:	2300      	movs	r3, #0
   240fe:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   24100:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   24104:	f3c3 0180 	ubfx	r1, r3, #2, #1
   24108:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	 * * -ENODEV if the queue isn't running.
	 * * -EBUSY if draining and not chained
	 * * -EBUSY if plugged and not draining
	 * * otherwise OK
	 */
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2410c:	f013 0f01 	tst.w	r3, #1
   24110:	d01f      	beq.n	24152 <queue_submit_locked+0x66>
		ret = -ENODEV;
	} else if (draining && !chained) {
   24112:	b101      	cbz	r1, 24116 <queue_submit_locked+0x2a>
   24114:	b302      	cbz	r2, 24158 <queue_submit_locked+0x6c>
		ret = -EBUSY;
	} else if (plugged && !draining) {
   24116:	b100      	cbz	r0, 2411a <queue_submit_locked+0x2e>
   24118:	b309      	cbz	r1, 2415e <queue_submit_locked+0x72>
	parent->next = child;
   2411a:	2300      	movs	r3, #0
   2411c:	602b      	str	r3, [r5, #0]
	return list->tail;
   2411e:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
   24122:	b173      	cbz	r3, 24142 <queue_submit_locked+0x56>
	parent->next = child;
   24124:	601d      	str	r5, [r3, #0]
	list->tail = node;
   24126:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
		ret = -EBUSY;
	} else {
		sys_slist_append(&queue->pending, &work->node);
		ret = 1;
		(void)notify_queue_locked(queue);
   2412a:	4620      	mov	r0, r4
   2412c:	f008 f84b 	bl	2c1c6 <notify_queue_locked>
		ret = 1;
   24130:	2001      	movs	r0, #1
	}

	return ret;
}
   24132:	bd38      	pop	{r3, r4, r5, pc}
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   24134:	f007 fedd 	bl	2bef2 <k_is_in_isr>
   24138:	b908      	cbnz	r0, 2413e <queue_submit_locked+0x52>
   2413a:	2301      	movs	r3, #1
   2413c:	e7df      	b.n	240fe <queue_submit_locked+0x12>
   2413e:	2300      	movs	r3, #0
   24140:	e7dd      	b.n	240fe <queue_submit_locked+0x12>
   24142:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
	list->head = node;
   24146:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
}
   2414a:	e7ee      	b.n	2412a <queue_submit_locked+0x3e>
		return -EINVAL;
   2414c:	f06f 0015 	mvn.w	r0, #21
}
   24150:	4770      	bx	lr
		ret = -ENODEV;
   24152:	f06f 0012 	mvn.w	r0, #18
   24156:	e7ec      	b.n	24132 <queue_submit_locked+0x46>
		ret = -EBUSY;
   24158:	f06f 000f 	mvn.w	r0, #15
   2415c:	e7e9      	b.n	24132 <queue_submit_locked+0x46>
		ret = -EBUSY;
   2415e:	f06f 000f 	mvn.w	r0, #15
   24162:	e7e6      	b.n	24132 <queue_submit_locked+0x46>
   24164:	20008e80 	.word	0x20008e80

00024168 <finalize_cancel_locked>:
{
   24168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2416a:	4606      	mov	r6, r0
	*flagp &= ~BIT(bit);
   2416c:	68c3      	ldr	r3, [r0, #12]
   2416e:	f023 0302 	bic.w	r3, r3, #2
   24172:	60c3      	str	r3, [r0, #12]
	return list->head;
   24174:	4b13      	ldr	r3, [pc, #76]	; (241c4 <finalize_cancel_locked+0x5c>)
   24176:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   24178:	b185      	cbz	r5, 2419c <finalize_cancel_locked+0x34>
	return node->next;
   2417a:	682c      	ldr	r4, [r5, #0]
   2417c:	b104      	cbz	r4, 24180 <finalize_cancel_locked+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2417e:	b10d      	cbz	r5, 24184 <finalize_cancel_locked+0x1c>
   24180:	2700      	movs	r7, #0
   24182:	e010      	b.n	241a6 <finalize_cancel_locked+0x3e>
   24184:	462c      	mov	r4, r5
   24186:	e7fb      	b.n	24180 <finalize_cancel_locked+0x18>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   24188:	462a      	mov	r2, r5
   2418a:	4639      	mov	r1, r7
   2418c:	480d      	ldr	r0, [pc, #52]	; (241c4 <finalize_cancel_locked+0x5c>)
   2418e:	f007 ffd5 	bl	2c13c <sys_slist_remove>
			k_sem_give(&wc->sem);
   24192:	f105 0008 	add.w	r0, r5, #8
	z_impl_k_sem_give(sem);
   24196:	f7ff ff3f 	bl	24018 <z_impl_k_sem_give>
}
   2419a:	e009      	b.n	241b0 <finalize_cancel_locked+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2419c:	462c      	mov	r4, r5
   2419e:	e7ef      	b.n	24180 <finalize_cancel_locked+0x18>
   241a0:	4623      	mov	r3, r4
   241a2:	4625      	mov	r5, r4
   241a4:	461c      	mov	r4, r3
   241a6:	b165      	cbz	r5, 241c2 <finalize_cancel_locked+0x5a>
		if (wc->work == work) {
   241a8:	686b      	ldr	r3, [r5, #4]
   241aa:	42b3      	cmp	r3, r6
   241ac:	d0ec      	beq.n	24188 <finalize_cancel_locked+0x20>
			prev = &wc->node;
   241ae:	462f      	mov	r7, r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   241b0:	2c00      	cmp	r4, #0
   241b2:	d0f5      	beq.n	241a0 <finalize_cancel_locked+0x38>
	return node->next;
   241b4:	6823      	ldr	r3, [r4, #0]
   241b6:	2b00      	cmp	r3, #0
   241b8:	d0f3      	beq.n	241a2 <finalize_cancel_locked+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   241ba:	2c00      	cmp	r4, #0
   241bc:	d1f1      	bne.n	241a2 <finalize_cancel_locked+0x3a>
   241be:	4623      	mov	r3, r4
   241c0:	e7ef      	b.n	241a2 <finalize_cancel_locked+0x3a>
}
   241c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   241c4:	20008eac 	.word	0x20008eac

000241c8 <init_work_cancel>:
{
   241c8:	b538      	push	{r3, r4, r5, lr}
   241ca:	4604      	mov	r4, r0
   241cc:	460d      	mov	r5, r1
	k_sem_init(&canceler->sem, 0, 1);
   241ce:	3008      	adds	r0, #8
	return z_impl_k_sem_init(sem, initial_count, limit);
   241d0:	2201      	movs	r2, #1
   241d2:	2100      	movs	r1, #0
   241d4:	f007 ff9f 	bl	2c116 <z_impl_k_sem_init>
	canceler->work = work;
   241d8:	6065      	str	r5, [r4, #4]
	parent->next = child;
   241da:	2300      	movs	r3, #0
   241dc:	6023      	str	r3, [r4, #0]
	return list->tail;
   241de:	4b05      	ldr	r3, [pc, #20]	; (241f4 <init_work_cancel+0x2c>)
   241e0:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   241e2:	b11b      	cbz	r3, 241ec <init_work_cancel+0x24>
	parent->next = child;
   241e4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   241e6:	4b03      	ldr	r3, [pc, #12]	; (241f4 <init_work_cancel+0x2c>)
   241e8:	605c      	str	r4, [r3, #4]
}
   241ea:	bd38      	pop	{r3, r4, r5, pc}
   241ec:	4b01      	ldr	r3, [pc, #4]	; (241f4 <init_work_cancel+0x2c>)
   241ee:	605c      	str	r4, [r3, #4]
	list->head = node;
   241f0:	601c      	str	r4, [r3, #0]
}
   241f2:	e7fa      	b.n	241ea <init_work_cancel+0x22>
   241f4:	20008eac 	.word	0x20008eac

000241f8 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   241f8:	b570      	push	{r4, r5, r6, lr}
   241fa:	b084      	sub	sp, #16
   241fc:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   241fe:	e016      	b.n	2422e <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
   24200:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   24204:	f023 0204 	bic.w	r2, r3, #4
   24208:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   2420c:	f013 0f04 	tst.w	r3, #4
   24210:	d15a      	bne.n	242c8 <work_queue_main+0xd0>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   24212:	2300      	movs	r3, #0
   24214:	9302      	str	r3, [sp, #8]
   24216:	f04f 32ff 	mov.w	r2, #4294967295
   2421a:	f04f 33ff 	mov.w	r3, #4294967295
   2421e:	e9cd 2300 	strd	r2, r3, [sp]
   24222:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
   24226:	4631      	mov	r1, r6
   24228:	482e      	ldr	r0, [pc, #184]	; (242e4 <work_queue_main+0xec>)
   2422a:	f000 fcef 	bl	24c0c <z_sched_wait>
	__asm__ volatile(
   2422e:	f04f 0340 	mov.w	r3, #64	; 0x40
   24232:	f3ef 8611 	mrs	r6, BASEPRI
   24236:	f383 8812 	msr	BASEPRI_MAX, r3
   2423a:	f3bf 8f6f 	isb	sy
   2423e:	4632      	mov	r2, r6
	return list->head;
   24240:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
   24244:	2c00      	cmp	r4, #0
   24246:	d0db      	beq.n	24200 <work_queue_main+0x8>
	return node->next;
   24248:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   2424a:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	return list->tail;
   2424e:	f8d5 10bc 	ldr.w	r1, [r5, #188]	; 0xbc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24252:	428c      	cmp	r4, r1
   24254:	d035      	beq.n	242c2 <work_queue_main+0xca>
	*flagp |= BIT(bit);
   24256:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   2425a:	f043 0302 	orr.w	r3, r3, #2
   2425e:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
   24262:	68e3      	ldr	r3, [r4, #12]
   24264:	f043 0101 	orr.w	r1, r3, #1
   24268:	60e1      	str	r1, [r4, #12]
	*flagp &= ~BIT(bit);
   2426a:	f023 0304 	bic.w	r3, r3, #4
   2426e:	f043 0301 	orr.w	r3, r3, #1
   24272:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   24274:	6863      	ldr	r3, [r4, #4]
	__asm__ volatile(
   24276:	f382 8811 	msr	BASEPRI, r2
   2427a:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   2427e:	4620      	mov	r0, r4
   24280:	4798      	blx	r3
	__asm__ volatile(
   24282:	f04f 0340 	mov.w	r3, #64	; 0x40
   24286:	f3ef 8611 	mrs	r6, BASEPRI
   2428a:	f383 8812 	msr	BASEPRI_MAX, r3
   2428e:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   24292:	68e3      	ldr	r3, [r4, #12]
   24294:	f023 0301 	bic.w	r3, r3, #1
   24298:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2429a:	f013 0f02 	tst.w	r3, #2
   2429e:	d11d      	bne.n	242dc <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
   242a0:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   242a4:	f023 0302 	bic.w	r3, r3, #2
   242a8:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
   242ac:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
   242b0:	f386 8811 	msr	BASEPRI, r6
   242b4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   242b8:	2b00      	cmp	r3, #0
   242ba:	d1b8      	bne.n	2422e <work_queue_main+0x36>
	z_impl_k_yield();
   242bc:	f000 fb76 	bl	249ac <z_impl_k_yield>
}
   242c0:	e7b5      	b.n	2422e <work_queue_main+0x36>
	list->tail = node;
   242c2:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
		if (node != NULL) {
   242c6:	e7c6      	b.n	24256 <work_queue_main+0x5e>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   242c8:	f105 04c8 	add.w	r4, r5, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   242cc:	2200      	movs	r2, #0
   242ce:	2101      	movs	r1, #1
   242d0:	4620      	mov	r0, r4
   242d2:	f008 fa23 	bl	2c71c <z_sched_wake>
   242d6:	2800      	cmp	r0, #0
   242d8:	d1f8      	bne.n	242cc <work_queue_main+0xd4>
   242da:	e79a      	b.n	24212 <work_queue_main+0x1a>
			finalize_cancel_locked(work);
   242dc:	4620      	mov	r0, r4
   242de:	f7ff ff43 	bl	24168 <finalize_cancel_locked>
   242e2:	e7dd      	b.n	242a0 <work_queue_main+0xa8>
   242e4:	20008eb4 	.word	0x20008eb4

000242e8 <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   242e8:	b508      	push	{r3, lr}
   242ea:	4684      	mov	ip, r0
   242ec:	4608      	mov	r0, r1
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   242ee:	ea53 0102 	orrs.w	r1, r3, r2
   242f2:	d00c      	beq.n	2430e <schedule_for_queue_locked+0x26>
	*flagp |= BIT(bit);
   242f4:	68c1      	ldr	r1, [r0, #12]
   242f6:	f041 0108 	orr.w	r1, r1, #8
   242fa:	60c1      	str	r1, [r0, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
   242fc:	f8dc 1000 	ldr.w	r1, [ip]
   24300:	6281      	str	r1, [r0, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   24302:	4905      	ldr	r1, [pc, #20]	; (24318 <schedule_for_queue_locked+0x30>)
   24304:	3010      	adds	r0, #16
   24306:	f000 fcf7 	bl	24cf8 <z_add_timeout>

	return ret;
   2430a:	2001      	movs	r0, #1
}
   2430c:	bd08      	pop	{r3, pc}
		return submit_to_queue_locked(work, queuep);
   2430e:	4661      	mov	r1, ip
   24310:	f007 ff63 	bl	2c1da <submit_to_queue_locked>
   24314:	e7fa      	b.n	2430c <schedule_for_queue_locked+0x24>
   24316:	bf00      	nop
   24318:	0002c23b 	.word	0x0002c23b

0002431c <k_work_submit>:
{
   2431c:	b508      	push	{r3, lr}
   2431e:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   24320:	4801      	ldr	r0, [pc, #4]	; (24328 <k_work_submit+0xc>)
   24322:	f007 fffb 	bl	2c31c <k_work_submit_to_queue>
}
   24326:	bd08      	pop	{r3, pc}
   24328:	200078b8 	.word	0x200078b8

0002432c <k_work_queue_start>:
{
   2432c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2432e:	b089      	sub	sp, #36	; 0x24
   24330:	4604      	mov	r4, r0
   24332:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
   24334:	2000      	movs	r0, #0
   24336:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = NULL;
   2433a:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   2433e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
   24342:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
   24346:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
   2434a:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
	list->head = (sys_dnode_t *)list;
   2434e:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	list->tail = (sys_dnode_t *)list;
   24352:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	if ((cfg != NULL) && cfg->no_yield) {
   24356:	b1fd      	cbz	r5, 24398 <k_work_queue_start+0x6c>
   24358:	7928      	ldrb	r0, [r5, #4]
   2435a:	b9f8      	cbnz	r0, 2439c <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   2435c:	2001      	movs	r0, #1
	*flagp = flags;
   2435e:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   24362:	f04f 36ff 	mov.w	r6, #4294967295
   24366:	f04f 37ff 	mov.w	r7, #4294967295
   2436a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   2436e:	2000      	movs	r0, #0
   24370:	9004      	str	r0, [sp, #16]
   24372:	9303      	str	r3, [sp, #12]
   24374:	9002      	str	r0, [sp, #8]
   24376:	9001      	str	r0, [sp, #4]
   24378:	9400      	str	r4, [sp, #0]
   2437a:	4b0a      	ldr	r3, [pc, #40]	; (243a4 <k_work_queue_start+0x78>)
   2437c:	4620      	mov	r0, r4
   2437e:	f007 fdcf 	bl	2bf20 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   24382:	b125      	cbz	r5, 2438e <k_work_queue_start+0x62>
   24384:	6829      	ldr	r1, [r5, #0]
   24386:	b111      	cbz	r1, 2438e <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
   24388:	4620      	mov	r0, r4
   2438a:	f7ff fc59 	bl	23c40 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   2438e:	4620      	mov	r0, r4
   24390:	f007 fdb7 	bl	2bf02 <z_impl_k_thread_start>
}
   24394:	b009      	add	sp, #36	; 0x24
   24396:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
   24398:	2001      	movs	r0, #1
   2439a:	e7e0      	b.n	2435e <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
   2439c:	f240 1001 	movw	r0, #257	; 0x101
   243a0:	e7dd      	b.n	2435e <k_work_queue_start+0x32>
   243a2:	bf00      	nop
   243a4:	000241f9 	.word	0x000241f9

000243a8 <k_work_schedule>:
	return ret;
}

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   243a8:	b508      	push	{r3, lr}
   243aa:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   243ac:	4801      	ldr	r0, [pc, #4]	; (243b4 <k_work_schedule+0xc>)
   243ae:	f007 ffe1 	bl	2c374 <k_work_schedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
   243b2:	bd08      	pop	{r3, pc}
   243b4:	200078b8 	.word	0x200078b8

000243b8 <k_work_reschedule>:
	return ret;
}

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   243b8:	b508      	push	{r3, lr}
   243ba:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   243bc:	4801      	ldr	r0, [pc, #4]	; (243c4 <k_work_reschedule+0xc>)
   243be:	f007 fff3 	bl	2c3a8 <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
   243c2:	bd08      	pop	{r3, pc}
   243c4:	200078b8 	.word	0x200078b8

000243c8 <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   243c8:	89c3      	ldrh	r3, [r0, #14]
static inline bool sliceable(struct k_thread *thread)
{
	bool ret = is_preempt(thread)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_idle_thread_object(thread);
   243ca:	2b7f      	cmp	r3, #127	; 0x7f
   243cc:	d80e      	bhi.n	243ec <sliceable+0x24>
	uint8_t state = thread->base.thread_state;
   243ce:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
   243d0:	f013 0f1f 	tst.w	r3, #31
   243d4:	d10c      	bne.n	243f0 <sliceable+0x28>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   243d6:	f990 200e 	ldrsb.w	r2, [r0, #14]
   243da:	4b08      	ldr	r3, [pc, #32]	; (243fc <sliceable+0x34>)
   243dc:	681b      	ldr	r3, [r3, #0]
   243de:	429a      	cmp	r2, r3
   243e0:	db08      	blt.n	243f4 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   243e2:	4b07      	ldr	r3, [pc, #28]	; (24400 <sliceable+0x38>)
   243e4:	4298      	cmp	r0, r3
   243e6:	d007      	beq.n	243f8 <sliceable+0x30>
   243e8:	2001      	movs	r0, #1
   243ea:	4770      	bx	lr
   243ec:	2000      	movs	r0, #0
   243ee:	4770      	bx	lr
   243f0:	2000      	movs	r0, #0
   243f2:	4770      	bx	lr
   243f4:	2000      	movs	r0, #0
   243f6:	4770      	bx	lr
   243f8:	2000      	movs	r0, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   243fa:	4770      	bx	lr
   243fc:	20008eb8 	.word	0x20008eb8
   24400:	20007748 	.word	0x20007748

00024404 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24404:	f1b3 3fff 	cmp.w	r3, #4294967295
   24408:	bf08      	it	eq
   2440a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   2440e:	d100      	bne.n	24412 <add_thread_timeout+0xe>
   24410:	4770      	bx	lr
{
   24412:	b508      	push	{r3, lr}
   24414:	4902      	ldr	r1, [pc, #8]	; (24420 <add_thread_timeout+0x1c>)
   24416:	3018      	adds	r0, #24
   24418:	f000 fc6e 	bl	24cf8 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
   2441c:	bd08      	pop	{r3, pc}
   2441e:	bf00      	nop
   24420:	0002c57f 	.word	0x0002c57f

00024424 <z_reset_time_slice>:
{
   24424:	b510      	push	{r4, lr}
	int ret = slice_ticks;
   24426:	4b07      	ldr	r3, [pc, #28]	; (24444 <z_reset_time_slice+0x20>)
   24428:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
   2442a:	b904      	cbnz	r4, 2442e <z_reset_time_slice+0xa>
}
   2442c:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   2442e:	f7fd f81d 	bl	2146c <sys_clock_elapsed>
   24432:	4404      	add	r4, r0
   24434:	4b04      	ldr	r3, [pc, #16]	; (24448 <z_reset_time_slice+0x24>)
   24436:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   24438:	2100      	movs	r1, #0
   2443a:	4b02      	ldr	r3, [pc, #8]	; (24444 <z_reset_time_slice+0x20>)
   2443c:	6818      	ldr	r0, [r3, #0]
   2443e:	f008 f9e7 	bl	2c810 <z_set_timeout_expiry>
}
   24442:	e7f3      	b.n	2442c <z_reset_time_slice+0x8>
   24444:	20008ebc 	.word	0x20008ebc
   24448:	20008e80 	.word	0x20008e80

0002444c <k_sched_time_slice_set>:
{
   2444c:	b570      	push	{r4, r5, r6, lr}
   2444e:	4604      	mov	r4, r0
   24450:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
   24452:	2300      	movs	r3, #0
	__asm__ volatile(
   24454:	f04f 0240 	mov.w	r2, #64	; 0x40
   24458:	f3ef 8511 	mrs	r5, BASEPRI
   2445c:	f382 8812 	msr	BASEPRI_MAX, r2
   24460:	f3bf 8f6f 	isb	sy
	z_spin_lock_set_owner(l);
#if defined(CONFIG_SPIN_LOCK_TIME_LIMIT) && (CONFIG_SPIN_LOCK_TIME_LIMIT != 0)
	l->lock_time = sys_clock_cycle_get_32();
#endif /* CONFIG_SPIN_LOCK_TIME_LIMIT */
#endif/* CONFIG_SPIN_VALIDATE */
	return k;
   24464:	e00e      	b.n	24484 <k_sched_time_slice_set+0x38>
			slice_ticks = MAX(2, slice_ticks);
   24466:	2802      	cmp	r0, #2
   24468:	bfb8      	it	lt
   2446a:	2002      	movlt	r0, #2
   2446c:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   2446e:	4b11      	ldr	r3, [pc, #68]	; (244b4 <k_sched_time_slice_set+0x68>)
   24470:	601e      	str	r6, [r3, #0]
		z_reset_time_slice(_current);
   24472:	4b11      	ldr	r3, [pc, #68]	; (244b8 <k_sched_time_slice_set+0x6c>)
   24474:	6898      	ldr	r0, [r3, #8]
   24476:	f7ff ffd5 	bl	24424 <z_reset_time_slice>
	__asm__ volatile(
   2447a:	f385 8811 	msr	BASEPRI, r5
   2447e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   24482:	2301      	movs	r3, #1
   24484:	b9a3      	cbnz	r3, 244b0 <k_sched_time_slice_set+0x64>
		_current_cpu->slice_ticks = 0;
   24486:	4b0c      	ldr	r3, [pc, #48]	; (244b8 <k_sched_time_slice_set+0x6c>)
   24488:	2200      	movs	r2, #0
   2448a:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   2448c:	0c61      	lsrs	r1, r4, #17
   2448e:	03e0      	lsls	r0, r4, #15
   24490:	f240 33e7 	movw	r3, #999	; 0x3e7
   24494:	18c0      	adds	r0, r0, r3
   24496:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2449a:	f04f 0300 	mov.w	r3, #0
   2449e:	f141 0100 	adc.w	r1, r1, #0
   244a2:	f7db fe2d 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   244a6:	4b05      	ldr	r3, [pc, #20]	; (244bc <k_sched_time_slice_set+0x70>)
   244a8:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   244aa:	2c00      	cmp	r4, #0
   244ac:	dcdb      	bgt.n	24466 <k_sched_time_slice_set+0x1a>
   244ae:	e7de      	b.n	2446e <k_sched_time_slice_set+0x22>
}
   244b0:	bd70      	pop	{r4, r5, r6, pc}
   244b2:	bf00      	nop
   244b4:	20008eb8 	.word	0x20008eb8
   244b8:	20008e80 	.word	0x20008e80
   244bc:	20008ebc 	.word	0x20008ebc

000244c0 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   244c0:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   244c2:	460b      	mov	r3, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   244c4:	b959      	cbnz	r1, 244de <z_reschedule+0x1e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   244c6:	f3ef 8205 	mrs	r2, IPSR
   244ca:	b942      	cbnz	r2, 244de <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
   244cc:	4a06      	ldr	r2, [pc, #24]	; (244e8 <z_reschedule+0x28>)
   244ce:	69d0      	ldr	r0, [r2, #28]
	return new_thread != _current;
   244d0:	6892      	ldr	r2, [r2, #8]
	if (resched(key.key) && need_swap()) {
   244d2:	4290      	cmp	r0, r2
   244d4:	d003      	beq.n	244de <z_reschedule+0x1e>
	ret = arch_swap(key);
   244d6:	4608      	mov	r0, r1
   244d8:	f7f1 fa06 	bl	158e8 <arch_swap>
		z_swap(lock, key);
   244dc:	e003      	b.n	244e6 <z_reschedule+0x26>
   244de:	f383 8811 	msr	BASEPRI, r3
   244e2:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   244e6:	bd08      	pop	{r3, pc}
   244e8:	20008e80 	.word	0x20008e80

000244ec <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   244ec:	2300      	movs	r3, #0
	__asm__ volatile(
   244ee:	f04f 0240 	mov.w	r2, #64	; 0x40
   244f2:	f3ef 8111 	mrs	r1, BASEPRI
   244f6:	f382 8812 	msr	BASEPRI_MAX, r2
   244fa:	f3bf 8f6f 	isb	sy
   244fe:	e009      	b.n	24514 <k_sched_lock+0x28>
	--_current->base.sched_locked;
   24500:	4b06      	ldr	r3, [pc, #24]	; (2451c <k_sched_lock+0x30>)
   24502:	689a      	ldr	r2, [r3, #8]
   24504:	7bd3      	ldrb	r3, [r2, #15]
   24506:	3b01      	subs	r3, #1
   24508:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   2450a:	f381 8811 	msr	BASEPRI, r1
   2450e:	f3bf 8f6f 	isb	sy
   24512:	2301      	movs	r3, #1
   24514:	2b00      	cmp	r3, #0
   24516:	d0f3      	beq.n	24500 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   24518:	4770      	bx	lr
   2451a:	bf00      	nop
   2451c:	20008e80 	.word	0x20008e80

00024520 <update_cache>:
{
   24520:	b538      	push	{r3, r4, r5, lr}
   24522:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   24524:	4810      	ldr	r0, [pc, #64]	; (24568 <update_cache+0x48>)
   24526:	f008 f807 	bl	2c538 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   2452a:	4605      	mov	r5, r0
   2452c:	b170      	cbz	r0, 2454c <update_cache+0x2c>
	if (preempt_ok != 0) {
   2452e:	b984      	cbnz	r4, 24552 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   24530:	4b0e      	ldr	r3, [pc, #56]	; (2456c <update_cache+0x4c>)
   24532:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   24534:	7b5a      	ldrb	r2, [r3, #13]
   24536:	f012 0f1f 	tst.w	r2, #31
   2453a:	d10a      	bne.n	24552 <update_cache+0x32>
	return node->next != NULL;
   2453c:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   2453e:	b942      	cbnz	r2, 24552 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   24540:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   24542:	2a7f      	cmp	r2, #127	; 0x7f
   24544:	d905      	bls.n	24552 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   24546:	4a09      	ldr	r2, [pc, #36]	; (2456c <update_cache+0x4c>)
   24548:	61d3      	str	r3, [r2, #28]
   2454a:	e00b      	b.n	24564 <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   2454c:	4b07      	ldr	r3, [pc, #28]	; (2456c <update_cache+0x4c>)
   2454e:	68dd      	ldr	r5, [r3, #12]
   24550:	e7ed      	b.n	2452e <update_cache+0xe>
		if (thread != _current) {
   24552:	4b06      	ldr	r3, [pc, #24]	; (2456c <update_cache+0x4c>)
   24554:	689b      	ldr	r3, [r3, #8]
   24556:	42ab      	cmp	r3, r5
   24558:	d002      	beq.n	24560 <update_cache+0x40>
			z_reset_time_slice(thread);
   2455a:	4628      	mov	r0, r5
   2455c:	f7ff ff62 	bl	24424 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   24560:	4b02      	ldr	r3, [pc, #8]	; (2456c <update_cache+0x4c>)
   24562:	61dd      	str	r5, [r3, #28]
}
   24564:	bd38      	pop	{r3, r4, r5, pc}
   24566:	bf00      	nop
   24568:	20008ea0 	.word	0x20008ea0
   2456c:	20008e80 	.word	0x20008e80

00024570 <move_thread_to_end_of_prio_q>:
{
   24570:	b538      	push	{r3, r4, r5, lr}
   24572:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   24574:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   24576:	f990 300d 	ldrsb.w	r3, [r0, #13]
   2457a:	2b00      	cmp	r3, #0
   2457c:	db0a      	blt.n	24594 <move_thread_to_end_of_prio_q+0x24>
	thread->base.thread_state |= _THREAD_QUEUED;
   2457e:	7b6b      	ldrb	r3, [r5, #13]
   24580:	f063 037f 	orn	r3, r3, #127	; 0x7f
   24584:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   24586:	4b1b      	ldr	r3, [pc, #108]	; (245f4 <move_thread_to_end_of_prio_q+0x84>)
   24588:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2458c:	429c      	cmp	r4, r3
   2458e:	d110      	bne.n	245b2 <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   24590:	2400      	movs	r4, #0
   24592:	e00e      	b.n	245b2 <move_thread_to_end_of_prio_q+0x42>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   24594:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   24598:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2459a:	4601      	mov	r1, r0
   2459c:	4816      	ldr	r0, [pc, #88]	; (245f8 <move_thread_to_end_of_prio_q+0x88>)
   2459e:	f007 ff9a 	bl	2c4d6 <z_priq_dumb_remove>
}
   245a2:	e7ec      	b.n	2457e <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   245a4:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   245a6:	606b      	str	r3, [r5, #4]
	node->next = successor;
   245a8:	602c      	str	r4, [r5, #0]
	prev->next = node;
   245aa:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   245ac:	6065      	str	r5, [r4, #4]
}
   245ae:	e017      	b.n	245e0 <move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   245b0:	2400      	movs	r4, #0
   245b2:	b16c      	cbz	r4, 245d0 <move_thread_to_end_of_prio_q+0x60>
		if (z_sched_prio_cmp(thread, t) > 0) {
   245b4:	4621      	mov	r1, r4
   245b6:	4628      	mov	r0, r5
   245b8:	f007 ff52 	bl	2c460 <z_sched_prio_cmp>
   245bc:	2800      	cmp	r0, #0
   245be:	dcf1      	bgt.n	245a4 <move_thread_to_end_of_prio_q+0x34>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   245c0:	2c00      	cmp	r4, #0
   245c2:	d0f6      	beq.n	245b2 <move_thread_to_end_of_prio_q+0x42>
	return (node == list->tail) ? NULL : node->next;
   245c4:	4b0b      	ldr	r3, [pc, #44]	; (245f4 <move_thread_to_end_of_prio_q+0x84>)
   245c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   245c8:	429c      	cmp	r4, r3
   245ca:	d0f1      	beq.n	245b0 <move_thread_to_end_of_prio_q+0x40>
   245cc:	6824      	ldr	r4, [r4, #0]
   245ce:	e7f0      	b.n	245b2 <move_thread_to_end_of_prio_q+0x42>
	sys_dnode_t *const tail = list->tail;
   245d0:	4b08      	ldr	r3, [pc, #32]	; (245f4 <move_thread_to_end_of_prio_q+0x84>)
   245d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   245d4:	f103 0120 	add.w	r1, r3, #32
   245d8:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   245da:	606a      	str	r2, [r5, #4]
	tail->next = node;
   245dc:	6015      	str	r5, [r2, #0]
	list->tail = node;
   245de:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   245e0:	4b04      	ldr	r3, [pc, #16]	; (245f4 <move_thread_to_end_of_prio_q+0x84>)
   245e2:	6898      	ldr	r0, [r3, #8]
   245e4:	42a8      	cmp	r0, r5
   245e6:	bf14      	ite	ne
   245e8:	2000      	movne	r0, #0
   245ea:	2001      	moveq	r0, #1
   245ec:	f7ff ff98 	bl	24520 <update_cache>
}
   245f0:	bd38      	pop	{r3, r4, r5, pc}
   245f2:	bf00      	nop
   245f4:	20008e80 	.word	0x20008e80
   245f8:	20008ea0 	.word	0x20008ea0

000245fc <slice_expired_locked>:
{
   245fc:	b538      	push	{r3, r4, r5, lr}
   245fe:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
   24600:	4b07      	ldr	r3, [pc, #28]	; (24620 <slice_expired_locked+0x24>)
   24602:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
   24604:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
   24606:	f013 0f1f 	tst.w	r3, #31
   2460a:	d004      	beq.n	24616 <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
   2460c:	4628      	mov	r0, r5
   2460e:	f7ff ff09 	bl	24424 <z_reset_time_slice>
}
   24612:	4620      	mov	r0, r4
   24614:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
   24616:	4628      	mov	r0, r5
   24618:	f7ff ffaa 	bl	24570 <move_thread_to_end_of_prio_q>
   2461c:	e7f6      	b.n	2460c <slice_expired_locked+0x10>
   2461e:	bf00      	nop
   24620:	20008e80 	.word	0x20008e80

00024624 <z_time_slice>:
{
   24624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24626:	4605      	mov	r5, r0
	__asm__ volatile(
   24628:	f04f 0340 	mov.w	r3, #64	; 0x40
   2462c:	f3ef 8611 	mrs	r6, BASEPRI
   24630:	f383 8812 	msr	BASEPRI_MAX, r3
   24634:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   24638:	4b15      	ldr	r3, [pc, #84]	; (24690 <z_time_slice+0x6c>)
   2463a:	6898      	ldr	r0, [r3, #8]
   2463c:	4b15      	ldr	r3, [pc, #84]	; (24694 <z_time_slice+0x70>)
   2463e:	681b      	ldr	r3, [r3, #0]
   24640:	4298      	cmp	r0, r3
   24642:	d011      	beq.n	24668 <z_time_slice+0x44>
   24644:	4634      	mov	r4, r6
	pending_current = NULL;
   24646:	4b13      	ldr	r3, [pc, #76]	; (24694 <z_time_slice+0x70>)
   24648:	2200      	movs	r2, #0
   2464a:	601a      	str	r2, [r3, #0]
	int ret = slice_ticks;
   2464c:	4b12      	ldr	r3, [pc, #72]	; (24698 <z_time_slice+0x74>)
   2464e:	681b      	ldr	r3, [r3, #0]
	if (slice_time(_current) && sliceable(_current)) {
   24650:	b1b3      	cbz	r3, 24680 <z_time_slice+0x5c>
   24652:	f7ff feb9 	bl	243c8 <sliceable>
   24656:	b198      	cbz	r0, 24680 <z_time_slice+0x5c>
		if (ticks >= _current_cpu->slice_ticks) {
   24658:	4b0d      	ldr	r3, [pc, #52]	; (24690 <z_time_slice+0x6c>)
   2465a:	691b      	ldr	r3, [r3, #16]
   2465c:	42ab      	cmp	r3, r5
   2465e:	dd0a      	ble.n	24676 <z_time_slice+0x52>
			_current_cpu->slice_ticks -= ticks;
   24660:	1b5b      	subs	r3, r3, r5
   24662:	4a0b      	ldr	r2, [pc, #44]	; (24690 <z_time_slice+0x6c>)
   24664:	6113      	str	r3, [r2, #16]
   24666:	e00e      	b.n	24686 <z_time_slice+0x62>
		z_reset_time_slice(_current);
   24668:	f7ff fedc 	bl	24424 <z_reset_time_slice>
	__asm__ volatile(
   2466c:	f386 8811 	msr	BASEPRI, r6
   24670:	f3bf 8f6f 	isb	sy
		return;
   24674:	e00b      	b.n	2468e <z_time_slice+0x6a>
			key = slice_expired_locked(key);
   24676:	4630      	mov	r0, r6
   24678:	f7ff ffc0 	bl	245fc <slice_expired_locked>
   2467c:	4604      	mov	r4, r0
   2467e:	e002      	b.n	24686 <z_time_slice+0x62>
		_current_cpu->slice_ticks = 0;
   24680:	4b03      	ldr	r3, [pc, #12]	; (24690 <z_time_slice+0x6c>)
   24682:	2200      	movs	r2, #0
   24684:	611a      	str	r2, [r3, #16]
   24686:	f384 8811 	msr	BASEPRI, r4
   2468a:	f3bf 8f6f 	isb	sy
}
   2468e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24690:	20008e80 	.word	0x20008e80
   24694:	20008eb4 	.word	0x20008eb4
   24698:	20008ebc 	.word	0x20008ebc

0002469c <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
   2469c:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   2469e:	f990 300d 	ldrsb.w	r3, [r0, #13]
   246a2:	2b00      	cmp	r3, #0
   246a4:	db33      	blt.n	2470e <ready_thread+0x72>
{
   246a6:	b570      	push	{r4, r5, r6, lr}
   246a8:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   246aa:	f012 0f1f 	tst.w	r2, #31
   246ae:	d101      	bne.n	246b4 <ready_thread+0x18>
	return node->next != NULL;
   246b0:	6986      	ldr	r6, [r0, #24]
   246b2:	b106      	cbz	r6, 246b6 <ready_thread+0x1a>
}
   246b4:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
   246b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
   246ba:	7342      	strb	r2, [r0, #13]
	return list->head == list;
   246bc:	4b14      	ldr	r3, [pc, #80]	; (24710 <ready_thread+0x74>)
   246be:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   246c2:	429d      	cmp	r5, r3
   246c4:	d108      	bne.n	246d8 <ready_thread+0x3c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   246c6:	4635      	mov	r5, r6
   246c8:	e006      	b.n	246d8 <ready_thread+0x3c>
	sys_dnode_t *const prev = successor->prev;
   246ca:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   246cc:	6063      	str	r3, [r4, #4]
	node->next = successor;
   246ce:	6025      	str	r5, [r4, #0]
	prev->next = node;
   246d0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   246d2:	606c      	str	r4, [r5, #4]
}
   246d4:	e017      	b.n	24706 <ready_thread+0x6a>
   246d6:	4635      	mov	r5, r6
   246d8:	b16d      	cbz	r5, 246f6 <ready_thread+0x5a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   246da:	4629      	mov	r1, r5
   246dc:	4620      	mov	r0, r4
   246de:	f007 febf 	bl	2c460 <z_sched_prio_cmp>
   246e2:	2800      	cmp	r0, #0
   246e4:	dcf1      	bgt.n	246ca <ready_thread+0x2e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   246e6:	2d00      	cmp	r5, #0
   246e8:	d0f6      	beq.n	246d8 <ready_thread+0x3c>
	return (node == list->tail) ? NULL : node->next;
   246ea:	4b09      	ldr	r3, [pc, #36]	; (24710 <ready_thread+0x74>)
   246ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   246ee:	429d      	cmp	r5, r3
   246f0:	d0f1      	beq.n	246d6 <ready_thread+0x3a>
   246f2:	682d      	ldr	r5, [r5, #0]
   246f4:	e7f0      	b.n	246d8 <ready_thread+0x3c>
	sys_dnode_t *const tail = list->tail;
   246f6:	4b06      	ldr	r3, [pc, #24]	; (24710 <ready_thread+0x74>)
   246f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   246fa:	f103 0120 	add.w	r1, r3, #32
   246fe:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   24700:	6062      	str	r2, [r4, #4]
	tail->next = node;
   24702:	6014      	str	r4, [r2, #0]
	list->tail = node;
   24704:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   24706:	2000      	movs	r0, #0
   24708:	f7ff ff0a 	bl	24520 <update_cache>
}
   2470c:	e7d2      	b.n	246b4 <ready_thread+0x18>
   2470e:	4770      	bx	lr
   24710:	20008e80 	.word	0x20008e80

00024714 <z_sched_start>:
{
   24714:	b510      	push	{r4, lr}
	__asm__ volatile(
   24716:	f04f 0340 	mov.w	r3, #64	; 0x40
   2471a:	f3ef 8411 	mrs	r4, BASEPRI
   2471e:	f383 8812 	msr	BASEPRI_MAX, r3
   24722:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   24726:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   24728:	f013 0f04 	tst.w	r3, #4
   2472c:	d104      	bne.n	24738 <z_sched_start+0x24>
	__asm__ volatile(
   2472e:	f384 8811 	msr	BASEPRI, r4
   24732:	f3bf 8f6f 	isb	sy
}
   24736:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   24738:	f023 0304 	bic.w	r3, r3, #4
   2473c:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   2473e:	f7ff ffad 	bl	2469c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   24742:	4621      	mov	r1, r4
   24744:	4801      	ldr	r0, [pc, #4]	; (2474c <z_sched_start+0x38>)
   24746:	f7ff febb 	bl	244c0 <z_reschedule>
   2474a:	e7f4      	b.n	24736 <z_sched_start+0x22>
   2474c:	20008ec0 	.word	0x20008ec0

00024750 <unready_thread>:
{
   24750:	b510      	push	{r4, lr}
   24752:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   24754:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   24756:	f990 300d 	ldrsb.w	r3, [r0, #13]
   2475a:	2b00      	cmp	r3, #0
   2475c:	db08      	blt.n	24770 <unready_thread+0x20>
	update_cache(thread == _current);
   2475e:	4b08      	ldr	r3, [pc, #32]	; (24780 <unready_thread+0x30>)
   24760:	6898      	ldr	r0, [r3, #8]
   24762:	42a0      	cmp	r0, r4
   24764:	bf14      	ite	ne
   24766:	2000      	movne	r0, #0
   24768:	2001      	moveq	r0, #1
   2476a:	f7ff fed9 	bl	24520 <update_cache>
}
   2476e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   24770:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   24774:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   24776:	4601      	mov	r1, r0
   24778:	4802      	ldr	r0, [pc, #8]	; (24784 <unready_thread+0x34>)
   2477a:	f007 feac 	bl	2c4d6 <z_priq_dumb_remove>
}
   2477e:	e7ee      	b.n	2475e <unready_thread+0xe>
   24780:	20008e80 	.word	0x20008e80
   24784:	20008ea0 	.word	0x20008ea0

00024788 <z_pend_curr>:
{
   24788:	b510      	push	{r4, lr}
   2478a:	460c      	mov	r4, r1
   2478c:	4611      	mov	r1, r2
	pending_current = _current;
   2478e:	480a      	ldr	r0, [pc, #40]	; (247b8 <z_pend_curr+0x30>)
   24790:	6882      	ldr	r2, [r0, #8]
   24792:	4b0a      	ldr	r3, [pc, #40]	; (247bc <z_pend_curr+0x34>)
   24794:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
   24796:	f04f 0240 	mov.w	r2, #64	; 0x40
   2479a:	f3ef 8311 	mrs	r3, BASEPRI
   2479e:	f382 8812 	msr	BASEPRI_MAX, r2
   247a2:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   247a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   247aa:	6880      	ldr	r0, [r0, #8]
   247ac:	f007 ff56 	bl	2c65c <pend_locked>
   247b0:	4620      	mov	r0, r4
   247b2:	f7f1 f899 	bl	158e8 <arch_swap>
}
   247b6:	bd10      	pop	{r4, pc}
   247b8:	20008e80 	.word	0x20008e80
   247bc:	20008eb4 	.word	0x20008eb4

000247c0 <z_set_prio>:
{
   247c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   247c4:	4605      	mov	r5, r0
   247c6:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   247c8:	2300      	movs	r3, #0
   247ca:	f04f 0240 	mov.w	r2, #64	; 0x40
   247ce:	f3ef 8611 	mrs	r6, BASEPRI
   247d2:	f382 8812 	msr	BASEPRI_MAX, r2
   247d6:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   247da:	4618      	mov	r0, r3
   247dc:	e029      	b.n	24832 <z_set_prio+0x72>
	sys_dnode_t *const prev = successor->prev;
   247de:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   247e0:	606b      	str	r3, [r5, #4]
	node->next = successor;
   247e2:	602c      	str	r4, [r5, #0]
	prev->next = node;
   247e4:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   247e6:	6065      	str	r5, [r4, #4]
}
   247e8:	e017      	b.n	2481a <z_set_prio+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   247ea:	4644      	mov	r4, r8
   247ec:	b16c      	cbz	r4, 2480a <z_set_prio+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   247ee:	4621      	mov	r1, r4
   247f0:	4628      	mov	r0, r5
   247f2:	f007 fe35 	bl	2c460 <z_sched_prio_cmp>
   247f6:	2800      	cmp	r0, #0
   247f8:	dcf1      	bgt.n	247de <z_set_prio+0x1e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   247fa:	2c00      	cmp	r4, #0
   247fc:	d0f6      	beq.n	247ec <z_set_prio+0x2c>
	return (node == list->tail) ? NULL : node->next;
   247fe:	4b1d      	ldr	r3, [pc, #116]	; (24874 <z_set_prio+0xb4>)
   24800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   24802:	429c      	cmp	r4, r3
   24804:	d0f1      	beq.n	247ea <z_set_prio+0x2a>
   24806:	6824      	ldr	r4, [r4, #0]
   24808:	e7f0      	b.n	247ec <z_set_prio+0x2c>
	sys_dnode_t *const tail = list->tail;
   2480a:	4b1a      	ldr	r3, [pc, #104]	; (24874 <z_set_prio+0xb4>)
   2480c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   2480e:	f103 0120 	add.w	r1, r3, #32
   24812:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   24814:	606a      	str	r2, [r5, #4]
	tail->next = node;
   24816:	6015      	str	r5, [r2, #0]
	list->tail = node;
   24818:	625d      	str	r5, [r3, #36]	; 0x24
			update_cache(1);
   2481a:	2001      	movs	r0, #1
   2481c:	f7ff fe80 	bl	24520 <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   24820:	2001      	movs	r0, #1
   24822:	e001      	b.n	24828 <z_set_prio+0x68>
			thread->base.prio = prio;
   24824:	73af      	strb	r7, [r5, #14]
   24826:	2000      	movs	r0, #0
	__asm__ volatile(
   24828:	f386 8811 	msr	BASEPRI, r6
   2482c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   24830:	2301      	movs	r3, #1
   24832:	b9e3      	cbnz	r3, 2486e <z_set_prio+0xae>
	uint8_t state = thread->base.thread_state;
   24834:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   24836:	f013 0f1f 	tst.w	r3, #31
   2483a:	d1f3      	bne.n	24824 <z_set_prio+0x64>
	return node->next != NULL;
   2483c:	f8d5 8018 	ldr.w	r8, [r5, #24]
   24840:	f1b8 0f00 	cmp.w	r8, #0
   24844:	d1ee      	bne.n	24824 <z_set_prio+0x64>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   24846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2484a:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2484c:	f8df 9028 	ldr.w	r9, [pc, #40]	; 24878 <z_set_prio+0xb8>
   24850:	4629      	mov	r1, r5
   24852:	4648      	mov	r0, r9
   24854:	f007 fe3f 	bl	2c4d6 <z_priq_dumb_remove>
				thread->base.prio = prio;
   24858:	73af      	strb	r7, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   2485a:	7b6b      	ldrb	r3, [r5, #13]
   2485c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   24860:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   24862:	f8d9 4000 	ldr.w	r4, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24866:	454c      	cmp	r4, r9
   24868:	d1c0      	bne.n	247ec <z_set_prio+0x2c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2486a:	4644      	mov	r4, r8
   2486c:	e7be      	b.n	247ec <z_set_prio+0x2c>
}
   2486e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24872:	bf00      	nop
   24874:	20008e80 	.word	0x20008e80
   24878:	20008ea0 	.word	0x20008ea0

0002487c <z_impl_k_thread_suspend>:
{
   2487c:	b538      	push	{r3, r4, r5, lr}
   2487e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   24880:	3018      	adds	r0, #24
   24882:	f007 ff90 	bl	2c7a6 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   24886:	2300      	movs	r3, #0
	__asm__ volatile(
   24888:	f04f 0240 	mov.w	r2, #64	; 0x40
   2488c:	f3ef 8511 	mrs	r5, BASEPRI
   24890:	f382 8812 	msr	BASEPRI_MAX, r2
   24894:	f3bf 8f6f 	isb	sy
   24898:	e010      	b.n	248bc <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2489a:	7b63      	ldrb	r3, [r4, #13]
   2489c:	f043 0310 	orr.w	r3, r3, #16
   248a0:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   248a2:	4b11      	ldr	r3, [pc, #68]	; (248e8 <z_impl_k_thread_suspend+0x6c>)
   248a4:	6898      	ldr	r0, [r3, #8]
   248a6:	42a0      	cmp	r0, r4
   248a8:	bf14      	ite	ne
   248aa:	2000      	movne	r0, #0
   248ac:	2001      	moveq	r0, #1
   248ae:	f7ff fe37 	bl	24520 <update_cache>
	__asm__ volatile(
   248b2:	f385 8811 	msr	BASEPRI, r5
   248b6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   248ba:	2301      	movs	r3, #1
   248bc:	b963      	cbnz	r3, 248d8 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   248be:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   248c0:	f994 300d 	ldrsb.w	r3, [r4, #13]
   248c4:	2b00      	cmp	r3, #0
   248c6:	dae8      	bge.n	2489a <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   248c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   248cc:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   248ce:	4621      	mov	r1, r4
   248d0:	4806      	ldr	r0, [pc, #24]	; (248ec <z_impl_k_thread_suspend+0x70>)
   248d2:	f007 fe00 	bl	2c4d6 <z_priq_dumb_remove>
}
   248d6:	e7e0      	b.n	2489a <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   248d8:	4b03      	ldr	r3, [pc, #12]	; (248e8 <z_impl_k_thread_suspend+0x6c>)
   248da:	689b      	ldr	r3, [r3, #8]
   248dc:	42a3      	cmp	r3, r4
   248de:	d000      	beq.n	248e2 <z_impl_k_thread_suspend+0x66>
}
   248e0:	bd38      	pop	{r3, r4, r5, pc}
		z_reschedule_unlocked();
   248e2:	f007 fdec 	bl	2c4be <z_reschedule_unlocked>
}
   248e6:	e7fb      	b.n	248e0 <z_impl_k_thread_suspend+0x64>
   248e8:	20008e80 	.word	0x20008e80
   248ec:	20008ea0 	.word	0x20008ea0

000248f0 <k_sched_unlock>:

void k_sched_unlock(void)
{
   248f0:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   248f2:	2300      	movs	r3, #0
	__asm__ volatile(
   248f4:	f04f 0240 	mov.w	r2, #64	; 0x40
   248f8:	f3ef 8411 	mrs	r4, BASEPRI
   248fc:	f382 8812 	msr	BASEPRI_MAX, r2
   24900:	f3bf 8f6f 	isb	sy
   24904:	e00c      	b.n	24920 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   24906:	4b09      	ldr	r3, [pc, #36]	; (2492c <k_sched_unlock+0x3c>)
   24908:	689a      	ldr	r2, [r3, #8]
   2490a:	7bd3      	ldrb	r3, [r2, #15]
   2490c:	3301      	adds	r3, #1
   2490e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   24910:	2000      	movs	r0, #0
   24912:	f7ff fe05 	bl	24520 <update_cache>
	__asm__ volatile(
   24916:	f384 8811 	msr	BASEPRI, r4
   2491a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2491e:	2301      	movs	r3, #1
   24920:	2b00      	cmp	r3, #0
   24922:	d0f0      	beq.n	24906 <k_sched_unlock+0x16>
	LOG_DBG("scheduler unlocked (%p:%d)",
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
   24924:	f007 fdcb 	bl	2c4be <z_reschedule_unlocked>
}
   24928:	bd10      	pop	{r4, pc}
   2492a:	bf00      	nop
   2492c:	20008e80 	.word	0x20008e80

00024930 <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   24930:	7b43      	ldrb	r3, [r0, #13]
   24932:	f013 0f08 	tst.w	r3, #8
   24936:	d12a      	bne.n	2498e <end_thread+0x5e>
{
   24938:	b510      	push	{r4, lr}
   2493a:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
   2493c:	f043 0208 	orr.w	r2, r3, #8
   24940:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
   24942:	f023 0220 	bic.w	r2, r3, #32
   24946:	f042 0208 	orr.w	r2, r2, #8
   2494a:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
   2494c:	f012 0f80 	tst.w	r2, #128	; 0x80
   24950:	d113      	bne.n	2497a <end_thread+0x4a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   24952:	68a3      	ldr	r3, [r4, #8]
   24954:	b113      	cbz	r3, 2495c <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
   24956:	4620      	mov	r0, r4
   24958:	f007 fdc5 	bl	2c4e6 <unpend_thread_no_timeout>
   2495c:	f104 0018 	add.w	r0, r4, #24
   24960:	f007 ff21 	bl	2c7a6 <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   24964:	f104 0058 	add.w	r0, r4, #88	; 0x58
   24968:	f007 fe38 	bl	2c5dc <unpend_all>
		update_cache(1);
   2496c:	2001      	movs	r0, #1
   2496e:	f7ff fdd7 	bl	24520 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   24972:	4620      	mov	r0, r4
   24974:	f7ff f944 	bl	23c00 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   24978:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2497a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   2497e:	f043 0308 	orr.w	r3, r3, #8
   24982:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   24984:	4601      	mov	r1, r0
   24986:	4802      	ldr	r0, [pc, #8]	; (24990 <end_thread+0x60>)
   24988:	f007 fda5 	bl	2c4d6 <z_priq_dumb_remove>
}
   2498c:	e7e1      	b.n	24952 <end_thread+0x22>
   2498e:	4770      	bx	lr
   24990:	20008ea0 	.word	0x20008ea0

00024994 <z_sched_init>:
{
   24994:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   24996:	4804      	ldr	r0, [pc, #16]	; (249a8 <z_sched_init+0x14>)
   24998:	f007 febc 	bl	2c714 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   2499c:	2100      	movs	r1, #0
   2499e:	4608      	mov	r0, r1
   249a0:	f7ff fd54 	bl	2444c <k_sched_time_slice_set>
}
   249a4:	bd08      	pop	{r3, pc}
   249a6:	bf00      	nop
   249a8:	20008e9c 	.word	0x20008e9c

000249ac <z_impl_k_yield>:
{
   249ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   249ae:	f04f 0340 	mov.w	r3, #64	; 0x40
   249b2:	f3ef 8611 	mrs	r6, BASEPRI
   249b6:	f383 8812 	msr	BASEPRI_MAX, r3
   249ba:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
   249be:	4c1d      	ldr	r4, [pc, #116]	; (24a34 <z_impl_k_yield+0x88>)
   249c0:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   249c2:	7b4b      	ldrb	r3, [r1, #13]
   249c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   249c8:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   249ca:	f104 0720 	add.w	r7, r4, #32
   249ce:	4638      	mov	r0, r7
   249d0:	f007 fd81 	bl	2c4d6 <z_priq_dumb_remove>
	queue_thread(_current);
   249d4:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   249d6:	7b6b      	ldrb	r3, [r5, #13]
   249d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   249dc:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   249de:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   249e0:	42bc      	cmp	r4, r7
   249e2:	d108      	bne.n	249f6 <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   249e4:	2400      	movs	r4, #0
   249e6:	e006      	b.n	249f6 <z_impl_k_yield+0x4a>
	sys_dnode_t *const prev = successor->prev;
   249e8:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   249ea:	606b      	str	r3, [r5, #4]
	node->next = successor;
   249ec:	602c      	str	r4, [r5, #0]
	prev->next = node;
   249ee:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   249f0:	6065      	str	r5, [r4, #4]
}
   249f2:	e017      	b.n	24a24 <z_impl_k_yield+0x78>
   249f4:	2400      	movs	r4, #0
   249f6:	b16c      	cbz	r4, 24a14 <z_impl_k_yield+0x68>
		if (z_sched_prio_cmp(thread, t) > 0) {
   249f8:	4621      	mov	r1, r4
   249fa:	4628      	mov	r0, r5
   249fc:	f007 fd30 	bl	2c460 <z_sched_prio_cmp>
   24a00:	2800      	cmp	r0, #0
   24a02:	dcf1      	bgt.n	249e8 <z_impl_k_yield+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   24a04:	2c00      	cmp	r4, #0
   24a06:	d0f6      	beq.n	249f6 <z_impl_k_yield+0x4a>
	return (node == list->tail) ? NULL : node->next;
   24a08:	4b0a      	ldr	r3, [pc, #40]	; (24a34 <z_impl_k_yield+0x88>)
   24a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   24a0c:	429c      	cmp	r4, r3
   24a0e:	d0f1      	beq.n	249f4 <z_impl_k_yield+0x48>
   24a10:	6824      	ldr	r4, [r4, #0]
   24a12:	e7f0      	b.n	249f6 <z_impl_k_yield+0x4a>
	sys_dnode_t *const tail = list->tail;
   24a14:	4b07      	ldr	r3, [pc, #28]	; (24a34 <z_impl_k_yield+0x88>)
   24a16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   24a18:	f103 0120 	add.w	r1, r3, #32
   24a1c:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   24a1e:	606a      	str	r2, [r5, #4]
	tail->next = node;
   24a20:	6015      	str	r5, [r2, #0]
	list->tail = node;
   24a22:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   24a24:	2001      	movs	r0, #1
   24a26:	f7ff fd7b 	bl	24520 <update_cache>
   24a2a:	4630      	mov	r0, r6
   24a2c:	f7f0 ff5c 	bl	158e8 <arch_swap>
}
   24a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24a32:	bf00      	nop
   24a34:	20008e80 	.word	0x20008e80

00024a38 <z_tick_sleep>:
{
   24a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
   24a3c:	ea50 0301 	orrs.w	r3, r0, r1
   24a40:	d038      	beq.n	24ab4 <z_tick_sleep+0x7c>
   24a42:	4604      	mov	r4, r0
   24a44:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
   24a46:	f06f 0301 	mvn.w	r3, #1
   24a4a:	1a1b      	subs	r3, r3, r0
   24a4c:	f04f 32ff 	mov.w	r2, #4294967295
   24a50:	eb62 0201 	sbc.w	r2, r2, r1
   24a54:	2b01      	cmp	r3, #1
   24a56:	f172 0200 	sbcs.w	r2, r2, #0
   24a5a:	db2f      	blt.n	24abc <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   24a5c:	f06f 0501 	mvn.w	r5, #1
   24a60:	1a2d      	subs	r5, r5, r0
   24a62:	f04f 0340 	mov.w	r3, #64	; 0x40
   24a66:	f3ef 8811 	mrs	r8, BASEPRI
   24a6a:	f383 8812 	msr	BASEPRI_MAX, r3
   24a6e:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   24a72:	4f14      	ldr	r7, [pc, #80]	; (24ac4 <z_tick_sleep+0x8c>)
   24a74:	68b8      	ldr	r0, [r7, #8]
   24a76:	4b14      	ldr	r3, [pc, #80]	; (24ac8 <z_tick_sleep+0x90>)
   24a78:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   24a7a:	f7ff fe69 	bl	24750 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   24a7e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   24a80:	4622      	mov	r2, r4
   24a82:	4633      	mov	r3, r6
   24a84:	4911      	ldr	r1, [pc, #68]	; (24acc <z_tick_sleep+0x94>)
   24a86:	3018      	adds	r0, #24
   24a88:	f000 f936 	bl	24cf8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   24a8c:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   24a8e:	7b53      	ldrb	r3, [r2, #13]
   24a90:	f043 0310 	orr.w	r3, r3, #16
   24a94:	7353      	strb	r3, [r2, #13]
   24a96:	4640      	mov	r0, r8
   24a98:	f7f0 ff26 	bl	158e8 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   24a9c:	f007 fee3 	bl	2c866 <sys_clock_tick_get_32>
   24aa0:	1a28      	subs	r0, r5, r0
   24aa2:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   24aa6:	2801      	cmp	r0, #1
   24aa8:	f173 0300 	sbcs.w	r3, r3, #0
   24aac:	da00      	bge.n	24ab0 <z_tick_sleep+0x78>
	return 0;
   24aae:	2000      	movs	r0, #0
}
   24ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   24ab4:	f7ff ff7a 	bl	249ac <z_impl_k_yield>
		return 0;
   24ab8:	2000      	movs	r0, #0
   24aba:	e7f9      	b.n	24ab0 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   24abc:	f007 fed3 	bl	2c866 <sys_clock_tick_get_32>
   24ac0:	1905      	adds	r5, r0, r4
   24ac2:	e7ce      	b.n	24a62 <z_tick_sleep+0x2a>
   24ac4:	20008e80 	.word	0x20008e80
   24ac8:	20008eb4 	.word	0x20008eb4
   24acc:	0002c57f 	.word	0x0002c57f

00024ad0 <z_impl_k_sleep>:
{
   24ad0:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24ad2:	f1b1 3fff 	cmp.w	r1, #4294967295
   24ad6:	bf08      	it	eq
   24ad8:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   24adc:	d018      	beq.n	24b10 <z_impl_k_sleep+0x40>
	ticks = z_tick_sleep(ticks);
   24ade:	f7ff ffab 	bl	24a38 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   24ae2:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
   24ae4:	0151      	lsls	r1, r2, #5
   24ae6:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
   24aea:	0143      	lsls	r3, r0, #5
   24aec:	1a1b      	subs	r3, r3, r0
   24aee:	eb61 0102 	sbc.w	r1, r1, r2
   24af2:	0089      	lsls	r1, r1, #2
   24af4:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
   24af8:	009b      	lsls	r3, r3, #2
   24afa:	181b      	adds	r3, r3, r0
   24afc:	eb42 0201 	adc.w	r2, r2, r1
   24b00:	00d2      	lsls	r2, r2, #3
   24b02:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   24b06:	f3c3 3310 	ubfx	r3, r3, #12, #17
   24b0a:	ea43 4042 	orr.w	r0, r3, r2, lsl #17
}
   24b0e:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
   24b10:	4b03      	ldr	r3, [pc, #12]	; (24b20 <z_impl_k_sleep+0x50>)
   24b12:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   24b14:	f7ff feb2 	bl	2487c <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   24b18:	f04f 30ff 	mov.w	r0, #4294967295
   24b1c:	e7f7      	b.n	24b0e <z_impl_k_sleep+0x3e>
   24b1e:	bf00      	nop
   24b20:	20008e80 	.word	0x20008e80

00024b24 <z_impl_k_usleep>:
{
   24b24:	b508      	push	{r3, lr}
	ticks = k_us_to_ticks_ceil64(us);
   24b26:	17c1      	asrs	r1, r0, #31
   24b28:	03c9      	lsls	r1, r1, #15
   24b2a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   24b2e:	03c0      	lsls	r0, r0, #15
   24b30:	4b15      	ldr	r3, [pc, #84]	; (24b88 <z_impl_k_usleep+0x64>)
   24b32:	18c0      	adds	r0, r0, r3
   24b34:	4a15      	ldr	r2, [pc, #84]	; (24b8c <z_impl_k_usleep+0x68>)
   24b36:	f04f 0300 	mov.w	r3, #0
   24b3a:	f141 0100 	adc.w	r1, r1, #0
   24b3e:	f7db fadf 	bl	100 <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
   24b42:	17c1      	asrs	r1, r0, #31
   24b44:	f7ff ff78 	bl	24a38 <z_tick_sleep>
	return k_ticks_to_us_floor64(ticks);
   24b48:	ea4f 7ce0 	mov.w	ip, r0, asr #31
   24b4c:	ea4f 124c 	mov.w	r2, ip, lsl #5
   24b50:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   24b54:	0143      	lsls	r3, r0, #5
   24b56:	1a1b      	subs	r3, r3, r0
   24b58:	eb62 020c 	sbc.w	r2, r2, ip
   24b5c:	0252      	lsls	r2, r2, #9
   24b5e:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
   24b62:	025b      	lsls	r3, r3, #9
   24b64:	181b      	adds	r3, r3, r0
   24b66:	eb4c 0202 	adc.w	r2, ip, r2
   24b6a:	ea4f 1e82 	mov.w	lr, r2, lsl #6
   24b6e:	ea4e 6e93 	orr.w	lr, lr, r3, lsr #26
   24b72:	0199      	lsls	r1, r3, #6
   24b74:	1acb      	subs	r3, r1, r3
   24b76:	eb6e 0e02 	sbc.w	lr, lr, r2
   24b7a:	181b      	adds	r3, r3, r0
   24b7c:	eb4c 000e 	adc.w	r0, ip, lr
   24b80:	0bdb      	lsrs	r3, r3, #15
}
   24b82:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
   24b86:	bd08      	pop	{r3, pc}
   24b88:	000f423f 	.word	0x000f423f
   24b8c:	000f4240 	.word	0x000f4240

00024b90 <z_impl_z_current_get>:
}
   24b90:	4b01      	ldr	r3, [pc, #4]	; (24b98 <z_impl_z_current_get+0x8>)
   24b92:	6898      	ldr	r0, [r3, #8]
   24b94:	4770      	bx	lr
   24b96:	bf00      	nop
   24b98:	20008e80 	.word	0x20008e80

00024b9c <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   24b9c:	b570      	push	{r4, r5, r6, lr}
   24b9e:	f04f 0340 	mov.w	r3, #64	; 0x40
   24ba2:	f3ef 8511 	mrs	r5, BASEPRI
   24ba6:	f383 8812 	msr	BASEPRI_MAX, r3
   24baa:	f3bf 8f6f 	isb	sy
   24bae:	462e      	mov	r6, r5
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   24bb0:	7b03      	ldrb	r3, [r0, #12]
   24bb2:	f013 0f01 	tst.w	r3, #1
   24bb6:	d109      	bne.n	24bcc <z_thread_abort+0x30>
   24bb8:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   24bba:	7b43      	ldrb	r3, [r0, #13]
   24bbc:	f013 0f08 	tst.w	r3, #8
   24bc0:	d00f      	beq.n	24be2 <z_thread_abort+0x46>
	__asm__ volatile(
   24bc2:	f385 8811 	msr	BASEPRI, r5
   24bc6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
   24bca:	e009      	b.n	24be0 <z_thread_abort+0x44>
   24bcc:	f385 8811 	msr	BASEPRI, r5
   24bd0:	f3bf 8f6f 	isb	sy
		k_panic();
   24bd4:	4040      	eors	r0, r0
   24bd6:	f380 8811 	msr	BASEPRI, r0
   24bda:	f04f 0004 	mov.w	r0, #4
   24bde:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   24be0:	bd70      	pop	{r4, r5, r6, pc}
	end_thread(thread);
   24be2:	f7ff fea5 	bl	24930 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   24be6:	4b08      	ldr	r3, [pc, #32]	; (24c08 <z_thread_abort+0x6c>)
   24be8:	689b      	ldr	r3, [r3, #8]
   24bea:	42a3      	cmp	r3, r4
   24bec:	d004      	beq.n	24bf8 <z_thread_abort+0x5c>
   24bee:	f386 8811 	msr	BASEPRI, r6
   24bf2:	f3bf 8f6f 	isb	sy
   24bf6:	e7f3      	b.n	24be0 <z_thread_abort+0x44>
   24bf8:	f3ef 8305 	mrs	r3, IPSR
   24bfc:	2b00      	cmp	r3, #0
   24bfe:	d1f6      	bne.n	24bee <z_thread_abort+0x52>
   24c00:	4628      	mov	r0, r5
   24c02:	f7f0 fe71 	bl	158e8 <arch_swap>
	return ret;
   24c06:	e7f2      	b.n	24bee <z_thread_abort+0x52>
   24c08:	20008e80 	.word	0x20008e80

00024c0c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   24c0c:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
   24c10:	b083      	sub	sp, #12
   24c12:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   24c14:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   24c18:	e9cd bc00 	strd	fp, ip, [sp]
   24c1c:	f7ff fdb4 	bl	24788 <z_pend_curr>

	if (data != NULL) {
   24c20:	b11c      	cbz	r4, 24c2a <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
   24c22:	4b03      	ldr	r3, [pc, #12]	; (24c30 <z_sched_wait+0x24>)
   24c24:	689b      	ldr	r3, [r3, #8]
   24c26:	695b      	ldr	r3, [r3, #20]
   24c28:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   24c2a:	b003      	add	sp, #12
   24c2c:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
   24c30:	20008e80 	.word	0x20008e80

00024c34 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   24c34:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   24c36:	4806      	ldr	r0, [pc, #24]	; (24c50 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   24c38:	4a06      	ldr	r2, [pc, #24]	; (24c54 <z_data_copy+0x20>)
   24c3a:	1a12      	subs	r2, r2, r0
   24c3c:	4906      	ldr	r1, [pc, #24]	; (24c58 <z_data_copy+0x24>)
   24c3e:	f007 f880 	bl	2bd42 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   24c42:	4a06      	ldr	r2, [pc, #24]	; (24c5c <z_data_copy+0x28>)
   24c44:	4906      	ldr	r1, [pc, #24]	; (24c60 <z_data_copy+0x2c>)
   24c46:	4807      	ldr	r0, [pc, #28]	; (24c64 <z_data_copy+0x30>)
   24c48:	f007 f87b 	bl	2bd42 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   24c4c:	bd08      	pop	{r3, pc}
   24c4e:	bf00      	nop
   24c50:	20000000 	.word	0x20000000
   24c54:	20000c2c 	.word	0x20000c2c
   24c58:	0003010c 	.word	0x0003010c
   24c5c:	00000000 	.word	0x00000000
   24c60:	0003010c 	.word	0x0003010c
   24c64:	20000000 	.word	0x20000000

00024c68 <first>:
	return list->head == list;
   24c68:	4b03      	ldr	r3, [pc, #12]	; (24c78 <first+0x10>)
   24c6a:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24c6c:	4298      	cmp	r0, r3
   24c6e:	d000      	beq.n	24c72 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   24c70:	4770      	bx	lr
   24c72:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   24c74:	e7fc      	b.n	24c70 <first+0x8>
   24c76:	bf00      	nop
   24c78:	200009f8 	.word	0x200009f8

00024c7c <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   24c7c:	b130      	cbz	r0, 24c8c <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   24c7e:	4a04      	ldr	r2, [pc, #16]	; (24c90 <next+0x14>)
   24c80:	6852      	ldr	r2, [r2, #4]
   24c82:	4290      	cmp	r0, r2
   24c84:	d001      	beq.n	24c8a <next+0xe>
   24c86:	6800      	ldr	r0, [r0, #0]
   24c88:	4770      	bx	lr
   24c8a:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   24c8c:	4770      	bx	lr
   24c8e:	bf00      	nop
   24c90:	200009f8 	.word	0x200009f8

00024c94 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   24c94:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   24c96:	4b04      	ldr	r3, [pc, #16]	; (24ca8 <elapsed+0x14>)
   24c98:	681b      	ldr	r3, [r3, #0]
   24c9a:	b10b      	cbz	r3, 24ca0 <elapsed+0xc>
   24c9c:	2000      	movs	r0, #0
}
   24c9e:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   24ca0:	f7fc fbe4 	bl	2146c <sys_clock_elapsed>
   24ca4:	e7fb      	b.n	24c9e <elapsed+0xa>
   24ca6:	bf00      	nop
   24ca8:	20008ec0 	.word	0x20008ec0

00024cac <next_timeout>:

static int32_t next_timeout(void)
{
   24cac:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   24cae:	f7ff ffdb 	bl	24c68 <first>
   24cb2:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   24cb4:	f7ff ffee 	bl	24c94 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   24cb8:	b17c      	cbz	r4, 24cda <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   24cba:	6923      	ldr	r3, [r4, #16]
   24cbc:	6962      	ldr	r2, [r4, #20]
   24cbe:	1a1b      	subs	r3, r3, r0
   24cc0:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   24cc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   24cc8:	f172 0100 	sbcs.w	r1, r2, #0
   24ccc:	da08      	bge.n	24ce0 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   24cce:	2a00      	cmp	r2, #0
   24cd0:	db01      	blt.n	24cd6 <next_timeout+0x2a>
   24cd2:	4618      	mov	r0, r3
   24cd4:	e006      	b.n	24ce4 <next_timeout+0x38>
   24cd6:	2300      	movs	r3, #0
   24cd8:	e7fb      	b.n	24cd2 <next_timeout+0x26>
		ret = MAX_WAIT;
   24cda:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   24cde:	e001      	b.n	24ce4 <next_timeout+0x38>
   24ce0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   24ce4:	4b03      	ldr	r3, [pc, #12]	; (24cf4 <next_timeout+0x48>)
   24ce6:	691b      	ldr	r3, [r3, #16]
   24ce8:	b113      	cbz	r3, 24cf0 <next_timeout+0x44>
   24cea:	4283      	cmp	r3, r0
   24cec:	da00      	bge.n	24cf0 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
   24cee:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   24cf0:	bd10      	pop	{r4, pc}
   24cf2:	bf00      	nop
   24cf4:	20008e80 	.word	0x20008e80

00024cf8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
   24cfc:	bf08      	it	eq
   24cfe:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   24d02:	d07b      	beq.n	24dfc <z_add_timeout+0x104>
{
   24d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24d08:	4604      	mov	r4, r0
   24d0a:	4692      	mov	sl, r2
   24d0c:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   24d0e:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   24d10:	2300      	movs	r3, #0
	__asm__ volatile(
   24d12:	f04f 0240 	mov.w	r2, #64	; 0x40
   24d16:	f3ef 8711 	mrs	r7, BASEPRI
   24d1a:	f382 8812 	msr	BASEPRI_MAX, r2
   24d1e:	f3bf 8f6f 	isb	sy
   24d22:	e026      	b.n	24d72 <z_add_timeout+0x7a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   24d24:	f11a 0801 	adds.w	r8, sl, #1
   24d28:	f145 0900 	adc.w	r9, r5, #0
   24d2c:	f7ff ffb2 	bl	24c94 <elapsed>
   24d30:	eb18 0300 	adds.w	r3, r8, r0
   24d34:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
   24d38:	6123      	str	r3, [r4, #16]
   24d3a:	6160      	str	r0, [r4, #20]
   24d3c:	e03b      	b.n	24db6 <z_add_timeout+0xbe>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   24d3e:	1a52      	subs	r2, r2, r1
   24d40:	eb66 0303 	sbc.w	r3, r6, r3
   24d44:	6102      	str	r2, [r0, #16]
   24d46:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
   24d48:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
   24d4a:	6063      	str	r3, [r4, #4]
	node->next = successor;
   24d4c:	6020      	str	r0, [r4, #0]
	prev->next = node;
   24d4e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   24d50:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   24d52:	e005      	b.n	24d60 <z_add_timeout+0x68>
	sys_dnode_t *const tail = list->tail;
   24d54:	4b2a      	ldr	r3, [pc, #168]	; (24e00 <z_add_timeout+0x108>)
   24d56:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   24d58:	6023      	str	r3, [r4, #0]
	node->prev = tail;
   24d5a:	6062      	str	r2, [r4, #4]
	tail->next = node;
   24d5c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   24d5e:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   24d60:	f7ff ff82 	bl	24c68 <first>
   24d64:	4284      	cmp	r4, r0
   24d66:	d03a      	beq.n	24dde <z_add_timeout+0xe6>
	__asm__ volatile(
   24d68:	f387 8811 	msr	BASEPRI, r7
   24d6c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   24d70:	2301      	movs	r3, #1
   24d72:	2b00      	cmp	r3, #0
   24d74:	d140      	bne.n	24df8 <z_add_timeout+0x100>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   24d76:	4653      	mov	r3, sl
   24d78:	f06f 0101 	mvn.w	r1, #1
   24d7c:	ebb1 010a 	subs.w	r1, r1, sl
   24d80:	f04f 30ff 	mov.w	r0, #4294967295
   24d84:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   24d88:	2a00      	cmp	r2, #0
   24d8a:	dbcb      	blt.n	24d24 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   24d8c:	4a1d      	ldr	r2, [pc, #116]	; (24e04 <z_add_timeout+0x10c>)
   24d8e:	6811      	ldr	r1, [r2, #0]
   24d90:	6852      	ldr	r2, [r2, #4]
   24d92:	185b      	adds	r3, r3, r1
   24d94:	eb42 0205 	adc.w	r2, r2, r5
   24d98:	f06f 0101 	mvn.w	r1, #1
   24d9c:	1ac9      	subs	r1, r1, r3
   24d9e:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
   24da2:	4608      	mov	r0, r1
   24da4:	461a      	mov	r2, r3
   24da6:	2901      	cmp	r1, #1
   24da8:	f173 0300 	sbcs.w	r3, r3, #0
   24dac:	da01      	bge.n	24db2 <z_add_timeout+0xba>
   24dae:	2001      	movs	r0, #1
   24db0:	2200      	movs	r2, #0
   24db2:	6120      	str	r0, [r4, #16]
   24db4:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   24db6:	f7ff ff57 	bl	24c68 <first>
   24dba:	2800      	cmp	r0, #0
   24dbc:	d0ca      	beq.n	24d54 <z_add_timeout+0x5c>
			if (t->dticks > to->dticks) {
   24dbe:	6902      	ldr	r2, [r0, #16]
   24dc0:	6946      	ldr	r6, [r0, #20]
   24dc2:	6921      	ldr	r1, [r4, #16]
   24dc4:	6963      	ldr	r3, [r4, #20]
   24dc6:	4291      	cmp	r1, r2
   24dc8:	eb73 0e06 	sbcs.w	lr, r3, r6
   24dcc:	dbb7      	blt.n	24d3e <z_add_timeout+0x46>
			to->dticks -= t->dticks;
   24dce:	1a89      	subs	r1, r1, r2
   24dd0:	eb63 0306 	sbc.w	r3, r3, r6
   24dd4:	6121      	str	r1, [r4, #16]
   24dd6:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   24dd8:	f7ff ff50 	bl	24c7c <next>
   24ddc:	e7ed      	b.n	24dba <z_add_timeout+0xc2>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   24dde:	f7ff ff65 	bl	24cac <next_timeout>

			if (next_time == 0 ||
   24de2:	4603      	mov	r3, r0
   24de4:	b118      	cbz	r0, 24dee <z_add_timeout+0xf6>
			    _current_cpu->slice_ticks != next_time) {
   24de6:	4a08      	ldr	r2, [pc, #32]	; (24e08 <z_add_timeout+0x110>)
   24de8:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   24dea:	4282      	cmp	r2, r0
   24dec:	d0bc      	beq.n	24d68 <z_add_timeout+0x70>
				sys_clock_set_timeout(next_time, false);
   24dee:	2100      	movs	r1, #0
   24df0:	4618      	mov	r0, r3
   24df2:	f7fc faff 	bl	213f4 <sys_clock_set_timeout>
   24df6:	e7b7      	b.n	24d68 <z_add_timeout+0x70>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   24df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24dfc:	4770      	bx	lr
   24dfe:	bf00      	nop
   24e00:	200009f8 	.word	0x200009f8
   24e04:	20007990 	.word	0x20007990
   24e08:	20008e80 	.word	0x20008e80

00024e0c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   24e0c:	b570      	push	{r4, r5, r6, lr}
   24e0e:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   24e10:	f7ff fc08 	bl	24624 <z_time_slice>
	__asm__ volatile(
   24e14:	f04f 0340 	mov.w	r3, #64	; 0x40
   24e18:	f3ef 8611 	mrs	r6, BASEPRI
   24e1c:	f383 8812 	msr	BASEPRI_MAX, r3
   24e20:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   24e24:	4b28      	ldr	r3, [pc, #160]	; (24ec8 <sys_clock_announce+0xbc>)
   24e26:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   24e28:	e021      	b.n	24e6e <sys_clock_announce+0x62>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   24e2a:	4a28      	ldr	r2, [pc, #160]	; (24ecc <sys_clock_announce+0xc0>)
   24e2c:	6813      	ldr	r3, [r2, #0]
   24e2e:	6851      	ldr	r1, [r2, #4]
   24e30:	195b      	adds	r3, r3, r5
   24e32:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
   24e36:	6013      	str	r3, [r2, #0]
   24e38:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
   24e3a:	2200      	movs	r2, #0
   24e3c:	2300      	movs	r3, #0
   24e3e:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   24e42:	4620      	mov	r0, r4
   24e44:	f007 fc98 	bl	2c778 <remove_timeout>
	__asm__ volatile(
   24e48:	f386 8811 	msr	BASEPRI, r6
   24e4c:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   24e50:	68a3      	ldr	r3, [r4, #8]
   24e52:	4620      	mov	r0, r4
   24e54:	4798      	blx	r3
	__asm__ volatile(
   24e56:	f04f 0340 	mov.w	r3, #64	; 0x40
   24e5a:	f3ef 8611 	mrs	r6, BASEPRI
   24e5e:	f383 8812 	msr	BASEPRI_MAX, r3
   24e62:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
   24e66:	4a18      	ldr	r2, [pc, #96]	; (24ec8 <sys_clock_announce+0xbc>)
   24e68:	6813      	ldr	r3, [r2, #0]
   24e6a:	1b5b      	subs	r3, r3, r5
   24e6c:	6013      	str	r3, [r2, #0]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   24e6e:	f7ff fefb 	bl	24c68 <first>
   24e72:	4604      	mov	r4, r0
   24e74:	b138      	cbz	r0, 24e86 <sys_clock_announce+0x7a>
   24e76:	6905      	ldr	r5, [r0, #16]
   24e78:	6941      	ldr	r1, [r0, #20]
   24e7a:	4b13      	ldr	r3, [pc, #76]	; (24ec8 <sys_clock_announce+0xbc>)
   24e7c:	681a      	ldr	r2, [r3, #0]
   24e7e:	17d3      	asrs	r3, r2, #31
   24e80:	42aa      	cmp	r2, r5
   24e82:	418b      	sbcs	r3, r1
   24e84:	dad1      	bge.n	24e2a <sys_clock_announce+0x1e>
	}

	if (first() != NULL) {
   24e86:	b144      	cbz	r4, 24e9a <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
   24e88:	6923      	ldr	r3, [r4, #16]
   24e8a:	6962      	ldr	r2, [r4, #20]
   24e8c:	490e      	ldr	r1, [pc, #56]	; (24ec8 <sys_clock_announce+0xbc>)
   24e8e:	6809      	ldr	r1, [r1, #0]
   24e90:	1a5b      	subs	r3, r3, r1
   24e92:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
   24e96:	6123      	str	r3, [r4, #16]
   24e98:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
   24e9a:	4a0c      	ldr	r2, [pc, #48]	; (24ecc <sys_clock_announce+0xc0>)
   24e9c:	4d0a      	ldr	r5, [pc, #40]	; (24ec8 <sys_clock_announce+0xbc>)
   24e9e:	6828      	ldr	r0, [r5, #0]
   24ea0:	6813      	ldr	r3, [r2, #0]
   24ea2:	6851      	ldr	r1, [r2, #4]
   24ea4:	181b      	adds	r3, r3, r0
   24ea6:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
   24eaa:	6013      	str	r3, [r2, #0]
   24eac:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
   24eae:	2400      	movs	r4, #0
   24eb0:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   24eb2:	f7ff fefb 	bl	24cac <next_timeout>
   24eb6:	4621      	mov	r1, r4
   24eb8:	f7fc fa9c 	bl	213f4 <sys_clock_set_timeout>
	__asm__ volatile(
   24ebc:	f386 8811 	msr	BASEPRI, r6
   24ec0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   24ec4:	bd70      	pop	{r4, r5, r6, pc}
   24ec6:	bf00      	nop
   24ec8:	20008ec0 	.word	0x20008ec0
   24ecc:	20007990 	.word	0x20007990

00024ed0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   24ed0:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   24ed2:	2200      	movs	r2, #0
	__asm__ volatile(
   24ed4:	f04f 0340 	mov.w	r3, #64	; 0x40
   24ed8:	f3ef 8411 	mrs	r4, BASEPRI
   24edc:	f383 8812 	msr	BASEPRI_MAX, r3
   24ee0:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   24ee4:	4613      	mov	r3, r2
   24ee6:	4611      	mov	r1, r2
   24ee8:	e00c      	b.n	24f04 <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
   24eea:	f7ff fed3 	bl	24c94 <elapsed>
   24eee:	4a07      	ldr	r2, [pc, #28]	; (24f0c <sys_clock_tick_get+0x3c>)
   24ef0:	6813      	ldr	r3, [r2, #0]
   24ef2:	6851      	ldr	r1, [r2, #4]
   24ef4:	18c3      	adds	r3, r0, r3
   24ef6:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
   24efa:	f384 8811 	msr	BASEPRI, r4
   24efe:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   24f02:	2201      	movs	r2, #1
   24f04:	2a00      	cmp	r2, #0
   24f06:	d0f0      	beq.n	24eea <sys_clock_tick_get+0x1a>
	}
	return t;
}
   24f08:	4618      	mov	r0, r3
   24f0a:	bd10      	pop	{r4, pc}
   24f0c:	20007990 	.word	0x20007990

00024f10 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   24f10:	b538      	push	{r3, r4, r5, lr}
   24f12:	4604      	mov	r4, r0
	__asm__ volatile(
   24f14:	f04f 0340 	mov.w	r3, #64	; 0x40
   24f18:	f3ef 8511 	mrs	r5, BASEPRI
   24f1c:	f383 8812 	msr	BASEPRI_MAX, r3
   24f20:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   24f24:	6a82      	ldr	r2, [r0, #40]	; 0x28
   24f26:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   24f28:	ea52 0103 	orrs.w	r1, r2, r3
   24f2c:	d005      	beq.n	24f3a <z_timer_expiration_handler+0x2a>
   24f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
   24f32:	bf08      	it	eq
   24f34:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   24f38:	d128      	bne.n	24f8c <z_timer_expiration_handler+0x7c>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   24f3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   24f3c:	3301      	adds	r3, #1
   24f3e:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   24f40:	6a23      	ldr	r3, [r4, #32]
   24f42:	b173      	cbz	r3, 24f62 <z_timer_expiration_handler+0x52>
	__asm__ volatile(
   24f44:	f385 8811 	msr	BASEPRI, r5
   24f48:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   24f4c:	6a23      	ldr	r3, [r4, #32]
   24f4e:	4620      	mov	r0, r4
   24f50:	4798      	blx	r3
	__asm__ volatile(
   24f52:	f04f 0340 	mov.w	r3, #64	; 0x40
   24f56:	f3ef 8511 	mrs	r5, BASEPRI
   24f5a:	f383 8812 	msr	BASEPRI_MAX, r3
   24f5e:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   24f62:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   24f66:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24f68:	42a3      	cmp	r3, r4
   24f6a:	d038      	beq.n	24fde <z_timer_expiration_handler+0xce>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   24f6c:	2c00      	cmp	r4, #0
   24f6e:	d036      	beq.n	24fde <z_timer_expiration_handler+0xce>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
   24f70:	4620      	mov	r0, r4
   24f72:	f007 fa7f 	bl	2c474 <z_unpend_thread_no_timeout>
   24f76:	2300      	movs	r3, #0
   24f78:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	__asm__ volatile(
   24f7c:	f385 8811 	msr	BASEPRI, r5
   24f80:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
   24f84:	4620      	mov	r0, r4
   24f86:	f007 fade 	bl	2c546 <z_ready_thread>
}
   24f8a:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_uptime_ticks();
   24f8c:	f007 fc6f 	bl	2c86e <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   24f90:	3001      	adds	r0, #1
   24f92:	f141 0100 	adc.w	r1, r1, #0
   24f96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   24f98:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   24f9a:	18c0      	adds	r0, r0, r3
   24f9c:	eb41 0102 	adc.w	r1, r1, r2
   24fa0:	2801      	cmp	r0, #1
   24fa2:	f171 0100 	sbcs.w	r1, r1, #0
   24fa6:	da08      	bge.n	24fba <z_timer_expiration_handler+0xaa>
   24fa8:	f06f 0201 	mvn.w	r2, #1
   24fac:	f04f 33ff 	mov.w	r3, #4294967295
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   24fb0:	490d      	ldr	r1, [pc, #52]	; (24fe8 <z_timer_expiration_handler+0xd8>)
   24fb2:	4620      	mov	r0, r4
   24fb4:	f7ff fea0 	bl	24cf8 <z_add_timeout>
   24fb8:	e7bf      	b.n	24f3a <z_timer_expiration_handler+0x2a>
   24fba:	f007 fc58 	bl	2c86e <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   24fbe:	3001      	adds	r0, #1
   24fc0:	f141 0300 	adc.w	r3, r1, #0
   24fc4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   24fc6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   24fc8:	1880      	adds	r0, r0, r2
   24fca:	eb43 0301 	adc.w	r3, r3, r1
   24fce:	f06f 0201 	mvn.w	r2, #1
   24fd2:	1a12      	subs	r2, r2, r0
   24fd4:	f04f 31ff 	mov.w	r1, #4294967295
   24fd8:	eb61 0303 	sbc.w	r3, r1, r3
   24fdc:	e7e8      	b.n	24fb0 <z_timer_expiration_handler+0xa0>
   24fde:	f385 8811 	msr	BASEPRI, r5
   24fe2:	f3bf 8f6f 	isb	sy
		return;
   24fe6:	e7d0      	b.n	24f8a <z_timer_expiration_handler+0x7a>
   24fe8:	00024f11 	.word	0x00024f11

00024fec <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   24fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24ff0:	461e      	mov	r6, r3
   24ff2:	9f06      	ldr	r7, [sp, #24]
   24ff4:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   24ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
   24ffc:	bf08      	it	eq
   24ffe:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   25002:	d02f      	beq.n	25064 <z_impl_k_timer_start+0x78>
   25004:	4605      	mov	r5, r0
   25006:	4614      	mov	r4, r2
   25008:	4613      	mov	r3, r2
   2500a:	4631      	mov	r1, r6
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   2500c:	4640      	mov	r0, r8
   2500e:	f1b8 3fff 	cmp.w	r8, #4294967295
   25012:	bf08      	it	eq
   25014:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   25018:	d00d      	beq.n	25036 <z_impl_k_timer_start+0x4a>
   2501a:	ea57 0c08 	orrs.w	ip, r7, r8
   2501e:	d00a      	beq.n	25036 <z_impl_k_timer_start+0x4a>
	    Z_TICK_ABS(period.ticks) < 0) {
   25020:	f06f 0c01 	mvn.w	ip, #1
   25024:	ebbc 0c07 	subs.w	ip, ip, r7
   25028:	f04f 3cff 	mov.w	ip, #4294967295
   2502c:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   25030:	f1bc 0f00 	cmp.w	ip, #0
   25034:	db18      	blt.n	25068 <z_impl_k_timer_start+0x7c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   25036:	f06f 0201 	mvn.w	r2, #1
   2503a:	1ad2      	subs	r2, r2, r3
   2503c:	f04f 32ff 	mov.w	r2, #4294967295
   25040:	eb62 0201 	sbc.w	r2, r2, r1
   25044:	2a00      	cmp	r2, #0
   25046:	db1a      	blt.n	2507e <z_impl_k_timer_start+0x92>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
   25048:	4628      	mov	r0, r5
   2504a:	f007 fbac 	bl	2c7a6 <z_abort_timeout>
	timer->period = period;
   2504e:	62af      	str	r7, [r5, #40]	; 0x28
   25050:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
   25054:	2300      	movs	r3, #0
   25056:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   25058:	4622      	mov	r2, r4
   2505a:	4633      	mov	r3, r6
   2505c:	490e      	ldr	r1, [pc, #56]	; (25098 <z_impl_k_timer_start+0xac>)
   2505e:	4628      	mov	r0, r5
   25060:	f7ff fe4a 	bl	24cf8 <z_add_timeout>
		     duration);
}
   25064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
   25068:	2f02      	cmp	r7, #2
   2506a:	f170 0000 	sbcs.w	r0, r0, #0
   2506e:	da02      	bge.n	25076 <z_impl_k_timer_start+0x8a>
   25070:	2702      	movs	r7, #2
   25072:	f04f 0800 	mov.w	r8, #0
   25076:	3f01      	subs	r7, #1
   25078:	f148 38ff 	adc.w	r8, r8, #4294967295
   2507c:	e7db      	b.n	25036 <z_impl_k_timer_start+0x4a>
		duration.ticks = MAX(duration.ticks - 1, 0);
   2507e:	461c      	mov	r4, r3
   25080:	460e      	mov	r6, r1
   25082:	2b01      	cmp	r3, #1
   25084:	f171 0100 	sbcs.w	r1, r1, #0
   25088:	da01      	bge.n	2508e <z_impl_k_timer_start+0xa2>
   2508a:	2401      	movs	r4, #1
   2508c:	2600      	movs	r6, #0
   2508e:	3c01      	subs	r4, #1
   25090:	f146 36ff 	adc.w	r6, r6, #4294967295
   25094:	e7d8      	b.n	25048 <z_impl_k_timer_start+0x5c>
   25096:	bf00      	nop
   25098:	00024f11 	.word	0x00024f11

0002509c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   2509c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   250a0:	b083      	sub	sp, #12
   250a2:	4607      	mov	r7, r0
   250a4:	4616      	mov	r6, r2
   250a6:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   250a8:	4b28      	ldr	r3, [pc, #160]	; (2514c <z_impl_k_poll+0xb0>)
   250aa:	689c      	ldr	r4, [r3, #8]

	poller->is_polling = true;
   250ac:	2301      	movs	r3, #1
   250ae:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	poller->mode = MODE_POLL;
   250b2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   250b6:	ea55 0302 	orrs.w	r3, r5, r2
   250ba:	bf0c      	ite	eq
   250bc:	2301      	moveq	r3, #1
   250be:	2300      	movne	r3, #0
   250c0:	f104 0260 	add.w	r2, r4, #96	; 0x60
   250c4:	f007 fd0d 	bl	2cae2 <register_events>
   250c8:	4680      	mov	r8, r0
	__asm__ volatile(
   250ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   250ce:	f3ef 8111 	mrs	r1, BASEPRI
   250d2:	f383 8812 	msr	BASEPRI_MAX, r3
   250d6:	f3bf 8f6f 	isb	sy
   250da:	4689      	mov	r9, r1
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   250dc:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   250e0:	b30b      	cbz	r3, 25126 <z_impl_k_poll+0x8a>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   250e2:	2300      	movs	r3, #0
   250e4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   250e8:	ea55 0306 	orrs.w	r3, r5, r6
   250ec:	d026      	beq.n	2513c <z_impl_k_poll+0xa0>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   250ee:	9600      	str	r6, [sp, #0]
   250f0:	9501      	str	r5, [sp, #4]
   250f2:	4a17      	ldr	r2, [pc, #92]	; (25150 <z_impl_k_poll+0xb4>)
   250f4:	4817      	ldr	r0, [pc, #92]	; (25154 <z_impl_k_poll+0xb8>)
   250f6:	f7ff fb47 	bl	24788 <z_pend_curr>
   250fa:	4604      	mov	r4, r0
   250fc:	f04f 0340 	mov.w	r3, #64	; 0x40
   25100:	f3ef 8211 	mrs	r2, BASEPRI
   25104:	f383 8812 	msr	BASEPRI_MAX, r3
   25108:	f3bf 8f6f 	isb	sy
   2510c:	4615      	mov	r5, r2
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
   2510e:	4641      	mov	r1, r8
   25110:	4638      	mov	r0, r7
   25112:	f007 fc5a 	bl	2c9ca <clear_event_registrations>
	__asm__ volatile(
   25116:	f385 8811 	msr	BASEPRI, r5
   2511a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   2511e:	4620      	mov	r0, r4
   25120:	b003      	add	sp, #12
   25122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		clear_event_registrations(events, events_registered, key);
   25126:	460a      	mov	r2, r1
   25128:	4601      	mov	r1, r0
   2512a:	4638      	mov	r0, r7
   2512c:	f007 fc4d 	bl	2c9ca <clear_event_registrations>
   25130:	f389 8811 	msr	BASEPRI, r9
   25134:	f3bf 8f6f 	isb	sy
		return 0;
   25138:	2400      	movs	r4, #0
   2513a:	e7f0      	b.n	2511e <z_impl_k_poll+0x82>
   2513c:	f381 8811 	msr	BASEPRI, r1
   25140:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   25144:	f06f 040a 	mvn.w	r4, #10
   25148:	e7e9      	b.n	2511e <z_impl_k_poll+0x82>
   2514a:	bf00      	nop
   2514c:	20008e80 	.word	0x20008e80
   25150:	20000a00 	.word	0x20000a00
   25154:	20008ec4 	.word	0x20008ec4

00025158 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   25158:	b538      	push	{r3, r4, r5, lr}
   2515a:	4603      	mov	r3, r0
	__asm__ volatile(
   2515c:	f04f 0240 	mov.w	r2, #64	; 0x40
   25160:	f3ef 8511 	mrs	r5, BASEPRI
   25164:	f382 8812 	msr	BASEPRI_MAX, r2
   25168:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   2516c:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   2516e:	2201      	movs	r2, #1
   25170:	6082      	str	r2, [r0, #8]
	return list->head == list;
   25172:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   25174:	4283      	cmp	r3, r0
   25176:	d010      	beq.n	2519a <z_impl_k_poll_signal_raise+0x42>
	sys_dnode_t *const prev = node->prev;
   25178:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   2517a:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   2517c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2517e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   25180:	2300      	movs	r3, #0
   25182:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   25184:	6043      	str	r3, [r0, #4]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   25186:	2101      	movs	r1, #1
   25188:	f007 fd35 	bl	2cbf6 <signal_poll_event>
   2518c:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   2518e:	4629      	mov	r1, r5
   25190:	4805      	ldr	r0, [pc, #20]	; (251a8 <z_impl_k_poll_signal_raise+0x50>)
   25192:	f7ff f995 	bl	244c0 <z_reschedule>
	return rc;
}
   25196:	4620      	mov	r0, r4
   25198:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   2519a:	f385 8811 	msr	BASEPRI, r5
   2519e:	f3bf 8f6f 	isb	sy
		return 0;
   251a2:	2400      	movs	r4, #0
   251a4:	e7f7      	b.n	25196 <z_impl_k_poll_signal_raise+0x3e>
   251a6:	bf00      	nop
   251a8:	20008ec4 	.word	0x20008ec4

000251ac <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   251ac:	b538      	push	{r3, r4, r5, lr}
   251ae:	4604      	mov	r4, r0
   251b0:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   251b2:	f006 fe9e 	bl	2bef2 <k_is_in_isr>
   251b6:	b948      	cbnz	r0, 251cc <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   251b8:	4b05      	ldr	r3, [pc, #20]	; (251d0 <z_thread_aligned_alloc+0x24>)
   251ba:	689b      	ldr	r3, [r3, #8]
   251bc:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   251c0:	b118      	cbz	r0, 251ca <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   251c2:	462a      	mov	r2, r5
   251c4:	4621      	mov	r1, r4
   251c6:	f007 fd67 	bl	2cc98 <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   251ca:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
   251cc:	2000      	movs	r0, #0
	return ret;
   251ce:	e7fc      	b.n	251ca <z_thread_aligned_alloc+0x1e>
   251d0:	20008e80 	.word	0x20008e80

000251d4 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
   251d4:	b508      	push	{r3, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   251d6:	4802      	ldr	r0, [pc, #8]	; (251e0 <boot_banner+0xc>)
   251d8:	f000 fc36 	bl	25a48 <printk>
#endif /* CONFIG_BOOT_BANNER */
}
   251dc:	bd08      	pop	{r3, pc}
   251de:	bf00      	nop
   251e0:	0002ffdc 	.word	0x0002ffdc

000251e4 <ocrypto_ecdh_p256_public_key>:
   251e4:	b530      	push	{r4, r5, lr}
   251e6:	b099      	sub	sp, #100	; 0x64
   251e8:	4605      	mov	r5, r0
   251ea:	4668      	mov	r0, sp
   251ec:	f000 f828 	bl	25240 <ocrypto_sc_p256_from32bytes>
   251f0:	4669      	mov	r1, sp
   251f2:	4604      	mov	r4, r0
   251f4:	a808      	add	r0, sp, #32
   251f6:	f000 fa53 	bl	256a0 <ocrypto_curve_p256_scalarmult_base>
   251fa:	a908      	add	r1, sp, #32
   251fc:	4304      	orrs	r4, r0
   251fe:	4628      	mov	r0, r5
   25200:	f000 f98a 	bl	25518 <ocrypto_curve_p256_to64bytes>
   25204:	4620      	mov	r0, r4
   25206:	b019      	add	sp, #100	; 0x64
   25208:	bd30      	pop	{r4, r5, pc}
   2520a:	bf00      	nop

0002520c <ocrypto_ecdh_p256_common_secret>:
   2520c:	b570      	push	{r4, r5, r6, lr}
   2520e:	b098      	sub	sp, #96	; 0x60
   25210:	4605      	mov	r5, r0
   25212:	4668      	mov	r0, sp
   25214:	4616      	mov	r6, r2
   25216:	f000 f813 	bl	25240 <ocrypto_sc_p256_from32bytes>
   2521a:	4631      	mov	r1, r6
   2521c:	4604      	mov	r4, r0
   2521e:	a808      	add	r0, sp, #32
   25220:	f000 f946 	bl	254b0 <ocrypto_curve_p256_from64bytes>
   25224:	a908      	add	r1, sp, #32
   25226:	466a      	mov	r2, sp
   25228:	4304      	orrs	r4, r0
   2522a:	4608      	mov	r0, r1
   2522c:	f000 f982 	bl	25534 <ocrypto_curve_p256_scalarmult>
   25230:	a908      	add	r1, sp, #32
   25232:	4304      	orrs	r4, r0
   25234:	4628      	mov	r0, r5
   25236:	f000 f96d 	bl	25514 <ocrypto_curve_p256_to32bytes>
   2523a:	4620      	mov	r0, r4
   2523c:	b018      	add	sp, #96	; 0x60
   2523e:	bd70      	pop	{r4, r5, r6, pc}

00025240 <ocrypto_sc_p256_from32bytes>:
   25240:	b570      	push	{r4, r5, r6, lr}
   25242:	680b      	ldr	r3, [r1, #0]
   25244:	4e12      	ldr	r6, [pc, #72]	; (25290 <ocrypto_sc_p256_from32bytes+0x50>)
   25246:	ba1b      	rev	r3, r3
   25248:	61c3      	str	r3, [r0, #28]
   2524a:	684b      	ldr	r3, [r1, #4]
   2524c:	ba1b      	rev	r3, r3
   2524e:	6183      	str	r3, [r0, #24]
   25250:	688b      	ldr	r3, [r1, #8]
   25252:	ba1b      	rev	r3, r3
   25254:	6143      	str	r3, [r0, #20]
   25256:	68cb      	ldr	r3, [r1, #12]
   25258:	ba1b      	rev	r3, r3
   2525a:	6103      	str	r3, [r0, #16]
   2525c:	690b      	ldr	r3, [r1, #16]
   2525e:	ba1b      	rev	r3, r3
   25260:	60c3      	str	r3, [r0, #12]
   25262:	694b      	ldr	r3, [r1, #20]
   25264:	ba1b      	rev	r3, r3
   25266:	6083      	str	r3, [r0, #8]
   25268:	698b      	ldr	r3, [r1, #24]
   2526a:	ba1b      	rev	r3, r3
   2526c:	6043      	str	r3, [r0, #4]
   2526e:	69cb      	ldr	r3, [r1, #28]
   25270:	ba1b      	rev	r3, r3
   25272:	4632      	mov	r2, r6
   25274:	6003      	str	r3, [r0, #0]
   25276:	4601      	mov	r1, r0
   25278:	4604      	mov	r4, r0
   2527a:	f7da ff7b 	bl	174 <ocrypto_bigint_sub256>
   2527e:	4631      	mov	r1, r6
   25280:	4605      	mov	r5, r0
   25282:	4602      	mov	r2, r0
   25284:	4620      	mov	r0, r4
   25286:	f7da ff95 	bl	1b4 <ocrypto_bigint_cadd256>
   2528a:	1e68      	subs	r0, r5, #1
   2528c:	bd70      	pop	{r4, r5, r6, pc}
   2528e:	bf00      	nop
   25290:	0003000c 	.word	0x0003000c

00025294 <p256_zdblu>:
   25294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25298:	b088      	sub	sp, #32
   2529a:	460c      	mov	r4, r1
   2529c:	4606      	mov	r6, r0
   2529e:	f102 0120 	add.w	r1, r2, #32
   252a2:	4668      	mov	r0, sp
   252a4:	f106 0720 	add.w	r7, r6, #32
   252a8:	4690      	mov	r8, r2
   252aa:	f7db fa6d 	bl	788 <ocrypto_mod_p256_sqr>
   252ae:	466a      	mov	r2, sp
   252b0:	4669      	mov	r1, sp
   252b2:	4668      	mov	r0, sp
   252b4:	f7db f97a 	bl	5ac <ocrypto_mod_p256_add>
   252b8:	4669      	mov	r1, sp
   252ba:	4638      	mov	r0, r7
   252bc:	f7db fa64 	bl	788 <ocrypto_mod_p256_sqr>
   252c0:	463a      	mov	r2, r7
   252c2:	4639      	mov	r1, r7
   252c4:	4638      	mov	r0, r7
   252c6:	f104 0520 	add.w	r5, r4, #32
   252ca:	f7db f96f 	bl	5ac <ocrypto_mod_p256_add>
   252ce:	466a      	mov	r2, sp
   252d0:	4669      	mov	r1, sp
   252d2:	4668      	mov	r0, sp
   252d4:	f7db f96a 	bl	5ac <ocrypto_mod_p256_add>
   252d8:	4641      	mov	r1, r8
   252da:	4628      	mov	r0, r5
   252dc:	f7db fa54 	bl	788 <ocrypto_mod_p256_sqr>
   252e0:	466a      	mov	r2, sp
   252e2:	4641      	mov	r1, r8
   252e4:	4630      	mov	r0, r6
   252e6:	f7db fa37 	bl	758 <ocrypto_mod_p256_mul>
   252ea:	462a      	mov	r2, r5
   252ec:	4629      	mov	r1, r5
   252ee:	4668      	mov	r0, sp
   252f0:	f7db f95c 	bl	5ac <ocrypto_mod_p256_add>
   252f4:	462a      	mov	r2, r5
   252f6:	4669      	mov	r1, sp
   252f8:	4668      	mov	r0, sp
   252fa:	f7db f957 	bl	5ac <ocrypto_mod_p256_add>
   252fe:	4a12      	ldr	r2, [pc, #72]	; (25348 <p256_zdblu+0xb4>)
   25300:	4669      	mov	r1, sp
   25302:	4668      	mov	r0, sp
   25304:	f7db f952 	bl	5ac <ocrypto_mod_p256_add>
   25308:	4669      	mov	r1, sp
   2530a:	4620      	mov	r0, r4
   2530c:	f7db fa3c 	bl	788 <ocrypto_mod_p256_sqr>
   25310:	4632      	mov	r2, r6
   25312:	4621      	mov	r1, r4
   25314:	4620      	mov	r0, r4
   25316:	f7db f987 	bl	628 <ocrypto_mod_p256_sub>
   2531a:	4632      	mov	r2, r6
   2531c:	4621      	mov	r1, r4
   2531e:	4620      	mov	r0, r4
   25320:	f7db f982 	bl	628 <ocrypto_mod_p256_sub>
   25324:	4622      	mov	r2, r4
   25326:	4631      	mov	r1, r6
   25328:	4628      	mov	r0, r5
   2532a:	f7db f97d 	bl	628 <ocrypto_mod_p256_sub>
   2532e:	466a      	mov	r2, sp
   25330:	4629      	mov	r1, r5
   25332:	4628      	mov	r0, r5
   25334:	f7db fa10 	bl	758 <ocrypto_mod_p256_mul>
   25338:	463a      	mov	r2, r7
   2533a:	4629      	mov	r1, r5
   2533c:	4628      	mov	r0, r5
   2533e:	f7db f973 	bl	628 <ocrypto_mod_p256_sub>
   25342:	b008      	add	sp, #32
   25344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25348:	000300ac 	.word	0x000300ac

0002534c <p256_zaddc>:
   2534c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2534e:	b099      	sub	sp, #100	; 0x64
   25350:	4604      	mov	r4, r0
   25352:	460d      	mov	r5, r1
   25354:	460a      	mov	r2, r1
   25356:	4601      	mov	r1, r0
   25358:	4668      	mov	r0, sp
   2535a:	f7db f965 	bl	628 <ocrypto_mod_p256_sub>
   2535e:	4669      	mov	r1, sp
   25360:	4668      	mov	r0, sp
   25362:	f7db fa11 	bl	788 <ocrypto_mod_p256_sqr>
   25366:	466a      	mov	r2, sp
   25368:	4621      	mov	r1, r4
   2536a:	a808      	add	r0, sp, #32
   2536c:	f105 0620 	add.w	r6, r5, #32
   25370:	f104 0720 	add.w	r7, r4, #32
   25374:	f7db f9f0 	bl	758 <ocrypto_mod_p256_mul>
   25378:	466a      	mov	r2, sp
   2537a:	4629      	mov	r1, r5
   2537c:	4668      	mov	r0, sp
   2537e:	f7db f9eb 	bl	758 <ocrypto_mod_p256_mul>
   25382:	4632      	mov	r2, r6
   25384:	4639      	mov	r1, r7
   25386:	a810      	add	r0, sp, #64	; 0x40
   25388:	f7db f910 	bl	5ac <ocrypto_mod_p256_add>
   2538c:	4632      	mov	r2, r6
   2538e:	4639      	mov	r1, r7
   25390:	4630      	mov	r0, r6
   25392:	f7db f949 	bl	628 <ocrypto_mod_p256_sub>
   25396:	4631      	mov	r1, r6
   25398:	4628      	mov	r0, r5
   2539a:	f7db f9f5 	bl	788 <ocrypto_mod_p256_sqr>
   2539e:	466a      	mov	r2, sp
   253a0:	a908      	add	r1, sp, #32
   253a2:	4620      	mov	r0, r4
   253a4:	f7db f902 	bl	5ac <ocrypto_mod_p256_add>
   253a8:	4622      	mov	r2, r4
   253aa:	4629      	mov	r1, r5
   253ac:	4628      	mov	r0, r5
   253ae:	f7db f93b 	bl	628 <ocrypto_mod_p256_sub>
   253b2:	466a      	mov	r2, sp
   253b4:	a908      	add	r1, sp, #32
   253b6:	4668      	mov	r0, sp
   253b8:	f7db f936 	bl	628 <ocrypto_mod_p256_sub>
   253bc:	466a      	mov	r2, sp
   253be:	4639      	mov	r1, r7
   253c0:	4638      	mov	r0, r7
   253c2:	f7db f9c9 	bl	758 <ocrypto_mod_p256_mul>
   253c6:	462a      	mov	r2, r5
   253c8:	a908      	add	r1, sp, #32
   253ca:	4668      	mov	r0, sp
   253cc:	f7db f92c 	bl	628 <ocrypto_mod_p256_sub>
   253d0:	466a      	mov	r2, sp
   253d2:	4631      	mov	r1, r6
   253d4:	4630      	mov	r0, r6
   253d6:	f7db f9bf 	bl	758 <ocrypto_mod_p256_mul>
   253da:	463a      	mov	r2, r7
   253dc:	4631      	mov	r1, r6
   253de:	4630      	mov	r0, r6
   253e0:	f7db f922 	bl	628 <ocrypto_mod_p256_sub>
   253e4:	a910      	add	r1, sp, #64	; 0x40
   253e6:	4668      	mov	r0, sp
   253e8:	f7db f9ce 	bl	788 <ocrypto_mod_p256_sqr>
   253ec:	4622      	mov	r2, r4
   253ee:	4669      	mov	r1, sp
   253f0:	4620      	mov	r0, r4
   253f2:	f7db f919 	bl	628 <ocrypto_mod_p256_sub>
   253f6:	a908      	add	r1, sp, #32
   253f8:	4622      	mov	r2, r4
   253fa:	4608      	mov	r0, r1
   253fc:	f7db f914 	bl	628 <ocrypto_mod_p256_sub>
   25400:	a910      	add	r1, sp, #64	; 0x40
   25402:	aa08      	add	r2, sp, #32
   25404:	4608      	mov	r0, r1
   25406:	f7db f9a7 	bl	758 <ocrypto_mod_p256_mul>
   2540a:	463a      	mov	r2, r7
   2540c:	a910      	add	r1, sp, #64	; 0x40
   2540e:	4638      	mov	r0, r7
   25410:	f7db f90a 	bl	628 <ocrypto_mod_p256_sub>
   25414:	b019      	add	sp, #100	; 0x64
   25416:	bdf0      	pop	{r4, r5, r6, r7, pc}

00025418 <p256_zaddu>:
   25418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2541c:	b088      	sub	sp, #32
   2541e:	460c      	mov	r4, r1
   25420:	4605      	mov	r5, r0
   25422:	4690      	mov	r8, r2
   25424:	460a      	mov	r2, r1
   25426:	4601      	mov	r1, r0
   25428:	4668      	mov	r0, sp
   2542a:	f7db f8fd 	bl	628 <ocrypto_mod_p256_sub>
   2542e:	4669      	mov	r1, sp
   25430:	4668      	mov	r0, sp
   25432:	f7db f9a9 	bl	788 <ocrypto_mod_p256_sqr>
   25436:	466a      	mov	r2, sp
   25438:	4629      	mov	r1, r5
   2543a:	4628      	mov	r0, r5
   2543c:	f104 0620 	add.w	r6, r4, #32
   25440:	f7db f98a 	bl	758 <ocrypto_mod_p256_mul>
   25444:	f105 0720 	add.w	r7, r5, #32
   25448:	466a      	mov	r2, sp
   2544a:	4621      	mov	r1, r4
   2544c:	4668      	mov	r0, sp
   2544e:	f7db f983 	bl	758 <ocrypto_mod_p256_mul>
   25452:	4632      	mov	r2, r6
   25454:	4639      	mov	r1, r7
   25456:	4630      	mov	r0, r6
   25458:	f7db f8e6 	bl	628 <ocrypto_mod_p256_sub>
   2545c:	4631      	mov	r1, r6
   2545e:	4620      	mov	r0, r4
   25460:	f7db f992 	bl	788 <ocrypto_mod_p256_sqr>
   25464:	462a      	mov	r2, r5
   25466:	4621      	mov	r1, r4
   25468:	4620      	mov	r0, r4
   2546a:	f7db f8dd 	bl	628 <ocrypto_mod_p256_sub>
   2546e:	466a      	mov	r2, sp
   25470:	4621      	mov	r1, r4
   25472:	4620      	mov	r0, r4
   25474:	f7db f8d8 	bl	628 <ocrypto_mod_p256_sub>
   25478:	466a      	mov	r2, sp
   2547a:	4629      	mov	r1, r5
   2547c:	4640      	mov	r0, r8
   2547e:	f7db f8d3 	bl	628 <ocrypto_mod_p256_sub>
   25482:	4642      	mov	r2, r8
   25484:	4639      	mov	r1, r7
   25486:	4638      	mov	r0, r7
   25488:	f7db f966 	bl	758 <ocrypto_mod_p256_mul>
   2548c:	4622      	mov	r2, r4
   2548e:	4629      	mov	r1, r5
   25490:	4668      	mov	r0, sp
   25492:	f7db f8c9 	bl	628 <ocrypto_mod_p256_sub>
   25496:	466a      	mov	r2, sp
   25498:	4631      	mov	r1, r6
   2549a:	4630      	mov	r0, r6
   2549c:	f7db f95c 	bl	758 <ocrypto_mod_p256_mul>
   254a0:	463a      	mov	r2, r7
   254a2:	4631      	mov	r1, r6
   254a4:	4630      	mov	r0, r6
   254a6:	f7db f8bf 	bl	628 <ocrypto_mod_p256_sub>
   254aa:	b008      	add	sp, #32
   254ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000254b0 <ocrypto_curve_p256_from64bytes>:
   254b0:	b570      	push	{r4, r5, r6, lr}
   254b2:	f100 0620 	add.w	r6, r0, #32
   254b6:	b090      	sub	sp, #64	; 0x40
   254b8:	460d      	mov	r5, r1
   254ba:	4604      	mov	r4, r0
   254bc:	f000 f914 	bl	256e8 <ocrypto_mod_p256_from_bytes>
   254c0:	f105 0120 	add.w	r1, r5, #32
   254c4:	4630      	mov	r0, r6
   254c6:	f000 f90f 	bl	256e8 <ocrypto_mod_p256_from_bytes>
   254ca:	4621      	mov	r1, r4
   254cc:	a808      	add	r0, sp, #32
   254ce:	f7db f95b 	bl	788 <ocrypto_mod_p256_sqr>
   254d2:	a908      	add	r1, sp, #32
   254d4:	4608      	mov	r0, r1
   254d6:	4a0d      	ldr	r2, [pc, #52]	; (2550c <ocrypto_curve_p256_from64bytes+0x5c>)
   254d8:	f7db f868 	bl	5ac <ocrypto_mod_p256_add>
   254dc:	a908      	add	r1, sp, #32
   254de:	4622      	mov	r2, r4
   254e0:	4608      	mov	r0, r1
   254e2:	f7db f939 	bl	758 <ocrypto_mod_p256_mul>
   254e6:	a908      	add	r1, sp, #32
   254e8:	4a09      	ldr	r2, [pc, #36]	; (25510 <ocrypto_curve_p256_from64bytes+0x60>)
   254ea:	4608      	mov	r0, r1
   254ec:	f7db f85e 	bl	5ac <ocrypto_mod_p256_add>
   254f0:	4631      	mov	r1, r6
   254f2:	4668      	mov	r0, sp
   254f4:	f7db f948 	bl	788 <ocrypto_mod_p256_sqr>
   254f8:	2220      	movs	r2, #32
   254fa:	4669      	mov	r1, sp
   254fc:	eb0d 0002 	add.w	r0, sp, r2
   25500:	f7db f826 	bl	550 <ocrypto_constant_time_equal>
   25504:	3801      	subs	r0, #1
   25506:	b010      	add	sp, #64	; 0x40
   25508:	bd70      	pop	{r4, r5, r6, pc}
   2550a:	bf00      	nop
   2550c:	000300ac 	.word	0x000300ac
   25510:	000300cc 	.word	0x000300cc

00025514 <ocrypto_curve_p256_to32bytes>:
   25514:	f000 b902 	b.w	2571c <ocrypto_mod_p256_to_bytes>

00025518 <ocrypto_curve_p256_to64bytes>:
   25518:	b538      	push	{r3, r4, r5, lr}
   2551a:	4604      	mov	r4, r0
   2551c:	460d      	mov	r5, r1
   2551e:	f000 f8fd 	bl	2571c <ocrypto_mod_p256_to_bytes>
   25522:	f105 0120 	add.w	r1, r5, #32
   25526:	f104 0020 	add.w	r0, r4, #32
   2552a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2552e:	f000 b8f5 	b.w	2571c <ocrypto_mod_p256_to_bytes>
   25532:	bf00      	nop

00025534 <ocrypto_curve_p256_scalarmult>:
   25534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25538:	4613      	mov	r3, r2
   2553a:	b0b8      	sub	sp, #224	; 0xe0
   2553c:	4a54      	ldr	r2, [pc, #336]	; (25690 <ocrypto_curve_p256_scalarmult+0x15c>)
   2553e:	4689      	mov	r9, r1
   25540:	4680      	mov	r8, r0
   25542:	4619      	mov	r1, r3
   25544:	a810      	add	r0, sp, #64	; 0x40
   25546:	f7da fe15 	bl	174 <ocrypto_bigint_sub256>
   2554a:	4952      	ldr	r1, [pc, #328]	; (25694 <ocrypto_curve_p256_scalarmult+0x160>)
   2554c:	4602      	mov	r2, r0
   2554e:	a810      	add	r0, sp, #64	; 0x40
   25550:	f7da fe30 	bl	1b4 <ocrypto_bigint_cadd256>
   25554:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   25556:	494e      	ldr	r1, [pc, #312]	; (25690 <ocrypto_curve_p256_scalarmult+0x15c>)
   25558:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   2555c:	4607      	mov	r7, r0
   2555e:	f1c6 0201 	rsb	r2, r6, #1
   25562:	a810      	add	r0, sp, #64	; 0x40
   25564:	f7da fe26 	bl	1b4 <ocrypto_bigint_cadd256>
   25568:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2556a:	464a      	mov	r2, r9
   2556c:	ea6f 0a03 	mvn.w	sl, r3
   25570:	a928      	add	r1, sp, #160	; 0xa0
   25572:	a818      	add	r0, sp, #96	; 0x60
   25574:	f7ff fe8e 	bl	25294 <p256_zdblu>
   25578:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   2557c:	a920      	add	r1, sp, #128	; 0x80
   2557e:	f1ca 0201 	rsb	r2, sl, #1
   25582:	4608      	mov	r0, r1
   25584:	f000 f892 	bl	256ac <ocrypto_mod_p256_cneg>
   25588:	f1c7 0701 	rsb	r7, r7, #1
   2558c:	24fe      	movs	r4, #254	; 0xfe
   2558e:	466a      	mov	r2, sp
   25590:	a918      	add	r1, sp, #96	; 0x60
   25592:	a828      	add	r0, sp, #160	; 0xa0
   25594:	f7ff ff40 	bl	25418 <p256_zaddu>
   25598:	1162      	asrs	r2, r4, #5
   2559a:	ab38      	add	r3, sp, #224	; 0xe0
   2559c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   255a0:	f004 011f 	and.w	r1, r4, #31
   255a4:	f852 3ca0 	ldr.w	r3, [r2, #-160]
   255a8:	40cb      	lsrs	r3, r1
   255aa:	4655      	mov	r5, sl
   255ac:	f003 0a01 	and.w	sl, r3, #1
   255b0:	ea8a 0505 	eor.w	r5, sl, r5
   255b4:	462a      	mov	r2, r5
   255b6:	a928      	add	r1, sp, #160	; 0xa0
   255b8:	a818      	add	r0, sp, #96	; 0x60
   255ba:	f7da fe57 	bl	26c <ocrypto_bigint_cswap256>
   255be:	462a      	mov	r2, r5
   255c0:	a930      	add	r1, sp, #192	; 0xc0
   255c2:	a820      	add	r0, sp, #128	; 0x80
   255c4:	f7da fe52 	bl	26c <ocrypto_bigint_cswap256>
   255c8:	3c01      	subs	r4, #1
   255ca:	a928      	add	r1, sp, #160	; 0xa0
   255cc:	a818      	add	r0, sp, #96	; 0x60
   255ce:	f7ff febd 	bl	2534c <p256_zaddc>
   255d2:	1c63      	adds	r3, r4, #1
   255d4:	d1db      	bne.n	2558e <ocrypto_curve_p256_scalarmult+0x5a>
   255d6:	f1ca 0201 	rsb	r2, sl, #1
   255da:	a920      	add	r1, sp, #128	; 0x80
   255dc:	a808      	add	r0, sp, #32
   255de:	f000 f865 	bl	256ac <ocrypto_mod_p256_cneg>
   255e2:	ea86 060a 	eor.w	r6, r6, sl
   255e6:	466a      	mov	r2, sp
   255e8:	a918      	add	r1, sp, #96	; 0x60
   255ea:	a828      	add	r0, sp, #160	; 0xa0
   255ec:	f7ff ff14 	bl	25418 <p256_zaddu>
   255f0:	a928      	add	r1, sp, #160	; 0xa0
   255f2:	4632      	mov	r2, r6
   255f4:	a818      	add	r0, sp, #96	; 0x60
   255f6:	f7da fe39 	bl	26c <ocrypto_bigint_cswap256>
   255fa:	4632      	mov	r2, r6
   255fc:	a930      	add	r1, sp, #192	; 0xc0
   255fe:	a820      	add	r0, sp, #128	; 0x80
   25600:	f7da fe34 	bl	26c <ocrypto_bigint_cswap256>
   25604:	a908      	add	r1, sp, #32
   25606:	466a      	mov	r2, sp
   25608:	4608      	mov	r0, r1
   2560a:	f7db f8a5 	bl	758 <ocrypto_mod_p256_mul>
   2560e:	a908      	add	r1, sp, #32
   25610:	4608      	mov	r0, r1
   25612:	f000 f89d 	bl	25750 <ocrypto_mod_p256_inv>
   25616:	a908      	add	r1, sp, #32
   25618:	f108 0420 	add.w	r4, r8, #32
   2561c:	f109 0220 	add.w	r2, r9, #32
   25620:	4608      	mov	r0, r1
   25622:	f7db f899 	bl	758 <ocrypto_mod_p256_mul>
   25626:	a920      	add	r1, sp, #128	; 0x80
   25628:	aa08      	add	r2, sp, #32
   2562a:	4620      	mov	r0, r4
   2562c:	f7db f894 	bl	758 <ocrypto_mod_p256_mul>
   25630:	aa08      	add	r2, sp, #32
   25632:	a918      	add	r1, sp, #96	; 0x60
   25634:	4668      	mov	r0, sp
   25636:	f7db f88f 	bl	758 <ocrypto_mod_p256_mul>
   2563a:	4669      	mov	r1, sp
   2563c:	4668      	mov	r0, sp
   2563e:	f7db f8a3 	bl	788 <ocrypto_mod_p256_sqr>
   25642:	aa18      	add	r2, sp, #96	; 0x60
   25644:	4669      	mov	r1, sp
   25646:	a808      	add	r0, sp, #32
   25648:	f7db f886 	bl	758 <ocrypto_mod_p256_mul>
   2564c:	4621      	mov	r1, r4
   2564e:	4668      	mov	r0, sp
   25650:	f7db f89a 	bl	788 <ocrypto_mod_p256_sqr>
   25654:	aa08      	add	r2, sp, #32
   25656:	4669      	mov	r1, sp
   25658:	4610      	mov	r0, r2
   2565a:	f7da ffe5 	bl	628 <ocrypto_mod_p256_sub>
   2565e:	4a0e      	ldr	r2, [pc, #56]	; (25698 <ocrypto_curve_p256_scalarmult+0x164>)
   25660:	a908      	add	r1, sp, #32
   25662:	4668      	mov	r0, sp
   25664:	f7da ffe0 	bl	628 <ocrypto_mod_p256_sub>
   25668:	4620      	mov	r0, r4
   2566a:	2120      	movs	r1, #32
   2566c:	f7da ff84 	bl	578 <ocrypto_constant_time_is_zero>
   25670:	a908      	add	r1, sp, #32
   25672:	4243      	negs	r3, r0
   25674:	4602      	mov	r2, r0
   25676:	4668      	mov	r0, sp
   25678:	431f      	orrs	r7, r3
   2567a:	f7da fdf7 	bl	26c <ocrypto_bigint_cswap256>
   2567e:	4640      	mov	r0, r8
   25680:	4a06      	ldr	r2, [pc, #24]	; (2569c <ocrypto_curve_p256_scalarmult+0x168>)
   25682:	4669      	mov	r1, sp
   25684:	f7db f868 	bl	758 <ocrypto_mod_p256_mul>
   25688:	4638      	mov	r0, r7
   2568a:	b038      	add	sp, #224	; 0xe0
   2568c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25690:	000300ec 	.word	0x000300ec
   25694:	0003006c 	.word	0x0003006c
   25698:	000300cc 	.word	0x000300cc
   2569c:	0003008c 	.word	0x0003008c

000256a0 <ocrypto_curve_p256_scalarmult_base>:
   256a0:	460a      	mov	r2, r1
   256a2:	4901      	ldr	r1, [pc, #4]	; (256a8 <ocrypto_curve_p256_scalarmult_base+0x8>)
   256a4:	f7ff bf46 	b.w	25534 <ocrypto_curve_p256_scalarmult>
   256a8:	0003002c 	.word	0x0003002c

000256ac <ocrypto_mod_p256_cneg>:
   256ac:	b570      	push	{r4, r5, r6, lr}
   256ae:	b088      	sub	sp, #32
   256b0:	4604      	mov	r4, r0
   256b2:	460d      	mov	r5, r1
   256b4:	4616      	mov	r6, r2
   256b6:	2100      	movs	r1, #0
   256b8:	2220      	movs	r2, #32
   256ba:	4668      	mov	r0, sp
   256bc:	f001 ff35 	bl	2752a <memset>
   256c0:	2300      	movs	r3, #0
   256c2:	4629      	mov	r1, r5
   256c4:	2220      	movs	r2, #32
   256c6:	4620      	mov	r0, r4
   256c8:	9300      	str	r3, [sp, #0]
   256ca:	f001 feff 	bl	274cc <memcpy>
   256ce:	462a      	mov	r2, r5
   256d0:	4669      	mov	r1, sp
   256d2:	4668      	mov	r0, sp
   256d4:	f7da ffa8 	bl	628 <ocrypto_mod_p256_sub>
   256d8:	4632      	mov	r2, r6
   256da:	4669      	mov	r1, sp
   256dc:	4620      	mov	r0, r4
   256de:	f7da fdc5 	bl	26c <ocrypto_bigint_cswap256>
   256e2:	b008      	add	sp, #32
   256e4:	bd70      	pop	{r4, r5, r6, pc}
   256e6:	bf00      	nop

000256e8 <ocrypto_mod_p256_from_bytes>:
   256e8:	680b      	ldr	r3, [r1, #0]
   256ea:	ba1b      	rev	r3, r3
   256ec:	61c3      	str	r3, [r0, #28]
   256ee:	684b      	ldr	r3, [r1, #4]
   256f0:	ba1b      	rev	r3, r3
   256f2:	6183      	str	r3, [r0, #24]
   256f4:	688b      	ldr	r3, [r1, #8]
   256f6:	ba1b      	rev	r3, r3
   256f8:	6143      	str	r3, [r0, #20]
   256fa:	68cb      	ldr	r3, [r1, #12]
   256fc:	ba1b      	rev	r3, r3
   256fe:	6103      	str	r3, [r0, #16]
   25700:	690b      	ldr	r3, [r1, #16]
   25702:	ba1b      	rev	r3, r3
   25704:	60c3      	str	r3, [r0, #12]
   25706:	694b      	ldr	r3, [r1, #20]
   25708:	ba1b      	rev	r3, r3
   2570a:	6083      	str	r3, [r0, #8]
   2570c:	698b      	ldr	r3, [r1, #24]
   2570e:	ba1b      	rev	r3, r3
   25710:	6043      	str	r3, [r0, #4]
   25712:	69cb      	ldr	r3, [r1, #28]
   25714:	ba1b      	rev	r3, r3
   25716:	6003      	str	r3, [r0, #0]
   25718:	4770      	bx	lr
   2571a:	bf00      	nop

0002571c <ocrypto_mod_p256_to_bytes>:
   2571c:	69cb      	ldr	r3, [r1, #28]
   2571e:	ba1b      	rev	r3, r3
   25720:	6003      	str	r3, [r0, #0]
   25722:	698b      	ldr	r3, [r1, #24]
   25724:	ba1b      	rev	r3, r3
   25726:	6043      	str	r3, [r0, #4]
   25728:	694b      	ldr	r3, [r1, #20]
   2572a:	ba1b      	rev	r3, r3
   2572c:	6083      	str	r3, [r0, #8]
   2572e:	690b      	ldr	r3, [r1, #16]
   25730:	ba1b      	rev	r3, r3
   25732:	60c3      	str	r3, [r0, #12]
   25734:	68cb      	ldr	r3, [r1, #12]
   25736:	ba1b      	rev	r3, r3
   25738:	6103      	str	r3, [r0, #16]
   2573a:	688b      	ldr	r3, [r1, #8]
   2573c:	ba1b      	rev	r3, r3
   2573e:	6143      	str	r3, [r0, #20]
   25740:	684b      	ldr	r3, [r1, #4]
   25742:	ba1b      	rev	r3, r3
   25744:	6183      	str	r3, [r0, #24]
   25746:	680b      	ldr	r3, [r1, #0]
   25748:	ba1b      	rev	r3, r3
   2574a:	61c3      	str	r3, [r0, #28]
   2574c:	4770      	bx	lr
   2574e:	bf00      	nop

00025750 <ocrypto_mod_p256_inv>:
   25750:	b570      	push	{r4, r5, r6, lr}
   25752:	b098      	sub	sp, #96	; 0x60
   25754:	460d      	mov	r5, r1
   25756:	4606      	mov	r6, r0
   25758:	a810      	add	r0, sp, #64	; 0x40
   2575a:	f7db f815 	bl	788 <ocrypto_mod_p256_sqr>
   2575e:	462a      	mov	r2, r5
   25760:	a910      	add	r1, sp, #64	; 0x40
   25762:	4668      	mov	r0, sp
   25764:	f7da fff8 	bl	758 <ocrypto_mod_p256_mul>
   25768:	4669      	mov	r1, sp
   2576a:	a810      	add	r0, sp, #64	; 0x40
   2576c:	f7db f80c 	bl	788 <ocrypto_mod_p256_sqr>
   25770:	a910      	add	r1, sp, #64	; 0x40
   25772:	4608      	mov	r0, r1
   25774:	f7db f808 	bl	788 <ocrypto_mod_p256_sqr>
   25778:	466a      	mov	r2, sp
   2577a:	a910      	add	r1, sp, #64	; 0x40
   2577c:	a808      	add	r0, sp, #32
   2577e:	f7da ffeb 	bl	758 <ocrypto_mod_p256_mul>
   25782:	a908      	add	r1, sp, #32
   25784:	a810      	add	r0, sp, #64	; 0x40
   25786:	f7da ffff 	bl	788 <ocrypto_mod_p256_sqr>
   2578a:	a910      	add	r1, sp, #64	; 0x40
   2578c:	4608      	mov	r0, r1
   2578e:	f7da fffb 	bl	788 <ocrypto_mod_p256_sqr>
   25792:	a910      	add	r1, sp, #64	; 0x40
   25794:	4608      	mov	r0, r1
   25796:	f7da fff7 	bl	788 <ocrypto_mod_p256_sqr>
   2579a:	a910      	add	r1, sp, #64	; 0x40
   2579c:	4608      	mov	r0, r1
   2579e:	f7da fff3 	bl	788 <ocrypto_mod_p256_sqr>
   257a2:	a910      	add	r1, sp, #64	; 0x40
   257a4:	aa08      	add	r2, sp, #32
   257a6:	4608      	mov	r0, r1
   257a8:	f7da ffd6 	bl	758 <ocrypto_mod_p256_mul>
   257ac:	a910      	add	r1, sp, #64	; 0x40
   257ae:	4608      	mov	r0, r1
   257b0:	f7da ffea 	bl	788 <ocrypto_mod_p256_sqr>
   257b4:	a910      	add	r1, sp, #64	; 0x40
   257b6:	4608      	mov	r0, r1
   257b8:	f7da ffe6 	bl	788 <ocrypto_mod_p256_sqr>
   257bc:	a910      	add	r1, sp, #64	; 0x40
   257be:	466a      	mov	r2, sp
   257c0:	a808      	add	r0, sp, #32
   257c2:	f7da ffc9 	bl	758 <ocrypto_mod_p256_mul>
   257c6:	2405      	movs	r4, #5
   257c8:	a908      	add	r1, sp, #32
   257ca:	a810      	add	r0, sp, #64	; 0x40
   257cc:	f7da ffdc 	bl	788 <ocrypto_mod_p256_sqr>
   257d0:	a910      	add	r1, sp, #64	; 0x40
   257d2:	4608      	mov	r0, r1
   257d4:	f7da ffd8 	bl	788 <ocrypto_mod_p256_sqr>
   257d8:	3c01      	subs	r4, #1
   257da:	a910      	add	r1, sp, #64	; 0x40
   257dc:	d1f5      	bne.n	257ca <ocrypto_mod_p256_inv+0x7a>
   257de:	aa08      	add	r2, sp, #32
   257e0:	4608      	mov	r0, r1
   257e2:	f7da ffb9 	bl	758 <ocrypto_mod_p256_mul>
   257e6:	2405      	movs	r4, #5
   257e8:	a910      	add	r1, sp, #64	; 0x40
   257ea:	4608      	mov	r0, r1
   257ec:	f7da ffcc 	bl	788 <ocrypto_mod_p256_sqr>
   257f0:	a910      	add	r1, sp, #64	; 0x40
   257f2:	4608      	mov	r0, r1
   257f4:	f7da ffc8 	bl	788 <ocrypto_mod_p256_sqr>
   257f8:	3c01      	subs	r4, #1
   257fa:	d1f5      	bne.n	257e8 <ocrypto_mod_p256_inv+0x98>
   257fc:	a910      	add	r1, sp, #64	; 0x40
   257fe:	aa08      	add	r2, sp, #32
   25800:	4608      	mov	r0, r1
   25802:	f7da ffa9 	bl	758 <ocrypto_mod_p256_mul>
   25806:	a910      	add	r1, sp, #64	; 0x40
   25808:	a808      	add	r0, sp, #32
   2580a:	f7da ffbd 	bl	788 <ocrypto_mod_p256_sqr>
   2580e:	a908      	add	r1, sp, #32
   25810:	4608      	mov	r0, r1
   25812:	f7da ffb9 	bl	788 <ocrypto_mod_p256_sqr>
   25816:	a908      	add	r1, sp, #32
   25818:	466a      	mov	r2, sp
   2581a:	4668      	mov	r0, sp
   2581c:	f7da ff9c 	bl	758 <ocrypto_mod_p256_mul>
   25820:	2410      	movs	r4, #16
   25822:	4669      	mov	r1, sp
   25824:	a810      	add	r0, sp, #64	; 0x40
   25826:	f7da ffaf 	bl	788 <ocrypto_mod_p256_sqr>
   2582a:	a910      	add	r1, sp, #64	; 0x40
   2582c:	4608      	mov	r0, r1
   2582e:	f7da ffab 	bl	788 <ocrypto_mod_p256_sqr>
   25832:	3c01      	subs	r4, #1
   25834:	a910      	add	r1, sp, #64	; 0x40
   25836:	d1f5      	bne.n	25824 <ocrypto_mod_p256_inv+0xd4>
   25838:	462a      	mov	r2, r5
   2583a:	4608      	mov	r0, r1
   2583c:	f7da ff8c 	bl	758 <ocrypto_mod_p256_mul>
   25840:	2440      	movs	r4, #64	; 0x40
   25842:	a910      	add	r1, sp, #64	; 0x40
   25844:	4608      	mov	r0, r1
   25846:	f7da ff9f 	bl	788 <ocrypto_mod_p256_sqr>
   2584a:	a910      	add	r1, sp, #64	; 0x40
   2584c:	4608      	mov	r0, r1
   2584e:	f7da ff9b 	bl	788 <ocrypto_mod_p256_sqr>
   25852:	3c01      	subs	r4, #1
   25854:	d1f5      	bne.n	25842 <ocrypto_mod_p256_inv+0xf2>
   25856:	a910      	add	r1, sp, #64	; 0x40
   25858:	466a      	mov	r2, sp
   2585a:	4608      	mov	r0, r1
   2585c:	f7da ff7c 	bl	758 <ocrypto_mod_p256_mul>
   25860:	2410      	movs	r4, #16
   25862:	a910      	add	r1, sp, #64	; 0x40
   25864:	4608      	mov	r0, r1
   25866:	f7da ff8f 	bl	788 <ocrypto_mod_p256_sqr>
   2586a:	a910      	add	r1, sp, #64	; 0x40
   2586c:	4608      	mov	r0, r1
   2586e:	f7da ff8b 	bl	788 <ocrypto_mod_p256_sqr>
   25872:	3c01      	subs	r4, #1
   25874:	d1f5      	bne.n	25862 <ocrypto_mod_p256_inv+0x112>
   25876:	a910      	add	r1, sp, #64	; 0x40
   25878:	466a      	mov	r2, sp
   2587a:	4608      	mov	r0, r1
   2587c:	f7da ff6c 	bl	758 <ocrypto_mod_p256_mul>
   25880:	2410      	movs	r4, #16
   25882:	a910      	add	r1, sp, #64	; 0x40
   25884:	4608      	mov	r0, r1
   25886:	f7da ff7f 	bl	788 <ocrypto_mod_p256_sqr>
   2588a:	a910      	add	r1, sp, #64	; 0x40
   2588c:	4608      	mov	r0, r1
   2588e:	f7da ff7b 	bl	788 <ocrypto_mod_p256_sqr>
   25892:	3c01      	subs	r4, #1
   25894:	d1f5      	bne.n	25882 <ocrypto_mod_p256_inv+0x132>
   25896:	a910      	add	r1, sp, #64	; 0x40
   25898:	aa08      	add	r2, sp, #32
   2589a:	4608      	mov	r0, r1
   2589c:	f7da ff5c 	bl	758 <ocrypto_mod_p256_mul>
   258a0:	462a      	mov	r2, r5
   258a2:	a910      	add	r1, sp, #64	; 0x40
   258a4:	4630      	mov	r0, r6
   258a6:	f7da ff57 	bl	758 <ocrypto_mod_p256_mul>
   258aa:	b018      	add	sp, #96	; 0x60
   258ac:	bd70      	pop	{r4, r5, r6, pc}
   258ae:	bf00      	nop

000258b0 <cbprintf_via_va_list>:
{
   258b0:	b510      	push	{r4, lr}
   258b2:	460c      	mov	r4, r1
   258b4:	4611      	mov	r1, r2
   258b6:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
   258b8:	9b02      	ldr	r3, [sp, #8]
   258ba:	47a0      	blx	r4
}
   258bc:	bd10      	pop	{r4, pc}

000258be <is_fmt_spec>:
	return (c >= 64) && (c <= 122);
   258be:	3840      	subs	r0, #64	; 0x40
   258c0:	b2c0      	uxtb	r0, r0
}
   258c2:	283a      	cmp	r0, #58	; 0x3a
   258c4:	bf8c      	ite	hi
   258c6:	2000      	movhi	r0, #0
   258c8:	2001      	movls	r0, #1
   258ca:	4770      	bx	lr

000258cc <get_package_len>:
{
   258cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   258ce:	4606      	mov	r6, r0
	args_size = buf[0] * sizeof(int);
   258d0:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   258d2:	7845      	ldrb	r5, [r0, #1]
	ros_nbr   = buf[2];
   258d4:	7884      	ldrb	r4, [r0, #2]
	buf += ros_nbr;
   258d6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   258da:	4404      	add	r4, r0
	for (int i = 0; i < s_nbr; i++) {
   258dc:	2700      	movs	r7, #0
   258de:	e006      	b.n	258ee <get_package_len+0x22>
		buf++;
   258e0:	3401      	adds	r4, #1
		buf += strlen((const char *)buf) + 1;
   258e2:	4620      	mov	r0, r4
   258e4:	f001 fdc2 	bl	2746c <strlen>
   258e8:	3001      	adds	r0, #1
   258ea:	4404      	add	r4, r0
	for (int i = 0; i < s_nbr; i++) {
   258ec:	3701      	adds	r7, #1
   258ee:	42af      	cmp	r7, r5
   258f0:	d3f6      	bcc.n	258e0 <get_package_len+0x14>
}
   258f2:	1ba0      	subs	r0, r4, r6
   258f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000258f6 <append_string>:
{
   258f6:	b570      	push	{r4, r5, r6, lr}
   258f8:	4614      	mov	r4, r2
	if (cb == NULL) {
   258fa:	b138      	cbz	r0, 2590c <append_string+0x16>
   258fc:	460d      	mov	r5, r1
   258fe:	4619      	mov	r1, r3
   25900:	4606      	mov	r6, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   25902:	b143      	cbz	r3, 25916 <append_string+0x20>
	return cb(str, strl, ctx);
   25904:	462a      	mov	r2, r5
   25906:	4620      	mov	r0, r4
   25908:	47b0      	blx	r6
}
   2590a:	bd70      	pop	{r4, r5, r6, pc}
		return 1 + strlen(str);
   2590c:	4610      	mov	r0, r2
   2590e:	f001 fdad 	bl	2746c <strlen>
   25912:	3001      	adds	r0, #1
   25914:	e7f9      	b.n	2590a <append_string+0x14>
	strl = strl > 0 ? strl : strlen(str) + 1;
   25916:	4610      	mov	r0, r2
   25918:	f001 fda8 	bl	2746c <strlen>
   2591c:	b283      	uxth	r3, r0
   2591e:	3301      	adds	r3, #1
   25920:	b299      	uxth	r1, r3
   25922:	e7ef      	b.n	25904 <append_string+0xe>

00025924 <cbpprintf_external>:
	if (buf == NULL) {
   25924:	b35b      	cbz	r3, 2597e <cbpprintf_external+0x5a>
{
   25926:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2592a:	b082      	sub	sp, #8
   2592c:	4607      	mov	r7, r0
   2592e:	4688      	mov	r8, r1
   25930:	4691      	mov	r9, r2
   25932:	461d      	mov	r5, r3
	args_size = hdr->hdr.desc.len * sizeof(int);
   25934:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = hdr->hdr.desc.str_cnt;
   25936:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   25938:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
   2593a:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2593c:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   25940:	eb04 0443 	add.w	r4, r4, r3, lsl #1
   25944:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
   25946:	f04f 0a00 	mov.w	sl, #0
   2594a:	e00a      	b.n	25962 <cbpprintf_external+0x3e>
		s_idx = *(uint8_t *)s++;
   2594c:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   25950:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
   25954:	4620      	mov	r0, r4
   25956:	f001 fd89 	bl	2746c <strlen>
   2595a:	3001      	adds	r0, #1
   2595c:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   2595e:	f10a 0a01 	add.w	sl, sl, #1
   25962:	45b2      	cmp	sl, r6
   25964:	d3f2      	bcc.n	2594c <cbpprintf_external+0x28>
	buf += sizeof(*hdr);
   25966:	f105 0308 	add.w	r3, r5, #8
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
   2596a:	9300      	str	r3, [sp, #0]
   2596c:	686b      	ldr	r3, [r5, #4]
   2596e:	464a      	mov	r2, r9
   25970:	4641      	mov	r1, r8
   25972:	4638      	mov	r0, r7
   25974:	f7ff ff9c 	bl	258b0 <cbprintf_via_va_list>
}
   25978:	b002      	add	sp, #8
   2597a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
   2597e:	f06f 0015 	mvn.w	r0, #21
}
   25982:	4770      	bx	lr

00025984 <is_ptr>:
{
   25984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25988:	4604      	mov	r4, r0
   2598a:	4688      	mov	r8, r1
	int cnt = 0;
   2598c:	2700      	movs	r7, #0
	bool mod = false;
   2598e:	463e      	mov	r6, r7
	while ((c = *fmt++) != '\0') {
   25990:	e007      	b.n	259a2 <is_ptr+0x1e>
				if (c == 'p') {
   25992:	2d70      	cmp	r5, #112	; 0x70
   25994:	d018      	beq.n	259c8 <is_ptr+0x44>
				} else if (is_fmt_spec(c)) {
   25996:	4628      	mov	r0, r5
   25998:	f7ff ff91 	bl	258be <is_fmt_spec>
   2599c:	b9b8      	cbnz	r0, 259ce <is_ptr+0x4a>
		if (c == '%') {
   2599e:	2d25      	cmp	r5, #37	; 0x25
   259a0:	d00e      	beq.n	259c0 <is_ptr+0x3c>
	while ((c = *fmt++) != '\0') {
   259a2:	f814 5b01 	ldrb.w	r5, [r4], #1
   259a6:	b175      	cbz	r5, 259c6 <is_ptr+0x42>
		if (mod) {
   259a8:	2e00      	cmp	r6, #0
   259aa:	d0f8      	beq.n	2599e <is_ptr+0x1a>
			if (cnt == n) {
   259ac:	4547      	cmp	r7, r8
   259ae:	d0f0      	beq.n	25992 <is_ptr+0xe>
			} else if (is_fmt_spec(c)) {
   259b0:	4628      	mov	r0, r5
   259b2:	f7ff ff84 	bl	258be <is_fmt_spec>
   259b6:	2800      	cmp	r0, #0
   259b8:	d0f1      	beq.n	2599e <is_ptr+0x1a>
				cnt++;
   259ba:	3701      	adds	r7, #1
				mod = false;
   259bc:	2600      	movs	r6, #0
   259be:	e7ee      	b.n	2599e <is_ptr+0x1a>
			mod = !mod;
   259c0:	f086 0601 	eor.w	r6, r6, #1
   259c4:	e7ed      	b.n	259a2 <is_ptr+0x1e>
	return false;
   259c6:	2600      	movs	r6, #0
}
   259c8:	4630      	mov	r0, r6
   259ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					return false;
   259ce:	2600      	movs	r6, #0
   259d0:	e7fa      	b.n	259c8 <is_ptr+0x44>

000259d2 <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   259d2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   259d6:	b2db      	uxtb	r3, r3
   259d8:	2b09      	cmp	r3, #9
   259da:	d802      	bhi.n	259e2 <char2hex+0x10>
		*x = c - '0';
   259dc:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   259de:	2000      	movs	r0, #0
   259e0:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   259e2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   259e6:	b2db      	uxtb	r3, r3
   259e8:	2b05      	cmp	r3, #5
   259ea:	d803      	bhi.n	259f4 <char2hex+0x22>
		*x = c - 'a' + 10;
   259ec:	3857      	subs	r0, #87	; 0x57
   259ee:	7008      	strb	r0, [r1, #0]
	return 0;
   259f0:	2000      	movs	r0, #0
   259f2:	4770      	bx	lr
	} else if (c >= 'A' && c <= 'F') {
   259f4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   259f8:	b2db      	uxtb	r3, r3
   259fa:	2b05      	cmp	r3, #5
   259fc:	d803      	bhi.n	25a06 <char2hex+0x34>
		*x = c - 'A' + 10;
   259fe:	3837      	subs	r0, #55	; 0x37
   25a00:	7008      	strb	r0, [r1, #0]
	return 0;
   25a02:	2000      	movs	r0, #0
   25a04:	4770      	bx	lr
		return -EINVAL;
   25a06:	f06f 0015 	mvn.w	r0, #21
}
   25a0a:	4770      	bx	lr

00025a0c <arch_printk_char_out>:
}
   25a0c:	2000      	movs	r0, #0
   25a0e:	4770      	bx	lr

00025a10 <str_out>:
{
   25a10:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   25a12:	680c      	ldr	r4, [r1, #0]
   25a14:	b154      	cbz	r4, 25a2c <str_out+0x1c>
   25a16:	688a      	ldr	r2, [r1, #8]
   25a18:	684b      	ldr	r3, [r1, #4]
   25a1a:	429a      	cmp	r2, r3
   25a1c:	da06      	bge.n	25a2c <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   25a1e:	3b01      	subs	r3, #1
   25a20:	429a      	cmp	r2, r3
   25a22:	d008      	beq.n	25a36 <str_out+0x26>
		ctx->str[ctx->count++] = c;
   25a24:	1c53      	adds	r3, r2, #1
   25a26:	608b      	str	r3, [r1, #8]
   25a28:	54a0      	strb	r0, [r4, r2]
   25a2a:	e002      	b.n	25a32 <str_out+0x22>
		ctx->count++;
   25a2c:	688b      	ldr	r3, [r1, #8]
   25a2e:	3301      	adds	r3, #1
   25a30:	608b      	str	r3, [r1, #8]
}
   25a32:	bc10      	pop	{r4}
   25a34:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   25a36:	1c53      	adds	r3, r2, #1
   25a38:	608b      	str	r3, [r1, #8]
   25a3a:	2300      	movs	r3, #0
   25a3c:	54a3      	strb	r3, [r4, r2]
   25a3e:	e7f8      	b.n	25a32 <str_out+0x22>

00025a40 <vprintk>:
{
   25a40:	b508      	push	{r3, lr}
		z_log_vprintk(fmt, ap);
   25a42:	f001 f8ba 	bl	26bba <z_log_vprintk>
}
   25a46:	bd08      	pop	{r3, pc}

00025a48 <printk>:
{
   25a48:	b40f      	push	{r0, r1, r2, r3}
   25a4a:	b500      	push	{lr}
   25a4c:	b083      	sub	sp, #12
   25a4e:	a904      	add	r1, sp, #16
   25a50:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   25a54:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   25a56:	f7ff fff3 	bl	25a40 <vprintk>
}
   25a5a:	b003      	add	sp, #12
   25a5c:	f85d eb04 	ldr.w	lr, [sp], #4
   25a60:	b004      	add	sp, #16
   25a62:	4770      	bx	lr

00025a64 <snprintk>:
{
   25a64:	b40c      	push	{r2, r3}
   25a66:	b500      	push	{lr}
   25a68:	b083      	sub	sp, #12
   25a6a:	ab04      	add	r3, sp, #16
   25a6c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   25a70:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   25a72:	f7ee f98f 	bl	13d94 <vsnprintk>
}
   25a76:	b003      	add	sp, #12
   25a78:	f85d eb04 	ldr.w	lr, [sp], #4
   25a7c:	b002      	add	sp, #8
   25a7e:	4770      	bx	lr

00025a80 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   25a80:	b508      	push	{r3, lr}
   25a82:	4604      	mov	r4, r0
   25a84:	4608      	mov	r0, r1
   25a86:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   25a88:	461a      	mov	r2, r3
   25a8a:	47a0      	blx	r4
	return z_impl_z_current_get();
   25a8c:	f7ff f880 	bl	24b90 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   25a90:	f7f0 ff6e 	bl	16970 <z_impl_k_thread_abort>

00025a94 <chunk_mem>:
#endif

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   25a94:	00c9      	lsls	r1, r1, #3
   25a96:	3104      	adds	r1, #4

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   25a98:	4408      	add	r0, r1
   25a9a:	4770      	bx	lr

00025a9c <free_list_remove_bidx>:

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   25a9c:	ea4f 0cc1 	mov.w	ip, r1, lsl #3

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   25aa0:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   25aa4:	88db      	ldrh	r3, [r3, #6]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & BIT(bidx));

	if (next_free_chunk(h, c) == c) {
   25aa6:	4299      	cmp	r1, r3
   25aa8:	d00c      	beq.n	25ac4 <free_list_remove_bidx+0x28>
   25aaa:	4484      	add	ip, r0
   25aac:	f8bc 1004 	ldrh.w	r1, [ip, #4]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   25ab0:	3204      	adds	r2, #4
   25ab2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   25ab6:	00ca      	lsls	r2, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   25ab8:	3206      	adds	r2, #6
   25aba:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
   25abc:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   25abe:	3304      	adds	r3, #4
   25ac0:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   25ac2:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
   25ac4:	68c3      	ldr	r3, [r0, #12]
   25ac6:	2101      	movs	r1, #1
   25ac8:	4091      	lsls	r1, r2
   25aca:	ea23 0301 	bic.w	r3, r3, r1
   25ace:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   25ad0:	3204      	adds	r2, #4
   25ad2:	2300      	movs	r3, #0
   25ad4:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   25ad8:	4770      	bx	lr

00025ada <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   25ada:	b510      	push	{r4, lr}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   25adc:	1d13      	adds	r3, r2, #4
   25ade:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   25ae2:	b974      	cbnz	r4, 25b02 <free_list_add_bidx+0x28>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
   25ae4:	68c3      	ldr	r3, [r0, #12]
   25ae6:	2401      	movs	r4, #1
   25ae8:	4094      	lsls	r4, r2
   25aea:	4323      	orrs	r3, r4
   25aec:	60c3      	str	r3, [r0, #12]
		b->next = c;
   25aee:	3204      	adds	r2, #4
   25af0:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   25af4:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
   25af6:	1d1a      	adds	r2, r3, #4
   25af8:	b289      	uxth	r1, r1
   25afa:	5281      	strh	r1, [r0, r2]
   25afc:	3306      	adds	r3, #6
   25afe:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   25b00:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
   25b02:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
   25b04:	3204      	adds	r2, #4
   25b06:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
   25b08:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
   25b0c:	f10c 0e04 	add.w	lr, ip, #4
   25b10:	f820 300e 	strh.w	r3, [r0, lr]
   25b14:	f10c 0c06 	add.w	ip, ip, #6
   25b18:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
   25b1c:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   25b1e:	3306      	adds	r3, #6
   25b20:	b289      	uxth	r1, r1
   25b22:	52c1      	strh	r1, [r0, r3]
   25b24:	5281      	strh	r1, [r0, r2]
   25b26:	e7eb      	b.n	25b00 <free_list_add_bidx+0x26>

00025b28 <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   25b28:	b500      	push	{lr}
	void *cmem = &buf[c];
   25b2a:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
   25b2c:	3302      	adds	r3, #2
   25b2e:	f830 e003 	ldrh.w	lr, [r0, r3]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   25b32:	eba2 0c01 	sub.w	ip, r2, r1
	chunksz_t rsz = sz0 - lsz;
   25b36:	1a89      	subs	r1, r1, r2
   25b38:	eb01 015e 	add.w	r1, r1, lr, lsr #1
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25b3c:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
		((uint16_t *)cmem)[f] = val;
   25b40:	f820 e003 	strh.w	lr, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25b44:	ea4f 0e41 	mov.w	lr, r1, lsl #1
	void *cmem = &buf[c];
   25b48:	00d3      	lsls	r3, r2, #3
		((uint16_t *)cmem)[f] = val;
   25b4a:	3302      	adds	r3, #2
   25b4c:	f820 e003 	strh.w	lr, [r0, r3]
   25b50:	f820 c032 	strh.w	ip, [r0, r2, lsl #3]
		return ((uint16_t *)cmem)[f];
   25b54:	5ac3      	ldrh	r3, [r0, r3]
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   25b56:	eb02 0253 	add.w	r2, r2, r3, lsr #1
		((uint16_t *)cmem)[f] = val;
   25b5a:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   25b5e:	f85d fb04 	ldr.w	pc, [sp], #4

00025b62 <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   25b62:	b500      	push	{lr}
	void *cmem = &buf[c];
   25b64:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
   25b66:	3102      	adds	r1, #2
   25b68:	f830 e001 	ldrh.w	lr, [r0, r1]
	void *cmem = &buf[c];
   25b6c:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
		return ((uint16_t *)cmem)[f];
   25b70:	f10c 0c02 	add.w	ip, ip, #2
   25b74:	f830 300c 	ldrh.w	r3, [r0, ip]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   25b78:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   25b7a:	eb03 035e 	add.w	r3, r3, lr, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25b7e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
		((uint16_t *)cmem)[f] = val;
   25b82:	f820 e001 	strh.w	lr, [r0, r1]
		return ((uint16_t *)cmem)[f];
   25b86:	f830 100c 	ldrh.w	r1, [r0, ip]
	return c + chunk_size(h, c);
   25b8a:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
   25b8e:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   25b92:	f85d fb04 	ldr.w	pc, [sp], #4

00025b96 <mem_to_chunkid>:
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   25b96:	3904      	subs	r1, #4
   25b98:	1a08      	subs	r0, r1, r0
}
   25b9a:	08c0      	lsrs	r0, r0, #3
   25b9c:	4770      	bx	lr

00025b9e <free_list_remove>:
{
   25b9e:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   25ba0:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   25ba4:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   25ba6:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   25ba8:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   25bac:	f1c2 021f 	rsb	r2, r2, #31
   25bb0:	f7ff ff74 	bl	25a9c <free_list_remove_bidx>
}
   25bb4:	bd08      	pop	{r3, pc}

00025bb6 <free_list_add>:
{
   25bb6:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   25bb8:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   25bbc:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   25bbe:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   25bc0:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   25bc4:	f1c2 021f 	rsb	r2, r2, #31
   25bc8:	f7ff ff87 	bl	25ada <free_list_add_bidx>
}
   25bcc:	bd08      	pop	{r3, pc}

00025bce <free_chunk>:
{
   25bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25bd0:	4604      	mov	r4, r0
   25bd2:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   25bd4:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
   25bd6:	1cb7      	adds	r7, r6, #2
   25bd8:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
   25bda:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
   25bde:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   25be2:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   25be4:	f013 0f01 	tst.w	r3, #1
   25be8:	d00c      	beq.n	25c04 <free_chunk+0x36>
   25bea:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   25bec:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
   25bee:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
   25bf2:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   25bf4:	f013 0f01 	tst.w	r3, #1
   25bf8:	d00e      	beq.n	25c18 <free_chunk+0x4a>
	free_list_add(h, c);
   25bfa:	4629      	mov	r1, r5
   25bfc:	4620      	mov	r0, r4
   25bfe:	f7ff ffda 	bl	25bb6 <free_list_add>
}
   25c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
   25c04:	f7ff ffcb 	bl	25b9e <free_list_remove>
   25c08:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
   25c0a:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   25c0e:	4629      	mov	r1, r5
   25c10:	4620      	mov	r0, r4
   25c12:	f7ff ffa6 	bl	25b62 <merge_chunks>
   25c16:	e7e8      	b.n	25bea <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
   25c18:	4620      	mov	r0, r4
   25c1a:	f7ff ffc0 	bl	25b9e <free_list_remove>
   25c1e:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   25c20:	462a      	mov	r2, r5
   25c22:	1a69      	subs	r1, r5, r1
   25c24:	4620      	mov	r0, r4
   25c26:	f7ff ff9c 	bl	25b62 <merge_chunks>
   25c2a:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   25c2c:	1aed      	subs	r5, r5, r3
   25c2e:	e7e4      	b.n	25bfa <free_chunk+0x2c>

00025c30 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   25c30:	b570      	push	{r4, r5, r6, lr}
	return 31 - __builtin_clz(usable_sz);
   25c32:	fab1 f381 	clz	r3, r1
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   25c36:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   25c3a:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
   25c3e:	b1cd      	cbz	r5, 25c74 <alloc_chunk+0x44>
   25c40:	f1c3 021f 	rsb	r2, r3, #31
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   25c44:	f04f 0e03 	mov.w	lr, #3
		do {
			chunkid_t c = b->next;
   25c48:	1d14      	adds	r4, r2, #4
   25c4a:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   25c4e:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
		return ((uint16_t *)cmem)[f];
   25c52:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
   25c56:	8876      	ldrh	r6, [r6, #2]
			if (chunk_size(h, c) >= sz) {
   25c58:	ebb1 0f56 	cmp.w	r1, r6, lsr #1
   25c5c:	d914      	bls.n	25c88 <alloc_chunk+0x58>
   25c5e:	4484      	add	ip, r0
   25c60:	f8bc 4006 	ldrh.w	r4, [ip, #6]
				free_list_remove_bidx(h, c, bi);
				return c;
			}
			b->next = next_free_chunk(h, c);
   25c64:	1d16      	adds	r6, r2, #4
   25c66:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   25c6a:	f1be 0e01 	subs.w	lr, lr, #1
   25c6e:	d001      	beq.n	25c74 <alloc_chunk+0x44>
   25c70:	42a5      	cmp	r5, r4
   25c72:	d1e9      	bne.n	25c48 <alloc_chunk+0x18>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   25c74:	68c4      	ldr	r4, [r0, #12]
   25c76:	f1c3 0220 	rsb	r2, r3, #32
   25c7a:	2301      	movs	r3, #1
   25c7c:	4093      	lsls	r3, r2
   25c7e:	425b      	negs	r3, r3

	if (bmask != 0U) {
   25c80:	401c      	ands	r4, r3
   25c82:	d105      	bne.n	25c90 <alloc_chunk+0x60>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   25c84:	4620      	mov	r0, r4
   25c86:	bd70      	pop	{r4, r5, r6, pc}
				free_list_remove_bidx(h, c, bi);
   25c88:	4621      	mov	r1, r4
   25c8a:	f7ff ff07 	bl	25a9c <free_list_remove_bidx>
				return c;
   25c8e:	e7f9      	b.n	25c84 <alloc_chunk+0x54>
		int minbucket = __builtin_ctz(bmask);
   25c90:	fa94 f2a4 	rbit	r2, r4
   25c94:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   25c98:	1d13      	adds	r3, r2, #4
   25c9a:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   25c9e:	4621      	mov	r1, r4
   25ca0:	f7ff fefc 	bl	25a9c <free_list_remove_bidx>
		return c;
   25ca4:	e7ee      	b.n	25c84 <alloc_chunk+0x54>

00025ca6 <sys_heap_free>:
	if (mem == NULL) {
   25ca6:	b179      	cbz	r1, 25cc8 <sys_heap_free+0x22>
{
   25ca8:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   25caa:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   25cac:	4620      	mov	r0, r4
   25cae:	f7ff ff72 	bl	25b96 <mem_to_chunkid>
   25cb2:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   25cb4:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   25cb8:	8853      	ldrh	r3, [r2, #2]
   25cba:	f023 0301 	bic.w	r3, r3, #1
   25cbe:	8053      	strh	r3, [r2, #2]
	free_chunk(h, c);
   25cc0:	4620      	mov	r0, r4
   25cc2:	f7ff ff84 	bl	25bce <free_chunk>
}
   25cc6:	bd10      	pop	{r4, pc}
   25cc8:	4770      	bx	lr

00025cca <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   25cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   25ccc:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   25cce:	b341      	cbz	r1, 25d22 <sys_heap_alloc+0x58>
   25cd0:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   25cd2:	68aa      	ldr	r2, [r5, #8]
   25cd4:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   25cd8:	d925      	bls.n	25d26 <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   25cda:	330b      	adds	r3, #11
   25cdc:	08dc      	lsrs	r4, r3, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   25cde:	4621      	mov	r1, r4
   25ce0:	4628      	mov	r0, r5
   25ce2:	f7ff ffa5 	bl	25c30 <alloc_chunk>
	if (c == 0U) {
   25ce6:	4607      	mov	r7, r0
   25ce8:	b1f8      	cbz	r0, 25d2a <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
   25cea:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
   25cec:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
   25cf0:	885b      	ldrh	r3, [r3, #2]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   25cf2:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   25cf6:	d309      	bcc.n	25d0c <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
   25cf8:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   25cfa:	885a      	ldrh	r2, [r3, #2]
   25cfc:	f042 0201 	orr.w	r2, r2, #1
   25d00:	805a      	strh	r2, [r3, #2]
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);

	mem = chunk_mem(h, c);
   25d02:	4639      	mov	r1, r7
   25d04:	4628      	mov	r0, r5
   25d06:	f7ff fec5 	bl	25a94 <chunk_mem>
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   25d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
   25d0c:	4404      	add	r4, r0
   25d0e:	4622      	mov	r2, r4
   25d10:	4601      	mov	r1, r0
   25d12:	4628      	mov	r0, r5
   25d14:	f7ff ff08 	bl	25b28 <split_chunks>
		free_list_add(h, c + chunk_sz);
   25d18:	4621      	mov	r1, r4
   25d1a:	4628      	mov	r0, r5
   25d1c:	f7ff ff4b 	bl	25bb6 <free_list_add>
   25d20:	e7ea      	b.n	25cf8 <sys_heap_alloc+0x2e>
		return NULL;
   25d22:	2000      	movs	r0, #0
   25d24:	e7f1      	b.n	25d0a <sys_heap_alloc+0x40>
   25d26:	2000      	movs	r0, #0
   25d28:	e7ef      	b.n	25d0a <sys_heap_alloc+0x40>
		return NULL;
   25d2a:	2000      	movs	r0, #0
   25d2c:	e7ed      	b.n	25d0a <sys_heap_alloc+0x40>

00025d2e <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   25d2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25d32:	4615      	mov	r5, r2
	struct z_heap *h = heap->heap;
   25d34:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   25d36:	424b      	negs	r3, r1
   25d38:	400b      	ands	r3, r1
	if (align != rew) {
   25d3a:	f101 39ff 	add.w	r9, r1, #4294967295
   25d3e:	ea19 0901 	ands.w	r9, r9, r1
   25d42:	d004      	beq.n	25d4e <sys_heap_aligned_alloc+0x20>
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   25d44:	2b03      	cmp	r3, #3
   25d46:	d847      	bhi.n	25dd8 <sys_heap_aligned_alloc+0xaa>
		align -= rew;
   25d48:	464c      	mov	r4, r9
	rew = align & -align;
   25d4a:	4699      	mov	r9, r3
   25d4c:	e003      	b.n	25d56 <sys_heap_aligned_alloc+0x28>
   25d4e:	460c      	mov	r4, r1
	} else {
		if (align <= chunk_header_bytes(h)) {
   25d50:	2904      	cmp	r1, #4
   25d52:	d93c      	bls.n	25dce <sys_heap_aligned_alloc+0xa0>
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
   25d54:	2304      	movs	r3, #4
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   25d56:	2d00      	cmp	r5, #0
   25d58:	d056      	beq.n	25e08 <sys_heap_aligned_alloc+0xda>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   25d5a:	68b2      	ldr	r2, [r6, #8]
   25d5c:	ebb2 0fd5 	cmp.w	r2, r5, lsr #3
   25d60:	d955      	bls.n	25e0e <sys_heap_aligned_alloc+0xe0>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   25d62:	1961      	adds	r1, r4, r5
   25d64:	1ac9      	subs	r1, r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   25d66:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   25d68:	08c9      	lsrs	r1, r1, #3
   25d6a:	4630      	mov	r0, r6
   25d6c:	f7ff ff60 	bl	25c30 <alloc_chunk>

	if (c0 == 0) {
   25d70:	4607      	mov	r7, r0
   25d72:	2800      	cmp	r0, #0
   25d74:	d04e      	beq.n	25e14 <sys_heap_aligned_alloc+0xe6>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   25d76:	4601      	mov	r1, r0
   25d78:	4630      	mov	r0, r6
   25d7a:	f7ff fe8b 	bl	25a94 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   25d7e:	eb00 0809 	add.w	r8, r0, r9
   25d82:	44a0      	add	r8, r4
   25d84:	f108 38ff 	add.w	r8, r8, #4294967295
   25d88:	4264      	negs	r4, r4
   25d8a:	ea08 0804 	and.w	r8, r8, r4
   25d8e:	eba8 0809 	sub.w	r8, r8, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   25d92:	eb08 0405 	add.w	r4, r8, r5
   25d96:	3407      	adds	r4, #7
   25d98:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   25d9c:	4641      	mov	r1, r8
   25d9e:	4630      	mov	r0, r6
   25da0:	f7ff fef9 	bl	25b96 <mem_to_chunkid>
   25da4:	4605      	mov	r5, r0
	chunkid_t c_end = end - chunk_buf(h);
   25da6:	1ba4      	subs	r4, r4, r6
   25da8:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   25daa:	4287      	cmp	r7, r0
   25dac:	d318      	bcc.n	25de0 <sys_heap_aligned_alloc+0xb2>
	void *cmem = &buf[c];
   25dae:	00ef      	lsls	r7, r5, #3
		return ((uint16_t *)cmem)[f];
   25db0:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
   25db4:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
   25db6:	eb05 0353 	add.w	r3, r5, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   25dba:	429c      	cmp	r4, r3
   25dbc:	d31a      	bcc.n	25df4 <sys_heap_aligned_alloc+0xc6>
	void *cmem = &buf[c];
   25dbe:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   25dc0:	8873      	ldrh	r3, [r6, #2]
   25dc2:	f043 0301 	orr.w	r3, r3, #1
   25dc6:	8073      	strh	r3, [r6, #2]
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   25dc8:	4640      	mov	r0, r8
   25dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return sys_heap_alloc(heap, bytes);
   25dce:	4611      	mov	r1, r2
   25dd0:	f7ff ff7b 	bl	25cca <sys_heap_alloc>
   25dd4:	4680      	mov	r8, r0
   25dd6:	e7f7      	b.n	25dc8 <sys_heap_aligned_alloc+0x9a>
		align -= rew;
   25dd8:	464c      	mov	r4, r9
	rew = align & -align;
   25dda:	4699      	mov	r9, r3
		gap = MIN(rew, chunk_header_bytes(h));
   25ddc:	2304      	movs	r3, #4
   25dde:	e7ba      	b.n	25d56 <sys_heap_aligned_alloc+0x28>
		split_chunks(h, c0, c);
   25de0:	4602      	mov	r2, r0
   25de2:	4639      	mov	r1, r7
   25de4:	4630      	mov	r0, r6
   25de6:	f7ff fe9f 	bl	25b28 <split_chunks>
		free_list_add(h, c0);
   25dea:	4639      	mov	r1, r7
   25dec:	4630      	mov	r0, r6
   25dee:	f7ff fee2 	bl	25bb6 <free_list_add>
   25df2:	e7dc      	b.n	25dae <sys_heap_aligned_alloc+0x80>
		split_chunks(h, c, c_end);
   25df4:	4622      	mov	r2, r4
   25df6:	4629      	mov	r1, r5
   25df8:	4630      	mov	r0, r6
   25dfa:	f7ff fe95 	bl	25b28 <split_chunks>
		free_list_add(h, c_end);
   25dfe:	4621      	mov	r1, r4
   25e00:	4630      	mov	r0, r6
   25e02:	f7ff fed8 	bl	25bb6 <free_list_add>
   25e06:	e7da      	b.n	25dbe <sys_heap_aligned_alloc+0x90>
		return NULL;
   25e08:	f04f 0800 	mov.w	r8, #0
   25e0c:	e7dc      	b.n	25dc8 <sys_heap_aligned_alloc+0x9a>
   25e0e:	f04f 0800 	mov.w	r8, #0
   25e12:	e7d9      	b.n	25dc8 <sys_heap_aligned_alloc+0x9a>
		return NULL;
   25e14:	f04f 0800 	mov.w	r8, #0
   25e18:	e7d6      	b.n	25dc8 <sys_heap_aligned_alloc+0x9a>

00025e1a <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   25e1a:	b570      	push	{r4, r5, r6, lr}
   25e1c:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   25e1e:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   25e20:	1dc8      	adds	r0, r1, #7
   25e22:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   25e26:	440a      	add	r2, r1
   25e28:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   25e2c:	1a12      	subs	r2, r2, r0
   25e2e:	08d5      	lsrs	r5, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   25e30:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   25e32:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
   25e34:	2300      	movs	r3, #0
   25e36:	60c3      	str	r3, [r0, #12]
	return 31 - __builtin_clz(usable_sz);
   25e38:	fab5 f185 	clz	r1, r5
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   25e3c:	f1c1 0e20 	rsb	lr, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   25e40:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
   25e44:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   25e46:	1dce      	adds	r6, r1, #7
   25e48:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   25e4a:	e005      	b.n	25e58 <sys_heap_init+0x3e>
		h->buckets[i].next = 0;
   25e4c:	f103 0c04 	add.w	ip, r3, #4
   25e50:	2400      	movs	r4, #0
   25e52:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   25e56:	3301      	adds	r3, #1
   25e58:	4573      	cmp	r3, lr
   25e5a:	dbf7      	blt.n	25e4c <sys_heap_init+0x32>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25e5c:	004c      	lsls	r4, r1, #1
		((uint16_t *)cmem)[f] = val;
   25e5e:	b2a4      	uxth	r4, r4
   25e60:	8044      	strh	r4, [r0, #2]
   25e62:	f04f 0c00 	mov.w	ip, #0
   25e66:	f8a0 c000 	strh.w	ip, [r0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   25e6a:	f044 0401 	orr.w	r4, r4, #1
   25e6e:	8044      	strh	r4, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   25e70:	1a6b      	subs	r3, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25e72:	ea4f 0e43 	mov.w	lr, r3, lsl #1
	void *cmem = &buf[c];
   25e76:	f026 0407 	bic.w	r4, r6, #7
		((uint16_t *)cmem)[f] = val;
   25e7a:	1ca5      	adds	r5, r4, #2
   25e7c:	f820 e005 	strh.w	lr, [r0, r5]
   25e80:	5301      	strh	r1, [r0, r4]
	void *cmem = &buf[c];
   25e82:	f022 0407 	bic.w	r4, r2, #7
		((uint16_t *)cmem)[f] = val;
   25e86:	1c95      	adds	r5, r2, #2
   25e88:	f820 c005 	strh.w	ip, [r0, r5]
   25e8c:	4402      	add	r2, r0
   25e8e:	5303      	strh	r3, [r0, r4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   25e90:	8853      	ldrh	r3, [r2, #2]
   25e92:	f043 0301 	orr.w	r3, r3, #1
   25e96:	8053      	strh	r3, [r2, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   25e98:	f7ff fe8d 	bl	25bb6 <free_list_add>
}
   25e9c:	bd70      	pop	{r4, r5, r6, pc}

00025e9e <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   25e9e:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   25ea2:	8b03      	ldrh	r3, [r0, #24]
   25ea4:	f023 0307 	bic.w	r3, r3, #7
   25ea8:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   25eaa:	8303      	strh	r3, [r0, #24]
}
   25eac:	4770      	bx	lr

00025eae <notify_monitors>:
{
   25eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25eb2:	4606      	mov	r6, r0
   25eb4:	460f      	mov	r7, r1
   25eb6:	4690      	mov	r8, r2
	return list->head;
   25eb8:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   25eba:	b121      	cbz	r1, 25ec6 <notify_monitors+0x18>
	return node->next;
   25ebc:	680c      	ldr	r4, [r1, #0]
   25ebe:	b13c      	cbz	r4, 25ed0 <notify_monitors+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25ec0:	b931      	cbnz	r1, 25ed0 <notify_monitors+0x22>
   25ec2:	460c      	mov	r4, r1
   25ec4:	e004      	b.n	25ed0 <notify_monitors+0x22>
   25ec6:	460c      	mov	r4, r1
   25ec8:	e002      	b.n	25ed0 <notify_monitors+0x22>
   25eca:	4623      	mov	r3, r4
   25ecc:	4621      	mov	r1, r4
   25ece:	461c      	mov	r4, r3
   25ed0:	b169      	cbz	r1, 25eee <notify_monitors+0x40>
		mon->callback(mgr, mon, state, res);
   25ed2:	684d      	ldr	r5, [r1, #4]
   25ed4:	4643      	mov	r3, r8
   25ed6:	463a      	mov	r2, r7
   25ed8:	4630      	mov	r0, r6
   25eda:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   25edc:	2c00      	cmp	r4, #0
   25ede:	d0f4      	beq.n	25eca <notify_monitors+0x1c>
	return node->next;
   25ee0:	6823      	ldr	r3, [r4, #0]
   25ee2:	2b00      	cmp	r3, #0
   25ee4:	d0f2      	beq.n	25ecc <notify_monitors+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25ee6:	2c00      	cmp	r4, #0
   25ee8:	d1f0      	bne.n	25ecc <notify_monitors+0x1e>
   25eea:	4623      	mov	r3, r4
   25eec:	e7ee      	b.n	25ecc <notify_monitors+0x1e>
}
   25eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025ef2 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   25ef2:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   25ef4:	f013 0307 	ands.w	r3, r3, #7
   25ef8:	d103      	bne.n	25f02 <process_recheck+0x10>
	return list->head;
   25efa:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   25efc:	b10a      	cbz	r2, 25f02 <process_recheck+0x10>
		evt = EVT_START;
   25efe:	2003      	movs	r0, #3
   25f00:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   25f02:	2b02      	cmp	r3, #2
   25f04:	d003      	beq.n	25f0e <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   25f06:	2b01      	cmp	r3, #1
   25f08:	d006      	beq.n	25f18 <process_recheck+0x26>
	int evt = EVT_NOP;
   25f0a:	2000      	movs	r0, #0
   25f0c:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   25f0e:	8b42      	ldrh	r2, [r0, #26]
   25f10:	2a00      	cmp	r2, #0
   25f12:	d1f8      	bne.n	25f06 <process_recheck+0x14>
		evt = EVT_STOP;
   25f14:	2004      	movs	r0, #4
   25f16:	4770      	bx	lr
   25f18:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   25f1a:	b10b      	cbz	r3, 25f20 <process_recheck+0x2e>
		evt = EVT_RESET;
   25f1c:	2005      	movs	r0, #5
}
   25f1e:	4770      	bx	lr
	int evt = EVT_NOP;
   25f20:	2000      	movs	r0, #0
   25f22:	4770      	bx	lr

00025f24 <process_complete>:
{
   25f24:	b510      	push	{r4, lr}
   25f26:	4604      	mov	r4, r0
   25f28:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   25f2a:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   25f2c:	2a00      	cmp	r2, #0
   25f2e:	db07      	blt.n	25f40 <process_complete+0x1c>
   25f30:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   25f34:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   25f36:	2a01      	cmp	r2, #1
   25f38:	d90e      	bls.n	25f58 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   25f3a:	2b04      	cmp	r3, #4
   25f3c:	d036      	beq.n	25fac <process_complete+0x88>
}
   25f3e:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
   25f40:	e9d0 0100 	ldrd	r0, r1, [r0]
   25f44:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   25f48:	2300      	movs	r3, #0
   25f4a:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   25f4c:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   25f4e:	2101      	movs	r1, #1
   25f50:	4620      	mov	r0, r4
   25f52:	f7ff ffa4 	bl	25e9e <set_state>
   25f56:	e7f2      	b.n	25f3e <process_complete+0x1a>
		*clients = mgr->clients;
   25f58:	e9d0 0100 	ldrd	r0, r1, [r0]
   25f5c:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   25f60:	2200      	movs	r2, #0
   25f62:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   25f64:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   25f66:	2b06      	cmp	r3, #6
   25f68:	d11b      	bne.n	25fa2 <process_complete+0x7e>
	return list->head;
   25f6a:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   25f6e:	b153      	cbz	r3, 25f86 <process_complete+0x62>
				mgr->refs += 1U;
   25f70:	8b62      	ldrh	r2, [r4, #26]
   25f72:	3201      	adds	r2, #1
   25f74:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   25f76:	461a      	mov	r2, r3
	return node->next;
   25f78:	681b      	ldr	r3, [r3, #0]
   25f7a:	2b00      	cmp	r3, #0
   25f7c:	d0f7      	beq.n	25f6e <process_complete+0x4a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25f7e:	2a00      	cmp	r2, #0
   25f80:	d1f5      	bne.n	25f6e <process_complete+0x4a>
   25f82:	4613      	mov	r3, r2
   25f84:	e7f3      	b.n	25f6e <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
   25f86:	2102      	movs	r1, #2
   25f88:	4620      	mov	r0, r4
   25f8a:	f7ff ff88 	bl	25e9e <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   25f8e:	4620      	mov	r0, r4
   25f90:	f7ff ffaf 	bl	25ef2 <process_recheck>
   25f94:	2800      	cmp	r0, #0
   25f96:	d0d2      	beq.n	25f3e <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   25f98:	8b23      	ldrh	r3, [r4, #24]
   25f9a:	f043 0320 	orr.w	r3, r3, #32
   25f9e:	8323      	strh	r3, [r4, #24]
   25fa0:	e7cd      	b.n	25f3e <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   25fa2:	2100      	movs	r1, #0
   25fa4:	4620      	mov	r0, r4
   25fa6:	f7ff ff7a 	bl	25e9e <set_state>
   25faa:	e7f0      	b.n	25f8e <process_complete+0x6a>
		set_state(mgr, ONOFF_STATE_OFF);
   25fac:	2100      	movs	r1, #0
   25fae:	f7ff ff76 	bl	25e9e <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   25fb2:	4620      	mov	r0, r4
   25fb4:	f7ff ff9d 	bl	25ef2 <process_recheck>
   25fb8:	2800      	cmp	r0, #0
   25fba:	d0c0      	beq.n	25f3e <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   25fbc:	8b23      	ldrh	r3, [r4, #24]
   25fbe:	f043 0320 	orr.w	r3, r3, #32
   25fc2:	8323      	strh	r3, [r4, #24]
}
   25fc4:	e7bb      	b.n	25f3e <process_complete+0x1a>

00025fc6 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   25fc6:	b150      	cbz	r0, 25fde <validate_args+0x18>
{
   25fc8:	b510      	push	{r4, lr}
   25fca:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   25fcc:	b151      	cbz	r1, 25fe4 <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
   25fce:	1d08      	adds	r0, r1, #4
   25fd0:	f000 f8c4 	bl	2615c <sys_notify_validate>
	if ((rv == 0)
   25fd4:	b910      	cbnz	r0, 25fdc <validate_args+0x16>
	    && ((cli->notify.flags
   25fd6:	68a3      	ldr	r3, [r4, #8]
   25fd8:	2b03      	cmp	r3, #3
   25fda:	d806      	bhi.n	25fea <validate_args+0x24>
}
   25fdc:	bd10      	pop	{r4, pc}
		return -EINVAL;
   25fde:	f06f 0015 	mvn.w	r0, #21
}
   25fe2:	4770      	bx	lr
		return -EINVAL;
   25fe4:	f06f 0015 	mvn.w	r0, #21
   25fe8:	e7f8      	b.n	25fdc <validate_args+0x16>
		rv = -EINVAL;
   25fea:	f06f 0015 	mvn.w	r0, #21
   25fee:	e7f5      	b.n	25fdc <validate_args+0x16>

00025ff0 <notify_one>:
{
   25ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25ff4:	4607      	mov	r7, r0
   25ff6:	460c      	mov	r4, r1
   25ff8:	4616      	mov	r6, r2
   25ffa:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   25ffc:	4619      	mov	r1, r3
   25ffe:	1d20      	adds	r0, r4, #4
   26000:	f000 f8cb 	bl	2619a <sys_notify_finalize>
	if (cb) {
   26004:	b128      	cbz	r0, 26012 <notify_one+0x22>
   26006:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   26008:	462b      	mov	r3, r5
   2600a:	4632      	mov	r2, r6
   2600c:	4621      	mov	r1, r4
   2600e:	4638      	mov	r0, r7
   26010:	47c0      	blx	r8
}
   26012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026016 <notify_all>:
{
   26016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2601a:	4680      	mov	r8, r0
   2601c:	460c      	mov	r4, r1
   2601e:	4617      	mov	r7, r2
   26020:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
   26022:	e004      	b.n	2602e <notify_all+0x18>
		notify_one(mgr, cli, state, res);
   26024:	4633      	mov	r3, r6
   26026:	463a      	mov	r2, r7
   26028:	4640      	mov	r0, r8
   2602a:	f7ff ffe1 	bl	25ff0 <notify_one>
	return list->head;
   2602e:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   26030:	b131      	cbz	r1, 26040 <notify_all+0x2a>
	return node->next;
   26032:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   26034:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   26036:	6863      	ldr	r3, [r4, #4]
   26038:	428b      	cmp	r3, r1
   2603a:	d1f3      	bne.n	26024 <notify_all+0xe>
	list->tail = node;
   2603c:	6065      	str	r5, [r4, #4]
}
   2603e:	e7f1      	b.n	26024 <notify_all+0xe>
}
   26040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026044 <transition_complete>:
{
   26044:	b508      	push	{r3, lr}
	__asm__ volatile(
   26046:	f04f 0c40 	mov.w	ip, #64	; 0x40
   2604a:	f3ef 8211 	mrs	r2, BASEPRI
   2604e:	f38c 8812 	msr	BASEPRI_MAX, ip
   26052:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   26056:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   26058:	2101      	movs	r1, #1
   2605a:	f7ed feb3 	bl	13dc4 <process_event>
}
   2605e:	bd08      	pop	{r3, pc}

00026060 <onoff_manager_init>:
	if ((mgr == NULL)
   26060:	4603      	mov	r3, r0
   26062:	b170      	cbz	r0, 26082 <onoff_manager_init+0x22>
	    || (transitions == NULL)
   26064:	b181      	cbz	r1, 26088 <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
   26066:	680a      	ldr	r2, [r1, #0]
   26068:	b18a      	cbz	r2, 2608e <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
   2606a:	684a      	ldr	r2, [r1, #4]
   2606c:	b192      	cbz	r2, 26094 <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2606e:	2000      	movs	r0, #0
   26070:	6018      	str	r0, [r3, #0]
   26072:	6058      	str	r0, [r3, #4]
   26074:	6098      	str	r0, [r3, #8]
   26076:	60d8      	str	r0, [r3, #12]
   26078:	6118      	str	r0, [r3, #16]
   2607a:	6158      	str	r0, [r3, #20]
   2607c:	6198      	str	r0, [r3, #24]
   2607e:	6119      	str	r1, [r3, #16]
	return 0;
   26080:	4770      	bx	lr
		return -EINVAL;
   26082:	f06f 0015 	mvn.w	r0, #21
   26086:	4770      	bx	lr
   26088:	f06f 0015 	mvn.w	r0, #21
   2608c:	4770      	bx	lr
   2608e:	f06f 0015 	mvn.w	r0, #21
   26092:	4770      	bx	lr
   26094:	f06f 0015 	mvn.w	r0, #21
}
   26098:	4770      	bx	lr

0002609a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   2609a:	b570      	push	{r4, r5, r6, lr}
   2609c:	4605      	mov	r5, r0
   2609e:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   260a0:	f7ff ff91 	bl	25fc6 <validate_args>

	if (rv < 0) {
   260a4:	1e04      	subs	r4, r0, #0
   260a6:	db30      	blt.n	2610a <onoff_request+0x70>
   260a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   260ac:	f3ef 8211 	mrs	r2, BASEPRI
   260b0:	f383 8812 	msr	BASEPRI_MAX, r3
   260b4:	f3bf 8f6f 	isb	sy
   260b8:	4696      	mov	lr, r2
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   260ba:	f8b5 c018 	ldrh.w	ip, [r5, #24]
   260be:	f00c 0c07 	and.w	ip, ip, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   260c2:	8b6b      	ldrh	r3, [r5, #26]
   260c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   260c8:	428b      	cmp	r3, r1
   260ca:	d02c      	beq.n	26126 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   260cc:	4664      	mov	r4, ip
	if (state == ONOFF_STATE_ON) {
   260ce:	f1bc 0f02 	cmp.w	ip, #2
   260d2:	d008      	beq.n	260e6 <onoff_request+0x4c>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   260d4:	f1bc 0f06 	cmp.w	ip, #6
   260d8:	d819      	bhi.n	2610e <onoff_request+0x74>
   260da:	e8df f00c 	tbb	[pc, ip]
   260de:	181e      	.short	0x181e
   260e0:	2a1e1818 	.word	0x2a1e1818
   260e4:	1e          	.byte	0x1e
   260e5:	00          	.byte	0x00
		mgr->refs += 1U;
   260e6:	3301      	adds	r3, #1
   260e8:	836b      	strh	r3, [r5, #26]
		notify = true;
   260ea:	2301      	movs	r3, #1
	bool start = false;             /* trigger a start transition */
   260ec:	2100      	movs	r1, #0
	bool add_client = false;        /* add client to pending list */
   260ee:	4608      	mov	r0, r1
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
   260f0:	b128      	cbz	r0, 260fe <onoff_request+0x64>
	parent->next = child;
   260f2:	2000      	movs	r0, #0
   260f4:	6030      	str	r0, [r6, #0]
	return list->tail;
   260f6:	6868      	ldr	r0, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   260f8:	b308      	cbz	r0, 2613e <onoff_request+0xa4>
	parent->next = child;
   260fa:	6006      	str	r6, [r0, #0]
	list->tail = node;
   260fc:	606e      	str	r6, [r5, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   260fe:	bb09      	cbnz	r1, 26144 <onoff_request+0xaa>
	__asm__ volatile(
   26100:	f38e 8811 	msr	BASEPRI, lr
   26104:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   26108:	bb0b      	cbnz	r3, 2614e <onoff_request+0xb4>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   2610a:	4620      	mov	r0, r4
   2610c:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   2610e:	f06f 0404 	mvn.w	r4, #4
   26112:	2300      	movs	r3, #0
   26114:	4619      	mov	r1, r3
   26116:	4618      	mov	r0, r3
   26118:	e7ea      	b.n	260f0 <onoff_request+0x56>
		start = (state == ONOFF_STATE_OFF);
   2611a:	fabc f18c 	clz	r1, ip
   2611e:	0949      	lsrs	r1, r1, #5
	bool notify = false;            /* do client notification */
   26120:	2300      	movs	r3, #0
		add_client = true;
   26122:	2001      	movs	r0, #1
   26124:	e7e4      	b.n	260f0 <onoff_request+0x56>
		rv = -EAGAIN;
   26126:	f06f 040a 	mvn.w	r4, #10
	bool notify = false;            /* do client notification */
   2612a:	2300      	movs	r3, #0
	bool start = false;             /* trigger a start transition */
   2612c:	4619      	mov	r1, r3
	bool add_client = false;        /* add client to pending list */
   2612e:	4618      	mov	r0, r3
   26130:	e7de      	b.n	260f0 <onoff_request+0x56>
	if (state == ONOFF_STATE_ON) {
   26132:	f06f 0485 	mvn.w	r4, #133	; 0x85
   26136:	2300      	movs	r3, #0
   26138:	4619      	mov	r1, r3
   2613a:	4618      	mov	r0, r3
   2613c:	e7d8      	b.n	260f0 <onoff_request+0x56>
   2613e:	606e      	str	r6, [r5, #4]
	list->head = node;
   26140:	602e      	str	r6, [r5, #0]
}
   26142:	e7dc      	b.n	260fe <onoff_request+0x64>
		process_event(mgr, EVT_RECHECK, key);
   26144:	2102      	movs	r1, #2
   26146:	4628      	mov	r0, r5
   26148:	f7ed fe3c 	bl	13dc4 <process_event>
   2614c:	e7dd      	b.n	2610a <onoff_request+0x70>
			notify_one(mgr, cli, state, 0);
   2614e:	2300      	movs	r3, #0
   26150:	4662      	mov	r2, ip
   26152:	4631      	mov	r1, r6
   26154:	4628      	mov	r0, r5
   26156:	f7ff ff4b 	bl	25ff0 <notify_one>
   2615a:	e7d6      	b.n	2610a <onoff_request+0x70>

0002615c <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   2615c:	4602      	mov	r2, r0
   2615e:	b1b0      	cbz	r0, 2618e <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   26160:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   26162:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   26166:	2b02      	cmp	r3, #2
   26168:	d00b      	beq.n	26182 <sys_notify_validate+0x26>
   2616a:	2b03      	cmp	r3, #3
   2616c:	d004      	beq.n	26178 <sys_notify_validate+0x1c>
   2616e:	2b01      	cmp	r3, #1
   26170:	d004      	beq.n	2617c <sys_notify_validate+0x20>
   26172:	f06f 0015 	mvn.w	r0, #21
   26176:	4770      	bx	lr
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   26178:	6803      	ldr	r3, [r0, #0]
   2617a:	b15b      	cbz	r3, 26194 <sys_notify_validate+0x38>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   2617c:	2000      	movs	r0, #0
   2617e:	6090      	str	r0, [r2, #8]
   26180:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   26182:	6803      	ldr	r3, [r0, #0]
   26184:	2b00      	cmp	r3, #0
   26186:	d1f9      	bne.n	2617c <sys_notify_validate+0x20>
			rv = -EINVAL;
   26188:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   2618c:	4770      	bx	lr
		return -EINVAL;
   2618e:	f06f 0015 	mvn.w	r0, #21
   26192:	4770      	bx	lr
			rv = -EINVAL;
   26194:	f06f 0015 	mvn.w	r0, #21
   26198:	4770      	bx	lr

0002619a <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   2619a:	b510      	push	{r4, lr}
   2619c:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2619e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   261a0:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   261a4:	6081      	str	r1, [r0, #8]
	switch (method) {
   261a6:	2a02      	cmp	r2, #2
   261a8:	d004      	beq.n	261b4 <sys_notify_finalize+0x1a>
   261aa:	2a03      	cmp	r2, #3
   261ac:	d105      	bne.n	261ba <sys_notify_finalize+0x20>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   261ae:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   261b0:	2000      	movs	r0, #0
		break;
   261b2:	e004      	b.n	261be <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
   261b4:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   261b6:	2400      	movs	r4, #0
		break;
   261b8:	e001      	b.n	261be <sys_notify_finalize+0x24>
	switch (method) {
   261ba:	2400      	movs	r4, #0
   261bc:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   261be:	2200      	movs	r2, #0
   261c0:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   261c2:	b108      	cbz	r0, 261c8 <sys_notify_finalize+0x2e>
	return z_impl_k_poll_signal_raise(sig, result);
   261c4:	f7fe ffc8 	bl	25158 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   261c8:	4620      	mov	r0, r4
   261ca:	bd10      	pop	{r4, pc}

000261cc <extract_decimal>:
{
   261cc:	4684      	mov	ip, r0
	const char *sp = *str;
   261ce:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   261d0:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   261d2:	e006      	b.n	261e2 <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
   261d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   261d8:	3201      	adds	r2, #1
   261da:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   261de:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   261e2:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   261e4:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   261e8:	2909      	cmp	r1, #9
   261ea:	d9f3      	bls.n	261d4 <extract_decimal+0x8>
	*str = sp;
   261ec:	f8cc 2000 	str.w	r2, [ip]
}
   261f0:	4770      	bx	lr

000261f2 <extract_width>:
{
   261f2:	b530      	push	{r4, r5, lr}
   261f4:	b083      	sub	sp, #12
   261f6:	4604      	mov	r4, r0
   261f8:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
   261fa:	7803      	ldrb	r3, [r0, #0]
   261fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   26200:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
   26202:	460d      	mov	r5, r1
   26204:	780b      	ldrb	r3, [r1, #0]
   26206:	2b2a      	cmp	r3, #42	; 0x2a
   26208:	d018      	beq.n	2623c <extract_width+0x4a>
	size_t width = extract_decimal(&sp);
   2620a:	a801      	add	r0, sp, #4
   2620c:	f7ff ffde 	bl	261cc <extract_decimal>
	if (sp != wp) {
   26210:	9b01      	ldr	r3, [sp, #4]
   26212:	429d      	cmp	r5, r3
   26214:	d00f      	beq.n	26236 <extract_width+0x44>
		conv->width_present = true;
   26216:	7823      	ldrb	r3, [r4, #0]
   26218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2621c:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
   2621e:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
   26220:	b2db      	uxtb	r3, r3
   26222:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   26226:	2800      	cmp	r0, #0
   26228:	db10      	blt.n	2624c <extract_width+0x5a>
   2622a:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   2622c:	4313      	orrs	r3, r2
   2622e:	7822      	ldrb	r2, [r4, #0]
   26230:	f363 0241 	bfi	r2, r3, #1, #1
   26234:	7022      	strb	r2, [r4, #0]
	return sp;
   26236:	9801      	ldr	r0, [sp, #4]
}
   26238:	b003      	add	sp, #12
   2623a:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
   2623c:	7843      	ldrb	r3, [r0, #1]
   2623e:	f043 0301 	orr.w	r3, r3, #1
   26242:	7043      	strb	r3, [r0, #1]
		return ++sp;
   26244:	4608      	mov	r0, r1
   26246:	3001      	adds	r0, #1
   26248:	9001      	str	r0, [sp, #4]
   2624a:	e7f5      	b.n	26238 <extract_width+0x46>
				      || (width != (size_t)conv->width_value));
   2624c:	2201      	movs	r2, #1
   2624e:	e7ed      	b.n	2622c <extract_width+0x3a>

00026250 <extract_prec>:
{
   26250:	b510      	push	{r4, lr}
   26252:	b082      	sub	sp, #8
   26254:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
   26256:	780b      	ldrb	r3, [r1, #0]
   26258:	2b2e      	cmp	r3, #46	; 0x2e
   2625a:	bf14      	ite	ne
   2625c:	2300      	movne	r3, #0
   2625e:	2301      	moveq	r3, #1
   26260:	7842      	ldrb	r2, [r0, #1]
   26262:	f363 0241 	bfi	r2, r3, #1, #1
   26266:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
   26268:	b1c3      	cbz	r3, 2629c <extract_prec+0x4c>
   2626a:	4604      	mov	r4, r0
	++sp;
   2626c:	9b01      	ldr	r3, [sp, #4]
   2626e:	1c5a      	adds	r2, r3, #1
   26270:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
   26272:	785b      	ldrb	r3, [r3, #1]
   26274:	2b2a      	cmp	r3, #42	; 0x2a
   26276:	d013      	beq.n	262a0 <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
   26278:	a801      	add	r0, sp, #4
   2627a:	f7ff ffa7 	bl	261cc <extract_decimal>
	conv->prec_value = prec;
   2627e:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
   26280:	7823      	ldrb	r3, [r4, #0]
   26282:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   26286:	2800      	cmp	r0, #0
   26288:	db12      	blt.n	262b0 <extract_prec+0x60>
   2628a:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   2628c:	4313      	orrs	r3, r2
   2628e:	7822      	ldrb	r2, [r4, #0]
   26290:	f363 0241 	bfi	r2, r3, #1, #1
   26294:	7022      	strb	r2, [r4, #0]
	return sp;
   26296:	9801      	ldr	r0, [sp, #4]
}
   26298:	b002      	add	sp, #8
   2629a:	bd10      	pop	{r4, pc}
		return sp;
   2629c:	4608      	mov	r0, r1
   2629e:	e7fb      	b.n	26298 <extract_prec+0x48>
		conv->prec_star = true;
   262a0:	7843      	ldrb	r3, [r0, #1]
   262a2:	f043 0304 	orr.w	r3, r3, #4
   262a6:	7043      	strb	r3, [r0, #1]
		return ++sp;
   262a8:	4610      	mov	r0, r2
   262aa:	3001      	adds	r0, #1
   262ac:	9001      	str	r0, [sp, #4]
   262ae:	e7f3      	b.n	26298 <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
   262b0:	2201      	movs	r2, #1
   262b2:	e7eb      	b.n	2628c <extract_prec+0x3c>

000262b4 <extract_length>:
{
   262b4:	4602      	mov	r2, r0
	switch (*sp) {
   262b6:	780b      	ldrb	r3, [r1, #0]
   262b8:	3b4c      	subs	r3, #76	; 0x4c
   262ba:	2b2e      	cmp	r3, #46	; 0x2e
   262bc:	d85b      	bhi.n	26376 <extract_length+0xc2>
   262be:	e8df f003 	tbb	[pc, r3]
   262c2:	5a4f      	.short	0x5a4f
   262c4:	5a5a5a5a 	.word	0x5a5a5a5a
   262c8:	5a5a5a5a 	.word	0x5a5a5a5a
   262cc:	5a5a5a5a 	.word	0x5a5a5a5a
   262d0:	5a5a5a5a 	.word	0x5a5a5a5a
   262d4:	5a5a5a5a 	.word	0x5a5a5a5a
   262d8:	5a5a5a5a 	.word	0x5a5a5a5a
   262dc:	5a185a5a 	.word	0x5a185a5a
   262e0:	5a295a3a 	.word	0x5a295a3a
   262e4:	5a5a5a5a 	.word	0x5a5a5a5a
   262e8:	5a485a5a 	.word	0x5a485a5a
   262ec:	5a5a5a5a 	.word	0x5a5a5a5a
   262f0:	41          	.byte	0x41
   262f1:	00          	.byte	0x00
		if (*++sp == 'h') {
   262f2:	1c48      	adds	r0, r1, #1
   262f4:	784b      	ldrb	r3, [r1, #1]
   262f6:	2b68      	cmp	r3, #104	; 0x68
   262f8:	d005      	beq.n	26306 <extract_length+0x52>
			conv->length_mod = LENGTH_H;
   262fa:	7853      	ldrb	r3, [r2, #1]
   262fc:	2102      	movs	r1, #2
   262fe:	f361 03c6 	bfi	r3, r1, #3, #4
   26302:	7053      	strb	r3, [r2, #1]
   26304:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
   26306:	7853      	ldrb	r3, [r2, #1]
   26308:	2001      	movs	r0, #1
   2630a:	f360 03c6 	bfi	r3, r0, #3, #4
   2630e:	7053      	strb	r3, [r2, #1]
			++sp;
   26310:	1c88      	adds	r0, r1, #2
   26312:	4770      	bx	lr
		if (*++sp == 'l') {
   26314:	1c48      	adds	r0, r1, #1
   26316:	784b      	ldrb	r3, [r1, #1]
   26318:	2b6c      	cmp	r3, #108	; 0x6c
   2631a:	d005      	beq.n	26328 <extract_length+0x74>
			conv->length_mod = LENGTH_L;
   2631c:	7853      	ldrb	r3, [r2, #1]
   2631e:	2103      	movs	r1, #3
   26320:	f361 03c6 	bfi	r3, r1, #3, #4
   26324:	7053      	strb	r3, [r2, #1]
   26326:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
   26328:	7853      	ldrb	r3, [r2, #1]
   2632a:	2004      	movs	r0, #4
   2632c:	f360 03c6 	bfi	r3, r0, #3, #4
   26330:	7053      	strb	r3, [r2, #1]
			++sp;
   26332:	1c88      	adds	r0, r1, #2
   26334:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
   26336:	7853      	ldrb	r3, [r2, #1]
   26338:	2005      	movs	r0, #5
   2633a:	f360 03c6 	bfi	r3, r0, #3, #4
   2633e:	7053      	strb	r3, [r2, #1]
		++sp;
   26340:	1c48      	adds	r0, r1, #1
		break;
   26342:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
   26344:	7853      	ldrb	r3, [r2, #1]
   26346:	2006      	movs	r0, #6
   26348:	f360 03c6 	bfi	r3, r0, #3, #4
   2634c:	7053      	strb	r3, [r2, #1]
		++sp;
   2634e:	1c48      	adds	r0, r1, #1
		break;
   26350:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
   26352:	7853      	ldrb	r3, [r2, #1]
   26354:	2007      	movs	r0, #7
   26356:	f360 03c6 	bfi	r3, r0, #3, #4
   2635a:	7053      	strb	r3, [r2, #1]
		++sp;
   2635c:	1c48      	adds	r0, r1, #1
		break;
   2635e:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
   26360:	7853      	ldrb	r3, [r2, #1]
   26362:	2008      	movs	r0, #8
   26364:	f360 03c6 	bfi	r3, r0, #3, #4
   26368:	7053      	strb	r3, [r2, #1]
		++sp;
   2636a:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
   2636c:	7813      	ldrb	r3, [r2, #0]
   2636e:	f043 0302 	orr.w	r3, r3, #2
   26372:	7013      	strb	r3, [r2, #0]
		break;
   26374:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
   26376:	7853      	ldrb	r3, [r2, #1]
   26378:	f36f 03c6 	bfc	r3, #3, #4
   2637c:	7053      	strb	r3, [r2, #1]
		break;
   2637e:	4608      	mov	r0, r1
}
   26380:	4770      	bx	lr

00026382 <extract_specifier>:
{
   26382:	b500      	push	{lr}
   26384:	4602      	mov	r2, r0
	conv->specifier = *sp++;
   26386:	4608      	mov	r0, r1
   26388:	f810 3b01 	ldrb.w	r3, [r0], #1
   2638c:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
   2638e:	2b78      	cmp	r3, #120	; 0x78
   26390:	d817      	bhi.n	263c2 <extract_specifier+0x40>
   26392:	2b6e      	cmp	r3, #110	; 0x6e
   26394:	d229      	bcs.n	263ea <extract_specifier+0x68>
   26396:	2b69      	cmp	r3, #105	; 0x69
   26398:	d813      	bhi.n	263c2 <extract_specifier+0x40>
   2639a:	2b58      	cmp	r3, #88	; 0x58
   2639c:	d317      	bcc.n	263ce <extract_specifier+0x4c>
   2639e:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
   263a2:	fa5f fc8c 	uxtb.w	ip, ip
   263a6:	2101      	movs	r1, #1
   263a8:	fa01 f10c 	lsl.w	r1, r1, ip
   263ac:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   263b0:	d114      	bne.n	263dc <extract_specifier+0x5a>
   263b2:	f640 0c01 	movw	ip, #2049	; 0x801
   263b6:	ea11 0f0c 	tst.w	r1, ip
   263ba:	d155      	bne.n	26468 <extract_specifier+0xe6>
   263bc:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   263c0:	d13a      	bne.n	26438 <extract_specifier+0xb6>
		conv->invalid = true;
   263c2:	7813      	ldrb	r3, [r2, #0]
   263c4:	f043 0301 	orr.w	r3, r3, #1
   263c8:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
   263ca:	2100      	movs	r1, #0
		break;
   263cc:	e042      	b.n	26454 <extract_specifier+0xd2>
	switch (conv->specifier) {
   263ce:	2b41      	cmp	r3, #65	; 0x41
   263d0:	d004      	beq.n	263dc <extract_specifier+0x5a>
   263d2:	d3f6      	bcc.n	263c2 <extract_specifier+0x40>
   263d4:	3b45      	subs	r3, #69	; 0x45
   263d6:	b2db      	uxtb	r3, r3
   263d8:	2b02      	cmp	r3, #2
   263da:	d8f2      	bhi.n	263c2 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
   263dc:	7893      	ldrb	r3, [r2, #2]
   263de:	2104      	movs	r1, #4
   263e0:	f361 0302 	bfi	r3, r1, #0, #3
   263e4:	7093      	strb	r3, [r2, #2]
			unsupported = true;
   263e6:	2101      	movs	r1, #1
			break;
   263e8:	e034      	b.n	26454 <extract_specifier+0xd2>
	switch (conv->specifier) {
   263ea:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
   263ee:	b2c9      	uxtb	r1, r1
   263f0:	f04f 0c01 	mov.w	ip, #1
   263f4:	fa0c fc01 	lsl.w	ip, ip, r1
   263f8:	f240 4182 	movw	r1, #1154	; 0x482
   263fc:	ea1c 0f01 	tst.w	ip, r1
   26400:	bf14      	ite	ne
   26402:	f04f 0e01 	movne.w	lr, #1
   26406:	f04f 0e00 	moveq.w	lr, #0
   2640a:	d12d      	bne.n	26468 <extract_specifier+0xe6>
   2640c:	f01c 0f24 	tst.w	ip, #36	; 0x24
   26410:	bf14      	ite	ne
   26412:	2101      	movne	r1, #1
   26414:	2100      	moveq	r1, #0
   26416:	d139      	bne.n	2648c <extract_specifier+0x10a>
   26418:	f01c 0c01 	ands.w	ip, ip, #1
   2641c:	d0d1      	beq.n	263c2 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
   2641e:	7893      	ldrb	r3, [r2, #2]
   26420:	f04f 0e03 	mov.w	lr, #3
   26424:	f36e 0302 	bfi	r3, lr, #0, #3
   26428:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   2642a:	7853      	ldrb	r3, [r2, #1]
   2642c:	f003 0378 	and.w	r3, r3, #120	; 0x78
   26430:	2b40      	cmp	r3, #64	; 0x40
   26432:	d10f      	bne.n	26454 <extract_specifier+0xd2>
			unsupported = true;
   26434:	4661      	mov	r1, ip
   26436:	e00d      	b.n	26454 <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_SINT;
   26438:	7891      	ldrb	r1, [r2, #2]
   2643a:	f04f 0c01 	mov.w	ip, #1
   2643e:	f36c 0102 	bfi	r1, ip, #0, #3
   26442:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   26444:	7851      	ldrb	r1, [r2, #1]
   26446:	f001 0178 	and.w	r1, r1, #120	; 0x78
   2644a:	2940      	cmp	r1, #64	; 0x40
   2644c:	d013      	beq.n	26476 <extract_specifier+0xf4>
		if (conv->specifier == 'c') {
   2644e:	2b63      	cmp	r3, #99	; 0x63
   26450:	d018      	beq.n	26484 <extract_specifier+0x102>
	bool unsupported = false;
   26452:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
   26454:	7813      	ldrb	r3, [r2, #0]
   26456:	f3c3 0c40 	ubfx	ip, r3, #1, #1
   2645a:	ea41 010c 	orr.w	r1, r1, ip
   2645e:	f361 0341 	bfi	r3, r1, #1, #1
   26462:	7013      	strb	r3, [r2, #0]
}
   26464:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
   26468:	7891      	ldrb	r1, [r2, #2]
   2646a:	f04f 0c02 	mov.w	ip, #2
   2646e:	f36c 0102 	bfi	r1, ip, #0, #3
   26472:	7091      	strb	r1, [r2, #2]
   26474:	e7e6      	b.n	26444 <extract_specifier+0xc2>
			conv->invalid = true;
   26476:	f892 c000 	ldrb.w	ip, [r2]
   2647a:	f04c 0c01 	orr.w	ip, ip, #1
   2647e:	f882 c000 	strb.w	ip, [r2]
   26482:	e7e4      	b.n	2644e <extract_specifier+0xcc>
			unsupported = (conv->length_mod != LENGTH_NONE);
   26484:	3900      	subs	r1, #0
   26486:	bf18      	it	ne
   26488:	2101      	movne	r1, #1
   2648a:	e7e3      	b.n	26454 <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_PTR;
   2648c:	7893      	ldrb	r3, [r2, #2]
   2648e:	f04f 0c03 	mov.w	ip, #3
   26492:	f36c 0302 	bfi	r3, ip, #0, #3
   26496:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
   26498:	7853      	ldrb	r3, [r2, #1]
   2649a:	f013 0f78 	tst.w	r3, #120	; 0x78
   2649e:	d1d9      	bne.n	26454 <extract_specifier+0xd2>
	bool unsupported = false;
   264a0:	4671      	mov	r1, lr
   264a2:	e7d7      	b.n	26454 <extract_specifier+0xd2>

000264a4 <extract_conversion>:
{
   264a4:	b510      	push	{r4, lr}
   264a6:	4604      	mov	r4, r0
   264a8:	4608      	mov	r0, r1
	*conv = (struct conversion) {
   264aa:	2300      	movs	r3, #0
   264ac:	6023      	str	r3, [r4, #0]
   264ae:	6063      	str	r3, [r4, #4]
   264b0:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
   264b2:	784b      	ldrb	r3, [r1, #1]
   264b4:	2b25      	cmp	r3, #37	; 0x25
   264b6:	d014      	beq.n	264e2 <extract_conversion+0x3e>
   264b8:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
   264ba:	4620      	mov	r0, r4
   264bc:	f7ed fd38 	bl	13f30 <extract_flags>
   264c0:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
   264c2:	4620      	mov	r0, r4
   264c4:	f7ff fe95 	bl	261f2 <extract_width>
   264c8:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
   264ca:	4620      	mov	r0, r4
   264cc:	f7ff fec0 	bl	26250 <extract_prec>
   264d0:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
   264d2:	4620      	mov	r0, r4
   264d4:	f7ff feee 	bl	262b4 <extract_length>
   264d8:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
   264da:	4620      	mov	r0, r4
   264dc:	f7ff ff51 	bl	26382 <extract_specifier>
}
   264e0:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
   264e2:	3002      	adds	r0, #2
   264e4:	70e3      	strb	r3, [r4, #3]
		return sp;
   264e6:	e7fb      	b.n	264e0 <extract_conversion+0x3c>

000264e8 <conversion_radix>:
	switch (specifier) {
   264e8:	286f      	cmp	r0, #111	; 0x6f
   264ea:	d00c      	beq.n	26506 <conversion_radix+0x1e>
   264ec:	d905      	bls.n	264fa <conversion_radix+0x12>
   264ee:	2870      	cmp	r0, #112	; 0x70
   264f0:	d00b      	beq.n	2650a <conversion_radix+0x22>
   264f2:	2878      	cmp	r0, #120	; 0x78
   264f4:	d10b      	bne.n	2650e <conversion_radix+0x26>
		return 16;
   264f6:	2010      	movs	r0, #16
   264f8:	4770      	bx	lr
	switch (specifier) {
   264fa:	2858      	cmp	r0, #88	; 0x58
   264fc:	d001      	beq.n	26502 <conversion_radix+0x1a>
   264fe:	200a      	movs	r0, #10
   26500:	4770      	bx	lr
		return 16;
   26502:	2010      	movs	r0, #16
   26504:	4770      	bx	lr
		return 8;
   26506:	2008      	movs	r0, #8
   26508:	4770      	bx	lr
		return 16;
   2650a:	2010      	movs	r0, #16
   2650c:	4770      	bx	lr
	switch (specifier) {
   2650e:	200a      	movs	r0, #10
}
   26510:	4770      	bx	lr

00026512 <encode_uint>:
{
   26512:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26516:	4605      	mov	r5, r0
   26518:	460c      	mov	r4, r1
   2651a:	4693      	mov	fp, r2
   2651c:	4699      	mov	r9, r3
   2651e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier);
   26520:	78d0      	ldrb	r0, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   26522:	f1a0 0a41 	sub.w	sl, r0, #65	; 0x41
	const unsigned int radix = conversion_radix(conv->specifier);
   26526:	f7ff ffdf 	bl	264e8 <conversion_radix>
   2652a:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
   2652c:	e015      	b.n	2655a <encode_uint+0x48>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2652e:	f1ba 0f19 	cmp.w	sl, #25
   26532:	d820      	bhi.n	26576 <encode_uint+0x64>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   26534:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   26536:	3237      	adds	r2, #55	; 0x37
   26538:	b2d2      	uxtb	r2, r2
   2653a:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
   2653e:	4632      	mov	r2, r6
   26540:	4643      	mov	r3, r8
   26542:	4628      	mov	r0, r5
   26544:	4621      	mov	r1, r4
   26546:	f7d9 fddb 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   2654a:	42b5      	cmp	r5, r6
   2654c:	f174 0400 	sbcs.w	r4, r4, #0
   26550:	d315      	bcc.n	2657e <encode_uint+0x6c>
   26552:	454f      	cmp	r7, r9
   26554:	d913      	bls.n	2657e <encode_uint+0x6c>
		value /= radix;
   26556:	4605      	mov	r5, r0
   26558:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
   2655a:	f04f 0800 	mov.w	r8, #0
   2655e:	4632      	mov	r2, r6
   26560:	4643      	mov	r3, r8
   26562:	4628      	mov	r0, r5
   26564:	4621      	mov	r1, r4
   26566:	f7d9 fdcb 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2656a:	2a09      	cmp	r2, #9
   2656c:	d8df      	bhi.n	2652e <encode_uint+0x1c>
   2656e:	b2d2      	uxtb	r2, r2
   26570:	3230      	adds	r2, #48	; 0x30
   26572:	b2d2      	uxtb	r2, r2
   26574:	e7e1      	b.n	2653a <encode_uint+0x28>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   26576:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   26578:	3257      	adds	r2, #87	; 0x57
   2657a:	b2d2      	uxtb	r2, r2
   2657c:	e7dd      	b.n	2653a <encode_uint+0x28>
	if (conv->flag_hash) {
   2657e:	f89b 3000 	ldrb.w	r3, [fp]
   26582:	f013 0f20 	tst.w	r3, #32
   26586:	d003      	beq.n	26590 <encode_uint+0x7e>
		if (radix == 8) {
   26588:	2e08      	cmp	r6, #8
   2658a:	d004      	beq.n	26596 <encode_uint+0x84>
		} else if (radix == 16) {
   2658c:	2e10      	cmp	r6, #16
   2658e:	d009      	beq.n	265a4 <encode_uint+0x92>
}
   26590:	4638      	mov	r0, r7
   26592:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   26596:	f89b 3002 	ldrb.w	r3, [fp, #2]
   2659a:	f043 0308 	orr.w	r3, r3, #8
   2659e:	f88b 3002 	strb.w	r3, [fp, #2]
   265a2:	e7f5      	b.n	26590 <encode_uint+0x7e>
			conv->altform_0c = true;
   265a4:	f89b 3002 	ldrb.w	r3, [fp, #2]
   265a8:	f043 0310 	orr.w	r3, r3, #16
   265ac:	f88b 3002 	strb.w	r3, [fp, #2]
   265b0:	e7ee      	b.n	26590 <encode_uint+0x7e>

000265b2 <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
   265b2:	7843      	ldrb	r3, [r0, #1]
   265b4:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   265b8:	2b07      	cmp	r3, #7
   265ba:	d818      	bhi.n	265ee <store_count+0x3c>
   265bc:	e8df f003 	tbb	[pc, r3]
   265c0:	0a080604 	.word	0x0a080604
   265c4:	1614100c 	.word	0x1614100c
		*(int *)dp = count;
   265c8:	600a      	str	r2, [r1, #0]
		break;
   265ca:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
   265cc:	700a      	strb	r2, [r1, #0]
		break;
   265ce:	4770      	bx	lr
		*(short *)dp = (short)count;
   265d0:	800a      	strh	r2, [r1, #0]
		break;
   265d2:	4770      	bx	lr
		*(long *)dp = (long)count;
   265d4:	600a      	str	r2, [r1, #0]
		break;
   265d6:	4770      	bx	lr
		*(long long *)dp = (long long)count;
   265d8:	17d3      	asrs	r3, r2, #31
   265da:	600a      	str	r2, [r1, #0]
   265dc:	604b      	str	r3, [r1, #4]
		break;
   265de:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
   265e0:	17d3      	asrs	r3, r2, #31
   265e2:	600a      	str	r2, [r1, #0]
   265e4:	604b      	str	r3, [r1, #4]
		break;
   265e6:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
   265e8:	600a      	str	r2, [r1, #0]
		break;
   265ea:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   265ec:	600a      	str	r2, [r1, #0]
}
   265ee:	4770      	bx	lr

000265f0 <outs>:
{
   265f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   265f4:	4607      	mov	r7, r0
   265f6:	460e      	mov	r6, r1
   265f8:	4614      	mov	r4, r2
   265fa:	4698      	mov	r8, r3
	size_t count = 0;
   265fc:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   265fe:	e006      	b.n	2660e <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   26600:	4631      	mov	r1, r6
   26602:	f814 0b01 	ldrb.w	r0, [r4], #1
   26606:	47b8      	blx	r7
		if (rc < 0) {
   26608:	2800      	cmp	r0, #0
   2660a:	db09      	blt.n	26620 <outs+0x30>
		++count;
   2660c:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2660e:	4544      	cmp	r4, r8
   26610:	d3f6      	bcc.n	26600 <outs+0x10>
   26612:	f1b8 0f00 	cmp.w	r8, #0
   26616:	d102      	bne.n	2661e <outs+0x2e>
   26618:	7823      	ldrb	r3, [r4, #0]
   2661a:	2b00      	cmp	r3, #0
   2661c:	d1f0      	bne.n	26600 <outs+0x10>
	return (int)count;
   2661e:	4628      	mov	r0, r5
}
   26620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026624 <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   26624:	b40f      	push	{r0, r1, r2, r3}
   26626:	b500      	push	{lr}
   26628:	b083      	sub	sp, #12
   2662a:	a904      	add	r1, sp, #16
   2662c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   26630:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   26632:	f7ff fa05 	bl	25a40 <vprintk>

	va_end(ap);
}
   26636:	b003      	add	sp, #12
   26638:	f85d eb04 	ldr.w	lr, [sp], #4
   2663c:	b004      	add	sp, #16
   2663e:	4770      	bx	lr

00026640 <free_space>:
	ARG_UNUSED(err);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   26640:	68c3      	ldr	r3, [r0, #12]
   26642:	6802      	ldr	r2, [r0, #0]
   26644:	4293      	cmp	r3, r2
   26646:	d805      	bhi.n	26654 <free_space+0x14>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;

		return false;
	} else if (!buffer->rd_idx) {
   26648:	b14b      	cbz	r3, 2665e <free_space+0x1e>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
		return false;
	}

	*res = buffer->size - buffer->tmp_wr_idx;
   2664a:	6a03      	ldr	r3, [r0, #32]
   2664c:	1a9b      	subs	r3, r3, r2
   2664e:	600b      	str	r3, [r1, #0]

	return true;
   26650:	2001      	movs	r0, #1
}
   26652:	4770      	bx	lr
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   26654:	1a9b      	subs	r3, r3, r2
   26656:	3b01      	subs	r3, #1
   26658:	600b      	str	r3, [r1, #0]
		return false;
   2665a:	2000      	movs	r0, #0
   2665c:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   2665e:	6a03      	ldr	r3, [r0, #32]
   26660:	1a9b      	subs	r3, r3, r2
   26662:	3b01      	subs	r3, #1
   26664:	600b      	str	r3, [r1, #0]
		return false;
   26666:	2000      	movs	r0, #0
   26668:	4770      	bx	lr

0002666a <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   2666a:	b510      	push	{r4, lr}
   2666c:	b082      	sub	sp, #8
   2666e:	4604      	mov	r4, r0
	uint32_t f;

	if (free_space(buffer, &f)) {
   26670:	a901      	add	r1, sp, #4
   26672:	f7ff ffe5 	bl	26640 <free_space>
   26676:	b120      	cbz	r0, 26682 <get_usage+0x18>
		f += (buffer->rd_idx - 1);
   26678:	68e3      	ldr	r3, [r4, #12]
   2667a:	9a01      	ldr	r2, [sp, #4]
   2667c:	4413      	add	r3, r2
   2667e:	3b01      	subs	r3, #1
   26680:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   26682:	6a20      	ldr	r0, [r4, #32]
   26684:	9b01      	ldr	r3, [sp, #4]
   26686:	1ac0      	subs	r0, r0, r3
}
   26688:	3801      	subs	r0, #1
   2668a:	b002      	add	sp, #8
   2668c:	bd10      	pop	{r4, pc}

0002668e <max_utilization_update>:

static inline void max_utilization_update(struct mpsc_pbuf_buffer *buffer)
{
   2668e:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   26690:	6903      	ldr	r3, [r0, #16]
   26692:	f013 0f04 	tst.w	r3, #4
   26696:	d100      	bne.n	2669a <max_utilization_update+0xc>
		return;
	}

	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
}
   26698:	bd38      	pop	{r3, r4, r5, pc}
   2669a:	4604      	mov	r4, r0
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   2669c:	6a45      	ldr	r5, [r0, #36]	; 0x24
   2669e:	f7ff ffe4 	bl	2666a <get_usage>
   266a2:	4285      	cmp	r5, r0
   266a4:	d902      	bls.n	266ac <max_utilization_update+0x1e>
   266a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   266a8:	6260      	str	r0, [r4, #36]	; 0x24
   266aa:	e7f5      	b.n	26698 <max_utilization_update+0xa>
   266ac:	4620      	mov	r0, r4
   266ae:	f7ff ffdc 	bl	2666a <get_usage>
   266b2:	e7f9      	b.n	266a8 <max_utilization_update+0x1a>

000266b4 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   266b4:	b410      	push	{r4}
	union mpsc_pbuf_generic skip = {
   266b6:	2300      	movs	r3, #0
   266b8:	f36f 0300 	bfc	r3, #0, #1
   266bc:	f043 0302 	orr.w	r3, r3, #2
   266c0:	f361 039f 	bfi	r3, r1, #2, #30
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   266c4:	69c2      	ldr	r2, [r0, #28]
   266c6:	6804      	ldr	r4, [r0, #0]
   266c8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   266cc:	6803      	ldr	r3, [r0, #0]
	uint32_t i = idx + val;
   266ce:	440b      	add	r3, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   266d0:	6902      	ldr	r2, [r0, #16]
   266d2:	f012 0201 	ands.w	r2, r2, #1
   266d6:	d104      	bne.n	266e2 <add_skip_item+0x2e>
	return (i >= buffer->size) ? i - buffer->size : i;
   266d8:	6a04      	ldr	r4, [r0, #32]
   266da:	42a3      	cmp	r3, r4
   266dc:	d304      	bcc.n	266e8 <add_skip_item+0x34>
   266de:	1b1b      	subs	r3, r3, r4
   266e0:	e002      	b.n	266e8 <add_skip_item+0x34>
		return i & (buffer->size - 1);
   266e2:	6a04      	ldr	r4, [r0, #32]
   266e4:	3c01      	subs	r4, #1
   266e6:	4023      	ands	r3, r4
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   266e8:	6003      	str	r3, [r0, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   266ea:	6843      	ldr	r3, [r0, #4]
	uint32_t i = idx + val;
   266ec:	4419      	add	r1, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   266ee:	b922      	cbnz	r2, 266fa <add_skip_item+0x46>
	return (i >= buffer->size) ? i - buffer->size : i;
   266f0:	6a03      	ldr	r3, [r0, #32]
   266f2:	4299      	cmp	r1, r3
   266f4:	d304      	bcc.n	26700 <add_skip_item+0x4c>
   266f6:	1ac9      	subs	r1, r1, r3
   266f8:	e002      	b.n	26700 <add_skip_item+0x4c>
		return i & (buffer->size - 1);
   266fa:	6a03      	ldr	r3, [r0, #32]
   266fc:	3b01      	subs	r3, #1
   266fe:	4019      	ands	r1, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   26700:	6041      	str	r1, [r0, #4]
}
   26702:	bc10      	pop	{r4}
   26704:	4770      	bx	lr

00026706 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
   26706:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2670a:	b083      	sub	sp, #12
   2670c:	4604      	mov	r4, r0
   2670e:	9101      	str	r1, [sp, #4]
   26710:	4615      	mov	r5, r2
   26712:	461e      	mov	r6, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
   26714:	2300      	movs	r3, #0
   26716:	7033      	strb	r3, [r6, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   26718:	f8d0 801c 	ldr.w	r8, [r0, #28]
   2671c:	f8d0 900c 	ldr.w	r9, [r0, #12]
   26720:	eb08 0a89 	add.w	sl, r8, r9, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   26724:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
   26728:	f003 0303 	and.w	r3, r3, #3
   2672c:	2b02      	cmp	r3, #2
   2672e:	d012      	beq.n	26756 <drop_item_locked+0x50>
	return 0;
   26730:	f04f 0b00 	mov.w	fp, #0
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   26734:	69a3      	ldr	r3, [r4, #24]
   26736:	4650      	mov	r0, sl
   26738:	4798      	blx	r3
   2673a:	4607      	mov	r7, r0
	if (skip_wlen) {
   2673c:	f1bb 0f00 	cmp.w	fp, #0
   26740:	d152      	bne.n	267e8 <drop_item_locked+0xe2>
		allow_drop = true;
	} else if (allow_drop) {
   26742:	2d00      	cmp	r5, #0
   26744:	d05d      	beq.n	26802 <drop_item_locked+0xfc>
		if (item->hdr.busy) {
   26746:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
   2674a:	f013 0f02 	tst.w	r3, #2
   2674e:	d10a      	bne.n	26766 <drop_item_locked+0x60>
			} else {
				rd_wlen += buffer->get_wlen(item);
				*user_packet = true;
			}
		} else {
			*user_packet = true;
   26750:	2301      	movs	r3, #1
   26752:	7033      	strb	r3, [r6, #0]
   26754:	e049      	b.n	267ea <drop_item_locked+0xe4>
		return item->skip.len;
   26756:	f858 3029 	ldr.w	r3, [r8, r9, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   2675a:	ea5f 0b93 	movs.w	fp, r3, lsr #2
   2675e:	d0e9      	beq.n	26734 <drop_item_locked+0x2e>
		return item->skip.len;
   26760:	465f      	mov	r7, fp
		allow_drop = true;
   26762:	2501      	movs	r5, #1
   26764:	e041      	b.n	267ea <drop_item_locked+0xe4>
			add_skip_item(buffer, free_wlen + 1);
   26766:	9901      	ldr	r1, [sp, #4]
   26768:	3101      	adds	r1, #1
   2676a:	4620      	mov	r0, r4
   2676c:	f7ff ffa2 	bl	266b4 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   26770:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
   26772:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   26774:	6922      	ldr	r2, [r4, #16]
   26776:	f012 0201 	ands.w	r2, r2, #1
   2677a:	d104      	bne.n	26786 <drop_item_locked+0x80>
	return (i >= buffer->size) ? i - buffer->size : i;
   2677c:	6a21      	ldr	r1, [r4, #32]
   2677e:	428b      	cmp	r3, r1
   26780:	d304      	bcc.n	2678c <drop_item_locked+0x86>
   26782:	1a5b      	subs	r3, r3, r1
   26784:	e002      	b.n	2678c <drop_item_locked+0x86>
		return i & (buffer->size - 1);
   26786:	6a21      	ldr	r1, [r4, #32]
   26788:	3901      	subs	r1, #1
   2678a:	400b      	ands	r3, r1
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   2678c:	6063      	str	r3, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   2678e:	6823      	ldr	r3, [r4, #0]
	uint32_t i = idx + val;
   26790:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   26792:	b922      	cbnz	r2, 2679e <drop_item_locked+0x98>
	return (i >= buffer->size) ? i - buffer->size : i;
   26794:	6a21      	ldr	r1, [r4, #32]
   26796:	428b      	cmp	r3, r1
   26798:	d304      	bcc.n	267a4 <drop_item_locked+0x9e>
   2679a:	1a5b      	subs	r3, r3, r1
   2679c:	e002      	b.n	267a4 <drop_item_locked+0x9e>
		return i & (buffer->size - 1);
   2679e:	6a21      	ldr	r1, [r4, #32]
   267a0:	3901      	subs	r1, #1
   267a2:	400b      	ands	r3, r1
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   267a4:	6023      	str	r3, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   267a6:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
   267a8:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   267aa:	b922      	cbnz	r2, 267b6 <drop_item_locked+0xb0>
	return (i >= buffer->size) ? i - buffer->size : i;
   267ac:	6a22      	ldr	r2, [r4, #32]
   267ae:	4293      	cmp	r3, r2
   267b0:	d304      	bcc.n	267bc <drop_item_locked+0xb6>
   267b2:	1a9b      	subs	r3, r3, r2
   267b4:	e002      	b.n	267bc <drop_item_locked+0xb6>
		return i & (buffer->size - 1);
   267b6:	6a22      	ldr	r2, [r4, #32]
   267b8:	3a01      	subs	r2, #1
   267ba:	4013      	ands	r3, r2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   267bc:	69e1      	ldr	r1, [r4, #28]
   267be:	eb01 0a83 	add.w	sl, r1, r3, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   267c2:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
   267c6:	f002 0203 	and.w	r2, r2, #3
   267ca:	2a02      	cmp	r2, #2
   267cc:	d006      	beq.n	267dc <drop_item_locked+0xd6>
				rd_wlen += buffer->get_wlen(item);
   267ce:	69a3      	ldr	r3, [r4, #24]
   267d0:	4650      	mov	r0, sl
   267d2:	4798      	blx	r3
   267d4:	4407      	add	r7, r0
				*user_packet = true;
   267d6:	2301      	movs	r3, #1
   267d8:	7033      	strb	r3, [r6, #0]
   267da:	e006      	b.n	267ea <drop_item_locked+0xe4>
		return item->skip.len;
   267dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			if (skip_wlen) {
   267e0:	089b      	lsrs	r3, r3, #2
   267e2:	d0f4      	beq.n	267ce <drop_item_locked+0xc8>
				rd_wlen += skip_wlen;
   267e4:	441f      	add	r7, r3
   267e6:	e000      	b.n	267ea <drop_item_locked+0xe4>
		allow_drop = true;
   267e8:	2501      	movs	r5, #1
		}
	} else {
		item = NULL;
	}

	if (allow_drop) {
   267ea:	b195      	cbz	r5, 26812 <drop_item_locked+0x10c>
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   267ec:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
   267ee:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   267f0:	6922      	ldr	r2, [r4, #16]
   267f2:	f012 0f01 	tst.w	r2, #1
   267f6:	d107      	bne.n	26808 <drop_item_locked+0x102>
	return (i >= buffer->size) ? i - buffer->size : i;
   267f8:	6a22      	ldr	r2, [r4, #32]
   267fa:	4293      	cmp	r3, r2
   267fc:	d307      	bcc.n	2680e <drop_item_locked+0x108>
   267fe:	1a9b      	subs	r3, r3, r2
   26800:	e005      	b.n	2680e <drop_item_locked+0x108>
		item = NULL;
   26802:	f04f 0a00 	mov.w	sl, #0
   26806:	e7f0      	b.n	267ea <drop_item_locked+0xe4>
		return i & (buffer->size - 1);
   26808:	6a22      	ldr	r2, [r4, #32]
   2680a:	3a01      	subs	r2, #1
   2680c:	4013      	ands	r3, r2
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   2680e:	60e3      	str	r3, [r4, #12]
		buffer->tmp_rd_idx = buffer->rd_idx;
   26810:	60a3      	str	r3, [r4, #8]
	}

	return item;
}
   26812:	4650      	mov	r0, sl
   26814:	b003      	add	sp, #12
   26816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002681a <mpsc_pbuf_init>:
{
   2681a:	b538      	push	{r3, r4, r5, lr}
   2681c:	4604      	mov	r4, r0
   2681e:	460d      	mov	r5, r1
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   26820:	221c      	movs	r2, #28
   26822:	2100      	movs	r1, #0
   26824:	f000 fe81 	bl	2752a <memset>
	buffer->get_wlen = cfg->get_wlen;
   26828:	68eb      	ldr	r3, [r5, #12]
   2682a:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   2682c:	68ab      	ldr	r3, [r5, #8]
   2682e:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   26830:	682b      	ldr	r3, [r5, #0]
   26832:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   26834:	686b      	ldr	r3, [r5, #4]
   26836:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
   26838:	2200      	movs	r2, #0
   2683a:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
   2683c:	692a      	ldr	r2, [r5, #16]
   2683e:	6122      	str	r2, [r4, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   26840:	b12b      	cbz	r3, 2684e <mpsc_pbuf_init+0x34>
   26842:	1e59      	subs	r1, r3, #1
   26844:	420b      	tst	r3, r1
   26846:	d102      	bne.n	2684e <mpsc_pbuf_init+0x34>
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   26848:	f042 0201 	orr.w	r2, r2, #1
   2684c:	6122      	str	r2, [r4, #16]
	err = k_sem_init(&buffer->sem, 0, 1);
   2684e:	f104 0028 	add.w	r0, r4, #40	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
   26852:	2201      	movs	r2, #1
   26854:	2100      	movs	r1, #0
   26856:	f005 fc5e 	bl	2c116 <z_impl_k_sem_init>
}
   2685a:	bd38      	pop	{r3, r4, r5, pc}

0002685c <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   2685c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26860:	b085      	sub	sp, #20
   26862:	469a      	mov	sl, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   26864:	6a03      	ldr	r3, [r0, #32]
   26866:	3b01      	subs	r3, #1
   26868:	428b      	cmp	r3, r1
   2686a:	d37f      	bcc.n	2696c <mpsc_pbuf_alloc+0x110>
   2686c:	4605      	mov	r5, r0
   2686e:	460f      	mov	r7, r1
   26870:	4691      	mov	r9, r2
	union mpsc_pbuf_generic *dropped_item = NULL;
   26872:	f04f 0800 	mov.w	r8, #0
	union mpsc_pbuf_generic *item = NULL;
   26876:	46c3      	mov	fp, r8
   26878:	e019      	b.n	268ae <mpsc_pbuf_alloc+0x52>
		return i & (buffer->size - 1);
   2687a:	6a2a      	ldr	r2, [r5, #32]
   2687c:	3a01      	subs	r2, #1
   2687e:	4013      	ands	r3, r2
		if (free_wlen >= wlen) {
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
   26880:	602b      	str	r3, [r5, #0]
		cont = false;
   26882:	2400      	movs	r4, #0
   26884:	f386 8811 	msr	BASEPRI, r6
   26888:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
   2688c:	b16c      	cbz	r4, 268aa <mpsc_pbuf_alloc+0x4e>
   2688e:	f1b8 0f00 	cmp.w	r8, #0
   26892:	d00a      	beq.n	268aa <mpsc_pbuf_alloc+0x4e>
   26894:	f89d 300b 	ldrb.w	r3, [sp, #11]
   26898:	b13b      	cbz	r3, 268aa <mpsc_pbuf_alloc+0x4e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   2689a:	696b      	ldr	r3, [r5, #20]
   2689c:	2b00      	cmp	r3, #0
   2689e:	d062      	beq.n	26966 <mpsc_pbuf_alloc+0x10a>
				buffer->notify_drop(buffer, dropped_item);
   268a0:	4641      	mov	r1, r8
   268a2:	4628      	mov	r0, r5
   268a4:	4798      	blx	r3
			}
			dropped_item = NULL;
   268a6:	f04f 0800 	mov.w	r8, #0
		}
	} while (cont);
   268aa:	2c00      	cmp	r4, #0
   268ac:	d060      	beq.n	26970 <mpsc_pbuf_alloc+0x114>
	__asm__ volatile(
   268ae:	f04f 0340 	mov.w	r3, #64	; 0x40
   268b2:	f3ef 8611 	mrs	r6, BASEPRI
   268b6:	f383 8812 	msr	BASEPRI_MAX, r3
   268ba:	f3bf 8f6f 	isb	sy
   268be:	9601      	str	r6, [sp, #4]
		wrap = free_space(buffer, &free_wlen);
   268c0:	a903      	add	r1, sp, #12
   268c2:	4628      	mov	r0, r5
   268c4:	f7ff febc 	bl	26640 <free_space>
   268c8:	4604      	mov	r4, r0
		if (free_wlen >= wlen) {
   268ca:	9903      	ldr	r1, [sp, #12]
   268cc:	42b9      	cmp	r1, r7
   268ce:	d319      	bcc.n	26904 <mpsc_pbuf_alloc+0xa8>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   268d0:	69eb      	ldr	r3, [r5, #28]
   268d2:	682a      	ldr	r2, [r5, #0]
			item =
   268d4:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
			item->hdr.valid = 0;
   268d8:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   268dc:	f36f 0100 	bfc	r1, #0, #1
   268e0:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item->hdr.busy = 0;
   268e4:	b2c9      	uxtb	r1, r1
   268e6:	f36f 0141 	bfc	r1, #1, #1
   268ea:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
   268ee:	682b      	ldr	r3, [r5, #0]
	uint32_t i = idx + val;
   268f0:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   268f2:	692a      	ldr	r2, [r5, #16]
   268f4:	f012 0f01 	tst.w	r2, #1
   268f8:	d1bf      	bne.n	2687a <mpsc_pbuf_alloc+0x1e>
	return (i >= buffer->size) ? i - buffer->size : i;
   268fa:	6a2a      	ldr	r2, [r5, #32]
   268fc:	4293      	cmp	r3, r2
   268fe:	d3bf      	bcc.n	26880 <mpsc_pbuf_alloc+0x24>
   26900:	1a9b      	subs	r3, r3, r2
   26902:	e7bd      	b.n	26880 <mpsc_pbuf_alloc+0x24>
		} else if (wrap) {
   26904:	b9a0      	cbnz	r0, 26930 <mpsc_pbuf_alloc+0xd4>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   26906:	ea5a 0309 	orrs.w	r3, sl, r9
   2690a:	d003      	beq.n	26914 <mpsc_pbuf_alloc+0xb8>
			   !k_is_in_isr()) {
   2690c:	f005 faf1 	bl	2bef2 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   26910:	4604      	mov	r4, r0
   26912:	b188      	cbz	r0, 26938 <mpsc_pbuf_alloc+0xdc>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   26914:	692a      	ldr	r2, [r5, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   26916:	f10d 030b 	add.w	r3, sp, #11
   2691a:	f3c2 0240 	ubfx	r2, r2, #1, #1
   2691e:	9903      	ldr	r1, [sp, #12]
   26920:	4628      	mov	r0, r5
   26922:	f7ff fef0 	bl	26706 <drop_item_locked>
			cont = dropped_item != NULL;
   26926:	4680      	mov	r8, r0
   26928:	1e04      	subs	r4, r0, #0
   2692a:	bf18      	it	ne
   2692c:	2401      	movne	r4, #1
   2692e:	e7a9      	b.n	26884 <mpsc_pbuf_alloc+0x28>
			add_skip_item(buffer, free_wlen);
   26930:	4628      	mov	r0, r5
   26932:	f7ff febf 	bl	266b4 <add_skip_item>
			cont = true;
   26936:	e7a5      	b.n	26884 <mpsc_pbuf_alloc+0x28>
	__asm__ volatile(
   26938:	9b01      	ldr	r3, [sp, #4]
   2693a:	f383 8811 	msr	BASEPRI, r3
   2693e:	f3bf 8f6f 	isb	sy
			err = k_sem_take(&buffer->sem, timeout);
   26942:	f105 0028 	add.w	r0, r5, #40	; 0x28
	return z_impl_k_sem_take(sem, timeout);
   26946:	464a      	mov	r2, r9
   26948:	4653      	mov	r3, sl
   2694a:	f7fd fb8d 	bl	24068 <z_impl_k_sem_take>
	__asm__ volatile(
   2694e:	f04f 0340 	mov.w	r3, #64	; 0x40
   26952:	f3ef 8611 	mrs	r6, BASEPRI
   26956:	f383 8812 	msr	BASEPRI_MAX, r3
   2695a:	f3bf 8f6f 	isb	sy
			if (err == 0) {
   2695e:	2800      	cmp	r0, #0
   26960:	d190      	bne.n	26884 <mpsc_pbuf_alloc+0x28>
				cont = true;
   26962:	2401      	movs	r4, #1
   26964:	e78e      	b.n	26884 <mpsc_pbuf_alloc+0x28>
			dropped_item = NULL;
   26966:	f04f 0800 	mov.w	r8, #0
   2696a:	e79e      	b.n	268aa <mpsc_pbuf_alloc+0x4e>
		return NULL;
   2696c:	f04f 0b00 	mov.w	fp, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   26970:	4658      	mov	r0, fp
   26972:	b005      	add	sp, #20
   26974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00026978 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   26978:	b570      	push	{r4, r5, r6, lr}
   2697a:	4604      	mov	r4, r0
   2697c:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   2697e:	6983      	ldr	r3, [r0, #24]
   26980:	4608      	mov	r0, r1
   26982:	4798      	blx	r3
   26984:	f04f 0340 	mov.w	r3, #64	; 0x40
   26988:	f3ef 8611 	mrs	r6, BASEPRI
   2698c:	f383 8812 	msr	BASEPRI_MAX, r3
   26990:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   26994:	782b      	ldrb	r3, [r5, #0]
   26996:	f043 0301 	orr.w	r3, r3, #1
   2699a:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2699c:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
   2699e:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   269a0:	6923      	ldr	r3, [r4, #16]
   269a2:	f013 0f01 	tst.w	r3, #1
   269a6:	d104      	bne.n	269b2 <mpsc_pbuf_commit+0x3a>
	return (i >= buffer->size) ? i - buffer->size : i;
   269a8:	6a23      	ldr	r3, [r4, #32]
   269aa:	4298      	cmp	r0, r3
   269ac:	d304      	bcc.n	269b8 <mpsc_pbuf_commit+0x40>
   269ae:	1ac0      	subs	r0, r0, r3
   269b0:	e002      	b.n	269b8 <mpsc_pbuf_commit+0x40>
		return i & (buffer->size - 1);
   269b2:	6a23      	ldr	r3, [r4, #32]
   269b4:	3b01      	subs	r3, #1
   269b6:	4018      	ands	r0, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   269b8:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   269ba:	4620      	mov	r0, r4
   269bc:	f7ff fe67 	bl	2668e <max_utilization_update>
	__asm__ volatile(
   269c0:	f386 8811 	msr	BASEPRI, r6
   269c4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   269c8:	bd70      	pop	{r4, r5, r6, pc}

000269ca <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   269ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   269cc:	4604      	mov	r4, r0
   269ce:	e039      	b.n	26a44 <mpsc_pbuf_claim+0x7a>
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   269d0:	1a9b      	subs	r3, r3, r2
		return false;
   269d2:	e045      	b.n	26a60 <mpsc_pbuf_claim+0x96>
		return item->skip.len;
   269d4:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
   269d8:	0880      	lsrs	r0, r0, #2
   269da:	d157      	bne.n	26a8c <mpsc_pbuf_claim+0xc2>
   269dc:	e04d      	b.n	26a7a <mpsc_pbuf_claim+0xb0>
		return i & (buffer->size - 1);
   269de:	6a21      	ldr	r1, [r4, #32]
   269e0:	3901      	subs	r1, #1
   269e2:	400b      	ands	r3, r1
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);

				buffer->tmp_rd_idx =
   269e4:	60a3      	str	r3, [r4, #8]
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
				buffer->rd_idx =
					idx_inc(buffer, buffer->rd_idx, inc);
   269e6:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
   269e8:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   269ea:	b922      	cbnz	r2, 269f6 <mpsc_pbuf_claim+0x2c>
	return (i >= buffer->size) ? i - buffer->size : i;
   269ec:	6a22      	ldr	r2, [r4, #32]
   269ee:	4293      	cmp	r3, r2
   269f0:	d304      	bcc.n	269fc <mpsc_pbuf_claim+0x32>
   269f2:	1a9b      	subs	r3, r3, r2
   269f4:	e002      	b.n	269fc <mpsc_pbuf_claim+0x32>
		return i & (buffer->size - 1);
   269f6:	6a22      	ldr	r2, [r4, #32]
   269f8:	3a01      	subs	r2, #1
   269fa:	4013      	ands	r3, r2
				buffer->rd_idx =
   269fc:	60e3      	str	r3, [r4, #12]
				cont = true;
   269fe:	2301      	movs	r3, #1
			if (skip || !is_valid(item)) {
   26a00:	e01b      	b.n	26a3a <mpsc_pbuf_claim+0x70>
			} else {
				item->hdr.busy = 1;
   26a02:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
   26a06:	f043 0302 	orr.w	r3, r3, #2
   26a0a:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
   26a0e:	68a7      	ldr	r7, [r4, #8]
						buffer->get_wlen(item));
   26a10:	69a3      	ldr	r3, [r4, #24]
					idx_inc(buffer, buffer->tmp_rd_idx,
   26a12:	4630      	mov	r0, r6
   26a14:	4798      	blx	r3
	uint32_t i = idx + val;
   26a16:	4438      	add	r0, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   26a18:	6923      	ldr	r3, [r4, #16]
   26a1a:	f013 0f01 	tst.w	r3, #1
   26a1e:	d104      	bne.n	26a2a <mpsc_pbuf_claim+0x60>
	return (i >= buffer->size) ? i - buffer->size : i;
   26a20:	6a23      	ldr	r3, [r4, #32]
   26a22:	4298      	cmp	r0, r3
   26a24:	d304      	bcc.n	26a30 <mpsc_pbuf_claim+0x66>
   26a26:	1ac0      	subs	r0, r0, r3
   26a28:	e002      	b.n	26a30 <mpsc_pbuf_claim+0x66>
		return i & (buffer->size - 1);
   26a2a:	6a23      	ldr	r3, [r4, #32]
   26a2c:	3b01      	subs	r3, #1
   26a2e:	4018      	ands	r0, r3
				buffer->tmp_rd_idx =
   26a30:	60a0      	str	r0, [r4, #8]
		cont = false;
   26a32:	2300      	movs	r3, #0
   26a34:	e001      	b.n	26a3a <mpsc_pbuf_claim+0x70>
   26a36:	2300      	movs	r3, #0
			item = NULL;
   26a38:	461e      	mov	r6, r3
   26a3a:	f385 8811 	msr	BASEPRI, r5
   26a3e:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
   26a42:	b38b      	cbz	r3, 26aa8 <mpsc_pbuf_claim+0xde>
	__asm__ volatile(
   26a44:	f04f 0340 	mov.w	r3, #64	; 0x40
   26a48:	f3ef 8511 	mrs	r5, BASEPRI
   26a4c:	f383 8812 	msr	BASEPRI_MAX, r3
   26a50:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   26a54:	68a2      	ldr	r2, [r4, #8]
   26a56:	6863      	ldr	r3, [r4, #4]
   26a58:	429a      	cmp	r2, r3
   26a5a:	d9b9      	bls.n	269d0 <mpsc_pbuf_claim+0x6>
	*res = buffer->size - buffer->tmp_rd_idx;
   26a5c:	6a23      	ldr	r3, [r4, #32]
   26a5e:	1a9b      	subs	r3, r3, r2
			&buffer->buf[buffer->tmp_rd_idx];
   26a60:	69e1      	ldr	r1, [r4, #28]
		item = (union mpsc_pbuf_generic *)
   26a62:	eb01 0682 	add.w	r6, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
   26a66:	2b00      	cmp	r3, #0
   26a68:	d0e5      	beq.n	26a36 <mpsc_pbuf_claim+0x6c>
	return !item->hdr.valid && !item->hdr.busy;
   26a6a:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
   26a6e:	f013 0303 	ands.w	r3, r3, #3
   26a72:	d016      	beq.n	26aa2 <mpsc_pbuf_claim+0xd8>
	if (item->hdr.busy && !item->hdr.valid) {
   26a74:	2b02      	cmp	r3, #2
   26a76:	d0ad      	beq.n	269d4 <mpsc_pbuf_claim+0xa>
	return 0;
   26a78:	2000      	movs	r0, #0
	return item->hdr.valid;
   26a7a:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
			if (skip || !is_valid(item)) {
   26a7e:	f013 0f01 	tst.w	r3, #1
   26a82:	d1be      	bne.n	26a02 <mpsc_pbuf_claim+0x38>
					skip ? skip : buffer->get_wlen(item);
   26a84:	b910      	cbnz	r0, 26a8c <mpsc_pbuf_claim+0xc2>
   26a86:	69a3      	ldr	r3, [r4, #24]
   26a88:	4630      	mov	r0, r6
   26a8a:	4798      	blx	r3
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   26a8c:	68a3      	ldr	r3, [r4, #8]
	uint32_t i = idx + val;
   26a8e:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   26a90:	6922      	ldr	r2, [r4, #16]
   26a92:	f012 0201 	ands.w	r2, r2, #1
   26a96:	d1a2      	bne.n	269de <mpsc_pbuf_claim+0x14>
	return (i >= buffer->size) ? i - buffer->size : i;
   26a98:	6a21      	ldr	r1, [r4, #32]
   26a9a:	428b      	cmp	r3, r1
   26a9c:	d3a2      	bcc.n	269e4 <mpsc_pbuf_claim+0x1a>
   26a9e:	1a5b      	subs	r3, r3, r1
   26aa0:	e7a0      	b.n	269e4 <mpsc_pbuf_claim+0x1a>
		cont = false;
   26aa2:	2300      	movs	r3, #0
			item = NULL;
   26aa4:	461e      	mov	r6, r3
   26aa6:	e7c8      	b.n	26a3a <mpsc_pbuf_claim+0x70>

	return item;
}
   26aa8:	4630      	mov	r0, r6
   26aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026aac <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   26aac:	b538      	push	{r3, r4, r5, lr}
   26aae:	4604      	mov	r4, r0
   26ab0:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   26ab2:	6983      	ldr	r3, [r0, #24]
   26ab4:	4608      	mov	r0, r1
   26ab6:	4798      	blx	r3
   26ab8:	f04f 0240 	mov.w	r2, #64	; 0x40
   26abc:	f3ef 8311 	mrs	r3, BASEPRI
   26ac0:	f382 8812 	msr	BASEPRI_MAX, r2
   26ac4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   26ac8:	782a      	ldrb	r2, [r5, #0]
   26aca:	f36f 0200 	bfc	r2, #0, #1
   26ace:	702a      	strb	r2, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   26ad0:	6922      	ldr	r2, [r4, #16]
   26ad2:	f012 0f02 	tst.w	r2, #2
   26ad6:	d00a      	beq.n	26aee <mpsc_pbuf_free+0x42>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   26ad8:	69e2      	ldr	r2, [r4, #28]
   26ada:	68e1      	ldr	r1, [r4, #12]
   26adc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   26ae0:	42aa      	cmp	r2, r5
   26ae2:	d004      	beq.n	26aee <mpsc_pbuf_free+0x42>
		witem->hdr.busy = 0;
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
	} else {
		witem->skip.len = wlen;
   26ae4:	682a      	ldr	r2, [r5, #0]
   26ae6:	f360 029f 	bfi	r2, r0, #2, #30
   26aea:	602a      	str	r2, [r5, #0]
   26aec:	e012      	b.n	26b14 <mpsc_pbuf_free+0x68>
		witem->hdr.busy = 0;
   26aee:	782a      	ldrb	r2, [r5, #0]
   26af0:	f36f 0241 	bfc	r2, #1, #1
   26af4:	702a      	strb	r2, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   26af6:	68e2      	ldr	r2, [r4, #12]
	uint32_t i = idx + val;
   26af8:	4402      	add	r2, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   26afa:	6921      	ldr	r1, [r4, #16]
   26afc:	f011 0f01 	tst.w	r1, #1
   26b00:	d104      	bne.n	26b0c <mpsc_pbuf_free+0x60>
	return (i >= buffer->size) ? i - buffer->size : i;
   26b02:	6a21      	ldr	r1, [r4, #32]
   26b04:	428a      	cmp	r2, r1
   26b06:	d304      	bcc.n	26b12 <mpsc_pbuf_free+0x66>
   26b08:	1a52      	subs	r2, r2, r1
   26b0a:	e002      	b.n	26b12 <mpsc_pbuf_free+0x66>
		return i & (buffer->size - 1);
   26b0c:	6a21      	ldr	r1, [r4, #32]
   26b0e:	3901      	subs	r1, #1
   26b10:	400a      	ands	r2, r1
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   26b12:	60e2      	str	r2, [r4, #12]
	__asm__ volatile(
   26b14:	f383 8811 	msr	BASEPRI, r3
   26b18:	f3bf 8f6f 	isb	sy
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
   26b1c:	f104 0028 	add.w	r0, r4, #40	; 0x28
	z_impl_k_sem_give(sem);
   26b20:	f7fd fa7a 	bl	24018 <z_impl_k_sem_give>
}
   26b24:	bd38      	pop	{r3, r4, r5, pc}

00026b26 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   26b26:	6883      	ldr	r3, [r0, #8]
   26b28:	6842      	ldr	r2, [r0, #4]
   26b2a:	4293      	cmp	r3, r2
   26b2c:	d905      	bls.n	26b3a <mpsc_pbuf_is_pending+0x14>
	*res = buffer->size - buffer->tmp_rd_idx;
   26b2e:	6a00      	ldr	r0, [r0, #32]
   26b30:	1ac0      	subs	r0, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   26b32:	3800      	subs	r0, #0
   26b34:	bf18      	it	ne
   26b36:	2001      	movne	r0, #1
   26b38:	4770      	bx	lr
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   26b3a:	1ad0      	subs	r0, r2, r3
		return false;
   26b3c:	e7f9      	b.n	26b32 <mpsc_pbuf_is_pending+0xc>

00026b3e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   26b3e:	4770      	bx	lr

00026b40 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   26b40:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   26b42:	f013 0f04 	tst.w	r3, #4
   26b46:	d001      	beq.n	26b4c <log_msg_generic_get_wlen+0xc>
	return 0;
   26b48:	2000      	movs	r0, #0
}
   26b4a:	4770      	bx	lr
		return log_msg_get_total_wlen(msg->hdr.desc);
   26b4c:	6803      	ldr	r3, [r0, #0]
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   26b4e:	f3c3 2049 	ubfx	r0, r3, #9, #10
   26b52:	f3c3 43cb 	ubfx	r3, r3, #19, #12
   26b56:	4418      	add	r0, r3
   26b58:	3017      	adds	r0, #23
   26b5a:	f020 0007 	bic.w	r0, r0, #7
   26b5e:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   26b60:	4770      	bx	lr

00026b62 <dummy_timestamp>:
}
   26b62:	2000      	movs	r0, #0
   26b64:	4770      	bx	lr

00026b66 <msg_filter_check>:
}
   26b66:	2001      	movs	r0, #1
   26b68:	4770      	bx	lr

00026b6a <default_get_timestamp>:
{
   26b6a:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   26b6c:	f004 fb2c 	bl	2b1c8 <sys_clock_cycle_get_32>
}
   26b70:	bd08      	pop	{r3, pc}

00026b72 <k_msleep>:
{
   26b72:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   26b74:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   26b78:	17c1      	asrs	r1, r0, #31
   26b7a:	03c9      	lsls	r1, r1, #15
   26b7c:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   26b80:	03c0      	lsls	r0, r0, #15
   26b82:	f240 33e7 	movw	r3, #999	; 0x3e7
   26b86:	18c0      	adds	r0, r0, r3
   26b88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26b8c:	f04f 0300 	mov.w	r3, #0
   26b90:	f141 0100 	adc.w	r1, r1, #0
   26b94:	f7d9 fab4 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   26b98:	f7fd ff9a 	bl	24ad0 <z_impl_k_sleep>
}
   26b9c:	bd08      	pop	{r3, pc}

00026b9e <msg_alloc>:
{
   26b9e:	b508      	push	{r3, lr}
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
   26ba0:	2200      	movs	r2, #0
   26ba2:	2300      	movs	r3, #0
   26ba4:	f7ff fe5a 	bl	2685c <mpsc_pbuf_alloc>
}
   26ba8:	bd08      	pop	{r3, pc}

00026baa <msg_free>:
{
   26baa:	b508      	push	{r3, lr}
	mpsc_pbuf_free(buffer, &msg->buf);
   26bac:	f7ff ff7e 	bl	26aac <mpsc_pbuf_free>
}
   26bb0:	bd08      	pop	{r3, pc}

00026bb2 <msg_pending>:
{
   26bb2:	b508      	push	{r3, lr}
	return mpsc_pbuf_is_pending(buffer);
   26bb4:	f7ff ffb7 	bl	26b26 <mpsc_pbuf_is_pending>
}
   26bb8:	bd08      	pop	{r3, pc}

00026bba <z_log_vprintk>:
{
   26bba:	b500      	push	{lr}
   26bbc:	b085      	sub	sp, #20
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   26bbe:	9103      	str	r1, [sp, #12]
   26bc0:	9002      	str	r0, [sp, #8]
   26bc2:	2000      	movs	r0, #0
   26bc4:	9001      	str	r0, [sp, #4]
   26bc6:	9000      	str	r0, [sp, #0]
   26bc8:	4603      	mov	r3, r0
   26bca:	4602      	mov	r2, r0
   26bcc:	4601      	mov	r1, r0
   26bce:	f000 f88b 	bl	26ce8 <z_impl_z_log_msg_runtime_vcreate>
}
   26bd2:	b005      	add	sp, #20
   26bd4:	f85d fb04 	ldr.w	pc, [sp], #4

00026bd8 <z_log_notify_drop>:
 */
bool z_log_msg_pending(void);

static inline void z_log_notify_drop(const struct mpsc_pbuf_buffer *buffer,
				     const union mpsc_pbuf_generic *item)
{
   26bd8:	b508      	push	{r3, lr}
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   26bda:	2001      	movs	r0, #1
   26bdc:	f7ed fdfe 	bl	147dc <z_log_dropped>
}
   26be0:	bd08      	pop	{r3, pc}

00026be2 <z_log_msg_claim>:
{
   26be2:	b508      	push	{r3, lr}
	return z_log_msg_local_claim();
   26be4:	f7ed fe7c 	bl	148e0 <z_log_msg_local_claim>
}
   26be8:	bd08      	pop	{r3, pc}

00026bea <msg_commit>:
{
   26bea:	b508      	push	{r3, lr}
	mpsc_pbuf_commit(buffer, &m->buf);
   26bec:	f7ff fec4 	bl	26978 <mpsc_pbuf_commit>
	z_log_msg_post_finalize();
   26bf0:	f7ed ff14 	bl	14a1c <z_log_msg_post_finalize>
}
   26bf4:	bd08      	pop	{r3, pc}

00026bf6 <z_log_get_tag>:
}
   26bf6:	2000      	movs	r0, #0
   26bf8:	4770      	bx	lr

00026bfa <z_cbprintf_cpy>:
{
   26bfa:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   26bfc:	6853      	ldr	r3, [r2, #4]
   26bfe:	6896      	ldr	r6, [r2, #8]
   26c00:	1b9b      	subs	r3, r3, r6
   26c02:	428b      	cmp	r3, r1
   26c04:	d30c      	bcc.n	26c20 <z_cbprintf_cpy+0x26>
   26c06:	460c      	mov	r4, r1
   26c08:	4615      	mov	r5, r2
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   26c0a:	6813      	ldr	r3, [r2, #0]
   26c0c:	460a      	mov	r2, r1
   26c0e:	4601      	mov	r1, r0
   26c10:	1998      	adds	r0, r3, r6
   26c12:	f000 fc5b 	bl	274cc <memcpy>
	desc->off += len;
   26c16:	68ab      	ldr	r3, [r5, #8]
   26c18:	4423      	add	r3, r4
   26c1a:	60ab      	str	r3, [r5, #8]
	return len;
   26c1c:	4620      	mov	r0, r4
}
   26c1e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   26c20:	f06f 001b 	mvn.w	r0, #27
   26c24:	e7fb      	b.n	26c1e <z_cbprintf_cpy+0x24>

00026c26 <z_log_msg_finalize>:
	!(IS_ENABLED(CONFIG_LOG_FRONTEND) && \
	 (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY) || log_backend_count_get() == 0))

void z_log_msg_finalize(struct log_msg *msg, const void *source,
			 const struct log_msg_desc desc, const void *data)
{
   26c26:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
   26c28:	b190      	cbz	r0, 26c50 <z_log_msg_finalize+0x2a>
   26c2a:	460e      	mov	r6, r1
   26c2c:	4614      	mov	r4, r2
   26c2e:	4619      	mov	r1, r3
   26c30:	4605      	mov	r5, r0
		z_log_dropped(false);

		return;
	}

	if (data) {
   26c32:	b13b      	cbz	r3, 26c44 <z_log_msg_finalize+0x1e>
		uint8_t *d = msg->data + desc.package_len;
   26c34:	3010      	adds	r0, #16
   26c36:	f3c2 2349 	ubfx	r3, r2, #9, #10

		memcpy(d, data, desc.data_len);
   26c3a:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   26c3e:	4418      	add	r0, r3
   26c40:	f000 fc44 	bl	274cc <memcpy>
	}

	msg->hdr.desc = desc;
   26c44:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
   26c46:	606e      	str	r6, [r5, #4]
	z_log_msg_commit(msg);
   26c48:	4628      	mov	r0, r5
   26c4a:	f7ed ff2b 	bl	14aa4 <z_log_msg_commit>
}
   26c4e:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
   26c50:	f7ed fdc4 	bl	147dc <z_log_dropped>
		return;
   26c54:	e7fb      	b.n	26c4e <z_log_msg_finalize+0x28>

00026c56 <z_impl_z_log_msg_static_create>:

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   26c56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26c5a:	b08a      	sub	sp, #40	; 0x28
   26c5c:	4605      	mov	r5, r0
   26c5e:	461e      	mov	r6, r3

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
   26c60:	460f      	mov	r7, r1
	int inlen = desc.package_len;
   26c62:	f3c1 2449 	ubfx	r4, r1, #9, #10
	struct log_msg *msg;

	if (inlen > 0) {
   26c66:	b364      	cbz	r4, 26cc2 <z_impl_z_log_msg_static_create+0x6c>
   26c68:	4690      	mov	r8, r2
	struct z_cbprintf_buf_desc buf_desc = {
   26c6a:	2200      	movs	r2, #0
   26c6c:	9207      	str	r2, [sp, #28]
   26c6e:	9208      	str	r2, [sp, #32]
   26c70:	9209      	str	r2, [sp, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
   26c72:	2304      	movs	r3, #4
   26c74:	9302      	str	r3, [sp, #8]
   26c76:	ab05      	add	r3, sp, #20
   26c78:	9301      	str	r3, [sp, #4]
   26c7a:	230a      	movs	r3, #10
   26c7c:	9300      	str	r3, [sp, #0]
   26c7e:	ab07      	add	r3, sp, #28
   26c80:	4621      	mov	r1, r4
   26c82:	4640      	mov	r0, r8
   26c84:	f7ec fe16 	bl	138b4 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
   26c88:	f360 2752 	bfi	r7, r0, #9, #10
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   26c8c:	f3c0 0909 	ubfx	r9, r0, #0, #10
   26c90:	f3c7 41cb 	ubfx	r1, r7, #19, #12
   26c94:	4449      	add	r1, r9
   26c96:	3117      	adds	r1, #23
   26c98:	f021 0107 	bic.w	r1, r1, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   26c9c:	0888      	lsrs	r0, r1, #2
   26c9e:	f7ed fe17 	bl	148d0 <z_log_msg_alloc>
		if (msg) {
   26ca2:	4682      	mov	sl, r0
   26ca4:	b1b8      	cbz	r0, 26cd6 <z_impl_z_log_msg_static_create+0x80>
			len = cbprintf_package_copy(package, inlen,
   26ca6:	2304      	movs	r3, #4
   26ca8:	9302      	str	r3, [sp, #8]
   26caa:	ab05      	add	r3, sp, #20
   26cac:	9301      	str	r3, [sp, #4]
   26cae:	230a      	movs	r3, #10
   26cb0:	9300      	str	r3, [sp, #0]
   26cb2:	464b      	mov	r3, r9
   26cb4:	f100 0210 	add.w	r2, r0, #16
   26cb8:	4621      	mov	r1, r4
   26cba:	4640      	mov	r0, r8
   26cbc:	f7ed ff68 	bl	14b90 <cbprintf_package_copy>
						    msg->data, out_desc.package_len,
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
   26cc0:	e009      	b.n	26cd6 <z_impl_z_log_msg_static_create+0x80>
   26cc2:	f3c1 41cb 	ubfx	r1, r1, #19, #12
   26cc6:	440c      	add	r4, r1
   26cc8:	3417      	adds	r4, #23
   26cca:	f024 0407 	bic.w	r4, r4, #7
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   26cce:	08a0      	lsrs	r0, r4, #2
   26cd0:	f7ed fdfe 	bl	148d0 <z_log_msg_alloc>
   26cd4:	4682      	mov	sl, r0
	}

	z_log_msg_finalize(msg, source, out_desc, data);
   26cd6:	4633      	mov	r3, r6
   26cd8:	463a      	mov	r2, r7
   26cda:	4629      	mov	r1, r5
   26cdc:	4650      	mov	r0, sl
   26cde:	f7ff ffa2 	bl	26c26 <z_log_msg_finalize>
}
   26ce2:	b00a      	add	sp, #40	; 0x28
   26ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00026ce8 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   26ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26cec:	b085      	sub	sp, #20
   26cee:	4681      	mov	r9, r0
   26cf0:	460d      	mov	r5, r1
   26cf2:	4690      	mov	r8, r2
   26cf4:	461e      	mov	r6, r3
   26cf6:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   26cfa:	9f10      	ldr	r7, [sp, #64]	; 0x40
	int plen;

	if (fmt) {
   26cfc:	b3b7      	cbz	r7, 26d6c <z_impl_z_log_msg_runtime_vcreate+0x84>
		va_list ap2;

		va_copy(ap2, ap);
   26cfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
   26d00:	9303      	str	r3, [sp, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   26d02:	9300      	str	r3, [sp, #0]
   26d04:	463b      	mov	r3, r7
   26d06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   26d08:	2110      	movs	r1, #16
   26d0a:	2000      	movs	r0, #0
   26d0c:	f7ec fb80 	bl	13410 <cbvprintf_package>
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   26d10:	4682      	mov	sl, r0
   26d12:	eb00 030b 	add.w	r3, r0, fp
   26d16:	3317      	adds	r3, #23
   26d18:	f023 0307 	bic.w	r3, r3, #7
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   26d1c:	2400      	movs	r4, #0
   26d1e:	f36f 0400 	bfc	r4, #0, #1
   26d22:	f36f 0441 	bfc	r4, #1, #1
   26d26:	f36f 0482 	bfc	r4, #2, #1
   26d2a:	f369 04c5 	bfi	r4, r9, #3, #3
   26d2e:	f368 1488 	bfi	r4, r8, #6, #3
   26d32:	f360 2452 	bfi	r4, r0, #9, #10
   26d36:	f36b 44de 	bfi	r4, fp, #19, #12
   26d3a:	f36f 74df 	bfc	r4, #31, #1
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
   26d3e:	0898      	lsrs	r0, r3, #2
   26d40:	f7ed fdc6 	bl	148d0 <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
   26d44:	4680      	mov	r8, r0
   26d46:	b140      	cbz	r0, 26d5a <z_impl_z_log_msg_runtime_vcreate+0x72>
   26d48:	3010      	adds	r0, #16
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
   26d4a:	b137      	cbz	r7, 26d5a <z_impl_z_log_msg_runtime_vcreate+0x72>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   26d4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   26d4e:	9300      	str	r3, [sp, #0]
   26d50:	463b      	mov	r3, r7
   26d52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   26d54:	4651      	mov	r1, sl
   26d56:	f7ec fb5b 	bl	13410 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   26d5a:	4633      	mov	r3, r6
   26d5c:	4622      	mov	r2, r4
   26d5e:	4629      	mov	r1, r5
   26d60:	4640      	mov	r0, r8
   26d62:	f7ff ff60 	bl	26c26 <z_log_msg_finalize>
	}
}
   26d66:	b005      	add	sp, #20
   26d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
   26d6c:	2000      	movs	r0, #0
   26d6e:	e7cf      	b.n	26d10 <z_impl_z_log_msg_runtime_vcreate+0x28>

00026d70 <buffer_write>:
{
   26d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26d72:	4607      	mov	r7, r0
   26d74:	460d      	mov	r5, r1
   26d76:	4614      	mov	r4, r2
   26d78:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   26d7a:	4632      	mov	r2, r6
   26d7c:	4621      	mov	r1, r4
   26d7e:	4628      	mov	r0, r5
   26d80:	47b8      	blx	r7
		buf += processed;
   26d82:	4405      	add	r5, r0
	} while (len != 0);
   26d84:	1a24      	subs	r4, r4, r0
   26d86:	d1f8      	bne.n	26d7a <buffer_write+0xa>
}
   26d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026d8a <cbvprintf>:
{
   26d8a:	b510      	push	{r4, lr}
   26d8c:	b082      	sub	sp, #8
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   26d8e:	2400      	movs	r4, #0
   26d90:	9400      	str	r4, [sp, #0]
   26d92:	f7ed f92f 	bl	13ff4 <z_cbvprintf_impl>
}
   26d96:	b002      	add	sp, #8
   26d98:	bd10      	pop	{r4, pc}

00026d9a <color_prefix>:
{
   26d9a:	b508      	push	{r3, lr}
   26d9c:	4613      	mov	r3, r2
	color_print(output, color, true, level);
   26d9e:	2201      	movs	r2, #1
   26da0:	f7ed ff68 	bl	14c74 <color_print>
}
   26da4:	bd08      	pop	{r3, pc}

00026da6 <color_postfix>:
{
   26da6:	b508      	push	{r3, lr}
   26da8:	4613      	mov	r3, r2
	color_print(output, color, false, level);
   26daa:	2200      	movs	r2, #0
   26dac:	f7ed ff62 	bl	14c74 <color_print>
}
   26db0:	bd08      	pop	{r3, pc}

00026db2 <postfix_print>:
{
   26db2:	b538      	push	{r3, r4, r5, lr}
   26db4:	4605      	mov	r5, r0
   26db6:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   26db8:	f001 0101 	and.w	r1, r1, #1
   26dbc:	f7ff fff3 	bl	26da6 <color_postfix>
	newline_print(output, flags);
   26dc0:	4621      	mov	r1, r4
   26dc2:	4628      	mov	r0, r5
   26dc4:	f7ed ffdc 	bl	14d80 <newline_print>
}
   26dc8:	bd38      	pop	{r3, r4, r5, pc}

00026dca <log_msg_hexdump>:
{
   26dca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26dce:	b083      	sub	sp, #12
   26dd0:	4680      	mov	r8, r0
   26dd2:	460e      	mov	r6, r1
   26dd4:	4615      	mov	r5, r2
   26dd6:	461f      	mov	r7, r3
   26dd8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   26ddc:	462c      	mov	r4, r5
   26dde:	2d10      	cmp	r5, #16
   26de0:	bf28      	it	cs
   26de2:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
   26de4:	f8cd 9000 	str.w	r9, [sp]
   26de8:	463b      	mov	r3, r7
   26dea:	4622      	mov	r2, r4
   26dec:	4631      	mov	r1, r6
   26dee:	4640      	mov	r0, r8
   26df0:	f7ed ffda 	bl	14da8 <hexdump_line_print>
		data += length;
   26df4:	4426      	add	r6, r4
	} while (len);
   26df6:	1b2d      	subs	r5, r5, r4
   26df8:	d1f0      	bne.n	26ddc <log_msg_hexdump+0x12>
}
   26dfa:	b003      	add	sp, #12
   26dfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00026e00 <log_output_flush>:
{
   26e00:	b510      	push	{r4, lr}
   26e02:	4604      	mov	r4, r0
		     output->control_block->offset,
   26e04:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   26e06:	6853      	ldr	r3, [r2, #4]
   26e08:	6812      	ldr	r2, [r2, #0]
   26e0a:	6881      	ldr	r1, [r0, #8]
   26e0c:	6800      	ldr	r0, [r0, #0]
   26e0e:	f7ff ffaf 	bl	26d70 <buffer_write>
	output->control_block->offset = 0;
   26e12:	6863      	ldr	r3, [r4, #4]
   26e14:	2200      	movs	r2, #0
   26e16:	601a      	str	r2, [r3, #0]
}
   26e18:	bd10      	pop	{r4, pc}

00026e1a <out_func>:
{
   26e1a:	b538      	push	{r3, r4, r5, lr}
   26e1c:	4605      	mov	r5, r0
   26e1e:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   26e20:	684b      	ldr	r3, [r1, #4]
   26e22:	681a      	ldr	r2, [r3, #0]
   26e24:	68cb      	ldr	r3, [r1, #12]
   26e26:	429a      	cmp	r2, r3
   26e28:	d00f      	beq.n	26e4a <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
   26e2a:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   26e2c:	f3bf 8f5b 	dmb	ish
   26e30:	e853 2f00 	ldrex	r2, [r3]
   26e34:	1c51      	adds	r1, r2, #1
   26e36:	e843 1000 	strex	r0, r1, [r3]
   26e3a:	2800      	cmp	r0, #0
   26e3c:	d1f8      	bne.n	26e30 <out_func+0x16>
   26e3e:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   26e42:	68a3      	ldr	r3, [r4, #8]
   26e44:	549d      	strb	r5, [r3, r2]
}
   26e46:	2000      	movs	r0, #0
   26e48:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
   26e4a:	4608      	mov	r0, r1
   26e4c:	f7ff ffd8 	bl	26e00 <log_output_flush>
   26e50:	e7eb      	b.n	26e2a <out_func+0x10>

00026e52 <cr_out_func>:
{
   26e52:	b538      	push	{r3, r4, r5, lr}
   26e54:	4604      	mov	r4, r0
   26e56:	460d      	mov	r5, r1
	if (c == '\n') {
   26e58:	280a      	cmp	r0, #10
   26e5a:	d005      	beq.n	26e68 <cr_out_func+0x16>
	out_func(c, ctx);
   26e5c:	4629      	mov	r1, r5
   26e5e:	4620      	mov	r0, r4
   26e60:	f7ff ffdb 	bl	26e1a <out_func>
}
   26e64:	2000      	movs	r0, #0
   26e66:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
   26e68:	200d      	movs	r0, #13
   26e6a:	f7ff ffd6 	bl	26e1a <out_func>
   26e6e:	e7f5      	b.n	26e5c <cr_out_func+0xa>

00026e70 <k_msleep>:
{
   26e70:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   26e72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   26e76:	17c1      	asrs	r1, r0, #31
   26e78:	03c9      	lsls	r1, r1, #15
   26e7a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   26e7e:	03c0      	lsls	r0, r0, #15
   26e80:	f240 33e7 	movw	r3, #999	; 0x3e7
   26e84:	18c0      	adds	r0, r0, r3
   26e86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26e8a:	f04f 0300 	mov.w	r3, #0
   26e8e:	f141 0100 	adc.w	r1, r1, #0
   26e92:	f7d9 f935 	bl	100 <__aeabi_uldivmod>
   26e96:	f7fd fe1b 	bl	24ad0 <z_impl_k_sleep>
}
   26e9a:	bd08      	pop	{r3, pc}

00026e9c <log_backend_uart_init>:
}
   26e9c:	4770      	bx	lr

00026e9e <atomic_test_and_clear_bit>:
{
   26e9e:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   26ea0:	f001 021f 	and.w	r2, r1, #31
   26ea4:	2301      	movs	r3, #1
   26ea6:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   26ea8:	0949      	lsrs	r1, r1, #5
   26eaa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   26eae:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26eb0:	f3bf 8f5b 	dmb	ish
   26eb4:	e850 2f00 	ldrex	r2, [r0]
   26eb8:	ea02 0c01 	and.w	ip, r2, r1
   26ebc:	e840 ce00 	strex	lr, ip, [r0]
   26ec0:	f1be 0f00 	cmp.w	lr, #0
   26ec4:	d1f6      	bne.n	26eb4 <atomic_test_and_clear_bit+0x16>
   26ec6:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   26eca:	4213      	tst	r3, r2
}
   26ecc:	bf14      	ite	ne
   26ece:	2001      	movne	r0, #1
   26ed0:	2000      	moveq	r0, #0
   26ed2:	f85d fb04 	ldr.w	pc, [sp], #4

00026ed6 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   26ed6:	f001 021f 	and.w	r2, r1, #31
   26eda:	2301      	movs	r3, #1
   26edc:	4093      	lsls	r3, r2
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   26ede:	0949      	lsrs	r1, r1, #5
   26ee0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   26ee4:	f3bf 8f5b 	dmb	ish
   26ee8:	e850 2f00 	ldrex	r2, [r0]
   26eec:	431a      	orrs	r2, r3
   26eee:	e840 2100 	strex	r1, r2, [r0]
   26ef2:	2900      	cmp	r1, #0
   26ef4:	d1f8      	bne.n	26ee8 <atomic_set_bit+0x12>
   26ef6:	f3bf 8f5b 	dmb	ish
}
   26efa:	4770      	bx	lr

00026efc <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
   26efc:	2000      	movs	r0, #0
   26efe:	4770      	bx	lr

00026f00 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   26f00:	428b      	cmp	r3, r1
   26f02:	d901      	bls.n	26f08 <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
   26f04:	2000      	movs	r0, #0
	}
}
   26f06:	4770      	bx	lr
{
   26f08:	b510      	push	{r4, lr}
   26f0a:	4694      	mov	ip, r2
   26f0c:	461c      	mov	r4, r3
		(void)memcpy(to, from, from_len);
   26f0e:	461a      	mov	r2, r3
   26f10:	4661      	mov	r1, ip
   26f12:	f000 fadb 	bl	274cc <memcpy>
		return from_len;
   26f16:	4620      	mov	r0, r4
}
   26f18:	bd10      	pop	{r4, pc}

00026f1a <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
   26f1a:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
   26f1c:	f000 fb05 	bl	2752a <memset>
}
   26f20:	bd08      	pop	{r3, pc}

00026f22 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   26f22:	09c3      	lsrs	r3, r0, #7
   26f24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   26f28:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   26f2c:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   26f30:	b2c0      	uxtb	r0, r0
   26f32:	4770      	bx	lr

00026f34 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   26f34:	7803      	ldrb	r3, [r0, #0]
   26f36:	78ca      	ldrb	r2, [r1, #3]
   26f38:	4053      	eors	r3, r2
   26f3a:	7003      	strb	r3, [r0, #0]
   26f3c:	7843      	ldrb	r3, [r0, #1]
   26f3e:	788a      	ldrb	r2, [r1, #2]
   26f40:	4053      	eors	r3, r2
   26f42:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   26f44:	7883      	ldrb	r3, [r0, #2]
   26f46:	784a      	ldrb	r2, [r1, #1]
   26f48:	4053      	eors	r3, r2
   26f4a:	7083      	strb	r3, [r0, #2]
   26f4c:	78c3      	ldrb	r3, [r0, #3]
   26f4e:	780a      	ldrb	r2, [r1, #0]
   26f50:	4053      	eors	r3, r2
   26f52:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   26f54:	7903      	ldrb	r3, [r0, #4]
   26f56:	79ca      	ldrb	r2, [r1, #7]
   26f58:	4053      	eors	r3, r2
   26f5a:	7103      	strb	r3, [r0, #4]
   26f5c:	7943      	ldrb	r3, [r0, #5]
   26f5e:	798a      	ldrb	r2, [r1, #6]
   26f60:	4053      	eors	r3, r2
   26f62:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   26f64:	7983      	ldrb	r3, [r0, #6]
   26f66:	794a      	ldrb	r2, [r1, #5]
   26f68:	4053      	eors	r3, r2
   26f6a:	7183      	strb	r3, [r0, #6]
   26f6c:	79c3      	ldrb	r3, [r0, #7]
   26f6e:	790a      	ldrb	r2, [r1, #4]
   26f70:	4053      	eors	r3, r2
   26f72:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   26f74:	7a03      	ldrb	r3, [r0, #8]
   26f76:	7aca      	ldrb	r2, [r1, #11]
   26f78:	4053      	eors	r3, r2
   26f7a:	7203      	strb	r3, [r0, #8]
   26f7c:	7a43      	ldrb	r3, [r0, #9]
   26f7e:	7a8a      	ldrb	r2, [r1, #10]
   26f80:	4053      	eors	r3, r2
   26f82:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   26f84:	7a83      	ldrb	r3, [r0, #10]
   26f86:	7a4a      	ldrb	r2, [r1, #9]
   26f88:	4053      	eors	r3, r2
   26f8a:	7283      	strb	r3, [r0, #10]
   26f8c:	7ac3      	ldrb	r3, [r0, #11]
   26f8e:	7a0a      	ldrb	r2, [r1, #8]
   26f90:	4053      	eors	r3, r2
   26f92:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   26f94:	7b03      	ldrb	r3, [r0, #12]
   26f96:	7bca      	ldrb	r2, [r1, #15]
   26f98:	4053      	eors	r3, r2
   26f9a:	7303      	strb	r3, [r0, #12]
   26f9c:	7b43      	ldrb	r3, [r0, #13]
   26f9e:	7b8a      	ldrb	r2, [r1, #14]
   26fa0:	4053      	eors	r3, r2
   26fa2:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   26fa4:	7b83      	ldrb	r3, [r0, #14]
   26fa6:	7b4a      	ldrb	r2, [r1, #13]
   26fa8:	4053      	eors	r3, r2
   26faa:	7383      	strb	r3, [r0, #14]
   26fac:	7bc3      	ldrb	r3, [r0, #15]
   26fae:	7b0a      	ldrb	r2, [r1, #12]
   26fb0:	4053      	eors	r3, r2
   26fb2:	73c3      	strb	r3, [r0, #15]
}
   26fb4:	4770      	bx	lr

00026fb6 <shift_rows>:
{
   26fb6:	b500      	push	{lr}
   26fb8:	b085      	sub	sp, #20
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   26fba:	7802      	ldrb	r2, [r0, #0]
   26fbc:	f88d 2000 	strb.w	r2, [sp]
   26fc0:	7942      	ldrb	r2, [r0, #5]
   26fc2:	f88d 2001 	strb.w	r2, [sp, #1]
   26fc6:	7a82      	ldrb	r2, [r0, #10]
   26fc8:	f88d 2002 	strb.w	r2, [sp, #2]
   26fcc:	7bc2      	ldrb	r2, [r0, #15]
   26fce:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   26fd2:	7902      	ldrb	r2, [r0, #4]
   26fd4:	f88d 2004 	strb.w	r2, [sp, #4]
   26fd8:	7a42      	ldrb	r2, [r0, #9]
   26fda:	f88d 2005 	strb.w	r2, [sp, #5]
   26fde:	7b82      	ldrb	r2, [r0, #14]
   26fe0:	f88d 2006 	strb.w	r2, [sp, #6]
   26fe4:	78c2      	ldrb	r2, [r0, #3]
   26fe6:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   26fea:	7a02      	ldrb	r2, [r0, #8]
   26fec:	f88d 2008 	strb.w	r2, [sp, #8]
   26ff0:	7b42      	ldrb	r2, [r0, #13]
   26ff2:	f88d 2009 	strb.w	r2, [sp, #9]
   26ff6:	7882      	ldrb	r2, [r0, #2]
   26ff8:	f88d 200a 	strb.w	r2, [sp, #10]
   26ffc:	79c2      	ldrb	r2, [r0, #7]
   26ffe:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   27002:	7b02      	ldrb	r2, [r0, #12]
   27004:	f88d 200c 	strb.w	r2, [sp, #12]
   27008:	7842      	ldrb	r2, [r0, #1]
   2700a:	f88d 200d 	strb.w	r2, [sp, #13]
   2700e:	7982      	ldrb	r2, [r0, #6]
   27010:	f88d 200e 	strb.w	r2, [sp, #14]
   27014:	7ac3      	ldrb	r3, [r0, #11]
   27016:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2701a:	2310      	movs	r3, #16
   2701c:	466a      	mov	r2, sp
   2701e:	4619      	mov	r1, r3
   27020:	f7ff ff6e 	bl	26f00 <_copy>
}
   27024:	b005      	add	sp, #20
   27026:	f85d fb04 	ldr.w	pc, [sp], #4

0002702a <mult_row_column>:
{
   2702a:	b570      	push	{r4, r5, r6, lr}
   2702c:	4606      	mov	r6, r0
   2702e:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   27030:	7808      	ldrb	r0, [r1, #0]
   27032:	f7ff ff76 	bl	26f22 <_double_byte>
   27036:	4605      	mov	r5, r0
   27038:	7860      	ldrb	r0, [r4, #1]
   2703a:	f7ff ff72 	bl	26f22 <_double_byte>
   2703e:	7861      	ldrb	r1, [r4, #1]
   27040:	78a2      	ldrb	r2, [r4, #2]
   27042:	78e3      	ldrb	r3, [r4, #3]
   27044:	4048      	eors	r0, r1
   27046:	4045      	eors	r5, r0
   27048:	406a      	eors	r2, r5
   2704a:	4053      	eors	r3, r2
   2704c:	7033      	strb	r3, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2704e:	7825      	ldrb	r5, [r4, #0]
   27050:	7860      	ldrb	r0, [r4, #1]
   27052:	f7ff ff66 	bl	26f22 <_double_byte>
   27056:	4045      	eors	r5, r0
   27058:	b2ed      	uxtb	r5, r5
   2705a:	78a0      	ldrb	r0, [r4, #2]
   2705c:	f7ff ff61 	bl	26f22 <_double_byte>
   27060:	78a2      	ldrb	r2, [r4, #2]
   27062:	78e3      	ldrb	r3, [r4, #3]
   27064:	4050      	eors	r0, r2
   27066:	4045      	eors	r5, r0
   27068:	406b      	eors	r3, r5
   2706a:	7073      	strb	r3, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2706c:	7825      	ldrb	r5, [r4, #0]
   2706e:	7863      	ldrb	r3, [r4, #1]
   27070:	405d      	eors	r5, r3
   27072:	78a0      	ldrb	r0, [r4, #2]
   27074:	f7ff ff55 	bl	26f22 <_double_byte>
   27078:	4045      	eors	r5, r0
   2707a:	b2ed      	uxtb	r5, r5
   2707c:	78e0      	ldrb	r0, [r4, #3]
   2707e:	f7ff ff50 	bl	26f22 <_double_byte>
   27082:	78e3      	ldrb	r3, [r4, #3]
   27084:	4058      	eors	r0, r3
   27086:	4045      	eors	r5, r0
   27088:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2708a:	7820      	ldrb	r0, [r4, #0]
   2708c:	f7ff ff49 	bl	26f22 <_double_byte>
   27090:	7822      	ldrb	r2, [r4, #0]
   27092:	7863      	ldrb	r3, [r4, #1]
   27094:	78a5      	ldrb	r5, [r4, #2]
   27096:	4050      	eors	r0, r2
   27098:	4043      	eors	r3, r0
   2709a:	405d      	eors	r5, r3
   2709c:	b2ed      	uxtb	r5, r5
   2709e:	78e0      	ldrb	r0, [r4, #3]
   270a0:	f7ff ff3f 	bl	26f22 <_double_byte>
   270a4:	4045      	eors	r5, r0
   270a6:	70f5      	strb	r5, [r6, #3]
}
   270a8:	bd70      	pop	{r4, r5, r6, pc}

000270aa <mix_columns>:
{
   270aa:	b510      	push	{r4, lr}
   270ac:	b084      	sub	sp, #16
   270ae:	4604      	mov	r4, r0
	mult_row_column(t, s);
   270b0:	4601      	mov	r1, r0
   270b2:	4668      	mov	r0, sp
   270b4:	f7ff ffb9 	bl	2702a <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   270b8:	1d21      	adds	r1, r4, #4
   270ba:	a801      	add	r0, sp, #4
   270bc:	f7ff ffb5 	bl	2702a <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   270c0:	f104 0108 	add.w	r1, r4, #8
   270c4:	a802      	add	r0, sp, #8
   270c6:	f7ff ffb0 	bl	2702a <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   270ca:	f104 010c 	add.w	r1, r4, #12
   270ce:	a803      	add	r0, sp, #12
   270d0:	f7ff ffab 	bl	2702a <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   270d4:	2310      	movs	r3, #16
   270d6:	466a      	mov	r2, sp
   270d8:	4619      	mov	r1, r3
   270da:	4620      	mov	r0, r4
   270dc:	f7ff ff10 	bl	26f00 <_copy>
}
   270e0:	b004      	add	sp, #16
   270e2:	bd10      	pop	{r4, pc}

000270e4 <gf_double>:
 */
void gf_double(uint8_t *out, uint8_t *in)
{

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
   270e4:	460b      	mov	r3, r1

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   270e6:	f913 2b0f 	ldrsb.w	r2, [r3], #15
   270ea:	2a00      	cmp	r2, #0
   270ec:	db04      	blt.n	270f8 <gf_double+0x14>
   270ee:	f04f 0c00 	mov.w	ip, #0

	out += (TC_AES_BLOCK_SIZE - 1);
   270f2:	f100 020f 	add.w	r2, r0, #15
   270f6:	e006      	b.n	27106 <gf_double+0x22>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   270f8:	f04f 0c87 	mov.w	ip, #135	; 0x87
   270fc:	e7f9      	b.n	270f2 <gf_double+0xe>
	for (;;) {
		*out-- = (*x << 1) ^ carry;
		if (x == in) {
			break;
		}
		carry = *x-- >> 7;
   270fe:	f813 0901 	ldrb.w	r0, [r3], #-1
   27102:	ea4f 1cd0 	mov.w	ip, r0, lsr #7
		*out-- = (*x << 1) ^ carry;
   27106:	7818      	ldrb	r0, [r3, #0]
   27108:	ea8c 0040 	eor.w	r0, ip, r0, lsl #1
   2710c:	f802 0901 	strb.w	r0, [r2], #-1
		if (x == in) {
   27110:	428b      	cmp	r3, r1
   27112:	d1f4      	bne.n	270fe <gf_double+0x1a>
	}
}
   27114:	4770      	bx	lr

00027116 <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
   27116:	b130      	cbz	r0, 27126 <tc_cmac_erase+0x10>
{
   27118:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2711a:	2258      	movs	r2, #88	; 0x58
   2711c:	2100      	movs	r1, #0
   2711e:	f7ff fefc 	bl	26f1a <_set>

	return TC_CRYPTO_SUCCESS;
   27122:	2001      	movs	r0, #1
}
   27124:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
   27126:	2000      	movs	r0, #0
}
   27128:	4770      	bx	lr

0002712a <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2712a:	b1a0      	cbz	r0, 27156 <tc_cmac_init+0x2c>
{
   2712c:	b510      	push	{r4, lr}
   2712e:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   27130:	2210      	movs	r2, #16
   27132:	2100      	movs	r1, #0
   27134:	f7ff fef1 	bl	26f1a <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   27138:	2210      	movs	r2, #16
   2713a:	2100      	movs	r1, #0
   2713c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   27140:	f7ff feeb 	bl	26f1a <_set>
	s->leftover_offset = 0;
   27144:	2300      	movs	r3, #0
   27146:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   27148:	2200      	movs	r2, #0
   2714a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2714e:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
   27152:	2001      	movs	r0, #1
}
   27154:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
   27156:	2000      	movs	r0, #0
}
   27158:	4770      	bx	lr

0002715a <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
   2715a:	b338      	cbz	r0, 271ac <tc_cmac_setup+0x52>
{
   2715c:	b570      	push	{r4, r5, r6, lr}
   2715e:	460d      	mov	r5, r1
   27160:	4616      	mov	r6, r2
   27162:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
   27164:	b321      	cbz	r1, 271b0 <tc_cmac_setup+0x56>
	_set(s, 0, sizeof(*s));
   27166:	2258      	movs	r2, #88	; 0x58
   27168:	2100      	movs	r1, #0
   2716a:	f7ff fed6 	bl	26f1a <_set>
	s->sched = sched;
   2716e:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   27170:	4629      	mov	r1, r5
   27172:	4630      	mov	r0, r6
   27174:	f7ee f944 	bl	15400 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   27178:	2210      	movs	r2, #16
   2717a:	2100      	movs	r1, #0
   2717c:	4620      	mov	r0, r4
   2717e:	f7ff fecc 	bl	26f1a <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   27182:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   27184:	4621      	mov	r1, r4
   27186:	4620      	mov	r0, r4
   27188:	f7ee f99c 	bl	154c4 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2718c:	f104 0510 	add.w	r5, r4, #16
   27190:	4621      	mov	r1, r4
   27192:	4628      	mov	r0, r5
   27194:	f7ff ffa6 	bl	270e4 <gf_double>
	gf_double (s->K2, s->K1);
   27198:	4629      	mov	r1, r5
   2719a:	f104 0020 	add.w	r0, r4, #32
   2719e:	f7ff ffa1 	bl	270e4 <gf_double>
	tc_cmac_init(s);
   271a2:	4620      	mov	r0, r4
   271a4:	f7ff ffc1 	bl	2712a <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   271a8:	2001      	movs	r0, #1
}
   271aa:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   271ac:	2000      	movs	r0, #0
}
   271ae:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   271b0:	2000      	movs	r0, #0
   271b2:	e7fa      	b.n	271aa <tc_cmac_setup+0x50>

000271b4 <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   271b4:	2800      	cmp	r0, #0
   271b6:	d064      	beq.n	27282 <tc_cmac_update+0xce>
{
   271b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   271bc:	460d      	mov	r5, r1
   271be:	4616      	mov	r6, r2
   271c0:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   271c2:	2a00      	cmp	r2, #0
   271c4:	d05f      	beq.n	27286 <tc_cmac_update+0xd2>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   271c6:	2900      	cmp	r1, #0
   271c8:	d060      	beq.n	2728c <tc_cmac_update+0xd8>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   271ca:	6d03      	ldr	r3, [r0, #80]	; 0x50
   271cc:	6d42      	ldr	r2, [r0, #84]	; 0x54
   271ce:	ea53 0102 	orrs.w	r1, r3, r2
   271d2:	d05d      	beq.n	27290 <tc_cmac_update+0xdc>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   271d4:	3b01      	subs	r3, #1
   271d6:	f142 32ff 	adc.w	r2, r2, #4294967295
   271da:	6503      	str	r3, [r0, #80]	; 0x50
   271dc:	6542      	str	r2, [r0, #84]	; 0x54

	if (s->leftover_offset > 0) {
   271de:	6c47      	ldr	r7, [r0, #68]	; 0x44
   271e0:	2f00      	cmp	r7, #0
   271e2:	d03d      	beq.n	27260 <tc_cmac_update+0xac>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   271e4:	f1c7 0810 	rsb	r8, r7, #16

		if (data_length < remaining_space) {
   271e8:	4546      	cmp	r6, r8
   271ea:	d30d      	bcc.n	27208 <tc_cmac_update+0x54>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
   271ec:	f107 0030 	add.w	r0, r7, #48	; 0x30
   271f0:	4643      	mov	r3, r8
   271f2:	462a      	mov	r2, r5
   271f4:	4641      	mov	r1, r8
   271f6:	4420      	add	r0, r4
   271f8:	f7ff fe82 	bl	26f00 <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
   271fc:	3f10      	subs	r7, #16
   271fe:	443e      	add	r6, r7
		data += remaining_space;
   27200:	4445      	add	r5, r8
		s->leftover_offset = 0;
   27202:	2300      	movs	r3, #0
   27204:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27206:	e013      	b.n	27230 <tc_cmac_update+0x7c>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   27208:	f107 0030 	add.w	r0, r7, #48	; 0x30
   2720c:	4633      	mov	r3, r6
   2720e:	462a      	mov	r2, r5
   27210:	4631      	mov	r1, r6
   27212:	4420      	add	r0, r4
   27214:	f7ff fe74 	bl	26f00 <_copy>
			s->leftover_offset += data_length;
   27218:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2721a:	4433      	add	r3, r6
   2721c:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   2721e:	2001      	movs	r0, #1
   27220:	e032      	b.n	27288 <tc_cmac_update+0xd4>
			s->iv[i] ^= s->leftover[i];
   27222:	5ce2      	ldrb	r2, [r4, r3]
   27224:	18e1      	adds	r1, r4, r3
   27226:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
   2722a:	404a      	eors	r2, r1
   2722c:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2722e:	3301      	adds	r3, #1
   27230:	2b0f      	cmp	r3, #15
   27232:	d9f6      	bls.n	27222 <tc_cmac_update+0x6e>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   27234:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   27236:	4621      	mov	r1, r4
   27238:	4620      	mov	r0, r4
   2723a:	f7ee f943 	bl	154c4 <tc_aes_encrypt>
   2723e:	e00f      	b.n	27260 <tc_cmac_update+0xac>
	}

	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
   27240:	5ce0      	ldrb	r0, [r4, r3]
   27242:	f815 c003 	ldrb.w	ip, [r5, r3]
   27246:	ea80 000c 	eor.w	r0, r0, ip
   2724a:	54e0      	strb	r0, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2724c:	3301      	adds	r3, #1
   2724e:	2b0f      	cmp	r3, #15
   27250:	d9f6      	bls.n	27240 <tc_cmac_update+0x8c>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   27252:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   27254:	4621      	mov	r1, r4
   27256:	4620      	mov	r0, r4
   27258:	f7ee f934 	bl	154c4 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2725c:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2725e:	3e10      	subs	r6, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
   27260:	2e10      	cmp	r6, #16
   27262:	d901      	bls.n	27268 <tc_cmac_update+0xb4>
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27264:	2300      	movs	r3, #0
   27266:	e7f2      	b.n	2724e <tc_cmac_update+0x9a>
	}

	if (data_length > 0) {
   27268:	b90e      	cbnz	r6, 2726e <tc_cmac_update+0xba>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   2726a:	2001      	movs	r0, #1
   2726c:	e00c      	b.n	27288 <tc_cmac_update+0xd4>
		_copy(s->leftover, data_length, data, data_length);
   2726e:	4633      	mov	r3, r6
   27270:	462a      	mov	r2, r5
   27272:	4631      	mov	r1, r6
   27274:	f104 0030 	add.w	r0, r4, #48	; 0x30
   27278:	f7ff fe42 	bl	26f00 <_copy>
		s->leftover_offset = data_length;
   2727c:	6466      	str	r6, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
   2727e:	2001      	movs	r0, #1
   27280:	e002      	b.n	27288 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
   27282:	2000      	movs	r0, #0
}
   27284:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
   27286:	2001      	movs	r0, #1
}
   27288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   2728c:	2000      	movs	r0, #0
   2728e:	e7fb      	b.n	27288 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
   27290:	2000      	movs	r0, #0
   27292:	e7f9      	b.n	27288 <tc_cmac_update+0xd4>

00027294 <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   27294:	b380      	cbz	r0, 272f8 <tc_cmac_final+0x64>
{
   27296:	b538      	push	{r3, r4, r5, lr}
   27298:	460c      	mov	r4, r1
   2729a:	4605      	mov	r5, r0
	if (tag == (uint8_t *) 0 ||
   2729c:	b371      	cbz	r1, 272fc <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2729e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   272a0:	2a10      	cmp	r2, #16
   272a2:	d103      	bne.n	272ac <tc_cmac_final+0x18>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   272a4:	f101 0c10 	add.w	ip, r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   272a8:	2300      	movs	r3, #0
   272aa:	e019      	b.n	272e0 <tc_cmac_final+0x4c>
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   272ac:	f102 0030 	add.w	r0, r2, #48	; 0x30
   272b0:	f1c2 0210 	rsb	r2, r2, #16
   272b4:	2100      	movs	r1, #0
   272b6:	4420      	add	r0, r4
   272b8:	f7ff fe2f 	bl	26f1a <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   272bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   272be:	4423      	add	r3, r4
   272c0:	2280      	movs	r2, #128	; 0x80
   272c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   272c6:	f104 0c20 	add.w	ip, r4, #32
   272ca:	e7ed      	b.n	272a8 <tc_cmac_final+0x14>
		s->iv[i] ^= s->leftover[i] ^ k[i];
   272cc:	5ce2      	ldrb	r2, [r4, r3]
   272ce:	18e1      	adds	r1, r4, r3
   272d0:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
   272d4:	f81c 1003 	ldrb.w	r1, [ip, r3]
   272d8:	4048      	eors	r0, r1
   272da:	4042      	eors	r2, r0
   272dc:	54e2      	strb	r2, [r4, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   272de:	3301      	adds	r3, #1
   272e0:	2b0f      	cmp	r3, #15
   272e2:	d9f3      	bls.n	272cc <tc_cmac_final+0x38>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   272e4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   272e6:	4621      	mov	r1, r4
   272e8:	4628      	mov	r0, r5
   272ea:	f7ee f8eb 	bl	154c4 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   272ee:	4620      	mov	r0, r4
   272f0:	f7ff ff11 	bl	27116 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   272f4:	2001      	movs	r0, #1
}
   272f6:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   272f8:	2000      	movs	r0, #0
}
   272fa:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   272fc:	2000      	movs	r0, #0
   272fe:	e7fa      	b.n	272f6 <tc_cmac_final+0x62>

00027300 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   27300:	b538      	push	{r3, r4, r5, lr}
   27302:	4604      	mov	r4, r0

	if (esf != NULL) {
   27304:	460d      	mov	r5, r1
   27306:	b111      	cbz	r1, 2730e <z_arm_fatal_error+0xe>
		esf_dump(esf);
   27308:	4608      	mov	r0, r1
   2730a:	f7ee f955 	bl	155b8 <esf_dump>
	}
	z_fatal_error(reason, esf);
   2730e:	4629      	mov	r1, r5
   27310:	4620      	mov	r0, r4
   27312:	f7fc f9e1 	bl	236d8 <z_fatal_error>
}
   27316:	bd38      	pop	{r3, r4, r5, pc}

00027318 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   27318:	b508      	push	{r3, lr}
   2731a:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2731c:	6800      	ldr	r0, [r0, #0]
   2731e:	f7ff ffef 	bl	27300 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   27322:	bd08      	pop	{r3, pc}

00027324 <arch_irq_enable>:
{
   27324:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
   27326:	b240      	sxtb	r0, r0
   27328:	f7ee fa6c 	bl	15804 <__NVIC_EnableIRQ>
}
   2732c:	bd08      	pop	{r3, pc}

0002732e <arch_irq_disable>:
{
   2732e:	b508      	push	{r3, lr}
	NVIC_DisableIRQ((IRQn_Type)irq);
   27330:	b240      	sxtb	r0, r0
   27332:	f7ee fa75 	bl	15820 <__NVIC_DisableIRQ>
}
   27336:	bd08      	pop	{r3, pc}

00027338 <z_arm_irq_priority_set>:
{
   27338:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   2733a:	f012 0f01 	tst.w	r2, #1
   2733e:	d104      	bne.n	2734a <z_arm_irq_priority_set+0x12>
		prio += _IRQ_PRIO_OFFSET;
   27340:	3102      	adds	r1, #2
	NVIC_SetPriority((IRQn_Type)irq, prio);
   27342:	b240      	sxtb	r0, r0
   27344:	f7ee fa7e 	bl	15844 <__NVIC_SetPriority>
}
   27348:	bd08      	pop	{r3, pc}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   2734a:	2100      	movs	r1, #0
   2734c:	e7f9      	b.n	27342 <z_arm_irq_priority_set+0xa>

0002734e <z_irq_spurious>:
{
   2734e:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   27350:	2100      	movs	r1, #0
   27352:	2001      	movs	r0, #1
   27354:	f7ff ffd4 	bl	27300 <z_arm_fatal_error>
}
   27358:	bd08      	pop	{r3, pc}

0002735a <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   2735a:	b508      	push	{r3, lr}
	handler();
   2735c:	f7ee faa4 	bl	158a8 <z_SysNmiOnReset>
	z_arm_int_exit();
   27360:	f7ee fb96 	bl	15a90 <z_arm_exc_exit>
}
   27364:	bd08      	pop	{r3, pc}

00027366 <memory_fault_recoverable>:
}
   27366:	2000      	movs	r0, #0
   27368:	4770      	bx	lr

0002736a <fault_handle>:
{
   2736a:	b508      	push	{r3, lr}
	*recoverable = false;
   2736c:	2300      	movs	r3, #0
   2736e:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   27370:	1ecb      	subs	r3, r1, #3
   27372:	2b09      	cmp	r3, #9
   27374:	d81a      	bhi.n	273ac <fault_handle+0x42>
   27376:	e8df f003 	tbb	[pc, r3]
   2737a:	0905      	.short	0x0905
   2737c:	1919110d 	.word	0x1919110d
   27380:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
   27384:	4611      	mov	r1, r2
   27386:	f7ef f901 	bl	1658c <hard_fault>
}
   2738a:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   2738c:	2100      	movs	r1, #0
   2738e:	f7ee ff6b 	bl	16268 <mem_manage_fault>
		break;
   27392:	e7fa      	b.n	2738a <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   27394:	2100      	movs	r1, #0
   27396:	f7ee fbeb 	bl	15b70 <bus_fault>
		break;
   2739a:	e7f6      	b.n	2738a <fault_handle+0x20>
		reason = usage_fault(esf);
   2739c:	f7ee fd7c 	bl	15e98 <usage_fault>
		break;
   273a0:	e7f3      	b.n	2738a <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   273a2:	4611      	mov	r1, r2
   273a4:	f7ee fec2 	bl	1612c <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   273a8:	2000      	movs	r0, #0
		break;
   273aa:	e7ee      	b.n	2738a <fault_handle+0x20>
		reserved_exception(esf, fault);
   273ac:	f7ee feee 	bl	1618c <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   273b0:	2000      	movs	r0, #0
	return reason;
   273b2:	e7ea      	b.n	2738a <fault_handle+0x20>

000273b4 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   273b4:	6843      	ldr	r3, [r0, #4]
   273b6:	1e5a      	subs	r2, r3, #1
		&&
   273b8:	4213      	tst	r3, r2
   273ba:	d106      	bne.n	273ca <mpu_partition_is_valid+0x16>
		&&
   273bc:	2b1f      	cmp	r3, #31
   273be:	d906      	bls.n	273ce <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   273c0:	6803      	ldr	r3, [r0, #0]
		&&
   273c2:	421a      	tst	r2, r3
   273c4:	d005      	beq.n	273d2 <mpu_partition_is_valid+0x1e>
   273c6:	2000      	movs	r0, #0
   273c8:	4770      	bx	lr
   273ca:	2000      	movs	r0, #0
   273cc:	4770      	bx	lr
   273ce:	2000      	movs	r0, #0
   273d0:	4770      	bx	lr
   273d2:	2001      	movs	r0, #1
}
   273d4:	4770      	bx	lr

000273d6 <mpu_configure_region>:
{
   273d6:	b500      	push	{lr}
   273d8:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   273da:	680b      	ldr	r3, [r1, #0]
   273dc:	9301      	str	r3, [sp, #4]
		&new_region->attr, new_region->start, new_region->size);
   273de:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   273e0:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   273e2:	2b20      	cmp	r3, #32
   273e4:	d912      	bls.n	2740c <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   273e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   273ea:	d811      	bhi.n	27410 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   273ec:	3b01      	subs	r3, #1
   273ee:	fab3 f383 	clz	r3, r3
   273f2:	f1c3 031f 	rsb	r3, r3, #31
   273f6:	005b      	lsls	r3, r3, #1
   273f8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   273fc:	4313      	orrs	r3, r2
   273fe:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   27400:	a901      	add	r1, sp, #4
   27402:	f7ef fb03 	bl	16a0c <region_allocate_and_init>
}
   27406:	b005      	add	sp, #20
   27408:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   2740c:	2308      	movs	r3, #8
   2740e:	e7f5      	b.n	273fc <mpu_configure_region+0x26>
		return REGION_4G;
   27410:	233e      	movs	r3, #62	; 0x3e
   27412:	e7f3      	b.n	273fc <mpu_configure_region+0x26>

00027414 <arm_core_mpu_configure_static_mpu_regions>:
{
   27414:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   27416:	f7ef fbb3 	bl	16b80 <mpu_configure_static_mpu_regions>
}
   2741a:	bd08      	pop	{r3, pc}

0002741c <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   2741c:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   2741e:	f7ef fbb9 	bl	16b94 <mpu_configure_dynamic_mpu_regions>
}
   27422:	bd08      	pop	{r3, pc}

00027424 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   27424:	4602      	mov	r2, r0
   27426:	e002      	b.n	2742e <strcpy+0xa>
		*d = *s;
   27428:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
   2742c:	3101      	adds	r1, #1
	while (*s != '\0') {
   2742e:	780b      	ldrb	r3, [r1, #0]
   27430:	2b00      	cmp	r3, #0
   27432:	d1f9      	bne.n	27428 <strcpy+0x4>
	}

	*d = '\0';
   27434:	7013      	strb	r3, [r2, #0]

	return dest;
}
   27436:	4770      	bx	lr

00027438 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   27438:	4603      	mov	r3, r0
   2743a:	b1a2      	cbz	r2, 27466 <strncpy+0x2e>
{
   2743c:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
   2743e:	780c      	ldrb	r4, [r1, #0]
   27440:	b12c      	cbz	r4, 2744e <strncpy+0x16>
		*d = *s;
   27442:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
   27446:	3101      	adds	r1, #1
		d++;
		n--;
   27448:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
   2744a:	2a00      	cmp	r2, #0
   2744c:	d1f7      	bne.n	2743e <strncpy+0x6>
	}

	while (n > 0) {
   2744e:	b122      	cbz	r2, 2745a <strncpy+0x22>
		*d = '\0';
   27450:	2100      	movs	r1, #0
   27452:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
   27456:	3a01      	subs	r2, #1
   27458:	e7f9      	b.n	2744e <strncpy+0x16>
	}

	return dest;
}
   2745a:	bc10      	pop	{r4}
   2745c:	4770      	bx	lr
		*d = '\0';
   2745e:	2100      	movs	r1, #0
   27460:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   27464:	3a01      	subs	r2, #1
	while (n > 0) {
   27466:	2a00      	cmp	r2, #0
   27468:	d1f9      	bne.n	2745e <strncpy+0x26>
   2746a:	4770      	bx	lr

0002746c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   2746c:	4603      	mov	r3, r0
	size_t n = 0;
   2746e:	2000      	movs	r0, #0

	while (*s != '\0') {
   27470:	e001      	b.n	27476 <strlen+0xa>
		s++;
   27472:	3301      	adds	r3, #1
		n++;
   27474:	3001      	adds	r0, #1
	while (*s != '\0') {
   27476:	781a      	ldrb	r2, [r3, #0]
   27478:	2a00      	cmp	r2, #0
   2747a:	d1fa      	bne.n	27472 <strlen+0x6>
	}

	return n;
}
   2747c:	4770      	bx	lr

0002747e <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   2747e:	4603      	mov	r3, r0
	size_t n = 0;
   27480:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   27482:	e001      	b.n	27488 <strnlen+0xa>
		s++;
   27484:	3301      	adds	r3, #1
		n++;
   27486:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
   27488:	781a      	ldrb	r2, [r3, #0]
   2748a:	b10a      	cbz	r2, 27490 <strnlen+0x12>
   2748c:	4288      	cmp	r0, r1
   2748e:	d3f9      	bcc.n	27484 <strnlen+0x6>
	}

	return n;
}
   27490:	4770      	bx	lr

00027492 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   27492:	e001      	b.n	27498 <strcmp+0x6>
		s1++;
   27494:	3001      	adds	r0, #1
		s2++;
   27496:	3101      	adds	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
   27498:	7803      	ldrb	r3, [r0, #0]
   2749a:	780a      	ldrb	r2, [r1, #0]
   2749c:	4293      	cmp	r3, r2
   2749e:	d101      	bne.n	274a4 <strcmp+0x12>
   274a0:	2b00      	cmp	r3, #0
   274a2:	d1f7      	bne.n	27494 <strcmp+0x2>
	}

	return *s1 - *s2;
}
   274a4:	1a98      	subs	r0, r3, r2
   274a6:	4770      	bx	lr

000274a8 <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   274a8:	4613      	mov	r3, r2
   274aa:	b16a      	cbz	r2, 274c8 <memcmp+0x20>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   274ac:	3b01      	subs	r3, #1
   274ae:	d007      	beq.n	274c0 <memcmp+0x18>
   274b0:	f890 c000 	ldrb.w	ip, [r0]
   274b4:	780a      	ldrb	r2, [r1, #0]
   274b6:	4594      	cmp	ip, r2
   274b8:	d102      	bne.n	274c0 <memcmp+0x18>
		c1++;
   274ba:	3001      	adds	r0, #1
		c2++;
   274bc:	3101      	adds	r1, #1
   274be:	e7f5      	b.n	274ac <memcmp+0x4>
	}

	return *c1 - *c2;
   274c0:	7800      	ldrb	r0, [r0, #0]
   274c2:	780b      	ldrb	r3, [r1, #0]
   274c4:	1ac0      	subs	r0, r0, r3
   274c6:	4770      	bx	lr
		return 0;
   274c8:	2000      	movs	r0, #0
}
   274ca:	4770      	bx	lr

000274cc <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   274cc:	ea80 0301 	eor.w	r3, r0, r1
   274d0:	f013 0f03 	tst.w	r3, #3
   274d4:	d001      	beq.n	274da <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
   274d6:	4603      	mov	r3, r0
   274d8:	e023      	b.n	27522 <memcpy+0x56>
   274da:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   274dc:	f013 0f03 	tst.w	r3, #3
   274e0:	d00f      	beq.n	27502 <memcpy+0x36>
			if (n == 0) {
   274e2:	b30a      	cbz	r2, 27528 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
   274e4:	f811 cb01 	ldrb.w	ip, [r1], #1
   274e8:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
   274ec:	3a01      	subs	r2, #1
   274ee:	e7f5      	b.n	274dc <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
   274f0:	f811 cb01 	ldrb.w	ip, [r1], #1
   274f4:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   274f8:	3a01      	subs	r2, #1
	while (n > 0) {
   274fa:	2a00      	cmp	r2, #0
   274fc:	d1f8      	bne.n	274f0 <memcpy+0x24>
	}

	return d;
}
   274fe:	bc10      	pop	{r4}
   27500:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
   27502:	2a03      	cmp	r2, #3
   27504:	d90d      	bls.n	27522 <memcpy+0x56>
{
   27506:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
   27508:	f851 4b04 	ldr.w	r4, [r1], #4
   2750c:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
   27510:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
   27512:	2a03      	cmp	r2, #3
   27514:	d8f8      	bhi.n	27508 <memcpy+0x3c>
   27516:	e7f0      	b.n	274fa <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
   27518:	f811 cb01 	ldrb.w	ip, [r1], #1
   2751c:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   27520:	3a01      	subs	r2, #1
	while (n > 0) {
   27522:	2a00      	cmp	r2, #0
   27524:	d1f8      	bne.n	27518 <memcpy+0x4c>
   27526:	4770      	bx	lr
}
   27528:	4770      	bx	lr

0002752a <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   2752a:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
   2752e:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   27530:	e002      	b.n	27538 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
   27532:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   27536:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   27538:	f013 0f03 	tst.w	r3, #3
   2753c:	d002      	beq.n	27544 <memset+0x1a>
		if (n == 0) {
   2753e:	2a00      	cmp	r2, #0
   27540:	d1f7      	bne.n	27532 <memset+0x8>
   27542:	e00f      	b.n	27564 <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
   27544:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   27546:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   2754a:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   2754e:	2a03      	cmp	r2, #3
   27550:	d906      	bls.n	27560 <memset+0x36>
		*(d_word++) = c_word;
   27552:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
   27556:	3a04      	subs	r2, #4
   27558:	e7f9      	b.n	2754e <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
   2755a:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   2755e:	3a01      	subs	r2, #1
	while (n > 0) {
   27560:	2a00      	cmp	r2, #0
   27562:	d1fa      	bne.n	2755a <memset+0x30>
	}

	return buf;
}
   27564:	4770      	bx	lr

00027566 <_stdout_hook_default>:
}
   27566:	f04f 30ff 	mov.w	r0, #4294967295
   2756a:	4770      	bx	lr

0002756c <sys_arch_reboot>:
{
   2756c:	b508      	push	{r3, lr}
    *p_gpregret = val;
   2756e:	b2c0      	uxtb	r0, r0
   27570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   27574:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
	NVIC_SystemReset();
   27578:	f7ef fb64 	bl	16c44 <__NVIC_SystemReset>

0002757c <nrf_power_system_off>:
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   2757c:	2301      	movs	r3, #1
   2757e:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   27582:	f3bf 8f4f 	dsb	sy
        __WFE();
   27586:	bf20      	wfe
    while (true)
   27588:	e7fd      	b.n	27586 <nrf_power_system_off+0xa>

0002758a <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   2758a:	2806      	cmp	r0, #6
   2758c:	d000      	beq.n	27590 <pm_state_set+0x6>
   2758e:	4770      	bx	lr
{
   27590:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_power_system_off(NRF_POWER);
   27592:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   27596:	f7ff fff1 	bl	2757c <nrf_power_system_off>

0002759a <pm_state_exit_post_ops>:
   2759a:	2300      	movs	r3, #0
   2759c:	f383 8811 	msr	BASEPRI, r3
   275a0:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   275a4:	4770      	bx	lr

000275a6 <uuid128_cmp>:

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   275a6:	b510      	push	{r4, lr}
   275a8:	b08a      	sub	sp, #40	; 0x28
   275aa:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
   275ac:	a905      	add	r1, sp, #20
   275ae:	f7ef fc23 	bl	16df8 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   275b2:	4669      	mov	r1, sp
   275b4:	4620      	mov	r0, r4
   275b6:	f7ef fc1f 	bl	16df8 <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
   275ba:	2210      	movs	r2, #16
   275bc:	f10d 0101 	add.w	r1, sp, #1
   275c0:	f10d 0015 	add.w	r0, sp, #21
   275c4:	f7ff ff70 	bl	274a8 <memcmp>
}
   275c8:	b00a      	add	sp, #40	; 0x28
   275ca:	bd10      	pop	{r4, pc}

000275cc <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   275cc:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   275ce:	7803      	ldrb	r3, [r0, #0]
   275d0:	780a      	ldrb	r2, [r1, #0]
   275d2:	4293      	cmp	r3, r2
   275d4:	d107      	bne.n	275e6 <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);
	}

	switch (u1->type) {
   275d6:	2b01      	cmp	r3, #1
   275d8:	d00c      	beq.n	275f4 <bt_uuid_cmp+0x28>
   275da:	2b02      	cmp	r3, #2
   275dc:	d00e      	beq.n	275fc <bt_uuid_cmp+0x30>
   275de:	b12b      	cbz	r3, 275ec <bt_uuid_cmp+0x20>
   275e0:	f06f 0015 	mvn.w	r0, #21
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   275e4:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
   275e6:	f7ff ffde 	bl	275a6 <uuid128_cmp>
   275ea:	e7fb      	b.n	275e4 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   275ec:	8840      	ldrh	r0, [r0, #2]
   275ee:	884b      	ldrh	r3, [r1, #2]
   275f0:	1ac0      	subs	r0, r0, r3
   275f2:	e7f7      	b.n	275e4 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   275f4:	6840      	ldr	r0, [r0, #4]
   275f6:	684b      	ldr	r3, [r1, #4]
   275f8:	1ac0      	subs	r0, r0, r3
   275fa:	e7f3      	b.n	275e4 <bt_uuid_cmp+0x18>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   275fc:	2210      	movs	r2, #16
   275fe:	3101      	adds	r1, #1
   27600:	3001      	adds	r0, #1
   27602:	f7ff ff51 	bl	274a8 <memcmp>
   27606:	e7ed      	b.n	275e4 <bt_uuid_cmp+0x18>

00027608 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
   27608:	b508      	push	{r3, lr}
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   2760a:	2a04      	cmp	r2, #4
   2760c:	d00e      	beq.n	2762c <bt_uuid_create+0x24>
   2760e:	2a10      	cmp	r2, #16
   27610:	d01d      	beq.n	2764e <bt_uuid_create+0x46>
   27612:	2a02      	cmp	r2, #2
   27614:	d001      	beq.n	2761a <bt_uuid_create+0x12>
   27616:	2000      	movs	r0, #0
		break;
	default:
		return false;
	}
	return true;
}
   27618:	bd08      	pop	{r3, pc}
		uuid->type = BT_UUID_TYPE_16;
   2761a:	2300      	movs	r3, #0
   2761c:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   2761e:	784a      	ldrb	r2, [r1, #1]
   27620:	780b      	ldrb	r3, [r1, #0]
   27622:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   27626:	8043      	strh	r3, [r0, #2]
	return true;
   27628:	2001      	movs	r0, #1
		break;
   2762a:	e7f5      	b.n	27618 <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_32;
   2762c:	2301      	movs	r3, #1
   2762e:	7003      	strb	r3, [r0, #0]
   27630:	78ca      	ldrb	r2, [r1, #3]
   27632:	f891 c002 	ldrb.w	ip, [r1, #2]
   27636:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
   2763a:	f891 e001 	ldrb.w	lr, [r1, #1]
   2763e:	780a      	ldrb	r2, [r1, #0]
   27640:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   27644:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   27648:	6042      	str	r2, [r0, #4]
	return true;
   2764a:	4618      	mov	r0, r3
		break;
   2764c:	e7e4      	b.n	27618 <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_128;
   2764e:	2302      	movs	r3, #2
   27650:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   27654:	2210      	movs	r2, #16
   27656:	f7ff ff39 	bl	274cc <memcpy>
	return true;
   2765a:	2001      	movs	r0, #1
		break;
   2765c:	e7dc      	b.n	27618 <bt_uuid_create+0x10>

0002765e <bt_addr_le_create_static>:
{
   2765e:	b510      	push	{r4, lr}
   27660:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   27662:	2301      	movs	r3, #1
   27664:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   27668:	2106      	movs	r1, #6
   2766a:	f7fa fc89 	bl	21f80 <bt_rand>
	if (err) {
   2766e:	b918      	cbnz	r0, 27678 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   27670:	79a3      	ldrb	r3, [r4, #6]
   27672:	f063 033f 	orn	r3, r3, #63	; 0x3f
   27676:	71a3      	strb	r3, [r4, #6]
}
   27678:	bd10      	pop	{r4, pc}

0002767a <sys_put_le64>:
	dst[0] = val;
   2767a:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   2767c:	f3c0 2307 	ubfx	r3, r0, #8, #8
   27680:	7053      	strb	r3, [r2, #1]
	sys_put_le16(val >> 16, &dst[2]);
   27682:	0c03      	lsrs	r3, r0, #16
	dst[0] = val;
   27684:	7093      	strb	r3, [r2, #2]
	dst[1] = val >> 8;
   27686:	0e00      	lsrs	r0, r0, #24
   27688:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   2768a:	7111      	strb	r1, [r2, #4]
	dst[1] = val >> 8;
   2768c:	f3c1 2307 	ubfx	r3, r1, #8, #8
   27690:	7153      	strb	r3, [r2, #5]
	sys_put_le16(val >> 16, &dst[2]);
   27692:	0c0b      	lsrs	r3, r1, #16
	dst[0] = val;
   27694:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   27696:	0e09      	lsrs	r1, r1, #24
   27698:	71d1      	strb	r1, [r2, #7]
}
   2769a:	4770      	bx	lr

0002769c <sys_get_le64>:
{
   2769c:	b500      	push	{lr}
	return ((uint16_t)src[1] << 8) | src[0];
   2769e:	79c3      	ldrb	r3, [r0, #7]
   276a0:	7981      	ldrb	r1, [r0, #6]
   276a2:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   276a6:	7942      	ldrb	r2, [r0, #5]
   276a8:	7903      	ldrb	r3, [r0, #4]
   276aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   276ae:	78c2      	ldrb	r2, [r0, #3]
   276b0:	f890 c002 	ldrb.w	ip, [r0, #2]
   276b4:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
   276b8:	f890 e001 	ldrb.w	lr, [r0, #1]
   276bc:	7802      	ldrb	r2, [r0, #0]
   276be:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
}
   276c2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
   276c6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   276ca:	f85d fb04 	ldr.w	pc, [sp], #4

000276ce <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   276ce:	3805      	subs	r0, #5
   276d0:	2815      	cmp	r0, #21
   276d2:	d80e      	bhi.n	276f2 <bt_hci_evt_get_flags+0x24>
   276d4:	e8df f000 	tbb	[pc, r0]
   276d8:	0d0d0d0b 	.word	0x0d0d0d0b
   276dc:	0d0d0d0d 	.word	0x0d0d0d0d
   276e0:	0d0f0f0d 	.word	0x0d0f0f0d
   276e4:	0d0f0d0d 	.word	0x0d0f0d0d
   276e8:	0d0d0d0d 	.word	0x0d0d0d0d
   276ec:	0f0d      	.short	0x0f0d
   276ee:	2003      	movs	r0, #3
   276f0:	4770      	bx	lr
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   276f2:	2002      	movs	r0, #2
   276f4:	4770      	bx	lr
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   276f6:	2001      	movs	r0, #1
	}
}
   276f8:	4770      	bx	lr

000276fa <skip_auto_phy_update_on_conn_establishment>:
}
   276fa:	2000      	movs	r0, #0
   276fc:	4770      	bx	lr

000276fe <hci_vendor_event>:
}
   276fe:	4770      	bx	lr

00027700 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   27700:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27702:	f3bf 8f5b 	dmb	ish
   27706:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   2770a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2770e:	f001 011f 	and.w	r1, r1, #31
   27712:	4108      	asrs	r0, r1
}
   27714:	f000 0001 	and.w	r0, r0, #1
   27718:	4770      	bx	lr

0002771a <hci_disconn_complete_prio>:
{
   2771a:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   2771c:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2771e:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   27722:	781b      	ldrb	r3, [r3, #0]
   27724:	b103      	cbz	r3, 27728 <hci_disconn_complete_prio+0xe>
}
   27726:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
   27728:	4620      	mov	r0, r4
   2772a:	f7f3 fa3f 	bl	1abac <bt_conn_lookup_handle>
	if (!conn) {
   2772e:	4605      	mov	r5, r0
   27730:	b130      	cbz	r0, 27740 <hci_disconn_complete_prio+0x26>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   27732:	2101      	movs	r1, #1
   27734:	f7f3 fa44 	bl	1abc0 <bt_conn_set_state>
	bt_conn_unref(conn);
   27738:	4628      	mov	r0, r5
   2773a:	f000 fb09 	bl	27d50 <bt_conn_unref>
   2773e:	e7f2      	b.n	27726 <hci_disconn_complete_prio+0xc>
		conn_handle_disconnected(handle);
   27740:	4620      	mov	r0, r4
   27742:	f7ef fc8b 	bl	1705c <conn_handle_disconnected>
		return;
   27746:	e7ee      	b.n	27726 <hci_disconn_complete_prio+0xc>

00027748 <atomic_set_bit_to>:
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   27748:	f001 0c1f 	and.w	ip, r1, #31
   2774c:	2301      	movs	r3, #1
   2774e:	fa03 f30c 	lsl.w	r3, r3, ip

	if (val) {
   27752:	b172      	cbz	r2, 27772 <atomic_set_bit_to+0x2a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   27754:	0949      	lsrs	r1, r1, #5
   27756:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2775a:	f3bf 8f5b 	dmb	ish
   2775e:	e850 2f00 	ldrex	r2, [r0]
   27762:	431a      	orrs	r2, r3
   27764:	e840 2100 	strex	r1, r2, [r0]
   27768:	2900      	cmp	r1, #0
   2776a:	d1f8      	bne.n	2775e <atomic_set_bit_to+0x16>
   2776c:	f3bf 8f5b 	dmb	ish
   27770:	4770      	bx	lr
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27772:	0949      	lsrs	r1, r1, #5
   27774:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   27778:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2777a:	f3bf 8f5b 	dmb	ish
   2777e:	e850 2f00 	ldrex	r2, [r0]
   27782:	401a      	ands	r2, r3
   27784:	e840 2100 	strex	r1, r2, [r0]
   27788:	2900      	cmp	r1, #0
   2778a:	d1f8      	bne.n	2777e <atomic_set_bit_to+0x36>
   2778c:	f3bf 8f5b 	dmb	ish
	}
}
   27790:	4770      	bx	lr

00027792 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   27792:	f001 021f 	and.w	r2, r1, #31
   27796:	2301      	movs	r3, #1
   27798:	4093      	lsls	r3, r2
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2779a:	0949      	lsrs	r1, r1, #5
   2779c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   277a0:	f3bf 8f5b 	dmb	ish
   277a4:	e850 2f00 	ldrex	r2, [r0]
   277a8:	ea42 0103 	orr.w	r1, r2, r3
   277ac:	e840 1c00 	strex	ip, r1, [r0]
   277b0:	f1bc 0f00 	cmp.w	ip, #0
   277b4:	d1f6      	bne.n	277a4 <atomic_test_and_set_bit+0x12>
   277b6:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   277ba:	4213      	tst	r3, r2
}
   277bc:	bf14      	ite	ne
   277be:	2001      	movne	r0, #1
   277c0:	2000      	moveq	r0, #0
   277c2:	4770      	bx	lr

000277c4 <hci_le_read_remote_features>:
{
   277c4:	b538      	push	{r3, r4, r5, lr}
   277c6:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   277c8:	2102      	movs	r1, #2
   277ca:	f242 0016 	movw	r0, #8214	; 0x2016
   277ce:	f7f0 fc97 	bl	18100 <bt_hci_cmd_create>
	if (!buf) {
   277d2:	b168      	cbz	r0, 277f0 <hci_le_read_remote_features+0x2c>
   277d4:	4605      	mov	r5, r0
   277d6:	2102      	movs	r1, #2
   277d8:	300c      	adds	r0, #12
   277da:	f002 fb7e 	bl	29eda <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   277de:	8823      	ldrh	r3, [r4, #0]
   277e0:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   277e2:	2200      	movs	r2, #0
   277e4:	4629      	mov	r1, r5
   277e6:	f242 0016 	movw	r0, #8214	; 0x2016
   277ea:	f7f0 fcc7 	bl	1817c <bt_hci_cmd_send_sync>
}
   277ee:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   277f0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   277f4:	e7fb      	b.n	277ee <hci_le_read_remote_features+0x2a>

000277f6 <bt_le_create_conn>:
{
   277f6:	b508      	push	{r3, lr}
	return bt_le_create_conn_legacy(conn);
   277f8:	f7f1 f83c 	bl	18874 <bt_le_create_conn_legacy>
}
   277fc:	bd08      	pop	{r3, pc}

000277fe <bt_hci_disconnect>:
{
   277fe:	b570      	push	{r4, r5, r6, lr}
   27800:	4605      	mov	r5, r0
   27802:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   27804:	2103      	movs	r1, #3
   27806:	f240 4006 	movw	r0, #1030	; 0x406
   2780a:	f7f0 fc79 	bl	18100 <bt_hci_cmd_create>
	if (!buf) {
   2780e:	b168      	cbz	r0, 2782c <bt_hci_disconnect+0x2e>
   27810:	4606      	mov	r6, r0
   27812:	2103      	movs	r1, #3
   27814:	300c      	adds	r0, #12
   27816:	f002 fb60 	bl	29eda <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   2781a:	8005      	strh	r5, [r0, #0]
	disconn->reason = reason;
   2781c:	7084      	strb	r4, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2781e:	2200      	movs	r2, #0
   27820:	4631      	mov	r1, r6
   27822:	f240 4006 	movw	r0, #1030	; 0x406
   27826:	f7f0 fca9 	bl	1817c <bt_hci_cmd_send_sync>
}
   2782a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   2782c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27830:	e7fb      	b.n	2782a <bt_hci_disconnect+0x2c>

00027832 <bt_le_set_data_len>:
{
   27832:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27834:	4606      	mov	r6, r0
   27836:	460f      	mov	r7, r1
   27838:	4614      	mov	r4, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2783a:	2106      	movs	r1, #6
   2783c:	f242 0022 	movw	r0, #8226	; 0x2022
   27840:	f7f0 fc5e 	bl	18100 <bt_hci_cmd_create>
	if (!buf) {
   27844:	b178      	cbz	r0, 27866 <bt_le_set_data_len+0x34>
   27846:	4605      	mov	r5, r0
   27848:	2106      	movs	r1, #6
   2784a:	300c      	adds	r0, #12
   2784c:	f002 fb45 	bl	29eda <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   27850:	8833      	ldrh	r3, [r6, #0]
   27852:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   27854:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   27856:	8084      	strh	r4, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   27858:	2200      	movs	r2, #0
   2785a:	4629      	mov	r1, r5
   2785c:	f242 0022 	movw	r0, #8226	; 0x2022
   27860:	f7f0 fc8c 	bl	1817c <bt_hci_cmd_send_sync>
}
   27864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   27866:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2786a:	e7fb      	b.n	27864 <bt_le_set_data_len+0x32>

0002786c <bt_le_set_phy>:
{
   2786c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27870:	4607      	mov	r7, r0
   27872:	460e      	mov	r6, r1
   27874:	4615      	mov	r5, r2
   27876:	461c      	mov	r4, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   27878:	2107      	movs	r1, #7
   2787a:	f242 0032 	movw	r0, #8242	; 0x2032
   2787e:	f7f0 fc3f 	bl	18100 <bt_hci_cmd_create>
	if (!buf) {
   27882:	b1a8      	cbz	r0, 278b0 <bt_le_set_phy+0x44>
   27884:	4680      	mov	r8, r0
   27886:	2107      	movs	r1, #7
   27888:	300c      	adds	r0, #12
   2788a:	f002 fb26 	bl	29eda <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2788e:	883b      	ldrh	r3, [r7, #0]
   27890:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   27892:	7086      	strb	r6, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   27894:	70c5      	strb	r5, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   27896:	7104      	strb	r4, [r0, #4]
	cp->phy_opts = phy_opts;
   27898:	f89d 3018 	ldrb.w	r3, [sp, #24]
   2789c:	f8a0 3005 	strh.w	r3, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   278a0:	2200      	movs	r2, #0
   278a2:	4641      	mov	r1, r8
   278a4:	f242 0032 	movw	r0, #8242	; 0x2032
   278a8:	f7f0 fc68 	bl	1817c <bt_hci_cmd_send_sync>
}
   278ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   278b0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   278b4:	e7fa      	b.n	278ac <bt_le_set_phy+0x40>

000278b6 <enh_conn_complete>:
{
   278b6:	b508      	push	{r3, lr}
	bt_hci_le_enh_conn_complete(evt);
   278b8:	f7f1 f9e4 	bl	18c84 <bt_hci_le_enh_conn_complete>
}
   278bc:	bd08      	pop	{r3, pc}

000278be <le_enh_conn_complete>:
{
   278be:	b508      	push	{r3, lr}
	enh_conn_complete((void *)buf->data);
   278c0:	68c0      	ldr	r0, [r0, #12]
   278c2:	f7ff fff8 	bl	278b6 <enh_conn_complete>
}
   278c6:	bd08      	pop	{r3, pc}

000278c8 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   278c8:	8802      	ldrh	r2, [r0, #0]
   278ca:	8843      	ldrh	r3, [r0, #2]
   278cc:	429a      	cmp	r2, r3
   278ce:	d817      	bhi.n	27900 <bt_le_conn_params_valid+0x38>
   278d0:	2a05      	cmp	r2, #5
   278d2:	d917      	bls.n	27904 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   278d4:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   278d8:	d816      	bhi.n	27908 <bt_le_conn_params_valid+0x40>
	if (param->latency > 499) {
   278da:	8881      	ldrh	r1, [r0, #4]
   278dc:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
   278e0:	d214      	bcs.n	2790c <bt_le_conn_params_valid+0x44>
	if (param->timeout < 10 || param->timeout > 3200 ||
   278e2:	88c0      	ldrh	r0, [r0, #6]
   278e4:	f1a0 020a 	sub.w	r2, r0, #10
   278e8:	b292      	uxth	r2, r2
   278ea:	f640 4c76 	movw	ip, #3190	; 0xc76
   278ee:	4562      	cmp	r2, ip
   278f0:	d80e      	bhi.n	27910 <bt_le_conn_params_valid+0x48>
	     ((1U + param->latency) * param->interval_max))) {
   278f2:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   278f6:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   278fa:	d20b      	bcs.n	27914 <bt_le_conn_params_valid+0x4c>
	return true;
   278fc:	2001      	movs	r0, #1
   278fe:	4770      	bx	lr
		return false;
   27900:	2000      	movs	r0, #0
   27902:	4770      	bx	lr
   27904:	2000      	movs	r0, #0
   27906:	4770      	bx	lr
   27908:	2000      	movs	r0, #0
   2790a:	4770      	bx	lr
		return false;
   2790c:	2000      	movs	r0, #0
   2790e:	4770      	bx	lr
		return false;
   27910:	2000      	movs	r0, #0
   27912:	4770      	bx	lr
   27914:	2000      	movs	r0, #0
}
   27916:	4770      	bx	lr

00027918 <le_conn_param_req_reply>:
{
   27918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2791a:	4606      	mov	r6, r0
   2791c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   2791e:	210e      	movs	r1, #14
   27920:	f242 0020 	movw	r0, #8224	; 0x2020
   27924:	f7f0 fbec 	bl	18100 <bt_hci_cmd_create>
	if (!buf) {
   27928:	b1c0      	cbz	r0, 2795c <le_conn_param_req_reply+0x44>
   2792a:	4607      	mov	r7, r0
   2792c:	210e      	movs	r1, #14
   2792e:	300c      	adds	r0, #12
   27930:	f002 fad3 	bl	29eda <net_buf_simple_add>
   27934:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   27936:	220e      	movs	r2, #14
   27938:	2100      	movs	r1, #0
   2793a:	f7ff fdf6 	bl	2752a <memset>
	cp->handle = sys_cpu_to_le16(handle);
   2793e:	8026      	strh	r6, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   27940:	882b      	ldrh	r3, [r5, #0]
   27942:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   27944:	886b      	ldrh	r3, [r5, #2]
   27946:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   27948:	88ab      	ldrh	r3, [r5, #4]
   2794a:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   2794c:	88eb      	ldrh	r3, [r5, #6]
   2794e:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   27950:	4639      	mov	r1, r7
   27952:	f242 0020 	movw	r0, #8224	; 0x2020
   27956:	f7f1 fb1f 	bl	18f98 <bt_hci_cmd_send>
}
   2795a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   2795c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27960:	e7fb      	b.n	2795a <le_conn_param_req_reply+0x42>

00027962 <bt_init>:
{
   27962:	b510      	push	{r4, lr}
	err = hci_init();
   27964:	f7f0 ff2e 	bl	187c4 <hci_init>
	if (err) {
   27968:	4604      	mov	r4, r0
   2796a:	b108      	cbz	r0, 27970 <bt_init+0xe>
}
   2796c:	4620      	mov	r0, r4
   2796e:	bd10      	pop	{r4, pc}
		err = bt_conn_init();
   27970:	f7f3 fe2a 	bl	1b5c8 <bt_conn_init>
		if (err) {
   27974:	4604      	mov	r4, r0
   27976:	2800      	cmp	r0, #0
   27978:	d1f8      	bne.n	2796c <bt_init+0xa>
	bt_finalize_init();
   2797a:	f7f1 fe5b 	bl	19634 <bt_finalize_init>
	return 0;
   2797e:	e7f5      	b.n	2796c <bt_init+0xa>

00027980 <bt_get_appearance>:
}
   27980:	2000      	movs	r0, #0
   27982:	4770      	bx	lr

00027984 <bt_addr_le_is_bonded>:
}
   27984:	2000      	movs	r0, #0
   27986:	4770      	bx	lr

00027988 <is_adv_using_rand_addr>:
}
   27988:	2000      	movs	r0, #0
   2798a:	4770      	bx	lr

0002798c <bt_lookup_id_addr>:
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   2798c:	b910      	cbnz	r0, 27994 <bt_lookup_id_addr+0x8>
   2798e:	b119      	cbz	r1, 27998 <bt_lookup_id_addr+0xc>
	return addr;
   27990:	4608      	mov	r0, r1
   27992:	4770      	bx	lr
		return NULL;
   27994:	2000      	movs	r0, #0
   27996:	4770      	bx	lr
   27998:	2000      	movs	r0, #0
}
   2799a:	4770      	bx	lr

0002799c <bt_id_set_private_addr>:
	CHECKIF(id >= CONFIG_BT_ID_MAX) {
   2799c:	b998      	cbnz	r0, 279c6 <bt_id_set_private_addr+0x2a>
{
   2799e:	b500      	push	{lr}
   279a0:	b083      	sub	sp, #12
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   279a2:	2106      	movs	r1, #6
   279a4:	4668      	mov	r0, sp
   279a6:	f7fa faeb 	bl	21f80 <bt_rand>
	if (err) {
   279aa:	b110      	cbz	r0, 279b2 <bt_id_set_private_addr+0x16>
}
   279ac:	b003      	add	sp, #12
   279ae:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ADDR_SET_NRPA(&nrpa);
   279b2:	f89d 3005 	ldrb.w	r3, [sp, #5]
   279b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   279ba:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   279be:	4668      	mov	r0, sp
   279c0:	f7f1 ffd2 	bl	19968 <set_random_address>
	if (err)  {
   279c4:	e7f2      	b.n	279ac <bt_id_set_private_addr+0x10>
		return -EINVAL;
   279c6:	f06f 0015 	mvn.w	r0, #21
}
   279ca:	4770      	bx	lr

000279cc <bt_id_scan_random_addr_check>:
}
   279cc:	2001      	movs	r0, #1
   279ce:	4770      	bx	lr

000279d0 <get_adv_props_legacy>:
	switch (evt_type) {
   279d0:	2804      	cmp	r0, #4
   279d2:	d80a      	bhi.n	279ea <get_adv_props_legacy+0x1a>
   279d4:	e8df f000 	tbb	[pc, r0]
   279d8:	050c0b03 	.word	0x050c0b03
   279dc:	07          	.byte	0x07
   279dd:	00          	.byte	0x00
   279de:	2003      	movs	r0, #3
   279e0:	4770      	bx	lr
		return 0;
   279e2:	2000      	movs	r0, #0
   279e4:	4770      	bx	lr
		return BT_GAP_ADV_PROP_SCAN_RESPONSE |
   279e6:	200a      	movs	r0, #10
   279e8:	4770      	bx	lr
		return 0;
   279ea:	2000      	movs	r0, #0
   279ec:	4770      	bx	lr
		return BT_GAP_ADV_PROP_CONNECTABLE |
   279ee:	2005      	movs	r0, #5
}
   279f0:	4770      	bx	lr

000279f2 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   279f2:	f001 0c1f 	and.w	ip, r1, #31
   279f6:	2301      	movs	r3, #1
   279f8:	fa03 f30c 	lsl.w	r3, r3, ip
	if (val) {
   279fc:	b172      	cbz	r2, 27a1c <atomic_set_bit_to+0x2a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   279fe:	0949      	lsrs	r1, r1, #5
   27a00:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   27a04:	f3bf 8f5b 	dmb	ish
   27a08:	e850 2f00 	ldrex	r2, [r0]
   27a0c:	431a      	orrs	r2, r3
   27a0e:	e840 2100 	strex	r1, r2, [r0]
   27a12:	2900      	cmp	r1, #0
   27a14:	d1f8      	bne.n	27a08 <atomic_set_bit_to+0x16>
   27a16:	f3bf 8f5b 	dmb	ish
   27a1a:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27a1c:	0949      	lsrs	r1, r1, #5
   27a1e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   27a22:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27a24:	f3bf 8f5b 	dmb	ish
   27a28:	e850 2f00 	ldrex	r2, [r0]
   27a2c:	401a      	ands	r2, r3
   27a2e:	e840 2100 	strex	r1, r2, [r0]
   27a32:	2900      	cmp	r1, #0
   27a34:	d1f8      	bne.n	27a28 <atomic_set_bit_to+0x36>
   27a36:	f3bf 8f5b 	dmb	ish
}
   27a3a:	4770      	bx	lr

00027a3c <bt_le_scan_set_enable>:
{
   27a3c:	b508      	push	{r3, lr}
	return bt_le_scan_set_enable_legacy(enable);
   27a3e:	f7f2 fab9 	bl	19fb4 <bt_le_scan_set_enable_legacy>
}
   27a42:	bd08      	pop	{r3, pc}

00027a44 <start_passive_scan>:
{
   27a44:	b508      	push	{r3, lr}
	if (fast_scan) {
   27a46:	b128      	cbz	r0, 27a54 <start_passive_scan+0x10>
		window = BT_GAP_SCAN_FAST_WINDOW;
   27a48:	2230      	movs	r2, #48	; 0x30
		interval = BT_GAP_SCAN_FAST_INTERVAL;
   27a4a:	2160      	movs	r1, #96	; 0x60
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   27a4c:	2000      	movs	r0, #0
   27a4e:	f7f2 faed 	bl	1a02c <start_le_scan_legacy>
}
   27a52:	bd08      	pop	{r3, pc}
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
   27a54:	2212      	movs	r2, #18
		interval = CONFIG_BT_BACKGROUND_SCAN_INTERVAL;
   27a56:	f44f 6100 	mov.w	r1, #2048	; 0x800
   27a5a:	e7f7      	b.n	27a4c <start_passive_scan+0x8>

00027a5c <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   27a5c:	460b      	mov	r3, r1
   27a5e:	b139      	cbz	r1, 27a70 <sys_slist_remove+0x14>
	return node->next;
   27a60:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   27a62:	6019      	str	r1, [r3, #0]
	return list->tail;
   27a64:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   27a66:	428a      	cmp	r2, r1
   27a68:	d009      	beq.n	27a7e <sys_slist_remove+0x22>
	parent->next = child;
   27a6a:	2300      	movs	r3, #0
   27a6c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   27a6e:	4770      	bx	lr
	return node->next;
   27a70:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   27a72:	6003      	str	r3, [r0, #0]
	return list->tail;
   27a74:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   27a76:	428a      	cmp	r2, r1
   27a78:	d1f7      	bne.n	27a6a <sys_slist_remove+0xe>
	list->tail = node;
   27a7a:	6043      	str	r3, [r0, #4]
}
   27a7c:	e7f5      	b.n	27a6a <sys_slist_remove+0xe>
	list->tail = node;
   27a7e:	6043      	str	r3, [r0, #4]
}
   27a80:	e7f3      	b.n	27a6a <sys_slist_remove+0xe>

00027a82 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27a82:	b508      	push	{r3, lr}
   27a84:	460a      	mov	r2, r1
	return list->head;
   27a86:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27a88:	2100      	movs	r1, #0
   27a8a:	e001      	b.n	27a90 <sys_slist_find_and_remove+0xe>
   27a8c:	4619      	mov	r1, r3
   27a8e:	681b      	ldr	r3, [r3, #0]
   27a90:	b12b      	cbz	r3, 27a9e <sys_slist_find_and_remove+0x1c>
   27a92:	4293      	cmp	r3, r2
   27a94:	d1fa      	bne.n	27a8c <sys_slist_find_and_remove+0xa>
   27a96:	f7ff ffe1 	bl	27a5c <sys_slist_remove>
   27a9a:	2001      	movs	r0, #1
   27a9c:	e000      	b.n	27aa0 <sys_slist_find_and_remove+0x1e>
   27a9e:	2000      	movs	r0, #0
   27aa0:	bd08      	pop	{r3, pc}

00027aa2 <bt_conn_set_param_le>:
	conn->le.interval_min = param->interval_min;
   27aa2:	880b      	ldrh	r3, [r1, #0]
   27aa4:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   27aa8:	884b      	ldrh	r3, [r1, #2]
   27aaa:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
   27aae:	888b      	ldrh	r3, [r1, #4]
   27ab0:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   27ab4:	88cb      	ldrh	r3, [r1, #6]
   27ab6:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
}
   27aba:	4770      	bx	lr

00027abc <tx_notify>:
{
   27abc:	b570      	push	{r4, r5, r6, lr}
   27abe:	4604      	mov	r4, r0
	LOG_DBG("conn %p", conn);
   27ac0:	e00c      	b.n	27adc <tx_notify+0x20>
   27ac2:	f383 8811 	msr	BASEPRI, r3
   27ac6:	f3bf 8f6f 	isb	sy
		if (!tx) {
   27aca:	b1c8      	cbz	r0, 27b00 <tx_notify+0x44>
		cb = tx->cb;
   27acc:	6845      	ldr	r5, [r0, #4]
		user_data = tx->user_data;
   27ace:	6886      	ldr	r6, [r0, #8]
		tx_free(tx);
   27ad0:	f7f2 fd20 	bl	1a514 <tx_free>
		cb(conn, user_data, 0);
   27ad4:	2200      	movs	r2, #0
   27ad6:	4631      	mov	r1, r6
   27ad8:	4620      	mov	r0, r4
   27ada:	47a8      	blx	r5
	__asm__ volatile(
   27adc:	f04f 0240 	mov.w	r2, #64	; 0x40
   27ae0:	f3ef 8311 	mrs	r3, BASEPRI
   27ae4:	f382 8812 	msr	BASEPRI_MAX, r2
   27ae8:	f3bf 8f6f 	isb	sy
	return list->head;
   27aec:	6a20      	ldr	r0, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   27aee:	2800      	cmp	r0, #0
   27af0:	d0e7      	beq.n	27ac2 <tx_notify+0x6>
	return node->next;
   27af2:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   27af4:	6222      	str	r2, [r4, #32]
	return list->tail;
   27af6:	6a61      	ldr	r1, [r4, #36]	; 0x24
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   27af8:	4281      	cmp	r1, r0
   27afa:	d1e2      	bne.n	27ac2 <tx_notify+0x6>
	list->tail = node;
   27afc:	6262      	str	r2, [r4, #36]	; 0x24
}
   27afe:	e7e0      	b.n	27ac2 <tx_notify+0x6>
}
   27b00:	bd70      	pop	{r4, r5, r6, pc}

00027b02 <tx_complete_work>:
{
   27b02:	b508      	push	{r3, lr}
	tx_notify(conn);
   27b04:	3828      	subs	r0, #40	; 0x28
   27b06:	f7ff ffd9 	bl	27abc <tx_notify>
}
   27b0a:	bd08      	pop	{r3, pc}

00027b0c <conn_tx_destroy>:
{
   27b0c:	b570      	push	{r4, r5, r6, lr}
   27b0e:	4604      	mov	r4, r0
   27b10:	4608      	mov	r0, r1
	bt_conn_tx_cb_t cb = tx->cb;
   27b12:	684d      	ldr	r5, [r1, #4]
	void *user_data = tx->user_data;
   27b14:	688e      	ldr	r6, [r1, #8]
	tx_free(tx);
   27b16:	f7f2 fcfd 	bl	1a514 <tx_free>
	cb(conn, user_data, -ESHUTDOWN);
   27b1a:	f06f 026d 	mvn.w	r2, #109	; 0x6d
   27b1e:	4631      	mov	r1, r6
   27b20:	4620      	mov	r0, r4
   27b22:	47a8      	blx	r5
}
   27b24:	bd70      	pop	{r4, r5, r6, pc}

00027b26 <atomic_test_and_clear_bit>:
{
   27b26:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   27b28:	f001 021f 	and.w	r2, r1, #31
   27b2c:	2301      	movs	r3, #1
   27b2e:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27b30:	0949      	lsrs	r1, r1, #5
   27b32:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   27b36:	43d9      	mvns	r1, r3
   27b38:	f3bf 8f5b 	dmb	ish
   27b3c:	e850 2f00 	ldrex	r2, [r0]
   27b40:	ea02 0c01 	and.w	ip, r2, r1
   27b44:	e840 ce00 	strex	lr, ip, [r0]
   27b48:	f1be 0f00 	cmp.w	lr, #0
   27b4c:	d1f6      	bne.n	27b3c <atomic_test_and_clear_bit+0x16>
   27b4e:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   27b52:	4213      	tst	r3, r2
}
   27b54:	bf14      	ite	ne
   27b56:	2001      	movne	r0, #1
   27b58:	2000      	moveq	r0, #0
   27b5a:	f85d fb04 	ldr.w	pc, [sp], #4

00027b5e <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   27b5e:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27b60:	f3bf 8f5b 	dmb	ish
   27b64:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   27b68:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   27b6c:	f001 011f 	and.w	r1, r1, #31
   27b70:	4108      	asrs	r0, r1
}
   27b72:	f000 0001 	and.w	r0, r0, #1
   27b76:	4770      	bx	lr

00027b78 <send_acl>:
{
   27b78:	b570      	push	{r4, r5, r6, lr}
   27b7a:	4605      	mov	r5, r0
   27b7c:	460c      	mov	r4, r1
	switch (flags) {
   27b7e:	2a03      	cmp	r2, #3
   27b80:	d818      	bhi.n	27bb4 <send_acl+0x3c>
   27b82:	e8df f002 	tbb	[pc, r2]
   27b86:	1502      	.short	0x1502
   27b88:	1502      	.short	0x1502
   27b8a:	2600      	movs	r6, #0
	return net_buf_simple_push(&buf->b, len);
   27b8c:	2104      	movs	r1, #4
   27b8e:	f104 000c 	add.w	r0, r4, #12
   27b92:	f002 f9bc 	bl	29f0e <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   27b96:	882b      	ldrh	r3, [r5, #0]
   27b98:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
   27b9c:	8003      	strh	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   27b9e:	8a23      	ldrh	r3, [r4, #16]
   27ba0:	3b04      	subs	r3, #4
   27ba2:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   27ba4:	2302      	movs	r3, #2
   27ba6:	7623      	strb	r3, [r4, #24]
	return bt_send(buf);
   27ba8:	4620      	mov	r0, r4
   27baa:	f7f1 f9eb 	bl	18f84 <bt_send>
}
   27bae:	bd70      	pop	{r4, r5, r6, pc}
		flags = BT_ACL_CONT;
   27bb0:	2601      	movs	r6, #1
   27bb2:	e7eb      	b.n	27b8c <send_acl+0x14>
	switch (flags) {
   27bb4:	f06f 0015 	mvn.w	r0, #21
   27bb8:	e7f9      	b.n	27bae <send_acl+0x36>

00027bba <process_unack_tx>:
{
   27bba:	b510      	push	{r4, lr}
   27bbc:	4604      	mov	r4, r0
   27bbe:	e028      	b.n	27c12 <process_unack_tx+0x58>
			conn->pending_no_cb--;
   27bc0:	3a01      	subs	r2, #1
   27bc2:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   27bc4:	f383 8811 	msr	BASEPRI, r3
   27bc8:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   27bcc:	4620      	mov	r0, r4
   27bce:	f7f2 fcc5 	bl	1a55c <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   27bd2:	f7fc fa21 	bl	24018 <z_impl_k_sem_give>
			continue;
   27bd6:	e01c      	b.n	27c12 <process_unack_tx+0x58>
   27bd8:	f383 8811 	msr	BASEPRI, r3
   27bdc:	f3bf 8f6f 	isb	sy
		if (!node) {
   27be0:	b361      	cbz	r1, 27c3c <process_unack_tx+0x82>
	__asm__ volatile(
   27be2:	f04f 0240 	mov.w	r2, #64	; 0x40
   27be6:	f3ef 8311 	mrs	r3, BASEPRI
   27bea:	f382 8812 	msr	BASEPRI_MAX, r2
   27bee:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   27bf2:	68ca      	ldr	r2, [r1, #12]
   27bf4:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   27bf6:	2200      	movs	r2, #0
   27bf8:	60ca      	str	r2, [r1, #12]
	__asm__ volatile(
   27bfa:	f383 8811 	msr	BASEPRI, r3
   27bfe:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   27c02:	4620      	mov	r0, r4
   27c04:	f7ff ff82 	bl	27b0c <conn_tx_destroy>
		k_sem_give(bt_conn_get_pkts(conn));
   27c08:	4620      	mov	r0, r4
   27c0a:	f7f2 fca7 	bl	1a55c <bt_conn_get_pkts>
   27c0e:	f7fc fa03 	bl	24018 <z_impl_k_sem_give>
	__asm__ volatile(
   27c12:	f04f 0240 	mov.w	r2, #64	; 0x40
   27c16:	f3ef 8311 	mrs	r3, BASEPRI
   27c1a:	f382 8812 	msr	BASEPRI_MAX, r2
   27c1e:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   27c22:	69e2      	ldr	r2, [r4, #28]
   27c24:	2a00      	cmp	r2, #0
   27c26:	d1cb      	bne.n	27bc0 <process_unack_tx+0x6>
	return list->head;
   27c28:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   27c2a:	2900      	cmp	r1, #0
   27c2c:	d0d4      	beq.n	27bd8 <process_unack_tx+0x1e>
	return node->next;
   27c2e:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   27c30:	6162      	str	r2, [r4, #20]
	return list->tail;
   27c32:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   27c34:	4281      	cmp	r1, r0
   27c36:	d1cf      	bne.n	27bd8 <process_unack_tx+0x1e>
	list->tail = node;
   27c38:	61a2      	str	r2, [r4, #24]
}
   27c3a:	e7cd      	b.n	27bd8 <process_unack_tx+0x1e>
}
   27c3c:	bd10      	pop	{r4, pc}

00027c3e <bt_conn_reset_rx_state>:
{
   27c3e:	b510      	push	{r4, lr}
   27c40:	4604      	mov	r4, r0
	if (!conn->rx) {
   27c42:	6900      	ldr	r0, [r0, #16]
   27c44:	b118      	cbz	r0, 27c4e <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   27c46:	f002 f901 	bl	29e4c <net_buf_unref>
	conn->rx = NULL;
   27c4a:	2300      	movs	r3, #0
   27c4c:	6123      	str	r3, [r4, #16]
}
   27c4e:	bd10      	pop	{r4, pc}

00027c50 <conn_cleanup>:
{
   27c50:	b538      	push	{r3, r4, r5, lr}
   27c52:	4605      	mov	r5, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   27c54:	2200      	movs	r2, #0
   27c56:	2300      	movs	r3, #0
   27c58:	f105 0038 	add.w	r0, r5, #56	; 0x38
   27c5c:	f002 f8b6 	bl	29dcc <net_buf_get>
   27c60:	4603      	mov	r3, r0
   27c62:	b160      	cbz	r0, 27c7e <conn_cleanup+0x2e>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   27c64:	699c      	ldr	r4, [r3, #24]
		tx_data(buf)->tx = NULL;
   27c66:	2200      	movs	r2, #0
   27c68:	619a      	str	r2, [r3, #24]
		net_buf_unref(buf);
   27c6a:	4618      	mov	r0, r3
   27c6c:	f002 f8ee 	bl	29e4c <net_buf_unref>
		if (tx) {
   27c70:	2c00      	cmp	r4, #0
   27c72:	d0ef      	beq.n	27c54 <conn_cleanup+0x4>
			conn_tx_destroy(conn, tx);
   27c74:	4621      	mov	r1, r4
   27c76:	4628      	mov	r0, r5
   27c78:	f7ff ff48 	bl	27b0c <conn_tx_destroy>
   27c7c:	e7ea      	b.n	27c54 <conn_cleanup+0x4>
	bt_conn_reset_rx_state(conn);
   27c7e:	4628      	mov	r0, r5
   27c80:	f7ff ffdd 	bl	27c3e <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   27c84:	2200      	movs	r2, #0
   27c86:	2300      	movs	r3, #0
   27c88:	f105 0058 	add.w	r0, r5, #88	; 0x58
   27c8c:	f7fc fb94 	bl	243b8 <k_work_reschedule>
}
   27c90:	bd38      	pop	{r3, r4, r5, pc}

00027c92 <conn_prepare_events>:
{
   27c92:	b538      	push	{r3, r4, r5, lr}
   27c94:	f3bf 8f5b 	dmb	ish
   27c98:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   27c9c:	f3bf 8f5b 	dmb	ish
	if (!atomic_get(&conn->ref)) {
   27ca0:	b1eb      	cbz	r3, 27cde <conn_prepare_events+0x4c>
   27ca2:	4604      	mov	r4, r0
   27ca4:	460d      	mov	r5, r1
	if (conn->state == BT_CONN_DISCONNECTED &&
   27ca6:	7a83      	ldrb	r3, [r0, #10]
   27ca8:	b16b      	cbz	r3, 27cc6 <conn_prepare_events+0x34>
	if (conn->state != BT_CONN_CONNECTED) {
   27caa:	7aa3      	ldrb	r3, [r4, #10]
   27cac:	2b07      	cmp	r3, #7
   27cae:	d119      	bne.n	27ce4 <conn_prepare_events+0x52>
	k_poll_event_init(&events[0],
   27cb0:	f104 0338 	add.w	r3, r4, #56	; 0x38
   27cb4:	2200      	movs	r2, #0
   27cb6:	2104      	movs	r1, #4
   27cb8:	4628      	mov	r0, r5
   27cba:	f004 ffbe 	bl	2cc3a <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   27cbe:	2301      	movs	r3, #1
   27cc0:	732b      	strb	r3, [r5, #12]
	return 0;
   27cc2:	2000      	movs	r0, #0
}
   27cc4:	bd38      	pop	{r3, r4, r5, pc}
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   27cc6:	2106      	movs	r1, #6
   27cc8:	3004      	adds	r0, #4
   27cca:	f7ff ff2c 	bl	27b26 <atomic_test_and_clear_bit>
	if (conn->state == BT_CONN_DISCONNECTED &&
   27cce:	2800      	cmp	r0, #0
   27cd0:	d0eb      	beq.n	27caa <conn_prepare_events+0x18>
		conn_cleanup(conn);
   27cd2:	4620      	mov	r0, r4
   27cd4:	f7ff ffbc 	bl	27c50 <conn_cleanup>
		return -ENOTCONN;
   27cd8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   27cdc:	e7f2      	b.n	27cc4 <conn_prepare_events+0x32>
		return -ENOTCONN;
   27cde:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   27ce2:	e7ef      	b.n	27cc4 <conn_prepare_events+0x32>
		return -ENOTCONN;
   27ce4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   27ce8:	e7ec      	b.n	27cc4 <conn_prepare_events+0x32>

00027cea <bt_conn_recv>:
{
   27cea:	b570      	push	{r4, r5, r6, lr}
   27cec:	4604      	mov	r4, r0
   27cee:	460d      	mov	r5, r1
   27cf0:	4616      	mov	r6, r2
	tx_notify(conn);
   27cf2:	f7ff fee3 	bl	27abc <tx_notify>
		bt_acl_recv(conn, buf, flags);
   27cf6:	4632      	mov	r2, r6
   27cf8:	4629      	mov	r1, r5
   27cfa:	4620      	mov	r0, r4
   27cfc:	f7f2 fd2c 	bl	1a758 <bt_acl_recv>
}
   27d00:	bd70      	pop	{r4, r5, r6, pc}

00027d02 <bt_conn_ref>:
   27d02:	f3bf 8f5b 	dmb	ish
   27d06:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   27d0a:	f3bf 8f5b 	dmb	ish
		if (!old) {
   27d0e:	b1eb      	cbz	r3, 27d4c <bt_conn_ref+0x4a>
{
   27d10:	b500      	push	{lr}
   27d12:	e006      	b.n	27d22 <bt_conn_ref+0x20>
   27d14:	f3bf 8f5b 	dmb	ish
   27d18:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   27d1c:	f3bf 8f5b 	dmb	ish
		if (!old) {
   27d20:	b193      	cbz	r3, 27d48 <bt_conn_ref+0x46>
   27d22:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	} while (!atomic_cas(&conn->ref, old, old + 1));
   27d26:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   27d28:	f3bf 8f5b 	dmb	ish
   27d2c:	e852 cf00 	ldrex	ip, [r2]
   27d30:	459c      	cmp	ip, r3
   27d32:	d104      	bne.n	27d3e <bt_conn_ref+0x3c>
   27d34:	e842 1e00 	strex	lr, r1, [r2]
   27d38:	f1be 0f00 	cmp.w	lr, #0
   27d3c:	d1f6      	bne.n	27d2c <bt_conn_ref+0x2a>
   27d3e:	f3bf 8f5b 	dmb	ish
   27d42:	d1e7      	bne.n	27d14 <bt_conn_ref+0x12>
}
   27d44:	f85d fb04 	ldr.w	pc, [sp], #4
			return NULL;
   27d48:	2000      	movs	r0, #0
   27d4a:	e7fb      	b.n	27d44 <bt_conn_ref+0x42>
   27d4c:	2000      	movs	r0, #0
}
   27d4e:	4770      	bx	lr

00027d50 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   27d50:	30b8      	adds	r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   27d52:	f3bf 8f5b 	dmb	ish
   27d56:	e850 3f00 	ldrex	r3, [r0]
   27d5a:	3b01      	subs	r3, #1
   27d5c:	e840 3200 	strex	r2, r3, [r0]
   27d60:	2a00      	cmp	r2, #0
   27d62:	d1f8      	bne.n	27d56 <bt_conn_unref+0x6>
   27d64:	f3bf 8f5b 	dmb	ish
}
   27d68:	4770      	bx	lr

00027d6a <conn_lookup_handle>:
{
   27d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27d6c:	4606      	mov	r6, r0
   27d6e:	460d      	mov	r5, r1
   27d70:	4617      	mov	r7, r2
	for (i = 0; i < size; i++) {
   27d72:	2400      	movs	r4, #0
   27d74:	e003      	b.n	27d7e <conn_lookup_handle+0x14>
			bt_conn_unref(conn);
   27d76:	4660      	mov	r0, ip
   27d78:	f7ff ffea 	bl	27d50 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   27d7c:	3401      	adds	r4, #1
   27d7e:	42ac      	cmp	r4, r5
   27d80:	d21c      	bcs.n	27dbc <conn_lookup_handle+0x52>
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   27d82:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   27d86:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   27d8a:	f7ff ffba 	bl	27d02 <bt_conn_ref>
		if (!conn) {
   27d8e:	4684      	mov	ip, r0
   27d90:	2800      	cmp	r0, #0
   27d92:	d0f3      	beq.n	27d7c <conn_lookup_handle+0x12>
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   27d94:	7a83      	ldrb	r3, [r0, #10]
   27d96:	2b01      	cmp	r3, #1
   27d98:	d006      	beq.n	27da8 <conn_lookup_handle+0x3e>
   27d9a:	b25a      	sxtb	r2, r3
   27d9c:	2a00      	cmp	r2, #0
   27d9e:	d0ea      	beq.n	27d76 <conn_lookup_handle+0xc>
   27da0:	3b07      	subs	r3, #7
   27da2:	b2db      	uxtb	r3, r3
   27da4:	2b01      	cmp	r3, #1
   27da6:	d8e6      	bhi.n	27d76 <conn_lookup_handle+0xc>
		if (conn->handle != handle) {
   27da8:	f8bc 3000 	ldrh.w	r3, [ip]
   27dac:	42bb      	cmp	r3, r7
   27dae:	d101      	bne.n	27db4 <conn_lookup_handle+0x4a>
}
   27db0:	4660      	mov	r0, ip
   27db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   27db4:	4660      	mov	r0, ip
   27db6:	f7ff ffcb 	bl	27d50 <bt_conn_unref>
			continue;
   27dba:	e7df      	b.n	27d7c <conn_lookup_handle+0x12>
	return NULL;
   27dbc:	f04f 0c00 	mov.w	ip, #0
   27dc0:	e7f6      	b.n	27db0 <conn_lookup_handle+0x46>

00027dc2 <bt_conn_connected>:
{
   27dc2:	b510      	push	{r4, lr}
   27dc4:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   27dc6:	f7f3 fd13 	bl	1b7f0 <bt_l2cap_connected>
	notify_connected(conn);
   27dca:	4620      	mov	r0, r4
   27dcc:	f7f2 fb42 	bl	1a454 <notify_connected>
}
   27dd0:	bd10      	pop	{r4, pc}

00027dd2 <bt_conn_get_security>:
}
   27dd2:	2001      	movs	r0, #1
   27dd4:	4770      	bx	lr

00027dd6 <bt_conn_add_le>:
{
   27dd6:	b570      	push	{r4, r5, r6, lr}
   27dd8:	4606      	mov	r6, r0
   27dda:	460d      	mov	r5, r1
	struct bt_conn *conn = acl_conn_new();
   27ddc:	f7f2 fcb4 	bl	1a748 <acl_conn_new>
	if (!conn) {
   27de0:	4604      	mov	r4, r0
   27de2:	b168      	cbz	r0, 27e00 <bt_conn_add_le+0x2a>
	conn->id = id;
   27de4:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   27de6:	2207      	movs	r2, #7
   27de8:	4629      	mov	r1, r5
   27dea:	3088      	adds	r0, #136	; 0x88
   27dec:	f7ff fb6e 	bl	274cc <memcpy>
	conn->type = BT_CONN_TYPE_LE;
   27df0:	2301      	movs	r3, #1
   27df2:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   27df4:	2318      	movs	r3, #24
   27df6:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
   27dfa:	2328      	movs	r3, #40	; 0x28
   27dfc:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
}
   27e00:	4620      	mov	r0, r4
   27e02:	bd70      	pop	{r4, r5, r6, pc}

00027e04 <bt_conn_is_peer_addr_le>:
{
   27e04:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   27e06:	7a03      	ldrb	r3, [r0, #8]
   27e08:	428b      	cmp	r3, r1
   27e0a:	d001      	beq.n	27e10 <bt_conn_is_peer_addr_le+0xc>
		return false;
   27e0c:	2000      	movs	r0, #0
}
   27e0e:	bd38      	pop	{r3, r4, r5, pc}
   27e10:	4604      	mov	r4, r0
   27e12:	4615      	mov	r5, r2
	return memcmp(a, b, sizeof(*a));
   27e14:	2207      	movs	r2, #7
   27e16:	f100 0188 	add.w	r1, r0, #136	; 0x88
   27e1a:	4628      	mov	r0, r5
   27e1c:	f7ff fb44 	bl	274a8 <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   27e20:	b1a8      	cbz	r0, 27e4e <bt_conn_is_peer_addr_le+0x4a>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   27e22:	78e3      	ldrb	r3, [r4, #3]
   27e24:	b14b      	cbz	r3, 27e3a <bt_conn_is_peer_addr_le+0x36>
   27e26:	2207      	movs	r2, #7
   27e28:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   27e2c:	4628      	mov	r0, r5
   27e2e:	f7ff fb3b 	bl	274a8 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   27e32:	fab0 f080 	clz	r0, r0
   27e36:	0940      	lsrs	r0, r0, #5
	return bt_addr_le_eq(peer, &conn->le.init_addr);
   27e38:	e7e9      	b.n	27e0e <bt_conn_is_peer_addr_le+0xa>
	return memcmp(a, b, sizeof(*a));
   27e3a:	2207      	movs	r2, #7
   27e3c:	f104 0196 	add.w	r1, r4, #150	; 0x96
   27e40:	4628      	mov	r0, r5
   27e42:	f7ff fb31 	bl	274a8 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   27e46:	fab0 f080 	clz	r0, r0
   27e4a:	0940      	lsrs	r0, r0, #5
		return bt_addr_le_eq(peer, &conn->le.resp_addr);
   27e4c:	e7df      	b.n	27e0e <bt_conn_is_peer_addr_le+0xa>
		return true;
   27e4e:	2001      	movs	r0, #1
   27e50:	e7dd      	b.n	27e0e <bt_conn_is_peer_addr_le+0xa>

00027e52 <bt_conn_get_dst>:
}
   27e52:	3088      	adds	r0, #136	; 0x88
   27e54:	4770      	bx	lr

00027e56 <bt_conn_le_conn_update>:
{
   27e56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27e58:	4606      	mov	r6, r0
   27e5a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   27e5c:	210e      	movs	r1, #14
   27e5e:	f242 0013 	movw	r0, #8211	; 0x2013
   27e62:	f7f0 f94d 	bl	18100 <bt_hci_cmd_create>
	if (!buf) {
   27e66:	b1d0      	cbz	r0, 27e9e <bt_conn_le_conn_update+0x48>
   27e68:	4607      	mov	r7, r0
	return net_buf_simple_add(&buf->b, len);
   27e6a:	210e      	movs	r1, #14
   27e6c:	300c      	adds	r0, #12
   27e6e:	f002 f834 	bl	29eda <net_buf_simple_add>
   27e72:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   27e74:	220e      	movs	r2, #14
   27e76:	2100      	movs	r1, #0
   27e78:	f7ff fb57 	bl	2752a <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   27e7c:	8833      	ldrh	r3, [r6, #0]
   27e7e:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   27e80:	882b      	ldrh	r3, [r5, #0]
   27e82:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   27e84:	886b      	ldrh	r3, [r5, #2]
   27e86:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   27e88:	88ab      	ldrh	r3, [r5, #4]
   27e8a:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   27e8c:	88eb      	ldrh	r3, [r5, #6]
   27e8e:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   27e90:	2200      	movs	r2, #0
   27e92:	4639      	mov	r1, r7
   27e94:	f242 0013 	movw	r0, #8211	; 0x2013
   27e98:	f7f0 f970 	bl	1817c <bt_hci_cmd_send_sync>
}
   27e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   27e9e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27ea2:	e7fb      	b.n	27e9c <bt_conn_le_conn_update+0x46>

00027ea4 <l2cap_connected>:
}
   27ea4:	4770      	bx	lr

00027ea6 <l2cap_disconnected>:
}
   27ea6:	4770      	bx	lr

00027ea8 <l2cap_chan_recv>:
{
   27ea8:	b510      	push	{r4, lr}
   27eaa:	460c      	mov	r4, r1
	chan->ops->recv(chan, buf);
   27eac:	6843      	ldr	r3, [r0, #4]
   27eae:	695b      	ldr	r3, [r3, #20]
   27eb0:	4798      	blx	r3
	net_buf_unref(buf);
   27eb2:	4620      	mov	r0, r4
   27eb4:	f001 ffca 	bl	29e4c <net_buf_unref>
}
   27eb8:	bd10      	pop	{r4, pc}

00027eba <bt_l2cap_chan_del>:
{
   27eba:	b538      	push	{r3, r4, r5, lr}
   27ebc:	4604      	mov	r4, r0
	const struct bt_l2cap_chan_ops *ops = chan->ops;
   27ebe:	6845      	ldr	r5, [r0, #4]
	if (!chan->conn) {
   27ec0:	6803      	ldr	r3, [r0, #0]
   27ec2:	b123      	cbz	r3, 27ece <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   27ec4:	686b      	ldr	r3, [r5, #4]
   27ec6:	b103      	cbz	r3, 27eca <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   27ec8:	4798      	blx	r3
	chan->conn = NULL;
   27eca:	2300      	movs	r3, #0
   27ecc:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   27ece:	68e3      	ldr	r3, [r4, #12]
   27ed0:	b10b      	cbz	r3, 27ed6 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   27ed2:	4620      	mov	r0, r4
   27ed4:	4798      	blx	r3
	if (ops->released) {
   27ed6:	6a2b      	ldr	r3, [r5, #32]
   27ed8:	b10b      	cbz	r3, 27ede <bt_l2cap_chan_del+0x24>
		ops->released(chan);
   27eda:	4620      	mov	r0, r4
   27edc:	4798      	blx	r3
}
   27ede:	bd38      	pop	{r3, r4, r5, pc}

00027ee0 <bt_l2cap_chan_add>:
{
   27ee0:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
   27ee2:	f101 0308 	add.w	r3, r1, #8
	parent->next = child;
   27ee6:	2400      	movs	r4, #0
   27ee8:	608c      	str	r4, [r1, #8]
	return list->tail;
   27eea:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_APPEND(slist, snode)
   27eec:	b12c      	cbz	r4, 27efa <bt_l2cap_chan_add+0x1a>
	parent->next = child;
   27eee:	6023      	str	r3, [r4, #0]
	list->tail = node;
   27ef0:	6543      	str	r3, [r0, #84]	; 0x54
	chan->conn = conn;
   27ef2:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
   27ef4:	60ca      	str	r2, [r1, #12]
}
   27ef6:	bc10      	pop	{r4}
   27ef8:	4770      	bx	lr
   27efa:	6543      	str	r3, [r0, #84]	; 0x54
	list->head = node;
   27efc:	6503      	str	r3, [r0, #80]	; 0x50
}
   27efe:	e7f8      	b.n	27ef2 <bt_l2cap_chan_add+0x12>

00027f00 <bt_l2cap_disconnected>:
{
   27f00:	b510      	push	{r4, lr}
	return list->head;
   27f02:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   27f04:	b138      	cbz	r0, 27f16 <bt_l2cap_disconnected+0x16>
   27f06:	3808      	subs	r0, #8
Z_GENLIST_PEEK_NEXT(slist, snode)
   27f08:	f110 0408 	adds.w	r4, r0, #8
   27f0c:	d008      	beq.n	27f20 <bt_l2cap_disconnected+0x20>
	return node->next;
   27f0e:	6884      	ldr	r4, [r0, #8]
   27f10:	b134      	cbz	r4, 27f20 <bt_l2cap_disconnected+0x20>
   27f12:	3c08      	subs	r4, #8
   27f14:	e004      	b.n	27f20 <bt_l2cap_disconnected+0x20>
   27f16:	4604      	mov	r4, r0
   27f18:	e002      	b.n	27f20 <bt_l2cap_disconnected+0x20>
   27f1a:	4623      	mov	r3, r4
   27f1c:	4620      	mov	r0, r4
   27f1e:	461c      	mov	r4, r3
   27f20:	b140      	cbz	r0, 27f34 <bt_l2cap_disconnected+0x34>
		bt_l2cap_chan_del(chan);
   27f22:	f7ff ffca 	bl	27eba <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   27f26:	2c00      	cmp	r4, #0
   27f28:	d0f7      	beq.n	27f1a <bt_l2cap_disconnected+0x1a>
   27f2a:	68a3      	ldr	r3, [r4, #8]
   27f2c:	2b00      	cmp	r3, #0
   27f2e:	d0f5      	beq.n	27f1c <bt_l2cap_disconnected+0x1c>
   27f30:	3b08      	subs	r3, #8
   27f32:	e7f3      	b.n	27f1c <bt_l2cap_disconnected+0x1c>
}
   27f34:	bd10      	pop	{r4, pc}

00027f36 <bt_l2cap_create_pdu_timeout>:
{
   27f36:	b508      	push	{r3, lr}
	return bt_conn_create_pdu_timeout(pool,
   27f38:	3104      	adds	r1, #4
   27f3a:	f7f2 fff5 	bl	1af28 <bt_conn_create_pdu_timeout>
}
   27f3e:	bd08      	pop	{r3, pc}

00027f40 <bt_l2cap_send_cb>:
{
   27f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27f42:	4605      	mov	r5, r0
   27f44:	460f      	mov	r7, r1
   27f46:	4614      	mov	r4, r2
   27f48:	461e      	mov	r6, r3
	return net_buf_simple_push(&buf->b, len);
   27f4a:	2104      	movs	r1, #4
   27f4c:	f102 000c 	add.w	r0, r2, #12
   27f50:	f001 ffdd 	bl	29f0e <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   27f54:	8a23      	ldrh	r3, [r4, #16]
   27f56:	3b04      	subs	r3, #4
   27f58:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   27f5a:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   27f5c:	9b06      	ldr	r3, [sp, #24]
   27f5e:	4632      	mov	r2, r6
   27f60:	4621      	mov	r1, r4
   27f62:	4628      	mov	r0, r5
   27f64:	f7f2 fd52 	bl	1aa0c <bt_conn_send_cb>
}
   27f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027f6a <l2cap_send>:
{
   27f6a:	b510      	push	{r4, lr}
   27f6c:	b082      	sub	sp, #8
   27f6e:	4614      	mov	r4, r2
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   27f70:	2300      	movs	r3, #0
   27f72:	9300      	str	r3, [sp, #0]
   27f74:	f7ff ffe4 	bl	27f40 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   27f78:	b908      	cbnz	r0, 27f7e <l2cap_send+0x14>
}
   27f7a:	b002      	add	sp, #8
   27f7c:	bd10      	pop	{r4, pc}
		net_buf_unref(buf);
   27f7e:	4620      	mov	r0, r4
   27f80:	f001 ff64 	bl	29e4c <net_buf_unref>
}
   27f84:	e7f9      	b.n	27f7a <l2cap_send+0x10>

00027f86 <l2cap_send_reject>:
{
   27f86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27f8a:	4606      	mov	r6, r0
   27f8c:	4690      	mov	r8, r2
   27f8e:	461c      	mov	r4, r3
   27f90:	f89d 7020 	ldrb.w	r7, [sp, #32]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   27f94:	1cbb      	adds	r3, r7, #2
   27f96:	460a      	mov	r2, r1
   27f98:	2101      	movs	r1, #1
   27f9a:	2000      	movs	r0, #0
   27f9c:	f7f3 fc62 	bl	1b864 <l2cap_create_le_sig_pdu>
	if (!buf) {
   27fa0:	b198      	cbz	r0, 27fca <l2cap_send_reject+0x44>
   27fa2:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   27fa4:	f100 090c 	add.w	r9, r0, #12
   27fa8:	2102      	movs	r1, #2
   27faa:	4648      	mov	r0, r9
   27fac:	f001 ff95 	bl	29eda <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   27fb0:	f8a0 8000 	strh.w	r8, [r0]
	if (data) {
   27fb4:	b124      	cbz	r4, 27fc0 <l2cap_send_reject+0x3a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   27fb6:	463a      	mov	r2, r7
   27fb8:	4621      	mov	r1, r4
   27fba:	4648      	mov	r0, r9
   27fbc:	f001 ff93 	bl	29ee6 <net_buf_simple_add_mem>
	l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
   27fc0:	462a      	mov	r2, r5
   27fc2:	2105      	movs	r1, #5
   27fc4:	4630      	mov	r0, r6
   27fc6:	f7ff ffd0 	bl	27f6a <l2cap_send>
}
   27fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00027fce <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   27fce:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27fd0:	b110      	cbz	r0, 27fd8 <bt_l2cap_le_lookup_rx_cid+0xa>
   27fd2:	3808      	subs	r0, #8
   27fd4:	e000      	b.n	27fd8 <bt_l2cap_le_lookup_rx_cid+0xa>
   27fd6:	4618      	mov	r0, r3
   27fd8:	b150      	cbz	r0, 27ff0 <bt_l2cap_le_lookup_rx_cid+0x22>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   27fda:	8a83      	ldrh	r3, [r0, #20]
   27fdc:	428b      	cmp	r3, r1
   27fde:	d007      	beq.n	27ff0 <bt_l2cap_le_lookup_rx_cid+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   27fe0:	f110 0308 	adds.w	r3, r0, #8
   27fe4:	d0f7      	beq.n	27fd6 <bt_l2cap_le_lookup_rx_cid+0x8>
	return node->next;
   27fe6:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27fe8:	2800      	cmp	r0, #0
   27fea:	d0f5      	beq.n	27fd8 <bt_l2cap_le_lookup_rx_cid+0xa>
   27fec:	3808      	subs	r0, #8
   27fee:	e7f3      	b.n	27fd8 <bt_l2cap_le_lookup_rx_cid+0xa>
}
   27ff0:	4770      	bx	lr

00027ff2 <bt_l2cap_update_conn_param>:
{
   27ff2:	b570      	push	{r4, r5, r6, lr}
   27ff4:	b082      	sub	sp, #8
   27ff6:	4605      	mov	r5, r0
   27ff8:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   27ffa:	f7f3 fb15 	bl	1b628 <get_ident>
   27ffe:	4602      	mov	r2, r0
   28000:	2308      	movs	r3, #8
   28002:	2112      	movs	r1, #18
   28004:	2000      	movs	r0, #0
   28006:	f7f3 fc2d 	bl	1b864 <l2cap_create_le_sig_pdu>
	if (!buf) {
   2800a:	b1e0      	cbz	r0, 28046 <bt_l2cap_update_conn_param+0x54>
   2800c:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   2800e:	2108      	movs	r1, #8
   28010:	300c      	adds	r0, #12
   28012:	f001 ff62 	bl	29eda <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   28016:	8823      	ldrh	r3, [r4, #0]
   28018:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   2801a:	8863      	ldrh	r3, [r4, #2]
   2801c:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   2801e:	88a3      	ldrh	r3, [r4, #4]
   28020:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   28022:	88e3      	ldrh	r3, [r4, #6]
   28024:	80c3      	strh	r3, [r0, #6]
   28026:	2300      	movs	r3, #0
   28028:	9300      	str	r3, [sp, #0]
   2802a:	4632      	mov	r2, r6
   2802c:	2105      	movs	r1, #5
   2802e:	4628      	mov	r0, r5
   28030:	f7ff ff86 	bl	27f40 <bt_l2cap_send_cb>
	if (err) {
   28034:	4604      	mov	r4, r0
   28036:	b910      	cbnz	r0, 2803e <bt_l2cap_update_conn_param+0x4c>
}
   28038:	4620      	mov	r0, r4
   2803a:	b002      	add	sp, #8
   2803c:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   2803e:	4630      	mov	r0, r6
   28040:	f001 ff04 	bl	29e4c <net_buf_unref>
		return err;
   28044:	e7f8      	b.n	28038 <bt_l2cap_update_conn_param+0x46>
		return -ENOMEM;
   28046:	f06f 040b 	mvn.w	r4, #11
   2804a:	e7f5      	b.n	28038 <bt_l2cap_update_conn_param+0x46>

0002804c <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   2804c:	4770      	bx	lr

0002804e <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   2804e:	460b      	mov	r3, r1
   28050:	b139      	cbz	r1, 28062 <sys_slist_remove+0x14>
	return node->next;
   28052:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   28054:	6019      	str	r1, [r3, #0]
	return list->tail;
   28056:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   28058:	428a      	cmp	r2, r1
   2805a:	d009      	beq.n	28070 <sys_slist_remove+0x22>
	parent->next = child;
   2805c:	2300      	movs	r3, #0
   2805e:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   28060:	4770      	bx	lr
	return node->next;
   28062:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   28064:	6003      	str	r3, [r0, #0]
	return list->tail;
   28066:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   28068:	428a      	cmp	r2, r1
   2806a:	d1f7      	bne.n	2805c <sys_slist_remove+0xe>
	list->tail = node;
   2806c:	6043      	str	r3, [r0, #4]
}
   2806e:	e7f5      	b.n	2805c <sys_slist_remove+0xe>
	list->tail = node;
   28070:	6043      	str	r3, [r0, #4]
}
   28072:	e7f3      	b.n	2805c <sys_slist_remove+0xe>

00028074 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28074:	b508      	push	{r3, lr}
   28076:	460a      	mov	r2, r1
	return list->head;
   28078:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2807a:	2100      	movs	r1, #0
   2807c:	e001      	b.n	28082 <sys_slist_find_and_remove+0xe>
   2807e:	4619      	mov	r1, r3
   28080:	681b      	ldr	r3, [r3, #0]
   28082:	b12b      	cbz	r3, 28090 <sys_slist_find_and_remove+0x1c>
   28084:	4293      	cmp	r3, r2
   28086:	d1fa      	bne.n	2807e <sys_slist_find_and_remove+0xa>
   28088:	f7ff ffe1 	bl	2804e <sys_slist_remove>
   2808c:	2001      	movs	r0, #1
   2808e:	e000      	b.n	28092 <sys_slist_find_and_remove+0x1e>
   28090:	2000      	movs	r0, #0
   28092:	bd08      	pop	{r3, pc}

00028094 <get_first_req_matching_chan>:
{
   28094:	4603      	mov	r3, r0
	return list->head;
   28096:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   28098:	b120      	cbz	r0, 280a4 <get_first_req_matching_chan+0x10>
	return node->next;
   2809a:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2809c:	601a      	str	r2, [r3, #0]
	return list->tail;
   2809e:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   280a0:	4288      	cmp	r0, r1
   280a2:	d000      	beq.n	280a6 <get_first_req_matching_chan+0x12>
}
   280a4:	4770      	bx	lr
	list->tail = node;
   280a6:	605a      	str	r2, [r3, #4]
		return ATT_REQ(node);
   280a8:	e7fc      	b.n	280a4 <get_first_req_matching_chan+0x10>

000280aa <range_is_valid>:
	if (!start || !end) {
   280aa:	b120      	cbz	r0, 280b6 <range_is_valid+0xc>
   280ac:	b119      	cbz	r1, 280b6 <range_is_valid+0xc>
	if (start > end) {
   280ae:	4288      	cmp	r0, r1
   280b0:	d806      	bhi.n	280c0 <range_is_valid+0x16>
	return true;
   280b2:	2001      	movs	r0, #1
}
   280b4:	4770      	bx	lr
		if (err) {
   280b6:	b10a      	cbz	r2, 280bc <range_is_valid+0x12>
			*err = 0U;
   280b8:	2300      	movs	r3, #0
   280ba:	8013      	strh	r3, [r2, #0]
		return false;
   280bc:	2000      	movs	r0, #0
   280be:	4770      	bx	lr
		if (err) {
   280c0:	b102      	cbz	r2, 280c4 <range_is_valid+0x1a>
			*err = start;
   280c2:	8010      	strh	r0, [r2, #0]
		return false;
   280c4:	2000      	movs	r0, #0
   280c6:	4770      	bx	lr

000280c8 <err_to_att>:
	if (err < 0 && err >= -0xff) {
   280c8:	f110 0fff 	cmn.w	r0, #255	; 0xff
   280cc:	d201      	bcs.n	280d2 <err_to_att+0xa>
	return BT_ATT_ERR_UNLIKELY;
   280ce:	200e      	movs	r0, #14
}
   280d0:	4770      	bx	lr
		return -err;
   280d2:	4240      	negs	r0, r0
   280d4:	b2c0      	uxtb	r0, r0
   280d6:	4770      	bx	lr

000280d8 <attr_read_type_cb>:
{
   280d8:	b410      	push	{r4}
	if (!data->rsp->len) {
   280da:	68d4      	ldr	r4, [r2, #12]
   280dc:	7823      	ldrb	r3, [r4, #0]
   280de:	b923      	cbnz	r3, 280ea <attr_read_type_cb+0x12>
		data->rsp->len = read + sizeof(*data->item);
   280e0:	3102      	adds	r1, #2
   280e2:	7021      	strb	r1, [r4, #0]
	return true;
   280e4:	2001      	movs	r0, #1
}
   280e6:	bc10      	pop	{r4}
   280e8:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   280ea:	3102      	adds	r1, #2
   280ec:	428b      	cmp	r3, r1
   280ee:	d005      	beq.n	280fc <attr_read_type_cb+0x24>
		frag->len -= sizeof(*data->item);
   280f0:	8a03      	ldrh	r3, [r0, #16]
   280f2:	3b02      	subs	r3, #2
   280f4:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   280f6:	2000      	movs	r0, #0
   280f8:	6110      	str	r0, [r2, #16]
		return false;
   280fa:	e7f4      	b.n	280e6 <attr_read_type_cb+0xe>
	return true;
   280fc:	2001      	movs	r0, #1
   280fe:	e7f2      	b.n	280e6 <attr_read_type_cb+0xe>

00028100 <attr_read_group_cb>:
	if (!data->rsp->len) {
   28100:	68d0      	ldr	r0, [r2, #12]
   28102:	7803      	ldrb	r3, [r0, #0]
   28104:	b91b      	cbnz	r3, 2810e <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   28106:	3104      	adds	r1, #4
   28108:	7001      	strb	r1, [r0, #0]
	return true;
   2810a:	2001      	movs	r0, #1
   2810c:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2810e:	3104      	adds	r1, #4
   28110:	428b      	cmp	r3, r1
   28112:	d006      	beq.n	28122 <attr_read_group_cb+0x22>
		data->buf->len -= sizeof(*data->group);
   28114:	6891      	ldr	r1, [r2, #8]
   28116:	8a0b      	ldrh	r3, [r1, #16]
   28118:	3b04      	subs	r3, #4
   2811a:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   2811c:	2000      	movs	r0, #0
   2811e:	6110      	str	r0, [r2, #16]
		return false;
   28120:	4770      	bx	lr
	return true;
   28122:	2001      	movs	r0, #1
}
   28124:	4770      	bx	lr

00028126 <att_prepare_write_req>:
}
   28126:	2006      	movs	r0, #6
   28128:	4770      	bx	lr

0002812a <att_exec_write_req>:
}
   2812a:	2006      	movs	r0, #6
   2812c:	4770      	bx	lr

0002812e <att_chan_attach>:
{
   2812e:	b538      	push	{r3, r4, r5, lr}
   28130:	4604      	mov	r4, r0
   28132:	460d      	mov	r5, r1
	return list->head;
   28134:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sys_slist_is_empty(&att->chans)) {
   28136:	b143      	cbz	r3, 2814a <att_chan_attach+0x1c>
	sys_slist_prepend(&att->chans, &chan->node);
   28138:	f105 03e0 	add.w	r3, r5, #224	; 0xe0
   2813c:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
   2813e:	f8c5 20e0 	str.w	r2, [r5, #224]	; 0xe0
	list->head = node;
   28142:	6263      	str	r3, [r4, #36]	; 0x24
	return list->tail;
   28144:	6aa2      	ldr	r2, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   28146:	b122      	cbz	r2, 28152 <att_chan_attach+0x24>
}
   28148:	bd38      	pop	{r3, r4, r5, pc}
		k_fifo_init(&att->tx_queue);
   2814a:	300c      	adds	r0, #12
	z_impl_k_queue_init(queue);
   2814c:	f003 ffc0 	bl	2c0d0 <z_impl_k_queue_init>
}
   28150:	e7f2      	b.n	28138 <att_chan_attach+0xa>
	list->tail = node;
   28152:	62a3      	str	r3, [r4, #40]	; 0x28
}
   28154:	e7f8      	b.n	28148 <att_chan_attach+0x1a>

00028156 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   28156:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28158:	f3bf 8f5b 	dmb	ish
   2815c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   28160:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   28164:	f001 011f 	and.w	r1, r1, #31
   28168:	4108      	asrs	r0, r1
}
   2816a:	f000 0001 	and.w	r0, r0, #1
   2816e:	4770      	bx	lr

00028170 <chan_unknown>:
{
   28170:	b508      	push	{r3, lr}
	tx_meta_data_free(user_data);
   28172:	4608      	mov	r0, r1
   28174:	f7f3 fff0 	bl	1c158 <tx_meta_data_free>
}
   28178:	bd08      	pop	{r3, pc}

0002817a <chan_tx_complete>:
{
   2817a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2817e:	4605      	mov	r5, r0
   28180:	4608      	mov	r0, r1
   28182:	4614      	mov	r4, r2
	bt_gatt_complete_func_t func = data->func;
   28184:	688e      	ldr	r6, [r1, #8]
	uint16_t attr_count = data->attr_count;
   28186:	888f      	ldrh	r7, [r1, #4]
	void *ud = data->user_data;
   28188:	f8d1 800c 	ldr.w	r8, [r1, #12]
	tx_meta_data_free(data);
   2818c:	f7f3 ffe4 	bl	1c158 <tx_meta_data_free>
	if (!err && func) {
   28190:	b94c      	cbnz	r4, 281a6 <chan_tx_complete+0x2c>
   28192:	b146      	cbz	r6, 281a6 <chan_tx_complete+0x2c>
		for (uint16_t i = 0; i < attr_count; i++) {
   28194:	2400      	movs	r4, #0
   28196:	e004      	b.n	281a2 <chan_tx_complete+0x28>
			func(conn, ud);
   28198:	4641      	mov	r1, r8
   2819a:	4628      	mov	r0, r5
   2819c:	47b0      	blx	r6
		for (uint16_t i = 0; i < attr_count; i++) {
   2819e:	3401      	adds	r4, #1
   281a0:	b2a4      	uxth	r4, r4
   281a2:	42a7      	cmp	r7, r4
   281a4:	d8f8      	bhi.n	28198 <chan_tx_complete+0x1e>
}
   281a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000281aa <bt_att_chan_send>:
{
   281aa:	b508      	push	{r3, lr}
	return chan_send(chan, buf);
   281ac:	f7f3 ffe2 	bl	1c174 <chan_send>
}
   281b0:	bd08      	pop	{r3, pc}

000281b2 <chan_req_send>:
{
   281b2:	b570      	push	{r4, r5, r6, lr}
   281b4:	4605      	mov	r5, r0
   281b6:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   281b8:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   281ba:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   281bc:	2200      	movs	r2, #0
	while (buf) {
   281be:	e003      	b.n	281c8 <chan_req_send+0x16>
		bytes += buf->len;
   281c0:	f8b3 c010 	ldrh.w	ip, [r3, #16]
   281c4:	4462      	add	r2, ip
		buf = buf->frags;
   281c6:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   281c8:	2b00      	cmp	r3, #0
   281ca:	d1f9      	bne.n	281c0 <chan_req_send+0xe>
   281cc:	4291      	cmp	r1, r2
   281ce:	d30d      	bcc.n	281ec <chan_req_send+0x3a>
	chan->req = req;
   281d0:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
	buf = req->buf;
   281d4:	68a6      	ldr	r6, [r4, #8]
	req->buf = NULL;
   281d6:	60a3      	str	r3, [r4, #8]
	err = bt_att_chan_send(chan, buf);
   281d8:	4631      	mov	r1, r6
   281da:	4628      	mov	r0, r5
   281dc:	f7ff ffe5 	bl	281aa <bt_att_chan_send>
	if (err) {
   281e0:	b118      	cbz	r0, 281ea <chan_req_send+0x38>
		req->buf = buf;
   281e2:	60a6      	str	r6, [r4, #8]
		chan->req = NULL;
   281e4:	2300      	movs	r3, #0
   281e6:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
}
   281ea:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   281ec:	f06f 0079 	mvn.w	r0, #121	; 0x79
   281f0:	e7fb      	b.n	281ea <chan_req_send+0x38>

000281f2 <bt_att_chan_req_send>:
{
   281f2:	b508      	push	{r3, lr}
	return chan_req_send(chan, req);
   281f4:	f7ff ffdd 	bl	281b2 <chan_req_send>
}
   281f8:	bd08      	pop	{r3, pc}

000281fa <bt_att_status>:
{
   281fa:	b570      	push	{r4, r5, r6, lr}
   281fc:	4604      	mov	r4, r0
   281fe:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   28200:	2100      	movs	r1, #0
   28202:	f7ff ffa8 	bl	28156 <atomic_test_bit>
   28206:	b130      	cbz	r0, 28216 <bt_att_status+0x1c>
   28208:	1f26      	subs	r6, r4, #4
	if (!chan->att) {
   2820a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2820e:	b113      	cbz	r3, 28216 <bt_att_status+0x1c>
	if (chan->req) {
   28210:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   28214:	b102      	cbz	r2, 28218 <bt_att_status+0x1e>
}
   28216:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
   28218:	685d      	ldr	r5, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2821a:	2d00      	cmp	r5, #0
   2821c:	d0fb      	beq.n	28216 <bt_att_status+0x1c>
	return node->next;
   2821e:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   28220:	605a      	str	r2, [r3, #4]
	return list->tail;
   28222:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28224:	42a9      	cmp	r1, r5
   28226:	d00f      	beq.n	28248 <bt_att_status+0x4e>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   28228:	4629      	mov	r1, r5
   2822a:	4630      	mov	r0, r6
   2822c:	f7ff ffe1 	bl	281f2 <bt_att_chan_req_send>
   28230:	2800      	cmp	r0, #0
   28232:	daf0      	bge.n	28216 <bt_att_status+0x1c>
	sys_slist_prepend(&chan->att->reqs, node);
   28234:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return list->head;
   28238:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2823a:	602a      	str	r2, [r5, #0]
	list->head = node;
   2823c:	605d      	str	r5, [r3, #4]
	return list->tail;
   2823e:	689a      	ldr	r2, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
   28240:	2a00      	cmp	r2, #0
   28242:	d1e8      	bne.n	28216 <bt_att_status+0x1c>
	list->tail = node;
   28244:	609d      	str	r5, [r3, #8]
}
   28246:	e7e6      	b.n	28216 <bt_att_status+0x1c>
	list->tail = node;
   28248:	609a      	str	r2, [r3, #8]
	if (!node) {
   2824a:	e7ed      	b.n	28228 <bt_att_status+0x2e>

0002824c <att_req_send_process>:
{
   2824c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28250:	4607      	mov	r7, r0
	return list->head;
   28252:	6a44      	ldr	r4, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   28254:	b3ac      	cbz	r4, 282c2 <att_req_send_process+0x76>
   28256:	3ce0      	subs	r4, #224	; 0xe0
Z_GENLIST_PEEK_NEXT(slist, snode)
   28258:	f114 05e0 	adds.w	r5, r4, #224	; 0xe0
   2825c:	d003      	beq.n	28266 <att_req_send_process+0x1a>
	return node->next;
   2825e:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
   28262:	b105      	cbz	r5, 28266 <att_req_send_process+0x1a>
   28264:	3de0      	subs	r5, #224	; 0xe0
   28266:	f04f 0800 	mov.w	r8, #0
   2826a:	4646      	mov	r6, r8
   2826c:	e02e      	b.n	282cc <att_req_send_process+0x80>
		if (!req && prev &&
   2826e:	b196      	cbz	r6, 28296 <att_req_send_process+0x4a>
		req = get_first_req_matching_chan(&att->reqs, chan);
   28270:	4621      	mov	r1, r4
   28272:	1d38      	adds	r0, r7, #4
   28274:	f7ff ff0e 	bl	28094 <get_first_req_matching_chan>
		if (!req) {
   28278:	4606      	mov	r6, r0
   2827a:	b300      	cbz	r0, 282be <att_req_send_process+0x72>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   2827c:	4601      	mov	r1, r0
   2827e:	4620      	mov	r0, r4
   28280:	f7ff ffb7 	bl	281f2 <bt_att_chan_req_send>
   28284:	2800      	cmp	r0, #0
   28286:	da2e      	bge.n	282e6 <att_req_send_process+0x9a>
	return list->head;
   28288:	687b      	ldr	r3, [r7, #4]
	parent->next = child;
   2828a:	6033      	str	r3, [r6, #0]
	list->head = node;
   2828c:	607e      	str	r6, [r7, #4]
	return list->tail;
   2828e:	68bb      	ldr	r3, [r7, #8]
Z_GENLIST_PREPEND(slist, snode)
   28290:	b193      	cbz	r3, 282b8 <att_req_send_process+0x6c>
		prev = chan;
   28292:	46a0      	mov	r8, r4
   28294:	e01f      	b.n	282d6 <att_req_send_process+0x8a>
		if (!req && prev &&
   28296:	f1b8 0f00 	cmp.w	r8, #0
   2829a:	d0e9      	beq.n	28270 <att_req_send_process+0x24>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2829c:	2103      	movs	r1, #3
   2829e:	f104 0090 	add.w	r0, r4, #144	; 0x90
   282a2:	f7ff ff58 	bl	28156 <atomic_test_bit>
   282a6:	4681      	mov	r9, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   282a8:	2103      	movs	r1, #3
   282aa:	f108 0090 	add.w	r0, r8, #144	; 0x90
   282ae:	f7ff ff52 	bl	28156 <atomic_test_bit>
		if (!req && prev &&
   282b2:	4581      	cmp	r9, r0
   282b4:	d1dc      	bne.n	28270 <att_req_send_process+0x24>
   282b6:	e00e      	b.n	282d6 <att_req_send_process+0x8a>
	list->tail = node;
   282b8:	60be      	str	r6, [r7, #8]
		prev = chan;
   282ba:	46a0      	mov	r8, r4
}
   282bc:	e00b      	b.n	282d6 <att_req_send_process+0x8a>
   282be:	46a0      	mov	r8, r4
   282c0:	e009      	b.n	282d6 <att_req_send_process+0x8a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   282c2:	4625      	mov	r5, r4
   282c4:	e7cf      	b.n	28266 <att_req_send_process+0x1a>
   282c6:	462b      	mov	r3, r5
   282c8:	462c      	mov	r4, r5
   282ca:	461d      	mov	r5, r3
   282cc:	b15c      	cbz	r4, 282e6 <att_req_send_process+0x9a>
		if (chan->req) {
   282ce:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   282d2:	2b00      	cmp	r3, #0
   282d4:	d0cb      	beq.n	2826e <att_req_send_process+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   282d6:	2d00      	cmp	r5, #0
   282d8:	d0f5      	beq.n	282c6 <att_req_send_process+0x7a>
	return node->next;
   282da:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
   282de:	2b00      	cmp	r3, #0
   282e0:	d0f2      	beq.n	282c8 <att_req_send_process+0x7c>
   282e2:	3be0      	subs	r3, #224	; 0xe0
   282e4:	e7f0      	b.n	282c8 <att_req_send_process+0x7c>
}
   282e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000282ea <chan_req_sent>:
{
   282ea:	b510      	push	{r4, lr}
   282ec:	460c      	mov	r4, r1
	struct bt_att_chan *chan = data->att_chan;
   282ee:	6808      	ldr	r0, [r1, #0]
	if (chan->req) {
   282f0:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   282f4:	b12b      	cbz	r3, 28302 <chan_req_sent+0x18>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   282f6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   282fa:	2300      	movs	r3, #0
   282fc:	30b0      	adds	r0, #176	; 0xb0
   282fe:	f7fc f85b 	bl	243b8 <k_work_reschedule>
	tx_meta_data_free(user_data);
   28302:	4620      	mov	r0, r4
   28304:	f7f3 ff28 	bl	1c158 <tx_meta_data_free>
}
   28308:	bd10      	pop	{r4, pc}

0002830a <chan_cfm_sent>:
{
   2830a:	b508      	push	{r3, lr}
   2830c:	4608      	mov	r0, r1
	struct bt_att_chan *chan = data->att_chan;
   2830e:	680b      	ldr	r3, [r1, #0]
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   28310:	3390      	adds	r3, #144	; 0x90
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28312:	f3bf 8f5b 	dmb	ish
   28316:	e853 1f00 	ldrex	r1, [r3]
   2831a:	f021 0102 	bic.w	r1, r1, #2
   2831e:	e843 1200 	strex	r2, r1, [r3]
   28322:	2a00      	cmp	r2, #0
   28324:	d1f7      	bne.n	28316 <chan_cfm_sent+0xc>
   28326:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   2832a:	f7f3 ff15 	bl	1c158 <tx_meta_data_free>
}
   2832e:	bd08      	pop	{r3, pc}

00028330 <chan_rsp_sent>:
{
   28330:	b508      	push	{r3, lr}
   28332:	4608      	mov	r0, r1
	struct bt_att_chan *chan = data->att_chan;
   28334:	680b      	ldr	r3, [r1, #0]
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   28336:	3390      	adds	r3, #144	; 0x90
   28338:	f3bf 8f5b 	dmb	ish
   2833c:	e853 1f00 	ldrex	r1, [r3]
   28340:	f021 0101 	bic.w	r1, r1, #1
   28344:	e843 1200 	strex	r2, r1, [r3]
   28348:	2a00      	cmp	r2, #0
   2834a:	d1f7      	bne.n	2833c <chan_rsp_sent+0xc>
   2834c:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   28350:	f7f3 ff02 	bl	1c158 <tx_meta_data_free>
}
   28354:	bd08      	pop	{r3, pc}

00028356 <get_first_buf_matching_chan>:
{
   28356:	b508      	push	{r3, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   28358:	2200      	movs	r2, #0
   2835a:	2300      	movs	r3, #0
   2835c:	f001 fd36 	bl	29dcc <net_buf_get>
}
   28360:	bd08      	pop	{r3, pc}

00028362 <process_queue>:
{
   28362:	b570      	push	{r4, r5, r6, lr}
   28364:	4604      	mov	r4, r0
   28366:	460d      	mov	r5, r1
	buf = get_first_buf_matching_chan(queue, chan);
   28368:	4601      	mov	r1, r0
   2836a:	4628      	mov	r0, r5
   2836c:	f7ff fff3 	bl	28356 <get_first_buf_matching_chan>
	if (buf) {
   28370:	b168      	cbz	r0, 2838e <process_queue+0x2c>
   28372:	4606      	mov	r6, r0
		err = bt_att_chan_send(chan, buf);
   28374:	4601      	mov	r1, r0
   28376:	4620      	mov	r0, r4
   28378:	f7ff ff17 	bl	281aa <bt_att_chan_send>
		if (err) {
   2837c:	4604      	mov	r4, r0
   2837e:	b908      	cbnz	r0, 28384 <process_queue+0x22>
}
   28380:	4620      	mov	r0, r4
   28382:	bd70      	pop	{r4, r5, r6, pc}
			k_queue_prepend(&queue->_queue, buf);
   28384:	4631      	mov	r1, r6
   28386:	4628      	mov	r0, r5
   28388:	f003 feba 	bl	2c100 <k_queue_prepend>
			return err;
   2838c:	e7f8      	b.n	28380 <process_queue+0x1e>
	return -ENOENT;
   2838e:	f06f 0401 	mvn.w	r4, #1
   28392:	e7f5      	b.n	28380 <process_queue+0x1e>

00028394 <bt_att_sent>:
{
   28394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28396:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   28398:	1f06      	subs	r6, r0, #4
	struct bt_att *att = chan->att;
   2839a:	f850 5c04 	ldr.w	r5, [r0, #-4]
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   2839e:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   283a2:	f3bf 8f5b 	dmb	ish
   283a6:	e853 1f00 	ldrex	r1, [r3]
   283aa:	f021 0110 	bic.w	r1, r1, #16
   283ae:	e843 1200 	strex	r2, r1, [r3]
   283b2:	2a00      	cmp	r2, #0
   283b4:	d1f7      	bne.n	283a6 <bt_att_sent+0x12>
   283b6:	f3bf 8f5b 	dmb	ish
	if (!att) {
   283ba:	b145      	cbz	r5, 283ce <bt_att_sent+0x3a>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   283bc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   283c0:	b133      	cbz	r3, 283d0 <bt_att_sent+0x3c>
	err = process_queue(chan, &chan->tx_queue);
   283c2:	f104 0194 	add.w	r1, r4, #148	; 0x94
   283c6:	4630      	mov	r0, r6
   283c8:	f7ff ffcb 	bl	28362 <process_queue>
	if (!err) {
   283cc:	b9c0      	cbnz	r0, 28400 <bt_att_sent+0x6c>
}
   283ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return list->head;
   283d0:	686f      	ldr	r7, [r5, #4]
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   283d2:	2f00      	cmp	r7, #0
   283d4:	d0f5      	beq.n	283c2 <bt_att_sent+0x2e>
	return node->next;
   283d6:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   283d8:	606b      	str	r3, [r5, #4]
	return list->tail;
   283da:	68aa      	ldr	r2, [r5, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   283dc:	42ba      	cmp	r2, r7
   283de:	d00d      	beq.n	283fc <bt_att_sent+0x68>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   283e0:	4639      	mov	r1, r7
   283e2:	4630      	mov	r0, r6
   283e4:	f7ff fee5 	bl	281b2 <chan_req_send>
   283e8:	2800      	cmp	r0, #0
   283ea:	daf0      	bge.n	283ce <bt_att_sent+0x3a>
	return list->head;
   283ec:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   283ee:	603b      	str	r3, [r7, #0]
	list->head = node;
   283f0:	606f      	str	r7, [r5, #4]
	return list->tail;
   283f2:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   283f4:	2b00      	cmp	r3, #0
   283f6:	d1e4      	bne.n	283c2 <bt_att_sent+0x2e>
	list->tail = node;
   283f8:	60af      	str	r7, [r5, #8]
}
   283fa:	e7e2      	b.n	283c2 <bt_att_sent+0x2e>
	list->tail = node;
   283fc:	60ab      	str	r3, [r5, #8]
}
   283fe:	e7ef      	b.n	283e0 <bt_att_sent+0x4c>
	(void)process_queue(chan, &att->tx_queue);
   28400:	f105 010c 	add.w	r1, r5, #12
   28404:	4630      	mov	r0, r6
   28406:	f7ff ffac 	bl	28362 <process_queue>
   2840a:	e7e0      	b.n	283ce <bt_att_sent+0x3a>

0002840c <att_send_process>:
{
   2840c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28410:	4680      	mov	r8, r0
	return list->head;
   28412:	6a44      	ldr	r4, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   28414:	b374      	cbz	r4, 28474 <att_send_process+0x68>
   28416:	3ce0      	subs	r4, #224	; 0xe0
Z_GENLIST_PEEK_NEXT(slist, snode)
   28418:	f114 05e0 	adds.w	r5, r4, #224	; 0xe0
   2841c:	d003      	beq.n	28426 <att_send_process+0x1a>
	return node->next;
   2841e:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
   28422:	b105      	cbz	r5, 28426 <att_send_process+0x1a>
   28424:	3de0      	subs	r5, #224	; 0xe0
   28426:	2600      	movs	r6, #0
   28428:	4637      	mov	r7, r6
   2842a:	e00e      	b.n	2844a <att_send_process+0x3e>
		err = process_queue(chan, &att->tx_queue);
   2842c:	f108 010c 	add.w	r1, r8, #12
   28430:	4620      	mov	r0, r4
   28432:	f7ff ff96 	bl	28362 <process_queue>
		if (!err) {
   28436:	4606      	mov	r6, r0
   28438:	b300      	cbz	r0, 2847c <att_send_process+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2843a:	b1ed      	cbz	r5, 28478 <att_send_process+0x6c>
   2843c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
   28440:	b103      	cbz	r3, 28444 <att_send_process+0x38>
   28442:	3be0      	subs	r3, #224	; 0xe0
   28444:	4627      	mov	r7, r4
   28446:	462c      	mov	r4, r5
   28448:	461d      	mov	r5, r3
   2844a:	b1bc      	cbz	r4, 2847c <att_send_process+0x70>
		if (err == -ENOENT && prev &&
   2844c:	f116 0f02 	cmn.w	r6, #2
   28450:	d1ec      	bne.n	2842c <att_send_process+0x20>
   28452:	2f00      	cmp	r7, #0
   28454:	d0ea      	beq.n	2842c <att_send_process+0x20>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   28456:	2103      	movs	r1, #3
   28458:	f104 0090 	add.w	r0, r4, #144	; 0x90
   2845c:	f7ff fe7b 	bl	28156 <atomic_test_bit>
   28460:	4681      	mov	r9, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   28462:	2103      	movs	r1, #3
   28464:	f107 0090 	add.w	r0, r7, #144	; 0x90
   28468:	f7ff fe75 	bl	28156 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   2846c:	4581      	cmp	r9, r0
   2846e:	d1dd      	bne.n	2842c <att_send_process+0x20>
   28470:	463c      	mov	r4, r7
   28472:	e7e2      	b.n	2843a <att_send_process+0x2e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   28474:	4625      	mov	r5, r4
   28476:	e7d6      	b.n	28426 <att_send_process+0x1a>
   28478:	462b      	mov	r3, r5
   2847a:	e7e3      	b.n	28444 <att_send_process+0x38>
}
   2847c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00028480 <att_notify_mult>:
{
   28480:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   28482:	6803      	ldr	r3, [r0, #0]
   28484:	8a0a      	ldrh	r2, [r1, #16]
   28486:	68c9      	ldr	r1, [r1, #12]
   28488:	6818      	ldr	r0, [r3, #0]
   2848a:	f7f6 f98d 	bl	1e7a8 <bt_gatt_mult_notification>
}
   2848e:	2000      	movs	r0, #0
   28490:	bd08      	pop	{r3, pc}

00028492 <att_notify>:
{
   28492:	b538      	push	{r3, r4, r5, lr}
   28494:	4605      	mov	r5, r0
   28496:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   28498:	f101 000c 	add.w	r0, r1, #12
   2849c:	f001 fd57 	bl	29f4e <net_buf_simple_pull_le16>
   284a0:	4601      	mov	r1, r0
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   284a2:	682d      	ldr	r5, [r5, #0]
   284a4:	8a23      	ldrh	r3, [r4, #16]
   284a6:	68e2      	ldr	r2, [r4, #12]
   284a8:	6828      	ldr	r0, [r5, #0]
   284aa:	f001 fae7 	bl	29a7c <bt_gatt_notification>
}
   284ae:	2000      	movs	r0, #0
   284b0:	bd38      	pop	{r3, r4, r5, pc}

000284b2 <bt_att_chan_send_rsp>:
{
   284b2:	b538      	push	{r3, r4, r5, lr}
   284b4:	4604      	mov	r4, r0
   284b6:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   284b8:	f7f3 fe5c 	bl	1c174 <chan_send>
	if (err) {
   284bc:	b900      	cbnz	r0, 284c0 <bt_att_chan_send_rsp+0xe>
}
   284be:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_put(&chan->tx_queue, buf);
   284c0:	4629      	mov	r1, r5
   284c2:	f104 0098 	add.w	r0, r4, #152	; 0x98
   284c6:	f001 fcbd 	bl	29e44 <net_buf_put>
}
   284ca:	e7f8      	b.n	284be <bt_att_chan_send_rsp+0xc>

000284cc <att_chan_mtu_updated>:
{
   284cc:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = updated_chan->att;
   284ce:	6806      	ldr	r6, [r0, #0]
	return list->head;
   284d0:	6a73      	ldr	r3, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   284d2:	b153      	cbz	r3, 284ea <att_chan_mtu_updated+0x1e>
   284d4:	3be0      	subs	r3, #224	; 0xe0
Z_GENLIST_PEEK_NEXT(slist, snode)
   284d6:	f113 04e0 	adds.w	r4, r3, #224	; 0xe0
   284da:	d003      	beq.n	284e4 <att_chan_mtu_updated+0x18>
	return node->next;
   284dc:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
   284e0:	b104      	cbz	r4, 284e4 <att_chan_mtu_updated+0x18>
   284e2:	3ce0      	subs	r4, #224	; 0xe0
   284e4:	2200      	movs	r2, #0
   284e6:	4611      	mov	r1, r2
   284e8:	e004      	b.n	284f4 <att_chan_mtu_updated+0x28>
   284ea:	461c      	mov	r4, r3
   284ec:	e7fa      	b.n	284e4 <att_chan_mtu_updated+0x18>
   284ee:	4625      	mov	r5, r4
   284f0:	4623      	mov	r3, r4
   284f2:	462c      	mov	r4, r5
   284f4:	b18b      	cbz	r3, 2851a <att_chan_mtu_updated+0x4e>
		if (chan == updated_chan) {
   284f6:	4283      	cmp	r3, r0
   284f8:	d007      	beq.n	2850a <att_chan_mtu_updated+0x3e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   284fa:	8d5d      	ldrh	r5, [r3, #42]	; 0x2a
   284fc:	42a9      	cmp	r1, r5
   284fe:	bf38      	it	cc
   28500:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   28502:	8b5b      	ldrh	r3, [r3, #26]
   28504:	429a      	cmp	r2, r3
   28506:	bf38      	it	cc
   28508:	461a      	movcc	r2, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2850a:	2c00      	cmp	r4, #0
   2850c:	d0ef      	beq.n	284ee <att_chan_mtu_updated+0x22>
   2850e:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
   28512:	2d00      	cmp	r5, #0
   28514:	d0ec      	beq.n	284f0 <att_chan_mtu_updated+0x24>
   28516:	3de0      	subs	r5, #224	; 0xe0
   28518:	e7ea      	b.n	284f0 <att_chan_mtu_updated+0x24>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2851a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   2851c:	428b      	cmp	r3, r1
   2851e:	d802      	bhi.n	28526 <att_chan_mtu_updated+0x5a>
	    (updated_chan->chan.rx.mtu > max_rx)) {
   28520:	8b44      	ldrh	r4, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   28522:	4294      	cmp	r4, r2
   28524:	d909      	bls.n	2853a <att_chan_mtu_updated+0x6e>
		max_rx = MAX(max_rx, updated_chan->chan.rx.mtu);
   28526:	8b40      	ldrh	r0, [r0, #26]
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   28528:	4282      	cmp	r2, r0
   2852a:	bf38      	it	cc
   2852c:	4602      	movcc	r2, r0
   2852e:	4299      	cmp	r1, r3
   28530:	bf38      	it	cc
   28532:	4619      	movcc	r1, r3
   28534:	6830      	ldr	r0, [r6, #0]
   28536:	f7f6 fa39 	bl	1e9ac <bt_gatt_att_max_mtu_changed>
}
   2853a:	bd70      	pop	{r4, r5, r6, pc}

0002853c <write_cb>:
{
   2853c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2853e:	b083      	sub	sp, #12
   28540:	4606      	mov	r6, r0
   28542:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   28544:	f44f 7295 	mov.w	r2, #298	; 0x12a
   28548:	4601      	mov	r1, r0
   2854a:	6820      	ldr	r0, [r4, #0]
   2854c:	f001 f90f 	bl	2976e <bt_gatt_check_perm>
   28550:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   28552:	bb08      	cbnz	r0, 28598 <write_cb+0x5c>
   28554:	4605      	mov	r5, r0
	if (!data->req) {
   28556:	7a23      	ldrb	r3, [r4, #8]
   28558:	b11b      	cbz	r3, 28562 <write_cb+0x26>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   2855a:	2b18      	cmp	r3, #24
   2855c:	d016      	beq.n	2858c <write_cb+0x50>
	uint8_t flags = 0U;
   2855e:	4603      	mov	r3, r0
   28560:	e000      	b.n	28564 <write_cb+0x28>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   28562:	2302      	movs	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   28564:	68b7      	ldr	r7, [r6, #8]
   28566:	9301      	str	r3, [sp, #4]
   28568:	8a63      	ldrh	r3, [r4, #18]
   2856a:	9300      	str	r3, [sp, #0]
   2856c:	8a23      	ldrh	r3, [r4, #16]
   2856e:	68e2      	ldr	r2, [r4, #12]
   28570:	4631      	mov	r1, r6
   28572:	6820      	ldr	r0, [r4, #0]
   28574:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   28576:	2800      	cmp	r0, #0
   28578:	db02      	blt.n	28580 <write_cb+0x44>
   2857a:	8a23      	ldrh	r3, [r4, #16]
   2857c:	4298      	cmp	r0, r3
   2857e:	d007      	beq.n	28590 <write_cb+0x54>
		data->err = err_to_att(write);
   28580:	f7ff fda2 	bl	280c8 <err_to_att>
   28584:	7520      	strb	r0, [r4, #20]
}
   28586:	4628      	mov	r0, r5
   28588:	b003      	add	sp, #12
   2858a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   2858c:	2304      	movs	r3, #4
   2858e:	e7e9      	b.n	28564 <write_cb+0x28>
	data->err = 0U;
   28590:	2300      	movs	r3, #0
   28592:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   28594:	2501      	movs	r5, #1
   28596:	e7f6      	b.n	28586 <write_cb+0x4a>
		return BT_GATT_ITER_STOP;
   28598:	2500      	movs	r5, #0
   2859a:	e7f4      	b.n	28586 <write_cb+0x4a>

0002859c <att_chan_read>:
{
   2859c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   285a0:	b085      	sub	sp, #20
   285a2:	4680      	mov	r8, r0
   285a4:	4689      	mov	r9, r1
   285a6:	9202      	str	r2, [sp, #8]
   285a8:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   285aa:	6843      	ldr	r3, [r0, #4]
   285ac:	9303      	str	r3, [sp, #12]
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   285ae:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
	while (buf) {
   285b0:	4613      	mov	r3, r2
	size_t bytes = 0;
   285b2:	2200      	movs	r2, #0
	while (buf) {
   285b4:	e002      	b.n	285bc <att_chan_read+0x20>
		bytes += buf->len;
   285b6:	8a19      	ldrh	r1, [r3, #16]
   285b8:	440a      	add	r2, r1
		buf = buf->frags;
   285ba:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   285bc:	2b00      	cmp	r3, #0
   285be:	d1fa      	bne.n	285b6 <att_chan_read+0x1a>
   285c0:	4290      	cmp	r0, r2
   285c2:	d804      	bhi.n	285ce <att_chan_read+0x32>
		return 0;
   285c4:	2400      	movs	r4, #0
}
   285c6:	4620      	mov	r0, r4
   285c8:	b005      	add	sp, #20
   285ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(buf);
   285ce:	9802      	ldr	r0, [sp, #8]
   285d0:	f001 fc63 	bl	29e9a <net_buf_frag_last>
   285d4:	4607      	mov	r7, r0
	size_t len, total = 0;
   285d6:	f04f 0a00 	mov.w	sl, #0
   285da:	e082      	b.n	286e2 <att_chan_read+0x146>
		bytes += buf->len;
   285dc:	8a19      	ldrh	r1, [r3, #16]
   285de:	440a      	add	r2, r1
		buf = buf->frags;
   285e0:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   285e2:	2b00      	cmp	r3, #0
   285e4:	d1fa      	bne.n	285dc <att_chan_read+0x40>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   285e6:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   285e8:	f107 060c 	add.w	r6, r7, #12
   285ec:	4630      	mov	r0, r6
   285ee:	f001 fcba 	bl	29f66 <net_buf_simple_tailroom>
   285f2:	4284      	cmp	r4, r0
   285f4:	d326      	bcc.n	28644 <att_chan_read+0xa8>
   285f6:	4630      	mov	r0, r6
   285f8:	f001 fcb5 	bl	29f66 <net_buf_simple_tailroom>
   285fc:	4606      	mov	r6, r0
		if (!len) {
   285fe:	b36e      	cbz	r6, 2865c <att_chan_read+0xc0>
		read = attr->read(conn, attr, frag->data + frag->len, len,
   28600:	f8d9 4004 	ldr.w	r4, [r9, #4]
   28604:	68f9      	ldr	r1, [r7, #12]
   28606:	8a3a      	ldrh	r2, [r7, #16]
   28608:	9500      	str	r5, [sp, #0]
   2860a:	b2b3      	uxth	r3, r6
   2860c:	440a      	add	r2, r1
   2860e:	4649      	mov	r1, r9
   28610:	9803      	ldr	r0, [sp, #12]
   28612:	47a0      	blx	r4
		if (read < 0) {
   28614:	1e04      	subs	r4, r0, #0
   28616:	db55      	blt.n	286c4 <att_chan_read+0x128>
		if (cb && !cb(frag, read, user_data)) {
   28618:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2861a:	b12b      	cbz	r3, 28628 <att_chan_read+0x8c>
   2861c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2861e:	4621      	mov	r1, r4
   28620:	4638      	mov	r0, r7
   28622:	4798      	blx	r3
   28624:	2800      	cmp	r0, #0
   28626:	d061      	beq.n	286ec <att_chan_read+0x150>
		net_buf_add(frag, read);
   28628:	46a3      	mov	fp, r4
	return net_buf_simple_add(&buf->b, len);
   2862a:	4621      	mov	r1, r4
   2862c:	f107 000c 	add.w	r0, r7, #12
   28630:	f001 fc53 	bl	29eda <net_buf_simple_add>
		total += read;
   28634:	44a2      	add	sl, r4
		offset += read;
   28636:	442c      	add	r4, r5
   28638:	b2a5      	uxth	r5, r4
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2863a:	f8b8 002a 	ldrh.w	r0, [r8, #42]	; 0x2a
   2863e:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   28640:	2200      	movs	r2, #0
   28642:	e048      	b.n	286d6 <att_chan_read+0x13a>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   28644:	f8b8 602a 	ldrh.w	r6, [r8, #42]	; 0x2a
	while (buf) {
   28648:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   2864a:	2200      	movs	r2, #0
	while (buf) {
   2864c:	e002      	b.n	28654 <att_chan_read+0xb8>
		bytes += buf->len;
   2864e:	8a19      	ldrh	r1, [r3, #16]
   28650:	440a      	add	r2, r1
		buf = buf->frags;
   28652:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   28654:	2b00      	cmp	r3, #0
   28656:	d1fa      	bne.n	2864e <att_chan_read+0xb2>
   28658:	1ab6      	subs	r6, r6, r2
   2865a:	e7d0      	b.n	285fe <att_chan_read+0x62>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2865c:	9b02      	ldr	r3, [sp, #8]
   2865e:	7a98      	ldrb	r0, [r3, #10]
   28660:	f7f6 fa44 	bl	1eaec <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   28664:	2200      	movs	r2, #0
   28666:	2300      	movs	r3, #0
   28668:	f001 fba9 	bl	29dbe <net_buf_alloc_fixed>
			if (!frag) {
   2866c:	4607      	mov	r7, r0
   2866e:	b150      	cbz	r0, 28686 <att_chan_read+0xea>
			net_buf_frag_add(buf, frag);
   28670:	4601      	mov	r1, r0
   28672:	f8dd b008 	ldr.w	fp, [sp, #8]
   28676:	4658      	mov	r0, fp
   28678:	f001 fc20 	bl	29ebc <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2867c:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	size_t bytes = 0;
   28680:	4632      	mov	r2, r6
	while (buf) {
   28682:	465b      	mov	r3, fp
   28684:	e004      	b.n	28690 <att_chan_read+0xf4>
				return total;
   28686:	4654      	mov	r4, sl
   28688:	e79d      	b.n	285c6 <att_chan_read+0x2a>
		bytes += buf->len;
   2868a:	8a19      	ldrh	r1, [r3, #16]
   2868c:	440a      	add	r2, r1
		buf = buf->frags;
   2868e:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   28690:	2b00      	cmp	r3, #0
   28692:	d1fa      	bne.n	2868a <att_chan_read+0xee>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   28694:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   28696:	f107 0b0c 	add.w	fp, r7, #12
   2869a:	4658      	mov	r0, fp
   2869c:	f001 fc63 	bl	29f66 <net_buf_simple_tailroom>
   286a0:	4284      	cmp	r4, r0
   286a2:	d304      	bcc.n	286ae <att_chan_read+0x112>
   286a4:	4658      	mov	r0, fp
   286a6:	f001 fc5e 	bl	29f66 <net_buf_simple_tailroom>
   286aa:	4606      	mov	r6, r0
   286ac:	e7a8      	b.n	28600 <att_chan_read+0x64>
   286ae:	f8b8 102a 	ldrh.w	r1, [r8, #42]	; 0x2a
	while (buf) {
   286b2:	9b02      	ldr	r3, [sp, #8]
   286b4:	e002      	b.n	286bc <att_chan_read+0x120>
		bytes += buf->len;
   286b6:	8a1a      	ldrh	r2, [r3, #16]
   286b8:	4416      	add	r6, r2
		buf = buf->frags;
   286ba:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   286bc:	2b00      	cmp	r3, #0
   286be:	d1fa      	bne.n	286b6 <att_chan_read+0x11a>
   286c0:	1b8e      	subs	r6, r1, r6
   286c2:	e79d      	b.n	28600 <att_chan_read+0x64>
			if (total) {
   286c4:	f1ba 0f00 	cmp.w	sl, #0
   286c8:	f43f af7d 	beq.w	285c6 <att_chan_read+0x2a>
				return total;
   286cc:	4654      	mov	r4, sl
   286ce:	e77a      	b.n	285c6 <att_chan_read+0x2a>
		bytes += buf->len;
   286d0:	8a19      	ldrh	r1, [r3, #16]
   286d2:	440a      	add	r2, r1
		buf = buf->frags;
   286d4:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   286d6:	2b00      	cmp	r3, #0
   286d8:	d1fa      	bne.n	286d0 <att_chan_read+0x134>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   286da:	4290      	cmp	r0, r2
   286dc:	d906      	bls.n	286ec <att_chan_read+0x150>
   286de:	45b3      	cmp	fp, r6
   286e0:	d104      	bne.n	286ec <att_chan_read+0x150>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   286e2:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   286e6:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   286e8:	2200      	movs	r2, #0
	while (buf) {
   286ea:	e77a      	b.n	285e2 <att_chan_read+0x46>
	return total;
   286ec:	4654      	mov	r4, sl
   286ee:	e76a      	b.n	285c6 <att_chan_read+0x2a>

000286f0 <read_vl_cb>:
{
   286f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   286f4:	b082      	sub	sp, #8
   286f6:	4606      	mov	r6, r0
   286f8:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   286fa:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   286fc:	6878      	ldr	r0, [r7, #4]
	data->err = 0x00;
   286fe:	2300      	movs	r3, #0
   28700:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   28702:	2295      	movs	r2, #149	; 0x95
   28704:	4631      	mov	r1, r6
   28706:	f001 f832 	bl	2976e <bt_gatt_check_perm>
   2870a:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2870c:	b9f0      	cbnz	r0, 2874c <read_vl_cb+0x5c>
   2870e:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   28710:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   28712:	68a0      	ldr	r0, [r4, #8]
   28714:	8a02      	ldrh	r2, [r0, #16]
   28716:	1a9b      	subs	r3, r3, r2
   28718:	2b01      	cmp	r3, #1
   2871a:	dd18      	ble.n	2874e <read_vl_cb+0x5e>
	return net_buf_simple_add(&buf->b, len);
   2871c:	2102      	movs	r1, #2
   2871e:	300c      	adds	r0, #12
   28720:	f001 fbdb 	bl	29eda <net_buf_simple_add>
   28724:	4680      	mov	r8, r0
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   28726:	2300      	movs	r3, #0
   28728:	9301      	str	r3, [sp, #4]
   2872a:	9300      	str	r3, [sp, #0]
   2872c:	88a3      	ldrh	r3, [r4, #4]
   2872e:	68a2      	ldr	r2, [r4, #8]
   28730:	4631      	mov	r1, r6
   28732:	4638      	mov	r0, r7
   28734:	f7ff ff32 	bl	2859c <att_chan_read>
	if (read < 0) {
   28738:	2800      	cmp	r0, #0
   2873a:	db03      	blt.n	28744 <read_vl_cb+0x54>
	rsp->len = read;
   2873c:	f8a8 0000 	strh.w	r0, [r8]
	return BT_GATT_ITER_CONTINUE;
   28740:	2501      	movs	r5, #1
   28742:	e004      	b.n	2874e <read_vl_cb+0x5e>
		data->err = err_to_att(read);
   28744:	f7ff fcc0 	bl	280c8 <err_to_att>
   28748:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   2874a:	e000      	b.n	2874e <read_vl_cb+0x5e>
		return BT_GATT_ITER_STOP;
   2874c:	2500      	movs	r5, #0
}
   2874e:	4628      	mov	r0, r5
   28750:	b002      	add	sp, #8
   28752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028756 <read_cb>:
{
   28756:	b5f0      	push	{r4, r5, r6, r7, lr}
   28758:	b083      	sub	sp, #12
   2875a:	4606      	mov	r6, r0
   2875c:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   2875e:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   28760:	6878      	ldr	r0, [r7, #4]
	data->err = 0x00;
   28762:	2300      	movs	r3, #0
   28764:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   28766:	2295      	movs	r2, #149	; 0x95
   28768:	4631      	mov	r1, r6
   2876a:	f001 f800 	bl	2976e <bt_gatt_check_perm>
   2876e:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   28770:	b118      	cbz	r0, 2877a <read_cb+0x24>
		return BT_GATT_ITER_STOP;
   28772:	2500      	movs	r5, #0
}
   28774:	4628      	mov	r0, r5
   28776:	b003      	add	sp, #12
   28778:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2877a:	4605      	mov	r5, r0
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2877c:	2300      	movs	r3, #0
   2877e:	9301      	str	r3, [sp, #4]
   28780:	9300      	str	r3, [sp, #0]
   28782:	88a3      	ldrh	r3, [r4, #4]
   28784:	68a2      	ldr	r2, [r4, #8]
   28786:	4631      	mov	r1, r6
   28788:	4638      	mov	r0, r7
   2878a:	f7ff ff07 	bl	2859c <att_chan_read>
	if (ret < 0) {
   2878e:	2800      	cmp	r0, #0
   28790:	db01      	blt.n	28796 <read_cb+0x40>
	return BT_GATT_ITER_CONTINUE;
   28792:	2501      	movs	r5, #1
   28794:	e7ee      	b.n	28774 <read_cb+0x1e>
		data->err = err_to_att(ret);
   28796:	f7ff fc97 	bl	280c8 <err_to_att>
   2879a:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   2879c:	e7ea      	b.n	28774 <read_cb+0x1e>

0002879e <find_info_cb>:
{
   2879e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   287a2:	4606      	mov	r6, r0
   287a4:	460f      	mov	r7, r1
   287a6:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   287a8:	f8d2 8000 	ldr.w	r8, [r2]
	if (!data->rsp) {
   287ac:	6893      	ldr	r3, [r2, #8]
   287ae:	b14b      	cbz	r3, 287c4 <find_info_cb+0x26>
	switch (data->rsp->format) {
   287b0:	68a3      	ldr	r3, [r4, #8]
   287b2:	781d      	ldrb	r5, [r3, #0]
   287b4:	2d01      	cmp	r5, #1
   287b6:	d013      	beq.n	287e0 <find_info_cb+0x42>
   287b8:	2d02      	cmp	r5, #2
   287ba:	d02d      	beq.n	28818 <find_info_cb+0x7a>
   287bc:	2500      	movs	r5, #0
}
   287be:	4628      	mov	r0, r5
   287c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   287c4:	6850      	ldr	r0, [r2, #4]
   287c6:	2101      	movs	r1, #1
   287c8:	300c      	adds	r0, #12
   287ca:	f001 fb86 	bl	29eda <net_buf_simple_add>
   287ce:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   287d0:	6833      	ldr	r3, [r6, #0]
   287d2:	781b      	ldrb	r3, [r3, #0]
   287d4:	b913      	cbnz	r3, 287dc <find_info_cb+0x3e>
   287d6:	2301      	movs	r3, #1
   287d8:	7003      	strb	r3, [r0, #0]
   287da:	e7e9      	b.n	287b0 <find_info_cb+0x12>
   287dc:	2302      	movs	r3, #2
   287de:	e7fb      	b.n	287d8 <find_info_cb+0x3a>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   287e0:	6833      	ldr	r3, [r6, #0]
   287e2:	f893 9000 	ldrb.w	r9, [r3]
   287e6:	f1b9 0f00 	cmp.w	r9, #0
   287ea:	d001      	beq.n	287f0 <find_info_cb+0x52>
			return BT_GATT_ITER_STOP;
   287ec:	2500      	movs	r5, #0
   287ee:	e7e6      	b.n	287be <find_info_cb+0x20>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   287f0:	6860      	ldr	r0, [r4, #4]
   287f2:	2104      	movs	r1, #4
   287f4:	300c      	adds	r0, #12
   287f6:	f001 fb70 	bl	29eda <net_buf_simple_add>
   287fa:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   287fc:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   287fe:	6832      	ldr	r2, [r6, #0]
   28800:	68e3      	ldr	r3, [r4, #12]
   28802:	8852      	ldrh	r2, [r2, #2]
   28804:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   28806:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2880a:	6862      	ldr	r2, [r4, #4]
   2880c:	8a12      	ldrh	r2, [r2, #16]
   2880e:	1a9b      	subs	r3, r3, r2
   28810:	2b04      	cmp	r3, #4
   28812:	d8d4      	bhi.n	287be <find_info_cb+0x20>
	return BT_GATT_ITER_STOP;
   28814:	464d      	mov	r5, r9
   28816:	e7d2      	b.n	287be <find_info_cb+0x20>
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   28818:	6833      	ldr	r3, [r6, #0]
   2881a:	781b      	ldrb	r3, [r3, #0]
   2881c:	2b02      	cmp	r3, #2
   2881e:	d001      	beq.n	28824 <find_info_cb+0x86>
			return BT_GATT_ITER_STOP;
   28820:	2500      	movs	r5, #0
   28822:	e7cc      	b.n	287be <find_info_cb+0x20>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   28824:	6860      	ldr	r0, [r4, #4]
   28826:	2112      	movs	r1, #18
   28828:	300c      	adds	r0, #12
   2882a:	f001 fb56 	bl	29eda <net_buf_simple_add>
   2882e:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   28830:	8007      	strh	r7, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   28832:	68e0      	ldr	r0, [r4, #12]
   28834:	6831      	ldr	r1, [r6, #0]
   28836:	2210      	movs	r2, #16
   28838:	3101      	adds	r1, #1
   2883a:	3002      	adds	r0, #2
   2883c:	f7fe fe46 	bl	274cc <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   28840:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   28844:	6862      	ldr	r2, [r4, #4]
   28846:	8a12      	ldrh	r2, [r2, #16]
   28848:	1a9b      	subs	r3, r3, r2
   2884a:	2b12      	cmp	r3, #18
   2884c:	d801      	bhi.n	28852 <find_info_cb+0xb4>
	return BT_GATT_ITER_STOP;
   2884e:	2500      	movs	r5, #0
   28850:	e7b5      	b.n	287be <find_info_cb+0x20>
			return BT_GATT_ITER_CONTINUE;
   28852:	2501      	movs	r5, #1
   28854:	e7b3      	b.n	287be <find_info_cb+0x20>

00028856 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   28856:	f001 021f 	and.w	r2, r1, #31
   2885a:	2301      	movs	r3, #1
   2885c:	4093      	lsls	r3, r2
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2885e:	0949      	lsrs	r1, r1, #5
   28860:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28864:	f3bf 8f5b 	dmb	ish
   28868:	e850 2f00 	ldrex	r2, [r0]
   2886c:	ea42 0103 	orr.w	r1, r2, r3
   28870:	e840 1c00 	strex	ip, r1, [r0]
   28874:	f1bc 0f00 	cmp.w	ip, #0
   28878:	d1f6      	bne.n	28868 <atomic_test_and_set_bit+0x12>
   2887a:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2887e:	4213      	tst	r3, r2
}
   28880:	bf14      	ite	ne
   28882:	2001      	movne	r0, #1
   28884:	2000      	moveq	r0, #0
   28886:	4770      	bx	lr

00028888 <att_sent>:
{
   28888:	b508      	push	{r3, lr}
	struct bt_att_chan *att_chan = data->att_chan;
   2888a:	680b      	ldr	r3, [r1, #0]
	struct bt_l2cap_chan *chan = &att_chan->chan.chan;
   2888c:	1d18      	adds	r0, r3, #4
	if (chan->ops->sent) {
   2888e:	689b      	ldr	r3, [r3, #8]
   28890:	699b      	ldr	r3, [r3, #24]
   28892:	b103      	cbz	r3, 28896 <att_sent+0xe>
		chan->ops->sent(chan);
   28894:	4798      	blx	r3
}
   28896:	bd08      	pop	{r3, pc}

00028898 <att_unknown>:
{
   28898:	b570      	push	{r4, r5, r6, lr}
   2889a:	4604      	mov	r4, r0
   2889c:	460d      	mov	r5, r1
	if (!err) {
   2889e:	4616      	mov	r6, r2
   288a0:	b12a      	cbz	r2, 288ae <att_unknown+0x16>
	chan_unknown(conn, user_data, err);
   288a2:	4632      	mov	r2, r6
   288a4:	4629      	mov	r1, r5
   288a6:	4620      	mov	r0, r4
   288a8:	f7ff fc62 	bl	28170 <chan_unknown>
}
   288ac:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   288ae:	f7ff ffeb 	bl	28888 <att_sent>
   288b2:	e7f6      	b.n	288a2 <att_unknown+0xa>

000288b4 <att_tx_complete>:
{
   288b4:	b570      	push	{r4, r5, r6, lr}
   288b6:	4604      	mov	r4, r0
   288b8:	460d      	mov	r5, r1
	if (!err) {
   288ba:	4616      	mov	r6, r2
   288bc:	b12a      	cbz	r2, 288ca <att_tx_complete+0x16>
	chan_tx_complete(conn, user_data, err);
   288be:	4632      	mov	r2, r6
   288c0:	4629      	mov	r1, r5
   288c2:	4620      	mov	r0, r4
   288c4:	f7ff fc59 	bl	2817a <chan_tx_complete>
}
   288c8:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   288ca:	f7ff ffdd 	bl	28888 <att_sent>
   288ce:	e7f6      	b.n	288be <att_tx_complete+0xa>

000288d0 <att_req_sent>:
{
   288d0:	b570      	push	{r4, r5, r6, lr}
   288d2:	4604      	mov	r4, r0
   288d4:	460d      	mov	r5, r1
	if (!err) {
   288d6:	4616      	mov	r6, r2
   288d8:	b12a      	cbz	r2, 288e6 <att_req_sent+0x16>
	chan_req_sent(conn, user_data, err);
   288da:	4632      	mov	r2, r6
   288dc:	4629      	mov	r1, r5
   288de:	4620      	mov	r0, r4
   288e0:	f7ff fd03 	bl	282ea <chan_req_sent>
}
   288e4:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   288e6:	f7ff ffcf 	bl	28888 <att_sent>
   288ea:	e7f6      	b.n	288da <att_req_sent+0xa>

000288ec <att_cfm_sent>:
{
   288ec:	b570      	push	{r4, r5, r6, lr}
   288ee:	4604      	mov	r4, r0
   288f0:	460d      	mov	r5, r1
	if (!err) {
   288f2:	4616      	mov	r6, r2
   288f4:	b12a      	cbz	r2, 28902 <att_cfm_sent+0x16>
	chan_cfm_sent(conn, user_data, err);
   288f6:	4632      	mov	r2, r6
   288f8:	4629      	mov	r1, r5
   288fa:	4620      	mov	r0, r4
   288fc:	f7ff fd05 	bl	2830a <chan_cfm_sent>
}
   28900:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   28902:	f7ff ffc1 	bl	28888 <att_sent>
   28906:	e7f6      	b.n	288f6 <att_cfm_sent+0xa>

00028908 <att_rsp_sent>:
{
   28908:	b570      	push	{r4, r5, r6, lr}
   2890a:	4604      	mov	r4, r0
   2890c:	460d      	mov	r5, r1
	if (!err) {
   2890e:	4616      	mov	r6, r2
   28910:	b12a      	cbz	r2, 2891e <att_rsp_sent+0x16>
	chan_rsp_sent(conn, user_data, err);
   28912:	4632      	mov	r2, r6
   28914:	4629      	mov	r1, r5
   28916:	4620      	mov	r0, r4
   28918:	f7ff fd0a 	bl	28330 <chan_rsp_sent>
}
   2891c:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   2891e:	f7ff ffb3 	bl	28888 <att_sent>
   28922:	e7f6      	b.n	28912 <att_rsp_sent+0xa>

00028924 <att_indicate>:
{
   28924:	b538      	push	{r3, r4, r5, lr}
   28926:	4605      	mov	r5, r0
   28928:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   2892a:	f101 000c 	add.w	r0, r1, #12
   2892e:	f001 fb0e 	bl	29f4e <net_buf_simple_pull_le16>
   28932:	4601      	mov	r1, r0
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   28934:	8a23      	ldrh	r3, [r4, #16]
   28936:	68e2      	ldr	r2, [r4, #12]
   28938:	6828      	ldr	r0, [r5, #0]
   2893a:	6800      	ldr	r0, [r0, #0]
   2893c:	f001 f89e 	bl	29a7c <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   28940:	2200      	movs	r2, #0
   28942:	211e      	movs	r1, #30
   28944:	4628      	mov	r0, r5
   28946:	f7f3 fe95 	bl	1c674 <bt_att_chan_create_pdu>
	if (!buf) {
   2894a:	b118      	cbz	r0, 28954 <att_indicate+0x30>
   2894c:	4601      	mov	r1, r0
	bt_att_chan_send_rsp(chan, buf);
   2894e:	4628      	mov	r0, r5
   28950:	f7ff fdaf 	bl	284b2 <bt_att_chan_send_rsp>
}
   28954:	2000      	movs	r0, #0
   28956:	bd38      	pop	{r3, r4, r5, pc}

00028958 <send_err_rsp>:
	if (!req) {
   28958:	b901      	cbnz	r1, 2895c <send_err_rsp+0x4>
   2895a:	4770      	bx	lr
{
   2895c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28960:	4606      	mov	r6, r0
   28962:	4615      	mov	r5, r2
   28964:	461c      	mov	r4, r3
   28966:	460f      	mov	r7, r1
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   28968:	2204      	movs	r2, #4
   2896a:	2101      	movs	r1, #1
   2896c:	f7f3 fe82 	bl	1c674 <bt_att_chan_create_pdu>
	if (!buf) {
   28970:	4680      	mov	r8, r0
   28972:	b158      	cbz	r0, 2898c <send_err_rsp+0x34>
	return net_buf_simple_add(&buf->b, len);
   28974:	2104      	movs	r1, #4
   28976:	300c      	adds	r0, #12
   28978:	f001 faaf 	bl	29eda <net_buf_simple_add>
	rsp->request = req;
   2897c:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
   2897e:	f8a0 5001 	strh.w	r5, [r0, #1]
	rsp->error = err;
   28982:	70c4      	strb	r4, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   28984:	4641      	mov	r1, r8
   28986:	4630      	mov	r0, r6
   28988:	f7ff fd93 	bl	284b2 <bt_att_chan_send_rsp>
}
   2898c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028990 <att_write_cmd>:
{
   28990:	b530      	push	{r4, r5, lr}
   28992:	b085      	sub	sp, #20
   28994:	4605      	mov	r5, r0
   28996:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   28998:	f101 000c 	add.w	r0, r1, #12
   2899c:	f001 fad7 	bl	29f4e <net_buf_simple_pull_le16>
   289a0:	4603      	mov	r3, r0
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   289a2:	68e2      	ldr	r2, [r4, #12]
   289a4:	8a21      	ldrh	r1, [r4, #16]
   289a6:	9102      	str	r1, [sp, #8]
   289a8:	9201      	str	r2, [sp, #4]
   289aa:	2100      	movs	r1, #0
   289ac:	9100      	str	r1, [sp, #0]
   289ae:	460a      	mov	r2, r1
   289b0:	4628      	mov	r0, r5
   289b2:	f7f4 f8b3 	bl	1cb1c <att_write_rsp>
}
   289b6:	b005      	add	sp, #20
   289b8:	bd30      	pop	{r4, r5, pc}

000289ba <att_write_req>:
{
   289ba:	b530      	push	{r4, r5, lr}
   289bc:	b085      	sub	sp, #20
   289be:	4605      	mov	r5, r0
   289c0:	460c      	mov	r4, r1
   289c2:	f101 000c 	add.w	r0, r1, #12
   289c6:	f001 fac2 	bl	29f4e <net_buf_simple_pull_le16>
   289ca:	4603      	mov	r3, r0
			     handle, 0, buf->data, buf->len);
   289cc:	68e2      	ldr	r2, [r4, #12]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   289ce:	8a21      	ldrh	r1, [r4, #16]
   289d0:	9102      	str	r1, [sp, #8]
   289d2:	9201      	str	r2, [sp, #4]
   289d4:	2200      	movs	r2, #0
   289d6:	9200      	str	r2, [sp, #0]
   289d8:	2213      	movs	r2, #19
   289da:	2112      	movs	r1, #18
   289dc:	4628      	mov	r0, r5
   289de:	f7f4 f89d 	bl	1cb1c <att_write_rsp>
}
   289e2:	b005      	add	sp, #20
   289e4:	bd30      	pop	{r4, r5, pc}

000289e6 <att_read_group_req>:
{
   289e6:	b5f0      	push	{r4, r5, r6, r7, lr}
   289e8:	b089      	sub	sp, #36	; 0x24
   289ea:	4605      	mov	r5, r0
   289ec:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   289ee:	7c0c      	ldrb	r4, [r1, #16]
   289f0:	3c04      	subs	r4, #4
   289f2:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   289f4:	2c02      	cmp	r4, #2
   289f6:	d001      	beq.n	289fc <att_read_group_req+0x16>
   289f8:	2c10      	cmp	r4, #16
   289fa:	d142      	bne.n	28a82 <att_read_group_req+0x9c>
	return net_buf_simple_pull_mem(&buf->b, len);
   289fc:	2104      	movs	r1, #4
   289fe:	300c      	adds	r0, #12
   28a00:	f001 fa95 	bl	29f2e <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   28a04:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   28a06:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   28a08:	4622      	mov	r2, r4
   28a0a:	1d01      	adds	r1, r0, #4
   28a0c:	a801      	add	r0, sp, #4
   28a0e:	f7fe fdfb 	bl	27608 <bt_uuid_create>
   28a12:	b3c8      	cbz	r0, 28a88 <att_read_group_req+0xa2>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   28a14:	f10d 0216 	add.w	r2, sp, #22
   28a18:	4639      	mov	r1, r7
   28a1a:	4630      	mov	r0, r6
   28a1c:	f7ff fb45 	bl	280aa <range_is_valid>
   28a20:	b1f0      	cbz	r0, 28a60 <att_read_group_req+0x7a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   28a22:	2300      	movs	r3, #0
   28a24:	f88d 3018 	strb.w	r3, [sp, #24]
   28a28:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   28a2c:	f8ad 301a 	strh.w	r3, [sp, #26]
   28a30:	a906      	add	r1, sp, #24
   28a32:	a801      	add	r0, sp, #4
   28a34:	f7fe fdca 	bl	275cc <bt_uuid_cmp>
   28a38:	b158      	cbz	r0, 28a52 <att_read_group_req+0x6c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   28a3a:	2300      	movs	r3, #0
   28a3c:	f88d 301c 	strb.w	r3, [sp, #28]
   28a40:	f642 0301 	movw	r3, #10241	; 0x2801
   28a44:	f8ad 301e 	strh.w	r3, [sp, #30]
   28a48:	a907      	add	r1, sp, #28
   28a4a:	a801      	add	r0, sp, #4
   28a4c:	f7fe fdbe 	bl	275cc <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   28a50:	b978      	cbnz	r0, 28a72 <att_read_group_req+0x8c>
	return att_read_group_rsp(chan, &u.uuid, start_handle, end_handle);
   28a52:	463b      	mov	r3, r7
   28a54:	4632      	mov	r2, r6
   28a56:	a901      	add	r1, sp, #4
   28a58:	4628      	mov	r0, r5
   28a5a:	f7f4 f943 	bl	1cce4 <att_read_group_rsp>
   28a5e:	e011      	b.n	28a84 <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, err_handle,
   28a60:	2301      	movs	r3, #1
   28a62:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   28a66:	2110      	movs	r1, #16
   28a68:	4628      	mov	r0, r5
   28a6a:	f7ff ff75 	bl	28958 <send_err_rsp>
		return 0;
   28a6e:	2000      	movs	r0, #0
   28a70:	e008      	b.n	28a84 <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   28a72:	2310      	movs	r3, #16
   28a74:	4632      	mov	r2, r6
   28a76:	4619      	mov	r1, r3
   28a78:	4628      	mov	r0, r5
   28a7a:	f7ff ff6d 	bl	28958 <send_err_rsp>
		return 0;
   28a7e:	2000      	movs	r0, #0
   28a80:	e000      	b.n	28a84 <att_read_group_req+0x9e>
		return BT_ATT_ERR_INVALID_PDU;
   28a82:	2004      	movs	r0, #4
}
   28a84:	b009      	add	sp, #36	; 0x24
   28a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_UNLIKELY;
   28a88:	200e      	movs	r0, #14
   28a8a:	e7fb      	b.n	28a84 <att_read_group_req+0x9e>

00028a8c <att_read_blob_req>:
{
   28a8c:	b500      	push	{lr}
   28a8e:	b083      	sub	sp, #12
	req = (void *)buf->data;
   28a90:	68ca      	ldr	r2, [r1, #12]
	handle = sys_le16_to_cpu(req->handle);
   28a92:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
   28a94:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   28a96:	9200      	str	r2, [sp, #0]
   28a98:	220d      	movs	r2, #13
   28a9a:	210c      	movs	r1, #12
   28a9c:	f7f4 fa16 	bl	1cecc <att_read_rsp>
}
   28aa0:	b003      	add	sp, #12
   28aa2:	f85d fb04 	ldr.w	pc, [sp], #4

00028aa6 <att_read_req>:
{
   28aa6:	b500      	push	{lr}
   28aa8:	b083      	sub	sp, #12
	req = (void *)buf->data;
   28aaa:	68cb      	ldr	r3, [r1, #12]
	handle = sys_le16_to_cpu(req->handle);
   28aac:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   28aae:	2200      	movs	r2, #0
   28ab0:	9200      	str	r2, [sp, #0]
   28ab2:	220b      	movs	r2, #11
   28ab4:	210a      	movs	r1, #10
   28ab6:	f7f4 fa09 	bl	1cecc <att_read_rsp>
}
   28aba:	b003      	add	sp, #12
   28abc:	f85d fb04 	ldr.w	pc, [sp], #4

00028ac0 <att_read_type_req>:
{
   28ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
   28ac2:	b087      	sub	sp, #28
   28ac4:	4605      	mov	r5, r0
   28ac6:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   28ac8:	7c0c      	ldrb	r4, [r1, #16]
   28aca:	3c04      	subs	r4, #4
   28acc:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   28ace:	2c02      	cmp	r4, #2
   28ad0:	d001      	beq.n	28ad6 <att_read_type_req+0x16>
   28ad2:	2c10      	cmp	r4, #16
   28ad4:	d123      	bne.n	28b1e <att_read_type_req+0x5e>
   28ad6:	2104      	movs	r1, #4
   28ad8:	300c      	adds	r0, #12
   28ada:	f001 fa28 	bl	29f2e <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   28ade:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   28ae0:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   28ae2:	4622      	mov	r2, r4
   28ae4:	1d01      	adds	r1, r0, #4
   28ae6:	a801      	add	r0, sp, #4
   28ae8:	f7fe fd8e 	bl	27608 <bt_uuid_create>
   28aec:	b1c8      	cbz	r0, 28b22 <att_read_type_req+0x62>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   28aee:	f10d 0216 	add.w	r2, sp, #22
   28af2:	4639      	mov	r1, r7
   28af4:	4630      	mov	r0, r6
   28af6:	f7ff fad8 	bl	280aa <range_is_valid>
   28afa:	b138      	cbz	r0, 28b0c <att_read_type_req+0x4c>
	return att_read_type_rsp(chan, &u.uuid, start_handle, end_handle);
   28afc:	463b      	mov	r3, r7
   28afe:	4632      	mov	r2, r6
   28b00:	a901      	add	r1, sp, #4
   28b02:	4628      	mov	r0, r5
   28b04:	f7f4 fa3c 	bl	1cf80 <att_read_type_rsp>
}
   28b08:	b007      	add	sp, #28
   28b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, err_handle,
   28b0c:	2301      	movs	r3, #1
   28b0e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   28b12:	2108      	movs	r1, #8
   28b14:	4628      	mov	r0, r5
   28b16:	f7ff ff1f 	bl	28958 <send_err_rsp>
		return 0;
   28b1a:	2000      	movs	r0, #0
   28b1c:	e7f4      	b.n	28b08 <att_read_type_req+0x48>
		return BT_ATT_ERR_INVALID_PDU;
   28b1e:	2004      	movs	r0, #4
   28b20:	e7f2      	b.n	28b08 <att_read_type_req+0x48>
		return BT_ATT_ERR_UNLIKELY;
   28b22:	200e      	movs	r0, #14
   28b24:	e7f0      	b.n	28b08 <att_read_type_req+0x48>

00028b26 <att_find_type_req>:
{
   28b26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28b2a:	b087      	sub	sp, #28
   28b2c:	4607      	mov	r7, r0
   28b2e:	460c      	mov	r4, r1
   28b30:	2106      	movs	r1, #6
   28b32:	f104 000c 	add.w	r0, r4, #12
   28b36:	f001 f9fa 	bl	29f2e <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   28b3a:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   28b3c:	8846      	ldrh	r6, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   28b3e:	f8b0 8004 	ldrh.w	r8, [r0, #4]
	value = buf->data;
   28b42:	f8d4 900c 	ldr.w	r9, [r4, #12]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   28b46:	f10d 020e 	add.w	r2, sp, #14
   28b4a:	4631      	mov	r1, r6
   28b4c:	4628      	mov	r0, r5
   28b4e:	f7ff faac 	bl	280aa <range_is_valid>
   28b52:	b1d0      	cbz	r0, 28b8a <att_find_type_req+0x64>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   28b54:	2300      	movs	r3, #0
   28b56:	f88d 3010 	strb.w	r3, [sp, #16]
   28b5a:	f8ad 8012 	strh.w	r8, [sp, #18]
   28b5e:	f88d 3014 	strb.w	r3, [sp, #20]
   28b62:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   28b66:	f8ad 3016 	strh.w	r3, [sp, #22]
   28b6a:	a905      	add	r1, sp, #20
   28b6c:	a804      	add	r0, sp, #16
   28b6e:	f7fe fd2d 	bl	275cc <bt_uuid_cmp>
   28b72:	b998      	cbnz	r0, 28b9c <att_find_type_req+0x76>
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   28b74:	7c23      	ldrb	r3, [r4, #16]
   28b76:	9300      	str	r3, [sp, #0]
   28b78:	464b      	mov	r3, r9
   28b7a:	4632      	mov	r2, r6
   28b7c:	4629      	mov	r1, r5
   28b7e:	4638      	mov	r0, r7
   28b80:	f7f4 fa48 	bl	1d014 <att_find_type_rsp>
}
   28b84:	b007      	add	sp, #28
   28b86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
   28b8a:	2301      	movs	r3, #1
   28b8c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   28b90:	2106      	movs	r1, #6
   28b92:	4638      	mov	r0, r7
   28b94:	f7ff fee0 	bl	28958 <send_err_rsp>
		return 0;
   28b98:	2000      	movs	r0, #0
   28b9a:	e7f3      	b.n	28b84 <att_find_type_req+0x5e>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   28b9c:	230a      	movs	r3, #10
   28b9e:	462a      	mov	r2, r5
   28ba0:	2106      	movs	r1, #6
   28ba2:	4638      	mov	r0, r7
   28ba4:	f7ff fed8 	bl	28958 <send_err_rsp>
		return 0;
   28ba8:	2000      	movs	r0, #0
   28baa:	e7eb      	b.n	28b84 <att_find_type_req+0x5e>

00028bac <att_find_info_req>:
{
   28bac:	b570      	push	{r4, r5, r6, lr}
   28bae:	b082      	sub	sp, #8
   28bb0:	4604      	mov	r4, r0
	req = (void *)buf->data;
   28bb2:	68cb      	ldr	r3, [r1, #12]
	start_handle = sys_le16_to_cpu(req->start_handle);
   28bb4:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   28bb6:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   28bb8:	f10d 0206 	add.w	r2, sp, #6
   28bbc:	4631      	mov	r1, r6
   28bbe:	4628      	mov	r0, r5
   28bc0:	f7ff fa73 	bl	280aa <range_is_valid>
   28bc4:	b130      	cbz	r0, 28bd4 <att_find_info_req+0x28>
	return att_find_info_rsp(chan, start_handle, end_handle);
   28bc6:	4632      	mov	r2, r6
   28bc8:	4629      	mov	r1, r5
   28bca:	4620      	mov	r0, r4
   28bcc:	f7f4 fa6c 	bl	1d0a8 <att_find_info_rsp>
}
   28bd0:	b002      	add	sp, #8
   28bd2:	bd70      	pop	{r4, r5, r6, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, err_handle,
   28bd4:	2301      	movs	r3, #1
   28bd6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   28bda:	2104      	movs	r1, #4
   28bdc:	4620      	mov	r0, r4
   28bde:	f7ff febb 	bl	28958 <send_err_rsp>
		return 0;
   28be2:	2000      	movs	r0, #0
   28be4:	e7f4      	b.n	28bd0 <att_find_info_req+0x24>

00028be6 <att_mtu_req>:
{
   28be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28bea:	4604      	mov	r4, r0
   28bec:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->att->conn;
   28bee:	f850 3b90 	ldr.w	r3, [r0], #144
   28bf2:	681f      	ldr	r7, [r3, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   28bf4:	2103      	movs	r1, #3
   28bf6:	f7ff faae 	bl	28156 <atomic_test_bit>
   28bfa:	bb78      	cbnz	r0, 28c5c <att_mtu_req+0x76>
	req = (void *)buf->data;
   28bfc:	68eb      	ldr	r3, [r5, #12]
	mtu_client = sys_le16_to_cpu(req->mtu);
   28bfe:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   28c00:	2e16      	cmp	r6, #22
   28c02:	d92d      	bls.n	28c60 <att_mtu_req+0x7a>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   28c04:	2202      	movs	r2, #2
   28c06:	2103      	movs	r1, #3
   28c08:	4638      	mov	r0, r7
   28c0a:	f7f3 fff7 	bl	1cbfc <bt_att_create_pdu>
	if (!pdu) {
   28c0e:	4680      	mov	r8, r0
   28c10:	b340      	cbz	r0, 28c64 <att_mtu_req+0x7e>
	return net_buf_simple_add(&buf->b, len);
   28c12:	2102      	movs	r1, #2
   28c14:	300c      	adds	r0, #12
   28c16:	f001 f960 	bl	29eda <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   28c1a:	2500      	movs	r5, #0
   28c1c:	f06f 0308 	mvn.w	r3, #8
   28c20:	7003      	strb	r3, [r0, #0]
   28c22:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   28c24:	4641      	mov	r1, r8
   28c26:	4620      	mov	r0, r4
   28c28:	f7ff fc43 	bl	284b2 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   28c2c:	2ef7      	cmp	r6, #247	; 0xf7
   28c2e:	bf28      	it	cs
   28c30:	26f7      	movcs	r6, #247	; 0xf7
   28c32:	8366      	strh	r6, [r4, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   28c34:	8566      	strh	r6, [r4, #42]	; 0x2a
	atomic_set_bit(conn->flags, BT_CONN_ATT_MTU_EXCHANGED);
   28c36:	3704      	adds	r7, #4
   28c38:	f3bf 8f5b 	dmb	ish
   28c3c:	e857 3f00 	ldrex	r3, [r7]
   28c40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   28c44:	e847 3200 	strex	r2, r3, [r7]
   28c48:	2a00      	cmp	r2, #0
   28c4a:	d1f7      	bne.n	28c3c <att_mtu_req+0x56>
   28c4c:	f3bf 8f5b 	dmb	ish
	att_chan_mtu_updated(chan);
   28c50:	4620      	mov	r0, r4
   28c52:	f7ff fc3b 	bl	284cc <att_chan_mtu_updated>
	return 0;
   28c56:	4628      	mov	r0, r5
}
   28c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   28c5c:	2006      	movs	r0, #6
   28c5e:	e7fb      	b.n	28c58 <att_mtu_req+0x72>
		return BT_ATT_ERR_INVALID_PDU;
   28c60:	2004      	movs	r0, #4
   28c62:	e7f9      	b.n	28c58 <att_mtu_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   28c64:	200e      	movs	r0, #14
   28c66:	e7f7      	b.n	28c58 <att_mtu_req+0x72>

00028c68 <att_handle_exec_write_rsp>:
{
   28c68:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   28c6a:	2300      	movs	r3, #0
   28c6c:	8a0a      	ldrh	r2, [r1, #16]
   28c6e:	68c9      	ldr	r1, [r1, #12]
   28c70:	f7f4 faaa 	bl	1d1c8 <att_handle_rsp>
}
   28c74:	bd08      	pop	{r3, pc}

00028c76 <att_handle_prepare_write_rsp>:
{
   28c76:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   28c78:	2300      	movs	r3, #0
   28c7a:	8a0a      	ldrh	r2, [r1, #16]
   28c7c:	68c9      	ldr	r1, [r1, #12]
   28c7e:	f7f4 faa3 	bl	1d1c8 <att_handle_rsp>
}
   28c82:	bd08      	pop	{r3, pc}

00028c84 <att_handle_write_rsp>:
{
   28c84:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   28c86:	2300      	movs	r3, #0
   28c88:	8a0a      	ldrh	r2, [r1, #16]
   28c8a:	68c9      	ldr	r1, [r1, #12]
   28c8c:	f7f4 fa9c 	bl	1d1c8 <att_handle_rsp>
}
   28c90:	bd08      	pop	{r3, pc}

00028c92 <att_handle_read_group_rsp>:
{
   28c92:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   28c94:	2300      	movs	r3, #0
   28c96:	8a0a      	ldrh	r2, [r1, #16]
   28c98:	68c9      	ldr	r1, [r1, #12]
   28c9a:	f7f4 fa95 	bl	1d1c8 <att_handle_rsp>
}
   28c9e:	bd08      	pop	{r3, pc}

00028ca0 <att_handle_read_mult_vl_rsp>:
{
   28ca0:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   28ca2:	2300      	movs	r3, #0
   28ca4:	8a0a      	ldrh	r2, [r1, #16]
   28ca6:	68c9      	ldr	r1, [r1, #12]
   28ca8:	f7f4 fa8e 	bl	1d1c8 <att_handle_rsp>
}
   28cac:	bd08      	pop	{r3, pc}

00028cae <att_handle_read_mult_rsp>:
{
   28cae:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   28cb0:	2300      	movs	r3, #0
   28cb2:	8a0a      	ldrh	r2, [r1, #16]
   28cb4:	68c9      	ldr	r1, [r1, #12]
   28cb6:	f7f4 fa87 	bl	1d1c8 <att_handle_rsp>
}
   28cba:	bd08      	pop	{r3, pc}

00028cbc <att_handle_read_blob_rsp>:
{
   28cbc:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   28cbe:	2300      	movs	r3, #0
   28cc0:	8a0a      	ldrh	r2, [r1, #16]
   28cc2:	68c9      	ldr	r1, [r1, #12]
   28cc4:	f7f4 fa80 	bl	1d1c8 <att_handle_rsp>
}
   28cc8:	bd08      	pop	{r3, pc}

00028cca <att_handle_read_rsp>:
{
   28cca:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   28ccc:	2300      	movs	r3, #0
   28cce:	8a0a      	ldrh	r2, [r1, #16]
   28cd0:	68c9      	ldr	r1, [r1, #12]
   28cd2:	f7f4 fa79 	bl	1d1c8 <att_handle_rsp>
}
   28cd6:	bd08      	pop	{r3, pc}

00028cd8 <att_handle_read_type_rsp>:
{
   28cd8:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   28cda:	2300      	movs	r3, #0
   28cdc:	8a0a      	ldrh	r2, [r1, #16]
   28cde:	68c9      	ldr	r1, [r1, #12]
   28ce0:	f7f4 fa72 	bl	1d1c8 <att_handle_rsp>
}
   28ce4:	bd08      	pop	{r3, pc}

00028ce6 <att_handle_find_type_rsp>:
{
   28ce6:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   28ce8:	2300      	movs	r3, #0
   28cea:	8a0a      	ldrh	r2, [r1, #16]
   28cec:	68c9      	ldr	r1, [r1, #12]
   28cee:	f7f4 fa6b 	bl	1d1c8 <att_handle_rsp>
}
   28cf2:	bd08      	pop	{r3, pc}

00028cf4 <att_handle_find_info_rsp>:
{
   28cf4:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   28cf6:	2300      	movs	r3, #0
   28cf8:	8a0a      	ldrh	r2, [r1, #16]
   28cfa:	68c9      	ldr	r1, [r1, #12]
   28cfc:	f7f4 fa64 	bl	1d1c8 <att_handle_rsp>
}
   28d00:	bd08      	pop	{r3, pc}

00028d02 <att_mtu_rsp>:
{
   28d02:	b570      	push	{r4, r5, r6, lr}
   28d04:	4604      	mov	r4, r0
	rsp = (void *)buf->data;
   28d06:	68ce      	ldr	r6, [r1, #12]
	mtu = sys_le16_to_cpu(rsp->mtu);
   28d08:	8833      	ldrh	r3, [r6, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   28d0a:	2b16      	cmp	r3, #22
   28d0c:	d90e      	bls.n	28d2c <att_mtu_rsp+0x2a>
   28d0e:	460d      	mov	r5, r1
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   28d10:	2bf7      	cmp	r3, #247	; 0xf7
   28d12:	bf28      	it	cs
   28d14:	23f7      	movcs	r3, #247	; 0xf7
   28d16:	8343      	strh	r3, [r0, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   28d18:	8543      	strh	r3, [r0, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   28d1a:	f7ff fbd7 	bl	284cc <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   28d1e:	2300      	movs	r3, #0
   28d20:	8a2a      	ldrh	r2, [r5, #16]
   28d22:	4631      	mov	r1, r6
   28d24:	4620      	mov	r0, r4
   28d26:	f7f4 fa4f 	bl	1d1c8 <att_handle_rsp>
}
   28d2a:	bd70      	pop	{r4, r5, r6, pc}
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   28d2c:	2304      	movs	r3, #4
   28d2e:	2200      	movs	r2, #0
   28d30:	4611      	mov	r1, r2
   28d32:	f7f4 fa49 	bl	1d1c8 <att_handle_rsp>
   28d36:	e7f8      	b.n	28d2a <att_mtu_rsp+0x28>

00028d38 <att_confirm>:
{
   28d38:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   28d3a:	2300      	movs	r3, #0
   28d3c:	8a0a      	ldrh	r2, [r1, #16]
   28d3e:	68c9      	ldr	r1, [r1, #12]
   28d40:	f7f4 fa42 	bl	1d1c8 <att_handle_rsp>
}
   28d44:	bd08      	pop	{r3, pc}

00028d46 <att_chan_detach>:
{
   28d46:	b538      	push	{r3, r4, r5, lr}
   28d48:	4605      	mov	r5, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   28d4a:	4601      	mov	r1, r0
   28d4c:	f851 0be0 	ldr.w	r0, [r1], #224
   28d50:	3024      	adds	r0, #36	; 0x24
   28d52:	f7ff f98f 	bl	28074 <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   28d56:	e005      	b.n	28d64 <att_chan_detach+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   28d58:	69a0      	ldr	r0, [r4, #24]
   28d5a:	f7f3 f9fd 	bl	1c158 <tx_meta_data_free>
		net_buf_unref(buf);
   28d5e:	4620      	mov	r0, r4
   28d60:	f001 f874 	bl	29e4c <net_buf_unref>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   28d64:	2200      	movs	r2, #0
   28d66:	2300      	movs	r3, #0
   28d68:	f105 0098 	add.w	r0, r5, #152	; 0x98
   28d6c:	f001 f82e 	bl	29dcc <net_buf_get>
   28d70:	4604      	mov	r4, r0
   28d72:	2800      	cmp	r0, #0
   28d74:	d1f0      	bne.n	28d58 <att_chan_detach+0x12>
	if (chan->req) {
   28d76:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   28d7a:	b12b      	cbz	r3, 28d88 <att_chan_detach+0x42>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   28d7c:	230e      	movs	r3, #14
   28d7e:	2200      	movs	r2, #0
   28d80:	4611      	mov	r1, r2
   28d82:	4628      	mov	r0, r5
   28d84:	f7f4 fa20 	bl	1d1c8 <att_handle_rsp>
	chan->att = NULL;
   28d88:	2300      	movs	r3, #0
   28d8a:	602b      	str	r3, [r5, #0]
}
   28d8c:	bd38      	pop	{r3, r4, r5, pc}

00028d8e <bt_att_disconnected>:
{
   28d8e:	b538      	push	{r3, r4, r5, lr}
   28d90:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   28d92:	f850 5c04 	ldr.w	r5, [r0, #-4]
	if (!att_chan->att) {
   28d96:	b125      	cbz	r5, 28da2 <bt_att_disconnected+0x14>
   28d98:	3804      	subs	r0, #4
	att_chan_detach(att_chan);
   28d9a:	f7ff ffd4 	bl	28d46 <att_chan_detach>
	return list->head;
   28d9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (!sys_slist_is_empty(&att->chans)) {
   28da0:	b103      	cbz	r3, 28da4 <bt_att_disconnected+0x16>
}
   28da2:	bd38      	pop	{r3, r4, r5, pc}
	att_reset(att);
   28da4:	4628      	mov	r0, r5
   28da6:	f7f4 fa85 	bl	1d2b4 <att_reset>
	bt_gatt_disconnected(le_chan->chan.conn);
   28daa:	6820      	ldr	r0, [r4, #0]
   28dac:	f7f5 fe1a 	bl	1e9e4 <bt_gatt_disconnected>
   28db0:	e7f7      	b.n	28da2 <bt_att_disconnected+0x14>

00028db2 <bt_att_send>:
{
   28db2:	b538      	push	{r3, r4, r5, lr}
   28db4:	460c      	mov	r4, r1
	att = att_get(conn);
   28db6:	f7f3 f85d 	bl	1be74 <att_get>
	if (!att) {
   28dba:	b148      	cbz	r0, 28dd0 <bt_att_send+0x1e>
   28dbc:	4605      	mov	r5, r0
	net_buf_put(&att->tx_queue, buf);
   28dbe:	4621      	mov	r1, r4
   28dc0:	300c      	adds	r0, #12
   28dc2:	f001 f83f 	bl	29e44 <net_buf_put>
	att_send_process(att);
   28dc6:	4628      	mov	r0, r5
   28dc8:	f7ff fb20 	bl	2840c <att_send_process>
	return 0;
   28dcc:	2000      	movs	r0, #0
}
   28dce:	bd38      	pop	{r3, r4, r5, pc}
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   28dd0:	69a0      	ldr	r0, [r4, #24]
   28dd2:	f7f3 f9c1 	bl	1c158 <tx_meta_data_free>
		net_buf_unref(buf);
   28dd6:	4620      	mov	r0, r4
   28dd8:	f001 f838 	bl	29e4c <net_buf_unref>
		return -ENOTCONN;
   28ddc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   28de0:	e7f5      	b.n	28dce <bt_att_send+0x1c>

00028de2 <bt_att_req_send>:
{
   28de2:	b510      	push	{r4, lr}
   28de4:	460c      	mov	r4, r1
	att = att_get(conn);
   28de6:	f7f3 f845 	bl	1be74 <att_get>
	if (!att) {
   28dea:	b170      	cbz	r0, 28e0a <bt_att_req_send+0x28>
   28dec:	4603      	mov	r3, r0
	parent->next = child;
   28dee:	2200      	movs	r2, #0
   28df0:	6022      	str	r2, [r4, #0]
	return list->tail;
   28df2:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   28df4:	b132      	cbz	r2, 28e04 <bt_att_req_send+0x22>
	parent->next = child;
   28df6:	6014      	str	r4, [r2, #0]
	list->tail = node;
   28df8:	6084      	str	r4, [r0, #8]
	att_req_send_process(att);
   28dfa:	4618      	mov	r0, r3
   28dfc:	f7ff fa26 	bl	2824c <att_req_send_process>
	return 0;
   28e00:	2000      	movs	r0, #0
}
   28e02:	bd10      	pop	{r4, pc}
   28e04:	6084      	str	r4, [r0, #8]
	list->head = node;
   28e06:	6044      	str	r4, [r0, #4]
}
   28e08:	e7f7      	b.n	28dfa <bt_att_req_send+0x18>
		return -ENOTCONN;
   28e0a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   28e0e:	e7f8      	b.n	28e02 <bt_att_req_send+0x20>

00028e10 <bt_att_req_cancel>:
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	LOG_DBG("req %p", req);

	if (!conn || !req) {
   28e10:	b358      	cbz	r0, 28e6a <bt_att_req_cancel+0x5a>
{
   28e12:	b570      	push	{r4, r5, r6, lr}
   28e14:	460d      	mov	r5, r1
	if (!conn || !req) {
   28e16:	b339      	cbz	r1, 28e68 <bt_att_req_cancel+0x58>
		return;
	}

	att = att_get(conn);
   28e18:	f7f3 f82c 	bl	1be74 <att_get>
	if (!att) {
   28e1c:	4606      	mov	r6, r0
   28e1e:	b318      	cbz	r0, 28e68 <bt_att_req_cancel+0x58>
	return list->head;
   28e20:	6a40      	ldr	r0, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   28e22:	b140      	cbz	r0, 28e36 <bt_att_req_cancel+0x26>
   28e24:	38e0      	subs	r0, #224	; 0xe0
Z_GENLIST_PEEK_NEXT(slist, snode)
   28e26:	f110 04e0 	adds.w	r4, r0, #224	; 0xe0
   28e2a:	d009      	beq.n	28e40 <bt_att_req_cancel+0x30>
	return node->next;
   28e2c:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
   28e30:	b134      	cbz	r4, 28e40 <bt_att_req_cancel+0x30>
   28e32:	3ce0      	subs	r4, #224	; 0xe0
   28e34:	e004      	b.n	28e40 <bt_att_req_cancel+0x30>
   28e36:	4604      	mov	r4, r0
   28e38:	e002      	b.n	28e40 <bt_att_req_cancel+0x30>
   28e3a:	4623      	mov	r3, r4
   28e3c:	4620      	mov	r0, r4
   28e3e:	461c      	mov	r4, r3
   28e40:	b158      	cbz	r0, 28e5a <bt_att_req_cancel+0x4a>
		/* Check if request is outstanding */
		if (bt_att_chan_req_cancel(chan, req)) {
   28e42:	4629      	mov	r1, r5
   28e44:	f7f4 fa9e 	bl	1d384 <bt_att_chan_req_cancel>
   28e48:	b970      	cbnz	r0, 28e68 <bt_att_req_cancel+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   28e4a:	2c00      	cmp	r4, #0
   28e4c:	d0f5      	beq.n	28e3a <bt_att_req_cancel+0x2a>
   28e4e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
   28e52:	2b00      	cmp	r3, #0
   28e54:	d0f2      	beq.n	28e3c <bt_att_req_cancel+0x2c>
   28e56:	3be0      	subs	r3, #224	; 0xe0
   28e58:	e7f0      	b.n	28e3c <bt_att_req_cancel+0x2c>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   28e5a:	4629      	mov	r1, r5
   28e5c:	1d30      	adds	r0, r6, #4
   28e5e:	f7ff f909 	bl	28074 <sys_slist_find_and_remove>

	bt_att_req_free(req);
   28e62:	4628      	mov	r0, r5
   28e64:	f7f4 f998 	bl	1d198 <bt_att_req_free>
}
   28e68:	bd70      	pop	{r4, r5, r6, pc}
   28e6a:	4770      	bx	lr

00028e6c <bt_att_find_req_by_user_data>:

struct bt_att_req *bt_att_find_req_by_user_data(struct bt_conn *conn, const void *user_data)
{
   28e6c:	b510      	push	{r4, lr}
   28e6e:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;
	struct bt_att_req *req;

	att = att_get(conn);
   28e70:	f7f3 f800 	bl	1be74 <att_get>
	if (!att) {
   28e74:	4601      	mov	r1, r0
   28e76:	b308      	cbz	r0, 28ebc <bt_att_find_req_by_user_data+0x50>
	return list->head;
   28e78:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   28e7a:	b113      	cbz	r3, 28e82 <bt_att_find_req_by_user_data+0x16>
   28e7c:	3be0      	subs	r3, #224	; 0xe0
   28e7e:	e000      	b.n	28e82 <bt_att_find_req_by_user_data+0x16>
   28e80:	3be0      	subs	r3, #224	; 0xe0
   28e82:	b173      	cbz	r3, 28ea2 <bt_att_find_req_by_user_data+0x36>
		if (chan->req->user_data == user_data) {
   28e84:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
   28e88:	68c2      	ldr	r2, [r0, #12]
   28e8a:	42a2      	cmp	r2, r4
   28e8c:	d016      	beq.n	28ebc <bt_att_find_req_by_user_data+0x50>
Z_GENLIST_PEEK_NEXT(slist, snode)
   28e8e:	f113 02e0 	adds.w	r2, r3, #224	; 0xe0
   28e92:	d004      	beq.n	28e9e <bt_att_find_req_by_user_data+0x32>
	return node->next;
   28e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   28e98:	2b00      	cmp	r3, #0
   28e9a:	d1f1      	bne.n	28e80 <bt_att_find_req_by_user_data+0x14>
   28e9c:	e7f1      	b.n	28e82 <bt_att_find_req_by_user_data+0x16>
   28e9e:	4613      	mov	r3, r2
   28ea0:	e7ef      	b.n	28e82 <bt_att_find_req_by_user_data+0x16>
	return list->head;
   28ea2:	6848      	ldr	r0, [r1, #4]
			return chan->req;
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->reqs, req, node) {
   28ea4:	b150      	cbz	r0, 28ebc <bt_att_find_req_by_user_data+0x50>
		if (req->user_data == user_data) {
   28ea6:	68c3      	ldr	r3, [r0, #12]
   28ea8:	42a3      	cmp	r3, r4
   28eaa:	d007      	beq.n	28ebc <bt_att_find_req_by_user_data+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER(&att->reqs, req, node) {
   28eac:	4603      	mov	r3, r0
	return node->next;
   28eae:	6800      	ldr	r0, [r0, #0]
   28eb0:	2800      	cmp	r0, #0
   28eb2:	d0f7      	beq.n	28ea4 <bt_att_find_req_by_user_data+0x38>
Z_GENLIST_PEEK_NEXT(slist, snode)
   28eb4:	2b00      	cmp	r3, #0
   28eb6:	d1f5      	bne.n	28ea4 <bt_att_find_req_by_user_data+0x38>
   28eb8:	4618      	mov	r0, r3
   28eba:	e7f3      	b.n	28ea4 <bt_att_find_req_by_user_data+0x38>
			return req;
		}
	}

	return NULL;
}
   28ebc:	bd10      	pop	{r4, pc}

00028ebe <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   28ebe:	2001      	movs	r0, #1
   28ec0:	4770      	bx	lr

00028ec2 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   28ec2:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   28ec4:	f7f2 ffd6 	bl	1be74 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   28ec8:	b1b8      	cbz	r0, 28efa <bt_att_clear_out_of_sync_sent+0x38>
	return list->head;
   28eca:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   28ecc:	b103      	cbz	r3, 28ed0 <bt_att_clear_out_of_sync_sent+0xe>
   28ece:	3be0      	subs	r3, #224	; 0xe0
   28ed0:	b19b      	cbz	r3, 28efa <bt_att_clear_out_of_sync_sent+0x38>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
   28ed2:	f103 0290 	add.w	r2, r3, #144	; 0x90
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28ed6:	f3bf 8f5b 	dmb	ish
   28eda:	e852 0f00 	ldrex	r0, [r2]
   28ede:	f020 0020 	bic.w	r0, r0, #32
   28ee2:	e842 0100 	strex	r1, r0, [r2]
   28ee6:	2900      	cmp	r1, #0
   28ee8:	d1f7      	bne.n	28eda <bt_att_clear_out_of_sync_sent+0x18>
   28eea:	f3bf 8f5b 	dmb	ish
	return node->next;
   28eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   28ef2:	2b00      	cmp	r3, #0
   28ef4:	d0ec      	beq.n	28ed0 <bt_att_clear_out_of_sync_sent+0xe>
   28ef6:	3be0      	subs	r3, #224	; 0xe0
   28ef8:	e7ea      	b.n	28ed0 <bt_att_clear_out_of_sync_sent+0xe>
	}
}
   28efa:	bd08      	pop	{r3, pc}

00028efc <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   28efc:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   28efe:	2104      	movs	r1, #4
   28f00:	f7ff f865 	bl	27fce <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   28f04:	b120      	cbz	r0, 28f10 <bt_att_out_of_sync_sent_on_fixed+0x14>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   28f06:	2105      	movs	r1, #5
   28f08:	308c      	adds	r0, #140	; 0x8c
   28f0a:	f7ff f924 	bl	28156 <atomic_test_bit>
}
   28f0e:	bd08      	pop	{r3, pc}
		return false;
   28f10:	2000      	movs	r0, #0
   28f12:	e7fc      	b.n	28f0e <bt_att_out_of_sync_sent_on_fixed+0x12>

00028f14 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   28f14:	6980      	ldr	r0, [r0, #24]

	data->func = func;
   28f16:	6081      	str	r1, [r0, #8]
	data->user_data = user_data;
   28f18:	60c2      	str	r2, [r0, #12]
	data->attr_count = 1;
   28f1a:	2201      	movs	r2, #1
   28f1c:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   28f1e:	7403      	strb	r3, [r0, #16]
}
   28f20:	4770      	bx	lr

00028f22 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   28f22:	460b      	mov	r3, r1
   28f24:	b139      	cbz	r1, 28f36 <sys_slist_remove+0x14>
	return node->next;
   28f26:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   28f28:	6019      	str	r1, [r3, #0]
	return list->tail;
   28f2a:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   28f2c:	428a      	cmp	r2, r1
   28f2e:	d009      	beq.n	28f44 <sys_slist_remove+0x22>
	parent->next = child;
   28f30:	2300      	movs	r3, #0
   28f32:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   28f34:	4770      	bx	lr
	return node->next;
   28f36:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   28f38:	6003      	str	r3, [r0, #0]
	return list->tail;
   28f3a:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   28f3c:	428a      	cmp	r2, r1
   28f3e:	d1f7      	bne.n	28f30 <sys_slist_remove+0xe>
	list->tail = node;
   28f40:	6043      	str	r3, [r0, #4]
}
   28f42:	e7f5      	b.n	28f30 <sys_slist_remove+0xe>
	list->tail = node;
   28f44:	6043      	str	r3, [r0, #4]
}
   28f46:	e7f3      	b.n	28f30 <sys_slist_remove+0xe>

00028f48 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28f48:	b508      	push	{r3, lr}
   28f4a:	460a      	mov	r2, r1
	return list->head;
   28f4c:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28f4e:	2100      	movs	r1, #0
   28f50:	e001      	b.n	28f56 <sys_slist_find_and_remove+0xe>
   28f52:	4619      	mov	r1, r3
   28f54:	681b      	ldr	r3, [r3, #0]
   28f56:	b12b      	cbz	r3, 28f64 <sys_slist_find_and_remove+0x1c>
   28f58:	4293      	cmp	r3, r2
   28f5a:	d1fa      	bne.n	28f52 <sys_slist_find_and_remove+0xa>
   28f5c:	f7ff ffe1 	bl	28f22 <sys_slist_remove>
   28f60:	2001      	movs	r0, #1
   28f62:	e000      	b.n	28f66 <sys_slist_find_and_remove+0x1e>
   28f64:	2000      	movs	r0, #0
   28f66:	bd08      	pop	{r3, pc}

00028f68 <sys_mem_swap>:
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   28f68:	2300      	movs	r3, #0
   28f6a:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   28f6e:	d210      	bcs.n	28f92 <sys_mem_swap+0x2a>
{
   28f70:	b500      	push	{lr}
		uint8_t tmp = ((uint8_t *)buf)[i];
   28f72:	f810 c003 	ldrb.w	ip, [r0, r3]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   28f76:	1aca      	subs	r2, r1, r3
   28f78:	3a01      	subs	r2, #1
   28f7a:	f810 e002 	ldrb.w	lr, [r0, r2]
   28f7e:	f800 e003 	strb.w	lr, [r0, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   28f82:	f800 c002 	strb.w	ip, [r0, r2]
	for (i = 0; i < (length/2); i++) {
   28f86:	3301      	adds	r3, #1
   28f88:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   28f8c:	d3f1      	bcc.n	28f72 <sys_mem_swap+0xa>
	}
}
   28f8e:	f85d fb04 	ldr.w	pc, [sp], #4
   28f92:	4770      	bx	lr

00028f94 <update_range>:
	if (new_start >= *start && new_end <= *end) {
   28f94:	f8b0 c000 	ldrh.w	ip, [r0]
   28f98:	4562      	cmp	r2, ip
   28f9a:	d312      	bcc.n	28fc2 <update_range+0x2e>
{
   28f9c:	b500      	push	{lr}
	if (new_start >= *start && new_end <= *end) {
   28f9e:	f8b1 e000 	ldrh.w	lr, [r1]
   28fa2:	4573      	cmp	r3, lr
   28fa4:	d908      	bls.n	28fb8 <update_range+0x24>
	if (*start > new_start) {
   28fa6:	4562      	cmp	r2, ip
   28fa8:	d200      	bcs.n	28fac <update_range+0x18>
		*start = new_start;
   28faa:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   28fac:	880a      	ldrh	r2, [r1, #0]
   28fae:	4293      	cmp	r3, r2
   28fb0:	d904      	bls.n	28fbc <update_range+0x28>
		*end = new_end;
   28fb2:	800b      	strh	r3, [r1, #0]
	return true;
   28fb4:	2001      	movs	r0, #1
   28fb6:	e002      	b.n	28fbe <update_range+0x2a>
		return false;
   28fb8:	2000      	movs	r0, #0
   28fba:	e000      	b.n	28fbe <update_range+0x2a>
	return true;
   28fbc:	2001      	movs	r0, #1
}
   28fbe:	f85d fb04 	ldr.w	pc, [sp], #4
	if (*start > new_start) {
   28fc2:	4562      	cmp	r2, ip
   28fc4:	d200      	bcs.n	28fc8 <update_range+0x34>
		*start = new_start;
   28fc6:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   28fc8:	880a      	ldrh	r2, [r1, #0]
   28fca:	4293      	cmp	r3, r2
   28fcc:	d902      	bls.n	28fd4 <update_range+0x40>
		*end = new_end;
   28fce:	800b      	strh	r3, [r1, #0]
	return true;
   28fd0:	2001      	movs	r0, #1
   28fd2:	4770      	bx	lr
   28fd4:	2001      	movs	r0, #1
}
   28fd6:	4770      	bx	lr

00028fd8 <cf_set_value>:
{
   28fd8:	b510      	push	{r4, lr}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   28fda:	2300      	movs	r3, #0
   28fdc:	e001      	b.n	28fe2 <cf_set_value+0xa>
   28fde:	3301      	adds	r3, #1
   28fe0:	b29b      	uxth	r3, r3
   28fe2:	2b02      	cmp	r3, #2
   28fe4:	d819      	bhi.n	2901a <cf_set_value+0x42>
   28fe6:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
   28fea:	ebb2 0fd3 	cmp.w	r2, r3, lsr #3
   28fee:	d912      	bls.n	29016 <cf_set_value+0x3e>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   28ff0:	eb00 040c 	add.w	r4, r0, ip
   28ff4:	7a24      	ldrb	r4, [r4, #8]
   28ff6:	f003 0e07 	and.w	lr, r3, #7
   28ffa:	fa24 f40e 	lsr.w	r4, r4, lr
   28ffe:	f014 0f01 	tst.w	r4, #1
   29002:	d0ec      	beq.n	28fde <cf_set_value+0x6>
		    !(value[i / 8] & BIT(i % 8))) {
   29004:	f811 400c 	ldrb.w	r4, [r1, ip]
   29008:	fa24 f40e 	lsr.w	r4, r4, lr
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2900c:	f014 0f01 	tst.w	r4, #1
   29010:	d1e5      	bne.n	28fde <cf_set_value+0x6>
			return false;
   29012:	2000      	movs	r0, #0
   29014:	e016      	b.n	29044 <cf_set_value+0x6c>
   29016:	2300      	movs	r3, #0
   29018:	e000      	b.n	2901c <cf_set_value+0x44>
   2901a:	2300      	movs	r3, #0
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   2901c:	4293      	cmp	r3, r2
   2901e:	d210      	bcs.n	29042 <cf_set_value+0x6a>
   29020:	b96b      	cbnz	r3, 2903e <cf_set_value+0x66>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   29022:	18c4      	adds	r4, r0, r3
   29024:	f894 c008 	ldrb.w	ip, [r4, #8]
   29028:	f811 e003 	ldrb.w	lr, [r1, r3]
   2902c:	f00e 0e07 	and.w	lr, lr, #7
   29030:	ea4c 0c0e 	orr.w	ip, ip, lr
   29034:	f884 c008 	strb.w	ip, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   29038:	3301      	adds	r3, #1
   2903a:	b29b      	uxth	r3, r3
   2903c:	e7ee      	b.n	2901c <cf_set_value+0x44>
	return true;
   2903e:	2001      	movs	r0, #1
   29040:	e000      	b.n	29044 <cf_set_value+0x6c>
   29042:	2001      	movs	r0, #1
}
   29044:	bd10      	pop	{r4, pc}

00029046 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   29046:	6010      	str	r0, [r2, #0]
}
   29048:	2000      	movs	r0, #0
   2904a:	4770      	bx	lr

0002904c <gatt_ccc_changed>:
{
   2904c:	b508      	push	{r3, lr}
   2904e:	468c      	mov	ip, r1
	uint16_t value = 0x0000;
   29050:	2100      	movs	r1, #0
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   29052:	460b      	mov	r3, r1
   29054:	e000      	b.n	29058 <gatt_ccc_changed+0xc>
   29056:	3301      	adds	r3, #1
   29058:	2b07      	cmp	r3, #7
   2905a:	d808      	bhi.n	2906e <gatt_ccc_changed+0x22>
		if (ccc->cfg[i].value > value) {
   2905c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   29060:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
   29064:	8912      	ldrh	r2, [r2, #8]
   29066:	428a      	cmp	r2, r1
   29068:	d9f5      	bls.n	29056 <gatt_ccc_changed+0xa>
			value = ccc->cfg[i].value;
   2906a:	4611      	mov	r1, r2
   2906c:	e7f3      	b.n	29056 <gatt_ccc_changed+0xa>
	if (value != ccc->value) {
   2906e:	f8bc 3050 	ldrh.w	r3, [ip, #80]	; 0x50
   29072:	4299      	cmp	r1, r3
   29074:	d005      	beq.n	29082 <gatt_ccc_changed+0x36>
		ccc->value = value;
   29076:	f8ac 1050 	strh.w	r1, [ip, #80]	; 0x50
		if (ccc->cfg_changed) {
   2907a:	f8dc 3054 	ldr.w	r3, [ip, #84]	; 0x54
   2907e:	b103      	cbz	r3, 29082 <gatt_ccc_changed+0x36>
			ccc->cfg_changed(attr, value);
   29080:	4798      	blx	r3
}
   29082:	bd08      	pop	{r3, pc}

00029084 <gatt_indicate_rsp>:
{
   29084:	b510      	push	{r4, lr}
   29086:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   29088:	68a3      	ldr	r3, [r4, #8]
   2908a:	b113      	cbz	r3, 29092 <gatt_indicate_rsp+0xe>
   2908c:	460a      	mov	r2, r1
		params->func(conn, params, err);
   2908e:	4621      	mov	r1, r4
   29090:	4798      	blx	r3
	params->_ref--;
   29092:	7da3      	ldrb	r3, [r4, #22]
   29094:	3b01      	subs	r3, #1
   29096:	b2db      	uxtb	r3, r3
   29098:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2909a:	68e2      	ldr	r2, [r4, #12]
   2909c:	b112      	cbz	r2, 290a4 <gatt_indicate_rsp+0x20>
   2909e:	b90b      	cbnz	r3, 290a4 <gatt_indicate_rsp+0x20>
		params->destroy(params);
   290a0:	4620      	mov	r0, r4
   290a2:	4790      	blx	r2
}
   290a4:	bd10      	pop	{r4, pc}

000290a6 <match_uuid>:
	data->attr = attr;
   290a6:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   290a8:	8091      	strh	r1, [r2, #4]
}
   290aa:	2000      	movs	r0, #0
   290ac:	4770      	bx	lr

000290ae <gatt_sub_is_empty>:
	return list->head;
   290ae:	6880      	ldr	r0, [r0, #8]
}
   290b0:	fab0 f080 	clz	r0, r0
   290b4:	0940      	lsrs	r0, r0, #5
   290b6:	4770      	bx	lr

000290b8 <check_subscribe_security_level>:
}
   290b8:	2001      	movs	r0, #1
   290ba:	4770      	bx	lr

000290bc <gatt_mtu_rsp>:
{
   290bc:	b508      	push	{r3, lr}
   290be:	9a02      	ldr	r2, [sp, #8]
	params->func(conn, err, params);
   290c0:	6813      	ldr	r3, [r2, #0]
   290c2:	4798      	blx	r3
}
   290c4:	bd08      	pop	{r3, pc}

000290c6 <gen_hash_m>:
{
   290c6:	b5f0      	push	{r4, r5, r6, r7, lr}
   290c8:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   290ca:	6806      	ldr	r6, [r0, #0]
   290cc:	7835      	ldrb	r5, [r6, #0]
   290ce:	2d00      	cmp	r5, #0
   290d0:	d160      	bne.n	29194 <gen_hash_m+0xce>
   290d2:	4607      	mov	r7, r0
   290d4:	4614      	mov	r4, r2
	switch (u16->val) {
   290d6:	8873      	ldrh	r3, [r6, #2]
   290d8:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   290dc:	d019      	beq.n	29112 <gen_hash_m+0x4c>
   290de:	d913      	bls.n	29108 <gen_hash_m+0x42>
   290e0:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   290e4:	33ff      	adds	r3, #255	; 0xff
   290e6:	b29b      	uxth	r3, r3
   290e8:	2b04      	cmp	r3, #4
   290ea:	d859      	bhi.n	291a0 <gen_hash_m+0xda>
		value = sys_cpu_to_le16(handle);
   290ec:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   290f0:	2202      	movs	r2, #2
   290f2:	f10d 010a 	add.w	r1, sp, #10
   290f6:	4620      	mov	r0, r4
   290f8:	f7fe f85c 	bl	271b4 <tc_cmac_update>
   290fc:	2800      	cmp	r0, #0
   290fe:	d139      	bne.n	29174 <gen_hash_m+0xae>
			state->err = -EINVAL;
   29100:	f06f 0315 	mvn.w	r3, #21
   29104:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   29106:	e046      	b.n	29196 <gen_hash_m+0xd0>
	switch (u16->val) {
   29108:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2910c:	b29b      	uxth	r3, r3
   2910e:	2b03      	cmp	r3, #3
   29110:	d844      	bhi.n	2919c <gen_hash_m+0xd6>
		value = sys_cpu_to_le16(handle);
   29112:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29116:	2202      	movs	r2, #2
   29118:	f10d 010a 	add.w	r1, sp, #10
   2911c:	4620      	mov	r0, r4
   2911e:	f7fe f849 	bl	271b4 <tc_cmac_update>
   29122:	b918      	cbnz	r0, 2912c <gen_hash_m+0x66>
			state->err = -EINVAL;
   29124:	f06f 0315 	mvn.w	r3, #21
   29128:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2912a:	e034      	b.n	29196 <gen_hash_m+0xd0>
		value = sys_cpu_to_le16(u16->val);
   2912c:	8873      	ldrh	r3, [r6, #2]
   2912e:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29132:	2202      	movs	r2, #2
   29134:	f10d 010a 	add.w	r1, sp, #10
   29138:	4620      	mov	r0, r4
   2913a:	f7fe f83b 	bl	271b4 <tc_cmac_update>
   2913e:	b178      	cbz	r0, 29160 <gen_hash_m+0x9a>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   29140:	687e      	ldr	r6, [r7, #4]
   29142:	2000      	movs	r0, #0
   29144:	9000      	str	r0, [sp, #0]
   29146:	2313      	movs	r3, #19
   29148:	aa03      	add	r2, sp, #12
   2914a:	4639      	mov	r1, r7
   2914c:	47b0      	blx	r6
		if (len < 0) {
   2914e:	1e02      	subs	r2, r0, #0
   29150:	db0a      	blt.n	29168 <gen_hash_m+0xa2>
		if (tc_cmac_update(&state->state, data, len) ==
   29152:	a903      	add	r1, sp, #12
   29154:	4620      	mov	r0, r4
   29156:	f7fe f82d 	bl	271b4 <tc_cmac_update>
   2915a:	b138      	cbz	r0, 2916c <gen_hash_m+0xa6>
	return BT_GATT_ITER_CONTINUE;
   2915c:	2501      	movs	r5, #1
   2915e:	e01a      	b.n	29196 <gen_hash_m+0xd0>
			state->err = -EINVAL;
   29160:	f06f 0315 	mvn.w	r3, #21
   29164:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   29166:	e016      	b.n	29196 <gen_hash_m+0xd0>
			state->err = len;
   29168:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2916a:	e014      	b.n	29196 <gen_hash_m+0xd0>
			state->err = -EINVAL;
   2916c:	f06f 0315 	mvn.w	r3, #21
   29170:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   29172:	e010      	b.n	29196 <gen_hash_m+0xd0>
		value = sys_cpu_to_le16(u16->val);
   29174:	8873      	ldrh	r3, [r6, #2]
   29176:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2917a:	2202      	movs	r2, #2
   2917c:	f10d 010a 	add.w	r1, sp, #10
   29180:	4620      	mov	r0, r4
   29182:	f7fe f817 	bl	271b4 <tc_cmac_update>
   29186:	b108      	cbz	r0, 2918c <gen_hash_m+0xc6>
	return BT_GATT_ITER_CONTINUE;
   29188:	2501      	movs	r5, #1
   2918a:	e004      	b.n	29196 <gen_hash_m+0xd0>
			state->err = -EINVAL;
   2918c:	f06f 0315 	mvn.w	r3, #21
   29190:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   29192:	e000      	b.n	29196 <gen_hash_m+0xd0>
		return BT_GATT_ITER_CONTINUE;
   29194:	2501      	movs	r5, #1
}
   29196:	4628      	mov	r0, r5
   29198:	b009      	add	sp, #36	; 0x24
   2919a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   2919c:	2501      	movs	r5, #1
   2919e:	e7fa      	b.n	29196 <gen_hash_m+0xd0>
   291a0:	2501      	movs	r5, #1
   291a2:	e7f8      	b.n	29196 <gen_hash_m+0xd0>

000291a4 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   291a4:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   291a6:	f3bf 8f5b 	dmb	ish
   291aa:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   291ae:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   291b2:	f001 011f 	and.w	r1, r1, #31
   291b6:	4108      	asrs	r0, r1
}
   291b8:	f000 0001 	and.w	r0, r0, #1
   291bc:	4770      	bx	lr

000291be <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   291be:	f001 021f 	and.w	r2, r1, #31
   291c2:	2301      	movs	r3, #1
   291c4:	4093      	lsls	r3, r2
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   291c6:	0949      	lsrs	r1, r1, #5
   291c8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   291cc:	f3bf 8f5b 	dmb	ish
   291d0:	e850 2f00 	ldrex	r2, [r0]
   291d4:	ea42 0103 	orr.w	r1, r2, r3
   291d8:	e840 1c00 	strex	ip, r1, [r0]
   291dc:	f1bc 0f00 	cmp.w	ip, #0
   291e0:	d1f6      	bne.n	291d0 <atomic_test_and_set_bit+0x12>
   291e2:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   291e6:	4213      	tst	r3, r2
}
   291e8:	bf14      	ite	ne
   291ea:	2001      	movne	r0, #1
   291ec:	2000      	moveq	r0, #0
   291ee:	4770      	bx	lr

000291f0 <gatt_sub_add>:
{
   291f0:	b538      	push	{r3, r4, r5, lr}
   291f2:	4604      	mov	r4, r0
	sub = gatt_sub_find(conn);
   291f4:	f7f4 f9be 	bl	1d574 <gatt_sub_find>
	if (!sub) {
   291f8:	4605      	mov	r5, r0
   291fa:	b108      	cbz	r0, 29200 <gatt_sub_add+0x10>
}
   291fc:	4628      	mov	r0, r5
   291fe:	bd38      	pop	{r3, r4, r5, pc}
		sub = gatt_sub_find(NULL);
   29200:	f7f4 f9b8 	bl	1d574 <gatt_sub_find>
		if (sub) {
   29204:	4605      	mov	r5, r0
   29206:	2800      	cmp	r0, #0
   29208:	d0f8      	beq.n	291fc <gatt_sub_add+0xc>
	memcpy(dst, src, sizeof(*dst));
   2920a:	2207      	movs	r2, #7
   2920c:	f104 0188 	add.w	r1, r4, #136	; 0x88
   29210:	3001      	adds	r0, #1
   29212:	f7fe f95b 	bl	274cc <memcpy>
			sub->id = conn->id;
   29216:	7a23      	ldrb	r3, [r4, #8]
   29218:	702b      	strb	r3, [r5, #0]
	return sub;
   2921a:	e7ef      	b.n	291fc <gatt_sub_add+0xc>

0002921c <gatt_sub_remove>:
{
   2921c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2921e:	460c      	mov	r4, r1
	if (params) {
   29220:	b173      	cbz	r3, 29240 <gatt_sub_remove+0x24>
   29222:	4605      	mov	r5, r0
   29224:	4611      	mov	r1, r2
   29226:	461e      	mov	r6, r3
		sys_slist_remove(&sub->list, prev, &params->node);
   29228:	f103 0218 	add.w	r2, r3, #24
   2922c:	f104 0008 	add.w	r0, r4, #8
   29230:	f7ff fe77 	bl	28f22 <sys_slist_remove>
		params->notify(conn, params, NULL, 0);
   29234:	6837      	ldr	r7, [r6, #0]
   29236:	2300      	movs	r3, #0
   29238:	461a      	mov	r2, r3
   2923a:	4631      	mov	r1, r6
   2923c:	4628      	mov	r0, r5
   2923e:	47b8      	blx	r7
	if (gatt_sub_is_empty(sub)) {
   29240:	4620      	mov	r0, r4
   29242:	f7ff ff34 	bl	290ae <gatt_sub_is_empty>
   29246:	b900      	cbnz	r0, 2924a <gatt_sub_remove+0x2e>
}
   29248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gatt_sub_free(sub);
   2924a:	4620      	mov	r0, r4
   2924c:	f7f4 fb0e 	bl	1d86c <gatt_sub_free>
}
   29250:	e7fa      	b.n	29248 <gatt_sub_remove+0x2c>

00029252 <gatt_sub_update>:
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   29252:	784a      	ldrb	r2, [r1, #1]
   29254:	b902      	cbnz	r2, 29258 <gatt_sub_update+0x6>
   29256:	4770      	bx	lr
{
   29258:	b508      	push	{r3, lr}
   2925a:	460b      	mov	r3, r1
   2925c:	2207      	movs	r2, #7
   2925e:	f100 0188 	add.w	r1, r0, #136	; 0x88
   29262:	1c58      	adds	r0, r3, #1
   29264:	f7fe f932 	bl	274cc <memcpy>
}
   29268:	bd08      	pop	{r3, pc}

0002926a <remove_subscriptions>:
{
   2926a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2926e:	4606      	mov	r6, r0
	sub = gatt_sub_find(conn);
   29270:	f7f4 f980 	bl	1d574 <gatt_sub_find>
	if (!sub) {
   29274:	b3a0      	cbz	r0, 292e0 <remove_subscriptions+0x76>
   29276:	4607      	mov	r7, r0
   29278:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2927a:	b36c      	cbz	r4, 292d8 <remove_subscriptions+0x6e>
   2927c:	3c18      	subs	r4, #24
Z_GENLIST_PEEK_NEXT(slist, snode)
   2927e:	f114 0518 	adds.w	r5, r4, #24
   29282:	d002      	beq.n	2928a <remove_subscriptions+0x20>
	return node->next;
   29284:	69a5      	ldr	r5, [r4, #24]
   29286:	b105      	cbz	r5, 2928a <remove_subscriptions+0x20>
   29288:	3d18      	subs	r5, #24
   2928a:	f04f 0800 	mov.w	r8, #0
   2928e:	e00d      	b.n	292ac <remove_subscriptions+0x42>
			params->value = 0U;
   29290:	2300      	movs	r3, #0
   29292:	8223      	strh	r3, [r4, #16]
			gatt_sub_remove(conn, sub, prev, params);
   29294:	4623      	mov	r3, r4
   29296:	4642      	mov	r2, r8
   29298:	4639      	mov	r1, r7
   2929a:	4630      	mov	r0, r6
   2929c:	f7ff ffbe 	bl	2921c <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   292a0:	b1e5      	cbz	r5, 292dc <remove_subscriptions+0x72>
   292a2:	69ab      	ldr	r3, [r5, #24]
   292a4:	b103      	cbz	r3, 292a8 <remove_subscriptions+0x3e>
   292a6:	3b18      	subs	r3, #24
   292a8:	462c      	mov	r4, r5
   292aa:	461d      	mov	r5, r3
   292ac:	b1c4      	cbz	r4, 292e0 <remove_subscriptions+0x76>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   292ae:	f106 0188 	add.w	r1, r6, #136	; 0x88
   292b2:	7a30      	ldrb	r0, [r6, #8]
   292b4:	f7fe fb66 	bl	27984 <bt_addr_le_is_bonded>
   292b8:	2800      	cmp	r0, #0
   292ba:	d0e9      	beq.n	29290 <remove_subscriptions+0x26>
		    (atomic_test_bit(params->flags,
   292bc:	2100      	movs	r1, #0
   292be:	f104 0014 	add.w	r0, r4, #20
   292c2:	f7ff ff6f 	bl	291a4 <atomic_test_bit>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   292c6:	2800      	cmp	r0, #0
   292c8:	d1e2      	bne.n	29290 <remove_subscriptions+0x26>
			gatt_sub_update(conn, sub);
   292ca:	4639      	mov	r1, r7
   292cc:	4630      	mov	r0, r6
   292ce:	f7ff ffc0 	bl	29252 <gatt_sub_update>
			prev = &params->node;
   292d2:	f104 0818 	add.w	r8, r4, #24
   292d6:	e7e3      	b.n	292a0 <remove_subscriptions+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   292d8:	4625      	mov	r5, r4
   292da:	e7d6      	b.n	2928a <remove_subscriptions+0x20>
   292dc:	462b      	mov	r3, r5
   292de:	e7e3      	b.n	292a8 <remove_subscriptions+0x3e>
}
   292e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000292e4 <clear_sc_cfg>:
{
   292e4:	b508      	push	{r3, lr}
	memset(cfg, 0, sizeof(*cfg));
   292e6:	220c      	movs	r2, #12
   292e8:	2100      	movs	r1, #0
   292ea:	f7fe f91e 	bl	2752a <memset>
}
   292ee:	bd08      	pop	{r3, pc}

000292f0 <bt_gatt_clear_sc>:
{
   292f0:	b508      	push	{r3, lr}
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   292f2:	f7f4 f8f3 	bl	1d4dc <find_sc_cfg>
	if (!cfg) {
   292f6:	b108      	cbz	r0, 292fc <bt_gatt_clear_sc+0xc>
	clear_sc_cfg(cfg);
   292f8:	f7ff fff4 	bl	292e4 <clear_sc_cfg>
}
   292fc:	2000      	movs	r0, #0
   292fe:	bd08      	pop	{r3, pc}

00029300 <sc_ccc_cfg_write>:
{
   29300:	b508      	push	{r3, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   29302:	2a02      	cmp	r2, #2
   29304:	d003      	beq.n	2930e <sc_ccc_cfg_write+0xe>
		sc_clear(conn);
   29306:	f7f4 fabb 	bl	1d880 <sc_clear>
}
   2930a:	2002      	movs	r0, #2
   2930c:	bd08      	pop	{r3, pc}
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2930e:	2300      	movs	r3, #0
   29310:	461a      	mov	r2, r3
   29312:	f100 0188 	add.w	r1, r0, #136	; 0x88
   29316:	7a00      	ldrb	r0, [r0, #8]
   29318:	f7f4 f9be 	bl	1d698 <sc_save>
   2931c:	e7f5      	b.n	2930a <sc_ccc_cfg_write+0xa>

0002931e <sc_reset>:
{
   2931e:	b508      	push	{r3, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   29320:	2204      	movs	r2, #4
   29322:	2100      	movs	r1, #0
   29324:	3008      	adds	r0, #8
   29326:	f7fe f900 	bl	2752a <memset>
}
   2932a:	bd08      	pop	{r3, pc}

0002932c <sc_restore_rsp>:
{
   2932c:	b538      	push	{r3, r4, r5, lr}
   2932e:	4605      	mov	r5, r0
   29330:	4614      	mov	r4, r2
	if (bt_att_fixed_chan_only(conn)) {
   29332:	f7ff fdc4 	bl	28ebe <bt_att_fixed_chan_only>
   29336:	b908      	cbnz	r0, 2933c <sc_restore_rsp+0x10>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   29338:	b1c4      	cbz	r4, 2936c <sc_restore_rsp+0x40>
}
   2933a:	bd38      	pop	{r3, r4, r5, pc}
		cfg = find_cf_cfg(conn);
   2933c:	4628      	mov	r0, r5
   2933e:	f7f4 f8a7 	bl	1d490 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   29342:	4603      	mov	r3, r0
   29344:	2800      	cmp	r0, #0
   29346:	d0f7      	beq.n	29338 <sc_restore_rsp+0xc>
   29348:	7a02      	ldrb	r2, [r0, #8]
   2934a:	f012 0f01 	tst.w	r2, #1
   2934e:	d0f3      	beq.n	29338 <sc_restore_rsp+0xc>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   29350:	330c      	adds	r3, #12
   29352:	f3bf 8f5b 	dmb	ish
   29356:	e853 1f00 	ldrex	r1, [r3]
   2935a:	f041 0101 	orr.w	r1, r1, #1
   2935e:	e843 1200 	strex	r2, r1, [r3]
   29362:	2a00      	cmp	r2, #0
   29364:	d1f7      	bne.n	29356 <sc_restore_rsp+0x2a>
   29366:	f3bf 8f5b 	dmb	ish
			LOG_DBG("%s change-aware", bt_addr_le_str(&cfg->peer));
   2936a:	e7e5      	b.n	29338 <sc_restore_rsp+0xc>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2936c:	f105 0188 	add.w	r1, r5, #136	; 0x88
   29370:	7a28      	ldrb	r0, [r5, #8]
   29372:	f7f4 f8b3 	bl	1d4dc <find_sc_cfg>
		if (sc_cfg) {
   29376:	2800      	cmp	r0, #0
   29378:	d0df      	beq.n	2933a <sc_restore_rsp+0xe>
			sc_reset(sc_cfg);
   2937a:	f7ff ffd0 	bl	2931e <sc_reset>
}
   2937e:	e7dc      	b.n	2933a <sc_restore_rsp+0xe>

00029380 <atomic_test_and_clear_bit>:
{
   29380:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   29382:	f001 021f 	and.w	r2, r1, #31
   29386:	2301      	movs	r3, #1
   29388:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2938a:	0949      	lsrs	r1, r1, #5
   2938c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   29390:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29392:	f3bf 8f5b 	dmb	ish
   29396:	e850 2f00 	ldrex	r2, [r0]
   2939a:	ea02 0c01 	and.w	ip, r2, r1
   2939e:	e840 ce00 	strex	lr, ip, [r0]
   293a2:	f1be 0f00 	cmp.w	lr, #0
   293a6:	d1f6      	bne.n	29396 <atomic_test_and_clear_bit+0x16>
   293a8:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   293ac:	4213      	tst	r3, r2
}
   293ae:	bf14      	ite	ne
   293b0:	2001      	movne	r0, #1
   293b2:	2000      	moveq	r0, #0
   293b4:	f85d fb04 	ldr.w	pc, [sp], #4

000293b8 <gatt_foreach_iter>:
	if (handle > end_handle) {
   293b8:	4299      	cmp	r1, r3
   293ba:	d822      	bhi.n	29402 <gatt_foreach_iter+0x4a>
{
   293bc:	b538      	push	{r3, r4, r5, lr}
   293be:	4605      	mov	r5, r0
   293c0:	460c      	mov	r4, r1
	if (handle < start_handle) {
   293c2:	4291      	cmp	r1, r2
   293c4:	d31f      	bcc.n	29406 <gatt_foreach_iter+0x4e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   293c6:	9b04      	ldr	r3, [sp, #16]
   293c8:	b123      	cbz	r3, 293d4 <gatt_foreach_iter+0x1c>
   293ca:	6801      	ldr	r1, [r0, #0]
   293cc:	4618      	mov	r0, r3
   293ce:	f7fe f8fd 	bl	275cc <bt_uuid_cmp>
   293d2:	b9d0      	cbnz	r0, 2940a <gatt_foreach_iter+0x52>
	if (attr_data && attr_data != attr->user_data) {
   293d4:	9b05      	ldr	r3, [sp, #20]
   293d6:	b12b      	cbz	r3, 293e4 <gatt_foreach_iter+0x2c>
   293d8:	68eb      	ldr	r3, [r5, #12]
   293da:	9a05      	ldr	r2, [sp, #20]
   293dc:	4293      	cmp	r3, r2
   293de:	d001      	beq.n	293e4 <gatt_foreach_iter+0x2c>
		return BT_GATT_ITER_CONTINUE;
   293e0:	2001      	movs	r0, #1
   293e2:	e011      	b.n	29408 <gatt_foreach_iter+0x50>
	*num_matches -= 1;
   293e4:	9b06      	ldr	r3, [sp, #24]
   293e6:	881b      	ldrh	r3, [r3, #0]
   293e8:	3b01      	subs	r3, #1
   293ea:	9a06      	ldr	r2, [sp, #24]
   293ec:	8013      	strh	r3, [r2, #0]
	result = func(attr, handle, user_data);
   293ee:	9a08      	ldr	r2, [sp, #32]
   293f0:	4621      	mov	r1, r4
   293f2:	4628      	mov	r0, r5
   293f4:	9b07      	ldr	r3, [sp, #28]
   293f6:	4798      	blx	r3
	if (!*num_matches) {
   293f8:	9b06      	ldr	r3, [sp, #24]
   293fa:	881b      	ldrh	r3, [r3, #0]
   293fc:	b923      	cbnz	r3, 29408 <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   293fe:	2000      	movs	r0, #0
   29400:	e002      	b.n	29408 <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   29402:	2000      	movs	r0, #0
}
   29404:	4770      	bx	lr
		return BT_GATT_ITER_CONTINUE;
   29406:	2001      	movs	r0, #1
}
   29408:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ITER_CONTINUE;
   2940a:	2001      	movs	r0, #1
   2940c:	e7fc      	b.n	29408 <gatt_foreach_iter+0x50>

0002940e <gatt_req_alloc>:
{
   2940e:	b538      	push	{r3, r4, r5, lr}
   29410:	4605      	mov	r5, r0
   29412:	460c      	mov	r4, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   29414:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   29418:	2100      	movs	r1, #0
   2941a:	f7f3 fe99 	bl	1d150 <bt_att_req_alloc>
	if (!req) {
   2941e:	4603      	mov	r3, r0
   29420:	b108      	cbz	r0, 29426 <gatt_req_alloc+0x18>
	req->func = func;
   29422:	6045      	str	r5, [r0, #4]
	req->user_data = params;
   29424:	60c4      	str	r4, [r0, #12]
}
   29426:	4618      	mov	r0, r3
   29428:	bd38      	pop	{r3, r4, r5, pc}

0002942a <gatt_req_send>:
{
   2942a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2942e:	b083      	sub	sp, #12
   29430:	4606      	mov	r6, r0
   29432:	4608      	mov	r0, r1
   29434:	4615      	mov	r5, r2
   29436:	461c      	mov	r4, r3
   29438:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   2943c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
	req = gatt_req_alloc(func, params, encode, op, len);
   2943e:	9700      	str	r7, [sp, #0]
   29440:	4643      	mov	r3, r8
   29442:	4622      	mov	r2, r4
   29444:	4629      	mov	r1, r5
   29446:	f7ff ffe2 	bl	2940e <gatt_req_alloc>
	if (!req) {
   2944a:	b368      	cbz	r0, 294a8 <gatt_req_send+0x7e>
   2944c:	4681      	mov	r9, r0
	buf = bt_att_create_pdu(conn, op, len);
   2944e:	463a      	mov	r2, r7
   29450:	4641      	mov	r1, r8
   29452:	4630      	mov	r0, r6
   29454:	f7f3 fbd2 	bl	1cbfc <bt_att_create_pdu>
	if (!buf) {
   29458:	4680      	mov	r8, r0
   2945a:	b1b8      	cbz	r0, 2948c <gatt_req_send+0x62>
	bt_att_set_tx_meta_data(buf, NULL, NULL, chan_opt);
   2945c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   29460:	2200      	movs	r2, #0
   29462:	4611      	mov	r1, r2
   29464:	f7ff fd56 	bl	28f14 <bt_att_set_tx_meta_data>
	req->buf = buf;
   29468:	f8c9 8008 	str.w	r8, [r9, #8]
	err = encode(buf, len, params);
   2946c:	462a      	mov	r2, r5
   2946e:	4639      	mov	r1, r7
   29470:	4640      	mov	r0, r8
   29472:	47a0      	blx	r4
	if (err) {
   29474:	4604      	mov	r4, r0
   29476:	b978      	cbnz	r0, 29498 <gatt_req_send+0x6e>
	err = bt_att_req_send(conn, req);
   29478:	4649      	mov	r1, r9
   2947a:	4630      	mov	r0, r6
   2947c:	f7ff fcb1 	bl	28de2 <bt_att_req_send>
	if (err) {
   29480:	4604      	mov	r4, r0
   29482:	b968      	cbnz	r0, 294a0 <gatt_req_send+0x76>
}
   29484:	4620      	mov	r0, r4
   29486:	b003      	add	sp, #12
   29488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_att_req_free(req);
   2948c:	4648      	mov	r0, r9
   2948e:	f7f3 fe83 	bl	1d198 <bt_att_req_free>
		return -ENOMEM;
   29492:	f06f 040b 	mvn.w	r4, #11
   29496:	e7f5      	b.n	29484 <gatt_req_send+0x5a>
		bt_att_req_free(req);
   29498:	4648      	mov	r0, r9
   2949a:	f7f3 fe7d 	bl	1d198 <bt_att_req_free>
		return err;
   2949e:	e7f1      	b.n	29484 <gatt_req_send+0x5a>
		bt_att_req_free(req);
   294a0:	4648      	mov	r0, r9
   294a2:	f7f3 fe79 	bl	1d198 <bt_att_req_free>
   294a6:	e7ed      	b.n	29484 <gatt_req_send+0x5a>
		return -ENOMEM;
   294a8:	f06f 040b 	mvn.w	r4, #11
   294ac:	e7ea      	b.n	29484 <gatt_req_send+0x5a>

000294ae <add_subscriptions>:
{
   294ae:	b538      	push	{r3, r4, r5, lr}
   294b0:	4605      	mov	r5, r0
	sub = gatt_sub_find(conn);
   294b2:	f7f4 f85f 	bl	1d574 <gatt_sub_find>
	if (!sub) {
   294b6:	b1d0      	cbz	r0, 294ee <add_subscriptions+0x40>
	return list->head;
   294b8:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   294ba:	b124      	cbz	r4, 294c6 <add_subscriptions+0x18>
   294bc:	3c18      	subs	r4, #24
   294be:	e002      	b.n	294c6 <add_subscriptions+0x18>
	return node->next;
   294c0:	69a4      	ldr	r4, [r4, #24]
   294c2:	b104      	cbz	r4, 294c6 <add_subscriptions+0x18>
   294c4:	3c18      	subs	r4, #24
   294c6:	b194      	cbz	r4, 294ee <add_subscriptions+0x40>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   294c8:	f105 0188 	add.w	r1, r5, #136	; 0x88
   294cc:	7a28      	ldrb	r0, [r5, #8]
   294ce:	f7fe fa59 	bl	27984 <bt_addr_le_is_bonded>
   294d2:	2800      	cmp	r0, #0
   294d4:	d0f4      	beq.n	294c0 <add_subscriptions+0x12>
		    !atomic_test_bit(params->flags,
   294d6:	2101      	movs	r1, #1
   294d8:	f104 0014 	add.w	r0, r4, #20
   294dc:	f7ff fe62 	bl	291a4 <atomic_test_bit>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   294e0:	2800      	cmp	r0, #0
   294e2:	d1ed      	bne.n	294c0 <add_subscriptions+0x12>
			gatt_write_ccc(conn, params);
   294e4:	4621      	mov	r1, r4
   294e6:	4628      	mov	r0, r5
   294e8:	f7f4 fb40 	bl	1db6c <gatt_write_ccc>
   294ec:	e7e8      	b.n	294c0 <add_subscriptions+0x12>
}
   294ee:	bd38      	pop	{r3, r4, r5, pc}

000294f0 <gatt_exchange_mtu_encode>:
{
   294f0:	b508      	push	{r3, lr}
   294f2:	2102      	movs	r1, #2
   294f4:	300c      	adds	r0, #12
   294f6:	f000 fcf0 	bl	29eda <net_buf_simple_add>
   294fa:	4603      	mov	r3, r0
	req->mtu = sys_cpu_to_le16(mtu);
   294fc:	2000      	movs	r0, #0
   294fe:	f06f 0208 	mvn.w	r2, #8
   29502:	701a      	strb	r2, [r3, #0]
   29504:	7058      	strb	r0, [r3, #1]
}
   29506:	bd08      	pop	{r3, pc}

00029508 <gatt_write_ccc_buf>:
{
   29508:	b538      	push	{r3, r4, r5, lr}
   2950a:	4614      	mov	r4, r2
   2950c:	f100 050c 	add.w	r5, r0, #12
   29510:	2102      	movs	r1, #2
   29512:	4628      	mov	r0, r5
   29514:	f000 fce1 	bl	29eda <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   29518:	89e3      	ldrh	r3, [r4, #14]
   2951a:	8003      	strh	r3, [r0, #0]
	net_buf_simple_add_le16(&buf->b, val);
   2951c:	8a21      	ldrh	r1, [r4, #16]
   2951e:	4628      	mov	r0, r5
   29520:	f000 fcec 	bl	29efc <net_buf_simple_add_le16>
	atomic_set_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);
   29524:	3414      	adds	r4, #20
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29526:	f3bf 8f5b 	dmb	ish
   2952a:	e854 3f00 	ldrex	r3, [r4]
   2952e:	f043 0304 	orr.w	r3, r3, #4
   29532:	e844 3200 	strex	r2, r3, [r4]
   29536:	2a00      	cmp	r2, #0
   29538:	d1f7      	bne.n	2952a <gatt_write_ccc_buf+0x22>
   2953a:	f3bf 8f5b 	dmb	ish
}
   2953e:	2000      	movs	r0, #0
   29540:	bd38      	pop	{r3, r4, r5, pc}

00029542 <remove_cf_cfg>:
{
   29542:	b570      	push	{r4, r5, r6, lr}
   29544:	4604      	mov	r4, r0
	cfg = find_cf_cfg(conn);
   29546:	f7f3 ffa3 	bl	1d490 <find_cf_cfg>
	if (!cfg) {
   2954a:	b150      	cbz	r0, 29562 <remove_cf_cfg+0x20>
   2954c:	4606      	mov	r6, r0
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2954e:	f104 0588 	add.w	r5, r4, #136	; 0x88
   29552:	4629      	mov	r1, r5
   29554:	7a20      	ldrb	r0, [r4, #8]
   29556:	f7fe fa15 	bl	27984 <bt_addr_le_is_bonded>
   2955a:	b918      	cbnz	r0, 29564 <remove_cf_cfg+0x22>
		clear_cf_cfg(cfg);
   2955c:	4630      	mov	r0, r6
   2955e:	f7f4 fb19 	bl	1db94 <clear_cf_cfg>
}
   29562:	bd70      	pop	{r4, r5, r6, pc}
   29564:	2207      	movs	r2, #7
   29566:	4629      	mov	r1, r5
   29568:	1c70      	adds	r0, r6, #1
   2956a:	f7fd ffaf 	bl	274cc <memcpy>
}
   2956e:	e7f8      	b.n	29562 <remove_cf_cfg+0x20>

00029570 <bt_gatt_attr_read>:
{
   29570:	b510      	push	{r4, lr}
   29572:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   29576:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   2957a:	42a1      	cmp	r1, r4
   2957c:	d80c      	bhi.n	29598 <bt_gatt_attr_read+0x28>
   2957e:	4610      	mov	r0, r2
	len = MIN(buf_len, value_len - offset);
   29580:	1a64      	subs	r4, r4, r1
   29582:	42a3      	cmp	r3, r4
   29584:	bfa8      	it	ge
   29586:	4623      	movge	r3, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   29588:	b29c      	uxth	r4, r3
   2958a:	4622      	mov	r2, r4
   2958c:	9b03      	ldr	r3, [sp, #12]
   2958e:	4419      	add	r1, r3
   29590:	f7fd ff9c 	bl	274cc <memcpy>
}
   29594:	4620      	mov	r0, r4
   29596:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   29598:	f06f 0406 	mvn.w	r4, #6
   2959c:	e7fa      	b.n	29594 <bt_gatt_attr_read+0x24>

0002959e <read_appearance>:
{
   2959e:	b5f0      	push	{r4, r5, r6, r7, lr}
   295a0:	b087      	sub	sp, #28
   295a2:	4604      	mov	r4, r0
   295a4:	460d      	mov	r5, r1
   295a6:	4616      	mov	r6, r2
   295a8:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   295aa:	f7fe f9e9 	bl	27980 <bt_get_appearance>
   295ae:	f8ad 0016 	strh.w	r0, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   295b2:	2302      	movs	r3, #2
   295b4:	9302      	str	r3, [sp, #8]
   295b6:	f10d 0316 	add.w	r3, sp, #22
   295ba:	9301      	str	r3, [sp, #4]
   295bc:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   295c0:	9300      	str	r3, [sp, #0]
   295c2:	463b      	mov	r3, r7
   295c4:	4632      	mov	r2, r6
   295c6:	4629      	mov	r1, r5
   295c8:	4620      	mov	r0, r4
   295ca:	f7ff ffd1 	bl	29570 <bt_gatt_attr_read>
}
   295ce:	b007      	add	sp, #28
   295d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000295d2 <read_name>:
{
   295d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   295d6:	b084      	sub	sp, #16
   295d8:	4604      	mov	r4, r0
   295da:	460d      	mov	r5, r1
   295dc:	4616      	mov	r6, r2
   295de:	461f      	mov	r7, r3
	const char *name = bt_get_name();
   295e0:	f7f0 f948 	bl	19874 <bt_get_name>
   295e4:	4680      	mov	r8, r0
				 strlen(name));
   295e6:	f7fd ff41 	bl	2746c <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   295ea:	b280      	uxth	r0, r0
   295ec:	9002      	str	r0, [sp, #8]
   295ee:	f8cd 8004 	str.w	r8, [sp, #4]
   295f2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   295f6:	9300      	str	r3, [sp, #0]
   295f8:	463b      	mov	r3, r7
   295fa:	4632      	mov	r2, r6
   295fc:	4629      	mov	r1, r5
   295fe:	4620      	mov	r0, r4
   29600:	f7ff ffb6 	bl	29570 <bt_gatt_attr_read>
}
   29604:	b004      	add	sp, #16
   29606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002960a <cf_read>:
{
   2960a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2960c:	b087      	sub	sp, #28
   2960e:	4604      	mov	r4, r0
   29610:	460d      	mov	r5, r1
   29612:	4616      	mov	r6, r2
   29614:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   29616:	2300      	movs	r3, #0
   29618:	f88d 3014 	strb.w	r3, [sp, #20]
	cfg = find_cf_cfg(conn);
   2961c:	f7f3 ff38 	bl	1d490 <find_cf_cfg>
	if (cfg) {
   29620:	b128      	cbz	r0, 2962e <cf_read+0x24>
   29622:	4601      	mov	r1, r0
		memcpy(data, cfg->data, sizeof(data));
   29624:	2201      	movs	r2, #1
   29626:	3108      	adds	r1, #8
   29628:	a805      	add	r0, sp, #20
   2962a:	f7fd ff4f 	bl	274cc <memcpy>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2962e:	2301      	movs	r3, #1
   29630:	9302      	str	r3, [sp, #8]
   29632:	ab05      	add	r3, sp, #20
   29634:	9301      	str	r3, [sp, #4]
   29636:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2963a:	9300      	str	r3, [sp, #0]
   2963c:	463b      	mov	r3, r7
   2963e:	4632      	mov	r2, r6
   29640:	4629      	mov	r1, r5
   29642:	4620      	mov	r0, r4
   29644:	f7ff ff94 	bl	29570 <bt_gatt_attr_read>
}
   29648:	b007      	add	sp, #28
   2964a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002964c <bt_gatt_attr_read_service>:
{
   2964c:	b570      	push	{r4, r5, r6, lr}
   2964e:	b086      	sub	sp, #24
   29650:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
   29654:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   29656:	7826      	ldrb	r6, [r4, #0]
   29658:	b146      	cbz	r6, 2966c <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
   2965a:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2965c:	2610      	movs	r6, #16
   2965e:	9602      	str	r6, [sp, #8]
   29660:	9401      	str	r4, [sp, #4]
   29662:	9500      	str	r5, [sp, #0]
   29664:	f7ff ff84 	bl	29570 <bt_gatt_attr_read>
}
   29668:	b006      	add	sp, #24
   2966a:	bd70      	pop	{r4, r5, r6, pc}
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2966c:	8864      	ldrh	r4, [r4, #2]
   2966e:	f8ad 4016 	strh.w	r4, [sp, #22]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   29672:	2402      	movs	r4, #2
   29674:	9402      	str	r4, [sp, #8]
   29676:	f10d 0416 	add.w	r4, sp, #22
   2967a:	9401      	str	r4, [sp, #4]
   2967c:	9500      	str	r5, [sp, #0]
   2967e:	f7ff ff77 	bl	29570 <bt_gatt_attr_read>
   29682:	e7f1      	b.n	29668 <bt_gatt_attr_read_service+0x1c>

00029684 <bt_gatt_attr_read_ccc>:
{
   29684:	b5f0      	push	{r4, r5, r6, r7, lr}
   29686:	b087      	sub	sp, #28
   29688:	4605      	mov	r5, r0
   2968a:	460c      	mov	r4, r1
   2968c:	4616      	mov	r6, r2
   2968e:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   29690:	68c9      	ldr	r1, [r1, #12]
   29692:	f7f3 ff47 	bl	1d524 <find_ccc_cfg>
	if (cfg) {
   29696:	b190      	cbz	r0, 296be <bt_gatt_attr_read_ccc+0x3a>
		value = sys_cpu_to_le16(cfg->value);
   29698:	8903      	ldrh	r3, [r0, #8]
   2969a:	f8ad 3016 	strh.w	r3, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2969e:	2302      	movs	r3, #2
   296a0:	9302      	str	r3, [sp, #8]
   296a2:	f10d 0316 	add.w	r3, sp, #22
   296a6:	9301      	str	r3, [sp, #4]
   296a8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   296ac:	9300      	str	r3, [sp, #0]
   296ae:	463b      	mov	r3, r7
   296b0:	4632      	mov	r2, r6
   296b2:	4621      	mov	r1, r4
   296b4:	4628      	mov	r0, r5
   296b6:	f7ff ff5b 	bl	29570 <bt_gatt_attr_read>
}
   296ba:	b007      	add	sp, #28
   296bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = 0x0000;
   296be:	2300      	movs	r3, #0
   296c0:	f8ad 3016 	strh.w	r3, [sp, #22]
   296c4:	e7eb      	b.n	2969e <bt_gatt_attr_read_ccc+0x1a>

000296c6 <bt_gatt_attr_value_handle>:
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   296c6:	b1b8      	cbz	r0, 296f8 <bt_gatt_attr_value_handle+0x32>
{
   296c8:	b510      	push	{r4, lr}
   296ca:	b082      	sub	sp, #8
   296cc:	4604      	mov	r4, r0
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   296ce:	2300      	movs	r3, #0
   296d0:	f88d 3004 	strb.w	r3, [sp, #4]
   296d4:	f642 0303 	movw	r3, #10243	; 0x2803
   296d8:	f8ad 3006 	strh.w	r3, [sp, #6]
   296dc:	a901      	add	r1, sp, #4
   296de:	6800      	ldr	r0, [r0, #0]
   296e0:	f7fd ff74 	bl	275cc <bt_uuid_cmp>
   296e4:	b950      	cbnz	r0, 296fc <bt_gatt_attr_value_handle+0x36>
		struct bt_gatt_chrc *chrc = attr->user_data;
   296e6:	68e3      	ldr	r3, [r4, #12]
		handle = chrc->value_handle;
   296e8:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   296ea:	b940      	cbnz	r0, 296fe <bt_gatt_attr_value_handle+0x38>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   296ec:	4620      	mov	r0, r4
   296ee:	f7f4 faa1 	bl	1dc34 <bt_gatt_attr_get_handle>
   296f2:	3001      	adds	r0, #1
   296f4:	b280      	uxth	r0, r0
   296f6:	e002      	b.n	296fe <bt_gatt_attr_value_handle+0x38>
	uint16_t handle = 0;
   296f8:	2000      	movs	r0, #0
}
   296fa:	4770      	bx	lr
	uint16_t handle = 0;
   296fc:	2000      	movs	r0, #0
}
   296fe:	b002      	add	sp, #8
   29700:	bd10      	pop	{r4, pc}

00029702 <bt_gatt_attr_read_chrc>:
{
   29702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29706:	b08a      	sub	sp, #40	; 0x28
   29708:	4605      	mov	r5, r0
   2970a:	460c      	mov	r4, r1
   2970c:	4616      	mov	r6, r2
   2970e:	461f      	mov	r7, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
   29710:	f8d1 800c 	ldr.w	r8, [r1, #12]
	pdu.properties = chrc->properties;
   29714:	f898 3006 	ldrb.w	r3, [r8, #6]
   29718:	f88d 3014 	strb.w	r3, [sp, #20]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2971c:	4608      	mov	r0, r1
   2971e:	f7ff ffd2 	bl	296c6 <bt_gatt_attr_value_handle>
   29722:	f8ad 0015 	strh.w	r0, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   29726:	f8d8 1000 	ldr.w	r1, [r8]
   2972a:	780b      	ldrb	r3, [r1, #0]
   2972c:	b993      	cbnz	r3, 29754 <bt_gatt_attr_read_chrc+0x52>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2972e:	884b      	ldrh	r3, [r1, #2]
   29730:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2U;
   29734:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   29736:	9302      	str	r3, [sp, #8]
   29738:	ab05      	add	r3, sp, #20
   2973a:	9301      	str	r3, [sp, #4]
   2973c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   29740:	9300      	str	r3, [sp, #0]
   29742:	463b      	mov	r3, r7
   29744:	4632      	mov	r2, r6
   29746:	4621      	mov	r1, r4
   29748:	4628      	mov	r0, r5
   2974a:	f7ff ff11 	bl	29570 <bt_gatt_attr_read>
}
   2974e:	b00a      	add	sp, #40	; 0x28
   29750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   29754:	2210      	movs	r2, #16
   29756:	3101      	adds	r1, #1
   29758:	f10d 0017 	add.w	r0, sp, #23
   2975c:	f7fd feb6 	bl	274cc <memcpy>
		value_len += 16U;
   29760:	2313      	movs	r3, #19
   29762:	e7e8      	b.n	29736 <bt_gatt_attr_read_chrc+0x34>

00029764 <db_hash_process>:
{
   29764:	b508      	push	{r3, lr}
	db_hash_gen(true);
   29766:	2001      	movs	r0, #1
   29768:	f7f4 fae4 	bl	1dd34 <db_hash_gen>
}
   2976c:	bd08      	pop	{r3, pc}

0002976e <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   2976e:	f012 0f01 	tst.w	r2, #1
   29772:	d005      	beq.n	29780 <bt_gatt_check_perm+0x12>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   29774:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   29776:	f013 0f95 	tst.w	r3, #149	; 0x95
   2977a:	d01e      	beq.n	297ba <bt_gatt_check_perm+0x4c>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2977c:	684b      	ldr	r3, [r1, #4]
   2977e:	b1f3      	cbz	r3, 297be <bt_gatt_check_perm+0x50>
	if ((mask & BT_GATT_PERM_WRITE) &&
   29780:	f012 0f02 	tst.w	r2, #2
   29784:	d005      	beq.n	29792 <bt_gatt_check_perm+0x24>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   29786:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
   29788:	f413 7f95 	tst.w	r3, #298	; 0x12a
   2978c:	d019      	beq.n	297c2 <bt_gatt_check_perm+0x54>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2978e:	688b      	ldr	r3, [r1, #8]
   29790:	b1cb      	cbz	r3, 297c6 <bt_gatt_check_perm+0x58>
{
   29792:	b510      	push	{r4, lr}
	mask &= attr->perm;
   29794:	8a4c      	ldrh	r4, [r1, #18]
   29796:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_LESC_MASK) {
   29798:	f414 7fc0 	tst.w	r4, #384	; 0x180
   2979c:	d115      	bne.n	297ca <bt_gatt_check_perm+0x5c>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2979e:	f014 0f30 	tst.w	r4, #48	; 0x30
   297a2:	d104      	bne.n	297ae <bt_gatt_check_perm+0x40>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   297a4:	f014 0f0c 	tst.w	r4, #12
   297a8:	d111      	bne.n	297ce <bt_gatt_check_perm+0x60>
	return 0;
   297aa:	2000      	movs	r0, #0
}
   297ac:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   297ae:	f7fe fb10 	bl	27dd2 <bt_conn_get_security>
   297b2:	2802      	cmp	r0, #2
   297b4:	d8f6      	bhi.n	297a4 <bt_gatt_check_perm+0x36>
			return BT_ATT_ERR_AUTHENTICATION;
   297b6:	2005      	movs	r0, #5
   297b8:	e7f8      	b.n	297ac <bt_gatt_check_perm+0x3e>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   297ba:	2002      	movs	r0, #2
   297bc:	4770      	bx	lr
   297be:	2002      	movs	r0, #2
   297c0:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   297c2:	2003      	movs	r0, #3
   297c4:	4770      	bx	lr
   297c6:	2003      	movs	r0, #3
}
   297c8:	4770      	bx	lr
			return BT_ATT_ERR_AUTHENTICATION;
   297ca:	2005      	movs	r0, #5
   297cc:	e7ee      	b.n	297ac <bt_gatt_check_perm+0x3e>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   297ce:	200f      	movs	r0, #15
   297d0:	e7ec      	b.n	297ac <bt_gatt_check_perm+0x3e>

000297d2 <bt_gatt_is_subscribed>:
	if (conn->state != BT_CONN_CONNECTED) {
   297d2:	7a83      	ldrb	r3, [r0, #10]
   297d4:	2b07      	cmp	r3, #7
   297d6:	d001      	beq.n	297dc <bt_gatt_is_subscribed+0xa>
		return false;
   297d8:	2000      	movs	r0, #0
}
   297da:	4770      	bx	lr
{
   297dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   297de:	b089      	sub	sp, #36	; 0x24
   297e0:	4605      	mov	r5, r0
   297e2:	460c      	mov	r4, r1
   297e4:	4616      	mov	r6, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   297e6:	6808      	ldr	r0, [r1, #0]
   297e8:	2300      	movs	r3, #0
   297ea:	f88d 3004 	strb.w	r3, [sp, #4]
   297ee:	f642 0303 	movw	r3, #10243	; 0x2803
   297f2:	f8ad 3006 	strh.w	r3, [sp, #6]
   297f6:	a901      	add	r1, sp, #4
   297f8:	f7fd fee8 	bl	275cc <bt_uuid_cmp>
   297fc:	b950      	cbnz	r0, 29814 <bt_gatt_is_subscribed+0x42>
		struct bt_gatt_chrc *chrc = attr->user_data;
   297fe:	68e3      	ldr	r3, [r4, #12]
		if (!(chrc->properties &
   29800:	799b      	ldrb	r3, [r3, #6]
   29802:	f013 0f30 	tst.w	r3, #48	; 0x30
   29806:	d101      	bne.n	2980c <bt_gatt_is_subscribed+0x3a>
}
   29808:	b009      	add	sp, #36	; 0x24
   2980a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		attr = bt_gatt_attr_next(attr);
   2980c:	4620      	mov	r0, r4
   2980e:	f7f4 fb7f 	bl	1df10 <bt_gatt_attr_next>
   29812:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   29814:	6820      	ldr	r0, [r4, #0]
   29816:	2300      	movs	r3, #0
   29818:	f88d 3008 	strb.w	r3, [sp, #8]
   2981c:	f642 1302 	movw	r3, #10498	; 0x2902
   29820:	f8ad 300a 	strh.w	r3, [sp, #10]
   29824:	a902      	add	r1, sp, #8
   29826:	f7fd fed1 	bl	275cc <bt_uuid_cmp>
   2982a:	2800      	cmp	r0, #0
   2982c:	d136      	bne.n	2989c <bt_gatt_is_subscribed+0xca>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2982e:	6820      	ldr	r0, [r4, #0]
   29830:	2300      	movs	r3, #0
   29832:	f88d 300c 	strb.w	r3, [sp, #12]
   29836:	f642 1302 	movw	r3, #10498	; 0x2902
   2983a:	f8ad 300e 	strh.w	r3, [sp, #14]
   2983e:	a903      	add	r1, sp, #12
   29840:	f7fd fec4 	bl	275cc <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   29844:	b378      	cbz	r0, 298a6 <bt_gatt_is_subscribed+0xd4>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   29846:	6820      	ldr	r0, [r4, #0]
   29848:	2300      	movs	r3, #0
   2984a:	f88d 3010 	strb.w	r3, [sp, #16]
   2984e:	f642 0303 	movw	r3, #10243	; 0x2803
   29852:	f8ad 3012 	strh.w	r3, [sp, #18]
   29856:	a904      	add	r1, sp, #16
   29858:	f7fd feb8 	bl	275cc <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2985c:	b318      	cbz	r0, 298a6 <bt_gatt_is_subscribed+0xd4>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2985e:	6820      	ldr	r0, [r4, #0]
   29860:	2300      	movs	r3, #0
   29862:	f88d 3014 	strb.w	r3, [sp, #20]
   29866:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2986a:	f8ad 3016 	strh.w	r3, [sp, #22]
   2986e:	a905      	add	r1, sp, #20
   29870:	f7fd feac 	bl	275cc <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   29874:	b1b8      	cbz	r0, 298a6 <bt_gatt_is_subscribed+0xd4>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   29876:	6820      	ldr	r0, [r4, #0]
   29878:	2300      	movs	r3, #0
   2987a:	f88d 3018 	strb.w	r3, [sp, #24]
   2987e:	f642 0301 	movw	r3, #10241	; 0x2801
   29882:	f8ad 301a 	strh.w	r3, [sp, #26]
   29886:	a906      	add	r1, sp, #24
   29888:	f7fd fea0 	bl	275cc <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2988c:	b158      	cbz	r0, 298a6 <bt_gatt_is_subscribed+0xd4>
		attr = bt_gatt_attr_next(attr);
   2988e:	4620      	mov	r0, r4
   29890:	f7f4 fb3e 	bl	1df10 <bt_gatt_attr_next>
		if (!attr) {
   29894:	4604      	mov	r4, r0
   29896:	2800      	cmp	r0, #0
   29898:	d1c9      	bne.n	2982e <bt_gatt_is_subscribed+0x5c>
   2989a:	e7b5      	b.n	29808 <bt_gatt_is_subscribed+0x36>
		attr = bt_gatt_attr_next(attr);
   2989c:	4620      	mov	r0, r4
   2989e:	f7f4 fb37 	bl	1df10 <bt_gatt_attr_next>
   298a2:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   298a4:	e7c3      	b.n	2982e <bt_gatt_is_subscribed+0x5c>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   298a6:	6820      	ldr	r0, [r4, #0]
   298a8:	2300      	movs	r3, #0
   298aa:	f88d 301c 	strb.w	r3, [sp, #28]
   298ae:	f642 1302 	movw	r3, #10498	; 0x2902
   298b2:	f8ad 301e 	strh.w	r3, [sp, #30]
   298b6:	a907      	add	r1, sp, #28
   298b8:	f7fd fe88 	bl	275cc <bt_uuid_cmp>
   298bc:	b910      	cbnz	r0, 298c4 <bt_gatt_is_subscribed+0xf2>
	ccc = attr->user_data;
   298be:	68e7      	ldr	r7, [r4, #12]
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   298c0:	2400      	movs	r4, #0
   298c2:	e002      	b.n	298ca <bt_gatt_is_subscribed+0xf8>
		return false;
   298c4:	2000      	movs	r0, #0
   298c6:	e79f      	b.n	29808 <bt_gatt_is_subscribed+0x36>
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   298c8:	3401      	adds	r4, #1
   298ca:	2c07      	cmp	r4, #7
   298cc:	d813      	bhi.n	298f6 <bt_gatt_is_subscribed+0x124>
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   298ce:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   298d2:	eb07 0243 	add.w	r2, r7, r3, lsl #1
   298d6:	3201      	adds	r2, #1
   298d8:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
   298dc:	4628      	mov	r0, r5
   298de:	f7fe fa91 	bl	27e04 <bt_conn_is_peer_addr_le>
   298e2:	2800      	cmp	r0, #0
   298e4:	d0f0      	beq.n	298c8 <bt_gatt_is_subscribed+0xf6>
		    (ccc_type & ccc->cfg[i].value)) {
   298e6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   298ea:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   298ee:	891b      	ldrh	r3, [r3, #8]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   298f0:	4233      	tst	r3, r6
   298f2:	d0e9      	beq.n	298c8 <bt_gatt_is_subscribed+0xf6>
   298f4:	e788      	b.n	29808 <bt_gatt_is_subscribed+0x36>
	return false;
   298f6:	2000      	movs	r0, #0
   298f8:	e786      	b.n	29808 <bt_gatt_is_subscribed+0x36>

000298fa <bt_gatt_subscribe>:
{
   298fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   298fc:	7a83      	ldrb	r3, [r0, #10]
   298fe:	2b07      	cmp	r3, #7
   29900:	d144      	bne.n	2998c <bt_gatt_subscribe+0x92>
   29902:	4605      	mov	r5, r0
   29904:	460c      	mov	r4, r1
	sub = gatt_sub_add(conn);
   29906:	f7ff fc73 	bl	291f0 <gatt_sub_add>
	if (!sub) {
   2990a:	4606      	mov	r6, r0
   2990c:	2800      	cmp	r0, #0
   2990e:	d040      	beq.n	29992 <bt_gatt_subscribe+0x98>
	return list->head;
   29910:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   29912:	b103      	cbz	r3, 29916 <bt_gatt_subscribe+0x1c>
   29914:	3b18      	subs	r3, #24
   29916:	2000      	movs	r0, #0
   29918:	e011      	b.n	2993e <bt_gatt_subscribe+0x44>
			gatt_sub_remove(conn, sub, NULL, NULL);
   2991a:	2300      	movs	r3, #0
   2991c:	461a      	mov	r2, r3
   2991e:	4631      	mov	r1, r6
   29920:	4628      	mov	r0, r5
   29922:	f7ff fc7b 	bl	2921c <gatt_sub_remove>
			return -EALREADY;
   29926:	f06f 0777 	mvn.w	r7, #119	; 0x77
}
   2992a:	4638      	mov	r0, r7
   2992c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    tmp->value >= params->value) {
   2992e:	8a19      	ldrh	r1, [r3, #16]
   29930:	8a22      	ldrh	r2, [r4, #16]
		if (tmp->value_handle == params->value_handle &&
   29932:	4291      	cmp	r1, r2
   29934:	d300      	bcc.n	29938 <bt_gatt_subscribe+0x3e>
			has_subscription = true;
   29936:	2001      	movs	r0, #1
	return node->next;
   29938:	699b      	ldr	r3, [r3, #24]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   2993a:	b103      	cbz	r3, 2993e <bt_gatt_subscribe+0x44>
   2993c:	3b18      	subs	r3, #24
   2993e:	b153      	cbz	r3, 29956 <bt_gatt_subscribe+0x5c>
		if (tmp == params) {
   29940:	42a3      	cmp	r3, r4
   29942:	d0ea      	beq.n	2991a <bt_gatt_subscribe+0x20>
		if (tmp->value_handle == params->value_handle &&
   29944:	8999      	ldrh	r1, [r3, #12]
   29946:	89a2      	ldrh	r2, [r4, #12]
   29948:	4291      	cmp	r1, r2
   2994a:	d0f0      	beq.n	2992e <bt_gatt_subscribe+0x34>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2994c:	f113 0218 	adds.w	r2, r3, #24
   29950:	d1f2      	bne.n	29938 <bt_gatt_subscribe+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   29952:	4613      	mov	r3, r2
   29954:	e7f3      	b.n	2993e <bt_gatt_subscribe+0x44>
	if (!has_subscription) {
   29956:	b140      	cbz	r0, 2996a <bt_gatt_subscribe+0x70>
	sys_slist_prepend(&sub->list, &params->node);
   29958:	f104 0318 	add.w	r3, r4, #24
	return list->head;
   2995c:	68b2      	ldr	r2, [r6, #8]
	parent->next = child;
   2995e:	61a2      	str	r2, [r4, #24]
	list->head = node;
   29960:	60b3      	str	r3, [r6, #8]
	return list->tail;
   29962:	68f2      	ldr	r2, [r6, #12]
Z_GENLIST_PREPEND(slist, snode)
   29964:	b17a      	cbz	r2, 29986 <bt_gatt_subscribe+0x8c>
	return 0;
   29966:	2700      	movs	r7, #0
   29968:	e7df      	b.n	2992a <bt_gatt_subscribe+0x30>
		err = gatt_write_ccc(conn, params);
   2996a:	4621      	mov	r1, r4
   2996c:	4628      	mov	r0, r5
   2996e:	f7f4 f8fd 	bl	1db6c <gatt_write_ccc>
		if (err) {
   29972:	4607      	mov	r7, r0
   29974:	2800      	cmp	r0, #0
   29976:	d0ef      	beq.n	29958 <bt_gatt_subscribe+0x5e>
			gatt_sub_remove(conn, sub, NULL, NULL);
   29978:	2300      	movs	r3, #0
   2997a:	461a      	mov	r2, r3
   2997c:	4631      	mov	r1, r6
   2997e:	4628      	mov	r0, r5
   29980:	f7ff fc4c 	bl	2921c <gatt_sub_remove>
			return err;
   29984:	e7d1      	b.n	2992a <bt_gatt_subscribe+0x30>
	list->tail = node;
   29986:	60f3      	str	r3, [r6, #12]
	return 0;
   29988:	2700      	movs	r7, #0
}
   2998a:	e7ce      	b.n	2992a <bt_gatt_subscribe+0x30>
		return -ENOTCONN;
   2998c:	f06f 077f 	mvn.w	r7, #127	; 0x7f
   29990:	e7cb      	b.n	2992a <bt_gatt_subscribe+0x30>
		return -ENOMEM;
   29992:	f06f 070b 	mvn.w	r7, #11
   29996:	e7c8      	b.n	2992a <bt_gatt_subscribe+0x30>

00029998 <bt_gatt_cancel>:
{
   29998:	b570      	push	{r4, r5, r6, lr}
   2999a:	b082      	sub	sp, #8
   2999c:	4604      	mov	r4, r0
   2999e:	460d      	mov	r5, r1
	k_sched_lock();
   299a0:	f7fa fda4 	bl	244ec <k_sched_lock>
	req = bt_att_find_req_by_user_data(conn, params);
   299a4:	4629      	mov	r1, r5
   299a6:	4620      	mov	r0, r4
   299a8:	f7ff fa60 	bl	28e6c <bt_att_find_req_by_user_data>
	if (req) {
   299ac:	b178      	cbz	r0, 299ce <bt_gatt_cancel+0x36>
   299ae:	4601      	mov	r1, r0
		func = req->func;
   299b0:	6846      	ldr	r6, [r0, #4]
		bt_att_req_cancel(conn, req);
   299b2:	4620      	mov	r0, r4
   299b4:	f7ff fa2c 	bl	28e10 <bt_att_req_cancel>
	k_sched_unlock();
   299b8:	f7fa ff9a 	bl	248f0 <k_sched_unlock>
	if (func) {
   299bc:	b12e      	cbz	r6, 299ca <bt_gatt_cancel+0x32>
		func(conn, BT_ATT_ERR_UNLIKELY, NULL, 0, params);
   299be:	9500      	str	r5, [sp, #0]
   299c0:	2300      	movs	r3, #0
   299c2:	461a      	mov	r2, r3
   299c4:	210e      	movs	r1, #14
   299c6:	4620      	mov	r0, r4
   299c8:	47b0      	blx	r6
}
   299ca:	b002      	add	sp, #8
   299cc:	bd70      	pop	{r4, r5, r6, pc}
	k_sched_unlock();
   299ce:	f7fa ff8f 	bl	248f0 <k_sched_unlock>
	if (func) {
   299d2:	e7fa      	b.n	299ca <bt_gatt_cancel+0x32>

000299d4 <bt_gatt_unsubscribe>:
{
   299d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   299d6:	7a83      	ldrb	r3, [r0, #10]
   299d8:	2b07      	cmp	r3, #7
   299da:	d144      	bne.n	29a66 <bt_gatt_unsubscribe+0x92>
   299dc:	4605      	mov	r5, r0
   299de:	460c      	mov	r4, r1
	sub = gatt_sub_find(conn);
   299e0:	f7f3 fdc8 	bl	1d574 <gatt_sub_find>
	if (!sub) {
   299e4:	4607      	mov	r7, r0
   299e6:	2800      	cmp	r0, #0
   299e8:	d040      	beq.n	29a6c <bt_gatt_unsubscribe+0x98>
	return list->head;
   299ea:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   299ec:	b103      	cbz	r3, 299f0 <bt_gatt_unsubscribe+0x1c>
   299ee:	3b18      	subs	r3, #24
			has_subscription = true;
   299f0:	2000      	movs	r0, #0
   299f2:	4606      	mov	r6, r0
   299f4:	e003      	b.n	299fe <bt_gatt_unsubscribe+0x2a>
			found = true;
   299f6:	2001      	movs	r0, #1
	return node->next;
   299f8:	699b      	ldr	r3, [r3, #24]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   299fa:	b103      	cbz	r3, 299fe <bt_gatt_unsubscribe+0x2a>
   299fc:	3b18      	subs	r3, #24
   299fe:	b13b      	cbz	r3, 29a10 <bt_gatt_unsubscribe+0x3c>
		if (params == tmp) {
   29a00:	42a3      	cmp	r3, r4
   29a02:	d0f8      	beq.n	299f6 <bt_gatt_unsubscribe+0x22>
		if (tmp->value_handle == params->value_handle) {
   29a04:	8999      	ldrh	r1, [r3, #12]
   29a06:	89a2      	ldrh	r2, [r4, #12]
   29a08:	4291      	cmp	r1, r2
   29a0a:	d1f5      	bne.n	299f8 <bt_gatt_unsubscribe+0x24>
			has_subscription = true;
   29a0c:	2601      	movs	r6, #1
   29a0e:	e7f3      	b.n	299f8 <bt_gatt_unsubscribe+0x24>
	if (!found) {
   29a10:	b378      	cbz	r0, 29a72 <bt_gatt_unsubscribe+0x9e>
	if (atomic_test_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING)) {
   29a12:	2102      	movs	r1, #2
   29a14:	f104 0014 	add.w	r0, r4, #20
   29a18:	f7ff fbc4 	bl	291a4 <atomic_test_bit>
   29a1c:	b9d0      	cbnz	r0, 29a54 <bt_gatt_unsubscribe+0x80>
	if (!has_subscription) {
   29a1e:	b936      	cbnz	r6, 29a2e <bt_gatt_unsubscribe+0x5a>
		params->value = 0x0000;
   29a20:	2300      	movs	r3, #0
   29a22:	8223      	strh	r3, [r4, #16]
		err = gatt_write_ccc(conn, params);
   29a24:	4621      	mov	r1, r4
   29a26:	4628      	mov	r0, r5
   29a28:	f7f4 f8a0 	bl	1db6c <gatt_write_ccc>
		if (err) {
   29a2c:	b988      	cbnz	r0, 29a52 <bt_gatt_unsubscribe+0x7e>
	sys_slist_find_and_remove(&sub->list, &params->node);
   29a2e:	f104 0118 	add.w	r1, r4, #24
   29a32:	f107 0008 	add.w	r0, r7, #8
   29a36:	f7ff fa87 	bl	28f48 <sys_slist_find_and_remove>
	if (gatt_sub_is_empty(sub)) {
   29a3a:	4638      	mov	r0, r7
   29a3c:	f7ff fb37 	bl	290ae <gatt_sub_is_empty>
   29a40:	b968      	cbnz	r0, 29a5e <bt_gatt_unsubscribe+0x8a>
	if (has_subscription) {
   29a42:	b1ce      	cbz	r6, 29a78 <bt_gatt_unsubscribe+0xa4>
		params->notify(conn, params, NULL, 0);
   29a44:	6826      	ldr	r6, [r4, #0]
   29a46:	2300      	movs	r3, #0
   29a48:	461a      	mov	r2, r3
   29a4a:	4621      	mov	r1, r4
   29a4c:	4628      	mov	r0, r5
   29a4e:	47b0      	blx	r6
	return 0;
   29a50:	2000      	movs	r0, #0
}
   29a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bt_gatt_cancel(conn, params);
   29a54:	4621      	mov	r1, r4
   29a56:	4628      	mov	r0, r5
   29a58:	f7ff ff9e 	bl	29998 <bt_gatt_cancel>
   29a5c:	e7df      	b.n	29a1e <bt_gatt_unsubscribe+0x4a>
		gatt_sub_free(sub);
   29a5e:	4638      	mov	r0, r7
   29a60:	f7f3 ff04 	bl	1d86c <gatt_sub_free>
   29a64:	e7ed      	b.n	29a42 <bt_gatt_unsubscribe+0x6e>
		return -ENOTCONN;
   29a66:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   29a6a:	e7f2      	b.n	29a52 <bt_gatt_unsubscribe+0x7e>
		return -EINVAL;
   29a6c:	f06f 0015 	mvn.w	r0, #21
   29a70:	e7ef      	b.n	29a52 <bt_gatt_unsubscribe+0x7e>
		return -EINVAL;
   29a72:	f06f 0015 	mvn.w	r0, #21
   29a76:	e7ec      	b.n	29a52 <bt_gatt_unsubscribe+0x7e>
	return 0;
   29a78:	2000      	movs	r0, #0
   29a7a:	e7ea      	b.n	29a52 <bt_gatt_unsubscribe+0x7e>

00029a7c <bt_gatt_notification>:
{
   29a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29a80:	4680      	mov	r8, r0
   29a82:	460f      	mov	r7, r1
   29a84:	4691      	mov	r9, r2
   29a86:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   29a88:	f7f3 fd74 	bl	1d574 <gatt_sub_find>
	if (!sub) {
   29a8c:	b350      	cbz	r0, 29ae4 <bt_gatt_notification+0x68>
	return list->head;
   29a8e:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   29a90:	b324      	cbz	r4, 29adc <bt_gatt_notification+0x60>
   29a92:	3c18      	subs	r4, #24
Z_GENLIST_PEEK_NEXT(slist, snode)
   29a94:	f114 0518 	adds.w	r5, r4, #24
   29a98:	d009      	beq.n	29aae <bt_gatt_notification+0x32>
	return node->next;
   29a9a:	69a5      	ldr	r5, [r4, #24]
   29a9c:	b13d      	cbz	r5, 29aae <bt_gatt_notification+0x32>
   29a9e:	3d18      	subs	r5, #24
   29aa0:	e005      	b.n	29aae <bt_gatt_notification+0x32>
   29aa2:	b1ed      	cbz	r5, 29ae0 <bt_gatt_notification+0x64>
   29aa4:	69ae      	ldr	r6, [r5, #24]
   29aa6:	b106      	cbz	r6, 29aaa <bt_gatt_notification+0x2e>
   29aa8:	3e18      	subs	r6, #24
   29aaa:	462c      	mov	r4, r5
   29aac:	4635      	mov	r5, r6
   29aae:	b1cc      	cbz	r4, 29ae4 <bt_gatt_notification+0x68>
		if (handle != params->value_handle) {
   29ab0:	89a3      	ldrh	r3, [r4, #12]
   29ab2:	429f      	cmp	r7, r3
   29ab4:	d1f5      	bne.n	29aa2 <bt_gatt_notification+0x26>
		if (check_subscribe_security_level(conn, params)) {
   29ab6:	4621      	mov	r1, r4
   29ab8:	4640      	mov	r0, r8
   29aba:	f7ff fafd 	bl	290b8 <check_subscribe_security_level>
   29abe:	2800      	cmp	r0, #0
   29ac0:	d0ef      	beq.n	29aa2 <bt_gatt_notification+0x26>
			if (params->notify(conn, params, data, length) ==
   29ac2:	6826      	ldr	r6, [r4, #0]
   29ac4:	4653      	mov	r3, sl
   29ac6:	464a      	mov	r2, r9
   29ac8:	4621      	mov	r1, r4
   29aca:	4640      	mov	r0, r8
   29acc:	47b0      	blx	r6
   29ace:	2800      	cmp	r0, #0
   29ad0:	d1e7      	bne.n	29aa2 <bt_gatt_notification+0x26>
				bt_gatt_unsubscribe(conn, params);
   29ad2:	4621      	mov	r1, r4
   29ad4:	4640      	mov	r0, r8
   29ad6:	f7ff ff7d 	bl	299d4 <bt_gatt_unsubscribe>
   29ada:	e7e2      	b.n	29aa2 <bt_gatt_notification+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   29adc:	4625      	mov	r5, r4
   29ade:	e7e6      	b.n	29aae <bt_gatt_notification+0x32>
   29ae0:	462e      	mov	r6, r5
   29ae2:	e7e2      	b.n	29aaa <bt_gatt_notification+0x2e>
}
   29ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00029ae8 <bt_gatt_change_aware>:
{
   29ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29aea:	4607      	mov	r7, r0
   29aec:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   29aee:	f7f3 fccf 	bl	1d490 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   29af2:	2800      	cmp	r0, #0
   29af4:	d050      	beq.n	29b98 <bt_gatt_change_aware+0xb0>
   29af6:	7a02      	ldrb	r2, [r0, #8]
   29af8:	f012 0f01 	tst.w	r2, #1
   29afc:	d102      	bne.n	29b04 <bt_gatt_change_aware+0x1c>
		return true;
   29afe:	2601      	movs	r6, #1
}
   29b00:	4630      	mov	r0, r6
   29b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   29b04:	f100 050c 	add.w	r5, r0, #12
   29b08:	2100      	movs	r1, #0
   29b0a:	4628      	mov	r0, r5
   29b0c:	f7ff fb4a 	bl	291a4 <atomic_test_bit>
   29b10:	4606      	mov	r6, r0
   29b12:	2800      	cmp	r0, #0
   29b14:	d1f4      	bne.n	29b00 <bt_gatt_change_aware+0x18>
	if (!req) {
   29b16:	b90c      	cbnz	r4, 29b1c <bt_gatt_change_aware+0x34>
		return false;
   29b18:	4626      	mov	r6, r4
   29b1a:	e7f1      	b.n	29b00 <bt_gatt_change_aware+0x18>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   29b1c:	2101      	movs	r1, #1
   29b1e:	4628      	mov	r0, r5
   29b20:	f7ff fc2e 	bl	29380 <atomic_test_and_clear_bit>
   29b24:	4606      	mov	r6, r0
   29b26:	bb38      	cbnz	r0, 29b78 <bt_gatt_change_aware+0x90>
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   29b28:	4638      	mov	r0, r7
   29b2a:	f7ff f9c8 	bl	28ebe <bt_att_fixed_chan_only>
   29b2e:	4606      	mov	r6, r0
   29b30:	2800      	cmp	r0, #0
   29b32:	d0e5      	beq.n	29b00 <bt_gatt_change_aware+0x18>
   29b34:	4638      	mov	r0, r7
   29b36:	f7ff f9e1 	bl	28efc <bt_att_out_of_sync_sent_on_fixed>
   29b3a:	4606      	mov	r6, r0
   29b3c:	2800      	cmp	r0, #0
   29b3e:	d0df      	beq.n	29b00 <bt_gatt_change_aware+0x18>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29b40:	f3bf 8f5b 	dmb	ish
   29b44:	e855 3f00 	ldrex	r3, [r5]
   29b48:	f023 0302 	bic.w	r3, r3, #2
   29b4c:	e845 3200 	strex	r2, r3, [r5]
   29b50:	2a00      	cmp	r2, #0
   29b52:	d1f7      	bne.n	29b44 <bt_gatt_change_aware+0x5c>
   29b54:	f3bf 8f5b 	dmb	ish
		bt_att_clear_out_of_sync_sent(conn);
   29b58:	4638      	mov	r0, r7
   29b5a:	f7ff f9b2 	bl	28ec2 <bt_att_clear_out_of_sync_sent>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29b5e:	f3bf 8f5b 	dmb	ish
   29b62:	e855 3f00 	ldrex	r3, [r5]
   29b66:	f043 0301 	orr.w	r3, r3, #1
   29b6a:	e845 3200 	strex	r2, r3, [r5]
   29b6e:	2a00      	cmp	r2, #0
   29b70:	d1f7      	bne.n	29b62 <bt_gatt_change_aware+0x7a>
   29b72:	f3bf 8f5b 	dmb	ish
		return true;
   29b76:	e7c3      	b.n	29b00 <bt_gatt_change_aware+0x18>
		bt_att_clear_out_of_sync_sent(conn);
   29b78:	4638      	mov	r0, r7
   29b7a:	f7ff f9a2 	bl	28ec2 <bt_att_clear_out_of_sync_sent>
   29b7e:	f3bf 8f5b 	dmb	ish
   29b82:	e855 3f00 	ldrex	r3, [r5]
   29b86:	f043 0301 	orr.w	r3, r3, #1
   29b8a:	e845 3200 	strex	r2, r3, [r5]
   29b8e:	2a00      	cmp	r2, #0
   29b90:	d1f7      	bne.n	29b82 <bt_gatt_change_aware+0x9a>
   29b92:	f3bf 8f5b 	dmb	ish
		return true;
   29b96:	e7b3      	b.n	29b00 <bt_gatt_change_aware+0x18>
		return true;
   29b98:	2601      	movs	r6, #1
   29b9a:	e7b1      	b.n	29b00 <bt_gatt_change_aware+0x18>

00029b9c <bt_smp_recv>:
{
   29b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   29b9e:	b083      	sub	sp, #12
	struct bt_conn *conn = chan->conn;
   29ba0:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   29ba2:	f04f 32ff 	mov.w	r2, #4294967295
   29ba6:	f04f 33ff 	mov.w	r3, #4294967295
   29baa:	2100      	movs	r1, #0
   29bac:	4608      	mov	r0, r1
   29bae:	f7fe f9c2 	bl	27f36 <bt_l2cap_create_pdu_timeout>
   29bb2:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   29bb4:	f100 060c 	add.w	r6, r0, #12
   29bb8:	2101      	movs	r1, #1
   29bba:	4630      	mov	r0, r6
   29bbc:	f000 f98d 	bl	29eda <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   29bc0:	2505      	movs	r5, #5
   29bc2:	7005      	strb	r5, [r0, #0]
   29bc4:	2101      	movs	r1, #1
   29bc6:	4630      	mov	r0, r6
   29bc8:	f000 f987 	bl	29eda <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   29bcc:	7005      	strb	r5, [r0, #0]
   29bce:	2300      	movs	r3, #0
   29bd0:	9300      	str	r3, [sp, #0]
   29bd2:	4622      	mov	r2, r4
   29bd4:	2106      	movs	r1, #6
   29bd6:	4638      	mov	r0, r7
   29bd8:	f7fe f9b2 	bl	27f40 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   29bdc:	b910      	cbnz	r0, 29be4 <bt_smp_recv+0x48>
}
   29bde:	2000      	movs	r0, #0
   29be0:	b003      	add	sp, #12
   29be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   29be4:	4620      	mov	r0, r4
   29be6:	f000 f931 	bl	29e4c <net_buf_unref>
   29bea:	e7f8      	b.n	29bde <bt_smp_recv+0x42>

00029bec <bt_smp_sign>:
}
   29bec:	f06f 0085 	mvn.w	r0, #133	; 0x85
   29bf0:	4770      	bx	lr

00029bf2 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   29bf2:	2000      	movs	r0, #0
   29bf4:	4770      	bx	lr

00029bf6 <pool_get_uninit>:
	return offset / struct_size;
}

static inline struct net_buf *pool_get_uninit(struct net_buf_pool *pool,
					      uint16_t uninit_count)
{
   29bf6:	b538      	push	{r3, r4, r5, lr}
   29bf8:	4604      	mov	r4, r0
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   29bfa:	7f03      	ldrb	r3, [r0, #28]
   29bfc:	331b      	adds	r3, #27
   29bfe:	f023 0303 	bic.w	r3, r3, #3
				__alignof__(struct net_buf));
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   29c02:	8b02      	ldrh	r2, [r0, #24]
   29c04:	1a52      	subs	r2, r2, r1
	struct net_buf *buf;

	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   29c06:	6a85      	ldr	r5, [r0, #40]	; 0x28
   29c08:	fb03 5502 	mla	r5, r3, r2, r5

	buf->pool_id = pool_id(pool);
   29c0c:	f7f4 ff62 	bl	1ead4 <pool_id>
   29c10:	72a8      	strb	r0, [r5, #10]
	buf->user_data_size = pool->user_data_size;
   29c12:	7f23      	ldrb	r3, [r4, #28]
   29c14:	72eb      	strb	r3, [r5, #11]

	return buf;
}
   29c16:	4628      	mov	r0, r5
   29c18:	bd38      	pop	{r3, r4, r5, pc}

00029c1a <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, uint8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
   29c1a:	4770      	bx	lr

00029c1c <data_alloc>:
};

#endif /* CONFIG_HEAP_MEM_POOL_SIZE > 0 */

static uint8_t *data_alloc(struct net_buf *buf, size_t *size, k_timeout_t timeout)
{
   29c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29c20:	4604      	mov	r4, r0
   29c22:	460d      	mov	r5, r1
   29c24:	4617      	mov	r7, r2
   29c26:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   29c28:	7a80      	ldrb	r0, [r0, #10]
   29c2a:	f7f4 ff5f 	bl	1eaec <net_buf_pool_get>

	return pool->alloc->cb->alloc(buf, size, timeout);
   29c2e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   29c30:	681b      	ldr	r3, [r3, #0]
   29c32:	f8d3 8000 	ldr.w	r8, [r3]
   29c36:	463a      	mov	r2, r7
   29c38:	4633      	mov	r3, r6
   29c3a:	4629      	mov	r1, r5
   29c3c:	4620      	mov	r0, r4
   29c3e:	47c0      	blx	r8
}
   29c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00029c44 <net_buf_destroy>:
{
   29c44:	b510      	push	{r4, lr}
   29c46:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   29c48:	7a80      	ldrb	r0, [r0, #10]
   29c4a:	f7f4 ff4f 	bl	1eaec <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   29c4e:	4621      	mov	r1, r4
   29c50:	f002 fa56 	bl	2c100 <k_queue_prepend>
}
   29c54:	bd10      	pop	{r4, pc}

00029c56 <data_unref>:

	return pool->alloc->cb->ref(buf, data);
}

static void data_unref(struct net_buf *buf, uint8_t *data)
{
   29c56:	b538      	push	{r3, r4, r5, lr}
   29c58:	4604      	mov	r4, r0
   29c5a:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   29c5c:	7a80      	ldrb	r0, [r0, #10]
   29c5e:	f7f4 ff45 	bl	1eaec <net_buf_pool_get>

	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   29c62:	7a63      	ldrb	r3, [r4, #9]
   29c64:	f013 0f01 	tst.w	r3, #1
   29c68:	d105      	bne.n	29c76 <data_unref+0x20>
		return;
	}

	pool->alloc->cb->unref(buf, data);
   29c6a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   29c6c:	681b      	ldr	r3, [r3, #0]
   29c6e:	689b      	ldr	r3, [r3, #8]
   29c70:	4629      	mov	r1, r5
   29c72:	4620      	mov	r0, r4
   29c74:	4798      	blx	r3
}
   29c76:	bd38      	pop	{r3, r4, r5, pc}

00029c78 <net_buf_id>:
{
   29c78:	b510      	push	{r4, lr}
   29c7a:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   29c7c:	7a80      	ldrb	r0, [r0, #10]
   29c7e:	f7f4 ff35 	bl	1eaec <net_buf_pool_get>
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   29c82:	7f03      	ldrb	r3, [r0, #28]
   29c84:	331b      	adds	r3, #27
   29c86:	f023 0303 	bic.w	r3, r3, #3
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   29c8a:	6a82      	ldr	r2, [r0, #40]	; 0x28
   29c8c:	1aa4      	subs	r4, r4, r2
}
   29c8e:	fbb4 f0f3 	udiv	r0, r4, r3
   29c92:	bd10      	pop	{r4, pc}

00029c94 <fixed_data_alloc>:
{
   29c94:	b570      	push	{r4, r5, r6, lr}
   29c96:	4604      	mov	r4, r0
   29c98:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   29c9a:	7a80      	ldrb	r0, [r0, #10]
   29c9c:	f7f4 ff26 	bl	1eaec <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   29ca0:	6a43      	ldr	r3, [r0, #36]	; 0x24
   29ca2:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   29ca4:	682a      	ldr	r2, [r5, #0]
   29ca6:	6819      	ldr	r1, [r3, #0]
   29ca8:	428a      	cmp	r2, r1
   29caa:	bf28      	it	cs
   29cac:	460a      	movcs	r2, r1
   29cae:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   29cb0:	685d      	ldr	r5, [r3, #4]
   29cb2:	681e      	ldr	r6, [r3, #0]
   29cb4:	4620      	mov	r0, r4
   29cb6:	f7ff ffdf 	bl	29c78 <net_buf_id>
}
   29cba:	fb00 5006 	mla	r0, r0, r6, r5
   29cbe:	bd70      	pop	{r4, r5, r6, pc}

00029cc0 <net_buf_reset>:
	buf->len  = 0U;
   29cc0:	2300      	movs	r3, #0
   29cc2:	8203      	strh	r3, [r0, #16]
	buf->data = buf->__buf;
   29cc4:	6943      	ldr	r3, [r0, #20]
   29cc6:	60c3      	str	r3, [r0, #12]
}
   29cc8:	4770      	bx	lr

00029cca <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   29cca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29cce:	b082      	sub	sp, #8
   29cd0:	4605      	mov	r5, r0
   29cd2:	9101      	str	r1, [sp, #4]
   29cd4:	4616      	mov	r6, r2
   29cd6:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   29cd8:	4610      	mov	r0, r2
   29cda:	4619      	mov	r1, r3
   29cdc:	f002 fdd1 	bl	2c882 <sys_clock_timeout_end_calc>
   29ce0:	4681      	mov	r9, r0
   29ce2:	468a      	mov	sl, r1
   29ce4:	f04f 0240 	mov.w	r2, #64	; 0x40
   29ce8:	f3ef 8311 	mrs	r3, BASEPRI
   29cec:	f382 8812 	msr	BASEPRI_MAX, r2
   29cf0:	f3bf 8f6f 	isb	sy
   29cf4:	461a      	mov	r2, r3
   29cf6:	4698      	mov	r8, r3
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   29cf8:	8b6b      	ldrh	r3, [r5, #26]
   29cfa:	b393      	cbz	r3, 29d62 <net_buf_alloc_len+0x98>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   29cfc:	8b2a      	ldrh	r2, [r5, #24]
   29cfe:	4293      	cmp	r3, r2
   29d00:	d20b      	bcs.n	29d1a <net_buf_alloc_len+0x50>
	return z_impl_k_queue_get(queue, timeout);
   29d02:	2200      	movs	r2, #0
   29d04:	2300      	movs	r3, #0
   29d06:	4628      	mov	r0, r5
   29d08:	f7fa f948 	bl	23f9c <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   29d0c:	4604      	mov	r4, r0
   29d0e:	b120      	cbz	r0, 29d1a <net_buf_alloc_len+0x50>
	__asm__ volatile(
   29d10:	f388 8811 	msr	BASEPRI, r8
   29d14:	f3bf 8f6f 	isb	sy
				k_spin_unlock(&pool->lock, key);
				goto success;
   29d18:	e00a      	b.n	29d30 <net_buf_alloc_len+0x66>
			}
		}

		uninit_count = pool->uninit_count--;
   29d1a:	8b69      	ldrh	r1, [r5, #26]
   29d1c:	1e4b      	subs	r3, r1, #1
   29d1e:	836b      	strh	r3, [r5, #26]
   29d20:	f388 8811 	msr	BASEPRI, r8
   29d24:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&pool->lock, key);

		buf = pool_get_uninit(pool, uninit_count);
   29d28:	4628      	mov	r0, r5
   29d2a:	f7ff ff64 	bl	29bf6 <pool_get_uninit>
   29d2e:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   29d30:	9b01      	ldr	r3, [sp, #4]
   29d32:	b3a3      	cbz	r3, 29d9e <net_buf_alloc_len+0xd4>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   29d34:	ea56 0307 	orrs.w	r3, r6, r7
   29d38:	d005      	beq.n	29d46 <net_buf_alloc_len+0x7c>
   29d3a:	f1b7 3fff 	cmp.w	r7, #4294967295
   29d3e:	bf08      	it	eq
   29d40:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   29d44:	d11a      	bne.n	29d7c <net_buf_alloc_len+0xb2>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   29d46:	4632      	mov	r2, r6
   29d48:	463b      	mov	r3, r7
   29d4a:	a901      	add	r1, sp, #4
   29d4c:	4620      	mov	r0, r4
   29d4e:	f7ff ff65 	bl	29c1c <data_alloc>
   29d52:	4605      	mov	r5, r0
   29d54:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   29d56:	bb20      	cbnz	r0, 29da2 <net_buf_alloc_len+0xd8>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
   29d58:	4620      	mov	r0, r4
   29d5a:	f7ff ff73 	bl	29c44 <net_buf_destroy>
			return NULL;
   29d5e:	462c      	mov	r4, r5
   29d60:	e029      	b.n	29db6 <net_buf_alloc_len+0xec>
   29d62:	f382 8811 	msr	BASEPRI, r2
   29d66:	f3bf 8f6f 	isb	sy
   29d6a:	4632      	mov	r2, r6
   29d6c:	463b      	mov	r3, r7
   29d6e:	4628      	mov	r0, r5
   29d70:	f7fa f914 	bl	23f9c <z_impl_k_queue_get>
	if (!buf) {
   29d74:	4604      	mov	r4, r0
   29d76:	2800      	cmp	r0, #0
   29d78:	d1da      	bne.n	29d30 <net_buf_alloc_len+0x66>
   29d7a:	e01c      	b.n	29db6 <net_buf_alloc_len+0xec>
			int64_t remaining = end - sys_clock_tick_get();
   29d7c:	f7fb f8a8 	bl	24ed0 <sys_clock_tick_get>
   29d80:	ebb9 0900 	subs.w	r9, r9, r0
   29d84:	eb6a 0a01 	sbc.w	sl, sl, r1
			if (remaining <= 0) {
   29d88:	f1b9 0f01 	cmp.w	r9, #1
   29d8c:	f17a 0300 	sbcs.w	r3, sl, #0
   29d90:	db02      	blt.n	29d98 <net_buf_alloc_len+0xce>
				timeout = Z_TIMEOUT_TICKS(remaining);
   29d92:	464e      	mov	r6, r9
   29d94:	4657      	mov	r7, sl
   29d96:	e7d6      	b.n	29d46 <net_buf_alloc_len+0x7c>
				timeout = K_NO_WAIT;
   29d98:	2600      	movs	r6, #0
   29d9a:	4637      	mov	r7, r6
   29d9c:	e7d3      	b.n	29d46 <net_buf_alloc_len+0x7c>

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
#endif
	} else {
		buf->__buf = NULL;
   29d9e:	2300      	movs	r3, #0
   29da0:	6163      	str	r3, [r4, #20]
	}

	buf->ref   = 1U;
   29da2:	2301      	movs	r3, #1
   29da4:	7223      	strb	r3, [r4, #8]
	buf->flags = 0U;
   29da6:	2300      	movs	r3, #0
   29da8:	7263      	strb	r3, [r4, #9]
	buf->frags = NULL;
   29daa:	6063      	str	r3, [r4, #4]
	buf->size  = size;
   29dac:	9b01      	ldr	r3, [sp, #4]
   29dae:	8263      	strh	r3, [r4, #18]
	net_buf_reset(buf);
   29db0:	4620      	mov	r0, r4
   29db2:	f7ff ff85 	bl	29cc0 <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   29db6:	4620      	mov	r0, r4
   29db8:	b002      	add	sp, #8
   29dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00029dbe <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool,
				    k_timeout_t timeout)
{
   29dbe:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   29dc0:	6a41      	ldr	r1, [r0, #36]	; 0x24
   29dc2:	6849      	ldr	r1, [r1, #4]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   29dc4:	6809      	ldr	r1, [r1, #0]
   29dc6:	f7ff ff80 	bl	29cca <net_buf_alloc_len>
}
   29dca:	bd08      	pop	{r3, pc}

00029dcc <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   29dcc:	b508      	push	{r3, lr}
   29dce:	f7fa f8e5 	bl	23f9c <z_impl_k_queue_get>
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	return buf;
}
   29dd2:	bd08      	pop	{r3, pc}

00029dd4 <net_buf_simple_init_with_data>:

void net_buf_simple_init_with_data(struct net_buf_simple *buf,
				   void *data, size_t size)
{
	buf->__buf = data;
   29dd4:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   29dd6:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   29dd8:	b292      	uxth	r2, r2
   29dda:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   29ddc:	8082      	strh	r2, [r0, #4]
}
   29dde:	4770      	bx	lr

00029de0 <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   29de0:	6883      	ldr	r3, [r0, #8]
   29de2:	440b      	add	r3, r1
   29de4:	6003      	str	r3, [r0, #0]
}
   29de6:	4770      	bx	lr

00029de8 <net_buf_slist_put>:
	__asm__ volatile(
   29de8:	f04f 0240 	mov.w	r2, #64	; 0x40
   29dec:	f3ef 8311 	mrs	r3, BASEPRI
   29df0:	f382 8812 	msr	BASEPRI_MAX, r2
   29df4:	f3bf 8f6f 	isb	sy
	parent->next = child;
   29df8:	2200      	movs	r2, #0
   29dfa:	600a      	str	r2, [r1, #0]
	return list->tail;
   29dfc:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   29dfe:	b132      	cbz	r2, 29e0e <net_buf_slist_put+0x26>
	parent->next = child;
   29e00:	6011      	str	r1, [r2, #0]
	list->tail = node;
   29e02:	6041      	str	r1, [r0, #4]
	__asm__ volatile(
   29e04:	f383 8811 	msr	BASEPRI, r3
   29e08:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(buf);

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append(list, &buf->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   29e0c:	4770      	bx	lr
   29e0e:	6041      	str	r1, [r0, #4]
	list->head = node;
   29e10:	6001      	str	r1, [r0, #0]
}
   29e12:	e7f7      	b.n	29e04 <net_buf_slist_put+0x1c>

00029e14 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   29e14:	4603      	mov	r3, r0
	__asm__ volatile(
   29e16:	f04f 0140 	mov.w	r1, #64	; 0x40
   29e1a:	f3ef 8211 	mrs	r2, BASEPRI
   29e1e:	f381 8812 	msr	BASEPRI_MAX, r1
   29e22:	f3bf 8f6f 	isb	sy
	return list->head;
   29e26:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   29e28:	b128      	cbz	r0, 29e36 <net_buf_slist_get+0x22>
	return node->next;
   29e2a:	6801      	ldr	r1, [r0, #0]
	list->head = node;
   29e2c:	6019      	str	r1, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29e2e:	f8d3 c004 	ldr.w	ip, [r3, #4]
   29e32:	4560      	cmp	r0, ip
   29e34:	d004      	beq.n	29e40 <net_buf_slist_get+0x2c>
	__asm__ volatile(
   29e36:	f382 8811 	msr	BASEPRI, r2
   29e3a:	f3bf 8f6f 	isb	sy
	buf = (void *)sys_slist_get(list);

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   29e3e:	4770      	bx	lr
	list->tail = node;
   29e40:	6059      	str	r1, [r3, #4]
}
   29e42:	e7f8      	b.n	29e36 <net_buf_slist_get+0x22>

00029e44 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   29e44:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(fifo);
	__ASSERT_NO_MSG(buf);

	k_fifo_put(fifo, buf);
   29e46:	f002 f94f 	bl	2c0e8 <k_queue_append>
}
   29e4a:	bd08      	pop	{r3, pc}

00029e4c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   29e4c:	b538      	push	{r3, r4, r5, lr}
   29e4e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	while (buf) {
   29e50:	e00a      	b.n	29e68 <net_buf_unref+0x1c>
		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
		}

		buf->data = NULL;
   29e52:	2300      	movs	r3, #0
   29e54:	60e3      	str	r3, [r4, #12]
		buf->frags = NULL;
   29e56:	6063      	str	r3, [r4, #4]

		pool = net_buf_pool_get(buf->pool_id);
   29e58:	7aa0      	ldrb	r0, [r4, #10]
   29e5a:	f7f4 fe47 	bl	1eaec <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   29e5e:	6a03      	ldr	r3, [r0, #32]
   29e60:	b193      	cbz	r3, 29e88 <net_buf_unref+0x3c>
			pool->destroy(buf);
   29e62:	4620      	mov	r0, r4
   29e64:	4798      	blx	r3
{
   29e66:	462c      	mov	r4, r5
	while (buf) {
   29e68:	b194      	cbz	r4, 29e90 <net_buf_unref+0x44>
		struct net_buf *frags = buf->frags;
   29e6a:	6865      	ldr	r5, [r4, #4]
		if (--buf->ref > 0) {
   29e6c:	7a23      	ldrb	r3, [r4, #8]
   29e6e:	3b01      	subs	r3, #1
   29e70:	b2db      	uxtb	r3, r3
   29e72:	7223      	strb	r3, [r4, #8]
   29e74:	b963      	cbnz	r3, 29e90 <net_buf_unref+0x44>
		if (buf->__buf) {
   29e76:	6961      	ldr	r1, [r4, #20]
   29e78:	2900      	cmp	r1, #0
   29e7a:	d0ea      	beq.n	29e52 <net_buf_unref+0x6>
			data_unref(buf, buf->__buf);
   29e7c:	4620      	mov	r0, r4
   29e7e:	f7ff feea 	bl	29c56 <data_unref>
			buf->__buf = NULL;
   29e82:	2300      	movs	r3, #0
   29e84:	6163      	str	r3, [r4, #20]
   29e86:	e7e4      	b.n	29e52 <net_buf_unref+0x6>
		} else {
			net_buf_destroy(buf);
   29e88:	4620      	mov	r0, r4
   29e8a:	f7ff fedb 	bl	29c44 <net_buf_destroy>
   29e8e:	e7ea      	b.n	29e66 <net_buf_unref+0x1a>
		}

		buf = frags;
	}
}
   29e90:	bd38      	pop	{r3, r4, r5, pc}

00029e92 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   29e92:	7a02      	ldrb	r2, [r0, #8]
   29e94:	3201      	adds	r2, #1
   29e96:	7202      	strb	r2, [r0, #8]
	return buf;
}
   29e98:	4770      	bx	lr

00029e9a <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   29e9a:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   29e9c:	4618      	mov	r0, r3
   29e9e:	685b      	ldr	r3, [r3, #4]
   29ea0:	2b00      	cmp	r3, #0
   29ea2:	d1fb      	bne.n	29e9c <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   29ea4:	4770      	bx	lr

00029ea6 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   29ea6:	b570      	push	{r4, r5, r6, lr}
   29ea8:	4604      	mov	r4, r0
   29eaa:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   29eac:	6846      	ldr	r6, [r0, #4]
   29eae:	b11e      	cbz	r6, 29eb8 <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   29eb0:	4608      	mov	r0, r1
   29eb2:	f7ff fff2 	bl	29e9a <net_buf_frag_last>
   29eb6:	6046      	str	r6, [r0, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   29eb8:	6065      	str	r5, [r4, #4]
}
   29eba:	bd70      	pop	{r4, r5, r6, pc}

00029ebc <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   29ebc:	b538      	push	{r3, r4, r5, lr}
   29ebe:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(frag);

	if (!head) {
   29ec0:	b138      	cbz	r0, 29ed2 <net_buf_frag_add+0x16>
   29ec2:	4604      	mov	r4, r0
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   29ec4:	f7ff ffe9 	bl	29e9a <net_buf_frag_last>
   29ec8:	4629      	mov	r1, r5
   29eca:	f7ff ffec 	bl	29ea6 <net_buf_frag_insert>

	return head;
   29ece:	4620      	mov	r0, r4
}
   29ed0:	bd38      	pop	{r3, r4, r5, pc}
		return net_buf_ref(frag);
   29ed2:	4608      	mov	r0, r1
   29ed4:	f7ff ffdd 	bl	29e92 <net_buf_ref>
   29ed8:	e7fa      	b.n	29ed0 <net_buf_frag_add+0x14>

00029eda <net_buf_simple_add>:
	return buf->data + buf->len;
   29eda:	6802      	ldr	r2, [r0, #0]
   29edc:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   29ede:	4419      	add	r1, r3
   29ee0:	8081      	strh	r1, [r0, #4]
	return tail;
}
   29ee2:	18d0      	adds	r0, r2, r3
   29ee4:	4770      	bx	lr

00029ee6 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   29ee6:	b538      	push	{r3, r4, r5, lr}
   29ee8:	460d      	mov	r5, r1
   29eea:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   29eec:	4611      	mov	r1, r2
   29eee:	f7ff fff4 	bl	29eda <net_buf_simple_add>
   29ef2:	4622      	mov	r2, r4
   29ef4:	4629      	mov	r1, r5
   29ef6:	f7fd fae9 	bl	274cc <memcpy>
}
   29efa:	bd38      	pop	{r3, r4, r5, pc}

00029efc <net_buf_simple_add_le16>:

	return u8;
}

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   29efc:	b510      	push	{r4, lr}
   29efe:	460c      	mov	r4, r1
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   29f00:	2102      	movs	r1, #2
   29f02:	f7ff ffea 	bl	29eda <net_buf_simple_add>
	dst[0] = val;
   29f06:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   29f08:	0a24      	lsrs	r4, r4, #8
   29f0a:	7044      	strb	r4, [r0, #1]
}
   29f0c:	bd10      	pop	{r4, pc}

00029f0e <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   29f0e:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   29f10:	6800      	ldr	r0, [r0, #0]
   29f12:	1a40      	subs	r0, r0, r1
   29f14:	6018      	str	r0, [r3, #0]
	buf->len += len;
   29f16:	889a      	ldrh	r2, [r3, #4]
   29f18:	440a      	add	r2, r1
   29f1a:	809a      	strh	r2, [r3, #4]
	return buf->data;
}
   29f1c:	4770      	bx	lr

00029f1e <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   29f1e:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   29f20:	8882      	ldrh	r2, [r0, #4]
   29f22:	1a52      	subs	r2, r2, r1
   29f24:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   29f26:	6800      	ldr	r0, [r0, #0]
   29f28:	4408      	add	r0, r1
   29f2a:	6018      	str	r0, [r3, #0]
}
   29f2c:	4770      	bx	lr

00029f2e <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   29f2e:	4603      	mov	r3, r0
	void *data = buf->data;
   29f30:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   29f32:	889a      	ldrh	r2, [r3, #4]
   29f34:	1a52      	subs	r2, r2, r1
   29f36:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   29f38:	4401      	add	r1, r0
   29f3a:	6019      	str	r1, [r3, #0]

	return data;
}
   29f3c:	4770      	bx	lr

00029f3e <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   29f3e:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   29f40:	6803      	ldr	r3, [r0, #0]
   29f42:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   29f44:	2101      	movs	r1, #1
   29f46:	f7ff ffea 	bl	29f1e <net_buf_simple_pull>

	return val;
}
   29f4a:	4620      	mov	r0, r4
   29f4c:	bd10      	pop	{r4, pc}

00029f4e <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   29f4e:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   29f50:	6803      	ldr	r3, [r0, #0]
   29f52:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   29f54:	2102      	movs	r1, #2
   29f56:	f7ff ffe2 	bl	29f1e <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   29f5a:	4620      	mov	r0, r4
   29f5c:	bd10      	pop	{r4, pc}

00029f5e <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   29f5e:	6802      	ldr	r2, [r0, #0]
   29f60:	6880      	ldr	r0, [r0, #8]
}
   29f62:	1a10      	subs	r0, r2, r0
   29f64:	4770      	bx	lr

00029f66 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   29f66:	b538      	push	{r3, r4, r5, lr}
   29f68:	4604      	mov	r4, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   29f6a:	88c5      	ldrh	r5, [r0, #6]
   29f6c:	f7ff fff7 	bl	29f5e <net_buf_simple_headroom>
   29f70:	1a2d      	subs	r5, r5, r0
   29f72:	88a0      	ldrh	r0, [r4, #4]
}
   29f74:	1a28      	subs	r0, r5, r0
   29f76:	bd38      	pop	{r3, r4, r5, pc}

00029f78 <nrf_clock_is_running>:
    switch (domain)
   29f78:	b119      	cbz	r1, 29f82 <nrf_clock_is_running+0xa>
   29f7a:	2901      	cmp	r1, #1
   29f7c:	d00e      	beq.n	29f9c <nrf_clock_is_running+0x24>
   29f7e:	2000      	movs	r0, #0
   29f80:	4770      	bx	lr
            if (p_clk_src != NULL)
   29f82:	b122      	cbz	r2, 29f8e <nrf_clock_is_running+0x16>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   29f84:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   29f88:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   29f8c:	6013      	str	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   29f8e:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   29f92:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   29f96:	d10e      	bne.n	29fb6 <nrf_clock_is_running+0x3e>
    return false;
   29f98:	2000      	movs	r0, #0
   29f9a:	4770      	bx	lr
            if (p_clk_src != NULL)
   29f9c:	b122      	cbz	r2, 29fa8 <nrf_clock_is_running+0x30>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   29f9e:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   29fa2:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   29fa6:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   29fa8:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   29fac:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   29fb0:	d103      	bne.n	29fba <nrf_clock_is_running+0x42>
    return false;
   29fb2:	2000      	movs	r0, #0
   29fb4:	4770      	bx	lr
                return true;
   29fb6:	2001      	movs	r0, #1
   29fb8:	4770      	bx	lr
                return true;
   29fba:	2001      	movs	r0, #1
}
   29fbc:	4770      	bx	lr

00029fbe <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   29fbe:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   29fc0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   29fc4:	0089      	lsls	r1, r1, #2
   29fc6:	3138      	adds	r1, #56	; 0x38
}
   29fc8:	4408      	add	r0, r1
   29fca:	4770      	bx	lr

00029fcc <get_sub_config>:
	const struct nrf_clock_control_config *config =
   29fcc:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   29fce:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   29fd2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   29fd6:	4770      	bx	lr

00029fd8 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   29fd8:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   29fda:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   29fde:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   29fe2:	4770      	bx	lr

00029fe4 <get_status>:
{
   29fe4:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   29fe6:	b2c9      	uxtb	r1, r1
   29fe8:	f7ff ffe9 	bl	29fbe <get_sub_data>
   29fec:	6880      	ldr	r0, [r0, #8]
}
   29fee:	f000 0007 	and.w	r0, r0, #7
   29ff2:	bd08      	pop	{r3, pc}

00029ff4 <set_off_state>:
	__asm__ volatile(
   29ff4:	f04f 0340 	mov.w	r3, #64	; 0x40
   29ff8:	f3ef 8211 	mrs	r2, BASEPRI
   29ffc:	f383 8812 	msr	BASEPRI_MAX, r3
   2a000:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2a004:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2a006:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   2a00a:	d001      	beq.n	2a010 <set_off_state+0x1c>
   2a00c:	428b      	cmp	r3, r1
   2a00e:	d107      	bne.n	2a020 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2a010:	2301      	movs	r3, #1
   2a012:	6003      	str	r3, [r0, #0]
	int err = 0;
   2a014:	2000      	movs	r0, #0
	__asm__ volatile(
   2a016:	f382 8811 	msr	BASEPRI, r2
   2a01a:	f3bf 8f6f 	isb	sy
}
   2a01e:	4770      	bx	lr
		err = -EPERM;
   2a020:	f04f 30ff 	mov.w	r0, #4294967295
   2a024:	e7f7      	b.n	2a016 <set_off_state+0x22>

0002a026 <set_starting_state>:
	__asm__ volatile(
   2a026:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a02a:	f3ef 8211 	mrs	r2, BASEPRI
   2a02e:	f383 8812 	msr	BASEPRI_MAX, r3
   2a032:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2a036:	6803      	ldr	r3, [r0, #0]
   2a038:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2a03c:	f003 0307 	and.w	r3, r3, #7
   2a040:	2b01      	cmp	r3, #1
   2a042:	d008      	beq.n	2a056 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
   2a044:	458c      	cmp	ip, r1
   2a046:	d009      	beq.n	2a05c <set_starting_state+0x36>
		err = -EPERM;
   2a048:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   2a04c:	f382 8811 	msr	BASEPRI, r2
   2a050:	f3bf 8f6f 	isb	sy
}
   2a054:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2a056:	6001      	str	r1, [r0, #0]
	int err = 0;
   2a058:	2000      	movs	r0, #0
   2a05a:	e7f7      	b.n	2a04c <set_starting_state+0x26>
		err = -EALREADY;
   2a05c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2a060:	e7f4      	b.n	2a04c <set_starting_state+0x26>

0002a062 <set_on_state>:
	__asm__ volatile(
   2a062:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a066:	f3ef 8211 	mrs	r2, BASEPRI
   2a06a:	f383 8812 	msr	BASEPRI_MAX, r3
   2a06e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2a072:	6803      	ldr	r3, [r0, #0]
   2a074:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2a078:	f043 0302 	orr.w	r3, r3, #2
   2a07c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2a07e:	f382 8811 	msr	BASEPRI, r2
   2a082:	f3bf 8f6f 	isb	sy
}
   2a086:	4770      	bx	lr

0002a088 <clkstarted_handle>:
{
   2a088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a08a:	4606      	mov	r6, r0
   2a08c:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   2a08e:	f7ff ff96 	bl	29fbe <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   2a092:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   2a094:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   2a096:	2300      	movs	r3, #0
   2a098:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   2a09c:	f7ff ffe1 	bl	2a062 <set_on_state>
	if (callback) {
   2a0a0:	b11d      	cbz	r5, 2a0aa <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   2a0a2:	463a      	mov	r2, r7
   2a0a4:	4621      	mov	r1, r4
   2a0a6:	4630      	mov	r0, r6
   2a0a8:	47a8      	blx	r5
}
   2a0aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002a0ac <stop>:
{
   2a0ac:	b570      	push	{r4, r5, r6, lr}
   2a0ae:	4606      	mov	r6, r0
   2a0b0:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   2a0b2:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2a0b4:	4621      	mov	r1, r4
   2a0b6:	f7ff ff82 	bl	29fbe <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   2a0ba:	4629      	mov	r1, r5
   2a0bc:	3008      	adds	r0, #8
   2a0be:	f7ff ff99 	bl	29ff4 <set_off_state>
	if (err < 0) {
   2a0c2:	2800      	cmp	r0, #0
   2a0c4:	db06      	blt.n	2a0d4 <stop+0x28>
	get_sub_config(dev, type)->stop();
   2a0c6:	4621      	mov	r1, r4
   2a0c8:	4630      	mov	r0, r6
   2a0ca:	f7ff ff7f 	bl	29fcc <get_sub_config>
   2a0ce:	6843      	ldr	r3, [r0, #4]
   2a0d0:	4798      	blx	r3
	return 0;
   2a0d2:	2000      	movs	r0, #0
}
   2a0d4:	bd70      	pop	{r4, r5, r6, pc}

0002a0d6 <api_stop>:
{
   2a0d6:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   2a0d8:	2280      	movs	r2, #128	; 0x80
   2a0da:	f7ff ffe7 	bl	2a0ac <stop>
}
   2a0de:	bd08      	pop	{r3, pc}

0002a0e0 <async_start>:
{
   2a0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a0e4:	4606      	mov	r6, r0
   2a0e6:	4690      	mov	r8, r2
   2a0e8:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   2a0ea:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2a0ec:	4629      	mov	r1, r5
   2a0ee:	f7ff ff66 	bl	29fbe <get_sub_data>
   2a0f2:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   2a0f4:	9906      	ldr	r1, [sp, #24]
   2a0f6:	3008      	adds	r0, #8
   2a0f8:	f7ff ff95 	bl	2a026 <set_starting_state>
	if (err < 0) {
   2a0fc:	2800      	cmp	r0, #0
   2a0fe:	db09      	blt.n	2a114 <async_start+0x34>
	subdata->cb = cb;
   2a100:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   2a104:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   2a106:	4629      	mov	r1, r5
   2a108:	4630      	mov	r0, r6
   2a10a:	f7ff ff5f 	bl	29fcc <get_sub_config>
   2a10e:	6803      	ldr	r3, [r0, #0]
   2a110:	4798      	blx	r3
	return 0;
   2a112:	2000      	movs	r0, #0
}
   2a114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002a118 <api_start>:
{
   2a118:	b510      	push	{r4, lr}
   2a11a:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2a11c:	2480      	movs	r4, #128	; 0x80
   2a11e:	9400      	str	r4, [sp, #0]
   2a120:	f7ff ffde 	bl	2a0e0 <async_start>
}
   2a124:	b002      	add	sp, #8
   2a126:	bd10      	pop	{r4, pc}

0002a128 <onoff_started_callback>:
{
   2a128:	b510      	push	{r4, lr}
   2a12a:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   2a12c:	b2c9      	uxtb	r1, r1
   2a12e:	f7ff ff53 	bl	29fd8 <get_onoff_manager>
	notify(mgr, 0);
   2a132:	2100      	movs	r1, #0
   2a134:	47a0      	blx	r4
}
   2a136:	bd10      	pop	{r4, pc}

0002a138 <hfclk_start>:
{
   2a138:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   2a13a:	2001      	movs	r0, #1
   2a13c:	f7f8 f9f2 	bl	22524 <nrfx_clock_start>
}
   2a140:	bd08      	pop	{r3, pc}

0002a142 <lfclk_start>:
{
   2a142:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2a144:	2000      	movs	r0, #0
   2a146:	f7f8 f9ed 	bl	22524 <nrfx_clock_start>
}
   2a14a:	bd08      	pop	{r3, pc}

0002a14c <hfclk_stop>:
{
   2a14c:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   2a14e:	2001      	movs	r0, #1
   2a150:	f001 fc59 	bl	2ba06 <nrfx_clock_stop>
}
   2a154:	bd08      	pop	{r3, pc}

0002a156 <lfclk_stop>:
{
   2a156:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2a158:	2000      	movs	r0, #0
   2a15a:	f001 fc54 	bl	2ba06 <nrfx_clock_stop>
}
   2a15e:	bd08      	pop	{r3, pc}

0002a160 <k_msleep>:
{
   2a160:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   2a162:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2a166:	17c1      	asrs	r1, r0, #31
   2a168:	03c9      	lsls	r1, r1, #15
   2a16a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   2a16e:	03c0      	lsls	r0, r0, #15
   2a170:	f240 33e7 	movw	r3, #999	; 0x3e7
   2a174:	18c0      	adds	r0, r0, r3
   2a176:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2a17a:	f04f 0300 	mov.w	r3, #0
   2a17e:	f141 0100 	adc.w	r1, r1, #0
   2a182:	f7d5 ffbd 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   2a186:	f7fa fca3 	bl	24ad0 <z_impl_k_sleep>
}
   2a18a:	bd08      	pop	{r3, pc}

0002a18c <blocking_start_callback>:
{
   2a18c:	b508      	push	{r3, lr}
   2a18e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2a190:	f7f9 ff42 	bl	24018 <z_impl_k_sem_give>
}
   2a194:	bd08      	pop	{r3, pc}

0002a196 <k_msleep>:
{
   2a196:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   2a198:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2a19c:	17c1      	asrs	r1, r0, #31
   2a19e:	03c9      	lsls	r1, r1, #15
   2a1a0:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   2a1a4:	03c0      	lsls	r0, r0, #15
   2a1a6:	f240 33e7 	movw	r3, #999	; 0x3e7
   2a1aa:	18c0      	adds	r0, r0, r3
   2a1ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2a1b0:	f04f 0300 	mov.w	r3, #0
   2a1b4:	f141 0100 	adc.w	r1, r1, #0
   2a1b8:	f7d5 ffa2 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   2a1bc:	f7fa fc88 	bl	24ad0 <z_impl_k_sleep>
}
   2a1c0:	bd08      	pop	{r3, pc}

0002a1c2 <wait>:
{
   2a1c2:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   2a1c4:	f001 fe95 	bl	2bef2 <k_is_in_isr>
   2a1c8:	b100      	cbz	r0, 2a1cc <wait+0xa>
}
   2a1ca:	bd08      	pop	{r3, pc}
		k_msleep(CONFIG_RTT_TX_RETRY_DELAY_MS);
   2a1cc:	2002      	movs	r0, #2
   2a1ce:	f7ff ffe2 	bl	2a196 <k_msleep>
}
   2a1d2:	e7fa      	b.n	2a1ca <wait+0x8>

0002a1d4 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   2a1d4:	460b      	mov	r3, r1
   2a1d6:	b139      	cbz	r1, 2a1e8 <sys_slist_remove+0x14>
	return node->next;
   2a1d8:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   2a1da:	6019      	str	r1, [r3, #0]
	return list->tail;
   2a1dc:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2a1de:	428a      	cmp	r2, r1
   2a1e0:	d009      	beq.n	2a1f6 <sys_slist_remove+0x22>
	parent->next = child;
   2a1e2:	2300      	movs	r3, #0
   2a1e4:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2a1e6:	4770      	bx	lr
	return node->next;
   2a1e8:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   2a1ea:	6003      	str	r3, [r0, #0]
	return list->tail;
   2a1ec:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2a1ee:	428a      	cmp	r2, r1
   2a1f0:	d1f7      	bne.n	2a1e2 <sys_slist_remove+0xe>
	list->tail = node;
   2a1f2:	6043      	str	r3, [r0, #4]
}
   2a1f4:	e7f5      	b.n	2a1e2 <sys_slist_remove+0xe>
	list->tail = node;
   2a1f6:	6043      	str	r3, [r0, #4]
}
   2a1f8:	e7f3      	b.n	2a1e2 <sys_slist_remove+0xe>

0002a1fa <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a1fa:	b508      	push	{r3, lr}
   2a1fc:	460a      	mov	r2, r1
	return list->head;
   2a1fe:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a200:	2100      	movs	r1, #0
   2a202:	e001      	b.n	2a208 <sys_slist_find_and_remove+0xe>
   2a204:	4619      	mov	r1, r3
   2a206:	681b      	ldr	r3, [r3, #0]
   2a208:	b12b      	cbz	r3, 2a216 <sys_slist_find_and_remove+0x1c>
   2a20a:	4293      	cmp	r3, r2
   2a20c:	d1fa      	bne.n	2a204 <sys_slist_find_and_remove+0xa>
   2a20e:	f7ff ffe1 	bl	2a1d4 <sys_slist_remove>
   2a212:	2001      	movs	r0, #1
   2a214:	e000      	b.n	2a218 <sys_slist_find_and_remove+0x1e>
   2a216:	2000      	movs	r0, #0
   2a218:	bd08      	pop	{r3, pc}

0002a21a <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
   2a21a:	b570      	push	{r4, r5, r6, lr}
   2a21c:	4604      	mov	r4, r0
   2a21e:	460d      	mov	r5, r1
   2a220:	4616      	mov	r6, r2
	return list->head;
   2a222:	6803      	ldr	r3, [r0, #0]
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   2a224:	b133      	cbz	r3, 2a234 <gpio_manage_callback+0x1a>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   2a226:	f7ff ffe8 	bl	2a1fa <sys_slist_find_and_remove>
   2a22a:	b970      	cbnz	r0, 2a24a <gpio_manage_callback+0x30>
			if (!set) {
   2a22c:	b91e      	cbnz	r6, 2a236 <gpio_manage_callback+0x1c>
				return -EINVAL;
   2a22e:	f06f 0015 	mvn.w	r0, #21
   2a232:	e006      	b.n	2a242 <gpio_manage_callback+0x28>
			}
		}
	} else if (!set) {
   2a234:	b132      	cbz	r2, 2a244 <gpio_manage_callback+0x2a>
   2a236:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   2a238:	602b      	str	r3, [r5, #0]
	list->head = node;
   2a23a:	6025      	str	r5, [r4, #0]
	return list->tail;
   2a23c:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2a23e:	b143      	cbz	r3, 2a252 <gpio_manage_callback+0x38>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   2a240:	2000      	movs	r0, #0
}
   2a242:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2a244:	f06f 0015 	mvn.w	r0, #21
   2a248:	e7fb      	b.n	2a242 <gpio_manage_callback+0x28>
	if (set) {
   2a24a:	2e00      	cmp	r6, #0
   2a24c:	d1f3      	bne.n	2a236 <gpio_manage_callback+0x1c>
	return 0;
   2a24e:	2000      	movs	r0, #0
   2a250:	e7f7      	b.n	2a242 <gpio_manage_callback+0x28>
	list->tail = node;
   2a252:	6065      	str	r5, [r4, #4]
   2a254:	2000      	movs	r0, #0
}
   2a256:	e7f4      	b.n	2a242 <gpio_manage_callback+0x28>

0002a258 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   2a258:	b570      	push	{r4, r5, r6, lr}
   2a25a:	460e      	mov	r6, r1
   2a25c:	4615      	mov	r5, r2
	return list->head;
   2a25e:	6801      	ldr	r1, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2a260:	b121      	cbz	r1, 2a26c <gpio_fire_callbacks+0x14>
	return node->next;
   2a262:	680c      	ldr	r4, [r1, #0]
   2a264:	b13c      	cbz	r4, 2a276 <gpio_fire_callbacks+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2a266:	b931      	cbnz	r1, 2a276 <gpio_fire_callbacks+0x1e>
   2a268:	460c      	mov	r4, r1
   2a26a:	e004      	b.n	2a276 <gpio_fire_callbacks+0x1e>
   2a26c:	460c      	mov	r4, r1
   2a26e:	e002      	b.n	2a276 <gpio_fire_callbacks+0x1e>
   2a270:	4623      	mov	r3, r4
   2a272:	4621      	mov	r1, r4
   2a274:	461c      	mov	r4, r3
   2a276:	b171      	cbz	r1, 2a296 <gpio_fire_callbacks+0x3e>
		if (cb->pin_mask & pins) {
   2a278:	688a      	ldr	r2, [r1, #8]
   2a27a:	402a      	ands	r2, r5
   2a27c:	d002      	beq.n	2a284 <gpio_fire_callbacks+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   2a27e:	684b      	ldr	r3, [r1, #4]
   2a280:	4630      	mov	r0, r6
   2a282:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2a284:	2c00      	cmp	r4, #0
   2a286:	d0f3      	beq.n	2a270 <gpio_fire_callbacks+0x18>
	return node->next;
   2a288:	6823      	ldr	r3, [r4, #0]
   2a28a:	2b00      	cmp	r3, #0
   2a28c:	d0f1      	beq.n	2a272 <gpio_fire_callbacks+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2a28e:	2c00      	cmp	r4, #0
   2a290:	d1ef      	bne.n	2a272 <gpio_fire_callbacks+0x1a>
   2a292:	4623      	mov	r3, r4
   2a294:	e7ed      	b.n	2a272 <gpio_fire_callbacks+0x1a>
		}
	}
}
   2a296:	bd70      	pop	{r4, r5, r6, pc}

0002a298 <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2a298:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
   2a29c:	0580      	lsls	r0, r0, #22
   2a29e:	0d80      	lsrs	r0, r0, #22
   2a2a0:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
   2a2a4:	d033      	beq.n	2a30e <get_drive+0x76>
   2a2a6:	d816      	bhi.n	2a2d6 <get_drive+0x3e>
   2a2a8:	2806      	cmp	r0, #6
   2a2aa:	d02c      	beq.n	2a306 <get_drive+0x6e>
   2a2ac:	d906      	bls.n	2a2bc <get_drive+0x24>
   2a2ae:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   2a2b2:	d10d      	bne.n	2a2d0 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
   2a2b4:	2301      	movs	r3, #1
   2a2b6:	700b      	strb	r3, [r1, #0]
	return 0;
   2a2b8:	2000      	movs	r0, #0
		break;
   2a2ba:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2a2bc:	b300      	cbz	r0, 2a300 <get_drive+0x68>
   2a2be:	2802      	cmp	r0, #2
   2a2c0:	d103      	bne.n	2a2ca <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
   2a2c2:	2304      	movs	r3, #4
   2a2c4:	700b      	strb	r3, [r1, #0]
	return 0;
   2a2c6:	2000      	movs	r0, #0
		break;
   2a2c8:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2a2ca:	f06f 0015 	mvn.w	r0, #21
   2a2ce:	4770      	bx	lr
   2a2d0:	f06f 0015 	mvn.w	r0, #21
   2a2d4:	4770      	bx	lr
   2a2d6:	f240 2302 	movw	r3, #514	; 0x202
   2a2da:	4298      	cmp	r0, r3
   2a2dc:	d01b      	beq.n	2a316 <get_drive+0x7e>
   2a2de:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
   2a2e2:	d103      	bne.n	2a2ec <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
   2a2e4:	2303      	movs	r3, #3
   2a2e6:	700b      	strb	r3, [r1, #0]
	return 0;
   2a2e8:	2000      	movs	r0, #0
		break;
   2a2ea:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2a2ec:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   2a2f0:	d103      	bne.n	2a2fa <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
   2a2f2:	2302      	movs	r3, #2
   2a2f4:	700b      	strb	r3, [r1, #0]
	return 0;
   2a2f6:	2000      	movs	r0, #0
		break;
   2a2f8:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2a2fa:	f06f 0015 	mvn.w	r0, #21
   2a2fe:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   2a300:	2000      	movs	r0, #0
   2a302:	7008      	strb	r0, [r1, #0]
		break;
   2a304:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   2a306:	2306      	movs	r3, #6
   2a308:	700b      	strb	r3, [r1, #0]
	return 0;
   2a30a:	2000      	movs	r0, #0
		break;
   2a30c:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   2a30e:	2307      	movs	r3, #7
   2a310:	700b      	strb	r3, [r1, #0]
	return 0;
   2a312:	2000      	movs	r0, #0
		break;
   2a314:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
   2a316:	2305      	movs	r3, #5
   2a318:	700b      	strb	r3, [r1, #0]
	return 0;
   2a31a:	2000      	movs	r0, #0
}
   2a31c:	4770      	bx	lr

0002a31e <get_pull>:
	if (flags & GPIO_PULL_UP) {
   2a31e:	f010 0f10 	tst.w	r0, #16
   2a322:	d104      	bne.n	2a32e <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   2a324:	f010 0f20 	tst.w	r0, #32
   2a328:	d103      	bne.n	2a332 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   2a32a:	2000      	movs	r0, #0
   2a32c:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   2a32e:	2003      	movs	r0, #3
   2a330:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   2a332:	2001      	movs	r0, #1
}
   2a334:	4770      	bx	lr

0002a336 <gpio_nrfx_port_get_raw>:
	return port->config;
   2a336:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a338:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2a33a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2a33e:	600b      	str	r3, [r1, #0]
}
   2a340:	2000      	movs	r0, #0
   2a342:	4770      	bx	lr

0002a344 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   2a344:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a346:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   2a348:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   2a34c:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   2a350:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2a354:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   2a358:	2000      	movs	r0, #0
   2a35a:	4770      	bx	lr

0002a35c <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   2a35c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a35e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   2a360:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   2a364:	2000      	movs	r0, #0
   2a366:	4770      	bx	lr

0002a368 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   2a368:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a36a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2a36c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   2a370:	2000      	movs	r0, #0
   2a372:	4770      	bx	lr

0002a374 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   2a374:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a376:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2a378:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   2a37c:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   2a380:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   2a382:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2a386:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   2a38a:	2000      	movs	r0, #0
   2a38c:	4770      	bx	lr

0002a38e <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   2a38e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
   2a392:	d007      	beq.n	2a3a4 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   2a394:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
   2a398:	d00d      	beq.n	2a3b6 <get_trigger+0x28>
   2a39a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   2a39e:	d008      	beq.n	2a3b2 <get_trigger+0x24>
   2a3a0:	2001      	movs	r0, #1
}
   2a3a2:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   2a3a4:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   2a3a8:	d001      	beq.n	2a3ae <get_trigger+0x20>
   2a3aa:	2005      	movs	r0, #5
   2a3ac:	4770      	bx	lr
   2a3ae:	2004      	movs	r0, #4
   2a3b0:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   2a3b2:	2002      	movs	r0, #2
   2a3b4:	4770      	bx	lr
   2a3b6:	2003      	movs	r0, #3
   2a3b8:	4770      	bx	lr

0002a3ba <gpio_nrfx_manage_callback>:
{
   2a3ba:	b508      	push	{r3, lr}
	return port->data;
   2a3bc:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2a3be:	3004      	adds	r0, #4
   2a3c0:	f7ff ff2b 	bl	2a21a <gpio_manage_callback>
}
   2a3c4:	bd08      	pop	{r3, pc}

0002a3c6 <nrfx_gpio_handler>:
{
   2a3c6:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
   2a3c8:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
   2a3cc:	0940      	lsrs	r0, r0, #5
   2a3ce:	f7f4 fd87 	bl	1eee0 <get_dev>
	if (port == NULL) {
   2a3d2:	b130      	cbz	r0, 2a3e2 <nrfx_gpio_handler+0x1c>
   2a3d4:	4601      	mov	r1, r0
	return port->data;
   2a3d6:	6900      	ldr	r0, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
   2a3d8:	2201      	movs	r2, #1
   2a3da:	40a2      	lsls	r2, r4
   2a3dc:	3004      	adds	r0, #4
   2a3de:	f7ff ff3b 	bl	2a258 <gpio_fire_callbacks>
}
   2a3e2:	bd10      	pop	{r4, pc}

0002a3e4 <z_impl_gpio_pin_configure>:
{
   2a3e4:	b538      	push	{r3, r4, r5, lr}
   2a3e6:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
   2a3e8:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
   2a3ea:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   2a3ec:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
   2a3f0:	d007      	beq.n	2a402 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   2a3f2:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   2a3f6:	d004      	beq.n	2a402 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   2a3f8:	f012 0f01 	tst.w	r2, #1
   2a3fc:	d001      	beq.n	2a402 <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   2a3fe:	f482 2340 	eor.w	r3, r2, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   2a402:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   2a406:	f013 0f01 	tst.w	r3, #1
   2a40a:	d00a      	beq.n	2a422 <z_impl_gpio_pin_configure+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2a40c:	6823      	ldr	r3, [r4, #0]
   2a40e:	f04f 0c01 	mov.w	ip, #1
   2a412:	fa0c fc01 	lsl.w	ip, ip, r1
   2a416:	ea43 030c 	orr.w	r3, r3, ip
   2a41a:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
   2a41c:	682b      	ldr	r3, [r5, #0]
   2a41e:	4798      	blx	r3
}
   2a420:	bd38      	pop	{r3, r4, r5, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2a422:	6823      	ldr	r3, [r4, #0]
   2a424:	f04f 0c01 	mov.w	ip, #1
   2a428:	fa0c fc01 	lsl.w	ip, ip, r1
   2a42c:	ea23 030c 	bic.w	r3, r3, ip
   2a430:	6023      	str	r3, [r4, #0]
   2a432:	e7f3      	b.n	2a41c <z_impl_gpio_pin_configure+0x38>

0002a434 <gpio_pin_configure_dt>:
{
   2a434:	b508      	push	{r3, lr}
   2a436:	4603      	mov	r3, r0
   2a438:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
   2a43a:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   2a43c:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   2a43e:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   2a440:	ea42 020c 	orr.w	r2, r2, ip
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   2a444:	f7ff ffce 	bl	2a3e4 <z_impl_gpio_pin_configure>
}
   2a448:	bd08      	pop	{r3, pc}

0002a44a <gpio_pin_set_raw>:
{
   2a44a:	b508      	push	{r3, lr}
	if (value != 0)	{
   2a44c:	b132      	cbz	r2, 2a45c <gpio_pin_set_raw+0x12>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   2a44e:	2301      	movs	r3, #1
   2a450:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   2a454:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   2a456:	68db      	ldr	r3, [r3, #12]
   2a458:	4798      	blx	r3
}
   2a45a:	bd08      	pop	{r3, pc}
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   2a45c:	2301      	movs	r3, #1
   2a45e:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   2a462:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   2a464:	691b      	ldr	r3, [r3, #16]
   2a466:	4798      	blx	r3
	return ret;
   2a468:	e7f7      	b.n	2a45a <gpio_pin_set_raw+0x10>

0002a46a <gpio_pin_set>:
{
   2a46a:	b510      	push	{r4, lr}
	const struct gpio_driver_data *const data =
   2a46c:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2a46e:	681c      	ldr	r4, [r3, #0]
   2a470:	2301      	movs	r3, #1
   2a472:	408b      	lsls	r3, r1
   2a474:	421c      	tst	r4, r3
   2a476:	d002      	beq.n	2a47e <gpio_pin_set+0x14>
		value = (value != 0) ? 0 : 1;
   2a478:	fab2 f282 	clz	r2, r2
   2a47c:	0952      	lsrs	r2, r2, #5
	return gpio_pin_set_raw(port, pin, value);
   2a47e:	f7ff ffe4 	bl	2a44a <gpio_pin_set_raw>
}
   2a482:	bd10      	pop	{r4, pc}

0002a484 <spi_context_get_next_buf>:
{
   2a484:	b430      	push	{r4, r5}
	while (*count) {
   2a486:	e004      	b.n	2a492 <spi_context_get_next_buf+0xe>
		++(*current);
   2a488:	3408      	adds	r4, #8
   2a48a:	6004      	str	r4, [r0, #0]
		--(*count);
   2a48c:	680c      	ldr	r4, [r1, #0]
   2a48e:	3c01      	subs	r4, #1
   2a490:	600c      	str	r4, [r1, #0]
	while (*count) {
   2a492:	680c      	ldr	r4, [r1, #0]
   2a494:	b14c      	cbz	r4, 2a4aa <spi_context_get_next_buf+0x26>
		if (((*current)->len / dfs) != 0) {
   2a496:	6804      	ldr	r4, [r0, #0]
   2a498:	6865      	ldr	r5, [r4, #4]
   2a49a:	429d      	cmp	r5, r3
   2a49c:	d3f4      	bcc.n	2a488 <spi_context_get_next_buf+0x4>
			*buf_len = (*current)->len / dfs;
   2a49e:	fbb5 f5f3 	udiv	r5, r5, r3
   2a4a2:	6015      	str	r5, [r2, #0]
			return (*current)->buf;
   2a4a4:	6803      	ldr	r3, [r0, #0]
   2a4a6:	6818      	ldr	r0, [r3, #0]
   2a4a8:	e001      	b.n	2a4ae <spi_context_get_next_buf+0x2a>
	*buf_len = 0;
   2a4aa:	2000      	movs	r0, #0
   2a4ac:	6010      	str	r0, [r2, #0]
}
   2a4ae:	bc30      	pop	{r4, r5}
   2a4b0:	4770      	bx	lr

0002a4b2 <spi_context_buffers_setup>:
{
   2a4b2:	b570      	push	{r4, r5, r6, lr}
   2a4b4:	4604      	mov	r4, r0
   2a4b6:	4615      	mov	r5, r2
   2a4b8:	461e      	mov	r6, r3
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   2a4ba:	460a      	mov	r2, r1
   2a4bc:	b309      	cbz	r1, 2a502 <spi_context_buffers_setup+0x50>
   2a4be:	680b      	ldr	r3, [r1, #0]
   2a4c0:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   2a4c2:	b303      	cbz	r3, 2a506 <spi_context_buffers_setup+0x54>
   2a4c4:	6853      	ldr	r3, [r2, #4]
   2a4c6:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   2a4c8:	4633      	mov	r3, r6
   2a4ca:	f104 0258 	add.w	r2, r4, #88	; 0x58
   2a4ce:	f104 0148 	add.w	r1, r4, #72	; 0x48
   2a4d2:	f104 0044 	add.w	r0, r4, #68	; 0x44
   2a4d6:	f7ff ffd5 	bl	2a484 <spi_context_get_next_buf>
	ctx->tx_buf = (const uint8_t *)
   2a4da:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   2a4dc:	b1ad      	cbz	r5, 2a50a <spi_context_buffers_setup+0x58>
   2a4de:	682b      	ldr	r3, [r5, #0]
   2a4e0:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   2a4e2:	b1a3      	cbz	r3, 2a50e <spi_context_buffers_setup+0x5c>
   2a4e4:	686b      	ldr	r3, [r5, #4]
   2a4e6:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   2a4e8:	4633      	mov	r3, r6
   2a4ea:	f104 0260 	add.w	r2, r4, #96	; 0x60
   2a4ee:	f104 0150 	add.w	r1, r4, #80	; 0x50
   2a4f2:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   2a4f6:	f7ff ffc5 	bl	2a484 <spi_context_get_next_buf>
	ctx->rx_buf = (uint8_t *)
   2a4fa:	65e0      	str	r0, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
   2a4fc:	2300      	movs	r3, #0
   2a4fe:	6423      	str	r3, [r4, #64]	; 0x40
}
   2a500:	bd70      	pop	{r4, r5, r6, pc}
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   2a502:	460b      	mov	r3, r1
   2a504:	e7dc      	b.n	2a4c0 <spi_context_buffers_setup+0xe>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   2a506:	2300      	movs	r3, #0
   2a508:	e7dd      	b.n	2a4c6 <spi_context_buffers_setup+0x14>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   2a50a:	462b      	mov	r3, r5
   2a50c:	e7e8      	b.n	2a4e0 <spi_context_buffers_setup+0x2e>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   2a50e:	2300      	movs	r3, #0
   2a510:	e7e9      	b.n	2a4e6 <spi_context_buffers_setup+0x34>

0002a512 <_spi_context_cs_control>:
{
   2a512:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   2a514:	6803      	ldr	r3, [r0, #0]
   2a516:	b1a3      	cbz	r3, 2a542 <_spi_context_cs_control+0x30>
   2a518:	4604      	mov	r4, r0
   2a51a:	689d      	ldr	r5, [r3, #8]
   2a51c:	b18d      	cbz	r5, 2a542 <_spi_context_cs_control+0x30>
   2a51e:	6828      	ldr	r0, [r5, #0]
   2a520:	b178      	cbz	r0, 2a542 <_spi_context_cs_control+0x30>
		if (on) {
   2a522:	b979      	cbnz	r1, 2a544 <_spi_context_cs_control+0x32>
			if (!force_off &&
   2a524:	b91a      	cbnz	r2, 2a52e <_spi_context_cs_control+0x1c>
			    ctx->config->operation & SPI_HOLD_ON_CS) {
   2a526:	889b      	ldrh	r3, [r3, #4]
			if (!force_off &&
   2a528:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   2a52c:	d109      	bne.n	2a542 <_spi_context_cs_control+0x30>
			k_busy_wait(ctx->config->cs->delay);
   2a52e:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_busy_wait(usec_to_wait);
   2a530:	f002 f9a1 	bl	2c876 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   2a534:	6823      	ldr	r3, [r4, #0]
   2a536:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
   2a538:	2200      	movs	r2, #0
   2a53a:	7919      	ldrb	r1, [r3, #4]
   2a53c:	6818      	ldr	r0, [r3, #0]
   2a53e:	f7ff ff94 	bl	2a46a <gpio_pin_set>
}
   2a542:	bd38      	pop	{r3, r4, r5, pc}
   2a544:	2201      	movs	r2, #1
   2a546:	7929      	ldrb	r1, [r5, #4]
   2a548:	f7ff ff8f 	bl	2a46a <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
   2a54c:	6823      	ldr	r3, [r4, #0]
   2a54e:	689b      	ldr	r3, [r3, #8]
   2a550:	6898      	ldr	r0, [r3, #8]
   2a552:	f002 f990 	bl	2c876 <z_impl_k_busy_wait>
}
   2a556:	e7f4      	b.n	2a542 <_spi_context_cs_control+0x30>

0002a558 <spi_context_unlock_unconditionally>:
{
   2a558:	b510      	push	{r4, lr}
   2a55a:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   2a55c:	2201      	movs	r2, #1
   2a55e:	2100      	movs	r1, #0
   2a560:	f7ff ffd7 	bl	2a512 <_spi_context_cs_control>
	return sem->count;
   2a564:	69a3      	ldr	r3, [r4, #24]
	if (!k_sem_count_get(&ctx->lock)) {
   2a566:	b103      	cbz	r3, 2a56a <spi_context_unlock_unconditionally+0x12>
}
   2a568:	bd10      	pop	{r4, pc}
		ctx->owner = NULL;
   2a56a:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
   2a56c:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
   2a570:	f7f9 fd52 	bl	24018 <z_impl_k_sem_give>
}
   2a574:	e7f8      	b.n	2a568 <spi_context_unlock_unconditionally+0x10>

0002a576 <spi_nrfx_release>:
}
#endif /* CONFIG_SPI_ASYNC */

static int spi_nrfx_release(const struct device *dev,
			    const struct spi_config *spi_cfg)
{
   2a576:	b508      	push	{r3, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   2a578:	6900      	ldr	r0, [r0, #16]
	return !!(ctx->config == config);
   2a57a:	6803      	ldr	r3, [r0, #0]

	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   2a57c:	428b      	cmp	r3, r1
   2a57e:	d106      	bne.n	2a58e <spi_nrfx_release+0x18>
		return -EINVAL;
	}

	if (dev_data->busy) {
   2a580:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
   2a584:	b933      	cbnz	r3, 2a594 <spi_nrfx_release+0x1e>
		return -EBUSY;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   2a586:	f7ff ffe7 	bl	2a558 <spi_context_unlock_unconditionally>

	return 0;
   2a58a:	2000      	movs	r0, #0
}
   2a58c:	bd08      	pop	{r3, pc}
		return -EINVAL;
   2a58e:	f06f 0015 	mvn.w	r0, #21
   2a592:	e7fb      	b.n	2a58c <spi_nrfx_release+0x16>
		return -EBUSY;
   2a594:	f06f 000f 	mvn.w	r0, #15
   2a598:	e7f8      	b.n	2a58c <spi_nrfx_release+0x16>

0002a59a <spi_context_release>:
{
   2a59a:	b508      	push	{r3, lr}
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   2a59c:	6803      	ldr	r3, [r0, #0]
   2a59e:	889b      	ldrh	r3, [r3, #4]
   2a5a0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   2a5a4:	d000      	beq.n	2a5a8 <spi_context_release+0xe>
}
   2a5a6:	bd08      	pop	{r3, pc}
		ctx->owner = NULL;
   2a5a8:	2300      	movs	r3, #0
   2a5aa:	6043      	str	r3, [r0, #4]
		k_sem_give(&ctx->lock);
   2a5ac:	3010      	adds	r0, #16
   2a5ae:	f7f9 fd33 	bl	24018 <z_impl_k_sem_give>
}
   2a5b2:	e7f8      	b.n	2a5a6 <spi_context_release+0xc>

0002a5b4 <spi_context_lock>:
{
   2a5b4:	b538      	push	{r3, r4, r5, lr}
   2a5b6:	4604      	mov	r4, r0
   2a5b8:	9d04      	ldr	r5, [sp, #16]
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   2a5ba:	88ab      	ldrh	r3, [r5, #4]
   2a5bc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   2a5c0:	d004      	beq.n	2a5cc <spi_context_lock+0x18>
   2a5c2:	6983      	ldr	r3, [r0, #24]
   2a5c4:	b913      	cbnz	r3, 2a5cc <spi_context_lock+0x18>
		(ctx->owner == spi_cfg)) {
   2a5c6:	6843      	ldr	r3, [r0, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
   2a5c8:	42ab      	cmp	r3, r5
   2a5ca:	d008      	beq.n	2a5de <spi_context_lock+0x2a>
	k_sem_take(&ctx->lock, K_FOREVER);
   2a5cc:	f104 0010 	add.w	r0, r4, #16
	return z_impl_k_sem_take(sem, timeout);
   2a5d0:	f04f 32ff 	mov.w	r2, #4294967295
   2a5d4:	f04f 33ff 	mov.w	r3, #4294967295
   2a5d8:	f7f9 fd46 	bl	24068 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   2a5dc:	6065      	str	r5, [r4, #4]
}
   2a5de:	bd38      	pop	{r3, r4, r5, pc}

0002a5e0 <transceive>:
{
   2a5e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a5e4:	b082      	sub	sp, #8
   2a5e6:	4604      	mov	r4, r0
   2a5e8:	460d      	mov	r5, r1
   2a5ea:	4690      	mov	r8, r2
   2a5ec:	461f      	mov	r7, r3
	struct spi_nrfx_data *dev_data = dev->data;
   2a5ee:	6906      	ldr	r6, [r0, #16]
	spi_context_lock(&dev_data->ctx, asynchronous, cb, userdata, spi_cfg);
   2a5f0:	9100      	str	r1, [sp, #0]
   2a5f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2a5f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2a5f6:	f89d 1020 	ldrb.w	r1, [sp, #32]
   2a5fa:	4630      	mov	r0, r6
   2a5fc:	f7ff ffda 	bl	2a5b4 <spi_context_lock>
	error = configure(dev, spi_cfg);
   2a600:	4629      	mov	r1, r5
   2a602:	4620      	mov	r0, r4
   2a604:	f7f4 fdb8 	bl	1f178 <configure>
	if (error == 0) {
   2a608:	4605      	mov	r5, r0
   2a60a:	b138      	cbz	r0, 2a61c <transceive+0x3c>
	spi_context_release(&dev_data->ctx, error);
   2a60c:	4629      	mov	r1, r5
   2a60e:	4630      	mov	r0, r6
   2a610:	f7ff ffc3 	bl	2a59a <spi_context_release>
}
   2a614:	4628      	mov	r0, r5
   2a616:	b002      	add	sp, #8
   2a618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dev_data->busy = true;
   2a61c:	2501      	movs	r5, #1
   2a61e:	f886 506c 	strb.w	r5, [r6, #108]	; 0x6c
		spi_context_buffers_setup(&dev_data->ctx, tx_bufs, rx_bufs, 1);
   2a622:	462b      	mov	r3, r5
   2a624:	463a      	mov	r2, r7
   2a626:	4641      	mov	r1, r8
   2a628:	4630      	mov	r0, r6
   2a62a:	f7ff ff42 	bl	2a4b2 <spi_context_buffers_setup>
	_spi_context_cs_control(ctx, on, false);
   2a62e:	2200      	movs	r2, #0
   2a630:	4629      	mov	r1, r5
   2a632:	4630      	mov	r0, r6
   2a634:	f7ff ff6d 	bl	2a512 <_spi_context_cs_control>
		transfer_next_chunk(dev);
   2a638:	4620      	mov	r0, r4
   2a63a:	f7f4 ffa5 	bl	1f588 <transfer_next_chunk>
		error = spi_context_wait_for_completion(&dev_data->ctx);
   2a63e:	4630      	mov	r0, r6
   2a640:	f7f4 ff4c 	bl	1f4dc <spi_context_wait_for_completion>
   2a644:	4605      	mov	r5, r0
   2a646:	e7e1      	b.n	2a60c <transceive+0x2c>

0002a648 <spi_nrfx_transceive>:
{
   2a648:	b510      	push	{r4, lr}
   2a64a:	b084      	sub	sp, #16
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL, NULL);
   2a64c:	2400      	movs	r4, #0
   2a64e:	9402      	str	r4, [sp, #8]
   2a650:	9401      	str	r4, [sp, #4]
   2a652:	9400      	str	r4, [sp, #0]
   2a654:	f7ff ffc4 	bl	2a5e0 <transceive>
}
   2a658:	b004      	add	sp, #16
   2a65a:	bd10      	pop	{r4, pc}

0002a65c <irq_connect0>:
		      &spi_##idx##z_config,				       \
		      POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,		       \
		      &spi_nrfx_driver_api)

#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEFINE(0);
   2a65c:	b508      	push	{r3, lr}
   2a65e:	2200      	movs	r2, #0
   2a660:	2101      	movs	r1, #1
   2a662:	2003      	movs	r0, #3
   2a664:	f7fc fe68 	bl	27338 <z_arm_irq_priority_set>
   2a668:	bd08      	pop	{r3, pc}

0002a66a <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
   2a66a:	b510      	push	{r4, lr}
   2a66c:	b082      	sub	sp, #8
   2a66e:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   2a670:	aa01      	add	r2, sp, #4
   2a672:	f000 fdad 	bl	2b1d0 <pinctrl_lookup_state>
	if (ret < 0) {
   2a676:	2800      	cmp	r0, #0
   2a678:	db05      	blt.n	2a686 <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   2a67a:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   2a67c:	6822      	ldr	r2, [r4, #0]
   2a67e:	7919      	ldrb	r1, [r3, #4]
   2a680:	6818      	ldr	r0, [r3, #0]
   2a682:	f7f6 ff1d 	bl	214c0 <pinctrl_configure_pins>
}
   2a686:	b002      	add	sp, #8
   2a688:	bd10      	pop	{r4, pc}

0002a68a <spi_nrfx_init>:
{
   2a68a:	b538      	push	{r3, r4, r5, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
   2a68c:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   2a68e:	6905      	ldr	r5, [r0, #16]
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   2a690:	2100      	movs	r1, #0
   2a692:	6a20      	ldr	r0, [r4, #32]
   2a694:	f7ff ffe9 	bl	2a66a <pinctrl_apply_state>
	if (err < 0) {
   2a698:	2800      	cmp	r0, #0
   2a69a:	db0a      	blt.n	2a6b2 <spi_nrfx_init+0x28>
	dev_config->irq_connect();
   2a69c:	69e3      	ldr	r3, [r4, #28]
   2a69e:	4798      	blx	r3
	err = spi_context_cs_configure_all(&dev_data->ctx);
   2a6a0:	4628      	mov	r0, r5
   2a6a2:	f7f5 f849 	bl	1f738 <spi_context_cs_configure_all>
	if (err < 0) {
   2a6a6:	2800      	cmp	r0, #0
   2a6a8:	db03      	blt.n	2a6b2 <spi_nrfx_init+0x28>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   2a6aa:	4628      	mov	r0, r5
   2a6ac:	f7ff ff54 	bl	2a558 <spi_context_unlock_unconditionally>
	return 0;
   2a6b0:	2000      	movs	r0, #0
}
   2a6b2:	bd38      	pop	{r3, r4, r5, pc}

0002a6b4 <can_calc_timing_int>:
{
   2a6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a6b8:	b087      	sub	sp, #28
   2a6ba:	4692      	mov	sl, r2
   2a6bc:	461e      	mov	r6, r3
   2a6be:	9f10      	ldr	r7, [sp, #64]	; 0x40
   2a6c0:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
	uint32_t ts = max->prop_seg + max->phase_seg1 + max->phase_seg2 +
   2a6c4:	885b      	ldrh	r3, [r3, #2]
   2a6c6:	88b2      	ldrh	r2, [r6, #4]
   2a6c8:	4413      	add	r3, r2
   2a6ca:	88f2      	ldrh	r2, [r6, #6]
   2a6cc:	4413      	add	r3, r2
	if (bitrate == 0 || sp >= 1000) {
   2a6ce:	2f00      	cmp	r7, #0
   2a6d0:	d045      	beq.n	2a75e <can_calc_timing_int+0xaa>
   2a6d2:	4605      	mov	r5, r0
   2a6d4:	4688      	mov	r8, r1
   2a6d6:	3301      	adds	r3, #1
   2a6d8:	f5bb 7f7a 	cmp.w	fp, #1000	; 0x3e8
   2a6dc:	d242      	bcs.n	2a764 <can_calc_timing_int+0xb0>
	for (int prescaler = MAX(core_clock / (ts * bitrate), 1);
   2a6de:	fb07 f303 	mul.w	r3, r7, r3
   2a6e2:	fbb0 f4f3 	udiv	r4, r0, r3
   2a6e6:	2c01      	cmp	r4, #1
   2a6e8:	bf38      	it	cc
   2a6ea:	2401      	movcc	r4, #1
	uint16_t sp_err_min = UINT16_MAX;
   2a6ec:	f64f 79ff 	movw	r9, #65535	; 0xffff
	for (int prescaler = MAX(core_clock / (ts * bitrate), 1);
   2a6f0:	e000      	b.n	2a6f4 <can_calc_timing_int+0x40>
	     prescaler <= max->prescaler; ++prescaler) {
   2a6f2:	3401      	adds	r4, #1
   2a6f4:	8933      	ldrh	r3, [r6, #8]
   2a6f6:	42a3      	cmp	r3, r4
   2a6f8:	db26      	blt.n	2a748 <can_calc_timing_int+0x94>
		if (core_clock % (prescaler * bitrate)) {
   2a6fa:	fb07 f004 	mul.w	r0, r7, r4
   2a6fe:	fbb5 f3f0 	udiv	r3, r5, r0
   2a702:	fb00 5313 	mls	r3, r0, r3, r5
   2a706:	2b00      	cmp	r3, #0
   2a708:	d1f3      	bne.n	2a6f2 <can_calc_timing_int+0x3e>
		sp_err = update_sampling_pnt(ts, sp, &tmp_res,
   2a70a:	f8cd a000 	str.w	sl, [sp]
   2a70e:	4633      	mov	r3, r6
   2a710:	aa03      	add	r2, sp, #12
   2a712:	4659      	mov	r1, fp
   2a714:	fbb5 f0f0 	udiv	r0, r5, r0
   2a718:	f7f5 f88e 	bl	1f838 <update_sampling_pnt>
		if (sp_err < 0) {
   2a71c:	2800      	cmp	r0, #0
   2a71e:	dbe8      	blt.n	2a6f2 <can_calc_timing_int+0x3e>
		if (sp_err < sp_err_min) {
   2a720:	4581      	cmp	r9, r0
   2a722:	dde6      	ble.n	2a6f2 <can_calc_timing_int+0x3e>
			sp_err_min = sp_err;
   2a724:	fa1f f980 	uxth.w	r9, r0
			res->prop_seg = tmp_res.prop_seg;
   2a728:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2a72c:	f8a8 3002 	strh.w	r3, [r8, #2]
			res->phase_seg1 = tmp_res.phase_seg1;
   2a730:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   2a734:	f8a8 3004 	strh.w	r3, [r8, #4]
			res->phase_seg2 = tmp_res.phase_seg2;
   2a738:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   2a73c:	f8a8 3006 	strh.w	r3, [r8, #6]
			res->prescaler = (uint16_t)prescaler;
   2a740:	f8a8 4008 	strh.w	r4, [r8, #8]
			if (sp_err == 0) {
   2a744:	2800      	cmp	r0, #0
   2a746:	d1d4      	bne.n	2a6f2 <can_calc_timing_int+0x3e>
	if (sp_err_min) {
   2a748:	f1b9 0f00 	cmp.w	r9, #0
   2a74c:	d003      	beq.n	2a756 <can_calc_timing_int+0xa2>
	return sp_err_min == UINT16_MAX ? -ENOTSUP : (int)sp_err_min;
   2a74e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2a752:	4599      	cmp	r9, r3
   2a754:	d009      	beq.n	2a76a <can_calc_timing_int+0xb6>
   2a756:	4648      	mov	r0, r9
}
   2a758:	b007      	add	sp, #28
   2a75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
   2a75e:	f06f 0015 	mvn.w	r0, #21
   2a762:	e7f9      	b.n	2a758 <can_calc_timing_int+0xa4>
   2a764:	f06f 0015 	mvn.w	r0, #21
   2a768:	e7f6      	b.n	2a758 <can_calc_timing_int+0xa4>
	return sp_err_min == UINT16_MAX ? -ENOTSUP : (int)sp_err_min;
   2a76a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2a76e:	e7f3      	b.n	2a758 <can_calc_timing_int+0xa4>

0002a770 <can_tx_default_cb>:
{
   2a770:	b508      	push	{r3, lr}
   2a772:	4610      	mov	r0, r2
	ctx->status = error;
   2a774:	6191      	str	r1, [r2, #24]
	z_impl_k_sem_give(sem);
   2a776:	f7f9 fc4f 	bl	24018 <z_impl_k_sem_give>
}
   2a77a:	bd08      	pop	{r3, pc}

0002a77c <can_calc_prescaler>:
}
#endif /* CONFIG_CAN_FD_MODE */

int can_calc_prescaler(const struct device *dev, struct can_timing *timing,
		       uint32_t bitrate)
{
   2a77c:	b570      	push	{r4, r5, r6, lr}
   2a77e:	b082      	sub	sp, #8
   2a780:	460e      	mov	r6, r1
   2a782:	4615      	mov	r5, r2
	uint32_t ts = timing->prop_seg + timing->phase_seg1 + timing->phase_seg2 +
   2a784:	884c      	ldrh	r4, [r1, #2]
   2a786:	888a      	ldrh	r2, [r1, #4]
   2a788:	4414      	add	r4, r2
   2a78a:	88ca      	ldrh	r2, [r1, #6]
   2a78c:	4414      	add	r4, r2
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
   2a78e:	6883      	ldr	r3, [r0, #8]
	return api->get_core_clock(dev, rate);
   2a790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2a792:	a901      	add	r1, sp, #4
   2a794:	4798      	blx	r3
		   CAN_SYNC_SEG;
	uint32_t core_clock;
	int ret;

	ret = can_get_core_clock(dev, &core_clock);
	if (ret != 0) {
   2a796:	b968      	cbnz	r0, 2a7b4 <can_calc_prescaler+0x38>
   2a798:	3401      	adds	r4, #1
		return ret;
	}

	timing->prescaler = core_clock / (bitrate * ts);
   2a79a:	9801      	ldr	r0, [sp, #4]
   2a79c:	fb05 f204 	mul.w	r2, r5, r4
   2a7a0:	fbb0 f2f2 	udiv	r2, r0, r2
   2a7a4:	8132      	strh	r2, [r6, #8]

	return core_clock % (ts * timing->prescaler);
   2a7a6:	b292      	uxth	r2, r2
   2a7a8:	fb04 f202 	mul.w	r2, r4, r2
   2a7ac:	fbb0 f3f2 	udiv	r3, r0, r2
   2a7b0:	fb02 0013 	mls	r0, r2, r3, r0
}
   2a7b4:	b002      	add	sp, #8
   2a7b6:	bd70      	pop	{r4, r5, r6, pc}

0002a7b8 <z_impl_gpio_pin_interrupt_configure>:
{
   2a7b8:	b538      	push	{r3, r4, r5, lr}
	const struct gpio_driver_api *api =
   2a7ba:	6883      	ldr	r3, [r0, #8]
	const struct gpio_driver_data *const data =
   2a7bc:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   2a7be:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   2a7c2:	d006      	beq.n	2a7d2 <z_impl_gpio_pin_interrupt_configure+0x1a>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   2a7c4:	6825      	ldr	r5, [r4, #0]
   2a7c6:	2401      	movs	r4, #1
   2a7c8:	408c      	lsls	r4, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   2a7ca:	4225      	tst	r5, r4
   2a7cc:	d001      	beq.n	2a7d2 <z_impl_gpio_pin_interrupt_configure+0x1a>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   2a7ce:	f082 62c0 	eor.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   2a7d2:	699c      	ldr	r4, [r3, #24]
   2a7d4:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   2a7d8:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
   2a7dc:	47a0      	blx	r4
}
   2a7de:	bd38      	pop	{r3, r4, r5, pc}

0002a7e0 <z_impl_gpio_pin_configure>:
{
   2a7e0:	b538      	push	{r3, r4, r5, lr}
   2a7e2:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
   2a7e4:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
   2a7e6:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   2a7e8:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
   2a7ec:	d007      	beq.n	2a7fe <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   2a7ee:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   2a7f2:	d004      	beq.n	2a7fe <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   2a7f4:	f012 0f01 	tst.w	r2, #1
   2a7f8:	d001      	beq.n	2a7fe <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   2a7fa:	f482 2340 	eor.w	r3, r2, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   2a7fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   2a802:	f013 0f01 	tst.w	r3, #1
   2a806:	d00a      	beq.n	2a81e <z_impl_gpio_pin_configure+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2a808:	6823      	ldr	r3, [r4, #0]
   2a80a:	f04f 0c01 	mov.w	ip, #1
   2a80e:	fa0c fc01 	lsl.w	ip, ip, r1
   2a812:	ea43 030c 	orr.w	r3, r3, ip
   2a816:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
   2a818:	682b      	ldr	r3, [r5, #0]
   2a81a:	4798      	blx	r3
}
   2a81c:	bd38      	pop	{r3, r4, r5, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2a81e:	6823      	ldr	r3, [r4, #0]
   2a820:	f04f 0c01 	mov.w	ip, #1
   2a824:	fa0c fc01 	lsl.w	ip, ip, r1
   2a828:	ea23 030c 	bic.w	r3, r3, ip
   2a82c:	6023      	str	r3, [r4, #0]
   2a82e:	e7f3      	b.n	2a818 <z_impl_gpio_pin_configure+0x38>

0002a830 <gpio_pin_configure_dt>:
{
   2a830:	b508      	push	{r3, lr}
   2a832:	4603      	mov	r3, r0
   2a834:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
   2a836:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   2a838:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   2a83a:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   2a83c:	ea42 020c 	orr.w	r2, r2, ip
   2a840:	f7ff ffce 	bl	2a7e0 <z_impl_gpio_pin_configure>
}
   2a844:	bd08      	pop	{r3, pc}

0002a846 <gpio_port_get>:
{
   2a846:	b538      	push	{r3, r4, r5, lr}
   2a848:	460c      	mov	r4, r1
	const struct gpio_driver_data *const data =
   2a84a:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
   2a84c:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
   2a84e:	685b      	ldr	r3, [r3, #4]
   2a850:	4798      	blx	r3
	if (ret == 0) {
   2a852:	b918      	cbnz	r0, 2a85c <gpio_port_get+0x16>
		*value ^= data->invert;
   2a854:	6823      	ldr	r3, [r4, #0]
   2a856:	682a      	ldr	r2, [r5, #0]
   2a858:	4053      	eors	r3, r2
   2a85a:	6023      	str	r3, [r4, #0]
}
   2a85c:	bd38      	pop	{r3, r4, r5, pc}

0002a85e <gpio_pin_get>:
{
   2a85e:	b510      	push	{r4, lr}
   2a860:	b082      	sub	sp, #8
   2a862:	460c      	mov	r4, r1
	ret = gpio_port_get(port, &value);
   2a864:	a901      	add	r1, sp, #4
   2a866:	f7ff ffee 	bl	2a846 <gpio_port_get>
	if (ret == 0) {
   2a86a:	b930      	cbnz	r0, 2a87a <gpio_pin_get+0x1c>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   2a86c:	2301      	movs	r3, #1
   2a86e:	40a3      	lsls	r3, r4
   2a870:	9a01      	ldr	r2, [sp, #4]
   2a872:	4213      	tst	r3, r2
   2a874:	bf14      	ite	ne
   2a876:	2001      	movne	r0, #1
   2a878:	2000      	moveq	r0, #0
}
   2a87a:	b002      	add	sp, #8
   2a87c:	bd10      	pop	{r4, pc}

0002a87e <gpio_add_callback>:
 *
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
   2a87e:	b508      	push	{r3, lr}
	const struct gpio_driver_api *api =
   2a880:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   2a882:	69db      	ldr	r3, [r3, #28]
   2a884:	b113      	cbz	r3, 2a88c <gpio_add_callback+0xe>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   2a886:	2201      	movs	r2, #1
   2a888:	4798      	blx	r3
}
   2a88a:	bd08      	pop	{r3, pc}
		return -ENOTSUP;
   2a88c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2a890:	e7fb      	b.n	2a88a <gpio_add_callback+0xc>

0002a892 <spi_transceive_dt>:
 * @return a value from spi_transceive().
 */
static inline int spi_transceive_dt(const struct spi_dt_spec *spec,
				    const struct spi_buf_set *tx_bufs,
				    const struct spi_buf_set *rx_bufs)
{
   2a892:	b510      	push	{r4, lr}
   2a894:	468c      	mov	ip, r1
   2a896:	4613      	mov	r3, r2
	return spi_transceive(spec->bus, &spec->config, tx_bufs, rx_bufs);
   2a898:	4601      	mov	r1, r0
   2a89a:	f851 0b04 	ldr.w	r0, [r1], #4
	const struct spi_driver_api *api =
   2a89e:	6882      	ldr	r2, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   2a8a0:	6814      	ldr	r4, [r2, #0]
   2a8a2:	4662      	mov	r2, ip
   2a8a4:	47a0      	blx	r4
}
   2a8a6:	bd10      	pop	{r4, pc}

0002a8a8 <spi_write_dt>:
 *
 * @return a value from spi_write().
 */
static inline int spi_write_dt(const struct spi_dt_spec *spec,
			       const struct spi_buf_set *tx_bufs)
{
   2a8a8:	b510      	push	{r4, lr}
   2a8aa:	460a      	mov	r2, r1
	return spi_write(spec->bus, &spec->config, tx_bufs);
   2a8ac:	4601      	mov	r1, r0
   2a8ae:	f851 0b04 	ldr.w	r0, [r1], #4
	const struct spi_driver_api *api =
   2a8b2:	6883      	ldr	r3, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   2a8b4:	681c      	ldr	r4, [r3, #0]
   2a8b6:	2300      	movs	r3, #0
   2a8b8:	47a0      	blx	r4
}
   2a8ba:	bd10      	pop	{r4, pc}

0002a8bc <can_utils_filter_match>:
 * @return true if the CAN filter matches the CAN frame, false otherwise
 */
static inline bool can_utils_filter_match(const struct can_frame *frame,
					  struct can_filter *filter)
{
	if (((frame->flags & CAN_FRAME_IDE) != 0) && ((filter->flags & CAN_FILTER_IDE) == 0)) {
   2a8bc:	7943      	ldrb	r3, [r0, #5]
   2a8be:	f013 0f01 	tst.w	r3, #1
   2a8c2:	d003      	beq.n	2a8cc <can_utils_filter_match+0x10>
   2a8c4:	79ca      	ldrb	r2, [r1, #7]
   2a8c6:	f012 0f20 	tst.w	r2, #32
   2a8ca:	d016      	beq.n	2a8fa <can_utils_filter_match+0x3e>
		return false;
	}

	if (((frame->flags & CAN_FRAME_RTR) == 0) && (filter->flags & CAN_FILTER_DATA) == 0) {
   2a8cc:	f013 0302 	ands.w	r3, r3, #2
   2a8d0:	d102      	bne.n	2a8d8 <can_utils_filter_match+0x1c>
   2a8d2:	79ca      	ldrb	r2, [r1, #7]
   2a8d4:	2a7f      	cmp	r2, #127	; 0x7f
   2a8d6:	d912      	bls.n	2a8fe <can_utils_filter_match+0x42>
		return false;
	}

	if (((frame->flags & CAN_FRAME_RTR) != 0) && (filter->flags & CAN_FILTER_RTR) == 0) {
   2a8d8:	b11b      	cbz	r3, 2a8e2 <can_utils_filter_match+0x26>
   2a8da:	79cb      	ldrb	r3, [r1, #7]
   2a8dc:	f013 0f40 	tst.w	r3, #64	; 0x40
   2a8e0:	d00f      	beq.n	2a902 <can_utils_filter_match+0x46>
		return false;
	}

	if ((frame->id ^ filter->id) & filter->mask) {
   2a8e2:	6803      	ldr	r3, [r0, #0]
   2a8e4:	f3c3 031c 	ubfx	r3, r3, #0, #29
   2a8e8:	680a      	ldr	r2, [r1, #0]
   2a8ea:	f3c2 021c 	ubfx	r2, r2, #0, #29
   2a8ee:	4053      	eors	r3, r2
   2a8f0:	684a      	ldr	r2, [r1, #4]
   2a8f2:	421a      	tst	r2, r3
   2a8f4:	d107      	bne.n	2a906 <can_utils_filter_match+0x4a>
		return false;
	}

	return true;
   2a8f6:	2001      	movs	r0, #1
   2a8f8:	4770      	bx	lr
		return false;
   2a8fa:	2000      	movs	r0, #0
   2a8fc:	4770      	bx	lr
		return false;
   2a8fe:	2000      	movs	r0, #0
   2a900:	4770      	bx	lr
		return false;
   2a902:	2000      	movs	r0, #0
   2a904:	4770      	bx	lr
		return false;
   2a906:	2000      	movs	r0, #0
}
   2a908:	4770      	bx	lr

0002a90a <mcp2515_cmd_soft_reset>:
{
   2a90a:	b500      	push	{lr}
   2a90c:	b087      	sub	sp, #28
	const struct mcp2515_config *dev_cfg = dev->config;
   2a90e:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = { MCP2515_OPCODE_RESET };
   2a910:	23c0      	movs	r3, #192	; 0xc0
   2a912:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct spi_buf tx_buf = {
   2a916:	ab05      	add	r3, sp, #20
   2a918:	9303      	str	r3, [sp, #12]
   2a91a:	2301      	movs	r3, #1
   2a91c:	9304      	str	r3, [sp, #16]
	const struct spi_buf_set tx = {
   2a91e:	aa03      	add	r2, sp, #12
   2a920:	9201      	str	r2, [sp, #4]
   2a922:	9302      	str	r3, [sp, #8]
	return spi_write_dt(&dev_cfg->bus, &tx);
   2a924:	a901      	add	r1, sp, #4
   2a926:	f7ff ffbf 	bl	2a8a8 <spi_write_dt>
}
   2a92a:	b007      	add	sp, #28
   2a92c:	f85d fb04 	ldr.w	pc, [sp], #4

0002a930 <mcp2515_cmd_bit_modify>:
{
   2a930:	b500      	push	{lr}
   2a932:	b087      	sub	sp, #28
	const struct mcp2515_config *dev_cfg = dev->config;
   2a934:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = { MCP2515_OPCODE_BIT_MODIFY, reg_addr, mask, data };
   2a936:	f04f 0c05 	mov.w	ip, #5
   2a93a:	f88d c014 	strb.w	ip, [sp, #20]
   2a93e:	f88d 1015 	strb.w	r1, [sp, #21]
   2a942:	f88d 2016 	strb.w	r2, [sp, #22]
   2a946:	f88d 3017 	strb.w	r3, [sp, #23]
	const struct spi_buf tx_buf = {
   2a94a:	ab05      	add	r3, sp, #20
   2a94c:	9303      	str	r3, [sp, #12]
   2a94e:	2304      	movs	r3, #4
   2a950:	9304      	str	r3, [sp, #16]
	const struct spi_buf_set tx = {
   2a952:	ab03      	add	r3, sp, #12
   2a954:	9301      	str	r3, [sp, #4]
   2a956:	2301      	movs	r3, #1
   2a958:	9302      	str	r3, [sp, #8]
	return spi_write_dt(&dev_cfg->bus, &tx);
   2a95a:	a901      	add	r1, sp, #4
   2a95c:	f7ff ffa4 	bl	2a8a8 <spi_write_dt>
}
   2a960:	b007      	add	sp, #28
   2a962:	f85d fb04 	ldr.w	pc, [sp], #4

0002a966 <mcp2515_cmd_write_reg>:
{
   2a966:	b510      	push	{r4, lr}
   2a968:	b088      	sub	sp, #32
	const struct mcp2515_config *dev_cfg = dev->config;
   2a96a:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = { MCP2515_OPCODE_WRITE, reg_addr };
   2a96c:	2402      	movs	r4, #2
   2a96e:	f88d 401c 	strb.w	r4, [sp, #28]
   2a972:	f88d 101d 	strb.w	r1, [sp, #29]
	struct spi_buf tx_buf[] = {
   2a976:	a907      	add	r1, sp, #28
   2a978:	9103      	str	r1, [sp, #12]
   2a97a:	9404      	str	r4, [sp, #16]
   2a97c:	9205      	str	r2, [sp, #20]
   2a97e:	9306      	str	r3, [sp, #24]
	const struct spi_buf_set tx = {
   2a980:	ab03      	add	r3, sp, #12
   2a982:	9301      	str	r3, [sp, #4]
   2a984:	9402      	str	r4, [sp, #8]
	return spi_write_dt(&dev_cfg->bus, &tx);
   2a986:	a901      	add	r1, sp, #4
   2a988:	f7ff ff8e 	bl	2a8a8 <spi_write_dt>
}
   2a98c:	b008      	add	sp, #32
   2a98e:	bd10      	pop	{r4, pc}

0002a990 <mcp2515_cmd_load_tx_buffer>:
{
   2a990:	b500      	push	{lr}
   2a992:	b089      	sub	sp, #36	; 0x24
	const struct mcp2515_config *dev_cfg = dev->config;
   2a994:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = { MCP2515_OPCODE_LOAD_TX_BUFFER | abc };
   2a996:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   2a99a:	f88d 101c 	strb.w	r1, [sp, #28]
	struct spi_buf tx_buf[] = {
   2a99e:	a907      	add	r1, sp, #28
   2a9a0:	9103      	str	r1, [sp, #12]
   2a9a2:	2101      	movs	r1, #1
   2a9a4:	9104      	str	r1, [sp, #16]
   2a9a6:	9205      	str	r2, [sp, #20]
   2a9a8:	9306      	str	r3, [sp, #24]
	const struct spi_buf_set tx = {
   2a9aa:	ab03      	add	r3, sp, #12
   2a9ac:	9301      	str	r3, [sp, #4]
   2a9ae:	2302      	movs	r3, #2
   2a9b0:	9302      	str	r3, [sp, #8]
	return spi_write_dt(&dev_cfg->bus, &tx);
   2a9b2:	a901      	add	r1, sp, #4
   2a9b4:	f7ff ff78 	bl	2a8a8 <spi_write_dt>
}
   2a9b8:	b009      	add	sp, #36	; 0x24
   2a9ba:	f85d fb04 	ldr.w	pc, [sp], #4

0002a9be <mcp2515_cmd_rts>:
{
   2a9be:	b500      	push	{lr}
   2a9c0:	b087      	sub	sp, #28
	const struct mcp2515_config *dev_cfg = dev->config;
   2a9c2:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = { MCP2515_OPCODE_RTS | nnn };
   2a9c4:	f061 017f 	orn	r1, r1, #127	; 0x7f
   2a9c8:	f88d 1014 	strb.w	r1, [sp, #20]
	struct spi_buf tx_buf[] = {
   2a9cc:	ab05      	add	r3, sp, #20
   2a9ce:	9303      	str	r3, [sp, #12]
   2a9d0:	2301      	movs	r3, #1
   2a9d2:	9304      	str	r3, [sp, #16]
	const struct spi_buf_set tx = {
   2a9d4:	aa03      	add	r2, sp, #12
   2a9d6:	9201      	str	r2, [sp, #4]
   2a9d8:	9302      	str	r3, [sp, #8]
	return spi_write_dt(&dev_cfg->bus, &tx);
   2a9da:	a901      	add	r1, sp, #4
   2a9dc:	f7ff ff64 	bl	2a8a8 <spi_write_dt>
}
   2a9e0:	b007      	add	sp, #28
   2a9e2:	f85d fb04 	ldr.w	pc, [sp], #4

0002a9e6 <mcp2515_cmd_read_reg>:
{
   2a9e6:	b530      	push	{r4, r5, lr}
   2a9e8:	b08f      	sub	sp, #60	; 0x3c
	const struct mcp2515_config *dev_cfg = dev->config;
   2a9ea:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = { MCP2515_OPCODE_READ, reg_addr };
   2a9ec:	2403      	movs	r4, #3
   2a9ee:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
   2a9f2:	f88d 1035 	strb.w	r1, [sp, #53]	; 0x35
	struct spi_buf tx_buf[] = {
   2a9f6:	a90d      	add	r1, sp, #52	; 0x34
   2a9f8:	9109      	str	r1, [sp, #36]	; 0x24
   2a9fa:	2102      	movs	r1, #2
   2a9fc:	910a      	str	r1, [sp, #40]	; 0x28
   2a9fe:	2400      	movs	r4, #0
   2aa00:	940b      	str	r4, [sp, #44]	; 0x2c
   2aa02:	930c      	str	r3, [sp, #48]	; 0x30
	const struct spi_buf_set tx = {
   2aa04:	ad09      	add	r5, sp, #36	; 0x24
   2aa06:	9507      	str	r5, [sp, #28]
   2aa08:	9108      	str	r1, [sp, #32]
	struct spi_buf rx_buf[] = {
   2aa0a:	9403      	str	r4, [sp, #12]
   2aa0c:	9104      	str	r1, [sp, #16]
   2aa0e:	9205      	str	r2, [sp, #20]
   2aa10:	9306      	str	r3, [sp, #24]
	const struct spi_buf_set rx = {
   2aa12:	ab03      	add	r3, sp, #12
   2aa14:	9301      	str	r3, [sp, #4]
   2aa16:	9102      	str	r1, [sp, #8]
	return spi_transceive_dt(&dev_cfg->bus, &tx, &rx);
   2aa18:	aa01      	add	r2, sp, #4
   2aa1a:	a907      	add	r1, sp, #28
   2aa1c:	f7ff ff39 	bl	2a892 <spi_transceive_dt>
}
   2aa20:	b00f      	add	sp, #60	; 0x3c
   2aa22:	bd30      	pop	{r4, r5, pc}

0002aa24 <mcp2515_cmd_read_rx_buffer>:
{
   2aa24:	b530      	push	{r4, r5, lr}
   2aa26:	b08f      	sub	sp, #60	; 0x3c
	const struct mcp2515_config *dev_cfg = dev->config;
   2aa28:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = { MCP2515_OPCODE_READ_RX_BUFFER | (nm << 1) };
   2aa2a:	0049      	lsls	r1, r1, #1
   2aa2c:	f061 016f 	orn	r1, r1, #111	; 0x6f
   2aa30:	f88d 1034 	strb.w	r1, [sp, #52]	; 0x34
	struct spi_buf tx_buf[] = {
   2aa34:	a90d      	add	r1, sp, #52	; 0x34
   2aa36:	9109      	str	r1, [sp, #36]	; 0x24
   2aa38:	2401      	movs	r4, #1
   2aa3a:	940a      	str	r4, [sp, #40]	; 0x28
   2aa3c:	2500      	movs	r5, #0
   2aa3e:	950b      	str	r5, [sp, #44]	; 0x2c
   2aa40:	930c      	str	r3, [sp, #48]	; 0x30
	const struct spi_buf_set tx = {
   2aa42:	a909      	add	r1, sp, #36	; 0x24
   2aa44:	9107      	str	r1, [sp, #28]
   2aa46:	2102      	movs	r1, #2
   2aa48:	9108      	str	r1, [sp, #32]
	struct spi_buf rx_buf[] = {
   2aa4a:	9503      	str	r5, [sp, #12]
   2aa4c:	9404      	str	r4, [sp, #16]
   2aa4e:	9205      	str	r2, [sp, #20]
   2aa50:	9306      	str	r3, [sp, #24]
	const struct spi_buf_set rx = {
   2aa52:	ab03      	add	r3, sp, #12
   2aa54:	9301      	str	r3, [sp, #4]
   2aa56:	9102      	str	r1, [sp, #8]
	return spi_transceive_dt(&dev_cfg->bus, &tx, &rx);
   2aa58:	aa01      	add	r2, sp, #4
   2aa5a:	a907      	add	r1, sp, #28
   2aa5c:	f7ff ff19 	bl	2a892 <spi_transceive_dt>
}
   2aa60:	b00f      	add	sp, #60	; 0x3c
   2aa62:	bd30      	pop	{r4, r5, pc}

0002aa64 <mcp2515_convert_canframe_to_mcp2515frame>:
	if ((source->flags & CAN_FRAME_IDE) != 0) {
   2aa64:	7943      	ldrb	r3, [r0, #5]
   2aa66:	f013 0f01 	tst.w	r3, #1
   2aa6a:	d01f      	beq.n	2aaac <mcp2515_convert_canframe_to_mcp2515frame+0x48>
		target[MCP2515_FRAME_OFFSET_SIDH] = source->id >> 21;
   2aa6c:	6803      	ldr	r3, [r0, #0]
   2aa6e:	f3c3 5347 	ubfx	r3, r3, #21, #8
   2aa72:	700b      	strb	r3, [r1, #0]
			(((source->id >> 18) & 0x07) << 5) | (BIT(3)) |
   2aa74:	6802      	ldr	r2, [r0, #0]
   2aa76:	f3c2 438a 	ubfx	r3, r2, #18, #11
   2aa7a:	015b      	lsls	r3, r3, #5
   2aa7c:	b2db      	uxtb	r3, r3
			((source->id >> 16) & 0x03);
   2aa7e:	f3c2 4201 	ubfx	r2, r2, #16, #2
			(((source->id >> 18) & 0x07) << 5) | (BIT(3)) |
   2aa82:	4313      	orrs	r3, r2
   2aa84:	f043 0308 	orr.w	r3, r3, #8
		target[MCP2515_FRAME_OFFSET_SIDL] =
   2aa88:	704b      	strb	r3, [r1, #1]
		target[MCP2515_FRAME_OFFSET_EID8] = source->id >> 8;
   2aa8a:	6803      	ldr	r3, [r0, #0]
   2aa8c:	f3c3 2314 	ubfx	r3, r3, #8, #21
   2aa90:	708b      	strb	r3, [r1, #2]
		target[MCP2515_FRAME_OFFSET_EID0] = source->id;
   2aa92:	6803      	ldr	r3, [r0, #0]
   2aa94:	70cb      	strb	r3, [r1, #3]
	rtr = (source->flags & CAN_FRAME_RTR) != 0 ? BIT(6) : 0;
   2aa96:	7943      	ldrb	r3, [r0, #5]
   2aa98:	015b      	lsls	r3, r3, #5
   2aa9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
	dlc = (source->dlc) & 0x0F;
   2aa9e:	7902      	ldrb	r2, [r0, #4]
   2aaa0:	f002 020f 	and.w	r2, r2, #15
	target[MCP2515_FRAME_OFFSET_DLC] = rtr | dlc;
   2aaa4:	4313      	orrs	r3, r2
   2aaa6:	710b      	strb	r3, [r1, #4]
	uint8_t data_idx = 0U;
   2aaa8:	2300      	movs	r3, #0
	for (; data_idx < CAN_MAX_DLC; data_idx++) {
   2aaaa:	e010      	b.n	2aace <mcp2515_convert_canframe_to_mcp2515frame+0x6a>
		target[MCP2515_FRAME_OFFSET_SIDH] = source->id >> 3;
   2aaac:	6803      	ldr	r3, [r0, #0]
   2aaae:	f3c3 03d9 	ubfx	r3, r3, #3, #26
   2aab2:	700b      	strb	r3, [r1, #0]
			(source->id & 0x07) << 5;
   2aab4:	6803      	ldr	r3, [r0, #0]
   2aab6:	015b      	lsls	r3, r3, #5
		target[MCP2515_FRAME_OFFSET_SIDL] =
   2aab8:	704b      	strb	r3, [r1, #1]
   2aaba:	e7ec      	b.n	2aa96 <mcp2515_convert_canframe_to_mcp2515frame+0x32>
		target[MCP2515_FRAME_OFFSET_D0 + data_idx] =
   2aabc:	1d5a      	adds	r2, r3, #5
			source->data[data_idx];
   2aabe:	eb00 0c03 	add.w	ip, r0, r3
   2aac2:	f89c c008 	ldrb.w	ip, [ip, #8]
		target[MCP2515_FRAME_OFFSET_D0 + data_idx] =
   2aac6:	f801 c002 	strb.w	ip, [r1, r2]
	for (; data_idx < CAN_MAX_DLC; data_idx++) {
   2aaca:	3301      	adds	r3, #1
   2aacc:	b2db      	uxtb	r3, r3
   2aace:	2b07      	cmp	r3, #7
   2aad0:	d9f4      	bls.n	2aabc <mcp2515_convert_canframe_to_mcp2515frame+0x58>
}
   2aad2:	4770      	bx	lr

0002aad4 <mcp2515_get_core_clock>:
	const struct mcp2515_config *dev_cfg = dev->config;
   2aad4:	6843      	ldr	r3, [r0, #4]
	*rate = dev_cfg->osc_freq / 2;
   2aad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2aad8:	085b      	lsrs	r3, r3, #1
   2aada:	600b      	str	r3, [r1, #0]
}
   2aadc:	2000      	movs	r0, #0
   2aade:	4770      	bx	lr

0002aae0 <mcp2515_get_max_filters>:
}
   2aae0:	2005      	movs	r0, #5
   2aae2:	4770      	bx	lr

0002aae4 <mcp2515_get_max_bitrate>:
	const struct mcp2515_config *dev_cfg = dev->config;
   2aae4:	6843      	ldr	r3, [r0, #4]
	*max_bitrate = dev_cfg->max_bitrate;
   2aae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2aae8:	600b      	str	r3, [r1, #0]
}
   2aaea:	2000      	movs	r0, #0
   2aaec:	4770      	bx	lr

0002aaee <mcp2515_get_capabilities>:
	*cap = CAN_MODE_NORMAL | CAN_MODE_LISTENONLY | CAN_MODE_LOOPBACK;
   2aaee:	2303      	movs	r3, #3
   2aaf0:	600b      	str	r3, [r1, #0]
}
   2aaf2:	2000      	movs	r0, #0
   2aaf4:	4770      	bx	lr

0002aaf6 <mcp2515_set_state_change_callback>:
	struct mcp2515_data *dev_data = dev->data;
   2aaf6:	6903      	ldr	r3, [r0, #16]
	dev_data->state_change_cb = cb;
   2aaf8:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
	dev_data->state_change_cb_data = user_data;
   2aafc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
}
   2ab00:	4770      	bx	lr

0002ab02 <mcp2515_remove_rx_filter>:
{
   2ab02:	b570      	push	{r4, r5, r6, lr}
   2ab04:	460d      	mov	r5, r1
	struct mcp2515_data *dev_data = dev->data;
   2ab06:	6904      	ldr	r4, [r0, #16]
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   2ab08:	f504 76b2 	add.w	r6, r4, #356	; 0x164
	return z_impl_k_mutex_lock(mutex, timeout);
   2ab0c:	f04f 32ff 	mov.w	r2, #4294967295
   2ab10:	f04f 33ff 	mov.w	r3, #4294967295
   2ab14:	4630      	mov	r0, r6
   2ab16:	f7f9 f97f 	bl	23e18 <z_impl_k_mutex_lock>
	dev_data->filter_usage &= ~BIT(filter_id);
   2ab1a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   2ab1e:	2201      	movs	r2, #1
   2ab20:	fa02 f105 	lsl.w	r1, r2, r5
   2ab24:	ea23 0301 	bic.w	r3, r3, r1
   2ab28:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	return z_impl_k_mutex_unlock(mutex);
   2ab2c:	4630      	mov	r0, r6
   2ab2e:	f7f9 f9f7 	bl	23f20 <z_impl_k_mutex_unlock>
}
   2ab32:	bd70      	pop	{r4, r5, r6, pc}

0002ab34 <mcp2515_add_rx_filter>:
{
   2ab34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2ab38:	4688      	mov	r8, r1
   2ab3a:	4617      	mov	r7, r2
   2ab3c:	461e      	mov	r6, r3
	struct mcp2515_data *dev_data = dev->data;
   2ab3e:	6905      	ldr	r5, [r0, #16]
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   2ab40:	f505 79b2 	add.w	r9, r5, #356	; 0x164
	return z_impl_k_mutex_lock(mutex, timeout);
   2ab44:	f04f 32ff 	mov.w	r2, #4294967295
   2ab48:	f04f 33ff 	mov.w	r3, #4294967295
   2ab4c:	4648      	mov	r0, r9
   2ab4e:	f7f9 f963 	bl	23e18 <z_impl_k_mutex_lock>
	int filter_id = 0;
   2ab52:	2400      	movs	r4, #0
	while ((BIT(filter_id) & dev_data->filter_usage)
   2ab54:	e000      	b.n	2ab58 <mcp2515_add_rx_filter+0x24>
		filter_id++;
   2ab56:	3401      	adds	r4, #1
	while ((BIT(filter_id) & dev_data->filter_usage)
   2ab58:	f8d5 0108 	ldr.w	r0, [r5, #264]	; 0x108
   2ab5c:	fa20 f304 	lsr.w	r3, r0, r4
	       && (filter_id < CONFIG_CAN_MAX_FILTER)) {
   2ab60:	f013 0f01 	tst.w	r3, #1
   2ab64:	d001      	beq.n	2ab6a <mcp2515_add_rx_filter+0x36>
   2ab66:	2c04      	cmp	r4, #4
   2ab68:	ddf5      	ble.n	2ab56 <mcp2515_add_rx_filter+0x22>
	if (filter_id < CONFIG_CAN_MAX_FILTER) {
   2ab6a:	2c04      	cmp	r4, #4
   2ab6c:	dc1d      	bgt.n	2abaa <mcp2515_add_rx_filter+0x76>
		dev_data->filter_usage |= BIT(filter_id);
   2ab6e:	2301      	movs	r3, #1
   2ab70:	40a3      	lsls	r3, r4
   2ab72:	4318      	orrs	r0, r3
   2ab74:	f8c5 0108 	str.w	r0, [r5, #264]	; 0x108
		dev_data->filter[filter_id] = *filter;
   2ab78:	f104 0326 	add.w	r3, r4, #38	; 0x26
   2ab7c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   2ab80:	3304      	adds	r3, #4
   2ab82:	e896 0003 	ldmia.w	r6, {r0, r1}
   2ab86:	e883 0003 	stmia.w	r3, {r0, r1}
		dev_data->rx_cb[filter_id] = rx_cb;
   2ab8a:	f104 0342 	add.w	r3, r4, #66	; 0x42
   2ab8e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   2ab92:	f8c3 8004 	str.w	r8, [r3, #4]
		dev_data->cb_arg[filter_id] = cb_arg;
   2ab96:	f104 0348 	add.w	r3, r4, #72	; 0x48
   2ab9a:	f845 7023 	str.w	r7, [r5, r3, lsl #2]
	return z_impl_k_mutex_unlock(mutex);
   2ab9e:	4648      	mov	r0, r9
   2aba0:	f7f9 f9be 	bl	23f20 <z_impl_k_mutex_unlock>
}
   2aba4:	4620      	mov	r0, r4
   2aba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		filter_id = -ENOSPC;
   2abaa:	f06f 041b 	mvn.w	r4, #27
   2abae:	e7f6      	b.n	2ab9e <mcp2515_add_rx_filter+0x6a>

0002abb0 <mcp2515_rx_filter>:
{
   2abb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2abb4:	b084      	sub	sp, #16
   2abb6:	4680      	mov	r8, r0
   2abb8:	460d      	mov	r5, r1
	struct mcp2515_data *dev_data = dev->data;
   2abba:	6906      	ldr	r6, [r0, #16]
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   2abbc:	f506 79b2 	add.w	r9, r6, #356	; 0x164
	return z_impl_k_mutex_lock(mutex, timeout);
   2abc0:	f04f 32ff 	mov.w	r2, #4294967295
   2abc4:	f04f 33ff 	mov.w	r3, #4294967295
   2abc8:	4648      	mov	r0, r9
   2abca:	f7f9 f925 	bl	23e18 <z_impl_k_mutex_lock>
	uint8_t filter_id = 0U;
   2abce:	2400      	movs	r4, #0
	for (; filter_id < CONFIG_CAN_MAX_FILTER; filter_id++) {
   2abd0:	e001      	b.n	2abd6 <mcp2515_rx_filter+0x26>
   2abd2:	3401      	adds	r4, #1
   2abd4:	b2e4      	uxtb	r4, r4
   2abd6:	2c04      	cmp	r4, #4
   2abd8:	d822      	bhi.n	2ac20 <mcp2515_rx_filter+0x70>
		if (!(BIT(filter_id) & dev_data->filter_usage)) {
   2abda:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
   2abde:	4627      	mov	r7, r4
   2abe0:	40e3      	lsrs	r3, r4
   2abe2:	f013 0f01 	tst.w	r3, #1
   2abe6:	d0f4      	beq.n	2abd2 <mcp2515_rx_filter+0x22>
		if (!can_utils_filter_match(frame,
   2abe8:	f104 0126 	add.w	r1, r4, #38	; 0x26
   2abec:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
   2abf0:	3104      	adds	r1, #4
   2abf2:	4628      	mov	r0, r5
   2abf4:	f7ff fe62 	bl	2a8bc <can_utils_filter_match>
   2abf8:	2800      	cmp	r0, #0
   2abfa:	d0ea      	beq.n	2abd2 <mcp2515_rx_filter+0x22>
		callback = dev_data->rx_cb[filter_id];
   2abfc:	f104 0342 	add.w	r3, r4, #66	; 0x42
   2ac00:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   2ac04:	f8d3 a004 	ldr.w	sl, [r3, #4]
		tmp_frame = *frame;
   2ac08:	46ec      	mov	ip, sp
   2ac0a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   2ac0e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		callback(dev, &tmp_frame, dev_data->cb_arg[filter_id]);
   2ac12:	3748      	adds	r7, #72	; 0x48
   2ac14:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
   2ac18:	4661      	mov	r1, ip
   2ac1a:	4640      	mov	r0, r8
   2ac1c:	47d0      	blx	sl
   2ac1e:	e7d8      	b.n	2abd2 <mcp2515_rx_filter+0x22>
	return z_impl_k_mutex_unlock(mutex);
   2ac20:	4648      	mov	r0, r9
   2ac22:	f7f9 f97d 	bl	23f20 <z_impl_k_mutex_unlock>
}
   2ac26:	b004      	add	sp, #16
   2ac28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002ac2c <mcp2515_tx_done>:
{
   2ac2c:	b570      	push	{r4, r5, r6, lr}
   2ac2e:	460d      	mov	r5, r1
	struct mcp2515_data *dev_data = dev->data;
   2ac30:	6904      	ldr	r4, [r0, #16]
	can_tx_callback_t callback = dev_data->tx_cb[tx_idx].cb;
   2ac32:	f101 031f 	add.w	r3, r1, #31
   2ac36:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   2ac3a:	685b      	ldr	r3, [r3, #4]
	if (callback != NULL) {
   2ac3c:	b303      	cbz	r3, 2ac80 <mcp2515_tx_done+0x54>
   2ac3e:	4611      	mov	r1, r2
		callback(dev, status, dev_data->tx_cb[tx_idx].cb_arg);
   2ac40:	f105 061f 	add.w	r6, r5, #31
   2ac44:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
   2ac48:	68b2      	ldr	r2, [r6, #8]
   2ac4a:	4798      	blx	r3
		dev_data->tx_cb[tx_idx].cb = NULL;
   2ac4c:	2300      	movs	r3, #0
   2ac4e:	6073      	str	r3, [r6, #4]
		k_mutex_lock(&dev_data->mutex, K_FOREVER);
   2ac50:	f504 76b2 	add.w	r6, r4, #356	; 0x164
	return z_impl_k_mutex_lock(mutex, timeout);
   2ac54:	f04f 32ff 	mov.w	r2, #4294967295
   2ac58:	f04f 33ff 	mov.w	r3, #4294967295
   2ac5c:	4630      	mov	r0, r6
   2ac5e:	f7f9 f8db 	bl	23e18 <z_impl_k_mutex_lock>
		dev_data->tx_busy_map &= ~BIT(tx_idx);
   2ac62:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   2ac66:	2201      	movs	r2, #1
   2ac68:	40aa      	lsls	r2, r5
   2ac6a:	ea23 0302 	bic.w	r3, r3, r2
   2ac6e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
	return z_impl_k_mutex_unlock(mutex);
   2ac72:	4630      	mov	r0, r6
   2ac74:	f7f9 f954 	bl	23f20 <z_impl_k_mutex_unlock>
		k_sem_give(&dev_data->tx_sem);
   2ac78:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
	z_impl_k_sem_give(sem);
   2ac7c:	f7f9 f9cc 	bl	24018 <z_impl_k_sem_give>
}
   2ac80:	bd70      	pop	{r4, r5, r6, pc}

0002ac82 <mcp2515_int_gpio_callback>:
{
   2ac82:	b508      	push	{r3, lr}
	k_sem_give(&dev_data->int_sem);
   2ac84:	f101 00cc 	add.w	r0, r1, #204	; 0xcc
   2ac88:	f7f9 f9c6 	bl	24018 <z_impl_k_sem_give>
}
   2ac8c:	bd08      	pop	{r3, pc}

0002ac8e <mcp2515_convert_mcp2515frame_to_canframe>:
{
   2ac8e:	b538      	push	{r3, r4, r5, lr}
   2ac90:	4605      	mov	r5, r0
   2ac92:	460c      	mov	r4, r1
	memset(target, 0, sizeof(*target));
   2ac94:	2210      	movs	r2, #16
   2ac96:	2100      	movs	r1, #0
   2ac98:	4620      	mov	r0, r4
   2ac9a:	f7fc fc46 	bl	2752a <memset>
	if (source[MCP2515_FRAME_OFFSET_SIDL] & BIT(3)) {
   2ac9e:	786b      	ldrb	r3, [r5, #1]
   2aca0:	f013 0f08 	tst.w	r3, #8
   2aca4:	d024      	beq.n	2acf0 <mcp2515_convert_mcp2515frame_to_canframe+0x62>
		target->flags |= CAN_FRAME_IDE;
   2aca6:	7963      	ldrb	r3, [r4, #5]
   2aca8:	f043 0301 	orr.w	r3, r3, #1
   2acac:	7163      	strb	r3, [r4, #5]
			(source[MCP2515_FRAME_OFFSET_SIDH] << 21) |
   2acae:	7829      	ldrb	r1, [r5, #0]
			((source[MCP2515_FRAME_OFFSET_SIDL] >> 5) << 18) |
   2acb0:	786a      	ldrb	r2, [r5, #1]
   2acb2:	0953      	lsrs	r3, r2, #5
   2acb4:	049b      	lsls	r3, r3, #18
			(source[MCP2515_FRAME_OFFSET_SIDH] << 21) |
   2acb6:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
			((source[MCP2515_FRAME_OFFSET_SIDL] & 0x03) << 16) |
   2acba:	0412      	lsls	r2, r2, #16
   2acbc:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
			((source[MCP2515_FRAME_OFFSET_SIDL] >> 5) << 18) |
   2acc0:	4313      	orrs	r3, r2
			(source[MCP2515_FRAME_OFFSET_EID8] << 8) |
   2acc2:	78aa      	ldrb	r2, [r5, #2]
			((source[MCP2515_FRAME_OFFSET_SIDL] & 0x03) << 16) |
   2acc4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			source[MCP2515_FRAME_OFFSET_EID0];
   2acc8:	78ea      	ldrb	r2, [r5, #3]
			(source[MCP2515_FRAME_OFFSET_EID8] << 8) |
   2acca:	4313      	orrs	r3, r2
		target->id =
   2accc:	6822      	ldr	r2, [r4, #0]
   2acce:	f363 021c 	bfi	r2, r3, #0, #29
   2acd2:	6022      	str	r2, [r4, #0]
	target->dlc = source[MCP2515_FRAME_OFFSET_DLC] & 0x0F;
   2acd4:	792b      	ldrb	r3, [r5, #4]
   2acd6:	f003 030f 	and.w	r3, r3, #15
   2acda:	7123      	strb	r3, [r4, #4]
	if ((source[MCP2515_FRAME_OFFSET_DLC] & BIT(6)) != 0) {
   2acdc:	792b      	ldrb	r3, [r5, #4]
   2acde:	f013 0f40 	tst.w	r3, #64	; 0x40
   2ace2:	d003      	beq.n	2acec <mcp2515_convert_mcp2515frame_to_canframe+0x5e>
		target->flags |= CAN_FRAME_RTR;
   2ace4:	7963      	ldrb	r3, [r4, #5]
   2ace6:	f043 0302 	orr.w	r3, r3, #2
   2acea:	7163      	strb	r3, [r4, #5]
{
   2acec:	2300      	movs	r3, #0
   2acee:	e00e      	b.n	2ad0e <mcp2515_convert_mcp2515frame_to_canframe+0x80>
		target->id = (source[MCP2515_FRAME_OFFSET_SIDH] << 3) |
   2acf0:	782a      	ldrb	r2, [r5, #0]
				 (source[MCP2515_FRAME_OFFSET_SIDL] >> 5);
   2acf2:	095b      	lsrs	r3, r3, #5
		target->id = (source[MCP2515_FRAME_OFFSET_SIDH] << 3) |
   2acf4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   2acf8:	6822      	ldr	r2, [r4, #0]
   2acfa:	f363 021c 	bfi	r2, r3, #0, #29
   2acfe:	6022      	str	r2, [r4, #0]
   2ad00:	e7e8      	b.n	2acd4 <mcp2515_convert_mcp2515frame_to_canframe+0x46>
		target->data[data_idx] = source[MCP2515_FRAME_OFFSET_D0 +
   2ad02:	1d5a      	adds	r2, r3, #5
   2ad04:	5ca9      	ldrb	r1, [r5, r2]
   2ad06:	18e2      	adds	r2, r4, r3
   2ad08:	7211      	strb	r1, [r2, #8]
	for (; data_idx < CAN_MAX_DLC; data_idx++) {
   2ad0a:	3301      	adds	r3, #1
   2ad0c:	b2db      	uxtb	r3, r3
   2ad0e:	2b07      	cmp	r3, #7
   2ad10:	d9f7      	bls.n	2ad02 <mcp2515_convert_mcp2515frame_to_canframe+0x74>
}
   2ad12:	bd38      	pop	{r3, r4, r5, pc}

0002ad14 <mcp2515_rx>:
{
   2ad14:	b510      	push	{r4, lr}
   2ad16:	b088      	sub	sp, #32
   2ad18:	4604      	mov	r4, r0
	nm = 2 * rx_idx;
   2ad1a:	0049      	lsls	r1, r1, #1
	mcp2515_cmd_read_rx_buffer(dev, nm, rx_frame, sizeof(rx_frame));
   2ad1c:	230d      	movs	r3, #13
   2ad1e:	466a      	mov	r2, sp
   2ad20:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   2ad24:	f7ff fe7e 	bl	2aa24 <mcp2515_cmd_read_rx_buffer>
	mcp2515_convert_mcp2515frame_to_canframe(rx_frame, &frame);
   2ad28:	a904      	add	r1, sp, #16
   2ad2a:	4668      	mov	r0, sp
   2ad2c:	f7ff ffaf 	bl	2ac8e <mcp2515_convert_mcp2515frame_to_canframe>
	mcp2515_rx_filter(dev, &frame);
   2ad30:	a904      	add	r1, sp, #16
   2ad32:	4620      	mov	r0, r4
   2ad34:	f7ff ff3c 	bl	2abb0 <mcp2515_rx_filter>
}
   2ad38:	b008      	add	sp, #32
   2ad3a:	bd10      	pop	{r4, pc}

0002ad3c <mcp2515_int_thread>:
{
   2ad3c:	b538      	push	{r3, r4, r5, lr}
   2ad3e:	4604      	mov	r4, r0
	struct mcp2515_data *dev_data = dev->data;
   2ad40:	6905      	ldr	r5, [r0, #16]
		k_sem_take(&dev_data->int_sem, K_FOREVER);
   2ad42:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
	return z_impl_k_sem_take(sem, timeout);
   2ad46:	f04f 32ff 	mov.w	r2, #4294967295
   2ad4a:	f04f 33ff 	mov.w	r3, #4294967295
   2ad4e:	f7f9 f98b 	bl	24068 <z_impl_k_sem_take>
		mcp2515_handle_interrupts(dev);
   2ad52:	4620      	mov	r0, r4
   2ad54:	f7f5 f9fa 	bl	2014c <mcp2515_handle_interrupts>
	while (1) {
   2ad58:	e7f3      	b.n	2ad42 <mcp2515_int_thread+0x6>

0002ad5a <spi_is_ready_dt>:
{
   2ad5a:	b510      	push	{r4, lr}
   2ad5c:	4604      	mov	r4, r0
	if (!device_is_ready(spec->bus)) {
   2ad5e:	6800      	ldr	r0, [r0, #0]
   2ad60:	f000 ffdb 	bl	2bd1a <z_device_is_ready>
   2ad64:	b120      	cbz	r0, 2ad70 <spi_is_ready_dt+0x16>
	if (spec->config.cs &&
   2ad66:	68e3      	ldr	r3, [r4, #12]
   2ad68:	b113      	cbz	r3, 2ad70 <spi_is_ready_dt+0x16>
	    !device_is_ready(spec->config.cs->gpio.port)) {
   2ad6a:	6818      	ldr	r0, [r3, #0]
   2ad6c:	f000 ffd5 	bl	2bd1a <z_device_is_ready>
}
   2ad70:	bd10      	pop	{r4, pc}

0002ad72 <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
   2ad72:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2ad74:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   2ad76:	f04f 0140 	mov.w	r1, #64	; 0x40
   2ad7a:	f3ef 8311 	mrs	r3, BASEPRI
   2ad7e:	f381 8812 	msr	BASEPRI_MAX, r1
   2ad82:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2ad86:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2ad8a:	b131      	cbz	r1, 2ad9a <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ad8c:	2100      	movs	r1, #0
   2ad8e:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
   2ad92:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2ad96:	2101      	movs	r1, #1
   2ad98:	60d1      	str	r1, [r2, #12]
	__asm__ volatile(
   2ad9a:	f383 8811 	msr	BASEPRI, r3
   2ad9e:	f3bf 8f6f 	isb	sy
}
   2ada2:	4770      	bx	lr

0002ada4 <uarte_nrfx_isr_int>:
{
   2ada4:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
   2ada6:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
   2ada8:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
   2adaa:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2adae:	f413 7f80 	tst.w	r3, #256	; 0x100
   2adb2:	d002      	beq.n	2adba <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2adb4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   2adb8:	b9d3      	cbnz	r3, 2adf0 <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2adba:	686b      	ldr	r3, [r5, #4]
   2adbc:	f013 0f10 	tst.w	r3, #16
   2adc0:	d015      	beq.n	2adee <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
   2adc2:	f04f 0240 	mov.w	r2, #64	; 0x40
   2adc6:	f3ef 8311 	mrs	r3, BASEPRI
   2adca:	f382 8812 	msr	BASEPRI_MAX, r2
   2adce:	f3bf 8f6f 	isb	sy
   2add2:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2add6:	b112      	cbz	r2, 2adde <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2add8:	2200      	movs	r2, #0
   2adda:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   2adde:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2ade2:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
   2ade6:	f383 8811 	msr	BASEPRI, r3
   2adea:	f3bf 8f6f 	isb	sy
}
   2adee:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   2adf0:	f7ff ffbf 	bl	2ad72 <endtx_isr>
   2adf4:	e7e1      	b.n	2adba <uarte_nrfx_isr_int+0x16>

0002adf6 <uarte_nrfx_configure>:
{
   2adf6:	b570      	push	{r4, r5, r6, lr}
   2adf8:	b082      	sub	sp, #8
   2adfa:	4605      	mov	r5, r0
   2adfc:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
   2adfe:	6906      	ldr	r6, [r0, #16]
	switch (cfg->stop_bits) {
   2ae00:	794b      	ldrb	r3, [r1, #5]
   2ae02:	2b01      	cmp	r3, #1
   2ae04:	d006      	beq.n	2ae14 <uarte_nrfx_configure+0x1e>
   2ae06:	2b03      	cmp	r3, #3
   2ae08:	d011      	beq.n	2ae2e <uarte_nrfx_configure+0x38>
   2ae0a:	f06f 0285 	mvn.w	r2, #133	; 0x85
}
   2ae0e:	4610      	mov	r0, r2
   2ae10:	b002      	add	sp, #8
   2ae12:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   2ae14:	2300      	movs	r3, #0
   2ae16:	f88d 3002 	strb.w	r3, [sp, #2]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   2ae1a:	79a3      	ldrb	r3, [r4, #6]
   2ae1c:	2b03      	cmp	r3, #3
   2ae1e:	d146      	bne.n	2aeae <uarte_nrfx_configure+0xb8>
	switch (cfg->flow_ctrl) {
   2ae20:	79e3      	ldrb	r3, [r4, #7]
   2ae22:	b143      	cbz	r3, 2ae36 <uarte_nrfx_configure+0x40>
   2ae24:	2b01      	cmp	r3, #1
   2ae26:	d015      	beq.n	2ae54 <uarte_nrfx_configure+0x5e>
   2ae28:	f06f 0285 	mvn.w	r2, #133	; 0x85
   2ae2c:	e7ef      	b.n	2ae0e <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   2ae2e:	2310      	movs	r3, #16
   2ae30:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
   2ae34:	e7f1      	b.n	2ae1a <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   2ae36:	2300      	movs	r3, #0
   2ae38:	f88d 3000 	strb.w	r3, [sp]
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   2ae3c:	2300      	movs	r3, #0
   2ae3e:	f8ad 3004 	strh.w	r3, [sp, #4]
	switch (cfg->parity) {
   2ae42:	7923      	ldrb	r3, [r4, #4]
   2ae44:	2b01      	cmp	r3, #1
   2ae46:	d02a      	beq.n	2ae9e <uarte_nrfx_configure+0xa8>
   2ae48:	2b02      	cmp	r3, #2
   2ae4a:	d024      	beq.n	2ae96 <uarte_nrfx_configure+0xa0>
   2ae4c:	b133      	cbz	r3, 2ae5c <uarte_nrfx_configure+0x66>
   2ae4e:	f06f 0285 	mvn.w	r2, #133	; 0x85
   2ae52:	e7dc      	b.n	2ae0e <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   2ae54:	2301      	movs	r3, #1
   2ae56:	f88d 3000 	strb.w	r3, [sp]
		break;
   2ae5a:	e7ef      	b.n	2ae3c <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   2ae5c:	f88d 3001 	strb.w	r3, [sp, #1]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   2ae60:	6821      	ldr	r1, [r4, #0]
   2ae62:	4628      	mov	r0, r5
   2ae64:	f7f5 fe3a 	bl	20adc <baudrate_set>
   2ae68:	4602      	mov	r2, r0
   2ae6a:	bb18      	cbnz	r0, 2aeb4 <uarte_nrfx_configure+0xbe>
	const struct uarte_nrfx_config *config = dev->config;
   2ae6c:	686b      	ldr	r3, [r5, #4]
	return config->uarte_regs;
   2ae6e:	6819      	ldr	r1, [r3, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2ae70:	f89d 3001 	ldrb.w	r3, [sp, #1]
                    | (uint32_t)p_cfg->stop
   2ae74:	f89d 0002 	ldrb.w	r0, [sp, #2]
   2ae78:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->paritytype
   2ae7a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   2ae7e:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->hwfc;
   2ae80:	f89d 0000 	ldrb.w	r0, [sp]
   2ae84:	4303      	orrs	r3, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2ae86:	f8c1 356c 	str.w	r3, [r1, #1388]	; 0x56c
	data->uart_config = *cfg;
   2ae8a:	3604      	adds	r6, #4
   2ae8c:	e894 0003 	ldmia.w	r4, {r0, r1}
   2ae90:	e886 0003 	stmia.w	r6, {r0, r1}
	return 0;
   2ae94:	e7bb      	b.n	2ae0e <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   2ae96:	230e      	movs	r3, #14
   2ae98:	f88d 3001 	strb.w	r3, [sp, #1]
		break;
   2ae9c:	e7e0      	b.n	2ae60 <uarte_nrfx_configure+0x6a>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   2ae9e:	230e      	movs	r3, #14
   2aea0:	f88d 3001 	strb.w	r3, [sp, #1]
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   2aea4:	f44f 7380 	mov.w	r3, #256	; 0x100
   2aea8:	f8ad 3004 	strh.w	r3, [sp, #4]
		break;
   2aeac:	e7d8      	b.n	2ae60 <uarte_nrfx_configure+0x6a>
		return -ENOTSUP;
   2aeae:	f06f 0285 	mvn.w	r2, #133	; 0x85
   2aeb2:	e7ac      	b.n	2ae0e <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
   2aeb4:	f06f 0285 	mvn.w	r2, #133	; 0x85
   2aeb8:	e7a9      	b.n	2ae0e <uarte_nrfx_configure+0x18>

0002aeba <uarte_nrfx_config_get>:
{
   2aeba:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
   2aebc:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
   2aebe:	3304      	adds	r3, #4
   2aec0:	e893 0003 	ldmia.w	r3, {r0, r1}
   2aec4:	e882 0003 	stmia.w	r2, {r0, r1}
}
   2aec8:	2000      	movs	r0, #0
   2aeca:	4770      	bx	lr

0002aecc <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
   2aecc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2aece:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2aed0:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2aed4:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2aed8:	4770      	bx	lr

0002aeda <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
   2aeda:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2aedc:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2aede:	685b      	ldr	r3, [r3, #4]
   2aee0:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2aee4:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2aee8:	b929      	cbnz	r1, 2aef6 <is_tx_ready+0x1c>
   2aeea:	b933      	cbnz	r3, 2aefa <is_tx_ready+0x20>
   2aeec:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   2aef0:	b92b      	cbnz	r3, 2aefe <is_tx_ready+0x24>
   2aef2:	2000      	movs	r0, #0
   2aef4:	4770      	bx	lr
   2aef6:	2001      	movs	r0, #1
   2aef8:	4770      	bx	lr
   2aefa:	2000      	movs	r0, #0
   2aefc:	4770      	bx	lr
   2aefe:	2001      	movs	r0, #1
}
   2af00:	4770      	bx	lr

0002af02 <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
   2af02:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2af04:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2af06:	2208      	movs	r2, #8
   2af08:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   2af0c:	4770      	bx	lr

0002af0e <tx_start>:
{
   2af0e:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   2af10:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2af12:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2af14:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2af18:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2af1c:	2200      	movs	r2, #0
   2af1e:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   2af22:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
   2af26:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
   2af2a:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2af2e:	685b      	ldr	r3, [r3, #4]
   2af30:	f013 0f10 	tst.w	r3, #16
   2af34:	d102      	bne.n	2af3c <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2af36:	2301      	movs	r3, #1
   2af38:	60a3      	str	r3, [r4, #8]
}
   2af3a:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   2af3c:	2101      	movs	r1, #1
   2af3e:	f7ff ffe0 	bl	2af02 <uarte_enable>
    p_reg->INTENSET = mask;
   2af42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2af46:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   2af4a:	e7f4      	b.n	2af36 <tx_start+0x28>

0002af4c <uarte_nrfx_poll_in>:
{
   2af4c:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
   2af4e:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
   2af50:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2af52:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2af54:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2af58:	b15a      	cbz	r2, 2af72 <uarte_nrfx_poll_in+0x26>
	*c = *data->rx_data;
   2af5a:	6962      	ldr	r2, [r4, #20]
   2af5c:	7812      	ldrb	r2, [r2, #0]
   2af5e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2af60:	2000      	movs	r0, #0
   2af62:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2af66:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2af6a:	2201      	movs	r2, #1
   2af6c:	601a      	str	r2, [r3, #0]
}
   2af6e:	bc10      	pop	{r4}
   2af70:	4770      	bx	lr
		return -1;
   2af72:	f04f 30ff 	mov.w	r0, #4294967295
   2af76:	e7fa      	b.n	2af6e <uarte_nrfx_poll_in+0x22>

0002af78 <k_msleep>:
{
   2af78:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   2af7a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2af7e:	17c1      	asrs	r1, r0, #31
   2af80:	03c9      	lsls	r1, r1, #15
   2af82:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   2af86:	03c0      	lsls	r0, r0, #15
   2af88:	f240 33e7 	movw	r3, #999	; 0x3e7
   2af8c:	18c0      	adds	r0, r0, r3
   2af8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2af92:	f04f 0300 	mov.w	r3, #0
   2af96:	f141 0100 	adc.w	r1, r1, #0
   2af9a:	f7d5 f8b1 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   2af9e:	f7f9 fd97 	bl	24ad0 <z_impl_k_sleep>
}
   2afa2:	bd08      	pop	{r3, pc}

0002afa4 <wait_tx_ready>:
{
   2afa4:	b570      	push	{r4, r5, r6, lr}
   2afa6:	4606      	mov	r6, r0
   2afa8:	e013      	b.n	2afd2 <wait_tx_ready+0x2e>
		if (res) {
   2afaa:	b17d      	cbz	r5, 2afcc <wait_tx_ready+0x28>
	__asm__ volatile(
   2afac:	f04f 0340 	mov.w	r3, #64	; 0x40
   2afb0:	f3ef 8411 	mrs	r4, BASEPRI
   2afb4:	f383 8812 	msr	BASEPRI_MAX, r3
   2afb8:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   2afbc:	4630      	mov	r0, r6
   2afbe:	f7ff ff8c 	bl	2aeda <is_tx_ready>
   2afc2:	b998      	cbnz	r0, 2afec <wait_tx_ready+0x48>
	__asm__ volatile(
   2afc4:	f384 8811 	msr	BASEPRI, r4
   2afc8:	f3bf 8f6f 	isb	sy
			k_msleep(1);
   2afcc:	2001      	movs	r0, #1
   2afce:	f7ff ffd3 	bl	2af78 <k_msleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   2afd2:	2464      	movs	r4, #100	; 0x64
   2afd4:	4630      	mov	r0, r6
   2afd6:	f7ff ff80 	bl	2aeda <is_tx_ready>
   2afda:	4605      	mov	r5, r0
   2afdc:	2800      	cmp	r0, #0
   2afde:	d1e4      	bne.n	2afaa <wait_tx_ready+0x6>
   2afe0:	2001      	movs	r0, #1
   2afe2:	f000 fd59 	bl	2ba98 <nrfx_busy_wait>
   2afe6:	3c01      	subs	r4, #1
   2afe8:	d1f4      	bne.n	2afd4 <wait_tx_ready+0x30>
   2afea:	e7de      	b.n	2afaa <wait_tx_ready+0x6>
}
   2afec:	4620      	mov	r0, r4
   2afee:	bd70      	pop	{r4, r5, r6, pc}

0002aff0 <pinctrl_apply_state>:
{
   2aff0:	b510      	push	{r4, lr}
   2aff2:	b082      	sub	sp, #8
   2aff4:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
   2aff6:	aa01      	add	r2, sp, #4
   2aff8:	f000 f8ea 	bl	2b1d0 <pinctrl_lookup_state>
	if (ret < 0) {
   2affc:	2800      	cmp	r0, #0
   2affe:	db05      	blt.n	2b00c <pinctrl_apply_state+0x1c>
	return pinctrl_apply_state_direct(config, state);
   2b000:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   2b002:	6822      	ldr	r2, [r4, #0]
   2b004:	7919      	ldrb	r1, [r3, #4]
   2b006:	6818      	ldr	r0, [r3, #0]
   2b008:	f7f6 fa5a 	bl	214c0 <pinctrl_configure_pins>
}
   2b00c:	b002      	add	sp, #8
   2b00e:	bd10      	pop	{r4, pc}

0002b010 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   2b010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b014:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
   2b016:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
   2b018:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   2b01a:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2b01e:	2100      	movs	r1, #0
   2b020:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   2b024:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   2b028:	68f8      	ldr	r0, [r7, #12]
   2b02a:	f7ff ffe1 	bl	2aff0 <pinctrl_apply_state>
	if (err < 0) {
   2b02e:	1e05      	subs	r5, r0, #0
   2b030:	db35      	blt.n	2b09e <uarte_instance_init+0x8e>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   2b032:	f108 0104 	add.w	r1, r8, #4
   2b036:	4620      	mov	r0, r4
   2b038:	f7ff fedd 	bl	2adf6 <uarte_nrfx_configure>
	if (err) {
   2b03c:	4605      	mov	r5, r0
   2b03e:	bb70      	cbnz	r0, 2b09e <uarte_instance_init+0x8e>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   2b040:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   2b042:	f013 0f02 	tst.w	r3, #2
   2b046:	d12d      	bne.n	2b0a4 <uarte_instance_init+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2b048:	2308      	movs	r3, #8
   2b04a:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   2b04e:	7a3b      	ldrb	r3, [r7, #8]
   2b050:	b95b      	cbnz	r3, 2b06a <uarte_instance_init+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b052:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   2b056:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
   2b05a:	f8d8 3014 	ldr.w	r3, [r8, #20]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2b05e:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2b062:	2301      	movs	r3, #1
   2b064:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b068:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   2b06a:	687b      	ldr	r3, [r7, #4]
   2b06c:	f013 0f02 	tst.w	r3, #2
   2b070:	d103      	bne.n	2b07a <uarte_instance_init+0x6a>
    p_reg->INTENSET = mask;
   2b072:	f44f 7380 	mov.w	r3, #256	; 0x100
   2b076:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2b07a:	687b      	ldr	r3, [r7, #4]
   2b07c:	f013 0f10 	tst.w	r3, #16
   2b080:	d003      	beq.n	2b08a <uarte_instance_init+0x7a>
   2b082:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2b086:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
   2b08a:	f8d8 3010 	ldr.w	r3, [r8, #16]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2b08e:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2b092:	2300      	movs	r3, #0
   2b094:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b098:	2301      	movs	r3, #1
   2b09a:	60b3      	str	r3, [r6, #8]
   2b09c:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   2b09e:	4628      	mov	r0, r5
   2b0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   2b0a4:	4641      	mov	r1, r8
   2b0a6:	4630      	mov	r0, r6
   2b0a8:	f7f5 fdee 	bl	20c88 <endtx_stoptx_ppi_init>
		if (err < 0) {
   2b0ac:	2800      	cmp	r0, #0
   2b0ae:	dacb      	bge.n	2b048 <uarte_instance_init+0x38>
			return err;
   2b0b0:	4605      	mov	r5, r0
   2b0b2:	e7f4      	b.n	2b09e <uarte_instance_init+0x8e>

0002b0b4 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   2b0b4:	b510      	push	{r4, lr}
   2b0b6:	4604      	mov	r4, r0
   2b0b8:	2200      	movs	r2, #0
   2b0ba:	2101      	movs	r1, #1
   2b0bc:	2002      	movs	r0, #2
   2b0be:	f7fc f93b 	bl	27338 <z_arm_irq_priority_set>
   2b0c2:	2002      	movs	r0, #2
   2b0c4:	f7fc f92e 	bl	27324 <arch_irq_enable>
   2b0c8:	2100      	movs	r1, #0
   2b0ca:	4620      	mov	r0, r4
   2b0cc:	f7ff ffa0 	bl	2b010 <uarte_instance_init>
   2b0d0:	bd10      	pop	{r4, pc}

0002b0d2 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   2b0d2:	b510      	push	{r4, lr}
   2b0d4:	4604      	mov	r4, r0
   2b0d6:	2200      	movs	r2, #0
   2b0d8:	2101      	movs	r1, #1
   2b0da:	2028      	movs	r0, #40	; 0x28
   2b0dc:	f7fc f92c 	bl	27338 <z_arm_irq_priority_set>
   2b0e0:	2028      	movs	r0, #40	; 0x28
   2b0e2:	f7fc f91f 	bl	27324 <arch_irq_enable>
   2b0e6:	2100      	movs	r1, #0
   2b0e8:	4620      	mov	r0, r4
   2b0ea:	f7ff ff91 	bl	2b010 <uarte_instance_init>
   2b0ee:	bd10      	pop	{r4, pc}

0002b0f0 <rng_pool_put>:
	uint8_t first = rngp->first_read;
   2b0f0:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
   2b0f2:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
   2b0f4:	f890 c003 	ldrb.w	ip, [r0, #3]
	if (((last - first) & mask) == mask) {
   2b0f8:	1a9a      	subs	r2, r3, r2
   2b0fa:	ea3c 0202 	bics.w	r2, ip, r2
   2b0fe:	d007      	beq.n	2b110 <rng_pool_put+0x20>
	rngp->buffer[last] = byte;
   2b100:	18c2      	adds	r2, r0, r3
   2b102:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
   2b104:	3301      	adds	r3, #1
   2b106:	ea03 030c 	and.w	r3, r3, ip
   2b10a:	7083      	strb	r3, [r0, #2]
	return 0;
   2b10c:	2000      	movs	r0, #0
   2b10e:	4770      	bx	lr
		return -ENOBUFS;
   2b110:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   2b114:	4770      	bx	lr

0002b116 <rng_pool_init>:
	rngp->first_alloc = 0U;
   2b116:	2300      	movs	r3, #0
   2b118:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
   2b11a:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
   2b11c:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
   2b11e:	3901      	subs	r1, #1
   2b120:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
   2b122:	7102      	strb	r2, [r0, #4]
}
   2b124:	4770      	bx	lr

0002b126 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   2b126:	2000      	movs	r0, #0
   2b128:	4770      	bx	lr

0002b12a <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   2b12a:	b538      	push	{r3, r4, r5, lr}
   2b12c:	460c      	mov	r4, r1
   2b12e:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   2b130:	f7ee fb94 	bl	1985c <bt_is_ready>
   2b134:	b120      	cbz	r0, 2b140 <entropy_bt_get_entropy+0x16>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   2b136:	4629      	mov	r1, r5
   2b138:	4620      	mov	r0, r4
   2b13a:	f7ed fc07 	bl	1894c <bt_hci_le_rand>
}
   2b13e:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   2b140:	f06f 000a 	mvn.w	r0, #10
   2b144:	e7fb      	b.n	2b13e <entropy_bt_get_entropy+0x14>

0002b146 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2b146:	4770      	bx	lr

0002b148 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   2b148:	1a40      	subs	r0, r0, r1
}
   2b14a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2b14e:	4770      	bx	lr

0002b150 <event_check>:
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2b150:	f100 0350 	add.w	r3, r0, #80	; 0x50
   2b154:	009b      	lsls	r3, r3, #2
   2b156:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b158:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2b15c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   2b160:	6818      	ldr	r0, [r3, #0]
}
   2b162:	3800      	subs	r0, #0
   2b164:	bf18      	it	ne
   2b166:	2001      	movne	r0, #1
   2b168:	4770      	bx	lr

0002b16a <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2b16a:	f100 0350 	add.w	r3, r0, #80	; 0x50
   2b16e:	009b      	lsls	r3, r3, #2
   2b170:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2b172:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2b176:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   2b17a:	2200      	movs	r2, #0
   2b17c:	601a      	str	r2, [r3, #0]
   2b17e:	681b      	ldr	r3, [r3, #0]
}
   2b180:	4770      	bx	lr

0002b182 <absolute_time_to_cc>:
}
   2b182:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2b186:	4770      	bx	lr

0002b188 <full_int_lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   2b188:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2b18c:	b672      	cpsid	i
}
   2b18e:	4770      	bx	lr

0002b190 <full_int_unlock>:
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   2b190:	f380 8810 	msr	PRIMASK, r0
}
   2b194:	4770      	bx	lr

0002b196 <compare_set>:
{
   2b196:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b198:	b083      	sub	sp, #12
   2b19a:	4604      	mov	r4, r0
   2b19c:	4617      	mov	r7, r2
   2b19e:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   2b1a0:	f7f5 ff68 	bl	21074 <compare_int_lock>
   2b1a4:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   2b1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b1a8:	9301      	str	r3, [sp, #4]
   2b1aa:	9b08      	ldr	r3, [sp, #32]
   2b1ac:	9300      	str	r3, [sp, #0]
   2b1ae:	463a      	mov	r2, r7
   2b1b0:	462b      	mov	r3, r5
   2b1b2:	4620      	mov	r0, r4
   2b1b4:	f7f6 f82c 	bl	21210 <compare_set_nolocks>
   2b1b8:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   2b1ba:	4631      	mov	r1, r6
   2b1bc:	4620      	mov	r0, r4
   2b1be:	f7f5 ffaf 	bl	21120 <compare_int_unlock>
}
   2b1c2:	4628      	mov	r0, r5
   2b1c4:	b003      	add	sp, #12
   2b1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002b1c8 <sys_clock_cycle_get_32>:
{
   2b1c8:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2b1ca:	f7f6 f801 	bl	211d0 <z_nrf_rtc_timer_read>
}
   2b1ce:	bd08      	pop	{r3, pc}

0002b1d0 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   2b1d0:	b500      	push	{lr}
	*state = &config->states[0];
   2b1d2:	6843      	ldr	r3, [r0, #4]
   2b1d4:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   2b1d6:	e001      	b.n	2b1dc <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
   2b1d8:	3308      	adds	r3, #8
   2b1da:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   2b1dc:	6813      	ldr	r3, [r2, #0]
   2b1de:	f890 c008 	ldrb.w	ip, [r0, #8]
   2b1e2:	f8d0 e004 	ldr.w	lr, [r0, #4]
   2b1e6:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
   2b1ea:	4563      	cmp	r3, ip
   2b1ec:	d205      	bcs.n	2b1fa <pinctrl_lookup_state+0x2a>
		if (id == (*state)->id) {
   2b1ee:	f893 c005 	ldrb.w	ip, [r3, #5]
   2b1f2:	458c      	cmp	ip, r1
   2b1f4:	d1f0      	bne.n	2b1d8 <pinctrl_lookup_state+0x8>
			return 0;
   2b1f6:	2000      	movs	r0, #0
   2b1f8:	e001      	b.n	2b1fe <pinctrl_lookup_state+0x2e>
	}

	return -ENOENT;
   2b1fa:	f06f 0001 	mvn.w	r0, #1
}
   2b1fe:	f85d fb04 	ldr.w	pc, [sp], #4

0002b202 <event_packet_is_discardable>:
	switch (hdr->evt) {
   2b202:	7803      	ldrb	r3, [r0, #0]
   2b204:	2b3e      	cmp	r3, #62	; 0x3e
   2b206:	d003      	beq.n	2b210 <event_packet_is_discardable+0xe>
   2b208:	2bff      	cmp	r3, #255	; 0xff
   2b20a:	d008      	beq.n	2b21e <event_packet_is_discardable+0x1c>
   2b20c:	2000      	movs	r0, #0
   2b20e:	4770      	bx	lr
		switch (me->subevent) {
   2b210:	7883      	ldrb	r3, [r0, #2]
   2b212:	2b02      	cmp	r3, #2
   2b214:	d001      	beq.n	2b21a <event_packet_is_discardable+0x18>
			return false;
   2b216:	2000      	movs	r0, #0
   2b218:	4770      	bx	lr
			return true;
   2b21a:	2001      	movs	r0, #1
   2b21c:	4770      	bx	lr
		uint8_t subevent = hci_buf[2];
   2b21e:	7883      	ldrb	r3, [r0, #2]
		switch (subevent) {
   2b220:	2b80      	cmp	r3, #128	; 0x80
   2b222:	d001      	beq.n	2b228 <event_packet_is_discardable+0x26>
			return false;
   2b224:	2000      	movs	r0, #0
}
   2b226:	4770      	bx	lr
			return true;
   2b228:	2001      	movs	r0, #1
   2b22a:	4770      	bx	lr

0002b22c <hci_driver_send>:
{
   2b22c:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   2b22e:	8a03      	ldrh	r3, [r0, #16]
   2b230:	b183      	cbz	r3, 2b254 <hci_driver_send+0x28>
   2b232:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2b234:	7e03      	ldrb	r3, [r0, #24]
	switch (type) {
   2b236:	b14b      	cbz	r3, 2b24c <hci_driver_send+0x20>
   2b238:	2b02      	cmp	r3, #2
   2b23a:	d10e      	bne.n	2b25a <hci_driver_send+0x2e>
		err = acl_handle(buf);
   2b23c:	f7f6 fb8a 	bl	21954 <acl_handle>
   2b240:	4605      	mov	r5, r0
	if (!err) {
   2b242:	b965      	cbnz	r5, 2b25e <hci_driver_send+0x32>
		net_buf_unref(buf);
   2b244:	4620      	mov	r0, r4
   2b246:	f7fe fe01 	bl	29e4c <net_buf_unref>
   2b24a:	e008      	b.n	2b25e <hci_driver_send+0x32>
		err = cmd_handle(buf);
   2b24c:	f7f6 fba0 	bl	21990 <cmd_handle>
   2b250:	4605      	mov	r5, r0
		break;
   2b252:	e7f6      	b.n	2b242 <hci_driver_send+0x16>
		return -EINVAL;
   2b254:	f06f 0515 	mvn.w	r5, #21
   2b258:	e001      	b.n	2b25e <hci_driver_send+0x32>
	switch (type) {
   2b25a:	f06f 0515 	mvn.w	r5, #21
}
   2b25e:	4628      	mov	r0, r5
   2b260:	bd38      	pop	{r3, r4, r5, pc}

0002b262 <hci_driver_close>:
{
   2b262:	b510      	push	{r4, lr}
		hci_ecdh_uninit();
   2b264:	f7f7 f844 	bl	222f0 <hci_ecdh_uninit>
	err = MULTITHREADING_LOCK_ACQUIRE();
   2b268:	f04f 30ff 	mov.w	r0, #4294967295
   2b26c:	f04f 31ff 	mov.w	r1, #4294967295
   2b270:	f7f6 f9b2 	bl	215d8 <multithreading_lock_acquire>
	if (err) {
   2b274:	4604      	mov	r4, r0
   2b276:	b108      	cbz	r0, 2b27c <hci_driver_close+0x1a>
}
   2b278:	4620      	mov	r0, r4
   2b27a:	bd10      	pop	{r4, pc}
	err = sdc_disable();
   2b27c:	f7d5 fb6e 	bl	95c <sdc_disable>
	if (err) {
   2b280:	4604      	mov	r4, r0
   2b282:	b910      	cbnz	r0, 2b28a <hci_driver_close+0x28>
	MULTITHREADING_LOCK_RELEASE();
   2b284:	f7f6 f9b2 	bl	215ec <multithreading_lock_release>
	return err;
   2b288:	e7f6      	b.n	2b278 <hci_driver_close+0x16>
		MULTITHREADING_LOCK_RELEASE();
   2b28a:	f7f6 f9af 	bl	215ec <multithreading_lock_release>
		return err;
   2b28e:	e7f3      	b.n	2b278 <hci_driver_close+0x16>

0002b290 <configure_supported_features>:
{
   2b290:	b508      	push	{r3, lr}
			err = sdc_support_central();
   2b292:	f7d5 fc1b 	bl	acc <sdc_support_central>
			if (err) {
   2b296:	b948      	cbnz	r0, 2b2ac <configure_supported_features+0x1c>
			err = sdc_support_dle_central();
   2b298:	f7d5 fc2a 	bl	af0 <sdc_support_dle_central>
			if (err) {
   2b29c:	b948      	cbnz	r0, 2b2b2 <configure_supported_features+0x22>
		err = sdc_support_le_2m_phy();
   2b29e:	f7d5 fc37 	bl	b10 <sdc_support_le_2m_phy>
		if (err) {
   2b2a2:	b948      	cbnz	r0, 2b2b8 <configure_supported_features+0x28>
			err = sdc_support_phy_update_central();
   2b2a4:	f7d5 fc44 	bl	b30 <sdc_support_phy_update_central>
			if (err) {
   2b2a8:	b948      	cbnz	r0, 2b2be <configure_supported_features+0x2e>
}
   2b2aa:	bd08      	pop	{r3, pc}
				return -ENOTSUP;
   2b2ac:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2b2b0:	e7fb      	b.n	2b2aa <configure_supported_features+0x1a>
				return -ENOTSUP;
   2b2b2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2b2b6:	e7f8      	b.n	2b2aa <configure_supported_features+0x1a>
			return -ENOTSUP;
   2b2b8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2b2bc:	e7f5      	b.n	2b2aa <configure_supported_features+0x1a>
				return -ENOTSUP;
   2b2be:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2b2c2:	e7f2      	b.n	2b2aa <configure_supported_features+0x1a>

0002b2c4 <receive_work_handler>:
{
   2b2c4:	b508      	push	{r3, lr}
	hci_driver_receive_process();
   2b2c6:	f7f6 fd49 	bl	21d5c <hci_driver_receive_process>
}
   2b2ca:	bd08      	pop	{r3, pc}

0002b2cc <encode_command_status>:
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   2b2cc:	230f      	movs	r3, #15
   2b2ce:	7003      	strb	r3, [r0, #0]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   2b2d0:	2304      	movs	r3, #4
   2b2d2:	7043      	strb	r3, [r0, #1]
	evt_data->status = status_code;
   2b2d4:	7082      	strb	r2, [r0, #2]
	evt_data->ncmd = 1;
   2b2d6:	2301      	movs	r3, #1
   2b2d8:	70c3      	strb	r3, [r0, #3]
	evt_data->opcode = hci_opcode;
   2b2da:	8081      	strh	r1, [r0, #4]
}
   2b2dc:	4770      	bx	lr

0002b2de <encode_command_complete_header>:
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   2b2de:	f04f 0c0e 	mov.w	ip, #14
   2b2e2:	f880 c000 	strb.w	ip, [r0]
	evt_hdr->len = param_length;
   2b2e6:	7042      	strb	r2, [r0, #1]
	evt_data->ncmd = 1;
   2b2e8:	2201      	movs	r2, #1
   2b2ea:	7082      	strb	r2, [r0, #2]
	evt_data->opcode = hci_opcode;
   2b2ec:	f8a0 1003 	strh.w	r1, [r0, #3]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   2b2f0:	7143      	strb	r3, [r0, #5]
}
   2b2f2:	4770      	bx	lr

0002b2f4 <le_read_supported_states>:
	*buf = states1;
   2b2f4:	2370      	movs	r3, #112	; 0x70
   2b2f6:	7003      	strb	r3, [r0, #0]
	*(buf + 4) = states2;
   2b2f8:	2340      	movs	r3, #64	; 0x40
   2b2fa:	7103      	strb	r3, [r0, #4]
}
   2b2fc:	4770      	bx	lr

0002b2fe <status_param_cmd_put>:
}
   2b2fe:	2001      	movs	r0, #1
   2b300:	4770      	bx	lr

0002b302 <link_control_cmd_put>:
{
   2b302:	b508      	push	{r3, lr}
	return ((uint16_t)src[1] << 8) | src[0];
   2b304:	7842      	ldrb	r2, [r0, #1]
   2b306:	f810 3b03 	ldrb.w	r3, [r0], #3
   2b30a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2b30e:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2b310:	f240 4206 	movw	r2, #1030	; 0x406
   2b314:	4293      	cmp	r3, r2
   2b316:	d005      	beq.n	2b324 <link_control_cmd_put+0x22>
   2b318:	f240 421d 	movw	r2, #1053	; 0x41d
   2b31c:	4293      	cmp	r3, r2
   2b31e:	d004      	beq.n	2b32a <link_control_cmd_put+0x28>
   2b320:	2001      	movs	r0, #1
}
   2b322:	bd08      	pop	{r3, pc}
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   2b324:	f7e1 ff92 	bl	d24c <sdc_hci_cmd_lc_disconnect>
   2b328:	e7fb      	b.n	2b322 <link_control_cmd_put+0x20>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   2b32a:	f7e1 ff91 	bl	d250 <sdc_hci_cmd_lc_read_remote_version_information>
   2b32e:	e7f8      	b.n	2b322 <link_control_cmd_put+0x20>

0002b330 <controller_and_baseband_cmd_put>:
{
   2b330:	b508      	push	{r3, lr}
   2b332:	4603      	mov	r3, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2b334:	3003      	adds	r0, #3
   2b336:	f893 c001 	ldrb.w	ip, [r3, #1]
   2b33a:	781b      	ldrb	r3, [r3, #0]
   2b33c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   2b340:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2b342:	f640 4c63 	movw	ip, #3171	; 0xc63
   2b346:	4563      	cmp	r3, ip
   2b348:	d02c      	beq.n	2b3a4 <controller_and_baseband_cmd_put+0x74>
   2b34a:	f101 0106 	add.w	r1, r1, #6
   2b34e:	dc16      	bgt.n	2b37e <controller_and_baseband_cmd_put+0x4e>
   2b350:	f640 4c03 	movw	ip, #3075	; 0xc03
   2b354:	4563      	cmp	r3, ip
   2b356:	d022      	beq.n	2b39e <controller_and_baseband_cmd_put+0x6e>
   2b358:	f640 4c2d 	movw	ip, #3117	; 0xc2d
   2b35c:	4563      	cmp	r3, ip
   2b35e:	d105      	bne.n	2b36c <controller_and_baseband_cmd_put+0x3c>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   2b360:	7813      	ldrb	r3, [r2, #0]
   2b362:	3303      	adds	r3, #3
   2b364:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   2b366:	f7e1 fe3b 	bl	cfe0 <sdc_hci_cmd_cb_read_transmit_power_level>
   2b36a:	e007      	b.n	2b37c <controller_and_baseband_cmd_put+0x4c>
	switch (opcode)	{
   2b36c:	f640 4201 	movw	r2, #3073	; 0xc01
   2b370:	4293      	cmp	r3, r2
   2b372:	d102      	bne.n	2b37a <controller_and_baseband_cmd_put+0x4a>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   2b374:	f7e1 fe36 	bl	cfe4 <sdc_hci_cmd_cb_set_event_mask>
   2b378:	e000      	b.n	2b37c <controller_and_baseband_cmd_put+0x4c>
	switch (opcode)	{
   2b37a:	2001      	movs	r0, #1
}
   2b37c:	bd08      	pop	{r3, pc}
	switch (opcode)	{
   2b37e:	f640 4c7b 	movw	ip, #3195	; 0xc7b
   2b382:	4563      	cmp	r3, ip
   2b384:	d011      	beq.n	2b3aa <controller_and_baseband_cmd_put+0x7a>
   2b386:	f640 4c7c 	movw	ip, #3196	; 0xc7c
   2b38a:	4563      	cmp	r3, ip
   2b38c:	d105      	bne.n	2b39a <controller_and_baseband_cmd_put+0x6a>
		*param_length_out +=
   2b38e:	7813      	ldrb	r3, [r2, #0]
   2b390:	3302      	adds	r3, #2
   2b392:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   2b394:	f7e1 fe30 	bl	cff8 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
   2b398:	e7f0      	b.n	2b37c <controller_and_baseband_cmd_put+0x4c>
	switch (opcode)	{
   2b39a:	2001      	movs	r0, #1
   2b39c:	e7ee      	b.n	2b37c <controller_and_baseband_cmd_put+0x4c>
		return sdc_hci_cmd_cb_reset();
   2b39e:	f7d5 fd1d 	bl	ddc <sdc_hci_cmd_cb_reset>
   2b3a2:	e7eb      	b.n	2b37c <controller_and_baseband_cmd_put+0x4c>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   2b3a4:	f7e1 fe23 	bl	cfee <sdc_hci_cmd_cb_set_event_mask_page_2>
   2b3a8:	e7e8      	b.n	2b37c <controller_and_baseband_cmd_put+0x4c>
		*param_length_out +=
   2b3aa:	7813      	ldrb	r3, [r2, #0]
   2b3ac:	3304      	adds	r3, #4
   2b3ae:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   2b3b0:	f7e1 fe14 	bl	cfdc <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
   2b3b4:	e7e2      	b.n	2b37c <controller_and_baseband_cmd_put+0x4c>

0002b3b6 <supported_commands>:
{
   2b3b6:	b510      	push	{r4, lr}
   2b3b8:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   2b3ba:	2230      	movs	r2, #48	; 0x30
   2b3bc:	2100      	movs	r1, #0
   2b3be:	f7fc f8b4 	bl	2752a <memset>
	cmds->hci_disconnect = 1;
   2b3c2:	7823      	ldrb	r3, [r4, #0]
   2b3c4:	f043 0320 	orr.w	r3, r3, #32
   2b3c8:	7023      	strb	r3, [r4, #0]
	cmds->hci_read_remote_version_information = 1;
   2b3ca:	78a3      	ldrb	r3, [r4, #2]
   2b3cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2b3d0:	70a3      	strb	r3, [r4, #2]
	cmds->hci_set_event_mask = 1;
   2b3d2:	7963      	ldrb	r3, [r4, #5]
   2b3d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2b3d8:	7163      	strb	r3, [r4, #5]
	cmds->hci_reset = 1;
   2b3da:	b2db      	uxtb	r3, r3
   2b3dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2b3e0:	7163      	strb	r3, [r4, #5]
	cmds->hci_read_transmit_power_level = 1;
   2b3e2:	7aa3      	ldrb	r3, [r4, #10]
   2b3e4:	f043 0304 	orr.w	r3, r3, #4
   2b3e8:	72a3      	strb	r3, [r4, #10]
	cmds->hci_read_local_version_information = 1;
   2b3ea:	7ba3      	ldrb	r3, [r4, #14]
   2b3ec:	f043 0308 	orr.w	r3, r3, #8
   2b3f0:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_local_supported_features = 1;
   2b3f2:	b2db      	uxtb	r3, r3
   2b3f4:	f043 0320 	orr.w	r3, r3, #32
   2b3f8:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_bd_addr = 1;
   2b3fa:	7be3      	ldrb	r3, [r4, #15]
   2b3fc:	f043 0302 	orr.w	r3, r3, #2
   2b400:	73e3      	strb	r3, [r4, #15]
	cmds->hci_set_event_mask_page_2 = 1;
   2b402:	7da3      	ldrb	r3, [r4, #22]
   2b404:	f043 0304 	orr.w	r3, r3, #4
   2b408:	75a3      	strb	r3, [r4, #22]
	cmds->hci_le_set_event_mask = 1;
   2b40a:	7e63      	ldrb	r3, [r4, #25]
   2b40c:	f043 0301 	orr.w	r3, r3, #1
   2b410:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_buffer_size_v1 = 1;
   2b412:	b2db      	uxtb	r3, r3
   2b414:	f043 0302 	orr.w	r3, r3, #2
   2b418:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_local_supported_features = 1;
   2b41a:	b2db      	uxtb	r3, r3
   2b41c:	f043 0304 	orr.w	r3, r3, #4
   2b420:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_random_address = 1;
   2b422:	b2db      	uxtb	r3, r3
   2b424:	f043 0310 	orr.w	r3, r3, #16
   2b428:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_scan_parameters = 1;
   2b42a:	7ea3      	ldrb	r3, [r4, #26]
   2b42c:	f043 0304 	orr.w	r3, r3, #4
   2b430:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_set_scan_enable = 1;
   2b432:	b2db      	uxtb	r3, r3
   2b434:	f043 0308 	orr.w	r3, r3, #8
   2b438:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_create_connection = 1;
   2b43a:	b2db      	uxtb	r3, r3
   2b43c:	f043 0310 	orr.w	r3, r3, #16
   2b440:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_create_connection_cancel = 1;
   2b442:	b2db      	uxtb	r3, r3
   2b444:	f043 0320 	orr.w	r3, r3, #32
   2b448:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_read_filter_accept_list_size = 1;
   2b44a:	b2db      	uxtb	r3, r3
   2b44c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2b450:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_clear_filter_accept_list = 1;
   2b452:	b2db      	uxtb	r3, r3
   2b454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2b458:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   2b45a:	7ee3      	ldrb	r3, [r4, #27]
   2b45c:	f043 0301 	orr.w	r3, r3, #1
   2b460:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_remove_device_from_filter_accept_list = 1;
   2b462:	b2db      	uxtb	r3, r3
   2b464:	f043 0302 	orr.w	r3, r3, #2
   2b468:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_connection_update = 1;
   2b46a:	b2db      	uxtb	r3, r3
   2b46c:	f043 0304 	orr.w	r3, r3, #4
   2b470:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_set_host_channel_classification = 1;
   2b472:	b2db      	uxtb	r3, r3
   2b474:	f043 0308 	orr.w	r3, r3, #8
   2b478:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_read_channel_map = 1;
   2b47a:	b2db      	uxtb	r3, r3
   2b47c:	f043 0310 	orr.w	r3, r3, #16
   2b480:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_read_remote_features = 1;
   2b482:	b2db      	uxtb	r3, r3
   2b484:	f043 0320 	orr.w	r3, r3, #32
   2b488:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_encrypt = 1;
   2b48a:	b2db      	uxtb	r3, r3
   2b48c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2b490:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_rand = 1;
   2b492:	b2db      	uxtb	r3, r3
   2b494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2b498:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_enable_encryption = 1;
   2b49a:	7f23      	ldrb	r3, [r4, #28]
   2b49c:	f043 0301 	orr.w	r3, r3, #1
   2b4a0:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_read_supported_states = 1;
   2b4a2:	b2db      	uxtb	r3, r3
   2b4a4:	f043 0308 	orr.w	r3, r3, #8
   2b4a8:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_receiver_test_v1 = 1;
   2b4aa:	b2db      	uxtb	r3, r3
   2b4ac:	f043 0310 	orr.w	r3, r3, #16
   2b4b0:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_transmitter_test_v1 = 1;
   2b4b2:	b2db      	uxtb	r3, r3
   2b4b4:	f043 0320 	orr.w	r3, r3, #32
   2b4b8:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_test_end = 1;
   2b4ba:	b2db      	uxtb	r3, r3
   2b4bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2b4c0:	7723      	strb	r3, [r4, #28]
	cmds->hci_read_authenticated_payload_timeout = 1;
   2b4c2:	f894 3020 	ldrb.w	r3, [r4, #32]
   2b4c6:	f043 0310 	orr.w	r3, r3, #16
   2b4ca:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_write_authenticated_payload_timeout = 1;
   2b4ce:	b2db      	uxtb	r3, r3
   2b4d0:	f043 0320 	orr.w	r3, r3, #32
   2b4d4:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_data_length = 1;
   2b4d8:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   2b4dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2b4e0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_read_suggested_default_data_length = 1;
   2b4e4:	b2db      	uxtb	r3, r3
   2b4e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2b4ea:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_write_suggested_default_data_length = 1;
   2b4ee:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   2b4f2:	f043 0301 	orr.w	r3, r3, #1
   2b4f6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_read_maximum_data_length = 1;
   2b4fa:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   2b4fe:	f043 0308 	orr.w	r3, r3, #8
   2b502:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_read_phy = 1;
   2b506:	b2db      	uxtb	r3, r3
   2b508:	f043 0310 	orr.w	r3, r3, #16
   2b50c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_set_default_phy = 1;
   2b510:	b2db      	uxtb	r3, r3
   2b512:	f043 0320 	orr.w	r3, r3, #32
   2b516:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_set_phy = 1;
   2b51a:	b2db      	uxtb	r3, r3
   2b51c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2b520:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_receiver_test_v2 = 1;
   2b524:	b2db      	uxtb	r3, r3
   2b526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2b52a:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_transmitter_test_v2 = 1;
   2b52e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   2b532:	f043 0301 	orr.w	r3, r3, #1
   2b536:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	cmds->hci_le_read_transmit_power = 1;
   2b53a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   2b53e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2b542:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	cmds->hci_le_read_local_p256_public_key = 1;
   2b546:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   2b54a:	f043 0302 	orr.w	r3, r3, #2
   2b54e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_generate_dhkey_v1 = 1;
   2b552:	b2db      	uxtb	r3, r3
   2b554:	f043 0304 	orr.w	r3, r3, #4
   2b558:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_generate_dhkey_v2 = 1;
   2b55c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   2b560:	f043 0304 	orr.w	r3, r3, #4
   2b564:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
   2b568:	bd10      	pop	{r4, pc}

0002b56a <supported_features>:
{
   2b56a:	b510      	push	{r4, lr}
   2b56c:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   2b56e:	2208      	movs	r2, #8
   2b570:	2100      	movs	r1, #0
   2b572:	f7fb ffda 	bl	2752a <memset>
	features->bdedr_not_supported = 1;
   2b576:	7923      	ldrb	r3, [r4, #4]
   2b578:	f043 0320 	orr.w	r3, r3, #32
   2b57c:	7123      	strb	r3, [r4, #4]
	features->le_supported = 1;
   2b57e:	b2db      	uxtb	r3, r3
   2b580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2b584:	7123      	strb	r3, [r4, #4]
}
   2b586:	bd10      	pop	{r4, pc}

0002b588 <info_param_cmd_put>:
{
   2b588:	b508      	push	{r3, lr}
   2b58a:	4603      	mov	r3, r0
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   2b58c:	1d88      	adds	r0, r1, #6
   2b58e:	f893 c001 	ldrb.w	ip, [r3, #1]
   2b592:	781b      	ldrb	r3, [r3, #0]
   2b594:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   2b598:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2b59a:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   2b59e:	3b01      	subs	r3, #1
   2b5a0:	2b08      	cmp	r3, #8
   2b5a2:	d820      	bhi.n	2b5e6 <info_param_cmd_put+0x5e>
   2b5a4:	e8df f003 	tbb	[pc, r3]
   2b5a8:	1f120b05 	.word	0x1f120b05
   2b5ac:	1f1f1f1f 	.word	0x1f1f1f1f
   2b5b0:	19          	.byte	0x19
   2b5b1:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   2b5b2:	7813      	ldrb	r3, [r2, #0]
   2b5b4:	3308      	adds	r3, #8
   2b5b6:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   2b5b8:	f7e1 fe0f 	bl	d1da <sdc_hci_cmd_ip_read_local_version_information>
   2b5bc:	e014      	b.n	2b5e8 <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   2b5be:	7813      	ldrb	r3, [r2, #0]
   2b5c0:	3340      	adds	r3, #64	; 0x40
   2b5c2:	7013      	strb	r3, [r2, #0]
		supported_commands((void *)event_out_params);
   2b5c4:	f7ff fef7 	bl	2b3b6 <supported_commands>
		return 0;
   2b5c8:	2000      	movs	r0, #0
   2b5ca:	e00d      	b.n	2b5e8 <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   2b5cc:	7813      	ldrb	r3, [r2, #0]
   2b5ce:	3308      	adds	r3, #8
   2b5d0:	7013      	strb	r3, [r2, #0]
		supported_features((void *)event_out_params);
   2b5d2:	f7ff ffca 	bl	2b56a <supported_features>
		return 0;
   2b5d6:	2000      	movs	r0, #0
   2b5d8:	e006      	b.n	2b5e8 <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   2b5da:	7813      	ldrb	r3, [r2, #0]
   2b5dc:	3306      	adds	r3, #6
   2b5de:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   2b5e0:	f7e1 fdf9 	bl	d1d6 <sdc_hci_cmd_ip_read_bd_addr>
   2b5e4:	e000      	b.n	2b5e8 <info_param_cmd_put+0x60>
	switch (opcode)	{
   2b5e6:	2001      	movs	r0, #1
}
   2b5e8:	bd08      	pop	{r3, pc}

0002b5ea <le_supported_features>:
{
   2b5ea:	b510      	push	{r4, lr}
   2b5ec:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   2b5ee:	2208      	movs	r2, #8
   2b5f0:	2100      	movs	r1, #0
   2b5f2:	f7fb ff9a 	bl	2752a <memset>
	features->params.le_encryption = 1;
   2b5f6:	7823      	ldrb	r3, [r4, #0]
   2b5f8:	f043 0301 	orr.w	r3, r3, #1
   2b5fc:	7023      	strb	r3, [r4, #0]
	features->params.extended_reject_indication = 1;
   2b5fe:	b2db      	uxtb	r3, r3
   2b600:	f043 0304 	orr.w	r3, r3, #4
   2b604:	7023      	strb	r3, [r4, #0]
	features->params.slave_initiated_features_exchange = 1;
   2b606:	b2db      	uxtb	r3, r3
   2b608:	f043 0308 	orr.w	r3, r3, #8
   2b60c:	7023      	strb	r3, [r4, #0]
	features->params.le_ping = 1;
   2b60e:	b2db      	uxtb	r3, r3
   2b610:	f043 0310 	orr.w	r3, r3, #16
   2b614:	7023      	strb	r3, [r4, #0]
	features->params.le_data_packet_length_extension = 1;
   2b616:	b2db      	uxtb	r3, r3
   2b618:	f043 0320 	orr.w	r3, r3, #32
   2b61c:	7023      	strb	r3, [r4, #0]
	features->params.extended_scanner_filter_policies = 1;
   2b61e:	b2db      	uxtb	r3, r3
   2b620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2b624:	7023      	strb	r3, [r4, #0]
	features->params.le_2m_phy = 1;
   2b626:	7863      	ldrb	r3, [r4, #1]
   2b628:	f043 0301 	orr.w	r3, r3, #1
   2b62c:	7063      	strb	r3, [r4, #1]
	features->params.channel_selection_algorithm_2 = 1;
   2b62e:	b2db      	uxtb	r3, r3
   2b630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2b634:	7063      	strb	r3, [r4, #1]
}
   2b636:	bd10      	pop	{r4, pc}

0002b638 <vs_zephyr_supported_commands>:
{
   2b638:	b510      	push	{r4, lr}
   2b63a:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   2b63c:	2202      	movs	r2, #2
   2b63e:	2100      	movs	r1, #0
   2b640:	f7fb ff73 	bl	2752a <memset>
	cmds->read_version_info = 1;
   2b644:	7823      	ldrb	r3, [r4, #0]
   2b646:	f043 0301 	orr.w	r3, r3, #1
   2b64a:	7023      	strb	r3, [r4, #0]
	cmds->read_supported_commands = 1;
   2b64c:	b2db      	uxtb	r3, r3
   2b64e:	f043 0302 	orr.w	r3, r3, #2
   2b652:	7023      	strb	r3, [r4, #0]
	cmds->write_bd_addr = 1;
   2b654:	b2db      	uxtb	r3, r3
   2b656:	f043 0320 	orr.w	r3, r3, #32
   2b65a:	7023      	strb	r3, [r4, #0]
	cmds->read_static_addresses = 1;
   2b65c:	7863      	ldrb	r3, [r4, #1]
   2b65e:	f043 0301 	orr.w	r3, r3, #1
   2b662:	7063      	strb	r3, [r4, #1]
	cmds->read_key_hierarchy_roots = 1;
   2b664:	b2db      	uxtb	r3, r3
   2b666:	f043 0302 	orr.w	r3, r3, #2
   2b66a:	7063      	strb	r3, [r4, #1]
	cmds->read_chip_temperature = 1;
   2b66c:	b2db      	uxtb	r3, r3
   2b66e:	f043 0304 	orr.w	r3, r3, #4
   2b672:	7063      	strb	r3, [r4, #1]
}
   2b674:	bd10      	pop	{r4, pc}

0002b676 <vs_supported_commands>:
{
   2b676:	b510      	push	{r4, lr}
   2b678:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   2b67a:	2202      	movs	r2, #2
   2b67c:	2100      	movs	r1, #0
   2b67e:	f7fb ff54 	bl	2752a <memset>
	cmds->read_supported_vs_commands = 1;
   2b682:	7823      	ldrb	r3, [r4, #0]
   2b684:	f043 0301 	orr.w	r3, r3, #1
   2b688:	7023      	strb	r3, [r4, #0]
	cmds->llpm_mode_set = 1;
   2b68a:	b2db      	uxtb	r3, r3
   2b68c:	f043 0302 	orr.w	r3, r3, #2
   2b690:	7023      	strb	r3, [r4, #0]
	cmds->conn_update = 1;
   2b692:	b2db      	uxtb	r3, r3
   2b694:	f043 0304 	orr.w	r3, r3, #4
   2b698:	7023      	strb	r3, [r4, #0]
	cmds->conn_event_extend = 1;
   2b69a:	b2db      	uxtb	r3, r3
   2b69c:	f043 0308 	orr.w	r3, r3, #8
   2b6a0:	7023      	strb	r3, [r4, #0]
	cmds->qos_conn_event_report_enable = 1;
   2b6a2:	b2db      	uxtb	r3, r3
   2b6a4:	f043 0310 	orr.w	r3, r3, #16
   2b6a8:	7023      	strb	r3, [r4, #0]
	cmds->event_length_set = 1;
   2b6aa:	b2db      	uxtb	r3, r3
   2b6ac:	f043 0320 	orr.w	r3, r3, #32
   2b6b0:	7023      	strb	r3, [r4, #0]
}
   2b6b2:	bd10      	pop	{r4, pc}

0002b6b4 <le_controller_cmd_put>:
{
   2b6b4:	b508      	push	{r3, lr}
   2b6b6:	4603      	mov	r3, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2b6b8:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   2b6ba:	3106      	adds	r1, #6
   2b6bc:	f893 c001 	ldrb.w	ip, [r3, #1]
   2b6c0:	781b      	ldrb	r3, [r3, #0]
   2b6c2:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   2b6c6:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2b6c8:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   2b6cc:	3b01      	subs	r3, #1
   2b6ce:	2b5d      	cmp	r3, #93	; 0x5d
   2b6d0:	f200 80bc 	bhi.w	2b84c <le_controller_cmd_put+0x198>
   2b6d4:	e8df f003 	tbb	[pc, r3]
   2b6d8:	ba39322f 	.word	0xba39322f
   2b6dc:	bababa41 	.word	0xbababa41
   2b6e0:	4744baba 	.word	0x4744baba
   2b6e4:	57504d4a 	.word	0x57504d4a
   2b6e8:	63605d5a 	.word	0x63605d5a
   2b6ec:	756f6c66 	.word	0x756f6c66
   2b6f0:	7fbaba7c 	.word	0x7fbaba7c
   2b6f4:	babababa 	.word	0xbabababa
   2b6f8:	948d87ba 	.word	0x948d87ba
   2b6fc:	baba9a97 	.word	0xbaba9a97
   2b700:	babababa 	.word	0xbabababa
   2b704:	a7a0baba 	.word	0xa7a0baba
   2b708:	babab0ad 	.word	0xbabab0ad
   2b70c:	babababa 	.word	0xbabababa
   2b710:	babababa 	.word	0xbabababa
   2b714:	babababa 	.word	0xbabababa
   2b718:	babababa 	.word	0xbabababa
   2b71c:	babababa 	.word	0xbabababa
   2b720:	bab3baba 	.word	0xbab3baba
   2b724:	babababa 	.word	0xbabababa
   2b728:	babababa 	.word	0xbabababa
   2b72c:	babababa 	.word	0xbabababa
   2b730:	babababa 	.word	0xbabababa
   2b734:	9dba      	.short	0x9dba
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   2b736:	f7e1 fd78 	bl	d22a <sdc_hci_cmd_le_set_event_mask>
   2b73a:	e088      	b.n	2b84e <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   2b73c:	7813      	ldrb	r3, [r2, #0]
   2b73e:	3303      	adds	r3, #3
   2b740:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   2b742:	4608      	mov	r0, r1
   2b744:	f7e1 fd5b 	bl	d1fe <sdc_hci_cmd_le_read_buffer_size>
   2b748:	e081      	b.n	2b84e <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   2b74a:	7813      	ldrb	r3, [r2, #0]
   2b74c:	3308      	adds	r3, #8
   2b74e:	7013      	strb	r3, [r2, #0]
		le_supported_features((void *)event_out_params);
   2b750:	4608      	mov	r0, r1
   2b752:	f7ff ff4a 	bl	2b5ea <le_supported_features>
		return 0;
   2b756:	2000      	movs	r0, #0
   2b758:	e079      	b.n	2b84e <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   2b75a:	f7e1 fd6f 	bl	d23c <sdc_hci_cmd_le_set_random_address>
   2b75e:	e076      	b.n	2b84e <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_set_scan_params((void *)cmd_params);
   2b760:	f7e1 fd70 	bl	d244 <sdc_hci_cmd_le_set_scan_params>
   2b764:	e073      	b.n	2b84e <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_set_scan_enable((void *)cmd_params);
   2b766:	f7e1 fd6b 	bl	d240 <sdc_hci_cmd_le_set_scan_enable>
   2b76a:	e070      	b.n	2b84e <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_create_conn((void *)cmd_params);
   2b76c:	f7e1 fd3d 	bl	d1ea <sdc_hci_cmd_le_create_conn>
   2b770:	e06d      	b.n	2b84e <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_create_conn_cancel();
   2b772:	f7e1 fd3c 	bl	d1ee <sdc_hci_cmd_le_create_conn_cancel>
   2b776:	e06a      	b.n	2b84e <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   2b778:	7813      	ldrb	r3, [r2, #0]
   2b77a:	3301      	adds	r3, #1
   2b77c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   2b77e:	4608      	mov	r0, r1
   2b780:	f7e1 fd41 	bl	d206 <sdc_hci_cmd_le_read_filter_accept_list_size>
   2b784:	e063      	b.n	2b84e <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   2b786:	f7e1 fd2c 	bl	d1e2 <sdc_hci_cmd_le_clear_filter_accept_list>
   2b78a:	e060      	b.n	2b84e <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   2b78c:	f7e1 fd27 	bl	d1de <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   2b790:	e05d      	b.n	2b84e <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   2b792:	f7e1 fd44 	bl	d21e <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   2b796:	e05a      	b.n	2b84e <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_conn_update((void *)cmd_params);
   2b798:	f7e1 fd25 	bl	d1e6 <sdc_hci_cmd_le_conn_update>
   2b79c:	e057      	b.n	2b84e <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_set_host_channel_classification((void *)cmd_params);
   2b79e:	f7e1 fd49 	bl	d234 <sdc_hci_cmd_le_set_host_channel_classification>
   2b7a2:	e054      	b.n	2b84e <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   2b7a4:	7813      	ldrb	r3, [r2, #0]
   2b7a6:	3307      	adds	r3, #7
   2b7a8:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   2b7aa:	f7e1 fd2a 	bl	d202 <sdc_hci_cmd_le_read_channel_map>
   2b7ae:	e04e      	b.n	2b84e <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   2b7b0:	f7e1 fd2f 	bl	d212 <sdc_hci_cmd_le_read_remote_features>
   2b7b4:	e04b      	b.n	2b84e <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   2b7b6:	7813      	ldrb	r3, [r2, #0]
   2b7b8:	3310      	adds	r3, #16
   2b7ba:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   2b7bc:	f7e1 fd1b 	bl	d1f6 <sdc_hci_cmd_le_encrypt>
   2b7c0:	e045      	b.n	2b84e <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   2b7c2:	7813      	ldrb	r3, [r2, #0]
   2b7c4:	3308      	adds	r3, #8
   2b7c6:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   2b7c8:	4608      	mov	r0, r1
   2b7ca:	f7e1 fd16 	bl	d1fa <sdc_hci_cmd_le_rand>
   2b7ce:	e03e      	b.n	2b84e <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_enable_encryption((void *)cmd_params);
   2b7d0:	f7e1 fd0f 	bl	d1f2 <sdc_hci_cmd_le_enable_encryption>
   2b7d4:	e03b      	b.n	2b84e <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   2b7d6:	7813      	ldrb	r3, [r2, #0]
   2b7d8:	3308      	adds	r3, #8
   2b7da:	7013      	strb	r3, [r2, #0]
		le_read_supported_states((void *)event_out_params);
   2b7dc:	4608      	mov	r0, r1
   2b7de:	f7ff fd89 	bl	2b2f4 <le_read_supported_states>
		return 0;
   2b7e2:	2000      	movs	r0, #0
   2b7e4:	e033      	b.n	2b84e <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   2b7e6:	7813      	ldrb	r3, [r2, #0]
   2b7e8:	3302      	adds	r3, #2
   2b7ea:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   2b7ec:	f7e1 fd19 	bl	d222 <sdc_hci_cmd_le_set_data_length>
   2b7f0:	e02d      	b.n	2b84e <le_controller_cmd_put+0x19a>
		*param_length_out +=
   2b7f2:	7813      	ldrb	r3, [r2, #0]
   2b7f4:	3304      	adds	r3, #4
   2b7f6:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   2b7f8:	4608      	mov	r0, r1
   2b7fa:	f7e1 fd0c 	bl	d216 <sdc_hci_cmd_le_read_suggested_default_data_length>
   2b7fe:	e026      	b.n	2b84e <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   2b800:	f7e1 fd22 	bl	d248 <sdc_hci_cmd_le_write_suggested_default_data_length>
   2b804:	e023      	b.n	2b84e <le_controller_cmd_put+0x19a>
		return hci_cmd_le_read_local_p256_public_key();
   2b806:	f7f6 fd7b 	bl	22300 <hci_cmd_le_read_local_p256_public_key>
   2b80a:	e020      	b.n	2b84e <le_controller_cmd_put+0x19a>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   2b80c:	f000 f897 	bl	2b93e <hci_cmd_le_generate_dhkey>
   2b810:	e01d      	b.n	2b84e <le_controller_cmd_put+0x19a>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   2b812:	f000 f899 	bl	2b948 <hci_cmd_le_generate_dhkey_v2>
   2b816:	e01a      	b.n	2b84e <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   2b818:	7813      	ldrb	r3, [r2, #0]
   2b81a:	3308      	adds	r3, #8
   2b81c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   2b81e:	4608      	mov	r0, r1
   2b820:	f7e1 fcf3 	bl	d20a <sdc_hci_cmd_le_read_max_data_length>
   2b824:	e013      	b.n	2b84e <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   2b826:	7813      	ldrb	r3, [r2, #0]
   2b828:	3304      	adds	r3, #4
   2b82a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   2b82c:	f7e1 fcef 	bl	d20e <sdc_hci_cmd_le_read_phy>
   2b830:	e00d      	b.n	2b84e <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   2b832:	f7e1 fcf8 	bl	d226 <sdc_hci_cmd_le_set_default_phy>
   2b836:	e00a      	b.n	2b84e <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   2b838:	f7e1 fcfe 	bl	d238 <sdc_hci_cmd_le_set_phy>
   2b83c:	e007      	b.n	2b84e <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   2b83e:	7813      	ldrb	r3, [r2, #0]
   2b840:	3302      	adds	r3, #2
   2b842:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   2b844:	4608      	mov	r0, r1
   2b846:	f7e1 fce8 	bl	d21a <sdc_hci_cmd_le_read_transmit_power>
   2b84a:	e000      	b.n	2b84e <le_controller_cmd_put+0x19a>
	switch (opcode)	{
   2b84c:	2001      	movs	r0, #1
}
   2b84e:	bd08      	pop	{r3, pc}

0002b850 <vs_cmd_put>:
{
   2b850:	b508      	push	{r3, lr}
   2b852:	4603      	mov	r3, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2b854:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   2b856:	3106      	adds	r1, #6
   2b858:	f893 c001 	ldrb.w	ip, [r3, #1]
   2b85c:	781b      	ldrb	r3, [r3, #0]
   2b85e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
	switch (opcode)	{
   2b862:	f64f 4c0b 	movw	ip, #64523	; 0xfc0b
   2b866:	4563      	cmp	r3, ip
   2b868:	d90f      	bls.n	2b88a <vs_cmd_put+0x3a>
   2b86a:	f64f 5c05 	movw	ip, #64773	; 0xfd05
   2b86e:	4563      	cmp	r3, ip
   2b870:	d863      	bhi.n	2b93a <vs_cmd_put+0xea>
   2b872:	f5b3 4f7d 	cmp.w	r3, #64768	; 0xfd00
   2b876:	d31a      	bcc.n	2b8ae <vs_cmd_put+0x5e>
   2b878:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   2b87c:	2b05      	cmp	r3, #5
   2b87e:	d858      	bhi.n	2b932 <vs_cmd_put+0xe2>
   2b880:	e8df f003 	tbb	[pc, r3]
   2b884:	4e4b4840 	.word	0x4e4b4840
   2b888:	5451      	.short	0x5451
   2b88a:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   2b88e:	d801      	bhi.n	2b894 <vs_cmd_put+0x44>
   2b890:	2001      	movs	r0, #1
}
   2b892:	bd08      	pop	{r3, pc}
	switch (opcode)	{
   2b894:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   2b898:	3b01      	subs	r3, #1
   2b89a:	2b0a      	cmp	r3, #10
   2b89c:	d84b      	bhi.n	2b936 <vs_cmd_put+0xe6>
   2b89e:	e8df f003 	tbb	[pc, r3]
   2b8a2:	0f08      	.short	0x0f08
   2b8a4:	274a4a4a 	.word	0x274a4a4a
   2b8a8:	20174a4a 	.word	0x20174a4a
   2b8ac:	2a          	.byte	0x2a
   2b8ad:	00          	.byte	0x00
   2b8ae:	2001      	movs	r0, #1
   2b8b0:	e7ef      	b.n	2b892 <vs_cmd_put+0x42>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   2b8b2:	7813      	ldrb	r3, [r2, #0]
   2b8b4:	330c      	adds	r3, #12
   2b8b6:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   2b8b8:	4608      	mov	r0, r1
   2b8ba:	f7d5 faa3 	bl	e04 <sdc_hci_cmd_vs_zephyr_read_version_info>
   2b8be:	e7e8      	b.n	2b892 <vs_cmd_put+0x42>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   2b8c0:	7813      	ldrb	r3, [r2, #0]
   2b8c2:	3340      	adds	r3, #64	; 0x40
   2b8c4:	7013      	strb	r3, [r2, #0]
		vs_zephyr_supported_commands((void *)event_out_params);
   2b8c6:	4608      	mov	r0, r1
   2b8c8:	f7ff feb6 	bl	2b638 <vs_zephyr_supported_commands>
		return 0;
   2b8cc:	2000      	movs	r0, #0
   2b8ce:	e7e0      	b.n	2b892 <vs_cmd_put+0x42>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_static_addresses_return_t);
   2b8d0:	7813      	ldrb	r3, [r2, #0]
   2b8d2:	1c58      	adds	r0, r3, #1
   2b8d4:	7010      	strb	r0, [r2, #0]
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   2b8d6:	3317      	adds	r3, #23
   2b8d8:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   2b8da:	4608      	mov	r0, r1
   2b8dc:	f7e1 fc2a 	bl	d134 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   2b8e0:	e7d7      	b.n	2b892 <vs_cmd_put+0x42>
		*param_length_out +=
   2b8e2:	7813      	ldrb	r3, [r2, #0]
   2b8e4:	3320      	adds	r3, #32
   2b8e6:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   2b8e8:	4608      	mov	r0, r1
   2b8ea:	f7e1 fbd6 	bl	d09a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   2b8ee:	e7d0      	b.n	2b892 <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   2b8f0:	f7e1 fc6f 	bl	d1d2 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   2b8f4:	e7cd      	b.n	2b892 <vs_cmd_put+0x42>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   2b8f6:	7813      	ldrb	r3, [r2, #0]
   2b8f8:	3301      	adds	r3, #1
   2b8fa:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   2b8fc:	4608      	mov	r0, r1
   2b8fe:	f7e1 fbb8 	bl	d072 <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   2b902:	e7c6      	b.n	2b892 <vs_cmd_put+0x42>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   2b904:	7813      	ldrb	r3, [r2, #0]
   2b906:	3340      	adds	r3, #64	; 0x40
   2b908:	7013      	strb	r3, [r2, #0]
		vs_supported_commands((void *)event_out_params);
   2b90a:	4608      	mov	r0, r1
   2b90c:	f7ff feb3 	bl	2b676 <vs_supported_commands>
		return 0;
   2b910:	2000      	movs	r0, #0
   2b912:	e7be      	b.n	2b892 <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   2b914:	f7e1 fba6 	bl	d064 <sdc_hci_cmd_vs_llpm_mode_set>
   2b918:	e7bb      	b.n	2b892 <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   2b91a:	f7e1 fb77 	bl	d00c <sdc_hci_cmd_vs_conn_update>
   2b91e:	e7b8      	b.n	2b892 <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   2b920:	f7e1 fb6c 	bl	cffc <sdc_hci_cmd_vs_conn_event_extend>
   2b924:	e7b5      	b.n	2b892 <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   2b926:	f7e1 fb9f 	bl	d068 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   2b92a:	e7b2      	b.n	2b892 <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   2b92c:	f7e1 fb98 	bl	d060 <sdc_hci_cmd_vs_event_length_set>
   2b930:	e7af      	b.n	2b892 <vs_cmd_put+0x42>
	switch (opcode)	{
   2b932:	2001      	movs	r0, #1
   2b934:	e7ad      	b.n	2b892 <vs_cmd_put+0x42>
   2b936:	2001      	movs	r0, #1
   2b938:	e7ab      	b.n	2b892 <vs_cmd_put+0x42>
   2b93a:	2001      	movs	r0, #1
   2b93c:	e7a9      	b.n	2b892 <vs_cmd_put+0x42>

0002b93e <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
   2b93e:	b508      	push	{r3, lr}
	return cmd_le_generate_dhkey(p_params->key,
   2b940:	2100      	movs	r1, #0
   2b942:	f7f6 fcf5 	bl	22330 <cmd_le_generate_dhkey>
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}
   2b946:	bd08      	pop	{r3, pc}

0002b948 <hci_cmd_le_generate_dhkey_v2>:

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   2b948:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   2b94c:	2901      	cmp	r1, #1
   2b94e:	d803      	bhi.n	2b958 <hci_cmd_le_generate_dhkey_v2+0x10>
{
   2b950:	b508      	push	{r3, lr}
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   2b952:	f7f6 fced 	bl	22330 <cmd_le_generate_dhkey>
}
   2b956:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   2b958:	2012      	movs	r0, #18
}
   2b95a:	4770      	bx	lr

0002b95c <m_config_clock_source_get>:
}
   2b95c:	2001      	movs	r0, #1
   2b95e:	4770      	bx	lr

0002b960 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2b960:	4668      	mov	r0, sp
   2b962:	f020 0107 	bic.w	r1, r0, #7
   2b966:	468d      	mov	sp, r1
   2b968:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   2b96a:	f7df fcf7 	bl	b35c <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   2b96e:	f7e9 ff8b 	bl	15888 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   2b972:	f7ea f88d 	bl	15a90 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2b976:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2b97a:	4685      	mov	sp, r0
   2b97c:	4770      	bx	lr

0002b97e <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2b97e:	4668      	mov	r0, sp
   2b980:	f020 0107 	bic.w	r1, r0, #7
   2b984:	468d      	mov	sp, r1
   2b986:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   2b988:	f7df fc5e 	bl	b248 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   2b98c:	f7e9 ff7c 	bl	15888 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2b990:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2b994:	4685      	mov	sp, r0
   2b996:	4770      	bx	lr

0002b998 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2b998:	4668      	mov	r0, sp
   2b99a:	f020 0107 	bic.w	r1, r0, #7
   2b99e:	468d      	mov	sp, r1
   2b9a0:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   2b9a2:	f7dd f993 	bl	8ccc <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   2b9a6:	f7e9 ff6f 	bl	15888 <_arch_isr_direct_pm>
   2b9aa:	f7ea f871 	bl	15a90 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2b9ae:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2b9b2:	4685      	mov	sp, r0
   2b9b4:	4770      	bx	lr

0002b9b6 <mpsl_lib_init_sys>:
{
   2b9b6:	b510      	push	{r4, lr}
	err = mpsl_lib_init_internal();
   2b9b8:	f7f6 fcf2 	bl	223a0 <mpsl_lib_init_internal>
	if (err) {
   2b9bc:	4604      	mov	r4, r0
   2b9be:	b108      	cbz	r0, 2b9c4 <mpsl_lib_init_sys+0xe>
}
   2b9c0:	4620      	mov	r0, r4
   2b9c2:	bd10      	pop	{r4, pc}
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   2b9c4:	2201      	movs	r2, #1
   2b9c6:	2100      	movs	r1, #0
   2b9c8:	2008      	movs	r0, #8
   2b9ca:	f7fb fcb5 	bl	27338 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   2b9ce:	2201      	movs	r2, #1
   2b9d0:	2100      	movs	r1, #0
   2b9d2:	200b      	movs	r0, #11
   2b9d4:	f7fb fcb0 	bl	27338 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   2b9d8:	2201      	movs	r2, #1
   2b9da:	2100      	movs	r1, #0
   2b9dc:	4610      	mov	r0, r2
   2b9de:	f7fb fcab 	bl	27338 <z_arm_irq_priority_set>
	return 0;
   2b9e2:	e7ed      	b.n	2b9c0 <mpsl_lib_init_sys+0xa>

0002b9e4 <mpsl_low_prio_work_handler>:
{
   2b9e4:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2b9e6:	f04f 30ff 	mov.w	r0, #4294967295
   2b9ea:	f04f 31ff 	mov.w	r1, #4294967295
   2b9ee:	f7f5 fdf3 	bl	215d8 <multithreading_lock_acquire>
	mpsl_low_priority_process();
   2b9f2:	f7e4 fd68 	bl	104c6 <mpsl_low_priority_process>
	MULTITHREADING_LOCK_RELEASE();
   2b9f6:	f7f5 fdf9 	bl	215ec <multithreading_lock_release>
}
   2b9fa:	bd08      	pop	{r3, pc}

0002b9fc <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(const struct device *dev)
{
   2b9fc:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	mpsl_fem_init();
   2b9fe:	f7e4 ff3b 	bl	10878 <mpsl_fem_init>

	return 0;
}
   2ba02:	2000      	movs	r0, #0
   2ba04:	bd08      	pop	{r3, pc}

0002ba06 <nrfx_clock_stop>:
	switch (domain) {
   2ba06:	2801      	cmp	r0, #1
   2ba08:	d000      	beq.n	2ba0c <nrfx_clock_stop+0x6>
   2ba0a:	4770      	bx	lr
{
   2ba0c:	b508      	push	{r3, lr}
		mpsl_clock_hfclk_release();
   2ba0e:	f7e0 fb39 	bl	c084 <mpsl_clock_hfclk_release>
}
   2ba12:	bd08      	pop	{r3, pc}

0002ba14 <nrfx_clock_enable>:
}
   2ba14:	4770      	bx	lr

0002ba16 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
   2ba16:	b508      	push	{r3, lr}
	MPSL_IRQ_CLOCK_Handler();
   2ba18:	f7e0 f93e 	bl	bc98 <MPSL_IRQ_CLOCK_Handler>
}
   2ba1c:	bd08      	pop	{r3, pc}

0002ba1e <nrf52_errata_36>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2ba1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2ba22:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   2ba26:	2b0d      	cmp	r3, #13
   2ba28:	d001      	beq.n	2ba2e <nrf52_errata_36+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   2ba2a:	2000      	movs	r0, #0
   2ba2c:	4770      	bx	lr
                        return true;
   2ba2e:	2001      	movs	r0, #1
    #endif
}
   2ba30:	4770      	bx	lr

0002ba32 <nrf52_errata_66>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2ba32:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2ba36:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   2ba3a:	2b0d      	cmp	r3, #13
   2ba3c:	d001      	beq.n	2ba42 <nrf52_errata_66+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   2ba3e:	2000      	movs	r0, #0
   2ba40:	4770      	bx	lr
                        return true;
   2ba42:	2001      	movs	r0, #1
    #endif
}
   2ba44:	4770      	bx	lr

0002ba46 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2ba46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2ba4a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   2ba4e:	2b0d      	cmp	r3, #13
   2ba50:	d001      	beq.n	2ba56 <nrf52_errata_136+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   2ba52:	2000      	movs	r0, #0
   2ba54:	4770      	bx	lr
                        return true;
   2ba56:	2001      	movs	r0, #1
    #endif
}
   2ba58:	4770      	bx	lr

0002ba5a <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2ba5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2ba5e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2ba62:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   2ba66:	2a0d      	cmp	r2, #13
   2ba68:	d001      	beq.n	2ba6e <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   2ba6a:	2000      	movs	r0, #0
   2ba6c:	4770      	bx	lr
                switch(var2)
   2ba6e:	b10b      	cbz	r3, 2ba74 <nrf52_configuration_249+0x1a>
                        return true;
   2ba70:	2001      	movs	r0, #1
    #endif
}
   2ba72:	4770      	bx	lr
                switch(var2)
   2ba74:	2000      	movs	r0, #0
   2ba76:	4770      	bx	lr

0002ba78 <nrf52_handle_approtect>:
        Otherwise, the fw branch state is loaded from UICR, emulating the legacy APPROTECT behavior.

         The same mechanism is implemented for SECURE APPROTECT, with the macros
         ENABLE_SECURE_APPROTECT and ENABLE_SECURE_APPROTECT_USER_HANDLING. */
static inline void nrf52_handle_approtect(void)
{
   2ba78:	b508      	push	{r3, lr}
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   2ba7a:	f7ff ffee 	bl	2ba5a <nrf52_configuration_249>
   2ba7e:	b138      	cbz	r0, 2ba90 <nrf52_handle_approtect+0x18>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   2ba80:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2ba84:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   2ba88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2ba8c:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            }
        #endif
    #endif
}
   2ba90:	bd08      	pop	{r3, pc}

0002ba92 <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
   2ba92:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   2ba94:	4780      	blx	r0
}
   2ba96:	bd08      	pop	{r3, pc}

0002ba98 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   2ba98:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   2ba9a:	f000 feec 	bl	2c876 <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
   2ba9e:	bd08      	pop	{r3, pc}

0002baa0 <nrf_gpiote_event_configure>:
{
   2baa0:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   2baa2:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   2baa6:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   2baaa:	f424 344f 	bic.w	r4, r4, #211968	; 0x33c00
   2baae:	f424 7440 	bic.w	r4, r4, #768	; 0x300
   2bab2:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2bab6:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   2baba:	0212      	lsls	r2, r2, #8
   2babc:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   2bac0:	041b      	lsls	r3, r3, #16
   2bac2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2bac6:	431a      	orrs	r2, r3
   2bac8:	4314      	orrs	r4, r2
   2baca:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   2bace:	bc10      	pop	{r4}
   2bad0:	4770      	bx	lr

0002bad2 <nrf_gpiote_task_configure>:
{
   2bad2:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   2bad4:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   2bad8:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   2badc:	f424 1499 	bic.w	r4, r4, #1253376	; 0x132000
   2bae0:	f424 54f8 	bic.w	r4, r4, #7936	; 0x1f00
   2bae4:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2bae8:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   2baec:	0212      	lsls	r2, r2, #8
   2baee:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   2baf2:	041b      	lsls	r3, r3, #16
   2baf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2baf8:	431a      	orrs	r2, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   2bafa:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2bafe:	051b      	lsls	r3, r3, #20
   2bb00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   2bb04:	431a      	orrs	r2, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2bb06:	4314      	orrs	r4, r2
   2bb08:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   2bb0c:	bc10      	pop	{r4}
   2bb0e:	4770      	bx	lr

0002bb10 <nrf_gpio_cfg_sense_set>:
{
   2bb10:	b500      	push	{lr}
   2bb12:	b085      	sub	sp, #20
   2bb14:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2bb18:	f10d 030f 	add.w	r3, sp, #15
   2bb1c:	9301      	str	r3, [sp, #4]
   2bb1e:	2100      	movs	r1, #0
   2bb20:	9100      	str	r1, [sp, #0]
   2bb22:	460b      	mov	r3, r1
   2bb24:	460a      	mov	r2, r1
   2bb26:	f7f6 fe1b 	bl	22760 <nrf_gpio_reconfigure>
}
   2bb2a:	b005      	add	sp, #20
   2bb2c:	f85d fb04 	ldr.w	pc, [sp], #4

0002bb30 <pin_is_task_output>:
{
   2bb30:	b510      	push	{r4, lr}
   2bb32:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2bb34:	f7f6 feb2 	bl	2289c <pin_is_output>
   2bb38:	b128      	cbz	r0, 2bb46 <pin_is_task_output+0x16>
   2bb3a:	4620      	mov	r0, r4
   2bb3c:	f7f6 fe98 	bl	22870 <pin_in_use_by_te>
   2bb40:	b118      	cbz	r0, 2bb4a <pin_is_task_output+0x1a>
   2bb42:	2001      	movs	r0, #1
   2bb44:	e000      	b.n	2bb48 <pin_is_task_output+0x18>
   2bb46:	2000      	movs	r0, #0
}
   2bb48:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2bb4a:	2000      	movs	r0, #0
   2bb4c:	e7fc      	b.n	2bb48 <pin_is_task_output+0x18>

0002bb4e <pin_is_input>:
{
   2bb4e:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   2bb50:	f7f6 fea4 	bl	2289c <pin_is_output>
   2bb54:	f080 0001 	eor.w	r0, r0, #1
}
   2bb58:	b2c0      	uxtb	r0, r0
   2bb5a:	bd08      	pop	{r3, pc}

0002bb5c <gpiote_polarity_to_trigger>:
}
   2bb5c:	4770      	bx	lr

0002bb5e <gpiote_trigger_to_polarity>:
}
   2bb5e:	4770      	bx	lr

0002bb60 <is_level>:
}
   2bb60:	2803      	cmp	r0, #3
   2bb62:	bf94      	ite	ls
   2bb64:	2000      	movls	r0, #0
   2bb66:	2001      	movhi	r0, #1
   2bb68:	4770      	bx	lr

0002bb6a <latch_pending_read_and_check>:
{
   2bb6a:	b510      	push	{r4, lr}
   2bb6c:	4604      	mov	r4, r0
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
   2bb6e:	4602      	mov	r2, r0
   2bb70:	2102      	movs	r1, #2
   2bb72:	2000      	movs	r0, #0
   2bb74:	f7f6 fe50 	bl	22818 <nrf_gpio_latches_read_and_clear>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   2bb78:	2300      	movs	r3, #0
   2bb7a:	2b01      	cmp	r3, #1
   2bb7c:	d804      	bhi.n	2bb88 <latch_pending_read_and_check+0x1e>
        if (latch[port_idx])
   2bb7e:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   2bb82:	b91a      	cbnz	r2, 2bb8c <latch_pending_read_and_check+0x22>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   2bb84:	3301      	adds	r3, #1
   2bb86:	e7f8      	b.n	2bb7a <latch_pending_read_and_check+0x10>
    return false;
   2bb88:	2000      	movs	r0, #0
}
   2bb8a:	bd10      	pop	{r4, pc}
            return true;
   2bb8c:	2001      	movs	r0, #1
   2bb8e:	e7fc      	b.n	2bb8a <latch_pending_read_and_check+0x20>

0002bb90 <nrf_spi_configure>:
NRF_STATIC_INLINE void nrf_spi_configure(NRF_SPI_Type *      p_reg,
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
   2bb90:	3a00      	subs	r2, #0
   2bb92:	bf18      	it	ne
   2bb94:	2201      	movne	r2, #1
    switch (spi_mode)
   2bb96:	2902      	cmp	r1, #2
   2bb98:	d009      	beq.n	2bbae <nrf_spi_configure+0x1e>
   2bb9a:	2903      	cmp	r1, #3
   2bb9c:	d00a      	beq.n	2bbb4 <nrf_spi_configure+0x24>
   2bb9e:	2901      	cmp	r1, #1
   2bba0:	d002      	beq.n	2bba8 <nrf_spi_configure+0x18>
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   2bba2:	f8c0 2554 	str.w	r2, [r0, #1364]	; 0x554
}
   2bba6:	4770      	bx	lr
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   2bba8:	f042 0202 	orr.w	r2, r2, #2
        break;
   2bbac:	e7f9      	b.n	2bba2 <nrf_spi_configure+0x12>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   2bbae:	f042 0204 	orr.w	r2, r2, #4
        break;
   2bbb2:	e7f6      	b.n	2bba2 <nrf_spi_configure+0x12>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   2bbb4:	f042 0206 	orr.w	r2, r2, #6
        break;
   2bbb8:	e7f3      	b.n	2bba2 <nrf_spi_configure+0x12>

0002bbba <transfer_byte>:
{
   2bbba:	b430      	push	{r4, r5}
   2bbbc:	b082      	sub	sp, #8
    return p_reg->RXD;
   2bbbe:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
   2bbc2:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   2bbc4:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   2bbc8:	6a0b      	ldr	r3, [r1, #32]
   2bbca:	698a      	ldr	r2, [r1, #24]
   2bbcc:	4293      	cmp	r3, r2
   2bbce:	d203      	bcs.n	2bbd8 <transfer_byte+0x1e>
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   2bbd0:	694a      	ldr	r2, [r1, #20]
   2bbd2:	f89d 4007 	ldrb.w	r4, [sp, #7]
   2bbd6:	54d4      	strb	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   2bbd8:	6a0b      	ldr	r3, [r1, #32]
   2bbda:	1c5a      	adds	r2, r3, #1
   2bbdc:	620a      	str	r2, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
   2bbde:	3302      	adds	r3, #2
    if (p_cb->abort)
   2bbe0:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   2bbe4:	b13c      	cbz	r4, 2bbf6 <transfer_byte+0x3c>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   2bbe6:	690c      	ldr	r4, [r1, #16]
   2bbe8:	429c      	cmp	r4, r3
   2bbea:	d900      	bls.n	2bbee <transfer_byte+0x34>
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   2bbec:	610b      	str	r3, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   2bbee:	698c      	ldr	r4, [r1, #24]
   2bbf0:	429c      	cmp	r4, r3
   2bbf2:	d900      	bls.n	2bbf6 <transfer_byte+0x3c>
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   2bbf4:	618b      	str	r3, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   2bbf6:	690c      	ldr	r4, [r1, #16]
   2bbf8:	429c      	cmp	r4, r3
   2bbfa:	d808      	bhi.n	2bc0e <transfer_byte+0x54>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   2bbfc:	698d      	ldr	r5, [r1, #24]
   2bbfe:	429d      	cmp	r5, r3
   2bc00:	d80d      	bhi.n	2bc1e <transfer_byte+0x64>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   2bc02:	42a2      	cmp	r2, r4
   2bc04:	d310      	bcc.n	2bc28 <transfer_byte+0x6e>
   2bc06:	42aa      	cmp	r2, r5
   2bc08:	d210      	bcs.n	2bc2c <transfer_byte+0x72>
   2bc0a:	2001      	movs	r0, #1
   2bc0c:	e004      	b.n	2bc18 <transfer_byte+0x5e>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   2bc0e:	68ca      	ldr	r2, [r1, #12]
   2bc10:	5cd3      	ldrb	r3, [r2, r3]
    p_reg->TXD = data;
   2bc12:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
        return true;
   2bc16:	2001      	movs	r0, #1
}
   2bc18:	b002      	add	sp, #8
   2bc1a:	bc30      	pop	{r4, r5}
   2bc1c:	4770      	bx	lr
        nrf_spi_txd_set(p_spi, p_cb->orc);
   2bc1e:	7fcb      	ldrb	r3, [r1, #31]
   2bc20:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
        return true;
   2bc24:	2001      	movs	r0, #1
   2bc26:	e7f7      	b.n	2bc18 <transfer_byte+0x5e>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   2bc28:	2001      	movs	r0, #1
   2bc2a:	e7f5      	b.n	2bc18 <transfer_byte+0x5e>
   2bc2c:	2000      	movs	r0, #0
   2bc2e:	e7f3      	b.n	2bc18 <transfer_byte+0x5e>

0002bc30 <irq_handler>:
{
   2bc30:	b510      	push	{r4, lr}
   2bc32:	460c      	mov	r4, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2bc34:	2200      	movs	r2, #0
   2bc36:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
   2bc3a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    if (!transfer_byte(p_spi, p_cb))
   2bc3e:	f7ff ffbc 	bl	2bbba <transfer_byte>
   2bc42:	b100      	cbz	r0, 2bc46 <irq_handler+0x16>
}
   2bc44:	bd10      	pop	{r4, pc}
        finish_transfer(p_cb);
   2bc46:	4620      	mov	r0, r4
   2bc48:	f7f7 fa98 	bl	2317c <finish_transfer>
}
   2bc4c:	e7fa      	b.n	2bc44 <irq_handler+0x14>

0002bc4e <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   2bc4e:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   2bc50:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   2bc52:	4293      	cmp	r3, r2
   2bc54:	d804      	bhi.n	2bc60 <_GetAvailWriteSpace+0x12>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   2bc56:	6881      	ldr	r1, [r0, #8]
   2bc58:	1a8a      	subs	r2, r1, r2
   2bc5a:	4413      	add	r3, r2
   2bc5c:	1e58      	subs	r0, r3, #1
   2bc5e:	4770      	bx	lr
    r = RdOff - WrOff - 1u;
   2bc60:	1a98      	subs	r0, r3, r2
   2bc62:	3801      	subs	r0, #1
}
   2bc64:	4770      	bx	lr

0002bc66 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   2bc66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2bc6a:	4604      	mov	r4, r0
   2bc6c:	4688      	mov	r8, r1
   2bc6e:	4616      	mov	r6, r2
  WrOff = pRing->WrOff;
   2bc70:	68c5      	ldr	r5, [r0, #12]
  Rem = pRing->SizeOfBuffer - WrOff;
   2bc72:	6887      	ldr	r7, [r0, #8]
   2bc74:	eba7 0905 	sub.w	r9, r7, r5
  if (Rem > NumBytes) {
   2bc78:	4591      	cmp	r9, r2
   2bc7a:	d907      	bls.n	2bc8c <_WriteNoCheck+0x26>
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2bc7c:	6840      	ldr	r0, [r0, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
   2bc7e:	4428      	add	r0, r5
   2bc80:	f7fb fc24 	bl	274cc <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   2bc84:	4435      	add	r5, r6
   2bc86:	60e5      	str	r5, [r4, #12]
}
   2bc88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2bc8c:	6840      	ldr	r0, [r0, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   2bc8e:	464a      	mov	r2, r9
   2bc90:	4428      	add	r0, r5
   2bc92:	f7fb fc1b 	bl	274cc <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
   2bc96:	1bed      	subs	r5, r5, r7
   2bc98:	4435      	add	r5, r6
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   2bc9a:	462a      	mov	r2, r5
   2bc9c:	eb08 0109 	add.w	r1, r8, r9
   2bca0:	6860      	ldr	r0, [r4, #4]
   2bca2:	f7fb fc13 	bl	274cc <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   2bca6:	60e5      	str	r5, [r4, #12]
}
   2bca8:	e7ee      	b.n	2bc88 <_WriteNoCheck+0x22>

0002bcaa <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   2bcaa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2bcae:	4606      	mov	r6, r0
   2bcb0:	4688      	mov	r8, r1
   2bcb2:	4617      	mov	r7, r2
  WrOff = pRing->WrOff;
   2bcb4:	68c5      	ldr	r5, [r0, #12]
  NumBytesWritten = 0u;
   2bcb6:	f04f 0900 	mov.w	r9, #0
   2bcba:	e018      	b.n	2bcee <_WriteBlocking+0x44>
      NumBytesToWrite = RdOff - WrOff - 1u;
   2bcbc:	1b5b      	subs	r3, r3, r5
   2bcbe:	1e5a      	subs	r2, r3, #1
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   2bcc0:	68b3      	ldr	r3, [r6, #8]
   2bcc2:	1b5c      	subs	r4, r3, r5
   2bcc4:	4294      	cmp	r4, r2
   2bcc6:	bf28      	it	cs
   2bcc8:	4614      	movcs	r4, r2
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   2bcca:	42bc      	cmp	r4, r7
   2bccc:	bf28      	it	cs
   2bcce:	463c      	movcs	r4, r7
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2bcd0:	6870      	ldr	r0, [r6, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
   2bcd2:	4622      	mov	r2, r4
   2bcd4:	4641      	mov	r1, r8
   2bcd6:	4428      	add	r0, r5
   2bcd8:	f7fb fbf8 	bl	274cc <memcpy>
    NumBytesWritten += NumBytesToWrite;
   2bcdc:	44a1      	add	r9, r4
    pBuffer         += NumBytesToWrite;
   2bcde:	44a0      	add	r8, r4
    NumBytes        -= NumBytesToWrite;
   2bce0:	1b3f      	subs	r7, r7, r4
    WrOff           += NumBytesToWrite;
   2bce2:	4425      	add	r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
   2bce4:	68b3      	ldr	r3, [r6, #8]
   2bce6:	42ab      	cmp	r3, r5
   2bce8:	d009      	beq.n	2bcfe <_WriteBlocking+0x54>
    pRing->WrOff = WrOff;
   2bcea:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   2bcec:	b14f      	cbz	r7, 2bd02 <_WriteBlocking+0x58>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   2bcee:	6933      	ldr	r3, [r6, #16]
    if (RdOff > WrOff) {
   2bcf0:	429d      	cmp	r5, r3
   2bcf2:	d3e3      	bcc.n	2bcbc <_WriteBlocking+0x12>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   2bcf4:	68b2      	ldr	r2, [r6, #8]
   2bcf6:	1b5b      	subs	r3, r3, r5
   2bcf8:	441a      	add	r2, r3
   2bcfa:	3a01      	subs	r2, #1
   2bcfc:	e7e0      	b.n	2bcc0 <_WriteBlocking+0x16>
      WrOff = 0u;
   2bcfe:	2500      	movs	r5, #0
   2bd00:	e7f3      	b.n	2bcea <_WriteBlocking+0x40>
}
   2bd02:	4648      	mov	r0, r9
   2bd04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002bd08 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   2bd08:	b508      	push	{r3, lr}
  _DoInit();
   2bd0a:	f7f7 fbbb 	bl	23484 <_DoInit>
}
   2bd0e:	bd08      	pop	{r3, pc}

0002bd10 <rtt_init>:
{
   2bd10:	b508      	push	{r3, lr}
	SEGGER_RTT_Init();
   2bd12:	f7ff fff9 	bl	2bd08 <SEGGER_RTT_Init>
}
   2bd16:	2000      	movs	r0, #0
   2bd18:	bd08      	pop	{r3, pc}

0002bd1a <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2bd1a:	b160      	cbz	r0, 2bd36 <z_device_is_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2bd1c:	68c3      	ldr	r3, [r0, #12]
   2bd1e:	785a      	ldrb	r2, [r3, #1]
   2bd20:	f012 0f01 	tst.w	r2, #1
   2bd24:	d003      	beq.n	2bd2e <z_device_is_ready+0x14>
   2bd26:	781b      	ldrb	r3, [r3, #0]
   2bd28:	b11b      	cbz	r3, 2bd32 <z_device_is_ready+0x18>
   2bd2a:	2000      	movs	r0, #0
   2bd2c:	4770      	bx	lr
   2bd2e:	2000      	movs	r0, #0
   2bd30:	4770      	bx	lr
   2bd32:	2001      	movs	r0, #1
   2bd34:	4770      	bx	lr
		return false;
   2bd36:	2000      	movs	r0, #0
}
   2bd38:	4770      	bx	lr

0002bd3a <z_early_memset>:
{
   2bd3a:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
   2bd3c:	f7fb fbf5 	bl	2752a <memset>
}
   2bd40:	bd08      	pop	{r3, pc}

0002bd42 <z_early_memcpy>:
{
   2bd42:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
   2bd44:	f7fb fbc2 	bl	274cc <memcpy>
}
   2bd48:	bd08      	pop	{r3, pc}

0002bd4a <k_heap_init>:
{
   2bd4a:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   2bd4c:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   2bd50:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   2bd52:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   2bd54:	f7fa f861 	bl	25e1a <sys_heap_init>
}
   2bd58:	bd10      	pop	{r4, pc}

0002bd5a <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2bd5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bd5e:	b085      	sub	sp, #20
   2bd60:	4607      	mov	r7, r0
   2bd62:	9103      	str	r1, [sp, #12]
   2bd64:	4692      	mov	sl, r2
   2bd66:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   2bd68:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2bd6a:	4628      	mov	r0, r5
   2bd6c:	4621      	mov	r1, r4
   2bd6e:	f000 fd88 	bl	2c882 <sys_clock_timeout_end_calc>
   2bd72:	4606      	mov	r6, r0
   2bd74:	4689      	mov	r9, r1
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   2bd76:	f1b4 3fff 	cmp.w	r4, #4294967295
   2bd7a:	bf08      	it	eq
   2bd7c:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   2bd80:	d00d      	beq.n	2bd9e <k_heap_aligned_alloc+0x44>

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2bd82:	f107 0b14 	add.w	fp, r7, #20
	__asm__ volatile(
   2bd86:	f04f 0340 	mov.w	r3, #64	; 0x40
   2bd8a:	f3ef 8511 	mrs	r5, BASEPRI
   2bd8e:	f383 8812 	msr	BASEPRI_MAX, r3
   2bd92:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   2bd96:	f04f 0800 	mov.w	r8, #0
	void *ret = NULL;
   2bd9a:	4644      	mov	r4, r8

	while (ret == NULL) {
   2bd9c:	e014      	b.n	2bdc8 <k_heap_aligned_alloc+0x6e>
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   2bd9e:	f04f 36ff 	mov.w	r6, #4294967295
   2bda2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   2bda6:	e7ec      	b.n	2bd82 <k_heap_aligned_alloc+0x28>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2bda8:	9000      	str	r0, [sp, #0]
   2bdaa:	9101      	str	r1, [sp, #4]
   2bdac:	f107 020c 	add.w	r2, r7, #12
   2bdb0:	4629      	mov	r1, r5
   2bdb2:	4658      	mov	r0, fp
   2bdb4:	f7f8 fce8 	bl	24788 <z_pend_curr>
   2bdb8:	f04f 0340 	mov.w	r3, #64	; 0x40
   2bdbc:	f3ef 8511 	mrs	r5, BASEPRI
   2bdc0:	f383 8812 	msr	BASEPRI_MAX, r3
   2bdc4:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   2bdc8:	b9ac      	cbnz	r4, 2bdf6 <k_heap_aligned_alloc+0x9c>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2bdca:	4652      	mov	r2, sl
   2bdcc:	9903      	ldr	r1, [sp, #12]
   2bdce:	4638      	mov	r0, r7
   2bdd0:	f7f9 ffad 	bl	25d2e <sys_heap_aligned_alloc>
   2bdd4:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   2bdd6:	f7f9 f87b 	bl	24ed0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   2bdda:	b964      	cbnz	r4, 2bdf6 <k_heap_aligned_alloc+0x9c>
		    (ret != NULL) || ((end - now) <= 0)) {
   2bddc:	1a30      	subs	r0, r6, r0
   2bdde:	eb69 0101 	sbc.w	r1, r9, r1
   2bde2:	2801      	cmp	r0, #1
   2bde4:	f171 0300 	sbcs.w	r3, r1, #0
   2bde8:	db05      	blt.n	2bdf6 <k_heap_aligned_alloc+0x9c>
		if (!blocked_alloc) {
   2bdea:	f1b8 0f00 	cmp.w	r8, #0
   2bdee:	d1db      	bne.n	2bda8 <k_heap_aligned_alloc+0x4e>
			blocked_alloc = true;
   2bdf0:	f04f 0801 	mov.w	r8, #1
   2bdf4:	e7d8      	b.n	2bda8 <k_heap_aligned_alloc+0x4e>
	__asm__ volatile(
   2bdf6:	f385 8811 	msr	BASEPRI, r5
   2bdfa:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2bdfe:	4620      	mov	r0, r4
   2be00:	b005      	add	sp, #20
   2be02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002be06 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   2be06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2be08:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2be0a:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
   2be0e:	f04f 0340 	mov.w	r3, #64	; 0x40
   2be12:	f3ef 8511 	mrs	r5, BASEPRI
   2be16:	f383 8812 	msr	BASEPRI_MAX, r3
   2be1a:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   2be1e:	f7f9 ff42 	bl	25ca6 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   2be22:	f104 000c 	add.w	r0, r4, #12
   2be26:	f000 fc65 	bl	2c6f4 <z_unpend_all>
   2be2a:	b920      	cbnz	r0, 2be36 <k_heap_free+0x30>
	__asm__ volatile(
   2be2c:	f385 8811 	msr	BASEPRI, r5
   2be30:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2be34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		z_reschedule(&h->lock, key);
   2be36:	4629      	mov	r1, r5
   2be38:	4638      	mov	r0, r7
   2be3a:	f7f8 fb41 	bl	244c0 <z_reschedule>
   2be3e:	e7f9      	b.n	2be34 <k_heap_free+0x2e>

0002be40 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2be40:	68c2      	ldr	r2, [r0, #12]
   2be42:	6903      	ldr	r3, [r0, #16]
   2be44:	431a      	orrs	r2, r3
   2be46:	f012 0203 	ands.w	r2, r2, #3
   2be4a:	d10d      	bne.n	2be68 <create_free_list+0x28>
	slab->free_list = NULL;
   2be4c:	2100      	movs	r1, #0
   2be4e:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2be50:	e005      	b.n	2be5e <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   2be52:	6941      	ldr	r1, [r0, #20]
   2be54:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   2be56:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   2be58:	68c1      	ldr	r1, [r0, #12]
   2be5a:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   2be5c:	3201      	adds	r2, #1
   2be5e:	6881      	ldr	r1, [r0, #8]
   2be60:	4291      	cmp	r1, r2
   2be62:	d8f6      	bhi.n	2be52 <create_free_list+0x12>
	return 0;
   2be64:	2000      	movs	r0, #0
   2be66:	4770      	bx	lr
		return -EINVAL;
   2be68:	f06f 0015 	mvn.w	r0, #21
}
   2be6c:	4770      	bx	lr

0002be6e <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   2be6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2be72:	4604      	mov	r4, r0
   2be74:	460d      	mov	r5, r1
	__asm__ volatile(
   2be76:	f04f 0340 	mov.w	r3, #64	; 0x40
   2be7a:	f3ef 8611 	mrs	r6, BASEPRI
   2be7e:	f383 8812 	msr	BASEPRI_MAX, r3
   2be82:	f3bf 8f6f 	isb	sy
   2be86:	4637      	mov	r7, r6
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   2be88:	6943      	ldr	r3, [r0, #20]
   2be8a:	b16b      	cbz	r3, 2bea8 <k_mem_slab_free+0x3a>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   2be8c:	682b      	ldr	r3, [r5, #0]
   2be8e:	6962      	ldr	r2, [r4, #20]
   2be90:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   2be92:	682b      	ldr	r3, [r5, #0]
   2be94:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   2be96:	69a3      	ldr	r3, [r4, #24]
   2be98:	3b01      	subs	r3, #1
   2be9a:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   2be9c:	f387 8811 	msr	BASEPRI, r7
   2bea0:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   2bea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2bea8:	f100 0808 	add.w	r8, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2beac:	f000 fc00 	bl	2c6b0 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   2beb0:	2800      	cmp	r0, #0
   2beb2:	d0eb      	beq.n	2be8c <k_mem_slab_free+0x1e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   2beb4:	682a      	ldr	r2, [r5, #0]
   2beb6:	2100      	movs	r1, #0
   2beb8:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2bebc:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   2bebe:	f000 fb42 	bl	2c546 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   2bec2:	4631      	mov	r1, r6
   2bec4:	4640      	mov	r0, r8
   2bec6:	f7f8 fafb 	bl	244c0 <z_reschedule>
			return;
   2beca:	e7eb      	b.n	2bea4 <k_mem_slab_free+0x36>

0002becc <setup_thread_stack>:
{
   2becc:	b410      	push	{r4}
   2bece:	4603      	mov	r3, r0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2bed0:	3207      	adds	r2, #7
   2bed2:	f022 0207 	bic.w	r2, r2, #7
   2bed6:	f102 0040 	add.w	r0, r2, #64	; 0x40

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   2beda:	f101 0440 	add.w	r4, r1, #64	; 0x40
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   2bede:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   2bee2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   2bee6:	2200      	movs	r2, #0
   2bee8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
   2beec:	4408      	add	r0, r1
   2beee:	bc10      	pop	{r4}
   2bef0:	4770      	bx	lr

0002bef2 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2bef2:	f3ef 8005 	mrs	r0, IPSR
}
   2bef6:	3800      	subs	r0, #0
   2bef8:	bf18      	it	ne
   2befa:	2001      	movne	r0, #1
   2befc:	4770      	bx	lr

0002befe <k_thread_name_get>:
}
   2befe:	3078      	adds	r0, #120	; 0x78
   2bf00:	4770      	bx	lr

0002bf02 <z_impl_k_thread_start>:
{
   2bf02:	b508      	push	{r3, lr}
	z_sched_start(thread);
   2bf04:	f7f8 fc06 	bl	24714 <z_sched_start>
}
   2bf08:	bd08      	pop	{r3, pc}

0002bf0a <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   2bf0a:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   2bf0c:	2400      	movs	r4, #0
   2bf0e:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   2bf10:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   2bf12:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   2bf14:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   2bf16:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   2bf18:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   2bf1a:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   2bf1c:	bc10      	pop	{r4}
   2bf1e:	4770      	bx	lr

0002bf20 <z_impl_k_thread_create>:
{
   2bf20:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bf22:	b087      	sub	sp, #28
   2bf24:	4604      	mov	r4, r0
   2bf26:	9e12      	ldr	r6, [sp, #72]	; 0x48
   2bf28:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2bf2a:	2700      	movs	r7, #0
   2bf2c:	9705      	str	r7, [sp, #20]
   2bf2e:	9f10      	ldr	r7, [sp, #64]	; 0x40
   2bf30:	9704      	str	r7, [sp, #16]
   2bf32:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   2bf34:	9703      	str	r7, [sp, #12]
   2bf36:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   2bf38:	9702      	str	r7, [sp, #8]
   2bf3a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   2bf3c:	9701      	str	r7, [sp, #4]
   2bf3e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2bf40:	9700      	str	r7, [sp, #0]
   2bf42:	f7f7 fe9d 	bl	23c80 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   2bf46:	f1b5 3fff 	cmp.w	r5, #4294967295
   2bf4a:	bf08      	it	eq
   2bf4c:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   2bf50:	d102      	bne.n	2bf58 <z_impl_k_thread_create+0x38>
}
   2bf52:	4620      	mov	r0, r4
   2bf54:	b007      	add	sp, #28
   2bf56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   2bf58:	4632      	mov	r2, r6
   2bf5a:	462b      	mov	r3, r5
   2bf5c:	4620      	mov	r0, r4
   2bf5e:	f7f7 fe81 	bl	23c64 <schedule_new_thread>
   2bf62:	e7f6      	b.n	2bf52 <z_impl_k_thread_create+0x32>

0002bf64 <z_pm_save_idle_exit>:
{
   2bf64:	b508      	push	{r3, lr}
	pm_system_resume();
   2bf66:	f7e9 f951 	bl	1520c <pm_system_resume>
	sys_clock_idle_exit();
   2bf6a:	f7ff f8ec 	bl	2b146 <sys_clock_idle_exit>
}
   2bf6e:	bd08      	pop	{r3, pc}

0002bf70 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   2bf70:	4288      	cmp	r0, r1
   2bf72:	da00      	bge.n	2bf76 <new_prio_for_inheritance+0x6>
   2bf74:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   2bf76:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   2bf7a:	db01      	blt.n	2bf80 <new_prio_for_inheritance+0x10>
   2bf7c:	4608      	mov	r0, r1
   2bf7e:	4770      	bx	lr
   2bf80:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   2bf84:	4770      	bx	lr

0002bf86 <adjust_owner_prio>:
{
   2bf86:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   2bf88:	6880      	ldr	r0, [r0, #8]
   2bf8a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2bf8e:	428b      	cmp	r3, r1
   2bf90:	d101      	bne.n	2bf96 <adjust_owner_prio+0x10>
	return false;
   2bf92:	2000      	movs	r0, #0
}
   2bf94:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   2bf96:	f7f8 fc13 	bl	247c0 <z_set_prio>
   2bf9a:	e7fb      	b.n	2bf94 <adjust_owner_prio+0xe>

0002bf9c <z_impl_k_mutex_init>:
{
   2bf9c:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2bf9e:	2000      	movs	r0, #0
   2bfa0:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   2bfa2:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   2bfa4:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   2bfa6:	605b      	str	r3, [r3, #4]
}
   2bfa8:	4770      	bx	lr

0002bfaa <sys_sflist_append>:
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2bfaa:	680b      	ldr	r3, [r1, #0]
   2bfac:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2bfb0:	600b      	str	r3, [r1, #0]
	return list->tail;
   2bfb2:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2bfb4:	b132      	cbz	r2, 2bfc4 <sys_sflist_append+0x1a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2bfb6:	6813      	ldr	r3, [r2, #0]
   2bfb8:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2bfbc:	430b      	orrs	r3, r1
   2bfbe:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2bfc0:	6041      	str	r1, [r0, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2bfc2:	4770      	bx	lr
	list->tail = node;
   2bfc4:	6041      	str	r1, [r0, #4]
	list->head = node;
   2bfc6:	6001      	str	r1, [r0, #0]
}
   2bfc8:	4770      	bx	lr

0002bfca <sys_sflist_insert>:
Z_GENLIST_INSERT(sflist, sfnode)
   2bfca:	b508      	push	{r3, lr}
   2bfcc:	b191      	cbz	r1, 2bff4 <sys_sflist_insert+0x2a>
   2bfce:	468c      	mov	ip, r1
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2bfd0:	680b      	ldr	r3, [r1, #0]
   2bfd2:	f023 0103 	bic.w	r1, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   2bfd6:	2b03      	cmp	r3, #3
   2bfd8:	d918      	bls.n	2c00c <sys_sflist_insert+0x42>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2bfda:	6813      	ldr	r3, [r2, #0]
   2bfdc:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2bfe0:	430b      	orrs	r3, r1
   2bfe2:	6013      	str	r3, [r2, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2bfe4:	f8dc 3000 	ldr.w	r3, [ip]
   2bfe8:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2bfec:	4313      	orrs	r3, r2
   2bfee:	f8cc 3000 	str.w	r3, [ip]
Z_GENLIST_INSERT(sflist, sfnode)
   2bff2:	bd08      	pop	{r3, pc}
	return list->head;
   2bff4:	6801      	ldr	r1, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2bff6:	6813      	ldr	r3, [r2, #0]
   2bff8:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2bffc:	430b      	orrs	r3, r1
   2bffe:	6013      	str	r3, [r2, #0]
	list->head = node;
   2c000:	6002      	str	r2, [r0, #0]
	return list->tail;
   2c002:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   2c004:	2b00      	cmp	r3, #0
   2c006:	d1f4      	bne.n	2bff2 <sys_sflist_insert+0x28>
	list->tail = node;
   2c008:	6042      	str	r2, [r0, #4]
}
   2c00a:	e7f2      	b.n	2bff2 <sys_sflist_insert+0x28>
Z_GENLIST_INSERT(sflist, sfnode)
   2c00c:	4611      	mov	r1, r2
   2c00e:	f7ff ffcc 	bl	2bfaa <sys_sflist_append>
   2c012:	e7ee      	b.n	2bff2 <sys_sflist_insert+0x28>

0002c014 <prepare_thread_to_run>:
{
   2c014:	b508      	push	{r3, lr}
   2c016:	2200      	movs	r2, #0
   2c018:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
   2c01c:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   2c01e:	f000 fa92 	bl	2c546 <z_ready_thread>
}
   2c022:	bd08      	pop	{r3, pc}

0002c024 <queue_insert>:
{
   2c024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c028:	4604      	mov	r4, r0
   2c02a:	460e      	mov	r6, r1
   2c02c:	4615      	mov	r5, r2
   2c02e:	461f      	mov	r7, r3
   2c030:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2c034:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   2c038:	f04f 0240 	mov.w	r2, #64	; 0x40
   2c03c:	f3ef 8911 	mrs	r9, BASEPRI
   2c040:	f382 8812 	msr	BASEPRI_MAX, r2
   2c044:	f3bf 8f6f 	isb	sy
   2c048:	46ca      	mov	sl, r9
	if (is_append) {
   2c04a:	b103      	cbz	r3, 2c04e <queue_insert+0x2a>
	return list->tail;
   2c04c:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2c04e:	4640      	mov	r0, r8
   2c050:	f000 fb2e 	bl	2c6b0 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2c054:	b998      	cbnz	r0, 2c07e <queue_insert+0x5a>
	if (alloc) {
   2c056:	b9df      	cbnz	r7, 2c090 <queue_insert+0x6c>
	node->next_and_flags = flags;
   2c058:	2300      	movs	r3, #0
   2c05a:	602b      	str	r3, [r5, #0]
	sys_sflist_insert(&queue->data_q, prev, data);
   2c05c:	462a      	mov	r2, r5
   2c05e:	4631      	mov	r1, r6
   2c060:	4620      	mov	r0, r4
   2c062:	f7ff ffb2 	bl	2bfca <sys_sflist_insert>
	z_handle_obj_poll_events(&queue->poll_events, state);
   2c066:	2104      	movs	r1, #4
   2c068:	f104 0010 	add.w	r0, r4, #16
   2c06c:	f000 fdfd 	bl	2cc6a <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   2c070:	4649      	mov	r1, r9
   2c072:	4640      	mov	r0, r8
   2c074:	f7f8 fa24 	bl	244c0 <z_reschedule>
	return 0;
   2c078:	2000      	movs	r0, #0
}
   2c07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prepare_thread_to_run(first_pending_thread, data);
   2c07e:	4629      	mov	r1, r5
   2c080:	f7ff ffc8 	bl	2c014 <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   2c084:	4649      	mov	r1, r9
   2c086:	4640      	mov	r0, r8
   2c088:	f7f8 fa1a 	bl	244c0 <z_reschedule>
		return 0;
   2c08c:	2000      	movs	r0, #0
   2c08e:	e7f4      	b.n	2c07a <queue_insert+0x56>
	return z_thread_aligned_alloc(0, size);
   2c090:	2108      	movs	r1, #8
   2c092:	2000      	movs	r0, #0
   2c094:	f7f9 f88a 	bl	251ac <z_thread_aligned_alloc>
		if (anode == NULL) {
   2c098:	b120      	cbz	r0, 2c0a4 <queue_insert+0x80>
		anode->data = data;
   2c09a:	6045      	str	r5, [r0, #4]
   2c09c:	2201      	movs	r2, #1
   2c09e:	6002      	str	r2, [r0, #0]
		data = anode;
   2c0a0:	4605      	mov	r5, r0
   2c0a2:	e7db      	b.n	2c05c <queue_insert+0x38>
	__asm__ volatile(
   2c0a4:	f38a 8811 	msr	BASEPRI, sl
   2c0a8:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2c0ac:	f06f 000b 	mvn.w	r0, #11
   2c0b0:	e7e3      	b.n	2c07a <queue_insert+0x56>

0002c0b2 <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2c0b2:	b160      	cbz	r0, 2c0ce <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2c0b4:	6803      	ldr	r3, [r0, #0]
   2c0b6:	f013 0f03 	tst.w	r3, #3
   2c0ba:	d008      	beq.n	2c0ce <z_queue_node_peek+0x1c>
{
   2c0bc:	b510      	push	{r4, lr}
		ret = anode->data;
   2c0be:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2c0c0:	b909      	cbnz	r1, 2c0c6 <z_queue_node_peek+0x14>
		ret = anode->data;
   2c0c2:	4620      	mov	r0, r4
}
   2c0c4:	bd10      	pop	{r4, pc}
			k_free(anode);
   2c0c6:	f000 fe00 	bl	2ccca <k_free>
		ret = anode->data;
   2c0ca:	4620      	mov	r0, r4
   2c0cc:	e7fa      	b.n	2c0c4 <z_queue_node_peek+0x12>
}
   2c0ce:	4770      	bx	lr

0002c0d0 <z_impl_k_queue_init>:
	list->head = NULL;
   2c0d0:	2300      	movs	r3, #0
   2c0d2:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   2c0d4:	6043      	str	r3, [r0, #4]
   2c0d6:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   2c0da:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   2c0dc:	60c3      	str	r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   2c0de:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   2c0e2:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   2c0e4:	6143      	str	r3, [r0, #20]
}
   2c0e6:	4770      	bx	lr

0002c0e8 <k_queue_append>:
{
   2c0e8:	b500      	push	{lr}
   2c0ea:	b083      	sub	sp, #12
   2c0ec:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2c0ee:	2301      	movs	r3, #1
   2c0f0:	9300      	str	r3, [sp, #0]
   2c0f2:	2300      	movs	r3, #0
   2c0f4:	4619      	mov	r1, r3
   2c0f6:	f7ff ff95 	bl	2c024 <queue_insert>
}
   2c0fa:	b003      	add	sp, #12
   2c0fc:	f85d fb04 	ldr.w	pc, [sp], #4

0002c100 <k_queue_prepend>:
{
   2c100:	b500      	push	{lr}
   2c102:	b083      	sub	sp, #12
   2c104:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2c106:	2100      	movs	r1, #0
   2c108:	9100      	str	r1, [sp, #0]
   2c10a:	460b      	mov	r3, r1
   2c10c:	f7ff ff8a 	bl	2c024 <queue_insert>
}
   2c110:	b003      	add	sp, #12
   2c112:	f85d fb04 	ldr.w	pc, [sp], #4

0002c116 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2c116:	b15a      	cbz	r2, 2c130 <z_impl_k_sem_init+0x1a>
   2c118:	428a      	cmp	r2, r1
   2c11a:	d30c      	bcc.n	2c136 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   2c11c:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   2c11e:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   2c120:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   2c122:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   2c124:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   2c128:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   2c12a:	6143      	str	r3, [r0, #20]
	return 0;
   2c12c:	2000      	movs	r0, #0
   2c12e:	4770      	bx	lr
		return -EINVAL;
   2c130:	f06f 0015 	mvn.w	r0, #21
   2c134:	4770      	bx	lr
   2c136:	f06f 0015 	mvn.w	r0, #21
}
   2c13a:	4770      	bx	lr

0002c13c <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   2c13c:	460b      	mov	r3, r1
   2c13e:	b139      	cbz	r1, 2c150 <sys_slist_remove+0x14>
	return node->next;
   2c140:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   2c142:	6019      	str	r1, [r3, #0]
	return list->tail;
   2c144:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2c146:	428a      	cmp	r2, r1
   2c148:	d009      	beq.n	2c15e <sys_slist_remove+0x22>
	parent->next = child;
   2c14a:	2300      	movs	r3, #0
   2c14c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2c14e:	4770      	bx	lr
	return node->next;
   2c150:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   2c152:	6003      	str	r3, [r0, #0]
	return list->tail;
   2c154:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2c156:	428a      	cmp	r2, r1
   2c158:	d1f7      	bne.n	2c14a <sys_slist_remove+0xe>
	list->tail = node;
   2c15a:	6043      	str	r3, [r0, #4]
}
   2c15c:	e7f5      	b.n	2c14a <sys_slist_remove+0xe>
	list->tail = node;
   2c15e:	6043      	str	r3, [r0, #4]
}
   2c160:	e7f3      	b.n	2c14a <sys_slist_remove+0xe>

0002c162 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c162:	b508      	push	{r3, lr}
   2c164:	460a      	mov	r2, r1
	return list->head;
   2c166:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c168:	2100      	movs	r1, #0
   2c16a:	e001      	b.n	2c170 <sys_slist_find_and_remove+0xe>
   2c16c:	4619      	mov	r1, r3
   2c16e:	681b      	ldr	r3, [r3, #0]
   2c170:	b12b      	cbz	r3, 2c17e <sys_slist_find_and_remove+0x1c>
   2c172:	4293      	cmp	r3, r2
   2c174:	d1fa      	bne.n	2c16c <sys_slist_find_and_remove+0xa>
   2c176:	f7ff ffe1 	bl	2c13c <sys_slist_remove>
   2c17a:	2001      	movs	r0, #1
   2c17c:	e000      	b.n	2c180 <sys_slist_find_and_remove+0x1e>
   2c17e:	2000      	movs	r0, #0
   2c180:	bd08      	pop	{r3, pc}

0002c182 <queue_remove_locked>:
{
   2c182:	b508      	push	{r3, lr}
	return (*flagp & BIT(bit)) != 0U;
   2c184:	68cb      	ldr	r3, [r1, #12]
	*flagp &= ~BIT(bit);
   2c186:	f023 0204 	bic.w	r2, r3, #4
   2c18a:	60ca      	str	r2, [r1, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2c18c:	f013 0f04 	tst.w	r3, #4
   2c190:	d100      	bne.n	2c194 <queue_remove_locked+0x12>
}
   2c192:	bd08      	pop	{r3, pc}
		(void)sys_slist_find_and_remove(&queue->pending, &work->node);
   2c194:	30b8      	adds	r0, #184	; 0xb8
   2c196:	f7ff ffe4 	bl	2c162 <sys_slist_find_and_remove>
}
   2c19a:	e7fa      	b.n	2c192 <queue_remove_locked+0x10>

0002c19c <cancel_async_locked>:
{
   2c19c:	b510      	push	{r4, lr}
   2c19e:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
   2c1a0:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2c1a2:	f013 0f02 	tst.w	r3, #2
   2c1a6:	d009      	beq.n	2c1bc <cancel_async_locked+0x20>
	return *flagp;
   2c1a8:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   2c1aa:	f013 000f 	ands.w	r0, r3, #15
   2c1ae:	d004      	beq.n	2c1ba <cancel_async_locked+0x1e>
	*flagp |= BIT(bit);
   2c1b0:	f043 0202 	orr.w	r2, r3, #2
   2c1b4:	60e2      	str	r2, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2c1b6:	f040 0002 	orr.w	r0, r0, #2
}
   2c1ba:	bd10      	pop	{r4, pc}
		queue_remove_locked(work->queue, work);
   2c1bc:	4601      	mov	r1, r0
   2c1be:	6880      	ldr	r0, [r0, #8]
   2c1c0:	f7ff ffdf 	bl	2c182 <queue_remove_locked>
   2c1c4:	e7f0      	b.n	2c1a8 <cancel_async_locked+0xc>

0002c1c6 <notify_queue_locked>:
	if (queue != NULL) {
   2c1c6:	b130      	cbz	r0, 2c1d6 <notify_queue_locked+0x10>
{
   2c1c8:	b508      	push	{r3, lr}
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2c1ca:	2200      	movs	r2, #0
   2c1cc:	4611      	mov	r1, r2
   2c1ce:	30c0      	adds	r0, #192	; 0xc0
   2c1d0:	f000 faa4 	bl	2c71c <z_sched_wake>
}
   2c1d4:	bd08      	pop	{r3, pc}
	bool rv = false;
   2c1d6:	2000      	movs	r0, #0
}
   2c1d8:	4770      	bx	lr

0002c1da <submit_to_queue_locked>:
{
   2c1da:	b570      	push	{r4, r5, r6, lr}
   2c1dc:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   2c1de:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2c1e0:	f013 0f02 	tst.w	r3, #2
   2c1e4:	d122      	bne.n	2c22c <submit_to_queue_locked+0x52>
   2c1e6:	4604      	mov	r4, r0
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   2c1e8:	f013 0f04 	tst.w	r3, #4
   2c1ec:	d123      	bne.n	2c236 <submit_to_queue_locked+0x5c>
		if (*queuep == NULL) {
   2c1ee:	680b      	ldr	r3, [r1, #0]
   2c1f0:	b1ab      	cbz	r3, 2c21e <submit_to_queue_locked+0x44>
	return (*flagp & BIT(bit)) != 0U;
   2c1f2:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   2c1f4:	f013 0f01 	tst.w	r3, #1
   2c1f8:	d014      	beq.n	2c224 <submit_to_queue_locked+0x4a>
			*queuep = work->queue;
   2c1fa:	68a3      	ldr	r3, [r4, #8]
   2c1fc:	602b      	str	r3, [r5, #0]
			ret = 2;
   2c1fe:	2602      	movs	r6, #2
		int rc = queue_submit_locked(*queuep, work);
   2c200:	4621      	mov	r1, r4
   2c202:	6828      	ldr	r0, [r5, #0]
   2c204:	f7f7 ff72 	bl	240ec <queue_submit_locked>
		if (rc < 0) {
   2c208:	2800      	cmp	r0, #0
   2c20a:	db11      	blt.n	2c230 <submit_to_queue_locked+0x56>
	*flagp |= BIT(bit);
   2c20c:	68e3      	ldr	r3, [r4, #12]
   2c20e:	f043 0304 	orr.w	r3, r3, #4
   2c212:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   2c214:	682b      	ldr	r3, [r5, #0]
   2c216:	60a3      	str	r3, [r4, #8]
	if (ret <= 0) {
   2c218:	b136      	cbz	r6, 2c228 <submit_to_queue_locked+0x4e>
   2c21a:	4630      	mov	r0, r6
	return ret;
   2c21c:	e00a      	b.n	2c234 <submit_to_queue_locked+0x5a>
			*queuep = work->queue;
   2c21e:	6883      	ldr	r3, [r0, #8]
   2c220:	600b      	str	r3, [r1, #0]
   2c222:	e7e6      	b.n	2c1f2 <submit_to_queue_locked+0x18>
		ret = 1;
   2c224:	2601      	movs	r6, #1
   2c226:	e7eb      	b.n	2c200 <submit_to_queue_locked+0x26>
   2c228:	4630      	mov	r0, r6
   2c22a:	e001      	b.n	2c230 <submit_to_queue_locked+0x56>
		ret = -EBUSY;
   2c22c:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   2c230:	2300      	movs	r3, #0
   2c232:	602b      	str	r3, [r5, #0]
}
   2c234:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   2c236:	2000      	movs	r0, #0
   2c238:	e7fa      	b.n	2c230 <submit_to_queue_locked+0x56>

0002c23a <work_timeout>:
{
   2c23a:	b510      	push	{r4, lr}
   2c23c:	b082      	sub	sp, #8
   2c23e:	4603      	mov	r3, r0
	__asm__ volatile(
   2c240:	f04f 0240 	mov.w	r2, #64	; 0x40
   2c244:	f3ef 8411 	mrs	r4, BASEPRI
   2c248:	f382 8812 	msr	BASEPRI_MAX, r2
   2c24c:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   2c250:	2200      	movs	r2, #0
   2c252:	9201      	str	r2, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
   2c254:	f850 2c04 	ldr.w	r2, [r0, #-4]
	*flagp &= ~BIT(bit);
   2c258:	f022 0108 	bic.w	r1, r2, #8
   2c25c:	f840 1c04 	str.w	r1, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2c260:	f012 0f08 	tst.w	r2, #8
   2c264:	d105      	bne.n	2c272 <work_timeout+0x38>
	__asm__ volatile(
   2c266:	f384 8811 	msr	BASEPRI, r4
   2c26a:	f3bf 8f6f 	isb	sy
}
   2c26e:	b002      	add	sp, #8
   2c270:	bd10      	pop	{r4, pc}
   2c272:	3810      	subs	r0, #16
		queue = dw->queue;
   2c274:	699b      	ldr	r3, [r3, #24]
   2c276:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2c278:	a901      	add	r1, sp, #4
   2c27a:	f7ff ffae 	bl	2c1da <submit_to_queue_locked>
   2c27e:	e7f2      	b.n	2c266 <work_timeout+0x2c>

0002c280 <z_reschedule_unlocked>:
{
   2c280:	b508      	push	{r3, lr}
	__asm__ volatile(
   2c282:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c286:	f3ef 8011 	mrs	r0, BASEPRI
   2c28a:	f383 8812 	msr	BASEPRI_MAX, r3
   2c28e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2c292:	f000 f906 	bl	2c4a2 <z_reschedule_irqlock>
}
   2c296:	bd08      	pop	{r3, pc}

0002c298 <cancel_sync_locked>:
{
   2c298:	b510      	push	{r4, lr}
   2c29a:	4602      	mov	r2, r0
	return (*flagp & BIT(bit)) != 0U;
   2c29c:	68c4      	ldr	r4, [r0, #12]
   2c29e:	f014 0f02 	tst.w	r4, #2
   2c2a2:	f3c4 0440 	ubfx	r4, r4, #1, #1
	if (ret) {
   2c2a6:	d101      	bne.n	2c2ac <cancel_sync_locked+0x14>
}
   2c2a8:	4620      	mov	r0, r4
   2c2aa:	bd10      	pop	{r4, pc}
   2c2ac:	4608      	mov	r0, r1
		init_work_cancel(canceller, work);
   2c2ae:	4611      	mov	r1, r2
   2c2b0:	f7f7 ff8a 	bl	241c8 <init_work_cancel>
   2c2b4:	e7f8      	b.n	2c2a8 <cancel_sync_locked+0x10>

0002c2b6 <unschedule_locked>:
{
   2c2b6:	b508      	push	{r3, lr}
	return (*flagp & BIT(bit)) != 0U;
   2c2b8:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
   2c2ba:	f023 0208 	bic.w	r2, r3, #8
   2c2be:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2c2c0:	f013 0f08 	tst.w	r3, #8
   2c2c4:	d101      	bne.n	2c2ca <unschedule_locked+0x14>
	bool ret = false;
   2c2c6:	2000      	movs	r0, #0
}
   2c2c8:	bd08      	pop	{r3, pc}
		z_abort_timeout(&dwork->timeout);
   2c2ca:	3010      	adds	r0, #16
   2c2cc:	f000 fa6b 	bl	2c7a6 <z_abort_timeout>
		ret = true;
   2c2d0:	2001      	movs	r0, #1
   2c2d2:	e7f9      	b.n	2c2c8 <unschedule_locked+0x12>

0002c2d4 <cancel_delayable_async_locked>:
{
   2c2d4:	b510      	push	{r4, lr}
   2c2d6:	4604      	mov	r4, r0
	(void)unschedule_locked(dwork);
   2c2d8:	f7ff ffed 	bl	2c2b6 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2c2dc:	4620      	mov	r0, r4
   2c2de:	f7ff ff5d 	bl	2c19c <cancel_async_locked>
}
   2c2e2:	bd10      	pop	{r4, pc}

0002c2e4 <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2c2e4:	2300      	movs	r3, #0
   2c2e6:	6003      	str	r3, [r0, #0]
   2c2e8:	6043      	str	r3, [r0, #4]
   2c2ea:	6083      	str	r3, [r0, #8]
   2c2ec:	60c3      	str	r3, [r0, #12]
   2c2ee:	6041      	str	r1, [r0, #4]
}
   2c2f0:	4770      	bx	lr

0002c2f2 <z_work_submit_to_queue>:
{
   2c2f2:	b510      	push	{r4, lr}
   2c2f4:	b082      	sub	sp, #8
   2c2f6:	9001      	str	r0, [sp, #4]
   2c2f8:	4608      	mov	r0, r1
   2c2fa:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c2fe:	f3ef 8411 	mrs	r4, BASEPRI
   2c302:	f383 8812 	msr	BASEPRI_MAX, r3
   2c306:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   2c30a:	a901      	add	r1, sp, #4
   2c30c:	f7ff ff65 	bl	2c1da <submit_to_queue_locked>
	__asm__ volatile(
   2c310:	f384 8811 	msr	BASEPRI, r4
   2c314:	f3bf 8f6f 	isb	sy
}
   2c318:	b002      	add	sp, #8
   2c31a:	bd10      	pop	{r4, pc}

0002c31c <k_work_submit_to_queue>:
{
   2c31c:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   2c31e:	f7ff ffe8 	bl	2c2f2 <z_work_submit_to_queue>
	if (ret > 0) {
   2c322:	1e04      	subs	r4, r0, #0
   2c324:	dc01      	bgt.n	2c32a <k_work_submit_to_queue+0xe>
}
   2c326:	4620      	mov	r0, r4
   2c328:	bd10      	pop	{r4, pc}
		z_reschedule_unlocked();
   2c32a:	f7ff ffa9 	bl	2c280 <z_reschedule_unlocked>
	return ret;
   2c32e:	e7fa      	b.n	2c326 <k_work_submit_to_queue+0xa>

0002c330 <k_work_queue_init>:
{
   2c330:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   2c332:	22d8      	movs	r2, #216	; 0xd8
   2c334:	2100      	movs	r1, #0
   2c336:	f7fb f8f8 	bl	2752a <memset>
}
   2c33a:	bd08      	pop	{r3, pc}

0002c33c <k_work_init_delayable>:
{
   2c33c:	b538      	push	{r3, r4, r5, lr}
   2c33e:	4604      	mov	r4, r0
   2c340:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   2c342:	2230      	movs	r2, #48	; 0x30
   2c344:	2100      	movs	r1, #0
   2c346:	f7fb f8f0 	bl	2752a <memset>
   2c34a:	6065      	str	r5, [r4, #4]
   2c34c:	f44f 7380 	mov.w	r3, #256	; 0x100
   2c350:	60e3      	str	r3, [r4, #12]
}
   2c352:	bd38      	pop	{r3, r4, r5, pc}

0002c354 <k_work_delayable_busy_get>:
	__asm__ volatile(
   2c354:	f04f 0240 	mov.w	r2, #64	; 0x40
   2c358:	f3ef 8311 	mrs	r3, BASEPRI
   2c35c:	f382 8812 	msr	BASEPRI_MAX, r2
   2c360:	f3bf 8f6f 	isb	sy
	return *flagp;
   2c364:	68c0      	ldr	r0, [r0, #12]
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   2c366:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   2c36a:	f383 8811 	msr	BASEPRI, r3
   2c36e:	f3bf 8f6f 	isb	sy
}
   2c372:	4770      	bx	lr

0002c374 <k_work_schedule_for_queue>:
{
   2c374:	b510      	push	{r4, lr}
   2c376:	b082      	sub	sp, #8
   2c378:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   2c37a:	f04f 0040 	mov.w	r0, #64	; 0x40
   2c37e:	f3ef 8411 	mrs	r4, BASEPRI
   2c382:	f380 8812 	msr	BASEPRI_MAX, r0
   2c386:	f3bf 8f6f 	isb	sy
	return *flagp;
   2c38a:	68c8      	ldr	r0, [r1, #12]
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   2c38c:	f010 0f0e 	tst.w	r0, #14
   2c390:	d006      	beq.n	2c3a0 <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   2c392:	2000      	movs	r0, #0
	__asm__ volatile(
   2c394:	f384 8811 	msr	BASEPRI, r4
   2c398:	f3bf 8f6f 	isb	sy
}
   2c39c:	b002      	add	sp, #8
   2c39e:	bd10      	pop	{r4, pc}
		ret = schedule_for_queue_locked(&queue, dwork, delay);
   2c3a0:	a801      	add	r0, sp, #4
   2c3a2:	f7f7 ffa1 	bl	242e8 <schedule_for_queue_locked>
   2c3a6:	e7f5      	b.n	2c394 <k_work_schedule_for_queue+0x20>

0002c3a8 <k_work_reschedule_for_queue>:
{
   2c3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c3aa:	b083      	sub	sp, #12
   2c3ac:	9001      	str	r0, [sp, #4]
   2c3ae:	460c      	mov	r4, r1
   2c3b0:	4616      	mov	r6, r2
   2c3b2:	461d      	mov	r5, r3
	__asm__ volatile(
   2c3b4:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c3b8:	f3ef 8711 	mrs	r7, BASEPRI
   2c3bc:	f383 8812 	msr	BASEPRI_MAX, r3
   2c3c0:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   2c3c4:	4608      	mov	r0, r1
   2c3c6:	f7ff ff76 	bl	2c2b6 <unschedule_locked>
	ret = schedule_for_queue_locked(&queue, dwork, delay);
   2c3ca:	4632      	mov	r2, r6
   2c3cc:	462b      	mov	r3, r5
   2c3ce:	4621      	mov	r1, r4
   2c3d0:	a801      	add	r0, sp, #4
   2c3d2:	f7f7 ff89 	bl	242e8 <schedule_for_queue_locked>
	__asm__ volatile(
   2c3d6:	f387 8811 	msr	BASEPRI, r7
   2c3da:	f3bf 8f6f 	isb	sy
}
   2c3de:	b003      	add	sp, #12
   2c3e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002c3e2 <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2c3e2:	b510      	push	{r4, lr}
	__asm__ volatile(
   2c3e4:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c3e8:	f3ef 8411 	mrs	r4, BASEPRI
   2c3ec:	f383 8812 	msr	BASEPRI_MAX, r3
   2c3f0:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(dwork != NULL);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable, dwork);

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);
   2c3f4:	f7ff ff6e 	bl	2c2d4 <cancel_delayable_async_locked>
	__asm__ volatile(
   2c3f8:	f384 8811 	msr	BASEPRI, r4
   2c3fc:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2c400:	bd10      	pop	{r4, pc}

0002c402 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   2c402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c404:	460d      	mov	r5, r1
	__asm__ volatile(
   2c406:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c40a:	f3ef 8611 	mrs	r6, BASEPRI
   2c40e:	f383 8812 	msr	BASEPRI_MAX, r3
   2c412:	f3bf 8f6f 	isb	sy
	return *flagp;
   2c416:	68c3      	ldr	r3, [r0, #12]
   2c418:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2c41c:	2b00      	cmp	r3, #0
   2c41e:	bf14      	ite	ne
   2c420:	2701      	movne	r7, #1
   2c422:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   2c424:	d107      	bne.n	2c436 <k_work_cancel_delayable_sync+0x34>
	bool need_wait = false;
   2c426:	2000      	movs	r0, #0
	__asm__ volatile(
   2c428:	f386 8811 	msr	BASEPRI, r6
   2c42c:	f3bf 8f6f 	isb	sy
		need_wait = cancel_sync_locked(&dwork->work, canceller);
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   2c430:	b948      	cbnz	r0, 2c446 <k_work_cancel_delayable_sync+0x44>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2c432:	4638      	mov	r0, r7
   2c434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c436:	4604      	mov	r4, r0
		(void)cancel_delayable_async_locked(dwork);
   2c438:	f7ff ff4c 	bl	2c2d4 <cancel_delayable_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   2c43c:	4629      	mov	r1, r5
   2c43e:	4620      	mov	r0, r4
   2c440:	f7ff ff2a 	bl	2c298 <cancel_sync_locked>
   2c444:	e7f0      	b.n	2c428 <k_work_cancel_delayable_sync+0x26>
		k_sem_take(&canceller->sem, K_FOREVER);
   2c446:	f105 0008 	add.w	r0, r5, #8
	return z_impl_k_sem_take(sem, timeout);
   2c44a:	f04f 32ff 	mov.w	r2, #4294967295
   2c44e:	f04f 33ff 	mov.w	r3, #4294967295
   2c452:	f7f7 fe09 	bl	24068 <z_impl_k_sem_take>
   2c456:	e7ec      	b.n	2c432 <k_work_cancel_delayable_sync+0x30>

0002c458 <thread_active_elsewhere>:
}
   2c458:	2000      	movs	r0, #0
   2c45a:	4770      	bx	lr

0002c45c <pended_on_thread>:
}
   2c45c:	6880      	ldr	r0, [r0, #8]
   2c45e:	4770      	bx	lr

0002c460 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2c460:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2c464:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2c468:	4283      	cmp	r3, r0
   2c46a:	d001      	beq.n	2c470 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   2c46c:	1ac0      	subs	r0, r0, r3
   2c46e:	4770      	bx	lr
	return 0;
   2c470:	2000      	movs	r0, #0
}
   2c472:	4770      	bx	lr

0002c474 <z_unpend_thread_no_timeout>:
{
   2c474:	b538      	push	{r3, r4, r5, lr}
   2c476:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
   2c478:	2300      	movs	r3, #0
	__asm__ volatile(
   2c47a:	f04f 0240 	mov.w	r2, #64	; 0x40
   2c47e:	f3ef 8411 	mrs	r4, BASEPRI
   2c482:	f382 8812 	msr	BASEPRI_MAX, r2
   2c486:	f3bf 8f6f 	isb	sy
   2c48a:	e007      	b.n	2c49c <z_unpend_thread_no_timeout+0x28>
		unpend_thread_no_timeout(thread);
   2c48c:	4628      	mov	r0, r5
   2c48e:	f000 f82a 	bl	2c4e6 <unpend_thread_no_timeout>
	__asm__ volatile(
   2c492:	f384 8811 	msr	BASEPRI, r4
   2c496:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2c49a:	2301      	movs	r3, #1
   2c49c:	2b00      	cmp	r3, #0
   2c49e:	d0f5      	beq.n	2c48c <z_unpend_thread_no_timeout+0x18>
}
   2c4a0:	bd38      	pop	{r3, r4, r5, pc}

0002c4a2 <z_reschedule_irqlock>:
{
   2c4a2:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2c4a4:	4603      	mov	r3, r0
   2c4a6:	b928      	cbnz	r0, 2c4b4 <z_reschedule_irqlock+0x12>
   2c4a8:	f3ef 8205 	mrs	r2, IPSR
   2c4ac:	b912      	cbnz	r2, 2c4b4 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   2c4ae:	f7e9 fa1b 	bl	158e8 <arch_swap>
	return ret;
   2c4b2:	e003      	b.n	2c4bc <z_reschedule_irqlock+0x1a>
   2c4b4:	f383 8811 	msr	BASEPRI, r3
   2c4b8:	f3bf 8f6f 	isb	sy
}
   2c4bc:	bd08      	pop	{r3, pc}

0002c4be <z_reschedule_unlocked>:
{
   2c4be:	b508      	push	{r3, lr}
	__asm__ volatile(
   2c4c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c4c4:	f3ef 8011 	mrs	r0, BASEPRI
   2c4c8:	f383 8812 	msr	BASEPRI_MAX, r3
   2c4cc:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2c4d0:	f7ff ffe7 	bl	2c4a2 <z_reschedule_irqlock>
}
   2c4d4:	bd08      	pop	{r3, pc}

0002c4d6 <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
   2c4d6:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   2c4d8:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
   2c4da:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2c4dc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2c4de:	2300      	movs	r3, #0
   2c4e0:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   2c4e2:	604b      	str	r3, [r1, #4]
}
   2c4e4:	4770      	bx	lr

0002c4e6 <unpend_thread_no_timeout>:
{
   2c4e6:	b510      	push	{r4, lr}
   2c4e8:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2c4ea:	f7ff ffb7 	bl	2c45c <pended_on_thread>
   2c4ee:	4621      	mov	r1, r4
   2c4f0:	f7ff fff1 	bl	2c4d6 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2c4f4:	7b63      	ldrb	r3, [r4, #13]
   2c4f6:	f023 0302 	bic.w	r3, r3, #2
   2c4fa:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2c4fc:	2300      	movs	r3, #0
   2c4fe:	60a3      	str	r3, [r4, #8]
}
   2c500:	bd10      	pop	{r4, pc}

0002c502 <z_unpend_thread>:
{
   2c502:	b538      	push	{r3, r4, r5, lr}
   2c504:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   2c506:	2300      	movs	r3, #0
   2c508:	f04f 0240 	mov.w	r2, #64	; 0x40
   2c50c:	f3ef 8511 	mrs	r5, BASEPRI
   2c510:	f382 8812 	msr	BASEPRI_MAX, r2
   2c514:	f3bf 8f6f 	isb	sy
   2c518:	e007      	b.n	2c52a <z_unpend_thread+0x28>
		unpend_thread_no_timeout(thread);
   2c51a:	4620      	mov	r0, r4
   2c51c:	f7ff ffe3 	bl	2c4e6 <unpend_thread_no_timeout>
	__asm__ volatile(
   2c520:	f385 8811 	msr	BASEPRI, r5
   2c524:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2c528:	2301      	movs	r3, #1
   2c52a:	2b00      	cmp	r3, #0
   2c52c:	d0f5      	beq.n	2c51a <z_unpend_thread+0x18>
	return z_abort_timeout(&thread->base.timeout);
   2c52e:	f104 0018 	add.w	r0, r4, #24
   2c532:	f000 f938 	bl	2c7a6 <z_abort_timeout>
}
   2c536:	bd38      	pop	{r3, r4, r5, pc}

0002c538 <z_priq_dumb_best>:
{
   2c538:	4603      	mov	r3, r0
	return list->head == list;
   2c53a:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2c53c:	4283      	cmp	r3, r0
   2c53e:	d000      	beq.n	2c542 <z_priq_dumb_best+0xa>
}
   2c540:	4770      	bx	lr
	struct k_thread *thread = NULL;
   2c542:	2000      	movs	r0, #0
	return thread;
   2c544:	e7fc      	b.n	2c540 <z_priq_dumb_best+0x8>

0002c546 <z_ready_thread>:
{
   2c546:	b538      	push	{r3, r4, r5, lr}
   2c548:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   2c54a:	2300      	movs	r3, #0
	__asm__ volatile(
   2c54c:	f04f 0240 	mov.w	r2, #64	; 0x40
   2c550:	f3ef 8511 	mrs	r5, BASEPRI
   2c554:	f382 8812 	msr	BASEPRI_MAX, r2
   2c558:	f3bf 8f6f 	isb	sy
   2c55c:	e004      	b.n	2c568 <z_ready_thread+0x22>
	__asm__ volatile(
   2c55e:	f385 8811 	msr	BASEPRI, r5
   2c562:	f3bf 8f6f 	isb	sy
   2c566:	2301      	movs	r3, #1
   2c568:	b943      	cbnz	r3, 2c57c <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   2c56a:	4620      	mov	r0, r4
   2c56c:	f7ff ff74 	bl	2c458 <thread_active_elsewhere>
   2c570:	2800      	cmp	r0, #0
   2c572:	d1f4      	bne.n	2c55e <z_ready_thread+0x18>
			ready_thread(thread);
   2c574:	4620      	mov	r0, r4
   2c576:	f7f8 f891 	bl	2469c <ready_thread>
   2c57a:	e7f0      	b.n	2c55e <z_ready_thread+0x18>
}
   2c57c:	bd38      	pop	{r3, r4, r5, pc}

0002c57e <z_thread_timeout>:
{
   2c57e:	b570      	push	{r4, r5, r6, lr}
   2c580:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   2c582:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
   2c586:	2300      	movs	r3, #0
	__asm__ volatile(
   2c588:	f04f 0240 	mov.w	r2, #64	; 0x40
   2c58c:	f3ef 8511 	mrs	r5, BASEPRI
   2c590:	f382 8812 	msr	BASEPRI_MAX, r2
   2c594:	f3bf 8f6f 	isb	sy
   2c598:	e011      	b.n	2c5be <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2c59a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   2c59e:	f023 0204 	bic.w	r2, r3, #4
   2c5a2:	f804 2c0b 	strb.w	r2, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2c5a6:	f023 0314 	bic.w	r3, r3, #20
   2c5aa:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   2c5ae:	4630      	mov	r0, r6
   2c5b0:	f7f8 f874 	bl	2469c <ready_thread>
	__asm__ volatile(
   2c5b4:	f385 8811 	msr	BASEPRI, r5
   2c5b8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2c5bc:	2301      	movs	r3, #1
   2c5be:	b963      	cbnz	r3, 2c5da <z_thread_timeout+0x5c>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   2c5c0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   2c5c4:	f013 0f28 	tst.w	r3, #40	; 0x28
   2c5c8:	d1f4      	bne.n	2c5b4 <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
   2c5ca:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2c5ce:	2b00      	cmp	r3, #0
   2c5d0:	d0e3      	beq.n	2c59a <z_thread_timeout+0x1c>
				unpend_thread_no_timeout(thread);
   2c5d2:	4630      	mov	r0, r6
   2c5d4:	f7ff ff87 	bl	2c4e6 <unpend_thread_no_timeout>
   2c5d8:	e7df      	b.n	2c59a <z_thread_timeout+0x1c>
}
   2c5da:	bd70      	pop	{r4, r5, r6, pc}

0002c5dc <unpend_all>:
{
   2c5dc:	b538      	push	{r3, r4, r5, lr}
   2c5de:	4605      	mov	r5, r0
	return list->head == list;
   2c5e0:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2c5e2:	42a5      	cmp	r5, r4
   2c5e4:	d00e      	beq.n	2c604 <unpend_all+0x28>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2c5e6:	b16c      	cbz	r4, 2c604 <unpend_all+0x28>
		unpend_thread_no_timeout(thread);
   2c5e8:	4620      	mov	r0, r4
   2c5ea:	f7ff ff7c 	bl	2c4e6 <unpend_thread_no_timeout>
   2c5ee:	f104 0018 	add.w	r0, r4, #24
   2c5f2:	f000 f8d8 	bl	2c7a6 <z_abort_timeout>
   2c5f6:	2300      	movs	r3, #0
   2c5f8:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		ready_thread(thread);
   2c5fc:	4620      	mov	r0, r4
   2c5fe:	f7f8 f84d 	bl	2469c <ready_thread>
   2c602:	e7ed      	b.n	2c5e0 <unpend_all+0x4>
}
   2c604:	bd38      	pop	{r3, r4, r5, pc}

0002c606 <add_to_waitq_locked>:
{
   2c606:	b570      	push	{r4, r5, r6, lr}
   2c608:	4605      	mov	r5, r0
   2c60a:	460e      	mov	r6, r1
	unready_thread(thread);
   2c60c:	f7f8 f8a0 	bl	24750 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2c610:	7b6b      	ldrb	r3, [r5, #13]
   2c612:	f043 0302 	orr.w	r3, r3, #2
   2c616:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   2c618:	b1fe      	cbz	r6, 2c65a <add_to_waitq_locked+0x54>
		thread->base.pended_on = wait_q;
   2c61a:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   2c61c:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2c61e:	42a6      	cmp	r6, r4
   2c620:	d108      	bne.n	2c634 <add_to_waitq_locked+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2c622:	2400      	movs	r4, #0
   2c624:	e006      	b.n	2c634 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const prev = successor->prev;
   2c626:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   2c628:	606b      	str	r3, [r5, #4]
	node->next = successor;
   2c62a:	602c      	str	r4, [r5, #0]
	prev->next = node;
   2c62c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2c62e:	6065      	str	r5, [r4, #4]
}
   2c630:	e013      	b.n	2c65a <add_to_waitq_locked+0x54>
   2c632:	2400      	movs	r4, #0
   2c634:	b164      	cbz	r4, 2c650 <add_to_waitq_locked+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2c636:	4621      	mov	r1, r4
   2c638:	4628      	mov	r0, r5
   2c63a:	f7ff ff11 	bl	2c460 <z_sched_prio_cmp>
   2c63e:	2800      	cmp	r0, #0
   2c640:	dcf1      	bgt.n	2c626 <add_to_waitq_locked+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2c642:	2c00      	cmp	r4, #0
   2c644:	d0f6      	beq.n	2c634 <add_to_waitq_locked+0x2e>
	return (node == list->tail) ? NULL : node->next;
   2c646:	6873      	ldr	r3, [r6, #4]
   2c648:	429c      	cmp	r4, r3
   2c64a:	d0f2      	beq.n	2c632 <add_to_waitq_locked+0x2c>
   2c64c:	6824      	ldr	r4, [r4, #0]
   2c64e:	e7f1      	b.n	2c634 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const tail = list->tail;
   2c650:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   2c652:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   2c654:	606b      	str	r3, [r5, #4]
	tail->next = node;
   2c656:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2c658:	6075      	str	r5, [r6, #4]
}
   2c65a:	bd70      	pop	{r4, r5, r6, pc}

0002c65c <pend_locked>:
{
   2c65c:	b570      	push	{r4, r5, r6, lr}
   2c65e:	4604      	mov	r4, r0
   2c660:	4616      	mov	r6, r2
   2c662:	461d      	mov	r5, r3
	add_to_waitq_locked(thread, wait_q);
   2c664:	f7ff ffcf 	bl	2c606 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
   2c668:	4632      	mov	r2, r6
   2c66a:	462b      	mov	r3, r5
   2c66c:	4620      	mov	r0, r4
   2c66e:	f7f7 fec9 	bl	24404 <add_thread_timeout>
}
   2c672:	bd70      	pop	{r4, r5, r6, pc}

0002c674 <z_unpend1_no_timeout>:
{
   2c674:	b570      	push	{r4, r5, r6, lr}
   2c676:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   2c678:	2300      	movs	r3, #0
	__asm__ volatile(
   2c67a:	f04f 0240 	mov.w	r2, #64	; 0x40
   2c67e:	f3ef 8511 	mrs	r5, BASEPRI
   2c682:	f382 8812 	msr	BASEPRI_MAX, r2
   2c686:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   2c68a:	461c      	mov	r4, r3
   2c68c:	e004      	b.n	2c698 <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
   2c68e:	f385 8811 	msr	BASEPRI, r5
   2c692:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2c696:	2301      	movs	r3, #1
   2c698:	b943      	cbnz	r3, 2c6ac <z_unpend1_no_timeout+0x38>
		thread = _priq_wait_best(&wait_q->waitq);
   2c69a:	4630      	mov	r0, r6
   2c69c:	f7ff ff4c 	bl	2c538 <z_priq_dumb_best>
		if (thread != NULL) {
   2c6a0:	4604      	mov	r4, r0
   2c6a2:	2800      	cmp	r0, #0
   2c6a4:	d0f3      	beq.n	2c68e <z_unpend1_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
   2c6a6:	f7ff ff1e 	bl	2c4e6 <unpend_thread_no_timeout>
   2c6aa:	e7f0      	b.n	2c68e <z_unpend1_no_timeout+0x1a>
}
   2c6ac:	4620      	mov	r0, r4
   2c6ae:	bd70      	pop	{r4, r5, r6, pc}

0002c6b0 <z_unpend_first_thread>:
{
   2c6b0:	b570      	push	{r4, r5, r6, lr}
   2c6b2:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   2c6b4:	2300      	movs	r3, #0
	__asm__ volatile(
   2c6b6:	f04f 0240 	mov.w	r2, #64	; 0x40
   2c6ba:	f3ef 8511 	mrs	r5, BASEPRI
   2c6be:	f382 8812 	msr	BASEPRI_MAX, r2
   2c6c2:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   2c6c6:	461c      	mov	r4, r3
   2c6c8:	e004      	b.n	2c6d4 <z_unpend_first_thread+0x24>
	__asm__ volatile(
   2c6ca:	f385 8811 	msr	BASEPRI, r5
   2c6ce:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2c6d2:	2301      	movs	r3, #1
   2c6d4:	b963      	cbnz	r3, 2c6f0 <z_unpend_first_thread+0x40>
		thread = _priq_wait_best(&wait_q->waitq);
   2c6d6:	4630      	mov	r0, r6
   2c6d8:	f7ff ff2e 	bl	2c538 <z_priq_dumb_best>
		if (thread != NULL) {
   2c6dc:	4604      	mov	r4, r0
   2c6de:	2800      	cmp	r0, #0
   2c6e0:	d0f3      	beq.n	2c6ca <z_unpend_first_thread+0x1a>
			unpend_thread_no_timeout(thread);
   2c6e2:	f7ff ff00 	bl	2c4e6 <unpend_thread_no_timeout>
   2c6e6:	f104 0018 	add.w	r0, r4, #24
   2c6ea:	f000 f85c 	bl	2c7a6 <z_abort_timeout>
   2c6ee:	e7ec      	b.n	2c6ca <z_unpend_first_thread+0x1a>
}
   2c6f0:	4620      	mov	r0, r4
   2c6f2:	bd70      	pop	{r4, r5, r6, pc}

0002c6f4 <z_unpend_all>:
{
   2c6f4:	b538      	push	{r3, r4, r5, lr}
   2c6f6:	4605      	mov	r5, r0
	int need_sched = 0;
   2c6f8:	2000      	movs	r0, #0
	return list->head == list;
   2c6fa:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2c6fc:	42a5      	cmp	r5, r4
   2c6fe:	d008      	beq.n	2c712 <z_unpend_all+0x1e>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2c700:	b13c      	cbz	r4, 2c712 <z_unpend_all+0x1e>
		z_unpend_thread(thread);
   2c702:	4620      	mov	r0, r4
   2c704:	f7ff fefd 	bl	2c502 <z_unpend_thread>
		z_ready_thread(thread);
   2c708:	4620      	mov	r0, r4
   2c70a:	f7ff ff1c 	bl	2c546 <z_ready_thread>
		need_sched = 1;
   2c70e:	2001      	movs	r0, #1
   2c710:	e7f3      	b.n	2c6fa <z_unpend_all+0x6>
}
   2c712:	bd38      	pop	{r3, r4, r5, pc}

0002c714 <init_ready_q>:
	sys_dlist_init(&rq->runq);
   2c714:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   2c716:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   2c718:	6083      	str	r3, [r0, #8]
}
   2c71a:	4770      	bx	lr

0002c71c <z_sched_wake>:
{
   2c71c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c720:	4606      	mov	r6, r0
   2c722:	4688      	mov	r8, r1
   2c724:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   2c726:	2300      	movs	r3, #0
	__asm__ volatile(
   2c728:	f04f 0240 	mov.w	r2, #64	; 0x40
   2c72c:	f3ef 8511 	mrs	r5, BASEPRI
   2c730:	f382 8812 	msr	BASEPRI_MAX, r2
   2c734:	f3bf 8f6f 	isb	sy
	bool ret = false;
   2c738:	4699      	mov	r9, r3
   2c73a:	e004      	b.n	2c746 <z_sched_wake+0x2a>
	__asm__ volatile(
   2c73c:	f385 8811 	msr	BASEPRI, r5
   2c740:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2c744:	2301      	movs	r3, #1
   2c746:	b9a3      	cbnz	r3, 2c772 <z_sched_wake+0x56>
		thread = _priq_wait_best(&wait_q->waitq);
   2c748:	4630      	mov	r0, r6
   2c74a:	f7ff fef5 	bl	2c538 <z_priq_dumb_best>
		if (thread != NULL) {
   2c74e:	4604      	mov	r4, r0
   2c750:	2800      	cmp	r0, #0
   2c752:	d0f3      	beq.n	2c73c <z_sched_wake+0x20>
   2c754:	f8c0 80b0 	str.w	r8, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
   2c758:	6147      	str	r7, [r0, #20]
			unpend_thread_no_timeout(thread);
   2c75a:	f7ff fec4 	bl	2c4e6 <unpend_thread_no_timeout>
   2c75e:	f104 0018 	add.w	r0, r4, #24
   2c762:	f000 f820 	bl	2c7a6 <z_abort_timeout>
			ready_thread(thread);
   2c766:	4620      	mov	r0, r4
   2c768:	f7f7 ff98 	bl	2469c <ready_thread>
			ret = true;
   2c76c:	f04f 0901 	mov.w	r9, #1
   2c770:	e7e4      	b.n	2c73c <z_sched_wake+0x20>
}
   2c772:	4648      	mov	r0, r9
   2c774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002c778 <remove_timeout>:
{
   2c778:	b510      	push	{r4, lr}
   2c77a:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   2c77c:	f7f8 fa7e 	bl	24c7c <next>
   2c780:	b148      	cbz	r0, 2c796 <remove_timeout+0x1e>
   2c782:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   2c784:	6903      	ldr	r3, [r0, #16]
   2c786:	6941      	ldr	r1, [r0, #20]
   2c788:	6920      	ldr	r0, [r4, #16]
   2c78a:	181b      	adds	r3, r3, r0
   2c78c:	6960      	ldr	r0, [r4, #20]
   2c78e:	eb41 0100 	adc.w	r1, r1, r0
   2c792:	6113      	str	r3, [r2, #16]
   2c794:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   2c796:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   2c798:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   2c79a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2c79c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2c79e:	2300      	movs	r3, #0
   2c7a0:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   2c7a2:	6063      	str	r3, [r4, #4]
}
   2c7a4:	bd10      	pop	{r4, pc}

0002c7a6 <z_abort_timeout>:
{
   2c7a6:	b570      	push	{r4, r5, r6, lr}
   2c7a8:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   2c7aa:	2300      	movs	r3, #0
	__asm__ volatile(
   2c7ac:	f04f 0240 	mov.w	r2, #64	; 0x40
   2c7b0:	f3ef 8611 	mrs	r6, BASEPRI
   2c7b4:	f382 8812 	msr	BASEPRI_MAX, r2
   2c7b8:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   2c7bc:	f06f 0015 	mvn.w	r0, #21
   2c7c0:	e004      	b.n	2c7cc <z_abort_timeout+0x26>
	__asm__ volatile(
   2c7c2:	f386 8811 	msr	BASEPRI, r6
   2c7c6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   2c7ca:	2301      	movs	r3, #1
   2c7cc:	461d      	mov	r5, r3
   2c7ce:	b93b      	cbnz	r3, 2c7e0 <z_abort_timeout+0x3a>
	return node->next != NULL;
   2c7d0:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   2c7d2:	2b00      	cmp	r3, #0
   2c7d4:	d0f5      	beq.n	2c7c2 <z_abort_timeout+0x1c>
			remove_timeout(to);
   2c7d6:	4620      	mov	r0, r4
   2c7d8:	f7ff ffce 	bl	2c778 <remove_timeout>
			ret = 0;
   2c7dc:	4628      	mov	r0, r5
   2c7de:	e7f0      	b.n	2c7c2 <z_abort_timeout+0x1c>
}
   2c7e0:	bd70      	pop	{r4, r5, r6, pc}

0002c7e2 <z_get_next_timeout_expiry>:
{
   2c7e2:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   2c7e4:	2300      	movs	r3, #0
	__asm__ volatile(
   2c7e6:	f04f 0240 	mov.w	r2, #64	; 0x40
   2c7ea:	f3ef 8411 	mrs	r4, BASEPRI
   2c7ee:	f382 8812 	msr	BASEPRI_MAX, r2
   2c7f2:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   2c7f6:	f04f 30ff 	mov.w	r0, #4294967295
   2c7fa:	e006      	b.n	2c80a <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
   2c7fc:	f7f8 fa56 	bl	24cac <next_timeout>
	__asm__ volatile(
   2c800:	f384 8811 	msr	BASEPRI, r4
   2c804:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   2c808:	2301      	movs	r3, #1
   2c80a:	2b00      	cmp	r3, #0
   2c80c:	d0f6      	beq.n	2c7fc <z_get_next_timeout_expiry+0x1a>
}
   2c80e:	bd10      	pop	{r4, pc}

0002c810 <z_set_timeout_expiry>:
{
   2c810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c812:	4606      	mov	r6, r0
   2c814:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   2c816:	2300      	movs	r3, #0
	__asm__ volatile(
   2c818:	f04f 0240 	mov.w	r2, #64	; 0x40
   2c81c:	f3ef 8511 	mrs	r5, BASEPRI
   2c820:	f382 8812 	msr	BASEPRI_MAX, r2
   2c824:	f3bf 8f6f 	isb	sy
   2c828:	e00a      	b.n	2c840 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   2c82a:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   2c82c:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2c830:	2801      	cmp	r0, #1
   2c832:	dd00      	ble.n	2c836 <z_set_timeout_expiry+0x26>
   2c834:	b97c      	cbnz	r4, 2c856 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   2c836:	f385 8811 	msr	BASEPRI, r5
   2c83a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   2c83e:	2301      	movs	r3, #1
   2c840:	461c      	mov	r4, r3
   2c842:	b97b      	cbnz	r3, 2c864 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   2c844:	f7f8 fa32 	bl	24cac <next_timeout>
			      || (ticks <= next_to);
   2c848:	f1b0 3fff 	cmp.w	r0, #4294967295
   2c84c:	d0ed      	beq.n	2c82a <z_set_timeout_expiry+0x1a>
   2c84e:	42b0      	cmp	r0, r6
   2c850:	dbec      	blt.n	2c82c <z_set_timeout_expiry+0x1c>
   2c852:	2401      	movs	r4, #1
   2c854:	e7ea      	b.n	2c82c <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2c856:	4639      	mov	r1, r7
   2c858:	42b0      	cmp	r0, r6
   2c85a:	bfa8      	it	ge
   2c85c:	4630      	movge	r0, r6
   2c85e:	f7f4 fdc9 	bl	213f4 <sys_clock_set_timeout>
   2c862:	e7e8      	b.n	2c836 <z_set_timeout_expiry+0x26>
}
   2c864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002c866 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2c866:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2c868:	f7f8 fb32 	bl	24ed0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2c86c:	bd08      	pop	{r3, pc}

0002c86e <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   2c86e:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   2c870:	f7f8 fb2e 	bl	24ed0 <sys_clock_tick_get>
}
   2c874:	bd08      	pop	{r3, pc}

0002c876 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2c876:	b900      	cbnz	r0, 2c87a <z_impl_k_busy_wait+0x4>
   2c878:	4770      	bx	lr
{
   2c87a:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2c87c:	f7ea fa0c 	bl	16c98 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2c880:	bd08      	pop	{r3, pc}

0002c882 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   2c882:	b538      	push	{r3, r4, r5, lr}
   2c884:	460c      	mov	r4, r1
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2c886:	f1b1 3fff 	cmp.w	r1, #4294967295
   2c88a:	bf08      	it	eq
   2c88c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   2c890:	d020      	beq.n	2c8d4 <sys_clock_timeout_end_calc+0x52>
   2c892:	4605      	mov	r5, r0
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2c894:	ea51 0300 	orrs.w	r3, r1, r0
   2c898:	d009      	beq.n	2c8ae <sys_clock_timeout_end_calc+0x2c>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2c89a:	f06f 0301 	mvn.w	r3, #1
   2c89e:	1a18      	subs	r0, r3, r0
   2c8a0:	f04f 33ff 	mov.w	r3, #4294967295
   2c8a4:	eb63 0101 	sbc.w	r1, r3, r1
   2c8a8:	2900      	cmp	r1, #0
   2c8aa:	db03      	blt.n	2c8b4 <sys_clock_timeout_end_calc+0x32>
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2c8ac:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   2c8ae:	f7f8 fb0f 	bl	24ed0 <sys_clock_tick_get>
   2c8b2:	e7fb      	b.n	2c8ac <sys_clock_timeout_end_calc+0x2a>
		return sys_clock_tick_get() + MAX(1, dt);
   2c8b4:	f7f8 fb0c 	bl	24ed0 <sys_clock_tick_get>
   2c8b8:	4603      	mov	r3, r0
   2c8ba:	462a      	mov	r2, r5
   2c8bc:	46a4      	mov	ip, r4
   2c8be:	2d01      	cmp	r5, #1
   2c8c0:	f174 0400 	sbcs.w	r4, r4, #0
   2c8c4:	da02      	bge.n	2c8cc <sys_clock_timeout_end_calc+0x4a>
   2c8c6:	2201      	movs	r2, #1
   2c8c8:	f04f 0c00 	mov.w	ip, #0
   2c8cc:	1898      	adds	r0, r3, r2
   2c8ce:	eb41 010c 	adc.w	r1, r1, ip
   2c8d2:	e7eb      	b.n	2c8ac <sys_clock_timeout_end_calc+0x2a>
		return UINT64_MAX;
   2c8d4:	f04f 30ff 	mov.w	r0, #4294967295
   2c8d8:	4601      	mov	r1, r0
   2c8da:	e7e7      	b.n	2c8ac <sys_clock_timeout_end_calc+0x2a>

0002c8dc <z_reschedule_unlocked>:
{
   2c8dc:	b508      	push	{r3, lr}
	__asm__ volatile(
   2c8de:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c8e2:	f3ef 8011 	mrs	r0, BASEPRI
   2c8e6:	f383 8812 	msr	BASEPRI_MAX, r3
   2c8ea:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2c8ee:	f7ff fdd8 	bl	2c4a2 <z_reschedule_irqlock>
}
   2c8f2:	bd08      	pop	{r3, pc}

0002c8f4 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   2c8f4:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   2c8f6:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   2c8f8:	2300      	movs	r3, #0
   2c8fa:	6303      	str	r3, [r0, #48]	; 0x30
   2c8fc:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   2c900:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   2c902:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   2c904:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   2c906:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   2c908:	6343      	str	r3, [r0, #52]	; 0x34
}
   2c90a:	4770      	bx	lr

0002c90c <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2c90c:	b510      	push	{r4, lr}
   2c90e:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   2c910:	f7ff ff49 	bl	2c7a6 <z_abort_timeout>

	if (inactive) {
   2c914:	b960      	cbnz	r0, 2c930 <z_impl_k_timer_stop+0x24>
		return;
	}

	if (timer->stop_fn != NULL) {
   2c916:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2c918:	b10b      	cbz	r3, 2c91e <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2c91a:	4620      	mov	r0, r4
   2c91c:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2c91e:	f104 0018 	add.w	r0, r4, #24
   2c922:	f7ff fea7 	bl	2c674 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2c926:	b118      	cbz	r0, 2c930 <z_impl_k_timer_stop+0x24>
			z_ready_thread(pending_thread);
   2c928:	f7ff fe0d 	bl	2c546 <z_ready_thread>
			z_reschedule_unlocked();
   2c92c:	f7ff ffd6 	bl	2c8dc <z_reschedule_unlocked>
		}
	}
}
   2c930:	bd10      	pop	{r4, pc}

0002c932 <is_condition_met>:
	switch (event->type) {
   2c932:	7b43      	ldrb	r3, [r0, #13]
   2c934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2c938:	3b01      	subs	r3, #1
   2c93a:	2b07      	cmp	r3, #7
   2c93c:	d826      	bhi.n	2c98c <is_condition_met+0x5a>
   2c93e:	e8df f003 	tbb	[pc, r3]
   2c942:	0414      	.short	0x0414
   2c944:	25250d25 	.word	0x25250d25
   2c948:	1c25      	.short	0x1c25
		if (k_sem_count_get(event->sem) > 0U) {
   2c94a:	6903      	ldr	r3, [r0, #16]
	return sem->count;
   2c94c:	689b      	ldr	r3, [r3, #8]
   2c94e:	b90b      	cbnz	r3, 2c954 <is_condition_met+0x22>
	return false;
   2c950:	2000      	movs	r0, #0
   2c952:	4770      	bx	lr
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2c954:	2302      	movs	r3, #2
   2c956:	600b      	str	r3, [r1, #0]
			return true;
   2c958:	2001      	movs	r0, #1
   2c95a:	4770      	bx	lr
		if (!k_queue_is_empty(event->queue)) {
   2c95c:	6903      	ldr	r3, [r0, #16]
	return list->head;
   2c95e:	681b      	ldr	r3, [r3, #0]
   2c960:	b1b3      	cbz	r3, 2c990 <is_condition_met+0x5e>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2c962:	2304      	movs	r3, #4
   2c964:	600b      	str	r3, [r1, #0]
			return true;
   2c966:	2001      	movs	r0, #1
   2c968:	4770      	bx	lr
		if (event->signal->signaled != 0U) {
   2c96a:	6903      	ldr	r3, [r0, #16]
   2c96c:	689b      	ldr	r3, [r3, #8]
   2c96e:	b90b      	cbnz	r3, 2c974 <is_condition_met+0x42>
	return false;
   2c970:	2000      	movs	r0, #0
   2c972:	4770      	bx	lr
			*state = K_POLL_STATE_SIGNALED;
   2c974:	2001      	movs	r0, #1
   2c976:	6008      	str	r0, [r1, #0]
			return true;
   2c978:	4770      	bx	lr
		if (event->msgq->used_msgs > 0) {
   2c97a:	6903      	ldr	r3, [r0, #16]
   2c97c:	6a1b      	ldr	r3, [r3, #32]
   2c97e:	b90b      	cbnz	r3, 2c984 <is_condition_met+0x52>
	return false;
   2c980:	2000      	movs	r0, #0
}
   2c982:	4770      	bx	lr
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2c984:	2310      	movs	r3, #16
   2c986:	600b      	str	r3, [r1, #0]
			return true;
   2c988:	2001      	movs	r0, #1
   2c98a:	4770      	bx	lr
	switch (event->type) {
   2c98c:	2000      	movs	r0, #0
   2c98e:	4770      	bx	lr
	return false;
   2c990:	2000      	movs	r0, #0
   2c992:	4770      	bx	lr

0002c994 <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2c994:	b108      	cbz	r0, 2c99a <poller_thread+0x6>
   2c996:	3860      	subs	r0, #96	; 0x60
   2c998:	4770      	bx	lr
}
   2c99a:	4770      	bx	lr

0002c99c <clear_event_registration>:
	event->poller = NULL;
   2c99c:	2300      	movs	r3, #0
   2c99e:	6083      	str	r3, [r0, #8]
	switch (event->type) {
   2c9a0:	7b43      	ldrb	r3, [r0, #13]
   2c9a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2c9a6:	2b08      	cmp	r3, #8
   2c9a8:	d80e      	bhi.n	2c9c8 <clear_event_registration+0x2c>
   2c9aa:	f44f 728b 	mov.w	r2, #278	; 0x116
   2c9ae:	fa22 f303 	lsr.w	r3, r2, r3
   2c9b2:	f013 0f01 	tst.w	r3, #1
   2c9b6:	d007      	beq.n	2c9c8 <clear_event_registration+0x2c>
	return node->next != NULL;
   2c9b8:	6803      	ldr	r3, [r0, #0]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2c9ba:	b12b      	cbz	r3, 2c9c8 <clear_event_registration+0x2c>
	sys_dnode_t *const prev = node->prev;
   2c9bc:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   2c9be:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2c9c0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2c9c2:	2300      	movs	r3, #0
   2c9c4:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   2c9c6:	6043      	str	r3, [r0, #4]
}
   2c9c8:	4770      	bx	lr

0002c9ca <clear_event_registrations>:
{
   2c9ca:	b570      	push	{r4, r5, r6, lr}
   2c9cc:	4606      	mov	r6, r0
   2c9ce:	4614      	mov	r4, r2
	while (num_events--) {
   2c9d0:	e012      	b.n	2c9f8 <clear_event_registrations+0x2e>
		clear_event_registration(&events[num_events]);
   2c9d2:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   2c9d6:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   2c9da:	f7ff ffdf 	bl	2c99c <clear_event_registration>
	__asm__ volatile(
   2c9de:	f384 8811 	msr	BASEPRI, r4
   2c9e2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2c9e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c9ea:	f3ef 8411 	mrs	r4, BASEPRI
   2c9ee:	f383 8812 	msr	BASEPRI_MAX, r3
   2c9f2:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   2c9f6:	4629      	mov	r1, r5
   2c9f8:	1e4d      	subs	r5, r1, #1
   2c9fa:	2900      	cmp	r1, #0
   2c9fc:	d1e9      	bne.n	2c9d2 <clear_event_registrations+0x8>
}
   2c9fe:	bd70      	pop	{r4, r5, r6, pc}

0002ca00 <add_event>:
{
   2ca00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ca04:	4605      	mov	r5, r0
   2ca06:	460e      	mov	r6, r1
	return list->head == list;
   2ca08:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2ca0a:	4298      	cmp	r0, r3
   2ca0c:	d015      	beq.n	2ca3a <add_event+0x3a>
   2ca0e:	4614      	mov	r4, r2
   2ca10:	6843      	ldr	r3, [r0, #4]
	if ((pending == NULL) ||
   2ca12:	b193      	cbz	r3, 2ca3a <add_event+0x3a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2ca14:	6898      	ldr	r0, [r3, #8]
   2ca16:	f7ff ffbd 	bl	2c994 <poller_thread>
   2ca1a:	4680      	mov	r8, r0
   2ca1c:	4620      	mov	r0, r4
   2ca1e:	f7ff ffb9 	bl	2c994 <poller_thread>
   2ca22:	4607      	mov	r7, r0
   2ca24:	4601      	mov	r1, r0
   2ca26:	4640      	mov	r0, r8
   2ca28:	f7ff fd1a 	bl	2c460 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2ca2c:	2800      	cmp	r0, #0
   2ca2e:	dc04      	bgt.n	2ca3a <add_event+0x3a>
	return list->head == list;
   2ca30:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ca32:	42a5      	cmp	r5, r4
   2ca34:	d10f      	bne.n	2ca56 <add_event+0x56>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2ca36:	2400      	movs	r4, #0
   2ca38:	e00d      	b.n	2ca56 <add_event+0x56>
	sys_dnode_t *const tail = list->tail;
   2ca3a:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   2ca3c:	6035      	str	r5, [r6, #0]
	node->prev = tail;
   2ca3e:	6073      	str	r3, [r6, #4]
	tail->next = node;
   2ca40:	601e      	str	r6, [r3, #0]
	list->tail = node;
   2ca42:	606e      	str	r6, [r5, #4]
}
   2ca44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	sys_dnode_t *const prev = successor->prev;
   2ca48:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   2ca4a:	6073      	str	r3, [r6, #4]
	node->next = successor;
   2ca4c:	6034      	str	r4, [r6, #0]
	prev->next = node;
   2ca4e:	601e      	str	r6, [r3, #0]
	successor->prev = node;
   2ca50:	6066      	str	r6, [r4, #4]
			return;
   2ca52:	e7f7      	b.n	2ca44 <add_event+0x44>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2ca54:	2400      	movs	r4, #0
   2ca56:	b19c      	cbz	r4, 2ca80 <add_event+0x80>
		if (z_sched_prio_cmp(poller_thread(poller),
   2ca58:	68a0      	ldr	r0, [r4, #8]
   2ca5a:	f7ff ff9b 	bl	2c994 <poller_thread>
   2ca5e:	4601      	mov	r1, r0
   2ca60:	4638      	mov	r0, r7
   2ca62:	f7ff fcfd 	bl	2c460 <z_sched_prio_cmp>
   2ca66:	2800      	cmp	r0, #0
   2ca68:	dcee      	bgt.n	2ca48 <add_event+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2ca6a:	4622      	mov	r2, r4
	return (node == list->tail) ? NULL : node->next;
   2ca6c:	686b      	ldr	r3, [r5, #4]
   2ca6e:	429c      	cmp	r4, r3
   2ca70:	d0f0      	beq.n	2ca54 <add_event+0x54>
   2ca72:	6824      	ldr	r4, [r4, #0]
   2ca74:	2c00      	cmp	r4, #0
   2ca76:	d0ee      	beq.n	2ca56 <add_event+0x56>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2ca78:	2a00      	cmp	r2, #0
   2ca7a:	d1ec      	bne.n	2ca56 <add_event+0x56>
   2ca7c:	4614      	mov	r4, r2
   2ca7e:	e7ea      	b.n	2ca56 <add_event+0x56>
	sys_dnode_t *const tail = list->tail;
   2ca80:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   2ca82:	6035      	str	r5, [r6, #0]
	node->prev = tail;
   2ca84:	6073      	str	r3, [r6, #4]
	tail->next = node;
   2ca86:	601e      	str	r6, [r3, #0]
	list->tail = node;
   2ca88:	606e      	str	r6, [r5, #4]
}
   2ca8a:	e7db      	b.n	2ca44 <add_event+0x44>

0002ca8c <register_event>:
{
   2ca8c:	b538      	push	{r3, r4, r5, lr}
   2ca8e:	4604      	mov	r4, r0
   2ca90:	460d      	mov	r5, r1
	switch (event->type) {
   2ca92:	7b43      	ldrb	r3, [r0, #13]
   2ca94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2ca98:	3b01      	subs	r3, #1
   2ca9a:	2b07      	cmp	r3, #7
   2ca9c:	d80b      	bhi.n	2cab6 <register_event+0x2a>
   2ca9e:	e8df f003 	tbb	[pc, r3]
   2caa2:	0413      	.short	0x0413
   2caa4:	0a0a0c0a 	.word	0x0a0a0c0a
   2caa8:	190a      	.short	0x190a
		add_event(&event->sem->poll_events, event, poller);
   2caaa:	6900      	ldr	r0, [r0, #16]
   2caac:	460a      	mov	r2, r1
   2caae:	4621      	mov	r1, r4
   2cab0:	3010      	adds	r0, #16
   2cab2:	f7ff ffa5 	bl	2ca00 <add_event>
	event->poller = poller;
   2cab6:	60a5      	str	r5, [r4, #8]
}
   2cab8:	bd38      	pop	{r3, r4, r5, pc}
		add_event(&event->queue->poll_events, event, poller);
   2caba:	6900      	ldr	r0, [r0, #16]
   2cabc:	460a      	mov	r2, r1
   2cabe:	4621      	mov	r1, r4
   2cac0:	3010      	adds	r0, #16
   2cac2:	f7ff ff9d 	bl	2ca00 <add_event>
		break;
   2cac6:	e7f6      	b.n	2cab6 <register_event+0x2a>
		add_event(&event->signal->poll_events, event, poller);
   2cac8:	460a      	mov	r2, r1
   2caca:	4601      	mov	r1, r0
   2cacc:	6900      	ldr	r0, [r0, #16]
   2cace:	f7ff ff97 	bl	2ca00 <add_event>
		break;
   2cad2:	e7f0      	b.n	2cab6 <register_event+0x2a>
		add_event(&event->msgq->poll_events, event, poller);
   2cad4:	6900      	ldr	r0, [r0, #16]
   2cad6:	460a      	mov	r2, r1
   2cad8:	4621      	mov	r1, r4
   2cada:	3024      	adds	r0, #36	; 0x24
   2cadc:	f7ff ff90 	bl	2ca00 <add_event>
		break;
   2cae0:	e7e9      	b.n	2cab6 <register_event+0x2a>

0002cae2 <register_events>:
{
   2cae2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cae6:	b083      	sub	sp, #12
   2cae8:	4680      	mov	r8, r0
   2caea:	460f      	mov	r7, r1
   2caec:	4691      	mov	r9, r2
   2caee:	469a      	mov	sl, r3
	for (int ii = 0; ii < num_events; ii++) {
   2caf0:	2500      	movs	r5, #0
	int events_registered = 0;
   2caf2:	46ab      	mov	fp, r5
	for (int ii = 0; ii < num_events; ii++) {
   2caf4:	e00a      	b.n	2cb0c <register_events+0x2a>
		} else if (!just_check && poller->is_polling) {
   2caf6:	f1ba 0f00 	cmp.w	sl, #0
   2cafa:	d102      	bne.n	2cb02 <register_events+0x20>
   2cafc:	f899 3000 	ldrb.w	r3, [r9]
   2cb00:	bb2b      	cbnz	r3, 2cb4e <register_events+0x6c>
	__asm__ volatile(
   2cb02:	f386 8811 	msr	BASEPRI, r6
   2cb06:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2cb0a:	3501      	adds	r5, #1
   2cb0c:	42bd      	cmp	r5, r7
   2cb0e:	da25      	bge.n	2cb5c <register_events+0x7a>
	__asm__ volatile(
   2cb10:	f04f 0340 	mov.w	r3, #64	; 0x40
   2cb14:	f3ef 8611 	mrs	r6, BASEPRI
   2cb18:	f383 8812 	msr	BASEPRI_MAX, r3
   2cb1c:	f3bf 8f6f 	isb	sy
		if (is_condition_met(&events[ii], &state)) {
   2cb20:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   2cb24:	eb08 0484 	add.w	r4, r8, r4, lsl #2
   2cb28:	a901      	add	r1, sp, #4
   2cb2a:	4620      	mov	r0, r4
   2cb2c:	f7ff ff01 	bl	2c932 <is_condition_met>
   2cb30:	2800      	cmp	r0, #0
   2cb32:	d0e0      	beq.n	2caf6 <register_events+0x14>
	event->poller = NULL;
   2cb34:	2100      	movs	r1, #0
   2cb36:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   2cb38:	68e3      	ldr	r3, [r4, #12]
   2cb3a:	f3c3 3286 	ubfx	r2, r3, #14, #7
   2cb3e:	9801      	ldr	r0, [sp, #4]
   2cb40:	4302      	orrs	r2, r0
   2cb42:	f362 3394 	bfi	r3, r2, #14, #7
   2cb46:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   2cb48:	f889 1000 	strb.w	r1, [r9]
   2cb4c:	e7d9      	b.n	2cb02 <register_events+0x20>
			register_event(&events[ii], poller);
   2cb4e:	4649      	mov	r1, r9
   2cb50:	4620      	mov	r0, r4
   2cb52:	f7ff ff9b 	bl	2ca8c <register_event>
			events_registered += 1;
   2cb56:	f10b 0b01 	add.w	fp, fp, #1
   2cb5a:	e7d2      	b.n	2cb02 <register_events+0x20>
}
   2cb5c:	4658      	mov	r0, fp
   2cb5e:	b003      	add	sp, #12
   2cb60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002cb64 <signal_poller>:
{
   2cb64:	b538      	push	{r3, r4, r5, lr}
   2cb66:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   2cb68:	6880      	ldr	r0, [r0, #8]
   2cb6a:	f7ff ff13 	bl	2c994 <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   2cb6e:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
   2cb70:	f013 0f02 	tst.w	r3, #2
   2cb74:	d025      	beq.n	2cbc2 <signal_poller+0x5e>
   2cb76:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
   2cb78:	6a82      	ldr	r2, [r0, #40]	; 0x28
   2cb7a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (z_is_thread_timeout_expired(thread)) {
   2cb7c:	f1b3 3fff 	cmp.w	r3, #4294967295
   2cb80:	bf08      	it	eq
   2cb82:	f112 0f02 	cmneq.w	r2, #2
   2cb86:	d01e      	beq.n	2cbc6 <signal_poller+0x62>
	z_unpend_thread(thread);
   2cb88:	f7ff fcbb 	bl	2c502 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2cb8c:	2d08      	cmp	r5, #8
   2cb8e:	d00a      	beq.n	2cba6 <signal_poller+0x42>
   2cb90:	2300      	movs	r3, #0
   2cb92:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   2cb96:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2cb98:	f013 0f1f 	tst.w	r3, #31
   2cb9c:	d108      	bne.n	2cbb0 <signal_poller+0x4c>
	return node->next != NULL;
   2cb9e:	69a3      	ldr	r3, [r4, #24]
   2cba0:	b123      	cbz	r3, 2cbac <signal_poller+0x48>
   2cba2:	2300      	movs	r3, #0
   2cba4:	e005      	b.n	2cbb2 <signal_poller+0x4e>
   2cba6:	f06f 0303 	mvn.w	r3, #3
   2cbaa:	e7f2      	b.n	2cb92 <signal_poller+0x2e>
   2cbac:	2301      	movs	r3, #1
   2cbae:	e000      	b.n	2cbb2 <signal_poller+0x4e>
   2cbb0:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
   2cbb2:	b90b      	cbnz	r3, 2cbb8 <signal_poller+0x54>
		return 0;
   2cbb4:	2000      	movs	r0, #0
   2cbb6:	e005      	b.n	2cbc4 <signal_poller+0x60>
	z_ready_thread(thread);
   2cbb8:	4620      	mov	r0, r4
   2cbba:	f7ff fcc4 	bl	2c546 <z_ready_thread>
	return 0;
   2cbbe:	2000      	movs	r0, #0
   2cbc0:	e000      	b.n	2cbc4 <signal_poller+0x60>
		return 0;
   2cbc2:	2000      	movs	r0, #0
}
   2cbc4:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   2cbc6:	f06f 000a 	mvn.w	r0, #10
   2cbca:	e7fb      	b.n	2cbc4 <signal_poller+0x60>

0002cbcc <signal_triggered_work>:

extern int z_work_submit_to_queue(struct k_work_q *queue,
			 struct k_work *work);

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   2cbcc:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   2cbce:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2cbd0:	7823      	ldrb	r3, [r4, #0]
   2cbd2:	b173      	cbz	r3, 2cbf2 <signal_triggered_work+0x26>
   2cbd4:	f854 5c04 	ldr.w	r5, [r4, #-4]
   2cbd8:	b15d      	cbz	r5, 2cbf2 <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   2cbda:	f1a4 0614 	sub.w	r6, r4, #20
   2cbde:	f104 0014 	add.w	r0, r4, #20
   2cbe2:	f7ff fde0 	bl	2c7a6 <z_abort_timeout>
		twork->poll_result = 0;
   2cbe6:	2300      	movs	r3, #0
   2cbe8:	62e3      	str	r3, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   2cbea:	4631      	mov	r1, r6
   2cbec:	4628      	mov	r0, r5
   2cbee:	f7ff fb80 	bl	2c2f2 <z_work_submit_to_queue>
	}

	return 0;
}
   2cbf2:	2000      	movs	r0, #0
   2cbf4:	bd70      	pop	{r4, r5, r6, pc}

0002cbf6 <signal_poll_event>:
{
   2cbf6:	b570      	push	{r4, r5, r6, lr}
   2cbf8:	4604      	mov	r4, r0
   2cbfa:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   2cbfc:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   2cbfe:	b1d6      	cbz	r6, 2cc36 <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   2cc00:	7873      	ldrb	r3, [r6, #1]
   2cc02:	2b01      	cmp	r3, #1
   2cc04:	d00d      	beq.n	2cc22 <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   2cc06:	2b02      	cmp	r3, #2
   2cc08:	d012      	beq.n	2cc30 <signal_poll_event+0x3a>
		poller->is_polling = false;
   2cc0a:	2000      	movs	r0, #0
   2cc0c:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   2cc0e:	2300      	movs	r3, #0
   2cc10:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   2cc12:	68e3      	ldr	r3, [r4, #12]
   2cc14:	f3c3 3286 	ubfx	r2, r3, #14, #7
   2cc18:	432a      	orrs	r2, r5
   2cc1a:	f362 3394 	bfi	r3, r2, #14, #7
   2cc1e:	60e3      	str	r3, [r4, #12]
}
   2cc20:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   2cc22:	f7ff ff9f 	bl	2cb64 <signal_poller>
		poller->is_polling = false;
   2cc26:	2300      	movs	r3, #0
   2cc28:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   2cc2a:	4298      	cmp	r0, r3
   2cc2c:	daef      	bge.n	2cc0e <signal_poll_event+0x18>
   2cc2e:	e7f7      	b.n	2cc20 <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   2cc30:	f7ff ffcc 	bl	2cbcc <signal_triggered_work>
   2cc34:	e7f7      	b.n	2cc26 <signal_poll_event+0x30>
	int retcode = 0;
   2cc36:	2000      	movs	r0, #0
   2cc38:	e7e9      	b.n	2cc0e <signal_poll_event+0x18>

0002cc3a <k_poll_event_init>:
{
   2cc3a:	b410      	push	{r4}
	event->poller = NULL;
   2cc3c:	2400      	movs	r4, #0
   2cc3e:	6084      	str	r4, [r0, #8]
	event->type = type;
   2cc40:	f890 c00d 	ldrb.w	ip, [r0, #13]
   2cc44:	f361 0c05 	bfi	ip, r1, #0, #6
   2cc48:	f880 c00d 	strb.w	ip, [r0, #13]
	event->state = K_POLL_STATE_NOT_READY;
   2cc4c:	68c1      	ldr	r1, [r0, #12]
   2cc4e:	f364 3194 	bfi	r1, r4, #14, #7
   2cc52:	60c1      	str	r1, [r0, #12]
	event->mode = mode;
   2cc54:	7b81      	ldrb	r1, [r0, #14]
   2cc56:	f362 1145 	bfi	r1, r2, #5, #1
   2cc5a:	7381      	strb	r1, [r0, #14]
	event->unused = 0U;
   2cc5c:	89c2      	ldrh	r2, [r0, #14]
   2cc5e:	f364 128f 	bfi	r2, r4, #6, #10
   2cc62:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   2cc64:	6103      	str	r3, [r0, #16]
}
   2cc66:	bc10      	pop	{r4}
   2cc68:	4770      	bx	lr

0002cc6a <z_handle_obj_poll_events>:
{
   2cc6a:	b508      	push	{r3, lr}
   2cc6c:	4603      	mov	r3, r0
	return list->head == list;
   2cc6e:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2cc70:	4283      	cmp	r3, r0
   2cc72:	d008      	beq.n	2cc86 <z_handle_obj_poll_events+0x1c>
	sys_dnode_t *const prev = node->prev;
   2cc74:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   2cc76:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   2cc78:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2cc7a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2cc7c:	2300      	movs	r3, #0
   2cc7e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   2cc80:	6043      	str	r3, [r0, #4]
		(void) signal_poll_event(poll_event, state);
   2cc82:	f7ff ffb8 	bl	2cbf6 <signal_poll_event>
}
   2cc86:	bd08      	pop	{r3, pc}

0002cc88 <z_impl_k_poll_signal_init>:
	list->head = (sys_dnode_t *)list;
   2cc88:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   2cc8a:	6040      	str	r0, [r0, #4]
	sig->signaled = 0U;
   2cc8c:	2300      	movs	r3, #0
   2cc8e:	6083      	str	r3, [r0, #8]
}
   2cc90:	4770      	bx	lr

0002cc92 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   2cc92:	2300      	movs	r3, #0
   2cc94:	6083      	str	r3, [r0, #8]
}
   2cc96:	4770      	bx	lr

0002cc98 <z_heap_aligned_alloc>:
{
   2cc98:	b5d0      	push	{r4, r6, r7, lr}
   2cc9a:	b082      	sub	sp, #8
   2cc9c:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   2cc9e:	2300      	movs	r3, #0
   2cca0:	3204      	adds	r2, #4
   2cca2:	d20e      	bcs.n	2ccc2 <z_heap_aligned_alloc+0x2a>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   2cca4:	b97b      	cbnz	r3, 2ccc6 <z_heap_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   2cca6:	2600      	movs	r6, #0
   2cca8:	2700      	movs	r7, #0
   2ccaa:	e9cd 6700 	strd	r6, r7, [sp]
   2ccae:	f041 0104 	orr.w	r1, r1, #4
   2ccb2:	4620      	mov	r0, r4
   2ccb4:	f7ff f851 	bl	2bd5a <k_heap_aligned_alloc>
	if (mem == NULL) {
   2ccb8:	b108      	cbz	r0, 2ccbe <z_heap_aligned_alloc+0x26>
	*heap_ref = heap;
   2ccba:	f840 4b04 	str.w	r4, [r0], #4
}
   2ccbe:	b002      	add	sp, #8
   2ccc0:	bdd0      	pop	{r4, r6, r7, pc}
   2ccc2:	2301      	movs	r3, #1
   2ccc4:	e7ee      	b.n	2cca4 <z_heap_aligned_alloc+0xc>
		return NULL;
   2ccc6:	2000      	movs	r0, #0
   2ccc8:	e7f9      	b.n	2ccbe <z_heap_aligned_alloc+0x26>

0002ccca <k_free>:
	if (ptr != NULL) {
   2ccca:	b130      	cbz	r0, 2ccda <k_free+0x10>
{
   2cccc:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   2ccce:	1f01      	subs	r1, r0, #4
   2ccd0:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2ccd4:	f7ff f897 	bl	2be06 <k_heap_free>
}
   2ccd8:	bd08      	pop	{r3, pc}
   2ccda:	4770      	bx	lr

0002ccdc <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2ccdc:	4770      	bx	lr
	...
