
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	40 95 00 20 05 5c 01 00 b5 5e 02 00 bd 5b 01 00     @.. .\...^...[..
  10:	bd 5b 01 00 bd 5b 01 00 bd 5b 01 00 00 00 00 00     .[...[...[......
	...
  2c:	e9 4c 01 00 bd 5b 01 00 00 00 00 00 91 4c 01 00     .L...[.......L..
  3c:	bd 5b 01 00                                         .[..

00000040 <_irq_vector_table>:
  40:	c1 4d 01 00 bd 9a 02 00 c1 4d 01 00 c1 4d 01 00     .M.......M...M..
  50:	c1 4d 01 00 c1 4d 01 00 c1 4d 01 00 c1 4d 01 00     .M...M...M...M..
  60:	85 9a 02 00 c1 4d 01 00 c1 4d 01 00 a3 9a 02 00     .....M...M......
  70:	c1 4d 01 00 c1 4d 01 00 c1 4d 01 00 c1 4d 01 00     .M...M...M...M..
  80:	c1 4d 01 00 c1 4d 01 00 c1 4d 01 00 c1 4d 01 00     .M...M...M...M..
  90:	c1 4d 01 00 c1 4d 01 00 c1 4d 01 00 c1 4d 01 00     .M...M...M...M..
  a0:	c1 4d 01 00 c1 4d 01 00 c1 4d 01 00 c1 4d 01 00     .M...M...M...M..
  b0:	c1 4d 01 00 c1 4d 01 00 c1 4d 01 00 c1 4d 01 00     .M...M...M...M..
  c0:	c1 4d 01 00 c1 4d 01 00 c1 4d 01 00 c1 4d 01 00     .M...M...M...M..
  d0:	c1 4d 01 00 c1 4d 01 00 c1 4d 01 00 c1 4d 01 00     .M...M...M...M..
  e0:	c1 4d 01 00 c1 4d 01 00 c1 4d 01 00 c1 4d 01 00     .M...M...M...M..
  f0:	c1 4d 01 00 c1 4d 01 00 c1 4d 01 00 c1 4d 01 00     .M...M...M...M..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f00c faea 	bl	c6f8 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <ocrypto_bigint_add256>:
     134:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     138:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     13c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     140:	185b      	adds	r3, r3, r1
     142:	eb54 040c 	adcs.w	r4, r4, ip
     146:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     14a:	414d      	adcs	r5, r1
     14c:	eb56 060c 	adcs.w	r6, r6, ip
     150:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     154:	414f      	adcs	r7, r1
     156:	eb58 080c 	adcs.w	r8, r8, ip
     15a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     15e:	eb59 0901 	adcs.w	r9, r9, r1
     162:	eb5a 0a0c 	adcs.w	sl, sl, ip
     166:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     16a:	4180      	sbcs	r0, r0
     16c:	3001      	adds	r0, #1
     16e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     172:	4770      	bx	lr

00000174 <ocrypto_bigint_sub256>:
     174:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     178:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     17c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     180:	1a5b      	subs	r3, r3, r1
     182:	eb74 040c 	sbcs.w	r4, r4, ip
     186:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     18a:	418d      	sbcs	r5, r1
     18c:	eb76 060c 	sbcs.w	r6, r6, ip
     190:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     194:	418f      	sbcs	r7, r1
     196:	eb78 080c 	sbcs.w	r8, r8, ip
     19a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     19e:	eb79 0901 	sbcs.w	r9, r9, r1
     1a2:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     1a6:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     1aa:	4180      	sbcs	r0, r0
     1ac:	4240      	negs	r0, r0
     1ae:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1b2:	4770      	bx	lr

000001b4 <ocrypto_bigint_cadd256>:
     1b4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1b8:	4252      	negs	r2, r2
     1ba:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1be:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1c2:	4017      	ands	r7, r2
     1c4:	19db      	adds	r3, r3, r7
     1c6:	ea18 0802 	ands.w	r8, r8, r2
     1ca:	eb54 0408 	adcs.w	r4, r4, r8
     1ce:	ea19 0902 	ands.w	r9, r9, r2
     1d2:	eb55 0509 	adcs.w	r5, r5, r9
     1d6:	ea1a 0a02 	ands.w	sl, sl, r2
     1da:	eb56 060a 	adcs.w	r6, r6, sl
     1de:	c078      	stmia	r0!, {r3, r4, r5, r6}
     1e0:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1e4:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1e8:	4017      	ands	r7, r2
     1ea:	417b      	adcs	r3, r7
     1ec:	ea18 0802 	ands.w	r8, r8, r2
     1f0:	eb54 0408 	adcs.w	r4, r4, r8
     1f4:	ea19 0902 	ands.w	r9, r9, r2
     1f8:	eb55 0509 	adcs.w	r5, r5, r9
     1fc:	ea1a 0a02 	ands.w	sl, sl, r2
     200:	eb56 060a 	adcs.w	r6, r6, sl
     204:	c078      	stmia	r0!, {r3, r4, r5, r6}
     206:	4180      	sbcs	r0, r0
     208:	3001      	adds	r0, #1
     20a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     20e:	4770      	bx	lr

00000210 <ocrypto_bigint_csub256>:
     210:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     214:	4252      	negs	r2, r2
     216:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     21a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     21e:	4017      	ands	r7, r2
     220:	1bdb      	subs	r3, r3, r7
     222:	ea18 0802 	ands.w	r8, r8, r2
     226:	eb74 0408 	sbcs.w	r4, r4, r8
     22a:	ea19 0902 	ands.w	r9, r9, r2
     22e:	eb75 0509 	sbcs.w	r5, r5, r9
     232:	ea1a 0a02 	ands.w	sl, sl, r2
     236:	eb76 060a 	sbcs.w	r6, r6, sl
     23a:	c078      	stmia	r0!, {r3, r4, r5, r6}
     23c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     240:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     244:	4017      	ands	r7, r2
     246:	41bb      	sbcs	r3, r7
     248:	ea18 0802 	ands.w	r8, r8, r2
     24c:	eb74 0408 	sbcs.w	r4, r4, r8
     250:	ea19 0902 	ands.w	r9, r9, r2
     254:	eb75 0509 	sbcs.w	r5, r5, r9
     258:	ea1a 0a02 	ands.w	sl, sl, r2
     25c:	eb76 060a 	sbcs.w	r6, r6, sl
     260:	c078      	stmia	r0!, {r3, r4, r5, r6}
     262:	4180      	sbcs	r0, r0
     264:	4240      	negs	r0, r0
     266:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     26a:	4770      	bx	lr

0000026c <ocrypto_bigint_cswap256>:
     26c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
     270:	4252      	negs	r2, r2
     272:	f04f 0804 	mov.w	r8, #4

00000276 <cswap256_loop>:
     276:	e890 0030 	ldmia.w	r0, {r4, r5}
     27a:	e891 00c0 	ldmia.w	r1, {r6, r7}
     27e:	1ba3      	subs	r3, r4, r6
     280:	4013      	ands	r3, r2
     282:	1ae4      	subs	r4, r4, r3
     284:	18f6      	adds	r6, r6, r3
     286:	1beb      	subs	r3, r5, r7
     288:	4013      	ands	r3, r2
     28a:	1aed      	subs	r5, r5, r3
     28c:	18ff      	adds	r7, r7, r3
     28e:	c030      	stmia	r0!, {r4, r5}
     290:	c1c0      	stmia	r1!, {r6, r7}
     292:	f1b8 0801 	subs.w	r8, r8, #1
     296:	d1ee      	bne.n	276 <cswap256_loop>
     298:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
     29c:	4770      	bx	lr
     29e:	bf00      	nop

000002a0 <ocrypto_mul256_noframe>:
     2a0:	b500      	push	{lr}
     2a2:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
     2a6:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
     2aa:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
     2ae:	b402      	push	{r1}
     2b0:	fba7 5102 	umull	r5, r1, r7, r2
     2b4:	950a      	str	r5, [sp, #40]	; 0x28
     2b6:	fba8 0b02 	umull	r0, fp, r8, r2
     2ba:	fbe7 1063 	umaal	r1, r0, r7, r3
     2be:	fbe9 b062 	umaal	fp, r0, r9, r2
     2c2:	910b      	str	r1, [sp, #44]	; 0x2c
     2c4:	fba8 5103 	umull	r5, r1, r8, r3
     2c8:	fbea 0162 	umaal	r0, r1, sl, r2
     2cc:	fbe7 b564 	umaal	fp, r5, r7, r4
     2d0:	fbe7 0566 	umaal	r0, r5, r7, r6
     2d4:	fbe8 1566 	umaal	r1, r5, r8, r6
     2d8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
     2dc:	fba9 b603 	umull	fp, r6, r9, r3
     2e0:	fbea 1663 	umaal	r1, r6, sl, r3
     2e4:	fbec 5663 	umaal	r5, r6, ip, r3
     2e8:	fbe8 0b64 	umaal	r0, fp, r8, r4
     2ec:	fbe9 1b64 	umaal	r1, fp, r9, r4
     2f0:	fbea 5b64 	umaal	r5, fp, sl, r4
     2f4:	fbec 6b64 	umaal	r6, fp, ip, r4
     2f8:	900d      	str	r0, [sp, #52]	; 0x34
     2fa:	fbac 3002 	umull	r3, r0, ip, r2
     2fe:	9c05      	ldr	r4, [sp, #20]
     300:	fbee 5062 	umaal	r5, r0, lr, r2
     304:	fbe9 6064 	umaal	r6, r0, r9, r4
     308:	fbea b064 	umaal	fp, r0, sl, r4
     30c:	fbe7 3164 	umaal	r3, r1, r7, r4
     310:	fbe8 5164 	umaal	r5, r1, r8, r4
     314:	9c06      	ldr	r4, [sp, #24]
     316:	fbe8 6164 	umaal	r6, r1, r8, r4
     31a:	fbe9 b164 	umaal	fp, r1, r9, r4
     31e:	fbea 0164 	umaal	r0, r1, sl, r4
     322:	930e      	str	r3, [sp, #56]	; 0x38
     324:	fba7 3204 	umull	r3, r2, r7, r4
     328:	9c07      	ldr	r4, [sp, #28]
     32a:	fbe7 6264 	umaal	r6, r2, r7, r4
     32e:	fbe8 b264 	umaal	fp, r2, r8, r4
     332:	fbe9 0264 	umaal	r0, r2, r9, r4
     336:	fbea 1264 	umaal	r1, r2, sl, r4
     33a:	9c04      	ldr	r4, [sp, #16]
     33c:	fbe9 5364 	umaal	r5, r3, r9, r4
     340:	fbea 6364 	umaal	r6, r3, sl, r4
     344:	9c08      	ldr	r4, [sp, #32]
     346:	fbe7 b364 	umaal	fp, r3, r7, r4
     34a:	fbe8 0364 	umaal	r0, r3, r8, r4
     34e:	fbe9 1364 	umaal	r1, r3, r9, r4
     352:	fbea 2364 	umaal	r2, r3, sl, r4
     356:	950f      	str	r5, [sp, #60]	; 0x3c
     358:	f85d 9b04 	ldr.w	r9, [sp], #4
     35c:	e899 0600 	ldmia.w	r9, {r9, sl}
     360:	f8dd 8000 	ldr.w	r8, [sp]
     364:	fba9 5408 	umull	r5, r4, r9, r8
     368:	fbea b468 	umaal	fp, r4, sl, r8
     36c:	f8dd 8010 	ldr.w	r8, [sp, #16]
     370:	fbec 0468 	umaal	r0, r4, ip, r8
     374:	fbee 1468 	umaal	r1, r4, lr, r8
     378:	fbe9 2468 	umaal	r2, r4, r9, r8
     37c:	fbea 3468 	umaal	r3, r4, sl, r8
     380:	f8dd 8004 	ldr.w	r8, [sp, #4]
     384:	fbee 6568 	umaal	r6, r5, lr, r8
     388:	fbe9 b568 	umaal	fp, r5, r9, r8
     38c:	fbea 0568 	umaal	r0, r5, sl, r8
     390:	f8dd 8014 	ldr.w	r8, [sp, #20]
     394:	fbec 1568 	umaal	r1, r5, ip, r8
     398:	fbee 2568 	umaal	r2, r5, lr, r8
     39c:	fbe9 3568 	umaal	r3, r5, r9, r8
     3a0:	fbea 4568 	umaal	r4, r5, sl, r8
     3a4:	960f      	str	r6, [sp, #60]	; 0x3c
     3a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
     3aa:	fbae 7608 	umull	r7, r6, lr, r8
     3ae:	fbe9 0668 	umaal	r0, r6, r9, r8
     3b2:	fbea 1668 	umaal	r1, r6, sl, r8
     3b6:	f8dd 8018 	ldr.w	r8, [sp, #24]
     3ba:	fbec 2668 	umaal	r2, r6, ip, r8
     3be:	fbee 3668 	umaal	r3, r6, lr, r8
     3c2:	fbe9 4668 	umaal	r4, r6, r9, r8
     3c6:	fbea 5668 	umaal	r5, r6, sl, r8
     3ca:	f8dd 800c 	ldr.w	r8, [sp, #12]
     3ce:	fbec b768 	umaal	fp, r7, ip, r8
     3d2:	fbee 0768 	umaal	r0, r7, lr, r8
     3d6:	fbe9 1768 	umaal	r1, r7, r9, r8
     3da:	fbea 2768 	umaal	r2, r7, sl, r8
     3de:	f8dd 801c 	ldr.w	r8, [sp, #28]
     3e2:	fbec 3768 	umaal	r3, r7, ip, r8
     3e6:	fbee 4768 	umaal	r4, r7, lr, r8
     3ea:	fbe9 5768 	umaal	r5, r7, r9, r8
     3ee:	fbea 6768 	umaal	r6, r7, sl, r8
     3f2:	b008      	add	sp, #32
     3f4:	bd00      	pop	{pc}
     3f6:	bf00      	nop

000003f8 <ocrypto_bigint_mul256>:
     3f8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3fc:	b087      	sub	sp, #28
     3fe:	f7ff ff4f 	bl	2a0 <ocrypto_mul256_noframe>
     402:	f8dd 801c 	ldr.w	r8, [sp, #28]
     406:	f108 0820 	add.w	r8, r8, #32
     40a:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     40e:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     410:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000418 <ocrypto_sqr256_noframe>:
     418:	b500      	push	{lr}
     41a:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
     41e:	fba3 5203 	umull	r5, r2, r3, r3
     422:	9501      	str	r5, [sp, #4]
     424:	fba3 0104 	umull	r0, r1, r3, r4
     428:	fbe3 2064 	umaal	r2, r0, r3, r4
     42c:	fbe3 1067 	umaal	r1, r0, r3, r7
     430:	9202      	str	r2, [sp, #8]
     432:	fba3 5207 	umull	r5, r2, r3, r7
     436:	fbe3 0268 	umaal	r0, r2, r3, r8
     43a:	fbe4 1564 	umaal	r1, r5, r4, r4
     43e:	fbe3 0568 	umaal	r0, r5, r3, r8
     442:	fbe3 2569 	umaal	r2, r5, r3, r9
     446:	9103      	str	r1, [sp, #12]
     448:	fba4 b607 	umull	fp, r6, r4, r7
     44c:	fbe3 2669 	umaal	r2, r6, r3, r9
     450:	fbe3 566a 	umaal	r5, r6, r3, sl
     454:	fbe4 0b67 	umaal	r0, fp, r4, r7
     458:	fbe4 2b68 	umaal	r2, fp, r4, r8
     45c:	fbe3 5b6a 	umaal	r5, fp, r3, sl
     460:	fbe3 6b6c 	umaal	r6, fp, r3, ip
     464:	9004      	str	r0, [sp, #16]
     466:	fba4 1008 	umull	r1, r0, r4, r8
     46a:	fbe4 5069 	umaal	r5, r0, r4, r9
     46e:	fbe3 606c 	umaal	r6, r0, r3, ip
     472:	fbe3 b06e 	umaal	fp, r0, r3, lr
     476:	fbe7 2167 	umaal	r2, r1, r7, r7
     47a:	fbe4 5169 	umaal	r5, r1, r4, r9
     47e:	fbe4 616a 	umaal	r6, r1, r4, sl
     482:	fbe3 b16e 	umaal	fp, r1, r3, lr
     486:	fbe4 016e 	umaal	r0, r1, r4, lr
     48a:	9205      	str	r2, [sp, #20]
     48c:	fba7 3208 	umull	r3, r2, r7, r8
     490:	fbe4 626a 	umaal	r6, r2, r4, sl
     494:	fbe4 b26c 	umaal	fp, r2, r4, ip
     498:	fbe4 026e 	umaal	r0, r2, r4, lr
     49c:	fbe7 126e 	umaal	r1, r2, r7, lr
     4a0:	fbe7 5368 	umaal	r5, r3, r7, r8
     4a4:	fbe7 6369 	umaal	r6, r3, r7, r9
     4a8:	fbe4 b36c 	umaal	fp, r3, r4, ip
     4ac:	fbe7 036c 	umaal	r0, r3, r7, ip
     4b0:	fbe7 136e 	umaal	r1, r3, r7, lr
     4b4:	fbe8 236e 	umaal	r2, r3, r8, lr
     4b8:	9506      	str	r5, [sp, #24]
     4ba:	fba7 5409 	umull	r5, r4, r7, r9
     4be:	fbe7 b46a 	umaal	fp, r4, r7, sl
     4c2:	fbe7 046c 	umaal	r0, r4, r7, ip
     4c6:	fbe8 146c 	umaal	r1, r4, r8, ip
     4ca:	fbe8 246e 	umaal	r2, r4, r8, lr
     4ce:	fbe9 346e 	umaal	r3, r4, r9, lr
     4d2:	fbe8 6568 	umaal	r6, r5, r8, r8
     4d6:	fbe7 b56a 	umaal	fp, r5, r7, sl
     4da:	fbe8 056a 	umaal	r0, r5, r8, sl
     4de:	fbe8 156c 	umaal	r1, r5, r8, ip
     4e2:	fbe9 256c 	umaal	r2, r5, r9, ip
     4e6:	fbe9 356e 	umaal	r3, r5, r9, lr
     4ea:	fbea 456e 	umaal	r4, r5, sl, lr
     4ee:	9607      	str	r6, [sp, #28]
     4f0:	fba8 7609 	umull	r7, r6, r8, r9
     4f4:	fbe8 066a 	umaal	r0, r6, r8, sl
     4f8:	fbe9 166a 	umaal	r1, r6, r9, sl
     4fc:	fbe9 266c 	umaal	r2, r6, r9, ip
     500:	fbea 366c 	umaal	r3, r6, sl, ip
     504:	fbea 466e 	umaal	r4, r6, sl, lr
     508:	fbec 566e 	umaal	r5, r6, ip, lr
     50c:	fbe8 b769 	umaal	fp, r7, r8, r9
     510:	fbe9 0769 	umaal	r0, r7, r9, r9
     514:	fbe9 176a 	umaal	r1, r7, r9, sl
     518:	fbea 276a 	umaal	r2, r7, sl, sl
     51c:	fbea 376c 	umaal	r3, r7, sl, ip
     520:	fbec 476c 	umaal	r4, r7, ip, ip
     524:	fbec 576e 	umaal	r5, r7, ip, lr
     528:	fbee 676e 	umaal	r6, r7, lr, lr
     52c:	bd00      	pop	{pc}
     52e:	bf00      	nop

00000530 <ocrypto_bigint_sqr256>:
     530:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     534:	b087      	sub	sp, #28
     536:	f7ff ff6f 	bl	418 <ocrypto_sqr256_noframe>
     53a:	f8dd 801c 	ldr.w	r8, [sp, #28]
     53e:	f108 0820 	add.w	r8, r8, #32
     542:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     546:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     548:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000550 <ocrypto_constant_time_equal>:
     550:	b430      	push	{r4, r5}
     552:	f04f 0300 	mov.w	r3, #0

00000556 <constant_time_equal_loop>:
     556:	f810 4b01 	ldrb.w	r4, [r0], #1
     55a:	f811 5b01 	ldrb.w	r5, [r1], #1
     55e:	3a01      	subs	r2, #1
     560:	ea84 0405 	eor.w	r4, r4, r5
     564:	ea43 0304 	orr.w	r3, r3, r4
     568:	d1f5      	bne.n	556 <constant_time_equal_loop>
     56a:	f1a3 0301 	sub.w	r3, r3, #1
     56e:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     572:	bc30      	pop	{r4, r5}
     574:	4770      	bx	lr
     576:	bf00      	nop

00000578 <ocrypto_constant_time_is_zero>:
     578:	f04f 0300 	mov.w	r3, #0

0000057c <constant_time_is_zero_loop>:
     57c:	f810 2b01 	ldrb.w	r2, [r0], #1
     580:	3901      	subs	r1, #1
     582:	ea43 0302 	orr.w	r3, r3, r2
     586:	d1f9      	bne.n	57c <constant_time_is_zero_loop>
     588:	f1a3 0301 	sub.w	r3, r3, #1
     58c:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     590:	4770      	bx	lr
     592:	bf00      	nop

00000594 <ocrypto_constant_time_xor>:
     594:	b430      	push	{r4, r5}

00000596 <constant_time_xor_loop>:
     596:	f811 4b01 	ldrb.w	r4, [r1], #1
     59a:	f812 5b01 	ldrb.w	r5, [r2], #1
     59e:	406c      	eors	r4, r5
     5a0:	f800 4b01 	strb.w	r4, [r0], #1
     5a4:	3b01      	subs	r3, #1
     5a6:	d1f6      	bne.n	596 <constant_time_xor_loop>
     5a8:	bc30      	pop	{r4, r5}
     5aa:	4770      	bx	lr

000005ac <ocrypto_mod_p256_add>:
     5ac:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     5b0:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     5b4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5b8:	185b      	adds	r3, r3, r1
     5ba:	eb54 040c 	adcs.w	r4, r4, ip
     5be:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5c2:	414d      	adcs	r5, r1
     5c4:	eb56 060c 	adcs.w	r6, r6, ip
     5c8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5cc:	414f      	adcs	r7, r1
     5ce:	eb58 080c 	adcs.w	r8, r8, ip
     5d2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5d6:	eb59 0901 	adcs.w	r9, r9, r1
     5da:	eb5a 0a0c 	adcs.w	sl, sl, ip
     5de:	4189      	sbcs	r1, r1
     5e0:	f1b3 33ff 	subs.w	r3, r3, #4294967295
     5e4:	f174 34ff 	sbcs.w	r4, r4, #4294967295
     5e8:	f175 35ff 	sbcs.w	r5, r5, #4294967295
     5ec:	f176 0600 	sbcs.w	r6, r6, #0
     5f0:	f177 0700 	sbcs.w	r7, r7, #0
     5f4:	f178 0800 	sbcs.w	r8, r8, #0
     5f8:	f179 0901 	sbcs.w	r9, r9, #1
     5fc:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
     600:	f151 0100 	adcs.w	r1, r1, #0
     604:	185b      	adds	r3, r3, r1
     606:	414c      	adcs	r4, r1
     608:	414d      	adcs	r5, r1
     60a:	f156 0600 	adcs.w	r6, r6, #0
     60e:	f157 0700 	adcs.w	r7, r7, #0
     612:	f158 0800 	adcs.w	r8, r8, #0
     616:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     61a:	eb5a 0a01 	adcs.w	sl, sl, r1
     61e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     622:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     626:	4770      	bx	lr

00000628 <ocrypto_mod_p256_sub>:
     628:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     62c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     630:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     634:	1a5b      	subs	r3, r3, r1
     636:	eb74 040c 	sbcs.w	r4, r4, ip
     63a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     63e:	418d      	sbcs	r5, r1
     640:	eb76 060c 	sbcs.w	r6, r6, ip
     644:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     648:	418f      	sbcs	r7, r1
     64a:	eb78 080c 	sbcs.w	r8, r8, ip
     64e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     652:	eb79 0901 	sbcs.w	r9, r9, r1
     656:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     65a:	4189      	sbcs	r1, r1
     65c:	185b      	adds	r3, r3, r1
     65e:	414c      	adcs	r4, r1
     660:	414d      	adcs	r5, r1
     662:	f156 0600 	adcs.w	r6, r6, #0
     666:	f157 0700 	adcs.w	r7, r7, #0
     66a:	f158 0800 	adcs.w	r8, r8, #0
     66e:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     672:	eb5a 0a01 	adcs.w	sl, sl, r1
     676:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     67a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     67e:	4770      	bx	lr

00000680 <mul_reduce>:
     680:	eb18 0804 	adds.w	r8, r8, r4
     684:	eb59 0905 	adcs.w	r9, r9, r5
     688:	eb5a 0a06 	adcs.w	sl, sl, r6
     68c:	eb5b 0b07 	adcs.w	fp, fp, r7
     690:	f05f 0c00 	movs.w	ip, #0
     694:	f14c 0c00 	adc.w	ip, ip, #0
     698:	eb18 0805 	adds.w	r8, r8, r5
     69c:	eb59 0906 	adcs.w	r9, r9, r6
     6a0:	eb5a 0a07 	adcs.w	sl, sl, r7
     6a4:	eb5b 0b07 	adcs.w	fp, fp, r7
     6a8:	eb50 000c 	adcs.w	r0, r0, ip
     6ac:	f05f 0c00 	movs.w	ip, #0
     6b0:	eb51 010c 	adcs.w	r1, r1, ip
     6b4:	eb52 020c 	adcs.w	r2, r2, ip
     6b8:	4163      	adcs	r3, r4
     6ba:	f14c 0c00 	adc.w	ip, ip, #0
     6be:	ebb8 0807 	subs.w	r8, r8, r7
     6c2:	f179 0900 	sbcs.w	r9, r9, #0
     6c6:	f17a 0a00 	sbcs.w	sl, sl, #0
     6ca:	eb7b 0b04 	sbcs.w	fp, fp, r4
     6ce:	41a8      	sbcs	r0, r5
     6d0:	41b1      	sbcs	r1, r6
     6d2:	41a2      	sbcs	r2, r4
     6d4:	41b3      	sbcs	r3, r6
     6d6:	f16c 0c00 	sbc.w	ip, ip, #0
     6da:	ebbb 0b05 	subs.w	fp, fp, r5
     6de:	41b0      	sbcs	r0, r6
     6e0:	41b9      	sbcs	r1, r7
     6e2:	41aa      	sbcs	r2, r5
     6e4:	41bb      	sbcs	r3, r7
     6e6:	f16c 0c00 	sbc.w	ip, ip, #0
     6ea:	ea6f 74ec 	mvn.w	r4, ip, asr #31
     6ee:	ebb8 0804 	subs.w	r8, r8, r4
     6f2:	eb79 0904 	sbcs.w	r9, r9, r4
     6f6:	eb7a 0a04 	sbcs.w	sl, sl, r4
     6fa:	f17b 0b00 	sbcs.w	fp, fp, #0
     6fe:	f170 0000 	sbcs.w	r0, r0, #0
     702:	f171 0100 	sbcs.w	r1, r1, #0
     706:	eb72 72d4 	sbcs.w	r2, r2, r4, lsr #31
     70a:	41a3      	sbcs	r3, r4
     70c:	f16c 0c00 	sbc.w	ip, ip, #0
     710:	eb18 78ec 	adds.w	r8, r8, ip, asr #31
     714:	eb59 79ec 	adcs.w	r9, r9, ip, asr #31
     718:	eb5a 7aec 	adcs.w	sl, sl, ip, asr #31
     71c:	f15b 0b00 	adcs.w	fp, fp, #0
     720:	f150 0400 	adcs.w	r4, r0, #0
     724:	f151 0500 	adcs.w	r5, r1, #0
     728:	eb52 76dc 	adcs.w	r6, r2, ip, lsr #31
     72c:	eb53 77ec 	adcs.w	r7, r3, ip, asr #31
     730:	f14c 0c00 	adc.w	ip, ip, #0
     734:	eb18 70ec 	adds.w	r0, r8, ip, asr #31
     738:	eb59 71ec 	adcs.w	r1, r9, ip, asr #31
     73c:	eb5a 72ec 	adcs.w	r2, sl, ip, asr #31
     740:	f15b 0300 	adcs.w	r3, fp, #0
     744:	f154 0400 	adcs.w	r4, r4, #0
     748:	f155 0500 	adcs.w	r5, r5, #0
     74c:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
     750:	eb57 77ec 	adcs.w	r7, r7, ip, asr #31
     754:	4770      	bx	lr
     756:	bf00      	nop

00000758 <ocrypto_mod_p256_mul>:
     758:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     75c:	b087      	sub	sp, #28
     75e:	f7ff fd9f 	bl	2a0 <ocrypto_mul256_noframe>
     762:	f8dd 8010 	ldr.w	r8, [sp, #16]
     766:	f8dd 9014 	ldr.w	r9, [sp, #20]
     76a:	f8dd a018 	ldr.w	sl, [sp, #24]
     76e:	f7ff ff87 	bl	680 <mul_reduce>
     772:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     776:	f7ff ff83 	bl	680 <mul_reduce>
     77a:	b003      	add	sp, #12
     77c:	f85d 8b04 	ldr.w	r8, [sp], #4
     780:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000788 <ocrypto_mod_p256_sqr>:
     788:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     78c:	b087      	sub	sp, #28
     78e:	f7ff fe43 	bl	418 <ocrypto_sqr256_noframe>
     792:	f8dd 8010 	ldr.w	r8, [sp, #16]
     796:	f8dd 9014 	ldr.w	r9, [sp, #20]
     79a:	f8dd a018 	ldr.w	sl, [sp, #24]
     79e:	f7ff ff6f 	bl	680 <mul_reduce>
     7a2:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     7a6:	f7ff ff6b 	bl	680 <mul_reduce>
     7aa:	b003      	add	sp, #12
     7ac:	f85d 8b04 	ldr.w	r8, [sp], #4
     7b0:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     7ba:	4c14      	ldr	r4, [pc, #80]	; (80c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xc>)
     7bc:	7a20      	ldrb	r0, [r4, #8]
     7be:	f88d 0001 	strb.w	r0, [sp, #1]
     7c2:	79e0      	ldrb	r0, [r4, #7]
     7c4:	f88d 0000 	strb.w	r0, [sp]
     7c8:	79a0      	ldrb	r0, [r4, #6]
     7ca:	f8ad 0004 	strh.w	r0, [sp, #4]
     7ce:	7960      	ldrb	r0, [r4, #5]
     7d0:	f8ad 0002 	strh.w	r0, [sp, #2]
     7d4:	4668      	mov	r0, sp
     7d6:	f006 fcaf 	bl	7138 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
     7da:	b108      	cbz	r0, 7e0 <ocrypto_mod_p256_sqr+0x58>
     7dc:	21a7      	movs	r1, #167	; 0xa7
     7de:	e010      	b.n	802 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2>
     7e0:	68e0      	ldr	r0, [r4, #12]
     7e2:	9002      	str	r0, [sp, #8]
     7e4:	a802      	add	r0, sp, #8
     7e6:	f006 fcbd 	bl	7164 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
     7ea:	b108      	cbz	r0, 7f0 <ocrypto_mod_p256_sqr+0x68>
     7ec:	21ab      	movs	r1, #171	; 0xab
     7ee:	e008      	b.n	802 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2>
     7f0:	4807      	ldr	r0, [pc, #28]	; (810 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x10>)
     7f2:	6800      	ldr	r0, [r0, #0]
     7f4:	9003      	str	r0, [sp, #12]
     7f6:	a803      	add	r0, sp, #12
     7f8:	f00f f916 	bl	fa28 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
     7fc:	2800      	cmp	r0, #0
     7fe:	d003      	beq.n	808 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8>
     800:	21af      	movs	r1, #175	; 0xaf
     802:	2003      	movs	r0, #3
     804:	f000 f92e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     808:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
     80a:	0000      	.short	0x0000
     80c:	20000ce0 	.word	0x20000ce0
     810:	00000b50 	.word	0x00000b50
     814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     818:	460d      	mov	r5, r1
     81a:	4681      	mov	r9, r0
     81c:	f04f 0100 	mov.w	r1, #0
     820:	f100 0003 	add.w	r0, r0, #3
     824:	9100      	str	r1, [sp, #0]
     826:	f020 0003 	bic.w	r0, r0, #3
     82a:	7829      	ldrb	r1, [r5, #0]
     82c:	0014      	movs	r4, r2
     82e:	4606      	mov	r6, r0
     830:	f88d 1001 	strb.w	r1, [sp, #1]
     834:	d000      	beq.n	838 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x38>
     836:	2000      	movs	r0, #0
     838:	4669      	mov	r1, sp
     83a:	f000 faf3 	bl	e24 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
     83e:	eb06 0a00 	add.w	sl, r6, r0
     842:	7828      	ldrb	r0, [r5, #0]
     844:	7869      	ldrb	r1, [r5, #1]
     846:	2700      	movs	r7, #0
     848:	4408      	add	r0, r1
     84a:	f000 08ff 	and.w	r8, r0, #255	; 0xff
     84e:	463e      	mov	r6, r7
     850:	e008      	b.n	864 <__z_interrupt_stack_SIZEOF+0x24>
     852:	7a2b      	ldrb	r3, [r5, #8]
     854:	79ea      	ldrb	r2, [r5, #7]
     856:	79a9      	ldrb	r1, [r5, #6]
     858:	7968      	ldrb	r0, [r5, #5]
     85a:	f00c ffa0 	bl	d79e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
     85e:	1c76      	adds	r6, r6, #1
     860:	4407      	add	r7, r0
     862:	b2f6      	uxtb	r6, r6
     864:	4546      	cmp	r6, r8
     866:	d3f4      	bcc.n	852 <__z_interrupt_stack_SIZEOF+0x12>
     868:	f10a 0003 	add.w	r0, sl, #3
     86c:	f020 0003 	bic.w	r0, r0, #3
     870:	4606      	mov	r6, r0
     872:	b104      	cbz	r4, 876 <__z_interrupt_stack_SIZEOF+0x36>
     874:	2000      	movs	r0, #0
     876:	463a      	mov	r2, r7
     878:	4641      	mov	r1, r8
     87a:	f000 fc79 	bl	1170 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
     87e:	490b      	ldr	r1, [pc, #44]	; (8ac <__z_interrupt_stack_SIZEOF+0x6c>)
     880:	4430      	add	r0, r6
     882:	78c9      	ldrb	r1, [r1, #3]
     884:	b159      	cbz	r1, 89e <__z_interrupt_stack_SIZEOF+0x5e>
     886:	7c29      	ldrb	r1, [r5, #16]
     888:	b149      	cbz	r1, 89e <__z_interrupt_stack_SIZEOF+0x5e>
     88a:	2225      	movs	r2, #37	; 0x25
     88c:	1cc0      	adds	r0, r0, #3
     88e:	f020 0003 	bic.w	r0, r0, #3
     892:	4605      	mov	r5, r0
     894:	b104      	cbz	r4, 898 <__z_interrupt_stack_SIZEOF+0x58>
     896:	2000      	movs	r0, #0
     898:	f000 fcea 	bl	1270 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
     89c:	4428      	add	r0, r5
     89e:	1dc0      	adds	r0, r0, #7
     8a0:	f020 0007 	bic.w	r0, r0, #7
     8a4:	eba0 0009 	sub.w	r0, r0, r9
     8a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8ac:	20000028 	.word	0x20000028

000008b0 <sdc_build_revision_get>:
     8b0:	b510      	push	{r4, lr}
     8b2:	b128      	cbz	r0, 8c0 <sdc_build_revision_get+0x10>
     8b4:	2214      	movs	r2, #20
     8b6:	4904      	ldr	r1, [pc, #16]	; (8c8 <sdc_build_revision_get+0x18>)
     8b8:	f00f fed9 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     8bc:	2000      	movs	r0, #0
     8be:	bd10      	pop	{r4, pc}
     8c0:	f06f 0015 	mvn.w	r0, #21
     8c4:	bd10      	pop	{r4, pc}
     8c6:	0000      	.short	0x0000
     8c8:	00000b74 	.word	0x00000b74

000008cc <sdc_cfg_set>:
     8cc:	b570      	push	{r4, r5, r6, lr}
     8ce:	f06f 032c 	mvn.w	r3, #44	; 0x2c
     8d2:	b988      	cbnz	r0, 8f8 <sdc_cfg_set+0x2c>
     8d4:	4c1f      	ldr	r4, [pc, #124]	; (954 <__data_size+0xc>)
     8d6:	7860      	ldrb	r0, [r4, #1]
     8d8:	b108      	cbz	r0, 8de <sdc_cfg_set+0x12>
     8da:	1198      	asrs	r0, r3, #6
     8dc:	bd70      	pop	{r4, r5, r6, pc}
     8de:	b301      	cbz	r1, 922 <sdc_cfg_set+0x56>
     8e0:	f06f 0515 	mvn.w	r5, #21
     8e4:	b31a      	cbz	r2, 92e <sdc_cfg_set+0x62>
     8e6:	481c      	ldr	r0, [pc, #112]	; (958 <__data_size+0x10>)
     8e8:	2901      	cmp	r1, #1
     8ea:	d007      	beq.n	8fc <sdc_cfg_set+0x30>
     8ec:	2903      	cmp	r1, #3
     8ee:	d008      	beq.n	902 <sdc_cfg_set+0x36>
     8f0:	2904      	cmp	r1, #4
     8f2:	d014      	beq.n	91e <sdc_cfg_set+0x52>
     8f4:	2906      	cmp	r1, #6
     8f6:	d015      	beq.n	924 <sdc_cfg_set+0x58>
     8f8:	4618      	mov	r0, r3
     8fa:	bd70      	pop	{r4, r5, r6, pc}
     8fc:	7811      	ldrb	r1, [r2, #0]
     8fe:	7001      	strb	r1, [r0, #0]
     900:	e019      	b.n	936 <sdc_cfg_set+0x6a>
     902:	7891      	ldrb	r1, [r2, #2]
     904:	b199      	cbz	r1, 92e <sdc_cfg_set+0x62>
     906:	78d1      	ldrb	r1, [r2, #3]
     908:	b189      	cbz	r1, 92e <sdc_cfg_set+0x62>
     90a:	7811      	ldrb	r1, [r2, #0]
     90c:	291b      	cmp	r1, #27
     90e:	d30e      	bcc.n	92e <sdc_cfg_set+0x62>
     910:	7851      	ldrb	r1, [r2, #1]
     912:	291b      	cmp	r1, #27
     914:	d30b      	bcc.n	92e <sdc_cfg_set+0x62>
     916:	6811      	ldr	r1, [r2, #0]
     918:	f8c0 1005 	str.w	r1, [r0, #5]
     91c:	e00b      	b.n	936 <sdc_cfg_set+0x6a>
     91e:	6811      	ldr	r1, [r2, #0]
     920:	60c1      	str	r1, [r0, #12]
     922:	e008      	b.n	936 <sdc_cfg_set+0x6a>
     924:	78e1      	ldrb	r1, [r4, #3]
     926:	b121      	cbz	r1, 932 <sdc_cfg_set+0x66>
     928:	7811      	ldrb	r1, [r2, #0]
     92a:	2902      	cmp	r1, #2
     92c:	d201      	bcs.n	932 <sdc_cfg_set+0x66>
     92e:	4628      	mov	r0, r5
     930:	bd70      	pop	{r4, r5, r6, pc}
     932:	7811      	ldrb	r1, [r2, #0]
     934:	7401      	strb	r1, [r0, #16]
     936:	2201      	movs	r2, #1
     938:	4907      	ldr	r1, [pc, #28]	; (958 <__data_size+0x10>)
     93a:	2000      	movs	r0, #0
     93c:	f7ff ff6a 	bl	814 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x14>
     940:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
     944:	db02      	blt.n	94c <__data_size+0x4>
     946:	f06f 000b 	mvn.w	r0, #11
     94a:	bd70      	pop	{r4, r5, r6, pc}
     94c:	2101      	movs	r1, #1
     94e:	70a1      	strb	r1, [r4, #2]
     950:	bd70      	pop	{r4, r5, r6, pc}
     952:	0000      	.short	0x0000
     954:	20000028 	.word	0x20000028
     958:	20000ce0 	.word	0x20000ce0

0000095c <sdc_disable>:
     95c:	b510      	push	{r4, lr}
     95e:	4c07      	ldr	r4, [pc, #28]	; (97c <sdc_disable+0x20>)
     960:	7860      	ldrb	r0, [r4, #1]
     962:	b120      	cbz	r0, 96e <sdc_disable+0x12>
     964:	f006 fef8 	bl	7758 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
     968:	7820      	ldrb	r0, [r4, #0]
     96a:	f00b fde5 	bl	c538 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
     96e:	f000 fccb 	bl	1308 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
     972:	f000 fda3 	bl	14bc <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
     976:	2000      	movs	r0, #0
     978:	7060      	strb	r0, [r4, #1]
     97a:	bd10      	pop	{r4, pc}
     97c:	20000028 	.word	0x20000028

00000980 <sdc_enable>:
     980:	b570      	push	{r4, r5, r6, lr}
     982:	460c      	mov	r4, r1
     984:	0005      	movs	r5, r0
     986:	d002      	beq.n	98e <sdc_enable+0xe>
     988:	b10c      	cbz	r4, 98e <sdc_enable+0xe>
     98a:	0760      	lsls	r0, r4, #29
     98c:	d002      	beq.n	994 <sdc_enable+0x14>
     98e:	f06f 0015 	mvn.w	r0, #21
     992:	bd70      	pop	{r4, r5, r6, pc}
     994:	f000 f914 	bl	bc0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
     998:	b1a8      	cbz	r0, 9c6 <sdc_enable+0x46>
     99a:	4628      	mov	r0, r5
     99c:	f00b fd92 	bl	c4c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
     9a0:	4d0a      	ldr	r5, [pc, #40]	; (9cc <sdc_enable+0x4c>)
     9a2:	2200      	movs	r2, #0
     9a4:	490a      	ldr	r1, [pc, #40]	; (9d0 <sdc_enable+0x50>)
     9a6:	7028      	strb	r0, [r5, #0]
     9a8:	4620      	mov	r0, r4
     9aa:	f7ff ff33 	bl	814 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x14>
     9ae:	f00f fc2e 	bl	1020e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
     9b2:	2100      	movs	r1, #0
     9b4:	7828      	ldrb	r0, [r5, #0]
     9b6:	f006 feb7 	bl	7728 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
     9ba:	f7ff fefd 	bl	7b8 <ocrypto_mod_p256_sqr+0x30>
     9be:	2001      	movs	r0, #1
     9c0:	7068      	strb	r0, [r5, #1]
     9c2:	2000      	movs	r0, #0
     9c4:	bd70      	pop	{r4, r5, r6, pc}
     9c6:	f04f 30ff 	mov.w	r0, #4294967295
     9ca:	bd70      	pop	{r4, r5, r6, pc}
     9cc:	20000028 	.word	0x20000028
     9d0:	20000ce0 	.word	0x20000ce0

000009d4 <sdc_init>:
     9d4:	b530      	push	{r4, r5, lr}
     9d6:	b089      	sub	sp, #36	; 0x24
     9d8:	0005      	movs	r5, r0
     9da:	d00c      	beq.n	9f6 <sdc_init+0x22>
     9dc:	f00b fd18 	bl	c410 <mpsl_is_initialized>
     9e0:	f04f 34ff 	mov.w	r4, #4294967295
     9e4:	b120      	cbz	r0, 9f0 <sdc_init+0x1c>
     9e6:	f00b fbc9 	bl	c17c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
     9ea:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
     9ee:	d905      	bls.n	9fc <sdc_init+0x28>
     9f0:	4620      	mov	r0, r4
     9f2:	b009      	add	sp, #36	; 0x24
     9f4:	bd30      	pop	{r4, r5, pc}
     9f6:	f06f 0015 	mvn.w	r0, #21
     9fa:	e7fa      	b.n	9f2 <sdc_init+0x1e>
     9fc:	4c14      	ldr	r4, [pc, #80]	; (a50 <sdc_init+0x7c>)
     9fe:	4815      	ldr	r0, [pc, #84]	; (a54 <sdc_init+0x80>)
     a00:	6065      	str	r5, [r4, #4]
     a02:	f000 f9f9 	bl	df8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
     a06:	2000      	movs	r0, #0
     a08:	7060      	strb	r0, [r4, #1]
     a0a:	70a0      	strb	r0, [r4, #2]
     a0c:	70e0      	strb	r0, [r4, #3]
     a0e:	4601      	mov	r1, r0
     a10:	2220      	movs	r2, #32
     a12:	4668      	mov	r0, sp
     a14:	f00f fea5 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     a18:	2220      	movs	r2, #32
     a1a:	490f      	ldr	r1, [pc, #60]	; (a58 <sdc_init+0x84>)
     a1c:	4668      	mov	r0, sp
     a1e:	f00f fe26 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     a22:	2220      	movs	r2, #32
     a24:	4669      	mov	r1, sp
     a26:	480d      	ldr	r0, [pc, #52]	; (a5c <sdc_init+0x88>)
     a28:	f00f fe21 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     a2c:	f3ef 8410 	mrs	r4, PRIMASK
     a30:	b672      	cpsid	i
     a32:	f000 fc77 	bl	1324 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
     a36:	480a      	ldr	r0, [pc, #40]	; (a60 <sdc_init+0x8c>)
     a38:	f000 fd4c 	bl	14d4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
     a3c:	b118      	cbz	r0, a46 <sdc_init+0x72>
     a3e:	21c5      	movs	r1, #197	; 0xc5
     a40:	2003      	movs	r0, #3
     a42:	f000 f80f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     a46:	b904      	cbnz	r4, a4a <sdc_init+0x76>
     a48:	b662      	cpsie	i
     a4a:	2000      	movs	r0, #0
     a4c:	e7d1      	b.n	9f2 <sdc_init+0x1e>
     a4e:	0000      	.short	0x0000
     a50:	20000028 	.word	0x20000028
     a54:	000007b9 	.word	0x000007b9
     a58:	00000b54 	.word	0x00000b54
     a5c:	20000ce0 	.word	0x20000ce0
     a60:	00000bed 	.word	0x00000bed

00000a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
     a64:	b50e      	push	{r1, r2, r3, lr}
     a66:	b672      	cpsid	i
     a68:	4a15      	ldr	r2, [pc, #84]	; (ac0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
     a6a:	6855      	ldr	r5, [r2, #4]
     a6c:	b1dd      	cbz	r5, aa6 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
     a6e:	2200      	movs	r2, #0
     a70:	4603      	mov	r3, r0
     a72:	466e      	mov	r6, sp
     a74:	240a      	movs	r4, #10
     a76:	e003      	b.n	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
     a78:	fbb0 f0f4 	udiv	r0, r0, r4
     a7c:	1c52      	adds	r2, r2, #1
     a7e:	b2d2      	uxtb	r2, r2
     a80:	2800      	cmp	r0, #0
     a82:	d1f9      	bne.n	a78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
     a84:	54b0      	strb	r0, [r6, r2]
     a86:	e00a      	b.n	a9e <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
     a88:	b2d8      	uxtb	r0, r3
     a8a:	fbb0 f7f4 	udiv	r7, r0, r4
     a8e:	fbb3 f3f4 	udiv	r3, r3, r4
     a92:	fb04 0017 	mls	r0, r4, r7, r0
     a96:	1e52      	subs	r2, r2, #1
     a98:	b2d2      	uxtb	r2, r2
     a9a:	3030      	adds	r0, #48	; 0x30
     a9c:	54b0      	strb	r0, [r6, r2]
     a9e:	2a00      	cmp	r2, #0
     aa0:	d1f2      	bne.n	a88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
     aa2:	4630      	mov	r0, r6
     aa4:	47a8      	blx	r5
     aa6:	f3bf 8f4f 	dsb	sy
     aaa:	4806      	ldr	r0, [pc, #24]	; (ac4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
     aac:	6801      	ldr	r1, [r0, #0]
     aae:	4a06      	ldr	r2, [pc, #24]	; (ac8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
     ab0:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
     ab4:	4311      	orrs	r1, r2
     ab6:	6001      	str	r1, [r0, #0]
     ab8:	f3bf 8f4f 	dsb	sy
     abc:	bf00      	nop
     abe:	e7fd      	b.n	abc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
     ac0:	20000028 	.word	0x20000028
     ac4:	e000ed0c 	.word	0xe000ed0c
     ac8:	05fa0004 	.word	0x05fa0004

00000acc <sdc_support_central>:
     acc:	b510      	push	{r4, lr}
     ace:	4c07      	ldr	r4, [pc, #28]	; (aec <sdc_support_central+0x20>)
     ad0:	78a0      	ldrb	r0, [r4, #2]
     ad2:	7861      	ldrb	r1, [r4, #1]
     ad4:	4308      	orrs	r0, r1
     ad6:	d002      	beq.n	ade <sdc_support_central+0x12>
     ad8:	f04f 30ff 	mov.w	r0, #4294967295
     adc:	bd10      	pop	{r4, pc}
     ade:	f006 fe4b 	bl	7778 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>
     ae2:	2001      	movs	r0, #1
     ae4:	70e0      	strb	r0, [r4, #3]
     ae6:	2000      	movs	r0, #0
     ae8:	bd10      	pop	{r4, pc}
     aea:	0000      	.short	0x0000
     aec:	20000028 	.word	0x20000028

00000af0 <sdc_support_dle_central>:
     af0:	4806      	ldr	r0, [pc, #24]	; (b0c <sdc_support_dle_central+0x1c>)
     af2:	b510      	push	{r4, lr}
     af4:	7881      	ldrb	r1, [r0, #2]
     af6:	7840      	ldrb	r0, [r0, #1]
     af8:	4301      	orrs	r1, r0
     afa:	d002      	beq.n	b02 <sdc_support_dle_central+0x12>
     afc:	f04f 30ff 	mov.w	r0, #4294967295
     b00:	bd10      	pop	{r4, pc}
     b02:	f006 fbbb 	bl	727c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ>
     b06:	2000      	movs	r0, #0
     b08:	bd10      	pop	{r4, pc}
     b0a:	0000      	.short	0x0000
     b0c:	20000028 	.word	0x20000028

00000b10 <sdc_support_le_2m_phy>:
     b10:	4806      	ldr	r0, [pc, #24]	; (b2c <sdc_support_le_2m_phy+0x1c>)
     b12:	b510      	push	{r4, lr}
     b14:	7881      	ldrb	r1, [r0, #2]
     b16:	7840      	ldrb	r0, [r0, #1]
     b18:	4301      	orrs	r1, r0
     b1a:	d002      	beq.n	b22 <sdc_support_le_2m_phy+0x12>
     b1c:	f04f 30ff 	mov.w	r0, #4294967295
     b20:	bd10      	pop	{r4, pc}
     b22:	f00f f865 	bl	fbf0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
     b26:	2000      	movs	r0, #0
     b28:	bd10      	pop	{r4, pc}
     b2a:	0000      	.short	0x0000
     b2c:	20000028 	.word	0x20000028

00000b30 <sdc_support_phy_update_central>:
     b30:	4806      	ldr	r0, [pc, #24]	; (b4c <sdc_support_phy_update_central+0x1c>)
     b32:	b510      	push	{r4, lr}
     b34:	7881      	ldrb	r1, [r0, #2]
     b36:	7840      	ldrb	r0, [r0, #1]
     b38:	4301      	orrs	r1, r0
     b3a:	d002      	beq.n	b42 <sdc_support_phy_update_central+0x12>
     b3c:	f04f 30ff 	mov.w	r0, #4294967295
     b40:	bd10      	pop	{r4, pc}
     b42:	f00f f879 	bl	fc38 <sym_7ZWRNRN6OJ5G7BJWG232R5QOQBW4NK4HJWYOG5A>
     b46:	2000      	movs	r0, #0
     b48:	bd10      	pop	{r4, pc}
     b4a:	0000      	.short	0x0000
     b4c:	20000028 	.word	0x20000028
     b50:	00000001 	.word	0x00000001
     b54:	00000001 	.word	0x00000001
     b58:	031b1b00 	.word	0x031b1b00
     b5c:	00000002 	.word	0x00000002
     b60:	00001d4c 	.word	0x00001d4c
     b64:	00000003 	.word	0x00000003
	...
     b74:	2f2d0cd8 	.word	0x2f2d0cd8
     b78:	5ce2ae36 	.word	0x5ce2ae36
     b7c:	4c802680 	.word	0x4c802680
     b80:	53164d3f 	.word	0x53164d3f
     b84:	73c79650 	.word	0x73c79650

00000b88 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
     b88:	4a05      	ldr	r2, [pc, #20]	; (ba0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
     b8a:	b510      	push	{r4, lr}
     b8c:	6852      	ldr	r2, [r2, #4]
     b8e:	b112      	cbz	r2, b96 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
     b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     b94:	4710      	bx	r2
     b96:	2192      	movs	r1, #146	; 0x92
     b98:	2004      	movs	r0, #4
     b9a:	f7ff ff63 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     b9e:	0000      	.short	0x0000
     ba0:	20000d00 	.word	0x20000d00

00000ba4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
     ba4:	4a05      	ldr	r2, [pc, #20]	; (bbc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
     ba6:	b510      	push	{r4, lr}
     ba8:	6892      	ldr	r2, [r2, #8]
     baa:	b112      	cbz	r2, bb2 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
     bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     bb0:	4710      	bx	r2
     bb2:	2198      	movs	r1, #152	; 0x98
     bb4:	2004      	movs	r0, #4
     bb6:	f7ff ff55 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     bba:	0000      	.short	0x0000
     bbc:	20000d00 	.word	0x20000d00

00000bc0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
     bc0:	4805      	ldr	r0, [pc, #20]	; (bd8 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
     bc2:	6801      	ldr	r1, [r0, #0]
     bc4:	b129      	cbz	r1, bd2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     bc6:	6841      	ldr	r1, [r0, #4]
     bc8:	b119      	cbz	r1, bd2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     bca:	6880      	ldr	r0, [r0, #8]
     bcc:	b108      	cbz	r0, bd2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     bce:	2001      	movs	r0, #1
     bd0:	4770      	bx	lr
     bd2:	2000      	movs	r0, #0
     bd4:	4770      	bx	lr
     bd6:	0000      	.short	0x0000
     bd8:	20000d00 	.word	0x20000d00

00000bdc <sdc_rand_source_register>:
     bdc:	4902      	ldr	r1, [pc, #8]	; (be8 <sdc_rand_source_register+0xc>)
     bde:	c80d      	ldmia	r0, {r0, r2, r3}
     be0:	e881 000d 	stmia.w	r1, {r0, r2, r3}
     be4:	2000      	movs	r0, #0
     be6:	4770      	bx	lr
     be8:	20000d00 	.word	0x20000d00

00000bec <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
     bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bee:	4c12      	ldr	r4, [pc, #72]	; (c38 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
     bf0:	2600      	movs	r6, #0
     bf2:	6825      	ldr	r5, [r4, #0]
     bf4:	e011      	b.n	c1a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     bf6:	9800      	ldr	r0, [sp, #0]
     bf8:	2802      	cmp	r0, #2
     bfa:	d002      	beq.n	c02 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
     bfc:	2803      	cmp	r0, #3
     bfe:	d10c      	bne.n	c1a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     c00:	e006      	b.n	c10 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
     c02:	6820      	ldr	r0, [r4, #0]
     c04:	b110      	cbz	r0, c0c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
     c06:	2000      	movs	r0, #0
     c08:	6026      	str	r6, [r4, #0]
     c0a:	e005      	b.n	c18 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
     c0c:	2128      	movs	r1, #40	; 0x28
     c0e:	e00c      	b.n	c2a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     c10:	6820      	ldr	r0, [r4, #0]
     c12:	b168      	cbz	r0, c30 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
     c14:	2001      	movs	r0, #1
     c16:	6026      	str	r6, [r4, #0]
     c18:	47a8      	blx	r5
     c1a:	4668      	mov	r0, sp
     c1c:	f000 fc20 	bl	1460 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
     c20:	2800      	cmp	r0, #0
     c22:	d0e8      	beq.n	bf6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
     c24:	2805      	cmp	r0, #5
     c26:	d005      	beq.n	c34 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
     c28:	2135      	movs	r1, #53	; 0x35
     c2a:	2004      	movs	r0, #4
     c2c:	f7ff ff1a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     c30:	212d      	movs	r1, #45	; 0x2d
     c32:	e7fa      	b.n	c2a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c36:	0000      	.short	0x0000
     c38:	20000030 	.word	0x20000030

00000c3c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
     c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     c40:	4605      	mov	r5, r0
     c42:	4922      	ldr	r1, [pc, #136]	; (ccc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     c44:	1d00      	adds	r0, r0, #4
     c46:	f501 7784 	add.w	r7, r1, #264	; 0x108
     c4a:	2600      	movs	r6, #0
     c4c:	6008      	str	r0, [r1, #0]
     c4e:	7838      	ldrb	r0, [r7, #0]
     c50:	b150      	cbz	r0, c68 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
     c52:	78ba      	ldrb	r2, [r7, #2]
     c54:	463c      	mov	r4, r7
     c56:	1c79      	adds	r1, r7, #1
     c58:	4628      	mov	r0, r5
     c5a:	1c92      	adds	r2, r2, #2
     c5c:	f00f fd07 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     c60:	7026      	strb	r6, [r4, #0]
     c62:	2004      	movs	r0, #4
     c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c68:	4818      	ldr	r0, [pc, #96]	; (ccc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     c6a:	f001 fe53 	bl	2914 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
     c6e:	4604      	mov	r4, r0
     c70:	2802      	cmp	r0, #2
     c72:	d004      	beq.n	c7e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x42>
     c74:	2c04      	cmp	r4, #4
     c76:	d007      	beq.n	c88 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x4c>
     c78:	2c08      	cmp	r4, #8
     c7a:	d020      	beq.n	cbe <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x82>
     c7c:	e023      	b.n	cc6 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8a>
     c7e:	4913      	ldr	r1, [pc, #76]	; (ccc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     c80:	4628      	mov	r0, r5
     c82:	f00b feac 	bl	c9de <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
     c86:	e01e      	b.n	cc6 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8a>
     c88:	4910      	ldr	r1, [pc, #64]	; (ccc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     c8a:	4628      	mov	r0, r5
     c8c:	f00b ff0c 	bl	caa8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
     c90:	2800      	cmp	r0, #0
     c92:	d0dc      	beq.n	c4e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     c94:	f895 8000 	ldrb.w	r8, [r5]
     c98:	f895 9002 	ldrb.w	r9, [r5, #2]
     c9c:	4640      	mov	r0, r8
     c9e:	f000 f845 	bl	d2c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
     ca2:	2800      	cmp	r0, #0
     ca4:	d0d3      	beq.n	c4e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     ca6:	f1b8 0f3e 	cmp.w	r8, #62	; 0x3e
     caa:	d10c      	bne.n	cc6 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8a>
     cac:	4648      	mov	r0, r9
     cae:	f1b9 0f12 	cmp.w	r9, #18
     cb2:	d0cc      	beq.n	c4e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     cb4:	f000 f84c 	bl	d50 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
     cb8:	2800      	cmp	r0, #0
     cba:	d0c8      	beq.n	c4e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     cbc:	e003      	b.n	cc6 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8a>
     cbe:	4903      	ldr	r1, [pc, #12]	; (ccc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     cc0:	4628      	mov	r0, r5
     cc2:	f00b feba 	bl	ca3a <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>
     cc6:	4620      	mov	r0, r4
     cc8:	e7cc      	b.n	c64 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
     cca:	0000      	.short	0x0000
     ccc:	20000d0c 	.word	0x20000d0c
     cd0:	b570      	push	{r4, r5, r6, lr}
     cd2:	780a      	ldrb	r2, [r1, #0]
     cd4:	7082      	strb	r2, [r0, #2]
     cd6:	b33a      	cbz	r2, d28 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xec>
     cd8:	2a01      	cmp	r2, #1
     cda:	d825      	bhi.n	d28 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xec>
     cdc:	2313      	movs	r3, #19
     cde:	7003      	strb	r3, [r0, #0]
     ce0:	2300      	movs	r3, #0
     ce2:	e00a      	b.n	cfa <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xbe>
     ce4:	eb01 0443 	add.w	r4, r1, r3, lsl #1
     ce8:	eb00 0543 	add.w	r5, r0, r3, lsl #1
     cec:	78a6      	ldrb	r6, [r4, #2]
     cee:	70ee      	strb	r6, [r5, #3]
     cf0:	8864      	ldrh	r4, [r4, #2]
     cf2:	0a24      	lsrs	r4, r4, #8
     cf4:	1c5b      	adds	r3, r3, #1
     cf6:	712c      	strb	r4, [r5, #4]
     cf8:	b2db      	uxtb	r3, r3
     cfa:	4293      	cmp	r3, r2
     cfc:	d3f2      	bcc.n	ce4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>
     cfe:	2300      	movs	r3, #0
     d00:	e00b      	b.n	d1a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xde>
     d02:	bf00      	nop
     d04:	eb01 0543 	add.w	r5, r1, r3, lsl #1
     d08:	eb00 0443 	add.w	r4, r0, r3, lsl #1
     d0c:	792e      	ldrb	r6, [r5, #4]
     d0e:	7166      	strb	r6, [r4, #5]
     d10:	88ad      	ldrh	r5, [r5, #4]
     d12:	0a2d      	lsrs	r5, r5, #8
     d14:	1c5b      	adds	r3, r3, #1
     d16:	71a5      	strb	r5, [r4, #6]
     d18:	b2db      	uxtb	r3, r3
     d1a:	4293      	cmp	r3, r2
     d1c:	d3f2      	bcc.n	d04 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xc8>
     d1e:	2101      	movs	r1, #1
     d20:	eb01 0082 	add.w	r0, r1, r2, lsl #2
     d24:	b2c0      	uxtb	r0, r0
     d26:	bd70      	pop	{r4, r5, r6, pc}
     d28:	2000      	movs	r0, #0
     d2a:	bd70      	pop	{r4, r5, r6, pc}

00000d2c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
     d2c:	2840      	cmp	r0, #64	; 0x40
     d2e:	d203      	bcs.n	d38 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
     d30:	1e40      	subs	r0, r0, #1
     d32:	b2c1      	uxtb	r1, r0
     d34:	4805      	ldr	r0, [pc, #20]	; (d4c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     d36:	e005      	b.n	d44 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
     d38:	28ff      	cmp	r0, #255	; 0xff
     d3a:	d005      	beq.n	d48 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
     d3c:	3840      	subs	r0, #64	; 0x40
     d3e:	b2c1      	uxtb	r1, r0
     d40:	4802      	ldr	r0, [pc, #8]	; (d4c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     d42:	3008      	adds	r0, #8
     d44:	f00c b926 	b.w	cf94 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     d48:	2001      	movs	r0, #1
     d4a:	4770      	bx	lr
     d4c:	2000003c 	.word	0x2000003c

00000d50 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
     d50:	1e40      	subs	r0, r0, #1
     d52:	b2c1      	uxtb	r1, r0
     d54:	4801      	ldr	r0, [pc, #4]	; (d5c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
     d56:	f00c b91d 	b.w	cf94 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     d5a:	0000      	.short	0x0000
     d5c:	2000004c 	.word	0x2000004c

00000d60 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
     d60:	b510      	push	{r4, lr}
     d62:	4a07      	ldr	r2, [pc, #28]	; (d80 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x20>)
     d64:	6801      	ldr	r1, [r0, #0]
     d66:	4b06      	ldr	r3, [pc, #24]	; (d80 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x20>)
     d68:	6191      	str	r1, [r2, #24]
     d6a:	6840      	ldr	r0, [r0, #4]
     d6c:	61d0      	str	r0, [r2, #28]
     d6e:	681c      	ldr	r4, [r3, #0]
     d70:	3218      	adds	r2, #24
     d72:	43a1      	bics	r1, r4
     d74:	6011      	str	r1, [r2, #0]
     d76:	6859      	ldr	r1, [r3, #4]
     d78:	4388      	bics	r0, r1
     d7a:	6050      	str	r0, [r2, #4]
     d7c:	bd10      	pop	{r4, pc}
     d7e:	0000      	.short	0x0000
     d80:	20000034 	.word	0x20000034

00000d84 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
     d84:	4a06      	ldr	r2, [pc, #24]	; (da0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
     d86:	6801      	ldr	r1, [r0, #0]
     d88:	6091      	str	r1, [r2, #8]
     d8a:	6840      	ldr	r0, [r0, #4]
     d8c:	60d0      	str	r0, [r2, #12]
     d8e:	3208      	adds	r2, #8
     d90:	f441 218c 	orr.w	r1, r1, #286720	; 0x46000
     d94:	6011      	str	r1, [r2, #0]
     d96:	4903      	ldr	r1, [pc, #12]	; (da4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x20>)
     d98:	4308      	orrs	r0, r1
     d9a:	6050      	str	r0, [r2, #4]
     d9c:	4770      	bx	lr
     d9e:	0000      	.short	0x0000
     da0:	20000034 	.word	0x20000034
     da4:	024007f8 	.word	0x024007f8

00000da8 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
     da8:	4902      	ldr	r1, [pc, #8]	; (db4 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
     daa:	6802      	ldr	r2, [r0, #0]
     dac:	610a      	str	r2, [r1, #16]
     dae:	6840      	ldr	r0, [r0, #4]
     db0:	6148      	str	r0, [r1, #20]
     db2:	4770      	bx	lr
     db4:	20000034 	.word	0x20000034

00000db8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
     db8:	4807      	ldr	r0, [pc, #28]	; (dd8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
     dba:	f04f 31ff 	mov.w	r1, #4294967295
     dbe:	2200      	movs	r2, #0
     dc0:	6001      	str	r1, [r0, #0]
     dc2:	0cc9      	lsrs	r1, r1, #19
     dc4:	6041      	str	r1, [r0, #4]
     dc6:	f100 0108 	add.w	r1, r0, #8
     dca:	201f      	movs	r0, #31
     dcc:	600a      	str	r2, [r1, #0]
     dce:	604a      	str	r2, [r1, #4]
     dd0:	3108      	adds	r1, #8
     dd2:	e9c1 0200 	strd	r0, r2, [r1]
     dd6:	4770      	bx	lr
     dd8:	2000003c 	.word	0x2000003c

00000ddc <sdc_hci_cmd_cb_reset>:
     ddc:	b510      	push	{r4, lr}
     dde:	f7ff ffeb 	bl	db8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
     de2:	f00e fe7e 	bl	fae2 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
     de6:	4604      	mov	r4, r0
     de8:	4802      	ldr	r0, [pc, #8]	; (df4 <sdc_hci_cmd_cb_reset+0x18>)
     dea:	6800      	ldr	r0, [r0, #0]
     dec:	b100      	cbz	r0, df0 <sdc_hci_cmd_cb_reset+0x14>
     dee:	4780      	blx	r0
     df0:	4620      	mov	r0, r4
     df2:	bd10      	pop	{r4, pc}
     df4:	20000054 	.word	0x20000054

00000df8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
     df8:	4901      	ldr	r1, [pc, #4]	; (e00 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
     dfa:	6008      	str	r0, [r1, #0]
     dfc:	4770      	bx	lr
     dfe:	0000      	.short	0x0000
     e00:	20000054 	.word	0x20000054

00000e04 <sdc_hci_cmd_vs_zephyr_read_version_info>:
     e04:	2102      	movs	r1, #2
     e06:	8001      	strh	r1, [r0, #0]
     e08:	8041      	strh	r1, [r0, #2]
     e0a:	2100      	movs	r1, #0
     e0c:	7101      	strb	r1, [r0, #4]
     e0e:	21d8      	movs	r1, #216	; 0xd8
     e10:	7141      	strb	r1, [r0, #5]
     e12:	f642 510c 	movw	r1, #11532	; 0x2d0c
     e16:	80c1      	strh	r1, [r0, #6]
     e18:	4901      	ldr	r1, [pc, #4]	; (e20 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
     e1a:	6081      	str	r1, [r0, #8]
     e1c:	2000      	movs	r0, #0
     e1e:	4770      	bx	lr
     e20:	e2ae362f 	.word	0xe2ae362f

00000e24 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
     e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e26:	4605      	mov	r5, r0
     e28:	7808      	ldrb	r0, [r1, #0]
     e2a:	784a      	ldrb	r2, [r1, #1]
     e2c:	4290      	cmp	r0, r2
     e2e:	d902      	bls.n	e36 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x12>
     e30:	f240 11b1 	movw	r1, #433	; 0x1b1
     e34:	e007      	b.n	e46 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x22>
     e36:	9500      	str	r5, [sp, #0]
     e38:	b145      	cbz	r5, e4c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
     e3a:	2600      	movs	r6, #0
     e3c:	784c      	ldrb	r4, [r1, #1]
     e3e:	07a8      	lsls	r0, r5, #30
     e40:	d006      	beq.n	e50 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2c>
     e42:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
     e46:	2017      	movs	r0, #23
     e48:	f7ff fe0c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     e4c:	2601      	movs	r6, #1
     e4e:	e7f5      	b.n	e3c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x18>
     e50:	4f12      	ldr	r7, [pc, #72]	; (e9c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x78>)
     e52:	4631      	mov	r1, r6
     e54:	4668      	mov	r0, sp
     e56:	703c      	strb	r4, [r7, #0]
     e58:	f000 f8ca 	bl	ff0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>
     e5c:	2000      	movs	r0, #0
     e5e:	4603      	mov	r3, r0
     e60:	9900      	ldr	r1, [sp, #0]
     e62:	1cc9      	adds	r1, r1, #3
     e64:	f021 0103 	bic.w	r1, r1, #3
     e68:	9100      	str	r1, [sp, #0]
     e6a:	b96e      	cbnz	r6, e88 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
     e6c:	eb07 0280 	add.w	r2, r7, r0, lsl #2
     e70:	6091      	str	r1, [r2, #8]
     e72:	2100      	movs	r1, #0
     e74:	e006      	b.n	e84 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>
     e76:	bf00      	nop
     e78:	f8d2 c008 	ldr.w	ip, [r2, #8]
     e7c:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
     e80:	1c49      	adds	r1, r1, #1
     e82:	b2c9      	uxtb	r1, r1
     e84:	42a1      	cmp	r1, r4
     e86:	d3f7      	bcc.n	e78 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x54>
     e88:	9900      	ldr	r1, [sp, #0]
     e8a:	1c40      	adds	r0, r0, #1
     e8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
     e90:	9100      	str	r1, [sp, #0]
     e92:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
     e96:	d0e3      	beq.n	e60 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3c>
     e98:	1b48      	subs	r0, r1, r5
     e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e9c:	20000f18 	.word	0x20000f18

00000ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
     ea0:	b570      	push	{r4, r5, r6, lr}
     ea2:	4604      	mov	r4, r0
     ea4:	7985      	ldrb	r5, [r0, #6]
     ea6:	f000 f8df 	bl	1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
     eaa:	4a0c      	ldr	r2, [pc, #48]	; (edc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3c>)
     eac:	79e1      	ldrb	r1, [r4, #7]
     eae:	eb02 0285 	add.w	r2, r2, r5, lsl #2
     eb2:	e00e      	b.n	ed2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x32>
     eb4:	6893      	ldr	r3, [r2, #8]
     eb6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
     eba:	b143      	cbz	r3, ece <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x2e>
     ebc:	1c48      	adds	r0, r1, #1
     ebe:	71e0      	strb	r0, [r4, #7]
     ec0:	80a1      	strh	r1, [r4, #4]
     ec2:	6890      	ldr	r0, [r2, #8]
     ec4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
     ec8:	6020      	str	r0, [r4, #0]
     eca:	2000      	movs	r0, #0
     ecc:	bd70      	pop	{r4, r5, r6, pc}
     ece:	1c49      	adds	r1, r1, #1
     ed0:	b2c9      	uxtb	r1, r1
     ed2:	4281      	cmp	r1, r0
     ed4:	d3ee      	bcc.n	eb4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x14>
     ed6:	71e1      	strb	r1, [r4, #7]
     ed8:	2005      	movs	r0, #5
     eda:	bd70      	pop	{r4, r5, r6, pc}
     edc:	20000f18 	.word	0x20000f18

00000ee0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
     ee0:	b4f0      	push	{r4, r5, r6, r7}
     ee2:	b941      	cbnz	r1, ef6 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x16>
     ee4:	4a10      	ldr	r2, [pc, #64]	; (f28 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x48>)
     ee6:	2500      	movs	r5, #0
     ee8:	462b      	mov	r3, r5
     eea:	f64f 74ff 	movw	r4, #65535	; 0xffff
     eee:	eb02 0681 	add.w	r6, r2, r1, lsl #2
     ef2:	5c57      	ldrb	r7, [r2, r1]
     ef4:	e00d      	b.n	f12 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x32>
     ef6:	bcf0      	pop	{r4, r5, r6, r7}
     ef8:	2000      	movs	r0, #0
     efa:	4770      	bx	lr
     efc:	195a      	adds	r2, r3, r5
     efe:	f8d6 c008 	ldr.w	ip, [r6, #8]
     f02:	b292      	uxth	r2, r2
     f04:	f85c c022 	ldr.w	ip, [ip, r2, lsl #2]
     f08:	f1bc 0f00 	cmp.w	ip, #0
     f0c:	d004      	beq.n	f18 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x38>
     f0e:	1c5b      	adds	r3, r3, #1
     f10:	b29b      	uxth	r3, r3
     f12:	429f      	cmp	r7, r3
     f14:	d8f2      	bhi.n	efc <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1c>
     f16:	4622      	mov	r2, r4
     f18:	8002      	strh	r2, [r0, #0]
     f1a:	4610      	mov	r0, r2
     f1c:	42a2      	cmp	r2, r4
     f1e:	d0ea      	beq.n	ef6 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x16>
     f20:	bcf0      	pop	{r4, r5, r6, r7}
     f22:	f000 b82d 	b.w	f80 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x54>
     f26:	0000      	.short	0x0000
     f28:	20000f18 	.word	0x20000f18

00000f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
     f2c:	b570      	push	{r4, r5, r6, lr}
     f2e:	4606      	mov	r6, r0
     f30:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
     f34:	f243 0502 	movw	r5, #12290	; 0x3002
     f38:	38ff      	subs	r0, #255	; 0xff
     f3a:	d01a      	beq.n	f72 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
     f3c:	b109      	cbz	r1, f42 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16>
     f3e:	2007      	movs	r0, #7
     f40:	bd70      	pop	{r4, r5, r6, pc}
     f42:	4630      	mov	r0, r6
     f44:	f000 f844 	bl	fd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa4>
     f48:	0004      	movs	r4, r0
     f4a:	d012      	beq.n	f72 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
     f4c:	480a      	ldr	r0, [pc, #40]	; (f78 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x4c>)
     f4e:	4621      	mov	r1, r4
     f50:	6802      	ldr	r2, [r0, #0]
     f52:	4630      	mov	r0, r6
     f54:	4790      	blx	r2
     f56:	4d09      	ldr	r5, [pc, #36]	; (f7c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x50>)
     f58:	2000      	movs	r0, #0
     f5a:	68a9      	ldr	r1, [r5, #8]
     f5c:	f841 0026 	str.w	r0, [r1, r6, lsl #2]
     f60:	f000 f878 	bl	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
     f64:	4602      	mov	r2, r0
     f66:	4621      	mov	r1, r4
     f68:	6868      	ldr	r0, [r5, #4]
     f6a:	f00c fbdf 	bl	d72c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
     f6e:	2000      	movs	r0, #0
     f70:	bd70      	pop	{r4, r5, r6, pc}
     f72:	4628      	mov	r0, r5
     f74:	bd70      	pop	{r4, r5, r6, pc}
     f76:	0000      	.short	0x0000
     f78:	00001078 	.word	0x00001078
     f7c:	20000f18 	.word	0x20000f18
     f80:	b570      	push	{r4, r5, r6, lr}
     f82:	460e      	mov	r6, r1
     f84:	4605      	mov	r5, r0
     f86:	f00c fc00 	bl	d78a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x12>
     f8a:	b158      	cbz	r0, fa4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x78>
     f8c:	480f      	ldr	r0, [pc, #60]	; (fcc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa0>)
     f8e:	eb00 0486 	add.w	r4, r0, r6, lsl #2
     f92:	68a0      	ldr	r0, [r4, #8]
     f94:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
     f98:	b138      	cbz	r0, faa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x7e>
     f9a:	f44f 71c5 	mov.w	r1, #394	; 0x18a
     f9e:	2017      	movs	r0, #23
     fa0:	f7ff fd60 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     fa4:	f240 1189 	movw	r1, #393	; 0x189
     fa8:	e7f9      	b.n	f9e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x72>
     faa:	6860      	ldr	r0, [r4, #4]
     fac:	2800      	cmp	r0, #0
     fae:	d00b      	beq.n	fc8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x9c>
     fb0:	4630      	mov	r0, r6
     fb2:	f000 f84f 	bl	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
     fb6:	4601      	mov	r1, r0
     fb8:	6860      	ldr	r0, [r4, #4]
     fba:	f00c fb5f 	bl	d67c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
     fbe:	2800      	cmp	r0, #0
     fc0:	d002      	beq.n	fc8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x9c>
     fc2:	68a1      	ldr	r1, [r4, #8]
     fc4:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
     fc8:	bd70      	pop	{r4, r5, r6, pc}
     fca:	0000      	.short	0x0000
     fcc:	20000f18 	.word	0x20000f18
     fd0:	b570      	push	{r4, r5, r6, lr}
     fd2:	460c      	mov	r4, r1
     fd4:	4605      	mov	r5, r0
     fd6:	f00c fbd8 	bl	d78a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x12>
     fda:	2800      	cmp	r0, #0
     fdc:	d005      	beq.n	fea <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xbe>
     fde:	4803      	ldr	r0, [pc, #12]	; (fec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc0>)
     fe0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     fe4:	6880      	ldr	r0, [r0, #8]
     fe6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
     fea:	bd70      	pop	{r4, r5, r6, pc}
     fec:	20000f18 	.word	0x20000f18
     ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     ff4:	4e16      	ldr	r6, [pc, #88]	; (1050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>)
     ff6:	4688      	mov	r8, r1
     ff8:	4605      	mov	r5, r0
     ffa:	2400      	movs	r4, #0
     ffc:	6828      	ldr	r0, [r5, #0]
     ffe:	1cc0      	adds	r0, r0, #3
    1000:	f020 0003 	bic.w	r0, r0, #3
    1004:	6028      	str	r0, [r5, #0]
    1006:	4620      	mov	r0, r4
    1008:	f000 f824 	bl	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
    100c:	5d31      	ldrb	r1, [r6, r4]
    100e:	4348      	muls	r0, r1
    1010:	f1b8 0f00 	cmp.w	r8, #0
    1014:	d001      	beq.n	101a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
    1016:	2200      	movs	r2, #0
    1018:	e000      	b.n	101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
    101a:	682a      	ldr	r2, [r5, #0]
    101c:	4601      	mov	r1, r0
    101e:	9200      	str	r2, [sp, #0]
    1020:	b132      	cbz	r2, 1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
    1022:	2700      	movs	r7, #0
    1024:	ea4f 000d 	mov.w	r0, sp
    1028:	f00c fb59 	bl	d6de <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    102c:	b11f      	cbz	r7, 1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
    102e:	e006      	b.n	103e <CONFIG_FPROTECT_BLOCK_SIZE+0x3e>
    1030:	2701      	movs	r7, #1
    1032:	2000      	movs	r0, #0
    1034:	e7f8      	b.n	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
    1036:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    103a:	9a00      	ldr	r2, [sp, #0]
    103c:	604a      	str	r2, [r1, #4]
    103e:	6829      	ldr	r1, [r5, #0]
    1040:	1c64      	adds	r4, r4, #1
    1042:	4408      	add	r0, r1
    1044:	6028      	str	r0, [r5, #0]
    1046:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    104a:	d0d7      	beq.n	ffc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>
    104c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1050:	20000f18 	.word	0x20000f18
    1054:	4903      	ldr	r1, [pc, #12]	; (1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>)
    1056:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    105a:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    105e:	1cc0      	adds	r0, r0, #3
    1060:	4008      	ands	r0, r1
    1062:	4770      	bx	lr
    1064:	00001074 	.word	0x00001074
    1068:	4801      	ldr	r0, [pc, #4]	; (1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>)
    106a:	7800      	ldrb	r0, [r0, #0]
    106c:	4770      	bx	lr
    106e:	0000      	.short	0x0000
    1070:	20000f18 	.word	0x20000f18
    1074:	000002a8 	.word	0x000002a8
    1078:	0000edf5 	.word	0x0000edf5

0000107c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    107c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1080:	4c24      	ldr	r4, [pc, #144]	; (1114 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
    1082:	4606      	mov	r6, r0
    1084:	b081      	sub	sp, #4
    1086:	6820      	ldr	r0, [r4, #0]
    1088:	469a      	mov	sl, r3
    108a:	4693      	mov	fp, r2
    108c:	b158      	cbz	r0, 10a6 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    108e:	7a01      	ldrb	r1, [r0, #8]
    1090:	42b1      	cmp	r1, r6
    1092:	d903      	bls.n	109c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    1094:	6840      	ldr	r0, [r0, #4]
    1096:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    109a:	b140      	cbz	r0, 10ae <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    109c:	f243 0002 	movw	r0, #12290	; 0x3002
    10a0:	b005      	add	sp, #20
    10a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10a6:	21a5      	movs	r1, #165	; 0xa5
    10a8:	2018      	movs	r0, #24
    10aa:	f7ff fcdb 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    10ae:	4619      	mov	r1, r3
    10b0:	9802      	ldr	r0, [sp, #8]
    10b2:	f00c fb8d 	bl	d7d0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    10b6:	4680      	mov	r8, r0
    10b8:	4658      	mov	r0, fp
    10ba:	990e      	ldr	r1, [sp, #56]	; 0x38
    10bc:	f00c fb7e 	bl	d7bc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    10c0:	4605      	mov	r5, r0
    10c2:	eb08 0005 	add.w	r0, r8, r5
    10c6:	1d00      	adds	r0, r0, #4
    10c8:	b287      	uxth	r7, r0
    10ca:	6820      	ldr	r0, [r4, #0]
    10cc:	46a1      	mov	r9, r4
    10ce:	4639      	mov	r1, r7
    10d0:	6800      	ldr	r0, [r0, #0]
    10d2:	f00c fad3 	bl	d67c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    10d6:	0004      	movs	r4, r0
    10d8:	d01a      	beq.n	1110 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
    10da:	8067      	strh	r7, [r4, #2]
    10dc:	8025      	strh	r5, [r4, #0]
    10de:	4629      	mov	r1, r5
    10e0:	1d20      	adds	r0, r4, #4
    10e2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    10e4:	4607      	mov	r7, r0
    10e6:	465a      	mov	r2, fp
    10e8:	2309      	movs	r3, #9
    10ea:	9500      	str	r5, [sp, #0]
    10ec:	f00c fa40 	bl	d570 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    10f0:	8820      	ldrh	r0, [r4, #0]
    10f2:	4641      	mov	r1, r8
    10f4:	4438      	add	r0, r7
    10f6:	230a      	movs	r3, #10
    10f8:	9a02      	ldr	r2, [sp, #8]
    10fa:	f8cd a000 	str.w	sl, [sp]
    10fe:	f00c fa37 	bl	d570 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    1102:	f8d9 0000 	ldr.w	r0, [r9]
    1106:	6840      	ldr	r0, [r0, #4]
    1108:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    110c:	2000      	movs	r0, #0
    110e:	e7c7      	b.n	10a0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    1110:	2004      	movs	r0, #4
    1112:	e7c5      	b.n	10a0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    1114:	20000058 	.word	0x20000058

00001118 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    1118:	b570      	push	{r4, r5, r6, lr}
    111a:	4c14      	ldr	r4, [pc, #80]	; (116c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    111c:	6823      	ldr	r3, [r4, #0]
    111e:	b18b      	cbz	r3, 1144 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    1120:	7a19      	ldrb	r1, [r3, #8]
    1122:	4281      	cmp	r1, r0
    1124:	d912      	bls.n	114c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    1126:	685a      	ldr	r2, [r3, #4]
    1128:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    112c:	b171      	cbz	r1, 114c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    112e:	2500      	movs	r5, #0
    1130:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    1134:	884a      	ldrh	r2, [r1, #2]
    1136:	6818      	ldr	r0, [r3, #0]
    1138:	f00c faf8 	bl	d72c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    113c:	6821      	ldr	r1, [r4, #0]
    113e:	2000      	movs	r0, #0
    1140:	7a0a      	ldrb	r2, [r1, #8]
    1142:	e00c      	b.n	115e <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    1144:	21c6      	movs	r1, #198	; 0xc6
    1146:	2018      	movs	r0, #24
    1148:	f7ff fc8c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    114c:	f243 0002 	movw	r0, #12290	; 0x3002
    1150:	bd70      	pop	{r4, r5, r6, pc}
    1152:	684b      	ldr	r3, [r1, #4]
    1154:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1158:	b933      	cbnz	r3, 1168 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    115a:	1c40      	adds	r0, r0, #1
    115c:	b2c0      	uxtb	r0, r0
    115e:	4282      	cmp	r2, r0
    1160:	d8f7      	bhi.n	1152 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    1162:	6808      	ldr	r0, [r1, #0]
    1164:	f00c fad7 	bl	d716 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    1168:	2000      	movs	r0, #0
    116a:	bd70      	pop	{r4, r5, r6, pc}
    116c:	20000058 	.word	0x20000058

00001170 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    1170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1174:	460d      	mov	r5, r1
    1176:	0004      	movs	r4, r0
    1178:	4690      	mov	r8, r2
    117a:	f04f 0600 	mov.w	r6, #0
    117e:	d006      	beq.n	118e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    1180:	2700      	movs	r7, #0
    1182:	07a0      	lsls	r0, r4, #30
    1184:	d005      	beq.n	1192 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    1186:	2186      	movs	r1, #134	; 0x86
    1188:	2018      	movs	r0, #24
    118a:	f7ff fc6b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    118e:	2701      	movs	r7, #1
    1190:	e7f7      	b.n	1182 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    1192:	b1cd      	cbz	r5, 11c8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    1194:	4611      	mov	r1, r2
    1196:	2000      	movs	r0, #0
    1198:	f00c faa1 	bl	d6de <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    119c:	300c      	adds	r0, #12
    119e:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    11a2:	b98f      	cbnz	r7, 11c8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    11a4:	4f0a      	ldr	r7, [pc, #40]	; (11d0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    11a6:	f104 000c 	add.w	r0, r4, #12
    11aa:	00aa      	lsls	r2, r5, #2
    11ac:	603c      	str	r4, [r7, #0]
    11ae:	7225      	strb	r5, [r4, #8]
    11b0:	6060      	str	r0, [r4, #4]
    11b2:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    11b6:	6020      	str	r0, [r4, #0]
    11b8:	2100      	movs	r1, #0
    11ba:	6860      	ldr	r0, [r4, #4]
    11bc:	f00f fad1 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    11c0:	4641      	mov	r1, r8
    11c2:	6838      	ldr	r0, [r7, #0]
    11c4:	f00c fa8b 	bl	d6de <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    11c8:	4630      	mov	r0, r6
    11ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    11ce:	0000      	.short	0x0000
    11d0:	20000058 	.word	0x20000058

000011d4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    11d4:	b570      	push	{r4, r5, r6, lr}
    11d6:	4d08      	ldr	r5, [pc, #32]	; (11f8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    11d8:	6828      	ldr	r0, [r5, #0]
    11da:	2800      	cmp	r0, #0
    11dc:	d00a      	beq.n	11f4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    11de:	2400      	movs	r4, #0
    11e0:	e004      	b.n	11ec <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    11e2:	4620      	mov	r0, r4
    11e4:	f7ff ff98 	bl	1118 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    11e8:	1c64      	adds	r4, r4, #1
    11ea:	b2e4      	uxtb	r4, r4
    11ec:	6828      	ldr	r0, [r5, #0]
    11ee:	7a00      	ldrb	r0, [r0, #8]
    11f0:	42a0      	cmp	r0, r4
    11f2:	d8f6      	bhi.n	11e2 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    11f4:	bd70      	pop	{r4, r5, r6, pc}
    11f6:	0000      	.short	0x0000
    11f8:	20000058 	.word	0x20000058

000011fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    11fc:	4909      	ldr	r1, [pc, #36]	; (1224 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    11fe:	b510      	push	{r4, lr}
    1200:	4602      	mov	r2, r0
    1202:	6809      	ldr	r1, [r1, #0]
    1204:	2000      	movs	r0, #0
    1206:	b149      	cbz	r1, 121c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    1208:	7a0b      	ldrb	r3, [r1, #8]
    120a:	4293      	cmp	r3, r2
    120c:	d905      	bls.n	121a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    120e:	6849      	ldr	r1, [r1, #4]
    1210:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1214:	2900      	cmp	r1, #0
    1216:	d000      	beq.n	121a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    1218:	1d08      	adds	r0, r1, #4
    121a:	bd10      	pop	{r4, pc}
    121c:	21ec      	movs	r1, #236	; 0xec
    121e:	2018      	movs	r0, #24
    1220:	f7ff fc20 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1224:	20000058 	.word	0x20000058

00001228 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    1228:	490a      	ldr	r1, [pc, #40]	; (1254 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    122a:	b510      	push	{r4, lr}
    122c:	4602      	mov	r2, r0
    122e:	6809      	ldr	r1, [r1, #0]
    1230:	2000      	movs	r0, #0
    1232:	b159      	cbz	r1, 124c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    1234:	7a0b      	ldrb	r3, [r1, #8]
    1236:	4293      	cmp	r3, r2
    1238:	d907      	bls.n	124a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    123a:	6849      	ldr	r1, [r1, #4]
    123c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1240:	2900      	cmp	r1, #0
    1242:	d002      	beq.n	124a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    1244:	f831 0b04 	ldrh.w	r0, [r1], #4
    1248:	4408      	add	r0, r1
    124a:	bd10      	pop	{r4, pc}
    124c:	21fa      	movs	r1, #250	; 0xfa
    124e:	2018      	movs	r0, #24
    1250:	f7ff fc08 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1254:	20000058 	.word	0x20000058

00001258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>:
    1258:	4801      	ldr	r0, [pc, #4]	; (1260 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA+0x8>)
    125a:	7840      	ldrb	r0, [r0, #1]
    125c:	4770      	bx	lr
    125e:	0000      	.short	0x0000
    1260:	2000005c 	.word	0x2000005c

00001264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>:
    1264:	4801      	ldr	r0, [pc, #4]	; (126c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q+0x8>)
    1266:	6840      	ldr	r0, [r0, #4]
    1268:	4770      	bx	lr
    126a:	0000      	.short	0x0000
    126c:	2000005c 	.word	0x2000005c

00001270 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
    1270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1274:	460c      	mov	r4, r1
    1276:	4607      	mov	r7, r0
    1278:	4616      	mov	r6, r2
    127a:	2125      	movs	r1, #37	; 0x25
    127c:	4610      	mov	r0, r2
    127e:	460d      	mov	r5, r1
    1280:	4622      	mov	r2, r4
    1282:	f00c f9ba 	bl	d5fa <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    1286:	4680      	mov	r8, r0
    1288:	b157      	cbz	r7, 12a0 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x30>
    128a:	4638      	mov	r0, r7
    128c:	4641      	mov	r1, r8
    128e:	4632      	mov	r2, r6
    1290:	462b      	mov	r3, r5
    1292:	9400      	str	r4, [sp, #0]
    1294:	f00c f96c 	bl	d570 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    1298:	4803      	ldr	r0, [pc, #12]	; (12a8 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x38>)
    129a:	6047      	str	r7, [r0, #4]
    129c:	7004      	strb	r4, [r0, #0]
    129e:	7046      	strb	r6, [r0, #1]
    12a0:	4640      	mov	r0, r8
    12a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    12a6:	0000      	.short	0x0000
    12a8:	2000005c 	.word	0x2000005c

000012ac <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>:
    12ac:	4802      	ldr	r0, [pc, #8]	; (12b8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xc>)
    12ae:	7842      	ldrb	r2, [r0, #1]
    12b0:	7801      	ldrb	r1, [r0, #0]
    12b2:	6840      	ldr	r0, [r0, #4]
    12b4:	f7ff bfdc 	b.w	1270 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    12b8:	2000005c 	.word	0x2000005c
    12bc:	b530      	push	{r4, r5, lr}
    12be:	490d      	ldr	r1, [pc, #52]	; (12f4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x48>)
    12c0:	2001      	movs	r0, #1
    12c2:	6048      	str	r0, [r1, #4]
    12c4:	1e82      	subs	r2, r0, #2
    12c6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    12ca:	490b      	ldr	r1, [pc, #44]	; (12f8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x4c>)
    12cc:	6088      	str	r0, [r1, #8]
    12ce:	2300      	movs	r3, #0
    12d0:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    12d4:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    12d8:	4c08      	ldr	r4, [pc, #32]	; (12fc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x50>)
    12da:	6023      	str	r3, [r4, #0]
    12dc:	1d25      	adds	r5, r4, #4
    12de:	6028      	str	r0, [r5, #0]
    12e0:	6088      	str	r0, [r1, #8]
    12e2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    12e6:	6023      	str	r3, [r4, #0]
    12e8:	6028      	str	r0, [r5, #0]
    12ea:	4906      	ldr	r1, [pc, #24]	; (1304 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x58>)
    12ec:	4804      	ldr	r0, [pc, #16]	; (1300 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x54>)
    12ee:	6008      	str	r0, [r1, #0]
    12f0:	bd30      	pop	{r4, r5, pc}
    12f2:	0000      	.short	0x0000
    12f4:	4000e000 	.word	0x4000e000
    12f8:	4000f000 	.word	0x4000f000
    12fc:	4000f500 	.word	0x4000f500
    1300:	3ff60000 	.word	0x3ff60000
    1304:	4001f508 	.word	0x4001f508

00001308 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    1308:	b510      	push	{r4, lr}
    130a:	f7ff ffd7 	bl	12bc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    130e:	f00c fa87 	bl	d820 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x82>
    1312:	4903      	ldr	r1, [pc, #12]	; (1320 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    1314:	4801      	ldr	r0, [pc, #4]	; (131c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    1316:	6008      	str	r0, [r1, #0]
    1318:	bd10      	pop	{r4, pc}
    131a:	0000      	.short	0x0000
    131c:	3ff60000 	.word	0x3ff60000
    1320:	4001f508 	.word	0x4001f508

00001324 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    1324:	b510      	push	{r4, lr}
    1326:	f7ff ffc9 	bl	12bc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    132a:	f00c fa79 	bl	d820 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x82>
    132e:	f000 f887 	bl	1440 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    1332:	4905      	ldr	r1, [pc, #20]	; (1348 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    1334:	4803      	ldr	r0, [pc, #12]	; (1344 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x20>)
    1336:	6008      	str	r0, [r1, #0]
    1338:	f000 f8b8 	bl	14ac <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    133c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1340:	f000 b8dc 	b.w	14fc <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    1344:	3ff60000 	.word	0x3ff60000
    1348:	4001f508 	.word	0x4001f508
    134c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1350:	4682      	mov	sl, r0
    1352:	4838      	ldr	r0, [pc, #224]	; (1434 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xac>)
    1354:	f00f f897 	bl	10486 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    1358:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 1434 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xac>
    135c:	b128      	cbz	r0, 136a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x46>
    135e:	2601      	movs	r6, #1
    1360:	f10b 0001 	add.w	r0, fp, #1
    1364:	21ff      	movs	r1, #255	; 0xff
    1366:	7001      	strb	r1, [r0, #0]
    1368:	e000      	b.n	136c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x48>
    136a:	2600      	movs	r6, #0
    136c:	f44f 7580 	mov.w	r5, #256	; 0x100
    1370:	4c31      	ldr	r4, [pc, #196]	; (1438 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xb0>)
    1372:	f04f 0800 	mov.w	r8, #0
    1376:	1d2f      	adds	r7, r5, #4
    1378:	2101      	movs	r1, #1
    137a:	6061      	str	r1, [r4, #4]
    137c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    1380:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1384:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    1388:	6021      	str	r1, [r4, #0]
    138a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 143c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xb4>
    138e:	e01c      	b.n	13ca <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x42>
    1390:	f8d9 0000 	ldr.w	r0, [r9]
    1394:	06c0      	lsls	r0, r0, #27
    1396:	d518      	bpl.n	13ca <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x42>
    1398:	200e      	movs	r0, #14
    139a:	f00c fa50 	bl	d83e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa0>
    139e:	f3ef 8010 	mrs	r0, PRIMASK
    13a2:	9000      	str	r0, [sp, #0]
    13a4:	b672      	cpsid	i
    13a6:	2103      	movs	r1, #3
    13a8:	4620      	mov	r0, r4
    13aa:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    13ae:	4629      	mov	r1, r5
    13b0:	f00c fa52 	bl	d858 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    13b4:	b930      	cbnz	r0, 13c4 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x3c>
    13b6:	4639      	mov	r1, r7
    13b8:	4620      	mov	r0, r4
    13ba:	f00c fa4d 	bl	d858 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    13be:	b908      	cbnz	r0, 13c4 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x3c>
    13c0:	f00f f8f8 	bl	105b4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    13c4:	9800      	ldr	r0, [sp, #0]
    13c6:	b900      	cbnz	r0, 13ca <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x42>
    13c8:	b662      	cpsie	i
    13ca:	4629      	mov	r1, r5
    13cc:	4620      	mov	r0, r4
    13ce:	f00c fa43 	bl	d858 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    13d2:	b928      	cbnz	r0, 13e0 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x58>
    13d4:	4639      	mov	r1, r7
    13d6:	4620      	mov	r0, r4
    13d8:	f00c fa3e 	bl	d858 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    13dc:	2800      	cmp	r0, #0
    13de:	d0d7      	beq.n	1390 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x8>
    13e0:	4639      	mov	r1, r7
    13e2:	4620      	mov	r0, r4
    13e4:	f00c fa38 	bl	d858 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    13e8:	2800      	cmp	r0, #0
    13ea:	d1c5      	bne.n	1378 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x54>
    13ec:	bb06      	cbnz	r6, 1430 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xa8>
    13ee:	f89b 1001 	ldrb.w	r1, [fp, #1]
    13f2:	f88d 1000 	strb.w	r1, [sp]
    13f6:	9900      	ldr	r1, [sp, #0]
    13f8:	9100      	str	r1, [sp, #0]
    13fa:	f89d 1000 	ldrb.w	r1, [sp]
    13fe:	b109      	cbz	r1, 1404 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x7c>
    1400:	2501      	movs	r5, #1
    1402:	e000      	b.n	1406 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x7e>
    1404:	2500      	movs	r5, #0
    1406:	f10b 0001 	add.w	r0, fp, #1
    140a:	f880 8000 	strb.w	r8, [r0]
    140e:	2003      	movs	r0, #3
    1410:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    1414:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1418:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    141c:	200e      	movs	r0, #14
    141e:	f00c fa0e 	bl	d83e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa0>
    1422:	4804      	ldr	r0, [pc, #16]	; (1434 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xac>)
    1424:	f00f f846 	bl	104b4 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    1428:	b115      	cbz	r5, 1430 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xa8>
    142a:	2011      	movs	r0, #17
    142c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1430:	2000      	movs	r0, #0
    1432:	e7fb      	b.n	142c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xa4>
    1434:	20000340 	.word	0x20000340
    1438:	4000e000 	.word	0x4000e000
    143c:	e000ed10 	.word	0xe000ed10

00001440 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    1440:	b510      	push	{r4, lr}
    1442:	4806      	ldr	r0, [pc, #24]	; (145c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1444:	f00f f832 	bl	104ac <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    1448:	b118      	cbz	r0, 1452 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    144a:	2127      	movs	r1, #39	; 0x27
    144c:	201d      	movs	r0, #29
    144e:	f7ff fb09 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1452:	4802      	ldr	r0, [pc, #8]	; (145c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1454:	2100      	movs	r1, #0
    1456:	7041      	strb	r1, [r0, #1]
    1458:	bd10      	pop	{r4, pc}
    145a:	0000      	.short	0x0000
    145c:	20000340 	.word	0x20000340

00001460 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    1460:	b570      	push	{r4, r5, r6, lr}
    1462:	4911      	ldr	r1, [pc, #68]	; (14a8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    1464:	680a      	ldr	r2, [r1, #0]
    1466:	b1ea      	cbz	r2, 14a4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    1468:	2300      	movs	r3, #0
    146a:	461d      	mov	r5, r3
    146c:	2401      	movs	r4, #1
    146e:	684a      	ldr	r2, [r1, #4]
    1470:	1c52      	adds	r2, r2, #1
    1472:	604a      	str	r2, [r1, #4]
    1474:	2a0c      	cmp	r2, #12
    1476:	d300      	bcc.n	147a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    1478:	604d      	str	r5, [r1, #4]
    147a:	790e      	ldrb	r6, [r1, #4]
    147c:	fa04 f206 	lsl.w	r2, r4, r6
    1480:	680e      	ldr	r6, [r1, #0]
    1482:	4216      	tst	r6, r2
    1484:	d00b      	beq.n	149e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    1486:	f3ef 8310 	mrs	r3, PRIMASK
    148a:	b672      	cpsid	i
    148c:	680c      	ldr	r4, [r1, #0]
    148e:	4394      	bics	r4, r2
    1490:	600c      	str	r4, [r1, #0]
    1492:	b903      	cbnz	r3, 1496 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    1494:	b662      	cpsie	i
    1496:	6849      	ldr	r1, [r1, #4]
    1498:	6001      	str	r1, [r0, #0]
    149a:	2000      	movs	r0, #0
    149c:	bd70      	pop	{r4, r5, r6, pc}
    149e:	1c5b      	adds	r3, r3, #1
    14a0:	2b0c      	cmp	r3, #12
    14a2:	d3e4      	bcc.n	146e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    14a4:	2005      	movs	r0, #5
    14a6:	bd70      	pop	{r4, r5, r6, pc}
    14a8:	20000064 	.word	0x20000064

000014ac <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    14ac:	4802      	ldr	r0, [pc, #8]	; (14b8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    14ae:	2100      	movs	r1, #0
    14b0:	6001      	str	r1, [r0, #0]
    14b2:	6041      	str	r1, [r0, #4]
    14b4:	4770      	bx	lr
    14b6:	0000      	.short	0x0000
    14b8:	20000064 	.word	0x20000064

000014bc <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    14bc:	b510      	push	{r4, lr}
    14be:	4c04      	ldr	r4, [pc, #16]	; (14d0 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    14c0:	7820      	ldrb	r0, [r4, #0]
    14c2:	28ff      	cmp	r0, #255	; 0xff
    14c4:	d003      	beq.n	14ce <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    14c6:	f00b f837 	bl	c538 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    14ca:	20ff      	movs	r0, #255	; 0xff
    14cc:	7020      	strb	r0, [r4, #0]
    14ce:	bd10      	pop	{r4, pc}
    14d0:	20000000 	.word	0x20000000

000014d4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    14d4:	b510      	push	{r4, lr}
    14d6:	4c08      	ldr	r4, [pc, #32]	; (14f8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    14d8:	7861      	ldrb	r1, [r4, #1]
    14da:	b109      	cbz	r1, 14e0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    14dc:	200f      	movs	r0, #15
    14de:	bd10      	pop	{r4, pc}
    14e0:	f00a fff0 	bl	c4c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    14e4:	7020      	strb	r0, [r4, #0]
    14e6:	28ff      	cmp	r0, #255	; 0xff
    14e8:	d001      	beq.n	14ee <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    14ea:	2000      	movs	r0, #0
    14ec:	bd10      	pop	{r4, pc}
    14ee:	2173      	movs	r1, #115	; 0x73
    14f0:	201f      	movs	r0, #31
    14f2:	f7ff fab7 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    14f6:	0000      	.short	0x0000
    14f8:	20000000 	.word	0x20000000

000014fc <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    14fc:	4901      	ldr	r1, [pc, #4]	; (1504 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    14fe:	2000      	movs	r0, #0
    1500:	7048      	strb	r0, [r1, #1]
    1502:	4770      	bx	lr
    1504:	20000000 	.word	0x20000000

00001508 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    1508:	4806      	ldr	r0, [pc, #24]	; (1524 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    150a:	4a07      	ldr	r2, [pc, #28]	; (1528 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    150c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    150e:	8852      	ldrh	r2, [r2, #2]
    1510:	4291      	cmp	r1, r2
    1512:	d104      	bne.n	151e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    1514:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    1518:	b108      	cbz	r0, 151e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    151a:	2000      	movs	r0, #0
    151c:	4770      	bx	lr
    151e:	2001      	movs	r0, #1
    1520:	4770      	bx	lr
    1522:	0000      	.short	0x0000
    1524:	2000142c 	.word	0x2000142c
    1528:	2000032c 	.word	0x2000032c

0000152c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    152c:	4901      	ldr	r1, [pc, #4]	; (1534 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    152e:	8048      	strh	r0, [r1, #2]
    1530:	4770      	bx	lr
    1532:	0000      	.short	0x0000
    1534:	2000032c 	.word	0x2000032c

00001538 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    1538:	4808      	ldr	r0, [pc, #32]	; (155c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    153a:	4a09      	ldr	r2, [pc, #36]	; (1560 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    153c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    153e:	8852      	ldrh	r2, [r2, #2]
    1540:	4291      	cmp	r1, r2
    1542:	d109      	bne.n	1558 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    1544:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1548:	8481      	strh	r1, [r0, #36]	; 0x24
    154a:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    154e:	b119      	cbz	r1, 1558 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    1550:	2100      	movs	r1, #0
    1552:	7001      	strb	r1, [r0, #0]
    1554:	2001      	movs	r0, #1
    1556:	4770      	bx	lr
    1558:	2000      	movs	r0, #0
    155a:	4770      	bx	lr
    155c:	2000142c 	.word	0x2000142c
    1560:	2000032c 	.word	0x2000032c

00001564 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    1564:	4807      	ldr	r0, [pc, #28]	; (1584 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    1566:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    156a:	2901      	cmp	r1, #1
    156c:	d007      	beq.n	157e <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    156e:	2101      	movs	r1, #1
    1570:	7001      	strb	r1, [r0, #0]
    1572:	4805      	ldr	r0, [pc, #20]	; (1588 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    1574:	4903      	ldr	r1, [pc, #12]	; (1584 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    1576:	8800      	ldrh	r0, [r0, #0]
    1578:	8488      	strh	r0, [r1, #36]	; 0x24
    157a:	2001      	movs	r0, #1
    157c:	4770      	bx	lr
    157e:	2000      	movs	r0, #0
    1580:	4770      	bx	lr
    1582:	0000      	.short	0x0000
    1584:	2000142c 	.word	0x2000142c
    1588:	2000032c 	.word	0x2000032c

0000158c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    158c:	4906      	ldr	r1, [pc, #24]	; (15a8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    158e:	4b07      	ldr	r3, [pc, #28]	; (15ac <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    1590:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    1592:	885b      	ldrh	r3, [r3, #2]
    1594:	429a      	cmp	r2, r3
    1596:	d105      	bne.n	15a4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    1598:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    159c:	b112      	cbz	r2, 15a4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    159e:	6001      	str	r1, [r0, #0]
    15a0:	2001      	movs	r0, #1
    15a2:	4770      	bx	lr
    15a4:	2000      	movs	r0, #0
    15a6:	4770      	bx	lr
    15a8:	2000142c 	.word	0x2000142c
    15ac:	2000032c 	.word	0x2000032c

000015b0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    15b0:	4909      	ldr	r1, [pc, #36]	; (15d8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    15b2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    15b4:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    15b8:	3bff      	subs	r3, #255	; 0xff
    15ba:	d002      	beq.n	15c2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    15bc:	2100      	movs	r1, #0
    15be:	6001      	str	r1, [r0, #0]
    15c0:	e007      	b.n	15d2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    15c2:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    15c6:	4904      	ldr	r1, [pc, #16]	; (15d8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    15c8:	2a01      	cmp	r2, #1
    15ca:	d002      	beq.n	15d2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    15cc:	6001      	str	r1, [r0, #0]
    15ce:	2001      	movs	r0, #1
    15d0:	4770      	bx	lr
    15d2:	2000      	movs	r0, #0
    15d4:	4770      	bx	lr
    15d6:	0000      	.short	0x0000
    15d8:	2000142c 	.word	0x2000142c

000015dc <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    15dc:	4901      	ldr	r1, [pc, #4]	; (15e4 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    15de:	8008      	strh	r0, [r1, #0]
    15e0:	4770      	bx	lr
    15e2:	0000      	.short	0x0000
    15e4:	2000032c 	.word	0x2000032c

000015e8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    15e8:	4905      	ldr	r1, [pc, #20]	; (1600 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    15ea:	2000      	movs	r0, #0
    15ec:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    15f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
    15f4:	8488      	strh	r0, [r1, #36]	; 0x24
    15f6:	4903      	ldr	r1, [pc, #12]	; (1604 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    15f8:	8008      	strh	r0, [r1, #0]
    15fa:	8048      	strh	r0, [r1, #2]
    15fc:	4770      	bx	lr
    15fe:	0000      	.short	0x0000
    1600:	2000142c 	.word	0x2000142c
    1604:	2000032c 	.word	0x2000032c
    1608:	4905      	ldr	r1, [pc, #20]	; (1620 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    160a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    160c:	4282      	cmp	r2, r0
    160e:	d105      	bne.n	161c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    1610:	2000      	movs	r0, #0
    1612:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    1616:	f64f 70ff 	movw	r0, #65535	; 0xffff
    161a:	8488      	strh	r0, [r1, #36]	; 0x24
    161c:	4770      	bx	lr
    161e:	0000      	.short	0x0000
    1620:	2000142c 	.word	0x2000142c

00001624 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    1624:	4a0a      	ldr	r2, [pc, #40]	; (1650 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    1626:	b110      	cbz	r0, 162e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    1628:	2801      	cmp	r0, #1
    162a:	d007      	beq.n	163c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    162c:	e00e      	b.n	164c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    162e:	7850      	ldrb	r0, [r2, #1]
    1630:	b160      	cbz	r0, 164c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1632:	f8d2 0002 	ldr.w	r0, [r2, #2]
    1636:	6008      	str	r0, [r1, #0]
    1638:	88d0      	ldrh	r0, [r2, #6]
    163a:	e004      	b.n	1646 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    163c:	7810      	ldrb	r0, [r2, #0]
    163e:	b128      	cbz	r0, 164c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1640:	6890      	ldr	r0, [r2, #8]
    1642:	6008      	str	r0, [r1, #0]
    1644:	8990      	ldrh	r0, [r2, #12]
    1646:	8088      	strh	r0, [r1, #4]
    1648:	2001      	movs	r0, #1
    164a:	4770      	bx	lr
    164c:	2000      	movs	r0, #0
    164e:	4770      	bx	lr
    1650:	20000342 	.word	0x20000342

00001654 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    1654:	4a08      	ldr	r2, [pc, #32]	; (1678 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    1656:	2301      	movs	r3, #1
    1658:	b138      	cbz	r0, 166a <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    165a:	2801      	cmp	r0, #1
    165c:	d104      	bne.n	1668 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    165e:	7013      	strb	r3, [r2, #0]
    1660:	6808      	ldr	r0, [r1, #0]
    1662:	6090      	str	r0, [r2, #8]
    1664:	8888      	ldrh	r0, [r1, #4]
    1666:	8190      	strh	r0, [r2, #12]
    1668:	4770      	bx	lr
    166a:	7053      	strb	r3, [r2, #1]
    166c:	6808      	ldr	r0, [r1, #0]
    166e:	f8c2 0002 	str.w	r0, [r2, #2]
    1672:	8888      	ldrh	r0, [r1, #4]
    1674:	80d0      	strh	r0, [r2, #6]
    1676:	4770      	bx	lr
    1678:	20000342 	.word	0x20000342

0000167c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    167c:	4906      	ldr	r1, [pc, #24]	; (1698 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    167e:	b110      	cbz	r0, 1686 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    1680:	2801      	cmp	r0, #1
    1682:	d002      	beq.n	168a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    1684:	e005      	b.n	1692 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    1686:	7848      	ldrb	r0, [r1, #1]
    1688:	e000      	b.n	168c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    168a:	7808      	ldrb	r0, [r1, #0]
    168c:	b108      	cbz	r0, 1692 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    168e:	2001      	movs	r0, #1
    1690:	4770      	bx	lr
    1692:	2000      	movs	r0, #0
    1694:	4770      	bx	lr
    1696:	0000      	.short	0x0000
    1698:	20000342 	.word	0x20000342

0000169c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    169c:	4901      	ldr	r1, [pc, #4]	; (16a4 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    169e:	7708      	strb	r0, [r1, #28]
    16a0:	4770      	bx	lr
    16a2:	0000      	.short	0x0000
    16a4:	20000bb2 	.word	0x20000bb2

000016a8 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    16a8:	b570      	push	{r4, r5, r6, lr}
    16aa:	460c      	mov	r4, r1
    16ac:	4605      	mov	r5, r0
    16ae:	f000 f92b 	bl	1908 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    16b2:	b118      	cbz	r0, 16bc <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x14>
    16b4:	21d0      	movs	r1, #208	; 0xd0
    16b6:	2027      	movs	r0, #39	; 0x27
    16b8:	f7ff f9d4 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    16bc:	4803      	ldr	r0, [pc, #12]	; (16cc <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    16be:	2101      	movs	r1, #1
    16c0:	f00c fcfa 	bl	e0b8 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    16c4:	4802      	ldr	r0, [pc, #8]	; (16d0 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x28>)
    16c6:	e9c0 540b 	strd	r5, r4, [r0, #44]	; 0x2c
    16ca:	bd70      	pop	{r4, r5, r6, pc}
    16cc:	20000b90 	.word	0x20000b90
    16d0:	2000006c 	.word	0x2000006c

000016d4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    16d4:	4901      	ldr	r1, [pc, #4]	; (16dc <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    16d6:	2001      	movs	r0, #1
    16d8:	7148      	strb	r0, [r1, #5]
    16da:	4770      	bx	lr
    16dc:	2000006c 	.word	0x2000006c

000016e0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    16e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16e4:	4e65      	ldr	r6, [pc, #404]	; (187c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x19c>)
    16e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    16e8:	7835      	ldrb	r5, [r6, #0]
    16ea:	bbed      	cbnz	r5, 1768 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    16ec:	b3e2      	cbz	r2, 1768 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    16ee:	b3db      	cbz	r3, 1768 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    16f0:	b3d4      	cbz	r4, 1768 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    16f2:	f106 0514 	add.w	r5, r6, #20
    16f6:	e9c6 010f 	strd	r0, r1, [r6, #60]	; 0x3c
    16fa:	e885 001c 	stmia.w	r5, {r2, r3, r4}
    16fe:	2700      	movs	r7, #0
    1700:	7177      	strb	r7, [r6, #5]
    1702:	7137      	strb	r7, [r6, #4]
    1704:	70b7      	strb	r7, [r6, #2]
    1706:	7077      	strb	r7, [r6, #1]
    1708:	70f7      	strb	r7, [r6, #3]
    170a:	81b7      	strh	r7, [r6, #12]
    170c:	81f7      	strh	r7, [r6, #14]
    170e:	f000 f959 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1712:	4605      	mov	r5, r0
    1714:	f000 f950 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1718:	4604      	mov	r4, r0
    171a:	f006 fc4d 	bl	7fb8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    171e:	f006 f9ed 	bl	7afc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1722:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    1726:	f006 fccb 	bl	80c0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    172a:	69e0      	ldr	r0, [r4, #28]
    172c:	f006 fdae 	bl	828c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    1730:	6960      	ldr	r0, [r4, #20]
    1732:	f006 fda1 	bl	8278 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    1736:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
    173a:	f006 fdd7 	bl	82ec <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    173e:	f04f 0b01 	mov.w	fp, #1
    1742:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    1746:	2000      	movs	r0, #0
    1748:	f006 fb3c 	bl	7dc4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    174c:	2800      	cmp	r0, #0
    174e:	d07d      	beq.n	184c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16c>
    1750:	484b      	ldr	r0, [pc, #300]	; (1880 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a0>)
    1752:	f006 fb9b 	bl	7e8c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    1756:	8820      	ldrh	r0, [r4, #0]
    1758:	f7ff fd66 	bl	1228 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    175c:	6370      	str	r0, [r6, #52]	; 0x34
    175e:	8820      	ldrh	r0, [r4, #0]
    1760:	f7ff fd4c 	bl	11fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    1764:	63b0      	str	r0, [r6, #56]	; 0x38
    1766:	e000      	b.n	176a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x8a>
    1768:	e009      	b.n	177e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x9e>
    176a:	f894 0077 	ldrb.w	r0, [r4, #119]	; 0x77
    176e:	f88d 0000 	strb.w	r0, [sp]
    1772:	9800      	ldr	r0, [sp, #0]
    1774:	9000      	str	r0, [sp, #0]
    1776:	f89d 0000 	ldrb.w	r0, [sp]
    177a:	b9a8      	cbnz	r0, 17a8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc8>
    177c:	e002      	b.n	1784 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa4>
    177e:	f240 1145 	movw	r1, #325	; 0x145
    1782:	e077      	b.n	1874 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x194>
    1784:	6f20      	ldr	r0, [r4, #112]	; 0x70
    1786:	b178      	cbz	r0, 17a8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc8>
    1788:	f8b5 004a 	ldrh.w	r0, [r5, #74]	; 0x4a
    178c:	8aa9      	ldrh	r1, [r5, #20]
    178e:	4288      	cmp	r0, r1
    1790:	d10a      	bne.n	17a8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc8>
    1792:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    1796:	2201      	movs	r2, #1
    1798:	4408      	add	r0, r1
    179a:	f8a5 004a 	strh.w	r0, [r5, #74]	; 0x4a
    179e:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    17a2:	6f21      	ldr	r1, [r4, #112]	; 0x70
    17a4:	f009 fcd6 	bl	b154 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    17a8:	f105 0288 	add.w	r2, r5, #136	; 0x88
    17ac:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 1884 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>
    17b0:	e892 110c 	ldmia.w	r2, {r2, r3, r8, ip}
    17b4:	e889 110c 	stmia.w	r9, {r2, r3, r8, ip}
    17b8:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
    17bc:	f8c9 2019 	str.w	r2, [r9, #25]
    17c0:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
    17c4:	f8c9 101d 	str.w	r1, [r9, #29]
    17c8:	f000 f930 	bl	1a2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    17cc:	8f22      	ldrh	r2, [r4, #56]	; 0x38
    17ce:	4601      	mov	r1, r0
    17d0:	46ba      	mov	sl, r7
    17d2:	4610      	mov	r0, r2
    17d4:	f00c fa13 	bl	dbfe <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    17d8:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    17da:	4281      	cmp	r1, r0
    17dc:	d200      	bcs.n	17e0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x100>
    17de:	4608      	mov	r0, r1
    17e0:	71b0      	strb	r0, [r6, #6]
    17e2:	46b0      	mov	r8, r6
    17e4:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    17e8:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    17ea:	f895 7023 	ldrb.w	r7, [r5, #35]	; 0x23
    17ee:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
    17f0:	2908      	cmp	r1, #8
    17f2:	d100      	bne.n	17f6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x116>
    17f4:	2104      	movs	r1, #4
    17f6:	f00c fa02 	bl	dbfe <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    17fa:	b90f      	cbnz	r7, 1800 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x120>
    17fc:	1d00      	adds	r0, r0, #4
    17fe:	b280      	uxth	r0, r0
    1800:	4286      	cmp	r6, r0
    1802:	d200      	bcs.n	1806 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x126>
    1804:	4630      	mov	r0, r6
    1806:	f888 0007 	strb.w	r0, [r8, #7]
    180a:	f888 0008 	strb.w	r0, [r8, #8]
    180e:	f895 0022 	ldrb.w	r0, [r5, #34]	; 0x22
    1812:	b188      	cbz	r0, 1838 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x158>
    1814:	f889 b018 	strb.w	fp, [r9, #24]
    1818:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    181c:	e9c9 1204 	strd	r1, r2, [r9, #16]
    1820:	4656      	mov	r6, sl
    1822:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1826:	f00c f8c7 	bl	d9b8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    182a:	4603      	mov	r3, r0
    182c:	22fb      	movs	r2, #251	; 0xfb
    182e:	4915      	ldr	r1, [pc, #84]	; (1884 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>)
    1830:	4630      	mov	r0, r6
    1832:	9600      	str	r6, [sp, #0]
    1834:	f006 f8ce 	bl	79d4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1838:	2001      	movs	r0, #1
    183a:	f000 fb71 	bl	1f20 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d4>
    183e:	4812      	ldr	r0, [pc, #72]	; (1888 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
    1840:	6800      	ldr	r0, [r0, #0]
    1842:	2803      	cmp	r0, #3
    1844:	d014      	beq.n	1870 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x190>
    1846:	280b      	cmp	r0, #11
    1848:	d012      	beq.n	1870 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x190>
    184a:	e000      	b.n	184e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16e>
    184c:	e00e      	b.n	186c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>
    184e:	480d      	ldr	r0, [pc, #52]	; (1884 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>)
    1850:	220e      	movs	r2, #14
    1852:	2100      	movs	r1, #0
    1854:	304a      	adds	r0, #74	; 0x4a
    1856:	f00e ff84 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    185a:	480a      	ldr	r0, [pc, #40]	; (1884 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>)
    185c:	8aa9      	ldrh	r1, [r5, #20]
    185e:	304a      	adds	r0, #74	; 0x4a
    1860:	8041      	strh	r1, [r0, #2]
    1862:	8821      	ldrh	r1, [r4, #0]
    1864:	8001      	strh	r1, [r0, #0]
    1866:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
    186a:	7101      	strb	r1, [r0, #4]
    186c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1870:	f240 2102 	movw	r1, #514	; 0x202
    1874:	2027      	movs	r0, #39	; 0x27
    1876:	f7ff f8f5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    187a:	0000      	.short	0x0000
    187c:	2000006c 	.word	0x2000006c
    1880:	000020a8 	.word	0x000020a8
    1884:	20000b68 	.word	0x20000b68
    1888:	40001550 	.word	0x40001550

0000188c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    188c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    1890:	4688      	mov	r8, r1
    1892:	4607      	mov	r7, r0
    1894:	f000 f896 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1898:	4c1a      	ldr	r4, [pc, #104]	; (1904 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x78>)
    189a:	4605      	mov	r5, r0
    189c:	07b8      	lsls	r0, r7, #30
    189e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    18a0:	784e      	ldrb	r6, [r1, #1]
    18a2:	d516      	bpl.n	18d2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x46>
    18a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    18a6:	b330      	cbz	r0, 18f6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x6a>
    18a8:	8962      	ldrh	r2, [r4, #10]
    18aa:	1cd2      	adds	r2, r2, #3
    18ac:	f00e fedf 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    18b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    18b2:	6260      	str	r0, [r4, #36]	; 0x24
    18b4:	4669      	mov	r1, sp
    18b6:	aa01      	add	r2, sp, #4
    18b8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    18ba:	f00b fdd6 	bl	d46a <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    18be:	9800      	ldr	r0, [sp, #0]
    18c0:	f00b fd70 	bl	d3a4 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    18c4:	f8c8 0000 	str.w	r0, [r8]
    18c8:	4631      	mov	r1, r6
    18ca:	2201      	movs	r2, #1
    18cc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    18ce:	f00b fd20 	bl	d312 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    18d2:	07f8      	lsls	r0, r7, #31
    18d4:	d00d      	beq.n	18f2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    18d6:	e9d5 0120 	ldrd	r0, r1, [r5, #128]	; 0x80
    18da:	3518      	adds	r5, #24
    18dc:	1c40      	adds	r0, r0, #1
    18de:	f141 0100 	adc.w	r1, r1, #0
    18e2:	e9c5 011a 	strd	r0, r1, [r5, #104]	; 0x68
    18e6:	f815 0918 	ldrb.w	r0, [r5], #-24
    18ea:	2801      	cmp	r0, #1
    18ec:	d008      	beq.n	1900 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x74>
    18ee:	2001      	movs	r0, #1
    18f0:	7628      	strb	r0, [r5, #24]
    18f2:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    18f6:	f240 4166 	movw	r1, #1126	; 0x466
    18fa:	2027      	movs	r0, #39	; 0x27
    18fc:	f7ff f8b2 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1900:	2000      	movs	r0, #0
    1902:	e7f5      	b.n	18f0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x64>
    1904:	2000006c 	.word	0x2000006c

00001908 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    1908:	4804      	ldr	r0, [pc, #16]	; (191c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    190a:	7800      	ldrb	r0, [r0, #0]
    190c:	b108      	cbz	r0, 1912 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    190e:	200c      	movs	r0, #12
    1910:	4770      	bx	lr
    1912:	4903      	ldr	r1, [pc, #12]	; (1920 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    1914:	2000      	movs	r0, #0
    1916:	7708      	strb	r0, [r1, #28]
    1918:	4770      	bx	lr
    191a:	0000      	.short	0x0000
    191c:	2000006c 	.word	0x2000006c
    1920:	20000bb2 	.word	0x20000bb2

00001924 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    1924:	4812      	ldr	r0, [pc, #72]	; (1970 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>)
    1926:	b508      	push	{r3, lr}
    1928:	7801      	ldrb	r1, [r0, #0]
    192a:	b139      	cbz	r1, 193c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18>
    192c:	7800      	ldrb	r0, [r0, #0]
    192e:	2801      	cmp	r0, #1
    1930:	d006      	beq.n	1940 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    1932:	f240 211a 	movw	r1, #538	; 0x21a
    1936:	2027      	movs	r0, #39	; 0x27
    1938:	f7ff f894 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    193c:	f000 f9ca 	bl	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    1940:	f000 f83a 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1944:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    1948:	f88d 1000 	strb.w	r1, [sp]
    194c:	9900      	ldr	r1, [sp, #0]
    194e:	9100      	str	r1, [sp, #0]
    1950:	f89d 1000 	ldrb.w	r1, [sp]
    1954:	2900      	cmp	r1, #0
    1956:	d10a      	bne.n	196e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    1958:	6f01      	ldr	r1, [r0, #112]	; 0x70
    195a:	2900      	cmp	r1, #0
    195c:	d007      	beq.n	196e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    195e:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    1962:	2200      	movs	r2, #0
    1964:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    1968:	4611      	mov	r1, r2
    196a:	f009 bbf3 	b.w	b154 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    196e:	bd08      	pop	{r3, pc}
    1970:	2000006c 	.word	0x2000006c
    1974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1976:	2600      	movs	r6, #0
    1978:	4605      	mov	r5, r0
    197a:	704e      	strb	r6, [r1, #1]
    197c:	2022      	movs	r0, #34	; 0x22
    197e:	4f09      	ldr	r7, [pc, #36]	; (19a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x80>)
    1980:	460c      	mov	r4, r1
    1982:	7008      	strb	r0, [r1, #0]
    1984:	722e      	strb	r6, [r5, #8]
    1986:	220e      	movs	r2, #14
    1988:	4639      	mov	r1, r7
    198a:	1d20      	adds	r0, r4, #4
    198c:	f00e fe6f 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1990:	7a28      	ldrb	r0, [r5, #8]
    1992:	f88d 0000 	strb.w	r0, [sp]
    1996:	9800      	ldr	r0, [sp, #0]
    1998:	9000      	str	r0, [sp, #0]
    199a:	f89d 0000 	ldrb.w	r0, [sp]
    199e:	2800      	cmp	r0, #0
    19a0:	d1f0      	bne.n	1984 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    19a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19a4:	20000bc0 	.word	0x20000bc0
    19a8:	4a02      	ldr	r2, [pc, #8]	; (19b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x90>)
    19aa:	8993      	ldrh	r3, [r2, #12]
    19ac:	4303      	orrs	r3, r0
    19ae:	8193      	strh	r3, [r2, #12]
    19b0:	6952      	ldr	r2, [r2, #20]
    19b2:	4710      	bx	r2
    19b4:	2000006c 	.word	0x2000006c
    19b8:	4801      	ldr	r0, [pc, #4]	; (19c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x9c>)
    19ba:	6840      	ldr	r0, [r0, #4]
    19bc:	4770      	bx	lr
    19be:	0000      	.short	0x0000
    19c0:	200000a8 	.word	0x200000a8
    19c4:	4801      	ldr	r0, [pc, #4]	; (19cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa8>)
    19c6:	6840      	ldr	r0, [r0, #4]
    19c8:	3088      	adds	r0, #136	; 0x88
    19ca:	4770      	bx	lr
    19cc:	200000a8 	.word	0x200000a8
    19d0:	4a01      	ldr	r2, [pc, #4]	; (19d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>)
    19d2:	2100      	movs	r1, #0
    19d4:	6952      	ldr	r2, [r2, #20]
    19d6:	4710      	bx	r2
    19d8:	2000006c 	.word	0x2000006c
    19dc:	b570      	push	{r4, r5, r6, lr}
    19de:	4605      	mov	r5, r0
    19e0:	2901      	cmp	r1, #1
    19e2:	d81c      	bhi.n	1a1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    19e4:	4c10      	ldr	r4, [pc, #64]	; (1a28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>)
    19e6:	69a1      	ldr	r1, [r4, #24]
    19e8:	4788      	blx	r1
    19ea:	b1c0      	cbz	r0, 1a1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    19ec:	7920      	ldrb	r0, [r4, #4]
    19ee:	b9b0      	cbnz	r0, 1a1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    19f0:	2d01      	cmp	r5, #1
    19f2:	d116      	bne.n	1a22 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    19f4:	f104 0010 	add.w	r0, r4, #16
    19f8:	7800      	ldrb	r0, [r0, #0]
    19fa:	06c1      	lsls	r1, r0, #27
    19fc:	d405      	bmi.n	1a0a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
    19fe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    1a00:	7809      	ldrb	r1, [r1, #0]
    1a02:	06c9      	lsls	r1, r1, #27
    1a04:	d401      	bmi.n	1a0a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
    1a06:	2101      	movs	r1, #1
    1a08:	e000      	b.n	1a0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe8>
    1a0a:	2100      	movs	r1, #0
    1a0c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1a0e:	b91a      	cbnz	r2, 1a18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf4>
    1a10:	8962      	ldrh	r2, [r4, #10]
    1a12:	b10a      	cbz	r2, 1a18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf4>
    1a14:	06c0      	lsls	r0, r0, #27
    1a16:	d502      	bpl.n	1a1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    1a18:	89a0      	ldrh	r0, [r4, #12]
    1a1a:	4301      	orrs	r1, r0
    1a1c:	d001      	beq.n	1a22 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    1a1e:	2001      	movs	r0, #1
    1a20:	bd70      	pop	{r4, r5, r6, pc}
    1a22:	2000      	movs	r0, #0
    1a24:	bd70      	pop	{r4, r5, r6, pc}
    1a26:	0000      	.short	0x0000
    1a28:	2000006c 	.word	0x2000006c
    1a2c:	b510      	push	{r4, lr}
    1a2e:	f7ff ffc3 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1a32:	4604      	mov	r4, r0
    1a34:	f7ff ffc6 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1a38:	4601      	mov	r1, r0
    1a3a:	7f40      	ldrb	r0, [r0, #29]
    1a3c:	4a0b      	ldr	r2, [pc, #44]	; (1a6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x148>)
    1a3e:	2825      	cmp	r0, #37	; 0x25
    1a40:	d00a      	beq.n	1a58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    1a42:	2826      	cmp	r0, #38	; 0x26
    1a44:	d008      	beq.n	1a58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    1a46:	7f89      	ldrb	r1, [r1, #30]
    1a48:	2925      	cmp	r1, #37	; 0x25
    1a4a:	d005      	beq.n	1a58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    1a4c:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1a50:	2804      	cmp	r0, #4
    1a52:	d100      	bne.n	1a56 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x132>
    1a54:	2008      	movs	r0, #8
    1a56:	bd10      	pop	{r4, pc}
    1a58:	6850      	ldr	r0, [r2, #4]
    1a5a:	f890 1262 	ldrb.w	r1, [r0, #610]	; 0x262
    1a5e:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1a66:	f00b bfb5 	b.w	d9d4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x20>
    1a6a:	0000      	.short	0x0000
    1a6c:	200000a8 	.word	0x200000a8
    1a70:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1a74:	468b      	mov	fp, r1
    1a76:	4681      	mov	r9, r0
    1a78:	f7ff ffa4 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1a7c:	2700      	movs	r7, #0
    1a7e:	4c64      	ldr	r4, [pc, #400]	; (1c10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>)
    1a80:	4606      	mov	r6, r0
    1a82:	f88d 7008 	strb.w	r7, [sp, #8]
    1a86:	9703      	str	r7, [sp, #12]
    1a88:	9701      	str	r7, [sp, #4]
    1a8a:	7820      	ldrb	r0, [r4, #0]
    1a8c:	463d      	mov	r5, r7
    1a8e:	2802      	cmp	r0, #2
    1a90:	d004      	beq.n	1a9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x178>
    1a92:	f240 41ea 	movw	r1, #1258	; 0x4ea
    1a96:	2027      	movs	r0, #39	; 0x27
    1a98:	f7fe ffe4 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1a9c:	7ba0      	ldrb	r0, [r4, #14]
    1a9e:	0640      	lsls	r0, r0, #25
    1aa0:	d406      	bmi.n	1ab0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
    1aa2:	2040      	movs	r0, #64	; 0x40
    1aa4:	f7ff ff94 	bl	19d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xac>
    1aa8:	89e0      	ldrh	r0, [r4, #14]
    1aaa:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    1aae:	81e0      	strh	r0, [r4, #14]
    1ab0:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    1ab4:	f04f 0801 	mov.w	r8, #1
    1ab8:	f1b9 0f00 	cmp.w	r9, #0
    1abc:	d03a      	beq.n	1b34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x210>
    1abe:	b180      	cbz	r0, 1ae2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    1ac0:	f006 f856 	bl	7b70 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    1ac4:	f006 f830 	bl	7b28 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    1ac8:	b958      	cbnz	r0, 1ae2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    1aca:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1acc:	7841      	ldrb	r1, [r0, #1]
    1ace:	b141      	cbz	r1, 1ae2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    1ad0:	7800      	ldrb	r0, [r0, #0]
    1ad2:	7e31      	ldrb	r1, [r6, #24]
    1ad4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1ad8:	4288      	cmp	r0, r1
    1ada:	d102      	bne.n	1ae2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    1adc:	f884 8001 	strb.w	r8, [r4, #1]
    1ae0:	e092      	b.n	1c08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e4>
    1ae2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1ae4:	7841      	ldrb	r1, [r0, #1]
    1ae6:	8161      	strh	r1, [r4, #10]
    1ae8:	b121      	cbz	r1, 1af4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d0>
    1aea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    1aec:	f00b fd93 	bl	d616 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    1af0:	62a0      	str	r0, [r4, #40]	; 0x28
    1af2:	e000      	b.n	1af6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d2>
    1af4:	62a5      	str	r5, [r4, #40]	; 0x28
    1af6:	89e0      	ldrh	r0, [r4, #14]
    1af8:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    1afc:	81e0      	strh	r0, [r4, #14]
    1afe:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1b00:	7df1      	ldrb	r1, [r6, #23]
    1b02:	7800      	ldrb	r0, [r0, #0]
    1b04:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1b08:	4288      	cmp	r0, r1
    1b0a:	d007      	beq.n	1b1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1f8>
    1b0c:	a803      	add	r0, sp, #12
    1b0e:	f000 f985 	bl	1e1c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd0>
    1b12:	89e0      	ldrh	r0, [r4, #14]
    1b14:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    1b18:	81e0      	strh	r0, [r4, #14]
    1b1a:	e000      	b.n	1b1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1fa>
    1b1c:	2701      	movs	r7, #1
    1b1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1b20:	7e31      	ldrb	r1, [r6, #24]
    1b22:	7800      	ldrb	r0, [r0, #0]
    1b24:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1b28:	4288      	cmp	r0, r1
    1b2a:	d10d      	bne.n	1b48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x224>
    1b2c:	a802      	add	r0, sp, #8
    1b2e:	f000 f92b 	bl	1d88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c>
    1b32:	e009      	b.n	1b48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x224>
    1b34:	b108      	cbz	r0, 1b3a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x216>
    1b36:	f006 f815 	bl	7b64 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    1b3a:	78a0      	ldrb	r0, [r4, #2]
    1b3c:	1c40      	adds	r0, r0, #1
    1b3e:	70a0      	strb	r0, [r4, #2]
    1b40:	89e0      	ldrh	r0, [r4, #14]
    1b42:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    1b46:	81e0      	strh	r0, [r4, #14]
    1b48:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 1c10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>
    1b4c:	f896 0022 	ldrb.w	r0, [r6, #34]	; 0x22
    1b50:	f10a 0a3c 	add.w	sl, sl, #60	; 0x3c
    1b54:	b198      	cbz	r0, 1b7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x25a>
    1b56:	f7ff ff2f 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1b5a:	492e      	ldr	r1, [pc, #184]	; (1c14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f0>)
    1b5c:	f881 8018 	strb.w	r8, [r1, #24]
    1b60:	e9d6 231e 	ldrd	r2, r3, [r6, #120]	; 0x78
    1b64:	e9c1 2304 	strd	r2, r3, [r1, #16]
    1b68:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    1b6c:	f00b ff24 	bl	d9b8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    1b70:	4603      	mov	r3, r0
    1b72:	22fb      	movs	r2, #251	; 0xfb
    1b74:	4927      	ldr	r1, [pc, #156]	; (1c14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f0>)
    1b76:	4628      	mov	r0, r5
    1b78:	9500      	str	r5, [sp, #0]
    1b7a:	f005 ff2b 	bl	79d4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1b7e:	f04f 0800 	mov.w	r8, #0
    1b82:	f1bb 0f00 	cmp.w	fp, #0
    1b86:	d104      	bne.n	1b92 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26e>
    1b88:	78a1      	ldrb	r1, [r4, #2]
    1b8a:	2001      	movs	r0, #1
    1b8c:	f7ff ff26 	bl	19dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    1b90:	b120      	cbz	r0, 1b9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x278>
    1b92:	f006 fb5d 	bl	8250 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    1b96:	f04f 0801 	mov.w	r8, #1
    1b9a:	e002      	b.n	1ba2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x27e>
    1b9c:	2000      	movs	r0, #0
    1b9e:	f000 f9bf 	bl	1f20 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d4>
    1ba2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1ba6:	b118      	cbz	r0, 1bb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28c>
    1ba8:	a901      	add	r1, sp, #4
    1baa:	2002      	movs	r0, #2
    1bac:	f7ff fe6e 	bl	188c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    1bb0:	4818      	ldr	r0, [pc, #96]	; (1c14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f0>)
    1bb2:	304a      	adds	r0, #74	; 0x4a
    1bb4:	b117      	cbz	r7, 1bbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x298>
    1bb6:	8942      	ldrh	r2, [r0, #10]
    1bb8:	1c52      	adds	r2, r2, #1
    1bba:	8142      	strh	r2, [r0, #10]
    1bbc:	f1b9 0f00 	cmp.w	r9, #0
    1bc0:	d008      	beq.n	1bd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b0>
    1bc2:	88c1      	ldrh	r1, [r0, #6]
    1bc4:	1c49      	adds	r1, r1, #1
    1bc6:	80c1      	strh	r1, [r0, #6]
    1bc8:	4811      	ldr	r0, [pc, #68]	; (1c10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>)
    1bca:	70a5      	strb	r5, [r4, #2]
    1bcc:	303c      	adds	r0, #60	; 0x3c
    1bce:	f001 fa1d 	bl	300c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
    1bd2:	e002      	b.n	1bda <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    1bd4:	8901      	ldrh	r1, [r0, #8]
    1bd6:	1c49      	adds	r1, r1, #1
    1bd8:	8101      	strh	r1, [r0, #8]
    1bda:	9803      	ldr	r0, [sp, #12]
    1bdc:	b140      	cbz	r0, 1bf0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2cc>
    1bde:	f00b fbe1 	bl	d3a4 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    1be2:	f8da 1004 	ldr.w	r1, [sl, #4]
    1be6:	1c40      	adds	r0, r0, #1
    1be8:	7205      	strb	r5, [r0, #8]
    1bea:	220e      	movs	r2, #14
    1bec:	f00c fa97 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    1bf0:	9801      	ldr	r0, [sp, #4]
    1bf2:	b130      	cbz	r0, 1c02 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2de>
    1bf4:	f8da 1004 	ldr.w	r1, [sl, #4]
    1bf8:	7205      	strb	r5, [r0, #8]
    1bfa:	222a      	movs	r2, #42	; 0x2a
    1bfc:	9801      	ldr	r0, [sp, #4]
    1bfe:	f00c fa8e 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    1c02:	f1b8 0f00 	cmp.w	r8, #0
    1c06:	d001      	beq.n	1c0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e8>
    1c08:	f000 f864 	bl	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    1c0c:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1c10:	2000006c 	.word	0x2000006c
    1c14:	20000b68 	.word	0x20000b68
    1c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1c1c:	4688      	mov	r8, r1
    1c1e:	4681      	mov	r9, r0
    1c20:	f7ff fed0 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1c24:	4d29      	ldr	r5, [pc, #164]	; (1ccc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a8>)
    1c26:	4604      	mov	r4, r0
    1c28:	7828      	ldrb	r0, [r5, #0]
    1c2a:	2801      	cmp	r0, #1
    1c2c:	d004      	beq.n	1c38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>
    1c2e:	f240 4175 	movw	r1, #1141	; 0x475
    1c32:	2027      	movs	r0, #39	; 0x27
    1c34:	f7fe ff16 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1c38:	7c20      	ldrb	r0, [r4, #16]
    1c3a:	2600      	movs	r6, #0
    1c3c:	2701      	movs	r7, #1
    1c3e:	b120      	cbz	r0, 1c4a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x326>
    1c40:	7426      	strb	r6, [r4, #16]
    1c42:	2100      	movs	r1, #0
    1c44:	2004      	movs	r0, #4
    1c46:	f7ff feaf 	bl	19a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1c4a:	6a29      	ldr	r1, [r5, #32]
    1c4c:	7808      	ldrb	r0, [r1, #0]
    1c4e:	43c0      	mvns	r0, r0
    1c50:	0780      	lsls	r0, r0, #30
    1c52:	d109      	bne.n	1c68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x344>
    1c54:	7da0      	ldrb	r0, [r4, #22]
    1c56:	bb88      	cbnz	r0, 1cbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x398>
    1c58:	2002      	movs	r0, #2
    1c5a:	f7ff fea5 	bl	19a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1c5e:	6a28      	ldr	r0, [r5, #32]
    1c60:	7800      	ldrb	r0, [r0, #0]
    1c62:	43c0      	mvns	r0, r0
    1c64:	0780      	lsls	r0, r0, #30
    1c66:	d029      	beq.n	1cbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x398>
    1c68:	6a28      	ldr	r0, [r5, #32]
    1c6a:	7840      	ldrb	r0, [r0, #1]
    1c6c:	b110      	cbz	r0, 1c74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x350>
    1c6e:	2002      	movs	r0, #2
    1c70:	75a0      	strb	r0, [r4, #22]
    1c72:	e000      	b.n	1c76 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x352>
    1c74:	75a7      	strb	r7, [r4, #22]
    1c76:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
    1c7a:	b198      	cbz	r0, 1ca4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x380>
    1c7c:	f7ff fe9c 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1c80:	4913      	ldr	r1, [pc, #76]	; (1cd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ac>)
    1c82:	7a2d      	ldrb	r5, [r5, #8]
    1c84:	760e      	strb	r6, [r1, #24]
    1c86:	e9d4 2320 	ldrd	r2, r3, [r4, #128]	; 0x80
    1c8a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    1c8e:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    1c92:	f00b fe91 	bl	d9b8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    1c96:	4603      	mov	r3, r0
    1c98:	462a      	mov	r2, r5
    1c9a:	490d      	ldr	r1, [pc, #52]	; (1cd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ac>)
    1c9c:	4638      	mov	r0, r7
    1c9e:	9600      	str	r6, [sp, #0]
    1ca0:	f005 fe98 	bl	79d4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1ca4:	ea38 0009 	bics.w	r0, r8, r9
    1ca8:	d004      	beq.n	1cb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x390>
    1caa:	2100      	movs	r1, #0
    1cac:	4608      	mov	r0, r1
    1cae:	f7ff fe95 	bl	19dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    1cb2:	b128      	cbz	r0, 1cc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x39c>
    1cb4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1cb8:	f000 b80c 	b.w	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    1cbc:	2003      	movs	r0, #3
    1cbe:	e7d7      	b.n	1c70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    1cc0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1cc4:	2000      	movs	r0, #0
    1cc6:	f000 b8ef 	b.w	1ea8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15c>
    1cca:	0000      	.short	0x0000
    1ccc:	2000006c 	.word	0x2000006c
    1cd0:	20000b68 	.word	0x20000b68
    1cd4:	b510      	push	{r4, lr}
    1cd6:	f005 ffeb 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1cda:	f005 ff0f 	bl	7afc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1cde:	4c0d      	ldr	r4, [pc, #52]	; (1d14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>)
    1ce0:	89e0      	ldrh	r0, [r4, #14]
    1ce2:	f7ff fe75 	bl	19d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xac>
    1ce6:	480c      	ldr	r0, [pc, #48]	; (1d18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f4>)
    1ce8:	7f00      	ldrb	r0, [r0, #28]
    1cea:	b158      	cbz	r0, 1d04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e0>
    1cec:	490a      	ldr	r1, [pc, #40]	; (1d18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f4>)
    1cee:	220e      	movs	r2, #14
    1cf0:	f101 000e 	add.w	r0, r1, #14
    1cf4:	f00e fcbb 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1cf8:	4807      	ldr	r0, [pc, #28]	; (1d18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f4>)
    1cfa:	2224      	movs	r2, #36	; 0x24
    1cfc:	4907      	ldr	r1, [pc, #28]	; (1d1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f8>)
    1cfe:	301d      	adds	r0, #29
    1d00:	f00c fa21 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    1d04:	69e2      	ldr	r2, [r4, #28]
    1d06:	7921      	ldrb	r1, [r4, #4]
    1d08:	7860      	ldrb	r0, [r4, #1]
    1d0a:	4790      	blx	r2
    1d0c:	2000      	movs	r0, #0
    1d0e:	7020      	strb	r0, [r4, #0]
    1d10:	bd10      	pop	{r4, pc}
    1d12:	0000      	.short	0x0000
    1d14:	2000006c 	.word	0x2000006c
    1d18:	20000bb2 	.word	0x20000bb2
    1d1c:	00001975 	.word	0x00001975
    1d20:	4808      	ldr	r0, [pc, #32]	; (1d44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>)
    1d22:	b510      	push	{r4, lr}
    1d24:	7800      	ldrb	r0, [r0, #0]
    1d26:	2802      	cmp	r0, #2
    1d28:	d004      	beq.n	1d34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x410>
    1d2a:	f240 214d 	movw	r1, #589	; 0x24d
    1d2e:	2027      	movs	r0, #39	; 0x27
    1d30:	f7fe fe98 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1d34:	4904      	ldr	r1, [pc, #16]	; (1d48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x424>)
    1d36:	2001      	movs	r0, #1
    1d38:	7308      	strb	r0, [r1, #12]
    1d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1d3e:	f7ff bfc9 	b.w	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    1d42:	0000      	.short	0x0000
    1d44:	2000006c 	.word	0x2000006c
    1d48:	20000bb2 	.word	0x20000bb2
    1d4c:	b430      	push	{r4, r5}
    1d4e:	4604      	mov	r4, r0
    1d50:	480c      	ldr	r0, [pc, #48]	; (1d84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x38>)
    1d52:	7a00      	ldrb	r0, [r0, #8]
    1d54:	b10b      	cbz	r3, 1d5a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe>
    1d56:	1d00      	adds	r0, r0, #4
    1d58:	b2c0      	uxtb	r0, r0
    1d5a:	b93a      	cbnz	r2, 1d6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20>
    1d5c:	28ff      	cmp	r0, #255	; 0xff
    1d5e:	d105      	bne.n	1d6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20>
    1d60:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
    1d64:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    1d68:	429a      	cmp	r2, r3
    1d6a:	d009      	beq.n	1d80 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x34>
    1d6c:	b121      	cbz	r1, 1d78 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c>
    1d6e:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    1d72:	bc30      	pop	{r4, r5}
    1d74:	f006 ba90 	b.w	8298 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    1d78:	20ff      	movs	r0, #255	; 0xff
    1d7a:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    1d7e:	e7f8      	b.n	1d72 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26>
    1d80:	bc30      	pop	{r4, r5}
    1d82:	4770      	bx	lr
    1d84:	2000006c 	.word	0x2000006c
    1d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1d8c:	4607      	mov	r7, r0
    1d8e:	f7ff fe19 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1d92:	4c21      	ldr	r4, [pc, #132]	; (1e18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xcc>)
    1d94:	4605      	mov	r5, r0
    1d96:	2601      	movs	r6, #1
    1d98:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1d9a:	7808      	ldrb	r0, [r1, #0]
    1d9c:	f000 0003 	and.w	r0, r0, #3
    1da0:	2801      	cmp	r0, #1
    1da2:	d00c      	beq.n	1dbe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x72>
    1da4:	2802      	cmp	r0, #2
    1da6:	d00a      	beq.n	1dbe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x72>
    1da8:	2803      	cmp	r0, #3
    1daa:	d11b      	bne.n	1de4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>
    1dac:	742e      	strb	r6, [r5, #16]
    1dae:	89e0      	ldrh	r0, [r4, #14]
    1db0:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    1db4:	81e0      	strh	r0, [r4, #14]
    1db6:	2001      	movs	r0, #1
    1db8:	f7ff fdf6 	bl	19a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1dbc:	e012      	b.n	1de4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>
    1dbe:	7848      	ldrb	r0, [r1, #1]
    1dc0:	b180      	cbz	r0, 1de4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>
    1dc2:	89e1      	ldrh	r1, [r4, #14]
    1dc4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    1dc8:	81e1      	strh	r1, [r4, #14]
    1dca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1dcc:	2900      	cmp	r1, #0
    1dce:	d018      	beq.n	1e02 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb6>
    1dd0:	28fb      	cmp	r0, #251	; 0xfb
    1dd2:	d818      	bhi.n	1e06 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xba>
    1dd4:	7960      	ldrb	r0, [r4, #5]
    1dd6:	b120      	cbz	r0, 1de2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x96>
    1dd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1ddc:	2020      	movs	r0, #32
    1dde:	f7ff bdf7 	b.w	19d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xac>
    1de2:	703e      	strb	r6, [r7, #0]
    1de4:	7e28      	ldrb	r0, [r5, #24]
    1de6:	2801      	cmp	r0, #1
    1de8:	d012      	beq.n	1e10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc4>
    1dea:	762e      	strb	r6, [r5, #24]
    1dec:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1dee:	7840      	ldrb	r0, [r0, #1]
    1df0:	2800      	cmp	r0, #0
    1df2:	d006      	beq.n	1e02 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb6>
    1df4:	e9f5 0120 	ldrd	r0, r1, [r5, #128]!	; 0x80
    1df8:	1c40      	adds	r0, r0, #1
    1dfa:	f141 0100 	adc.w	r1, r1, #0
    1dfe:	e9c5 0100 	strd	r0, r1, [r5]
    1e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1e06:	7920      	ldrb	r0, [r4, #4]
    1e08:	f040 0010 	orr.w	r0, r0, #16
    1e0c:	7120      	strb	r0, [r4, #4]
    1e0e:	e7f8      	b.n	1e02 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb6>
    1e10:	2000      	movs	r0, #0
    1e12:	7628      	strb	r0, [r5, #24]
    1e14:	e7ea      	b.n	1dec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa0>
    1e16:	0000      	.short	0x0000
    1e18:	2000006c 	.word	0x2000006c
    1e1c:	b570      	push	{r4, r5, r6, lr}
    1e1e:	4605      	mov	r5, r0
    1e20:	f7ff fdd0 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1e24:	4604      	mov	r4, r0
    1e26:	7d80      	ldrb	r0, [r0, #22]
    1e28:	2800      	cmp	r0, #0
    1e2a:	d026      	beq.n	1e7a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12e>
    1e2c:	2802      	cmp	r0, #2
    1e2e:	d10c      	bne.n	1e4a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfe>
    1e30:	4817      	ldr	r0, [pc, #92]	; (1e90 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x144>)
    1e32:	4629      	mov	r1, r5
    1e34:	6b40      	ldr	r0, [r0, #52]	; 0x34
    1e36:	f00b fa44 	bl	d2c2 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    1e3a:	b1f8      	cbz	r0, 1e7c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x130>
    1e3c:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    1e40:	1c40      	adds	r0, r0, #1
    1e42:	f141 0100 	adc.w	r1, r1, #0
    1e46:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    1e4a:	2500      	movs	r5, #0
    1e4c:	75a5      	strb	r5, [r4, #22]
    1e4e:	7c60      	ldrb	r0, [r4, #17]
    1e50:	2601      	movs	r6, #1
    1e52:	b170      	cbz	r0, 1e72 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x126>
    1e54:	7465      	strb	r5, [r4, #17]
    1e56:	f7ff fb6f 	bl	1538 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    1e5a:	b190      	cbz	r0, 1e82 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x136>
    1e5c:	2100      	movs	r1, #0
    1e5e:	2008      	movs	r0, #8
    1e60:	f7ff fda2 	bl	19a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1e64:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    1e68:	1c40      	adds	r0, r0, #1
    1e6a:	f141 0100 	adc.w	r1, r1, #0
    1e6e:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    1e72:	7de0      	ldrb	r0, [r4, #23]
    1e74:	2801      	cmp	r0, #1
    1e76:	d009      	beq.n	1e8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x140>
    1e78:	75e6      	strb	r6, [r4, #23]
    1e7a:	bd70      	pop	{r4, r5, r6, pc}
    1e7c:	f240 31e3 	movw	r1, #995	; 0x3e3
    1e80:	e001      	b.n	1e86 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13a>
    1e82:	f240 31fa 	movw	r1, #1018	; 0x3fa
    1e86:	2027      	movs	r0, #39	; 0x27
    1e88:	f7fe fdec 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1e8c:	75e5      	strb	r5, [r4, #23]
    1e8e:	bd70      	pop	{r4, r5, r6, pc}
    1e90:	2000006c 	.word	0x2000006c
    1e94:	4803      	ldr	r0, [pc, #12]	; (1ea4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x158>)
    1e96:	7800      	ldrb	r0, [r0, #0]
    1e98:	2800      	cmp	r0, #0
    1e9a:	d001      	beq.n	1ea0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x154>
    1e9c:	f7ff bf1a 	b.w	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    1ea0:	4770      	bx	lr
    1ea2:	0000      	.short	0x0000
    1ea4:	2000006c 	.word	0x2000006c
    1ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1eac:	4607      	mov	r7, r0
    1eae:	f7ff fd83 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1eb2:	4680      	mov	r8, r0
    1eb4:	f7ff fd86 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1eb8:	4c17      	ldr	r4, [pc, #92]	; (1f18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1cc>)
    1eba:	4605      	mov	r5, r0
    1ebc:	463a      	mov	r2, r7
    1ebe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    1ec0:	6260      	str	r0, [r4, #36]	; 0x24
    1ec2:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    1ec6:	2101      	movs	r1, #1
    1ec8:	4640      	mov	r0, r8
    1eca:	f7ff ff3f 	bl	1d4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT>
    1ece:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
    1ed2:	2600      	movs	r6, #0
    1ed4:	b168      	cbz	r0, 1ef2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a6>
    1ed6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    1ed8:	f006 f914 	bl	8104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    1edc:	480f      	ldr	r0, [pc, #60]	; (1f1c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d0>)
    1ede:	7606      	strb	r6, [r0, #24]
    1ee0:	e9d5 1220 	ldrd	r1, r2, [r5, #128]	; 0x80
    1ee4:	e9c0 1204 	strd	r1, r2, [r0, #16]
    1ee8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    1eea:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1eec:	f005 fdc4 	bl	7a78 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    1ef0:	e004      	b.n	1efc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b0>
    1ef2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1ef4:	f006 f906 	bl	8104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    1ef8:	f005 fe00 	bl	7afc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1efc:	b917      	cbnz	r7, 1f04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b8>
    1efe:	4630      	mov	r0, r6
    1f00:	f005 ffcc 	bl	7e9c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    1f04:	2100      	movs	r1, #0
    1f06:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    1f0a:	4608      	mov	r0, r1
    1f0c:	f006 f982 	bl	8214 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    1f10:	2002      	movs	r0, #2
    1f12:	7020      	strb	r0, [r4, #0]
    1f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f18:	2000006c 	.word	0x2000006c
    1f1c:	20000b68 	.word	0x20000b68
    1f20:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    1f24:	4604      	mov	r4, r0
    1f26:	f7ff fd4d 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1f2a:	4605      	mov	r5, r0
    1f2c:	f7ff fd44 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1f30:	f04f 0800 	mov.w	r8, #0
    1f34:	f88d 8000 	strb.w	r8, [sp]
    1f38:	4606      	mov	r6, r0
    1f3a:	f8df 9164 	ldr.w	r9, [pc, #356]	; 20a0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x354>
    1f3e:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    1f42:	4622      	mov	r2, r4
    1f44:	4641      	mov	r1, r8
    1f46:	f7ff ff01 	bl	1d4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT>
    1f4a:	7da8      	ldrb	r0, [r5, #22]
    1f4c:	2701      	movs	r7, #1
    1f4e:	f1a9 0420 	sub.w	r4, r9, #32
    1f52:	b140      	cbz	r0, 1f66 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x21a>
    1f54:	2801      	cmp	r0, #1
    1f56:	d01f      	beq.n	1f98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x24c>
    1f58:	2802      	cmp	r0, #2
    1f5a:	d030      	beq.n	1fbe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x272>
    1f5c:	2803      	cmp	r0, #3
    1f5e:	d03c      	beq.n	1fda <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28e>
    1f60:	f240 21ff 	movw	r1, #767	; 0x2ff
    1f64:	e058      	b.n	2018 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2cc>
    1f66:	79a0      	ldrb	r0, [r4, #6]
    1f68:	2150      	movs	r1, #80	; 0x50
    1f6a:	f8ad 0004 	strh.w	r0, [sp, #4]
    1f6e:	5388      	strh	r0, [r1, r6]
    1f70:	4648      	mov	r0, r9
    1f72:	f7ff fb0b 	bl	158c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    1f76:	b128      	cbz	r0, 1f84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x238>
    1f78:	2080      	movs	r0, #128	; 0x80
    1f7a:	6a21      	ldr	r1, [r4, #32]
    1f7c:	f7ff fd14 	bl	19a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1f80:	746f      	strb	r7, [r5, #17]
    1f82:	e02e      	b.n	1fe2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x296>
    1f84:	466a      	mov	r2, sp
    1f86:	a901      	add	r1, sp, #4
    1f88:	6b60      	ldr	r0, [r4, #52]	; 0x34
    1f8a:	f00b fd2d 	bl	d9e8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    1f8e:	6220      	str	r0, [r4, #32]
    1f90:	b110      	cbz	r0, 1f98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x24c>
    1f92:	f895 105d 	ldrb.w	r1, [r5, #93]	; 0x5d
    1f96:	b111      	cbz	r1, 1f9e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x252>
    1f98:	4842      	ldr	r0, [pc, #264]	; (20a4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x358>)
    1f9a:	6220      	str	r0, [r4, #32]
    1f9c:	e021      	b.n	1fe2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x296>
    1f9e:	f89d 1000 	ldrb.w	r1, [sp]
    1fa2:	b931      	cbnz	r1, 1fb2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x266>
    1fa4:	f8a0 8000 	strh.w	r8, [r0]
    1fa8:	f880 8002 	strb.w	r8, [r0, #2]
    1fac:	2101      	movs	r1, #1
    1fae:	f00c f883 	bl	e0b8 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    1fb2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    1fb6:	6a20      	ldr	r0, [r4, #32]
    1fb8:	f00c f818 	bl	dfec <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>
    1fbc:	e011      	b.n	1fe2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x296>
    1fbe:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    1fc2:	f8ad 0004 	strh.w	r0, [sp, #4]
    1fc6:	466a      	mov	r2, sp
    1fc8:	a901      	add	r1, sp, #4
    1fca:	6b60      	ldr	r0, [r4, #52]	; 0x34
    1fcc:	f00b fd0c 	bl	d9e8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    1fd0:	6220      	str	r0, [r4, #32]
    1fd2:	b930      	cbnz	r0, 1fe2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x296>
    1fd4:	f240 21e9 	movw	r1, #745	; 0x2e9
    1fd8:	e01e      	b.n	2018 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2cc>
    1fda:	4648      	mov	r0, r9
    1fdc:	f7ff fad6 	bl	158c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    1fe0:	b1c0      	cbz	r0, 2014 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c8>
    1fe2:	6a20      	ldr	r0, [r4, #32]
    1fe4:	2308      	movs	r3, #8
    1fe6:	7801      	ldrb	r1, [r0, #0]
    1fe8:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    1fec:	7001      	strb	r1, [r0, #0]
    1fee:	7dea      	ldrb	r2, [r5, #23]
    1ff0:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    1ff4:	4311      	orrs	r1, r2
    1ff6:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    1ffa:	7001      	strb	r1, [r0, #0]
    1ffc:	7e2a      	ldrb	r2, [r5, #24]
    1ffe:	2304      	movs	r3, #4
    2000:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    2004:	4311      	orrs	r1, r2
    2006:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    200a:	7001      	strb	r1, [r0, #0]
    200c:	43c9      	mvns	r1, r1
    200e:	0789      	lsls	r1, r1, #30
    2010:	d005      	beq.n	201e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2d2>
    2012:	e007      	b.n	2024 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2d8>
    2014:	f240 21f2 	movw	r1, #754	; 0x2f2
    2018:	2027      	movs	r0, #39	; 0x27
    201a:	f7fe fd23 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    201e:	78c0      	ldrb	r0, [r0, #3]
    2020:	2802      	cmp	r0, #2
    2022:	d00f      	beq.n	2044 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f8>
    2024:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2026:	f00b fa63 	bl	d4f0 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    202a:	b108      	cbz	r0, 2030 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2e4>
    202c:	2101      	movs	r1, #1
    202e:	e00a      	b.n	2046 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2fa>
    2030:	6a20      	ldr	r0, [r4, #32]
    2032:	7800      	ldrb	r0, [r0, #0]
    2034:	43c0      	mvns	r0, r0
    2036:	0780      	lsls	r0, r0, #30
    2038:	d004      	beq.n	2044 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f8>
    203a:	f7ff fa65 	bl	1508 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    203e:	f080 0101 	eor.w	r1, r0, #1
    2042:	e000      	b.n	2046 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2fa>
    2044:	2100      	movs	r1, #0
    2046:	6a20      	ldr	r0, [r4, #32]
    2048:	7802      	ldrb	r2, [r0, #0]
    204a:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    204e:	7001      	strb	r1, [r0, #0]
    2050:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
    2054:	b181      	cbz	r1, 2078 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x32c>
    2056:	7841      	ldrb	r1, [r0, #1]
    2058:	b171      	cbz	r1, 2078 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x32c>
    205a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    205c:	f006 f852 	bl	8104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2060:	4810      	ldr	r0, [pc, #64]	; (20a4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x358>)
    2062:	3828      	subs	r0, #40	; 0x28
    2064:	7607      	strb	r7, [r0, #24]
    2066:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    206a:	e9c0 1204 	strd	r1, r2, [r0, #16]
    206e:	6a21      	ldr	r1, [r4, #32]
    2070:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2072:	f005 fd01 	bl	7a78 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    2076:	e003      	b.n	2080 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x334>
    2078:	f006 f844 	bl	8104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    207c:	f005 fd3e 	bl	7afc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    2080:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    2084:	2101      	movs	r1, #1
    2086:	2000      	movs	r0, #0
    2088:	f006 f8c4 	bl	8214 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    208c:	70e7      	strb	r7, [r4, #3]
    208e:	6a20      	ldr	r0, [r4, #32]
    2090:	8801      	ldrh	r1, [r0, #0]
    2092:	8221      	strh	r1, [r4, #16]
    2094:	7880      	ldrb	r0, [r0, #2]
    2096:	74a0      	strb	r0, [r4, #18]
    2098:	7027      	strb	r7, [r4, #0]
    209a:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    209e:	0000      	.short	0x0000
    20a0:	2000008c 	.word	0x2000008c
    20a4:	20000b90 	.word	0x20000b90
    20a8:	00001d21 	.word	0x00001d21
    20ac:	00001a71 	.word	0x00001a71
    20b0:	00001c19 	.word	0x00001c19
    20b4:	00001e95 	.word	0x00001e95

000020b8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    20b8:	4800      	ldr	r0, [pc, #0]	; (20bc <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    20ba:	4770      	bx	lr
    20bc:	20001625 	.word	0x20001625

000020c0 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>:
    20c0:	b570      	push	{r4, r5, r6, lr}
    20c2:	2600      	movs	r6, #0
    20c4:	4635      	mov	r5, r6
    20c6:	4c0f      	ldr	r4, [pc, #60]	; (2104 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x44>)
    20c8:	e018      	b.n	20fc <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x3c>
    20ca:	1960      	adds	r0, r4, r5
    20cc:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    20d0:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    20d4:	2a01      	cmp	r2, #1
    20d6:	d002      	beq.n	20de <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x1e>
    20d8:	f890 014b 	ldrb.w	r0, [r0, #331]	; 0x14b
    20dc:	b160      	cbz	r0, 20f8 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x38>
    20de:	480a      	ldr	r0, [pc, #40]	; (2108 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x48>)
    20e0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    20e4:	1c73      	adds	r3, r6, #1
    20e6:	5585      	strb	r5, [r0, r6]
    20e8:	f891 2153 	ldrb.w	r2, [r1, #339]	; 0x153
    20ec:	4630      	mov	r0, r6
    20ee:	b2de      	uxtb	r6, r3
    20f0:	f501 71aa 	add.w	r1, r1, #340	; 0x154
    20f4:	f006 f9b4 	bl	8460 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    20f8:	1c6d      	adds	r5, r5, #1
    20fa:	b2ed      	uxtb	r5, r5
    20fc:	78a0      	ldrb	r0, [r4, #2]
    20fe:	42a8      	cmp	r0, r5
    2100:	d8e3      	bhi.n	20ca <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0xa>
    2102:	bd70      	pop	{r4, r5, r6, pc}
    2104:	20001452 	.word	0x20001452
    2108:	20000334 	.word	0x20000334

0000210c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    210c:	4904      	ldr	r1, [pc, #16]	; (2120 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    210e:	788a      	ldrb	r2, [r1, #2]
    2110:	4282      	cmp	r2, r0
    2112:	d903      	bls.n	211c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    2114:	4408      	add	r0, r1
    2116:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    211a:	4770      	bx	lr
    211c:	2000      	movs	r0, #0
    211e:	4770      	bx	lr
    2120:	20001452 	.word	0x20001452

00002124 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    2124:	4904      	ldr	r1, [pc, #16]	; (2138 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    2126:	788a      	ldrb	r2, [r1, #2]
    2128:	4282      	cmp	r2, r0
    212a:	d903      	bls.n	2134 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    212c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    2130:	3083      	adds	r0, #131	; 0x83
    2132:	4770      	bx	lr
    2134:	2000      	movs	r0, #0
    2136:	4770      	bx	lr
    2138:	20001452 	.word	0x20001452

0000213c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    213c:	4a05      	ldr	r2, [pc, #20]	; (2154 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    213e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2142:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    2146:	6802      	ldr	r2, [r0, #0]
    2148:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    214c:	8880      	ldrh	r0, [r0, #4]
    214e:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    2152:	4770      	bx	lr
    2154:	20001452 	.word	0x20001452

00002158 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>:
    2158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    215c:	4607      	mov	r7, r0
    215e:	2400      	movs	r4, #0
    2160:	4d10      	ldr	r5, [pc, #64]	; (21a4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x4c>)
    2162:	e019      	b.n	2198 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x40>
    2164:	4620      	mov	r0, r4
    2166:	f7ff ffdd 	bl	2124 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    216a:	0003      	movs	r3, r0
    216c:	d012      	beq.n	2194 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    216e:	1928      	adds	r0, r5, r4
    2170:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    2174:	b970      	cbnz	r0, 2194 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    2176:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    217a:	eb05 0640 	add.w	r6, r5, r0, lsl #1
    217e:	f206 160b 	addw	r6, r6, #267	; 0x10b
    2182:	463a      	mov	r2, r7
    2184:	4631      	mov	r1, r6
    2186:	4618      	mov	r0, r3
    2188:	f00b fbb1 	bl	d8ee <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    218c:	4630      	mov	r0, r6
    218e:	4621      	mov	r1, r4
    2190:	f7ff ffd4 	bl	213c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    2194:	1c64      	adds	r4, r4, #1
    2196:	b2e4      	uxtb	r4, r4
    2198:	78a8      	ldrb	r0, [r5, #2]
    219a:	42a0      	cmp	r0, r4
    219c:	d8e2      	bhi.n	2164 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0xc>
    219e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    21a2:	0000      	.short	0x0000
    21a4:	20001452 	.word	0x20001452

000021a8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    21a8:	4904      	ldr	r1, [pc, #16]	; (21bc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    21aa:	788a      	ldrb	r2, [r1, #2]
    21ac:	4282      	cmp	r2, r0
    21ae:	d903      	bls.n	21b8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    21b0:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    21b4:	1cc0      	adds	r0, r0, #3
    21b6:	4770      	bx	lr
    21b8:	2000      	movs	r0, #0
    21ba:	4770      	bx	lr
    21bc:	20001452 	.word	0x20001452

000021c0 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>:
    21c0:	4908      	ldr	r1, [pc, #32]	; (21e4 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x24>)
    21c2:	788a      	ldrb	r2, [r1, #2]
    21c4:	4282      	cmp	r2, r0
    21c6:	d903      	bls.n	21d0 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x10>
    21c8:	180a      	adds	r2, r1, r0
    21ca:	f892 2143 	ldrb.w	r2, [r2, #323]	; 0x143
    21ce:	b10a      	cbz	r2, 21d4 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x14>
    21d0:	2000      	movs	r0, #0
    21d2:	4770      	bx	lr
    21d4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    21d8:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    21dc:	f200 100b 	addw	r0, r0, #267	; 0x10b
    21e0:	4770      	bx	lr
    21e2:	0000      	.short	0x0000
    21e4:	20001452 	.word	0x20001452

000021e8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    21e8:	b510      	push	{r4, lr}
    21ea:	f240 12d3 	movw	r2, #467	; 0x1d3
    21ee:	2100      	movs	r1, #0
    21f0:	4808      	ldr	r0, [pc, #32]	; (2214 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    21f2:	f00e fab6 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    21f6:	2208      	movs	r2, #8
    21f8:	21ff      	movs	r1, #255	; 0xff
    21fa:	4807      	ldr	r0, [pc, #28]	; (2218 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    21fc:	f00e fab1 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2200:	4805      	ldr	r0, [pc, #20]	; (2218 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    2202:	2100      	movs	r1, #0
    2204:	1f00      	subs	r0, r0, #4
    2206:	7001      	strb	r1, [r0, #0]
    2208:	7041      	strb	r1, [r0, #1]
    220a:	f44f 7161 	mov.w	r1, #900	; 0x384
    220e:	8041      	strh	r1, [r0, #2]
    2210:	bd10      	pop	{r4, pc}
    2212:	0000      	.short	0x0000
    2214:	20001452 	.word	0x20001452
    2218:	20000334 	.word	0x20000334

0000221c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    221c:	4b0b      	ldr	r3, [pc, #44]	; (224c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    221e:	b510      	push	{r4, lr}
    2220:	789c      	ldrb	r4, [r3, #2]
    2222:	4284      	cmp	r4, r0
    2224:	d90f      	bls.n	2246 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    2226:	4418      	add	r0, r3
    2228:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    222c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2230:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    2234:	700b      	strb	r3, [r1, #0]
    2236:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    223a:	6011      	str	r1, [r2, #0]
    223c:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    2240:	8090      	strh	r0, [r2, #4]
    2242:	2001      	movs	r0, #1
    2244:	bd10      	pop	{r4, pc}
    2246:	2000      	movs	r0, #0
    2248:	bd10      	pop	{r4, pc}
    224a:	0000      	.short	0x0000
    224c:	20001452 	.word	0x20001452

00002250 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    2250:	4907      	ldr	r1, [pc, #28]	; (2270 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    2252:	788a      	ldrb	r2, [r1, #2]
    2254:	4282      	cmp	r2, r0
    2256:	d909      	bls.n	226c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    2258:	4408      	add	r0, r1
    225a:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    225e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    2262:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    2266:	f000 0001 	and.w	r0, r0, #1
    226a:	4770      	bx	lr
    226c:	2000      	movs	r0, #0
    226e:	4770      	bx	lr
    2270:	20001452 	.word	0x20001452

00002274 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    2274:	4801      	ldr	r0, [pc, #4]	; (227c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    2276:	8840      	ldrh	r0, [r0, #2]
    2278:	4770      	bx	lr
    227a:	0000      	.short	0x0000
    227c:	20000330 	.word	0x20000330

00002280 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>:
    2280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2284:	4614      	mov	r4, r2
    2286:	2501      	movs	r5, #1
    2288:	2200      	movs	r2, #0
    228a:	461f      	mov	r7, r3
    228c:	462e      	mov	r6, r5
    228e:	7022      	strb	r2, [r4, #0]
    2290:	f000 f8f6 	bl	2480 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    2294:	2810      	cmp	r0, #16
    2296:	d024      	beq.n	22e2 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    2298:	f8df 8054 	ldr.w	r8, [pc, #84]	; 22f0 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x70>
    229c:	eb08 01c0 	add.w	r1, r8, r0, lsl #3
    22a0:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    22a4:	f001 0101 	and.w	r1, r1, #1
    22a8:	7021      	strb	r1, [r4, #0]
    22aa:	f000 f8b9 	bl	2420 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    22ae:	4604      	mov	r4, r0
    22b0:	2810      	cmp	r0, #16
    22b2:	d016      	beq.n	22e2 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    22b4:	b107      	cbz	r7, 22b8 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x38>
    22b6:	703c      	strb	r4, [r7, #0]
    22b8:	4620      	mov	r0, r4
    22ba:	f7ff ff75 	bl	21a8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    22be:	b180      	cbz	r0, 22e2 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    22c0:	f898 1002 	ldrb.w	r1, [r8, #2]
    22c4:	4640      	mov	r0, r8
    22c6:	42a1      	cmp	r1, r4
    22c8:	d903      	bls.n	22d2 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x52>
    22ca:	1901      	adds	r1, r0, r4
    22cc:	f891 614b 	ldrb.w	r6, [r1, #331]	; 0x14b
    22d0:	e000      	b.n	22d4 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x54>
    22d2:	2600      	movs	r6, #0
    22d4:	eb08 0004 	add.w	r0, r8, r4
    22d8:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    22dc:	2801      	cmp	r0, #1
    22de:	d004      	beq.n	22ea <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x6a>
    22e0:	2500      	movs	r5, #0
    22e2:	ea45 0006 	orr.w	r0, r5, r6
    22e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    22ea:	2501      	movs	r5, #1
    22ec:	e7f9      	b.n	22e2 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    22ee:	0000      	.short	0x0000
    22f0:	20001452 	.word	0x20001452

000022f4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    22f4:	b570      	push	{r4, r5, r6, lr}
    22f6:	460d      	mov	r5, r1
    22f8:	4606      	mov	r6, r0
    22fa:	f000 f8c1 	bl	2480 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    22fe:	4c10      	ldr	r4, [pc, #64]	; (2340 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    2300:	2810      	cmp	r0, #16
    2302:	d007      	beq.n	2314 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    2304:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    2308:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    230c:	07c9      	lsls	r1, r1, #31
    230e:	d001      	beq.n	2314 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    2310:	2001      	movs	r0, #1
    2312:	bd70      	pop	{r4, r5, r6, pc}
    2314:	7861      	ldrb	r1, [r4, #1]
    2316:	2908      	cmp	r1, #8
    2318:	d210      	bcs.n	233c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    231a:	2810      	cmp	r0, #16
    231c:	d008      	beq.n	2330 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    231e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2322:	2101      	movs	r1, #1
    2324:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    2328:	7860      	ldrb	r0, [r4, #1]
    232a:	1c40      	adds	r0, r0, #1
    232c:	7060      	strb	r0, [r4, #1]
    232e:	e7ef      	b.n	2310 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    2330:	2201      	movs	r2, #1
    2332:	4629      	mov	r1, r5
    2334:	4630      	mov	r0, r6
    2336:	f000 f887 	bl	2448 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    233a:	e7f5      	b.n	2328 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    233c:	2000      	movs	r0, #0
    233e:	bd70      	pop	{r4, r5, r6, pc}
    2340:	20001452 	.word	0x20001452

00002344 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    2344:	b570      	push	{r4, r5, r6, lr}
    2346:	4d0b      	ldr	r5, [pc, #44]	; (2374 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    2348:	7828      	ldrb	r0, [r5, #0]
    234a:	1e40      	subs	r0, r0, #1
    234c:	b244      	sxtb	r4, r0
    234e:	e00a      	b.n	2366 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    2350:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    2354:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    2358:	07c0      	lsls	r0, r0, #31
    235a:	d002      	beq.n	2362 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    235c:	b2e0      	uxtb	r0, r4
    235e:	f000 f8ed 	bl	253c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    2362:	1e64      	subs	r4, r4, #1
    2364:	b264      	sxtb	r4, r4
    2366:	2c00      	cmp	r4, #0
    2368:	daf2      	bge.n	2350 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    236a:	4903      	ldr	r1, [pc, #12]	; (2378 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    236c:	2000      	movs	r0, #0
    236e:	7048      	strb	r0, [r1, #1]
    2370:	bd70      	pop	{r4, r5, r6, pc}
    2372:	0000      	.short	0x0000
    2374:	20001452 	.word	0x20001452
    2378:	20000330 	.word	0x20000330

0000237c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    237c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2380:	2400      	movs	r4, #0
    2382:	4625      	mov	r5, r4
    2384:	4e18      	ldr	r6, [pc, #96]	; (23e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    2386:	e029      	b.n	23dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    2388:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    238c:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    2390:	07c0      	lsls	r0, r0, #31
    2392:	d021      	beq.n	23d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    2394:	4628      	mov	r0, r5
    2396:	f000 f843 	bl	2420 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    239a:	4603      	mov	r3, r0
    239c:	f7ff ff04 	bl	21a8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    23a0:	4601      	mov	r1, r0
    23a2:	2000      	movs	r0, #0
    23a4:	2b10      	cmp	r3, #16
    23a6:	d009      	beq.n	23bc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    23a8:	18f2      	adds	r2, r6, r3
    23aa:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    23ae:	f1bc 0f01 	cmp.w	ip, #1
    23b2:	d002      	beq.n	23ba <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    23b4:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    23b8:	b102      	cbz	r2, 23bc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    23ba:	2001      	movs	r0, #1
    23bc:	1e40      	subs	r0, r0, #1
    23be:	4201      	tst	r1, r0
    23c0:	d10a      	bne.n	23d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    23c2:	480a      	ldr	r0, [pc, #40]	; (23ec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    23c4:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    23c8:	5503      	strb	r3, [r0, r4]
    23ca:	4620      	mov	r0, r4
    23cc:	1c64      	adds	r4, r4, #1
    23ce:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    23d2:	b2e4      	uxtb	r4, r4
    23d4:	f006 f844 	bl	8460 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    23d8:	1c6d      	adds	r5, r5, #1
    23da:	b2ed      	uxtb	r5, r5
    23dc:	7830      	ldrb	r0, [r6, #0]
    23de:	42a8      	cmp	r0, r5
    23e0:	d8d2      	bhi.n	2388 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    23e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    23e6:	0000      	.short	0x0000
    23e8:	20001452 	.word	0x20001452
    23ec:	20000334 	.word	0x20000334
    23f0:	4602      	mov	r2, r0
    23f2:	4809      	ldr	r0, [pc, #36]	; (2418 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    23f4:	b510      	push	{r4, lr}
    23f6:	7800      	ldrb	r0, [r0, #0]
    23f8:	460b      	mov	r3, r1
    23fa:	b158      	cbz	r0, 2414 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    23fc:	4807      	ldr	r0, [pc, #28]	; (241c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    23fe:	7881      	ldrb	r1, [r0, #2]
    2400:	b141      	cbz	r1, 2414 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    2402:	b10b      	cbz	r3, 2408 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    2404:	1cc0      	adds	r0, r0, #3
    2406:	e001      	b.n	240c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    2408:	4804      	ldr	r0, [pc, #16]	; (241c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    240a:	3083      	adds	r0, #131	; 0x83
    240c:	f005 fa3c 	bl	7888 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    2410:	2001      	movs	r0, #1
    2412:	bd10      	pop	{r4, pc}
    2414:	2000      	movs	r0, #0
    2416:	bd10      	pop	{r4, pc}
    2418:	20000330 	.word	0x20000330
    241c:	20001452 	.word	0x20001452
    2420:	4908      	ldr	r1, [pc, #32]	; (2444 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    2422:	b510      	push	{r4, lr}
    2424:	4603      	mov	r3, r0
    2426:	2000      	movs	r0, #0
    2428:	788a      	ldrb	r2, [r1, #2]
    242a:	e006      	b.n	243a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    242c:	180c      	adds	r4, r1, r0
    242e:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    2432:	429c      	cmp	r4, r3
    2434:	d004      	beq.n	2440 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    2436:	1c40      	adds	r0, r0, #1
    2438:	b2c0      	uxtb	r0, r0
    243a:	4282      	cmp	r2, r0
    243c:	d8f6      	bhi.n	242c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    243e:	2010      	movs	r0, #16
    2440:	bd10      	pop	{r4, pc}
    2442:	0000      	.short	0x0000
    2444:	20001452 	.word	0x20001452
    2448:	b570      	push	{r4, r5, r6, lr}
    244a:	4b0c      	ldr	r3, [pc, #48]	; (247c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    244c:	4604      	mov	r4, r0
    244e:	7818      	ldrb	r0, [r3, #0]
    2450:	1c45      	adds	r5, r0, #1
    2452:	701d      	strb	r5, [r3, #0]
    2454:	2810      	cmp	r0, #16
    2456:	d303      	bcc.n	2460 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    2458:	2146      	movs	r1, #70	; 0x46
    245a:	2028      	movs	r0, #40	; 0x28
    245c:	f7fe fb02 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2460:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    2464:	680d      	ldr	r5, [r1, #0]
    2466:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    246a:	8889      	ldrh	r1, [r1, #4]
    246c:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    2470:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    2474:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    2478:	bd70      	pop	{r4, r5, r6, pc}
    247a:	0000      	.short	0x0000
    247c:	20001452 	.word	0x20001452
    2480:	b5f0      	push	{r4, r5, r6, r7, lr}
    2482:	4c1a      	ldr	r4, [pc, #104]	; (24ec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x170>)
    2484:	4603      	mov	r3, r0
    2486:	2000      	movs	r0, #0
    2488:	7825      	ldrb	r5, [r4, #0]
    248a:	e02a      	b.n	24e2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x166>
    248c:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    2490:	780f      	ldrb	r7, [r1, #0]
    2492:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    2496:	f892 6153 	ldrb.w	r6, [r2, #339]	; 0x153
    249a:	ea87 070c 	eor.w	r7, r7, ip
    249e:	405e      	eors	r6, r3
    24a0:	443e      	add	r6, r7
    24a2:	784f      	ldrb	r7, [r1, #1]
    24a4:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    24a8:	ea87 070c 	eor.w	r7, r7, ip
    24ac:	443e      	add	r6, r7
    24ae:	788f      	ldrb	r7, [r1, #2]
    24b0:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    24b4:	ea87 070c 	eor.w	r7, r7, ip
    24b8:	443e      	add	r6, r7
    24ba:	78cf      	ldrb	r7, [r1, #3]
    24bc:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    24c0:	ea87 070c 	eor.w	r7, r7, ip
    24c4:	443e      	add	r6, r7
    24c6:	790f      	ldrb	r7, [r1, #4]
    24c8:	f892 c158 	ldrb.w	ip, [r2, #344]	; 0x158
    24cc:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
    24d0:	ea87 070c 	eor.w	r7, r7, ip
    24d4:	443e      	add	r6, r7
    24d6:	794f      	ldrb	r7, [r1, #5]
    24d8:	4057      	eors	r7, r2
    24da:	42f7      	cmn	r7, r6
    24dc:	d004      	beq.n	24e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16c>
    24de:	1c40      	adds	r0, r0, #1
    24e0:	b2c0      	uxtb	r0, r0
    24e2:	4285      	cmp	r5, r0
    24e4:	d8d2      	bhi.n	248c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x110>
    24e6:	2010      	movs	r0, #16
    24e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24ea:	0000      	.short	0x0000
    24ec:	20001452 	.word	0x20001452
    24f0:	b570      	push	{r4, r5, r6, lr}
    24f2:	4605      	mov	r5, r0
    24f4:	f7ff ff94 	bl	2420 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    24f8:	2810      	cmp	r0, #16
    24fa:	d11c      	bne.n	2536 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    24fc:	4c0e      	ldr	r4, [pc, #56]	; (2538 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1bc>)
    24fe:	7820      	ldrb	r0, [r4, #0]
    2500:	1e40      	subs	r0, r0, #1
    2502:	b2c0      	uxtb	r0, r0
    2504:	7020      	strb	r0, [r4, #0]
    2506:	42a8      	cmp	r0, r5
    2508:	d015      	beq.n	2536 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    250a:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    250e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    2512:	f502 7080 	add.w	r0, r2, #256	; 0x100
    2516:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    251a:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    251e:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    2522:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    2526:	7820      	ldrb	r0, [r4, #0]
    2528:	f7ff ff7a 	bl	2420 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    252c:	2810      	cmp	r0, #16
    252e:	d002      	beq.n	2536 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    2530:	4420      	add	r0, r4
    2532:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    2536:	bd70      	pop	{r4, r5, r6, pc}
    2538:	20001452 	.word	0x20001452
    253c:	4905      	ldr	r1, [pc, #20]	; (2554 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1d8>)
    253e:	784a      	ldrb	r2, [r1, #1]
    2540:	1e52      	subs	r2, r2, #1
    2542:	704a      	strb	r2, [r1, #1]
    2544:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    2548:	2200      	movs	r2, #0
    254a:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    254e:	f7ff bfcf 	b.w	24f0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x174>
    2552:	0000      	.short	0x0000
    2554:	20001452 	.word	0x20001452

00002558 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>:
    2558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    255c:	4604      	mov	r4, r0
    255e:	f100 0788 	add.w	r7, r0, #136	; 0x88
    2562:	b171      	cbz	r1, 2582 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x2a>
    2564:	f104 06ae 	add.w	r6, r4, #174	; 0xae
    2568:	1e75      	subs	r5, r6, #1
    256a:	2901      	cmp	r1, #1
    256c:	d016      	beq.n	259c <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x44>
    256e:	2902      	cmp	r1, #2
    2570:	d025      	beq.n	25be <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x66>
    2572:	2903      	cmp	r1, #3
    2574:	d110      	bne.n	2598 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x40>
    2576:	4631      	mov	r1, r6
    2578:	4628      	mov	r0, r5
    257a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    257e:	f00b bc8e 	b.w	de9e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    2582:	f44f 722a 	mov.w	r2, #680	; 0x2a8
    2586:	2100      	movs	r1, #0
    2588:	f00e f8eb 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    258c:	4638      	mov	r0, r7
    258e:	f000 f84d 	bl	262c <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xd4>
    2592:	2020      	movs	r0, #32
    2594:	f884 0249 	strb.w	r0, [r4, #585]	; 0x249
    2598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    259c:	6921      	ldr	r1, [r4, #16]
    259e:	480d      	ldr	r0, [pc, #52]	; (25d4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x7c>)
    25a0:	460a      	mov	r2, r1
    25a2:	4408      	add	r0, r1
    25a4:	fbb0 f0f1 	udiv	r0, r0, r1
    25a8:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    25ac:	f640 30b8 	movw	r0, #3000	; 0xbb8
    25b0:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
    25b4:	8b63      	ldrh	r3, [r4, #26]
    25b6:	4638      	mov	r0, r7
    25b8:	f000 f80e 	bl	25d8 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    25bc:	e7db      	b.n	2576 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x1e>
    25be:	6901      	ldr	r1, [r0, #16]
    25c0:	f8b4 3276 	ldrh.w	r3, [r4, #630]	; 0x276
    25c4:	f8d4 2270 	ldr.w	r2, [r4, #624]	; 0x270
    25c8:	4638      	mov	r0, r7
    25ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    25ce:	f000 b803 	b.w	25d8 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    25d2:	0000      	.short	0x0000
    25d4:	01c9c37f 	.word	0x01c9c37f
    25d8:	b510      	push	{r4, lr}
    25da:	2400      	movs	r4, #0
    25dc:	f8a0 404e 	strh.w	r4, [r0, #78]	; 0x4e
    25e0:	f830 4f52 	ldrh.w	r4, [r0, #82]!
    25e4:	434c      	muls	r4, r1
    25e6:	fbb4 f4f2 	udiv	r4, r4, r2
    25ea:	f820 4912 	strh.w	r4, [r0], #-18
    25ee:	f240 2471 	movw	r4, #625	; 0x271
    25f2:	4363      	muls	r3, r4
    25f4:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    25f8:	1e5b      	subs	r3, r3, #1
    25fa:	fbb3 f3f2 	udiv	r3, r3, r2
    25fe:	8203      	strh	r3, [r0, #16]
    2600:	4b09      	ldr	r3, [pc, #36]	; (2628 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xd0>)
    2602:	fbb3 f3f2 	udiv	r3, r3, r2
    2606:	1c5b      	adds	r3, r3, #1
    2608:	82c3      	strh	r3, [r0, #22]
    260a:	8903      	ldrh	r3, [r0, #8]
    260c:	4363      	muls	r3, r4
    260e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    2612:	1e5b      	subs	r3, r3, #1
    2614:	fbb3 f3f2 	udiv	r3, r3, r2
    2618:	6043      	str	r3, [r0, #4]
    261a:	6803      	ldr	r3, [r0, #0]
    261c:	434b      	muls	r3, r1
    261e:	fbb3 f1f2 	udiv	r1, r3, r2
    2622:	6001      	str	r1, [r0, #0]
    2624:	bd10      	pop	{r4, pc}
    2626:	0000      	.short	0x0000
    2628:	02625a00 	.word	0x02625a00
    262c:	2101      	movs	r1, #1
    262e:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    2632:	490b      	ldr	r1, [pc, #44]	; (2660 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x108>)
    2634:	f8c0 106e 	str.w	r1, [r0, #110]	; 0x6e
    2638:	2107      	movs	r1, #7
    263a:	f8c0 1072 	str.w	r1, [r0, #114]	; 0x72
    263e:	f100 016e 	add.w	r1, r0, #110	; 0x6e
    2642:	780a      	ldrb	r2, [r1, #0]
    2644:	f022 0204 	bic.w	r2, r2, #4
    2648:	700a      	strb	r2, [r1, #0]
    264a:	21fe      	movs	r1, #254	; 0xfe
    264c:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    2650:	217f      	movs	r1, #127	; 0x7f
    2652:	7641      	strb	r1, [r0, #25]
    2654:	4903      	ldr	r1, [pc, #12]	; (2664 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x10c>)
    2656:	6081      	str	r1, [r0, #8]
    2658:	2100      	movs	r1, #0
    265a:	e9c0 1100 	strd	r1, r1, [r0]
    265e:	4770      	bx	lr
    2660:	3404492f 	.word	0x3404492f
    2664:	fffce000 	.word	0xfffce000

00002668 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>:
    2668:	4902      	ldr	r1, [pc, #8]	; (2674 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ+0xc>)
    266a:	f991 1000 	ldrsb.w	r1, [r1]
    266e:	f00b bbc7 	b.w	de00 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x28>
    2672:	0000      	.short	0x0000
    2674:	20000350 	.word	0x20000350

00002678 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>:
    2678:	b508      	push	{r3, lr}
    267a:	207f      	movs	r0, #127	; 0x7f
    267c:	f88d 0000 	strb.w	r0, [sp]
    2680:	4668      	mov	r0, sp
    2682:	f005 fded 	bl	8260 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    2686:	b140      	cbz	r0, 269a <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x22>
    2688:	4805      	ldr	r0, [pc, #20]	; (26a0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x28>)
    268a:	7840      	ldrb	r0, [r0, #1]
    268c:	4240      	negs	r0, r0
    268e:	b241      	sxtb	r1, r0
    2690:	f99d 0000 	ldrsb.w	r0, [sp]
    2694:	f00b fbb4 	bl	de00 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x28>
    2698:	bd08      	pop	{r3, pc}
    269a:	f99d 0000 	ldrsb.w	r0, [sp]
    269e:	bd08      	pop	{r3, pc}
    26a0:	20000350 	.word	0x20000350

000026a4 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>:
    26a4:	4909      	ldr	r1, [pc, #36]	; (26cc <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    26a6:	b508      	push	{r3, lr}
    26a8:	7809      	ldrb	r1, [r1, #0]
    26aa:	f88d 1000 	strb.w	r1, [sp]
    26ae:	9900      	ldr	r1, [sp, #0]
    26b0:	9100      	str	r1, [sp, #0]
    26b2:	f89d 1000 	ldrb.w	r1, [sp]
    26b6:	b109      	cbz	r1, 26bc <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x18>
    26b8:	2000      	movs	r0, #0
    26ba:	bd08      	pop	{r3, pc}
    26bc:	4903      	ldr	r1, [pc, #12]	; (26cc <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    26be:	f8d1 2001 	ldr.w	r2, [r1, #1]
    26c2:	6002      	str	r2, [r0, #0]
    26c4:	7949      	ldrb	r1, [r1, #5]
    26c6:	7101      	strb	r1, [r0, #4]
    26c8:	2001      	movs	r0, #1
    26ca:	bd08      	pop	{r3, pc}
    26cc:	20000352 	.word	0x20000352

000026d0 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>:
    26d0:	4905      	ldr	r1, [pc, #20]	; (26e8 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x18>)
    26d2:	22ff      	movs	r2, #255	; 0xff
    26d4:	700a      	strb	r2, [r1, #0]
    26d6:	460a      	mov	r2, r1
    26d8:	6803      	ldr	r3, [r0, #0]
    26da:	f8c2 3001 	str.w	r3, [r2, #1]
    26de:	7900      	ldrb	r0, [r0, #4]
    26e0:	7150      	strb	r0, [r2, #5]
    26e2:	2000      	movs	r0, #0
    26e4:	7008      	strb	r0, [r1, #0]
    26e6:	4770      	bx	lr
    26e8:	20000352 	.word	0x20000352
    26ec:	b570      	push	{r4, r5, r6, lr}
    26ee:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
    26f2:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    26f6:	2401      	movs	r4, #1
    26f8:	fb03 2101 	mla	r1, r3, r1, r2
    26fc:	2225      	movs	r2, #37	; 0x25
    26fe:	fbb1 f3f2 	udiv	r3, r1, r2
    2702:	fb02 1113 	mls	r1, r2, r3, r1
    2706:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    270a:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
    270e:	f001 0307 	and.w	r3, r1, #7
    2712:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
    2716:	fa04 f303 	lsl.w	r3, r4, r3
    271a:	421a      	tst	r2, r3
    271c:	d004      	beq.n	2728 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x58>
    271e:	bf00      	nop
    2720:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33
    2724:	2000      	movs	r0, #0
    2726:	bd70      	pop	{r4, r5, r6, pc}
    2728:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    272c:	fbb1 f3f2 	udiv	r3, r1, r2
    2730:	fb02 1113 	mls	r1, r2, r3, r1
    2734:	1c49      	adds	r1, r1, #1
    2736:	b2c9      	uxtb	r1, r1
    2738:	2300      	movs	r3, #0
    273a:	18c5      	adds	r5, r0, r3
    273c:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
    2740:	428a      	cmp	r2, r1
    2742:	d312      	bcc.n	276a <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x9a>
    2744:	f895 5026 	ldrb.w	r5, [r5, #38]	; 0x26
    2748:	2200      	movs	r2, #0
    274a:	bf00      	nop
    274c:	fa04 f602 	lsl.w	r6, r4, r2
    2750:	4235      	tst	r5, r6
    2752:	d001      	beq.n	2758 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x88>
    2754:	1e49      	subs	r1, r1, #1
    2756:	b2c9      	uxtb	r1, r1
    2758:	b121      	cbz	r1, 2764 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x94>
    275a:	1c52      	adds	r2, r2, #1
    275c:	b2d2      	uxtb	r2, r2
    275e:	2a08      	cmp	r2, #8
    2760:	d3f4      	bcc.n	274c <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x7c>
    2762:	e004      	b.n	276e <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x9e>
    2764:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    2768:	e7da      	b.n	2720 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x50>
    276a:	1a89      	subs	r1, r1, r2
    276c:	b2c9      	uxtb	r1, r1
    276e:	1c5b      	adds	r3, r3, #1
    2770:	b2db      	uxtb	r3, r3
    2772:	2b05      	cmp	r3, #5
    2774:	d3e1      	bcc.n	273a <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x6a>
    2776:	201f      	movs	r0, #31
    2778:	bd70      	pop	{r4, r5, r6, pc}
    277a:	0000      	movs	r0, r0
    277c:	b570      	push	{r4, r5, r6, lr}
    277e:	1c49      	adds	r1, r1, #1
    2780:	2300      	movs	r3, #0
    2782:	b2c9      	uxtb	r1, r1
    2784:	2401      	movs	r4, #1
    2786:	18c5      	adds	r5, r0, r3
    2788:	79aa      	ldrb	r2, [r5, #6]
    278a:	428a      	cmp	r2, r1
    278c:	d312      	bcc.n	27b4 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xe4>
    278e:	f895 5001 	ldrb.w	r5, [r5, #1]
    2792:	2200      	movs	r2, #0
    2794:	fa04 f602 	lsl.w	r6, r4, r2
    2798:	4235      	tst	r5, r6
    279a:	d001      	beq.n	27a0 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xd0>
    279c:	1e49      	subs	r1, r1, #1
    279e:	b2c9      	uxtb	r1, r1
    27a0:	b121      	cbz	r1, 27ac <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xdc>
    27a2:	1c52      	adds	r2, r2, #1
    27a4:	b2d2      	uxtb	r2, r2
    27a6:	2a08      	cmp	r2, #8
    27a8:	d3f4      	bcc.n	2794 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xc4>
    27aa:	e005      	b.n	27b8 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xe8>
    27ac:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    27b0:	b2c0      	uxtb	r0, r0
    27b2:	bd70      	pop	{r4, r5, r6, pc}
    27b4:	1a89      	subs	r1, r1, r2
    27b6:	b2c9      	uxtb	r1, r1
    27b8:	1c5b      	adds	r3, r3, #1
    27ba:	b2db      	uxtb	r3, r3
    27bc:	2b05      	cmp	r3, #5
    27be:	d3e2      	bcc.n	2786 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xb6>
    27c0:	219d      	movs	r1, #157	; 0x9d
    27c2:	2046      	movs	r0, #70	; 0x46
    27c4:	f7fe f94e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000027c8 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>:
    27c8:	7841      	ldrb	r1, [r0, #1]
    27ca:	b141      	cbz	r1, 27de <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    27cc:	78c0      	ldrb	r0, [r0, #3]
    27ce:	282b      	cmp	r0, #43	; 0x2b
    27d0:	d203      	bcs.n	27da <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x12>
    27d2:	4a04      	ldr	r2, [pc, #16]	; (27e4 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x1c>)
    27d4:	5c10      	ldrb	r0, [r2, r0]
    27d6:	4288      	cmp	r0, r1
    27d8:	d101      	bne.n	27de <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    27da:	2001      	movs	r0, #1
    27dc:	4770      	bx	lr
    27de:	2000      	movs	r0, #0
    27e0:	4770      	bx	lr
    27e2:	0000      	.short	0x0000
    27e4:	000108ac 	.word	0x000108ac

000027e8 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>:
    27e8:	b510      	push	{r4, lr}
    27ea:	2201      	movs	r2, #1
    27ec:	70c1      	strb	r1, [r0, #3]
    27ee:	292b      	cmp	r1, #43	; 0x2b
    27f0:	d202      	bcs.n	27f8 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x10>
    27f2:	4a06      	ldr	r2, [pc, #24]	; (280c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x24>)
    27f4:	5c52      	ldrb	r2, [r2, r1]
    27f6:	e006      	b.n	2806 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    27f8:	29ff      	cmp	r1, #255	; 0xff
    27fa:	d004      	beq.n	2806 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    27fc:	f240 4175 	movw	r1, #1141	; 0x475
    2800:	202a      	movs	r0, #42	; 0x2a
    2802:	f7fe f92f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2806:	7042      	strb	r2, [r0, #1]
    2808:	bd10      	pop	{r4, pc}
    280a:	0000      	.short	0x0000
    280c:	000108ac 	.word	0x000108ac

00002810 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    2810:	4904      	ldr	r1, [pc, #16]	; (2824 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    2812:	7c89      	ldrb	r1, [r1, #18]
    2814:	0749      	lsls	r1, r1, #29
    2816:	d400      	bmi.n	281a <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    2818:	b108      	cbz	r0, 281e <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    281a:	2000      	movs	r0, #0
    281c:	4770      	bx	lr
    281e:	2001      	movs	r0, #1
    2820:	4770      	bx	lr
    2822:	0000      	.short	0x0000
    2824:	20000f24 	.word	0x20000f24

00002828 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    2828:	4803      	ldr	r0, [pc, #12]	; (2838 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    282a:	7c80      	ldrb	r0, [r0, #18]
    282c:	0780      	lsls	r0, r0, #30
    282e:	d401      	bmi.n	2834 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    2830:	2001      	movs	r0, #1
    2832:	4770      	bx	lr
    2834:	2000      	movs	r0, #0
    2836:	4770      	bx	lr
    2838:	20000f24 	.word	0x20000f24

0000283c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    283c:	4803      	ldr	r0, [pc, #12]	; (284c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    283e:	7c80      	ldrb	r0, [r0, #18]
    2840:	07c0      	lsls	r0, r0, #31
    2842:	d001      	beq.n	2848 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    2844:	2000      	movs	r0, #0
    2846:	4770      	bx	lr
    2848:	2001      	movs	r0, #1
    284a:	4770      	bx	lr
    284c:	20000f24 	.word	0x20000f24
    2850:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    2854:	4688      	mov	r8, r1
    2856:	4699      	mov	r9, r3
    2858:	4615      	mov	r5, r2
    285a:	4604      	mov	r4, r0
    285c:	a901      	add	r1, sp, #4
    285e:	f00b f924 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    2862:	bbb0      	cbnz	r0, 28d2 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x96>
    2864:	9e02      	ldr	r6, [sp, #8]
    2866:	2001      	movs	r0, #1
    2868:	3688      	adds	r6, #136	; 0x88
    286a:	b17d      	cbz	r5, 288c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x50>
    286c:	4620      	mov	r0, r4
    286e:	f7fe fcdb 	bl	1228 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    2872:	0004      	movs	r4, r0
    2874:	d00d      	beq.n	2892 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x56>
    2876:	4629      	mov	r1, r5
    2878:	f00a fe0c 	bl	d494 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    287c:	b118      	cbz	r0, 2886 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4a>
    287e:	4918      	ldr	r1, [pc, #96]	; (28e0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa4>)
    2880:	8849      	ldrh	r1, [r1, #2]
    2882:	42a9      	cmp	r1, r5
    2884:	d207      	bcs.n	2896 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x5a>
    2886:	2000      	movs	r0, #0
    2888:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    288c:	f886 0024 	strb.w	r0, [r6, #36]	; 0x24
    2890:	e01f      	b.n	28d2 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x96>
    2892:	2167      	movs	r1, #103	; 0x67
    2894:	e020      	b.n	28d8 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x9c>
    2896:	4601      	mov	r1, r0
    2898:	466a      	mov	r2, sp
    289a:	4620      	mov	r0, r4
    289c:	f00a fdf3 	bl	d486 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    28a0:	9800      	ldr	r0, [sp, #0]
    28a2:	2700      	movs	r7, #0
    28a4:	8007      	strh	r7, [r0, #0]
    28a6:	7087      	strb	r7, [r0, #2]
    28a8:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
    28ac:	b109      	cbz	r1, 28b2 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x76>
    28ae:	f04f 0802 	mov.w	r8, #2
    28b2:	4641      	mov	r1, r8
    28b4:	f00b fc00 	bl	e0b8 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    28b8:	9800      	ldr	r0, [sp, #0]
    28ba:	462a      	mov	r2, r5
    28bc:	4649      	mov	r1, r9
    28be:	1cc0      	adds	r0, r0, #3
    28c0:	f00d fed5 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    28c4:	4620      	mov	r0, r4
    28c6:	4629      	mov	r1, r5
    28c8:	f00a fd9b 	bl	d402 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    28cc:	b118      	cbz	r0, 28d6 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x9a>
    28ce:	f886 7024 	strb.w	r7, [r6, #36]	; 0x24
    28d2:	2001      	movs	r0, #1
    28d4:	e7d8      	b.n	2888 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4c>
    28d6:	217c      	movs	r1, #124	; 0x7c
    28d8:	202b      	movs	r0, #43	; 0x2b
    28da:	f7fe f8c3 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    28de:	0000      	.short	0x0000
    28e0:	20000f24 	.word	0x20000f24

000028e4 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    28e4:	4809      	ldr	r0, [pc, #36]	; (290c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    28e6:	b082      	sub	sp, #8
    28e8:	7a00      	ldrb	r0, [r0, #8]
    28ea:	f88d 0000 	strb.w	r0, [sp]
    28ee:	9800      	ldr	r0, [sp, #0]
    28f0:	9000      	str	r0, [sp, #0]
    28f2:	f89d 0000 	ldrb.w	r0, [sp]
    28f6:	2800      	cmp	r0, #0
    28f8:	d105      	bne.n	2906 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x22>
    28fa:	2202      	movs	r2, #2
    28fc:	4904      	ldr	r1, [pc, #16]	; (2910 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x2c>)
    28fe:	4803      	ldr	r0, [pc, #12]	; (290c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    2900:	b002      	add	sp, #8
    2902:	f00b bc0c 	b.w	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2906:	b002      	add	sp, #8
    2908:	4770      	bx	lr
    290a:	0000      	.short	0x0000
    290c:	20000f3c 	.word	0x20000f3c
    2910:	0000e165 	.word	0x0000e165

00002914 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    2914:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2918:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 2ad8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c4>
    291c:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 2adc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c8>
    2920:	4683      	mov	fp, r0
    2922:	f04f 0901 	mov.w	r9, #1
    2926:	2600      	movs	r6, #0
    2928:	f8d8 0004 	ldr.w	r0, [r8, #4]
    292c:	7a00      	ldrb	r0, [r0, #8]
    292e:	f88d 0000 	strb.w	r0, [sp]
    2932:	9800      	ldr	r0, [sp, #0]
    2934:	9000      	str	r0, [sp, #0]
    2936:	f89d 1000 	ldrb.w	r1, [sp]
    293a:	292a      	cmp	r1, #42	; 0x2a
    293c:	d106      	bne.n	294c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    293e:	f89a 1013 	ldrb.w	r1, [sl, #19]
    2942:	b119      	cbz	r1, 294c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    2944:	f8ba 0014 	ldrh.w	r0, [sl, #20]
    2948:	2800      	cmp	r0, #0
    294a:	d06f      	beq.n	2a2c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    294c:	2700      	movs	r7, #0
    294e:	f88d 6000 	strb.w	r6, [sp]
    2952:	4668      	mov	r0, sp
    2954:	f000 f924 	bl	2ba0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xb0>
    2958:	f89d 1000 	ldrb.w	r1, [sp]
    295c:	2900      	cmp	r1, #0
    295e:	d1f8      	bne.n	2952 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    2960:	2800      	cmp	r0, #0
    2962:	d063      	beq.n	2a2c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    2964:	4604      	mov	r4, r0
    2966:	7a00      	ldrb	r0, [r0, #8]
    2968:	f88d 0000 	strb.w	r0, [sp]
    296c:	9800      	ldr	r0, [sp, #0]
    296e:	9000      	str	r0, [sp, #0]
    2970:	f89d 5000 	ldrb.w	r5, [sp]
    2974:	1ea8      	subs	r0, r5, #2
    2976:	2830      	cmp	r0, #48	; 0x30
    2978:	d27b      	bcs.n	2a72 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    297a:	e8df f000 	tbb	[pc, r0]
    297e:	3b18      	.short	0x3b18
    2980:	97359727 	.word	0x97359727
    2984:	7b977b3b 	.word	0x7b977b3b
    2988:	7b417b7b 	.word	0x7b417b7b
    298c:	97359797 	.word	0x97359797
    2990:	35977b7b 	.word	0x35977b7b
    2994:	7b979797 	.word	0x7b979797
    2998:	7b97975a 	.word	0x7b97975a
    299c:	8f7b7b97 	.word	0x8f7b7b97
    29a0:	2197977b 	.word	0x2197977b
    29a4:	97816963 	.word	0x97816963
    29a8:	97979797 	.word	0x97979797
    29ac:	6397      	.short	0x6397
    29ae:	6862      	ldr	r2, [r4, #4]
    29b0:	b912      	cbnz	r2, 29b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    29b2:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
    29b6:	e076      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    29b8:	4659      	mov	r1, fp
    29ba:	4620      	mov	r0, r4
    29bc:	4790      	blx	r2
    29be:	e050      	b.n	2a62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14e>
    29c0:	6862      	ldr	r2, [r4, #4]
    29c2:	2a00      	cmp	r2, #0
    29c4:	d1f8      	bne.n	29b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    29c6:	f240 11ad 	movw	r1, #429	; 0x1ad
    29ca:	e06c      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    29cc:	f001 ff70 	bl	48b0 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    29d0:	b128      	cbz	r0, 29de <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xca>
    29d2:	6862      	ldr	r2, [r4, #4]
    29d4:	b12a      	cbz	r2, 29e2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xce>
    29d6:	4659      	mov	r1, fp
    29d8:	4620      	mov	r0, r4
    29da:	4790      	blx	r2
    29dc:	e07a      	b.n	2ad4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c0>
    29de:	2701      	movs	r7, #1
    29e0:	e03f      	b.n	2a62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14e>
    29e2:	f240 2133 	movw	r1, #563	; 0x233
    29e6:	e05e      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    29e8:	6862      	ldr	r2, [r4, #4]
    29ea:	2a00      	cmp	r2, #0
    29ec:	d1e4      	bne.n	29b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    29ee:	f240 213f 	movw	r1, #575	; 0x23f
    29f2:	e058      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    29f4:	6862      	ldr	r2, [r4, #4]
    29f6:	2a00      	cmp	r2, #0
    29f8:	d1de      	bne.n	29b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    29fa:	f240 214b 	movw	r1, #587	; 0x24b
    29fe:	e052      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a00:	6860      	ldr	r0, [r4, #4]
    2a02:	465d      	mov	r5, fp
    2a04:	b180      	cbz	r0, 2a28 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x114>
    2a06:	8804      	ldrh	r4, [r0, #0]
    2a08:	4620      	mov	r0, r4
    2a0a:	f7fe fc0d 	bl	1228 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    2a0e:	b170      	cbz	r0, 2a2e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11a>
    2a10:	706e      	strb	r6, [r5, #1]
    2a12:	220f      	movs	r2, #15
    2a14:	702a      	strb	r2, [r5, #0]
    2a16:	80ec      	strh	r4, [r5, #6]
    2a18:	f8a5 9008 	strh.w	r9, [r5, #8]
    2a1c:	4631      	mov	r1, r6
    2a1e:	f885 9004 	strb.w	r9, [r5, #4]
    2a22:	f00a fdce 	bl	d5c2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    2a26:	e055      	b.n	2ad4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c0>
    2a28:	21ce      	movs	r1, #206	; 0xce
    2a2a:	e03c      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a2c:	e031      	b.n	2a92 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17e>
    2a2e:	21ae      	movs	r1, #174	; 0xae
    2a30:	e039      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a32:	6862      	ldr	r2, [r4, #4]
    2a34:	b11a      	cbz	r2, 2a3e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12a>
    2a36:	4659      	mov	r1, fp
    2a38:	4620      	mov	r0, r4
    2a3a:	4790      	blx	r2
    2a3c:	e7cf      	b.n	29de <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xca>
    2a3e:	f240 2163 	movw	r1, #611	; 0x263
    2a42:	e030      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a44:	6862      	ldr	r2, [r4, #4]
    2a46:	2a00      	cmp	r2, #0
    2a48:	d1b6      	bne.n	29b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    2a4a:	f240 216f 	movw	r1, #623	; 0x26f
    2a4e:	e02a      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a50:	f88b 6001 	strb.w	r6, [fp, #1]
    2a54:	211a      	movs	r1, #26
    2a56:	f88b 1000 	strb.w	r1, [fp]
    2a5a:	f8d4 1009 	ldr.w	r1, [r4, #9]
    2a5e:	f8cb 1004 	str.w	r1, [fp, #4]
    2a62:	7226      	strb	r6, [r4, #8]
    2a64:	2d21      	cmp	r5, #33	; 0x21
    2a66:	d024      	beq.n	2ab2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    2a68:	2d14      	cmp	r5, #20
    2a6a:	d025      	beq.n	2ab8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a4>
    2a6c:	2d22      	cmp	r5, #34	; 0x22
    2a6e:	d02a      	beq.n	2ac6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b2>
    2a70:	e02e      	b.n	2ad0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1bc>
    2a72:	e01b      	b.n	2aac <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x198>
    2a74:	6862      	ldr	r2, [r4, #4]
    2a76:	2a00      	cmp	r2, #0
    2a78:	d19e      	bne.n	29b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    2a7a:	f240 2196 	movw	r1, #662	; 0x296
    2a7e:	e012      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a80:	4817      	ldr	r0, [pc, #92]	; (2ae0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1cc>)
    2a82:	6802      	ldr	r2, [r0, #0]
    2a84:	b122      	cbz	r2, 2a90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17c>
    2a86:	6860      	ldr	r0, [r4, #4]
    2a88:	b128      	cbz	r0, 2a96 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x182>
    2a8a:	8800      	ldrh	r0, [r0, #0]
    2a8c:	4659      	mov	r1, fp
    2a8e:	4790      	blx	r2
    2a90:	2002      	movs	r0, #2
    2a92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a96:	f240 219f 	movw	r1, #671	; 0x29f
    2a9a:	e004      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a9c:	6862      	ldr	r2, [r4, #4]
    2a9e:	2a00      	cmp	r2, #0
    2aa0:	d18a      	bne.n	29b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    2aa2:	f44f 712b 	mov.w	r1, #684	; 0x2ac
    2aa6:	2010      	movs	r0, #16
    2aa8:	f7fd ffdc 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2aac:	f240 21bd 	movw	r1, #701	; 0x2bd
    2ab0:	e7f9      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2ab2:	f7ff feb9 	bl	2828 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    2ab6:	e008      	b.n	2aca <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b6>
    2ab8:	f89b 000e 	ldrb.w	r0, [fp, #14]
    2abc:	f000 0001 	and.w	r0, r0, #1
    2ac0:	f7ff fea6 	bl	2810 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    2ac4:	e001      	b.n	2aca <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b6>
    2ac6:	f7ff feb9 	bl	283c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    2aca:	2800      	cmp	r0, #0
    2acc:	f47f af2c 	bne.w	2928 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14>
    2ad0:	2f00      	cmp	r7, #0
    2ad2:	d1fb      	bne.n	2acc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b8>
    2ad4:	2004      	movs	r0, #4
    2ad6:	e7dc      	b.n	2a92 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17e>
    2ad8:	20000f50 	.word	0x20000f50
    2adc:	20000f24 	.word	0x20000f24
    2ae0:	200000b0 	.word	0x200000b0

00002ae4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    2ae4:	4901      	ldr	r1, [pc, #4]	; (2aec <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    2ae6:	7008      	strb	r0, [r1, #0]
    2ae8:	f000 b8b0 	b.w	2c4c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x15c>
    2aec:	20000358 	.word	0x20000358

00002af0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY>:
    2af0:	4902      	ldr	r1, [pc, #8]	; (2afc <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xc>)
    2af2:	4801      	ldr	r0, [pc, #4]	; (2af8 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x8>)
    2af4:	6008      	str	r0, [r1, #0]
    2af6:	4770      	bx	lr
    2af8:	00002b01 	.word	0x00002b01
    2afc:	200000b0 	.word	0x200000b0
    2b00:	b538      	push	{r3, r4, r5, lr}
    2b02:	000d      	movs	r5, r1
    2b04:	d014      	beq.n	2b30 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x40>
    2b06:	80a8      	strh	r0, [r5, #4]
    2b08:	2100      	movs	r1, #0
    2b0a:	7269      	strb	r1, [r5, #9]
    2b0c:	f7fe fb76 	bl	11fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    2b10:	4604      	mov	r4, r0
    2b12:	f00a fc9a 	bl	d44a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    2b16:	b168      	cbz	r0, 2b34 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x44>
    2b18:	4601      	mov	r1, r0
    2b1a:	466a      	mov	r2, sp
    2b1c:	4620      	mov	r0, r4
    2b1e:	f00a fcb2 	bl	d486 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    2b22:	80e8      	strh	r0, [r5, #6]
    2b24:	b148      	cbz	r0, 2b3a <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x4a>
    2b26:	28fb      	cmp	r0, #251	; 0xfb
    2b28:	d90a      	bls.n	2b40 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x50>
    2b2a:	f44f 7186 	mov.w	r1, #268	; 0x10c
    2b2e:	e032      	b.n	2b96 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2b30:	21fc      	movs	r1, #252	; 0xfc
    2b32:	e030      	b.n	2b96 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2b34:	f240 1105 	movw	r1, #261	; 0x105
    2b38:	e02d      	b.n	2b96 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2b3a:	f44f 7185 	mov.w	r1, #266	; 0x10a
    2b3e:	e02a      	b.n	2b96 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2b40:	9800      	ldr	r0, [sp, #0]
    2b42:	f00b fa77 	bl	e034 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>
    2b46:	2801      	cmp	r0, #1
    2b48:	d004      	beq.n	2b54 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x64>
    2b4a:	2802      	cmp	r0, #2
    2b4c:	d002      	beq.n	2b54 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x64>
    2b4e:	f44f 718e 	mov.w	r1, #284	; 0x11c
    2b52:	e020      	b.n	2b96 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2b54:	7228      	strb	r0, [r5, #8]
    2b56:	6828      	ldr	r0, [r5, #0]
    2b58:	b1a8      	cbz	r0, 2b86 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x96>
    2b5a:	9900      	ldr	r1, [sp, #0]
    2b5c:	88ea      	ldrh	r2, [r5, #6]
    2b5e:	1cc9      	adds	r1, r1, #3
    2b60:	f00d fd85 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2b64:	4620      	mov	r0, r4
    2b66:	f00a fc38 	bl	d3da <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    2b6a:	b178      	cbz	r0, 2b8c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x9c>
    2b6c:	4620      	mov	r0, r4
    2b6e:	2100      	movs	r1, #0
    2b70:	f00a fd27 	bl	d5c2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    2b74:	b168      	cbz	r0, 2b92 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa2>
    2b76:	4809      	ldr	r0, [pc, #36]	; (2b9c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xac>)
    2b78:	7cc1      	ldrb	r1, [r0, #19]
    2b7a:	2900      	cmp	r1, #0
    2b7c:	d002      	beq.n	2b84 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x94>
    2b7e:	8a81      	ldrh	r1, [r0, #20]
    2b80:	1e49      	subs	r1, r1, #1
    2b82:	8281      	strh	r1, [r0, #20]
    2b84:	bd38      	pop	{r3, r4, r5, pc}
    2b86:	f240 1123 	movw	r1, #291	; 0x123
    2b8a:	e004      	b.n	2b96 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2b8c:	f44f 7194 	mov.w	r1, #296	; 0x128
    2b90:	e001      	b.n	2b96 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2b92:	f240 112d 	movw	r1, #301	; 0x12d
    2b96:	2010      	movs	r0, #16
    2b98:	f7fd ff64 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2b9c:	20000f24 	.word	0x20000f24
    2ba0:	b538      	push	{r3, r4, r5, lr}
    2ba2:	4602      	mov	r2, r0
    2ba4:	4b11      	ldr	r3, [pc, #68]	; (2bec <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xfc>)
    2ba6:	2000      	movs	r0, #0
    2ba8:	7010      	strb	r0, [r2, #0]
    2baa:	6858      	ldr	r0, [r3, #4]
    2bac:	7a01      	ldrb	r1, [r0, #8]
    2bae:	f88d 1000 	strb.w	r1, [sp]
    2bb2:	9900      	ldr	r1, [sp, #0]
    2bb4:	9100      	str	r1, [sp, #0]
    2bb6:	f89d 5000 	ldrb.w	r5, [sp]
    2bba:	2401      	movs	r4, #1
    2bbc:	2d01      	cmp	r5, #1
    2bbe:	d006      	beq.n	2bce <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xde>
    2bc0:	f3ef 8110 	mrs	r1, PRIMASK
    2bc4:	b672      	cpsid	i
    2bc6:	6805      	ldr	r5, [r0, #0]
    2bc8:	605d      	str	r5, [r3, #4]
    2bca:	b111      	cbz	r1, 2bd2 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xe2>
    2bcc:	e002      	b.n	2bd4 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xe4>
    2bce:	2000      	movs	r0, #0
    2bd0:	bd38      	pop	{r3, r4, r5, pc}
    2bd2:	b662      	cpsie	i
    2bd4:	7a01      	ldrb	r1, [r0, #8]
    2bd6:	f88d 1000 	strb.w	r1, [sp]
    2bda:	9900      	ldr	r1, [sp, #0]
    2bdc:	9100      	str	r1, [sp, #0]
    2bde:	f89d 3000 	ldrb.w	r3, [sp]
    2be2:	2b00      	cmp	r3, #0
    2be4:	d1f4      	bne.n	2bd0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xe0>
    2be6:	7014      	strb	r4, [r2, #0]
    2be8:	bd38      	pop	{r3, r4, r5, pc}
    2bea:	0000      	.short	0x0000
    2bec:	20000f50 	.word	0x20000f50
    2bf0:	b538      	push	{r3, r4, r5, lr}
    2bf2:	b1d0      	cbz	r0, 2c2a <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x13a>
    2bf4:	6041      	str	r1, [r0, #4]
    2bf6:	f100 0108 	add.w	r1, r0, #8
    2bfa:	700a      	strb	r2, [r1, #0]
    2bfc:	f3ef 8310 	mrs	r3, PRIMASK
    2c00:	b672      	cpsid	i
    2c02:	4c10      	ldr	r4, [pc, #64]	; (2c44 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x154>)
    2c04:	6004      	str	r4, [r0, #0]
    2c06:	1f21      	subs	r1, r4, #4
    2c08:	684a      	ldr	r2, [r1, #4]
    2c0a:	b14a      	cbz	r2, 2c20 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x130>
    2c0c:	7a12      	ldrb	r2, [r2, #8]
    2c0e:	f88d 2000 	strb.w	r2, [sp]
    2c12:	9a00      	ldr	r2, [sp, #0]
    2c14:	9200      	str	r2, [sp, #0]
    2c16:	f89d 5000 	ldrb.w	r5, [sp]
    2c1a:	2d01      	cmp	r5, #1
    2c1c:	d100      	bne.n	2c20 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x130>
    2c1e:	600c      	str	r4, [r1, #0]
    2c20:	680a      	ldr	r2, [r1, #0]
    2c22:	6010      	str	r0, [r2, #0]
    2c24:	6008      	str	r0, [r1, #0]
    2c26:	b12b      	cbz	r3, 2c34 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x144>
    2c28:	e005      	b.n	2c36 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x146>
    2c2a:	f240 21e2 	movw	r1, #738	; 0x2e2
    2c2e:	2010      	movs	r0, #16
    2c30:	f7fd ff18 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2c34:	b662      	cpsie	i
    2c36:	4804      	ldr	r0, [pc, #16]	; (2c48 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x158>)
    2c38:	7800      	ldrb	r0, [r0, #0]
    2c3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2c3e:	f009 bc5f 	b.w	c500 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2c42:	0000      	.short	0x0000
    2c44:	20000f54 	.word	0x20000f54
    2c48:	20000358 	.word	0x20000358
    2c4c:	4808      	ldr	r0, [pc, #32]	; (2c70 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x180>)
    2c4e:	b510      	push	{r4, lr}
    2c50:	2100      	movs	r1, #0
    2c52:	6141      	str	r1, [r0, #20]
    2c54:	6181      	str	r1, [r0, #24]
    2c56:	61c1      	str	r1, [r0, #28]
    2c58:	6201      	str	r1, [r0, #32]
    2c5a:	2212      	movs	r2, #18
    2c5c:	f00d fd81 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2c60:	4803      	ldr	r0, [pc, #12]	; (2c70 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x180>)
    2c62:	3014      	adds	r0, #20
    2c64:	2101      	movs	r1, #1
    2c66:	7301      	strb	r1, [r0, #12]
    2c68:	1d01      	adds	r1, r0, #4
    2c6a:	6041      	str	r1, [r0, #4]
    2c6c:	6001      	str	r1, [r0, #0]
    2c6e:	bd10      	pop	{r4, pc}
    2c70:	20000f3c 	.word	0x20000f3c

00002c74 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    2c74:	b4f0      	push	{r4, r5, r6, r7}
    2c76:	8150      	strh	r0, [r2, #10]
    2c78:	890c      	ldrh	r4, [r1, #8]
    2c7a:	4613      	mov	r3, r2
    2c7c:	8194      	strh	r4, [r2, #12]
    2c7e:	898a      	ldrh	r2, [r1, #12]
    2c80:	81da      	strh	r2, [r3, #14]
    2c82:	8948      	ldrh	r0, [r1, #10]
    2c84:	8218      	strh	r0, [r3, #16]
    2c86:	89cd      	ldrh	r5, [r1, #14]
    2c88:	825d      	strh	r5, [r3, #18]
    2c8a:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    2c8c:	42ae      	cmp	r6, r5
    2c8e:	d108      	bne.n	2ca2 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    2c90:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    2c92:	4285      	cmp	r5, r0
    2c94:	d105      	bne.n	2ca2 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    2c96:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    2c98:	4295      	cmp	r5, r2
    2c9a:	d102      	bne.n	2ca2 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    2c9c:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
    2c9e:	42a2      	cmp	r2, r4
    2ca0:	d001      	beq.n	2ca6 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    2ca2:	2201      	movs	r2, #1
    2ca4:	e000      	b.n	2ca8 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x34>
    2ca6:	2200      	movs	r2, #0
    2ca8:	751a      	strb	r2, [r3, #20]
    2caa:	8548      	strh	r0, [r1, #42]	; 0x2a
    2cac:	8a58      	ldrh	r0, [r3, #18]
    2cae:	85c8      	strh	r0, [r1, #46]	; 0x2e
    2cb0:	8998      	ldrh	r0, [r3, #12]
    2cb2:	8588      	strh	r0, [r1, #44]	; 0x2c
    2cb4:	89d8      	ldrh	r0, [r3, #14]
    2cb6:	8608      	strh	r0, [r1, #48]	; 0x30
    2cb8:	bcf0      	pop	{r4, r5, r6, r7}
    2cba:	2214      	movs	r2, #20
    2cbc:	4901      	ldr	r1, [pc, #4]	; (2cc4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x50>)
    2cbe:	4618      	mov	r0, r3
    2cc0:	f00b ba41 	b.w	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    2cc4:	0000e323 	.word	0x0000e323

00002cc8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    2cc8:	8150      	strh	r0, [r2, #10]
    2cca:	8a88      	ldrh	r0, [r1, #20]
    2ccc:	8190      	strh	r0, [r2, #12]
    2cce:	8ac8      	ldrh	r0, [r1, #22]
    2cd0:	81d0      	strh	r0, [r2, #14]
    2cd2:	8b08      	ldrh	r0, [r1, #24]
    2cd4:	8210      	strh	r0, [r2, #16]
    2cd6:	8b48      	ldrh	r0, [r1, #26]
    2cd8:	4613      	mov	r3, r2
    2cda:	8250      	strh	r0, [r2, #18]
    2cdc:	2221      	movs	r2, #33	; 0x21
    2cde:	4902      	ldr	r1, [pc, #8]	; (2ce8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>)
    2ce0:	4618      	mov	r0, r3
    2ce2:	f00b ba1c 	b.w	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2ce6:	0000      	.short	0x0000
    2ce8:	0000e359 	.word	0x0000e359

00002cec <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    2cec:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cee:	f06f 021f 	mvn.w	r2, #31
    2cf2:	0c01      	lsrs	r1, r0, #16
    2cf4:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    2cf8:	251f      	movs	r5, #31
    2cfa:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    2cfe:	3854      	subs	r0, #84	; 0x54
    2d00:	d00d      	beq.n	2d1e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2d02:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    2d06:	3855      	subs	r0, #85	; 0x55
    2d08:	d009      	beq.n	2d1e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2d0a:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    2d0e:	38aa      	subs	r0, #170	; 0xaa
    2d10:	d005      	beq.n	2d1e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2d12:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    2d16:	38aa      	subs	r0, #170	; 0xaa
    2d18:	d001      	beq.n	2d1e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2d1a:	2001      	movs	r0, #1
    2d1c:	e000      	b.n	2d20 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    2d1e:	2000      	movs	r0, #0
    2d20:	2200      	movs	r2, #0
    2d22:	4613      	mov	r3, r2
    2d24:	ea4f 0402 	mov.w	r4, r2
    2d28:	ea82 0701 	eor.w	r7, r2, r1
    2d2c:	43ff      	mvns	r7, r7
    2d2e:	431f      	orrs	r7, r3
    2d30:	1c7f      	adds	r7, r7, #1
    2d32:	d00f      	beq.n	2d54 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    2d34:	f006 0701 	and.w	r7, r6, #1
    2d38:	0852      	lsrs	r2, r2, #1
    2d3a:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    2d3e:	f005 0701 	and.w	r7, r5, #1
    2d42:	085b      	lsrs	r3, r3, #1
    2d44:	0876      	lsrs	r6, r6, #1
    2d46:	086d      	lsrs	r5, r5, #1
    2d48:	1c64      	adds	r4, r4, #1
    2d4a:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    2d4e:	2c16      	cmp	r4, #22
    2d50:	d3ea      	bcc.n	2d28 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    2d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d54:	2000      	movs	r0, #0
    2d56:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002d58 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA>:
    2d58:	b510      	push	{r4, lr}
    2d5a:	4604      	mov	r4, r0
    2d5c:	f00b fb8c 	bl	e478 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    2d60:	b308      	cbz	r0, 2da6 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2d62:	43e0      	mvns	r0, r4
    2d64:	f00b fb88 	bl	e478 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    2d68:	b1e8      	cbz	r0, 2da6 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2d6a:	16a0      	asrs	r0, r4, #26
    2d6c:	ea80 0060 	eor.w	r0, r0, r0, asr #1
    2d70:	1e41      	subs	r1, r0, #1
    2d72:	4208      	tst	r0, r1
    2d74:	d017      	beq.n	2da6 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2d76:	4620      	mov	r0, r4
    2d78:	f00b fbcd 	bl	e516 <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A>
    2d7c:	2818      	cmp	r0, #24
    2d7e:	d812      	bhi.n	2da6 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2d80:	b2a0      	uxth	r0, r4
    2d82:	ebb0 4f14 	cmp.w	r0, r4, lsr #16
    2d86:	d107      	bne.n	2d98 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x40>
    2d88:	f04f 11ff 	mov.w	r1, #16711935	; 0xff00ff
    2d8c:	ea01 2114 	and.w	r1, r1, r4, lsr #8
    2d90:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
    2d94:	4281      	cmp	r1, r0
    2d96:	d006      	beq.n	2da6 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2d98:	4804      	ldr	r0, [pc, #16]	; (2dac <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x54>)
    2d9a:	4044      	eors	r4, r0
    2d9c:	1e60      	subs	r0, r4, #1
    2d9e:	4204      	tst	r4, r0
    2da0:	d001      	beq.n	2da6 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2da2:	2001      	movs	r0, #1
    2da4:	bd10      	pop	{r4, pc}
    2da6:	2000      	movs	r0, #0
    2da8:	bd10      	pop	{r4, pc}
    2daa:	0000      	.short	0x0000
    2dac:	8e89bed6 	.word	0x8e89bed6

00002db0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    2db0:	b510      	push	{r4, lr}
    2db2:	4804      	ldr	r0, [pc, #16]	; (2dc4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    2db4:	f00b fb71 	bl	e49a <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x7a>
    2db8:	4802      	ldr	r0, [pc, #8]	; (2dc4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    2dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2dbe:	3008      	adds	r0, #8
    2dc0:	f00b bb6b 	b.w	e49a <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x7a>
    2dc4:	200000b4 	.word	0x200000b4

00002dc8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    2dc8:	4801      	ldr	r0, [pc, #4]	; (2dd0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    2dca:	f000 b803 	b.w	2dd4 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    2dce:	0000      	.short	0x0000
    2dd0:	200000bc 	.word	0x200000bc
    2dd4:	b510      	push	{r4, lr}
    2dd6:	e9d0 2100 	ldrd	r2, r1, [r0]
    2dda:	4b09      	ldr	r3, [pc, #36]	; (2e00 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    2ddc:	4c09      	ldr	r4, [pc, #36]	; (2e04 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    2dde:	4353      	muls	r3, r2
    2de0:	4354      	muls	r4, r2
    2de2:	4051      	eors	r1, r2
    2de4:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    2de8:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    2dec:	ea4f 41f1 	mov.w	r1, r1, ror #19
    2df0:	e9c0 2100 	strd	r2, r1, [r0]
    2df4:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    2df8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2dfc:	4618      	mov	r0, r3
    2dfe:	bd10      	pop	{r4, pc}
    2e00:	c6ef3760 	.word	0xc6ef3760
    2e04:	9e3779bb 	.word	0x9e3779bb

00002e08 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>:
    2e08:	b570      	push	{r4, r5, r6, lr}
    2e0a:	6845      	ldr	r5, [r0, #4]
    2e0c:	1d0c      	adds	r4, r1, #4
    2e0e:	2300      	movs	r3, #0
    2e10:	f895 20a6 	ldrb.w	r2, [r5, #166]	; 0xa6
    2e14:	3588      	adds	r5, #136	; 0x88
    2e16:	2601      	movs	r6, #1
    2e18:	4619      	mov	r1, r3
    2e1a:	4628      	mov	r0, r5
    2e1c:	f00a fe6e 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2e20:	b190      	cbz	r0, 2e48 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x40>
    2e22:	6820      	ldr	r0, [r4, #0]
    2e24:	4a09      	ldr	r2, [pc, #36]	; (2e4c <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x44>)
    2e26:	7921      	ldrb	r1, [r4, #4]
    2e28:	4010      	ands	r0, r2
    2e2a:	f8c5 006e 	str.w	r0, [r5, #110]	; 0x6e
    2e2e:	f001 0107 	and.w	r1, r1, #7
    2e32:	f8c5 1072 	str.w	r1, [r5, #114]	; 0x72
    2e36:	2000      	movs	r0, #0
    2e38:	f8a5 005a 	strh.w	r0, [r5, #90]	; 0x5a
    2e3c:	f885 605c 	strb.w	r6, [r5, #92]	; 0x5c
    2e40:	2004      	movs	r0, #4
    2e42:	77a8      	strb	r0, [r5, #30]
    2e44:	2000      	movs	r0, #0
    2e46:	bd70      	pop	{r4, r5, r6, pc}
    2e48:	2001      	movs	r0, #1
    2e4a:	bd70      	pop	{r4, r5, r6, pc}
    2e4c:	3704492f 	.word	0x3704492f

00002e50 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>:
    2e50:	b510      	push	{r4, lr}
    2e52:	1d04      	adds	r4, r0, #4
    2e54:	f004 fce0 	bl	7818 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    2e58:	4a03      	ldr	r2, [pc, #12]	; (2e68 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY+0x18>)
    2e5a:	f001 0107 	and.w	r1, r1, #7
    2e5e:	4010      	ands	r0, r2
    2e60:	6020      	str	r0, [r4, #0]
    2e62:	6061      	str	r1, [r4, #4]
    2e64:	bd10      	pop	{r4, pc}
    2e66:	0000      	.short	0x0000
    2e68:	3704492f 	.word	0x3704492f

00002e6c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>:
    2e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2e70:	4605      	mov	r5, r0
    2e72:	7803      	ldrb	r3, [r0, #0]
    2e74:	6840      	ldr	r0, [r0, #4]
    2e76:	1d0f      	adds	r7, r1, #4
    2e78:	f100 0688 	add.w	r6, r0, #136	; 0x88
    2e7c:	f500 74a9 	add.w	r4, r0, #338	; 0x152
    2e80:	4680      	mov	r8, r0
    2e82:	7f72      	ldrb	r2, [r6, #29]
    2e84:	2107      	movs	r1, #7
    2e86:	4630      	mov	r0, r6
    2e88:	f00a fe38 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2e8c:	b1d0      	cbz	r0, 2ec4 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x58>
    2e8e:	6838      	ldr	r0, [r7, #0]
    2e90:	4a17      	ldr	r2, [pc, #92]	; (2ef0 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x84>)
    2e92:	7939      	ldrb	r1, [r7, #4]
    2e94:	4010      	ands	r0, r2
    2e96:	f8c6 006e 	str.w	r0, [r6, #110]	; 0x6e
    2e9a:	f001 0107 	and.w	r1, r1, #7
    2e9e:	f8c6 1072 	str.w	r1, [r6, #114]	; 0x72
    2ea2:	2000      	movs	r0, #0
    2ea4:	f886 0058 	strb.w	r0, [r6, #88]	; 0x58
    2ea8:	7770      	strb	r0, [r6, #29]
    2eaa:	6869      	ldr	r1, [r5, #4]
    2eac:	f881 014b 	strb.w	r0, [r1, #331]	; 0x14b
    2eb0:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
    2eb4:	f88d 1000 	strb.w	r1, [sp]
    2eb8:	9900      	ldr	r1, [sp, #0]
    2eba:	9100      	str	r1, [sp, #0]
    2ebc:	f89d 1000 	ldrb.w	r1, [sp]
    2ec0:	b999      	cbnz	r1, 2eea <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x7e>
    2ec2:	e002      	b.n	2eca <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x5e>
    2ec4:	2001      	movs	r0, #1
    2ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2eca:	f8b8 1000 	ldrh.w	r1, [r8]
    2ece:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    2ed2:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    2ed6:	6839      	ldr	r1, [r7, #0]
    2ed8:	66e1      	str	r1, [r4, #108]	; 0x6c
    2eda:	6879      	ldr	r1, [r7, #4]
    2edc:	6721      	str	r1, [r4, #112]	; 0x70
    2ede:	2208      	movs	r2, #8
    2ee0:	4904      	ldr	r1, [pc, #16]	; (2ef4 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x88>)
    2ee2:	f104 0060 	add.w	r0, r4, #96	; 0x60
    2ee6:	f00b f91a 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2eea:	2000      	movs	r0, #0
    2eec:	e7eb      	b.n	2ec6 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x5a>
    2eee:	0000      	.short	0x0000
    2ef0:	3704492f 	.word	0x3704492f
    2ef4:	0000e621 	.word	0x0000e621

00002ef8 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>:
    2ef8:	b570      	push	{r4, r5, r6, lr}
    2efa:	1d0d      	adds	r5, r1, #4
    2efc:	6844      	ldr	r4, [r0, #4]
    2efe:	f004 fc8b 	bl	7818 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    2f02:	4a06      	ldr	r2, [pc, #24]	; (2f1c <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ+0x24>)
    2f04:	4010      	ands	r0, r2
    2f06:	f001 0207 	and.w	r2, r1, #7
    2f0a:	f894 10f6 	ldrb.w	r1, [r4, #246]	; 0xf6
    2f0e:	4001      	ands	r1, r0
    2f10:	f361 0007 	bfi	r0, r1, #0, #8
    2f14:	6028      	str	r0, [r5, #0]
    2f16:	606a      	str	r2, [r5, #4]
    2f18:	bd70      	pop	{r4, r5, r6, pc}
    2f1a:	0000      	.short	0x0000
    2f1c:	3704492f 	.word	0x3704492f

00002f20 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>:
    2f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f24:	6844      	ldr	r4, [r0, #4]
    2f26:	460d      	mov	r5, r1
    2f28:	7803      	ldrb	r3, [r0, #0]
    2f2a:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    2f2e:	3488      	adds	r4, #136	; 0x88
    2f30:	2701      	movs	r7, #1
    2f32:	2108      	movs	r1, #8
    2f34:	4620      	mov	r0, r4
    2f36:	f00a fde1 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2f3a:	b930      	cbnz	r0, 2f4a <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x2a>
    2f3c:	2300      	movs	r3, #0
    2f3e:	7fa2      	ldrb	r2, [r4, #30]
    2f40:	4619      	mov	r1, r3
    2f42:	4620      	mov	r0, r4
    2f44:	f00a fdda 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2f48:	b320      	cbz	r0, 2f94 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x74>
    2f4a:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
    2f4e:	f04f 0600 	mov.w	r6, #0
    2f52:	0780      	lsls	r0, r0, #30
    2f54:	d419      	bmi.n	2f8a <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x6a>
    2f56:	4628      	mov	r0, r5
    2f58:	f00b f8c8 	bl	e0ec <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>
    2f5c:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    2f60:	f835 0f05 	ldrh.w	r0, [r5, #5]!
    2f64:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    2f68:	8868      	ldrh	r0, [r5, #2]
    2f6a:	f8a4 006c 	strh.w	r0, [r4, #108]	; 0x6c
    2f6e:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
    2f72:	f040 0002 	orr.w	r0, r0, #2
    2f76:	f884 005f 	strb.w	r0, [r4, #95]	; 0x5f
    2f7a:	07c0      	lsls	r0, r0, #31
    2f7c:	d00d      	beq.n	2f9a <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x7a>
    2f7e:	2203      	movs	r2, #3
    2f80:	4912      	ldr	r1, [pc, #72]	; (2fcc <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0xac>)
    2f82:	f104 0060 	add.w	r0, r4, #96	; 0x60
    2f86:	f00b f8de 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    2f8a:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
    2f8e:	07c0      	lsls	r0, r0, #31
    2f90:	d003      	beq.n	2f9a <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x7a>
    2f92:	e00e      	b.n	2fb2 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x92>
    2f94:	2001      	movs	r0, #1
    2f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f9a:	2300      	movs	r3, #0
    2f9c:	7fa2      	ldrb	r2, [r4, #30]
    2f9e:	4619      	mov	r1, r3
    2fa0:	4620      	mov	r0, r4
    2fa2:	f00a fdab 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2fa6:	b140      	cbz	r0, 2fba <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x9a>
    2fa8:	77a7      	strb	r7, [r4, #30]
    2faa:	f884 705c 	strb.w	r7, [r4, #92]	; 0x5c
    2fae:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    2fb2:	7f60      	ldrb	r0, [r4, #29]
    2fb4:	2801      	cmp	r0, #1
    2fb6:	d004      	beq.n	2fc2 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0xa2>
    2fb8:	e006      	b.n	2fc8 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0xa8>
    2fba:	2148      	movs	r1, #72	; 0x48
    2fbc:	2040      	movs	r0, #64	; 0x40
    2fbe:	f7fd fd51 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2fc2:	7766      	strb	r6, [r4, #29]
    2fc4:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
    2fc8:	2000      	movs	r0, #0
    2fca:	e7e4      	b.n	2f96 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x76>
    2fcc:	0000e64f 	.word	0x0000e64f

00002fd0 <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY>:
    2fd0:	4907      	ldr	r1, [pc, #28]	; (2ff0 <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY+0x20>)
    2fd2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    2fd6:	1300      	asrs	r0, r0, #12
    2fd8:	7809      	ldrb	r1, [r1, #0]
    2fda:	b240      	sxtb	r0, r0
    2fdc:	4249      	negs	r1, r1
    2fde:	b249      	sxtb	r1, r1
    2fe0:	4408      	add	r0, r1
    2fe2:	f300 0007 	ssat	r0, #8, r0
    2fe6:	2800      	cmp	r0, #0
    2fe8:	dc00      	bgt.n	2fec <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY+0x1c>
    2fea:	2000      	movs	r0, #0
    2fec:	b2c0      	uxtb	r0, r0
    2fee:	4770      	bx	lr
    2ff0:	200000c4 	.word	0x200000c4

00002ff4 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>:
    2ff4:	4a04      	ldr	r2, [pc, #16]	; (3008 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ+0x14>)
    2ff6:	6892      	ldr	r2, [r2, #8]
    2ff8:	f5c2 5380 	rsb	r3, r2, #4096	; 0x1000
    2ffc:	434b      	muls	r3, r1
    2ffe:	4342      	muls	r2, r0
    3000:	eb03 3022 	add.w	r0, r3, r2, asr #12
    3004:	4770      	bx	lr
    3006:	0000      	.short	0x0000
    3008:	200000c4 	.word	0x200000c4

0000300c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>:
    300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    300e:	6844      	ldr	r4, [r0, #4]
    3010:	4606      	mov	r6, r0
    3012:	f104 0588 	add.w	r5, r4, #136	; 0x88
    3016:	f000 f87f 	bl	3118 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x10c>
    301a:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    301e:	2901      	cmp	r1, #1
    3020:	d11a      	bne.n	3058 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    3022:	2800      	cmp	r0, #0
    3024:	d018      	beq.n	3058 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    3026:	6870      	ldr	r0, [r6, #4]
    3028:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    302c:	f88d 1000 	strb.w	r1, [sp]
    3030:	9900      	ldr	r1, [sp, #0]
    3032:	9100      	str	r1, [sp, #0]
    3034:	f89d 1000 	ldrb.w	r1, [sp]
    3038:	f500 70a9 	add.w	r0, r0, #338	; 0x152
    303c:	2900      	cmp	r1, #0
    303e:	d10b      	bne.n	3058 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    3040:	8821      	ldrh	r1, [r4, #0]
    3042:	8141      	strh	r1, [r0, #10]
    3044:	7e69      	ldrb	r1, [r5, #25]
    3046:	7301      	strb	r1, [r0, #12]
    3048:	7ea9      	ldrb	r1, [r5, #26]
    304a:	7341      	strb	r1, [r0, #13]
    304c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3050:	221f      	movs	r2, #31
    3052:	4902      	ldr	r1, [pc, #8]	; (305c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>)
    3054:	f00b b863 	b.w	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    305a:	0000      	.short	0x0000
    305c:	0000e6e7 	.word	0x0000e6e7
    3060:	f500 6100 	add.w	r1, r0, #2048	; 0x800
    3064:	4a0d      	ldr	r2, [pc, #52]	; (309c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x90>)
    3066:	b510      	push	{r4, lr}
    3068:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    306c:	1309      	asrs	r1, r1, #12
    306e:	1300      	asrs	r0, r0, #12
    3070:	b24b      	sxtb	r3, r1
    3072:	f992 4000 	ldrsb.w	r4, [r2]
    3076:	4240      	negs	r0, r0
    3078:	2100      	movs	r1, #0
    307a:	b240      	sxtb	r0, r0
    307c:	42a3      	cmp	r3, r4
    307e:	da02      	bge.n	3086 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x7a>
    3080:	f992 1002 	ldrsb.w	r1, [r2, #2]
    3084:	e005      	b.n	3092 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x86>
    3086:	f992 4001 	ldrsb.w	r4, [r2, #1]
    308a:	42a3      	cmp	r3, r4
    308c:	dd04      	ble.n	3098 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x8c>
    308e:	f992 1003 	ldrsb.w	r1, [r2, #3]
    3092:	4408      	add	r0, r1
    3094:	f300 0107 	ssat	r1, #8, r0
    3098:	4608      	mov	r0, r1
    309a:	bd10      	pop	{r4, pc}
    309c:	200000c4 	.word	0x200000c4
    30a0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    30a4:	2200      	movs	r2, #0
    30a6:	704a      	strb	r2, [r1, #1]
    30a8:	f5a0 75fe 	sub.w	r5, r0, #508	; 0x1fc
    30ac:	700a      	strb	r2, [r1, #0]
    30ae:	f5a0 74ba 	sub.w	r4, r0, #372	; 0x174
    30b2:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    30b6:	f00c f928 	bl	f30a <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    30ba:	4606      	mov	r6, r0
    30bc:	68a0      	ldr	r0, [r4, #8]
    30be:	f7ff ffcf 	bl	3060 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    30c2:	0007      	movs	r7, r0
    30c4:	d021      	beq.n	310a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    30c6:	4620      	mov	r0, r4
    30c8:	f00b fb15 	bl	e6f6 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x66>
    30cc:	2800      	cmp	r0, #0
    30ce:	d01c      	beq.n	310a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    30d0:	8828      	ldrh	r0, [r5, #0]
    30d2:	4669      	mov	r1, sp
    30d4:	f00a fce9 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    30d8:	b118      	cbz	r0, 30e2 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xd6>
    30da:	2189      	movs	r1, #137	; 0x89
    30dc:	207a      	movs	r0, #122	; 0x7a
    30de:	f7fd fcc1 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    30e2:	1c76      	adds	r6, r6, #1
    30e4:	b2f1      	uxtb	r1, r6
    30e6:	2302      	movs	r3, #2
    30e8:	463a      	mov	r2, r7
    30ea:	4668      	mov	r0, sp
    30ec:	f00c f92c 	bl	f348 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>
    30f0:	2800      	cmp	r0, #0
    30f2:	d10a      	bne.n	310a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    30f4:	4806      	ldr	r0, [pc, #24]	; (3110 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x104>)
    30f6:	4907      	ldr	r1, [pc, #28]	; (3114 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x108>)
    30f8:	7900      	ldrb	r0, [r0, #4]
    30fa:	fba0 6501 	umull	r6, r5, r0, r1
    30fe:	f008 f847 	bl	b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    3102:	1980      	adds	r0, r0, r6
    3104:	4169      	adcs	r1, r5
    3106:	e9c4 0100 	strd	r0, r1, [r4]
    310a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    310e:	0000      	.short	0x0000
    3110:	200000c4 	.word	0x200000c4
    3114:	000f4240 	.word	0x000f4240
    3118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    311c:	4607      	mov	r7, r0
    311e:	f7ff faab 	bl	2678 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    3122:	687c      	ldr	r4, [r7, #4]
    3124:	4605      	mov	r5, r0
    3126:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
    312a:	3488      	adds	r4, #136	; 0x88
    312c:	287f      	cmp	r0, #127	; 0x7f
    312e:	d03c      	beq.n	31aa <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19e>
    3130:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    3134:	687e      	ldr	r6, [r7, #4]
    3136:	76a0      	strb	r0, [r4, #26]
    3138:	4629      	mov	r1, r5
    313a:	68a0      	ldr	r0, [r4, #8]
    313c:	f7ff ff5a 	bl	2ff4 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>
    3140:	60a0      	str	r0, [r4, #8]
    3142:	481b      	ldr	r0, [pc, #108]	; (31b0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a4>)
    3144:	7940      	ldrb	r0, [r0, #5]
    3146:	b190      	cbz	r0, 316e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x162>
    3148:	6878      	ldr	r0, [r7, #4]
    314a:	f100 0888 	add.w	r8, r0, #136	; 0x88
    314e:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
    3152:	f7ff ff85 	bl	3060 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    3156:	b150      	cbz	r0, 316e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x162>
    3158:	4640      	mov	r0, r8
    315a:	f00b facc 	bl	e6f6 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x66>
    315e:	b130      	cbz	r0, 316e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x162>
    3160:	6878      	ldr	r0, [r7, #4]
    3162:	2231      	movs	r2, #49	; 0x31
    3164:	4913      	ldr	r1, [pc, #76]	; (31b4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a8>)
    3166:	f500 70fe 	add.w	r0, r0, #508	; 0x1fc
    316a:	f00a ffec 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    316e:	f994 001b 	ldrsb.w	r0, [r4, #27]
    3172:	2100      	movs	r1, #0
    3174:	1a28      	subs	r0, r5, r0
    3176:	d500      	bpl.n	317a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x16e>
    3178:	4240      	negs	r0, r0
    317a:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
    317e:	4282      	cmp	r2, r0
    3180:	dc10      	bgt.n	31a4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x198>
    3182:	2aff      	cmp	r2, #255	; 0xff
    3184:	d00e      	beq.n	31a4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x198>
    3186:	7f20      	ldrb	r0, [r4, #28]
    3188:	1c40      	adds	r0, r0, #1
    318a:	b2c0      	uxtb	r0, r0
    318c:	7720      	strb	r0, [r4, #28]
    318e:	f896 202a 	ldrb.w	r2, [r6, #42]	; 0x2a
    3192:	4290      	cmp	r0, r2
    3194:	d802      	bhi.n	319c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x190>
    3196:	7ee0      	ldrb	r0, [r4, #27]
    3198:	287f      	cmp	r0, #127	; 0x7f
    319a:	d103      	bne.n	31a4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x198>
    319c:	2000      	movs	r0, #0
    319e:	76e5      	strb	r5, [r4, #27]
    31a0:	7720      	strb	r0, [r4, #28]
    31a2:	2101      	movs	r1, #1
    31a4:	4608      	mov	r0, r1
    31a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    31aa:	2000      	movs	r0, #0
    31ac:	e7fb      	b.n	31a6 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19a>
    31ae:	0000      	.short	0x0000
    31b0:	200000c4 	.word	0x200000c4
    31b4:	000030a1 	.word	0x000030a1

000031b8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>:
    31b8:	4801      	ldr	r0, [pc, #4]	; (31c0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY+0x8>)
    31ba:	6840      	ldr	r0, [r0, #4]
    31bc:	30a0      	adds	r0, #160	; 0xa0
    31be:	4770      	bx	lr
    31c0:	200000d0 	.word	0x200000d0

000031c4 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>:
    31c4:	b510      	push	{r4, lr}
    31c6:	4c21      	ldr	r4, [pc, #132]	; (324c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x88>)
    31c8:	6860      	ldr	r0, [r4, #4]
    31ca:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    31ce:	f00b fabb 	bl	e748 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    31d2:	6861      	ldr	r1, [r4, #4]
    31d4:	f881 0049 	strb.w	r0, [r1, #73]	; 0x49
    31d8:	314a      	adds	r1, #74	; 0x4a
    31da:	f7fe fa23 	bl	1624 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    31de:	6860      	ldr	r0, [r4, #4]
    31e0:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    31e4:	f00b fab7 	bl	e756 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc6>
    31e8:	6861      	ldr	r1, [r4, #4]
    31ea:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    31ee:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    31f2:	314a      	adds	r1, #74	; 0x4a
    31f4:	f00b fa94 	bl	e720 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x90>
    31f8:	b930      	cbnz	r0, 3208 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x44>
    31fa:	6861      	ldr	r1, [r4, #4]
    31fc:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    3200:	314a      	adds	r1, #74	; 0x4a
    3202:	f00b fa96 	bl	e732 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    3206:	b108      	cbz	r0, 320c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x48>
    3208:	2101      	movs	r1, #1
    320a:	e000      	b.n	320e <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x4a>
    320c:	2100      	movs	r1, #0
    320e:	6860      	ldr	r0, [r4, #4]
    3210:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    3214:	b919      	cbnz	r1, 321e <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x5a>
    3216:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    321a:	2800      	cmp	r0, #0
    321c:	d014      	beq.n	3248 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x84>
    321e:	f7ff f829 	bl	2274 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    3222:	490b      	ldr	r1, [pc, #44]	; (3250 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x8c>)
    3224:	fba0 2301 	umull	r2, r3, r0, r1
    3228:	6860      	ldr	r0, [r4, #4]
    322a:	3090      	adds	r0, #144	; 0x90
    322c:	f00b fae5 	bl	e7fa <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x90>
    3230:	6860      	ldr	r0, [r4, #4]
    3232:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3236:	b110      	cbz	r0, 323e <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x7a>
    3238:	2000      	movs	r0, #0
    323a:	f7fe ff8d 	bl	2158 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    323e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3242:	2000      	movs	r0, #0
    3244:	f000 be38 	b.w	3eb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8e0>
    3248:	bd10      	pop	{r4, pc}
    324a:	0000      	.short	0x0000
    324c:	200000d0 	.word	0x200000d0
    3250:	000f4240 	.word	0x000f4240

00003254 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>:
    3254:	4a04      	ldr	r2, [pc, #16]	; (3268 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x14>)
    3256:	2803      	cmp	r0, #3
    3258:	6852      	ldr	r2, [r2, #4]
    325a:	d100      	bne.n	325e <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0xa>
    325c:	6551      	str	r1, [r2, #84]	; 0x54
    325e:	f882 0058 	strb.w	r0, [r2, #88]	; 0x58
    3262:	2000      	movs	r0, #0
    3264:	4770      	bx	lr
    3266:	0000      	.short	0x0000
    3268:	200000d0 	.word	0x200000d0

0000326c <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI>:
    326c:	4806      	ldr	r0, [pc, #24]	; (3288 <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI+0x1c>)
    326e:	b508      	push	{r3, lr}
    3270:	6840      	ldr	r0, [r0, #4]
    3272:	7a00      	ldrb	r0, [r0, #8]
    3274:	f88d 0000 	strb.w	r0, [sp]
    3278:	9800      	ldr	r0, [sp, #0]
    327a:	9000      	str	r0, [sp, #0]
    327c:	f89d 0000 	ldrb.w	r0, [sp]
    3280:	2800      	cmp	r0, #0
    3282:	d000      	beq.n	3286 <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI+0x1a>
    3284:	2001      	movs	r0, #1
    3286:	bd08      	pop	{r3, pc}
    3288:	200000d0 	.word	0x200000d0

0000328c <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>:
    328c:	4902      	ldr	r1, [pc, #8]	; (3298 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ+0xc>)
    328e:	6849      	ldr	r1, [r1, #4]
    3290:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    3294:	2000      	movs	r0, #0
    3296:	4770      	bx	lr
    3298:	200000d0 	.word	0x200000d0

0000329c <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>:
    329c:	480a      	ldr	r0, [pc, #40]	; (32c8 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x2c>)
    329e:	6841      	ldr	r1, [r0, #4]
    32a0:	6e88      	ldr	r0, [r1, #104]	; 0x68
    32a2:	b170      	cbz	r0, 32c2 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x26>
    32a4:	f101 006d 	add.w	r0, r1, #109	; 0x6d
    32a8:	22ff      	movs	r2, #255	; 0xff
    32aa:	7002      	strb	r2, [r0, #0]
    32ac:	2200      	movs	r2, #0
    32ae:	668a      	str	r2, [r1, #104]	; 0x68
    32b0:	7002      	strb	r2, [r0, #0]
    32b2:	f891 106c 	ldrb.w	r1, [r1, #108]	; 0x6c
    32b6:	2001      	movs	r0, #1
    32b8:	4088      	lsls	r0, r1
    32ba:	4904      	ldr	r1, [pc, #16]	; (32cc <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x30>)
    32bc:	6008      	str	r0, [r1, #0]
    32be:	2000      	movs	r0, #0
    32c0:	4770      	bx	lr
    32c2:	200c      	movs	r0, #12
    32c4:	4770      	bx	lr
    32c6:	0000      	.short	0x0000
    32c8:	200000d0 	.word	0x200000d0
    32cc:	4001f508 	.word	0x4001f508

000032d0 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>:
    32d0:	4602      	mov	r2, r0
    32d2:	480c      	ldr	r0, [pc, #48]	; (3304 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x34>)
    32d4:	b510      	push	{r4, lr}
    32d6:	6082      	str	r2, [r0, #8]
    32d8:	68c0      	ldr	r0, [r0, #12]
    32da:	460c      	mov	r4, r1
    32dc:	b168      	cbz	r0, 32fa <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x2a>
    32de:	f000 ffe5 	bl	42ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2ac>
    32e2:	f00b fb70 	bl	e9c6 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>
    32e6:	4620      	mov	r0, r4
    32e8:	f000 f8c0 	bl	346c <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    32ec:	2800      	cmp	r0, #0
    32ee:	d007      	beq.n	3300 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x30>
    32f0:	f640 119d 	movw	r1, #2461	; 0x99d
    32f4:	2032      	movs	r0, #50	; 0x32
    32f6:	f7fd fbb5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    32fa:	f640 1197 	movw	r1, #2455	; 0x997
    32fe:	e7f9      	b.n	32f4 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x24>
    3300:	bd10      	pop	{r4, pc}
    3302:	0000      	.short	0x0000
    3304:	200000d0 	.word	0x200000d0

00003308 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>:
    3308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    330c:	4c0f      	ldr	r4, [pc, #60]	; (334c <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x44>)
    330e:	4605      	mov	r5, r0
    3310:	4616      	mov	r6, r2
    3312:	6860      	ldr	r0, [r4, #4]
    3314:	460f      	mov	r7, r1
    3316:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    331a:	f00b fa1c 	bl	e756 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc6>
    331e:	b158      	cbz	r0, 3338 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    3320:	b955      	cbnz	r5, 3338 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    3322:	4638      	mov	r0, r7
    3324:	f00b fa10 	bl	e748 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    3328:	4631      	mov	r1, r6
    332a:	f00a fb6c 	bl	da06 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    332e:	2808      	cmp	r0, #8
    3330:	d002      	beq.n	3338 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    3332:	2001      	movs	r0, #1
    3334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3338:	6860      	ldr	r0, [r4, #4]
    333a:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    333e:	f00b fa03 	bl	e748 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    3342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3346:	f7fe b999 	b.w	167c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    334a:	0000      	.short	0x0000
    334c:	200000d0 	.word	0x200000d0

00003350 <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A>:
    3350:	b510      	push	{r4, lr}
    3352:	4c0a      	ldr	r4, [pc, #40]	; (337c <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A+0x2c>)
    3354:	6860      	ldr	r0, [r4, #4]
    3356:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3358:	b159      	cbz	r1, 3372 <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A+0x22>
    335a:	2202      	movs	r2, #2
    335c:	7242      	strb	r2, [r0, #9]
    335e:	8809      	ldrh	r1, [r1, #0]
    3360:	8141      	strh	r1, [r0, #10]
    3362:	2212      	movs	r2, #18
    3364:	4906      	ldr	r1, [pc, #24]	; (3380 <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A+0x30>)
    3366:	f00a feda 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    336a:	6861      	ldr	r1, [r4, #4]
    336c:	2000      	movs	r0, #0
    336e:	6548      	str	r0, [r1, #84]	; 0x54
    3370:	bd10      	pop	{r4, pc}
    3372:	f240 4122 	movw	r1, #1058	; 0x422
    3376:	2032      	movs	r0, #50	; 0x32
    3378:	f7fd fb74 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    337c:	200000d0 	.word	0x200000d0
    3380:	000036b5 	.word	0x000036b5

00003384 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>:
    3384:	b570      	push	{r4, r5, r6, lr}
    3386:	4c13      	ldr	r4, [pc, #76]	; (33d4 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x50>)
    3388:	4615      	mov	r5, r2
    338a:	460e      	mov	r6, r1
    338c:	2800      	cmp	r0, #0
    338e:	d016      	beq.n	33be <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x3a>
    3390:	f04f 0200 	mov.w	r2, #0
    3394:	6861      	ldr	r1, [r4, #4]
    3396:	f801 2f51 	strb.w	r2, [r1, #81]!
    339a:	7248      	strb	r0, [r1, #9]
    339c:	f04f 0008 	mov.w	r0, #8
    33a0:	f881 002a 	strb.w	r0, [r1, #42]	; 0x2a
    33a4:	d114      	bne.n	33d0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    33a6:	4630      	mov	r0, r6
    33a8:	f00b f9ce 	bl	e748 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    33ac:	4629      	mov	r1, r5
    33ae:	f00a fb2a 	bl	da06 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    33b2:	6861      	ldr	r1, [r4, #4]
    33b4:	2808      	cmp	r0, #8
    33b6:	f881 007b 	strb.w	r0, [r1, #123]	; 0x7b
    33ba:	d003      	beq.n	33c4 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x40>
    33bc:	e008      	b.n	33d0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    33be:	f04f 0201 	mov.w	r2, #1
    33c2:	e7e7      	b.n	3394 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x10>
    33c4:	4630      	mov	r0, r6
    33c6:	f00b f9c6 	bl	e756 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc6>
    33ca:	b108      	cbz	r0, 33d0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    33cc:	2012      	movs	r0, #18
    33ce:	bd70      	pop	{r4, r5, r6, pc}
    33d0:	2000      	movs	r0, #0
    33d2:	bd70      	pop	{r4, r5, r6, pc}
    33d4:	200000d0 	.word	0x200000d0

000033d8 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI>:
    33d8:	b510      	push	{r4, lr}
    33da:	b1b1      	cbz	r1, 340a <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI+0x32>
    33dc:	4a0d      	ldr	r2, [pc, #52]	; (3414 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI+0x3c>)
    33de:	6852      	ldr	r2, [r2, #4]
    33e0:	f882 005f 	strb.w	r0, [r2, #95]	; 0x5f
    33e4:	6808      	ldr	r0, [r1, #0]
    33e6:	6610      	str	r0, [r2, #96]	; 0x60
    33e8:	8888      	ldrh	r0, [r1, #4]
    33ea:	f8a2 0064 	strh.w	r0, [r2, #100]	; 0x64
    33ee:	f892 0049 	ldrb.w	r0, [r2, #73]	; 0x49
    33f2:	f852 1f54 	ldr.w	r1, [r2, #84]!
    33f6:	7248      	strb	r0, [r1, #9]
    33f8:	f852 0908 	ldr.w	r0, [r2], #-8
    33fc:	f852 1c02 	ldr.w	r1, [r2, #-2]
    3400:	f8c0 100a 	str.w	r1, [r0, #10]
    3404:	8851      	ldrh	r1, [r2, #2]
    3406:	81c1      	strh	r1, [r0, #14]
    3408:	bd10      	pop	{r4, pc}
    340a:	f640 31a7 	movw	r1, #2983	; 0xba7
    340e:	2032      	movs	r0, #50	; 0x32
    3410:	f7fd fb28 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3414:	200000d0 	.word	0x200000d0

00003418 <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI>:
    3418:	4902      	ldr	r1, [pc, #8]	; (3424 <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI+0xc>)
    341a:	4801      	ldr	r0, [pc, #4]	; (3420 <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI+0x8>)
    341c:	60c8      	str	r0, [r1, #12]
    341e:	4770      	bx	lr
    3420:	000044e8 	.word	0x000044e8
    3424:	200000d0 	.word	0x200000d0

00003428 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>:
    3428:	4902      	ldr	r1, [pc, #8]	; (3434 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA+0xc>)
    342a:	6849      	ldr	r1, [r1, #4]
    342c:	f881 0048 	strb.w	r0, [r1, #72]	; 0x48
    3430:	4770      	bx	lr
    3432:	0000      	.short	0x0000
    3434:	200000d0 	.word	0x200000d0

00003438 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>:
    3438:	b570      	push	{r4, r5, r6, lr}
    343a:	4605      	mov	r5, r0
    343c:	f7fd ff0c 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    3440:	4604      	mov	r4, r0
    3442:	f7fd ff0f 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    3446:	4621      	mov	r1, r4
    3448:	f00b f9d5 	bl	e7f6 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    344c:	0001      	movs	r1, r0
    344e:	d006      	beq.n	345e <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x26>
    3450:	4805      	ldr	r0, [pc, #20]	; (3468 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x30>)
    3452:	68c0      	ldr	r0, [r0, #12]
    3454:	6802      	ldr	r2, [r0, #0]
    3456:	4628      	mov	r0, r5
    3458:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    345c:	4710      	bx	r2
    345e:	f640 21ab 	movw	r1, #2731	; 0xaab
    3462:	2032      	movs	r0, #50	; 0x32
    3464:	f7fd fafe 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3468:	200000d0 	.word	0x200000d0

0000346c <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>:
    346c:	b570      	push	{r4, r5, r6, lr}
    346e:	4d19      	ldr	r5, [pc, #100]	; (34d4 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x68>)
    3470:	4604      	mov	r4, r0
    3472:	6868      	ldr	r0, [r5, #4]
    3474:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    3478:	2901      	cmp	r1, #1
    347a:	d004      	beq.n	3486 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x1a>
    347c:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    3480:	b108      	cbz	r0, 3486 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x1a>
    3482:	200c      	movs	r0, #12
    3484:	bd70      	pop	{r4, r5, r6, pc}
    3486:	f7fd ff11 	bl	12ac <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>
    348a:	f00b fa9c 	bl	e9c6 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>
    348e:	f000 f8c1 	bl	3614 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    3492:	2246      	movs	r2, #70	; 0x46
    3494:	2100      	movs	r1, #0
    3496:	6868      	ldr	r0, [r5, #4]
    3498:	f00d f963 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    349c:	6869      	ldr	r1, [r5, #4]
    349e:	2200      	movs	r2, #0
    34a0:	2001      	movs	r0, #1
    34a2:	f881 205d 	strb.w	r2, [r1, #93]	; 0x5d
    34a6:	f881 0051 	strb.w	r0, [r1, #81]	; 0x51
    34aa:	f881 2058 	strb.w	r2, [r1, #88]	; 0x58
    34ae:	f881 207a 	strb.w	r2, [r1, #122]	; 0x7a
    34b2:	f881 405e 	strb.w	r4, [r1, #94]	; 0x5e
    34b6:	f881 2098 	strb.w	r2, [r1, #152]	; 0x98
    34ba:	2007      	movs	r0, #7
    34bc:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    34c0:	f101 006d 	add.w	r0, r1, #109	; 0x6d
    34c4:	23ff      	movs	r3, #255	; 0xff
    34c6:	7003      	strb	r3, [r0, #0]
    34c8:	f881 206c 	strb.w	r2, [r1, #108]	; 0x6c
    34cc:	668a      	str	r2, [r1, #104]	; 0x68
    34ce:	7002      	strb	r2, [r0, #0]
    34d0:	2000      	movs	r0, #0
    34d2:	bd70      	pop	{r4, r5, r6, pc}
    34d4:	200000d0 	.word	0x200000d0

000034d8 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>:
    34d8:	4805      	ldr	r0, [pc, #20]	; (34f0 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ+0x18>)
    34da:	b510      	push	{r4, lr}
    34dc:	6840      	ldr	r0, [r0, #4]
    34de:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    34e2:	f00b f931 	bl	e748 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    34e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    34ea:	f7fe b8c7 	b.w	167c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    34ee:	0000      	.short	0x0000
    34f0:	200000d0 	.word	0x200000d0

000034f4 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>:
    34f4:	b140      	cbz	r0, 3508 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    34f6:	2802      	cmp	r0, #2
    34f8:	d006      	beq.n	3508 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    34fa:	2200      	movs	r2, #0
    34fc:	4903      	ldr	r1, [pc, #12]	; (350c <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x18>)
    34fe:	6849      	ldr	r1, [r1, #4]
    3500:	f801 2f51 	strb.w	r2, [r1, #81]!
    3504:	7208      	strb	r0, [r1, #8]
    3506:	4770      	bx	lr
    3508:	2201      	movs	r2, #1
    350a:	e7f7      	b.n	34fc <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x8>
    350c:	200000d0 	.word	0x200000d0

00003510 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>:
    3510:	4902      	ldr	r1, [pc, #8]	; (351c <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A+0xc>)
    3512:	6849      	ldr	r1, [r1, #4]
    3514:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    3518:	4770      	bx	lr
    351a:	0000      	.short	0x0000
    351c:	200000d0 	.word	0x200000d0

00003520 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>:
    3520:	b510      	push	{r4, lr}
    3522:	4603      	mov	r3, r0
    3524:	7800      	ldrb	r0, [r0, #0]
    3526:	07c0      	lsls	r0, r0, #31
    3528:	d005      	beq.n	3536 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x16>
    352a:	7858      	ldrb	r0, [r3, #1]
    352c:	2100      	movs	r1, #0
    352e:	f7ff fe91 	bl	3254 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    3532:	2800      	cmp	r0, #0
    3534:	d10c      	bne.n	3550 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x30>
    3536:	4c07      	ldr	r4, [pc, #28]	; (3554 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x34>)
    3538:	7898      	ldrb	r0, [r3, #2]
    353a:	6861      	ldr	r1, [r4, #4]
    353c:	f881 0048 	strb.w	r0, [r1, #72]	; 0x48
    3540:	78d8      	ldrb	r0, [r3, #3]
    3542:	f7ff ffd7 	bl	34f4 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>
    3546:	6861      	ldr	r1, [r4, #4]
    3548:	7918      	ldrb	r0, [r3, #4]
    354a:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    354e:	2000      	movs	r0, #0
    3550:	bd10      	pop	{r4, pc}
    3552:	0000      	.short	0x0000
    3554:	200000d0 	.word	0x200000d0

00003558 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>:
    3558:	4801      	ldr	r0, [pc, #4]	; (3560 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY+0x8>)
    355a:	68c0      	ldr	r0, [r0, #12]
    355c:	6840      	ldr	r0, [r0, #4]
    355e:	4700      	bx	r0
    3560:	200000d0 	.word	0x200000d0

00003564 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>:
    3564:	4807      	ldr	r0, [pc, #28]	; (3584 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY+0x20>)
    3566:	b508      	push	{r3, lr}
    3568:	6840      	ldr	r0, [r0, #4]
    356a:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    356e:	f88d 0000 	strb.w	r0, [sp]
    3572:	9800      	ldr	r0, [sp, #0]
    3574:	9000      	str	r0, [sp, #0]
    3576:	f89d 0000 	ldrb.w	r0, [sp]
    357a:	2800      	cmp	r0, #0
    357c:	d000      	beq.n	3580 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY+0x1c>
    357e:	2001      	movs	r0, #1
    3580:	bd08      	pop	{r3, pc}
    3582:	0000      	.short	0x0000
    3584:	200000d0 	.word	0x200000d0

00003588 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>:
    3588:	b510      	push	{r4, lr}
    358a:	f000 f951 	bl	3830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    358e:	4b0c      	ldr	r3, [pc, #48]	; (35c0 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x38>)
    3590:	b140      	cbz	r0, 35a4 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x1c>
    3592:	6858      	ldr	r0, [r3, #4]
    3594:	2101      	movs	r1, #1
    3596:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
    359a:	6d41      	ldr	r1, [r0, #84]	; 0x54
    359c:	8809      	ldrh	r1, [r1, #0]
    359e:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    35a2:	e004      	b.n	35ae <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x26>
    35a4:	6859      	ldr	r1, [r3, #4]
    35a6:	2000      	movs	r0, #0
    35a8:	f801 0f42 	strb.w	r0, [r1, #66]!
    35ac:	8048      	strh	r0, [r1, #2]
    35ae:	6858      	ldr	r0, [r3, #4]
    35b0:	2217      	movs	r2, #23
    35b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    35b6:	4903      	ldr	r1, [pc, #12]	; (35c4 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x3c>)
    35b8:	3038      	adds	r0, #56	; 0x38
    35ba:	f00a bdb0 	b.w	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    35be:	0000      	.short	0x0000
    35c0:	200000d0 	.word	0x200000d0
    35c4:	00004245 	.word	0x00004245

000035c8 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    35c8:	4802      	ldr	r0, [pc, #8]	; (35d4 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    35ca:	6840      	ldr	r0, [r0, #4]
    35cc:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    35d0:	4770      	bx	lr
    35d2:	0000      	.short	0x0000
    35d4:	200000d0 	.word	0x200000d0

000035d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    35d8:	b510      	push	{r4, lr}
    35da:	f000 f929 	bl	3830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    35de:	490c      	ldr	r1, [pc, #48]	; (3610 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>)
    35e0:	b128      	cbz	r0, 35ee <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    35e2:	6848      	ldr	r0, [r1, #4]
    35e4:	f890 005a 	ldrb.w	r0, [r0, #90]	; 0x5a
    35e8:	2801      	cmp	r0, #1
    35ea:	d00e      	beq.n	360a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32>
    35ec:	e00c      	b.n	3608 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    35ee:	6849      	ldr	r1, [r1, #4]
    35f0:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    35f4:	2801      	cmp	r0, #1
    35f6:	d001      	beq.n	35fc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    35f8:	2802      	cmp	r0, #2
    35fa:	d105      	bne.n	3608 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    35fc:	f891 0059 	ldrb.w	r0, [r1, #89]	; 0x59
    3600:	2801      	cmp	r0, #1
    3602:	d003      	beq.n	360c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    3604:	2803      	cmp	r0, #3
    3606:	d001      	beq.n	360c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    3608:	2000      	movs	r0, #0
    360a:	bd10      	pop	{r4, pc}
    360c:	2001      	movs	r0, #1
    360e:	bd10      	pop	{r4, pc}
    3610:	200000d0 	.word	0x200000d0
    3614:	b510      	push	{r4, lr}
    3616:	4c07      	ldr	r4, [pc, #28]	; (3634 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c>)
    3618:	6860      	ldr	r0, [r4, #4]
    361a:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
    361e:	2800      	cmp	r0, #0
    3620:	d007      	beq.n	3632 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a>
    3622:	f004 fb23 	bl	7c6c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3626:	f004 f947 	bl	78b8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    362a:	6861      	ldr	r1, [r4, #4]
    362c:	2000      	movs	r0, #0
    362e:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    3632:	bd10      	pop	{r4, pc}
    3634:	200000d0 	.word	0x200000d0
    3638:	b518      	push	{r3, r4, lr}
    363a:	2300      	movs	r3, #0
    363c:	704b      	strb	r3, [r1, #1]
    363e:	2207      	movs	r2, #7
    3640:	700a      	strb	r2, [r1, #0]
    3642:	4a07      	ldr	r2, [pc, #28]	; (3660 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x88>)
    3644:	6852      	ldr	r2, [r2, #4]
    3646:	7203      	strb	r3, [r0, #8]
    3648:	6b54      	ldr	r4, [r2, #52]	; 0x34
    364a:	604c      	str	r4, [r1, #4]
    364c:	7a04      	ldrb	r4, [r0, #8]
    364e:	f88d 4000 	strb.w	r4, [sp]
    3652:	9c00      	ldr	r4, [sp, #0]
    3654:	9400      	str	r4, [sp, #0]
    3656:	f89d 4000 	ldrb.w	r4, [sp]
    365a:	2c00      	cmp	r4, #0
    365c:	d1f3      	bne.n	3646 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6e>
    365e:	bd18      	pop	{r3, r4, pc}
    3660:	200000d0 	.word	0x200000d0
    3664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3668:	4d10      	ldr	r5, [pc, #64]	; (36ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd4>)
    366a:	4606      	mov	r6, r0
    366c:	460f      	mov	r7, r1
    366e:	6868      	ldr	r0, [r5, #4]
    3670:	490f      	ldr	r1, [pc, #60]	; (36b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd8>)
    3672:	f890 007a 	ldrb.w	r0, [r0, #122]	; 0x7a
    3676:	5c0c      	ldrb	r4, [r1, r0]
    3678:	4620      	mov	r0, r4
    367a:	f004 fe37 	bl	82ec <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    367e:	6868      	ldr	r0, [r5, #4]
    3680:	2101      	movs	r1, #1
    3682:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
    3686:	2025      	movs	r0, #37	; 0x25
    3688:	f004 fe06 	bl	8298 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    368c:	4638      	mov	r0, r7
    368e:	f004 fd39 	bl	8104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    3692:	f04f 0101 	mov.w	r1, #1
    3696:	4608      	mov	r0, r1
    3698:	b126      	cbz	r6, 36a4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcc>
    369a:	f004 fb93 	bl	7dc4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    369e:	b918      	cbnz	r0, 36a8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd0>
    36a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    36a4:	f004 fb54 	bl	7d50 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    36a8:	2001      	movs	r0, #1
    36aa:	e7f9      	b.n	36a0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc8>
    36ac:	200000d0 	.word	0x200000d0
    36b0:	000108d7 	.word	0x000108d7
    36b4:	b570      	push	{r4, r5, r6, lr}
    36b6:	4e1a      	ldr	r6, [pc, #104]	; (3720 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x148>)
    36b8:	460c      	mov	r4, r1
    36ba:	6870      	ldr	r0, [r6, #4]
    36bc:	7a41      	ldrb	r1, [r0, #9]
    36be:	b191      	cbz	r1, 36e6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x10e>
    36c0:	8940      	ldrh	r0, [r0, #10]
    36c2:	2100      	movs	r1, #0
    36c4:	f00a f858 	bl	d778 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    36c8:	0005      	movs	r5, r0
    36ca:	d025      	beq.n	3718 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x140>
    36cc:	8828      	ldrh	r0, [r5, #0]
    36ce:	f00a f8da 	bl	d886 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    36d2:	8828      	ldrh	r0, [r5, #0]
    36d4:	2100      	movs	r1, #0
    36d6:	f7fd fc29 	bl	f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    36da:	b188      	cbz	r0, 3700 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x128>
    36dc:	f240 31f2 	movw	r1, #1010	; 0x3f2
    36e0:	2032      	movs	r0, #50	; 0x32
    36e2:	f7fd f9bf 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    36e6:	6d41      	ldr	r1, [r0, #84]	; 0x54
    36e8:	f8d0 200e 	ldr.w	r2, [r0, #14]
    36ec:	f841 2f03 	str.w	r2, [r1, #3]!
    36f0:	8a42      	ldrh	r2, [r0, #18]
    36f2:	808a      	strh	r2, [r1, #4]
    36f4:	7b40      	ldrb	r0, [r0, #13]
    36f6:	f00b f827 	bl	e748 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    36fa:	6871      	ldr	r1, [r6, #4]
    36fc:	6d49      	ldr	r1, [r1, #84]	; 0x54
    36fe:	7088      	strb	r0, [r1, #2]
    3700:	2500      	movs	r5, #0
    3702:	7065      	strb	r5, [r4, #1]
    3704:	2015      	movs	r0, #21
    3706:	7020      	strb	r0, [r4, #0]
    3708:	6871      	ldr	r1, [r6, #4]
    370a:	2221      	movs	r2, #33	; 0x21
    370c:	1d20      	adds	r0, r4, #4
    370e:	3109      	adds	r1, #9
    3710:	f00c ffad 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3714:	71e5      	strb	r5, [r4, #7]
    3716:	bd70      	pop	{r4, r5, r6, pc}
    3718:	f240 31ee 	movw	r1, #1006	; 0x3ee
    371c:	e7e0      	b.n	36e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x108>
    371e:	0000      	.short	0x0000
    3720:	200000d0 	.word	0x200000d0
    3724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3726:	2600      	movs	r6, #0
    3728:	460f      	mov	r7, r1
    372a:	4605      	mov	r5, r0
    372c:	f88d 6000 	strb.w	r6, [sp]
    3730:	466b      	mov	r3, sp
    3732:	f000 f895 	bl	3860 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x288>
    3736:	0001      	movs	r1, r0
    3738:	4810      	ldr	r0, [pc, #64]	; (377c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1a4>)
    373a:	d003      	beq.n	3744 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16c>
    373c:	6840      	ldr	r0, [r0, #4]
    373e:	f880 6081 	strb.w	r6, [r0, #129]	; 0x81
    3742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3744:	6840      	ldr	r0, [r0, #4]
    3746:	f89d 1000 	ldrb.w	r1, [sp]
    374a:	2f07      	cmp	r7, #7
    374c:	f890 4051 	ldrb.w	r4, [r0, #81]	; 0x51
    3750:	d301      	bcc.n	3756 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x17e>
    3752:	4634      	mov	r4, r6
    3754:	e002      	b.n	375c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x184>
    3756:	0022      	movs	r2, r4
    3758:	d100      	bne.n	375c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x184>
    375a:	460c      	mov	r4, r1
    375c:	f880 4081 	strb.w	r4, [r0, #129]	; 0x81
    3760:	6869      	ldr	r1, [r5, #4]
    3762:	2900      	cmp	r1, #0
    3764:	d0ed      	beq.n	3742 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16a>
    3766:	7c69      	ldrb	r1, [r5, #17]
    3768:	f880 1089 	strb.w	r1, [r0, #137]	; 0x89
    376c:	6869      	ldr	r1, [r5, #4]
    376e:	680a      	ldr	r2, [r1, #0]
    3770:	f840 2f82 	str.w	r2, [r0, #130]!
    3774:	8889      	ldrh	r1, [r1, #4]
    3776:	8081      	strh	r1, [r0, #4]
    3778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    377a:	0000      	.short	0x0000
    377c:	200000d0 	.word	0x200000d0
    3780:	b510      	push	{r4, lr}
    3782:	4915      	ldr	r1, [pc, #84]	; (37d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x200>)
    3784:	6842      	ldr	r2, [r0, #4]
    3786:	6849      	ldr	r1, [r1, #4]
    3788:	7813      	ldrb	r3, [r2, #0]
    378a:	f891 4082 	ldrb.w	r4, [r1, #130]	; 0x82
    378e:	42a3      	cmp	r3, r4
    3790:	d11f      	bne.n	37d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    3792:	7853      	ldrb	r3, [r2, #1]
    3794:	f891 4083 	ldrb.w	r4, [r1, #131]	; 0x83
    3798:	42a3      	cmp	r3, r4
    379a:	d11a      	bne.n	37d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    379c:	7893      	ldrb	r3, [r2, #2]
    379e:	f891 4084 	ldrb.w	r4, [r1, #132]	; 0x84
    37a2:	42a3      	cmp	r3, r4
    37a4:	d115      	bne.n	37d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    37a6:	78d3      	ldrb	r3, [r2, #3]
    37a8:	f891 4085 	ldrb.w	r4, [r1, #133]	; 0x85
    37ac:	42a3      	cmp	r3, r4
    37ae:	d110      	bne.n	37d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    37b0:	7913      	ldrb	r3, [r2, #4]
    37b2:	f891 4086 	ldrb.w	r4, [r1, #134]	; 0x86
    37b6:	42a3      	cmp	r3, r4
    37b8:	d10b      	bne.n	37d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    37ba:	7952      	ldrb	r2, [r2, #5]
    37bc:	f891 3087 	ldrb.w	r3, [r1, #135]	; 0x87
    37c0:	429a      	cmp	r2, r3
    37c2:	d106      	bne.n	37d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    37c4:	7c40      	ldrb	r0, [r0, #17]
    37c6:	f891 1089 	ldrb.w	r1, [r1, #137]	; 0x89
    37ca:	4288      	cmp	r0, r1
    37cc:	d101      	bne.n	37d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    37ce:	2001      	movs	r0, #1
    37d0:	bd10      	pop	{r4, pc}
    37d2:	2000      	movs	r0, #0
    37d4:	bd10      	pop	{r4, pc}
    37d6:	0000      	.short	0x0000
    37d8:	200000d0 	.word	0x200000d0
    37dc:	b510      	push	{r4, lr}
    37de:	7801      	ldrb	r1, [r0, #0]
    37e0:	b08c      	sub	sp, #48	; 0x30
    37e2:	f001 040f 	and.w	r4, r1, #15
    37e6:	4622      	mov	r2, r4
    37e8:	a901      	add	r1, sp, #4
    37ea:	f000 ff0b 	bl	4604 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    37ee:	f004 fa5f 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    37f2:	f000 fba1 	bl	3f38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x960>
    37f6:	2c04      	cmp	r4, #4
    37f8:	d114      	bne.n	3824 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24c>
    37fa:	a801      	add	r0, sp, #4
    37fc:	f7ff ffc0 	bl	3780 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1a8>
    3800:	b180      	cbz	r0, 3824 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24c>
    3802:	a80b      	add	r0, sp, #44	; 0x2c
    3804:	f000 fba0 	bl	3f48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    3808:	f99d 002c 	ldrsb.w	r0, [sp, #44]	; 0x2c
    380c:	9000      	str	r0, [sp, #0]
    380e:	4807      	ldr	r0, [pc, #28]	; (382c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x254>)
    3810:	6840      	ldr	r0, [r0, #4]
    3812:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
    3816:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
    381a:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    381e:	a801      	add	r0, sp, #4
    3820:	f00b f886 	bl	e930 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>
    3824:	b00c      	add	sp, #48	; 0x30
    3826:	2005      	movs	r0, #5
    3828:	bd10      	pop	{r4, pc}
    382a:	0000      	.short	0x0000
    382c:	200000d0 	.word	0x200000d0
    3830:	4804      	ldr	r0, [pc, #16]	; (3844 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x26c>)
    3832:	6840      	ldr	r0, [r0, #4]
    3834:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    3838:	2803      	cmp	r0, #3
    383a:	d001      	beq.n	3840 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    383c:	2000      	movs	r0, #0
    383e:	4770      	bx	lr
    3840:	2001      	movs	r0, #1
    3842:	4770      	bx	lr
    3844:	200000d0 	.word	0x200000d0
    3848:	7c82      	ldrb	r2, [r0, #18]
    384a:	6883      	ldr	r3, [r0, #8]
    384c:	4803      	ldr	r0, [pc, #12]	; (385c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x284>)
    384e:	6841      	ldr	r1, [r0, #4]
    3850:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    3854:	314a      	adds	r1, #74	; 0x4a
    3856:	f00a b81a 	b.w	d88e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    385a:	0000      	.short	0x0000
    385c:	200000d0 	.word	0x200000d0
    3860:	b570      	push	{r4, r5, r6, lr}
    3862:	6841      	ldr	r1, [r0, #4]
    3864:	461e      	mov	r6, r3
    3866:	4604      	mov	r4, r0
    3868:	b1c1      	cbz	r1, 389c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c4>
    386a:	7c60      	ldrb	r0, [r4, #17]
    386c:	f00a ff61 	bl	e732 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    3870:	4d10      	ldr	r5, [pc, #64]	; (38b4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2dc>)
    3872:	6869      	ldr	r1, [r5, #4]
    3874:	f891 107c 	ldrb.w	r1, [r1, #124]	; 0x7c
    3878:	b141      	cbz	r1, 388c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2b4>
    387a:	b138      	cbz	r0, 388c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2b4>
    387c:	f00a f8b9 	bl	d9f2 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    3880:	6869      	ldr	r1, [r5, #4]
    3882:	f801 0f78 	strb.w	r0, [r1, #120]!
    3886:	7048      	strb	r0, [r1, #1]
    3888:	2001      	movs	r0, #1
    388a:	71c8      	strb	r0, [r1, #7]
    388c:	686b      	ldr	r3, [r5, #4]
    388e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
    3892:	28ff      	cmp	r0, #255	; 0xff
    3894:	d004      	beq.n	38a0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c8>
    3896:	f7fe fcdb 	bl	2250 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    389a:	7030      	strb	r0, [r6, #0]
    389c:	2000      	movs	r0, #0
    389e:	bd70      	pop	{r4, r5, r6, pc}
    38a0:	7c60      	ldrb	r0, [r4, #17]
    38a2:	4632      	mov	r2, r6
    38a4:	3378      	adds	r3, #120	; 0x78
    38a6:	6861      	ldr	r1, [r4, #4]
    38a8:	f7fe fcea 	bl	2280 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>
    38ac:	f080 0001 	eor.w	r0, r0, #1
    38b0:	bd70      	pop	{r4, r5, r6, pc}
    38b2:	0000      	.short	0x0000
    38b4:	200000d0 	.word	0x200000d0
    38b8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    38bc:	4c40      	ldr	r4, [pc, #256]	; (39c0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3e8>)
    38be:	2500      	movs	r5, #0
    38c0:	466f      	mov	r7, sp
    38c2:	6860      	ldr	r0, [r4, #4]
    38c4:	7245      	strb	r5, [r0, #9]
    38c6:	6d41      	ldr	r1, [r0, #84]	; 0x54
    38c8:	880a      	ldrh	r2, [r1, #0]
    38ca:	8142      	strh	r2, [r0, #10]
    38cc:	6908      	ldr	r0, [r1, #16]
    38ce:	f00a f8fc 	bl	daca <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    38d2:	6861      	ldr	r1, [r4, #4]
    38d4:	f821 0f20 	strh.w	r0, [r1, #32]!
    38d8:	6b48      	ldr	r0, [r1, #52]	; 0x34
    38da:	8b02      	ldrh	r2, [r0, #24]
    38dc:	804a      	strh	r2, [r1, #2]
    38de:	8b40      	ldrh	r0, [r0, #26]
    38e0:	8088      	strh	r0, [r1, #4]
    38e2:	718d      	strb	r5, [r1, #6]
    38e4:	20ff      	movs	r0, #255	; 0xff
    38e6:	71c8      	strb	r0, [r1, #7]
    38e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
    38ec:	8108      	strh	r0, [r1, #8]
    38ee:	4669      	mov	r1, sp
    38f0:	68a0      	ldr	r0, [r4, #8]
    38f2:	f00a fb24 	bl	df3e <sym_SKY6LLKHYM3MTKIUASL3OKO4LAKLVGGKKAJ3I2Y>
    38f6:	68a0      	ldr	r0, [r4, #8]
    38f8:	7800      	ldrb	r0, [r0, #0]
    38fa:	f3c0 1680 	ubfx	r6, r0, #6, #1
    38fe:	6860      	ldr	r0, [r4, #4]
    3900:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3904:	b120      	cbz	r0, 3910 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x338>
    3906:	4639      	mov	r1, r7
    3908:	4630      	mov	r0, r6
    390a:	f00a ff12 	bl	e732 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    390e:	b940      	cbnz	r0, 3922 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34a>
    3910:	6860      	ldr	r0, [r4, #4]
    3912:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
    3916:	b158      	cbz	r0, 3930 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x358>
    3918:	4639      	mov	r1, r7
    391a:	4630      	mov	r0, r6
    391c:	f00a ff00 	bl	e720 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x90>
    3920:	b130      	cbz	r0, 3930 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x358>
    3922:	6860      	ldr	r0, [r4, #4]
    3924:	9900      	ldr	r1, [sp, #0]
    3926:	6141      	str	r1, [r0, #20]
    3928:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    392c:	8301      	strh	r1, [r0, #24]
    392e:	e002      	b.n	3936 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x35e>
    3930:	6860      	ldr	r0, [r4, #4]
    3932:	6145      	str	r5, [r0, #20]
    3934:	8305      	strh	r5, [r0, #24]
    3936:	6861      	ldr	r1, [r4, #4]
    3938:	f891 0079 	ldrb.w	r0, [r1, #121]	; 0x79
    393c:	28ff      	cmp	r0, #255	; 0xff
    393e:	d017      	beq.n	3970 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x398>
    3940:	f101 020e 	add.w	r2, r1, #14
    3944:	310d      	adds	r1, #13
    3946:	f7fe fc69 	bl	221c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    394a:	b160      	cbz	r0, 3966 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38e>
    394c:	6860      	ldr	r0, [r4, #4]
    394e:	7b41      	ldrb	r1, [r0, #13]
    3950:	f041 0102 	orr.w	r1, r1, #2
    3954:	7341      	strb	r1, [r0, #13]
    3956:	f8d0 1082 	ldr.w	r1, [r0, #130]	; 0x82
    395a:	f8c0 101a 	str.w	r1, [r0, #26]
    395e:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
    3962:	83c1      	strh	r1, [r0, #30]
    3964:	e010      	b.n	3988 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3b0>
    3966:	f241 5197 	movw	r1, #5527	; 0x1597
    396a:	2032      	movs	r0, #50	; 0x32
    396c:	f7fd f87a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3970:	f891 0089 	ldrb.w	r0, [r1, #137]	; 0x89
    3974:	7348      	strb	r0, [r1, #13]
    3976:	f8d1 0082 	ldr.w	r0, [r1, #130]	; 0x82
    397a:	f841 0f0e 	str.w	r0, [r1, #14]!
    397e:	f8b1 0078 	ldrh.w	r0, [r1, #120]	; 0x78
    3982:	8088      	strh	r0, [r1, #4]
    3984:	60cd      	str	r5, [r1, #12]
    3986:	820d      	strh	r5, [r1, #16]
    3988:	6860      	ldr	r0, [r4, #4]
    398a:	6d42      	ldr	r2, [r0, #84]	; 0x54
    398c:	f890 105e 	ldrb.w	r1, [r0, #94]	; 0x5e
    3990:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
    3994:	2212      	movs	r2, #18
    3996:	490b      	ldr	r1, [pc, #44]	; (39c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3ec>)
    3998:	f00a fbc1 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    399c:	6860      	ldr	r0, [r4, #4]
    399e:	6d41      	ldr	r1, [r0, #84]	; 0x54
    39a0:	302a      	adds	r0, #42	; 0x2a
    39a2:	880a      	ldrh	r2, [r1, #0]
    39a4:	4908      	ldr	r1, [pc, #32]	; (39c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3f0>)
    39a6:	868a      	strh	r2, [r1, #52]	; 0x34
    39a8:	6d4a      	ldr	r2, [r1, #84]	; 0x54
    39aa:	f892 20ad 	ldrb.w	r2, [r2, #173]	; 0xad
    39ae:	f881 2036 	strb.w	r2, [r1, #54]	; 0x36
    39b2:	2206      	movs	r2, #6
    39b4:	4905      	ldr	r1, [pc, #20]	; (39cc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3f4>)
    39b6:	f00a fbc6 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    39ba:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    39be:	0000      	.short	0x0000
    39c0:	200000d0 	.word	0x200000d0
    39c4:	000036b5 	.word	0x000036b5
    39c8:	20000bd8 	.word	0x20000bd8
    39cc:	00003639 	.word	0x00003639
    39d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    39d4:	4c4c      	ldr	r4, [pc, #304]	; (3b08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x530>)
    39d6:	4606      	mov	r6, r0
    39d8:	2100      	movs	r1, #0
    39da:	e9d4 5001 	ldrd	r5, r0, [r4, #4]
    39de:	3570      	adds	r5, #112	; 0x70
    39e0:	8001      	strh	r1, [r0, #0]
    39e2:	2e03      	cmp	r6, #3
    39e4:	d002      	beq.n	39ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x414>
    39e6:	2e05      	cmp	r6, #5
    39e8:	d004      	beq.n	39f4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x41c>
    39ea:	e051      	b.n	3a90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4b8>
    39ec:	2103      	movs	r1, #3
    39ee:	f00a fabd 	bl	df6c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    39f2:	e04d      	b.n	3a90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4b8>
    39f4:	2105      	movs	r1, #5
    39f6:	f00a fab9 	bl	df6c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    39fa:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    39fe:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3a00:	6949      	ldr	r1, [r1, #20]
    3a02:	f8c7 100f 	str.w	r1, [r7, #15]
    3a06:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3a08:	69c9      	ldr	r1, [r1, #28]
    3a0a:	74f9      	strb	r1, [r7, #19]
    3a0c:	0a0a      	lsrs	r2, r1, #8
    3a0e:	753a      	strb	r2, [r7, #20]
    3a10:	0c09      	lsrs	r1, r1, #16
    3a12:	7579      	strb	r1, [r7, #21]
    3a14:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3a16:	6901      	ldr	r1, [r0, #16]
    3a18:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    3a1a:	f00a f9dd 	bl	ddd8 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    3a1e:	75b8      	strb	r0, [r7, #22]
    3a20:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    3a24:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3a26:	6901      	ldr	r1, [r0, #16]
    3a28:	6a00      	ldr	r0, [r0, #32]
    3a2a:	f00a f9be 	bl	ddaa <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    3a2e:	75f8      	strb	r0, [r7, #23]
    3a30:	0a00      	lsrs	r0, r0, #8
    3a32:	7638      	strb	r0, [r7, #24]
    3a34:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    3a38:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3a3a:	6900      	ldr	r0, [r0, #16]
    3a3c:	f00a f845 	bl	daca <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    3a40:	7678      	strb	r0, [r7, #25]
    3a42:	0a00      	lsrs	r0, r0, #8
    3a44:	76b8      	strb	r0, [r7, #26]
    3a46:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    3a4a:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3a4c:	8b09      	ldrh	r1, [r1, #24]
    3a4e:	f807 1f1b 	strb.w	r1, [r7, #27]!
    3a52:	0a09      	lsrs	r1, r1, #8
    3a54:	7079      	strb	r1, [r7, #1]
    3a56:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3a58:	8b49      	ldrh	r1, [r1, #26]
    3a5a:	70b9      	strb	r1, [r7, #2]
    3a5c:	0a09      	lsrs	r1, r1, #8
    3a5e:	70f9      	strb	r1, [r7, #3]
    3a60:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3a62:	f851 2fae 	ldr.w	r2, [r1, #174]!
    3a66:	607a      	str	r2, [r7, #4]
    3a68:	7909      	ldrb	r1, [r1, #4]
    3a6a:	7239      	strb	r1, [r7, #8]
    3a6c:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3a6e:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
    3a72:	7a78      	ldrb	r0, [r7, #9]
    3a74:	f001 011f 	and.w	r1, r1, #31
    3a78:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
    3a7c:	4308      	orrs	r0, r1
    3a7e:	7278      	strb	r0, [r7, #9]
    3a80:	f003 fefa 	bl	7878 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
    3a84:	7a79      	ldrb	r1, [r7, #9]
    3a86:	f001 011f 	and.w	r1, r1, #31
    3a8a:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
    3a8e:	7279      	strb	r1, [r7, #9]
    3a90:	f105 0112 	add.w	r1, r5, #18
    3a94:	68a0      	ldr	r0, [r4, #8]
    3a96:	f00a fa84 	bl	dfa2 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    3a9a:	7e69      	ldrb	r1, [r5, #25]
    3a9c:	68a0      	ldr	r0, [r4, #8]
    3a9e:	f00a fa86 	bl	dfae <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    3aa2:	6860      	ldr	r0, [r4, #4]
    3aa4:	f100 054a 	add.w	r5, r0, #74	; 0x4a
    3aa8:	f890 7049 	ldrb.w	r7, [r0, #73]	; 0x49
    3aac:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3ab0:	b188      	cbz	r0, 3ad6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4fe>
    3ab2:	f7ff febd 	bl	3830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    3ab6:	b130      	cbz	r0, 3ac6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ee>
    3ab8:	6860      	ldr	r0, [r4, #4]
    3aba:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
    3abe:	b111      	cbz	r1, 3ac6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ee>
    3ac0:	f890 007b 	ldrb.w	r0, [r0, #123]	; 0x7b
    3ac4:	e002      	b.n	3acc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4f4>
    3ac6:	6860      	ldr	r0, [r4, #4]
    3ac8:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    3acc:	f7fe fb78 	bl	21c0 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>
    3ad0:	b108      	cbz	r0, 3ad6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4fe>
    3ad2:	2701      	movs	r7, #1
    3ad4:	4605      	mov	r5, r0
    3ad6:	4629      	mov	r1, r5
    3ad8:	68a0      	ldr	r0, [r4, #8]
    3ada:	f00a fa6f 	bl	dfbc <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    3ade:	4639      	mov	r1, r7
    3ae0:	68a0      	ldr	r0, [r4, #8]
    3ae2:	f00a fa71 	bl	dfc8 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    3ae6:	68a0      	ldr	r0, [r4, #8]
    3ae8:	f004 fb0c 	bl	8104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    3aec:	2e05      	cmp	r6, #5
    3aee:	d108      	bne.n	3b02 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x52a>
    3af0:	6860      	ldr	r0, [r4, #4]
    3af2:	682a      	ldr	r2, [r5, #0]
    3af4:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3af6:	f8c1 200a 	str.w	r2, [r1, #10]
    3afa:	88aa      	ldrh	r2, [r5, #4]
    3afc:	81ca      	strh	r2, [r1, #14]
    3afe:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3b00:	7247      	strb	r7, [r0, #9]
    3b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b06:	0000      	.short	0x0000
    3b08:	200000d0 	.word	0x200000d0
    3b0c:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    3b10:	4f65      	ldr	r7, [pc, #404]	; (3ca8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6d0>)
    3b12:	4604      	mov	r4, r0
    3b14:	6878      	ldr	r0, [r7, #4]
    3b16:	f890 8081 	ldrb.w	r8, [r0, #129]	; 0x81
    3b1a:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3b1e:	b180      	cbz	r0, 3b42 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x56a>
    3b20:	2600      	movs	r6, #0
    3b22:	2500      	movs	r5, #0
    3b24:	7ca0      	ldrb	r0, [r4, #18]
    3b26:	68a1      	ldr	r1, [r4, #8]
    3b28:	f00a fe03 	bl	e732 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    3b2c:	4682      	mov	sl, r0
    3b2e:	f7ff fe7f 	bl	3830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    3b32:	b140      	cbz	r0, 3b46 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x56e>
    3b34:	6878      	ldr	r0, [r7, #4]
    3b36:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
    3b3a:	b121      	cbz	r1, 3b46 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x56e>
    3b3c:	f890 007b 	ldrb.w	r0, [r0, #123]	; 0x7b
    3b40:	e004      	b.n	3b4c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x574>
    3b42:	2601      	movs	r6, #1
    3b44:	e7ed      	b.n	3b22 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x54a>
    3b46:	6878      	ldr	r0, [r7, #4]
    3b48:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    3b4c:	4683      	mov	fp, r0
    3b4e:	f7fe fae9 	bl	2124 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    3b52:	ea5f 0900 	movs.w	r9, r0
    3b56:	d00c      	beq.n	3b72 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x59a>
    3b58:	4658      	mov	r0, fp
    3b5a:	f7fe fad7 	bl	210c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    3b5e:	b100      	cbz	r0, 3b62 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x58a>
    3b60:	2601      	movs	r6, #1
    3b62:	f1ba 0f00 	cmp.w	sl, #0
    3b66:	d004      	beq.n	3b72 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x59a>
    3b68:	4648      	mov	r0, r9
    3b6a:	68a1      	ldr	r1, [r4, #8]
    3b6c:	f009 fef4 	bl	d958 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>
    3b70:	4605      	mov	r5, r0
    3b72:	6878      	ldr	r0, [r7, #4]
    3b74:	46b9      	mov	r9, r7
    3b76:	f890 7049 	ldrb.w	r7, [r0, #73]	; 0x49
    3b7a:	b10d      	cbz	r5, 3b80 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a8>
    3b7c:	f047 0702 	orr.w	r7, r7, #2
    3b80:	f7ff fe56 	bl	3830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    3b84:	b3a0      	cbz	r0, 3bf0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x618>
    3b86:	6860      	ldr	r0, [r4, #4]
    3b88:	f8d9 1004 	ldr.w	r1, [r9, #4]
    3b8c:	7802      	ldrb	r2, [r0, #0]
    3b8e:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
    3b92:	429a      	cmp	r2, r3
    3b94:	d11f      	bne.n	3bd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5fe>
    3b96:	7842      	ldrb	r2, [r0, #1]
    3b98:	f891 3061 	ldrb.w	r3, [r1, #97]	; 0x61
    3b9c:	429a      	cmp	r2, r3
    3b9e:	d11a      	bne.n	3bd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5fe>
    3ba0:	7882      	ldrb	r2, [r0, #2]
    3ba2:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    3ba6:	429a      	cmp	r2, r3
    3ba8:	d115      	bne.n	3bd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5fe>
    3baa:	78c2      	ldrb	r2, [r0, #3]
    3bac:	f891 3063 	ldrb.w	r3, [r1, #99]	; 0x63
    3bb0:	429a      	cmp	r2, r3
    3bb2:	d110      	bne.n	3bd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5fe>
    3bb4:	7902      	ldrb	r2, [r0, #4]
    3bb6:	f891 3064 	ldrb.w	r3, [r1, #100]	; 0x64
    3bba:	429a      	cmp	r2, r3
    3bbc:	d10b      	bne.n	3bd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5fe>
    3bbe:	7940      	ldrb	r0, [r0, #5]
    3bc0:	f891 2065 	ldrb.w	r2, [r1, #101]	; 0x65
    3bc4:	4290      	cmp	r0, r2
    3bc6:	d106      	bne.n	3bd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5fe>
    3bc8:	7c60      	ldrb	r0, [r4, #17]
    3bca:	f891 105f 	ldrb.w	r1, [r1, #95]	; 0x5f
    3bce:	4288      	cmp	r0, r1
    3bd0:	d101      	bne.n	3bd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5fe>
    3bd2:	2001      	movs	r0, #1
    3bd4:	e000      	b.n	3bd8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x600>
    3bd6:	2000      	movs	r0, #0
    3bd8:	4f34      	ldr	r7, [pc, #208]	; (3cac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6d4>)
    3bda:	4682      	mov	sl, r0
    3bdc:	f897 0078 	ldrb.w	r0, [r7, #120]	; 0x78
    3be0:	2808      	cmp	r0, #8
    3be2:	d006      	beq.n	3bf2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x61a>
    3be4:	f897 107b 	ldrb.w	r1, [r7, #123]	; 0x7b
    3be8:	4288      	cmp	r0, r1
    3bea:	d102      	bne.n	3bf2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x61a>
    3bec:	2001      	movs	r0, #1
    3bee:	e001      	b.n	3bf4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x61c>
    3bf0:	e021      	b.n	3c36 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x65e>
    3bf2:	2000      	movs	r0, #0
    3bf4:	4681      	mov	r9, r0
    3bf6:	b925      	cbnz	r5, 3c02 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x62a>
    3bf8:	b12e      	cbz	r6, 3c06 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x62e>
    3bfa:	4620      	mov	r0, r4
    3bfc:	f7ff fe24 	bl	3848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x270>
    3c00:	b108      	cbz	r0, 3c06 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x62e>
    3c02:	2001      	movs	r0, #1
    3c04:	e000      	b.n	3c08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x630>
    3c06:	2000      	movs	r0, #0
    3c08:	f1b8 0f00 	cmp.w	r8, #0
    3c0c:	d009      	beq.n	3c22 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x64a>
    3c0e:	f897 105a 	ldrb.w	r1, [r7, #90]	; 0x5a
    3c12:	2901      	cmp	r1, #1
    3c14:	d003      	beq.n	3c1e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x646>
    3c16:	b921      	cbnz	r1, 3c22 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x64a>
    3c18:	ea5a 0109 	orrs.w	r1, sl, r9
    3c1c:	d001      	beq.n	3c22 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x64a>
    3c1e:	2101      	movs	r1, #1
    3c20:	e000      	b.n	3c24 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x64c>
    3c22:	2100      	movs	r1, #0
    3c24:	4208      	tst	r0, r1
    3c26:	d003      	beq.n	3c30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x658>
    3c28:	200c      	movs	r0, #12
    3c2a:	b004      	add	sp, #16
    3c2c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    3c30:	f004 f83e 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3c34:	e036      	b.n	3ca4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6cc>
    3c36:	f004 f83b 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3c3a:	f1b8 0f00 	cmp.w	r8, #0
    3c3e:	d031      	beq.n	3ca4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6cc>
    3c40:	4620      	mov	r0, r4
    3c42:	f7ff fe01 	bl	3848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x270>
    3c46:	b900      	cbnz	r0, 3c4a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x672>
    3c48:	b175      	cbz	r5, 3c68 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x690>
    3c4a:	a803      	add	r0, sp, #12
    3c4c:	f000 f97c 	bl	3f48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    3c50:	f8d9 2004 	ldr.w	r2, [r9, #4]
    3c54:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3c58:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3c5c:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3c60:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3c64:	463b      	mov	r3, r7
    3c66:	e018      	b.n	3c9a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6c2>
    3c68:	f8d9 0004 	ldr.w	r0, [r9, #4]
    3c6c:	464d      	mov	r5, r9
    3c6e:	f890 0059 	ldrb.w	r0, [r0, #89]	; 0x59
    3c72:	2803      	cmp	r0, #3
    3c74:	d001      	beq.n	3c7a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6a2>
    3c76:	2802      	cmp	r0, #2
    3c78:	d114      	bne.n	3ca4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6cc>
    3c7a:	f1ba 0f00 	cmp.w	sl, #0
    3c7e:	d011      	beq.n	3ca4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6cc>
    3c80:	a803      	add	r0, sp, #12
    3c82:	f000 f961 	bl	3f48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    3c86:	686a      	ldr	r2, [r5, #4]
    3c88:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3c8c:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3c90:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3c94:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3c98:	23fe      	movs	r3, #254	; 0xfe
    3c9a:	2101      	movs	r1, #1
    3c9c:	4620      	mov	r0, r4
    3c9e:	324a      	adds	r2, #74	; 0x4a
    3ca0:	f00a fdce 	bl	e840 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3ca4:	2005      	movs	r0, #5
    3ca6:	e7c0      	b.n	3c2a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x652>
    3ca8:	200000d0 	.word	0x200000d0
    3cac:	20000bd8 	.word	0x20000bd8
    3cb0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    3cb2:	4c3f      	ldr	r4, [pc, #252]	; (3db0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7d8>)
    3cb4:	4605      	mov	r5, r0
    3cb6:	6860      	ldr	r0, [r4, #4]
    3cb8:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    3cbc:	2900      	cmp	r1, #0
    3cbe:	d06c      	beq.n	3d9a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c2>
    3cc0:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    3cc4:	2802      	cmp	r0, #2
    3cc6:	d02c      	beq.n	3d22 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x74a>
    3cc8:	2801      	cmp	r0, #1
    3cca:	d043      	beq.n	3d54 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x77c>
    3ccc:	f7ff fdb0 	bl	3830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    3cd0:	2800      	cmp	r0, #0
    3cd2:	d067      	beq.n	3da4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7cc>
    3cd4:	686a      	ldr	r2, [r5, #4]
    3cd6:	6861      	ldr	r1, [r4, #4]
    3cd8:	7810      	ldrb	r0, [r2, #0]
    3cda:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
    3cde:	4298      	cmp	r0, r3
    3ce0:	d14c      	bne.n	3d7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a4>
    3ce2:	7850      	ldrb	r0, [r2, #1]
    3ce4:	f891 3061 	ldrb.w	r3, [r1, #97]	; 0x61
    3ce8:	4298      	cmp	r0, r3
    3cea:	d147      	bne.n	3d7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a4>
    3cec:	7890      	ldrb	r0, [r2, #2]
    3cee:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    3cf2:	4298      	cmp	r0, r3
    3cf4:	d142      	bne.n	3d7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a4>
    3cf6:	78d0      	ldrb	r0, [r2, #3]
    3cf8:	f891 3063 	ldrb.w	r3, [r1, #99]	; 0x63
    3cfc:	4298      	cmp	r0, r3
    3cfe:	d13d      	bne.n	3d7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a4>
    3d00:	7910      	ldrb	r0, [r2, #4]
    3d02:	f891 3064 	ldrb.w	r3, [r1, #100]	; 0x64
    3d06:	4298      	cmp	r0, r3
    3d08:	d138      	bne.n	3d7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a4>
    3d0a:	7950      	ldrb	r0, [r2, #5]
    3d0c:	f891 2065 	ldrb.w	r2, [r1, #101]	; 0x65
    3d10:	4290      	cmp	r0, r2
    3d12:	d133      	bne.n	3d7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a4>
    3d14:	7c68      	ldrb	r0, [r5, #17]
    3d16:	f891 205f 	ldrb.w	r2, [r1, #95]	; 0x5f
    3d1a:	4290      	cmp	r0, r2
    3d1c:	d12e      	bne.n	3d7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a4>
    3d1e:	2001      	movs	r0, #1
    3d20:	e02d      	b.n	3d7e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a6>
    3d22:	a803      	add	r0, sp, #12
    3d24:	f000 f910 	bl	3f48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    3d28:	6862      	ldr	r2, [r4, #4]
    3d2a:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3d2e:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3d32:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3d36:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3d3a:	23ff      	movs	r3, #255	; 0xff
    3d3c:	2100      	movs	r1, #0
    3d3e:	4628      	mov	r0, r5
    3d40:	324a      	adds	r2, #74	; 0x4a
    3d42:	f00a fd7d 	bl	e840 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3d46:	6861      	ldr	r1, [r4, #4]
    3d48:	2001      	movs	r0, #1
    3d4a:	f881 0098 	strb.w	r0, [r1, #152]	; 0x98
    3d4e:	200b      	movs	r0, #11
    3d50:	b004      	add	sp, #16
    3d52:	bd70      	pop	{r4, r5, r6, pc}
    3d54:	a803      	add	r0, sp, #12
    3d56:	f000 f8f7 	bl	3f48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    3d5a:	6862      	ldr	r2, [r4, #4]
    3d5c:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3d60:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3d64:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3d68:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3d6c:	23ff      	movs	r3, #255	; 0xff
    3d6e:	2100      	movs	r1, #0
    3d70:	4628      	mov	r0, r5
    3d72:	324a      	adds	r2, #74	; 0x4a
    3d74:	f00a fd64 	bl	e840 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3d78:	2005      	movs	r0, #5
    3d7a:	e7e9      	b.n	3d50 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x778>
    3d7c:	2000      	movs	r0, #0
    3d7e:	f891 105a 	ldrb.w	r1, [r1, #90]	; 0x5a
    3d82:	2901      	cmp	r1, #1
    3d84:	d00c      	beq.n	3da0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c8>
    3d86:	b958      	cbnz	r0, 3da0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c8>
    3d88:	490a      	ldr	r1, [pc, #40]	; (3db4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7dc>)
    3d8a:	f891 007b 	ldrb.w	r0, [r1, #123]	; 0x7b
    3d8e:	2808      	cmp	r0, #8
    3d90:	d003      	beq.n	3d9a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c2>
    3d92:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
    3d96:	4281      	cmp	r1, r0
    3d98:	d002      	beq.n	3da0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c8>
    3d9a:	f003 ff89 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3d9e:	e7eb      	b.n	3d78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a0>
    3da0:	200c      	movs	r0, #12
    3da2:	e7d5      	b.n	3d50 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x778>
    3da4:	f640 61df 	movw	r1, #3807	; 0xedf
    3da8:	2032      	movs	r0, #50	; 0x32
    3daa:	f7fc fe5b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3dae:	0000      	.short	0x0000
    3db0:	200000d0 	.word	0x200000d0
    3db4:	20000bd8 	.word	0x20000bd8
    3db8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    3dba:	4c1e      	ldr	r4, [pc, #120]	; (3e34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x85c>)
    3dbc:	4605      	mov	r5, r0
    3dbe:	6860      	ldr	r0, [r4, #4]
    3dc0:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    3dc4:	b129      	cbz	r1, 3dd2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7fa>
    3dc6:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    3dca:	2802      	cmp	r0, #2
    3dcc:	d004      	beq.n	3dd8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x800>
    3dce:	2801      	cmp	r0, #1
    3dd0:	d01b      	beq.n	3e0a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x832>
    3dd2:	f003 ff6d 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3dd6:	e02a      	b.n	3e2e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x856>
    3dd8:	a803      	add	r0, sp, #12
    3dda:	f000 f8b5 	bl	3f48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    3dde:	6862      	ldr	r2, [r4, #4]
    3de0:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3de4:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3de8:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3dec:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3df0:	23ff      	movs	r3, #255	; 0xff
    3df2:	2106      	movs	r1, #6
    3df4:	4628      	mov	r0, r5
    3df6:	324a      	adds	r2, #74	; 0x4a
    3df8:	f00a fd22 	bl	e840 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3dfc:	6862      	ldr	r2, [r4, #4]
    3dfe:	200b      	movs	r0, #11
    3e00:	2100      	movs	r1, #0
    3e02:	f882 1098 	strb.w	r1, [r2, #152]	; 0x98
    3e06:	b004      	add	sp, #16
    3e08:	bd70      	pop	{r4, r5, r6, pc}
    3e0a:	a803      	add	r0, sp, #12
    3e0c:	f000 f89c 	bl	3f48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    3e10:	6862      	ldr	r2, [r4, #4]
    3e12:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3e16:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3e1a:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3e1e:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3e22:	23ff      	movs	r3, #255	; 0xff
    3e24:	2106      	movs	r1, #6
    3e26:	4628      	mov	r0, r5
    3e28:	324a      	adds	r2, #74	; 0x4a
    3e2a:	f00a fd09 	bl	e840 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3e2e:	2005      	movs	r0, #5
    3e30:	e7e9      	b.n	3e06 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x82e>
    3e32:	0000      	.short	0x0000
    3e34:	200000d0 	.word	0x200000d0
    3e38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    3e3a:	b389      	cbz	r1, 3ea0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c8>
    3e3c:	2901      	cmp	r1, #1
    3e3e:	d034      	beq.n	3eaa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8d2>
    3e40:	2505      	movs	r5, #5
    3e42:	2902      	cmp	r1, #2
    3e44:	d004      	beq.n	3e50 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x878>
    3e46:	2906      	cmp	r1, #6
    3e48:	d025      	beq.n	3e96 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8be>
    3e4a:	f003 ff31 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3e4e:	e01f      	b.n	3e90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8b8>
    3e50:	4606      	mov	r6, r0
    3e52:	f003 ff2d 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3e56:	4c17      	ldr	r4, [pc, #92]	; (3eb4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8dc>)
    3e58:	6860      	ldr	r0, [r4, #4]
    3e5a:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    3e5e:	b1b9      	cbz	r1, 3e90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8b8>
    3e60:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    3e64:	2801      	cmp	r0, #1
    3e66:	d001      	beq.n	3e6c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x894>
    3e68:	2802      	cmp	r0, #2
    3e6a:	d111      	bne.n	3e90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8b8>
    3e6c:	a803      	add	r0, sp, #12
    3e6e:	f000 f86b 	bl	3f48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    3e72:	6862      	ldr	r2, [r4, #4]
    3e74:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3e78:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3e7c:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3e80:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3e84:	23ff      	movs	r3, #255	; 0xff
    3e86:	2102      	movs	r1, #2
    3e88:	4630      	mov	r0, r6
    3e8a:	324a      	adds	r2, #74	; 0x4a
    3e8c:	f00a fcd8 	bl	e840 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3e90:	b004      	add	sp, #16
    3e92:	4628      	mov	r0, r5
    3e94:	bd70      	pop	{r4, r5, r6, pc}
    3e96:	b004      	add	sp, #16
    3e98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3e9c:	f7ff bf8c 	b.w	3db8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7e0>
    3ea0:	b004      	add	sp, #16
    3ea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3ea6:	f7ff bf03 	b.w	3cb0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6d8>
    3eaa:	b004      	add	sp, #16
    3eac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3eb0:	f7ff be2c 	b.w	3b0c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x534>
    3eb4:	200000d0 	.word	0x200000d0
    3eb8:	b570      	push	{r4, r5, r6, lr}
    3eba:	4c11      	ldr	r4, [pc, #68]	; (3f00 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x928>)
    3ebc:	4605      	mov	r5, r0
    3ebe:	6861      	ldr	r1, [r4, #4]
    3ec0:	f891 005d 	ldrb.w	r0, [r1, #93]	; 0x5d
    3ec4:	2800      	cmp	r0, #0
    3ec6:	d019      	beq.n	3efc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x924>
    3ec8:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    3ecc:	2800      	cmp	r0, #0
    3ece:	d015      	beq.n	3efc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x924>
    3ed0:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    3ed4:	314a      	adds	r1, #74	; 0x4a
    3ed6:	f00a fc2c 	bl	e732 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    3eda:	b140      	cbz	r0, 3eee <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x916>
    3edc:	f7fe f8ec 	bl	20b8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    3ee0:	6861      	ldr	r1, [r4, #4]
    3ee2:	462a      	mov	r2, r5
    3ee4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3ee8:	314a      	adds	r1, #74	; 0x4a
    3eea:	f009 bd00 	b.w	d8ee <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    3eee:	6860      	ldr	r0, [r4, #4]
    3ef0:	4629      	mov	r1, r5
    3ef2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3ef6:	304a      	adds	r0, #74	; 0x4a
    3ef8:	f009 bce8 	b.w	d8cc <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    3efc:	bd70      	pop	{r4, r5, r6, pc}
    3efe:	0000      	.short	0x0000
    3f00:	200000d0 	.word	0x200000d0
    3f04:	4602      	mov	r2, r0
    3f06:	480b      	ldr	r0, [pc, #44]	; (3f34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x95c>)
    3f08:	b082      	sub	sp, #8
    3f0a:	6840      	ldr	r0, [r0, #4]
    3f0c:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    3f10:	f88d 1000 	strb.w	r1, [sp]
    3f14:	9900      	ldr	r1, [sp, #0]
    3f16:	9100      	str	r1, [sp, #0]
    3f18:	f89d 1000 	ldrb.w	r1, [sp]
    3f1c:	2900      	cmp	r1, #0
    3f1e:	d107      	bne.n	3f30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x958>
    3f20:	6e81      	ldr	r1, [r0, #104]	; 0x68
    3f22:	2900      	cmp	r1, #0
    3f24:	d004      	beq.n	3f30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x958>
    3f26:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
    3f2a:	b002      	add	sp, #8
    3f2c:	f007 b912 	b.w	b154 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    3f30:	b002      	add	sp, #8
    3f32:	4770      	bx	lr
    3f34:	200000d0 	.word	0x200000d0
    3f38:	b510      	push	{r4, lr}
    3f3a:	f7fe fb9d 	bl	2678 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    3f3e:	4901      	ldr	r1, [pc, #4]	; (3f44 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x96c>)
    3f40:	7008      	strb	r0, [r1, #0]
    3f42:	bd10      	pop	{r4, pc}
    3f44:	200000d0 	.word	0x200000d0
    3f48:	4a07      	ldr	r2, [pc, #28]	; (3f68 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x990>)
    3f4a:	b510      	push	{r4, lr}
    3f4c:	f992 1000 	ldrsb.w	r1, [r2]
    3f50:	297f      	cmp	r1, #127	; 0x7f
    3f52:	d003      	beq.n	3f5c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x984>
    3f54:	7001      	strb	r1, [r0, #0]
    3f56:	207f      	movs	r0, #127	; 0x7f
    3f58:	7010      	strb	r0, [r2, #0]
    3f5a:	bd10      	pop	{r4, pc}
    3f5c:	f44f 6189 	mov.w	r1, #1096	; 0x448
    3f60:	2032      	movs	r0, #50	; 0x32
    3f62:	f7fc fd7f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f66:	0000      	.short	0x0000
    3f68:	200000d0 	.word	0x200000d0
    3f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f70:	4607      	mov	r7, r0
    3f72:	f7fd f971 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    3f76:	4604      	mov	r4, r0
    3f78:	f7fd f974 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    3f7c:	4621      	mov	r1, r4
    3f7e:	f00a fc3a 	bl	e7f6 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    3f82:	0005      	movs	r5, r0
    3f84:	d012      	beq.n	3fac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9d4>
    3f86:	4c2d      	ldr	r4, [pc, #180]	; (403c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3c>)
    3f88:	6860      	ldr	r0, [r4, #4]
    3f8a:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    3f8e:	2801      	cmp	r0, #1
    3f90:	d004      	beq.n	3f9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c4>
    3f92:	2802      	cmp	r0, #2
    3f94:	d002      	beq.n	3f9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c4>
    3f96:	f7ff fc4b 	bl	3830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    3f9a:	b150      	cbz	r0, 3fb2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9da>
    3f9c:	f06f 0613 	mvn.w	r6, #19
    3fa0:	b33f      	cbz	r7, 3ff2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa1a>
    3fa2:	4628      	mov	r0, r5
    3fa4:	f009 ffb3 	bl	df0e <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ>
    3fa8:	b950      	cbnz	r0, 3fc0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9e8>
    3faa:	e005      	b.n	3fb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9e0>
    3fac:	f241 5142 	movw	r1, #5442	; 0x1542
    3fb0:	e03a      	b.n	4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>
    3fb2:	f241 5148 	movw	r1, #5448	; 0x1548
    3fb6:	e037      	b.n	4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>
    3fb8:	4628      	mov	r0, r5
    3fba:	f009 ffca 	bl	df52 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI>
    3fbe:	b1c0      	cbz	r0, 3ff2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa1a>
    3fc0:	6861      	ldr	r1, [r4, #4]
    3fc2:	4628      	mov	r0, r5
    3fc4:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    3fc8:	2a05      	cmp	r2, #5
    3fca:	d202      	bcs.n	3fd2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9fa>
    3fcc:	f241 41cc 	movw	r1, #5324	; 0x14cc
    3fd0:	e02a      	b.n	4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>
    3fd2:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    3fd6:	2a0b      	cmp	r2, #11
    3fd8:	d302      	bcc.n	3fe0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa08>
    3fda:	f241 41cd 	movw	r1, #5325	; 0x14cd
    3fde:	e023      	b.n	4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>
    3fe0:	68e2      	ldr	r2, [r4, #12]
    3fe2:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
    3fe6:	6952      	ldr	r2, [r2, #20]
    3fe8:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    3fec:	5851      	ldr	r1, [r2, r1]
    3fee:	4788      	blx	r1
    3ff0:	e016      	b.n	4020 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x20>
    3ff2:	6860      	ldr	r0, [r4, #4]
    3ff4:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    3ff8:	2905      	cmp	r1, #5
    3ffa:	d202      	bcs.n	4002 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2>
    3ffc:	f241 5138 	movw	r1, #5432	; 0x1538
    4000:	e012      	b.n	4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>
    4002:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    4006:	290b      	cmp	r1, #11
    4008:	d302      	bcc.n	4010 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x10>
    400a:	f241 5139 	movw	r1, #5433	; 0x1539
    400e:	e00b      	b.n	4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>
    4010:	68e1      	ldr	r1, [r4, #12]
    4012:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    4016:	6989      	ldr	r1, [r1, #24]
    4018:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    401c:	5808      	ldr	r0, [r1, r0]
    401e:	4780      	blx	r0
    4020:	280f      	cmp	r0, #15
    4022:	d304      	bcc.n	402e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2e>
    4024:	f241 515d 	movw	r1, #5469	; 0x155d
    4028:	2032      	movs	r0, #50	; 0x32
    402a:	f7fc fd1b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    402e:	68e1      	ldr	r1, [r4, #12]
    4030:	6909      	ldr	r1, [r1, #16]
    4032:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    4036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    403a:	4700      	bx	r0
    403c:	200000d0 	.word	0x200000d0
    4040:	b510      	push	{r4, lr}
    4042:	b118      	cbz	r0, 404c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4c>
    4044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4048:	f000 b922 	b.w	4290 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x290>
    404c:	2900      	cmp	r1, #0
    404e:	d01d      	beq.n	408c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8c>
    4050:	480f      	ldr	r0, [pc, #60]	; (4090 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x90>)
    4052:	6841      	ldr	r1, [r0, #4]
    4054:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    4058:	2a0b      	cmp	r2, #11
    405a:	d202      	bcs.n	4062 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x62>
    405c:	f241 6118 	movw	r1, #5656	; 0x1618
    4060:	e005      	b.n	406e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6e>
    4062:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    4066:	2a0f      	cmp	r2, #15
    4068:	d304      	bcc.n	4074 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x74>
    406a:	f241 6119 	movw	r1, #5657	; 0x1619
    406e:	2032      	movs	r0, #50	; 0x32
    4070:	f7fc fcf8 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4074:	68c0      	ldr	r0, [r0, #12]
    4076:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
    407a:	6880      	ldr	r0, [r0, #8]
    407c:	f06f 022b 	mvn.w	r2, #43	; 0x2b
    4080:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    4084:	5840      	ldr	r0, [r0, r1]
    4086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    408a:	4700      	bx	r0
    408c:	bd10      	pop	{r4, pc}
    408e:	0000      	.short	0x0000
    4090:	200000d0 	.word	0x200000d0
    4094:	b510      	push	{r4, lr}
    4096:	f7ff fabd 	bl	3614 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    409a:	f000 f907 	bl	42ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2ac>
    409e:	4805      	ldr	r0, [pc, #20]	; (40b4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb4>)
    40a0:	6881      	ldr	r1, [r0, #8]
    40a2:	2000      	movs	r0, #0
    40a4:	f7ff fc08 	bl	38b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2e0>
    40a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    40ac:	2002      	movs	r0, #2
    40ae:	f000 bae1 	b.w	4674 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA>
    40b2:	0000      	.short	0x0000
    40b4:	200000d0 	.word	0x200000d0
    40b8:	b510      	push	{r4, lr}
    40ba:	f7fd f8cd 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    40be:	4604      	mov	r4, r0
    40c0:	f7fd f8d0 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    40c4:	4621      	mov	r1, r4
    40c6:	f00a fb96 	bl	e7f6 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    40ca:	b150      	cbz	r0, 40e2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe2>
    40cc:	f004 f81a 	bl	8104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    40d0:	2000      	movs	r0, #0
    40d2:	f003 fee3 	bl	7e9c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    40d6:	4905      	ldr	r1, [pc, #20]	; (40ec <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xec>)
    40d8:	2006      	movs	r0, #6
    40da:	6849      	ldr	r1, [r1, #4]
    40dc:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    40e0:	bd10      	pop	{r4, pc}
    40e2:	f240 612b 	movw	r1, #1579	; 0x62b
    40e6:	2032      	movs	r0, #50	; 0x32
    40e8:	f7fc fcbc 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    40ec:	200000d0 	.word	0x200000d0
    40f0:	490f      	ldr	r1, [pc, #60]	; (4130 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x130>)
    40f2:	b510      	push	{r4, lr}
    40f4:	6848      	ldr	r0, [r1, #4]
    40f6:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    40fa:	2a06      	cmp	r2, #6
    40fc:	d202      	bcs.n	4104 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x104>
    40fe:	f241 6146 	movw	r1, #5702	; 0x1646
    4102:	e005      	b.n	4110 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x110>
    4104:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    4108:	2a0b      	cmp	r2, #11
    410a:	d304      	bcc.n	4116 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x116>
    410c:	f241 6147 	movw	r1, #5703	; 0x1647
    4110:	2032      	movs	r0, #50	; 0x32
    4112:	f7fc fca7 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4116:	68c9      	ldr	r1, [r1, #12]
    4118:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    411c:	68c9      	ldr	r1, [r1, #12]
    411e:	f06f 0213 	mvn.w	r2, #19
    4122:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    4126:	5808      	ldr	r0, [r1, r0]
    4128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    412c:	4700      	bx	r0
    412e:	0000      	.short	0x0000
    4130:	200000d0 	.word	0x200000d0
    4134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4138:	4c31      	ldr	r4, [pc, #196]	; (4200 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x200>)
    413a:	4605      	mov	r5, r0
    413c:	460e      	mov	r6, r1
    413e:	6860      	ldr	r0, [r4, #4]
    4140:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    4144:	b120      	cbz	r0, 4150 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x150>
    4146:	2801      	cmp	r0, #1
    4148:	d002      	beq.n	4150 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x150>
    414a:	200c      	movs	r0, #12
    414c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4150:	f003 ff32 	bl	7fb8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4154:	f003 fd8a 	bl	7c6c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    4158:	f003 fbae 	bl	78b8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    415c:	f004 f9b0 	bl	84c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    4160:	4828      	ldr	r0, [pc, #160]	; (4204 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x204>)
    4162:	f003 fe93 	bl	7e8c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4166:	4828      	ldr	r0, [pc, #160]	; (4208 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x208>)
    4168:	f004 f890 	bl	828c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    416c:	4827      	ldr	r0, [pc, #156]	; (420c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x20c>)
    416e:	f004 f883 	bl	8278 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    4172:	4630      	mov	r0, r6
    4174:	f003 ffc6 	bl	8104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    4178:	7968      	ldrb	r0, [r5, #5]
    417a:	b110      	cbz	r0, 4182 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x182>
    417c:	2001      	movs	r0, #1
    417e:	f7ff fec1 	bl	3f04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x92c>
    4182:	7928      	ldrb	r0, [r5, #4]
    4184:	2803      	cmp	r0, #3
    4186:	d001      	beq.n	418c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x18c>
    4188:	b118      	cbz	r0, 4192 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x192>
    418a:	e018      	b.n	41be <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1be>
    418c:	f640 2141 	movw	r1, #2625	; 0xa41
    4190:	e033      	b.n	41fa <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1fa>
    4192:	6861      	ldr	r1, [r4, #4]
    4194:	2000      	movs	r0, #0
    4196:	2503      	movs	r5, #3
    4198:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    419c:	f891 207a 	ldrb.w	r2, [r1, #122]	; 0x7a
    41a0:	1c52      	adds	r2, r2, #1
    41a2:	fbb2 f7f5 	udiv	r7, r2, r5
    41a6:	fb05 2217 	mls	r2, r5, r7, r2
    41aa:	f881 207a 	strb.w	r2, [r1, #122]	; 0x7a
    41ae:	fa23 f202 	lsr.w	r2, r3, r2
    41b2:	07d2      	lsls	r2, r2, #31
    41b4:	d103      	bne.n	41be <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1be>
    41b6:	1c40      	adds	r0, r0, #1
    41b8:	b2c0      	uxtb	r0, r0
    41ba:	2803      	cmp	r0, #3
    41bc:	d3ee      	bcc.n	419c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x19c>
    41be:	6860      	ldr	r0, [r4, #4]
    41c0:	f990 005e 	ldrsb.w	r0, [r0, #94]	; 0x5e
    41c4:	f003 ff7c 	bl	80c0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    41c8:	4631      	mov	r1, r6
    41ca:	2001      	movs	r0, #1
    41cc:	f7ff fa4a 	bl	3664 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c>
    41d0:	2800      	cmp	r0, #0
    41d2:	d0bb      	beq.n	414c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x14c>
    41d4:	f000 f922 	bl	441c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x41c>
    41d8:	6860      	ldr	r0, [r4, #4]
    41da:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
    41de:	b138      	cbz	r0, 41f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1f0>
    41e0:	f7fd ff6e 	bl	20c0 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>
    41e4:	480a      	ldr	r0, [pc, #40]	; (4210 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x210>)
    41e6:	6800      	ldr	r0, [r0, #0]
    41e8:	2803      	cmp	r0, #3
    41ea:	d004      	beq.n	41f6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1f6>
    41ec:	2000      	movs	r0, #0
    41ee:	e7ad      	b.n	414c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x14c>
    41f0:	f7fe f8c4 	bl	237c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    41f4:	e7f6      	b.n	41e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e4>
    41f6:	f640 2153 	movw	r1, #2643	; 0xa53
    41fa:	2032      	movs	r0, #50	; 0x32
    41fc:	f7fc fc32 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4200:	200000d0 	.word	0x200000d0
    4204:	00004504 	.word	0x00004504
    4208:	00555555 	.word	0x00555555
    420c:	8e89bed6 	.word	0x8e89bed6
    4210:	40001550 	.word	0x40001550
    4214:	b510      	push	{r4, lr}
    4216:	2000      	movs	r0, #0
    4218:	f7ff fe74 	bl	3f04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x92c>
    421c:	4808      	ldr	r0, [pc, #32]	; (4240 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x240>)
    421e:	6840      	ldr	r0, [r0, #4]
    4220:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    4224:	b128      	cbz	r0, 4232 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x232>
    4226:	2801      	cmp	r0, #1
    4228:	d003      	beq.n	4232 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x232>
    422a:	2802      	cmp	r0, #2
    422c:	d004      	beq.n	4238 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x238>
    422e:	200c      	movs	r0, #12
    4230:	bd10      	pop	{r4, pc}
    4232:	f000 f82d 	bl	4290 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x290>
    4236:	e001      	b.n	423c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x23c>
    4238:	f000 f840 	bl	42bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2bc>
    423c:	2000      	movs	r0, #0
    423e:	bd10      	pop	{r4, pc}
    4240:	200000d0 	.word	0x200000d0
    4244:	b510      	push	{r4, lr}
    4246:	2000      	movs	r0, #0
    4248:	7048      	strb	r0, [r1, #1]
    424a:	2019      	movs	r0, #25
    424c:	7008      	strb	r0, [r1, #0]
    424e:	480f      	ldr	r0, [pc, #60]	; (428c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28c>)
    4250:	6840      	ldr	r0, [r0, #4]
    4252:	f8d0 0042 	ldr.w	r0, [r0, #66]	; 0x42
    4256:	6048      	str	r0, [r1, #4]
    4258:	7908      	ldrb	r0, [r1, #4]
    425a:	2801      	cmp	r0, #1
    425c:	d114      	bne.n	4288 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x288>
    425e:	88cc      	ldrh	r4, [r1, #6]
    4260:	2100      	movs	r1, #0
    4262:	4620      	mov	r0, r4
    4264:	f009 fa88 	bl	d778 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    4268:	2800      	cmp	r0, #0
    426a:	d00d      	beq.n	4288 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x288>
    426c:	4620      	mov	r0, r4
    426e:	f009 fb0a 	bl	d886 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    4272:	2100      	movs	r1, #0
    4274:	4620      	mov	r0, r4
    4276:	f7fc fe59 	bl	f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    427a:	2800      	cmp	r0, #0
    427c:	d004      	beq.n	4288 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x288>
    427e:	f44f 6182 	mov.w	r1, #1040	; 0x410
    4282:	2032      	movs	r0, #50	; 0x32
    4284:	f7fc fbee 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4288:	bd10      	pop	{r4, pc}
    428a:	0000      	.short	0x0000
    428c:	200000d0 	.word	0x200000d0
    4290:	b510      	push	{r4, lr}
    4292:	f7ff f9bf 	bl	3614 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    4296:	4904      	ldr	r1, [pc, #16]	; (42a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2a8>)
    4298:	2001      	movs	r0, #1
    429a:	6849      	ldr	r1, [r1, #4]
    429c:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    42a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    42a4:	f000 bb0a 	b.w	48bc <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ>
    42a8:	200000d0 	.word	0x200000d0
    42ac:	4902      	ldr	r1, [pc, #8]	; (42b8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2b8>)
    42ae:	2000      	movs	r0, #0
    42b0:	6849      	ldr	r1, [r1, #4]
    42b2:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    42b6:	4770      	bx	lr
    42b8:	200000d0 	.word	0x200000d0
    42bc:	b570      	push	{r4, r5, r6, lr}
    42be:	f7fc ffcb 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    42c2:	4604      	mov	r4, r0
    42c4:	f7fc ffce 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    42c8:	4621      	mov	r1, r4
    42ca:	f00a fa94 	bl	e7f6 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    42ce:	0004      	movs	r4, r0
    42d0:	d020      	beq.n	4314 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x314>
    42d2:	f00a fa9d 	bl	e810 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    42d6:	2000      	movs	r0, #0
    42d8:	f000 f9fa 	bl	46d0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    42dc:	b1f8      	cbz	r0, 431e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x31e>
    42de:	4d20      	ldr	r5, [pc, #128]	; (4360 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x360>)
    42e0:	6868      	ldr	r0, [r5, #4]
    42e2:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    42e6:	2802      	cmp	r0, #2
    42e8:	d003      	beq.n	42f2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2f2>
    42ea:	4621      	mov	r1, r4
    42ec:	2000      	movs	r0, #0
    42ee:	f7ff f9b9 	bl	3664 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c>
    42f2:	1ce0      	adds	r0, r4, #3
    42f4:	f009 fb7a 	bl	d9ec <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    42f8:	6869      	ldr	r1, [r5, #4]
    42fa:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    42fe:	b128      	cbz	r0, 430c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x30c>
    4300:	2440      	movs	r4, #64	; 0x40
    4302:	f003 faf9 	bl	78f8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    4306:	4620      	mov	r0, r4
    4308:	f003 fcbe 	bl	7c88 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    430c:	f7ff fa90 	bl	3830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    4310:	b970      	cbnz	r0, 4330 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x330>
    4312:	e008      	b.n	4326 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x326>
    4314:	f240 5119 	movw	r1, #1305	; 0x519
    4318:	2032      	movs	r0, #50	; 0x32
    431a:	f7fc fba3 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    431e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4322:	f7ff bfb5 	b.w	4290 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x290>
    4326:	6868      	ldr	r0, [r5, #4]
    4328:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    432c:	2802      	cmp	r0, #2
    432e:	d104      	bne.n	433a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x33a>
    4330:	2100      	movs	r1, #0
    4332:	2201      	movs	r2, #1
    4334:	4608      	mov	r0, r1
    4336:	f003 ff6d 	bl	8214 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    433a:	6868      	ldr	r0, [r5, #4]
    433c:	21ff      	movs	r1, #255	; 0xff
    433e:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
    4342:	f880 1079 	strb.w	r1, [r0, #121]	; 0x79
    4346:	2100      	movs	r1, #0
    4348:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
    434c:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    4350:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    4354:	f880 1098 	strb.w	r1, [r0, #152]	; 0x98
    4358:	2105      	movs	r1, #5
    435a:	f880 1070 	strb.w	r1, [r0, #112]	; 0x70
    435e:	bd70      	pop	{r4, r5, r6, pc}
    4360:	200000d0 	.word	0x200000d0
    4364:	b570      	push	{r4, r5, r6, lr}
    4366:	f7fc ff77 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    436a:	4604      	mov	r4, r0
    436c:	f7fc ff7a 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    4370:	4621      	mov	r1, r4
    4372:	f00a fa40 	bl	e7f6 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    4376:	0005      	movs	r5, r0
    4378:	d028      	beq.n	43cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3cc>
    437a:	4e19      	ldr	r6, [pc, #100]	; (43e0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3e0>)
    437c:	2004      	movs	r0, #4
    437e:	6874      	ldr	r4, [r6, #4]
    4380:	3470      	adds	r4, #112	; 0x70
    4382:	f000 f9a5 	bl	46d0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    4386:	b330      	cbz	r0, 43d6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3d6>
    4388:	200c      	movs	r0, #12
    438a:	7020      	strb	r0, [r4, #0]
    438c:	2000      	movs	r0, #0
    438e:	f000 f971 	bl	4674 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA>
    4392:	7828      	ldrb	r0, [r5, #0]
    4394:	6871      	ldr	r1, [r6, #4]
    4396:	f3c0 1040 	ubfx	r0, r0, #5, #1
    439a:	f881 008a 	strb.w	r0, [r1, #138]	; 0x8a
    439e:	2005      	movs	r0, #5
    43a0:	f7ff fb16 	bl	39d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3f8>
    43a4:	4a0f      	ldr	r2, [pc, #60]	; (43e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3e4>)
    43a6:	68b1      	ldr	r1, [r6, #8]
    43a8:	2520      	movs	r5, #32
    43aa:	6d50      	ldr	r0, [r2, #84]	; 0x54
    43ac:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
    43b0:	7808      	ldrb	r0, [r1, #0]
    43b2:	ea05 1343 	and.w	r3, r5, r3, lsl #5
    43b6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    43ba:	4318      	orrs	r0, r3
    43bc:	7008      	strb	r0, [r1, #0]
    43be:	6d50      	ldr	r0, [r2, #84]	; 0x54
    43c0:	7ea2      	ldrb	r2, [r4, #26]
    43c2:	f810 1fad 	ldrb.w	r1, [r0, #173]!
    43c6:	4011      	ands	r1, r2
    43c8:	7001      	strb	r1, [r0, #0]
    43ca:	bd70      	pop	{r4, r5, r6, pc}
    43cc:	f240 619a 	movw	r1, #1690	; 0x69a
    43d0:	2032      	movs	r0, #50	; 0x32
    43d2:	f7fc fb47 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    43d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    43da:	f7ff bf59 	b.w	4290 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x290>
    43de:	0000      	.short	0x0000
    43e0:	200000d0 	.word	0x200000d0
    43e4:	20000bd8 	.word	0x20000bd8
    43e8:	b510      	push	{r4, lr}
    43ea:	2003      	movs	r0, #3
    43ec:	f000 f970 	bl	46d0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    43f0:	b168      	cbz	r0, 440e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x40e>
    43f2:	2003      	movs	r0, #3
    43f4:	f7ff faec 	bl	39d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3f8>
    43f8:	2201      	movs	r2, #1
    43fa:	4611      	mov	r1, r2
    43fc:	2000      	movs	r0, #0
    43fe:	f003 ff09 	bl	8214 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    4402:	4905      	ldr	r1, [pc, #20]	; (4418 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x418>)
    4404:	200b      	movs	r0, #11
    4406:	6849      	ldr	r1, [r1, #4]
    4408:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    440c:	bd10      	pop	{r4, pc}
    440e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4412:	f7ff bf3d 	b.w	4290 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x290>
    4416:	0000      	.short	0x0000
    4418:	200000d0 	.word	0x200000d0
    441c:	b570      	push	{r4, r5, r6, lr}
    441e:	4d19      	ldr	r5, [pc, #100]	; (4484 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x484>)
    4420:	2000      	movs	r0, #0
    4422:	686c      	ldr	r4, [r5, #4]
    4424:	f884 0098 	strb.w	r0, [r4, #152]	; 0x98
    4428:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
    442c:	b910      	cbnz	r0, 4434 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x434>
    442e:	f894 007d 	ldrb.w	r0, [r4, #125]	; 0x7d
    4432:	b308      	cbz	r0, 4478 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x478>
    4434:	e9f4 1024 	ldrd	r1, r0, [r4, #144]!	; 0x90
    4438:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    443c:	4050      	eors	r0, r2
    443e:	ea70 0101 	orns	r1, r0, r1
    4442:	d019      	beq.n	4478 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x478>
    4444:	f006 fea4 	bl	b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4448:	e9d4 2300 	ldrd	r2, r3, [r4]
    444c:	1a80      	subs	r0, r0, r2
    444e:	4199      	sbcs	r1, r3
    4450:	d312      	bcc.n	4478 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x478>
    4452:	f7fd ff0f 	bl	2274 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    4456:	490c      	ldr	r1, [pc, #48]	; (4488 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x488>)
    4458:	fba0 2301 	umull	r2, r3, r0, r1
    445c:	6868      	ldr	r0, [r5, #4]
    445e:	3090      	adds	r0, #144	; 0x90
    4460:	f00a f9cb 	bl	e7fa <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x90>
    4464:	6868      	ldr	r0, [r5, #4]
    4466:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    446a:	b110      	cbz	r0, 4472 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x472>
    446c:	2001      	movs	r0, #1
    446e:	f7fd fe73 	bl	2158 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    4472:	2001      	movs	r0, #1
    4474:	f7ff fd20 	bl	3eb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8e0>
    4478:	6869      	ldr	r1, [r5, #4]
    447a:	2002      	movs	r0, #2
    447c:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    4480:	bd70      	pop	{r4, r5, r6, pc}
    4482:	0000      	.short	0x0000
    4484:	200000d0 	.word	0x200000d0
    4488:	000f4240 	.word	0x000f4240
    448c:	000042ad 	.word	0x000042ad
    4490:	00004291 	.word	0x00004291
    4494:	0000e7d7 	.word	0x0000e7d7
    4498:	0000e7d7 	.word	0x0000e7d7
    449c:	0000e7d7 	.word	0x0000e7d7
    44a0:	000042bd 	.word	0x000042bd
    44a4:	0000e7d7 	.word	0x0000e7d7
    44a8:	0000e7d7 	.word	0x0000e7d7
    44ac:	0000e7d7 	.word	0x0000e7d7
    44b0:	0000e7d7 	.word	0x0000e7d7
    44b4:	0000e7d7 	.word	0x0000e7d7
    44b8:	000043e9 	.word	0x000043e9
    44bc:	00004365 	.word	0x00004365
    44c0:	0000e7d7 	.word	0x0000e7d7
    44c4:	0000e7d7 	.word	0x0000e7d7
    44c8:	000040b9 	.word	0x000040b9
    44cc:	00004095 	.word	0x00004095
    44d0:	00000000 	.word	0x00000000
    44d4:	0000e7e1 	.word	0x0000e7e1
    44d8:	0000e77f 	.word	0x0000e77f
    44dc:	0000e791 	.word	0x0000e791
    44e0:	0000e79f 	.word	0x0000e79f
    44e4:	000037dd 	.word	0x000037dd
    44e8:	00004135 	.word	0x00004135
    44ec:	00004215 	.word	0x00004215
    44f0:	000044c8 	.word	0x000044c8
    44f4:	000044d0 	.word	0x000044d0
    44f8:	0000448c 	.word	0x0000448c
    44fc:	000044e0 	.word	0x000044e0
    4500:	000044d8 	.word	0x000044d8
    4504:	000040f1 	.word	0x000040f1
    4508:	00003f6d 	.word	0x00003f6d
    450c:	00004041 	.word	0x00004041
    4510:	0000e7f3 	.word	0x0000e7f3
    4514:	b570      	push	{r4, r5, r6, lr}
    4516:	4604      	mov	r4, r0
    4518:	7800      	ldrb	r0, [r0, #0]
    451a:	2805      	cmp	r0, #5
    451c:	d001      	beq.n	4522 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x522>
    451e:	2148      	movs	r1, #72	; 0x48
    4520:	e058      	b.n	45d4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5d4>
    4522:	7ba0      	ldrb	r0, [r4, #14]
    4524:	06c0      	lsls	r0, r0, #27
    4526:	d401      	bmi.n	452c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x52c>
    4528:	2149      	movs	r1, #73	; 0x49
    452a:	e053      	b.n	45d4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5d4>
    452c:	221c      	movs	r2, #28
    452e:	1d21      	adds	r1, r4, #4
    4530:	482f      	ldr	r0, [pc, #188]	; (45f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5f0>)
    4532:	f00c f89c 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4536:	482e      	ldr	r0, [pc, #184]	; (45f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5f0>)
    4538:	7b22      	ldrb	r2, [r4, #12]
    453a:	f104 0120 	add.w	r1, r4, #32
    453e:	301c      	adds	r0, #28
    4540:	f00c f895 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4544:	482a      	ldr	r0, [pc, #168]	; (45f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5f0>)
    4546:	f04f 0201 	mov.w	r2, #1
    454a:	7a81      	ldrb	r1, [r0, #10]
    454c:	0749      	lsls	r1, r1, #29
    454e:	d502      	bpl.n	4556 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x556>
    4550:	7cc1      	ldrb	r1, [r0, #19]
    4552:	29fe      	cmp	r1, #254	; 0xfe
    4554:	d00c      	beq.n	4570 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x570>
    4556:	2304      	movs	r3, #4
    4558:	7023      	strb	r3, [r4, #0]
    455a:	6801      	ldr	r1, [r0, #0]
    455c:	6061      	str	r1, [r4, #4]
    455e:	6841      	ldr	r1, [r0, #4]
    4560:	60a1      	str	r1, [r4, #8]
    4562:	8901      	ldrh	r1, [r0, #8]
    4564:	81a1      	strh	r1, [r4, #12]
    4566:	7a81      	ldrb	r1, [r0, #10]
    4568:	070d      	lsls	r5, r1, #28
    456a:	d519      	bpl.n	45a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5a0>
    456c:	73a3      	strb	r3, [r4, #14]
    456e:	e02d      	b.n	45cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5cc>
    4570:	2113      	movs	r1, #19
    4572:	7021      	strb	r1, [r4, #0]
    4574:	7801      	ldrb	r1, [r0, #0]
    4576:	7121      	strb	r1, [r4, #4]
    4578:	7162      	strb	r2, [r4, #5]
    457a:	7841      	ldrb	r1, [r0, #1]
    457c:	71a1      	strb	r1, [r4, #6]
    457e:	f8d0 1002 	ldr.w	r1, [r0, #2]
    4582:	f8c4 1007 	str.w	r1, [r4, #7]
    4586:	88c1      	ldrh	r1, [r0, #6]
    4588:	f8a4 100b 	strh.w	r1, [r4, #11]
    458c:	21fe      	movs	r1, #254	; 0xfe
    458e:	7361      	strb	r1, [r4, #13]
    4590:	6941      	ldr	r1, [r0, #20]
    4592:	f8c4 100e 	str.w	r1, [r4, #14]
    4596:	8b01      	ldrh	r1, [r0, #24]
    4598:	8261      	strh	r1, [r4, #18]
    459a:	7a40      	ldrb	r0, [r0, #9]
    459c:	7520      	strb	r0, [r4, #20]
    459e:	bd70      	pop	{r4, r5, r6, pc}
    45a0:	07cb      	lsls	r3, r1, #31
    45a2:	d003      	beq.n	45ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5ac>
    45a4:	078b      	lsls	r3, r1, #30
    45a6:	d501      	bpl.n	45ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5ac>
    45a8:	2100      	movs	r1, #0
    45aa:	e00e      	b.n	45ca <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5ca>
    45ac:	074b      	lsls	r3, r1, #29
    45ae:	d501      	bpl.n	45b4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5b4>
    45b0:	73a2      	strb	r2, [r4, #14]
    45b2:	e00b      	b.n	45cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5cc>
    45b4:	07ca      	lsls	r2, r1, #31
    45b6:	d110      	bne.n	45da <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5da>
    45b8:	078a      	lsls	r2, r1, #30
    45ba:	d501      	bpl.n	45c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5c0>
    45bc:	2102      	movs	r1, #2
    45be:	e004      	b.n	45ca <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5ca>
    45c0:	07ca      	lsls	r2, r1, #31
    45c2:	d10a      	bne.n	45da <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5da>
    45c4:	0789      	lsls	r1, r1, #30
    45c6:	d408      	bmi.n	45da <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5da>
    45c8:	2103      	movs	r1, #3
    45ca:	73a1      	strb	r1, [r4, #14]
    45cc:	7a02      	ldrb	r2, [r0, #8]
    45ce:	2a1f      	cmp	r2, #31
    45d0:	d905      	bls.n	45de <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5de>
    45d2:	218d      	movs	r1, #141	; 0x8d
    45d4:	2033      	movs	r0, #51	; 0x33
    45d6:	f7fc fa45 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45da:	218a      	movs	r1, #138	; 0x8a
    45dc:	e7fa      	b.n	45d4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5d4>
    45de:	f104 000f 	add.w	r0, r4, #15
    45e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    45e6:	4902      	ldr	r1, [pc, #8]	; (45f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5f0>)
    45e8:	311c      	adds	r1, #28
    45ea:	f00c b840 	b.w	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    45ee:	0000      	.short	0x0000
    45f0:	20001635 	.word	0x20001635
    45f4:	2100      	movs	r1, #0
    45f6:	7201      	strb	r1, [r0, #8]
    45f8:	2204      	movs	r2, #4
    45fa:	4901      	ldr	r1, [pc, #4]	; (4600 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x600>)
    45fc:	f009 bd8f 	b.w	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    4600:	0000e9cb 	.word	0x0000e9cb

00004604 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>:
    4604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4608:	4616      	mov	r6, r2
    460a:	460c      	mov	r4, r1
    460c:	4605      	mov	r5, r0
    460e:	f009 fc9c 	bl	df4a <sym_GTN2QTPVJUP6VPTTNNKS6RR7APIHG3FG2T7SNQY>
    4612:	7460      	strb	r0, [r4, #17]
    4614:	4628      	mov	r0, r5
    4616:	f009 fc8f 	bl	df38 <sym_2RWLERIIOLMYS4LVQVNNIFLEQSG65A5Q5F2FPLA>
    461a:	74a0      	strb	r0, [r4, #18]
    461c:	1cea      	adds	r2, r5, #3
    461e:	4b14      	ldr	r3, [pc, #80]	; (4670 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x6c>)
    4620:	1d90      	adds	r0, r2, #6
    4622:	2100      	movs	r1, #0
    4624:	2e07      	cmp	r6, #7
    4626:	d21f      	bcs.n	4668 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x64>
    4628:	e8df f006 	tbb	[pc, r6]
    462c:	1e110b04 	.word	0x1e110b04
    4630:	00041e13 	.word	0x00041e13
    4634:	781b      	ldrb	r3, [r3, #0]
    4636:	e00d      	b.n	4654 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    4638:	60e0      	str	r0, [r4, #12]
    463a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    463e:	60e1      	str	r1, [r4, #12]
    4640:	e7fb      	b.n	463a <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x36>
    4642:	785b      	ldrb	r3, [r3, #1]
    4644:	7063      	strb	r3, [r4, #1]
    4646:	e9c4 2001 	strd	r2, r0, [r4, #4]
    464a:	7421      	strb	r1, [r4, #16]
    464c:	e7f7      	b.n	463e <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    464e:	789b      	ldrb	r3, [r3, #2]
    4650:	e000      	b.n	4654 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    4652:	78db      	ldrb	r3, [r3, #3]
    4654:	7063      	strb	r3, [r4, #1]
    4656:	e9c4 2101 	strd	r2, r1, [r4, #4]
    465a:	786a      	ldrb	r2, [r5, #1]
    465c:	1f92      	subs	r2, r2, #6
    465e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    4662:	7422      	strb	r2, [r4, #16]
    4664:	d0eb      	beq.n	463e <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    4666:	e7e7      	b.n	4638 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x34>
    4668:	7061      	strb	r1, [r4, #1]
    466a:	6061      	str	r1, [r4, #4]
    466c:	60a1      	str	r1, [r4, #8]
    466e:	e7ec      	b.n	464a <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    4670:	000108da 	.word	0x000108da

00004674 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA>:
    4674:	b570      	push	{r4, r5, r6, lr}
    4676:	b140      	cbz	r0, 468a <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x16>
    4678:	2801      	cmp	r0, #1
    467a:	d006      	beq.n	468a <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x16>
    467c:	2802      	cmp	r0, #2
    467e:	d00a      	beq.n	4696 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x22>
    4680:	2803      	cmp	r0, #3
    4682:	d006      	beq.n	4692 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x1e>
    4684:	f640 01c8 	movw	r1, #2248	; 0x8c8
    4688:	e015      	b.n	46b6 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x42>
    468a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    468e:	f000 b97d 	b.w	498c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38>
    4692:	2001      	movs	r0, #1
    4694:	e000      	b.n	4698 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x24>
    4696:	2000      	movs	r0, #0
    4698:	4c0c      	ldr	r4, [pc, #48]	; (46cc <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x58>)
    469a:	2101      	movs	r1, #1
    469c:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    46a0:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    46a4:	6a20      	ldr	r0, [r4, #32]
    46a6:	2500      	movs	r5, #0
    46a8:	f880 5248 	strb.w	r5, [r0, #584]	; 0x248
    46ac:	7821      	ldrb	r1, [r4, #0]
    46ae:	2905      	cmp	r1, #5
    46b0:	d004      	beq.n	46bc <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x48>
    46b2:	f640 0149 	movw	r1, #2121	; 0x849
    46b6:	2021      	movs	r0, #33	; 0x21
    46b8:	f7fc f9d4 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46bc:	f000 fd9a 	bl	51f4 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I>
    46c0:	6225      	str	r5, [r4, #32]
    46c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    46c6:	f000 b9c5 	b.w	4a54 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    46ca:	0000      	.short	0x0000
    46cc:	20000c80 	.word	0x20000c80

000046d0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>:
    46d0:	b570      	push	{r4, r5, r6, lr}
    46d2:	4605      	mov	r5, r0
    46d4:	f006 fd5c 	bl	b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    46d8:	4c16      	ldr	r4, [pc, #88]	; (4734 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x64>)
    46da:	6921      	ldr	r1, [r4, #16]
    46dc:	1a46      	subs	r6, r0, r1
    46de:	b155      	cbz	r5, 46f6 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x26>
    46e0:	2d03      	cmp	r5, #3
    46e2:	d00d      	beq.n	4700 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x30>
    46e4:	2d04      	cmp	r5, #4
    46e6:	d00e      	beq.n	4706 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
    46e8:	2d06      	cmp	r5, #6
    46ea:	d01d      	beq.n	4728 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x58>
    46ec:	f240 31d6 	movw	r1, #982	; 0x3d6
    46f0:	2021      	movs	r0, #33	; 0x21
    46f2:	f7fc f9b7 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46f6:	2001      	movs	r0, #1
    46f8:	f00a fa05 	bl	eb06 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    46fc:	3098      	adds	r0, #152	; 0x98
    46fe:	e004      	b.n	470a <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3a>
    4700:	f44f 7057 	mov.w	r0, #860	; 0x35c
    4704:	e001      	b.n	470a <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3a>
    4706:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    470a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    470c:	1835      	adds	r5, r6, r0
    470e:	39f4      	subs	r1, #244	; 0xf4
    4710:	428d      	cmp	r5, r1
    4712:	d307      	bcc.n	4724 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x54>
    4714:	2600      	movs	r6, #0
    4716:	f000 fac9 	bl	4cac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x358>
    471a:	b140      	cbz	r0, 472e <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    471c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    471e:	38f4      	subs	r0, #244	; 0xf4
    4720:	4285      	cmp	r5, r0
    4722:	d203      	bcs.n	472c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5c>
    4724:	2601      	movs	r6, #1
    4726:	e002      	b.n	472e <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    4728:	2001      	movs	r0, #1
    472a:	bd70      	pop	{r4, r5, r6, pc}
    472c:	2600      	movs	r6, #0
    472e:	4630      	mov	r0, r6
    4730:	bd70      	pop	{r4, r5, r6, pc}
    4732:	0000      	.short	0x0000
    4734:	20000c80 	.word	0x20000c80

00004738 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI>:
    4738:	b5f0      	push	{r4, r5, r6, r7, lr}
    473a:	4c1e      	ldr	r4, [pc, #120]	; (47b4 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x7c>)
    473c:	4607      	mov	r7, r0
    473e:	b087      	sub	sp, #28
    4740:	7820      	ldrb	r0, [r4, #0]
    4742:	460e      	mov	r6, r1
    4744:	b110      	cbz	r0, 474c <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x14>
    4746:	200c      	movs	r0, #12
    4748:	b007      	add	sp, #28
    474a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    474c:	f7fe fd34 	bl	31b8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4750:	4605      	mov	r5, r0
    4752:	6227      	str	r7, [r4, #32]
    4754:	f897 0248 	ldrb.w	r0, [r7, #584]	; 0x248
    4758:	b110      	cbz	r0, 4760 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x28>
    475a:	f44f 713f 	mov.w	r1, #764	; 0x2fc
    475e:	e025      	b.n	47ac <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    4760:	2005      	movs	r0, #5
    4762:	7020      	strb	r0, [r4, #0]
    4764:	2000      	movs	r0, #0
    4766:	7060      	strb	r0, [r4, #1]
    4768:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    476c:	f000 fae4 	bl	4d38 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e4>
    4770:	64a0      	str	r0, [r4, #72]	; 0x48
    4772:	2100      	movs	r1, #0
    4774:	4810      	ldr	r0, [pc, #64]	; (47b8 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x80>)
    4776:	f006 fadd 	bl	ad34 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    477a:	7028      	strb	r0, [r5, #0]
    477c:	2820      	cmp	r0, #32
    477e:	d00d      	beq.n	479c <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x64>
    4780:	4633      	mov	r3, r6
    4782:	2200      	movs	r2, #0
    4784:	2101      	movs	r1, #1
    4786:	4668      	mov	r0, sp
    4788:	f000 fb30 	bl	4dec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x498>
    478c:	b148      	cbz	r0, 47a2 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x6a>
    478e:	7828      	ldrb	r0, [r5, #0]
    4790:	4669      	mov	r1, sp
    4792:	f00a f9e3 	bl	eb5c <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6c>
    4796:	b138      	cbz	r0, 47a8 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x70>
    4798:	2000      	movs	r0, #0
    479a:	e7d5      	b.n	4748 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x10>
    479c:	f240 310a 	movw	r1, #778	; 0x30a
    47a0:	e004      	b.n	47ac <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    47a2:	f240 310d 	movw	r1, #781	; 0x30d
    47a6:	e001      	b.n	47ac <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    47a8:	f240 310e 	movw	r1, #782	; 0x30e
    47ac:	2021      	movs	r0, #33	; 0x21
    47ae:	f7fc f959 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    47b2:	0000      	.short	0x0000
    47b4:	20000c80 	.word	0x20000c80
    47b8:	00004a75 	.word	0x00004a75

000047bc <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI>:
    47bc:	4902      	ldr	r1, [pc, #8]	; (47c8 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI+0xc>)
    47be:	6a09      	ldr	r1, [r1, #32]
    47c0:	6001      	str	r1, [r0, #0]
    47c2:	f000 b83d 	b.w	4840 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    47c6:	0000      	.short	0x0000
    47c8:	20000c80 	.word	0x20000c80

000047cc <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>:
    47cc:	b570      	push	{r4, r5, r6, lr}
    47ce:	b086      	sub	sp, #24
    47d0:	4606      	mov	r6, r0
    47d2:	b111      	cbz	r1, 47da <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xe>
    47d4:	2011      	movs	r0, #17
    47d6:	b006      	add	sp, #24
    47d8:	bd70      	pop	{r4, r5, r6, pc}
    47da:	4c17      	ldr	r4, [pc, #92]	; (4838 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x6c>)
    47dc:	7820      	ldrb	r0, [r4, #0]
    47de:	b108      	cbz	r0, 47e4 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x18>
    47e0:	200c      	movs	r0, #12
    47e2:	e7f8      	b.n	47d6 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xa>
    47e4:	f7fe fce8 	bl	31b8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    47e8:	4605      	mov	r5, r0
    47ea:	2000      	movs	r0, #0
    47ec:	7060      	strb	r0, [r4, #1]
    47ee:	2004      	movs	r0, #4
    47f0:	7020      	strb	r0, [r4, #0]
    47f2:	f000 faa1 	bl	4d38 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e4>
    47f6:	64a0      	str	r0, [r4, #72]	; 0x48
    47f8:	2100      	movs	r1, #0
    47fa:	4810      	ldr	r0, [pc, #64]	; (483c <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x70>)
    47fc:	f006 fa9a 	bl	ad34 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    4800:	7028      	strb	r0, [r5, #0]
    4802:	2820      	cmp	r0, #32
    4804:	d00d      	beq.n	4822 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x56>
    4806:	4633      	mov	r3, r6
    4808:	2200      	movs	r2, #0
    480a:	2101      	movs	r1, #1
    480c:	4668      	mov	r0, sp
    480e:	f000 faed 	bl	4dec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x498>
    4812:	b148      	cbz	r0, 4828 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x5c>
    4814:	7828      	ldrb	r0, [r5, #0]
    4816:	4669      	mov	r1, sp
    4818:	f00a f9a0 	bl	eb5c <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6c>
    481c:	b138      	cbz	r0, 482e <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x62>
    481e:	2000      	movs	r0, #0
    4820:	e7d9      	b.n	47d6 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xa>
    4822:	f240 3162 	movw	r1, #866	; 0x362
    4826:	e004      	b.n	4832 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x66>
    4828:	f44f 7159 	mov.w	r1, #868	; 0x364
    482c:	e001      	b.n	4832 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x66>
    482e:	f240 3165 	movw	r1, #869	; 0x365
    4832:	2021      	movs	r0, #33	; 0x21
    4834:	f7fc f916 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4838:	20000c80 	.word	0x20000c80
    483c:	00004a75 	.word	0x00004a75

00004840 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>:
    4840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4844:	2700      	movs	r7, #0
    4846:	f7fe fcb7 	bl	31b8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    484a:	4c18      	ldr	r4, [pc, #96]	; (48ac <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x6c>)
    484c:	4605      	mov	r5, r0
    484e:	7820      	ldrb	r0, [r4, #0]
    4850:	2804      	cmp	r0, #4
    4852:	d005      	beq.n	4860 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    4854:	7820      	ldrb	r0, [r4, #0]
    4856:	2805      	cmp	r0, #5
    4858:	d002      	beq.n	4860 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    485a:	200c      	movs	r0, #12
    485c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4860:	2001      	movs	r0, #1
    4862:	7060      	strb	r0, [r4, #1]
    4864:	7b20      	ldrb	r0, [r4, #12]
    4866:	b160      	cbz	r0, 4882 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x42>
    4868:	f3ef 8610 	mrs	r6, PRIMASK
    486c:	b672      	cpsid	i
    486e:	7b20      	ldrb	r0, [r4, #12]
    4870:	b128      	cbz	r0, 487e <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    4872:	7b60      	ldrb	r0, [r4, #13]
    4874:	b118      	cbz	r0, 487e <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    4876:	f009 ff78 	bl	e76a <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    487a:	f000 f8eb 	bl	4a54 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    487e:	b126      	cbz	r6, 488a <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4a>
    4880:	e004      	b.n	488c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    4882:	7828      	ldrb	r0, [r5, #0]
    4884:	f005 ffea 	bl	a85c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    4888:	e000      	b.n	488c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    488a:	b662      	cpsie	i
    488c:	7828      	ldrb	r0, [r5, #0]
    488e:	f006 f939 	bl	ab04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    4892:	f000 fc03 	bl	509c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x748>
    4896:	2000      	movs	r0, #0
    4898:	7060      	strb	r0, [r4, #1]
    489a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    489e:	b100      	cbz	r0, 48a2 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x62>
    48a0:	270c      	movs	r7, #12
    48a2:	f000 fc27 	bl	50f4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7a0>
    48a6:	4638      	mov	r0, r7
    48a8:	e7d8      	b.n	485c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x1c>
    48aa:	0000      	.short	0x0000
    48ac:	20000c80 	.word	0x20000c80

000048b0 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>:
    48b0:	4801      	ldr	r0, [pc, #4]	; (48b8 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ+0x8>)
    48b2:	7800      	ldrb	r0, [r0, #0]
    48b4:	4770      	bx	lr
    48b6:	0000      	.short	0x0000
    48b8:	20000c80 	.word	0x20000c80

000048bc <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ>:
    48bc:	b510      	push	{r4, lr}
    48be:	4c10      	ldr	r4, [pc, #64]	; (4900 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x44>)
    48c0:	b086      	sub	sp, #24
    48c2:	7b20      	ldrb	r0, [r4, #12]
    48c4:	b1b0      	cbz	r0, 48f4 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    48c6:	7860      	ldrb	r0, [r4, #1]
    48c8:	b9a0      	cbnz	r0, 48f4 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    48ca:	2300      	movs	r3, #0
    48cc:	461a      	mov	r2, r3
    48ce:	4619      	mov	r1, r3
    48d0:	4668      	mov	r0, sp
    48d2:	f000 fa8b 	bl	4dec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x498>
    48d6:	b158      	cbz	r0, 48f0 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x34>
    48d8:	f7fe fc6e 	bl	31b8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    48dc:	7800      	ldrb	r0, [r0, #0]
    48de:	4669      	mov	r1, sp
    48e0:	f00a f93c 	bl	eb5c <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6c>
    48e4:	b930      	cbnz	r0, 48f4 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    48e6:	f240 71ae 	movw	r1, #1966	; 0x7ae
    48ea:	2021      	movs	r0, #33	; 0x21
    48ec:	f7fc f8ba 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48f0:	2001      	movs	r0, #1
    48f2:	70a0      	strb	r0, [r4, #2]
    48f4:	b006      	add	sp, #24
    48f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    48fa:	f000 b8ab 	b.w	4a54 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    48fe:	0000      	.short	0x0000
    4900:	20000c80 	.word	0x20000c80

00004904 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q>:
    4904:	b508      	push	{r3, lr}
    4906:	2260      	movs	r2, #96	; 0x60
    4908:	2100      	movs	r1, #0
    490a:	480c      	ldr	r0, [pc, #48]	; (493c <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q+0x38>)
    490c:	f00b ff29 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4910:	f7fe fc52 	bl	31b8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4914:	2120      	movs	r1, #32
    4916:	7001      	strb	r1, [r0, #0]
    4918:	f000 f812 	bl	4940 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>
    491c:	b120      	cbz	r0, 4928 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q+0x24>
    491e:	f240 2135 	movw	r1, #565	; 0x235
    4922:	2021      	movs	r0, #33	; 0x21
    4924:	f7fc f89e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4928:	f242 7010 	movw	r0, #10000	; 0x2710
    492c:	9000      	str	r0, [sp, #0]
    492e:	2201      	movs	r2, #1
    4930:	4669      	mov	r1, sp
    4932:	1080      	asrs	r0, r0, #2
    4934:	f000 f940 	bl	4bb8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x264>
    4938:	bd08      	pop	{r3, pc}
    493a:	0000      	.short	0x0000
    493c:	20000c80 	.word	0x20000c80

00004940 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>:
    4940:	4803      	ldr	r0, [pc, #12]	; (4950 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ+0x10>)
    4942:	b510      	push	{r4, lr}
    4944:	7800      	ldrb	r0, [r0, #0]
    4946:	b108      	cbz	r0, 494c <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ+0xc>
    4948:	f7ff ff7a 	bl	4840 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    494c:	2000      	movs	r0, #0
    494e:	bd10      	pop	{r4, pc}
    4950:	20000c80 	.word	0x20000c80

00004954 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>:
    4954:	490c      	ldr	r1, [pc, #48]	; (4988 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x34>)
    4956:	b508      	push	{r3, lr}
    4958:	7809      	ldrb	r1, [r1, #0]
    495a:	b121      	cbz	r1, 4966 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x12>
    495c:	f44f 7147 	mov.w	r1, #796	; 0x31c
    4960:	2021      	movs	r0, #33	; 0x21
    4962:	f7fc f87f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4966:	2300      	movs	r3, #0
    4968:	9300      	str	r3, [sp, #0]
    496a:	7801      	ldrb	r1, [r0, #0]
    496c:	461a      	mov	r2, r3
    496e:	07c9      	lsls	r1, r1, #31
    4970:	d003      	beq.n	497a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x26>
    4972:	e9d0 3001 	ldrd	r3, r0, [r0, #4]
    4976:	2201      	movs	r2, #1
    4978:	9000      	str	r0, [sp, #0]
    497a:	4669      	mov	r1, sp
    497c:	4618      	mov	r0, r3
    497e:	f000 f91b 	bl	4bb8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x264>
    4982:	2000      	movs	r0, #0
    4984:	bd08      	pop	{r3, pc}
    4986:	0000      	.short	0x0000
    4988:	20000c80 	.word	0x20000c80
    498c:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    4990:	4c2e      	ldr	r4, [pc, #184]	; (4a4c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xf8>)
    4992:	4680      	mov	r8, r0
    4994:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
    4998:	461e      	mov	r6, r3
    499a:	f003 fad3 	bl	7f44 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    499e:	4607      	mov	r7, r0
    49a0:	6a20      	ldr	r0, [r4, #32]
    49a2:	2101      	movs	r1, #1
    49a4:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
    49a8:	f880 106b 	strb.w	r1, [r0, #107]	; 0x6b
    49ac:	3062      	adds	r0, #98	; 0x62
    49ae:	21ff      	movs	r1, #255	; 0xff
    49b0:	7281      	strb	r1, [r0, #10]
    49b2:	6a20      	ldr	r0, [r4, #32]
    49b4:	f04f 0900 	mov.w	r9, #0
    49b8:	4649      	mov	r1, r9
    49ba:	302c      	adds	r0, #44	; 0x2c
    49bc:	f009 fc5e 	bl	e27c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    49c0:	462a      	mov	r2, r5
    49c2:	4633      	mov	r3, r6
    49c4:	2101      	movs	r1, #1
    49c6:	4640      	mov	r0, r8
    49c8:	9700      	str	r7, [sp, #0]
    49ca:	f00a f8ae 	bl	eb2a <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x3a>
    49ce:	6a27      	ldr	r7, [r4, #32]
    49d0:	4606      	mov	r6, r0
    49d2:	460d      	mov	r5, r1
    49d4:	f8d7 8010 	ldr.w	r8, [r7, #16]
    49d8:	f002 fa5a 	bl	6e90 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>
    49dc:	f104 0140 	add.w	r1, r4, #64	; 0x40
    49e0:	4288      	cmp	r0, r1
    49e2:	d00b      	beq.n	49fc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa8>
    49e4:	e9cd 6500 	strd	r6, r5, [sp]
    49e8:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
    49ec:	4642      	mov	r2, r8
    49ee:	f00a fc18 	bl	f222 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    49f2:	4540      	cmp	r0, r8
    49f4:	d903      	bls.n	49fe <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaa>
    49f6:	f240 410c 	movw	r1, #1036	; 0x40c
    49fa:	e01d      	b.n	4a38 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xe4>
    49fc:	2000      	movs	r0, #0
    49fe:	4914      	ldr	r1, [pc, #80]	; (4a50 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xfc>)
    4a00:	4607      	mov	r7, r0
    4a02:	6809      	ldr	r1, [r1, #0]
    4a04:	4288      	cmp	r0, r1
    4a06:	6a20      	ldr	r0, [r4, #32]
    4a08:	6901      	ldr	r1, [r0, #16]
    4a0a:	d202      	bcs.n	4a12 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbe>
    4a0c:	440f      	add	r7, r1
    4a0e:	6201      	str	r1, [r0, #32]
    4a10:	e004      	b.n	4a1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xc8>
    4a12:	4638      	mov	r0, r7
    4a14:	f009 f9cf 	bl	ddb6 <sym_MCZ5ZKWAPWEBLVDHDY2XS3XBNNW7L43ADSWQSTI>
    4a18:	6a21      	ldr	r1, [r4, #32]
    4a1a:	6208      	str	r0, [r1, #32]
    4a1c:	6a20      	ldr	r0, [r4, #32]
    4a1e:	6901      	ldr	r1, [r0, #16]
    4a20:	2005      	movs	r0, #5
    4a22:	f009 f9d0 	bl	ddc6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    4a26:	6a21      	ldr	r1, [r4, #32]
    4a28:	8488      	strh	r0, [r1, #36]	; 0x24
    4a2a:	6a21      	ldr	r1, [r4, #32]
    4a2c:	6a0a      	ldr	r2, [r1, #32]
    4a2e:	1aba      	subs	r2, r7, r2
    4a30:	4290      	cmp	r0, r2
    4a32:	d804      	bhi.n	4a3e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xea>
    4a34:	f640 0137 	movw	r1, #2103	; 0x837
    4a38:	2021      	movs	r0, #33	; 0x21
    4a3a:	f7fc f813 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a3e:	19f2      	adds	r2, r6, r7
    4a40:	eb45 0509 	adc.w	r5, r5, r9
    4a44:	e9c1 258a 	strd	r2, r5, [r1, #552]	; 0x228
    4a48:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    4a4c:	20000c80 	.word	0x20000c80
    4a50:	200000e0 	.word	0x200000e0
    4a54:	b510      	push	{r4, lr}
    4a56:	4c06      	ldr	r4, [pc, #24]	; (4a70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x11c>)
    4a58:	7b20      	ldrb	r0, [r4, #12]
    4a5a:	2800      	cmp	r0, #0
    4a5c:	d006      	beq.n	4a6c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x118>
    4a5e:	f003 fa77 	bl	7f50 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    4a62:	f006 f98f 	bl	ad84 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    4a66:	2000      	movs	r0, #0
    4a68:	7320      	strb	r0, [r4, #12]
    4a6a:	7360      	strb	r0, [r4, #13]
    4a6c:	bd10      	pop	{r4, pc}
    4a6e:	0000      	.short	0x0000
    4a70:	20000c80 	.word	0x20000c80
    4a74:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a76:	b087      	sub	sp, #28
    4a78:	460d      	mov	r5, r1
    4a7a:	f7fe fb9d 	bl	31b8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4a7e:	2701      	movs	r7, #1
    4a80:	4c3f      	ldr	r4, [pc, #252]	; (4b80 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x22c>)
    4a82:	2d09      	cmp	r5, #9
    4a84:	d278      	bcs.n	4b78 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x224>
    4a86:	e8df f005 	tbb	[pc, r5]
    4a8a:	3905      	.short	0x3905
    4a8c:	774a4f4f 	.word	0x774a4f4f
    4a90:	00726d64 	.word	0x00726d64
    4a94:	7327      	strb	r7, [r4, #12]
    4a96:	7861      	ldrb	r1, [r4, #1]
    4a98:	2900      	cmp	r1, #0
    4a9a:	d12d      	bne.n	4af8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4a9c:	7800      	ldrb	r0, [r0, #0]
    4a9e:	f005 fabb 	bl	a018 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    4aa2:	4605      	mov	r5, r0
    4aa4:	460e      	mov	r6, r1
    4aa6:	e9c4 0104 	strd	r0, r1, [r4, #16]
    4aaa:	f000 fb3f 	bl	512c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d8>
    4aae:	b118      	cbz	r0, 4ab8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x164>
    4ab0:	2000      	movs	r0, #0
    4ab2:	f88d 0004 	strb.w	r0, [sp, #4]
    4ab6:	e001      	b.n	4abc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x168>
    4ab8:	f88d 7004 	strb.w	r7, [sp, #4]
    4abc:	f000 f950 	bl	4d60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    4ac0:	4633      	mov	r3, r6
    4ac2:	462a      	mov	r2, r5
    4ac4:	f00a f84c 	bl	eb60 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    4ac8:	6861      	ldr	r1, [r4, #4]
    4aca:	fbb0 f2f1 	udiv	r2, r0, r1
    4ace:	fb01 0012 	mls	r0, r1, r2, r0
    4ad2:	b150      	cbz	r0, 4aea <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x196>
    4ad4:	f05f 0000 	movs.w	r0, #0
    4ad8:	f88d 0005 	strb.w	r0, [sp, #5]
    4adc:	4668      	mov	r0, sp
    4ade:	f7fe fcab 	bl	3438 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>
    4ae2:	b120      	cbz	r0, 4aee <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x19a>
    4ae4:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
    4ae8:	e043      	b.n	4b72 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21e>
    4aea:	2001      	movs	r0, #1
    4aec:	e7f4      	b.n	4ad8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x184>
    4aee:	6b20      	ldr	r0, [r4, #48]	; 0x30
    4af0:	38e3      	subs	r0, #227	; 0xe3
    4af2:	63a0      	str	r0, [r4, #56]	; 0x38
    4af4:	f006 fa60 	bl	afb8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    4af8:	b007      	add	sp, #28
    4afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4afc:	7860      	ldrb	r0, [r4, #1]
    4afe:	b130      	cbz	r0, 4b0e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1ba>
    4b00:	f009 fe33 	bl	e76a <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    4b04:	b007      	add	sp, #28
    4b06:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4b0a:	f7ff bfa3 	b.w	4a54 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    4b0e:	7367      	strb	r7, [r4, #13]
    4b10:	f7fe fd22 	bl	3558 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>
    4b14:	2800      	cmp	r0, #0
    4b16:	d0ef      	beq.n	4af8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4b18:	f240 11e1 	movw	r1, #481	; 0x1e1
    4b1c:	e029      	b.n	4b72 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21e>
    4b1e:	b007      	add	sp, #28
    4b20:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4b24:	f003 bbe8 	b.w	82f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    4b28:	7805      	ldrb	r5, [r0, #0]
    4b2a:	2300      	movs	r3, #0
    4b2c:	2201      	movs	r2, #1
    4b2e:	4619      	mov	r1, r3
    4b30:	4668      	mov	r0, sp
    4b32:	f000 f95b 	bl	4dec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x498>
    4b36:	b140      	cbz	r0, 4b4a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1f6>
    4b38:	4669      	mov	r1, sp
    4b3a:	4628      	mov	r0, r5
    4b3c:	f00a f80e 	bl	eb5c <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6c>
    4b40:	2800      	cmp	r0, #0
    4b42:	d1d9      	bne.n	4af8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4b44:	f240 71c9 	movw	r1, #1993	; 0x7c9
    4b48:	e013      	b.n	4b72 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21e>
    4b4a:	70a7      	strb	r7, [r4, #2]
    4b4c:	f000 f81a 	bl	4b84 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x230>
    4b50:	e7d2      	b.n	4af8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4b52:	f000 f8ab 	bl	4cac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x358>
    4b56:	2800      	cmp	r0, #0
    4b58:	d1ce      	bne.n	4af8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4b5a:	b007      	add	sp, #28
    4b5c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4b60:	f009 be01 	b.w	e766 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>
    4b64:	b007      	add	sp, #28
    4b66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4b6a:	f000 b80b 	b.w	4b84 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x230>
    4b6e:	f240 2113 	movw	r1, #531	; 0x213
    4b72:	2021      	movs	r0, #33	; 0x21
    4b74:	f7fb ff76 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b78:	f240 2117 	movw	r1, #535	; 0x217
    4b7c:	e7f9      	b.n	4b72 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21e>
    4b7e:	0000      	.short	0x0000
    4b80:	20000c80 	.word	0x20000c80
    4b84:	b510      	push	{r4, lr}
    4b86:	4c0b      	ldr	r4, [pc, #44]	; (4bb4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x260>)
    4b88:	7820      	ldrb	r0, [r4, #0]
    4b8a:	b138      	cbz	r0, 4b9c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x248>
    4b8c:	f000 fa86 	bl	509c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x748>
    4b90:	78a0      	ldrb	r0, [r4, #2]
    4b92:	b150      	cbz	r0, 4baa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x256>
    4b94:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    4b98:	b128      	cbz	r0, 4ba6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x252>
    4b9a:	e006      	b.n	4baa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x256>
    4b9c:	f240 117b 	movw	r1, #379	; 0x17b
    4ba0:	2021      	movs	r0, #33	; 0x21
    4ba2:	f7fb ff5f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ba6:	f7fe fcef 	bl	3588 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>
    4baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4bae:	f000 baa1 	b.w	50f4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7a0>
    4bb2:	0000      	.short	0x0000
    4bb4:	20000c80 	.word	0x20000c80
    4bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4bbc:	4d11      	ldr	r5, [pc, #68]	; (4c04 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2b0>)
    4bbe:	4616      	mov	r6, r2
    4bc0:	460f      	mov	r7, r1
    4bc2:	2400      	movs	r4, #0
    4bc4:	6068      	str	r0, [r5, #4]
    4bc6:	f009 ff93 	bl	eaf0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    4bca:	f8df c03c 	ldr.w	ip, [pc, #60]	; 4c08 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2b4>
    4bce:	2100      	movs	r1, #0
    4bd0:	f81c 2001 	ldrb.w	r2, [ip, r1]
    4bd4:	4232      	tst	r2, r6
    4bd6:	d007      	beq.n	4be8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x294>
    4bd8:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    4bdc:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    4be0:	1a1b      	subs	r3, r3, r0
    4be2:	1c64      	adds	r4, r4, #1
    4be4:	b2e4      	uxtb	r4, r4
    4be6:	6093      	str	r3, [r2, #8]
    4be8:	1c49      	adds	r1, r1, #1
    4bea:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    4bee:	d0ef      	beq.n	4bd0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x27c>
    4bf0:	f016 0f0e 	tst.w	r6, #14
    4bf4:	d004      	beq.n	4c00 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2ac>
    4bf6:	f240 7103 	movw	r1, #1795	; 0x703
    4bfa:	2021      	movs	r0, #33	; 0x21
    4bfc:	f7fb ff32 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4c04:	20000c80 	.word	0x20000c80
    4c08:	000108de 	.word	0x000108de
    4c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4c10:	b086      	sub	sp, #24
    4c12:	4692      	mov	sl, r2
    4c14:	4607      	mov	r7, r0
    4c16:	4689      	mov	r9, r1
    4c18:	f000 fa94 	bl	5144 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f0>
    4c1c:	4d22      	ldr	r5, [pc, #136]	; (4ca8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x354>)
    4c1e:	f04f 0800 	mov.w	r8, #0
    4c22:	686a      	ldr	r2, [r5, #4]
    4c24:	1886      	adds	r6, r0, r2
    4c26:	eb41 0108 	adc.w	r1, r1, r8
    4c2a:	460c      	mov	r4, r1
    4c2c:	460b      	mov	r3, r1
    4c2e:	4632      	mov	r2, r6
    4c30:	4638      	mov	r0, r7
    4c32:	4649      	mov	r1, r9
    4c34:	f009 ff94 	bl	eb60 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    4c38:	4607      	mov	r7, r0
    4c3a:	f009 ff88 	bl	eb4e <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x5e>
    4c3e:	4287      	cmp	r7, r0
    4c40:	da13      	bge.n	4c6a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x316>
    4c42:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
    4c46:	f000 fa7d 	bl	5144 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f0>
    4c4a:	4632      	mov	r2, r6
    4c4c:	4623      	mov	r3, r4
    4c4e:	f009 ff87 	bl	eb60 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    4c52:	6869      	ldr	r1, [r5, #4]
    4c54:	fbb0 f1f1 	udiv	r1, r0, r1
    4c58:	f8ca 1000 	str.w	r1, [sl]
    4c5c:	6868      	ldr	r0, [r5, #4]
    4c5e:	1980      	adds	r0, r0, r6
    4c60:	eb48 0104 	adc.w	r1, r8, r4
    4c64:	b006      	add	sp, #24
    4c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4c6a:	f88d 8000 	strb.w	r8, [sp]
    4c6e:	6b68      	ldr	r0, [r5, #52]	; 0x34
    4c70:	9001      	str	r0, [sp, #4]
    4c72:	f009 ff26 	bl	eac2 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    4c76:	f8ad 0008 	strh.w	r0, [sp, #8]
    4c7a:	2001      	movs	r0, #1
    4c7c:	f88d 000b 	strb.w	r0, [sp, #11]
    4c80:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
    4c84:	f000 fa5e 	bl	5144 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f0>
    4c88:	e9cd 0104 	strd	r0, r1, [sp, #16]
    4c8c:	f000 f9ec 	bl	5068 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x714>
    4c90:	f88d 000a 	strb.w	r0, [sp, #10]
    4c94:	4668      	mov	r0, sp
    4c96:	6869      	ldr	r1, [r5, #4]
    4c98:	f009 f83c 	bl	dd14 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    4c9c:	f8ca 0000 	str.w	r0, [sl]
    4ca0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    4ca4:	e7de      	b.n	4c64 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x310>
    4ca6:	0000      	.short	0x0000
    4ca8:	20000c80 	.word	0x20000c80
    4cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4cb0:	f006 fa6e 	bl	b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4cb4:	4c1f      	ldr	r4, [pc, #124]	; (4d34 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e0>)
    4cb6:	4606      	mov	r6, r0
    4cb8:	460d      	mov	r5, r1
    4cba:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    4cbe:	f000 f9d3 	bl	5068 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x714>
    4cc2:	4607      	mov	r7, r0
    4cc4:	f005 f94c 	bl	9f60 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    4cc8:	4602      	mov	r2, r0
    4cca:	2865      	cmp	r0, #101	; 0x65
    4ccc:	d323      	bcc.n	4d16 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c2>
    4cce:	1c50      	adds	r0, r2, #1
    4cd0:	d024      	beq.n	4d1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c8>
    4cd2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4cd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4cd6:	1888      	adds	r0, r1, r2
    4cd8:	4283      	cmp	r3, r0
    4cda:	d800      	bhi.n	4cde <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38a>
    4cdc:	1a5a      	subs	r2, r3, r1
    4cde:	f06f 0039 	mvn.w	r0, #57	; 0x39
    4ce2:	1830      	adds	r0, r6, r0
    4ce4:	f145 31ff 	adc.w	r1, r5, #4294967295
    4ce8:	f000 fa42 	bl	5170 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x81c>
    4cec:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4cee:	4408      	add	r0, r1
    4cf0:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4cf2:	1a45      	subs	r5, r0, r1
    4cf4:	f241 3088 	movw	r0, #5000	; 0x1388
    4cf8:	4285      	cmp	r5, r0
    4cfa:	d900      	bls.n	4cfe <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3aa>
    4cfc:	4605      	mov	r5, r0
    4cfe:	f006 fa47 	bl	b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4d02:	1b80      	subs	r0, r0, r6
    4d04:	f100 009d 	add.w	r0, r0, #157	; 0x9d
    4d08:	4285      	cmp	r5, r0
    4d0a:	d304      	bcc.n	4d16 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c2>
    4d0c:	4639      	mov	r1, r7
    4d0e:	4628      	mov	r0, r5
    4d10:	f005 f848 	bl	9da4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    4d14:	b120      	cbz	r0, 4d20 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3cc>
    4d16:	2000      	movs	r0, #0
    4d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d1c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4d1e:	e7e7      	b.n	4cf0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x39c>
    4d20:	6b20      	ldr	r0, [r4, #48]	; 0x30
    4d22:	4428      	add	r0, r5
    4d24:	6320      	str	r0, [r4, #48]	; 0x30
    4d26:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    4d28:	4428      	add	r0, r5
    4d2a:	63a0      	str	r0, [r4, #56]	; 0x38
    4d2c:	f006 f944 	bl	afb8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    4d30:	2001      	movs	r0, #1
    4d32:	e7f1      	b.n	4d18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c4>
    4d34:	20000c80 	.word	0x20000c80
    4d38:	b510      	push	{r4, lr}
    4d3a:	2400      	movs	r4, #0
    4d3c:	f009 fed8 	bl	eaf0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    4d40:	4a06      	ldr	r2, [pc, #24]	; (4d5c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x408>)
    4d42:	2100      	movs	r1, #0
    4d44:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    4d48:	4404      	add	r4, r0
    4d4a:	689b      	ldr	r3, [r3, #8]
    4d4c:	1c49      	adds	r1, r1, #1
    4d4e:	441c      	add	r4, r3
    4d50:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    4d54:	d0f6      	beq.n	4d44 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3f0>
    4d56:	4620      	mov	r0, r4
    4d58:	bd10      	pop	{r4, pc}
    4d5a:	0000      	.short	0x0000
    4d5c:	20000c80 	.word	0x20000c80
    4d60:	4901      	ldr	r1, [pc, #4]	; (4d68 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x414>)
    4d62:	e9d1 0110 	ldrd	r0, r1, [r1, #64]	; 0x40
    4d66:	4770      	bx	lr
    4d68:	20000c80 	.word	0x20000c80
    4d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d70:	4606      	mov	r6, r0
    4d72:	481d      	ldr	r0, [pc, #116]	; (4de8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x494>)
    4d74:	4688      	mov	r8, r1
    4d76:	4615      	mov	r5, r2
    4d78:	e9d0 100a 	ldrd	r1, r0, [r0, #40]	; 0x28
    4d7c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    4d80:	2701      	movs	r7, #1
    4d82:	4050      	eors	r0, r2
    4d84:	b086      	sub	sp, #24
    4d86:	ea70 0101 	orns	r1, r0, r1
    4d8a:	d021      	beq.n	4dd0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x47c>
    4d8c:	2400      	movs	r4, #0
    4d8e:	f88d 4000 	strb.w	r4, [sp]
    4d92:	9501      	str	r5, [sp, #4]
    4d94:	f009 fe95 	bl	eac2 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    4d98:	f8ad 0008 	strh.w	r0, [sp, #8]
    4d9c:	f88d 700b 	strb.w	r7, [sp, #11]
    4da0:	f009 fed5 	bl	eb4e <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x5e>
    4da4:	1982      	adds	r2, r0, r6
    4da6:	eb44 0008 	adc.w	r0, r4, r8
    4daa:	e9cd 2004 	strd	r2, r0, [sp, #16]
    4dae:	2002      	movs	r0, #2
    4db0:	f88d 000a 	strb.w	r0, [sp, #10]
    4db4:	4668      	mov	r0, sp
    4db6:	f005 fc21 	bl	a5fc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    4dba:	b168      	cbz	r0, 4dd8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x484>
    4dbc:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
    4dc0:	194a      	adds	r2, r1, r5
    4dc2:	4909      	ldr	r1, [pc, #36]	; (4de8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x494>)
    4dc4:	4160      	adcs	r0, r4
    4dc6:	e9d1 310a 	ldrd	r3, r1, [r1, #40]	; 0x28
    4dca:	1a9a      	subs	r2, r3, r2
    4dcc:	4181      	sbcs	r1, r0
    4dce:	d408      	bmi.n	4de2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x48e>
    4dd0:	2001      	movs	r0, #1
    4dd2:	b006      	add	sp, #24
    4dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4dd8:	f240 5135 	movw	r1, #1333	; 0x535
    4ddc:	2021      	movs	r0, #33	; 0x21
    4dde:	f7fb fe41 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4de2:	2000      	movs	r0, #0
    4de4:	e7f5      	b.n	4dd2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x47e>
    4de6:	0000      	.short	0x0000
    4de8:	20000c80 	.word	0x20000c80
    4dec:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4df0:	b087      	sub	sp, #28
    4df2:	4614      	mov	r4, r2
    4df4:	4606      	mov	r6, r0
    4df6:	f006 f9cb 	bl	b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4dfa:	4d99      	ldr	r5, [pc, #612]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4dfc:	4680      	mov	r8, r0
    4dfe:	4689      	mov	r9, r1
    4e00:	68a8      	ldr	r0, [r5, #8]
    4e02:	f04f 0a00 	mov.w	sl, #0
    4e06:	9002      	str	r0, [sp, #8]
    4e08:	f7ff ff96 	bl	4d38 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e4>
    4e0c:	6869      	ldr	r1, [r5, #4]
    4e0e:	4288      	cmp	r0, r1
    4e10:	d101      	bne.n	4e16 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4c2>
    4e12:	2001      	movs	r0, #1
    4e14:	e000      	b.n	4e18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4c4>
    4e16:	2000      	movs	r0, #0
    4e18:	9004      	str	r0, [sp, #16]
    4e1a:	4020      	ands	r0, r4
    4e1c:	9003      	str	r0, [sp, #12]
    4e1e:	9808      	ldr	r0, [sp, #32]
    4e20:	2800      	cmp	r0, #0
    4e22:	d07f      	beq.n	4f24 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5d0>
    4e24:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    4e28:	eb18 0b02 	adds.w	fp, r8, r2
    4e2c:	f149 0400 	adc.w	r4, r9, #0
    4e30:	f002 f834 	bl	6e9c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>
    4e34:	9000      	str	r0, [sp, #0]
    4e36:	488a      	ldr	r0, [pc, #552]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4e38:	7800      	ldrb	r0, [r0, #0]
    4e3a:	4f89      	ldr	r7, [pc, #548]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4e3c:	3740      	adds	r7, #64	; 0x40
    4e3e:	2805      	cmp	r0, #5
    4e40:	d135      	bne.n	4eae <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x55a>
    4e42:	4887      	ldr	r0, [pc, #540]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4e44:	6a00      	ldr	r0, [r0, #32]
    4e46:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    4e4a:	f002 f807 	bl	6e5c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>
    4e4e:	9900      	ldr	r1, [sp, #0]
    4e50:	4605      	mov	r5, r0
    4e52:	4288      	cmp	r0, r1
    4e54:	d009      	beq.n	4e6a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x516>
    4e56:	4882      	ldr	r0, [pc, #520]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4e58:	4629      	mov	r1, r5
    4e5a:	6a00      	ldr	r0, [r0, #32]
    4e5c:	f500 700a 	add.w	r0, r0, #552	; 0x228
    4e60:	f001 ffc0 	bl	6de4 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    4e64:	2000      	movs	r0, #0
    4e66:	61b8      	str	r0, [r7, #24]
    4e68:	e00c      	b.n	4e84 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x530>
    4e6a:	497d      	ldr	r1, [pc, #500]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4e6c:	6a08      	ldr	r0, [r1, #32]
    4e6e:	f500 700a 	add.w	r0, r0, #552	; 0x228
    4e72:	61b8      	str	r0, [r7, #24]
    4e74:	6a08      	ldr	r0, [r1, #32]
    4e76:	6c8a      	ldr	r2, [r1, #72]	; 0x48
    4e78:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    4e7c:	4282      	cmp	r2, r0
    4e7e:	d300      	bcc.n	4e82 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x52e>
    4e80:	4610      	mov	r0, r2
    4e82:	6488      	str	r0, [r1, #72]	; 0x48
    4e84:	4876      	ldr	r0, [pc, #472]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4e86:	6a00      	ldr	r0, [r0, #32]
    4e88:	b158      	cbz	r0, 4ea2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x54e>
    4e8a:	b16d      	cbz	r5, 4ea8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x554>
    4e8c:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
    4e90:	f8d5 c000 	ldr.w	ip, [r5]
    4e94:	eb1c 0303 	adds.w	r3, ip, r3
    4e98:	eb41 010a 	adc.w	r1, r1, sl
    4e9c:	e9c0 318a 	strd	r3, r1, [r0, #552]	; 0x228
    4ea0:	e005      	b.n	4eae <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x55a>
    4ea2:	f240 7185 	movw	r1, #1925	; 0x785
    4ea6:	e01a      	b.n	4ede <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x58a>
    4ea8:	2100      	movs	r1, #0
    4eaa:	e9c0 118a 	strd	r1, r1, [r0, #552]	; 0x228
    4eae:	4638      	mov	r0, r7
    4eb0:	9900      	ldr	r1, [sp, #0]
    4eb2:	f001 ff97 	bl	6de4 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    4eb6:	486a      	ldr	r0, [pc, #424]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4eb8:	9a00      	ldr	r2, [sp, #0]
    4eba:	6845      	ldr	r5, [r0, #4]
    4ebc:	b192      	cbz	r2, 4ee4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x590>
    4ebe:	e9d2 1301 	ldrd	r1, r3, [r2, #4]
    4ec2:	6817      	ldr	r7, [r2, #0]
    4ec4:	e9cd b400 	strd	fp, r4, [sp]
    4ec8:	18f8      	adds	r0, r7, r3
    4eca:	eb41 010a 	adc.w	r1, r1, sl
    4ece:	462a      	mov	r2, r5
    4ed0:	f00a f9a7 	bl	f222 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    4ed4:	4601      	mov	r1, r0
    4ed6:	42a8      	cmp	r0, r5
    4ed8:	d905      	bls.n	4ee6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x592>
    4eda:	f240 31f9 	movw	r1, #1017	; 0x3f9
    4ede:	2021      	movs	r0, #33	; 0x21
    4ee0:	f7fb fdc0 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ee4:	2100      	movs	r1, #0
    4ee6:	eb1b 0501 	adds.w	r5, fp, r1
    4eea:	495d      	ldr	r1, [pc, #372]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4eec:	4650      	mov	r0, sl
    4eee:	4144      	adcs	r4, r0
    4ef0:	684a      	ldr	r2, [r1, #4]
    4ef2:	1aab      	subs	r3, r5, r2
    4ef4:	eb64 020a 	sbc.w	r2, r4, sl
    4ef8:	e9c1 3210 	strd	r3, r2, [r1, #64]	; 0x40
    4efc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4efe:	3128      	adds	r1, #40	; 0x28
    4f00:	b152      	cbz	r2, 4f18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5c4>
    4f02:	f242 7310 	movw	r3, #10000	; 0x2710
    4f06:	435a      	muls	r2, r3
    4f08:	18aa      	adds	r2, r5, r2
    4f0a:	eb44 000a 	adc.w	r0, r4, sl
    4f0e:	e9c1 2000 	strd	r2, r0, [r1]
    4f12:	2001      	movs	r0, #1
    4f14:	e051      	b.n	4fba <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x666>
    4f16:	e005      	b.n	4f24 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5d0>
    4f18:	f04f 30ff 	mov.w	r0, #4294967295
    4f1c:	0842      	lsrs	r2, r0, #1
    4f1e:	e9c1 0200 	strd	r0, r2, [r1]
    4f22:	e7f6      	b.n	4f12 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5be>
    4f24:	9803      	ldr	r0, [sp, #12]
    4f26:	b1d8      	cbz	r0, 4f60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x60c>
    4f28:	2001      	movs	r0, #1
    4f2a:	f009 fdec 	bl	eb06 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    4f2e:	4604      	mov	r4, r0
    4f30:	2001      	movs	r0, #1
    4f32:	f003 f8f7 	bl	8124 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    4f36:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    4f3a:	4401      	add	r1, r0
    4f3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4f40:	fbb1 f0f0 	udiv	r0, r1, r0
    4f44:	1822      	adds	r2, r4, r0
    4f46:	4640      	mov	r0, r8
    4f48:	4649      	mov	r1, r9
    4f4a:	32f4      	adds	r2, #244	; 0xf4
    4f4c:	f7ff ff0e 	bl	4d6c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x418>
    4f50:	b908      	cbnz	r0, 4f56 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x602>
    4f52:	2000      	movs	r0, #0
    4f54:	9002      	str	r0, [sp, #8]
    4f56:	4645      	mov	r5, r8
    4f58:	464c      	mov	r4, r9
    4f5a:	f8cd a014 	str.w	sl, [sp, #20]
    4f5e:	e02d      	b.n	4fbc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x668>
    4f60:	b13c      	cbz	r4, 4f72 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x61e>
    4f62:	aa05      	add	r2, sp, #20
    4f64:	4640      	mov	r0, r8
    4f66:	4649      	mov	r1, r9
    4f68:	f7ff fe50 	bl	4c0c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2b8>
    4f6c:	4605      	mov	r5, r0
    4f6e:	460c      	mov	r4, r1
    4f70:	e024      	b.n	4fbc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x668>
    4f72:	4640      	mov	r0, r8
    4f74:	4649      	mov	r1, r9
    4f76:	f000 f8e5 	bl	5144 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f0>
    4f7a:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>
    4f7e:	4602      	mov	r2, r0
    4f80:	4608      	mov	r0, r1
    4f82:	f8db 1008 	ldr.w	r1, [fp, #8]
    4f86:	9102      	str	r1, [sp, #8]
    4f88:	f8db 3004 	ldr.w	r3, [fp, #4]
    4f8c:	4657      	mov	r7, sl
    4f8e:	189d      	adds	r5, r3, r2
    4f90:	eb4a 0400 	adc.w	r4, sl, r0
    4f94:	e9db 0104 	ldrd	r0, r1, [fp, #16]
    4f98:	f000 f8c8 	bl	512c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d8>
    4f9c:	f8db 1004 	ldr.w	r1, [fp, #4]
    4fa0:	4348      	muls	r0, r1
    4fa2:	9000      	str	r0, [sp, #0]
    4fa4:	f7ff fedc 	bl	4d60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    4fa8:	9a00      	ldr	r2, [sp, #0]
    4faa:	1880      	adds	r0, r0, r2
    4fac:	4179      	adcs	r1, r7
    4fae:	e9cb 0110 	strd	r0, r1, [fp, #64]	; 0x40
    4fb2:	4621      	mov	r1, r4
    4fb4:	4628      	mov	r0, r5
    4fb6:	f000 f8b9 	bl	512c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d8>
    4fba:	9005      	str	r0, [sp, #20]
    4fbc:	2001      	movs	r0, #1
    4fbe:	f009 fda2 	bl	eb06 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    4fc2:	4607      	mov	r7, r0
    4fc4:	2001      	movs	r0, #1
    4fc6:	f003 f8ad 	bl	8124 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    4fca:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    4fce:	4401      	add	r1, r0
    4fd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4fd4:	fbb1 f0f0 	udiv	r0, r1, r0
    4fd8:	4407      	add	r7, r0
    4fda:	4628      	mov	r0, r5
    4fdc:	4621      	mov	r1, r4
    4fde:	37f4      	adds	r7, #244	; 0xf4
    4fe0:	9a02      	ldr	r2, [sp, #8]
    4fe2:	f000 f8c5 	bl	5170 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x81c>
    4fe6:	491e      	ldr	r1, [pc, #120]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4fe8:	eb01 028a 	add.w	r2, r1, sl, lsl #2
    4fec:	6892      	ldr	r2, [r2, #8]
    4fee:	4282      	cmp	r2, r0
    4ff0:	d800      	bhi.n	4ff4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6a0>
    4ff2:	4610      	mov	r0, r2
    4ff4:	6348      	str	r0, [r1, #52]	; 0x34
    4ff6:	9a08      	ldr	r2, [sp, #32]
    4ff8:	b10a      	cbz	r2, 4ffe <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6aa>
    4ffa:	e9c1 5404 	strd	r5, r4, [r1, #16]
    4ffe:	e9c1 5406 	strd	r5, r4, [r1, #24]
    5002:	468b      	mov	fp, r1
    5004:	9904      	ldr	r1, [sp, #16]
    5006:	b111      	cbz	r1, 500e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6ba>
    5008:	f8cb 7030 	str.w	r7, [fp, #48]	; 0x30
    500c:	e001      	b.n	5012 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6be>
    500e:	f8cb 0030 	str.w	r0, [fp, #48]	; 0x30
    5012:	2001      	movs	r0, #1
    5014:	72f0      	strb	r0, [r6, #11]
    5016:	f009 fd54 	bl	eac2 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    501a:	8130      	strh	r0, [r6, #8]
    501c:	4628      	mov	r0, r5
    501e:	4621      	mov	r1, r4
    5020:	f000 f822 	bl	5068 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x714>
    5024:	72b0      	strb	r0, [r6, #10]
    5026:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
    502a:	6070      	str	r0, [r6, #4]
    502c:	9803      	ldr	r0, [sp, #12]
    502e:	b148      	cbz	r0, 5044 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6f0>
    5030:	2001      	movs	r0, #1
    5032:	7030      	strb	r0, [r6, #0]
    5034:	4a0b      	ldr	r2, [pc, #44]	; (5064 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x710>)
    5036:	4640      	mov	r0, r8
    5038:	4649      	mov	r1, r9
    503a:	f000 f899 	bl	5170 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x81c>
    503e:	1bc0      	subs	r0, r0, r7
    5040:	6130      	str	r0, [r6, #16]
    5042:	e003      	b.n	504c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6f8>
    5044:	f886 a000 	strb.w	sl, [r6]
    5048:	e9c6 5404 	strd	r5, r4, [r6, #16]
    504c:	f8db 0034 	ldr.w	r0, [fp, #52]	; 0x34
    5050:	42b8      	cmp	r0, r7
    5052:	d303      	bcc.n	505c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x708>
    5054:	2001      	movs	r0, #1
    5056:	b00b      	add	sp, #44	; 0x2c
    5058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    505c:	2000      	movs	r0, #0
    505e:	e7fa      	b.n	5056 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x702>
    5060:	20000c80 	.word	0x20000c80
    5064:	0f424000 	.word	0x0f424000
    5068:	b570      	push	{r4, r5, r6, lr}
    506a:	4604      	mov	r4, r0
    506c:	480a      	ldr	r0, [pc, #40]	; (5098 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x744>)
    506e:	460d      	mov	r5, r1
    5070:	7801      	ldrb	r1, [r0, #0]
    5072:	2904      	cmp	r1, #4
    5074:	d10d      	bne.n	5092 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x73e>
    5076:	6840      	ldr	r0, [r0, #4]
    5078:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    507c:	0046      	lsls	r6, r0, #1
    507e:	f7ff fe6f 	bl	4d60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    5082:	4622      	mov	r2, r4
    5084:	462b      	mov	r3, r5
    5086:	f009 fd6b 	bl	eb60 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    508a:	42b0      	cmp	r0, r6
    508c:	d201      	bcs.n	5092 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x73e>
    508e:	2002      	movs	r0, #2
    5090:	bd70      	pop	{r4, r5, r6, pc}
    5092:	2001      	movs	r0, #1
    5094:	bd70      	pop	{r4, r5, r6, pc}
    5096:	0000      	.short	0x0000
    5098:	20000c80 	.word	0x20000c80
    509c:	b570      	push	{r4, r5, r6, lr}
    509e:	4d14      	ldr	r5, [pc, #80]	; (50f0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x79c>)
    50a0:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    50a4:	f105 0440 	add.w	r4, r5, #64	; 0x40
    50a8:	2800      	cmp	r0, #0
    50aa:	7828      	ldrb	r0, [r5, #0]
    50ac:	d00f      	beq.n	50ce <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x77a>
    50ae:	2805      	cmp	r0, #5
    50b0:	d004      	beq.n	50bc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x768>
    50b2:	f240 2157 	movw	r1, #599	; 0x257
    50b6:	2021      	movs	r0, #33	; 0x21
    50b8:	f7fb fcd4 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50bc:	4620      	mov	r0, r4
    50be:	f009 fd1d 	bl	eafc <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0xc>
    50c2:	b178      	cbz	r0, 50e4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x790>
    50c4:	4620      	mov	r0, r4
    50c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    50ca:	f001 be69 	b.w	6da0 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    50ce:	2805      	cmp	r0, #5
    50d0:	d108      	bne.n	50e4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x790>
    50d2:	4620      	mov	r0, r4
    50d4:	f009 fd12 	bl	eafc <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0xc>
    50d8:	b920      	cbnz	r0, 50e4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x790>
    50da:	6a28      	ldr	r0, [r5, #32]
    50dc:	f500 700a 	add.w	r0, r0, #552	; 0x228
    50e0:	f001 fea0 	bl	6e24 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    50e4:	4620      	mov	r0, r4
    50e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    50ea:	f001 be9b 	b.w	6e24 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    50ee:	0000      	.short	0x0000
    50f0:	20000c80 	.word	0x20000c80
    50f4:	b510      	push	{r4, lr}
    50f6:	f7fe f8d1 	bl	329c <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    50fa:	490b      	ldr	r1, [pc, #44]	; (5128 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d4>)
    50fc:	2000      	movs	r0, #0
    50fe:	7088      	strb	r0, [r1, #2]
    5100:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
    5104:	6208      	str	r0, [r1, #32]
    5106:	7008      	strb	r0, [r1, #0]
    5108:	f7fe f856 	bl	31b8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    510c:	4604      	mov	r4, r0
    510e:	7800      	ldrb	r0, [r0, #0]
    5110:	f005 fcd6 	bl	aac0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    5114:	b110      	cbz	r0, 511c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7c8>
    5116:	2020      	movs	r0, #32
    5118:	7020      	strb	r0, [r4, #0]
    511a:	bd10      	pop	{r4, pc}
    511c:	f240 3192 	movw	r1, #914	; 0x392
    5120:	2021      	movs	r0, #33	; 0x21
    5122:	f7fb fc9f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5126:	0000      	.short	0x0000
    5128:	20000c80 	.word	0x20000c80
    512c:	b510      	push	{r4, lr}
    512e:	4604      	mov	r4, r0
    5130:	f7ff fe16 	bl	4d60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    5134:	4902      	ldr	r1, [pc, #8]	; (5140 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7ec>)
    5136:	1a20      	subs	r0, r4, r0
    5138:	6849      	ldr	r1, [r1, #4]
    513a:	fbb0 f0f1 	udiv	r0, r0, r1
    513e:	bd10      	pop	{r4, pc}
    5140:	20000c80 	.word	0x20000c80
    5144:	b570      	push	{r4, r5, r6, lr}
    5146:	4604      	mov	r4, r0
    5148:	460d      	mov	r5, r1
    514a:	f7ff fe09 	bl	4d60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    514e:	4622      	mov	r2, r4
    5150:	462b      	mov	r3, r5
    5152:	f009 fd05 	bl	eb60 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    5156:	4905      	ldr	r1, [pc, #20]	; (516c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x818>)
    5158:	684c      	ldr	r4, [r1, #4]
    515a:	fbb0 f0f4 	udiv	r0, r0, r4
    515e:	4344      	muls	r4, r0
    5160:	f7ff fdfe 	bl	4d60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    5164:	1900      	adds	r0, r0, r4
    5166:	f141 0100 	adc.w	r1, r1, #0
    516a:	bd70      	pop	{r4, r5, r6, pc}
    516c:	20000c80 	.word	0x20000c80
    5170:	4b0a      	ldr	r3, [pc, #40]	; (519c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x848>)
    5172:	b510      	push	{r4, lr}
    5174:	e9d3 430a 	ldrd	r4, r3, [r3, #40]	; 0x28
    5178:	1a20      	subs	r0, r4, r0
    517a:	eb63 0301 	sbc.w	r3, r3, r1
    517e:	2400      	movs	r4, #0
    5180:	4621      	mov	r1, r4
    5182:	1a24      	subs	r4, r4, r0
    5184:	4199      	sbcs	r1, r3
    5186:	da06      	bge.n	5196 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x842>
    5188:	2100      	movs	r1, #0
    518a:	1a14      	subs	r4, r2, r0
    518c:	eb71 0403 	sbcs.w	r4, r1, r3
    5190:	da00      	bge.n	5194 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x840>
    5192:	4610      	mov	r0, r2
    5194:	bd10      	pop	{r4, pc}
    5196:	2000      	movs	r0, #0
    5198:	bd10      	pop	{r4, pc}
    519a:	0000      	.short	0x0000
    519c:	20000c80 	.word	0x20000c80

000051a0 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>:
    51a0:	b570      	push	{r4, r5, r6, lr}
    51a2:	f002 fecf 	bl	7f44 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    51a6:	4c0d      	ldr	r4, [pc, #52]	; (51dc <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x3c>)
    51a8:	4606      	mov	r6, r0
    51aa:	4602      	mov	r2, r0
    51ac:	e9d4 5101 	ldrd	r5, r1, [r4, #4]
    51b0:	4628      	mov	r0, r5
    51b2:	f008 fc90 	bl	dad6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    51b6:	6060      	str	r0, [r4, #4]
    51b8:	42a8      	cmp	r0, r5
    51ba:	d005      	beq.n	51c8 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x28>
    51bc:	68e1      	ldr	r1, [r4, #12]
    51be:	1b40      	subs	r0, r0, r5
    51c0:	4408      	add	r0, r1
    51c2:	60e0      	str	r0, [r4, #12]
    51c4:	f005 fef8 	bl	afb8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    51c8:	6860      	ldr	r0, [r4, #4]
    51ca:	42b0      	cmp	r0, r6
    51cc:	d301      	bcc.n	51d2 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x32>
    51ce:	7820      	ldrb	r0, [r4, #0]
    51d0:	b108      	cbz	r0, 51d6 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x36>
    51d2:	2000      	movs	r0, #0
    51d4:	bd70      	pop	{r4, r5, r6, pc}
    51d6:	2001      	movs	r0, #1
    51d8:	bd70      	pop	{r4, r5, r6, pc}
    51da:	0000      	.short	0x0000
    51dc:	20000f60 	.word	0x20000f60

000051e0 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>:
    51e0:	4903      	ldr	r1, [pc, #12]	; (51f0 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x10>)
    51e2:	2000      	movs	r0, #0
    51e4:	6008      	str	r0, [r1, #0]
    51e6:	6048      	str	r0, [r1, #4]
    51e8:	6088      	str	r0, [r1, #8]
    51ea:	60c8      	str	r0, [r1, #12]
    51ec:	f000 b856 	b.w	529c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x30>
    51f0:	20000f60 	.word	0x20000f60

000051f4 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I>:
    51f4:	b510      	push	{r4, lr}
    51f6:	b086      	sub	sp, #24
    51f8:	0004      	movs	r4, r0
    51fa:	d005      	beq.n	5208 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x14>
    51fc:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    5200:	b128      	cbz	r0, 520e <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x1a>
    5202:	f240 1177 	movw	r1, #375	; 0x177
    5206:	e025      	b.n	5254 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x60>
    5208:	f44f 71bb 	mov.w	r1, #374	; 0x176
    520c:	e022      	b.n	5254 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x60>
    520e:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    5212:	2820      	cmp	r0, #32
    5214:	d002      	beq.n	521c <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x28>
    5216:	f240 1179 	movw	r1, #377	; 0x179
    521a:	e01b      	b.n	5254 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x60>
    521c:	4621      	mov	r1, r4
    521e:	480f      	ldr	r0, [pc, #60]	; (525c <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x68>)
    5220:	f005 fd88 	bl	ad34 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    5224:	f884 0249 	strb.w	r0, [r4, #585]	; 0x249
    5228:	2820      	cmp	r0, #32
    522a:	d00e      	beq.n	524a <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x56>
    522c:	2300      	movs	r3, #0
    522e:	2201      	movs	r2, #1
    5230:	4621      	mov	r1, r4
    5232:	4668      	mov	r0, sp
    5234:	f009 fce8 	bl	ec08 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x2e>
    5238:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    523c:	4669      	mov	r1, sp
    523e:	f009 fdca 	bl	edd6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1fc>
    5242:	b128      	cbz	r0, 5250 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x5c>
    5244:	b006      	add	sp, #24
    5246:	2000      	movs	r0, #0
    5248:	bd10      	pop	{r4, pc}
    524a:	f44f 71be 	mov.w	r1, #380	; 0x17c
    524e:	e001      	b.n	5254 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x60>
    5250:	f240 117f 	movw	r1, #383	; 0x17f
    5254:	2035      	movs	r0, #53	; 0x35
    5256:	f7fb fc05 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    525a:	0000      	.short	0x0000
    525c:	0000535d 	.word	0x0000535d

00005260 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>:
    5260:	4901      	ldr	r1, [pc, #4]	; (5268 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x8>)
    5262:	7048      	strb	r0, [r1, #1]
    5264:	4770      	bx	lr
    5266:	0000      	.short	0x0000
    5268:	20000f60 	.word	0x20000f60

0000526c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>:
    526c:	b570      	push	{r4, r5, r6, lr}
    526e:	4605      	mov	r5, r0
    5270:	4809      	ldr	r0, [pc, #36]	; (5298 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x2c>)
    5272:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    5276:	fbb0 f4f1 	udiv	r4, r0, r1
    527a:	f009 fc39 	bl	eaf0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    527e:	1901      	adds	r1, r0, r4
    5280:	4628      	mov	r0, r5
    5282:	f501 719d 	add.w	r1, r1, #314	; 0x13a
    5286:	f009 f812 	bl	e2ae <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    528a:	f640 0148 	movw	r1, #2120	; 0x848
    528e:	4288      	cmp	r0, r1
    5290:	d300      	bcc.n	5294 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x28>
    5292:	4608      	mov	r0, r1
    5294:	b280      	uxth	r0, r0
    5296:	bd70      	pop	{r4, r5, r6, pc}
    5298:	000122f9 	.word	0x000122f9
    529c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    52a0:	4d15      	ldr	r5, [pc, #84]	; (52f8 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x8c>)
    52a2:	2001      	movs	r0, #1
    52a4:	7028      	strb	r0, [r5, #0]
    52a6:	2400      	movs	r4, #0
    52a8:	f64f 76ff 	movw	r6, #65535	; 0xffff
    52ac:	e00b      	b.n	52c6 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x5a>
    52ae:	2100      	movs	r1, #0
    52b0:	f008 fa62 	bl	d778 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    52b4:	0007      	movs	r7, r0
    52b6:	d009      	beq.n	52cc <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x60>
    52b8:	f897 0249 	ldrb.w	r0, [r7, #585]	; 0x249
    52bc:	f005 fc22 	bl	ab04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    52c0:	4638      	mov	r0, r7
    52c2:	f009 fd59 	bl	ed78 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x19e>
    52c6:	9400      	str	r4, [sp, #0]
    52c8:	9401      	str	r4, [sp, #4]
    52ca:	e00d      	b.n	52e8 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x7c>
    52cc:	f240 1199 	movw	r1, #409	; 0x199
    52d0:	2035      	movs	r0, #53	; 0x35
    52d2:	f7fb fbc7 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    52d6:	9800      	ldr	r0, [sp, #0]
    52d8:	b130      	cbz	r0, 52e8 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x7c>
    52da:	f890 1248 	ldrb.w	r1, [r0, #584]	; 0x248
    52de:	b119      	cbz	r1, 52e8 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x7c>
    52e0:	8800      	ldrh	r0, [r0, #0]
    52e2:	42b0      	cmp	r0, r6
    52e4:	d1e3      	bne.n	52ae <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x42>
    52e6:	e004      	b.n	52f2 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x86>
    52e8:	4668      	mov	r0, sp
    52ea:	f7fb fdd9 	bl	ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    52ee:	2800      	cmp	r0, #0
    52f0:	d0f1      	beq.n	52d6 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x6a>
    52f2:	702c      	strb	r4, [r5, #0]
    52f4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    52f8:	20000f60 	.word	0x20000f60
    52fc:	b510      	push	{r4, lr}
    52fe:	4604      	mov	r4, r0
    5300:	2901      	cmp	r1, #1
    5302:	d102      	bne.n	530a <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x9e>
    5304:	480a      	ldr	r0, [pc, #40]	; (5330 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xc4>)
    5306:	7800      	ldrb	r0, [r0, #0]
    5308:	b140      	cbz	r0, 531c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xb0>
    530a:	2004      	movs	r0, #4
    530c:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
    5310:	f002 fe1e 	bl	7f50 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    5314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5318:	f005 bd34 	b.w	ad84 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    531c:	2200      	movs	r2, #0
    531e:	2101      	movs	r1, #1
    5320:	4620      	mov	r0, r4
    5322:	f009 fd41 	bl	eda8 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1ce>
    5326:	f834 0f9c 	ldrh.w	r0, [r4, #156]!
    532a:	1c40      	adds	r0, r0, #1
    532c:	8020      	strh	r0, [r4, #0]
    532e:	e7ef      	b.n	5310 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xa4>
    5330:	20000f60 	.word	0x20000f60
    5334:	b510      	push	{r4, lr}
    5336:	4604      	mov	r4, r0
    5338:	4608      	mov	r0, r1
    533a:	f002 fef3 	bl	8124 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    533e:	4906      	ldr	r1, [pc, #24]	; (5358 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xec>)
    5340:	f200 709d 	addw	r0, r0, #1949	; 0x79d
    5344:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
    5348:	4408      	add	r0, r1
    534a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    534e:	fbb0 f0f1 	udiv	r0, r0, r1
    5352:	f500 709d 	add.w	r0, r0, #314	; 0x13a
    5356:	bd10      	pop	{r4, pc}
    5358:	0000edda 	.word	0x0000edda
    535c:	b570      	push	{r4, r5, r6, lr}
    535e:	0004      	movs	r4, r0
    5360:	d008      	beq.n	5374 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x108>
    5362:	2909      	cmp	r1, #9
    5364:	d25f      	bcs.n	5426 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1ba>
    5366:	e8df f001 	tbb	[pc, r1]
    536a:	3807      	.short	0x3807
    536c:	5e3c4040 	.word	0x5e3c4040
    5370:	00594e47 	.word	0x00594e47
    5374:	21b7      	movs	r1, #183	; 0xb7
    5376:	e053      	b.n	5420 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1b4>
    5378:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    537c:	b358      	cbz	r0, 53d6 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x16a>
    537e:	4620      	mov	r0, r4
    5380:	f000 f928 	bl	55d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>
    5384:	f009 fbb4 	bl	eaf0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    5388:	f200 103b 	addw	r0, r0, #315	; 0x13b
    538c:	b285      	uxth	r5, r0
    538e:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    5392:	2128      	movs	r1, #40	; 0x28
    5394:	f009 fc24 	bl	ebe0 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x6>
    5398:	182e      	adds	r6, r5, r0
    539a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    539c:	6920      	ldr	r0, [r4, #16]
    539e:	4288      	cmp	r0, r1
    53a0:	d200      	bcs.n	53a4 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x138>
    53a2:	4601      	mov	r1, r0
    53a4:	4632      	mov	r2, r6
    53a6:	4620      	mov	r0, r4
    53a8:	f008 fef1 	bl	e18e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    53ac:	4d1f      	ldr	r5, [pc, #124]	; (542c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1c0>)
    53ae:	6068      	str	r0, [r5, #4]
    53b0:	7869      	ldrb	r1, [r5, #1]
    53b2:	b121      	cbz	r1, 53be <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x152>
    53b4:	4632      	mov	r2, r6
    53b6:	4620      	mov	r0, r4
    53b8:	6921      	ldr	r1, [r4, #16]
    53ba:	f008 fee8 	bl	e18e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    53be:	60a8      	str	r0, [r5, #8]
    53c0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    53c4:	f008 ff44 	bl	e250 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    53c8:	f5a0 7095 	sub.w	r0, r0, #298	; 0x12a
    53cc:	60e8      	str	r0, [r5, #12]
    53ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    53d2:	f005 bdf1 	b.w	afb8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    53d6:	21bf      	movs	r1, #191	; 0xbf
    53d8:	e022      	b.n	5420 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1b4>
    53da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    53de:	f009 bd0d 	b.w	edfc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>
    53e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    53e6:	f002 bf87 	b.w	82f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    53ea:	4620      	mov	r0, r4
    53ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    53f0:	2201      	movs	r2, #1
    53f2:	2100      	movs	r1, #0
    53f4:	f009 bcd8 	b.w	eda8 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1ce>
    53f8:	2001      	movs	r0, #1
    53fa:	f004 fcc3 	bl	9d84 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    53fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5402:	f008 bad7 	b.w	d9b4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    5406:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    540a:	2804      	cmp	r0, #4
    540c:	d001      	beq.n	5412 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1a6>
    540e:	21fe      	movs	r1, #254	; 0xfe
    5410:	e006      	b.n	5420 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1b4>
    5412:	4620      	mov	r0, r4
    5414:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5418:	f009 bcae 	b.w	ed78 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x19e>
    541c:	f44f 7183 	mov.w	r1, #262	; 0x106
    5420:	2035      	movs	r0, #53	; 0x35
    5422:	f7fb fb1f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5426:	f44f 7185 	mov.w	r1, #266	; 0x10a
    542a:	e7f9      	b.n	5420 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1b4>
    542c:	20000f60 	.word	0x20000f60

00005430 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>:
    5430:	4806      	ldr	r0, [pc, #24]	; (544c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x1c>)
    5432:	4905      	ldr	r1, [pc, #20]	; (5448 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x18>)
    5434:	6501      	str	r1, [r0, #80]	; 0x50
    5436:	4906      	ldr	r1, [pc, #24]	; (5450 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x20>)
    5438:	6541      	str	r1, [r0, #84]	; 0x54
    543a:	4807      	ldr	r0, [pc, #28]	; (5458 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x28>)
    543c:	4905      	ldr	r1, [pc, #20]	; (5454 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x24>)
    543e:	6501      	str	r1, [r0, #80]	; 0x50
    5440:	4906      	ldr	r1, [pc, #24]	; (545c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x2c>)
    5442:	6541      	str	r1, [r0, #84]	; 0x54
    5444:	4770      	bx	lr
    5446:	0000      	.short	0x0000
    5448:	000065f9 	.word	0x000065f9
    544c:	200000f8 	.word	0x200000f8
    5450:	000066d1 	.word	0x000066d1
    5454:	0000efcf 	.word	0x0000efcf
    5458:	200001a4 	.word	0x200001a4
    545c:	0000eff9 	.word	0x0000eff9

00005460 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>:
    5460:	b570      	push	{r4, r5, r6, lr}
    5462:	4605      	mov	r5, r0
    5464:	f8b0 00d6 	ldrh.w	r0, [r0, #214]	; 0xd6
    5468:	f895 10a9 	ldrb.w	r1, [r5, #169]	; 0xa9
    546c:	b1c9      	cbz	r1, 54a2 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x42>
    546e:	f8b5 10d8 	ldrh.w	r1, [r5, #216]	; 0xd8
    5472:	1a0c      	subs	r4, r1, r0
    5474:	f1b4 0404 	subs.w	r4, r4, #4
    5478:	f895 00d4 	ldrb.w	r0, [r5, #212]	; 0xd4
    547c:	b140      	cbz	r0, 5490 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x30>
    547e:	f895 20a5 	ldrb.w	r2, [r5, #165]	; 0xa5
    5482:	2300      	movs	r3, #0
    5484:	2109      	movs	r1, #9
    5486:	f105 0088 	add.w	r0, r5, #136	; 0x88
    548a:	f008 fb37 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    548e:	b160      	cbz	r0, 54aa <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    5490:	4628      	mov	r0, r5
    5492:	f009 feb7 	bl	f204 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x408>
    5496:	b138      	cbz	r0, 54a8 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x48>
    5498:	e9d5 1032 	ldrd	r1, r0, [r5, #200]	; 0xc8
    549c:	1a40      	subs	r0, r0, r1
    549e:	1f00      	subs	r0, r0, #4
    54a0:	e003      	b.n	54aa <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    54a2:	f1c0 0402 	rsb	r4, r0, #2
    54a6:	e7e7      	b.n	5478 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x18>
    54a8:	4620      	mov	r0, r4
    54aa:	42a0      	cmp	r0, r4
    54ac:	da00      	bge.n	54b0 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x50>
    54ae:	4604      	mov	r4, r0
    54b0:	2c00      	cmp	r4, #0
    54b2:	dc01      	bgt.n	54b8 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x58>
    54b4:	2000      	movs	r0, #0
    54b6:	bd70      	pop	{r4, r5, r6, pc}
    54b8:	b2a0      	uxth	r0, r4
    54ba:	bd70      	pop	{r4, r5, r6, pc}

000054bc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>:
    54bc:	481d      	ldr	r0, [pc, #116]	; (5534 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x78>)
    54be:	491c      	ldr	r1, [pc, #112]	; (5530 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x74>)
    54c0:	6081      	str	r1, [r0, #8]
    54c2:	491d      	ldr	r1, [pc, #116]	; (5538 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x7c>)
    54c4:	61c1      	str	r1, [r0, #28]
    54c6:	491d      	ldr	r1, [pc, #116]	; (553c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x80>)
    54c8:	62c1      	str	r1, [r0, #44]	; 0x2c
    54ca:	491d      	ldr	r1, [pc, #116]	; (5540 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x84>)
    54cc:	6101      	str	r1, [r0, #16]
    54ce:	491d      	ldr	r1, [pc, #116]	; (5544 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x88>)
    54d0:	6141      	str	r1, [r0, #20]
    54d2:	491d      	ldr	r1, [pc, #116]	; (5548 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x8c>)
    54d4:	6441      	str	r1, [r0, #68]	; 0x44
    54d6:	491d      	ldr	r1, [pc, #116]	; (554c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x90>)
    54d8:	6181      	str	r1, [r0, #24]
    54da:	491d      	ldr	r1, [pc, #116]	; (5550 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x94>)
    54dc:	6301      	str	r1, [r0, #48]	; 0x30
    54de:	491d      	ldr	r1, [pc, #116]	; (5554 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x98>)
    54e0:	6241      	str	r1, [r0, #36]	; 0x24
    54e2:	491d      	ldr	r1, [pc, #116]	; (5558 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x9c>)
    54e4:	64c1      	str	r1, [r0, #76]	; 0x4c
    54e6:	491d      	ldr	r1, [pc, #116]	; (555c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa0>)
    54e8:	6481      	str	r1, [r0, #72]	; 0x48
    54ea:	491d      	ldr	r1, [pc, #116]	; (5560 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa4>)
    54ec:	6341      	str	r1, [r0, #52]	; 0x34
    54ee:	491d      	ldr	r1, [pc, #116]	; (5564 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa8>)
    54f0:	6381      	str	r1, [r0, #56]	; 0x38
    54f2:	481e      	ldr	r0, [pc, #120]	; (556c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb0>)
    54f4:	491c      	ldr	r1, [pc, #112]	; (5568 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xac>)
    54f6:	6081      	str	r1, [r0, #8]
    54f8:	491d      	ldr	r1, [pc, #116]	; (5570 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb4>)
    54fa:	61c1      	str	r1, [r0, #28]
    54fc:	491d      	ldr	r1, [pc, #116]	; (5574 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb8>)
    54fe:	6201      	str	r1, [r0, #32]
    5500:	491d      	ldr	r1, [pc, #116]	; (5578 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xbc>)
    5502:	6041      	str	r1, [r0, #4]
    5504:	491d      	ldr	r1, [pc, #116]	; (557c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc0>)
    5506:	6001      	str	r1, [r0, #0]
    5508:	491d      	ldr	r1, [pc, #116]	; (5580 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc4>)
    550a:	6281      	str	r1, [r0, #40]	; 0x28
    550c:	491d      	ldr	r1, [pc, #116]	; (5584 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc8>)
    550e:	62c1      	str	r1, [r0, #44]	; 0x2c
    5510:	491d      	ldr	r1, [pc, #116]	; (5588 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xcc>)
    5512:	60c1      	str	r1, [r0, #12]
    5514:	491d      	ldr	r1, [pc, #116]	; (558c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd0>)
    5516:	6181      	str	r1, [r0, #24]
    5518:	491d      	ldr	r1, [pc, #116]	; (5590 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd4>)
    551a:	6301      	str	r1, [r0, #48]	; 0x30
    551c:	491d      	ldr	r1, [pc, #116]	; (5594 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd8>)
    551e:	6481      	str	r1, [r0, #72]	; 0x48
    5520:	491d      	ldr	r1, [pc, #116]	; (5598 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xdc>)
    5522:	64c1      	str	r1, [r0, #76]	; 0x4c
    5524:	491d      	ldr	r1, [pc, #116]	; (559c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xe0>)
    5526:	6441      	str	r1, [r0, #68]	; 0x44
    5528:	491d      	ldr	r1, [pc, #116]	; (55a0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xe4>)
    552a:	6241      	str	r1, [r0, #36]	; 0x24
    552c:	4770      	bx	lr
    552e:	0000      	.short	0x0000
    5530:	00006a01 	.word	0x00006a01
    5534:	200000f8 	.word	0x200000f8
    5538:	00006a45 	.word	0x00006a45
    553c:	0000eedd 	.word	0x0000eedd
    5540:	00006539 	.word	0x00006539
    5544:	0000eefd 	.word	0x0000eefd
    5548:	00006905 	.word	0x00006905
    554c:	00006985 	.word	0x00006985
    5550:	00006a8d 	.word	0x00006a8d
    5554:	00006575 	.word	0x00006575
    5558:	0000eeaf 	.word	0x0000eeaf
    555c:	0000ee79 	.word	0x0000ee79
    5560:	00006939 	.word	0x00006939
    5564:	00006751 	.word	0x00006751
    5568:	0000f197 	.word	0x0000f197
    556c:	200001a4 	.word	0x200001a4
    5570:	0000f1c7 	.word	0x0000f1c7
    5574:	0000efcb 	.word	0x0000efcb
    5578:	0000ef3d 	.word	0x0000ef3d
    557c:	0000ef67 	.word	0x0000ef67
    5580:	0000f05b 	.word	0x0000f05b
    5584:	0000f08d 	.word	0x0000f08d
    5588:	0000ef91 	.word	0x0000ef91
    558c:	0000f179 	.word	0x0000f179
    5590:	0000f201 	.word	0x0000f201
    5594:	0000f027 	.word	0x0000f027
    5598:	0000f051 	.word	0x0000f051
    559c:	0000f157 	.word	0x0000f157
    55a0:	0000f023 	.word	0x0000f023

000055a4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>:
    55a4:	4806      	ldr	r0, [pc, #24]	; (55c0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c>)
    55a6:	4905      	ldr	r1, [pc, #20]	; (55bc <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18>)
    55a8:	6581      	str	r1, [r0, #88]	; 0x58
    55aa:	4906      	ldr	r1, [pc, #24]	; (55c4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x20>)
    55ac:	65c1      	str	r1, [r0, #92]	; 0x5c
    55ae:	4807      	ldr	r0, [pc, #28]	; (55cc <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x28>)
    55b0:	4905      	ldr	r1, [pc, #20]	; (55c8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24>)
    55b2:	6581      	str	r1, [r0, #88]	; 0x58
    55b4:	4906      	ldr	r1, [pc, #24]	; (55d0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2c>)
    55b6:	6601      	str	r1, [r0, #96]	; 0x60
    55b8:	4770      	bx	lr
    55ba:	0000      	.short	0x0000
    55bc:	0000675d 	.word	0x0000675d
    55c0:	200000f8 	.word	0x200000f8
    55c4:	00006895 	.word	0x00006895
    55c8:	0000f0b3 	.word	0x0000f0b3
    55cc:	200001a4 	.word	0x200001a4
    55d0:	0000f0dd 	.word	0x0000f0dd

000055d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>:
    55d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    55d6:	4d39      	ldr	r5, [pc, #228]	; (56bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe8>)
    55d8:	2600      	movs	r6, #0
    55da:	f1a5 070c 	sub.w	r7, r5, #12
    55de:	702e      	strb	r6, [r5, #0]
    55e0:	6068      	str	r0, [r5, #4]
    55e2:	807e      	strh	r6, [r7, #2]
    55e4:	707e      	strb	r6, [r7, #1]
    55e6:	4604      	mov	r4, r0
    55e8:	703e      	strb	r6, [r7, #0]
    55ea:	8800      	ldrh	r0, [r0, #0]
    55ec:	f7fb fff6 	bl	15dc <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    55f0:	6868      	ldr	r0, [r5, #4]
    55f2:	8800      	ldrh	r0, [r0, #0]
    55f4:	f7fb ff9a 	bl	152c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    55f8:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    55fc:	1c40      	adds	r0, r0, #1
    55fe:	b282      	uxth	r2, r0
    5600:	6868      	ldr	r0, [r5, #4]
    5602:	f100 0388 	add.w	r3, r0, #136	; 0x88
    5606:	4601      	mov	r1, r0
    5608:	4618      	mov	r0, r3
    560a:	f008 fc26 	bl	de5a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    560e:	b120      	cbz	r0, 561a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x46>
    5610:	f240 11c1 	movw	r1, #449	; 0x1c1
    5614:	2036      	movs	r0, #54	; 0x36
    5616:	f7fb fa25 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    561a:	f8a4 624a 	strh.w	r6, [r4, #586]	; 0x24a
    561e:	f894 00a6 	ldrb.w	r0, [r4, #166]	; 0xa6
    5622:	2825      	cmp	r0, #37	; 0x25
    5624:	d10a      	bne.n	563c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x68>
    5626:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    562a:	f8b4 1260 	ldrh.w	r1, [r4, #608]	; 0x260
    562e:	1a40      	subs	r0, r0, r1
    5630:	b200      	sxth	r0, r0
    5632:	2800      	cmp	r0, #0
    5634:	db02      	blt.n	563c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x68>
    5636:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
    563a:	e011      	b.n	5660 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c>
    563c:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
    5640:	2825      	cmp	r0, #37	; 0x25
    5642:	d003      	beq.n	564c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x78>
    5644:	2826      	cmp	r0, #38	; 0x26
    5646:	d001      	beq.n	564c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x78>
    5648:	2827      	cmp	r0, #39	; 0x27
    564a:	d10c      	bne.n	5666 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x92>
    564c:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    5650:	f8b4 1260 	ldrh.w	r1, [r4, #608]	; 0x260
    5654:	1a40      	subs	r0, r0, r1
    5656:	b200      	sxth	r0, r0
    5658:	2800      	cmp	r0, #0
    565a:	db04      	blt.n	5666 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x92>
    565c:	f884 60a5 	strb.w	r6, [r4, #165]	; 0xa5
    5660:	f000 febe 	bl	63e0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd14>
    5664:	b318      	cbz	r0, 56ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    5666:	f000 fd43 	bl	60f0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa24>
    566a:	2800      	cmp	r0, #0
    566c:	d125      	bne.n	56ba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe6>
    566e:	6868      	ldr	r0, [r5, #4]
    5670:	3088      	adds	r0, #136	; 0x88
    5672:	f009 fbd1 	bl	ee18 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5676:	b120      	cbz	r0, 5682 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xae>
    5678:	6868      	ldr	r0, [r5, #4]
    567a:	f890 012e 	ldrb.w	r0, [r0, #302]	; 0x12e
    567e:	f000 fbdd 	bl	5e3c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x770>
    5682:	480f      	ldr	r0, [pc, #60]	; (56c0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xec>)
    5684:	9000      	str	r0, [sp, #0]
    5686:	e9d7 0103 	ldrd	r0, r1, [r7, #12]
    568a:	4b0e      	ldr	r3, [pc, #56]	; (56c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf0>)
    568c:	4a0e      	ldr	r2, [pc, #56]	; (56c8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf4>)
    568e:	f7fc f827 	bl	16e0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    5692:	6868      	ldr	r0, [r5, #4]
    5694:	2300      	movs	r3, #0
    5696:	2105      	movs	r1, #5
    5698:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    569c:	3088      	adds	r0, #136	; 0x88
    569e:	f008 fa2d 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    56a2:	2800      	cmp	r0, #0
    56a4:	d009      	beq.n	56ba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe6>
    56a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    56aa:	f7fc b813 	b.w	16d4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    56ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    56b2:	2100      	movs	r1, #0
    56b4:	4608      	mov	r0, r1
    56b6:	f000 bcc3 	b.w	6040 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x974>
    56ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    56bc:	200000f0 	.word	0x200000f0
    56c0:	00006041 	.word	0x00006041
    56c4:	000058a9 	.word	0x000058a9
    56c8:	00006359 	.word	0x00006359

000056cc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>:
    56cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56ce:	460d      	mov	r5, r1
    56d0:	4604      	mov	r4, r0
    56d2:	2600      	movs	r6, #0
    56d4:	e051      	b.n	577a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xae>
    56d6:	bf00      	nop
    56d8:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    56dc:	1c40      	adds	r0, r0, #1
    56de:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    56e2:	f8b4 00d6 	ldrh.w	r0, [r4, #214]	; 0xd6
    56e6:	1c40      	adds	r0, r0, #1
    56e8:	f8a4 00d6 	strh.w	r0, [r4, #214]	; 0xd6
    56ec:	4620      	mov	r0, r4
    56ee:	f009 fd89 	bl	f204 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x408>
    56f2:	b198      	cbz	r0, 571c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x50>
    56f4:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
    56f8:	1c40      	adds	r0, r0, #1
    56fa:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
    56fe:	4620      	mov	r0, r4
    5700:	f009 fbab 	bl	ee5a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    5704:	e9d4 0132 	ldrd	r0, r1, [r4, #200]	; 0xc8
    5708:	4288      	cmp	r0, r1
    570a:	d307      	bcc.n	571c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x50>
    570c:	220f      	movs	r2, #15
    570e:	491d      	ldr	r1, [pc, #116]	; (5784 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb8>)
    5710:	f504 70b0 	add.w	r0, r4, #352	; 0x160
    5714:	f8c4 60c8 	str.w	r6, [r4, #200]	; 0xc8
    5718:	f008 fd15 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    571c:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    5720:	b120      	cbz	r0, 572c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x60>
    5722:	f8b4 00dc 	ldrh.w	r0, [r4, #220]	; 0xdc
    5726:	1c40      	adds	r0, r0, #1
    5728:	f8a4 00dc 	strh.w	r0, [r4, #220]	; 0xdc
    572c:	f894 00e4 	ldrb.w	r0, [r4, #228]	; 0xe4
    5730:	b120      	cbz	r0, 573c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x70>
    5732:	f8b4 00e2 	ldrh.w	r0, [r4, #226]	; 0xe2
    5736:	1c40      	adds	r0, r0, #1
    5738:	f8a4 00e2 	strh.w	r0, [r4, #226]	; 0xe2
    573c:	f894 0138 	ldrb.w	r0, [r4, #312]	; 0x138
    5740:	f88d 0000 	strb.w	r0, [sp]
    5744:	9800      	ldr	r0, [sp, #0]
    5746:	9000      	str	r0, [sp, #0]
    5748:	f89d 0000 	ldrb.w	r0, [sp]
    574c:	b940      	cbnz	r0, 5760 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x94>
    574e:	f894 20a7 	ldrb.w	r2, [r4, #167]	; 0xa7
    5752:	2300      	movs	r3, #0
    5754:	2101      	movs	r1, #1
    5756:	f104 0088 	add.w	r0, r4, #136	; 0x88
    575a:	f008 f9cf 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    575e:	b120      	cbz	r0, 576a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9e>
    5760:	f8b4 00da 	ldrh.w	r0, [r4, #218]	; 0xda
    5764:	1c40      	adds	r0, r0, #1
    5766:	f8a4 00da 	strh.w	r0, [r4, #218]	; 0xda
    576a:	4620      	mov	r0, r4
    576c:	f000 fa30 	bl	5bd0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x504>
    5770:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    5774:	1c40      	adds	r0, r0, #1
    5776:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
    577a:	1e6d      	subs	r5, r5, #1
    577c:	b2ad      	uxth	r5, r5
    577e:	d2ab      	bcs.n	56d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc>
    5780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5782:	0000      	.short	0x0000
    5784:	0000e63d 	.word	0x0000e63d
    5788:	4411      	add	r1, r2
    578a:	78c2      	ldrb	r2, [r0, #3]
    578c:	480c      	ldr	r0, [pc, #48]	; (57c0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf4>)
    578e:	1d89      	adds	r1, r1, #6
    5790:	b289      	uxth	r1, r1
    5792:	6840      	ldr	r0, [r0, #4]
    5794:	2a01      	cmp	r2, #1
    5796:	d006      	beq.n	57a6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xda>
    5798:	b142      	cbz	r2, 57ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe0>
    579a:	2a18      	cmp	r2, #24
    579c:	d105      	bne.n	57aa <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde>
    579e:	f890 2262 	ldrb.w	r2, [r0, #610]	; 0x262
    57a2:	b132      	cbz	r2, 57b2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe6>
    57a4:	e009      	b.n	57ba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xee>
    57a6:	f8a0 125e 	strh.w	r1, [r0, #606]	; 0x25e
    57aa:	4770      	bx	lr
    57ac:	f8a0 1266 	strh.w	r1, [r0, #614]	; 0x266
    57b0:	4770      	bx	lr
    57b2:	f890 2263 	ldrb.w	r2, [r0, #611]	; 0x263
    57b6:	b902      	cbnz	r2, 57ba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xee>
    57b8:	2100      	movs	r1, #0
    57ba:	f8a0 1260 	strh.w	r1, [r0, #608]	; 0x260
    57be:	4770      	bx	lr
    57c0:	200000f0 	.word	0x200000f0
    57c4:	490b      	ldr	r1, [pc, #44]	; (57f4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x128>)
    57c6:	78c2      	ldrb	r2, [r0, #3]
    57c8:	6849      	ldr	r1, [r1, #4]
    57ca:	2a01      	cmp	r2, #1
    57cc:	d006      	beq.n	57dc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x110>
    57ce:	b15a      	cbz	r2, 57e8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c>
    57d0:	2a18      	cmp	r2, #24
    57d2:	d108      	bne.n	57e6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11a>
    57d4:	f8b1 1260 	ldrh.w	r1, [r1, #608]	; 0x260
    57d8:	f008 bc54 	b.w	e084 <sym_AYZTYWE6SD5T6ZDLITENLNSRAVS5VKE23BWONUA>
    57dc:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
    57e0:	7241      	strb	r1, [r0, #9]
    57e2:	0a09      	lsrs	r1, r1, #8
    57e4:	7281      	strb	r1, [r0, #10]
    57e6:	4770      	bx	lr
    57e8:	f8b1 1266 	ldrh.w	r1, [r1, #614]	; 0x266
    57ec:	7341      	strb	r1, [r0, #13]
    57ee:	0a09      	lsrs	r1, r1, #8
    57f0:	7381      	strb	r1, [r0, #14]
    57f2:	4770      	bx	lr
    57f4:	200000f0 	.word	0x200000f0
    57f8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    57fa:	4c2a      	ldr	r4, [pc, #168]	; (58a4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d8>)
    57fc:	2300      	movs	r3, #0
    57fe:	4619      	mov	r1, r3
    5800:	6860      	ldr	r0, [r4, #4]
    5802:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5806:	3088      	adds	r0, #136	; 0x88
    5808:	f008 f978 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    580c:	2800      	cmp	r0, #0
    580e:	d048      	beq.n	58a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5810:	6860      	ldr	r0, [r4, #4]
    5812:	f890 125c 	ldrb.w	r1, [r0, #604]	; 0x25c
    5816:	f88d 1000 	strb.w	r1, [sp]
    581a:	9900      	ldr	r1, [sp, #0]
    581c:	9100      	str	r1, [sp, #0]
    581e:	f89d 1000 	ldrb.w	r1, [sp]
    5822:	2500      	movs	r5, #0
    5824:	2900      	cmp	r1, #0
    5826:	d03c      	beq.n	58a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5828:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    582c:	f008 f9c9 	bl	dbc2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    5830:	2800      	cmp	r0, #0
    5832:	d136      	bne.n	58a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5834:	6860      	ldr	r0, [r4, #4]
    5836:	f8b0 009c 	ldrh.w	r0, [r0, #156]	; 0x9c
    583a:	280a      	cmp	r0, #10
    583c:	d931      	bls.n	58a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    583e:	4668      	mov	r0, sp
    5840:	f7fc ff30 	bl	26a4 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
    5844:	2800      	cmp	r0, #0
    5846:	d02c      	beq.n	58a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5848:	6861      	ldr	r1, [r4, #4]
    584a:	2205      	movs	r2, #5
    584c:	4668      	mov	r0, sp
    584e:	31ae      	adds	r1, #174	; 0xae
    5850:	f00a fefb 	bl	1064a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    5854:	b310      	cbz	r0, 589c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d0>
    5856:	6860      	ldr	r0, [r4, #4]
    5858:	f8d0 1258 	ldr.w	r1, [r0, #600]	; 0x258
    585c:	7808      	ldrb	r0, [r1, #0]
    585e:	b158      	cbz	r0, 5878 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1ac>
    5860:	2205      	movs	r2, #5
    5862:	4668      	mov	r0, sp
    5864:	1c49      	adds	r1, r1, #1
    5866:	f00a fef0 	bl	1064a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    586a:	2800      	cmp	r0, #0
    586c:	d119      	bne.n	58a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    586e:	6860      	ldr	r0, [r4, #4]
    5870:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    5874:	7800      	ldrb	r0, [r0, #0]
    5876:	b940      	cbnz	r0, 588a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1be>
    5878:	6860      	ldr	r0, [r4, #4]
    587a:	9900      	ldr	r1, [sp, #0]
    587c:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    5880:	f8c0 1001 	str.w	r1, [r0, #1]
    5884:	f89d 1004 	ldrb.w	r1, [sp, #4]
    5888:	7141      	strb	r1, [r0, #5]
    588a:	6860      	ldr	r0, [r4, #4]
    588c:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    5890:	7801      	ldrb	r1, [r0, #0]
    5892:	1c49      	adds	r1, r1, #1
    5894:	7001      	strb	r1, [r0, #0]
    5896:	2001      	movs	r0, #1
    5898:	f000 fe0c 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    589c:	6860      	ldr	r0, [r4, #4]
    589e:	f880 525c 	strb.w	r5, [r0, #604]	; 0x25c
    58a2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    58a4:	200000f0 	.word	0x200000f0
    58a8:	4a0c      	ldr	r2, [pc, #48]	; (58dc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x210>)
    58aa:	7851      	ldrb	r1, [r2, #1]
    58ac:	b9a1      	cbnz	r1, 58d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x20c>
    58ae:	f102 010c 	add.w	r1, r2, #12
    58b2:	2801      	cmp	r0, #1
    58b4:	6849      	ldr	r1, [r1, #4]
    58b6:	d008      	beq.n	58ca <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1fe>
    58b8:	7890      	ldrb	r0, [r2, #2]
    58ba:	0740      	lsls	r0, r0, #29
    58bc:	d503      	bpl.n	58c6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1fa>
    58be:	f891 00a7 	ldrb.w	r0, [r1, #167]	; 0xa7
    58c2:	2806      	cmp	r0, #6
    58c4:	d008      	beq.n	58d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x20c>
    58c6:	2001      	movs	r0, #1
    58c8:	4770      	bx	lr
    58ca:	f8b1 0050 	ldrh.w	r0, [r1, #80]	; 0x50
    58ce:	8e89      	ldrh	r1, [r1, #52]	; 0x34
    58d0:	4288      	cmp	r0, r1
    58d2:	d801      	bhi.n	58d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x20c>
    58d4:	f7ff bc64 	b.w	51a0 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>
    58d8:	2000      	movs	r0, #0
    58da:	4770      	bx	lr
    58dc:	200000e4 	.word	0x200000e4
    58e0:	b538      	push	{r3, r4, r5, lr}
    58e2:	4c93      	ldr	r4, [pc, #588]	; (5b30 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x464>)
    58e4:	6860      	ldr	r0, [r4, #4]
    58e6:	3088      	adds	r0, #136	; 0x88
    58e8:	f009 fa96 	bl	ee18 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    58ec:	2800      	cmp	r0, #0
    58ee:	d164      	bne.n	59ba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ee>
    58f0:	6860      	ldr	r0, [r4, #4]
    58f2:	2300      	movs	r3, #0
    58f4:	2101      	movs	r1, #1
    58f6:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
    58fa:	3088      	adds	r0, #136	; 0x88
    58fc:	f008 f8fe 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5900:	2800      	cmp	r0, #0
    5902:	d15a      	bne.n	59ba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ee>
    5904:	6860      	ldr	r0, [r4, #4]
    5906:	f890 1138 	ldrb.w	r1, [r0, #312]	; 0x138
    590a:	f88d 1000 	strb.w	r1, [sp]
    590e:	9900      	ldr	r1, [sp, #0]
    5910:	9100      	str	r1, [sp, #0]
    5912:	f89d 1000 	ldrb.w	r1, [sp]
    5916:	b109      	cbz	r1, 591c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x250>
    5918:	2002      	movs	r0, #2
    591a:	e03c      	b.n	5996 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ca>
    591c:	2500      	movs	r5, #0
    591e:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5922:	462b      	mov	r3, r5
    5924:	4629      	mov	r1, r5
    5926:	3088      	adds	r0, #136	; 0x88
    5928:	f008 f8e8 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    592c:	b128      	cbz	r0, 593a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x26e>
    592e:	6860      	ldr	r0, [r4, #4]
    5930:	f890 00d4 	ldrb.w	r0, [r0, #212]	; 0xd4
    5934:	b108      	cbz	r0, 593a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x26e>
    5936:	2012      	movs	r0, #18
    5938:	e02d      	b.n	5996 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ca>
    593a:	6860      	ldr	r0, [r4, #4]
    593c:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5940:	2a19      	cmp	r2, #25
    5942:	d027      	beq.n	5994 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2c8>
    5944:	dc06      	bgt.n	5954 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x288>
    5946:	2a03      	cmp	r2, #3
    5948:	d029      	beq.n	599e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2d2>
    594a:	2a12      	cmp	r2, #18
    594c:	d01e      	beq.n	598c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2c0>
    594e:	2a13      	cmp	r2, #19
    5950:	d104      	bne.n	595c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x290>
    5952:	e019      	b.n	5988 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2bc>
    5954:	2a24      	cmp	r2, #36	; 0x24
    5956:	d02a      	beq.n	59ae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2e2>
    5958:	2a2f      	cmp	r2, #47	; 0x2f
    595a:	d02f      	beq.n	59bc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2f0>
    595c:	2300      	movs	r3, #0
    595e:	2104      	movs	r1, #4
    5960:	3088      	adds	r0, #136	; 0x88
    5962:	f008 f8cb 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5966:	2800      	cmp	r0, #0
    5968:	d127      	bne.n	59ba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ee>
    596a:	6860      	ldr	r0, [r4, #4]
    596c:	f890 10a6 	ldrb.w	r1, [r0, #166]	; 0xa6
    5970:	291e      	cmp	r1, #30
    5972:	d048      	beq.n	5a06 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x33a>
    5974:	dc29      	bgt.n	59ca <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2fe>
    5976:	2901      	cmp	r1, #1
    5978:	d036      	beq.n	59e8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x31c>
    597a:	2902      	cmp	r1, #2
    597c:	d041      	beq.n	5a02 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x336>
    597e:	2903      	cmp	r1, #3
    5980:	d02c      	beq.n	59dc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x310>
    5982:	2904      	cmp	r1, #4
    5984:	d13c      	bne.n	5a00 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x334>
    5986:	e0b7      	b.n	5af8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x42c>
    5988:	200b      	movs	r0, #11
    598a:	e004      	b.n	5996 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ca>
    598c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5990:	f000 bca2 	b.w	62d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc0c>
    5994:	2006      	movs	r0, #6
    5996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    599a:	f000 bd8b 	b.w	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    599e:	f890 1129 	ldrb.w	r1, [r0, #297]	; 0x129
    59a2:	f880 1130 	strb.w	r1, [r0, #304]	; 0x130
    59a6:	2007      	movs	r0, #7
    59a8:	f000 fd84 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    59ac:	e009      	b.n	59c2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2f6>
    59ae:	2018      	movs	r0, #24
    59b0:	f000 fd80 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    59b4:	6860      	ldr	r0, [r4, #4]
    59b6:	f8a0 50dc 	strh.w	r5, [r0, #220]	; 0xdc
    59ba:	bd38      	pop	{r3, r4, r5, pc}
    59bc:	2001      	movs	r0, #1
    59be:	f000 fd81 	bl	64c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xdf8>
    59c2:	6860      	ldr	r0, [r4, #4]
    59c4:	f880 50a5 	strb.w	r5, [r0, #165]	; 0xa5
    59c8:	bd38      	pop	{r3, r4, r5, pc}
    59ca:	291f      	cmp	r1, #31
    59cc:	d01b      	beq.n	5a06 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x33a>
    59ce:	2922      	cmp	r1, #34	; 0x22
    59d0:	d061      	beq.n	5a96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3ca>
    59d2:	2928      	cmp	r1, #40	; 0x28
    59d4:	d071      	beq.n	5aba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3ee>
    59d6:	292f      	cmp	r1, #47	; 0x2f
    59d8:	d17d      	bne.n	5ad6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    59da:	e089      	b.n	5af0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x424>
    59dc:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    59e0:	f880 1130 	strb.w	r1, [r0, #304]	; 0x130
    59e4:	2007      	movs	r0, #7
    59e6:	e08a      	b.n	5afe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x432>
    59e8:	200c      	movs	r0, #12
    59ea:	f000 fd63 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    59ee:	6860      	ldr	r0, [r4, #4]
    59f0:	f820 5fe2 	strh.w	r5, [r0, #226]!
    59f4:	7941      	ldrb	r1, [r0, #5]
    59f6:	f041 0101 	orr.w	r1, r1, #1
    59fa:	7141      	strb	r1, [r0, #5]
    59fc:	f800 5c3c 	strb.w	r5, [r0, #-60]
    5a00:	e069      	b.n	5ad6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    5a02:	2013      	movs	r0, #19
    5a04:	e039      	b.n	5a7a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3ae>
    5a06:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    5a0a:	f88d 2000 	strb.w	r2, [sp]
    5a0e:	9a00      	ldr	r2, [sp, #0]
    5a10:	9200      	str	r2, [sp, #0]
    5a12:	f89d 2000 	ldrb.w	r2, [sp]
    5a16:	bbba      	cbnz	r2, 5a88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3bc>
    5a18:	f890 213a 	ldrb.w	r2, [r0, #314]	; 0x13a
    5a1c:	f88d 2000 	strb.w	r2, [sp]
    5a20:	9a00      	ldr	r2, [sp, #0]
    5a22:	9200      	str	r2, [sp, #0]
    5a24:	f89d 2000 	ldrb.w	r2, [sp]
    5a28:	b37a      	cbz	r2, 5a8a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3be>
    5a2a:	2925      	cmp	r1, #37	; 0x25
    5a2c:	d031      	beq.n	5a92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3c6>
    5a2e:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    5a32:	2925      	cmp	r1, #37	; 0x25
    5a34:	d02d      	beq.n	5a92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3c6>
    5a36:	2926      	cmp	r1, #38	; 0x26
    5a38:	d02b      	beq.n	5a92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3c6>
    5a3a:	2300      	movs	r3, #0
    5a3c:	f200 2262 	addw	r2, r0, #610	; 0x262
    5a40:	f500 719d 	add.w	r1, r0, #314	; 0x13a
    5a44:	f008 fb95 	bl	e172 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    5a48:	6860      	ldr	r0, [r4, #4]
    5a4a:	211f      	movs	r1, #31
    5a4c:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    5a50:	f880 513a 	strb.w	r5, [r0, #314]	; 0x13a
    5a54:	6860      	ldr	r0, [r4, #4]
    5a56:	f008 fba7 	bl	e1a8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    5a5a:	2104      	movs	r1, #4
    5a5c:	6860      	ldr	r0, [r4, #4]
    5a5e:	f009 f881 	bl	eb64 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    5a62:	f000 f867 	bl	5b34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x468>
    5a66:	6861      	ldr	r1, [r4, #4]
    5a68:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    5a6c:	8bc2      	ldrh	r2, [r0, #30]
    5a6e:	f8a1 2130 	strh.w	r2, [r1, #304]	; 0x130
    5a72:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    5a74:	f8a1 0132 	strh.w	r0, [r1, #306]	; 0x132
    5a78:	2015      	movs	r0, #21
    5a7a:	f000 fd1b 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    5a7e:	6860      	ldr	r0, [r4, #4]
    5a80:	f8a0 50e2 	strh.w	r5, [r0, #226]	; 0xe2
    5a84:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    5a88:	e025      	b.n	5ad6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    5a8a:	e7ff      	b.n	5a8c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3c0>
    5a8c:	291f      	cmp	r1, #31
    5a8e:	d0e1      	beq.n	5a54 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x388>
    5a90:	e021      	b.n	5ad6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    5a92:	2301      	movs	r3, #1
    5a94:	e7d2      	b.n	5a3c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x370>
    5a96:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    5a9a:	2901      	cmp	r1, #1
    5a9c:	d108      	bne.n	5ab0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3e4>
    5a9e:	f890 1145 	ldrb.w	r1, [r0, #325]	; 0x145
    5aa2:	f88d 1000 	strb.w	r1, [sp]
    5aa6:	9900      	ldr	r1, [sp, #0]
    5aa8:	9100      	str	r1, [sp, #0]
    5aaa:	f89d 1000 	ldrb.w	r1, [sp]
    5aae:	b129      	cbz	r1, 5abc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3f0>
    5ab0:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    5ab4:	2902      	cmp	r1, #2
    5ab6:	d006      	beq.n	5ac6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3fa>
    5ab8:	e00d      	b.n	5ad6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    5aba:	e01f      	b.n	5afc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x430>
    5abc:	f8d0 1062 	ldr.w	r1, [r0, #98]	; 0x62
    5ac0:	f8d0 0146 	ldr.w	r0, [r0, #326]	; 0x146
    5ac4:	e002      	b.n	5acc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x400>
    5ac6:	f850 1f62 	ldr.w	r1, [r0, #98]!
    5aca:	6840      	ldr	r0, [r0, #4]
    5acc:	f000 fd04 	bl	64d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe0c>
    5ad0:	2018      	movs	r0, #24
    5ad2:	f000 fcef 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    5ad6:	6860      	ldr	r0, [r4, #4]
    5ad8:	3088      	adds	r0, #136	; 0x88
    5ada:	f009 f99d 	bl	ee18 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5ade:	2800      	cmp	r0, #0
    5ae0:	f47f af72 	bne.w	59c8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2fc>
    5ae4:	6860      	ldr	r0, [r4, #4]
    5ae6:	3088      	adds	r0, #136	; 0x88
    5ae8:	f009 f996 	bl	ee18 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5aec:	b158      	cbz	r0, 5b06 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x43a>
    5aee:	e015      	b.n	5b1c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x450>
    5af0:	2000      	movs	r0, #0
    5af2:	f000 fce7 	bl	64c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xdf8>
    5af6:	e004      	b.n	5b02 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x436>
    5af8:	2009      	movs	r0, #9
    5afa:	e000      	b.n	5afe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x432>
    5afc:	2024      	movs	r0, #36	; 0x24
    5afe:	f000 fcd9 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    5b02:	6860      	ldr	r0, [r4, #4]
    5b04:	e7be      	b.n	5a84 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3b8>
    5b06:	6860      	ldr	r0, [r4, #4]
    5b08:	2300      	movs	r3, #0
    5b0a:	4619      	mov	r1, r3
    5b0c:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5b10:	3088      	adds	r0, #136	; 0x88
    5b12:	f007 fff3 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5b16:	b108      	cbz	r0, 5b1c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x450>
    5b18:	f000 fb14 	bl	6144 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa78>
    5b1c:	6860      	ldr	r0, [r4, #4]
    5b1e:	3088      	adds	r0, #136	; 0x88
    5b20:	f009 f97a 	bl	ee18 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5b24:	2800      	cmp	r0, #0
    5b26:	d1db      	bne.n	5ae0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x414>
    5b28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5b2c:	f7ff be64 	b.w	57f8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12c>
    5b30:	200000f0 	.word	0x200000f0
    5b34:	4808      	ldr	r0, [pc, #32]	; (5b58 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x48c>)
    5b36:	6843      	ldr	r3, [r0, #4]
    5b38:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
    5b3c:	2801      	cmp	r0, #1
    5b3e:	d006      	beq.n	5b4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x482>
    5b40:	f503 72b5 	add.w	r2, r3, #362	; 0x16a
    5b44:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    5b48:	8818      	ldrh	r0, [r3, #0]
    5b4a:	f7fd b893 	b.w	2c74 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    5b4e:	2002      	movs	r0, #2
    5b50:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
    5b54:	4770      	bx	lr
    5b56:	0000      	.short	0x0000
    5b58:	200000f0 	.word	0x200000f0
    5b5c:	b538      	push	{r3, r4, r5, lr}
    5b5e:	4d1a      	ldr	r5, [pc, #104]	; (5bc8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4fc>)
    5b60:	686b      	ldr	r3, [r5, #4]
    5b62:	f893 10a5 	ldrb.w	r1, [r3, #165]	; 0xa5
    5b66:	2917      	cmp	r1, #23
    5b68:	d001      	beq.n	5b6e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4a2>
    5b6a:	2914      	cmp	r1, #20
    5b6c:	d102      	bne.n	5b74 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4a8>
    5b6e:	f893 10e6 	ldrb.w	r1, [r3, #230]	; 0xe6
    5b72:	b109      	cbz	r1, 5b78 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4ac>
    5b74:	2002      	movs	r0, #2
    5b76:	bd38      	pop	{r3, r4, r5, pc}
    5b78:	2400      	movs	r4, #0
    5b7a:	f883 40e5 	strb.w	r4, [r3, #229]	; 0xe5
    5b7e:	f883 40e0 	strb.w	r4, [r3, #224]	; 0xe0
    5b82:	f893 121a 	ldrb.w	r1, [r3, #538]	; 0x21a
    5b86:	f88d 1000 	strb.w	r1, [sp]
    5b8a:	9900      	ldr	r1, [sp, #0]
    5b8c:	9100      	str	r1, [sp, #0]
    5b8e:	f89d 1000 	ldrb.w	r1, [sp]
    5b92:	b121      	cbz	r1, 5b9e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4d2>
    5b94:	f240 31df 	movw	r1, #991	; 0x3df
    5b98:	2036      	movs	r0, #54	; 0x36
    5b9a:	f7fa ff63 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b9e:	8819      	ldrh	r1, [r3, #0]
    5ba0:	f8a3 121e 	strh.w	r1, [r3, #542]	; 0x21e
    5ba4:	f883 021c 	strb.w	r0, [r3, #540]	; 0x21c
    5ba8:	f883 4220 	strb.w	r4, [r3, #544]	; 0x220
    5bac:	f883 4278 	strb.w	r4, [r3, #632]	; 0x278
    5bb0:	f203 2012 	addw	r0, r3, #530	; 0x212
    5bb4:	220c      	movs	r2, #12
    5bb6:	4905      	ldr	r1, [pc, #20]	; (5bcc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x500>)
    5bb8:	f008 fab1 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5bbc:	6868      	ldr	r0, [r5, #4]
    5bbe:	f880 40a5 	strb.w	r4, [r0, #165]	; 0xa5
    5bc2:	2000      	movs	r0, #0
    5bc4:	bd38      	pop	{r3, r4, r5, pc}
    5bc6:	0000      	.short	0x0000
    5bc8:	200000f0 	.word	0x200000f0
    5bcc:	0000e5a1 	.word	0x0000e5a1
    5bd0:	b570      	push	{r4, r5, r6, lr}
    5bd2:	4604      	mov	r4, r0
    5bd4:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    5bd8:	2500      	movs	r5, #0
    5bda:	280b      	cmp	r0, #11
    5bdc:	d001      	beq.n	5be2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x516>
    5bde:	280c      	cmp	r0, #12
    5be0:	d108      	bne.n	5bf4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x528>
    5be2:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
    5be6:	f8b4 225e 	ldrh.w	r2, [r4, #606]	; 0x25e
    5bea:	1a89      	subs	r1, r1, r2
    5bec:	1c49      	adds	r1, r1, #1
    5bee:	0409      	lsls	r1, r1, #16
    5bf0:	0c09      	lsrs	r1, r1, #16
    5bf2:	d032      	beq.n	5c5a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x58e>
    5bf4:	280d      	cmp	r0, #13
    5bf6:	d001      	beq.n	5bfc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x530>
    5bf8:	280e      	cmp	r0, #14
    5bfa:	d12d      	bne.n	5c58 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x58c>
    5bfc:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    5c00:	f8b4 1266 	ldrh.w	r1, [r4, #614]	; 0x266
    5c04:	1a40      	subs	r0, r0, r1
    5c06:	1c40      	adds	r0, r0, #1
    5c08:	0400      	lsls	r0, r0, #16
    5c0a:	0c00      	lsrs	r0, r0, #16
    5c0c:	d124      	bne.n	5c58 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x58c>
    5c0e:	8820      	ldrh	r0, [r4, #0]
    5c10:	f8a4 01d2 	strh.w	r0, [r4, #466]	; 0x1d2
    5c14:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
    5c18:	f007 ff57 	bl	daca <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    5c1c:	f8a4 01d4 	strh.w	r0, [r4, #468]	; 0x1d4
    5c20:	f8b4 0274 	ldrh.w	r0, [r4, #628]	; 0x274
    5c24:	f8a4 01d6 	strh.w	r0, [r4, #470]	; 0x1d6
    5c28:	f8b4 0276 	ldrh.w	r0, [r4, #630]	; 0x276
    5c2c:	f8a4 01d8 	strh.w	r0, [r4, #472]	; 0x1d8
    5c30:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
    5c34:	2209      	movs	r2, #9
    5c36:	4919      	ldr	r1, [pc, #100]	; (5c9c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5d0>)
    5c38:	f504 70e3 	add.w	r0, r4, #454	; 0x1c6
    5c3c:	f008 fa83 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    5c40:	f884 5264 	strb.w	r5, [r4, #612]	; 0x264
    5c44:	2102      	movs	r1, #2
    5c46:	4620      	mov	r0, r4
    5c48:	f7fc fc86 	bl	2558 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    5c4c:	2103      	movs	r1, #3
    5c4e:	4620      	mov	r0, r4
    5c50:	f008 ff88 	bl	eb64 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    5c54:	f884 50a5 	strb.w	r5, [r4, #165]	; 0xa5
    5c58:	bd70      	pop	{r4, r5, r6, pc}
    5c5a:	f8d4 0258 	ldr.w	r0, [r4, #600]	; 0x258
    5c5e:	f8d0 1001 	ldr.w	r1, [r0, #1]
    5c62:	f8c4 10ae 	str.w	r1, [r4, #174]	; 0xae
    5c66:	7940      	ldrb	r0, [r0, #5]
    5c68:	f884 00b2 	strb.w	r0, [r4, #178]	; 0xb2
    5c6c:	2103      	movs	r1, #3
    5c6e:	4620      	mov	r0, r4
    5c70:	f7fc fc72 	bl	2558 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    5c74:	f8d4 0258 	ldr.w	r0, [r4, #600]	; 0x258
    5c78:	7800      	ldrb	r0, [r0, #0]
    5c7a:	b148      	cbz	r0, 5c90 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5c4>
    5c7c:	2101      	movs	r1, #1
    5c7e:	20fe      	movs	r0, #254	; 0xfe
    5c80:	f001 f858 	bl	6d34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1668>
    5c84:	f884 50a5 	strb.w	r5, [r4, #165]	; 0xa5
    5c88:	20ff      	movs	r0, #255	; 0xff
    5c8a:	f884 00fe 	strb.w	r0, [r4, #254]	; 0xfe
    5c8e:	bd70      	pop	{r4, r5, r6, pc}
    5c90:	f240 2152 	movw	r1, #594	; 0x252
    5c94:	2036      	movs	r0, #54	; 0x36
    5c96:	f7fa fee5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c9a:	0000      	.short	0x0000
    5c9c:	0000e563 	.word	0x0000e563
    5ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ca2:	4d28      	ldr	r5, [pc, #160]	; (5d44 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x678>)
    5ca4:	f04f 0600 	mov.w	r6, #0
    5ca8:	f105 040c 	add.w	r4, r5, #12
    5cac:	8869      	ldrh	r1, [r5, #2]
    5cae:	0748      	lsls	r0, r1, #29
    5cb0:	d510      	bpl.n	5cd4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x608>
    5cb2:	6860      	ldr	r0, [r4, #4]
    5cb4:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5cb8:	2a03      	cmp	r2, #3
    5cba:	d004      	beq.n	5cc6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5fa>
    5cbc:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
    5cc0:	2a06      	cmp	r2, #6
    5cc2:	d107      	bne.n	5cd4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x608>
    5cc4:	e002      	b.n	5ccc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x600>
    5cc6:	f240 7109 	movw	r1, #1801	; 0x709
    5cca:	e025      	b.n	5d18 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x64c>
    5ccc:	2201      	movs	r2, #1
    5cce:	702a      	strb	r2, [r5, #0]
    5cd0:	f880 60a7 	strb.w	r6, [r0, #167]	; 0xa7
    5cd4:	0788      	lsls	r0, r1, #30
    5cd6:	d50a      	bpl.n	5cee <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x622>
    5cd8:	6868      	ldr	r0, [r5, #4]
    5cda:	78c0      	ldrb	r0, [r0, #3]
    5cdc:	282b      	cmp	r0, #43	; 0x2b
    5cde:	d219      	bcs.n	5d14 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x648>
    5ce0:	4919      	ldr	r1, [pc, #100]	; (5d48 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x67c>)
    5ce2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    5ce6:	b1a9      	cbz	r1, 5d14 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x648>
    5ce8:	4816      	ldr	r0, [pc, #88]	; (5d44 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x678>)
    5cea:	300c      	adds	r0, #12
    5cec:	4788      	blx	r1
    5cee:	f000 f86d 	bl	5dcc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x700>
    5cf2:	f000 f82b 	bl	5d4c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x680>
    5cf6:	4607      	mov	r7, r0
    5cf8:	7868      	ldrb	r0, [r5, #1]
    5cfa:	0700      	lsls	r0, r0, #28
    5cfc:	d51c      	bpl.n	5d38 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x66c>
    5cfe:	6860      	ldr	r0, [r4, #4]
    5d00:	2300      	movs	r3, #0
    5d02:	2105      	movs	r1, #5
    5d04:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5d08:	3088      	adds	r0, #136	; 0x88
    5d0a:	f007 fef7 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5d0e:	b130      	cbz	r0, 5d1e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x652>
    5d10:	2708      	movs	r7, #8
    5d12:	e011      	b.n	5d38 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x66c>
    5d14:	f640 0149 	movw	r1, #2121	; 0x849
    5d18:	2036      	movs	r0, #54	; 0x36
    5d1a:	f7fa fea3 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d1e:	4669      	mov	r1, sp
    5d20:	2003      	movs	r0, #3
    5d22:	9600      	str	r6, [sp, #0]
    5d24:	f7fb fdb2 	bl	188c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5d28:	9800      	ldr	r0, [sp, #0]
    5d2a:	b128      	cbz	r0, 5d38 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x66c>
    5d2c:	7206      	strb	r6, [r0, #8]
    5d2e:	222a      	movs	r2, #42	; 0x2a
    5d30:	6861      	ldr	r1, [r4, #4]
    5d32:	9800      	ldr	r0, [sp, #0]
    5d34:	f008 f9f3 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5d38:	6860      	ldr	r0, [r4, #4]
    5d3a:	f7ff ff49 	bl	5bd0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x504>
    5d3e:	4638      	mov	r0, r7
    5d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5d42:	0000      	.short	0x0000
    5d44:	200000e4 	.word	0x200000e4
    5d48:	200001a4 	.word	0x200001a4
    5d4c:	b570      	push	{r4, r5, r6, lr}
    5d4e:	4c1d      	ldr	r4, [pc, #116]	; (5dc4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6f8>)
    5d50:	2000      	movs	r0, #0
    5d52:	78a1      	ldrb	r1, [r4, #2]
    5d54:	07c9      	lsls	r1, r1, #31
    5d56:	d01d      	beq.n	5d94 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6c8>
    5d58:	68a0      	ldr	r0, [r4, #8]
    5d5a:	2300      	movs	r3, #0
    5d5c:	2105      	movs	r1, #5
    5d5e:	78c5      	ldrb	r5, [r0, #3]
    5d60:	f104 000c 	add.w	r0, r4, #12
    5d64:	6840      	ldr	r0, [r0, #4]
    5d66:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5d6a:	3088      	adds	r0, #136	; 0x88
    5d6c:	f007 fec6 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5d70:	b188      	cbz	r0, 5d96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5d72:	2d06      	cmp	r5, #6
    5d74:	d00f      	beq.n	5d96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5d76:	dc06      	bgt.n	5d86 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ba>
    5d78:	2d02      	cmp	r5, #2
    5d7a:	d00c      	beq.n	5d96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5d7c:	2d04      	cmp	r5, #4
    5d7e:	d00a      	beq.n	5d96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5d80:	2d05      	cmp	r5, #5
    5d82:	d106      	bne.n	5d92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6c6>
    5d84:	e007      	b.n	5d96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5d86:	2d0b      	cmp	r5, #11
    5d88:	d005      	beq.n	5d96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5d8a:	2d0d      	cmp	r5, #13
    5d8c:	d003      	beq.n	5d96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5d8e:	2d11      	cmp	r5, #17
    5d90:	d001      	beq.n	5d96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5d92:	2008      	movs	r0, #8
    5d94:	bd70      	pop	{r4, r5, r6, pc}
    5d96:	68a0      	ldr	r0, [r4, #8]
    5d98:	f7fc fd16 	bl	27c8 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>
    5d9c:	b160      	cbz	r0, 5db8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ec>
    5d9e:	68a0      	ldr	r0, [r4, #8]
    5da0:	78c0      	ldrb	r0, [r0, #3]
    5da2:	282b      	cmp	r0, #43	; 0x2b
    5da4:	d208      	bcs.n	5db8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ec>
    5da6:	4908      	ldr	r1, [pc, #32]	; (5dc8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6fc>)
    5da8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    5dac:	b121      	cbz	r1, 5db8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ec>
    5dae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5db2:	4804      	ldr	r0, [pc, #16]	; (5dc4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6f8>)
    5db4:	300c      	adds	r0, #12
    5db6:	4708      	bx	r1
    5db8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5dbc:	2000      	movs	r0, #0
    5dbe:	f000 bbdf 	b.w	6580 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb4>
    5dc2:	0000      	.short	0x0000
    5dc4:	200000e4 	.word	0x200000e4
    5dc8:	200000f8 	.word	0x200000f8
    5dcc:	b570      	push	{r4, r5, r6, lr}
    5dce:	4d1a      	ldr	r5, [pc, #104]	; (5e38 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x76c>)
    5dd0:	78a8      	ldrb	r0, [r5, #2]
    5dd2:	0700      	lsls	r0, r0, #28
    5dd4:	d52e      	bpl.n	5e34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x768>
    5dd6:	f105 040c 	add.w	r4, r5, #12
    5dda:	2100      	movs	r1, #0
    5ddc:	6860      	ldr	r0, [r4, #4]
    5dde:	f890 012e 	ldrb.w	r0, [r0, #302]	; 0x12e
    5de2:	f000 ffa7 	bl	6d34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1668>
    5de6:	6860      	ldr	r0, [r4, #4]
    5de8:	3088      	adds	r0, #136	; 0x88
    5dea:	f009 f815 	bl	ee18 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5dee:	b160      	cbz	r0, 5e0a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x73e>
    5df0:	6860      	ldr	r0, [r4, #4]
    5df2:	21fe      	movs	r1, #254	; 0xfe
    5df4:	f880 112e 	strb.w	r1, [r0, #302]	; 0x12e
    5df8:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    5dfc:	290b      	cmp	r1, #11
    5dfe:	d009      	beq.n	5e14 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x748>
    5e00:	290d      	cmp	r1, #13
    5e02:	d009      	beq.n	5e18 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x74c>
    5e04:	2925      	cmp	r1, #37	; 0x25
    5e06:	d10c      	bne.n	5e22 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x756>
    5e08:	e008      	b.n	5e1c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x750>
    5e0a:	f640 0155 	movw	r1, #2133	; 0x855
    5e0e:	2036      	movs	r0, #54	; 0x36
    5e10:	f7fa fe28 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e14:	210c      	movs	r1, #12
    5e16:	e002      	b.n	5e1e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x752>
    5e18:	210e      	movs	r1, #14
    5e1a:	e000      	b.n	5e1e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x752>
    5e1c:	2126      	movs	r1, #38	; 0x26
    5e1e:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    5e22:	f890 10a7 	ldrb.w	r1, [r0, #167]	; 0xa7
    5e26:	2907      	cmp	r1, #7
    5e28:	d104      	bne.n	5e34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x768>
    5e2a:	2102      	movs	r1, #2
    5e2c:	7029      	strb	r1, [r5, #0]
    5e2e:	2100      	movs	r1, #0
    5e30:	f880 10a7 	strb.w	r1, [r0, #167]	; 0xa7
    5e34:	bd70      	pop	{r4, r5, r6, pc}
    5e36:	0000      	.short	0x0000
    5e38:	200000e4 	.word	0x200000e4
    5e3c:	b538      	push	{r3, r4, r5, lr}
    5e3e:	4605      	mov	r5, r0
    5e40:	4668      	mov	r0, sp
    5e42:	f7fb fbb5 	bl	15b0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    5e46:	b348      	cbz	r0, 5e9c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x7d0>
    5e48:	2222      	movs	r2, #34	; 0x22
    5e4a:	2100      	movs	r1, #0
    5e4c:	9800      	ldr	r0, [sp, #0]
    5e4e:	f00a fc88 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5e52:	2103      	movs	r1, #3
    5e54:	9800      	ldr	r0, [sp, #0]
    5e56:	f008 f92f 	bl	e0b8 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    5e5a:	9800      	ldr	r0, [sp, #0]
    5e5c:	7801      	ldrb	r1, [r0, #0]
    5e5e:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    5e62:	7001      	strb	r1, [r0, #0]
    5e64:	4629      	mov	r1, r5
    5e66:	f7fc fcbf 	bl	27e8 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>
    5e6a:	2100      	movs	r1, #0
    5e6c:	4c73      	ldr	r4, [pc, #460]	; (603c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x970>)
    5e6e:	2d26      	cmp	r5, #38	; 0x26
    5e70:	d277      	bcs.n	5f62 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x896>
    5e72:	e8df f005 	tbb	[pc, r5]
    5e76:	222a      	.short	0x222a
    5e78:	dbdb5216 	.word	0xdbdb5216
    5e7c:	7b771cd4 	.word	0x7b771cd4
    5e80:	db6bd4d4 	.word	0xdb6bd4d4
    5e84:	bcdbdbdb 	.word	0xbcdbdbdb
    5e88:	8080d4d4 	.word	0x8080d4d4
    5e8c:	dba3db99 	.word	0xdba3db99
    5e90:	dbdbdbdb 	.word	0xdbdbdbdb
    5e94:	dbdbdbdb 	.word	0xdbdbdbdb
    5e98:	b6b6b6db 	.word	0xb6b6b6db
    5e9c:	f640 217b 	movw	r1, #2683	; 0xa7b
    5ea0:	e0c9      	b.n	6036 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x96a>
    5ea2:	6860      	ldr	r0, [r4, #4]
    5ea4:	9900      	ldr	r1, [sp, #0]
    5ea6:	f890 0139 	ldrb.w	r0, [r0, #313]	; 0x139
    5eaa:	7108      	strb	r0, [r1, #4]
    5eac:	e0b7      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5eae:	6861      	ldr	r1, [r4, #4]
    5eb0:	9800      	ldr	r0, [sp, #0]
    5eb2:	f891 1130 	ldrb.w	r1, [r1, #304]	; 0x130
    5eb6:	7101      	strb	r1, [r0, #4]
    5eb8:	e0b1      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5eba:	6860      	ldr	r0, [r4, #4]
    5ebc:	f8d0 1258 	ldr.w	r1, [r0, #600]	; 0x258
    5ec0:	9800      	ldr	r0, [sp, #0]
    5ec2:	1c49      	adds	r1, r1, #1
    5ec4:	f008 f889 	bl	dfda <sym_UODFQA44OAUGQWVRPEK2IIKSCIFD37IIPLUYFSI>
    5ec8:	e0a9      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5eca:	6860      	ldr	r0, [r4, #4]
    5ecc:	9d00      	ldr	r5, [sp, #0]
    5ece:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
    5ed2:	f8b0 0268 	ldrh.w	r0, [r0, #616]	; 0x268
    5ed6:	f007 ff7f 	bl	ddd8 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    5eda:	7128      	strb	r0, [r5, #4]
    5edc:	6860      	ldr	r0, [r4, #4]
    5ede:	9d00      	ldr	r5, [sp, #0]
    5ee0:	f500 701b 	add.w	r0, r0, #620	; 0x26c
    5ee4:	c803      	ldmia	r0, {r0, r1}
    5ee6:	f007 ff60 	bl	ddaa <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    5eea:	7168      	strb	r0, [r5, #5]
    5eec:	0a00      	lsrs	r0, r0, #8
    5eee:	71a8      	strb	r0, [r5, #6]
    5ef0:	6860      	ldr	r0, [r4, #4]
    5ef2:	9d00      	ldr	r5, [sp, #0]
    5ef4:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
    5ef8:	f007 fde7 	bl	daca <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    5efc:	71e8      	strb	r0, [r5, #7]
    5efe:	0a00      	lsrs	r0, r0, #8
    5f00:	7228      	strb	r0, [r5, #8]
    5f02:	6862      	ldr	r2, [r4, #4]
    5f04:	9800      	ldr	r0, [sp, #0]
    5f06:	f8b2 1274 	ldrh.w	r1, [r2, #628]	; 0x274
    5f0a:	7241      	strb	r1, [r0, #9]
    5f0c:	0a09      	lsrs	r1, r1, #8
    5f0e:	7281      	strb	r1, [r0, #10]
    5f10:	f8b2 1276 	ldrh.w	r1, [r2, #630]	; 0x276
    5f14:	f008 f866 	bl	dfe4 <sym_ZZDNF2NNUMTRE4Y6NUTK3CJU3EQI64HKYHSTDAI>
    5f18:	e081      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5f1a:	6861      	ldr	r1, [r4, #4]
    5f1c:	9800      	ldr	r0, [sp, #0]
    5f1e:	f201 2179 	addw	r1, r1, #633	; 0x279
    5f22:	f008 f874 	bl	e00e <sym_NSDJKDRKPUUB5EAI3OMDTFOWZBLYJSPI3VQSNXQ>
    5f26:	6861      	ldr	r1, [r4, #4]
    5f28:	9800      	ldr	r0, [sp, #0]
    5f2a:	f201 2181 	addw	r1, r1, #641	; 0x281
    5f2e:	f008 f867 	bl	e000 <sym_ZLXXGUFNBKYTUHSDKKKU4A6O7RMXODI4OQA6IUY>
    5f32:	6861      	ldr	r1, [r4, #4]
    5f34:	9800      	ldr	r0, [sp, #0]
    5f36:	f201 2193 	addw	r1, r1, #659	; 0x293
    5f3a:	f008 f86d 	bl	e018 <sym_LPOR4PC6XUIXDNEKJLY3JL3BKNV2UZG2OR7FAKQ>
    5f3e:	6861      	ldr	r1, [r4, #4]
    5f40:	9800      	ldr	r0, [sp, #0]
    5f42:	f501 7190 	add.w	r1, r1, #288	; 0x120
    5f46:	f008 f85e 	bl	e006 <sym_3LF2RG2XP7QRT5FAEZFOPL4L5RIBP3MCQ5PY7XY>
    5f4a:	e068      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5f4c:	9800      	ldr	r0, [sp, #0]
    5f4e:	220c      	movs	r2, #12
    5f50:	7102      	strb	r2, [r0, #4]
    5f52:	2259      	movs	r2, #89	; 0x59
    5f54:	7142      	strb	r2, [r0, #5]
    5f56:	7181      	strb	r1, [r0, #6]
    5f58:	214b      	movs	r1, #75	; 0x4b
    5f5a:	71c1      	strb	r1, [r0, #7]
    5f5c:	2112      	movs	r1, #18
    5f5e:	7201      	strb	r1, [r0, #8]
    5f60:	e05d      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5f62:	e063      	b.n	602c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x960>
    5f64:	9800      	ldr	r0, [sp, #0]
    5f66:	f7fc ff73 	bl	2e50 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>
    5f6a:	e058      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5f6c:	4833      	ldr	r0, [pc, #204]	; (603c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x970>)
    5f6e:	9900      	ldr	r1, [sp, #0]
    5f70:	f7fc ffc2 	bl	2ef8 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>
    5f74:	e053      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5f76:	6860      	ldr	r0, [r4, #4]
    5f78:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    5f7c:	9800      	ldr	r0, [sp, #0]
    5f7e:	f008 f8ab 	bl	e0d8 <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>
    5f82:	6860      	ldr	r0, [r4, #4]
    5f84:	f8b0 1130 	ldrh.w	r1, [r0, #304]	; 0x130
    5f88:	9800      	ldr	r0, [sp, #0]
    5f8a:	f008 f8a9 	bl	e0e0 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>
    5f8e:	6860      	ldr	r0, [r4, #4]
    5f90:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    5f94:	9800      	ldr	r0, [sp, #0]
    5f96:	f008 f897 	bl	e0c8 <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>
    5f9a:	6860      	ldr	r0, [r4, #4]
    5f9c:	f8b0 1132 	ldrh.w	r1, [r0, #306]	; 0x132
    5fa0:	9800      	ldr	r0, [sp, #0]
    5fa2:	f008 f895 	bl	e0d0 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>
    5fa6:	e03a      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5fa8:	6861      	ldr	r1, [r4, #4]
    5faa:	9800      	ldr	r0, [sp, #0]
    5fac:	f891 1146 	ldrb.w	r1, [r1, #326]	; 0x146
    5fb0:	7101      	strb	r1, [r0, #4]
    5fb2:	6861      	ldr	r1, [r4, #4]
    5fb4:	f891 1147 	ldrb.w	r1, [r1, #327]	; 0x147
    5fb8:	7141      	strb	r1, [r0, #5]
    5fba:	e030      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5fbc:	6860      	ldr	r0, [r4, #4]
    5fbe:	f890 0263 	ldrb.w	r0, [r0, #611]	; 0x263
    5fc2:	f007 fe50 	bl	dc66 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    5fc6:	4601      	mov	r1, r0
    5fc8:	9800      	ldr	r0, [sp, #0]
    5fca:	f008 f861 	bl	e090 <sym_SG4OPFPHWHCVU6FHRG2ZQ5GV7RHUGBHEKN6N55A>
    5fce:	6860      	ldr	r0, [r4, #4]
    5fd0:	f890 0262 	ldrb.w	r0, [r0, #610]	; 0x262
    5fd4:	f007 fe47 	bl	dc66 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    5fd8:	4601      	mov	r1, r0
    5fda:	9800      	ldr	r0, [sp, #0]
    5fdc:	f008 f856 	bl	e08c <sym_SAWOREXGWRJNX5IOUMHBRACZ6DWRXOAHPPFX4TA>
    5fe0:	e01d      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5fe2:	4a16      	ldr	r2, [pc, #88]	; (603c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x970>)
    5fe4:	4628      	mov	r0, r5
    5fe6:	9900      	ldr	r1, [sp, #0]
    5fe8:	f009 f947 	bl	f27a <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>
    5fec:	e017      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5fee:	6860      	ldr	r0, [r4, #4]
    5ff0:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    5ff4:	b141      	cbz	r1, 6008 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x93c>
    5ff6:	f890 112d 	ldrb.w	r1, [r0, #301]	; 0x12d
    5ffa:	9800      	ldr	r0, [sp, #0]
    5ffc:	f008 f856 	bl	e0ac <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    6000:	6860      	ldr	r0, [r4, #4]
    6002:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    6006:	e007      	b.n	6018 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x94c>
    6008:	f890 112b 	ldrb.w	r1, [r0, #299]	; 0x12b
    600c:	9800      	ldr	r0, [sp, #0]
    600e:	f008 f84d 	bl	e0ac <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    6012:	6860      	ldr	r0, [r4, #4]
    6014:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
    6018:	9800      	ldr	r0, [sp, #0]
    601a:	f008 f84b 	bl	e0b4 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>
    601e:	f7fb faa1 	bl	1564 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    6022:	b130      	cbz	r0, 6032 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x966>
    6024:	9800      	ldr	r0, [sp, #0]
    6026:	f7ff fbcd 	bl	57c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8>
    602a:	bd38      	pop	{r3, r4, r5, pc}
    602c:	f640 314e 	movw	r1, #2894	; 0xb4e
    6030:	e001      	b.n	6036 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x96a>
    6032:	f640 3154 	movw	r1, #2900	; 0xb54
    6036:	2036      	movs	r0, #54	; 0x36
    6038:	f7fa fd14 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    603c:	200000f0 	.word	0x200000f0
    6040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6044:	4e28      	ldr	r6, [pc, #160]	; (60e8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa1c>)
    6046:	4680      	mov	r8, r0
    6048:	460d      	mov	r5, r1
    604a:	8870      	ldrh	r0, [r6, #2]
    604c:	f106 040c 	add.w	r4, r6, #12
    6050:	05c1      	lsls	r1, r0, #23
    6052:	6860      	ldr	r0, [r4, #4]
    6054:	f04f 0700 	mov.w	r7, #0
    6058:	d502      	bpl.n	6060 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x994>
    605a:	f8a0 70d6 	strh.w	r7, [r0, #214]	; 0xd6
    605e:	e004      	b.n	606a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x99e>
    6060:	f8b0 10d6 	ldrh.w	r1, [r0, #214]	; 0xd6
    6064:	1c49      	adds	r1, r1, #1
    6066:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
    606a:	f009 f8cb 	bl	f204 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x408>
    606e:	b1f0      	cbz	r0, 60ae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9e2>
    6070:	8870      	ldrh	r0, [r6, #2]
    6072:	0500      	lsls	r0, r0, #20
    6074:	d506      	bpl.n	6084 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9b8>
    6076:	6860      	ldr	r0, [r4, #4]
    6078:	f890 10ab 	ldrb.w	r1, [r0, #171]	; 0xab
    607c:	b111      	cbz	r1, 6084 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9b8>
    607e:	f8c0 70c8 	str.w	r7, [r0, #200]	; 0xc8
    6082:	e014      	b.n	60ae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9e2>
    6084:	6860      	ldr	r0, [r4, #4]
    6086:	f8d0 10c8 	ldr.w	r1, [r0, #200]	; 0xc8
    608a:	1c49      	adds	r1, r1, #1
    608c:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
    6090:	f008 fee3 	bl	ee5a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    6094:	6860      	ldr	r0, [r4, #4]
    6096:	e9d0 1232 	ldrd	r1, r2, [r0, #200]	; 0xc8
    609a:	4291      	cmp	r1, r2
    609c:	d307      	bcc.n	60ae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9e2>
    609e:	f8c0 70c8 	str.w	r7, [r0, #200]	; 0xc8
    60a2:	220f      	movs	r2, #15
    60a4:	4911      	ldr	r1, [pc, #68]	; (60ec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa20>)
    60a6:	f500 70b0 	add.w	r0, r0, #352	; 0x160
    60aa:	f008 f84c 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    60ae:	8870      	ldrh	r0, [r6, #2]
    60b0:	f410 7f40 	tst.w	r0, #768	; 0x300
    60b4:	d008      	beq.n	60c8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9fc>
    60b6:	6860      	ldr	r0, [r4, #4]
    60b8:	f890 10a9 	ldrb.w	r1, [r0, #169]	; 0xa9
    60bc:	b921      	cbnz	r1, 60c8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9fc>
    60be:	2101      	movs	r1, #1
    60c0:	f880 10a9 	strb.w	r1, [r0, #169]	; 0xa9
    60c4:	f008 fd4e 	bl	eb64 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    60c8:	ea58 0005 	orrs.w	r0, r8, r5
    60cc:	d104      	bne.n	60d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa0c>
    60ce:	f7ff fde7 	bl	5ca0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5d4>
    60d2:	4605      	mov	r5, r0
    60d4:	f7ff fc04 	bl	58e0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x214>
    60d8:	4629      	mov	r1, r5
    60da:	4640      	mov	r0, r8
    60dc:	f000 fd36 	bl	6b4c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1480>
    60e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    60e4:	f7fb ba28 	b.w	1538 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    60e8:	200000e4 	.word	0x200000e4
    60ec:	0000e63d 	.word	0x0000e63d
    60f0:	4813      	ldr	r0, [pc, #76]	; (6140 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa74>)
    60f2:	6840      	ldr	r0, [r0, #4]
    60f4:	f890 10e0 	ldrb.w	r1, [r0, #224]	; 0xe0
    60f8:	b129      	cbz	r1, 6106 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa3a>
    60fa:	f8b0 10dc 	ldrh.w	r1, [r0, #220]	; 0xdc
    60fe:	f8b0 20de 	ldrh.w	r2, [r0, #222]	; 0xde
    6102:	4291      	cmp	r1, r2
    6104:	d215      	bcs.n	6132 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa66>
    6106:	f890 10e4 	ldrb.w	r1, [r0, #228]	; 0xe4
    610a:	b129      	cbz	r1, 6118 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa4c>
    610c:	f8b0 10e2 	ldrh.w	r1, [r0, #226]	; 0xe2
    6110:	f8b0 20de 	ldrh.w	r2, [r0, #222]	; 0xde
    6114:	4291      	cmp	r1, r2
    6116:	d20c      	bcs.n	6132 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa66>
    6118:	f8b0 20da 	ldrh.w	r2, [r0, #218]	; 0xda
    611c:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    6120:	428a      	cmp	r2, r1
    6122:	d206      	bcs.n	6132 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa66>
    6124:	f890 20a9 	ldrb.w	r2, [r0, #169]	; 0xa9
    6128:	f8b0 00d6 	ldrh.w	r0, [r0, #214]	; 0xd6
    612c:	b11a      	cbz	r2, 6136 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa6a>
    612e:	4288      	cmp	r0, r1
    6130:	d303      	bcc.n	613a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa6e>
    6132:	2001      	movs	r0, #1
    6134:	4770      	bx	lr
    6136:	2806      	cmp	r0, #6
    6138:	d2fb      	bcs.n	6132 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa66>
    613a:	2000      	movs	r0, #0
    613c:	4770      	bx	lr
    613e:	0000      	.short	0x0000
    6140:	200000f0 	.word	0x200000f0
    6144:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    6146:	4c63      	ldr	r4, [pc, #396]	; (62d4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc08>)
    6148:	6860      	ldr	r0, [r4, #4]
    614a:	f890 1264 	ldrb.w	r1, [r0, #612]	; 0x264
    614e:	f88d 1000 	strb.w	r1, [sp]
    6152:	9900      	ldr	r1, [sp, #0]
    6154:	9100      	str	r1, [sp, #0]
    6156:	f89d 1000 	ldrb.w	r1, [sp]
    615a:	2500      	movs	r5, #0
    615c:	b129      	cbz	r1, 616a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa9e>
    615e:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    6162:	f007 fd2e 	bl	dbc2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    6166:	2800      	cmp	r0, #0
    6168:	d07d      	beq.n	6266 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    616a:	6860      	ldr	r0, [r4, #4]
    616c:	f890 1278 	ldrb.w	r1, [r0, #632]	; 0x278
    6170:	b181      	cbz	r1, 6194 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xac8>
    6172:	f890 10aa 	ldrb.w	r1, [r0, #170]	; 0xaa
    6176:	b149      	cbz	r1, 618c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xac0>
    6178:	f890 00ab 	ldrb.w	r0, [r0, #171]	; 0xab
    617c:	b108      	cbz	r0, 6182 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xab6>
    617e:	200a      	movs	r0, #10
    6180:	e071      	b.n	6266 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    6182:	f640 01dc 	movw	r1, #2268	; 0x8dc
    6186:	2036      	movs	r0, #54	; 0x36
    6188:	f7fa fc6c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    618c:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    6190:	f000 b8a2 	b.w	62d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc0c>
    6194:	f890 114b 	ldrb.w	r1, [r0, #331]	; 0x14b
    6198:	b109      	cbz	r1, 619e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xad2>
    619a:	2008      	movs	r0, #8
    619c:	e063      	b.n	6266 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    619e:	f890 114a 	ldrb.w	r1, [r0, #330]	; 0x14a
    61a2:	b179      	cbz	r1, 61c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaf8>
    61a4:	f890 00e7 	ldrb.w	r0, [r0, #231]	; 0xe7
    61a8:	0780      	lsls	r0, r0, #30
    61aa:	d10a      	bne.n	61c2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaf6>
    61ac:	200c      	movs	r0, #12
    61ae:	f000 f981 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    61b2:	6860      	ldr	r0, [r4, #4]
    61b4:	f810 1fe7 	ldrb.w	r1, [r0, #231]!
    61b8:	f041 0101 	orr.w	r1, r1, #1
    61bc:	7001      	strb	r1, [r0, #0]
    61be:	f880 5063 	strb.w	r5, [r0, #99]	; 0x63
    61c2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    61c4:	f890 113a 	ldrb.w	r1, [r0, #314]	; 0x13a
    61c8:	f88d 1004 	strb.w	r1, [sp, #4]
    61cc:	9901      	ldr	r1, [sp, #4]
    61ce:	9101      	str	r1, [sp, #4]
    61d0:	f89d 1004 	ldrb.w	r1, [sp, #4]
    61d4:	b141      	cbz	r1, 61e8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb1c>
    61d6:	f890 113b 	ldrb.w	r1, [r0, #315]	; 0x13b
    61da:	f88d 1000 	strb.w	r1, [sp]
    61de:	9900      	ldr	r1, [sp, #0]
    61e0:	9100      	str	r1, [sp, #0]
    61e2:	f89d 1000 	ldrb.w	r1, [sp]
    61e6:	b121      	cbz	r1, 61f2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb26>
    61e8:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    61ec:	2901      	cmp	r1, #1
    61ee:	d021      	beq.n	6234 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb68>
    61f0:	e02e      	b.n	6250 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb84>
    61f2:	f890 10a6 	ldrb.w	r1, [r0, #166]	; 0xa6
    61f6:	2925      	cmp	r1, #37	; 0x25
    61f8:	d01a      	beq.n	6230 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb64>
    61fa:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    61fe:	2925      	cmp	r1, #37	; 0x25
    6200:	d016      	beq.n	6230 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb64>
    6202:	2926      	cmp	r1, #38	; 0x26
    6204:	d014      	beq.n	6230 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb64>
    6206:	2300      	movs	r3, #0
    6208:	f200 2262 	addw	r2, r0, #610	; 0x262
    620c:	f500 719d 	add.w	r1, r0, #314	; 0x13a
    6210:	f007 ffaf 	bl	e172 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    6214:	6860      	ldr	r0, [r4, #4]
    6216:	f880 513a 	strb.w	r5, [r0, #314]	; 0x13a
    621a:	6861      	ldr	r1, [r4, #4]
    621c:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    6220:	8bc2      	ldrh	r2, [r0, #30]
    6222:	f8a1 2130 	strh.w	r2, [r1, #304]	; 0x130
    6226:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    6228:	f8a1 0132 	strh.w	r0, [r1, #306]	; 0x132
    622c:	2014      	movs	r0, #20
    622e:	e01a      	b.n	6266 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    6230:	2301      	movs	r3, #1
    6232:	e7e9      	b.n	6208 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb3c>
    6234:	f890 1145 	ldrb.w	r1, [r0, #325]	; 0x145
    6238:	f88d 1000 	strb.w	r1, [sp]
    623c:	9900      	ldr	r1, [sp, #0]
    623e:	9100      	str	r1, [sp, #0]
    6240:	f89d 1000 	ldrb.w	r1, [sp]
    6244:	b921      	cbnz	r1, 6250 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb84>
    6246:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    624a:	f007 fcba 	bl	dbc2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    624e:	b170      	cbz	r0, 626e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xba2>
    6250:	6860      	ldr	r0, [r4, #4]
    6252:	f890 1151 	ldrb.w	r1, [r0, #337]	; 0x151
    6256:	f88d 1000 	strb.w	r1, [sp]
    625a:	9900      	ldr	r1, [sp, #0]
    625c:	9100      	str	r1, [sp, #0]
    625e:	f89d 1000 	ldrb.w	r1, [sp]
    6262:	b329      	cbz	r1, 62b0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbe4>
    6264:	2023      	movs	r0, #35	; 0x23
    6266:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    626a:	f000 b923 	b.w	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    626e:	6860      	ldr	r0, [r4, #4]
    6270:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    6274:	f008 fdd8 	bl	ee28 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    6278:	4605      	mov	r5, r0
    627a:	6860      	ldr	r0, [r4, #4]
    627c:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    6280:	f008 fdd2 	bl	ee28 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    6284:	4606      	mov	r6, r0
    6286:	6860      	ldr	r0, [r4, #4]
    6288:	f890 1146 	ldrb.w	r1, [r0, #326]	; 0x146
    628c:	4628      	mov	r0, r5
    628e:	f008 fdd6 	bl	ee3e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    6292:	b158      	cbz	r0, 62ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbe0>
    6294:	6860      	ldr	r0, [r4, #4]
    6296:	f890 1147 	ldrb.w	r1, [r0, #327]	; 0x147
    629a:	4630      	mov	r0, r6
    629c:	f008 fdcf 	bl	ee3e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    62a0:	b120      	cbz	r0, 62ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbe0>
    62a2:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    62a6:	2000      	movs	r0, #0
    62a8:	f000 b8de 	b.w	6468 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    62ac:	2016      	movs	r0, #22
    62ae:	e7da      	b.n	6266 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    62b0:	f890 014e 	ldrb.w	r0, [r0, #334]	; 0x14e
    62b4:	f88d 0000 	strb.w	r0, [sp]
    62b8:	9800      	ldr	r0, [sp, #0]
    62ba:	9000      	str	r0, [sp, #0]
    62bc:	f89d 0000 	ldrb.w	r0, [sp]
    62c0:	2800      	cmp	r0, #0
    62c2:	f43f af7e 	beq.w	61c2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaf6>
    62c6:	2025      	movs	r0, #37	; 0x25
    62c8:	f000 f8f4 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    62cc:	6860      	ldr	r0, [r4, #4]
    62ce:	f880 514e 	strb.w	r5, [r0, #334]	; 0x14e
    62d2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    62d4:	200000f0 	.word	0x200000f0
    62d8:	b510      	push	{r4, lr}
    62da:	4c1e      	ldr	r4, [pc, #120]	; (6354 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc88>)
    62dc:	6862      	ldr	r2, [r4, #4]
    62de:	f892 0134 	ldrb.w	r0, [r2, #308]	; 0x134
    62e2:	2808      	cmp	r0, #8
    62e4:	d20d      	bcs.n	6302 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc36>
    62e6:	f1c0 0108 	rsb	r1, r0, #8
    62ea:	f200 2093 	addw	r0, r0, #659	; 0x293
    62ee:	b2c9      	uxtb	r1, r1
    62f0:	4410      	add	r0, r2
    62f2:	f7fa fc49 	bl	b88 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    62f6:	6861      	ldr	r1, [r4, #4]
    62f8:	f891 2134 	ldrb.w	r2, [r1, #308]	; 0x134
    62fc:	4410      	add	r0, r2
    62fe:	f881 0134 	strb.w	r0, [r1, #308]	; 0x134
    6302:	6862      	ldr	r2, [r4, #4]
    6304:	f892 0134 	ldrb.w	r0, [r2, #308]	; 0x134
    6308:	3808      	subs	r0, #8
    630a:	2804      	cmp	r0, #4
    630c:	d20d      	bcs.n	632a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc5e>
    630e:	f1c0 0104 	rsb	r1, r0, #4
    6312:	f500 7090 	add.w	r0, r0, #288	; 0x120
    6316:	b2c9      	uxtb	r1, r1
    6318:	4410      	add	r0, r2
    631a:	f7fa fc35 	bl	b88 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    631e:	6861      	ldr	r1, [r4, #4]
    6320:	f891 2134 	ldrb.w	r2, [r1, #308]	; 0x134
    6324:	4410      	add	r0, r2
    6326:	f881 0134 	strb.w	r0, [r1, #308]	; 0x134
    632a:	6860      	ldr	r0, [r4, #4]
    632c:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    6330:	290c      	cmp	r1, #12
    6332:	d30e      	bcc.n	6352 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc86>
    6334:	d005      	beq.n	6342 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc76>
    6336:	f640 31c5 	movw	r1, #3013	; 0xbc5
    633a:	f04f 0036 	mov.w	r0, #54	; 0x36
    633e:	f7fa fb91 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6342:	2100      	movs	r1, #0
    6344:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
    6348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    634c:	2003      	movs	r0, #3
    634e:	f000 b8b1 	b.w	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    6352:	bd10      	pop	{r4, pc}
    6354:	200000f0 	.word	0x200000f0
    6358:	b570      	push	{r4, r5, r6, lr}
    635a:	4b20      	ldr	r3, [pc, #128]	; (63dc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd10>)
    635c:	4602      	mov	r2, r0
    635e:	460c      	mov	r4, r1
    6360:	8858      	ldrh	r0, [r3, #2]
    6362:	4310      	orrs	r0, r2
    6364:	8058      	strh	r0, [r3, #2]
    6366:	f103 000c 	add.w	r0, r3, #12
    636a:	0791      	lsls	r1, r2, #30
    636c:	6840      	ldr	r0, [r0, #4]
    636e:	ea4f 71c2 	mov.w	r1, r2, lsl #31
    6372:	d507      	bpl.n	6384 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcb8>
    6374:	b121      	cbz	r1, 6380 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcb4>
    6376:	f640 41cc 	movw	r1, #3276	; 0xccc
    637a:	2036      	movs	r0, #54	; 0x36
    637c:	f7fa fb72 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6380:	605c      	str	r4, [r3, #4]
    6382:	e003      	b.n	638c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcc0>
    6384:	b101      	cbz	r1, 6388 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcbc>
    6386:	609c      	str	r4, [r3, #8]
    6388:	0791      	lsls	r1, r2, #30
    638a:	d515      	bpl.n	63b8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcec>
    638c:	78e1      	ldrb	r1, [r4, #3]
    638e:	2906      	cmp	r1, #6
    6390:	d002      	beq.n	6398 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xccc>
    6392:	290b      	cmp	r1, #11
    6394:	d110      	bne.n	63b8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcec>
    6396:	e008      	b.n	63aa <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcde>
    6398:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    639c:	2919      	cmp	r1, #25
    639e:	d10b      	bne.n	63b8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcec>
    63a0:	2100      	movs	r1, #0
    63a2:	e9c0 1142 	strd	r1, r1, [r0, #264]	; 0x108
    63a6:	2101      	movs	r1, #1
    63a8:	e004      	b.n	63b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xce8>
    63aa:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    63ae:	2913      	cmp	r1, #19
    63b0:	d102      	bne.n	63b8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcec>
    63b2:	2100      	movs	r1, #0
    63b4:	f880 10ab 	strb.w	r1, [r0, #171]	; 0xab
    63b8:	0691      	lsls	r1, r2, #26
    63ba:	d501      	bpl.n	63c0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcf4>
    63bc:	2108      	movs	r1, #8
    63be:	7059      	strb	r1, [r3, #1]
    63c0:	0611      	lsls	r1, r2, #24
    63c2:	d50a      	bpl.n	63da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd0e>
    63c4:	8b02      	ldrh	r2, [r0, #24]
    63c6:	f8b0 109c 	ldrh.w	r1, [r0, #156]	; 0x9c
    63ca:	4620      	mov	r0, r4
    63cc:	f7ff f9dc 	bl	5788 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbc>
    63d0:	4620      	mov	r0, r4
    63d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    63d6:	f7ff b9f5 	b.w	57c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8>
    63da:	bd70      	pop	{r4, r5, r6, pc}
    63dc:	200000e4 	.word	0x200000e4
    63e0:	b570      	push	{r4, r5, r6, lr}
    63e2:	4c20      	ldr	r4, [pc, #128]	; (6464 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd98>)
    63e4:	2501      	movs	r5, #1
    63e6:	6862      	ldr	r2, [r4, #4]
    63e8:	f892 1262 	ldrb.w	r1, [r2, #610]	; 0x262
    63ec:	b909      	cbnz	r1, 63f2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd26>
    63ee:	f892 106a 	ldrb.w	r1, [r2, #106]	; 0x6a
    63f2:	f892 0263 	ldrb.w	r0, [r2, #611]	; 0x263
    63f6:	b908      	cbnz	r0, 63fc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd30>
    63f8:	f892 006b 	ldrb.w	r0, [r2, #107]	; 0x6b
    63fc:	f102 0362 	add.w	r3, r2, #98	; 0x62
    6400:	7219      	strb	r1, [r3, #8]
    6402:	7258      	strb	r0, [r3, #9]
    6404:	20ff      	movs	r0, #255	; 0xff
    6406:	7298      	strb	r0, [r3, #10]
    6408:	4610      	mov	r0, r2
    640a:	f008 fffa 	bl	f402 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>
    640e:	2000      	movs	r0, #0
    6410:	f000 f82a 	bl	6468 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    6414:	6860      	ldr	r0, [r4, #4]
    6416:	302c      	adds	r0, #44	; 0x2c
    6418:	f007 ff1a 	bl	e250 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    641c:	4606      	mov	r6, r0
    641e:	6860      	ldr	r0, [r4, #4]
    6420:	f007 fec2 	bl	e1a8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    6424:	b130      	cbz	r0, 6434 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd68>
    6426:	6861      	ldr	r1, [r4, #4]
    6428:	f501 72b5 	add.w	r2, r1, #362	; 0x16a
    642c:	f831 0b2c 	ldrh.w	r0, [r1], #44
    6430:	f7fc fc20 	bl	2c74 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    6434:	2104      	movs	r1, #4
    6436:	6860      	ldr	r0, [r4, #4]
    6438:	f008 fb94 	bl	eb64 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    643c:	6860      	ldr	r0, [r4, #4]
    643e:	302c      	adds	r0, #44	; 0x2c
    6440:	f007 ff06 	bl	e250 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    6444:	4604      	mov	r4, r0
    6446:	42a6      	cmp	r6, r4
    6448:	d20a      	bcs.n	6460 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd94>
    644a:	f003 fdd5 	bl	9ff8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    644e:	4601      	mov	r1, r0
    6450:	1ba0      	subs	r0, r4, r6
    6452:	2865      	cmp	r0, #101	; 0x65
    6454:	d200      	bcs.n	6458 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd8c>
    6456:	2065      	movs	r0, #101	; 0x65
    6458:	f003 fca4 	bl	9da4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    645c:	b100      	cbz	r0, 6460 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd94>
    645e:	2500      	movs	r5, #0
    6460:	4628      	mov	r0, r5
    6462:	bd70      	pop	{r4, r5, r6, pc}
    6464:	200000f0 	.word	0x200000f0
    6468:	b510      	push	{r4, lr}
    646a:	4c10      	ldr	r4, [pc, #64]	; (64ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde0>)
    646c:	6861      	ldr	r1, [r4, #4]
    646e:	880a      	ldrh	r2, [r1, #0]
    6470:	f8a1 21ae 	strh.w	r2, [r1, #430]	; 0x1ae
    6474:	f881 01ac 	strb.w	r0, [r1, #428]	; 0x1ac
    6478:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    647c:	f008 fcd4 	bl	ee28 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    6480:	6861      	ldr	r1, [r4, #4]
    6482:	f881 01b0 	strb.w	r0, [r1, #432]	; 0x1b0
    6486:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    648a:	f008 fccd 	bl	ee28 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    648e:	6863      	ldr	r3, [r4, #4]
    6490:	2215      	movs	r2, #21
    6492:	4907      	ldr	r1, [pc, #28]	; (64b0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde4>)
    6494:	f883 01b1 	strb.w	r0, [r3, #433]	; 0x1b1
    6498:	f503 70d1 	add.w	r0, r3, #418	; 0x1a2
    649c:	f007 fe53 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    64a0:	6861      	ldr	r1, [r4, #4]
    64a2:	2000      	movs	r0, #0
    64a4:	f881 0144 	strb.w	r0, [r1, #324]	; 0x144
    64a8:	bd10      	pop	{r4, pc}
    64aa:	0000      	.short	0x0000
    64ac:	200000f0 	.word	0x200000f0
    64b0:	00010189 	.word	0x00010189
    64b4:	4902      	ldr	r1, [pc, #8]	; (64c0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xdf4>)
    64b6:	6849      	ldr	r1, [r1, #4]
    64b8:	f881 012e 	strb.w	r0, [r1, #302]	; 0x12e
    64bc:	f000 bb10 	b.w	6ae0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1414>
    64c0:	200000f0 	.word	0x200000f0
    64c4:	4903      	ldr	r1, [pc, #12]	; (64d4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe08>)
    64c6:	6849      	ldr	r1, [r1, #4]
    64c8:	f881 0130 	strb.w	r0, [r1, #304]	; 0x130
    64cc:	2011      	movs	r0, #17
    64ce:	f7ff bff1 	b.w	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    64d2:	0000      	.short	0x0000
    64d4:	200000f0 	.word	0x200000f0
    64d8:	b538      	push	{r3, r4, r5, lr}
    64da:	4c11      	ldr	r4, [pc, #68]	; (6520 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe54>)
    64dc:	6862      	ldr	r2, [r4, #4]
    64de:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
    64e2:	f8ad 2000 	strh.w	r2, [sp]
    64e6:	f007 fbe5 	bl	dcb4 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
    64ea:	f89d 3000 	ldrb.w	r3, [sp]
    64ee:	b2c2      	uxtb	r2, r0
    64f0:	2100      	movs	r1, #0
    64f2:	4293      	cmp	r3, r2
    64f4:	d003      	beq.n	64fe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe32>
    64f6:	6863      	ldr	r3, [r4, #4]
    64f8:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
    64fc:	e002      	b.n	6504 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe38>
    64fe:	6862      	ldr	r2, [r4, #4]
    6500:	f882 1262 	strb.w	r1, [r2, #610]	; 0x262
    6504:	f89d 2001 	ldrb.w	r2, [sp, #1]
    6508:	f3c0 2007 	ubfx	r0, r0, #8, #8
    650c:	4282      	cmp	r2, r0
    650e:	d003      	beq.n	6518 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe4c>
    6510:	6861      	ldr	r1, [r4, #4]
    6512:	f881 0263 	strb.w	r0, [r1, #611]	; 0x263
    6516:	bd38      	pop	{r3, r4, r5, pc}
    6518:	6860      	ldr	r0, [r4, #4]
    651a:	f880 1263 	strb.w	r1, [r0, #611]	; 0x263
    651e:	bd38      	pop	{r3, r4, r5, pc}
    6520:	200000f0 	.word	0x200000f0
    6524:	4a03      	ldr	r2, [pc, #12]	; (6534 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe68>)
    6526:	6852      	ldr	r2, [r2, #4]
    6528:	f882 012a 	strb.w	r0, [r2, #298]	; 0x12a
    652c:	f882 112b 	strb.w	r1, [r2, #299]	; 0x12b
    6530:	4770      	bx	lr
    6532:	0000      	.short	0x0000
    6534:	200000f0 	.word	0x200000f0
    6538:	b570      	push	{r4, r5, r6, lr}
    653a:	6841      	ldr	r1, [r0, #4]
    653c:	4604      	mov	r4, r0
    653e:	f891 00a5 	ldrb.w	r0, [r1, #165]	; 0xa5
    6542:	2814      	cmp	r0, #20
    6544:	d001      	beq.n	654a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe7e>
    6546:	2002      	movs	r0, #2
    6548:	bd70      	pop	{r4, r5, r6, pc}
    654a:	4d09      	ldr	r5, [pc, #36]	; (6570 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xea4>)
    654c:	f201 219b 	addw	r1, r1, #667	; 0x29b
    6550:	68a8      	ldr	r0, [r5, #8]
    6552:	f007 fd6a 	bl	e02a <sym_G3E5J3DBBC3WRZ26KQDVAZEPSZL4FITDNFKJBAY>
    6556:	6861      	ldr	r1, [r4, #4]
    6558:	68a8      	ldr	r0, [r5, #8]
    655a:	f501 7192 	add.w	r1, r1, #292	; 0x124
    655e:	f007 fd61 	bl	e024 <sym_RHFWG2VAMMSM6HNQIXGIQMU7QUNXB2XIV4NQREY>
    6562:	6861      	ldr	r1, [r4, #4]
    6564:	2017      	movs	r0, #23
    6566:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    656a:	2000      	movs	r0, #0
    656c:	bd70      	pop	{r4, r5, r6, pc}
    656e:	0000      	.short	0x0000
    6570:	200000e4 	.word	0x200000e4
    6574:	4901      	ldr	r1, [pc, #4]	; (657c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb0>)
    6576:	6889      	ldr	r1, [r1, #8]
    6578:	f7fc bc78 	b.w	2e6c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>
    657c:	200000e4 	.word	0x200000e4
    6580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6584:	4e1b      	ldr	r6, [pc, #108]	; (65f4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf28>)
    6586:	2500      	movs	r5, #0
    6588:	f106 010c 	add.w	r1, r6, #12
    658c:	2703      	movs	r7, #3
    658e:	f8d1 c004 	ldr.w	ip, [r1, #4]
    6592:	2401      	movs	r4, #1
    6594:	b1a0      	cbz	r0, 65c0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xef4>
    6596:	68b0      	ldr	r0, [r6, #8]
    6598:	78c0      	ldrb	r0, [r0, #3]
    659a:	f88c 0129 	strb.w	r0, [ip, #297]	; 0x129
    659e:	fa04 f000 	lsl.w	r0, r4, r0
    65a2:	f3c0 50c0 	ubfx	r0, r0, #23, #1
    65a6:	b130      	cbz	r0, 65b6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeea>
    65a8:	f88c 70a5 	strb.w	r7, [ip, #165]	; 0xa5
    65ac:	f8ac 50dc 	strh.w	r5, [ip, #220]	; 0xdc
    65b0:	f88c 40e0 	strb.w	r4, [ip, #224]	; 0xe0
    65b4:	e019      	b.n	65ea <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf1e>
    65b6:	f240 6195 	movw	r1, #1685	; 0x695
    65ba:	2036      	movs	r0, #54	; 0x36
    65bc:	f7fa fa52 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    65c0:	4688      	mov	r8, r1
    65c2:	2300      	movs	r3, #0
    65c4:	f89c 20a6 	ldrb.w	r2, [ip, #166]	; 0xa6
    65c8:	f10c 0088 	add.w	r0, ip, #136	; 0x88
    65cc:	4619      	mov	r1, r3
    65ce:	f007 fa95 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    65d2:	b168      	cbz	r0, 65f0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf24>
    65d4:	68b0      	ldr	r0, [r6, #8]
    65d6:	78c1      	ldrb	r1, [r0, #3]
    65d8:	f8d8 0004 	ldr.w	r0, [r8, #4]
    65dc:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    65e0:	f800 7fa6 	strb.w	r7, [r0, #166]!
    65e4:	8785      	strh	r5, [r0, #60]	; 0x3c
    65e6:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    65ea:	2000      	movs	r0, #0
    65ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    65f0:	2001      	movs	r0, #1
    65f2:	e7fb      	b.n	65ec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf20>
    65f4:	200000e4 	.word	0x200000e4
    65f8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    65fc:	4604      	mov	r4, r0
    65fe:	6840      	ldr	r0, [r0, #4]
    6600:	2300      	movs	r3, #0
    6602:	4619      	mov	r1, r3
    6604:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    6608:	3088      	adds	r0, #136	; 0x88
    660a:	f007 fa77 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    660e:	b310      	cbz	r0, 6656 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8a>
    6610:	4d2e      	ldr	r5, [pc, #184]	; (66cc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1000>)
    6612:	68a8      	ldr	r0, [r5, #8]
    6614:	f007 fd1a 	bl	e04c <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    6618:	b300      	cbz	r0, 665c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf90>
    661a:	68a8      	ldr	r0, [r5, #8]
    661c:	f007 fd10 	bl	e040 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    6620:	4607      	mov	r7, r0
    6622:	68a8      	ldr	r0, [r5, #8]
    6624:	f007 fd10 	bl	e048 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    6628:	4680      	mov	r8, r0
    662a:	68a8      	ldr	r0, [r5, #8]
    662c:	f007 fd06 	bl	e03c <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    6630:	4606      	mov	r6, r0
    6632:	68a8      	ldr	r0, [r5, #8]
    6634:	f007 fd06 	bl	e044 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    6638:	4601      	mov	r1, r0
    663a:	9700      	str	r7, [sp, #0]
    663c:	6860      	ldr	r0, [r4, #4]
    663e:	4643      	mov	r3, r8
    6640:	4632      	mov	r2, r6
    6642:	302c      	adds	r0, #44	; 0x2c
    6644:	f007 fe3e 	bl	e2c4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    6648:	6860      	ldr	r0, [r4, #4]
    664a:	2501      	movs	r5, #1
    664c:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    6650:	291d      	cmp	r1, #29
    6652:	d008      	beq.n	6666 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf9a>
    6654:	e009      	b.n	666a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf9e>
    6656:	2001      	movs	r0, #1
    6658:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    665c:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    6660:	2000      	movs	r0, #0
    6662:	f7ff bf8d 	b.w	6580 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb4>
    6666:	f880 5060 	strb.w	r5, [r0, #96]	; 0x60
    666a:	6860      	ldr	r0, [r4, #4]
    666c:	2600      	movs	r6, #0
    666e:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    6672:	2901      	cmp	r1, #1
    6674:	d011      	beq.n	669a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfce>
    6676:	f890 113b 	ldrb.w	r1, [r0, #315]	; 0x13b
    667a:	f88d 1004 	strb.w	r1, [sp, #4]
    667e:	9901      	ldr	r1, [sp, #4]
    6680:	9101      	str	r1, [sp, #4]
    6682:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6686:	b941      	cbnz	r1, 669a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfce>
    6688:	f890 113a 	ldrb.w	r1, [r0, #314]	; 0x13a
    668c:	f88d 1000 	strb.w	r1, [sp]
    6690:	9900      	ldr	r1, [sp, #0]
    6692:	9100      	str	r1, [sp, #0]
    6694:	f89d 1000 	ldrb.w	r1, [sp]
    6698:	b151      	cbz	r1, 66b0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfe4>
    669a:	211f      	movs	r1, #31
    669c:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    66a0:	6860      	ldr	r0, [r4, #4]
    66a2:	f8a0 60e2 	strh.w	r6, [r0, #226]	; 0xe2
    66a6:	6860      	ldr	r0, [r4, #4]
    66a8:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    66ac:	2000      	movs	r0, #0
    66ae:	e7d3      	b.n	6658 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8c>
    66b0:	211e      	movs	r1, #30
    66b2:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    66b6:	4805      	ldr	r0, [pc, #20]	; (66cc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1000>)
    66b8:	300c      	adds	r0, #12
    66ba:	6843      	ldr	r3, [r0, #4]
    66bc:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    66c0:	8818      	ldrh	r0, [r3, #0]
    66c2:	f503 72c0 	add.w	r2, r3, #384	; 0x180
    66c6:	f7fc faff 	bl	2cc8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    66ca:	e7e9      	b.n	66a0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfd4>
    66cc:	200000e4 	.word	0x200000e4
    66d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    66d4:	4604      	mov	r4, r0
    66d6:	6840      	ldr	r0, [r0, #4]
    66d8:	2300      	movs	r3, #0
    66da:	210a      	movs	r1, #10
    66dc:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    66e0:	3088      	adds	r0, #136	; 0x88
    66e2:	f007 fa0b 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    66e6:	b370      	cbz	r0, 6746 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x107a>
    66e8:	4d18      	ldr	r5, [pc, #96]	; (674c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1080>)
    66ea:	68a8      	ldr	r0, [r5, #8]
    66ec:	f007 fcae 	bl	e04c <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    66f0:	b1e8      	cbz	r0, 672e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1062>
    66f2:	68a8      	ldr	r0, [r5, #8]
    66f4:	f007 fca4 	bl	e040 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    66f8:	4607      	mov	r7, r0
    66fa:	68a8      	ldr	r0, [r5, #8]
    66fc:	f007 fca4 	bl	e048 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    6700:	4680      	mov	r8, r0
    6702:	68a8      	ldr	r0, [r5, #8]
    6704:	f007 fc9a 	bl	e03c <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    6708:	4606      	mov	r6, r0
    670a:	68a8      	ldr	r0, [r5, #8]
    670c:	f007 fc9a 	bl	e044 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    6710:	4601      	mov	r1, r0
    6712:	9700      	str	r7, [sp, #0]
    6714:	6860      	ldr	r0, [r4, #4]
    6716:	4643      	mov	r3, r8
    6718:	4632      	mov	r2, r6
    671a:	302c      	adds	r0, #44	; 0x2c
    671c:	f007 fdd2 	bl	e2c4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    6720:	6860      	ldr	r0, [r4, #4]
    6722:	f007 fd41 	bl	e1a8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    6726:	2104      	movs	r1, #4
    6728:	6860      	ldr	r0, [r4, #4]
    672a:	f008 fa1b 	bl	eb64 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    672e:	6861      	ldr	r1, [r4, #4]
    6730:	2000      	movs	r0, #0
    6732:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    6736:	6861      	ldr	r1, [r4, #4]
    6738:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    673c:	f7ff f9fa 	bl	5b34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x468>
    6740:	2000      	movs	r0, #0
    6742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6746:	e7ff      	b.n	6748 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x107c>
    6748:	2001      	movs	r0, #1
    674a:	e7fa      	b.n	6742 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1076>
    674c:	200000e4 	.word	0x200000e4
    6750:	4901      	ldr	r1, [pc, #4]	; (6758 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x108c>)
    6752:	6889      	ldr	r1, [r1, #8]
    6754:	f7fc bb58 	b.w	2e08 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>
    6758:	200000e4 	.word	0x200000e4
    675c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6760:	4604      	mov	r4, r0
    6762:	6840      	ldr	r0, [r0, #4]
    6764:	f04f 0800 	mov.w	r8, #0
    6768:	b086      	sub	sp, #24
    676a:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    676e:	4643      	mov	r3, r8
    6770:	4641      	mov	r1, r8
    6772:	3088      	adds	r0, #136	; 0x88
    6774:	f007 f9c2 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6778:	b190      	cbz	r0, 67a0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d4>
    677a:	6860      	ldr	r0, [r4, #4]
    677c:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    6780:	2824      	cmp	r0, #36	; 0x24
    6782:	d011      	beq.n	67a8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10dc>
    6784:	2825      	cmp	r0, #37	; 0x25
    6786:	d00f      	beq.n	67a8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10dc>
    6788:	2826      	cmp	r0, #38	; 0x26
    678a:	d00d      	beq.n	67a8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10dc>
    678c:	4668      	mov	r0, sp
    678e:	f7fa fefd 	bl	158c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    6792:	b158      	cbz	r0, 67ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10e0>
    6794:	9800      	ldr	r0, [sp, #0]
    6796:	a903      	add	r1, sp, #12
    6798:	78c0      	ldrb	r0, [r0, #3]
    679a:	f88d 000c 	strb.w	r0, [sp, #12]
    679e:	e006      	b.n	67ae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10e2>
    67a0:	2001      	movs	r0, #1
    67a2:	b006      	add	sp, #24
    67a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    67a8:	2020      	movs	r0, #32
    67aa:	e7fa      	b.n	67a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d6>
    67ac:	2100      	movs	r1, #0
    67ae:	6860      	ldr	r0, [r4, #4]
    67b0:	ab02      	add	r3, sp, #8
    67b2:	2216      	movs	r2, #22
    67b4:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    67b8:	f007 fa5b 	bl	dc72 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>
    67bc:	2501      	movs	r5, #1
    67be:	2600      	movs	r6, #0
    67c0:	b180      	cbz	r0, 67e4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1118>
    67c2:	2116      	movs	r1, #22
    67c4:	f89d 0008 	ldrb.w	r0, [sp, #8]
    67c8:	f7ff feac 	bl	6524 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe58>
    67cc:	6861      	ldr	r1, [r4, #4]
    67ce:	202f      	movs	r0, #47	; 0x2f
    67d0:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    67d4:	6860      	ldr	r0, [r4, #4]
    67d6:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    67da:	6860      	ldr	r0, [r4, #4]
    67dc:	f8a0 60e2 	strh.w	r6, [r0, #226]	; 0xe2
    67e0:	2000      	movs	r0, #0
    67e2:	e7de      	b.n	67a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d6>
    67e4:	4f29      	ldr	r7, [pc, #164]	; (688c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c0>)
    67e6:	68b8      	ldr	r0, [r7, #8]
    67e8:	f007 fc42 	bl	e070 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>
    67ec:	b1b8      	cbz	r0, 681e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1152>
    67ee:	68b8      	ldr	r0, [r7, #8]
    67f0:	6862      	ldr	r2, [r4, #4]
    67f2:	7901      	ldrb	r1, [r0, #4]
    67f4:	f001 0107 	and.w	r1, r1, #7
    67f8:	f882 1062 	strb.w	r1, [r2, #98]	; 0x62
    67fc:	7940      	ldrb	r0, [r0, #5]
    67fe:	f000 0107 	and.w	r1, r0, #7
    6802:	6860      	ldr	r0, [r4, #4]
    6804:	f880 1063 	strb.w	r1, [r0, #99]	; 0x63
    6808:	6860      	ldr	r0, [r4, #4]
    680a:	f890 2145 	ldrb.w	r2, [r0, #325]	; 0x145
    680e:	f88d 200c 	strb.w	r2, [sp, #12]
    6812:	9a03      	ldr	r2, [sp, #12]
    6814:	9203      	str	r2, [sp, #12]
    6816:	f89d 200c 	ldrb.w	r2, [sp, #12]
    681a:	bb5a      	cbnz	r2, 6874 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11a8>
    681c:	e004      	b.n	6828 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x115c>
    681e:	2000      	movs	r0, #0
    6820:	f7ff feae 	bl	6580 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb4>
    6824:	4680      	mov	r8, r0
    6826:	e02f      	b.n	6888 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11bc>
    6828:	f890 2144 	ldrb.w	r2, [r0, #324]	; 0x144
    682c:	2a01      	cmp	r2, #1
    682e:	d021      	beq.n	6874 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11a8>
    6830:	f100 026a 	add.w	r2, r0, #106	; 0x6a
    6834:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
    6838:	7857      	ldrb	r7, [r2, #1]
    683a:	429f      	cmp	r7, r3
    683c:	d106      	bne.n	684c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1180>
    683e:	7812      	ldrb	r2, [r2, #0]
    6840:	428a      	cmp	r2, r1
    6842:	d103      	bne.n	684c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1180>
    6844:	2102      	movs	r1, #2
    6846:	f880 1144 	strb.w	r1, [r0, #324]	; 0x144
    684a:	e013      	b.n	6874 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11a8>
    684c:	480f      	ldr	r0, [pc, #60]	; (688c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c0>)
    684e:	300c      	adds	r0, #12
    6850:	6841      	ldr	r1, [r0, #4]
    6852:	f501 70cf 	add.w	r0, r1, #414	; 0x19e
    6856:	880a      	ldrh	r2, [r1, #0]
    6858:	f820 2b02 	strh.w	r2, [r0], #2
    685c:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
    6860:	f800 2b01 	strb.w	r2, [r0], #1
    6864:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    6868:	f800 190d 	strb.w	r1, [r0], #-13
    686c:	2222      	movs	r2, #34	; 0x22
    686e:	4908      	ldr	r1, [pc, #32]	; (6890 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c4>)
    6870:	f007 fc55 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6874:	6861      	ldr	r1, [r4, #4]
    6876:	2022      	movs	r0, #34	; 0x22
    6878:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    687c:	6860      	ldr	r0, [r4, #4]
    687e:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    6882:	6860      	ldr	r0, [r4, #4]
    6884:	f8a0 60e2 	strh.w	r6, [r0, #226]	; 0xe2
    6888:	4640      	mov	r0, r8
    688a:	e78a      	b.n	67a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d6>
    688c:	200000e4 	.word	0x200000e4
    6890:	000101b3 	.word	0x000101b3
    6894:	b570      	push	{r4, r5, r6, lr}
    6896:	4604      	mov	r4, r0
    6898:	6840      	ldr	r0, [r0, #4]
    689a:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    689e:	2820      	cmp	r0, #32
    68a0:	d001      	beq.n	68a6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11da>
    68a2:	2001      	movs	r0, #1
    68a4:	bd70      	pop	{r4, r5, r6, pc}
    68a6:	4e16      	ldr	r6, [pc, #88]	; (6900 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1234>)
    68a8:	68b0      	ldr	r0, [r6, #8]
    68aa:	f007 fbf3 	bl	e094 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ>
    68ae:	b1f0      	cbz	r0, 68ee <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1222>
    68b0:	68b0      	ldr	r0, [r6, #8]
    68b2:	6862      	ldr	r2, [r4, #4]
    68b4:	7901      	ldrb	r1, [r0, #4]
    68b6:	7940      	ldrb	r0, [r0, #5]
    68b8:	f001 0107 	and.w	r1, r1, #7
    68bc:	f361 0507 	bfi	r5, r1, #0, #8
    68c0:	4629      	mov	r1, r5
    68c2:	f000 0007 	and.w	r0, r0, #7
    68c6:	f360 210f 	bfi	r1, r0, #8, #8
    68ca:	2001      	movs	r0, #1
    68cc:	f882 00e0 	strb.w	r0, [r2, #224]	; 0xe0
    68d0:	6862      	ldr	r2, [r4, #4]
    68d2:	2000      	movs	r0, #0
    68d4:	f8a2 00dc 	strh.w	r0, [r2, #220]	; 0xdc
    68d8:	6862      	ldr	r2, [r4, #4]
    68da:	2024      	movs	r0, #36	; 0x24
    68dc:	f882 00a5 	strb.w	r0, [r2, #165]	; 0xa5
    68e0:	6860      	ldr	r0, [r4, #4]
    68e2:	f8d0 0146 	ldr.w	r0, [r0, #326]	; 0x146
    68e6:	f7ff fdf7 	bl	64d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe0c>
    68ea:	2000      	movs	r0, #0
    68ec:	bd70      	pop	{r4, r5, r6, pc}
    68ee:	2001      	movs	r0, #1
    68f0:	f7ff fe46 	bl	6580 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb4>
    68f4:	4604      	mov	r4, r0
    68f6:	201e      	movs	r0, #30
    68f8:	f7ff fdb6 	bl	6468 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    68fc:	4620      	mov	r0, r4
    68fe:	bd70      	pop	{r4, r5, r6, pc}
    6900:	200000e4 	.word	0x200000e4
    6904:	b570      	push	{r4, r5, r6, lr}
    6906:	4604      	mov	r4, r0
    6908:	6840      	ldr	r0, [r0, #4]
    690a:	4d0a      	ldr	r5, [pc, #40]	; (6934 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1268>)
    690c:	f810 1ff6 	ldrb.w	r1, [r0, #246]!
    6910:	f041 0104 	orr.w	r1, r1, #4
    6914:	7001      	strb	r1, [r0, #0]
    6916:	68a8      	ldr	r0, [r5, #8]
    6918:	f007 fbc6 	bl	e0a8 <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>
    691c:	4606      	mov	r6, r0
    691e:	68a8      	ldr	r0, [r5, #8]
    6920:	f007 fbc6 	bl	e0b0 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>
    6924:	4601      	mov	r1, r0
    6926:	4622      	mov	r2, r4
    6928:	4630      	mov	r0, r6
    692a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    692e:	f000 b8b3 	b.w	6a98 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13cc>
    6932:	0000      	.short	0x0000
    6934:	200000e4 	.word	0x200000e4
    6938:	4a11      	ldr	r2, [pc, #68]	; (6980 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12b4>)
    693a:	4911      	ldr	r1, [pc, #68]	; (6980 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12b4>)
    693c:	320c      	adds	r2, #12
    693e:	6852      	ldr	r2, [r2, #4]
    6940:	6889      	ldr	r1, [r1, #8]
    6942:	f892 30a5 	ldrb.w	r3, [r2, #165]	; 0xa5
    6946:	7909      	ldrb	r1, [r1, #4]
    6948:	f1a3 0210 	sub.w	r2, r3, #16
    694c:	2a0c      	cmp	r2, #12
    694e:	d801      	bhi.n	6954 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1288>
    6950:	2303      	movs	r3, #3
    6952:	e008      	b.n	6966 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    6954:	2b28      	cmp	r3, #40	; 0x28
    6956:	d00a      	beq.n	696e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12a2>
    6958:	2b1d      	cmp	r3, #29
    695a:	d00a      	beq.n	6972 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12a6>
    695c:	2b05      	cmp	r3, #5
    695e:	d00a      	beq.n	6976 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12aa>
    6960:	2b20      	cmp	r3, #32
    6962:	d00a      	beq.n	697a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12ae>
    6964:	23fe      	movs	r3, #254	; 0xfe
    6966:	4602      	mov	r2, r0
    6968:	4618      	mov	r0, r3
    696a:	f000 b895 	b.w	6a98 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13cc>
    696e:	2323      	movs	r3, #35	; 0x23
    6970:	e7f9      	b.n	6966 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    6972:	2314      	movs	r3, #20
    6974:	e7f7      	b.n	6966 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    6976:	2312      	movs	r3, #18
    6978:	e7f5      	b.n	6966 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    697a:	2316      	movs	r3, #22
    697c:	e7f3      	b.n	6966 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    697e:	0000      	.short	0x0000
    6980:	200000e4 	.word	0x200000e4
    6984:	b570      	push	{r4, r5, r6, lr}
    6986:	4604      	mov	r4, r0
    6988:	6840      	ldr	r0, [r0, #4]
    698a:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    698e:	291b      	cmp	r1, #27
    6990:	d001      	beq.n	6996 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12ca>
    6992:	2002      	movs	r0, #2
    6994:	bd70      	pop	{r4, r5, r6, pc}
    6996:	2500      	movs	r5, #0
    6998:	f880 50e5 	strb.w	r5, [r0, #229]	; 0xe5
    699c:	6860      	ldr	r0, [r4, #4]
    699e:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    69a2:	6860      	ldr	r0, [r4, #4]
    69a4:	f880 5278 	strb.w	r5, [r0, #632]	; 0x278
    69a8:	6860      	ldr	r0, [r4, #4]
    69aa:	f890 10e6 	ldrb.w	r1, [r0, #230]	; 0xe6
    69ae:	b161      	cbz	r1, 69ca <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12fe>
    69b0:	f880 50e6 	strb.w	r5, [r0, #230]	; 0xe6
    69b4:	6860      	ldr	r0, [r4, #4]
    69b6:	220d      	movs	r2, #13
    69b8:	8801      	ldrh	r1, [r0, #0]
    69ba:	f8a0 121e 	strh.w	r1, [r0, #542]	; 0x21e
    69be:	6860      	ldr	r0, [r4, #4]
    69c0:	490d      	ldr	r1, [pc, #52]	; (69f8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x132c>)
    69c2:	f880 521c 	strb.w	r5, [r0, #540]	; 0x21c
    69c6:	6860      	ldr	r0, [r4, #4]
    69c8:	e00c      	b.n	69e4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1318>
    69ca:	8801      	ldrh	r1, [r0, #0]
    69cc:	f8a0 121e 	strh.w	r1, [r0, #542]	; 0x21e
    69d0:	6860      	ldr	r0, [r4, #4]
    69d2:	f880 521c 	strb.w	r5, [r0, #540]	; 0x21c
    69d6:	6861      	ldr	r1, [r4, #4]
    69d8:	2001      	movs	r0, #1
    69da:	220c      	movs	r2, #12
    69dc:	f881 0220 	strb.w	r0, [r1, #544]	; 0x220
    69e0:	4906      	ldr	r1, [pc, #24]	; (69fc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1330>)
    69e2:	6860      	ldr	r0, [r4, #4]
    69e4:	f200 2012 	addw	r0, r0, #530	; 0x212
    69e8:	f007 fb99 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    69ec:	6860      	ldr	r0, [r4, #4]
    69ee:	f880 50a5 	strb.w	r5, [r0, #165]	; 0xa5
    69f2:	2000      	movs	r0, #0
    69f4:	bd70      	pop	{r4, r5, r6, pc}
    69f6:	0000      	.short	0x0000
    69f8:	0000e5bf 	.word	0x0000e5bf
    69fc:	0000e5a1 	.word	0x0000e5a1
    6a00:	b510      	push	{r4, lr}
    6a02:	4604      	mov	r4, r0
    6a04:	6840      	ldr	r0, [r0, #4]
    6a06:	2300      	movs	r3, #0
    6a08:	2101      	movs	r1, #1
    6a0a:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
    6a0e:	3088      	adds	r0, #136	; 0x88
    6a10:	f007 f874 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6a14:	b108      	cbz	r0, 6a1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x134e>
    6a16:	2000      	movs	r0, #0
    6a18:	bd10      	pop	{r4, pc}
    6a1a:	4809      	ldr	r0, [pc, #36]	; (6a40 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1374>)
    6a1c:	6880      	ldr	r0, [r0, #8]
    6a1e:	f007 fb63 	bl	e0e8 <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>
    6a22:	6861      	ldr	r1, [r4, #4]
    6a24:	f881 00a8 	strb.w	r0, [r1, #168]	; 0xa8
    6a28:	6861      	ldr	r1, [r4, #4]
    6a2a:	2006      	movs	r0, #6
    6a2c:	f881 00a7 	strb.w	r0, [r1, #167]	; 0xa7
    6a30:	6861      	ldr	r1, [r4, #4]
    6a32:	2000      	movs	r0, #0
    6a34:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    6a38:	6861      	ldr	r1, [r4, #4]
    6a3a:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    6a3e:	e7ea      	b.n	6a16 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x134a>
    6a40:	200000e4 	.word	0x200000e4
    6a44:	4602      	mov	r2, r0
    6a46:	480f      	ldr	r0, [pc, #60]	; (6a84 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b8>)
    6a48:	b510      	push	{r4, lr}
    6a4a:	6880      	ldr	r0, [r0, #8]
    6a4c:	6851      	ldr	r1, [r2, #4]
    6a4e:	2400      	movs	r4, #0
    6a50:	7900      	ldrb	r0, [r0, #4]
    6a52:	f891 10a5 	ldrb.w	r1, [r1, #165]	; 0xa5
    6a56:	2812      	cmp	r0, #18
    6a58:	d006      	beq.n	6a68 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x139c>
    6a5a:	2814      	cmp	r0, #20
    6a5c:	d004      	beq.n	6a68 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x139c>
    6a5e:	2816      	cmp	r0, #22
    6a60:	d002      	beq.n	6a68 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x139c>
    6a62:	2823      	cmp	r0, #35	; 0x23
    6a64:	d10c      	bne.n	6a80 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b4>
    6a66:	e004      	b.n	6a72 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13a6>
    6a68:	2101      	movs	r1, #1
    6a6a:	f000 f91d 	bl	6ca8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15dc>
    6a6e:	4604      	mov	r4, r0
    6a70:	e006      	b.n	6a80 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b4>
    6a72:	2928      	cmp	r1, #40	; 0x28
    6a74:	d104      	bne.n	6a80 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b4>
    6a76:	4804      	ldr	r0, [pc, #16]	; (6a88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13bc>)
    6a78:	6801      	ldr	r1, [r0, #0]
    6a7a:	b109      	cbz	r1, 6a80 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b4>
    6a7c:	4610      	mov	r0, r2
    6a7e:	4788      	blx	r1
    6a80:	4620      	mov	r0, r4
    6a82:	bd10      	pop	{r4, pc}
    6a84:	200000e4 	.word	0x200000e4
    6a88:	20000254 	.word	0x20000254
    6a8c:	4901      	ldr	r1, [pc, #4]	; (6a94 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13c8>)
    6a8e:	6889      	ldr	r1, [r1, #8]
    6a90:	f7fc ba46 	b.w	2f20 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>
    6a94:	200000e4 	.word	0x200000e4
    6a98:	4603      	mov	r3, r0
    6a9a:	2000      	movs	r0, #0
    6a9c:	2b23      	cmp	r3, #35	; 0x23
    6a9e:	d017      	beq.n	6ad0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1404>
    6aa0:	dc0b      	bgt.n	6aba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13ee>
    6aa2:	2b03      	cmp	r3, #3
    6aa4:	d011      	beq.n	6aca <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13fe>
    6aa6:	2b12      	cmp	r3, #18
    6aa8:	d003      	beq.n	6ab2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13e6>
    6aaa:	2b14      	cmp	r3, #20
    6aac:	d001      	beq.n	6ab2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13e6>
    6aae:	2b16      	cmp	r3, #22
    6ab0:	d10a      	bne.n	6ac8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13fc>
    6ab2:	2100      	movs	r1, #0
    6ab4:	4618      	mov	r0, r3
    6ab6:	f000 b8f7 	b.w	6ca8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15dc>
    6aba:	2b24      	cmp	r3, #36	; 0x24
    6abc:	d008      	beq.n	6ad0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1404>
    6abe:	2b25      	cmp	r3, #37	; 0x25
    6ac0:	d006      	beq.n	6ad0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1404>
    6ac2:	2bfe      	cmp	r3, #254	; 0xfe
    6ac4:	d100      	bne.n	6ac8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13fc>
    6ac6:	2002      	movs	r0, #2
    6ac8:	4770      	bx	lr
    6aca:	4608      	mov	r0, r1
    6acc:	f7ff b846 	b.w	5b5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x490>
    6ad0:	4a02      	ldr	r2, [pc, #8]	; (6adc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1410>)
    6ad2:	6812      	ldr	r2, [r2, #0]
    6ad4:	2a00      	cmp	r2, #0
    6ad6:	d0f7      	beq.n	6ac8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13fc>
    6ad8:	4618      	mov	r0, r3
    6ada:	4710      	bx	r2
    6adc:	20000250 	.word	0x20000250
    6ae0:	280c      	cmp	r0, #12
    6ae2:	d01a      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6ae4:	2813      	cmp	r0, #19
    6ae6:	d018      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6ae8:	2818      	cmp	r0, #24
    6aea:	d016      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6aec:	4910      	ldr	r1, [pc, #64]	; (6b30 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1464>)
    6aee:	2200      	movs	r2, #0
    6af0:	2811      	cmp	r0, #17
    6af2:	6849      	ldr	r1, [r1, #4]
    6af4:	d012      	beq.n	6b1c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1450>
    6af6:	2807      	cmp	r0, #7
    6af8:	d00f      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6afa:	2809      	cmp	r0, #9
    6afc:	d00d      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6afe:	2815      	cmp	r0, #21
    6b00:	d012      	beq.n	6b28 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x145c>
    6b02:	2824      	cmp	r0, #36	; 0x24
    6b04:	d009      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6b06:	2801      	cmp	r0, #1
    6b08:	d007      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6b0a:	2800      	cmp	r0, #0
    6b0c:	d005      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6b0e:	2802      	cmp	r0, #2
    6b10:	d003      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6b12:	f821 2fdc 	strh.w	r2, [r1, #220]!
    6b16:	2001      	movs	r0, #1
    6b18:	7108      	strb	r0, [r1, #4]
    6b1a:	4770      	bx	lr
    6b1c:	f891 0130 	ldrb.w	r0, [r1, #304]	; 0x130
    6b20:	b110      	cbz	r0, 6b28 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x145c>
    6b22:	f8a1 20dc 	strh.w	r2, [r1, #220]	; 0xdc
    6b26:	4770      	bx	lr
    6b28:	f8a1 20e2 	strh.w	r2, [r1, #226]	; 0xe2
    6b2c:	4770      	bx	lr
    6b2e:	0000      	.short	0x0000
    6b30:	200000f0 	.word	0x200000f0
    6b34:	4904      	ldr	r1, [pc, #16]	; (6b48 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x147c>)
    6b36:	2000      	movs	r0, #0
    6b38:	6849      	ldr	r1, [r1, #4]
    6b3a:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    6b3e:	f8a1 00dc 	strh.w	r0, [r1, #220]	; 0xdc
    6b42:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    6b46:	4770      	bx	lr
    6b48:	200000f0 	.word	0x200000f0
    6b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6b50:	4d53      	ldr	r5, [pc, #332]	; (6ca0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15d4>)
    6b52:	4680      	mov	r8, r0
    6b54:	460f      	mov	r7, r1
    6b56:	6868      	ldr	r0, [r5, #4]
    6b58:	f100 0488 	add.w	r4, r0, #136	; 0x88
    6b5c:	f890 0138 	ldrb.w	r0, [r0, #312]	; 0x138
    6b60:	f88d 0000 	strb.w	r0, [sp]
    6b64:	9800      	ldr	r0, [sp, #0]
    6b66:	9000      	str	r0, [sp, #0]
    6b68:	f89d 0000 	ldrb.w	r0, [sp]
    6b6c:	2600      	movs	r6, #0
    6b6e:	b930      	cbnz	r0, 6b7e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14b2>
    6b70:	7fe2      	ldrb	r2, [r4, #31]
    6b72:	2300      	movs	r3, #0
    6b74:	2101      	movs	r1, #1
    6b76:	4620      	mov	r0, r4
    6b78:	f006 ffc0 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6b7c:	b120      	cbz	r0, 6b88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14bc>
    6b7e:	f8b4 0052 	ldrh.w	r0, [r4, #82]	; 0x52
    6b82:	1c40      	adds	r0, r0, #1
    6b84:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
    6b88:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
    6b8c:	b121      	cbz	r1, 6b98 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14cc>
    6b8e:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
    6b92:	1c40      	adds	r0, r0, #1
    6b94:	f8a4 0054 	strh.w	r0, [r4, #84]	; 0x54
    6b98:	f994 005c 	ldrsb.w	r0, [r4, #92]	; 0x5c
    6b9c:	b120      	cbz	r0, 6ba8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14dc>
    6b9e:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
    6ba2:	1c52      	adds	r2, r2, #1
    6ba4:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
    6ba8:	f1b8 0f00 	cmp.w	r8, #0
    6bac:	d114      	bne.n	6bd8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x150c>
    6bae:	4a3c      	ldr	r2, [pc, #240]	; (6ca0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15d4>)
    6bb0:	3a0c      	subs	r2, #12
    6bb2:	7812      	ldrb	r2, [r2, #0]
    6bb4:	2a02      	cmp	r2, #2
    6bb6:	d006      	beq.n	6bc6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14fa>
    6bb8:	2a01      	cmp	r2, #1
    6bba:	d006      	beq.n	6bca <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14fe>
    6bbc:	b1df      	cbz	r7, 6bf6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x152a>
    6bbe:	06f8      	lsls	r0, r7, #27
    6bc0:	d508      	bpl.n	6bd4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1508>
    6bc2:	201e      	movs	r0, #30
    6bc4:	e043      	b.n	6c4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6bc6:	2016      	movs	r0, #22
    6bc8:	e041      	b.n	6c4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6bca:	6868      	ldr	r0, [r5, #4]
    6bcc:	f890 00a8 	ldrb.w	r0, [r0, #168]	; 0xa8
    6bd0:	bba0      	cbnz	r0, 6c3c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1570>
    6bd2:	e05e      	b.n	6c92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15c6>
    6bd4:	0738      	lsls	r0, r7, #28
    6bd6:	d501      	bpl.n	6bdc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1510>
    6bd8:	203d      	movs	r0, #61	; 0x3d
    6bda:	e038      	b.n	6c4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6bdc:	07b8      	lsls	r0, r7, #30
    6bde:	d001      	beq.n	6be4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1518>
    6be0:	202a      	movs	r0, #42	; 0x2a
    6be2:	e034      	b.n	6c4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6be4:	06b8      	lsls	r0, r7, #26
    6be6:	d404      	bmi.n	6bf2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1526>
    6be8:	f640 515f 	movw	r1, #3423	; 0xd5f
    6bec:	2036      	movs	r0, #54	; 0x36
    6bee:	f7f9 ff39 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6bf2:	2023      	movs	r0, #35	; 0x23
    6bf4:	e02b      	b.n	6c4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6bf6:	b129      	cbz	r1, 6c04 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1538>
    6bf8:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
    6bfc:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
    6c00:	4291      	cmp	r1, r2
    6c02:	d81a      	bhi.n	6c3a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x156e>
    6c04:	b128      	cbz	r0, 6c12 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1546>
    6c06:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
    6c0a:	f8b4 1056 	ldrh.w	r1, [r4, #86]	; 0x56
    6c0e:	4288      	cmp	r0, r1
    6c10:	d813      	bhi.n	6c3a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x156e>
    6c12:	f8b4 1052 	ldrh.w	r1, [r4, #82]	; 0x52
    6c16:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
    6c1a:	4281      	cmp	r1, r0
    6c1c:	d309      	bcc.n	6c32 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1566>
    6c1e:	686a      	ldr	r2, [r5, #4]
    6c20:	f892 2138 	ldrb.w	r2, [r2, #312]	; 0x138
    6c24:	f88d 2000 	strb.w	r2, [sp]
    6c28:	9a00      	ldr	r2, [sp, #0]
    6c2a:	9200      	str	r2, [sp, #0]
    6c2c:	f89d 2000 	ldrb.w	r2, [sp]
    6c30:	b91a      	cbnz	r2, 6c3a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x156e>
    6c32:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
    6c36:	4291      	cmp	r1, r2
    6c38:	d301      	bcc.n	6c3e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1572>
    6c3a:	2022      	movs	r0, #34	; 0x22
    6c3c:	e007      	b.n	6c4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6c3e:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    6c42:	b301      	cbz	r1, 6c86 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15ba>
    6c44:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
    6c48:	4281      	cmp	r1, r0
    6c4a:	d322      	bcc.n	6c92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15c6>
    6c4c:	2008      	movs	r0, #8
    6c4e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    6c52:	220b      	movs	r2, #11
    6c54:	4913      	ldr	r1, [pc, #76]	; (6ca4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15d8>)
    6c56:	f104 0034 	add.w	r0, r4, #52	; 0x34
    6c5a:	f007 fa60 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6c5e:	7766      	strb	r6, [r4, #29]
    6c60:	77a6      	strb	r6, [r4, #30]
    6c62:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
    6c66:	2102      	movs	r1, #2
    6c68:	6868      	ldr	r0, [r5, #4]
    6c6a:	f007 ff7b 	bl	eb64 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    6c6e:	6868      	ldr	r0, [r5, #4]
    6c70:	f890 112e 	ldrb.w	r1, [r0, #302]	; 0x12e
    6c74:	2901      	cmp	r1, #1
    6c76:	d104      	bne.n	6c82 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15b6>
    6c78:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    6c7c:	7801      	ldrb	r1, [r0, #0]
    6c7e:	1e49      	subs	r1, r1, #1
    6c80:	7001      	strb	r1, [r0, #0]
    6c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6c86:	f8b4 004e 	ldrh.w	r0, [r4, #78]	; 0x4e
    6c8a:	2806      	cmp	r0, #6
    6c8c:	d301      	bcc.n	6c92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15c6>
    6c8e:	203e      	movs	r0, #62	; 0x3e
    6c90:	e7dd      	b.n	6c4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6c92:	6868      	ldr	r0, [r5, #4]
    6c94:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6c98:	2100      	movs	r1, #0
    6c9a:	f007 bf63 	b.w	eb64 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    6c9e:	0000      	.short	0x0000
    6ca0:	200000f0 	.word	0x200000f0
    6ca4:	0000e51f 	.word	0x0000e51f
    6ca8:	b570      	push	{r4, r5, r6, lr}
    6caa:	460e      	mov	r6, r1
    6cac:	4601      	mov	r1, r0
    6cae:	6850      	ldr	r0, [r2, #4]
    6cb0:	4614      	mov	r4, r2
    6cb2:	2500      	movs	r5, #0
    6cb4:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    6cb8:	481d      	ldr	r0, [pc, #116]	; (6d30 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1664>)
    6cba:	6840      	ldr	r0, [r0, #4]
    6cbc:	3088      	adds	r0, #136	; 0x88
    6cbe:	2912      	cmp	r1, #18
    6cc0:	d008      	beq.n	6cd4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1608>
    6cc2:	2914      	cmp	r1, #20
    6cc4:	d010      	beq.n	6ce8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x161c>
    6cc6:	2916      	cmp	r1, #22
    6cc8:	d01e      	beq.n	6d08 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x163c>
    6cca:	f240 613e 	movw	r1, #1598	; 0x63e
    6cce:	2036      	movs	r0, #54	; 0x36
    6cd0:	f7f9 fec8 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6cd4:	2109      	movs	r1, #9
    6cd6:	2300      	movs	r3, #0
    6cd8:	f006 ff10 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6cdc:	b330      	cbz	r0, 6d2c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6cde:	4620      	mov	r0, r4
    6ce0:	f008 f8e5 	bl	eeae <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xb2>
    6ce4:	4605      	mov	r5, r0
    6ce6:	e021      	b.n	6d2c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6ce8:	210a      	movs	r1, #10
    6cea:	2300      	movs	r3, #0
    6cec:	f006 ff06 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6cf0:	b1e0      	cbz	r0, 6d2c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6cf2:	f7ff ff1f 	bl	6b34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1468>
    6cf6:	b126      	cbz	r6, 6d02 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1636>
    6cf8:	6860      	ldr	r0, [r4, #4]
    6cfa:	2105      	movs	r1, #5
    6cfc:	30f6      	adds	r0, #246	; 0xf6
    6cfe:	f008 f86f 	bl	ede0 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x206>
    6d02:	f7fe ff17 	bl	5b34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x468>
    6d06:	e011      	b.n	6d2c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6d08:	2a20      	cmp	r2, #32
    6d0a:	d10f      	bne.n	6d2c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6d0c:	f7ff ff12 	bl	6b34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1468>
    6d10:	b14e      	cbz	r6, 6d26 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x165a>
    6d12:	6860      	ldr	r0, [r4, #4]
    6d14:	2108      	movs	r1, #8
    6d16:	30f6      	adds	r0, #246	; 0xf6
    6d18:	f008 f862 	bl	ede0 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x206>
    6d1c:	6860      	ldr	r0, [r4, #4]
    6d1e:	210b      	movs	r1, #11
    6d20:	30f6      	adds	r0, #246	; 0xf6
    6d22:	f008 f85d 	bl	ede0 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x206>
    6d26:	201a      	movs	r0, #26
    6d28:	f7ff fb9e 	bl	6468 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    6d2c:	4628      	mov	r0, r5
    6d2e:	bd70      	pop	{r4, r5, r6, pc}
    6d30:	200000f0 	.word	0x200000f0
    6d34:	4a19      	ldr	r2, [pc, #100]	; (6d9c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16d0>)
    6d36:	2901      	cmp	r1, #1
    6d38:	6852      	ldr	r2, [r2, #4]
    6d3a:	d010      	beq.n	6d5e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1692>
    6d3c:	2100      	movs	r1, #0
    6d3e:	b1c8      	cbz	r0, 6d74 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16a8>
    6d40:	2801      	cmp	r0, #1
    6d42:	d022      	beq.n	6d8a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16be>
    6d44:	2803      	cmp	r0, #3
    6d46:	d109      	bne.n	6d5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6d48:	f892 00a5 	ldrb.w	r0, [r2, #165]	; 0xa5
    6d4c:	2814      	cmp	r0, #20
    6d4e:	d005      	beq.n	6d5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6d50:	2817      	cmp	r0, #23
    6d52:	d003      	beq.n	6d5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6d54:	2819      	cmp	r0, #25
    6d56:	d001      	beq.n	6d5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6d58:	f882 1278 	strb.w	r1, [r2, #632]	; 0x278
    6d5c:	4770      	bx	lr
    6d5e:	f892 012e 	ldrb.w	r0, [r2, #302]	; 0x12e
    6d62:	2801      	cmp	r0, #1
    6d64:	d0fa      	beq.n	6d5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6d66:	bf00      	nop
    6d68:	f8d2 0258 	ldr.w	r0, [r2, #600]	; 0x258
    6d6c:	7801      	ldrb	r1, [r0, #0]
    6d6e:	1e49      	subs	r1, r1, #1
    6d70:	7001      	strb	r1, [r0, #0]
    6d72:	4770      	bx	lr
    6d74:	f8b2 009c 	ldrh.w	r0, [r2, #156]	; 0x9c
    6d78:	f8b2 3266 	ldrh.w	r3, [r2, #614]	; 0x266
    6d7c:	1ac0      	subs	r0, r0, r3
    6d7e:	b200      	sxth	r0, r0
    6d80:	2800      	cmp	r0, #0
    6d82:	dbf6      	blt.n	6d72 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16a6>
    6d84:	f882 1264 	strb.w	r1, [r2, #612]	; 0x264
    6d88:	4770      	bx	lr
    6d8a:	f8b2 009c 	ldrh.w	r0, [r2, #156]	; 0x9c
    6d8e:	f8b2 125e 	ldrh.w	r1, [r2, #606]	; 0x25e
    6d92:	1a40      	subs	r0, r0, r1
    6d94:	b200      	sxth	r0, r0
    6d96:	2800      	cmp	r0, #0
    6d98:	dae6      	bge.n	6d68 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x169c>
    6d9a:	4770      	bx	lr
    6d9c:	200000f0 	.word	0x200000f0

00006da0 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>:
    6da0:	b510      	push	{r4, lr}
    6da2:	6981      	ldr	r1, [r0, #24]
    6da4:	b119      	cbz	r1, 6dae <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0xe>
    6da6:	6882      	ldr	r2, [r0, #8]
    6da8:	688b      	ldr	r3, [r1, #8]
    6daa:	429a      	cmp	r2, r3
    6dac:	d203      	bcs.n	6db6 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x16>
    6dae:	21c0      	movs	r1, #192	; 0xc0
    6db0:	2037      	movs	r0, #55	; 0x37
    6db2:	f7f9 fe57 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6db6:	6942      	ldr	r2, [r0, #20]
    6db8:	614a      	str	r2, [r1, #20]
    6dba:	6903      	ldr	r3, [r0, #16]
    6dbc:	610b      	str	r3, [r1, #16]
    6dbe:	b10a      	cbz	r2, 6dc4 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x24>
    6dc0:	6111      	str	r1, [r2, #16]
    6dc2:	e001      	b.n	6dc8 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x28>
    6dc4:	4a06      	ldr	r2, [pc, #24]	; (6de0 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x40>)
    6dc6:	6011      	str	r1, [r2, #0]
    6dc8:	690a      	ldr	r2, [r1, #16]
    6dca:	b132      	cbz	r2, 6dda <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3a>
    6dcc:	6151      	str	r1, [r2, #20]
    6dce:	e9d0 2002 	ldrd	r2, r0, [r0, #8]
    6dd2:	4410      	add	r0, r2
    6dd4:	688a      	ldr	r2, [r1, #8]
    6dd6:	1a80      	subs	r0, r0, r2
    6dd8:	e000      	b.n	6ddc <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3c>
    6dda:	2000      	movs	r0, #0
    6ddc:	60c8      	str	r0, [r1, #12]
    6dde:	bd10      	pop	{r4, pc}
    6de0:	20000258 	.word	0x20000258

00006de4 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>:
    6de4:	b510      	push	{r4, lr}
    6de6:	2200      	movs	r2, #0
    6de8:	6141      	str	r1, [r0, #20]
    6dea:	b189      	cbz	r1, 6e10 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x2c>
    6dec:	690b      	ldr	r3, [r1, #16]
    6dee:	6108      	str	r0, [r1, #16]
    6df0:	6103      	str	r3, [r0, #16]
    6df2:	b103      	cbz	r3, 6df6 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    6df4:	6158      	str	r0, [r3, #20]
    6df6:	6941      	ldr	r1, [r0, #20]
    6df8:	60c2      	str	r2, [r0, #12]
    6dfa:	2900      	cmp	r1, #0
    6dfc:	d00f      	beq.n	6e1e <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3a>
    6dfe:	68cb      	ldr	r3, [r1, #12]
    6e00:	b163      	cbz	r3, 6e1c <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x38>
    6e02:	6884      	ldr	r4, [r0, #8]
    6e04:	42a3      	cmp	r3, r4
    6e06:	d207      	bcs.n	6e18 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x34>
    6e08:	212b      	movs	r1, #43	; 0x2b
    6e0a:	2037      	movs	r0, #55	; 0x37
    6e0c:	f7f9 fe2a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e10:	4903      	ldr	r1, [pc, #12]	; (6e20 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3c>)
    6e12:	6102      	str	r2, [r0, #16]
    6e14:	6008      	str	r0, [r1, #0]
    6e16:	e7ee      	b.n	6df6 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    6e18:	1b1b      	subs	r3, r3, r4
    6e1a:	60c3      	str	r3, [r0, #12]
    6e1c:	60ca      	str	r2, [r1, #12]
    6e1e:	bd10      	pop	{r4, pc}
    6e20:	20000258 	.word	0x20000258

00006e24 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>:
    6e24:	6941      	ldr	r1, [r0, #20]
    6e26:	b149      	cbz	r1, 6e3c <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x18>
    6e28:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    6e2c:	441a      	add	r2, r3
    6e2e:	68cb      	ldr	r3, [r1, #12]
    6e30:	441a      	add	r2, r3
    6e32:	60ca      	str	r2, [r1, #12]
    6e34:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
    6e38:	6111      	str	r1, [r2, #16]
    6e3a:	e002      	b.n	6e42 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x1e>
    6e3c:	4a06      	ldr	r2, [pc, #24]	; (6e58 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x34>)
    6e3e:	6901      	ldr	r1, [r0, #16]
    6e40:	6011      	str	r1, [r2, #0]
    6e42:	e9d0 1004 	ldrd	r1, r0, [r0, #16]
    6e46:	b109      	cbz	r1, 6e4c <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x28>
    6e48:	6148      	str	r0, [r1, #20]
    6e4a:	4770      	bx	lr
    6e4c:	2800      	cmp	r0, #0
    6e4e:	d0fc      	beq.n	6e4a <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x26>
    6e50:	2100      	movs	r1, #0
    6e52:	60c1      	str	r1, [r0, #12]
    6e54:	4770      	bx	lr
    6e56:	0000      	.short	0x0000
    6e58:	20000258 	.word	0x20000258

00006e5c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>:
    6e5c:	b510      	push	{r4, lr}
    6e5e:	4604      	mov	r4, r0
    6e60:	490a      	ldr	r1, [pc, #40]	; (6e8c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x30>)
    6e62:	2000      	movs	r0, #0
    6e64:	4602      	mov	r2, r0
    6e66:	6809      	ldr	r1, [r1, #0]
    6e68:	1e43      	subs	r3, r0, #1
    6e6a:	e008      	b.n	6e7e <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x22>
    6e6c:	68ca      	ldr	r2, [r1, #12]
    6e6e:	42a2      	cmp	r2, r4
    6e70:	d303      	bcc.n	6e7a <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    6e72:	429a      	cmp	r2, r3
    6e74:	d201      	bcs.n	6e7a <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    6e76:	4613      	mov	r3, r2
    6e78:	4608      	mov	r0, r1
    6e7a:	460a      	mov	r2, r1
    6e7c:	6909      	ldr	r1, [r1, #16]
    6e7e:	2900      	cmp	r1, #0
    6e80:	d1f4      	bne.n	6e6c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x10>
    6e82:	2800      	cmp	r0, #0
    6e84:	d100      	bne.n	6e88 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x2c>
    6e86:	4610      	mov	r0, r2
    6e88:	bd10      	pop	{r4, pc}
    6e8a:	0000      	.short	0x0000
    6e8c:	20000258 	.word	0x20000258

00006e90 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>:
    6e90:	4801      	ldr	r0, [pc, #4]	; (6e98 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I+0x8>)
    6e92:	6800      	ldr	r0, [r0, #0]
    6e94:	4770      	bx	lr
    6e96:	0000      	.short	0x0000
    6e98:	20000258 	.word	0x20000258

00006e9c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>:
    6e9c:	4804      	ldr	r0, [pc, #16]	; (6eb0 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x14>)
    6e9e:	6801      	ldr	r1, [r0, #0]
    6ea0:	2000      	movs	r0, #0
    6ea2:	e001      	b.n	6ea8 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0xc>
    6ea4:	4608      	mov	r0, r1
    6ea6:	6909      	ldr	r1, [r1, #16]
    6ea8:	2900      	cmp	r1, #0
    6eaa:	d1fb      	bne.n	6ea4 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x8>
    6eac:	4770      	bx	lr
    6eae:	0000      	.short	0x0000
    6eb0:	20000258 	.word	0x20000258

00006eb4 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>:
    6eb4:	4801      	ldr	r0, [pc, #4]	; (6ebc <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA+0x8>)
    6eb6:	2100      	movs	r1, #0
    6eb8:	6001      	str	r1, [r0, #0]
    6eba:	4770      	bx	lr
    6ebc:	20000258 	.word	0x20000258

00006ec0 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>:
    6ec0:	4903      	ldr	r1, [pc, #12]	; (6ed0 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0x10>)
    6ec2:	2000      	movs	r0, #0
    6ec4:	6809      	ldr	r1, [r1, #0]
    6ec6:	2900      	cmp	r1, #0
    6ec8:	d000      	beq.n	6ecc <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0xc>
    6eca:	200c      	movs	r0, #12
    6ecc:	4770      	bx	lr
    6ece:	0000      	.short	0x0000
    6ed0:	20000258 	.word	0x20000258

00006ed4 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    6ed4:	b570      	push	{r4, r5, r6, lr}
    6ed6:	6844      	ldr	r4, [r0, #4]
    6ed8:	220d      	movs	r2, #13
    6eda:	f504 759c 	add.w	r5, r4, #312	; 0x138
    6ede:	2100      	movs	r1, #0
    6ee0:	f104 0078 	add.w	r0, r4, #120	; 0x78
    6ee4:	f009 fc3d 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6ee8:	f44f 70a7 	mov.w	r0, #334	; 0x14e
    6eec:	2100      	movs	r1, #0
    6eee:	f8a4 114c 	strh.w	r1, [r4, #332]	; 0x14c
    6ef2:	5501      	strb	r1, [r0, r4]
    6ef4:	f8a5 1017 	strh.w	r1, [r5, #23]
    6ef8:	7669      	strb	r1, [r5, #25]
    6efa:	4608      	mov	r0, r1
    6efc:	f05f 017f 	movs.w	r1, #127	; 0x7f
    6f00:	eb04 0240 	add.w	r2, r4, r0, lsl #1
    6f04:	1c40      	adds	r0, r0, #1
    6f06:	b2c0      	uxtb	r0, r0
    6f08:	f882 107d 	strb.w	r1, [r2, #125]	; 0x7d
    6f0c:	2802      	cmp	r0, #2
    6f0e:	d3f7      	bcc.n	6f00 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x2c>
    6f10:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    6f14:	4620      	mov	r0, r4
    6f16:	f008 fa4e 	bl	f3b6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    6f1a:	2000      	movs	r0, #0
    6f1c:	21ff      	movs	r1, #255	; 0xff
    6f1e:	1822      	adds	r2, r4, r0
    6f20:	1c40      	adds	r0, r0, #1
    6f22:	b2c0      	uxtb	r0, r0
    6f24:	f882 1080 	strb.w	r1, [r2, #128]	; 0x80
    6f28:	2802      	cmp	r0, #2
    6f2a:	d3f8      	bcc.n	6f1e <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x4a>
    6f2c:	bd70      	pop	{r4, r5, r6, pc}
	...

00006f30 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>:
    6f30:	b500      	push	{lr}
    6f32:	7941      	ldrb	r1, [r0, #5]
    6f34:	b095      	sub	sp, #84	; 0x54
    6f36:	b141      	cbz	r1, 6f4a <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    6f38:	2901      	cmp	r1, #1
    6f3a:	d006      	beq.n	6f4a <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    6f3c:	2902      	cmp	r1, #2
    6f3e:	d004      	beq.n	6f4a <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    6f40:	2903      	cmp	r1, #3
    6f42:	d002      	beq.n	6f4a <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    6f44:	2012      	movs	r0, #18
    6f46:	b015      	add	sp, #84	; 0x54
    6f48:	bd00      	pop	{pc}
    6f4a:	7901      	ldrb	r1, [r0, #4]
    6f4c:	f88d 1000 	strb.w	r1, [sp]
    6f50:	7b01      	ldrb	r1, [r0, #12]
    6f52:	f88d 1001 	strb.w	r1, [sp, #1]
    6f56:	7942      	ldrb	r2, [r0, #5]
    6f58:	2100      	movs	r1, #0
    6f5a:	2301      	movs	r3, #1
    6f5c:	b3f2      	cbz	r2, 6fdc <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xac>
    6f5e:	2a02      	cmp	r2, #2
    6f60:	d03d      	beq.n	6fde <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xae>
    6f62:	f88d 3002 	strb.w	r3, [sp, #2]
    6f66:	bf00      	nop
    6f68:	f8d0 2006 	ldr.w	r2, [r0, #6]
    6f6c:	f8cd 2003 	str.w	r2, [sp, #3]
    6f70:	8942      	ldrh	r2, [r0, #10]
    6f72:	f8ad 2007 	strh.w	r2, [sp, #7]
    6f76:	f88d 3009 	strb.w	r3, [sp, #9]
    6f7a:	f830 2b01 	ldrh.w	r2, [r0], #1
    6f7e:	f240 2371 	movw	r3, #625	; 0x271
    6f82:	435a      	muls	r2, r3
    6f84:	9203      	str	r2, [sp, #12]
    6f86:	f8b0 2001 	ldrh.w	r2, [r0, #1]
    6f8a:	435a      	muls	r2, r3
    6f8c:	9206      	str	r2, [sp, #24]
    6f8e:	8982      	ldrh	r2, [r0, #12]
    6f90:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    6f94:	89c2      	ldrh	r2, [r0, #14]
    6f96:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
    6f9a:	8a02      	ldrh	r2, [r0, #16]
    6f9c:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    6fa0:	8a42      	ldrh	r2, [r0, #18]
    6fa2:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
    6fa6:	8a82      	ldrh	r2, [r0, #20]
    6fa8:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    6fac:	8ac0      	ldrh	r0, [r0, #22]
    6fae:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    6fb2:	2007      	movs	r0, #7
    6fb4:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    6fb8:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
    6fbc:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
    6fc0:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    6fc4:	9806      	ldr	r0, [sp, #24]
    6fc6:	f000 fa0d 	bl	73e4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x168>
    6fca:	b158      	cbz	r0, 6fe4 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb4>
    6fcc:	9803      	ldr	r0, [sp, #12]
    6fce:	f000 f9fd 	bl	73cc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x150>
    6fd2:	b138      	cbz	r0, 6fe4 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb4>
    6fd4:	4668      	mov	r0, sp
    6fd6:	f008 fc5b 	bl	f890 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>
    6fda:	e7b4      	b.n	6f46 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>
    6fdc:	e7ff      	b.n	6fde <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xae>
    6fde:	f88d 1002 	strb.w	r1, [sp, #2]
    6fe2:	e7c1      	b.n	6f68 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x38>
    6fe4:	2030      	movs	r0, #48	; 0x30
    6fe6:	e7ae      	b.n	6f46 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>

00006fe8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    6fe8:	4903      	ldr	r1, [pc, #12]	; (6ff8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    6fea:	884a      	ldrh	r2, [r1, #2]
    6fec:	8002      	strh	r2, [r0, #0]
    6fee:	7809      	ldrb	r1, [r1, #0]
    6ff0:	7081      	strb	r1, [r0, #2]
    6ff2:	2000      	movs	r0, #0
    6ff4:	4770      	bx	lr
    6ff6:	0000      	.short	0x0000
    6ff8:	20000f24 	.word	0x20000f24

00006ffc <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    6ffc:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    6ffe:	460c      	mov	r4, r1
    7000:	4605      	mov	r5, r0
    7002:	8800      	ldrh	r0, [r0, #0]
    7004:	4669      	mov	r1, sp
    7006:	f006 fd50 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    700a:	2200      	movs	r2, #0
    700c:	b128      	cbz	r0, 701a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a>
    700e:	f8c4 2002 	str.w	r2, [r4, #2]
    7012:	71a2      	strb	r2, [r4, #6]
    7014:	8022      	strh	r2, [r4, #0]
    7016:	2002      	movs	r0, #2
    7018:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    701a:	9901      	ldr	r1, [sp, #4]
    701c:	f111 0188 	adds.w	r1, r1, #136	; 0x88
    7020:	f881 2076 	strb.w	r2, [r1, #118]	; 0x76
    7024:	f8d1 0026 	ldr.w	r0, [r1, #38]	; 0x26
    7028:	f8c4 0002 	str.w	r0, [r4, #2]
    702c:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
    7030:	71a0      	strb	r0, [r4, #6]
    7032:	8828      	ldrh	r0, [r5, #0]
    7034:	8020      	strh	r0, [r4, #0]
    7036:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
    703a:	f88d 0008 	strb.w	r0, [sp, #8]
    703e:	9802      	ldr	r0, [sp, #8]
    7040:	9002      	str	r0, [sp, #8]
    7042:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7046:	2800      	cmp	r0, #0
    7048:	d1ea      	bne.n	7020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>
    704a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000704c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    704c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    704e:	460d      	mov	r5, r1
    7050:	4606      	mov	r6, r0
    7052:	8800      	ldrh	r0, [r0, #0]
    7054:	4669      	mov	r1, sp
    7056:	f006 fd28 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    705a:	2800      	cmp	r0, #0
    705c:	d11a      	bne.n	7094 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    705e:	f8dd 4004 	ldr.w	r4, [sp, #4]
    7062:	2700      	movs	r7, #0
    7064:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    7068:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    706c:	f008 fe08 	bl	fc80 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x44>
    7070:	70a8      	strb	r0, [r5, #2]
    7072:	7860      	ldrb	r0, [r4, #1]
    7074:	f008 fe04 	bl	fc80 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x44>
    7078:	70e8      	strb	r0, [r5, #3]
    707a:	78a0      	ldrb	r0, [r4, #2]
    707c:	f88d 0008 	strb.w	r0, [sp, #8]
    7080:	9802      	ldr	r0, [sp, #8]
    7082:	9002      	str	r0, [sp, #8]
    7084:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7088:	3c6a      	subs	r4, #106	; 0x6a
    708a:	2800      	cmp	r0, #0
    708c:	d1ea      	bne.n	7064 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    708e:	8830      	ldrh	r0, [r6, #0]
    7090:	8028      	strh	r0, [r5, #0]
    7092:	2000      	movs	r0, #0
    7094:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00007098 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    7098:	4903      	ldr	r1, [pc, #12]	; (70a8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    709a:	888a      	ldrh	r2, [r1, #4]
    709c:	8002      	strh	r2, [r0, #0]
    709e:	88c9      	ldrh	r1, [r1, #6]
    70a0:	8041      	strh	r1, [r0, #2]
    70a2:	2000      	movs	r0, #0
    70a4:	4770      	bx	lr
    70a6:	0000      	.short	0x0000
    70a8:	2000026a 	.word	0x2000026a

000070ac <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    70ac:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    70ae:	2400      	movs	r4, #0
    70b0:	a902      	add	r1, sp, #8
    70b2:	f88d 4004 	strb.w	r4, [sp, #4]
    70b6:	f88d 4008 	strb.w	r4, [sp, #8]
    70ba:	9100      	str	r1, [sp, #0]
    70bc:	7882      	ldrb	r2, [r0, #2]
    70be:	7841      	ldrb	r1, [r0, #1]
    70c0:	7800      	ldrb	r0, [r0, #0]
    70c2:	ab01      	add	r3, sp, #4
    70c4:	f008 ffdb 	bl	1007e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x442>
    70c8:	2800      	cmp	r0, #0
    70ca:	d112      	bne.n	70f2 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    70cc:	f89d 0004 	ldrb.w	r0, [sp, #4]
    70d0:	f008 fded 	bl	fcae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x72>
    70d4:	b170      	cbz	r0, 70f4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    70d6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    70da:	f008 fde8 	bl	fcae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x72>
    70de:	b148      	cbz	r0, 70f4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    70e0:	4805      	ldr	r0, [pc, #20]	; (70f8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    70e2:	f89d 1004 	ldrb.w	r1, [sp, #4]
    70e6:	7381      	strb	r1, [r0, #14]
    70e8:	f89d 1008 	ldrb.w	r1, [sp, #8]
    70ec:	73c1      	strb	r1, [r0, #15]
    70ee:	8204      	strh	r4, [r0, #16]
    70f0:	2000      	movs	r0, #0
    70f2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    70f4:	2011      	movs	r0, #17
    70f6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    70f8:	20000f24 	.word	0x20000f24

000070fc <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>:
    70fc:	b51c      	push	{r2, r3, r4, lr}
    70fe:	4604      	mov	r4, r0
    7100:	f006 fcbd 	bl	da7e <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>
    7104:	b148      	cbz	r0, 711a <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x1e>
    7106:	4620      	mov	r0, r4
    7108:	f7fb fae2 	bl	26d0 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>
    710c:	4909      	ldr	r1, [pc, #36]	; (7134 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x38>)
    710e:	24ff      	movs	r4, #255	; 0xff
    7110:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    7114:	e9cd 0100 	strd	r0, r1, [sp]
    7118:	e004      	b.n	7124 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x28>
    711a:	2012      	movs	r0, #18
    711c:	bd1c      	pop	{r2, r3, r4, pc}
    711e:	9800      	ldr	r0, [sp, #0]
    7120:	f880 425c 	strb.w	r4, [r0, #604]	; 0x25c
    7124:	4668      	mov	r0, sp
    7126:	f7f9 febb 	bl	ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    712a:	2800      	cmp	r0, #0
    712c:	d0f7      	beq.n	711e <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x22>
    712e:	2000      	movs	r0, #0
    7130:	bd1c      	pop	{r2, r3, r4, pc}
    7132:	0000      	.short	0x0000
    7134:	00007718 	.word	0x00007718

00007138 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    7138:	7801      	ldrb	r1, [r0, #0]
    713a:	b171      	cbz	r1, 715a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    713c:	7841      	ldrb	r1, [r0, #1]
    713e:	b161      	cbz	r1, 715a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    7140:	8841      	ldrh	r1, [r0, #2]
    7142:	291b      	cmp	r1, #27
    7144:	d309      	bcc.n	715a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    7146:	8881      	ldrh	r1, [r0, #4]
    7148:	291b      	cmp	r1, #27
    714a:	d306      	bcc.n	715a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    714c:	4904      	ldr	r1, [pc, #16]	; (7160 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    714e:	6802      	ldr	r2, [r0, #0]
    7150:	600a      	str	r2, [r1, #0]
    7152:	8880      	ldrh	r0, [r0, #4]
    7154:	8088      	strh	r0, [r1, #4]
    7156:	2000      	movs	r0, #0
    7158:	4770      	bx	lr
    715a:	2012      	movs	r0, #18
    715c:	4770      	bx	lr
    715e:	0000      	.short	0x0000
    7160:	20000f24 	.word	0x20000f24

00007164 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    7164:	6800      	ldr	r0, [r0, #0]
    7166:	f240 41e2 	movw	r1, #1250	; 0x4e2
    716a:	4288      	cmp	r0, r1
    716c:	d303      	bcc.n	7176 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    716e:	4903      	ldr	r1, [pc, #12]	; (717c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    7170:	6088      	str	r0, [r1, #8]
    7172:	2000      	movs	r0, #0
    7174:	4770      	bx	lr
    7176:	2012      	movs	r0, #18
    7178:	4770      	bx	lr
    717a:	0000      	.short	0x0000
    717c:	20000f24 	.word	0x20000f24

00007180 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>:
    7180:	b510      	push	{r4, lr}
    7182:	b086      	sub	sp, #24
    7184:	4604      	mov	r4, r0
    7186:	f008 fe6d 	bl	fe64 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x228>
    718a:	2800      	cmp	r0, #0
    718c:	d103      	bne.n	7196 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    718e:	f008 ff63 	bl	10058 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41c>
    7192:	b110      	cbz	r0, 719a <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x1a>
    7194:	200c      	movs	r0, #12
    7196:	b006      	add	sp, #24
    7198:	bd10      	pop	{r4, pc}
    719a:	2102      	movs	r1, #2
    719c:	f104 0010 	add.w	r0, r4, #16
    71a0:	f000 f92c 	bl	73fc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x180>
    71a4:	78a0      	ldrb	r0, [r4, #2]
    71a6:	f88d 0008 	strb.w	r0, [sp, #8]
    71aa:	78a0      	ldrb	r0, [r4, #2]
    71ac:	f88d 0000 	strb.w	r0, [sp]
    71b0:	7860      	ldrb	r0, [r4, #1]
    71b2:	f88d 0003 	strb.w	r0, [sp, #3]
    71b6:	7820      	ldrb	r0, [r4, #0]
    71b8:	f88d 0002 	strb.w	r0, [sp, #2]
    71bc:	7e20      	ldrb	r0, [r4, #24]
    71be:	f88d 0004 	strb.w	r0, [sp, #4]
    71c2:	78a0      	ldrb	r0, [r4, #2]
    71c4:	07c0      	lsls	r0, r0, #31
    71c6:	d00b      	beq.n	71e0 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x60>
    71c8:	78e0      	ldrb	r0, [r4, #3]
    71ca:	2801      	cmp	r0, #1
    71cc:	d011      	beq.n	71f2 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x72>
    71ce:	b190      	cbz	r0, 71f6 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x76>
    71d0:	f05f 0000 	movs.w	r0, #0
    71d4:	f88d 0001 	strb.w	r0, [sp, #1]
    71d8:	68a0      	ldr	r0, [r4, #8]
    71da:	9003      	str	r0, [sp, #12]
    71dc:	6920      	ldr	r0, [r4, #16]
    71de:	9004      	str	r0, [sp, #16]
    71e0:	a802      	add	r0, sp, #8
    71e2:	f7fd fbb7 	bl	4954 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    71e6:	2800      	cmp	r0, #0
    71e8:	d1d5      	bne.n	7196 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    71ea:	4668      	mov	r0, sp
    71ec:	f7fc f998 	bl	3520 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>
    71f0:	e7d1      	b.n	7196 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    71f2:	2002      	movs	r0, #2
    71f4:	e7ee      	b.n	71d4 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
    71f6:	2001      	movs	r0, #1
    71f8:	e7ec      	b.n	71d4 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
	...

000071fc <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>:
    71fc:	4801      	ldr	r0, [pc, #4]	; (7204 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA+0x8>)
    71fe:	f990 0000 	ldrsb.w	r0, [r0]
    7202:	4770      	bx	lr
    7204:	2000025c 	.word	0x2000025c

00007208 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    7208:	4a03      	ldr	r2, [pc, #12]	; (7218 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    720a:	e9d2 1200 	ldrd	r1, r2, [r2]
    720e:	6001      	str	r1, [r0, #0]
    7210:	6042      	str	r2, [r0, #4]
    7212:	2000      	movs	r0, #0
    7214:	4770      	bx	lr
    7216:	0000      	.short	0x0000
    7218:	00007718 	.word	0x00007718

0000721c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    721c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    721e:	8800      	ldrh	r0, [r0, #0]
    7220:	4669      	mov	r1, sp
    7222:	f006 fc42 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7226:	b968      	cbnz	r0, 7244 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    7228:	2401      	movs	r4, #1
    722a:	9801      	ldr	r0, [sp, #4]
    722c:	f008 fefe 	bl	1002c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f0>
    7230:	b140      	cbz	r0, 7244 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    7232:	9801      	ldr	r0, [sp, #4]
    7234:	4601      	mov	r1, r0
    7236:	f890 214a 	ldrb.w	r2, [r0, #330]	; 0x14a
    723a:	3088      	adds	r0, #136	; 0x88
    723c:	f501 71a5 	add.w	r1, r1, #330	; 0x14a
    7240:	b95a      	cbnz	r2, 725a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
    7242:	e001      	b.n	7248 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
    7244:	2002      	movs	r0, #2
    7246:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    7248:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
    724c:	f88d 2008 	strb.w	r2, [sp, #8]
    7250:	9a02      	ldr	r2, [sp, #8]
    7252:	9202      	str	r2, [sp, #8]
    7254:	f89d 2008 	ldrb.w	r2, [sp, #8]
    7258:	b10a      	cbz	r2, 725e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
    725a:	203a      	movs	r0, #58	; 0x3a
    725c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    725e:	f890 205f 	ldrb.w	r2, [r0, #95]	; 0x5f
    7262:	0792      	lsls	r2, r2, #30
    7264:	d006      	beq.n	7274 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>
    7266:	2203      	movs	r2, #3
    7268:	4903      	ldr	r1, [pc, #12]	; (7278 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x5c>)
    726a:	3060      	adds	r0, #96	; 0x60
    726c:	f006 ff6b 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    7270:	2000      	movs	r0, #0
    7272:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    7274:	700c      	strb	r4, [r1, #0]
    7276:	e7fb      	b.n	7270 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x54>
    7278:	0000e64f 	.word	0x0000e64f

0000727c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ>:
    727c:	b510      	push	{r4, lr}
    727e:	2005      	movs	r0, #5
    7280:	f000 fabe 	bl	7800 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    7284:	f7fe f8d4 	bl	5430 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>
    7288:	4902      	ldr	r1, [pc, #8]	; (7294 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x18>)
    728a:	4801      	ldr	r0, [pc, #4]	; (7290 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x14>)
    728c:	6048      	str	r0, [r1, #4]
    728e:	bd10      	pop	{r4, pc}
    7290:	00007299 	.word	0x00007299
    7294:	2000025c 	.word	0x2000025c
    7298:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    729c:	4613      	mov	r3, r2
    729e:	4a33      	ldr	r2, [pc, #204]	; (736c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xf0>)
    72a0:	460f      	mov	r7, r1
    72a2:	f8b0 1054 	ldrh.w	r1, [r0, #84]	; 0x54
    72a6:	8814      	ldrh	r4, [r2, #0]
    72a8:	f8b0 6052 	ldrh.w	r6, [r0, #82]	; 0x52
    72ac:	428c      	cmp	r4, r1
    72ae:	d200      	bcs.n	72b2 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x36>
    72b0:	4621      	mov	r1, r4
    72b2:	4688      	mov	r8, r1
    72b4:	8891      	ldrh	r1, [r2, #4]
    72b6:	42b1      	cmp	r1, r6
    72b8:	d200      	bcs.n	72bc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x40>
    72ba:	460e      	mov	r6, r1
    72bc:	8851      	ldrh	r1, [r2, #2]
    72be:	f640 0448 	movw	r4, #2120	; 0x848
    72c2:	42a1      	cmp	r1, r4
    72c4:	d300      	bcc.n	72c8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x4c>
    72c6:	4621      	mov	r1, r4
    72c8:	88d5      	ldrh	r5, [r2, #6]
    72ca:	42a5      	cmp	r5, r4
    72cc:	d300      	bcc.n	72d0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x54>
    72ce:	4625      	mov	r5, r4
    72d0:	42a1      	cmp	r1, r4
    72d2:	d200      	bcs.n	72d6 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x5a>
    72d4:	460c      	mov	r4, r1
    72d6:	f44f 72a4 	mov.w	r2, #328	; 0x148
    72da:	2e1b      	cmp	r6, #27
    72dc:	d001      	beq.n	72e2 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x66>
    72de:	4295      	cmp	r5, r2
    72e0:	d104      	bne.n	72ec <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x70>
    72e2:	f1b8 0f1b 	cmp.w	r8, #27
    72e6:	d03e      	beq.n	7366 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xea>
    72e8:	4294      	cmp	r4, r2
    72ea:	d03c      	beq.n	7366 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xea>
    72ec:	466a      	mov	r2, sp
    72ee:	4619      	mov	r1, r3
    72f0:	f008 fe43 	bl	ff7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33e>
    72f4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    72f8:	4641      	mov	r1, r8
    72fa:	4540      	cmp	r0, r8
    72fc:	d900      	bls.n	7300 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x84>
    72fe:	4608      	mov	r0, r1
    7300:	80f8      	strh	r0, [r7, #6]
    7302:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7306:	42a1      	cmp	r1, r4
    7308:	d800      	bhi.n	730c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x90>
    730a:	460c      	mov	r4, r1
    730c:	813c      	strh	r4, [r7, #8]
    730e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    7312:	42b1      	cmp	r1, r6
    7314:	d800      	bhi.n	7318 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x9c>
    7316:	460e      	mov	r6, r1
    7318:	807e      	strh	r6, [r7, #2]
    731a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    731e:	42a9      	cmp	r1, r5
    7320:	d800      	bhi.n	7324 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xa8>
    7322:	460d      	mov	r5, r1
    7324:	80bd      	strh	r5, [r7, #4]
    7326:	21ff      	movs	r1, #255	; 0xff
    7328:	7039      	strb	r1, [r7, #0]
    732a:	381b      	subs	r0, #27
    732c:	28e0      	cmp	r0, #224	; 0xe0
    732e:	d902      	bls.n	7336 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xba>
    7330:	f640 516e 	movw	r1, #3438	; 0xd6e
    7334:	e014      	b.n	7360 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xe4>
    7336:	3e1b      	subs	r6, #27
    7338:	2ee0      	cmp	r6, #224	; 0xe0
    733a:	d902      	bls.n	7342 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xc6>
    733c:	f44f 6157 	mov.w	r1, #3440	; 0xd70
    7340:	e00e      	b.n	7360 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xe4>
    7342:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    7346:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    734a:	4284      	cmp	r4, r0
    734c:	d902      	bls.n	7354 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xd8>
    734e:	f640 5172 	movw	r1, #3442	; 0xd72
    7352:	e005      	b.n	7360 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xe4>
    7354:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    7358:	4285      	cmp	r5, r0
    735a:	d904      	bls.n	7366 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xea>
    735c:	f640 5174 	movw	r1, #3444	; 0xd74
    7360:	2039      	movs	r0, #57	; 0x39
    7362:	f7f9 fb7f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7366:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    736a:	0000      	.short	0x0000
    736c:	2000026a 	.word	0x2000026a
    7370:	b510      	push	{r4, lr}
    7372:	480e      	ldr	r0, [pc, #56]	; (73ac <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x130>)
    7374:	2100      	movs	r1, #0
    7376:	4b0e      	ldr	r3, [pc, #56]	; (73b0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x134>)
    7378:	74c1      	strb	r1, [r0, #19]
    737a:	8281      	strh	r1, [r0, #20]
    737c:	221b      	movs	r2, #27
    737e:	801a      	strh	r2, [r3, #0]
    7380:	f44f 74a4 	mov.w	r4, #328	; 0x148
    7384:	805c      	strh	r4, [r3, #2]
    7386:	809a      	strh	r2, [r3, #4]
    7388:	80dc      	strh	r4, [r3, #6]
    738a:	7381      	strb	r1, [r0, #14]
    738c:	73c1      	strb	r1, [r0, #15]
    738e:	2303      	movs	r3, #3
    7390:	7003      	strb	r3, [r0, #0]
    7392:	2302      	movs	r3, #2
    7394:	7043      	strb	r3, [r0, #1]
    7396:	8042      	strh	r2, [r0, #2]
    7398:	8082      	strh	r2, [r0, #4]
    739a:	f640 62a6 	movw	r2, #3750	; 0xea6
    739e:	6082      	str	r2, [r0, #8]
    73a0:	7481      	strb	r1, [r0, #18]
    73a2:	7301      	strb	r1, [r0, #12]
    73a4:	4802      	ldr	r0, [pc, #8]	; (73b0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x134>)
    73a6:	1f80      	subs	r0, r0, #6
    73a8:	7001      	strb	r1, [r0, #0]
    73aa:	bd10      	pop	{r4, pc}
    73ac:	20000f24 	.word	0x20000f24
    73b0:	2000026a 	.word	0x2000026a
    73b4:	4904      	ldr	r1, [pc, #16]	; (73c8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x14c>)
    73b6:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    73ba:	4288      	cmp	r0, r1
    73bc:	d301      	bcc.n	73c2 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x146>
    73be:	2000      	movs	r0, #0
    73c0:	4770      	bx	lr
    73c2:	2001      	movs	r0, #1
    73c4:	4770      	bx	lr
    73c6:	0000      	.short	0x0000
    73c8:	0270f3cc 	.word	0x0270f3cc
    73cc:	4904      	ldr	r1, [pc, #16]	; (73e0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x164>)
    73ce:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    73d2:	4288      	cmp	r0, r1
    73d4:	d301      	bcc.n	73da <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x15e>
    73d6:	2000      	movs	r0, #0
    73d8:	4770      	bx	lr
    73da:	2001      	movs	r0, #1
    73dc:	4770      	bx	lr
    73de:	0000      	.short	0x0000
    73e0:	009c363d 	.word	0x009c363d
    73e4:	4904      	ldr	r1, [pc, #16]	; (73f8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x17c>)
    73e6:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    73ea:	4288      	cmp	r0, r1
    73ec:	d301      	bcc.n	73f2 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x176>
    73ee:	2000      	movs	r0, #0
    73f0:	4770      	bx	lr
    73f2:	2001      	movs	r0, #1
    73f4:	4770      	bx	lr
    73f6:	0000      	.short	0x0000
    73f8:	009c363d 	.word	0x009c363d
    73fc:	b530      	push	{r4, r5, lr}
    73fe:	2200      	movs	r2, #0
    7400:	4d07      	ldr	r5, [pc, #28]	; (7420 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1a4>)
    7402:	e009      	b.n	7418 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x19c>
    7404:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    7408:	462b      	mov	r3, r5
    740a:	429c      	cmp	r4, r3
    740c:	d800      	bhi.n	7410 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x194>
    740e:	4623      	mov	r3, r4
    7410:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    7414:	1c52      	adds	r2, r2, #1
    7416:	b2d2      	uxtb	r2, r2
    7418:	428a      	cmp	r2, r1
    741a:	d3f3      	bcc.n	7404 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x188>
    741c:	bd30      	pop	{r4, r5, pc}
    741e:	0000      	.short	0x0000
    7420:	00f42400 	.word	0x00f42400
    7424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7428:	4604      	mov	r4, r0
    742a:	a05c      	add	r0, pc, #368	; (adr r0, 759c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x320>)
    742c:	4688      	mov	r8, r1
    742e:	e9d0 7600 	ldrd	r7, r6, [r0]
    7432:	b087      	sub	sp, #28
    7434:	4699      	mov	r9, r3
    7436:	4615      	mov	r5, r2
    7438:	2100      	movs	r1, #0
    743a:	4620      	mov	r0, r4
    743c:	f7fb f88c 	bl	2558 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    7440:	f8a4 8000 	strh.w	r8, [r4]
    7444:	4857      	ldr	r0, [pc, #348]	; (75a4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x328>)
    7446:	f8c4 0258 	str.w	r0, [r4, #600]	; 0x258
    744a:	f000 f9e5 	bl	7818 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    744e:	0940      	lsrs	r0, r0, #5
    7450:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    7454:	07c1      	lsls	r1, r0, #31
    7456:	f8df 8150 	ldr.w	r8, [pc, #336]	; 75a8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x32c>
    745a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    745e:	d006      	beq.n	746e <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1f2>
    7460:	f8b8 2002 	ldrh.w	r2, [r8, #2]
    7464:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    7468:	84c2      	strh	r2, [r0, #38]	; 0x26
    746a:	8501      	strh	r1, [r0, #40]	; 0x28
    746c:	e002      	b.n	7474 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1f8>
    746e:	211b      	movs	r1, #27
    7470:	84c1      	strh	r1, [r0, #38]	; 0x26
    7472:	8501      	strh	r1, [r0, #40]	; 0x28
    7474:	f000 f9d0 	bl	7818 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    7478:	0788      	lsls	r0, r1, #30
    747a:	d506      	bpl.n	748a <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x20e>
    747c:	2000      	movs	r0, #0
    747e:	f88d 0000 	strb.w	r0, [sp]
    7482:	4668      	mov	r0, sp
    7484:	9401      	str	r4, [sp, #4]
    7486:	f7ff fd25 	bl	6ed4 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    748a:	f898 1001 	ldrb.w	r1, [r8, #1]
    748e:	9100      	str	r1, [sp, #0]
    7490:	f898 3000 	ldrb.w	r3, [r8]
    7494:	f8b8 2004 	ldrh.w	r2, [r8, #4]
    7498:	f8b8 1002 	ldrh.w	r1, [r8, #2]
    749c:	8820      	ldrh	r0, [r4, #0]
    749e:	f7f9 fded 	bl	107c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    74a2:	b120      	cbz	r0, 74ae <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x232>
    74a4:	f640 7106 	movw	r1, #3846	; 0xf06
    74a8:	2039      	movs	r0, #57	; 0x39
    74aa:	f7f9 fadb 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74ae:	f006 ffb7 	bl	e420 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>
    74b2:	6160      	str	r0, [r4, #20]
    74b4:	f1b9 0f00 	cmp.w	r9, #0
    74b8:	d004      	beq.n	74c4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x248>
    74ba:	f7fb fc85 	bl	2dc8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    74be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    74c2:	61e0      	str	r0, [r4, #28]
    74c4:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
    74c8:	eb05 0040 	add.w	r0, r5, r0, lsl #1
    74cc:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
    74ce:	f006 faf8 	bl	dac2 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    74d2:	6120      	str	r0, [r4, #16]
    74d4:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
    74d8:	eb05 0040 	add.w	r0, r5, r0, lsl #1
    74dc:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    74de:	8320      	strh	r0, [r4, #24]
    74e0:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
    74e4:	eb05 0040 	add.w	r0, r5, r0, lsl #1
    74e8:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    74ea:	8360      	strh	r0, [r4, #26]
    74ec:	7a68      	ldrb	r0, [r5, #9]
    74ee:	f008 fbbd 	bl	fc6c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30>
    74f2:	f8d8 1008 	ldr.w	r1, [r8, #8]
    74f6:	4645      	mov	r5, r8
    74f8:	4620      	mov	r0, r4
    74fa:	62e1      	str	r1, [r4, #44]	; 0x2c
    74fc:	f007 fb6d 	bl	ebda <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY>
    7500:	f8c4 70ae 	str.w	r7, [r4, #174]	; 0xae
    7504:	f884 60b2 	strb.w	r6, [r4, #178]	; 0xb2
    7508:	20ff      	movs	r0, #255	; 0xff
    750a:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    750e:	4825      	ldr	r0, [pc, #148]	; (75a4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x328>)
    7510:	3808      	subs	r0, #8
    7512:	6843      	ldr	r3, [r0, #4]
    7514:	b123      	cbz	r3, 7520 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x2a4>
    7516:	2201      	movs	r2, #1
    7518:	f504 719d 	add.w	r1, r4, #314	; 0x13a
    751c:	4620      	mov	r0, r4
    751e:	4798      	blx	r3
    7520:	8821      	ldrh	r1, [r4, #0]
    7522:	f8ad 1004 	strh.w	r1, [sp, #4]
    7526:	7ba9      	ldrb	r1, [r5, #14]
    7528:	f88d 1006 	strb.w	r1, [sp, #6]
    752c:	7be9      	ldrb	r1, [r5, #15]
    752e:	f88d 1007 	strb.w	r1, [sp, #7]
    7532:	8a29      	ldrh	r1, [r5, #16]
    7534:	f8ad 1008 	strh.w	r1, [sp, #8]
    7538:	a904      	add	r1, sp, #16
    753a:	9100      	str	r1, [sp, #0]
    753c:	2000      	movs	r0, #0
    753e:	ab03      	add	r3, sp, #12
    7540:	aa01      	add	r2, sp, #4
    7542:	4621      	mov	r1, r4
    7544:	f008 fd4f 	bl	ffe6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3aa>
    7548:	0005      	movs	r5, r0
    754a:	d10f      	bne.n	756c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x2f0>
    754c:	f89d 000c 	ldrb.w	r0, [sp, #12]
    7550:	f88d 0014 	strb.w	r0, [sp, #20]
    7554:	f89d 0010 	ldrb.w	r0, [sp, #16]
    7558:	f88d 0015 	strb.w	r0, [sp, #21]
    755c:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    7560:	f8ad 0016 	strh.w	r0, [sp, #22]
    7564:	a905      	add	r1, sp, #20
    7566:	4620      	mov	r0, r4
    7568:	f006 fb79 	bl	dc5e <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    756c:	f7fb fc2c 	bl	2dc8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    7570:	210c      	movs	r1, #12
    7572:	fbb0 f2f1 	udiv	r2, r0, r1
    7576:	fb01 0012 	mls	r0, r1, r2, r0
    757a:	1d40      	adds	r0, r0, #5
    757c:	b2c0      	uxtb	r0, r0
    757e:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
    7582:	2809      	cmp	r0, #9
    7584:	d202      	bcs.n	758c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x310>
    7586:	3008      	adds	r0, #8
    7588:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
    758c:	2101      	movs	r1, #1
    758e:	4620      	mov	r0, r4
    7590:	f7fa ffe2 	bl	2558 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    7594:	b007      	add	sp, #28
    7596:	4628      	mov	r0, r5
    7598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    759c:	ffffffff 	.word	0xffffffff
    75a0:	0000001f 	.word	0x0000001f
    75a4:	20000264 	.word	0x20000264
    75a8:	20000f24 	.word	0x20000f24
    75ac:	4a09      	ldr	r2, [pc, #36]	; (75d4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x358>)
    75ae:	4290      	cmp	r0, r2
    75b0:	d80b      	bhi.n	75ca <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x34e>
    75b2:	2901      	cmp	r1, #1
    75b4:	d002      	beq.n	75bc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x340>
    75b6:	2904      	cmp	r1, #4
    75b8:	d003      	beq.n	75c2 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x346>
    75ba:	e008      	b.n	75ce <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x352>
    75bc:	f240 7153 	movw	r1, #1875	; 0x753
    75c0:	e001      	b.n	75c6 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x34a>
    75c2:	f640 11c4 	movw	r1, #2500	; 0x9c4
    75c6:	4288      	cmp	r0, r1
    75c8:	d201      	bcs.n	75ce <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x352>
    75ca:	2000      	movs	r0, #0
    75cc:	4770      	bx	lr
    75ce:	2001      	movs	r0, #1
    75d0:	4770      	bx	lr
    75d2:	0000      	.short	0x0000
    75d4:	0270fd8f 	.word	0x0270fd8f
    75d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    75dc:	b088      	sub	sp, #32
    75de:	4604      	mov	r4, r0
    75e0:	8800      	ldrh	r0, [r0, #0]
    75e2:	a906      	add	r1, sp, #24
    75e4:	f006 fa61 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    75e8:	2800      	cmp	r0, #0
    75ea:	d147      	bne.n	767c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    75ec:	9807      	ldr	r0, [sp, #28]
    75ee:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    75f2:	f88d 1008 	strb.w	r1, [sp, #8]
    75f6:	9902      	ldr	r1, [sp, #8]
    75f8:	9102      	str	r1, [sp, #8]
    75fa:	f89d 1008 	ldrb.w	r1, [sp, #8]
    75fe:	3088      	adds	r0, #136	; 0x88
    7600:	b101      	cbz	r1, 7604 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x388>
    7602:	2101      	movs	r1, #1
    7604:	f88d 100c 	strb.w	r1, [sp, #12]
    7608:	7f81      	ldrb	r1, [r0, #30]
    760a:	f04f 0801 	mov.w	r8, #1
    760e:	291e      	cmp	r1, #30
    7610:	d102      	bne.n	7618 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x39c>
    7612:	f89d 100c 	ldrb.w	r1, [sp, #12]
    7616:	b149      	cbz	r1, 762c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3b0>
    7618:	f05f 0100 	movs.w	r1, #0
    761c:	f88d 1004 	strb.w	r1, [sp, #4]
    7620:	2105      	movs	r1, #5
    7622:	306e      	adds	r0, #110	; 0x6e
    7624:	f007 ff37 	bl	f496 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
    7628:	b110      	cbz	r0, 7630 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3b4>
    762a:	e004      	b.n	7636 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3ba>
    762c:	2101      	movs	r1, #1
    762e:	e7f5      	b.n	761c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3a0>
    7630:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7634:	b308      	cbz	r0, 767a <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3fe>
    7636:	8921      	ldrh	r1, [r4, #8]
    7638:	88e0      	ldrh	r0, [r4, #6]
    763a:	f008 fb4d 	bl	fcd8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    763e:	2800      	cmp	r0, #0
    7640:	d11c      	bne.n	767c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    7642:	88a1      	ldrh	r1, [r4, #4]
    7644:	8860      	ldrh	r0, [r4, #2]
    7646:	f008 fb47 	bl	fcd8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    764a:	2800      	cmp	r0, #0
    764c:	d116      	bne.n	767c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    764e:	8921      	ldrh	r1, [r4, #8]
    7650:	88e0      	ldrh	r0, [r4, #6]
    7652:	f008 fb37 	bl	fcc4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x88>
    7656:	2800      	cmp	r0, #0
    7658:	d110      	bne.n	767c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    765a:	88a1      	ldrh	r1, [r4, #4]
    765c:	8860      	ldrh	r0, [r4, #2]
    765e:	f008 fb31 	bl	fcc4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x88>
    7662:	0006      	movs	r6, r0
    7664:	d10a      	bne.n	767c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    7666:	9807      	ldr	r0, [sp, #28]
    7668:	f500 759d 	add.w	r5, r0, #314	; 0x13a
    766c:	27ff      	movs	r7, #255	; 0xff
    766e:	706f      	strb	r7, [r5, #1]
    7670:	f89d 100c 	ldrb.w	r1, [sp, #12]
    7674:	b129      	cbz	r1, 7682 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x406>
    7676:	263a      	movs	r6, #58	; 0x3a
    7678:	e02e      	b.n	76d8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x45c>
    767a:	201a      	movs	r0, #26
    767c:	b008      	add	sp, #32
    767e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7682:	4641      	mov	r1, r8
    7684:	aa03      	add	r2, sp, #12
    7686:	f008 fc78 	bl	ff7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33e>
    768a:	8861      	ldrh	r1, [r4, #2]
    768c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    7690:	4281      	cmp	r1, r0
    7692:	d200      	bcs.n	7696 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x41a>
    7694:	4608      	mov	r0, r1
    7696:	80e8      	strh	r0, [r5, #6]
    7698:	88a1      	ldrh	r1, [r4, #4]
    769a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    769e:	4281      	cmp	r1, r0
    76a0:	d200      	bcs.n	76a4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x428>
    76a2:	4608      	mov	r0, r1
    76a4:	8128      	strh	r0, [r5, #8]
    76a6:	88e2      	ldrh	r2, [r4, #6]
    76a8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    76ac:	428a      	cmp	r2, r1
    76ae:	d200      	bcs.n	76b2 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x436>
    76b0:	4611      	mov	r1, r2
    76b2:	8069      	strh	r1, [r5, #2]
    76b4:	8922      	ldrh	r2, [r4, #8]
    76b6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    76ba:	428a      	cmp	r2, r1
    76bc:	d200      	bcs.n	76c0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x444>
    76be:	4611      	mov	r1, r2
    76c0:	f640 0248 	movw	r2, #2120	; 0x848
    76c4:	80a9      	strh	r1, [r5, #4]
    76c6:	4291      	cmp	r1, r2
    76c8:	d300      	bcc.n	76cc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x450>
    76ca:	4611      	mov	r1, r2
    76cc:	80a9      	strh	r1, [r5, #4]
    76ce:	4290      	cmp	r0, r2
    76d0:	d200      	bcs.n	76d4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x458>
    76d2:	4602      	mov	r2, r0
    76d4:	812a      	strh	r2, [r5, #8]
    76d6:	702f      	strb	r7, [r5, #0]
    76d8:	2000      	movs	r0, #0
    76da:	7068      	strb	r0, [r5, #1]
    76dc:	4630      	mov	r0, r6
    76de:	e7cd      	b.n	767c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    76e0:	b510      	push	{r4, lr}
    76e2:	4604      	mov	r4, r0
    76e4:	88c1      	ldrh	r1, [r0, #6]
    76e6:	8880      	ldrh	r0, [r0, #4]
    76e8:	f008 faf6 	bl	fcd8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    76ec:	2800      	cmp	r0, #0
    76ee:	d10f      	bne.n	7710 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x494>
    76f0:	8861      	ldrh	r1, [r4, #2]
    76f2:	8820      	ldrh	r0, [r4, #0]
    76f4:	f008 faf0 	bl	fcd8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    76f8:	2800      	cmp	r0, #0
    76fa:	d109      	bne.n	7710 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x494>
    76fc:	4805      	ldr	r0, [pc, #20]	; (7714 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x498>)
    76fe:	88a1      	ldrh	r1, [r4, #4]
    7700:	8081      	strh	r1, [r0, #4]
    7702:	8821      	ldrh	r1, [r4, #0]
    7704:	8001      	strh	r1, [r0, #0]
    7706:	88e1      	ldrh	r1, [r4, #6]
    7708:	80c1      	strh	r1, [r0, #6]
    770a:	8861      	ldrh	r1, [r4, #2]
    770c:	8041      	strh	r1, [r0, #2]
    770e:	2000      	movs	r0, #0
    7710:	bd10      	pop	{r4, pc}
    7712:	0000      	.short	0x0000
    7714:	2000026a 	.word	0x2000026a
    7718:	0c124b0c 	.word	0x0c124b0c
    771c:	124b0059 	.word	0x124b0059
	...

00007728 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    7728:	b570      	push	{r4, r5, r6, lr}
    772a:	460d      	mov	r5, r1
    772c:	f7fb f9da 	bl	2ae4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    7730:	4c05      	ldr	r4, [pc, #20]	; (7748 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x20>)
    7732:	6065      	str	r5, [r4, #4]
    7734:	68a0      	ldr	r0, [r4, #8]
    7736:	f008 fcd1 	bl	100dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a0>
    773a:	f008 f9f7 	bl	fb2c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    773e:	f7fb fb37 	bl	2db0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    7742:	2001      	movs	r0, #1
    7744:	7020      	strb	r0, [r4, #0]
    7746:	bd70      	pop	{r4, r5, r6, pc}
    7748:	20000274 	.word	0x20000274

0000774c <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>:
    774c:	4801      	ldr	r0, [pc, #4]	; (7754 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ+0x8>)
    774e:	7800      	ldrb	r0, [r0, #0]
    7750:	4770      	bx	lr
    7752:	0000      	.short	0x0000
    7754:	20000274 	.word	0x20000274

00007758 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    7758:	b510      	push	{r4, lr}
    775a:	4c06      	ldr	r4, [pc, #24]	; (7774 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x1c>)
    775c:	68e0      	ldr	r0, [r4, #12]
    775e:	f008 fcbd 	bl	100dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a0>
    7762:	6920      	ldr	r0, [r4, #16]
    7764:	f008 fcba 	bl	100dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a0>
    7768:	f008 fa68 	bl	fc3c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    776c:	2000      	movs	r0, #0
    776e:	7020      	strb	r0, [r4, #0]
    7770:	bd10      	pop	{r4, pc}
    7772:	0000      	.short	0x0000
    7774:	20000274 	.word	0x20000274

00007778 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>:
    7778:	b510      	push	{r4, lr}
    777a:	4908      	ldr	r1, [pc, #32]	; (779c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x24>)
    777c:	4808      	ldr	r0, [pc, #32]	; (77a0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    777e:	f008 fca0 	bl	100c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x486>
    7782:	4807      	ldr	r0, [pc, #28]	; (77a0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    7784:	4907      	ldr	r1, [pc, #28]	; (77a4 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x2c>)
    7786:	1d00      	adds	r0, r0, #4
    7788:	f008 fc9b 	bl	100c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x486>
    778c:	4804      	ldr	r0, [pc, #16]	; (77a0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    778e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7792:	4905      	ldr	r1, [pc, #20]	; (77a8 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x30>)
    7794:	3008      	adds	r0, #8
    7796:	f008 bc94 	b.w	100c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x486>
    779a:	0000      	.short	0x0000
    779c:	20000290 	.word	0x20000290
    77a0:	2000027c 	.word	0x2000027c
    77a4:	20000298 	.word	0x20000298
    77a8:	20000288 	.word	0x20000288
    77ac:	b510      	push	{r4, lr}
    77ae:	f7fb fe33 	bl	3418 <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI>
    77b2:	f000 f813 	bl	77dc <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x64>
    77b6:	f006 f868 	bl	d88a <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    77ba:	4907      	ldr	r1, [pc, #28]	; (77d8 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x60>)
    77bc:	f5a1 7081 	sub.w	r0, r1, #258	; 0x102
    77c0:	f7f9 ff72 	bl	16a8 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    77c4:	2000      	movs	r0, #0
    77c6:	f005 ffbe 	bl	d746 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    77ca:	f7fd fe77 	bl	54bc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>
    77ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    77d2:	f7fb b98d 	b.w	2af0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY>
    77d6:	0000      	.short	0x0000
    77d8:	20001772 	.word	0x20001772
    77dc:	b510      	push	{r4, lr}
    77de:	f7ff fb69 	bl	6eb4 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>
    77e2:	f7fd f88f 	bl	4904 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q>
    77e6:	f7fd fcfb 	bl	51e0 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>
    77ea:	f7ff fd07 	bl	71fc <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>
    77ee:	4601      	mov	r1, r0
    77f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    77f4:	4801      	ldr	r0, [pc, #4]	; (77fc <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x84>)
    77f6:	f7fb bd6b 	b.w	32d0 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>
    77fa:	0000      	.short	0x0000
    77fc:	20001670 	.word	0x20001670

00007800 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    7800:	4a04      	ldr	r2, [pc, #16]	; (7814 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    7802:	08c1      	lsrs	r1, r0, #3
    7804:	f000 0307 	and.w	r3, r0, #7
    7808:	2001      	movs	r0, #1
    780a:	4098      	lsls	r0, r3
    780c:	5c53      	ldrb	r3, [r2, r1]
    780e:	4303      	orrs	r3, r0
    7810:	5453      	strb	r3, [r2, r1]
    7812:	4770      	bx	lr
    7814:	20000020 	.word	0x20000020

00007818 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    7818:	4901      	ldr	r1, [pc, #4]	; (7820 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    781a:	e9d1 0100 	ldrd	r0, r1, [r1]
    781e:	4770      	bx	lr
    7820:	20000020 	.word	0x20000020

00007824 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    7824:	4806      	ldr	r0, [pc, #24]	; (7840 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    7826:	8801      	ldrh	r1, [r0, #0]
    7828:	7900      	ldrb	r0, [r0, #4]
    782a:	0602      	lsls	r2, r0, #24
    782c:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    7830:	f000 0001 	and.w	r0, r0, #1
    7834:	1800      	adds	r0, r0, r0
    7836:	b2c0      	uxtb	r0, r0
    7838:	f040 0001 	orr.w	r0, r0, #1
    783c:	4770      	bx	lr
    783e:	0000      	.short	0x0000
    7840:	20000020 	.word	0x20000020

00007844 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    7844:	b510      	push	{r4, lr}
    7846:	f004 fc99 	bl	c17c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    784a:	2200      	movs	r2, #0
    784c:	4b08      	ldr	r3, [pc, #32]	; (7870 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    784e:	4611      	mov	r1, r2
    7850:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    7854:	4284      	cmp	r4, r0
    7856:	d303      	bcc.n	7860 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    7858:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    785c:	7882      	ldrb	r2, [r0, #2]
    785e:	e003      	b.n	7868 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    7860:	1c49      	adds	r1, r1, #1
    7862:	b2c9      	uxtb	r1, r1
    7864:	290c      	cmp	r1, #12
    7866:	d3f3      	bcc.n	7850 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    7868:	4802      	ldr	r0, [pc, #8]	; (7874 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    786a:	7002      	strb	r2, [r0, #0]
    786c:	bd10      	pop	{r4, pc}
    786e:	0000      	.short	0x0000
    7870:	00010158 	.word	0x00010158
    7874:	20000359 	.word	0x20000359

00007878 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
    7878:	4802      	ldr	r0, [pc, #8]	; (7884 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0xc>)
    787a:	7800      	ldrb	r0, [r0, #0]
    787c:	f000 0007 	and.w	r0, r0, #7
    7880:	4770      	bx	lr
    7882:	0000      	.short	0x0000
    7884:	20000359 	.word	0x20000359

00007888 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    7888:	b570      	push	{r4, r5, r6, lr}
    788a:	4605      	mov	r5, r0
    788c:	4616      	mov	r6, r2
    788e:	460c      	mov	r4, r1
    7890:	2002      	movs	r0, #2
    7892:	f000 f9b7 	bl	7c04 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7896:	4906      	ldr	r1, [pc, #24]	; (78b0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    7898:	2001      	movs	r0, #1
    789a:	1ef6      	subs	r6, r6, #3
    789c:	7008      	strb	r0, [r1, #0]
    789e:	4805      	ldr	r0, [pc, #20]	; (78b4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    78a0:	6006      	str	r6, [r0, #0]
    78a2:	4804      	ldr	r0, [pc, #16]	; (78b4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    78a4:	3808      	subs	r0, #8
    78a6:	6005      	str	r5, [r0, #0]
    78a8:	1f00      	subs	r0, r0, #4
    78aa:	6004      	str	r4, [r0, #0]
    78ac:	bd70      	pop	{r4, r5, r6, pc}
    78ae:	0000      	.short	0x0000
    78b0:	2000035a 	.word	0x2000035a
    78b4:	4000f510 	.word	0x4000f510

000078b8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    78b8:	b510      	push	{r4, lr}
    78ba:	4c0c      	ldr	r4, [pc, #48]	; (78ec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    78bc:	7820      	ldrb	r0, [r4, #0]
    78be:	b180      	cbz	r0, 78e2 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    78c0:	490b      	ldr	r1, [pc, #44]	; (78f0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    78c2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    78c6:	6008      	str	r0, [r1, #0]
    78c8:	f000 f86a 	bl	79a0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    78cc:	2100      	movs	r1, #0
    78ce:	b120      	cbz	r0, 78da <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    78d0:	2001      	movs	r0, #1
    78d2:	7060      	strb	r0, [r4, #1]
    78d4:	4807      	ldr	r0, [pc, #28]	; (78f4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    78d6:	6800      	ldr	r0, [r0, #0]
    78d8:	e001      	b.n	78de <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    78da:	7061      	strb	r1, [r4, #1]
    78dc:	2010      	movs	r0, #16
    78de:	70a0      	strb	r0, [r4, #2]
    78e0:	7021      	strb	r1, [r4, #0]
    78e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    78e6:	2000      	movs	r0, #0
    78e8:	f000 b98c 	b.w	7c04 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    78ec:	2000035a 	.word	0x2000035a
    78f0:	4001f508 	.word	0x4001f508
    78f4:	4000f400 	.word	0x4000f400

000078f8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    78f8:	b510      	push	{r4, lr}
    78fa:	2002      	movs	r0, #2
    78fc:	f000 f982 	bl	7c04 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7900:	4904      	ldr	r1, [pc, #16]	; (7914 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    7902:	2001      	movs	r0, #1
    7904:	7008      	strb	r0, [r1, #0]
    7906:	f000 f859 	bl	79bc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    790a:	4903      	ldr	r1, [pc, #12]	; (7918 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    790c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7910:	6008      	str	r0, [r1, #0]
    7912:	bd10      	pop	{r4, pc}
    7914:	2000035a 	.word	0x2000035a
    7918:	4001f504 	.word	0x4001f504

0000791c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    791c:	4803      	ldr	r0, [pc, #12]	; (792c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    791e:	2100      	movs	r1, #0
    7920:	7001      	strb	r1, [r0, #0]
    7922:	7041      	strb	r1, [r0, #1]
    7924:	2110      	movs	r1, #16
    7926:	7081      	strb	r1, [r0, #2]
    7928:	4770      	bx	lr
    792a:	0000      	.short	0x0000
    792c:	2000035a 	.word	0x2000035a

00007930 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    7930:	4807      	ldr	r0, [pc, #28]	; (7950 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    7932:	b510      	push	{r4, lr}
    7934:	7801      	ldrb	r1, [r0, #0]
    7936:	b141      	cbz	r1, 794a <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    7938:	f000 f832 	bl	79a0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    793c:	b118      	cbz	r0, 7946 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    793e:	4805      	ldr	r0, [pc, #20]	; (7954 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    7940:	6800      	ldr	r0, [r0, #0]
    7942:	b2c0      	uxtb	r0, r0
    7944:	bd10      	pop	{r4, pc}
    7946:	2010      	movs	r0, #16
    7948:	bd10      	pop	{r4, pc}
    794a:	7880      	ldrb	r0, [r0, #2]
    794c:	bd10      	pop	{r4, pc}
    794e:	0000      	.short	0x0000
    7950:	2000035a 	.word	0x2000035a
    7954:	4000f400 	.word	0x4000f400

00007958 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    7958:	4808      	ldr	r0, [pc, #32]	; (797c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    795a:	b510      	push	{r4, lr}
    795c:	7801      	ldrb	r1, [r0, #0]
    795e:	b159      	cbz	r1, 7978 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    7960:	4807      	ldr	r0, [pc, #28]	; (7980 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    7962:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7966:	b128      	cbz	r0, 7974 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    7968:	f000 f80c 	bl	7984 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    796c:	2800      	cmp	r0, #0
    796e:	d000      	beq.n	7972 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    7970:	2001      	movs	r0, #1
    7972:	bd10      	pop	{r4, pc}
    7974:	2002      	movs	r0, #2
    7976:	bd10      	pop	{r4, pc}
    7978:	7840      	ldrb	r0, [r0, #1]
    797a:	bd10      	pop	{r4, pc}
    797c:	2000035a 	.word	0x2000035a
    7980:	4000f000 	.word	0x4000f000
    7984:	4805      	ldr	r0, [pc, #20]	; (799c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    7986:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    798a:	b111      	cbz	r1, 7992 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    798c:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    7990:	b108      	cbz	r0, 7996 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    7992:	2000      	movs	r0, #0
    7994:	4770      	bx	lr
    7996:	2001      	movs	r0, #1
    7998:	4770      	bx	lr
    799a:	0000      	.short	0x0000
    799c:	4000f000 	.word	0x4000f000
    79a0:	4805      	ldr	r0, [pc, #20]	; (79b8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    79a2:	b510      	push	{r4, lr}
    79a4:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    79a8:	b120      	cbz	r0, 79b4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    79aa:	f7ff ffeb 	bl	7984 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    79ae:	b108      	cbz	r0, 79b4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    79b0:	2001      	movs	r0, #1
    79b2:	bd10      	pop	{r4, pc}
    79b4:	2000      	movs	r0, #0
    79b6:	bd10      	pop	{r4, pc}
    79b8:	4000f000 	.word	0x4000f000
    79bc:	4804      	ldr	r0, [pc, #16]	; (79d0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    79be:	2100      	movs	r1, #0
    79c0:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    79c4:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    79c8:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    79cc:	4770      	bx	lr
    79ce:	0000      	.short	0x0000
    79d0:	4000f000 	.word	0x4000f000

000079d4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    79d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    79d8:	4604      	mov	r4, r0
    79da:	461e      	mov	r6, r3
    79dc:	4690      	mov	r8, r2
    79de:	460f      	mov	r7, r1
    79e0:	2001      	movs	r0, #1
    79e2:	f000 f90f 	bl	7c04 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    79e6:	4d1e      	ldr	r5, [pc, #120]	; (7a60 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    79e8:	481e      	ldr	r0, [pc, #120]	; (7a64 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    79ea:	f004 0103 	and.w	r1, r4, #3
    79ee:	712e      	strb	r6, [r5, #4]
    79f0:	6800      	ldr	r0, [r0, #0]
    79f2:	0432      	lsls	r2, r6, #16
    79f4:	f361 0007 	bfi	r0, r1, #0, #8
    79f8:	f366 200f 	bfi	r0, r6, #8, #8
    79fc:	0c00      	lsrs	r0, r0, #16
    79fe:	4e1a      	ldr	r6, [pc, #104]	; (7a68 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    7a00:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    7a04:	4308      	orrs	r0, r1
    7a06:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    7a0a:	4818      	ldr	r0, [pc, #96]	; (7a6c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    7a0c:	6007      	str	r7, [r0, #0]
    7a0e:	f008 fd91 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7a12:	b938      	cbnz	r0, 7a24 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    7a14:	4815      	ldr	r0, [pc, #84]	; (7a6c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    7a16:	3010      	adds	r0, #16
    7a18:	6801      	ldr	r1, [r0, #0]
    7a1a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    7a1e:	ea41 0108 	orr.w	r1, r1, r8
    7a22:	6001      	str	r1, [r0, #0]
    7a24:	f000 f8e4 	bl	7bf0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    7a28:	b10c      	cbz	r4, 7a2e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    7a2a:	2c04      	cmp	r4, #4
    7a2c:	d107      	bne.n	7a3e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    7a2e:	4811      	ldr	r0, [pc, #68]	; (7a74 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    7a30:	490d      	ldr	r1, [pc, #52]	; (7a68 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    7a32:	4a0f      	ldr	r2, [pc, #60]	; (7a70 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    7a34:	1d09      	adds	r1, r1, #4
    7a36:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    7a3a:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    7a3e:	2001      	movs	r0, #1
    7a40:	7068      	strb	r0, [r5, #1]
    7a42:	70ec      	strb	r4, [r5, #3]
    7a44:	b11c      	cbz	r4, 7a4e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7a46:	2c01      	cmp	r4, #1
    7a48:	d001      	beq.n	7a4e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7a4a:	2c02      	cmp	r4, #2
    7a4c:	d106      	bne.n	7a5c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    7a4e:	7028      	strb	r0, [r5, #0]
    7a50:	2100      	movs	r1, #0
    7a52:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    7a56:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    7a5a:	6030      	str	r0, [r6, #0]
    7a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7a60:	2000035d 	.word	0x2000035d
    7a64:	00007c00 	.word	0x00007c00
    7a68:	4000f000 	.word	0x4000f000
    7a6c:	4000f508 	.word	0x4000f508
    7a70:	4000f100 	.word	0x4000f100
    7a74:	4001f088 	.word	0x4001f088

00007a78 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    7a78:	b570      	push	{r4, r5, r6, lr}
    7a7a:	4a1c      	ldr	r2, [pc, #112]	; (7aec <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    7a7c:	7853      	ldrb	r3, [r2, #1]
    7a7e:	b1a3      	cbz	r3, 7aaa <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    7a80:	4b1b      	ldr	r3, [pc, #108]	; (7af0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    7a82:	6019      	str	r1, [r3, #0]
    7a84:	1d19      	adds	r1, r3, #4
    7a86:	6008      	str	r0, [r1, #0]
    7a88:	2501      	movs	r5, #1
    7a8a:	7095      	strb	r5, [r2, #2]
    7a8c:	4610      	mov	r0, r2
    7a8e:	78d6      	ldrb	r6, [r2, #3]
    7a90:	4b18      	ldr	r3, [pc, #96]	; (7af4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7a92:	7800      	ldrb	r0, [r0, #0]
    7a94:	4c18      	ldr	r4, [pc, #96]	; (7af8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    7a96:	2100      	movs	r1, #0
    7a98:	b156      	cbz	r6, 7ab0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    7a9a:	2e04      	cmp	r6, #4
    7a9c:	d01b      	beq.n	7ad6 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    7a9e:	b308      	cbz	r0, 7ae4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    7aa0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7aa4:	0668      	lsls	r0, r5, #25
    7aa6:	6018      	str	r0, [r3, #0]
    7aa8:	bd70      	pop	{r4, r5, r6, pc}
    7aaa:	f240 11bd 	movw	r1, #445	; 0x1bd
    7aae:	e01a      	b.n	7ae6 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    7ab0:	b178      	cbz	r0, 7ad2 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    7ab2:	4620      	mov	r0, r4
    7ab4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7ab8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    7abc:	601e      	str	r6, [r3, #0]
    7abe:	1271      	asrs	r1, r6, #9
    7ac0:	f008 fbc2 	bl	10248 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7ac4:	2800      	cmp	r0, #0
    7ac6:	d0ef      	beq.n	7aa8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    7ac8:	6065      	str	r5, [r4, #4]
    7aca:	480a      	ldr	r0, [pc, #40]	; (7af4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7acc:	1d00      	adds	r0, r0, #4
    7ace:	6006      	str	r6, [r0, #0]
    7ad0:	bd70      	pop	{r4, r5, r6, pc}
    7ad2:	21b3      	movs	r1, #179	; 0xb3
    7ad4:	e007      	b.n	7ae6 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    7ad6:	7015      	strb	r5, [r2, #0]
    7ad8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7adc:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    7ae0:	6025      	str	r5, [r4, #0]
    7ae2:	bd70      	pop	{r4, r5, r6, pc}
    7ae4:	21c6      	movs	r1, #198	; 0xc6
    7ae6:	203c      	movs	r0, #60	; 0x3c
    7ae8:	f7f8 ffbc 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7aec:	2000035d 	.word	0x2000035d
    7af0:	4000f50c 	.word	0x4000f50c
    7af4:	4001f504 	.word	0x4001f504
    7af8:	4000f000 	.word	0x4000f000

00007afc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    7afc:	b570      	push	{r4, r5, r6, lr}
    7afe:	4d05      	ldr	r5, [pc, #20]	; (7b14 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    7b00:	2400      	movs	r4, #0
    7b02:	7828      	ldrb	r0, [r5, #0]
    7b04:	b110      	cbz	r0, 7b0c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    7b06:	f000 f873 	bl	7bf0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    7b0a:	702c      	strb	r4, [r5, #0]
    7b0c:	706c      	strb	r4, [r5, #1]
    7b0e:	70ac      	strb	r4, [r5, #2]
    7b10:	bd70      	pop	{r4, r5, r6, pc}
    7b12:	0000      	.short	0x0000
    7b14:	2000035d 	.word	0x2000035d

00007b18 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    7b18:	4802      	ldr	r0, [pc, #8]	; (7b24 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    7b1a:	2100      	movs	r1, #0
    7b1c:	7001      	strb	r1, [r0, #0]
    7b1e:	7041      	strb	r1, [r0, #1]
    7b20:	7081      	strb	r1, [r0, #2]
    7b22:	4770      	bx	lr
    7b24:	2000035d 	.word	0x2000035d

00007b28 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    7b28:	480b      	ldr	r0, [pc, #44]	; (7b58 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    7b2a:	b510      	push	{r4, lr}
    7b2c:	7800      	ldrb	r0, [r0, #0]
    7b2e:	b158      	cbz	r0, 7b48 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    7b30:	f44f 7182 	mov.w	r1, #260	; 0x104
    7b34:	4809      	ldr	r0, [pc, #36]	; (7b5c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    7b36:	f008 fb87 	bl	10248 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7b3a:	b140      	cbz	r0, 7b4e <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    7b3c:	4808      	ldr	r0, [pc, #32]	; (7b60 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    7b3e:	6800      	ldr	r0, [r0, #0]
    7b40:	2800      	cmp	r0, #0
    7b42:	d000      	beq.n	7b46 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    7b44:	2001      	movs	r0, #1
    7b46:	bd10      	pop	{r4, pc}
    7b48:	f240 2123 	movw	r1, #547	; 0x223
    7b4c:	e001      	b.n	7b52 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    7b4e:	f44f 7109 	mov.w	r1, #548	; 0x224
    7b52:	203c      	movs	r0, #60	; 0x3c
    7b54:	f7f8 ff86 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b58:	2000035d 	.word	0x2000035d
    7b5c:	4000f000 	.word	0x4000f000
    7b60:	4000f400 	.word	0x4000f400

00007b64 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    7b64:	4801      	ldr	r0, [pc, #4]	; (7b6c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    7b66:	2101      	movs	r1, #1
    7b68:	6081      	str	r1, [r0, #8]
    7b6a:	4770      	bx	lr
    7b6c:	4000f000 	.word	0x4000f000

00007b70 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    7b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7b74:	481b      	ldr	r0, [pc, #108]	; (7be4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    7b76:	7800      	ldrb	r0, [r0, #0]
    7b78:	b1d8      	cbz	r0, 7bb2 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    7b7a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 7be8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    7b7e:	f44f 7682 	mov.w	r6, #260	; 0x104
    7b82:	4631      	mov	r1, r6
    7b84:	4640      	mov	r0, r8
    7b86:	f008 fb5f 	bl	10248 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7b8a:	2800      	cmp	r0, #0
    7b8c:	d128      	bne.n	7be0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    7b8e:	2002      	movs	r0, #2
    7b90:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    7b94:	4c15      	ldr	r4, [pc, #84]	; (7bec <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    7b96:	6820      	ldr	r0, [r4, #0]
    7b98:	43c0      	mvns	r0, r0
    7b9a:	f340 1500 	sbfx	r5, r0, #4, #1
    7b9e:	6820      	ldr	r0, [r4, #0]
    7ba0:	f040 0010 	orr.w	r0, r0, #16
    7ba4:	6020      	str	r0, [r4, #0]
    7ba6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    7baa:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    7bae:	1c6d      	adds	r5, r5, #1
    7bb0:	e008      	b.n	7bc4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    7bb2:	f240 212f 	movw	r1, #559	; 0x22f
    7bb6:	203c      	movs	r0, #60	; 0x3c
    7bb8:	f7f8 ff54 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7bbc:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    7bc0:	f008 fcf8 	bl	105b4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    7bc4:	4631      	mov	r1, r6
    7bc6:	4640      	mov	r0, r8
    7bc8:	f008 fb3e 	bl	10248 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7bcc:	2800      	cmp	r0, #0
    7bce:	d0f5      	beq.n	7bbc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    7bd0:	b91d      	cbnz	r5, 7bda <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    7bd2:	6820      	ldr	r0, [r4, #0]
    7bd4:	f020 0010 	bic.w	r0, r0, #16
    7bd8:	6020      	str	r0, [r4, #0]
    7bda:	2002      	movs	r0, #2
    7bdc:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    7be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7be4:	2000035d 	.word	0x2000035d
    7be8:	4000f000 	.word	0x4000f000
    7bec:	e000ed10 	.word	0xe000ed10
    7bf0:	4902      	ldr	r1, [pc, #8]	; (7bfc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    7bf2:	4801      	ldr	r0, [pc, #4]	; (7bf8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    7bf4:	6008      	str	r0, [r1, #0]
    7bf6:	4770      	bx	lr
    7bf8:	02020000 	.word	0x02020000
    7bfc:	4001f508 	.word	0x4001f508
    7c00:	00010000 	.word	0x00010000

00007c04 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    7c04:	b510      	push	{r4, lr}
    7c06:	4604      	mov	r4, r0
    7c08:	f000 f820 	bl	7c4c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    7c0c:	2c00      	cmp	r4, #0
    7c0e:	d00e      	beq.n	7c2e <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    7c10:	4a0b      	ldr	r2, [pc, #44]	; (7c40 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7c12:	480b      	ldr	r0, [pc, #44]	; (7c40 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7c14:	490b      	ldr	r1, [pc, #44]	; (7c44 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    7c16:	3214      	adds	r2, #20
    7c18:	2c01      	cmp	r4, #1
    7c1a:	d005      	beq.n	7c28 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    7c1c:	2c02      	cmp	r4, #2
    7c1e:	d007      	beq.n	7c30 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    7c20:	2182      	movs	r1, #130	; 0x82
    7c22:	203d      	movs	r0, #61	; 0x3d
    7c24:	f7f8 ff1e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c28:	2302      	movs	r3, #2
    7c2a:	6003      	str	r3, [r0, #0]
    7c2c:	6011      	str	r1, [r2, #0]
    7c2e:	bd10      	pop	{r4, pc}
    7c30:	2303      	movs	r3, #3
    7c32:	6003      	str	r3, [r0, #0]
    7c34:	6011      	str	r1, [r2, #0]
    7c36:	4904      	ldr	r1, [pc, #16]	; (7c48 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    7c38:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7c3c:	6008      	str	r0, [r1, #0]
    7c3e:	bd10      	pop	{r4, pc}
    7c40:	4000f500 	.word	0x4000f500
    7c44:	20001874 	.word	0x20001874
    7c48:	4001f504 	.word	0x4001f504
    7c4c:	4805      	ldr	r0, [pc, #20]	; (7c64 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    7c4e:	b510      	push	{r4, lr}
    7c50:	2100      	movs	r1, #0
    7c52:	6001      	str	r1, [r0, #0]
    7c54:	6001      	str	r1, [r0, #0]
    7c56:	f7ff ff51 	bl	7afc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    7c5a:	4903      	ldr	r1, [pc, #12]	; (7c68 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    7c5c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7c60:	6008      	str	r0, [r1, #0]
    7c62:	bd10      	pop	{r4, pc}
    7c64:	4000f500 	.word	0x4000f500
    7c68:	4001f508 	.word	0x4001f508

00007c6c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    7c6c:	4805      	ldr	r0, [pc, #20]	; (7c84 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    7c6e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    7c72:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    7c76:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7c7a:	2100      	movs	r1, #0
    7c7c:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    7c80:	4770      	bx	lr
    7c82:	0000      	.short	0x0000
    7c84:	40001000 	.word	0x40001000

00007c88 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    7c88:	4904      	ldr	r1, [pc, #16]	; (7c9c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    7c8a:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    7c8e:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    7c92:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    7c96:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    7c9a:	4770      	bx	lr
    7c9c:	40001000 	.word	0x40001000

00007ca0 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    7ca0:	4902      	ldr	r1, [pc, #8]	; (7cac <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    7ca2:	5c08      	ldrb	r0, [r1, r0]
    7ca4:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    7ca8:	4770      	bx	lr
    7caa:	0000      	.short	0x0000
    7cac:	00008972 	.word	0x00008972

00007cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    7cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7cb2:	4c24      	ldr	r4, [pc, #144]	; (7d44 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    7cb4:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    7cb8:	f010 0f10 	tst.w	r0, #16
    7cbc:	d001      	beq.n	7cc2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    7cbe:	2701      	movs	r7, #1
    7cc0:	e000      	b.n	7cc4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    7cc2:	2700      	movs	r7, #0
    7cc4:	2010      	movs	r0, #16
    7cc6:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    7cca:	2002      	movs	r0, #2
    7ccc:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    7cd0:	481d      	ldr	r0, [pc, #116]	; (7d48 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    7cd2:	2500      	movs	r5, #0
    7cd4:	491d      	ldr	r1, [pc, #116]	; (7d4c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    7cd6:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    7cda:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    7cde:	6008      	str	r0, [r1, #0]
    7ce0:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    7ce4:	f44f 7688 	mov.w	r6, #272	; 0x110
    7ce8:	f010 0fff 	tst.w	r0, #255	; 0xff
    7cec:	d019      	beq.n	7d22 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    7cee:	20ff      	movs	r0, #255	; 0xff
    7cf0:	f88d 0000 	strb.w	r0, [sp]
    7cf4:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7cf8:	2001      	movs	r0, #1
    7cfa:	6120      	str	r0, [r4, #16]
    7cfc:	e005      	b.n	7d0a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    7cfe:	bf00      	nop
    7d00:	f89d 0000 	ldrb.w	r0, [sp]
    7d04:	1e40      	subs	r0, r0, #1
    7d06:	f88d 0000 	strb.w	r0, [sp]
    7d0a:	f89d 0000 	ldrb.w	r0, [sp]
    7d0e:	b128      	cbz	r0, 7d1c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    7d10:	4631      	mov	r1, r6
    7d12:	4620      	mov	r0, r4
    7d14:	f008 fac7 	bl	102a6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7d18:	2800      	cmp	r0, #0
    7d1a:	d0f1      	beq.n	7d00 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    7d1c:	f89d 0000 	ldrb.w	r0, [sp]
    7d20:	b158      	cbz	r0, 7d3a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    7d22:	f000 fc15 	bl	8550 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    7d26:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7d2a:	f000 fda3 	bl	8874 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    7d2e:	2f00      	cmp	r7, #0
    7d30:	d002      	beq.n	7d38 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    7d32:	2010      	movs	r0, #16
    7d34:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    7d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7d3a:	f640 01aa 	movw	r1, #2218	; 0x8aa
    7d3e:	203e      	movs	r0, #62	; 0x3e
    7d40:	f7f8 fe90 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d44:	40001000 	.word	0x40001000
    7d48:	20000f80 	.word	0x20000f80
    7d4c:	4001f508 	.word	0x4001f508

00007d50 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    7d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d54:	4d18      	ldr	r5, [pc, #96]	; (7db8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    7d56:	4607      	mov	r7, r0
    7d58:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    7d5c:	07c2      	lsls	r2, r0, #31
    7d5e:	d00f      	beq.n	7d80 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    7d60:	4c16      	ldr	r4, [pc, #88]	; (7dbc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    7d62:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    7d66:	f042 0201 	orr.w	r2, r2, #1
    7d6a:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    7d6e:	f040 0002 	orr.w	r0, r0, #2
    7d72:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    7d76:	2601      	movs	r6, #1
    7d78:	b13f      	cbz	r7, 7d8a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    7d7a:	2f01      	cmp	r7, #1
    7d7c:	d00b      	beq.n	7d96 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    7d7e:	e010      	b.n	7da2 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7d80:	f240 7185 	movw	r1, #1925	; 0x785
    7d84:	203e      	movs	r0, #62	; 0x3e
    7d86:	f7f8 fe6d 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d8a:	4608      	mov	r0, r1
    7d8c:	f000 fdcc 	bl	8928 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x468>
    7d90:	726e      	strb	r6, [r5, #9]
    7d92:	6026      	str	r6, [r4, #0]
    7d94:	e005      	b.n	7da2 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7d96:	4608      	mov	r0, r1
    7d98:	f000 fdac 	bl	88f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    7d9c:	2002      	movs	r0, #2
    7d9e:	7268      	strb	r0, [r5, #9]
    7da0:	6066      	str	r6, [r4, #4]
    7da2:	4807      	ldr	r0, [pc, #28]	; (7dc0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7da4:	64c6      	str	r6, [r0, #76]	; 0x4c
    7da6:	4806      	ldr	r0, [pc, #24]	; (7dc0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7da8:	300c      	adds	r0, #12
    7daa:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    7dae:	4638      	mov	r0, r7
    7db0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7db4:	f000 bd30 	b.w	8818 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    7db8:	20000f80 	.word	0x20000f80
    7dbc:	40001000 	.word	0x40001000
    7dc0:	40008000 	.word	0x40008000

00007dc4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    7dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7dc8:	4c2c      	ldr	r4, [pc, #176]	; (7e7c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    7dca:	0006      	movs	r6, r0
    7dcc:	4d2c      	ldr	r5, [pc, #176]	; (7e80 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    7dce:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    7dd2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 7e84 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    7dd6:	f040 0002 	orr.w	r0, r0, #2
    7dda:	4689      	mov	r9, r1
    7ddc:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    7de0:	f04f 0700 	mov.w	r7, #0
    7de4:	d002      	beq.n	7dec <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    7de6:	2e01      	cmp	r6, #1
    7de8:	d020      	beq.n	7e2c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    7dea:	e036      	b.n	7e5a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    7dec:	4608      	mov	r0, r1
    7dee:	f000 fd9b 	bl	8928 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x468>
    7df2:	2001      	movs	r0, #1
    7df4:	7260      	strb	r0, [r4, #9]
    7df6:	79e0      	ldrb	r0, [r4, #7]
    7df8:	2801      	cmp	r0, #1
    7dfa:	d105      	bne.n	7e08 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    7dfc:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    7e00:	f040 0008 	orr.w	r0, r0, #8
    7e04:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7e08:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7e0a:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    7e0e:	62a0      	str	r0, [r4, #40]	; 0x28
    7e10:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    7e14:	f8c8 0000 	str.w	r0, [r8]
    7e18:	491b      	ldr	r1, [pc, #108]	; (7e88 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    7e1a:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    7e1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    7e22:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    7e26:	fbb0 f7f1 	udiv	r7, r0, r1
    7e2a:	e016      	b.n	7e5a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    7e2c:	4608      	mov	r0, r1
    7e2e:	f000 fd61 	bl	88f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    7e32:	2002      	movs	r0, #2
    7e34:	7260      	strb	r0, [r4, #9]
    7e36:	79e0      	ldrb	r0, [r4, #7]
    7e38:	2801      	cmp	r0, #1
    7e3a:	d105      	bne.n	7e48 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    7e3c:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    7e40:	f040 0004 	orr.w	r0, r0, #4
    7e44:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7e48:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7e4a:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    7e4e:	62a0      	str	r0, [r4, #40]	; 0x28
    7e50:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    7e54:	f8c8 0000 	str.w	r0, [r8]
    7e58:	2729      	movs	r7, #41	; 0x29
    7e5a:	f000 fbe5 	bl	8628 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    7e5e:	f008 fa6a 	bl	10336 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    7e62:	b120      	cbz	r0, 7e6e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    7e64:	f7ff ff24 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7e68:	2000      	movs	r0, #0
    7e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7e6e:	2100      	movs	r1, #0
    7e70:	4630      	mov	r0, r6
    7e72:	f000 fcd1 	bl	8818 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    7e76:	4638      	mov	r0, r7
    7e78:	e7f7      	b.n	7e6a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    7e7a:	0000      	.short	0x0000
    7e7c:	20000f80 	.word	0x20000f80
    7e80:	40001000 	.word	0x40001000
    7e84:	4001f504 	.word	0x4001f504
    7e88:	0000896c 	.word	0x0000896c

00007e8c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    7e8c:	b510      	push	{r4, lr}
    7e8e:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    7e90:	4901      	ldr	r1, [pc, #4]	; (7e98 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    7e92:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    7e96:	bd10      	pop	{r4, pc}
    7e98:	20000f70 	.word	0x20000f70

00007e9c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    7e9c:	b570      	push	{r4, r5, r6, lr}
    7e9e:	4c0f      	ldr	r4, [pc, #60]	; (7edc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    7ea0:	4603      	mov	r3, r0
    7ea2:	2002      	movs	r0, #2
    7ea4:	7320      	strb	r0, [r4, #12]
    7ea6:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    7eaa:	2096      	movs	r0, #150	; 0x96
    7eac:	f894 1020 	ldrb.w	r1, [r4, #32]
    7eb0:	7d22      	ldrb	r2, [r4, #20]
    7eb2:	2d01      	cmp	r5, #1
    7eb4:	d00e      	beq.n	7ed4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    7eb6:	f000 fd95 	bl	89e4 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    7eba:	6120      	str	r0, [r4, #16]
    7ebc:	4808      	ldr	r0, [pc, #32]	; (7ee0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    7ebe:	2100      	movs	r1, #0
    7ec0:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    7ec4:	6921      	ldr	r1, [r4, #16]
    7ec6:	69e0      	ldr	r0, [r4, #28]
    7ec8:	4408      	add	r0, r1
    7eca:	4905      	ldr	r1, [pc, #20]	; (7ee0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    7ecc:	1d09      	adds	r1, r1, #4
    7ece:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    7ed2:	bd70      	pop	{r4, r5, r6, pc}
    7ed4:	f000 fda4 	bl	8a20 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    7ed8:	e7ef      	b.n	7eba <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    7eda:	0000      	.short	0x0000
    7edc:	20000f80 	.word	0x20000f80
    7ee0:	40008000 	.word	0x40008000

00007ee4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    7ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ee8:	2238      	movs	r2, #56	; 0x38
    7eea:	2100      	movs	r1, #0
    7eec:	4813      	ldr	r0, [pc, #76]	; (7f3c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    7eee:	f008 fc38 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7ef2:	f000 fcbf 	bl	8874 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    7ef6:	f008 faf2 	bl	104de <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    7efa:	4d11      	ldr	r5, [pc, #68]	; (7f40 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7efc:	4e10      	ldr	r6, [pc, #64]	; (7f40 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7efe:	2400      	movs	r4, #0
    7f00:	4f0f      	ldr	r7, [pc, #60]	; (7f40 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7f02:	3508      	adds	r5, #8
    7f04:	3610      	adds	r6, #16
    7f06:	b928      	cbnz	r0, 7f14 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    7f08:	f008 fb00 	bl	1050c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    7f0c:	b910      	cbnz	r0, 7f14 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    7f0e:	f008 fb07 	bl	10520 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    7f12:	b108      	cbz	r0, 7f18 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    7f14:	2224      	movs	r2, #36	; 0x24
    7f16:	e006      	b.n	7f26 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    7f18:	f008 fb42 	bl	105a0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    7f1c:	b910      	cbnz	r0, 7f24 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    7f1e:	f008 fb35 	bl	1058c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    7f22:	b140      	cbz	r0, 7f36 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    7f24:	2240      	movs	r2, #64	; 0x40
    7f26:	21ff      	movs	r1, #255	; 0xff
    7f28:	4638      	mov	r0, r7
    7f2a:	f008 fc1a 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7f2e:	602c      	str	r4, [r5, #0]
    7f30:	6034      	str	r4, [r6, #0]
    7f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7f36:	2238      	movs	r2, #56	; 0x38
    7f38:	e7f5      	b.n	7f26 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    7f3a:	0000      	.short	0x0000
    7f3c:	20000f80 	.word	0x20000f80
    7f40:	40000e00 	.word	0x40000e00

00007f44 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    7f44:	4801      	ldr	r0, [pc, #4]	; (7f4c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    7f46:	69c0      	ldr	r0, [r0, #28]
    7f48:	4770      	bx	lr
    7f4a:	0000      	.short	0x0000
    7f4c:	20000f80 	.word	0x20000f80

00007f50 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    7f50:	b510      	push	{r4, lr}
    7f52:	f000 fc43 	bl	87dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>
    7f56:	f7ff feab 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7f5a:	f004 fb8d 	bl	c678 <mpsl_fem_disable>
    7f5e:	b130      	cbz	r0, 7f6e <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    7f60:	1c40      	adds	r0, r0, #1
    7f62:	d004      	beq.n	7f6e <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    7f64:	f240 516d 	movw	r1, #1389	; 0x56d
    7f68:	203e      	movs	r0, #62	; 0x3e
    7f6a:	f7f8 fd7b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f6e:	480f      	ldr	r0, [pc, #60]	; (7fac <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    7f70:	4a0f      	ldr	r2, [pc, #60]	; (7fb0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    7f72:	6a81      	ldr	r1, [r0, #40]	; 0x28
    7f74:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    7f78:	6011      	str	r1, [r2, #0]
    7f7a:	2400      	movs	r4, #0
    7f7c:	6284      	str	r4, [r0, #40]	; 0x28
    7f7e:	7304      	strb	r4, [r0, #12]
    7f80:	61c4      	str	r4, [r0, #28]
    7f82:	6184      	str	r4, [r0, #24]
    7f84:	f000 fc2a 	bl	87dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>
    7f88:	480a      	ldr	r0, [pc, #40]	; (7fb4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    7f8a:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    7f8e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    7f92:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    7f96:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    7f9a:	2001      	movs	r0, #1
    7f9c:	f008 f972 	bl	10284 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    7fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7fa4:	2001      	movs	r0, #1
    7fa6:	f008 b960 	b.w	1026a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    7faa:	0000      	.short	0x0000
    7fac:	20000f80 	.word	0x20000f80
    7fb0:	4001f508 	.word	0x4001f508
    7fb4:	40008000 	.word	0x40008000

00007fb8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    7fb8:	b570      	push	{r4, r5, r6, lr}
    7fba:	2001      	movs	r0, #1
    7fbc:	f008 f962 	bl	10284 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    7fc0:	4c37      	ldr	r4, [pc, #220]	; (80a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa0>)
    7fc2:	2000      	movs	r0, #0
    7fc4:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    7fc8:	2001      	movs	r0, #1
    7fca:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    7fce:	f008 fabd 	bl	1054c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    7fd2:	4d34      	ldr	r5, [pc, #208]	; (80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>)
    7fd4:	b118      	cbz	r0, 7fde <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    7fd6:	6828      	ldr	r0, [r5, #0]
    7fd8:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    7fdc:	6028      	str	r0, [r5, #0]
    7fde:	f008 faa9 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7fe2:	b128      	cbz	r0, 7ff0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    7fe4:	6828      	ldr	r0, [r5, #0]
    7fe6:	4930      	ldr	r1, [pc, #192]	; (80a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa8>)
    7fe8:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    7fec:	4308      	orrs	r0, r1
    7fee:	6028      	str	r0, [r5, #0]
    7ff0:	f008 fabc 	bl	1056c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    7ff4:	b138      	cbz	r0, 8006 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6>
    7ff6:	482b      	ldr	r0, [pc, #172]	; (80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>)
    7ff8:	1d00      	adds	r0, r0, #4
    7ffa:	6801      	ldr	r1, [r0, #0]
    7ffc:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    8000:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    8004:	6001      	str	r1, [r0, #0]
    8006:	4927      	ldr	r1, [pc, #156]	; (80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>)
    8008:	4828      	ldr	r0, [pc, #160]	; (80ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xac>)
    800a:	313c      	adds	r1, #60	; 0x3c
    800c:	6008      	str	r0, [r1, #0]
    800e:	f004 fb6d 	bl	c6ec <mpsl_fem_device_config_254_apply_get>
    8012:	b140      	cbz	r0, 8026 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26>
    8014:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    8018:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    801c:	1c41      	adds	r1, r0, #1
    801e:	d002      	beq.n	8026 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26>
    8020:	4920      	ldr	r1, [pc, #128]	; (80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>)
    8022:	3110      	adds	r1, #16
    8024:	6008      	str	r0, [r1, #0]
    8026:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    802a:	6e00      	ldr	r0, [r0, #96]	; 0x60
    802c:	1c41      	adds	r1, r0, #1
    802e:	d004      	beq.n	803a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a>
    8030:	491f      	ldr	r1, [pc, #124]	; (80b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb0>)
    8032:	680a      	ldr	r2, [r1, #0]
    8034:	f360 4217 	bfi	r2, r0, #16, #8
    8038:	600a      	str	r2, [r1, #0]
    803a:	f240 1103 	movw	r1, #259	; 0x103
    803e:	f240 605b 	movw	r0, #1627	; 0x65b
    8042:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    8046:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    804a:	2001      	movs	r0, #1
    804c:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    8050:	f000 f842 	bl	80d8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8054:	f240 2001 	movw	r0, #513	; 0x201
    8058:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    805c:	2002      	movs	r0, #2
    805e:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    8062:	4914      	ldr	r1, [pc, #80]	; (80b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb4>)
    8064:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    8068:	6008      	str	r0, [r1, #0]
    806a:	4913      	ldr	r1, [pc, #76]	; (80b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb8>)
    806c:	2000      	movs	r0, #0
    806e:	4d13      	ldr	r5, [pc, #76]	; (80bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbc>)
    8070:	8608      	strh	r0, [r1, #48]	; 0x30
    8072:	3110      	adds	r1, #16
    8074:	61c8      	str	r0, [r1, #28]
    8076:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    807a:	7028      	strb	r0, [r5, #0]
    807c:	2001      	movs	r0, #1
    807e:	f008 f8f4 	bl	1026a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    8082:	2010      	movs	r0, #16
    8084:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    8088:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    808c:	2002      	movs	r0, #2
    808e:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    8092:	6868      	ldr	r0, [r5, #4]
    8094:	2800      	cmp	r0, #0
    8096:	d002      	beq.n	809e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9e>
    8098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    809c:	4700      	bx	r0
    809e:	bd70      	pop	{r4, r5, r6, pc}
    80a0:	40001000 	.word	0x40001000
    80a4:	4000173c 	.word	0x4000173c
    80a8:	80000096 	.word	0x80000096
    80ac:	8900002c 	.word	0x8900002c
    80b0:	4000158c 	.word	0x4000158c
    80b4:	4001f504 	.word	0x4001f504
    80b8:	20000f70 	.word	0x20000f70
    80bc:	200002a0 	.word	0x200002a0

000080c0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    80c0:	4901      	ldr	r1, [pc, #4]	; (80c8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    80c2:	7548      	strb	r0, [r1, #21]
    80c4:	4770      	bx	lr
    80c6:	0000      	.short	0x0000
    80c8:	20000f80 	.word	0x20000f80

000080cc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    80cc:	4901      	ldr	r1, [pc, #4]	; (80d4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    80ce:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    80d2:	4770      	bx	lr
    80d4:	000089c0 	.word	0x000089c0

000080d8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    80d8:	4908      	ldr	r1, [pc, #32]	; (80fc <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    80da:	b510      	push	{r4, lr}
    80dc:	7508      	strb	r0, [r1, #20]
    80de:	4908      	ldr	r1, [pc, #32]	; (8100 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    80e0:	2801      	cmp	r0, #1
    80e2:	d006      	beq.n	80f2 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    80e4:	2802      	cmp	r0, #2
    80e6:	d006      	beq.n	80f6 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    80e8:	f640 5186 	movw	r1, #3462	; 0xd86
    80ec:	203e      	movs	r0, #62	; 0x3e
    80ee:	f7f8 fcb9 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    80f2:	2003      	movs	r0, #3
    80f4:	e000      	b.n	80f8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    80f6:	2004      	movs	r0, #4
    80f8:	6008      	str	r0, [r1, #0]
    80fa:	bd10      	pop	{r4, pc}
    80fc:	20000f80 	.word	0x20000f80
    8100:	40001510 	.word	0x40001510

00008104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    8104:	4905      	ldr	r1, [pc, #20]	; (811c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    8106:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    810a:	4805      	ldr	r0, [pc, #20]	; (8120 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    810c:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    8110:	f041 0101 	orr.w	r1, r1, #1
    8114:	7001      	strb	r1, [r0, #0]
    8116:	f000 ba4d 	b.w	85b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    811a:	0000      	.short	0x0000
    811c:	40001000 	.word	0x40001000
    8120:	20000f80 	.word	0x20000f80

00008124 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    8124:	4901      	ldr	r1, [pc, #4]	; (812c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    8126:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    812a:	4770      	bx	lr
    812c:	000089cc 	.word	0x000089cc

00008130 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    8130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8134:	4e30      	ldr	r6, [pc, #192]	; (81f8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    8136:	4c31      	ldr	r4, [pc, #196]	; (81fc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>)
    8138:	4688      	mov	r8, r1
    813a:	0007      	movs	r7, r0
    813c:	4615      	mov	r5, r2
    813e:	f04f 0901 	mov.w	r9, #1
    8142:	d006      	beq.n	8152 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22>
    8144:	2f01      	cmp	r7, #1
    8146:	d012      	beq.n	816e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3e>
    8148:	f640 012d 	movw	r1, #2093	; 0x82d
    814c:	203e      	movs	r0, #62	; 0x3e
    814e:	f7f8 fc89 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8152:	4610      	mov	r0, r2
    8154:	f000 fbe8 	bl	8928 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x468>
    8158:	4829      	ldr	r0, [pc, #164]	; (8200 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    815a:	f884 9009 	strb.w	r9, [r4, #9]
    815e:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
    8162:	4640      	mov	r0, r8
    8164:	f000 fb8e 	bl	8884 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>
    8168:	4605      	mov	r5, r0
    816a:	4630      	mov	r0, r6
    816c:	e00c      	b.n	8188 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    816e:	4610      	mov	r0, r2
    8170:	f000 fbc0 	bl	88f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    8174:	2002      	movs	r0, #2
    8176:	7260      	strb	r0, [r4, #9]
    8178:	f649 71ba 	movw	r1, #40890	; 0x9fba
    817c:	4640      	mov	r0, r8
    817e:	f000 fb81 	bl	8884 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>
    8182:	4605      	mov	r5, r0
    8184:	481c      	ldr	r0, [pc, #112]	; (81f8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    8186:	1d00      	adds	r0, r0, #4
    8188:	f000 fb3a 	bl	8800 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x340>
    818c:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8204 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    8190:	f8c8 5540 	str.w	r5, [r8, #1344]	; 0x540
    8194:	f8df a074 	ldr.w	sl, [pc, #116]	; 820c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>
    8198:	481b      	ldr	r0, [pc, #108]	; (8208 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    819a:	f8ca 0510 	str.w	r0, [sl, #1296]	; 0x510
    819e:	2010      	movs	r0, #16
    81a0:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    81a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    81a6:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    81aa:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    81ae:	62a0      	str	r0, [r4, #40]	; 0x28
    81b0:	4817      	ldr	r0, [pc, #92]	; (8210 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    81b2:	6006      	str	r6, [r0, #0]
    81b4:	f000 fa38 	bl	8628 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    81b8:	4641      	mov	r1, r8
    81ba:	f8c8 904c 	str.w	r9, [r8, #76]	; 0x4c
    81be:	4811      	ldr	r0, [pc, #68]	; (8204 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    81c0:	300c      	adds	r0, #12
    81c2:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    81c6:	42a8      	cmp	r0, r5
    81c8:	d310      	bcc.n	81ec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    81ca:	2000      	movs	r0, #0
    81cc:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    81d0:	f8ca 0514 	str.w	r0, [sl, #1300]	; 0x514
    81d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    81d6:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
    81da:	62a0      	str	r0, [r4, #40]	; 0x28
    81dc:	480c      	ldr	r0, [pc, #48]	; (8210 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    81de:	1d00      	adds	r0, r0, #4
    81e0:	6006      	str	r6, [r0, #0]
    81e2:	f7ff fd65 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    81e6:	2000      	movs	r0, #0
    81e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    81ec:	4629      	mov	r1, r5
    81ee:	4638      	mov	r0, r7
    81f0:	f000 fb12 	bl	8818 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    81f4:	2001      	movs	r0, #1
    81f6:	e7f7      	b.n	81e8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>
    81f8:	40001000 	.word	0x40001000
    81fc:	20000f80 	.word	0x20000f80
    8200:	0000896c 	.word	0x0000896c
    8204:	40008000 	.word	0x40008000
    8208:	40008140 	.word	0x40008140
    820c:	4001f098 	.word	0x4001f098
    8210:	4001f504 	.word	0x4001f504

00008214 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    8214:	4b0d      	ldr	r3, [pc, #52]	; (824c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    8216:	b510      	push	{r4, lr}
    8218:	71d8      	strb	r0, [r3, #7]
    821a:	729a      	strb	r2, [r3, #10]
    821c:	b151      	cbz	r1, 8234 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    821e:	2002      	movs	r0, #2
    8220:	7218      	strb	r0, [r3, #8]
    8222:	2801      	cmp	r0, #1
    8224:	d008      	beq.n	8238 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    8226:	2802      	cmp	r0, #2
    8228:	d00f      	beq.n	824a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    822a:	f640 2163 	movw	r1, #2659	; 0xa63
    822e:	203e      	movs	r0, #62	; 0x3e
    8230:	f7f8 fc18 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8234:	2001      	movs	r0, #1
    8236:	e7f3      	b.n	8220 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    8238:	7a58      	ldrb	r0, [r3, #9]
    823a:	2802      	cmp	r0, #2
    823c:	d105      	bne.n	824a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    823e:	f000 f97d 	bl	853c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    8242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8246:	f000 bab1 	b.w	87ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>
    824a:	bd10      	pop	{r4, pc}
    824c:	20000f80 	.word	0x20000f80

00008250 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    8250:	4902      	ldr	r1, [pc, #8]	; (825c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    8252:	2000      	movs	r0, #0
    8254:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8258:	4770      	bx	lr
    825a:	0000      	.short	0x0000
    825c:	40008000 	.word	0x40008000

00008260 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    8260:	4904      	ldr	r1, [pc, #16]	; (8274 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    8262:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    8266:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    826a:	4249      	negs	r1, r1
    826c:	7001      	strb	r1, [r0, #0]
    826e:	2001      	movs	r0, #1
    8270:	4770      	bx	lr
    8272:	0000      	.short	0x0000
    8274:	40001000 	.word	0x40001000

00008278 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    8278:	4903      	ldr	r1, [pc, #12]	; (8288 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    827a:	0e02      	lsrs	r2, r0, #24
    827c:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    8280:	0200      	lsls	r0, r0, #8
    8282:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    8286:	4770      	bx	lr
    8288:	40001000 	.word	0x40001000

0000828c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    828c:	4901      	ldr	r1, [pc, #4]	; (8294 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    828e:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    8292:	4770      	bx	lr
    8294:	40001000 	.word	0x40001000

00008298 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    8298:	b510      	push	{r4, lr}
    829a:	2200      	movs	r2, #0
    829c:	2901      	cmp	r1, #1
    829e:	d006      	beq.n	82ae <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    82a0:	2902      	cmp	r1, #2
    82a2:	d002      	beq.n	82aa <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    82a4:	f240 21d9 	movw	r1, #729	; 0x2d9
    82a8:	e014      	b.n	82d4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    82aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    82ae:	490b      	ldr	r1, [pc, #44]	; (82dc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    82b0:	430a      	orrs	r2, r1
    82b2:	490b      	ldr	r1, [pc, #44]	; (82e0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    82b4:	600a      	str	r2, [r1, #0]
    82b6:	490b      	ldr	r1, [pc, #44]	; (82e4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    82b8:	4308      	orrs	r0, r1
    82ba:	4909      	ldr	r1, [pc, #36]	; (82e0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    82bc:	1d09      	adds	r1, r1, #4
    82be:	6008      	str	r0, [r1, #0]
    82c0:	4809      	ldr	r0, [pc, #36]	; (82e8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    82c2:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    82c6:	b2c0      	uxtb	r0, r0
    82c8:	2803      	cmp	r0, #3
    82ca:	d001      	beq.n	82d0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    82cc:	280b      	cmp	r0, #11
    82ce:	d104      	bne.n	82da <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    82d0:	f240 21f1 	movw	r1, #753	; 0x2f1
    82d4:	203e      	movs	r0, #62	; 0x3e
    82d6:	f7f8 fbc5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    82da:	bd10      	pop	{r4, pc}
    82dc:	00100108 	.word	0x00100108
    82e0:	40001514 	.word	0x40001514
    82e4:	02030000 	.word	0x02030000
    82e8:	40001000 	.word	0x40001000

000082ec <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    82ec:	4901      	ldr	r1, [pc, #4]	; (82f4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    82ee:	7588      	strb	r0, [r1, #22]
    82f0:	4770      	bx	lr
    82f2:	0000      	.short	0x0000
    82f4:	20000f80 	.word	0x20000f80

000082f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    82f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    82fc:	4853      	ldr	r0, [pc, #332]	; (844c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    82fe:	f04f 0a01 	mov.w	sl, #1
    8302:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    8306:	4851      	ldr	r0, [pc, #324]	; (844c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    8308:	300c      	adds	r0, #12
    830a:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    830e:	f008 f810 	bl	10332 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    8312:	4c4f      	ldr	r4, [pc, #316]	; (8450 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    8314:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    8318:	f000 f91a 	bl	8550 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    831c:	494d      	ldr	r1, [pc, #308]	; (8454 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    831e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    8320:	6008      	str	r0, [r1, #0]
    8322:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8458 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    8326:	2000      	movs	r0, #0
    8328:	62a0      	str	r0, [r4, #40]	; 0x28
    832a:	f8d8 2200 	ldr.w	r2, [r8, #512]	; 0x200
    832e:	f240 131d 	movw	r3, #285	; 0x11d
    8332:	439a      	bics	r2, r3
    8334:	f8c8 2200 	str.w	r2, [r8, #512]	; 0x200
    8338:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    833c:	f000 f988 	bl	8650 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    8340:	4605      	mov	r5, r0
    8342:	4842      	ldr	r0, [pc, #264]	; (844c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    8344:	3008      	adds	r0, #8
    8346:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    834a:	4e40      	ldr	r6, [pc, #256]	; (844c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    834c:	61e0      	str	r0, [r4, #28]
    834e:	1d36      	adds	r6, r6, #4
    8350:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    8354:	61a0      	str	r0, [r4, #24]
    8356:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    835a:	7d21      	ldrb	r1, [r4, #20]
    835c:	f884 1020 	strb.w	r1, [r4, #32]
    8360:	7a61      	ldrb	r1, [r4, #9]
    8362:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    8366:	46a1      	mov	r9, r4
    8368:	2400      	movs	r4, #0
    836a:	4639      	mov	r1, r7
    836c:	4628      	mov	r0, r5
    836e:	f000 f9e3 	bl	8738 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x278>
    8372:	b910      	cbnz	r0, 837a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    8374:	f8c8 a010 	str.w	sl, [r8, #16]
    8378:	2401      	movs	r4, #1
    837a:	4f35      	ldr	r7, [pc, #212]	; (8450 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    837c:	07e8      	lsls	r0, r5, #31
    837e:	f1a7 0710 	sub.w	r7, r7, #16
    8382:	d002      	beq.n	838a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    8384:	6838      	ldr	r0, [r7, #0]
    8386:	4780      	blx	r0
    8388:	e034      	b.n	83f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfc>
    838a:	07a8      	lsls	r0, r5, #30
    838c:	d529      	bpl.n	83e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    838e:	0768      	lsls	r0, r5, #29
    8390:	d421      	bmi.n	83d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    8392:	f008 f8eb 	bl	1056c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8396:	b9f0      	cbnz	r0, 83d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    8398:	f008 f8d8 	bl	1054c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    839c:	b9d8      	cbnz	r0, 83d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    839e:	482f      	ldr	r0, [pc, #188]	; (845c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>)
    83a0:	6800      	ldr	r0, [r0, #0]
    83a2:	f3c0 5242 	ubfx	r2, r0, #21, #3
    83a6:	f3c0 6100 	ubfx	r1, r0, #24, #1
    83aa:	f000 0c0f 	and.w	ip, r0, #15
    83ae:	f3c0 1303 	ubfx	r3, r0, #4, #4
    83b2:	f3c0 2803 	ubfx	r8, r0, #8, #4
    83b6:	b171      	cbz	r1, 83d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    83b8:	f1bc 0f00 	cmp.w	ip, #0
    83bc:	d003      	beq.n	83c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    83be:	b113      	cbz	r3, 83c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    83c0:	f1b8 0f00 	cmp.w	r8, #0
    83c4:	d107      	bne.n	83d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    83c6:	f3c0 4004 	ubfx	r0, r0, #16, #5
    83ca:	2801      	cmp	r0, #1
    83cc:	d103      	bne.n	83d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    83ce:	2a03      	cmp	r2, #3
    83d0:	d201      	bcs.n	83d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    83d2:	f045 0504 	orr.w	r5, r5, #4
    83d6:	f345 0080 	sbfx	r0, r5, #2, #1
    83da:	4621      	mov	r1, r4
    83dc:	1c40      	adds	r0, r0, #1
    83de:	687a      	ldr	r2, [r7, #4]
    83e0:	e007      	b.n	83f2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfa>
    83e2:	f015 0f28 	tst.w	r5, #40	; 0x28
    83e6:	d005      	beq.n	83f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfc>
    83e8:	f345 1140 	sbfx	r1, r5, #5, #1
    83ec:	68ba      	ldr	r2, [r7, #8]
    83ee:	4620      	mov	r0, r4
    83f0:	1c49      	adds	r1, r1, #1
    83f2:	4790      	blx	r2
    83f4:	06e8      	lsls	r0, r5, #27
    83f6:	d501      	bpl.n	83fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x104>
    83f8:	68f8      	ldr	r0, [r7, #12]
    83fa:	4780      	blx	r0
    83fc:	f899 1009 	ldrb.w	r1, [r9, #9]
    8400:	4648      	mov	r0, r9
    8402:	2902      	cmp	r1, #2
    8404:	d120      	bne.n	8448 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    8406:	7b01      	ldrb	r1, [r0, #12]
    8408:	2900      	cmp	r1, #0
    840a:	d01d      	beq.n	8448 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    840c:	2902      	cmp	r1, #2
    840e:	d004      	beq.n	841a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x122>
    8410:	2901      	cmp	r1, #1
    8412:	d009      	beq.n	8428 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x130>
    8414:	f640 4166 	movw	r1, #3174	; 0xc66
    8418:	e00d      	b.n	8436 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
    841a:	69c1      	ldr	r1, [r0, #28]
    841c:	f8d9 0010 	ldr.w	r0, [r9, #16]
    8420:	4408      	add	r0, r1
    8422:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    8426:	e00b      	b.n	8440 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x148>
    8428:	6901      	ldr	r1, [r0, #16]
    842a:	f8d9 001c 	ldr.w	r0, [r9, #28]
    842e:	4281      	cmp	r1, r0
    8430:	d804      	bhi.n	843c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    8432:	f640 4167 	movw	r1, #3175	; 0xc67
    8436:	203e      	movs	r0, #62	; 0x3e
    8438:	f7f8 fb14 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    843c:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    8440:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8444:	f000 b9bc 	b.w	87c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    8448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    844c:	40008000 	.word	0x40008000
    8450:	20000f80 	.word	0x20000f80
    8454:	4001f508 	.word	0x4001f508
    8458:	40001000 	.word	0x40001000
    845c:	40001450 	.word	0x40001450

00008460 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    8460:	b570      	push	{r4, r5, r6, lr}
    8462:	4b16      	ldr	r3, [pc, #88]	; (84bc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5c>)
    8464:	888c      	ldrh	r4, [r1, #4]
    8466:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    846a:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    846e:	780c      	ldrb	r4, [r1, #0]
    8470:	f8d1 1001 	ldr.w	r1, [r1, #1]
    8474:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    8478:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    847c:	f8d3 1640 	ldr.w	r1, [r3, #1600]	; 0x640
    8480:	2401      	movs	r4, #1
    8482:	4084      	lsls	r4, r0
    8484:	b2c9      	uxtb	r1, r1
    8486:	b2e5      	uxtb	r5, r4
    8488:	4329      	orrs	r1, r5
    848a:	b132      	cbz	r2, 849a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    848c:	2a01      	cmp	r2, #1
    848e:	d00a      	beq.n	84a6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x46>
    8490:	f240 51d4 	movw	r1, #1492	; 0x5d4
    8494:	203e      	movs	r0, #62	; 0x3e
    8496:	f7f8 fae5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    849a:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    849e:	f3c0 2007 	ubfx	r0, r0, #8, #8
    84a2:	43a0      	bics	r0, r4
    84a4:	e004      	b.n	84b0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    84a6:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    84aa:	f3c0 2007 	ubfx	r0, r0, #8, #8
    84ae:	4328      	orrs	r0, r5
    84b0:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    84b4:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    84b8:	bd70      	pop	{r4, r5, r6, pc}
    84ba:	0000      	.short	0x0000
    84bc:	40001000 	.word	0x40001000

000084c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    84c0:	4901      	ldr	r1, [pc, #4]	; (84c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    84c2:	2001      	movs	r0, #1
    84c4:	7008      	strb	r0, [r1, #0]
    84c6:	4770      	bx	lr
    84c8:	200002a0 	.word	0x200002a0
    84cc:	480b      	ldr	r0, [pc, #44]	; (84fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c>)
    84ce:	7d81      	ldrb	r1, [r0, #22]
    84d0:	480b      	ldr	r0, [pc, #44]	; (8500 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    84d2:	5c40      	ldrb	r0, [r0, r1]
    84d4:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    84d8:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    84dc:	d204      	bcs.n	84e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28>
    84de:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    84e2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    84e6:	e001      	b.n	84ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    84e8:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    84ec:	4a05      	ldr	r2, [pc, #20]	; (8504 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>)
    84ee:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    84f2:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    84f6:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    84fa:	4770      	bx	lr
    84fc:	20000f80 	.word	0x20000f80
    8500:	00008972 	.word	0x00008972
    8504:	40001000 	.word	0x40001000
    8508:	b508      	push	{r3, lr}
    850a:	490b      	ldr	r1, [pc, #44]	; (8538 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>)
    850c:	466b      	mov	r3, sp
    850e:	f991 2015 	ldrsb.w	r2, [r1, #21]
    8512:	7d89      	ldrb	r1, [r1, #22]
    8514:	f000 fad0 	bl	8ab8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    8518:	f99d 0000 	ldrsb.w	r0, [sp]
    851c:	f000 faa0 	bl	8a60 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    8520:	f10d 0001 	add.w	r0, sp, #1
    8524:	f004 f8cc 	bl	c6c0 <mpsl_fem_pa_gain_set>
    8528:	2800      	cmp	r0, #0
    852a:	d004      	beq.n	8536 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x76>
    852c:	f240 6115 	movw	r1, #1557	; 0x615
    8530:	203e      	movs	r0, #62	; 0x3e
    8532:	f7f8 fa97 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8536:	bd08      	pop	{r3, pc}
    8538:	20000f80 	.word	0x20000f80
    853c:	4803      	ldr	r0, [pc, #12]	; (854c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>)
    853e:	7a01      	ldrb	r1, [r0, #8]
    8540:	2901      	cmp	r1, #1
    8542:	d102      	bne.n	854a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8a>
    8544:	7a80      	ldrb	r0, [r0, #10]
    8546:	f7ff bfdf 	b.w	8508 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    854a:	4770      	bx	lr
    854c:	20000f80 	.word	0x20000f80
    8550:	480d      	ldr	r0, [pc, #52]	; (8588 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>)
    8552:	b510      	push	{r4, lr}
    8554:	7a40      	ldrb	r0, [r0, #9]
    8556:	2801      	cmp	r0, #1
    8558:	d00c      	beq.n	8574 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    855a:	2802      	cmp	r0, #2
    855c:	d113      	bne.n	8586 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    855e:	f004 f891 	bl	c684 <mpsl_fem_lna_configuration_clear>
    8562:	2800      	cmp	r0, #0
    8564:	d00f      	beq.n	8586 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    8566:	1c40      	adds	r0, r0, #1
    8568:	d00d      	beq.n	8586 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    856a:	f640 01c1 	movw	r1, #2241	; 0x8c1
    856e:	203e      	movs	r0, #62	; 0x3e
    8570:	f7f8 fa78 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8574:	f004 f898 	bl	c6a8 <mpsl_fem_pa_configuration_clear>
    8578:	2800      	cmp	r0, #0
    857a:	d004      	beq.n	8586 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    857c:	1c40      	adds	r0, r0, #1
    857e:	d002      	beq.n	8586 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    8580:	f640 01bb 	movw	r1, #2235	; 0x8bb
    8584:	e7f3      	b.n	856e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xae>
    8586:	bd10      	pop	{r4, pc}
    8588:	20000f80 	.word	0x20000f80
    858c:	4808      	ldr	r0, [pc, #32]	; (85b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    858e:	2100      	movs	r1, #0
    8590:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    8594:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    8598:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    859c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    85a0:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    85a4:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    85a8:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    85ac:	4770      	bx	lr
    85ae:	0000      	.short	0x0000
    85b0:	40001000 	.word	0x40001000
    85b4:	4818      	ldr	r0, [pc, #96]	; (8618 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x158>)
    85b6:	b510      	push	{r4, lr}
    85b8:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    85bc:	07c1      	lsls	r1, r0, #31
    85be:	d029      	beq.n	8614 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    85c0:	0781      	lsls	r1, r0, #30
    85c2:	d514      	bpl.n	85ee <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12e>
    85c4:	4815      	ldr	r0, [pc, #84]	; (861c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    85c6:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    85ca:	f041 0101 	orr.w	r1, r1, #1
    85ce:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    85d2:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    85d6:	b2c0      	uxtb	r0, r0
    85d8:	280b      	cmp	r0, #11
    85da:	d005      	beq.n	85e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    85dc:	280a      	cmp	r0, #10
    85de:	d003      	beq.n	85e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    85e0:	2803      	cmp	r0, #3
    85e2:	d001      	beq.n	85e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    85e4:	2802      	cmp	r0, #2
    85e6:	d115      	bne.n	8614 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    85e8:	f240 613e 	movw	r1, #1598	; 0x63e
    85ec:	e00f      	b.n	860e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x14e>
    85ee:	0740      	lsls	r0, r0, #29
    85f0:	d510      	bpl.n	8614 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    85f2:	480a      	ldr	r0, [pc, #40]	; (861c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    85f4:	490a      	ldr	r1, [pc, #40]	; (8620 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x160>)
    85f6:	3008      	adds	r0, #8
    85f8:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    85fc:	f44f 71a0 	mov.w	r1, #320	; 0x140
    8600:	4808      	ldr	r0, [pc, #32]	; (8624 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x164>)
    8602:	f007 fe55 	bl	102b0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    8606:	2800      	cmp	r0, #0
    8608:	d004      	beq.n	8614 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    860a:	f240 6146 	movw	r1, #1606	; 0x646
    860e:	203e      	movs	r0, #62	; 0x3e
    8610:	f7f8 fa28 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8614:	bd10      	pop	{r4, pc}
    8616:	0000      	.short	0x0000
    8618:	20000f80 	.word	0x20000f80
    861c:	40001000 	.word	0x40001000
    8620:	4001f098 	.word	0x4001f098
    8624:	40008000 	.word	0x40008000
    8628:	4808      	ldr	r0, [pc, #32]	; (864c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>)
    862a:	4601      	mov	r1, r0
    862c:	79c2      	ldrb	r2, [r0, #7]
    862e:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    8632:	b112      	cbz	r2, 863a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17a>
    8634:	2a01      	cmp	r2, #1
    8636:	d003      	beq.n	8640 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x180>
    8638:	e006      	b.n	8648 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    863a:	f041 0102 	orr.w	r1, r1, #2
    863e:	e001      	b.n	8644 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x184>
    8640:	f041 0104 	orr.w	r1, r1, #4
    8644:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    8648:	f7ff bfb4 	b.w	85b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    864c:	20000f80 	.word	0x20000f80
    8650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8654:	4d34      	ldr	r5, [pc, #208]	; (8728 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x268>)
    8656:	2400      	movs	r4, #0
    8658:	7b28      	ldrb	r0, [r5, #12]
    865a:	b138      	cbz	r0, 866c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    865c:	f44f 71a2 	mov.w	r1, #324	; 0x144
    8660:	4832      	ldr	r0, [pc, #200]	; (872c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26c>)
    8662:	f007 fe25 	bl	102b0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    8666:	b108      	cbz	r0, 866c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    8668:	2601      	movs	r6, #1
    866a:	e000      	b.n	866e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ae>
    866c:	2600      	movs	r6, #0
    866e:	7a68      	ldrb	r0, [r5, #9]
    8670:	4f2f      	ldr	r7, [pc, #188]	; (8730 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x270>)
    8672:	f44f 7186 	mov.w	r1, #268	; 0x10c
    8676:	2801      	cmp	r0, #1
    8678:	d002      	beq.n	8680 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    867a:	2802      	cmp	r0, #2
    867c:	d006      	beq.n	868c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    867e:	e016      	b.n	86ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    8680:	4638      	mov	r0, r7
    8682:	f007 fe10 	bl	102a6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    8686:	b190      	cbz	r0, 86ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    8688:	2408      	movs	r4, #8
    868a:	e010      	b.n	86ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    868c:	4638      	mov	r0, r7
    868e:	f007 fe0a 	bl	102a6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    8692:	b100      	cbz	r0, 8696 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d6>
    8694:	2402      	movs	r4, #2
    8696:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
    869a:	43c0      	mvns	r0, r0
    869c:	f340 0000 	sbfx	r0, r0, #0, #1
    86a0:	1c40      	adds	r0, r0, #1
    86a2:	d101      	bne.n	86a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    86a4:	f044 0404 	orr.w	r4, r4, #4
    86a8:	b10e      	cbz	r6, 86ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    86aa:	f044 0401 	orr.w	r4, r4, #1
    86ae:	f014 0f0b 	tst.w	r4, #11
    86b2:	d107      	bne.n	86c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    86b4:	f44f 7188 	mov.w	r1, #272	; 0x110
    86b8:	4638      	mov	r0, r7
    86ba:	f007 fdf4 	bl	102a6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    86be:	b108      	cbz	r0, 86c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    86c0:	f044 0410 	orr.w	r4, r4, #16
    86c4:	481b      	ldr	r0, [pc, #108]	; (8734 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>)
    86c6:	7800      	ldrb	r0, [r0, #0]
    86c8:	b1f8      	cbz	r0, 870a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24a>
    86ca:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    86ce:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    86d2:	d007      	beq.n	86e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    86d4:	f44f 718a 	mov.w	r1, #276	; 0x114
    86d8:	4638      	mov	r0, r7
    86da:	f007 fde4 	bl	102a6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    86de:	b108      	cbz	r0, 86e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    86e0:	2001      	movs	r0, #1
    86e2:	e000      	b.n	86e6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    86e4:	2000      	movs	r0, #0
    86e6:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    86ea:	b13e      	cbz	r6, 86fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    86ec:	f44f 718c 	mov.w	r1, #280	; 0x118
    86f0:	4638      	mov	r0, r7
    86f2:	f007 fdd8 	bl	102a6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    86f6:	b108      	cbz	r0, 86fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    86f8:	2001      	movs	r0, #1
    86fa:	e000      	b.n	86fe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    86fc:	2000      	movs	r0, #0
    86fe:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    8702:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    8706:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    870a:	f7ff ff3f 	bl	858c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    870e:	06e0      	lsls	r0, r4, #27
    8710:	d506      	bpl.n	8720 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    8712:	0720      	lsls	r0, r4, #28
    8714:	d404      	bmi.n	8720 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    8716:	7a68      	ldrb	r0, [r5, #9]
    8718:	2801      	cmp	r0, #1
    871a:	d101      	bne.n	8720 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    871c:	f044 0420 	orr.w	r4, r4, #32
    8720:	4620      	mov	r0, r4
    8722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8726:	0000      	.short	0x0000
    8728:	20000f80 	.word	0x20000f80
    872c:	40008000 	.word	0x40008000
    8730:	40001000 	.word	0x40001000
    8734:	200002a0 	.word	0x200002a0
    8738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    873c:	4c1a      	ldr	r4, [pc, #104]	; (87a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e8>)
    873e:	460d      	mov	r5, r1
    8740:	7a21      	ldrb	r1, [r4, #8]
    8742:	b129      	cbz	r1, 8750 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x290>
    8744:	f010 0f11 	tst.w	r0, #17
    8748:	d007      	beq.n	875a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x29a>
    874a:	f7ff fab1 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    874e:	e024      	b.n	879a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2da>
    8750:	f000 f890 	bl	8874 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    8754:	2000      	movs	r0, #0
    8756:	7320      	strb	r0, [r4, #12]
    8758:	e01f      	b.n	879a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2da>
    875a:	2901      	cmp	r1, #1
    875c:	d001      	beq.n	8762 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    875e:	2601      	movs	r6, #1
    8760:	e000      	b.n	8764 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a4>
    8762:	2600      	movs	r6, #0
    8764:	79e0      	ldrb	r0, [r4, #7]
    8766:	2801      	cmp	r0, #1
    8768:	d00e      	beq.n	8788 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>
    876a:	2700      	movs	r7, #0
    876c:	f000 f882 	bl	8874 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    8770:	2196      	movs	r1, #150	; 0x96
    8772:	4630      	mov	r0, r6
    8774:	f000 f894 	bl	88a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    8778:	4601      	mov	r1, r0
    877a:	b14f      	cbz	r7, 8790 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>
    877c:	353b      	adds	r5, #59	; 0x3b
    877e:	428d      	cmp	r5, r1
    8780:	d904      	bls.n	878c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>
    8782:	2000      	movs	r0, #0
    8784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8788:	2701      	movs	r7, #1
    878a:	e7ef      	b.n	876c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ac>
    878c:	2001      	movs	r0, #1
    878e:	71e0      	strb	r0, [r4, #7]
    8790:	7aa2      	ldrb	r2, [r4, #10]
    8792:	4630      	mov	r0, r6
    8794:	f7ff fccc 	bl	8130 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    8798:	b108      	cbz	r0, 879e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2de>
    879a:	2001      	movs	r0, #1
    879c:	e7f2      	b.n	8784 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    879e:	f640 21c4 	movw	r1, #2756	; 0xac4
    87a2:	203e      	movs	r0, #62	; 0x3e
    87a4:	f7f8 f95e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87a8:	20000f80 	.word	0x20000f80
    87ac:	4803      	ldr	r0, [pc, #12]	; (87bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2fc>)
    87ae:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    87b2:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    87b6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    87ba:	4770      	bx	lr
    87bc:	40001000 	.word	0x40001000
    87c0:	4804      	ldr	r0, [pc, #16]	; (87d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x314>)
    87c2:	6a81      	ldr	r1, [r0, #40]	; 0x28
    87c4:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    87c8:	6281      	str	r1, [r0, #40]	; 0x28
    87ca:	4903      	ldr	r1, [pc, #12]	; (87d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x318>)
    87cc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    87d0:	6008      	str	r0, [r1, #0]
    87d2:	4770      	bx	lr
    87d4:	20000f80 	.word	0x20000f80
    87d8:	4001f504 	.word	0x4001f504
    87dc:	4a07      	ldr	r2, [pc, #28]	; (87fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    87de:	2000      	movs	r0, #0
    87e0:	3208      	adds	r2, #8
    87e2:	4906      	ldr	r1, [pc, #24]	; (87fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    87e4:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    87e8:	1d0a      	adds	r2, r1, #4
    87ea:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    87ee:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    87f2:	4902      	ldr	r1, [pc, #8]	; (87fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    87f4:	310c      	adds	r1, #12
    87f6:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    87fa:	4770      	bx	lr
    87fc:	40008000 	.word	0x40008000
    8800:	4903      	ldr	r1, [pc, #12]	; (8810 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x350>)
    8802:	79c9      	ldrb	r1, [r1, #7]
    8804:	2900      	cmp	r1, #0
    8806:	d102      	bne.n	880e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34e>
    8808:	4902      	ldr	r1, [pc, #8]	; (8814 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>)
    880a:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    880e:	4770      	bx	lr
    8810:	20000f80 	.word	0x20000f80
    8814:	4001f098 	.word	0x4001f098
    8818:	b510      	push	{r4, lr}
    881a:	4a14      	ldr	r2, [pc, #80]	; (886c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    881c:	b120      	cbz	r0, 8828 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x368>
    881e:	2801      	cmp	r0, #1
    8820:	d011      	beq.n	8846 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x386>
    8822:	f240 7169 	movw	r1, #1897	; 0x769
    8826:	e01c      	b.n	8862 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a2>
    8828:	f101 0028 	add.w	r0, r1, #40	; 0x28
    882c:	e9c2 1002 	strd	r1, r0, [r2, #8]
    8830:	490f      	ldr	r1, [pc, #60]	; (8870 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>)
    8832:	480e      	ldr	r0, [pc, #56]	; (886c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    8834:	f003 ff3e 	bl	c6b4 <mpsl_fem_pa_configuration_set>
    8838:	2800      	cmp	r0, #0
    883a:	d015      	beq.n	8868 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    883c:	1c40      	adds	r0, r0, #1
    883e:	d013      	beq.n	8868 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    8840:	f44f 61eb 	mov.w	r1, #1880	; 0x758
    8844:	e00d      	b.n	8862 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a2>
    8846:	f101 0029 	add.w	r0, r1, #41	; 0x29
    884a:	e9c2 1002 	strd	r1, r0, [r2, #8]
    884e:	4908      	ldr	r1, [pc, #32]	; (8870 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>)
    8850:	4806      	ldr	r0, [pc, #24]	; (886c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    8852:	f003 ff1d 	bl	c690 <mpsl_fem_lna_configuration_set>
    8856:	2800      	cmp	r0, #0
    8858:	d006      	beq.n	8868 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    885a:	1c40      	adds	r0, r0, #1
    885c:	d004      	beq.n	8868 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    885e:	f240 7165 	movw	r1, #1893	; 0x765
    8862:	203e      	movs	r0, #62	; 0x3e
    8864:	f7f8 f8fe 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8868:	bd10      	pop	{r4, pc}
    886a:	0000      	.short	0x0000
    886c:	200002a8 	.word	0x200002a8
    8870:	0000899c 	.word	0x0000899c
    8874:	4802      	ldr	r0, [pc, #8]	; (8880 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c0>)
    8876:	2100      	movs	r1, #0
    8878:	71c1      	strb	r1, [r0, #7]
    887a:	7201      	strb	r1, [r0, #8]
    887c:	7241      	strb	r1, [r0, #9]
    887e:	4770      	bx	lr
    8880:	20000f80 	.word	0x20000f80
    8884:	4a05      	ldr	r2, [pc, #20]	; (889c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3dc>)
    8886:	79d2      	ldrb	r2, [r2, #7]
    8888:	2a01      	cmp	r2, #1
    888a:	d006      	beq.n	889a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3da>
    888c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8890:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    8894:	fbb1 f1f2 	udiv	r1, r1, r2
    8898:	1a40      	subs	r0, r0, r1
    889a:	4770      	bx	lr
    889c:	20000f80 	.word	0x20000f80
    88a0:	b570      	push	{r4, r5, r6, lr}
    88a2:	4c13      	ldr	r4, [pc, #76]	; (88f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x430>)
    88a4:	4603      	mov	r3, r0
    88a6:	460d      	mov	r5, r1
    88a8:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    88ac:	2000      	movs	r0, #0
    88ae:	b15a      	cbz	r2, 88c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    88b0:	4621      	mov	r1, r4
    88b2:	f891 1020 	ldrb.w	r1, [r1, #32]
    88b6:	b163      	cbz	r3, 88d2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x412>
    88b8:	2b01      	cmp	r3, #1
    88ba:	d111      	bne.n	88e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x420>
    88bc:	2a01      	cmp	r2, #1
    88be:	4628      	mov	r0, r5
    88c0:	d012      	beq.n	88e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    88c2:	f007 fcfa 	bl	102ba <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    88c6:	e009      	b.n	88dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    88c8:	f640 016e 	movw	r1, #2158	; 0x86e
    88cc:	203e      	movs	r0, #62	; 0x3e
    88ce:	f7f8 f8c9 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    88d2:	2a01      	cmp	r2, #1
    88d4:	4628      	mov	r0, r5
    88d6:	d004      	beq.n	88e2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x422>
    88d8:	f007 fcfd 	bl	102d6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    88dc:	69e1      	ldr	r1, [r4, #28]
    88de:	4408      	add	r0, r1
    88e0:	bd70      	pop	{r4, r5, r6, pc}
    88e2:	f000 f8d1 	bl	8a88 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    88e6:	e7f9      	b.n	88dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    88e8:	f000 f8c0 	bl	8a6c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    88ec:	e7f6      	b.n	88dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    88ee:	0000      	.short	0x0000
    88f0:	20000f80 	.word	0x20000f80
    88f4:	b510      	push	{r4, lr}
    88f6:	f7ff fbef 	bl	80d8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    88fa:	f7ff fde7 	bl	84cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    88fe:	f7ff fe1d 	bl	853c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    8902:	f7ff ff53 	bl	87ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>
    8906:	f007 fe31 	bl	1056c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    890a:	2800      	cmp	r0, #0
    890c:	d108      	bne.n	8920 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    890e:	f007 fe1d 	bl	1054c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    8912:	2800      	cmp	r0, #0
    8914:	d104      	bne.n	8920 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    8916:	4803      	ldr	r0, [pc, #12]	; (8924 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x464>)
    8918:	6801      	ldr	r1, [r0, #0]
    891a:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    891e:	6001      	str	r1, [r0, #0]
    8920:	bd10      	pop	{r4, pc}
    8922:	0000      	.short	0x0000
    8924:	40001568 	.word	0x40001568
    8928:	b510      	push	{r4, lr}
    892a:	4604      	mov	r4, r0
    892c:	f7ff fbd4 	bl	80d8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8930:	f7ff fdcc 	bl	84cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    8934:	4620      	mov	r0, r4
    8936:	f7ff fde7 	bl	8508 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    893a:	f007 fe17 	bl	1056c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    893e:	2800      	cmp	r0, #0
    8940:	d00d      	beq.n	895e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49e>
    8942:	4a09      	ldr	r2, [pc, #36]	; (8968 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a8>)
    8944:	6811      	ldr	r1, [r2, #0]
    8946:	0650      	lsls	r0, r2, #25
    8948:	2c02      	cmp	r4, #2
    894a:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    894e:	d007      	beq.n	8960 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a0>
    8950:	f3c0 2006 	ubfx	r0, r0, #8, #7
    8954:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    8958:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    895c:	6010      	str	r0, [r2, #0]
    895e:	bd10      	pop	{r4, pc}
    8960:	f3c0 6006 	ubfx	r0, r0, #24, #7
    8964:	e7f6      	b.n	8954 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>
    8966:	0000      	.short	0x0000
    8968:	40001588 	.word	0x40001588
    896c:	a62c0000 	.word	0xa62c0000
    8970:	0604a1e0 	.word	0x0604a1e0
    8974:	0e0c0a08 	.word	0x0e0c0a08
    8978:	16141210 	.word	0x16141210
    897c:	201e1c18 	.word	0x201e1c18
    8980:	28262422 	.word	0x28262422
    8984:	302e2c2a 	.word	0x302e2c2a
    8988:	38363432 	.word	0x38363432
    898c:	403e3c3a 	.word	0x403e3c3a
    8990:	48464442 	.word	0x48464442
    8994:	024e4c4a 	.word	0x024e4c4a
    8998:	0000501a 	.word	0x0000501a
    899c:	00000001 	.word	0x00000001
    89a0:	40001110 	.word	0x40001110
	...
    89b8:	00001e14 	.word	0x00001e14
    89bc:	00001130 	.word	0x00001130
    89c0:	00000000 	.word	0x00000000
    89c4:	00000028 	.word	0x00000028
    89c8:	00000018 	.word	0x00000018
    89cc:	00000000 	.word	0x00000000
    89d0:	00001e14 	.word	0x00001e14
    89d4:	00001130 	.word	0x00001130
    89d8:	00000000 	.word	0x00000000
    89dc:	00001770 	.word	0x00001770
    89e0:	00000fa0 	.word	0x00000fa0

000089e4 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    89e4:	b570      	push	{r4, r5, r6, lr}
    89e6:	4605      	mov	r5, r0
    89e8:	4614      	mov	r4, r2
    89ea:	4608      	mov	r0, r1
    89ec:	f7ff fb9a 	bl	8124 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    89f0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    89f4:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    89f8:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    89fc:	4807      	ldr	r0, [pc, #28]	; (8a1c <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    89fe:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    8a02:	4408      	add	r0, r1
    8a04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8a08:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    8a0c:	fbb0 f5f1 	udiv	r5, r0, r1
    8a10:	4620      	mov	r0, r4
    8a12:	f7ff fb5b 	bl	80cc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8a16:	4428      	add	r0, r5
    8a18:	1d40      	adds	r0, r0, #5
    8a1a:	bd70      	pop	{r4, r5, r6, pc}
    8a1c:	00008aac 	.word	0x00008aac

00008a20 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    8a20:	b570      	push	{r4, r5, r6, lr}
    8a22:	4d0e      	ldr	r5, [pc, #56]	; (8a5c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    8a24:	461c      	mov	r4, r3
    8a26:	3d08      	subs	r5, #8
    8a28:	4b0c      	ldr	r3, [pc, #48]	; (8a5c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    8a2a:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    8a2e:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    8a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8a36:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    8a3a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    8a3e:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    8a42:	4418      	add	r0, r3
    8a44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8a48:	fbb0 f5f1 	udiv	r5, r0, r1
    8a4c:	4610      	mov	r0, r2
    8a4e:	f7ff fb3d 	bl	80cc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8a52:	4428      	add	r0, r5
    8a54:	4420      	add	r0, r4
    8a56:	1d40      	adds	r0, r0, #5
    8a58:	bd70      	pop	{r4, r5, r6, pc}
    8a5a:	0000      	.short	0x0000
    8a5c:	00008aac 	.word	0x00008aac

00008a60 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    8a60:	4901      	ldr	r1, [pc, #4]	; (8a68 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    8a62:	b2c0      	uxtb	r0, r0
    8a64:	6008      	str	r0, [r1, #0]
    8a66:	4770      	bx	lr
    8a68:	4000150c 	.word	0x4000150c

00008a6c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    8a6c:	4a05      	ldr	r2, [pc, #20]	; (8a84 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    8a6e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8a72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8a76:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    8a7a:	fbb1 f1f2 	udiv	r1, r1, r2
    8a7e:	4408      	add	r0, r1
    8a80:	1e80      	subs	r0, r0, #2
    8a82:	4770      	bx	lr
    8a84:	00008aa4 	.word	0x00008aa4

00008a88 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    8a88:	4a05      	ldr	r2, [pc, #20]	; (8aa0 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    8a8a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8a8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8a92:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    8a96:	fbb1 f1f2 	udiv	r1, r1, r2
    8a9a:	4408      	add	r0, r1
    8a9c:	4770      	bx	lr
    8a9e:	0000      	.short	0x0000
    8aa0:	00008aa4 	.word	0x00008aa4
    8aa4:	05dc0000 	.word	0x05dc0000
    8aa8:	000003e8 	.word	0x000003e8
    8aac:	00000000 	.word	0x00000000
    8ab0:	00001e14 	.word	0x00001e14
    8ab4:	00001130 	.word	0x00001130

00008ab8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    8ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8abc:	461e      	mov	r6, r3
    8abe:	4617      	mov	r7, r2
    8ac0:	460c      	mov	r4, r1
    8ac2:	4605      	mov	r5, r0
    8ac4:	f000 f856 	bl	8b74 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    8ac8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8b70 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    8acc:	4680      	mov	r8, r0
    8ace:	f899 0000 	ldrb.w	r0, [r9]
    8ad2:	42a8      	cmp	r0, r5
    8ad4:	d110      	bne.n	8af8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8ad6:	f899 1001 	ldrb.w	r1, [r9, #1]
    8ada:	4648      	mov	r0, r9
    8adc:	42a1      	cmp	r1, r4
    8ade:	d10b      	bne.n	8af8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8ae0:	f990 1002 	ldrsb.w	r1, [r0, #2]
    8ae4:	42b9      	cmp	r1, r7
    8ae6:	d107      	bne.n	8af8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8ae8:	78c2      	ldrb	r2, [r0, #3]
    8aea:	4542      	cmp	r2, r8
    8aec:	d104      	bne.n	8af8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8aee:	8881      	ldrh	r1, [r0, #4]
    8af0:	8031      	strh	r1, [r6, #0]
    8af2:	7980      	ldrb	r0, [r0, #6]
    8af4:	70b0      	strb	r0, [r6, #2]
    8af6:	e037      	b.n	8b68 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb0>
    8af8:	463a      	mov	r2, r7
    8afa:	4621      	mov	r1, r4
    8afc:	2d01      	cmp	r5, #1
    8afe:	d009      	beq.n	8b14 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    8b00:	2d02      	cmp	r5, #2
    8b02:	d009      	beq.n	8b18 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    8b04:	2d04      	cmp	r5, #4
    8b06:	d009      	beq.n	8b1c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    8b08:	2d08      	cmp	r5, #8
    8b0a:	d009      	beq.n	8b20 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    8b0c:	f240 4162 	movw	r1, #1122	; 0x462
    8b10:	2006      	movs	r0, #6
    8b12:	e00c      	b.n	8b2e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    8b14:	2000      	movs	r0, #0
    8b16:	e004      	b.n	8b22 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8b18:	2001      	movs	r0, #1
    8b1a:	e002      	b.n	8b22 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8b1c:	2003      	movs	r0, #3
    8b1e:	e000      	b.n	8b22 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8b20:	2002      	movs	r0, #2
    8b22:	466b      	mov	r3, sp
    8b24:	f000 f89e 	bl	8c64 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    8b28:	b118      	cbz	r0, 8b32 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    8b2a:	213d      	movs	r1, #61	; 0x3d
    8b2c:	2075      	movs	r0, #117	; 0x75
    8b2e:	f7f7 ff99 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b32:	4620      	mov	r0, r4
    8b34:	f7ff f8b4 	bl	7ca0 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    8b38:	4602      	mov	r2, r0
    8b3a:	2300      	movs	r3, #0
    8b3c:	4631      	mov	r1, r6
    8b3e:	f99d 0000 	ldrsb.w	r0, [sp]
    8b42:	f003 fdc9 	bl	c6d8 <mpsl_fem_tx_power_split>
    8b46:	4601      	mov	r1, r0
    8b48:	f889 1007 	strb.w	r1, [r9, #7]
    8b4c:	8831      	ldrh	r1, [r6, #0]
    8b4e:	f8a9 1004 	strh.w	r1, [r9, #4]
    8b52:	78b1      	ldrb	r1, [r6, #2]
    8b54:	f889 1006 	strb.w	r1, [r9, #6]
    8b58:	f889 5000 	strb.w	r5, [r9]
    8b5c:	f889 4001 	strb.w	r4, [r9, #1]
    8b60:	f889 7002 	strb.w	r7, [r9, #2]
    8b64:	f889 8003 	strb.w	r8, [r9, #3]
    8b68:	f999 0007 	ldrsb.w	r0, [r9, #7]
    8b6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8b70:	20000362 	.word	0x20000362

00008b74 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    8b74:	4801      	ldr	r0, [pc, #4]	; (8b7c <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    8b76:	7800      	ldrb	r0, [r0, #0]
    8b78:	4770      	bx	lr
    8b7a:	0000      	.short	0x0000
    8b7c:	200002c0 	.word	0x200002c0

00008b80 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    8b80:	b570      	push	{r4, r5, r6, lr}
    8b82:	4c17      	ldr	r4, [pc, #92]	; (8be0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
    8b84:	7860      	ldrb	r0, [r4, #1]
    8b86:	2800      	cmp	r0, #0
    8b88:	d123      	bne.n	8bd2 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
    8b8a:	2001      	movs	r0, #1
    8b8c:	7060      	strb	r0, [r4, #1]
    8b8e:	f007 fcc7 	bl	10520 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    8b92:	f06f 0527 	mvn.w	r5, #39	; 0x27
    8b96:	b928      	cbnz	r0, 8ba4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8b98:	f007 fcf8 	bl	1058c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    8b9c:	b910      	cbnz	r0, 8ba4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8b9e:	f007 fcff 	bl	105a0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    8ba2:	b120      	cbz	r0, 8bae <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
    8ba4:	480f      	ldr	r0, [pc, #60]	; (8be4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8ba6:	6060      	str	r0, [r4, #4]
    8ba8:	70a5      	strb	r5, [r4, #2]
    8baa:	2008      	movs	r0, #8
    8bac:	e010      	b.n	8bd0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
    8bae:	f007 fc8c 	bl	104ca <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    8bb2:	b940      	cbnz	r0, 8bc6 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8bb4:	f007 fc93 	bl	104de <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    8bb8:	b928      	cbnz	r0, 8bc6 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8bba:	f007 fca7 	bl	1050c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    8bbe:	b910      	cbnz	r0, 8bc6 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8bc0:	f007 fcb8 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    8bc4:	b130      	cbz	r0, 8bd4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
    8bc6:	4807      	ldr	r0, [pc, #28]	; (8be4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8bc8:	3031      	adds	r0, #49	; 0x31
    8bca:	6060      	str	r0, [r4, #4]
    8bcc:	70a5      	strb	r5, [r4, #2]
    8bce:	2004      	movs	r0, #4
    8bd0:	70e0      	strb	r0, [r4, #3]
    8bd2:	bd70      	pop	{r4, r5, r6, pc}
    8bd4:	f240 113f 	movw	r1, #319	; 0x13f
    8bd8:	2074      	movs	r0, #116	; 0x74
    8bda:	f003 fbbd 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8bde:	0000      	.short	0x0000
    8be0:	200002c0 	.word	0x200002c0
    8be4:	000108ed 	.word	0x000108ed

00008be8 <mpsl_tx_power_radio_supported_power_adjust>:
    8be8:	4a06      	ldr	r2, [pc, #24]	; (8c04 <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
    8bea:	b500      	push	{lr}
    8bec:	f992 2003 	ldrsb.w	r2, [r2, #3]
    8bf0:	4290      	cmp	r0, r2
    8bf2:	db01      	blt.n	8bf8 <mpsl_tx_power_radio_supported_power_adjust+0x10>
    8bf4:	4610      	mov	r0, r2
    8bf6:	bd00      	pop	{pc}
    8bf8:	f000 f808 	bl	8c0c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
    8bfc:	4902      	ldr	r1, [pc, #8]	; (8c08 <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    8bfe:	5608      	ldrsb	r0, [r1, r0]
    8c00:	bd00      	pop	{pc}
    8c02:	0000      	.short	0x0000
    8c04:	200002c0 	.word	0x200002c0
    8c08:	000108df 	.word	0x000108df

00008c0c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
    8c0c:	4602      	mov	r2, r0
    8c0e:	4813      	ldr	r0, [pc, #76]	; (8c5c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
    8c10:	b510      	push	{r4, lr}
    8c12:	f990 3003 	ldrsb.w	r3, [r0, #3]
    8c16:	429a      	cmp	r2, r3
    8c18:	db01      	blt.n	8c1e <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
    8c1a:	200d      	movs	r0, #13
    8c1c:	bd10      	pop	{r4, pc}
    8c1e:	f990 3002 	ldrsb.w	r3, [r0, #2]
    8c22:	429a      	cmp	r2, r3
    8c24:	dc01      	bgt.n	8c2a <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
    8c26:	2000      	movs	r0, #0
    8c28:	bd10      	pop	{r4, pc}
    8c2a:	b101      	cbz	r1, 8c2e <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
    8c2c:	2101      	movs	r1, #1
    8c2e:	1ad4      	subs	r4, r2, r3
    8c30:	6843      	ldr	r3, [r0, #4]
    8c32:	5d18      	ldrb	r0, [r3, r4]
    8c34:	4c0a      	ldr	r4, [pc, #40]	; (8c60 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    8c36:	5624      	ldrsb	r4, [r4, r0]
    8c38:	4294      	cmp	r4, r2
    8c3a:	d0f5      	beq.n	8c28 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8c3c:	4c08      	ldr	r4, [pc, #32]	; (8c60 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    8c3e:	4408      	add	r0, r1
    8c40:	343f      	adds	r4, #63	; 0x3f
    8c42:	b2c0      	uxtb	r0, r0
    8c44:	b2d2      	uxtb	r2, r2
    8c46:	42a3      	cmp	r3, r4
    8c48:	d1ee      	bne.n	8c28 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8c4a:	2900      	cmp	r1, #0
    8c4c:	d0ec      	beq.n	8c28 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8c4e:	2a01      	cmp	r2, #1
    8c50:	d001      	beq.n	8c56 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
    8c52:	2a02      	cmp	r2, #2
    8c54:	d1e8      	bne.n	8c28 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8c56:	1c40      	adds	r0, r0, #1
    8c58:	b2c0      	uxtb	r0, r0
    8c5a:	bd10      	pop	{r4, pc}
    8c5c:	200002c0 	.word	0x200002c0
    8c60:	000108df 	.word	0x000108df

00008c64 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    8c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c68:	461c      	mov	r4, r3
    8c6a:	4690      	mov	r8, r2
    8c6c:	460d      	mov	r5, r1
    8c6e:	4606      	mov	r6, r0
    8c70:	f06f 0715 	mvn.w	r7, #21
    8c74:	2804      	cmp	r0, #4
    8c76:	d804      	bhi.n	8c82 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8c78:	b11c      	cbz	r4, 8c82 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8c7a:	f007 fb37 	bl	102ec <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x16>
    8c7e:	42a8      	cmp	r0, r5
    8c80:	d802      	bhi.n	8c88 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    8c82:	4638      	mov	r0, r7
    8c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8c88:	4805      	ldr	r0, [pc, #20]	; (8ca0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    8c8a:	4642      	mov	r2, r8
    8c8c:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    8c90:	b118      	cbz	r0, 8c9a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8c92:	5740      	ldrsb	r0, [r0, r5]
    8c94:	4282      	cmp	r2, r0
    8c96:	dd00      	ble.n	8c9a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8c98:	4602      	mov	r2, r0
    8c9a:	7022      	strb	r2, [r4, #0]
    8c9c:	2000      	movs	r0, #0
    8c9e:	e7f1      	b.n	8c84 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    8ca0:	20000fb8 	.word	0x20000fb8

00008ca4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    8ca4:	4801      	ldr	r0, [pc, #4]	; (8cac <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    8ca6:	7800      	ldrb	r0, [r0, #0]
    8ca8:	4770      	bx	lr
    8caa:	0000      	.short	0x0000
    8cac:	200002c8 	.word	0x200002c8

00008cb0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    8cb0:	4905      	ldr	r1, [pc, #20]	; (8cc8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    8cb2:	780a      	ldrb	r2, [r1, #0]
    8cb4:	4290      	cmp	r0, r2
    8cb6:	d301      	bcc.n	8cbc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    8cb8:	2000      	movs	r0, #0
    8cba:	4770      	bx	lr
    8cbc:	6849      	ldr	r1, [r1, #4]
    8cbe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8cc2:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    8cc6:	4770      	bx	lr
    8cc8:	200002c8 	.word	0x200002c8

00008ccc <MPSL_IRQ_RADIO_Handler>:
    8ccc:	490e      	ldr	r1, [pc, #56]	; (8d08 <MPSL_IRQ_RADIO_Handler+0x3c>)
    8cce:	b510      	push	{r4, lr}
    8cd0:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
    8cd4:	2820      	cmp	r0, #32
    8cd6:	d012      	beq.n	8cfe <MPSL_IRQ_RADIO_Handler+0x32>
    8cd8:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
    8cdc:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
    8ce0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    8ce4:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    8ce8:	f891 1032 	ldrb.w	r1, [r1, #50]	; 0x32
    8cec:	6840      	ldr	r0, [r0, #4]
    8cee:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    8cf2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    8cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8cfa:	2104      	movs	r1, #4
    8cfc:	4710      	bx	r2
    8cfe:	f640 01bc 	movw	r1, #2236	; 0x8bc
    8d02:	2070      	movs	r0, #112	; 0x70
    8d04:	f003 fb28 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8d08:	200013cc 	.word	0x200013cc
    8d0c:	b570      	push	{r4, r5, r6, lr}
    8d0e:	4605      	mov	r5, r0
    8d10:	2a20      	cmp	r2, #32
    8d12:	d028      	beq.n	8d66 <MPSL_IRQ_RADIO_Handler+0x9a>
    8d14:	4819      	ldr	r0, [pc, #100]	; (8d7c <MPSL_IRQ_RADIO_Handler+0xb0>)
    8d16:	4c1a      	ldr	r4, [pc, #104]	; (8d80 <MPSL_IRQ_RADIO_Handler+0xb4>)
    8d18:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    8d1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8d20:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    8d24:	4423      	add	r3, r4
    8d26:	2920      	cmp	r1, #32
    8d28:	d022      	beq.n	8d70 <MPSL_IRQ_RADIO_Handler+0xa4>
    8d2a:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    8d2e:	7840      	ldrb	r0, [r0, #1]
    8d30:	784c      	ldrb	r4, [r1, #1]
    8d32:	7048      	strb	r0, [r1, #1]
    8d34:	4620      	mov	r0, r4
    8d36:	4601      	mov	r1, r0
    8d38:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    8d3c:	4291      	cmp	r1, r2
    8d3e:	7005      	strb	r5, [r0, #0]
    8d40:	7840      	ldrb	r0, [r0, #1]
    8d42:	d1f8      	bne.n	8d36 <MPSL_IRQ_RADIO_Handler+0x6a>
    8d44:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    8d48:	2a20      	cmp	r2, #32
    8d4a:	bf1a      	itte	ne
    8d4c:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    8d50:	7054      	strbne	r4, [r2, #1]
    8d52:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    8d56:	2220      	movs	r2, #32
    8d58:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    8d5c:	f88c 2001 	strb.w	r2, [ip, #1]
    8d60:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    8d64:	bd70      	pop	{r4, r5, r6, pc}
    8d66:	f44f 7126 	mov.w	r1, #664	; 0x298
    8d6a:	2070      	movs	r0, #112	; 0x70
    8d6c:	f003 faf4 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8d70:	f893 4020 	ldrb.w	r4, [r3, #32]
    8d74:	7840      	ldrb	r0, [r0, #1]
    8d76:	f883 0020 	strb.w	r0, [r3, #32]
    8d7a:	e7db      	b.n	8d34 <MPSL_IRQ_RADIO_Handler+0x68>
    8d7c:	2000134c 	.word	0x2000134c
    8d80:	200013cc 	.word	0x200013cc
    8d84:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d88:	b08d      	sub	sp, #52	; 0x34
    8d8a:	4615      	mov	r5, r2
    8d8c:	460c      	mov	r4, r1
    8d8e:	f002 fa11 	bl	b1b4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    8d92:	4428      	add	r0, r5
    8d94:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8d98:	9008      	str	r0, [sp, #32]
    8d9a:	6821      	ldr	r1, [r4, #0]
    8d9c:	1a08      	subs	r0, r1, r0
    8d9e:	0200      	lsls	r0, r0, #8
    8da0:	17c1      	asrs	r1, r0, #31
    8da2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    8da6:	1200      	asrs	r0, r0, #8
    8da8:	2800      	cmp	r0, #0
    8daa:	f300 80f0 	bgt.w	8f8e <MPSL_IRQ_RADIO_Handler+0x2c2>
    8dae:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    8db2:	48cd      	ldr	r0, [pc, #820]	; (90e8 <MPSL_IRQ_RADIO_Handler+0x41c>)
    8db4:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    8db8:	4408      	add	r0, r1
    8dba:	9009      	str	r0, [sp, #36]	; 0x24
    8dbc:	f890 5020 	ldrb.w	r5, [r0, #32]
    8dc0:	2020      	movs	r0, #32
    8dc2:	4eca      	ldr	r6, [pc, #808]	; (90ec <MPSL_IRQ_RADIO_Handler+0x420>)
    8dc4:	f10d 0a18 	add.w	sl, sp, #24
    8dc8:	f10d 091c 	add.w	r9, sp, #28
    8dcc:	f88d 0018 	strb.w	r0, [sp, #24]
    8dd0:	2d20      	cmp	r5, #32
    8dd2:	bf1c      	itt	ne
    8dd4:	48c6      	ldrne	r0, [pc, #792]	; (90f0 <MPSL_IRQ_RADIO_Handler+0x424>)
    8dd6:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    8dda:	d038      	beq.n	8e4e <MPSL_IRQ_RADIO_Handler+0x182>
    8ddc:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    8de0:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    8de4:	f100 0108 	add.w	r1, r0, #8
    8de8:	68c0      	ldr	r0, [r0, #12]
    8dea:	6827      	ldr	r7, [r4, #0]
    8dec:	1a38      	subs	r0, r7, r0
    8dee:	0200      	lsls	r0, r0, #8
    8df0:	17c2      	asrs	r2, r0, #31
    8df2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8df6:	1200      	asrs	r0, r0, #8
    8df8:	d429      	bmi.n	8e4e <MPSL_IRQ_RADIO_Handler+0x182>
    8dfa:	89e0      	ldrh	r0, [r4, #14]
    8dfc:	b300      	cbz	r0, 8e40 <MPSL_IRQ_RADIO_Handler+0x174>
    8dfe:	89c8      	ldrh	r0, [r1, #14]
    8e00:	b9f0      	cbnz	r0, 8e40 <MPSL_IRQ_RADIO_Handler+0x174>
    8e02:	6808      	ldr	r0, [r1, #0]
    8e04:	9003      	str	r0, [sp, #12]
    8e06:	f003 f907 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8e0a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8e0e:	bf08      	it	eq
    8e10:	200d      	moveq	r0, #13
    8e12:	d00b      	beq.n	8e2c <MPSL_IRQ_RADIO_Handler+0x160>
    8e14:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8e18:	3856      	subs	r0, #86	; 0x56
    8e1a:	bf08      	it	eq
    8e1c:	201c      	moveq	r0, #28
    8e1e:	d005      	beq.n	8e2c <MPSL_IRQ_RADIO_Handler+0x160>
    8e20:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8e24:	389f      	subs	r0, #159	; 0x9f
    8e26:	bf14      	ite	ne
    8e28:	2000      	movne	r0, #0
    8e2a:	2032      	moveq	r0, #50	; 0x32
    8e2c:	1c41      	adds	r1, r0, #1
    8e2e:	9803      	ldr	r0, [sp, #12]
    8e30:	1a38      	subs	r0, r7, r0
    8e32:	0200      	lsls	r0, r0, #8
    8e34:	17c2      	asrs	r2, r0, #31
    8e36:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8e3a:	1200      	asrs	r0, r0, #8
    8e3c:	4288      	cmp	r0, r1
    8e3e:	db06      	blt.n	8e4e <MPSL_IRQ_RADIO_Handler+0x182>
    8e40:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    8e44:	f88a 5000 	strb.w	r5, [sl]
    8e48:	7845      	ldrb	r5, [r0, #1]
    8e4a:	2d20      	cmp	r5, #32
    8e4c:	d1c6      	bne.n	8ddc <MPSL_IRQ_RADIO_Handler+0x110>
    8e4e:	f89a 0000 	ldrb.w	r0, [sl]
    8e52:	f889 0000 	strb.w	r0, [r9]
    8e56:	2d20      	cmp	r5, #32
    8e58:	bf1c      	itt	ne
    8e5a:	48a5      	ldrne	r0, [pc, #660]	; (90f0 <MPSL_IRQ_RADIO_Handler+0x424>)
    8e5c:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    8e60:	f000 813e 	beq.w	90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    8e64:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    8e68:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    8e6c:	6861      	ldr	r1, [r4, #4]
    8e6e:	f8d7 8008 	ldr.w	r8, [r7, #8]
    8e72:	f107 0008 	add.w	r0, r7, #8
    8e76:	eba8 0101 	sub.w	r1, r8, r1
    8e7a:	0209      	lsls	r1, r1, #8
    8e7c:	17ca      	asrs	r2, r1, #31
    8e7e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    8e82:	1209      	asrs	r1, r1, #8
    8e84:	d427      	bmi.n	8ed6 <MPSL_IRQ_RADIO_Handler+0x20a>
    8e86:	89c0      	ldrh	r0, [r0, #14]
    8e88:	2800      	cmp	r0, #0
    8e8a:	f000 8129 	beq.w	90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    8e8e:	89e0      	ldrh	r0, [r4, #14]
    8e90:	2800      	cmp	r0, #0
    8e92:	f040 8125 	bne.w	90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    8e96:	f8d4 a000 	ldr.w	sl, [r4]
    8e9a:	f003 f8bd 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8e9e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8ea2:	bf08      	it	eq
    8ea4:	200d      	moveq	r0, #13
    8ea6:	d00b      	beq.n	8ec0 <MPSL_IRQ_RADIO_Handler+0x1f4>
    8ea8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8eac:	3856      	subs	r0, #86	; 0x56
    8eae:	bf08      	it	eq
    8eb0:	201c      	moveq	r0, #28
    8eb2:	d005      	beq.n	8ec0 <MPSL_IRQ_RADIO_Handler+0x1f4>
    8eb4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8eb8:	389f      	subs	r0, #159	; 0x9f
    8eba:	bf14      	ite	ne
    8ebc:	2000      	movne	r0, #0
    8ebe:	2032      	moveq	r0, #50	; 0x32
    8ec0:	1c41      	adds	r1, r0, #1
    8ec2:	eba8 000a 	sub.w	r0, r8, sl
    8ec6:	0200      	lsls	r0, r0, #8
    8ec8:	17c2      	asrs	r2, r0, #31
    8eca:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8ece:	1200      	asrs	r0, r0, #8
    8ed0:	4288      	cmp	r0, r1
    8ed2:	f280 8105 	bge.w	90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    8ed6:	f889 5000 	strb.w	r5, [r9]
    8eda:	7e38      	ldrb	r0, [r7, #24]
    8edc:	7c21      	ldrb	r1, [r4, #16]
    8ede:	4288      	cmp	r0, r1
    8ee0:	d906      	bls.n	8ef0 <MPSL_IRQ_RADIO_Handler+0x224>
    8ee2:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    8ee6:	7845      	ldrb	r5, [r0, #1]
    8ee8:	2d20      	cmp	r5, #32
    8eea:	d1bb      	bne.n	8e64 <MPSL_IRQ_RADIO_Handler+0x198>
    8eec:	f000 b8f8 	b.w	90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    8ef0:	f89d 001c 	ldrb.w	r0, [sp, #28]
    8ef4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    8ef8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    8efc:	8ac1      	ldrh	r1, [r0, #22]
    8efe:	68c5      	ldr	r5, [r0, #12]
    8f00:	bbe1      	cbnz	r1, 8f7c <MPSL_IRQ_RADIO_Handler+0x2b0>
    8f02:	89e1      	ldrh	r1, [r4, #14]
    8f04:	b3d1      	cbz	r1, 8f7c <MPSL_IRQ_RADIO_Handler+0x2b0>
    8f06:	6887      	ldr	r7, [r0, #8]
    8f08:	f003 f886 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8f0c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8f10:	bf08      	it	eq
    8f12:	200d      	moveq	r0, #13
    8f14:	d00b      	beq.n	8f2e <MPSL_IRQ_RADIO_Handler+0x262>
    8f16:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8f1a:	3856      	subs	r0, #86	; 0x56
    8f1c:	bf08      	it	eq
    8f1e:	201c      	moveq	r0, #28
    8f20:	d005      	beq.n	8f2e <MPSL_IRQ_RADIO_Handler+0x262>
    8f22:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8f26:	389f      	subs	r0, #159	; 0x9f
    8f28:	bf14      	ite	ne
    8f2a:	2000      	movne	r0, #0
    8f2c:	2032      	moveq	r0, #50	; 0x32
    8f2e:	1c41      	adds	r1, r0, #1
    8f30:	1be8      	subs	r0, r5, r7
    8f32:	0200      	lsls	r0, r0, #8
    8f34:	17c2      	asrs	r2, r0, #31
    8f36:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8f3a:	1200      	asrs	r0, r0, #8
    8f3c:	4288      	cmp	r0, r1
    8f3e:	da1d      	bge.n	8f7c <MPSL_IRQ_RADIO_Handler+0x2b0>
    8f40:	f003 f86a 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8f44:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8f48:	bf08      	it	eq
    8f4a:	200d      	moveq	r0, #13
    8f4c:	d00b      	beq.n	8f66 <MPSL_IRQ_RADIO_Handler+0x29a>
    8f4e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8f52:	3856      	subs	r0, #86	; 0x56
    8f54:	bf08      	it	eq
    8f56:	201c      	moveq	r0, #28
    8f58:	d005      	beq.n	8f66 <MPSL_IRQ_RADIO_Handler+0x29a>
    8f5a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8f5e:	389f      	subs	r0, #159	; 0x9f
    8f60:	bf14      	ite	ne
    8f62:	2000      	movne	r0, #0
    8f64:	2032      	moveq	r0, #50	; 0x32
    8f66:	f89d 101c 	ldrb.w	r1, [sp, #28]
    8f6a:	1c40      	adds	r0, r0, #1
    8f6c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    8f70:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    8f74:	6889      	ldr	r1, [r1, #8]
    8f76:	4408      	add	r0, r1
    8f78:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    8f7c:	9808      	ldr	r0, [sp, #32]
    8f7e:	1a28      	subs	r0, r5, r0
    8f80:	0200      	lsls	r0, r0, #8
    8f82:	17c1      	asrs	r1, r0, #31
    8f84:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    8f88:	1200      	asrs	r0, r0, #8
    8f8a:	2800      	cmp	r0, #0
    8f8c:	dd03      	ble.n	8f96 <MPSL_IRQ_RADIO_Handler+0x2ca>
    8f8e:	b011      	add	sp, #68	; 0x44
    8f90:	2000      	movs	r0, #0
    8f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8f96:	6820      	ldr	r0, [r4, #0]
    8f98:	42a8      	cmp	r0, r5
    8f9a:	d902      	bls.n	8fa2 <MPSL_IRQ_RADIO_Handler+0x2d6>
    8f9c:	68a1      	ldr	r1, [r4, #8]
    8f9e:	1c49      	adds	r1, r1, #1
    8fa0:	60a1      	str	r1, [r4, #8]
    8fa2:	6861      	ldr	r1, [r4, #4]
    8fa4:	f10d 0a18 	add.w	sl, sp, #24
    8fa8:	1a08      	subs	r0, r1, r0
    8faa:	4428      	add	r0, r5
    8fac:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
    8fb0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8fb4:	e9c4 1000 	strd	r1, r0, [r4]
    8fb8:	9810      	ldr	r0, [sp, #64]	; 0x40
    8fba:	900b      	str	r0, [sp, #44]	; 0x2c
    8fbc:	9809      	ldr	r0, [sp, #36]	; 0x24
    8fbe:	f10d 081c 	add.w	r8, sp, #28
    8fc2:	f890 5020 	ldrb.w	r5, [r0, #32]
    8fc6:	2020      	movs	r0, #32
    8fc8:	f88d 0018 	strb.w	r0, [sp, #24]
    8fcc:	2d20      	cmp	r5, #32
    8fce:	d03c      	beq.n	904a <MPSL_IRQ_RADIO_Handler+0x37e>
    8fd0:	4947      	ldr	r1, [pc, #284]	; (90f0 <MPSL_IRQ_RADIO_Handler+0x424>)
    8fd2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8fd4:	eb01 1b80 	add.w	fp, r1, r0, lsl #6
    8fd8:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    8fdc:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    8fe0:	f100 0108 	add.w	r1, r0, #8
    8fe4:	68c0      	ldr	r0, [r0, #12]
    8fe6:	6827      	ldr	r7, [r4, #0]
    8fe8:	1a38      	subs	r0, r7, r0
    8fea:	0200      	lsls	r0, r0, #8
    8fec:	17c2      	asrs	r2, r0, #31
    8fee:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8ff2:	1200      	asrs	r0, r0, #8
    8ff4:	d429      	bmi.n	904a <MPSL_IRQ_RADIO_Handler+0x37e>
    8ff6:	89e0      	ldrh	r0, [r4, #14]
    8ff8:	b300      	cbz	r0, 903c <MPSL_IRQ_RADIO_Handler+0x370>
    8ffa:	89c8      	ldrh	r0, [r1, #14]
    8ffc:	b9f0      	cbnz	r0, 903c <MPSL_IRQ_RADIO_Handler+0x370>
    8ffe:	f8d1 9000 	ldr.w	r9, [r1]
    9002:	f003 f809 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9006:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    900a:	bf08      	it	eq
    900c:	200d      	moveq	r0, #13
    900e:	d00b      	beq.n	9028 <MPSL_IRQ_RADIO_Handler+0x35c>
    9010:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9014:	3856      	subs	r0, #86	; 0x56
    9016:	bf08      	it	eq
    9018:	201c      	moveq	r0, #28
    901a:	d005      	beq.n	9028 <MPSL_IRQ_RADIO_Handler+0x35c>
    901c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9020:	389f      	subs	r0, #159	; 0x9f
    9022:	bf14      	ite	ne
    9024:	2000      	movne	r0, #0
    9026:	2032      	moveq	r0, #50	; 0x32
    9028:	1c41      	adds	r1, r0, #1
    902a:	eba7 0009 	sub.w	r0, r7, r9
    902e:	0200      	lsls	r0, r0, #8
    9030:	17c2      	asrs	r2, r0, #31
    9032:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    9036:	1200      	asrs	r0, r0, #8
    9038:	4288      	cmp	r0, r1
    903a:	db06      	blt.n	904a <MPSL_IRQ_RADIO_Handler+0x37e>
    903c:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    9040:	f88a 5000 	strb.w	r5, [sl]
    9044:	7845      	ldrb	r5, [r0, #1]
    9046:	2d20      	cmp	r5, #32
    9048:	d1c6      	bne.n	8fd8 <MPSL_IRQ_RADIO_Handler+0x30c>
    904a:	f89a 0000 	ldrb.w	r0, [sl]
    904e:	f888 0000 	strb.w	r0, [r8]
    9052:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9054:	2d20      	cmp	r5, #32
    9056:	bf1c      	itt	ne
    9058:	4925      	ldrne	r1, [pc, #148]	; (90f0 <MPSL_IRQ_RADIO_Handler+0x424>)
    905a:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    905e:	d03f      	beq.n	90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    9060:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    9064:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    9068:	6860      	ldr	r0, [r4, #4]
    906a:	f8d7 9008 	ldr.w	r9, [r7, #8]
    906e:	f107 0108 	add.w	r1, r7, #8
    9072:	eba9 0000 	sub.w	r0, r9, r0
    9076:	0200      	lsls	r0, r0, #8
    9078:	17c2      	asrs	r2, r0, #31
    907a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    907e:	1200      	asrs	r0, r0, #8
    9080:	d422      	bmi.n	90c8 <MPSL_IRQ_RADIO_Handler+0x3fc>
    9082:	89c8      	ldrh	r0, [r1, #14]
    9084:	b360      	cbz	r0, 90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    9086:	89e0      	ldrh	r0, [r4, #14]
    9088:	bb50      	cbnz	r0, 90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    908a:	f8d4 a000 	ldr.w	sl, [r4]
    908e:	f002 ffc3 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9092:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9096:	bf08      	it	eq
    9098:	200d      	moveq	r0, #13
    909a:	d00b      	beq.n	90b4 <MPSL_IRQ_RADIO_Handler+0x3e8>
    909c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    90a0:	3856      	subs	r0, #86	; 0x56
    90a2:	bf08      	it	eq
    90a4:	201c      	moveq	r0, #28
    90a6:	d005      	beq.n	90b4 <MPSL_IRQ_RADIO_Handler+0x3e8>
    90a8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    90ac:	389f      	subs	r0, #159	; 0x9f
    90ae:	bf14      	ite	ne
    90b0:	2000      	movne	r0, #0
    90b2:	2032      	moveq	r0, #50	; 0x32
    90b4:	1c41      	adds	r1, r0, #1
    90b6:	eba9 000a 	sub.w	r0, r9, sl
    90ba:	0200      	lsls	r0, r0, #8
    90bc:	17c2      	asrs	r2, r0, #31
    90be:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    90c2:	1200      	asrs	r0, r0, #8
    90c4:	4288      	cmp	r0, r1
    90c6:	da0b      	bge.n	90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    90c8:	f888 5000 	strb.w	r5, [r8]
    90cc:	7e38      	ldrb	r0, [r7, #24]
    90ce:	7c21      	ldrb	r1, [r4, #16]
    90d0:	4288      	cmp	r0, r1
    90d2:	f67f af0d 	bls.w	8ef0 <MPSL_IRQ_RADIO_Handler+0x224>
    90d6:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    90da:	7845      	ldrb	r5, [r0, #1]
    90dc:	2d20      	cmp	r5, #32
    90de:	d1bf      	bne.n	9060 <MPSL_IRQ_RADIO_Handler+0x394>
    90e0:	b011      	add	sp, #68	; 0x44
    90e2:	2001      	movs	r0, #1
    90e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    90e8:	200013cc 	.word	0x200013cc
    90ec:	20000fcc 	.word	0x20000fcc
    90f0:	2000134c 	.word	0x2000134c
    90f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    90f8:	460f      	mov	r7, r1
    90fa:	4606      	mov	r6, r0
    90fc:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    9100:	494b      	ldr	r1, [pc, #300]	; (9230 <MPSL_IRQ_RADIO_Handler+0x564>)
    9102:	4699      	mov	r9, r3
    9104:	4408      	add	r0, r1
    9106:	4692      	mov	sl, r2
    9108:	f890 4020 	ldrb.w	r4, [r0, #32]
    910c:	2020      	movs	r0, #32
    910e:	7010      	strb	r0, [r2, #0]
    9110:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
    9114:	2c20      	cmp	r4, #32
    9116:	bf1c      	itt	ne
    9118:	4846      	ldrne	r0, [pc, #280]	; (9234 <MPSL_IRQ_RADIO_Handler+0x568>)
    911a:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    911e:	d038      	beq.n	9192 <MPSL_IRQ_RADIO_Handler+0x4c6>
    9120:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    9124:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    9128:	f100 0108 	add.w	r1, r0, #8
    912c:	68c0      	ldr	r0, [r0, #12]
    912e:	6835      	ldr	r5, [r6, #0]
    9130:	1a28      	subs	r0, r5, r0
    9132:	0200      	lsls	r0, r0, #8
    9134:	17c2      	asrs	r2, r0, #31
    9136:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    913a:	1200      	asrs	r0, r0, #8
    913c:	d429      	bmi.n	9192 <MPSL_IRQ_RADIO_Handler+0x4c6>
    913e:	89f0      	ldrh	r0, [r6, #14]
    9140:	b300      	cbz	r0, 9184 <MPSL_IRQ_RADIO_Handler+0x4b8>
    9142:	89c8      	ldrh	r0, [r1, #14]
    9144:	b9f0      	cbnz	r0, 9184 <MPSL_IRQ_RADIO_Handler+0x4b8>
    9146:	6808      	ldr	r0, [r1, #0]
    9148:	9000      	str	r0, [sp, #0]
    914a:	f002 ff65 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    914e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9152:	bf08      	it	eq
    9154:	200d      	moveq	r0, #13
    9156:	d00b      	beq.n	9170 <MPSL_IRQ_RADIO_Handler+0x4a4>
    9158:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    915c:	3856      	subs	r0, #86	; 0x56
    915e:	bf08      	it	eq
    9160:	201c      	moveq	r0, #28
    9162:	d005      	beq.n	9170 <MPSL_IRQ_RADIO_Handler+0x4a4>
    9164:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9168:	389f      	subs	r0, #159	; 0x9f
    916a:	bf14      	ite	ne
    916c:	2000      	movne	r0, #0
    916e:	2032      	moveq	r0, #50	; 0x32
    9170:	1c41      	adds	r1, r0, #1
    9172:	9800      	ldr	r0, [sp, #0]
    9174:	1a28      	subs	r0, r5, r0
    9176:	0200      	lsls	r0, r0, #8
    9178:	17c2      	asrs	r2, r0, #31
    917a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    917e:	1200      	asrs	r0, r0, #8
    9180:	4288      	cmp	r0, r1
    9182:	db06      	blt.n	9192 <MPSL_IRQ_RADIO_Handler+0x4c6>
    9184:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    9188:	f88a 4000 	strb.w	r4, [sl]
    918c:	7844      	ldrb	r4, [r0, #1]
    918e:	2c20      	cmp	r4, #32
    9190:	d1c6      	bne.n	9120 <MPSL_IRQ_RADIO_Handler+0x454>
    9192:	f89a 0000 	ldrb.w	r0, [sl]
    9196:	f889 0000 	strb.w	r0, [r9]
    919a:	2c20      	cmp	r4, #32
    919c:	bf1c      	itt	ne
    919e:	4825      	ldrne	r0, [pc, #148]	; (9234 <MPSL_IRQ_RADIO_Handler+0x568>)
    91a0:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
    91a4:	d040      	beq.n	9228 <MPSL_IRQ_RADIO_Handler+0x55c>
    91a6:	bf00      	nop
    91a8:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    91ac:	eb08 0780 	add.w	r7, r8, r0, lsl #2
    91b0:	6870      	ldr	r0, [r6, #4]
    91b2:	68bd      	ldr	r5, [r7, #8]
    91b4:	f107 0108 	add.w	r1, r7, #8
    91b8:	1a28      	subs	r0, r5, r0
    91ba:	0200      	lsls	r0, r0, #8
    91bc:	17c2      	asrs	r2, r0, #31
    91be:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    91c2:	1200      	asrs	r0, r0, #8
    91c4:	d422      	bmi.n	920c <MPSL_IRQ_RADIO_Handler+0x540>
    91c6:	89c8      	ldrh	r0, [r1, #14]
    91c8:	b370      	cbz	r0, 9228 <MPSL_IRQ_RADIO_Handler+0x55c>
    91ca:	89f0      	ldrh	r0, [r6, #14]
    91cc:	bb60      	cbnz	r0, 9228 <MPSL_IRQ_RADIO_Handler+0x55c>
    91ce:	f8d6 b000 	ldr.w	fp, [r6]
    91d2:	f002 ff21 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    91d6:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    91da:	bf08      	it	eq
    91dc:	200d      	moveq	r0, #13
    91de:	d00b      	beq.n	91f8 <MPSL_IRQ_RADIO_Handler+0x52c>
    91e0:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    91e4:	3856      	subs	r0, #86	; 0x56
    91e6:	bf08      	it	eq
    91e8:	201c      	moveq	r0, #28
    91ea:	d005      	beq.n	91f8 <MPSL_IRQ_RADIO_Handler+0x52c>
    91ec:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    91f0:	389f      	subs	r0, #159	; 0x9f
    91f2:	bf14      	ite	ne
    91f4:	2000      	movne	r0, #0
    91f6:	2032      	moveq	r0, #50	; 0x32
    91f8:	1c41      	adds	r1, r0, #1
    91fa:	eba5 000b 	sub.w	r0, r5, fp
    91fe:	0200      	lsls	r0, r0, #8
    9200:	17c2      	asrs	r2, r0, #31
    9202:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    9206:	1200      	asrs	r0, r0, #8
    9208:	4288      	cmp	r0, r1
    920a:	da0d      	bge.n	9228 <MPSL_IRQ_RADIO_Handler+0x55c>
    920c:	f889 4000 	strb.w	r4, [r9]
    9210:	7e38      	ldrb	r0, [r7, #24]
    9212:	7c31      	ldrb	r1, [r6, #16]
    9214:	4288      	cmp	r0, r1
    9216:	d802      	bhi.n	921e <MPSL_IRQ_RADIO_Handler+0x552>
    9218:	2000      	movs	r0, #0
    921a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    921e:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
    9222:	7844      	ldrb	r4, [r0, #1]
    9224:	2c20      	cmp	r4, #32
    9226:	d1bf      	bne.n	91a8 <MPSL_IRQ_RADIO_Handler+0x4dc>
    9228:	2001      	movs	r0, #1
    922a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    922e:	0000      	.short	0x0000
    9230:	200013cc 	.word	0x200013cc
    9234:	2000134c 	.word	0x2000134c
    9238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    923c:	b098      	sub	sp, #96	; 0x60
    923e:	4615      	mov	r5, r2
    9240:	f002 fa7a 	bl	b738 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    9244:	4604      	mov	r4, r0
    9246:	f002 fd0f 	bl	bc68 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    924a:	4606      	mov	r6, r0
    924c:	9819      	ldr	r0, [sp, #100]	; 0x64
    924e:	2801      	cmp	r0, #1
    9250:	bf18      	it	ne
    9252:	2802      	cmpne	r0, #2
    9254:	d005      	beq.n	9262 <MPSL_IRQ_RADIO_Handler+0x596>
    9256:	f640 1192 	movw	r1, #2450	; 0x992
    925a:	f04f 0070 	mov.w	r0, #112	; 0x70
    925e:	f003 f87b 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9262:	49fa      	ldr	r1, [pc, #1000]	; (964c <MPSL_IRQ_RADIO_Handler+0x980>)
    9264:	2001      	movs	r0, #1
    9266:	6008      	str	r0, [r1, #0]
    9268:	49f9      	ldr	r1, [pc, #996]	; (9650 <MPSL_IRQ_RADIO_Handler+0x984>)
    926a:	6889      	ldr	r1, [r1, #8]
    926c:	6008      	str	r0, [r1, #0]
    926e:	2000      	movs	r0, #0
    9270:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    9274:	900a      	str	r0, [sp, #40]	; 0x28
    9276:	1e40      	subs	r0, r0, #1
    9278:	900b      	str	r0, [sp, #44]	; 0x2c
    927a:	49f6      	ldr	r1, [pc, #984]	; (9654 <MPSL_IRQ_RADIO_Handler+0x988>)
    927c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    9280:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    9284:	e9d1 0302 	ldrd	r0, r3, [r1, #8]
    9288:	e9d1 c204 	ldrd	ip, r2, [r1, #16]
    928c:	e9cd 030c 	strd	r0, r3, [sp, #48]	; 0x30
    9290:	e9cd c20e 	strd	ip, r2, [sp, #56]	; 0x38
    9294:	6989      	ldr	r1, [r1, #24]
    9296:	9110      	str	r1, [sp, #64]	; 0x40
    9298:	f007 f856 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    929c:	4602      	mov	r2, r0
    929e:	f8bd 803e 	ldrh.w	r8, [sp, #62]	; 0x3e
    92a2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    92a6:	4bec      	ldr	r3, [pc, #944]	; (9658 <MPSL_IRQ_RADIO_Handler+0x98c>)
    92a8:	4440      	add	r0, r8
    92aa:	1c41      	adds	r1, r0, #1
    92ac:	1850      	adds	r0, r2, r1
    92ae:	429a      	cmp	r2, r3
    92b0:	d854      	bhi.n	935c <MPSL_IRQ_RADIO_Handler+0x690>
    92b2:	4dea      	ldr	r5, [pc, #936]	; (965c <MPSL_IRQ_RADIO_Handler+0x990>)
    92b4:	42a9      	cmp	r1, r5
    92b6:	dc58      	bgt.n	936a <MPSL_IRQ_RADIO_Handler+0x69e>
    92b8:	426a      	negs	r2, r5
    92ba:	4291      	cmp	r1, r2
    92bc:	db5d      	blt.n	937a <MPSL_IRQ_RADIO_Handler+0x6ae>
    92be:	1c59      	adds	r1, r3, #1
    92c0:	4281      	cmp	r1, r0
    92c2:	bfdc      	itt	le
    92c4:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    92c8:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    92cc:	dd05      	ble.n	92da <MPSL_IRQ_RADIO_Handler+0x60e>
    92ce:	2800      	cmp	r0, #0
    92d0:	bfbc      	itt	lt
    92d2:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    92d6:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    92da:	9014      	str	r0, [sp, #80]	; 0x50
    92dc:	48e0      	ldr	r0, [pc, #896]	; (9660 <MPSL_IRQ_RADIO_Handler+0x994>)
    92de:	f1b8 0f00 	cmp.w	r8, #0
    92e2:	8b80      	ldrh	r0, [r0, #28]
    92e4:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
    92e8:	bf14      	ite	ne
    92ea:	f04f 0a01 	movne.w	sl, #1
    92ee:	f04f 0a00 	moveq.w	sl, #0
    92f2:	f002 ffb9 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    92f6:	9016      	str	r0, [sp, #88]	; 0x58
    92f8:	f1ba 0f00 	cmp.w	sl, #0
    92fc:	d008      	beq.n	9310 <MPSL_IRQ_RADIO_Handler+0x644>
    92fe:	48d8      	ldr	r0, [pc, #864]	; (9660 <MPSL_IRQ_RADIO_Handler+0x994>)
    9300:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    9302:	f1b0 3fff 	cmp.w	r0, #4294967295
    9306:	bf02      	ittt	eq
    9308:	9816      	ldreq	r0, [sp, #88]	; 0x58
    930a:	2800      	cmpeq	r0, #0
    930c:	2701      	moveq	r7, #1
    930e:	d001      	beq.n	9314 <MPSL_IRQ_RADIO_Handler+0x648>
    9310:	f04f 0700 	mov.w	r7, #0
    9314:	f002 fe80 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9318:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    931c:	bf08      	it	eq
    931e:	200d      	moveq	r0, #13
    9320:	d00b      	beq.n	933a <MPSL_IRQ_RADIO_Handler+0x66e>
    9322:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9326:	3856      	subs	r0, #86	; 0x56
    9328:	bf08      	it	eq
    932a:	201c      	moveq	r0, #28
    932c:	d005      	beq.n	933a <MPSL_IRQ_RADIO_Handler+0x66e>
    932e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9332:	389f      	subs	r0, #159	; 0x9f
    9334:	bf14      	ite	ne
    9336:	2000      	movne	r0, #0
    9338:	2032      	moveq	r0, #50	; 0x32
    933a:	f04f 0900 	mov.w	r9, #0
    933e:	46cb      	mov	fp, r9
    9340:	9013      	str	r0, [sp, #76]	; 0x4c
    9342:	4546      	cmp	r6, r8
    9344:	d936      	bls.n	93b4 <MPSL_IRQ_RADIO_Handler+0x6e8>
    9346:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9348:	f8df 930c 	ldr.w	r9, [pc, #780]	; 9658 <MPSL_IRQ_RADIO_Handler+0x98c>
    934c:	ea6f 0c06 	mvn.w	ip, r6
    9350:	4669      	mov	r1, sp
    9352:	aa17      	add	r2, sp, #92	; 0x5c
    9354:	eb03 000c 	add.w	r0, r3, ip
    9358:	454b      	cmp	r3, r9
    935a:	d904      	bls.n	9366 <MPSL_IRQ_RADIO_Handler+0x69a>
    935c:	f240 519e 	movw	r1, #1438	; 0x59e
    9360:	2070      	movs	r0, #112	; 0x70
    9362:	f002 fff9 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9366:	45ac      	cmp	ip, r5
    9368:	dd04      	ble.n	9374 <MPSL_IRQ_RADIO_Handler+0x6a8>
    936a:	f240 519f 	movw	r1, #1439	; 0x59f
    936e:	2070      	movs	r0, #112	; 0x70
    9370:	f002 fff2 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9374:	4bbb      	ldr	r3, [pc, #748]	; (9664 <MPSL_IRQ_RADIO_Handler+0x998>)
    9376:	459c      	cmp	ip, r3
    9378:	da04      	bge.n	9384 <MPSL_IRQ_RADIO_Handler+0x6b8>
    937a:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    937e:	2070      	movs	r0, #112	; 0x70
    9380:	f002 ffea 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9384:	4bb8      	ldr	r3, [pc, #736]	; (9668 <MPSL_IRQ_RADIO_Handler+0x99c>)
    9386:	4283      	cmp	r3, r0
    9388:	bfdc      	itt	le
    938a:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    938e:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    9392:	dd05      	ble.n	93a0 <MPSL_IRQ_RADIO_Handler+0x6d4>
    9394:	2800      	cmp	r0, #0
    9396:	bfbc      	itt	lt
    9398:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    939c:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    93a0:	f001 ff24 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    93a4:	9800      	ldr	r0, [sp, #0]
    93a6:	990c      	ldr	r1, [sp, #48]	; 0x30
    93a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    93ac:	9000      	str	r0, [sp, #0]
    93ae:	1a08      	subs	r0, r1, r0
    93b0:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    93b4:	2f00      	cmp	r7, #0
    93b6:	bf18      	it	ne
    93b8:	f8dd b04c 	ldrne.w	fp, [sp, #76]	; 0x4c
    93bc:	d105      	bne.n	93ca <MPSL_IRQ_RADIO_Handler+0x6fe>
    93be:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    93c2:	2800      	cmp	r0, #0
    93c4:	bf18      	it	ne
    93c6:	f04f 0b02 	movne.w	fp, #2
    93ca:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    93ce:	d008      	beq.n	93e2 <MPSL_IRQ_RADIO_Handler+0x716>
    93d0:	980c      	ldr	r0, [sp, #48]	; 0x30
    93d2:	1b00      	subs	r0, r0, r4
    93d4:	0200      	lsls	r0, r0, #8
    93d6:	17c1      	asrs	r1, r0, #31
    93d8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    93dc:	1200      	asrs	r0, r0, #8
    93de:	2801      	cmp	r0, #1
    93e0:	da02      	bge.n	93e8 <MPSL_IRQ_RADIO_Handler+0x71c>
    93e2:	2003      	movs	r0, #3
    93e4:	9d18      	ldr	r5, [sp, #96]	; 0x60
    93e6:	e00d      	b.n	9404 <MPSL_IRQ_RADIO_Handler+0x738>
    93e8:	b157      	cbz	r7, 9400 <MPSL_IRQ_RADIO_Handler+0x734>
    93ea:	489d      	ldr	r0, [pc, #628]	; (9660 <MPSL_IRQ_RADIO_Handler+0x994>)
    93ec:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    93f0:	b130      	cbz	r0, 9400 <MPSL_IRQ_RADIO_Handler+0x734>
    93f2:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    93f6:	f110 0b00 	adds.w	fp, r0, #0
    93fa:	bf18      	it	ne
    93fc:	f04f 0b02 	movne.w	fp, #2
    9400:	4625      	mov	r5, r4
    9402:	2000      	movs	r0, #0
    9404:	4483      	add	fp, r0
    9406:	980c      	ldr	r0, [sp, #48]	; 0x30
    9408:	eba0 0009 	sub.w	r0, r0, r9
    940c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9410:	1e48      	subs	r0, r1, #1
    9412:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9416:	1b42      	subs	r2, r0, r5
    9418:	0212      	lsls	r2, r2, #8
    941a:	17d3      	asrs	r3, r2, #31
    941c:	eb02 6213 	add.w	r2, r2, r3, lsr #24
    9420:	1212      	asrs	r2, r2, #8
    9422:	455a      	cmp	r2, fp
    9424:	db04      	blt.n	9430 <MPSL_IRQ_RADIO_Handler+0x764>
    9426:	f1b9 0f00 	cmp.w	r9, #0
    942a:	bf18      	it	ne
    942c:	910c      	strne	r1, [sp, #48]	; 0x30
    942e:	e02d      	b.n	948c <MPSL_IRQ_RADIO_Handler+0x7c0>
    9430:	f1b9 0f00 	cmp.w	r9, #0
    9434:	d005      	beq.n	9442 <MPSL_IRQ_RADIO_Handler+0x776>
    9436:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
    943a:	b920      	cbnz	r0, 9446 <MPSL_IRQ_RADIO_Handler+0x77a>
    943c:	f002 fc0a 	bl	bc54 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    9440:	b108      	cbz	r0, 9446 <MPSL_IRQ_RADIO_Handler+0x77a>
    9442:	b9af      	cbnz	r7, 9470 <MPSL_IRQ_RADIO_Handler+0x7a4>
    9444:	e00c      	b.n	9460 <MPSL_IRQ_RADIO_Handler+0x794>
    9446:	b92f      	cbnz	r7, 9454 <MPSL_IRQ_RADIO_Handler+0x788>
    9448:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    944c:	2800      	cmp	r0, #0
    944e:	bf18      	it	ne
    9450:	f1ab 0b02 	subne.w	fp, fp, #2
    9454:	f04f 0900 	mov.w	r9, #0
    9458:	f88d 9044 	strb.w	r9, [sp, #68]	; 0x44
    945c:	464e      	mov	r6, r9
    945e:	e007      	b.n	9470 <MPSL_IRQ_RADIO_Handler+0x7a4>
    9460:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    9464:	b120      	cbz	r0, 9470 <MPSL_IRQ_RADIO_Handler+0x7a4>
    9466:	2000      	movs	r0, #0
    9468:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    946c:	f1ab 0b02 	sub.w	fp, fp, #2
    9470:	980c      	ldr	r0, [sp, #48]	; 0x30
    9472:	eba0 0109 	sub.w	r1, r0, r9
    9476:	1e48      	subs	r0, r1, #1
    9478:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    947c:	1b42      	subs	r2, r0, r5
    947e:	0212      	lsls	r2, r2, #8
    9480:	17d3      	asrs	r3, r2, #31
    9482:	eb02 6213 	add.w	r2, r2, r3, lsr #24
    9486:	1212      	asrs	r2, r2, #8
    9488:	455a      	cmp	r2, fp
    948a:	db7d      	blt.n	9588 <MPSL_IRQ_RADIO_Handler+0x8bc>
    948c:	4a74      	ldr	r2, [pc, #464]	; (9660 <MPSL_IRQ_RADIO_Handler+0x994>)
    948e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    9490:	1a89      	subs	r1, r1, r2
    9492:	0209      	lsls	r1, r1, #8
    9494:	17cb      	asrs	r3, r1, #31
    9496:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    949a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    949c:	1209      	asrs	r1, r1, #8
    949e:	b93b      	cbnz	r3, 94b0 <MPSL_IRQ_RADIO_Handler+0x7e4>
    94a0:	f1b2 3fff 	cmp.w	r2, #4294967295
    94a4:	bf1c      	itt	ne
    94a6:	9a13      	ldrne	r2, [sp, #76]	; 0x4c
    94a8:	4291      	cmpne	r1, r2
    94aa:	bfb8      	it	lt
    94ac:	2100      	movlt	r1, #0
    94ae:	db00      	blt.n	94b2 <MPSL_IRQ_RADIO_Handler+0x7e6>
    94b0:	2101      	movs	r1, #1
    94b2:	ea3a 0101 	bics.w	r1, sl, r1
    94b6:	d167      	bne.n	9588 <MPSL_IRQ_RADIO_Handler+0x8bc>
    94b8:	9919      	ldr	r1, [sp, #100]	; 0x64
    94ba:	4605      	mov	r5, r0
    94bc:	f04f 0900 	mov.w	r9, #0
    94c0:	9105      	str	r1, [sp, #20]
    94c2:	f001 fffd 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    94c6:	1a28      	subs	r0, r5, r0
    94c8:	0200      	lsls	r0, r0, #8
    94ca:	17c1      	asrs	r1, r0, #31
    94cc:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    94d0:	ea4f 2b20 	mov.w	fp, r0, asr #8
    94d4:	f002 fda0 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    94d8:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    94dc:	bf08      	it	eq
    94de:	200d      	moveq	r0, #13
    94e0:	d00b      	beq.n	94fa <MPSL_IRQ_RADIO_Handler+0x82e>
    94e2:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    94e6:	3856      	subs	r0, #86	; 0x56
    94e8:	bf08      	it	eq
    94ea:	201c      	moveq	r0, #28
    94ec:	d005      	beq.n	94fa <MPSL_IRQ_RADIO_Handler+0x82e>
    94ee:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    94f2:	389f      	subs	r0, #159	; 0x9f
    94f4:	bf14      	ite	ne
    94f6:	2000      	movne	r0, #0
    94f8:	2032      	moveq	r0, #50	; 0x32
    94fa:	300b      	adds	r0, #11
    94fc:	4558      	cmp	r0, fp
    94fe:	dd1f      	ble.n	9540 <MPSL_IRQ_RADIO_Handler+0x874>
    9500:	9805      	ldr	r0, [sp, #20]
    9502:	2801      	cmp	r0, #1
    9504:	d001      	beq.n	950a <MPSL_IRQ_RADIO_Handler+0x83e>
    9506:	b147      	cbz	r7, 951a <MPSL_IRQ_RADIO_Handler+0x84e>
    9508:	e012      	b.n	9530 <MPSL_IRQ_RADIO_Handler+0x864>
    950a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    950e:	d11c      	bne.n	954a <MPSL_IRQ_RADIO_Handler+0x87e>
    9510:	f640 1113 	movw	r1, #2323	; 0x913
    9514:	2070      	movs	r0, #112	; 0x70
    9516:	f002 ff1f 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    951a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    951e:	d007      	beq.n	9530 <MPSL_IRQ_RADIO_Handler+0x864>
    9520:	1b60      	subs	r0, r4, r5
    9522:	0200      	lsls	r0, r0, #8
    9524:	17c1      	asrs	r1, r0, #31
    9526:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    952a:	1200      	asrs	r0, r0, #8
    952c:	2804      	cmp	r0, #4
    952e:	dd04      	ble.n	953a <MPSL_IRQ_RADIO_Handler+0x86e>
    9530:	462c      	mov	r4, r5
    9532:	4620      	mov	r0, r4
    9534:	f001 ffea 	bl	b50c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    9538:	e007      	b.n	954a <MPSL_IRQ_RADIO_Handler+0x87e>
    953a:	2800      	cmp	r0, #0
    953c:	dc63      	bgt.n	9606 <MPSL_IRQ_RADIO_Handler+0x93a>
    953e:	e004      	b.n	954a <MPSL_IRQ_RADIO_Handler+0x87e>
    9540:	462c      	mov	r4, r5
    9542:	4620      	mov	r0, r4
    9544:	f001 ffe2 	bl	b50c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    9548:	46d1      	mov	r9, sl
    954a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    954e:	d055      	beq.n	95fc <MPSL_IRQ_RADIO_Handler+0x930>
    9550:	980c      	ldr	r0, [sp, #48]	; 0x30
    9552:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9554:	1b00      	subs	r0, r0, r4
    9556:	1b12      	subs	r2, r2, r4
    9558:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    955c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9560:	2801      	cmp	r0, #1
    9562:	d350      	bcc.n	9606 <MPSL_IRQ_RADIO_Handler+0x93a>
    9564:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    9568:	bf98      	it	ls
    956a:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    956e:	d84a      	bhi.n	9606 <MPSL_IRQ_RADIO_Handler+0x93a>
    9570:	4620      	mov	r0, r4
    9572:	f006 fee9 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9576:	9914      	ldr	r1, [sp, #80]	; 0x50
    9578:	4a38      	ldr	r2, [pc, #224]	; (965c <MPSL_IRQ_RADIO_Handler+0x990>)
    957a:	1a0d      	subs	r5, r1, r0
    957c:	f04f 0b00 	mov.w	fp, #0
    9580:	1aaa      	subs	r2, r5, r2
    9582:	f17b 0200 	sbcs.w	r2, fp, #0
    9586:	e000      	b.n	958a <MPSL_IRQ_RADIO_Handler+0x8be>
    9588:	e03d      	b.n	9606 <MPSL_IRQ_RADIO_Handler+0x93a>
    958a:	d316      	bcc.n	95ba <MPSL_IRQ_RADIO_Handler+0x8ee>
    958c:	4a33      	ldr	r2, [pc, #204]	; (965c <MPSL_IRQ_RADIO_Handler+0x990>)
    958e:	1a43      	subs	r3, r0, r1
    9590:	1a9a      	subs	r2, r3, r2
    9592:	f17b 0200 	sbcs.w	r2, fp, #0
    9596:	d310      	bcc.n	95ba <MPSL_IRQ_RADIO_Handler+0x8ee>
    9598:	4a2f      	ldr	r2, [pc, #188]	; (9658 <MPSL_IRQ_RADIO_Handler+0x98c>)
    959a:	42aa      	cmp	r2, r5
    959c:	bf3e      	ittt	cc
    959e:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    95a2:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    95a6:	1845      	addcc	r5, r0, r1
    95a8:	d307      	bcc.n	95ba <MPSL_IRQ_RADIO_Handler+0x8ee>
    95aa:	429a      	cmp	r2, r3
    95ac:	d22f      	bcs.n	960e <MPSL_IRQ_RADIO_Handler+0x942>
    95ae:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    95b2:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    95b6:	4408      	add	r0, r1
    95b8:	4245      	negs	r5, r0
    95ba:	4f29      	ldr	r7, [pc, #164]	; (9660 <MPSL_IRQ_RADIO_Handler+0x994>)
    95bc:	7fb8      	ldrb	r0, [r7, #30]
    95be:	b358      	cbz	r0, 9618 <MPSL_IRQ_RADIO_Handler+0x94c>
    95c0:	9819      	ldr	r0, [sp, #100]	; 0x64
    95c2:	2801      	cmp	r0, #1
    95c4:	d005      	beq.n	95d2 <MPSL_IRQ_RADIO_Handler+0x906>
    95c6:	2002      	movs	r0, #2
    95c8:	f002 f9f0 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    95cc:	2001      	movs	r0, #1
    95ce:	f002 f9ed 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    95d2:	45b0      	cmp	r8, r6
    95d4:	d22c      	bcs.n	9630 <MPSL_IRQ_RADIO_Handler+0x964>
    95d6:	eba5 0106 	sub.w	r1, r5, r6
    95da:	f04f 0002 	mov.w	r0, #2
    95de:	f002 f92f 	bl	b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    95e2:	b390      	cbz	r0, 964a <MPSL_IRQ_RADIO_Handler+0x97e>
    95e4:	f1b8 0f00 	cmp.w	r8, #0
    95e8:	bf1c      	itt	ne
    95ea:	eba5 0108 	subne.w	r1, r5, r8
    95ee:	2001      	movne	r0, #1
    95f0:	d044      	beq.n	967c <MPSL_IRQ_RADIO_Handler+0x9b0>
    95f2:	bf00      	nop
    95f4:	f002 f924 	bl	b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    95f8:	b338      	cbz	r0, 964a <MPSL_IRQ_RADIO_Handler+0x97e>
    95fa:	e03f      	b.n	967c <MPSL_IRQ_RADIO_Handler+0x9b0>
    95fc:	f640 2131 	movw	r1, #2609	; 0xa31
    9600:	2070      	movs	r0, #112	; 0x70
    9602:	f002 fea9 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9606:	b01b      	add	sp, #108	; 0x6c
    9608:	2000      	movs	r0, #0
    960a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    960e:	f640 3105 	movw	r1, #2821	; 0xb05
    9612:	2070      	movs	r0, #112	; 0x70
    9614:	f002 fea0 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9618:	45b0      	cmp	r8, r6
    961a:	bf34      	ite	cc
    961c:	4630      	movcc	r0, r6
    961e:	4640      	movcs	r0, r8
    9620:	301e      	adds	r0, #30
    9622:	42a8      	cmp	r0, r5
    9624:	dbcc      	blt.n	95c0 <MPSL_IRQ_RADIO_Handler+0x8f4>
    9626:	f640 2145 	movw	r1, #2629	; 0xa45
    962a:	2070      	movs	r0, #112	; 0x70
    962c:	f002 fe94 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9630:	d91c      	bls.n	966c <MPSL_IRQ_RADIO_Handler+0x9a0>
    9632:	eba5 0108 	sub.w	r1, r5, r8
    9636:	2001      	movs	r0, #1
    9638:	f002 f902 	bl	b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    963c:	b128      	cbz	r0, 964a <MPSL_IRQ_RADIO_Handler+0x97e>
    963e:	2e00      	cmp	r6, #0
    9640:	bf1c      	itt	ne
    9642:	1ba9      	subne	r1, r5, r6
    9644:	2002      	movne	r0, #2
    9646:	d019      	beq.n	967c <MPSL_IRQ_RADIO_Handler+0x9b0>
    9648:	e7d4      	b.n	95f4 <MPSL_IRQ_RADIO_Handler+0x928>
    964a:	e042      	b.n	96d2 <MPSL_IRQ_RADIO_Handler+0xa06>
    964c:	40000508 	.word	0x40000508
    9650:	200002d0 	.word	0x200002d0
    9654:	20000fcc 	.word	0x20000fcc
    9658:	1e847fff 	.word	0x1e847fff
    965c:	0f424000 	.word	0x0f424000
    9660:	200013cc 	.word	0x200013cc
    9664:	f0bdc000 	.word	0xf0bdc000
    9668:	1e848000 	.word	0x1e848000
    966c:	ea56 0008 	orrs.w	r0, r6, r8
    9670:	d004      	beq.n	967c <MPSL_IRQ_RADIO_Handler+0x9b0>
    9672:	f640 1176 	movw	r1, #2422	; 0x976
    9676:	2070      	movs	r0, #112	; 0x70
    9678:	f002 fe6e 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    967c:	4629      	mov	r1, r5
    967e:	2000      	movs	r0, #0
    9680:	f002 f8de 	bl	b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9684:	b328      	cbz	r0, 96d2 <MPSL_IRQ_RADIO_Handler+0xa06>
    9686:	2601      	movs	r6, #1
    9688:	f1ba 0f00 	cmp.w	sl, #0
    968c:	bf04      	itt	eq
    968e:	f897 0030 	ldrbeq.w	r0, [r7, #48]	; 0x30
    9692:	2800      	cmpeq	r0, #0
    9694:	d002      	beq.n	969c <MPSL_IRQ_RADIO_Handler+0x9d0>
    9696:	f1b9 0f00 	cmp.w	r9, #0
    969a:	d024      	beq.n	96e6 <MPSL_IRQ_RADIO_Handler+0xa1a>
    969c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    969e:	f1b0 3fff 	cmp.w	r0, #4294967295
    96a2:	d004      	beq.n	96ae <MPSL_IRQ_RADIO_Handler+0x9e2>
    96a4:	f002 fcbe 	bl	c024 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    96a8:	f04f 30ff 	mov.w	r0, #4294967295
    96ac:	62f8      	str	r0, [r7, #44]	; 0x2c
    96ae:	f1b9 0f00 	cmp.w	r9, #0
    96b2:	d01c      	beq.n	96ee <MPSL_IRQ_RADIO_Handler+0xa22>
    96b4:	9813      	ldr	r0, [sp, #76]	; 0x4c
    96b6:	1a20      	subs	r0, r4, r0
    96b8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    96bc:	2005      	movs	r0, #5
    96be:	f002 f8bf 	bl	b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    96c2:	b360      	cbz	r0, 971e <MPSL_IRQ_RADIO_Handler+0xa52>
    96c4:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
    96c8:	2800      	cmp	r0, #0
    96ca:	bf08      	it	eq
    96cc:	f887 6030 	strbeq.w	r6, [r7, #48]	; 0x30
    96d0:	e015      	b.n	96fe <MPSL_IRQ_RADIO_Handler+0xa32>
    96d2:	2002      	movs	r0, #2
    96d4:	f002 f96a 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    96d8:	2001      	movs	r0, #1
    96da:	f002 f967 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    96de:	b01b      	add	sp, #108	; 0x6c
    96e0:	2000      	movs	r0, #0
    96e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    96e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    96e8:	f1b0 3fff 	cmp.w	r0, #4294967295
    96ec:	d012      	beq.n	9714 <MPSL_IRQ_RADIO_Handler+0xa48>
    96ee:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
    96f2:	b120      	cbz	r0, 96fe <MPSL_IRQ_RADIO_Handler+0xa32>
    96f4:	2005      	movs	r0, #5
    96f6:	f002 f959 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    96fa:	f887 b030 	strb.w	fp, [r7, #48]	; 0x30
    96fe:	eba5 0008 	sub.w	r0, r5, r8
    9702:	f1a0 0119 	sub.w	r1, r0, #25
    9706:	2900      	cmp	r1, #0
    9708:	dc0e      	bgt.n	9728 <MPSL_IRQ_RADIO_Handler+0xa5c>
    970a:	f640 216e 	movw	r1, #2670	; 0xa6e
    970e:	2070      	movs	r0, #112	; 0x70
    9710:	f002 fe22 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9714:	f002 fca2 	bl	c05c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    9718:	f001 fed2 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    971c:	e7c6      	b.n	96ac <MPSL_IRQ_RADIO_Handler+0x9e0>
    971e:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    9722:	2070      	movs	r0, #112	; 0x70
    9724:	f002 fe18 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9728:	2003      	movs	r0, #3
    972a:	f002 f889 	bl	b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    972e:	b1c0      	cbz	r0, 9762 <MPSL_IRQ_RADIO_Handler+0xa96>
    9730:	480e      	ldr	r0, [pc, #56]	; (976c <MPSL_IRQ_RADIO_Handler+0xaa0>)
    9732:	6880      	ldr	r0, [r0, #8]
    9734:	f8c0 b000 	str.w	fp, [r0]
    9738:	480d      	ldr	r0, [pc, #52]	; (9770 <MPSL_IRQ_RADIO_Handler+0xaa4>)
    973a:	f8c0 b000 	str.w	fp, [r0]
    973e:	ac0a      	add	r4, sp, #40	; 0x28
    9740:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    9744:	6038      	str	r0, [r7, #0]
    9746:	6079      	str	r1, [r7, #4]
    9748:	60ba      	str	r2, [r7, #8]
    974a:	60fb      	str	r3, [r7, #12]
    974c:	ac0e      	add	r4, sp, #56	; 0x38
    974e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    9752:	6138      	str	r0, [r7, #16]
    9754:	6179      	str	r1, [r7, #20]
    9756:	61ba      	str	r2, [r7, #24]
    9758:	61fb      	str	r3, [r7, #28]
    975a:	b01b      	add	sp, #108	; 0x6c
    975c:	2001      	movs	r0, #1
    975e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9762:	f640 2176 	movw	r1, #2678	; 0xa76
    9766:	2070      	movs	r0, #112	; 0x70
    9768:	f002 fdf6 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    976c:	200002d0 	.word	0x200002d0
    9770:	40000508 	.word	0x40000508
    9774:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9778:	4614      	mov	r4, r2
    977a:	460d      	mov	r5, r1
    977c:	f04f 0a00 	mov.w	sl, #0
    9780:	890a      	ldrh	r2, [r1, #8]
    9782:	4651      	mov	r1, sl
    9784:	f362 411f 	bfi	r1, r2, #16, #16
    9788:	7aaa      	ldrb	r2, [r5, #10]
    978a:	46d1      	mov	r9, sl
    978c:	f362 0907 	bfi	r9, r2, #0, #8
    9790:	7aea      	ldrb	r2, [r5, #11]
    9792:	4606      	mov	r6, r0
    9794:	f362 290f 	bfi	r9, r2, #8, #8
    9798:	782a      	ldrb	r2, [r5, #0]
    979a:	b083      	sub	sp, #12
    979c:	6840      	ldr	r0, [r0, #4]
    979e:	f8c4 a000 	str.w	sl, [r4]
    97a2:	f362 4917 	bfi	r9, r2, #16, #8
    97a6:	f8c4 a004 	str.w	sl, [r4, #4]
    97aa:	f8c4 9010 	str.w	r9, [r4, #16]
    97ae:	e9c4 0102 	strd	r0, r1, [r4, #8]
    97b2:	4f9d      	ldr	r7, [pc, #628]	; (9a28 <MPSL_IRQ_RADIO_Handler+0xd5c>)
    97b4:	6870      	ldr	r0, [r6, #4]
    97b6:	fba0 8907 	umull	r8, r9, r0, r7
    97ba:	6830      	ldr	r0, [r6, #0]
    97bc:	f006 fdc4 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    97c0:	eb10 0108 	adds.w	r1, r0, r8
    97c4:	eb4a 0209 	adc.w	r2, sl, r9
    97c8:	7828      	ldrb	r0, [r5, #0]
    97ca:	ea4f 0967 	mov.w	r9, r7, asr #1
    97ce:	f1c9 0b00 	rsb	fp, r9, #0
    97d2:	b170      	cbz	r0, 97f2 <MPSL_IRQ_RADIO_Handler+0xb26>
    97d4:	89e0      	ldrh	r0, [r4, #14]
    97d6:	f894 8011 	ldrb.w	r8, [r4, #17]
    97da:	43c0      	mvns	r0, r0
    97dc:	f8d5 a004 	ldr.w	sl, [r5, #4]
    97e0:	f104 020c 	add.w	r2, r4, #12
    97e4:	4548      	cmp	r0, r9
    97e6:	dd7c      	ble.n	98e2 <MPSL_IRQ_RADIO_Handler+0xc16>
    97e8:	f240 519f 	movw	r1, #1439	; 0x59f
    97ec:	2070      	movs	r0, #112	; 0x70
    97ee:	f002 fdb3 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    97f2:	f8df c238 	ldr.w	ip, [pc, #568]	; 9a2c <MPSL_IRQ_RADIO_Handler+0xd60>
    97f6:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
    97fa:	eb11 0a0c 	adds.w	sl, r1, ip
    97fe:	f142 0c00 	adc.w	ip, r2, #0
    9802:	ebb0 0a0a 	subs.w	sl, r0, sl
    9806:	eb73 0c0c 	sbcs.w	ip, r3, ip
    980a:	d272      	bcs.n	98f2 <MPSL_IRQ_RADIO_Handler+0xc26>
    980c:	1a41      	subs	r1, r0, r1
    980e:	eb73 0102 	sbcs.w	r1, r3, r2
    9812:	d36e      	bcc.n	98f2 <MPSL_IRQ_RADIO_Handler+0xc26>
    9814:	ebb0 0608 	subs.w	r6, r0, r8
    9818:	42b7      	cmp	r7, r6
    981a:	d82b      	bhi.n	9874 <MPSL_IRQ_RADIO_Handler+0xba8>
    981c:	89e0      	ldrh	r0, [r4, #14]
    981e:	f1a6 58f4 	sub.w	r8, r6, #511705088	; 0x1e800000
    9822:	f5a8 2890 	sub.w	r8, r8, #294912	; 0x48000
    9826:	43c1      	mvns	r1, r0
    9828:	4a81      	ldr	r2, [pc, #516]	; (9a30 <MPSL_IRQ_RADIO_Handler+0xd64>)
    982a:	eb08 0001 	add.w	r0, r8, r1
    982e:	4542      	cmp	r2, r8
    9830:	d32b      	bcc.n	988a <MPSL_IRQ_RADIO_Handler+0xbbe>
    9832:	4549      	cmp	r1, r9
    9834:	dcd8      	bgt.n	97e8 <MPSL_IRQ_RADIO_Handler+0xb1c>
    9836:	4559      	cmp	r1, fp
    9838:	db66      	blt.n	9908 <MPSL_IRQ_RADIO_Handler+0xc3c>
    983a:	4287      	cmp	r7, r0
    983c:	bfdc      	itt	le
    983e:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    9842:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    9846:	dd05      	ble.n	9854 <MPSL_IRQ_RADIO_Handler+0xb88>
    9848:	2800      	cmp	r0, #0
    984a:	bfbc      	itt	lt
    984c:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    9850:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    9854:	466a      	mov	r2, sp
    9856:	a901      	add	r1, sp, #4
    9858:	f001 fcc8 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    985c:	89e0      	ldrh	r0, [r4, #14]
    985e:	f89d 1000 	ldrb.w	r1, [sp]
    9862:	1a30      	subs	r0, r6, r0
    9864:	1a40      	subs	r0, r0, r1
    9866:	1e40      	subs	r0, r0, #1
    9868:	42b8      	cmp	r0, r7
    986a:	d302      	bcc.n	9872 <MPSL_IRQ_RADIO_Handler+0xba6>
    986c:	68a0      	ldr	r0, [r4, #8]
    986e:	1c40      	adds	r0, r0, #1
    9870:	60a0      	str	r0, [r4, #8]
    9872:	4646      	mov	r6, r8
    9874:	89e0      	ldrh	r0, [r4, #14]
    9876:	4b6e      	ldr	r3, [pc, #440]	; (9a30 <MPSL_IRQ_RADIO_Handler+0xd64>)
    9878:	43c1      	mvns	r1, r0
    987a:	686d      	ldr	r5, [r5, #4]
    987c:	f894 8011 	ldrb.w	r8, [r4, #17]
    9880:	1870      	adds	r0, r6, r1
    9882:	f104 020c 	add.w	r2, r4, #12
    9886:	429e      	cmp	r6, r3
    9888:	d904      	bls.n	9894 <MPSL_IRQ_RADIO_Handler+0xbc8>
    988a:	f240 519e 	movw	r1, #1438	; 0x59e
    988e:	2070      	movs	r0, #112	; 0x70
    9890:	f002 fd62 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9894:	4549      	cmp	r1, r9
    9896:	dca7      	bgt.n	97e8 <MPSL_IRQ_RADIO_Handler+0xb1c>
    9898:	4559      	cmp	r1, fp
    989a:	db35      	blt.n	9908 <MPSL_IRQ_RADIO_Handler+0xc3c>
    989c:	4287      	cmp	r7, r0
    989e:	bfdc      	itt	le
    98a0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    98a4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    98a8:	dd05      	ble.n	98b6 <MPSL_IRQ_RADIO_Handler+0xbea>
    98aa:	2800      	cmp	r0, #0
    98ac:	bfbc      	itt	lt
    98ae:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    98b2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    98b6:	4621      	mov	r1, r4
    98b8:	f001 fc98 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    98bc:	6820      	ldr	r0, [r4, #0]
    98be:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    98c2:	1970      	adds	r0, r6, r5
    98c4:	1c40      	adds	r0, r0, #1
    98c6:	6021      	str	r1, [r4, #0]
    98c8:	f1b8 0f00 	cmp.w	r8, #0
    98cc:	bf08      	it	eq
    98ce:	307a      	addeq	r0, #122	; 0x7a
    98d0:	d004      	beq.n	98dc <MPSL_IRQ_RADIO_Handler+0xc10>
    98d2:	f1b8 0f01 	cmp.w	r8, #1
    98d6:	bf08      	it	eq
    98d8:	3048      	addeq	r0, #72	; 0x48
    98da:	d13a      	bne.n	9952 <MPSL_IRQ_RADIO_Handler+0xc86>
    98dc:	f001 fc6a 	bl	b1b4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    98e0:	e001      	b.n	98e6 <MPSL_IRQ_RADIO_Handler+0xc1a>
    98e2:	e00e      	b.n	9902 <MPSL_IRQ_RADIO_Handler+0xc36>
    98e4:	e005      	b.n	98f2 <MPSL_IRQ_RADIO_Handler+0xc26>
    98e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    98ea:	6060      	str	r0, [r4, #4]
    98ec:	b007      	add	sp, #28
    98ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    98f2:	6830      	ldr	r0, [r6, #0]
    98f4:	1e40      	subs	r0, r0, #1
    98f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    98fa:	6020      	str	r0, [r4, #0]
    98fc:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
    9900:	e7f3      	b.n	98ea <MPSL_IRQ_RADIO_Handler+0xc1e>
    9902:	4601      	mov	r1, r0
    9904:	4558      	cmp	r0, fp
    9906:	da04      	bge.n	9912 <MPSL_IRQ_RADIO_Handler+0xc46>
    9908:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    990c:	2070      	movs	r0, #112	; 0x70
    990e:	f002 fd23 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9912:	4287      	cmp	r7, r0
    9914:	bfdc      	itt	le
    9916:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    991a:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    991e:	dd05      	ble.n	992c <MPSL_IRQ_RADIO_Handler+0xc60>
    9920:	2800      	cmp	r0, #0
    9922:	bfbc      	itt	lt
    9924:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    9928:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    992c:	4621      	mov	r1, r4
    992e:	f001 fc5d 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9932:	6820      	ldr	r0, [r4, #0]
    9934:	f1b8 0f00 	cmp.w	r8, #0
    9938:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    993c:	f10a 0001 	add.w	r0, sl, #1
    9940:	6021      	str	r1, [r4, #0]
    9942:	bf08      	it	eq
    9944:	307a      	addeq	r0, #122	; 0x7a
    9946:	d009      	beq.n	995c <MPSL_IRQ_RADIO_Handler+0xc90>
    9948:	f1b8 0f01 	cmp.w	r8, #1
    994c:	bf08      	it	eq
    994e:	3048      	addeq	r0, #72	; 0x48
    9950:	d004      	beq.n	995c <MPSL_IRQ_RADIO_Handler+0xc90>
    9952:	f240 6139 	movw	r1, #1593	; 0x639
    9956:	2070      	movs	r0, #112	; 0x70
    9958:	f002 fcfe 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    995c:	f001 fc2a 	bl	b1b4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9960:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9964:	6061      	str	r1, [r4, #4]
    9966:	f8b4 900e 	ldrh.w	r9, [r4, #14]
    996a:	aa01      	add	r2, sp, #4
    996c:	4669      	mov	r1, sp
    996e:	4648      	mov	r0, r9
    9970:	6837      	ldr	r7, [r6, #0]
    9972:	f001 fc3b 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9976:	f002 f977 	bl	bc68 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    997a:	f001 fc1b 	bl	b1b4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    997e:	4680      	mov	r8, r0
    9980:	482c      	ldr	r0, [pc, #176]	; (9a34 <MPSL_IRQ_RADIO_Handler+0xd68>)
    9982:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
    9986:	2920      	cmp	r1, #32
    9988:	d02a      	beq.n	99e0 <MPSL_IRQ_RADIO_Handler+0xd14>
    998a:	68c0      	ldr	r0, [r0, #12]
    998c:	1d40      	adds	r0, r0, #5
    998e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9992:	bf00      	nop
    9994:	e9d4 2100 	ldrd	r2, r1, [r4]
    9998:	1a89      	subs	r1, r1, r2
    999a:	4401      	add	r1, r0
    999c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    99a0:	e9c4 0100 	strd	r0, r1, [r4]
    99a4:	6831      	ldr	r1, [r6, #0]
    99a6:	4281      	cmp	r1, r0
    99a8:	d902      	bls.n	99b0 <MPSL_IRQ_RADIO_Handler+0xce4>
    99aa:	68a0      	ldr	r0, [r4, #8]
    99ac:	1c40      	adds	r0, r0, #1
    99ae:	60a0      	str	r0, [r4, #8]
    99b0:	6832      	ldr	r2, [r6, #0]
    99b2:	6928      	ldr	r0, [r5, #16]
    99b4:	4621      	mov	r1, r4
    99b6:	9b06      	ldr	r3, [sp, #24]
    99b8:	f7ff f9e4 	bl	8d84 <MPSL_IRQ_RADIO_Handler+0xb8>
    99bc:	2800      	cmp	r0, #0
    99be:	bf1c      	itt	ne
    99c0:	b007      	addne	sp, #28
    99c2:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99c6:	e9d4 1000 	ldrd	r1, r0, [r4]
    99ca:	1a40      	subs	r0, r0, r1
    99cc:	6831      	ldr	r1, [r6, #0]
    99ce:	6021      	str	r1, [r4, #0]
    99d0:	6831      	ldr	r1, [r6, #0]
    99d2:	4408      	add	r0, r1
    99d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    99d8:	6060      	str	r0, [r4, #4]
    99da:	b007      	add	sp, #28
    99dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99e0:	3709      	adds	r7, #9
    99e2:	f1b9 0f00 	cmp.w	r9, #0
    99e6:	d016      	beq.n	9a16 <MPSL_IRQ_RADIO_Handler+0xd4a>
    99e8:	f002 fc3e 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    99ec:	b998      	cbnz	r0, 9a16 <MPSL_IRQ_RADIO_Handler+0xd4a>
    99ee:	f002 fb13 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    99f2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    99f6:	bf08      	it	eq
    99f8:	200d      	moveq	r0, #13
    99fa:	d00b      	beq.n	9a14 <MPSL_IRQ_RADIO_Handler+0xd48>
    99fc:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9a00:	3856      	subs	r0, #86	; 0x56
    9a02:	bf08      	it	eq
    9a04:	201c      	moveq	r0, #28
    9a06:	d005      	beq.n	9a14 <MPSL_IRQ_RADIO_Handler+0xd48>
    9a08:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9a0c:	389f      	subs	r0, #159	; 0x9f
    9a0e:	bf14      	ite	ne
    9a10:	2000      	movne	r0, #0
    9a12:	2032      	moveq	r0, #50	; 0x32
    9a14:	4407      	add	r7, r0
    9a16:	9800      	ldr	r0, [sp, #0]
    9a18:	4580      	cmp	r8, r0
    9a1a:	bf84      	itt	hi
    9a1c:	eba8 0000 	subhi.w	r0, r8, r0
    9a20:	4407      	addhi	r7, r0
    9a22:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    9a26:	e7b5      	b.n	9994 <MPSL_IRQ_RADIO_Handler+0xcc8>
    9a28:	1e848000 	.word	0x1e848000
    9a2c:	0f424000 	.word	0x0f424000
    9a30:	1e847fff 	.word	0x1e847fff
    9a34:	200013cc 	.word	0x200013cc
    9a38:	b570      	push	{r4, r5, r6, lr}
    9a3a:	4d1e      	ldr	r5, [pc, #120]	; (9ab4 <MPSL_IRQ_RADIO_Handler+0xde8>)
    9a3c:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    9a40:	2820      	cmp	r0, #32
    9a42:	bf18      	it	ne
    9a44:	bd70      	popne	{r4, r5, r6, pc}
    9a46:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    9a4a:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    9a4e:	4428      	add	r0, r5
    9a50:	f890 4020 	ldrb.w	r4, [r0, #32]
    9a54:	2c20      	cmp	r4, #32
    9a56:	d027      	beq.n	9aa8 <MPSL_IRQ_RADIO_Handler+0xddc>
    9a58:	4b17      	ldr	r3, [pc, #92]	; (9ab8 <MPSL_IRQ_RADIO_Handler+0xdec>)
    9a5a:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    9a5e:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    9a62:	7849      	ldrb	r1, [r1, #1]
    9a64:	f880 1020 	strb.w	r1, [r0, #32]
    9a68:	20ff      	movs	r0, #255	; 0xff
    9a6a:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    9a6e:	f885 4032 	strb.w	r4, [r5, #50]	; 0x32
    9a72:	4621      	mov	r1, r4
    9a74:	2002      	movs	r0, #2
    9a76:	f000 f891 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    9a7a:	2000      	movs	r0, #0
    9a7c:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    9a80:	77a8      	strb	r0, [r5, #30]
    9a82:	490e      	ldr	r1, [pc, #56]	; (9abc <MPSL_IRQ_RADIO_Handler+0xdf0>)
    9a84:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    9a88:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    9a8c:	7e00      	ldrb	r0, [r0, #24]
    9a8e:	2800      	cmp	r0, #0
    9a90:	bf08      	it	eq
    9a92:	f002 fdcb 	bleq	c62c <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    9a96:	2000      	movs	r0, #0
    9a98:	4909      	ldr	r1, [pc, #36]	; (9ac0 <MPSL_IRQ_RADIO_Handler+0xdf4>)
    9a9a:	6849      	ldr	r1, [r1, #4]
    9a9c:	2900      	cmp	r1, #0
    9a9e:	bf08      	it	eq
    9aa0:	bd70      	popeq	{r4, r5, r6, pc}
    9aa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9aa6:	4708      	bx	r1
    9aa8:	f240 3132 	movw	r1, #818	; 0x332
    9aac:	2070      	movs	r0, #112	; 0x70
    9aae:	f002 fc53 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9ab2:	0000      	.short	0x0000
    9ab4:	200013cc 	.word	0x200013cc
    9ab8:	2000134c 	.word	0x2000134c
    9abc:	20000fcc 	.word	0x20000fcc
    9ac0:	200002d0 	.word	0x200002d0
    9ac4:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9ac8:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 9b8c <MPSL_IRQ_RADIO_Handler+0xec0>
    9acc:	f898 5031 	ldrb.w	r5, [r8, #49]	; 0x31
    9ad0:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9ad4:	4440      	add	r0, r8
    9ad6:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    9ada:	2c20      	cmp	r4, #32
    9adc:	bf08      	it	eq
    9ade:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9ae2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 9b90 <MPSL_IRQ_RADIO_Handler+0xec4>
    9ae6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 9b94 <MPSL_IRQ_RADIO_Handler+0xec8>
    9aea:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
    9aee:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    9af2:	2607      	movs	r6, #7
    9af4:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    9af8:	2801      	cmp	r0, #1
    9afa:	d00e      	beq.n	9b1a <MPSL_IRQ_RADIO_Handler+0xe4e>
    9afc:	2804      	cmp	r0, #4
    9afe:	bf08      	it	eq
    9b00:	2602      	moveq	r6, #2
    9b02:	d00a      	beq.n	9b1a <MPSL_IRQ_RADIO_Handler+0xe4e>
    9b04:	2805      	cmp	r0, #5
    9b06:	bf0c      	ite	eq
    9b08:	2603      	moveq	r6, #3
    9b0a:	2806      	cmpne	r0, #6
    9b0c:	d005      	beq.n	9b1a <MPSL_IRQ_RADIO_Handler+0xe4e>
    9b0e:	f640 01dd 	movw	r1, #2269	; 0x8dd
    9b12:	f04f 0070 	mov.w	r0, #112	; 0x70
    9b16:	f002 fc1f 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9b1a:	f1bb 0f00 	cmp.w	fp, #0
    9b1e:	bf18      	it	ne
    9b20:	f3af 8000 	nopne.w
    9b24:	f3ef 8010 	mrs	r0, PRIMASK
    9b28:	b672      	cpsid	i
    9b2a:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    9b2e:	784a      	ldrb	r2, [r1, #1]
    9b30:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    9b34:	4441      	add	r1, r8
    9b36:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    9b3a:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    9b3e:	42a2      	cmp	r2, r4
    9b40:	bf04      	itt	eq
    9b42:	2220      	moveq	r2, #32
    9b44:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    9b48:	b1c0      	cbz	r0, 9b7c <MPSL_IRQ_RADIO_Handler+0xeb0>
    9b4a:	462a      	mov	r2, r5
    9b4c:	4621      	mov	r1, r4
    9b4e:	2001      	movs	r0, #1
    9b50:	f000 f824 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    9b54:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9b58:	eb09 0081 	add.w	r0, r9, r1, lsl #2
    9b5c:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    9b60:	6840      	ldr	r0, [r0, #4]
    9b62:	4631      	mov	r1, r6
    9b64:	4790      	blx	r2
    9b66:	f898 5031 	ldrb.w	r5, [r8, #49]	; 0x31
    9b6a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9b6e:	4440      	add	r0, r8
    9b70:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    9b74:	2c20      	cmp	r4, #32
    9b76:	d1ba      	bne.n	9aee <MPSL_IRQ_RADIO_Handler+0xe22>
    9b78:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9b7c:	4806      	ldr	r0, [pc, #24]	; (9b98 <MPSL_IRQ_RADIO_Handler+0xecc>)
    9b7e:	2800      	cmp	r0, #0
    9b80:	bf18      	it	ne
    9b82:	f3af 8000 	nopne.w
    9b86:	b662      	cpsie	i
    9b88:	e7df      	b.n	9b4a <MPSL_IRQ_RADIO_Handler+0xe7e>
    9b8a:	0000      	.short	0x0000
    9b8c:	200013cc 	.word	0x200013cc
    9b90:	00000000 	.word	0x00000000
    9b94:	2000134c 	.word	0x2000134c
    9b98:	00000000 	.word	0x00000000
    9b9c:	f8df c058 	ldr.w	ip, [pc, #88]	; 9bf8 <MPSL_IRQ_RADIO_Handler+0xf2c>
    9ba0:	b510      	push	{r4, lr}
    9ba2:	2300      	movs	r3, #0
    9ba4:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    9ba8:	2807      	cmp	r0, #7
    9baa:	d21f      	bcs.n	9bec <MPSL_IRQ_RADIO_Handler+0xf20>
    9bac:	e8df f000 	tbb	[pc, r0]
    9bb0:	05050505 	.word	0x05050505
    9bb4:	00040404 	.word	0x00040404
    9bb8:	2301      	movs	r3, #1
    9bba:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    9bbe:	2b00      	cmp	r3, #0
    9bc0:	bf08      	it	eq
    9bc2:	bd10      	popeq	{r4, pc}
    9bc4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    9bc8:	480c      	ldr	r0, [pc, #48]	; (9bfc <MPSL_IRQ_RADIO_Handler+0xf30>)
    9bca:	4402      	add	r2, r0
    9bcc:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    9bd0:	2820      	cmp	r0, #32
    9bd2:	bf0e      	itee	eq
    9bd4:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    9bd8:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    9bdc:	7041      	strbne	r1, [r0, #1]
    9bde:	2020      	movs	r0, #32
    9be0:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    9be4:	7058      	strb	r0, [r3, #1]
    9be6:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    9bea:	bd10      	pop	{r4, pc}
    9bec:	f240 216e 	movw	r1, #622	; 0x26e
    9bf0:	2070      	movs	r0, #112	; 0x70
    9bf2:	f002 fbb1 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9bf6:	0000      	.short	0x0000
    9bf8:	2000134c 	.word	0x2000134c
    9bfc:	200013cc 	.word	0x200013cc
    9c00:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9c04:	460f      	mov	r7, r1
    9c06:	4680      	mov	r8, r0
    9c08:	f8df a160 	ldr.w	sl, [pc, #352]	; 9d6c <MPSL_IRQ_RADIO_Handler+0x10a0>
    9c0c:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    9c10:	4450      	add	r0, sl
    9c12:	f1b8 0f01 	cmp.w	r8, #1
    9c16:	f890 4020 	ldrb.w	r4, [r0, #32]
    9c1a:	4625      	mov	r5, r4
    9c1c:	bf18      	it	ne
    9c1e:	f1b8 0f02 	cmpne.w	r8, #2
    9c22:	d005      	beq.n	9c30 <MPSL_IRQ_RADIO_Handler+0xf64>
    9c24:	f640 21ac 	movw	r1, #2732	; 0xaac
    9c28:	f04f 0070 	mov.w	r0, #112	; 0x70
    9c2c:	f002 fb94 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9c30:	f04f 0b00 	mov.w	fp, #0
    9c34:	2d20      	cmp	r5, #32
    9c36:	d042      	beq.n	9cbe <MPSL_IRQ_RADIO_Handler+0xff2>
    9c38:	f89a 001e 	ldrb.w	r0, [sl, #30]
    9c3c:	2600      	movs	r6, #0
    9c3e:	2800      	cmp	r0, #0
    9c40:	bf08      	it	eq
    9c42:	2602      	moveq	r6, #2
    9c44:	f001 fc3c 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9c48:	f8df c124 	ldr.w	ip, [pc, #292]	; 9d70 <MPSL_IRQ_RADIO_Handler+0x10a4>
    9c4c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9c50:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    9c54:	688a      	ldr	r2, [r1, #8]
    9c56:	68c9      	ldr	r1, [r1, #12]
    9c58:	1a12      	subs	r2, r2, r0
    9c5a:	1a09      	subs	r1, r1, r0
    9c5c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9c60:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9c64:	4296      	cmp	r6, r2
    9c66:	bf99      	ittee	ls
    9c68:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    9c6c:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9c70:	4a40      	ldrhi	r2, [pc, #256]	; (9d74 <MPSL_IRQ_RADIO_Handler+0x10a8>)
    9c72:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
    9c76:	d920      	bls.n	9cba <MPSL_IRQ_RADIO_Handler+0xfee>
    9c78:	4622      	mov	r2, r4
    9c7a:	eb09 0142 	add.w	r1, r9, r2, lsl #1
    9c7e:	784c      	ldrb	r4, [r1, #1]
    9c80:	2c20      	cmp	r4, #32
    9c82:	d012      	beq.n	9caa <MPSL_IRQ_RADIO_Handler+0xfde>
    9c84:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9c88:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    9c8c:	688b      	ldr	r3, [r1, #8]
    9c8e:	68c9      	ldr	r1, [r1, #12]
    9c90:	1a1b      	subs	r3, r3, r0
    9c92:	1a09      	subs	r1, r1, r0
    9c94:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    9c98:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9c9c:	429e      	cmp	r6, r3
    9c9e:	bf9c      	itt	ls
    9ca0:	f5b3 0f00 	cmpls.w	r3, #8388608	; 0x800000
    9ca4:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9ca8:	d8e6      	bhi.n	9c78 <MPSL_IRQ_RADIO_Handler+0xfac>
    9caa:	2a20      	cmp	r2, #32
    9cac:	d005      	beq.n	9cba <MPSL_IRQ_RADIO_Handler+0xfee>
    9cae:	463b      	mov	r3, r7
    9cb0:	2120      	movs	r1, #32
    9cb2:	2004      	movs	r0, #4
    9cb4:	f7ff f82a 	bl	8d0c <MPSL_IRQ_RADIO_Handler+0x40>
    9cb8:	4604      	mov	r4, r0
    9cba:	42ac      	cmp	r4, r5
    9cbc:	d116      	bne.n	9cec <MPSL_IRQ_RADIO_Handler+0x1020>
    9cbe:	482e      	ldr	r0, [pc, #184]	; (9d78 <MPSL_IRQ_RADIO_Handler+0x10ac>)
    9cc0:	2800      	cmp	r0, #0
    9cc2:	bf18      	it	ne
    9cc4:	f3af 8000 	nopne.w
    9cc8:	f001 fbfa 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9ccc:	4603      	mov	r3, r0
    9cce:	f89a 0033 	ldrb.w	r0, [sl, #51]	; 0x33
    9cd2:	2820      	cmp	r0, #32
    9cd4:	d00d      	beq.n	9cf2 <MPSL_IRQ_RADIO_Handler+0x1026>
    9cd6:	f8da 0008 	ldr.w	r0, [sl, #8]
    9cda:	1c99      	adds	r1, r3, #2
    9cdc:	1a08      	subs	r0, r1, r0
    9cde:	0200      	lsls	r0, r0, #8
    9ce0:	17c1      	asrs	r1, r0, #31
    9ce2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    9ce6:	1200      	asrs	r0, r0, #8
    9ce8:	2800      	cmp	r0, #0
    9cea:	dd02      	ble.n	9cf2 <MPSL_IRQ_RADIO_Handler+0x1026>
    9cec:	2000      	movs	r0, #0
    9cee:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9cf2:	2d20      	cmp	r5, #32
    9cf4:	d014      	beq.n	9d20 <MPSL_IRQ_RADIO_Handler+0x1054>
    9cf6:	462a      	mov	r2, r5
    9cf8:	4641      	mov	r1, r8
    9cfa:	4618      	mov	r0, r3
    9cfc:	f7ff fa9c 	bl	9238 <MPSL_IRQ_RADIO_Handler+0x56c>
    9d00:	2800      	cmp	r0, #0
    9d02:	bf1e      	ittt	ne
    9d04:	f88a 5033 	strbne.w	r5, [sl, #51]	; 0x33
    9d08:	2002      	movne	r0, #2
    9d0a:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9d0e:	463b      	mov	r3, r7
    9d10:	462a      	mov	r2, r5
    9d12:	2120      	movs	r1, #32
    9d14:	2004      	movs	r0, #4
    9d16:	f7fe fff9 	bl	8d0c <MPSL_IRQ_RADIO_Handler+0x40>
    9d1a:	2000      	movs	r0, #0
    9d1c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9d20:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
    9d24:	f1b0 3fff 	cmp.w	r0, #4294967295
    9d28:	d005      	beq.n	9d36 <MPSL_IRQ_RADIO_Handler+0x106a>
    9d2a:	f002 f97b 	bl	c024 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    9d2e:	f04f 30ff 	mov.w	r0, #4294967295
    9d32:	f8ca 002c 	str.w	r0, [sl, #44]	; 0x2c
    9d36:	f89a 0030 	ldrb.w	r0, [sl, #48]	; 0x30
    9d3a:	b120      	cbz	r0, 9d46 <MPSL_IRQ_RADIO_Handler+0x107a>
    9d3c:	2005      	movs	r0, #5
    9d3e:	f001 fe35 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9d42:	f88a b030 	strb.w	fp, [sl, #48]	; 0x30
    9d46:	2004      	movs	r0, #4
    9d48:	f001 fe30 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9d4c:	f001 fe9e 	bl	ba8c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    9d50:	2020      	movs	r0, #32
    9d52:	f88a 0033 	strb.w	r0, [sl, #51]	; 0x33
    9d56:	4809      	ldr	r0, [pc, #36]	; (9d7c <MPSL_IRQ_RADIO_Handler+0x10b0>)
    9d58:	6880      	ldr	r0, [r0, #8]
    9d5a:	f8c0 b000 	str.w	fp, [r0]
    9d5e:	4808      	ldr	r0, [pc, #32]	; (9d80 <MPSL_IRQ_RADIO_Handler+0x10b4>)
    9d60:	f8c0 b000 	str.w	fp, [r0]
    9d64:	2001      	movs	r0, #1
    9d66:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9d6a:	0000      	.short	0x0000
    9d6c:	200013cc 	.word	0x200013cc
    9d70:	20000fcc 	.word	0x20000fcc
    9d74:	2000134c 	.word	0x2000134c
    9d78:	00000000 	.word	0x00000000
    9d7c:	200002d0 	.word	0x200002d0
    9d80:	40000508 	.word	0x40000508

00009d84 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    9d84:	4906      	ldr	r1, [pc, #24]	; (9da0 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    9d86:	b510      	push	{r4, lr}
    9d88:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
    9d8c:	2a20      	cmp	r2, #32
    9d8e:	bf1c      	itt	ne
    9d90:	7788      	strbne	r0, [r1, #30]
    9d92:	bd10      	popne	{r4, pc}
    9d94:	f240 319a 	movw	r1, #922	; 0x39a
    9d98:	2070      	movs	r0, #112	; 0x70
    9d9a:	f002 fadd 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9d9e:	0000      	.short	0x0000
    9da0:	200013cc 	.word	0x200013cc

00009da4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    9da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9da8:	4e69      	ldr	r6, [pc, #420]	; (9f50 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    9daa:	4607      	mov	r7, r0
    9dac:	b08d      	sub	sp, #52	; 0x34
    9dae:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
    9db2:	4688      	mov	r8, r1
    9db4:	2820      	cmp	r0, #32
    9db6:	d055      	beq.n	9e64 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc0>
    9db8:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
    9dbc:	f106 0408 	add.w	r4, r6, #8
    9dc0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    9dc4:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
    9dc8:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
    9dcc:	2020      	movs	r0, #32
    9dce:	f88d 0020 	strb.w	r0, [sp, #32]
    9dd2:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    9dd6:	aa0a      	add	r2, sp, #40	; 0x28
    9dd8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    9ddc:	4430      	add	r0, r6
    9dde:	a909      	add	r1, sp, #36	; 0x24
    9de0:	f890 5020 	ldrb.w	r5, [r0, #32]
    9de4:	68f0      	ldr	r0, [r6, #12]
    9de6:	9002      	str	r0, [sp, #8]
    9de8:	6830      	ldr	r0, [r6, #0]
    9dea:	4438      	add	r0, r7
    9dec:	f001 f9fe 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9df0:	f8da 000c 	ldr.w	r0, [sl, #12]
    9df4:	9909      	ldr	r1, [sp, #36]	; 0x24
    9df6:	2f65      	cmp	r7, #101	; 0x65
    9df8:	4408      	add	r0, r1
    9dfa:	d338      	bcc.n	9e6e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    9dfc:	4a55      	ldr	r2, [pc, #340]	; (9f54 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b0>)
    9dfe:	2100      	movs	r1, #0
    9e00:	1bd2      	subs	r2, r2, r7
    9e02:	eb71 0201 	sbcs.w	r2, r1, r1
    9e06:	d332      	bcc.n	9e6e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    9e08:	6822      	ldr	r2, [r4, #0]
    9e0a:	1a82      	subs	r2, r0, r2
    9e0c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9e10:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    9e14:	d82b      	bhi.n	9e6e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    9e16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9e1a:	6060      	str	r0, [r4, #4]
    9e1c:	4630      	mov	r0, r6
    9e1e:	f884 8010 	strb.w	r8, [r4, #16]
    9e22:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
    9e26:	f10d 0a20 	add.w	sl, sp, #32
    9e2a:	2d20      	cmp	r5, #32
    9e2c:	bf1c      	itt	ne
    9e2e:	494a      	ldrne	r1, [pc, #296]	; (9f58 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    9e30:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    9e34:	d050      	beq.n	9ed8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    9e36:	bf00      	nop
    9e38:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    9e3c:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    9e40:	6861      	ldr	r1, [r4, #4]
    9e42:	f8d8 6008 	ldr.w	r6, [r8, #8]
    9e46:	f108 0008 	add.w	r0, r8, #8
    9e4a:	1a71      	subs	r1, r6, r1
    9e4c:	0209      	lsls	r1, r1, #8
    9e4e:	17ca      	asrs	r2, r1, #31
    9e50:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    9e54:	1209      	asrs	r1, r1, #8
    9e56:	d42d      	bmi.n	9eb4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x110>
    9e58:	89c0      	ldrh	r0, [r0, #14]
    9e5a:	2800      	cmp	r0, #0
    9e5c:	d03c      	beq.n	9ed8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    9e5e:	89e0      	ldrh	r0, [r4, #14]
    9e60:	b148      	cbz	r0, 9e76 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    9e62:	e039      	b.n	9ed8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    9e64:	f640 3173 	movw	r1, #2931	; 0xb73
    9e68:	2070      	movs	r0, #112	; 0x70
    9e6a:	f002 fa75 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9e6e:	b00d      	add	sp, #52	; 0x34
    9e70:	2001      	movs	r0, #1
    9e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e76:	6820      	ldr	r0, [r4, #0]
    9e78:	900c      	str	r0, [sp, #48]	; 0x30
    9e7a:	f002 f8cd 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9e7e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9e82:	bf08      	it	eq
    9e84:	200d      	moveq	r0, #13
    9e86:	d00b      	beq.n	9ea0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    9e88:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9e8c:	3856      	subs	r0, #86	; 0x56
    9e8e:	bf08      	it	eq
    9e90:	201c      	moveq	r0, #28
    9e92:	d005      	beq.n	9ea0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    9e94:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9e98:	389f      	subs	r0, #159	; 0x9f
    9e9a:	bf14      	ite	ne
    9e9c:	2000      	movne	r0, #0
    9e9e:	2032      	moveq	r0, #50	; 0x32
    9ea0:	1c41      	adds	r1, r0, #1
    9ea2:	980c      	ldr	r0, [sp, #48]	; 0x30
    9ea4:	1a30      	subs	r0, r6, r0
    9ea6:	0200      	lsls	r0, r0, #8
    9ea8:	17c2      	asrs	r2, r0, #31
    9eaa:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    9eae:	1200      	asrs	r0, r0, #8
    9eb0:	4288      	cmp	r0, r1
    9eb2:	da11      	bge.n	9ed8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    9eb4:	f88a 5000 	strb.w	r5, [sl]
    9eb8:	f898 1018 	ldrb.w	r1, [r8, #24]
    9ebc:	7c20      	ldrb	r0, [r4, #16]
    9ebe:	4281      	cmp	r1, r0
    9ec0:	d805      	bhi.n	9ece <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    9ec2:	9802      	ldr	r0, [sp, #8]
    9ec4:	6060      	str	r0, [r4, #4]
    9ec6:	b00d      	add	sp, #52	; 0x34
    9ec8:	2002      	movs	r0, #2
    9eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ece:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    9ed2:	7845      	ldrb	r5, [r0, #1]
    9ed4:	2d20      	cmp	r5, #32
    9ed6:	d1af      	bne.n	9e38 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x94>
    9ed8:	2005      	movs	r0, #5
    9eda:	f001 fd67 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9ede:	4c1c      	ldr	r4, [pc, #112]	; (9f50 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    9ee0:	f04f 30ff 	mov.w	r0, #4294967295
    9ee4:	6060      	str	r0, [r4, #4]
    9ee6:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    9eea:	f89d 2020 	ldrb.w	r2, [sp, #32]
    9eee:	2120      	movs	r1, #32
    9ef0:	2a20      	cmp	r2, #32
    9ef2:	d003      	beq.n	9efc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x158>
    9ef4:	2005      	movs	r0, #5
    9ef6:	f7fe ff09 	bl	8d0c <MPSL_IRQ_RADIO_Handler+0x40>
    9efa:	e004      	b.n	9f06 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x162>
    9efc:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    9f00:	4420      	add	r0, r4
    9f02:	f890 0020 	ldrb.w	r0, [r0, #32]
    9f06:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
    9f0a:	4913      	ldr	r1, [pc, #76]	; (9f58 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    9f0c:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    9f10:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
    9f14:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    9f18:	7048      	strb	r0, [r1, #1]
    9f1a:	6820      	ldr	r0, [r4, #0]
    9f1c:	4438      	add	r0, r7
    9f1e:	6020      	str	r0, [r4, #0]
    9f20:	20ff      	movs	r0, #255	; 0xff
    9f22:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    9f26:	7e60      	ldrb	r0, [r4, #25]
    9f28:	2801      	cmp	r0, #1
    9f2a:	d105      	bne.n	9f38 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x194>
    9f2c:	68e0      	ldr	r0, [r4, #12]
    9f2e:	1e40      	subs	r0, r0, #1
    9f30:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9f34:	f001 fb9e 	bl	b674 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    9f38:	f89d 0020 	ldrb.w	r0, [sp, #32]
    9f3c:	2820      	cmp	r0, #32
    9f3e:	d003      	beq.n	9f48 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a4>
    9f40:	4806      	ldr	r0, [pc, #24]	; (9f5c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b8>)
    9f42:	7840      	ldrb	r0, [r0, #1]
    9f44:	f002 fadc 	bl	c500 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9f48:	b00d      	add	sp, #52	; 0x34
    9f4a:	2000      	movs	r0, #0
    9f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f50:	200013cc 	.word	0x200013cc
    9f54:	0f424000 	.word	0x0f424000
    9f58:	2000134c 	.word	0x2000134c
    9f5c:	200002d0 	.word	0x200002d0

00009f60 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    9f60:	b570      	push	{r4, r5, r6, lr}
    9f62:	4a24      	ldr	r2, [pc, #144]	; (9ff4 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x94>)
    9f64:	f892 1032 	ldrb.w	r1, [r2, #50]	; 0x32
    9f68:	2920      	cmp	r1, #32
    9f6a:	d03a      	beq.n	9fe2 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x82>
    9f6c:	f892 1032 	ldrb.w	r1, [r2, #50]	; 0x32
    9f70:	f5a2 6380 	sub.w	r3, r2, #1024	; 0x400
    9f74:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    9f78:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
    9f7c:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
    9f80:	f892 4031 	ldrb.w	r4, [r2, #49]	; 0x31
    9f84:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    9f88:	4411      	add	r1, r2
    9f8a:	f891 1020 	ldrb.w	r1, [r1, #32]
    9f8e:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    9f92:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    9f96:	2920      	cmp	r1, #32
    9f98:	d028      	beq.n	9fec <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8c>
    9f9a:	ebc1 05c1 	rsb	r5, r1, r1, lsl #3
    9f9e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    9fa2:	7e2d      	ldrb	r5, [r5, #24]
    9fa4:	4285      	cmp	r5, r0
    9fa6:	bf84      	itt	hi
    9fa8:	eb04 0141 	addhi.w	r1, r4, r1, lsl #1
    9fac:	7849      	ldrbhi	r1, [r1, #1]
    9fae:	d8f2      	bhi.n	9f96 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x36>
    9fb0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    9fb4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    9fb8:	f8dc 000c 	ldr.w	r0, [ip, #12]
    9fbc:	6889      	ldr	r1, [r1, #8]
    9fbe:	6814      	ldr	r4, [r2, #0]
    9fc0:	1a08      	subs	r0, r1, r0
    9fc2:	0200      	lsls	r0, r0, #8
    9fc4:	17c1      	asrs	r1, r0, #31
    9fc6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    9fca:	1200      	asrs	r0, r0, #8
    9fcc:	d407      	bmi.n	9fde <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7e>
    9fce:	f006 f9bb 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9fd2:	f104 0165 	add.w	r1, r4, #101	; 0x65
    9fd6:	4288      	cmp	r0, r1
    9fd8:	bf24      	itt	cs
    9fda:	1b00      	subcs	r0, r0, r4
    9fdc:	bd70      	popcs	{r4, r5, r6, pc}
    9fde:	2000      	movs	r0, #0
    9fe0:	bd70      	pop	{r4, r5, r6, pc}
    9fe2:	f640 3145 	movw	r1, #2885	; 0xb45
    9fe6:	2070      	movs	r0, #112	; 0x70
    9fe8:	f002 f9b6 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9fec:	f04f 30ff 	mov.w	r0, #4294967295
    9ff0:	bd70      	pop	{r4, r5, r6, pc}
    9ff2:	0000      	.short	0x0000
    9ff4:	200013cc 	.word	0x200013cc

00009ff8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    9ff8:	4806      	ldr	r0, [pc, #24]	; (a014 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    9ffa:	b510      	push	{r4, lr}
    9ffc:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
    a000:	2920      	cmp	r1, #32
    a002:	bf1c      	itt	ne
    a004:	7e00      	ldrbne	r0, [r0, #24]
    a006:	bd10      	popne	{r4, pc}
    a008:	f640 316d 	movw	r1, #2925	; 0xb6d
    a00c:	2070      	movs	r0, #112	; 0x70
    a00e:	f002 f9a3 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a012:	0000      	.short	0x0000
    a014:	200013cc 	.word	0x200013cc

0000a018 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    a018:	b570      	push	{r4, r5, r6, lr}
    a01a:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
    a01e:	4809      	ldr	r0, [pc, #36]	; (a044 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x2c>)
    a020:	eb00 0481 	add.w	r4, r0, r1, lsl #2
    a024:	4908      	ldr	r1, [pc, #32]	; (a048 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x30>)
    a026:	6920      	ldr	r0, [r4, #16]
    a028:	fba0 5601 	umull	r5, r6, r0, r1
    a02c:	68a0      	ldr	r0, [r4, #8]
    a02e:	f006 f98b 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a032:	8ae1      	ldrh	r1, [r4, #22]
    a034:	7d22      	ldrb	r2, [r4, #20]
    a036:	1c40      	adds	r0, r0, #1
    a038:	4411      	add	r1, r2
    a03a:	4408      	add	r0, r1
    a03c:	1940      	adds	r0, r0, r5
    a03e:	f146 0100 	adc.w	r1, r6, #0
    a042:	bd70      	pop	{r4, r5, r6, pc}
    a044:	20000fcc 	.word	0x20000fcc
    a048:	1e848000 	.word	0x1e848000

0000a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    a04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a04e:	4d6f      	ldr	r5, [pc, #444]	; (a20c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    a050:	2601      	movs	r6, #1
    a052:	f505 6480 	add.w	r4, r5, #1024	; 0x400
    a056:	4a6e      	ldr	r2, [pc, #440]	; (a210 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    a058:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    a05a:	2808      	cmp	r0, #8
    a05c:	d272      	bcs.n	a144 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    a05e:	e8df f000 	tbb	[pc, r0]
    a062:	7704      	.short	0x7704
    a064:	44cfb19f 	.word	0x44cfb19f
    a068:	bbb6      	.short	0xbbb6
    a06a:	f1b1 3fff 	cmp.w	r1, #4294967295
    a06e:	d104      	bne.n	a07a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2e>
    a070:	f001 fff4 	bl	c05c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a074:	f001 fa24 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a078:	62e0      	str	r0, [r4, #44]	; 0x2c
    a07a:	8ae0      	ldrh	r0, [r4, #22]
    a07c:	b110      	cbz	r0, a084 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x38>
    a07e:	f002 f8f3 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a082:	b180      	cbz	r0, a0a6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    a084:	f7ff fcd8 	bl	9a38 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a088:	20ff      	movs	r0, #255	; 0xff
    a08a:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    a08e:	6861      	ldr	r1, [r4, #4]
    a090:	f1b1 3fff 	cmp.w	r1, #4294967295
    a094:	d003      	beq.n	a09e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x52>
    a096:	2005      	movs	r0, #5
    a098:	f001 fbd2 	bl	b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    a09c:	b140      	cbz	r0, a0b0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x64>
    a09e:	7e60      	ldrb	r0, [r4, #25]
    a0a0:	2801      	cmp	r0, #1
    a0a2:	d110      	bne.n	a0c6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x7a>
    a0a4:	e009      	b.n	a0ba <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6e>
    a0a6:	f640 0169 	movw	r1, #2153	; 0x869
    a0aa:	2070      	movs	r0, #112	; 0x70
    a0ac:	f002 f954 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a0b0:	f640 016e 	movw	r1, #2158	; 0x86e
    a0b4:	2070      	movs	r0, #112	; 0x70
    a0b6:	f002 f94f 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a0ba:	68e0      	ldr	r0, [r4, #12]
    a0bc:	1e40      	subs	r0, r0, #1
    a0be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a0c2:	f001 fad7 	bl	b674 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    a0c6:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a0ca:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a0ce:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a0d2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a0d6:	6840      	ldr	r0, [r0, #4]
    a0d8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a0dc:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a0e0:	b001      	add	sp, #4
    a0e2:	2101      	movs	r1, #1
    a0e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a0e8:	4710      	bx	r2
    a0ea:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    a0ee:	b158      	cbz	r0, a108 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xbc>
    a0f0:	f1b1 3fff 	cmp.w	r1, #4294967295
    a0f4:	d104      	bne.n	a100 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb4>
    a0f6:	f001 ffb1 	bl	c05c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a0fa:	f001 f9e1 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a0fe:	62e0      	str	r0, [r4, #44]	; 0x2c
    a100:	2000      	movs	r0, #0
    a102:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    a106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a108:	f7ff fc96 	bl	9a38 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a10c:	f04f 30ff 	mov.w	r0, #4294967295
    a110:	6060      	str	r0, [r4, #4]
    a112:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    a116:	f88d 0000 	strb.w	r0, [sp]
    a11a:	f89d 0000 	ldrb.w	r0, [sp]
    a11e:	b190      	cbz	r0, a146 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    a120:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a124:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a128:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a12c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a130:	6840      	ldr	r0, [r0, #4]
    a132:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a136:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a13a:	b001      	add	sp, #4
    a13c:	2106      	movs	r1, #6
    a13e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a142:	4710      	bx	r2
    a144:	e05c      	b.n	a200 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>
    a146:	f640 0185 	movw	r1, #2181	; 0x885
    a14a:	2070      	movs	r0, #112	; 0x70
    a14c:	f002 f904 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a150:	f7ff fc72 	bl	9a38 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a154:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    a158:	f002 f886 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a15c:	b120      	cbz	r0, a168 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11c>
    a15e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    a160:	f1b0 3fff 	cmp.w	r0, #4294967295
    a164:	d005      	beq.n	a172 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    a166:	e009      	b.n	a17c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x130>
    a168:	f640 0193 	movw	r1, #2195	; 0x893
    a16c:	2070      	movs	r0, #112	; 0x70
    a16e:	f002 f8f3 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a172:	f001 ff73 	bl	c05c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a176:	f001 f9a3 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a17a:	62e0      	str	r0, [r4, #44]	; 0x2c
    a17c:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a180:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a184:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a188:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a18c:	6840      	ldr	r0, [r0, #4]
    a18e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a192:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a196:	b001      	add	sp, #4
    a198:	2100      	movs	r1, #0
    a19a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a19e:	4710      	bx	r2
    a1a0:	f001 fd44 	bl	bc2c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    a1a4:	8ae0      	ldrh	r0, [r4, #22]
    a1a6:	b110      	cbz	r0, a1ae <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x162>
    a1a8:	f002 f85e 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a1ac:	b128      	cbz	r0, a1ba <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x16e>
    a1ae:	f001 fd51 	bl	bc54 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    a1b2:	2800      	cmp	r0, #0
    a1b4:	bf18      	it	ne
    a1b6:	7766      	strbne	r6, [r4, #29]
    a1b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a1ba:	f640 019d 	movw	r1, #2205	; 0x89d
    a1be:	2070      	movs	r0, #112	; 0x70
    a1c0:	f002 f8ca 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a1c4:	4813      	ldr	r0, [pc, #76]	; (a214 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    a1c6:	6006      	str	r6, [r0, #0]
    a1c8:	6890      	ldr	r0, [r2, #8]
    a1ca:	6006      	str	r6, [r0, #0]
    a1cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a1ce:	7810      	ldrb	r0, [r2, #0]
    a1d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a1d4:	f002 b994 	b.w	c500 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a1d8:	f7ff fc2e 	bl	9a38 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a1dc:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a1e0:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a1e4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a1e8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a1ec:	6840      	ldr	r0, [r0, #4]
    a1ee:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a1f2:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a1f6:	b001      	add	sp, #4
    a1f8:	2105      	movs	r1, #5
    a1fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a1fe:	4710      	bx	r2
    a200:	f44f 610b 	mov.w	r1, #2224	; 0x8b0
    a204:	2070      	movs	r0, #112	; 0x70
    a206:	f002 f8a7 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a20a:	0000      	.short	0x0000
    a20c:	20000fcc 	.word	0x20000fcc
    a210:	200002d0 	.word	0x200002d0
    a214:	40000508 	.word	0x40000508

0000a218 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    a218:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a21c:	4682      	mov	sl, r0
    a21e:	48ef      	ldr	r0, [pc, #956]	; (a5dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c4>)
    a220:	b095      	sub	sp, #84	; 0x54
    a222:	6800      	ldr	r0, [r0, #0]
    a224:	4dee      	ldr	r5, [pc, #952]	; (a5e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>)
    a226:	05c0      	lsls	r0, r0, #23
    a228:	0dc0      	lsrs	r0, r0, #23
    a22a:	d00e      	beq.n	a24a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    a22c:	3810      	subs	r0, #16
    a22e:	b240      	sxtb	r0, r0
    a230:	2800      	cmp	r0, #0
    a232:	bfb8      	it	lt
    a234:	f000 000f 	andlt.w	r0, r0, #15
    a238:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a23c:	bfac      	ite	ge
    a23e:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a242:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a246:	0940      	lsrs	r0, r0, #5
    a248:	d00d      	beq.n	a266 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    a24a:	9816      	ldr	r0, [sp, #88]	; 0x58
    a24c:	f04f 0b00 	mov.w	fp, #0
    a250:	7800      	ldrb	r0, [r0, #0]
    a252:	2800      	cmp	r0, #0
    a254:	bf18      	it	ne
    a256:	2801      	cmpne	r0, #1
    a258:	d018      	beq.n	a28c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    a25a:	f240 713b 	movw	r1, #1851	; 0x73b
    a25e:	f04f 0070 	mov.w	r0, #112	; 0x70
    a262:	f002 f879 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a266:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    a26a:	f04f 0b01 	mov.w	fp, #1
    a26e:	2820      	cmp	r0, #32
    a270:	d007      	beq.n	a282 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    a272:	9816      	ldr	r0, [sp, #88]	; 0x58
    a274:	7800      	ldrb	r0, [r0, #0]
    a276:	b148      	cbz	r0, a28c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    a278:	f240 7137 	movw	r1, #1847	; 0x737
    a27c:	2070      	movs	r0, #112	; 0x70
    a27e:	f002 f86b 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a282:	f240 7134 	movw	r1, #1844	; 0x734
    a286:	2070      	movs	r0, #112	; 0x70
    a288:	f002 f866 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a28c:	4cd5      	ldr	r4, [pc, #852]	; (a5e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3cc>)
    a28e:	b124      	cbz	r4, a29a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    a290:	2100      	movs	r1, #0
    a292:	f240 703e 	movw	r0, #1854	; 0x73e
    a296:	f3af 8000 	nop.w
    a29a:	2000      	movs	r0, #0
    a29c:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    a2a0:	49d1      	ldr	r1, [pc, #836]	; (a5e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d0>)
    a2a2:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    a2a6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    a2aa:	f04f 0901 	mov.w	r9, #1
    a2ae:	9000      	str	r0, [sp, #0]
    a2b0:	b124      	cbz	r4, a2bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    a2b2:	2100      	movs	r1, #0
    a2b4:	f240 7049 	movw	r0, #1865	; 0x749
    a2b8:	f3af 8000 	nop.w
    a2bc:	f1b9 0f00 	cmp.w	r9, #0
    a2c0:	d00a      	beq.n	a2d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc0>
    a2c2:	bf00      	nop
    a2c4:	f895 6031 	ldrb.w	r6, [r5, #49]	; 0x31
    a2c8:	f04f 0800 	mov.w	r8, #0
    a2cc:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    a2d0:	f1bb 0f00 	cmp.w	fp, #0
    a2d4:	d007      	beq.n	a2e6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xce>
    a2d6:	e038      	b.n	a34a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x132>
    a2d8:	48c4      	ldr	r0, [pc, #784]	; (a5ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    a2da:	2800      	cmp	r0, #0
    a2dc:	bf18      	it	ne
    a2de:	f3af 8000 	nopne.w
    a2e2:	b662      	cpsie	i
    a2e4:	e7ee      	b.n	a2c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    a2e6:	4637      	mov	r7, r6
    a2e8:	2001      	movs	r0, #1
    a2ea:	ea20 0607 	bic.w	r6, r0, r7
    a2ee:	48c0      	ldr	r0, [pc, #768]	; (a5f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    a2f0:	2240      	movs	r2, #64	; 0x40
    a2f2:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    a2f6:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    a2fa:	f006 f9b8 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a2fe:	b124      	cbz	r4, a30a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf2>
    a300:	2100      	movs	r1, #0
    a302:	f240 505e 	movw	r0, #1374	; 0x55e
    a306:	f3af 8000 	nop.w
    a30a:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    a30e:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a312:	4429      	add	r1, r5
    a314:	4428      	add	r0, r5
    a316:	8c0a      	ldrh	r2, [r1, #32]
    a318:	8402      	strh	r2, [r0, #32]
    a31a:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    a31e:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    a322:	b124      	cbz	r4, a32e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    a324:	2100      	movs	r1, #0
    a326:	f240 5062 	movw	r0, #1378	; 0x562
    a32a:	f3af 8000 	nop.w
    a32e:	b124      	cbz	r4, a33a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    a330:	2100      	movs	r1, #0
    a332:	f240 7053 	movw	r0, #1875	; 0x753
    a336:	f3af 8000 	nop.w
    a33a:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a33e:	f88d 0008 	strb.w	r0, [sp, #8]
    a342:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a346:	2800      	cmp	r0, #0
    a348:	d1b2      	bne.n	a2b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a34a:	b124      	cbz	r4, a356 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    a34c:	2100      	movs	r1, #0
    a34e:	f240 705d 	movw	r0, #1885	; 0x75d
    a352:	f3af 8000 	nop.w
    a356:	a802      	add	r0, sp, #8
    a358:	f001 f8b8 	bl	b4cc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    a35c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    a360:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    a364:	4633      	mov	r3, r6
    a366:	aa09      	add	r2, sp, #36	; 0x24
    a368:	a80e      	add	r0, sp, #56	; 0x38
    a36a:	9916      	ldr	r1, [sp, #88]	; 0x58
    a36c:	f7ff fa02 	bl	9774 <MPSL_IRQ_RADIO_Handler+0xaa8>
    a370:	b124      	cbz	r4, a37c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x164>
    a372:	2100      	movs	r1, #0
    a374:	f240 7064 	movw	r0, #1892	; 0x764
    a378:	f3af 8000 	nop.w
    a37c:	4a9c      	ldr	r2, [pc, #624]	; (a5f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    a37e:	990e      	ldr	r1, [sp, #56]	; 0x38
    a380:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    a384:	a809      	add	r0, sp, #36	; 0x24
    a386:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
    a38a:	2a01      	cmp	r2, #1
    a38c:	bf18      	it	ne
    a38e:	2a02      	cmpne	r2, #2
    a390:	d138      	bne.n	a404 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    a392:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a396:	eba2 0201 	sub.w	r2, r2, r1
    a39a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    a39e:	eba3 0101 	sub.w	r1, r3, r1
    a3a2:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    a3a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a3aa:	2a02      	cmp	r2, #2
    a3ac:	d364      	bcc.n	a478 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    a3ae:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    a3b2:	bf98      	it	ls
    a3b4:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    a3b8:	d85e      	bhi.n	a478 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    a3ba:	f04f 0801 	mov.w	r8, #1
    a3be:	ab14      	add	r3, sp, #80	; 0x50
    a3c0:	aa13      	add	r2, sp, #76	; 0x4c
    a3c2:	4631      	mov	r1, r6
    a3c4:	f7fe fe96 	bl	90f4 <MPSL_IRQ_RADIO_Handler+0x428>
    a3c8:	2800      	cmp	r0, #0
    a3ca:	d05d      	beq.n	a488 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    a3cc:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    a3d0:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    a3d4:	4633      	mov	r3, r6
    a3d6:	428a      	cmp	r2, r1
    a3d8:	d05a      	beq.n	a490 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x278>
    a3da:	2005      	movs	r0, #5
    a3dc:	f7fe fc96 	bl	8d0c <MPSL_IRQ_RADIO_Handler+0x40>
    a3e0:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    a3e4:	7048      	strb	r0, [r1, #1]
    a3e6:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    a3ea:	2820      	cmp	r0, #32
    a3ec:	bf1c      	itt	ne
    a3ee:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    a3f2:	f880 a001 	strbne.w	sl, [r0, #1]
    a3f6:	d057      	beq.n	a4a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x290>
    a3f8:	4632      	mov	r2, r6
    a3fa:	4651      	mov	r1, sl
    a3fc:	f05f 0003 	movs.w	r0, #3
    a400:	f7ff fbcc 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    a404:	b124      	cbz	r4, a410 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f8>
    a406:	2100      	movs	r1, #0
    a408:	f240 7069 	movw	r0, #1897	; 0x769
    a40c:	f3af 8000 	nop.w
    a410:	4878      	ldr	r0, [pc, #480]	; (a5f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3dc>)
    a412:	2800      	cmp	r0, #0
    a414:	bf18      	it	ne
    a416:	f3af 8000 	nopne.w
    a41a:	f3ef 8910 	mrs	r9, PRIMASK
    a41e:	b672      	cpsid	i
    a420:	b124      	cbz	r4, a42c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x214>
    a422:	2100      	movs	r1, #0
    a424:	f240 706f 	movw	r0, #1903	; 0x76f
    a428:	f3af 8000 	nop.w
    a42c:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a430:	f88d 0008 	strb.w	r0, [sp, #8]
    a434:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a438:	2800      	cmp	r0, #0
    a43a:	f47f af39 	bne.w	a2b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a43e:	b124      	cbz	r4, a44a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x232>
    a440:	2100      	movs	r1, #0
    a442:	f240 7077 	movw	r0, #1911	; 0x777
    a446:	f3af 8000 	nop.w
    a44a:	af09      	add	r7, sp, #36	; 0x24
    a44c:	9800      	ldr	r0, [sp, #0]
    a44e:	e897 100e 	ldmia.w	r7, {r1, r2, r3, ip}
    a452:	f100 0708 	add.w	r7, r0, #8
    a456:	f1b8 0f00 	cmp.w	r8, #0
    a45a:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    a45e:	990d      	ldr	r1, [sp, #52]	; 0x34
    a460:	6181      	str	r1, [r0, #24]
    a462:	d051      	beq.n	a508 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    a464:	b124      	cbz	r4, a470 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    a466:	2100      	movs	r1, #0
    a468:	f240 7084 	movw	r0, #1924	; 0x784
    a46c:	f3af 8000 	nop.w
    a470:	f1bb 0f00 	cmp.w	fp, #0
    a474:	d139      	bne.n	a4ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a476:	e01f      	b.n	a4b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a0>
    a478:	4632      	mov	r2, r6
    a47a:	4651      	mov	r1, sl
    a47c:	2004      	movs	r0, #4
    a47e:	f7ff fb8d 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    a482:	f04f 0801 	mov.w	r8, #1
    a486:	e7bd      	b.n	a404 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    a488:	4632      	mov	r2, r6
    a48a:	4651      	mov	r1, sl
    a48c:	2004      	movs	r0, #4
    a48e:	e7b7      	b.n	a400 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e8>
    a490:	2920      	cmp	r1, #32
    a492:	bf19      	ittee	ne
    a494:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    a498:	7840      	ldrbne	r0, [r0, #1]
    a49a:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    a49e:	4428      	addeq	r0, r5
    a4a0:	bf08      	it	eq
    a4a2:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    a4a6:	e79b      	b.n	a3e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    a4a8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    a4ac:	4429      	add	r1, r5
    a4ae:	f881 a020 	strb.w	sl, [r1, #32]
    a4b2:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    a4b6:	e79f      	b.n	a3f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e0>
    a4b8:	9811      	ldr	r0, [sp, #68]	; 0x44
    a4ba:	f010 0fff 	tst.w	r0, #255	; 0xff
    a4be:	d014      	beq.n	a4ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a4c0:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    a4c4:	2820      	cmp	r0, #32
    a4c6:	d110      	bne.n	a4ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a4c8:	b124      	cbz	r4, a4d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2bc>
    a4ca:	2100      	movs	r1, #0
    a4cc:	f240 7089 	movw	r0, #1929	; 0x789
    a4d0:	f3af 8000 	nop.w
    a4d4:	4631      	mov	r1, r6
    a4d6:	2002      	movs	r0, #2
    a4d8:	f7ff fb92 	bl	9c00 <MPSL_IRQ_RADIO_Handler+0xf34>
    a4dc:	9010      	str	r0, [sp, #64]	; 0x40
    a4de:	b920      	cbnz	r0, a4ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a4e0:	9816      	ldr	r0, [sp, #88]	; 0x58
    a4e2:	7800      	ldrb	r0, [r0, #0]
    a4e4:	b1e8      	cbz	r0, a522 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30a>
    a4e6:	2801      	cmp	r0, #1
    a4e8:	d02a      	beq.n	a540 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    a4ea:	b124      	cbz	r4, a4f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    a4ec:	2100      	movs	r1, #0
    a4ee:	f240 70a6 	movw	r0, #1958	; 0x7a6
    a4f2:	f3af 8000 	nop.w
    a4f6:	20ff      	movs	r0, #255	; 0xff
    a4f8:	f1bb 0f00 	cmp.w	fp, #0
    a4fc:	bf18      	it	ne
    a4fe:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
    a502:	d026      	beq.n	a552 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33a>
    a504:	f04f 0801 	mov.w	r8, #1
    a508:	b124      	cbz	r4, a514 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
    a50a:	2100      	movs	r1, #0
    a50c:	f240 70b7 	movw	r0, #1975	; 0x7b7
    a510:	f3af 8000 	nop.w
    a514:	9810      	ldr	r0, [sp, #64]	; 0x40
    a516:	4e38      	ldr	r6, [pc, #224]	; (a5f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e0>)
    a518:	2802      	cmp	r0, #2
    a51a:	d023      	beq.n	a564 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x34c>
    a51c:	2801      	cmp	r0, #1
    a51e:	d029      	beq.n	a574 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
    a520:	e02d      	b.n	a57e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    a522:	b124      	cbz	r4, a52e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x316>
    a524:	2100      	movs	r1, #0
    a526:	f240 7091 	movw	r0, #1937	; 0x791
    a52a:	f3af 8000 	nop.w
    a52e:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    a532:	4651      	mov	r1, sl
    a534:	2004      	movs	r0, #4
    a536:	f7ff fb31 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    a53a:	f04f 0801 	mov.w	r8, #1
    a53e:	e7e3      	b.n	a508 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    a540:	2c00      	cmp	r4, #0
    a542:	f43f aeb5 	beq.w	a2b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a546:	2100      	movs	r1, #0
    a548:	f240 709c 	movw	r0, #1948	; 0x79c
    a54c:	f3af 8000 	nop.w
    a550:	e6ae      	b.n	a2b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a552:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    a556:	2101      	movs	r1, #1
    a558:	4391      	bics	r1, r2
    a55a:	f885 1031 	strb.w	r1, [r5, #49]	; 0x31
    a55e:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    a562:	e7cf      	b.n	a504 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ec>
    a564:	68a8      	ldr	r0, [r5, #8]
    a566:	990e      	ldr	r1, [sp, #56]	; 0x38
    a568:	1a40      	subs	r0, r0, r1
    a56a:	f005 feed 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a56e:	6871      	ldr	r1, [r6, #4]
    a570:	b921      	cbnz	r1, a57c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x364>
    a572:	e004      	b.n	a57e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    a574:	6871      	ldr	r1, [r6, #4]
    a576:	f04f 30ff 	mov.w	r0, #4294967295
    a57a:	b101      	cbz	r1, a57e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    a57c:	4788      	blx	r1
    a57e:	f1b9 0f00 	cmp.w	r9, #0
    a582:	d024      	beq.n	a5ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b6>
    a584:	b124      	cbz	r4, a590 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>
    a586:	2100      	movs	r1, #0
    a588:	f240 70c7 	movw	r0, #1991	; 0x7c7
    a58c:	f3af 8000 	nop.w
    a590:	f1b8 0f00 	cmp.w	r8, #0
    a594:	d011      	beq.n	a5ba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a2>
    a596:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    a59a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    a59e:	4428      	add	r0, r5
    a5a0:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    a5a4:	2820      	cmp	r0, #32
    a5a6:	d008      	beq.n	a5ba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a2>
    a5a8:	b124      	cbz	r4, a5b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39c>
    a5aa:	2100      	movs	r1, #0
    a5ac:	f240 70ce 	movw	r0, #1998	; 0x7ce
    a5b0:	f3af 8000 	nop.w
    a5b4:	7870      	ldrb	r0, [r6, #1]
    a5b6:	f001 ffa3 	bl	c500 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a5ba:	b124      	cbz	r4, a5c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ae>
    a5bc:	2100      	movs	r1, #0
    a5be:	f240 70d3 	movw	r0, #2003	; 0x7d3
    a5c2:	f3af 8000 	nop.w
    a5c6:	b017      	add	sp, #92	; 0x5c
    a5c8:	4640      	mov	r0, r8
    a5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a5ce:	4807      	ldr	r0, [pc, #28]	; (a5ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    a5d0:	2800      	cmp	r0, #0
    a5d2:	bf18      	it	ne
    a5d4:	f3af 8000 	nopne.w
    a5d8:	b662      	cpsie	i
    a5da:	e7d3      	b.n	a584 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36c>
    a5dc:	e000ed04 	.word	0xe000ed04
    a5e0:	200013cc 	.word	0x200013cc
    a5e4:	00000000 	.word	0x00000000
    a5e8:	20000fcc 	.word	0x20000fcc
    a5ec:	00000000 	.word	0x00000000
    a5f0:	2000134c 	.word	0x2000134c
    a5f4:	00000000 	.word	0x00000000
    a5f8:	200002d0 	.word	0x200002d0

0000a5fc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    a5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a600:	4606      	mov	r6, r0
    a602:	7800      	ldrb	r0, [r0, #0]
    a604:	b08d      	sub	sp, #52	; 0x34
    a606:	b118      	cbz	r0, a610 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    a608:	b00d      	add	sp, #52	; 0x34
    a60a:	2000      	movs	r0, #0
    a60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a610:	488c      	ldr	r0, [pc, #560]	; (a844 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>)
    a612:	6800      	ldr	r0, [r0, #0]
    a614:	05c0      	lsls	r0, r0, #23
    a616:	0dc0      	lsrs	r0, r0, #23
    a618:	d00e      	beq.n	a638 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    a61a:	3810      	subs	r0, #16
    a61c:	b240      	sxtb	r0, r0
    a61e:	2800      	cmp	r0, #0
    a620:	bfb8      	it	lt
    a622:	f000 000f 	andlt.w	r0, r0, #15
    a626:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a62a:	bfac      	ite	ge
    a62c:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a630:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a634:	0940      	lsrs	r0, r0, #5
    a636:	d0e7      	beq.n	a608 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    a638:	4d83      	ldr	r5, [pc, #524]	; (a848 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24c>)
    a63a:	4c84      	ldr	r4, [pc, #528]	; (a84c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x250>)
    a63c:	f04f 0b01 	mov.w	fp, #1
    a640:	2700      	movs	r7, #0
    a642:	b125      	cbz	r5, a64e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    a644:	2100      	movs	r1, #0
    a646:	f240 50e5 	movw	r0, #1509	; 0x5e5
    a64a:	f3af 8000 	nop.w
    a64e:	f894 a031 	ldrb.w	sl, [r4, #49]	; 0x31
    a652:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    a656:	f04f 0900 	mov.w	r9, #0
    a65a:	b125      	cbz	r5, a666 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x6a>
    a65c:	2100      	movs	r1, #0
    a65e:	f240 50ea 	movw	r0, #1514	; 0x5ea
    a662:	f3af 8000 	nop.w
    a666:	487a      	ldr	r0, [pc, #488]	; (a850 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>)
    a668:	ea2b 080a 	bic.w	r8, fp, sl
    a66c:	eb00 118a 	add.w	r1, r0, sl, lsl #6
    a670:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    a674:	2240      	movs	r2, #64	; 0x40
    a676:	f005 fffa 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a67a:	b125      	cbz	r5, a686 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x8a>
    a67c:	2100      	movs	r1, #0
    a67e:	f240 505e 	movw	r0, #1374	; 0x55e
    a682:	f3af 8000 	nop.w
    a686:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    a68a:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    a68e:	4421      	add	r1, r4
    a690:	4420      	add	r0, r4
    a692:	8c0a      	ldrh	r2, [r1, #32]
    a694:	8402      	strh	r2, [r0, #32]
    a696:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    a69a:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    a69e:	b125      	cbz	r5, a6aa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xae>
    a6a0:	2100      	movs	r1, #0
    a6a2:	f240 5062 	movw	r0, #1378	; 0x562
    a6a6:	f3af 8000 	nop.w
    a6aa:	b125      	cbz	r5, a6b6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xba>
    a6ac:	2100      	movs	r1, #0
    a6ae:	f240 50ef 	movw	r0, #1519	; 0x5ef
    a6b2:	f3af 8000 	nop.w
    a6b6:	a808      	add	r0, sp, #32
    a6b8:	f000 ff08 	bl	b4cc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    a6bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    a6c0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    a6c4:	4643      	mov	r3, r8
    a6c6:	466a      	mov	r2, sp
    a6c8:	4631      	mov	r1, r6
    a6ca:	a80a      	add	r0, sp, #40	; 0x28
    a6cc:	f7ff f852 	bl	9774 <MPSL_IRQ_RADIO_Handler+0xaa8>
    a6d0:	b125      	cbz	r5, a6dc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe0>
    a6d2:	2100      	movs	r1, #0
    a6d4:	f240 50f5 	movw	r0, #1525	; 0x5f5
    a6d8:	f3af 8000 	nop.w
    a6dc:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a6e0:	2820      	cmp	r0, #32
    a6e2:	d01a      	beq.n	a71a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    a6e4:	68e0      	ldr	r0, [r4, #12]
    a6e6:	9900      	ldr	r1, [sp, #0]
    a6e8:	1a09      	subs	r1, r1, r0
    a6ea:	0209      	lsls	r1, r1, #8
    a6ec:	17ca      	asrs	r2, r1, #31
    a6ee:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    a6f2:	1209      	asrs	r1, r1, #8
    a6f4:	d511      	bpl.n	a71a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    a6f6:	9900      	ldr	r1, [sp, #0]
    a6f8:	4281      	cmp	r1, r0
    a6fa:	d902      	bls.n	a702 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x106>
    a6fc:	9902      	ldr	r1, [sp, #8]
    a6fe:	1c49      	adds	r1, r1, #1
    a700:	9102      	str	r1, [sp, #8]
    a702:	e9dd 2100 	ldrd	r2, r1, [sp]
    a706:	1a89      	subs	r1, r1, r2
    a708:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    a70c:	4408      	add	r0, r1
    a70e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a712:	e9cd 2000 	strd	r2, r0, [sp]
    a716:	f04f 0901 	mov.w	r9, #1
    a71a:	b125      	cbz	r5, a726 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12a>
    a71c:	2100      	movs	r1, #0
    a71e:	f240 50ff 	movw	r0, #1535	; 0x5ff
    a722:	f3af 8000 	nop.w
    a726:	9900      	ldr	r1, [sp, #0]
    a728:	980a      	ldr	r0, [sp, #40]	; 0x28
    a72a:	9a01      	ldr	r2, [sp, #4]
    a72c:	1a09      	subs	r1, r1, r0
    a72e:	1a10      	subs	r0, r2, r0
    a730:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a734:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a738:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    a73c:	bf98      	it	ls
    a73e:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    a742:	d809      	bhi.n	a758 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x15c>
    a744:	4643      	mov	r3, r8
    a746:	4669      	mov	r1, sp
    a748:	4842      	ldr	r0, [pc, #264]	; (a854 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x258>)
    a74a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a74c:	f7fe fb1a 	bl	8d84 <MPSL_IRQ_RADIO_Handler+0xb8>
    a750:	ea59 0000 	orrs.w	r0, r9, r0
    a754:	d129      	bne.n	a7aa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ae>
    a756:	e042      	b.n	a7de <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e2>
    a758:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a75a:	f8bd a00e 	ldrh.w	sl, [sp, #14]
    a75e:	9002      	str	r0, [sp, #8]
    a760:	aa09      	add	r2, sp, #36	; 0x24
    a762:	a907      	add	r1, sp, #28
    a764:	4650      	mov	r0, sl
    a766:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    a76a:	f000 fd3f 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a76e:	f001 fa7b 	bl	bc68 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    a772:	f000 fd1f 	bl	b1b4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a776:	4681      	mov	r9, r0
    a778:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a77c:	2820      	cmp	r0, #32
    a77e:	d03b      	beq.n	a7f8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    a780:	68e0      	ldr	r0, [r4, #12]
    a782:	1d40      	adds	r0, r0, #5
    a784:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a788:	9900      	ldr	r1, [sp, #0]
    a78a:	4281      	cmp	r1, r0
    a78c:	d902      	bls.n	a794 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x198>
    a78e:	9902      	ldr	r1, [sp, #8]
    a790:	1c49      	adds	r1, r1, #1
    a792:	9102      	str	r1, [sp, #8]
    a794:	e9dd 2100 	ldrd	r2, r1, [sp]
    a798:	1a89      	subs	r1, r1, r2
    a79a:	9000      	str	r0, [sp, #0]
    a79c:	4408      	add	r0, r1
    a79e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a7a2:	9001      	str	r0, [sp, #4]
    a7a4:	201f      	movs	r0, #31
    a7a6:	f88d 000c 	strb.w	r0, [sp, #12]
    a7aa:	9800      	ldr	r0, [sp, #0]
    a7ac:	f005 fdcc 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a7b0:	1c41      	adds	r1, r0, #1
    a7b2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    a7b6:	f89d 200c 	ldrb.w	r2, [sp, #12]
    a7ba:	4410      	add	r0, r2
    a7bc:	4408      	add	r0, r1
    a7be:	e9c6 0704 	strd	r0, r7, [r6, #16]
    a7c2:	b125      	cbz	r5, a7ce <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d2>
    a7c4:	2100      	movs	r1, #0
    a7c6:	f240 601a 	movw	r0, #1562	; 0x61a
    a7ca:	f3af 8000 	nop.w
    a7ce:	e9d6 1004 	ldrd	r1, r0, [r6, #16]
    a7d2:	4a21      	ldr	r2, [pc, #132]	; (a858 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25c>)
    a7d4:	9b02      	ldr	r3, [sp, #8]
    a7d6:	fbe3 1002 	umlal	r1, r0, r3, r2
    a7da:	e9c6 1004 	strd	r1, r0, [r6, #16]
    a7de:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    a7e2:	f88d 0014 	strb.w	r0, [sp, #20]
    a7e6:	f89d 0014 	ldrb.w	r0, [sp, #20]
    a7ea:	2800      	cmp	r0, #0
    a7ec:	f47f af29 	bne.w	a642 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x46>
    a7f0:	b00d      	add	sp, #52	; 0x34
    a7f2:	2001      	movs	r0, #1
    a7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a7f8:	f108 0809 	add.w	r8, r8, #9
    a7fc:	f1ba 0f00 	cmp.w	sl, #0
    a800:	d016      	beq.n	a830 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    a802:	f001 fd31 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a806:	b998      	cbnz	r0, a830 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    a808:	f001 fc06 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    a80c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    a810:	bf08      	it	eq
    a812:	200d      	moveq	r0, #13
    a814:	d00b      	beq.n	a82e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    a816:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    a81a:	3856      	subs	r0, #86	; 0x56
    a81c:	bf08      	it	eq
    a81e:	201c      	moveq	r0, #28
    a820:	d005      	beq.n	a82e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    a822:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    a826:	389f      	subs	r0, #159	; 0x9f
    a828:	bf14      	ite	ne
    a82a:	4638      	movne	r0, r7
    a82c:	2032      	moveq	r0, #50	; 0x32
    a82e:	4480      	add	r8, r0
    a830:	9807      	ldr	r0, [sp, #28]
    a832:	4581      	cmp	r9, r0
    a834:	bf84      	itt	hi
    a836:	eba9 0000 	subhi.w	r0, r9, r0
    a83a:	4480      	addhi	r8, r0
    a83c:	f028 407f 	bic.w	r0, r8, #4278190080	; 0xff000000
    a840:	e7a2      	b.n	a788 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x18c>
    a842:	0000      	.short	0x0000
    a844:	e000ed04 	.word	0xe000ed04
    a848:	00000000 	.word	0x00000000
    a84c:	200013cc 	.word	0x200013cc
    a850:	2000134c 	.word	0x2000134c
    a854:	0f424000 	.word	0x0f424000
    a858:	1e848000 	.word	0x1e848000

0000a85c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    a85c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a860:	4d92      	ldr	r5, [pc, #584]	; (aaac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x250>)
    a862:	b08c      	sub	sp, #48	; 0x30
    a864:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    a868:	2000      	movs	r0, #0
    a86a:	9008      	str	r0, [sp, #32]
    a86c:	9006      	str	r0, [sp, #24]
    a86e:	2001      	movs	r0, #1
    a870:	4c8f      	ldr	r4, [pc, #572]	; (aab0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>)
    a872:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    a876:	f04f 0800 	mov.w	r8, #0
    a87a:	4607      	mov	r7, r0
    a87c:	9007      	str	r0, [sp, #28]
    a87e:	b124      	cbz	r4, a88a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    a880:	2100      	movs	r1, #0
    a882:	f240 70e4 	movw	r0, #2020	; 0x7e4
    a886:	f3af 8000 	nop.w
    a88a:	9807      	ldr	r0, [sp, #28]
    a88c:	2800      	cmp	r0, #0
    a88e:	d03c      	beq.n	a90a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    a890:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    a894:	b124      	cbz	r4, a8a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    a896:	2100      	movs	r1, #0
    a898:	f240 70e9 	movw	r0, #2025	; 0x7e9
    a89c:	f3af 8000 	nop.w
    a8a0:	f895 a031 	ldrb.w	sl, [r5, #49]	; 0x31
    a8a4:	2240      	movs	r2, #64	; 0x40
    a8a6:	ea27 060a 	bic.w	r6, r7, sl
    a8aa:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    a8ae:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    a8b2:	4683      	mov	fp, r0
    a8b4:	f005 fedb 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a8b8:	b124      	cbz	r4, a8c4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    a8ba:	2100      	movs	r1, #0
    a8bc:	f240 505e 	movw	r0, #1374	; 0x55e
    a8c0:	f3af 8000 	nop.w
    a8c4:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a8c8:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    a8cc:	4428      	add	r0, r5
    a8ce:	4429      	add	r1, r5
    a8d0:	9000      	str	r0, [sp, #0]
    a8d2:	8c0a      	ldrh	r2, [r1, #32]
    a8d4:	8402      	strh	r2, [r0, #32]
    a8d6:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    a8da:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    a8de:	b124      	cbz	r4, a8ea <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    a8e0:	2100      	movs	r1, #0
    a8e2:	f240 5062 	movw	r0, #1378	; 0x562
    a8e6:	f3af 8000 	nop.w
    a8ea:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a8ee:	f88d 0008 	strb.w	r0, [sp, #8]
    a8f2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a8f6:	b178      	cbz	r0, a918 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    a8f8:	2c00      	cmp	r4, #0
    a8fa:	bf1c      	itt	ne
    a8fc:	2100      	movne	r1, #0
    a8fe:	f240 70ef 	movwne	r0, #2031	; 0x7ef
    a902:	d0bc      	beq.n	a87e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a904:	f3af 8000 	nop.w
    a908:	e7b9      	b.n	a87e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a90a:	486a      	ldr	r0, [pc, #424]	; (aab4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    a90c:	2800      	cmp	r0, #0
    a90e:	bf18      	it	ne
    a910:	f3af 8000 	nopne.w
    a914:	b662      	cpsie	i
    a916:	e7bb      	b.n	a890 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    a918:	b124      	cbz	r4, a924 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    a91a:	2100      	movs	r1, #0
    a91c:	f240 70f3 	movw	r0, #2035	; 0x7f3
    a920:	f3af 8000 	nop.w
    a924:	980c      	ldr	r0, [sp, #48]	; 0x30
    a926:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    a92a:	2803      	cmp	r0, #3
    a92c:	d17e      	bne.n	aa2c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    a92e:	9a00      	ldr	r2, [sp, #0]
    a930:	990c      	ldr	r1, [sp, #48]	; 0x30
    a932:	f892 0020 	ldrb.w	r0, [r2, #32]
    a936:	4288      	cmp	r0, r1
    a938:	bf14      	ite	ne
    a93a:	f04f 0a00 	movne.w	sl, #0
    a93e:	f04f 0a01 	moveq.w	sl, #1
    a942:	f102 0c20 	add.w	ip, r2, #32
    a946:	4683      	mov	fp, r0
    a948:	2220      	movs	r2, #32
    a94a:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    a94e:	e003      	b.n	a958 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    a950:	4602      	mov	r2, r0
    a952:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    a956:	7840      	ldrb	r0, [r0, #1]
    a958:	4288      	cmp	r0, r1
    a95a:	d002      	beq.n	a962 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    a95c:	2820      	cmp	r0, #32
    a95e:	d00a      	beq.n	a976 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    a960:	e7f6      	b.n	a950 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    a962:	2820      	cmp	r0, #32
    a964:	d007      	beq.n	a976 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    a966:	4583      	cmp	fp, r0
    a968:	d107      	bne.n	a97a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    a96a:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    a96e:	7840      	ldrb	r0, [r0, #1]
    a970:	f88c 0000 	strb.w	r0, [ip]
    a974:	e007      	b.n	a986 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    a976:	4640      	mov	r0, r8
    a978:	e00c      	b.n	a994 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    a97a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    a97e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    a982:	7840      	ldrb	r0, [r0, #1]
    a984:	7048      	strb	r0, [r1, #1]
    a986:	b124      	cbz	r4, a992 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    a988:	2100      	movs	r1, #0
    a98a:	f240 40c9 	movw	r0, #1225	; 0x4c9
    a98e:	f3af 8000 	nop.w
    a992:	4638      	mov	r0, r7
    a994:	46c3      	mov	fp, r8
    a996:	ea10 0f0a 	tst.w	r0, sl
    a99a:	bf18      	it	ne
    a99c:	46bb      	movne	fp, r7
    a99e:	2800      	cmp	r0, #0
    a9a0:	d04e      	beq.n	aa40 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    a9a2:	b124      	cbz	r4, a9ae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    a9a4:	2100      	movs	r1, #0
    a9a6:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    a9aa:	f3af 8000 	nop.w
    a9ae:	4632      	mov	r2, r6
    a9b0:	2001      	movs	r0, #1
    a9b2:	990c      	ldr	r1, [sp, #48]	; 0x30
    a9b4:	f7ff f8f2 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    a9b8:	b124      	cbz	r4, a9c4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    a9ba:	2100      	movs	r1, #0
    a9bc:	f640 0001 	movw	r0, #2049	; 0x801
    a9c0:	f3af 8000 	nop.w
    a9c4:	483c      	ldr	r0, [pc, #240]	; (aab8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25c>)
    a9c6:	2800      	cmp	r0, #0
    a9c8:	bf18      	it	ne
    a9ca:	f3af 8000 	nopne.w
    a9ce:	f3ef 8010 	mrs	r0, PRIMASK
    a9d2:	b672      	cpsid	i
    a9d4:	9007      	str	r0, [sp, #28]
    a9d6:	b124      	cbz	r4, a9e2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    a9d8:	2100      	movs	r1, #0
    a9da:	f640 0006 	movw	r0, #2054	; 0x806
    a9de:	f3af 8000 	nop.w
    a9e2:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a9e6:	f88d 0008 	strb.w	r0, [sp, #8]
    a9ea:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a9ee:	b138      	cbz	r0, aa00 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    a9f0:	2c00      	cmp	r4, #0
    a9f2:	bf1c      	itt	ne
    a9f4:	2100      	movne	r1, #0
    a9f6:	f640 000a 	movwne	r0, #2058	; 0x80a
    a9fa:	f43f af40 	beq.w	a87e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a9fe:	e781      	b.n	a904 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    aa00:	f1bb 0f00 	cmp.w	fp, #0
    aa04:	d009      	beq.n	aa1a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    aa06:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    aa0a:	2820      	cmp	r0, #32
    aa0c:	d105      	bne.n	aa1a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    aa0e:	4631      	mov	r1, r6
    aa10:	2002      	movs	r0, #2
    aa12:	f7ff f8f5 	bl	9c00 <MPSL_IRQ_RADIO_Handler+0xf34>
    aa16:	9006      	str	r0, [sp, #24]
    aa18:	b1f8      	cbz	r0, aa5a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    aa1a:	b124      	cbz	r4, aa26 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    aa1c:	2100      	movs	r1, #0
    aa1e:	f640 001e 	movw	r0, #2078	; 0x81e
    aa22:	f3af 8000 	nop.w
    aa26:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    aa2a:	e000      	b.n	aa2e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    aa2c:	e008      	b.n	aa40 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    aa2e:	ea27 0000 	bic.w	r0, r7, r0
    aa32:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    aa36:	20ff      	movs	r0, #255	; 0xff
    aa38:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    aa3c:	2001      	movs	r0, #1
    aa3e:	9008      	str	r0, [sp, #32]
    aa40:	b124      	cbz	r4, aa4c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    aa42:	2100      	movs	r1, #0
    aa44:	f640 0027 	movw	r0, #2087	; 0x827
    aa48:	f3af 8000 	nop.w
    aa4c:	9806      	ldr	r0, [sp, #24]
    aa4e:	4e1b      	ldr	r6, [pc, #108]	; (aabc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    aa50:	2802      	cmp	r0, #2
    aa52:	d009      	beq.n	aa68 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    aa54:	2801      	cmp	r0, #1
    aa56:	d010      	beq.n	aa7a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21e>
    aa58:	e014      	b.n	aa84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    aa5a:	b19c      	cbz	r4, aa84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    aa5c:	2100      	movs	r1, #0
    aa5e:	f640 0019 	movw	r0, #2073	; 0x819
    aa62:	f3af 8000 	nop.w
    aa66:	e7ec      	b.n	aa42 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    aa68:	f000 fd2a 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    aa6c:	68a9      	ldr	r1, [r5, #8]
    aa6e:	1a08      	subs	r0, r1, r0
    aa70:	f005 fc6a 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    aa74:	6871      	ldr	r1, [r6, #4]
    aa76:	b921      	cbnz	r1, aa82 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x226>
    aa78:	e004      	b.n	aa84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    aa7a:	6871      	ldr	r1, [r6, #4]
    aa7c:	f04f 30ff 	mov.w	r0, #4294967295
    aa80:	b101      	cbz	r1, aa84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    aa82:	4788      	blx	r1
    aa84:	9807      	ldr	r0, [sp, #28]
    aa86:	b148      	cbz	r0, aa9c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x240>
    aa88:	b124      	cbz	r4, aa94 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x238>
    aa8a:	2100      	movs	r1, #0
    aa8c:	f640 003c 	movw	r0, #2108	; 0x83c
    aa90:	f3af 8000 	nop.w
    aa94:	9808      	ldr	r0, [sp, #32]
    aa96:	b00d      	add	sp, #52	; 0x34
    aa98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aa9c:	4805      	ldr	r0, [pc, #20]	; (aab4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    aa9e:	2800      	cmp	r0, #0
    aaa0:	bf18      	it	ne
    aaa2:	f3af 8000 	nopne.w
    aaa6:	b662      	cpsie	i
    aaa8:	e7ee      	b.n	aa88 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>
    aaaa:	0000      	.short	0x0000
    aaac:	200013cc 	.word	0x200013cc
	...
    aabc:	200002d0 	.word	0x200002d0

0000aac0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    aac0:	b510      	push	{r4, lr}
    aac2:	2820      	cmp	r0, #32
    aac4:	d211      	bcs.n	aaea <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    aac6:	490e      	ldr	r1, [pc, #56]	; (ab00 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    aac8:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    aacc:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    aad0:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    aad4:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    aad8:	b13b      	cbz	r3, aaea <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    aada:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    aade:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    aae2:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    aae6:	2a01      	cmp	r2, #1
    aae8:	d001      	beq.n	aaee <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    aaea:	2000      	movs	r0, #0
    aaec:	bd10      	pop	{r4, pc}
    aaee:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
    aaf2:	4601      	mov	r1, r0
    aaf4:	2000      	movs	r0, #0
    aaf6:	f7ff f851 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    aafa:	2001      	movs	r0, #1
    aafc:	bd10      	pop	{r4, pc}
    aafe:	0000      	.short	0x0000
    ab00:	200013cc 	.word	0x200013cc

0000ab04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    ab04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab08:	4e86      	ldr	r6, [pc, #536]	; (ad24 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    ab0a:	4680      	mov	r8, r0
    ab0c:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    ab10:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    ab14:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    ab18:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    ab1c:	2800      	cmp	r0, #0
    ab1e:	d071      	beq.n	ac04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    ab20:	f896 9031 	ldrb.w	r9, [r6, #49]	; 0x31
    ab24:	4d80      	ldr	r5, [pc, #512]	; (ad28 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    ab26:	b125      	cbz	r5, ab32 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    ab28:	2100      	movs	r1, #0
    ab2a:	f640 30b9 	movw	r0, #3001	; 0xbb9
    ab2e:	f3af 8000 	nop.w
    ab32:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    ab36:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    ab3a:	2801      	cmp	r0, #1
    ab3c:	d018      	beq.n	ab70 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    ab3e:	b2c0      	uxtb	r0, r0
    ab40:	2804      	cmp	r0, #4
    ab42:	bf1c      	itt	ne
    ab44:	2805      	cmpne	r0, #5
    ab46:	2806      	cmpne	r0, #6
    ab48:	d061      	beq.n	ac0e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    ab4a:	b12d      	cbz	r5, ab58 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    ab4c:	f04f 0100 	mov.w	r1, #0
    ab50:	f640 30c5 	movw	r0, #3013	; 0xbc5
    ab54:	f3af 8000 	nop.w
    ab58:	f005 fd2c 	bl	105b4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    ab5c:	b125      	cbz	r5, ab68 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    ab5e:	2100      	movs	r1, #0
    ab60:	f640 30c9 	movw	r0, #3017	; 0xbc9
    ab64:	f3af 8000 	nop.w
    ab68:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    ab6c:	2801      	cmp	r0, #1
    ab6e:	d1e6      	bne.n	ab3e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    ab70:	2401      	movs	r4, #1
    ab72:	b125      	cbz	r5, ab7e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    ab74:	2100      	movs	r1, #0
    ab76:	f44f 603d 	mov.w	r0, #3024	; 0xbd0
    ab7a:	f3af 8000 	nop.w
    ab7e:	2c00      	cmp	r4, #0
    ab80:	d04b      	beq.n	ac1a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    ab82:	2000      	movs	r0, #0
    ab84:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    ab88:	b125      	cbz	r5, ab94 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    ab8a:	2100      	movs	r1, #0
    ab8c:	f640 30d5 	movw	r0, #3029	; 0xbd5
    ab90:	f3af 8000 	nop.w
    ab94:	f896 b031 	ldrb.w	fp, [r6, #49]	; 0x31
    ab98:	2001      	movs	r0, #1
    ab9a:	ea20 090b 	bic.w	r9, r0, fp
    ab9e:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    aba2:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    aba6:	2240      	movs	r2, #64	; 0x40
    aba8:	f005 fd61 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    abac:	b125      	cbz	r5, abb8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    abae:	2100      	movs	r1, #0
    abb0:	f240 505e 	movw	r0, #1374	; 0x55e
    abb4:	f3af 8000 	nop.w
    abb8:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    abbc:	eb00 0a06 	add.w	sl, r0, r6
    abc0:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    abc4:	4430      	add	r0, r6
    abc6:	8c01      	ldrh	r1, [r0, #32]
    abc8:	f8aa 1020 	strh.w	r1, [sl, #32]
    abcc:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    abd0:	f88a 0022 	strb.w	r0, [sl, #34]	; 0x22
    abd4:	b125      	cbz	r5, abe0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    abd6:	2100      	movs	r1, #0
    abd8:	f240 5062 	movw	r0, #1378	; 0x562
    abdc:	f3af 8000 	nop.w
    abe0:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    abe4:	f88d 0000 	strb.w	r0, [sp]
    abe8:	f89d 0000 	ldrb.w	r0, [sp]
    abec:	b1e0      	cbz	r0, ac28 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    abee:	2d00      	cmp	r5, #0
    abf0:	bf1c      	itt	ne
    abf2:	2100      	movne	r1, #0
    abf4:	f640 30db 	movwne	r0, #3035	; 0xbdb
    abf8:	d0bb      	beq.n	ab72 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    abfa:	bf00      	nop
    abfc:	f3af 8000 	nop.w
    ac00:	e7b7      	b.n	ab72 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    ac02:	e7ff      	b.n	ac04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    ac04:	f44f 613b 	mov.w	r1, #2992	; 0xbb0
    ac08:	2070      	movs	r0, #112	; 0x70
    ac0a:	f001 fba5 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ac0e:	464a      	mov	r2, r9
    ac10:	4641      	mov	r1, r8
    ac12:	2001      	movs	r0, #1
    ac14:	f7fe ffc2 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    ac18:	e7a0      	b.n	ab5c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    ac1a:	4844      	ldr	r0, [pc, #272]	; (ad2c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    ac1c:	2800      	cmp	r0, #0
    ac1e:	bf18      	it	ne
    ac20:	f3af 8000 	nopne.w
    ac24:	b662      	cpsie	i
    ac26:	e7ac      	b.n	ab82 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    ac28:	b125      	cbz	r5, ac34 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    ac2a:	2100      	movs	r1, #0
    ac2c:	f640 30df 	movw	r0, #3039	; 0xbdf
    ac30:	f3af 8000 	nop.w
    ac34:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    ac38:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    ac3c:	4640      	mov	r0, r8
    ac3e:	461c      	mov	r4, r3
    ac40:	f04f 0b20 	mov.w	fp, #32
    ac44:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    ac48:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    ac4c:	e004      	b.n	ac58 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    ac4e:	46a3      	mov	fp, r4
    ac50:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    ac54:	f89c 4001 	ldrb.w	r4, [ip, #1]
    ac58:	4284      	cmp	r4, r0
    ac5a:	d002      	beq.n	ac62 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    ac5c:	2c20      	cmp	r4, #32
    ac5e:	d02b      	beq.n	acb8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    ac60:	e7f5      	b.n	ac4e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    ac62:	2c20      	cmp	r4, #32
    ac64:	d028      	beq.n	acb8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    ac66:	42a3      	cmp	r3, r4
    ac68:	d104      	bne.n	ac74 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    ac6a:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    ac6e:	7840      	ldrb	r0, [r0, #1]
    ac70:	7008      	strb	r0, [r1, #0]
    ac72:	e005      	b.n	ac80 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    ac74:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    ac78:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    ac7c:	7840      	ldrb	r0, [r0, #1]
    ac7e:	7048      	strb	r0, [r1, #1]
    ac80:	f1ba 0f00 	cmp.w	sl, #0
    ac84:	d011      	beq.n	acaa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    ac86:	b125      	cbz	r5, ac92 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    ac88:	2100      	movs	r1, #0
    ac8a:	f240 40c1 	movw	r0, #1217	; 0x4c1
    ac8e:	f3af 8000 	nop.w
    ac92:	f89a 0000 	ldrb.w	r0, [sl]
    ac96:	42a0      	cmp	r0, r4
    ac98:	d107      	bne.n	acaa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    ac9a:	b125      	cbz	r5, aca6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    ac9c:	2100      	movs	r1, #0
    ac9e:	f240 40c4 	movw	r0, #1220	; 0x4c4
    aca2:	f3af 8000 	nop.w
    aca6:	f88a b000 	strb.w	fp, [sl]
    acaa:	b15d      	cbz	r5, acc4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    acac:	2100      	movs	r1, #0
    acae:	f240 40c9 	movw	r0, #1225	; 0x4c9
    acb2:	f3af 8000 	nop.w
    acb6:	e000      	b.n	acba <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    acb8:	b125      	cbz	r5, acc4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    acba:	2100      	movs	r1, #0
    acbc:	f640 30e3 	movw	r0, #3043	; 0xbe3
    acc0:	f3af 8000 	nop.w
    acc4:	481a      	ldr	r0, [pc, #104]	; (ad30 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    acc6:	2800      	cmp	r0, #0
    acc8:	bf18      	it	ne
    acca:	f3af 8000 	nopne.w
    acce:	f3ef 8410 	mrs	r4, PRIMASK
    acd2:	b672      	cpsid	i
    acd4:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    acd8:	f88d 0000 	strb.w	r0, [sp]
    acdc:	f89d 0000 	ldrb.w	r0, [sp]
    ace0:	b138      	cbz	r0, acf2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    ace2:	2d00      	cmp	r5, #0
    ace4:	bf1c      	itt	ne
    ace6:	2100      	movne	r1, #0
    ace8:	f640 30e9 	movwne	r0, #3049	; 0xbe9
    acec:	f43f af41 	beq.w	ab72 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    acf0:	e784      	b.n	abfc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    acf2:	f886 9031 	strb.w	r9, [r6, #49]	; 0x31
    acf6:	20ff      	movs	r0, #255	; 0xff
    acf8:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    acfc:	b154      	cbz	r4, ad14 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    acfe:	2d00      	cmp	r5, #0
    ad00:	bf08      	it	eq
    ad02:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ad06:	2100      	movs	r1, #0
    ad08:	f640 30f6 	movw	r0, #3062	; 0xbf6
    ad0c:	f3af 8000 	nop.w
    ad10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ad14:	4805      	ldr	r0, [pc, #20]	; (ad2c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    ad16:	2800      	cmp	r0, #0
    ad18:	bf18      	it	ne
    ad1a:	f3af 8000 	nopne.w
    ad1e:	b662      	cpsie	i
    ad20:	e7ed      	b.n	acfe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    ad22:	0000      	.short	0x0000
    ad24:	200013cc 	.word	0x200013cc
	...

0000ad34 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    ad34:	b570      	push	{r4, r5, r6, lr}
    ad36:	460d      	mov	r5, r1
    ad38:	4606      	mov	r6, r0
    ad3a:	f001 fa83 	bl	c244 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    ad3e:	480f      	ldr	r0, [pc, #60]	; (ad7c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    ad40:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    ad44:	2400      	movs	r4, #0
    ad46:	3880      	subs	r0, #128	; 0x80
    ad48:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    ad4c:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    ad50:	b129      	cbz	r1, ad5e <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    ad52:	1c61      	adds	r1, r4, #1
    ad54:	b2cc      	uxtb	r4, r1
    ad56:	2c20      	cmp	r4, #32
    ad58:	d3f8      	bcc.n	ad4c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    ad5a:	2020      	movs	r0, #32
    ad5c:	bd70      	pop	{r4, r5, r6, pc}
    ad5e:	4808      	ldr	r0, [pc, #32]	; (ad80 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    ad60:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    ad64:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
    ad68:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    ad6c:	4621      	mov	r1, r4
    ad6e:	6045      	str	r5, [r0, #4]
    ad70:	2001      	movs	r0, #1
    ad72:	f7fe ff13 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    ad76:	4620      	mov	r0, r4
    ad78:	bd70      	pop	{r4, r5, r6, pc}
    ad7a:	0000      	.short	0x0000
    ad7c:	200013cc 	.word	0x200013cc
    ad80:	20000fcc 	.word	0x20000fcc

0000ad84 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    ad84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad88:	b083      	sub	sp, #12
    ad8a:	f000 fb99 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    ad8e:	4605      	mov	r5, r0
    ad90:	f000 fe7c 	bl	ba8c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    ad94:	4c84      	ldr	r4, [pc, #528]	; (afa8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x224>)
    ad96:	6860      	ldr	r0, [r4, #4]
    ad98:	f1b0 3fff 	cmp.w	r0, #4294967295
    ad9c:	bf1c      	itt	ne
    ad9e:	f04f 30ff 	movne.w	r0, #4294967295
    ada2:	6060      	strne	r0, [r4, #4]
    ada4:	7fa0      	ldrb	r0, [r4, #30]
    ada6:	f8df 9204 	ldr.w	r9, [pc, #516]	; afac <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x228>
    adaa:	b990      	cbnz	r0, add2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4e>
    adac:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    adb0:	1a40      	subs	r0, r0, r1
    adb2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    adb6:	f44f 710c 	mov.w	r1, #560	; 0x230
    adba:	f001 fa2f 	bl	c21c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    adbe:	68e1      	ldr	r1, [r4, #12]
    adc0:	4408      	add	r0, r1
    adc2:	1a28      	subs	r0, r5, r0
    adc4:	0200      	lsls	r0, r0, #8
    adc6:	17c1      	asrs	r1, r0, #31
    adc8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    adcc:	1200      	asrs	r0, r0, #8
    adce:	0fc0      	lsrs	r0, r0, #31
    add0:	d012      	beq.n	adf8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x74>
    add2:	7e60      	ldrb	r0, [r4, #25]
    add4:	b320      	cbz	r0, ae20 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    add6:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    adda:	f88d 0000 	strb.w	r0, [sp]
    adde:	f89d 0000 	ldrb.w	r0, [sp]
    ade2:	b1e8      	cbz	r0, ae20 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    ade4:	f000 fcae 	bl	b744 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    ade8:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    adec:	b1f0      	cbz	r0, ae2c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa8>
    adee:	f240 31f5 	movw	r1, #1013	; 0x3f5
    adf2:	2070      	movs	r0, #112	; 0x70
    adf4:	f001 fab0 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    adf8:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    adfc:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    ae00:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    ae04:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    ae08:	6840      	ldr	r0, [r0, #4]
    ae0a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    ae0e:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    ae12:	2108      	movs	r1, #8
    ae14:	4790      	blx	r2
    ae16:	f240 31dd 	movw	r1, #989	; 0x3dd
    ae1a:	2070      	movs	r0, #112	; 0x70
    ae1c:	f001 fa9c 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ae20:	1ce8      	adds	r0, r5, #3
    ae22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ae26:	f000 fb71 	bl	b50c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    ae2a:	e7dd      	b.n	ade8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x64>
    ae2c:	2001      	movs	r0, #1
    ae2e:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    ae32:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    ae36:	2820      	cmp	r0, #32
    ae38:	d021      	beq.n	ae7e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
    ae3a:	f894 8032 	ldrb.w	r8, [r4, #50]	; 0x32
    ae3e:	2020      	movs	r0, #32
    ae40:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
    ae44:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    ae48:	2000      	movs	r0, #0
    ae4a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    ae4e:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    ae52:	6020      	str	r0, [r4, #0]
    ae54:	f000 ff0e 	bl	bc74 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    ae58:	7720      	strb	r0, [r4, #28]
    ae5a:	f894 6031 	ldrb.w	r6, [r4, #49]	; 0x31
    ae5e:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    ae62:	1907      	adds	r7, r0, r4
    ae64:	f897 0020 	ldrb.w	r0, [r7, #32]
    ae68:	2820      	cmp	r0, #32
    ae6a:	d058      	beq.n	af1e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    ae6c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    ae70:	eb09 0980 	add.w	r9, r9, r0, lsl #2
    ae74:	f899 001a 	ldrb.w	r0, [r9, #26]
    ae78:	2801      	cmp	r0, #1
    ae7a:	d005      	beq.n	ae88 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
    ae7c:	e04f      	b.n	af1e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    ae7e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    ae82:	2070      	movs	r0, #112	; 0x70
    ae84:	f001 fa68 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ae88:	f8b9 b016 	ldrh.w	fp, [r9, #22]
    ae8c:	aa01      	add	r2, sp, #4
    ae8e:	4669      	mov	r1, sp
    ae90:	4658      	mov	r0, fp
    ae92:	f000 f9ab 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    ae96:	f000 fee7 	bl	bc68 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    ae9a:	f000 f98b 	bl	b1b4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    ae9e:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    aea2:	2820      	cmp	r0, #32
    aea4:	d004      	beq.n	aeb0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12c>
    aea6:	68e0      	ldr	r0, [r4, #12]
    aea8:	1d40      	adds	r0, r0, #5
    aeaa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    aeae:	e01d      	b.n	aeec <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x168>
    aeb0:	f105 0a09 	add.w	sl, r5, #9
    aeb4:	f1bb 0f00 	cmp.w	fp, #0
    aeb8:	d016      	beq.n	aee8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    aeba:	f001 f9d5 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    aebe:	b998      	cbnz	r0, aee8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    aec0:	f001 f8aa 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    aec4:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    aec8:	bf08      	it	eq
    aeca:	200d      	moveq	r0, #13
    aecc:	d00b      	beq.n	aee6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    aece:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    aed2:	3856      	subs	r0, #86	; 0x56
    aed4:	bf08      	it	eq
    aed6:	201c      	moveq	r0, #28
    aed8:	d005      	beq.n	aee6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    aeda:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    aede:	389f      	subs	r0, #159	; 0x9f
    aee0:	bf14      	ite	ne
    aee2:	2000      	movne	r0, #0
    aee4:	2032      	moveq	r0, #50	; 0x32
    aee6:	4482      	add	sl, r0
    aee8:	f02a 407f 	bic.w	r0, sl, #4278190080	; 0xff000000
    aeec:	f8d9 2008 	ldr.w	r2, [r9, #8]
    aef0:	1a81      	subs	r1, r0, r2
    aef2:	0209      	lsls	r1, r1, #8
    aef4:	17cb      	asrs	r3, r1, #31
    aef6:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    aefa:	1209      	asrs	r1, r1, #8
    aefc:	2900      	cmp	r1, #0
    aefe:	dc0e      	bgt.n	af1e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    af00:	f109 0308 	add.w	r3, r9, #8
    af04:	4282      	cmp	r2, r0
    af06:	d202      	bcs.n	af0e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18a>
    af08:	6899      	ldr	r1, [r3, #8]
    af0a:	1e49      	subs	r1, r1, #1
    af0c:	6099      	str	r1, [r3, #8]
    af0e:	e9d3 2100 	ldrd	r2, r1, [r3]
    af12:	1a89      	subs	r1, r1, r2
    af14:	6018      	str	r0, [r3, #0]
    af16:	4408      	add	r0, r1
    af18:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    af1c:	6058      	str	r0, [r3, #4]
    af1e:	4631      	mov	r1, r6
    af20:	2001      	movs	r0, #1
    af22:	f7fe fe6d 	bl	9c00 <MPSL_IRQ_RADIO_Handler+0xf34>
    af26:	ea5f 0900 	movs.w	r9, r0
    af2a:	d0f8      	beq.n	af1e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    af2c:	4820      	ldr	r0, [pc, #128]	; (afb0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x22c>)
    af2e:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    af32:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    af36:	2802      	cmp	r0, #2
    af38:	d104      	bne.n	af44 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>
    af3a:	4632      	mov	r2, r6
    af3c:	4641      	mov	r1, r8
    af3e:	2006      	movs	r0, #6
    af40:	f7fe fe2c 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    af44:	20ff      	movs	r0, #255	; 0xff
    af46:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    af4a:	f897 0021 	ldrb.w	r0, [r7, #33]	; 0x21
    af4e:	4e19      	ldr	r6, [pc, #100]	; (afb4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x230>)
    af50:	2820      	cmp	r0, #32
    af52:	bf1c      	itt	ne
    af54:	7870      	ldrbne	r0, [r6, #1]
    af56:	f001 fad3 	blne	c500 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    af5a:	7f20      	ldrb	r0, [r4, #28]
    af5c:	b120      	cbz	r0, af68 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1e4>
    af5e:	f000 fe65 	bl	bc2c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    af62:	2000      	movs	r0, #0
    af64:	7720      	strb	r0, [r4, #28]
    af66:	7760      	strb	r0, [r4, #29]
    af68:	f1b9 0f02 	cmp.w	r9, #2
    af6c:	d011      	beq.n	af92 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x20e>
    af6e:	f1b9 0f01 	cmp.w	r9, #1
    af72:	bf1c      	itt	ne
    af74:	b003      	addne	sp, #12
    af76:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af7a:	f04f 30ff 	mov.w	r0, #4294967295
    af7e:	6871      	ldr	r1, [r6, #4]
    af80:	2900      	cmp	r1, #0
    af82:	bf04      	itt	eq
    af84:	b003      	addeq	sp, #12
    af86:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af8a:	b003      	add	sp, #12
    af8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    af90:	4708      	bx	r1
    af92:	68a0      	ldr	r0, [r4, #8]
    af94:	1b40      	subs	r0, r0, r5
    af96:	f005 f9d7 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    af9a:	6871      	ldr	r1, [r6, #4]
    af9c:	2900      	cmp	r1, #0
    af9e:	d1f4      	bne.n	af8a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x206>
    afa0:	b003      	add	sp, #12
    afa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    afa6:	0000      	.short	0x0000
    afa8:	200013cc 	.word	0x200013cc
    afac:	20000fcc 	.word	0x20000fcc
    afb0:	2000134c 	.word	0x2000134c
    afb4:	200002d0 	.word	0x200002d0

0000afb8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    afb8:	b570      	push	{r4, r5, r6, lr}
    afba:	4c42      	ldr	r4, [pc, #264]	; (b0c4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    afbc:	4605      	mov	r5, r0
    afbe:	b082      	sub	sp, #8
    afc0:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    afc4:	2820      	cmp	r0, #32
    afc6:	d008      	beq.n	afda <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    afc8:	6860      	ldr	r0, [r4, #4]
    afca:	f1b0 3fff 	cmp.w	r0, #4294967295
    afce:	d009      	beq.n	afe4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    afd0:	f640 21e4 	movw	r1, #2788	; 0xae4
    afd4:	2070      	movs	r0, #112	; 0x70
    afd6:	f001 f9bf 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    afda:	f640 21e3 	movw	r1, #2787	; 0xae3
    afde:	2070      	movs	r0, #112	; 0x70
    afe0:	f001 f9ba 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    afe4:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    afe8:	4937      	ldr	r1, [pc, #220]	; (b0c8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    afea:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    afee:	eb01 0680 	add.w	r6, r1, r0, lsl #2
    aff2:	68b0      	ldr	r0, [r6, #8]
    aff4:	f005 f9a8 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    aff8:	4602      	mov	r2, r0
    affa:	8af0      	ldrh	r0, [r6, #22]
    affc:	7d31      	ldrb	r1, [r6, #20]
    affe:	4b33      	ldr	r3, [pc, #204]	; (b0cc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    b000:	4408      	add	r0, r1
    b002:	1c40      	adds	r0, r0, #1
    b004:	1811      	adds	r1, r2, r0
    b006:	429a      	cmp	r2, r3
    b008:	d817      	bhi.n	b03a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    b00a:	4a31      	ldr	r2, [pc, #196]	; (b0d0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    b00c:	4290      	cmp	r0, r2
    b00e:	dc1b      	bgt.n	b048 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    b010:	f1c2 0c00 	rsb	ip, r2, #0
    b014:	4560      	cmp	r0, ip
    b016:	db1e      	blt.n	b056 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    b018:	0056      	lsls	r6, r2, #1
    b01a:	428e      	cmp	r6, r1
    b01c:	bfdc      	itt	le
    b01e:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    b022:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    b026:	dd05      	ble.n	b034 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    b028:	2900      	cmp	r1, #0
    b02a:	bfbc      	itt	lt
    b02c:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    b030:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    b034:	1948      	adds	r0, r1, r5
    b036:	4299      	cmp	r1, r3
    b038:	d904      	bls.n	b044 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    b03a:	f240 519e 	movw	r1, #1438	; 0x59e
    b03e:	2070      	movs	r0, #112	; 0x70
    b040:	f001 f98a 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b044:	4295      	cmp	r5, r2
    b046:	dd04      	ble.n	b052 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    b048:	f240 519f 	movw	r1, #1439	; 0x59f
    b04c:	2070      	movs	r0, #112	; 0x70
    b04e:	f001 f983 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b052:	4565      	cmp	r5, ip
    b054:	da04      	bge.n	b060 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    b056:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    b05a:	2070      	movs	r0, #112	; 0x70
    b05c:	f001 f97c 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b060:	4286      	cmp	r6, r0
    b062:	bfdc      	itt	le
    b064:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    b068:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    b06c:	dd05      	ble.n	b07a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    b06e:	2800      	cmp	r0, #0
    b070:	bfbc      	itt	lt
    b072:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    b076:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    b07a:	aa01      	add	r2, sp, #4
    b07c:	4669      	mov	r1, sp
    b07e:	f000 f8b5 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    b082:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b086:	280f      	cmp	r0, #15
    b088:	bf8c      	ite	hi
    b08a:	2001      	movhi	r0, #1
    b08c:	2000      	movls	r0, #0
    b08e:	9900      	ldr	r1, [sp, #0]
    b090:	4408      	add	r0, r1
    b092:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    b096:	6061      	str	r1, [r4, #4]
    b098:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    b09c:	f88d 0000 	strb.w	r0, [sp]
    b0a0:	f89d 0000 	ldrb.w	r0, [sp]
    b0a4:	2800      	cmp	r0, #0
    b0a6:	bf04      	itt	eq
    b0a8:	b002      	addeq	sp, #8
    b0aa:	bd70      	popeq	{r4, r5, r6, pc}
    b0ac:	2005      	movs	r0, #5
    b0ae:	f000 fbc7 	bl	b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    b0b2:	2800      	cmp	r0, #0
    b0b4:	bf1c      	itt	ne
    b0b6:	b002      	addne	sp, #8
    b0b8:	bd70      	popne	{r4, r5, r6, pc}
    b0ba:	f640 21eb 	movw	r1, #2795	; 0xaeb
    b0be:	2070      	movs	r0, #112	; 0x70
    b0c0:	f001 f94a 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b0c4:	200013cc 	.word	0x200013cc
    b0c8:	20000fcc 	.word	0x20000fcc
    b0cc:	1e847fff 	.word	0x1e847fff
    b0d0:	0f424000 	.word	0x0f424000

0000b0d4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    b0d4:	b570      	push	{r4, r5, r6, lr}
    b0d6:	4c1c      	ldr	r4, [pc, #112]	; (b148 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
    b0d8:	2120      	movs	r1, #32
    b0da:	f884 1020 	strb.w	r1, [r4, #32]
    b0de:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    b0e2:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    b0e6:	2000      	movs	r0, #0
    b0e8:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    b0ec:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
    b0f0:	1e42      	subs	r2, r0, #1
    b0f2:	e9c4 0200 	strd	r0, r2, [r4]
    b0f6:	77a0      	strb	r0, [r4, #30]
    b0f8:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    b0fc:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    b100:	7720      	strb	r0, [r4, #28]
    b102:	7760      	strb	r0, [r4, #29]
    b104:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
    b108:	62e2      	str	r2, [r4, #44]	; 0x2c
    b10a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    b10e:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    b112:	2210      	movs	r2, #16
    b114:	7088      	strb	r0, [r1, #2]
    b116:	f801 0f04 	strb.w	r0, [r1, #4]!
    b11a:	1e52      	subs	r2, r2, #1
    b11c:	d1fa      	bne.n	b114 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x40>
    b11e:	f000 fdb3 	bl	bc88 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    b122:	4d0a      	ldr	r5, [pc, #40]	; (b14c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
    b124:	2601      	movs	r6, #1
    b126:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    b12a:	20ff      	movs	r0, #255	; 0xff
    b12c:	7028      	strb	r0, [r5, #0]
    b12e:	4808      	ldr	r0, [pc, #32]	; (b150 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    b130:	f001 f9c8 	bl	c4c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    b134:	7068      	strb	r0, [r5, #1]
    b136:	f001 fa33 	bl	c5a0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    b13a:	60a8      	str	r0, [r5, #8]
    b13c:	f000 fd2e 	bl	bb9c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    b140:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    b144:	bd70      	pop	{r4, r5, r6, pc}
    b146:	0000      	.short	0x0000
    b148:	200013cc 	.word	0x200013cc
    b14c:	200002d0 	.word	0x200002d0
    b150:	00009ac5 	.word	0x00009ac5

0000b154 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    b154:	b570      	push	{r4, r5, r6, lr}
    b156:	4605      	mov	r5, r0
    b158:	2001      	movs	r0, #1
    b15a:	fa00 f405 	lsl.w	r4, r0, r5
    b15e:	460e      	mov	r6, r1
    b160:	2a00      	cmp	r2, #0
    b162:	bf08      	it	eq
    b164:	4808      	ldreq	r0, [pc, #32]	; (b188 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    b166:	d00c      	beq.n	b182 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    b168:	2000      	movs	r0, #0
    b16a:	f000 fcfd 	bl	bb68 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    b16e:	00e9      	lsls	r1, r5, #3
    b170:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    b174:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    b178:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    b17c:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    b180:	4802      	ldr	r0, [pc, #8]	; (b18c <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    b182:	6004      	str	r4, [r0, #0]
    b184:	bd70      	pop	{r4, r5, r6, pc}
    b186:	0000      	.short	0x0000
    b188:	4001f508 	.word	0x4001f508
    b18c:	4001f504 	.word	0x4001f504

0000b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    b190:	b500      	push	{lr}
    b192:	b083      	sub	sp, #12
    b194:	4668      	mov	r0, sp
    b196:	f000 f999 	bl	b4cc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    b19a:	9800      	ldr	r0, [sp, #0]
    b19c:	f005 f8d4 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b1a0:	9a01      	ldr	r2, [sp, #4]
    b1a2:	4b03      	ldr	r3, [pc, #12]	; (b1b0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q+0x20>)
    b1a4:	2100      	movs	r1, #0
    b1a6:	fbe2 0103 	umlal	r0, r1, r2, r3
    b1aa:	b003      	add	sp, #12
    b1ac:	bd00      	pop	{pc}
    b1ae:	0000      	.short	0x0000
    b1b0:	1e848000 	.word	0x1e848000

0000b1b4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    b1b4:	0b41      	lsrs	r1, r0, #13
    b1b6:	f248 6237 	movw	r2, #34359	; 0x8637
    b1ba:	4351      	muls	r1, r2
    b1bc:	0c0a      	lsrs	r2, r1, #16
    b1be:	4b09      	ldr	r3, [pc, #36]	; (b1e4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    b1c0:	0251      	lsls	r1, r2, #9
    b1c2:	fb02 0203 	mla	r2, r2, r3, r0
    b1c6:	4808      	ldr	r0, [pc, #32]	; (b1e8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    b1c8:	4350      	muls	r0, r2
    b1ca:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    b1ce:	306e      	adds	r0, #110	; 0x6e
    b1d0:	0d40      	lsrs	r0, r0, #21
    b1d2:	425b      	negs	r3, r3
    b1d4:	fb10 f303 	smulbb	r3, r0, r3
    b1d8:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    b1dc:	bf88      	it	hi
    b1de:	1c49      	addhi	r1, r1, #1
    b1e0:	4408      	add	r0, r1
    b1e2:	4770      	bx	lr
    b1e4:	ffffc2f7 	.word	0xffffc2f7
    b1e8:	00010c6f 	.word	0x00010c6f

0000b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    b1ec:	0b43      	lsrs	r3, r0, #13
    b1ee:	f248 6c37 	movw	ip, #34359	; 0x8637
    b1f2:	fb03 f30c 	mul.w	r3, r3, ip
    b1f6:	b430      	push	{r4, r5}
    b1f8:	0c1b      	lsrs	r3, r3, #16
    b1fa:	f8df c044 	ldr.w	ip, [pc, #68]	; b240 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    b1fe:	025c      	lsls	r4, r3, #9
    b200:	fb03 030c 	mla	r3, r3, ip, r0
    b204:	480f      	ldr	r0, [pc, #60]	; (b244 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    b206:	4358      	muls	r0, r3
    b208:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    b20c:	eb04 000c 	add.w	r0, r4, ip
    b210:	f643 5409 	movw	r4, #15625	; 0x3d09
    b214:	fb1c f404 	smulbb	r4, ip, r4
    b218:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    b21c:	f643 5508 	movw	r5, #15624	; 0x3d08
    b220:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    b224:	442c      	add	r4, r5
    b226:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    b22a:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    b22e:	bf84      	itt	hi
    b230:	f04f 0c00 	movhi.w	ip, #0
    b234:	1c40      	addhi	r0, r0, #1
    b236:	6008      	str	r0, [r1, #0]
    b238:	f882 c000 	strb.w	ip, [r2]
    b23c:	bc30      	pop	{r4, r5}
    b23e:	4770      	bx	lr
    b240:	ffffc2f7 	.word	0xffffc2f7
    b244:	00010c6f 	.word	0x00010c6f

0000b248 <MPSL_IRQ_RTC0_Handler>:
    b248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b24c:	4d3b      	ldr	r5, [pc, #236]	; (b33c <MPSL_IRQ_RTC0_Handler+0xf4>)
    b24e:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b252:	f8df 80ec 	ldr.w	r8, [pc, #236]	; b340 <MPSL_IRQ_RTC0_Handler+0xf8>
    b256:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    b25a:	f44f 6600 	mov.w	r6, #2048	; 0x800
    b25e:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    b262:	f04f 0400 	mov.w	r4, #0
    b266:	d019      	beq.n	b29c <MPSL_IRQ_RTC0_Handler+0x54>
    b268:	4836      	ldr	r0, [pc, #216]	; (b344 <MPSL_IRQ_RTC0_Handler+0xfc>)
    b26a:	6800      	ldr	r0, [r0, #0]
    b26c:	b1b0      	cbz	r0, b29c <MPSL_IRQ_RTC0_Handler+0x54>
    b26e:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    b272:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b276:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
    b27a:	f8d8 1000 	ldr.w	r1, [r8]
    b27e:	1a40      	subs	r0, r0, r1
    b280:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b284:	2802      	cmp	r0, #2
    b286:	d302      	bcc.n	b28e <MPSL_IRQ_RTC0_Handler+0x46>
    b288:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b28c:	d906      	bls.n	b29c <MPSL_IRQ_RTC0_Handler+0x54>
    b28e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    b292:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b296:	2004      	movs	r0, #4
    b298:	f7fe fed8 	bl	a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b29c:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b2a0:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    b2a4:	d01a      	beq.n	b2dc <MPSL_IRQ_RTC0_Handler+0x94>
    b2a6:	4828      	ldr	r0, [pc, #160]	; (b348 <MPSL_IRQ_RTC0_Handler+0x100>)
    b2a8:	6800      	ldr	r0, [r0, #0]
    b2aa:	b1b8      	cbz	r0, b2dc <MPSL_IRQ_RTC0_Handler+0x94>
    b2ac:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
    b2b0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b2b4:	4825      	ldr	r0, [pc, #148]	; (b34c <MPSL_IRQ_RTC0_Handler+0x104>)
    b2b6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b2ba:	f8d8 1000 	ldr.w	r1, [r8]
    b2be:	1a40      	subs	r0, r0, r1
    b2c0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b2c4:	2802      	cmp	r0, #2
    b2c6:	d302      	bcc.n	b2ce <MPSL_IRQ_RTC0_Handler+0x86>
    b2c8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b2cc:	d906      	bls.n	b2dc <MPSL_IRQ_RTC0_Handler+0x94>
    b2ce:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    b2d2:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b2d6:	2005      	movs	r0, #5
    b2d8:	f7fe feb8 	bl	a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b2dc:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b2e0:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    b2e4:	d01a      	beq.n	b31c <MPSL_IRQ_RTC0_Handler+0xd4>
    b2e6:	481a      	ldr	r0, [pc, #104]	; (b350 <MPSL_IRQ_RTC0_Handler+0x108>)
    b2e8:	6800      	ldr	r0, [r0, #0]
    b2ea:	b1b8      	cbz	r0, b31c <MPSL_IRQ_RTC0_Handler+0xd4>
    b2ec:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    b2f0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b2f4:	4817      	ldr	r0, [pc, #92]	; (b354 <MPSL_IRQ_RTC0_Handler+0x10c>)
    b2f6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b2fa:	f8d8 1000 	ldr.w	r1, [r8]
    b2fe:	1a40      	subs	r0, r0, r1
    b300:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b304:	2802      	cmp	r0, #2
    b306:	d302      	bcc.n	b30e <MPSL_IRQ_RTC0_Handler+0xc6>
    b308:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b30c:	d906      	bls.n	b31c <MPSL_IRQ_RTC0_Handler+0xd4>
    b30e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    b312:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b316:	2006      	movs	r0, #6
    b318:	f7fe fe98 	bl	a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b31c:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b320:	2800      	cmp	r0, #0
    b322:	bf08      	it	eq
    b324:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b328:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    b32c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b330:	4809      	ldr	r0, [pc, #36]	; (b358 <MPSL_IRQ_RTC0_Handler+0x110>)
    b332:	68c1      	ldr	r1, [r0, #12]
    b334:	1c49      	adds	r1, r1, #1
    b336:	60c1      	str	r1, [r0, #12]
    b338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b33c:	4000b000 	.word	0x4000b000
    b340:	4000b504 	.word	0x4000b504
    b344:	4000b140 	.word	0x4000b140
    b348:	4000b144 	.word	0x4000b144
    b34c:	4000b004 	.word	0x4000b004
    b350:	4000b148 	.word	0x4000b148
    b354:	4000b008 	.word	0x4000b008
    b358:	200002dc 	.word	0x200002dc

0000b35c <MPSL_IRQ_TIMER0_Handler>:
    b35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b360:	4d38      	ldr	r5, [pc, #224]	; (b444 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    b362:	7828      	ldrb	r0, [r5, #0]
    b364:	2804      	cmp	r0, #4
    b366:	d068      	beq.n	b43a <MPSL_IRQ_TIMER0_Handler+0xde>
    b368:	1ca8      	adds	r0, r5, #2
    b36a:	2201      	movs	r2, #1
    b36c:	7801      	ldrb	r1, [r0, #0]
    b36e:	b159      	cbz	r1, b388 <MPSL_IRQ_TIMER0_Handler+0x2c>
    b370:	2901      	cmp	r1, #1
    b372:	bf08      	it	eq
    b374:	706a      	strbeq	r2, [r5, #1]
    b376:	d002      	beq.n	b37e <MPSL_IRQ_TIMER0_Handler+0x22>
    b378:	7869      	ldrb	r1, [r5, #1]
    b37a:	2900      	cmp	r1, #0
    b37c:	d058      	beq.n	b430 <MPSL_IRQ_TIMER0_Handler+0xd4>
    b37e:	2102      	movs	r1, #2
    b380:	7001      	strb	r1, [r0, #0]
    b382:	7840      	ldrb	r0, [r0, #1]
    b384:	f000 fb12 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b388:	4c2f      	ldr	r4, [pc, #188]	; (b448 <MPSL_IRQ_TIMER0_Handler+0xec>)
    b38a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b38e:	f04f 0800 	mov.w	r8, #0
    b392:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    b396:	f44f 7780 	mov.w	r7, #256	; 0x100
    b39a:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    b39e:	d00a      	beq.n	b3b6 <MPSL_IRQ_TIMER0_Handler+0x5a>
    b3a0:	482a      	ldr	r0, [pc, #168]	; (b44c <MPSL_IRQ_TIMER0_Handler+0xf0>)
    b3a2:	6800      	ldr	r0, [r0, #0]
    b3a4:	b138      	cbz	r0, b3b6 <MPSL_IRQ_TIMER0_Handler+0x5a>
    b3a6:	2003      	movs	r0, #3
    b3a8:	f000 fb00 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b3ac:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b3b0:	2003      	movs	r0, #3
    b3b2:	f7fe fe4b 	bl	a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b3b6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b3ba:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    b3be:	d00a      	beq.n	b3d6 <MPSL_IRQ_TIMER0_Handler+0x7a>
    b3c0:	4823      	ldr	r0, [pc, #140]	; (b450 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    b3c2:	6800      	ldr	r0, [r0, #0]
    b3c4:	b138      	cbz	r0, b3d6 <MPSL_IRQ_TIMER0_Handler+0x7a>
    b3c6:	2002      	movs	r0, #2
    b3c8:	f000 faf0 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b3cc:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b3d0:	2002      	movs	r0, #2
    b3d2:	f7fe fe3b 	bl	a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b3d6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b3da:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    b3de:	d00a      	beq.n	b3f6 <MPSL_IRQ_TIMER0_Handler+0x9a>
    b3e0:	481c      	ldr	r0, [pc, #112]	; (b454 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    b3e2:	6800      	ldr	r0, [r0, #0]
    b3e4:	b138      	cbz	r0, b3f6 <MPSL_IRQ_TIMER0_Handler+0x9a>
    b3e6:	2001      	movs	r0, #1
    b3e8:	f000 fae0 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b3ec:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b3f0:	2001      	movs	r0, #1
    b3f2:	f7fe fe2b 	bl	a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b3f6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b3fa:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    b3fe:	bf08      	it	eq
    b400:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b404:	4814      	ldr	r0, [pc, #80]	; (b458 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    b406:	6800      	ldr	r0, [r0, #0]
    b408:	2800      	cmp	r0, #0
    b40a:	bf08      	it	eq
    b40c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b410:	2000      	movs	r0, #0
    b412:	f000 facb 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b416:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b41a:	2004      	movs	r0, #4
    b41c:	7028      	strb	r0, [r5, #0]
    b41e:	f8c5 8004 	str.w	r8, [r5, #4]
    b422:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    b426:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b42a:	2000      	movs	r0, #0
    b42c:	f7fe be0e 	b.w	a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b430:	f44f 6195 	mov.w	r1, #1192	; 0x4a8
    b434:	206c      	movs	r0, #108	; 0x6c
    b436:	f000 ff8f 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b43a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b43e:	2007      	movs	r0, #7
    b440:	f7fe be04 	b.w	a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b444:	200002dc 	.word	0x200002dc
    b448:	40008000 	.word	0x40008000
    b44c:	4000814c 	.word	0x4000814c
    b450:	40008148 	.word	0x40008148
    b454:	40008144 	.word	0x40008144
    b458:	40008140 	.word	0x40008140
    b45c:	2201      	movs	r2, #1
    b45e:	0211      	lsls	r1, r2, #8
    b460:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b464:	2000      	movs	r0, #0
    b466:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    b46a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    b46e:	f3bf 8f4f 	dsb	sy
    b472:	f3bf 8f6f 	isb	sy
    b476:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    b47a:	490e      	ldr	r1, [pc, #56]	; (b4b4 <MPSL_IRQ_TIMER0_Handler+0x158>)
    b47c:	f841 2f04 	str.w	r2, [r1, #4]!
    b480:	1e43      	subs	r3, r0, #1
    b482:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    b486:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    b48a:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    b48e:	4b0a      	ldr	r3, [pc, #40]	; (b4b8 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    b490:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b494:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    b498:	1d1b      	adds	r3, r3, #4
    b49a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b49e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    b4a2:	1d1b      	adds	r3, r3, #4
    b4a4:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b4a8:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    b4ac:	60ca      	str	r2, [r1, #12]
    b4ae:	4903      	ldr	r1, [pc, #12]	; (b4bc <MPSL_IRQ_TIMER0_Handler+0x160>)
    b4b0:	7048      	strb	r0, [r1, #1]
    b4b2:	4770      	bx	lr
    b4b4:	40008000 	.word	0x40008000
    b4b8:	40008004 	.word	0x40008004
    b4bc:	200002dc 	.word	0x200002dc

0000b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    b4c0:	4801      	ldr	r0, [pc, #4]	; (b4c8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    b4c2:	6800      	ldr	r0, [r0, #0]
    b4c4:	4770      	bx	lr
    b4c6:	0000      	.short	0x0000
    b4c8:	4000b504 	.word	0x4000b504

0000b4cc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
    b4cc:	b430      	push	{r4, r5}
    b4ce:	f3ef 8c10 	mrs	ip, PRIMASK
    b4d2:	b672      	cpsid	i
    b4d4:	2500      	movs	r5, #0
    b4d6:	4b0b      	ldr	r3, [pc, #44]	; (b504 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
    b4d8:	4a0b      	ldr	r2, [pc, #44]	; (b508 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
    b4da:	bf00      	nop
    b4dc:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    b4e0:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
    b4e4:	b12c      	cbz	r4, b4f2 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
    b4e6:	68d1      	ldr	r1, [r2, #12]
    b4e8:	1c49      	adds	r1, r1, #1
    b4ea:	60d1      	str	r1, [r2, #12]
    b4ec:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    b4f0:	e7f4      	b.n	b4dc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
    b4f2:	68d2      	ldr	r2, [r2, #12]
    b4f4:	f1bc 0f00 	cmp.w	ip, #0
    b4f8:	d100      	bne.n	b4fc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
    b4fa:	b662      	cpsie	i
    b4fc:	e9c0 1200 	strd	r1, r2, [r0]
    b500:	bc30      	pop	{r4, r5}
    b502:	4770      	bx	lr
    b504:	4000b000 	.word	0x4000b000
    b508:	200002dc 	.word	0x200002dc

0000b50c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    b50c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b510:	f8df 8134 	ldr.w	r8, [pc, #308]	; b648 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>
    b514:	4605      	mov	r5, r0
    b516:	f1a8 0602 	sub.w	r6, r8, #2
    b51a:	f898 3000 	ldrb.w	r3, [r8]
    b51e:	68b0      	ldr	r0, [r6, #8]
    b520:	2b01      	cmp	r3, #1
    b522:	bf04      	itt	eq
    b524:	42a8      	cmpeq	r0, r5
    b526:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b52a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    b52e:	4a47      	ldr	r2, [pc, #284]	; (b64c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    b530:	6011      	str	r1, [r2, #0]
    b532:	4948      	ldr	r1, [pc, #288]	; (b654 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>)
    b534:	4a46      	ldr	r2, [pc, #280]	; (b650 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x144>)
    b536:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    b53a:	f101 0c04 	add.w	ip, r1, #4
    b53e:	f04f 0400 	mov.w	r4, #0
    b542:	2b00      	cmp	r3, #0
    b544:	d055      	beq.n	b5f2 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xe6>
    b546:	4a44      	ldr	r2, [pc, #272]	; (b658 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x14c>)
    b548:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    b54c:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    b550:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    b554:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    b558:	2701      	movs	r7, #1
    b55a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    b55e:	2a00      	cmp	r2, #0
    b560:	bf01      	itttt	eq
    b562:	f8d1 2104 	ldreq.w	r2, [r1, #260]	; 0x104
    b566:	2a00      	cmpeq	r2, #0
    b568:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    b56c:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    b570:	f04f 0a10 	mov.w	sl, #16
    b574:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    b578:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    b57c:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    b580:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    b584:	4a35      	ldr	r2, [pc, #212]	; (b65c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x150>)
    b586:	f8d2 c000 	ldr.w	ip, [r2]
    b58a:	eba5 0c0c 	sub.w	ip, r5, ip
    b58e:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    b592:	f1bc 0f02 	cmp.w	ip, #2
    b596:	d337      	bcc.n	b608 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfc>
    b598:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    b59c:	d834      	bhi.n	b608 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfc>
    b59e:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    b5a2:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    b5a6:	f8c1 c344 	str.w	ip, [r1, #836]	; 0x344
    b5aa:	b12b      	cbz	r3, b5b8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xac>
    b5ac:	6811      	ldr	r1, [r2, #0]
    b5ae:	1a41      	subs	r1, r0, r1
    b5b0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    b5b4:	2902      	cmp	r1, #2
    b5b6:	d3f9      	bcc.n	b5ac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa0>
    b5b8:	6077      	str	r7, [r6, #4]
    b5ba:	7034      	strb	r4, [r6, #0]
    b5bc:	f7ff ff4e 	bl	b45c <MPSL_IRQ_TIMER0_Handler+0x100>
    b5c0:	4827      	ldr	r0, [pc, #156]	; (b660 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x154>)
    b5c2:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    b5c6:	f364 0101 	bfi	r1, r4, #0, #2
    b5ca:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    b5ce:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    b5d2:	2102      	movs	r1, #2
    b5d4:	f361 0201 	bfi	r2, r1, #0, #2
    b5d8:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    b5dc:	fa9a f1aa 	rbit	r1, sl
    b5e0:	fab1 f181 	clz	r1, r1
    b5e4:	2909      	cmp	r1, #9
    b5e6:	d917      	bls.n	b618 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>
    b5e8:	f240 3155 	movw	r1, #853	; 0x355
    b5ec:	a01d      	add	r0, pc, #116	; (adr r0, b664 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x158>)
    b5ee:	f000 fe87 	bl	c300 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    b5f2:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    b5f6:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    b5fa:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    b5fe:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    b602:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    b606:	e7a5      	b.n	b554 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    b608:	2000      	movs	r0, #0
    b60a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b60e:	f44f 7127 	mov.w	r1, #668	; 0x29c
    b612:	206c      	movs	r0, #108	; 0x6c
    b614:	f000 fea0 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b618:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    b61c:	60c7      	str	r7, [r0, #12]
    b61e:	6871      	ldr	r1, [r6, #4]
    b620:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b624:	f44f 7080 	mov.w	r0, #256	; 0x100
    b628:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    b62c:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    b630:	490f      	ldr	r1, [pc, #60]	; (b670 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x164>)
    b632:	05c0      	lsls	r0, r0, #23
    b634:	6008      	str	r0, [r1, #0]
    b636:	2004      	movs	r0, #4
    b638:	60b5      	str	r5, [r6, #8]
    b63a:	f888 0001 	strb.w	r0, [r8, #1]
    b63e:	f888 7000 	strb.w	r7, [r8]
    b642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b646:	0000      	.short	0x0000
    b648:	200002de 	.word	0x200002de
    b64c:	4001f508 	.word	0x4001f508
    b650:	fffbfffd 	.word	0xfffbfffd
    b654:	4000b000 	.word	0x4000b000
    b658:	fffafffd 	.word	0xfffafffd
    b65c:	4000b504 	.word	0x4000b504
    b660:	40008000 	.word	0x40008000
    b664:	5f66726e 	.word	0x5f66726e
    b668:	656d6974 	.word	0x656d6974
    b66c:	00682e72 	.word	0x00682e72
    b670:	4001f504 	.word	0x4001f504

0000b674 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    b674:	b570      	push	{r4, r5, r6, lr}
    b676:	4c2a      	ldr	r4, [pc, #168]	; (b720 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    b678:	68a1      	ldr	r1, [r4, #8]
    b67a:	4281      	cmp	r1, r0
    b67c:	bf14      	ite	ne
    b67e:	2201      	movne	r2, #1
    b680:	2200      	moveq	r2, #0
    b682:	f8df c0a0 	ldr.w	ip, [pc, #160]	; b724 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    b686:	f89c 5000 	ldrb.w	r5, [ip]
    b68a:	2d02      	cmp	r5, #2
    b68c:	d002      	beq.n	b694 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    b68e:	2a00      	cmp	r2, #0
    b690:	d034      	beq.n	b6fc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    b692:	e002      	b.n	b69a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    b694:	2a00      	cmp	r2, #0
    b696:	bf08      	it	eq
    b698:	bd70      	popeq	{r4, r5, r6, pc}
    b69a:	7862      	ldrb	r2, [r4, #1]
    b69c:	b39a      	cbz	r2, b706 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    b69e:	4b22      	ldr	r3, [pc, #136]	; (b728 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    b6a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    b6a4:	601a      	str	r2, [r3, #0]
    b6a6:	4b21      	ldr	r3, [pc, #132]	; (b72c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    b6a8:	1392      	asrs	r2, r2, #14
    b6aa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    b6ae:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    b6b2:	2200      	movs	r2, #0
    b6b4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    b6b8:	4a1d      	ldr	r2, [pc, #116]	; (b730 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    b6ba:	6816      	ldr	r6, [r2, #0]
    b6bc:	1b86      	subs	r6, r0, r6
    b6be:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    b6c2:	2e02      	cmp	r6, #2
    b6c4:	d324      	bcc.n	b710 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    b6c6:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    b6ca:	d821      	bhi.n	b710 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    b6cc:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b6d0:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    b6d4:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    b6d8:	b12d      	cbz	r5, b6e6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    b6da:	6813      	ldr	r3, [r2, #0]
    b6dc:	1acb      	subs	r3, r1, r3
    b6de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b6e2:	2b02      	cmp	r3, #2
    b6e4:	d3f9      	bcc.n	b6da <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    b6e6:	4b13      	ldr	r3, [pc, #76]	; (b734 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    b6e8:	2102      	movs	r1, #2
    b6ea:	074a      	lsls	r2, r1, #29
    b6ec:	601a      	str	r2, [r3, #0]
    b6ee:	60a0      	str	r0, [r4, #8]
    b6f0:	2004      	movs	r0, #4
    b6f2:	f88c 0001 	strb.w	r0, [ip, #1]
    b6f6:	f88c 1000 	strb.w	r1, [ip]
    b6fa:	bd70      	pop	{r4, r5, r6, pc}
    b6fc:	f240 21aa 	movw	r1, #682	; 0x2aa
    b700:	206c      	movs	r0, #108	; 0x6c
    b702:	f000 fe29 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b706:	f240 21ae 	movw	r1, #686	; 0x2ae
    b70a:	206c      	movs	r0, #108	; 0x6c
    b70c:	f000 fe24 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b710:	2000      	movs	r0, #0
    b712:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b716:	f240 21ba 	movw	r1, #698	; 0x2ba
    b71a:	206c      	movs	r0, #108	; 0x6c
    b71c:	f000 fe1c 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b720:	200002dc 	.word	0x200002dc
    b724:	200002de 	.word	0x200002de
    b728:	4001f508 	.word	0x4001f508
    b72c:	4000b000 	.word	0x4000b000
    b730:	4000b504 	.word	0x4000b504
    b734:	4001f504 	.word	0x4001f504

0000b738 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    b738:	4801      	ldr	r0, [pc, #4]	; (b740 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    b73a:	6880      	ldr	r0, [r0, #8]
    b73c:	4770      	bx	lr
    b73e:	0000      	.short	0x0000
    b740:	200002dc 	.word	0x200002dc

0000b744 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    b744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b748:	4836      	ldr	r0, [pc, #216]	; (b824 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    b74a:	4a35      	ldr	r2, [pc, #212]	; (b820 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    b74c:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    b750:	f8df c0d4 	ldr.w	ip, [pc, #212]	; b828 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>
    b754:	1d03      	adds	r3, r0, #4
    b756:	2100      	movs	r1, #0
    b758:	f89c 4000 	ldrb.w	r4, [ip]
    b75c:	b184      	cbz	r4, b780 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3c>
    b75e:	4a33      	ldr	r2, [pc, #204]	; (b82c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    b760:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    b764:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    b768:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b76c:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    b770:	2301      	movs	r3, #1
    b772:	2a00      	cmp	r2, #0
    b774:	bf04      	itt	eq
    b776:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    b77a:	2800      	cmpeq	r0, #0
    b77c:	d111      	bne.n	b7a2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5e>
    b77e:	e00a      	b.n	b796 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x52>
    b780:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    b784:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    b788:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    b78c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    b790:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b794:	e7ea      	b.n	b76c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    b796:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b79a:	f44f 6000 	mov.w	r0, #2048	; 0x800
    b79e:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    b7a2:	2c02      	cmp	r4, #2
    b7a4:	d004      	beq.n	b7b0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6c>
    b7a6:	f240 21c6 	movw	r1, #710	; 0x2c6
    b7aa:	206c      	movs	r0, #108	; 0x6c
    b7ac:	f000 fdd4 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b7b0:	4e1f      	ldr	r6, [pc, #124]	; (b830 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    b7b2:	6830      	ldr	r0, [r6, #0]
    b7b4:	4c1f      	ldr	r4, [pc, #124]	; (b834 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    b7b6:	1cc0      	adds	r0, r0, #3
    b7b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b7bc:	68a2      	ldr	r2, [r4, #8]
    b7be:	4d1e      	ldr	r5, [pc, #120]	; (b838 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    b7c0:	4290      	cmp	r0, r2
    b7c2:	d00b      	beq.n	b7dc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    b7c4:	6837      	ldr	r7, [r6, #0]
    b7c6:	1bd7      	subs	r7, r2, r7
    b7c8:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    b7cc:	2f04      	cmp	r7, #4
    b7ce:	d305      	bcc.n	b7dc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    b7d0:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    b7d4:	d802      	bhi.n	b7dc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    b7d6:	f7ff fe99 	bl	b50c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    b7da:	e01b      	b.n	b814 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    b7dc:	6830      	ldr	r0, [r6, #0]
    b7de:	1a10      	subs	r0, r2, r0
    b7e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b7e4:	2802      	cmp	r0, #2
    b7e6:	d313      	bcc.n	b810 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    b7e8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b7ec:	d810      	bhi.n	b810 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    b7ee:	4a13      	ldr	r2, [pc, #76]	; (b83c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    b7f0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b7f4:	6010      	str	r0, [r2, #0]
    b7f6:	6063      	str	r3, [r4, #4]
    b7f8:	7021      	strb	r1, [r4, #0]
    b7fa:	606b      	str	r3, [r5, #4]
    b7fc:	60eb      	str	r3, [r5, #12]
    b7fe:	0040      	lsls	r0, r0, #1
    b800:	1f11      	subs	r1, r2, #4
    b802:	6008      	str	r0, [r1, #0]
    b804:	2004      	movs	r0, #4
    b806:	f88c 0001 	strb.w	r0, [ip, #1]
    b80a:	f88c 3000 	strb.w	r3, [ip]
    b80e:	e001      	b.n	b814 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    b810:	6063      	str	r3, [r4, #4]
    b812:	7021      	strb	r1, [r4, #0]
    b814:	6860      	ldr	r0, [r4, #4]
    b816:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    b81a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b81e:	0000      	.short	0x0000
    b820:	fffbfffd 	.word	0xfffbfffd
    b824:	4000b000 	.word	0x4000b000
    b828:	200002de 	.word	0x200002de
    b82c:	fffafffd 	.word	0xfffafffd
    b830:	4000b504 	.word	0x4000b504
    b834:	200002dc 	.word	0x200002dc
    b838:	40008000 	.word	0x40008000
    b83c:	4001f508 	.word	0x4001f508

0000b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    b840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b844:	4a54      	ldr	r2, [pc, #336]	; (b998 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x158>)
    b846:	2500      	movs	r5, #0
    b848:	2401      	movs	r4, #1
    b84a:	f892 c000 	ldrb.w	ip, [r2]
    b84e:	7853      	ldrb	r3, [r2, #1]
    b850:	f44f 76a0 	mov.w	r6, #320	; 0x140
    b854:	2807      	cmp	r0, #7
    b856:	d27d      	bcs.n	b954 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    b858:	e8df f000 	tbb	[pc, r0]
    b85c:	04040404 	.word	0x04040404
    b860:	00585858 	.word	0x00585858
    b864:	4a4d      	ldr	r2, [pc, #308]	; (b99c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x15c>)
    b866:	6897      	ldr	r7, [r2, #8]
    b868:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    b86c:	bf04      	itt	eq
    b86e:	7852      	ldrbeq	r2, [r2, #1]
    b870:	2a00      	cmpeq	r2, #0
    b872:	d003      	beq.n	b87c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    b874:	f1bc 0f02 	cmp.w	ip, #2
    b878:	d005      	beq.n	b886 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    b87a:	e026      	b.n	b8ca <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    b87c:	f240 3156 	movw	r1, #854	; 0x356
    b880:	206c      	movs	r0, #108	; 0x6c
    b882:	f000 fd69 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b886:	1f1a      	subs	r2, r3, #4
    b888:	b2d2      	uxtb	r2, r2
    b88a:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    b88e:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    b892:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    b896:	2200      	movs	r2, #0
    b898:	f1bc 0f01 	cmp.w	ip, #1
    b89c:	d003      	beq.n	b8a6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
    b89e:	f1bc 0f02 	cmp.w	ip, #2
    b8a2:	d008      	beq.n	b8b6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
    b8a4:	e00e      	b.n	b8c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    b8a6:	2b04      	cmp	r3, #4
    b8a8:	bf24      	itt	cs
    b8aa:	6837      	ldrcs	r7, [r6, #0]
    b8ac:	2f00      	cmpcs	r7, #0
    b8ae:	bf08      	it	eq
    b8b0:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    b8b4:	e006      	b.n	b8c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    b8b6:	2b04      	cmp	r3, #4
    b8b8:	bf24      	itt	cs
    b8ba:	6837      	ldrcs	r7, [r6, #0]
    b8bc:	2f00      	cmpcs	r7, #0
    b8be:	bf08      	it	eq
    b8c0:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
    b8c4:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
    b8c8:	d1e5      	bne.n	b896 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
    b8ca:	f8df c0d4 	ldr.w	ip, [pc, #212]	; b9a0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>
    b8ce:	f100 0210 	add.w	r2, r0, #16
    b8d2:	fa04 f202 	lsl.w	r2, r4, r2
    b8d6:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    b8da:	f04f 0340 	mov.w	r3, #64	; 0x40
    b8de:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    b8e2:	b2db      	uxtb	r3, r3
    b8e4:	4463      	add	r3, ip
    b8e6:	601c      	str	r4, [r3, #0]
    b8e8:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    b8ec:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    b8f0:	eba1 0303 	sub.w	r3, r1, r3
    b8f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b8f8:	2b03      	cmp	r3, #3
    b8fa:	bf26      	itte	cs
    b8fc:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    b900:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
    b904:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
    b908:	d237      	bcs.n	b97a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13a>
    b90a:	e03c      	b.n	b986 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x146>
    b90c:	f1bc 0f00 	cmp.w	ip, #0
    b910:	d006      	beq.n	b920 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    b912:	4283      	cmp	r3, r0
    b914:	d104      	bne.n	b920 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    b916:	f240 3176 	movw	r1, #886	; 0x376
    b91a:	206c      	movs	r0, #108	; 0x6c
    b91c:	f000 fd1c 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b920:	1f02      	subs	r2, r0, #4
    b922:	b2d3      	uxtb	r3, r2
    b924:	2b03      	cmp	r3, #3
    b926:	d304      	bcc.n	b932 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf2>
    b928:	f240 11d1 	movw	r1, #465	; 0x1d1
    b92c:	206c      	movs	r0, #108	; 0x6c
    b92e:	f000 fd13 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b932:	f8df c070 	ldr.w	ip, [pc, #112]	; b9a4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>
    b936:	f103 0210 	add.w	r2, r3, #16
    b93a:	fa04 f202 	lsl.w	r2, r4, r2
    b93e:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    b942:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
    b946:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    b94a:	f84c 5003 	str.w	r5, [ip, r3]
    b94e:	4b16      	ldr	r3, [pc, #88]	; (b9a8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    b950:	681b      	ldr	r3, [r3, #0]
    b952:	e000      	b.n	b956 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    b954:	e01a      	b.n	b98c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x14c>
    b956:	1f00      	subs	r0, r0, #4
    b958:	1acb      	subs	r3, r1, r3
    b95a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b95e:	b2c0      	uxtb	r0, r0
    b960:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    b964:	2b02      	cmp	r3, #2
    b966:	d30b      	bcc.n	b980 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    b968:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    b96c:	d808      	bhi.n	b980 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    b96e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    b972:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
    b976:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
    b97a:	2001      	movs	r0, #1
    b97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b980:	2100      	movs	r1, #0
    b982:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    b986:	2000      	movs	r0, #0
    b988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b98c:	f240 317a 	movw	r1, #890	; 0x37a
    b990:	206c      	movs	r0, #108	; 0x6c
    b992:	f000 fce1 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b996:	0000      	.short	0x0000
    b998:	200002de 	.word	0x200002de
    b99c:	200002dc 	.word	0x200002dc
    b9a0:	40008000 	.word	0x40008000
    b9a4:	4000b000 	.word	0x4000b000
    b9a8:	4000b504 	.word	0x4000b504

0000b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    b9ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b9b0:	2601      	movs	r6, #1
    b9b2:	2700      	movs	r7, #0
    b9b4:	f44f 78a0 	mov.w	r8, #320	; 0x140
    b9b8:	2807      	cmp	r0, #7
    b9ba:	d251      	bcs.n	ba60 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    b9bc:	e8df f000 	tbb	[pc, r0]
    b9c0:	04040404 	.word	0x04040404
    b9c4:	00191919 	.word	0x00191919
    b9c8:	f100 0110 	add.w	r1, r0, #16
    b9cc:	fa06 f201 	lsl.w	r2, r6, r1
    b9d0:	4926      	ldr	r1, [pc, #152]	; (ba6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    b9d2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    b9d6:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    b9da:	2200      	movs	r2, #0
    b9dc:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    b9e0:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    b9e4:	508f      	str	r7, [r1, r2]
    b9e6:	4922      	ldr	r1, [pc, #136]	; (ba70 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    b9e8:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    b9ec:	9000      	str	r0, [sp, #0]
    b9ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b9f2:	4d20      	ldr	r5, [pc, #128]	; (ba74 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    b9f4:	1f01      	subs	r1, r0, #4
    b9f6:	b2cc      	uxtb	r4, r1
    b9f8:	7829      	ldrb	r1, [r5, #0]
    b9fa:	b179      	cbz	r1, ba1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    b9fc:	786a      	ldrb	r2, [r5, #1]
    b9fe:	4282      	cmp	r2, r0
    ba00:	d10c      	bne.n	ba1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    ba02:	4a1d      	ldr	r2, [pc, #116]	; (ba78 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    ba04:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    ba08:	6010      	str	r0, [r2, #0]
    ba0a:	2901      	cmp	r1, #1
    ba0c:	bf08      	it	eq
    ba0e:	f7ff fd25 	bleq	b45c <MPSL_IRQ_TIMER0_Handler+0x100>
    ba12:	702f      	strb	r7, [r5, #0]
    ba14:	4919      	ldr	r1, [pc, #100]	; (ba7c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    ba16:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    ba1a:	6088      	str	r0, [r1, #8]
    ba1c:	4918      	ldr	r1, [pc, #96]	; (ba80 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    ba1e:	f104 0010 	add.w	r0, r4, #16
    ba22:	fa06 f000 	lsl.w	r0, r6, r0
    ba26:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    ba2a:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    ba2e:	00a0      	lsls	r0, r4, #2
    ba30:	4408      	add	r0, r1
    ba32:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    ba36:	4a13      	ldr	r2, [pc, #76]	; (ba84 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    ba38:	6812      	ldr	r2, [r2, #0]
    ba3a:	1a80      	subs	r0, r0, r2
    ba3c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ba40:	2802      	cmp	r0, #2
    ba42:	d307      	bcc.n	ba54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    ba44:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    ba48:	2000      	movs	r0, #0
    ba4a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    ba4e:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    ba52:	500f      	str	r7, [r1, r0]
    ba54:	480c      	ldr	r0, [pc, #48]	; (ba88 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    ba56:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    ba5a:	9000      	str	r0, [sp, #0]
    ba5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ba60:	f240 31fe 	movw	r1, #1022	; 0x3fe
    ba64:	206c      	movs	r0, #108	; 0x6c
    ba66:	f000 fc77 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ba6a:	0000      	.short	0x0000
    ba6c:	40008000 	.word	0x40008000
    ba70:	40008140 	.word	0x40008140
    ba74:	200002de 	.word	0x200002de
    ba78:	4001f508 	.word	0x4001f508
    ba7c:	200002dc 	.word	0x200002dc
    ba80:	4000b000 	.word	0x4000b000
    ba84:	4000b504 	.word	0x4000b504
    ba88:	4000b140 	.word	0x4000b140

0000ba8c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    ba8c:	4825      	ldr	r0, [pc, #148]	; (bb24 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
    ba8e:	4a24      	ldr	r2, [pc, #144]	; (bb20 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
    ba90:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    ba94:	4924      	ldr	r1, [pc, #144]	; (bb28 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
    ba96:	1d03      	adds	r3, r0, #4
    ba98:	f891 c000 	ldrb.w	ip, [r1]
    ba9c:	2100      	movs	r1, #0
    ba9e:	f1bc 0f00 	cmp.w	ip, #0
    baa2:	d010      	beq.n	bac6 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    baa4:	4a21      	ldr	r2, [pc, #132]	; (bb2c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
    baa6:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    baaa:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    baae:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bab2:	bf00      	nop
    bab4:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    bab8:	2a00      	cmp	r2, #0
    baba:	bf04      	itt	eq
    babc:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    bac0:	2800      	cmpeq	r0, #0
    bac2:	d111      	bne.n	bae8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
    bac4:	e00a      	b.n	badc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    bac6:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    baca:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    bace:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    bad2:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    bad6:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bada:	e7eb      	b.n	bab4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    badc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    bae0:	f44f 6000 	mov.w	r0, #2048	; 0x800
    bae4:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    bae8:	4811      	ldr	r0, [pc, #68]	; (bb30 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
    baea:	f04f 32ff 	mov.w	r2, #4294967295
    baee:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    baf2:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    baf6:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    bafa:	f100 0204 	add.w	r2, r0, #4
    bafe:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bb02:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bb06:	f102 0204 	add.w	r2, r2, #4
    bb0a:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bb0e:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
    bb12:	f102 0204 	add.w	r2, r2, #4
    bb16:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bb1a:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    bb1e:	4770      	bx	lr
    bb20:	fffbfffd 	.word	0xfffbfffd
    bb24:	4000b000 	.word	0x4000b000
    bb28:	200002de 	.word	0x200002de
    bb2c:	fffafffd 	.word	0xfffafffd
    bb30:	40008000 	.word	0x40008000

0000bb34 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    bb34:	b510      	push	{r4, lr}
    bb36:	2807      	cmp	r0, #7
    bb38:	d20d      	bcs.n	bb56 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    bb3a:	e8df f000 	tbb	[pc, r0]
    bb3e:	0404      	.short	0x0404
    bb40:	06060404 	.word	0x06060404
    bb44:	0006      	.short	0x0006
    bb46:	4906      	ldr	r1, [pc, #24]	; (bb60 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    bb48:	e002      	b.n	bb50 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    bb4a:	1f00      	subs	r0, r0, #4
    bb4c:	4905      	ldr	r1, [pc, #20]	; (bb64 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    bb4e:	b2c0      	uxtb	r0, r0
    bb50:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    bb54:	bd10      	pop	{r4, pc}
    bb56:	f240 319e 	movw	r1, #926	; 0x39e
    bb5a:	206c      	movs	r0, #108	; 0x6c
    bb5c:	f000 fbfc 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bb60:	40008140 	.word	0x40008140
    bb64:	4000b140 	.word	0x4000b140

0000bb68 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    bb68:	b510      	push	{r4, lr}
    bb6a:	2807      	cmp	r0, #7
    bb6c:	d20d      	bcs.n	bb8a <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    bb6e:	e8df f000 	tbb	[pc, r0]
    bb72:	0404      	.short	0x0404
    bb74:	06060404 	.word	0x06060404
    bb78:	0006      	.short	0x0006
    bb7a:	4906      	ldr	r1, [pc, #24]	; (bb94 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    bb7c:	e002      	b.n	bb84 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    bb7e:	1f00      	subs	r0, r0, #4
    bb80:	4905      	ldr	r1, [pc, #20]	; (bb98 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    bb82:	b2c0      	uxtb	r0, r0
    bb84:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    bb88:	bd10      	pop	{r4, pc}
    bb8a:	f240 319e 	movw	r1, #926	; 0x39e
    bb8e:	206c      	movs	r0, #108	; 0x6c
    bb90:	f000 fbe2 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bb94:	40008140 	.word	0x40008140
    bb98:	4000b140 	.word	0x4000b140

0000bb9c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    bb9c:	b570      	push	{r4, r5, r6, lr}
    bb9e:	481f      	ldr	r0, [pc, #124]	; (bc1c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
    bba0:	2400      	movs	r4, #0
    bba2:	2104      	movs	r1, #4
    bba4:	7004      	strb	r4, [r0, #0]
    bba6:	1e80      	subs	r0, r0, #2
    bba8:	7001      	strb	r1, [r0, #0]
    bbaa:	0589      	lsls	r1, r1, #22
    bbac:	60c4      	str	r4, [r0, #12]
    bbae:	6081      	str	r1, [r0, #8]
    bbb0:	f7ff fc54 	bl	b45c <MPSL_IRQ_TIMER0_Handler+0x100>
    bbb4:	2501      	movs	r5, #1
    bbb6:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    bbba:	02eb      	lsls	r3, r5, #11
    bbbc:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    bbc0:	f3bf 8f4f 	dsb	sy
    bbc4:	f3bf 8f6f 	isb	sy
    bbc8:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    bbcc:	4814      	ldr	r0, [pc, #80]	; (bc20 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
    bbce:	6045      	str	r5, [r0, #4]
    bbd0:	6085      	str	r5, [r0, #8]
    bbd2:	4914      	ldr	r1, [pc, #80]	; (bc24 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
    bbd4:	680a      	ldr	r2, [r1, #0]
    bbd6:	2a00      	cmp	r2, #0
    bbd8:	d1fc      	bne.n	bbd4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
    bbda:	1e51      	subs	r1, r2, #1
    bbdc:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    bbe0:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    bbe4:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    bbe8:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    bbec:	490e      	ldr	r1, [pc, #56]	; (bc28 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
    bbee:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    bbf2:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    bbf6:	1d09      	adds	r1, r1, #4
    bbf8:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    bbfc:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    bc00:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    bc04:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    bc08:	6005      	str	r5, [r0, #0]
    bc0a:	f44f 7182 	mov.w	r1, #260	; 0x104
    bc0e:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
    bc12:	2102      	movs	r1, #2
    bc14:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    bc18:	bd70      	pop	{r4, r5, r6, pc}
    bc1a:	0000      	.short	0x0000
    bc1c:	200002de 	.word	0x200002de
    bc20:	4000b000 	.word	0x4000b000
    bc24:	4000b504 	.word	0x4000b504
    bc28:	4000b004 	.word	0x4000b004

0000bc2c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    bc2c:	4808      	ldr	r0, [pc, #32]	; (bc50 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    bc2e:	f990 0000 	ldrsb.w	r0, [r0]
    bc32:	2800      	cmp	r0, #0
    bc34:	bfb8      	it	lt
    bc36:	4770      	bxlt	lr
    bc38:	f000 011f 	and.w	r1, r0, #31
    bc3c:	2201      	movs	r2, #1
    bc3e:	fa02 f101 	lsl.w	r1, r2, r1
    bc42:	0940      	lsrs	r0, r0, #5
    bc44:	0080      	lsls	r0, r0, #2
    bc46:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bc4a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    bc4e:	4770      	bx	lr
    bc50:	2000036a 	.word	0x2000036a

0000bc54 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    bc54:	4803      	ldr	r0, [pc, #12]	; (bc64 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    bc56:	7800      	ldrb	r0, [r0, #0]
    bc58:	2803      	cmp	r0, #3
    bc5a:	bf0c      	ite	eq
    bc5c:	2001      	moveq	r0, #1
    bc5e:	2000      	movne	r0, #0
    bc60:	4770      	bx	lr
    bc62:	0000      	.short	0x0000
    bc64:	2000033c 	.word	0x2000033c

0000bc68 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    bc68:	4801      	ldr	r0, [pc, #4]	; (bc70 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    bc6a:	8840      	ldrh	r0, [r0, #2]
    bc6c:	4770      	bx	lr
    bc6e:	0000      	.short	0x0000
    bc70:	2000033c 	.word	0x2000033c

0000bc74 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    bc74:	4803      	ldr	r0, [pc, #12]	; (bc84 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    bc76:	7800      	ldrb	r0, [r0, #0]
    bc78:	2802      	cmp	r0, #2
    bc7a:	bf16      	itet	ne
    bc7c:	2803      	cmpne	r0, #3
    bc7e:	2001      	moveq	r0, #1
    bc80:	2000      	movne	r0, #0
    bc82:	4770      	bx	lr
    bc84:	2000033c 	.word	0x2000033c

0000bc88 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    bc88:	4802      	ldr	r0, [pc, #8]	; (bc94 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    bc8a:	2100      	movs	r1, #0
    bc8c:	7001      	strb	r1, [r0, #0]
    bc8e:	8041      	strh	r1, [r0, #2]
    bc90:	4770      	bx	lr
    bc92:	0000      	.short	0x0000
    bc94:	2000033c 	.word	0x2000033c

0000bc98 <MPSL_IRQ_CLOCK_Handler>:
    bc98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bc9c:	4c16      	ldr	r4, [pc, #88]	; (bcf8 <MPSL_IRQ_CLOCK_Handler+0x60>)
    bc9e:	7a60      	ldrb	r0, [r4, #9]
    bca0:	2800      	cmp	r0, #0
    bca2:	d027      	beq.n	bcf4 <MPSL_IRQ_CLOCK_Handler+0x5c>
    bca4:	f44f 7180 	mov.w	r1, #256	; 0x100
    bca8:	058d      	lsls	r5, r1, #22
    bcaa:	4628      	mov	r0, r5
    bcac:	f004 fb77 	bl	1039e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bcb0:	4680      	mov	r8, r0
    bcb2:	f44f 7182 	mov.w	r1, #260	; 0x104
    bcb6:	4628      	mov	r0, r5
    bcb8:	f004 fb71 	bl	1039e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bcbc:	2600      	movs	r6, #0
    bcbe:	4607      	mov	r7, r0
    bcc0:	f1b8 0f00 	cmp.w	r8, #0
    bcc4:	d009      	beq.n	bcda <MPSL_IRQ_CLOCK_Handler+0x42>
    bcc6:	2001      	movs	r0, #1
    bcc8:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bccc:	7920      	ldrb	r0, [r4, #4]
    bcce:	b120      	cbz	r0, bcda <MPSL_IRQ_CLOCK_Handler+0x42>
    bcd0:	7126      	strb	r6, [r4, #4]
    bcd2:	69e0      	ldr	r0, [r4, #28]
    bcd4:	b108      	cbz	r0, bcda <MPSL_IRQ_CLOCK_Handler+0x42>
    bcd6:	4780      	blx	r0
    bcd8:	61e6      	str	r6, [r4, #28]
    bcda:	b137      	cbz	r7, bcea <MPSL_IRQ_CLOCK_Handler+0x52>
    bcdc:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    bce0:	2002      	movs	r0, #2
    bce2:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bce6:	f000 fa57 	bl	c198 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    bcea:	4640      	mov	r0, r8
    bcec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bcf0:	f000 b858 	b.w	bda4 <MPSL_IRQ_CLOCK_Handler+0x10c>
    bcf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bcf8:	200002ec 	.word	0x200002ec
    bcfc:	b510      	push	{r4, lr}
    bcfe:	f004 fbf8 	bl	104f2 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    bd02:	b930      	cbnz	r0, bd12 <MPSL_IRQ_CLOCK_Handler+0x7a>
    bd04:	f004 fc16 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bd08:	b918      	cbnz	r0, bd12 <MPSL_IRQ_CLOCK_Handler+0x7a>
    bd0a:	f004 fc49 	bl	105a0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    bd0e:	2800      	cmp	r0, #0
    bd10:	d002      	beq.n	bd18 <MPSL_IRQ_CLOCK_Handler+0x80>
    bd12:	4902      	ldr	r1, [pc, #8]	; (bd1c <MPSL_IRQ_CLOCK_Handler+0x84>)
    bd14:	2002      	movs	r0, #2
    bd16:	6008      	str	r0, [r1, #0]
    bd18:	bd10      	pop	{r4, pc}
    bd1a:	0000      	.short	0x0000
    bd1c:	40000c34 	.word	0x40000c34
    bd20:	b570      	push	{r4, r5, r6, lr}
    bd22:	f000 f99b 	bl	c05c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    bd26:	f000 fa9f 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    bd2a:	4c09      	ldr	r4, [pc, #36]	; (bd50 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    bd2c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bd30:	b130      	cbz	r0, bd40 <MPSL_IRQ_CLOCK_Handler+0xa8>
    bd32:	f7ff ffe3 	bl	bcfc <MPSL_IRQ_CLOCK_Handler+0x64>
    bd36:	2001      	movs	r0, #1
    bd38:	6128      	str	r0, [r5, #16]
    bd3a:	2004      	movs	r0, #4
    bd3c:	72a0      	strb	r0, [r4, #10]
    bd3e:	e004      	b.n	bd4a <MPSL_IRQ_CLOCK_Handler+0xb2>
    bd40:	2003      	movs	r0, #3
    bd42:	72a0      	strb	r0, [r4, #10]
    bd44:	2001      	movs	r0, #1
    bd46:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    bd4a:	2000      	movs	r0, #0
    bd4c:	71e0      	strb	r0, [r4, #7]
    bd4e:	bd70      	pop	{r4, r5, r6, pc}
    bd50:	200002ec 	.word	0x200002ec
    bd54:	b570      	push	{r4, r5, r6, lr}
    bd56:	4c12      	ldr	r4, [pc, #72]	; (bda0 <MPSL_IRQ_CLOCK_Handler+0x108>)
    bd58:	79a0      	ldrb	r0, [r4, #6]
    bd5a:	b1e0      	cbz	r0, bd96 <MPSL_IRQ_CLOCK_Handler+0xfe>
    bd5c:	79e1      	ldrb	r1, [r4, #7]
    bd5e:	1e40      	subs	r0, r0, #1
    bd60:	4281      	cmp	r1, r0
    bd62:	da18      	bge.n	bd96 <MPSL_IRQ_CLOCK_Handler+0xfe>
    bd64:	f000 fa80 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    bd68:	4605      	mov	r5, r0
    bd6a:	f000 fb69 	bl	c440 <mpsl_temperature_get>
    bd6e:	79a1      	ldrb	r1, [r4, #6]
    bd70:	2901      	cmp	r1, #1
    bd72:	d902      	bls.n	bd7a <MPSL_IRQ_CLOCK_Handler+0xe2>
    bd74:	79e1      	ldrb	r1, [r4, #7]
    bd76:	1c49      	adds	r1, r1, #1
    bd78:	71e1      	strb	r1, [r4, #7]
    bd7a:	b10d      	cbz	r5, bd80 <MPSL_IRQ_CLOCK_Handler+0xe8>
    bd7c:	6961      	ldr	r1, [r4, #20]
    bd7e:	e000      	b.n	bd82 <MPSL_IRQ_CLOCK_Handler+0xea>
    bd80:	6921      	ldr	r1, [r4, #16]
    bd82:	1a41      	subs	r1, r0, r1
    bd84:	2902      	cmp	r1, #2
    bd86:	da02      	bge.n	bd8e <MPSL_IRQ_CLOCK_Handler+0xf6>
    bd88:	f111 0f02 	cmn.w	r1, #2
    bd8c:	dc07      	bgt.n	bd9e <MPSL_IRQ_CLOCK_Handler+0x106>
    bd8e:	b10d      	cbz	r5, bd94 <MPSL_IRQ_CLOCK_Handler+0xfc>
    bd90:	6160      	str	r0, [r4, #20]
    bd92:	e000      	b.n	bd96 <MPSL_IRQ_CLOCK_Handler+0xfe>
    bd94:	6120      	str	r0, [r4, #16]
    bd96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bd9a:	f7ff bfc1 	b.w	bd20 <MPSL_IRQ_CLOCK_Handler+0x88>
    bd9e:	bd70      	pop	{r4, r5, r6, pc}
    bda0:	200002ec 	.word	0x200002ec
    bda4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bda8:	4606      	mov	r6, r0
    bdaa:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bdae:	f44f 7186 	mov.w	r1, #268	; 0x10c
    bdb2:	4628      	mov	r0, r5
    bdb4:	f004 faf3 	bl	1039e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bdb8:	4680      	mov	r8, r0
    bdba:	f44f 7188 	mov.w	r1, #272	; 0x110
    bdbe:	4628      	mov	r0, r5
    bdc0:	f004 faed 	bl	1039e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bdc4:	4c27      	ldr	r4, [pc, #156]	; (be64 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    bdc6:	4682      	mov	sl, r0
    bdc8:	7827      	ldrb	r7, [r4, #0]
    bdca:	f104 0008 	add.w	r0, r4, #8
    bdce:	f004 fb5a 	bl	10486 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    bdd2:	b110      	cbz	r0, bdda <MPSL_IRQ_CLOCK_Handler+0x142>
    bdd4:	f44f 71db 	mov.w	r1, #438	; 0x1b6
    bdd8:	e016      	b.n	be08 <MPSL_IRQ_CLOCK_Handler+0x170>
    bdda:	f04f 0901 	mov.w	r9, #1
    bdde:	b146      	cbz	r6, bdf2 <MPSL_IRQ_CLOCK_Handler+0x15a>
    bde0:	7aa0      	ldrb	r0, [r4, #10]
    bde2:	2803      	cmp	r0, #3
    bde4:	d105      	bne.n	bdf2 <MPSL_IRQ_CLOCK_Handler+0x15a>
    bde6:	2004      	movs	r0, #4
    bde8:	72a0      	strb	r0, [r4, #10]
    bdea:	f7ff ff87 	bl	bcfc <MPSL_IRQ_CLOCK_Handler+0x64>
    bdee:	f8c5 9010 	str.w	r9, [r5, #16]
    bdf2:	2600      	movs	r6, #0
    bdf4:	f1b8 0f00 	cmp.w	r8, #0
    bdf8:	d018      	beq.n	be2c <MPSL_IRQ_CLOCK_Handler+0x194>
    bdfa:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    bdfe:	7aa0      	ldrb	r0, [r4, #10]
    be00:	2804      	cmp	r0, #4
    be02:	d004      	beq.n	be0e <MPSL_IRQ_CLOCK_Handler+0x176>
    be04:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    be08:	206d      	movs	r0, #109	; 0x6d
    be0a:	f000 faa5 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    be0e:	f004 fb70 	bl	104f2 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    be12:	b928      	cbnz	r0, be20 <MPSL_IRQ_CLOCK_Handler+0x188>
    be14:	f004 fb8e 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    be18:	b910      	cbnz	r0, be20 <MPSL_IRQ_CLOCK_Handler+0x188>
    be1a:	f004 fbc1 	bl	105a0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    be1e:	b108      	cbz	r0, be24 <MPSL_IRQ_CLOCK_Handler+0x18c>
    be20:	4811      	ldr	r0, [pc, #68]	; (be68 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    be22:	6006      	str	r6, [r0, #0]
    be24:	2002      	movs	r0, #2
    be26:	72a0      	strb	r0, [r4, #10]
    be28:	f000 f8fc 	bl	c024 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    be2c:	f1ba 0f00 	cmp.w	sl, #0
    be30:	d008      	beq.n	be44 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    be32:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    be36:	7aa0      	ldrb	r0, [r4, #10]
    be38:	2802      	cmp	r0, #2
    be3a:	d101      	bne.n	be40 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    be3c:	f7ff ff8a 	bl	bd54 <MPSL_IRQ_CLOCK_Handler+0xbc>
    be40:	f8c5 9014 	str.w	r9, [r5, #20]
    be44:	b13f      	cbz	r7, be56 <MPSL_IRQ_CLOCK_Handler+0x1be>
    be46:	7026      	strb	r6, [r4, #0]
    be48:	7aa0      	ldrb	r0, [r4, #10]
    be4a:	2802      	cmp	r0, #2
    be4c:	d101      	bne.n	be52 <MPSL_IRQ_CLOCK_Handler+0x1ba>
    be4e:	f7ff ff67 	bl	bd20 <MPSL_IRQ_CLOCK_Handler+0x88>
    be52:	f000 f8e7 	bl	c024 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    be56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    be5a:	4802      	ldr	r0, [pc, #8]	; (be64 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    be5c:	3008      	adds	r0, #8
    be5e:	f004 bb29 	b.w	104b4 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    be62:	0000      	.short	0x0000
    be64:	200002ec 	.word	0x200002ec
    be68:	40000c34 	.word	0x40000c34
    be6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be70:	4c49      	ldr	r4, [pc, #292]	; (bf98 <MPSL_IRQ_CLOCK_Handler+0x300>)
    be72:	2700      	movs	r7, #0
    be74:	4606      	mov	r6, r0
    be76:	61a7      	str	r7, [r4, #24]
    be78:	7842      	ldrb	r2, [r0, #1]
    be7a:	7881      	ldrb	r1, [r0, #2]
    be7c:	7800      	ldrb	r0, [r0, #0]
    be7e:	72e0      	strb	r0, [r4, #11]
    be80:	7162      	strb	r2, [r4, #5]
    be82:	71a1      	strb	r1, [r4, #6]
    be84:	71e7      	strb	r7, [r4, #7]
    be86:	f04f 0801 	mov.w	r8, #1
    be8a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    be8e:	2805      	cmp	r0, #5
    be90:	d225      	bcs.n	bede <MPSL_IRQ_CLOCK_Handler+0x246>
    be92:	e8df f000 	tbb	[pc, r0]
    be96:	0310      	.short	0x0310
    be98:	00222006 	.word	0x00222006
    be9c:	f8c4 8018 	str.w	r8, [r4, #24]
    bea0:	e009      	b.n	beb6 <MPSL_IRQ_CLOCK_Handler+0x21e>
    bea2:	f000 f8db 	bl	c05c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    bea6:	2101      	movs	r1, #1
    bea8:	4628      	mov	r0, r5
    beaa:	f004 fa7d 	bl	103a8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    beae:	2800      	cmp	r0, #0
    beb0:	d0f9      	beq.n	bea6 <MPSL_IRQ_CLOCK_Handler+0x20e>
    beb2:	2002      	movs	r0, #2
    beb4:	61a0      	str	r0, [r4, #24]
    beb6:	f004 faa3 	bl	10400 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    beba:	b1c0      	cbz	r0, beee <MPSL_IRQ_CLOCK_Handler+0x256>
    bebc:	f000 f9ee 	bl	c29c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    bec0:	7e21      	ldrb	r1, [r4, #24]
    bec2:	f001 0103 	and.w	r1, r1, #3
    bec6:	4288      	cmp	r0, r1
    bec8:	d111      	bne.n	beee <MPSL_IRQ_CLOCK_Handler+0x256>
    beca:	79b0      	ldrb	r0, [r6, #6]
    becc:	b160      	cbz	r0, bee8 <MPSL_IRQ_CLOCK_Handler+0x250>
    bece:	2002      	movs	r0, #2
    bed0:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    bed4:	e044      	b.n	bf60 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    bed6:	4831      	ldr	r0, [pc, #196]	; (bf9c <MPSL_IRQ_CLOCK_Handler+0x304>)
    bed8:	e7ec      	b.n	beb4 <MPSL_IRQ_CLOCK_Handler+0x21c>
    beda:	4831      	ldr	r0, [pc, #196]	; (bfa0 <MPSL_IRQ_CLOCK_Handler+0x308>)
    bedc:	e7ea      	b.n	beb4 <MPSL_IRQ_CLOCK_Handler+0x21c>
    bede:	f240 313d 	movw	r1, #829	; 0x33d
    bee2:	206d      	movs	r0, #109	; 0x6d
    bee4:	f000 fa38 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bee8:	f000 f9ac 	bl	c244 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    beec:	e038      	b.n	bf60 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    beee:	f8c5 800c 	str.w	r8, [r5, #12]
    bef2:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    bef6:	69a0      	ldr	r0, [r4, #24]
    bef8:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    befc:	f004 fae5 	bl	104ca <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    bf00:	b940      	cbnz	r0, bf14 <MPSL_IRQ_CLOCK_Handler+0x27c>
    bf02:	f004 faec 	bl	104de <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    bf06:	b928      	cbnz	r0, bf14 <MPSL_IRQ_CLOCK_Handler+0x27c>
    bf08:	f004 fb00 	bl	1050c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    bf0c:	b910      	cbnz	r0, bf14 <MPSL_IRQ_CLOCK_Handler+0x27c>
    bf0e:	f004 fb11 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bf12:	b138      	cbz	r0, bf24 <MPSL_IRQ_CLOCK_Handler+0x28c>
    bf14:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bf18:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    bf1c:	4921      	ldr	r1, [pc, #132]	; (bfa4 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    bf1e:	f3c0 3042 	ubfx	r0, r0, #13, #3
    bf22:	6008      	str	r0, [r1, #0]
    bf24:	f004 fad1 	bl	104ca <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    bf28:	b940      	cbnz	r0, bf3c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    bf2a:	f004 fad8 	bl	104de <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    bf2e:	b928      	cbnz	r0, bf3c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    bf30:	f004 faec 	bl	1050c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    bf34:	b910      	cbnz	r0, bf3c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    bf36:	f004 fafd 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bf3a:	b118      	cbz	r0, bf44 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    bf3c:	4919      	ldr	r1, [pc, #100]	; (bfa4 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    bf3e:	3110      	adds	r1, #16
    bf40:	f8c1 8000 	str.w	r8, [r1]
    bf44:	f8c5 8008 	str.w	r8, [r5, #8]
    bf48:	2002      	movs	r0, #2
    bf4a:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    bf4e:	79b0      	ldrb	r0, [r6, #6]
    bf50:	b930      	cbnz	r0, bf60 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    bf52:	f000 f829 	bl	bfa8 <MPSL_IRQ_CLOCK_Handler+0x310>
    bf56:	2002      	movs	r0, #2
    bf58:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bf5c:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    bf60:	79a0      	ldrb	r0, [r4, #6]
    bf62:	b170      	cbz	r0, bf82 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    bf64:	7830      	ldrb	r0, [r6, #0]
    bf66:	b960      	cbnz	r0, bf82 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    bf68:	f000 f97e 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    bf6c:	4606      	mov	r6, r0
    bf6e:	f000 fa67 	bl	c440 <mpsl_temperature_get>
    bf72:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    bf76:	b116      	cbz	r6, bf7e <MPSL_IRQ_CLOCK_Handler+0x2e6>
    bf78:	e9c4 1004 	strd	r1, r0, [r4, #16]
    bf7c:	e001      	b.n	bf82 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    bf7e:	e9c4 0104 	strd	r0, r1, [r4, #16]
    bf82:	2101      	movs	r1, #1
    bf84:	4628      	mov	r0, r5
    bf86:	f004 fa0f 	bl	103a8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    bf8a:	b108      	cbz	r0, bf90 <MPSL_IRQ_CLOCK_Handler+0x2f8>
    bf8c:	f000 f966 	bl	c25c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    bf90:	72a7      	strb	r7, [r4, #10]
    bf92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bf96:	0000      	.short	0x0000
    bf98:	200002ec 	.word	0x200002ec
    bf9c:	00020001 	.word	0x00020001
    bfa0:	00030001 	.word	0x00030001
    bfa4:	4000053c 	.word	0x4000053c
    bfa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bfac:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bfb0:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    bfb4:	f010 0f02 	tst.w	r0, #2
    bfb8:	d011      	beq.n	bfde <MPSL_IRQ_CLOCK_Handler+0x346>
    bfba:	4c16      	ldr	r4, [pc, #88]	; (c014 <MPSL_IRQ_CLOCK_Handler+0x37c>)
    bfbc:	6820      	ldr	r0, [r4, #0]
    bfbe:	43c0      	mvns	r0, r0
    bfc0:	f340 1600 	sbfx	r6, r0, #4, #1
    bfc4:	6820      	ldr	r0, [r4, #0]
    bfc6:	f040 0010 	orr.w	r0, r0, #16
    bfca:	6020      	str	r0, [r4, #0]
    bfcc:	f44f 7782 	mov.w	r7, #260	; 0x104
    bfd0:	4639      	mov	r1, r7
    bfd2:	4628      	mov	r0, r5
    bfd4:	1c76      	adds	r6, r6, #1
    bfd6:	f004 f9e2 	bl	1039e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bfda:	b128      	cbz	r0, bfe8 <MPSL_IRQ_CLOCK_Handler+0x350>
    bfdc:	e00a      	b.n	bff4 <MPSL_IRQ_CLOCK_Handler+0x35c>
    bfde:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    bfe2:	206d      	movs	r0, #109	; 0x6d
    bfe4:	f000 f9b8 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bfe8:	f004 fae6 	bl	105b8 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
    bfec:	e002      	b.n	bff4 <MPSL_IRQ_CLOCK_Handler+0x35c>
    bfee:	bf00      	nop
    bff0:	f004 fae0 	bl	105b4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    bff4:	4639      	mov	r1, r7
    bff6:	4628      	mov	r0, r5
    bff8:	f004 f9d1 	bl	1039e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bffc:	2800      	cmp	r0, #0
    bffe:	d0f7      	beq.n	bff0 <MPSL_IRQ_CLOCK_Handler+0x358>
    c000:	f000 f920 	bl	c244 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    c004:	2e00      	cmp	r6, #0
    c006:	d103      	bne.n	c010 <MPSL_IRQ_CLOCK_Handler+0x378>
    c008:	6820      	ldr	r0, [r4, #0]
    c00a:	f020 0010 	bic.w	r0, r0, #16
    c00e:	6020      	str	r0, [r4, #0]
    c010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c014:	e000ed10 	.word	0xe000ed10

0000c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    c018:	4801      	ldr	r0, [pc, #4]	; (c020 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    c01a:	89c0      	ldrh	r0, [r0, #14]
    c01c:	4770      	bx	lr
    c01e:	0000      	.short	0x0000
    c020:	200002ec 	.word	0x200002ec

0000c024 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    c024:	b510      	push	{r4, lr}
    c026:	f3ef 8410 	mrs	r4, PRIMASK
    c02a:	b672      	cpsid	i
    c02c:	480a      	ldr	r0, [pc, #40]	; (c058 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    c02e:	7841      	ldrb	r1, [r0, #1]
    c030:	b129      	cbz	r1, c03e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    c032:	7841      	ldrb	r1, [r0, #1]
    c034:	1e49      	subs	r1, r1, #1
    c036:	7041      	strb	r1, [r0, #1]
    c038:	7841      	ldrb	r1, [r0, #1]
    c03a:	b129      	cbz	r1, c048 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    c03c:	e008      	b.n	c050 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    c03e:	f240 1119 	movw	r1, #281	; 0x119
    c042:	206d      	movs	r0, #109	; 0x6d
    c044:	f000 f988 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c048:	7880      	ldrb	r0, [r0, #2]
    c04a:	b908      	cbnz	r0, c050 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    c04c:	f000 f91a 	bl	c284 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    c050:	2c00      	cmp	r4, #0
    c052:	d100      	bne.n	c056 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    c054:	b662      	cpsie	i
    c056:	bd10      	pop	{r4, pc}
    c058:	200002ec 	.word	0x200002ec

0000c05c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    c05c:	b510      	push	{r4, lr}
    c05e:	f3ef 8410 	mrs	r4, PRIMASK
    c062:	b672      	cpsid	i
    c064:	4806      	ldr	r0, [pc, #24]	; (c080 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    c066:	7841      	ldrb	r1, [r0, #1]
    c068:	1c49      	adds	r1, r1, #1
    c06a:	7041      	strb	r1, [r0, #1]
    c06c:	7840      	ldrb	r0, [r0, #1]
    c06e:	2801      	cmp	r0, #1
    c070:	d101      	bne.n	c076 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    c072:	f004 f9b0 	bl	103d6 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    c076:	2c00      	cmp	r4, #0
    c078:	d100      	bne.n	c07c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    c07a:	b662      	cpsie	i
    c07c:	bd10      	pop	{r4, pc}
    c07e:	0000      	.short	0x0000
    c080:	200002ec 	.word	0x200002ec

0000c084 <mpsl_clock_hfclk_release>:
    c084:	4805      	ldr	r0, [pc, #20]	; (c09c <mpsl_clock_hfclk_release+0x18>)
    c086:	b510      	push	{r4, lr}
    c088:	78c1      	ldrb	r1, [r0, #3]
    c08a:	b121      	cbz	r1, c096 <mpsl_clock_hfclk_release+0x12>
    c08c:	2100      	movs	r1, #0
    c08e:	7101      	strb	r1, [r0, #4]
    c090:	70c1      	strb	r1, [r0, #3]
    c092:	f7ff ffc7 	bl	c024 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    c096:	2000      	movs	r0, #0
    c098:	bd10      	pop	{r4, pc}
    c09a:	0000      	.short	0x0000
    c09c:	200002ec 	.word	0x200002ec

0000c0a0 <mpsl_clock_hfclk_request>:
    c0a0:	b570      	push	{r4, r5, r6, lr}
    c0a2:	4c0c      	ldr	r4, [pc, #48]	; (c0d4 <mpsl_clock_hfclk_request+0x34>)
    c0a4:	78e1      	ldrb	r1, [r4, #3]
    c0a6:	b961      	cbnz	r1, c0c2 <mpsl_clock_hfclk_request+0x22>
    c0a8:	2501      	movs	r5, #1
    c0aa:	70e5      	strb	r5, [r4, #3]
    c0ac:	61e0      	str	r0, [r4, #28]
    c0ae:	f7ff ffd5 	bl	c05c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c0b2:	f000 f8d9 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c0b6:	b130      	cbz	r0, c0c6 <mpsl_clock_hfclk_request+0x26>
    c0b8:	69e0      	ldr	r0, [r4, #28]
    c0ba:	b110      	cbz	r0, c0c2 <mpsl_clock_hfclk_request+0x22>
    c0bc:	4780      	blx	r0
    c0be:	2000      	movs	r0, #0
    c0c0:	61e0      	str	r0, [r4, #28]
    c0c2:	2000      	movs	r0, #0
    c0c4:	bd70      	pop	{r4, r5, r6, pc}
    c0c6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c0ca:	7125      	strb	r5, [r4, #4]
    c0cc:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    c0d0:	e7f7      	b.n	c0c2 <mpsl_clock_hfclk_request+0x22>
    c0d2:	0000      	.short	0x0000
    c0d4:	200002ec 	.word	0x200002ec

0000c0d8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    c0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c0dc:	0005      	movs	r5, r0
    c0de:	f06f 0015 	mvn.w	r0, #21
    c0e2:	d03f      	beq.n	c164 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c0e4:	7829      	ldrb	r1, [r5, #0]
    c0e6:	2904      	cmp	r1, #4
    c0e8:	d83c      	bhi.n	c164 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c0ea:	2900      	cmp	r1, #0
    c0ec:	7869      	ldrb	r1, [r5, #1]
    c0ee:	d03b      	beq.n	c168 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    c0f0:	2900      	cmp	r1, #0
    c0f2:	d137      	bne.n	c164 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c0f4:	78a9      	ldrb	r1, [r5, #2]
    c0f6:	2900      	cmp	r1, #0
    c0f8:	d134      	bne.n	c164 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c0fa:	2000      	movs	r0, #0
    c0fc:	f004 f93e 	bl	1037c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    c100:	2000      	movs	r0, #0
    c102:	f004 f92e 	bl	10362 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    c106:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    c10a:	f04f 31ff 	mov.w	r1, #4294967295
    c10e:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    c112:	2600      	movs	r6, #0
    c114:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    c118:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    c11c:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    c120:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    c124:	4c14      	ldr	r4, [pc, #80]	; (c178 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    c126:	7066      	strb	r6, [r4, #1]
    c128:	88a8      	ldrh	r0, [r5, #4]
    c12a:	81a0      	strh	r0, [r4, #12]
    c12c:	f004 f94a 	bl	103c4 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    c130:	2701      	movs	r7, #1
    c132:	b108      	cbz	r0, c138 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    c134:	70e7      	strb	r7, [r4, #3]
    c136:	7067      	strb	r7, [r4, #1]
    c138:	2101      	movs	r1, #1
    c13a:	4640      	mov	r0, r8
    c13c:	f004 f934 	bl	103a8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c140:	b108      	cbz	r0, c146 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    c142:	f000 f88b 	bl	c25c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    c146:	f240 50f5 	movw	r0, #1525	; 0x5f5
    c14a:	81e0      	strh	r0, [r4, #14]
    c14c:	4628      	mov	r0, r5
    c14e:	f7ff fe8d 	bl	be6c <MPSL_IRQ_CLOCK_Handler+0x1d4>
    c152:	7267      	strb	r7, [r4, #9]
    c154:	2000      	movs	r0, #0
    c156:	f004 f904 	bl	10362 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    c15a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c15e:	4630      	mov	r0, r6
    c160:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    c164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c168:	2900      	cmp	r1, #0
    c16a:	d0fb      	beq.n	c164 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c16c:	2920      	cmp	r1, #32
    c16e:	d8f9      	bhi.n	c164 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c170:	78a9      	ldrb	r1, [r5, #2]
    c172:	2921      	cmp	r1, #33	; 0x21
    c174:	d9c1      	bls.n	c0fa <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    c176:	e7f5      	b.n	c164 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c178:	200002ec 	.word	0x200002ec

0000c17c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    c17c:	4801      	ldr	r0, [pc, #4]	; (c184 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    c17e:	8980      	ldrh	r0, [r0, #12]
    c180:	4770      	bx	lr
    c182:	0000      	.short	0x0000
    c184:	200002ec 	.word	0x200002ec

0000c188 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    c188:	4802      	ldr	r0, [pc, #8]	; (c194 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    c18a:	7a80      	ldrb	r0, [r0, #10]
    c18c:	2800      	cmp	r0, #0
    c18e:	d000      	beq.n	c192 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    c190:	2001      	movs	r0, #1
    c192:	4770      	bx	lr
    c194:	200002ec 	.word	0x200002ec

0000c198 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    c198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c19a:	4d1f      	ldr	r5, [pc, #124]	; (c218 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c19c:	7ae8      	ldrb	r0, [r5, #11]
    c19e:	2800      	cmp	r0, #0
    c1a0:	d10f      	bne.n	c1c2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c1a2:	7e28      	ldrb	r0, [r5, #24]
    c1a4:	f000 0003 	and.w	r0, r0, #3
    c1a8:	f004 f91a 	bl	103e0 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c1ac:	2800      	cmp	r0, #0
    c1ae:	d008      	beq.n	c1c2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c1b0:	f3ef 8110 	mrs	r1, PRIMASK
    c1b4:	b672      	cpsid	i
    c1b6:	f7ff ffe7 	bl	c188 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    c1ba:	b118      	cbz	r0, c1c4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    c1bc:	2900      	cmp	r1, #0
    c1be:	d100      	bne.n	c1c2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c1c0:	b662      	cpsie	i
    c1c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c1c4:	2601      	movs	r6, #1
    c1c6:	72ae      	strb	r6, [r5, #10]
    c1c8:	b901      	cbnz	r1, c1cc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    c1ca:	b662      	cpsie	i
    c1cc:	2018      	movs	r0, #24
    c1ce:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    c1d2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    c1d6:	61a6      	str	r6, [r4, #24]
    c1d8:	f44f 7020 	mov.w	r0, #640	; 0x280
    c1dc:	f8ad 0000 	strh.w	r0, [sp]
    c1e0:	f8bd 0000 	ldrh.w	r0, [sp]
    c1e4:	1e41      	subs	r1, r0, #1
    c1e6:	f8ad 1000 	strh.w	r1, [sp]
    c1ea:	d2f9      	bcs.n	c1e0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    c1ec:	2700      	movs	r7, #0
    c1ee:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    c1f2:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    c1f6:	4808      	ldr	r0, [pc, #32]	; (c218 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c1f8:	3008      	adds	r0, #8
    c1fa:	f004 f957 	bl	104ac <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    c1fe:	702f      	strb	r7, [r5, #0]
    c200:	f7ff fd8e 	bl	bd20 <MPSL_IRQ_CLOCK_Handler+0x88>
    c204:	6166      	str	r6, [r4, #20]
    c206:	7968      	ldrb	r0, [r5, #5]
    c208:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    c20c:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    c210:	2018      	movs	r0, #24
    c212:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    c216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c218:	200002ec 	.word	0x200002ec

0000c21c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c21c:	4602      	mov	r2, r0
    c21e:	b510      	push	{r4, lr}
    c220:	2000      	movs	r0, #0
    c222:	2900      	cmp	r1, #0
    c224:	d00a      	beq.n	c23c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c226:	2a00      	cmp	r2, #0
    c228:	d008      	beq.n	c23c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c22a:	fba2 0101 	umull	r0, r1, r2, r1
    c22e:	1e40      	subs	r0, r0, #1
    c230:	4a03      	ldr	r2, [pc, #12]	; (c240 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x24>)
    c232:	f141 31ff 	adc.w	r1, r1, #4294967295
    c236:	f004 f9c1 	bl	105bc <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    c23a:	1c40      	adds	r0, r0, #1
    c23c:	bd10      	pop	{r4, pc}
    c23e:	0000      	.short	0x0000
    c240:	000f4240 	.word	0x000f4240

0000c244 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    c244:	b510      	push	{r4, lr}
    c246:	4c04      	ldr	r4, [pc, #16]	; (c258 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    c248:	7e20      	ldrb	r0, [r4, #24]
    c24a:	f000 0003 	and.w	r0, r0, #3
    c24e:	f004 f8c7 	bl	103e0 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c252:	2800      	cmp	r0, #0
    c254:	d0f8      	beq.n	c248 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    c256:	bd10      	pop	{r4, pc}
    c258:	200002ec 	.word	0x200002ec

0000c25c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    c25c:	4901      	ldr	r1, [pc, #4]	; (c264 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    c25e:	2001      	movs	r0, #1
    c260:	7008      	strb	r0, [r1, #0]
    c262:	4770      	bx	lr
    c264:	2000036b 	.word	0x2000036b

0000c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    c268:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c26c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    c270:	b918      	cbnz	r0, c27a <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    c272:	4803      	ldr	r0, [pc, #12]	; (c280 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    c274:	7800      	ldrb	r0, [r0, #0]
    c276:	2800      	cmp	r0, #0
    c278:	d000      	beq.n	c27c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    c27a:	2001      	movs	r0, #1
    c27c:	4770      	bx	lr
    c27e:	0000      	.short	0x0000
    c280:	2000036b 	.word	0x2000036b

0000c284 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    c284:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c288:	2101      	movs	r1, #1
    c28a:	6041      	str	r1, [r0, #4]
    c28c:	2100      	movs	r1, #0
    c28e:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c292:	4801      	ldr	r0, [pc, #4]	; (c298 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    c294:	7001      	strb	r1, [r0, #0]
    c296:	4770      	bx	lr
    c298:	2000036b 	.word	0x2000036b

0000c29c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    c29c:	4802      	ldr	r0, [pc, #8]	; (c2a8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    c29e:	6800      	ldr	r0, [r0, #0]
    c2a0:	f000 0003 	and.w	r0, r0, #3
    c2a4:	4770      	bx	lr
    c2a6:	0000      	.short	0x0000
    c2a8:	4000041c 	.word	0x4000041c
    c2ac:	b510      	push	{r4, lr}
    c2ae:	b131      	cbz	r1, c2be <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    c2b0:	2901      	cmp	r1, #1
    c2b2:	d007      	beq.n	c2c4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    c2b4:	f240 3102 	movw	r1, #770	; 0x302
    c2b8:	a005      	add	r0, pc, #20	; (adr r0, c2d0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    c2ba:	f000 f821 	bl	c300 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    c2be:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    c2c2:	e001      	b.n	c2c8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    c2c4:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    c2c8:	f000 0001 	and.w	r0, r0, #1
    c2cc:	bd10      	pop	{r4, pc}
    c2ce:	0000      	.short	0x0000
    c2d0:	5f66726e 	.word	0x5f66726e
    c2d4:	636f6c63 	.word	0x636f6c63
    c2d8:	00682e6b 	.word	0x00682e6b
    c2dc:	f3bf 8f4f 	dsb	sy
    c2e0:	4805      	ldr	r0, [pc, #20]	; (c2f8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    c2e2:	6801      	ldr	r1, [r0, #0]
    c2e4:	4a05      	ldr	r2, [pc, #20]	; (c2fc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    c2e6:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    c2ea:	4311      	orrs	r1, r2
    c2ec:	6001      	str	r1, [r0, #0]
    c2ee:	f3bf 8f4f 	dsb	sy
    c2f2:	bf00      	nop
    c2f4:	e7fd      	b.n	c2f2 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    c2f6:	0000      	.short	0x0000
    c2f8:	e000ed0c 	.word	0xe000ed0c
    c2fc:	05fa0004 	.word	0x05fa0004

0000c300 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    c300:	b672      	cpsid	i
    c302:	4a03      	ldr	r2, [pc, #12]	; (c310 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    c304:	6852      	ldr	r2, [r2, #4]
    c306:	b102      	cbz	r2, c30a <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    c308:	4790      	blx	r2
    c30a:	f7ff ffe7 	bl	c2dc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c30e:	0000      	.short	0x0000
    c310:	2000030c 	.word	0x2000030c
    c314:	4806      	ldr	r0, [pc, #24]	; (c330 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    c316:	b510      	push	{r4, lr}
    c318:	2100      	movs	r1, #0
    c31a:	6001      	str	r1, [r0, #0]
    c31c:	2101      	movs	r1, #1
    c31e:	6001      	str	r1, [r0, #0]
    c320:	4608      	mov	r0, r1
    c322:	f004 f884 	bl	1042e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c32a:	2001      	movs	r0, #1
    c32c:	f004 b872 	b.w	10414 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c330:	40001ffc 	.word	0x40001ffc
    c334:	4807      	ldr	r0, [pc, #28]	; (c354 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    c336:	b510      	push	{r4, lr}
    c338:	2101      	movs	r1, #1
    c33a:	6041      	str	r1, [r0, #4]
    c33c:	1e89      	subs	r1, r1, #2
    c33e:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    c342:	200c      	movs	r0, #12
    c344:	f004 f873 	bl	1042e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c34c:	200c      	movs	r0, #12
    c34e:	f004 b861 	b.w	10414 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c352:	0000      	.short	0x0000
    c354:	4000c000 	.word	0x4000c000

0000c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    c358:	b50e      	push	{r1, r2, r3, lr}
    c35a:	b672      	cpsid	i
    c35c:	4a0f      	ldr	r2, [pc, #60]	; (c39c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    c35e:	6855      	ldr	r5, [r2, #4]
    c360:	b1d5      	cbz	r5, c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    c362:	2200      	movs	r2, #0
    c364:	4603      	mov	r3, r0
    c366:	466e      	mov	r6, sp
    c368:	240a      	movs	r4, #10
    c36a:	e003      	b.n	c374 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    c36c:	fbb0 f0f4 	udiv	r0, r0, r4
    c370:	1c52      	adds	r2, r2, #1
    c372:	b2d2      	uxtb	r2, r2
    c374:	2800      	cmp	r0, #0
    c376:	d1f9      	bne.n	c36c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    c378:	54b0      	strb	r0, [r6, r2]
    c37a:	e009      	b.n	c390 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    c37c:	fbb3 f0f4 	udiv	r0, r3, r4
    c380:	fb04 3010 	mls	r0, r4, r0, r3
    c384:	fbb3 f3f4 	udiv	r3, r3, r4
    c388:	1e52      	subs	r2, r2, #1
    c38a:	b2d2      	uxtb	r2, r2
    c38c:	3030      	adds	r0, #48	; 0x30
    c38e:	54b0      	strb	r0, [r6, r2]
    c390:	2a00      	cmp	r2, #0
    c392:	d1f3      	bne.n	c37c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    c394:	4630      	mov	r0, r6
    c396:	47a8      	blx	r5
    c398:	f7ff ffa0 	bl	c2dc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c39c:	2000030c 	.word	0x2000030c

0000c3a0 <mpsl_init>:
    c3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c3a4:	4c18      	ldr	r4, [pc, #96]	; (c408 <mpsl_init+0x68>)
    c3a6:	4606      	mov	r6, r0
    c3a8:	4617      	mov	r7, r2
    c3aa:	7860      	ldrb	r0, [r4, #1]
    c3ac:	460d      	mov	r5, r1
    c3ae:	b118      	cbz	r0, c3b8 <mpsl_init+0x18>
    c3b0:	f04f 30ff 	mov.w	r0, #4294967295
    c3b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c3b8:	f7fc fbe2 	bl	8b80 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    c3bc:	b906      	cbnz	r6, c3c0 <mpsl_init+0x20>
    c3be:	4e13      	ldr	r6, [pc, #76]	; (c40c <mpsl_init+0x6c>)
    c3c0:	6067      	str	r7, [r4, #4]
    c3c2:	7025      	strb	r5, [r4, #0]
    c3c4:	f7ff ffa6 	bl	c314 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    c3c8:	f7ff ffb4 	bl	c334 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    c3cc:	4630      	mov	r0, r6
    c3ce:	f7ff fe83 	bl	c0d8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    c3d2:	0006      	movs	r6, r0
    c3d4:	d1ee      	bne.n	c3b4 <mpsl_init+0x14>
    c3d6:	f7fe fe7d 	bl	b0d4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    c3da:	f7ff fedd 	bl	c198 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    c3de:	f003 ff98 	bl	10312 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    c3e2:	4628      	mov	r0, r5
    c3e4:	f004 f816 	bl	10414 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c3e8:	2001      	movs	r0, #1
    c3ea:	2d00      	cmp	r5, #0
    c3ec:	db09      	blt.n	c402 <mpsl_init+0x62>
    c3ee:	f005 011f 	and.w	r1, r5, #31
    c3f2:	fa00 f101 	lsl.w	r1, r0, r1
    c3f6:	096a      	lsrs	r2, r5, #5
    c3f8:	0092      	lsls	r2, r2, #2
    c3fa:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    c3fe:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    c402:	7060      	strb	r0, [r4, #1]
    c404:	4630      	mov	r0, r6
    c406:	e7d5      	b.n	c3b4 <mpsl_init+0x14>
    c408:	2000030c 	.word	0x2000030c
    c40c:	00010450 	.word	0x00010450

0000c410 <mpsl_is_initialized>:
    c410:	4801      	ldr	r0, [pc, #4]	; (c418 <mpsl_is_initialized+0x8>)
    c412:	7840      	ldrb	r0, [r0, #1]
    c414:	4770      	bx	lr
    c416:	0000      	.short	0x0000
    c418:	2000030c 	.word	0x2000030c

0000c41c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    c41c:	4807      	ldr	r0, [pc, #28]	; (c43c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    c41e:	f990 0000 	ldrsb.w	r0, [r0]
    c422:	2800      	cmp	r0, #0
    c424:	db09      	blt.n	c43a <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    c426:	f000 021f 	and.w	r2, r0, #31
    c42a:	2101      	movs	r1, #1
    c42c:	4091      	lsls	r1, r2
    c42e:	0940      	lsrs	r0, r0, #5
    c430:	0080      	lsls	r0, r0, #2
    c432:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c436:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c43a:	4770      	bx	lr
    c43c:	2000030c 	.word	0x2000030c

0000c440 <mpsl_temperature_get>:
    c440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c444:	2601      	movs	r6, #1
    c446:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c44a:	0331      	lsls	r1, r6, #12
    c44c:	f04f 0800 	mov.w	r8, #0
    c450:	4640      	mov	r0, r8
    c452:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    c456:	f3bf 8f4f 	dsb	sy
    c45a:	f3bf 8f6f 	isb	sy
    c45e:	4c16      	ldr	r4, [pc, #88]	; (c4b8 <mpsl_temperature_get+0x78>)
    c460:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    c464:	200c      	movs	r0, #12
    c466:	f004 f801 	bl	1046c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c46a:	4d14      	ldr	r5, [pc, #80]	; (c4bc <mpsl_temperature_get+0x7c>)
    c46c:	6828      	ldr	r0, [r5, #0]
    c46e:	43c0      	mvns	r0, r0
    c470:	f340 1700 	sbfx	r7, r0, #4, #1
    c474:	6828      	ldr	r0, [r5, #0]
    c476:	f040 0010 	orr.w	r0, r0, #16
    c47a:	6028      	str	r0, [r5, #0]
    c47c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    c480:	6026      	str	r6, [r4, #0]
    c482:	1c7f      	adds	r7, r7, #1
    c484:	e002      	b.n	c48c <mpsl_temperature_get+0x4c>
    c486:	bf00      	nop
    c488:	f004 f894 	bl	105b4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c48c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    c490:	2800      	cmp	r0, #0
    c492:	d0f9      	beq.n	c488 <mpsl_temperature_get+0x48>
    c494:	b91f      	cbnz	r7, c49e <mpsl_temperature_get+0x5e>
    c496:	6828      	ldr	r0, [r5, #0]
    c498:	f020 0010 	bic.w	r0, r0, #16
    c49c:	6028      	str	r0, [r5, #0]
    c49e:	4808      	ldr	r0, [pc, #32]	; (c4c0 <mpsl_temperature_get+0x80>)
    c4a0:	6805      	ldr	r5, [r0, #0]
    c4a2:	6066      	str	r6, [r4, #4]
    c4a4:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    c4a8:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    c4ac:	200c      	movs	r0, #12
    c4ae:	f003 ffdd 	bl	1046c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c4b2:	4628      	mov	r0, r5
    c4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c4b8:	4000c000 	.word	0x4000c000
    c4bc:	e000ed10 	.word	0xe000ed10
    c4c0:	4000c508 	.word	0x4000c508

0000c4c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    c4c4:	b510      	push	{r4, lr}
    c4c6:	4602      	mov	r2, r0
    c4c8:	2005      	movs	r0, #5
    c4ca:	490c      	ldr	r1, [pc, #48]	; (c4fc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    c4cc:	e004      	b.n	c4d8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    c4ce:	bf00      	nop
    c4d0:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    c4d4:	791b      	ldrb	r3, [r3, #4]
    c4d6:	b133      	cbz	r3, c4e6 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    c4d8:	1e40      	subs	r0, r0, #1
    c4da:	b2c0      	uxtb	r0, r0
    c4dc:	d2f8      	bcs.n	c4d0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    c4de:	2148      	movs	r1, #72	; 0x48
    c4e0:	2069      	movs	r0, #105	; 0x69
    c4e2:	f7ff ff39 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c4e6:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    c4ea:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    c4ee:	2200      	movs	r2, #0
    c4f0:	714a      	strb	r2, [r1, #5]
    c4f2:	718a      	strb	r2, [r1, #6]
    c4f4:	2201      	movs	r2, #1
    c4f6:	710a      	strb	r2, [r1, #4]
    c4f8:	bd10      	pop	{r4, pc}
    c4fa:	0000      	.short	0x0000
    c4fc:	20001404 	.word	0x20001404

0000c500 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    c500:	b510      	push	{r4, lr}
    c502:	2805      	cmp	r0, #5
    c504:	d301      	bcc.n	c50a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    c506:	2158      	movs	r1, #88	; 0x58
    c508:	e006      	b.n	c518 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    c50a:	490a      	ldr	r1, [pc, #40]	; (c534 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    c50c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    c510:	7901      	ldrb	r1, [r0, #4]
    c512:	2901      	cmp	r1, #1
    c514:	d003      	beq.n	c51e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    c516:	2159      	movs	r1, #89	; 0x59
    c518:	2069      	movs	r0, #105	; 0x69
    c51a:	f7ff ff1d 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c51e:	7941      	ldrb	r1, [r0, #5]
    c520:	7982      	ldrb	r2, [r0, #6]
    c522:	1c49      	adds	r1, r1, #1
    c524:	b2c9      	uxtb	r1, r1
    c526:	428a      	cmp	r2, r1
    c528:	d000      	beq.n	c52c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    c52a:	7141      	strb	r1, [r0, #5]
    c52c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c530:	f7ff bf74 	b.w	c41c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    c534:	20001404 	.word	0x20001404

0000c538 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    c538:	b510      	push	{r4, lr}
    c53a:	2805      	cmp	r0, #5
    c53c:	d303      	bcc.n	c546 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    c53e:	214f      	movs	r1, #79	; 0x4f
    c540:	2069      	movs	r0, #105	; 0x69
    c542:	f7ff ff09 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c546:	4a03      	ldr	r2, [pc, #12]	; (c554 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    c548:	2100      	movs	r1, #0
    c54a:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    c54e:	7101      	strb	r1, [r0, #4]
    c550:	bd10      	pop	{r4, pc}
    c552:	0000      	.short	0x0000
    c554:	20001404 	.word	0x20001404

0000c558 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    c558:	b570      	push	{r4, r5, r6, lr}
    c55a:	2505      	movs	r5, #5
    c55c:	4e0e      	ldr	r6, [pc, #56]	; (c598 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    c55e:	4c0f      	ldr	r4, [pc, #60]	; (c59c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    c560:	e016      	b.n	c590 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c562:	7821      	ldrb	r1, [r4, #0]
    c564:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    c568:	7902      	ldrb	r2, [r0, #4]
    c56a:	2a01      	cmp	r2, #1
    c56c:	d108      	bne.n	c580 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c56e:	7942      	ldrb	r2, [r0, #5]
    c570:	7983      	ldrb	r3, [r0, #6]
    c572:	429a      	cmp	r2, r3
    c574:	d004      	beq.n	c580 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c576:	7942      	ldrb	r2, [r0, #5]
    c578:	7182      	strb	r2, [r0, #6]
    c57a:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    c57e:	4780      	blx	r0
    c580:	7820      	ldrb	r0, [r4, #0]
    c582:	1c40      	adds	r0, r0, #1
    c584:	b2c0      	uxtb	r0, r0
    c586:	7020      	strb	r0, [r4, #0]
    c588:	2805      	cmp	r0, #5
    c58a:	d301      	bcc.n	c590 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c58c:	2000      	movs	r0, #0
    c58e:	7020      	strb	r0, [r4, #0]
    c590:	1e6d      	subs	r5, r5, #1
    c592:	b2ed      	uxtb	r5, r5
    c594:	d2e5      	bcs.n	c562 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    c596:	bd70      	pop	{r4, r5, r6, pc}
    c598:	20001404 	.word	0x20001404
    c59c:	2000036c 	.word	0x2000036c

0000c5a0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    c5a0:	b500      	push	{lr}
    c5a2:	f003 ff92 	bl	104ca <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c5a6:	b940      	cbnz	r0, c5ba <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c5a8:	f003 ff99 	bl	104de <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c5ac:	b928      	cbnz	r0, c5ba <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c5ae:	f003 ffad 	bl	1050c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c5b2:	b910      	cbnz	r0, c5ba <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c5b4:	f003 ffbe 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c5b8:	b108      	cbz	r0, c5be <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    c5ba:	4802      	ldr	r0, [pc, #8]	; (c5c4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    c5bc:	bd00      	pop	{pc}
    c5be:	4802      	ldr	r0, [pc, #8]	; (c5c8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    c5c0:	bd00      	pop	{pc}
    c5c2:	0000      	.short	0x0000
    c5c4:	4000050c 	.word	0x4000050c
    c5c8:	4001e700 	.word	0x4001e700
    c5cc:	b510      	push	{r4, lr}
    c5ce:	f003 ffb1 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c5d2:	b330      	cbz	r0, c622 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x82>
    c5d4:	f3ef 8010 	mrs	r0, PRIMASK
    c5d8:	b1c8      	cbz	r0, c60e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x6e>
    c5da:	2100      	movs	r1, #0
    c5dc:	b672      	cpsid	i
    c5de:	4812      	ldr	r0, [pc, #72]	; (c628 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x88>)
    c5e0:	6802      	ldr	r2, [r0, #0]
    c5e2:	6803      	ldr	r3, [r0, #0]
    c5e4:	f3c2 1200 	ubfx	r2, r2, #4, #1
    c5e8:	f043 0310 	orr.w	r3, r3, #16
    c5ec:	6003      	str	r3, [r0, #0]
    c5ee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c5f2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c5f6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    c5fa:	431c      	orrs	r4, r3
    c5fc:	d000      	beq.n	c600 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x60>
    c5fe:	bf40      	sev
    c600:	bf20      	wfe
    c602:	bf00      	nop
    c604:	bf00      	nop
    c606:	bf00      	nop
    c608:	bf00      	nop
    c60a:	b112      	cbz	r2, c612 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x72>
    c60c:	e005      	b.n	c61a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x7a>
    c60e:	2101      	movs	r1, #1
    c610:	e7e4      	b.n	c5dc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x3c>
    c612:	6802      	ldr	r2, [r0, #0]
    c614:	f022 0210 	bic.w	r2, r2, #16
    c618:	6002      	str	r2, [r0, #0]
    c61a:	2900      	cmp	r1, #0
    c61c:	d000      	beq.n	c620 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x80>
    c61e:	b662      	cpsie	i
    c620:	bd10      	pop	{r4, pc}
    c622:	bf20      	wfe
    c624:	bd10      	pop	{r4, pc}
    c626:	0000      	.short	0x0000
    c628:	e000ed10 	.word	0xe000ed10

0000c62c <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    c62c:	4901      	ldr	r1, [pc, #4]	; (c634 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    c62e:	2001      	movs	r0, #1
    c630:	7088      	strb	r0, [r1, #2]
    c632:	4770      	bx	lr
    c634:	20000314 	.word	0x20000314

0000c638 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    c638:	0001083b 00010873 0001085d 0001084b     ;...s...]...K...
    c648:	00010857 00010845 00010839 00010837     W...E...9...7...
    c658:	0001086f 00010863 00010851 0001083f     o...c...Q...?...
    c668:	00010831 00010829 0001082d 00010823     1...)...-...#...

0000c678 <mpsl_fem_disable>:
    c678:	4801      	ldr	r0, [pc, #4]	; (c680 <mpsl_fem_disable+0x8>)
    c67a:	6800      	ldr	r0, [r0, #0]
    c67c:	6800      	ldr	r0, [r0, #0]
    c67e:	4700      	bx	r0
    c680:	20000328 	.word	0x20000328

0000c684 <mpsl_fem_lna_configuration_clear>:
    c684:	4801      	ldr	r0, [pc, #4]	; (c68c <mpsl_fem_lna_configuration_clear+0x8>)
    c686:	6800      	ldr	r0, [r0, #0]
    c688:	6940      	ldr	r0, [r0, #20]
    c68a:	4700      	bx	r0
    c68c:	20000328 	.word	0x20000328

0000c690 <mpsl_fem_lna_configuration_set>:
    c690:	4a01      	ldr	r2, [pc, #4]	; (c698 <mpsl_fem_lna_configuration_set+0x8>)
    c692:	6812      	ldr	r2, [r2, #0]
    c694:	68d2      	ldr	r2, [r2, #12]
    c696:	4710      	bx	r2
    c698:	20000328 	.word	0x20000328

0000c69c <mpsl_fem_lna_is_configured>:
    c69c:	4901      	ldr	r1, [pc, #4]	; (c6a4 <mpsl_fem_lna_is_configured+0x8>)
    c69e:	6809      	ldr	r1, [r1, #0]
    c6a0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    c6a2:	4708      	bx	r1
    c6a4:	20000328 	.word	0x20000328

0000c6a8 <mpsl_fem_pa_configuration_clear>:
    c6a8:	4801      	ldr	r0, [pc, #4]	; (c6b0 <mpsl_fem_pa_configuration_clear+0x8>)
    c6aa:	6800      	ldr	r0, [r0, #0]
    c6ac:	6900      	ldr	r0, [r0, #16]
    c6ae:	4700      	bx	r0
    c6b0:	20000328 	.word	0x20000328

0000c6b4 <mpsl_fem_pa_configuration_set>:
    c6b4:	4a01      	ldr	r2, [pc, #4]	; (c6bc <mpsl_fem_pa_configuration_set+0x8>)
    c6b6:	6812      	ldr	r2, [r2, #0]
    c6b8:	6892      	ldr	r2, [r2, #8]
    c6ba:	4710      	bx	r2
    c6bc:	20000328 	.word	0x20000328

0000c6c0 <mpsl_fem_pa_gain_set>:
    c6c0:	4901      	ldr	r1, [pc, #4]	; (c6c8 <mpsl_fem_pa_gain_set+0x8>)
    c6c2:	6809      	ldr	r1, [r1, #0]
    c6c4:	6a49      	ldr	r1, [r1, #36]	; 0x24
    c6c6:	4708      	bx	r1
    c6c8:	20000328 	.word	0x20000328

0000c6cc <mpsl_fem_pa_is_configured>:
    c6cc:	4901      	ldr	r1, [pc, #4]	; (c6d4 <mpsl_fem_pa_is_configured+0x8>)
    c6ce:	6809      	ldr	r1, [r1, #0]
    c6d0:	6a89      	ldr	r1, [r1, #40]	; 0x28
    c6d2:	4708      	bx	r1
    c6d4:	20000328 	.word	0x20000328

0000c6d8 <mpsl_fem_tx_power_split>:
    c6d8:	b430      	push	{r4, r5}
    c6da:	4c03      	ldr	r4, [pc, #12]	; (c6e8 <mpsl_fem_tx_power_split+0x10>)
    c6dc:	6824      	ldr	r4, [r4, #0]
    c6de:	6864      	ldr	r4, [r4, #4]
    c6e0:	46a4      	mov	ip, r4
    c6e2:	bc30      	pop	{r4, r5}
    c6e4:	4760      	bx	ip
    c6e6:	0000      	.short	0x0000
    c6e8:	20000328 	.word	0x20000328

0000c6ec <mpsl_fem_device_config_254_apply_get>:
    c6ec:	4801      	ldr	r0, [pc, #4]	; (c6f4 <mpsl_fem_device_config_254_apply_get+0x8>)
    c6ee:	7800      	ldrb	r0, [r0, #0]
    c6f0:	4770      	bx	lr
    c6f2:	0000      	.short	0x0000
    c6f4:	2000036d 	.word	0x2000036d

0000c6f8 <__udivmoddi4>:
    c6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c6fc:	4686      	mov	lr, r0
    c6fe:	468c      	mov	ip, r1
    c700:	4608      	mov	r0, r1
    c702:	9e08      	ldr	r6, [sp, #32]
    c704:	4615      	mov	r5, r2
    c706:	4674      	mov	r4, lr
    c708:	4619      	mov	r1, r3
    c70a:	2b00      	cmp	r3, #0
    c70c:	f040 80c2 	bne.w	c894 <__udivmoddi4+0x19c>
    c710:	4285      	cmp	r5, r0
    c712:	fab2 f282 	clz	r2, r2
    c716:	d945      	bls.n	c7a4 <__udivmoddi4+0xac>
    c718:	b14a      	cbz	r2, c72e <__udivmoddi4+0x36>
    c71a:	f1c2 0320 	rsb	r3, r2, #32
    c71e:	fa00 fc02 	lsl.w	ip, r0, r2
    c722:	fa2e f303 	lsr.w	r3, lr, r3
    c726:	4095      	lsls	r5, r2
    c728:	ea43 0c0c 	orr.w	ip, r3, ip
    c72c:	4094      	lsls	r4, r2
    c72e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c732:	b2a8      	uxth	r0, r5
    c734:	fbbc f8fe 	udiv	r8, ip, lr
    c738:	0c23      	lsrs	r3, r4, #16
    c73a:	fb0e cc18 	mls	ip, lr, r8, ip
    c73e:	fb08 f900 	mul.w	r9, r8, r0
    c742:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    c746:	4599      	cmp	r9, r3
    c748:	d928      	bls.n	c79c <__udivmoddi4+0xa4>
    c74a:	18eb      	adds	r3, r5, r3
    c74c:	f108 37ff 	add.w	r7, r8, #4294967295
    c750:	d204      	bcs.n	c75c <__udivmoddi4+0x64>
    c752:	4599      	cmp	r9, r3
    c754:	d902      	bls.n	c75c <__udivmoddi4+0x64>
    c756:	f1a8 0702 	sub.w	r7, r8, #2
    c75a:	442b      	add	r3, r5
    c75c:	eba3 0309 	sub.w	r3, r3, r9
    c760:	b2a4      	uxth	r4, r4
    c762:	fbb3 fcfe 	udiv	ip, r3, lr
    c766:	fb0e 331c 	mls	r3, lr, ip, r3
    c76a:	fb0c f000 	mul.w	r0, ip, r0
    c76e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c772:	42a0      	cmp	r0, r4
    c774:	d914      	bls.n	c7a0 <__udivmoddi4+0xa8>
    c776:	192c      	adds	r4, r5, r4
    c778:	f10c 33ff 	add.w	r3, ip, #4294967295
    c77c:	d204      	bcs.n	c788 <__udivmoddi4+0x90>
    c77e:	42a0      	cmp	r0, r4
    c780:	d902      	bls.n	c788 <__udivmoddi4+0x90>
    c782:	f1ac 0302 	sub.w	r3, ip, #2
    c786:	442c      	add	r4, r5
    c788:	1a24      	subs	r4, r4, r0
    c78a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    c78e:	b11e      	cbz	r6, c798 <__udivmoddi4+0xa0>
    c790:	40d4      	lsrs	r4, r2
    c792:	2300      	movs	r3, #0
    c794:	6034      	str	r4, [r6, #0]
    c796:	6073      	str	r3, [r6, #4]
    c798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c79c:	4647      	mov	r7, r8
    c79e:	e7dd      	b.n	c75c <__udivmoddi4+0x64>
    c7a0:	4663      	mov	r3, ip
    c7a2:	e7f1      	b.n	c788 <__udivmoddi4+0x90>
    c7a4:	bb92      	cbnz	r2, c80c <__udivmoddi4+0x114>
    c7a6:	1b43      	subs	r3, r0, r5
    c7a8:	2101      	movs	r1, #1
    c7aa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c7ae:	b2af      	uxth	r7, r5
    c7b0:	fbb3 fcfe 	udiv	ip, r3, lr
    c7b4:	0c20      	lsrs	r0, r4, #16
    c7b6:	fb0e 331c 	mls	r3, lr, ip, r3
    c7ba:	fb0c f807 	mul.w	r8, ip, r7
    c7be:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    c7c2:	4598      	cmp	r8, r3
    c7c4:	d962      	bls.n	c88c <__udivmoddi4+0x194>
    c7c6:	18eb      	adds	r3, r5, r3
    c7c8:	f10c 30ff 	add.w	r0, ip, #4294967295
    c7cc:	d204      	bcs.n	c7d8 <__udivmoddi4+0xe0>
    c7ce:	4598      	cmp	r8, r3
    c7d0:	d902      	bls.n	c7d8 <__udivmoddi4+0xe0>
    c7d2:	f1ac 0002 	sub.w	r0, ip, #2
    c7d6:	442b      	add	r3, r5
    c7d8:	eba3 0308 	sub.w	r3, r3, r8
    c7dc:	b2a4      	uxth	r4, r4
    c7de:	fbb3 fcfe 	udiv	ip, r3, lr
    c7e2:	fb0e 331c 	mls	r3, lr, ip, r3
    c7e6:	fb0c f707 	mul.w	r7, ip, r7
    c7ea:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c7ee:	42a7      	cmp	r7, r4
    c7f0:	d94e      	bls.n	c890 <__udivmoddi4+0x198>
    c7f2:	192c      	adds	r4, r5, r4
    c7f4:	f10c 33ff 	add.w	r3, ip, #4294967295
    c7f8:	d204      	bcs.n	c804 <__udivmoddi4+0x10c>
    c7fa:	42a7      	cmp	r7, r4
    c7fc:	d902      	bls.n	c804 <__udivmoddi4+0x10c>
    c7fe:	f1ac 0302 	sub.w	r3, ip, #2
    c802:	442c      	add	r4, r5
    c804:	1be4      	subs	r4, r4, r7
    c806:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c80a:	e7c0      	b.n	c78e <__udivmoddi4+0x96>
    c80c:	f1c2 0320 	rsb	r3, r2, #32
    c810:	fa20 f103 	lsr.w	r1, r0, r3
    c814:	4095      	lsls	r5, r2
    c816:	4090      	lsls	r0, r2
    c818:	fa2e f303 	lsr.w	r3, lr, r3
    c81c:	4303      	orrs	r3, r0
    c81e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c822:	b2af      	uxth	r7, r5
    c824:	fbb1 fcfe 	udiv	ip, r1, lr
    c828:	fb0e 101c 	mls	r0, lr, ip, r1
    c82c:	0c19      	lsrs	r1, r3, #16
    c82e:	fb0c f807 	mul.w	r8, ip, r7
    c832:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c836:	4588      	cmp	r8, r1
    c838:	fa04 f402 	lsl.w	r4, r4, r2
    c83c:	d922      	bls.n	c884 <__udivmoddi4+0x18c>
    c83e:	1869      	adds	r1, r5, r1
    c840:	f10c 30ff 	add.w	r0, ip, #4294967295
    c844:	d204      	bcs.n	c850 <__udivmoddi4+0x158>
    c846:	4588      	cmp	r8, r1
    c848:	d902      	bls.n	c850 <__udivmoddi4+0x158>
    c84a:	f1ac 0002 	sub.w	r0, ip, #2
    c84e:	4429      	add	r1, r5
    c850:	eba1 0108 	sub.w	r1, r1, r8
    c854:	b29b      	uxth	r3, r3
    c856:	fbb1 fcfe 	udiv	ip, r1, lr
    c85a:	fb0e 111c 	mls	r1, lr, ip, r1
    c85e:	fb0c f707 	mul.w	r7, ip, r7
    c862:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c866:	429f      	cmp	r7, r3
    c868:	d90e      	bls.n	c888 <__udivmoddi4+0x190>
    c86a:	18eb      	adds	r3, r5, r3
    c86c:	f10c 31ff 	add.w	r1, ip, #4294967295
    c870:	d204      	bcs.n	c87c <__udivmoddi4+0x184>
    c872:	429f      	cmp	r7, r3
    c874:	d902      	bls.n	c87c <__udivmoddi4+0x184>
    c876:	f1ac 0102 	sub.w	r1, ip, #2
    c87a:	442b      	add	r3, r5
    c87c:	1bdb      	subs	r3, r3, r7
    c87e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c882:	e792      	b.n	c7aa <__udivmoddi4+0xb2>
    c884:	4660      	mov	r0, ip
    c886:	e7e3      	b.n	c850 <__udivmoddi4+0x158>
    c888:	4661      	mov	r1, ip
    c88a:	e7f7      	b.n	c87c <__udivmoddi4+0x184>
    c88c:	4660      	mov	r0, ip
    c88e:	e7a3      	b.n	c7d8 <__udivmoddi4+0xe0>
    c890:	4663      	mov	r3, ip
    c892:	e7b7      	b.n	c804 <__udivmoddi4+0x10c>
    c894:	4283      	cmp	r3, r0
    c896:	d906      	bls.n	c8a6 <__udivmoddi4+0x1ae>
    c898:	b916      	cbnz	r6, c8a0 <__udivmoddi4+0x1a8>
    c89a:	2100      	movs	r1, #0
    c89c:	4608      	mov	r0, r1
    c89e:	e77b      	b.n	c798 <__udivmoddi4+0xa0>
    c8a0:	e9c6 e000 	strd	lr, r0, [r6]
    c8a4:	e7f9      	b.n	c89a <__udivmoddi4+0x1a2>
    c8a6:	fab3 f783 	clz	r7, r3
    c8aa:	b98f      	cbnz	r7, c8d0 <__udivmoddi4+0x1d8>
    c8ac:	4283      	cmp	r3, r0
    c8ae:	d301      	bcc.n	c8b4 <__udivmoddi4+0x1bc>
    c8b0:	4572      	cmp	r2, lr
    c8b2:	d808      	bhi.n	c8c6 <__udivmoddi4+0x1ce>
    c8b4:	ebbe 0402 	subs.w	r4, lr, r2
    c8b8:	eb60 0303 	sbc.w	r3, r0, r3
    c8bc:	2001      	movs	r0, #1
    c8be:	469c      	mov	ip, r3
    c8c0:	b91e      	cbnz	r6, c8ca <__udivmoddi4+0x1d2>
    c8c2:	2100      	movs	r1, #0
    c8c4:	e768      	b.n	c798 <__udivmoddi4+0xa0>
    c8c6:	4638      	mov	r0, r7
    c8c8:	e7fa      	b.n	c8c0 <__udivmoddi4+0x1c8>
    c8ca:	e9c6 4c00 	strd	r4, ip, [r6]
    c8ce:	e7f8      	b.n	c8c2 <__udivmoddi4+0x1ca>
    c8d0:	f1c7 0c20 	rsb	ip, r7, #32
    c8d4:	40bb      	lsls	r3, r7
    c8d6:	fa22 f40c 	lsr.w	r4, r2, ip
    c8da:	431c      	orrs	r4, r3
    c8dc:	fa2e f10c 	lsr.w	r1, lr, ip
    c8e0:	fa20 f30c 	lsr.w	r3, r0, ip
    c8e4:	40b8      	lsls	r0, r7
    c8e6:	4301      	orrs	r1, r0
    c8e8:	ea4f 4914 	mov.w	r9, r4, lsr #16
    c8ec:	fa0e f507 	lsl.w	r5, lr, r7
    c8f0:	fbb3 f8f9 	udiv	r8, r3, r9
    c8f4:	fa1f fe84 	uxth.w	lr, r4
    c8f8:	fb09 3018 	mls	r0, r9, r8, r3
    c8fc:	0c0b      	lsrs	r3, r1, #16
    c8fe:	fb08 fa0e 	mul.w	sl, r8, lr
    c902:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    c906:	459a      	cmp	sl, r3
    c908:	fa02 f207 	lsl.w	r2, r2, r7
    c90c:	d940      	bls.n	c990 <__udivmoddi4+0x298>
    c90e:	18e3      	adds	r3, r4, r3
    c910:	f108 30ff 	add.w	r0, r8, #4294967295
    c914:	d204      	bcs.n	c920 <__udivmoddi4+0x228>
    c916:	459a      	cmp	sl, r3
    c918:	d902      	bls.n	c920 <__udivmoddi4+0x228>
    c91a:	f1a8 0002 	sub.w	r0, r8, #2
    c91e:	4423      	add	r3, r4
    c920:	eba3 030a 	sub.w	r3, r3, sl
    c924:	b289      	uxth	r1, r1
    c926:	fbb3 f8f9 	udiv	r8, r3, r9
    c92a:	fb09 3318 	mls	r3, r9, r8, r3
    c92e:	fb08 fe0e 	mul.w	lr, r8, lr
    c932:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c936:	458e      	cmp	lr, r1
    c938:	d92c      	bls.n	c994 <__udivmoddi4+0x29c>
    c93a:	1861      	adds	r1, r4, r1
    c93c:	f108 33ff 	add.w	r3, r8, #4294967295
    c940:	d204      	bcs.n	c94c <__udivmoddi4+0x254>
    c942:	458e      	cmp	lr, r1
    c944:	d902      	bls.n	c94c <__udivmoddi4+0x254>
    c946:	f1a8 0302 	sub.w	r3, r8, #2
    c94a:	4421      	add	r1, r4
    c94c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c950:	fba0 9802 	umull	r9, r8, r0, r2
    c954:	eba1 010e 	sub.w	r1, r1, lr
    c958:	4541      	cmp	r1, r8
    c95a:	46ce      	mov	lr, r9
    c95c:	4643      	mov	r3, r8
    c95e:	d302      	bcc.n	c966 <__udivmoddi4+0x26e>
    c960:	d106      	bne.n	c970 <__udivmoddi4+0x278>
    c962:	454d      	cmp	r5, r9
    c964:	d204      	bcs.n	c970 <__udivmoddi4+0x278>
    c966:	ebb9 0e02 	subs.w	lr, r9, r2
    c96a:	eb68 0304 	sbc.w	r3, r8, r4
    c96e:	3801      	subs	r0, #1
    c970:	2e00      	cmp	r6, #0
    c972:	d0a6      	beq.n	c8c2 <__udivmoddi4+0x1ca>
    c974:	ebb5 020e 	subs.w	r2, r5, lr
    c978:	eb61 0103 	sbc.w	r1, r1, r3
    c97c:	fa01 fc0c 	lsl.w	ip, r1, ip
    c980:	fa22 f307 	lsr.w	r3, r2, r7
    c984:	ea4c 0303 	orr.w	r3, ip, r3
    c988:	40f9      	lsrs	r1, r7
    c98a:	e9c6 3100 	strd	r3, r1, [r6]
    c98e:	e798      	b.n	c8c2 <__udivmoddi4+0x1ca>
    c990:	4640      	mov	r0, r8
    c992:	e7c5      	b.n	c920 <__udivmoddi4+0x228>
    c994:	4643      	mov	r3, r8
    c996:	e7d9      	b.n	c94c <__udivmoddi4+0x254>

0000c998 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    c998:	b50e      	push	{r1, r2, r3, lr}
    c99a:	4601      	mov	r1, r0
    c99c:	4668      	mov	r0, sp
    c99e:	f000 f804 	bl	c9aa <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    c9a2:	4668      	mov	r0, sp
    c9a4:	f001 fba4 	bl	e0f0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    c9a8:	bd0e      	pop	{r1, r2, r3, pc}

0000c9aa <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    c9aa:	880a      	ldrh	r2, [r1, #0]
    c9ac:	f3c2 020b 	ubfx	r2, r2, #0, #12
    c9b0:	8082      	strh	r2, [r0, #4]
    c9b2:	884a      	ldrh	r2, [r1, #2]
    c9b4:	80c2      	strh	r2, [r0, #6]
    c9b6:	784a      	ldrb	r2, [r1, #1]
    c9b8:	0993      	lsrs	r3, r2, #6
    c9ba:	2200      	movs	r2, #0
    c9bc:	7242      	strb	r2, [r0, #9]
    c9be:	784b      	ldrb	r3, [r1, #1]
    c9c0:	f3c3 1301 	ubfx	r3, r3, #4, #2
    c9c4:	b11b      	cbz	r3, c9ce <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c9c6:	2b01      	cmp	r3, #1
    c9c8:	d005      	beq.n	c9d6 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    c9ca:	2b02      	cmp	r3, #2
    c9cc:	d005      	beq.n	c9da <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    c9ce:	7202      	strb	r2, [r0, #8]
    c9d0:	1d09      	adds	r1, r1, #4
    c9d2:	6001      	str	r1, [r0, #0]
    c9d4:	4770      	bx	lr
    c9d6:	2201      	movs	r2, #1
    c9d8:	e7f9      	b.n	c9ce <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c9da:	2202      	movs	r2, #2
    c9dc:	e7f7      	b.n	c9ce <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000c9de <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    c9de:	b510      	push	{r4, lr}
    c9e0:	460c      	mov	r4, r1
    c9e2:	7909      	ldrb	r1, [r1, #4]
    c9e4:	7001      	strb	r1, [r0, #0]
    c9e6:	7841      	ldrb	r1, [r0, #1]
    c9e8:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    c9ec:	7041      	strb	r1, [r0, #1]
    c9ee:	88a2      	ldrh	r2, [r4, #4]
    c9f0:	f3c2 2203 	ubfx	r2, r2, #8, #4
    c9f4:	4311      	orrs	r1, r2
    c9f6:	7041      	strb	r1, [r0, #1]
    c9f8:	79a2      	ldrb	r2, [r4, #6]
    c9fa:	7082      	strb	r2, [r0, #2]
    c9fc:	88e2      	ldrh	r2, [r4, #6]
    c9fe:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    ca02:	0a12      	lsrs	r2, r2, #8
    ca04:	70c2      	strb	r2, [r0, #3]
    ca06:	7041      	strb	r1, [r0, #1]
    ca08:	7a22      	ldrb	r2, [r4, #8]
    ca0a:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    ca0e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    ca12:	7041      	strb	r1, [r0, #1]
    ca14:	7a62      	ldrb	r2, [r4, #9]
    ca16:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    ca1a:	7041      	strb	r1, [r0, #1]
    ca1c:	6821      	ldr	r1, [r4, #0]
    ca1e:	1d02      	adds	r2, r0, #4
    ca20:	4291      	cmp	r1, r2
    ca22:	d006      	beq.n	ca32 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    ca24:	88e2      	ldrh	r2, [r4, #6]
    ca26:	2afb      	cmp	r2, #251	; 0xfb
    ca28:	d300      	bcc.n	ca2c <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    ca2a:	22fb      	movs	r2, #251	; 0xfb
    ca2c:	1d00      	adds	r0, r0, #4
    ca2e:	f003 fe1e 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ca32:	79a0      	ldrb	r0, [r4, #6]
    ca34:	1d00      	adds	r0, r0, #4
    ca36:	b2c0      	uxtb	r0, r0
    ca38:	bd10      	pop	{r4, pc}

0000ca3a <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>:
    ca3a:	b430      	push	{r4, r5}
    ca3c:	790a      	ldrb	r2, [r1, #4]
    ca3e:	7002      	strb	r2, [r0, #0]
    ca40:	7842      	ldrb	r2, [r0, #1]
    ca42:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    ca46:	7042      	strb	r2, [r0, #1]
    ca48:	888b      	ldrh	r3, [r1, #4]
    ca4a:	f3c3 2303 	ubfx	r3, r3, #8, #4
    ca4e:	431a      	orrs	r2, r3
    ca50:	7042      	strb	r2, [r0, #1]
    ca52:	798b      	ldrb	r3, [r1, #6]
    ca54:	7083      	strb	r3, [r0, #2]
    ca56:	78c3      	ldrb	r3, [r0, #3]
    ca58:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
    ca5c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ca60:	70c3      	strb	r3, [r0, #3]
    ca62:	88cc      	ldrh	r4, [r1, #6]
    ca64:	f3c4 2405 	ubfx	r4, r4, #8, #6
    ca68:	4323      	orrs	r3, r4
    ca6a:	70c3      	strb	r3, [r0, #3]
    ca6c:	7042      	strb	r2, [r0, #1]
    ca6e:	7a0c      	ldrb	r4, [r1, #8]
    ca70:	f004 0403 	and.w	r4, r4, #3
    ca74:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    ca78:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    ca7c:	7042      	strb	r2, [r0, #1]
    ca7e:	7a4c      	ldrb	r4, [r1, #9]
    ca80:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
    ca84:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    ca88:	7042      	strb	r2, [r0, #1]
    ca8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    ca8e:	70c2      	strb	r2, [r0, #3]
    ca90:	680b      	ldr	r3, [r1, #0]
    ca92:	1d02      	adds	r2, r0, #4
    ca94:	4293      	cmp	r3, r2
    ca96:	d005      	beq.n	caa4 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY+0x6a>
    ca98:	88ca      	ldrh	r2, [r1, #6]
    ca9a:	bc30      	pop	{r4, r5}
    ca9c:	4619      	mov	r1, r3
    ca9e:	1d00      	adds	r0, r0, #4
    caa0:	f003 bde5 	b.w	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    caa4:	bc30      	pop	{r4, r5}
    caa6:	4770      	bx	lr

0000caa8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    caa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    caac:	4604      	mov	r4, r0
    caae:	f891 c000 	ldrb.w	ip, [r1]
    cab2:	460d      	mov	r5, r1
    cab4:	2000      	movs	r0, #0
    cab6:	270c      	movs	r7, #12
    cab8:	263e      	movs	r6, #62	; 0x3e
    caba:	2312      	movs	r3, #18
    cabc:	22ff      	movs	r2, #255	; 0xff
    cabe:	f04f 0b10 	mov.w	fp, #16
    cac2:	f04f 0905 	mov.w	r9, #5
    cac6:	f104 010d 	add.w	r1, r4, #13
    caca:	f04f 0e14 	mov.w	lr, #20
    cace:	f04f 0a11 	mov.w	sl, #17
    cad2:	f1bc 0f23 	cmp.w	ip, #35	; 0x23
    cad6:	d271      	bcs.n	cbbc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    cad8:	e8df f00c 	tbb	[pc, ip]
    cadc:	2c291270 	.word	0x2c291270
    cae0:	8c70f431 	.word	0x8c70f431
    cae4:	d5c1a796 	.word	0xd5c1a796
    cae8:	f1f2f5d8 	.word	0xf1f2f5d8
    caec:	537070f0 	.word	0x537070f0
    caf0:	eeef7170 	.word	0xeeef7170
    caf4:	eaebeced 	.word	0xeaebeced
    caf8:	e6e7e8e9 	.word	0xe6e7e8e9
    cafc:	00e470e5 	.word	0x00e470e5
    cb00:	7027      	strb	r7, [r4, #0]
    cb02:	7928      	ldrb	r0, [r5, #4]
    cb04:	70a0      	strb	r0, [r4, #2]
    cb06:	7968      	ldrb	r0, [r5, #5]
    cb08:	70e0      	strb	r0, [r4, #3]
    cb0a:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cb0e:	0a00      	lsrs	r0, r0, #8
    cb10:	7120      	strb	r0, [r4, #4]
    cb12:	79e8      	ldrb	r0, [r5, #7]
    cb14:	7160      	strb	r0, [r4, #5]
    cb16:	7a28      	ldrb	r0, [r5, #8]
    cb18:	71a0      	strb	r0, [r4, #6]
    cb1a:	8928      	ldrh	r0, [r5, #8]
    cb1c:	0a00      	lsrs	r0, r0, #8
    cb1e:	71e0      	strb	r0, [r4, #7]
    cb20:	7aa8      	ldrb	r0, [r5, #10]
    cb22:	7220      	strb	r0, [r4, #8]
    cb24:	8968      	ldrh	r0, [r5, #10]
    cb26:	0a00      	lsrs	r0, r0, #8
    cb28:	7260      	strb	r0, [r4, #9]
    cb2a:	2008      	movs	r0, #8
    cb2c:	e137      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cb2e:	f884 b000 	strb.w	fp, [r4]
    cb32:	e001      	b.n	cb38 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x90>
    cb34:	201a      	movs	r0, #26
    cb36:	7020      	strb	r0, [r4, #0]
    cb38:	7928      	ldrb	r0, [r5, #4]
    cb3a:	70a0      	strb	r0, [r4, #2]
    cb3c:	e136      	b.n	cdac <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
    cb3e:	7026      	strb	r6, [r4, #0]
    cb40:	2002      	movs	r0, #2
    cb42:	70a0      	strb	r0, [r4, #2]
    cb44:	f815 0f04 	ldrb.w	r0, [r5, #4]!
    cb48:	70e0      	strb	r0, [r4, #3]
    cb4a:	7aa8      	ldrb	r0, [r5, #10]
    cb4c:	7120      	strb	r0, [r4, #4]
    cb4e:	7868      	ldrb	r0, [r5, #1]
    cb50:	7160      	strb	r0, [r4, #5]
    cb52:	f8d5 0002 	ldr.w	r0, [r5, #2]
    cb56:	f8c4 0006 	str.w	r0, [r4, #6]
    cb5a:	88e8      	ldrh	r0, [r5, #6]
    cb5c:	8160      	strh	r0, [r4, #10]
    cb5e:	7a28      	ldrb	r0, [r5, #8]
    cb60:	7320      	strb	r0, [r4, #12]
    cb62:	7a2e      	ldrb	r6, [r5, #8]
    cb64:	2e1f      	cmp	r6, #31
    cb66:	d300      	bcc.n	cb6a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xc2>
    cb68:	261f      	movs	r6, #31
    cb6a:	4608      	mov	r0, r1
    cb6c:	4632      	mov	r2, r6
    cb6e:	f105 010b 	add.w	r1, r5, #11
    cb72:	f003 fd7c 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cb76:	360d      	adds	r6, #13
    cb78:	7a69      	ldrb	r1, [r5, #9]
    cb7a:	55a1      	strb	r1, [r4, r6]
    cb7c:	1e76      	subs	r6, r6, #1
    cb7e:	b2f0      	uxtb	r0, r6
    cb80:	e10b      	b.n	cd9a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f2>
    cb82:	7026      	strb	r6, [r4, #0]
    cb84:	200b      	movs	r0, #11
    cb86:	70a0      	strb	r0, [r4, #2]
    cb88:	7928      	ldrb	r0, [r5, #4]
    cb8a:	70e0      	strb	r0, [r4, #3]
    cb8c:	7968      	ldrb	r0, [r5, #5]
    cb8e:	7120      	strb	r0, [r4, #4]
    cb90:	79a8      	ldrb	r0, [r5, #6]
    cb92:	7160      	strb	r0, [r4, #5]
    cb94:	f8d5 0007 	ldr.w	r0, [r5, #7]
    cb98:	f8c4 0006 	str.w	r0, [r4, #6]
    cb9c:	f8b5 000b 	ldrh.w	r0, [r5, #11]
    cba0:	8160      	strh	r0, [r4, #10]
    cba2:	7b68      	ldrb	r0, [r5, #13]
    cba4:	7320      	strb	r0, [r4, #12]
    cba6:	f8d5 000e 	ldr.w	r0, [r5, #14]
    cbaa:	f8c4 000d 	str.w	r0, [r4, #13]
    cbae:	8a68      	ldrh	r0, [r5, #18]
    cbb0:	f8a4 0011 	strh.w	r0, [r4, #17]
    cbb4:	7d28      	ldrb	r0, [r5, #20]
    cbb6:	74e0      	strb	r0, [r4, #19]
    cbb8:	4618      	mov	r0, r3
    cbba:	e0f0      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cbbc:	e0f1      	b.n	cda2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fa>
    cbbe:	2029      	movs	r0, #41	; 0x29
    cbc0:	f7f4 f8c6 	bl	d50 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cbc4:	b148      	cbz	r0, cbda <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x132>
    cbc6:	7026      	strb	r6, [r4, #0]
    cbc8:	2029      	movs	r0, #41	; 0x29
    cbca:	70a0      	strb	r0, [r4, #2]
    cbcc:	2221      	movs	r2, #33	; 0x21
    cbce:	1d29      	adds	r1, r5, #4
    cbd0:	1ce0      	adds	r0, r4, #3
    cbd2:	f003 fd4c 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cbd6:	2022      	movs	r0, #34	; 0x22
    cbd8:	e0e1      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cbda:	200a      	movs	r0, #10
    cbdc:	f7f4 f8b8 	bl	d50 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cbe0:	2800      	cmp	r0, #0
    cbe2:	4629      	mov	r1, r5
    cbe4:	4620      	mov	r0, r4
    cbe6:	d002      	beq.n	cbee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x146>
    cbe8:	f000 f9a0 	bl	cf2c <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0x52>
    cbec:	e0d5      	b.n	cd9a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f2>
    cbee:	f000 f974 	bl	ceda <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>
    cbf2:	e0d2      	b.n	cd9a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f2>
    cbf4:	7026      	strb	r6, [r4, #0]
    cbf6:	f884 e002 	strb.w	lr, [r4, #2]
    cbfa:	7928      	ldrb	r0, [r5, #4]
    cbfc:	70e0      	strb	r0, [r4, #3]
    cbfe:	88a8      	ldrh	r0, [r5, #4]
    cc00:	0a00      	lsrs	r0, r0, #8
    cc02:	7120      	strb	r0, [r4, #4]
    cc04:	79a8      	ldrb	r0, [r5, #6]
    cc06:	e104      	b.n	ce12 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    cc08:	223e      	movs	r2, #62	; 0x3e
    cc0a:	7022      	strb	r2, [r4, #0]
    cc0c:	2204      	movs	r2, #4
    cc0e:	70a2      	strb	r2, [r4, #2]
    cc10:	6868      	ldr	r0, [r5, #4]
    cc12:	f8c4 0003 	str.w	r0, [r4, #3]
    cc16:	68a8      	ldr	r0, [r5, #8]
    cc18:	f8c4 0007 	str.w	r0, [r4, #7]
    cc1c:	89a8      	ldrh	r0, [r5, #12]
    cc1e:	f8a4 000b 	strh.w	r0, [r4, #11]
    cc22:	7ba8      	ldrb	r0, [r5, #14]
    cc24:	7360      	strb	r0, [r4, #13]
    cc26:	200c      	movs	r0, #12
    cc28:	e0b9      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cc2a:	7026      	strb	r6, [r4, #0]
    cc2c:	2003      	movs	r0, #3
    cc2e:	70a0      	strb	r0, [r4, #2]
    cc30:	7928      	ldrb	r0, [r5, #4]
    cc32:	70e0      	strb	r0, [r4, #3]
    cc34:	79a8      	ldrb	r0, [r5, #6]
    cc36:	7120      	strb	r0, [r4, #4]
    cc38:	88e8      	ldrh	r0, [r5, #6]
    cc3a:	0a00      	lsrs	r0, r0, #8
    cc3c:	7160      	strb	r0, [r4, #5]
    cc3e:	7a28      	ldrb	r0, [r5, #8]
    cc40:	71a0      	strb	r0, [r4, #6]
    cc42:	8928      	ldrh	r0, [r5, #8]
    cc44:	0a00      	lsrs	r0, r0, #8
    cc46:	71e0      	strb	r0, [r4, #7]
    cc48:	7aa8      	ldrb	r0, [r5, #10]
    cc4a:	7220      	strb	r0, [r4, #8]
    cc4c:	8968      	ldrh	r0, [r5, #10]
    cc4e:	0a00      	lsrs	r0, r0, #8
    cc50:	7260      	strb	r0, [r4, #9]
    cc52:	7b28      	ldrb	r0, [r5, #12]
    cc54:	72a0      	strb	r0, [r4, #10]
    cc56:	89a8      	ldrh	r0, [r5, #12]
    cc58:	0a00      	lsrs	r0, r0, #8
    cc5a:	72e0      	strb	r0, [r4, #11]
    cc5c:	e116      	b.n	ce8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e4>
    cc5e:	7026      	strb	r6, [r4, #0]
    cc60:	f884 9002 	strb.w	r9, [r4, #2]
    cc64:	7928      	ldrb	r0, [r5, #4]
    cc66:	70e0      	strb	r0, [r4, #3]
    cc68:	88a8      	ldrh	r0, [r5, #4]
    cc6a:	0a00      	lsrs	r0, r0, #8
    cc6c:	7120      	strb	r0, [r4, #4]
    cc6e:	f8d5 0006 	ldr.w	r0, [r5, #6]
    cc72:	f8c4 0005 	str.w	r0, [r4, #5]
    cc76:	f8d5 000a 	ldr.w	r0, [r5, #10]
    cc7a:	f8c4 0009 	str.w	r0, [r4, #9]
    cc7e:	89e8      	ldrh	r0, [r5, #14]
    cc80:	f8a4 000d 	strh.w	r0, [r4, #13]
    cc84:	e127      	b.n	ced6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x42e>
    cc86:	f884 a000 	strb.w	sl, [r4]
    cc8a:	e049      	b.n	cd20 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x278>
    cc8c:	f884 9000 	strb.w	r9, [r4]
    cc90:	7928      	ldrb	r0, [r5, #4]
    cc92:	70a0      	strb	r0, [r4, #2]
    cc94:	7968      	ldrb	r0, [r5, #5]
    cc96:	70e0      	strb	r0, [r4, #3]
    cc98:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cc9c:	0a00      	lsrs	r0, r0, #8
    cc9e:	7120      	strb	r0, [r4, #4]
    cca0:	79e8      	ldrb	r0, [r5, #7]
    cca2:	e0b6      	b.n	ce12 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    cca4:	e102      	b.n	ceac <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x404>
    cca6:	e0d5      	b.n	ce54 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ac>
    cca8:	e0b6      	b.n	ce18 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x370>
    ccaa:	e0e1      	b.n	ce70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3c8>
    ccac:	e0f0      	b.n	ce90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e8>
    ccae:	e0a8      	b.n	ce02 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
    ccb0:	e090      	b.n	cdd4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32c>
    ccb2:	e08c      	b.n	cdce <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    ccb4:	e077      	b.n	cda6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fe>
    ccb6:	e07b      	b.n	cdb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x308>
    ccb8:	e01e      	b.n	ccf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    ccba:	e01a      	b.n	ccf2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24a>
    ccbc:	e02e      	b.n	cd1c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x274>
    ccbe:	e028      	b.n	cd12 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x26a>
    ccc0:	e00c      	b.n	ccdc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    ccc2:	e000      	b.n	ccc6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x21e>
    ccc4:	e033      	b.n	cd2e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x286>
    ccc6:	2008      	movs	r0, #8
    ccc8:	7020      	strb	r0, [r4, #0]
    ccca:	7928      	ldrb	r0, [r5, #4]
    cccc:	70a0      	strb	r0, [r4, #2]
    ccce:	79a8      	ldrb	r0, [r5, #6]
    ccd0:	70e0      	strb	r0, [r4, #3]
    ccd2:	88e8      	ldrh	r0, [r5, #6]
    ccd4:	0a00      	lsrs	r0, r0, #8
    ccd6:	7120      	strb	r0, [r4, #4]
    ccd8:	7a28      	ldrb	r0, [r5, #8]
    ccda:	e09a      	b.n	ce12 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    ccdc:	2030      	movs	r0, #48	; 0x30
    ccde:	7020      	strb	r0, [r4, #0]
    cce0:	7928      	ldrb	r0, [r5, #4]
    cce2:	70a0      	strb	r0, [r4, #2]
    cce4:	79a8      	ldrb	r0, [r5, #6]
    cce6:	70e0      	strb	r0, [r4, #3]
    cce8:	88e8      	ldrh	r0, [r5, #6]
    ccea:	0a00      	lsrs	r0, r0, #8
    ccec:	7120      	strb	r0, [r4, #4]
    ccee:	2003      	movs	r0, #3
    ccf0:	e055      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ccf2:	7026      	strb	r6, [r4, #0]
    ccf4:	2007      	movs	r0, #7
    ccf6:	e091      	b.n	ce1c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    ccf8:	7026      	strb	r6, [r4, #0]
    ccfa:	70a7      	strb	r7, [r4, #2]
    ccfc:	7928      	ldrb	r0, [r5, #4]
    ccfe:	70e0      	strb	r0, [r4, #3]
    cd00:	79a8      	ldrb	r0, [r5, #6]
    cd02:	7120      	strb	r0, [r4, #4]
    cd04:	88e8      	ldrh	r0, [r5, #6]
    cd06:	0a00      	lsrs	r0, r0, #8
    cd08:	7160      	strb	r0, [r4, #5]
    cd0a:	7a28      	ldrb	r0, [r5, #8]
    cd0c:	71a0      	strb	r0, [r4, #6]
    cd0e:	7a68      	ldrb	r0, [r5, #9]
    cd10:	e05a      	b.n	cdc8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x320>
    cd12:	1d29      	adds	r1, r5, #4
    cd14:	4620      	mov	r0, r4
    cd16:	f7f3 ffdb 	bl	cd0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x94>
    cd1a:	e03e      	b.n	cd9a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f2>
    cd1c:	2057      	movs	r0, #87	; 0x57
    cd1e:	7020      	strb	r0, [r4, #0]
    cd20:	7928      	ldrb	r0, [r5, #4]
    cd22:	70a0      	strb	r0, [r4, #2]
    cd24:	88a8      	ldrh	r0, [r5, #4]
    cd26:	0a00      	lsrs	r0, r0, #8
    cd28:	70e0      	strb	r0, [r4, #3]
    cd2a:	2002      	movs	r0, #2
    cd2c:	e037      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cd2e:	7026      	strb	r6, [r4, #0]
    cd30:	220d      	movs	r2, #13
    cd32:	70a2      	strb	r2, [r4, #2]
    cd34:	792a      	ldrb	r2, [r5, #4]
    cd36:	70e2      	strb	r2, [r4, #3]
    cd38:	89ea      	ldrh	r2, [r5, #14]
    cd3a:	80a2      	strh	r2, [r4, #4]
    cd3c:	796a      	ldrb	r2, [r5, #5]
    cd3e:	71a2      	strb	r2, [r4, #6]
    cd40:	f8d5 2006 	ldr.w	r2, [r5, #6]
    cd44:	f8c4 2007 	str.w	r2, [r4, #7]
    cd48:	896a      	ldrh	r2, [r5, #10]
    cd4a:	f8a4 200b 	strh.w	r2, [r4, #11]
    cd4e:	7c2a      	ldrb	r2, [r5, #16]
    cd50:	4620      	mov	r0, r4
    cd52:	7362      	strb	r2, [r4, #13]
    cd54:	1d29      	adds	r1, r5, #4
    cd56:	7c6a      	ldrb	r2, [r5, #17]
    cd58:	7382      	strb	r2, [r0, #14]
    cd5a:	7b8a      	ldrb	r2, [r1, #14]
    cd5c:	73c2      	strb	r2, [r0, #15]
    cd5e:	7e8a      	ldrb	r2, [r1, #26]
    cd60:	7402      	strb	r2, [r0, #16]
    cd62:	7a4a      	ldrb	r2, [r1, #9]
    cd64:	7442      	strb	r2, [r0, #17]
    cd66:	f8b1 2011 	ldrh.w	r2, [r1, #17]
    cd6a:	f8ad 2000 	strh.w	r2, [sp]
    cd6e:	8242      	strh	r2, [r0, #18]
    cd70:	7cca      	ldrb	r2, [r1, #19]
    cd72:	7502      	strb	r2, [r0, #20]
    cd74:	694a      	ldr	r2, [r1, #20]
    cd76:	f8c0 2015 	str.w	r2, [r0, #21]
    cd7a:	8b0a      	ldrh	r2, [r1, #24]
    cd7c:	f8a0 2019 	strh.w	r2, [r0, #25]
    cd80:	7a0a      	ldrb	r2, [r1, #8]
    cd82:	76c2      	strb	r2, [r0, #27]
    cd84:	7a0d      	ldrb	r5, [r1, #8]
    cd86:	2de5      	cmp	r5, #229	; 0xe5
    cd88:	d300      	bcc.n	cd8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2e4>
    cd8a:	25e5      	movs	r5, #229	; 0xe5
    cd8c:	462a      	mov	r2, r5
    cd8e:	301c      	adds	r0, #28
    cd90:	311c      	adds	r1, #28
    cd92:	f003 fc6c 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cd96:	351a      	adds	r5, #26
    cd98:	b2e8      	uxtb	r0, r5
    cd9a:	2800      	cmp	r0, #0
    cd9c:	d001      	beq.n	cda2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fa>
    cd9e:	7060      	strb	r0, [r4, #1]
    cda0:	1c80      	adds	r0, r0, #2
    cda2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cda6:	7026      	strb	r6, [r4, #0]
    cda8:	f884 a002 	strb.w	sl, [r4, #2]
    cdac:	2001      	movs	r0, #1
    cdae:	e7f6      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cdb0:	7026      	strb	r6, [r4, #0]
    cdb2:	70a3      	strb	r3, [r4, #2]
    cdb4:	7928      	ldrb	r0, [r5, #4]
    cdb6:	70e0      	strb	r0, [r4, #3]
    cdb8:	7968      	ldrb	r0, [r5, #5]
    cdba:	7120      	strb	r0, [r4, #4]
    cdbc:	79a8      	ldrb	r0, [r5, #6]
    cdbe:	7160      	strb	r0, [r4, #5]
    cdc0:	88e8      	ldrh	r0, [r5, #6]
    cdc2:	0a00      	lsrs	r0, r0, #8
    cdc4:	71a0      	strb	r0, [r4, #6]
    cdc6:	7a28      	ldrb	r0, [r5, #8]
    cdc8:	71e0      	strb	r0, [r4, #7]
    cdca:	2006      	movs	r0, #6
    cdcc:	e7e7      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cdce:	7026      	strb	r6, [r4, #0]
    cdd0:	2020      	movs	r0, #32
    cdd2:	e041      	b.n	ce58 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3b0>
    cdd4:	7026      	strb	r6, [r4, #0]
    cdd6:	2021      	movs	r0, #33	; 0x21
    cdd8:	70a0      	strb	r0, [r4, #2]
    cdda:	7928      	ldrb	r0, [r5, #4]
    cddc:	70e0      	strb	r0, [r4, #3]
    cdde:	7968      	ldrb	r0, [r5, #5]
    cde0:	7120      	strb	r0, [r4, #4]
    cde2:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cde6:	0a00      	lsrs	r0, r0, #8
    cde8:	7160      	strb	r0, [r4, #5]
    cdea:	79e8      	ldrb	r0, [r5, #7]
    cdec:	71a0      	strb	r0, [r4, #6]
    cdee:	7a28      	ldrb	r0, [r5, #8]
    cdf0:	71e0      	strb	r0, [r4, #7]
    cdf2:	7a68      	ldrb	r0, [r5, #9]
    cdf4:	7220      	strb	r0, [r4, #8]
    cdf6:	7aa8      	ldrb	r0, [r5, #10]
    cdf8:	7260      	strb	r0, [r4, #9]
    cdfa:	7ae8      	ldrb	r0, [r5, #11]
    cdfc:	72a0      	strb	r0, [r4, #10]
    cdfe:	2009      	movs	r0, #9
    ce00:	e7cd      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ce02:	7022      	strb	r2, [r4, #0]
    ce04:	20a1      	movs	r0, #161	; 0xa1
    ce06:	70a0      	strb	r0, [r4, #2]
    ce08:	7928      	ldrb	r0, [r5, #4]
    ce0a:	70e0      	strb	r0, [r4, #3]
    ce0c:	7968      	ldrb	r0, [r5, #5]
    ce0e:	7120      	strb	r0, [r4, #4]
    ce10:	2000      	movs	r0, #0
    ce12:	7160      	strb	r0, [r4, #5]
    ce14:	2004      	movs	r0, #4
    ce16:	e7c2      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ce18:	7022      	strb	r2, [r4, #0]
    ce1a:	20a2      	movs	r0, #162	; 0xa2
    ce1c:	70a0      	strb	r0, [r4, #2]
    ce1e:	7928      	ldrb	r0, [r5, #4]
    ce20:	70e0      	strb	r0, [r4, #3]
    ce22:	88a8      	ldrh	r0, [r5, #4]
    ce24:	0a00      	lsrs	r0, r0, #8
    ce26:	7120      	strb	r0, [r4, #4]
    ce28:	79a8      	ldrb	r0, [r5, #6]
    ce2a:	7160      	strb	r0, [r4, #5]
    ce2c:	88e8      	ldrh	r0, [r5, #6]
    ce2e:	0a00      	lsrs	r0, r0, #8
    ce30:	71a0      	strb	r0, [r4, #6]
    ce32:	7a28      	ldrb	r0, [r5, #8]
    ce34:	71e0      	strb	r0, [r4, #7]
    ce36:	8928      	ldrh	r0, [r5, #8]
    ce38:	0a00      	lsrs	r0, r0, #8
    ce3a:	7220      	strb	r0, [r4, #8]
    ce3c:	7aa8      	ldrb	r0, [r5, #10]
    ce3e:	7260      	strb	r0, [r4, #9]
    ce40:	8968      	ldrh	r0, [r5, #10]
    ce42:	0a00      	lsrs	r0, r0, #8
    ce44:	72a0      	strb	r0, [r4, #10]
    ce46:	7b28      	ldrb	r0, [r5, #12]
    ce48:	72e0      	strb	r0, [r4, #11]
    ce4a:	89a8      	ldrh	r0, [r5, #12]
    ce4c:	0a00      	lsrs	r0, r0, #8
    ce4e:	7320      	strb	r0, [r4, #12]
    ce50:	200b      	movs	r0, #11
    ce52:	e7a4      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ce54:	7022      	strb	r2, [r4, #0]
    ce56:	20a3      	movs	r0, #163	; 0xa3
    ce58:	70a0      	strb	r0, [r4, #2]
    ce5a:	7928      	ldrb	r0, [r5, #4]
    ce5c:	70e0      	strb	r0, [r4, #3]
    ce5e:	88a8      	ldrh	r0, [r5, #4]
    ce60:	0a00      	lsrs	r0, r0, #8
    ce62:	7120      	strb	r0, [r4, #4]
    ce64:	79a8      	ldrb	r0, [r5, #6]
    ce66:	7160      	strb	r0, [r4, #5]
    ce68:	79e8      	ldrb	r0, [r5, #7]
    ce6a:	71a0      	strb	r0, [r4, #6]
    ce6c:	2005      	movs	r0, #5
    ce6e:	e796      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ce70:	7026      	strb	r6, [r4, #0]
    ce72:	2013      	movs	r0, #19
    ce74:	70a0      	strb	r0, [r4, #2]
    ce76:	7928      	ldrb	r0, [r5, #4]
    ce78:	70e0      	strb	r0, [r4, #3]
    ce7a:	7968      	ldrb	r0, [r5, #5]
    ce7c:	7120      	strb	r0, [r4, #4]
    ce7e:	f8d5 0006 	ldr.w	r0, [r5, #6]
    ce82:	f8c4 0005 	str.w	r0, [r4, #5]
    ce86:	8968      	ldrh	r0, [r5, #10]
    ce88:	f8a4 0009 	strh.w	r0, [r4, #9]
    ce8c:	200a      	movs	r0, #10
    ce8e:	e786      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ce90:	7022      	strb	r2, [r4, #0]
    ce92:	20a4      	movs	r0, #164	; 0xa4
    ce94:	70a0      	strb	r0, [r4, #2]
    ce96:	7928      	ldrb	r0, [r5, #4]
    ce98:	70e0      	strb	r0, [r4, #3]
    ce9a:	88a8      	ldrh	r0, [r5, #4]
    ce9c:	0a00      	lsrs	r0, r0, #8
    ce9e:	7120      	strb	r0, [r4, #4]
    cea0:	79a8      	ldrb	r0, [r5, #6]
    cea2:	7160      	strb	r0, [r4, #5]
    cea4:	79e8      	ldrb	r0, [r5, #7]
    cea6:	71a0      	strb	r0, [r4, #6]
    cea8:	2007      	movs	r0, #7
    ceaa:	e778      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ceac:	7022      	strb	r2, [r4, #0]
    ceae:	2080      	movs	r0, #128	; 0x80
    ceb0:	70a0      	strb	r0, [r4, #2]
    ceb2:	88a9      	ldrh	r1, [r5, #4]
    ceb4:	f8a4 1003 	strh.w	r1, [r4, #3]
    ceb8:	88e9      	ldrh	r1, [r5, #6]
    ceba:	f8a4 1005 	strh.w	r1, [r4, #5]
    cebe:	7a29      	ldrb	r1, [r5, #8]
    cec0:	71e1      	strb	r1, [r4, #7]
    cec2:	8969      	ldrh	r1, [r5, #10]
    cec4:	8121      	strh	r1, [r4, #8]
    cec6:	89a9      	ldrh	r1, [r5, #12]
    cec8:	8161      	strh	r1, [r4, #10]
    ceca:	89e9      	ldrh	r1, [r5, #14]
    cecc:	81a1      	strh	r1, [r4, #12]
    cece:	7c29      	ldrb	r1, [r5, #16]
    ced0:	f001 0101 	and.w	r1, r1, #1
    ced4:	73a1      	strb	r1, [r4, #14]
    ced6:	200d      	movs	r0, #13
    ced8:	e761      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>

0000ceda <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>:
    ceda:	223e      	movs	r2, #62	; 0x3e
    cedc:	7002      	strb	r2, [r0, #0]
    cede:	2201      	movs	r2, #1
    cee0:	7082      	strb	r2, [r0, #2]
    cee2:	790a      	ldrb	r2, [r1, #4]
    cee4:	70c2      	strb	r2, [r0, #3]
    cee6:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    ceea:	7102      	strb	r2, [r0, #4]
    ceec:	880a      	ldrh	r2, [r1, #0]
    ceee:	0a12      	lsrs	r2, r2, #8
    cef0:	7142      	strb	r2, [r0, #5]
    cef2:	788a      	ldrb	r2, [r1, #2]
    cef4:	7182      	strb	r2, [r0, #6]
    cef6:	78ca      	ldrb	r2, [r1, #3]
    cef8:	71c2      	strb	r2, [r0, #7]
    cefa:	684a      	ldr	r2, [r1, #4]
    cefc:	6082      	str	r2, [r0, #8]
    cefe:	890a      	ldrh	r2, [r1, #8]
    cf00:	8182      	strh	r2, [r0, #12]
    cf02:	7d8a      	ldrb	r2, [r1, #22]
    cf04:	7382      	strb	r2, [r0, #14]
    cf06:	8aca      	ldrh	r2, [r1, #22]
    cf08:	0a12      	lsrs	r2, r2, #8
    cf0a:	73c2      	strb	r2, [r0, #15]
    cf0c:	7e0a      	ldrb	r2, [r1, #24]
    cf0e:	7402      	strb	r2, [r0, #16]
    cf10:	8b0a      	ldrh	r2, [r1, #24]
    cf12:	0a12      	lsrs	r2, r2, #8
    cf14:	7442      	strb	r2, [r0, #17]
    cf16:	7e8a      	ldrb	r2, [r1, #26]
    cf18:	7482      	strb	r2, [r0, #18]
    cf1a:	8b4a      	ldrh	r2, [r1, #26]
    cf1c:	0a12      	lsrs	r2, r2, #8
    cf1e:	74c2      	strb	r2, [r0, #19]
    cf20:	7f09      	ldrb	r1, [r1, #28]
    cf22:	7501      	strb	r1, [r0, #20]
    cf24:	2113      	movs	r1, #19
    cf26:	7041      	strb	r1, [r0, #1]
    cf28:	4608      	mov	r0, r1
    cf2a:	4770      	bx	lr
    cf2c:	223e      	movs	r2, #62	; 0x3e
    cf2e:	7002      	strb	r2, [r0, #0]
    cf30:	220a      	movs	r2, #10
    cf32:	7082      	strb	r2, [r0, #2]
    cf34:	790a      	ldrb	r2, [r1, #4]
    cf36:	70c2      	strb	r2, [r0, #3]
    cf38:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    cf3c:	7102      	strb	r2, [r0, #4]
    cf3e:	880a      	ldrh	r2, [r1, #0]
    cf40:	0a12      	lsrs	r2, r2, #8
    cf42:	7142      	strb	r2, [r0, #5]
    cf44:	788a      	ldrb	r2, [r1, #2]
    cf46:	7182      	strb	r2, [r0, #6]
    cf48:	78ca      	ldrb	r2, [r1, #3]
    cf4a:	71c2      	strb	r2, [r0, #7]
    cf4c:	684a      	ldr	r2, [r1, #4]
    cf4e:	6082      	str	r2, [r0, #8]
    cf50:	890a      	ldrh	r2, [r1, #8]
    cf52:	8182      	strh	r2, [r0, #12]
    cf54:	f8d1 200a 	ldr.w	r2, [r1, #10]
    cf58:	f8c0 200e 	str.w	r2, [r0, #14]
    cf5c:	89ca      	ldrh	r2, [r1, #14]
    cf5e:	8242      	strh	r2, [r0, #18]
    cf60:	690a      	ldr	r2, [r1, #16]
    cf62:	6142      	str	r2, [r0, #20]
    cf64:	8a8a      	ldrh	r2, [r1, #20]
    cf66:	8302      	strh	r2, [r0, #24]
    cf68:	7d8a      	ldrb	r2, [r1, #22]
    cf6a:	7682      	strb	r2, [r0, #26]
    cf6c:	8aca      	ldrh	r2, [r1, #22]
    cf6e:	0a12      	lsrs	r2, r2, #8
    cf70:	76c2      	strb	r2, [r0, #27]
    cf72:	7e0a      	ldrb	r2, [r1, #24]
    cf74:	7702      	strb	r2, [r0, #28]
    cf76:	8b0a      	ldrh	r2, [r1, #24]
    cf78:	0a12      	lsrs	r2, r2, #8
    cf7a:	7742      	strb	r2, [r0, #29]
    cf7c:	7e8a      	ldrb	r2, [r1, #26]
    cf7e:	7782      	strb	r2, [r0, #30]
    cf80:	8b4a      	ldrh	r2, [r1, #26]
    cf82:	0a12      	lsrs	r2, r2, #8
    cf84:	77c2      	strb	r2, [r0, #31]
    cf86:	7f09      	ldrb	r1, [r1, #28]
    cf88:	f880 1020 	strb.w	r1, [r0, #32]
    cf8c:	211f      	movs	r1, #31
    cf8e:	7041      	strb	r1, [r0, #1]
    cf90:	4608      	mov	r0, r1
    cf92:	4770      	bx	lr
    cf94:	094a      	lsrs	r2, r1, #5
    cf96:	f001 011f 	and.w	r1, r1, #31
    cf9a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    cf9e:	40c8      	lsrs	r0, r1
    cfa0:	f000 0001 	and.w	r0, r0, #1
    cfa4:	4770      	bx	lr

0000cfa6 <sdc_hci_data_put>:
    cfa6:	b510      	push	{r4, lr}
    cfa8:	f06f 0415 	mvn.w	r4, #21
    cfac:	b120      	cbz	r0, cfb8 <sdc_hci_data_put+0x12>
    cfae:	f7ff fcf3 	bl	c998 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    cfb2:	b108      	cbz	r0, cfb8 <sdc_hci_data_put+0x12>
    cfb4:	2000      	movs	r0, #0
    cfb6:	bd10      	pop	{r4, pc}
    cfb8:	4620      	mov	r0, r4
    cfba:	bd10      	pop	{r4, pc}

0000cfbc <sdc_hci_get>:
    cfbc:	b510      	push	{r4, lr}
    cfbe:	460c      	mov	r4, r1
    cfc0:	b130      	cbz	r0, cfd0 <sdc_hci_get+0x14>
    cfc2:	b12c      	cbz	r4, cfd0 <sdc_hci_get+0x14>
    cfc4:	f7f3 fe3a 	bl	c3c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    cfc8:	b128      	cbz	r0, cfd6 <sdc_hci_get+0x1a>
    cfca:	7020      	strb	r0, [r4, #0]
    cfcc:	2000      	movs	r0, #0
    cfce:	bd10      	pop	{r4, pc}
    cfd0:	f06f 0015 	mvn.w	r0, #21
    cfd4:	bd10      	pop	{r4, pc}
    cfd6:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cfda:	bd10      	pop	{r4, pc}

0000cfdc <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    cfdc:	f002 bd48 	b.w	fa70 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000cfe0 <sdc_hci_cmd_cb_read_transmit_power_level>:
    cfe0:	f002 bd63 	b.w	faaa <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000cfe4 <sdc_hci_cmd_cb_set_event_mask>:
    cfe4:	b510      	push	{r4, lr}
    cfe6:	f7f3 fecd 	bl	d84 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    cfea:	2000      	movs	r0, #0
    cfec:	bd10      	pop	{r4, pc}

0000cfee <sdc_hci_cmd_cb_set_event_mask_page_2>:
    cfee:	b510      	push	{r4, lr}
    cff0:	f7f3 feda 	bl	da8 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    cff4:	2000      	movs	r0, #0
    cff6:	bd10      	pop	{r4, pc}

0000cff8 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    cff8:	f002 bd78 	b.w	faec <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000cffc <sdc_hci_cmd_vs_conn_event_extend>:
    cffc:	b508      	push	{r3, lr}
    cffe:	7800      	ldrb	r0, [r0, #0]
    d000:	f88d 0000 	strb.w	r0, [sp]
    d004:	4668      	mov	r0, sp
    d006:	f002 fd0f 	bl	fa28 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    d00a:	bd08      	pop	{r3, pc}

0000d00c <sdc_hci_cmd_vs_conn_update>:
    d00c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    d00e:	2100      	movs	r1, #0
    d010:	9100      	str	r1, [sp, #0]
    d012:	9101      	str	r1, [sp, #4]
    d014:	9102      	str	r1, [sp, #8]
    d016:	9103      	str	r1, [sp, #12]
    d018:	f8d0 1002 	ldr.w	r1, [r0, #2]
    d01c:	f641 524c 	movw	r2, #7500	; 0x1d4c
    d020:	4291      	cmp	r1, r2
    d022:	d304      	bcc.n	d02e <sdc_hci_cmd_vs_conn_update+0x22>
    d024:	f240 42e2 	movw	r2, #1250	; 0x4e2
    d028:	fbb1 f1f2 	udiv	r1, r1, r2
    d02c:	e005      	b.n	d03a <sdc_hci_cmd_vs_conn_update+0x2e>
    d02e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d032:	fbb1 f1f2 	udiv	r1, r1, r2
    d036:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    d03a:	8802      	ldrh	r2, [r0, #0]
    d03c:	b289      	uxth	r1, r1
    d03e:	f8ad 2000 	strh.w	r2, [sp]
    d042:	f8ad 1002 	strh.w	r1, [sp, #2]
    d046:	f8ad 1004 	strh.w	r1, [sp, #4]
    d04a:	88c1      	ldrh	r1, [r0, #6]
    d04c:	f8ad 1006 	strh.w	r1, [sp, #6]
    d050:	8900      	ldrh	r0, [r0, #8]
    d052:	f8ad 0008 	strh.w	r0, [sp, #8]
    d056:	4668      	mov	r0, sp
    d058:	f002 fa99 	bl	f58e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    d05c:	b004      	add	sp, #16
    d05e:	bd10      	pop	{r4, pc}

0000d060 <sdc_hci_cmd_vs_event_length_set>:
    d060:	f7fa b880 	b.w	7164 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000d064 <sdc_hci_cmd_vs_llpm_mode_set>:
    d064:	2001      	movs	r0, #1
    d066:	4770      	bx	lr

0000d068 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    d068:	7800      	ldrb	r0, [r0, #0]
    d06a:	b100      	cbz	r0, d06e <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    d06c:	2001      	movs	r0, #1
    d06e:	f002 bc0a 	b.w	f886 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000d072 <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    d072:	b510      	push	{r4, lr}
    d074:	4604      	mov	r4, r0
    d076:	f7ff f9e3 	bl	c440 <mpsl_temperature_get>
    d07a:	17c1      	asrs	r1, r0, #31
    d07c:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    d080:	1080      	asrs	r0, r0, #2
    d082:	287f      	cmp	r0, #127	; 0x7f
    d084:	dd01      	ble.n	d08a <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    d086:	207f      	movs	r0, #127	; 0x7f
    d088:	e004      	b.n	d094 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d08a:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    d08e:	4288      	cmp	r0, r1
    d090:	da00      	bge.n	d094 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d092:	4608      	mov	r0, r1
    d094:	7020      	strb	r0, [r4, #0]
    d096:	2000      	movs	r0, #0
    d098:	bd10      	pop	{r4, pc}

0000d09a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    d09a:	b570      	push	{r4, r5, r6, lr}
    d09c:	4605      	mov	r5, r0
    d09e:	2210      	movs	r2, #16
    d0a0:	2100      	movs	r1, #0
    d0a2:	f003 fb5e 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d0a6:	2210      	movs	r2, #16
    d0a8:	2100      	movs	r1, #0
    d0aa:	f105 0010 	add.w	r0, r5, #16
    d0ae:	f003 fb58 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d0b2:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    d0b6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    d0ba:	1c40      	adds	r0, r0, #1
    d0bc:	d10b      	bne.n	d0d6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d0be:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d0c2:	1c40      	adds	r0, r0, #1
    d0c4:	d107      	bne.n	d0d6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d0c6:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    d0ca:	1c40      	adds	r0, r0, #1
    d0cc:	d103      	bne.n	d0d6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d0ce:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    d0d2:	1c40      	adds	r0, r0, #1
    d0d4:	d00b      	beq.n	d0ee <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    d0d6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    d0da:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d0de:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    d0e2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    d0e6:	612a      	str	r2, [r5, #16]
    d0e8:	6168      	str	r0, [r5, #20]
    d0ea:	61a9      	str	r1, [r5, #24]
    d0ec:	61eb      	str	r3, [r5, #28]
    d0ee:	2000      	movs	r0, #0
    d0f0:	f7f4 fac4 	bl	167c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d0f4:	b918      	cbnz	r0, d0fe <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    d0f6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    d0fa:	07c0      	lsls	r0, r0, #31
    d0fc:	d118      	bne.n	d130 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d0fe:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    d102:	1c40      	adds	r0, r0, #1
    d104:	d10b      	bne.n	d11e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d106:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    d10a:	1c40      	adds	r0, r0, #1
    d10c:	d107      	bne.n	d11e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d10e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    d112:	1c40      	adds	r0, r0, #1
    d114:	d103      	bne.n	d11e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d116:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    d11a:	1c40      	adds	r0, r0, #1
    d11c:	d008      	beq.n	d130 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d11e:	f854 0f90 	ldr.w	r0, [r4, #144]!
    d122:	6861      	ldr	r1, [r4, #4]
    d124:	68a2      	ldr	r2, [r4, #8]
    d126:	68e3      	ldr	r3, [r4, #12]
    d128:	6028      	str	r0, [r5, #0]
    d12a:	6069      	str	r1, [r5, #4]
    d12c:	60aa      	str	r2, [r5, #8]
    d12e:	60eb      	str	r3, [r5, #12]
    d130:	2000      	movs	r0, #0
    d132:	bd70      	pop	{r4, r5, r6, pc}

0000d134 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    d134:	b538      	push	{r3, r4, r5, lr}
    d136:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d13a:	4604      	mov	r4, r0
    d13c:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d140:	1c40      	adds	r0, r0, #1
    d142:	d105      	bne.n	d150 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    d144:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    d148:	43c0      	mvns	r0, r0
    d14a:	0400      	lsls	r0, r0, #16
    d14c:	0c00      	lsrs	r0, r0, #16
    d14e:	d03e      	beq.n	d1ce <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d150:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    d154:	07c0      	lsls	r0, r0, #31
    d156:	d03a      	beq.n	d1ce <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d158:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d15c:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    d160:	f8ad 1000 	strh.w	r1, [sp]
    d164:	f8c4 0001 	str.w	r0, [r4, #1]
    d168:	f8bd 0000 	ldrh.w	r0, [sp]
    d16c:	f8a4 0005 	strh.w	r0, [r4, #5]
    d170:	79a0      	ldrb	r0, [r4, #6]
    d172:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    d176:	71a0      	strb	r0, [r4, #6]
    d178:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    d17c:	1c40      	adds	r0, r0, #1
    d17e:	d00f      	beq.n	d1a0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d180:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    d184:	1c40      	adds	r0, r0, #1
    d186:	d00b      	beq.n	d1a0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d188:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    d18c:	1c40      	adds	r0, r0, #1
    d18e:	d007      	beq.n	d1a0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d190:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    d194:	1c40      	adds	r0, r0, #1
    d196:	d003      	beq.n	d1a0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d198:	2000      	movs	r0, #0
    d19a:	f7f4 fa6f 	bl	167c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d19e:	b140      	cbz	r0, d1b2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    d1a0:	2210      	movs	r2, #16
    d1a2:	2100      	movs	r1, #0
    d1a4:	1de0      	adds	r0, r4, #7
    d1a6:	f003 fadc 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d1aa:	2001      	movs	r0, #1
    d1ac:	7020      	strb	r0, [r4, #0]
    d1ae:	2000      	movs	r0, #0
    d1b0:	bd38      	pop	{r3, r4, r5, pc}
    d1b2:	f855 2f90 	ldr.w	r2, [r5, #144]!
    d1b6:	6869      	ldr	r1, [r5, #4]
    d1b8:	68a8      	ldr	r0, [r5, #8]
    d1ba:	68eb      	ldr	r3, [r5, #12]
    d1bc:	f8c4 2007 	str.w	r2, [r4, #7]
    d1c0:	f8c4 100b 	str.w	r1, [r4, #11]
    d1c4:	f8c4 000f 	str.w	r0, [r4, #15]
    d1c8:	f8c4 3013 	str.w	r3, [r4, #19]
    d1cc:	e7ed      	b.n	d1aa <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    d1ce:	2000      	movs	r0, #0
    d1d0:	e7ec      	b.n	d1ac <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000d1d2 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    d1d2:	f002 bc18 	b.w	fa06 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000d1d6 <sdc_hci_cmd_ip_read_bd_addr>:
    d1d6:	f002 bc5c 	b.w	fa92 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000d1da <sdc_hci_cmd_ip_read_local_version_information>:
    d1da:	f7fa b815 	b.w	7208 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000d1de <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    d1de:	f002 b9b5 	b.w	f54c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000d1e2 <sdc_hci_cmd_le_clear_filter_accept_list>:
    d1e2:	f002 b9ca 	b.w	f57a <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000d1e6 <sdc_hci_cmd_le_conn_update>:
    d1e6:	f002 b9d2 	b.w	f58e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>

0000d1ea <sdc_hci_cmd_le_create_conn>:
    d1ea:	f7f9 bea1 	b.w	6f30 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>

0000d1ee <sdc_hci_cmd_le_create_conn_cancel>:
    d1ee:	f002 ba11 	b.w	f614 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>

0000d1f2 <sdc_hci_cmd_le_enable_encryption>:
    d1f2:	f002 bb05 	b.w	f800 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>

0000d1f6 <sdc_hci_cmd_le_encrypt>:
    d1f6:	f002 ba1d 	b.w	f634 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000d1fa <sdc_hci_cmd_le_rand>:
    d1fa:	f002 ba24 	b.w	f646 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000d1fe <sdc_hci_cmd_le_read_buffer_size>:
    d1fe:	f7f9 bef3 	b.w	6fe8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000d202 <sdc_hci_cmd_le_read_channel_map>:
    d202:	f7f9 befb 	b.w	6ffc <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000d206 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    d206:	f002 ba58 	b.w	f6ba <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000d20a <sdc_hci_cmd_le_read_max_data_length>:
    d20a:	f002 ba22 	b.w	f652 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000d20e <sdc_hci_cmd_le_read_phy>:
    d20e:	f7f9 bf1d 	b.w	704c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000d212 <sdc_hci_cmd_le_read_remote_features>:
    d212:	f002 ba27 	b.w	f664 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000d216 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    d216:	f7f9 bf3f 	b.w	7098 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000d21a <sdc_hci_cmd_le_read_transmit_power>:
    d21a:	f002 ba3e 	b.w	f69a <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000d21e <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    d21e:	f002 ba50 	b.w	f6c2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000d222 <sdc_hci_cmd_le_set_data_length>:
    d222:	f002 ba63 	b.w	f6ec <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000d226 <sdc_hci_cmd_le_set_default_phy>:
    d226:	f7f9 bf41 	b.w	70ac <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000d22a <sdc_hci_cmd_le_set_event_mask>:
    d22a:	b510      	push	{r4, lr}
    d22c:	f7f3 fd98 	bl	d60 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    d230:	2000      	movs	r0, #0
    d232:	bd10      	pop	{r4, pc}

0000d234 <sdc_hci_cmd_le_set_host_channel_classification>:
    d234:	f7f9 bf62 	b.w	70fc <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>

0000d238 <sdc_hci_cmd_le_set_phy>:
    d238:	f002 ba78 	b.w	f72c <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000d23c <sdc_hci_cmd_le_set_random_address>:
    d23c:	f002 ba8f 	b.w	f75e <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000d240 <sdc_hci_cmd_le_set_scan_enable>:
    d240:	f002 ba9b 	b.w	f77a <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>

0000d244 <sdc_hci_cmd_le_set_scan_params>:
    d244:	f002 baaf 	b.w	f7a6 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>

0000d248 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    d248:	f002 bb0c 	b.w	f864 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000d24c <sdc_hci_cmd_lc_disconnect>:
    d24c:	f002 b933 	b.w	f4b6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000d250 <sdc_hci_cmd_lc_read_remote_version_information>:
    d250:	f7f9 bfe4 	b.w	721c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    d254:	b570      	push	{r4, r5, r6, lr}
    d256:	880b      	ldrh	r3, [r1, #0]
    d258:	7cc4      	ldrb	r4, [r0, #19]
    d25a:	f100 0518 	add.w	r5, r0, #24
    d25e:	f3c3 060e 	ubfx	r6, r3, #0, #15
    d262:	8802      	ldrh	r2, [r0, #0]
    d264:	4435      	add	r5, r6
    d266:	1d64      	adds	r4, r4, #5
    d268:	882d      	ldrh	r5, [r5, #0]
    d26a:	4422      	add	r2, r4
    d26c:	b292      	uxth	r2, r2
    d26e:	4425      	add	r5, r4
    d270:	1e54      	subs	r4, r2, #1
    d272:	442c      	add	r4, r5
    d274:	fb94 f4f2 	sdiv	r4, r4, r2
    d278:	fb02 6204 	mla	r2, r2, r4, r6
    d27c:	8840      	ldrh	r0, [r0, #2]
    d27e:	b292      	uxth	r2, r2
    d280:	4290      	cmp	r0, r2
    d282:	d903      	bls.n	d28c <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d284:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d288:	4310      	orrs	r0, r2
    d28a:	e002      	b.n	d292 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d28c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d290:	4398      	bics	r0, r3
    d292:	8008      	strh	r0, [r1, #0]
    d294:	bd70      	pop	{r4, r5, r6, pc}
    d296:	0442      	lsls	r2, r0, #17
    d298:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    d29c:	d107      	bne.n	d2ae <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d29e:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d2a2:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d2a6:	4288      	cmp	r0, r1
    d2a8:	d001      	beq.n	d2ae <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d2aa:	2001      	movs	r0, #1
    d2ac:	4770      	bx	lr
    d2ae:	2000      	movs	r0, #0
    d2b0:	4770      	bx	lr

0000d2b2 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d2b2:	8881      	ldrh	r1, [r0, #4]
    d2b4:	88c0      	ldrh	r0, [r0, #6]
    d2b6:	4288      	cmp	r0, r1
    d2b8:	d101      	bne.n	d2be <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    d2ba:	2001      	movs	r0, #1
    d2bc:	4770      	bx	lr
    d2be:	2000      	movs	r0, #0
    d2c0:	4770      	bx	lr

0000d2c2 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    d2c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d2c6:	460f      	mov	r7, r1
    d2c8:	4604      	mov	r4, r0
    d2ca:	f100 0118 	add.w	r1, r0, #24
    d2ce:	8880      	ldrh	r0, [r0, #4]
    d2d0:	2600      	movs	r6, #0
    d2d2:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d2d6:	1845      	adds	r5, r0, r1
    d2d8:	603e      	str	r6, [r7, #0]
    d2da:	89e0      	ldrh	r0, [r4, #14]
    d2dc:	2800      	cmp	r0, #0
    d2de:	d016      	beq.n	d30e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    d2e0:	8961      	ldrh	r1, [r4, #10]
    d2e2:	4408      	add	r0, r1
    d2e4:	b280      	uxth	r0, r0
    d2e6:	8160      	strh	r0, [r4, #10]
    d2e8:	8829      	ldrh	r1, [r5, #0]
    d2ea:	4288      	cmp	r0, r1
    d2ec:	d905      	bls.n	d2fa <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    d2ee:	f240 1151 	movw	r1, #337	; 0x151
    d2f2:	f04f 0014 	mov.w	r0, #20
    d2f6:	f7f3 fbb5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d2fa:	d106      	bne.n	d30a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    d2fc:	f104 0104 	add.w	r1, r4, #4
    d300:	4620      	mov	r0, r4
    d302:	f7ff ffa7 	bl	d254 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d306:	8166      	strh	r6, [r4, #10]
    d308:	603d      	str	r5, [r7, #0]
    d30a:	81e6      	strh	r6, [r4, #14]
    d30c:	2001      	movs	r0, #1
    d30e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d312 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d316:	4604      	mov	r4, r0
    d318:	f100 0318 	add.w	r3, r0, #24
    d31c:	88c0      	ldrh	r0, [r0, #6]
    d31e:	460e      	mov	r6, r1
    d320:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d324:	8a20      	ldrh	r0, [r4, #16]
    d326:	19d9      	adds	r1, r3, r7
    d328:	b108      	cbz	r0, d32e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    d32a:	42b0      	cmp	r0, r6
    d32c:	d202      	bcs.n	d334 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    d32e:	2000      	movs	r0, #0
    d330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d334:	89a0      	ldrh	r0, [r4, #12]
    d336:	2500      	movs	r5, #0
    d338:	b140      	cbz	r0, d34c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    d33a:	f8b1 c000 	ldrh.w	ip, [r1]
    d33e:	4560      	cmp	r0, ip
    d340:	d006      	beq.n	d350 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    d342:	f44f 7101 	mov.w	r1, #516	; 0x204
    d346:	2014      	movs	r0, #20
    d348:	f7f3 fb8c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d34c:	800d      	strh	r5, [r1, #0]
    d34e:	e00e      	b.n	d36e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d350:	f894 c013 	ldrb.w	ip, [r4, #19]
    d354:	4418      	add	r0, r3
    d356:	f10c 0c05 	add.w	ip, ip, #5
    d35a:	44bc      	add	ip, r7
    d35c:	4460      	add	r0, ip
    d35e:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    d362:	f820 cc03 	strh.w	ip, [r0, #-3]
    d366:	f894 c016 	ldrb.w	ip, [r4, #22]
    d36a:	f800 cc01 	strb.w	ip, [r0, #-1]
    d36e:	89a0      	ldrh	r0, [r4, #12]
    d370:	4430      	add	r0, r6
    d372:	81a0      	strh	r0, [r4, #12]
    d374:	8808      	ldrh	r0, [r1, #0]
    d376:	4430      	add	r0, r6
    d378:	8008      	strh	r0, [r1, #0]
    d37a:	b12a      	cbz	r2, d388 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
    d37c:	1da1      	adds	r1, r4, #6
    d37e:	4620      	mov	r0, r4
    d380:	f7ff ff68 	bl	d254 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d384:	81a5      	strh	r5, [r4, #12]
    d386:	e00a      	b.n	d39e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
    d388:	7ce0      	ldrb	r0, [r4, #19]
    d38a:	89a1      	ldrh	r1, [r4, #12]
    d38c:	1d40      	adds	r0, r0, #5
    d38e:	4438      	add	r0, r7
    d390:	4419      	add	r1, r3
    d392:	4408      	add	r0, r1
    d394:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d398:	82a1      	strh	r1, [r4, #20]
    d39a:	7880      	ldrb	r0, [r0, #2]
    d39c:	75a0      	strb	r0, [r4, #22]
    d39e:	8225      	strh	r5, [r4, #16]
    d3a0:	2001      	movs	r0, #1
    d3a2:	e7c5      	b.n	d330 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000d3a4 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    d3a4:	1c80      	adds	r0, r0, #2
    d3a6:	4770      	bx	lr

0000d3a8 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>:
    d3a8:	b510      	push	{r4, lr}
    d3aa:	88c2      	ldrh	r2, [r0, #6]
    d3ac:	8903      	ldrh	r3, [r0, #8]
    d3ae:	f3c2 010e 	ubfx	r1, r2, #0, #15
    d3b2:	f3c3 040e 	ubfx	r4, r3, #0, #15
    d3b6:	1a61      	subs	r1, r4, r1
    d3b8:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
    d3bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    d3c0:	429a      	cmp	r2, r3
    d3c2:	d101      	bne.n	d3c8 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY+0x20>
    d3c4:	8842      	ldrh	r2, [r0, #2]
    d3c6:	4411      	add	r1, r2
    d3c8:	7cc2      	ldrb	r2, [r0, #19]
    d3ca:	8800      	ldrh	r0, [r0, #0]
    d3cc:	4410      	add	r0, r2
    d3ce:	1d40      	adds	r0, r0, #5
    d3d0:	b280      	uxth	r0, r0
    d3d2:	fb91 f0f0 	sdiv	r0, r1, r0
    d3d6:	b280      	uxth	r0, r0
    d3d8:	bd10      	pop	{r4, pc}

0000d3da <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d3da:	b510      	push	{r4, lr}
    d3dc:	4604      	mov	r4, r0
    d3de:	88c0      	ldrh	r0, [r0, #6]
    d3e0:	88a1      	ldrh	r1, [r4, #4]
    d3e2:	4281      	cmp	r1, r0
    d3e4:	d003      	beq.n	d3ee <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d3e6:	8960      	ldrh	r0, [r4, #10]
    d3e8:	b908      	cbnz	r0, d3ee <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d3ea:	89e0      	ldrh	r0, [r4, #14]
    d3ec:	b108      	cbz	r0, d3f2 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x18>
    d3ee:	2000      	movs	r0, #0
    d3f0:	bd10      	pop	{r4, pc}
    d3f2:	1d21      	adds	r1, r4, #4
    d3f4:	4620      	mov	r0, r4
    d3f6:	f7ff ff2d 	bl	d254 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d3fa:	2000      	movs	r0, #0
    d3fc:	81e0      	strh	r0, [r4, #14]
    d3fe:	2001      	movs	r0, #1
    d400:	bd10      	pop	{r4, pc}

0000d402 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d402:	b510      	push	{r4, lr}
    d404:	4604      	mov	r4, r0
    d406:	f100 0218 	add.w	r2, r0, #24
    d40a:	88c0      	ldrh	r0, [r0, #6]
    d40c:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d410:	4402      	add	r2, r0
    d412:	8820      	ldrh	r0, [r4, #0]
    d414:	2845      	cmp	r0, #69	; 0x45
    d416:	d200      	bcs.n	d41a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d418:	2045      	movs	r0, #69	; 0x45
    d41a:	4288      	cmp	r0, r1
    d41c:	d204      	bcs.n	d428 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d41e:	f44f 7182 	mov.w	r1, #260	; 0x104
    d422:	2014      	movs	r0, #20
    d424:	f7f3 fb1e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d428:	7ca0      	ldrb	r0, [r4, #18]
    d42a:	2800      	cmp	r0, #0
    d42c:	d003      	beq.n	d436 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d42e:	8810      	ldrh	r0, [r2, #0]
    d430:	4288      	cmp	r0, r1
    d432:	d201      	bcs.n	d438 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d434:	2000      	movs	r0, #0
    d436:	bd10      	pop	{r4, pc}
    d438:	8011      	strh	r1, [r2, #0]
    d43a:	1da1      	adds	r1, r4, #6
    d43c:	4620      	mov	r0, r4
    d43e:	f7ff ff09 	bl	d254 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d442:	2000      	movs	r0, #0
    d444:	74a0      	strb	r0, [r4, #18]
    d446:	2001      	movs	r0, #1
    d448:	bd10      	pop	{r4, pc}

0000d44a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d44a:	b510      	push	{r4, lr}
    d44c:	88c4      	ldrh	r4, [r0, #6]
    d44e:	8883      	ldrh	r3, [r0, #4]
    d450:	4601      	mov	r1, r0
    d452:	f100 0218 	add.w	r2, r0, #24
    d456:	f3c3 000e 	ubfx	r0, r3, #0, #15
    d45a:	4410      	add	r0, r2
    d45c:	42a3      	cmp	r3, r4
    d45e:	d002      	beq.n	d466 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
    d460:	8949      	ldrh	r1, [r1, #10]
    d462:	2900      	cmp	r1, #0
    d464:	d000      	beq.n	d468 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1e>
    d466:	2000      	movs	r0, #0
    d468:	bd10      	pop	{r4, pc}

0000d46a <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    d46a:	8803      	ldrh	r3, [r0, #0]
    d46c:	2b45      	cmp	r3, #69	; 0x45
    d46e:	d200      	bcs.n	d472 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    d470:	2345      	movs	r3, #69	; 0x45
    d472:	8013      	strh	r3, [r2, #0]
    d474:	88c2      	ldrh	r2, [r0, #6]
    d476:	f3c2 030e 	ubfx	r3, r2, #0, #15
    d47a:	f100 0218 	add.w	r2, r0, #24
    d47e:	441a      	add	r2, r3
    d480:	600a      	str	r2, [r1, #0]
    d482:	8980      	ldrh	r0, [r0, #12]
    d484:	4770      	bx	lr

0000d486 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d486:	7cc0      	ldrb	r0, [r0, #19]
    d488:	1d40      	adds	r0, r0, #5
    d48a:	4408      	add	r0, r1
    d48c:	1ec0      	subs	r0, r0, #3
    d48e:	6010      	str	r0, [r2, #0]
    d490:	8808      	ldrh	r0, [r1, #0]
    d492:	4770      	bx	lr

0000d494 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d498:	460e      	mov	r6, r1
    d49a:	88c1      	ldrh	r1, [r0, #6]
    d49c:	8902      	ldrh	r2, [r0, #8]
    d49e:	4604      	mov	r4, r0
    d4a0:	f100 0818 	add.w	r8, r0, #24
    d4a4:	8800      	ldrh	r0, [r0, #0]
    d4a6:	f3c1 050e 	ubfx	r5, r1, #0, #15
    d4aa:	f3c2 070e 	ubfx	r7, r2, #0, #15
    d4ae:	2845      	cmp	r0, #69	; 0x45
    d4b0:	d200      	bcs.n	d4b4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d4b2:	2045      	movs	r0, #69	; 0x45
    d4b4:	42b0      	cmp	r0, r6
    d4b6:	d203      	bcs.n	d4c0 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d4b8:	21c6      	movs	r1, #198	; 0xc6
    d4ba:	2014      	movs	r0, #20
    d4bc:	f7f3 fad2 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d4c0:	4610      	mov	r0, r2
    d4c2:	f7ff fee8 	bl	d296 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d4c6:	b110      	cbz	r0, d4ce <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    d4c8:	2000      	movs	r0, #0
    d4ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d4ce:	42af      	cmp	r7, r5
    d4d0:	d908      	bls.n	d4e4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d4d2:	7ce1      	ldrb	r1, [r4, #19]
    d4d4:	1b78      	subs	r0, r7, r5
    d4d6:	1a40      	subs	r0, r0, r1
    d4d8:	1f40      	subs	r0, r0, #5
    d4da:	4286      	cmp	r6, r0
    d4dc:	dd02      	ble.n	d4e4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d4de:	2000      	movs	r0, #0
    d4e0:	74a0      	strb	r0, [r4, #18]
    d4e2:	e7f1      	b.n	d4c8 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    d4e4:	eb08 0005 	add.w	r0, r8, r5
    d4e8:	2101      	movs	r1, #1
    d4ea:	8006      	strh	r6, [r0, #0]
    d4ec:	74a1      	strb	r1, [r4, #18]
    d4ee:	e7ec      	b.n	d4ca <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000d4f0 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    d4f0:	b538      	push	{r3, r4, r5, lr}
    d4f2:	88c4      	ldrh	r4, [r0, #6]
    d4f4:	8881      	ldrh	r1, [r0, #4]
    d4f6:	f100 0218 	add.w	r2, r0, #24
    d4fa:	f3c1 030e 	ubfx	r3, r1, #0, #15
    d4fe:	441a      	add	r2, r3
    d500:	42a1      	cmp	r1, r4
    d502:	d010      	beq.n	d526 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d504:	8943      	ldrh	r3, [r0, #10]
    d506:	89c5      	ldrh	r5, [r0, #14]
    d508:	8812      	ldrh	r2, [r2, #0]
    d50a:	442b      	add	r3, r5
    d50c:	4293      	cmp	r3, r2
    d50e:	d308      	bcc.n	d522 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    d510:	f8ad 1000 	strh.w	r1, [sp]
    d514:	4669      	mov	r1, sp
    d516:	f7ff fe9d 	bl	d254 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d51a:	f8bd 0000 	ldrh.w	r0, [sp]
    d51e:	42a0      	cmp	r0, r4
    d520:	d001      	beq.n	d526 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d522:	2001      	movs	r0, #1
    d524:	bd38      	pop	{r3, r4, r5, pc}
    d526:	2000      	movs	r0, #0
    d528:	bd38      	pop	{r3, r4, r5, pc}

0000d52a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    d52a:	b570      	push	{r4, r5, r6, lr}
    d52c:	88c6      	ldrh	r6, [r0, #6]
    d52e:	8885      	ldrh	r5, [r0, #4]
    d530:	4603      	mov	r3, r0
    d532:	f100 0418 	add.w	r4, r0, #24
    d536:	f3c5 000e 	ubfx	r0, r5, #0, #15
    d53a:	4420      	add	r0, r4
    d53c:	42b5      	cmp	r5, r6
    d53e:	d102      	bne.n	d546 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    d540:	2000      	movs	r0, #0
    d542:	81d8      	strh	r0, [r3, #14]
    d544:	bd70      	pop	{r4, r5, r6, pc}
    d546:	8804      	ldrh	r4, [r0, #0]
    d548:	895d      	ldrh	r5, [r3, #10]
    d54a:	7cde      	ldrb	r6, [r3, #19]
    d54c:	1b64      	subs	r4, r4, r5
    d54e:	4435      	add	r5, r6
    d550:	4428      	add	r0, r5
    d552:	880d      	ldrh	r5, [r1, #0]
    d554:	b2a4      	uxth	r4, r4
    d556:	1c80      	adds	r0, r0, #2
    d558:	42a5      	cmp	r5, r4
    d55a:	d900      	bls.n	d55e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    d55c:	800c      	strh	r4, [r1, #0]
    d55e:	895c      	ldrh	r4, [r3, #10]
    d560:	b124      	cbz	r4, d56c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    d562:	2400      	movs	r4, #0
    d564:	7014      	strb	r4, [r2, #0]
    d566:	8809      	ldrh	r1, [r1, #0]
    d568:	81d9      	strh	r1, [r3, #14]
    d56a:	bd70      	pop	{r4, r5, r6, pc}
    d56c:	2401      	movs	r4, #1
    d56e:	e7f9      	b.n	d564 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000d570 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d574:	461d      	mov	r5, r3
    d576:	4616      	mov	r6, r2
    d578:	9f06      	ldr	r7, [sp, #24]
    d57a:	460b      	mov	r3, r1
    d57c:	4604      	mov	r4, r0
    d57e:	463a      	mov	r2, r7
    d580:	4629      	mov	r1, r5
    d582:	4630      	mov	r0, r6
    d584:	f000 f839 	bl	d5fa <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d588:	4283      	cmp	r3, r0
    d58a:	d201      	bcs.n	d590 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    d58c:	219e      	movs	r1, #158	; 0x9e
    d58e:	e012      	b.n	d5b6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d590:	07a0      	lsls	r0, r4, #30
    d592:	d001      	beq.n	d598 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    d594:	219f      	movs	r1, #159	; 0x9f
    d596:	e00e      	b.n	d5b6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d598:	2218      	movs	r2, #24
    d59a:	2100      	movs	r1, #0
    d59c:	4620      	mov	r0, r4
    d59e:	f003 f8e0 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d5a2:	19a8      	adds	r0, r5, r6
    d5a4:	1d40      	adds	r0, r0, #5
    d5a6:	4378      	muls	r0, r7
    d5a8:	b280      	uxth	r0, r0
    d5aa:	74e5      	strb	r5, [r4, #19]
    d5ac:	8060      	strh	r0, [r4, #2]
    d5ae:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d5b2:	d903      	bls.n	d5bc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    d5b4:	21a4      	movs	r1, #164	; 0xa4
    d5b6:	2014      	movs	r0, #20
    d5b8:	f7f3 fa54 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d5bc:	8026      	strh	r6, [r4, #0]
    d5be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d5c2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d5c2:	b570      	push	{r4, r5, r6, lr}
    d5c4:	460b      	mov	r3, r1
    d5c6:	4604      	mov	r4, r0
    d5c8:	f100 0118 	add.w	r1, r0, #24
    d5cc:	8902      	ldrh	r2, [r0, #8]
    d5ce:	8880      	ldrh	r0, [r0, #4]
    d5d0:	f3c2 050e 	ubfx	r5, r2, #0, #15
    d5d4:	440d      	add	r5, r1
    d5d6:	4282      	cmp	r2, r0
    d5d8:	d101      	bne.n	d5de <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    d5da:	2000      	movs	r0, #0
    d5dc:	bd70      	pop	{r4, r5, r6, pc}
    d5de:	b123      	cbz	r3, d5ea <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    d5e0:	7ce2      	ldrb	r2, [r4, #19]
    d5e2:	1ca9      	adds	r1, r5, #2
    d5e4:	4618      	mov	r0, r3
    d5e6:	f003 f842 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d5ea:	882d      	ldrh	r5, [r5, #0]
    d5ec:	f104 0108 	add.w	r1, r4, #8
    d5f0:	4620      	mov	r0, r4
    d5f2:	f7ff fe2f 	bl	d254 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d5f6:	4628      	mov	r0, r5
    d5f8:	bd70      	pop	{r4, r5, r6, pc}

0000d5fa <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d5fa:	4401      	add	r1, r0
    d5fc:	1d49      	adds	r1, r1, #5
    d5fe:	4351      	muls	r1, r2
    d600:	b28a      	uxth	r2, r1
    d602:	2100      	movs	r1, #0
    d604:	2845      	cmp	r0, #69	; 0x45
    d606:	d202      	bcs.n	d60e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    d608:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    d60c:	b281      	uxth	r1, r0
    d60e:	3218      	adds	r2, #24
    d610:	1850      	adds	r0, r2, r1
    d612:	b280      	uxth	r0, r0
    d614:	4770      	bx	lr

0000d616 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d616:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d61a:	4688      	mov	r8, r1
    d61c:	88c1      	ldrh	r1, [r0, #6]
    d61e:	4604      	mov	r4, r0
    d620:	8900      	ldrh	r0, [r0, #8]
    d622:	f3c1 060e 	ubfx	r6, r1, #0, #15
    d626:	f104 0518 	add.w	r5, r4, #24
    d62a:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d62e:	eb05 0906 	add.w	r9, r5, r6
    d632:	f7ff fe30 	bl	d296 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d636:	2200      	movs	r2, #0
    d638:	b998      	cbnz	r0, d662 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d63a:	8820      	ldrh	r0, [r4, #0]
    d63c:	2845      	cmp	r0, #69	; 0x45
    d63e:	d200      	bcs.n	d642 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d640:	2045      	movs	r0, #69	; 0x45
    d642:	42b7      	cmp	r7, r6
    d644:	d906      	bls.n	d654 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d646:	7ce3      	ldrb	r3, [r4, #19]
    d648:	1bb9      	subs	r1, r7, r6
    d64a:	1ac9      	subs	r1, r1, r3
    d64c:	1f49      	subs	r1, r1, #5
    d64e:	4281      	cmp	r1, r0
    d650:	da00      	bge.n	d654 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d652:	4608      	mov	r0, r1
    d654:	89a1      	ldrh	r1, [r4, #12]
    d656:	b111      	cbz	r1, d65e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d658:	f8b9 3000 	ldrh.w	r3, [r9]
    d65c:	1ac0      	subs	r0, r0, r3
    d65e:	4540      	cmp	r0, r8
    d660:	da03      	bge.n	d66a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d662:	8222      	strh	r2, [r4, #16]
    d664:	2000      	movs	r0, #0
    d666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d66a:	7ce0      	ldrb	r0, [r4, #19]
    d66c:	4429      	add	r1, r5
    d66e:	1d40      	adds	r0, r0, #5
    d670:	4430      	add	r0, r6
    d672:	4408      	add	r0, r1
    d674:	f8a4 8010 	strh.w	r8, [r4, #16]
    d678:	1ec0      	subs	r0, r0, #3
    d67a:	e7f4      	b.n	d666 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d67c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d67c:	b570      	push	{r4, r5, r6, lr}
    d67e:	2300      	movs	r3, #0
    d680:	f1a1 0208 	sub.w	r2, r1, #8
    d684:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    d688:	42a2      	cmp	r2, r4
    d68a:	d304      	bcc.n	d696 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d68c:	f240 11cd 	movw	r1, #461	; 0x1cd
    d690:	2015      	movs	r0, #21
    d692:	f7f3 f9e7 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d696:	6802      	ldr	r2, [r0, #0]
    d698:	b90a      	cbnz	r2, d69e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    d69a:	e01e      	b.n	d6da <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d69c:	4610      	mov	r0, r2
    d69e:	6802      	ldr	r2, [r0, #0]
    d6a0:	8893      	ldrh	r3, [r2, #4]
    d6a2:	428b      	cmp	r3, r1
    d6a4:	d002      	beq.n	d6ac <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    d6a6:	6813      	ldr	r3, [r2, #0]
    d6a8:	2b00      	cmp	r3, #0
    d6aa:	d1f7      	bne.n	d69c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    d6ac:	8894      	ldrh	r4, [r2, #4]
    d6ae:	4613      	mov	r3, r2
    d6b0:	428c      	cmp	r4, r1
    d6b2:	d101      	bne.n	d6b8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    d6b4:	6811      	ldr	r1, [r2, #0]
    d6b6:	e00d      	b.n	d6d4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    d6b8:	f101 0508 	add.w	r5, r1, #8
    d6bc:	b2ae      	uxth	r6, r5
    d6be:	2500      	movs	r5, #0
    d6c0:	42b4      	cmp	r4, r6
    d6c2:	d309      	bcc.n	d6d8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    d6c4:	1a64      	subs	r4, r4, r1
    d6c6:	4411      	add	r1, r2
    d6c8:	600d      	str	r5, [r1, #0]
    d6ca:	808c      	strh	r4, [r1, #4]
    d6cc:	6802      	ldr	r2, [r0, #0]
    d6ce:	6812      	ldr	r2, [r2, #0]
    d6d0:	6002      	str	r2, [r0, #0]
    d6d2:	600a      	str	r2, [r1, #0]
    d6d4:	6001      	str	r1, [r0, #0]
    d6d6:	e000      	b.n	d6da <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d6d8:	2300      	movs	r3, #0
    d6da:	4618      	mov	r0, r3
    d6dc:	bd70      	pop	{r4, r5, r6, pc}

0000d6de <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d6de:	b510      	push	{r4, lr}
    d6e0:	000c      	movs	r4, r1
    d6e2:	d004      	beq.n	d6ee <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    d6e4:	2c08      	cmp	r4, #8
    d6e6:	d207      	bcs.n	d6f8 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d6e8:	f240 1195 	movw	r1, #405	; 0x195
    d6ec:	e00a      	b.n	d704 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    d6ee:	b108      	cbz	r0, d6f4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    d6f0:	2100      	movs	r1, #0
    d6f2:	6001      	str	r1, [r0, #0]
    d6f4:	2000      	movs	r0, #0
    d6f6:	bd10      	pop	{r4, pc}
    d6f8:	b158      	cbz	r0, d712 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    d6fa:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    d6fe:	d304      	bcc.n	d70a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    d700:	f240 11a7 	movw	r1, #423	; 0x1a7
    d704:	2015      	movs	r0, #21
    d706:	f7f3 f9ad 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d70a:	b2a1      	uxth	r1, r4
    d70c:	6800      	ldr	r0, [r0, #0]
    d70e:	f000 f814 	bl	d73a <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d712:	1d20      	adds	r0, r4, #4
    d714:	bd10      	pop	{r4, pc}

0000d716 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d716:	2100      	movs	r1, #0
    d718:	6802      	ldr	r2, [r0, #0]
    d71a:	e003      	b.n	d724 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d71c:	8893      	ldrh	r3, [r2, #4]
    d71e:	6812      	ldr	r2, [r2, #0]
    d720:	4419      	add	r1, r3
    d722:	b289      	uxth	r1, r1
    d724:	2a00      	cmp	r2, #0
    d726:	d1f9      	bne.n	d71c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d728:	f000 b807 	b.w	d73a <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d72c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d72c:	2300      	movs	r3, #0
    d72e:	600b      	str	r3, [r1, #0]
    d730:	808a      	strh	r2, [r1, #4]
    d732:	6802      	ldr	r2, [r0, #0]
    d734:	600a      	str	r2, [r1, #0]
    d736:	6001      	str	r1, [r0, #0]
    d738:	4770      	bx	lr
    d73a:	2300      	movs	r3, #0
    d73c:	6043      	str	r3, [r0, #4]
    d73e:	1d02      	adds	r2, r0, #4
    d740:	8101      	strh	r1, [r0, #8]
    d742:	6002      	str	r2, [r0, #0]
    d744:	4770      	bx	lr

0000d746 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    d746:	b51c      	push	{r2, r3, r4, lr}
    d748:	4604      	mov	r4, r0
    d74a:	2000      	movs	r0, #0
    d74c:	9001      	str	r0, [sp, #4]
    d74e:	9000      	str	r0, [sp, #0]
    d750:	f88d 4006 	strb.w	r4, [sp, #6]
    d754:	e00a      	b.n	d76c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d756:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d75a:	4621      	mov	r1, r4
    d75c:	f7f3 fbe6 	bl	f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    d760:	b120      	cbz	r0, d76c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d762:	f44f 7129 	mov.w	r1, #676	; 0x2a4
    d766:	2017      	movs	r0, #23
    d768:	f7f3 f97c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d76c:	4668      	mov	r0, sp
    d76e:	f7f3 fb97 	bl	ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    d772:	2800      	cmp	r0, #0
    d774:	d0ef      	beq.n	d756 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    d776:	bd1c      	pop	{r2, r3, r4, pc}

0000d778 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    d778:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d77c:	3aff      	subs	r2, #255	; 0xff
    d77e:	d000      	beq.n	d782 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xa>
    d780:	b109      	cbz	r1, d786 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xe>
    d782:	2000      	movs	r0, #0
    d784:	4770      	bx	lr
    d786:	f7f3 bc23 	b.w	fd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa4>
    d78a:	b510      	push	{r4, lr}
    d78c:	4604      	mov	r4, r0
    d78e:	f7f3 fc6b 	bl	1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
    d792:	42a0      	cmp	r0, r4
    d794:	d901      	bls.n	d79a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x22>
    d796:	2001      	movs	r0, #1
    d798:	bd10      	pop	{r4, pc}
    d79a:	2000      	movs	r0, #0
    d79c:	bd10      	pop	{r4, pc}

0000d79e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d79e:	b570      	push	{r4, r5, r6, lr}
    d7a0:	460e      	mov	r6, r1
    d7a2:	461d      	mov	r5, r3
    d7a4:	4611      	mov	r1, r2
    d7a6:	f000 f813 	bl	d7d0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    d7aa:	4604      	mov	r4, r0
    d7ac:	4629      	mov	r1, r5
    d7ae:	4630      	mov	r0, r6
    d7b0:	f000 f804 	bl	d7bc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    d7b4:	4420      	add	r0, r4
    d7b6:	1d00      	adds	r0, r0, #4
    d7b8:	b280      	uxth	r0, r0
    d7ba:	bd70      	pop	{r4, r5, r6, pc}
    d7bc:	b510      	push	{r4, lr}
    d7be:	460a      	mov	r2, r1
    d7c0:	2109      	movs	r1, #9
    d7c2:	f7ff ff1a 	bl	d5fa <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d7c6:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d7ca:	1cc0      	adds	r0, r0, #3
    d7cc:	4008      	ands	r0, r1
    d7ce:	bd10      	pop	{r4, pc}
    d7d0:	b510      	push	{r4, lr}
    d7d2:	460a      	mov	r2, r1
    d7d4:	210a      	movs	r1, #10
    d7d6:	f7ff ff10 	bl	d5fa <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d7da:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d7de:	1cc0      	adds	r0, r0, #3
    d7e0:	4008      	ands	r0, r1
    d7e2:	bd10      	pop	{r4, pc}
    d7e4:	2800      	cmp	r0, #0
    d7e6:	db09      	blt.n	d7fc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5e>
    d7e8:	f000 021f 	and.w	r2, r0, #31
    d7ec:	2101      	movs	r1, #1
    d7ee:	4091      	lsls	r1, r2
    d7f0:	0940      	lsrs	r0, r0, #5
    d7f2:	0080      	lsls	r0, r0, #2
    d7f4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d7f8:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d7fc:	4770      	bx	lr
    d7fe:	2800      	cmp	r0, #0
    d800:	db0d      	blt.n	d81e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    d802:	f000 021f 	and.w	r2, r0, #31
    d806:	2101      	movs	r1, #1
    d808:	4091      	lsls	r1, r2
    d80a:	0940      	lsrs	r0, r0, #5
    d80c:	0080      	lsls	r0, r0, #2
    d80e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d812:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d816:	f3bf 8f4f 	dsb	sy
    d81a:	f3bf 8f6f 	isb	sy
    d81e:	4770      	bx	lr
    d820:	b510      	push	{r4, lr}
    d822:	200e      	movs	r0, #14
    d824:	f7ff ffeb 	bl	d7fe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x60>
    d828:	200e      	movs	r0, #14
    d82a:	f7ff ffdb 	bl	d7e4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    d82e:	200f      	movs	r0, #15
    d830:	f7ff ffe5 	bl	d7fe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x60>
    d834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d838:	200f      	movs	r0, #15
    d83a:	f7ff bfd3 	b.w	d7e4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    d83e:	2800      	cmp	r0, #0
    d840:	db09      	blt.n	d856 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb8>
    d842:	f000 021f 	and.w	r2, r0, #31
    d846:	2101      	movs	r1, #1
    d848:	4091      	lsls	r1, r2
    d84a:	0940      	lsrs	r0, r0, #5
    d84c:	0080      	lsls	r0, r0, #2
    d84e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d852:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d856:	4770      	bx	lr
    d858:	5840      	ldr	r0, [r0, r1]
    d85a:	2800      	cmp	r0, #0
    d85c:	d000      	beq.n	d860 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc2>
    d85e:	2001      	movs	r0, #1
    d860:	4770      	bx	lr

0000d862 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    d862:	b510      	push	{r4, lr}
    d864:	4604      	mov	r4, r0
    d866:	4620      	mov	r0, r4
    d868:	f7f3 fd70 	bl	134c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>
    d86c:	2811      	cmp	r0, #17
    d86e:	d0fa      	beq.n	d866 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    d870:	bd10      	pop	{r4, pc}

0000d872 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    d872:	b510      	push	{r4, lr}
    d874:	f7ff fff5 	bl	d862 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    d878:	2800      	cmp	r0, #0
    d87a:	d003      	beq.n	d884 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    d87c:	21a0      	movs	r1, #160	; 0xa0
    d87e:	201d      	movs	r0, #29
    d880:	f7f3 f8f0 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d884:	bd10      	pop	{r4, pc}

0000d886 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    d886:	f7f3 bebf 	b.w	1608 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000d88a <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    d88a:	f7f3 bead 	b.w	15e8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000d88e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    d88e:	b510      	push	{r4, lr}
    d890:	4050      	eors	r0, r2
    d892:	780a      	ldrb	r2, [r1, #0]
    d894:	781c      	ldrb	r4, [r3, #0]
    d896:	4062      	eors	r2, r4
    d898:	4410      	add	r0, r2
    d89a:	784a      	ldrb	r2, [r1, #1]
    d89c:	785c      	ldrb	r4, [r3, #1]
    d89e:	4062      	eors	r2, r4
    d8a0:	4410      	add	r0, r2
    d8a2:	788a      	ldrb	r2, [r1, #2]
    d8a4:	789c      	ldrb	r4, [r3, #2]
    d8a6:	4062      	eors	r2, r4
    d8a8:	4410      	add	r0, r2
    d8aa:	78ca      	ldrb	r2, [r1, #3]
    d8ac:	78dc      	ldrb	r4, [r3, #3]
    d8ae:	4062      	eors	r2, r4
    d8b0:	4410      	add	r0, r2
    d8b2:	790a      	ldrb	r2, [r1, #4]
    d8b4:	791c      	ldrb	r4, [r3, #4]
    d8b6:	7949      	ldrb	r1, [r1, #5]
    d8b8:	4062      	eors	r2, r4
    d8ba:	4410      	add	r0, r2
    d8bc:	795a      	ldrb	r2, [r3, #5]
    d8be:	4051      	eors	r1, r2
    d8c0:	42c1      	cmn	r1, r0
    d8c2:	d101      	bne.n	d8c8 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    d8c4:	2001      	movs	r0, #1
    d8c6:	bd10      	pop	{r4, pc}
    d8c8:	2000      	movs	r0, #0
    d8ca:	bd10      	pop	{r4, pc}

0000d8cc <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    d8cc:	b510      	push	{r4, lr}
    d8ce:	2900      	cmp	r1, #0
    d8d0:	4604      	mov	r4, r0
    d8d2:	f04f 0106 	mov.w	r1, #6
    d8d6:	d002      	beq.n	d8de <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    d8d8:	f7f3 f956 	bl	b88 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d8dc:	e001      	b.n	d8e2 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    d8de:	f7f3 f961 	bl	ba4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d8e2:	7960      	ldrb	r0, [r4, #5]
    d8e4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d8e8:	7160      	strb	r0, [r4, #5]
    d8ea:	bd10      	pop	{r4, pc}

0000d8ec <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    d8ec:	4770      	bx	lr

0000d8ee <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    d8ee:	b530      	push	{r4, r5, lr}
    d8f0:	460c      	mov	r4, r1
    d8f2:	4605      	mov	r5, r0
    d8f4:	b08d      	sub	sp, #52	; 0x34
    d8f6:	f04f 0103 	mov.w	r1, #3
    d8fa:	f104 0003 	add.w	r0, r4, #3
    d8fe:	b112      	cbz	r2, d906 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    d900:	f7f3 f942 	bl	b88 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d904:	e001      	b.n	d90a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    d906:	f7f3 f94d 	bl	ba4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d90a:	7960      	ldrb	r0, [r4, #5]
    d90c:	220d      	movs	r2, #13
    d90e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d912:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    d916:	7160      	strb	r0, [r4, #5]
    d918:	2100      	movs	r1, #0
    d91a:	a804      	add	r0, sp, #16
    d91c:	f002 ff21 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d920:	78e0      	ldrb	r0, [r4, #3]
    d922:	f88d 001f 	strb.w	r0, [sp, #31]
    d926:	7920      	ldrb	r0, [r4, #4]
    d928:	f88d 001e 	strb.w	r0, [sp, #30]
    d92c:	7960      	ldrb	r0, [r4, #5]
    d92e:	f88d 001d 	strb.w	r0, [sp, #29]
    d932:	2210      	movs	r2, #16
    d934:	4629      	mov	r1, r5
    d936:	4668      	mov	r0, sp
    d938:	f002 fe99 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d93c:	4668      	mov	r0, sp
    d93e:	f7ff ff98 	bl	d872 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d942:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    d946:	7020      	strb	r0, [r4, #0]
    d948:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    d94c:	7060      	strb	r0, [r4, #1]
    d94e:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    d952:	70a0      	strb	r0, [r4, #2]
    d954:	b00d      	add	sp, #52	; 0x34
    d956:	bd30      	pop	{r4, r5, pc}

0000d958 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>:
    d958:	b530      	push	{r4, r5, lr}
    d95a:	b08d      	sub	sp, #52	; 0x34
    d95c:	460c      	mov	r4, r1
    d95e:	4605      	mov	r5, r0
    d960:	220d      	movs	r2, #13
    d962:	2100      	movs	r1, #0
    d964:	a804      	add	r0, sp, #16
    d966:	f002 fefc 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d96a:	78e0      	ldrb	r0, [r4, #3]
    d96c:	f88d 001f 	strb.w	r0, [sp, #31]
    d970:	7920      	ldrb	r0, [r4, #4]
    d972:	f88d 001e 	strb.w	r0, [sp, #30]
    d976:	7960      	ldrb	r0, [r4, #5]
    d978:	f88d 001d 	strb.w	r0, [sp, #29]
    d97c:	2210      	movs	r2, #16
    d97e:	4629      	mov	r1, r5
    d980:	4668      	mov	r0, sp
    d982:	f002 fe74 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d986:	4668      	mov	r0, sp
    d988:	f7ff ff73 	bl	d872 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d98c:	7820      	ldrb	r0, [r4, #0]
    d98e:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    d992:	4288      	cmp	r0, r1
    d994:	d10c      	bne.n	d9b0 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    d996:	7860      	ldrb	r0, [r4, #1]
    d998:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
    d99c:	4288      	cmp	r0, r1
    d99e:	d107      	bne.n	d9b0 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    d9a0:	78a0      	ldrb	r0, [r4, #2]
    d9a2:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
    d9a6:	4288      	cmp	r0, r1
    d9a8:	d102      	bne.n	d9b0 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    d9aa:	2001      	movs	r0, #1
    d9ac:	b00d      	add	sp, #52	; 0x34
    d9ae:	bd30      	pop	{r4, r5, pc}
    d9b0:	2000      	movs	r0, #0
    d9b2:	e7fb      	b.n	d9ac <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x54>

0000d9b4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    d9b4:	f7f4 b98e 	b.w	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    d9b8:	b510      	push	{r4, lr}
    d9ba:	2801      	cmp	r0, #1
    d9bc:	d008      	beq.n	d9d0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x1c>
    d9be:	2802      	cmp	r0, #2
    d9c0:	d004      	beq.n	d9cc <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    d9c2:	f240 4122 	movw	r1, #1058	; 0x422
    d9c6:	2006      	movs	r0, #6
    d9c8:	f7f3 f84c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d9cc:	2001      	movs	r0, #1
    d9ce:	bd10      	pop	{r4, pc}
    d9d0:	2000      	movs	r0, #0
    d9d2:	bd10      	pop	{r4, pc}
    d9d4:	2900      	cmp	r1, #0
    d9d6:	d004      	beq.n	d9e2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2e>
    d9d8:	2801      	cmp	r0, #1
    d9da:	d003      	beq.n	d9e4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    d9dc:	2901      	cmp	r1, #1
    d9de:	d001      	beq.n	d9e4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    d9e0:	2002      	movs	r0, #2
    d9e2:	4770      	bx	lr
    d9e4:	2001      	movs	r0, #1
    d9e6:	4770      	bx	lr
    d9e8:	f7ff bd9f 	b.w	d52a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000d9ec <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    d9ec:	2101      	movs	r1, #1
    d9ee:	f7f4 bcff 	b.w	23f0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000d9f2 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    d9f2:	b510      	push	{r4, lr}
    d9f4:	f002 fc16 	bl	10224 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    d9f8:	b118      	cbz	r0, da02 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    d9fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d9fe:	f7f9 bf97 	b.w	7930 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    da02:	20ff      	movs	r0, #255	; 0xff
    da04:	bd10      	pop	{r4, pc}

0000da06 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    da06:	b510      	push	{r4, lr}
    da08:	f7f4 fd3a 	bl	2480 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    da0c:	2810      	cmp	r0, #16
    da0e:	d003      	beq.n	da18 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    da10:	f7f4 fd06 	bl	2420 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    da14:	2810      	cmp	r0, #16
    da16:	d100      	bne.n	da1a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    da18:	2008      	movs	r0, #8
    da1a:	bd10      	pop	{r4, pc}

0000da1c <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    da1c:	b510      	push	{r4, lr}
    da1e:	f7f4 fd2f 	bl	2480 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    da22:	2810      	cmp	r0, #16
    da24:	d003      	beq.n	da2e <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    da26:	f7f4 fd89 	bl	253c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    da2a:	2001      	movs	r0, #1
    da2c:	bd10      	pop	{r4, pc}
    da2e:	2000      	movs	r0, #0
    da30:	bd10      	pop	{r4, pc}

0000da32 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    da32:	b570      	push	{r4, r5, r6, lr}
    da34:	460e      	mov	r6, r1
    da36:	b08c      	sub	sp, #48	; 0x30
    da38:	4614      	mov	r4, r2
    da3a:	4601      	mov	r1, r0
    da3c:	461d      	mov	r5, r3
    da3e:	2210      	movs	r2, #16
    da40:	4668      	mov	r0, sp
    da42:	f000 f997 	bl	dd74 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    da46:	2210      	movs	r2, #16
    da48:	4631      	mov	r1, r6
    da4a:	a804      	add	r0, sp, #16
    da4c:	f000 f992 	bl	dd74 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    da50:	4668      	mov	r0, sp
    da52:	f7ff ff0e 	bl	d872 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    da56:	a908      	add	r1, sp, #32
    da58:	f04f 0210 	mov.w	r2, #16
    da5c:	4628      	mov	r0, r5
    da5e:	b11c      	cbz	r4, da68 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    da60:	f000 f988 	bl	dd74 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    da64:	b00c      	add	sp, #48	; 0x30
    da66:	bd70      	pop	{r4, r5, r6, pc}
    da68:	f002 fe01 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    da6c:	e7fa      	b.n	da64 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>
    da6e:	0781      	lsls	r1, r0, #30
    da70:	d501      	bpl.n	da76 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x44>
    da72:	2002      	movs	r0, #2
    da74:	4770      	bx	lr
    da76:	07c0      	lsls	r0, r0, #31
    da78:	d0fc      	beq.n	da74 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x42>
    da7a:	2001      	movs	r0, #1
    da7c:	4770      	bx	lr

0000da7e <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>:
    da7e:	b570      	push	{r4, r5, r6, lr}
    da80:	4606      	mov	r6, r0
    da82:	7900      	ldrb	r0, [r0, #4]
    da84:	0940      	lsrs	r0, r0, #5
    da86:	d10e      	bne.n	daa6 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x28>
    da88:	2500      	movs	r5, #0
    da8a:	462c      	mov	r4, r5
    da8c:	5d30      	ldrb	r0, [r6, r4]
    da8e:	f000 fd31 	bl	e4f4 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    da92:	1c64      	adds	r4, r4, #1
    da94:	4428      	add	r0, r5
    da96:	b2e4      	uxtb	r4, r4
    da98:	b2c5      	uxtb	r5, r0
    da9a:	2c05      	cmp	r4, #5
    da9c:	d3f6      	bcc.n	da8c <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0xe>
    da9e:	2d01      	cmp	r5, #1
    daa0:	d901      	bls.n	daa6 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x28>
    daa2:	2001      	movs	r0, #1
    daa4:	bd70      	pop	{r4, r5, r6, pc}
    daa6:	2000      	movs	r0, #0
    daa8:	bd70      	pop	{r4, r5, r6, pc}

0000daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    daaa:	b510      	push	{r4, lr}
    daac:	460c      	mov	r4, r1
    daae:	2100      	movs	r1, #0
    dab0:	f7ff fe62 	bl	d778 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    dab4:	6060      	str	r0, [r4, #4]
    dab6:	b110      	cbz	r0, dabe <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x14>
    dab8:	2000      	movs	r0, #0
    daba:	7020      	strb	r0, [r4, #0]
    dabc:	bd10      	pop	{r4, pc}
    dabe:	2002      	movs	r0, #2
    dac0:	bd10      	pop	{r4, pc}

0000dac2 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    dac2:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dac6:	4348      	muls	r0, r1
    dac8:	4770      	bx	lr

0000daca <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    daca:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dace:	fbb0 f0f1 	udiv	r0, r0, r1
    dad2:	b280      	uxth	r0, r0
    dad4:	4770      	bx	lr

0000dad6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    dad6:	b570      	push	{r4, r5, r6, lr}
    dad8:	4604      	mov	r4, r0
    dada:	4290      	cmp	r0, r2
    dadc:	d20b      	bcs.n	daf6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    dade:	1b10      	subs	r0, r2, r4
    dae0:	2865      	cmp	r0, #101	; 0x65
    dae2:	d200      	bcs.n	dae6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    dae4:	2065      	movs	r0, #101	; 0x65
    dae6:	1825      	adds	r5, r4, r0
    dae8:	428d      	cmp	r5, r1
    daea:	d803      	bhi.n	daf4 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    daec:	2103      	movs	r1, #3
    daee:	f7fc f959 	bl	9da4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    daf2:	b108      	cbz	r0, daf8 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    daf4:	4620      	mov	r0, r4
    daf6:	bd70      	pop	{r4, r5, r6, pc}
    daf8:	4628      	mov	r0, r5
    dafa:	bd70      	pop	{r4, r5, r6, pc}

0000dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    dafc:	b510      	push	{r4, lr}
    dafe:	f1a2 0310 	sub.w	r3, r2, #16
    db02:	290d      	cmp	r1, #13
    db04:	d258      	bcs.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db06:	e8df f001 	tbb	[pc, r1]
    db0a:	0907      	.short	0x0907
    db0c:	1d1a150e 	.word	0x1d1a150e
    db10:	5937342c 	.word	0x5937342c
    db14:	0053423b 	.word	0x0053423b
    db18:	b38a      	cbz	r2, db7e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x82>
    db1a:	e04d      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db1c:	2a06      	cmp	r2, #6
    db1e:	d049      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db20:	2a07      	cmp	r2, #7
    db22:	d047      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db24:	e048      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db26:	2a0b      	cmp	r2, #11
    db28:	d044      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db2a:	2a0c      	cmp	r2, #12
    db2c:	d042      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db2e:	2a0a      	cmp	r2, #10
    db30:	d040      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db32:	e041      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db34:	2a0d      	cmp	r2, #13
    db36:	d03d      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db38:	2a0e      	cmp	r2, #14
    db3a:	d03b      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db3c:	e03c      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db3e:	2b0c      	cmp	r3, #12
    db40:	d938      	bls.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db42:	e039      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db44:	2a13      	cmp	r2, #19
    db46:	d035      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db48:	2a12      	cmp	r2, #18
    db4a:	d033      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db4c:	f890 005e 	ldrb.w	r0, [r0, #94]	; 0x5e
    db50:	b120      	cbz	r0, db5c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x60>
    db52:	2a13      	cmp	r2, #19
    db54:	d330      	bcc.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db56:	2a1b      	cmp	r2, #27
    db58:	d92c      	bls.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db5a:	e02d      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db5c:	2a17      	cmp	r2, #23
    db5e:	d2fa      	bcs.n	db56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x5a>
    db60:	e02a      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db62:	2b03      	cmp	r3, #3
    db64:	d926      	bls.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db66:	f890 005e 	ldrb.w	r0, [r0, #94]	; 0x5e
    db6a:	b300      	cbz	r0, dbae <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb2>
    db6c:	2a1c      	cmp	r2, #28
    db6e:	d921      	bls.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db70:	e022      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db72:	2a04      	cmp	r2, #4
    db74:	d01e      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db76:	e01f      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db78:	2a01      	cmp	r2, #1
    db7a:	d01b      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db7c:	e01c      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db7e:	e019      	b.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db80:	2a1d      	cmp	r2, #29
    db82:	d017      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db84:	2a1e      	cmp	r2, #30
    db86:	d015      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db88:	2a1f      	cmp	r2, #31
    db8a:	d013      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db8c:	e014      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db8e:	2a20      	cmp	r2, #32
    db90:	d010      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db92:	2a21      	cmp	r2, #33	; 0x21
    db94:	d00e      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db96:	2a22      	cmp	r2, #34	; 0x22
    db98:	d00c      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db9a:	2a23      	cmp	r2, #35	; 0x23
    db9c:	d00a      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db9e:	2a24      	cmp	r2, #36	; 0x24
    dba0:	d008      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dba2:	2a25      	cmp	r2, #37	; 0x25
    dba4:	d006      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dba6:	2a26      	cmp	r2, #38	; 0x26
    dba8:	d004      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dbaa:	2a2e      	cmp	r2, #46	; 0x2e
    dbac:	d002      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dbae:	e003      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dbb0:	2a28      	cmp	r2, #40	; 0x28
    dbb2:	d101      	bne.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dbb4:	2001      	movs	r0, #1
    dbb6:	bd10      	pop	{r4, pc}
    dbb8:	2000      	movs	r0, #0
    dbba:	bd10      	pop	{r4, pc}
    dbbc:	2a05      	cmp	r2, #5
    dbbe:	d1fb      	bne.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dbc0:	e7f8      	b.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>

0000dbc2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    dbc2:	280b      	cmp	r0, #11
    dbc4:	d019      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbc6:	280c      	cmp	r0, #12
    dbc8:	d017      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbca:	280a      	cmp	r0, #10
    dbcc:	d015      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbce:	280d      	cmp	r0, #13
    dbd0:	d013      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbd2:	280e      	cmp	r0, #14
    dbd4:	d011      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbd6:	2820      	cmp	r0, #32
    dbd8:	d00f      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbda:	2821      	cmp	r0, #33	; 0x21
    dbdc:	d00d      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbde:	2822      	cmp	r0, #34	; 0x22
    dbe0:	d00b      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbe2:	2823      	cmp	r0, #35	; 0x23
    dbe4:	d009      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbe6:	2824      	cmp	r0, #36	; 0x24
    dbe8:	d007      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbea:	2825      	cmp	r0, #37	; 0x25
    dbec:	d005      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbee:	2826      	cmp	r0, #38	; 0x26
    dbf0:	d003      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbf2:	282e      	cmp	r0, #46	; 0x2e
    dbf4:	d001      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbf6:	2000      	movs	r0, #0
    dbf8:	4770      	bx	lr
    dbfa:	2001      	movs	r0, #1
    dbfc:	4770      	bx	lr

0000dbfe <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    dbfe:	f011 0f0c 	tst.w	r1, #12
    dc02:	d018      	beq.n	dc36 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    dc04:	074a      	lsls	r2, r1, #29
    dc06:	f44f 7116 	mov.w	r1, #600	; 0x258
    dc0a:	2a00      	cmp	r2, #0
    dc0c:	da02      	bge.n	dc14 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    dc0e:	f04f 0210 	mov.w	r2, #16
    dc12:	e001      	b.n	dc18 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    dc14:	f04f 0240 	mov.w	r2, #64	; 0x40
    dc18:	da01      	bge.n	dc1e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    dc1a:	f04f 0196 	mov.w	r1, #150	; 0x96
    dc1e:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    dc22:	eba0 0301 	sub.w	r3, r0, r1
    dc26:	4288      	cmp	r0, r1
    dc28:	d903      	bls.n	dc32 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    dc2a:	fb93 f0f2 	sdiv	r0, r3, r2
    dc2e:	b280      	uxth	r0, r0
    dc30:	4770      	bx	lr
    dc32:	2000      	movs	r0, #0
    dc34:	4770      	bx	lr
    dc36:	2902      	cmp	r1, #2
    dc38:	d008      	beq.n	dc4c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    dc3a:	2870      	cmp	r0, #112	; 0x70
    dc3c:	d9f9      	bls.n	dc32 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    dc3e:	3870      	subs	r0, #112	; 0x70
    dc40:	17c1      	asrs	r1, r0, #31
    dc42:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    dc46:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    dc4a:	4770      	bx	lr
    dc4c:	283c      	cmp	r0, #60	; 0x3c
    dc4e:	d9f0      	bls.n	dc32 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    dc50:	383c      	subs	r0, #60	; 0x3c
    dc52:	17c1      	asrs	r1, r0, #31
    dc54:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    dc58:	f3c0 008f 	ubfx	r0, r0, #2, #16
    dc5c:	4770      	bx	lr

0000dc5e <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    dc5e:	6809      	ldr	r1, [r1, #0]
    dc60:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    dc64:	4770      	bx	lr

0000dc66 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>:
    dc66:	2801      	cmp	r0, #1
    dc68:	d002      	beq.n	dc70 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    dc6a:	2802      	cmp	r0, #2
    dc6c:	d000      	beq.n	dc70 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    dc6e:	2000      	movs	r0, #0
    dc70:	4770      	bx	lr

0000dc72 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>:
    dc72:	b530      	push	{r4, r5, lr}
    dc74:	242a      	movs	r4, #42	; 0x2a
    dc76:	2523      	movs	r5, #35	; 0x23
    dc78:	2a16      	cmp	r2, #22
    dc7a:	d109      	bne.n	dc90 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    dc7c:	280b      	cmp	r0, #11
    dc7e:	d00b      	beq.n	dc98 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    dc80:	280c      	cmp	r0, #12
    dc82:	d009      	beq.n	dc98 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    dc84:	280d      	cmp	r0, #13
    dc86:	d007      	beq.n	dc98 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    dc88:	280e      	cmp	r0, #14
    dc8a:	d005      	beq.n	dc98 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    dc8c:	2820      	cmp	r0, #32
    dc8e:	d005      	beq.n	dc9c <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2a>
    dc90:	b171      	cbz	r1, dcb0 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x3e>
    dc92:	2a16      	cmp	r2, #22
    dc94:	d10c      	bne.n	dcb0 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x3e>
    dc96:	e004      	b.n	dca2 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x30>
    dc98:	701c      	strb	r4, [r3, #0]
    dc9a:	e000      	b.n	dc9e <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2c>
    dc9c:	701d      	strb	r5, [r3, #0]
    dc9e:	2001      	movs	r0, #1
    dca0:	bd30      	pop	{r4, r5, pc}
    dca2:	7808      	ldrb	r0, [r1, #0]
    dca4:	2801      	cmp	r0, #1
    dca6:	d0f7      	beq.n	dc98 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    dca8:	2800      	cmp	r0, #0
    dcaa:	d0f5      	beq.n	dc98 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    dcac:	2816      	cmp	r0, #22
    dcae:	d0f5      	beq.n	dc9c <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2a>
    dcb0:	2000      	movs	r0, #0
    dcb2:	bd30      	pop	{r4, r5, pc}

0000dcb4 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>:
    dcb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dcb6:	b2cf      	uxtb	r7, r1
    dcb8:	4606      	mov	r6, r0
    dcba:	f3c1 2407 	ubfx	r4, r1, #8, #8
    dcbe:	4621      	mov	r1, r4
    dcc0:	4638      	mov	r0, r7
    dcc2:	f000 f88f 	bl	dde4 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0xc>
    dcc6:	b2f5      	uxtb	r5, r6
    dcc8:	f3c6 2607 	ubfx	r6, r6, #8, #8
    dccc:	b920      	cbnz	r0, dcd8 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x24>
    dcce:	4631      	mov	r1, r6
    dcd0:	4628      	mov	r0, r5
    dcd2:	f000 f887 	bl	dde4 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0xc>
    dcd6:	b140      	cbz	r0, dcea <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x36>
    dcd8:	4027      	ands	r7, r4
    dcda:	4035      	ands	r5, r6
    dcdc:	403d      	ands	r5, r7
    dcde:	4644      	mov	r4, r8
    dce0:	f365 0407 	bfi	r4, r5, #0, #8
    dce4:	f365 240f 	bfi	r4, r5, #8, #8
    dce8:	e006      	b.n	dcf8 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x44>
    dcea:	4025      	ands	r5, r4
    dcec:	4644      	mov	r4, r8
    dcee:	f365 0407 	bfi	r4, r5, #0, #8
    dcf2:	403e      	ands	r6, r7
    dcf4:	f366 240f 	bfi	r4, r6, #8, #8
    dcf8:	b2e0      	uxtb	r0, r4
    dcfa:	f7ff feb8 	bl	da6e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    dcfe:	f88d 0000 	strb.w	r0, [sp]
    dd02:	f3c4 2007 	ubfx	r0, r4, #8, #8
    dd06:	f7ff feb2 	bl	da6e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    dd0a:	f88d 0001 	strb.w	r0, [sp, #1]
    dd0e:	f8bd 0000 	ldrh.w	r0, [sp]
    dd12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000dd14 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    dd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd18:	4607      	mov	r7, r0
    dd1a:	460e      	mov	r6, r1
    dd1c:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    dd20:	f7fc fc6c 	bl	a5fc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    dd24:	b198      	cbz	r0, dd4e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    dd26:	b31e      	cbz	r6, dd70 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    dd28:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    dd2c:	1b40      	subs	r0, r0, r5
    dd2e:	2300      	movs	r3, #0
    dd30:	eb61 0104 	sbc.w	r1, r1, r4
    dd34:	461a      	mov	r2, r3
    dd36:	1a1b      	subs	r3, r3, r0
    dd38:	418a      	sbcs	r2, r1
    dd3a:	da19      	bge.n	dd70 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    dd3c:	1c42      	adds	r2, r0, #1
    dd3e:	f171 0100 	sbcs.w	r1, r1, #0
    dd42:	db07      	blt.n	dd54 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    dd44:	f240 211b 	movw	r1, #539	; 0x21b
    dd48:	2029      	movs	r0, #41	; 0x29
    dd4a:	f7f2 fe8b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd4e:	f240 2111 	movw	r1, #529	; 0x211
    dd52:	e7f9      	b.n	dd48 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    dd54:	4430      	add	r0, r6
    dd56:	1e40      	subs	r0, r0, #1
    dd58:	fbb0 f1f6 	udiv	r1, r0, r6
    dd5c:	fb01 f006 	mul.w	r0, r1, r6
    dd60:	1828      	adds	r0, r5, r0
    dd62:	f144 0400 	adc.w	r4, r4, #0
    dd66:	e9c7 0404 	strd	r0, r4, [r7, #16]
    dd6a:	4608      	mov	r0, r1
    dd6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dd70:	2000      	movs	r0, #0
    dd72:	e7fb      	b.n	dd6c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000dd74 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    dd74:	b530      	push	{r4, r5, lr}
    dd76:	4613      	mov	r3, r2
    dd78:	e006      	b.n	dd88 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    dd7a:	18cc      	adds	r4, r1, r3
    dd7c:	1ad5      	subs	r5, r2, r3
    dd7e:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    dd82:	1e5b      	subs	r3, r3, #1
    dd84:	5544      	strb	r4, [r0, r5]
    dd86:	b2db      	uxtb	r3, r3
    dd88:	2b00      	cmp	r3, #0
    dd8a:	d1f6      	bne.n	dd7a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    dd8c:	bd30      	pop	{r4, r5, pc}

0000dd8e <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    dd8e:	2300      	movs	r3, #0
    dd90:	6403      	str	r3, [r0, #64]	; 0x40
    dd92:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    dd96:	f240 2371 	movw	r3, #625	; 0x271
    dd9a:	435a      	muls	r2, r3
    dd9c:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    dda0:	1e52      	subs	r2, r2, #1
    dda2:	fbb2 f1f1 	udiv	r1, r2, r1
    dda6:	6441      	str	r1, [r0, #68]	; 0x44
    dda8:	4770      	bx	lr

0000ddaa <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>:
    ddaa:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ddae:	fbb0 f0f1 	udiv	r0, r0, r1
    ddb2:	b280      	uxth	r0, r0
    ddb4:	4770      	bx	lr

0000ddb6 <sym_MCZ5ZKWAPWEBLVDHDY2XS3XBNNW7L43ADSWQSTI>:
    ddb6:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ddba:	fbb0 f2f1 	udiv	r2, r0, r1
    ddbe:	fb01 0112 	mls	r1, r1, r2, r0
    ddc2:	1a40      	subs	r0, r0, r1
    ddc4:	4770      	bx	lr

0000ddc6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    ddc6:	f240 2171 	movw	r1, #625	; 0x271
    ddca:	fb10 f001 	smulbb	r0, r0, r1
    ddce:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ddd2:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    ddd6:	4770      	bx	lr

0000ddd8 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>:
    ddd8:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dddc:	fbb0 f0f1 	udiv	r0, r0, r1
    dde0:	b2c0      	uxtb	r0, r0
    dde2:	4770      	bx	lr
    dde4:	2801      	cmp	r0, #1
    dde6:	d002      	beq.n	ddee <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x16>
    dde8:	2802      	cmp	r0, #2
    ddea:	d003      	beq.n	ddf4 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x1c>
    ddec:	e004      	b.n	ddf8 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x20>
    ddee:	2901      	cmp	r1, #1
    ddf0:	d004      	beq.n	ddfc <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x24>
    ddf2:	e001      	b.n	ddf8 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x20>
    ddf4:	2902      	cmp	r1, #2
    ddf6:	d001      	beq.n	ddfc <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x24>
    ddf8:	2000      	movs	r0, #0
    ddfa:	4770      	bx	lr
    ddfc:	2001      	movs	r0, #1
    ddfe:	4770      	bx	lr
    de00:	4401      	add	r1, r0
    de02:	2914      	cmp	r1, #20
    de04:	dd01      	ble.n	de0a <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x32>
    de06:	2014      	movs	r0, #20
    de08:	4770      	bx	lr
    de0a:	f06f 007e 	mvn.w	r0, #126	; 0x7e
    de0e:	4281      	cmp	r1, r0
    de10:	dbfa      	blt.n	de08 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x30>
    de12:	b248      	sxtb	r0, r1
    de14:	4770      	bx	lr

0000de16 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    de16:	b570      	push	{r4, r5, r6, lr}
    de18:	4605      	mov	r5, r0
    de1a:	ea81 4011 	eor.w	r0, r1, r1, lsr #16
    de1e:	b286      	uxth	r6, r0
    de20:	4610      	mov	r0, r2
    de22:	7aec      	ldrb	r4, [r5, #11]
    de24:	4631      	mov	r1, r6
    de26:	f000 f863 	bl	def0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x52>
    de2a:	4070      	eors	r0, r6
    de2c:	2125      	movs	r1, #37	; 0x25
    de2e:	fbb0 f2f1 	udiv	r2, r0, r1
    de32:	fb01 0112 	mls	r1, r1, r2, r0
    de36:	eb05 02d1 	add.w	r2, r5, r1, lsr #3
    de3a:	f001 0307 	and.w	r3, r1, #7
    de3e:	7852      	ldrb	r2, [r2, #1]
    de40:	2601      	movs	r6, #1
    de42:	409e      	lsls	r6, r3
    de44:	4232      	tst	r2, r6
    de46:	d001      	beq.n	de4c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x36>
    de48:	4608      	mov	r0, r1
    de4a:	bd70      	pop	{r4, r5, r6, pc}
    de4c:	4344      	muls	r4, r0
    de4e:	0c21      	lsrs	r1, r4, #16
    de50:	4628      	mov	r0, r5
    de52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    de56:	f7f4 bc91 	b.w	277c <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xac>

0000de5a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    de5a:	b510      	push	{r4, lr}
    de5c:	4604      	mov	r4, r0
    de5e:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    de62:	b108      	cbz	r0, de68 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    de64:	2825      	cmp	r0, #37	; 0x25
    de66:	d901      	bls.n	de6c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    de68:	2012      	movs	r0, #18
    de6a:	bd10      	pop	{r4, pc}
    de6c:	b132      	cbz	r2, de7c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>
    de6e:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
    de72:	b128      	cbz	r0, de80 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x26>
    de74:	2801      	cmp	r0, #1
    de76:	d009      	beq.n	de8c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x32>
    de78:	201f      	movs	r0, #31
    de7a:	bd10      	pop	{r4, pc}
    de7c:	2000      	movs	r0, #0
    de7e:	bd10      	pop	{r4, pc}
    de80:	4620      	mov	r0, r4
    de82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    de86:	4611      	mov	r1, r2
    de88:	f7f4 bc30 	b.w	26ec <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x1c>
    de8c:	8aa2      	ldrh	r2, [r4, #20]
    de8e:	6949      	ldr	r1, [r1, #20]
    de90:	f104 0025 	add.w	r0, r4, #37	; 0x25
    de94:	f7ff ffbf 	bl	de16 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    de98:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    de9c:	e7ee      	b.n	de7c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>

0000de9e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    de9e:	b570      	push	{r4, r5, r6, lr}
    dea0:	4604      	mov	r4, r0
    dea2:	1c40      	adds	r0, r0, #1
    dea4:	4288      	cmp	r0, r1
    dea6:	d004      	beq.n	deb2 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    dea8:	6808      	ldr	r0, [r1, #0]
    deaa:	f8c4 0001 	str.w	r0, [r4, #1]
    deae:	7908      	ldrb	r0, [r1, #4]
    deb0:	7160      	strb	r0, [r4, #5]
    deb2:	7960      	ldrb	r0, [r4, #5]
    deb4:	f000 001f 	and.w	r0, r0, #31
    deb8:	7160      	strb	r0, [r4, #5]
    deba:	2000      	movs	r0, #0
    debc:	72e0      	strb	r0, [r4, #11]
    debe:	4605      	mov	r5, r0
    dec0:	1966      	adds	r6, r4, r5
    dec2:	7870      	ldrb	r0, [r6, #1]
    dec4:	f000 fb16 	bl	e4f4 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    dec8:	71b0      	strb	r0, [r6, #6]
    deca:	7ae1      	ldrb	r1, [r4, #11]
    decc:	1c6d      	adds	r5, r5, #1
    dece:	4408      	add	r0, r1
    ded0:	b2ed      	uxtb	r5, r5
    ded2:	72e0      	strb	r0, [r4, #11]
    ded4:	2d05      	cmp	r5, #5
    ded6:	d3f3      	bcc.n	dec0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    ded8:	bd70      	pop	{r4, r5, r6, pc}
    deda:	b2c1      	uxtb	r1, r0
    dedc:	fa91 f1a1 	rbit	r1, r1
    dee0:	0a00      	lsrs	r0, r0, #8
    dee2:	0e09      	lsrs	r1, r1, #24
    dee4:	fa90 f0a0 	rbit	r0, r0
    dee8:	0e00      	lsrs	r0, r0, #24
    deea:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    deee:	4770      	bx	lr
    def0:	b570      	push	{r4, r5, r6, lr}
    def2:	460d      	mov	r5, r1
    def4:	4048      	eors	r0, r1
    def6:	2400      	movs	r4, #0
    def8:	f7ff ffef 	bl	deda <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x3c>
    defc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    df00:	1c64      	adds	r4, r4, #1
    df02:	4428      	add	r0, r5
    df04:	b2e4      	uxtb	r4, r4
    df06:	b280      	uxth	r0, r0
    df08:	2c03      	cmp	r4, #3
    df0a:	d3f5      	bcc.n	def8 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x5a>
    df0c:	bd70      	pop	{r4, r5, r6, pc}

0000df0e <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ>:
    df0e:	7841      	ldrb	r1, [r0, #1]
    df10:	7800      	ldrb	r0, [r0, #0]
    df12:	f010 000f 	ands.w	r0, r0, #15
    df16:	d005      	beq.n	df24 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x16>
    df18:	2801      	cmp	r0, #1
    df1a:	d007      	beq.n	df2c <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x1e>
    df1c:	2802      	cmp	r0, #2
    df1e:	d001      	beq.n	df24 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x16>
    df20:	2806      	cmp	r0, #6
    df22:	d105      	bne.n	df30 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x22>
    df24:	1f89      	subs	r1, r1, #6
    df26:	291f      	cmp	r1, #31
    df28:	d904      	bls.n	df34 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x26>
    df2a:	e001      	b.n	df30 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x22>
    df2c:	290c      	cmp	r1, #12
    df2e:	d001      	beq.n	df34 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x26>
    df30:	2000      	movs	r0, #0
    df32:	4770      	bx	lr
    df34:	2001      	movs	r0, #1
    df36:	4770      	bx	lr

0000df38 <sym_2RWLERIIOLMYS4LVQVNNIFLEQSG65A5Q5F2FPLA>:
    df38:	7800      	ldrb	r0, [r0, #0]
    df3a:	09c0      	lsrs	r0, r0, #7
    df3c:	4770      	bx	lr

0000df3e <sym_SKY6LLKHYM3MTKIUASL3OKO4LAKLVGGKKAJ3I2Y>:
    df3e:	f850 2f03 	ldr.w	r2, [r0, #3]!
    df42:	600a      	str	r2, [r1, #0]
    df44:	8880      	ldrh	r0, [r0, #4]
    df46:	8088      	strh	r0, [r1, #4]
    df48:	4770      	bx	lr

0000df4a <sym_GTN2QTPVJUP6VPTTNNKS6RR7APIHG3FG2T7SNQY>:
    df4a:	7800      	ldrb	r0, [r0, #0]
    df4c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    df50:	4770      	bx	lr

0000df52 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI>:
    df52:	7801      	ldrb	r1, [r0, #0]
    df54:	f001 010f 	and.w	r1, r1, #15
    df58:	2904      	cmp	r1, #4
    df5a:	d105      	bne.n	df68 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x16>
    df5c:	7840      	ldrb	r0, [r0, #1]
    df5e:	1f80      	subs	r0, r0, #6
    df60:	281f      	cmp	r0, #31
    df62:	d801      	bhi.n	df68 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x16>
    df64:	2001      	movs	r0, #1
    df66:	4770      	bx	lr
    df68:	2000      	movs	r0, #0
    df6a:	4770      	bx	lr

0000df6c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    df6c:	b510      	push	{r4, lr}
    df6e:	7802      	ldrb	r2, [r0, #0]
    df70:	f001 030f 	and.w	r3, r1, #15
    df74:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    df78:	431a      	orrs	r2, r3
    df7a:	7002      	strb	r2, [r0, #0]
    df7c:	2907      	cmp	r1, #7
    df7e:	d20c      	bcs.n	df9a <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    df80:	e8df f001 	tbb	[pc, r1]
    df84:	06040604 	.word	0x06040604
    df88:	00040804 	.word	0x00040804
    df8c:	2106      	movs	r1, #6
    df8e:	e002      	b.n	df96 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    df90:	210c      	movs	r1, #12
    df92:	e000      	b.n	df96 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    df94:	2122      	movs	r1, #34	; 0x22
    df96:	7041      	strb	r1, [r0, #1]
    df98:	bd10      	pop	{r4, pc}
    df9a:	21a8      	movs	r1, #168	; 0xa8
    df9c:	202a      	movs	r0, #42	; 0x2a
    df9e:	f7f2 fd61 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000dfa2 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    dfa2:	680a      	ldr	r2, [r1, #0]
    dfa4:	f840 2f09 	str.w	r2, [r0, #9]!
    dfa8:	8889      	ldrh	r1, [r1, #4]
    dfaa:	8081      	strh	r1, [r0, #4]
    dfac:	4770      	bx	lr

0000dfae <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    dfae:	7802      	ldrb	r2, [r0, #0]
    dfb0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    dfb4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    dfb8:	7002      	strb	r2, [r0, #0]
    dfba:	4770      	bx	lr

0000dfbc <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    dfbc:	680a      	ldr	r2, [r1, #0]
    dfbe:	f840 2f03 	str.w	r2, [r0, #3]!
    dfc2:	8889      	ldrh	r1, [r1, #4]
    dfc4:	8081      	strh	r1, [r0, #4]
    dfc6:	4770      	bx	lr

0000dfc8 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    dfc8:	7802      	ldrb	r2, [r0, #0]
    dfca:	2340      	movs	r3, #64	; 0x40
    dfcc:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    dfd0:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    dfd4:	430a      	orrs	r2, r1
    dfd6:	7002      	strb	r2, [r0, #0]
    dfd8:	4770      	bx	lr

0000dfda <sym_UODFQA44OAUGQWVRPEK2IIKSCIFD37IIPLUYFSI>:
    dfda:	680a      	ldr	r2, [r1, #0]
    dfdc:	6042      	str	r2, [r0, #4]
    dfde:	7909      	ldrb	r1, [r1, #4]
    dfe0:	7201      	strb	r1, [r0, #8]
    dfe2:	4770      	bx	lr

0000dfe4 <sym_ZZDNF2NNUMTRE4Y6NUTK3CJU3EQI64HKYHSTDAI>:
    dfe4:	72c1      	strb	r1, [r0, #11]
    dfe6:	0a09      	lsrs	r1, r1, #8
    dfe8:	7301      	strb	r1, [r0, #12]
    dfea:	4770      	bx	lr

0000dfec <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>:
    dfec:	b510      	push	{r4, lr}
    dfee:	29fb      	cmp	r1, #251	; 0xfb
    dff0:	d904      	bls.n	dffc <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI+0x10>
    dff2:	f240 61a9 	movw	r1, #1705	; 0x6a9
    dff6:	202a      	movs	r0, #42	; 0x2a
    dff8:	f7f2 fd34 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dffc:	7041      	strb	r1, [r0, #1]
    dffe:	bd10      	pop	{r4, pc}

0000e000 <sym_ZLXXGUFNBKYTUHSDKKKU4A6O7RMXODI4OQA6IUY>:
    e000:	8809      	ldrh	r1, [r1, #0]
    e002:	8181      	strh	r1, [r0, #12]
    e004:	4770      	bx	lr

0000e006 <sym_3LF2RG2XP7QRT5FAEZFOPL4L5RIBP3MCQ5PY7XY>:
    e006:	6809      	ldr	r1, [r1, #0]
    e008:	f8c0 1016 	str.w	r1, [r0, #22]
    e00c:	4770      	bx	lr

0000e00e <sym_NSDJKDRKPUUB5EAI3OMDTFOWZBLYJSPI3VQSNXQ>:
    e00e:	680a      	ldr	r2, [r1, #0]
    e010:	6042      	str	r2, [r0, #4]
    e012:	6849      	ldr	r1, [r1, #4]
    e014:	6081      	str	r1, [r0, #8]
    e016:	4770      	bx	lr

0000e018 <sym_LPOR4PC6XUIXDNEKJLY3JL3BKNV2UZG2OR7FAKQ>:
    e018:	680a      	ldr	r2, [r1, #0]
    e01a:	f840 2f0e 	str.w	r2, [r0, #14]!
    e01e:	6849      	ldr	r1, [r1, #4]
    e020:	6041      	str	r1, [r0, #4]
    e022:	4770      	bx	lr

0000e024 <sym_RHFWG2VAMMSM6HNQIXGIQMU7QUNXB2XIV4NQREY>:
    e024:	68c0      	ldr	r0, [r0, #12]
    e026:	6008      	str	r0, [r1, #0]
    e028:	4770      	bx	lr

0000e02a <sym_G3E5J3DBBC3WRZ26KQDVAZEPSZL4FITDNFKJBAY>:
    e02a:	6842      	ldr	r2, [r0, #4]
    e02c:	600a      	str	r2, [r1, #0]
    e02e:	6880      	ldr	r0, [r0, #8]
    e030:	6048      	str	r0, [r1, #4]
    e032:	4770      	bx	lr

0000e034 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>:
    e034:	7800      	ldrb	r0, [r0, #0]
    e036:	f000 0003 	and.w	r0, r0, #3
    e03a:	4770      	bx	lr

0000e03c <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>:
    e03c:	8880      	ldrh	r0, [r0, #4]
    e03e:	4770      	bx	lr

0000e040 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>:
    e040:	88c0      	ldrh	r0, [r0, #6]
    e042:	4770      	bx	lr

0000e044 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>:
    e044:	8900      	ldrh	r0, [r0, #8]
    e046:	4770      	bx	lr

0000e048 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>:
    e048:	8940      	ldrh	r0, [r0, #10]
    e04a:	4770      	bx	lr

0000e04c <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>:
    e04c:	8901      	ldrh	r1, [r0, #8]
    e04e:	291b      	cmp	r1, #27
    e050:	d30c      	bcc.n	e06c <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e052:	8941      	ldrh	r1, [r0, #10]
    e054:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e058:	4291      	cmp	r1, r2
    e05a:	d307      	bcc.n	e06c <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e05c:	8881      	ldrh	r1, [r0, #4]
    e05e:	291b      	cmp	r1, #27
    e060:	d304      	bcc.n	e06c <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e062:	88c0      	ldrh	r0, [r0, #6]
    e064:	4290      	cmp	r0, r2
    e066:	d301      	bcc.n	e06c <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e068:	2001      	movs	r0, #1
    e06a:	4770      	bx	lr
    e06c:	2000      	movs	r0, #0
    e06e:	4770      	bx	lr

0000e070 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>:
    e070:	7901      	ldrb	r1, [r0, #4]
    e072:	0749      	lsls	r1, r1, #29
    e074:	d004      	beq.n	e080 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e076:	7940      	ldrb	r0, [r0, #5]
    e078:	0740      	lsls	r0, r0, #29
    e07a:	d001      	beq.n	e080 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e07c:	2001      	movs	r0, #1
    e07e:	4770      	bx	lr
    e080:	2000      	movs	r0, #0
    e082:	4770      	bx	lr

0000e084 <sym_AYZTYWE6SD5T6ZDLITENLNSRAVS5VKE23BWONUA>:
    e084:	7181      	strb	r1, [r0, #6]
    e086:	0a09      	lsrs	r1, r1, #8
    e088:	71c1      	strb	r1, [r0, #7]
    e08a:	4770      	bx	lr

0000e08c <sym_SAWOREXGWRJNX5IOUMHBRACZ6DWRXOAHPPFX4TA>:
    e08c:	7101      	strb	r1, [r0, #4]
    e08e:	4770      	bx	lr

0000e090 <sym_SG4OPFPHWHCVU6FHRG2ZQ5GV7RHUGBHEKN6N55A>:
    e090:	7141      	strb	r1, [r0, #5]
    e092:	4770      	bx	lr

0000e094 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ>:
    e094:	7901      	ldrb	r1, [r0, #4]
    e096:	0749      	lsls	r1, r1, #29
    e098:	d004      	beq.n	e0a4 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ+0x10>
    e09a:	7940      	ldrb	r0, [r0, #5]
    e09c:	0740      	lsls	r0, r0, #29
    e09e:	d001      	beq.n	e0a4 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ+0x10>
    e0a0:	2001      	movs	r0, #1
    e0a2:	4770      	bx	lr
    e0a4:	2000      	movs	r0, #0
    e0a6:	4770      	bx	lr

0000e0a8 <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>:
    e0a8:	7900      	ldrb	r0, [r0, #4]
    e0aa:	4770      	bx	lr

0000e0ac <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>:
    e0ac:	7101      	strb	r1, [r0, #4]
    e0ae:	4770      	bx	lr

0000e0b0 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>:
    e0b0:	7940      	ldrb	r0, [r0, #5]
    e0b2:	4770      	bx	lr

0000e0b4 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>:
    e0b4:	7141      	strb	r1, [r0, #5]
    e0b6:	4770      	bx	lr

0000e0b8 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>:
    e0b8:	7802      	ldrb	r2, [r0, #0]
    e0ba:	f001 0103 	and.w	r1, r1, #3
    e0be:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    e0c2:	430a      	orrs	r2, r1
    e0c4:	7002      	strb	r2, [r0, #0]
    e0c6:	4770      	bx	lr

0000e0c8 <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>:
    e0c8:	7101      	strb	r1, [r0, #4]
    e0ca:	0a09      	lsrs	r1, r1, #8
    e0cc:	7141      	strb	r1, [r0, #5]
    e0ce:	4770      	bx	lr

0000e0d0 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>:
    e0d0:	7181      	strb	r1, [r0, #6]
    e0d2:	0a09      	lsrs	r1, r1, #8
    e0d4:	71c1      	strb	r1, [r0, #7]
    e0d6:	4770      	bx	lr

0000e0d8 <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>:
    e0d8:	7201      	strb	r1, [r0, #8]
    e0da:	0a09      	lsrs	r1, r1, #8
    e0dc:	7241      	strb	r1, [r0, #9]
    e0de:	4770      	bx	lr

0000e0e0 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>:
    e0e0:	7281      	strb	r1, [r0, #10]
    e0e2:	0a09      	lsrs	r1, r1, #8
    e0e4:	72c1      	strb	r1, [r0, #11]
    e0e6:	4770      	bx	lr

0000e0e8 <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>:
    e0e8:	7900      	ldrb	r0, [r0, #4]
    e0ea:	4770      	bx	lr

0000e0ec <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>:
    e0ec:	7900      	ldrb	r0, [r0, #4]
    e0ee:	4770      	bx	lr

0000e0f0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    e0f0:	b510      	push	{r4, lr}
    e0f2:	7a01      	ldrb	r1, [r0, #8]
    e0f4:	b119      	cbz	r1, e0fe <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    e0f6:	2901      	cmp	r1, #1
    e0f8:	d006      	beq.n	e108 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    e0fa:	2000      	movs	r0, #0
    e0fc:	bd10      	pop	{r4, pc}
    e0fe:	88c2      	ldrh	r2, [r0, #6]
    e100:	6803      	ldr	r3, [r0, #0]
    e102:	8880      	ldrh	r0, [r0, #4]
    e104:	2102      	movs	r1, #2
    e106:	e003      	b.n	e110 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    e108:	88c2      	ldrh	r2, [r0, #6]
    e10a:	6803      	ldr	r3, [r0, #0]
    e10c:	8880      	ldrh	r0, [r0, #4]
    e10e:	2101      	movs	r1, #1
    e110:	f7f4 fb9e 	bl	2850 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x14>
    e114:	b908      	cbnz	r0, e11a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    e116:	f7f4 fbe5 	bl	28e4 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    e11a:	2001      	movs	r0, #1
    e11c:	bd10      	pop	{r4, pc}

0000e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>:
    e11e:	b508      	push	{r3, lr}
    e120:	7a03      	ldrb	r3, [r0, #8]
    e122:	f88d 3000 	strb.w	r3, [sp]
    e126:	9b00      	ldr	r3, [sp, #0]
    e128:	9300      	str	r3, [sp, #0]
    e12a:	f89d 3000 	ldrb.w	r3, [sp]
    e12e:	b123      	cbz	r3, e13a <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x1c>
    e130:	f240 3117 	movw	r1, #791	; 0x317
    e134:	2010      	movs	r0, #16
    e136:	f7f2 fc95 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e13a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e13e:	f7f4 bd57 	b.w	2bf0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x100>

0000e142 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    e142:	f7f4 bd83 	b.w	2c4c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x15c>

0000e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>:
    e146:	7a03      	ldrb	r3, [r0, #8]
    e148:	b082      	sub	sp, #8
    e14a:	f88d 3000 	strb.w	r3, [sp]
    e14e:	9b00      	ldr	r3, [sp, #0]
    e150:	9300      	str	r3, [sp, #0]
    e152:	f89d 3000 	ldrb.w	r3, [sp]
    e156:	2b00      	cmp	r3, #0
    e158:	d102      	bne.n	e160 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0x1a>
    e15a:	b002      	add	sp, #8
    e15c:	f7f4 bd48 	b.w	2bf0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x100>
    e160:	b002      	add	sp, #8
    e162:	4770      	bx	lr
    e164:	2000      	movs	r0, #0
    e166:	7048      	strb	r0, [r1, #1]
    e168:	2003      	movs	r0, #3
    e16a:	7008      	strb	r0, [r1, #0]
    e16c:	2001      	movs	r0, #1
    e16e:	7108      	strb	r0, [r1, #4]
    e170:	4770      	bx	lr

0000e172 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e172:	b510      	push	{r4, lr}
    e174:	888c      	ldrh	r4, [r1, #4]
    e176:	890a      	ldrh	r2, [r1, #8]
    e178:	884b      	ldrh	r3, [r1, #2]
    e17a:	88c9      	ldrh	r1, [r1, #6]
    e17c:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    e180:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    e184:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    e188:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    e18c:	bd10      	pop	{r4, pc}

0000e18e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e18e:	b570      	push	{r4, r5, r6, lr}
    e190:	4615      	mov	r5, r2
    e192:	460c      	mov	r4, r1
    e194:	f000 f91a 	bl	e3cc <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x108>
    e198:	3096      	adds	r0, #150	; 0x96
    e19a:	4428      	add	r0, r5
    e19c:	42a0      	cmp	r0, r4
    e19e:	d801      	bhi.n	e1a4 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e1a0:	1a20      	subs	r0, r4, r0
    e1a2:	bd70      	pop	{r4, r5, r6, pc}
    e1a4:	2000      	movs	r0, #0
    e1a6:	bd70      	pop	{r4, r5, r6, pc}

0000e1a8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e1a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e1ac:	4604      	mov	r4, r0
    e1ae:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    e1b0:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    e1b2:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    e1b6:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    e1ba:	4285      	cmp	r5, r0
    e1bc:	d300      	bcc.n	e1c0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    e1be:	4605      	mov	r5, r0
    e1c0:	4620      	mov	r0, r4
    e1c2:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    e1c6:	f000 f89c 	bl	e302 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    e1ca:	4601      	mov	r1, r0
    e1cc:	86e5      	strh	r5, [r4, #54]	; 0x36
    e1ce:	8761      	strh	r1, [r4, #58]	; 0x3a
    e1d0:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    e1d2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e1d6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    e1d8:	4680      	mov	r8, r0
    e1da:	42aa      	cmp	r2, r5
    e1dc:	d200      	bcs.n	e1e0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    e1de:	462a      	mov	r2, r5
    e1e0:	428b      	cmp	r3, r1
    e1e2:	d200      	bcs.n	e1e6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    e1e4:	460b      	mov	r3, r1
    e1e6:	8202      	strh	r2, [r0, #16]
    e1e8:	f8a8 3012 	strh.w	r3, [r8, #18]
    e1ec:	42bd      	cmp	r5, r7
    e1ee:	d101      	bne.n	e1f4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    e1f0:	42b1      	cmp	r1, r6
    e1f2:	d001      	beq.n	e1f8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    e1f4:	2001      	movs	r0, #1
    e1f6:	e000      	b.n	e1fa <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    e1f8:	2000      	movs	r0, #0
    e1fa:	4681      	mov	r9, r0
    e1fc:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    e200:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e204:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    e206:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    e208:	4285      	cmp	r5, r0
    e20a:	d300      	bcc.n	e20e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    e20c:	4605      	mov	r5, r0
    e20e:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    e212:	4620      	mov	r0, r4
    e214:	f000 f87d 	bl	e312 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    e218:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    e21c:	2902      	cmp	r1, #2
    e21e:	d108      	bne.n	e232 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    e220:	42af      	cmp	r7, r5
    e222:	d200      	bcs.n	e226 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    e224:	463d      	mov	r5, r7
    e226:	4286      	cmp	r6, r0
    e228:	d200      	bcs.n	e22c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    e22a:	4630      	mov	r0, r6
    e22c:	2100      	movs	r1, #0
    e22e:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    e232:	f8a8 5008 	strh.w	r5, [r8, #8]
    e236:	f8a8 000c 	strh.w	r0, [r8, #12]
    e23a:	42bd      	cmp	r5, r7
    e23c:	d101      	bne.n	e242 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    e23e:	42b0      	cmp	r0, r6
    e240:	d001      	beq.n	e246 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    e242:	2001      	movs	r0, #1
    e244:	e000      	b.n	e248 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    e246:	2000      	movs	r0, #0
    e248:	ea40 0009 	orr.w	r0, r0, r9
    e24c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e250 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    e250:	6840      	ldr	r0, [r0, #4]
    e252:	4770      	bx	lr

0000e254 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    e254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e258:	4616      	mov	r6, r2
    e25a:	460f      	mov	r7, r1
    e25c:	4604      	mov	r4, r0
    e25e:	f000 f8b5 	bl	e3cc <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x108>
    e262:	4605      	mov	r5, r0
    e264:	463a      	mov	r2, r7
    e266:	6921      	ldr	r1, [r4, #16]
    e268:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e26a:	f000 f845 	bl	e2f8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
    e26e:	19a9      	adds	r1, r5, r6
    e270:	4281      	cmp	r1, r0
    e272:	d300      	bcc.n	e276 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    e274:	4608      	mov	r0, r1
    e276:	6320      	str	r0, [r4, #48]	; 0x30
    e278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e27c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e27c:	221b      	movs	r2, #27
    e27e:	8402      	strh	r2, [r0, #32]
    e280:	8382      	strh	r2, [r0, #28]
    e282:	82c2      	strh	r2, [r0, #22]
    e284:	8282      	strh	r2, [r0, #20]
    e286:	8142      	strh	r2, [r0, #10]
    e288:	8202      	strh	r2, [r0, #16]
    e28a:	8102      	strh	r2, [r0, #8]
    e28c:	8542      	strh	r2, [r0, #42]	; 0x2a
    e28e:	8582      	strh	r2, [r0, #44]	; 0x2c
    e290:	8482      	strh	r2, [r0, #36]	; 0x24
    e292:	2900      	cmp	r1, #0
    e294:	d10a      	bne.n	e2ac <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e296:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e29a:	8441      	strh	r1, [r0, #34]	; 0x22
    e29c:	83c1      	strh	r1, [r0, #30]
    e29e:	8341      	strh	r1, [r0, #26]
    e2a0:	8301      	strh	r1, [r0, #24]
    e2a2:	81c1      	strh	r1, [r0, #14]
    e2a4:	8241      	strh	r1, [r0, #18]
    e2a6:	8181      	strh	r1, [r0, #12]
    e2a8:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e2aa:	8601      	strh	r1, [r0, #48]	; 0x30
    e2ac:	4770      	bx	lr

0000e2ae <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e2ae:	6800      	ldr	r0, [r0, #0]
    e2b0:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e2b4:	4290      	cmp	r0, r2
    e2b6:	d903      	bls.n	e2c0 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e2b8:	1a40      	subs	r0, r0, r1
    e2ba:	389c      	subs	r0, #156	; 0x9c
    e2bc:	0840      	lsrs	r0, r0, #1
    e2be:	4770      	bx	lr
    e2c0:	2000      	movs	r0, #0
    e2c2:	4770      	bx	lr

0000e2c4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e2c4:	b510      	push	{r4, lr}
    e2c6:	9c02      	ldr	r4, [sp, #8]
    e2c8:	8281      	strh	r1, [r0, #20]
    e2ca:	82c2      	strh	r2, [r0, #22]
    e2cc:	8303      	strh	r3, [r0, #24]
    e2ce:	8344      	strh	r4, [r0, #26]
    e2d0:	bd10      	pop	{r4, pc}
    e2d2:	1d00      	adds	r0, r0, #4
    e2d4:	b510      	push	{r4, lr}
    e2d6:	b280      	uxth	r0, r0
    e2d8:	2901      	cmp	r1, #1
    e2da:	d006      	beq.n	e2ea <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x26>
    e2dc:	2902      	cmp	r1, #2
    e2de:	d007      	beq.n	e2f0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x2c>
    e2e0:	f240 2126 	movw	r1, #550	; 0x226
    e2e4:	2006      	movs	r0, #6
    e2e6:	f7f2 fbbd 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2ea:	00c0      	lsls	r0, r0, #3
    e2ec:	3050      	adds	r0, #80	; 0x50
    e2ee:	e001      	b.n	e2f4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x30>
    e2f0:	0080      	lsls	r0, r0, #2
    e2f2:	302c      	adds	r0, #44	; 0x2c
    e2f4:	b280      	uxth	r0, r0
    e2f6:	bd10      	pop	{r4, pc}
    e2f8:	4288      	cmp	r0, r1
    e2fa:	d300      	bcc.n	e2fe <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3a>
    e2fc:	4608      	mov	r0, r1
    e2fe:	1a80      	subs	r0, r0, r2
    e300:	4770      	bx	lr
    e302:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    e306:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    e30a:	4281      	cmp	r1, r0
    e30c:	d200      	bcs.n	e310 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4c>
    e30e:	4608      	mov	r0, r1
    e310:	4770      	bx	lr
    e312:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e316:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    e31a:	4281      	cmp	r1, r0
    e31c:	d200      	bcs.n	e320 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x5c>
    e31e:	4608      	mov	r0, r1
    e320:	4770      	bx	lr
    e322:	b538      	push	{r3, r4, r5, lr}
    e324:	2200      	movs	r2, #0
    e326:	f1a0 0318 	sub.w	r3, r0, #24
    e32a:	2416      	movs	r4, #22
    e32c:	7202      	strb	r2, [r0, #8]
    e32e:	704a      	strb	r2, [r1, #1]
    e330:	700c      	strb	r4, [r1, #0]
    e332:	f8d3 5022 	ldr.w	r5, [r3, #34]	; 0x22
    e336:	604d      	str	r5, [r1, #4]
    e338:	f8d3 5026 	ldr.w	r5, [r3, #38]	; 0x26
    e33c:	608d      	str	r5, [r1, #8]
    e33e:	f8d3 502a 	ldr.w	r5, [r3, #42]	; 0x2a
    e342:	60cd      	str	r5, [r1, #12]
    e344:	7a05      	ldrb	r5, [r0, #8]
    e346:	f88d 5000 	strb.w	r5, [sp]
    e34a:	9d00      	ldr	r5, [sp, #0]
    e34c:	9500      	str	r5, [sp, #0]
    e34e:	f89d 5000 	ldrb.w	r5, [sp]
    e352:	2d00      	cmp	r5, #0
    e354:	d1ea      	bne.n	e32c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x68>
    e356:	bd38      	pop	{r3, r4, r5, pc}
    e358:	b5f0      	push	{r4, r5, r6, r7, lr}
    e35a:	b087      	sub	sp, #28
    e35c:	460d      	mov	r5, r1
    e35e:	4604      	mov	r4, r0
    e360:	f7f4 fa62 	bl	2828 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    e364:	2600      	movs	r6, #0
    e366:	b328      	cbz	r0, e3b4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf0>
    e368:	f5a4 70c0 	sub.w	r0, r4, #384	; 0x180
    e36c:	7226      	strb	r6, [r4, #8]
    e36e:	8807      	ldrh	r7, [r0, #0]
    e370:	a903      	add	r1, sp, #12
    e372:	4638      	mov	r0, r7
    e374:	f001 fb39 	bl	f9ea <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    e378:	b108      	cbz	r0, e37e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xba>
    e37a:	21fd      	movs	r1, #253	; 0xfd
    e37c:	e017      	b.n	e3ae <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xea>
    e37e:	f8ad 7000 	strh.w	r7, [sp]
    e382:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    e386:	f8ad 0002 	strh.w	r0, [sp, #2]
    e38a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    e38e:	f8ad 0004 	strh.w	r0, [sp, #4]
    e392:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    e396:	f8ad 0006 	strh.w	r0, [sp, #6]
    e39a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    e39e:	f8ad 0008 	strh.w	r0, [sp, #8]
    e3a2:	4668      	mov	r0, sp
    e3a4:	f001 fb48 	bl	fa38 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    e3a8:	b120      	cbz	r0, e3b4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf0>
    e3aa:	f44f 7183 	mov.w	r1, #262	; 0x106
    e3ae:	202c      	movs	r0, #44	; 0x2c
    e3b0:	f7f2 fb58 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e3b4:	201f      	movs	r0, #31
    e3b6:	7028      	strb	r0, [r5, #0]
    e3b8:	706e      	strb	r6, [r5, #1]
    e3ba:	f854 0f0a 	ldr.w	r0, [r4, #10]!
    e3be:	6068      	str	r0, [r5, #4]
    e3c0:	6860      	ldr	r0, [r4, #4]
    e3c2:	60a8      	str	r0, [r5, #8]
    e3c4:	8920      	ldrh	r0, [r4, #8]
    e3c6:	81a8      	strh	r0, [r5, #12]
    e3c8:	b007      	add	sp, #28
    e3ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e3cc:	2196      	movs	r1, #150	; 0x96
    e3ce:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    e3d2:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    e3d6:	f000 b800 	b.w	e3da <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x116>
    e3da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e3de:	460d      	mov	r5, r1
    e3e0:	4606      	mov	r6, r0
    e3e2:	4698      	mov	r8, r3
    e3e4:	4617      	mov	r7, r2
    e3e6:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e3e8:	4611      	mov	r1, r2
    e3ea:	f7ff ff72 	bl	e2d2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e3ee:	4604      	mov	r4, r0
    e3f0:	4639      	mov	r1, r7
    e3f2:	4630      	mov	r0, r6
    e3f4:	f7ff ff8d 	bl	e312 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    e3f8:	42a0      	cmp	r0, r4
    e3fa:	d200      	bcs.n	e3fe <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x13a>
    e3fc:	4604      	mov	r4, r0
    e3fe:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e400:	4641      	mov	r1, r8
    e402:	f7ff ff66 	bl	e2d2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e406:	4607      	mov	r7, r0
    e408:	4641      	mov	r1, r8
    e40a:	4630      	mov	r0, r6
    e40c:	f7ff ff79 	bl	e302 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    e410:	42b8      	cmp	r0, r7
    e412:	d300      	bcc.n	e416 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x152>
    e414:	4638      	mov	r0, r7
    e416:	4420      	add	r0, r4
    e418:	4428      	add	r0, r5
    e41a:	1d80      	adds	r0, r0, #6
    e41c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e420 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>:
    e420:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e424:	2700      	movs	r7, #0
    e426:	463d      	mov	r5, r7
    e428:	2623      	movs	r6, #35	; 0x23
    e42a:	46b8      	mov	r8, r7
    e42c:	f7f4 fccc 	bl	2dc8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    e430:	4604      	mov	r4, r0
    e432:	f7f4 fc91 	bl	2d58 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA>
    e436:	b190      	cbz	r0, e45e <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3e>
    e438:	f8cd 8000 	str.w	r8, [sp]
    e43c:	f8cd 8004 	str.w	r8, [sp, #4]
    e440:	e003      	b.n	e44a <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x2a>
    e442:	9800      	ldr	r0, [sp, #0]
    e444:	6941      	ldr	r1, [r0, #20]
    e446:	42a1      	cmp	r1, r4
    e448:	d009      	beq.n	e45e <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3e>
    e44a:	4668      	mov	r0, sp
    e44c:	f7f2 fd28 	bl	ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    e450:	2800      	cmp	r0, #0
    e452:	d0f6      	beq.n	e442 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x22>
    e454:	4625      	mov	r5, r4
    e456:	4620      	mov	r0, r4
    e458:	f7f4 fc48 	bl	2cec <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    e45c:	4607      	mov	r7, r0
    e45e:	1e76      	subs	r6, r6, #1
    e460:	d001      	beq.n	e466 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x46>
    e462:	2f00      	cmp	r7, #0
    e464:	d0e2      	beq.n	e42c <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0xc>
    e466:	b115      	cbz	r5, e46e <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x4e>
    e468:	4628      	mov	r0, r5
    e46a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e46e:	f240 1167 	movw	r1, #359	; 0x167
    e472:	200f      	movs	r0, #15
    e474:	f7f2 faf6 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e478:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e47c:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e480:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e484:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e488:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e48c:	ea10 0f40 	tst.w	r0, r0, lsl #1
    e490:	d001      	beq.n	e496 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x76>
    e492:	2000      	movs	r0, #0
    e494:	4770      	bx	lr
    e496:	2001      	movs	r0, #1
    e498:	4770      	bx	lr
    e49a:	b510      	push	{r4, lr}
    e49c:	4604      	mov	r4, r0
    e49e:	2108      	movs	r1, #8
    e4a0:	4620      	mov	r0, r4
    e4a2:	f7f2 fb7f 	bl	ba4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e4a6:	6820      	ldr	r0, [r4, #0]
    e4a8:	2800      	cmp	r0, #0
    e4aa:	d102      	bne.n	e4b2 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x92>
    e4ac:	6860      	ldr	r0, [r4, #4]
    e4ae:	2800      	cmp	r0, #0
    e4b0:	d0f5      	beq.n	e49e <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x7e>
    e4b2:	bd10      	pop	{r4, pc}

0000e4b4 <sym_B4SOI7ZERMZJ76YVIJFCACJN3HNVAJYEHZSLSTQ>:
    e4b4:	f000 3155 	and.w	r1, r0, #1431655765	; 0x55555555
    e4b8:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
    e4bc:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    e4c0:	4408      	add	r0, r1
    e4c2:	f000 3133 	and.w	r1, r0, #858993459	; 0x33333333
    e4c6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
    e4ca:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    e4ce:	4408      	add	r0, r1
    e4d0:	f000 310f 	and.w	r1, r0, #252645135	; 0xf0f0f0f
    e4d4:	f04f 320f 	mov.w	r2, #252645135	; 0xf0f0f0f
    e4d8:	ea02 1010 	and.w	r0, r2, r0, lsr #4
    e4dc:	4408      	add	r0, r1
    e4de:	f000 11ff 	and.w	r1, r0, #16711935	; 0xff00ff
    e4e2:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
    e4e6:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    e4ea:	4408      	add	r0, r1
    e4ec:	eb00 4010 	add.w	r0, r0, r0, lsr #16
    e4f0:	b2c0      	uxtb	r0, r0
    e4f2:	4770      	bx	lr

0000e4f4 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    e4f4:	f000 0155 	and.w	r1, r0, #85	; 0x55
    e4f8:	2255      	movs	r2, #85	; 0x55
    e4fa:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    e4fe:	4408      	add	r0, r1
    e500:	f000 0133 	and.w	r1, r0, #51	; 0x33
    e504:	2233      	movs	r2, #51	; 0x33
    e506:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    e50a:	4408      	add	r0, r1
    e50c:	f000 010f 	and.w	r1, r0, #15
    e510:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    e514:	4770      	bx	lr

0000e516 <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A>:
    e516:	ea80 0060 	eor.w	r0, r0, r0, asr #1
    e51a:	f7ff bfcb 	b.w	e4b4 <sym_B4SOI7ZERMZJ76YVIJFCACJN3HNVAJYEHZSLSTQ>

0000e51e <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI>:
    e51e:	b510      	push	{r4, lr}
    e520:	f1a0 0234 	sub.w	r2, r0, #52	; 0x34
    e524:	f830 4cbc 	ldrh.w	r4, [r0, #-188]
    e528:	2000      	movs	r0, #0
    e52a:	7048      	strb	r0, [r1, #1]
    e52c:	230c      	movs	r3, #12
    e52e:	700b      	strb	r3, [r1, #0]
    e530:	7108      	strb	r0, [r1, #4]
    e532:	f8a1 4005 	strh.w	r4, [r1, #5]
    e536:	f892 003d 	ldrb.w	r0, [r2, #61]	; 0x3d
    e53a:	71c8      	strb	r0, [r1, #7]
    e53c:	4620      	mov	r0, r4
    e53e:	f7f2 fe5d 	bl	11fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e542:	f7fe feb6 	bl	d2b2 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    e546:	b140      	cbz	r0, e55a <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI+0x3c>
    e548:	4620      	mov	r0, r4
    e54a:	f7ff f99c 	bl	d886 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    e54e:	4620      	mov	r0, r4
    e550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e554:	2100      	movs	r1, #0
    e556:	f7f2 bce9 	b.w	f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e55a:	2160      	movs	r1, #96	; 0x60
    e55c:	2063      	movs	r0, #99	; 0x63
    e55e:	f7f2 fa81 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e562 <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y>:
    e562:	b538      	push	{r3, r4, r5, lr}
    e564:	2200      	movs	r2, #0
    e566:	704a      	strb	r2, [r1, #1]
    e568:	2309      	movs	r3, #9
    e56a:	700b      	strb	r3, [r1, #0]
    e56c:	f1a0 0474 	sub.w	r4, r0, #116	; 0x74
    e570:	f5a0 73e3 	sub.w	r3, r0, #454	; 0x1c6
    e574:	7202      	strb	r2, [r0, #8]
    e576:	84da      	strh	r2, [r3, #38]	; 0x26
    e578:	f8d4 507e 	ldr.w	r5, [r4, #126]	; 0x7e
    e57c:	604d      	str	r5, [r1, #4]
    e57e:	f8d4 5082 	ldr.w	r5, [r4, #130]	; 0x82
    e582:	608d      	str	r5, [r1, #8]
    e584:	f8b4 5086 	ldrh.w	r5, [r4, #134]	; 0x86
    e588:	818d      	strh	r5, [r1, #12]
    e58a:	710a      	strb	r2, [r1, #4]
    e58c:	7a05      	ldrb	r5, [r0, #8]
    e58e:	f88d 5000 	strb.w	r5, [sp]
    e592:	9d00      	ldr	r5, [sp, #0]
    e594:	9500      	str	r5, [sp, #0]
    e596:	f89d 5000 	ldrb.w	r5, [sp]
    e59a:	2d00      	cmp	r5, #0
    e59c:	d1ea      	bne.n	e574 <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y+0x12>
    e59e:	bd38      	pop	{r3, r4, r5, pc}

0000e5a0 <sym_2TCPCDAUQ3FXZYG56Z6ZP7VCFNUJTBV3EZJYPGY>:
    e5a0:	2200      	movs	r2, #0
    e5a2:	704a      	strb	r2, [r1, #1]
    e5a4:	220d      	movs	r2, #13
    e5a6:	700a      	strb	r2, [r1, #0]
    e5a8:	f100 020a 	add.w	r2, r0, #10
    e5ac:	7a83      	ldrb	r3, [r0, #10]
    e5ae:	f2a0 2012 	subw	r0, r0, #530	; 0x212
    e5b2:	710b      	strb	r3, [r1, #4]
    e5b4:	8800      	ldrh	r0, [r0, #0]
    e5b6:	80c8      	strh	r0, [r1, #6]
    e5b8:	7910      	ldrb	r0, [r2, #4]
    e5ba:	7208      	strb	r0, [r1, #8]
    e5bc:	4770      	bx	lr

0000e5be <sym_S6U6ANENQP6QL5TLITNXPOYFSB26Q5AFTW32CXI>:
    e5be:	2200      	movs	r2, #0
    e5c0:	704a      	strb	r2, [r1, #1]
    e5c2:	220e      	movs	r2, #14
    e5c4:	700a      	strb	r2, [r1, #0]
    e5c6:	7a82      	ldrb	r2, [r0, #10]
    e5c8:	f2a0 2012 	subw	r0, r0, #530	; 0x212
    e5cc:	710a      	strb	r2, [r1, #4]
    e5ce:	8800      	ldrh	r0, [r0, #0]
    e5d0:	80c8      	strh	r0, [r1, #6]
    e5d2:	4770      	bx	lr

0000e5d4 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>:
    e5d4:	b510      	push	{r4, lr}
    e5d6:	6844      	ldr	r4, [r0, #4]
    e5d8:	7803      	ldrb	r3, [r0, #0]
    e5da:	2100      	movs	r1, #0
    e5dc:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    e5e0:	3488      	adds	r4, #136	; 0x88
    e5e2:	4620      	mov	r0, r4
    e5e4:	f7ff fa8a 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e5e8:	b110      	cbz	r0, e5f0 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY+0x1c>
    e5ea:	2004      	movs	r0, #4
    e5ec:	7760      	strb	r0, [r4, #29]
    e5ee:	bd10      	pop	{r4, pc}
    e5f0:	21aa      	movs	r1, #170	; 0xaa
    e5f2:	201c      	movs	r0, #28
    e5f4:	f7f2 fa36 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e5f8 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>:
    e5f8:	b510      	push	{r4, lr}
    e5fa:	4604      	mov	r4, r0
    e5fc:	6840      	ldr	r0, [r0, #4]
    e5fe:	2300      	movs	r3, #0
    e600:	4619      	mov	r1, r3
    e602:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    e606:	3088      	adds	r0, #136	; 0x88
    e608:	f7ff fa78 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e60c:	b120      	cbz	r0, e618 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x20>
    e60e:	6861      	ldr	r1, [r4, #4]
    e610:	2000      	movs	r0, #0
    e612:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    e616:	bd10      	pop	{r4, pc}
    e618:	21b2      	movs	r1, #178	; 0xb2
    e61a:	201c      	movs	r0, #28
    e61c:	f7f2 fa22 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e620:	2200      	movs	r2, #0
    e622:	704a      	strb	r2, [r1, #1]
    e624:	2208      	movs	r2, #8
    e626:	700a      	strb	r2, [r1, #0]
    e628:	f850 2f09 	ldr.w	r2, [r0, #9]!
    e62c:	604a      	str	r2, [r1, #4]
    e62e:	6842      	ldr	r2, [r0, #4]
    e630:	608a      	str	r2, [r1, #8]
    e632:	8902      	ldrh	r2, [r0, #8]
    e634:	818a      	strh	r2, [r1, #12]
    e636:	7a80      	ldrb	r0, [r0, #10]
    e638:	7388      	strb	r0, [r1, #14]
    e63a:	4770      	bx	lr

0000e63c <sym_NK4HRRKGX3ST3ARVTU6HUEXLOWZFFBMCIDNT3EI>:
    e63c:	2200      	movs	r2, #0
    e63e:	704a      	strb	r2, [r1, #1]
    e640:	2210      	movs	r2, #16
    e642:	f5a0 70b0 	sub.w	r0, r0, #352	; 0x160
    e646:	700a      	strb	r2, [r1, #0]
    e648:	8800      	ldrh	r0, [r0, #0]
    e64a:	8088      	strh	r0, [r1, #4]
    e64c:	4770      	bx	lr

0000e64e <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A>:
    e64e:	b538      	push	{r3, r4, r5, lr}
    e650:	2400      	movs	r4, #0
    e652:	704c      	strb	r4, [r1, #1]
    e654:	2501      	movs	r5, #1
    e656:	700d      	strb	r5, [r1, #0]
    e658:	f1a0 0260 	sub.w	r2, r0, #96	; 0x60
    e65c:	f1a0 03e8 	sub.w	r3, r0, #232	; 0xe8
    e660:	710c      	strb	r4, [r1, #4]
    e662:	7204      	strb	r4, [r0, #8]
    e664:	881d      	ldrh	r5, [r3, #0]
    e666:	f8a1 5005 	strh.w	r5, [r1, #5]
    e66a:	f892 5069 	ldrb.w	r5, [r2, #105]	; 0x69
    e66e:	71cd      	strb	r5, [r1, #7]
    e670:	f8b2 506a 	ldrh.w	r5, [r2, #106]	; 0x6a
    e674:	810d      	strh	r5, [r1, #8]
    e676:	f8b2 506c 	ldrh.w	r5, [r2, #108]	; 0x6c
    e67a:	814d      	strh	r5, [r1, #10]
    e67c:	7a05      	ldrb	r5, [r0, #8]
    e67e:	f88d 5000 	strb.w	r5, [sp]
    e682:	9d00      	ldr	r5, [sp, #0]
    e684:	9500      	str	r5, [sp, #0]
    e686:	f89d 5000 	ldrb.w	r5, [sp]
    e68a:	2d00      	cmp	r5, #0
    e68c:	d1e9      	bne.n	e662 <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A+0x14>
    e68e:	bd38      	pop	{r3, r4, r5, pc}

0000e690 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>:
    e690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e694:	7803      	ldrb	r3, [r0, #0]
    e696:	6840      	ldr	r0, [r0, #4]
    e698:	2501      	movs	r5, #1
    e69a:	f100 0488 	add.w	r4, r0, #136	; 0x88
    e69e:	f500 779c 	add.w	r7, r0, #312	; 0x138
    e6a2:	f890 00e7 	ldrb.w	r0, [r0, #231]	; 0xe7
    e6a6:	f04f 0600 	mov.w	r6, #0
    e6aa:	0780      	lsls	r0, r0, #30
    e6ac:	d410      	bmi.n	e6d0 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x40>
    e6ae:	7f62      	ldrb	r2, [r4, #29]
    e6b0:	2100      	movs	r1, #0
    e6b2:	4620      	mov	r0, r4
    e6b4:	f7ff fa22 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e6b8:	b130      	cbz	r0, e6c8 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x38>
    e6ba:	7765      	strb	r5, [r4, #29]
    e6bc:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
    e6c0:	f8a4 6054 	strh.w	r6, [r4, #84]	; 0x54
    e6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e6c8:	216e      	movs	r1, #110	; 0x6e
    e6ca:	2040      	movs	r0, #64	; 0x40
    e6cc:	f7f2 f9ca 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e6d0:	2300      	movs	r3, #0
    e6d2:	7fa2      	ldrb	r2, [r4, #30]
    e6d4:	4619      	mov	r1, r3
    e6d6:	4620      	mov	r0, r4
    e6d8:	f7ff fa10 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e6dc:	b108      	cbz	r0, e6e2 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x52>
    e6de:	f884 605c 	strb.w	r6, [r4, #92]	; 0x5c
    e6e2:	74be      	strb	r6, [r7, #18]
    e6e4:	e7ee      	b.n	e6c4 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x34>
    e6e6:	2200      	movs	r2, #0
    e6e8:	704a      	strb	r2, [r1, #1]
    e6ea:	221d      	movs	r2, #29
    e6ec:	700a      	strb	r2, [r1, #0]
    e6ee:	f8d0 000a 	ldr.w	r0, [r0, #10]
    e6f2:	6048      	str	r0, [r1, #4]
    e6f4:	4770      	bx	lr
    e6f6:	b510      	push	{r4, lr}
    e6f8:	4604      	mov	r4, r0
    e6fa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    e6fe:	e9d4 1000 	ldrd	r1, r0, [r4]
    e702:	4050      	eors	r0, r2
    e704:	ea70 0101 	orns	r1, r0, r1
    e708:	d008      	beq.n	e71c <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x8c>
    e70a:	f7fc fd41 	bl	b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    e70e:	e9d4 2300 	ldrd	r2, r3, [r4]
    e712:	1a80      	subs	r0, r0, r2
    e714:	4199      	sbcs	r1, r3
    e716:	d301      	bcc.n	e71c <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x8c>
    e718:	2001      	movs	r0, #1
    e71a:	bd10      	pop	{r4, pc}
    e71c:	2000      	movs	r0, #0
    e71e:	bd10      	pop	{r4, pc}
    e720:	2801      	cmp	r0, #1
    e722:	d102      	bne.n	e72a <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x9a>
    e724:	7948      	ldrb	r0, [r1, #5]
    e726:	0980      	lsrs	r0, r0, #6
    e728:	d001      	beq.n	e72e <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x9e>
    e72a:	2000      	movs	r0, #0
    e72c:	4770      	bx	lr
    e72e:	2001      	movs	r0, #1
    e730:	4770      	bx	lr
    e732:	2801      	cmp	r0, #1
    e734:	d106      	bne.n	e744 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb4>
    e736:	7948      	ldrb	r0, [r1, #5]
    e738:	2101      	movs	r1, #1
    e73a:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    e73e:	d101      	bne.n	e744 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb4>
    e740:	2001      	movs	r0, #1
    e742:	4770      	bx	lr
    e744:	2000      	movs	r0, #0
    e746:	4770      	bx	lr
    e748:	b118      	cbz	r0, e752 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc2>
    e74a:	2802      	cmp	r0, #2
    e74c:	d001      	beq.n	e752 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc2>
    e74e:	2001      	movs	r0, #1
    e750:	4770      	bx	lr
    e752:	2000      	movs	r0, #0
    e754:	4770      	bx	lr
    e756:	2802      	cmp	r0, #2
    e758:	d003      	beq.n	e762 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xd2>
    e75a:	2803      	cmp	r0, #3
    e75c:	d001      	beq.n	e762 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xd2>
    e75e:	2000      	movs	r0, #0
    e760:	4770      	bx	lr
    e762:	2001      	movs	r0, #1
    e764:	4770      	bx	lr

0000e766 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>:
    e766:	f7f5 bd93 	b.w	4290 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x290>

0000e76a <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>:
    e76a:	b510      	push	{r4, lr}
    e76c:	2000      	movs	r0, #0
    e76e:	f7f5 fbc9 	bl	3f04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x92c>
    e772:	f7f4 ff4f 	bl	3614 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    e776:	f7f5 fd99 	bl	42ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2ac>
    e77a:	2000      	movs	r0, #0
    e77c:	bd10      	pop	{r4, pc}
    e77e:	b510      	push	{r4, lr}
    e780:	f7f5 fbda 	bl	3f38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x960>
    e784:	f7f4 ff46 	bl	3614 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    e788:	f7f9 fa92 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e78c:	2005      	movs	r0, #5
    e78e:	bd10      	pop	{r4, pc}
    e790:	b510      	push	{r4, lr}
    e792:	f7f5 fbd1 	bl	3f38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x960>
    e796:	f7f9 fa8b 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e79a:	2005      	movs	r0, #5
    e79c:	bd10      	pop	{r4, pc}
    e79e:	b530      	push	{r4, r5, lr}
    e7a0:	b08b      	sub	sp, #44	; 0x2c
    e7a2:	4605      	mov	r5, r0
    e7a4:	f7f5 fbc8 	bl	3f38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x960>
    e7a8:	7828      	ldrb	r0, [r5, #0]
    e7aa:	4669      	mov	r1, sp
    e7ac:	f000 040f 	and.w	r4, r0, #15
    e7b0:	4622      	mov	r2, r4
    e7b2:	4628      	mov	r0, r5
    e7b4:	f7f5 ff26 	bl	4604 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    e7b8:	2200      	movs	r2, #0
    e7ba:	4621      	mov	r1, r4
    e7bc:	4668      	mov	r0, sp
    e7be:	f7f4 ffb1 	bl	3724 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x14c>
    e7c2:	4621      	mov	r1, r4
    e7c4:	4668      	mov	r0, sp
    e7c6:	f7f5 fb37 	bl	3e38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x860>
    e7ca:	4604      	mov	r4, r0
    e7cc:	f7f4 ff22 	bl	3614 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    e7d0:	b00b      	add	sp, #44	; 0x2c
    e7d2:	4620      	mov	r0, r4
    e7d4:	bd30      	pop	{r4, r5, pc}
    e7d6:	f240 31a7 	movw	r1, #935	; 0x3a7
    e7da:	2032      	movs	r0, #50	; 0x32
    e7dc:	f7f2 f942 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e7e0:	b510      	push	{r4, lr}
    e7e2:	f7f5 fba9 	bl	3f38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x960>
    e7e6:	f7f9 fa63 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e7ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e7ee:	f7f5 bd65 	b.w	42bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2bc>
    e7f2:	f7f5 bd4d 	b.w	4290 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x290>
    e7f6:	f7fe bf0e 	b.w	d616 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    e7fa:	b570      	push	{r4, r5, r6, lr}
    e7fc:	4614      	mov	r4, r2
    e7fe:	461d      	mov	r5, r3
    e800:	4606      	mov	r6, r0
    e802:	f7fc fcc5 	bl	b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    e806:	1900      	adds	r0, r0, r4
    e808:	4169      	adcs	r1, r5
    e80a:	e9c6 0100 	strd	r0, r1, [r6]
    e80e:	bd70      	pop	{r4, r5, r6, pc}

0000e810 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>:
    e810:	b510      	push	{r4, lr}
    e812:	f7f2 fd27 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e816:	f000 f944 	bl	eaa2 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    e81a:	4604      	mov	r4, r0
    e81c:	221c      	movs	r2, #28
    e81e:	2100      	movs	r1, #0
    e820:	3009      	adds	r0, #9
    e822:	f001 ff9e 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e826:	207f      	movs	r0, #127	; 0x7f
    e828:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    e82c:	21ff      	movs	r1, #255	; 0xff
    e82e:	75e1      	strb	r1, [r4, #23]
    e830:	72a1      	strb	r1, [r4, #10]
    e832:	7721      	strb	r1, [r4, #28]
    e834:	7ce0      	ldrb	r0, [r4, #19]
    e836:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    e83a:	3020      	adds	r0, #32
    e83c:	74e0      	strb	r0, [r4, #19]
    e83e:	bd10      	pop	{r4, pc}

0000e840 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>:
    e840:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    e844:	461d      	mov	r5, r3
    e846:	e9dd ba0b 	ldrd	fp, sl, [sp, #44]	; 0x2c
    e84a:	4616      	mov	r6, r2
    e84c:	4688      	mov	r8, r1
    e84e:	4681      	mov	r9, r0
    e850:	f7f2 fd08 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e854:	4604      	mov	r4, r0
    e856:	f7fe fda7 	bl	d3a8 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    e85a:	2801      	cmp	r0, #1
    e85c:	d066      	beq.n	e92c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xec>
    e85e:	4620      	mov	r0, r4
    e860:	f000 f91f 	bl	eaa2 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    e864:	4604      	mov	r4, r0
    e866:	221c      	movs	r2, #28
    e868:	2100      	movs	r1, #0
    e86a:	3009      	adds	r0, #9
    e86c:	f001 ff79 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e870:	2701      	movs	r7, #1
    e872:	7267      	strb	r7, [r4, #9]
    e874:	ea5f 0008 	movs.w	r0, r8
    e878:	d009      	beq.n	e88e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x4e>
    e87a:	2801      	cmp	r0, #1
    e87c:	d00b      	beq.n	e896 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x56>
    e87e:	2802      	cmp	r0, #2
    e880:	d02d      	beq.n	e8de <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x9e>
    e882:	f1b8 0f06 	cmp.w	r8, #6
    e886:	d02c      	beq.n	e8e2 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa2>
    e888:	f240 310b 	movw	r1, #779	; 0x30b
    e88c:	e04b      	b.n	e926 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe6>
    e88e:	7ce0      	ldrb	r0, [r4, #19]
    e890:	f040 0001 	orr.w	r0, r0, #1
    e894:	e026      	b.n	e8e4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa4>
    e896:	7ce0      	ldrb	r0, [r4, #19]
    e898:	f040 0005 	orr.w	r0, r0, #5
    e89c:	f040 0010 	orr.w	r0, r0, #16
    e8a0:	74e0      	strb	r0, [r4, #19]
    e8a2:	f104 030a 	add.w	r3, r4, #10
    e8a6:	1c5a      	adds	r2, r3, #1
    e8a8:	4648      	mov	r0, r9
    e8aa:	990a      	ldr	r1, [sp, #40]	; 0x28
    e8ac:	f000 f8de 	bl	ea6c <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa6>
    e8b0:	f884 a012 	strb.w	sl, [r4, #18]
    e8b4:	7567      	strb	r7, [r4, #21]
    e8b6:	2000      	movs	r0, #0
    e8b8:	75a0      	strb	r0, [r4, #22]
    e8ba:	20ff      	movs	r0, #255	; 0xff
    e8bc:	75e0      	strb	r0, [r4, #23]
    e8be:	7ce1      	ldrb	r1, [r4, #19]
    e8c0:	0749      	lsls	r1, r1, #29
    e8c2:	d518      	bpl.n	e8f6 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb6>
    e8c4:	f104 001d 	add.w	r0, r4, #29
    e8c8:	1e41      	subs	r1, r0, #1
    e8ca:	2d02      	cmp	r5, #2
    e8cc:	d00d      	beq.n	e8ea <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xaa>
    e8ce:	2d03      	cmp	r5, #3
    e8d0:	d00b      	beq.n	e8ea <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xaa>
    e8d2:	f8d9 2008 	ldr.w	r2, [r9, #8]
    e8d6:	6813      	ldr	r3, [r2, #0]
    e8d8:	6003      	str	r3, [r0, #0]
    e8da:	8892      	ldrh	r2, [r2, #4]
    e8dc:	e008      	b.n	e8f0 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb0>
    e8de:	7ce0      	ldrb	r0, [r4, #19]
    e8e0:	e7dc      	b.n	e89c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    e8e2:	7ce0      	ldrb	r0, [r4, #19]
    e8e4:	f040 0002 	orr.w	r0, r0, #2
    e8e8:	e7d8      	b.n	e89c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    e8ea:	6832      	ldr	r2, [r6, #0]
    e8ec:	6002      	str	r2, [r0, #0]
    e8ee:	88b2      	ldrh	r2, [r6, #4]
    e8f0:	8082      	strh	r2, [r0, #4]
    e8f2:	700d      	strb	r5, [r1, #0]
    e8f4:	e000      	b.n	e8f8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb8>
    e8f6:	7720      	strb	r0, [r4, #28]
    e8f8:	207f      	movs	r0, #127	; 0x7f
    e8fa:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    e8fe:	f884 b024 	strb.w	fp, [r4, #36]	; 0x24
    e902:	f7f2 fca9 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    e906:	4605      	mov	r5, r0
    e908:	f7f2 fcac 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e90c:	2201      	movs	r2, #1
    e90e:	4629      	mov	r1, r5
    e910:	f000 f8d0 	bl	eab4 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xee>
    e914:	b128      	cbz	r0, e922 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe2>
    e916:	4620      	mov	r0, r4
    e918:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    e91c:	2100      	movs	r1, #0
    e91e:	f7f5 be69 	b.w	45f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5f4>
    e922:	f240 312b 	movw	r1, #811	; 0x32b
    e926:	2033      	movs	r0, #51	; 0x33
    e928:	f7f2 f89c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e92c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000e930 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>:
    e930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e934:	461e      	mov	r6, r3
    e936:	4617      	mov	r7, r2
    e938:	4689      	mov	r9, r1
    e93a:	4682      	mov	sl, r0
    e93c:	f8dd 8020 	ldr.w	r8, [sp, #32]
    e940:	f7f2 fc90 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e944:	4604      	mov	r4, r0
    e946:	f7fe fd2f 	bl	d3a8 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    e94a:	2801      	cmp	r0, #1
    e94c:	d039      	beq.n	e9c2 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x92>
    e94e:	4620      	mov	r0, r4
    e950:	f000 f8a7 	bl	eaa2 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    e954:	4604      	mov	r4, r0
    e956:	221c      	movs	r2, #28
    e958:	2100      	movs	r1, #0
    e95a:	3009      	adds	r0, #9
    e95c:	f001 ff01 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e960:	2501      	movs	r5, #1
    e962:	f104 030a 	add.w	r3, r4, #10
    e966:	7265      	strb	r5, [r4, #9]
    e968:	1c5a      	adds	r2, r3, #1
    e96a:	4649      	mov	r1, r9
    e96c:	4650      	mov	r0, sl
    e96e:	f000 f87d 	bl	ea6c <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa6>
    e972:	f884 8012 	strb.w	r8, [r4, #18]
    e976:	7ce0      	ldrb	r0, [r4, #19]
    e978:	21ff      	movs	r1, #255	; 0xff
    e97a:	f367 0000 	bfi	r0, r7, #0, #1
    e97e:	f040 001a 	orr.w	r0, r0, #26
    e982:	74e0      	strb	r0, [r4, #19]
    e984:	7565      	strb	r5, [r4, #21]
    e986:	2000      	movs	r0, #0
    e988:	75a0      	strb	r0, [r4, #22]
    e98a:	75e1      	strb	r1, [r4, #23]
    e98c:	7721      	strb	r1, [r4, #28]
    e98e:	207f      	movs	r0, #127	; 0x7f
    e990:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    e994:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    e998:	f7f2 fc5e 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    e99c:	4605      	mov	r5, r0
    e99e:	f7f2 fc61 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e9a2:	2201      	movs	r2, #1
    e9a4:	4629      	mov	r1, r5
    e9a6:	f000 f885 	bl	eab4 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xee>
    e9aa:	b128      	cbz	r0, e9b8 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x88>
    e9ac:	4620      	mov	r0, r4
    e9ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e9b2:	2100      	movs	r1, #0
    e9b4:	f7f5 be1e 	b.w	45f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5f4>
    e9b8:	f44f 7156 	mov.w	r1, #856	; 0x358
    e9bc:	2033      	movs	r0, #51	; 0x33
    e9be:	f7f2 f851 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e9c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e9c6 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>:
    e9c6:	f7ff bf23 	b.w	e810 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    e9ca:	b5f0      	push	{r4, r5, r6, r7, lr}
    e9cc:	b08b      	sub	sp, #44	; 0x2c
    e9ce:	460f      	mov	r7, r1
    e9d0:	f7f2 fc48 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e9d4:	4604      	mov	r4, r0
    e9d6:	f7fe fd38 	bl	d44a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    e9da:	0005      	movs	r5, r0
    e9dc:	d00c      	beq.n	e9f8 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x32>
    e9de:	4620      	mov	r0, r4
    e9e0:	4629      	mov	r1, r5
    e9e2:	aa0a      	add	r2, sp, #40	; 0x28
    e9e4:	f7fe fd4f 	bl	d486 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    e9e8:	4606      	mov	r6, r0
    e9ea:	f7f2 fc35 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    e9ee:	42b0      	cmp	r0, r6
    e9f0:	d005      	beq.n	e9fe <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x38>
    e9f2:	f240 11ab 	movw	r1, #427	; 0x1ab
    e9f6:	e036      	b.n	ea66 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa0>
    e9f8:	f240 11a1 	movw	r1, #417	; 0x1a1
    e9fc:	e033      	b.n	ea66 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa0>
    e9fe:	4669      	mov	r1, sp
    ea00:	980a      	ldr	r0, [sp, #40]	; 0x28
    ea02:	f000 f859 	bl	eab8 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    ea06:	1d3e      	adds	r6, r7, #4
    ea08:	4628      	mov	r0, r5
    ea0a:	f7fe fccb 	bl	d3a4 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    ea0e:	4605      	mov	r5, r0
    ea10:	f100 0109 	add.w	r1, r0, #9
    ea14:	221c      	movs	r2, #28
    ea16:	4630      	mov	r0, r6
    ea18:	f001 fe29 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ea1c:	7ce8      	ldrb	r0, [r5, #19]
    ea1e:	f04f 0500 	mov.w	r5, #0
    ea22:	06c1      	lsls	r1, r0, #27
    ea24:	d50d      	bpl.n	ea42 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7c>
    ea26:	0740      	lsls	r0, r0, #29
    ea28:	d40a      	bmi.n	ea40 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7a>
    ea2a:	f89d 2010 	ldrb.w	r2, [sp, #16]
    ea2e:	f106 001c 	add.w	r0, r6, #28
    ea32:	9903      	ldr	r1, [sp, #12]
    ea34:	f001 fe1b 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ea38:	f89d 0010 	ldrb.w	r0, [sp, #16]
    ea3c:	7230      	strb	r0, [r6, #8]
    ea3e:	e000      	b.n	ea42 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7c>
    ea40:	7235      	strb	r5, [r6, #8]
    ea42:	707d      	strb	r5, [r7, #1]
    ea44:	2005      	movs	r0, #5
    ea46:	7038      	strb	r0, [r7, #0]
    ea48:	4638      	mov	r0, r7
    ea4a:	f7f5 fd63 	bl	4514 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x514>
    ea4e:	4620      	mov	r0, r4
    ea50:	f7fe fcc3 	bl	d3da <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    ea54:	b128      	cbz	r0, ea62 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x9c>
    ea56:	4620      	mov	r0, r4
    ea58:	2100      	movs	r1, #0
    ea5a:	f7fe fdb2 	bl	d5c2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    ea5e:	b00b      	add	sp, #44	; 0x2c
    ea60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea62:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    ea66:	2033      	movs	r0, #51	; 0x33
    ea68:	f7f1 fffc 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea6c:	b510      	push	{r4, lr}
    ea6e:	461c      	mov	r4, r3
    ea70:	460b      	mov	r3, r1
    ea72:	29ff      	cmp	r1, #255	; 0xff
    ea74:	d00d      	beq.n	ea92 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xcc>
    ea76:	4621      	mov	r1, r4
    ea78:	4618      	mov	r0, r3
    ea7a:	f7f3 fbcf 	bl	221c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    ea7e:	b120      	cbz	r0, ea8a <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xc4>
    ea80:	7820      	ldrb	r0, [r4, #0]
    ea82:	f040 0002 	orr.w	r0, r0, #2
    ea86:	7020      	strb	r0, [r4, #0]
    ea88:	bd10      	pop	{r4, pc}
    ea8a:	21dc      	movs	r1, #220	; 0xdc
    ea8c:	2033      	movs	r0, #51	; 0x33
    ea8e:	f7f1 ffe9 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea92:	7c41      	ldrb	r1, [r0, #17]
    ea94:	7021      	strb	r1, [r4, #0]
    ea96:	6840      	ldr	r0, [r0, #4]
    ea98:	6801      	ldr	r1, [r0, #0]
    ea9a:	6011      	str	r1, [r2, #0]
    ea9c:	8880      	ldrh	r0, [r0, #4]
    ea9e:	8090      	strh	r0, [r2, #4]
    eaa0:	bd10      	pop	{r4, pc}
    eaa2:	b51c      	push	{r2, r3, r4, lr}
    eaa4:	4669      	mov	r1, sp
    eaa6:	aa01      	add	r2, sp, #4
    eaa8:	f7fe fcdf 	bl	d46a <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    eaac:	9800      	ldr	r0, [sp, #0]
    eaae:	f7fe fc79 	bl	d3a4 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    eab2:	bd1c      	pop	{r2, r3, r4, pc}
    eab4:	f7fe bc2d 	b.w	d312 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>

0000eab8 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>:
    eab8:	7802      	ldrb	r2, [r0, #0]
    eaba:	f002 020f 	and.w	r2, r2, #15
    eabe:	f7f5 bda1 	b.w	4604 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>

0000eac2 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>:
    eac2:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    eac4:	255e      	movs	r5, #94	; 0x5e
    eac6:	4668      	mov	r0, sp
    eac8:	f7fd fe00 	bl	c6cc <mpsl_fem_pa_is_configured>
    eacc:	f89d 0000 	ldrb.w	r0, [sp]
    ead0:	b108      	cbz	r0, ead6 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x14>
    ead2:	2401      	movs	r4, #1
    ead4:	e000      	b.n	ead8 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x16>
    ead6:	2400      	movs	r4, #0
    ead8:	a801      	add	r0, sp, #4
    eada:	f7fd fddf 	bl	c69c <mpsl_fem_lna_is_configured>
    eade:	f89d 0004 	ldrb.w	r0, [sp, #4]
    eae2:	b100      	cbz	r0, eae6 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x24>
    eae4:	2001      	movs	r0, #1
    eae6:	4304      	orrs	r4, r0
    eae8:	d000      	beq.n	eaec <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x2a>
    eaea:	2568      	movs	r5, #104	; 0x68
    eaec:	4628      	mov	r0, r5
    eaee:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000eaf0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>:
    eaf0:	b510      	push	{r4, lr}
    eaf2:	f7ff ffe6 	bl	eac2 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    eaf6:	3069      	adds	r0, #105	; 0x69
    eaf8:	b280      	uxth	r0, r0
    eafa:	bd10      	pop	{r4, pc}
    eafc:	6980      	ldr	r0, [r0, #24]
    eafe:	2800      	cmp	r0, #0
    eb00:	d000      	beq.n	eb04 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x14>
    eb02:	2001      	movs	r0, #1
    eb04:	4770      	bx	lr
    eb06:	b510      	push	{r4, lr}
    eb08:	2802      	cmp	r0, #2
    eb0a:	d006      	beq.n	eb1a <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x2a>
    eb0c:	2108      	movs	r1, #8
    eb0e:	2801      	cmp	r0, #1
    eb10:	d005      	beq.n	eb1e <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x2e>
    eb12:	21f5      	movs	r1, #245	; 0xf5
    eb14:	2005      	movs	r0, #5
    eb16:	f7f1 ffa5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb1a:	2104      	movs	r1, #4
    eb1c:	e7f7      	b.n	eb0e <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x1e>
    eb1e:	202a      	movs	r0, #42	; 0x2a
    eb20:	2228      	movs	r2, #40	; 0x28
    eb22:	fb11 2000 	smlabb	r0, r1, r0, r2
    eb26:	b280      	uxth	r0, r0
    eb28:	bd10      	pop	{r4, pc}
    eb2a:	9800      	ldr	r0, [sp, #0]
    eb2c:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    eb30:	1810      	adds	r0, r2, r0
    eb32:	f143 0300 	adc.w	r3, r3, #0
    eb36:	1840      	adds	r0, r0, r1
    eb38:	f143 0100 	adc.w	r1, r3, #0
    eb3c:	3833      	subs	r0, #51	; 0x33
    eb3e:	f161 0100 	sbc.w	r1, r1, #0
    eb42:	f240 42e2 	movw	r2, #1250	; 0x4e2
    eb46:	1880      	adds	r0, r0, r2
    eb48:	f141 0100 	adc.w	r1, r1, #0
    eb4c:	4770      	bx	lr
    eb4e:	b510      	push	{r4, lr}
    eb50:	f7ff ffb7 	bl	eac2 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    eb54:	f500 7081 	add.w	r0, r0, #258	; 0x102
    eb58:	b280      	uxth	r0, r0
    eb5a:	bd10      	pop	{r4, pc}
    eb5c:	f7fb bb5c 	b.w	a218 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    eb60:	1a10      	subs	r0, r2, r0
    eb62:	4770      	bx	lr

0000eb64 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>:
    eb64:	b510      	push	{r4, lr}
    eb66:	2905      	cmp	r1, #5
    eb68:	d22d      	bcs.n	ebc6 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x62>
    eb6a:	e8df f001 	tbb	[pc, r1]
    eb6e:	0a05      	.short	0x0a05
    eb70:	00280e03 	.word	0x00280e03
    eb74:	2100      	movs	r1, #0
    eb76:	e000      	b.n	eb7a <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x16>
    eb78:	2101      	movs	r1, #1
    eb7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eb7e:	f7f6 bbbd 	b.w	52fc <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x90>
    eb82:	2103      	movs	r1, #3
    eb84:	f880 1248 	strb.w	r1, [r0, #584]	; 0x248
    eb88:	bd10      	pop	{r4, pc}
    eb8a:	4604      	mov	r4, r0
    eb8c:	6900      	ldr	r0, [r0, #16]
    eb8e:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    eb92:	f8d4 026c 	ldr.w	r0, [r4, #620]	; 0x26c
    eb96:	6220      	str	r0, [r4, #32]
    eb98:	f8b4 0268 	ldrh.w	r0, [r4, #616]	; 0x268
    eb9c:	84a0      	strh	r0, [r4, #36]	; 0x24
    eb9e:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
    eba2:	6120      	str	r0, [r4, #16]
    eba4:	f8b4 0274 	ldrh.w	r0, [r4, #628]	; 0x274
    eba8:	8320      	strh	r0, [r4, #24]
    ebaa:	f8b4 0276 	ldrh.w	r0, [r4, #630]	; 0x276
    ebae:	8360      	strh	r0, [r4, #26]
    ebb0:	4620      	mov	r0, r4
    ebb2:	f000 f817 	bl	ebe4 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa>
    ebb6:	2002      	movs	r0, #2
    ebb8:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
    ebbc:	bd10      	pop	{r4, pc}
    ebbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ebc2:	f000 b80f 	b.w	ebe4 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa>
    ebc6:	f240 21fd 	movw	r1, #765	; 0x2fd
    ebca:	2035      	movs	r0, #53	; 0x35
    ebcc:	f7f1 ff4a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ebd0 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>:
    ebd0:	b510      	push	{r4, lr}
    ebd2:	f7f6 fb63 	bl	529c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x30>
    ebd6:	2000      	movs	r0, #0
    ebd8:	bd10      	pop	{r4, pc}

0000ebda <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY>:
    ebda:	f8c0 1230 	str.w	r1, [r0, #560]	; 0x230
    ebde:	4770      	bx	lr
    ebe0:	2000      	movs	r0, #0
    ebe2:	4770      	bx	lr
    ebe4:	b570      	push	{r4, r5, r6, lr}
    ebe6:	4604      	mov	r4, r0
    ebe8:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    ebec:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    ebf0:	f7f6 fba0 	bl	5334 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xc8>
    ebf4:	4605      	mov	r5, r0
    ebf6:	f7ff ff7b 	bl	eaf0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    ebfa:	4601      	mov	r1, r0
    ebfc:	462a      	mov	r2, r5
    ebfe:	4620      	mov	r0, r4
    ec00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ec04:	f7ff bb26 	b.w	e254 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    ec08:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    ec0c:	469a      	mov	sl, r3
    ec0e:	4691      	mov	r9, r2
    ec10:	460c      	mov	r4, r1
    ec12:	4606      	mov	r6, r0
    ec14:	2500      	movs	r5, #0
    ec16:	f7ff ff54 	bl	eac2 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    ec1a:	4680      	mov	r8, r0
    ec1c:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
    ec20:	280d      	cmp	r0, #13
    ec22:	d017      	beq.n	ec54 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x7a>
    ec24:	280e      	cmp	r0, #14
    ec26:	d015      	beq.n	ec54 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x7a>
    ec28:	2000      	movs	r0, #0
    ec2a:	4683      	mov	fp, r0
    ec2c:	f1ba 0f00 	cmp.w	sl, #0
    ec30:	d003      	beq.n	ec3a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x60>
    ec32:	2101      	movs	r1, #1
    ec34:	4620      	mov	r0, r4
    ec36:	f7f6 fd49 	bl	56cc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    ec3a:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    ec3e:	2701      	movs	r7, #1
    ec40:	b150      	cbz	r0, ec58 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x7e>
    ec42:	2801      	cmp	r0, #1
    ec44:	d01a      	beq.n	ec7c <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa2>
    ec46:	2802      	cmp	r0, #2
    ec48:	d012      	beq.n	ec70 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x96>
    ec4a:	2803      	cmp	r0, #3
    ec4c:	d016      	beq.n	ec7c <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa2>
    ec4e:	f240 2136 	movw	r1, #566	; 0x236
    ec52:	e08e      	b.n	ed72 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x198>
    ec54:	2001      	movs	r0, #1
    ec56:	e7e8      	b.n	ec2a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x50>
    ec58:	f1b9 0f00 	cmp.w	r9, #0
    ec5c:	d005      	beq.n	ec6a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x90>
    ec5e:	f884 7248 	strb.w	r7, [r4, #584]	; 0x248
    ec62:	4620      	mov	r0, r4
    ec64:	f7ff ffbe 	bl	ebe4 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa>
    ec68:	e009      	b.n	ec7e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa4>
    ec6a:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
    ec6e:	e080      	b.n	ed72 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x198>
    ec70:	2003      	movs	r0, #3
    ec72:	f8d4 5250 	ldr.w	r5, [r4, #592]	; 0x250
    ec76:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
    ec7a:	e000      	b.n	ec7e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa4>
    ec7c:	6925      	ldr	r5, [r4, #16]
    ec7e:	e9d4 108a 	ldrd	r1, r0, [r4, #552]	; 0x228
    ec82:	f04f 0900 	mov.w	r9, #0
    ec86:	1949      	adds	r1, r1, r5
    ec88:	eb40 0009 	adc.w	r0, r0, r9
    ec8c:	e9c4 108a 	strd	r1, r0, [r4, #552]	; 0x228
    ec90:	e9c6 1004 	strd	r1, r0, [r6, #16]
    ec94:	f886 9000 	strb.w	r9, [r6]
    ec98:	f8a6 8008 	strh.w	r8, [r6, #8]
    ec9c:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
    eca0:	280d      	cmp	r0, #13
    eca2:	d02b      	beq.n	ecfc <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x122>
    eca4:	280b      	cmp	r0, #11
    eca6:	d029      	beq.n	ecfc <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x122>
    eca8:	2825      	cmp	r0, #37	; 0x25
    ecaa:	d027      	beq.n	ecfc <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x122>
    ecac:	2000      	movs	r0, #0
    ecae:	4680      	mov	r8, r0
    ecb0:	4620      	mov	r0, r4
    ecb2:	f7f6 fbd5 	bl	5460 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    ecb6:	4601      	mov	r1, r0
    ecb8:	f1a8 0001 	sub.w	r0, r8, #1
    ecbc:	4201      	tst	r1, r0
    ecbe:	d102      	bne.n	ecc6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    ecc0:	f886 900a 	strb.w	r9, [r6, #10]
    ecc4:	e005      	b.n	ecd2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xf8>
    ecc6:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    ecca:	2801      	cmp	r0, #1
    eccc:	d018      	beq.n	ed00 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x126>
    ecce:	2002      	movs	r0, #2
    ecd0:	72b0      	strb	r0, [r6, #10]
    ecd2:	72f7      	strb	r7, [r6, #11]
    ecd4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    ecd8:	f7ff faba 	bl	e250 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    ecdc:	6070      	str	r0, [r6, #4]
    ecde:	ea3a 000b 	bics.w	r0, sl, fp
    ece2:	d042      	beq.n	ed6a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x190>
    ece4:	4629      	mov	r1, r5
    ece6:	4630      	mov	r0, r6
    ece8:	f7ff f814 	bl	dd14 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    ecec:	b287      	uxth	r7, r0
    ecee:	4620      	mov	r0, r4
    ecf0:	f7f6 fbb6 	bl	5460 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    ecf4:	f1b8 0f00 	cmp.w	r8, #0
    ecf8:	d004      	beq.n	ed04 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x12a>
    ecfa:	e018      	b.n	ed2e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x154>
    ecfc:	2001      	movs	r0, #1
    ecfe:	e7d6      	b.n	ecae <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xd4>
    ed00:	72b7      	strb	r7, [r6, #10]
    ed02:	e7e6      	b.n	ecd2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xf8>
    ed04:	42b8      	cmp	r0, r7
    ed06:	d812      	bhi.n	ed2e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x154>
    ed08:	f886 900a 	strb.w	r9, [r6, #10]
    ed0c:	e9d4 328a 	ldrd	r3, r2, [r4, #552]	; 0x228
    ed10:	4607      	mov	r7, r0
    ed12:	fb05 f107 	mul.w	r1, r5, r7
    ed16:	1859      	adds	r1, r3, r1
    ed18:	eb42 0209 	adc.w	r2, r2, r9
    ed1c:	e9c6 1204 	strd	r1, r2, [r6, #16]
    ed20:	b32d      	cbz	r5, ed6e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x194>
    ed22:	4629      	mov	r1, r5
    ed24:	4630      	mov	r0, r6
    ed26:	f7fe fff5 	bl	dd14 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    ed2a:	4438      	add	r0, r7
    ed2c:	b287      	uxth	r7, r0
    ed2e:	4639      	mov	r1, r7
    ed30:	4620      	mov	r0, r4
    ed32:	f7f6 fccb 	bl	56cc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    ed36:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    ed3a:	e9c4 018a 	strd	r0, r1, [r4, #552]	; 0x228
    ed3e:	6f20      	ldr	r0, [r4, #112]	; 0x70
    ed40:	2800      	cmp	r0, #0
    ed42:	d012      	beq.n	ed6a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x190>
    ed44:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    ed48:	f8b4 20d2 	ldrh.w	r2, [r4, #210]	; 0xd2
    ed4c:	1a80      	subs	r0, r0, r2
    ed4e:	b201      	sxth	r1, r0
    ed50:	2900      	cmp	r1, #0
    ed52:	dd0a      	ble.n	ed6a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x190>
    ed54:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    ed58:	4401      	add	r1, r0
    ed5a:	1e49      	subs	r1, r1, #1
    ed5c:	fb91 f1f0 	sdiv	r1, r1, r0
    ed60:	b289      	uxth	r1, r1
    ed62:	fb01 2000 	mla	r0, r1, r0, r2
    ed66:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
    ed6a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    ed6e:	f44f 711e 	mov.w	r1, #632	; 0x278
    ed72:	2035      	movs	r0, #53	; 0x35
    ed74:	f7f1 fe76 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed78:	b510      	push	{r4, lr}
    ed7a:	4604      	mov	r4, r0
    ed7c:	2000      	movs	r0, #0
    ed7e:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
    ed82:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    ed86:	f7fb fe9b 	bl	aac0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ed8a:	b140      	cbz	r0, ed9e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1c4>
    ed8c:	2020      	movs	r0, #32
    ed8e:	f884 0249 	strb.w	r0, [r4, #585]	; 0x249
    ed92:	f504 700a 	add.w	r0, r4, #552	; 0x228
    ed96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed9a:	f7f8 b843 	b.w	6e24 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    ed9e:	f44f 71c4 	mov.w	r1, #392	; 0x188
    eda2:	2035      	movs	r0, #53	; 0x35
    eda4:	f7f1 fe5e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eda8:	b510      	push	{r4, lr}
    edaa:	4613      	mov	r3, r2
    edac:	460a      	mov	r2, r1
    edae:	b086      	sub	sp, #24
    edb0:	4604      	mov	r4, r0
    edb2:	4601      	mov	r1, r0
    edb4:	4668      	mov	r0, sp
    edb6:	f7ff ff27 	bl	ec08 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x2e>
    edba:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    edbe:	4669      	mov	r1, sp
    edc0:	f000 f809 	bl	edd6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1fc>
    edc4:	2800      	cmp	r0, #0
    edc6:	d104      	bne.n	edd2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1f8>
    edc8:	f240 21a6 	movw	r1, #678	; 0x2a6
    edcc:	2035      	movs	r0, #53	; 0x35
    edce:	f7f1 fe49 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    edd2:	b006      	add	sp, #24
    edd4:	bd10      	pop	{r4, pc}
    edd6:	f7fb ba1f 	b.w	a218 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    edda:	0000      	.short	0x0000
    eddc:	a1e0a62c 	.word	0xa1e0a62c
    ede0:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    ede4:	f001 0307 	and.w	r3, r1, #7
    ede8:	7802      	ldrb	r2, [r0, #0]
    edea:	2101      	movs	r1, #1
    edec:	4099      	lsls	r1, r3
    edee:	438a      	bics	r2, r1
    edf0:	7002      	strb	r2, [r0, #0]
    edf2:	4770      	bx	lr

0000edf4 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
    edf4:	f7f2 b990 	b.w	1118 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000edf8 <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>:
    edf8:	2000      	movs	r0, #0
    edfa:	4770      	bx	lr

0000edfc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>:
    edfc:	b510      	push	{r4, lr}
    edfe:	f7f7 f977 	bl	60f0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa24>
    ee02:	b128      	cbz	r0, ee10 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14>
    ee04:	2000      	movs	r0, #0
    ee06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee0a:	4601      	mov	r1, r0
    ee0c:	f7f7 b918 	b.w	6040 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x974>
    ee10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee14:	f7f2 bd86 	b.w	1924 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>
    ee18:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    ee1c:	28fe      	cmp	r0, #254	; 0xfe
    ee1e:	d001      	beq.n	ee24 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x28>
    ee20:	2001      	movs	r0, #1
    ee22:	4770      	bx	lr
    ee24:	2000      	movs	r0, #0
    ee26:	4770      	bx	lr
    ee28:	b510      	push	{r4, lr}
    ee2a:	2801      	cmp	r0, #1
    ee2c:	d006      	beq.n	ee3c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    ee2e:	2802      	cmp	r0, #2
    ee30:	d004      	beq.n	ee3c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    ee32:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    ee36:	2006      	movs	r0, #6
    ee38:	f7f1 fe14 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee3c:	bd10      	pop	{r4, pc}
    ee3e:	2801      	cmp	r0, #1
    ee40:	d002      	beq.n	ee48 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4c>
    ee42:	2802      	cmp	r0, #2
    ee44:	d105      	bne.n	ee52 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    ee46:	e002      	b.n	ee4e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x52>
    ee48:	2901      	cmp	r1, #1
    ee4a:	d004      	beq.n	ee56 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    ee4c:	e001      	b.n	ee52 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    ee4e:	2902      	cmp	r1, #2
    ee50:	d001      	beq.n	ee56 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    ee52:	2000      	movs	r0, #0
    ee54:	4770      	bx	lr
    ee56:	2001      	movs	r0, #1
    ee58:	4770      	bx	lr
    ee5a:	e9d0 1232 	ldrd	r1, r2, [r0, #200]	; 0xc8
    ee5e:	428a      	cmp	r2, r1
    ee60:	d301      	bcc.n	ee66 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6a>
    ee62:	1a51      	subs	r1, r2, r1
    ee64:	e000      	b.n	ee68 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6c>
    ee66:	2100      	movs	r1, #0
    ee68:	8b02      	ldrh	r2, [r0, #24]
    ee6a:	1d52      	adds	r2, r2, #5
    ee6c:	428a      	cmp	r2, r1
    ee6e:	d302      	bcc.n	ee76 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7a>
    ee70:	2101      	movs	r1, #1
    ee72:	f880 10d4 	strb.w	r1, [r0, #212]	; 0xd4
    ee76:	4770      	bx	lr
    ee78:	b510      	push	{r4, lr}
    ee7a:	4604      	mov	r4, r0
    ee7c:	6840      	ldr	r0, [r0, #4]
    ee7e:	2300      	movs	r3, #0
    ee80:	4619      	mov	r1, r3
    ee82:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    ee86:	3088      	adds	r0, #136	; 0x88
    ee88:	f7fe fe38 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ee8c:	b168      	cbz	r0, eeaa <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xae>
    ee8e:	6861      	ldr	r1, [r4, #4]
    ee90:	2000      	movs	r0, #0
    ee92:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    ee96:	6861      	ldr	r1, [r4, #4]
    ee98:	2001      	movs	r0, #1
    ee9a:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    ee9e:	6861      	ldr	r1, [r4, #4]
    eea0:	2002      	movs	r0, #2
    eea2:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    eea6:	2000      	movs	r0, #0
    eea8:	bd10      	pop	{r4, pc}
    eeaa:	2001      	movs	r0, #1
    eeac:	bd10      	pop	{r4, pc}
    eeae:	b510      	push	{r4, lr}
    eeb0:	4604      	mov	r4, r0
    eeb2:	6840      	ldr	r0, [r0, #4]
    eeb4:	2300      	movs	r3, #0
    eeb6:	2109      	movs	r1, #9
    eeb8:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    eebc:	3088      	adds	r0, #136	; 0x88
    eebe:	f7fe fe1d 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    eec2:	2800      	cmp	r0, #0
    eec4:	d009      	beq.n	eeda <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xde>
    eec6:	6861      	ldr	r1, [r4, #4]
    eec8:	2000      	movs	r0, #0
    eeca:	f881 00d4 	strb.w	r0, [r1, #212]	; 0xd4
    eece:	6861      	ldr	r1, [r4, #4]
    eed0:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    eed4:	6861      	ldr	r1, [r4, #4]
    eed6:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    eeda:	bd10      	pop	{r4, pc}
    eedc:	6841      	ldr	r1, [r0, #4]
    eede:	f891 20a5 	ldrb.w	r2, [r1, #165]	; 0xa5
    eee2:	2a10      	cmp	r2, #16
    eee4:	d001      	beq.n	eeea <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xee>
    eee6:	2002      	movs	r0, #2
    eee8:	4770      	bx	lr
    eeea:	2200      	movs	r2, #0
    eeec:	f881 20aa 	strb.w	r2, [r1, #170]	; 0xaa
    eef0:	6840      	ldr	r0, [r0, #4]
    eef2:	2113      	movs	r1, #19
    eef4:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    eef8:	4610      	mov	r0, r2
    eefa:	4770      	bx	lr
    eefc:	b510      	push	{r4, lr}
    eefe:	4604      	mov	r4, r0
    ef00:	6840      	ldr	r0, [r0, #4]
    ef02:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    ef06:	2917      	cmp	r1, #23
    ef08:	d001      	beq.n	ef0e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x112>
    ef0a:	2002      	movs	r0, #2
    ef0c:	bd10      	pop	{r4, pc}
    ef0e:	f500 7388 	add.w	r3, r0, #272	; 0x110
    ef12:	f200 2193 	addw	r1, r0, #659	; 0x293
    ef16:	2200      	movs	r2, #0
    ef18:	f200 2083 	addw	r0, r0, #643	; 0x283
    ef1c:	f7fe fd89 	bl	da32 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    ef20:	6862      	ldr	r2, [r4, #4]
    ef22:	2000      	movs	r0, #0
    ef24:	e9c2 0040 	strd	r0, r0, [r2, #256]	; 0x100
    ef28:	6861      	ldr	r1, [r4, #4]
    ef2a:	2001      	movs	r0, #1
    ef2c:	f881 00aa 	strb.w	r0, [r1, #170]	; 0xaa
    ef30:	6861      	ldr	r1, [r4, #4]
    ef32:	2019      	movs	r0, #25
    ef34:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    ef38:	2000      	movs	r0, #0
    ef3a:	bd10      	pop	{r4, pc}
    ef3c:	b510      	push	{r4, lr}
    ef3e:	4604      	mov	r4, r0
    ef40:	6840      	ldr	r0, [r0, #4]
    ef42:	2300      	movs	r3, #0
    ef44:	4619      	mov	r1, r3
    ef46:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    ef4a:	3088      	adds	r0, #136	; 0x88
    ef4c:	f7fe fdd6 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ef50:	b120      	cbz	r0, ef5c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x160>
    ef52:	6861      	ldr	r1, [r4, #4]
    ef54:	200b      	movs	r0, #11
    ef56:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    ef5a:	bd10      	pop	{r4, pc}
    ef5c:	f240 7156 	movw	r1, #1878	; 0x756
    ef60:	2036      	movs	r0, #54	; 0x36
    ef62:	f7f1 fd7f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef66:	b510      	push	{r4, lr}
    ef68:	4604      	mov	r4, r0
    ef6a:	6840      	ldr	r0, [r0, #4]
    ef6c:	2300      	movs	r3, #0
    ef6e:	4619      	mov	r1, r3
    ef70:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    ef74:	3088      	adds	r0, #136	; 0x88
    ef76:	f7fe fdc1 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ef7a:	b120      	cbz	r0, ef86 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x18a>
    ef7c:	6861      	ldr	r1, [r4, #4]
    ef7e:	200d      	movs	r0, #13
    ef80:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    ef84:	bd10      	pop	{r4, pc}
    ef86:	f240 715c 	movw	r1, #1884	; 0x75c
    ef8a:	2036      	movs	r0, #54	; 0x36
    ef8c:	f7f1 fd6a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef90:	b510      	push	{r4, lr}
    ef92:	4604      	mov	r4, r0
    ef94:	6840      	ldr	r0, [r0, #4]
    ef96:	2300      	movs	r3, #0
    ef98:	4619      	mov	r1, r3
    ef9a:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    ef9e:	3088      	adds	r0, #136	; 0x88
    efa0:	f7fe fdac 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    efa4:	b918      	cbnz	r0, efae <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1b2>
    efa6:	6860      	ldr	r0, [r4, #4]
    efa8:	f890 00e6 	ldrb.w	r0, [r0, #230]	; 0xe6
    efac:	b140      	cbz	r0, efc0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c4>
    efae:	6861      	ldr	r1, [r4, #4]
    efb0:	2001      	movs	r0, #1
    efb2:	f881 00e5 	strb.w	r0, [r1, #229]	; 0xe5
    efb6:	6861      	ldr	r1, [r4, #4]
    efb8:	2014      	movs	r0, #20
    efba:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    efbe:	bd10      	pop	{r4, pc}
    efc0:	f240 7171 	movw	r1, #1905	; 0x771
    efc4:	2036      	movs	r0, #54	; 0x36
    efc6:	f7f1 fd4d 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    efca:	f7ff bb03 	b.w	e5d4 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>
    efce:	b510      	push	{r4, lr}
    efd0:	4604      	mov	r4, r0
    efd2:	6840      	ldr	r0, [r0, #4]
    efd4:	2300      	movs	r3, #0
    efd6:	4619      	mov	r1, r3
    efd8:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    efdc:	3088      	adds	r0, #136	; 0x88
    efde:	f7fe fd8d 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    efe2:	b120      	cbz	r0, efee <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1f2>
    efe4:	6861      	ldr	r1, [r4, #4]
    efe6:	201d      	movs	r0, #29
    efe8:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    efec:	bd10      	pop	{r4, pc}
    efee:	f240 7192 	movw	r1, #1938	; 0x792
    eff2:	2036      	movs	r0, #54	; 0x36
    eff4:	f7f1 fd36 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eff8:	b510      	push	{r4, lr}
    effa:	4604      	mov	r4, r0
    effc:	6840      	ldr	r0, [r0, #4]
    effe:	2300      	movs	r3, #0
    f000:	4619      	mov	r1, r3
    f002:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    f006:	3088      	adds	r0, #136	; 0x88
    f008:	f7fe fd78 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f00c:	b120      	cbz	r0, f018 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x21c>
    f00e:	6861      	ldr	r1, [r4, #4]
    f010:	2000      	movs	r0, #0
    f012:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    f016:	bd10      	pop	{r4, pc}
    f018:	f240 7199 	movw	r1, #1945	; 0x799
    f01c:	2036      	movs	r0, #54	; 0x36
    f01e:	f7f1 fd21 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f022:	f7ff bae9 	b.w	e5f8 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>
    f026:	b510      	push	{r4, lr}
    f028:	4604      	mov	r4, r0
    f02a:	6840      	ldr	r0, [r0, #4]
    f02c:	2300      	movs	r3, #0
    f02e:	4619      	mov	r1, r3
    f030:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f034:	3088      	adds	r0, #136	; 0x88
    f036:	f7fe fd61 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f03a:	b120      	cbz	r0, f046 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x24a>
    f03c:	6861      	ldr	r1, [r4, #4]
    f03e:	2005      	movs	r0, #5
    f040:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f044:	bd10      	pop	{r4, pc}
    f046:	f240 7185 	movw	r1, #1925	; 0x785
    f04a:	2036      	movs	r0, #54	; 0x36
    f04c:	f7f1 fd0a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f050:	6840      	ldr	r0, [r0, #4]
    f052:	2100      	movs	r1, #0
    f054:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    f058:	4770      	bx	lr
    f05a:	b510      	push	{r4, lr}
    f05c:	4604      	mov	r4, r0
    f05e:	6840      	ldr	r0, [r0, #4]
    f060:	2300      	movs	r3, #0
    f062:	4619      	mov	r1, r3
    f064:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f068:	3088      	adds	r0, #136	; 0x88
    f06a:	f7fe fd47 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f06e:	b140      	cbz	r0, f082 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x286>
    f070:	6861      	ldr	r1, [r4, #4]
    f072:	2001      	movs	r0, #1
    f074:	f881 00e5 	strb.w	r0, [r1, #229]	; 0xe5
    f078:	6861      	ldr	r1, [r4, #4]
    f07a:	2010      	movs	r0, #16
    f07c:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f080:	bd10      	pop	{r4, pc}
    f082:	f240 7162 	movw	r1, #1890	; 0x762
    f086:	2036      	movs	r0, #54	; 0x36
    f088:	f7f1 fcec 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f08c:	b510      	push	{r4, lr}
    f08e:	6841      	ldr	r1, [r0, #4]
    f090:	f891 20a5 	ldrb.w	r2, [r1, #165]	; 0xa5
    f094:	2a13      	cmp	r2, #19
    f096:	d004      	beq.n	f0a2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2a6>
    f098:	f240 716a 	movw	r1, #1898	; 0x76a
    f09c:	2036      	movs	r0, #54	; 0x36
    f09e:	f7f1 fce1 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0a2:	2201      	movs	r2, #1
    f0a4:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    f0a8:	6840      	ldr	r0, [r0, #4]
    f0aa:	2112      	movs	r1, #18
    f0ac:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    f0b0:	bd10      	pop	{r4, pc}
    f0b2:	b510      	push	{r4, lr}
    f0b4:	4604      	mov	r4, r0
    f0b6:	6840      	ldr	r0, [r0, #4]
    f0b8:	2300      	movs	r3, #0
    f0ba:	4619      	mov	r1, r3
    f0bc:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f0c0:	3088      	adds	r0, #136	; 0x88
    f0c2:	f7fe fd1b 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f0c6:	b120      	cbz	r0, f0d2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2d6>
    f0c8:	6861      	ldr	r1, [r4, #4]
    f0ca:	2020      	movs	r0, #32
    f0cc:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f0d0:	bd10      	pop	{r4, pc}
    f0d2:	f240 71a2 	movw	r1, #1954	; 0x7a2
    f0d6:	2036      	movs	r0, #54	; 0x36
    f0d8:	f7f1 fcc4 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0dc:	b570      	push	{r4, r5, r6, lr}
    f0de:	6841      	ldr	r1, [r0, #4]
    f0e0:	4604      	mov	r4, r0
    f0e2:	f891 0262 	ldrb.w	r0, [r1, #610]	; 0x262
    f0e6:	b910      	cbnz	r0, f0ee <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2f2>
    f0e8:	f891 0263 	ldrb.w	r0, [r1, #611]	; 0x263
    f0ec:	b178      	cbz	r0, f10e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x312>
    f0ee:	2000      	movs	r0, #0
    f0f0:	f891 30a6 	ldrb.w	r3, [r1, #166]	; 0xa6
    f0f4:	2225      	movs	r2, #37	; 0x25
    f0f6:	2500      	movs	r5, #0
    f0f8:	2b22      	cmp	r3, #34	; 0x22
    f0fa:	d00a      	beq.n	f112 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x316>
    f0fc:	f891 30a5 	ldrb.w	r3, [r1, #165]	; 0xa5
    f100:	2b24      	cmp	r3, #36	; 0x24
    f102:	d01b      	beq.n	f13c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x340>
    f104:	f240 71ce 	movw	r1, #1998	; 0x7ce
    f108:	2036      	movs	r0, #54	; 0x36
    f10a:	f7f1 fcab 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f10e:	2001      	movs	r0, #1
    f110:	e7ee      	b.n	f0f0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2f4>
    f112:	b168      	cbz	r0, f130 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x334>
    f114:	f881 50a6 	strb.w	r5, [r1, #166]	; 0xa6
    f118:	6860      	ldr	r0, [r4, #4]
    f11a:	f890 0144 	ldrb.w	r0, [r0, #324]	; 0x144
    f11e:	2801      	cmp	r0, #1
    f120:	d102      	bne.n	f128 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x32c>
    f122:	2000      	movs	r0, #0
    f124:	f7f7 f9a0 	bl	6468 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    f128:	6860      	ldr	r0, [r4, #4]
    f12a:	f880 5144 	strb.w	r5, [r0, #324]	; 0x144
    f12e:	e001      	b.n	f134 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x338>
    f130:	f881 20a6 	strb.w	r2, [r1, #166]	; 0xa6
    f134:	6860      	ldr	r0, [r4, #4]
    f136:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    f13a:	bd70      	pop	{r4, r5, r6, pc}
    f13c:	b128      	cbz	r0, f14a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x34e>
    f13e:	f881 50a5 	strb.w	r5, [r1, #165]	; 0xa5
    f142:	2000      	movs	r0, #0
    f144:	f7f7 f990 	bl	6468 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    f148:	e001      	b.n	f14e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x352>
    f14a:	f881 20a5 	strb.w	r2, [r1, #165]	; 0xa5
    f14e:	6860      	ldr	r0, [r4, #4]
    f150:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    f154:	bd70      	pop	{r4, r5, r6, pc}
    f156:	6842      	ldr	r2, [r0, #4]
    f158:	2100      	movs	r1, #0
    f15a:	f892 3130 	ldrb.w	r3, [r2, #304]	; 0x130
    f15e:	b12b      	cbz	r3, f16c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x370>
    f160:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
    f164:	6840      	ldr	r0, [r0, #4]
    f166:	f880 10e0 	strb.w	r1, [r0, #224]	; 0xe0
    f16a:	4770      	bx	lr
    f16c:	f882 10a6 	strb.w	r1, [r2, #166]	; 0xa6
    f170:	6840      	ldr	r0, [r0, #4]
    f172:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    f176:	4770      	bx	lr
    f178:	b510      	push	{r4, lr}
    f17a:	6840      	ldr	r0, [r0, #4]
    f17c:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    f180:	2919      	cmp	r1, #25
    f182:	d004      	beq.n	f18e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x392>
    f184:	f240 717a 	movw	r1, #1914	; 0x77a
    f188:	2036      	movs	r0, #54	; 0x36
    f18a:	f7f1 fc6b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f18e:	211b      	movs	r1, #27
    f190:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    f194:	bd10      	pop	{r4, pc}
    f196:	b510      	push	{r4, lr}
    f198:	4604      	mov	r4, r0
    f19a:	6840      	ldr	r0, [r0, #4]
    f19c:	2300      	movs	r3, #0
    f19e:	2101      	movs	r1, #1
    f1a0:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
    f1a4:	3088      	adds	r0, #136	; 0x88
    f1a6:	f7fe fca9 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f1aa:	2800      	cmp	r0, #0
    f1ac:	d10a      	bne.n	f1c4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x3c8>
    f1ae:	6861      	ldr	r1, [r4, #4]
    f1b0:	2007      	movs	r0, #7
    f1b2:	f881 00a7 	strb.w	r0, [r1, #167]	; 0xa7
    f1b6:	6861      	ldr	r1, [r4, #4]
    f1b8:	2000      	movs	r0, #0
    f1ba:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    f1be:	6861      	ldr	r1, [r4, #4]
    f1c0:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    f1c4:	bd10      	pop	{r4, pc}
    f1c6:	b570      	push	{r4, r5, r6, lr}
    f1c8:	4604      	mov	r4, r0
    f1ca:	6840      	ldr	r0, [r0, #4]
    f1cc:	2300      	movs	r3, #0
    f1ce:	4619      	mov	r1, r3
    f1d0:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    f1d4:	3088      	adds	r0, #136	; 0x88
    f1d6:	f7fe fc91 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f1da:	2500      	movs	r5, #0
    f1dc:	b110      	cbz	r0, f1e4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x3e8>
    f1de:	6860      	ldr	r0, [r4, #4]
    f1e0:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    f1e4:	6860      	ldr	r0, [r4, #4]
    f1e6:	2300      	movs	r3, #0
    f1e8:	4619      	mov	r1, r3
    f1ea:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f1ee:	3088      	adds	r0, #136	; 0x88
    f1f0:	f7fe fc84 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f1f4:	2800      	cmp	r0, #0
    f1f6:	d002      	beq.n	f1fe <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x402>
    f1f8:	6860      	ldr	r0, [r4, #4]
    f1fa:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    f1fe:	bd70      	pop	{r4, r5, r6, pc}
    f200:	f7ff ba46 	b.w	e690 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>
    f204:	b510      	push	{r4, lr}
    f206:	f890 10ab 	ldrb.w	r1, [r0, #171]	; 0xab
    f20a:	b941      	cbnz	r1, f21e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x422>
    f20c:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f210:	2300      	movs	r3, #0
    f212:	2106      	movs	r1, #6
    f214:	3088      	adds	r0, #136	; 0x88
    f216:	f7fe fc71 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f21a:	2800      	cmp	r0, #0
    f21c:	d000      	beq.n	f220 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x424>
    f21e:	2001      	movs	r0, #1
    f220:	bd10      	pop	{r4, pc}

0000f222 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>:
    f222:	b510      	push	{r4, lr}
    f224:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    f228:	1ac3      	subs	r3, r0, r3
    f22a:	eb61 0104 	sbc.w	r1, r1, r4
    f22e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    f232:	17e0      	asrs	r0, r4, #31
    f234:	1ae4      	subs	r4, r4, r3
    f236:	4188      	sbcs	r0, r1
    f238:	da05      	bge.n	f246 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x24>
    f23a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    f23e:	1a18      	subs	r0, r3, r0
    f240:	f171 0000 	sbcs.w	r0, r1, #0
    f244:	db03      	blt.n	f24e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x2c>
    f246:	21b0      	movs	r1, #176	; 0xb0
    f248:	2037      	movs	r0, #55	; 0x37
    f24a:	f7f1 fc0b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f24e:	2900      	cmp	r1, #0
    f250:	da00      	bge.n	f254 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x32>
    f252:	425b      	negs	r3, r3
    f254:	fbb3 f0f2 	udiv	r0, r3, r2
    f258:	fb02 3010 	mls	r0, r2, r0, r3
    f25c:	2900      	cmp	r1, #0
    f25e:	da02      	bge.n	f266 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x44>
    f260:	2800      	cmp	r0, #0
    f262:	d000      	beq.n	f266 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x44>
    f264:	1a10      	subs	r0, r2, r0
    f266:	bd10      	pop	{r4, pc}
    f268:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f26c:	f001 0107 	and.w	r1, r1, #7
    f270:	7800      	ldrb	r0, [r0, #0]
    f272:	40c8      	lsrs	r0, r1
    f274:	f000 0001 	and.w	r0, r0, #1
    f278:	4770      	bx	lr

0000f27a <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>:
    f27a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f27e:	6856      	ldr	r6, [r2, #4]
    f280:	460c      	mov	r4, r1
    f282:	f506 759c 	add.w	r5, r6, #312	; 0x138
    f286:	f106 0788 	add.w	r7, r6, #136	; 0x88
    f28a:	2823      	cmp	r0, #35	; 0x23
    f28c:	d008      	beq.n	f2a0 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x26>
    f28e:	2824      	cmp	r0, #36	; 0x24
    f290:	d014      	beq.n	f2bc <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x42>
    f292:	2825      	cmp	r0, #37	; 0x25
    f294:	d02a      	beq.n	f2ec <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x72>
    f296:	f44f 718d 	mov.w	r1, #282	; 0x11a
    f29a:	2078      	movs	r0, #120	; 0x78
    f29c:	f7f1 fbe2 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f2a0:	7de8      	ldrb	r0, [r5, #23]
    f2a2:	f000 f8d6 	bl	f452 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    f2a6:	7de9      	ldrb	r1, [r5, #23]
    f2a8:	7121      	strb	r1, [r4, #4]
    f2aa:	7e29      	ldrb	r1, [r5, #24]
    f2ac:	eb06 0040 	add.w	r0, r6, r0, lsl #1
    f2b0:	7161      	strb	r1, [r4, #5]
    f2b2:	f890 0079 	ldrb.w	r0, [r0, #121]	; 0x79
    f2b6:	71a0      	strb	r0, [r4, #6]
    f2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f2bc:	7d28      	ldrb	r0, [r5, #20]
    f2be:	f000 f8c8 	bl	f452 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    f2c2:	eb06 0640 	add.w	r6, r6, r0, lsl #1
    f2c6:	7f78      	ldrb	r0, [r7, #29]
    f2c8:	3678      	adds	r6, #120	; 0x78
    f2ca:	2828      	cmp	r0, #40	; 0x28
    f2cc:	d00c      	beq.n	f2e8 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x6e>
    f2ce:	68b8      	ldr	r0, [r7, #8]
    f2d0:	f7f3 fe7e 	bl	2fd0 <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY>
    f2d4:	7831      	ldrb	r1, [r6, #0]
    f2d6:	7121      	strb	r1, [r4, #4]
    f2d8:	7d69      	ldrb	r1, [r5, #21]
    f2da:	7161      	strb	r1, [r4, #5]
    f2dc:	7871      	ldrb	r1, [r6, #1]
    f2de:	71a1      	strb	r1, [r4, #6]
    f2e0:	71e0      	strb	r0, [r4, #7]
    f2e2:	2000      	movs	r0, #0
    f2e4:	75a8      	strb	r0, [r5, #22]
    f2e6:	e7e7      	b.n	f2b8 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x3e>
    f2e8:	20ff      	movs	r0, #255	; 0xff
    f2ea:	e7f3      	b.n	f2d4 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x5a>
    f2ec:	7d28      	ldrb	r0, [r5, #20]
    f2ee:	f000 f8b0 	bl	f452 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    f2f2:	eb06 0040 	add.w	r0, r6, r0, lsl #1
    f2f6:	7d29      	ldrb	r1, [r5, #20]
    f2f8:	7121      	strb	r1, [r4, #4]
    f2fa:	f810 1f78 	ldrb.w	r1, [r0, #120]!
    f2fe:	7161      	strb	r1, [r4, #5]
    f300:	7d69      	ldrb	r1, [r5, #21]
    f302:	71a1      	strb	r1, [r4, #6]
    f304:	7840      	ldrb	r0, [r0, #1]
    f306:	71e0      	strb	r0, [r4, #7]
    f308:	e7d6      	b.n	f2b8 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x3e>

0000f30a <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>:
    f30a:	b510      	push	{r4, lr}
    f30c:	2801      	cmp	r0, #1
    f30e:	d006      	beq.n	f31e <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x14>
    f310:	2802      	cmp	r0, #2
    f312:	d006      	beq.n	f322 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x18>
    f314:	f240 2162 	movw	r1, #610	; 0x262
    f318:	2078      	movs	r0, #120	; 0x78
    f31a:	f7f1 fba3 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f31e:	2000      	movs	r0, #0
    f320:	bd10      	pop	{r4, pc}
    f322:	2001      	movs	r0, #1
    f324:	bd10      	pop	{r4, pc}

0000f326 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>:
    f326:	207f      	movs	r0, #127	; 0x7f
    f328:	f000 b8ad 	b.w	f486 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x84>

0000f32c <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>:
    f32c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f330:	f000 b8a9 	b.w	f486 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x84>

0000f334 <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>:
    f334:	b510      	push	{r4, lr}
    f336:	4604      	mov	r4, r0
    f338:	f7f8 fa6e 	bl	7818 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f33c:	1e64      	subs	r4, r4, #1
    f33e:	b2e2      	uxtb	r2, r4
    f340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f344:	f000 b86b 	b.w	f41e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1c>

0000f348 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>:
    f348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f34c:	4607      	mov	r7, r0
    f34e:	461e      	mov	r6, r3
    f350:	4690      	mov	r8, r2
    f352:	460c      	mov	r4, r1
    f354:	4608      	mov	r0, r1
    f356:	f7ff ffed 	bl	f334 <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>
    f35a:	b1f8      	cbz	r0, f39c <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    f35c:	687d      	ldr	r5, [r7, #4]
    f35e:	2121      	movs	r1, #33	; 0x21
    f360:	f105 00f6 	add.w	r0, r5, #246	; 0xf6
    f364:	3588      	adds	r5, #136	; 0x88
    f366:	f7ff ff7f 	bl	f268 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    f36a:	b1c8      	cbz	r0, f3a0 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x58>
    f36c:	1e64      	subs	r4, r4, #1
    f36e:	f8d5 1072 	ldr.w	r1, [r5, #114]	; 0x72
    f372:	f8d5 006e 	ldr.w	r0, [r5, #110]	; 0x6e
    f376:	b2e2      	uxtb	r2, r4
    f378:	f000 f851 	bl	f41e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1c>
    f37c:	b180      	cbz	r0, f3a0 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x58>
    f37e:	6878      	ldr	r0, [r7, #4]
    f380:	f890 1151 	ldrb.w	r1, [r0, #337]	; 0x151
    f384:	f88d 1000 	strb.w	r1, [sp]
    f388:	9900      	ldr	r1, [sp, #0]
    f38a:	9100      	str	r1, [sp, #0]
    f38c:	f89d 1000 	ldrb.w	r1, [sp]
    f390:	f200 104f 	addw	r0, r0, #335	; 0x14f
    f394:	b131      	cbz	r1, f3a4 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x5c>
    f396:	203a      	movs	r0, #58	; 0x3a
    f398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f39c:	2011      	movs	r0, #17
    f39e:	e7fb      	b.n	f398 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>
    f3a0:	201a      	movs	r0, #26
    f3a2:	e7f9      	b.n	f398 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>
    f3a4:	1c81      	adds	r1, r0, #2
    f3a6:	700e      	strb	r6, [r1, #0]
    f3a8:	2101      	movs	r1, #1
    f3aa:	40a1      	lsls	r1, r4
    f3ac:	7001      	strb	r1, [r0, #0]
    f3ae:	f880 8001 	strb.w	r8, [r0, #1]
    f3b2:	2000      	movs	r0, #0
    f3b4:	e7f0      	b.n	f398 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>

0000f3b6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    f3b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f3ba:	460d      	mov	r5, r1
    f3bc:	4606      	mov	r6, r0
    f3be:	f7ff ffb2 	bl	f326 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>
    f3c2:	4607      	mov	r7, r0
    f3c4:	f7ff ffb2 	bl	f32c <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>
    f3c8:	2400      	movs	r4, #0
    f3ca:	4285      	cmp	r5, r0
    f3cc:	d100      	bne.n	f3d0 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
    f3ce:	2401      	movs	r4, #1
    f3d0:	42bd      	cmp	r5, r7
    f3d2:	d101      	bne.n	f3d8 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
    f3d4:	f044 0402 	orr.w	r4, r4, #2
    f3d8:	f000 f834 	bl	f444 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x42>
    f3dc:	2200      	movs	r2, #0
    f3de:	4601      	mov	r1, r0
    f3e0:	2301      	movs	r3, #1
    f3e2:	fa03 f002 	lsl.w	r0, r3, r2
    f3e6:	4208      	tst	r0, r1
    f3e8:	d005      	beq.n	f3f6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x40>
    f3ea:	eb06 0042 	add.w	r0, r6, r2, lsl #1
    f3ee:	f880 5079 	strb.w	r5, [r0, #121]	; 0x79
    f3f2:	f880 4078 	strb.w	r4, [r0, #120]	; 0x78
    f3f6:	1c52      	adds	r2, r2, #1
    f3f8:	b2d2      	uxtb	r2, r2
    f3fa:	2a02      	cmp	r2, #2
    f3fc:	d3f1      	bcc.n	f3e2 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
    f3fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f402 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>:
    f402:	b510      	push	{r4, lr}
    f404:	4604      	mov	r4, r0
    f406:	4608      	mov	r0, r1
    f408:	f7ff ff7f 	bl	f30a <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    f40c:	2802      	cmp	r0, #2
    f40e:	d205      	bcs.n	f41c <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1a>
    f410:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    f414:	f890 0079 	ldrb.w	r0, [r0, #121]	; 0x79
    f418:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    f41c:	bd10      	pop	{r4, pc}
    f41e:	b510      	push	{r4, lr}
    f420:	4614      	mov	r4, r2
    f422:	4602      	mov	r2, r0
    f424:	2000      	movs	r0, #0
    f426:	4603      	mov	r3, r0
    f428:	2c02      	cmp	r4, #2
    f42a:	d205      	bcs.n	f438 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x36>
    f42c:	4610      	mov	r0, r2
    f42e:	f000 f821 	bl	f474 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x72>
    f432:	2101      	movs	r1, #1
    f434:	40a1      	lsls	r1, r4
    f436:	b2cb      	uxtb	r3, r1
    f438:	4203      	tst	r3, r0
    f43a:	d001      	beq.n	f440 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x3e>
    f43c:	2001      	movs	r0, #1
    f43e:	bd10      	pop	{r4, pc}
    f440:	2000      	movs	r0, #0
    f442:	bd10      	pop	{r4, pc}
    f444:	b510      	push	{r4, lr}
    f446:	f7f8 f9e7 	bl	7818 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f44a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f44e:	f000 b811 	b.w	f474 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x72>
    f452:	4601      	mov	r1, r0
    f454:	b510      	push	{r4, lr}
    f456:	2000      	movs	r0, #0
    f458:	2301      	movs	r3, #1
    f45a:	fa03 f200 	lsl.w	r2, r3, r0
    f45e:	420a      	tst	r2, r1
    f460:	d107      	bne.n	f472 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x70>
    f462:	1c40      	adds	r0, r0, #1
    f464:	b2c0      	uxtb	r0, r0
    f466:	2802      	cmp	r0, #2
    f468:	d3f7      	bcc.n	f45a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x58>
    f46a:	213c      	movs	r1, #60	; 0x3c
    f46c:	2078      	movs	r0, #120	; 0x78
    f46e:	f7f1 faf9 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f472:	bd10      	pop	{r4, pc}
    f474:	0a00      	lsrs	r0, r0, #8
    f476:	2201      	movs	r2, #1
    f478:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    f47c:	07c0      	lsls	r0, r0, #31
    f47e:	d000      	beq.n	f482 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x80>
    f480:	2203      	movs	r2, #3
    f482:	4610      	mov	r0, r2
    f484:	4770      	bx	lr
    f486:	b508      	push	{r3, lr}
    f488:	2301      	movs	r3, #1
    f48a:	f640 1288 	movw	r2, #2440	; 0x988
    f48e:	4669      	mov	r1, sp
    f490:	f7fd f922 	bl	c6d8 <mpsl_fem_tx_power_split>
    f494:	bd08      	pop	{r3, pc}
    f496:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f49a:	f001 0107 	and.w	r1, r1, #7
    f49e:	7800      	ldrb	r0, [r0, #0]
    f4a0:	40c8      	lsrs	r0, r1
    f4a2:	f000 0001 	and.w	r0, r0, #1
    f4a6:	4770      	bx	lr
    f4a8:	b118      	cbz	r0, f4b2 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xb0>
    f4aa:	2802      	cmp	r0, #2
    f4ac:	d001      	beq.n	f4b2 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xb0>
    f4ae:	2001      	movs	r0, #1
    f4b0:	4770      	bx	lr
    f4b2:	2000      	movs	r0, #0
    f4b4:	4770      	bx	lr

0000f4b6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    f4b6:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f4b8:	7881      	ldrb	r1, [r0, #2]
    f4ba:	2500      	movs	r5, #0
    f4bc:	4604      	mov	r4, r0
    f4be:	291a      	cmp	r1, #26
    f4c0:	d024      	beq.n	f50c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    f4c2:	dc0e      	bgt.n	f4e2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    f4c4:	2916      	cmp	r1, #22
    f4c6:	d22b      	bcs.n	f520 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f4c8:	e8df f001 	tbb	[pc, r1]
    f4cc:	2a2a2a2a 	.word	0x2a2a2a2a
    f4d0:	2a2a202a 	.word	0x2a2a202a
    f4d4:	2a2a2a2a 	.word	0x2a2a2a2a
    f4d8:	2a2a2a2a 	.word	0x2a2a2a2a
    f4dc:	202a2a2a 	.word	0x202a2a2a
    f4e0:	2020      	.short	0x2020
    f4e2:	292a      	cmp	r1, #42	; 0x2a
    f4e4:	d01c      	beq.n	f520 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f4e6:	dc0b      	bgt.n	f500 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    f4e8:	f1a1 011e 	sub.w	r1, r1, #30
    f4ec:	290c      	cmp	r1, #12
    f4ee:	d217      	bcs.n	f520 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f4f0:	e8df f001 	tbb	[pc, r1]
    f4f4:	16161616 	.word	0x16161616
    f4f8:	16161616 	.word	0x16161616
    f4fc:	0c161616 	.word	0x0c161616
    f500:	393a      	subs	r1, #58	; 0x3a
    f502:	2902      	cmp	r1, #2
    f504:	d20c      	bcs.n	f520 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f506:	e8df f001 	tbb	[pc, r1]
    f50a:	010b      	.short	0x010b
    f50c:	8820      	ldrh	r0, [r4, #0]
    f50e:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    f512:	d205      	bcs.n	f520 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f514:	4669      	mov	r1, sp
    f516:	f7fe fac8 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f51a:	b118      	cbz	r0, f524 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
    f51c:	2002      	movs	r0, #2
    f51e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f520:	2012      	movs	r0, #18
    f522:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f524:	9901      	ldr	r1, [sp, #4]
    f526:	f891 0138 	ldrb.w	r0, [r1, #312]	; 0x138
    f52a:	f88d 0008 	strb.w	r0, [sp, #8]
    f52e:	9802      	ldr	r0, [sp, #8]
    f530:	9002      	str	r0, [sp, #8]
    f532:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f536:	f501 719c 	add.w	r1, r1, #312	; 0x138
    f53a:	b108      	cbz	r0, f540 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8a>
    f53c:	200c      	movs	r0, #12
    f53e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f540:	78a0      	ldrb	r0, [r4, #2]
    f542:	7048      	strb	r0, [r1, #1]
    f544:	20ff      	movs	r0, #255	; 0xff
    f546:	7008      	strb	r0, [r1, #0]
    f548:	4628      	mov	r0, r5
    f54a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f54c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    f54c:	b510      	push	{r4, lr}
    f54e:	4604      	mov	r4, r0
    f550:	f000 fdac 	bl	100ac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x470>
    f554:	b108      	cbz	r0, f55a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    f556:	200c      	movs	r0, #12
    f558:	bd10      	pop	{r4, pc}
    f55a:	7820      	ldrb	r0, [r4, #0]
    f55c:	b118      	cbz	r0, f566 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f55e:	2801      	cmp	r0, #1
    f560:	d001      	beq.n	f566 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f562:	2012      	movs	r0, #18
    f564:	bd10      	pop	{r4, pc}
    f566:	f7ff ff9f 	bl	f4a8 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    f56a:	1c61      	adds	r1, r4, #1
    f56c:	f7f2 fec2 	bl	22f4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    f570:	b108      	cbz	r0, f576 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    f572:	2000      	movs	r0, #0
    f574:	bd10      	pop	{r4, pc}
    f576:	2007      	movs	r0, #7
    f578:	bd10      	pop	{r4, pc}

0000f57a <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    f57a:	b510      	push	{r4, lr}
    f57c:	f000 fd96 	bl	100ac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x470>
    f580:	b108      	cbz	r0, f586 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    f582:	200c      	movs	r0, #12
    f584:	bd10      	pop	{r4, pc}
    f586:	f7f2 fedd 	bl	2344 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    f58a:	2000      	movs	r0, #0
    f58c:	bd10      	pop	{r4, pc}

0000f58e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
    f58e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f592:	4605      	mov	r5, r0
    f594:	f000 fb2f 	bl	fbf6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
    f598:	2800      	cmp	r0, #0
    f59a:	d112      	bne.n	f5c2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    f59c:	8828      	ldrh	r0, [r5, #0]
    f59e:	2100      	movs	r1, #0
    f5a0:	f7fe f8ea 	bl	d778 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f5a4:	0004      	movs	r4, r0
    f5a6:	d00e      	beq.n	f5c6 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    f5a8:	f000 fd40 	bl	1002c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f0>
    f5ac:	b158      	cbz	r0, f5c6 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    f5ae:	f894 0264 	ldrb.w	r0, [r4, #612]	; 0x264
    f5b2:	f88d 0000 	strb.w	r0, [sp]
    f5b6:	9800      	ldr	r0, [sp, #0]
    f5b8:	9000      	str	r0, [sp, #0]
    f5ba:	f89d 0000 	ldrb.w	r0, [sp]
    f5be:	b120      	cbz	r0, f5ca <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x3c>
    f5c0:	203a      	movs	r0, #58	; 0x3a
    f5c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f5c6:	2002      	movs	r0, #2
    f5c8:	e7fb      	b.n	f5c2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    f5ca:	f04f 0800 	mov.w	r8, #0
    f5ce:	88a8      	ldrh	r0, [r5, #4]
    f5d0:	f7fe fa77 	bl	dac2 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    f5d4:	4607      	mov	r7, r0
    f5d6:	4601      	mov	r1, r0
    f5d8:	2005      	movs	r0, #5
    f5da:	f7fe fbf4 	bl	ddc6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    f5de:	4606      	mov	r6, r0
    f5e0:	4639      	mov	r1, r7
    f5e2:	2008      	movs	r0, #8
    f5e4:	f7fe fbef 	bl	ddc6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    f5e8:	42b0      	cmp	r0, r6
    f5ea:	d301      	bcc.n	f5f0 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x62>
    f5ec:	42be      	cmp	r6, r7
    f5ee:	d301      	bcc.n	f5f4 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x66>
    f5f0:	2012      	movs	r0, #18
    f5f2:	e7e6      	b.n	f5c2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    f5f4:	f8a4 6268 	strh.w	r6, [r4, #616]	; 0x268
    f5f8:	e9c4 879b 	strd	r8, r7, [r4, #620]	; 0x26c
    f5fc:	88e8      	ldrh	r0, [r5, #6]
    f5fe:	f8a4 0274 	strh.w	r0, [r4, #628]	; 0x274
    f602:	8928      	ldrh	r0, [r5, #8]
    f604:	f8a4 0276 	strh.w	r0, [r4, #630]	; 0x276
    f608:	f504 7419 	add.w	r4, r4, #612	; 0x264
    f60c:	20ff      	movs	r0, #255	; 0xff
    f60e:	7020      	strb	r0, [r4, #0]
    f610:	2000      	movs	r0, #0
    f612:	e7d6      	b.n	f5c2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>

0000f614 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>:
    f614:	b508      	push	{r3, lr}
    f616:	f7f5 f94b 	bl	48b0 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    f61a:	2805      	cmp	r0, #5
    f61c:	d001      	beq.n	f622 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0xe>
    f61e:	200c      	movs	r0, #12
    f620:	bd08      	pop	{r3, pc}
    f622:	4668      	mov	r0, sp
    f624:	f7f5 f8ca 	bl	47bc <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI>
    f628:	2800      	cmp	r0, #0
    f62a:	d1f9      	bne.n	f620 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0xc>
    f62c:	f7f3 fe90 	bl	3350 <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A>
    f630:	2000      	movs	r0, #0
    f632:	bd08      	pop	{r3, pc}

0000f634 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    f634:	b510      	push	{r4, lr}
    f636:	460b      	mov	r3, r1
    f638:	2201      	movs	r2, #1
    f63a:	f100 0110 	add.w	r1, r0, #16
    f63e:	f7fe f9f8 	bl	da32 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    f642:	2000      	movs	r0, #0
    f644:	bd10      	pop	{r4, pc}

0000f646 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    f646:	b510      	push	{r4, lr}
    f648:	2108      	movs	r1, #8
    f64a:	f7f1 faab 	bl	ba4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    f64e:	2000      	movs	r0, #0
    f650:	bd10      	pop	{r4, pc}

0000f652 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    f652:	21fb      	movs	r1, #251	; 0xfb
    f654:	8001      	strh	r1, [r0, #0]
    f656:	f640 0248 	movw	r2, #2120	; 0x848
    f65a:	8042      	strh	r2, [r0, #2]
    f65c:	8081      	strh	r1, [r0, #4]
    f65e:	80c2      	strh	r2, [r0, #6]
    f660:	2000      	movs	r0, #0
    f662:	4770      	bx	lr

0000f664 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    f664:	b51c      	push	{r2, r3, r4, lr}
    f666:	8800      	ldrh	r0, [r0, #0]
    f668:	4669      	mov	r1, sp
    f66a:	f7fe fa1e 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f66e:	2800      	cmp	r0, #0
    f670:	d10c      	bne.n	f68c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
    f672:	9c01      	ldr	r4, [sp, #4]
    f674:	f89d 0000 	ldrb.w	r0, [sp]
    f678:	f504 749c 	add.w	r4, r4, #312	; 0x138
    f67c:	b918      	cbnz	r0, f686 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x22>
    f67e:	9801      	ldr	r0, [sp, #4]
    f680:	f000 fcd4 	bl	1002c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f0>
    f684:	b118      	cbz	r0, f68e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
    f686:	7ce0      	ldrb	r0, [r4, #19]
    f688:	b118      	cbz	r0, f692 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2e>
    f68a:	203a      	movs	r0, #58	; 0x3a
    f68c:	bd1c      	pop	{r2, r3, r4, pc}
    f68e:	2002      	movs	r0, #2
    f690:	bd1c      	pop	{r2, r3, r4, pc}
    f692:	2001      	movs	r0, #1
    f694:	74e0      	strb	r0, [r4, #19]
    f696:	2000      	movs	r0, #0
    f698:	bd1c      	pop	{r2, r3, r4, pc}

0000f69a <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    f69a:	b510      	push	{r4, lr}
    f69c:	4604      	mov	r4, r0
    f69e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f6a2:	f000 fce4 	bl	1006e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x432>
    f6a6:	f7f2 ffdf 	bl	2668 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    f6aa:	7020      	strb	r0, [r4, #0]
    f6ac:	f000 fcbb 	bl	10026 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3ea>
    f6b0:	f7f2 ffda 	bl	2668 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    f6b4:	7060      	strb	r0, [r4, #1]
    f6b6:	2000      	movs	r0, #0
    f6b8:	bd10      	pop	{r4, pc}

0000f6ba <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    f6ba:	2108      	movs	r1, #8
    f6bc:	7001      	strb	r1, [r0, #0]
    f6be:	2000      	movs	r0, #0
    f6c0:	4770      	bx	lr

0000f6c2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    f6c2:	b510      	push	{r4, lr}
    f6c4:	4604      	mov	r4, r0
    f6c6:	f000 fcf1 	bl	100ac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x470>
    f6ca:	b108      	cbz	r0, f6d0 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    f6cc:	200c      	movs	r0, #12
    f6ce:	bd10      	pop	{r4, pc}
    f6d0:	7820      	ldrb	r0, [r4, #0]
    f6d2:	b108      	cbz	r0, f6d8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    f6d4:	2801      	cmp	r0, #1
    f6d6:	d107      	bne.n	f6e8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f6d8:	f7ff fee6 	bl	f4a8 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    f6dc:	1c61      	adds	r1, r4, #1
    f6de:	f7fe f99d 	bl	da1c <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    f6e2:	b108      	cbz	r0, f6e8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f6e4:	2000      	movs	r0, #0
    f6e6:	bd10      	pop	{r4, pc}
    f6e8:	2012      	movs	r0, #18
    f6ea:	bd10      	pop	{r4, pc}

0000f6ec <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    f6ec:	b50e      	push	{r1, r2, r3, lr}
    f6ee:	8882      	ldrh	r2, [r0, #4]
    f6f0:	f244 2390 	movw	r3, #17040	; 0x4290
    f6f4:	429a      	cmp	r2, r3
    f6f6:	d901      	bls.n	f6fc <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
    f6f8:	2012      	movs	r0, #18
    f6fa:	bd0e      	pop	{r1, r2, r3, pc}
    f6fc:	f640 0348 	movw	r3, #2120	; 0x848
    f700:	429a      	cmp	r2, r3
    f702:	d300      	bcc.n	f706 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    f704:	461a      	mov	r2, r3
    f706:	8803      	ldrh	r3, [r0, #0]
    f708:	f8ad 3000 	strh.w	r3, [sp]
    f70c:	8843      	ldrh	r3, [r0, #2]
    f70e:	f8ad 3002 	strh.w	r3, [sp, #2]
    f712:	f8ad 2004 	strh.w	r2, [sp, #4]
    f716:	8843      	ldrh	r3, [r0, #2]
    f718:	f8ad 3006 	strh.w	r3, [sp, #6]
    f71c:	f8ad 2008 	strh.w	r2, [sp, #8]
    f720:	8800      	ldrh	r0, [r0, #0]
    f722:	8008      	strh	r0, [r1, #0]
    f724:	4668      	mov	r0, sp
    f726:	f7f7 ff57 	bl	75d8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x35c>
    f72a:	bd0e      	pop	{r1, r2, r3, pc}

0000f72c <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    f72c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f72e:	4604      	mov	r4, r0
    f730:	f10d 0007 	add.w	r0, sp, #7
    f734:	9000      	str	r0, [sp, #0]
    f736:	7922      	ldrb	r2, [r4, #4]
    f738:	78e1      	ldrb	r1, [r4, #3]
    f73a:	78a0      	ldrb	r0, [r4, #2]
    f73c:	f10d 0306 	add.w	r3, sp, #6
    f740:	f000 fc9d 	bl	1007e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x442>
    f744:	2800      	cmp	r0, #0
    f746:	d109      	bne.n	f75c <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
    f748:	8820      	ldrh	r0, [r4, #0]
    f74a:	f8ad 0004 	strh.w	r0, [sp, #4]
    f74e:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    f752:	f8ad 0008 	strh.w	r0, [sp, #8]
    f756:	a801      	add	r0, sp, #4
    f758:	f000 f970 	bl	fa3c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    f75c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f75e <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    f75e:	b510      	push	{r4, lr}
    f760:	4604      	mov	r4, r0
    f762:	2001      	movs	r0, #1
    f764:	f000 fa97 	bl	fc96 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5a>
    f768:	b128      	cbz	r0, f776 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    f76a:	4621      	mov	r1, r4
    f76c:	2001      	movs	r0, #1
    f76e:	f7f1 ff71 	bl	1654 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f772:	2000      	movs	r0, #0
    f774:	bd10      	pop	{r4, pc}
    f776:	200c      	movs	r0, #12
    f778:	bd10      	pop	{r4, pc}

0000f77a <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>:
    f77a:	b51c      	push	{r2, r3, r4, lr}
    f77c:	7801      	ldrb	r1, [r0, #0]
    f77e:	f88d 1000 	strb.w	r1, [sp]
    f782:	7840      	ldrb	r0, [r0, #1]
    f784:	f88d 0001 	strb.w	r0, [sp, #1]
    f788:	2000      	movs	r0, #0
    f78a:	f8ad 0002 	strh.w	r0, [sp, #2]
    f78e:	f8ad 0004 	strh.w	r0, [sp, #4]
    f792:	4601      	mov	r1, r0
    f794:	4668      	mov	r0, sp
    f796:	f000 face 	bl	fd36 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfa>
    f79a:	2800      	cmp	r0, #0
    f79c:	d102      	bne.n	f7a4 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ+0x2a>
    f79e:	4668      	mov	r0, sp
    f7a0:	f000 faa8 	bl	fcf4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb8>
    f7a4:	bd1c      	pop	{r2, r3, r4, pc}

0000f7a6 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>:
    f7a6:	b500      	push	{lr}
    f7a8:	b087      	sub	sp, #28
    f7aa:	7941      	ldrb	r1, [r0, #5]
    f7ac:	f88d 1000 	strb.w	r1, [sp]
    f7b0:	7981      	ldrb	r1, [r0, #6]
    f7b2:	f88d 1001 	strb.w	r1, [sp, #1]
    f7b6:	2101      	movs	r1, #1
    f7b8:	f88d 1002 	strb.w	r1, [sp, #2]
    f7bc:	7801      	ldrb	r1, [r0, #0]
    f7be:	f88d 1003 	strb.w	r1, [sp, #3]
    f7c2:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    f7c6:	f240 2271 	movw	r2, #625	; 0x271
    f7ca:	4351      	muls	r1, r2
    f7cc:	9102      	str	r1, [sp, #8]
    f7ce:	f8b0 0003 	ldrh.w	r0, [r0, #3]
    f7d2:	4350      	muls	r0, r2
    f7d4:	9004      	str	r0, [sp, #16]
    f7d6:	2007      	movs	r0, #7
    f7d8:	f88d 0018 	strb.w	r0, [sp, #24]
    f7dc:	2000      	movs	r0, #0
    f7de:	f88d 0019 	strb.w	r0, [sp, #25]
    f7e2:	9804      	ldr	r0, [sp, #16]
    f7e4:	f7f7 fdfe 	bl	73e4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x168>
    f7e8:	b140      	cbz	r0, f7fc <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    f7ea:	9802      	ldr	r0, [sp, #8]
    f7ec:	f7f7 fdee 	bl	73cc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x150>
    f7f0:	b120      	cbz	r0, f7fc <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    f7f2:	4668      	mov	r0, sp
    f7f4:	f7f7 fcc4 	bl	7180 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>
    f7f8:	b007      	add	sp, #28
    f7fa:	bd00      	pop	{pc}
    f7fc:	2030      	movs	r0, #48	; 0x30
    f7fe:	e7fb      	b.n	f7f8 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x52>

0000f800 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>:
    f800:	b570      	push	{r4, r5, r6, lr}
    f802:	4605      	mov	r5, r0
    f804:	8800      	ldrh	r0, [r0, #0]
    f806:	2100      	movs	r1, #0
    f808:	f7fd ffb6 	bl	d778 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f80c:	0004      	movs	r4, r0
    f80e:	d007      	beq.n	f820 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    f810:	f000 fc0c 	bl	1002c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f0>
    f814:	b120      	cbz	r0, f820 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    f816:	f894 0278 	ldrb.w	r0, [r4, #632]	; 0x278
    f81a:	b118      	cbz	r0, f824 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x24>
    f81c:	203a      	movs	r0, #58	; 0x3a
    f81e:	bd70      	pop	{r4, r5, r6, pc}
    f820:	2002      	movs	r0, #2
    f822:	bd70      	pop	{r4, r5, r6, pc}
    f824:	2100      	movs	r1, #0
    f826:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
    f82a:	f7ff fe34 	bl	f496 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
    f82e:	2801      	cmp	r0, #1
    f830:	d001      	beq.n	f836 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x36>
    f832:	201a      	movs	r0, #26
    f834:	bd70      	pop	{r4, r5, r6, pc}
    f836:	f8d5 0002 	ldr.w	r0, [r5, #2]
    f83a:	f8c4 0279 	str.w	r0, [r4, #633]	; 0x279
    f83e:	f8d5 0006 	ldr.w	r0, [r5, #6]
    f842:	f8c4 027d 	str.w	r0, [r4, #637]	; 0x27d
    f846:	8968      	ldrh	r0, [r5, #10]
    f848:	f8a4 0281 	strh.w	r0, [r4, #641]	; 0x281
    f84c:	2210      	movs	r2, #16
    f84e:	f105 010c 	add.w	r1, r5, #12
    f852:	f204 2083 	addw	r0, r4, #643	; 0x283
    f856:	f000 ff0a 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f85a:	2001      	movs	r0, #1
    f85c:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
    f860:	2000      	movs	r0, #0
    f862:	bd70      	pop	{r4, r5, r6, pc}

0000f864 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    f864:	b51c      	push	{r2, r3, r4, lr}
    f866:	8801      	ldrh	r1, [r0, #0]
    f868:	f8ad 1000 	strh.w	r1, [sp]
    f86c:	8841      	ldrh	r1, [r0, #2]
    f86e:	f8ad 1002 	strh.w	r1, [sp, #2]
    f872:	8801      	ldrh	r1, [r0, #0]
    f874:	f8ad 1004 	strh.w	r1, [sp, #4]
    f878:	8840      	ldrh	r0, [r0, #2]
    f87a:	f8ad 0006 	strh.w	r0, [sp, #6]
    f87e:	4668      	mov	r0, sp
    f880:	f7f7 ff2e 	bl	76e0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x464>
    f884:	bd1c      	pop	{r2, r3, r4, pc}

0000f886 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    f886:	b510      	push	{r4, lr}
    f888:	f7f1 ff08 	bl	169c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    f88c:	2000      	movs	r0, #0
    f88e:	bd10      	pop	{r4, pc}

0000f890 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>:
    f890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    f894:	4604      	mov	r4, r0
    f896:	7a40      	ldrb	r0, [r0, #9]
    f898:	0781      	lsls	r1, r0, #30
    f89a:	d502      	bpl.n	f8a2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x12>
    f89c:	f040 0001 	orr.w	r0, r0, #1
    f8a0:	7260      	strb	r0, [r4, #9]
    f8a2:	4620      	mov	r0, r4
    f8a4:	f000 fa67 	bl	fd76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13a>
    f8a8:	2800      	cmp	r0, #0
    f8aa:	d103      	bne.n	f8b4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>
    f8ac:	f000 fbd4 	bl	10058 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41c>
    f8b0:	b118      	cbz	r0, f8ba <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a>
    f8b2:	200c      	movs	r0, #12
    f8b4:	b004      	add	sp, #16
    f8b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f8ba:	f7f3 fcd7 	bl	326c <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI>
    f8be:	b910      	cbnz	r0, f8c6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x36>
    f8c0:	f7f3 fe50 	bl	3564 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>
    f8c4:	b108      	cbz	r0, f8ca <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3a>
    f8c6:	203a      	movs	r0, #58	; 0x3a
    f8c8:	e7f4      	b.n	f8b4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>
    f8ca:	2103      	movs	r1, #3
    f8cc:	f104 0018 	add.w	r0, r4, #24
    f8d0:	f7f7 fd94 	bl	73fc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x180>
    f8d4:	2100      	movs	r1, #0
    f8d6:	4668      	mov	r0, sp
    f8d8:	f7f1 fb02 	bl	ee0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    f8dc:	0006      	movs	r6, r0
    f8de:	d008      	beq.n	f8f2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x62>
    f8e0:	2301      	movs	r3, #1
    f8e2:	4622      	mov	r2, r4
    f8e4:	f8bd 1000 	ldrh.w	r1, [sp]
    f8e8:	f7f7 fd9c 	bl	7424 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1a8>
    f8ec:	0005      	movs	r5, r0
    f8ee:	d002      	beq.n	f8f6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x66>
    f8f0:	e06c      	b.n	f9cc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    f8f2:	2009      	movs	r0, #9
    f8f4:	e7de      	b.n	f8b4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>
    f8f6:	7860      	ldrb	r0, [r4, #1]
    f8f8:	f7f3 fd96 	bl	3428 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>
    f8fc:	78a1      	ldrb	r1, [r4, #2]
    f8fe:	7820      	ldrb	r0, [r4, #0]
    f900:	1ce2      	adds	r2, r4, #3
    f902:	f7f3 fd01 	bl	3308 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>
    f906:	b148      	cbz	r0, f91c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x8c>
    f908:	f7f3 fc5c 	bl	31c4 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    f90c:	78a1      	ldrb	r1, [r4, #2]
    f90e:	7820      	ldrb	r0, [r4, #0]
    f910:	1ce2      	adds	r2, r4, #3
    f912:	f7f3 fd37 	bl	3384 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>
    f916:	0005      	movs	r5, r0
    f918:	d002      	beq.n	f920 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x90>
    f91a:	e057      	b.n	f9cc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    f91c:	2512      	movs	r5, #18
    f91e:	e055      	b.n	f9cc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    f920:	4631      	mov	r1, r6
    f922:	2003      	movs	r0, #3
    f924:	f7f3 fc96 	bl	3254 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    f928:	4605      	mov	r5, r0
    f92a:	78a0      	ldrb	r0, [r4, #2]
    f92c:	f7ff fdbc 	bl	f4a8 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    f930:	1ce1      	adds	r1, r4, #3
    f932:	f7f3 fd51 	bl	33d8 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI>
    f936:	bb1d      	cbnz	r5, f980 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf0>
    f938:	7820      	ldrb	r0, [r4, #0]
    f93a:	f04f 0800 	mov.w	r8, #0
    f93e:	2701      	movs	r7, #1
    f940:	bb20      	cbnz	r0, f98c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xfc>
    f942:	f894 a002 	ldrb.w	sl, [r4, #2]
    f946:	f104 0903 	add.w	r9, r4, #3
    f94a:	f8cd 8004 	str.w	r8, [sp, #4]
    f94e:	f8cd 8008 	str.w	r8, [sp, #8]
    f952:	e016      	b.n	f982 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf2>
    f954:	9d01      	ldr	r5, [sp, #4]
    f956:	42ae      	cmp	r6, r5
    f958:	d013      	beq.n	f982 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf2>
    f95a:	4650      	mov	r0, sl
    f95c:	f7ff fda4 	bl	f4a8 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    f960:	78aa      	ldrb	r2, [r5, #2]
    f962:	1ceb      	adds	r3, r5, #3
    f964:	4649      	mov	r1, r9
    f966:	f7fd ff92 	bl	d88e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    f96a:	b150      	cbz	r0, f982 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf2>
    f96c:	7a6a      	ldrb	r2, [r5, #9]
    f96e:	7a70      	ldrb	r0, [r6, #9]
    f970:	f105 030a 	add.w	r3, r5, #10
    f974:	f106 010a 	add.w	r1, r6, #10
    f978:	f7fd ff89 	bl	d88e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    f97c:	b108      	cbz	r0, f982 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf2>
    f97e:	250b      	movs	r5, #11
    f980:	e024      	b.n	f9cc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    f982:	a801      	add	r0, sp, #4
    f984:	f7f1 fa8c 	bl	ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f988:	2800      	cmp	r0, #0
    f98a:	d0e3      	beq.n	f954 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xc4>
    f98c:	4638      	mov	r0, r7
    f98e:	f7f3 fc7d 	bl	328c <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>
    f992:	0005      	movs	r5, r0
    f994:	d11a      	bne.n	f9cc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    f996:	f88d 8004 	strb.w	r8, [sp, #4]
    f99a:	7a60      	ldrb	r0, [r4, #9]
    f99c:	07c0      	lsls	r0, r0, #31
    f99e:	d005      	beq.n	f9ac <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x11c>
    f9a0:	68e0      	ldr	r0, [r4, #12]
    f9a2:	9002      	str	r0, [sp, #8]
    f9a4:	69a0      	ldr	r0, [r4, #24]
    f9a6:	9003      	str	r0, [sp, #12]
    f9a8:	f88d 7004 	strb.w	r7, [sp, #4]
    f9ac:	a801      	add	r0, sp, #4
    f9ae:	f7f4 ffd1 	bl	4954 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    f9b2:	4605      	mov	r5, r0
    f9b4:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    f9b8:	f7f3 fdaa 	bl	3510 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>
    f9bc:	b935      	cbnz	r5, f9cc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    f9be:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
    f9c2:	4630      	mov	r0, r6
    f9c4:	f7f4 feb8 	bl	4738 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI>
    f9c8:	0005      	movs	r5, r0
    f9ca:	d00c      	beq.n	f9e6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x156>
    f9cc:	8830      	ldrh	r0, [r6, #0]
    f9ce:	f7fd ff5a 	bl	d886 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    f9d2:	8830      	ldrh	r0, [r6, #0]
    f9d4:	2100      	movs	r1, #0
    f9d6:	f7f1 faa9 	bl	f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    f9da:	b120      	cbz	r0, f9e6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x156>
    f9dc:	f241 1139 	movw	r1, #4409	; 0x1139
    f9e0:	2039      	movs	r0, #57	; 0x39
    f9e2:	f7f1 f83f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f9e6:	4628      	mov	r0, r5
    f9e8:	e764      	b.n	f8b4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>

0000f9ea <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    f9ea:	b51c      	push	{r2, r3, r4, lr}
    f9ec:	460c      	mov	r4, r1
    f9ee:	4669      	mov	r1, sp
    f9f0:	f7fe f85b 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f9f4:	2800      	cmp	r0, #0
    f9f6:	d105      	bne.n	fa04 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
    f9f8:	2101      	movs	r1, #1
    f9fa:	4622      	mov	r2, r4
    f9fc:	9801      	ldr	r0, [sp, #4]
    f9fe:	f000 fabc 	bl	ff7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33e>
    fa02:	2000      	movs	r0, #0
    fa04:	bd1c      	pop	{r2, r3, r4, pc}

0000fa06 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    fa06:	b510      	push	{r4, lr}
    fa08:	4604      	mov	r4, r0
    fa0a:	f7f7 fe9f 	bl	774c <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>
    fa0e:	b118      	cbz	r0, fa18 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x12>
    fa10:	2000      	movs	r0, #0
    fa12:	f000 f940 	bl	fc96 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5a>
    fa16:	b128      	cbz	r0, fa24 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x1e>
    fa18:	4621      	mov	r1, r4
    fa1a:	2000      	movs	r0, #0
    fa1c:	f7f1 fe1a 	bl	1654 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    fa20:	2000      	movs	r0, #0
    fa22:	bd10      	pop	{r4, pc}
    fa24:	200c      	movs	r0, #12
    fa26:	bd10      	pop	{r4, pc}

0000fa28 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    fa28:	b510      	push	{r4, lr}
    fa2a:	7800      	ldrb	r0, [r0, #0]
    fa2c:	b100      	cbz	r0, fa30 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
    fa2e:	2001      	movs	r0, #1
    fa30:	f7f5 fc16 	bl	5260 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>
    fa34:	2000      	movs	r0, #0
    fa36:	bd10      	pop	{r4, pc}

0000fa38 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    fa38:	f7f7 bdce 	b.w	75d8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x35c>

0000fa3c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    fa3c:	b510      	push	{r4, lr}
    fa3e:	4604      	mov	r4, r0
    fa40:	8880      	ldrh	r0, [r0, #4]
    fa42:	b128      	cbz	r0, fa50 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fa44:	2801      	cmp	r0, #1
    fa46:	d003      	beq.n	fa50 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fa48:	2802      	cmp	r0, #2
    fa4a:	d001      	beq.n	fa50 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fa4c:	2012      	movs	r0, #18
    fa4e:	bd10      	pop	{r4, pc}
    fa50:	78e0      	ldrb	r0, [r4, #3]
    fa52:	f000 f92c 	bl	fcae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x72>
    fa56:	b148      	cbz	r0, fa6c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    fa58:	78a0      	ldrb	r0, [r4, #2]
    fa5a:	f000 f928 	bl	fcae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x72>
    fa5e:	b128      	cbz	r0, fa6c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    fa60:	4620      	mov	r0, r4
    fa62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa66:	2101      	movs	r1, #1
    fa68:	f000 b862 	b.w	fb30 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    fa6c:	2011      	movs	r0, #17
    fa6e:	bd10      	pop	{r4, pc}

0000fa70 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    fa70:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fa72:	460c      	mov	r4, r1
    fa74:	4605      	mov	r5, r0
    fa76:	8800      	ldrh	r0, [r0, #0]
    fa78:	4669      	mov	r1, sp
    fa7a:	f7fe f816 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fa7e:	2800      	cmp	r0, #0
    fa80:	d106      	bne.n	fa90 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    fa82:	9801      	ldr	r0, [sp, #4]
    fa84:	8829      	ldrh	r1, [r5, #0]
    fa86:	8021      	strh	r1, [r4, #0]
    fa88:	f8b0 00d0 	ldrh.w	r0, [r0, #208]	; 0xd0
    fa8c:	8060      	strh	r0, [r4, #2]
    fa8e:	2000      	movs	r0, #0
    fa90:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000fa92 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    fa92:	b510      	push	{r4, lr}
    fa94:	4604      	mov	r4, r0
    fa96:	4601      	mov	r1, r0
    fa98:	2000      	movs	r0, #0
    fa9a:	f7f1 fdc3 	bl	1624 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    fa9e:	b910      	cbnz	r0, faa6 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    faa0:	2000      	movs	r0, #0
    faa2:	6020      	str	r0, [r4, #0]
    faa4:	80a0      	strh	r0, [r4, #4]
    faa6:	2000      	movs	r0, #0
    faa8:	bd10      	pop	{r4, pc}

0000faaa <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    faaa:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    faac:	460c      	mov	r4, r1
    faae:	4605      	mov	r5, r0
    fab0:	8800      	ldrh	r0, [r0, #0]
    fab2:	4669      	mov	r1, sp
    fab4:	f7fd fff9 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fab8:	b108      	cbz	r0, fabe <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    faba:	2002      	movs	r0, #2
    fabc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fabe:	78a8      	ldrb	r0, [r5, #2]
    fac0:	b158      	cbz	r0, fada <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x30>
    fac2:	f000 fab0 	bl	10026 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3ea>
    fac6:	70a0      	strb	r0, [r4, #2]
    fac8:	8828      	ldrh	r0, [r5, #0]
    faca:	8020      	strh	r0, [r4, #0]
    facc:	f994 0002 	ldrsb.w	r0, [r4, #2]
    fad0:	f7f2 fdca 	bl	2668 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fad4:	70a0      	strb	r0, [r4, #2]
    fad6:	2000      	movs	r0, #0
    fad8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fada:	9801      	ldr	r0, [sp, #4]
    fadc:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    fae0:	e7f1      	b.n	fac6 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000fae2 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    fae2:	b510      	push	{r4, lr}
    fae4:	f7f7 fe38 	bl	7758 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    fae8:	2000      	movs	r0, #0
    faea:	bd10      	pop	{r4, pc}

0000faec <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    faec:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    faf0:	4604      	mov	r4, r0
    faf2:	8840      	ldrh	r0, [r0, #2]
    faf4:	460d      	mov	r5, r1
    faf6:	b1b8      	cbz	r0, fb28 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
    faf8:	8820      	ldrh	r0, [r4, #0]
    fafa:	4669      	mov	r1, sp
    fafc:	f7fd ffd5 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fb00:	2800      	cmp	r0, #0
    fb02:	d10f      	bne.n	fb24 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
    fb04:	8820      	ldrh	r0, [r4, #0]
    fb06:	8028      	strh	r0, [r5, #0]
    fb08:	9e01      	ldr	r6, [sp, #4]
    fb0a:	f106 0510 	add.w	r5, r6, #16
    fb0e:	3688      	adds	r6, #136	; 0x88
    fb10:	682f      	ldr	r7, [r5, #0]
    fb12:	8862      	ldrh	r2, [r4, #2]
    fb14:	4639      	mov	r1, r7
    fb16:	4630      	mov	r0, r6
    fb18:	f7fe f939 	bl	dd8e <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    fb1c:	6828      	ldr	r0, [r5, #0]
    fb1e:	42b8      	cmp	r0, r7
    fb20:	d1f6      	bne.n	fb10 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
    fb22:	2000      	movs	r0, #0
    fb24:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    fb28:	2012      	movs	r0, #18
    fb2a:	e7fb      	b.n	fb24 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0000fb2c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    fb2c:	f000 b886 	b.w	fc3c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000fb30 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    fb30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fb34:	b086      	sub	sp, #24
    fb36:	4689      	mov	r9, r1
    fb38:	4607      	mov	r7, r0
    fb3a:	8800      	ldrh	r0, [r0, #0]
    fb3c:	a901      	add	r1, sp, #4
    fb3e:	f7fd ffb4 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fb42:	2800      	cmp	r0, #0
    fb44:	d136      	bne.n	fbb4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
    fb46:	9802      	ldr	r0, [sp, #8]
    fb48:	4601      	mov	r1, r0
    fb4a:	4688      	mov	r8, r1
    fb4c:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    fb50:	f500 749c 	add.w	r4, r0, #312	; 0x138
    fb54:	f88d 1000 	strb.w	r1, [sp]
    fb58:	9900      	ldr	r1, [sp, #0]
    fb5a:	9100      	str	r1, [sp, #0]
    fb5c:	f89d 1000 	ldrb.w	r1, [sp]
    fb60:	3088      	adds	r0, #136	; 0x88
    fb62:	b109      	cbz	r1, fb68 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
    fb64:	2601      	movs	r6, #1
    fb66:	e000      	b.n	fb6a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
    fb68:	2600      	movs	r6, #0
    fb6a:	7f81      	ldrb	r1, [r0, #30]
    fb6c:	2922      	cmp	r1, #34	; 0x22
    fb6e:	d100      	bne.n	fb72 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
    fb70:	b13e      	cbz	r6, fb82 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
    fb72:	2500      	movs	r5, #0
    fb74:	306e      	adds	r0, #110	; 0x6e
    fb76:	2108      	movs	r1, #8
    fb78:	4682      	mov	sl, r0
    fb7a:	f7ff fc8c 	bl	f496 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
    fb7e:	b110      	cbz	r0, fb86 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
    fb80:	e007      	b.n	fb92 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
    fb82:	2501      	movs	r5, #1
    fb84:	e7f6      	b.n	fb74 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
    fb86:	210b      	movs	r1, #11
    fb88:	4650      	mov	r0, sl
    fb8a:	f7ff fc84 	bl	f496 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
    fb8e:	b900      	cbnz	r0, fb92 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
    fb90:	b17d      	cbz	r5, fbb2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x82>
    fb92:	a804      	add	r0, sp, #16
    fb94:	9000      	str	r0, [sp, #0]
    fb96:	f89d 0004 	ldrb.w	r0, [sp, #4]
    fb9a:	ab03      	add	r3, sp, #12
    fb9c:	463a      	mov	r2, r7
    fb9e:	4641      	mov	r1, r8
    fba0:	f000 fa21 	bl	ffe6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3aa>
    fba4:	0005      	movs	r5, r0
    fba6:	d105      	bne.n	fbb4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
    fba8:	340c      	adds	r4, #12
    fbaa:	20ff      	movs	r0, #255	; 0xff
    fbac:	7060      	strb	r0, [r4, #1]
    fbae:	b936      	cbnz	r6, fbbe <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    fbb0:	e003      	b.n	fbba <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    fbb2:	201a      	movs	r0, #26
    fbb4:	b006      	add	sp, #24
    fbb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fbba:	7820      	ldrb	r0, [r4, #0]
    fbbc:	b108      	cbz	r0, fbc2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x92>
    fbbe:	253a      	movs	r5, #58	; 0x3a
    fbc0:	e012      	b.n	fbe8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
    fbc2:	f884 9000 	strb.w	r9, [r4]
    fbc6:	f89d 000c 	ldrb.w	r0, [sp, #12]
    fbca:	70a0      	strb	r0, [r4, #2]
    fbcc:	f89d 1010 	ldrb.w	r1, [sp, #16]
    fbd0:	70e1      	strb	r1, [r4, #3]
    fbd2:	f88d 0000 	strb.w	r0, [sp]
    fbd6:	f88d 1001 	strb.w	r1, [sp, #1]
    fbda:	88b8      	ldrh	r0, [r7, #4]
    fbdc:	f8ad 0002 	strh.w	r0, [sp, #2]
    fbe0:	4669      	mov	r1, sp
    fbe2:	4640      	mov	r0, r8
    fbe4:	f7fe f83b 	bl	dc5e <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    fbe8:	2000      	movs	r0, #0
    fbea:	7060      	strb	r0, [r4, #1]
    fbec:	4628      	mov	r0, r5
    fbee:	e7e1      	b.n	fbb4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>

0000fbf0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    fbf0:	2008      	movs	r0, #8
    fbf2:	f7f7 be05 	b.w	7800 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

0000fbf6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
    fbf6:	b510      	push	{r4, lr}
    fbf8:	4604      	mov	r4, r0
    fbfa:	2000      	movs	r0, #0
    fbfc:	8822      	ldrh	r2, [r4, #0]
    fbfe:	b086      	sub	sp, #24
    fc00:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
    fc04:	39ff      	subs	r1, #255	; 0xff
    fc06:	d008      	beq.n	fc1a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
    fc08:	a903      	add	r1, sp, #12
    fc0a:	4610      	mov	r0, r2
    fc0c:	f7fd ff4d 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fc10:	b110      	cbz	r0, fc18 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
    fc12:	2002      	movs	r0, #2
    fc14:	b006      	add	sp, #24
    fc16:	bd10      	pop	{r4, pc}
    fc18:	9804      	ldr	r0, [sp, #16]
    fc1a:	8921      	ldrh	r1, [r4, #8]
    fc1c:	89a3      	ldrh	r3, [r4, #12]
    fc1e:	8962      	ldrh	r2, [r4, #10]
    fc20:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    fc24:	88e3      	ldrh	r3, [r4, #6]
    fc26:	88a2      	ldrh	r2, [r4, #4]
    fc28:	8861      	ldrh	r1, [r4, #2]
    fc2a:	f000 f97b 	bl	ff24 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e8>
    fc2e:	b108      	cbz	r0, fc34 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
    fc30:	2000      	movs	r0, #0
    fc32:	e7ef      	b.n	fc14 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
    fc34:	2030      	movs	r0, #48	; 0x30
    fc36:	e7ed      	b.n	fc14 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>

0000fc38 <sym_7ZWRNRN6OJ5G7BJWG232R5QOQBW4NK4HJWYOG5A>:
    fc38:	f7f5 bcb4 	b.w	55a4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>

0000fc3c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    fc3c:	b510      	push	{r4, lr}
    fc3e:	f7fd fe55 	bl	d8ec <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    fc42:	f7f2 fad1 	bl	21e8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    fc46:	f7f7 fdfd 	bl	7844 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    fc4a:	f7fe fa7a 	bl	e142 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    fc4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fc52:	f7f7 bb8d 	b.w	7370 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xf4>
    fc56:	f44f 71a4 	mov.w	r1, #328	; 0x148
    fc5a:	4288      	cmp	r0, r1
    fc5c:	d303      	bcc.n	fc66 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a>
    fc5e:	f640 0148 	movw	r1, #2120	; 0x848
    fc62:	4288      	cmp	r0, r1
    fc64:	d300      	bcc.n	fc68 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c>
    fc66:	4608      	mov	r0, r1
    fc68:	b280      	uxth	r0, r0
    fc6a:	4770      	bx	lr
    fc6c:	07c1      	lsls	r1, r0, #31
    fc6e:	d001      	beq.n	fc74 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x38>
    fc70:	2001      	movs	r0, #1
    fc72:	4770      	bx	lr
    fc74:	0780      	lsls	r0, r0, #30
    fc76:	d501      	bpl.n	fc7c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x40>
    fc78:	2002      	movs	r0, #2
    fc7a:	4770      	bx	lr
    fc7c:	2000      	movs	r0, #0
    fc7e:	4770      	bx	lr
    fc80:	b510      	push	{r4, lr}
    fc82:	2801      	cmp	r0, #1
    fc84:	d006      	beq.n	fc94 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>
    fc86:	2802      	cmp	r0, #2
    fc88:	d004      	beq.n	fc94 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>
    fc8a:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    fc8e:	2006      	movs	r0, #6
    fc90:	f7f0 fee8 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fc94:	bd10      	pop	{r4, pc}
    fc96:	b510      	push	{r4, lr}
    fc98:	f000 f9de 	bl	10058 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41c>
    fc9c:	b128      	cbz	r0, fcaa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6e>
    fc9e:	f7f3 fc93 	bl	35c8 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
    fca2:	2801      	cmp	r0, #1
    fca4:	d001      	beq.n	fcaa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6e>
    fca6:	2000      	movs	r0, #0
    fca8:	bd10      	pop	{r4, pc}
    fcaa:	2001      	movs	r0, #1
    fcac:	bd10      	pop	{r4, pc}
    fcae:	b510      	push	{r4, lr}
    fcb0:	0004      	movs	r4, r0
    fcb2:	d005      	beq.n	fcc0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x84>
    fcb4:	f7f7 fdb6 	bl	7824 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fcb8:	4384      	bics	r4, r0
    fcba:	d001      	beq.n	fcc0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x84>
    fcbc:	2000      	movs	r0, #0
    fcbe:	bd10      	pop	{r4, pc}
    fcc0:	2001      	movs	r0, #1
    fcc2:	bd10      	pop	{r4, pc}
    fcc4:	28fb      	cmp	r0, #251	; 0xfb
    fcc6:	d803      	bhi.n	fcd0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x94>
    fcc8:	f640 0048 	movw	r0, #2120	; 0x848
    fccc:	4281      	cmp	r1, r0
    fcce:	d901      	bls.n	fcd4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x98>
    fcd0:	2011      	movs	r0, #17
    fcd2:	4770      	bx	lr
    fcd4:	2000      	movs	r0, #0
    fcd6:	4770      	bx	lr
    fcd8:	381b      	subs	r0, #27
    fcda:	28e1      	cmp	r0, #225	; 0xe1
    fcdc:	d206      	bcs.n	fcec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb0>
    fcde:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    fce2:	d303      	bcc.n	fcec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb0>
    fce4:	f244 2090 	movw	r0, #17040	; 0x4290
    fce8:	4281      	cmp	r1, r0
    fcea:	d901      	bls.n	fcf0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb4>
    fcec:	2012      	movs	r0, #18
    fcee:	4770      	bx	lr
    fcf0:	2000      	movs	r0, #0
    fcf2:	4770      	bx	lr
    fcf4:	b510      	push	{r4, lr}
    fcf6:	4604      	mov	r4, r0
    fcf8:	7800      	ldrb	r0, [r0, #0]
    fcfa:	2801      	cmp	r0, #1
    fcfc:	d009      	beq.n	fd12 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd6>
    fcfe:	f7f4 fdd7 	bl	48b0 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    fd02:	2805      	cmp	r0, #5
    fd04:	d003      	beq.n	fd0e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd2>
    fd06:	f7f4 fd9b 	bl	4840 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    fd0a:	2800      	cmp	r0, #0
    fd0c:	d000      	beq.n	fd10 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd4>
    fd0e:	200c      	movs	r0, #12
    fd10:	bd10      	pop	{r4, pc}
    fd12:	f7f3 fc27 	bl	3564 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>
    fd16:	b108      	cbz	r0, fd1c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe0>
    fd18:	203a      	movs	r0, #58	; 0x3a
    fd1a:	bd10      	pop	{r4, pc}
    fd1c:	f7f3 fbdc 	bl	34d8 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>
    fd20:	b138      	cbz	r0, fd32 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf6>
    fd22:	f7f3 fa4f 	bl	31c4 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    fd26:	88a1      	ldrh	r1, [r4, #4]
    fd28:	8860      	ldrh	r0, [r4, #2]
    fd2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fd2e:	f7f4 bd4d 	b.w	47cc <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>
    fd32:	2012      	movs	r0, #18
    fd34:	bd10      	pop	{r4, pc}
    fd36:	7802      	ldrb	r2, [r0, #0]
    fd38:	2a01      	cmp	r2, #1
    fd3a:	d001      	beq.n	fd40 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x104>
    fd3c:	b1ba      	cbz	r2, fd6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x132>
    fd3e:	e018      	b.n	fd72 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    fd40:	7842      	ldrb	r2, [r0, #1]
    fd42:	b13a      	cbz	r2, fd54 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x118>
    fd44:	2a01      	cmp	r2, #1
    fd46:	d005      	beq.n	fd54 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x118>
    fd48:	2a02      	cmp	r2, #2
    fd4a:	d112      	bne.n	fd72 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    fd4c:	b189      	cbz	r1, fd72 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    fd4e:	8881      	ldrh	r1, [r0, #4]
    fd50:	b179      	cbz	r1, fd72 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    fd52:	e000      	b.n	fd56 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x11a>
    fd54:	b159      	cbz	r1, fd6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x132>
    fd56:	8841      	ldrh	r1, [r0, #2]
    fd58:	b149      	cbz	r1, fd6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x132>
    fd5a:	8880      	ldrh	r0, [r0, #4]
    fd5c:	b138      	cbz	r0, fd6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x132>
    fd5e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    fd62:	0049      	lsls	r1, r1, #1
    fd64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    fd68:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
    fd6c:	d201      	bcs.n	fd72 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    fd6e:	2000      	movs	r0, #0
    fd70:	4770      	bx	lr
    fd72:	2012      	movs	r0, #18
    fd74:	4770      	bx	lr
    fd76:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    fd7a:	7a45      	ldrb	r5, [r0, #9]
    fd7c:	4604      	mov	r4, r0
    fd7e:	0768      	lsls	r0, r5, #29
    fd80:	d06c      	beq.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fd82:	08e8      	lsrs	r0, r5, #3
    fd84:	d16a      	bne.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fd86:	2d02      	cmp	r5, #2
    fd88:	d068      	beq.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fd8a:	f7f7 fd4b 	bl	7824 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fd8e:	ea25 0000 	bic.w	r0, r5, r0
    fd92:	0740      	lsls	r0, r0, #29
    fd94:	d102      	bne.n	fd9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x160>
    fd96:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    fd9a:	b110      	cbz	r0, fda2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x166>
    fd9c:	2011      	movs	r0, #17
    fd9e:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    fda2:	2d01      	cmp	r5, #1
    fda4:	d15a      	bne.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fda6:	27ff      	movs	r7, #255	; 0xff
    fda8:	2101      	movs	r1, #1
    fdaa:	69a0      	ldr	r0, [r4, #24]
    fdac:	f7f7 fbfe 	bl	75ac <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x330>
    fdb0:	b3e8      	cbz	r0, fe2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f2>
    fdb2:	46a8      	mov	r8, r5
    fdb4:	2600      	movs	r6, #0
    fdb6:	4635      	mov	r5, r6
    fdb8:	42bd      	cmp	r5, r7
    fdba:	d02f      	beq.n	fe1c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1e0>
    fdbc:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    fdc0:	6988      	ldr	r0, [r1, #24]
    fdc2:	68c9      	ldr	r1, [r1, #12]
    fdc4:	4288      	cmp	r0, r1
    fdc6:	d849      	bhi.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fdc8:	4406      	add	r6, r0
    fdca:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    fdce:	4681      	mov	r9, r0
    fdd0:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
    fdd2:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    fdd6:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    fdd8:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    fddc:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    fdde:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    fde0:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    fde2:	2000      	movs	r0, #0
    fde4:	f000 f89e 	bl	ff24 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e8>
    fde8:	b308      	cbz	r0, fe2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f2>
    fdea:	b1bd      	cbz	r5, fe1c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1e0>
    fdec:	f8b9 1024 	ldrh.w	r1, [r9, #36]	; 0x24
    fdf0:	f8b9 0022 	ldrh.w	r0, [r9, #34]	; 0x22
    fdf4:	4281      	cmp	r1, r0
    fdf6:	d131      	bne.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fdf8:	f8b9 102a 	ldrh.w	r1, [r9, #42]	; 0x2a
    fdfc:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
    fe00:	4281      	cmp	r1, r0
    fe02:	d12b      	bne.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe04:	f8b9 1030 	ldrh.w	r1, [r9, #48]	; 0x30
    fe08:	f8b9 002e 	ldrh.w	r0, [r9, #46]	; 0x2e
    fe0c:	4281      	cmp	r1, r0
    fe0e:	d125      	bne.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe10:	f8b9 1036 	ldrh.w	r1, [r9, #54]	; 0x36
    fe14:	f8b9 0034 	ldrh.w	r0, [r9, #52]	; 0x34
    fe18:	4281      	cmp	r1, r0
    fe1a:	d11f      	bne.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe1c:	1c6d      	adds	r5, r5, #1
    fe1e:	b2ed      	uxtb	r5, r5
    fe20:	4545      	cmp	r5, r8
    fe22:	d3c9      	bcc.n	fdb8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x17c>
    fe24:	68e0      	ldr	r0, [r4, #12]
    fe26:	42b0      	cmp	r0, r6
    fe28:	d318      	bcc.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe2a:	7820      	ldrb	r0, [r4, #0]
    fe2c:	e000      	b.n	fe30 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f4>
    fe2e:	e003      	b.n	fe38 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1fc>
    fe30:	b120      	cbz	r0, fe3c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x200>
    fe32:	2801      	cmp	r0, #1
    fe34:	d112      	bne.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe36:	e004      	b.n	fe42 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x206>
    fe38:	2030      	movs	r0, #48	; 0x30
    fe3a:	e7b0      	b.n	fd9e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x162>
    fe3c:	78a0      	ldrb	r0, [r4, #2]
    fe3e:	2800      	cmp	r0, #0
    fe40:	d1f7      	bne.n	fe32 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f6>
    fe42:	7860      	ldrb	r0, [r4, #1]
    fe44:	b128      	cbz	r0, fe52 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
    fe46:	2801      	cmp	r0, #1
    fe48:	d003      	beq.n	fe52 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
    fe4a:	2802      	cmp	r0, #2
    fe4c:	d001      	beq.n	fe52 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
    fe4e:	2803      	cmp	r0, #3
    fe50:	d104      	bne.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe52:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    fe56:	b108      	cbz	r0, fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe58:	2807      	cmp	r0, #7
    fe5a:	d901      	bls.n	fe60 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x224>
    fe5c:	2012      	movs	r0, #18
    fe5e:	e79e      	b.n	fd9e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x162>
    fe60:	2000      	movs	r0, #0
    fe62:	e79c      	b.n	fd9e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x162>
    fe64:	b570      	push	{r4, r5, r6, lr}
    fe66:	4604      	mov	r4, r0
    fe68:	7800      	ldrb	r0, [r0, #0]
    fe6a:	2500      	movs	r5, #0
    fe6c:	2801      	cmp	r0, #1
    fe6e:	d004      	beq.n	fe7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23e>
    fe70:	b118      	cbz	r0, fe7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23e>
    fe72:	2802      	cmp	r0, #2
    fe74:	d001      	beq.n	fe7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23e>
    fe76:	2803      	cmp	r0, #3
    fe78:	d139      	bne.n	feee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b2>
    fe7a:	7860      	ldrb	r0, [r4, #1]
    fe7c:	b128      	cbz	r0, fe8a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x24e>
    fe7e:	2801      	cmp	r0, #1
    fe80:	d003      	beq.n	fe8a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x24e>
    fe82:	2802      	cmp	r0, #2
    fe84:	d001      	beq.n	fe8a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x24e>
    fe86:	2803      	cmp	r0, #3
    fe88:	d131      	bne.n	feee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b2>
    fe8a:	7e60      	ldrb	r0, [r4, #25]
    fe8c:	b948      	cbnz	r0, fea2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x266>
    fe8e:	78a0      	ldrb	r0, [r4, #2]
    fe90:	2801      	cmp	r0, #1
    fe92:	d12c      	bne.n	feee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b2>
    fe94:	f7f7 fcc6 	bl	7824 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fe98:	4601      	mov	r1, r0
    fe9a:	78a0      	ldrb	r0, [r4, #2]
    fe9c:	ea30 0101 	bics.w	r1, r0, r1
    fea0:	d001      	beq.n	fea6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x26a>
    fea2:	2011      	movs	r0, #17
    fea4:	bd70      	pop	{r4, r5, r6, pc}
    fea6:	07c0      	lsls	r0, r0, #31
    fea8:	d006      	beq.n	feb8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x27c>
    feaa:	78e0      	ldrb	r0, [r4, #3]
    feac:	2301      	movs	r3, #1
    feae:	6922      	ldr	r2, [r4, #16]
    feb0:	68a1      	ldr	r1, [r4, #8]
    feb2:	f000 f820 	bl	fef6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ba>
    feb6:	4605      	mov	r5, r0
    feb8:	78a0      	ldrb	r0, [r4, #2]
    feba:	0780      	lsls	r0, r0, #30
    febc:	d506      	bpl.n	fecc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x290>
    febe:	78e0      	ldrb	r0, [r4, #3]
    fec0:	2302      	movs	r3, #2
    fec2:	6922      	ldr	r2, [r4, #16]
    fec4:	68a1      	ldr	r1, [r4, #8]
    fec6:	f000 f816 	bl	fef6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ba>
    feca:	4305      	orrs	r5, r0
    fecc:	78a0      	ldrb	r0, [r4, #2]
    fece:	0740      	lsls	r0, r0, #29
    fed0:	d506      	bpl.n	fee0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a4>
    fed2:	78e0      	ldrb	r0, [r4, #3]
    fed4:	2304      	movs	r3, #4
    fed6:	6922      	ldr	r2, [r4, #16]
    fed8:	68a1      	ldr	r1, [r4, #8]
    feda:	f000 f80c 	bl	fef6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ba>
    fede:	4305      	orrs	r5, r0
    fee0:	b10d      	cbz	r5, fee6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2aa>
    fee2:	4628      	mov	r0, r5
    fee4:	bd70      	pop	{r4, r5, r6, pc}
    fee6:	7e20      	ldrb	r0, [r4, #24]
    fee8:	b108      	cbz	r0, feee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b2>
    feea:	2807      	cmp	r0, #7
    feec:	d901      	bls.n	fef2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b6>
    feee:	2012      	movs	r0, #18
    fef0:	bd70      	pop	{r4, r5, r6, pc}
    fef2:	2000      	movs	r0, #0
    fef4:	bd70      	pop	{r4, r5, r6, pc}
    fef6:	b570      	push	{r4, r5, r6, lr}
    fef8:	4614      	mov	r4, r2
    fefa:	460d      	mov	r5, r1
    fefc:	b108      	cbz	r0, ff02 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c6>
    fefe:	2801      	cmp	r0, #1
    ff00:	d10a      	bne.n	ff18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2dc>
    ff02:	4619      	mov	r1, r3
    ff04:	4610      	mov	r0, r2
    ff06:	f7f7 fb51 	bl	75ac <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x330>
    ff0a:	b138      	cbz	r0, ff1c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e0>
    ff0c:	4628      	mov	r0, r5
    ff0e:	f7f7 fa51 	bl	73b4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x138>
    ff12:	b118      	cbz	r0, ff1c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e0>
    ff14:	42ac      	cmp	r4, r5
    ff16:	d903      	bls.n	ff20 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e4>
    ff18:	2012      	movs	r0, #18
    ff1a:	bd70      	pop	{r4, r5, r6, pc}
    ff1c:	2030      	movs	r0, #48	; 0x30
    ff1e:	bd70      	pop	{r4, r5, r6, pc}
    ff20:	2000      	movs	r0, #0
    ff22:	bd70      	pop	{r4, r5, r6, pc}
    ff24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ff28:	461d      	mov	r5, r3
    ff2a:	4610      	mov	r0, r2
    ff2c:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
    ff30:	1f8b      	subs	r3, r1, #6
    ff32:	f640 427a 	movw	r2, #3194	; 0xc7a
    ff36:	9e08      	ldr	r6, [sp, #32]
    ff38:	4293      	cmp	r3, r2
    ff3a:	d81c      	bhi.n	ff76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ff3c:	1f83      	subs	r3, r0, #6
    ff3e:	4293      	cmp	r3, r2
    ff40:	d819      	bhi.n	ff76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ff42:	4281      	cmp	r1, r0
    ff44:	d817      	bhi.n	ff76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ff46:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    ff4a:	d214      	bcs.n	ff76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ff4c:	f1a4 010a 	sub.w	r1, r4, #10
    ff50:	1f12      	subs	r2, r2, #4
    ff52:	4291      	cmp	r1, r2
    ff54:	d80f      	bhi.n	ff76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ff56:	f7fd fdb4 	bl	dac2 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    ff5a:	1c6d      	adds	r5, r5, #1
    ff5c:	4368      	muls	r0, r5
    ff5e:	f240 2171 	movw	r1, #625	; 0x271
    ff62:	0040      	lsls	r0, r0, #1
    ff64:	434c      	muls	r4, r1
    ff66:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
    ff6a:	d204      	bcs.n	ff76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ff6c:	42b7      	cmp	r7, r6
    ff6e:	d802      	bhi.n	ff76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ff70:	2001      	movs	r0, #1
    ff72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ff76:	2000      	movs	r0, #0
    ff78:	e7fb      	b.n	ff72 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x336>
    ff7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ff7e:	4606      	mov	r6, r0
    ff80:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
    ff84:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
    ff88:	4615      	mov	r5, r2
    ff8a:	302c      	adds	r0, #44	; 0x2c
    ff8c:	f7f5 f96e 	bl	526c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>
    ff90:	4680      	mov	r8, r0
    ff92:	2102      	movs	r1, #2
    ff94:	f7fd fe33 	bl	dbfe <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    ff98:	4287      	cmp	r7, r0
    ff9a:	d200      	bcs.n	ff9e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x362>
    ff9c:	4638      	mov	r0, r7
    ff9e:	4607      	mov	r7, r0
    ffa0:	2102      	movs	r1, #2
    ffa2:	4640      	mov	r0, r8
    ffa4:	f7fd fe2b 	bl	dbfe <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    ffa8:	4284      	cmp	r4, r0
    ffaa:	d200      	bcs.n	ffae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x372>
    ffac:	4620      	mov	r0, r4
    ffae:	8831      	ldrh	r1, [r6, #0]
    ffb0:	8029      	strh	r1, [r5, #0]
    ffb2:	2f1b      	cmp	r7, #27
    ffb4:	d913      	bls.n	ffde <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3a2>
    ffb6:	2ffb      	cmp	r7, #251	; 0xfb
    ffb8:	d300      	bcc.n	ffbc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x380>
    ffba:	27fb      	movs	r7, #251	; 0xfb
    ffbc:	806f      	strh	r7, [r5, #2]
    ffbe:	281b      	cmp	r0, #27
    ffc0:	d90f      	bls.n	ffe2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3a6>
    ffc2:	28fb      	cmp	r0, #251	; 0xfb
    ffc4:	d300      	bcc.n	ffc8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x38c>
    ffc6:	20fb      	movs	r0, #251	; 0xfb
    ffc8:	80e8      	strh	r0, [r5, #6]
    ffca:	4640      	mov	r0, r8
    ffcc:	f7ff fe43 	bl	fc56 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a>
    ffd0:	80a8      	strh	r0, [r5, #4]
    ffd2:	4640      	mov	r0, r8
    ffd4:	f7ff fe3f 	bl	fc56 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a>
    ffd8:	8128      	strh	r0, [r5, #8]
    ffda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ffde:	271b      	movs	r7, #27
    ffe0:	e7ec      	b.n	ffbc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x380>
    ffe2:	201b      	movs	r0, #27
    ffe4:	e7f0      	b.n	ffc8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x38c>
    ffe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ffea:	7890      	ldrb	r0, [r2, #2]
    ffec:	9e06      	ldr	r6, [sp, #24]
    ffee:	461d      	mov	r5, r3
    fff0:	4614      	mov	r4, r2
    fff2:	b908      	cbnz	r0, fff8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3bc>
    fff4:	f7f7 fc16 	bl	7824 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fff8:	78e4      	ldrb	r4, [r4, #3]
    fffa:	4607      	mov	r7, r0
    fffc:	b914      	cbnz	r4, 10004 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3c8>
    fffe:	f7f7 fc11 	bl	7824 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10002:	4604      	mov	r4, r0
   10004:	b16f      	cbz	r7, 10022 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e6>
   10006:	b164      	cbz	r4, 10022 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e6>
   10008:	4638      	mov	r0, r7
   1000a:	f7ff fe2f 	bl	fc6c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30>
   1000e:	4620      	mov	r0, r4
   10010:	f7ff fe2c 	bl	fc6c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30>
   10014:	b12f      	cbz	r7, 10022 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e6>
   10016:	b124      	cbz	r4, 10022 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e6>
   10018:	702f      	strb	r7, [r5, #0]
   1001a:	7034      	strb	r4, [r6, #0]
   1001c:	2000      	movs	r0, #0
   1001e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10022:	2009      	movs	r0, #9
   10024:	e7fb      	b.n	1001e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e2>
   10026:	207f      	movs	r0, #127	; 0x7f
   10028:	f000 b821 	b.w	1006e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x432>
   1002c:	b508      	push	{r3, lr}
   1002e:	f890 1248 	ldrb.w	r1, [r0, #584]	; 0x248
   10032:	f890 00c4 	ldrb.w	r0, [r0, #196]	; 0xc4
   10036:	f88d 0000 	strb.w	r0, [sp]
   1003a:	9800      	ldr	r0, [sp, #0]
   1003c:	9000      	str	r0, [sp, #0]
   1003e:	f89d 0000 	ldrb.w	r0, [sp]
   10042:	b100      	cbz	r0, 10046 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x40a>
   10044:	2001      	movs	r0, #1
   10046:	1e40      	subs	r0, r0, #1
   10048:	4208      	tst	r0, r1
   1004a:	d003      	beq.n	10054 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x418>
   1004c:	2904      	cmp	r1, #4
   1004e:	d001      	beq.n	10054 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x418>
   10050:	2001      	movs	r0, #1
   10052:	bd08      	pop	{r3, pc}
   10054:	2000      	movs	r0, #0
   10056:	bd08      	pop	{r3, pc}
   10058:	b510      	push	{r4, lr}
   1005a:	f7f4 fc29 	bl	48b0 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
   1005e:	2804      	cmp	r0, #4
   10060:	d003      	beq.n	1006a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x42e>
   10062:	2805      	cmp	r0, #5
   10064:	d001      	beq.n	1006a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x42e>
   10066:	2000      	movs	r0, #0
   10068:	bd10      	pop	{r4, pc}
   1006a:	2001      	movs	r0, #1
   1006c:	bd10      	pop	{r4, pc}
   1006e:	b508      	push	{r3, lr}
   10070:	f640 1288 	movw	r2, #2440	; 0x988
   10074:	2300      	movs	r3, #0
   10076:	4669      	mov	r1, sp
   10078:	f7fc fb2e 	bl	c6d8 <mpsl_fem_tx_power_split>
   1007c:	bd08      	pop	{r3, pc}
   1007e:	b530      	push	{r4, r5, lr}
   10080:	f340 0400 	sbfx	r4, r0, #0, #1
   10084:	f340 0040 	sbfx	r0, r0, #1, #1
   10088:	1c40      	adds	r0, r0, #1
   1008a:	9d03      	ldr	r5, [sp, #12]
   1008c:	1c64      	adds	r4, r4, #1
   1008e:	d000      	beq.n	10092 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x456>
   10090:	b119      	cbz	r1, 1009a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x45e>
   10092:	b100      	cbz	r0, 10096 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x45a>
   10094:	b10a      	cbz	r2, 1009a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x45e>
   10096:	b91c      	cbnz	r4, 100a0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x464>
   10098:	e001      	b.n	1009e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x462>
   1009a:	2011      	movs	r0, #17
   1009c:	bd30      	pop	{r4, r5, pc}
   1009e:	2100      	movs	r1, #0
   100a0:	7019      	strb	r1, [r3, #0]
   100a2:	b900      	cbnz	r0, 100a6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x46a>
   100a4:	2200      	movs	r2, #0
   100a6:	702a      	strb	r2, [r5, #0]
   100a8:	2000      	movs	r0, #0
   100aa:	bd30      	pop	{r4, r5, pc}
   100ac:	b510      	push	{r4, lr}
   100ae:	f7ff ffd3 	bl	10058 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41c>
   100b2:	b120      	cbz	r0, 100be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x482>
   100b4:	f7f3 fa90 	bl	35d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
   100b8:	b108      	cbz	r0, 100be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x482>
   100ba:	2001      	movs	r0, #1
   100bc:	bd10      	pop	{r4, pc}
   100be:	2000      	movs	r0, #0
   100c0:	bd10      	pop	{r4, pc}
   100c2:	6802      	ldr	r2, [r0, #0]
   100c4:	b912      	cbnz	r2, 100cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x490>
   100c6:	6001      	str	r1, [r0, #0]
   100c8:	4770      	bx	lr
   100ca:	4602      	mov	r2, r0
   100cc:	6850      	ldr	r0, [r2, #4]
   100ce:	b108      	cbz	r0, 100d4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x498>
   100d0:	428a      	cmp	r2, r1
   100d2:	d1fa      	bne.n	100ca <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x48e>
   100d4:	428a      	cmp	r2, r1
   100d6:	d0f7      	beq.n	100c8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x48c>
   100d8:	6051      	str	r1, [r2, #4]
   100da:	4770      	bx	lr
   100dc:	b510      	push	{r4, lr}
   100de:	4604      	mov	r4, r0
   100e0:	e002      	b.n	100e8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ac>
   100e2:	6820      	ldr	r0, [r4, #0]
   100e4:	4780      	blx	r0
   100e6:	6864      	ldr	r4, [r4, #4]
   100e8:	2c00      	cmp	r4, #0
   100ea:	d1fa      	bne.n	100e2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a6>
   100ec:	bd10      	pop	{r4, pc}
   100ee:	b510      	push	{r4, lr}
   100f0:	2000      	movs	r0, #0
   100f2:	f7fd fb28 	bl	d746 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   100f6:	f7f1 f86d 	bl	11d4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   100fa:	f7f1 fa75 	bl	15e8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   100fe:	f7f1 fc03 	bl	1908 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   10102:	2800      	cmp	r0, #0
   10104:	d003      	beq.n	1010e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4d2>
   10106:	21df      	movs	r1, #223	; 0xdf
   10108:	2001      	movs	r0, #1
   1010a:	f7f0 fcab 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1010e:	bd10      	pop	{r4, pc}
   10110:	b510      	push	{r4, lr}
   10112:	f000 f80a 	bl	1012a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ee>
   10116:	f7fe fe6f 	bl	edf8 <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>
   1011a:	2800      	cmp	r0, #0
   1011c:	d004      	beq.n	10128 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ec>
   1011e:	f240 1161 	movw	r1, #353	; 0x161
   10122:	2001      	movs	r0, #1
   10124:	f7f0 fc9e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10128:	bd10      	pop	{r4, pc}
   1012a:	b510      	push	{r4, lr}
   1012c:	f7f4 fc08 	bl	4940 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>
   10130:	b110      	cbz	r0, 10138 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4fc>
   10132:	f240 113b 	movw	r1, #315	; 0x13b
   10136:	e004      	b.n	10142 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x506>
   10138:	f7fe fd4a 	bl	ebd0 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
   1013c:	b120      	cbz	r0, 10148 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x50c>
   1013e:	f44f 719e 	mov.w	r1, #316	; 0x13c
   10142:	2001      	movs	r0, #1
   10144:	f7f0 fc8e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10148:	f7f7 f858 	bl	71fc <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>
   1014c:	f7f3 f98e 	bl	346c <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
   10150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10154:	f7f6 beb4 	b.w	6ec0 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>
   10158:	000b0001 	.word	0x000b0001
   1015c:	000a0002 	.word	0x000a0002
   10160:	00090005 	.word	0x00090005
   10164:	0008000a 	.word	0x0008000a
   10168:	00070014 	.word	0x00070014
   1016c:	0006001e 	.word	0x0006001e
   10170:	00050032 	.word	0x00050032
   10174:	0004004b 	.word	0x0004004b
   10178:	00030064 	.word	0x00030064
   1017c:	00020096 	.word	0x00020096
   10180:	000100fa 	.word	0x000100fa
   10184:	000001f4 	.word	0x000001f4

00010188 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA>:
   10188:	b518      	push	{r3, r4, lr}
   1018a:	2200      	movs	r2, #0
   1018c:	704a      	strb	r2, [r1, #1]
   1018e:	2317      	movs	r3, #23
   10190:	700b      	strb	r3, [r1, #0]
   10192:	7202      	strb	r2, [r0, #8]
   10194:	f8d0 400a 	ldr.w	r4, [r0, #10]
   10198:	604c      	str	r4, [r1, #4]
   1019a:	89c3      	ldrh	r3, [r0, #14]
   1019c:	810b      	strh	r3, [r1, #8]
   1019e:	7a03      	ldrb	r3, [r0, #8]
   101a0:	f88d 3000 	strb.w	r3, [sp]
   101a4:	9b00      	ldr	r3, [sp, #0]
   101a6:	9300      	str	r3, [sp, #0]
   101a8:	f89d 3000 	ldrb.w	r3, [sp]
   101ac:	2b00      	cmp	r3, #0
   101ae:	d1f0      	bne.n	10192 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0xa>
   101b0:	bd18      	pop	{r3, r4, pc}

000101b2 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY>:
   101b2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   101b4:	460d      	mov	r5, r1
   101b6:	4604      	mov	r4, r0
   101b8:	f7f2 fb40 	bl	283c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
   101bc:	2600      	movs	r6, #0
   101be:	b1f8      	cbz	r0, 10200 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4e>
   101c0:	f5a4 70ca 	sub.w	r0, r4, #404	; 0x194
   101c4:	7226      	strb	r6, [r4, #8]
   101c6:	8800      	ldrh	r0, [r0, #0]
   101c8:	f8ad 0000 	strh.w	r0, [sp]
   101cc:	a902      	add	r1, sp, #8
   101ce:	f7fd fc6c 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   101d2:	b108      	cbz	r0, 101d8 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x26>
   101d4:	2124      	movs	r1, #36	; 0x24
   101d6:	e010      	b.n	101fa <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x48>
   101d8:	9803      	ldr	r0, [sp, #12]
   101da:	f810 1f66 	ldrb.w	r1, [r0, #102]!
   101de:	f88d 1002 	strb.w	r1, [sp, #2]
   101e2:	7841      	ldrb	r1, [r0, #1]
   101e4:	f88d 1003 	strb.w	r1, [sp, #3]
   101e8:	8840      	ldrh	r0, [r0, #2]
   101ea:	f8ad 0004 	strh.w	r0, [sp, #4]
   101ee:	2102      	movs	r1, #2
   101f0:	4668      	mov	r0, sp
   101f2:	f7ff fc9d 	bl	fb30 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   101f6:	b118      	cbz	r0, 10200 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4e>
   101f8:	213a      	movs	r1, #58	; 0x3a
   101fa:	207e      	movs	r0, #126	; 0x7e
   101fc:	f7f0 fc32 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10200:	2020      	movs	r0, #32
   10202:	7028      	strb	r0, [r5, #0]
   10204:	706e      	strb	r6, [r5, #1]
   10206:	f8d4 000a 	ldr.w	r0, [r4, #10]
   1020a:	6068      	str	r0, [r5, #4]
   1020c:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

0001020e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   1020e:	b510      	push	{r4, lr}
   10210:	f7f7 fe68 	bl	7ee4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   10214:	f000 f81d 	bl	10252 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   10218:	f7f7 fb80 	bl	791c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   1021c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10220:	f7f7 bc7a 	b.w	7b18 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00010224 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   10224:	b510      	push	{r4, lr}
   10226:	24c8      	movs	r4, #200	; 0xc8
   10228:	1e64      	subs	r4, r4, #1
   1022a:	b2e4      	uxtb	r4, r4
   1022c:	f7f7 fb94 	bl	7958 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   10230:	2802      	cmp	r0, #2
   10232:	d003      	beq.n	1023c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   10234:	2801      	cmp	r0, #1
   10236:	d000      	beq.n	1023a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   10238:	2000      	movs	r0, #0
   1023a:	bd10      	pop	{r4, pc}
   1023c:	2c00      	cmp	r4, #0
   1023e:	d1f3      	bne.n	10228 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   10240:	21ca      	movs	r1, #202	; 0xca
   10242:	203b      	movs	r0, #59	; 0x3b
   10244:	f7f0 fc0e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10248:	5840      	ldr	r0, [r0, r1]
   1024a:	2800      	cmp	r0, #0
   1024c:	d000      	beq.n	10250 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   1024e:	2001      	movs	r0, #1
   10250:	4770      	bx	lr

00010252 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   10252:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   10256:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1025a:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   1025e:	f3bf 8f4f 	dsb	sy
   10262:	f3bf 8f6f 	isb	sy
   10266:	f7f7 bcf1 	b.w	7c4c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   1026a:	2800      	cmp	r0, #0
   1026c:	db09      	blt.n	10282 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   1026e:	f000 021f 	and.w	r2, r0, #31
   10272:	2101      	movs	r1, #1
   10274:	4091      	lsls	r1, r2
   10276:	0940      	lsrs	r0, r0, #5
   10278:	0080      	lsls	r0, r0, #2
   1027a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1027e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10282:	4770      	bx	lr
   10284:	2800      	cmp	r0, #0
   10286:	db0d      	blt.n	102a4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   10288:	f000 021f 	and.w	r2, r0, #31
   1028c:	2101      	movs	r1, #1
   1028e:	4091      	lsls	r1, r2
   10290:	0940      	lsrs	r0, r0, #5
   10292:	0080      	lsls	r0, r0, #2
   10294:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10298:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   1029c:	f3bf 8f4f 	dsb	sy
   102a0:	f3bf 8f6f 	isb	sy
   102a4:	4770      	bx	lr
   102a6:	5840      	ldr	r0, [r0, r1]
   102a8:	2800      	cmp	r0, #0
   102aa:	d000      	beq.n	102ae <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   102ac:	2001      	movs	r0, #1
   102ae:	4770      	bx	lr
   102b0:	5840      	ldr	r0, [r0, r1]
   102b2:	2800      	cmp	r0, #0
   102b4:	d000      	beq.n	102b8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   102b6:	2001      	movs	r0, #1
   102b8:	4770      	bx	lr

000102ba <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   102ba:	b510      	push	{r4, lr}
   102bc:	4604      	mov	r4, r0
   102be:	4608      	mov	r0, r1
   102c0:	f7f7 ff30 	bl	8124 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   102c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   102c8:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   102cc:	fbb0 f0f1 	udiv	r0, r0, r1
   102d0:	1a20      	subs	r0, r4, r0
   102d2:	1e80      	subs	r0, r0, #2
   102d4:	bd10      	pop	{r4, pc}

000102d6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   102d6:	b510      	push	{r4, lr}
   102d8:	4604      	mov	r4, r0
   102da:	4608      	mov	r0, r1
   102dc:	f7f7 ff22 	bl	8124 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   102e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   102e4:	fbb0 f0f1 	udiv	r0, r0, r1
   102e8:	1a20      	subs	r0, r4, r0
   102ea:	bd10      	pop	{r4, pc}
   102ec:	2804      	cmp	r0, #4
   102ee:	d202      	bcs.n	102f6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x20>
   102f0:	f04f 0028 	mov.w	r0, #40	; 0x28
   102f4:	4770      	bx	lr
   102f6:	d102      	bne.n	102fe <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x28>
   102f8:	f04f 0010 	mov.w	r0, #16
   102fc:	4770      	bx	lr
   102fe:	f04f 0000 	mov.w	r0, #0
   10302:	4770      	bx	lr
   10304:	2100      	movs	r1, #0
   10306:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   1030a:	f800 1f24 	strb.w	r1, [r0, #36]!
   1030e:	7041      	strb	r1, [r0, #1]
   10310:	4770      	bx	lr

00010312 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
   10312:	b570      	push	{r4, r5, r6, lr}
   10314:	f7f8 fcc6 	bl	8ca4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   10318:	4605      	mov	r5, r0
   1031a:	2400      	movs	r4, #0
   1031c:	e006      	b.n	1032c <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
   1031e:	4620      	mov	r0, r4
   10320:	f7f8 fcc6 	bl	8cb0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   10324:	f7ff ffee 	bl	10304 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
   10328:	1c64      	adds	r4, r4, #1
   1032a:	b2e4      	uxtb	r4, r4
   1032c:	42ac      	cmp	r4, r5
   1032e:	d3f6      	bcc.n	1031e <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
   10330:	bd70      	pop	{r4, r5, r6, pc}

00010332 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
   10332:	f7fb b8c5 	b.w	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

00010336 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
   10336:	b510      	push	{r4, lr}
   10338:	2000      	movs	r0, #0
   1033a:	f7fb fbfb 	bl	bb34 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
   1033e:	6800      	ldr	r0, [r0, #0]
   10340:	2800      	cmp	r0, #0
   10342:	bf18      	it	ne
   10344:	2001      	movne	r0, #1
   10346:	bd10      	pop	{r4, pc}

00010348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
   10348:	0a41      	lsrs	r1, r0, #9
   1034a:	f643 5209 	movw	r2, #15625	; 0x3d09
   1034e:	4351      	muls	r1, r2
   10350:	f3c0 0008 	ubfx	r0, r0, #0, #9
   10354:	fb10 f002 	smulbb	r0, r0, r2
   10358:	f500 7080 	add.w	r0, r0, #256	; 0x100
   1035c:	eb01 2050 	add.w	r0, r1, r0, lsr #9
   10360:	4770      	bx	lr
   10362:	2800      	cmp	r0, #0
   10364:	db09      	blt.n	1037a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
   10366:	f000 021f 	and.w	r2, r0, #31
   1036a:	2101      	movs	r1, #1
   1036c:	4091      	lsls	r1, r2
   1036e:	0940      	lsrs	r0, r0, #5
   10370:	0080      	lsls	r0, r0, #2
   10372:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10376:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1037a:	4770      	bx	lr
   1037c:	2800      	cmp	r0, #0
   1037e:	db0d      	blt.n	1039c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
   10380:	f000 021f 	and.w	r2, r0, #31
   10384:	2101      	movs	r1, #1
   10386:	4091      	lsls	r1, r2
   10388:	0940      	lsrs	r0, r0, #5
   1038a:	0080      	lsls	r0, r0, #2
   1038c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10390:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10394:	f3bf 8f4f 	dsb	sy
   10398:	f3bf 8f6f 	isb	sy
   1039c:	4770      	bx	lr
   1039e:	5840      	ldr	r0, [r0, r1]
   103a0:	2800      	cmp	r0, #0
   103a2:	d000      	beq.n	103a6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x5e>
   103a4:	2001      	movs	r0, #1
   103a6:	4770      	bx	lr
   103a8:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
   103ac:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
   103b0:	f002 0201 	and.w	r2, r2, #1
   103b4:	03c0      	lsls	r0, r0, #15
   103b6:	d503      	bpl.n	103c0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   103b8:	428a      	cmp	r2, r1
   103ba:	d101      	bne.n	103c0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   103bc:	2001      	movs	r0, #1
   103be:	4770      	bx	lr
   103c0:	2000      	movs	r0, #0
   103c2:	4770      	bx	lr

000103c4 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
   103c4:	b510      	push	{r4, lr}
   103c6:	2101      	movs	r1, #1
   103c8:	0788      	lsls	r0, r1, #30
   103ca:	f7fb ff6f 	bl	c2ac <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   103ce:	2800      	cmp	r0, #0
   103d0:	d000      	beq.n	103d4 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
   103d2:	2001      	movs	r0, #1
   103d4:	bd10      	pop	{r4, pc}

000103d6 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
   103d6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   103da:	2101      	movs	r1, #1
   103dc:	6001      	str	r1, [r0, #0]
   103de:	4770      	bx	lr

000103e0 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
   103e0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   103e4:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
   103e8:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
   103ec:	f002 0203 	and.w	r2, r2, #3
   103f0:	03c9      	lsls	r1, r1, #15
   103f2:	d503      	bpl.n	103fc <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   103f4:	4282      	cmp	r2, r0
   103f6:	d101      	bne.n	103fc <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   103f8:	2001      	movs	r0, #1
   103fa:	4770      	bx	lr
   103fc:	2000      	movs	r0, #0
   103fe:	4770      	bx	lr

00010400 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
   10400:	b510      	push	{r4, lr}
   10402:	2100      	movs	r1, #0
   10404:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10408:	f7fb ff50 	bl	c2ac <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   1040c:	2800      	cmp	r0, #0
   1040e:	d000      	beq.n	10412 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
   10410:	2001      	movs	r0, #1
   10412:	bd10      	pop	{r4, pc}
   10414:	2800      	cmp	r0, #0
   10416:	db09      	blt.n	1042c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
   10418:	f000 021f 	and.w	r2, r0, #31
   1041c:	2101      	movs	r1, #1
   1041e:	4091      	lsls	r1, r2
   10420:	0940      	lsrs	r0, r0, #5
   10422:	0080      	lsls	r0, r0, #2
   10424:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10428:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1042c:	4770      	bx	lr
   1042e:	2800      	cmp	r0, #0
   10430:	db0d      	blt.n	1044e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
   10432:	f000 021f 	and.w	r2, r0, #31
   10436:	2101      	movs	r1, #1
   10438:	4091      	lsls	r1, r2
   1043a:	0940      	lsrs	r0, r0, #5
   1043c:	0080      	lsls	r0, r0, #2
   1043e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10442:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10446:	f3bf 8f4f 	dsb	sy
   1044a:	f3bf 8f6f 	isb	sy
   1044e:	4770      	bx	lr
   10450:	00021000 	.word	0x00021000
   10454:	000000fa 	.word	0x000000fa
   10458:	cc9ef18c 	.word	0xcc9ef18c
   1045c:	a7d74134 	.word	0xa7d74134
   10460:	1459f70e 	.word	0x1459f70e
   10464:	67d72bbb 	.word	0x67d72bbb
   10468:	ebbebb7f 	.word	0xebbebb7f
   1046c:	2800      	cmp	r0, #0
   1046e:	db09      	blt.n	10484 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
   10470:	f000 021f 	and.w	r2, r0, #31
   10474:	2101      	movs	r1, #1
   10476:	4091      	lsls	r1, r2
   10478:	0940      	lsrs	r0, r0, #5
   1047a:	0080      	lsls	r0, r0, #2
   1047c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10480:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10484:	4770      	bx	lr

00010486 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
   10486:	f3ef 8110 	mrs	r1, PRIMASK
   1048a:	b672      	cpsid	i
   1048c:	7802      	ldrb	r2, [r0, #0]
   1048e:	2a01      	cmp	r2, #1
   10490:	d001      	beq.n	10496 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
   10492:	2201      	movs	r2, #1
   10494:	e000      	b.n	10498 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
   10496:	2200      	movs	r2, #0
   10498:	2301      	movs	r3, #1
   1049a:	7003      	strb	r3, [r0, #0]
   1049c:	b901      	cbnz	r1, 104a0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
   1049e:	b662      	cpsie	i
   104a0:	b10a      	cbz	r2, 104a6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
   104a2:	2000      	movs	r0, #0
   104a4:	4770      	bx	lr
   104a6:	f06f 0022 	mvn.w	r0, #34	; 0x22
   104aa:	4770      	bx	lr

000104ac <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
   104ac:	2100      	movs	r1, #0
   104ae:	7001      	strb	r1, [r0, #0]
   104b0:	4608      	mov	r0, r1
   104b2:	4770      	bx	lr

000104b4 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
   104b4:	f3ef 8110 	mrs	r1, PRIMASK
   104b8:	b672      	cpsid	i
   104ba:	2200      	movs	r2, #0
   104bc:	7002      	strb	r2, [r0, #0]
   104be:	b901      	cbnz	r1, 104c2 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
   104c0:	b662      	cpsie	i
   104c2:	2000      	movs	r0, #0
   104c4:	4770      	bx	lr

000104c6 <mpsl_low_priority_process>:
   104c6:	f7fc b847 	b.w	c558 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

000104ca <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
   104ca:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   104ce:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   104d2:	280f      	cmp	r0, #15
   104d4:	d001      	beq.n	104da <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
   104d6:	2000      	movs	r0, #0
   104d8:	4770      	bx	lr
   104da:	2001      	movs	r0, #1
   104dc:	4770      	bx	lr

000104de <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
   104de:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   104e2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   104e6:	280a      	cmp	r0, #10
   104e8:	d001      	beq.n	104ee <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
   104ea:	2000      	movs	r0, #0
   104ec:	4770      	bx	lr
   104ee:	2001      	movs	r0, #1
   104f0:	4770      	bx	lr

000104f2 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
   104f2:	b500      	push	{lr}
   104f4:	f7ff fff3 	bl	104de <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   104f8:	b120      	cbz	r0, 10504 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
   104fa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   104fe:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10502:	b108      	cbz	r0, 10508 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
   10504:	2000      	movs	r0, #0
   10506:	bd00      	pop	{pc}
   10508:	2001      	movs	r0, #1
   1050a:	bd00      	pop	{pc}

0001050c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
   1050c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10510:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10514:	280e      	cmp	r0, #14
   10516:	d001      	beq.n	1051c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
   10518:	2000      	movs	r0, #0
   1051a:	4770      	bx	lr
   1051c:	2001      	movs	r0, #1
   1051e:	4770      	bx	lr

00010520 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
   10520:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10524:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10528:	2810      	cmp	r0, #16
   1052a:	d001      	beq.n	10530 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
   1052c:	2000      	movs	r0, #0
   1052e:	4770      	bx	lr
   10530:	2001      	movs	r0, #1
   10532:	4770      	bx	lr

00010534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
   10534:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10538:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   1053c:	2806      	cmp	r0, #6
   1053e:	d003      	beq.n	10548 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10540:	1c40      	adds	r0, r0, #1
   10542:	d001      	beq.n	10548 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10544:	2000      	movs	r0, #0
   10546:	4770      	bx	lr
   10548:	2001      	movs	r0, #1
   1054a:	4770      	bx	lr

0001054c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
   1054c:	b500      	push	{lr}
   1054e:	f7ff fff1 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10552:	b148      	cbz	r0, 10568 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10554:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10558:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   1055c:	2806      	cmp	r0, #6
   1055e:	d303      	bcc.n	10568 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10560:	1c40      	adds	r0, r0, #1
   10562:	d001      	beq.n	10568 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10564:	2001      	movs	r0, #1
   10566:	bd00      	pop	{pc}
   10568:	2000      	movs	r0, #0
   1056a:	bd00      	pop	{pc}

0001056c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
   1056c:	b500      	push	{lr}
   1056e:	f7ff ffe1 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10572:	b138      	cbz	r0, 10584 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
   10574:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10578:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   1057c:	2806      	cmp	r0, #6
   1057e:	d303      	bcc.n	10588 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10580:	1c40      	adds	r0, r0, #1
   10582:	d001      	beq.n	10588 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10584:	2000      	movs	r0, #0
   10586:	bd00      	pop	{pc}
   10588:	2001      	movs	r0, #1
   1058a:	bd00      	pop	{pc}

0001058c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
   1058c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10590:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10594:	280d      	cmp	r0, #13
   10596:	d001      	beq.n	1059c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
   10598:	2000      	movs	r0, #0
   1059a:	4770      	bx	lr
   1059c:	2001      	movs	r0, #1
   1059e:	4770      	bx	lr

000105a0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
   105a0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   105a4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   105a8:	2808      	cmp	r0, #8
   105aa:	d001      	beq.n	105b0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
   105ac:	2000      	movs	r0, #0
   105ae:	4770      	bx	lr
   105b0:	2001      	movs	r0, #1
   105b2:	4770      	bx	lr

000105b4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
   105b4:	f7fc b80a 	b.w	c5cc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

000105b8 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
   105b8:	f7fc b808 	b.w	c5cc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

000105bc <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>:
   105bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   105c0:	428a      	cmp	r2, r1
   105c2:	d803      	bhi.n	105cc <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x10>
   105c4:	2179      	movs	r1, #121	; 0x79
   105c6:	2096      	movs	r0, #150	; 0x96
   105c8:	f7fb fec6 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   105cc:	fab2 f382 	clz	r3, r2
   105d0:	b13b      	cbz	r3, 105e2 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x26>
   105d2:	4099      	lsls	r1, r3
   105d4:	f1c3 0420 	rsb	r4, r3, #32
   105d8:	fa20 f404 	lsr.w	r4, r0, r4
   105dc:	4321      	orrs	r1, r4
   105de:	4098      	lsls	r0, r3
   105e0:	409a      	lsls	r2, r3
   105e2:	0c14      	lsrs	r4, r2, #16
   105e4:	0c07      	lsrs	r7, r0, #16
   105e6:	b286      	uxth	r6, r0
   105e8:	fbb1 f0f4 	udiv	r0, r1, r4
   105ec:	fbb1 f3f4 	udiv	r3, r1, r4
   105f0:	fb04 1c10 	mls	ip, r4, r0, r1
   105f4:	b295      	uxth	r5, r2
   105f6:	fb03 f005 	mul.w	r0, r3, r5
   105fa:	eb07 4c0c 	add.w	ip, r7, ip, lsl #16
   105fe:	4560      	cmp	r0, ip
   10600:	d907      	bls.n	10612 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x56>
   10602:	eba0 000c 	sub.w	r0, r0, ip
   10606:	4290      	cmp	r0, r2
   10608:	d901      	bls.n	1060e <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x52>
   1060a:	2002      	movs	r0, #2
   1060c:	e000      	b.n	10610 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x54>
   1060e:	2001      	movs	r0, #1
   10610:	1a1b      	subs	r3, r3, r0
   10612:	0409      	lsls	r1, r1, #16
   10614:	0418      	lsls	r0, r3, #16
   10616:	19c9      	adds	r1, r1, r7
   10618:	fba3 3702 	umull	r3, r7, r3, r2
   1061c:	1acf      	subs	r7, r1, r3
   1061e:	fbb7 f1f4 	udiv	r1, r7, r4
   10622:	fbb7 f3f4 	udiv	r3, r7, r4
   10626:	fb04 7413 	mls	r4, r4, r3, r7
   1062a:	fb01 f305 	mul.w	r3, r1, r5
   1062e:	eb06 4404 	add.w	r4, r6, r4, lsl #16
   10632:	42a3      	cmp	r3, r4
   10634:	d906      	bls.n	10644 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x88>
   10636:	1b1b      	subs	r3, r3, r4
   10638:	4293      	cmp	r3, r2
   1063a:	d901      	bls.n	10640 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x84>
   1063c:	2202      	movs	r2, #2
   1063e:	e000      	b.n	10642 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x86>
   10640:	2201      	movs	r2, #1
   10642:	1a89      	subs	r1, r1, r2
   10644:	4308      	orrs	r0, r1
   10646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001064a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
   1064a:	2a00      	cmp	r2, #0
   1064c:	bf04      	itt	eq
   1064e:	2000      	moveq	r0, #0
   10650:	4770      	bxeq	lr
   10652:	1e52      	subs	r2, r2, #1
   10654:	d007      	beq.n	10666 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
   10656:	7803      	ldrb	r3, [r0, #0]
   10658:	f891 c000 	ldrb.w	ip, [r1]
   1065c:	4563      	cmp	r3, ip
   1065e:	bf04      	itt	eq
   10660:	1c40      	addeq	r0, r0, #1
   10662:	1c49      	addeq	r1, r1, #1
   10664:	d0f5      	beq.n	10652 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
   10666:	7800      	ldrb	r0, [r0, #0]
   10668:	7809      	ldrb	r1, [r1, #0]
   1066a:	1a40      	subs	r0, r0, r1
   1066c:	4770      	bx	lr

0001066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
   1066e:	b4f0      	push	{r4, r5, r6, r7}
   10670:	ea80 0c01 	eor.w	ip, r0, r1
   10674:	4603      	mov	r3, r0
   10676:	f01c 0f03 	tst.w	ip, #3
   1067a:	d13c      	bne.n	106f6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   1067c:	f013 0f03 	tst.w	r3, #3
   10680:	d00b      	beq.n	1069a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
   10682:	2a00      	cmp	r2, #0
   10684:	bf04      	itt	eq
   10686:	bcf0      	popeq	{r4, r5, r6, r7}
   10688:	4770      	bxeq	lr
   1068a:	f811 cb01 	ldrb.w	ip, [r1], #1
   1068e:	f803 cb01 	strb.w	ip, [r3], #1
   10692:	1e52      	subs	r2, r2, #1
   10694:	f013 0f03 	tst.w	r3, #3
   10698:	d1f3      	bne.n	10682 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
   1069a:	2a03      	cmp	r2, #3
   1069c:	d94f      	bls.n	1073e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   1069e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   106a2:	d24c      	bcs.n	1073e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   106a4:	f1c2 0c00 	rsb	ip, r2, #0
   106a8:	ea4f 74ec 	mov.w	r4, ip, asr #31
   106ac:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
   106b0:	ea4f 0cac 	mov.w	ip, ip, asr #2
   106b4:	f1cc 0c00 	rsb	ip, ip, #0
   106b8:	f1bc 0f00 	cmp.w	ip, #0
   106bc:	dd1b      	ble.n	106f6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   106be:	1f0d      	subs	r5, r1, #4
   106c0:	1f1c      	subs	r4, r3, #4
   106c2:	f01c 0f01 	tst.w	ip, #1
   106c6:	d003      	beq.n	106d0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
   106c8:	f855 6f04 	ldr.w	r6, [r5, #4]!
   106cc:	f844 6f04 	str.w	r6, [r4, #4]!
   106d0:	ea5f 066c 	movs.w	r6, ip, asr #1
   106d4:	d007      	beq.n	106e6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
   106d6:	686f      	ldr	r7, [r5, #4]
   106d8:	6067      	str	r7, [r4, #4]
   106da:	f855 7f08 	ldr.w	r7, [r5, #8]!
   106de:	f844 7f08 	str.w	r7, [r4, #8]!
   106e2:	1e76      	subs	r6, r6, #1
   106e4:	d1f7      	bne.n	106d6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
   106e6:	eb01 018c 	add.w	r1, r1, ip, lsl #2
   106ea:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   106ee:	f1cc 0c00 	rsb	ip, ip, #0
   106f2:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   106f6:	2a00      	cmp	r2, #0
   106f8:	bf04      	itt	eq
   106fa:	bcf0      	popeq	{r4, r5, r6, r7}
   106fc:	4770      	bxeq	lr
   106fe:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10702:	d226      	bcs.n	10752 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   10704:	2a00      	cmp	r2, #0
   10706:	bfdc      	itt	le
   10708:	bcf0      	pople	{r4, r5, r6, r7}
   1070a:	4770      	bxle	lr
   1070c:	1e49      	subs	r1, r1, #1
   1070e:	1e5b      	subs	r3, r3, #1
   10710:	f012 0f01 	tst.w	r2, #1
   10714:	d003      	beq.n	1071e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
   10716:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   1071a:	f803 cf01 	strb.w	ip, [r3, #1]!
   1071e:	1052      	asrs	r2, r2, #1
   10720:	bf04      	itt	eq
   10722:	bcf0      	popeq	{r4, r5, r6, r7}
   10724:	4770      	bxeq	lr
   10726:	f891 c001 	ldrb.w	ip, [r1, #1]
   1072a:	f883 c001 	strb.w	ip, [r3, #1]
   1072e:	f811 cf02 	ldrb.w	ip, [r1, #2]!
   10732:	f803 cf02 	strb.w	ip, [r3, #2]!
   10736:	1e52      	subs	r2, r2, #1
   10738:	d1f5      	bne.n	10726 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
   1073a:	bcf0      	pop	{r4, r5, r6, r7}
   1073c:	4770      	bx	lr
   1073e:	2a04      	cmp	r2, #4
   10740:	d3d9      	bcc.n	106f6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10742:	f851 cb04 	ldr.w	ip, [r1], #4
   10746:	1f12      	subs	r2, r2, #4
   10748:	f843 cb04 	str.w	ip, [r3], #4
   1074c:	2a04      	cmp	r2, #4
   1074e:	d2f8      	bcs.n	10742 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
   10750:	e7d1      	b.n	106f6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10752:	f811 cb01 	ldrb.w	ip, [r1], #1
   10756:	f803 cb01 	strb.w	ip, [r3], #1
   1075a:	1e52      	subs	r2, r2, #1
   1075c:	d1f9      	bne.n	10752 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   1075e:	bcf0      	pop	{r4, r5, r6, r7}
   10760:	4770      	bx	lr

00010762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
   10762:	b470      	push	{r4, r5, r6}
   10764:	4603      	mov	r3, r0
   10766:	f001 0cff 	and.w	ip, r1, #255	; 0xff
   1076a:	f010 0f03 	tst.w	r0, #3
   1076e:	d009      	beq.n	10784 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
   10770:	2a00      	cmp	r2, #0
   10772:	bf04      	itt	eq
   10774:	bc70      	popeq	{r4, r5, r6}
   10776:	4770      	bxeq	lr
   10778:	f803 cb01 	strb.w	ip, [r3], #1
   1077c:	1e52      	subs	r2, r2, #1
   1077e:	f013 0f03 	tst.w	r3, #3
   10782:	d1f5      	bne.n	10770 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
   10784:	b2c9      	uxtb	r1, r1
   10786:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1078a:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
   1078e:	2a03      	cmp	r2, #3
   10790:	d939      	bls.n	10806 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   10792:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10796:	d236      	bcs.n	10806 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   10798:	4251      	negs	r1, r2
   1079a:	17cc      	asrs	r4, r1, #31
   1079c:	eb01 7194 	add.w	r1, r1, r4, lsr #30
   107a0:	1089      	asrs	r1, r1, #2
   107a2:	424e      	negs	r6, r1
   107a4:	2e00      	cmp	r6, #0
   107a6:	dd11      	ble.n	107cc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   107a8:	1f19      	subs	r1, r3, #4
   107aa:	f016 0f01 	tst.w	r6, #1
   107ae:	bf18      	it	ne
   107b0:	f841 5f04 	strne.w	r5, [r1, #4]!
   107b4:	1074      	asrs	r4, r6, #1
   107b6:	d004      	beq.n	107c2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
   107b8:	604d      	str	r5, [r1, #4]
   107ba:	f841 5f08 	str.w	r5, [r1, #8]!
   107be:	1e64      	subs	r4, r4, #1
   107c0:	d1fa      	bne.n	107b8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
   107c2:	4271      	negs	r1, r6
   107c4:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   107c8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   107cc:	2a00      	cmp	r2, #0
   107ce:	bf04      	itt	eq
   107d0:	bc70      	popeq	{r4, r5, r6}
   107d2:	4770      	bxeq	lr
   107d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   107d8:	d21d      	bcs.n	10816 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   107da:	2a00      	cmp	r2, #0
   107dc:	bfdc      	itt	le
   107de:	bc70      	pople	{r4, r5, r6}
   107e0:	4770      	bxle	lr
   107e2:	1e59      	subs	r1, r3, #1
   107e4:	f012 0f01 	tst.w	r2, #1
   107e8:	bf18      	it	ne
   107ea:	f801 cf01 	strbne.w	ip, [r1, #1]!
   107ee:	1052      	asrs	r2, r2, #1
   107f0:	bf04      	itt	eq
   107f2:	bc70      	popeq	{r4, r5, r6}
   107f4:	4770      	bxeq	lr
   107f6:	f881 c001 	strb.w	ip, [r1, #1]
   107fa:	f801 cf02 	strb.w	ip, [r1, #2]!
   107fe:	1e52      	subs	r2, r2, #1
   10800:	d1f9      	bne.n	107f6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
   10802:	bc70      	pop	{r4, r5, r6}
   10804:	4770      	bx	lr
   10806:	2a04      	cmp	r2, #4
   10808:	d3e0      	bcc.n	107cc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   1080a:	1f12      	subs	r2, r2, #4
   1080c:	f843 5b04 	str.w	r5, [r3], #4
   10810:	2a04      	cmp	r2, #4
   10812:	d2fa      	bcs.n	1080a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
   10814:	e7da      	b.n	107cc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10816:	f803 cb01 	strb.w	ip, [r3], #1
   1081a:	1e52      	subs	r2, r2, #1
   1081c:	d1fb      	bne.n	10816 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   1081e:	bc70      	pop	{r4, r5, r6}
   10820:	4770      	bx	lr
   10822:	f04f 30ff 	mov.w	r0, #4294967295
   10826:	4770      	bx	lr
   10828:	2000      	movs	r0, #0
   1082a:	4770      	bx	lr
   1082c:	2000      	movs	r0, #0
   1082e:	4770      	bx	lr
   10830:	f04f 30ff 	mov.w	r0, #4294967295
   10834:	4770      	bx	lr
   10836:	4770      	bx	lr
   10838:	4770      	bx	lr
   1083a:	2000      	movs	r0, #0
   1083c:	4770      	bx	lr
   1083e:	2100      	movs	r1, #0
   10840:	7001      	strb	r1, [r0, #0]
   10842:	4770      	bx	lr
   10844:	f04f 30ff 	mov.w	r0, #4294967295
   10848:	4770      	bx	lr
   1084a:	f04f 30ff 	mov.w	r0, #4294967295
   1084e:	4770      	bx	lr
   10850:	2100      	movs	r1, #0
   10852:	7001      	strb	r1, [r0, #0]
   10854:	4770      	bx	lr
   10856:	f04f 30ff 	mov.w	r0, #4294967295
   1085a:	4770      	bx	lr
   1085c:	f04f 30ff 	mov.w	r0, #4294967295
   10860:	4770      	bx	lr
   10862:	7800      	ldrb	r0, [r0, #0]
   10864:	2800      	cmp	r0, #0
   10866:	d001      	beq.n	1086c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
   10868:	f06f 0015 	mvn.w	r0, #21
   1086c:	4770      	bx	lr
   1086e:	2000      	movs	r0, #0
   10870:	4770      	bx	lr
   10872:	2200      	movs	r2, #0
   10874:	f000 b802 	b.w	1087c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

00010878 <mpsl_fem_init>:
   10878:	f7f8 b982 	b.w	8b80 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

0001087c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
   1087c:	b570      	push	{r4, r5, r6, lr}
   1087e:	4614      	mov	r4, r2
   10880:	460d      	mov	r5, r1
   10882:	1b00      	subs	r0, r0, r4
   10884:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   10888:	4288      	cmp	r0, r1
   1088a:	da01      	bge.n	10890 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
   1088c:	4608      	mov	r0, r1
   1088e:	e002      	b.n	10896 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   10890:	287f      	cmp	r0, #127	; 0x7f
   10892:	dd00      	ble.n	10896 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   10894:	207f      	movs	r0, #127	; 0x7f
   10896:	4619      	mov	r1, r3
   10898:	b240      	sxtb	r0, r0
   1089a:	f7f8 f9a5 	bl	8be8 <mpsl_tx_power_radio_supported_power_adjust>
   1089e:	7028      	strb	r0, [r5, #0]
   108a0:	706c      	strb	r4, [r5, #1]
   108a2:	2100      	movs	r1, #0
   108a4:	4420      	add	r0, r4
   108a6:	70a9      	strb	r1, [r5, #2]
   108a8:	b240      	sxtb	r0, r0
   108aa:	bd70      	pop	{r4, r5, r6, pc}
   108ac:	1702080c 	.word	0x1702080c
   108b0:	0201010d 	.word	0x0201010d
   108b4:	01010909 	.word	0x01010909
   108b8:	18090206 	.word	0x18090206
   108bc:	01010318 	.word	0x01010318
   108c0:	03030909 	.word	0x03030909
   108c4:	01020305 	.word	0x01020305
   108c8:	24020223 	.word	0x24020223
   108cc:	04041009 	.word	0x04041009
   108d0:	0b0b0505 	.word	0x0b0b0505
   108d4:	0b04      	.short	0x0b04
   108d6:	2b          	.byte	0x2b
   108d7:	25          	.byte	0x25
   108d8:	2726      	.short	0x2726
   108da:	0301      	.short	0x0301
   108dc:	0101      	.short	0x0101
   108de:	01          	.byte	0x01
   108df:	d8          	.byte	0xd8
   108e0:	f8f4f0ec 	.word	0xf8f4f0ec
   108e4:	030200fc 	.word	0x030200fc
   108e8:	07060504 	.word	0x07060504
   108ec:	00000008 	.word	0x00000008
	...
   10900:	01010100 	.word	0x01010100
   10904:	02020201 	.word	0x02020201
   10908:	03030302 	.word	0x03030302
   1090c:	04040403 	.word	0x04040403
   10910:	05050504 	.word	0x05050504
   10914:	07060605 	.word	0x07060605
   10918:	0b0a0908 	.word	0x0b0a0908
   1091c:	00000d0c 	.word	0x00000d0c
	...
   10930:	01010000 	.word	0x01010000
   10934:	02020101 	.word	0x02020101
   10938:	03030202 	.word	0x03030202
   1093c:	04040303 	.word	0x04040303
   10940:	05050404 	.word	0x05050404
   10944:	06060505 	.word	0x06060505
   10948:	00090806 	.word	0x00090806

0001094c <bt_addr_le_to_str>:
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
   1094c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1094e:	b08b      	sub	sp, #44	; 0x2c
   10950:	4604      	mov	r4, r0
   10952:	460d      	mov	r5, r1
   10954:	4616      	mov	r6, r2
	char type[10];

	switch (addr->type) {
   10956:	7803      	ldrb	r3, [r0, #0]
   10958:	2b03      	cmp	r3, #3
   1095a:	d82c      	bhi.n	109b6 <bt_addr_le_to_str+0x6a>
   1095c:	e8df f003 	tbb	[pc, r3]
   10960:	26211c02 	.word	0x26211c02
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   10964:	4917      	ldr	r1, [pc, #92]	; (109c4 <bt_addr_le_to_str+0x78>)
   10966:	a807      	add	r0, sp, #28
   10968:	f015 fb09 	bl	25f7e <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   1096c:	7963      	ldrb	r3, [r4, #5]
   1096e:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   10970:	78e1      	ldrb	r1, [r4, #3]
   10972:	78a0      	ldrb	r0, [r4, #2]
   10974:	7867      	ldrb	r7, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   10976:	f10d 0c1c 	add.w	ip, sp, #28
   1097a:	f8cd c014 	str.w	ip, [sp, #20]
   1097e:	9704      	str	r7, [sp, #16]
   10980:	9003      	str	r0, [sp, #12]
   10982:	9102      	str	r1, [sp, #8]
   10984:	9201      	str	r2, [sp, #4]
   10986:	9300      	str	r3, [sp, #0]
   10988:	79a3      	ldrb	r3, [r4, #6]
   1098a:	4a0f      	ldr	r2, [pc, #60]	; (109c8 <bt_addr_le_to_str+0x7c>)
   1098c:	4631      	mov	r1, r6
   1098e:	4628      	mov	r0, r5
   10990:	f013 fe16 	bl	245c0 <snprintk>
}
   10994:	b00b      	add	sp, #44	; 0x2c
   10996:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   10998:	490c      	ldr	r1, [pc, #48]	; (109cc <bt_addr_le_to_str+0x80>)
   1099a:	a807      	add	r0, sp, #28
   1099c:	f015 faef 	bl	25f7e <strcpy>
		break;
   109a0:	e7e4      	b.n	1096c <bt_addr_le_to_str+0x20>
		strcpy(type, "public-id");
   109a2:	490b      	ldr	r1, [pc, #44]	; (109d0 <bt_addr_le_to_str+0x84>)
   109a4:	a807      	add	r0, sp, #28
   109a6:	f015 faea 	bl	25f7e <strcpy>
		break;
   109aa:	e7df      	b.n	1096c <bt_addr_le_to_str+0x20>
		strcpy(type, "random-id");
   109ac:	4909      	ldr	r1, [pc, #36]	; (109d4 <bt_addr_le_to_str+0x88>)
   109ae:	a807      	add	r0, sp, #28
   109b0:	f015 fae5 	bl	25f7e <strcpy>
		break;
   109b4:	e7da      	b.n	1096c <bt_addr_le_to_str+0x20>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   109b6:	4a08      	ldr	r2, [pc, #32]	; (109d8 <bt_addr_le_to_str+0x8c>)
   109b8:	210a      	movs	r1, #10
   109ba:	a807      	add	r0, sp, #28
   109bc:	f013 fe00 	bl	245c0 <snprintk>
		break;
   109c0:	e7d4      	b.n	1096c <bt_addr_le_to_str+0x20>
   109c2:	bf00      	nop
   109c4:	0002b2e8 	.word	0x0002b2e8
   109c8:	0002b310 	.word	0x0002b310
   109cc:	0002b2f0 	.word	0x0002b2f0
   109d0:	0002b2f8 	.word	0x0002b2f8
   109d4:	0002b304 	.word	0x0002b304
   109d8:	0002ce50 	.word	0x0002ce50

000109dc <disconnected>:
	}

}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
   109dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   109de:	b08b      	sub	sp, #44	; 0x2c
   109e0:	af00      	add	r7, sp, #0
   109e2:	460d      	mov	r5, r1
	char addr_str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_t *addr = bt_conn_get_dst(conn);
   109e4:	f015 ffe2 	bl	269ac <bt_conn_get_dst>
   109e8:	4604      	mov	r4, r0

	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
   109ea:	221e      	movs	r2, #30
   109ec:	f107 0108 	add.w	r1, r7, #8
   109f0:	f7ff ffac 	bl	1094c <bt_addr_le_to_str>
	return memcmp(a, b, sizeof(*a));
   109f4:	2207      	movs	r2, #7
   109f6:	49a6      	ldr	r1, [pc, #664]	; (10c90 <disconnected+0x2b4>)
   109f8:	4620      	mov	r0, r4
   109fa:	f015 fb02 	bl	26002 <memcmp>

	if (bt_addr_le_eq(addr, &IFL_bt_addr)) {
   109fe:	2800      	cmp	r0, #0
   10a00:	d16b      	bne.n	10ada <disconnected+0xfe>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10a02:	4ba4      	ldr	r3, [pc, #656]	; (10c94 <disconnected+0x2b8>)
   10a04:	f3bf 8f5b 	dmb	ish
   10a08:	e853 1f00 	ldrex	r1, [r3]
   10a0c:	f021 0101 	bic.w	r1, r1, #1
   10a10:	e843 1200 	strex	r2, r1, [r3]
   10a14:	2a00      	cmp	r2, #0
   10a16:	d1f7      	bne.n	10a08 <disconnected+0x2c>
   10a18:	f3bf 8f5b 	dmb	ish

		atomic_clear_bit(&flags, IFL_CONNECTED_FLAG);
		LOG_INF("Internal FL disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   10a1c:	466c      	mov	r4, sp
   10a1e:	2300      	movs	r3, #0
   10a20:	713b      	strb	r3, [r7, #4]
   10a22:	2302      	movs	r3, #2
   10a24:	717b      	strb	r3, [r7, #5]
   10a26:	b08a      	sub	sp, #40	; 0x28
   10a28:	46ec      	mov	ip, sp
   10a2a:	f11c 0210 	adds.w	r2, ip, #16
   10a2e:	d01a      	beq.n	10a66 <disconnected+0x8a>
   10a30:	2012      	movs	r0, #18
   10a32:	b122      	cbz	r2, 10a3e <disconnected+0x62>
   10a34:	2804      	cmp	r0, #4
   10a36:	dd02      	ble.n	10a3e <disconnected+0x62>
   10a38:	4b97      	ldr	r3, [pc, #604]	; (10c98 <disconnected+0x2bc>)
   10a3a:	f8cc 3014 	str.w	r3, [ip, #20]
   10a3e:	2300      	movs	r3, #0
   10a40:	703b      	strb	r3, [r7, #0]
   10a42:	2302      	movs	r3, #2
   10a44:	707b      	strb	r3, [r7, #1]
   10a46:	b1da      	cbz	r2, 10a80 <disconnected+0xa4>
   10a48:	4603      	mov	r3, r0
   10a4a:	2808      	cmp	r0, #8
   10a4c:	dd03      	ble.n	10a56 <disconnected+0x7a>
   10a4e:	f107 0108 	add.w	r1, r7, #8
   10a52:	f8cc 1018 	str.w	r1, [ip, #24]
   10a56:	2b0c      	cmp	r3, #12
   10a58:	dd01      	ble.n	10a5e <disconnected+0x82>
   10a5a:	f8cc 501c 	str.w	r5, [ip, #28]
   10a5e:	f10c 0320 	add.w	r3, ip, #32
   10a62:	2100      	movs	r1, #0
   10a64:	e00a      	b.n	10a7c <disconnected+0xa0>
   10a66:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10a6a:	e7e2      	b.n	10a32 <disconnected+0x56>
   10a6c:	f101 0528 	add.w	r5, r1, #40	; 0x28
   10a70:	443d      	add	r5, r7
   10a72:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   10a76:	f803 5b01 	strb.w	r5, [r3], #1
   10a7a:	3101      	adds	r1, #1
   10a7c:	2901      	cmp	r1, #1
   10a7e:	d9f5      	bls.n	10a6c <disconnected+0x90>
   10a80:	2811      	cmp	r0, #17
   10a82:	dd27      	ble.n	10ad4 <disconnected+0xf8>
   10a84:	2312      	movs	r3, #18
   10a86:	b14a      	cbz	r2, 10a9c <disconnected+0xc0>
   10a88:	2104      	movs	r1, #4
   10a8a:	7139      	strb	r1, [r7, #4]
   10a8c:	2100      	movs	r1, #0
   10a8e:	7179      	strb	r1, [r7, #5]
   10a90:	71b9      	strb	r1, [r7, #6]
   10a92:	2101      	movs	r1, #1
   10a94:	71f9      	strb	r1, [r7, #7]
   10a96:	6878      	ldr	r0, [r7, #4]
   10a98:	f8cc 0010 	str.w	r0, [ip, #16]
   10a9c:	2100      	movs	r1, #0
   10a9e:	f36f 0100 	bfc	r1, #0, #1
   10aa2:	f36f 0141 	bfc	r1, #1, #1
   10aa6:	f36f 0182 	bfc	r1, #2, #1
   10aaa:	f36f 01c5 	bfc	r1, #3, #3
   10aae:	2003      	movs	r0, #3
   10ab0:	f360 1188 	bfi	r1, r0, #6, #3
   10ab4:	f3c3 0309 	ubfx	r3, r3, #0, #10
   10ab8:	f363 2152 	bfi	r1, r3, #9, #10
   10abc:	f36f 41de 	bfc	r1, #19, #12
   10ac0:	f36f 71df 	bfc	r1, #31, #1
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
   10ac4:	2300      	movs	r3, #0
   10ac6:	4875      	ldr	r0, [pc, #468]	; (10c9c <disconnected+0x2c0>)
   10ac8:	f014 fe73 	bl	257b2 <z_impl_z_log_msg_static_create>
   10acc:	46a5      	mov	sp, r4
		
	} else {
		LOG_WRN("UNKNOWN SENSOR DISCONNECTED, addr: %s (reason 0x%02x)", addr_str, reason);
	}

}
   10ace:	372c      	adds	r7, #44	; 0x2c
   10ad0:	46bd      	mov	sp, r7
   10ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_INF("Internal FL disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   10ad4:	f06f 031b 	mvn.w	r3, #27
   10ad8:	e7d5      	b.n	10a86 <disconnected+0xaa>
   10ada:	2207      	movs	r2, #7
   10adc:	4970      	ldr	r1, [pc, #448]	; (10ca0 <disconnected+0x2c4>)
   10ade:	4620      	mov	r0, r4
   10ae0:	f015 fa8f 	bl	26002 <memcmp>
	} else if (bt_addr_le_eq(addr, &IFR_bt_addr)) {
   10ae4:	2800      	cmp	r0, #0
   10ae6:	d165      	bne.n	10bb4 <disconnected+0x1d8>
   10ae8:	4b6a      	ldr	r3, [pc, #424]	; (10c94 <disconnected+0x2b8>)
   10aea:	f3bf 8f5b 	dmb	ish
   10aee:	e853 1f00 	ldrex	r1, [r3]
   10af2:	f021 0102 	bic.w	r1, r1, #2
   10af6:	e843 1200 	strex	r2, r1, [r3]
   10afa:	2a00      	cmp	r2, #0
   10afc:	d1f7      	bne.n	10aee <disconnected+0x112>
   10afe:	f3bf 8f5b 	dmb	ish
		LOG_INF("Internal FR disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   10b02:	466e      	mov	r6, sp
   10b04:	2300      	movs	r3, #0
   10b06:	713b      	strb	r3, [r7, #4]
   10b08:	2302      	movs	r3, #2
   10b0a:	717b      	strb	r3, [r7, #5]
   10b0c:	b08a      	sub	sp, #40	; 0x28
   10b0e:	466c      	mov	r4, sp
   10b10:	f114 0210 	adds.w	r2, r4, #16
   10b14:	d021      	beq.n	10b5a <disconnected+0x17e>
   10b16:	2012      	movs	r0, #18
   10b18:	b11a      	cbz	r2, 10b22 <disconnected+0x146>
   10b1a:	2804      	cmp	r0, #4
   10b1c:	dd01      	ble.n	10b22 <disconnected+0x146>
   10b1e:	4b61      	ldr	r3, [pc, #388]	; (10ca4 <disconnected+0x2c8>)
   10b20:	6163      	str	r3, [r4, #20]
   10b22:	2300      	movs	r3, #0
   10b24:	703b      	strb	r3, [r7, #0]
   10b26:	2302      	movs	r3, #2
   10b28:	707b      	strb	r3, [r7, #1]
   10b2a:	b1ca      	cbz	r2, 10b60 <disconnected+0x184>
   10b2c:	4603      	mov	r3, r0
   10b2e:	2808      	cmp	r0, #8
   10b30:	dd02      	ble.n	10b38 <disconnected+0x15c>
   10b32:	f107 0108 	add.w	r1, r7, #8
   10b36:	61a1      	str	r1, [r4, #24]
   10b38:	2b0c      	cmp	r3, #12
   10b3a:	dd00      	ble.n	10b3e <disconnected+0x162>
   10b3c:	61e5      	str	r5, [r4, #28]
   10b3e:	f104 0320 	add.w	r3, r4, #32
   10b42:	2100      	movs	r1, #0
   10b44:	2901      	cmp	r1, #1
   10b46:	d80b      	bhi.n	10b60 <disconnected+0x184>
   10b48:	f101 0528 	add.w	r5, r1, #40	; 0x28
   10b4c:	443d      	add	r5, r7
   10b4e:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   10b52:	f803 5b01 	strb.w	r5, [r3], #1
   10b56:	3101      	adds	r1, #1
   10b58:	e7f4      	b.n	10b44 <disconnected+0x168>
   10b5a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10b5e:	e7db      	b.n	10b18 <disconnected+0x13c>
   10b60:	2811      	cmp	r0, #17
   10b62:	dd24      	ble.n	10bae <disconnected+0x1d2>
   10b64:	2312      	movs	r3, #18
   10b66:	b142      	cbz	r2, 10b7a <disconnected+0x19e>
   10b68:	2104      	movs	r1, #4
   10b6a:	7139      	strb	r1, [r7, #4]
   10b6c:	2100      	movs	r1, #0
   10b6e:	7179      	strb	r1, [r7, #5]
   10b70:	71b9      	strb	r1, [r7, #6]
   10b72:	2101      	movs	r1, #1
   10b74:	71f9      	strb	r1, [r7, #7]
   10b76:	6878      	ldr	r0, [r7, #4]
   10b78:	6120      	str	r0, [r4, #16]
   10b7a:	2100      	movs	r1, #0
   10b7c:	f36f 0100 	bfc	r1, #0, #1
   10b80:	f36f 0141 	bfc	r1, #1, #1
   10b84:	f36f 0182 	bfc	r1, #2, #1
   10b88:	f36f 01c5 	bfc	r1, #3, #3
   10b8c:	2003      	movs	r0, #3
   10b8e:	f360 1188 	bfi	r1, r0, #6, #3
   10b92:	f3c3 0309 	ubfx	r3, r3, #0, #10
   10b96:	f363 2152 	bfi	r1, r3, #9, #10
   10b9a:	f36f 41de 	bfc	r1, #19, #12
   10b9e:	f36f 71df 	bfc	r1, #31, #1
   10ba2:	2300      	movs	r3, #0
   10ba4:	483d      	ldr	r0, [pc, #244]	; (10c9c <disconnected+0x2c0>)
   10ba6:	f014 fe04 	bl	257b2 <z_impl_z_log_msg_static_create>
   10baa:	46b5      	mov	sp, r6
   10bac:	e78f      	b.n	10ace <disconnected+0xf2>
   10bae:	f06f 031b 	mvn.w	r3, #27
   10bb2:	e7d8      	b.n	10b66 <disconnected+0x18a>
   10bb4:	2207      	movs	r2, #7
   10bb6:	493c      	ldr	r1, [pc, #240]	; (10ca8 <disconnected+0x2cc>)
   10bb8:	4620      	mov	r0, r4
   10bba:	f015 fa22 	bl	26002 <memcmp>
	} else if (bt_addr_le_eq(addr, &IRL_bt_addr)) {
   10bbe:	2800      	cmp	r0, #0
   10bc0:	d176      	bne.n	10cb0 <disconnected+0x2d4>
   10bc2:	4b34      	ldr	r3, [pc, #208]	; (10c94 <disconnected+0x2b8>)
   10bc4:	f3bf 8f5b 	dmb	ish
   10bc8:	e853 1f00 	ldrex	r1, [r3]
   10bcc:	f021 0104 	bic.w	r1, r1, #4
   10bd0:	e843 1200 	strex	r2, r1, [r3]
   10bd4:	2a00      	cmp	r2, #0
   10bd6:	d1f7      	bne.n	10bc8 <disconnected+0x1ec>
   10bd8:	f3bf 8f5b 	dmb	ish
		LOG_INF("Internal RL disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   10bdc:	466e      	mov	r6, sp
   10bde:	2300      	movs	r3, #0
   10be0:	713b      	strb	r3, [r7, #4]
   10be2:	2302      	movs	r3, #2
   10be4:	717b      	strb	r3, [r7, #5]
   10be6:	b08a      	sub	sp, #40	; 0x28
   10be8:	466c      	mov	r4, sp
   10bea:	f114 0210 	adds.w	r2, r4, #16
   10bee:	d017      	beq.n	10c20 <disconnected+0x244>
   10bf0:	2012      	movs	r0, #18
   10bf2:	b11a      	cbz	r2, 10bfc <disconnected+0x220>
   10bf4:	2804      	cmp	r0, #4
   10bf6:	dd01      	ble.n	10bfc <disconnected+0x220>
   10bf8:	4b2c      	ldr	r3, [pc, #176]	; (10cac <disconnected+0x2d0>)
   10bfa:	6163      	str	r3, [r4, #20]
   10bfc:	2300      	movs	r3, #0
   10bfe:	703b      	strb	r3, [r7, #0]
   10c00:	2302      	movs	r3, #2
   10c02:	707b      	strb	r3, [r7, #1]
   10c04:	b1ca      	cbz	r2, 10c3a <disconnected+0x25e>
   10c06:	4603      	mov	r3, r0
   10c08:	2808      	cmp	r0, #8
   10c0a:	dd02      	ble.n	10c12 <disconnected+0x236>
   10c0c:	f107 0108 	add.w	r1, r7, #8
   10c10:	61a1      	str	r1, [r4, #24]
   10c12:	2b0c      	cmp	r3, #12
   10c14:	dd00      	ble.n	10c18 <disconnected+0x23c>
   10c16:	61e5      	str	r5, [r4, #28]
   10c18:	f104 0320 	add.w	r3, r4, #32
   10c1c:	2100      	movs	r1, #0
   10c1e:	e00a      	b.n	10c36 <disconnected+0x25a>
   10c20:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10c24:	e7e5      	b.n	10bf2 <disconnected+0x216>
   10c26:	f101 0528 	add.w	r5, r1, #40	; 0x28
   10c2a:	443d      	add	r5, r7
   10c2c:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   10c30:	f803 5b01 	strb.w	r5, [r3], #1
   10c34:	3101      	adds	r1, #1
   10c36:	2901      	cmp	r1, #1
   10c38:	d9f5      	bls.n	10c26 <disconnected+0x24a>
   10c3a:	2811      	cmp	r0, #17
   10c3c:	dd24      	ble.n	10c88 <disconnected+0x2ac>
   10c3e:	2312      	movs	r3, #18
   10c40:	b142      	cbz	r2, 10c54 <disconnected+0x278>
   10c42:	2104      	movs	r1, #4
   10c44:	7139      	strb	r1, [r7, #4]
   10c46:	2100      	movs	r1, #0
   10c48:	7179      	strb	r1, [r7, #5]
   10c4a:	71b9      	strb	r1, [r7, #6]
   10c4c:	2101      	movs	r1, #1
   10c4e:	71f9      	strb	r1, [r7, #7]
   10c50:	6878      	ldr	r0, [r7, #4]
   10c52:	6120      	str	r0, [r4, #16]
   10c54:	2100      	movs	r1, #0
   10c56:	f36f 0100 	bfc	r1, #0, #1
   10c5a:	f36f 0141 	bfc	r1, #1, #1
   10c5e:	f36f 0182 	bfc	r1, #2, #1
   10c62:	f36f 01c5 	bfc	r1, #3, #3
   10c66:	2003      	movs	r0, #3
   10c68:	f360 1188 	bfi	r1, r0, #6, #3
   10c6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
   10c70:	f363 2152 	bfi	r1, r3, #9, #10
   10c74:	f36f 41de 	bfc	r1, #19, #12
   10c78:	f36f 71df 	bfc	r1, #31, #1
   10c7c:	2300      	movs	r3, #0
   10c7e:	4807      	ldr	r0, [pc, #28]	; (10c9c <disconnected+0x2c0>)
   10c80:	f014 fd97 	bl	257b2 <z_impl_z_log_msg_static_create>
   10c84:	46b5      	mov	sp, r6
   10c86:	e722      	b.n	10ace <disconnected+0xf2>
   10c88:	f06f 031b 	mvn.w	r3, #27
   10c8c:	e7d8      	b.n	10c40 <disconnected+0x264>
   10c8e:	bf00      	nop
   10c90:	20005610 	.word	0x20005610
   10c94:	20005618 	.word	0x20005618
   10c98:	0002b334 	.word	0x0002b334
   10c9c:	0002b22c 	.word	0x0002b22c
   10ca0:	20005608 	.word	0x20005608
   10ca4:	0002b368 	.word	0x0002b368
   10ca8:	20005600 	.word	0x20005600
   10cac:	0002b39c 	.word	0x0002b39c
   10cb0:	2207      	movs	r2, #7
   10cb2:	49a3      	ldr	r1, [pc, #652]	; (10f40 <disconnected+0x564>)
   10cb4:	4620      	mov	r0, r4
   10cb6:	f015 f9a4 	bl	26002 <memcmp>
	} else if (bt_addr_le_eq(addr, &IRR_bt_addr)) {
   10cba:	2800      	cmp	r0, #0
   10cbc:	d165      	bne.n	10d8a <disconnected+0x3ae>
   10cbe:	4ba1      	ldr	r3, [pc, #644]	; (10f44 <disconnected+0x568>)
   10cc0:	f3bf 8f5b 	dmb	ish
   10cc4:	e853 1f00 	ldrex	r1, [r3]
   10cc8:	f021 0108 	bic.w	r1, r1, #8
   10ccc:	e843 1200 	strex	r2, r1, [r3]
   10cd0:	2a00      	cmp	r2, #0
   10cd2:	d1f7      	bne.n	10cc4 <disconnected+0x2e8>
   10cd4:	f3bf 8f5b 	dmb	ish
		LOG_INF("Internal RR disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   10cd8:	466e      	mov	r6, sp
   10cda:	2300      	movs	r3, #0
   10cdc:	713b      	strb	r3, [r7, #4]
   10cde:	2302      	movs	r3, #2
   10ce0:	717b      	strb	r3, [r7, #5]
   10ce2:	b08a      	sub	sp, #40	; 0x28
   10ce4:	466c      	mov	r4, sp
   10ce6:	f114 0210 	adds.w	r2, r4, #16
   10cea:	d017      	beq.n	10d1c <disconnected+0x340>
   10cec:	2012      	movs	r0, #18
   10cee:	b11a      	cbz	r2, 10cf8 <disconnected+0x31c>
   10cf0:	2804      	cmp	r0, #4
   10cf2:	dd01      	ble.n	10cf8 <disconnected+0x31c>
   10cf4:	4b94      	ldr	r3, [pc, #592]	; (10f48 <disconnected+0x56c>)
   10cf6:	6163      	str	r3, [r4, #20]
   10cf8:	2300      	movs	r3, #0
   10cfa:	703b      	strb	r3, [r7, #0]
   10cfc:	2302      	movs	r3, #2
   10cfe:	707b      	strb	r3, [r7, #1]
   10d00:	b1ca      	cbz	r2, 10d36 <disconnected+0x35a>
   10d02:	4603      	mov	r3, r0
   10d04:	2808      	cmp	r0, #8
   10d06:	dd02      	ble.n	10d0e <disconnected+0x332>
   10d08:	f107 0108 	add.w	r1, r7, #8
   10d0c:	61a1      	str	r1, [r4, #24]
   10d0e:	2b0c      	cmp	r3, #12
   10d10:	dd00      	ble.n	10d14 <disconnected+0x338>
   10d12:	61e5      	str	r5, [r4, #28]
   10d14:	f104 0320 	add.w	r3, r4, #32
   10d18:	2100      	movs	r1, #0
   10d1a:	e00a      	b.n	10d32 <disconnected+0x356>
   10d1c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10d20:	e7e5      	b.n	10cee <disconnected+0x312>
   10d22:	f101 0528 	add.w	r5, r1, #40	; 0x28
   10d26:	443d      	add	r5, r7
   10d28:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   10d2c:	f803 5b01 	strb.w	r5, [r3], #1
   10d30:	3101      	adds	r1, #1
   10d32:	2901      	cmp	r1, #1
   10d34:	d9f5      	bls.n	10d22 <disconnected+0x346>
   10d36:	2811      	cmp	r0, #17
   10d38:	dd24      	ble.n	10d84 <disconnected+0x3a8>
   10d3a:	2312      	movs	r3, #18
   10d3c:	b142      	cbz	r2, 10d50 <disconnected+0x374>
   10d3e:	2104      	movs	r1, #4
   10d40:	7139      	strb	r1, [r7, #4]
   10d42:	2100      	movs	r1, #0
   10d44:	7179      	strb	r1, [r7, #5]
   10d46:	71b9      	strb	r1, [r7, #6]
   10d48:	2101      	movs	r1, #1
   10d4a:	71f9      	strb	r1, [r7, #7]
   10d4c:	6878      	ldr	r0, [r7, #4]
   10d4e:	6120      	str	r0, [r4, #16]
   10d50:	2100      	movs	r1, #0
   10d52:	f36f 0100 	bfc	r1, #0, #1
   10d56:	f36f 0141 	bfc	r1, #1, #1
   10d5a:	f36f 0182 	bfc	r1, #2, #1
   10d5e:	f36f 01c5 	bfc	r1, #3, #3
   10d62:	2003      	movs	r0, #3
   10d64:	f360 1188 	bfi	r1, r0, #6, #3
   10d68:	f3c3 0309 	ubfx	r3, r3, #0, #10
   10d6c:	f363 2152 	bfi	r1, r3, #9, #10
   10d70:	f36f 41de 	bfc	r1, #19, #12
   10d74:	f36f 71df 	bfc	r1, #31, #1
   10d78:	2300      	movs	r3, #0
   10d7a:	4874      	ldr	r0, [pc, #464]	; (10f4c <disconnected+0x570>)
   10d7c:	f014 fd19 	bl	257b2 <z_impl_z_log_msg_static_create>
   10d80:	46b5      	mov	sp, r6
   10d82:	e6a4      	b.n	10ace <disconnected+0xf2>
   10d84:	f06f 031b 	mvn.w	r3, #27
   10d88:	e7d8      	b.n	10d3c <disconnected+0x360>
   10d8a:	2207      	movs	r2, #7
   10d8c:	4970      	ldr	r1, [pc, #448]	; (10f50 <disconnected+0x574>)
   10d8e:	4620      	mov	r0, r4
   10d90:	f015 f937 	bl	26002 <memcmp>
	} else if (bt_addr_le_eq(addr, &EFL_bt_addr)) {
   10d94:	2800      	cmp	r0, #0
   10d96:	d165      	bne.n	10e64 <disconnected+0x488>
   10d98:	4b6a      	ldr	r3, [pc, #424]	; (10f44 <disconnected+0x568>)
   10d9a:	f3bf 8f5b 	dmb	ish
   10d9e:	e853 1f00 	ldrex	r1, [r3]
   10da2:	f021 0110 	bic.w	r1, r1, #16
   10da6:	e843 1200 	strex	r2, r1, [r3]
   10daa:	2a00      	cmp	r2, #0
   10dac:	d1f7      	bne.n	10d9e <disconnected+0x3c2>
   10dae:	f3bf 8f5b 	dmb	ish
		LOG_INF("External FL disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   10db2:	466e      	mov	r6, sp
   10db4:	2300      	movs	r3, #0
   10db6:	713b      	strb	r3, [r7, #4]
   10db8:	2302      	movs	r3, #2
   10dba:	717b      	strb	r3, [r7, #5]
   10dbc:	b08a      	sub	sp, #40	; 0x28
   10dbe:	466c      	mov	r4, sp
   10dc0:	f114 0210 	adds.w	r2, r4, #16
   10dc4:	d017      	beq.n	10df6 <disconnected+0x41a>
   10dc6:	2012      	movs	r0, #18
   10dc8:	b11a      	cbz	r2, 10dd2 <disconnected+0x3f6>
   10dca:	2804      	cmp	r0, #4
   10dcc:	dd01      	ble.n	10dd2 <disconnected+0x3f6>
   10dce:	4b61      	ldr	r3, [pc, #388]	; (10f54 <disconnected+0x578>)
   10dd0:	6163      	str	r3, [r4, #20]
   10dd2:	2300      	movs	r3, #0
   10dd4:	703b      	strb	r3, [r7, #0]
   10dd6:	2302      	movs	r3, #2
   10dd8:	707b      	strb	r3, [r7, #1]
   10dda:	b1ca      	cbz	r2, 10e10 <disconnected+0x434>
   10ddc:	4603      	mov	r3, r0
   10dde:	2808      	cmp	r0, #8
   10de0:	dd02      	ble.n	10de8 <disconnected+0x40c>
   10de2:	f107 0108 	add.w	r1, r7, #8
   10de6:	61a1      	str	r1, [r4, #24]
   10de8:	2b0c      	cmp	r3, #12
   10dea:	dd00      	ble.n	10dee <disconnected+0x412>
   10dec:	61e5      	str	r5, [r4, #28]
   10dee:	f104 0320 	add.w	r3, r4, #32
   10df2:	2100      	movs	r1, #0
   10df4:	e00a      	b.n	10e0c <disconnected+0x430>
   10df6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10dfa:	e7e5      	b.n	10dc8 <disconnected+0x3ec>
   10dfc:	f101 0528 	add.w	r5, r1, #40	; 0x28
   10e00:	443d      	add	r5, r7
   10e02:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   10e06:	f803 5b01 	strb.w	r5, [r3], #1
   10e0a:	3101      	adds	r1, #1
   10e0c:	2901      	cmp	r1, #1
   10e0e:	d9f5      	bls.n	10dfc <disconnected+0x420>
   10e10:	2811      	cmp	r0, #17
   10e12:	dd24      	ble.n	10e5e <disconnected+0x482>
   10e14:	2312      	movs	r3, #18
   10e16:	b142      	cbz	r2, 10e2a <disconnected+0x44e>
   10e18:	2104      	movs	r1, #4
   10e1a:	7139      	strb	r1, [r7, #4]
   10e1c:	2100      	movs	r1, #0
   10e1e:	7179      	strb	r1, [r7, #5]
   10e20:	71b9      	strb	r1, [r7, #6]
   10e22:	2101      	movs	r1, #1
   10e24:	71f9      	strb	r1, [r7, #7]
   10e26:	6878      	ldr	r0, [r7, #4]
   10e28:	6120      	str	r0, [r4, #16]
   10e2a:	2100      	movs	r1, #0
   10e2c:	f36f 0100 	bfc	r1, #0, #1
   10e30:	f36f 0141 	bfc	r1, #1, #1
   10e34:	f36f 0182 	bfc	r1, #2, #1
   10e38:	f36f 01c5 	bfc	r1, #3, #3
   10e3c:	2003      	movs	r0, #3
   10e3e:	f360 1188 	bfi	r1, r0, #6, #3
   10e42:	f3c3 0309 	ubfx	r3, r3, #0, #10
   10e46:	f363 2152 	bfi	r1, r3, #9, #10
   10e4a:	f36f 41de 	bfc	r1, #19, #12
   10e4e:	f36f 71df 	bfc	r1, #31, #1
   10e52:	2300      	movs	r3, #0
   10e54:	483d      	ldr	r0, [pc, #244]	; (10f4c <disconnected+0x570>)
   10e56:	f014 fcac 	bl	257b2 <z_impl_z_log_msg_static_create>
   10e5a:	46b5      	mov	sp, r6
   10e5c:	e637      	b.n	10ace <disconnected+0xf2>
   10e5e:	f06f 031b 	mvn.w	r3, #27
   10e62:	e7d8      	b.n	10e16 <disconnected+0x43a>
   10e64:	2207      	movs	r2, #7
   10e66:	493c      	ldr	r1, [pc, #240]	; (10f58 <disconnected+0x57c>)
   10e68:	4620      	mov	r0, r4
   10e6a:	f015 f8ca 	bl	26002 <memcmp>
	} else if (bt_addr_le_eq(addr, &EFR_bt_addr)) {
   10e6e:	2800      	cmp	r0, #0
   10e70:	d176      	bne.n	10f60 <disconnected+0x584>
   10e72:	4b34      	ldr	r3, [pc, #208]	; (10f44 <disconnected+0x568>)
   10e74:	f3bf 8f5b 	dmb	ish
   10e78:	e853 1f00 	ldrex	r1, [r3]
   10e7c:	f021 0120 	bic.w	r1, r1, #32
   10e80:	e843 1200 	strex	r2, r1, [r3]
   10e84:	2a00      	cmp	r2, #0
   10e86:	d1f7      	bne.n	10e78 <disconnected+0x49c>
   10e88:	f3bf 8f5b 	dmb	ish
		LOG_INF("External FR disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   10e8c:	466e      	mov	r6, sp
   10e8e:	2300      	movs	r3, #0
   10e90:	713b      	strb	r3, [r7, #4]
   10e92:	2302      	movs	r3, #2
   10e94:	717b      	strb	r3, [r7, #5]
   10e96:	b08a      	sub	sp, #40	; 0x28
   10e98:	466c      	mov	r4, sp
   10e9a:	f114 0210 	adds.w	r2, r4, #16
   10e9e:	d017      	beq.n	10ed0 <disconnected+0x4f4>
   10ea0:	2012      	movs	r0, #18
   10ea2:	b11a      	cbz	r2, 10eac <disconnected+0x4d0>
   10ea4:	2804      	cmp	r0, #4
   10ea6:	dd01      	ble.n	10eac <disconnected+0x4d0>
   10ea8:	4b2c      	ldr	r3, [pc, #176]	; (10f5c <disconnected+0x580>)
   10eaa:	6163      	str	r3, [r4, #20]
   10eac:	2300      	movs	r3, #0
   10eae:	703b      	strb	r3, [r7, #0]
   10eb0:	2302      	movs	r3, #2
   10eb2:	707b      	strb	r3, [r7, #1]
   10eb4:	b1ca      	cbz	r2, 10eea <disconnected+0x50e>
   10eb6:	4603      	mov	r3, r0
   10eb8:	2808      	cmp	r0, #8
   10eba:	dd02      	ble.n	10ec2 <disconnected+0x4e6>
   10ebc:	f107 0108 	add.w	r1, r7, #8
   10ec0:	61a1      	str	r1, [r4, #24]
   10ec2:	2b0c      	cmp	r3, #12
   10ec4:	dd00      	ble.n	10ec8 <disconnected+0x4ec>
   10ec6:	61e5      	str	r5, [r4, #28]
   10ec8:	f104 0320 	add.w	r3, r4, #32
   10ecc:	2100      	movs	r1, #0
   10ece:	e00a      	b.n	10ee6 <disconnected+0x50a>
   10ed0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10ed4:	e7e5      	b.n	10ea2 <disconnected+0x4c6>
   10ed6:	f101 0528 	add.w	r5, r1, #40	; 0x28
   10eda:	443d      	add	r5, r7
   10edc:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   10ee0:	f803 5b01 	strb.w	r5, [r3], #1
   10ee4:	3101      	adds	r1, #1
   10ee6:	2901      	cmp	r1, #1
   10ee8:	d9f5      	bls.n	10ed6 <disconnected+0x4fa>
   10eea:	2811      	cmp	r0, #17
   10eec:	dd24      	ble.n	10f38 <disconnected+0x55c>
   10eee:	2312      	movs	r3, #18
   10ef0:	b142      	cbz	r2, 10f04 <disconnected+0x528>
   10ef2:	2104      	movs	r1, #4
   10ef4:	7139      	strb	r1, [r7, #4]
   10ef6:	2100      	movs	r1, #0
   10ef8:	7179      	strb	r1, [r7, #5]
   10efa:	71b9      	strb	r1, [r7, #6]
   10efc:	2101      	movs	r1, #1
   10efe:	71f9      	strb	r1, [r7, #7]
   10f00:	6878      	ldr	r0, [r7, #4]
   10f02:	6120      	str	r0, [r4, #16]
   10f04:	2100      	movs	r1, #0
   10f06:	f36f 0100 	bfc	r1, #0, #1
   10f0a:	f36f 0141 	bfc	r1, #1, #1
   10f0e:	f36f 0182 	bfc	r1, #2, #1
   10f12:	f36f 01c5 	bfc	r1, #3, #3
   10f16:	2003      	movs	r0, #3
   10f18:	f360 1188 	bfi	r1, r0, #6, #3
   10f1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
   10f20:	f363 2152 	bfi	r1, r3, #9, #10
   10f24:	f36f 41de 	bfc	r1, #19, #12
   10f28:	f36f 71df 	bfc	r1, #31, #1
   10f2c:	2300      	movs	r3, #0
   10f2e:	4807      	ldr	r0, [pc, #28]	; (10f4c <disconnected+0x570>)
   10f30:	f014 fc3f 	bl	257b2 <z_impl_z_log_msg_static_create>
   10f34:	46b5      	mov	sp, r6
   10f36:	e5ca      	b.n	10ace <disconnected+0xf2>
   10f38:	f06f 031b 	mvn.w	r3, #27
   10f3c:	e7d8      	b.n	10ef0 <disconnected+0x514>
   10f3e:	bf00      	nop
   10f40:	200055f8 	.word	0x200055f8
   10f44:	20005618 	.word	0x20005618
   10f48:	0002b3d0 	.word	0x0002b3d0
   10f4c:	0002b22c 	.word	0x0002b22c
   10f50:	200055f0 	.word	0x200055f0
   10f54:	0002b404 	.word	0x0002b404
   10f58:	200055e8 	.word	0x200055e8
   10f5c:	0002b438 	.word	0x0002b438
   10f60:	2207      	movs	r2, #7
   10f62:	4999      	ldr	r1, [pc, #612]	; (111c8 <disconnected+0x7ec>)
   10f64:	4620      	mov	r0, r4
   10f66:	f015 f84c 	bl	26002 <memcmp>
	} else if (bt_addr_le_eq(addr, &ERL_bt_addr)) {
   10f6a:	2800      	cmp	r0, #0
   10f6c:	d165      	bne.n	1103a <disconnected+0x65e>
   10f6e:	4b97      	ldr	r3, [pc, #604]	; (111cc <disconnected+0x7f0>)
   10f70:	f3bf 8f5b 	dmb	ish
   10f74:	e853 1f00 	ldrex	r1, [r3]
   10f78:	f021 0140 	bic.w	r1, r1, #64	; 0x40
   10f7c:	e843 1200 	strex	r2, r1, [r3]
   10f80:	2a00      	cmp	r2, #0
   10f82:	d1f7      	bne.n	10f74 <disconnected+0x598>
   10f84:	f3bf 8f5b 	dmb	ish
		LOG_INF("External RL disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   10f88:	466e      	mov	r6, sp
   10f8a:	2300      	movs	r3, #0
   10f8c:	713b      	strb	r3, [r7, #4]
   10f8e:	2302      	movs	r3, #2
   10f90:	717b      	strb	r3, [r7, #5]
   10f92:	b08a      	sub	sp, #40	; 0x28
   10f94:	466c      	mov	r4, sp
   10f96:	f114 0210 	adds.w	r2, r4, #16
   10f9a:	d017      	beq.n	10fcc <disconnected+0x5f0>
   10f9c:	2012      	movs	r0, #18
   10f9e:	b11a      	cbz	r2, 10fa8 <disconnected+0x5cc>
   10fa0:	2804      	cmp	r0, #4
   10fa2:	dd01      	ble.n	10fa8 <disconnected+0x5cc>
   10fa4:	4b8a      	ldr	r3, [pc, #552]	; (111d0 <disconnected+0x7f4>)
   10fa6:	6163      	str	r3, [r4, #20]
   10fa8:	2300      	movs	r3, #0
   10faa:	703b      	strb	r3, [r7, #0]
   10fac:	2302      	movs	r3, #2
   10fae:	707b      	strb	r3, [r7, #1]
   10fb0:	b1ca      	cbz	r2, 10fe6 <disconnected+0x60a>
   10fb2:	4603      	mov	r3, r0
   10fb4:	2808      	cmp	r0, #8
   10fb6:	dd02      	ble.n	10fbe <disconnected+0x5e2>
   10fb8:	f107 0108 	add.w	r1, r7, #8
   10fbc:	61a1      	str	r1, [r4, #24]
   10fbe:	2b0c      	cmp	r3, #12
   10fc0:	dd00      	ble.n	10fc4 <disconnected+0x5e8>
   10fc2:	61e5      	str	r5, [r4, #28]
   10fc4:	f104 0320 	add.w	r3, r4, #32
   10fc8:	2100      	movs	r1, #0
   10fca:	e00a      	b.n	10fe2 <disconnected+0x606>
   10fcc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10fd0:	e7e5      	b.n	10f9e <disconnected+0x5c2>
   10fd2:	f101 0528 	add.w	r5, r1, #40	; 0x28
   10fd6:	443d      	add	r5, r7
   10fd8:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   10fdc:	f803 5b01 	strb.w	r5, [r3], #1
   10fe0:	3101      	adds	r1, #1
   10fe2:	2901      	cmp	r1, #1
   10fe4:	d9f5      	bls.n	10fd2 <disconnected+0x5f6>
   10fe6:	2811      	cmp	r0, #17
   10fe8:	dd24      	ble.n	11034 <disconnected+0x658>
   10fea:	2312      	movs	r3, #18
   10fec:	b142      	cbz	r2, 11000 <disconnected+0x624>
   10fee:	2104      	movs	r1, #4
   10ff0:	7139      	strb	r1, [r7, #4]
   10ff2:	2100      	movs	r1, #0
   10ff4:	7179      	strb	r1, [r7, #5]
   10ff6:	71b9      	strb	r1, [r7, #6]
   10ff8:	2101      	movs	r1, #1
   10ffa:	71f9      	strb	r1, [r7, #7]
   10ffc:	6878      	ldr	r0, [r7, #4]
   10ffe:	6120      	str	r0, [r4, #16]
   11000:	2100      	movs	r1, #0
   11002:	f36f 0100 	bfc	r1, #0, #1
   11006:	f36f 0141 	bfc	r1, #1, #1
   1100a:	f36f 0182 	bfc	r1, #2, #1
   1100e:	f36f 01c5 	bfc	r1, #3, #3
   11012:	2003      	movs	r0, #3
   11014:	f360 1188 	bfi	r1, r0, #6, #3
   11018:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1101c:	f363 2152 	bfi	r1, r3, #9, #10
   11020:	f36f 41de 	bfc	r1, #19, #12
   11024:	f36f 71df 	bfc	r1, #31, #1
   11028:	2300      	movs	r3, #0
   1102a:	486a      	ldr	r0, [pc, #424]	; (111d4 <disconnected+0x7f8>)
   1102c:	f014 fbc1 	bl	257b2 <z_impl_z_log_msg_static_create>
   11030:	46b5      	mov	sp, r6
   11032:	e54c      	b.n	10ace <disconnected+0xf2>
   11034:	f06f 031b 	mvn.w	r3, #27
   11038:	e7d8      	b.n	10fec <disconnected+0x610>
   1103a:	2207      	movs	r2, #7
   1103c:	4966      	ldr	r1, [pc, #408]	; (111d8 <disconnected+0x7fc>)
   1103e:	4620      	mov	r0, r4
   11040:	f014 ffdf 	bl	26002 <memcmp>
	} else if (bt_addr_le_eq(addr, &ERR_bt_addr)) {
   11044:	b310      	cbz	r0, 1108c <disconnected+0x6b0>
		LOG_WRN("UNKNOWN SENSOR DISCONNECTED, addr: %s (reason 0x%02x)", addr_str, reason);
   11046:	466c      	mov	r4, sp
   11048:	2300      	movs	r3, #0
   1104a:	713b      	strb	r3, [r7, #4]
   1104c:	2302      	movs	r3, #2
   1104e:	717b      	strb	r3, [r7, #5]
   11050:	b08a      	sub	sp, #40	; 0x28
   11052:	466e      	mov	r6, sp
   11054:	f116 0210 	adds.w	r2, r6, #16
   11058:	d07e      	beq.n	11158 <disconnected+0x77c>
   1105a:	2012      	movs	r0, #18
   1105c:	b11a      	cbz	r2, 11066 <disconnected+0x68a>
   1105e:	2804      	cmp	r0, #4
   11060:	dd01      	ble.n	11066 <disconnected+0x68a>
   11062:	4b5e      	ldr	r3, [pc, #376]	; (111dc <disconnected+0x800>)
   11064:	6173      	str	r3, [r6, #20]
   11066:	2300      	movs	r3, #0
   11068:	703b      	strb	r3, [r7, #0]
   1106a:	2302      	movs	r3, #2
   1106c:	707b      	strb	r3, [r7, #1]
   1106e:	2a00      	cmp	r2, #0
   11070:	d07f      	beq.n	11172 <disconnected+0x796>
   11072:	4603      	mov	r3, r0
   11074:	2808      	cmp	r0, #8
   11076:	dd02      	ble.n	1107e <disconnected+0x6a2>
   11078:	f107 0108 	add.w	r1, r7, #8
   1107c:	61b1      	str	r1, [r6, #24]
   1107e:	2b0c      	cmp	r3, #12
   11080:	dd00      	ble.n	11084 <disconnected+0x6a8>
   11082:	61f5      	str	r5, [r6, #28]
   11084:	f106 0320 	add.w	r3, r6, #32
   11088:	2100      	movs	r1, #0
   1108a:	e070      	b.n	1116e <disconnected+0x792>
   1108c:	4b4f      	ldr	r3, [pc, #316]	; (111cc <disconnected+0x7f0>)
   1108e:	f3bf 8f5b 	dmb	ish
   11092:	e853 1f00 	ldrex	r1, [r3]
   11096:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   1109a:	e843 1200 	strex	r2, r1, [r3]
   1109e:	2a00      	cmp	r2, #0
   110a0:	d1f7      	bne.n	11092 <disconnected+0x6b6>
   110a2:	f3bf 8f5b 	dmb	ish
		LOG_INF("External RR disconnected, addr: %s (reason 0x%02x)", addr_str, reason);
   110a6:	466e      	mov	r6, sp
   110a8:	2300      	movs	r3, #0
   110aa:	713b      	strb	r3, [r7, #4]
   110ac:	2302      	movs	r3, #2
   110ae:	717b      	strb	r3, [r7, #5]
   110b0:	b08a      	sub	sp, #40	; 0x28
   110b2:	466c      	mov	r4, sp
   110b4:	f114 0210 	adds.w	r2, r4, #16
   110b8:	d017      	beq.n	110ea <disconnected+0x70e>
   110ba:	2012      	movs	r0, #18
   110bc:	b11a      	cbz	r2, 110c6 <disconnected+0x6ea>
   110be:	2804      	cmp	r0, #4
   110c0:	dd01      	ble.n	110c6 <disconnected+0x6ea>
   110c2:	4b47      	ldr	r3, [pc, #284]	; (111e0 <disconnected+0x804>)
   110c4:	6163      	str	r3, [r4, #20]
   110c6:	2300      	movs	r3, #0
   110c8:	703b      	strb	r3, [r7, #0]
   110ca:	2302      	movs	r3, #2
   110cc:	707b      	strb	r3, [r7, #1]
   110ce:	b1ca      	cbz	r2, 11104 <disconnected+0x728>
   110d0:	4603      	mov	r3, r0
   110d2:	2808      	cmp	r0, #8
   110d4:	dd02      	ble.n	110dc <disconnected+0x700>
   110d6:	f107 0108 	add.w	r1, r7, #8
   110da:	61a1      	str	r1, [r4, #24]
   110dc:	2b0c      	cmp	r3, #12
   110de:	dd00      	ble.n	110e2 <disconnected+0x706>
   110e0:	61e5      	str	r5, [r4, #28]
   110e2:	f104 0320 	add.w	r3, r4, #32
   110e6:	2100      	movs	r1, #0
   110e8:	e00a      	b.n	11100 <disconnected+0x724>
   110ea:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   110ee:	e7e5      	b.n	110bc <disconnected+0x6e0>
   110f0:	f101 0528 	add.w	r5, r1, #40	; 0x28
   110f4:	443d      	add	r5, r7
   110f6:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   110fa:	f803 5b01 	strb.w	r5, [r3], #1
   110fe:	3101      	adds	r1, #1
   11100:	2901      	cmp	r1, #1
   11102:	d9f5      	bls.n	110f0 <disconnected+0x714>
   11104:	2811      	cmp	r0, #17
   11106:	dd24      	ble.n	11152 <disconnected+0x776>
   11108:	2312      	movs	r3, #18
   1110a:	b142      	cbz	r2, 1111e <disconnected+0x742>
   1110c:	2104      	movs	r1, #4
   1110e:	7139      	strb	r1, [r7, #4]
   11110:	2100      	movs	r1, #0
   11112:	7179      	strb	r1, [r7, #5]
   11114:	71b9      	strb	r1, [r7, #6]
   11116:	2101      	movs	r1, #1
   11118:	71f9      	strb	r1, [r7, #7]
   1111a:	6878      	ldr	r0, [r7, #4]
   1111c:	6120      	str	r0, [r4, #16]
   1111e:	2100      	movs	r1, #0
   11120:	f36f 0100 	bfc	r1, #0, #1
   11124:	f36f 0141 	bfc	r1, #1, #1
   11128:	f36f 0182 	bfc	r1, #2, #1
   1112c:	f36f 01c5 	bfc	r1, #3, #3
   11130:	2003      	movs	r0, #3
   11132:	f360 1188 	bfi	r1, r0, #6, #3
   11136:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1113a:	f363 2152 	bfi	r1, r3, #9, #10
   1113e:	f36f 41de 	bfc	r1, #19, #12
   11142:	f36f 71df 	bfc	r1, #31, #1
   11146:	2300      	movs	r3, #0
   11148:	4822      	ldr	r0, [pc, #136]	; (111d4 <disconnected+0x7f8>)
   1114a:	f014 fb32 	bl	257b2 <z_impl_z_log_msg_static_create>
   1114e:	46b5      	mov	sp, r6
   11150:	e4bd      	b.n	10ace <disconnected+0xf2>
   11152:	f06f 031b 	mvn.w	r3, #27
   11156:	e7d8      	b.n	1110a <disconnected+0x72e>
		LOG_WRN("UNKNOWN SENSOR DISCONNECTED, addr: %s (reason 0x%02x)", addr_str, reason);
   11158:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1115c:	e77e      	b.n	1105c <disconnected+0x680>
   1115e:	f101 0528 	add.w	r5, r1, #40	; 0x28
   11162:	443d      	add	r5, r7
   11164:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   11168:	f803 5b01 	strb.w	r5, [r3], #1
   1116c:	3101      	adds	r1, #1
   1116e:	2901      	cmp	r1, #1
   11170:	d9f5      	bls.n	1115e <disconnected+0x782>
   11172:	2811      	cmp	r0, #17
   11174:	dd24      	ble.n	111c0 <disconnected+0x7e4>
   11176:	2312      	movs	r3, #18
   11178:	b142      	cbz	r2, 1118c <disconnected+0x7b0>
   1117a:	2104      	movs	r1, #4
   1117c:	7139      	strb	r1, [r7, #4]
   1117e:	2100      	movs	r1, #0
   11180:	7179      	strb	r1, [r7, #5]
   11182:	71b9      	strb	r1, [r7, #6]
   11184:	2101      	movs	r1, #1
   11186:	71f9      	strb	r1, [r7, #7]
   11188:	6878      	ldr	r0, [r7, #4]
   1118a:	6130      	str	r0, [r6, #16]
   1118c:	2100      	movs	r1, #0
   1118e:	f36f 0100 	bfc	r1, #0, #1
   11192:	f36f 0141 	bfc	r1, #1, #1
   11196:	f36f 0182 	bfc	r1, #2, #1
   1119a:	f36f 01c5 	bfc	r1, #3, #3
   1119e:	2002      	movs	r0, #2
   111a0:	f360 1188 	bfi	r1, r0, #6, #3
   111a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
   111a8:	f363 2152 	bfi	r1, r3, #9, #10
   111ac:	f36f 41de 	bfc	r1, #19, #12
   111b0:	f36f 71df 	bfc	r1, #31, #1
   111b4:	2300      	movs	r3, #0
   111b6:	4807      	ldr	r0, [pc, #28]	; (111d4 <disconnected+0x7f8>)
   111b8:	f014 fafb 	bl	257b2 <z_impl_z_log_msg_static_create>
   111bc:	46a5      	mov	sp, r4
}
   111be:	e486      	b.n	10ace <disconnected+0xf2>
		LOG_WRN("UNKNOWN SENSOR DISCONNECTED, addr: %s (reason 0x%02x)", addr_str, reason);
   111c0:	f06f 031b 	mvn.w	r3, #27
   111c4:	e7d8      	b.n	11178 <disconnected+0x79c>
   111c6:	bf00      	nop
   111c8:	200055e0 	.word	0x200055e0
   111cc:	20005618 	.word	0x20005618
   111d0:	0002b46c 	.word	0x0002b46c
   111d4:	0002b22c 	.word	0x0002b22c
   111d8:	200055d8 	.word	0x200055d8
   111dc:	0002b4d4 	.word	0x0002b4d4
   111e0:	0002b4a0 	.word	0x0002b4a0

000111e4 <connected>:
{
   111e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   111e6:	b08f      	sub	sp, #60	; 0x3c
   111e8:	af00      	add	r7, sp, #0
   111ea:	460c      	mov	r4, r1
	bt_addr_le_t *addr = bt_conn_get_dst(conn);
   111ec:	f015 fbde 	bl	269ac <bt_conn_get_dst>
   111f0:	4605      	mov	r5, r0
	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
   111f2:	221e      	movs	r2, #30
   111f4:	f107 0108 	add.w	r1, r7, #8
   111f8:	f7ff fba8 	bl	1094c <bt_addr_le_to_str>
	if (err) {
   111fc:	2c00      	cmp	r4, #0
   111fe:	f000 80a4 	beq.w	1134a <connected+0x166>
		LOG_WRN("Failed to connect to %s (%u)\n", addr_str, err);
   11202:	466d      	mov	r5, sp
   11204:	2300      	movs	r3, #0
   11206:	713b      	strb	r3, [r7, #4]
   11208:	2302      	movs	r3, #2
   1120a:	717b      	strb	r3, [r7, #5]
   1120c:	b08a      	sub	sp, #40	; 0x28
   1120e:	46ec      	mov	ip, sp
   11210:	f11c 0210 	adds.w	r2, ip, #16
   11214:	d01a      	beq.n	1124c <connected+0x68>
   11216:	2012      	movs	r0, #18
   11218:	b122      	cbz	r2, 11224 <connected+0x40>
   1121a:	2804      	cmp	r0, #4
   1121c:	dd02      	ble.n	11224 <connected+0x40>
   1121e:	4bb4      	ldr	r3, [pc, #720]	; (114f0 <connected+0x30c>)
   11220:	f8cc 3014 	str.w	r3, [ip, #20]
   11224:	2300      	movs	r3, #0
   11226:	703b      	strb	r3, [r7, #0]
   11228:	2302      	movs	r3, #2
   1122a:	707b      	strb	r3, [r7, #1]
   1122c:	b1da      	cbz	r2, 11266 <connected+0x82>
   1122e:	4603      	mov	r3, r0
   11230:	2808      	cmp	r0, #8
   11232:	dd03      	ble.n	1123c <connected+0x58>
   11234:	f107 0108 	add.w	r1, r7, #8
   11238:	f8cc 1018 	str.w	r1, [ip, #24]
   1123c:	2b0c      	cmp	r3, #12
   1123e:	dd01      	ble.n	11244 <connected+0x60>
   11240:	f8cc 401c 	str.w	r4, [ip, #28]
   11244:	f10c 0320 	add.w	r3, ip, #32
   11248:	2100      	movs	r1, #0
   1124a:	e00a      	b.n	11262 <connected+0x7e>
   1124c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11250:	e7e2      	b.n	11218 <connected+0x34>
   11252:	f101 0438 	add.w	r4, r1, #56	; 0x38
   11256:	443c      	add	r4, r7
   11258:	f814 4c38 	ldrb.w	r4, [r4, #-56]
   1125c:	f803 4b01 	strb.w	r4, [r3], #1
   11260:	3101      	adds	r1, #1
   11262:	2901      	cmp	r1, #1
   11264:	d9f5      	bls.n	11252 <connected+0x6e>
   11266:	2811      	cmp	r0, #17
   11268:	dd6c      	ble.n	11344 <connected+0x160>
   1126a:	2312      	movs	r3, #18
   1126c:	b14a      	cbz	r2, 11282 <connected+0x9e>
   1126e:	2104      	movs	r1, #4
   11270:	7139      	strb	r1, [r7, #4]
   11272:	2100      	movs	r1, #0
   11274:	7179      	strb	r1, [r7, #5]
   11276:	71b9      	strb	r1, [r7, #6]
   11278:	2101      	movs	r1, #1
   1127a:	71f9      	strb	r1, [r7, #7]
   1127c:	6878      	ldr	r0, [r7, #4]
   1127e:	f8cc 0010 	str.w	r0, [ip, #16]
   11282:	2100      	movs	r1, #0
   11284:	f36f 0100 	bfc	r1, #0, #1
   11288:	f36f 0141 	bfc	r1, #1, #1
   1128c:	f36f 0182 	bfc	r1, #2, #1
   11290:	f36f 01c5 	bfc	r1, #3, #3
   11294:	2002      	movs	r0, #2
   11296:	f360 1188 	bfi	r1, r0, #6, #3
   1129a:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1129e:	f363 2152 	bfi	r1, r3, #9, #10
   112a2:	f36f 41de 	bfc	r1, #19, #12
   112a6:	f36f 71df 	bfc	r1, #31, #1
   112aa:	2300      	movs	r3, #0
   112ac:	4891      	ldr	r0, [pc, #580]	; (114f4 <connected+0x310>)
   112ae:	f014 fa80 	bl	257b2 <z_impl_z_log_msg_static_create>
   112b2:	46ad      	mov	sp, r5
	err = bt_conn_le_create_auto(BT_CONN_LE_CREATE_CONN, &conn_param);
   112b4:	4b90      	ldr	r3, [pc, #576]	; (114f8 <connected+0x314>)
   112b6:	f107 0c28 	add.w	ip, r7, #40	; 0x28
   112ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   112bc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   112c0:	498e      	ldr	r1, [pc, #568]	; (114fc <connected+0x318>)
   112c2:	4660      	mov	r0, ip
   112c4:	f009 f90c 	bl	1a4e0 <bt_conn_le_create_auto>
	if (err) {
   112c8:	f010 0fff 	tst.w	r0, #255	; 0xff
   112cc:	d037      	beq.n	1133e <connected+0x15a>
		LOG_ERR("Failed to start automatically connecting (err %d)", err);
   112ce:	b2c0      	uxtb	r0, r0
   112d0:	466d      	mov	r5, sp
   112d2:	b088      	sub	sp, #32
   112d4:	466b      	mov	r3, sp
   112d6:	f113 0210 	adds.w	r2, r3, #16
   112da:	f000 83fd 	beq.w	11ad8 <connected+0x8f4>
   112de:	210c      	movs	r1, #12
   112e0:	b13a      	cbz	r2, 112f2 <connected+0x10e>
   112e2:	460c      	mov	r4, r1
   112e4:	2904      	cmp	r1, #4
   112e6:	dd01      	ble.n	112ec <connected+0x108>
   112e8:	4e85      	ldr	r6, [pc, #532]	; (11500 <connected+0x31c>)
   112ea:	615e      	str	r6, [r3, #20]
   112ec:	2c08      	cmp	r4, #8
   112ee:	dd00      	ble.n	112f2 <connected+0x10e>
   112f0:	6198      	str	r0, [r3, #24]
   112f2:	290b      	cmp	r1, #11
   112f4:	f340 83f3 	ble.w	11ade <connected+0x8fa>
   112f8:	240c      	movs	r4, #12
   112fa:	b13a      	cbz	r2, 1130c <connected+0x128>
   112fc:	2103      	movs	r1, #3
   112fe:	7139      	strb	r1, [r7, #4]
   11300:	2100      	movs	r1, #0
   11302:	7179      	strb	r1, [r7, #5]
   11304:	71b9      	strb	r1, [r7, #6]
   11306:	71f9      	strb	r1, [r7, #7]
   11308:	6878      	ldr	r0, [r7, #4]
   1130a:	6118      	str	r0, [r3, #16]
   1130c:	2100      	movs	r1, #0
   1130e:	f36f 0100 	bfc	r1, #0, #1
   11312:	f36f 0141 	bfc	r1, #1, #1
   11316:	f36f 0182 	bfc	r1, #2, #1
   1131a:	f36f 01c5 	bfc	r1, #3, #3
   1131e:	2301      	movs	r3, #1
   11320:	f363 1188 	bfi	r1, r3, #6, #3
   11324:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   11328:	f363 2152 	bfi	r1, r3, #9, #10
   1132c:	f36f 41de 	bfc	r1, #19, #12
   11330:	f36f 71df 	bfc	r1, #31, #1
   11334:	2300      	movs	r3, #0
   11336:	486f      	ldr	r0, [pc, #444]	; (114f4 <connected+0x310>)
   11338:	f014 fa3b 	bl	257b2 <z_impl_z_log_msg_static_create>
   1133c:	46ad      	mov	sp, r5
}
   1133e:	373c      	adds	r7, #60	; 0x3c
   11340:	46bd      	mov	sp, r7
   11342:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_WRN("Failed to connect to %s (%u)\n", addr_str, err);
   11344:	f06f 031b 	mvn.w	r3, #27
   11348:	e790      	b.n	1126c <connected+0x88>
   1134a:	2207      	movs	r2, #7
   1134c:	496d      	ldr	r1, [pc, #436]	; (11504 <connected+0x320>)
   1134e:	4628      	mov	r0, r5
   11350:	f014 fe57 	bl	26002 <memcmp>
		if (bt_addr_le_eq(addr, &IFL_bt_addr)) {
   11354:	2800      	cmp	r0, #0
   11356:	d162      	bne.n	1141e <connected+0x23a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11358:	4b6b      	ldr	r3, [pc, #428]	; (11508 <connected+0x324>)
   1135a:	f3bf 8f5b 	dmb	ish
   1135e:	e853 1f00 	ldrex	r1, [r3]
   11362:	f041 0101 	orr.w	r1, r1, #1
   11366:	e843 1200 	strex	r2, r1, [r3]
   1136a:	2a00      	cmp	r2, #0
   1136c:	d1f7      	bne.n	1135e <connected+0x17a>
   1136e:	f3bf 8f5b 	dmb	ish
			LOG_INF("Internal FL connected, addr: %s\n", addr_str);
   11372:	466d      	mov	r5, sp
   11374:	2300      	movs	r3, #0
   11376:	713b      	strb	r3, [r7, #4]
   11378:	2302      	movs	r3, #2
   1137a:	717b      	strb	r3, [r7, #5]
   1137c:	b088      	sub	sp, #32
   1137e:	466c      	mov	r4, sp
   11380:	f114 0210 	adds.w	r2, r4, #16
   11384:	d013      	beq.n	113ae <connected+0x1ca>
   11386:	200e      	movs	r0, #14
   11388:	b11a      	cbz	r2, 11392 <connected+0x1ae>
   1138a:	2804      	cmp	r0, #4
   1138c:	dd01      	ble.n	11392 <connected+0x1ae>
   1138e:	4b5f      	ldr	r3, [pc, #380]	; (1150c <connected+0x328>)
   11390:	6163      	str	r3, [r4, #20]
   11392:	2300      	movs	r3, #0
   11394:	703b      	strb	r3, [r7, #0]
   11396:	2302      	movs	r3, #2
   11398:	707b      	strb	r3, [r7, #1]
   1139a:	b1b2      	cbz	r2, 113ca <connected+0x1e6>
   1139c:	2808      	cmp	r0, #8
   1139e:	dd02      	ble.n	113a6 <connected+0x1c2>
   113a0:	f107 0308 	add.w	r3, r7, #8
   113a4:	61a3      	str	r3, [r4, #24]
   113a6:	f104 031c 	add.w	r3, r4, #28
   113aa:	2100      	movs	r1, #0
   113ac:	e00b      	b.n	113c6 <connected+0x1e2>
   113ae:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   113b2:	e7e9      	b.n	11388 <connected+0x1a4>
   113b4:	f101 0638 	add.w	r6, r1, #56	; 0x38
   113b8:	eb06 0c07 	add.w	ip, r6, r7
   113bc:	f81c cc38 	ldrb.w	ip, [ip, #-56]
   113c0:	f803 cb01 	strb.w	ip, [r3], #1
   113c4:	3101      	adds	r1, #1
   113c6:	2901      	cmp	r1, #1
   113c8:	d9f4      	bls.n	113b4 <connected+0x1d0>
   113ca:	280d      	cmp	r0, #13
   113cc:	dd24      	ble.n	11418 <connected+0x234>
   113ce:	230e      	movs	r3, #14
   113d0:	b142      	cbz	r2, 113e4 <connected+0x200>
   113d2:	2103      	movs	r1, #3
   113d4:	7139      	strb	r1, [r7, #4]
   113d6:	2100      	movs	r1, #0
   113d8:	7179      	strb	r1, [r7, #5]
   113da:	71b9      	strb	r1, [r7, #6]
   113dc:	2101      	movs	r1, #1
   113de:	71f9      	strb	r1, [r7, #7]
   113e0:	6878      	ldr	r0, [r7, #4]
   113e2:	6120      	str	r0, [r4, #16]
   113e4:	2100      	movs	r1, #0
   113e6:	f36f 0100 	bfc	r1, #0, #1
   113ea:	f36f 0141 	bfc	r1, #1, #1
   113ee:	f36f 0182 	bfc	r1, #2, #1
   113f2:	f36f 01c5 	bfc	r1, #3, #3
   113f6:	2003      	movs	r0, #3
   113f8:	f360 1188 	bfi	r1, r0, #6, #3
   113fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
   11400:	f363 2152 	bfi	r1, r3, #9, #10
   11404:	f36f 41de 	bfc	r1, #19, #12
   11408:	f36f 71df 	bfc	r1, #31, #1
   1140c:	2300      	movs	r3, #0
   1140e:	4839      	ldr	r0, [pc, #228]	; (114f4 <connected+0x310>)
   11410:	f014 f9cf 	bl	257b2 <z_impl_z_log_msg_static_create>
   11414:	46ad      	mov	sp, r5
   11416:	e74d      	b.n	112b4 <connected+0xd0>
   11418:	f06f 031b 	mvn.w	r3, #27
   1141c:	e7d8      	b.n	113d0 <connected+0x1ec>
   1141e:	2207      	movs	r2, #7
   11420:	493b      	ldr	r1, [pc, #236]	; (11510 <connected+0x32c>)
   11422:	4628      	mov	r0, r5
   11424:	f014 fded 	bl	26002 <memcmp>
		} else if (bt_addr_le_eq(addr, &IFR_bt_addr)) {
   11428:	2800      	cmp	r0, #0
   1142a:	d175      	bne.n	11518 <connected+0x334>
   1142c:	4b36      	ldr	r3, [pc, #216]	; (11508 <connected+0x324>)
   1142e:	f3bf 8f5b 	dmb	ish
   11432:	e853 1f00 	ldrex	r1, [r3]
   11436:	f041 0102 	orr.w	r1, r1, #2
   1143a:	e843 1200 	strex	r2, r1, [r3]
   1143e:	2a00      	cmp	r2, #0
   11440:	d1f7      	bne.n	11432 <connected+0x24e>
   11442:	f3bf 8f5b 	dmb	ish
			LOG_INF("Internal FR connected, addr: %s\n", addr_str);
   11446:	466d      	mov	r5, sp
   11448:	2300      	movs	r3, #0
   1144a:	713b      	strb	r3, [r7, #4]
   1144c:	2302      	movs	r3, #2
   1144e:	717b      	strb	r3, [r7, #5]
   11450:	b088      	sub	sp, #32
   11452:	466c      	mov	r4, sp
   11454:	f114 0210 	adds.w	r2, r4, #16
   11458:	d013      	beq.n	11482 <connected+0x29e>
   1145a:	200e      	movs	r0, #14
   1145c:	b11a      	cbz	r2, 11466 <connected+0x282>
   1145e:	2804      	cmp	r0, #4
   11460:	dd01      	ble.n	11466 <connected+0x282>
   11462:	4b2c      	ldr	r3, [pc, #176]	; (11514 <connected+0x330>)
   11464:	6163      	str	r3, [r4, #20]
   11466:	2300      	movs	r3, #0
   11468:	703b      	strb	r3, [r7, #0]
   1146a:	2302      	movs	r3, #2
   1146c:	707b      	strb	r3, [r7, #1]
   1146e:	b1aa      	cbz	r2, 1149c <connected+0x2b8>
   11470:	2808      	cmp	r0, #8
   11472:	dd02      	ble.n	1147a <connected+0x296>
   11474:	f107 0308 	add.w	r3, r7, #8
   11478:	61a3      	str	r3, [r4, #24]
   1147a:	f104 031c 	add.w	r3, r4, #28
   1147e:	2100      	movs	r1, #0
   11480:	e00a      	b.n	11498 <connected+0x2b4>
   11482:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11486:	e7e9      	b.n	1145c <connected+0x278>
   11488:	f101 0638 	add.w	r6, r1, #56	; 0x38
   1148c:	443e      	add	r6, r7
   1148e:	f816 6c38 	ldrb.w	r6, [r6, #-56]
   11492:	f803 6b01 	strb.w	r6, [r3], #1
   11496:	3101      	adds	r1, #1
   11498:	2901      	cmp	r1, #1
   1149a:	d9f5      	bls.n	11488 <connected+0x2a4>
   1149c:	280d      	cmp	r0, #13
   1149e:	dd24      	ble.n	114ea <connected+0x306>
   114a0:	230e      	movs	r3, #14
   114a2:	b142      	cbz	r2, 114b6 <connected+0x2d2>
   114a4:	2103      	movs	r1, #3
   114a6:	7139      	strb	r1, [r7, #4]
   114a8:	2100      	movs	r1, #0
   114aa:	7179      	strb	r1, [r7, #5]
   114ac:	71b9      	strb	r1, [r7, #6]
   114ae:	2101      	movs	r1, #1
   114b0:	71f9      	strb	r1, [r7, #7]
   114b2:	6878      	ldr	r0, [r7, #4]
   114b4:	6120      	str	r0, [r4, #16]
   114b6:	2100      	movs	r1, #0
   114b8:	f36f 0100 	bfc	r1, #0, #1
   114bc:	f36f 0141 	bfc	r1, #1, #1
   114c0:	f36f 0182 	bfc	r1, #2, #1
   114c4:	f36f 01c5 	bfc	r1, #3, #3
   114c8:	2003      	movs	r0, #3
   114ca:	f360 1188 	bfi	r1, r0, #6, #3
   114ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
   114d2:	f363 2152 	bfi	r1, r3, #9, #10
   114d6:	f36f 41de 	bfc	r1, #19, #12
   114da:	f36f 71df 	bfc	r1, #31, #1
   114de:	2300      	movs	r3, #0
   114e0:	4804      	ldr	r0, [pc, #16]	; (114f4 <connected+0x310>)
   114e2:	f014 f966 	bl	257b2 <z_impl_z_log_msg_static_create>
   114e6:	46ad      	mov	sp, r5
   114e8:	e6e4      	b.n	112b4 <connected+0xd0>
   114ea:	f06f 031b 	mvn.w	r3, #27
   114ee:	e7d8      	b.n	114a2 <connected+0x2be>
   114f0:	0002b50c 	.word	0x0002b50c
   114f4:	0002b22c 	.word	0x0002b22c
   114f8:	0002b290 	.word	0x0002b290
   114fc:	20000648 	.word	0x20000648
   11500:	0002b670 	.word	0x0002b670
   11504:	20005610 	.word	0x20005610
   11508:	20005618 	.word	0x20005618
   1150c:	0002b52c 	.word	0x0002b52c
   11510:	20005608 	.word	0x20005608
   11514:	0002b550 	.word	0x0002b550
   11518:	2207      	movs	r2, #7
   1151a:	49b7      	ldr	r1, [pc, #732]	; (117f8 <connected+0x614>)
   1151c:	4628      	mov	r0, r5
   1151e:	f014 fd70 	bl	26002 <memcmp>
		} else if (bt_addr_le_eq(addr, &IRL_bt_addr)) {
   11522:	2800      	cmp	r0, #0
   11524:	d161      	bne.n	115ea <connected+0x406>
   11526:	4bb5      	ldr	r3, [pc, #724]	; (117fc <connected+0x618>)
   11528:	f3bf 8f5b 	dmb	ish
   1152c:	e853 1f00 	ldrex	r1, [r3]
   11530:	f041 0104 	orr.w	r1, r1, #4
   11534:	e843 1200 	strex	r2, r1, [r3]
   11538:	2a00      	cmp	r2, #0
   1153a:	d1f7      	bne.n	1152c <connected+0x348>
   1153c:	f3bf 8f5b 	dmb	ish
			LOG_INF("Internal RL connected, addr: %s\n", addr_str);
   11540:	466d      	mov	r5, sp
   11542:	2300      	movs	r3, #0
   11544:	713b      	strb	r3, [r7, #4]
   11546:	2302      	movs	r3, #2
   11548:	717b      	strb	r3, [r7, #5]
   1154a:	b088      	sub	sp, #32
   1154c:	466c      	mov	r4, sp
   1154e:	f114 0210 	adds.w	r2, r4, #16
   11552:	d013      	beq.n	1157c <connected+0x398>
   11554:	200e      	movs	r0, #14
   11556:	b11a      	cbz	r2, 11560 <connected+0x37c>
   11558:	2804      	cmp	r0, #4
   1155a:	dd01      	ble.n	11560 <connected+0x37c>
   1155c:	4ba8      	ldr	r3, [pc, #672]	; (11800 <connected+0x61c>)
   1155e:	6163      	str	r3, [r4, #20]
   11560:	2300      	movs	r3, #0
   11562:	703b      	strb	r3, [r7, #0]
   11564:	2302      	movs	r3, #2
   11566:	707b      	strb	r3, [r7, #1]
   11568:	b1aa      	cbz	r2, 11596 <connected+0x3b2>
   1156a:	2808      	cmp	r0, #8
   1156c:	dd02      	ble.n	11574 <connected+0x390>
   1156e:	f107 0308 	add.w	r3, r7, #8
   11572:	61a3      	str	r3, [r4, #24]
   11574:	f104 031c 	add.w	r3, r4, #28
   11578:	2100      	movs	r1, #0
   1157a:	e00a      	b.n	11592 <connected+0x3ae>
   1157c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11580:	e7e9      	b.n	11556 <connected+0x372>
   11582:	f101 0638 	add.w	r6, r1, #56	; 0x38
   11586:	443e      	add	r6, r7
   11588:	f816 6c38 	ldrb.w	r6, [r6, #-56]
   1158c:	f803 6b01 	strb.w	r6, [r3], #1
   11590:	3101      	adds	r1, #1
   11592:	2901      	cmp	r1, #1
   11594:	d9f5      	bls.n	11582 <connected+0x39e>
   11596:	280d      	cmp	r0, #13
   11598:	dd24      	ble.n	115e4 <connected+0x400>
   1159a:	230e      	movs	r3, #14
   1159c:	b142      	cbz	r2, 115b0 <connected+0x3cc>
   1159e:	2103      	movs	r1, #3
   115a0:	7139      	strb	r1, [r7, #4]
   115a2:	2100      	movs	r1, #0
   115a4:	7179      	strb	r1, [r7, #5]
   115a6:	71b9      	strb	r1, [r7, #6]
   115a8:	2101      	movs	r1, #1
   115aa:	71f9      	strb	r1, [r7, #7]
   115ac:	6878      	ldr	r0, [r7, #4]
   115ae:	6120      	str	r0, [r4, #16]
   115b0:	2100      	movs	r1, #0
   115b2:	f36f 0100 	bfc	r1, #0, #1
   115b6:	f36f 0141 	bfc	r1, #1, #1
   115ba:	f36f 0182 	bfc	r1, #2, #1
   115be:	f36f 01c5 	bfc	r1, #3, #3
   115c2:	2003      	movs	r0, #3
   115c4:	f360 1188 	bfi	r1, r0, #6, #3
   115c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
   115cc:	f363 2152 	bfi	r1, r3, #9, #10
   115d0:	f36f 41de 	bfc	r1, #19, #12
   115d4:	f36f 71df 	bfc	r1, #31, #1
   115d8:	2300      	movs	r3, #0
   115da:	488a      	ldr	r0, [pc, #552]	; (11804 <connected+0x620>)
   115dc:	f014 f8e9 	bl	257b2 <z_impl_z_log_msg_static_create>
   115e0:	46ad      	mov	sp, r5
   115e2:	e667      	b.n	112b4 <connected+0xd0>
   115e4:	f06f 031b 	mvn.w	r3, #27
   115e8:	e7d8      	b.n	1159c <connected+0x3b8>
   115ea:	2207      	movs	r2, #7
   115ec:	4986      	ldr	r1, [pc, #536]	; (11808 <connected+0x624>)
   115ee:	4628      	mov	r0, r5
   115f0:	f014 fd07 	bl	26002 <memcmp>
		} else if (bt_addr_le_eq(addr, &IRR_bt_addr)) {
   115f4:	2800      	cmp	r0, #0
   115f6:	d161      	bne.n	116bc <connected+0x4d8>
   115f8:	4b80      	ldr	r3, [pc, #512]	; (117fc <connected+0x618>)
   115fa:	f3bf 8f5b 	dmb	ish
   115fe:	e853 1f00 	ldrex	r1, [r3]
   11602:	f041 0108 	orr.w	r1, r1, #8
   11606:	e843 1200 	strex	r2, r1, [r3]
   1160a:	2a00      	cmp	r2, #0
   1160c:	d1f7      	bne.n	115fe <connected+0x41a>
   1160e:	f3bf 8f5b 	dmb	ish
			LOG_INF("Internal RR connected, addr: %s\n", addr_str);
   11612:	466d      	mov	r5, sp
   11614:	2300      	movs	r3, #0
   11616:	713b      	strb	r3, [r7, #4]
   11618:	2302      	movs	r3, #2
   1161a:	717b      	strb	r3, [r7, #5]
   1161c:	b088      	sub	sp, #32
   1161e:	466c      	mov	r4, sp
   11620:	f114 0210 	adds.w	r2, r4, #16
   11624:	d013      	beq.n	1164e <connected+0x46a>
   11626:	200e      	movs	r0, #14
   11628:	b11a      	cbz	r2, 11632 <connected+0x44e>
   1162a:	2804      	cmp	r0, #4
   1162c:	dd01      	ble.n	11632 <connected+0x44e>
   1162e:	4b77      	ldr	r3, [pc, #476]	; (1180c <connected+0x628>)
   11630:	6163      	str	r3, [r4, #20]
   11632:	2300      	movs	r3, #0
   11634:	703b      	strb	r3, [r7, #0]
   11636:	2302      	movs	r3, #2
   11638:	707b      	strb	r3, [r7, #1]
   1163a:	b1aa      	cbz	r2, 11668 <connected+0x484>
   1163c:	2808      	cmp	r0, #8
   1163e:	dd02      	ble.n	11646 <connected+0x462>
   11640:	f107 0308 	add.w	r3, r7, #8
   11644:	61a3      	str	r3, [r4, #24]
   11646:	f104 031c 	add.w	r3, r4, #28
   1164a:	2100      	movs	r1, #0
   1164c:	e00a      	b.n	11664 <connected+0x480>
   1164e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11652:	e7e9      	b.n	11628 <connected+0x444>
   11654:	f101 0638 	add.w	r6, r1, #56	; 0x38
   11658:	443e      	add	r6, r7
   1165a:	f816 6c38 	ldrb.w	r6, [r6, #-56]
   1165e:	f803 6b01 	strb.w	r6, [r3], #1
   11662:	3101      	adds	r1, #1
   11664:	2901      	cmp	r1, #1
   11666:	d9f5      	bls.n	11654 <connected+0x470>
   11668:	280d      	cmp	r0, #13
   1166a:	dd24      	ble.n	116b6 <connected+0x4d2>
   1166c:	230e      	movs	r3, #14
   1166e:	b142      	cbz	r2, 11682 <connected+0x49e>
   11670:	2103      	movs	r1, #3
   11672:	7139      	strb	r1, [r7, #4]
   11674:	2100      	movs	r1, #0
   11676:	7179      	strb	r1, [r7, #5]
   11678:	71b9      	strb	r1, [r7, #6]
   1167a:	2101      	movs	r1, #1
   1167c:	71f9      	strb	r1, [r7, #7]
   1167e:	6878      	ldr	r0, [r7, #4]
   11680:	6120      	str	r0, [r4, #16]
   11682:	2100      	movs	r1, #0
   11684:	f36f 0100 	bfc	r1, #0, #1
   11688:	f36f 0141 	bfc	r1, #1, #1
   1168c:	f36f 0182 	bfc	r1, #2, #1
   11690:	f36f 01c5 	bfc	r1, #3, #3
   11694:	2003      	movs	r0, #3
   11696:	f360 1188 	bfi	r1, r0, #6, #3
   1169a:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1169e:	f363 2152 	bfi	r1, r3, #9, #10
   116a2:	f36f 41de 	bfc	r1, #19, #12
   116a6:	f36f 71df 	bfc	r1, #31, #1
   116aa:	2300      	movs	r3, #0
   116ac:	4855      	ldr	r0, [pc, #340]	; (11804 <connected+0x620>)
   116ae:	f014 f880 	bl	257b2 <z_impl_z_log_msg_static_create>
   116b2:	46ad      	mov	sp, r5
   116b4:	e5fe      	b.n	112b4 <connected+0xd0>
   116b6:	f06f 031b 	mvn.w	r3, #27
   116ba:	e7d8      	b.n	1166e <connected+0x48a>
   116bc:	2207      	movs	r2, #7
   116be:	4954      	ldr	r1, [pc, #336]	; (11810 <connected+0x62c>)
   116c0:	4628      	mov	r0, r5
   116c2:	f014 fc9e 	bl	26002 <memcmp>
		} else if (bt_addr_le_eq(addr, &EFL_bt_addr)) {
   116c6:	2800      	cmp	r0, #0
   116c8:	d161      	bne.n	1178e <connected+0x5aa>
   116ca:	4b4c      	ldr	r3, [pc, #304]	; (117fc <connected+0x618>)
   116cc:	f3bf 8f5b 	dmb	ish
   116d0:	e853 1f00 	ldrex	r1, [r3]
   116d4:	f041 0110 	orr.w	r1, r1, #16
   116d8:	e843 1200 	strex	r2, r1, [r3]
   116dc:	2a00      	cmp	r2, #0
   116de:	d1f7      	bne.n	116d0 <connected+0x4ec>
   116e0:	f3bf 8f5b 	dmb	ish
			LOG_INF("External FL connected, addr: %s\n", addr_str);
   116e4:	466d      	mov	r5, sp
   116e6:	2300      	movs	r3, #0
   116e8:	713b      	strb	r3, [r7, #4]
   116ea:	2302      	movs	r3, #2
   116ec:	717b      	strb	r3, [r7, #5]
   116ee:	b088      	sub	sp, #32
   116f0:	466c      	mov	r4, sp
   116f2:	f114 0210 	adds.w	r2, r4, #16
   116f6:	d013      	beq.n	11720 <connected+0x53c>
   116f8:	200e      	movs	r0, #14
   116fa:	b11a      	cbz	r2, 11704 <connected+0x520>
   116fc:	2804      	cmp	r0, #4
   116fe:	dd01      	ble.n	11704 <connected+0x520>
   11700:	4b44      	ldr	r3, [pc, #272]	; (11814 <connected+0x630>)
   11702:	6163      	str	r3, [r4, #20]
   11704:	2300      	movs	r3, #0
   11706:	703b      	strb	r3, [r7, #0]
   11708:	2302      	movs	r3, #2
   1170a:	707b      	strb	r3, [r7, #1]
   1170c:	b1aa      	cbz	r2, 1173a <connected+0x556>
   1170e:	2808      	cmp	r0, #8
   11710:	dd02      	ble.n	11718 <connected+0x534>
   11712:	f107 0308 	add.w	r3, r7, #8
   11716:	61a3      	str	r3, [r4, #24]
   11718:	f104 031c 	add.w	r3, r4, #28
   1171c:	2100      	movs	r1, #0
   1171e:	e00a      	b.n	11736 <connected+0x552>
   11720:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11724:	e7e9      	b.n	116fa <connected+0x516>
   11726:	f101 0638 	add.w	r6, r1, #56	; 0x38
   1172a:	443e      	add	r6, r7
   1172c:	f816 6c38 	ldrb.w	r6, [r6, #-56]
   11730:	f803 6b01 	strb.w	r6, [r3], #1
   11734:	3101      	adds	r1, #1
   11736:	2901      	cmp	r1, #1
   11738:	d9f5      	bls.n	11726 <connected+0x542>
   1173a:	280d      	cmp	r0, #13
   1173c:	dd24      	ble.n	11788 <connected+0x5a4>
   1173e:	230e      	movs	r3, #14
   11740:	b142      	cbz	r2, 11754 <connected+0x570>
   11742:	2103      	movs	r1, #3
   11744:	7139      	strb	r1, [r7, #4]
   11746:	2100      	movs	r1, #0
   11748:	7179      	strb	r1, [r7, #5]
   1174a:	71b9      	strb	r1, [r7, #6]
   1174c:	2101      	movs	r1, #1
   1174e:	71f9      	strb	r1, [r7, #7]
   11750:	6878      	ldr	r0, [r7, #4]
   11752:	6120      	str	r0, [r4, #16]
   11754:	2100      	movs	r1, #0
   11756:	f36f 0100 	bfc	r1, #0, #1
   1175a:	f36f 0141 	bfc	r1, #1, #1
   1175e:	f36f 0182 	bfc	r1, #2, #1
   11762:	f36f 01c5 	bfc	r1, #3, #3
   11766:	2003      	movs	r0, #3
   11768:	f360 1188 	bfi	r1, r0, #6, #3
   1176c:	f3c3 0309 	ubfx	r3, r3, #0, #10
   11770:	f363 2152 	bfi	r1, r3, #9, #10
   11774:	f36f 41de 	bfc	r1, #19, #12
   11778:	f36f 71df 	bfc	r1, #31, #1
   1177c:	2300      	movs	r3, #0
   1177e:	4821      	ldr	r0, [pc, #132]	; (11804 <connected+0x620>)
   11780:	f014 f817 	bl	257b2 <z_impl_z_log_msg_static_create>
   11784:	46ad      	mov	sp, r5
   11786:	e595      	b.n	112b4 <connected+0xd0>
   11788:	f06f 031b 	mvn.w	r3, #27
   1178c:	e7d8      	b.n	11740 <connected+0x55c>
   1178e:	2207      	movs	r2, #7
   11790:	4921      	ldr	r1, [pc, #132]	; (11818 <connected+0x634>)
   11792:	4628      	mov	r0, r5
   11794:	f014 fc35 	bl	26002 <memcmp>
		} else if (bt_addr_le_eq(addr, &EFR_bt_addr)) {
   11798:	2800      	cmp	r0, #0
   1179a:	d175      	bne.n	11888 <connected+0x6a4>
   1179c:	4b17      	ldr	r3, [pc, #92]	; (117fc <connected+0x618>)
   1179e:	f3bf 8f5b 	dmb	ish
   117a2:	e853 1f00 	ldrex	r1, [r3]
   117a6:	f041 0120 	orr.w	r1, r1, #32
   117aa:	e843 1200 	strex	r2, r1, [r3]
   117ae:	2a00      	cmp	r2, #0
   117b0:	d1f7      	bne.n	117a2 <connected+0x5be>
   117b2:	f3bf 8f5b 	dmb	ish
			LOG_INF("External FR connected, addr: %s\n", addr_str);
   117b6:	466d      	mov	r5, sp
   117b8:	2300      	movs	r3, #0
   117ba:	713b      	strb	r3, [r7, #4]
   117bc:	2302      	movs	r3, #2
   117be:	717b      	strb	r3, [r7, #5]
   117c0:	b088      	sub	sp, #32
   117c2:	466c      	mov	r4, sp
   117c4:	f114 0210 	adds.w	r2, r4, #16
   117c8:	d013      	beq.n	117f2 <connected+0x60e>
   117ca:	200e      	movs	r0, #14
   117cc:	b11a      	cbz	r2, 117d6 <connected+0x5f2>
   117ce:	2804      	cmp	r0, #4
   117d0:	dd01      	ble.n	117d6 <connected+0x5f2>
   117d2:	4b12      	ldr	r3, [pc, #72]	; (1181c <connected+0x638>)
   117d4:	6163      	str	r3, [r4, #20]
   117d6:	2300      	movs	r3, #0
   117d8:	703b      	strb	r3, [r7, #0]
   117da:	2302      	movs	r3, #2
   117dc:	707b      	strb	r3, [r7, #1]
   117de:	b34a      	cbz	r2, 11834 <connected+0x650>
   117e0:	2808      	cmp	r0, #8
   117e2:	dd02      	ble.n	117ea <connected+0x606>
   117e4:	f107 0308 	add.w	r3, r7, #8
   117e8:	61a3      	str	r3, [r4, #24]
   117ea:	f104 031c 	add.w	r3, r4, #28
   117ee:	2100      	movs	r1, #0
   117f0:	e01e      	b.n	11830 <connected+0x64c>
   117f2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   117f6:	e7e9      	b.n	117cc <connected+0x5e8>
   117f8:	20005600 	.word	0x20005600
   117fc:	20005618 	.word	0x20005618
   11800:	0002b574 	.word	0x0002b574
   11804:	0002b22c 	.word	0x0002b22c
   11808:	200055f8 	.word	0x200055f8
   1180c:	0002b598 	.word	0x0002b598
   11810:	200055f0 	.word	0x200055f0
   11814:	0002b5bc 	.word	0x0002b5bc
   11818:	200055e8 	.word	0x200055e8
   1181c:	0002b5e0 	.word	0x0002b5e0
   11820:	f101 0638 	add.w	r6, r1, #56	; 0x38
   11824:	443e      	add	r6, r7
   11826:	f816 6c38 	ldrb.w	r6, [r6, #-56]
   1182a:	f803 6b01 	strb.w	r6, [r3], #1
   1182e:	3101      	adds	r1, #1
   11830:	2901      	cmp	r1, #1
   11832:	d9f5      	bls.n	11820 <connected+0x63c>
   11834:	280d      	cmp	r0, #13
   11836:	dd24      	ble.n	11882 <connected+0x69e>
   11838:	230e      	movs	r3, #14
   1183a:	b142      	cbz	r2, 1184e <connected+0x66a>
   1183c:	2103      	movs	r1, #3
   1183e:	7139      	strb	r1, [r7, #4]
   11840:	2100      	movs	r1, #0
   11842:	7179      	strb	r1, [r7, #5]
   11844:	71b9      	strb	r1, [r7, #6]
   11846:	2101      	movs	r1, #1
   11848:	71f9      	strb	r1, [r7, #7]
   1184a:	6878      	ldr	r0, [r7, #4]
   1184c:	6120      	str	r0, [r4, #16]
   1184e:	2100      	movs	r1, #0
   11850:	f36f 0100 	bfc	r1, #0, #1
   11854:	f36f 0141 	bfc	r1, #1, #1
   11858:	f36f 0182 	bfc	r1, #2, #1
   1185c:	f36f 01c5 	bfc	r1, #3, #3
   11860:	2003      	movs	r0, #3
   11862:	f360 1188 	bfi	r1, r0, #6, #3
   11866:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1186a:	f363 2152 	bfi	r1, r3, #9, #10
   1186e:	f36f 41de 	bfc	r1, #19, #12
   11872:	f36f 71df 	bfc	r1, #31, #1
   11876:	2300      	movs	r3, #0
   11878:	489a      	ldr	r0, [pc, #616]	; (11ae4 <connected+0x900>)
   1187a:	f013 ff9a 	bl	257b2 <z_impl_z_log_msg_static_create>
   1187e:	46ad      	mov	sp, r5
   11880:	e518      	b.n	112b4 <connected+0xd0>
   11882:	f06f 031b 	mvn.w	r3, #27
   11886:	e7d8      	b.n	1183a <connected+0x656>
   11888:	2207      	movs	r2, #7
   1188a:	4997      	ldr	r1, [pc, #604]	; (11ae8 <connected+0x904>)
   1188c:	4628      	mov	r0, r5
   1188e:	f014 fbb8 	bl	26002 <memcmp>
		} else if (bt_addr_le_eq(addr, &ERL_bt_addr)) {
   11892:	2800      	cmp	r0, #0
   11894:	d161      	bne.n	1195a <connected+0x776>
   11896:	4b95      	ldr	r3, [pc, #596]	; (11aec <connected+0x908>)
   11898:	f3bf 8f5b 	dmb	ish
   1189c:	e853 1f00 	ldrex	r1, [r3]
   118a0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   118a4:	e843 1200 	strex	r2, r1, [r3]
   118a8:	2a00      	cmp	r2, #0
   118aa:	d1f7      	bne.n	1189c <connected+0x6b8>
   118ac:	f3bf 8f5b 	dmb	ish
			LOG_INF("External RL connected, addr: %s\n", addr_str);
   118b0:	466d      	mov	r5, sp
   118b2:	2300      	movs	r3, #0
   118b4:	713b      	strb	r3, [r7, #4]
   118b6:	2302      	movs	r3, #2
   118b8:	717b      	strb	r3, [r7, #5]
   118ba:	b088      	sub	sp, #32
   118bc:	466c      	mov	r4, sp
   118be:	f114 0210 	adds.w	r2, r4, #16
   118c2:	d013      	beq.n	118ec <connected+0x708>
   118c4:	200e      	movs	r0, #14
   118c6:	b11a      	cbz	r2, 118d0 <connected+0x6ec>
   118c8:	2804      	cmp	r0, #4
   118ca:	dd01      	ble.n	118d0 <connected+0x6ec>
   118cc:	4b88      	ldr	r3, [pc, #544]	; (11af0 <connected+0x90c>)
   118ce:	6163      	str	r3, [r4, #20]
   118d0:	2300      	movs	r3, #0
   118d2:	703b      	strb	r3, [r7, #0]
   118d4:	2302      	movs	r3, #2
   118d6:	707b      	strb	r3, [r7, #1]
   118d8:	b1aa      	cbz	r2, 11906 <connected+0x722>
   118da:	2808      	cmp	r0, #8
   118dc:	dd02      	ble.n	118e4 <connected+0x700>
   118de:	f107 0308 	add.w	r3, r7, #8
   118e2:	61a3      	str	r3, [r4, #24]
   118e4:	f104 031c 	add.w	r3, r4, #28
   118e8:	2100      	movs	r1, #0
   118ea:	e00a      	b.n	11902 <connected+0x71e>
   118ec:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   118f0:	e7e9      	b.n	118c6 <connected+0x6e2>
   118f2:	f101 0638 	add.w	r6, r1, #56	; 0x38
   118f6:	443e      	add	r6, r7
   118f8:	f816 6c38 	ldrb.w	r6, [r6, #-56]
   118fc:	f803 6b01 	strb.w	r6, [r3], #1
   11900:	3101      	adds	r1, #1
   11902:	2901      	cmp	r1, #1
   11904:	d9f5      	bls.n	118f2 <connected+0x70e>
   11906:	280d      	cmp	r0, #13
   11908:	dd24      	ble.n	11954 <connected+0x770>
   1190a:	230e      	movs	r3, #14
   1190c:	b142      	cbz	r2, 11920 <connected+0x73c>
   1190e:	2103      	movs	r1, #3
   11910:	7139      	strb	r1, [r7, #4]
   11912:	2100      	movs	r1, #0
   11914:	7179      	strb	r1, [r7, #5]
   11916:	71b9      	strb	r1, [r7, #6]
   11918:	2101      	movs	r1, #1
   1191a:	71f9      	strb	r1, [r7, #7]
   1191c:	6878      	ldr	r0, [r7, #4]
   1191e:	6120      	str	r0, [r4, #16]
   11920:	2100      	movs	r1, #0
   11922:	f36f 0100 	bfc	r1, #0, #1
   11926:	f36f 0141 	bfc	r1, #1, #1
   1192a:	f36f 0182 	bfc	r1, #2, #1
   1192e:	f36f 01c5 	bfc	r1, #3, #3
   11932:	2003      	movs	r0, #3
   11934:	f360 1188 	bfi	r1, r0, #6, #3
   11938:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1193c:	f363 2152 	bfi	r1, r3, #9, #10
   11940:	f36f 41de 	bfc	r1, #19, #12
   11944:	f36f 71df 	bfc	r1, #31, #1
   11948:	2300      	movs	r3, #0
   1194a:	4866      	ldr	r0, [pc, #408]	; (11ae4 <connected+0x900>)
   1194c:	f013 ff31 	bl	257b2 <z_impl_z_log_msg_static_create>
   11950:	46ad      	mov	sp, r5
   11952:	e4af      	b.n	112b4 <connected+0xd0>
   11954:	f06f 031b 	mvn.w	r3, #27
   11958:	e7d8      	b.n	1190c <connected+0x728>
   1195a:	2207      	movs	r2, #7
   1195c:	4965      	ldr	r1, [pc, #404]	; (11af4 <connected+0x910>)
   1195e:	4628      	mov	r0, r5
   11960:	f014 fb4f 	bl	26002 <memcmp>
		} else if (bt_addr_le_eq(addr, &ERR_bt_addr)) {
   11964:	b1f0      	cbz	r0, 119a4 <connected+0x7c0>
			LOG_WRN("UNKNOWN SENSOR CONNECTED, addr: %s\n", addr_str);
   11966:	466c      	mov	r4, sp
   11968:	2300      	movs	r3, #0
   1196a:	713b      	strb	r3, [r7, #4]
   1196c:	2302      	movs	r3, #2
   1196e:	717b      	strb	r3, [r7, #5]
   11970:	b088      	sub	sp, #32
   11972:	466b      	mov	r3, sp
   11974:	f113 0210 	adds.w	r2, r3, #16
   11978:	d076      	beq.n	11a68 <connected+0x884>
   1197a:	250e      	movs	r5, #14
   1197c:	b11a      	cbz	r2, 11986 <connected+0x7a2>
   1197e:	2d04      	cmp	r5, #4
   11980:	dd01      	ble.n	11986 <connected+0x7a2>
   11982:	495d      	ldr	r1, [pc, #372]	; (11af8 <connected+0x914>)
   11984:	6159      	str	r1, [r3, #20]
   11986:	2100      	movs	r1, #0
   11988:	7039      	strb	r1, [r7, #0]
   1198a:	2102      	movs	r1, #2
   1198c:	7079      	strb	r1, [r7, #1]
   1198e:	2a00      	cmp	r2, #0
   11990:	d077      	beq.n	11a82 <connected+0x89e>
   11992:	2d08      	cmp	r5, #8
   11994:	dd02      	ble.n	1199c <connected+0x7b8>
   11996:	f107 0108 	add.w	r1, r7, #8
   1199a:	6199      	str	r1, [r3, #24]
   1199c:	f103 011c 	add.w	r1, r3, #28
   119a0:	2000      	movs	r0, #0
   119a2:	e06c      	b.n	11a7e <connected+0x89a>
   119a4:	4b51      	ldr	r3, [pc, #324]	; (11aec <connected+0x908>)
   119a6:	f3bf 8f5b 	dmb	ish
   119aa:	e853 1f00 	ldrex	r1, [r3]
   119ae:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   119b2:	e843 1200 	strex	r2, r1, [r3]
   119b6:	2a00      	cmp	r2, #0
   119b8:	d1f7      	bne.n	119aa <connected+0x7c6>
   119ba:	f3bf 8f5b 	dmb	ish
			LOG_INF("External RR connected, addr: %s\n", addr_str);
   119be:	466d      	mov	r5, sp
   119c0:	2300      	movs	r3, #0
   119c2:	713b      	strb	r3, [r7, #4]
   119c4:	2302      	movs	r3, #2
   119c6:	717b      	strb	r3, [r7, #5]
   119c8:	b088      	sub	sp, #32
   119ca:	466b      	mov	r3, sp
   119cc:	f113 0210 	adds.w	r2, r3, #16
   119d0:	d013      	beq.n	119fa <connected+0x816>
   119d2:	200e      	movs	r0, #14
   119d4:	b11a      	cbz	r2, 119de <connected+0x7fa>
   119d6:	2804      	cmp	r0, #4
   119d8:	dd01      	ble.n	119de <connected+0x7fa>
   119da:	4948      	ldr	r1, [pc, #288]	; (11afc <connected+0x918>)
   119dc:	6159      	str	r1, [r3, #20]
   119de:	2100      	movs	r1, #0
   119e0:	7039      	strb	r1, [r7, #0]
   119e2:	2102      	movs	r1, #2
   119e4:	7079      	strb	r1, [r7, #1]
   119e6:	b1aa      	cbz	r2, 11a14 <connected+0x830>
   119e8:	2808      	cmp	r0, #8
   119ea:	dd02      	ble.n	119f2 <connected+0x80e>
   119ec:	f107 0108 	add.w	r1, r7, #8
   119f0:	6199      	str	r1, [r3, #24]
   119f2:	f103 011c 	add.w	r1, r3, #28
   119f6:	2400      	movs	r4, #0
   119f8:	e00a      	b.n	11a10 <connected+0x82c>
   119fa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   119fe:	e7e9      	b.n	119d4 <connected+0x7f0>
   11a00:	f104 0638 	add.w	r6, r4, #56	; 0x38
   11a04:	443e      	add	r6, r7
   11a06:	f816 6c38 	ldrb.w	r6, [r6, #-56]
   11a0a:	f801 6b01 	strb.w	r6, [r1], #1
   11a0e:	3401      	adds	r4, #1
   11a10:	2c01      	cmp	r4, #1
   11a12:	d9f5      	bls.n	11a00 <connected+0x81c>
   11a14:	280d      	cmp	r0, #13
   11a16:	dd24      	ble.n	11a62 <connected+0x87e>
   11a18:	240e      	movs	r4, #14
   11a1a:	b142      	cbz	r2, 11a2e <connected+0x84a>
   11a1c:	2103      	movs	r1, #3
   11a1e:	7139      	strb	r1, [r7, #4]
   11a20:	2100      	movs	r1, #0
   11a22:	7179      	strb	r1, [r7, #5]
   11a24:	71b9      	strb	r1, [r7, #6]
   11a26:	2101      	movs	r1, #1
   11a28:	71f9      	strb	r1, [r7, #7]
   11a2a:	6878      	ldr	r0, [r7, #4]
   11a2c:	6118      	str	r0, [r3, #16]
   11a2e:	2100      	movs	r1, #0
   11a30:	f36f 0100 	bfc	r1, #0, #1
   11a34:	f36f 0141 	bfc	r1, #1, #1
   11a38:	f36f 0182 	bfc	r1, #2, #1
   11a3c:	f36f 01c5 	bfc	r1, #3, #3
   11a40:	2303      	movs	r3, #3
   11a42:	f363 1188 	bfi	r1, r3, #6, #3
   11a46:	f3c4 0409 	ubfx	r4, r4, #0, #10
   11a4a:	f364 2152 	bfi	r1, r4, #9, #10
   11a4e:	f36f 41de 	bfc	r1, #19, #12
   11a52:	f36f 71df 	bfc	r1, #31, #1
   11a56:	2300      	movs	r3, #0
   11a58:	4822      	ldr	r0, [pc, #136]	; (11ae4 <connected+0x900>)
   11a5a:	f013 feaa 	bl	257b2 <z_impl_z_log_msg_static_create>
   11a5e:	46ad      	mov	sp, r5
   11a60:	e428      	b.n	112b4 <connected+0xd0>
   11a62:	f06f 041b 	mvn.w	r4, #27
   11a66:	e7d8      	b.n	11a1a <connected+0x836>
			LOG_WRN("UNKNOWN SENSOR CONNECTED, addr: %s\n", addr_str);
   11a68:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   11a6c:	e786      	b.n	1197c <connected+0x798>
   11a6e:	f100 0638 	add.w	r6, r0, #56	; 0x38
   11a72:	443e      	add	r6, r7
   11a74:	f816 6c38 	ldrb.w	r6, [r6, #-56]
   11a78:	f801 6b01 	strb.w	r6, [r1], #1
   11a7c:	3001      	adds	r0, #1
   11a7e:	2801      	cmp	r0, #1
   11a80:	d9f5      	bls.n	11a6e <connected+0x88a>
   11a82:	2d0d      	cmp	r5, #13
   11a84:	dd25      	ble.n	11ad2 <connected+0x8ee>
   11a86:	250e      	movs	r5, #14
   11a88:	b142      	cbz	r2, 11a9c <connected+0x8b8>
   11a8a:	2103      	movs	r1, #3
   11a8c:	7139      	strb	r1, [r7, #4]
   11a8e:	2100      	movs	r1, #0
   11a90:	7179      	strb	r1, [r7, #5]
   11a92:	71b9      	strb	r1, [r7, #6]
   11a94:	2101      	movs	r1, #1
   11a96:	71f9      	strb	r1, [r7, #7]
   11a98:	6878      	ldr	r0, [r7, #4]
   11a9a:	6118      	str	r0, [r3, #16]
   11a9c:	2100      	movs	r1, #0
   11a9e:	f36f 0100 	bfc	r1, #0, #1
   11aa2:	f36f 0141 	bfc	r1, #1, #1
   11aa6:	f36f 0182 	bfc	r1, #2, #1
   11aaa:	f36f 01c5 	bfc	r1, #3, #3
   11aae:	2302      	movs	r3, #2
   11ab0:	f363 1188 	bfi	r1, r3, #6, #3
   11ab4:	f3c5 0509 	ubfx	r5, r5, #0, #10
   11ab8:	f365 2152 	bfi	r1, r5, #9, #10
   11abc:	f36f 41de 	bfc	r1, #19, #12
   11ac0:	f36f 71df 	bfc	r1, #31, #1
   11ac4:	2300      	movs	r3, #0
   11ac6:	4807      	ldr	r0, [pc, #28]	; (11ae4 <connected+0x900>)
   11ac8:	f013 fe73 	bl	257b2 <z_impl_z_log_msg_static_create>
   11acc:	46a5      	mov	sp, r4
   11ace:	f7ff bbf1 	b.w	112b4 <connected+0xd0>
   11ad2:	f06f 051b 	mvn.w	r5, #27
   11ad6:	e7d7      	b.n	11a88 <connected+0x8a4>
		LOG_ERR("Failed to start automatically connecting (err %d)", err);
   11ad8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   11adc:	e400      	b.n	112e0 <connected+0xfc>
   11ade:	f06f 041b 	mvn.w	r4, #27
   11ae2:	e40a      	b.n	112fa <connected+0x116>
   11ae4:	0002b22c 	.word	0x0002b22c
   11ae8:	200055e0 	.word	0x200055e0
   11aec:	20005618 	.word	0x20005618
   11af0:	0002b604 	.word	0x0002b604
   11af4:	200055d8 	.word	0x200055d8
   11af8:	0002b64c 	.word	0x0002b64c
   11afc:	0002b628 	.word	0x0002b628

00011b00 <main>:

/* --- WORK FUNCTIONS END --- */


void main(void)
{
   11b00:	b5f0      	push	{r4, r5, r6, r7, lr}
   11b02:	b095      	sub	sp, #84	; 0x54
   11b04:	af00      	add	r7, sp, #0
	LOG_INF("Running ttpms_v2_receiver");
   11b06:	4b9d      	ldr	r3, [pc, #628]	; (11d7c <main+0x27c>)
   11b08:	637b      	str	r3, [r7, #52]	; 0x34
   11b0a:	2302      	movs	r3, #2
   11b0c:	713b      	strb	r3, [r7, #4]
   11b0e:	2300      	movs	r3, #0
   11b10:	717b      	strb	r3, [r7, #5]
   11b12:	71bb      	strb	r3, [r7, #6]
   11b14:	71fb      	strb	r3, [r7, #7]
   11b16:	687a      	ldr	r2, [r7, #4]
   11b18:	633a      	str	r2, [r7, #48]	; 0x30
   11b1a:	4619      	mov	r1, r3
   11b1c:	f363 0100 	bfi	r1, r3, #0, #1
   11b20:	f363 0141 	bfi	r1, r3, #1, #1
   11b24:	f363 0182 	bfi	r1, r3, #2, #1
   11b28:	f363 01c5 	bfi	r1, r3, #3, #3
   11b2c:	2203      	movs	r2, #3
   11b2e:	f362 1188 	bfi	r1, r2, #6, #3
   11b32:	2208      	movs	r2, #8
   11b34:	f362 2152 	bfi	r1, r2, #9, #10
   11b38:	f363 41de 	bfi	r1, r3, #19, #12
   11b3c:	f363 71df 	bfi	r1, r3, #31, #1
   11b40:	f107 0230 	add.w	r2, r7, #48	; 0x30
   11b44:	488e      	ldr	r0, [pc, #568]	; (11d80 <main+0x280>)
   11b46:	f013 fe34 	bl	257b2 <z_impl_z_log_msg_static_create>
	*/

	bt_addr_le_t addr;

	// create self BT address
	err = bt_addr_le_from_str(TTPMS_RX_BT_ID, "random", &addr);
   11b4a:	f107 0208 	add.w	r2, r7, #8
   11b4e:	498d      	ldr	r1, [pc, #564]	; (11d84 <main+0x284>)
   11b50:	488d      	ldr	r0, [pc, #564]	; (11d88 <main+0x288>)
   11b52:	f004 fb89 	bl	16268 <bt_addr_le_from_str>
	if (err) {
   11b56:	2800      	cmp	r0, #0
   11b58:	d03c      	beq.n	11bd4 <main+0xd4>
   11b5a:	4606      	mov	r6, r0
		LOG_WRN("Invalid BT address (err %d)\n", err);
   11b5c:	466c      	mov	r4, sp
   11b5e:	b088      	sub	sp, #32
   11b60:	466b      	mov	r3, sp
   11b62:	f113 0210 	adds.w	r2, r3, #16
   11b66:	d00e      	beq.n	11b86 <main+0x86>
   11b68:	210c      	movs	r1, #12
   11b6a:	b13a      	cbz	r2, 11b7c <main+0x7c>
   11b6c:	4608      	mov	r0, r1
   11b6e:	2904      	cmp	r1, #4
   11b70:	dd01      	ble.n	11b76 <main+0x76>
   11b72:	4d86      	ldr	r5, [pc, #536]	; (11d8c <main+0x28c>)
   11b74:	615d      	str	r5, [r3, #20]
   11b76:	2808      	cmp	r0, #8
   11b78:	dd08      	ble.n	11b8c <main+0x8c>
   11b7a:	619e      	str	r6, [r3, #24]
   11b7c:	290b      	cmp	r1, #11
   11b7e:	dd4d      	ble.n	11c1c <main+0x11c>
   11b80:	f04f 0c0c 	mov.w	ip, #12
   11b84:	e004      	b.n	11b90 <main+0x90>
   11b86:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   11b8a:	e7ee      	b.n	11b6a <main+0x6a>
   11b8c:	f06f 0c1b 	mvn.w	ip, #27
   11b90:	b13a      	cbz	r2, 11ba2 <main+0xa2>
   11b92:	2103      	movs	r1, #3
   11b94:	7139      	strb	r1, [r7, #4]
   11b96:	2100      	movs	r1, #0
   11b98:	7179      	strb	r1, [r7, #5]
   11b9a:	71b9      	strb	r1, [r7, #6]
   11b9c:	71f9      	strb	r1, [r7, #7]
   11b9e:	6878      	ldr	r0, [r7, #4]
   11ba0:	6118      	str	r0, [r3, #16]
   11ba2:	2100      	movs	r1, #0
   11ba4:	f36f 0100 	bfc	r1, #0, #1
   11ba8:	f36f 0141 	bfc	r1, #1, #1
   11bac:	f36f 0182 	bfc	r1, #2, #1
   11bb0:	f36f 01c5 	bfc	r1, #3, #3
   11bb4:	2302      	movs	r3, #2
   11bb6:	f363 1188 	bfi	r1, r3, #6, #3
   11bba:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   11bbe:	f363 2152 	bfi	r1, r3, #9, #10
   11bc2:	f36f 41de 	bfc	r1, #19, #12
   11bc6:	f36f 71df 	bfc	r1, #31, #1
   11bca:	2300      	movs	r3, #0
   11bcc:	486c      	ldr	r0, [pc, #432]	; (11d80 <main+0x280>)
   11bce:	f013 fdf0 	bl	257b2 <z_impl_z_log_msg_static_create>
   11bd2:	46a5      	mov	sp, r4
	}

	// assign self BT address
	err = bt_id_create(&addr, NULL);
   11bd4:	2100      	movs	r1, #0
   11bd6:	f107 0008 	add.w	r0, r7, #8
   11bda:	f007 f8e1 	bl	18da0 <bt_id_create>
	if (err < 0) {
   11bde:	2800      	cmp	r0, #0
   11be0:	db1f      	blt.n	11c22 <main+0x122>
		LOG_WRN("Creating new BT ID failed (err %d)\n", err);
	}

	err = bt_enable(NULL);
   11be2:	2000      	movs	r0, #0
   11be4:	f006 fefc 	bl	189e0 <bt_enable>
	if (err) {
   11be8:	4606      	mov	r6, r0
   11bea:	2800      	cmp	r0, #0
   11bec:	f000 80a0 	beq.w	11d30 <main+0x230>
		LOG_WRN("Bluetooth init failed (err %d)\n", err);
   11bf0:	466c      	mov	r4, sp
   11bf2:	b088      	sub	sp, #32
   11bf4:	466b      	mov	r3, sp
   11bf6:	f113 0210 	adds.w	r2, r3, #16
   11bfa:	d051      	beq.n	11ca0 <main+0x1a0>
   11bfc:	210c      	movs	r1, #12
   11bfe:	b13a      	cbz	r2, 11c10 <main+0x110>
   11c00:	4608      	mov	r0, r1
   11c02:	2904      	cmp	r1, #4
   11c04:	dd01      	ble.n	11c0a <main+0x10a>
   11c06:	4d62      	ldr	r5, [pc, #392]	; (11d90 <main+0x290>)
   11c08:	615d      	str	r5, [r3, #20]
   11c0a:	2808      	cmp	r0, #8
   11c0c:	dd4b      	ble.n	11ca6 <main+0x1a6>
   11c0e:	619e      	str	r6, [r3, #24]
   11c10:	290b      	cmp	r1, #11
   11c12:	f340 808a 	ble.w	11d2a <main+0x22a>
   11c16:	f04f 0c0c 	mov.w	ip, #12
   11c1a:	e046      	b.n	11caa <main+0x1aa>
		LOG_WRN("Invalid BT address (err %d)\n", err);
   11c1c:	f06f 0c1b 	mvn.w	ip, #27
   11c20:	e7b6      	b.n	11b90 <main+0x90>
		LOG_WRN("Creating new BT ID failed (err %d)\n", err);
   11c22:	466d      	mov	r5, sp
   11c24:	b088      	sub	sp, #32
   11c26:	466b      	mov	r3, sp
   11c28:	f113 0210 	adds.w	r2, r3, #16
   11c2c:	d00d      	beq.n	11c4a <main+0x14a>
   11c2e:	210c      	movs	r1, #12
   11c30:	b13a      	cbz	r2, 11c42 <main+0x142>
   11c32:	460c      	mov	r4, r1
   11c34:	2904      	cmp	r1, #4
   11c36:	dd01      	ble.n	11c3c <main+0x13c>
   11c38:	4e56      	ldr	r6, [pc, #344]	; (11d94 <main+0x294>)
   11c3a:	615e      	str	r6, [r3, #20]
   11c3c:	2c08      	cmp	r4, #8
   11c3e:	dd07      	ble.n	11c50 <main+0x150>
   11c40:	6198      	str	r0, [r3, #24]
   11c42:	290b      	cmp	r1, #11
   11c44:	dd29      	ble.n	11c9a <main+0x19a>
   11c46:	240c      	movs	r4, #12
   11c48:	e004      	b.n	11c54 <main+0x154>
   11c4a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   11c4e:	e7ef      	b.n	11c30 <main+0x130>
   11c50:	f06f 041b 	mvn.w	r4, #27
   11c54:	b13a      	cbz	r2, 11c66 <main+0x166>
   11c56:	2103      	movs	r1, #3
   11c58:	7139      	strb	r1, [r7, #4]
   11c5a:	2100      	movs	r1, #0
   11c5c:	7179      	strb	r1, [r7, #5]
   11c5e:	71b9      	strb	r1, [r7, #6]
   11c60:	71f9      	strb	r1, [r7, #7]
   11c62:	6878      	ldr	r0, [r7, #4]
   11c64:	6118      	str	r0, [r3, #16]
   11c66:	2100      	movs	r1, #0
   11c68:	f36f 0100 	bfc	r1, #0, #1
   11c6c:	f36f 0141 	bfc	r1, #1, #1
   11c70:	f36f 0182 	bfc	r1, #2, #1
   11c74:	f36f 01c5 	bfc	r1, #3, #3
   11c78:	2302      	movs	r3, #2
   11c7a:	f363 1188 	bfi	r1, r3, #6, #3
   11c7e:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   11c82:	f363 2152 	bfi	r1, r3, #9, #10
   11c86:	f36f 41de 	bfc	r1, #19, #12
   11c8a:	f36f 71df 	bfc	r1, #31, #1
   11c8e:	2300      	movs	r3, #0
   11c90:	483b      	ldr	r0, [pc, #236]	; (11d80 <main+0x280>)
   11c92:	f013 fd8e 	bl	257b2 <z_impl_z_log_msg_static_create>
   11c96:	46ad      	mov	sp, r5
   11c98:	e7a3      	b.n	11be2 <main+0xe2>
   11c9a:	f06f 041b 	mvn.w	r4, #27
   11c9e:	e7d9      	b.n	11c54 <main+0x154>
		LOG_WRN("Bluetooth init failed (err %d)\n", err);
   11ca0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   11ca4:	e7ab      	b.n	11bfe <main+0xfe>
   11ca6:	f06f 0c1b 	mvn.w	ip, #27
   11caa:	b13a      	cbz	r2, 11cbc <main+0x1bc>
   11cac:	2103      	movs	r1, #3
   11cae:	7139      	strb	r1, [r7, #4]
   11cb0:	2100      	movs	r1, #0
   11cb2:	7179      	strb	r1, [r7, #5]
   11cb4:	71b9      	strb	r1, [r7, #6]
   11cb6:	71f9      	strb	r1, [r7, #7]
   11cb8:	6878      	ldr	r0, [r7, #4]
   11cba:	6118      	str	r0, [r3, #16]
   11cbc:	2100      	movs	r1, #0
   11cbe:	f36f 0100 	bfc	r1, #0, #1
   11cc2:	f36f 0141 	bfc	r1, #1, #1
   11cc6:	f36f 0182 	bfc	r1, #2, #1
   11cca:	f36f 01c5 	bfc	r1, #3, #3
   11cce:	2302      	movs	r3, #2
   11cd0:	f363 1188 	bfi	r1, r3, #6, #3
   11cd4:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   11cd8:	f36c 2152 	bfi	r1, ip, #9, #10
   11cdc:	f36f 41de 	bfc	r1, #19, #12
   11ce0:	f36f 71df 	bfc	r1, #31, #1
   11ce4:	2300      	movs	r3, #0
   11ce6:	4826      	ldr	r0, [pc, #152]	; (11d80 <main+0x280>)
   11ce8:	f013 fd63 	bl	257b2 <z_impl_z_log_msg_static_create>
   11cec:	46a5      	mov	sp, r4
	} else {
		LOG_INF("Bluetooth initialized\n");
	}

	// fill address variables for the devices we want to filter for
	err = bt_addr_le_from_str(TTPMS_IFL_BT_ID, "random", &IFL_bt_addr);
   11cee:	4a2a      	ldr	r2, [pc, #168]	; (11d98 <main+0x298>)
   11cf0:	4924      	ldr	r1, [pc, #144]	; (11d84 <main+0x284>)
   11cf2:	482a      	ldr	r0, [pc, #168]	; (11d9c <main+0x29c>)
   11cf4:	f004 fab8 	bl	16268 <bt_addr_le_from_str>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   11cf8:	4606      	mov	r6, r0
   11cfa:	2800      	cmp	r0, #0
   11cfc:	d076      	beq.n	11dec <main+0x2ec>
   11cfe:	466c      	mov	r4, sp
   11d00:	b088      	sub	sp, #32
   11d02:	466b      	mov	r3, sp
   11d04:	f113 0210 	adds.w	r2, r3, #16
   11d08:	d035      	beq.n	11d76 <main+0x276>
   11d0a:	210c      	movs	r1, #12
   11d0c:	b13a      	cbz	r2, 11d1e <main+0x21e>
   11d0e:	4608      	mov	r0, r1
   11d10:	2904      	cmp	r1, #4
   11d12:	dd01      	ble.n	11d18 <main+0x218>
   11d14:	4d1d      	ldr	r5, [pc, #116]	; (11d8c <main+0x28c>)
   11d16:	615d      	str	r5, [r3, #20]
   11d18:	2808      	cmp	r0, #8
   11d1a:	dd43      	ble.n	11da4 <main+0x2a4>
   11d1c:	619e      	str	r6, [r3, #24]
   11d1e:	290b      	cmp	r1, #11
   11d20:	f340 8081 	ble.w	11e26 <main+0x326>
   11d24:	f04f 0c0c 	mov.w	ip, #12
   11d28:	e03e      	b.n	11da8 <main+0x2a8>
		LOG_WRN("Bluetooth init failed (err %d)\n", err);
   11d2a:	f06f 0c1b 	mvn.w	ip, #27
   11d2e:	e7bc      	b.n	11caa <main+0x1aa>
		LOG_INF("Bluetooth initialized\n");
   11d30:	4b1b      	ldr	r3, [pc, #108]	; (11da0 <main+0x2a0>)
   11d32:	64fb      	str	r3, [r7, #76]	; 0x4c
   11d34:	2302      	movs	r3, #2
   11d36:	713b      	strb	r3, [r7, #4]
   11d38:	2300      	movs	r3, #0
   11d3a:	717b      	strb	r3, [r7, #5]
   11d3c:	71bb      	strb	r3, [r7, #6]
   11d3e:	71fb      	strb	r3, [r7, #7]
   11d40:	687a      	ldr	r2, [r7, #4]
   11d42:	64ba      	str	r2, [r7, #72]	; 0x48
   11d44:	4619      	mov	r1, r3
   11d46:	f363 0100 	bfi	r1, r3, #0, #1
   11d4a:	f363 0141 	bfi	r1, r3, #1, #1
   11d4e:	f363 0182 	bfi	r1, r3, #2, #1
   11d52:	f363 01c5 	bfi	r1, r3, #3, #3
   11d56:	2203      	movs	r2, #3
   11d58:	f362 1188 	bfi	r1, r2, #6, #3
   11d5c:	2208      	movs	r2, #8
   11d5e:	f362 2152 	bfi	r1, r2, #9, #10
   11d62:	f363 41de 	bfi	r1, r3, #19, #12
   11d66:	f363 71df 	bfi	r1, r3, #31, #1
   11d6a:	f107 0248 	add.w	r2, r7, #72	; 0x48
   11d6e:	4804      	ldr	r0, [pc, #16]	; (11d80 <main+0x280>)
   11d70:	f013 fd1f 	bl	257b2 <z_impl_z_log_msg_static_create>
   11d74:	e7bb      	b.n	11cee <main+0x1ee>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   11d76:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   11d7a:	e7c7      	b.n	11d0c <main+0x20c>
   11d7c:	0002b6a4 	.word	0x0002b6a4
   11d80:	0002b22c 	.word	0x0002b22c
   11d84:	0002b2f0 	.word	0x0002b2f0
   11d88:	0002b6c0 	.word	0x0002b6c0
   11d8c:	0002b6d4 	.word	0x0002b6d4
   11d90:	0002b718 	.word	0x0002b718
   11d94:	0002b6f4 	.word	0x0002b6f4
   11d98:	20005610 	.word	0x20005610
   11d9c:	0002b750 	.word	0x0002b750
   11da0:	0002b738 	.word	0x0002b738
   11da4:	f06f 0c1b 	mvn.w	ip, #27
   11da8:	b13a      	cbz	r2, 11dba <main+0x2ba>
   11daa:	2103      	movs	r1, #3
   11dac:	7139      	strb	r1, [r7, #4]
   11dae:	2100      	movs	r1, #0
   11db0:	7179      	strb	r1, [r7, #5]
   11db2:	71b9      	strb	r1, [r7, #6]
   11db4:	71f9      	strb	r1, [r7, #7]
   11db6:	6878      	ldr	r0, [r7, #4]
   11db8:	6118      	str	r0, [r3, #16]
   11dba:	2100      	movs	r1, #0
   11dbc:	f36f 0100 	bfc	r1, #0, #1
   11dc0:	f36f 0141 	bfc	r1, #1, #1
   11dc4:	f36f 0182 	bfc	r1, #2, #1
   11dc8:	f36f 01c5 	bfc	r1, #3, #3
   11dcc:	2302      	movs	r3, #2
   11dce:	f363 1188 	bfi	r1, r3, #6, #3
   11dd2:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   11dd6:	f363 2152 	bfi	r1, r3, #9, #10
   11dda:	f36f 41de 	bfc	r1, #19, #12
   11dde:	f36f 71df 	bfc	r1, #31, #1
   11de2:	2300      	movs	r3, #0
   11de4:	48a1      	ldr	r0, [pc, #644]	; (1206c <main+0x56c>)
   11de6:	f013 fce4 	bl	257b2 <z_impl_z_log_msg_static_create>
   11dea:	46a5      	mov	sp, r4
	err = bt_addr_le_from_str(TTPMS_IFR_BT_ID, "random", &IFR_bt_addr);
   11dec:	4aa0      	ldr	r2, [pc, #640]	; (12070 <main+0x570>)
   11dee:	49a1      	ldr	r1, [pc, #644]	; (12074 <main+0x574>)
   11df0:	48a1      	ldr	r0, [pc, #644]	; (12078 <main+0x578>)
   11df2:	f004 fa39 	bl	16268 <bt_addr_le_from_str>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   11df6:	4606      	mov	r6, r0
   11df8:	2800      	cmp	r0, #0
   11dfa:	d03e      	beq.n	11e7a <main+0x37a>
   11dfc:	466c      	mov	r4, sp
   11dfe:	b088      	sub	sp, #32
   11e00:	466b      	mov	r3, sp
   11e02:	f113 0210 	adds.w	r2, r3, #16
   11e06:	d011      	beq.n	11e2c <main+0x32c>
   11e08:	210c      	movs	r1, #12
   11e0a:	b13a      	cbz	r2, 11e1c <main+0x31c>
   11e0c:	4608      	mov	r0, r1
   11e0e:	2904      	cmp	r1, #4
   11e10:	dd01      	ble.n	11e16 <main+0x316>
   11e12:	4d9a      	ldr	r5, [pc, #616]	; (1207c <main+0x57c>)
   11e14:	615d      	str	r5, [r3, #20]
   11e16:	2808      	cmp	r0, #8
   11e18:	dd0b      	ble.n	11e32 <main+0x332>
   11e1a:	619e      	str	r6, [r3, #24]
   11e1c:	290b      	cmp	r1, #11
   11e1e:	dd49      	ble.n	11eb4 <main+0x3b4>
   11e20:	f04f 0c0c 	mov.w	ip, #12
   11e24:	e007      	b.n	11e36 <main+0x336>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   11e26:	f06f 0c1b 	mvn.w	ip, #27
   11e2a:	e7bd      	b.n	11da8 <main+0x2a8>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   11e2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   11e30:	e7eb      	b.n	11e0a <main+0x30a>
   11e32:	f06f 0c1b 	mvn.w	ip, #27
   11e36:	b13a      	cbz	r2, 11e48 <main+0x348>
   11e38:	2103      	movs	r1, #3
   11e3a:	7139      	strb	r1, [r7, #4]
   11e3c:	2100      	movs	r1, #0
   11e3e:	7179      	strb	r1, [r7, #5]
   11e40:	71b9      	strb	r1, [r7, #6]
   11e42:	71f9      	strb	r1, [r7, #7]
   11e44:	6878      	ldr	r0, [r7, #4]
   11e46:	6118      	str	r0, [r3, #16]
   11e48:	2100      	movs	r1, #0
   11e4a:	f36f 0100 	bfc	r1, #0, #1
   11e4e:	f36f 0141 	bfc	r1, #1, #1
   11e52:	f36f 0182 	bfc	r1, #2, #1
   11e56:	f36f 01c5 	bfc	r1, #3, #3
   11e5a:	2302      	movs	r3, #2
   11e5c:	f363 1188 	bfi	r1, r3, #6, #3
   11e60:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   11e64:	f363 2152 	bfi	r1, r3, #9, #10
   11e68:	f36f 41de 	bfc	r1, #19, #12
   11e6c:	f36f 71df 	bfc	r1, #31, #1
   11e70:	2300      	movs	r3, #0
   11e72:	487e      	ldr	r0, [pc, #504]	; (1206c <main+0x56c>)
   11e74:	f013 fc9d 	bl	257b2 <z_impl_z_log_msg_static_create>
   11e78:	46a5      	mov	sp, r4
	err = bt_addr_le_from_str(TTPMS_IRL_BT_ID, "random", &IRL_bt_addr);
   11e7a:	4a81      	ldr	r2, [pc, #516]	; (12080 <main+0x580>)
   11e7c:	497d      	ldr	r1, [pc, #500]	; (12074 <main+0x574>)
   11e7e:	4881      	ldr	r0, [pc, #516]	; (12084 <main+0x584>)
   11e80:	f004 f9f2 	bl	16268 <bt_addr_le_from_str>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   11e84:	4606      	mov	r6, r0
   11e86:	2800      	cmp	r0, #0
   11e88:	d03e      	beq.n	11f08 <main+0x408>
   11e8a:	466c      	mov	r4, sp
   11e8c:	b088      	sub	sp, #32
   11e8e:	466b      	mov	r3, sp
   11e90:	f113 0210 	adds.w	r2, r3, #16
   11e94:	d011      	beq.n	11eba <main+0x3ba>
   11e96:	210c      	movs	r1, #12
   11e98:	b13a      	cbz	r2, 11eaa <main+0x3aa>
   11e9a:	4608      	mov	r0, r1
   11e9c:	2904      	cmp	r1, #4
   11e9e:	dd01      	ble.n	11ea4 <main+0x3a4>
   11ea0:	4d76      	ldr	r5, [pc, #472]	; (1207c <main+0x57c>)
   11ea2:	615d      	str	r5, [r3, #20]
   11ea4:	2808      	cmp	r0, #8
   11ea6:	dd0b      	ble.n	11ec0 <main+0x3c0>
   11ea8:	619e      	str	r6, [r3, #24]
   11eaa:	290b      	cmp	r1, #11
   11eac:	dd49      	ble.n	11f42 <main+0x442>
   11eae:	f04f 0c0c 	mov.w	ip, #12
   11eb2:	e007      	b.n	11ec4 <main+0x3c4>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   11eb4:	f06f 0c1b 	mvn.w	ip, #27
   11eb8:	e7bd      	b.n	11e36 <main+0x336>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   11eba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   11ebe:	e7eb      	b.n	11e98 <main+0x398>
   11ec0:	f06f 0c1b 	mvn.w	ip, #27
   11ec4:	b13a      	cbz	r2, 11ed6 <main+0x3d6>
   11ec6:	2103      	movs	r1, #3
   11ec8:	7139      	strb	r1, [r7, #4]
   11eca:	2100      	movs	r1, #0
   11ecc:	7179      	strb	r1, [r7, #5]
   11ece:	71b9      	strb	r1, [r7, #6]
   11ed0:	71f9      	strb	r1, [r7, #7]
   11ed2:	6878      	ldr	r0, [r7, #4]
   11ed4:	6118      	str	r0, [r3, #16]
   11ed6:	2100      	movs	r1, #0
   11ed8:	f36f 0100 	bfc	r1, #0, #1
   11edc:	f36f 0141 	bfc	r1, #1, #1
   11ee0:	f36f 0182 	bfc	r1, #2, #1
   11ee4:	f36f 01c5 	bfc	r1, #3, #3
   11ee8:	2302      	movs	r3, #2
   11eea:	f363 1188 	bfi	r1, r3, #6, #3
   11eee:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   11ef2:	f363 2152 	bfi	r1, r3, #9, #10
   11ef6:	f36f 41de 	bfc	r1, #19, #12
   11efa:	f36f 71df 	bfc	r1, #31, #1
   11efe:	2300      	movs	r3, #0
   11f00:	485a      	ldr	r0, [pc, #360]	; (1206c <main+0x56c>)
   11f02:	f013 fc56 	bl	257b2 <z_impl_z_log_msg_static_create>
   11f06:	46a5      	mov	sp, r4
	err = bt_addr_le_from_str(TTPMS_IRR_BT_ID, "random", &IRR_bt_addr);
   11f08:	4a5f      	ldr	r2, [pc, #380]	; (12088 <main+0x588>)
   11f0a:	495a      	ldr	r1, [pc, #360]	; (12074 <main+0x574>)
   11f0c:	485f      	ldr	r0, [pc, #380]	; (1208c <main+0x58c>)
   11f0e:	f004 f9ab 	bl	16268 <bt_addr_le_from_str>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   11f12:	4606      	mov	r6, r0
   11f14:	2800      	cmp	r0, #0
   11f16:	d03e      	beq.n	11f96 <main+0x496>
   11f18:	466c      	mov	r4, sp
   11f1a:	b088      	sub	sp, #32
   11f1c:	466b      	mov	r3, sp
   11f1e:	f113 0210 	adds.w	r2, r3, #16
   11f22:	d011      	beq.n	11f48 <main+0x448>
   11f24:	210c      	movs	r1, #12
   11f26:	b13a      	cbz	r2, 11f38 <main+0x438>
   11f28:	4608      	mov	r0, r1
   11f2a:	2904      	cmp	r1, #4
   11f2c:	dd01      	ble.n	11f32 <main+0x432>
   11f2e:	4d53      	ldr	r5, [pc, #332]	; (1207c <main+0x57c>)
   11f30:	615d      	str	r5, [r3, #20]
   11f32:	2808      	cmp	r0, #8
   11f34:	dd0b      	ble.n	11f4e <main+0x44e>
   11f36:	619e      	str	r6, [r3, #24]
   11f38:	290b      	cmp	r1, #11
   11f3a:	dd49      	ble.n	11fd0 <main+0x4d0>
   11f3c:	f04f 0c0c 	mov.w	ip, #12
   11f40:	e007      	b.n	11f52 <main+0x452>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   11f42:	f06f 0c1b 	mvn.w	ip, #27
   11f46:	e7bd      	b.n	11ec4 <main+0x3c4>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   11f48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   11f4c:	e7eb      	b.n	11f26 <main+0x426>
   11f4e:	f06f 0c1b 	mvn.w	ip, #27
   11f52:	b13a      	cbz	r2, 11f64 <main+0x464>
   11f54:	2103      	movs	r1, #3
   11f56:	7139      	strb	r1, [r7, #4]
   11f58:	2100      	movs	r1, #0
   11f5a:	7179      	strb	r1, [r7, #5]
   11f5c:	71b9      	strb	r1, [r7, #6]
   11f5e:	71f9      	strb	r1, [r7, #7]
   11f60:	6878      	ldr	r0, [r7, #4]
   11f62:	6118      	str	r0, [r3, #16]
   11f64:	2100      	movs	r1, #0
   11f66:	f36f 0100 	bfc	r1, #0, #1
   11f6a:	f36f 0141 	bfc	r1, #1, #1
   11f6e:	f36f 0182 	bfc	r1, #2, #1
   11f72:	f36f 01c5 	bfc	r1, #3, #3
   11f76:	2302      	movs	r3, #2
   11f78:	f363 1188 	bfi	r1, r3, #6, #3
   11f7c:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   11f80:	f363 2152 	bfi	r1, r3, #9, #10
   11f84:	f36f 41de 	bfc	r1, #19, #12
   11f88:	f36f 71df 	bfc	r1, #31, #1
   11f8c:	2300      	movs	r3, #0
   11f8e:	4837      	ldr	r0, [pc, #220]	; (1206c <main+0x56c>)
   11f90:	f013 fc0f 	bl	257b2 <z_impl_z_log_msg_static_create>
   11f94:	46a5      	mov	sp, r4
	err = bt_addr_le_from_str(TTPMS_EFL_BT_ID, "random", &EFL_bt_addr);
   11f96:	4a3e      	ldr	r2, [pc, #248]	; (12090 <main+0x590>)
   11f98:	4936      	ldr	r1, [pc, #216]	; (12074 <main+0x574>)
   11f9a:	483e      	ldr	r0, [pc, #248]	; (12094 <main+0x594>)
   11f9c:	f004 f964 	bl	16268 <bt_addr_le_from_str>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   11fa0:	4606      	mov	r6, r0
   11fa2:	2800      	cmp	r0, #0
   11fa4:	d03e      	beq.n	12024 <main+0x524>
   11fa6:	466c      	mov	r4, sp
   11fa8:	b088      	sub	sp, #32
   11faa:	466b      	mov	r3, sp
   11fac:	f113 0210 	adds.w	r2, r3, #16
   11fb0:	d011      	beq.n	11fd6 <main+0x4d6>
   11fb2:	210c      	movs	r1, #12
   11fb4:	b13a      	cbz	r2, 11fc6 <main+0x4c6>
   11fb6:	4608      	mov	r0, r1
   11fb8:	2904      	cmp	r1, #4
   11fba:	dd01      	ble.n	11fc0 <main+0x4c0>
   11fbc:	4d2f      	ldr	r5, [pc, #188]	; (1207c <main+0x57c>)
   11fbe:	615d      	str	r5, [r3, #20]
   11fc0:	2808      	cmp	r0, #8
   11fc2:	dd0b      	ble.n	11fdc <main+0x4dc>
   11fc4:	619e      	str	r6, [r3, #24]
   11fc6:	290b      	cmp	r1, #11
   11fc8:	dd49      	ble.n	1205e <main+0x55e>
   11fca:	f04f 0c0c 	mov.w	ip, #12
   11fce:	e007      	b.n	11fe0 <main+0x4e0>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   11fd0:	f06f 0c1b 	mvn.w	ip, #27
   11fd4:	e7bd      	b.n	11f52 <main+0x452>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   11fd6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   11fda:	e7eb      	b.n	11fb4 <main+0x4b4>
   11fdc:	f06f 0c1b 	mvn.w	ip, #27
   11fe0:	b13a      	cbz	r2, 11ff2 <main+0x4f2>
   11fe2:	2103      	movs	r1, #3
   11fe4:	7139      	strb	r1, [r7, #4]
   11fe6:	2100      	movs	r1, #0
   11fe8:	7179      	strb	r1, [r7, #5]
   11fea:	71b9      	strb	r1, [r7, #6]
   11fec:	71f9      	strb	r1, [r7, #7]
   11fee:	6878      	ldr	r0, [r7, #4]
   11ff0:	6118      	str	r0, [r3, #16]
   11ff2:	2100      	movs	r1, #0
   11ff4:	f36f 0100 	bfc	r1, #0, #1
   11ff8:	f36f 0141 	bfc	r1, #1, #1
   11ffc:	f36f 0182 	bfc	r1, #2, #1
   12000:	f36f 01c5 	bfc	r1, #3, #3
   12004:	2302      	movs	r3, #2
   12006:	f363 1188 	bfi	r1, r3, #6, #3
   1200a:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   1200e:	f363 2152 	bfi	r1, r3, #9, #10
   12012:	f36f 41de 	bfc	r1, #19, #12
   12016:	f36f 71df 	bfc	r1, #31, #1
   1201a:	2300      	movs	r3, #0
   1201c:	4813      	ldr	r0, [pc, #76]	; (1206c <main+0x56c>)
   1201e:	f013 fbc8 	bl	257b2 <z_impl_z_log_msg_static_create>
   12022:	46a5      	mov	sp, r4
	err = bt_addr_le_from_str(TTPMS_EFR_BT_ID, "random", &EFR_bt_addr);
   12024:	4a1c      	ldr	r2, [pc, #112]	; (12098 <main+0x598>)
   12026:	4913      	ldr	r1, [pc, #76]	; (12074 <main+0x574>)
   12028:	481c      	ldr	r0, [pc, #112]	; (1209c <main+0x59c>)
   1202a:	f004 f91d 	bl	16268 <bt_addr_le_from_str>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   1202e:	4606      	mov	r6, r0
   12030:	2800      	cmp	r0, #0
   12032:	d059      	beq.n	120e8 <main+0x5e8>
   12034:	466c      	mov	r4, sp
   12036:	b088      	sub	sp, #32
   12038:	466b      	mov	r3, sp
   1203a:	f113 0210 	adds.w	r2, r3, #16
   1203e:	d011      	beq.n	12064 <main+0x564>
   12040:	210c      	movs	r1, #12
   12042:	b13a      	cbz	r2, 12054 <main+0x554>
   12044:	4608      	mov	r0, r1
   12046:	2904      	cmp	r1, #4
   12048:	dd01      	ble.n	1204e <main+0x54e>
   1204a:	4d0c      	ldr	r5, [pc, #48]	; (1207c <main+0x57c>)
   1204c:	615d      	str	r5, [r3, #20]
   1204e:	2808      	cmp	r0, #8
   12050:	dd26      	ble.n	120a0 <main+0x5a0>
   12052:	619e      	str	r6, [r3, #24]
   12054:	290b      	cmp	r1, #11
   12056:	dd64      	ble.n	12122 <main+0x622>
   12058:	f04f 0c0c 	mov.w	ip, #12
   1205c:	e022      	b.n	120a4 <main+0x5a4>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   1205e:	f06f 0c1b 	mvn.w	ip, #27
   12062:	e7bd      	b.n	11fe0 <main+0x4e0>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   12064:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12068:	e7eb      	b.n	12042 <main+0x542>
   1206a:	bf00      	nop
   1206c:	0002b22c 	.word	0x0002b22c
   12070:	20005608 	.word	0x20005608
   12074:	0002b2f0 	.word	0x0002b2f0
   12078:	0002b764 	.word	0x0002b764
   1207c:	0002b6d4 	.word	0x0002b6d4
   12080:	20005600 	.word	0x20005600
   12084:	0002b778 	.word	0x0002b778
   12088:	200055f8 	.word	0x200055f8
   1208c:	0002b78c 	.word	0x0002b78c
   12090:	200055f0 	.word	0x200055f0
   12094:	0002b7a0 	.word	0x0002b7a0
   12098:	200055e8 	.word	0x200055e8
   1209c:	0002b7b4 	.word	0x0002b7b4
   120a0:	f06f 0c1b 	mvn.w	ip, #27
   120a4:	b13a      	cbz	r2, 120b6 <main+0x5b6>
   120a6:	2103      	movs	r1, #3
   120a8:	7139      	strb	r1, [r7, #4]
   120aa:	2100      	movs	r1, #0
   120ac:	7179      	strb	r1, [r7, #5]
   120ae:	71b9      	strb	r1, [r7, #6]
   120b0:	71f9      	strb	r1, [r7, #7]
   120b2:	6878      	ldr	r0, [r7, #4]
   120b4:	6118      	str	r0, [r3, #16]
   120b6:	2100      	movs	r1, #0
   120b8:	f36f 0100 	bfc	r1, #0, #1
   120bc:	f36f 0141 	bfc	r1, #1, #1
   120c0:	f36f 0182 	bfc	r1, #2, #1
   120c4:	f36f 01c5 	bfc	r1, #3, #3
   120c8:	2302      	movs	r3, #2
   120ca:	f363 1188 	bfi	r1, r3, #6, #3
   120ce:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   120d2:	f363 2152 	bfi	r1, r3, #9, #10
   120d6:	f36f 41de 	bfc	r1, #19, #12
   120da:	f36f 71df 	bfc	r1, #31, #1
   120de:	2300      	movs	r3, #0
   120e0:	489f      	ldr	r0, [pc, #636]	; (12360 <main+0x860>)
   120e2:	f013 fb66 	bl	257b2 <z_impl_z_log_msg_static_create>
   120e6:	46a5      	mov	sp, r4
	err = bt_addr_le_from_str(TTPMS_ERL_BT_ID, "random", &ERL_bt_addr);
   120e8:	4a9e      	ldr	r2, [pc, #632]	; (12364 <main+0x864>)
   120ea:	499f      	ldr	r1, [pc, #636]	; (12368 <main+0x868>)
   120ec:	489f      	ldr	r0, [pc, #636]	; (1236c <main+0x86c>)
   120ee:	f004 f8bb 	bl	16268 <bt_addr_le_from_str>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   120f2:	4606      	mov	r6, r0
   120f4:	2800      	cmp	r0, #0
   120f6:	d03e      	beq.n	12176 <main+0x676>
   120f8:	466c      	mov	r4, sp
   120fa:	b088      	sub	sp, #32
   120fc:	466b      	mov	r3, sp
   120fe:	f113 0210 	adds.w	r2, r3, #16
   12102:	d011      	beq.n	12128 <main+0x628>
   12104:	210c      	movs	r1, #12
   12106:	b13a      	cbz	r2, 12118 <main+0x618>
   12108:	4608      	mov	r0, r1
   1210a:	2904      	cmp	r1, #4
   1210c:	dd01      	ble.n	12112 <main+0x612>
   1210e:	4d98      	ldr	r5, [pc, #608]	; (12370 <main+0x870>)
   12110:	615d      	str	r5, [r3, #20]
   12112:	2808      	cmp	r0, #8
   12114:	dd0b      	ble.n	1212e <main+0x62e>
   12116:	619e      	str	r6, [r3, #24]
   12118:	290b      	cmp	r1, #11
   1211a:	dd49      	ble.n	121b0 <main+0x6b0>
   1211c:	f04f 0c0c 	mov.w	ip, #12
   12120:	e007      	b.n	12132 <main+0x632>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   12122:	f06f 0c1b 	mvn.w	ip, #27
   12126:	e7bd      	b.n	120a4 <main+0x5a4>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   12128:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1212c:	e7eb      	b.n	12106 <main+0x606>
   1212e:	f06f 0c1b 	mvn.w	ip, #27
   12132:	b13a      	cbz	r2, 12144 <main+0x644>
   12134:	2103      	movs	r1, #3
   12136:	7139      	strb	r1, [r7, #4]
   12138:	2100      	movs	r1, #0
   1213a:	7179      	strb	r1, [r7, #5]
   1213c:	71b9      	strb	r1, [r7, #6]
   1213e:	71f9      	strb	r1, [r7, #7]
   12140:	6878      	ldr	r0, [r7, #4]
   12142:	6118      	str	r0, [r3, #16]
   12144:	2100      	movs	r1, #0
   12146:	f36f 0100 	bfc	r1, #0, #1
   1214a:	f36f 0141 	bfc	r1, #1, #1
   1214e:	f36f 0182 	bfc	r1, #2, #1
   12152:	f36f 01c5 	bfc	r1, #3, #3
   12156:	2302      	movs	r3, #2
   12158:	f363 1188 	bfi	r1, r3, #6, #3
   1215c:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   12160:	f363 2152 	bfi	r1, r3, #9, #10
   12164:	f36f 41de 	bfc	r1, #19, #12
   12168:	f36f 71df 	bfc	r1, #31, #1
   1216c:	2300      	movs	r3, #0
   1216e:	487c      	ldr	r0, [pc, #496]	; (12360 <main+0x860>)
   12170:	f013 fb1f 	bl	257b2 <z_impl_z_log_msg_static_create>
   12174:	46a5      	mov	sp, r4
	err = bt_addr_le_from_str(TTPMS_ERR_BT_ID, "random", &ERR_bt_addr);
   12176:	4a7f      	ldr	r2, [pc, #508]	; (12374 <main+0x874>)
   12178:	497b      	ldr	r1, [pc, #492]	; (12368 <main+0x868>)
   1217a:	487f      	ldr	r0, [pc, #508]	; (12378 <main+0x878>)
   1217c:	f004 f874 	bl	16268 <bt_addr_le_from_str>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   12180:	4606      	mov	r6, r0
   12182:	2800      	cmp	r0, #0
   12184:	d03e      	beq.n	12204 <main+0x704>
   12186:	466c      	mov	r4, sp
   12188:	b088      	sub	sp, #32
   1218a:	466b      	mov	r3, sp
   1218c:	f113 0210 	adds.w	r2, r3, #16
   12190:	d011      	beq.n	121b6 <main+0x6b6>
   12192:	210c      	movs	r1, #12
   12194:	b13a      	cbz	r2, 121a6 <main+0x6a6>
   12196:	4608      	mov	r0, r1
   12198:	2904      	cmp	r1, #4
   1219a:	dd01      	ble.n	121a0 <main+0x6a0>
   1219c:	4d74      	ldr	r5, [pc, #464]	; (12370 <main+0x870>)
   1219e:	615d      	str	r5, [r3, #20]
   121a0:	2808      	cmp	r0, #8
   121a2:	dd0b      	ble.n	121bc <main+0x6bc>
   121a4:	619e      	str	r6, [r3, #24]
   121a6:	290b      	cmp	r1, #11
   121a8:	dd49      	ble.n	1223e <main+0x73e>
   121aa:	f04f 0c0c 	mov.w	ip, #12
   121ae:	e007      	b.n	121c0 <main+0x6c0>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   121b0:	f06f 0c1b 	mvn.w	ip, #27
   121b4:	e7bd      	b.n	12132 <main+0x632>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   121b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   121ba:	e7eb      	b.n	12194 <main+0x694>
   121bc:	f06f 0c1b 	mvn.w	ip, #27
   121c0:	b13a      	cbz	r2, 121d2 <main+0x6d2>
   121c2:	2103      	movs	r1, #3
   121c4:	7139      	strb	r1, [r7, #4]
   121c6:	2100      	movs	r1, #0
   121c8:	7179      	strb	r1, [r7, #5]
   121ca:	71b9      	strb	r1, [r7, #6]
   121cc:	71f9      	strb	r1, [r7, #7]
   121ce:	6878      	ldr	r0, [r7, #4]
   121d0:	6118      	str	r0, [r3, #16]
   121d2:	2100      	movs	r1, #0
   121d4:	f36f 0100 	bfc	r1, #0, #1
   121d8:	f36f 0141 	bfc	r1, #1, #1
   121dc:	f36f 0182 	bfc	r1, #2, #1
   121e0:	f36f 01c5 	bfc	r1, #3, #3
   121e4:	2302      	movs	r3, #2
   121e6:	f363 1188 	bfi	r1, r3, #6, #3
   121ea:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   121ee:	f363 2152 	bfi	r1, r3, #9, #10
   121f2:	f36f 41de 	bfc	r1, #19, #12
   121f6:	f36f 71df 	bfc	r1, #31, #1
   121fa:	2300      	movs	r3, #0
   121fc:	4858      	ldr	r0, [pc, #352]	; (12360 <main+0x860>)
   121fe:	f013 fad8 	bl	257b2 <z_impl_z_log_msg_static_create>
   12202:	46a5      	mov	sp, r4

	err = bt_addr_le_from_str(TTPMS_TEST_BT_ID, "random", &TEST_bt_addr);
   12204:	4a5d      	ldr	r2, [pc, #372]	; (1237c <main+0x87c>)
   12206:	4958      	ldr	r1, [pc, #352]	; (12368 <main+0x868>)
   12208:	485d      	ldr	r0, [pc, #372]	; (12380 <main+0x880>)
   1220a:	f004 f82d 	bl	16268 <bt_addr_le_from_str>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   1220e:	4606      	mov	r6, r0
   12210:	2800      	cmp	r0, #0
   12212:	d03e      	beq.n	12292 <main+0x792>
   12214:	466c      	mov	r4, sp
   12216:	b088      	sub	sp, #32
   12218:	466b      	mov	r3, sp
   1221a:	f113 0210 	adds.w	r2, r3, #16
   1221e:	d011      	beq.n	12244 <main+0x744>
   12220:	210c      	movs	r1, #12
   12222:	b13a      	cbz	r2, 12234 <main+0x734>
   12224:	4608      	mov	r0, r1
   12226:	2904      	cmp	r1, #4
   12228:	dd01      	ble.n	1222e <main+0x72e>
   1222a:	4d51      	ldr	r5, [pc, #324]	; (12370 <main+0x870>)
   1222c:	615d      	str	r5, [r3, #20]
   1222e:	2808      	cmp	r0, #8
   12230:	dd0b      	ble.n	1224a <main+0x74a>
   12232:	619e      	str	r6, [r3, #24]
   12234:	290b      	cmp	r1, #11
   12236:	dd47      	ble.n	122c8 <main+0x7c8>
   12238:	f04f 0c0c 	mov.w	ip, #12
   1223c:	e007      	b.n	1224e <main+0x74e>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   1223e:	f06f 0c1b 	mvn.w	ip, #27
   12242:	e7bd      	b.n	121c0 <main+0x6c0>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   12244:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12248:	e7eb      	b.n	12222 <main+0x722>
   1224a:	f06f 0c1b 	mvn.w	ip, #27
   1224e:	b13a      	cbz	r2, 12260 <main+0x760>
   12250:	2103      	movs	r1, #3
   12252:	7139      	strb	r1, [r7, #4]
   12254:	2100      	movs	r1, #0
   12256:	7179      	strb	r1, [r7, #5]
   12258:	71b9      	strb	r1, [r7, #6]
   1225a:	71f9      	strb	r1, [r7, #7]
   1225c:	6878      	ldr	r0, [r7, #4]
   1225e:	6118      	str	r0, [r3, #16]
   12260:	2100      	movs	r1, #0
   12262:	f36f 0100 	bfc	r1, #0, #1
   12266:	f36f 0141 	bfc	r1, #1, #1
   1226a:	f36f 0182 	bfc	r1, #2, #1
   1226e:	f36f 01c5 	bfc	r1, #3, #3
   12272:	2302      	movs	r3, #2
   12274:	f363 1188 	bfi	r1, r3, #6, #3
   12278:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   1227c:	f363 2152 	bfi	r1, r3, #9, #10
   12280:	f36f 41de 	bfc	r1, #19, #12
   12284:	f36f 71df 	bfc	r1, #31, #1
   12288:	2300      	movs	r3, #0
   1228a:	4835      	ldr	r0, [pc, #212]	; (12360 <main+0x860>)
   1228c:	f013 fa91 	bl	257b2 <z_impl_z_log_msg_static_create>
   12290:	46a5      	mov	sp, r4

	// Add address of the devices we want to filter accept list
	err = bt_le_filter_accept_list_add(&IFL_bt_addr);
   12292:	483c      	ldr	r0, [pc, #240]	; (12384 <main+0x884>)
   12294:	f006 fcaa 	bl	18bec <bt_le_filter_accept_list_add>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   12298:	4606      	mov	r6, r0
   1229a:	2800      	cmp	r0, #0
   1229c:	d03e      	beq.n	1231c <main+0x81c>
   1229e:	466c      	mov	r4, sp
   122a0:	b088      	sub	sp, #32
   122a2:	466b      	mov	r3, sp
   122a4:	f113 0210 	adds.w	r2, r3, #16
   122a8:	d011      	beq.n	122ce <main+0x7ce>
   122aa:	210c      	movs	r1, #12
   122ac:	b13a      	cbz	r2, 122be <main+0x7be>
   122ae:	4608      	mov	r0, r1
   122b0:	2904      	cmp	r1, #4
   122b2:	dd01      	ble.n	122b8 <main+0x7b8>
   122b4:	4d34      	ldr	r5, [pc, #208]	; (12388 <main+0x888>)
   122b6:	615d      	str	r5, [r3, #20]
   122b8:	2808      	cmp	r0, #8
   122ba:	dd0b      	ble.n	122d4 <main+0x7d4>
   122bc:	619e      	str	r6, [r3, #24]
   122be:	290b      	cmp	r1, #11
   122c0:	dd47      	ble.n	12352 <main+0x852>
   122c2:	f04f 0c0c 	mov.w	ip, #12
   122c6:	e007      	b.n	122d8 <main+0x7d8>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   122c8:	f06f 0c1b 	mvn.w	ip, #27
   122cc:	e7bf      	b.n	1224e <main+0x74e>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   122ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   122d2:	e7eb      	b.n	122ac <main+0x7ac>
   122d4:	f06f 0c1b 	mvn.w	ip, #27
   122d8:	b13a      	cbz	r2, 122ea <main+0x7ea>
   122da:	2103      	movs	r1, #3
   122dc:	7139      	strb	r1, [r7, #4]
   122de:	2100      	movs	r1, #0
   122e0:	7179      	strb	r1, [r7, #5]
   122e2:	71b9      	strb	r1, [r7, #6]
   122e4:	71f9      	strb	r1, [r7, #7]
   122e6:	6878      	ldr	r0, [r7, #4]
   122e8:	6118      	str	r0, [r3, #16]
   122ea:	2100      	movs	r1, #0
   122ec:	f36f 0100 	bfc	r1, #0, #1
   122f0:	f36f 0141 	bfc	r1, #1, #1
   122f4:	f36f 0182 	bfc	r1, #2, #1
   122f8:	f36f 01c5 	bfc	r1, #3, #3
   122fc:	2302      	movs	r3, #2
   122fe:	f363 1188 	bfi	r1, r3, #6, #3
   12302:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   12306:	f363 2152 	bfi	r1, r3, #9, #10
   1230a:	f36f 41de 	bfc	r1, #19, #12
   1230e:	f36f 71df 	bfc	r1, #31, #1
   12312:	2300      	movs	r3, #0
   12314:	4812      	ldr	r0, [pc, #72]	; (12360 <main+0x860>)
   12316:	f013 fa4c 	bl	257b2 <z_impl_z_log_msg_static_create>
   1231a:	46a5      	mov	sp, r4
	err = bt_le_filter_accept_list_add(&IFR_bt_addr);
   1231c:	481b      	ldr	r0, [pc, #108]	; (1238c <main+0x88c>)
   1231e:	f006 fc65 	bl	18bec <bt_le_filter_accept_list_add>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   12322:	4606      	mov	r6, r0
   12324:	2800      	cmp	r0, #0
   12326:	d057      	beq.n	123d8 <main+0x8d8>
   12328:	466c      	mov	r4, sp
   1232a:	b088      	sub	sp, #32
   1232c:	466b      	mov	r3, sp
   1232e:	f113 0210 	adds.w	r2, r3, #16
   12332:	d011      	beq.n	12358 <main+0x858>
   12334:	210c      	movs	r1, #12
   12336:	b13a      	cbz	r2, 12348 <main+0x848>
   12338:	4608      	mov	r0, r1
   1233a:	2904      	cmp	r1, #4
   1233c:	dd01      	ble.n	12342 <main+0x842>
   1233e:	4d12      	ldr	r5, [pc, #72]	; (12388 <main+0x888>)
   12340:	615d      	str	r5, [r3, #20]
   12342:	2808      	cmp	r0, #8
   12344:	dd24      	ble.n	12390 <main+0x890>
   12346:	619e      	str	r6, [r3, #24]
   12348:	290b      	cmp	r1, #11
   1234a:	dd60      	ble.n	1240e <main+0x90e>
   1234c:	f04f 0c0c 	mov.w	ip, #12
   12350:	e020      	b.n	12394 <main+0x894>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   12352:	f06f 0c1b 	mvn.w	ip, #27
   12356:	e7bf      	b.n	122d8 <main+0x7d8>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   12358:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1235c:	e7eb      	b.n	12336 <main+0x836>
   1235e:	bf00      	nop
   12360:	0002b22c 	.word	0x0002b22c
   12364:	200055e0 	.word	0x200055e0
   12368:	0002b2f0 	.word	0x0002b2f0
   1236c:	0002b7c8 	.word	0x0002b7c8
   12370:	0002b6d4 	.word	0x0002b6d4
   12374:	200055d8 	.word	0x200055d8
   12378:	0002b7dc 	.word	0x0002b7dc
   1237c:	200055d0 	.word	0x200055d0
   12380:	0002b7f0 	.word	0x0002b7f0
   12384:	20005610 	.word	0x20005610
   12388:	0002b804 	.word	0x0002b804
   1238c:	20005608 	.word	0x20005608
   12390:	f06f 0c1b 	mvn.w	ip, #27
   12394:	b13a      	cbz	r2, 123a6 <main+0x8a6>
   12396:	2103      	movs	r1, #3
   12398:	7139      	strb	r1, [r7, #4]
   1239a:	2100      	movs	r1, #0
   1239c:	7179      	strb	r1, [r7, #5]
   1239e:	71b9      	strb	r1, [r7, #6]
   123a0:	71f9      	strb	r1, [r7, #7]
   123a2:	6878      	ldr	r0, [r7, #4]
   123a4:	6118      	str	r0, [r3, #16]
   123a6:	2100      	movs	r1, #0
   123a8:	f36f 0100 	bfc	r1, #0, #1
   123ac:	f36f 0141 	bfc	r1, #1, #1
   123b0:	f36f 0182 	bfc	r1, #2, #1
   123b4:	f36f 01c5 	bfc	r1, #3, #3
   123b8:	2302      	movs	r3, #2
   123ba:	f363 1188 	bfi	r1, r3, #6, #3
   123be:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   123c2:	f363 2152 	bfi	r1, r3, #9, #10
   123c6:	f36f 41de 	bfc	r1, #19, #12
   123ca:	f36f 71df 	bfc	r1, #31, #1
   123ce:	2300      	movs	r3, #0
   123d0:	489c      	ldr	r0, [pc, #624]	; (12644 <main+0xb44>)
   123d2:	f013 f9ee 	bl	257b2 <z_impl_z_log_msg_static_create>
   123d6:	46a5      	mov	sp, r4
	err = bt_le_filter_accept_list_add(&IRL_bt_addr);
   123d8:	489b      	ldr	r0, [pc, #620]	; (12648 <main+0xb48>)
   123da:	f006 fc07 	bl	18bec <bt_le_filter_accept_list_add>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   123de:	4606      	mov	r6, r0
   123e0:	2800      	cmp	r0, #0
   123e2:	d03e      	beq.n	12462 <main+0x962>
   123e4:	466c      	mov	r4, sp
   123e6:	b088      	sub	sp, #32
   123e8:	466b      	mov	r3, sp
   123ea:	f113 0210 	adds.w	r2, r3, #16
   123ee:	d011      	beq.n	12414 <main+0x914>
   123f0:	210c      	movs	r1, #12
   123f2:	b13a      	cbz	r2, 12404 <main+0x904>
   123f4:	4608      	mov	r0, r1
   123f6:	2904      	cmp	r1, #4
   123f8:	dd01      	ble.n	123fe <main+0x8fe>
   123fa:	4d94      	ldr	r5, [pc, #592]	; (1264c <main+0xb4c>)
   123fc:	615d      	str	r5, [r3, #20]
   123fe:	2808      	cmp	r0, #8
   12400:	dd0b      	ble.n	1241a <main+0x91a>
   12402:	619e      	str	r6, [r3, #24]
   12404:	290b      	cmp	r1, #11
   12406:	dd47      	ble.n	12498 <main+0x998>
   12408:	f04f 0c0c 	mov.w	ip, #12
   1240c:	e007      	b.n	1241e <main+0x91e>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   1240e:	f06f 0c1b 	mvn.w	ip, #27
   12412:	e7bf      	b.n	12394 <main+0x894>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   12414:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12418:	e7eb      	b.n	123f2 <main+0x8f2>
   1241a:	f06f 0c1b 	mvn.w	ip, #27
   1241e:	b13a      	cbz	r2, 12430 <main+0x930>
   12420:	2103      	movs	r1, #3
   12422:	7139      	strb	r1, [r7, #4]
   12424:	2100      	movs	r1, #0
   12426:	7179      	strb	r1, [r7, #5]
   12428:	71b9      	strb	r1, [r7, #6]
   1242a:	71f9      	strb	r1, [r7, #7]
   1242c:	6878      	ldr	r0, [r7, #4]
   1242e:	6118      	str	r0, [r3, #16]
   12430:	2100      	movs	r1, #0
   12432:	f36f 0100 	bfc	r1, #0, #1
   12436:	f36f 0141 	bfc	r1, #1, #1
   1243a:	f36f 0182 	bfc	r1, #2, #1
   1243e:	f36f 01c5 	bfc	r1, #3, #3
   12442:	2302      	movs	r3, #2
   12444:	f363 1188 	bfi	r1, r3, #6, #3
   12448:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   1244c:	f363 2152 	bfi	r1, r3, #9, #10
   12450:	f36f 41de 	bfc	r1, #19, #12
   12454:	f36f 71df 	bfc	r1, #31, #1
   12458:	2300      	movs	r3, #0
   1245a:	487a      	ldr	r0, [pc, #488]	; (12644 <main+0xb44>)
   1245c:	f013 f9a9 	bl	257b2 <z_impl_z_log_msg_static_create>
   12460:	46a5      	mov	sp, r4
	err = bt_le_filter_accept_list_add(&IRR_bt_addr);
   12462:	487b      	ldr	r0, [pc, #492]	; (12650 <main+0xb50>)
   12464:	f006 fbc2 	bl	18bec <bt_le_filter_accept_list_add>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   12468:	4606      	mov	r6, r0
   1246a:	2800      	cmp	r0, #0
   1246c:	d03e      	beq.n	124ec <main+0x9ec>
   1246e:	466c      	mov	r4, sp
   12470:	b088      	sub	sp, #32
   12472:	466b      	mov	r3, sp
   12474:	f113 0210 	adds.w	r2, r3, #16
   12478:	d011      	beq.n	1249e <main+0x99e>
   1247a:	210c      	movs	r1, #12
   1247c:	b13a      	cbz	r2, 1248e <main+0x98e>
   1247e:	4608      	mov	r0, r1
   12480:	2904      	cmp	r1, #4
   12482:	dd01      	ble.n	12488 <main+0x988>
   12484:	4d71      	ldr	r5, [pc, #452]	; (1264c <main+0xb4c>)
   12486:	615d      	str	r5, [r3, #20]
   12488:	2808      	cmp	r0, #8
   1248a:	dd0b      	ble.n	124a4 <main+0x9a4>
   1248c:	619e      	str	r6, [r3, #24]
   1248e:	290b      	cmp	r1, #11
   12490:	dd47      	ble.n	12522 <main+0xa22>
   12492:	f04f 0c0c 	mov.w	ip, #12
   12496:	e007      	b.n	124a8 <main+0x9a8>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   12498:	f06f 0c1b 	mvn.w	ip, #27
   1249c:	e7bf      	b.n	1241e <main+0x91e>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   1249e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   124a2:	e7eb      	b.n	1247c <main+0x97c>
   124a4:	f06f 0c1b 	mvn.w	ip, #27
   124a8:	b13a      	cbz	r2, 124ba <main+0x9ba>
   124aa:	2103      	movs	r1, #3
   124ac:	7139      	strb	r1, [r7, #4]
   124ae:	2100      	movs	r1, #0
   124b0:	7179      	strb	r1, [r7, #5]
   124b2:	71b9      	strb	r1, [r7, #6]
   124b4:	71f9      	strb	r1, [r7, #7]
   124b6:	6878      	ldr	r0, [r7, #4]
   124b8:	6118      	str	r0, [r3, #16]
   124ba:	2100      	movs	r1, #0
   124bc:	f36f 0100 	bfc	r1, #0, #1
   124c0:	f36f 0141 	bfc	r1, #1, #1
   124c4:	f36f 0182 	bfc	r1, #2, #1
   124c8:	f36f 01c5 	bfc	r1, #3, #3
   124cc:	2302      	movs	r3, #2
   124ce:	f363 1188 	bfi	r1, r3, #6, #3
   124d2:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   124d6:	f363 2152 	bfi	r1, r3, #9, #10
   124da:	f36f 41de 	bfc	r1, #19, #12
   124de:	f36f 71df 	bfc	r1, #31, #1
   124e2:	2300      	movs	r3, #0
   124e4:	4857      	ldr	r0, [pc, #348]	; (12644 <main+0xb44>)
   124e6:	f013 f964 	bl	257b2 <z_impl_z_log_msg_static_create>
   124ea:	46a5      	mov	sp, r4
	err = bt_le_filter_accept_list_add(&EFL_bt_addr);
   124ec:	4859      	ldr	r0, [pc, #356]	; (12654 <main+0xb54>)
   124ee:	f006 fb7d 	bl	18bec <bt_le_filter_accept_list_add>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   124f2:	4606      	mov	r6, r0
   124f4:	2800      	cmp	r0, #0
   124f6:	d03e      	beq.n	12576 <main+0xa76>
   124f8:	466c      	mov	r4, sp
   124fa:	b088      	sub	sp, #32
   124fc:	466b      	mov	r3, sp
   124fe:	f113 0210 	adds.w	r2, r3, #16
   12502:	d011      	beq.n	12528 <main+0xa28>
   12504:	210c      	movs	r1, #12
   12506:	b13a      	cbz	r2, 12518 <main+0xa18>
   12508:	4608      	mov	r0, r1
   1250a:	2904      	cmp	r1, #4
   1250c:	dd01      	ble.n	12512 <main+0xa12>
   1250e:	4d4f      	ldr	r5, [pc, #316]	; (1264c <main+0xb4c>)
   12510:	615d      	str	r5, [r3, #20]
   12512:	2808      	cmp	r0, #8
   12514:	dd0b      	ble.n	1252e <main+0xa2e>
   12516:	619e      	str	r6, [r3, #24]
   12518:	290b      	cmp	r1, #11
   1251a:	dd47      	ble.n	125ac <main+0xaac>
   1251c:	f04f 0c0c 	mov.w	ip, #12
   12520:	e007      	b.n	12532 <main+0xa32>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   12522:	f06f 0c1b 	mvn.w	ip, #27
   12526:	e7bf      	b.n	124a8 <main+0x9a8>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   12528:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1252c:	e7eb      	b.n	12506 <main+0xa06>
   1252e:	f06f 0c1b 	mvn.w	ip, #27
   12532:	b13a      	cbz	r2, 12544 <main+0xa44>
   12534:	2103      	movs	r1, #3
   12536:	7139      	strb	r1, [r7, #4]
   12538:	2100      	movs	r1, #0
   1253a:	7179      	strb	r1, [r7, #5]
   1253c:	71b9      	strb	r1, [r7, #6]
   1253e:	71f9      	strb	r1, [r7, #7]
   12540:	6878      	ldr	r0, [r7, #4]
   12542:	6118      	str	r0, [r3, #16]
   12544:	2100      	movs	r1, #0
   12546:	f36f 0100 	bfc	r1, #0, #1
   1254a:	f36f 0141 	bfc	r1, #1, #1
   1254e:	f36f 0182 	bfc	r1, #2, #1
   12552:	f36f 01c5 	bfc	r1, #3, #3
   12556:	2302      	movs	r3, #2
   12558:	f363 1188 	bfi	r1, r3, #6, #3
   1255c:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   12560:	f363 2152 	bfi	r1, r3, #9, #10
   12564:	f36f 41de 	bfc	r1, #19, #12
   12568:	f36f 71df 	bfc	r1, #31, #1
   1256c:	2300      	movs	r3, #0
   1256e:	4835      	ldr	r0, [pc, #212]	; (12644 <main+0xb44>)
   12570:	f013 f91f 	bl	257b2 <z_impl_z_log_msg_static_create>
   12574:	46a5      	mov	sp, r4
	err = bt_le_filter_accept_list_add(&EFR_bt_addr);
   12576:	4838      	ldr	r0, [pc, #224]	; (12658 <main+0xb58>)
   12578:	f006 fb38 	bl	18bec <bt_le_filter_accept_list_add>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   1257c:	4606      	mov	r6, r0
   1257e:	2800      	cmp	r0, #0
   12580:	d03e      	beq.n	12600 <main+0xb00>
   12582:	466c      	mov	r4, sp
   12584:	b088      	sub	sp, #32
   12586:	466b      	mov	r3, sp
   12588:	f113 0210 	adds.w	r2, r3, #16
   1258c:	d011      	beq.n	125b2 <main+0xab2>
   1258e:	210c      	movs	r1, #12
   12590:	b13a      	cbz	r2, 125a2 <main+0xaa2>
   12592:	4608      	mov	r0, r1
   12594:	2904      	cmp	r1, #4
   12596:	dd01      	ble.n	1259c <main+0xa9c>
   12598:	4d2c      	ldr	r5, [pc, #176]	; (1264c <main+0xb4c>)
   1259a:	615d      	str	r5, [r3, #20]
   1259c:	2808      	cmp	r0, #8
   1259e:	dd0b      	ble.n	125b8 <main+0xab8>
   125a0:	619e      	str	r6, [r3, #24]
   125a2:	290b      	cmp	r1, #11
   125a4:	dd47      	ble.n	12636 <main+0xb36>
   125a6:	f04f 0c0c 	mov.w	ip, #12
   125aa:	e007      	b.n	125bc <main+0xabc>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   125ac:	f06f 0c1b 	mvn.w	ip, #27
   125b0:	e7bf      	b.n	12532 <main+0xa32>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   125b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   125b6:	e7eb      	b.n	12590 <main+0xa90>
   125b8:	f06f 0c1b 	mvn.w	ip, #27
   125bc:	b13a      	cbz	r2, 125ce <main+0xace>
   125be:	2103      	movs	r1, #3
   125c0:	7139      	strb	r1, [r7, #4]
   125c2:	2100      	movs	r1, #0
   125c4:	7179      	strb	r1, [r7, #5]
   125c6:	71b9      	strb	r1, [r7, #6]
   125c8:	71f9      	strb	r1, [r7, #7]
   125ca:	6878      	ldr	r0, [r7, #4]
   125cc:	6118      	str	r0, [r3, #16]
   125ce:	2100      	movs	r1, #0
   125d0:	f36f 0100 	bfc	r1, #0, #1
   125d4:	f36f 0141 	bfc	r1, #1, #1
   125d8:	f36f 0182 	bfc	r1, #2, #1
   125dc:	f36f 01c5 	bfc	r1, #3, #3
   125e0:	2302      	movs	r3, #2
   125e2:	f363 1188 	bfi	r1, r3, #6, #3
   125e6:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   125ea:	f363 2152 	bfi	r1, r3, #9, #10
   125ee:	f36f 41de 	bfc	r1, #19, #12
   125f2:	f36f 71df 	bfc	r1, #31, #1
   125f6:	2300      	movs	r3, #0
   125f8:	4812      	ldr	r0, [pc, #72]	; (12644 <main+0xb44>)
   125fa:	f013 f8da 	bl	257b2 <z_impl_z_log_msg_static_create>
   125fe:	46a5      	mov	sp, r4
	err = bt_le_filter_accept_list_add(&ERL_bt_addr);
   12600:	4816      	ldr	r0, [pc, #88]	; (1265c <main+0xb5c>)
   12602:	f006 faf3 	bl	18bec <bt_le_filter_accept_list_add>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   12606:	4606      	mov	r6, r0
   12608:	2800      	cmp	r0, #0
   1260a:	d04d      	beq.n	126a8 <main+0xba8>
   1260c:	466c      	mov	r4, sp
   1260e:	b088      	sub	sp, #32
   12610:	466b      	mov	r3, sp
   12612:	f113 0210 	adds.w	r2, r3, #16
   12616:	d011      	beq.n	1263c <main+0xb3c>
   12618:	210c      	movs	r1, #12
   1261a:	b13a      	cbz	r2, 1262c <main+0xb2c>
   1261c:	4608      	mov	r0, r1
   1261e:	2904      	cmp	r1, #4
   12620:	dd01      	ble.n	12626 <main+0xb26>
   12622:	4d0a      	ldr	r5, [pc, #40]	; (1264c <main+0xb4c>)
   12624:	615d      	str	r5, [r3, #20]
   12626:	2808      	cmp	r0, #8
   12628:	dd1a      	ble.n	12660 <main+0xb60>
   1262a:	619e      	str	r6, [r3, #24]
   1262c:	290b      	cmp	r1, #11
   1262e:	dd56      	ble.n	126de <main+0xbde>
   12630:	f04f 0c0c 	mov.w	ip, #12
   12634:	e016      	b.n	12664 <main+0xb64>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   12636:	f06f 0c1b 	mvn.w	ip, #27
   1263a:	e7bf      	b.n	125bc <main+0xabc>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   1263c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12640:	e7eb      	b.n	1261a <main+0xb1a>
   12642:	bf00      	nop
   12644:	0002b22c 	.word	0x0002b22c
   12648:	20005600 	.word	0x20005600
   1264c:	0002b804 	.word	0x0002b804
   12650:	200055f8 	.word	0x200055f8
   12654:	200055f0 	.word	0x200055f0
   12658:	200055e8 	.word	0x200055e8
   1265c:	200055e0 	.word	0x200055e0
   12660:	f06f 0c1b 	mvn.w	ip, #27
   12664:	b13a      	cbz	r2, 12676 <main+0xb76>
   12666:	2103      	movs	r1, #3
   12668:	7139      	strb	r1, [r7, #4]
   1266a:	2100      	movs	r1, #0
   1266c:	7179      	strb	r1, [r7, #5]
   1266e:	71b9      	strb	r1, [r7, #6]
   12670:	71f9      	strb	r1, [r7, #7]
   12672:	6878      	ldr	r0, [r7, #4]
   12674:	6118      	str	r0, [r3, #16]
   12676:	2100      	movs	r1, #0
   12678:	f36f 0100 	bfc	r1, #0, #1
   1267c:	f36f 0141 	bfc	r1, #1, #1
   12680:	f36f 0182 	bfc	r1, #2, #1
   12684:	f36f 01c5 	bfc	r1, #3, #3
   12688:	2302      	movs	r3, #2
   1268a:	f363 1188 	bfi	r1, r3, #6, #3
   1268e:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   12692:	f363 2152 	bfi	r1, r3, #9, #10
   12696:	f36f 41de 	bfc	r1, #19, #12
   1269a:	f36f 71df 	bfc	r1, #31, #1
   1269e:	2300      	movs	r3, #0
   126a0:	484f      	ldr	r0, [pc, #316]	; (127e0 <main+0xce0>)
   126a2:	f013 f886 	bl	257b2 <z_impl_z_log_msg_static_create>
   126a6:	46a5      	mov	sp, r4
	//err = bt_le_filter_accept_list_add(&ERR_bt_addr);
	//if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }

	err = bt_le_filter_accept_list_add(&TEST_bt_addr);
   126a8:	484e      	ldr	r0, [pc, #312]	; (127e4 <main+0xce4>)
   126aa:	f006 fa9f 	bl	18bec <bt_le_filter_accept_list_add>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   126ae:	4606      	mov	r6, r0
   126b0:	2800      	cmp	r0, #0
   126b2:	d03e      	beq.n	12732 <main+0xc32>
   126b4:	466c      	mov	r4, sp
   126b6:	b088      	sub	sp, #32
   126b8:	466b      	mov	r3, sp
   126ba:	f113 0210 	adds.w	r2, r3, #16
   126be:	d011      	beq.n	126e4 <main+0xbe4>
   126c0:	210c      	movs	r1, #12
   126c2:	b13a      	cbz	r2, 126d4 <main+0xbd4>
   126c4:	4608      	mov	r0, r1
   126c6:	2904      	cmp	r1, #4
   126c8:	dd01      	ble.n	126ce <main+0xbce>
   126ca:	4d47      	ldr	r5, [pc, #284]	; (127e8 <main+0xce8>)
   126cc:	615d      	str	r5, [r3, #20]
   126ce:	2808      	cmp	r0, #8
   126d0:	dd0b      	ble.n	126ea <main+0xbea>
   126d2:	619e      	str	r6, [r3, #24]
   126d4:	290b      	cmp	r1, #11
   126d6:	dd4e      	ble.n	12776 <main+0xc76>
   126d8:	f04f 0c0c 	mov.w	ip, #12
   126dc:	e007      	b.n	126ee <main+0xbee>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   126de:	f06f 0c1b 	mvn.w	ip, #27
   126e2:	e7bf      	b.n	12664 <main+0xb64>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   126e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   126e8:	e7eb      	b.n	126c2 <main+0xbc2>
   126ea:	f06f 0c1b 	mvn.w	ip, #27
   126ee:	b13a      	cbz	r2, 12700 <main+0xc00>
   126f0:	2103      	movs	r1, #3
   126f2:	7139      	strb	r1, [r7, #4]
   126f4:	2100      	movs	r1, #0
   126f6:	7179      	strb	r1, [r7, #5]
   126f8:	71b9      	strb	r1, [r7, #6]
   126fa:	71f9      	strb	r1, [r7, #7]
   126fc:	6878      	ldr	r0, [r7, #4]
   126fe:	6118      	str	r0, [r3, #16]
   12700:	2100      	movs	r1, #0
   12702:	f36f 0100 	bfc	r1, #0, #1
   12706:	f36f 0141 	bfc	r1, #1, #1
   1270a:	f36f 0182 	bfc	r1, #2, #1
   1270e:	f36f 01c5 	bfc	r1, #3, #3
   12712:	2302      	movs	r3, #2
   12714:	f363 1188 	bfi	r1, r3, #6, #3
   12718:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   1271c:	f363 2152 	bfi	r1, r3, #9, #10
   12720:	f36f 41de 	bfc	r1, #19, #12
   12724:	f36f 71df 	bfc	r1, #31, #1
   12728:	2300      	movs	r3, #0
   1272a:	482d      	ldr	r0, [pc, #180]	; (127e0 <main+0xce0>)
   1272c:	f013 f841 	bl	257b2 <z_impl_z_log_msg_static_create>
   12730:	46a5      	mov	sp, r4

	err = bt_conn_le_create_auto(BT_CONN_LE_CREATE_CONN, &conn_param);
   12732:	4b2e      	ldr	r3, [pc, #184]	; (127ec <main+0xcec>)
   12734:	f107 0c10 	add.w	ip, r7, #16
   12738:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1273a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   1273e:	492c      	ldr	r1, [pc, #176]	; (127f0 <main+0xcf0>)
   12740:	4660      	mov	r0, ip
   12742:	f007 fecd 	bl	1a4e0 <bt_conn_le_create_auto>
	if (err) {
   12746:	4606      	mov	r6, r0
   12748:	2800      	cmp	r0, #0
   1274a:	d03e      	beq.n	127ca <main+0xcca>
		LOG_ERR("Failed to start automatically connecting (err %d)", err);
   1274c:	466c      	mov	r4, sp
   1274e:	b088      	sub	sp, #32
   12750:	466b      	mov	r3, sp
   12752:	f113 0210 	adds.w	r2, r3, #16
   12756:	d011      	beq.n	1277c <main+0xc7c>
   12758:	210c      	movs	r1, #12
   1275a:	b13a      	cbz	r2, 1276c <main+0xc6c>
   1275c:	4608      	mov	r0, r1
   1275e:	2904      	cmp	r1, #4
   12760:	dd01      	ble.n	12766 <main+0xc66>
   12762:	4d24      	ldr	r5, [pc, #144]	; (127f4 <main+0xcf4>)
   12764:	615d      	str	r5, [r3, #20]
   12766:	2808      	cmp	r0, #8
   12768:	dd0b      	ble.n	12782 <main+0xc82>
   1276a:	619e      	str	r6, [r3, #24]
   1276c:	290b      	cmp	r1, #11
   1276e:	dd33      	ble.n	127d8 <main+0xcd8>
   12770:	f04f 0c0c 	mov.w	ip, #12
   12774:	e007      	b.n	12786 <main+0xc86>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   12776:	f06f 0c1b 	mvn.w	ip, #27
   1277a:	e7b8      	b.n	126ee <main+0xbee>
		LOG_ERR("Failed to start automatically connecting (err %d)", err);
   1277c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12780:	e7eb      	b.n	1275a <main+0xc5a>
   12782:	f06f 0c1b 	mvn.w	ip, #27
   12786:	b13a      	cbz	r2, 12798 <main+0xc98>
   12788:	2103      	movs	r1, #3
   1278a:	7139      	strb	r1, [r7, #4]
   1278c:	2100      	movs	r1, #0
   1278e:	7179      	strb	r1, [r7, #5]
   12790:	71b9      	strb	r1, [r7, #6]
   12792:	71f9      	strb	r1, [r7, #7]
   12794:	6878      	ldr	r0, [r7, #4]
   12796:	6118      	str	r0, [r3, #16]
   12798:	2100      	movs	r1, #0
   1279a:	f36f 0100 	bfc	r1, #0, #1
   1279e:	f36f 0141 	bfc	r1, #1, #1
   127a2:	f36f 0182 	bfc	r1, #2, #1
   127a6:	f36f 01c5 	bfc	r1, #3, #3
   127aa:	2301      	movs	r3, #1
   127ac:	f363 1188 	bfi	r1, r3, #6, #3
   127b0:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   127b4:	f363 2152 	bfi	r1, r3, #9, #10
   127b8:	f36f 41de 	bfc	r1, #19, #12
   127bc:	f36f 71df 	bfc	r1, #31, #1
   127c0:	2300      	movs	r3, #0
   127c2:	4807      	ldr	r0, [pc, #28]	; (127e0 <main+0xce0>)
   127c4:	f012 fff5 	bl	257b2 <z_impl_z_log_msg_static_create>
   127c8:	46a5      	mov	sp, r4
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
   127ca:	f04f 30ff 	mov.w	r0, #4294967295
   127ce:	f04f 31ff 	mov.w	r1, #4294967295
   127d2:	f010 ff2b 	bl	2362c <z_impl_k_sleep>
	}

	while(1)
   127d6:	e7f8      	b.n	127ca <main+0xcca>
		LOG_ERR("Failed to start automatically connecting (err %d)", err);
   127d8:	f06f 0c1b 	mvn.w	ip, #27
   127dc:	e7d3      	b.n	12786 <main+0xc86>
   127de:	bf00      	nop
   127e0:	0002b22c 	.word	0x0002b22c
   127e4:	200055d0 	.word	0x200055d0
   127e8:	0002b804 	.word	0x0002b804
   127ec:	0002b290 	.word	0x0002b290
   127f0:	20000648 	.word	0x20000648
   127f4:	0002b670 	.word	0x0002b670

000127f8 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   127f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127fc:	b091      	sub	sp, #68	; 0x44
   127fe:	9205      	str	r2, [sp, #20]
   12800:	9302      	str	r3, [sp, #8]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   12802:	4613      	mov	r3, r2
   12804:	f002 0204 	and.w	r2, r2, #4
   12808:	9200      	str	r2, [sp, #0]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   1280a:	f3c3 02c2 	ubfx	r2, r3, #3, #3
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   1280e:	f010 0303 	ands.w	r3, r0, #3
   12812:	9301      	str	r3, [sp, #4]
   12814:	f040 8223 	bne.w	12c5e <cbvprintf_package+0x466>
   12818:	4607      	mov	r7, r0
   1281a:	468a      	mov	sl, r1
   1281c:	3201      	adds	r2, #1
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   1281e:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   12820:	2800      	cmp	r0, #0
   12822:	d047      	beq.n	128b4 <cbvprintf_package+0xbc>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   12824:	b127      	cbz	r7, 12830 <cbvprintf_package+0x38>
   12826:	1be3      	subs	r3, r4, r7
   12828:	3304      	adds	r3, #4
   1282a:	4553      	cmp	r3, sl
   1282c:	f200 821a 	bhi.w	12c64 <cbvprintf_package+0x46c>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
   12830:	9b02      	ldr	r3, [sp, #8]
   12832:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   12834:	9b01      	ldr	r3, [sp, #4]
   12836:	9304      	str	r3, [sp, #16]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   12838:	9306      	str	r3, [sp, #24]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   1283a:	9303      	str	r3, [sp, #12]
	bool parsing = false;
   1283c:	2600      	movs	r6, #0
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   1283e:	f04f 3bff 	mov.w	fp, #4294967295
	align = VA_STACK_ALIGN(char *);
   12842:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
   12846:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
   12848:	b10f      	cbz	r7, 1284e <cbvprintf_package+0x56>
				*(const char **)buf = s;
   1284a:	9b02      	ldr	r3, [sp, #8]
   1284c:	6023      	str	r3, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   1284e:	1e53      	subs	r3, r2, #1
   12850:	9307      	str	r3, [sp, #28]
   12852:	2a00      	cmp	r2, #0
   12854:	f340 815f 	ble.w	12b16 <cbvprintf_package+0x31e>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
   12858:	9b05      	ldr	r3, [sp, #20]
   1285a:	f013 0202 	ands.w	r2, r3, #2
   1285e:	d026      	beq.n	128ae <cbvprintf_package+0xb6>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   12860:	2001      	movs	r0, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   12862:	1be1      	subs	r1, r4, r7
   12864:	088b      	lsrs	r3, r1, #2
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   12866:	b11a      	cbz	r2, 12870 <cbvprintf_package+0x78>
   12868:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1286c:	f080 8200 	bcs.w	12c70 <cbvprintf_package+0x478>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   12870:	9903      	ldr	r1, [sp, #12]
   12872:	290f      	cmp	r1, #15
   12874:	f200 81ff 	bhi.w	12c76 <cbvprintf_package+0x47e>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
   12878:	2f00      	cmp	r7, #0
   1287a:	f000 8164 	beq.w	12b46 <cbvprintf_package+0x34e>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
   1287e:	b2db      	uxtb	r3, r3
   12880:	f101 0240 	add.w	r2, r1, #64	; 0x40
   12884:	446a      	add	r2, sp
   12886:	f802 3c10 	strb.w	r3, [r2, #-16]
					str_ptr_arg[s_idx] = arg_idx;
   1288a:	f802 bc20 	strb.w	fp, [r2, #-32]
					if (is_ro) {
   1288e:	2800      	cmp	r0, #0
   12890:	f000 8155 	beq.w	12b3e <cbvprintf_package+0x346>
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   12894:	f063 037f 	orn	r3, r3, #127	; 0x7f
   12898:	f101 0240 	add.w	r2, r1, #64	; 0x40
   1289c:	446a      	add	r2, sp
   1289e:	f802 3c10 	strb.w	r3, [r2, #-16]
						s_ro_cnt++;
   128a2:	9b04      	ldr	r3, [sp, #16]
   128a4:	3301      	adds	r3, #1
   128a6:	9304      	str	r3, [sp, #16]
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
   128a8:	9b03      	ldr	r3, [sp, #12]
   128aa:	3301      	adds	r3, #1
   128ac:	9303      	str	r3, [sp, #12]
			}
			buf += sizeof(char *);
   128ae:	3404      	adds	r4, #4

			is_str_arg = false;
   128b0:	2200      	movs	r2, #0
   128b2:	e03d      	b.n	12930 <cbvprintf_package+0x138>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   128b4:	f001 0a07 	and.w	sl, r1, #7
   128b8:	4454      	add	r4, sl
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   128ba:	f1ca 0a08 	rsb	sl, sl, #8
   128be:	e7b1      	b.n	12824 <cbvprintf_package+0x2c>
				parsing = false;
   128c0:	2600      	movs	r6, #0
   128c2:	e034      	b.n	1292e <cbvprintf_package+0x136>
   128c4:	2600      	movs	r6, #0
   128c6:	e032      	b.n	1292e <cbvprintf_package+0x136>
   128c8:	2600      	movs	r6, #0
   128ca:	e030      	b.n	1292e <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(intmax_t);
   128cc:	f04f 0808 	mov.w	r8, #8
				size = sizeof(intmax_t);
   128d0:	46c1      	mov	r9, r8
   128d2:	e02c      	b.n	1292e <cbvprintf_package+0x136>
				if (*fmt == '%') {
   128d4:	2925      	cmp	r1, #37	; 0x25
   128d6:	d12a      	bne.n	1292e <cbvprintf_package+0x136>
					arg_idx++;
   128d8:	f10b 0b01 	add.w	fp, fp, #1
					parsing = true;
   128dc:	2601      	movs	r6, #1
					align = VA_STACK_ALIGN(int);
   128de:	f04f 0804 	mov.w	r8, #4
					size = sizeof(int);
   128e2:	46c1      	mov	r9, r8
				continue;
   128e4:	e023      	b.n	1292e <cbvprintf_package+0x136>
			switch (*fmt) {
   128e6:	2947      	cmp	r1, #71	; 0x47
   128e8:	d8ec      	bhi.n	128c4 <cbvprintf_package+0xcc>
   128ea:	292a      	cmp	r1, #42	; 0x2a
   128ec:	d312      	bcc.n	12914 <cbvprintf_package+0x11c>
   128ee:	392a      	subs	r1, #42	; 0x2a
   128f0:	b2c9      	uxtb	r1, r1
   128f2:	2001      	movs	r0, #1
   128f4:	fa00 f101 	lsl.w	r1, r0, r1
   128f8:	f64f 70da 	movw	r0, #65498	; 0xffda
   128fc:	4201      	tst	r1, r0
   128fe:	d116      	bne.n	1292e <cbvprintf_package+0x136>
   12900:	f011 5f62 	tst.w	r1, #947912704	; 0x38800000
   12904:	f040 80c4 	bne.w	12a90 <cbvprintf_package+0x298>
   12908:	f011 0f01 	tst.w	r1, #1
   1290c:	f040 808e 	bne.w	12a2c <cbvprintf_package+0x234>
				parsing = false;
   12910:	2600      	movs	r6, #0
   12912:	e00c      	b.n	1292e <cbvprintf_package+0x136>
			switch (*fmt) {
   12914:	2925      	cmp	r1, #37	; 0x25
   12916:	d103      	bne.n	12920 <cbvprintf_package+0x128>
				arg_idx--;
   12918:	f10b 3bff 	add.w	fp, fp, #4294967295
				parsing = false;
   1291c:	2600      	movs	r6, #0
				continue;
   1291e:	e006      	b.n	1292e <cbvprintf_package+0x136>
			switch (*fmt) {
   12920:	d901      	bls.n	12926 <cbvprintf_package+0x12e>
				parsing = false;
   12922:	2600      	movs	r6, #0
   12924:	e003      	b.n	1292e <cbvprintf_package+0x136>
			switch (*fmt) {
   12926:	2920      	cmp	r1, #32
   12928:	d001      	beq.n	1292e <cbvprintf_package+0x136>
   1292a:	2923      	cmp	r1, #35	; 0x23
   1292c:	d1cc      	bne.n	128c8 <cbvprintf_package+0xd0>
				parsing = false;
   1292e:	461d      	mov	r5, r3
			if (*++fmt == '\0') {
   12930:	1c6b      	adds	r3, r5, #1
   12932:	7869      	ldrb	r1, [r5, #1]
   12934:	2900      	cmp	r1, #0
   12936:	f000 811d 	beq.w	12b74 <cbvprintf_package+0x37c>
			if (!parsing) {
   1293a:	2e00      	cmp	r6, #0
   1293c:	d0ca      	beq.n	128d4 <cbvprintf_package+0xdc>
			switch (*fmt) {
   1293e:	297a      	cmp	r1, #122	; 0x7a
   12940:	d8be      	bhi.n	128c0 <cbvprintf_package+0xc8>
   12942:	294c      	cmp	r1, #76	; 0x4c
   12944:	d3cf      	bcc.n	128e6 <cbvprintf_package+0xee>
   12946:	394c      	subs	r1, #76	; 0x4c
   12948:	292e      	cmp	r1, #46	; 0x2e
   1294a:	d861      	bhi.n	12a10 <cbvprintf_package+0x218>
   1294c:	a001      	add	r0, pc, #4	; (adr r0, 12954 <cbvprintf_package+0x15c>)
   1294e:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   12952:	bf00      	nop
   12954:	0001292f 	.word	0x0001292f
   12958:	00012a11 	.word	0x00012a11
   1295c:	00012a11 	.word	0x00012a11
   12960:	00012a11 	.word	0x00012a11
   12964:	00012a11 	.word	0x00012a11
   12968:	00012a11 	.word	0x00012a11
   1296c:	00012a11 	.word	0x00012a11
   12970:	00012a11 	.word	0x00012a11
   12974:	00012a11 	.word	0x00012a11
   12978:	00012a11 	.word	0x00012a11
   1297c:	00012a11 	.word	0x00012a11
   12980:	00012a11 	.word	0x00012a11
   12984:	00012a25 	.word	0x00012a25
   12988:	00012a11 	.word	0x00012a11
   1298c:	00012a11 	.word	0x00012a11
   12990:	00012a11 	.word	0x00012a11
   12994:	00012a11 	.word	0x00012a11
   12998:	00012a11 	.word	0x00012a11
   1299c:	00012a11 	.word	0x00012a11
   129a0:	00012a11 	.word	0x00012a11
   129a4:	00012a11 	.word	0x00012a11
   129a8:	00012a91 	.word	0x00012a91
   129ac:	00012a11 	.word	0x00012a11
   129b0:	00012a25 	.word	0x00012a25
   129b4:	00012a25 	.word	0x00012a25
   129b8:	00012a91 	.word	0x00012a91
   129bc:	00012a91 	.word	0x00012a91
   129c0:	00012a91 	.word	0x00012a91
   129c4:	0001292f 	.word	0x0001292f
   129c8:	00012a25 	.word	0x00012a25
   129cc:	000128cd 	.word	0x000128cd
   129d0:	00012a11 	.word	0x00012a11
   129d4:	0001292f 	.word	0x0001292f
   129d8:	00012a11 	.word	0x00012a11
   129dc:	00012aef 	.word	0x00012aef
   129e0:	00012a25 	.word	0x00012a25
   129e4:	00012aef 	.word	0x00012aef
   129e8:	00012a11 	.word	0x00012a11
   129ec:	00012a11 	.word	0x00012a11
   129f0:	00012af9 	.word	0x00012af9
   129f4:	00012a1d 	.word	0x00012a1d
   129f8:	00012a25 	.word	0x00012a25
   129fc:	00012a11 	.word	0x00012a11
   12a00:	00012a11 	.word	0x00012a11
   12a04:	00012a25 	.word	0x00012a25
   12a08:	00012a11 	.word	0x00012a11
   12a0c:	00012a15 	.word	0x00012a15
				parsing = false;
   12a10:	2600      	movs	r6, #0
   12a12:	e78c      	b.n	1292e <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(size_t);
   12a14:	f04f 0804 	mov.w	r8, #4
				size = sizeof(size_t);
   12a18:	46c1      	mov	r9, r8
				continue;
   12a1a:	e788      	b.n	1292e <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(ptrdiff_t);
   12a1c:	f04f 0804 	mov.w	r8, #4
				size = sizeof(ptrdiff_t);
   12a20:	46c1      	mov	r9, r8
				continue;
   12a22:	e784      	b.n	1292e <cbvprintf_package+0x136>
				if (fmt[-1] == 'l') {
   12a24:	7829      	ldrb	r1, [r5, #0]
   12a26:	296c      	cmp	r1, #108	; 0x6c
   12a28:	d024      	beq.n	12a74 <cbvprintf_package+0x27c>
				parsing = false;
   12a2a:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
   12a2c:	4444      	add	r4, r8
   12a2e:	3c01      	subs	r4, #1
   12a30:	f1c8 0100 	rsb	r1, r8, #0
   12a34:	400c      	ands	r4, r1
   12a36:	4620      	mov	r0, r4
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   12a38:	b127      	cbz	r7, 12a44 <cbvprintf_package+0x24c>
   12a3a:	1be1      	subs	r1, r4, r7
   12a3c:	4449      	add	r1, r9
   12a3e:	4551      	cmp	r1, sl
   12a40:	f200 8113 	bhi.w	12c6a <cbvprintf_package+0x472>
		if (is_str_arg) {
   12a44:	2a00      	cmp	r2, #0
   12a46:	d15d      	bne.n	12b04 <cbvprintf_package+0x30c>
		} else if (size == sizeof(int)) {
   12a48:	f1b9 0f04 	cmp.w	r9, #4
   12a4c:	f000 808a 	beq.w	12b64 <cbvprintf_package+0x36c>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
   12a50:	f1b9 0f08 	cmp.w	r9, #8
   12a54:	f040 8112 	bne.w	12c7c <cbvprintf_package+0x484>
			long long v = va_arg(ap, long long);
   12a58:	991a      	ldr	r1, [sp, #104]	; 0x68
   12a5a:	3107      	adds	r1, #7
   12a5c:	f021 0107 	bic.w	r1, r1, #7
   12a60:	f101 0008 	add.w	r0, r1, #8
   12a64:	901a      	str	r0, [sp, #104]	; 0x68
   12a66:	e9d1 0100 	ldrd	r0, r1, [r1]

			if (buf0 != NULL) {
   12a6a:	b10f      	cbz	r7, 12a70 <cbvprintf_package+0x278>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
   12a6c:	e9c4 0100 	strd	r0, r1, [r4]
				}
			}
			buf += sizeof(long long);
   12a70:	3408      	adds	r4, #8
   12a72:	e75c      	b.n	1292e <cbvprintf_package+0x136>
					if (fmt[-2] == 'l') {
   12a74:	f813 1c02 	ldrb.w	r1, [r3, #-2]
   12a78:	296c      	cmp	r1, #108	; 0x6c
   12a7a:	d004      	beq.n	12a86 <cbvprintf_package+0x28e>
				parsing = false;
   12a7c:	2600      	movs	r6, #0
						align = VA_STACK_ALIGN(long);
   12a7e:	f04f 0804 	mov.w	r8, #4
						size = sizeof(long);
   12a82:	46c1      	mov	r9, r8
   12a84:	e7d2      	b.n	12a2c <cbvprintf_package+0x234>
				parsing = false;
   12a86:	2600      	movs	r6, #0
						align = VA_STACK_ALIGN(long long);
   12a88:	f04f 0808 	mov.w	r8, #8
						size = sizeof(long long);
   12a8c:	46c1      	mov	r9, r8
   12a8e:	e7cd      	b.n	12a2c <cbvprintf_package+0x234>
				if (fmt[-1] == 'L') {
   12a90:	7829      	ldrb	r1, [r5, #0]
   12a92:	294c      	cmp	r1, #76	; 0x4c
   12a94:	d01b      	beq.n	12ace <cbvprintf_package+0x2d6>
					v.d = va_arg(ap, double);
   12a96:	991a      	ldr	r1, [sp, #104]	; 0x68
   12a98:	3107      	adds	r1, #7
   12a9a:	f021 0107 	bic.w	r1, r1, #7
   12a9e:	f101 0008 	add.w	r0, r1, #8
   12aa2:	901a      	str	r0, [sp, #104]	; 0x68
   12aa4:	e9d1 0100 	ldrd	r0, r1, [r1]
				buf = (void *) ROUND_UP(buf, align);
   12aa8:	3407      	adds	r4, #7
   12aaa:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
   12aae:	b147      	cbz	r7, 12ac2 <cbvprintf_package+0x2ca>
					if (BUF_OFFSET + size > len) {
   12ab0:	1be6      	subs	r6, r4, r7
   12ab2:	3608      	adds	r6, #8
   12ab4:	4556      	cmp	r6, sl
   12ab6:	d814      	bhi.n	12ae2 <cbvprintf_package+0x2ea>
					} else if (fmt[-1] == 'L') {
   12ab8:	782d      	ldrb	r5, [r5, #0]
   12aba:	2d4c      	cmp	r5, #76	; 0x4c
   12abc:	d014      	beq.n	12ae8 <cbvprintf_package+0x2f0>
						*(double *)buf = v.d;
   12abe:	e9c4 0100 	strd	r0, r1, [r4]
				buf += size;
   12ac2:	3408      	adds	r4, #8
				parsing = false;
   12ac4:	2600      	movs	r6, #0
				continue;
   12ac6:	f04f 0808 	mov.w	r8, #8
   12aca:	46c1      	mov	r9, r8
   12acc:	e72f      	b.n	1292e <cbvprintf_package+0x136>
					v.ld = va_arg(ap, long double);
   12ace:	991a      	ldr	r1, [sp, #104]	; 0x68
   12ad0:	3107      	adds	r1, #7
   12ad2:	f021 0107 	bic.w	r1, r1, #7
   12ad6:	f101 0008 	add.w	r0, r1, #8
   12ada:	901a      	str	r0, [sp, #104]	; 0x68
   12adc:	e9d1 0100 	ldrd	r0, r1, [r1]
					size = sizeof(long double);
   12ae0:	e7e2      	b.n	12aa8 <cbvprintf_package+0x2b0>
						return -ENOSPC;
   12ae2:	f06f 001b 	mvn.w	r0, #27
   12ae6:	e0b7      	b.n	12c58 <cbvprintf_package+0x460>
						*(long double *)buf = v.ld;
   12ae8:	e9c4 0100 	strd	r0, r1, [r4]
   12aec:	e7e9      	b.n	12ac2 <cbvprintf_package+0x2ca>
				parsing = false;
   12aee:	2600      	movs	r6, #0
				align = VA_STACK_ALIGN(void *);
   12af0:	f04f 0804 	mov.w	r8, #4
				size = sizeof(void *);
   12af4:	46c1      	mov	r9, r8
   12af6:	e799      	b.n	12a2c <cbvprintf_package+0x234>
				is_str_arg = true;
   12af8:	4632      	mov	r2, r6
				parsing = false;
   12afa:	2600      	movs	r6, #0
				align = VA_STACK_ALIGN(void *);
   12afc:	f04f 0804 	mov.w	r8, #4
				size = sizeof(void *);
   12b00:	46c1      	mov	r9, r8
   12b02:	e793      	b.n	12a2c <cbvprintf_package+0x234>
			s = va_arg(ap, char *);
   12b04:	4604      	mov	r4, r0
   12b06:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   12b08:	1d11      	adds	r1, r2, #4
   12b0a:	911a      	str	r1, [sp, #104]	; 0x68
   12b0c:	6812      	ldr	r2, [r2, #0]
   12b0e:	9202      	str	r2, [sp, #8]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   12b10:	9a07      	ldr	r2, [sp, #28]
			if (*++fmt == '\0') {
   12b12:	461d      	mov	r5, r3
   12b14:	e698      	b.n	12848 <cbvprintf_package+0x50>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   12b16:	4b5f      	ldr	r3, [pc, #380]	; (12c94 <cbvprintf_package+0x49c>)
   12b18:	9a02      	ldr	r2, [sp, #8]
   12b1a:	429a      	cmp	r2, r3
   12b1c:	d304      	bcc.n	12b28 <cbvprintf_package+0x330>
   12b1e:	4b5e      	ldr	r3, [pc, #376]	; (12c98 <cbvprintf_package+0x4a0>)
   12b20:	429a      	cmp	r2, r3
   12b22:	d30a      	bcc.n	12b3a <cbvprintf_package+0x342>
   12b24:	2300      	movs	r3, #0
   12b26:	e000      	b.n	12b2a <cbvprintf_package+0x332>
   12b28:	2300      	movs	r3, #0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   12b2a:	2b00      	cmp	r3, #0
   12b2c:	f47f ae94 	bne.w	12858 <cbvprintf_package+0x60>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
   12b30:	9b05      	ldr	r3, [sp, #20]
   12b32:	f003 0202 	and.w	r2, r3, #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   12b36:	2000      	movs	r0, #0
   12b38:	e693      	b.n	12862 <cbvprintf_package+0x6a>
   12b3a:	2301      	movs	r3, #1
   12b3c:	e7f5      	b.n	12b2a <cbvprintf_package+0x332>
						s_rw_cnt++;
   12b3e:	9b06      	ldr	r3, [sp, #24]
   12b40:	3301      	adds	r3, #1
   12b42:	9306      	str	r3, [sp, #24]
   12b44:	e6b0      	b.n	128a8 <cbvprintf_package+0xb0>
				} else if (is_ro) {
   12b46:	b110      	cbz	r0, 12b4e <cbvprintf_package+0x356>
					len += 1;
   12b48:	f10a 0a01 	add.w	sl, sl, #1
   12b4c:	e6ac      	b.n	128a8 <cbvprintf_package+0xb0>
				} else if (rws_pos_en) {
   12b4e:	9b00      	ldr	r3, [sp, #0]
   12b50:	b113      	cbz	r3, 12b58 <cbvprintf_package+0x360>
					len += 2;
   12b52:	f10a 0a02 	add.w	sl, sl, #2
   12b56:	e6a7      	b.n	128a8 <cbvprintf_package+0xb0>
					len += strlen(s) + 1 + 1;
   12b58:	9802      	ldr	r0, [sp, #8]
   12b5a:	f013 fa34 	bl	25fc6 <strlen>
   12b5e:	1c83      	adds	r3, r0, #2
   12b60:	449a      	add	sl, r3
   12b62:	e6a1      	b.n	128a8 <cbvprintf_package+0xb0>
			int v = va_arg(ap, int);
   12b64:	991a      	ldr	r1, [sp, #104]	; 0x68
   12b66:	1d08      	adds	r0, r1, #4
   12b68:	901a      	str	r0, [sp, #104]	; 0x68
   12b6a:	6809      	ldr	r1, [r1, #0]
			if (buf0 != NULL) {
   12b6c:	b107      	cbz	r7, 12b70 <cbvprintf_package+0x378>
				*(int *)buf = v;
   12b6e:	6021      	str	r1, [r4, #0]
			buf += sizeof(int);
   12b70:	3404      	adds	r4, #4
   12b72:	e6dc      	b.n	1292e <cbvprintf_package+0x136>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
   12b74:	1be3      	subs	r3, r4, r7
   12b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   12b7a:	f080 8082 	bcs.w	12c82 <cbvprintf_package+0x48a>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
   12b7e:	b197      	cbz	r7, 12ba6 <cbvprintf_package+0x3ae>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
   12b80:	2200      	movs	r2, #0
   12b82:	603a      	str	r2, [r7, #0]

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   12b84:	089b      	lsrs	r3, r3, #2
   12b86:	703b      	strb	r3, [r7, #0]

	if (rws_pos_en) {
   12b88:	9b00      	ldr	r3, [sp, #0]
   12b8a:	b183      	cbz	r3, 12bae <cbvprintf_package+0x3b6>
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   12b8c:	9b06      	ldr	r3, [sp, #24]
   12b8e:	70fb      	strb	r3, [r7, #3]
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   12b90:	9b04      	ldr	r3, [sp, #16]
   12b92:	70bb      	strb	r3, [r7, #2]
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
   12b94:	bb1b      	cbnz	r3, 12bde <cbvprintf_package+0x3e6>
			/* retrieve the string pointer */
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
			/* clear the in-buffer pointer (less entropy if compressed) */
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
   12b96:	9d01      	ldr	r5, [sp, #4]
   12b98:	f8dd 900c 	ldr.w	r9, [sp, #12]
   12b9c:	f8dd b010 	ldr.w	fp, [sp, #16]
   12ba0:	f8dd 8008 	ldr.w	r8, [sp, #8]
   12ba4:	e03b      	b.n	12c1e <cbvprintf_package+0x426>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   12ba6:	4453      	add	r3, sl
   12ba8:	f1a3 0008 	sub.w	r0, r3, #8
   12bac:	e054      	b.n	12c58 <cbvprintf_package+0x460>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   12bae:	9b06      	ldr	r3, [sp, #24]
   12bb0:	707b      	strb	r3, [r7, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   12bb2:	e7ed      	b.n	12b90 <cbvprintf_package+0x398>
		for (i = 0; i < s_idx; i++) {
   12bb4:	3301      	adds	r3, #1
   12bb6:	4298      	cmp	r0, r3
   12bb8:	d9ed      	bls.n	12b96 <cbvprintf_package+0x39e>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   12bba:	f103 0240 	add.w	r2, r3, #64	; 0x40
   12bbe:	446a      	add	r2, sp
   12bc0:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   12bc4:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
   12bc8:	2a00      	cmp	r2, #0
   12bca:	daf3      	bge.n	12bb4 <cbvprintf_package+0x3bc>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   12bcc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   12bd0:	1be2      	subs	r2, r4, r7
   12bd2:	3201      	adds	r2, #1
   12bd4:	4552      	cmp	r2, sl
   12bd6:	d857      	bhi.n	12c88 <cbvprintf_package+0x490>
			*buf++ = pos;
   12bd8:	f804 1b01 	strb.w	r1, [r4], #1
   12bdc:	e7ea      	b.n	12bb4 <cbvprintf_package+0x3bc>
		for (i = 0; i < s_idx; i++) {
   12bde:	9b01      	ldr	r3, [sp, #4]
   12be0:	9803      	ldr	r0, [sp, #12]
   12be2:	e7e8      	b.n	12bb6 <cbvprintf_package+0x3be>
		if (rws_pos_en) {
   12be4:	9b00      	ldr	r3, [sp, #0]
   12be6:	b33b      	cbz	r3, 12c38 <cbvprintf_package+0x440>
			*buf++ = str_ptr_arg[i];
   12be8:	f105 0340 	add.w	r3, r5, #64	; 0x40
   12bec:	446b      	add	r3, sp
   12bee:	f813 3c20 	ldrb.w	r3, [r3, #-32]
   12bf2:	f804 3b01 	strb.w	r3, [r4], #1
			size = 0;
   12bf6:	9e01      	ldr	r6, [sp, #4]
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
   12bf8:	1be3      	subs	r3, r4, r7
   12bfa:	4433      	add	r3, r6
   12bfc:	3301      	adds	r3, #1
   12bfe:	4553      	cmp	r3, sl
   12c00:	d845      	bhi.n	12c8e <cbvprintf_package+0x496>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
   12c02:	f105 0340 	add.w	r3, r5, #64	; 0x40
   12c06:	446b      	add	r3, sp
   12c08:	f813 3c10 	ldrb.w	r3, [r3, #-16]
   12c0c:	f804 3b01 	strb.w	r3, [r4], #1
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
   12c10:	4632      	mov	r2, r6
   12c12:	4641      	mov	r1, r8
   12c14:	4620      	mov	r0, r4
   12c16:	f013 fa06 	bl	26026 <memcpy>
		buf += size;
   12c1a:	4434      	add	r4, r6
	for (i = 0; i < s_idx; i++) {
   12c1c:	3501      	adds	r5, #1
   12c1e:	45a9      	cmp	r9, r5
   12c20:	d919      	bls.n	12c56 <cbvprintf_package+0x45e>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   12c22:	f1bb 0f00 	cmp.w	fp, #0
   12c26:	d0dd      	beq.n	12be4 <cbvprintf_package+0x3ec>
   12c28:	f105 0340 	add.w	r3, r5, #64	; 0x40
   12c2c:	446b      	add	r3, sp
   12c2e:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
   12c32:	2b00      	cmp	r3, #0
   12c34:	dad6      	bge.n	12be4 <cbvprintf_package+0x3ec>
   12c36:	e7f1      	b.n	12c1c <cbvprintf_package+0x424>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   12c38:	f105 0340 	add.w	r3, r5, #64	; 0x40
   12c3c:	446b      	add	r3, sp
   12c3e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
   12c42:	f857 8023 	ldr.w	r8, [r7, r3, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   12c46:	2200      	movs	r2, #0
   12c48:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
			size = strlen(s) + 1;
   12c4c:	4640      	mov	r0, r8
   12c4e:	f013 f9ba 	bl	25fc6 <strlen>
   12c52:	1c46      	adds	r6, r0, #1
   12c54:	e7d0      	b.n	12bf8 <cbvprintf_package+0x400>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
   12c56:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   12c58:	b011      	add	sp, #68	; 0x44
   12c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
   12c5e:	f06f 000d 	mvn.w	r0, #13
   12c62:	e7f9      	b.n	12c58 <cbvprintf_package+0x460>
		return -ENOSPC;
   12c64:	f06f 001b 	mvn.w	r0, #27
   12c68:	e7f6      	b.n	12c58 <cbvprintf_package+0x460>
			return -ENOSPC;
   12c6a:	f06f 001b 	mvn.w	r0, #27
   12c6e:	e7f3      	b.n	12c58 <cbvprintf_package+0x460>
					return -EINVAL;
   12c70:	f06f 0015 	mvn.w	r0, #21
   12c74:	e7f0      	b.n	12c58 <cbvprintf_package+0x460>
					return -EINVAL;
   12c76:	f06f 0015 	mvn.w	r0, #21
   12c7a:	e7ed      	b.n	12c58 <cbvprintf_package+0x460>
			return -EINVAL;
   12c7c:	f06f 0015 	mvn.w	r0, #21
   12c80:	e7ea      	b.n	12c58 <cbvprintf_package+0x460>
		return -EINVAL;
   12c82:	f06f 0015 	mvn.w	r0, #21
   12c86:	e7e7      	b.n	12c58 <cbvprintf_package+0x460>
				return -ENOSPC;
   12c88:	f06f 001b 	mvn.w	r0, #27
   12c8c:	e7e4      	b.n	12c58 <cbvprintf_package+0x460>
			return -ENOSPC;
   12c8e:	f06f 001b 	mvn.w	r0, #27
   12c92:	e7e1      	b.n	12c58 <cbvprintf_package+0x460>
   12c94:	0002ae04 	.word	0x0002ae04
   12c98:	0002dd40 	.word	0x0002dd40

00012c9c <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
   12c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ca0:	b097      	sub	sp, #92	; 0x5c
   12ca2:	af00      	add	r7, sp, #0
   12ca4:	4683      	mov	fp, r0
   12ca6:	61ba      	str	r2, [r7, #24]
   12ca8:	613b      	str	r3, [r7, #16]
	__ASSERT_NO_MSG(in_packaged != NULL);

	uint8_t *buf = in_packaged;
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
   12caa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12cae:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   12cb2:	623b      	str	r3, [r7, #32]
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   12cb4:	60f9      	str	r1, [r7, #12]
   12cb6:	b151      	cbz	r1, 12cce <cbprintf_package_convert+0x32>

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
   12cb8:	f89b 6002 	ldrb.w	r6, [fp, #2]
   12cbc:	46b1      	mov	r9, r6
	ro_cpy = ros_nbr &&
   12cbe:	b156      	cbz	r6, 12cd6 <cbprintf_package_convert+0x3a>
   12cc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12cc4:	f013 0f01 	tst.w	r3, #1
   12cc8:	d111      	bne.n	12cee <cbprintf_package_convert+0x52>
   12cca:	2300      	movs	r3, #0
   12ccc:	e004      	b.n	12cd8 <cbprintf_package_convert+0x3c>
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   12cce:	f011 fbab 	bl	24428 <get_package_len>
   12cd2:	60f8      	str	r0, [r7, #12]
   12cd4:	e7f0      	b.n	12cb8 <cbprintf_package_convert+0x1c>
	ro_cpy = ros_nbr &&
   12cd6:	2300      	movs	r3, #0
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
   12cd8:	f89b 2003 	ldrb.w	r2, [fp, #3]
   12cdc:	627a      	str	r2, [r7, #36]	; 0x24
	rw_cpy = rws_nbr > 0 &&
   12cde:	b142      	cbz	r2, 12cf2 <cbprintf_package_convert+0x56>
   12ce0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   12ce4:	f012 0f02 	tst.w	r2, #2
   12ce8:	d122      	bne.n	12d30 <cbprintf_package_convert+0x94>
   12cea:	2200      	movs	r2, #0
   12cec:	e002      	b.n	12cf4 <cbprintf_package_convert+0x58>
	ro_cpy = ros_nbr &&
   12cee:	2301      	movs	r3, #1
   12cf0:	e7f2      	b.n	12cd8 <cbprintf_package_convert+0x3c>
	rw_cpy = rws_nbr > 0 &&
   12cf2:	2200      	movs	r2, #0

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
   12cf4:	b902      	cbnz	r2, 12cf8 <cbprintf_package_convert+0x5c>
   12cf6:	b1eb      	cbz	r3, 12d34 <cbprintf_package_convert+0x98>

	/* If we got here, it means that coping will be more complex and will be
	 * done with strings appending.
	 * Retrieve the size of the arg list.
	 */
	args_size = in_desc->len * sizeof(int);
   12cf8:	f89b 5000 	ldrb.w	r5, [fp]
   12cfc:	00aa      	lsls	r2, r5, #2
   12cfe:	60ba      	str	r2, [r7, #8]
	int out_len;

	/* Pointer to array with string locations. Array starts with read-only
	 * string locations.
	 */
	const char *fmt = *(const char **)(buf + sizeof(void *));
   12d00:	f8db 2004 	ldr.w	r2, [fp, #4]
   12d04:	617a      	str	r2, [r7, #20]
	uint8_t *str_pos = &buf[args_size];
   12d06:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
	size_t strl_cnt = 0;

	/* If null destination, just calculate output length. */
	if (cb == NULL) {
   12d0a:	69ba      	ldr	r2, [r7, #24]
   12d0c:	b1f2      	cbz	r2, 12d4c <cbprintf_package_convert+0xb0>

	/* If read-only strings shall be appended to the output package copy
	 * their indexes to the local array, otherwise indicate that indexes
	 * shall remain in the output package.
	 */
	if (ro_cpy) {
   12d0e:	2b00      	cmp	r3, #0
   12d10:	f040 8112 	bne.w	12f38 <cbprintf_package_convert+0x29c>
		scpy_cnt = ros_nbr;
		keep_cnt = 0;
		dst = cpy_str_pos;
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   12d14:	f1b9 0f00 	cmp.w	r9, #0
   12d18:	f000 811d 	beq.w	12f56 <cbprintf_package_convert+0x2ba>
   12d1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12d20:	f013 0f04 	tst.w	r3, #4
   12d24:	f040 811b 	bne.w	12f5e <cbprintf_package_convert+0x2c2>
		keep_cnt = ros_nbr;
		dst = keep_str_pos;
	} else {
		scpy_cnt = 0;
		keep_cnt = 0;
		dst = NULL;
   12d28:	2000      	movs	r0, #0
		keep_cnt = 0;
   12d2a:	61f8      	str	r0, [r7, #28]
		scpy_cnt = 0;
   12d2c:	4606      	mov	r6, r0
   12d2e:	e107      	b.n	12f40 <cbprintf_package_convert+0x2a4>
	rw_cpy = rws_nbr > 0 &&
   12d30:	2201      	movs	r2, #1
   12d32:	e7df      	b.n	12cf4 <cbprintf_package_convert+0x58>
		if (cb) {
   12d34:	69bb      	ldr	r3, [r7, #24]
   12d36:	b11b      	cbz	r3, 12d40 <cbprintf_package_convert+0xa4>
			cb(in_packaged, in_len, ctx);
   12d38:	693a      	ldr	r2, [r7, #16]
   12d3a:	68f9      	ldr	r1, [r7, #12]
   12d3c:	4658      	mov	r0, fp
   12d3e:	4798      	blx	r3
		return in_len;
   12d40:	68fc      	ldr	r4, [r7, #12]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
   12d42:	4620      	mov	r0, r4
   12d44:	375c      	adds	r7, #92	; 0x5c
   12d46:	46bd      	mov	sp, r7
   12d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_len = (int)in_len;
   12d4c:	68fc      	ldr	r4, [r7, #12]
		if (ro_cpy) {
   12d4e:	bb2b      	cbnz	r3, 12d9c <cbprintf_package_convert+0x100>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   12d50:	f1b9 0f00 	cmp.w	r9, #0
   12d54:	d038      	beq.n	12dc8 <cbprintf_package_convert+0x12c>
   12d56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12d5a:	f013 0304 	ands.w	r3, r3, #4
   12d5e:	613b      	str	r3, [r7, #16]
   12d60:	d027      	beq.n	12db2 <cbprintf_package_convert+0x116>
				str_pos += ros_nbr;
   12d62:	444d      	add	r5, r9
	size_t strl_cnt = 0;
   12d64:	2300      	movs	r3, #0
   12d66:	613b      	str	r3, [r7, #16]
   12d68:	e023      	b.n	12db2 <cbprintf_package_convert+0x116>
				out_len += len;
   12d6a:	4404      	add	r4, r0
				str_pos++;
   12d6c:	3501      	adds	r5, #1
			for (int i = 0; i < ros_nbr; i++) {
   12d6e:	3601      	adds	r6, #1
   12d70:	454e      	cmp	r6, r9
   12d72:	d21a      	bcs.n	12daa <cbprintf_package_convert+0x10e>
				const char *str = *(const char **)&buf32[*str_pos];
   12d74:	782a      	ldrb	r2, [r5, #0]
				int len = append_string(cb, NULL, str, 0);
   12d76:	2300      	movs	r3, #0
   12d78:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
   12d7c:	4619      	mov	r1, r3
   12d7e:	69b8      	ldr	r0, [r7, #24]
   12d80:	f011 fb67 	bl	24452 <append_string>
				if (strl && strl_cnt < strl_len) {
   12d84:	f1ba 0f00 	cmp.w	sl, #0
   12d88:	d0ef      	beq.n	12d6a <cbprintf_package_convert+0xce>
   12d8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   12d8e:	4598      	cmp	r8, r3
   12d90:	d2eb      	bcs.n	12d6a <cbprintf_package_convert+0xce>
					strl[strl_cnt++] = (uint16_t)len;
   12d92:	f82a 0018 	strh.w	r0, [sl, r8, lsl #1]
   12d96:	f108 0801 	add.w	r8, r8, #1
   12d9a:	e7e6      	b.n	12d6a <cbprintf_package_convert+0xce>
			for (int i = 0; i < ros_nbr; i++) {
   12d9c:	2600      	movs	r6, #0
	size_t strl_cnt = 0;
   12d9e:	46b0      	mov	r8, r6
   12da0:	f8c7 a01c 	str.w	sl, [r7, #28]
   12da4:	f8d7 a084 	ldr.w	sl, [r7, #132]	; 0x84
   12da8:	e7e2      	b.n	12d70 <cbprintf_package_convert+0xd4>
   12daa:	f8c7 8010 	str.w	r8, [r7, #16]
   12dae:	f8d7 a01c 	ldr.w	sl, [r7, #28]
		bool drop_ro_str_pos = !(flags &
   12db2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12db6:	f003 0305 	and.w	r3, r3, #5
   12dba:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < rws_nbr; i++) {
   12dbc:	f04f 0800 	mov.w	r8, #0
   12dc0:	46a1      	mov	r9, r4
   12dc2:	f8c7 b01c 	str.w	fp, [r7, #28]
   12dc6:	e0a1      	b.n	12f0c <cbprintf_package_convert+0x270>
	size_t strl_cnt = 0;
   12dc8:	f8c7 9010 	str.w	r9, [r7, #16]
   12dcc:	e7f1      	b.n	12db2 <cbprintf_package_convert+0x116>
   12dce:	2500      	movs	r5, #0
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   12dd0:	6a3b      	ldr	r3, [r7, #32]
   12dd2:	b97b      	cbnz	r3, 12df4 <cbprintf_package_convert+0x158>
			if (is_ro) {
   12dd4:	2d00      	cmp	r5, #0
   12dd6:	d07b      	beq.n	12ed0 <cbprintf_package_convert+0x234>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   12dd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12ddc:	f013 0f01 	tst.w	r3, #1
   12de0:	d17b      	bne.n	12eda <cbprintf_package_convert+0x23e>
					out_len -= drop_ro_str_pos ? 2 : 1;
   12de2:	68fb      	ldr	r3, [r7, #12]
   12de4:	2b00      	cmp	r3, #0
   12de6:	d171      	bne.n	12ecc <cbprintf_package_convert+0x230>
   12de8:	2302      	movs	r3, #2
   12dea:	eba9 0903 	sub.w	r9, r9, r3
   12dee:	e08a      	b.n	12f06 <cbprintf_package_convert+0x26a>
   12df0:	2501      	movs	r5, #1
   12df2:	e7ed      	b.n	12dd0 <cbprintf_package_convert+0x134>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   12df4:	4659      	mov	r1, fp
   12df6:	6978      	ldr	r0, [r7, #20]
   12df8:	f011 fb72 	bl	244e0 <is_ptr>
   12dfc:	2800      	cmp	r0, #0
   12dfe:	d0e9      	beq.n	12dd4 <cbprintf_package_convert+0x138>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   12e00:	466c      	mov	r4, sp
   12e02:	2300      	movs	r3, #0
   12e04:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
   12e08:	2302      	movs	r3, #2
   12e0a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
   12e0e:	b08a      	sub	sp, #40	; 0x28
   12e10:	4669      	mov	r1, sp
   12e12:	f111 0210 	adds.w	r2, r1, #16
   12e16:	d039      	beq.n	12e8c <cbprintf_package_convert+0x1f0>
   12e18:	2512      	movs	r5, #18
   12e1a:	b11a      	cbz	r2, 12e24 <cbprintf_package_convert+0x188>
   12e1c:	2d04      	cmp	r5, #4
   12e1e:	dd01      	ble.n	12e24 <cbprintf_package_convert+0x188>
   12e20:	4bb3      	ldr	r3, [pc, #716]	; (130f0 <cbprintf_package_convert+0x454>)
   12e22:	614b      	str	r3, [r1, #20]
   12e24:	2300      	movs	r3, #0
   12e26:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
   12e2a:	2302      	movs	r3, #2
   12e2c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
   12e30:	bb7a      	cbnz	r2, 12e92 <cbprintf_package_convert+0x1f6>
   12e32:	2d11      	cmp	r5, #17
   12e34:	dd47      	ble.n	12ec6 <cbprintf_package_convert+0x22a>
   12e36:	2312      	movs	r3, #18
   12e38:	b162      	cbz	r2, 12e54 <cbprintf_package_convert+0x1b8>
   12e3a:	2004      	movs	r0, #4
   12e3c:	f887 002c 	strb.w	r0, [r7, #44]	; 0x2c
   12e40:	2000      	movs	r0, #0
   12e42:	f887 002d 	strb.w	r0, [r7, #45]	; 0x2d
   12e46:	f887 002e 	strb.w	r0, [r7, #46]	; 0x2e
   12e4a:	2001      	movs	r0, #1
   12e4c:	f887 002f 	strb.w	r0, [r7, #47]	; 0x2f
   12e50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   12e52:	6108      	str	r0, [r1, #16]
   12e54:	f36f 0a00 	bfc	sl, #0, #1
   12e58:	f36f 0a41 	bfc	sl, #1, #1
   12e5c:	f36f 0a82 	bfc	sl, #2, #1
   12e60:	f36f 0ac5 	bfc	sl, #3, #3
   12e64:	2102      	movs	r1, #2
   12e66:	f361 1a88 	bfi	sl, r1, #6, #3
   12e6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
   12e6e:	f363 2a52 	bfi	sl, r3, #9, #10
   12e72:	f36f 4ade 	bfc	sl, #19, #12
   12e76:	f36f 7adf 	bfc	sl, #31, #1
   12e7a:	2300      	movs	r3, #0
   12e7c:	4651      	mov	r1, sl
   12e7e:	489d      	ldr	r0, [pc, #628]	; (130f4 <cbprintf_package_convert+0x458>)
   12e80:	f012 fc97 	bl	257b2 <z_impl_z_log_msg_static_create>
   12e84:	46a5      	mov	sp, r4
				out_len -= 2;
   12e86:	f1a9 0902 	sub.w	r9, r9, #2
				continue;
   12e8a:	e03c      	b.n	12f06 <cbprintf_package_convert+0x26a>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   12e8c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   12e90:	e7c3      	b.n	12e1a <cbprintf_package_convert+0x17e>
   12e92:	462b      	mov	r3, r5
   12e94:	2d08      	cmp	r5, #8
   12e96:	dd01      	ble.n	12e9c <cbprintf_package_convert+0x200>
   12e98:	6978      	ldr	r0, [r7, #20]
   12e9a:	6188      	str	r0, [r1, #24]
   12e9c:	2b0c      	cmp	r3, #12
   12e9e:	dd01      	ble.n	12ea4 <cbprintf_package_convert+0x208>
   12ea0:	f8c1 b01c 	str.w	fp, [r1, #28]
   12ea4:	f101 0320 	add.w	r3, r1, #32
   12ea8:	2000      	movs	r0, #0
   12eaa:	e009      	b.n	12ec0 <cbprintf_package_convert+0x224>
   12eac:	f100 0c30 	add.w	ip, r0, #48	; 0x30
   12eb0:	f107 0e28 	add.w	lr, r7, #40	; 0x28
   12eb4:	44f4      	add	ip, lr
   12eb6:	f81c cc30 	ldrb.w	ip, [ip, #-48]
   12eba:	f803 cb01 	strb.w	ip, [r3], #1
   12ebe:	3001      	adds	r0, #1
   12ec0:	2801      	cmp	r0, #1
   12ec2:	d9f3      	bls.n	12eac <cbprintf_package_convert+0x210>
   12ec4:	e7b5      	b.n	12e32 <cbprintf_package_convert+0x196>
   12ec6:	f06f 031b 	mvn.w	r3, #27
   12eca:	e7b5      	b.n	12e38 <cbprintf_package_convert+0x19c>
					out_len -= drop_ro_str_pos ? 2 : 1;
   12ecc:	2301      	movs	r3, #1
   12ece:	e78c      	b.n	12dea <cbprintf_package_convert+0x14e>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   12ed0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12ed4:	f013 0f02 	tst.w	r3, #2
   12ed8:	d015      	beq.n	12f06 <cbprintf_package_convert+0x26a>
				len = append_string(cb, NULL, str, 0);
   12eda:	2300      	movs	r3, #0
   12edc:	4622      	mov	r2, r4
   12ede:	4619      	mov	r1, r3
   12ee0:	69b8      	ldr	r0, [r7, #24]
   12ee2:	f011 fab6 	bl	24452 <append_string>
				if (strl && strl_cnt < strl_len) {
   12ee6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   12eea:	b153      	cbz	r3, 12f02 <cbprintf_package_convert+0x266>
   12eec:	693b      	ldr	r3, [r7, #16]
   12eee:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   12ef2:	4293      	cmp	r3, r2
   12ef4:	d205      	bcs.n	12f02 <cbprintf_package_convert+0x266>
					strl[strl_cnt++] = (uint16_t)len;
   12ef6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   12efa:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
   12efe:	3301      	adds	r3, #1
   12f00:	613b      	str	r3, [r7, #16]
				out_len += (len - 1);
   12f02:	3801      	subs	r0, #1
   12f04:	4481      	add	r9, r0
		for (int i = 0; i < rws_nbr; i++) {
   12f06:	f108 0801 	add.w	r8, r8, #1
			uint8_t arg_pos = *str_pos++;
   12f0a:	4635      	mov	r5, r6
		for (int i = 0; i < rws_nbr; i++) {
   12f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12f0e:	4598      	cmp	r8, r3
   12f10:	d210      	bcs.n	12f34 <cbprintf_package_convert+0x298>
			uint8_t arg_idx = *str_pos++;
   12f12:	462e      	mov	r6, r5
   12f14:	f816 bb02 	ldrb.w	fp, [r6], #2
			uint8_t arg_pos = *str_pos++;
   12f18:	786b      	ldrb	r3, [r5, #1]
			const char *str = *(const char **)&buf32[arg_pos];
   12f1a:	69fa      	ldr	r2, [r7, #28]
   12f1c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   12f20:	4b75      	ldr	r3, [pc, #468]	; (130f8 <cbprintf_package_convert+0x45c>)
   12f22:	429c      	cmp	r4, r3
   12f24:	f4ff af53 	bcc.w	12dce <cbprintf_package_convert+0x132>
   12f28:	4b74      	ldr	r3, [pc, #464]	; (130fc <cbprintf_package_convert+0x460>)
   12f2a:	429c      	cmp	r4, r3
   12f2c:	f4ff af60 	bcc.w	12df0 <cbprintf_package_convert+0x154>
   12f30:	2500      	movs	r5, #0
   12f32:	e74d      	b.n	12dd0 <cbprintf_package_convert+0x134>
   12f34:	464c      	mov	r4, r9
   12f36:	e704      	b.n	12d42 <cbprintf_package_convert+0xa6>
		dst = cpy_str_pos;
   12f38:	f107 0044 	add.w	r0, r7, #68	; 0x44
		keep_cnt = 0;
   12f3c:	2300      	movs	r3, #0
   12f3e:	61fb      	str	r3, [r7, #28]
	if (dst) {
   12f40:	b118      	cbz	r0, 12f4a <cbprintf_package_convert+0x2ae>
		memcpy(dst, str_pos, ros_nbr);
   12f42:	464a      	mov	r2, r9
   12f44:	4629      	mov	r1, r5
   12f46:	f013 f86e 	bl	26026 <memcpy>
	str_pos += ros_nbr;
   12f4a:	444d      	add	r5, r9
	for (int i = 0; i < rws_nbr; i++) {
   12f4c:	f04f 0800 	mov.w	r8, #0
   12f50:	f8c7 9004 	str.w	r9, [r7, #4]
   12f54:	e01e      	b.n	12f94 <cbprintf_package_convert+0x2f8>
		dst = NULL;
   12f56:	2000      	movs	r0, #0
		keep_cnt = 0;
   12f58:	61f8      	str	r0, [r7, #28]
		scpy_cnt = 0;
   12f5a:	4606      	mov	r6, r0
   12f5c:	e7f0      	b.n	12f40 <cbprintf_package_convert+0x2a4>
		keep_cnt = ros_nbr;
   12f5e:	61fe      	str	r6, [r7, #28]
		dst = keep_str_pos;
   12f60:	f107 0034 	add.w	r0, r7, #52	; 0x34
		scpy_cnt = 0;
   12f64:	2600      	movs	r6, #0
   12f66:	e7eb      	b.n	12f40 <cbprintf_package_convert+0x2a4>
   12f68:	2500      	movs	r5, #0
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   12f6a:	6a3b      	ldr	r3, [r7, #32]
   12f6c:	bb33      	cbnz	r3, 12fbc <cbprintf_package_convert+0x320>
		if (is_ro) {
   12f6e:	2d00      	cmp	r5, #0
   12f70:	d03b      	beq.n	12fea <cbprintf_package_convert+0x34e>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   12f72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12f76:	f013 0f01 	tst.w	r3, #1
   12f7a:	d026      	beq.n	12fca <cbprintf_package_convert+0x32e>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   12f7c:	1c73      	adds	r3, r6, #1
   12f7e:	f106 0230 	add.w	r2, r6, #48	; 0x30
   12f82:	f107 0128 	add.w	r1, r7, #40	; 0x28
   12f86:	1856      	adds	r6, r2, r1
   12f88:	f806 9c14 	strb.w	r9, [r6, #-20]
   12f8c:	b2de      	uxtb	r6, r3
	for (int i = 0; i < rws_nbr; i++) {
   12f8e:	f108 0801 	add.w	r8, r8, #1
		uint8_t arg_pos = *str_pos++;
   12f92:	4625      	mov	r5, r4
	for (int i = 0; i < rws_nbr; i++) {
   12f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12f96:	4598      	cmp	r8, r3
   12f98:	d24a      	bcs.n	13030 <cbprintf_package_convert+0x394>
		uint8_t arg_idx = *str_pos++;
   12f9a:	462c      	mov	r4, r5
   12f9c:	f814 ab02 	ldrb.w	sl, [r4], #2
		uint8_t arg_pos = *str_pos++;
   12fa0:	f895 9001 	ldrb.w	r9, [r5, #1]
		const char *str = *(const char **)&buf32[arg_pos];
   12fa4:	f85b 3029 	ldr.w	r3, [fp, r9, lsl #2]
   12fa8:	4a53      	ldr	r2, [pc, #332]	; (130f8 <cbprintf_package_convert+0x45c>)
   12faa:	4293      	cmp	r3, r2
   12fac:	d3dc      	bcc.n	12f68 <cbprintf_package_convert+0x2cc>
   12fae:	4a53      	ldr	r2, [pc, #332]	; (130fc <cbprintf_package_convert+0x460>)
   12fb0:	4293      	cmp	r3, r2
   12fb2:	d301      	bcc.n	12fb8 <cbprintf_package_convert+0x31c>
   12fb4:	2500      	movs	r5, #0
   12fb6:	e7d8      	b.n	12f6a <cbprintf_package_convert+0x2ce>
   12fb8:	2501      	movs	r5, #1
   12fba:	e7d6      	b.n	12f6a <cbprintf_package_convert+0x2ce>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   12fbc:	4651      	mov	r1, sl
   12fbe:	6978      	ldr	r0, [r7, #20]
   12fc0:	f011 fa8e 	bl	244e0 <is_ptr>
   12fc4:	2800      	cmp	r0, #0
   12fc6:	d0d2      	beq.n	12f6e <cbprintf_package_convert+0x2d2>
   12fc8:	e7e1      	b.n	12f8e <cbprintf_package_convert+0x2f2>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   12fca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12fce:	f013 0f04 	tst.w	r3, #4
   12fd2:	d0dc      	beq.n	12f8e <cbprintf_package_convert+0x2f2>
				keep_str_pos[keep_cnt++] = arg_pos;
   12fd4:	69fa      	ldr	r2, [r7, #28]
   12fd6:	1c53      	adds	r3, r2, #1
   12fd8:	3230      	adds	r2, #48	; 0x30
   12fda:	f107 0128 	add.w	r1, r7, #40	; 0x28
   12fde:	440a      	add	r2, r1
   12fe0:	f802 9c24 	strb.w	r9, [r2, #-36]
   12fe4:	b2db      	uxtb	r3, r3
   12fe6:	61fb      	str	r3, [r7, #28]
   12fe8:	e7d1      	b.n	12f8e <cbprintf_package_convert+0x2f2>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   12fea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12fee:	f013 0f02 	tst.w	r3, #2
   12ff2:	d009      	beq.n	13008 <cbprintf_package_convert+0x36c>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   12ff4:	1c73      	adds	r3, r6, #1
   12ff6:	f106 0230 	add.w	r2, r6, #48	; 0x30
   12ffa:	f107 0128 	add.w	r1, r7, #40	; 0x28
   12ffe:	1856      	adds	r6, r2, r1
   13000:	f806 9c14 	strb.w	r9, [r6, #-20]
   13004:	b2de      	uxtb	r6, r3
   13006:	e7c2      	b.n	12f8e <cbprintf_package_convert+0x2f2>
				keep_str_pos[keep_cnt++] = arg_idx;
   13008:	69f8      	ldr	r0, [r7, #28]
   1300a:	1c43      	adds	r3, r0, #1
   1300c:	f100 0130 	add.w	r1, r0, #48	; 0x30
   13010:	f107 0228 	add.w	r2, r7, #40	; 0x28
   13014:	188a      	adds	r2, r1, r2
   13016:	f802 ac24 	strb.w	sl, [r2, #-36]
				keep_str_pos[keep_cnt++] = arg_pos;
   1301a:	4602      	mov	r2, r0
   1301c:	3202      	adds	r2, #2
   1301e:	b2d2      	uxtb	r2, r2
   13020:	61fa      	str	r2, [r7, #28]
   13022:	f107 0258 	add.w	r2, r7, #88	; 0x58
   13026:	fa52 f383 	uxtab	r3, r2, r3
   1302a:	f803 9c24 	strb.w	r9, [r3, #-36]
   1302e:	e7ae      	b.n	12f8e <cbprintf_package_convert+0x2f2>
	out_desc.len = in_desc->len;
   13030:	f8d7 9004 	ldr.w	r9, [r7, #4]
   13034:	f89b 3000 	ldrb.w	r3, [fp]
   13038:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   1303c:	f89b 3001 	ldrb.w	r3, [fp, #1]
   13040:	4433      	add	r3, r6
   13042:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   13046:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1304a:	f013 0f02 	tst.w	r3, #2
   1304e:	d10e      	bne.n	1306e <cbprintf_package_convert+0x3d2>
   13050:	69fb      	ldr	r3, [r7, #28]
   13052:	f3c3 0347 	ubfx	r3, r3, #1, #8
   13056:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   1305a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1305e:	f013 0f01 	tst.w	r3, #1
   13062:	d106      	bne.n	13072 <cbprintf_package_convert+0x3d6>
   13064:	f013 0f04 	tst.w	r3, #4
   13068:	d13f      	bne.n	130ea <cbprintf_package_convert+0x44e>
   1306a:	2300      	movs	r3, #0
   1306c:	e002      	b.n	13074 <cbprintf_package_convert+0x3d8>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   1306e:	2300      	movs	r3, #0
   13070:	e7f1      	b.n	13056 <cbprintf_package_convert+0x3ba>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   13072:	2300      	movs	r3, #0
   13074:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	struct cbprintf_package_desc in_desc_backup = *in_desc;
   13078:	f8db 0000 	ldr.w	r0, [fp]
   1307c:	6338      	str	r0, [r7, #48]	; 0x30
	*in_desc = out_desc;
   1307e:	6d78      	ldr	r0, [r7, #84]	; 0x54
   13080:	f8cb 0000 	str.w	r0, [fp]
	rv = cb(in_packaged, args_size, ctx);
   13084:	f8d7 8010 	ldr.w	r8, [r7, #16]
   13088:	4642      	mov	r2, r8
   1308a:	68b9      	ldr	r1, [r7, #8]
   1308c:	4658      	mov	r0, fp
   1308e:	f8d7 a018 	ldr.w	sl, [r7, #24]
   13092:	47d0      	blx	sl
	if (rv < 0) {
   13094:	1e04      	subs	r4, r0, #0
   13096:	f6ff ae54 	blt.w	12d42 <cbprintf_package_convert+0xa6>
	*in_desc = in_desc_backup;
   1309a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1309c:	f8cb 0000 	str.w	r0, [fp]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   130a0:	f8c7 8010 	str.w	r8, [r7, #16]
   130a4:	4642      	mov	r2, r8
   130a6:	69f9      	ldr	r1, [r7, #28]
   130a8:	f107 0034 	add.w	r0, r7, #52	; 0x34
   130ac:	47d0      	blx	sl
	if (rv < 0) {
   130ae:	2800      	cmp	r0, #0
   130b0:	db57      	blt.n	13162 <cbprintf_package_convert+0x4c6>
	out_len += rv;
   130b2:	eb04 0800 	add.w	r8, r4, r0
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   130b6:	68b9      	ldr	r1, [r7, #8]
   130b8:	4449      	add	r1, r9
   130ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   130bc:	eb01 0143 	add.w	r1, r1, r3, lsl #1
	rv = cb(str_pos, strs_len, ctx);
   130c0:	f8d7 9010 	ldr.w	r9, [r7, #16]
   130c4:	464a      	mov	r2, r9
   130c6:	68fb      	ldr	r3, [r7, #12]
   130c8:	1a59      	subs	r1, r3, r1
   130ca:	4628      	mov	r0, r5
   130cc:	47d0      	blx	sl
	if (rv < 0) {
   130ce:	1e04      	subs	r4, r0, #0
   130d0:	f6ff ae37 	blt.w	12d42 <cbprintf_package_convert+0xa6>
	out_len += rv;
   130d4:	eb08 0504 	add.w	r5, r8, r4
	for (int i = 0; i < scpy_cnt; i++) {
   130d8:	f04f 0800 	mov.w	r8, #0
   130dc:	627e      	str	r6, [r7, #36]	; 0x24
   130de:	f8c7 b020 	str.w	fp, [r7, #32]
   130e2:	4656      	mov	r6, sl
   130e4:	f8d7 b084 	ldr.w	fp, [r7, #132]	; 0x84
   130e8:	e01f      	b.n	1312a <cbprintf_package_convert+0x48e>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   130ea:	69fb      	ldr	r3, [r7, #28]
   130ec:	e7c2      	b.n	13074 <cbprintf_package_convert+0x3d8>
   130ee:	bf00      	nop
   130f0:	0002b844 	.word	0x0002b844
   130f4:	0002b1cc 	.word	0x0002b1cc
   130f8:	0002ae04 	.word	0x0002ae04
   130fc:	0002dd40 	.word	0x0002dd40
		uint16_t str_len = strl ? strl[i] : 0;
   13100:	f04f 0a00 	mov.w	sl, #0
		rv = cb(&loc, 1, ctx);
   13104:	464a      	mov	r2, r9
   13106:	2101      	movs	r1, #1
   13108:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1310c:	47b0      	blx	r6
		if (rv < 0) {
   1310e:	2800      	cmp	r0, #0
   13110:	db29      	blt.n	13166 <cbprintf_package_convert+0x4ca>
		out_len += rv;
   13112:	4405      	add	r5, r0
		rv = append_string(cb, ctx, str, str_len);
   13114:	4653      	mov	r3, sl
   13116:	4622      	mov	r2, r4
   13118:	4649      	mov	r1, r9
   1311a:	4630      	mov	r0, r6
   1311c:	f011 f999 	bl	24452 <append_string>
		if (rv < 0) {
   13120:	2800      	cmp	r0, #0
   13122:	db22      	blt.n	1316a <cbprintf_package_convert+0x4ce>
		out_len += rv;
   13124:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
   13126:	f108 0801 	add.w	r8, r8, #1
   1312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1312c:	4598      	cmp	r8, r3
   1312e:	da11      	bge.n	13154 <cbprintf_package_convert+0x4b8>
		uint8_t loc = cpy_str_pos[i];
   13130:	f108 0330 	add.w	r3, r8, #48	; 0x30
   13134:	f107 0228 	add.w	r2, r7, #40	; 0x28
   13138:	4413      	add	r3, r2
   1313a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   1313e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		const char *str = *(const char **)&buf32[loc];
   13142:	6a3a      	ldr	r2, [r7, #32]
   13144:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
   13148:	f1bb 0f00 	cmp.w	fp, #0
   1314c:	d0d8      	beq.n	13100 <cbprintf_package_convert+0x464>
   1314e:	f83b a018 	ldrh.w	sl, [fp, r8, lsl #1]
   13152:	e7d7      	b.n	13104 <cbprintf_package_convert+0x468>
	(void)cb(NULL, 0, ctx);
   13154:	693a      	ldr	r2, [r7, #16]
   13156:	2100      	movs	r1, #0
   13158:	4608      	mov	r0, r1
   1315a:	69bb      	ldr	r3, [r7, #24]
   1315c:	4798      	blx	r3
	return out_len;
   1315e:	462c      	mov	r4, r5
   13160:	e5ef      	b.n	12d42 <cbprintf_package_convert+0xa6>
		return rv;
   13162:	4604      	mov	r4, r0
   13164:	e5ed      	b.n	12d42 <cbprintf_package_convert+0xa6>
   13166:	4604      	mov	r4, r0
   13168:	e5eb      	b.n	12d42 <cbprintf_package_convert+0xa6>
   1316a:	4604      	mov	r4, r0
   1316c:	e5e9      	b.n	12d42 <cbprintf_package_convert+0xa6>
   1316e:	bf00      	nop

00013170 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
   13170:	4b01      	ldr	r3, [pc, #4]	; (13178 <__printk_hook_install+0x8>)
   13172:	6018      	str	r0, [r3, #0]
}
   13174:	4770      	bx	lr
   13176:	bf00      	nop
   13178:	20000650 	.word	0x20000650

0001317c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   1317c:	b510      	push	{r4, lr}
   1317e:	b086      	sub	sp, #24
   13180:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   13182:	9003      	str	r0, [sp, #12]
   13184:	9104      	str	r1, [sp, #16]
   13186:	2100      	movs	r1, #0
   13188:	9105      	str	r1, [sp, #20]
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   1318a:	9100      	str	r1, [sp, #0]
   1318c:	a903      	add	r1, sp, #12
   1318e:	4806      	ldr	r0, [pc, #24]	; (131a8 <vsnprintk+0x2c>)
   13190:	f000 f924 	bl	133dc <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   13194:	9b05      	ldr	r3, [sp, #20]
   13196:	9a04      	ldr	r2, [sp, #16]
   13198:	4293      	cmp	r3, r2
   1319a:	da01      	bge.n	131a0 <vsnprintk+0x24>
		str[ctx.count] = '\0';
   1319c:	2200      	movs	r2, #0
   1319e:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
   131a0:	9805      	ldr	r0, [sp, #20]
   131a2:	b006      	add	sp, #24
   131a4:	bd10      	pop	{r4, pc}
   131a6:	bf00      	nop
   131a8:	0002456d 	.word	0x0002456d

000131ac <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   131ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   131b0:	b083      	sub	sp, #12
   131b2:	4604      	mov	r4, r0
   131b4:	4608      	mov	r0, r1
   131b6:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   131b8:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   131ba:	f013 0f08 	tst.w	r3, #8
   131be:	d105      	bne.n	131cc <process_event+0x20>
   131c0:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   131c4:	2300      	movs	r3, #0
   131c6:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
   131c8:	9301      	str	r3, [sp, #4]
}
   131ca:	e055      	b.n	13278 <process_event+0xcc>
		if (evt == EVT_COMPLETE) {
   131cc:	2901      	cmp	r1, #1
   131ce:	d009      	beq.n	131e4 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   131d0:	f043 0320 	orr.w	r3, r3, #32
   131d4:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   131d6:	f385 8811 	msr	BASEPRI, r5
   131da:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   131de:	b003      	add	sp, #12
   131e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   131e4:	f043 0310 	orr.w	r3, r3, #16
   131e8:	8323      	strh	r3, [r4, #24]
   131ea:	e7f4      	b.n	131d6 <process_event+0x2a>
			evt = process_recheck(mgr);
   131ec:	4620      	mov	r0, r4
   131ee:	f011 fc2e 	bl	24a4e <process_recheck>
   131f2:	e043      	b.n	1327c <process_event+0xd0>
			res = mgr->last_res;
   131f4:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
   131f8:	464a      	mov	r2, r9
   131fa:	4669      	mov	r1, sp
   131fc:	4620      	mov	r0, r4
   131fe:	f011 fc3f 	bl	24a80 <process_complete>
		onoff_transition_fn transit = NULL;
   13202:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   13206:	8b23      	ldrh	r3, [r4, #24]
   13208:	f003 0707 	and.w	r7, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1320c:	42b7      	cmp	r7, r6
   1320e:	d069      	beq.n	132e4 <process_event+0x138>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   13210:	68a2      	ldr	r2, [r4, #8]
   13212:	2a00      	cmp	r2, #0
   13214:	d066      	beq.n	132e4 <process_event+0x138>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   13216:	2201      	movs	r2, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   13218:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   1321c:	8323      	strh	r3, [r4, #24]
   1321e:	f385 8811 	msr	BASEPRI, r5
   13222:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   13226:	2a00      	cmp	r2, #0
   13228:	d164      	bne.n	132f4 <process_event+0x148>
   1322a:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
   1322c:	b12b      	cbz	r3, 1323a <process_event+0x8e>
				notify_all(mgr, &clients, state, res);
   1322e:	464b      	mov	r3, r9
   13230:	463a      	mov	r2, r7
   13232:	4669      	mov	r1, sp
   13234:	4620      	mov	r0, r4
   13236:	f011 fc9c 	bl	24b72 <notify_all>
			if (transit != NULL) {
   1323a:	f1b8 0f00 	cmp.w	r8, #0
   1323e:	d002      	beq.n	13246 <process_event+0x9a>
				transit(mgr, transition_complete);
   13240:	4934      	ldr	r1, [pc, #208]	; (13314 <process_event+0x168>)
   13242:	4620      	mov	r0, r4
   13244:	47c0      	blx	r8
	__asm__ volatile(
   13246:	f04f 0340 	mov.w	r3, #64	; 0x40
   1324a:	f3ef 8511 	mrs	r5, BASEPRI
   1324e:	f383 8812 	msr	BASEPRI_MAX, r3
   13252:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   13256:	8b23      	ldrh	r3, [r4, #24]
   13258:	f023 0308 	bic.w	r3, r3, #8
   1325c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   1325e:	8b23      	ldrh	r3, [r4, #24]
   13260:	f013 0f10 	tst.w	r3, #16
   13264:	d04c      	beq.n	13300 <process_event+0x154>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   13266:	f023 0310 	bic.w	r3, r3, #16
   1326a:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   1326c:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   1326e:	8b26      	ldrh	r6, [r4, #24]
   13270:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
   13274:	2800      	cmp	r0, #0
   13276:	d0ae      	beq.n	131d6 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
   13278:	2802      	cmp	r0, #2
   1327a:	d0b7      	beq.n	131ec <process_event+0x40>
		if (evt == EVT_NOP) {
   1327c:	2800      	cmp	r0, #0
   1327e:	d0aa      	beq.n	131d6 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
   13280:	3801      	subs	r0, #1
   13282:	2804      	cmp	r0, #4
   13284:	d82a      	bhi.n	132dc <process_event+0x130>
   13286:	a301      	add	r3, pc, #4	; (adr r3, 1328c <process_event+0xe0>)
   13288:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   1328c:	000131f5 	.word	0x000131f5
   13290:	000132dd 	.word	0x000132dd
   13294:	000132a1 	.word	0x000132a1
   13298:	000132b5 	.word	0x000132b5
   1329c:	000132c9 	.word	0x000132c9
			transit = mgr->transitions->start;
   132a0:	6923      	ldr	r3, [r4, #16]
   132a2:	f8d3 8000 	ldr.w	r8, [r3]
			set_state(mgr, ONOFF_STATE_TO_ON);
   132a6:	2106      	movs	r1, #6
   132a8:	4620      	mov	r0, r4
   132aa:	f011 fba6 	bl	249fa <set_state>
		res = 0;
   132ae:	f04f 0900 	mov.w	r9, #0
   132b2:	e7a8      	b.n	13206 <process_event+0x5a>
			transit = mgr->transitions->stop;
   132b4:	6923      	ldr	r3, [r4, #16]
   132b6:	f8d3 8004 	ldr.w	r8, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
   132ba:	2104      	movs	r1, #4
   132bc:	4620      	mov	r0, r4
   132be:	f011 fb9c 	bl	249fa <set_state>
		res = 0;
   132c2:	f04f 0900 	mov.w	r9, #0
   132c6:	e79e      	b.n	13206 <process_event+0x5a>
			transit = mgr->transitions->reset;
   132c8:	6923      	ldr	r3, [r4, #16]
   132ca:	f8d3 8008 	ldr.w	r8, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
   132ce:	2105      	movs	r1, #5
   132d0:	4620      	mov	r0, r4
   132d2:	f011 fb92 	bl	249fa <set_state>
		res = 0;
   132d6:	f04f 0900 	mov.w	r9, #0
   132da:	e794      	b.n	13206 <process_event+0x5a>
		if (evt == EVT_NOP) {
   132dc:	f04f 0800 	mov.w	r8, #0
   132e0:	46c1      	mov	r9, r8
   132e2:	e790      	b.n	13206 <process_event+0x5a>
   132e4:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
   132e6:	b10a      	cbz	r2, 132ec <process_event+0x140>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   132e8:	2200      	movs	r2, #0
   132ea:	e795      	b.n	13218 <process_event+0x6c>
		    || (transit != NULL)) {
   132ec:	f1b8 0f00 	cmp.w	r8, #0
   132f0:	d192      	bne.n	13218 <process_event+0x6c>
   132f2:	e7b4      	b.n	1325e <process_event+0xb2>
				notify_monitors(mgr, state, res);
   132f4:	464a      	mov	r2, r9
   132f6:	4639      	mov	r1, r7
   132f8:	4620      	mov	r0, r4
   132fa:	f011 fb86 	bl	24a0a <notify_monitors>
   132fe:	e794      	b.n	1322a <process_event+0x7e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   13300:	f013 0f20 	tst.w	r3, #32
   13304:	d004      	beq.n	13310 <process_event+0x164>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   13306:	f023 0320 	bic.w	r3, r3, #32
   1330a:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
   1330c:	2002      	movs	r0, #2
   1330e:	e7ae      	b.n	1326e <process_event+0xc2>
		evt = EVT_NOP;
   13310:	2000      	movs	r0, #0
   13312:	e7ac      	b.n	1326e <process_event+0xc2>
   13314:	00024ba1 	.word	0x00024ba1

00013318 <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
   13318:	4684      	mov	ip, r0
   1331a:	4608      	mov	r0, r1
	bool loop = true;
   1331c:	2201      	movs	r2, #1
   1331e:	e026      	b.n	1336e <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
   13320:	f89c 3000 	ldrb.w	r3, [ip]
   13324:	f043 0304 	orr.w	r3, r3, #4
   13328:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
   1332c:	b1f2      	cbz	r2, 1336c <extract_flags+0x54>
			++sp;
   1332e:	3001      	adds	r0, #1
   13330:	e01c      	b.n	1336c <extract_flags+0x54>
			conv->flag_plus = true;
   13332:	f89c 3000 	ldrb.w	r3, [ip]
   13336:	f043 0308 	orr.w	r3, r3, #8
   1333a:	f88c 3000 	strb.w	r3, [ip]
			break;
   1333e:	e7f5      	b.n	1332c <extract_flags+0x14>
			conv->flag_space = true;
   13340:	f89c 3000 	ldrb.w	r3, [ip]
   13344:	f043 0310 	orr.w	r3, r3, #16
   13348:	f88c 3000 	strb.w	r3, [ip]
			break;
   1334c:	e7ee      	b.n	1332c <extract_flags+0x14>
			conv->flag_hash = true;
   1334e:	f89c 3000 	ldrb.w	r3, [ip]
   13352:	f043 0320 	orr.w	r3, r3, #32
   13356:	f88c 3000 	strb.w	r3, [ip]
			break;
   1335a:	e7e7      	b.n	1332c <extract_flags+0x14>
			conv->flag_zero = true;
   1335c:	f89c 3000 	ldrb.w	r3, [ip]
   13360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13364:	f88c 3000 	strb.w	r3, [ip]
			break;
   13368:	e7e0      	b.n	1332c <extract_flags+0x14>
		switch (*sp) {
   1336a:	2200      	movs	r2, #0
		}
	} while (loop);
   1336c:	b342      	cbz	r2, 133c0 <extract_flags+0xa8>
		switch (*sp) {
   1336e:	7803      	ldrb	r3, [r0, #0]
   13370:	3b20      	subs	r3, #32
   13372:	2b10      	cmp	r3, #16
   13374:	d8f9      	bhi.n	1336a <extract_flags+0x52>
   13376:	a101      	add	r1, pc, #4	; (adr r1, 1337c <extract_flags+0x64>)
   13378:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1337c:	00013341 	.word	0x00013341
   13380:	0001336b 	.word	0x0001336b
   13384:	0001336b 	.word	0x0001336b
   13388:	0001334f 	.word	0x0001334f
   1338c:	0001336b 	.word	0x0001336b
   13390:	0001336b 	.word	0x0001336b
   13394:	0001336b 	.word	0x0001336b
   13398:	0001336b 	.word	0x0001336b
   1339c:	0001336b 	.word	0x0001336b
   133a0:	0001336b 	.word	0x0001336b
   133a4:	0001336b 	.word	0x0001336b
   133a8:	00013333 	.word	0x00013333
   133ac:	0001336b 	.word	0x0001336b
   133b0:	00013321 	.word	0x00013321
   133b4:	0001336b 	.word	0x0001336b
   133b8:	0001336b 	.word	0x0001336b
   133bc:	0001335d 	.word	0x0001335d

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
   133c0:	f89c 3000 	ldrb.w	r3, [ip]
   133c4:	f003 0344 	and.w	r3, r3, #68	; 0x44
   133c8:	2b44      	cmp	r3, #68	; 0x44
   133ca:	d000      	beq.n	133ce <extract_flags+0xb6>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
   133cc:	4770      	bx	lr
		conv->flag_zero = false;
   133ce:	f89c 3000 	ldrb.w	r3, [ip]
   133d2:	f36f 1386 	bfc	r3, #6, #1
   133d6:	f88c 3000 	strb.w	r3, [ip]
   133da:	e7f7      	b.n	133cc <extract_flags+0xb4>

000133dc <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   133dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133e0:	b091      	sub	sp, #68	; 0x44
   133e2:	4606      	mov	r6, r0
   133e4:	460d      	mov	r5, r1
   133e6:	4691      	mov	r9, r2
   133e8:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   133ea:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   133ec:	f899 0000 	ldrb.w	r0, [r9]
   133f0:	2800      	cmp	r0, #0
   133f2:	f000 82b9 	beq.w	13968 <z_cbvprintf_impl+0x58c>
		if (*fp != '%') {
   133f6:	2825      	cmp	r0, #37	; 0x25
   133f8:	d008      	beq.n	1340c <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
   133fa:	f109 0901 	add.w	r9, r9, #1
   133fe:	4629      	mov	r1, r5
   13400:	47b0      	blx	r6
   13402:	2800      	cmp	r0, #0
   13404:	f2c0 82b1 	blt.w	1396a <z_cbvprintf_impl+0x58e>
   13408:	3401      	adds	r4, #1
			continue;
   1340a:	e7ef      	b.n	133ec <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
   1340c:	2300      	movs	r3, #0
   1340e:	9304      	str	r3, [sp, #16]
   13410:	9305      	str	r3, [sp, #20]
   13412:	9306      	str	r3, [sp, #24]
   13414:	9307      	str	r3, [sp, #28]
   13416:	9308      	str	r3, [sp, #32]
   13418:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
   1341a:	4649      	mov	r1, r9
   1341c:	a806      	add	r0, sp, #24
   1341e:	f011 fdef 	bl	25000 <extract_conversion>
   13422:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
   13424:	f89d 3019 	ldrb.w	r3, [sp, #25]
   13428:	f013 0f01 	tst.w	r3, #1
   1342c:	f000 8097 	beq.w	1355e <z_cbvprintf_impl+0x182>
			width = va_arg(ap, int);
   13430:	9b03      	ldr	r3, [sp, #12]
   13432:	1d1a      	adds	r2, r3, #4
   13434:	9203      	str	r2, [sp, #12]
   13436:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
   13438:	2f00      	cmp	r7, #0
   1343a:	f2c0 8088 	blt.w	1354e <z_cbvprintf_impl+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
   1343e:	f89d 3019 	ldrb.w	r3, [sp, #25]
   13442:	f013 0f04 	tst.w	r3, #4
   13446:	f000 809c 	beq.w	13582 <z_cbvprintf_impl+0x1a6>
			int arg = va_arg(ap, int);
   1344a:	9b03      	ldr	r3, [sp, #12]
   1344c:	1d1a      	adds	r2, r3, #4
   1344e:	9203      	str	r2, [sp, #12]
   13450:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
   13454:	f1ba 0f00 	cmp.w	sl, #0
   13458:	f2c0 808a 	blt.w	13570 <z_cbvprintf_impl+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
   1345c:	2300      	movs	r3, #0
   1345e:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
   13460:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
   13462:	f89d 301a 	ldrb.w	r3, [sp, #26]
   13466:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
   1346a:	f89d 1019 	ldrb.w	r1, [sp, #25]
   1346e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
   13472:	2b01      	cmp	r3, #1
   13474:	f000 808e 	beq.w	13594 <z_cbvprintf_impl+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
   13478:	2b02      	cmp	r3, #2
   1347a:	f000 80d3 	beq.w	13624 <z_cbvprintf_impl+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
   1347e:	2b04      	cmp	r3, #4
   13480:	f000 8124 	beq.w	136cc <z_cbvprintf_impl+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
   13484:	2b03      	cmp	r3, #3
   13486:	f000 813b 	beq.w	13700 <z_cbvprintf_impl+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
   1348a:	f89d 8018 	ldrb.w	r8, [sp, #24]
   1348e:	f018 0b03 	ands.w	fp, r8, #3
   13492:	f040 813b 	bne.w	1370c <z_cbvprintf_impl+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
   13496:	f89d 301b 	ldrb.w	r3, [sp, #27]
   1349a:	3b25      	subs	r3, #37	; 0x25
   1349c:	2b53      	cmp	r3, #83	; 0x53
   1349e:	f200 81ca 	bhi.w	13836 <z_cbvprintf_impl+0x45a>
   134a2:	e8df f013 	tbh	[pc, r3, lsl #1]
   134a6:	0140      	.short	0x0140
   134a8:	01c801c8 	.word	0x01c801c8
   134ac:	01c801c8 	.word	0x01c801c8
   134b0:	01c801c8 	.word	0x01c801c8
   134b4:	01c801c8 	.word	0x01c801c8
   134b8:	01c801c8 	.word	0x01c801c8
   134bc:	01c801c8 	.word	0x01c801c8
   134c0:	01c801c8 	.word	0x01c801c8
   134c4:	01c801c8 	.word	0x01c801c8
   134c8:	01c801c8 	.word	0x01c801c8
   134cc:	01c801c8 	.word	0x01c801c8
   134d0:	01c801c8 	.word	0x01c801c8
   134d4:	01c801c8 	.word	0x01c801c8
   134d8:	01c801c8 	.word	0x01c801c8
   134dc:	01c801c8 	.word	0x01c801c8
   134e0:	01c801c8 	.word	0x01c801c8
   134e4:	01c801c8 	.word	0x01c801c8
   134e8:	01c801c8 	.word	0x01c801c8
   134ec:	01c801c8 	.word	0x01c801c8
   134f0:	01c801c8 	.word	0x01c801c8
   134f4:	01c801c8 	.word	0x01c801c8
   134f8:	01c801c8 	.word	0x01c801c8
   134fc:	01c801c8 	.word	0x01c801c8
   13500:	01c801c8 	.word	0x01c801c8
   13504:	01c801c8 	.word	0x01c801c8
   13508:	01c801c8 	.word	0x01c801c8
   1350c:	01c80181 	.word	0x01c80181
   13510:	01c801c8 	.word	0x01c801c8
   13514:	01c801c8 	.word	0x01c801c8
   13518:	01c801c8 	.word	0x01c801c8
   1351c:	01c801c8 	.word	0x01c801c8
   13520:	015e01c8 	.word	0x015e01c8
   13524:	01c80167 	.word	0x01c80167
   13528:	01c801c8 	.word	0x01c801c8
   1352c:	016701c8 	.word	0x016701c8
   13530:	01c801c8 	.word	0x01c801c8
   13534:	01c801c8 	.word	0x01c801c8
   13538:	018101bd 	.word	0x018101bd
   1353c:	01c801a1 	.word	0x01c801a1
   13540:	014d01c8 	.word	0x014d01c8
   13544:	018101c8 	.word	0x018101c8
   13548:	01c801c8 	.word	0x01c801c8
   1354c:	0181      	.short	0x0181
				conv->flag_dash = true;
   1354e:	f89d 3018 	ldrb.w	r3, [sp, #24]
   13552:	f043 0304 	orr.w	r3, r3, #4
   13556:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
   1355a:	427f      	negs	r7, r7
   1355c:	e76f      	b.n	1343e <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
   1355e:	f99d 3018 	ldrsb.w	r3, [sp, #24]
   13562:	2b00      	cmp	r3, #0
   13564:	db02      	blt.n	1356c <z_cbvprintf_impl+0x190>
		int width = -1;
   13566:	f04f 37ff 	mov.w	r7, #4294967295
   1356a:	e768      	b.n	1343e <z_cbvprintf_impl+0x62>
			width = conv->width_value;
   1356c:	9f07      	ldr	r7, [sp, #28]
   1356e:	e766      	b.n	1343e <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
   13570:	f89d 3019 	ldrb.w	r3, [sp, #25]
   13574:	f36f 0341 	bfc	r3, #1, #1
   13578:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
   1357c:	f04f 3aff 	mov.w	sl, #4294967295
   13580:	e76c      	b.n	1345c <z_cbvprintf_impl+0x80>
		} else if (conv->prec_present) {
   13582:	f013 0f02 	tst.w	r3, #2
   13586:	d002      	beq.n	1358e <z_cbvprintf_impl+0x1b2>
			precision = conv->prec_value;
   13588:	f8dd a020 	ldr.w	sl, [sp, #32]
   1358c:	e766      	b.n	1345c <z_cbvprintf_impl+0x80>
		int precision = -1;
   1358e:	f04f 3aff 	mov.w	sl, #4294967295
   13592:	e763      	b.n	1345c <z_cbvprintf_impl+0x80>
			switch (length_mod) {
   13594:	1ecb      	subs	r3, r1, #3
   13596:	2b04      	cmp	r3, #4
   13598:	d804      	bhi.n	135a4 <z_cbvprintf_impl+0x1c8>
   1359a:	e8df f003 	tbb	[pc, r3]
   1359e:	1d0b      	.short	0x1d0b
   135a0:	3529      	.short	0x3529
   135a2:	35          	.byte	0x35
   135a3:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   135a4:	9b03      	ldr	r3, [sp, #12]
   135a6:	1d1a      	adds	r2, r3, #4
   135a8:	9203      	str	r2, [sp, #12]
   135aa:	681b      	ldr	r3, [r3, #0]
   135ac:	17da      	asrs	r2, r3, #31
   135ae:	9304      	str	r3, [sp, #16]
   135b0:	9205      	str	r2, [sp, #20]
				break;
   135b2:	e006      	b.n	135c2 <z_cbvprintf_impl+0x1e6>
					value->sint = va_arg(ap, long);
   135b4:	9b03      	ldr	r3, [sp, #12]
   135b6:	1d1a      	adds	r2, r3, #4
   135b8:	9203      	str	r2, [sp, #12]
   135ba:	681b      	ldr	r3, [r3, #0]
   135bc:	17da      	asrs	r2, r3, #31
   135be:	9304      	str	r3, [sp, #16]
   135c0:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
   135c2:	2901      	cmp	r1, #1
   135c4:	d028      	beq.n	13618 <z_cbvprintf_impl+0x23c>
			} else if (length_mod == LENGTH_H) {
   135c6:	2902      	cmp	r1, #2
   135c8:	f47f af5f 	bne.w	1348a <z_cbvprintf_impl+0xae>
				value->sint = (short)value->sint;
   135cc:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
   135d0:	17da      	asrs	r2, r3, #31
   135d2:	9304      	str	r3, [sp, #16]
   135d4:	9205      	str	r2, [sp, #20]
   135d6:	e758      	b.n	1348a <z_cbvprintf_impl+0xae>
					(sint_value_type)va_arg(ap, long long);
   135d8:	9b03      	ldr	r3, [sp, #12]
   135da:	3307      	adds	r3, #7
   135dc:	f023 0307 	bic.w	r3, r3, #7
   135e0:	f103 0208 	add.w	r2, r3, #8
   135e4:	9203      	str	r2, [sp, #12]
   135e6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   135ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   135ee:	e7e8      	b.n	135c2 <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
   135f0:	9b03      	ldr	r3, [sp, #12]
   135f2:	3307      	adds	r3, #7
   135f4:	f023 0307 	bic.w	r3, r3, #7
   135f8:	f103 0208 	add.w	r2, r3, #8
   135fc:	9203      	str	r2, [sp, #12]
   135fe:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   13602:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   13606:	e7dc      	b.n	135c2 <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   13608:	9b03      	ldr	r3, [sp, #12]
   1360a:	1d1a      	adds	r2, r3, #4
   1360c:	9203      	str	r2, [sp, #12]
   1360e:	681b      	ldr	r3, [r3, #0]
   13610:	17da      	asrs	r2, r3, #31
				value->sint =
   13612:	9304      	str	r3, [sp, #16]
   13614:	9205      	str	r2, [sp, #20]
				break;
   13616:	e7d4      	b.n	135c2 <z_cbvprintf_impl+0x1e6>
				value->sint = (signed char)value->sint;
   13618:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   1361c:	17da      	asrs	r2, r3, #31
   1361e:	9304      	str	r3, [sp, #16]
   13620:	9205      	str	r2, [sp, #20]
   13622:	e732      	b.n	1348a <z_cbvprintf_impl+0xae>
			switch (length_mod) {
   13624:	1ecb      	subs	r3, r1, #3
   13626:	2b04      	cmp	r3, #4
   13628:	d804      	bhi.n	13634 <z_cbvprintf_impl+0x258>
   1362a:	e8df f003 	tbb	[pc, r3]
   1362e:	1f0b      	.short	0x1f0b
   13630:	4135      	.short	0x4135
   13632:	41          	.byte	0x41
   13633:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
   13634:	9b03      	ldr	r3, [sp, #12]
   13636:	1d1a      	adds	r2, r3, #4
   13638:	9203      	str	r2, [sp, #12]
   1363a:	681b      	ldr	r3, [r3, #0]
   1363c:	9304      	str	r3, [sp, #16]
   1363e:	2300      	movs	r3, #0
   13640:	9305      	str	r3, [sp, #20]
				break;
   13642:	e01e      	b.n	13682 <z_cbvprintf_impl+0x2a6>
				    && (conv->specifier == 'c')) {
   13644:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
   13648:	2b63      	cmp	r3, #99	; 0x63
   1364a:	d007      	beq.n	1365c <z_cbvprintf_impl+0x280>
					value->uint = va_arg(ap, unsigned long);
   1364c:	9b03      	ldr	r3, [sp, #12]
   1364e:	1d1a      	adds	r2, r3, #4
   13650:	9203      	str	r2, [sp, #12]
   13652:	681b      	ldr	r3, [r3, #0]
   13654:	9304      	str	r3, [sp, #16]
   13656:	2300      	movs	r3, #0
   13658:	9305      	str	r3, [sp, #20]
   1365a:	e012      	b.n	13682 <z_cbvprintf_impl+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
   1365c:	9b03      	ldr	r3, [sp, #12]
   1365e:	1d1a      	adds	r2, r3, #4
   13660:	9203      	str	r2, [sp, #12]
   13662:	681b      	ldr	r3, [r3, #0]
   13664:	9304      	str	r3, [sp, #16]
   13666:	2300      	movs	r3, #0
   13668:	9305      	str	r3, [sp, #20]
   1366a:	e00a      	b.n	13682 <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap,
   1366c:	9b03      	ldr	r3, [sp, #12]
   1366e:	3307      	adds	r3, #7
   13670:	f023 0307 	bic.w	r3, r3, #7
   13674:	f103 0208 	add.w	r2, r3, #8
   13678:	9203      	str	r2, [sp, #12]
   1367a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   1367e:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
   13682:	2901      	cmp	r1, #1
   13684:	d01c      	beq.n	136c0 <z_cbvprintf_impl+0x2e4>
			} else if (length_mod == LENGTH_H) {
   13686:	2902      	cmp	r1, #2
   13688:	f47f aeff 	bne.w	1348a <z_cbvprintf_impl+0xae>
				value->uint = (unsigned short)value->uint;
   1368c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   13690:	9304      	str	r3, [sp, #16]
   13692:	2300      	movs	r3, #0
   13694:	9305      	str	r3, [sp, #20]
   13696:	e6f8      	b.n	1348a <z_cbvprintf_impl+0xae>
					(uint_value_type)va_arg(ap,
   13698:	9b03      	ldr	r3, [sp, #12]
   1369a:	3307      	adds	r3, #7
   1369c:	f023 0307 	bic.w	r3, r3, #7
   136a0:	f103 0208 	add.w	r2, r3, #8
   136a4:	9203      	str	r2, [sp, #12]
   136a6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   136aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   136ae:	e7e8      	b.n	13682 <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
   136b0:	9b03      	ldr	r3, [sp, #12]
   136b2:	1d1a      	adds	r2, r3, #4
   136b4:	9203      	str	r2, [sp, #12]
   136b6:	681b      	ldr	r3, [r3, #0]
				value->uint =
   136b8:	9304      	str	r3, [sp, #16]
   136ba:	2300      	movs	r3, #0
   136bc:	9305      	str	r3, [sp, #20]
				break;
   136be:	e7e0      	b.n	13682 <z_cbvprintf_impl+0x2a6>
				value->uint = (unsigned char)value->uint;
   136c0:	f89d 3010 	ldrb.w	r3, [sp, #16]
   136c4:	9304      	str	r3, [sp, #16]
   136c6:	2300      	movs	r3, #0
   136c8:	9305      	str	r3, [sp, #20]
   136ca:	e6de      	b.n	1348a <z_cbvprintf_impl+0xae>
			if (length_mod == LENGTH_UPPER_L) {
   136cc:	2908      	cmp	r1, #8
   136ce:	d00b      	beq.n	136e8 <z_cbvprintf_impl+0x30c>
				value->dbl = va_arg(ap, double);
   136d0:	9b03      	ldr	r3, [sp, #12]
   136d2:	3307      	adds	r3, #7
   136d4:	f023 0307 	bic.w	r3, r3, #7
   136d8:	f103 0208 	add.w	r2, r3, #8
   136dc:	9203      	str	r2, [sp, #12]
   136de:	e9d3 2300 	ldrd	r2, r3, [r3]
   136e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
   136e6:	e6d0      	b.n	1348a <z_cbvprintf_impl+0xae>
				value->ldbl = va_arg(ap, long double);
   136e8:	9b03      	ldr	r3, [sp, #12]
   136ea:	3307      	adds	r3, #7
   136ec:	f023 0307 	bic.w	r3, r3, #7
   136f0:	f103 0208 	add.w	r2, r3, #8
   136f4:	9203      	str	r2, [sp, #12]
   136f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   136fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
   136fe:	e6c4      	b.n	1348a <z_cbvprintf_impl+0xae>
			value->ptr = va_arg(ap, void *);
   13700:	9b03      	ldr	r3, [sp, #12]
   13702:	1d1a      	adds	r2, r3, #4
   13704:	9203      	str	r2, [sp, #12]
   13706:	681b      	ldr	r3, [r3, #0]
   13708:	9304      	str	r3, [sp, #16]
   1370a:	e6be      	b.n	1348a <z_cbvprintf_impl+0xae>
			OUTS(sp, fp);
   1370c:	9f02      	ldr	r7, [sp, #8]
   1370e:	463b      	mov	r3, r7
   13710:	464a      	mov	r2, r9
   13712:	4629      	mov	r1, r5
   13714:	4630      	mov	r0, r6
   13716:	f011 fd19 	bl	2514c <outs>
   1371a:	2800      	cmp	r0, #0
   1371c:	f2c0 8125 	blt.w	1396a <z_cbvprintf_impl+0x58e>
   13720:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
   13722:	46b9      	mov	r9, r7
			continue;
   13724:	e662      	b.n	133ec <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
   13726:	4629      	mov	r1, r5
   13728:	2025      	movs	r0, #37	; 0x25
   1372a:	47b0      	blx	r6
   1372c:	2800      	cmp	r0, #0
   1372e:	f2c0 811c 	blt.w	1396a <z_cbvprintf_impl+0x58e>
   13732:	3401      	adds	r4, #1
		char sign = 0;
   13734:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
   13736:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
   1373a:	f04f 0900 	mov.w	r9, #0
			break;
   1373e:	e07f      	b.n	13840 <z_cbvprintf_impl+0x464>
		case 's': {
			bps = (const char *)value->ptr;
   13740:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
   13744:	f1ba 0f00 	cmp.w	sl, #0
   13748:	db07      	blt.n	1375a <z_cbvprintf_impl+0x37e>
				len = strnlen(bps, precision);
   1374a:	4651      	mov	r1, sl
   1374c:	4648      	mov	r0, r9
   1374e:	f012 fc43 	bl	25fd8 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
   13752:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
   13756:	46d8      	mov	r8, fp
			precision = -1;

			break;
   13758:	e072      	b.n	13840 <z_cbvprintf_impl+0x464>
				len = strlen(bps);
   1375a:	4648      	mov	r0, r9
   1375c:	f012 fc33 	bl	25fc6 <strlen>
   13760:	e7f7      	b.n	13752 <z_cbvprintf_impl+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   13762:	9b04      	ldr	r3, [sp, #16]
   13764:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
   13768:	46d8      	mov	r8, fp
			bpe = buf + 1;
   1376a:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
   1376e:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
   13772:	e065      	b.n	13840 <z_cbvprintf_impl+0x464>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
   13774:	f018 0f08 	tst.w	r8, #8
   13778:	d105      	bne.n	13786 <z_cbvprintf_impl+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
   1377a:	f018 0810 	ands.w	r8, r8, #16
   1377e:	d004      	beq.n	1378a <z_cbvprintf_impl+0x3ae>
				sign = ' ';
   13780:	f04f 0820 	mov.w	r8, #32
   13784:	e001      	b.n	1378a <z_cbvprintf_impl+0x3ae>
				sign = '+';
   13786:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
   1378a:	9a04      	ldr	r2, [sp, #16]
   1378c:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
   1378e:	2b00      	cmp	r3, #0
   13790:	db02      	blt.n	13798 <z_cbvprintf_impl+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
   13792:	9204      	str	r2, [sp, #16]
   13794:	9305      	str	r3, [sp, #20]
   13796:	e008      	b.n	137aa <z_cbvprintf_impl+0x3ce>
				value->uint = (uint_value_type)-sint;
   13798:	4252      	negs	r2, r2
   1379a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1379e:	9204      	str	r2, [sp, #16]
   137a0:	9305      	str	r3, [sp, #20]
				sign = '-';
   137a2:	f04f 082d 	mov.w	r8, #45	; 0x2d
   137a6:	e000      	b.n	137aa <z_cbvprintf_impl+0x3ce>
		switch (conv->specifier) {
   137a8:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
   137aa:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   137ae:	9300      	str	r3, [sp, #0]
   137b0:	ab0a      	add	r3, sp, #40	; 0x28
   137b2:	aa06      	add	r2, sp, #24
   137b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   137b8:	f011 fc59 	bl	2506e <encode_uint>
   137bc:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
   137be:	f1ba 0f00 	cmp.w	sl, #0
   137c2:	db6c      	blt.n	1389e <z_cbvprintf_impl+0x4c2>
				size_t len = bpe - bps;
   137c4:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   137c8:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
   137cc:	f89d 2018 	ldrb.w	r2, [sp, #24]
   137d0:	f36f 1286 	bfc	r2, #6, #1
   137d4:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
   137d8:	459a      	cmp	sl, r3
   137da:	d963      	bls.n	138a4 <z_cbvprintf_impl+0x4c8>
					conv->pad0_value = precision - (int)len;
   137dc:	ebaa 0303 	sub.w	r3, sl, r3
   137e0:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
   137e2:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   137e6:	e02b      	b.n	13840 <z_cbvprintf_impl+0x464>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
   137e8:	9804      	ldr	r0, [sp, #16]
   137ea:	b928      	cbnz	r0, 137f8 <z_cbvprintf_impl+0x41c>
		char sign = 0;
   137ec:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
   137ee:	f8df a180 	ldr.w	sl, [pc, #384]	; 13970 <z_cbvprintf_impl+0x594>
			bps = "(nil)";
   137f2:	f1aa 0905 	sub.w	r9, sl, #5
   137f6:	e023      	b.n	13840 <z_cbvprintf_impl+0x464>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   137f8:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   137fc:	9300      	str	r3, [sp, #0]
   137fe:	ab0a      	add	r3, sp, #40	; 0x28
   13800:	aa06      	add	r2, sp, #24
   13802:	2100      	movs	r1, #0
   13804:	f011 fc33 	bl	2506e <encode_uint>
   13808:	4681      	mov	r9, r0
				conv->altform_0c = true;
   1380a:	f89d 301a 	ldrb.w	r3, [sp, #26]
   1380e:	f043 0310 	orr.w	r3, r3, #16
   13812:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
   13816:	2378      	movs	r3, #120	; 0x78
   13818:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
   1381c:	46d8      	mov	r8, fp
				goto prec_int_pad0;
   1381e:	e7ce      	b.n	137be <z_cbvprintf_impl+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
   13820:	4622      	mov	r2, r4
   13822:	9904      	ldr	r1, [sp, #16]
   13824:	a806      	add	r0, sp, #24
   13826:	f011 fc72 	bl	2510e <store_count>
		char sign = 0;
   1382a:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
   1382c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
   13830:	f04f 0900 	mov.w	r9, #0
			}

			break;
   13834:	e004      	b.n	13840 <z_cbvprintf_impl+0x464>
		switch (conv->specifier) {
   13836:	46d8      	mov	r8, fp
   13838:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   1383c:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
   13840:	f1b9 0f00 	cmp.w	r9, #0
   13844:	f000 808d 	beq.w	13962 <z_cbvprintf_impl+0x586>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
   13848:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
   1384c:	f1b8 0f00 	cmp.w	r8, #0
   13850:	d000      	beq.n	13854 <z_cbvprintf_impl+0x478>
			nj_len += 1U;
   13852:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
   13854:	f89d 201a 	ldrb.w	r2, [sp, #26]
   13858:	f012 0f10 	tst.w	r2, #16
   1385c:	d025      	beq.n	138aa <z_cbvprintf_impl+0x4ce>
			nj_len += 2U;
   1385e:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
   13860:	9907      	ldr	r1, [sp, #28]
   13862:	440b      	add	r3, r1
		if (conv->pad_fp) {
   13864:	f012 0f40 	tst.w	r2, #64	; 0x40
   13868:	d001      	beq.n	1386e <z_cbvprintf_impl+0x492>
			nj_len += conv->pad0_pre_exp;
   1386a:	9a08      	ldr	r2, [sp, #32]
   1386c:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
   1386e:	2f00      	cmp	r7, #0
   13870:	dd31      	ble.n	138d6 <z_cbvprintf_impl+0x4fa>
			width -= (int)nj_len;
   13872:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
   13874:	f89d 3018 	ldrb.w	r3, [sp, #24]
   13878:	f013 0f04 	tst.w	r3, #4
   1387c:	d12b      	bne.n	138d6 <z_cbvprintf_impl+0x4fa>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
   1387e:	f013 0f40 	tst.w	r3, #64	; 0x40
   13882:	d017      	beq.n	138b4 <z_cbvprintf_impl+0x4d8>
					if (sign != 0) {
   13884:	f1b8 0f00 	cmp.w	r8, #0
   13888:	d017      	beq.n	138ba <z_cbvprintf_impl+0x4de>
						OUTC(sign);
   1388a:	4629      	mov	r1, r5
   1388c:	4640      	mov	r0, r8
   1388e:	47b0      	blx	r6
   13890:	2800      	cmp	r0, #0
   13892:	db6a      	blt.n	1396a <z_cbvprintf_impl+0x58e>
   13894:	3401      	adds	r4, #1
						sign = 0;
   13896:	46d8      	mov	r8, fp
					}
					pad = '0';
   13898:	f04f 0b30 	mov.w	fp, #48	; 0x30
   1389c:	e00f      	b.n	138be <z_cbvprintf_impl+0x4e2>
		const char *bpe = buf + sizeof(buf);
   1389e:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   138a2:	e7cd      	b.n	13840 <z_cbvprintf_impl+0x464>
   138a4:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   138a8:	e7ca      	b.n	13840 <z_cbvprintf_impl+0x464>
		} else if (conv->altform_0) {
   138aa:	f012 0f08 	tst.w	r2, #8
   138ae:	d0d7      	beq.n	13860 <z_cbvprintf_impl+0x484>
			nj_len += 1U;
   138b0:	3301      	adds	r3, #1
   138b2:	e7d5      	b.n	13860 <z_cbvprintf_impl+0x484>
				char pad = ' ';
   138b4:	f04f 0b20 	mov.w	fp, #32
   138b8:	e001      	b.n	138be <z_cbvprintf_impl+0x4e2>
					pad = '0';
   138ba:	f04f 0b30 	mov.w	fp, #48	; 0x30
   138be:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
   138c0:	1e5f      	subs	r7, r3, #1
   138c2:	2b00      	cmp	r3, #0
   138c4:	dd07      	ble.n	138d6 <z_cbvprintf_impl+0x4fa>
					OUTC(pad);
   138c6:	4629      	mov	r1, r5
   138c8:	4658      	mov	r0, fp
   138ca:	47b0      	blx	r6
   138cc:	2800      	cmp	r0, #0
   138ce:	db4c      	blt.n	1396a <z_cbvprintf_impl+0x58e>
   138d0:	3401      	adds	r4, #1
				while (width-- > 0) {
   138d2:	463b      	mov	r3, r7
   138d4:	e7f4      	b.n	138c0 <z_cbvprintf_impl+0x4e4>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
   138d6:	f1b8 0f00 	cmp.w	r8, #0
   138da:	d005      	beq.n	138e8 <z_cbvprintf_impl+0x50c>
			OUTC(sign);
   138dc:	4629      	mov	r1, r5
   138de:	4640      	mov	r0, r8
   138e0:	47b0      	blx	r6
   138e2:	2800      	cmp	r0, #0
   138e4:	db41      	blt.n	1396a <z_cbvprintf_impl+0x58e>
   138e6:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
   138e8:	f89d 301a 	ldrb.w	r3, [sp, #26]
   138ec:	f3c3 1200 	ubfx	r2, r3, #4, #1
   138f0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   138f4:	431a      	orrs	r2, r3
   138f6:	d005      	beq.n	13904 <z_cbvprintf_impl+0x528>
				OUTC('0');
   138f8:	4629      	mov	r1, r5
   138fa:	2030      	movs	r0, #48	; 0x30
   138fc:	47b0      	blx	r6
   138fe:	2800      	cmp	r0, #0
   13900:	db33      	blt.n	1396a <z_cbvprintf_impl+0x58e>
   13902:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
   13904:	f89d 301a 	ldrb.w	r3, [sp, #26]
   13908:	f013 0f10 	tst.w	r3, #16
   1390c:	d006      	beq.n	1391c <z_cbvprintf_impl+0x540>
				OUTC(conv->specifier);
   1390e:	4629      	mov	r1, r5
   13910:	f89d 001b 	ldrb.w	r0, [sp, #27]
   13914:	47b0      	blx	r6
   13916:	2800      	cmp	r0, #0
   13918:	db27      	blt.n	1396a <z_cbvprintf_impl+0x58e>
   1391a:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
   1391c:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
   1391e:	f103 38ff 	add.w	r8, r3, #4294967295
   13922:	2b00      	cmp	r3, #0
   13924:	dd07      	ble.n	13936 <z_cbvprintf_impl+0x55a>
				OUTC('0');
   13926:	4629      	mov	r1, r5
   13928:	2030      	movs	r0, #48	; 0x30
   1392a:	47b0      	blx	r6
   1392c:	2800      	cmp	r0, #0
   1392e:	db1c      	blt.n	1396a <z_cbvprintf_impl+0x58e>
   13930:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   13932:	4643      	mov	r3, r8
   13934:	e7f3      	b.n	1391e <z_cbvprintf_impl+0x542>
			}

			OUTS(bps, bpe);
   13936:	4653      	mov	r3, sl
   13938:	464a      	mov	r2, r9
   1393a:	4629      	mov	r1, r5
   1393c:	4630      	mov	r0, r6
   1393e:	f011 fc05 	bl	2514c <outs>
   13942:	2800      	cmp	r0, #0
   13944:	db11      	blt.n	1396a <z_cbvprintf_impl+0x58e>
   13946:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
   13948:	2f00      	cmp	r7, #0
   1394a:	dd07      	ble.n	1395c <z_cbvprintf_impl+0x580>
			OUTC(' ');
   1394c:	4629      	mov	r1, r5
   1394e:	2020      	movs	r0, #32
   13950:	47b0      	blx	r6
   13952:	2800      	cmp	r0, #0
   13954:	db09      	blt.n	1396a <z_cbvprintf_impl+0x58e>
   13956:	3401      	adds	r4, #1
			--width;
   13958:	3f01      	subs	r7, #1
   1395a:	e7f5      	b.n	13948 <z_cbvprintf_impl+0x56c>
		fp = extract_conversion(conv, sp);
   1395c:	f8dd 9008 	ldr.w	r9, [sp, #8]
   13960:	e544      	b.n	133ec <z_cbvprintf_impl+0x10>
   13962:	f8dd 9008 	ldr.w	r9, [sp, #8]
   13966:	e541      	b.n	133ec <z_cbvprintf_impl+0x10>
		}
	}

	return count;
   13968:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
   1396a:	b011      	add	sp, #68	; 0x44
   1396c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13970:	0002b901 	.word	0x0002b901

00013974 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   13974:	f00d bbd2 	b.w	2111c <SystemInit>

00013978 <msg_process>:
		return true;
	}
}

static void msg_process(union log_msg_generic *msg)
{
   13978:	b538      	push	{r3, r4, r5, lr}
   1397a:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1397c:	4c0b      	ldr	r4, [pc, #44]	; (139ac <msg_process+0x34>)
   1397e:	e000      	b.n	13982 <msg_process+0xa>
   13980:	3410      	adds	r4, #16
   13982:	4b0b      	ldr	r3, [pc, #44]	; (139b0 <msg_process+0x38>)
   13984:	429c      	cmp	r4, r3
   13986:	d20f      	bcs.n	139a8 <msg_process+0x30>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   13988:	6863      	ldr	r3, [r4, #4]
   1398a:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend) &&
   1398c:	2b00      	cmp	r3, #0
   1398e:	d0f7      	beq.n	13980 <msg_process+0x8>
		    msg_filter_check(backend, msg)) {
   13990:	4629      	mov	r1, r5
   13992:	4620      	mov	r0, r4
   13994:	f011 fe95 	bl	256c2 <msg_filter_check>
		if (log_backend_is_active(backend) &&
   13998:	2800      	cmp	r0, #0
   1399a:	d0f1      	beq.n	13980 <msg_process+0x8>
	backend->api->process(backend, msg);
   1399c:	6823      	ldr	r3, [r4, #0]
   1399e:	681b      	ldr	r3, [r3, #0]
   139a0:	4629      	mov	r1, r5
   139a2:	4620      	mov	r0, r4
   139a4:	4798      	blx	r3
}
   139a6:	e7eb      	b.n	13980 <msg_process+0x8>
			log_backend_msg_process(backend, msg);
		}
	}
}
   139a8:	bd38      	pop	{r3, r4, r5, pc}
   139aa:	bf00      	nop
   139ac:	0002b234 	.word	0x0002b234
   139b0:	0002b244 	.word	0x0002b244

000139b4 <log_backend_notify_all>:
	return mpsc_pbuf_get_max_utilization(&log_buffer, max);
}

static void log_backend_notify_all(enum log_backend_evt event,
				   union log_backend_evt_arg *arg)
{
   139b4:	b570      	push	{r4, r5, r6, lr}
   139b6:	4606      	mov	r6, r0
   139b8:	460d      	mov	r5, r1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   139ba:	4c08      	ldr	r4, [pc, #32]	; (139dc <log_backend_notify_all+0x28>)
   139bc:	e004      	b.n	139c8 <log_backend_notify_all+0x14>
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
		backend->api->notify(backend, event, arg);
   139be:	462a      	mov	r2, r5
   139c0:	4631      	mov	r1, r6
   139c2:	4620      	mov	r0, r4
   139c4:	4798      	blx	r3
   139c6:	3410      	adds	r4, #16
   139c8:	4b05      	ldr	r3, [pc, #20]	; (139e0 <log_backend_notify_all+0x2c>)
   139ca:	429c      	cmp	r4, r3
   139cc:	d204      	bcs.n	139d8 <log_backend_notify_all+0x24>
	if (backend->api->notify) {
   139ce:	6823      	ldr	r3, [r4, #0]
   139d0:	699b      	ldr	r3, [r3, #24]
   139d2:	2b00      	cmp	r3, #0
   139d4:	d1f3      	bne.n	139be <log_backend_notify_all+0xa>
   139d6:	e7f6      	b.n	139c6 <log_backend_notify_all+0x12>
		log_backend_notify(backend, event, arg);
	}
}
   139d8:	bd70      	pop	{r4, r5, r6, pc}
   139da:	bf00      	nop
   139dc:	0002b234 	.word	0x0002b234
   139e0:	0002b244 	.word	0x0002b244

000139e4 <activate_foreach_backend>:
{
   139e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   139e8:	4607      	mov	r7, r0
	uint32_t mask_cpy = mask;
   139ea:	4605      	mov	r5, r0
	while (mask_cpy) {
   139ec:	e00a      	b.n	13a04 <activate_foreach_backend+0x20>
			mask &= ~BIT(i);
   139ee:	ea07 0708 	and.w	r7, r7, r8
					   backend->cb->ctx,
   139f2:	4b14      	ldr	r3, [pc, #80]	; (13a44 <activate_foreach_backend+0x60>)
   139f4:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   139f8:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
   139fa:	2204      	movs	r2, #4
   139fc:	6819      	ldr	r1, [r3, #0]
   139fe:	4620      	mov	r0, r4
   13a00:	f000 faa4 	bl	13f4c <log_backend_enable>
	while (mask_cpy) {
   13a04:	b1d5      	cbz	r5, 13a3c <activate_foreach_backend+0x58>
		uint32_t i = __builtin_ctz(mask_cpy);
   13a06:	fa95 f6a5 	rbit	r6, r5
   13a0a:	fab6 f686 	clz	r6, r6
	STRUCT_SECTION_GET(log_backend, idx, &backend);
   13a0e:	4c0d      	ldr	r4, [pc, #52]	; (13a44 <activate_foreach_backend+0x60>)
   13a10:	eb04 1406 	add.w	r4, r4, r6, lsl #4
		mask_cpy &= ~BIT(i);
   13a14:	2301      	movs	r3, #1
   13a16:	40b3      	lsls	r3, r6
   13a18:	ea6f 0803 	mvn.w	r8, r3
   13a1c:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   13a20:	7b23      	ldrb	r3, [r4, #12]
   13a22:	2b00      	cmp	r3, #0
   13a24:	d0ee      	beq.n	13a04 <activate_foreach_backend+0x20>
	if (backend->api->is_ready != NULL) {
   13a26:	0133      	lsls	r3, r6, #4
   13a28:	4a06      	ldr	r2, [pc, #24]	; (13a44 <activate_foreach_backend+0x60>)
   13a2a:	58d3      	ldr	r3, [r2, r3]
   13a2c:	691b      	ldr	r3, [r3, #16]
   13a2e:	2b00      	cmp	r3, #0
   13a30:	d0dd      	beq.n	139ee <activate_foreach_backend+0xa>
		return backend->api->is_ready(backend);
   13a32:	4620      	mov	r0, r4
   13a34:	4798      	blx	r3
   13a36:	2800      	cmp	r0, #0
   13a38:	d1e4      	bne.n	13a04 <activate_foreach_backend+0x20>
   13a3a:	e7d8      	b.n	139ee <activate_foreach_backend+0xa>
}
   13a3c:	4638      	mov	r0, r7
   13a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13a42:	bf00      	nop
   13a44:	0002b234 	.word	0x0002b234

00013a48 <z_log_init>:
{
   13a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13a4c:	4680      	mov	r8, r0
   13a4e:	460f      	mov	r7, r1
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   13a50:	4b20      	ldr	r3, [pc, #128]	; (13ad4 <z_log_init+0x8c>)
   13a52:	f3bf 8f5b 	dmb	ish
   13a56:	e853 5f00 	ldrex	r5, [r3]
   13a5a:	1c6a      	adds	r2, r5, #1
   13a5c:	e843 2100 	strex	r1, r2, [r3]
   13a60:	2900      	cmp	r1, #0
   13a62:	d1f8      	bne.n	13a56 <z_log_init+0xe>
   13a64:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   13a68:	2d00      	cmp	r5, #0
   13a6a:	d12f      	bne.n	13acc <z_log_init+0x84>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13a6c:	4c1a      	ldr	r4, [pc, #104]	; (13ad8 <z_log_init+0x90>)
	int i = 0;
   13a6e:	2600      	movs	r6, #0
   13a70:	e007      	b.n	13a82 <z_log_init+0x3a>
						   backend->cb->ctx,
   13a72:	6863      	ldr	r3, [r4, #4]
				log_backend_enable(backend,
   13a74:	2204      	movs	r2, #4
   13a76:	6819      	ldr	r1, [r3, #0]
   13a78:	4620      	mov	r0, r4
   13a7a:	f000 fa67 	bl	13f4c <log_backend_enable>
			i++;
   13a7e:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13a80:	3410      	adds	r4, #16
   13a82:	4b16      	ldr	r3, [pc, #88]	; (13adc <z_log_init+0x94>)
   13a84:	429c      	cmp	r4, r3
   13a86:	d213      	bcs.n	13ab0 <z_log_init+0x68>
		if (backend->autostart) {
   13a88:	7b23      	ldrb	r3, [r4, #12]
   13a8a:	2b00      	cmp	r3, #0
   13a8c:	d0f8      	beq.n	13a80 <z_log_init+0x38>
	if (backend->api->init) {
   13a8e:	6823      	ldr	r3, [r4, #0]
   13a90:	68db      	ldr	r3, [r3, #12]
   13a92:	b10b      	cbz	r3, 13a98 <z_log_init+0x50>
		backend->api->init(backend);
   13a94:	4620      	mov	r0, r4
   13a96:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
   13a98:	6823      	ldr	r3, [r4, #0]
   13a9a:	691b      	ldr	r3, [r3, #16]
   13a9c:	2b00      	cmp	r3, #0
   13a9e:	d0e8      	beq.n	13a72 <z_log_init+0x2a>
		return backend->api->is_ready(backend);
   13aa0:	4620      	mov	r0, r4
   13aa2:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   13aa4:	2800      	cmp	r0, #0
   13aa6:	d0e4      	beq.n	13a72 <z_log_init+0x2a>
				mask |= BIT(i);
   13aa8:	2301      	movs	r3, #1
   13aaa:	40b3      	lsls	r3, r6
   13aac:	431d      	orrs	r5, r3
   13aae:	e7e6      	b.n	13a7e <z_log_init+0x36>
	if (blocking) {
   13ab0:	f1b8 0f00 	cmp.w	r8, #0
   13ab4:	d00b      	beq.n	13ace <z_log_init+0x86>
		while (mask) {
   13ab6:	b155      	cbz	r5, 13ace <z_log_init+0x86>
			mask = activate_foreach_backend(mask);
   13ab8:	4628      	mov	r0, r5
   13aba:	f7ff ff93 	bl	139e4 <activate_foreach_backend>
   13abe:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   13ac0:	2f00      	cmp	r7, #0
   13ac2:	d0f8      	beq.n	13ab6 <z_log_init+0x6e>
				k_msleep(10);
   13ac4:	200a      	movs	r0, #10
   13ac6:	f011 fe02 	bl	256ce <k_msleep>
   13aca:	e7f4      	b.n	13ab6 <z_log_init+0x6e>
		return 0;
   13acc:	2500      	movs	r5, #0
}
   13ace:	4628      	mov	r0, r5
   13ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13ad4:	20005630 	.word	0x20005630
   13ad8:	0002b234 	.word	0x0002b234
   13adc:	0002b244 	.word	0x0002b244

00013ae0 <thread_set>:
{
   13ae0:	b508      	push	{r3, lr}
	proc_tid = process_tid;
   13ae2:	4b06      	ldr	r3, [pc, #24]	; (13afc <thread_set+0x1c>)
   13ae4:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   13ae6:	b118      	cbz	r0, 13af0 <thread_set+0x10>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   13ae8:	4b05      	ldr	r3, [pc, #20]	; (13b00 <thread_set+0x20>)
   13aea:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
   13aec:	2b09      	cmp	r3, #9
   13aee:	dc00      	bgt.n	13af2 <thread_set+0x12>
}
   13af0:	bd08      	pop	{r3, pc}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   13af2:	4804      	ldr	r0, [pc, #16]	; (13b04 <thread_set+0x24>)
   13af4:	f00f f83e 	bl	22b74 <z_impl_k_sem_give>
}
   13af8:	e7fa      	b.n	13af0 <thread_set+0x10>
   13afa:	bf00      	nop
   13afc:	20005624 	.word	0x20005624
   13b00:	2000562c 	.word	0x2000562c
   13b04:	20000a18 	.word	0x20000a18

00013b08 <log_process_thread_timer_expiry_fn>:

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
   13b08:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   13b0a:	4802      	ldr	r0, [pc, #8]	; (13b14 <log_process_thread_timer_expiry_fn+0xc>)
   13b0c:	f00f f832 	bl	22b74 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
   13b10:	bd08      	pop	{r3, pc}
   13b12:	bf00      	nop
   13b14:	20000a18 	.word	0x20000a18

00013b18 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   13b18:	b530      	push	{r4, r5, lr}
   13b1a:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   13b1c:	2200      	movs	r2, #0
   13b1e:	490f      	ldr	r1, [pc, #60]	; (13b5c <enable_logger+0x44>)
   13b20:	480f      	ldr	r0, [pc, #60]	; (13b60 <enable_logger+0x48>)
   13b22:	f016 ff75 	bl	2aa10 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   13b26:	4d0f      	ldr	r5, [pc, #60]	; (13b64 <enable_logger+0x4c>)
   13b28:	2200      	movs	r2, #0
   13b2a:	2300      	movs	r3, #0
   13b2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   13b30:	2400      	movs	r4, #0
   13b32:	9404      	str	r4, [sp, #16]
   13b34:	230e      	movs	r3, #14
   13b36:	9303      	str	r3, [sp, #12]
   13b38:	9402      	str	r4, [sp, #8]
   13b3a:	9401      	str	r4, [sp, #4]
   13b3c:	9400      	str	r4, [sp, #0]
   13b3e:	4b0a      	ldr	r3, [pc, #40]	; (13b68 <enable_logger+0x50>)
   13b40:	f44f 7240 	mov.w	r2, #768	; 0x300
   13b44:	4909      	ldr	r1, [pc, #36]	; (13b6c <enable_logger+0x54>)
   13b46:	4628      	mov	r0, r5
   13b48:	f016 fa78 	bl	2a03c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   13b4c:	4908      	ldr	r1, [pc, #32]	; (13b70 <enable_logger+0x58>)
   13b4e:	4628      	mov	r0, r5
   13b50:	f00e fe24 	bl	2279c <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
   13b54:	4620      	mov	r0, r4
   13b56:	b009      	add	sp, #36	; 0x24
   13b58:	bd30      	pop	{r4, r5, pc}
   13b5a:	bf00      	nop
   13b5c:	00013b09 	.word	0x00013b09
   13b60:	20001e40 	.word	0x20001e40
   13b64:	20001980 	.word	0x20001980
   13b68:	00013ead 	.word	0x00013ead
   13b6c:	200069c0 	.word	0x200069c0
   13b70:	0002b904 	.word	0x0002b904

00013b74 <log_format_func_t_get>:
}
   13b74:	4b01      	ldr	r3, [pc, #4]	; (13b7c <log_format_func_t_get+0x8>)
   13b76:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   13b7a:	4770      	bx	lr
   13b7c:	0002b920 	.word	0x0002b920

00013b80 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
   13b80:	b148      	cbz	r0, 13b96 <log_set_timestamp_func+0x16>
{
   13b82:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
   13b84:	4a05      	ldr	r2, [pc, #20]	; (13b9c <log_set_timestamp_func+0x1c>)
   13b86:	6010      	str	r0, [r2, #0]
	timestamp_freq = freq;
   13b88:	4b05      	ldr	r3, [pc, #20]	; (13ba0 <log_set_timestamp_func+0x20>)
   13b8a:	6019      	str	r1, [r3, #0]
		log_output_timestamp_freq_set(freq);
   13b8c:	4608      	mov	r0, r1
   13b8e:	f000 fbff 	bl	14390 <log_output_timestamp_freq_set>
	return 0;
   13b92:	2000      	movs	r0, #0
}
   13b94:	bd08      	pop	{r3, pc}
		return -EINVAL;
   13b96:	f06f 0015 	mvn.w	r0, #21
}
   13b9a:	4770      	bx	lr
   13b9c:	20000654 	.word	0x20000654
   13ba0:	20005620 	.word	0x20005620

00013ba4 <z_log_notify_backend_enabled>:
{
   13ba4:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   13ba6:	4b05      	ldr	r3, [pc, #20]	; (13bbc <z_log_notify_backend_enabled+0x18>)
   13ba8:	781b      	ldrb	r3, [r3, #0]
   13baa:	b11b      	cbz	r3, 13bb4 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
   13bac:	4b03      	ldr	r3, [pc, #12]	; (13bbc <z_log_notify_backend_enabled+0x18>)
   13bae:	2201      	movs	r2, #1
   13bb0:	701a      	strb	r2, [r3, #0]
}
   13bb2:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
   13bb4:	4802      	ldr	r0, [pc, #8]	; (13bc0 <z_log_notify_backend_enabled+0x1c>)
   13bb6:	f00e ffdd 	bl	22b74 <z_impl_k_sem_give>
}
   13bba:	e7f7      	b.n	13bac <z_log_notify_backend_enabled+0x8>
   13bbc:	200069b2 	.word	0x200069b2
   13bc0:	20000a18 	.word	0x20000a18

00013bc4 <z_log_dropped>:
   13bc4:	4b0d      	ldr	r3, [pc, #52]	; (13bfc <z_log_dropped+0x38>)
   13bc6:	f3bf 8f5b 	dmb	ish
   13bca:	e853 1f00 	ldrex	r1, [r3]
   13bce:	3101      	adds	r1, #1
   13bd0:	e843 1200 	strex	r2, r1, [r3]
   13bd4:	2a00      	cmp	r2, #0
   13bd6:	d1f8      	bne.n	13bca <z_log_dropped+0x6>
   13bd8:	f3bf 8f5b 	dmb	ish
	if (buffered) {
   13bdc:	b900      	cbnz	r0, 13be0 <z_log_dropped+0x1c>
}
   13bde:	4770      	bx	lr
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13be0:	4b07      	ldr	r3, [pc, #28]	; (13c00 <z_log_dropped+0x3c>)
   13be2:	f3bf 8f5b 	dmb	ish
   13be6:	e853 1f00 	ldrex	r1, [r3]
   13bea:	3901      	subs	r1, #1
   13bec:	e843 1200 	strex	r2, r1, [r3]
   13bf0:	2a00      	cmp	r2, #0
   13bf2:	d1f8      	bne.n	13be6 <z_log_dropped+0x22>
   13bf4:	f3bf 8f5b 	dmb	ish
   13bf8:	e7f1      	b.n	13bde <z_log_dropped+0x1a>
   13bfa:	bf00      	nop
   13bfc:	20005628 	.word	0x20005628
   13c00:	2000562c 	.word	0x2000562c

00013c04 <z_log_dropped_read_and_clear>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13c04:	4b06      	ldr	r3, [pc, #24]	; (13c20 <z_log_dropped_read_and_clear+0x1c>)
}
   13c06:	2000      	movs	r0, #0
   13c08:	4601      	mov	r1, r0
   13c0a:	f3bf 8f5b 	dmb	ish
   13c0e:	e853 0f00 	ldrex	r0, [r3]
   13c12:	e843 1200 	strex	r2, r1, [r3]
   13c16:	2a00      	cmp	r2, #0
   13c18:	d1f9      	bne.n	13c0e <z_log_dropped_read_and_clear+0xa>
   13c1a:	f3bf 8f5b 	dmb	ish
   13c1e:	4770      	bx	lr
   13c20:	20005628 	.word	0x20005628

00013c24 <dropped_notify>:
{
   13c24:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   13c26:	f7ff ffed 	bl	13c04 <z_log_dropped_read_and_clear>
   13c2a:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13c2c:	4c09      	ldr	r4, [pc, #36]	; (13c54 <dropped_notify+0x30>)
   13c2e:	e000      	b.n	13c32 <dropped_notify+0xe>
   13c30:	3410      	adds	r4, #16
   13c32:	4b09      	ldr	r3, [pc, #36]	; (13c58 <dropped_notify+0x34>)
   13c34:	429c      	cmp	r4, r3
   13c36:	d20b      	bcs.n	13c50 <dropped_notify+0x2c>
	return backend->cb->active;
   13c38:	6863      	ldr	r3, [r4, #4]
   13c3a:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   13c3c:	2b00      	cmp	r3, #0
   13c3e:	d0f7      	beq.n	13c30 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
   13c40:	6823      	ldr	r3, [r4, #0]
   13c42:	685b      	ldr	r3, [r3, #4]
   13c44:	2b00      	cmp	r3, #0
   13c46:	d0f3      	beq.n	13c30 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
   13c48:	4629      	mov	r1, r5
   13c4a:	4620      	mov	r0, r4
   13c4c:	4798      	blx	r3
   13c4e:	e7ef      	b.n	13c30 <dropped_notify+0xc>
}
   13c50:	bd38      	pop	{r3, r4, r5, pc}
   13c52:	bf00      	nop
   13c54:	0002b234 	.word	0x0002b234
   13c58:	0002b244 	.word	0x0002b244

00013c5c <z_log_dropped_pending>:
	return dropped_cnt > 0;
   13c5c:	4b03      	ldr	r3, [pc, #12]	; (13c6c <z_log_dropped_pending+0x10>)
   13c5e:	6818      	ldr	r0, [r3, #0]
}
   13c60:	2800      	cmp	r0, #0
   13c62:	bfd4      	ite	le
   13c64:	2000      	movle	r0, #0
   13c66:	2001      	movgt	r0, #1
   13c68:	4770      	bx	lr
   13c6a:	bf00      	nop
   13c6c:	20005628 	.word	0x20005628

00013c70 <z_log_msg_init>:
{
   13c70:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
   13c72:	4c04      	ldr	r4, [pc, #16]	; (13c84 <z_log_msg_init+0x14>)
   13c74:	4904      	ldr	r1, [pc, #16]	; (13c88 <z_log_msg_init+0x18>)
   13c76:	4620      	mov	r0, r4
   13c78:	f011 fb7d 	bl	25376 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
   13c7c:	4b03      	ldr	r3, [pc, #12]	; (13c8c <z_log_msg_init+0x1c>)
   13c7e:	601c      	str	r4, [r3, #0]
}
   13c80:	bd10      	pop	{r4, pc}
   13c82:	bf00      	nop
   13c84:	20000958 	.word	0x20000958
   13c88:	0002b90c 	.word	0x0002b90c
   13c8c:	2000561c 	.word	0x2000561c

00013c90 <log_core_init>:
{
   13c90:	b508      	push	{r3, lr}
	panic_mode = false;
   13c92:	2300      	movs	r3, #0
   13c94:	4a05      	ldr	r2, [pc, #20]	; (13cac <log_core_init+0x1c>)
   13c96:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   13c98:	4a05      	ldr	r2, [pc, #20]	; (13cb0 <log_core_init+0x20>)
   13c9a:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
   13c9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   13ca0:	4804      	ldr	r0, [pc, #16]	; (13cb4 <log_core_init+0x24>)
   13ca2:	f7ff ff6d 	bl	13b80 <log_set_timestamp_func>
		z_log_msg_init();
   13ca6:	f7ff ffe3 	bl	13c70 <z_log_msg_init>
}
   13caa:	bd08      	pop	{r3, pc}
   13cac:	200069b3 	.word	0x200069b3
   13cb0:	20005628 	.word	0x20005628
   13cb4:	000256c7 	.word	0x000256c7

00013cb8 <z_log_msg_alloc>:
{
   13cb8:	b508      	push	{r3, lr}
   13cba:	4601      	mov	r1, r0
	return msg_alloc(&log_buffer, wlen);
   13cbc:	4801      	ldr	r0, [pc, #4]	; (13cc4 <z_log_msg_alloc+0xc>)
   13cbe:	f011 fd1c 	bl	256fa <msg_alloc>
}
   13cc2:	bd08      	pop	{r3, pc}
   13cc4:	20000958 	.word	0x20000958

00013cc8 <z_log_msg_local_claim>:
{
   13cc8:	b508      	push	{r3, lr}
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
   13cca:	4802      	ldr	r0, [pc, #8]	; (13cd4 <z_log_msg_local_claim+0xc>)
   13ccc:	f011 fc2b 	bl	25526 <mpsc_pbuf_claim>
}
   13cd0:	bd08      	pop	{r3, pc}
   13cd2:	bf00      	nop
   13cd4:	20000958 	.word	0x20000958

00013cd8 <z_log_msg_free>:
{
   13cd8:	b508      	push	{r3, lr}
   13cda:	4601      	mov	r1, r0
	msg_free(curr_log_buffer, msg);
   13cdc:	4b02      	ldr	r3, [pc, #8]	; (13ce8 <z_log_msg_free+0x10>)
   13cde:	6818      	ldr	r0, [r3, #0]
   13ce0:	f011 fd11 	bl	25706 <msg_free>
}
   13ce4:	bd08      	pop	{r3, pc}
   13ce6:	bf00      	nop
   13ce8:	2000561c 	.word	0x2000561c

00013cec <z_log_msg_pending>:
{
   13cec:	b508      	push	{r3, lr}
		return msg_pending(&log_buffer);
   13cee:	4802      	ldr	r0, [pc, #8]	; (13cf8 <z_log_msg_pending+0xc>)
   13cf0:	f011 fd0d 	bl	2570e <msg_pending>
}
   13cf4:	bd08      	pop	{r3, pc}
   13cf6:	bf00      	nop
   13cf8:	20000958 	.word	0x20000958

00013cfc <z_impl_log_process>:
{
   13cfc:	b510      	push	{r4, lr}
   13cfe:	b082      	sub	sp, #8
	k_timeout_t backoff = K_NO_WAIT;
   13d00:	2200      	movs	r2, #0
   13d02:	2300      	movs	r3, #0
   13d04:	e9cd 2300 	strd	r2, r3, [sp]
	if (!backend_attached) {
   13d08:	4b28      	ldr	r3, [pc, #160]	; (13dac <z_impl_log_process+0xb0>)
   13d0a:	7818      	ldrb	r0, [r3, #0]
   13d0c:	b908      	cbnz	r0, 13d12 <z_impl_log_process+0x16>
}
   13d0e:	b002      	add	sp, #8
   13d10:	bd10      	pop	{r4, pc}
	msg = z_log_msg_claim(&backoff);
   13d12:	4668      	mov	r0, sp
   13d14:	f011 fd13 	bl	2573e <z_log_msg_claim>
	if (msg) {
   13d18:	4604      	mov	r4, r0
   13d1a:	b188      	cbz	r0, 13d40 <z_impl_log_process+0x44>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13d1c:	4b24      	ldr	r3, [pc, #144]	; (13db0 <z_impl_log_process+0xb4>)
   13d1e:	f3bf 8f5b 	dmb	ish
   13d22:	e853 1f00 	ldrex	r1, [r3]
   13d26:	3901      	subs	r1, #1
   13d28:	e843 1200 	strex	r2, r1, [r3]
   13d2c:	2a00      	cmp	r2, #0
   13d2e:	d1f8      	bne.n	13d22 <z_impl_log_process+0x26>
   13d30:	f3bf 8f5b 	dmb	ish
		msg_process(msg);
   13d34:	4620      	mov	r0, r4
   13d36:	f7ff fe1f 	bl	13978 <msg_process>
		z_log_msg_free(msg);
   13d3a:	4620      	mov	r0, r4
   13d3c:	f7ff ffcc 	bl	13cd8 <z_log_msg_free>
		bool dropped_pend = z_log_dropped_pending();
   13d40:	f7ff ff8c 	bl	13c5c <z_log_dropped_pending>
		if ((dropped_pend || unordered_pend) &&
   13d44:	b958      	cbnz	r0, 13d5e <z_impl_log_process+0x62>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
   13d46:	4a1b      	ldr	r2, [pc, #108]	; (13db4 <z_impl_log_process+0xb8>)
   13d48:	6813      	ldr	r3, [r2, #0]
   13d4a:	6851      	ldr	r1, [r2, #4]
   13d4c:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
   13d50:	f141 0100 	adc.w	r1, r1, #0
   13d54:	6013      	str	r3, [r2, #0]
   13d56:	6051      	str	r1, [r2, #4]
	return z_log_msg_pending();
   13d58:	f7ff ffc8 	bl	13cec <z_log_msg_pending>
   13d5c:	e7d7      	b.n	13d0e <z_impl_log_process+0x12>
	return z_impl_k_uptime_ticks();
   13d5e:	f016 fe14 	bl	2a98a <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   13d62:	014a      	lsls	r2, r1, #5
   13d64:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   13d68:	0143      	lsls	r3, r0, #5
   13d6a:	1a1b      	subs	r3, r3, r0
   13d6c:	eb62 0201 	sbc.w	r2, r2, r1
   13d70:	0092      	lsls	r2, r2, #2
   13d72:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   13d76:	009b      	lsls	r3, r3, #2
   13d78:	181b      	adds	r3, r3, r0
   13d7a:	eb42 0201 	adc.w	r2, r2, r1
   13d7e:	00d2      	lsls	r2, r2, #3
   13d80:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   13d84:	f3c3 3310 	ubfx	r3, r3, #12, #17
   13d88:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
   13d8c:	0bd2      	lsrs	r2, r2, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   13d8e:	4809      	ldr	r0, [pc, #36]	; (13db4 <z_impl_log_process+0xb8>)
   13d90:	6801      	ldr	r1, [r0, #0]
   13d92:	6840      	ldr	r0, [r0, #4]
   13d94:	1a5b      	subs	r3, r3, r1
   13d96:	eb62 0200 	sbc.w	r2, r2, r0
		if ((dropped_pend || unordered_pend) &&
   13d9a:	f240 31e9 	movw	r1, #1001	; 0x3e9
   13d9e:	428b      	cmp	r3, r1
   13da0:	f172 0200 	sbcs.w	r2, r2, #0
   13da4:	d3cf      	bcc.n	13d46 <z_impl_log_process+0x4a>
				dropped_notify();
   13da6:	f7ff ff3d 	bl	13c24 <dropped_notify>
			if (unordered_pend) {
   13daa:	e7cc      	b.n	13d46 <z_impl_log_process+0x4a>
   13dac:	200069b2 	.word	0x200069b2
   13db0:	2000562c 	.word	0x2000562c
   13db4:	20001e38 	.word	0x20001e38

00013db8 <z_impl_log_panic>:
	if (panic_mode) {
   13db8:	4b0f      	ldr	r3, [pc, #60]	; (13df8 <z_impl_log_panic+0x40>)
   13dba:	781b      	ldrb	r3, [r3, #0]
   13dbc:	b103      	cbz	r3, 13dc0 <z_impl_log_panic+0x8>
   13dbe:	4770      	bx	lr
{
   13dc0:	b510      	push	{r4, lr}
	(void)z_log_init(true, false);
   13dc2:	2100      	movs	r1, #0
   13dc4:	2001      	movs	r0, #1
   13dc6:	f7ff fe3f 	bl	13a48 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13dca:	4c0c      	ldr	r4, [pc, #48]	; (13dfc <z_impl_log_panic+0x44>)
   13dcc:	e000      	b.n	13dd0 <z_impl_log_panic+0x18>
   13dce:	3410      	adds	r4, #16
   13dd0:	4b0b      	ldr	r3, [pc, #44]	; (13e00 <z_impl_log_panic+0x48>)
   13dd2:	429c      	cmp	r4, r3
   13dd4:	d208      	bcs.n	13de8 <z_impl_log_panic+0x30>
	return backend->cb->active;
   13dd6:	6863      	ldr	r3, [r4, #4]
   13dd8:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   13dda:	2b00      	cmp	r3, #0
   13ddc:	d0f7      	beq.n	13dce <z_impl_log_panic+0x16>
	backend->api->panic(backend);
   13dde:	6823      	ldr	r3, [r4, #0]
   13de0:	689b      	ldr	r3, [r3, #8]
   13de2:	4620      	mov	r0, r4
   13de4:	4798      	blx	r3
}
   13de6:	e7f2      	b.n	13dce <z_impl_log_panic+0x16>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
   13de8:	f7ff ff88 	bl	13cfc <z_impl_log_process>
		while (log_process() == true) {
   13dec:	2800      	cmp	r0, #0
   13dee:	d1fb      	bne.n	13de8 <z_impl_log_panic+0x30>
	panic_mode = true;
   13df0:	4b01      	ldr	r3, [pc, #4]	; (13df8 <z_impl_log_panic+0x40>)
   13df2:	2201      	movs	r2, #1
   13df4:	701a      	strb	r2, [r3, #0]
}
   13df6:	bd10      	pop	{r4, pc}
   13df8:	200069b3 	.word	0x200069b3
   13dfc:	0002b234 	.word	0x0002b234
   13e00:	0002b244 	.word	0x0002b244

00013e04 <z_log_msg_post_finalize>:
{
   13e04:	b510      	push	{r4, lr}
   13e06:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   13e08:	4b1b      	ldr	r3, [pc, #108]	; (13e78 <z_log_msg_post_finalize+0x74>)
   13e0a:	f3bf 8f5b 	dmb	ish
   13e0e:	e853 2f00 	ldrex	r2, [r3]
   13e12:	1c51      	adds	r1, r2, #1
   13e14:	e843 1000 	strex	r0, r1, [r3]
   13e18:	2800      	cmp	r0, #0
   13e1a:	d1f8      	bne.n	13e0e <z_log_msg_post_finalize+0xa>
   13e1c:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
   13e20:	4b16      	ldr	r3, [pc, #88]	; (13e7c <z_log_msg_post_finalize+0x78>)
   13e22:	781b      	ldrb	r3, [r3, #0]
   13e24:	b963      	cbnz	r3, 13e40 <z_log_msg_post_finalize+0x3c>
	} else if (proc_tid != NULL) {
   13e26:	4b16      	ldr	r3, [pc, #88]	; (13e80 <z_log_msg_post_finalize+0x7c>)
   13e28:	681b      	ldr	r3, [r3, #0]
   13e2a:	b1bb      	cbz	r3, 13e5c <z_log_msg_post_finalize+0x58>
		if (cnt == 0) {
   13e2c:	b1c2      	cbz	r2, 13e60 <z_log_msg_post_finalize+0x5c>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   13e2e:	2a0a      	cmp	r2, #10
   13e30:	d114      	bne.n	13e5c <z_log_msg_post_finalize+0x58>
	z_impl_k_timer_stop(timer);
   13e32:	4814      	ldr	r0, [pc, #80]	; (13e84 <z_log_msg_post_finalize+0x80>)
   13e34:	f016 fdf8 	bl	2aa28 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   13e38:	4813      	ldr	r0, [pc, #76]	; (13e88 <z_log_msg_post_finalize+0x84>)
   13e3a:	f00e fe9b 	bl	22b74 <z_impl_k_sem_give>
}
   13e3e:	e00d      	b.n	13e5c <z_log_msg_post_finalize+0x58>
   13e40:	f04f 0340 	mov.w	r3, #64	; 0x40
   13e44:	f3ef 8411 	mrs	r4, BASEPRI
   13e48:	f383 8812 	msr	BASEPRI_MAX, r3
   13e4c:	f3bf 8f6f 	isb	sy
   13e50:	f7ff ff54 	bl	13cfc <z_impl_log_process>
	__asm__ volatile(
   13e54:	f384 8811 	msr	BASEPRI, r4
   13e58:	f3bf 8f6f 	isb	sy
   13e5c:	b002      	add	sp, #8
   13e5e:	bd10      	pop	{r4, pc}
	z_impl_k_timer_start(timer, duration, period);
   13e60:	2200      	movs	r2, #0
   13e62:	2300      	movs	r3, #0
   13e64:	e9cd 2300 	strd	r2, r3, [sp]
   13e68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   13e6c:	2300      	movs	r3, #0
   13e6e:	4805      	ldr	r0, [pc, #20]	; (13e84 <z_log_msg_post_finalize+0x80>)
   13e70:	f00f fe6a 	bl	23b48 <z_impl_k_timer_start>
   13e74:	e7f2      	b.n	13e5c <z_log_msg_post_finalize+0x58>
   13e76:	bf00      	nop
   13e78:	2000562c 	.word	0x2000562c
   13e7c:	200069b3 	.word	0x200069b3
   13e80:	20005624 	.word	0x20005624
   13e84:	20001e40 	.word	0x20001e40
   13e88:	20000a18 	.word	0x20000a18

00013e8c <z_log_msg_commit>:
{
   13e8c:	b510      	push	{r4, lr}
   13e8e:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   13e90:	4b04      	ldr	r3, [pc, #16]	; (13ea4 <z_log_msg_commit+0x18>)
   13e92:	681b      	ldr	r3, [r3, #0]
   13e94:	4798      	blx	r3
   13e96:	60a0      	str	r0, [r4, #8]
	msg_commit(&log_buffer, msg);
   13e98:	4621      	mov	r1, r4
   13e9a:	4803      	ldr	r0, [pc, #12]	; (13ea8 <z_log_msg_commit+0x1c>)
   13e9c:	f011 fc53 	bl	25746 <msg_commit>
}
   13ea0:	bd10      	pop	{r4, pc}
   13ea2:	bf00      	nop
   13ea4:	20000654 	.word	0x20000654
   13ea8:	20000958 	.word	0x20000958

00013eac <log_process_thread_func>:
{
   13eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t activate_mask = z_log_init(false, false);
   13eb0:	2100      	movs	r1, #0
   13eb2:	4608      	mov	r0, r1
   13eb4:	f7ff fdc8 	bl	13a48 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   13eb8:	4680      	mov	r8, r0
   13eba:	b140      	cbz	r0, 13ece <log_process_thread_func+0x22>
   13ebc:	f240 6667 	movw	r6, #1639	; 0x667
   13ec0:	2700      	movs	r7, #0
	return z_impl_z_current_get();
   13ec2:	f00f fc13 	bl	236ec <z_impl_z_current_get>
	thread_set(k_current_get());
   13ec6:	f7ff fe0b 	bl	13ae0 <thread_set>
	bool processed_any = false;
   13eca:	2500      	movs	r5, #0
   13ecc:	e015      	b.n	13efa <log_process_thread_func+0x4e>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   13ece:	f04f 36ff 	mov.w	r6, #4294967295
   13ed2:	f04f 37ff 	mov.w	r7, #4294967295
   13ed6:	e7f4      	b.n	13ec2 <log_process_thread_func+0x16>
			activate_mask = activate_foreach_backend(activate_mask);
   13ed8:	4640      	mov	r0, r8
   13eda:	f7ff fd83 	bl	139e4 <activate_foreach_backend>
			if (!activate_mask) {
   13ede:	4680      	mov	r8, r0
   13ee0:	b970      	cbnz	r0, 13f00 <log_process_thread_func+0x54>
				timeout = K_FOREVER;
   13ee2:	f04f 36ff 	mov.w	r6, #4294967295
   13ee6:	f04f 37ff 	mov.w	r7, #4294967295
   13eea:	e009      	b.n	13f00 <log_process_thread_func+0x54>
   13eec:	462c      	mov	r4, r5
	return z_impl_k_sem_take(sem, timeout);
   13eee:	4632      	mov	r2, r6
   13ef0:	463b      	mov	r3, r7
   13ef2:	4809      	ldr	r0, [pc, #36]	; (13f18 <log_process_thread_func+0x6c>)
   13ef4:	f00e fe66 	bl	22bc4 <z_impl_k_sem_take>
{
   13ef8:	4625      	mov	r5, r4
		if (activate_mask) {
   13efa:	f1b8 0f00 	cmp.w	r8, #0
   13efe:	d1eb      	bne.n	13ed8 <log_process_thread_func+0x2c>
   13f00:	f7ff fefc 	bl	13cfc <z_impl_log_process>
		if (log_process() == false) {
   13f04:	4604      	mov	r4, r0
   13f06:	2800      	cmp	r0, #0
   13f08:	d1f6      	bne.n	13ef8 <log_process_thread_func+0x4c>
			if (processed_any) {
   13f0a:	2d00      	cmp	r5, #0
   13f0c:	d0ee      	beq.n	13eec <log_process_thread_func+0x40>
				log_backend_notify_all(LOG_BACKEND_EVT_PROCESS_THREAD_DONE, NULL);
   13f0e:	2100      	movs	r1, #0
   13f10:	4608      	mov	r0, r1
   13f12:	f7ff fd4f 	bl	139b4 <log_backend_notify_all>
   13f16:	e7ea      	b.n	13eee <log_process_thread_func+0x42>
   13f18:	20000a18 	.word	0x20000a18

00013f1c <log_src_cnt_get>:
	if (z_log_is_local_domain(domain_id)) {
		return log_const_source_id(__log_const_end);
	}

	return link_source_count(domain_id);
}
   13f1c:	4802      	ldr	r0, [pc, #8]	; (13f28 <log_src_cnt_get+0xc>)
   13f1e:	4b03      	ldr	r3, [pc, #12]	; (13f2c <log_src_cnt_get+0x10>)
   13f20:	1ac0      	subs	r0, r0, r3
   13f22:	08c0      	lsrs	r0, r0, #3
   13f24:	4770      	bx	lr
   13f26:	bf00      	nop
   13f28:	0002b234 	.word	0x0002b234
   13f2c:	0002b154 	.word	0x0002b154

00013f30 <log_source_name_get>:

	return (const char *)cached;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
   13f30:	b510      	push	{r4, lr}
   13f32:	460c      	mov	r4, r1
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
   13f34:	f7ff fff2 	bl	13f1c <log_src_cnt_get>
   13f38:	42a0      	cmp	r0, r4
   13f3a:	d903      	bls.n	13f44 <log_source_name_get+0x14>
			return __log_const_start[source_id].name;
   13f3c:	4b02      	ldr	r3, [pc, #8]	; (13f48 <log_source_name_get+0x18>)
   13f3e:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			return NULL;
		}
	}

	return link_source_name_get(domain_id, source_id);
}
   13f42:	bd10      	pop	{r4, pc}
			return NULL;
   13f44:	2000      	movs	r0, #0
   13f46:	e7fc      	b.n	13f42 <log_source_name_get+0x12>
   13f48:	0002b154 	.word	0x0002b154

00013f4c <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
   13f4c:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   13f4e:	4b09      	ldr	r3, [pc, #36]	; (13f74 <log_backend_enable+0x28>)
   13f50:	1ac3      	subs	r3, r0, r3
   13f52:	111b      	asrs	r3, r3, #4
   13f54:	3301      	adds	r3, #1
	backend->cb->id = id;
   13f56:	f8d0 c004 	ldr.w	ip, [r0, #4]
   13f5a:	f88c 3004 	strb.w	r3, [ip, #4]

	log_backend_id_set(backend, id);
	backend->cb->level = level;
   13f5e:	6843      	ldr	r3, [r0, #4]
   13f60:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
   13f62:	6843      	ldr	r3, [r0, #4]
   13f64:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   13f66:	6843      	ldr	r3, [r0, #4]
   13f68:	2201      	movs	r2, #1
   13f6a:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
   13f6c:	f7ff fe1a 	bl	13ba4 <z_log_notify_backend_enabled>
}
   13f70:	bd08      	pop	{r3, pc}
   13f72:	bf00      	nop
   13f74:	0002b234 	.word	0x0002b234

00013f78 <cbprintf_package_copy>:
{
   13f78:	b500      	push	{lr}
   13f7a:	b089      	sub	sp, #36	; 0x24
	struct z_cbprintf_buf_desc buf_desc = {
   13f7c:	9205      	str	r2, [sp, #20]
   13f7e:	9306      	str	r3, [sp, #24]
   13f80:	2300      	movs	r3, #0
   13f82:	9307      	str	r3, [sp, #28]
	return cbprintf_package_convert(in_packaged, in_len,
   13f84:	b162      	cbz	r2, 13fa0 <cbprintf_package_copy+0x28>
   13f86:	4a07      	ldr	r2, [pc, #28]	; (13fa4 <cbprintf_package_copy+0x2c>)
   13f88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13f8a:	9302      	str	r3, [sp, #8]
   13f8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13f8e:	9301      	str	r3, [sp, #4]
   13f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13f92:	9300      	str	r3, [sp, #0]
   13f94:	ab05      	add	r3, sp, #20
   13f96:	f7fe fe81 	bl	12c9c <cbprintf_package_convert>
}
   13f9a:	b009      	add	sp, #36	; 0x24
   13f9c:	f85d fb04 	ldr.w	pc, [sp], #4
	return cbprintf_package_convert(in_packaged, in_len,
   13fa0:	2200      	movs	r2, #0
   13fa2:	e7f1      	b.n	13f88 <cbprintf_package_copy+0x10>
   13fa4:	00025757 	.word	0x00025757

00013fa8 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   13fa8:	b40e      	push	{r1, r2, r3}
   13faa:	b500      	push	{lr}
   13fac:	b084      	sub	sp, #16
   13fae:	4601      	mov	r1, r0
   13fb0:	ab05      	add	r3, sp, #20
   13fb2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
   13fb6:	9303      	str	r3, [sp, #12]
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   13fb8:	2000      	movs	r0, #0
   13fba:	9000      	str	r0, [sp, #0]
   13fbc:	4803      	ldr	r0, [pc, #12]	; (13fcc <print_formatted+0x24>)
   13fbe:	f7ff fa0d 	bl	133dc <z_cbvprintf_impl>
	length = cbvprintf(out_func, (void *)output, fmt, args);
	va_end(args);

	return length;
}
   13fc2:	b004      	add	sp, #16
   13fc4:	f85d eb04 	ldr.w	lr, [sp], #4
   13fc8:	b003      	add	sp, #12
   13fca:	4770      	bx	lr
   13fcc:	00025977 	.word	0x00025977

00013fd0 <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
   13fd0:	b530      	push	{r4, r5, lr}
   13fd2:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP);


	if (!format) {
   13fd4:	f011 0f44 	tst.w	r1, #68	; 0x44
   13fd8:	d005      	beq.n	13fe6 <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
   13fda:	4b1a      	ldr	r3, [pc, #104]	; (14044 <timestamp_print+0x74>)
   13fdc:	681c      	ldr	r4, [r3, #0]
   13fde:	b934      	cbnz	r4, 13fee <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
   13fe0:	2000      	movs	r0, #0
	}

	return length;
}
   13fe2:	b005      	add	sp, #20
   13fe4:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
   13fe6:	4918      	ldr	r1, [pc, #96]	; (14048 <timestamp_print+0x78>)
   13fe8:	f7ff ffde 	bl	13fa8 <print_formatted>
   13fec:	e7f9      	b.n	13fe2 <timestamp_print+0x12>
		timestamp /= timestamp_div;
   13fee:	4b17      	ldr	r3, [pc, #92]	; (1404c <timestamp_print+0x7c>)
   13ff0:	6819      	ldr	r1, [r3, #0]
   13ff2:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
   13ff6:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
   13ffa:	4a15      	ldr	r2, [pc, #84]	; (14050 <timestamp_print+0x80>)
   13ffc:	fba2 320c 	umull	r3, r2, r2, ip
   14000:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
   14002:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   14006:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
   1400a:	4b12      	ldr	r3, [pc, #72]	; (14054 <timestamp_print+0x84>)
   1400c:	fba3 530e 	umull	r5, r3, r3, lr
   14010:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
   14012:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
   14016:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   1401a:	fb0c f101 	mul.w	r1, ip, r1
   1401e:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   14022:	fb04 1115 	mls	r1, r4, r5, r1
   14026:	fb0c f101 	mul.w	r1, ip, r1
   1402a:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
   1402e:	9102      	str	r1, [sp, #8]
   14030:	9501      	str	r5, [sp, #4]
   14032:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   14036:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
   1403a:	9100      	str	r1, [sp, #0]
   1403c:	4906      	ldr	r1, [pc, #24]	; (14058 <timestamp_print+0x88>)
   1403e:	f7ff ffb3 	bl	13fa8 <print_formatted>
   14042:	e7ce      	b.n	13fe2 <timestamp_print+0x12>
   14044:	20005638 	.word	0x20005638
   14048:	0002b940 	.word	0x0002b940
   1404c:	20005634 	.word	0x20005634
   14050:	91a2b3c5 	.word	0x91a2b3c5
   14054:	88888889 	.word	0x88888889
   14058:	0002b94c 	.word	0x0002b94c

0001405c <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
   1405c:	b161      	cbz	r1, 14078 <color_print+0x1c>
{
   1405e:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   14060:	b12a      	cbz	r2, 1406e <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
   14062:	4a06      	ldr	r2, [pc, #24]	; (1407c <color_print+0x20>)
   14064:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   14068:	b912      	cbnz	r2, 14070 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   1406a:	4a05      	ldr	r2, [pc, #20]	; (14080 <color_print+0x24>)
   1406c:	e000      	b.n	14070 <color_print+0x14>
   1406e:	4a04      	ldr	r2, [pc, #16]	; (14080 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
   14070:	4904      	ldr	r1, [pc, #16]	; (14084 <color_print+0x28>)
   14072:	f7ff ff99 	bl	13fa8 <print_formatted>
	}
}
   14076:	bd08      	pop	{r3, pc}
   14078:	4770      	bx	lr
   1407a:	bf00      	nop
   1407c:	0002b9f0 	.word	0x0002b9f0
   14080:	0002b968 	.word	0x0002b968
   14084:	0002b970 	.word	0x0002b970

00014088 <ids_print>:
		     bool level_on,
		     bool func_on,
		     const char *domain,
		     const char *source,
		     uint32_t level)
{
   14088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1408c:	4605      	mov	r5, r0
   1408e:	4690      	mov	r8, r2
   14090:	461e      	mov	r6, r3
   14092:	9f06      	ldr	r7, [sp, #24]
	int total = 0;

	if (level_on) {
   14094:	b981      	cbnz	r1, 140b8 <ids_print+0x30>
	int total = 0;
   14096:	2400      	movs	r4, #0
		total += print_formatted(output, "<%s> ", severity[level]);
	}

	if (domain) {
   14098:	b12e      	cbz	r6, 140a6 <ids_print+0x1e>
		total += print_formatted(output, "%s/", domain);
   1409a:	4632      	mov	r2, r6
   1409c:	4910      	ldr	r1, [pc, #64]	; (140e0 <ids_print+0x58>)
   1409e:	4628      	mov	r0, r5
   140a0:	f7ff ff82 	bl	13fa8 <print_formatted>
   140a4:	4404      	add	r4, r0
	}

	if (source) {
   140a6:	b1b7      	cbz	r7, 140d6 <ids_print+0x4e>
		total += print_formatted(output,
   140a8:	f1b8 0f00 	cmp.w	r8, #0
   140ac:	d00d      	beq.n	140ca <ids_print+0x42>
				(func_on &&
   140ae:	9b07      	ldr	r3, [sp, #28]
   140b0:	2b04      	cmp	r3, #4
   140b2:	d013      	beq.n	140dc <ids_print+0x54>
		total += print_formatted(output,
   140b4:	490b      	ldr	r1, [pc, #44]	; (140e4 <ids_print+0x5c>)
   140b6:	e009      	b.n	140cc <ids_print+0x44>
		total += print_formatted(output, "<%s> ", severity[level]);
   140b8:	4b0b      	ldr	r3, [pc, #44]	; (140e8 <ids_print+0x60>)
   140ba:	9a07      	ldr	r2, [sp, #28]
   140bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   140c0:	490a      	ldr	r1, [pc, #40]	; (140ec <ids_print+0x64>)
   140c2:	f7ff ff71 	bl	13fa8 <print_formatted>
   140c6:	4604      	mov	r4, r0
   140c8:	e7e6      	b.n	14098 <ids_print+0x10>
		total += print_formatted(output,
   140ca:	4906      	ldr	r1, [pc, #24]	; (140e4 <ids_print+0x5c>)
   140cc:	463a      	mov	r2, r7
   140ce:	4628      	mov	r0, r5
   140d0:	f7ff ff6a 	bl	13fa8 <print_formatted>
   140d4:	4404      	add	r4, r0
				"%s." : "%s: ",
				source);
	}

	return total;
}
   140d6:	4620      	mov	r0, r4
   140d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
   140dc:	4904      	ldr	r1, [pc, #16]	; (140f0 <ids_print+0x68>)
   140de:	e7f5      	b.n	140cc <ids_print+0x44>
   140e0:	0002b988 	.word	0x0002b988
   140e4:	0002b978 	.word	0x0002b978
   140e8:	0002ba04 	.word	0x0002ba04
   140ec:	0002b980 	.word	0x0002b980
   140f0:	0002b974 	.word	0x0002b974

000140f4 <prefix_print>:
			     bool func_on,
			     log_timestamp_t timestamp,
			     const char *domain,
			     const char *source,
			     uint8_t level)
{
   140f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140f8:	b085      	sub	sp, #20
   140fa:	4605      	mov	r5, r0
   140fc:	460c      	mov	r4, r1
   140fe:	4616      	mov	r6, r2
   14100:	9303      	str	r3, [sp, #12]
   14102:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   14106:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   1410a:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   1410e:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
   14112:	f011 fb1e 	bl	25752 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
   14116:	b1d8      	cbz	r0, 14150 <prefix_print+0x5c>
   14118:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
   1411a:	4912      	ldr	r1, [pc, #72]	; (14164 <prefix_print+0x70>)
   1411c:	4628      	mov	r0, r5
   1411e:	f7ff ff43 	bl	13fa8 <print_formatted>
   14122:	4607      	mov	r7, r0
	}

	if (stamp) {
   14124:	f1bb 0f00 	cmp.w	fp, #0
   14128:	d114      	bne.n	14154 <prefix_print+0x60>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
   1412a:	4642      	mov	r2, r8
   1412c:	4651      	mov	r1, sl
   1412e:	4628      	mov	r0, r5
   14130:	f011 fbe1 	bl	258f6 <color_prefix>
	}

	length += ids_print(output, level_on, func_on, domain, source, level);
   14134:	f8cd 8004 	str.w	r8, [sp, #4]
   14138:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1413a:	9300      	str	r3, [sp, #0]
   1413c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1413e:	4632      	mov	r2, r6
   14140:	4649      	mov	r1, r9
   14142:	4628      	mov	r0, r5
   14144:	f7ff ffa0 	bl	14088 <ids_print>

	return length;
}
   14148:	4438      	add	r0, r7
   1414a:	b005      	add	sp, #20
   1414c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
   14150:	2700      	movs	r7, #0
   14152:	e7e7      	b.n	14124 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
   14154:	9a03      	ldr	r2, [sp, #12]
   14156:	4621      	mov	r1, r4
   14158:	4628      	mov	r0, r5
   1415a:	f7ff ff39 	bl	13fd0 <timestamp_print>
   1415e:	4407      	add	r7, r0
   14160:	e7e3      	b.n	1412a <prefix_print+0x36>
   14162:	bf00      	nop
   14164:	0002b98c 	.word	0x0002b98c

00014168 <newline_print>:
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   14168:	f011 0f10 	tst.w	r1, #16
   1416c:	d10b      	bne.n	14186 <newline_print+0x1e>
{
   1416e:	b508      	push	{r3, lr}
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   14170:	f011 0f20 	tst.w	r1, #32
   14174:	d003      	beq.n	1417e <newline_print+0x16>
		print_formatted(ctx, "\n");
   14176:	4904      	ldr	r1, [pc, #16]	; (14188 <newline_print+0x20>)
   14178:	f7ff ff16 	bl	13fa8 <print_formatted>
}
   1417c:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
   1417e:	4903      	ldr	r1, [pc, #12]	; (1418c <newline_print+0x24>)
   14180:	f7ff ff12 	bl	13fa8 <print_formatted>
   14184:	e7fa      	b.n	1417c <newline_print+0x14>
   14186:	4770      	bx	lr
   14188:	0002b528 	.word	0x0002b528
   1418c:	0002b990 	.word	0x0002b990

00014190 <hexdump_line_print>:
{
   14190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14194:	4605      	mov	r5, r0
   14196:	460f      	mov	r7, r1
   14198:	4616      	mov	r6, r2
   1419a:	4698      	mov	r8, r3
	newline_print(output, flags);
   1419c:	9906      	ldr	r1, [sp, #24]
   1419e:	f7ff ffe3 	bl	14168 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
   141a2:	2400      	movs	r4, #0
   141a4:	4544      	cmp	r4, r8
   141a6:	da05      	bge.n	141b4 <hexdump_line_print+0x24>
		print_formatted(output, " ");
   141a8:	4923      	ldr	r1, [pc, #140]	; (14238 <hexdump_line_print+0xa8>)
   141aa:	4628      	mov	r0, r5
   141ac:	f7ff fefc 	bl	13fa8 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   141b0:	3401      	adds	r4, #1
   141b2:	e7f7      	b.n	141a4 <hexdump_line_print+0x14>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   141b4:	2400      	movs	r4, #0
   141b6:	e009      	b.n	141cc <hexdump_line_print+0x3c>
			print_formatted(output, " ");
   141b8:	491f      	ldr	r1, [pc, #124]	; (14238 <hexdump_line_print+0xa8>)
   141ba:	4628      	mov	r0, r5
   141bc:	f7ff fef4 	bl	13fa8 <print_formatted>
   141c0:	e00b      	b.n	141da <hexdump_line_print+0x4a>
			print_formatted(output, "   ");
   141c2:	491e      	ldr	r1, [pc, #120]	; (1423c <hexdump_line_print+0xac>)
   141c4:	4628      	mov	r0, r5
   141c6:	f7ff feef 	bl	13fa8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   141ca:	3401      	adds	r4, #1
   141cc:	2c0f      	cmp	r4, #15
   141ce:	dc0c      	bgt.n	141ea <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
   141d0:	2c00      	cmp	r4, #0
   141d2:	dd02      	ble.n	141da <hexdump_line_print+0x4a>
   141d4:	f014 0f07 	tst.w	r4, #7
   141d8:	d0ee      	beq.n	141b8 <hexdump_line_print+0x28>
		if (i < length) {
   141da:	42b4      	cmp	r4, r6
   141dc:	d2f1      	bcs.n	141c2 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
   141de:	5d3a      	ldrb	r2, [r7, r4]
   141e0:	4917      	ldr	r1, [pc, #92]	; (14240 <hexdump_line_print+0xb0>)
   141e2:	4628      	mov	r0, r5
   141e4:	f7ff fee0 	bl	13fa8 <print_formatted>
   141e8:	e7ef      	b.n	141ca <hexdump_line_print+0x3a>
	print_formatted(output, "|");
   141ea:	4916      	ldr	r1, [pc, #88]	; (14244 <hexdump_line_print+0xb4>)
   141ec:	4628      	mov	r0, r5
   141ee:	f7ff fedb 	bl	13fa8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   141f2:	2400      	movs	r4, #0
   141f4:	e009      	b.n	1420a <hexdump_line_print+0x7a>
			print_formatted(output, " ");
   141f6:	4910      	ldr	r1, [pc, #64]	; (14238 <hexdump_line_print+0xa8>)
   141f8:	4628      	mov	r0, r5
   141fa:	f7ff fed5 	bl	13fa8 <print_formatted>
   141fe:	e00b      	b.n	14218 <hexdump_line_print+0x88>
			print_formatted(output, "%c",
   14200:	4911      	ldr	r1, [pc, #68]	; (14248 <hexdump_line_print+0xb8>)
   14202:	4628      	mov	r0, r5
   14204:	f7ff fed0 	bl	13fa8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   14208:	3401      	adds	r4, #1
   1420a:	2c0f      	cmp	r4, #15
   1420c:	dc12      	bgt.n	14234 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
   1420e:	2c00      	cmp	r4, #0
   14210:	dd02      	ble.n	14218 <hexdump_line_print+0x88>
   14212:	f014 0f07 	tst.w	r4, #7
   14216:	d0ee      	beq.n	141f6 <hexdump_line_print+0x66>
		if (i < length) {
   14218:	42b4      	cmp	r4, r6
   1421a:	d206      	bcs.n	1422a <hexdump_line_print+0x9a>
			unsigned char c = (unsigned char)data[i];
   1421c:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
   1421e:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
   14222:	2b5e      	cmp	r3, #94	; 0x5e
   14224:	d9ec      	bls.n	14200 <hexdump_line_print+0x70>
   14226:	222e      	movs	r2, #46	; 0x2e
   14228:	e7ea      	b.n	14200 <hexdump_line_print+0x70>
			print_formatted(output, " ");
   1422a:	4903      	ldr	r1, [pc, #12]	; (14238 <hexdump_line_print+0xa8>)
   1422c:	4628      	mov	r0, r5
   1422e:	f7ff febb 	bl	13fa8 <print_formatted>
   14232:	e7e9      	b.n	14208 <hexdump_line_print+0x78>
}
   14234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14238:	0002b984 	.word	0x0002b984
   1423c:	0002b99c 	.word	0x0002b99c
   14240:	0002b994 	.word	0x0002b994
   14244:	0002b9a0 	.word	0x0002b9a0
   14248:	0002b9a4 	.word	0x0002b9a4

0001424c <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   1424c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14250:	b084      	sub	sp, #16
   14252:	4604      	mov	r4, r0
   14254:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   14258:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   1425a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
   1425c:	b995      	cbnz	r5, 14284 <log_output_process+0x38>
		prefix_offset = 0;
		/* source set to 1 indicates raw string and contrary to printk
		 * case it should not append anything to the output (printk is
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   1425e:	2b01      	cmp	r3, #1
   14260:	d01b      	beq.n	1429a <log_output_process+0x4e>
   14262:	4817      	ldr	r0, [pc, #92]	; (142c0 <log_output_process+0x74>)
		prefix_offset = 0;
   14264:	f04f 0800 	mov.w	r8, #0
	}

	if (package) {
   14268:	b127      	cbz	r7, 14274 <log_output_process+0x28>
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   1426a:	463b      	mov	r3, r7
   1426c:	4622      	mov	r2, r4
   1426e:	4915      	ldr	r1, [pc, #84]	; (142c4 <log_output_process+0x78>)
   14270:	f010 f906 	bl	24480 <cbpprintf_external>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   14274:	b9ae      	cbnz	r6, 142a2 <log_output_process+0x56>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   14276:	b9ed      	cbnz	r5, 142b4 <log_output_process+0x68>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   14278:	4620      	mov	r0, r4
   1427a:	f011 fb6f 	bl	2595c <log_output_flush>
}
   1427e:	b004      	add	sp, #16
   14280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		prefix_offset = prefix_print(output, flags, 0, timestamp, domain, source, level);
   14284:	9502      	str	r5, [sp, #8]
   14286:	9301      	str	r3, [sp, #4]
   14288:	9200      	str	r2, [sp, #0]
   1428a:	460b      	mov	r3, r1
   1428c:	2200      	movs	r2, #0
   1428e:	990e      	ldr	r1, [sp, #56]	; 0x38
   14290:	f7ff ff30 	bl	140f4 <prefix_print>
   14294:	4680      	mov	r8, r0
		cb = out_func;
   14296:	480c      	ldr	r0, [pc, #48]	; (142c8 <log_output_process+0x7c>)
   14298:	e7e6      	b.n	14268 <log_output_process+0x1c>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   1429a:	480b      	ldr	r0, [pc, #44]	; (142c8 <log_output_process+0x7c>)
		prefix_offset = 0;
   1429c:	f04f 0800 	mov.w	r8, #0
   142a0:	e7e2      	b.n	14268 <log_output_process+0x1c>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
   142a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   142a4:	9300      	str	r3, [sp, #0]
   142a6:	4643      	mov	r3, r8
   142a8:	4632      	mov	r2, r6
   142aa:	990c      	ldr	r1, [sp, #48]	; 0x30
   142ac:	4620      	mov	r0, r4
   142ae:	f011 fb3a 	bl	25926 <log_msg_hexdump>
   142b2:	e7e0      	b.n	14276 <log_output_process+0x2a>
		postfix_print(output, flags, level);
   142b4:	462a      	mov	r2, r5
   142b6:	990e      	ldr	r1, [sp, #56]	; 0x38
   142b8:	4620      	mov	r0, r4
   142ba:	f011 fb28 	bl	2590e <postfix_print>
   142be:	e7db      	b.n	14278 <log_output_process+0x2c>
   142c0:	000259af 	.word	0x000259af
   142c4:	000258e7 	.word	0x000258e7
   142c8:	00025977 	.word	0x00025977

000142cc <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   142cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   142d0:	b086      	sub	sp, #24
   142d2:	4605      	mov	r5, r0
   142d4:	460c      	mov	r4, r1
   142d6:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   142d8:	f8d1 8008 	ldr.w	r8, [r1, #8]
	return msg->hdr.desc.level;
   142dc:	880e      	ldrh	r6, [r1, #0]
   142de:	f3c6 1682 	ubfx	r6, r6, #6, #3
	return msg->hdr.desc.domain;
   142e2:	7808      	ldrb	r0, [r1, #0]
   142e4:	f3c0 00c2 	ubfx	r0, r0, #3, #3
	return msg->hdr.source;
   142e8:	684b      	ldr	r3, [r1, #4]
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
   142ea:	b133      	cbz	r3, 142fa <log_output_msg_process+0x2e>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   142ec:	4a11      	ldr	r2, [pc, #68]	; (14334 <log_output_msg_process+0x68>)
   142ee:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
   142f0:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   142f4:	2900      	cmp	r1, #0
   142f6:	da18      	bge.n	1432a <log_output_msg_process+0x5e>
   142f8:	2300      	movs	r3, #0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   142fa:	4622      	mov	r2, r4
   142fc:	f852 1b10 	ldr.w	r1, [r2], #16
   14300:	f3c1 2149 	ubfx	r1, r1, #9, #10
	*len = msg->hdr.desc.data_len;
   14304:	8860      	ldrh	r0, [r4, #2]
   14306:	f3c0 00cb 	ubfx	r0, r0, #3, #12
	return msg->data + msg->hdr.desc.package_len;
   1430a:	1854      	adds	r4, r2, r1
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   1430c:	b901      	cbnz	r1, 14310 <log_output_msg_process+0x44>
   1430e:	2200      	movs	r2, #0
   14310:	9704      	str	r7, [sp, #16]
   14312:	9003      	str	r0, [sp, #12]
   14314:	9402      	str	r4, [sp, #8]
   14316:	9201      	str	r2, [sp, #4]
   14318:	9600      	str	r6, [sp, #0]
   1431a:	2200      	movs	r2, #0
   1431c:	4641      	mov	r1, r8
   1431e:	4628      	mov	r0, r5
   14320:	f7ff ff94 	bl	1424c <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   14324:	b006      	add	sp, #24
   14326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   1432a:	f7ff fe01 	bl	13f30 <log_source_name_get>
   1432e:	4603      	mov	r3, r0
   14330:	e7e3      	b.n	142fa <log_output_msg_process+0x2e>
   14332:	bf00      	nop
   14334:	0002b154 	.word	0x0002b154

00014338 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   14338:	b570      	push	{r4, r5, r6, lr}
   1433a:	b082      	sub	sp, #8
   1433c:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
   1433e:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   14340:	f242 730f 	movw	r3, #9999	; 0x270f
   14344:	428b      	cmp	r3, r1
   14346:	bf28      	it	cs
   14348:	460b      	movcs	r3, r1
   1434a:	4a0e      	ldr	r2, [pc, #56]	; (14384 <log_output_dropped_process+0x4c>)
   1434c:	2105      	movs	r1, #5
   1434e:	4668      	mov	r0, sp
   14350:	f010 f936 	bl	245c0 <snprintk>
   14354:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
   14356:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   14358:	685b      	ldr	r3, [r3, #4]
   1435a:	220b      	movs	r2, #11
   1435c:	490a      	ldr	r1, [pc, #40]	; (14388 <log_output_dropped_process+0x50>)
   1435e:	4628      	mov	r0, r5
   14360:	f011 fab4 	bl	258cc <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
   14364:	6863      	ldr	r3, [r4, #4]
   14366:	685b      	ldr	r3, [r3, #4]
   14368:	4632      	mov	r2, r6
   1436a:	4669      	mov	r1, sp
   1436c:	4628      	mov	r0, r5
   1436e:	f011 faad 	bl	258cc <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
   14372:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   14374:	685b      	ldr	r3, [r3, #4]
   14376:	221b      	movs	r2, #27
   14378:	4904      	ldr	r1, [pc, #16]	; (1438c <log_output_dropped_process+0x54>)
   1437a:	4628      	mov	r0, r5
   1437c:	f011 faa6 	bl	258cc <buffer_write>
}
   14380:	b002      	add	sp, #8
   14382:	bd70      	pop	{r4, r5, r6, pc}
   14384:	0002cd78 	.word	0x0002cd78
   14388:	0002b9c4 	.word	0x0002b9c4
   1438c:	0002b9a8 	.word	0x0002b9a8

00014390 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   14390:	4b07      	ldr	r3, [pc, #28]	; (143b0 <log_output_timestamp_freq_set+0x20>)
   14392:	2201      	movs	r2, #1
   14394:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   14396:	e004      	b.n	143a2 <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
   14398:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   1439a:	4a05      	ldr	r2, [pc, #20]	; (143b0 <log_output_timestamp_freq_set+0x20>)
   1439c:	6813      	ldr	r3, [r2, #0]
   1439e:	005b      	lsls	r3, r3, #1
   143a0:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   143a2:	4b04      	ldr	r3, [pc, #16]	; (143b4 <log_output_timestamp_freq_set+0x24>)
   143a4:	4298      	cmp	r0, r3
   143a6:	d8f7      	bhi.n	14398 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
   143a8:	4b03      	ldr	r3, [pc, #12]	; (143b8 <log_output_timestamp_freq_set+0x28>)
   143aa:	6018      	str	r0, [r3, #0]
}
   143ac:	4770      	bx	lr
   143ae:	bf00      	nop
   143b0:	20005634 	.word	0x20005634
   143b4:	000f4240 	.word	0x000f4240
   143b8:	20005638 	.word	0x20005638

000143bc <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   143bc:	4b03      	ldr	r3, [pc, #12]	; (143cc <log_backend_rtt_init+0x10>)
   143be:	2201      	movs	r2, #1
   143c0:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
   143c2:	4b03      	ldr	r3, [pc, #12]	; (143d0 <log_backend_rtt_init+0x14>)
   143c4:	4a03      	ldr	r2, [pc, #12]	; (143d4 <log_backend_rtt_init+0x18>)
   143c6:	601a      	str	r2, [r3, #0]
}
   143c8:	4770      	bx	lr
   143ca:	bf00      	nop
   143cc:	200069b4 	.word	0x200069b4
   143d0:	20005664 	.word	0x20005664
   143d4:	20005668 	.word	0x20005668

000143d8 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   143d8:	4b01      	ldr	r3, [pc, #4]	; (143e0 <format_set+0x8>)
   143da:	6019      	str	r1, [r3, #0]
	return 0;
}
   143dc:	2000      	movs	r0, #0
   143de:	4770      	bx	lr
   143e0:	20005650 	.word	0x20005650

000143e4 <on_failed_write>:
{
   143e4:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
   143e6:	b918      	cbnz	r0, 143f0 <on_failed_write+0xc>
		host_present = false;
   143e8:	4b07      	ldr	r3, [pc, #28]	; (14408 <on_failed_write+0x24>)
   143ea:	2200      	movs	r2, #0
   143ec:	701a      	strb	r2, [r3, #0]
}
   143ee:	bd08      	pop	{r3, pc}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   143f0:	4b06      	ldr	r3, [pc, #24]	; (1440c <on_failed_write+0x28>)
   143f2:	781b      	ldrb	r3, [r3, #0]
	} else if (is_sync_mode()) {
   143f4:	b123      	cbz	r3, 14400 <on_failed_write+0x1c>
	z_impl_k_busy_wait(usec_to_wait);
   143f6:	f241 3088 	movw	r0, #5000	; 0x1388
   143fa:	f016 faca 	bl	2a992 <z_impl_k_busy_wait>
}
   143fe:	e7f6      	b.n	143ee <on_failed_write+0xa>
		k_msleep(CONFIG_LOG_BACKEND_RTT_RETRY_DELAY_MS);
   14400:	2005      	movs	r0, #5
   14402:	f011 fae3 	bl	259cc <k_msleep>
}
   14406:	e7f2      	b.n	143ee <on_failed_write+0xa>
   14408:	200069b4 	.word	0x200069b4
   1440c:	200069b5 	.word	0x200069b5

00014410 <on_write>:
{
   14410:	b538      	push	{r3, r4, r5, lr}
   14412:	4604      	mov	r4, r0
	host_present = true;
   14414:	4b0a      	ldr	r3, [pc, #40]	; (14440 <on_write+0x30>)
   14416:	2201      	movs	r2, #1
   14418:	701a      	strb	r2, [r3, #0]
	return panic_mode;
   1441a:	4b0a      	ldr	r3, [pc, #40]	; (14444 <on_write+0x34>)
   1441c:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
   1441e:	b92b      	cbnz	r3, 1442c <on_write+0x1c>
}
   14420:	bd38      	pop	{r3, r4, r5, pc}
			on_failed_write(retry_cnt--);
   14422:	1e65      	subs	r5, r4, #1
   14424:	4620      	mov	r0, r4
   14426:	f7ff ffdd 	bl	143e4 <on_failed_write>
   1442a:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   1442c:	2000      	movs	r0, #0
   1442e:	f00d fea1 	bl	22174 <SEGGER_RTT_HasDataUp>
   14432:	2800      	cmp	r0, #0
   14434:	d0f4      	beq.n	14420 <on_write+0x10>
   14436:	4b02      	ldr	r3, [pc, #8]	; (14440 <on_write+0x30>)
   14438:	781b      	ldrb	r3, [r3, #0]
   1443a:	2b00      	cmp	r3, #0
   1443c:	d1f1      	bne.n	14422 <on_write+0x12>
   1443e:	e7ef      	b.n	14420 <on_write+0x10>
   14440:	200069b4 	.word	0x200069b4
   14444:	200069b5 	.word	0x200069b5

00014448 <data_out_block_mode>:
{
   14448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1444a:	4606      	mov	r6, r0
   1444c:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   1444e:	2704      	movs	r7, #4
   14450:	e00d      	b.n	1446e <data_out_block_mode+0x26>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   14452:	462a      	mov	r2, r5
   14454:	4631      	mov	r1, r6
   14456:	2000      	movs	r0, #0
   14458:	f00d fdf2 	bl	22040 <SEGGER_RTT_WriteSkipNoLock>
   1445c:	4604      	mov	r4, r0
   1445e:	e014      	b.n	1448a <data_out_block_mode+0x42>
			on_write(retry_cnt);
   14460:	4638      	mov	r0, r7
   14462:	f7ff ffd5 	bl	14410 <on_write>
	} while ((ret == 0) && host_present);
   14466:	b9dc      	cbnz	r4, 144a0 <data_out_block_mode+0x58>
   14468:	4b11      	ldr	r3, [pc, #68]	; (144b0 <data_out_block_mode+0x68>)
   1446a:	781b      	ldrb	r3, [r3, #0]
   1446c:	b1c3      	cbz	r3, 144a0 <data_out_block_mode+0x58>
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   1446e:	4b11      	ldr	r3, [pc, #68]	; (144b4 <data_out_block_mode+0x6c>)
   14470:	781b      	ldrb	r3, [r3, #0]
		if (!is_sync_mode()) {
   14472:	2b00      	cmp	r3, #0
   14474:	d1ed      	bne.n	14452 <data_out_block_mode+0xa>
			RTT_LOCK();
   14476:	f00d fe8d 	bl	22194 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   1447a:	462a      	mov	r2, r5
   1447c:	4631      	mov	r1, r6
   1447e:	2000      	movs	r0, #0
   14480:	f00d fdde 	bl	22040 <SEGGER_RTT_WriteSkipNoLock>
   14484:	4604      	mov	r4, r0
			RTT_UNLOCK();
   14486:	f00d fe91 	bl	221ac <zephyr_rtt_mutex_unlock>
		if (ret) {
   1448a:	2c00      	cmp	r4, #0
   1448c:	d1e8      	bne.n	14460 <data_out_block_mode+0x18>
		} else if (host_present) {
   1448e:	4b08      	ldr	r3, [pc, #32]	; (144b0 <data_out_block_mode+0x68>)
   14490:	781b      	ldrb	r3, [r3, #0]
   14492:	2b00      	cmp	r3, #0
   14494:	d0e7      	beq.n	14466 <data_out_block_mode+0x1e>
			retry_cnt--;
   14496:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
   14498:	4638      	mov	r0, r7
   1449a:	f7ff ffa3 	bl	143e4 <on_failed_write>
   1449e:	e7e2      	b.n	14466 <data_out_block_mode+0x1e>
	return ((ret == 0) && host_present) ? 0 : length;
   144a0:	b914      	cbnz	r4, 144a8 <data_out_block_mode+0x60>
   144a2:	4b03      	ldr	r3, [pc, #12]	; (144b0 <data_out_block_mode+0x68>)
   144a4:	781b      	ldrb	r3, [r3, #0]
   144a6:	b903      	cbnz	r3, 144aa <data_out_block_mode+0x62>
   144a8:	462c      	mov	r4, r5
}
   144aa:	4620      	mov	r0, r4
   144ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   144ae:	bf00      	nop
   144b0:	200069b4 	.word	0x200069b4
   144b4:	200069b5 	.word	0x200069b5

000144b8 <panic>:
{
   144b8:	b508      	push	{r3, lr}
	panic_mode = true;
   144ba:	4b03      	ldr	r3, [pc, #12]	; (144c8 <panic+0x10>)
   144bc:	2201      	movs	r2, #1
   144be:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   144c0:	4802      	ldr	r0, [pc, #8]	; (144cc <panic+0x14>)
   144c2:	f011 fa4b 	bl	2595c <log_output_flush>
}
   144c6:	bd08      	pop	{r3, pc}
   144c8:	200069b5 	.word	0x200069b5
   144cc:	0002ba44 	.word	0x0002ba44

000144d0 <dropped>:
{
   144d0:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   144d2:	4802      	ldr	r0, [pc, #8]	; (144dc <dropped+0xc>)
   144d4:	f7ff ff30 	bl	14338 <log_output_dropped_process>
}
   144d8:	bd08      	pop	{r3, pc}
   144da:	bf00      	nop
   144dc:	0002ba44 	.word	0x0002ba44

000144e0 <process>:
{
   144e0:	b510      	push	{r4, lr}
   144e2:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   144e4:	4b04      	ldr	r3, [pc, #16]	; (144f8 <process+0x18>)
   144e6:	6818      	ldr	r0, [r3, #0]
   144e8:	f7ff fb44 	bl	13b74 <log_format_func_t_get>
   144ec:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
   144ee:	220f      	movs	r2, #15
   144f0:	4621      	mov	r1, r4
   144f2:	4802      	ldr	r0, [pc, #8]	; (144fc <process+0x1c>)
   144f4:	4798      	blx	r3
}
   144f6:	bd10      	pop	{r4, pc}
   144f8:	20005650 	.word	0x20005650
   144fc:	0002ba44 	.word	0x0002ba44

00014500 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   14500:	b570      	push	{r4, r5, r6, lr}
   14502:	4605      	mov	r5, r0
	__asm__ volatile(
   14504:	f04f 0340 	mov.w	r3, #64	; 0x40
   14508:	f3ef 8611 	mrs	r6, BASEPRI
   1450c:	f383 8812 	msr	BASEPRI_MAX, r3
   14510:	f3bf 8f6f 	isb	sy
   14514:	4b0e      	ldr	r3, [pc, #56]	; (14550 <pm_state_notify+0x50>)
   14516:	681c      	ldr	r4, [r3, #0]
   14518:	e00d      	b.n	14536 <pm_state_notify+0x36>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
   1451a:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
   1451c:	b13a      	cbz	r2, 1452e <pm_state_notify+0x2e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   1451e:	4b0d      	ldr	r3, [pc, #52]	; (14554 <pm_state_notify+0x54>)
   14520:	7d1b      	ldrb	r3, [r3, #20]
   14522:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   14526:	490c      	ldr	r1, [pc, #48]	; (14558 <pm_state_notify+0x58>)
   14528:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
   1452c:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1452e:	4623      	mov	r3, r4
	return node->next;
   14530:	6824      	ldr	r4, [r4, #0]
   14532:	b104      	cbz	r4, 14536 <pm_state_notify+0x36>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   14534:	b123      	cbz	r3, 14540 <pm_state_notify+0x40>
   14536:	b12c      	cbz	r4, 14544 <pm_state_notify+0x44>
		if (entering_state) {
   14538:	2d00      	cmp	r5, #0
   1453a:	d0ee      	beq.n	1451a <pm_state_notify+0x1a>
			callback = notifier->state_entry;
   1453c:	6862      	ldr	r2, [r4, #4]
   1453e:	e7ed      	b.n	1451c <pm_state_notify+0x1c>
   14540:	461c      	mov	r4, r3
   14542:	e7f8      	b.n	14536 <pm_state_notify+0x36>
	__asm__ volatile(
   14544:	f386 8811 	msr	BASEPRI, r6
   14548:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   1454c:	bd70      	pop	{r4, r5, r6, pc}
   1454e:	bf00      	nop
   14550:	20005698 	.word	0x20005698
   14554:	2000696c 	.word	0x2000696c
   14558:	2000568c 	.word	0x2000568c

0001455c <pm_exit_pos_ops>:
{
   1455c:	b508      	push	{r3, lr}
	if (pm_state_exit_post_ops != NULL) {
   1455e:	4b06      	ldr	r3, [pc, #24]	; (14578 <pm_exit_pos_ops+0x1c>)
   14560:	b123      	cbz	r3, 1456c <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
   14562:	7841      	ldrb	r1, [r0, #1]
   14564:	7800      	ldrb	r0, [r0, #0]
   14566:	f011 fdc5 	bl	260f4 <pm_state_exit_post_ops>
}
   1456a:	bd08      	pop	{r3, pc}
   1456c:	2300      	movs	r3, #0
   1456e:	f383 8811 	msr	BASEPRI, r3
   14572:	f3bf 8f6f 	isb	sy
   14576:	e7f8      	b.n	1456a <pm_exit_pos_ops+0xe>
   14578:	000260f5 	.word	0x000260f5

0001457c <pm_system_resume>:

void pm_system_resume(void)
{
   1457c:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   1457e:	4b0e      	ldr	r3, [pc, #56]	; (145b8 <pm_system_resume+0x3c>)
   14580:	7d1c      	ldrb	r4, [r3, #20]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   14582:	4621      	mov	r1, r4
   14584:	480d      	ldr	r0, [pc, #52]	; (145bc <pm_system_resume+0x40>)
   14586:	f011 fa37 	bl	259f8 <atomic_test_and_clear_bit>
   1458a:	b900      	cbnz	r0, 1458e <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
   1458c:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
   1458e:	0065      	lsls	r5, r4, #1
   14590:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   14594:	4e0a      	ldr	r6, [pc, #40]	; (145c0 <pm_system_resume+0x44>)
   14596:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   1459a:	f7ff ffdf 	bl	1455c <pm_exit_pos_ops>
		pm_state_notify(false);
   1459e:	2000      	movs	r0, #0
   145a0:	f7ff ffae 	bl	14500 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   145a4:	192b      	adds	r3, r5, r4
   145a6:	0099      	lsls	r1, r3, #2
   145a8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   145ac:	2200      	movs	r2, #0
   145ae:	5072      	str	r2, [r6, r1]
   145b0:	605a      	str	r2, [r3, #4]
   145b2:	609a      	str	r2, [r3, #8]
}
   145b4:	e7ea      	b.n	1458c <pm_system_resume+0x10>
   145b6:	bf00      	nop
   145b8:	2000696c 	.word	0x2000696c
   145bc:	200056a0 	.word	0x200056a0
   145c0:	2000568c 	.word	0x2000568c

000145c4 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   145c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   145c6:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
   145c8:	4b38      	ldr	r3, [pc, #224]	; (146ac <pm_system_suspend+0xe8>)
   145ca:	7d1c      	ldrb	r4, [r3, #20]
	__asm__ volatile(
   145cc:	f04f 0340 	mov.w	r3, #64	; 0x40
   145d0:	f3ef 8611 	mrs	r6, BASEPRI
   145d4:	f383 8812 	msr	BASEPRI_MAX, r3
   145d8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   145dc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   145e0:	4b33      	ldr	r3, [pc, #204]	; (146b0 <pm_system_suspend+0xec>)
   145e2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   145e6:	2b00      	cmp	r3, #0
   145e8:	d039      	beq.n	1465e <pm_system_suspend+0x9a>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   145ea:	4b32      	ldr	r3, [pc, #200]	; (146b4 <pm_system_suspend+0xf0>)
   145ec:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   145f0:	4f2f      	ldr	r7, [pc, #188]	; (146b0 <pm_system_suspend+0xec>)
   145f2:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   145f6:	eb07 0382 	add.w	r3, r7, r2, lsl #2
   145fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   145fe:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   14602:	2300      	movs	r3, #0
   14604:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
   14608:	f386 8811 	msr	BASEPRI, r6
   1460c:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   14610:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   14614:	4a27      	ldr	r2, [pc, #156]	; (146b4 <pm_system_suspend+0xf0>)
   14616:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   1461a:	2b00      	cmp	r3, #0
   1461c:	d044      	beq.n	146a8 <pm_system_suspend+0xe4>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   1461e:	f1b5 3fff 	cmp.w	r5, #4294967295
   14622:	d12b      	bne.n	1467c <pm_system_suspend+0xb8>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   14624:	f00e fd10 	bl	23048 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   14628:	2001      	movs	r0, #1
   1462a:	f7ff ff69 	bl	14500 <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
   1462e:	4621      	mov	r1, r4
   14630:	4821      	ldr	r0, [pc, #132]	; (146b8 <pm_system_suspend+0xf4>)
   14632:	f011 f9fd 	bl	25a30 <atomic_set_bit>
	if (pm_state_set != NULL) {
   14636:	4b21      	ldr	r3, [pc, #132]	; (146bc <pm_system_suspend+0xf8>)
   14638:	b15b      	cbz	r3, 14652 <pm_system_suspend+0x8e>
		pm_state_set(info->state, info->substate_id);
   1463a:	4a1e      	ldr	r2, [pc, #120]	; (146b4 <pm_system_suspend+0xf0>)
   1463c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   14640:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14644:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   14648:	7859      	ldrb	r1, [r3, #1]
   1464a:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
   1464e:	f011 fd49 	bl	260e4 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   14652:	f7ff ff93 	bl	1457c <pm_system_resume>
	k_sched_unlock();
   14656:	f00e fef9 	bl	2344c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   1465a:	2001      	movs	r0, #1
}
   1465c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		info = pm_policy_next_state(id, ticks);
   1465e:	4601      	mov	r1, r0
   14660:	4620      	mov	r0, r4
   14662:	f000 f831 	bl	146c8 <pm_policy_next_state>
		if (info != NULL) {
   14666:	2800      	cmp	r0, #0
   14668:	d0ce      	beq.n	14608 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
   1466a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   1466e:	4b11      	ldr	r3, [pc, #68]	; (146b4 <pm_system_suspend+0xf0>)
   14670:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   14674:	c807      	ldmia	r0, {r0, r1, r2}
   14676:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   1467a:	e7c5      	b.n	14608 <pm_system_suspend+0x44>
		     k_us_to_ticks_ceil32(
   1467c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   14680:	4b0c      	ldr	r3, [pc, #48]	; (146b4 <pm_system_suspend+0xf0>)
   14682:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   14686:	6898      	ldr	r0, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
   14688:	0c41      	lsrs	r1, r0, #17
   1468a:	03c0      	lsls	r0, r0, #15
   1468c:	4b0c      	ldr	r3, [pc, #48]	; (146c0 <pm_system_suspend+0xfc>)
   1468e:	18c0      	adds	r0, r0, r3
   14690:	4a0c      	ldr	r2, [pc, #48]	; (146c4 <pm_system_suspend+0x100>)
   14692:	f04f 0300 	mov.w	r3, #0
   14696:	f141 0100 	adc.w	r1, r1, #0
   1469a:	f7eb fd31 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   1469e:	2101      	movs	r1, #1
   146a0:	1a28      	subs	r0, r5, r0
   146a2:	f016 f943 	bl	2a92c <z_set_timeout_expiry>
   146a6:	e7bd      	b.n	14624 <pm_system_suspend+0x60>
		return false;
   146a8:	2000      	movs	r0, #0
   146aa:	e7d7      	b.n	1465c <pm_system_suspend+0x98>
   146ac:	2000696c 	.word	0x2000696c
   146b0:	20005680 	.word	0x20005680
   146b4:	2000568c 	.word	0x2000568c
   146b8:	200056a0 	.word	0x200056a0
   146bc:	000260e5 	.word	0x000260e5
   146c0:	000f423f 	.word	0x000f423f
   146c4:	000f4240 	.word	0x000f4240

000146c8 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   146c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   146cc:	b082      	sub	sp, #8
   146ce:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   146d0:	a901      	add	r1, sp, #4
   146d2:	f000 f845 	bl	14760 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   146d6:	1e44      	subs	r4, r0, #1
   146d8:	b224      	sxth	r4, r4
   146da:	e007      	b.n	146ec <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
   146dc:	f1b6 3fff 	cmp.w	r6, #4294967295
   146e0:	d033      	beq.n	1474a <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
   146e2:	4480      	add	r8, r0
		if ((ticks == K_TICKS_FOREVER) ||
   146e4:	45b0      	cmp	r8, r6
   146e6:	d930      	bls.n	1474a <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   146e8:	3c01      	subs	r4, #1
   146ea:	b224      	sxth	r4, r4
   146ec:	2c00      	cmp	r4, #0
   146ee:	db2b      	blt.n	14748 <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
   146f0:	9b01      	ldr	r3, [sp, #4]
   146f2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   146f6:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
   146fa:	7869      	ldrb	r1, [r5, #1]
   146fc:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
   14700:	f011 f9a9 	bl	25a56 <pm_policy_state_lock_is_active>
   14704:	2800      	cmp	r0, #0
   14706:	d1ef      	bne.n	146e8 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
   14708:	6868      	ldr	r0, [r5, #4]
   1470a:	0c41      	lsrs	r1, r0, #17
   1470c:	03c0      	lsls	r0, r0, #15
   1470e:	4f11      	ldr	r7, [pc, #68]	; (14754 <pm_policy_next_state+0x8c>)
   14710:	19c0      	adds	r0, r0, r7
   14712:	4a11      	ldr	r2, [pc, #68]	; (14758 <pm_policy_next_state+0x90>)
   14714:	f04f 0300 	mov.w	r3, #0
   14718:	f141 0100 	adc.w	r1, r1, #0
   1471c:	f7eb fcf0 	bl	100 <__aeabi_uldivmod>
   14720:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
   14722:	68ab      	ldr	r3, [r5, #8]
   14724:	0c59      	lsrs	r1, r3, #17
   14726:	03db      	lsls	r3, r3, #15
   14728:	19d8      	adds	r0, r3, r7
   1472a:	4a0b      	ldr	r2, [pc, #44]	; (14758 <pm_policy_next_state+0x90>)
   1472c:	f04f 0300 	mov.w	r3, #0
   14730:	f141 0100 	adc.w	r1, r1, #0
   14734:	f7eb fce4 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   14738:	4b08      	ldr	r3, [pc, #32]	; (1475c <pm_policy_next_state+0x94>)
   1473a:	681b      	ldr	r3, [r3, #0]
   1473c:	f1b3 3fff 	cmp.w	r3, #4294967295
   14740:	d0cc      	beq.n	146dc <pm_policy_next_state+0x14>
   14742:	4283      	cmp	r3, r0
   14744:	d8ca      	bhi.n	146dc <pm_policy_next_state+0x14>
   14746:	e7cf      	b.n	146e8 <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
   14748:	2500      	movs	r5, #0
}
   1474a:	4628      	mov	r0, r5
   1474c:	b002      	add	sp, #8
   1474e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14752:	bf00      	nop
   14754:	000f423f 	.word	0x000f423f
   14758:	000f4240 	.word	0x000f4240
   1475c:	20000658 	.word	0x20000658

00014760 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   14760:	b908      	cbnz	r0, 14766 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   14762:	4b02      	ldr	r3, [pc, #8]	; (1476c <pm_state_cpu_get_all+0xc>)
   14764:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   14766:	2000      	movs	r0, #0
   14768:	4770      	bx	lr
   1476a:	bf00      	nop
   1476c:	0002ba58 	.word	0x0002ba58

00014770 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   14770:	b470      	push	{r4, r5, r6}
   14772:	b08d      	sub	sp, #52	; 0x34
   14774:	4606      	mov	r6, r0
   14776:	460d      	mov	r5, r1
	const unsigned int rconst[11] = {
   14778:	f10d 0c04 	add.w	ip, sp, #4
   1477c:	4c2b      	ldr	r4, [pc, #172]	; (1482c <tc_aes128_set_encrypt_key+0xbc>)
   1477e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   14780:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   14784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   14786:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1478a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   1478e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   14792:	2e00      	cmp	r6, #0
   14794:	d045      	beq.n	14822 <tc_aes128_set_encrypt_key+0xb2>
   14796:	4630      	mov	r0, r6
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   14798:	2d00      	cmp	r5, #0
   1479a:	d044      	beq.n	14826 <tc_aes128_set_encrypt_key+0xb6>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
   1479c:	2300      	movs	r3, #0
   1479e:	e00f      	b.n	147c0 <tc_aes128_set_encrypt_key+0x50>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   147a0:	f815 4023 	ldrb.w	r4, [r5, r3, lsl #2]
   147a4:	eb05 0183 	add.w	r1, r5, r3, lsl #2
   147a8:	784a      	ldrb	r2, [r1, #1]
   147aa:	0412      	lsls	r2, r2, #16
   147ac:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   147b0:	788c      	ldrb	r4, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   147b2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   147b6:	78c9      	ldrb	r1, [r1, #3]
   147b8:	430a      	orrs	r2, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   147ba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < Nk; ++i) {
   147be:	3301      	adds	r3, #1
   147c0:	2b03      	cmp	r3, #3
   147c2:	d9ed      	bls.n	147a0 <tc_aes128_set_encrypt_key+0x30>
   147c4:	e006      	b.n	147d4 <tc_aes128_set_encrypt_key+0x64>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
   147c6:	1f19      	subs	r1, r3, #4
   147c8:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   147cc:	404a      	eors	r2, r1
   147ce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
   147d2:	3301      	adds	r3, #1
   147d4:	2b2b      	cmp	r3, #43	; 0x2b
   147d6:	d820      	bhi.n	1481a <tc_aes128_set_encrypt_key+0xaa>
		t = s->words[i-1];
   147d8:	1e5a      	subs	r2, r3, #1
   147da:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if ((i % Nk) == 0) {
   147de:	f013 0f03 	tst.w	r3, #3
   147e2:	d1f0      	bne.n	147c6 <tc_aes128_set_encrypt_key+0x56>
	return (((a) >> 24)|((a) << 8));
   147e4:	ea4f 6232 	mov.w	r2, r2, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   147e8:	0e11      	lsrs	r1, r2, #24
   147ea:	4c11      	ldr	r4, [pc, #68]	; (14830 <tc_aes128_set_encrypt_key+0xc0>)
   147ec:	5c65      	ldrb	r5, [r4, r1]
   147ee:	f3c2 4107 	ubfx	r1, r2, #16, #8
   147f2:	5c61      	ldrb	r1, [r4, r1]
   147f4:	0409      	lsls	r1, r1, #16
   147f6:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   147fa:	f3c2 2507 	ubfx	r5, r2, #8, #8
   147fe:	5d65      	ldrb	r5, [r4, r5]
   14800:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   14804:	b2d2      	uxtb	r2, r2
   14806:	5ca2      	ldrb	r2, [r4, r2]
   14808:	4311      	orrs	r1, r2
   1480a:	f023 0203 	bic.w	r2, r3, #3
   1480e:	3230      	adds	r2, #48	; 0x30
   14810:	446a      	add	r2, sp
   14812:	f852 2c2c 	ldr.w	r2, [r2, #-44]
   14816:	404a      	eors	r2, r1
   14818:	e7d5      	b.n	147c6 <tc_aes128_set_encrypt_key+0x56>
	}

	return TC_CRYPTO_SUCCESS;
   1481a:	2001      	movs	r0, #1
}
   1481c:	b00d      	add	sp, #52	; 0x34
   1481e:	bc70      	pop	{r4, r5, r6}
   14820:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   14822:	2000      	movs	r0, #0
   14824:	e7fa      	b.n	1481c <tc_aes128_set_encrypt_key+0xac>
		return TC_CRYPTO_FAIL;
   14826:	2000      	movs	r0, #0
   14828:	e7f8      	b.n	1481c <tc_aes128_set_encrypt_key+0xac>
   1482a:	bf00      	nop
   1482c:	0002b2a0 	.word	0x0002b2a0
   14830:	0002ba58 	.word	0x0002ba58

00014834 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   14834:	2800      	cmp	r0, #0
   14836:	d04e      	beq.n	148d6 <tc_aes_encrypt+0xa2>
{
   14838:	b570      	push	{r4, r5, r6, lr}
   1483a:	b084      	sub	sp, #16
   1483c:	4615      	mov	r5, r2
   1483e:	4606      	mov	r6, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   14840:	2900      	cmp	r1, #0
   14842:	d04a      	beq.n	148da <tc_aes_encrypt+0xa6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   14844:	2a00      	cmp	r2, #0
   14846:	d04a      	beq.n	148de <tc_aes_encrypt+0xaa>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   14848:	2310      	movs	r3, #16
   1484a:	460a      	mov	r2, r1
   1484c:	4619      	mov	r1, r3
   1484e:	4668      	mov	r0, sp
   14850:	f011 f903 	bl	25a5a <_copy>
	add_round_key(state, s->words);
   14854:	4629      	mov	r1, r5
   14856:	4668      	mov	r0, sp
   14858:	f011 f919 	bl	25a8e <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1485c:	2400      	movs	r4, #0
   1485e:	e014      	b.n	1488a <tc_aes_encrypt+0x56>
		s[i] = sbox[s[i]];
   14860:	f81d 1003 	ldrb.w	r1, [sp, r3]
   14864:	481f      	ldr	r0, [pc, #124]	; (148e4 <tc_aes_encrypt+0xb0>)
   14866:	5c41      	ldrb	r1, [r0, r1]
   14868:	f80d 1003 	strb.w	r1, [sp, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   1486c:	3301      	adds	r3, #1
   1486e:	2b0f      	cmp	r3, #15
   14870:	d9f6      	bls.n	14860 <tc_aes_encrypt+0x2c>
		sub_bytes(state);
		shift_rows(state);
   14872:	4668      	mov	r0, sp
   14874:	f011 f94c 	bl	25b10 <shift_rows>
		mix_columns(state);
   14878:	4668      	mov	r0, sp
   1487a:	f011 f9c3 	bl	25c04 <mix_columns>
		add_round_key(state, s->words + Nb*(i+1));
   1487e:	3401      	adds	r4, #1
   14880:	eb05 1104 	add.w	r1, r5, r4, lsl #4
   14884:	4668      	mov	r0, sp
   14886:	f011 f902 	bl	25a8e <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1488a:	2c08      	cmp	r4, #8
   1488c:	d801      	bhi.n	14892 <tc_aes_encrypt+0x5e>
	for (i = 0; i < (Nb * Nk); ++i) {
   1488e:	2300      	movs	r3, #0
   14890:	e7ed      	b.n	1486e <tc_aes_encrypt+0x3a>
   14892:	2300      	movs	r3, #0
   14894:	e006      	b.n	148a4 <tc_aes_encrypt+0x70>
		s[i] = sbox[s[i]];
   14896:	f81d 2003 	ldrb.w	r2, [sp, r3]
   1489a:	4912      	ldr	r1, [pc, #72]	; (148e4 <tc_aes_encrypt+0xb0>)
   1489c:	5c8a      	ldrb	r2, [r1, r2]
   1489e:	f80d 2003 	strb.w	r2, [sp, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   148a2:	3301      	adds	r3, #1
   148a4:	2b0f      	cmp	r3, #15
   148a6:	d9f6      	bls.n	14896 <tc_aes_encrypt+0x62>
	}

	sub_bytes(state);
	shift_rows(state);
   148a8:	4668      	mov	r0, sp
   148aa:	f011 f931 	bl	25b10 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   148ae:	1c61      	adds	r1, r4, #1
   148b0:	eb05 1101 	add.w	r1, r5, r1, lsl #4
   148b4:	4668      	mov	r0, sp
   148b6:	f011 f8ea 	bl	25a8e <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   148ba:	2310      	movs	r3, #16
   148bc:	466a      	mov	r2, sp
   148be:	4619      	mov	r1, r3
   148c0:	4630      	mov	r0, r6
   148c2:	f011 f8ca 	bl	25a5a <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   148c6:	2210      	movs	r2, #16
   148c8:	2100      	movs	r1, #0
   148ca:	4668      	mov	r0, sp
   148cc:	f011 f8d2 	bl	25a74 <_set>

	return TC_CRYPTO_SUCCESS;
   148d0:	2001      	movs	r0, #1
}
   148d2:	b004      	add	sp, #16
   148d4:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   148d6:	2000      	movs	r0, #0
}
   148d8:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   148da:	2000      	movs	r0, #0
   148dc:	e7f9      	b.n	148d2 <tc_aes_encrypt+0x9e>
		return TC_CRYPTO_FAIL;
   148de:	2000      	movs	r0, #0
   148e0:	e7f7      	b.n	148d2 <tc_aes_encrypt+0x9e>
   148e2:	bf00      	nop
   148e4:	0002ba58 	.word	0x0002ba58

000148e8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   148e8:	4901      	ldr	r1, [pc, #4]	; (148f0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   148ea:	2210      	movs	r2, #16
	str	r2, [r1]
   148ec:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   148ee:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   148f0:	e000ed10 	.word	0xe000ed10

000148f4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   148f4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   148f6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   148f8:	f380 8811 	msr	BASEPRI, r0
	isb
   148fc:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   14900:	f3bf 8f4f 	dsb	sy
   14904:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   14906:	b662      	cpsie	i
	isb
   14908:	f3bf 8f6f 	isb	sy

	bx	lr
   1490c:	4770      	bx	lr
   1490e:	bf00      	nop

00014910 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   14910:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   14912:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   14914:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   14918:	f3bf 8f4f 	dsb	sy
   1491c:	bf20      	wfe

	msr	BASEPRI, r0
   1491e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   14922:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   14924:	4770      	bx	lr
   14926:	bf00      	nop

00014928 <esf_dump>:
#include <kernel_arch_data.h>
#include <zephyr/logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
   14928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1492c:	b082      	sub	sp, #8
   1492e:	af00      	add	r7, sp, #0
   14930:	4604      	mov	r4, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   14932:	f8d0 e000 	ldr.w	lr, [r0]
   14936:	f8d0 c004 	ldr.w	ip, [r0, #4]
   1493a:	6886      	ldr	r6, [r0, #8]
   1493c:	466d      	mov	r5, sp
   1493e:	b08a      	sub	sp, #40	; 0x28
   14940:	466b      	mov	r3, sp
   14942:	f113 0210 	adds.w	r2, r3, #16
   14946:	f000 80f3 	beq.w	14b30 <esf_dump+0x208>
   1494a:	2114      	movs	r1, #20
   1494c:	b18a      	cbz	r2, 14972 <esf_dump+0x4a>
   1494e:	4608      	mov	r0, r1
   14950:	2904      	cmp	r1, #4
   14952:	dd03      	ble.n	1495c <esf_dump+0x34>
   14954:	f8df 8208 	ldr.w	r8, [pc, #520]	; 14b60 <esf_dump+0x238>
   14958:	f8c3 8014 	str.w	r8, [r3, #20]
   1495c:	2808      	cmp	r0, #8
   1495e:	dd01      	ble.n	14964 <esf_dump+0x3c>
   14960:	f8c3 e018 	str.w	lr, [r3, #24]
   14964:	280c      	cmp	r0, #12
   14966:	dd01      	ble.n	1496c <esf_dump+0x44>
   14968:	f8c3 c01c 	str.w	ip, [r3, #28]
   1496c:	2810      	cmp	r0, #16
   1496e:	dd00      	ble.n	14972 <esf_dump+0x4a>
   14970:	621e      	str	r6, [r3, #32]
   14972:	2913      	cmp	r1, #19
   14974:	f340 80df 	ble.w	14b36 <esf_dump+0x20e>
   14978:	f04f 0c14 	mov.w	ip, #20
   1497c:	b13a      	cbz	r2, 1498e <esf_dump+0x66>
   1497e:	2105      	movs	r1, #5
   14980:	7139      	strb	r1, [r7, #4]
   14982:	2100      	movs	r1, #0
   14984:	7179      	strb	r1, [r7, #5]
   14986:	71b9      	strb	r1, [r7, #6]
   14988:	71f9      	strb	r1, [r7, #7]
   1498a:	6878      	ldr	r0, [r7, #4]
   1498c:	6118      	str	r0, [r3, #16]
   1498e:	2100      	movs	r1, #0
   14990:	f36f 0100 	bfc	r1, #0, #1
   14994:	f36f 0141 	bfc	r1, #1, #1
   14998:	f36f 0182 	bfc	r1, #2, #1
   1499c:	f36f 01c5 	bfc	r1, #3, #3
   149a0:	2301      	movs	r3, #1
   149a2:	f363 1188 	bfi	r1, r3, #6, #3
   149a6:	f40c 7c7d 	and.w	ip, ip, #1012	; 0x3f4
   149aa:	f36c 2152 	bfi	r1, ip, #9, #10
   149ae:	f36f 41de 	bfc	r1, #19, #12
   149b2:	f36f 71df 	bfc	r1, #31, #1
   149b6:	2300      	movs	r3, #0
   149b8:	486a      	ldr	r0, [pc, #424]	; (14b64 <esf_dump+0x23c>)
   149ba:	f010 fefa 	bl	257b2 <z_impl_z_log_msg_static_create>
   149be:	46ad      	mov	sp, r5
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   149c0:	f8d4 e00c 	ldr.w	lr, [r4, #12]
   149c4:	f8d4 c010 	ldr.w	ip, [r4, #16]
   149c8:	6966      	ldr	r6, [r4, #20]
   149ca:	466d      	mov	r5, sp
   149cc:	b08a      	sub	sp, #40	; 0x28
   149ce:	466b      	mov	r3, sp
   149d0:	f113 0210 	adds.w	r2, r3, #16
   149d4:	f000 80b2 	beq.w	14b3c <esf_dump+0x214>
   149d8:	2114      	movs	r1, #20
   149da:	b18a      	cbz	r2, 14a00 <esf_dump+0xd8>
   149dc:	4608      	mov	r0, r1
   149de:	2904      	cmp	r1, #4
   149e0:	dd03      	ble.n	149ea <esf_dump+0xc2>
   149e2:	f8df 8184 	ldr.w	r8, [pc, #388]	; 14b68 <esf_dump+0x240>
   149e6:	f8c3 8014 	str.w	r8, [r3, #20]
   149ea:	2808      	cmp	r0, #8
   149ec:	dd01      	ble.n	149f2 <esf_dump+0xca>
   149ee:	f8c3 e018 	str.w	lr, [r3, #24]
   149f2:	280c      	cmp	r0, #12
   149f4:	dd01      	ble.n	149fa <esf_dump+0xd2>
   149f6:	f8c3 c01c 	str.w	ip, [r3, #28]
   149fa:	2810      	cmp	r0, #16
   149fc:	dd00      	ble.n	14a00 <esf_dump+0xd8>
   149fe:	621e      	str	r6, [r3, #32]
   14a00:	2913      	cmp	r1, #19
   14a02:	f340 809e 	ble.w	14b42 <esf_dump+0x21a>
   14a06:	f04f 0c14 	mov.w	ip, #20
   14a0a:	b13a      	cbz	r2, 14a1c <esf_dump+0xf4>
   14a0c:	2105      	movs	r1, #5
   14a0e:	7139      	strb	r1, [r7, #4]
   14a10:	2100      	movs	r1, #0
   14a12:	7179      	strb	r1, [r7, #5]
   14a14:	71b9      	strb	r1, [r7, #6]
   14a16:	71f9      	strb	r1, [r7, #7]
   14a18:	6878      	ldr	r0, [r7, #4]
   14a1a:	6118      	str	r0, [r3, #16]
   14a1c:	2100      	movs	r1, #0
   14a1e:	f36f 0100 	bfc	r1, #0, #1
   14a22:	f36f 0141 	bfc	r1, #1, #1
   14a26:	f36f 0182 	bfc	r1, #2, #1
   14a2a:	f36f 01c5 	bfc	r1, #3, #3
   14a2e:	2301      	movs	r3, #1
   14a30:	f363 1188 	bfi	r1, r3, #6, #3
   14a34:	f40c 7c7d 	and.w	ip, ip, #1012	; 0x3f4
   14a38:	f36c 2152 	bfi	r1, ip, #9, #10
   14a3c:	f36f 41de 	bfc	r1, #19, #12
   14a40:	f36f 71df 	bfc	r1, #31, #1
   14a44:	2300      	movs	r3, #0
   14a46:	4847      	ldr	r0, [pc, #284]	; (14b64 <esf_dump+0x23c>)
   14a48:	f010 feb3 	bl	257b2 <z_impl_z_log_msg_static_create>
   14a4c:	46ad      	mov	sp, r5
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   14a4e:	69e6      	ldr	r6, [r4, #28]
   14a50:	466d      	mov	r5, sp
   14a52:	b088      	sub	sp, #32
   14a54:	466b      	mov	r3, sp
   14a56:	f113 0210 	adds.w	r2, r3, #16
   14a5a:	d075      	beq.n	14b48 <esf_dump+0x220>
   14a5c:	210c      	movs	r1, #12
   14a5e:	b14a      	cbz	r2, 14a74 <esf_dump+0x14c>
   14a60:	4608      	mov	r0, r1
   14a62:	2904      	cmp	r1, #4
   14a64:	dd03      	ble.n	14a6e <esf_dump+0x146>
   14a66:	f8df c104 	ldr.w	ip, [pc, #260]	; 14b6c <esf_dump+0x244>
   14a6a:	f8c3 c014 	str.w	ip, [r3, #20]
   14a6e:	2808      	cmp	r0, #8
   14a70:	dd00      	ble.n	14a74 <esf_dump+0x14c>
   14a72:	619e      	str	r6, [r3, #24]
   14a74:	290b      	cmp	r1, #11
   14a76:	dd6a      	ble.n	14b4e <esf_dump+0x226>
   14a78:	f04f 0c0c 	mov.w	ip, #12
   14a7c:	b13a      	cbz	r2, 14a8e <esf_dump+0x166>
   14a7e:	2103      	movs	r1, #3
   14a80:	7139      	strb	r1, [r7, #4]
   14a82:	2100      	movs	r1, #0
   14a84:	7179      	strb	r1, [r7, #5]
   14a86:	71b9      	strb	r1, [r7, #6]
   14a88:	71f9      	strb	r1, [r7, #7]
   14a8a:	6878      	ldr	r0, [r7, #4]
   14a8c:	6118      	str	r0, [r3, #16]
   14a8e:	2100      	movs	r1, #0
   14a90:	f36f 0100 	bfc	r1, #0, #1
   14a94:	f36f 0141 	bfc	r1, #1, #1
   14a98:	f36f 0182 	bfc	r1, #2, #1
   14a9c:	f36f 01c5 	bfc	r1, #3, #3
   14aa0:	2301      	movs	r3, #1
   14aa2:	f363 1188 	bfi	r1, r3, #6, #3
   14aa6:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   14aaa:	f36c 2152 	bfi	r1, ip, #9, #10
   14aae:	f36f 41de 	bfc	r1, #19, #12
   14ab2:	f36f 71df 	bfc	r1, #31, #1
   14ab6:	2300      	movs	r3, #0
   14ab8:	482a      	ldr	r0, [pc, #168]	; (14b64 <esf_dump+0x23c>)
   14aba:	f010 fe7a 	bl	257b2 <z_impl_z_log_msg_static_create>
   14abe:	46ad      	mov	sp, r5
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   14ac0:	69a4      	ldr	r4, [r4, #24]
   14ac2:	b088      	sub	sp, #32
   14ac4:	466b      	mov	r3, sp
   14ac6:	f113 0210 	adds.w	r2, r3, #16
   14aca:	d043      	beq.n	14b54 <esf_dump+0x22c>
   14acc:	210c      	movs	r1, #12
   14ace:	b13a      	cbz	r2, 14ae0 <esf_dump+0x1b8>
   14ad0:	4608      	mov	r0, r1
   14ad2:	2904      	cmp	r1, #4
   14ad4:	dd01      	ble.n	14ada <esf_dump+0x1b2>
   14ad6:	4d26      	ldr	r5, [pc, #152]	; (14b70 <esf_dump+0x248>)
   14ad8:	615d      	str	r5, [r3, #20]
   14ada:	2808      	cmp	r0, #8
   14adc:	dd00      	ble.n	14ae0 <esf_dump+0x1b8>
   14ade:	619c      	str	r4, [r3, #24]
   14ae0:	290b      	cmp	r1, #11
   14ae2:	dd3a      	ble.n	14b5a <esf_dump+0x232>
   14ae4:	240c      	movs	r4, #12
   14ae6:	b13a      	cbz	r2, 14af8 <esf_dump+0x1d0>
   14ae8:	2103      	movs	r1, #3
   14aea:	7139      	strb	r1, [r7, #4]
   14aec:	2100      	movs	r1, #0
   14aee:	7179      	strb	r1, [r7, #5]
   14af0:	71b9      	strb	r1, [r7, #6]
   14af2:	71f9      	strb	r1, [r7, #7]
   14af4:	6878      	ldr	r0, [r7, #4]
   14af6:	6118      	str	r0, [r3, #16]
   14af8:	2100      	movs	r1, #0
   14afa:	f36f 0100 	bfc	r1, #0, #1
   14afe:	f36f 0141 	bfc	r1, #1, #1
   14b02:	f36f 0182 	bfc	r1, #2, #1
   14b06:	f36f 01c5 	bfc	r1, #3, #3
   14b0a:	2301      	movs	r3, #1
   14b0c:	f363 1188 	bfi	r1, r3, #6, #3
   14b10:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   14b14:	f364 2152 	bfi	r1, r4, #9, #10
   14b18:	f36f 41de 	bfc	r1, #19, #12
   14b1c:	f36f 71df 	bfc	r1, #31, #1
   14b20:	2300      	movs	r3, #0
   14b22:	4810      	ldr	r0, [pc, #64]	; (14b64 <esf_dump+0x23c>)
   14b24:	f010 fe45 	bl	257b2 <z_impl_z_log_msg_static_create>
		esf->basic.pc);
}
   14b28:	3708      	adds	r7, #8
   14b2a:	46bd      	mov	sp, r7
   14b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   14b30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   14b34:	e70a      	b.n	1494c <esf_dump+0x24>
   14b36:	f06f 0c1b 	mvn.w	ip, #27
   14b3a:	e71f      	b.n	1497c <esf_dump+0x54>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   14b3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   14b40:	e74b      	b.n	149da <esf_dump+0xb2>
   14b42:	f06f 0c1b 	mvn.w	ip, #27
   14b46:	e760      	b.n	14a0a <esf_dump+0xe2>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   14b48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   14b4c:	e787      	b.n	14a5e <esf_dump+0x136>
   14b4e:	f06f 0c1b 	mvn.w	ip, #27
   14b52:	e793      	b.n	14a7c <esf_dump+0x154>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   14b54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   14b58:	e7b9      	b.n	14ace <esf_dump+0x1a6>
   14b5a:	f06f 041b 	mvn.w	r4, #27
   14b5e:	e7c2      	b.n	14ae6 <esf_dump+0x1be>
   14b60:	0002bb58 	.word	0x0002bb58
   14b64:	0002b20c 	.word	0x0002b20c
   14b68:	0002bb88 	.word	0x0002bb88
   14b6c:	0002bbb8 	.word	0x0002bbb8
   14b70:	0002bbc8 	.word	0x0002bbc8

00014b74 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   14b74:	2800      	cmp	r0, #0
   14b76:	db07      	blt.n	14b88 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14b78:	f000 021f 	and.w	r2, r0, #31
   14b7c:	0940      	lsrs	r0, r0, #5
   14b7e:	2301      	movs	r3, #1
   14b80:	4093      	lsls	r3, r2
   14b82:	4a02      	ldr	r2, [pc, #8]	; (14b8c <__NVIC_EnableIRQ+0x18>)
   14b84:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
   14b88:	4770      	bx	lr
   14b8a:	bf00      	nop
   14b8c:	e000e100 	.word	0xe000e100

00014b90 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   14b90:	2800      	cmp	r0, #0
   14b92:	db0c      	blt.n	14bae <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14b94:	f000 021f 	and.w	r2, r0, #31
   14b98:	0940      	lsrs	r0, r0, #5
   14b9a:	2301      	movs	r3, #1
   14b9c:	4093      	lsls	r3, r2
   14b9e:	3020      	adds	r0, #32
   14ba0:	4a03      	ldr	r2, [pc, #12]	; (14bb0 <__NVIC_DisableIRQ+0x20>)
   14ba2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   14ba6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14baa:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
   14bae:	4770      	bx	lr
   14bb0:	e000e100 	.word	0xe000e100

00014bb4 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   14bb4:	2800      	cmp	r0, #0
   14bb6:	db08      	blt.n	14bca <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14bb8:	0149      	lsls	r1, r1, #5
   14bba:	b2c9      	uxtb	r1, r1
   14bbc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
   14bc0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
   14bc4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
   14bc8:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14bca:	f000 000f 	and.w	r0, r0, #15
   14bce:	0149      	lsls	r1, r1, #5
   14bd0:	b2c9      	uxtb	r1, r1
   14bd2:	4b01      	ldr	r3, [pc, #4]	; (14bd8 <__NVIC_SetPriority+0x24>)
   14bd4:	5419      	strb	r1, [r3, r0]
  }
}
   14bd6:	4770      	bx	lr
   14bd8:	e000ed14 	.word	0xe000ed14

00014bdc <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   14bdc:	0942      	lsrs	r2, r0, #5
   14bde:	4b05      	ldr	r3, [pc, #20]	; (14bf4 <arch_irq_is_enabled+0x18>)
   14be0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   14be4:	f000 001f 	and.w	r0, r0, #31
   14be8:	2301      	movs	r3, #1
   14bea:	fa03 f000 	lsl.w	r0, r3, r0
}
   14bee:	4010      	ands	r0, r2
   14bf0:	4770      	bx	lr
   14bf2:	bf00      	nop
   14bf4:	e000e100 	.word	0xe000e100

00014bf8 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   14bf8:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   14bfa:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   14bfc:	4b05      	ldr	r3, [pc, #20]	; (14c14 <_arch_isr_direct_pm+0x1c>)
   14bfe:	699b      	ldr	r3, [r3, #24]
   14c00:	b90b      	cbnz	r3, 14c06 <_arch_isr_direct_pm+0xe>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   14c02:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   14c04:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   14c06:	4b03      	ldr	r3, [pc, #12]	; (14c14 <_arch_isr_direct_pm+0x1c>)
   14c08:	2200      	movs	r2, #0
   14c0a:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   14c0c:	f015 fa38 	bl	2a080 <z_pm_save_idle_exit>
   14c10:	e7f7      	b.n	14c02 <_arch_isr_direct_pm+0xa>
   14c12:	bf00      	nop
   14c14:	2000696c 	.word	0x2000696c

00014c18 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   14c18:	bf30      	wfi
    b z_SysNmiOnReset
   14c1a:	f7ff bffd 	b.w	14c18 <z_SysNmiOnReset>
   14c1e:	bf00      	nop

00014c20 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   14c20:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   14c22:	4b0b      	ldr	r3, [pc, #44]	; (14c50 <z_arm_prep_c+0x30>)
   14c24:	4a0b      	ldr	r2, [pc, #44]	; (14c54 <z_arm_prep_c+0x34>)
   14c26:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   14c2a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   14c2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14c30:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   14c34:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   14c38:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   14c3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   14c40:	f00d fc8c 	bl	2255c <z_bss_zero>
	z_data_copy();
   14c44:	f00e fda4 	bl	23790 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   14c48:	f000 ffc2 	bl	15bd0 <z_arm_interrupt_init>
	z_cstart();
   14c4c:	f00d fce4 	bl	22618 <z_cstart>
   14c50:	e000ed00 	.word	0xe000ed00
   14c54:	00000000 	.word	0x00000000

00014c58 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   14c58:	4a0a      	ldr	r2, [pc, #40]	; (14c84 <arch_swap+0x2c>)
   14c5a:	6893      	ldr	r3, [r2, #8]
   14c5c:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
   14c60:	4909      	ldr	r1, [pc, #36]	; (14c88 <arch_swap+0x30>)
   14c62:	6809      	ldr	r1, [r1, #0]
   14c64:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14c68:	4908      	ldr	r1, [pc, #32]	; (14c8c <arch_swap+0x34>)
   14c6a:	684b      	ldr	r3, [r1, #4]
   14c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   14c70:	604b      	str	r3, [r1, #4]
   14c72:	2300      	movs	r3, #0
   14c74:	f383 8811 	msr	BASEPRI, r3
   14c78:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   14c7c:	6893      	ldr	r3, [r2, #8]
}
   14c7e:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   14c82:	4770      	bx	lr
   14c84:	2000696c 	.word	0x2000696c
   14c88:	0002db08 	.word	0x0002db08
   14c8c:	e000ed00 	.word	0xe000ed00

00014c90 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   14c90:	4913      	ldr	r1, [pc, #76]	; (14ce0 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   14c92:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   14c94:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   14c98:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   14c9a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   14c9e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   14ca2:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   14ca4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   14ca8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   14cac:	4f0d      	ldr	r7, [pc, #52]	; (14ce4 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   14cae:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   14cb2:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   14cb4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   14cb6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   14cb8:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
   14cbc:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   14cbe:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   14cc2:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   14cc6:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   14cc8:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   14cca:	f001 f831 	bl	15d30 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   14cce:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   14cd2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   14cd6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   14cda:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   14cde:	4770      	bx	lr
    ldr r1, =_kernel
   14ce0:	2000696c 	.word	0x2000696c
    ldr v4, =_SCS_ICSR
   14ce4:	e000ed04 	.word	0xe000ed04

00014ce8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   14ce8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   14cec:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   14cee:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   14cf2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   14cf6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   14cf8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   14cfc:	2902      	cmp	r1, #2
    beq _oops
   14cfe:	d0ff      	beq.n	14d00 <_oops>

00014d00 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   14d00:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   14d02:	f011 f8b6 	bl	25e72 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   14d06:	bd01      	pop	{r0, pc}

00014d08 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   14d08:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   14d0a:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   14d0e:	490e      	ldr	r1, [pc, #56]	; (14d48 <arch_new_thread+0x40>)
   14d10:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   14d14:	f021 0101 	bic.w	r1, r1, #1
   14d18:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   14d1c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   14d20:	9b01      	ldr	r3, [sp, #4]
   14d22:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   14d26:	9b02      	ldr	r3, [sp, #8]
   14d28:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   14d2c:	9b03      	ldr	r3, [sp, #12]
   14d2e:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   14d32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   14d36:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
   14d3a:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   14d3c:	2300      	movs	r3, #0
   14d3e:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   14d42:	bc10      	pop	{r4}
   14d44:	4770      	bx	lr
   14d46:	bf00      	nop
   14d48:	000245dd 	.word	0x000245dd

00014d4c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   14d4c:	4b10      	ldr	r3, [pc, #64]	; (14d90 <z_check_thread_stack_fail+0x44>)
   14d4e:	689b      	ldr	r3, [r3, #8]

	if (thread == NULL) {
   14d50:	b1bb      	cbz	r3, 14d82 <z_check_thread_stack_fail+0x36>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   14d52:	f110 0f16 	cmn.w	r0, #22
   14d56:	d00b      	beq.n	14d70 <z_check_thread_stack_fail+0x24>
   14d58:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   14d5c:	f1a2 0c40 	sub.w	ip, r2, #64	; 0x40
   14d60:	4584      	cmp	ip, r0
   14d62:	d810      	bhi.n	14d86 <z_check_thread_stack_fail+0x3a>
   14d64:	4282      	cmp	r2, r0
   14d66:	d910      	bls.n	14d8a <z_check_thread_stack_fail+0x3e>
   14d68:	428a      	cmp	r2, r1
   14d6a:	d807      	bhi.n	14d7c <z_check_thread_stack_fail+0x30>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   14d6c:	2000      	movs	r0, #0
   14d6e:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   14d70:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   14d74:	428a      	cmp	r2, r1
   14d76:	d801      	bhi.n	14d7c <z_check_thread_stack_fail+0x30>
	return 0;
   14d78:	2000      	movs	r0, #0
}
   14d7a:	4770      	bx	lr
		return thread->stack_info.start;
   14d7c:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
   14d80:	4770      	bx	lr
		return 0;
   14d82:	2000      	movs	r0, #0
   14d84:	4770      	bx	lr
	return 0;
   14d86:	2000      	movs	r0, #0
   14d88:	4770      	bx	lr
   14d8a:	2000      	movs	r0, #0
   14d8c:	4770      	bx	lr
   14d8e:	bf00      	nop
   14d90:	2000696c 	.word	0x2000696c

00014d94 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   14d94:	b508      	push	{r3, lr}
   14d96:	460d      	mov	r5, r1
   14d98:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   14d9a:	4b08      	ldr	r3, [pc, #32]	; (14dbc <arch_switch_to_main_thread+0x28>)
   14d9c:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   14d9e:	f000 ffc7 	bl	15d30 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   14da2:	4620      	mov	r0, r4
   14da4:	f385 8809 	msr	PSP, r5
   14da8:	2100      	movs	r1, #0
   14daa:	b663      	cpsie	if
   14dac:	f381 8811 	msr	BASEPRI, r1
   14db0:	f3bf 8f6f 	isb	sy
   14db4:	2200      	movs	r2, #0
   14db6:	2300      	movs	r3, #0
   14db8:	f00f fc10 	bl	245dc <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   14dbc:	2000696c 	.word	0x2000696c

00014dc0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   14dc0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   14dc2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   14dc4:	4a0b      	ldr	r2, [pc, #44]	; (14df4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   14dc6:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   14dc8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   14dca:	bf1e      	ittt	ne
	movne	r1, #0
   14dcc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   14dce:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   14dd0:	f015 f956 	blne	2a080 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   14dd4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   14dd6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   14dda:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   14dde:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   14de2:	4905      	ldr	r1, [pc, #20]	; (14df8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   14de4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   14de6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   14de8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   14dea:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   14dee:	4903      	ldr	r1, [pc, #12]	; (14dfc <_isr_wrapper+0x3c>)
	bx r1
   14df0:	4708      	bx	r1
   14df2:	0000      	.short	0x0000
	ldr r2, =_kernel
   14df4:	2000696c 	.word	0x2000696c
	ldr r1, =_sw_isr_table
   14df8:	0002af54 	.word	0x0002af54
	ldr r1, =z_arm_int_exit
   14dfc:	00014e01 	.word	0x00014e01

00014e00 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   14e00:	4b04      	ldr	r3, [pc, #16]	; (14e14 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   14e02:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   14e04:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   14e06:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   14e08:	d003      	beq.n	14e12 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   14e0a:	4903      	ldr	r1, [pc, #12]	; (14e18 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   14e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   14e10:	600a      	str	r2, [r1, #0]

00014e12 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   14e12:	4770      	bx	lr
	ldr r3, =_kernel
   14e14:	2000696c 	.word	0x2000696c
	ldr r1, =_SCS_ICSR
   14e18:	e000ed04 	.word	0xe000ed04

00014e1c <z_arm_is_synchronous_svc>:
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

static inline bool z_arm_is_synchronous_svc(z_arch_esf_t *esf)
{
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   14e1c:	6981      	ldr	r1, [r0, #24]
	/* Note: ARMv6-M does not support CCR.BFHFNMIGN so this access
	 * could generate a fault if the pc was invalid.
	 */
	uint16_t fault_insn = *(ret_addr - 1);
#else
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   14e1e:	4b0d      	ldr	r3, [pc, #52]	; (14e54 <z_arm_is_synchronous_svc+0x38>)
   14e20:	695a      	ldr	r2, [r3, #20]
   14e22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   14e26:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   14e28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14e2c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();

	uint16_t fault_insn = *(ret_addr - 1);
   14e30:	f831 1c02 	ldrh.w	r1, [r1, #-2]

	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   14e34:	695a      	ldr	r2, [r3, #20]
   14e36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   14e3a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   14e3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14e40:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
#endif /* ARMV6_M_ARMV8_M_BASELINE && !ARMV8_M_BASELINE */

	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   14e44:	f64d 7302 	movw	r3, #57090	; 0xdf02
   14e48:	4299      	cmp	r1, r3
   14e4a:	d001      	beq.n	14e50 <z_arm_is_synchronous_svc+0x34>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
		return true;
	}
#undef _SVC_OPCODE
	return false;
   14e4c:	2000      	movs	r0, #0
   14e4e:	4770      	bx	lr
		return true;
   14e50:	2001      	movs	r0, #1
}
   14e52:	4770      	bx	lr
   14e54:	e000ed00 	.word	0xe000ed00

00014e58 <get_esf>:
 *
 * @return ESF pointer on success, otherwise return NULL
 */
static inline z_arch_esf_t *get_esf(uint32_t msp, uint32_t psp, uint32_t exc_return,
	bool *nested_exc)
{
   14e58:	b510      	push	{r4, lr}
   14e5a:	b088      	sub	sp, #32
	bool alternative_state_exc = false;
	z_arch_esf_t *ptr_esf = NULL;

	*nested_exc = false;
   14e5c:	2400      	movs	r4, #0
   14e5e:	701c      	strb	r4, [r3, #0]

	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   14e60:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
   14e64:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
   14e68:	d134      	bne.n	14ed4 <get_esf+0x7c>
	}
#else
	/* The processor has a single execution state.
	 * We verify that the Thread mode is using PSP.
	 */
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   14e6a:	f002 040c 	and.w	r4, r2, #12
   14e6e:	2c08      	cmp	r4, #8
   14e70:	d005      	beq.n	14e7e <get_esf+0x26>
		return NULL;
	}
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	if (!alternative_state_exc) {
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   14e72:	f012 0f08 	tst.w	r2, #8
   14e76:	d02a      	beq.n	14ece <get_esf+0x76>
			/* Returning to thread mode */
			ptr_esf =  (z_arch_esf_t *)psp;
   14e78:	4608      	mov	r0, r1
			*nested_exc = true;
		}
	}

	return ptr_esf;
}
   14e7a:	b008      	add	sp, #32
   14e7c:	bd10      	pop	{r4, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   14e7e:	4b16      	ldr	r3, [pc, #88]	; (14ed8 <get_esf+0x80>)
   14e80:	9307      	str	r3, [sp, #28]
   14e82:	2302      	movs	r3, #2
   14e84:	f88d 3004 	strb.w	r3, [sp, #4]
   14e88:	2400      	movs	r4, #0
   14e8a:	f88d 4005 	strb.w	r4, [sp, #5]
   14e8e:	f88d 4006 	strb.w	r4, [sp, #6]
   14e92:	f88d 4007 	strb.w	r4, [sp, #7]
   14e96:	9b01      	ldr	r3, [sp, #4]
   14e98:	9306      	str	r3, [sp, #24]
   14e9a:	4621      	mov	r1, r4
   14e9c:	f364 0100 	bfi	r1, r4, #0, #1
   14ea0:	f364 0141 	bfi	r1, r4, #1, #1
   14ea4:	f364 0182 	bfi	r1, r4, #2, #1
   14ea8:	f364 01c5 	bfi	r1, r4, #3, #3
   14eac:	2301      	movs	r3, #1
   14eae:	f363 1188 	bfi	r1, r3, #6, #3
   14eb2:	2308      	movs	r3, #8
   14eb4:	f363 2152 	bfi	r1, r3, #9, #10
   14eb8:	f364 41de 	bfi	r1, r4, #19, #12
   14ebc:	f364 71df 	bfi	r1, r4, #31, #1
   14ec0:	4623      	mov	r3, r4
   14ec2:	aa06      	add	r2, sp, #24
   14ec4:	4805      	ldr	r0, [pc, #20]	; (14edc <get_esf+0x84>)
   14ec6:	f010 fc74 	bl	257b2 <z_impl_z_log_msg_static_create>
		return NULL;
   14eca:	4620      	mov	r0, r4
   14ecc:	e7d5      	b.n	14e7a <get_esf+0x22>
			*nested_exc = true;
   14ece:	2201      	movs	r2, #1
   14ed0:	701a      	strb	r2, [r3, #0]
   14ed2:	e7d2      	b.n	14e7a <get_esf+0x22>
		return NULL;
   14ed4:	2000      	movs	r0, #0
   14ed6:	e7d0      	b.n	14e7a <get_esf+0x22>
   14ed8:	0002bbf8 	.word	0x0002bbf8
   14edc:	0002b20c 	.word	0x0002b20c

00014ee0 <bus_fault>:
{
   14ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14ee4:	b0ac      	sub	sp, #176	; 0xb0
   14ee6:	af00      	add	r7, sp, #0
   14ee8:	4605      	mov	r5, r0
   14eea:	460e      	mov	r6, r1
   14eec:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** BUS FAULT *****");
   14eee:	4bbc      	ldr	r3, [pc, #752]	; (151e0 <bus_fault+0x300>)
   14ef0:	61fb      	str	r3, [r7, #28]
   14ef2:	2302      	movs	r3, #2
   14ef4:	713b      	strb	r3, [r7, #4]
   14ef6:	2300      	movs	r3, #0
   14ef8:	717b      	strb	r3, [r7, #5]
   14efa:	71bb      	strb	r3, [r7, #6]
   14efc:	71fb      	strb	r3, [r7, #7]
   14efe:	687a      	ldr	r2, [r7, #4]
   14f00:	61ba      	str	r2, [r7, #24]
   14f02:	4619      	mov	r1, r3
   14f04:	f363 0100 	bfi	r1, r3, #0, #1
   14f08:	f363 0141 	bfi	r1, r3, #1, #1
   14f0c:	f363 0182 	bfi	r1, r3, #2, #1
   14f10:	f363 01c5 	bfi	r1, r3, #3, #3
   14f14:	2201      	movs	r2, #1
   14f16:	f362 1188 	bfi	r1, r2, #6, #3
   14f1a:	2208      	movs	r2, #8
   14f1c:	f362 2152 	bfi	r1, r2, #9, #10
   14f20:	f363 41de 	bfi	r1, r3, #19, #12
   14f24:	f363 71df 	bfi	r1, r3, #31, #1
   14f28:	f107 0218 	add.w	r2, r7, #24
   14f2c:	48ad      	ldr	r0, [pc, #692]	; (151e4 <bus_fault+0x304>)
   14f2e:	f010 fc40 	bl	257b2 <z_impl_z_log_msg_static_create>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   14f32:	4bad      	ldr	r3, [pc, #692]	; (151e8 <bus_fault+0x308>)
   14f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14f36:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   14f3a:	d12a      	bne.n	14f92 <bus_fault+0xb2>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   14f3c:	4baa      	ldr	r3, [pc, #680]	; (151e8 <bus_fault+0x308>)
   14f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14f40:	f413 6f00 	tst.w	r3, #2048	; 0x800
   14f44:	d148      	bne.n	14fd8 <bus_fault+0xf8>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   14f46:	4ba8      	ldr	r3, [pc, #672]	; (151e8 <bus_fault+0x308>)
   14f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14f4a:	f413 7f00 	tst.w	r3, #512	; 0x200
   14f4e:	d166      	bne.n	1501e <bus_fault+0x13e>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   14f50:	4ba5      	ldr	r3, [pc, #660]	; (151e8 <bus_fault+0x308>)
   14f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14f54:	f413 6f80 	tst.w	r3, #1024	; 0x400
   14f58:	f040 80d5 	bne.w	15106 <bus_fault+0x226>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   14f5c:	4ba2      	ldr	r3, [pc, #648]	; (151e8 <bus_fault+0x308>)
   14f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14f60:	f413 7f80 	tst.w	r3, #256	; 0x100
   14f64:	f040 80f2 	bne.w	1514c <bus_fault+0x26c>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   14f68:	4b9f      	ldr	r3, [pc, #636]	; (151e8 <bus_fault+0x308>)
   14f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14f6c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   14f70:	f040 8111 	bne.w	15196 <bus_fault+0x2b6>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   14f74:	4a9c      	ldr	r2, [pc, #624]	; (151e8 <bus_fault+0x308>)
   14f76:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14f78:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   14f7c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   14f7e:	2101      	movs	r1, #1
   14f80:	4628      	mov	r0, r5
   14f82:	f010 ff9d 	bl	25ec0 <memory_fault_recoverable>
   14f86:	7020      	strb	r0, [r4, #0]
}
   14f88:	2000      	movs	r0, #0
   14f8a:	37b0      	adds	r7, #176	; 0xb0
   14f8c:	46bd      	mov	sp, r7
   14f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Stacking error");
   14f92:	4b96      	ldr	r3, [pc, #600]	; (151ec <bus_fault+0x30c>)
   14f94:	637b      	str	r3, [r7, #52]	; 0x34
   14f96:	2302      	movs	r3, #2
   14f98:	713b      	strb	r3, [r7, #4]
   14f9a:	2300      	movs	r3, #0
   14f9c:	717b      	strb	r3, [r7, #5]
   14f9e:	71bb      	strb	r3, [r7, #6]
   14fa0:	71fb      	strb	r3, [r7, #7]
   14fa2:	687a      	ldr	r2, [r7, #4]
   14fa4:	633a      	str	r2, [r7, #48]	; 0x30
   14fa6:	4619      	mov	r1, r3
   14fa8:	f363 0100 	bfi	r1, r3, #0, #1
   14fac:	f363 0141 	bfi	r1, r3, #1, #1
   14fb0:	f363 0182 	bfi	r1, r3, #2, #1
   14fb4:	f363 01c5 	bfi	r1, r3, #3, #3
   14fb8:	2201      	movs	r2, #1
   14fba:	f362 1188 	bfi	r1, r2, #6, #3
   14fbe:	2208      	movs	r2, #8
   14fc0:	f362 2152 	bfi	r1, r2, #9, #10
   14fc4:	f363 41de 	bfi	r1, r3, #19, #12
   14fc8:	f363 71df 	bfi	r1, r3, #31, #1
   14fcc:	f107 0230 	add.w	r2, r7, #48	; 0x30
   14fd0:	4884      	ldr	r0, [pc, #528]	; (151e4 <bus_fault+0x304>)
   14fd2:	f010 fbee 	bl	257b2 <z_impl_z_log_msg_static_create>
   14fd6:	e7b1      	b.n	14f3c <bus_fault+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   14fd8:	4b85      	ldr	r3, [pc, #532]	; (151f0 <bus_fault+0x310>)
   14fda:	64fb      	str	r3, [r7, #76]	; 0x4c
   14fdc:	2302      	movs	r3, #2
   14fde:	713b      	strb	r3, [r7, #4]
   14fe0:	2300      	movs	r3, #0
   14fe2:	717b      	strb	r3, [r7, #5]
   14fe4:	71bb      	strb	r3, [r7, #6]
   14fe6:	71fb      	strb	r3, [r7, #7]
   14fe8:	687a      	ldr	r2, [r7, #4]
   14fea:	64ba      	str	r2, [r7, #72]	; 0x48
   14fec:	4619      	mov	r1, r3
   14fee:	f363 0100 	bfi	r1, r3, #0, #1
   14ff2:	f363 0141 	bfi	r1, r3, #1, #1
   14ff6:	f363 0182 	bfi	r1, r3, #2, #1
   14ffa:	f363 01c5 	bfi	r1, r3, #3, #3
   14ffe:	2201      	movs	r2, #1
   15000:	f362 1188 	bfi	r1, r2, #6, #3
   15004:	2208      	movs	r2, #8
   15006:	f362 2152 	bfi	r1, r2, #9, #10
   1500a:	f363 41de 	bfi	r1, r3, #19, #12
   1500e:	f363 71df 	bfi	r1, r3, #31, #1
   15012:	f107 0248 	add.w	r2, r7, #72	; 0x48
   15016:	4873      	ldr	r0, [pc, #460]	; (151e4 <bus_fault+0x304>)
   15018:	f010 fbcb 	bl	257b2 <z_impl_z_log_msg_static_create>
   1501c:	e793      	b.n	14f46 <bus_fault+0x66>
		PR_FAULT_INFO("  Precise data bus error");
   1501e:	4b75      	ldr	r3, [pc, #468]	; (151f4 <bus_fault+0x314>)
   15020:	667b      	str	r3, [r7, #100]	; 0x64
   15022:	2302      	movs	r3, #2
   15024:	713b      	strb	r3, [r7, #4]
   15026:	2300      	movs	r3, #0
   15028:	717b      	strb	r3, [r7, #5]
   1502a:	71bb      	strb	r3, [r7, #6]
   1502c:	71fb      	strb	r3, [r7, #7]
   1502e:	687a      	ldr	r2, [r7, #4]
   15030:	663a      	str	r2, [r7, #96]	; 0x60
   15032:	4619      	mov	r1, r3
   15034:	f363 0100 	bfi	r1, r3, #0, #1
   15038:	f363 0141 	bfi	r1, r3, #1, #1
   1503c:	f363 0182 	bfi	r1, r3, #2, #1
   15040:	f363 01c5 	bfi	r1, r3, #3, #3
   15044:	2201      	movs	r2, #1
   15046:	f362 1188 	bfi	r1, r2, #6, #3
   1504a:	2208      	movs	r2, #8
   1504c:	f362 2152 	bfi	r1, r2, #9, #10
   15050:	f363 41de 	bfi	r1, r3, #19, #12
   15054:	f363 71df 	bfi	r1, r3, #31, #1
   15058:	f107 0260 	add.w	r2, r7, #96	; 0x60
   1505c:	4861      	ldr	r0, [pc, #388]	; (151e4 <bus_fault+0x304>)
   1505e:	f010 fba8 	bl	257b2 <z_impl_z_log_msg_static_create>
		STORE_xFAR(bfar, SCB->BFAR);
   15062:	4b61      	ldr	r3, [pc, #388]	; (151e8 <bus_fault+0x308>)
   15064:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   15066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15068:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   1506c:	f43f af70 	beq.w	14f50 <bus_fault+0x70>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   15070:	46e8      	mov	r8, sp
   15072:	b088      	sub	sp, #32
   15074:	466b      	mov	r3, sp
   15076:	f113 0210 	adds.w	r2, r3, #16
   1507a:	d011      	beq.n	150a0 <bus_fault+0x1c0>
   1507c:	210c      	movs	r1, #12
   1507e:	b152      	cbz	r2, 15096 <bus_fault+0x1b6>
   15080:	468c      	mov	ip, r1
   15082:	2904      	cmp	r1, #4
   15084:	dd03      	ble.n	1508e <bus_fault+0x1ae>
   15086:	f8df e170 	ldr.w	lr, [pc, #368]	; 151f8 <bus_fault+0x318>
   1508a:	f8c3 e014 	str.w	lr, [r3, #20]
   1508e:	f1bc 0f08 	cmp.w	ip, #8
   15092:	dd08      	ble.n	150a6 <bus_fault+0x1c6>
   15094:	6198      	str	r0, [r3, #24]
   15096:	290b      	cmp	r1, #11
   15098:	dd32      	ble.n	15100 <bus_fault+0x220>
   1509a:	f04f 0c0c 	mov.w	ip, #12
   1509e:	e004      	b.n	150aa <bus_fault+0x1ca>
   150a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   150a4:	e7eb      	b.n	1507e <bus_fault+0x19e>
   150a6:	f06f 0c1b 	mvn.w	ip, #27
   150aa:	b13a      	cbz	r2, 150bc <bus_fault+0x1dc>
   150ac:	2103      	movs	r1, #3
   150ae:	7139      	strb	r1, [r7, #4]
   150b0:	2100      	movs	r1, #0
   150b2:	7179      	strb	r1, [r7, #5]
   150b4:	71b9      	strb	r1, [r7, #6]
   150b6:	71f9      	strb	r1, [r7, #7]
   150b8:	6878      	ldr	r0, [r7, #4]
   150ba:	6118      	str	r0, [r3, #16]
   150bc:	2100      	movs	r1, #0
   150be:	f36f 0100 	bfc	r1, #0, #1
   150c2:	f36f 0141 	bfc	r1, #1, #1
   150c6:	f36f 0182 	bfc	r1, #2, #1
   150ca:	f36f 01c5 	bfc	r1, #3, #3
   150ce:	2301      	movs	r3, #1
   150d0:	f363 1188 	bfi	r1, r3, #6, #3
   150d4:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   150d8:	f363 2152 	bfi	r1, r3, #9, #10
   150dc:	f36f 41de 	bfc	r1, #19, #12
   150e0:	f36f 71df 	bfc	r1, #31, #1
   150e4:	2300      	movs	r3, #0
   150e6:	483f      	ldr	r0, [pc, #252]	; (151e4 <bus_fault+0x304>)
   150e8:	f010 fb63 	bl	257b2 <z_impl_z_log_msg_static_create>
   150ec:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   150ee:	2e00      	cmp	r6, #0
   150f0:	f43f af2e 	beq.w	14f50 <bus_fault+0x70>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   150f4:	4a3c      	ldr	r2, [pc, #240]	; (151e8 <bus_fault+0x308>)
   150f6:	6a93      	ldr	r3, [r2, #40]	; 0x28
   150f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   150fc:	6293      	str	r3, [r2, #40]	; 0x28
   150fe:	e727      	b.n	14f50 <bus_fault+0x70>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   15100:	f06f 0c1b 	mvn.w	ip, #27
   15104:	e7d1      	b.n	150aa <bus_fault+0x1ca>
		PR_FAULT_INFO("  Imprecise data bus error");
   15106:	4b3d      	ldr	r3, [pc, #244]	; (151fc <bus_fault+0x31c>)
   15108:	67fb      	str	r3, [r7, #124]	; 0x7c
   1510a:	2302      	movs	r3, #2
   1510c:	713b      	strb	r3, [r7, #4]
   1510e:	2300      	movs	r3, #0
   15110:	717b      	strb	r3, [r7, #5]
   15112:	71bb      	strb	r3, [r7, #6]
   15114:	71fb      	strb	r3, [r7, #7]
   15116:	687a      	ldr	r2, [r7, #4]
   15118:	67ba      	str	r2, [r7, #120]	; 0x78
   1511a:	4619      	mov	r1, r3
   1511c:	f363 0100 	bfi	r1, r3, #0, #1
   15120:	f363 0141 	bfi	r1, r3, #1, #1
   15124:	f363 0182 	bfi	r1, r3, #2, #1
   15128:	f363 01c5 	bfi	r1, r3, #3, #3
   1512c:	2201      	movs	r2, #1
   1512e:	f362 1188 	bfi	r1, r2, #6, #3
   15132:	2208      	movs	r2, #8
   15134:	f362 2152 	bfi	r1, r2, #9, #10
   15138:	f363 41de 	bfi	r1, r3, #19, #12
   1513c:	f363 71df 	bfi	r1, r3, #31, #1
   15140:	f107 0278 	add.w	r2, r7, #120	; 0x78
   15144:	4827      	ldr	r0, [pc, #156]	; (151e4 <bus_fault+0x304>)
   15146:	f010 fb34 	bl	257b2 <z_impl_z_log_msg_static_create>
   1514a:	e707      	b.n	14f5c <bus_fault+0x7c>
		PR_FAULT_INFO("  Instruction bus error");
   1514c:	4b2c      	ldr	r3, [pc, #176]	; (15200 <bus_fault+0x320>)
   1514e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   15152:	2302      	movs	r3, #2
   15154:	713b      	strb	r3, [r7, #4]
   15156:	2300      	movs	r3, #0
   15158:	717b      	strb	r3, [r7, #5]
   1515a:	71bb      	strb	r3, [r7, #6]
   1515c:	71fb      	strb	r3, [r7, #7]
   1515e:	687a      	ldr	r2, [r7, #4]
   15160:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
   15164:	4619      	mov	r1, r3
   15166:	f363 0100 	bfi	r1, r3, #0, #1
   1516a:	f363 0141 	bfi	r1, r3, #1, #1
   1516e:	f363 0182 	bfi	r1, r3, #2, #1
   15172:	f363 01c5 	bfi	r1, r3, #3, #3
   15176:	2201      	movs	r2, #1
   15178:	f362 1188 	bfi	r1, r2, #6, #3
   1517c:	2208      	movs	r2, #8
   1517e:	f362 2152 	bfi	r1, r2, #9, #10
   15182:	f363 41de 	bfi	r1, r3, #19, #12
   15186:	f363 71df 	bfi	r1, r3, #31, #1
   1518a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
   1518e:	4815      	ldr	r0, [pc, #84]	; (151e4 <bus_fault+0x304>)
   15190:	f010 fb0f 	bl	257b2 <z_impl_z_log_msg_static_create>
   15194:	e6ee      	b.n	14f74 <bus_fault+0x94>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   15196:	4b1b      	ldr	r3, [pc, #108]	; (15204 <bus_fault+0x324>)
   15198:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   1519c:	2302      	movs	r3, #2
   1519e:	713b      	strb	r3, [r7, #4]
   151a0:	2300      	movs	r3, #0
   151a2:	717b      	strb	r3, [r7, #5]
   151a4:	71bb      	strb	r3, [r7, #6]
   151a6:	71fb      	strb	r3, [r7, #7]
   151a8:	687a      	ldr	r2, [r7, #4]
   151aa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   151ae:	4619      	mov	r1, r3
   151b0:	f363 0100 	bfi	r1, r3, #0, #1
   151b4:	f363 0141 	bfi	r1, r3, #1, #1
   151b8:	f363 0182 	bfi	r1, r3, #2, #1
   151bc:	f363 01c5 	bfi	r1, r3, #3, #3
   151c0:	2201      	movs	r2, #1
   151c2:	f362 1188 	bfi	r1, r2, #6, #3
   151c6:	2208      	movs	r2, #8
   151c8:	f362 2152 	bfi	r1, r2, #9, #10
   151cc:	f363 41de 	bfi	r1, r3, #19, #12
   151d0:	f363 71df 	bfi	r1, r3, #31, #1
   151d4:	f107 0290 	add.w	r2, r7, #144	; 0x90
   151d8:	4802      	ldr	r0, [pc, #8]	; (151e4 <bus_fault+0x304>)
   151da:	f010 faea 	bl	257b2 <z_impl_z_log_msg_static_create>
   151de:	e6c9      	b.n	14f74 <bus_fault+0x94>
   151e0:	0002bc24 	.word	0x0002bc24
   151e4:	0002b20c 	.word	0x0002b20c
   151e8:	e000ed00 	.word	0xe000ed00
   151ec:	0002bc3c 	.word	0x0002bc3c
   151f0:	0002bc50 	.word	0x0002bc50
   151f4:	0002bc64 	.word	0x0002bc64
   151f8:	0002bc80 	.word	0x0002bc80
   151fc:	0002bc98 	.word	0x0002bc98
   15200:	0002bcb4 	.word	0x0002bcb4
   15204:	0002bccc 	.word	0x0002bccc

00015208 <usage_fault>:
{
   15208:	b500      	push	{lr}
   1520a:	b0ad      	sub	sp, #180	; 0xb4
	PR_FAULT_INFO("***** USAGE FAULT *****");
   1520c:	4b9a      	ldr	r3, [pc, #616]	; (15478 <usage_fault+0x270>)
   1520e:	9307      	str	r3, [sp, #28]
   15210:	2302      	movs	r3, #2
   15212:	f88d 3004 	strb.w	r3, [sp, #4]
   15216:	2300      	movs	r3, #0
   15218:	f88d 3005 	strb.w	r3, [sp, #5]
   1521c:	f88d 3006 	strb.w	r3, [sp, #6]
   15220:	f88d 3007 	strb.w	r3, [sp, #7]
   15224:	9a01      	ldr	r2, [sp, #4]
   15226:	9206      	str	r2, [sp, #24]
   15228:	4619      	mov	r1, r3
   1522a:	f363 0100 	bfi	r1, r3, #0, #1
   1522e:	f363 0141 	bfi	r1, r3, #1, #1
   15232:	f363 0182 	bfi	r1, r3, #2, #1
   15236:	f363 01c5 	bfi	r1, r3, #3, #3
   1523a:	2201      	movs	r2, #1
   1523c:	f362 1188 	bfi	r1, r2, #6, #3
   15240:	2208      	movs	r2, #8
   15242:	f362 2152 	bfi	r1, r2, #9, #10
   15246:	f363 41de 	bfi	r1, r3, #19, #12
   1524a:	f363 71df 	bfi	r1, r3, #31, #1
   1524e:	aa06      	add	r2, sp, #24
   15250:	488a      	ldr	r0, [pc, #552]	; (1547c <usage_fault+0x274>)
   15252:	f010 faae 	bl	257b2 <z_impl_z_log_msg_static_create>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   15256:	4b8a      	ldr	r3, [pc, #552]	; (15480 <usage_fault+0x278>)
   15258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1525a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   1525e:	d126      	bne.n	152ae <usage_fault+0xa6>
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   15260:	4b87      	ldr	r3, [pc, #540]	; (15480 <usage_fault+0x278>)
   15262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15264:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   15268:	d147      	bne.n	152fa <usage_fault+0xf2>
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1526a:	4b85      	ldr	r3, [pc, #532]	; (15480 <usage_fault+0x278>)
   1526c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1526e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   15272:	d168      	bne.n	15346 <usage_fault+0x13e>
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   15274:	4b82      	ldr	r3, [pc, #520]	; (15480 <usage_fault+0x278>)
   15276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15278:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   1527c:	f040 8089 	bne.w	15392 <usage_fault+0x18a>
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   15280:	4b7f      	ldr	r3, [pc, #508]	; (15480 <usage_fault+0x278>)
   15282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15284:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   15288:	f040 80a9 	bne.w	153de <usage_fault+0x1d6>
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1528c:	4b7c      	ldr	r3, [pc, #496]	; (15480 <usage_fault+0x278>)
   1528e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15290:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   15294:	f040 80c9 	bne.w	1542a <usage_fault+0x222>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   15298:	4a79      	ldr	r2, [pc, #484]	; (15480 <usage_fault+0x278>)
   1529a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1529c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   152a0:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   152a4:	6293      	str	r3, [r2, #40]	; 0x28
}
   152a6:	2000      	movs	r0, #0
   152a8:	b02d      	add	sp, #180	; 0xb4
   152aa:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Division by zero");
   152ae:	4b75      	ldr	r3, [pc, #468]	; (15484 <usage_fault+0x27c>)
   152b0:	930d      	str	r3, [sp, #52]	; 0x34
   152b2:	2302      	movs	r3, #2
   152b4:	f88d 3004 	strb.w	r3, [sp, #4]
   152b8:	2300      	movs	r3, #0
   152ba:	f88d 3005 	strb.w	r3, [sp, #5]
   152be:	f88d 3006 	strb.w	r3, [sp, #6]
   152c2:	f88d 3007 	strb.w	r3, [sp, #7]
   152c6:	9a01      	ldr	r2, [sp, #4]
   152c8:	920c      	str	r2, [sp, #48]	; 0x30
   152ca:	4619      	mov	r1, r3
   152cc:	f363 0100 	bfi	r1, r3, #0, #1
   152d0:	f363 0141 	bfi	r1, r3, #1, #1
   152d4:	f363 0182 	bfi	r1, r3, #2, #1
   152d8:	f363 01c5 	bfi	r1, r3, #3, #3
   152dc:	2201      	movs	r2, #1
   152de:	f362 1188 	bfi	r1, r2, #6, #3
   152e2:	2208      	movs	r2, #8
   152e4:	f362 2152 	bfi	r1, r2, #9, #10
   152e8:	f363 41de 	bfi	r1, r3, #19, #12
   152ec:	f363 71df 	bfi	r1, r3, #31, #1
   152f0:	aa0c      	add	r2, sp, #48	; 0x30
   152f2:	4862      	ldr	r0, [pc, #392]	; (1547c <usage_fault+0x274>)
   152f4:	f010 fa5d 	bl	257b2 <z_impl_z_log_msg_static_create>
   152f8:	e7b2      	b.n	15260 <usage_fault+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
   152fa:	4b63      	ldr	r3, [pc, #396]	; (15488 <usage_fault+0x280>)
   152fc:	9313      	str	r3, [sp, #76]	; 0x4c
   152fe:	2302      	movs	r3, #2
   15300:	f88d 3004 	strb.w	r3, [sp, #4]
   15304:	2300      	movs	r3, #0
   15306:	f88d 3005 	strb.w	r3, [sp, #5]
   1530a:	f88d 3006 	strb.w	r3, [sp, #6]
   1530e:	f88d 3007 	strb.w	r3, [sp, #7]
   15312:	9a01      	ldr	r2, [sp, #4]
   15314:	9212      	str	r2, [sp, #72]	; 0x48
   15316:	4619      	mov	r1, r3
   15318:	f363 0100 	bfi	r1, r3, #0, #1
   1531c:	f363 0141 	bfi	r1, r3, #1, #1
   15320:	f363 0182 	bfi	r1, r3, #2, #1
   15324:	f363 01c5 	bfi	r1, r3, #3, #3
   15328:	2201      	movs	r2, #1
   1532a:	f362 1188 	bfi	r1, r2, #6, #3
   1532e:	2208      	movs	r2, #8
   15330:	f362 2152 	bfi	r1, r2, #9, #10
   15334:	f363 41de 	bfi	r1, r3, #19, #12
   15338:	f363 71df 	bfi	r1, r3, #31, #1
   1533c:	aa12      	add	r2, sp, #72	; 0x48
   1533e:	484f      	ldr	r0, [pc, #316]	; (1547c <usage_fault+0x274>)
   15340:	f010 fa37 	bl	257b2 <z_impl_z_log_msg_static_create>
   15344:	e791      	b.n	1526a <usage_fault+0x62>
		PR_FAULT_INFO("  No coprocessor instructions");
   15346:	4b51      	ldr	r3, [pc, #324]	; (1548c <usage_fault+0x284>)
   15348:	9319      	str	r3, [sp, #100]	; 0x64
   1534a:	2302      	movs	r3, #2
   1534c:	f88d 3004 	strb.w	r3, [sp, #4]
   15350:	2300      	movs	r3, #0
   15352:	f88d 3005 	strb.w	r3, [sp, #5]
   15356:	f88d 3006 	strb.w	r3, [sp, #6]
   1535a:	f88d 3007 	strb.w	r3, [sp, #7]
   1535e:	9a01      	ldr	r2, [sp, #4]
   15360:	9218      	str	r2, [sp, #96]	; 0x60
   15362:	4619      	mov	r1, r3
   15364:	f363 0100 	bfi	r1, r3, #0, #1
   15368:	f363 0141 	bfi	r1, r3, #1, #1
   1536c:	f363 0182 	bfi	r1, r3, #2, #1
   15370:	f363 01c5 	bfi	r1, r3, #3, #3
   15374:	2201      	movs	r2, #1
   15376:	f362 1188 	bfi	r1, r2, #6, #3
   1537a:	2208      	movs	r2, #8
   1537c:	f362 2152 	bfi	r1, r2, #9, #10
   15380:	f363 41de 	bfi	r1, r3, #19, #12
   15384:	f363 71df 	bfi	r1, r3, #31, #1
   15388:	aa18      	add	r2, sp, #96	; 0x60
   1538a:	483c      	ldr	r0, [pc, #240]	; (1547c <usage_fault+0x274>)
   1538c:	f010 fa11 	bl	257b2 <z_impl_z_log_msg_static_create>
   15390:	e770      	b.n	15274 <usage_fault+0x6c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   15392:	4b3f      	ldr	r3, [pc, #252]	; (15490 <usage_fault+0x288>)
   15394:	931f      	str	r3, [sp, #124]	; 0x7c
   15396:	2302      	movs	r3, #2
   15398:	f88d 3004 	strb.w	r3, [sp, #4]
   1539c:	2300      	movs	r3, #0
   1539e:	f88d 3005 	strb.w	r3, [sp, #5]
   153a2:	f88d 3006 	strb.w	r3, [sp, #6]
   153a6:	f88d 3007 	strb.w	r3, [sp, #7]
   153aa:	9a01      	ldr	r2, [sp, #4]
   153ac:	921e      	str	r2, [sp, #120]	; 0x78
   153ae:	4619      	mov	r1, r3
   153b0:	f363 0100 	bfi	r1, r3, #0, #1
   153b4:	f363 0141 	bfi	r1, r3, #1, #1
   153b8:	f363 0182 	bfi	r1, r3, #2, #1
   153bc:	f363 01c5 	bfi	r1, r3, #3, #3
   153c0:	2201      	movs	r2, #1
   153c2:	f362 1188 	bfi	r1, r2, #6, #3
   153c6:	2208      	movs	r2, #8
   153c8:	f362 2152 	bfi	r1, r2, #9, #10
   153cc:	f363 41de 	bfi	r1, r3, #19, #12
   153d0:	f363 71df 	bfi	r1, r3, #31, #1
   153d4:	aa1e      	add	r2, sp, #120	; 0x78
   153d6:	4829      	ldr	r0, [pc, #164]	; (1547c <usage_fault+0x274>)
   153d8:	f010 f9eb 	bl	257b2 <z_impl_z_log_msg_static_create>
   153dc:	e750      	b.n	15280 <usage_fault+0x78>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   153de:	4b2d      	ldr	r3, [pc, #180]	; (15494 <usage_fault+0x28c>)
   153e0:	9325      	str	r3, [sp, #148]	; 0x94
   153e2:	2302      	movs	r3, #2
   153e4:	f88d 3004 	strb.w	r3, [sp, #4]
   153e8:	2300      	movs	r3, #0
   153ea:	f88d 3005 	strb.w	r3, [sp, #5]
   153ee:	f88d 3006 	strb.w	r3, [sp, #6]
   153f2:	f88d 3007 	strb.w	r3, [sp, #7]
   153f6:	9a01      	ldr	r2, [sp, #4]
   153f8:	9224      	str	r2, [sp, #144]	; 0x90
   153fa:	4619      	mov	r1, r3
   153fc:	f363 0100 	bfi	r1, r3, #0, #1
   15400:	f363 0141 	bfi	r1, r3, #1, #1
   15404:	f363 0182 	bfi	r1, r3, #2, #1
   15408:	f363 01c5 	bfi	r1, r3, #3, #3
   1540c:	2201      	movs	r2, #1
   1540e:	f362 1188 	bfi	r1, r2, #6, #3
   15412:	2208      	movs	r2, #8
   15414:	f362 2152 	bfi	r1, r2, #9, #10
   15418:	f363 41de 	bfi	r1, r3, #19, #12
   1541c:	f363 71df 	bfi	r1, r3, #31, #1
   15420:	aa24      	add	r2, sp, #144	; 0x90
   15422:	4816      	ldr	r0, [pc, #88]	; (1547c <usage_fault+0x274>)
   15424:	f010 f9c5 	bl	257b2 <z_impl_z_log_msg_static_create>
   15428:	e730      	b.n	1528c <usage_fault+0x84>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   1542a:	4b1b      	ldr	r3, [pc, #108]	; (15498 <usage_fault+0x290>)
   1542c:	932b      	str	r3, [sp, #172]	; 0xac
   1542e:	2302      	movs	r3, #2
   15430:	f88d 3004 	strb.w	r3, [sp, #4]
   15434:	2300      	movs	r3, #0
   15436:	f88d 3005 	strb.w	r3, [sp, #5]
   1543a:	f88d 3006 	strb.w	r3, [sp, #6]
   1543e:	f88d 3007 	strb.w	r3, [sp, #7]
   15442:	9a01      	ldr	r2, [sp, #4]
   15444:	922a      	str	r2, [sp, #168]	; 0xa8
   15446:	4619      	mov	r1, r3
   15448:	f363 0100 	bfi	r1, r3, #0, #1
   1544c:	f363 0141 	bfi	r1, r3, #1, #1
   15450:	f363 0182 	bfi	r1, r3, #2, #1
   15454:	f363 01c5 	bfi	r1, r3, #3, #3
   15458:	2201      	movs	r2, #1
   1545a:	f362 1188 	bfi	r1, r2, #6, #3
   1545e:	2208      	movs	r2, #8
   15460:	f362 2152 	bfi	r1, r2, #9, #10
   15464:	f363 41de 	bfi	r1, r3, #19, #12
   15468:	f363 71df 	bfi	r1, r3, #31, #1
   1546c:	aa2a      	add	r2, sp, #168	; 0xa8
   1546e:	4803      	ldr	r0, [pc, #12]	; (1547c <usage_fault+0x274>)
   15470:	f010 f99f 	bl	257b2 <z_impl_z_log_msg_static_create>
   15474:	e710      	b.n	15298 <usage_fault+0x90>
   15476:	bf00      	nop
   15478:	0002bcfc 	.word	0x0002bcfc
   1547c:	0002b20c 	.word	0x0002b20c
   15480:	e000ed00 	.word	0xe000ed00
   15484:	0002bd14 	.word	0x0002bd14
   15488:	0002bd28 	.word	0x0002bd28
   1548c:	0002bd44 	.word	0x0002bd44
   15490:	0002bd64 	.word	0x0002bd64
   15494:	0002bd8c 	.word	0x0002bd8c
   15498:	0002bda8 	.word	0x0002bda8

0001549c <debug_monitor>:
{
   1549c:	b500      	push	{lr}
   1549e:	b089      	sub	sp, #36	; 0x24
	*recoverable = false;
   154a0:	2300      	movs	r3, #0
   154a2:	700b      	strb	r3, [r1, #0]
	PR_FAULT_INFO(
   154a4:	4a13      	ldr	r2, [pc, #76]	; (154f4 <debug_monitor+0x58>)
   154a6:	9207      	str	r2, [sp, #28]
   154a8:	2202      	movs	r2, #2
   154aa:	f88d 2004 	strb.w	r2, [sp, #4]
   154ae:	f88d 3005 	strb.w	r3, [sp, #5]
   154b2:	f88d 3006 	strb.w	r3, [sp, #6]
   154b6:	f88d 3007 	strb.w	r3, [sp, #7]
   154ba:	9a01      	ldr	r2, [sp, #4]
   154bc:	9206      	str	r2, [sp, #24]
   154be:	4619      	mov	r1, r3
   154c0:	f363 0100 	bfi	r1, r3, #0, #1
   154c4:	f363 0141 	bfi	r1, r3, #1, #1
   154c8:	f363 0182 	bfi	r1, r3, #2, #1
   154cc:	f363 01c5 	bfi	r1, r3, #3, #3
   154d0:	2201      	movs	r2, #1
   154d2:	f362 1188 	bfi	r1, r2, #6, #3
   154d6:	2208      	movs	r2, #8
   154d8:	f362 2152 	bfi	r1, r2, #9, #10
   154dc:	f363 41de 	bfi	r1, r3, #19, #12
   154e0:	f363 71df 	bfi	r1, r3, #31, #1
   154e4:	aa06      	add	r2, sp, #24
   154e6:	4804      	ldr	r0, [pc, #16]	; (154f8 <debug_monitor+0x5c>)
   154e8:	f010 f963 	bl	257b2 <z_impl_z_log_msg_static_create>
}
   154ec:	b009      	add	sp, #36	; 0x24
   154ee:	f85d fb04 	ldr.w	pc, [sp], #4
   154f2:	bf00      	nop
   154f4:	0002bdd4 	.word	0x0002bdd4
   154f8:	0002b20c 	.word	0x0002b20c

000154fc <reserved_exception>:
{
   154fc:	b590      	push	{r4, r7, lr}
   154fe:	b083      	sub	sp, #12
   15500:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** %s %d) *****",
   15502:	290f      	cmp	r1, #15
   15504:	dc23      	bgt.n	1554e <reserved_exception+0x52>
   15506:	4c30      	ldr	r4, [pc, #192]	; (155c8 <reserved_exception+0xcc>)
   15508:	3910      	subs	r1, #16
   1550a:	2300      	movs	r3, #0
   1550c:	713b      	strb	r3, [r7, #4]
   1550e:	2302      	movs	r3, #2
   15510:	717b      	strb	r3, [r7, #5]
   15512:	b08a      	sub	sp, #40	; 0x28
   15514:	46ec      	mov	ip, sp
   15516:	f11c 0210 	adds.w	r2, ip, #16
   1551a:	d01a      	beq.n	15552 <reserved_exception+0x56>
   1551c:	2012      	movs	r0, #18
   1551e:	b122      	cbz	r2, 1552a <reserved_exception+0x2e>
   15520:	2804      	cmp	r0, #4
   15522:	dd02      	ble.n	1552a <reserved_exception+0x2e>
   15524:	4b29      	ldr	r3, [pc, #164]	; (155cc <reserved_exception+0xd0>)
   15526:	f8cc 3014 	str.w	r3, [ip, #20]
   1552a:	2300      	movs	r3, #0
   1552c:	703b      	strb	r3, [r7, #0]
   1552e:	2302      	movs	r3, #2
   15530:	707b      	strb	r3, [r7, #1]
   15532:	b1e2      	cbz	r2, 1556e <reserved_exception+0x72>
   15534:	4603      	mov	r3, r0
   15536:	2808      	cmp	r0, #8
   15538:	dd01      	ble.n	1553e <reserved_exception+0x42>
   1553a:	f8cc 4018 	str.w	r4, [ip, #24]
   1553e:	2b0c      	cmp	r3, #12
   15540:	dd01      	ble.n	15546 <reserved_exception+0x4a>
   15542:	f8cc 101c 	str.w	r1, [ip, #28]
   15546:	f10c 0320 	add.w	r3, ip, #32
   1554a:	2100      	movs	r1, #0
   1554c:	e00d      	b.n	1556a <reserved_exception+0x6e>
   1554e:	4c20      	ldr	r4, [pc, #128]	; (155d0 <reserved_exception+0xd4>)
   15550:	e7da      	b.n	15508 <reserved_exception+0xc>
   15552:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   15556:	e7e2      	b.n	1551e <reserved_exception+0x22>
   15558:	f101 0408 	add.w	r4, r1, #8
   1555c:	eb04 0e07 	add.w	lr, r4, r7
   15560:	f81e ec08 	ldrb.w	lr, [lr, #-8]
   15564:	f803 eb01 	strb.w	lr, [r3], #1
   15568:	3101      	adds	r1, #1
   1556a:	2901      	cmp	r1, #1
   1556c:	d9f4      	bls.n	15558 <reserved_exception+0x5c>
   1556e:	2811      	cmp	r0, #17
   15570:	dd26      	ble.n	155c0 <reserved_exception+0xc4>
   15572:	2312      	movs	r3, #18
   15574:	b14a      	cbz	r2, 1558a <reserved_exception+0x8e>
   15576:	2104      	movs	r1, #4
   15578:	7139      	strb	r1, [r7, #4]
   1557a:	2100      	movs	r1, #0
   1557c:	7179      	strb	r1, [r7, #5]
   1557e:	71b9      	strb	r1, [r7, #6]
   15580:	2101      	movs	r1, #1
   15582:	71f9      	strb	r1, [r7, #7]
   15584:	6878      	ldr	r0, [r7, #4]
   15586:	f8cc 0010 	str.w	r0, [ip, #16]
   1558a:	2100      	movs	r1, #0
   1558c:	f36f 0100 	bfc	r1, #0, #1
   15590:	f36f 0141 	bfc	r1, #1, #1
   15594:	f36f 0182 	bfc	r1, #2, #1
   15598:	f36f 01c5 	bfc	r1, #3, #3
   1559c:	2001      	movs	r0, #1
   1559e:	f360 1188 	bfi	r1, r0, #6, #3
   155a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
   155a6:	f363 2152 	bfi	r1, r3, #9, #10
   155aa:	f36f 41de 	bfc	r1, #19, #12
   155ae:	f36f 71df 	bfc	r1, #31, #1
   155b2:	2300      	movs	r3, #0
   155b4:	4807      	ldr	r0, [pc, #28]	; (155d4 <reserved_exception+0xd8>)
   155b6:	f010 f8fc 	bl	257b2 <z_impl_z_log_msg_static_create>
}
   155ba:	370c      	adds	r7, #12
   155bc:	46bd      	mov	sp, r7
   155be:	bd90      	pop	{r4, r7, pc}
	PR_FAULT_INFO("***** %s %d) *****",
   155c0:	f06f 031b 	mvn.w	r3, #27
   155c4:	e7d6      	b.n	15574 <reserved_exception+0x78>
   155c6:	bf00      	nop
   155c8:	0002bdf8 	.word	0x0002bdf8
   155cc:	0002be2c 	.word	0x0002be2c
   155d0:	0002be10 	.word	0x0002be10
   155d4:	0002b20c 	.word	0x0002b20c

000155d8 <mem_manage_fault>:
{
   155d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   155dc:	b0a7      	sub	sp, #156	; 0x9c
   155de:	af00      	add	r7, sp, #0
   155e0:	4605      	mov	r5, r0
   155e2:	460c      	mov	r4, r1
   155e4:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   155e6:	4bbc      	ldr	r3, [pc, #752]	; (158d8 <mem_manage_fault+0x300>)
   155e8:	61fb      	str	r3, [r7, #28]
   155ea:	2302      	movs	r3, #2
   155ec:	713b      	strb	r3, [r7, #4]
   155ee:	2300      	movs	r3, #0
   155f0:	717b      	strb	r3, [r7, #5]
   155f2:	71bb      	strb	r3, [r7, #6]
   155f4:	71fb      	strb	r3, [r7, #7]
   155f6:	687a      	ldr	r2, [r7, #4]
   155f8:	61ba      	str	r2, [r7, #24]
   155fa:	4619      	mov	r1, r3
   155fc:	f363 0100 	bfi	r1, r3, #0, #1
   15600:	f363 0141 	bfi	r1, r3, #1, #1
   15604:	f363 0182 	bfi	r1, r3, #2, #1
   15608:	f363 01c5 	bfi	r1, r3, #3, #3
   1560c:	2201      	movs	r2, #1
   1560e:	f362 1188 	bfi	r1, r2, #6, #3
   15612:	2208      	movs	r2, #8
   15614:	f362 2152 	bfi	r1, r2, #9, #10
   15618:	f363 41de 	bfi	r1, r3, #19, #12
   1561c:	f363 71df 	bfi	r1, r3, #31, #1
   15620:	f107 0218 	add.w	r2, r7, #24
   15624:	48ad      	ldr	r0, [pc, #692]	; (158dc <mem_manage_fault+0x304>)
   15626:	f010 f8c4 	bl	257b2 <z_impl_z_log_msg_static_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1562a:	4bad      	ldr	r3, [pc, #692]	; (158e0 <mem_manage_fault+0x308>)
   1562c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1562e:	f013 0f10 	tst.w	r3, #16
   15632:	d140      	bne.n	156b6 <mem_manage_fault+0xde>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   15634:	4baa      	ldr	r3, [pc, #680]	; (158e0 <mem_manage_fault+0x308>)
   15636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15638:	f013 0f08 	tst.w	r3, #8
   1563c:	d15e      	bne.n	156fc <mem_manage_fault+0x124>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1563e:	4ba8      	ldr	r3, [pc, #672]	; (158e0 <mem_manage_fault+0x308>)
   15640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15642:	f013 0f02 	tst.w	r3, #2
   15646:	d17c      	bne.n	15742 <mem_manage_fault+0x16a>
	uint32_t mmfar = -EINVAL;
   15648:	f06f 0815 	mvn.w	r8, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1564c:	4ba4      	ldr	r3, [pc, #656]	; (158e0 <mem_manage_fault+0x308>)
   1564e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15650:	f013 0f01 	tst.w	r3, #1
   15654:	f040 80ec 	bne.w	15830 <mem_manage_fault+0x258>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   15658:	4ba1      	ldr	r3, [pc, #644]	; (158e0 <mem_manage_fault+0x308>)
   1565a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1565c:	f013 0f20 	tst.w	r3, #32
   15660:	f040 8109 	bne.w	15876 <mem_manage_fault+0x29e>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   15664:	4b9e      	ldr	r3, [pc, #632]	; (158e0 <mem_manage_fault+0x308>)
   15666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15668:	f013 0f10 	tst.w	r3, #16
   1566c:	d104      	bne.n	15678 <mem_manage_fault+0xa0>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   1566e:	4b9c      	ldr	r3, [pc, #624]	; (158e0 <mem_manage_fault+0x308>)
   15670:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   15672:	f014 0402 	ands.w	r4, r4, #2
   15676:	d005      	beq.n	15684 <mem_manage_fault+0xac>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   15678:	4b99      	ldr	r3, [pc, #612]	; (158e0 <mem_manage_fault+0x308>)
   1567a:	685c      	ldr	r4, [r3, #4]
   1567c:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
   15680:	f040 811e 	bne.w	158c0 <mem_manage_fault+0x2e8>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   15684:	4b96      	ldr	r3, [pc, #600]	; (158e0 <mem_manage_fault+0x308>)
   15686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15688:	f013 0f20 	tst.w	r3, #32
   1568c:	d004      	beq.n	15698 <mem_manage_fault+0xc0>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   1568e:	4a94      	ldr	r2, [pc, #592]	; (158e0 <mem_manage_fault+0x308>)
   15690:	6a53      	ldr	r3, [r2, #36]	; 0x24
   15692:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   15696:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   15698:	4a91      	ldr	r2, [pc, #580]	; (158e0 <mem_manage_fault+0x308>)
   1569a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1569c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   156a0:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   156a2:	2101      	movs	r1, #1
   156a4:	4628      	mov	r0, r5
   156a6:	f010 fc0b 	bl	25ec0 <memory_fault_recoverable>
   156aa:	7030      	strb	r0, [r6, #0]
}
   156ac:	4620      	mov	r0, r4
   156ae:	379c      	adds	r7, #156	; 0x9c
   156b0:	46bd      	mov	sp, r7
   156b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
   156b6:	4b8b      	ldr	r3, [pc, #556]	; (158e4 <mem_manage_fault+0x30c>)
   156b8:	637b      	str	r3, [r7, #52]	; 0x34
   156ba:	2302      	movs	r3, #2
   156bc:	713b      	strb	r3, [r7, #4]
   156be:	2300      	movs	r3, #0
   156c0:	717b      	strb	r3, [r7, #5]
   156c2:	71bb      	strb	r3, [r7, #6]
   156c4:	71fb      	strb	r3, [r7, #7]
   156c6:	687a      	ldr	r2, [r7, #4]
   156c8:	633a      	str	r2, [r7, #48]	; 0x30
   156ca:	4619      	mov	r1, r3
   156cc:	f363 0100 	bfi	r1, r3, #0, #1
   156d0:	f363 0141 	bfi	r1, r3, #1, #1
   156d4:	f363 0182 	bfi	r1, r3, #2, #1
   156d8:	f363 01c5 	bfi	r1, r3, #3, #3
   156dc:	2201      	movs	r2, #1
   156de:	f362 1188 	bfi	r1, r2, #6, #3
   156e2:	2208      	movs	r2, #8
   156e4:	f362 2152 	bfi	r1, r2, #9, #10
   156e8:	f363 41de 	bfi	r1, r3, #19, #12
   156ec:	f363 71df 	bfi	r1, r3, #31, #1
   156f0:	f107 0230 	add.w	r2, r7, #48	; 0x30
   156f4:	4879      	ldr	r0, [pc, #484]	; (158dc <mem_manage_fault+0x304>)
   156f6:	f010 f85c 	bl	257b2 <z_impl_z_log_msg_static_create>
   156fa:	e79b      	b.n	15634 <mem_manage_fault+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   156fc:	4b7a      	ldr	r3, [pc, #488]	; (158e8 <mem_manage_fault+0x310>)
   156fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   15700:	2302      	movs	r3, #2
   15702:	713b      	strb	r3, [r7, #4]
   15704:	2300      	movs	r3, #0
   15706:	717b      	strb	r3, [r7, #5]
   15708:	71bb      	strb	r3, [r7, #6]
   1570a:	71fb      	strb	r3, [r7, #7]
   1570c:	687a      	ldr	r2, [r7, #4]
   1570e:	64ba      	str	r2, [r7, #72]	; 0x48
   15710:	4619      	mov	r1, r3
   15712:	f363 0100 	bfi	r1, r3, #0, #1
   15716:	f363 0141 	bfi	r1, r3, #1, #1
   1571a:	f363 0182 	bfi	r1, r3, #2, #1
   1571e:	f363 01c5 	bfi	r1, r3, #3, #3
   15722:	2201      	movs	r2, #1
   15724:	f362 1188 	bfi	r1, r2, #6, #3
   15728:	2208      	movs	r2, #8
   1572a:	f362 2152 	bfi	r1, r2, #9, #10
   1572e:	f363 41de 	bfi	r1, r3, #19, #12
   15732:	f363 71df 	bfi	r1, r3, #31, #1
   15736:	f107 0248 	add.w	r2, r7, #72	; 0x48
   1573a:	4868      	ldr	r0, [pc, #416]	; (158dc <mem_manage_fault+0x304>)
   1573c:	f010 f839 	bl	257b2 <z_impl_z_log_msg_static_create>
   15740:	e77d      	b.n	1563e <mem_manage_fault+0x66>
		PR_FAULT_INFO("  Data Access Violation");
   15742:	4b6a      	ldr	r3, [pc, #424]	; (158ec <mem_manage_fault+0x314>)
   15744:	667b      	str	r3, [r7, #100]	; 0x64
   15746:	2302      	movs	r3, #2
   15748:	713b      	strb	r3, [r7, #4]
   1574a:	2300      	movs	r3, #0
   1574c:	717b      	strb	r3, [r7, #5]
   1574e:	71bb      	strb	r3, [r7, #6]
   15750:	71fb      	strb	r3, [r7, #7]
   15752:	687a      	ldr	r2, [r7, #4]
   15754:	663a      	str	r2, [r7, #96]	; 0x60
   15756:	4619      	mov	r1, r3
   15758:	f363 0100 	bfi	r1, r3, #0, #1
   1575c:	f363 0141 	bfi	r1, r3, #1, #1
   15760:	f363 0182 	bfi	r1, r3, #2, #1
   15764:	f363 01c5 	bfi	r1, r3, #3, #3
   15768:	2201      	movs	r2, #1
   1576a:	f362 1188 	bfi	r1, r2, #6, #3
   1576e:	2208      	movs	r2, #8
   15770:	f362 2152 	bfi	r1, r2, #9, #10
   15774:	f363 41de 	bfi	r1, r3, #19, #12
   15778:	f363 71df 	bfi	r1, r3, #31, #1
   1577c:	f107 0260 	add.w	r2, r7, #96	; 0x60
   15780:	4856      	ldr	r0, [pc, #344]	; (158dc <mem_manage_fault+0x304>)
   15782:	f010 f816 	bl	257b2 <z_impl_z_log_msg_static_create>
		uint32_t temp = SCB->MMFAR;
   15786:	4b56      	ldr	r3, [pc, #344]	; (158e0 <mem_manage_fault+0x308>)
   15788:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1578c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1578e:	f013 0f80 	tst.w	r3, #128	; 0x80
   15792:	d04a      	beq.n	1582a <mem_manage_fault+0x252>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   15794:	46e9      	mov	r9, sp
   15796:	b088      	sub	sp, #32
   15798:	466b      	mov	r3, sp
   1579a:	f113 0210 	adds.w	r2, r3, #16
   1579e:	d011      	beq.n	157c4 <mem_manage_fault+0x1ec>
   157a0:	210c      	movs	r1, #12
   157a2:	b152      	cbz	r2, 157ba <mem_manage_fault+0x1e2>
   157a4:	4608      	mov	r0, r1
   157a6:	2904      	cmp	r1, #4
   157a8:	dd03      	ble.n	157b2 <mem_manage_fault+0x1da>
   157aa:	f8df c144 	ldr.w	ip, [pc, #324]	; 158f0 <mem_manage_fault+0x318>
   157ae:	f8c3 c014 	str.w	ip, [r3, #20]
   157b2:	2808      	cmp	r0, #8
   157b4:	dd09      	ble.n	157ca <mem_manage_fault+0x1f2>
   157b6:	f8c3 8018 	str.w	r8, [r3, #24]
   157ba:	290b      	cmp	r1, #11
   157bc:	dd32      	ble.n	15824 <mem_manage_fault+0x24c>
   157be:	f04f 0c0c 	mov.w	ip, #12
   157c2:	e004      	b.n	157ce <mem_manage_fault+0x1f6>
   157c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   157c8:	e7eb      	b.n	157a2 <mem_manage_fault+0x1ca>
   157ca:	f06f 0c1b 	mvn.w	ip, #27
   157ce:	b13a      	cbz	r2, 157e0 <mem_manage_fault+0x208>
   157d0:	2103      	movs	r1, #3
   157d2:	7139      	strb	r1, [r7, #4]
   157d4:	2100      	movs	r1, #0
   157d6:	7179      	strb	r1, [r7, #5]
   157d8:	71b9      	strb	r1, [r7, #6]
   157da:	71f9      	strb	r1, [r7, #7]
   157dc:	6878      	ldr	r0, [r7, #4]
   157de:	6118      	str	r0, [r3, #16]
   157e0:	2100      	movs	r1, #0
   157e2:	f36f 0100 	bfc	r1, #0, #1
   157e6:	f36f 0141 	bfc	r1, #1, #1
   157ea:	f36f 0182 	bfc	r1, #2, #1
   157ee:	f36f 01c5 	bfc	r1, #3, #3
   157f2:	2301      	movs	r3, #1
   157f4:	f363 1188 	bfi	r1, r3, #6, #3
   157f8:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   157fc:	f363 2152 	bfi	r1, r3, #9, #10
   15800:	f36f 41de 	bfc	r1, #19, #12
   15804:	f36f 71df 	bfc	r1, #31, #1
   15808:	2300      	movs	r3, #0
   1580a:	4834      	ldr	r0, [pc, #208]	; (158dc <mem_manage_fault+0x304>)
   1580c:	f00f ffd1 	bl	257b2 <z_impl_z_log_msg_static_create>
   15810:	46cd      	mov	sp, r9
			if (from_hard_fault != 0) {
   15812:	2c00      	cmp	r4, #0
   15814:	f43f af1a 	beq.w	1564c <mem_manage_fault+0x74>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   15818:	4a31      	ldr	r2, [pc, #196]	; (158e0 <mem_manage_fault+0x308>)
   1581a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1581c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   15820:	6293      	str	r3, [r2, #40]	; 0x28
   15822:	e713      	b.n	1564c <mem_manage_fault+0x74>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   15824:	f06f 0c1b 	mvn.w	ip, #27
   15828:	e7d1      	b.n	157ce <mem_manage_fault+0x1f6>
	uint32_t mmfar = -EINVAL;
   1582a:	f06f 0815 	mvn.w	r8, #21
   1582e:	e70d      	b.n	1564c <mem_manage_fault+0x74>
		PR_FAULT_INFO("  Instruction Access Violation");
   15830:	4b30      	ldr	r3, [pc, #192]	; (158f4 <mem_manage_fault+0x31c>)
   15832:	67fb      	str	r3, [r7, #124]	; 0x7c
   15834:	2302      	movs	r3, #2
   15836:	713b      	strb	r3, [r7, #4]
   15838:	2300      	movs	r3, #0
   1583a:	717b      	strb	r3, [r7, #5]
   1583c:	71bb      	strb	r3, [r7, #6]
   1583e:	71fb      	strb	r3, [r7, #7]
   15840:	687a      	ldr	r2, [r7, #4]
   15842:	67ba      	str	r2, [r7, #120]	; 0x78
   15844:	4619      	mov	r1, r3
   15846:	f363 0100 	bfi	r1, r3, #0, #1
   1584a:	f363 0141 	bfi	r1, r3, #1, #1
   1584e:	f363 0182 	bfi	r1, r3, #2, #1
   15852:	f363 01c5 	bfi	r1, r3, #3, #3
   15856:	2201      	movs	r2, #1
   15858:	f362 1188 	bfi	r1, r2, #6, #3
   1585c:	2208      	movs	r2, #8
   1585e:	f362 2152 	bfi	r1, r2, #9, #10
   15862:	f363 41de 	bfi	r1, r3, #19, #12
   15866:	f363 71df 	bfi	r1, r3, #31, #1
   1586a:	f107 0278 	add.w	r2, r7, #120	; 0x78
   1586e:	481b      	ldr	r0, [pc, #108]	; (158dc <mem_manage_fault+0x304>)
   15870:	f00f ff9f 	bl	257b2 <z_impl_z_log_msg_static_create>
   15874:	e6f0      	b.n	15658 <mem_manage_fault+0x80>
		PR_FAULT_INFO(
   15876:	4b20      	ldr	r3, [pc, #128]	; (158f8 <mem_manage_fault+0x320>)
   15878:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   1587c:	2302      	movs	r3, #2
   1587e:	713b      	strb	r3, [r7, #4]
   15880:	2300      	movs	r3, #0
   15882:	717b      	strb	r3, [r7, #5]
   15884:	71bb      	strb	r3, [r7, #6]
   15886:	71fb      	strb	r3, [r7, #7]
   15888:	687a      	ldr	r2, [r7, #4]
   1588a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   1588e:	4619      	mov	r1, r3
   15890:	f363 0100 	bfi	r1, r3, #0, #1
   15894:	f363 0141 	bfi	r1, r3, #1, #1
   15898:	f363 0182 	bfi	r1, r3, #2, #1
   1589c:	f363 01c5 	bfi	r1, r3, #3, #3
   158a0:	2201      	movs	r2, #1
   158a2:	f362 1188 	bfi	r1, r2, #6, #3
   158a6:	2208      	movs	r2, #8
   158a8:	f362 2152 	bfi	r1, r2, #9, #10
   158ac:	f363 41de 	bfi	r1, r3, #19, #12
   158b0:	f363 71df 	bfi	r1, r3, #31, #1
   158b4:	f107 0290 	add.w	r2, r7, #144	; 0x90
   158b8:	4808      	ldr	r0, [pc, #32]	; (158dc <mem_manage_fault+0x304>)
   158ba:	f00f ff7a 	bl	257b2 <z_impl_z_log_msg_static_create>
   158be:	e6d1      	b.n	15664 <mem_manage_fault+0x8c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   158c0:	4629      	mov	r1, r5
   158c2:	4640      	mov	r0, r8
   158c4:	f7ff fa42 	bl	14d4c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   158c8:	4604      	mov	r4, r0
   158ca:	2800      	cmp	r0, #0
   158cc:	f43f aeda 	beq.w	15684 <mem_manage_fault+0xac>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   158d0:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   158d4:	2402      	movs	r4, #2
   158d6:	e6d5      	b.n	15684 <mem_manage_fault+0xac>
   158d8:	0002be40 	.word	0x0002be40
   158dc:	0002b20c 	.word	0x0002b20c
   158e0:	e000ed00 	.word	0xe000ed00
   158e4:	0002be58 	.word	0x0002be58
   158e8:	0002bc50 	.word	0x0002bc50
   158ec:	0002be8c 	.word	0x0002be8c
   158f0:	0002bea4 	.word	0x0002bea4
   158f4:	0002bebc 	.word	0x0002bebc
   158f8:	0002bccc 	.word	0x0002bccc

000158fc <hard_fault>:
{
   158fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   158fe:	b09b      	sub	sp, #108	; 0x6c
   15900:	af00      	add	r7, sp, #0
   15902:	4606      	mov	r6, r0
   15904:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
   15906:	4b85      	ldr	r3, [pc, #532]	; (15b1c <hard_fault+0x220>)
   15908:	61fb      	str	r3, [r7, #28]
   1590a:	2302      	movs	r3, #2
   1590c:	713b      	strb	r3, [r7, #4]
   1590e:	2400      	movs	r4, #0
   15910:	717c      	strb	r4, [r7, #5]
   15912:	71bc      	strb	r4, [r7, #6]
   15914:	71fc      	strb	r4, [r7, #7]
   15916:	687b      	ldr	r3, [r7, #4]
   15918:	61bb      	str	r3, [r7, #24]
   1591a:	4621      	mov	r1, r4
   1591c:	f364 0100 	bfi	r1, r4, #0, #1
   15920:	f364 0141 	bfi	r1, r4, #1, #1
   15924:	f364 0182 	bfi	r1, r4, #2, #1
   15928:	f364 01c5 	bfi	r1, r4, #3, #3
   1592c:	2301      	movs	r3, #1
   1592e:	f363 1188 	bfi	r1, r3, #6, #3
   15932:	2308      	movs	r3, #8
   15934:	f363 2152 	bfi	r1, r3, #9, #10
   15938:	f364 41de 	bfi	r1, r4, #19, #12
   1593c:	f364 71df 	bfi	r1, r4, #31, #1
   15940:	4623      	mov	r3, r4
   15942:	f107 0218 	add.w	r2, r7, #24
   15946:	4876      	ldr	r0, [pc, #472]	; (15b20 <hard_fault+0x224>)
   15948:	f00f ff33 	bl	257b2 <z_impl_z_log_msg_static_create>
	*recoverable = false;
   1594c:	702c      	strb	r4, [r5, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1594e:	4b75      	ldr	r3, [pc, #468]	; (15b24 <hard_fault+0x228>)
   15950:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   15952:	f014 0402 	ands.w	r4, r4, #2
   15956:	d10c      	bne.n	15972 <hard_fault+0x76>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   15958:	4b72      	ldr	r3, [pc, #456]	; (15b24 <hard_fault+0x228>)
   1595a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1595c:	2b00      	cmp	r3, #0
   1595e:	db2c      	blt.n	159ba <hard_fault+0xbe>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   15960:	4b70      	ldr	r3, [pc, #448]	; (15b24 <hard_fault+0x228>)
   15962:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   15964:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
   15968:	d14a      	bne.n	15a00 <hard_fault+0x104>
}
   1596a:	4620      	mov	r0, r4
   1596c:	376c      	adds	r7, #108	; 0x6c
   1596e:	46bd      	mov	sp, r7
   15970:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Bus fault on vector table read");
   15972:	4b6d      	ldr	r3, [pc, #436]	; (15b28 <hard_fault+0x22c>)
   15974:	667b      	str	r3, [r7, #100]	; 0x64
   15976:	2302      	movs	r3, #2
   15978:	713b      	strb	r3, [r7, #4]
   1597a:	2400      	movs	r4, #0
   1597c:	717c      	strb	r4, [r7, #5]
   1597e:	71bc      	strb	r4, [r7, #6]
   15980:	71fc      	strb	r4, [r7, #7]
   15982:	687b      	ldr	r3, [r7, #4]
   15984:	663b      	str	r3, [r7, #96]	; 0x60
   15986:	4621      	mov	r1, r4
   15988:	f364 0100 	bfi	r1, r4, #0, #1
   1598c:	f364 0141 	bfi	r1, r4, #1, #1
   15990:	f364 0182 	bfi	r1, r4, #2, #1
   15994:	f364 01c5 	bfi	r1, r4, #3, #3
   15998:	2301      	movs	r3, #1
   1599a:	f363 1188 	bfi	r1, r3, #6, #3
   1599e:	2308      	movs	r3, #8
   159a0:	f363 2152 	bfi	r1, r3, #9, #10
   159a4:	f364 41de 	bfi	r1, r4, #19, #12
   159a8:	f364 71df 	bfi	r1, r4, #31, #1
   159ac:	4623      	mov	r3, r4
   159ae:	f107 0260 	add.w	r2, r7, #96	; 0x60
   159b2:	485b      	ldr	r0, [pc, #364]	; (15b20 <hard_fault+0x224>)
   159b4:	f00f fefd 	bl	257b2 <z_impl_z_log_msg_static_create>
   159b8:	e7d7      	b.n	1596a <hard_fault+0x6e>
		PR_EXC("  Debug event");
   159ba:	4b5c      	ldr	r3, [pc, #368]	; (15b2c <hard_fault+0x230>)
   159bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   159be:	2302      	movs	r3, #2
   159c0:	713b      	strb	r3, [r7, #4]
   159c2:	2300      	movs	r3, #0
   159c4:	717b      	strb	r3, [r7, #5]
   159c6:	71bb      	strb	r3, [r7, #6]
   159c8:	71fb      	strb	r3, [r7, #7]
   159ca:	687a      	ldr	r2, [r7, #4]
   159cc:	64ba      	str	r2, [r7, #72]	; 0x48
   159ce:	4619      	mov	r1, r3
   159d0:	f363 0100 	bfi	r1, r3, #0, #1
   159d4:	f363 0141 	bfi	r1, r3, #1, #1
   159d8:	f363 0182 	bfi	r1, r3, #2, #1
   159dc:	f363 01c5 	bfi	r1, r3, #3, #3
   159e0:	2201      	movs	r2, #1
   159e2:	f362 1188 	bfi	r1, r2, #6, #3
   159e6:	2208      	movs	r2, #8
   159e8:	f362 2152 	bfi	r1, r2, #9, #10
   159ec:	f363 41de 	bfi	r1, r3, #19, #12
   159f0:	f363 71df 	bfi	r1, r3, #31, #1
   159f4:	f107 0248 	add.w	r2, r7, #72	; 0x48
   159f8:	4849      	ldr	r0, [pc, #292]	; (15b20 <hard_fault+0x224>)
   159fa:	f00f feda 	bl	257b2 <z_impl_z_log_msg_static_create>
   159fe:	e7b4      	b.n	1596a <hard_fault+0x6e>
		PR_EXC("  Fault escalation (see below)");
   15a00:	4b4b      	ldr	r3, [pc, #300]	; (15b30 <hard_fault+0x234>)
   15a02:	637b      	str	r3, [r7, #52]	; 0x34
   15a04:	2302      	movs	r3, #2
   15a06:	713b      	strb	r3, [r7, #4]
   15a08:	2300      	movs	r3, #0
   15a0a:	717b      	strb	r3, [r7, #5]
   15a0c:	71bb      	strb	r3, [r7, #6]
   15a0e:	71fb      	strb	r3, [r7, #7]
   15a10:	687a      	ldr	r2, [r7, #4]
   15a12:	633a      	str	r2, [r7, #48]	; 0x30
   15a14:	4619      	mov	r1, r3
   15a16:	f363 0100 	bfi	r1, r3, #0, #1
   15a1a:	f363 0141 	bfi	r1, r3, #1, #1
   15a1e:	f363 0182 	bfi	r1, r3, #2, #1
   15a22:	f363 01c5 	bfi	r1, r3, #3, #3
   15a26:	2201      	movs	r2, #1
   15a28:	f362 1188 	bfi	r1, r2, #6, #3
   15a2c:	2208      	movs	r2, #8
   15a2e:	f362 2152 	bfi	r1, r2, #9, #10
   15a32:	f363 41de 	bfi	r1, r3, #19, #12
   15a36:	f363 71df 	bfi	r1, r3, #31, #1
   15a3a:	f107 0230 	add.w	r2, r7, #48	; 0x30
   15a3e:	4838      	ldr	r0, [pc, #224]	; (15b20 <hard_fault+0x224>)
   15a40:	f00f feb7 	bl	257b2 <z_impl_z_log_msg_static_create>
		if (z_arm_is_synchronous_svc(esf)) {
   15a44:	4630      	mov	r0, r6
   15a46:	f7ff f9e9 	bl	14e1c <z_arm_is_synchronous_svc>
   15a4a:	2800      	cmp	r0, #0
   15a4c:	d042      	beq.n	15ad4 <hard_fault+0x1d8>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   15a4e:	6834      	ldr	r4, [r6, #0]
   15a50:	466d      	mov	r5, sp
   15a52:	b088      	sub	sp, #32
   15a54:	466b      	mov	r3, sp
   15a56:	f113 0210 	adds.w	r2, r3, #16
   15a5a:	d00f      	beq.n	15a7c <hard_fault+0x180>
   15a5c:	210c      	movs	r1, #12
   15a5e:	b14a      	cbz	r2, 15a74 <hard_fault+0x178>
   15a60:	4608      	mov	r0, r1
   15a62:	2904      	cmp	r1, #4
   15a64:	dd03      	ble.n	15a6e <hard_fault+0x172>
   15a66:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 15b34 <hard_fault+0x238>
   15a6a:	f8c3 c014 	str.w	ip, [r3, #20]
   15a6e:	2808      	cmp	r0, #8
   15a70:	dd07      	ble.n	15a82 <hard_fault+0x186>
   15a72:	619c      	str	r4, [r3, #24]
   15a74:	290b      	cmp	r1, #11
   15a76:	dd2a      	ble.n	15ace <hard_fault+0x1d2>
   15a78:	240c      	movs	r4, #12
   15a7a:	e004      	b.n	15a86 <hard_fault+0x18a>
   15a7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   15a80:	e7ed      	b.n	15a5e <hard_fault+0x162>
   15a82:	f06f 041b 	mvn.w	r4, #27
   15a86:	b13a      	cbz	r2, 15a98 <hard_fault+0x19c>
   15a88:	2103      	movs	r1, #3
   15a8a:	7139      	strb	r1, [r7, #4]
   15a8c:	2100      	movs	r1, #0
   15a8e:	7179      	strb	r1, [r7, #5]
   15a90:	71b9      	strb	r1, [r7, #6]
   15a92:	71f9      	strb	r1, [r7, #7]
   15a94:	6878      	ldr	r0, [r7, #4]
   15a96:	6118      	str	r0, [r3, #16]
   15a98:	2100      	movs	r1, #0
   15a9a:	f36f 0100 	bfc	r1, #0, #1
   15a9e:	f36f 0141 	bfc	r1, #1, #1
   15aa2:	f36f 0182 	bfc	r1, #2, #1
   15aa6:	f36f 01c5 	bfc	r1, #3, #3
   15aaa:	2301      	movs	r3, #1
   15aac:	f363 1188 	bfi	r1, r3, #6, #3
   15ab0:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   15ab4:	f363 2152 	bfi	r1, r3, #9, #10
   15ab8:	f36f 41de 	bfc	r1, #19, #12
   15abc:	f36f 71df 	bfc	r1, #31, #1
   15ac0:	2300      	movs	r3, #0
   15ac2:	4817      	ldr	r0, [pc, #92]	; (15b20 <hard_fault+0x224>)
   15ac4:	f00f fe75 	bl	257b2 <z_impl_z_log_msg_static_create>
   15ac8:	46ad      	mov	sp, r5
			reason = esf->basic.r0;
   15aca:	6834      	ldr	r4, [r6, #0]
   15acc:	e74d      	b.n	1596a <hard_fault+0x6e>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   15ace:	f06f 041b 	mvn.w	r4, #27
   15ad2:	e7d8      	b.n	15a86 <hard_fault+0x18a>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   15ad4:	4b13      	ldr	r3, [pc, #76]	; (15b24 <hard_fault+0x228>)
   15ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15ad8:	f013 0fff 	tst.w	r3, #255	; 0xff
   15adc:	d10f      	bne.n	15afe <hard_fault+0x202>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   15ade:	4b11      	ldr	r3, [pc, #68]	; (15b24 <hard_fault+0x228>)
   15ae0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   15ae2:	f414 447f 	ands.w	r4, r4, #65280	; 0xff00
   15ae6:	d111      	bne.n	15b0c <hard_fault+0x210>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   15ae8:	4b0e      	ldr	r3, [pc, #56]	; (15b24 <hard_fault+0x228>)
   15aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   15af0:	f4ff af3b 	bcc.w	1596a <hard_fault+0x6e>
			reason = usage_fault(esf);
   15af4:	4630      	mov	r0, r6
   15af6:	f7ff fb87 	bl	15208 <usage_fault>
   15afa:	4604      	mov	r4, r0
	return reason;
   15afc:	e735      	b.n	1596a <hard_fault+0x6e>
			reason = mem_manage_fault(esf, 1, recoverable);
   15afe:	462a      	mov	r2, r5
   15b00:	2101      	movs	r1, #1
   15b02:	4630      	mov	r0, r6
   15b04:	f7ff fd68 	bl	155d8 <mem_manage_fault>
   15b08:	4604      	mov	r4, r0
   15b0a:	e72e      	b.n	1596a <hard_fault+0x6e>
			reason = bus_fault(esf, 1, recoverable);
   15b0c:	462a      	mov	r2, r5
   15b0e:	2101      	movs	r1, #1
   15b10:	4630      	mov	r0, r6
   15b12:	f7ff f9e5 	bl	14ee0 <bus_fault>
   15b16:	4604      	mov	r4, r0
   15b18:	e727      	b.n	1596a <hard_fault+0x6e>
   15b1a:	bf00      	nop
   15b1c:	0002bedc 	.word	0x0002bedc
   15b20:	0002b20c 	.word	0x0002b20c
   15b24:	e000ed00 	.word	0xe000ed00
   15b28:	0002bef4 	.word	0x0002bef4
   15b2c:	0002bf18 	.word	0x0002bf18
   15b30:	0002bf28 	.word	0x0002bf28
   15b34:	0002bf48 	.word	0x0002bf48

00015b38 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   15b38:	b530      	push	{r4, r5, lr}
   15b3a:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   15b3c:	4b1a      	ldr	r3, [pc, #104]	; (15ba8 <z_arm_fault+0x70>)
   15b3e:	685c      	ldr	r4, [r3, #4]
   15b40:	f3c4 0408 	ubfx	r4, r4, #0, #9
   15b44:	2300      	movs	r3, #0
   15b46:	f383 8811 	msr	BASEPRI, r3
   15b4a:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(0);

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
   15b4e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   15b52:	f7ff f981 	bl	14e58 <get_esf>
   15b56:	4605      	mov	r5, r0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   15b58:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   15b5c:	4621      	mov	r1, r4
   15b5e:	f010 f9b1 	bl	25ec4 <fault_handle>
	if (recoverable) {
   15b62:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15b66:	b10b      	cbz	r3, 15b6c <z_arm_fault+0x34>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   15b68:	b00b      	add	sp, #44	; 0x2c
   15b6a:	bd30      	pop	{r4, r5, pc}
   15b6c:	4604      	mov	r4, r0
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   15b6e:	2220      	movs	r2, #32
   15b70:	4629      	mov	r1, r5
   15b72:	a801      	add	r0, sp, #4
   15b74:	f010 fa57 	bl	26026 <memcpy>
	if (nested_exc) {
   15b78:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   15b7c:	b14b      	cbz	r3, 15b92 <z_arm_fault+0x5a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   15b7e:	9b08      	ldr	r3, [sp, #32]
   15b80:	f3c3 0208 	ubfx	r2, r3, #0, #9
   15b84:	b95a      	cbnz	r2, 15b9e <z_arm_fault+0x66>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   15b86:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   15b8a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   15b8e:	9308      	str	r3, [sp, #32]
   15b90:	e005      	b.n	15b9e <z_arm_fault+0x66>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   15b92:	9b08      	ldr	r3, [sp, #32]
   15b94:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   15b98:	f023 0301 	bic.w	r3, r3, #1
   15b9c:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   15b9e:	a901      	add	r1, sp, #4
   15ba0:	4620      	mov	r0, r4
   15ba2:	f010 f95a 	bl	25e5a <z_arm_fatal_error>
   15ba6:	e7df      	b.n	15b68 <z_arm_fault+0x30>
   15ba8:	e000ed00 	.word	0xe000ed00

00015bac <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   15bac:	4a02      	ldr	r2, [pc, #8]	; (15bb8 <z_arm_fault_init+0xc>)
   15bae:	6953      	ldr	r3, [r2, #20]
   15bb0:	f043 0310 	orr.w	r3, r3, #16
   15bb4:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   15bb6:	4770      	bx	lr
   15bb8:	e000ed00 	.word	0xe000ed00

00015bbc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   15bbc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   15bc0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   15bc4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   15bc6:	4672      	mov	r2, lr
	bl z_arm_fault
   15bc8:	f7ff ffb6 	bl	15b38 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   15bcc:	bd01      	pop	{r0, pc}
   15bce:	bf00      	nop

00015bd0 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   15bd0:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   15bd2:	e006      	b.n	15be2 <z_arm_interrupt_init+0x12>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15bd4:	f003 030f 	and.w	r3, r3, #15
   15bd8:	4909      	ldr	r1, [pc, #36]	; (15c00 <z_arm_interrupt_init+0x30>)
   15bda:	4419      	add	r1, r3
   15bdc:	2340      	movs	r3, #64	; 0x40
   15bde:	760b      	strb	r3, [r1, #24]
   15be0:	3201      	adds	r2, #1
   15be2:	2a2f      	cmp	r2, #47	; 0x2f
   15be4:	dc0a      	bgt.n	15bfc <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   15be6:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   15be8:	2b00      	cmp	r3, #0
   15bea:	dbf3      	blt.n	15bd4 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15bec:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   15bf0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   15bf4:	2140      	movs	r1, #64	; 0x40
   15bf6:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   15bfa:	e7f1      	b.n	15be0 <z_arm_interrupt_init+0x10>
	}
}
   15bfc:	4770      	bx	lr
   15bfe:	bf00      	nop
   15c00:	e000ecfc 	.word	0xe000ecfc

00015c04 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
   15c04:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
   15c06:	4913      	ldr	r1, [pc, #76]	; (15c54 <__start+0x50>)
    strb r0, [r1]
   15c08:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   15c0a:	2000      	movs	r0, #0
    msr CONTROL, r0
   15c0c:	f380 8814 	msr	CONTROL, r0
    isb
   15c10:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   15c14:	f7fd feae 	bl	13974 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   15c18:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   15c1a:	490f      	ldr	r1, [pc, #60]	; (15c58 <__start+0x54>)
    str r0, [r1]
   15c1c:	6008      	str	r0, [r1, #0]
    dsb
   15c1e:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   15c22:	480e      	ldr	r0, [pc, #56]	; (15c5c <__start+0x58>)
    msr msp, r0
   15c24:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   15c28:	f000 f830 	bl	15c8c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   15c2c:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   15c2e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   15c32:	480b      	ldr	r0, [pc, #44]	; (15c60 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   15c34:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   15c38:	1840      	adds	r0, r0, r1
    msr PSP, r0
   15c3a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   15c3e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   15c42:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   15c44:	4308      	orrs	r0, r1
    msr CONTROL, r0
   15c46:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   15c4a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   15c4e:	f7fe ffe7 	bl	14c20 <z_arm_prep_c>
   15c52:	0000      	.short	0x0000
    ldr r1, =z_sys_post_kernel
   15c54:	200069ba 	.word	0x200069ba
    ldr r1, =_SCS_MPU_CTRL
   15c58:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   15c5c:	20009540 	.word	0x20009540
    ldr r0, =z_interrupt_stacks
   15c60:	20008780 	.word	0x20008780

00015c64 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   15c64:	4b08      	ldr	r3, [pc, #32]	; (15c88 <z_arm_clear_arm_mpu_config+0x24>)
   15c66:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
   15c6a:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
   15c6e:	2300      	movs	r3, #0
   15c70:	e006      	b.n	15c80 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
   15c72:	4a05      	ldr	r2, [pc, #20]	; (15c88 <z_arm_clear_arm_mpu_config+0x24>)
   15c74:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
   15c78:	2100      	movs	r1, #0
   15c7a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
   15c7e:	3301      	adds	r3, #1
   15c80:	4283      	cmp	r3, r0
   15c82:	dbf6      	blt.n	15c72 <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
   15c84:	4770      	bx	lr
   15c86:	bf00      	nop
   15c88:	e000ed00 	.word	0xe000ed00

00015c8c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   15c8c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   15c8e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   15c90:	2400      	movs	r4, #0
   15c92:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   15c96:	f7ff ffe5 	bl	15c64 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   15c9a:	4623      	mov	r3, r4
   15c9c:	e008      	b.n	15cb0 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
   15c9e:	f103 0120 	add.w	r1, r3, #32
   15ca2:	4a0e      	ldr	r2, [pc, #56]	; (15cdc <z_arm_init_arch_hw_at_boot+0x50>)
   15ca4:	f04f 30ff 	mov.w	r0, #4294967295
   15ca8:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   15cac:	3301      	adds	r3, #1
   15cae:	b2db      	uxtb	r3, r3
   15cb0:	2b07      	cmp	r3, #7
   15cb2:	d9f4      	bls.n	15c9e <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   15cb4:	2300      	movs	r3, #0
   15cb6:	e008      	b.n	15cca <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
   15cb8:	f103 0160 	add.w	r1, r3, #96	; 0x60
   15cbc:	4a07      	ldr	r2, [pc, #28]	; (15cdc <z_arm_init_arch_hw_at_boot+0x50>)
   15cbe:	f04f 30ff 	mov.w	r0, #4294967295
   15cc2:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   15cc6:	3301      	adds	r3, #1
   15cc8:	b2db      	uxtb	r3, r3
   15cca:	2b07      	cmp	r3, #7
   15ccc:	d9f4      	bls.n	15cb8 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   15cce:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   15cd0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15cd4:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   15cd8:	bd10      	pop	{r4, pc}
   15cda:	bf00      	nop
   15cdc:	e000e100 	.word	0xe000e100

00015ce0 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   15ce0:	b508      	push	{r3, lr}
	if (_current == thread) {
   15ce2:	4b0a      	ldr	r3, [pc, #40]	; (15d0c <z_impl_k_thread_abort+0x2c>)
   15ce4:	689b      	ldr	r3, [r3, #8]
   15ce6:	4283      	cmp	r3, r0
   15ce8:	d002      	beq.n	15cf0 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
   15cea:	f00d fd05 	bl	236f8 <z_thread_abort>
}
   15cee:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   15cf0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   15cf4:	2b00      	cmp	r3, #0
   15cf6:	d0f8      	beq.n	15cea <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   15cf8:	4b05      	ldr	r3, [pc, #20]	; (15d10 <z_impl_k_thread_abort+0x30>)
   15cfa:	685a      	ldr	r2, [r3, #4]
   15cfc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   15d00:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   15d02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   15d04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   15d08:	625a      	str	r2, [r3, #36]	; 0x24
   15d0a:	e7ee      	b.n	15cea <z_impl_k_thread_abort+0xa>
   15d0c:	2000696c 	.word	0x2000696c
   15d10:	e000ed00 	.word	0xe000ed00

00015d14 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   15d14:	b508      	push	{r3, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   15d16:	4b03      	ldr	r3, [pc, #12]	; (15d24 <z_arm_configure_static_mpu_regions+0x10>)
   15d18:	4a03      	ldr	r2, [pc, #12]	; (15d28 <z_arm_configure_static_mpu_regions+0x14>)
   15d1a:	2101      	movs	r1, #1
   15d1c:	4803      	ldr	r0, [pc, #12]	; (15d2c <z_arm_configure_static_mpu_regions+0x18>)
   15d1e:	f010 f926 	bl	25f6e <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   15d22:	bd08      	pop	{r3, pc}
   15d24:	20020000 	.word	0x20020000
   15d28:	20000000 	.word	0x20000000
   15d2c:	0002bf64 	.word	0x0002bf64

00015d30 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   15d30:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   15d32:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   15d36:	3b40      	subs	r3, #64	; 0x40
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   15d38:	4804      	ldr	r0, [pc, #16]	; (15d4c <z_arm_configure_dynamic_mpu_regions+0x1c>)
   15d3a:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
   15d3c:	2340      	movs	r3, #64	; 0x40
   15d3e:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   15d40:	4b03      	ldr	r3, [pc, #12]	; (15d50 <z_arm_configure_dynamic_mpu_regions+0x20>)
   15d42:	6083      	str	r3, [r0, #8]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   15d44:	2101      	movs	r1, #1
   15d46:	f010 f916 	bl	25f76 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_enable();
#endif
}
   15d4a:	bd08      	pop	{r3, pc}
   15d4c:	200056a4 	.word	0x200056a4
   15d50:	150b0000 	.word	0x150b0000

00015d54 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   15d54:	4a08      	ldr	r2, [pc, #32]	; (15d78 <region_init+0x24>)
   15d56:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15d5a:	680b      	ldr	r3, [r1, #0]
   15d5c:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   15d60:	4303      	orrs	r3, r0
   15d62:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15d66:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   15d6a:	688b      	ldr	r3, [r1, #8]
   15d6c:	f043 0301 	orr.w	r3, r3, #1
   15d70:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
   15d74:	4770      	bx	lr
   15d76:	bf00      	nop
   15d78:	e000ed00 	.word	0xe000ed00

00015d7c <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
   15d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   15d7e:	b083      	sub	sp, #12
   15d80:	af00      	add	r7, sp, #0
   15d82:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   15d84:	2807      	cmp	r0, #7
   15d86:	d805      	bhi.n	15d94 <region_allocate_and_init+0x18>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   15d88:	f7ff ffe4 	bl	15d54 <region_init>

	return index;
   15d8c:	4620      	mov	r0, r4
}
   15d8e:	370c      	adds	r7, #12
   15d90:	46bd      	mov	sp, r7
   15d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   15d94:	466d      	mov	r5, sp
   15d96:	b088      	sub	sp, #32
   15d98:	466b      	mov	r3, sp
   15d9a:	f113 0210 	adds.w	r2, r3, #16
   15d9e:	d031      	beq.n	15e04 <region_allocate_and_init+0x88>
   15da0:	210c      	movs	r1, #12
   15da2:	b13a      	cbz	r2, 15db4 <region_allocate_and_init+0x38>
   15da4:	4608      	mov	r0, r1
   15da6:	2904      	cmp	r1, #4
   15da8:	dd01      	ble.n	15dae <region_allocate_and_init+0x32>
   15daa:	4e19      	ldr	r6, [pc, #100]	; (15e10 <region_allocate_and_init+0x94>)
   15dac:	615e      	str	r6, [r3, #20]
   15dae:	2808      	cmp	r0, #8
   15db0:	dd00      	ble.n	15db4 <region_allocate_and_init+0x38>
   15db2:	619c      	str	r4, [r3, #24]
   15db4:	290b      	cmp	r1, #11
   15db6:	dd28      	ble.n	15e0a <region_allocate_and_init+0x8e>
   15db8:	240c      	movs	r4, #12
   15dba:	b13a      	cbz	r2, 15dcc <region_allocate_and_init+0x50>
   15dbc:	2103      	movs	r1, #3
   15dbe:	7139      	strb	r1, [r7, #4]
   15dc0:	2100      	movs	r1, #0
   15dc2:	7179      	strb	r1, [r7, #5]
   15dc4:	71b9      	strb	r1, [r7, #6]
   15dc6:	71f9      	strb	r1, [r7, #7]
   15dc8:	6878      	ldr	r0, [r7, #4]
   15dca:	6118      	str	r0, [r3, #16]
   15dcc:	2100      	movs	r1, #0
   15dce:	f36f 0100 	bfc	r1, #0, #1
   15dd2:	f36f 0141 	bfc	r1, #1, #1
   15dd6:	f36f 0182 	bfc	r1, #2, #1
   15dda:	f36f 01c5 	bfc	r1, #3, #3
   15dde:	2301      	movs	r3, #1
   15de0:	f363 1188 	bfi	r1, r3, #6, #3
   15de4:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   15de8:	f364 2152 	bfi	r1, r4, #9, #10
   15dec:	f36f 41de 	bfc	r1, #19, #12
   15df0:	f36f 71df 	bfc	r1, #31, #1
   15df4:	2300      	movs	r3, #0
   15df6:	4807      	ldr	r0, [pc, #28]	; (15e14 <region_allocate_and_init+0x98>)
   15df8:	f00f fcdb 	bl	257b2 <z_impl_z_log_msg_static_create>
   15dfc:	46ad      	mov	sp, r5
		return -EINVAL;
   15dfe:	f06f 0015 	mvn.w	r0, #21
   15e02:	e7c4      	b.n	15d8e <region_allocate_and_init+0x12>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   15e04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   15e08:	e7cb      	b.n	15da2 <region_allocate_and_init+0x26>
   15e0a:	f06f 041b 	mvn.w	r4, #27
   15e0e:	e7d4      	b.n	15dba <region_allocate_and_init+0x3e>
   15e10:	0002bf74 	.word	0x0002bf74
   15e14:	0002b1fc 	.word	0x0002b1fc

00015e18 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   15e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15e1c:	b082      	sub	sp, #8
   15e1e:	af00      	add	r7, sp, #0
   15e20:	4681      	mov	r9, r0
   15e22:	4688      	mov	r8, r1
   15e24:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
   15e26:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
   15e28:	2500      	movs	r5, #0
   15e2a:	e00f      	b.n	15e4c <mpu_configure_regions+0x34>
		}
		/* Non-empty region. */

		if (do_sanity_check &&
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   15e2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   15e30:	e024      	b.n	15e7c <mpu_configure_regions+0x64>
   15e32:	f06f 041b 	mvn.w	r4, #27
   15e36:	e02d      	b.n	15e94 <mpu_configure_regions+0x7c>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   15e38:	4621      	mov	r1, r4
   15e3a:	b2f0      	uxtb	r0, r6
   15e3c:	f010 f878 	bl	25f30 <mpu_configure_region>
   15e40:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
   15e42:	f110 0f16 	cmn.w	r0, #22
   15e46:	d049      	beq.n	15edc <mpu_configure_regions+0xc4>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
   15e48:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
   15e4a:	3501      	adds	r5, #1
   15e4c:	4545      	cmp	r5, r8
   15e4e:	da45      	bge.n	15edc <mpu_configure_regions+0xc4>
		if (regions[i].size == 0U) {
   15e50:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   15e54:	eb09 0484 	add.w	r4, r9, r4, lsl #2
   15e58:	6862      	ldr	r2, [r4, #4]
   15e5a:	2a00      	cmp	r2, #0
   15e5c:	d0f5      	beq.n	15e4a <mpu_configure_regions+0x32>
		if (do_sanity_check &&
   15e5e:	f1ba 0f00 	cmp.w	sl, #0
   15e62:	d0e9      	beq.n	15e38 <mpu_configure_regions+0x20>
				(!mpu_partition_is_valid(&regions[i]))) {
   15e64:	4620      	mov	r0, r4
   15e66:	f010 f852 	bl	25f0e <mpu_partition_is_valid>
		if (do_sanity_check &&
   15e6a:	2800      	cmp	r0, #0
   15e6c:	d1e4      	bne.n	15e38 <mpu_configure_regions+0x20>
			LOG_ERR("Partition %u: sanity check failed.", i);
   15e6e:	466e      	mov	r6, sp
   15e70:	b088      	sub	sp, #32
   15e72:	466b      	mov	r3, sp
   15e74:	f113 0210 	adds.w	r2, r3, #16
   15e78:	d0d8      	beq.n	15e2c <mpu_configure_regions+0x14>
   15e7a:	210c      	movs	r1, #12
   15e7c:	b13a      	cbz	r2, 15e8e <mpu_configure_regions+0x76>
   15e7e:	4608      	mov	r0, r1
   15e80:	2904      	cmp	r1, #4
   15e82:	dd01      	ble.n	15e88 <mpu_configure_regions+0x70>
   15e84:	4c18      	ldr	r4, [pc, #96]	; (15ee8 <mpu_configure_regions+0xd0>)
   15e86:	615c      	str	r4, [r3, #20]
   15e88:	2808      	cmp	r0, #8
   15e8a:	dd00      	ble.n	15e8e <mpu_configure_regions+0x76>
   15e8c:	619d      	str	r5, [r3, #24]
   15e8e:	290b      	cmp	r1, #11
   15e90:	ddcf      	ble.n	15e32 <mpu_configure_regions+0x1a>
   15e92:	240c      	movs	r4, #12
   15e94:	b13a      	cbz	r2, 15ea6 <mpu_configure_regions+0x8e>
   15e96:	2103      	movs	r1, #3
   15e98:	7139      	strb	r1, [r7, #4]
   15e9a:	2100      	movs	r1, #0
   15e9c:	7179      	strb	r1, [r7, #5]
   15e9e:	71b9      	strb	r1, [r7, #6]
   15ea0:	71f9      	strb	r1, [r7, #7]
   15ea2:	6878      	ldr	r0, [r7, #4]
   15ea4:	6118      	str	r0, [r3, #16]
   15ea6:	2100      	movs	r1, #0
   15ea8:	f36f 0100 	bfc	r1, #0, #1
   15eac:	f36f 0141 	bfc	r1, #1, #1
   15eb0:	f36f 0182 	bfc	r1, #2, #1
   15eb4:	f36f 01c5 	bfc	r1, #3, #3
   15eb8:	2301      	movs	r3, #1
   15eba:	f363 1188 	bfi	r1, r3, #6, #3
   15ebe:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   15ec2:	f363 2152 	bfi	r1, r3, #9, #10
   15ec6:	f36f 41de 	bfc	r1, #19, #12
   15eca:	f36f 71df 	bfc	r1, #31, #1
   15ece:	2300      	movs	r3, #0
   15ed0:	4806      	ldr	r0, [pc, #24]	; (15eec <mpu_configure_regions+0xd4>)
   15ed2:	f00f fc6e 	bl	257b2 <z_impl_z_log_msg_static_create>
   15ed6:	46b5      	mov	sp, r6
			return -EINVAL;
   15ed8:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
   15edc:	4630      	mov	r0, r6
   15ede:	3708      	adds	r7, #8
   15ee0:	46bd      	mov	sp, r7
   15ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15ee6:	bf00      	nop
   15ee8:	0002bf9c 	.word	0x0002bf9c
   15eec:	0002b1fc 	.word	0x0002b1fc

00015ef0 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
   15ef0:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   15ef2:	4c03      	ldr	r4, [pc, #12]	; (15f00 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   15ef4:	2301      	movs	r3, #1
   15ef6:	7822      	ldrb	r2, [r4, #0]
   15ef8:	f7ff ff8e 	bl	15e18 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   15efc:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
   15efe:	bd10      	pop	{r4, pc}
   15f00:	200069b6 	.word	0x200069b6

00015f04 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   15f04:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   15f06:	2300      	movs	r3, #0
   15f08:	4a09      	ldr	r2, [pc, #36]	; (15f30 <mpu_configure_dynamic_mpu_regions+0x2c>)
   15f0a:	7812      	ldrb	r2, [r2, #0]
   15f0c:	f7ff ff84 	bl	15e18 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   15f10:	f110 0f16 	cmn.w	r0, #22
   15f14:	d00a      	beq.n	15f2c <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   15f16:	4603      	mov	r3, r0
   15f18:	e006      	b.n	15f28 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
   15f1a:	4a06      	ldr	r2, [pc, #24]	; (15f34 <mpu_configure_dynamic_mpu_regions+0x30>)
   15f1c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
   15f20:	2100      	movs	r1, #0
   15f22:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
   15f26:	3301      	adds	r3, #1
   15f28:	2b07      	cmp	r3, #7
   15f2a:	ddf6      	ble.n	15f1a <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
   15f2c:	bd08      	pop	{r3, pc}
   15f2e:	bf00      	nop
   15f30:	200069b6 	.word	0x200069b6
   15f34:	e000ed00 	.word	0xe000ed00

00015f38 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   15f38:	4b04      	ldr	r3, [pc, #16]	; (15f4c <arm_core_mpu_enable+0x14>)
   15f3a:	2205      	movs	r2, #5
   15f3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   15f40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15f44:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   15f48:	4770      	bx	lr
   15f4a:	bf00      	nop
   15f4c:	e000ed00 	.word	0xe000ed00

00015f50 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   15f50:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   15f54:	4b02      	ldr	r3, [pc, #8]	; (15f60 <arm_core_mpu_disable+0x10>)
   15f56:	2200      	movs	r2, #0
   15f58:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   15f5c:	4770      	bx	lr
   15f5e:	bf00      	nop
   15f60:	e000ed00 	.word	0xe000ed00

00015f64 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   15f64:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   15f66:	4b0e      	ldr	r3, [pc, #56]	; (15fa0 <z_arm_mpu_init+0x3c>)
   15f68:	681d      	ldr	r5, [r3, #0]
   15f6a:	2d08      	cmp	r5, #8
   15f6c:	d815      	bhi.n	15f9a <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   15f6e:	f7ff ffef 	bl	15f50 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   15f72:	2400      	movs	r4, #0
   15f74:	e009      	b.n	15f8a <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   15f76:	4b0a      	ldr	r3, [pc, #40]	; (15fa0 <z_arm_mpu_init+0x3c>)
   15f78:	6859      	ldr	r1, [r3, #4]
   15f7a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   15f7e:	0093      	lsls	r3, r2, #2
   15f80:	4419      	add	r1, r3
   15f82:	4620      	mov	r0, r4
   15f84:	f7ff fee6 	bl	15d54 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   15f88:	3401      	adds	r4, #1
   15f8a:	42a5      	cmp	r5, r4
   15f8c:	d8f3      	bhi.n	15f76 <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   15f8e:	4b05      	ldr	r3, [pc, #20]	; (15fa4 <z_arm_mpu_init+0x40>)
   15f90:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   15f92:	f7ff ffd1 	bl	15f38 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   15f96:	2000      	movs	r0, #0
}
   15f98:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   15f9a:	f04f 30ff 	mov.w	r0, #4294967295
   15f9e:	e7fb      	b.n	15f98 <z_arm_mpu_init+0x34>
   15fa0:	0002bfc0 	.word	0x0002bfc0
   15fa4:	200069b6 	.word	0x200069b6

00015fa8 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   15fa8:	4b01      	ldr	r3, [pc, #4]	; (15fb0 <__stdout_hook_install+0x8>)
   15faa:	6018      	str	r0, [r3, #0]
}
   15fac:	4770      	bx	lr
   15fae:	bf00      	nop
   15fb0:	2000065c 	.word	0x2000065c

00015fb4 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   15fb4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   15fb8:	4905      	ldr	r1, [pc, #20]	; (15fd0 <__NVIC_SystemReset+0x1c>)
   15fba:	68ca      	ldr	r2, [r1, #12]
   15fbc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   15fc0:	4b04      	ldr	r3, [pc, #16]	; (15fd4 <__NVIC_SystemReset+0x20>)
   15fc2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   15fc4:	60cb      	str	r3, [r1, #12]
   15fc6:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   15fca:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   15fcc:	e7fd      	b.n	15fca <__NVIC_SystemReset+0x16>
   15fce:	bf00      	nop
   15fd0:	e000ed00 	.word	0xe000ed00
   15fd4:	05fa0004 	.word	0x05fa0004

00015fd8 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   15fd8:	f04f 0340 	mov.w	r3, #64	; 0x40
   15fdc:	f3ef 8211 	mrs	r2, BASEPRI
   15fe0:	f383 8812 	msr	BASEPRI_MAX, r3
   15fe4:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   15fe8:	2301      	movs	r3, #1
   15fea:	4906      	ldr	r1, [pc, #24]	; (16004 <nordicsemi_nrf52_init+0x2c>)
   15fec:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   15ff0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   15ff4:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   15ff8:	f382 8811 	msr	BASEPRI, r2
   15ffc:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   16000:	2000      	movs	r0, #0
   16002:	4770      	bx	lr
   16004:	4001e000 	.word	0x4001e000

00016008 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   16008:	b130      	cbz	r0, 16018 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
   1600a:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   1600c:	4b03      	ldr	r3, [pc, #12]	; (1601c <arch_busy_wait+0x14>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   1600e:	0180      	lsls	r0, r0, #6
   16010:	f043 0301 	orr.w	r3, r3, #1
   16014:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
   16016:	bd08      	pop	{r3, pc}
   16018:	4770      	bx	lr
   1601a:	bf00      	nop
   1601c:	0002b2e0 	.word	0x0002b2e0

00016020 <bt_addr_le_to_str>:
{
   16020:	b5f0      	push	{r4, r5, r6, r7, lr}
   16022:	b08b      	sub	sp, #44	; 0x2c
   16024:	4604      	mov	r4, r0
   16026:	460d      	mov	r5, r1
   16028:	4616      	mov	r6, r2
	switch (addr->type) {
   1602a:	7803      	ldrb	r3, [r0, #0]
   1602c:	2b03      	cmp	r3, #3
   1602e:	d82c      	bhi.n	1608a <bt_addr_le_to_str+0x6a>
   16030:	e8df f003 	tbb	[pc, r3]
   16034:	26211c02 	.word	0x26211c02
		strcpy(type, "public");
   16038:	4917      	ldr	r1, [pc, #92]	; (16098 <bt_addr_le_to_str+0x78>)
   1603a:	a807      	add	r0, sp, #28
   1603c:	f00f ff9f 	bl	25f7e <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   16040:	7963      	ldrb	r3, [r4, #5]
   16042:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   16044:	78e1      	ldrb	r1, [r4, #3]
   16046:	78a0      	ldrb	r0, [r4, #2]
   16048:	7867      	ldrb	r7, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   1604a:	f10d 0c1c 	add.w	ip, sp, #28
   1604e:	f8cd c014 	str.w	ip, [sp, #20]
   16052:	9704      	str	r7, [sp, #16]
   16054:	9003      	str	r0, [sp, #12]
   16056:	9102      	str	r1, [sp, #8]
   16058:	9201      	str	r2, [sp, #4]
   1605a:	9300      	str	r3, [sp, #0]
   1605c:	79a3      	ldrb	r3, [r4, #6]
   1605e:	4a0f      	ldr	r2, [pc, #60]	; (1609c <bt_addr_le_to_str+0x7c>)
   16060:	4631      	mov	r1, r6
   16062:	4628      	mov	r0, r5
   16064:	f00e faac 	bl	245c0 <snprintk>
}
   16068:	b00b      	add	sp, #44	; 0x2c
   1606a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   1606c:	490c      	ldr	r1, [pc, #48]	; (160a0 <bt_addr_le_to_str+0x80>)
   1606e:	a807      	add	r0, sp, #28
   16070:	f00f ff85 	bl	25f7e <strcpy>
		break;
   16074:	e7e4      	b.n	16040 <bt_addr_le_to_str+0x20>
		strcpy(type, "public-id");
   16076:	490b      	ldr	r1, [pc, #44]	; (160a4 <bt_addr_le_to_str+0x84>)
   16078:	a807      	add	r0, sp, #28
   1607a:	f00f ff80 	bl	25f7e <strcpy>
		break;
   1607e:	e7df      	b.n	16040 <bt_addr_le_to_str+0x20>
		strcpy(type, "random-id");
   16080:	4909      	ldr	r1, [pc, #36]	; (160a8 <bt_addr_le_to_str+0x88>)
   16082:	a807      	add	r0, sp, #28
   16084:	f00f ff7b 	bl	25f7e <strcpy>
		break;
   16088:	e7da      	b.n	16040 <bt_addr_le_to_str+0x20>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   1608a:	4a08      	ldr	r2, [pc, #32]	; (160ac <bt_addr_le_to_str+0x8c>)
   1608c:	210a      	movs	r1, #10
   1608e:	a807      	add	r0, sp, #28
   16090:	f00e fa96 	bl	245c0 <snprintk>
		break;
   16094:	e7d4      	b.n	16040 <bt_addr_le_to_str+0x20>
   16096:	bf00      	nop
   16098:	0002b2e8 	.word	0x0002b2e8
   1609c:	0002b310 	.word	0x0002b310
   160a0:	0002b2f0 	.word	0x0002b2f0
   160a4:	0002b2f8 	.word	0x0002b2f8
   160a8:	0002b304 	.word	0x0002b304
   160ac:	0002ce50 	.word	0x0002ce50

000160b0 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   160b0:	2940      	cmp	r1, #64	; 0x40
   160b2:	bf28      	it	cs
   160b4:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
   160b6:	2300      	movs	r3, #0
   160b8:	428b      	cmp	r3, r1
   160ba:	d21c      	bcs.n	160f6 <bt_hex+0x46>
{
   160bc:	b430      	push	{r4, r5}
		str[i * 2] = hex[b[i] >> 4];
   160be:	f810 c003 	ldrb.w	ip, [r0, r3]
   160c2:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
   160c6:	005a      	lsls	r2, r3, #1
   160c8:	4d0d      	ldr	r5, [pc, #52]	; (16100 <bt_hex+0x50>)
   160ca:	f815 c00c 	ldrb.w	ip, [r5, ip]
   160ce:	4c0d      	ldr	r4, [pc, #52]	; (16104 <bt_hex+0x54>)
   160d0:	f804 c013 	strb.w	ip, [r4, r3, lsl #1]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   160d4:	f810 c003 	ldrb.w	ip, [r0, r3]
   160d8:	f00c 0c0f 	and.w	ip, ip, #15
   160dc:	3201      	adds	r2, #1
   160de:	f815 500c 	ldrb.w	r5, [r5, ip]
   160e2:	54a5      	strb	r5, [r4, r2]
	for (i = 0; i < len; i++) {
   160e4:	3301      	adds	r3, #1
   160e6:	428b      	cmp	r3, r1
   160e8:	d3e9      	bcc.n	160be <bt_hex+0xe>
	}

	str[i * 2] = '\0';
   160ea:	4806      	ldr	r0, [pc, #24]	; (16104 <bt_hex+0x54>)
   160ec:	2200      	movs	r2, #0
   160ee:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]

	return str;
}
   160f2:	bc30      	pop	{r4, r5}
   160f4:	4770      	bx	lr
	str[i * 2] = '\0';
   160f6:	4803      	ldr	r0, [pc, #12]	; (16104 <bt_hex+0x54>)
   160f8:	2200      	movs	r2, #0
   160fa:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
}
   160fe:	4770      	bx	lr
   16100:	0002c014 	.word	0x0002c014
   16104:	200056d0 	.word	0x200056d0

00016108 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   16108:	b510      	push	{r4, lr}
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));
   1610a:	4c03      	ldr	r4, [pc, #12]	; (16118 <bt_addr_le_str+0x10>)
   1610c:	221e      	movs	r2, #30
   1610e:	4621      	mov	r1, r4
   16110:	f7ff ff86 	bl	16020 <bt_addr_le_to_str>

	return str;
}
   16114:	4620      	mov	r0, r4
   16116:	bd10      	pop	{r4, pc}
   16118:	200056b0 	.word	0x200056b0

0001611c <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   1611c:	b570      	push	{r4, r5, r6, lr}
   1611e:	b084      	sub	sp, #16
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   16120:	ae02      	add	r6, sp, #8
   16122:	2400      	movs	r4, #0
   16124:	9402      	str	r4, [sp, #8]
   16126:	9403      	str	r4, [sp, #12]
   16128:	4b08      	ldr	r3, [pc, #32]	; (1614c <long_wq_init+0x30>)
   1612a:	9302      	str	r3, [sp, #8]

	k_work_queue_init(&bt_long_wq);
   1612c:	4d08      	ldr	r5, [pc, #32]	; (16150 <long_wq_init+0x34>)
   1612e:	4628      	mov	r0, r5
   16130:	f014 f98c 	bl	2a44c <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   16134:	9600      	str	r6, [sp, #0]
   16136:	230a      	movs	r3, #10
   16138:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   1613c:	4905      	ldr	r1, [pc, #20]	; (16154 <long_wq_init+0x38>)
   1613e:	4628      	mov	r0, r5
   16140:	f00c fea2 	bl	22e88 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   16144:	4620      	mov	r0, r4
   16146:	b004      	add	sp, #16
   16148:	bd70      	pop	{r4, r5, r6, pc}
   1614a:	bf00      	nop
   1614c:	0002c028 	.word	0x0002c028
   16150:	20001e78 	.word	0x20001e78
   16154:	20006d00 	.word	0x20006d00

00016158 <bt_long_wq_schedule>:
{
   16158:	b508      	push	{r3, lr}
   1615a:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   1615c:	4801      	ldr	r0, [pc, #4]	; (16164 <bt_long_wq_schedule+0xc>)
   1615e:	f014 f997 	bl	2a490 <k_work_schedule_for_queue>
}
   16162:	bd08      	pop	{r3, pc}
   16164:	20001e78 	.word	0x20001e78

00016168 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   16168:	b510      	push	{r4, lr}
   1616a:	4686      	mov	lr, r0
   1616c:	468c      	mov	ip, r1
	switch (src->type) {
   1616e:	7803      	ldrb	r3, [r0, #0]
   16170:	2b01      	cmp	r3, #1
   16172:	d018      	beq.n	161a6 <uuid_to_uuid128+0x3e>
   16174:	2b02      	cmp	r3, #2
   16176:	d032      	beq.n	161de <uuid_to_uuid128+0x76>
   16178:	b103      	cbz	r3, 1617c <uuid_to_uuid128+0x14>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   1617a:	bd10      	pop	{r4, pc}
		*dst = uuid128_base;
   1617c:	4c1b      	ldr	r4, [pc, #108]	; (161ec <uuid_to_uuid128+0x84>)
   1617e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   16180:	f8cc 0000 	str.w	r0, [ip]
   16184:	f8cc 1004 	str.w	r1, [ip, #4]
   16188:	f8cc 2008 	str.w	r2, [ip, #8]
   1618c:	f8cc 300c 	str.w	r3, [ip, #12]
   16190:	7823      	ldrb	r3, [r4, #0]
   16192:	f88c 3010 	strb.w	r3, [ip, #16]
		sys_put_le16(BT_UUID_16(src)->val,
   16196:	f8be 3002 	ldrh.w	r3, [lr, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   1619a:	f88c 300d 	strb.w	r3, [ip, #13]
	dst[1] = val >> 8;
   1619e:	0a1b      	lsrs	r3, r3, #8
   161a0:	f88c 300e 	strb.w	r3, [ip, #14]
}
   161a4:	e7e9      	b.n	1617a <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
   161a6:	4c11      	ldr	r4, [pc, #68]	; (161ec <uuid_to_uuid128+0x84>)
   161a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   161aa:	f8cc 0000 	str.w	r0, [ip]
   161ae:	f8cc 1004 	str.w	r1, [ip, #4]
   161b2:	f8cc 2008 	str.w	r2, [ip, #8]
   161b6:	f8cc 300c 	str.w	r3, [ip, #12]
   161ba:	7823      	ldrb	r3, [r4, #0]
   161bc:	f88c 3010 	strb.w	r3, [ip, #16]
		sys_put_le32(BT_UUID_32(src)->val,
   161c0:	f8de 3004 	ldr.w	r3, [lr, #4]
	dst[0] = val;
   161c4:	f88c 300d 	strb.w	r3, [ip, #13]
	dst[1] = val >> 8;
   161c8:	f3c3 2207 	ubfx	r2, r3, #8, #8
   161cc:	f88c 200e 	strb.w	r2, [ip, #14]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   161d0:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   161d2:	f88c 200f 	strb.w	r2, [ip, #15]
	dst[1] = val >> 8;
   161d6:	0e1b      	lsrs	r3, r3, #24
   161d8:	f88c 3010 	strb.w	r3, [ip, #16]
}
   161dc:	e7cd      	b.n	1617a <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
   161de:	2211      	movs	r2, #17
   161e0:	4601      	mov	r1, r0
   161e2:	4660      	mov	r0, ip
   161e4:	f00f ff1f 	bl	26026 <memcpy>
		return;
   161e8:	e7c7      	b.n	1617a <uuid_to_uuid128+0x12>
   161ea:	bf00      	nop
   161ec:	0002c034 	.word	0x0002c034

000161f0 <bt_addr_from_str>:

	return 0;
}

int bt_addr_from_str(const char *str, bt_addr_t *addr)
{
   161f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   161f2:	b083      	sub	sp, #12
   161f4:	4605      	mov	r5, r0
   161f6:	460f      	mov	r7, r1
	int i, j;
	uint8_t tmp;

	if (strlen(str) != 17U) {
   161f8:	f00f fee5 	bl	25fc6 <strlen>
   161fc:	2811      	cmp	r0, #17
   161fe:	d12a      	bne.n	16256 <bt_addr_from_str+0x66>
		return -EINVAL;
	}

	for (i = 5, j = 1; *str != '\0'; str++, j++) {
   16200:	2401      	movs	r4, #1
   16202:	2605      	movs	r6, #5
   16204:	e012      	b.n	1622c <bt_addr_from_str+0x3c>
		if (!(j % 3) && (*str != ':')) {
			return -EINVAL;
		} else if (*str == ':') {
   16206:	2a3a      	cmp	r2, #58	; 0x3a
   16208:	d020      	beq.n	1624c <bt_addr_from_str+0x5c>
			i--;
			continue;
		}

		addr->val[i] = addr->val[i] << 4;
   1620a:	5dbb      	ldrb	r3, [r7, r6]
   1620c:	011b      	lsls	r3, r3, #4
   1620e:	55bb      	strb	r3, [r7, r6]

		if (char2hex(*str, &tmp) < 0) {
   16210:	f10d 0107 	add.w	r1, sp, #7
   16214:	7828      	ldrb	r0, [r5, #0]
   16216:	f00e f98a 	bl	2452e <char2hex>
   1621a:	2800      	cmp	r0, #0
   1621c:	db1e      	blt.n	1625c <bt_addr_from_str+0x6c>
			return -EINVAL;
		}

		addr->val[i] |= tmp;
   1621e:	5dbb      	ldrb	r3, [r7, r6]
   16220:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16224:	4313      	orrs	r3, r2
   16226:	55bb      	strb	r3, [r7, r6]
	for (i = 5, j = 1; *str != '\0'; str++, j++) {
   16228:	3501      	adds	r5, #1
   1622a:	3401      	adds	r4, #1
   1622c:	782a      	ldrb	r2, [r5, #0]
   1622e:	b17a      	cbz	r2, 16250 <bt_addr_from_str+0x60>
		if (!(j % 3) && (*str != ':')) {
   16230:	4b0c      	ldr	r3, [pc, #48]	; (16264 <bt_addr_from_str+0x74>)
   16232:	fb83 1304 	smull	r1, r3, r3, r4
   16236:	eba3 73e4 	sub.w	r3, r3, r4, asr #31
   1623a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1623e:	429c      	cmp	r4, r3
   16240:	d1e1      	bne.n	16206 <bt_addr_from_str+0x16>
   16242:	2a3a      	cmp	r2, #58	; 0x3a
   16244:	d0df      	beq.n	16206 <bt_addr_from_str+0x16>
			return -EINVAL;
   16246:	f06f 0015 	mvn.w	r0, #21
   1624a:	e002      	b.n	16252 <bt_addr_from_str+0x62>
			i--;
   1624c:	3e01      	subs	r6, #1
			continue;
   1624e:	e7eb      	b.n	16228 <bt_addr_from_str+0x38>
	}

	return 0;
   16250:	2000      	movs	r0, #0
}
   16252:	b003      	add	sp, #12
   16254:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   16256:	f06f 0015 	mvn.w	r0, #21
   1625a:	e7fa      	b.n	16252 <bt_addr_from_str+0x62>
			return -EINVAL;
   1625c:	f06f 0015 	mvn.w	r0, #21
   16260:	e7f7      	b.n	16252 <bt_addr_from_str+0x62>
   16262:	bf00      	nop
   16264:	55555556 	.word	0x55555556

00016268 <bt_addr_le_from_str>:

int bt_addr_le_from_str(const char *str, const char *type, bt_addr_le_t *addr)
{
   16268:	b538      	push	{r3, r4, r5, lr}
   1626a:	460d      	mov	r5, r1
   1626c:	4614      	mov	r4, r2
	int err;

	err = bt_addr_from_str(str, &addr->a);
   1626e:	1c51      	adds	r1, r2, #1
   16270:	f7ff ffbe 	bl	161f0 <bt_addr_from_str>
	if (err < 0) {
   16274:	2800      	cmp	r0, #0
   16276:	db06      	blt.n	16286 <bt_addr_le_from_str+0x1e>
		return err;
	}

	if (!strcmp(type, "public") || !strcmp(type, "(public)")) {
   16278:	491e      	ldr	r1, [pc, #120]	; (162f4 <bt_addr_le_from_str+0x8c>)
   1627a:	4628      	mov	r0, r5
   1627c:	f00f feb6 	bl	25fec <strcmp>
   16280:	b910      	cbnz	r0, 16288 <bt_addr_le_from_str+0x20>
		addr->type = BT_ADDR_LE_PUBLIC;
   16282:	2000      	movs	r0, #0
   16284:	7020      	strb	r0, [r4, #0]
	} else {
		return -EINVAL;
	}

	return 0;
}
   16286:	bd38      	pop	{r3, r4, r5, pc}
	if (!strcmp(type, "public") || !strcmp(type, "(public)")) {
   16288:	491b      	ldr	r1, [pc, #108]	; (162f8 <bt_addr_le_from_str+0x90>)
   1628a:	4628      	mov	r0, r5
   1628c:	f00f feae 	bl	25fec <strcmp>
   16290:	2800      	cmp	r0, #0
   16292:	d0f6      	beq.n	16282 <bt_addr_le_from_str+0x1a>
	} else if (!strcmp(type, "random") || !strcmp(type, "(random)")) {
   16294:	4919      	ldr	r1, [pc, #100]	; (162fc <bt_addr_le_from_str+0x94>)
   16296:	4628      	mov	r0, r5
   16298:	f00f fea8 	bl	25fec <strcmp>
   1629c:	b918      	cbnz	r0, 162a6 <bt_addr_le_from_str+0x3e>
		addr->type = BT_ADDR_LE_RANDOM;
   1629e:	2301      	movs	r3, #1
   162a0:	7023      	strb	r3, [r4, #0]
	return 0;
   162a2:	2000      	movs	r0, #0
		addr->type = BT_ADDR_LE_RANDOM;
   162a4:	e7ef      	b.n	16286 <bt_addr_le_from_str+0x1e>
	} else if (!strcmp(type, "random") || !strcmp(type, "(random)")) {
   162a6:	4916      	ldr	r1, [pc, #88]	; (16300 <bt_addr_le_from_str+0x98>)
   162a8:	4628      	mov	r0, r5
   162aa:	f00f fe9f 	bl	25fec <strcmp>
   162ae:	2800      	cmp	r0, #0
   162b0:	d0f5      	beq.n	1629e <bt_addr_le_from_str+0x36>
	} else if (!strcmp(type, "public-id") || !strcmp(type, "(public-id)")) {
   162b2:	4914      	ldr	r1, [pc, #80]	; (16304 <bt_addr_le_from_str+0x9c>)
   162b4:	4628      	mov	r0, r5
   162b6:	f00f fe99 	bl	25fec <strcmp>
   162ba:	b918      	cbnz	r0, 162c4 <bt_addr_le_from_str+0x5c>
		addr->type = BT_ADDR_LE_PUBLIC_ID;
   162bc:	2302      	movs	r3, #2
   162be:	7023      	strb	r3, [r4, #0]
	return 0;
   162c0:	2000      	movs	r0, #0
		addr->type = BT_ADDR_LE_PUBLIC_ID;
   162c2:	e7e0      	b.n	16286 <bt_addr_le_from_str+0x1e>
	} else if (!strcmp(type, "public-id") || !strcmp(type, "(public-id)")) {
   162c4:	4910      	ldr	r1, [pc, #64]	; (16308 <bt_addr_le_from_str+0xa0>)
   162c6:	4628      	mov	r0, r5
   162c8:	f00f fe90 	bl	25fec <strcmp>
   162cc:	2800      	cmp	r0, #0
   162ce:	d0f5      	beq.n	162bc <bt_addr_le_from_str+0x54>
	} else if (!strcmp(type, "random-id") || !strcmp(type, "(random-id)")) {
   162d0:	490e      	ldr	r1, [pc, #56]	; (1630c <bt_addr_le_from_str+0xa4>)
   162d2:	4628      	mov	r0, r5
   162d4:	f00f fe8a 	bl	25fec <strcmp>
   162d8:	b918      	cbnz	r0, 162e2 <bt_addr_le_from_str+0x7a>
		addr->type = BT_ADDR_LE_RANDOM_ID;
   162da:	2303      	movs	r3, #3
   162dc:	7023      	strb	r3, [r4, #0]
	return 0;
   162de:	2000      	movs	r0, #0
		addr->type = BT_ADDR_LE_RANDOM_ID;
   162e0:	e7d1      	b.n	16286 <bt_addr_le_from_str+0x1e>
	} else if (!strcmp(type, "random-id") || !strcmp(type, "(random-id)")) {
   162e2:	490b      	ldr	r1, [pc, #44]	; (16310 <bt_addr_le_from_str+0xa8>)
   162e4:	4628      	mov	r0, r5
   162e6:	f00f fe81 	bl	25fec <strcmp>
   162ea:	2800      	cmp	r0, #0
   162ec:	d0f5      	beq.n	162da <bt_addr_le_from_str+0x72>
		return -EINVAL;
   162ee:	f06f 0015 	mvn.w	r0, #21
   162f2:	e7c8      	b.n	16286 <bt_addr_le_from_str+0x1e>
   162f4:	0002b2e8 	.word	0x0002b2e8
   162f8:	0002c048 	.word	0x0002c048
   162fc:	0002b2f0 	.word	0x0002b2f0
   16300:	0002c054 	.word	0x0002c054
   16304:	0002b2f8 	.word	0x0002b2f8
   16308:	0002c060 	.word	0x0002c060
   1630c:	0002b304 	.word	0x0002b304
   16310:	0002c06c 	.word	0x0002c06c

00016314 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   16314:	b538      	push	{r3, r4, r5, lr}
   16316:	4604      	mov	r4, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   16318:	4805      	ldr	r0, [pc, #20]	; (16330 <bt_buf_get_rx+0x1c>)
   1631a:	f011 ffb6 	bl	2828a <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   1631e:	4605      	mov	r5, r0
   16320:	b120      	cbz	r0, 1632c <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   16322:	2100      	movs	r1, #0
   16324:	300c      	adds	r0, #12
   16326:	f011 ffbb 	bl	282a0 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1632a:	762c      	strb	r4, [r5, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   1632c:	4628      	mov	r0, r5
   1632e:	bd38      	pop	{r3, r4, r5, pc}
   16330:	20000b10 	.word	0x20000b10

00016334 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   16334:	b510      	push	{r4, lr}
   16336:	4602      	mov	r2, r0
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   16338:	4b0a      	ldr	r3, [pc, #40]	; (16364 <bt_buf_get_cmd_complete+0x30>)
   1633a:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   1633e:	b158      	cbz	r0, 16358 <bt_buf_get_cmd_complete+0x24>
		buf = net_buf_ref(bt_dev.sent_cmd);
   16340:	f012 f807 	bl	28352 <net_buf_ref>
   16344:	4604      	mov	r4, r0
   16346:	2301      	movs	r3, #1
   16348:	7603      	strb	r3, [r0, #24]

		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0U;
   1634a:	2100      	movs	r1, #0
   1634c:	8201      	strh	r1, [r0, #16]
   1634e:	300c      	adds	r0, #12
   16350:	f011 ffa6 	bl	282a0 <net_buf_simple_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   16354:	4620      	mov	r0, r4
   16356:	bd10      	pop	{r4, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   16358:	460b      	mov	r3, r1
   1635a:	2001      	movs	r0, #1
   1635c:	f7ff ffda 	bl	16314 <bt_buf_get_rx>
   16360:	4604      	mov	r4, r0
   16362:	e7f7      	b.n	16354 <bt_buf_get_cmd_complete+0x20>
   16364:	20000370 	.word	0x20000370

00016368 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   16368:	b510      	push	{r4, lr}
	switch (evt) {
   1636a:	280f      	cmp	r0, #15
   1636c:	d90d      	bls.n	1638a <bt_buf_get_evt+0x22>
   1636e:	2813      	cmp	r0, #19
   16370:	d10d      	bne.n	1638e <bt_buf_get_evt+0x26>
	return net_buf_alloc_fixed(pool, timeout);
   16372:	4814      	ldr	r0, [pc, #80]	; (163c4 <bt_buf_get_evt+0x5c>)
   16374:	f011 ff89 	bl	2828a <net_buf_alloc_fixed>
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		{
			struct net_buf *buf;

			buf = net_buf_alloc(&num_complete_pool, timeout);
			if (buf) {
   16378:	4604      	mov	r4, r0
   1637a:	b198      	cbz	r0, 163a4 <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   1637c:	2100      	movs	r1, #0
   1637e:	300c      	adds	r0, #12
   16380:	f011 ff8e 	bl	282a0 <net_buf_simple_reserve>
   16384:	2301      	movs	r3, #1
   16386:	7623      	strb	r3, [r4, #24]
}
   16388:	e00c      	b.n	163a4 <bt_buf_get_evt+0x3c>
	switch (evt) {
   1638a:	280e      	cmp	r0, #14
   1638c:	d205      	bcs.n	1639a <bt_buf_get_evt+0x32>
#endif /* CONFIG_BT_CONN || CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
		if (discardable) {
   1638e:	b959      	cbnz	r1, 163a8 <bt_buf_get_evt+0x40>
			}

			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   16390:	2001      	movs	r0, #1
   16392:	f7ff ffbf 	bl	16314 <bt_buf_get_rx>
   16396:	4604      	mov	r4, r0
   16398:	e004      	b.n	163a4 <bt_buf_get_evt+0x3c>
		return bt_buf_get_cmd_complete(timeout);
   1639a:	4610      	mov	r0, r2
   1639c:	4619      	mov	r1, r3
   1639e:	f7ff ffc9 	bl	16334 <bt_buf_get_cmd_complete>
   163a2:	4604      	mov	r4, r0
	}
}
   163a4:	4620      	mov	r0, r4
   163a6:	bd10      	pop	{r4, pc}
	return net_buf_alloc_fixed(pool, timeout);
   163a8:	4807      	ldr	r0, [pc, #28]	; (163c8 <bt_buf_get_evt+0x60>)
   163aa:	f011 ff6e 	bl	2828a <net_buf_alloc_fixed>
			if (buf) {
   163ae:	4604      	mov	r4, r0
   163b0:	2800      	cmp	r0, #0
   163b2:	d0f7      	beq.n	163a4 <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   163b4:	2100      	movs	r1, #0
   163b6:	300c      	adds	r0, #12
   163b8:	f011 ff72 	bl	282a0 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   163bc:	2301      	movs	r3, #1
   163be:	7623      	strb	r3, [r4, #24]
			return buf;
   163c0:	e7f0      	b.n	163a4 <bt_buf_get_evt+0x3c>
   163c2:	bf00      	nop
   163c4:	20000b3c 	.word	0x20000b3c
   163c8:	20000a8c 	.word	0x20000a8c

000163cc <conn_handle_disconnected>:
	(void)memset(disconnected_handles, 0, sizeof(disconnected_handles));
}

static void conn_handle_disconnected(uint16_t handle)
{
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   163cc:	2300      	movs	r3, #0
   163ce:	e000      	b.n	163d2 <conn_handle_disconnected+0x6>
   163d0:	3301      	adds	r3, #1
   163d2:	2b07      	cmp	r3, #7
   163d4:	d80a      	bhi.n	163ec <conn_handle_disconnected+0x20>
		if (!disconnected_handles[i]) {
   163d6:	4a06      	ldr	r2, [pc, #24]	; (163f0 <conn_handle_disconnected+0x24>)
   163d8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   163dc:	2a00      	cmp	r2, #0
   163de:	d1f7      	bne.n	163d0 <conn_handle_disconnected+0x4>
			/* Use invalid connection handle bits so that connection
			 * handle 0 can be used as a valid non-zero handle.
			 */
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   163e0:	f440 4270 	orr.w	r2, r0, #61440	; 0xf000
   163e4:	4902      	ldr	r1, [pc, #8]	; (163f0 <conn_handle_disconnected+0x24>)
   163e6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
   163ea:	e7f1      	b.n	163d0 <conn_handle_disconnected+0x4>
		}
	}
}
   163ec:	4770      	bx	lr
   163ee:	bf00      	nop
   163f0:	20005754 	.word	0x20005754

000163f4 <conn_handle_is_disconnected>:

static bool conn_handle_is_disconnected(uint16_t handle)
{
	handle |= ~BT_ACL_HANDLE_MASK;
   163f4:	f440 4070 	orr.w	r0, r0, #61440	; 0xf000

	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   163f8:	2300      	movs	r3, #0
   163fa:	2b07      	cmp	r3, #7
   163fc:	d80c      	bhi.n	16418 <conn_handle_is_disconnected+0x24>
		if (disconnected_handles[i] == handle) {
   163fe:	4a07      	ldr	r2, [pc, #28]	; (1641c <conn_handle_is_disconnected+0x28>)
   16400:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   16404:	4282      	cmp	r2, r0
   16406:	d001      	beq.n	1640c <conn_handle_is_disconnected+0x18>
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   16408:	3301      	adds	r3, #1
   1640a:	e7f6      	b.n	163fa <conn_handle_is_disconnected+0x6>
			disconnected_handles[i] = 0;
   1640c:	4a03      	ldr	r2, [pc, #12]	; (1641c <conn_handle_is_disconnected+0x28>)
   1640e:	2100      	movs	r1, #0
   16410:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			return true;
   16414:	2001      	movs	r0, #1
   16416:	4770      	bx	lr
		}
	}

	return false;
   16418:	2000      	movs	r0, #0
}
   1641a:	4770      	bx	lr
   1641c:	20005754 	.word	0x20005754

00016420 <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   16420:	68c2      	ldr	r2, [r0, #12]

	LOG_DBG("status 0x%02x", rp->status);

	bt_dev.hci_version = rp->hci_version;
   16422:	7851      	ldrb	r1, [r2, #1]
   16424:	4b08      	ldr	r3, [pc, #32]	; (16448 <read_local_ver_complete+0x28>)
   16426:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   1642a:	8851      	ldrh	r1, [r2, #2]
   1642c:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   16430:	7911      	ldrb	r1, [r2, #4]
   16432:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   16436:	f8b2 1007 	ldrh.w	r1, [r2, #7]
   1643a:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   1643e:	f8b2 2005 	ldrh.w	r2, [r2, #5]
   16442:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
}
   16446:	4770      	bx	lr
   16448:	20000370 	.word	0x20000370

0001644c <le_read_supp_states_complete>:

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
   1644c:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
   1644e:	68c0      	ldr	r0, [r0, #12]

	LOG_DBG("status 0x%02x", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
   16450:	3001      	adds	r0, #1
   16452:	f00f fed0 	bl	261f6 <sys_get_le64>
   16456:	4b02      	ldr	r3, [pc, #8]	; (16460 <le_read_supp_states_complete+0x14>)
   16458:	e9c3 0136 	strd	r0, r1, [r3, #216]	; 0xd8
}
   1645c:	bd08      	pop	{r3, pc}
   1645e:	bf00      	nop
   16460:	20000370 	.word	0x20000370

00016464 <hci_reset_complete>:
{
   16464:	b508      	push	{r3, lr}
	uint8_t status = buf->data[0];
   16466:	68c3      	ldr	r3, [r0, #12]
   16468:	781b      	ldrb	r3, [r3, #0]
	if (status) {
   1646a:	b99b      	cbnz	r3, 16494 <hci_reset_complete+0x30>
		bt_scan_reset();
   1646c:	f002 ff90 	bl	19390 <bt_scan_reset>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16470:	4b09      	ldr	r3, [pc, #36]	; (16498 <hci_reset_complete+0x34>)
   16472:	f3bf 8f5b 	dmb	ish
   16476:	681a      	ldr	r2, [r3, #0]
   16478:	f3bf 8f5b 	dmb	ish
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1647c:	f002 0209 	and.w	r2, r2, #9
   16480:	f3bf 8f5b 	dmb	ish
   16484:	e853 1f00 	ldrex	r1, [r3]
   16488:	e843 2000 	strex	r0, r2, [r3]
   1648c:	2800      	cmp	r0, #0
   1648e:	d1f9      	bne.n	16484 <hci_reset_complete+0x20>
   16490:	f3bf 8f5b 	dmb	ish
}
   16494:	bd08      	pop	{r3, pc}
   16496:	bf00      	nop
   16498:	2000043c 	.word	0x2000043c

0001649c <read_local_features_complete>:
{
   1649c:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   1649e:	68c1      	ldr	r1, [r0, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   164a0:	2208      	movs	r2, #8
   164a2:	3101      	adds	r1, #1
   164a4:	4801      	ldr	r0, [pc, #4]	; (164ac <read_local_features_complete+0x10>)
   164a6:	f00f fdbe 	bl	26026 <memcpy>
}
   164aa:	bd08      	pop	{r3, pc}
   164ac:	200003e0 	.word	0x200003e0

000164b0 <read_supported_commands_complete>:
{
   164b0:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   164b2:	68c1      	ldr	r1, [r0, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
   164b4:	2240      	movs	r2, #64	; 0x40
   164b6:	3101      	adds	r1, #1
   164b8:	4801      	ldr	r0, [pc, #4]	; (164c0 <read_supported_commands_complete+0x10>)
   164ba:	f00f fdb4 	bl	26026 <memcpy>
}
   164be:	bd08      	pop	{r3, pc}
   164c0:	200003e8 	.word	0x200003e8

000164c4 <read_le_features_complete>:
{
   164c4:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   164c6:	68c1      	ldr	r1, [r0, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   164c8:	2208      	movs	r2, #8
   164ca:	3101      	adds	r1, #1
   164cc:	4801      	ldr	r0, [pc, #4]	; (164d4 <read_le_features_complete+0x10>)
   164ce:	f00f fdaa 	bl	26026 <memcpy>
}
   164d2:	bd08      	pop	{r3, pc}
   164d4:	20000440 	.word	0x20000440

000164d8 <le_read_buffer_size_complete>:
{
   164d8:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   164da:	68c2      	ldr	r2, [r0, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   164dc:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   164e0:	b299      	uxth	r1, r3
   164e2:	4806      	ldr	r0, [pc, #24]	; (164fc <le_read_buffer_size_complete+0x24>)
   164e4:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
   164e8:	b901      	cbnz	r1, 164ec <le_read_buffer_size_complete+0x14>
}
   164ea:	bd08      	pop	{r3, pc}
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   164ec:	78d1      	ldrb	r1, [r2, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   164ee:	460a      	mov	r2, r1
   164f0:	f500 7080 	add.w	r0, r0, #256	; 0x100
   164f4:	f013 fe9d 	bl	2a232 <z_impl_k_sem_init>
   164f8:	e7f7      	b.n	164ea <le_read_buffer_size_complete+0x12>
   164fa:	bf00      	nop
   164fc:	20000370 	.word	0x20000370

00016500 <read_buffer_size_complete>:
{
   16500:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   16502:	68c2      	ldr	r2, [r0, #12]
	if (bt_dev.le.acl_mtu) {
   16504:	4b08      	ldr	r3, [pc, #32]	; (16528 <read_buffer_size_complete+0x28>)
   16506:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   1650a:	b103      	cbz	r3, 1650e <read_buffer_size_complete+0xe>
}
   1650c:	bd08      	pop	{r3, pc}
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   1650e:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   16512:	4805      	ldr	r0, [pc, #20]	; (16528 <read_buffer_size_complete+0x28>)
   16514:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	pkts = sys_le16_to_cpu(rp->acl_max_num);
   16518:	8891      	ldrh	r1, [r2, #4]
   1651a:	460a      	mov	r2, r1
   1651c:	f500 7080 	add.w	r0, r0, #256	; 0x100
   16520:	f013 fe87 	bl	2a232 <z_impl_k_sem_init>
   16524:	e7f2      	b.n	1650c <read_buffer_size_complete+0xc>
   16526:	bf00      	nop
   16528:	20000370 	.word	0x20000370

0001652c <hci_data_buf_overflow>:
{
   1652c:	b5b0      	push	{r4, r5, r7, lr}
   1652e:	b082      	sub	sp, #8
   16530:	af00      	add	r7, sp, #0
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   16532:	68c3      	ldr	r3, [r0, #12]
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   16534:	781c      	ldrb	r4, [r3, #0]
   16536:	b088      	sub	sp, #32
   16538:	466b      	mov	r3, sp
   1653a:	f113 0210 	adds.w	r2, r3, #16
   1653e:	d031      	beq.n	165a4 <hci_data_buf_overflow+0x78>
   16540:	210c      	movs	r1, #12
   16542:	b13a      	cbz	r2, 16554 <hci_data_buf_overflow+0x28>
   16544:	4608      	mov	r0, r1
   16546:	2904      	cmp	r1, #4
   16548:	dd01      	ble.n	1654e <hci_data_buf_overflow+0x22>
   1654a:	4d19      	ldr	r5, [pc, #100]	; (165b0 <hci_data_buf_overflow+0x84>)
   1654c:	615d      	str	r5, [r3, #20]
   1654e:	2808      	cmp	r0, #8
   16550:	dd00      	ble.n	16554 <hci_data_buf_overflow+0x28>
   16552:	619c      	str	r4, [r3, #24]
   16554:	290b      	cmp	r1, #11
   16556:	dd28      	ble.n	165aa <hci_data_buf_overflow+0x7e>
   16558:	f04f 0c0c 	mov.w	ip, #12
   1655c:	b13a      	cbz	r2, 1656e <hci_data_buf_overflow+0x42>
   1655e:	2103      	movs	r1, #3
   16560:	7139      	strb	r1, [r7, #4]
   16562:	2100      	movs	r1, #0
   16564:	7179      	strb	r1, [r7, #5]
   16566:	71b9      	strb	r1, [r7, #6]
   16568:	71f9      	strb	r1, [r7, #7]
   1656a:	6878      	ldr	r0, [r7, #4]
   1656c:	6118      	str	r0, [r3, #16]
   1656e:	2100      	movs	r1, #0
   16570:	f36f 0100 	bfc	r1, #0, #1
   16574:	f36f 0141 	bfc	r1, #1, #1
   16578:	f36f 0182 	bfc	r1, #2, #1
   1657c:	f36f 01c5 	bfc	r1, #3, #3
   16580:	2302      	movs	r3, #2
   16582:	f363 1188 	bfi	r1, r3, #6, #3
   16586:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   1658a:	f36c 2152 	bfi	r1, ip, #9, #10
   1658e:	f36f 41de 	bfc	r1, #19, #12
   16592:	f36f 71df 	bfc	r1, #31, #1
   16596:	2300      	movs	r3, #0
   16598:	4806      	ldr	r0, [pc, #24]	; (165b4 <hci_data_buf_overflow+0x88>)
   1659a:	f00f f90a 	bl	257b2 <z_impl_z_log_msg_static_create>
}
   1659e:	3708      	adds	r7, #8
   165a0:	46bd      	mov	sp, r7
   165a2:	bdb0      	pop	{r4, r5, r7, pc}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   165a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   165a8:	e7cb      	b.n	16542 <hci_data_buf_overflow+0x16>
   165aa:	f06f 0c1b 	mvn.w	ip, #27
   165ae:	e7d5      	b.n	1655c <hci_data_buf_overflow+0x30>
   165b0:	0002c0a8 	.word	0x0002c0a8
   165b4:	0002b17c 	.word	0x0002b17c

000165b8 <handle_event_common>:
{
   165b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   165ba:	b083      	sub	sp, #12
   165bc:	af00      	add	r7, sp, #0
   165be:	4604      	mov	r4, r0
   165c0:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   165c2:	f04f 0c00 	mov.w	ip, #0
   165c6:	4563      	cmp	r3, ip
   165c8:	d955      	bls.n	16676 <handle_event_common+0xbe>
		const struct event_handler *handler = &handlers[i];
   165ca:	eb02 01cc 	add.w	r1, r2, ip, lsl #3
		if (handler->event != event) {
   165ce:	f812 e03c 	ldrb.w	lr, [r2, ip, lsl #3]
   165d2:	45a6      	cmp	lr, r4
   165d4:	d109      	bne.n	165ea <handle_event_common+0x32>
		if (buf->len < handler->min_len) {
   165d6:	8a03      	ldrh	r3, [r0, #16]
   165d8:	784a      	ldrb	r2, [r1, #1]
   165da:	4293      	cmp	r3, r2
   165dc:	d308      	bcc.n	165f0 <handle_event_common+0x38>
		handler->handler(buf);
   165de:	684b      	ldr	r3, [r1, #4]
   165e0:	4798      	blx	r3
		return 0;
   165e2:	2000      	movs	r0, #0
}
   165e4:	370c      	adds	r7, #12
   165e6:	46bd      	mov	sp, r7
   165e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < num_handlers; i++) {
   165ea:	f10c 0c01 	add.w	ip, ip, #1
   165ee:	e7ea      	b.n	165c6 <handle_event_common+0xe>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   165f0:	466d      	mov	r5, sp
   165f2:	b088      	sub	sp, #32
   165f4:	4669      	mov	r1, sp
   165f6:	f111 0210 	adds.w	r2, r1, #16
   165fa:	d036      	beq.n	1666a <handle_event_common+0xb2>
   165fc:	2010      	movs	r0, #16
   165fe:	b162      	cbz	r2, 1661a <handle_event_common+0x62>
   16600:	4684      	mov	ip, r0
   16602:	2804      	cmp	r0, #4
   16604:	dd01      	ble.n	1660a <handle_event_common+0x52>
   16606:	4e1d      	ldr	r6, [pc, #116]	; (1667c <handle_event_common+0xc4>)
   16608:	614e      	str	r6, [r1, #20]
   1660a:	f1bc 0f08 	cmp.w	ip, #8
   1660e:	dd00      	ble.n	16612 <handle_event_common+0x5a>
   16610:	618b      	str	r3, [r1, #24]
   16612:	f1bc 0f0c 	cmp.w	ip, #12
   16616:	dd00      	ble.n	1661a <handle_event_common+0x62>
   16618:	61cc      	str	r4, [r1, #28]
   1661a:	280f      	cmp	r0, #15
   1661c:	dd28      	ble.n	16670 <handle_event_common+0xb8>
   1661e:	2310      	movs	r3, #16
   16620:	b13a      	cbz	r2, 16632 <handle_event_common+0x7a>
   16622:	2004      	movs	r0, #4
   16624:	7138      	strb	r0, [r7, #4]
   16626:	2000      	movs	r0, #0
   16628:	7178      	strb	r0, [r7, #5]
   1662a:	71b8      	strb	r0, [r7, #6]
   1662c:	71f8      	strb	r0, [r7, #7]
   1662e:	6878      	ldr	r0, [r7, #4]
   16630:	6108      	str	r0, [r1, #16]
   16632:	2100      	movs	r1, #0
   16634:	f36f 0100 	bfc	r1, #0, #1
   16638:	f36f 0141 	bfc	r1, #1, #1
   1663c:	f36f 0182 	bfc	r1, #2, #1
   16640:	f36f 01c5 	bfc	r1, #3, #3
   16644:	2001      	movs	r0, #1
   16646:	f360 1188 	bfi	r1, r0, #6, #3
   1664a:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
   1664e:	f363 2152 	bfi	r1, r3, #9, #10
   16652:	f36f 41de 	bfc	r1, #19, #12
   16656:	f36f 71df 	bfc	r1, #31, #1
   1665a:	2300      	movs	r3, #0
   1665c:	4808      	ldr	r0, [pc, #32]	; (16680 <handle_event_common+0xc8>)
   1665e:	f00f f8a8 	bl	257b2 <z_impl_z_log_msg_static_create>
   16662:	46ad      	mov	sp, r5
			return -EINVAL;
   16664:	f06f 0015 	mvn.w	r0, #21
   16668:	e7bc      	b.n	165e4 <handle_event_common+0x2c>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   1666a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1666e:	e7c6      	b.n	165fe <handle_event_common+0x46>
   16670:	f06f 031b 	mvn.w	r3, #27
   16674:	e7d4      	b.n	16620 <handle_event_common+0x68>
	return -EOPNOTSUPP;
   16676:	f06f 005e 	mvn.w	r0, #94	; 0x5e
   1667a:	e7b3      	b.n	165e4 <handle_event_common+0x2c>
   1667c:	0002c0d0 	.word	0x0002c0d0
   16680:	0002b17c 	.word	0x0002b17c

00016684 <find_pending_connect>:
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
   16684:	b108      	cbz	r0, 1668a <find_pending_connect+0x6>
	return NULL;
   16686:	2000      	movs	r0, #0
}
   16688:	4770      	bx	lr
{
   1668a:	b508      	push	{r3, lr}
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   1668c:	2206      	movs	r2, #6
   1668e:	f003 fef1 	bl	1a474 <bt_conn_lookup_state_le>
		if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) && !conn) {
   16692:	b100      	cbz	r0, 16696 <find_pending_connect+0x12>
}
   16694:	bd08      	pop	{r3, pc}
			conn = bt_conn_lookup_state_le(BT_ID_DEFAULT,
   16696:	2203      	movs	r2, #3
   16698:	4902      	ldr	r1, [pc, #8]	; (166a4 <find_pending_connect+0x20>)
   1669a:	2000      	movs	r0, #0
   1669c:	f003 feea 	bl	1a474 <bt_conn_lookup_state_le>
		return conn;
   166a0:	e7f8      	b.n	16694 <find_pending_connect+0x10>
   166a2:	bf00      	nop
   166a4:	0002bff4 	.word	0x0002bff4

000166a8 <hci_disconn_complete>:
{
   166a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   166aa:	b083      	sub	sp, #12
   166ac:	af00      	add	r7, sp, #0
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   166ae:	68c4      	ldr	r4, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   166b0:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
   166b4:	7823      	ldrb	r3, [r4, #0]
   166b6:	b113      	cbz	r3, 166be <hci_disconn_complete+0x16>
}
   166b8:	370c      	adds	r7, #12
   166ba:	46bd      	mov	sp, r7
   166bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_handle(handle);
   166be:	4630      	mov	r0, r6
   166c0:	f003 fc2c 	bl	19f1c <bt_conn_lookup_handle>
	if (!conn) {
   166c4:	4605      	mov	r5, r0
   166c6:	b158      	cbz	r0, 166e0 <hci_disconn_complete+0x38>
	conn->err = evt->reason;
   166c8:	78e3      	ldrb	r3, [r4, #3]
   166ca:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   166cc:	2100      	movs	r1, #0
   166ce:	f003 fc2f 	bl	19f30 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   166d2:	78ab      	ldrb	r3, [r5, #2]
   166d4:	2b01      	cmp	r3, #1
   166d6:	d03f      	beq.n	16758 <hci_disconn_complete+0xb0>
		bt_conn_unref(conn);
   166d8:	4628      	mov	r0, r5
   166da:	f010 f8e6 	bl	268aa <bt_conn_unref>
		return;
   166de:	e7eb      	b.n	166b8 <hci_disconn_complete+0x10>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   166e0:	466d      	mov	r5, sp
   166e2:	b088      	sub	sp, #32
   166e4:	466b      	mov	r3, sp
   166e6:	f113 0210 	adds.w	r2, r3, #16
   166ea:	d02f      	beq.n	1674c <hci_disconn_complete+0xa4>
   166ec:	210c      	movs	r1, #12
   166ee:	b13a      	cbz	r2, 16700 <hci_disconn_complete+0x58>
   166f0:	4608      	mov	r0, r1
   166f2:	2904      	cmp	r1, #4
   166f4:	dd01      	ble.n	166fa <hci_disconn_complete+0x52>
   166f6:	4c1a      	ldr	r4, [pc, #104]	; (16760 <hci_disconn_complete+0xb8>)
   166f8:	615c      	str	r4, [r3, #20]
   166fa:	2808      	cmp	r0, #8
   166fc:	dd00      	ble.n	16700 <hci_disconn_complete+0x58>
   166fe:	619e      	str	r6, [r3, #24]
   16700:	290b      	cmp	r1, #11
   16702:	dd26      	ble.n	16752 <hci_disconn_complete+0xaa>
   16704:	240c      	movs	r4, #12
   16706:	b13a      	cbz	r2, 16718 <hci_disconn_complete+0x70>
   16708:	2103      	movs	r1, #3
   1670a:	7139      	strb	r1, [r7, #4]
   1670c:	2100      	movs	r1, #0
   1670e:	7179      	strb	r1, [r7, #5]
   16710:	71b9      	strb	r1, [r7, #6]
   16712:	71f9      	strb	r1, [r7, #7]
   16714:	6878      	ldr	r0, [r7, #4]
   16716:	6118      	str	r0, [r3, #16]
   16718:	2100      	movs	r1, #0
   1671a:	f36f 0100 	bfc	r1, #0, #1
   1671e:	f36f 0141 	bfc	r1, #1, #1
   16722:	f36f 0182 	bfc	r1, #2, #1
   16726:	f36f 01c5 	bfc	r1, #3, #3
   1672a:	2301      	movs	r3, #1
   1672c:	f363 1188 	bfi	r1, r3, #6, #3
   16730:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   16734:	f363 2152 	bfi	r1, r3, #9, #10
   16738:	f36f 41de 	bfc	r1, #19, #12
   1673c:	f36f 71df 	bfc	r1, #31, #1
   16740:	2300      	movs	r3, #0
   16742:	4808      	ldr	r0, [pc, #32]	; (16764 <hci_disconn_complete+0xbc>)
   16744:	f00f f835 	bl	257b2 <z_impl_z_log_msg_static_create>
   16748:	46ad      	mov	sp, r5
		return;
   1674a:	e7b5      	b.n	166b8 <hci_disconn_complete+0x10>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   1674c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   16750:	e7cd      	b.n	166ee <hci_disconn_complete+0x46>
   16752:	f06f 041b 	mvn.w	r4, #27
   16756:	e7d6      	b.n	16706 <hci_disconn_complete+0x5e>
	bt_conn_unref(conn);
   16758:	4628      	mov	r0, r5
   1675a:	f010 f8a6 	bl	268aa <bt_conn_unref>
   1675e:	e7ab      	b.n	166b8 <hci_disconn_complete+0x10>
   16760:	0002c0f4 	.word	0x0002c0f4
   16764:	0002b17c 	.word	0x0002b17c

00016768 <le_phy_update_complete>:
{
   16768:	b5f0      	push	{r4, r5, r6, r7, lr}
   1676a:	b083      	sub	sp, #12
   1676c:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
   1676e:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16770:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   16774:	4620      	mov	r0, r4
   16776:	f003 fbd1 	bl	19f1c <bt_conn_lookup_handle>
	if (!conn) {
   1677a:	b120      	cbz	r0, 16786 <le_phy_update_complete+0x1e>
	bt_conn_unref(conn);
   1677c:	f010 f895 	bl	268aa <bt_conn_unref>
}
   16780:	370c      	adds	r7, #12
   16782:	46bd      	mov	sp, r7
   16784:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   16786:	466d      	mov	r5, sp
   16788:	b088      	sub	sp, #32
   1678a:	466b      	mov	r3, sp
   1678c:	f113 0210 	adds.w	r2, r3, #16
   16790:	d02f      	beq.n	167f2 <le_phy_update_complete+0x8a>
   16792:	210c      	movs	r1, #12
   16794:	b13a      	cbz	r2, 167a6 <le_phy_update_complete+0x3e>
   16796:	4608      	mov	r0, r1
   16798:	2904      	cmp	r1, #4
   1679a:	dd01      	ble.n	167a0 <le_phy_update_complete+0x38>
   1679c:	4e18      	ldr	r6, [pc, #96]	; (16800 <le_phy_update_complete+0x98>)
   1679e:	615e      	str	r6, [r3, #20]
   167a0:	2808      	cmp	r0, #8
   167a2:	dd00      	ble.n	167a6 <le_phy_update_complete+0x3e>
   167a4:	619c      	str	r4, [r3, #24]
   167a6:	290b      	cmp	r1, #11
   167a8:	dd26      	ble.n	167f8 <le_phy_update_complete+0x90>
   167aa:	240c      	movs	r4, #12
   167ac:	b13a      	cbz	r2, 167be <le_phy_update_complete+0x56>
   167ae:	2103      	movs	r1, #3
   167b0:	7139      	strb	r1, [r7, #4]
   167b2:	2100      	movs	r1, #0
   167b4:	7179      	strb	r1, [r7, #5]
   167b6:	71b9      	strb	r1, [r7, #6]
   167b8:	71f9      	strb	r1, [r7, #7]
   167ba:	6878      	ldr	r0, [r7, #4]
   167bc:	6118      	str	r0, [r3, #16]
   167be:	2100      	movs	r1, #0
   167c0:	f36f 0100 	bfc	r1, #0, #1
   167c4:	f36f 0141 	bfc	r1, #1, #1
   167c8:	f36f 0182 	bfc	r1, #2, #1
   167cc:	f36f 01c5 	bfc	r1, #3, #3
   167d0:	2301      	movs	r3, #1
   167d2:	f363 1188 	bfi	r1, r3, #6, #3
   167d6:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   167da:	f363 2152 	bfi	r1, r3, #9, #10
   167de:	f36f 41de 	bfc	r1, #19, #12
   167e2:	f36f 71df 	bfc	r1, #31, #1
   167e6:	2300      	movs	r3, #0
   167e8:	4806      	ldr	r0, [pc, #24]	; (16804 <le_phy_update_complete+0x9c>)
   167ea:	f00e ffe2 	bl	257b2 <z_impl_z_log_msg_static_create>
   167ee:	46ad      	mov	sp, r5
		return;
   167f0:	e7c6      	b.n	16780 <le_phy_update_complete+0x18>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   167f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   167f6:	e7cd      	b.n	16794 <le_phy_update_complete+0x2c>
   167f8:	f06f 041b 	mvn.w	r4, #27
   167fc:	e7d6      	b.n	167ac <le_phy_update_complete+0x44>
   167fe:	bf00      	nop
   16800:	0002c11c 	.word	0x0002c11c
   16804:	0002b17c 	.word	0x0002b17c

00016808 <le_data_len_change>:
{
   16808:	b5f0      	push	{r4, r5, r6, r7, lr}
   1680a:	b083      	sub	sp, #12
   1680c:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
   1680e:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16810:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   16812:	4620      	mov	r0, r4
   16814:	f003 fb82 	bl	19f1c <bt_conn_lookup_handle>
	if (!conn) {
   16818:	b120      	cbz	r0, 16824 <le_data_len_change+0x1c>
	bt_conn_unref(conn);
   1681a:	f010 f846 	bl	268aa <bt_conn_unref>
}
   1681e:	370c      	adds	r7, #12
   16820:	46bd      	mov	sp, r7
   16822:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   16824:	466d      	mov	r5, sp
   16826:	b088      	sub	sp, #32
   16828:	466b      	mov	r3, sp
   1682a:	f113 0210 	adds.w	r2, r3, #16
   1682e:	d02f      	beq.n	16890 <le_data_len_change+0x88>
   16830:	210c      	movs	r1, #12
   16832:	b13a      	cbz	r2, 16844 <le_data_len_change+0x3c>
   16834:	4608      	mov	r0, r1
   16836:	2904      	cmp	r1, #4
   16838:	dd01      	ble.n	1683e <le_data_len_change+0x36>
   1683a:	4e18      	ldr	r6, [pc, #96]	; (1689c <le_data_len_change+0x94>)
   1683c:	615e      	str	r6, [r3, #20]
   1683e:	2808      	cmp	r0, #8
   16840:	dd00      	ble.n	16844 <le_data_len_change+0x3c>
   16842:	619c      	str	r4, [r3, #24]
   16844:	290b      	cmp	r1, #11
   16846:	dd26      	ble.n	16896 <le_data_len_change+0x8e>
   16848:	240c      	movs	r4, #12
   1684a:	b13a      	cbz	r2, 1685c <le_data_len_change+0x54>
   1684c:	2103      	movs	r1, #3
   1684e:	7139      	strb	r1, [r7, #4]
   16850:	2100      	movs	r1, #0
   16852:	7179      	strb	r1, [r7, #5]
   16854:	71b9      	strb	r1, [r7, #6]
   16856:	71f9      	strb	r1, [r7, #7]
   16858:	6878      	ldr	r0, [r7, #4]
   1685a:	6118      	str	r0, [r3, #16]
   1685c:	2100      	movs	r1, #0
   1685e:	f36f 0100 	bfc	r1, #0, #1
   16862:	f36f 0141 	bfc	r1, #1, #1
   16866:	f36f 0182 	bfc	r1, #2, #1
   1686a:	f36f 01c5 	bfc	r1, #3, #3
   1686e:	2301      	movs	r3, #1
   16870:	f363 1188 	bfi	r1, r3, #6, #3
   16874:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   16878:	f363 2152 	bfi	r1, r3, #9, #10
   1687c:	f36f 41de 	bfc	r1, #19, #12
   16880:	f36f 71df 	bfc	r1, #31, #1
   16884:	2300      	movs	r3, #0
   16886:	4806      	ldr	r0, [pc, #24]	; (168a0 <le_data_len_change+0x98>)
   16888:	f00e ff93 	bl	257b2 <z_impl_z_log_msg_static_create>
   1688c:	46ad      	mov	sp, r5
		return;
   1688e:	e7c6      	b.n	1681e <le_data_len_change+0x16>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   16890:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   16894:	e7cd      	b.n	16832 <le_data_len_change+0x2a>
   16896:	f06f 041b 	mvn.w	r4, #27
   1689a:	e7d6      	b.n	1684a <le_data_len_change+0x42>
   1689c:	0002c11c 	.word	0x0002c11c
   168a0:	0002b17c 	.word	0x0002b17c

000168a4 <hci_num_completed_packets>:
{
   168a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168a8:	b089      	sub	sp, #36	; 0x24
   168aa:	af00      	add	r7, sp, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   168ac:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	for (i = 0; i < evt->num_handles; i++) {
   168b0:	2600      	movs	r6, #0
   168b2:	e09e      	b.n	169f2 <hci_num_completed_packets+0x14e>
			LOG_ERR("No connection for handle %u", handle);
   168b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   168b8:	e0b3      	b.n	16a22 <hci_num_completed_packets+0x17e>
   168ba:	f06f 011b 	mvn.w	r1, #27
   168be:	b13a      	cbz	r2, 168d0 <hci_num_completed_packets+0x2c>
   168c0:	2003      	movs	r0, #3
   168c2:	7138      	strb	r0, [r7, #4]
   168c4:	2000      	movs	r0, #0
   168c6:	7178      	strb	r0, [r7, #5]
   168c8:	71b8      	strb	r0, [r7, #6]
   168ca:	71f8      	strb	r0, [r7, #7]
   168cc:	6878      	ldr	r0, [r7, #4]
   168ce:	6118      	str	r0, [r3, #16]
   168d0:	f36f 0800 	bfc	r8, #0, #1
   168d4:	f36f 0841 	bfc	r8, #1, #1
   168d8:	f36f 0882 	bfc	r8, #2, #1
   168dc:	f36f 08c5 	bfc	r8, #3, #3
   168e0:	2301      	movs	r3, #1
   168e2:	f363 1888 	bfi	r8, r3, #6, #3
   168e6:	f401 717b 	and.w	r1, r1, #1004	; 0x3ec
   168ea:	f361 2852 	bfi	r8, r1, #9, #10
   168ee:	f36f 48de 	bfc	r8, #19, #12
   168f2:	f36f 78df 	bfc	r8, #31, #1
   168f6:	2300      	movs	r3, #0
   168f8:	4641      	mov	r1, r8
   168fa:	4856      	ldr	r0, [pc, #344]	; (16a54 <hci_num_completed_packets+0x1b0>)
   168fc:	f00e ff59 	bl	257b2 <z_impl_z_log_msg_static_create>
   16900:	46a5      	mov	sp, r4
			continue;
   16902:	e075      	b.n	169f0 <hci_num_completed_packets+0x14c>
			LOG_ERR("No connection for handle %u", handle);
   16904:	f06f 011b 	mvn.w	r1, #27
   16908:	e7d9      	b.n	168be <hci_num_completed_packets+0x1a>
				conn->pending_no_cb--;
   1690a:	3b01      	subs	r3, #1
   1690c:	61e3      	str	r3, [r4, #28]
   1690e:	f382 8811 	msr	BASEPRI, r2
   16912:	f3bf 8f6f 	isb	sy
				k_sem_give(bt_conn_get_pkts(conn));
   16916:	4620      	mov	r0, r4
   16918:	f002 ffd8 	bl	198cc <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   1691c:	f00c f92a 	bl	22b74 <z_impl_k_sem_give>
				continue;
   16920:	e024      	b.n	1696c <hci_num_completed_packets+0xc8>
   16922:	f382 8811 	msr	BASEPRI, r2
   16926:	f3bf 8f6f 	isb	sy
			if (!node) {
   1692a:	2b00      	cmp	r3, #0
   1692c:	d03b      	beq.n	169a6 <hci_num_completed_packets+0x102>
	__asm__ volatile(
   1692e:	f04f 0140 	mov.w	r1, #64	; 0x40
   16932:	f3ef 8211 	mrs	r2, BASEPRI
   16936:	f381 8812 	msr	BASEPRI_MAX, r1
   1693a:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   1693e:	68d9      	ldr	r1, [r3, #12]
   16940:	61e1      	str	r1, [r4, #28]
			tx->pending_no_cb = 0U;
   16942:	2100      	movs	r1, #0
   16944:	60d9      	str	r1, [r3, #12]
	parent->next = child;
   16946:	6019      	str	r1, [r3, #0]
	return list->tail;
   16948:	6a61      	ldr	r1, [r4, #36]	; 0x24
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   1694a:	2900      	cmp	r1, #0
   1694c:	d07a      	beq.n	16a44 <hci_num_completed_packets+0x1a0>
	parent->next = child;
   1694e:	600b      	str	r3, [r1, #0]
	list->tail = node;
   16950:	6263      	str	r3, [r4, #36]	; 0x24
	__asm__ volatile(
   16952:	f382 8811 	msr	BASEPRI, r2
   16956:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   1695a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1695e:	f00c fa8b 	bl	22e78 <k_work_submit>
			k_sem_give(bt_conn_get_pkts(conn));
   16962:	4620      	mov	r0, r4
   16964:	f002 ffb2 	bl	198cc <bt_conn_get_pkts>
   16968:	f00c f904 	bl	22b74 <z_impl_k_sem_give>
			LOG_ERR("No connection for handle %u", handle);
   1696c:	46ab      	mov	fp, r5
		while (count--) {
   1696e:	f10b 35ff 	add.w	r5, fp, #4294967295
   16972:	b2ad      	uxth	r5, r5
   16974:	f1bb 0f00 	cmp.w	fp, #0
   16978:	d037      	beq.n	169ea <hci_num_completed_packets+0x146>
	__asm__ volatile(
   1697a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1697e:	f3ef 8311 	mrs	r3, BASEPRI
   16982:	f382 8812 	msr	BASEPRI_MAX, r2
   16986:	f3bf 8f6f 	isb	sy
   1698a:	461a      	mov	r2, r3
			if (conn->pending_no_cb) {
   1698c:	69e3      	ldr	r3, [r4, #28]
   1698e:	2b00      	cmp	r3, #0
   16990:	d1bb      	bne.n	1690a <hci_num_completed_packets+0x66>
	return list->head;
   16992:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   16994:	2b00      	cmp	r3, #0
   16996:	d0c4      	beq.n	16922 <hci_num_completed_packets+0x7e>
	return node->next;
   16998:	6819      	ldr	r1, [r3, #0]
	list->head = node;
   1699a:	6161      	str	r1, [r4, #20]
	return list->tail;
   1699c:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1699e:	4283      	cmp	r3, r0
   169a0:	d1bf      	bne.n	16922 <hci_num_completed_packets+0x7e>
	list->tail = node;
   169a2:	61a1      	str	r1, [r4, #24]
}
   169a4:	e7bd      	b.n	16922 <hci_num_completed_packets+0x7e>
				LOG_ERR("packets count mismatch");
   169a6:	4b2c      	ldr	r3, [pc, #176]	; (16a58 <hci_num_completed_packets+0x1b4>)
   169a8:	61fb      	str	r3, [r7, #28]
   169aa:	2302      	movs	r3, #2
   169ac:	713b      	strb	r3, [r7, #4]
   169ae:	2300      	movs	r3, #0
   169b0:	717b      	strb	r3, [r7, #5]
   169b2:	71bb      	strb	r3, [r7, #6]
   169b4:	71fb      	strb	r3, [r7, #7]
   169b6:	687a      	ldr	r2, [r7, #4]
   169b8:	61ba      	str	r2, [r7, #24]
   169ba:	f363 0900 	bfi	r9, r3, #0, #1
   169be:	f363 0941 	bfi	r9, r3, #1, #1
   169c2:	f363 0982 	bfi	r9, r3, #2, #1
   169c6:	f363 09c5 	bfi	r9, r3, #3, #3
   169ca:	2201      	movs	r2, #1
   169cc:	f362 1988 	bfi	r9, r2, #6, #3
   169d0:	2208      	movs	r2, #8
   169d2:	f362 2952 	bfi	r9, r2, #9, #10
   169d6:	f363 49de 	bfi	r9, r3, #19, #12
   169da:	f363 79df 	bfi	r9, r3, #31, #1
   169de:	f107 0218 	add.w	r2, r7, #24
   169e2:	4649      	mov	r1, r9
   169e4:	481b      	ldr	r0, [pc, #108]	; (16a54 <hci_num_completed_packets+0x1b0>)
   169e6:	f00e fee4 	bl	257b2 <z_impl_z_log_msg_static_create>
		bt_conn_unref(conn);
   169ea:	4620      	mov	r0, r4
   169ec:	f00f ff5d 	bl	268aa <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   169f0:	3601      	adds	r6, #1
   169f2:	f89a 3000 	ldrb.w	r3, [sl]
   169f6:	429e      	cmp	r6, r3
   169f8:	da27      	bge.n	16a4a <hci_num_completed_packets+0x1a6>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   169fa:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
   169fe:	f8b3 5001 	ldrh.w	r5, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   16a02:	f8b3 b003 	ldrh.w	fp, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   16a06:	4628      	mov	r0, r5
   16a08:	f003 fa88 	bl	19f1c <bt_conn_lookup_handle>
		if (!conn) {
   16a0c:	4604      	mov	r4, r0
   16a0e:	2800      	cmp	r0, #0
   16a10:	d1ad      	bne.n	1696e <hci_num_completed_packets+0xca>
			LOG_ERR("No connection for handle %u", handle);
   16a12:	466c      	mov	r4, sp
   16a14:	b088      	sub	sp, #32
   16a16:	466b      	mov	r3, sp
   16a18:	f113 0210 	adds.w	r2, r3, #16
   16a1c:	f43f af4a 	beq.w	168b4 <hci_num_completed_packets+0x10>
   16a20:	210c      	movs	r1, #12
   16a22:	b152      	cbz	r2, 16a3a <hci_num_completed_packets+0x196>
   16a24:	4608      	mov	r0, r1
   16a26:	2904      	cmp	r1, #4
   16a28:	dd03      	ble.n	16a32 <hci_num_completed_packets+0x18e>
   16a2a:	f8df c030 	ldr.w	ip, [pc, #48]	; 16a5c <hci_num_completed_packets+0x1b8>
   16a2e:	f8c3 c014 	str.w	ip, [r3, #20]
   16a32:	2808      	cmp	r0, #8
   16a34:	f77f af41 	ble.w	168ba <hci_num_completed_packets+0x16>
   16a38:	619d      	str	r5, [r3, #24]
   16a3a:	290b      	cmp	r1, #11
   16a3c:	f77f af62 	ble.w	16904 <hci_num_completed_packets+0x60>
   16a40:	210c      	movs	r1, #12
   16a42:	e73c      	b.n	168be <hci_num_completed_packets+0x1a>
	list->tail = node;
   16a44:	6263      	str	r3, [r4, #36]	; 0x24
	list->head = node;
   16a46:	6223      	str	r3, [r4, #32]
}
   16a48:	e783      	b.n	16952 <hci_num_completed_packets+0xae>
}
   16a4a:	3724      	adds	r7, #36	; 0x24
   16a4c:	46bd      	mov	sp, r7
   16a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a52:	bf00      	nop
   16a54:	0002b17c 	.word	0x0002b17c
   16a58:	0002c15c 	.word	0x0002c15c
   16a5c:	0002c140 	.word	0x0002c140

00016a60 <hci_cmd_done>:
{
   16a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16a64:	b082      	sub	sp, #8
   16a66:	af00      	add	r7, sp, #0
   16a68:	4605      	mov	r5, r0
   16a6a:	460e      	mov	r6, r1
   16a6c:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   16a6e:	7a90      	ldrb	r0, [r2, #10]
   16a70:	f006 ffa0 	bl	1d9b4 <net_buf_pool_get>
   16a74:	4b75      	ldr	r3, [pc, #468]	; (16c4c <hci_cmd_done+0x1ec>)
   16a76:	4283      	cmp	r3, r0
   16a78:	d050      	beq.n	16b1c <hci_cmd_done+0xbc>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   16a7a:	f894 800a 	ldrb.w	r8, [r4, #10]
   16a7e:	4640      	mov	r0, r8
   16a80:	f006 ff98 	bl	1d9b4 <net_buf_pool_get>
   16a84:	466e      	mov	r6, sp
   16a86:	b08a      	sub	sp, #40	; 0x28
   16a88:	466b      	mov	r3, sp
   16a8a:	f113 0210 	adds.w	r2, r3, #16
   16a8e:	d03f      	beq.n	16b10 <hci_cmd_done+0xb0>
   16a90:	2418      	movs	r4, #24
   16a92:	b1a2      	cbz	r2, 16abe <hci_cmd_done+0x5e>
   16a94:	4621      	mov	r1, r4
   16a96:	2c04      	cmp	r4, #4
   16a98:	dd03      	ble.n	16aa2 <hci_cmd_done+0x42>
   16a9a:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 16c50 <hci_cmd_done+0x1f0>
   16a9e:	f8c3 c014 	str.w	ip, [r3, #20]
   16aa2:	2908      	cmp	r1, #8
   16aa4:	dd00      	ble.n	16aa8 <hci_cmd_done+0x48>
   16aa6:	619d      	str	r5, [r3, #24]
   16aa8:	290c      	cmp	r1, #12
   16aaa:	dd01      	ble.n	16ab0 <hci_cmd_done+0x50>
   16aac:	f8c3 801c 	str.w	r8, [r3, #28]
   16ab0:	2910      	cmp	r1, #16
   16ab2:	dd00      	ble.n	16ab6 <hci_cmd_done+0x56>
   16ab4:	6218      	str	r0, [r3, #32]
   16ab6:	2914      	cmp	r1, #20
   16ab8:	dd01      	ble.n	16abe <hci_cmd_done+0x5e>
   16aba:	4964      	ldr	r1, [pc, #400]	; (16c4c <hci_cmd_done+0x1ec>)
   16abc:	6259      	str	r1, [r3, #36]	; 0x24
   16abe:	2c17      	cmp	r4, #23
   16ac0:	dd29      	ble.n	16b16 <hci_cmd_done+0xb6>
   16ac2:	2418      	movs	r4, #24
   16ac4:	b13a      	cbz	r2, 16ad6 <hci_cmd_done+0x76>
   16ac6:	2106      	movs	r1, #6
   16ac8:	7139      	strb	r1, [r7, #4]
   16aca:	2100      	movs	r1, #0
   16acc:	7179      	strb	r1, [r7, #5]
   16ace:	71b9      	strb	r1, [r7, #6]
   16ad0:	71f9      	strb	r1, [r7, #7]
   16ad2:	6878      	ldr	r0, [r7, #4]
   16ad4:	6118      	str	r0, [r3, #16]
   16ad6:	2100      	movs	r1, #0
   16ad8:	f36f 0100 	bfc	r1, #0, #1
   16adc:	f36f 0141 	bfc	r1, #1, #1
   16ae0:	f36f 0182 	bfc	r1, #2, #1
   16ae4:	f36f 01c5 	bfc	r1, #3, #3
   16ae8:	2302      	movs	r3, #2
   16aea:	f363 1188 	bfi	r1, r3, #6, #3
   16aee:	f404 747f 	and.w	r4, r4, #1020	; 0x3fc
   16af2:	f364 2152 	bfi	r1, r4, #9, #10
   16af6:	f36f 41de 	bfc	r1, #19, #12
   16afa:	f36f 71df 	bfc	r1, #31, #1
   16afe:	2300      	movs	r3, #0
   16b00:	4854      	ldr	r0, [pc, #336]	; (16c54 <hci_cmd_done+0x1f4>)
   16b02:	f00e fe56 	bl	257b2 <z_impl_z_log_msg_static_create>
   16b06:	46b5      	mov	sp, r6
}
   16b08:	3708      	adds	r7, #8
   16b0a:	46bd      	mov	sp, r7
   16b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   16b10:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   16b14:	e7bd      	b.n	16a92 <hci_cmd_done+0x32>
   16b16:	f06f 041b 	mvn.w	r4, #27
   16b1a:	e7d3      	b.n	16ac4 <hci_cmd_done+0x64>
	if (cmd(buf)->opcode != opcode) {
   16b1c:	4620      	mov	r0, r4
   16b1e:	f011 fb11 	bl	28144 <net_buf_id>
   16b22:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16b26:	4b4c      	ldr	r3, [pc, #304]	; (16c58 <hci_cmd_done+0x1f8>)
   16b28:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   16b2c:	885b      	ldrh	r3, [r3, #2]
   16b2e:	429d      	cmp	r5, r3
   16b30:	d133      	bne.n	16b9a <hci_cmd_done+0x13a>
	if (bt_dev.sent_cmd) {
   16b32:	4b4a      	ldr	r3, [pc, #296]	; (16c5c <hci_cmd_done+0x1fc>)
   16b34:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   16b38:	b128      	cbz	r0, 16b46 <hci_cmd_done+0xe6>
		net_buf_unref(bt_dev.sent_cmd);
   16b3a:	f011 fbe7 	bl	2830c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   16b3e:	4b47      	ldr	r3, [pc, #284]	; (16c5c <hci_cmd_done+0x1fc>)
   16b40:	2200      	movs	r2, #0
   16b42:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   16b46:	4620      	mov	r0, r4
   16b48:	f011 fafc 	bl	28144 <net_buf_id>
   16b4c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16b50:	4b41      	ldr	r3, [pc, #260]	; (16c58 <hci_cmd_done+0x1f8>)
   16b52:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   16b56:	685b      	ldr	r3, [r3, #4]
   16b58:	b10b      	cbz	r3, 16b5e <hci_cmd_done+0xfe>
   16b5a:	2e00      	cmp	r6, #0
   16b5c:	d067      	beq.n	16c2e <hci_cmd_done+0x1ce>
	if (cmd(buf)->sync) {
   16b5e:	4620      	mov	r0, r4
   16b60:	f011 faf0 	bl	28144 <net_buf_id>
   16b64:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16b68:	4b3b      	ldr	r3, [pc, #236]	; (16c58 <hci_cmd_done+0x1f8>)
   16b6a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   16b6e:	689b      	ldr	r3, [r3, #8]
   16b70:	2b00      	cmp	r3, #0
   16b72:	d0c9      	beq.n	16b08 <hci_cmd_done+0xa8>
		cmd(buf)->status = status;
   16b74:	4620      	mov	r0, r4
   16b76:	f011 fae5 	bl	28144 <net_buf_id>
   16b7a:	4d37      	ldr	r5, [pc, #220]	; (16c58 <hci_cmd_done+0x1f8>)
   16b7c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16b80:	f805 6020 	strb.w	r6, [r5, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
   16b84:	4620      	mov	r0, r4
   16b86:	f011 fadd 	bl	28144 <net_buf_id>
   16b8a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16b8e:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   16b92:	68a8      	ldr	r0, [r5, #8]
   16b94:	f00b ffee 	bl	22b74 <z_impl_k_sem_give>
}
   16b98:	e7b6      	b.n	16b08 <hci_cmd_done+0xa8>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   16b9a:	4620      	mov	r0, r4
   16b9c:	f011 fad2 	bl	28144 <net_buf_id>
   16ba0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16ba4:	4b2c      	ldr	r3, [pc, #176]	; (16c58 <hci_cmd_done+0x1f8>)
   16ba6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   16baa:	885c      	ldrh	r4, [r3, #2]
   16bac:	466e      	mov	r6, sp
   16bae:	b088      	sub	sp, #32
   16bb0:	466b      	mov	r3, sp
   16bb2:	f113 0210 	adds.w	r2, r3, #16
   16bb6:	d034      	beq.n	16c22 <hci_cmd_done+0x1c2>
   16bb8:	2110      	movs	r1, #16
   16bba:	b162      	cbz	r2, 16bd6 <hci_cmd_done+0x176>
   16bbc:	4608      	mov	r0, r1
   16bbe:	2904      	cmp	r1, #4
   16bc0:	dd03      	ble.n	16bca <hci_cmd_done+0x16a>
   16bc2:	f8df c09c 	ldr.w	ip, [pc, #156]	; 16c60 <hci_cmd_done+0x200>
   16bc6:	f8c3 c014 	str.w	ip, [r3, #20]
   16bca:	2808      	cmp	r0, #8
   16bcc:	dd00      	ble.n	16bd0 <hci_cmd_done+0x170>
   16bce:	619d      	str	r5, [r3, #24]
   16bd0:	280c      	cmp	r0, #12
   16bd2:	dd00      	ble.n	16bd6 <hci_cmd_done+0x176>
   16bd4:	61dc      	str	r4, [r3, #28]
   16bd6:	290f      	cmp	r1, #15
   16bd8:	dd26      	ble.n	16c28 <hci_cmd_done+0x1c8>
   16bda:	2410      	movs	r4, #16
   16bdc:	b13a      	cbz	r2, 16bee <hci_cmd_done+0x18e>
   16bde:	2104      	movs	r1, #4
   16be0:	7139      	strb	r1, [r7, #4]
   16be2:	2100      	movs	r1, #0
   16be4:	7179      	strb	r1, [r7, #5]
   16be6:	71b9      	strb	r1, [r7, #6]
   16be8:	71f9      	strb	r1, [r7, #7]
   16bea:	6878      	ldr	r0, [r7, #4]
   16bec:	6118      	str	r0, [r3, #16]
   16bee:	2100      	movs	r1, #0
   16bf0:	f36f 0100 	bfc	r1, #0, #1
   16bf4:	f36f 0141 	bfc	r1, #1, #1
   16bf8:	f36f 0182 	bfc	r1, #2, #1
   16bfc:	f36f 01c5 	bfc	r1, #3, #3
   16c00:	2302      	movs	r3, #2
   16c02:	f363 1188 	bfi	r1, r3, #6, #3
   16c06:	f404 737d 	and.w	r3, r4, #1012	; 0x3f4
   16c0a:	f363 2152 	bfi	r1, r3, #9, #10
   16c0e:	f36f 41de 	bfc	r1, #19, #12
   16c12:	f36f 71df 	bfc	r1, #31, #1
   16c16:	2300      	movs	r3, #0
   16c18:	480e      	ldr	r0, [pc, #56]	; (16c54 <hci_cmd_done+0x1f4>)
   16c1a:	f00e fdca 	bl	257b2 <z_impl_z_log_msg_static_create>
   16c1e:	46b5      	mov	sp, r6
		return;
   16c20:	e772      	b.n	16b08 <hci_cmd_done+0xa8>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   16c22:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   16c26:	e7c8      	b.n	16bba <hci_cmd_done+0x15a>
   16c28:	f06f 041b 	mvn.w	r4, #27
   16c2c:	e7d6      	b.n	16bdc <hci_cmd_done+0x17c>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   16c2e:	4620      	mov	r0, r4
   16c30:	f011 fa88 	bl	28144 <net_buf_id>
   16c34:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16c38:	4b07      	ldr	r3, [pc, #28]	; (16c58 <hci_cmd_done+0x1f8>)
   16c3a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   16c3e:	685b      	ldr	r3, [r3, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   16c40:	7a1a      	ldrb	r2, [r3, #8]
   16c42:	6859      	ldr	r1, [r3, #4]
   16c44:	6818      	ldr	r0, [r3, #0]
   16c46:	f00f fb2c 	bl	262a2 <atomic_set_bit_to>
   16c4a:	e788      	b.n	16b5e <hci_cmd_done+0xfe>
   16c4c:	20000ae4 	.word	0x20000ae4
   16c50:	0002c174 	.word	0x0002c174
   16c54:	0002b17c 	.word	0x0002b17c
   16c58:	20005764 	.word	0x20005764
   16c5c:	20000370 	.word	0x20000370
   16c60:	0002c1ac 	.word	0x0002c1ac

00016c64 <le_remote_feat_complete>:
{
   16c64:	b5f0      	push	{r4, r5, r6, r7, lr}
   16c66:	b083      	sub	sp, #12
   16c68:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   16c6a:	68c4      	ldr	r4, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16c6c:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
   16c70:	4630      	mov	r0, r6
   16c72:	f003 f953 	bl	19f1c <bt_conn_lookup_handle>
	if (!conn) {
   16c76:	b1b0      	cbz	r0, 16ca6 <le_remote_feat_complete+0x42>
   16c78:	4605      	mov	r5, r0
	if (!evt->status) {
   16c7a:	7823      	ldrb	r3, [r4, #0]
   16c7c:	2b00      	cmp	r3, #0
   16c7e:	d04e      	beq.n	16d1e <le_remote_feat_complete+0xba>
	atomic_set_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH);
   16c80:	1d2b      	adds	r3, r5, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16c82:	f3bf 8f5b 	dmb	ish
   16c86:	e853 1f00 	ldrex	r1, [r3]
   16c8a:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
   16c8e:	e843 1200 	strex	r2, r1, [r3]
   16c92:	2a00      	cmp	r2, #0
   16c94:	d1f7      	bne.n	16c86 <le_remote_feat_complete+0x22>
   16c96:	f3bf 8f5b 	dmb	ish
	bt_conn_unref(conn);
   16c9a:	4628      	mov	r0, r5
   16c9c:	f00f fe05 	bl	268aa <bt_conn_unref>
}
   16ca0:	370c      	adds	r7, #12
   16ca2:	46bd      	mov	sp, r7
   16ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   16ca6:	466d      	mov	r5, sp
   16ca8:	b088      	sub	sp, #32
   16caa:	466b      	mov	r3, sp
   16cac:	f113 0210 	adds.w	r2, r3, #16
   16cb0:	d02f      	beq.n	16d12 <le_remote_feat_complete+0xae>
   16cb2:	210c      	movs	r1, #12
   16cb4:	b13a      	cbz	r2, 16cc6 <le_remote_feat_complete+0x62>
   16cb6:	4608      	mov	r0, r1
   16cb8:	2904      	cmp	r1, #4
   16cba:	dd01      	ble.n	16cc0 <le_remote_feat_complete+0x5c>
   16cbc:	4c1b      	ldr	r4, [pc, #108]	; (16d2c <le_remote_feat_complete+0xc8>)
   16cbe:	615c      	str	r4, [r3, #20]
   16cc0:	2808      	cmp	r0, #8
   16cc2:	dd00      	ble.n	16cc6 <le_remote_feat_complete+0x62>
   16cc4:	619e      	str	r6, [r3, #24]
   16cc6:	290b      	cmp	r1, #11
   16cc8:	dd26      	ble.n	16d18 <le_remote_feat_complete+0xb4>
   16cca:	240c      	movs	r4, #12
   16ccc:	b13a      	cbz	r2, 16cde <le_remote_feat_complete+0x7a>
   16cce:	2103      	movs	r1, #3
   16cd0:	7139      	strb	r1, [r7, #4]
   16cd2:	2100      	movs	r1, #0
   16cd4:	7179      	strb	r1, [r7, #5]
   16cd6:	71b9      	strb	r1, [r7, #6]
   16cd8:	71f9      	strb	r1, [r7, #7]
   16cda:	6878      	ldr	r0, [r7, #4]
   16cdc:	6118      	str	r0, [r3, #16]
   16cde:	2100      	movs	r1, #0
   16ce0:	f36f 0100 	bfc	r1, #0, #1
   16ce4:	f36f 0141 	bfc	r1, #1, #1
   16ce8:	f36f 0182 	bfc	r1, #2, #1
   16cec:	f36f 01c5 	bfc	r1, #3, #3
   16cf0:	2301      	movs	r3, #1
   16cf2:	f363 1188 	bfi	r1, r3, #6, #3
   16cf6:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   16cfa:	f364 2152 	bfi	r1, r4, #9, #10
   16cfe:	f36f 41de 	bfc	r1, #19, #12
   16d02:	f36f 71df 	bfc	r1, #31, #1
   16d06:	2300      	movs	r3, #0
   16d08:	4809      	ldr	r0, [pc, #36]	; (16d30 <le_remote_feat_complete+0xcc>)
   16d0a:	f00e fd52 	bl	257b2 <z_impl_z_log_msg_static_create>
   16d0e:	46ad      	mov	sp, r5
		return;
   16d10:	e7c6      	b.n	16ca0 <le_remote_feat_complete+0x3c>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   16d12:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   16d16:	e7cd      	b.n	16cb4 <le_remote_feat_complete+0x50>
   16d18:	f06f 041b 	mvn.w	r4, #27
   16d1c:	e7d6      	b.n	16ccc <le_remote_feat_complete+0x68>
		memcpy(conn->le.features, evt->features,
   16d1e:	2208      	movs	r2, #8
   16d20:	1ce1      	adds	r1, r4, #3
   16d22:	30ac      	adds	r0, #172	; 0xac
   16d24:	f00f f97f 	bl	26026 <memcpy>
   16d28:	e7aa      	b.n	16c80 <le_remote_feat_complete+0x1c>
   16d2a:	bf00      	nop
   16d2c:	0002c11c 	.word	0x0002c11c
   16d30:	0002b17c 	.word	0x0002b17c

00016d34 <hci_cmd_status>:
{
   16d34:	b538      	push	{r3, r4, r5, lr}
   16d36:	4604      	mov	r4, r0
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   16d38:	2104      	movs	r1, #4
   16d3a:	300c      	adds	r0, #12
   16d3c:	f011 fb4e 	bl	283dc <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   16d40:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   16d42:	4622      	mov	r2, r4
   16d44:	7801      	ldrb	r1, [r0, #0]
   16d46:	8840      	ldrh	r0, [r0, #2]
   16d48:	f7ff fe8a 	bl	16a60 <hci_cmd_done>
	if (ncmd) {
   16d4c:	b905      	cbnz	r5, 16d50 <hci_cmd_status+0x1c>
}
   16d4e:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
   16d50:	4801      	ldr	r0, [pc, #4]	; (16d58 <hci_cmd_status+0x24>)
   16d52:	f00b ff0f 	bl	22b74 <z_impl_k_sem_give>
   16d56:	e7fa      	b.n	16d4e <hci_cmd_status+0x1a>
   16d58:	20000488 	.word	0x20000488

00016d5c <hci_cmd_complete>:
{
   16d5c:	b538      	push	{r3, r4, r5, lr}
   16d5e:	4604      	mov	r4, r0
   16d60:	2103      	movs	r1, #3
   16d62:	300c      	adds	r0, #12
   16d64:	f011 fb3a 	bl	283dc <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   16d68:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
   16d6a:	68e3      	ldr	r3, [r4, #12]
	hci_cmd_done(opcode, status, buf);
   16d6c:	4622      	mov	r2, r4
   16d6e:	7819      	ldrb	r1, [r3, #0]
   16d70:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   16d74:	f7ff fe74 	bl	16a60 <hci_cmd_done>
	if (ncmd) {
   16d78:	b905      	cbnz	r5, 16d7c <hci_cmd_complete+0x20>
}
   16d7a:	bd38      	pop	{r3, r4, r5, pc}
   16d7c:	4801      	ldr	r0, [pc, #4]	; (16d84 <hci_cmd_complete+0x28>)
   16d7e:	f00b fef9 	bl	22b74 <z_impl_k_sem_give>
   16d82:	e7fa      	b.n	16d7a <hci_cmd_complete+0x1e>
   16d84:	20000488 	.word	0x20000488

00016d88 <hci_hardware_error>:
{
   16d88:	b5b0      	push	{r4, r5, r7, lr}
   16d8a:	b082      	sub	sp, #8
   16d8c:	af00      	add	r7, sp, #0
   16d8e:	2101      	movs	r1, #1
   16d90:	300c      	adds	r0, #12
   16d92:	f011 fb23 	bl	283dc <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   16d96:	7804      	ldrb	r4, [r0, #0]
   16d98:	b088      	sub	sp, #32
   16d9a:	466b      	mov	r3, sp
   16d9c:	f113 0210 	adds.w	r2, r3, #16
   16da0:	d031      	beq.n	16e06 <hci_hardware_error+0x7e>
   16da2:	210c      	movs	r1, #12
   16da4:	b13a      	cbz	r2, 16db6 <hci_hardware_error+0x2e>
   16da6:	4608      	mov	r0, r1
   16da8:	2904      	cmp	r1, #4
   16daa:	dd01      	ble.n	16db0 <hci_hardware_error+0x28>
   16dac:	4d19      	ldr	r5, [pc, #100]	; (16e14 <hci_hardware_error+0x8c>)
   16dae:	615d      	str	r5, [r3, #20]
   16db0:	2808      	cmp	r0, #8
   16db2:	dd00      	ble.n	16db6 <hci_hardware_error+0x2e>
   16db4:	619c      	str	r4, [r3, #24]
   16db6:	290b      	cmp	r1, #11
   16db8:	dd28      	ble.n	16e0c <hci_hardware_error+0x84>
   16dba:	f04f 0c0c 	mov.w	ip, #12
   16dbe:	b13a      	cbz	r2, 16dd0 <hci_hardware_error+0x48>
   16dc0:	2103      	movs	r1, #3
   16dc2:	7139      	strb	r1, [r7, #4]
   16dc4:	2100      	movs	r1, #0
   16dc6:	7179      	strb	r1, [r7, #5]
   16dc8:	71b9      	strb	r1, [r7, #6]
   16dca:	71f9      	strb	r1, [r7, #7]
   16dcc:	6878      	ldr	r0, [r7, #4]
   16dce:	6118      	str	r0, [r3, #16]
   16dd0:	2100      	movs	r1, #0
   16dd2:	f36f 0100 	bfc	r1, #0, #1
   16dd6:	f36f 0141 	bfc	r1, #1, #1
   16dda:	f36f 0182 	bfc	r1, #2, #1
   16dde:	f36f 01c5 	bfc	r1, #3, #3
   16de2:	2301      	movs	r3, #1
   16de4:	f363 1188 	bfi	r1, r3, #6, #3
   16de8:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   16dec:	f36c 2152 	bfi	r1, ip, #9, #10
   16df0:	f36f 41de 	bfc	r1, #19, #12
   16df4:	f36f 71df 	bfc	r1, #31, #1
   16df8:	2300      	movs	r3, #0
   16dfa:	4807      	ldr	r0, [pc, #28]	; (16e18 <hci_hardware_error+0x90>)
   16dfc:	f00e fcd9 	bl	257b2 <z_impl_z_log_msg_static_create>
}
   16e00:	3708      	adds	r7, #8
   16e02:	46bd      	mov	sp, r7
   16e04:	bdb0      	pop	{r4, r5, r7, pc}
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   16e06:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   16e0a:	e7cb      	b.n	16da4 <hci_hardware_error+0x1c>
   16e0c:	f06f 0c1b 	mvn.w	ip, #27
   16e10:	e7d5      	b.n	16dbe <hci_hardware_error+0x36>
   16e12:	bf00      	nop
   16e14:	0002c1e0 	.word	0x0002c1e0
   16e18:	0002b17c 	.word	0x0002b17c

00016e1c <handle_event>:
{
   16e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16e20:	b082      	sub	sp, #8
   16e22:	af00      	add	r7, sp, #0
   16e24:	4605      	mov	r5, r0
   16e26:	460c      	mov	r4, r1
	err = handle_event_common(event, buf, handlers, num_handlers);
   16e28:	f7ff fbc6 	bl	165b8 <handle_event_common>
	if (err == -EOPNOTSUPP) {
   16e2c:	f110 0f5f 	cmn.w	r0, #95	; 0x5f
   16e30:	d003      	beq.n	16e3a <handle_event+0x1e>
}
   16e32:	3708      	adds	r7, #8
   16e34:	46bd      	mov	sp, r7
   16e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   16e3a:	f8b4 8010 	ldrh.w	r8, [r4, #16]
   16e3e:	4641      	mov	r1, r8
   16e40:	68e0      	ldr	r0, [r4, #12]
   16e42:	f7ff f935 	bl	160b0 <bt_hex>
   16e46:	466e      	mov	r6, sp
   16e48:	2302      	movs	r3, #2
   16e4a:	713b      	strb	r3, [r7, #4]
   16e4c:	2304      	movs	r3, #4
   16e4e:	717b      	strb	r3, [r7, #5]
   16e50:	b08a      	sub	sp, #40	; 0x28
   16e52:	466c      	mov	r4, sp
   16e54:	f114 0210 	adds.w	r2, r4, #16
   16e58:	d01c      	beq.n	16e94 <handle_event+0x78>
   16e5a:	f04f 0c16 	mov.w	ip, #22
   16e5e:	b162      	cbz	r2, 16e7a <handle_event+0x5e>
   16e60:	4663      	mov	r3, ip
   16e62:	f1bc 0f04 	cmp.w	ip, #4
   16e66:	dd01      	ble.n	16e6c <handle_event+0x50>
   16e68:	4926      	ldr	r1, [pc, #152]	; (16f04 <handle_event+0xe8>)
   16e6a:	6161      	str	r1, [r4, #20]
   16e6c:	2b08      	cmp	r3, #8
   16e6e:	dd00      	ble.n	16e72 <handle_event+0x56>
   16e70:	61a5      	str	r5, [r4, #24]
   16e72:	2b0c      	cmp	r3, #12
   16e74:	dd01      	ble.n	16e7a <handle_event+0x5e>
   16e76:	f8c4 801c 	str.w	r8, [r4, #28]
   16e7a:	2302      	movs	r3, #2
   16e7c:	703b      	strb	r3, [r7, #0]
   16e7e:	2304      	movs	r3, #4
   16e80:	707b      	strb	r3, [r7, #1]
   16e82:	b1a2      	cbz	r2, 16eae <handle_event+0x92>
   16e84:	f1bc 0f10 	cmp.w	ip, #16
   16e88:	dd00      	ble.n	16e8c <handle_event+0x70>
   16e8a:	6220      	str	r0, [r4, #32]
   16e8c:	f104 0324 	add.w	r3, r4, #36	; 0x24
   16e90:	2100      	movs	r1, #0
   16e92:	e00a      	b.n	16eaa <handle_event+0x8e>
   16e94:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   16e98:	e7e1      	b.n	16e5e <handle_event+0x42>
   16e9a:	f101 0008 	add.w	r0, r1, #8
   16e9e:	4438      	add	r0, r7
   16ea0:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   16ea4:	f803 0b01 	strb.w	r0, [r3], #1
   16ea8:	3101      	adds	r1, #1
   16eaa:	2901      	cmp	r1, #1
   16eac:	d9f5      	bls.n	16e9a <handle_event+0x7e>
   16eae:	f1bc 0f15 	cmp.w	ip, #21
   16eb2:	dd24      	ble.n	16efe <handle_event+0xe2>
   16eb4:	2316      	movs	r3, #22
   16eb6:	b142      	cbz	r2, 16eca <handle_event+0xae>
   16eb8:	2105      	movs	r1, #5
   16eba:	7139      	strb	r1, [r7, #4]
   16ebc:	2100      	movs	r1, #0
   16ebe:	7179      	strb	r1, [r7, #5]
   16ec0:	71b9      	strb	r1, [r7, #6]
   16ec2:	2101      	movs	r1, #1
   16ec4:	71f9      	strb	r1, [r7, #7]
   16ec6:	6878      	ldr	r0, [r7, #4]
   16ec8:	6120      	str	r0, [r4, #16]
   16eca:	2100      	movs	r1, #0
   16ecc:	f36f 0100 	bfc	r1, #0, #1
   16ed0:	f36f 0141 	bfc	r1, #1, #1
   16ed4:	f36f 0182 	bfc	r1, #2, #1
   16ed8:	f36f 01c5 	bfc	r1, #3, #3
   16edc:	2002      	movs	r0, #2
   16ede:	f360 1188 	bfi	r1, r0, #6, #3
   16ee2:	f3c3 0309 	ubfx	r3, r3, #0, #10
   16ee6:	f363 2152 	bfi	r1, r3, #9, #10
   16eea:	f36f 41de 	bfc	r1, #19, #12
   16eee:	f36f 71df 	bfc	r1, #31, #1
   16ef2:	2300      	movs	r3, #0
   16ef4:	4804      	ldr	r0, [pc, #16]	; (16f08 <handle_event+0xec>)
   16ef6:	f00e fc5c 	bl	257b2 <z_impl_z_log_msg_static_create>
   16efa:	46b5      	mov	sp, r6
}
   16efc:	e799      	b.n	16e32 <handle_event+0x16>
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   16efe:	f06f 031b 	mvn.w	r3, #27
   16f02:	e7d8      	b.n	16eb6 <handle_event+0x9a>
   16f04:	0002c204 	.word	0x0002c204
   16f08:	0002b17c 	.word	0x0002b17c

00016f0c <hci_event>:
{
   16f0c:	b538      	push	{r3, r4, r5, lr}
   16f0e:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   16f10:	8a03      	ldrh	r3, [r0, #16]
   16f12:	2b01      	cmp	r3, #1
   16f14:	d915      	bls.n	16f42 <hci_event+0x36>
   16f16:	2102      	movs	r1, #2
   16f18:	f104 000c 	add.w	r0, r4, #12
   16f1c:	f011 fa5e 	bl	283dc <net_buf_simple_pull_mem>
   16f20:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   16f22:	7800      	ldrb	r0, [r0, #0]
   16f24:	f00f f980 	bl	26228 <bt_hci_evt_get_flags>
   16f28:	f010 0f02 	tst.w	r0, #2
   16f2c:	d017      	beq.n	16f5e <hci_event+0x52>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   16f2e:	2304      	movs	r3, #4
   16f30:	4a12      	ldr	r2, [pc, #72]	; (16f7c <hci_event+0x70>)
   16f32:	4621      	mov	r1, r4
   16f34:	7828      	ldrb	r0, [r5, #0]
   16f36:	f7ff ff71 	bl	16e1c <handle_event>
	net_buf_unref(buf);
   16f3a:	4620      	mov	r0, r4
   16f3c:	f011 f9e6 	bl	2830c <net_buf_unref>
}
   16f40:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   16f42:	f640 136d 	movw	r3, #2413	; 0x96d
   16f46:	4a0e      	ldr	r2, [pc, #56]	; (16f80 <hci_event+0x74>)
   16f48:	490e      	ldr	r1, [pc, #56]	; (16f84 <hci_event+0x78>)
   16f4a:	480f      	ldr	r0, [pc, #60]	; (16f88 <hci_event+0x7c>)
   16f4c:	f00e f918 	bl	25180 <assert_print>
   16f50:	4040      	eors	r0, r0
   16f52:	f380 8811 	msr	BASEPRI, r0
   16f56:	f04f 0003 	mov.w	r0, #3
   16f5a:	df02      	svc	2
   16f5c:	e7db      	b.n	16f16 <hci_event+0xa>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   16f5e:	f640 1371 	movw	r3, #2417	; 0x971
   16f62:	4a07      	ldr	r2, [pc, #28]	; (16f80 <hci_event+0x74>)
   16f64:	4909      	ldr	r1, [pc, #36]	; (16f8c <hci_event+0x80>)
   16f66:	4808      	ldr	r0, [pc, #32]	; (16f88 <hci_event+0x7c>)
   16f68:	f00e f90a 	bl	25180 <assert_print>
   16f6c:	4040      	eors	r0, r0
   16f6e:	f380 8811 	msr	BASEPRI, r0
   16f72:	f04f 0003 	mov.w	r0, #3
   16f76:	df02      	svc	2
   16f78:	e7d9      	b.n	16f2e <hci_event+0x22>
   16f7a:	bf00      	nop
   16f7c:	0002c67c 	.word	0x0002c67c
   16f80:	0002c228 	.word	0x0002c228
   16f84:	0002c25c 	.word	0x0002c25c
   16f88:	0002c278 	.word	0x0002c278
   16f8c:	0002c298 	.word	0x0002c298

00016f90 <hci_le_meta_event>:
{
   16f90:	b510      	push	{r4, lr}
   16f92:	4604      	mov	r4, r0
   16f94:	2101      	movs	r1, #1
   16f96:	300c      	adds	r0, #12
   16f98:	f011 fa20 	bl	283dc <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   16f9c:	2308      	movs	r3, #8
   16f9e:	4a03      	ldr	r2, [pc, #12]	; (16fac <hci_le_meta_event+0x1c>)
   16fa0:	4621      	mov	r1, r4
   16fa2:	7800      	ldrb	r0, [r0, #0]
   16fa4:	f7ff ff3a 	bl	16e1c <handle_event>
}
   16fa8:	bd10      	pop	{r4, pc}
   16faa:	bf00      	nop
   16fac:	0002c69c 	.word	0x0002c69c

00016fb0 <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
   16fb0:	b5b0      	push	{r4, r5, r7, lr}
   16fb2:	b082      	sub	sp, #8
   16fb4:	af00      	add	r7, sp, #0
   16fb6:	4601      	mov	r1, r0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   16fb8:	4824      	ldr	r0, [pc, #144]	; (1704c <rx_queue_put+0x9c>)
   16fba:	f011 f975 	bl	282a8 <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   16fbe:	4924      	ldr	r1, [pc, #144]	; (17050 <rx_queue_put+0xa0>)
   16fc0:	4824      	ldr	r0, [pc, #144]	; (17054 <rx_queue_put+0xa4>)
   16fc2:	f013 fa39 	bl	2a438 <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
   16fc6:	2800      	cmp	r0, #0
   16fc8:	db02      	blt.n	16fd0 <rx_queue_put+0x20>
		LOG_ERR("Could not submit rx_work: %d", err);
	}
}
   16fca:	3708      	adds	r7, #8
   16fcc:	46bd      	mov	sp, r7
   16fce:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("Could not submit rx_work: %d", err);
   16fd0:	466c      	mov	r4, sp
   16fd2:	b088      	sub	sp, #32
   16fd4:	466b      	mov	r3, sp
   16fd6:	f113 0210 	adds.w	r2, r3, #16
   16fda:	d031      	beq.n	17040 <rx_queue_put+0x90>
   16fdc:	210c      	movs	r1, #12
   16fde:	b142      	cbz	r2, 16ff2 <rx_queue_put+0x42>
   16fe0:	468c      	mov	ip, r1
   16fe2:	2904      	cmp	r1, #4
   16fe4:	dd01      	ble.n	16fea <rx_queue_put+0x3a>
   16fe6:	4d1c      	ldr	r5, [pc, #112]	; (17058 <rx_queue_put+0xa8>)
   16fe8:	615d      	str	r5, [r3, #20]
   16fea:	f1bc 0f08 	cmp.w	ip, #8
   16fee:	dd00      	ble.n	16ff2 <rx_queue_put+0x42>
   16ff0:	6198      	str	r0, [r3, #24]
   16ff2:	290b      	cmp	r1, #11
   16ff4:	dd27      	ble.n	17046 <rx_queue_put+0x96>
   16ff6:	f04f 0c0c 	mov.w	ip, #12
   16ffa:	b13a      	cbz	r2, 1700c <rx_queue_put+0x5c>
   16ffc:	2103      	movs	r1, #3
   16ffe:	7139      	strb	r1, [r7, #4]
   17000:	2100      	movs	r1, #0
   17002:	7179      	strb	r1, [r7, #5]
   17004:	71b9      	strb	r1, [r7, #6]
   17006:	71f9      	strb	r1, [r7, #7]
   17008:	6878      	ldr	r0, [r7, #4]
   1700a:	6118      	str	r0, [r3, #16]
   1700c:	2100      	movs	r1, #0
   1700e:	f36f 0100 	bfc	r1, #0, #1
   17012:	f36f 0141 	bfc	r1, #1, #1
   17016:	f36f 0182 	bfc	r1, #2, #1
   1701a:	f36f 01c5 	bfc	r1, #3, #3
   1701e:	2301      	movs	r3, #1
   17020:	f363 1188 	bfi	r1, r3, #6, #3
   17024:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   17028:	f36c 2152 	bfi	r1, ip, #9, #10
   1702c:	f36f 41de 	bfc	r1, #19, #12
   17030:	f36f 71df 	bfc	r1, #31, #1
   17034:	2300      	movs	r3, #0
   17036:	4809      	ldr	r0, [pc, #36]	; (1705c <rx_queue_put+0xac>)
   17038:	f00e fbbb 	bl	257b2 <z_impl_z_log_msg_static_create>
   1703c:	46a5      	mov	sp, r4
}
   1703e:	e7c4      	b.n	16fca <rx_queue_put+0x1a>
		LOG_ERR("Could not submit rx_work: %d", err);
   17040:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17044:	e7cb      	b.n	16fde <rx_queue_put+0x2e>
   17046:	f06f 0c1b 	mvn.w	ip, #27
   1704a:	e7d6      	b.n	16ffa <rx_queue_put+0x4a>
   1704c:	200004a4 	.word	0x200004a4
   17050:	20000728 	.word	0x20000728
   17054:	20002008 	.word	0x20002008
   17058:	0002c2c8 	.word	0x0002c2c8
   1705c:	0002b17c 	.word	0x0002b17c

00017060 <hci_acl>:
{
   17060:	b5f0      	push	{r4, r5, r6, r7, lr}
   17062:	b083      	sub	sp, #12
   17064:	af00      	add	r7, sp, #0
   17066:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17068:	8a03      	ldrh	r3, [r0, #16]
   1706a:	2b03      	cmp	r3, #3
   1706c:	d952      	bls.n	17114 <hci_acl+0xb4>
   1706e:	2104      	movs	r1, #4
   17070:	f104 000c 	add.w	r0, r4, #12
   17074:	f011 f9b2 	bl	283dc <net_buf_simple_pull_mem>
	len = sys_le16_to_cpu(hdr->len);
   17078:	8846      	ldrh	r6, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   1707a:	8800      	ldrh	r0, [r0, #0]
	flags = bt_acl_flags(handle);
   1707c:	0b05      	lsrs	r5, r0, #12
	acl(buf)->handle = bt_acl_handle(handle);
   1707e:	f3c0 000b 	ubfx	r0, r0, #0, #12
   17082:	8360      	strh	r0, [r4, #26]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   17084:	23ff      	movs	r3, #255	; 0xff
   17086:	7663      	strb	r3, [r4, #25]
	if (buf->len != len) {
   17088:	f8b4 c010 	ldrh.w	ip, [r4, #16]
   1708c:	45b4      	cmp	ip, r6
   1708e:	d055      	beq.n	1713c <hci_acl+0xdc>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   17090:	466d      	mov	r5, sp
   17092:	b088      	sub	sp, #32
   17094:	466b      	mov	r3, sp
   17096:	f113 0210 	adds.w	r2, r3, #16
   1709a:	d049      	beq.n	17130 <hci_acl+0xd0>
   1709c:	2110      	movs	r1, #16
   1709e:	b16a      	cbz	r2, 170bc <hci_acl+0x5c>
   170a0:	4608      	mov	r0, r1
   170a2:	2904      	cmp	r1, #4
   170a4:	dd03      	ble.n	170ae <hci_acl+0x4e>
   170a6:	f8df e138 	ldr.w	lr, [pc, #312]	; 171e0 <hci_acl+0x180>
   170aa:	f8c3 e014 	str.w	lr, [r3, #20]
   170ae:	2808      	cmp	r0, #8
   170b0:	dd01      	ble.n	170b6 <hci_acl+0x56>
   170b2:	f8c3 c018 	str.w	ip, [r3, #24]
   170b6:	280c      	cmp	r0, #12
   170b8:	dd00      	ble.n	170bc <hci_acl+0x5c>
   170ba:	61de      	str	r6, [r3, #28]
   170bc:	290f      	cmp	r1, #15
   170be:	dd3a      	ble.n	17136 <hci_acl+0xd6>
   170c0:	f04f 0c10 	mov.w	ip, #16
   170c4:	b13a      	cbz	r2, 170d6 <hci_acl+0x76>
   170c6:	2104      	movs	r1, #4
   170c8:	7139      	strb	r1, [r7, #4]
   170ca:	2100      	movs	r1, #0
   170cc:	7179      	strb	r1, [r7, #5]
   170ce:	71b9      	strb	r1, [r7, #6]
   170d0:	71f9      	strb	r1, [r7, #7]
   170d2:	6878      	ldr	r0, [r7, #4]
   170d4:	6118      	str	r0, [r3, #16]
   170d6:	2100      	movs	r1, #0
   170d8:	f36f 0100 	bfc	r1, #0, #1
   170dc:	f36f 0141 	bfc	r1, #1, #1
   170e0:	f36f 0182 	bfc	r1, #2, #1
   170e4:	f36f 01c5 	bfc	r1, #3, #3
   170e8:	2301      	movs	r3, #1
   170ea:	f363 1188 	bfi	r1, r3, #6, #3
   170ee:	f40c 7c7d 	and.w	ip, ip, #1012	; 0x3f4
   170f2:	f36c 2152 	bfi	r1, ip, #9, #10
   170f6:	f36f 41de 	bfc	r1, #19, #12
   170fa:	f36f 71df 	bfc	r1, #31, #1
   170fe:	2300      	movs	r3, #0
   17100:	4838      	ldr	r0, [pc, #224]	; (171e4 <hci_acl+0x184>)
   17102:	f00e fb56 	bl	257b2 <z_impl_z_log_msg_static_create>
   17106:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   17108:	4620      	mov	r0, r4
   1710a:	f011 f8ff 	bl	2830c <net_buf_unref>
}
   1710e:	370c      	adds	r7, #12
   17110:	46bd      	mov	sp, r7
   17112:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17114:	f240 13ed 	movw	r3, #493	; 0x1ed
   17118:	4a33      	ldr	r2, [pc, #204]	; (171e8 <hci_acl+0x188>)
   1711a:	4934      	ldr	r1, [pc, #208]	; (171ec <hci_acl+0x18c>)
   1711c:	4834      	ldr	r0, [pc, #208]	; (171f0 <hci_acl+0x190>)
   1711e:	f00e f82f 	bl	25180 <assert_print>
   17122:	4040      	eors	r0, r0
   17124:	f380 8811 	msr	BASEPRI, r0
   17128:	f04f 0003 	mov.w	r0, #3
   1712c:	df02      	svc	2
   1712e:	e79e      	b.n	1706e <hci_acl+0xe>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   17130:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17134:	e7b3      	b.n	1709e <hci_acl+0x3e>
   17136:	f06f 0c1b 	mvn.w	ip, #27
   1713a:	e7c3      	b.n	170c4 <hci_acl+0x64>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   1713c:	f002 feee 	bl	19f1c <bt_conn_lookup_handle>
	if (!conn) {
   17140:	4606      	mov	r6, r0
   17142:	b158      	cbz	r0, 1715c <hci_acl+0xfc>
	acl(buf)->index = bt_conn_index(conn);
   17144:	f003 f89c 	bl	1a280 <bt_conn_index>
   17148:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   1714a:	462a      	mov	r2, r5
   1714c:	4621      	mov	r1, r4
   1714e:	4630      	mov	r0, r6
   17150:	f00f fb78 	bl	26844 <bt_conn_recv>
	bt_conn_unref(conn);
   17154:	4630      	mov	r0, r6
   17156:	f00f fba8 	bl	268aa <bt_conn_unref>
   1715a:	e7d8      	b.n	1710e <hci_acl+0xae>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   1715c:	8b65      	ldrh	r5, [r4, #26]
   1715e:	466e      	mov	r6, sp
   17160:	b088      	sub	sp, #32
   17162:	466b      	mov	r3, sp
   17164:	f113 0210 	adds.w	r2, r3, #16
   17168:	d034      	beq.n	171d4 <hci_acl+0x174>
   1716a:	210c      	movs	r1, #12
   1716c:	b14a      	cbz	r2, 17182 <hci_acl+0x122>
   1716e:	4608      	mov	r0, r1
   17170:	2904      	cmp	r1, #4
   17172:	dd03      	ble.n	1717c <hci_acl+0x11c>
   17174:	f8df c07c 	ldr.w	ip, [pc, #124]	; 171f4 <hci_acl+0x194>
   17178:	f8c3 c014 	str.w	ip, [r3, #20]
   1717c:	2808      	cmp	r0, #8
   1717e:	dd00      	ble.n	17182 <hci_acl+0x122>
   17180:	619d      	str	r5, [r3, #24]
   17182:	290b      	cmp	r1, #11
   17184:	dd29      	ble.n	171da <hci_acl+0x17a>
   17186:	250c      	movs	r5, #12
   17188:	b13a      	cbz	r2, 1719a <hci_acl+0x13a>
   1718a:	2103      	movs	r1, #3
   1718c:	7139      	strb	r1, [r7, #4]
   1718e:	2100      	movs	r1, #0
   17190:	7179      	strb	r1, [r7, #5]
   17192:	71b9      	strb	r1, [r7, #6]
   17194:	71f9      	strb	r1, [r7, #7]
   17196:	6878      	ldr	r0, [r7, #4]
   17198:	6118      	str	r0, [r3, #16]
   1719a:	2100      	movs	r1, #0
   1719c:	f36f 0100 	bfc	r1, #0, #1
   171a0:	f36f 0141 	bfc	r1, #1, #1
   171a4:	f36f 0182 	bfc	r1, #2, #1
   171a8:	f36f 01c5 	bfc	r1, #3, #3
   171ac:	2301      	movs	r3, #1
   171ae:	f363 1188 	bfi	r1, r3, #6, #3
   171b2:	f405 757b 	and.w	r5, r5, #1004	; 0x3ec
   171b6:	f365 2152 	bfi	r1, r5, #9, #10
   171ba:	f36f 41de 	bfc	r1, #19, #12
   171be:	f36f 71df 	bfc	r1, #31, #1
   171c2:	2300      	movs	r3, #0
   171c4:	4807      	ldr	r0, [pc, #28]	; (171e4 <hci_acl+0x184>)
   171c6:	f00e faf4 	bl	257b2 <z_impl_z_log_msg_static_create>
   171ca:	46b5      	mov	sp, r6
		net_buf_unref(buf);
   171cc:	4620      	mov	r0, r4
   171ce:	f011 f89d 	bl	2830c <net_buf_unref>
		return;
   171d2:	e79c      	b.n	1710e <hci_acl+0xae>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   171d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   171d8:	e7c8      	b.n	1716c <hci_acl+0x10c>
   171da:	f06f 051b 	mvn.w	r5, #27
   171de:	e7d3      	b.n	17188 <hci_acl+0x128>
   171e0:	0002c2e8 	.word	0x0002c2e8
   171e4:	0002b17c 	.word	0x0002b17c
   171e8:	0002c228 	.word	0x0002c228
   171ec:	0002c25c 	.word	0x0002c25c
   171f0:	0002c278 	.word	0x0002c278
   171f4:	0002c30c 	.word	0x0002c30c

000171f8 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   171f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   171fa:	b083      	sub	sp, #12
   171fc:	af00      	add	r7, sp, #0
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   171fe:	484c      	ldr	r0, [pc, #304]	; (17330 <rx_work_handler+0x138>)
   17200:	f011 f868 	bl	282d4 <net_buf_slist_get>
	if (!buf) {
   17204:	2800      	cmp	r0, #0
   17206:	d04e      	beq.n	172a6 <rx_work_handler+0xae>
   17208:	4604      	mov	r4, r0
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1720a:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   1720c:	2b01      	cmp	r3, #1
   1720e:	d004      	beq.n	1721a <rx_work_handler+0x22>
   17210:	2b03      	cmp	r3, #3
   17212:	d105      	bne.n	17220 <rx_work_handler+0x28>
#if defined(CONFIG_BT_CONN)
	case BT_BUF_ACL_IN:
		hci_acl(buf);
   17214:	f7ff ff24 	bl	17060 <hci_acl>
		break;
   17218:	e03b      	b.n	17292 <rx_work_handler+0x9a>
	case BT_BUF_ISO_IN:
		hci_iso(buf);
		break;
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
   1721a:	f7ff fe77 	bl	16f0c <hci_event>
		break;
   1721e:	e038      	b.n	17292 <rx_work_handler+0x9a>
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   17220:	466d      	mov	r5, sp
   17222:	b088      	sub	sp, #32
   17224:	4669      	mov	r1, sp
   17226:	f111 0210 	adds.w	r2, r1, #16
   1722a:	d03f      	beq.n	172ac <rx_work_handler+0xb4>
   1722c:	200c      	movs	r0, #12
   1722e:	b142      	cbz	r2, 17242 <rx_work_handler+0x4a>
   17230:	4684      	mov	ip, r0
   17232:	2804      	cmp	r0, #4
   17234:	dd01      	ble.n	1723a <rx_work_handler+0x42>
   17236:	4e3f      	ldr	r6, [pc, #252]	; (17334 <rx_work_handler+0x13c>)
   17238:	614e      	str	r6, [r1, #20]
   1723a:	f1bc 0f08 	cmp.w	ip, #8
   1723e:	dd00      	ble.n	17242 <rx_work_handler+0x4a>
   17240:	618b      	str	r3, [r1, #24]
   17242:	280b      	cmp	r0, #11
   17244:	dd35      	ble.n	172b2 <rx_work_handler+0xba>
   17246:	230c      	movs	r3, #12
   17248:	b13a      	cbz	r2, 1725a <rx_work_handler+0x62>
   1724a:	2003      	movs	r0, #3
   1724c:	7138      	strb	r0, [r7, #4]
   1724e:	2000      	movs	r0, #0
   17250:	7178      	strb	r0, [r7, #5]
   17252:	71b8      	strb	r0, [r7, #6]
   17254:	71f8      	strb	r0, [r7, #7]
   17256:	6878      	ldr	r0, [r7, #4]
   17258:	6108      	str	r0, [r1, #16]
   1725a:	2100      	movs	r1, #0
   1725c:	f36f 0100 	bfc	r1, #0, #1
   17260:	f36f 0141 	bfc	r1, #1, #1
   17264:	f36f 0182 	bfc	r1, #2, #1
   17268:	f36f 01c5 	bfc	r1, #3, #3
   1726c:	2001      	movs	r0, #1
   1726e:	f360 1188 	bfi	r1, r0, #6, #3
   17272:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   17276:	f363 2152 	bfi	r1, r3, #9, #10
   1727a:	f36f 41de 	bfc	r1, #19, #12
   1727e:	f36f 71df 	bfc	r1, #31, #1
   17282:	2300      	movs	r3, #0
   17284:	482c      	ldr	r0, [pc, #176]	; (17338 <rx_work_handler+0x140>)
   17286:	f00e fa94 	bl	257b2 <z_impl_z_log_msg_static_create>
   1728a:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   1728c:	4620      	mov	r0, r4
   1728e:	f011 f83d 	bl	2830c <net_buf_unref>
	return list->head;
   17292:	4b2a      	ldr	r3, [pc, #168]	; (1733c <rx_work_handler+0x144>)
   17294:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   17298:	b12b      	cbz	r3, 172a6 <rx_work_handler+0xae>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   1729a:	4929      	ldr	r1, [pc, #164]	; (17340 <rx_work_handler+0x148>)
   1729c:	4829      	ldr	r0, [pc, #164]	; (17344 <rx_work_handler+0x14c>)
   1729e:	f013 f8cb 	bl	2a438 <k_work_submit_to_queue>
#endif
		if (err < 0) {
   172a2:	2800      	cmp	r0, #0
   172a4:	db08      	blt.n	172b8 <rx_work_handler+0xc0>
			LOG_ERR("Could not submit rx_work: %d", err);
		}
	}
}
   172a6:	370c      	adds	r7, #12
   172a8:	46bd      	mov	sp, r7
   172aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   172ac:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   172b0:	e7bd      	b.n	1722e <rx_work_handler+0x36>
   172b2:	f06f 031b 	mvn.w	r3, #27
   172b6:	e7c7      	b.n	17248 <rx_work_handler+0x50>
			LOG_ERR("Could not submit rx_work: %d", err);
   172b8:	466d      	mov	r5, sp
   172ba:	b088      	sub	sp, #32
   172bc:	466b      	mov	r3, sp
   172be:	f113 0210 	adds.w	r2, r3, #16
   172c2:	d02f      	beq.n	17324 <rx_work_handler+0x12c>
   172c4:	210c      	movs	r1, #12
   172c6:	b13a      	cbz	r2, 172d8 <rx_work_handler+0xe0>
   172c8:	460c      	mov	r4, r1
   172ca:	2904      	cmp	r1, #4
   172cc:	dd01      	ble.n	172d2 <rx_work_handler+0xda>
   172ce:	4e1e      	ldr	r6, [pc, #120]	; (17348 <rx_work_handler+0x150>)
   172d0:	615e      	str	r6, [r3, #20]
   172d2:	2c08      	cmp	r4, #8
   172d4:	dd00      	ble.n	172d8 <rx_work_handler+0xe0>
   172d6:	6198      	str	r0, [r3, #24]
   172d8:	290b      	cmp	r1, #11
   172da:	dd26      	ble.n	1732a <rx_work_handler+0x132>
   172dc:	240c      	movs	r4, #12
   172de:	b13a      	cbz	r2, 172f0 <rx_work_handler+0xf8>
   172e0:	2103      	movs	r1, #3
   172e2:	7139      	strb	r1, [r7, #4]
   172e4:	2100      	movs	r1, #0
   172e6:	7179      	strb	r1, [r7, #5]
   172e8:	71b9      	strb	r1, [r7, #6]
   172ea:	71f9      	strb	r1, [r7, #7]
   172ec:	6878      	ldr	r0, [r7, #4]
   172ee:	6118      	str	r0, [r3, #16]
   172f0:	2100      	movs	r1, #0
   172f2:	f36f 0100 	bfc	r1, #0, #1
   172f6:	f36f 0141 	bfc	r1, #1, #1
   172fa:	f36f 0182 	bfc	r1, #2, #1
   172fe:	f36f 01c5 	bfc	r1, #3, #3
   17302:	2301      	movs	r3, #1
   17304:	f363 1188 	bfi	r1, r3, #6, #3
   17308:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1730c:	f363 2152 	bfi	r1, r3, #9, #10
   17310:	f36f 41de 	bfc	r1, #19, #12
   17314:	f36f 71df 	bfc	r1, #31, #1
   17318:	2300      	movs	r3, #0
   1731a:	4807      	ldr	r0, [pc, #28]	; (17338 <rx_work_handler+0x140>)
   1731c:	f00e fa49 	bl	257b2 <z_impl_z_log_msg_static_create>
   17320:	46ad      	mov	sp, r5
   17322:	e7c0      	b.n	172a6 <rx_work_handler+0xae>
   17324:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17328:	e7cd      	b.n	172c6 <rx_work_handler+0xce>
   1732a:	f06f 041b 	mvn.w	r4, #27
   1732e:	e7d6      	b.n	172de <rx_work_handler+0xe6>
   17330:	200004a4 	.word	0x200004a4
   17334:	0002c330 	.word	0x0002c330
   17338:	0002b17c 	.word	0x0002b17c
   1733c:	20000370 	.word	0x20000370
   17340:	20000728 	.word	0x20000728
   17344:	20002008 	.word	0x20002008
   17348:	0002c2c8 	.word	0x0002c2c8

0001734c <le_conn_update_complete>:
{
   1734c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1734e:	b083      	sub	sp, #12
   17350:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   17352:	68c4      	ldr	r4, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   17354:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
   17358:	4630      	mov	r0, r6
   1735a:	f002 fddf 	bl	19f1c <bt_conn_lookup_handle>
	if (!conn) {
   1735e:	b1d0      	cbz	r0, 17396 <le_conn_update_complete+0x4a>
   17360:	4605      	mov	r5, r0
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   17362:	7823      	ldrb	r3, [r4, #0]
   17364:	2b1a      	cmp	r3, #26
   17366:	d052      	beq.n	1740e <le_conn_update_complete+0xc2>
		if (!evt->status) {
   17368:	7823      	ldrb	r3, [r4, #0]
   1736a:	b95b      	cbnz	r3, 17384 <le_conn_update_complete+0x38>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   1736c:	f8b4 3003 	ldrh.w	r3, [r4, #3]
   17370:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   17374:	f8b4 3005 	ldrh.w	r3, [r4, #5]
   17378:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1737c:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   17380:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
		notify_le_param_updated(conn);
   17384:	4628      	mov	r0, r5
   17386:	f002 ffc5 	bl	1a314 <notify_le_param_updated>
	bt_conn_unref(conn);
   1738a:	4628      	mov	r0, r5
   1738c:	f00f fa8d 	bl	268aa <bt_conn_unref>
}
   17390:	370c      	adds	r7, #12
   17392:	46bd      	mov	sp, r7
   17394:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   17396:	466d      	mov	r5, sp
   17398:	b088      	sub	sp, #32
   1739a:	466b      	mov	r3, sp
   1739c:	f113 0210 	adds.w	r2, r3, #16
   173a0:	d02f      	beq.n	17402 <le_conn_update_complete+0xb6>
   173a2:	210c      	movs	r1, #12
   173a4:	b13a      	cbz	r2, 173b6 <le_conn_update_complete+0x6a>
   173a6:	4608      	mov	r0, r1
   173a8:	2904      	cmp	r1, #4
   173aa:	dd01      	ble.n	173b0 <le_conn_update_complete+0x64>
   173ac:	4c25      	ldr	r4, [pc, #148]	; (17444 <le_conn_update_complete+0xf8>)
   173ae:	615c      	str	r4, [r3, #20]
   173b0:	2808      	cmp	r0, #8
   173b2:	dd00      	ble.n	173b6 <le_conn_update_complete+0x6a>
   173b4:	619e      	str	r6, [r3, #24]
   173b6:	290b      	cmp	r1, #11
   173b8:	dd26      	ble.n	17408 <le_conn_update_complete+0xbc>
   173ba:	240c      	movs	r4, #12
   173bc:	b13a      	cbz	r2, 173ce <le_conn_update_complete+0x82>
   173be:	2103      	movs	r1, #3
   173c0:	7039      	strb	r1, [r7, #0]
   173c2:	2100      	movs	r1, #0
   173c4:	7079      	strb	r1, [r7, #1]
   173c6:	70b9      	strb	r1, [r7, #2]
   173c8:	70f9      	strb	r1, [r7, #3]
   173ca:	6838      	ldr	r0, [r7, #0]
   173cc:	6118      	str	r0, [r3, #16]
   173ce:	2100      	movs	r1, #0
   173d0:	f36f 0100 	bfc	r1, #0, #1
   173d4:	f36f 0141 	bfc	r1, #1, #1
   173d8:	f36f 0182 	bfc	r1, #2, #1
   173dc:	f36f 01c5 	bfc	r1, #3, #3
   173e0:	2301      	movs	r3, #1
   173e2:	f363 1188 	bfi	r1, r3, #6, #3
   173e6:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   173ea:	f364 2152 	bfi	r1, r4, #9, #10
   173ee:	f36f 41de 	bfc	r1, #19, #12
   173f2:	f36f 71df 	bfc	r1, #31, #1
   173f6:	2300      	movs	r3, #0
   173f8:	4813      	ldr	r0, [pc, #76]	; (17448 <le_conn_update_complete+0xfc>)
   173fa:	f00e f9da 	bl	257b2 <z_impl_z_log_msg_static_create>
   173fe:	46ad      	mov	sp, r5
		return;
   17400:	e7c6      	b.n	17390 <le_conn_update_complete+0x44>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   17402:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17406:	e7cd      	b.n	173a4 <le_conn_update_complete+0x58>
   17408:	f06f 041b 	mvn.w	r4, #27
   1740c:	e7d6      	b.n	173bc <le_conn_update_complete+0x70>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   1740e:	78c3      	ldrb	r3, [r0, #3]
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   17410:	2b01      	cmp	r3, #1
   17412:	d1a9      	bne.n	17368 <le_conn_update_complete+0x1c>
	    !atomic_test_and_set_bit(conn->flags,
   17414:	210a      	movs	r1, #10
   17416:	3004      	adds	r0, #4
   17418:	f00e ff68 	bl	262ec <atomic_test_and_set_bit>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   1741c:	2800      	cmp	r0, #0
   1741e:	d1a3      	bne.n	17368 <le_conn_update_complete+0x1c>
		param.interval_min = conn->le.interval_min;
   17420:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
   17424:	803b      	strh	r3, [r7, #0]
		param.interval_max = conn->le.interval_max;
   17426:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
   1742a:	807b      	strh	r3, [r7, #2]
		param.latency = conn->le.pending_latency;
   1742c:	f8b5 30a8 	ldrh.w	r3, [r5, #168]	; 0xa8
   17430:	80bb      	strh	r3, [r7, #4]
		param.timeout = conn->le.pending_timeout;
   17432:	f8b5 30aa 	ldrh.w	r3, [r5, #170]	; 0xaa
   17436:	80fb      	strh	r3, [r7, #6]
		bt_l2cap_update_conn_param(conn, &param);
   17438:	4639      	mov	r1, r7
   1743a:	4628      	mov	r0, r5
   1743c:	f00f fb86 	bl	26b4c <bt_l2cap_update_conn_param>
				     BT_CONN_PERIPHERAL_PARAM_L2CAP)) {
   17440:	e7a3      	b.n	1738a <le_conn_update_complete+0x3e>
   17442:	bf00      	nop
   17444:	0002c11c 	.word	0x0002c11c
   17448:	0002b17c 	.word	0x0002b17c

0001744c <bt_hci_cmd_state_set_init>:
{
   1744c:	b510      	push	{r4, lr}
   1744e:	460c      	mov	r4, r1
	state->target = target;
   17450:	600a      	str	r2, [r1, #0]
	state->bit = bit;
   17452:	604b      	str	r3, [r1, #4]
	state->val = val;
   17454:	f89d 3008 	ldrb.w	r3, [sp, #8]
   17458:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   1745a:	f010 fe73 	bl	28144 <net_buf_id>
   1745e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17462:	4b02      	ldr	r3, [pc, #8]	; (1746c <bt_hci_cmd_state_set_init+0x20>)
   17464:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   17468:	605c      	str	r4, [r3, #4]
}
   1746a:	bd10      	pop	{r4, pc}
   1746c:	20005764 	.word	0x20005764

00017470 <bt_hci_cmd_create>:
{
   17470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17474:	4606      	mov	r6, r0
   17476:	460f      	mov	r7, r1
	return net_buf_alloc_fixed(pool, timeout);
   17478:	f04f 32ff 	mov.w	r2, #4294967295
   1747c:	f04f 33ff 	mov.w	r3, #4294967295
   17480:	4818      	ldr	r0, [pc, #96]	; (174e4 <bt_hci_cmd_create+0x74>)
   17482:	f010 ff02 	bl	2828a <net_buf_alloc_fixed>
   17486:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   17488:	f100 090c 	add.w	r9, r0, #12
   1748c:	2100      	movs	r1, #0
   1748e:	4648      	mov	r0, r9
   17490:	f010 ff06 	bl	282a0 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   17494:	f04f 0800 	mov.w	r8, #0
   17498:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
   1749c:	4620      	mov	r0, r4
   1749e:	f010 fe51 	bl	28144 <net_buf_id>
   174a2:	4d11      	ldr	r5, [pc, #68]	; (174e8 <bt_hci_cmd_create+0x78>)
   174a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   174a8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   174ac:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   174ae:	4620      	mov	r0, r4
   174b0:	f010 fe48 	bl	28144 <net_buf_id>
   174b4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   174b8:	eb05 0380 	add.w	r3, r5, r0, lsl #2
   174bc:	f8c3 8008 	str.w	r8, [r3, #8]
	cmd(buf)->state = NULL;
   174c0:	4620      	mov	r0, r4
   174c2:	f010 fe3f 	bl	28144 <net_buf_id>
   174c6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   174ca:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   174ce:	f8c5 8004 	str.w	r8, [r5, #4]
	return net_buf_simple_add(&buf->b, len);
   174d2:	2103      	movs	r1, #3
   174d4:	4648      	mov	r0, r9
   174d6:	f010 ff60 	bl	2839a <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   174da:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   174dc:	7087      	strb	r7, [r0, #2]
}
   174de:	4620      	mov	r0, r4
   174e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   174e4:	20000ae4 	.word	0x20000ae4
   174e8:	20005764 	.word	0x20005764

000174ec <bt_hci_cmd_send_sync>:
{
   174ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   174f0:	b088      	sub	sp, #32
   174f2:	af00      	add	r7, sp, #0
   174f4:	4606      	mov	r6, r0
   174f6:	4615      	mov	r5, r2
	if (!buf) {
   174f8:	460c      	mov	r4, r1
   174fa:	2900      	cmp	r1, #0
   174fc:	d06f      	beq.n	175de <bt_hci_cmd_send_sync+0xf2>
	return z_impl_k_sem_init(sem, initial_count, limit);
   174fe:	f107 0808 	add.w	r8, r7, #8
   17502:	2201      	movs	r2, #1
   17504:	2100      	movs	r1, #0
   17506:	4640      	mov	r0, r8
   17508:	f012 fe93 	bl	2a232 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   1750c:	4620      	mov	r0, r4
   1750e:	f010 fe19 	bl	28144 <net_buf_id>
   17512:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17516:	4b49      	ldr	r3, [pc, #292]	; (1763c <bt_hci_cmd_send_sync+0x150>)
   17518:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   1751c:	f8c3 8008 	str.w	r8, [r3, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   17520:	4620      	mov	r0, r4
   17522:	f010 ff16 	bl	28352 <net_buf_ref>
   17526:	4601      	mov	r1, r0
   17528:	4845      	ldr	r0, [pc, #276]	; (17640 <bt_hci_cmd_send_sync+0x154>)
   1752a:	f010 feeb 	bl	28304 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   1752e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   17532:	2300      	movs	r3, #0
   17534:	4640      	mov	r0, r8
   17536:	f00b fb45 	bl	22bc4 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   1753a:	4680      	mov	r8, r0
   1753c:	2800      	cmp	r0, #0
   1753e:	d156      	bne.n	175ee <bt_hci_cmd_send_sync+0x102>
	status = cmd(buf)->status;
   17540:	4620      	mov	r0, r4
   17542:	f010 fdff 	bl	28144 <net_buf_id>
   17546:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1754a:	4b3c      	ldr	r3, [pc, #240]	; (1763c <bt_hci_cmd_send_sync+0x150>)
   1754c:	f813 8020 	ldrb.w	r8, [r3, r0, lsl #2]
	if (status) {
   17550:	f1b8 0f00 	cmp.w	r8, #0
   17554:	d066      	beq.n	17624 <bt_hci_cmd_send_sync+0x138>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   17556:	466d      	mov	r5, sp
   17558:	b088      	sub	sp, #32
   1755a:	466b      	mov	r3, sp
   1755c:	f113 0210 	adds.w	r2, r3, #16
   17560:	d057      	beq.n	17612 <bt_hci_cmd_send_sync+0x126>
   17562:	2110      	movs	r1, #16
   17564:	b16a      	cbz	r2, 17582 <bt_hci_cmd_send_sync+0x96>
   17566:	4608      	mov	r0, r1
   17568:	2904      	cmp	r1, #4
   1756a:	dd03      	ble.n	17574 <bt_hci_cmd_send_sync+0x88>
   1756c:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 17644 <bt_hci_cmd_send_sync+0x158>
   17570:	f8c3 c014 	str.w	ip, [r3, #20]
   17574:	2808      	cmp	r0, #8
   17576:	dd00      	ble.n	1757a <bt_hci_cmd_send_sync+0x8e>
   17578:	619e      	str	r6, [r3, #24]
   1757a:	280c      	cmp	r0, #12
   1757c:	dd01      	ble.n	17582 <bt_hci_cmd_send_sync+0x96>
   1757e:	f8c3 801c 	str.w	r8, [r3, #28]
   17582:	290f      	cmp	r1, #15
   17584:	dd48      	ble.n	17618 <bt_hci_cmd_send_sync+0x12c>
   17586:	2610      	movs	r6, #16
   17588:	b13a      	cbz	r2, 1759a <bt_hci_cmd_send_sync+0xae>
   1758a:	2104      	movs	r1, #4
   1758c:	7139      	strb	r1, [r7, #4]
   1758e:	2100      	movs	r1, #0
   17590:	7179      	strb	r1, [r7, #5]
   17592:	71b9      	strb	r1, [r7, #6]
   17594:	71f9      	strb	r1, [r7, #7]
   17596:	6878      	ldr	r0, [r7, #4]
   17598:	6118      	str	r0, [r3, #16]
   1759a:	2100      	movs	r1, #0
   1759c:	f36f 0100 	bfc	r1, #0, #1
   175a0:	f36f 0141 	bfc	r1, #1, #1
   175a4:	f36f 0182 	bfc	r1, #2, #1
   175a8:	f36f 01c5 	bfc	r1, #3, #3
   175ac:	2302      	movs	r3, #2
   175ae:	f363 1188 	bfi	r1, r3, #6, #3
   175b2:	f406 737d 	and.w	r3, r6, #1012	; 0x3f4
   175b6:	f363 2152 	bfi	r1, r3, #9, #10
   175ba:	f36f 41de 	bfc	r1, #19, #12
   175be:	f36f 71df 	bfc	r1, #31, #1
   175c2:	2300      	movs	r3, #0
   175c4:	4820      	ldr	r0, [pc, #128]	; (17648 <bt_hci_cmd_send_sync+0x15c>)
   175c6:	f00e f8f4 	bl	257b2 <z_impl_z_log_msg_static_create>
   175ca:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   175cc:	4620      	mov	r0, r4
   175ce:	f010 fe9d 	bl	2830c <net_buf_unref>
		switch (status) {
   175d2:	f1b8 0f09 	cmp.w	r8, #9
   175d6:	d022      	beq.n	1761e <bt_hci_cmd_send_sync+0x132>
			return -EIO;
   175d8:	f06f 0004 	mvn.w	r0, #4
   175dc:	e025      	b.n	1762a <bt_hci_cmd_send_sync+0x13e>
		buf = bt_hci_cmd_create(opcode, 0);
   175de:	f7ff ff47 	bl	17470 <bt_hci_cmd_create>
		if (!buf) {
   175e2:	4604      	mov	r4, r0
   175e4:	2800      	cmp	r0, #0
   175e6:	d18a      	bne.n	174fe <bt_hci_cmd_send_sync+0x12>
			return -ENOBUFS;
   175e8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   175ec:	e01d      	b.n	1762a <bt_hci_cmd_send_sync+0x13e>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   175ee:	f240 1349 	movw	r3, #329	; 0x149
   175f2:	4a16      	ldr	r2, [pc, #88]	; (1764c <bt_hci_cmd_send_sync+0x160>)
   175f4:	4916      	ldr	r1, [pc, #88]	; (17650 <bt_hci_cmd_send_sync+0x164>)
   175f6:	4817      	ldr	r0, [pc, #92]	; (17654 <bt_hci_cmd_send_sync+0x168>)
   175f8:	f00d fdc2 	bl	25180 <assert_print>
   175fc:	4641      	mov	r1, r8
   175fe:	4816      	ldr	r0, [pc, #88]	; (17658 <bt_hci_cmd_send_sync+0x16c>)
   17600:	f00d fdbe 	bl	25180 <assert_print>
   17604:	4040      	eors	r0, r0
   17606:	f380 8811 	msr	BASEPRI, r0
   1760a:	f04f 0003 	mov.w	r0, #3
   1760e:	df02      	svc	2
   17610:	e796      	b.n	17540 <bt_hci_cmd_send_sync+0x54>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   17612:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17616:	e7a5      	b.n	17564 <bt_hci_cmd_send_sync+0x78>
   17618:	f06f 061b 	mvn.w	r6, #27
   1761c:	e7b4      	b.n	17588 <bt_hci_cmd_send_sync+0x9c>
			return -ECONNREFUSED;
   1761e:	f06f 006e 	mvn.w	r0, #110	; 0x6e
   17622:	e002      	b.n	1762a <bt_hci_cmd_send_sync+0x13e>
	if (rsp) {
   17624:	b12d      	cbz	r5, 17632 <bt_hci_cmd_send_sync+0x146>
		*rsp = buf;
   17626:	602c      	str	r4, [r5, #0]
	return 0;
   17628:	2000      	movs	r0, #0
}
   1762a:	3720      	adds	r7, #32
   1762c:	46bd      	mov	sp, r7
   1762e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   17632:	4620      	mov	r0, r4
   17634:	f010 fe6a 	bl	2830c <net_buf_unref>
	return 0;
   17638:	2000      	movs	r0, #0
   1763a:	e7f6      	b.n	1762a <bt_hci_cmd_send_sync+0x13e>
   1763c:	20005764 	.word	0x20005764
   17640:	200004ac 	.word	0x200004ac
   17644:	0002c370 	.word	0x0002c370
   17648:	0002b17c 	.word	0x0002b17c
   1764c:	0002c228 	.word	0x0002c228
   17650:	0002c344 	.word	0x0002c344
   17654:	0002c278 	.word	0x0002c278
   17658:	0002c350 	.word	0x0002c350

0001765c <common_init>:
{
   1765c:	b510      	push	{r4, lr}
   1765e:	b082      	sub	sp, #8
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   17660:	4b22      	ldr	r3, [pc, #136]	; (176ec <common_init+0x90>)
   17662:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   17666:	689b      	ldr	r3, [r3, #8]
   17668:	f013 0f01 	tst.w	r3, #1
   1766c:	d10d      	bne.n	1768a <common_init+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   1766e:	aa01      	add	r2, sp, #4
   17670:	2100      	movs	r1, #0
   17672:	f640 4003 	movw	r0, #3075	; 0xc03
   17676:	f7ff ff39 	bl	174ec <bt_hci_cmd_send_sync>
		if (err) {
   1767a:	4604      	mov	r4, r0
   1767c:	b968      	cbnz	r0, 1769a <common_init+0x3e>
		hci_reset_complete(rsp);
   1767e:	9801      	ldr	r0, [sp, #4]
   17680:	f7fe fef0 	bl	16464 <hci_reset_complete>
		net_buf_unref(rsp);
   17684:	9801      	ldr	r0, [sp, #4]
   17686:	f010 fe41 	bl	2830c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   1768a:	aa01      	add	r2, sp, #4
   1768c:	2100      	movs	r1, #0
   1768e:	f241 0003 	movw	r0, #4099	; 0x1003
   17692:	f7ff ff2b 	bl	174ec <bt_hci_cmd_send_sync>
	if (err) {
   17696:	4604      	mov	r4, r0
   17698:	b110      	cbz	r0, 176a0 <common_init+0x44>
}
   1769a:	4620      	mov	r0, r4
   1769c:	b002      	add	sp, #8
   1769e:	bd10      	pop	{r4, pc}
	read_local_features_complete(rsp);
   176a0:	9801      	ldr	r0, [sp, #4]
   176a2:	f7fe fefb 	bl	1649c <read_local_features_complete>
	net_buf_unref(rsp);
   176a6:	9801      	ldr	r0, [sp, #4]
   176a8:	f010 fe30 	bl	2830c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   176ac:	aa01      	add	r2, sp, #4
   176ae:	2100      	movs	r1, #0
   176b0:	f241 0001 	movw	r0, #4097	; 0x1001
   176b4:	f7ff ff1a 	bl	174ec <bt_hci_cmd_send_sync>
	if (err) {
   176b8:	4604      	mov	r4, r0
   176ba:	2800      	cmp	r0, #0
   176bc:	d1ed      	bne.n	1769a <common_init+0x3e>
	read_local_ver_complete(rsp);
   176be:	9801      	ldr	r0, [sp, #4]
   176c0:	f7fe feae 	bl	16420 <read_local_ver_complete>
	net_buf_unref(rsp);
   176c4:	9801      	ldr	r0, [sp, #4]
   176c6:	f010 fe21 	bl	2830c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   176ca:	aa01      	add	r2, sp, #4
   176cc:	2100      	movs	r1, #0
   176ce:	f241 0002 	movw	r0, #4098	; 0x1002
   176d2:	f7ff ff0b 	bl	174ec <bt_hci_cmd_send_sync>
	if (err) {
   176d6:	4604      	mov	r4, r0
   176d8:	2800      	cmp	r0, #0
   176da:	d1de      	bne.n	1769a <common_init+0x3e>
	read_supported_commands_complete(rsp);
   176dc:	9801      	ldr	r0, [sp, #4]
   176de:	f7fe fee7 	bl	164b0 <read_supported_commands_complete>
	net_buf_unref(rsp);
   176e2:	9801      	ldr	r0, [sp, #4]
   176e4:	f010 fe12 	bl	2830c <net_buf_unref>
	return 0;
   176e8:	e7d7      	b.n	1769a <common_init+0x3e>
   176ea:	bf00      	nop
   176ec:	20000370 	.word	0x20000370

000176f0 <hci_le_read_max_data_len>:
{
   176f0:	b570      	push	{r4, r5, r6, lr}
   176f2:	b088      	sub	sp, #32
   176f4:	4605      	mov	r5, r0
   176f6:	460c      	mov	r4, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   176f8:	aa01      	add	r2, sp, #4
   176fa:	2100      	movs	r1, #0
   176fc:	f242 002f 	movw	r0, #8239	; 0x202f
   17700:	f7ff fef4 	bl	174ec <bt_hci_cmd_send_sync>
	if (err) {
   17704:	4606      	mov	r6, r0
   17706:	b960      	cbnz	r0, 17722 <hci_le_read_max_data_len+0x32>
	rp = (void *)rsp->data;
   17708:	9801      	ldr	r0, [sp, #4]
   1770a:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   1770c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   17710:	802a      	strh	r2, [r5, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   17712:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   17716:	8023      	strh	r3, [r4, #0]
	net_buf_unref(rsp);
   17718:	f010 fdf8 	bl	2830c <net_buf_unref>
}
   1771c:	4630      	mov	r0, r6
   1771e:	b008      	add	sp, #32
   17720:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("Failed to read DLE max data len");
   17722:	4b13      	ldr	r3, [pc, #76]	; (17770 <hci_le_read_max_data_len+0x80>)
   17724:	9307      	str	r3, [sp, #28]
   17726:	2302      	movs	r3, #2
   17728:	f88d 3000 	strb.w	r3, [sp]
   1772c:	2300      	movs	r3, #0
   1772e:	f88d 3001 	strb.w	r3, [sp, #1]
   17732:	f88d 3002 	strb.w	r3, [sp, #2]
   17736:	f88d 3003 	strb.w	r3, [sp, #3]
   1773a:	9a00      	ldr	r2, [sp, #0]
   1773c:	9206      	str	r2, [sp, #24]
   1773e:	4619      	mov	r1, r3
   17740:	f363 0100 	bfi	r1, r3, #0, #1
   17744:	f363 0141 	bfi	r1, r3, #1, #1
   17748:	f363 0182 	bfi	r1, r3, #2, #1
   1774c:	f363 01c5 	bfi	r1, r3, #3, #3
   17750:	2201      	movs	r2, #1
   17752:	f362 1188 	bfi	r1, r2, #6, #3
   17756:	2208      	movs	r2, #8
   17758:	f362 2152 	bfi	r1, r2, #9, #10
   1775c:	f363 41de 	bfi	r1, r3, #19, #12
   17760:	f363 71df 	bfi	r1, r3, #31, #1
   17764:	aa06      	add	r2, sp, #24
   17766:	4803      	ldr	r0, [pc, #12]	; (17774 <hci_le_read_max_data_len+0x84>)
   17768:	f00e f823 	bl	257b2 <z_impl_z_log_msg_static_create>
		return err;
   1776c:	e7d6      	b.n	1771c <hci_le_read_max_data_len+0x2c>
   1776e:	bf00      	nop
   17770:	0002c38c 	.word	0x0002c38c
   17774:	0002b17c 	.word	0x0002b17c

00017778 <le_set_event_mask>:
{
   17778:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   1777a:	2108      	movs	r1, #8
   1777c:	f242 0001 	movw	r0, #8193	; 0x2001
   17780:	f7ff fe76 	bl	17470 <bt_hci_cmd_create>
	if (!buf) {
   17784:	b330      	cbz	r0, 177d4 <le_set_event_mask+0x5c>
   17786:	4604      	mov	r4, r0
   17788:	2108      	movs	r1, #8
   1778a:	300c      	adds	r0, #12
   1778c:	f010 fe05 	bl	2839a <net_buf_simple_add>
   17790:	4602      	mov	r2, r0
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   17792:	4b12      	ldr	r3, [pc, #72]	; (177dc <le_set_event_mask+0x64>)
   17794:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   17798:	f013 0f02 	tst.w	r3, #2
   1779c:	d117      	bne.n	177ce <le_set_event_mask+0x56>
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   1779e:	200f      	movs	r0, #15
   177a0:	2100      	movs	r1, #0
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   177a2:	f013 0f20 	tst.w	r3, #32
   177a6:	d001      	beq.n	177ac <le_set_event_mask+0x34>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   177a8:	f040 0040 	orr.w	r0, r0, #64	; 0x40
		    (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
   177ac:	4b0b      	ldr	r3, [pc, #44]	; (177dc <le_set_event_mask+0x64>)
   177ae:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   177b2:	f013 0f09 	tst.w	r3, #9
   177b6:	d001      	beq.n	177bc <le_set_event_mask+0x44>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   177b8:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
	sys_put_le64(mask, cp_mask->events);
   177bc:	f00e fd0a 	bl	261d4 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   177c0:	2200      	movs	r2, #0
   177c2:	4621      	mov	r1, r4
   177c4:	f242 0001 	movw	r0, #8193	; 0x2001
   177c8:	f7ff fe90 	bl	174ec <bt_hci_cmd_send_sync>
}
   177cc:	bd10      	pop	{r4, pc}
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   177ce:	202f      	movs	r0, #47	; 0x2f
   177d0:	2100      	movs	r1, #0
   177d2:	e7e6      	b.n	177a2 <le_set_event_mask+0x2a>
		return -ENOBUFS;
   177d4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   177d8:	e7f8      	b.n	177cc <le_set_event_mask+0x54>
   177da:	bf00      	nop
   177dc:	20000370 	.word	0x20000370

000177e0 <le_init>:
{
   177e0:	b510      	push	{r4, lr}
   177e2:	b08a      	sub	sp, #40	; 0x28
	if (!BT_FEAT_LE(bt_dev.features)) {
   177e4:	4b5a      	ldr	r3, [pc, #360]	; (17950 <le_init+0x170>)
   177e6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   177ea:	f013 0f40 	tst.w	r3, #64	; 0x40
   177ee:	d00a      	beq.n	17806 <le_init+0x26>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   177f0:	aa03      	add	r2, sp, #12
   177f2:	2100      	movs	r1, #0
   177f4:	f242 0003 	movw	r0, #8195	; 0x2003
   177f8:	f7ff fe78 	bl	174ec <bt_hci_cmd_send_sync>
	if (err) {
   177fc:	4603      	mov	r3, r0
   177fe:	b350      	cbz	r0, 17856 <le_init+0x76>
}
   17800:	4618      	mov	r0, r3
   17802:	b00a      	add	sp, #40	; 0x28
   17804:	bd10      	pop	{r4, pc}
		LOG_ERR("Non-LE capable controller detected!");
   17806:	4b53      	ldr	r3, [pc, #332]	; (17954 <le_init+0x174>)
   17808:	9309      	str	r3, [sp, #36]	; 0x24
   1780a:	2302      	movs	r3, #2
   1780c:	f88d 3008 	strb.w	r3, [sp, #8]
   17810:	2300      	movs	r3, #0
   17812:	f88d 3009 	strb.w	r3, [sp, #9]
   17816:	f88d 300a 	strb.w	r3, [sp, #10]
   1781a:	f88d 300b 	strb.w	r3, [sp, #11]
   1781e:	9a02      	ldr	r2, [sp, #8]
   17820:	9208      	str	r2, [sp, #32]
   17822:	4619      	mov	r1, r3
   17824:	f363 0100 	bfi	r1, r3, #0, #1
   17828:	f363 0141 	bfi	r1, r3, #1, #1
   1782c:	f363 0182 	bfi	r1, r3, #2, #1
   17830:	f363 01c5 	bfi	r1, r3, #3, #3
   17834:	2201      	movs	r2, #1
   17836:	f362 1188 	bfi	r1, r2, #6, #3
   1783a:	2208      	movs	r2, #8
   1783c:	f362 2152 	bfi	r1, r2, #9, #10
   17840:	f363 41de 	bfi	r1, r3, #19, #12
   17844:	f363 71df 	bfi	r1, r3, #31, #1
   17848:	aa08      	add	r2, sp, #32
   1784a:	4843      	ldr	r0, [pc, #268]	; (17958 <le_init+0x178>)
   1784c:	f00d ffb1 	bl	257b2 <z_impl_z_log_msg_static_create>
		return -ENODEV;
   17850:	f06f 0312 	mvn.w	r3, #18
   17854:	e7d4      	b.n	17800 <le_init+0x20>
	read_le_features_complete(rsp);
   17856:	9803      	ldr	r0, [sp, #12]
   17858:	f7fe fe34 	bl	164c4 <read_le_features_complete>
	net_buf_unref(rsp);
   1785c:	9803      	ldr	r0, [sp, #12]
   1785e:	f010 fd55 	bl	2830c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   17862:	aa03      	add	r2, sp, #12
   17864:	2100      	movs	r1, #0
   17866:	f242 0002 	movw	r0, #8194	; 0x2002
   1786a:	f7ff fe3f 	bl	174ec <bt_hci_cmd_send_sync>
		if (err) {
   1786e:	4603      	mov	r3, r0
   17870:	2800      	cmp	r0, #0
   17872:	d1c5      	bne.n	17800 <le_init+0x20>
		le_read_buffer_size_complete(rsp);
   17874:	9803      	ldr	r0, [sp, #12]
   17876:	f7fe fe2f 	bl	164d8 <le_read_buffer_size_complete>
		net_buf_unref(rsp);
   1787a:	9803      	ldr	r0, [sp, #12]
   1787c:	f010 fd46 	bl	2830c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   17880:	4b33      	ldr	r3, [pc, #204]	; (17950 <le_init+0x170>)
   17882:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   17886:	f013 0f20 	tst.w	r3, #32
   1788a:	d032      	beq.n	178f2 <le_init+0x112>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   1788c:	4b30      	ldr	r3, [pc, #192]	; (17950 <le_init+0x170>)
   1788e:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   17892:	f013 0f08 	tst.w	r3, #8
   17896:	d144      	bne.n	17922 <le_init+0x142>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   17898:	4b2d      	ldr	r3, [pc, #180]	; (17950 <le_init+0x170>)
   1789a:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   1789e:	f013 0f20 	tst.w	r3, #32
   178a2:	d022      	beq.n	178ea <le_init+0x10a>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   178a4:	a902      	add	r1, sp, #8
   178a6:	f10d 0006 	add.w	r0, sp, #6
   178aa:	f7ff ff21 	bl	176f0 <hci_le_read_max_data_len>
		if (err) {
   178ae:	4603      	mov	r3, r0
   178b0:	2800      	cmp	r0, #0
   178b2:	d1a5      	bne.n	17800 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   178b4:	2104      	movs	r1, #4
   178b6:	f242 0024 	movw	r0, #8228	; 0x2024
   178ba:	f7ff fdd9 	bl	17470 <bt_hci_cmd_create>
		if (!buf) {
   178be:	4604      	mov	r4, r0
   178c0:	2800      	cmp	r0, #0
   178c2:	d03f      	beq.n	17944 <le_init+0x164>
   178c4:	2104      	movs	r1, #4
   178c6:	300c      	adds	r0, #12
   178c8:	f010 fd67 	bl	2839a <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   178cc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   178d0:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   178d2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   178d6:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   178d8:	2200      	movs	r2, #0
   178da:	4621      	mov	r1, r4
   178dc:	f242 0024 	movw	r0, #8228	; 0x2024
   178e0:	f7ff fe04 	bl	174ec <bt_hci_cmd_send_sync>
		if (err) {
   178e4:	4603      	mov	r3, r0
   178e6:	2800      	cmp	r0, #0
   178e8:	d18a      	bne.n	17800 <le_init+0x20>
	return  le_set_event_mask();
   178ea:	f7ff ff45 	bl	17778 <le_set_event_mask>
   178ee:	4603      	mov	r3, r0
   178f0:	e786      	b.n	17800 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   178f2:	2102      	movs	r1, #2
   178f4:	f640 406d 	movw	r0, #3181	; 0xc6d
   178f8:	f7ff fdba 	bl	17470 <bt_hci_cmd_create>
		if (!buf) {
   178fc:	4604      	mov	r4, r0
   178fe:	b320      	cbz	r0, 1794a <le_init+0x16a>
   17900:	2102      	movs	r1, #2
   17902:	300c      	adds	r0, #12
   17904:	f010 fd49 	bl	2839a <net_buf_simple_add>
		cp_le->le = 0x01;
   17908:	2301      	movs	r3, #1
   1790a:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   1790c:	2200      	movs	r2, #0
   1790e:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   17910:	4621      	mov	r1, r4
   17912:	f640 406d 	movw	r0, #3181	; 0xc6d
   17916:	f7ff fde9 	bl	174ec <bt_hci_cmd_send_sync>
		if (err) {
   1791a:	4603      	mov	r3, r0
   1791c:	2800      	cmp	r0, #0
   1791e:	d0b5      	beq.n	1788c <le_init+0xac>
   17920:	e76e      	b.n	17800 <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   17922:	aa03      	add	r2, sp, #12
   17924:	2100      	movs	r1, #0
   17926:	f242 001c 	movw	r0, #8220	; 0x201c
   1792a:	f7ff fddf 	bl	174ec <bt_hci_cmd_send_sync>
		if (err) {
   1792e:	4603      	mov	r3, r0
   17930:	2800      	cmp	r0, #0
   17932:	f47f af65 	bne.w	17800 <le_init+0x20>
		le_read_supp_states_complete(rsp);
   17936:	9803      	ldr	r0, [sp, #12]
   17938:	f7fe fd88 	bl	1644c <le_read_supp_states_complete>
		net_buf_unref(rsp);
   1793c:	9803      	ldr	r0, [sp, #12]
   1793e:	f010 fce5 	bl	2830c <net_buf_unref>
   17942:	e7a9      	b.n	17898 <le_init+0xb8>
			return -ENOBUFS;
   17944:	f06f 0368 	mvn.w	r3, #104	; 0x68
   17948:	e75a      	b.n	17800 <le_init+0x20>
			return -ENOBUFS;
   1794a:	f06f 0368 	mvn.w	r3, #104	; 0x68
   1794e:	e757      	b.n	17800 <le_init+0x20>
   17950:	20000370 	.word	0x20000370
   17954:	0002c3ac 	.word	0x0002c3ac
   17958:	0002b17c 	.word	0x0002b17c

0001795c <bt_br_init>:
{
   1795c:	b510      	push	{r4, lr}
   1795e:	b082      	sub	sp, #8
	if (bt_dev.le.acl_mtu) {
   17960:	4b0b      	ldr	r3, [pc, #44]	; (17990 <bt_br_init+0x34>)
   17962:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   17966:	b11b      	cbz	r3, 17970 <bt_br_init+0x14>
		return 0;
   17968:	2400      	movs	r4, #0
}
   1796a:	4620      	mov	r0, r4
   1796c:	b002      	add	sp, #8
   1796e:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   17970:	aa01      	add	r2, sp, #4
   17972:	2100      	movs	r1, #0
   17974:	f241 0005 	movw	r0, #4101	; 0x1005
   17978:	f7ff fdb8 	bl	174ec <bt_hci_cmd_send_sync>
	if (err) {
   1797c:	4604      	mov	r4, r0
   1797e:	2800      	cmp	r0, #0
   17980:	d1f3      	bne.n	1796a <bt_br_init+0xe>
	read_buffer_size_complete(rsp);
   17982:	9801      	ldr	r0, [sp, #4]
   17984:	f7fe fdbc 	bl	16500 <read_buffer_size_complete>
	net_buf_unref(rsp);
   17988:	9801      	ldr	r0, [sp, #4]
   1798a:	f010 fcbf 	bl	2830c <net_buf_unref>
	return 0;
   1798e:	e7ec      	b.n	1796a <bt_br_init+0xe>
   17990:	20000370 	.word	0x20000370

00017994 <set_event_mask>:
{
   17994:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   17996:	2108      	movs	r1, #8
   17998:	f640 4001 	movw	r0, #3073	; 0xc01
   1799c:	f7ff fd68 	bl	17470 <bt_hci_cmd_create>
	if (!buf) {
   179a0:	b188      	cbz	r0, 179c6 <set_event_mask+0x32>
   179a2:	4604      	mov	r4, r0
   179a4:	2108      	movs	r1, #8
   179a6:	300c      	adds	r0, #12
   179a8:	f010 fcf7 	bl	2839a <net_buf_simple_add>
   179ac:	4602      	mov	r2, r0
	sys_put_le64(mask, ev->events);
   179ae:	4807      	ldr	r0, [pc, #28]	; (179cc <set_event_mask+0x38>)
   179b0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   179b4:	f00e fc0e 	bl	261d4 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   179b8:	2200      	movs	r2, #0
   179ba:	4621      	mov	r1, r4
   179bc:	f640 4001 	movw	r0, #3073	; 0xc01
   179c0:	f7ff fd94 	bl	174ec <bt_hci_cmd_send_sync>
}
   179c4:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
   179c6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   179ca:	e7fb      	b.n	179c4 <set_event_mask+0x30>
   179cc:	02008810 	.word	0x02008810

000179d0 <hci_vs_init>:
{
   179d0:	b510      	push	{r4, lr}
   179d2:	b094      	sub	sp, #80	; 0x50
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   179d4:	aa01      	add	r2, sp, #4
   179d6:	2100      	movs	r1, #0
   179d8:	f64f 4001 	movw	r0, #64513	; 0xfc01
   179dc:	f7ff fd86 	bl	174ec <bt_hci_cmd_send_sync>
	if (err) {
   179e0:	bb60      	cbnz	r0, 17a3c <hci_vs_init+0x6c>
	net_buf_unref(rsp);
   179e2:	9801      	ldr	r0, [sp, #4]
   179e4:	f010 fc92 	bl	2830c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   179e8:	aa01      	add	r2, sp, #4
   179ea:	2100      	movs	r1, #0
   179ec:	f64f 4002 	movw	r0, #64514	; 0xfc02
   179f0:	f7ff fd7c 	bl	174ec <bt_hci_cmd_send_sync>
	if (err) {
   179f4:	2800      	cmp	r0, #0
   179f6:	d147      	bne.n	17a88 <hci_vs_init+0xb8>
	rp.cmds = (void *)rsp->data;
   179f8:	9b01      	ldr	r3, [sp, #4]
   179fa:	68d9      	ldr	r1, [r3, #12]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   179fc:	4c47      	ldr	r4, [pc, #284]	; (17b1c <hci_vs_init+0x14c>)
   179fe:	2202      	movs	r2, #2
   17a00:	3101      	adds	r1, #1
   17a02:	4620      	mov	r0, r4
   17a04:	f00e fb0f 	bl	26026 <memcpy>
	net_buf_unref(rsp);
   17a08:	9801      	ldr	r0, [sp, #4]
   17a0a:	f010 fc7f 	bl	2830c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   17a0e:	7823      	ldrb	r3, [r4, #0]
   17a10:	f013 0f04 	tst.w	r3, #4
   17a14:	d036      	beq.n	17a84 <hci_vs_init+0xb4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   17a16:	aa01      	add	r2, sp, #4
   17a18:	2100      	movs	r1, #0
   17a1a:	f64f 4003 	movw	r0, #64515	; 0xfc03
   17a1e:	f7ff fd65 	bl	174ec <bt_hci_cmd_send_sync>
		if (err) {
   17a22:	2800      	cmp	r0, #0
   17a24:	d155      	bne.n	17ad2 <hci_vs_init+0x102>
		rp.feat = (void *)rsp->data;
   17a26:	9b01      	ldr	r3, [sp, #4]
   17a28:	68d9      	ldr	r1, [r3, #12]
		memcpy(bt_dev.vs_features, rp.feat->features,
   17a2a:	2201      	movs	r2, #1
   17a2c:	4411      	add	r1, r2
   17a2e:	483c      	ldr	r0, [pc, #240]	; (17b20 <hci_vs_init+0x150>)
   17a30:	f00e faf9 	bl	26026 <memcpy>
		net_buf_unref(rsp);
   17a34:	9801      	ldr	r0, [sp, #4]
   17a36:	f010 fc69 	bl	2830c <net_buf_unref>
   17a3a:	e023      	b.n	17a84 <hci_vs_init+0xb4>
		LOG_WRN("Vendor HCI extensions not available");
   17a3c:	4b39      	ldr	r3, [pc, #228]	; (17b24 <hci_vs_init+0x154>)
   17a3e:	9313      	str	r3, [sp, #76]	; 0x4c
   17a40:	2202      	movs	r2, #2
   17a42:	f88d 2000 	strb.w	r2, [sp]
   17a46:	2300      	movs	r3, #0
   17a48:	f88d 3001 	strb.w	r3, [sp, #1]
   17a4c:	f88d 3002 	strb.w	r3, [sp, #2]
   17a50:	f88d 3003 	strb.w	r3, [sp, #3]
   17a54:	9900      	ldr	r1, [sp, #0]
   17a56:	9112      	str	r1, [sp, #72]	; 0x48
   17a58:	4619      	mov	r1, r3
   17a5a:	f363 0100 	bfi	r1, r3, #0, #1
   17a5e:	f363 0141 	bfi	r1, r3, #1, #1
   17a62:	f363 0182 	bfi	r1, r3, #2, #1
   17a66:	f363 01c5 	bfi	r1, r3, #3, #3
   17a6a:	f362 1188 	bfi	r1, r2, #6, #3
   17a6e:	2208      	movs	r2, #8
   17a70:	f362 2152 	bfi	r1, r2, #9, #10
   17a74:	f363 41de 	bfi	r1, r3, #19, #12
   17a78:	f363 71df 	bfi	r1, r3, #31, #1
   17a7c:	aa12      	add	r2, sp, #72	; 0x48
   17a7e:	482a      	ldr	r0, [pc, #168]	; (17b28 <hci_vs_init+0x158>)
   17a80:	f00d fe97 	bl	257b2 <z_impl_z_log_msg_static_create>
}
   17a84:	b014      	add	sp, #80	; 0x50
   17a86:	bd10      	pop	{r4, pc}
		LOG_WRN("Failed to read supported vendor commands");
   17a88:	4b28      	ldr	r3, [pc, #160]	; (17b2c <hci_vs_init+0x15c>)
   17a8a:	930d      	str	r3, [sp, #52]	; 0x34
   17a8c:	2202      	movs	r2, #2
   17a8e:	f88d 2000 	strb.w	r2, [sp]
   17a92:	2300      	movs	r3, #0
   17a94:	f88d 3001 	strb.w	r3, [sp, #1]
   17a98:	f88d 3002 	strb.w	r3, [sp, #2]
   17a9c:	f88d 3003 	strb.w	r3, [sp, #3]
   17aa0:	9900      	ldr	r1, [sp, #0]
   17aa2:	910c      	str	r1, [sp, #48]	; 0x30
   17aa4:	4619      	mov	r1, r3
   17aa6:	f363 0100 	bfi	r1, r3, #0, #1
   17aaa:	f363 0141 	bfi	r1, r3, #1, #1
   17aae:	f363 0182 	bfi	r1, r3, #2, #1
   17ab2:	f363 01c5 	bfi	r1, r3, #3, #3
   17ab6:	f362 1188 	bfi	r1, r2, #6, #3
   17aba:	2208      	movs	r2, #8
   17abc:	f362 2152 	bfi	r1, r2, #9, #10
   17ac0:	f363 41de 	bfi	r1, r3, #19, #12
   17ac4:	f363 71df 	bfi	r1, r3, #31, #1
   17ac8:	aa0c      	add	r2, sp, #48	; 0x30
   17aca:	4817      	ldr	r0, [pc, #92]	; (17b28 <hci_vs_init+0x158>)
   17acc:	f00d fe71 	bl	257b2 <z_impl_z_log_msg_static_create>
		return;
   17ad0:	e7d8      	b.n	17a84 <hci_vs_init+0xb4>
			LOG_WRN("Failed to read supported vendor features");
   17ad2:	4b17      	ldr	r3, [pc, #92]	; (17b30 <hci_vs_init+0x160>)
   17ad4:	9307      	str	r3, [sp, #28]
   17ad6:	2202      	movs	r2, #2
   17ad8:	f88d 2000 	strb.w	r2, [sp]
   17adc:	2300      	movs	r3, #0
   17ade:	f88d 3001 	strb.w	r3, [sp, #1]
   17ae2:	f88d 3002 	strb.w	r3, [sp, #2]
   17ae6:	f88d 3003 	strb.w	r3, [sp, #3]
   17aea:	9900      	ldr	r1, [sp, #0]
   17aec:	9106      	str	r1, [sp, #24]
   17aee:	4619      	mov	r1, r3
   17af0:	f363 0100 	bfi	r1, r3, #0, #1
   17af4:	f363 0141 	bfi	r1, r3, #1, #1
   17af8:	f363 0182 	bfi	r1, r3, #2, #1
   17afc:	f363 01c5 	bfi	r1, r3, #3, #3
   17b00:	f362 1188 	bfi	r1, r2, #6, #3
   17b04:	2208      	movs	r2, #8
   17b06:	f362 2152 	bfi	r1, r2, #9, #10
   17b0a:	f363 41de 	bfi	r1, r3, #19, #12
   17b0e:	f363 71df 	bfi	r1, r3, #31, #1
   17b12:	aa06      	add	r2, sp, #24
   17b14:	4804      	ldr	r0, [pc, #16]	; (17b28 <hci_vs_init+0x158>)
   17b16:	f00d fe4c 	bl	257b2 <z_impl_z_log_msg_static_create>
			return;
   17b1a:	e7b3      	b.n	17a84 <hci_vs_init+0xb4>
   17b1c:	20000429 	.word	0x20000429
   17b20:	20000428 	.word	0x20000428
   17b24:	0002c3d0 	.word	0x0002c3d0
   17b28:	0002b17c 	.word	0x0002b17c
   17b2c:	0002c3f4 	.word	0x0002c3f4
   17b30:	0002c420 	.word	0x0002c420

00017b34 <hci_init>:
{
   17b34:	b500      	push	{lr}
   17b36:	b089      	sub	sp, #36	; 0x24
	err = common_init();
   17b38:	f7ff fd90 	bl	1765c <common_init>
	if (err) {
   17b3c:	4603      	mov	r3, r0
   17b3e:	b118      	cbz	r0, 17b48 <hci_init+0x14>
}
   17b40:	4618      	mov	r0, r3
   17b42:	b009      	add	sp, #36	; 0x24
   17b44:	f85d fb04 	ldr.w	pc, [sp], #4
	err = le_init();
   17b48:	f7ff fe4a 	bl	177e0 <le_init>
	if (err) {
   17b4c:	4603      	mov	r3, r0
   17b4e:	2800      	cmp	r0, #0
   17b50:	d1f6      	bne.n	17b40 <hci_init+0xc>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   17b52:	4b21      	ldr	r3, [pc, #132]	; (17bd8 <hci_init+0xa4>)
   17b54:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   17b58:	f013 0f20 	tst.w	r3, #32
   17b5c:	d00e      	beq.n	17b7c <hci_init+0x48>
	else if (!bt_dev.le.acl_mtu) {
   17b5e:	4b1e      	ldr	r3, [pc, #120]	; (17bd8 <hci_init+0xa4>)
   17b60:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   17b64:	b183      	cbz	r3, 17b88 <hci_init+0x54>
	err = set_event_mask();
   17b66:	f7ff ff15 	bl	17994 <set_event_mask>
	if (err) {
   17b6a:	4603      	mov	r3, r0
   17b6c:	2800      	cmp	r0, #0
   17b6e:	d1e7      	bne.n	17b40 <hci_init+0xc>
	hci_vs_init();
   17b70:	f7ff ff2e 	bl	179d0 <hci_vs_init>
	err = bt_id_init();
   17b74:	f001 fb3e 	bl	191f4 <bt_id_init>
   17b78:	4603      	mov	r3, r0
	if (err) {
   17b7a:	e7e1      	b.n	17b40 <hci_init+0xc>
		err = bt_br_init();
   17b7c:	f7ff feee 	bl	1795c <bt_br_init>
		if (err) {
   17b80:	4603      	mov	r3, r0
   17b82:	2800      	cmp	r0, #0
   17b84:	d0ef      	beq.n	17b66 <hci_init+0x32>
   17b86:	e7db      	b.n	17b40 <hci_init+0xc>
		LOG_ERR("ACL BR/EDR buffers not initialized");
   17b88:	4b14      	ldr	r3, [pc, #80]	; (17bdc <hci_init+0xa8>)
   17b8a:	9307      	str	r3, [sp, #28]
   17b8c:	2302      	movs	r3, #2
   17b8e:	f88d 3004 	strb.w	r3, [sp, #4]
   17b92:	2300      	movs	r3, #0
   17b94:	f88d 3005 	strb.w	r3, [sp, #5]
   17b98:	f88d 3006 	strb.w	r3, [sp, #6]
   17b9c:	f88d 3007 	strb.w	r3, [sp, #7]
   17ba0:	9a01      	ldr	r2, [sp, #4]
   17ba2:	9206      	str	r2, [sp, #24]
   17ba4:	4619      	mov	r1, r3
   17ba6:	f363 0100 	bfi	r1, r3, #0, #1
   17baa:	f363 0141 	bfi	r1, r3, #1, #1
   17bae:	f363 0182 	bfi	r1, r3, #2, #1
   17bb2:	f363 01c5 	bfi	r1, r3, #3, #3
   17bb6:	2201      	movs	r2, #1
   17bb8:	f362 1188 	bfi	r1, r2, #6, #3
   17bbc:	2208      	movs	r2, #8
   17bbe:	f362 2152 	bfi	r1, r2, #9, #10
   17bc2:	f363 41de 	bfi	r1, r3, #19, #12
   17bc6:	f363 71df 	bfi	r1, r3, #31, #1
   17bca:	aa06      	add	r2, sp, #24
   17bcc:	4804      	ldr	r0, [pc, #16]	; (17be0 <hci_init+0xac>)
   17bce:	f00d fdf0 	bl	257b2 <z_impl_z_log_msg_static_create>
		return -EIO;
   17bd2:	f06f 0304 	mvn.w	r3, #4
   17bd6:	e7b3      	b.n	17b40 <hci_init+0xc>
   17bd8:	20000370 	.word	0x20000370
   17bdc:	0002c44c 	.word	0x0002c44c
   17be0:	0002b17c 	.word	0x0002b17c

00017be4 <bt_le_create_conn_legacy>:
{
   17be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17be8:	b086      	sub	sp, #24
   17bea:	4604      	mov	r4, r0
		use_filter = atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT);
   17bec:	2100      	movs	r1, #0
   17bee:	3004      	adds	r0, #4
   17bf0:	f00e fb33 	bl	2625a <atomic_test_bit>
   17bf4:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
   17bf6:	f10d 010b 	add.w	r1, sp, #11
   17bfa:	f001 fac9 	bl	19190 <bt_id_set_create_conn_own_addr>
	if (err) {
   17bfe:	b110      	cbz	r0, 17c06 <bt_le_create_conn_legacy+0x22>
}
   17c00:	b006      	add	sp, #24
   17c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
   17c06:	2119      	movs	r1, #25
   17c08:	f242 000d 	movw	r0, #8205	; 0x200d
   17c0c:	f7ff fc30 	bl	17470 <bt_hci_cmd_create>
	if (!buf) {
   17c10:	4607      	mov	r7, r0
   17c12:	2800      	cmp	r0, #0
   17c14:	d04b      	beq.n	17cae <bt_le_create_conn_legacy+0xca>
   17c16:	2119      	movs	r1, #25
   17c18:	300c      	adds	r0, #12
   17c1a:	f010 fbbe 	bl	2839a <net_buf_simple_add>
   17c1e:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
   17c20:	2219      	movs	r2, #25
   17c22:	2100      	movs	r1, #0
   17c24:	f00e fa2e 	bl	26084 <memset>
	cp->own_addr_type = own_addr_type;
   17c28:	f89d 300b 	ldrb.w	r3, [sp, #11]
   17c2c:	732b      	strb	r3, [r5, #12]
	if (use_filter) {
   17c2e:	b35e      	cbz	r6, 17c88 <bt_le_create_conn_legacy+0xa4>
	memcpy(dst, src, sizeof(*dst));
   17c30:	2207      	movs	r2, #7
   17c32:	4920      	ldr	r1, [pc, #128]	; (17cb4 <bt_le_create_conn_legacy+0xd0>)
   17c34:	1d68      	adds	r0, r5, #5
   17c36:	f00e f9f6 	bl	26026 <memcpy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_FILTER;
   17c3a:	2301      	movs	r3, #1
   17c3c:	712b      	strb	r3, [r5, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   17c3e:	4a1e      	ldr	r2, [pc, #120]	; (17cb8 <bt_le_create_conn_legacy+0xd4>)
   17c40:	8993      	ldrh	r3, [r2, #12]
   17c42:	802b      	strh	r3, [r5, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   17c44:	89d3      	ldrh	r3, [r2, #14]
   17c46:	806b      	strh	r3, [r5, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   17c48:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
   17c4c:	f8a5 300d 	strh.w	r3, [r5, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
   17c50:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
   17c54:	f8a5 300f 	strh.w	r3, [r5, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
   17c58:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   17c5c:	f8a5 3011 	strh.w	r3, [r5, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
   17c60:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   17c64:	f8a5 3013 	strh.w	r3, [r5, #19]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   17c68:	2301      	movs	r3, #1
   17c6a:	9300      	str	r3, [sp, #0]
   17c6c:	230c      	movs	r3, #12
   17c6e:	32cc      	adds	r2, #204	; 0xcc
   17c70:	eb0d 0103 	add.w	r1, sp, r3
   17c74:	4638      	mov	r0, r7
   17c76:	f7ff fbe9 	bl	1744c <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   17c7a:	2200      	movs	r2, #0
   17c7c:	4639      	mov	r1, r7
   17c7e:	f242 000d 	movw	r0, #8205	; 0x200d
   17c82:	f7ff fc33 	bl	174ec <bt_hci_cmd_send_sync>
   17c86:	e7bb      	b.n	17c00 <bt_le_create_conn_legacy+0x1c>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
   17c88:	f104 0888 	add.w	r8, r4, #136	; 0x88
		if (!bt_addr_le_eq(&conn->le.resp_addr, BT_ADDR_LE_ANY)) {
   17c8c:	f104 0696 	add.w	r6, r4, #150	; 0x96
	return memcmp(a, b, sizeof(*a));
   17c90:	2207      	movs	r2, #7
   17c92:	4908      	ldr	r1, [pc, #32]	; (17cb4 <bt_le_create_conn_legacy+0xd0>)
   17c94:	4630      	mov	r0, r6
   17c96:	f00e f9b4 	bl	26002 <memcmp>
   17c9a:	b900      	cbnz	r0, 17c9e <bt_le_create_conn_legacy+0xba>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
   17c9c:	4646      	mov	r6, r8
	memcpy(dst, src, sizeof(*dst));
   17c9e:	2207      	movs	r2, #7
   17ca0:	4631      	mov	r1, r6
   17ca2:	1d68      	adds	r0, r5, #5
   17ca4:	f00e f9bf 	bl	26026 <memcpy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   17ca8:	2300      	movs	r3, #0
   17caa:	712b      	strb	r3, [r5, #4]
   17cac:	e7c7      	b.n	17c3e <bt_le_create_conn_legacy+0x5a>
		return -ENOBUFS;
   17cae:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17cb2:	e7a5      	b.n	17c00 <bt_le_create_conn_legacy+0x1c>
   17cb4:	0002bffc 	.word	0x0002bffc
   17cb8:	20000370 	.word	0x20000370

00017cbc <bt_hci_le_rand>:
{
   17cbc:	b570      	push	{r4, r5, r6, lr}
   17cbe:	b082      	sub	sp, #8
   17cc0:	4606      	mov	r6, r0
   17cc2:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   17cc4:	4b12      	ldr	r3, [pc, #72]	; (17d10 <bt_hci_le_rand+0x54>)
   17cc6:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
   17cca:	2b00      	cmp	r3, #0
   17ccc:	da1d      	bge.n	17d0a <bt_hci_le_rand+0x4e>
	while (len > 0) {
   17cce:	b1c4      	cbz	r4, 17d02 <bt_hci_le_rand+0x46>
		count = MIN(len, sizeof(rp->rand));
   17cd0:	4625      	mov	r5, r4
   17cd2:	2c08      	cmp	r4, #8
   17cd4:	bf28      	it	cs
   17cd6:	2508      	movcs	r5, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   17cd8:	aa01      	add	r2, sp, #4
   17cda:	2100      	movs	r1, #0
   17cdc:	f242 0018 	movw	r0, #8216	; 0x2018
   17ce0:	f7ff fc04 	bl	174ec <bt_hci_cmd_send_sync>
		if (err) {
   17ce4:	4603      	mov	r3, r0
   17ce6:	b968      	cbnz	r0, 17d04 <bt_hci_le_rand+0x48>
		rp = (void *)rsp->data;
   17ce8:	9b01      	ldr	r3, [sp, #4]
   17cea:	68d9      	ldr	r1, [r3, #12]
		memcpy(buffer, rp->rand, count);
   17cec:	462a      	mov	r2, r5
   17cee:	3101      	adds	r1, #1
   17cf0:	4630      	mov	r0, r6
   17cf2:	f00e f998 	bl	26026 <memcpy>
		net_buf_unref(rsp);
   17cf6:	9801      	ldr	r0, [sp, #4]
   17cf8:	f010 fb08 	bl	2830c <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   17cfc:	442e      	add	r6, r5
		len -= count;
   17cfe:	1b64      	subs	r4, r4, r5
   17d00:	e7e5      	b.n	17cce <bt_hci_le_rand+0x12>
	return 0;
   17d02:	2300      	movs	r3, #0
}
   17d04:	4618      	mov	r0, r3
   17d06:	b002      	add	sp, #8
   17d08:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   17d0a:	f06f 0385 	mvn.w	r3, #133	; 0x85
   17d0e:	e7f9      	b.n	17d04 <bt_hci_le_rand+0x48>
   17d10:	20000370 	.word	0x20000370

00017d14 <le_conn_complete_cancel>:
{
   17d14:	b510      	push	{r4, lr}
   17d16:	b088      	sub	sp, #32
	conn = find_pending_connect(BT_HCI_ROLE_CENTRAL, NULL);
   17d18:	2100      	movs	r1, #0
   17d1a:	4608      	mov	r0, r1
   17d1c:	f7fe fcb2 	bl	16684 <find_pending_connect>
	if (!conn) {
   17d20:	b178      	cbz	r0, 17d42 <le_conn_complete_cancel+0x2e>
   17d22:	4604      	mov	r4, r0
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   17d24:	2302      	movs	r3, #2
   17d26:	7243      	strb	r3, [r0, #9]
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   17d28:	2100      	movs	r1, #0
   17d2a:	3004      	adds	r0, #4
   17d2c:	f00e fa95 	bl	2625a <atomic_test_bit>
   17d30:	b368      	cbz	r0, 17d8e <le_conn_complete_cancel+0x7a>
			bt_le_create_conn(conn);
   17d32:	4620      	mov	r0, r4
   17d34:	f00e fb0c 	bl	26350 <bt_le_create_conn>
	bt_conn_unref(conn);
   17d38:	4620      	mov	r0, r4
   17d3a:	f00e fdb6 	bl	268aa <bt_conn_unref>
}
   17d3e:	b008      	add	sp, #32
   17d40:	bd10      	pop	{r4, pc}
		LOG_ERR("No pending central connection");
   17d42:	4b15      	ldr	r3, [pc, #84]	; (17d98 <le_conn_complete_cancel+0x84>)
   17d44:	9307      	str	r3, [sp, #28]
   17d46:	2302      	movs	r3, #2
   17d48:	f88d 3004 	strb.w	r3, [sp, #4]
   17d4c:	2300      	movs	r3, #0
   17d4e:	f88d 3005 	strb.w	r3, [sp, #5]
   17d52:	f88d 3006 	strb.w	r3, [sp, #6]
   17d56:	f88d 3007 	strb.w	r3, [sp, #7]
   17d5a:	9a01      	ldr	r2, [sp, #4]
   17d5c:	9206      	str	r2, [sp, #24]
   17d5e:	4619      	mov	r1, r3
   17d60:	f363 0100 	bfi	r1, r3, #0, #1
   17d64:	f363 0141 	bfi	r1, r3, #1, #1
   17d68:	f363 0182 	bfi	r1, r3, #2, #1
   17d6c:	f363 01c5 	bfi	r1, r3, #3, #3
   17d70:	2201      	movs	r2, #1
   17d72:	f362 1188 	bfi	r1, r2, #6, #3
   17d76:	2208      	movs	r2, #8
   17d78:	f362 2152 	bfi	r1, r2, #9, #10
   17d7c:	f363 41de 	bfi	r1, r3, #19, #12
   17d80:	f363 71df 	bfi	r1, r3, #31, #1
   17d84:	aa06      	add	r2, sp, #24
   17d86:	4805      	ldr	r0, [pc, #20]	; (17d9c <le_conn_complete_cancel+0x88>)
   17d88:	f00d fd13 	bl	257b2 <z_impl_z_log_msg_static_create>
		return;
   17d8c:	e7d7      	b.n	17d3e <le_conn_complete_cancel+0x2a>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17d8e:	2100      	movs	r1, #0
   17d90:	4620      	mov	r0, r4
   17d92:	f002 f8cd 	bl	19f30 <bt_conn_set_state>
   17d96:	e7cf      	b.n	17d38 <le_conn_complete_cancel+0x24>
   17d98:	0002c470 	.word	0x0002c470
   17d9c:	0002b17c 	.word	0x0002b17c

00017da0 <bt_le_create_conn_cancel>:
{
   17da0:	b530      	push	{r4, r5, lr}
   17da2:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   17da4:	2100      	movs	r1, #0
   17da6:	f242 000e 	movw	r0, #8206	; 0x200e
   17daa:	f7ff fb61 	bl	17470 <bt_hci_cmd_create>
   17dae:	4604      	mov	r4, r0
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   17db0:	2500      	movs	r5, #0
   17db2:	9500      	str	r5, [sp, #0]
   17db4:	230c      	movs	r3, #12
   17db6:	4a06      	ldr	r2, [pc, #24]	; (17dd0 <bt_le_create_conn_cancel+0x30>)
   17db8:	eb0d 0103 	add.w	r1, sp, r3
   17dbc:	f7ff fb46 	bl	1744c <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
   17dc0:	462a      	mov	r2, r5
   17dc2:	4621      	mov	r1, r4
   17dc4:	f242 000e 	movw	r0, #8206	; 0x200e
   17dc8:	f7ff fb90 	bl	174ec <bt_hci_cmd_send_sync>
}
   17dcc:	b007      	add	sp, #28
   17dce:	bd30      	pop	{r4, r5, pc}
   17dd0:	2000043c 	.word	0x2000043c

00017dd4 <conn_auto_initiate>:
	if (conn->state != BT_CONN_CONNECTED) {
   17dd4:	7a83      	ldrb	r3, [r0, #10]
   17dd6:	2b07      	cmp	r3, #7
   17dd8:	d000      	beq.n	17ddc <conn_auto_initiate+0x8>
   17dda:	4770      	bx	lr
{
   17ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
   17dde:	b085      	sub	sp, #20
   17de0:	af02      	add	r7, sp, #8
   17de2:	4604      	mov	r4, r0
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   17de4:	210c      	movs	r1, #12
   17de6:	3004      	adds	r0, #4
   17de8:	f00e fa37 	bl	2625a <atomic_test_bit>
   17dec:	2800      	cmp	r0, #0
   17dee:	d144      	bne.n	17e7a <conn_auto_initiate+0xa6>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   17df0:	78e3      	ldrb	r3, [r4, #3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   17df2:	b12b      	cbz	r3, 17e00 <conn_auto_initiate+0x2c>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   17df4:	4b7a      	ldr	r3, [pc, #488]	; (17fe0 <conn_auto_initiate+0x20c>)
   17df6:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   17dfa:	f013 0f08 	tst.w	r3, #8
   17dfe:	d03c      	beq.n	17e7a <conn_auto_initiate+0xa6>
		err = hci_le_read_remote_features(conn);
   17e00:	4620      	mov	r0, r4
   17e02:	f00e fa8c 	bl	2631e <hci_le_read_remote_features>
		if (err) {
   17e06:	4606      	mov	r6, r0
   17e08:	b3b8      	cbz	r0, 17e7a <conn_auto_initiate+0xa6>
			LOG_ERR("Failed read remote features (%d)", err);
   17e0a:	466d      	mov	r5, sp
   17e0c:	b088      	sub	sp, #32
   17e0e:	ab02      	add	r3, sp, #8
   17e10:	f113 0210 	adds.w	r2, r3, #16
   17e14:	d04b      	beq.n	17eae <conn_auto_initiate+0xda>
   17e16:	210c      	movs	r1, #12
   17e18:	b14a      	cbz	r2, 17e2e <conn_auto_initiate+0x5a>
   17e1a:	4608      	mov	r0, r1
   17e1c:	2904      	cmp	r1, #4
   17e1e:	dd03      	ble.n	17e28 <conn_auto_initiate+0x54>
   17e20:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 17fe4 <conn_auto_initiate+0x210>
   17e24:	f8c3 c014 	str.w	ip, [r3, #20]
   17e28:	2808      	cmp	r0, #8
   17e2a:	dd00      	ble.n	17e2e <conn_auto_initiate+0x5a>
   17e2c:	619e      	str	r6, [r3, #24]
   17e2e:	290b      	cmp	r1, #11
   17e30:	dd40      	ble.n	17eb4 <conn_auto_initiate+0xe0>
   17e32:	f04f 0c0c 	mov.w	ip, #12
   17e36:	b13a      	cbz	r2, 17e48 <conn_auto_initiate+0x74>
   17e38:	2103      	movs	r1, #3
   17e3a:	7139      	strb	r1, [r7, #4]
   17e3c:	2100      	movs	r1, #0
   17e3e:	7179      	strb	r1, [r7, #5]
   17e40:	71b9      	strb	r1, [r7, #6]
   17e42:	71f9      	strb	r1, [r7, #7]
   17e44:	6878      	ldr	r0, [r7, #4]
   17e46:	6118      	str	r0, [r3, #16]
   17e48:	2100      	movs	r1, #0
   17e4a:	f36f 0100 	bfc	r1, #0, #1
   17e4e:	f36f 0141 	bfc	r1, #1, #1
   17e52:	f36f 0182 	bfc	r1, #2, #1
   17e56:	f36f 01c5 	bfc	r1, #3, #3
   17e5a:	2301      	movs	r3, #1
   17e5c:	f363 1188 	bfi	r1, r3, #6, #3
   17e60:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   17e64:	f36c 2152 	bfi	r1, ip, #9, #10
   17e68:	f36f 41de 	bfc	r1, #19, #12
   17e6c:	f36f 71df 	bfc	r1, #31, #1
   17e70:	2300      	movs	r3, #0
   17e72:	485d      	ldr	r0, [pc, #372]	; (17fe8 <conn_auto_initiate+0x214>)
   17e74:	f00d fc9d 	bl	257b2 <z_impl_z_log_msg_static_create>
   17e78:	46ad      	mov	sp, r5
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
   17e7a:	4b59      	ldr	r3, [pc, #356]	; (17fe0 <conn_auto_initiate+0x20c>)
   17e7c:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   17e80:	f013 0f01 	tst.w	r3, #1
   17e84:	d003      	beq.n	17e8e <conn_auto_initiate+0xba>
	    !skip_auto_phy_update_on_conn_establishment(conn)) {
   17e86:	4620      	mov	r0, r4
   17e88:	f00e f9e4 	bl	26254 <skip_auto_phy_update_on_conn_establishment>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
   17e8c:	b1a8      	cbz	r0, 17eba <conn_auto_initiate+0xe6>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   17e8e:	4b54      	ldr	r3, [pc, #336]	; (17fe0 <conn_auto_initiate+0x20c>)
   17e90:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   17e94:	f013 0f20 	tst.w	r3, #32
   17e98:	d006      	beq.n	17ea8 <conn_auto_initiate+0xd4>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   17e9a:	4b51      	ldr	r3, [pc, #324]	; (17fe0 <conn_auto_initiate+0x20c>)
   17e9c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   17ea0:	689b      	ldr	r3, [r3, #8]
   17ea2:	f013 0f02 	tst.w	r3, #2
   17ea6:	d150      	bne.n	17f4a <conn_auto_initiate+0x176>
}
   17ea8:	370c      	adds	r7, #12
   17eaa:	46bd      	mov	sp, r7
   17eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_ERR("Failed read remote features (%d)", err);
   17eae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17eb2:	e7b1      	b.n	17e18 <conn_auto_initiate+0x44>
   17eb4:	f06f 0c1b 	mvn.w	ip, #27
   17eb8:	e7bd      	b.n	17e36 <conn_auto_initiate+0x62>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   17eba:	2100      	movs	r1, #0
   17ebc:	9100      	str	r1, [sp, #0]
   17ebe:	2302      	movs	r3, #2
   17ec0:	461a      	mov	r2, r3
   17ec2:	4620      	mov	r0, r4
   17ec4:	f00e fa7f 	bl	263c6 <bt_le_set_phy>
		if (err) {
   17ec8:	4605      	mov	r5, r0
   17eca:	2800      	cmp	r0, #0
   17ecc:	d0df      	beq.n	17e8e <conn_auto_initiate+0xba>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   17ece:	466e      	mov	r6, sp
   17ed0:	b088      	sub	sp, #32
   17ed2:	ab02      	add	r3, sp, #8
   17ed4:	f113 0210 	adds.w	r2, r3, #16
   17ed8:	d031      	beq.n	17f3e <conn_auto_initiate+0x16a>
   17eda:	210c      	movs	r1, #12
   17edc:	b14a      	cbz	r2, 17ef2 <conn_auto_initiate+0x11e>
   17ede:	4608      	mov	r0, r1
   17ee0:	2904      	cmp	r1, #4
   17ee2:	dd03      	ble.n	17eec <conn_auto_initiate+0x118>
   17ee4:	f8df c104 	ldr.w	ip, [pc, #260]	; 17fec <conn_auto_initiate+0x218>
   17ee8:	f8c3 c014 	str.w	ip, [r3, #20]
   17eec:	2808      	cmp	r0, #8
   17eee:	dd00      	ble.n	17ef2 <conn_auto_initiate+0x11e>
   17ef0:	619d      	str	r5, [r3, #24]
   17ef2:	290b      	cmp	r1, #11
   17ef4:	dd26      	ble.n	17f44 <conn_auto_initiate+0x170>
   17ef6:	250c      	movs	r5, #12
   17ef8:	b13a      	cbz	r2, 17f0a <conn_auto_initiate+0x136>
   17efa:	2103      	movs	r1, #3
   17efc:	7139      	strb	r1, [r7, #4]
   17efe:	2100      	movs	r1, #0
   17f00:	7179      	strb	r1, [r7, #5]
   17f02:	71b9      	strb	r1, [r7, #6]
   17f04:	71f9      	strb	r1, [r7, #7]
   17f06:	6878      	ldr	r0, [r7, #4]
   17f08:	6118      	str	r0, [r3, #16]
   17f0a:	2100      	movs	r1, #0
   17f0c:	f36f 0100 	bfc	r1, #0, #1
   17f10:	f36f 0141 	bfc	r1, #1, #1
   17f14:	f36f 0182 	bfc	r1, #2, #1
   17f18:	f36f 01c5 	bfc	r1, #3, #3
   17f1c:	2301      	movs	r3, #1
   17f1e:	f363 1188 	bfi	r1, r3, #6, #3
   17f22:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   17f26:	f363 2152 	bfi	r1, r3, #9, #10
   17f2a:	f36f 41de 	bfc	r1, #19, #12
   17f2e:	f36f 71df 	bfc	r1, #31, #1
   17f32:	2300      	movs	r3, #0
   17f34:	482c      	ldr	r0, [pc, #176]	; (17fe8 <conn_auto_initiate+0x214>)
   17f36:	f00d fc3c 	bl	257b2 <z_impl_z_log_msg_static_create>
   17f3a:	46b5      	mov	sp, r6
   17f3c:	e7a7      	b.n	17e8e <conn_auto_initiate+0xba>
   17f3e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17f42:	e7cb      	b.n	17edc <conn_auto_initiate+0x108>
   17f44:	f06f 051b 	mvn.w	r5, #27
   17f48:	e7d6      	b.n	17ef8 <conn_auto_initiate+0x124>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   17f4a:	1cb9      	adds	r1, r7, #2
   17f4c:	4638      	mov	r0, r7
   17f4e:	f7ff fbcf 	bl	176f0 <hci_le_read_max_data_len>
			if (!err) {
   17f52:	2800      	cmp	r0, #0
   17f54:	d1a8      	bne.n	17ea8 <conn_auto_initiate+0xd4>
				err = bt_le_set_data_len(conn,
   17f56:	887a      	ldrh	r2, [r7, #2]
   17f58:	8839      	ldrh	r1, [r7, #0]
   17f5a:	4620      	mov	r0, r4
   17f5c:	f00e fa16 	bl	2638c <bt_le_set_data_len>
				if (err) {
   17f60:	4604      	mov	r4, r0
   17f62:	2800      	cmp	r0, #0
   17f64:	d0a0      	beq.n	17ea8 <conn_auto_initiate+0xd4>
					LOG_ERR("Failed to set data len (%d)", err);
   17f66:	466d      	mov	r5, sp
   17f68:	b088      	sub	sp, #32
   17f6a:	ab02      	add	r3, sp, #8
   17f6c:	f113 0210 	adds.w	r2, r3, #16
   17f70:	d02f      	beq.n	17fd2 <conn_auto_initiate+0x1fe>
   17f72:	210c      	movs	r1, #12
   17f74:	b13a      	cbz	r2, 17f86 <conn_auto_initiate+0x1b2>
   17f76:	4608      	mov	r0, r1
   17f78:	2904      	cmp	r1, #4
   17f7a:	dd01      	ble.n	17f80 <conn_auto_initiate+0x1ac>
   17f7c:	4e1c      	ldr	r6, [pc, #112]	; (17ff0 <conn_auto_initiate+0x21c>)
   17f7e:	615e      	str	r6, [r3, #20]
   17f80:	2808      	cmp	r0, #8
   17f82:	dd00      	ble.n	17f86 <conn_auto_initiate+0x1b2>
   17f84:	619c      	str	r4, [r3, #24]
   17f86:	290b      	cmp	r1, #11
   17f88:	dd26      	ble.n	17fd8 <conn_auto_initiate+0x204>
   17f8a:	240c      	movs	r4, #12
   17f8c:	b13a      	cbz	r2, 17f9e <conn_auto_initiate+0x1ca>
   17f8e:	2103      	movs	r1, #3
   17f90:	7139      	strb	r1, [r7, #4]
   17f92:	2100      	movs	r1, #0
   17f94:	7179      	strb	r1, [r7, #5]
   17f96:	71b9      	strb	r1, [r7, #6]
   17f98:	71f9      	strb	r1, [r7, #7]
   17f9a:	6878      	ldr	r0, [r7, #4]
   17f9c:	6118      	str	r0, [r3, #16]
   17f9e:	2100      	movs	r1, #0
   17fa0:	f36f 0100 	bfc	r1, #0, #1
   17fa4:	f36f 0141 	bfc	r1, #1, #1
   17fa8:	f36f 0182 	bfc	r1, #2, #1
   17fac:	f36f 01c5 	bfc	r1, #3, #3
   17fb0:	2301      	movs	r3, #1
   17fb2:	f363 1188 	bfi	r1, r3, #6, #3
   17fb6:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   17fba:	f363 2152 	bfi	r1, r3, #9, #10
   17fbe:	f36f 41de 	bfc	r1, #19, #12
   17fc2:	f36f 71df 	bfc	r1, #31, #1
   17fc6:	2300      	movs	r3, #0
   17fc8:	4807      	ldr	r0, [pc, #28]	; (17fe8 <conn_auto_initiate+0x214>)
   17fca:	f00d fbf2 	bl	257b2 <z_impl_z_log_msg_static_create>
   17fce:	46ad      	mov	sp, r5
		}
   17fd0:	e76a      	b.n	17ea8 <conn_auto_initiate+0xd4>
					LOG_ERR("Failed to set data len (%d)", err);
   17fd2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17fd6:	e7cd      	b.n	17f74 <conn_auto_initiate+0x1a0>
   17fd8:	f06f 041b 	mvn.w	r4, #27
   17fdc:	e7d6      	b.n	17f8c <conn_auto_initiate+0x1b8>
   17fde:	bf00      	nop
   17fe0:	20000370 	.word	0x20000370
   17fe4:	0002c490 	.word	0x0002c490
   17fe8:	0002b17c 	.word	0x0002b17c
   17fec:	0002c4b4 	.word	0x0002c4b4
   17ff0:	0002c4cc 	.word	0x0002c4cc

00017ff4 <bt_hci_le_enh_conn_complete>:
{
   17ff4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17ff8:	b087      	sub	sp, #28
   17ffa:	af00      	add	r7, sp, #0
   17ffc:	4604      	mov	r4, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17ffe:	f8b0 8001 	ldrh.w	r8, [r0, #1]
   18002:	fa1f f988 	uxth.w	r9, r8
	bool is_disconnected = conn_handle_is_disconnected(handle);
   18006:	4648      	mov	r0, r9
   18008:	f7fe f9f4 	bl	163f4 <conn_handle_is_disconnected>
   1800c:	4606      	mov	r6, r0
	if (evt->status) {
   1800e:	7820      	ldrb	r0, [r4, #0]
   18010:	2800      	cmp	r0, #0
   18012:	d046      	beq.n	180a2 <bt_hci_le_enh_conn_complete+0xae>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   18014:	2802      	cmp	r0, #2
   18016:	d038      	beq.n	1808a <bt_hci_le_enh_conn_complete+0x96>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   18018:	466d      	mov	r5, sp
   1801a:	b088      	sub	sp, #32
   1801c:	466b      	mov	r3, sp
   1801e:	f113 0210 	adds.w	r2, r3, #16
   18022:	d038      	beq.n	18096 <bt_hci_le_enh_conn_complete+0xa2>
   18024:	210c      	movs	r1, #12
   18026:	b13a      	cbz	r2, 18038 <bt_hci_le_enh_conn_complete+0x44>
   18028:	460c      	mov	r4, r1
   1802a:	2904      	cmp	r1, #4
   1802c:	dd01      	ble.n	18032 <bt_hci_le_enh_conn_complete+0x3e>
   1802e:	4e91      	ldr	r6, [pc, #580]	; (18274 <bt_hci_le_enh_conn_complete+0x280>)
   18030:	615e      	str	r6, [r3, #20]
   18032:	2c08      	cmp	r4, #8
   18034:	dd00      	ble.n	18038 <bt_hci_le_enh_conn_complete+0x44>
   18036:	6198      	str	r0, [r3, #24]
   18038:	290b      	cmp	r1, #11
   1803a:	dd2f      	ble.n	1809c <bt_hci_le_enh_conn_complete+0xa8>
   1803c:	240c      	movs	r4, #12
   1803e:	b13a      	cbz	r2, 18050 <bt_hci_le_enh_conn_complete+0x5c>
   18040:	2103      	movs	r1, #3
   18042:	7139      	strb	r1, [r7, #4]
   18044:	2100      	movs	r1, #0
   18046:	7179      	strb	r1, [r7, #5]
   18048:	71b9      	strb	r1, [r7, #6]
   1804a:	71f9      	strb	r1, [r7, #7]
   1804c:	6878      	ldr	r0, [r7, #4]
   1804e:	6118      	str	r0, [r3, #16]
   18050:	2100      	movs	r1, #0
   18052:	f36f 0100 	bfc	r1, #0, #1
   18056:	f36f 0141 	bfc	r1, #1, #1
   1805a:	f36f 0182 	bfc	r1, #2, #1
   1805e:	f36f 01c5 	bfc	r1, #3, #3
   18062:	2302      	movs	r3, #2
   18064:	f363 1188 	bfi	r1, r3, #6, #3
   18068:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1806c:	f364 2152 	bfi	r1, r4, #9, #10
   18070:	f36f 41de 	bfc	r1, #19, #12
   18074:	f36f 71df 	bfc	r1, #31, #1
   18078:	2300      	movs	r3, #0
   1807a:	487f      	ldr	r0, [pc, #508]	; (18278 <bt_hci_le_enh_conn_complete+0x284>)
   1807c:	f00d fb99 	bl	257b2 <z_impl_z_log_msg_static_create>
   18080:	46ad      	mov	sp, r5
}
   18082:	371c      	adds	r7, #28
   18084:	46bd      	mov	sp, r7
   18086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			le_conn_complete_cancel();
   1808a:	f7ff fe43 	bl	17d14 <le_conn_complete_cancel>
			bt_le_scan_update(false);
   1808e:	2000      	movs	r0, #0
   18090:	f001 f9d8 	bl	19444 <bt_le_scan_update>
			return;
   18094:	e7f5      	b.n	18082 <bt_hci_le_enh_conn_complete+0x8e>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   18096:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1809a:	e7c4      	b.n	18026 <bt_hci_le_enh_conn_complete+0x32>
   1809c:	f06f 041b 	mvn.w	r4, #27
   180a0:	e7cd      	b.n	1803e <bt_hci_le_enh_conn_complete+0x4a>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   180a2:	7923      	ldrb	r3, [r4, #4]
   180a4:	3b02      	subs	r3, #2
   180a6:	b2db      	uxtb	r3, r3
   180a8:	2b01      	cmp	r3, #1
   180aa:	d95b      	bls.n	18164 <bt_hci_le_enh_conn_complete+0x170>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   180ac:	78e3      	ldrb	r3, [r4, #3]
   180ae:	2b01      	cmp	r3, #1
   180b0:	d06b      	beq.n	1818a <bt_hci_le_enh_conn_complete+0x196>
				bt_lookup_id_addr(id, &evt->peer_addr));
   180b2:	1d25      	adds	r5, r4, #4
		bt_addr_le_copy(&id_addr,
   180b4:	4629      	mov	r1, r5
   180b6:	f00e fa16 	bl	264e6 <bt_lookup_id_addr>
   180ba:	4601      	mov	r1, r0
   180bc:	2207      	movs	r2, #7
   180be:	f107 0008 	add.w	r0, r7, #8
   180c2:	f00d ffb0 	bl	26026 <memcpy>
   180c6:	2207      	movs	r2, #7
   180c8:	4629      	mov	r1, r5
   180ca:	f107 0010 	add.w	r0, r7, #16
   180ce:	f00d ffaa 	bl	26026 <memcpy>
	conn = find_pending_connect(evt->role, &id_addr);
   180d2:	f107 0108 	add.w	r1, r7, #8
   180d6:	78e0      	ldrb	r0, [r4, #3]
   180d8:	f7fe fad4 	bl	16684 <find_pending_connect>
   180dc:	4605      	mov	r5, r0
	    evt->role == BT_HCI_ROLE_CENTRAL) {
   180de:	78e3      	ldrb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   180e0:	b963      	cbnz	r3, 180fc <bt_hci_le_enh_conn_complete+0x108>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   180e2:	4b66      	ldr	r3, [pc, #408]	; (1827c <bt_hci_le_enh_conn_complete+0x288>)
   180e4:	f3bf 8f5b 	dmb	ish
   180e8:	e853 1f00 	ldrex	r1, [r3]
   180ec:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   180f0:	e843 1200 	strex	r2, r1, [r3]
   180f4:	2a00      	cmp	r2, #0
   180f6:	d1f7      	bne.n	180e8 <bt_hci_le_enh_conn_complete+0xf4>
   180f8:	f3bf 8f5b 	dmb	ish
	if (!conn) {
   180fc:	2d00      	cmp	r5, #0
   180fe:	d048      	beq.n	18192 <bt_hci_le_enh_conn_complete+0x19e>
	conn->handle = handle;
   18100:	4628      	mov	r0, r5
   18102:	f820 8b88 	strh.w	r8, [r0], #136
   18106:	2207      	movs	r2, #7
   18108:	f107 0108 	add.w	r1, r7, #8
   1810c:	f00d ff8b 	bl	26026 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   18110:	f8b4 3017 	ldrh.w	r3, [r4, #23]
   18114:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   18118:	f8b4 3019 	ldrh.w	r3, [r4, #25]
   1811c:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   18120:	f8b4 301b 	ldrh.w	r3, [r4, #27]
   18124:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
   18128:	78e3      	ldrb	r3, [r4, #3]
   1812a:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
   1812c:	2200      	movs	r2, #0
   1812e:	726a      	strb	r2, [r5, #9]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   18130:	2b00      	cmp	r3, #0
   18132:	f000 8088 	beq.w	18246 <bt_hci_le_enh_conn_complete+0x252>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   18136:	2107      	movs	r1, #7
   18138:	4628      	mov	r0, r5
   1813a:	f001 fef9 	bl	19f30 <bt_conn_set_state>
	if (is_disconnected) {
   1813e:	2e00      	cmp	r6, #0
   18140:	f040 8093 	bne.w	1826a <bt_hci_le_enh_conn_complete+0x276>
	bt_conn_connected(conn);
   18144:	4628      	mov	r0, r5
   18146:	f00e fbe9 	bl	2691c <bt_conn_connected>
	conn_auto_initiate(conn);
   1814a:	4628      	mov	r0, r5
   1814c:	f7ff fe42 	bl	17dd4 <conn_auto_initiate>
	bt_conn_unref(conn);
   18150:	4628      	mov	r0, r5
   18152:	f00e fbaa 	bl	268aa <bt_conn_unref>
	    conn->role == BT_HCI_ROLE_CENTRAL) {
   18156:	78eb      	ldrb	r3, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   18158:	2b00      	cmp	r3, #0
   1815a:	d192      	bne.n	18082 <bt_hci_le_enh_conn_complete+0x8e>
		bt_le_scan_update(false);
   1815c:	2000      	movs	r0, #0
   1815e:	f001 f971 	bl	19444 <bt_le_scan_update>
   18162:	e78e      	b.n	18082 <bt_hci_le_enh_conn_complete+0x8e>
   18164:	2207      	movs	r2, #7
   18166:	1d21      	adds	r1, r4, #4
   18168:	f107 0008 	add.w	r0, r7, #8
   1816c:	f00d ff5b 	bl	26026 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   18170:	7a3b      	ldrb	r3, [r7, #8]
   18172:	3b02      	subs	r3, #2
   18174:	723b      	strb	r3, [r7, #8]
	memcpy(dst, src, sizeof(*dst));
   18176:	2206      	movs	r2, #6
   18178:	f104 0111 	add.w	r1, r4, #17
   1817c:	f107 0011 	add.w	r0, r7, #17
   18180:	f00d ff51 	bl	26026 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   18184:	2301      	movs	r3, #1
   18186:	743b      	strb	r3, [r7, #16]
   18188:	e7a3      	b.n	180d2 <bt_hci_le_enh_conn_complete+0xde>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   1818a:	4b3d      	ldr	r3, [pc, #244]	; (18280 <bt_hci_le_enh_conn_complete+0x28c>)
   1818c:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   18190:	e78f      	b.n	180b2 <bt_hci_le_enh_conn_complete+0xbe>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   18192:	1d20      	adds	r0, r4, #4
   18194:	f7fd ffb8 	bl	16108 <bt_addr_le_str>
   18198:	466d      	mov	r5, sp
   1819a:	2300      	movs	r3, #0
   1819c:	713b      	strb	r3, [r7, #4]
   1819e:	2302      	movs	r3, #2
   181a0:	717b      	strb	r3, [r7, #5]
   181a2:	b088      	sub	sp, #32
   181a4:	466c      	mov	r4, sp
   181a6:	f114 0210 	adds.w	r2, r4, #16
   181aa:	d011      	beq.n	181d0 <bt_hci_le_enh_conn_complete+0x1dc>
   181ac:	260e      	movs	r6, #14
   181ae:	b11a      	cbz	r2, 181b8 <bt_hci_le_enh_conn_complete+0x1c4>
   181b0:	2e04      	cmp	r6, #4
   181b2:	dd01      	ble.n	181b8 <bt_hci_le_enh_conn_complete+0x1c4>
   181b4:	4b33      	ldr	r3, [pc, #204]	; (18284 <bt_hci_le_enh_conn_complete+0x290>)
   181b6:	6163      	str	r3, [r4, #20]
   181b8:	2300      	movs	r3, #0
   181ba:	703b      	strb	r3, [r7, #0]
   181bc:	2302      	movs	r3, #2
   181be:	707b      	strb	r3, [r7, #1]
   181c0:	b19a      	cbz	r2, 181ea <bt_hci_le_enh_conn_complete+0x1f6>
   181c2:	2e08      	cmp	r6, #8
   181c4:	dd00      	ble.n	181c8 <bt_hci_le_enh_conn_complete+0x1d4>
   181c6:	61a0      	str	r0, [r4, #24]
   181c8:	f104 031c 	add.w	r3, r4, #28
   181cc:	2100      	movs	r1, #0
   181ce:	e00a      	b.n	181e6 <bt_hci_le_enh_conn_complete+0x1f2>
   181d0:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   181d4:	e7eb      	b.n	181ae <bt_hci_le_enh_conn_complete+0x1ba>
   181d6:	f101 0018 	add.w	r0, r1, #24
   181da:	4438      	add	r0, r7
   181dc:	f810 0c18 	ldrb.w	r0, [r0, #-24]
   181e0:	f803 0b01 	strb.w	r0, [r3], #1
   181e4:	3101      	adds	r1, #1
   181e6:	2901      	cmp	r1, #1
   181e8:	d9f5      	bls.n	181d6 <bt_hci_le_enh_conn_complete+0x1e2>
   181ea:	2e0d      	cmp	r6, #13
   181ec:	dd28      	ble.n	18240 <bt_hci_le_enh_conn_complete+0x24c>
   181ee:	230e      	movs	r3, #14
   181f0:	b142      	cbz	r2, 18204 <bt_hci_le_enh_conn_complete+0x210>
   181f2:	2103      	movs	r1, #3
   181f4:	7139      	strb	r1, [r7, #4]
   181f6:	2100      	movs	r1, #0
   181f8:	7179      	strb	r1, [r7, #5]
   181fa:	71b9      	strb	r1, [r7, #6]
   181fc:	2101      	movs	r1, #1
   181fe:	71f9      	strb	r1, [r7, #7]
   18200:	6878      	ldr	r0, [r7, #4]
   18202:	6120      	str	r0, [r4, #16]
   18204:	2100      	movs	r1, #0
   18206:	f36f 0100 	bfc	r1, #0, #1
   1820a:	f36f 0141 	bfc	r1, #1, #1
   1820e:	f36f 0182 	bfc	r1, #2, #1
   18212:	f36f 01c5 	bfc	r1, #3, #3
   18216:	2001      	movs	r0, #1
   18218:	f360 1188 	bfi	r1, r0, #6, #3
   1821c:	f3c3 0309 	ubfx	r3, r3, #0, #10
   18220:	f363 2152 	bfi	r1, r3, #9, #10
   18224:	f36f 41de 	bfc	r1, #19, #12
   18228:	f36f 71df 	bfc	r1, #31, #1
   1822c:	2300      	movs	r3, #0
   1822e:	4812      	ldr	r0, [pc, #72]	; (18278 <bt_hci_le_enh_conn_complete+0x284>)
   18230:	f00d fabf 	bl	257b2 <z_impl_z_log_msg_static_create>
   18234:	46ad      	mov	sp, r5
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   18236:	211f      	movs	r1, #31
   18238:	4648      	mov	r0, r9
   1823a:	f00e f88d 	bl	26358 <bt_hci_disconnect>
		return;
   1823e:	e720      	b.n	18082 <bt_hci_le_enh_conn_complete+0x8e>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   18240:	f06f 031b 	mvn.w	r3, #27
   18244:	e7d4      	b.n	181f0 <bt_hci_le_enh_conn_complete+0x1fc>
	memcpy(dst, src, sizeof(*dst));
   18246:	2207      	movs	r2, #7
   18248:	f107 0110 	add.w	r1, r7, #16
   1824c:	f105 0096 	add.w	r0, r5, #150	; 0x96
   18250:	f00d fee9 	bl	26026 <memcpy>
					&bt_dev.id_addr[conn->id]);
   18254:	7a29      	ldrb	r1, [r5, #8]
   18256:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   1825a:	2207      	movs	r2, #7
   1825c:	4b08      	ldr	r3, [pc, #32]	; (18280 <bt_hci_le_enh_conn_complete+0x28c>)
   1825e:	4419      	add	r1, r3
   18260:	f105 008f 	add.w	r0, r5, #143	; 0x8f
   18264:	f00d fedf 	bl	26026 <memcpy>
}
   18268:	e765      	b.n	18136 <bt_hci_le_enh_conn_complete+0x142>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1826a:	2101      	movs	r1, #1
   1826c:	4628      	mov	r0, r5
   1826e:	f001 fe5f 	bl	19f30 <bt_conn_set_state>
   18272:	e767      	b.n	18144 <bt_hci_le_enh_conn_complete+0x150>
   18274:	0002c4e8 	.word	0x0002c4e8
   18278:	0002b17c 	.word	0x0002b17c
   1827c:	2000043c 	.word	0x2000043c
   18280:	20000370 	.word	0x20000370
   18284:	0002c504 	.word	0x0002c504

00018288 <le_legacy_conn_complete>:
{
   18288:	b510      	push	{r4, lr}
   1828a:	b088      	sub	sp, #32
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1828c:	68c1      	ldr	r1, [r0, #12]
	enh.status         = evt->status;
   1828e:	780b      	ldrb	r3, [r1, #0]
   18290:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   18294:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   18298:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   1829c:	78cb      	ldrb	r3, [r1, #3]
   1829e:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   182a2:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   182a6:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   182aa:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   182ae:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   182b2:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   182b6:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   182ba:	7c4b      	ldrb	r3, [r1, #17]
   182bc:	f88d 301d 	strb.w	r3, [sp, #29]
	memcpy(dst, src, sizeof(*dst));
   182c0:	2207      	movs	r2, #7
   182c2:	3104      	adds	r1, #4
   182c4:	a801      	add	r0, sp, #4
   182c6:	f00d feae 	bl	26026 <memcpy>
	memcpy(dst, src, sizeof(*dst));
   182ca:	4c09      	ldr	r4, [pc, #36]	; (182f0 <le_legacy_conn_complete+0x68>)
   182cc:	2206      	movs	r2, #6
   182ce:	4621      	mov	r1, r4
   182d0:	f10d 000b 	add.w	r0, sp, #11
   182d4:	f00d fea7 	bl	26026 <memcpy>
   182d8:	2206      	movs	r2, #6
   182da:	4621      	mov	r1, r4
   182dc:	f10d 0011 	add.w	r0, sp, #17
   182e0:	f00d fea1 	bl	26026 <memcpy>
	enh_conn_complete(&enh);
   182e4:	4668      	mov	r0, sp
   182e6:	f00e f893 	bl	26410 <enh_conn_complete>
}
   182ea:	b008      	add	sp, #32
   182ec:	bd10      	pop	{r4, pc}
   182ee:	bf00      	nop
   182f0:	0002c00c 	.word	0x0002c00c

000182f4 <bt_send>:
{
   182f4:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
   182f6:	4b03      	ldr	r3, [pc, #12]	; (18304 <bt_send+0x10>)
   182f8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   182fc:	695b      	ldr	r3, [r3, #20]
   182fe:	4798      	blx	r3
}
   18300:	bd08      	pop	{r3, pc}
   18302:	bf00      	nop
   18304:	20000370 	.word	0x20000370

00018308 <bt_hci_cmd_send>:
{
   18308:	b5f0      	push	{r4, r5, r6, r7, lr}
   1830a:	b083      	sub	sp, #12
   1830c:	af00      	add	r7, sp, #0
   1830e:	4604      	mov	r4, r0
	if (!buf) {
   18310:	460d      	mov	r5, r1
   18312:	b161      	cbz	r1, 1832e <bt_hci_cmd_send+0x26>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   18314:	f640 4335 	movw	r3, #3125	; 0xc35
   18318:	429c      	cmp	r4, r3
   1831a:	d010      	beq.n	1833e <bt_hci_cmd_send+0x36>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   1831c:	4629      	mov	r1, r5
   1831e:	482c      	ldr	r0, [pc, #176]	; (183d0 <bt_hci_cmd_send+0xc8>)
   18320:	f00f fff0 	bl	28304 <net_buf_put>
	return 0;
   18324:	2400      	movs	r4, #0
}
   18326:	4620      	mov	r0, r4
   18328:	370c      	adds	r7, #12
   1832a:	46bd      	mov	sp, r7
   1832c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   1832e:	f7ff f89f 	bl	17470 <bt_hci_cmd_create>
		if (!buf) {
   18332:	4605      	mov	r5, r0
   18334:	2800      	cmp	r0, #0
   18336:	d1ed      	bne.n	18314 <bt_hci_cmd_send+0xc>
			return -ENOBUFS;
   18338:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1833c:	e7f3      	b.n	18326 <bt_hci_cmd_send+0x1e>
		err = bt_send(buf);
   1833e:	4628      	mov	r0, r5
   18340:	f7ff ffd8 	bl	182f4 <bt_send>
		if (err) {
   18344:	4604      	mov	r4, r0
   18346:	2800      	cmp	r0, #0
   18348:	d0ed      	beq.n	18326 <bt_hci_cmd_send+0x1e>
			LOG_ERR("Unable to send to driver (err %d)", err);
   1834a:	466e      	mov	r6, sp
   1834c:	b088      	sub	sp, #32
   1834e:	466b      	mov	r3, sp
   18350:	f113 0210 	adds.w	r2, r3, #16
   18354:	d035      	beq.n	183c2 <bt_hci_cmd_send+0xba>
   18356:	210c      	movs	r1, #12
   18358:	b14a      	cbz	r2, 1836e <bt_hci_cmd_send+0x66>
   1835a:	4608      	mov	r0, r1
   1835c:	2904      	cmp	r1, #4
   1835e:	dd03      	ble.n	18368 <bt_hci_cmd_send+0x60>
   18360:	f8df c070 	ldr.w	ip, [pc, #112]	; 183d4 <bt_hci_cmd_send+0xcc>
   18364:	f8c3 c014 	str.w	ip, [r3, #20]
   18368:	2808      	cmp	r0, #8
   1836a:	dd00      	ble.n	1836e <bt_hci_cmd_send+0x66>
   1836c:	619c      	str	r4, [r3, #24]
   1836e:	290b      	cmp	r1, #11
   18370:	dd2a      	ble.n	183c8 <bt_hci_cmd_send+0xc0>
   18372:	f04f 0c0c 	mov.w	ip, #12
   18376:	b13a      	cbz	r2, 18388 <bt_hci_cmd_send+0x80>
   18378:	2103      	movs	r1, #3
   1837a:	7139      	strb	r1, [r7, #4]
   1837c:	2100      	movs	r1, #0
   1837e:	7179      	strb	r1, [r7, #5]
   18380:	71b9      	strb	r1, [r7, #6]
   18382:	71f9      	strb	r1, [r7, #7]
   18384:	6878      	ldr	r0, [r7, #4]
   18386:	6118      	str	r0, [r3, #16]
   18388:	2100      	movs	r1, #0
   1838a:	f36f 0100 	bfc	r1, #0, #1
   1838e:	f36f 0141 	bfc	r1, #1, #1
   18392:	f36f 0182 	bfc	r1, #2, #1
   18396:	f36f 01c5 	bfc	r1, #3, #3
   1839a:	2301      	movs	r3, #1
   1839c:	f363 1188 	bfi	r1, r3, #6, #3
   183a0:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   183a4:	f36c 2152 	bfi	r1, ip, #9, #10
   183a8:	f36f 41de 	bfc	r1, #19, #12
   183ac:	f36f 71df 	bfc	r1, #31, #1
   183b0:	2300      	movs	r3, #0
   183b2:	4809      	ldr	r0, [pc, #36]	; (183d8 <bt_hci_cmd_send+0xd0>)
   183b4:	f00d f9fd 	bl	257b2 <z_impl_z_log_msg_static_create>
   183b8:	46b5      	mov	sp, r6
			net_buf_unref(buf);
   183ba:	4628      	mov	r0, r5
   183bc:	f00f ffa6 	bl	2830c <net_buf_unref>
		return err;
   183c0:	e7b1      	b.n	18326 <bt_hci_cmd_send+0x1e>
			LOG_ERR("Unable to send to driver (err %d)", err);
   183c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   183c6:	e7c7      	b.n	18358 <bt_hci_cmd_send+0x50>
   183c8:	f06f 0c1b 	mvn.w	ip, #27
   183cc:	e7d3      	b.n	18376 <bt_hci_cmd_send+0x6e>
   183ce:	bf00      	nop
   183d0:	200004ac 	.word	0x200004ac
   183d4:	0002c520 	.word	0x0002c520
   183d8:	0002b17c 	.word	0x0002b17c

000183dc <le_conn_param_neg_reply>:
{
   183dc:	b570      	push	{r4, r5, r6, lr}
   183de:	b088      	sub	sp, #32
   183e0:	4605      	mov	r5, r0
   183e2:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   183e4:	2103      	movs	r1, #3
   183e6:	f242 0021 	movw	r0, #8225	; 0x2021
   183ea:	f7ff f841 	bl	17470 <bt_hci_cmd_create>
	if (!buf) {
   183ee:	b168      	cbz	r0, 1840c <le_conn_param_neg_reply+0x30>
   183f0:	4606      	mov	r6, r0
   183f2:	2103      	movs	r1, #3
   183f4:	300c      	adds	r0, #12
   183f6:	f00f ffd0 	bl	2839a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   183fa:	8005      	strh	r5, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   183fc:	7084      	strb	r4, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   183fe:	4631      	mov	r1, r6
   18400:	f242 0021 	movw	r0, #8225	; 0x2021
   18404:	f7ff ff80 	bl	18308 <bt_hci_cmd_send>
}
   18408:	b008      	add	sp, #32
   1840a:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("Unable to allocate buffer");
   1840c:	4b12      	ldr	r3, [pc, #72]	; (18458 <le_conn_param_neg_reply+0x7c>)
   1840e:	9307      	str	r3, [sp, #28]
   18410:	2302      	movs	r3, #2
   18412:	f88d 3004 	strb.w	r3, [sp, #4]
   18416:	2300      	movs	r3, #0
   18418:	f88d 3005 	strb.w	r3, [sp, #5]
   1841c:	f88d 3006 	strb.w	r3, [sp, #6]
   18420:	f88d 3007 	strb.w	r3, [sp, #7]
   18424:	9a01      	ldr	r2, [sp, #4]
   18426:	9206      	str	r2, [sp, #24]
   18428:	4619      	mov	r1, r3
   1842a:	f363 0100 	bfi	r1, r3, #0, #1
   1842e:	f363 0141 	bfi	r1, r3, #1, #1
   18432:	f363 0182 	bfi	r1, r3, #2, #1
   18436:	f363 01c5 	bfi	r1, r3, #3, #3
   1843a:	2201      	movs	r2, #1
   1843c:	f362 1188 	bfi	r1, r2, #6, #3
   18440:	2208      	movs	r2, #8
   18442:	f362 2152 	bfi	r1, r2, #9, #10
   18446:	f363 41de 	bfi	r1, r3, #19, #12
   1844a:	f363 71df 	bfi	r1, r3, #31, #1
   1844e:	aa06      	add	r2, sp, #24
   18450:	4802      	ldr	r0, [pc, #8]	; (1845c <le_conn_param_neg_reply+0x80>)
   18452:	f00d f9ae 	bl	257b2 <z_impl_z_log_msg_static_create>
		return;
   18456:	e7d7      	b.n	18408 <le_conn_param_neg_reply+0x2c>
   18458:	0002c544 	.word	0x0002c544
   1845c:	0002b17c 	.word	0x0002b17c

00018460 <le_conn_param_req>:
{
   18460:	b5f0      	push	{r4, r5, r6, r7, lr}
   18462:	b085      	sub	sp, #20
   18464:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   18466:	68c3      	ldr	r3, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   18468:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1846a:	885a      	ldrh	r2, [r3, #2]
   1846c:	813a      	strh	r2, [r7, #8]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1846e:	889a      	ldrh	r2, [r3, #4]
   18470:	817a      	strh	r2, [r7, #10]
	param.latency = sys_le16_to_cpu(evt->latency);
   18472:	88da      	ldrh	r2, [r3, #6]
   18474:	81ba      	strh	r2, [r7, #12]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   18476:	891b      	ldrh	r3, [r3, #8]
   18478:	81fb      	strh	r3, [r7, #14]
	conn = bt_conn_lookup_handle(handle);
   1847a:	4620      	mov	r0, r4
   1847c:	f001 fd4e 	bl	19f1c <bt_conn_lookup_handle>
	if (!conn) {
   18480:	b180      	cbz	r0, 184a4 <le_conn_param_req+0x44>
   18482:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
   18484:	f107 0108 	add.w	r1, r7, #8
   18488:	f001 ff94 	bl	1a3b4 <le_param_req>
   1848c:	2800      	cmp	r0, #0
   1848e:	d149      	bne.n	18524 <le_conn_param_req+0xc4>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   18490:	211e      	movs	r1, #30
   18492:	4620      	mov	r0, r4
   18494:	f7ff ffa2 	bl	183dc <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   18498:	4628      	mov	r0, r5
   1849a:	f00e fa06 	bl	268aa <bt_conn_unref>
}
   1849e:	3714      	adds	r7, #20
   184a0:	46bd      	mov	sp, r7
   184a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   184a4:	466e      	mov	r6, sp
   184a6:	b088      	sub	sp, #32
   184a8:	466b      	mov	r3, sp
   184aa:	f113 0210 	adds.w	r2, r3, #16
   184ae:	d033      	beq.n	18518 <le_conn_param_req+0xb8>
   184b0:	210c      	movs	r1, #12
   184b2:	b13a      	cbz	r2, 184c4 <le_conn_param_req+0x64>
   184b4:	4608      	mov	r0, r1
   184b6:	2904      	cmp	r1, #4
   184b8:	dd01      	ble.n	184be <le_conn_param_req+0x5e>
   184ba:	4d1d      	ldr	r5, [pc, #116]	; (18530 <le_conn_param_req+0xd0>)
   184bc:	615d      	str	r5, [r3, #20]
   184be:	2808      	cmp	r0, #8
   184c0:	dd00      	ble.n	184c4 <le_conn_param_req+0x64>
   184c2:	619c      	str	r4, [r3, #24]
   184c4:	290b      	cmp	r1, #11
   184c6:	dd2a      	ble.n	1851e <le_conn_param_req+0xbe>
   184c8:	250c      	movs	r5, #12
   184ca:	b13a      	cbz	r2, 184dc <le_conn_param_req+0x7c>
   184cc:	2103      	movs	r1, #3
   184ce:	7139      	strb	r1, [r7, #4]
   184d0:	2100      	movs	r1, #0
   184d2:	7179      	strb	r1, [r7, #5]
   184d4:	71b9      	strb	r1, [r7, #6]
   184d6:	71f9      	strb	r1, [r7, #7]
   184d8:	6878      	ldr	r0, [r7, #4]
   184da:	6118      	str	r0, [r3, #16]
   184dc:	2100      	movs	r1, #0
   184de:	f36f 0100 	bfc	r1, #0, #1
   184e2:	f36f 0141 	bfc	r1, #1, #1
   184e6:	f36f 0182 	bfc	r1, #2, #1
   184ea:	f36f 01c5 	bfc	r1, #3, #3
   184ee:	2301      	movs	r3, #1
   184f0:	f363 1188 	bfi	r1, r3, #6, #3
   184f4:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   184f8:	f363 2152 	bfi	r1, r3, #9, #10
   184fc:	f36f 41de 	bfc	r1, #19, #12
   18500:	f36f 71df 	bfc	r1, #31, #1
   18504:	2300      	movs	r3, #0
   18506:	480b      	ldr	r0, [pc, #44]	; (18534 <le_conn_param_req+0xd4>)
   18508:	f00d f953 	bl	257b2 <z_impl_z_log_msg_static_create>
   1850c:	46b5      	mov	sp, r6
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1850e:	2102      	movs	r1, #2
   18510:	4620      	mov	r0, r4
   18512:	f7ff ff63 	bl	183dc <le_conn_param_neg_reply>
		return;
   18516:	e7c2      	b.n	1849e <le_conn_param_req+0x3e>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   18518:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1851c:	e7c9      	b.n	184b2 <le_conn_param_req+0x52>
   1851e:	f06f 051b 	mvn.w	r5, #27
   18522:	e7d2      	b.n	184ca <le_conn_param_req+0x6a>
		le_conn_param_req_reply(handle, &param);
   18524:	f107 0108 	add.w	r1, r7, #8
   18528:	4620      	mov	r0, r4
   1852a:	f00d ffa2 	bl	26472 <le_conn_param_req_reply>
   1852e:	e7b3      	b.n	18498 <le_conn_param_req+0x38>
   18530:	0002c11c 	.word	0x0002c11c
   18534:	0002b17c 	.word	0x0002b17c

00018538 <send_cmd>:
{
   18538:	b5f0      	push	{r4, r5, r6, r7, lr}
   1853a:	b089      	sub	sp, #36	; 0x24
   1853c:	af00      	add	r7, sp, #0
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   1853e:	2200      	movs	r2, #0
   18540:	2300      	movs	r3, #0
   18542:	4855      	ldr	r0, [pc, #340]	; (18698 <send_cmd+0x160>)
   18544:	f00f fea8 	bl	28298 <net_buf_get>
	BT_ASSERT(buf);
   18548:	4605      	mov	r5, r0
   1854a:	2800      	cmp	r0, #0
   1854c:	d055      	beq.n	185fa <send_cmd+0xc2>
   1854e:	4c53      	ldr	r4, [pc, #332]	; (1869c <send_cmd+0x164>)
   18550:	f04f 32ff 	mov.w	r2, #4294967295
   18554:	f04f 33ff 	mov.w	r3, #4294967295
   18558:	4620      	mov	r0, r4
   1855a:	f00a fb33 	bl	22bc4 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   1855e:	69a3      	ldr	r3, [r4, #24]
   18560:	b34b      	cbz	r3, 185b6 <send_cmd+0x7e>
		LOG_ERR("Uncleared pending sent_cmd");
   18562:	4b4f      	ldr	r3, [pc, #316]	; (186a0 <send_cmd+0x168>)
   18564:	61fb      	str	r3, [r7, #28]
   18566:	2302      	movs	r3, #2
   18568:	713b      	strb	r3, [r7, #4]
   1856a:	2400      	movs	r4, #0
   1856c:	717c      	strb	r4, [r7, #5]
   1856e:	71bc      	strb	r4, [r7, #6]
   18570:	71fc      	strb	r4, [r7, #7]
   18572:	687b      	ldr	r3, [r7, #4]
   18574:	61bb      	str	r3, [r7, #24]
   18576:	4621      	mov	r1, r4
   18578:	f364 0100 	bfi	r1, r4, #0, #1
   1857c:	f364 0141 	bfi	r1, r4, #1, #1
   18580:	f364 0182 	bfi	r1, r4, #2, #1
   18584:	f364 01c5 	bfi	r1, r4, #3, #3
   18588:	2301      	movs	r3, #1
   1858a:	f363 1188 	bfi	r1, r3, #6, #3
   1858e:	2308      	movs	r3, #8
   18590:	f363 2152 	bfi	r1, r3, #9, #10
   18594:	f364 41de 	bfi	r1, r4, #19, #12
   18598:	f364 71df 	bfi	r1, r4, #31, #1
   1859c:	4623      	mov	r3, r4
   1859e:	f107 0218 	add.w	r2, r7, #24
   185a2:	4840      	ldr	r0, [pc, #256]	; (186a4 <send_cmd+0x16c>)
   185a4:	f00d f905 	bl	257b2 <z_impl_z_log_msg_static_create>
		net_buf_unref(bt_dev.sent_cmd);
   185a8:	4e3f      	ldr	r6, [pc, #252]	; (186a8 <send_cmd+0x170>)
   185aa:	f8d6 0130 	ldr.w	r0, [r6, #304]	; 0x130
   185ae:	f00f fead 	bl	2830c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   185b2:	f8c6 4130 	str.w	r4, [r6, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   185b6:	4628      	mov	r0, r5
   185b8:	f00f fecb 	bl	28352 <net_buf_ref>
   185bc:	4b3a      	ldr	r3, [pc, #232]	; (186a8 <send_cmd+0x170>)
   185be:	f8c3 0130 	str.w	r0, [r3, #304]	; 0x130
	err = bt_send(buf);
   185c2:	4628      	mov	r0, r5
   185c4:	f7ff fe96 	bl	182f4 <bt_send>
	if (err) {
   185c8:	4604      	mov	r4, r0
   185ca:	2800      	cmp	r0, #0
   185cc:	d05d      	beq.n	1868a <send_cmd+0x152>
		LOG_ERR("Unable to send to driver (err %d)", err);
   185ce:	466e      	mov	r6, sp
   185d0:	b088      	sub	sp, #32
   185d2:	466b      	mov	r3, sp
   185d4:	f113 0210 	adds.w	r2, r3, #16
   185d8:	d01d      	beq.n	18616 <send_cmd+0xde>
   185da:	210c      	movs	r1, #12
   185dc:	b14a      	cbz	r2, 185f2 <send_cmd+0xba>
   185de:	4608      	mov	r0, r1
   185e0:	2904      	cmp	r1, #4
   185e2:	dd03      	ble.n	185ec <send_cmd+0xb4>
   185e4:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 186ac <send_cmd+0x174>
   185e8:	f8c3 c014 	str.w	ip, [r3, #20]
   185ec:	2808      	cmp	r0, #8
   185ee:	dd15      	ble.n	1861c <send_cmd+0xe4>
   185f0:	619c      	str	r4, [r3, #24]
   185f2:	290b      	cmp	r1, #11
   185f4:	dd4c      	ble.n	18690 <send_cmd+0x158>
   185f6:	240c      	movs	r4, #12
   185f8:	e012      	b.n	18620 <send_cmd+0xe8>
	BT_ASSERT(buf);
   185fa:	f44f 6318 	mov.w	r3, #2432	; 0x980
   185fe:	4a2c      	ldr	r2, [pc, #176]	; (186b0 <send_cmd+0x178>)
   18600:	492c      	ldr	r1, [pc, #176]	; (186b4 <send_cmd+0x17c>)
   18602:	482d      	ldr	r0, [pc, #180]	; (186b8 <send_cmd+0x180>)
   18604:	f00c fdbc 	bl	25180 <assert_print>
   18608:	4040      	eors	r0, r0
   1860a:	f380 8811 	msr	BASEPRI, r0
   1860e:	f04f 0003 	mov.w	r0, #3
   18612:	df02      	svc	2
   18614:	e79b      	b.n	1854e <send_cmd+0x16>
		LOG_ERR("Unable to send to driver (err %d)", err);
   18616:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1861a:	e7df      	b.n	185dc <send_cmd+0xa4>
   1861c:	f06f 041b 	mvn.w	r4, #27
   18620:	b13a      	cbz	r2, 18632 <send_cmd+0xfa>
   18622:	2103      	movs	r1, #3
   18624:	7139      	strb	r1, [r7, #4]
   18626:	2100      	movs	r1, #0
   18628:	7179      	strb	r1, [r7, #5]
   1862a:	71b9      	strb	r1, [r7, #6]
   1862c:	71f9      	strb	r1, [r7, #7]
   1862e:	6878      	ldr	r0, [r7, #4]
   18630:	6118      	str	r0, [r3, #16]
   18632:	2100      	movs	r1, #0
   18634:	f36f 0100 	bfc	r1, #0, #1
   18638:	f36f 0141 	bfc	r1, #1, #1
   1863c:	f36f 0182 	bfc	r1, #2, #1
   18640:	f36f 01c5 	bfc	r1, #3, #3
   18644:	2301      	movs	r3, #1
   18646:	f363 1188 	bfi	r1, r3, #6, #3
   1864a:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1864e:	f363 2152 	bfi	r1, r3, #9, #10
   18652:	f36f 41de 	bfc	r1, #19, #12
   18656:	f36f 71df 	bfc	r1, #31, #1
   1865a:	2300      	movs	r3, #0
   1865c:	4811      	ldr	r0, [pc, #68]	; (186a4 <send_cmd+0x16c>)
   1865e:	f00d f8a8 	bl	257b2 <z_impl_z_log_msg_static_create>
   18662:	46b5      	mov	sp, r6
	z_impl_k_sem_give(sem);
   18664:	480d      	ldr	r0, [pc, #52]	; (1869c <send_cmd+0x164>)
   18666:	f00a fa85 	bl	22b74 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   1866a:	4628      	mov	r0, r5
   1866c:	f00f fd6a 	bl	28144 <net_buf_id>
   18670:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18674:	4b11      	ldr	r3, [pc, #68]	; (186bc <send_cmd+0x184>)
   18676:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   1867a:	462a      	mov	r2, r5
   1867c:	211f      	movs	r1, #31
   1867e:	8858      	ldrh	r0, [r3, #2]
   18680:	f7fe f9ee 	bl	16a60 <hci_cmd_done>
		net_buf_unref(buf);
   18684:	4628      	mov	r0, r5
   18686:	f00f fe41 	bl	2830c <net_buf_unref>
}
   1868a:	3724      	adds	r7, #36	; 0x24
   1868c:	46bd      	mov	sp, r7
   1868e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to send to driver (err %d)", err);
   18690:	f06f 041b 	mvn.w	r4, #27
   18694:	e7c4      	b.n	18620 <send_cmd+0xe8>
   18696:	bf00      	nop
   18698:	200004ac 	.word	0x200004ac
   1869c:	20000488 	.word	0x20000488
   186a0:	0002c560 	.word	0x0002c560
   186a4:	0002b17c 	.word	0x0002b17c
   186a8:	20000370 	.word	0x20000370
   186ac:	0002c520 	.word	0x0002c520
   186b0:	0002c228 	.word	0x0002c228
   186b4:	0002d210 	.word	0x0002d210
   186b8:	0002c278 	.word	0x0002c278
   186bc:	20005764 	.word	0x20005764

000186c0 <process_events>:
{
   186c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   186c4:	b082      	sub	sp, #8
   186c6:	af00      	add	r7, sp, #0
   186c8:	4604      	mov	r4, r0
   186ca:	460d      	mov	r5, r1
	LOG_DBG("count %d", count);
   186cc:	e03c      	b.n	18748 <process_events+0x88>
				send_cmd();
   186ce:	f7ff ff33 	bl	18538 <send_cmd>
   186d2:	e037      	b.n	18744 <process_events+0x84>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   186d4:	46e8      	mov	r8, sp
   186d6:	b088      	sub	sp, #32
   186d8:	4669      	mov	r1, sp
   186da:	f111 0210 	adds.w	r2, r1, #16
   186de:	d045      	beq.n	1876c <process_events+0xac>
   186e0:	200c      	movs	r0, #12
   186e2:	b152      	cbz	r2, 186fa <process_events+0x3a>
   186e4:	4684      	mov	ip, r0
   186e6:	2804      	cmp	r0, #4
   186e8:	dd03      	ble.n	186f2 <process_events+0x32>
   186ea:	f8df e094 	ldr.w	lr, [pc, #148]	; 18780 <process_events+0xc0>
   186ee:	f8c1 e014 	str.w	lr, [r1, #20]
   186f2:	f1bc 0f08 	cmp.w	ip, #8
   186f6:	dd00      	ble.n	186fa <process_events+0x3a>
   186f8:	618b      	str	r3, [r1, #24]
   186fa:	280b      	cmp	r0, #11
   186fc:	dd39      	ble.n	18772 <process_events+0xb2>
   186fe:	230c      	movs	r3, #12
   18700:	b13a      	cbz	r2, 18712 <process_events+0x52>
   18702:	2003      	movs	r0, #3
   18704:	7138      	strb	r0, [r7, #4]
   18706:	2000      	movs	r0, #0
   18708:	7178      	strb	r0, [r7, #5]
   1870a:	71b8      	strb	r0, [r7, #6]
   1870c:	71f8      	strb	r0, [r7, #7]
   1870e:	6878      	ldr	r0, [r7, #4]
   18710:	6108      	str	r0, [r1, #16]
   18712:	f36f 0600 	bfc	r6, #0, #1
   18716:	f36f 0641 	bfc	r6, #1, #1
   1871a:	f36f 0682 	bfc	r6, #2, #1
   1871e:	f36f 06c5 	bfc	r6, #3, #3
   18722:	2102      	movs	r1, #2
   18724:	f361 1688 	bfi	r6, r1, #6, #3
   18728:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   1872c:	f363 2652 	bfi	r6, r3, #9, #10
   18730:	f36f 46de 	bfc	r6, #19, #12
   18734:	f36f 76df 	bfc	r6, #31, #1
   18738:	2300      	movs	r3, #0
   1873a:	4631      	mov	r1, r6
   1873c:	4811      	ldr	r0, [pc, #68]	; (18784 <process_events+0xc4>)
   1873e:	f00d f838 	bl	257b2 <z_impl_z_log_msg_static_create>
   18742:	46c5      	mov	sp, r8
	for (; count; ev++, count--) {
   18744:	3414      	adds	r4, #20
   18746:	3d01      	subs	r5, #1
   18748:	b1b5      	cbz	r5, 18778 <process_events+0xb8>
		switch (ev->state) {
   1874a:	68e3      	ldr	r3, [r4, #12]
   1874c:	f3c3 3386 	ubfx	r3, r3, #14, #7
   18750:	2b01      	cmp	r3, #1
   18752:	d9f7      	bls.n	18744 <process_events+0x84>
   18754:	2b04      	cmp	r3, #4
   18756:	d1bd      	bne.n	186d4 <process_events+0x14>
			if (ev->tag == BT_EVENT_CMD_TX) {
   18758:	7b23      	ldrb	r3, [r4, #12]
   1875a:	2b00      	cmp	r3, #0
   1875c:	d0b7      	beq.n	186ce <process_events+0xe>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   1875e:	2b01      	cmp	r3, #1
   18760:	d1f0      	bne.n	18744 <process_events+0x84>
					conn = CONTAINER_OF(ev->fifo,
   18762:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
   18764:	3838      	subs	r0, #56	; 0x38
   18766:	f002 f8ab 	bl	1a8c0 <bt_conn_process_tx>
   1876a:	e7eb      	b.n	18744 <process_events+0x84>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   1876c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   18770:	e7b7      	b.n	186e2 <process_events+0x22>
   18772:	f06f 031b 	mvn.w	r3, #27
   18776:	e7c3      	b.n	18700 <process_events+0x40>
}
   18778:	3708      	adds	r7, #8
   1877a:	46bd      	mov	sp, r7
   1877c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18780:	0002c57c 	.word	0x0002c57c
   18784:	0002b17c 	.word	0x0002b17c

00018788 <hci_tx_thread>:
{
   18788:	b538      	push	{r3, r4, r5, lr}
   1878a:	e012      	b.n	187b2 <hci_tx_thread+0x2a>
		BT_ASSERT(err == 0);
   1878c:	f640 13e6 	movw	r3, #2534	; 0x9e6
   18790:	4a12      	ldr	r2, [pc, #72]	; (187dc <hci_tx_thread+0x54>)
   18792:	4913      	ldr	r1, [pc, #76]	; (187e0 <hci_tx_thread+0x58>)
   18794:	4813      	ldr	r0, [pc, #76]	; (187e4 <hci_tx_thread+0x5c>)
   18796:	f00c fcf3 	bl	25180 <assert_print>
   1879a:	4040      	eors	r0, r0
   1879c:	f380 8811 	msr	BASEPRI, r0
   187a0:	f04f 0003 	mov.w	r0, #3
   187a4:	df02      	svc	2
		process_events(events, ev_count);
   187a6:	4621      	mov	r1, r4
   187a8:	480f      	ldr	r0, [pc, #60]	; (187e8 <hci_tx_thread+0x60>)
   187aa:	f7ff ff89 	bl	186c0 <process_events>
	z_impl_k_yield();
   187ae:	f00a feab 	bl	23508 <z_impl_k_yield>
		events[0].state = K_POLL_STATE_NOT_READY;
   187b2:	4d0d      	ldr	r5, [pc, #52]	; (187e8 <hci_tx_thread+0x60>)
   187b4:	68eb      	ldr	r3, [r5, #12]
   187b6:	f36f 3394 	bfc	r3, #14, #7
   187ba:	60eb      	str	r3, [r5, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   187bc:	f105 0014 	add.w	r0, r5, #20
   187c0:	f001 fb84 	bl	19ecc <bt_conn_prepare_events>
   187c4:	1c44      	adds	r4, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   187c6:	f04f 32ff 	mov.w	r2, #4294967295
   187ca:	f04f 33ff 	mov.w	r3, #4294967295
   187ce:	4621      	mov	r1, r4
   187d0:	4628      	mov	r0, r5
   187d2:	f00b fa11 	bl	23bf8 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   187d6:	2800      	cmp	r0, #0
   187d8:	d1d8      	bne.n	1878c <hci_tx_thread+0x4>
   187da:	e7e4      	b.n	187a6 <hci_tx_thread+0x1e>
   187dc:	0002c228 	.word	0x0002c228
   187e0:	0002c344 	.word	0x0002c344
   187e4:	0002c278 	.word	0x0002c278
   187e8:	20000660 	.word	0x20000660

000187ec <hci_event_prio>:
{
   187ec:	b570      	push	{r4, r5, r6, lr}
   187ee:	b082      	sub	sp, #8
   187f0:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   187f2:	f100 050c 	add.w	r5, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   187f6:	4628      	mov	r0, r5
   187f8:	f00f fe08 	bl	2840c <net_buf_simple_headroom>
   187fc:	f8ad 0004 	strh.w	r0, [sp, #4]
	state->len = buf->len;
   18800:	8a23      	ldrh	r3, [r4, #16]
   18802:	f8ad 3006 	strh.w	r3, [sp, #6]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   18806:	2b01      	cmp	r3, #1
   18808:	d91e      	bls.n	18848 <hci_event_prio+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   1880a:	2102      	movs	r1, #2
   1880c:	4628      	mov	r0, r5
   1880e:	f00f fde5 	bl	283dc <net_buf_simple_pull_mem>
   18812:	4606      	mov	r6, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   18814:	7800      	ldrb	r0, [r0, #0]
   18816:	f00d fd07 	bl	26228 <bt_hci_evt_get_flags>
   1881a:	4605      	mov	r5, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1881c:	f010 0f01 	tst.w	r0, #1
   18820:	d020      	beq.n	18864 <hci_event_prio+0x78>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   18822:	2305      	movs	r3, #5
   18824:	4a18      	ldr	r2, [pc, #96]	; (18888 <hci_event_prio+0x9c>)
   18826:	4621      	mov	r1, r4
   18828:	7830      	ldrb	r0, [r6, #0]
   1882a:	f7fe faf7 	bl	16e1c <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1882e:	f015 0f02 	tst.w	r5, #2
   18832:	d025      	beq.n	18880 <hci_event_prio+0x94>
	buf->data = buf->__buf + state->offset;
   18834:	6963      	ldr	r3, [r4, #20]
   18836:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1883a:	4413      	add	r3, r2
   1883c:	60e3      	str	r3, [r4, #12]
	buf->len = state->len;
   1883e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   18842:	8223      	strh	r3, [r4, #16]
}
   18844:	b002      	add	sp, #8
   18846:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   18848:	f640 537b 	movw	r3, #3451	; 0xd7b
   1884c:	4a0f      	ldr	r2, [pc, #60]	; (1888c <hci_event_prio+0xa0>)
   1884e:	4910      	ldr	r1, [pc, #64]	; (18890 <hci_event_prio+0xa4>)
   18850:	4810      	ldr	r0, [pc, #64]	; (18894 <hci_event_prio+0xa8>)
   18852:	f00c fc95 	bl	25180 <assert_print>
   18856:	4040      	eors	r0, r0
   18858:	f380 8811 	msr	BASEPRI, r0
   1885c:	f04f 0003 	mov.w	r0, #3
   18860:	df02      	svc	2
   18862:	e7d2      	b.n	1880a <hci_event_prio+0x1e>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   18864:	f640 537f 	movw	r3, #3455	; 0xd7f
   18868:	4a08      	ldr	r2, [pc, #32]	; (1888c <hci_event_prio+0xa0>)
   1886a:	490b      	ldr	r1, [pc, #44]	; (18898 <hci_event_prio+0xac>)
   1886c:	4809      	ldr	r0, [pc, #36]	; (18894 <hci_event_prio+0xa8>)
   1886e:	f00c fc87 	bl	25180 <assert_print>
   18872:	4040      	eors	r0, r0
   18874:	f380 8811 	msr	BASEPRI, r0
   18878:	f04f 0003 	mov.w	r0, #3
   1887c:	df02      	svc	2
   1887e:	e7d0      	b.n	18822 <hci_event_prio+0x36>
		net_buf_unref(buf);
   18880:	4620      	mov	r0, r4
   18882:	f00f fd43 	bl	2830c <net_buf_unref>
}
   18886:	e7dd      	b.n	18844 <hci_event_prio+0x58>
   18888:	0002c654 	.word	0x0002c654
   1888c:	0002c228 	.word	0x0002c228
   18890:	0002c25c 	.word	0x0002c25c
   18894:	0002c278 	.word	0x0002c278
   18898:	0002c5a0 	.word	0x0002c5a0

0001889c <bt_recv>:
{
   1889c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1889e:	b083      	sub	sp, #12
   188a0:	af00      	add	r7, sp, #0
   188a2:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   188a4:	7e03      	ldrb	r3, [r0, #24]
	switch (bt_buf_get_type(buf)) {
   188a6:	2b01      	cmp	r3, #1
   188a8:	d007      	beq.n	188ba <bt_recv+0x1e>
   188aa:	2b03      	cmp	r3, #3
   188ac:	d11b      	bne.n	188e6 <bt_recv+0x4a>
		rx_queue_put(buf);
   188ae:	f7fe fb7f 	bl	16fb0 <rx_queue_put>
		return 0;
   188b2:	2000      	movs	r0, #0
}
   188b4:	370c      	adds	r7, #12
   188b6:	46bd      	mov	sp, r7
   188b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct bt_hci_evt_hdr *hdr = (void *)buf->data;
   188ba:	68c3      	ldr	r3, [r0, #12]
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   188bc:	7818      	ldrb	r0, [r3, #0]
   188be:	f00d fcb3 	bl	26228 <bt_hci_evt_get_flags>
   188c2:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   188c4:	f010 0f01 	tst.w	r0, #1
   188c8:	d104      	bne.n	188d4 <bt_recv+0x38>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   188ca:	f015 0f02 	tst.w	r5, #2
   188ce:	d105      	bne.n	188dc <bt_recv+0x40>
		return 0;
   188d0:	2000      	movs	r0, #0
   188d2:	e7ef      	b.n	188b4 <bt_recv+0x18>
			hci_event_prio(buf);
   188d4:	4620      	mov	r0, r4
   188d6:	f7ff ff89 	bl	187ec <hci_event_prio>
   188da:	e7f6      	b.n	188ca <bt_recv+0x2e>
			rx_queue_put(buf);
   188dc:	4620      	mov	r0, r4
   188de:	f7fe fb67 	bl	16fb0 <rx_queue_put>
		return 0;
   188e2:	2000      	movs	r0, #0
   188e4:	e7e6      	b.n	188b4 <bt_recv+0x18>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   188e6:	466d      	mov	r5, sp
   188e8:	b088      	sub	sp, #32
   188ea:	4669      	mov	r1, sp
   188ec:	f111 0210 	adds.w	r2, r1, #16
   188f0:	d035      	beq.n	1895e <bt_recv+0xc2>
   188f2:	200c      	movs	r0, #12
   188f4:	b142      	cbz	r2, 18908 <bt_recv+0x6c>
   188f6:	4684      	mov	ip, r0
   188f8:	2804      	cmp	r0, #4
   188fa:	dd01      	ble.n	18900 <bt_recv+0x64>
   188fc:	4e1b      	ldr	r6, [pc, #108]	; (1896c <bt_recv+0xd0>)
   188fe:	614e      	str	r6, [r1, #20]
   18900:	f1bc 0f08 	cmp.w	ip, #8
   18904:	dd00      	ble.n	18908 <bt_recv+0x6c>
   18906:	618b      	str	r3, [r1, #24]
   18908:	280b      	cmp	r0, #11
   1890a:	dd2b      	ble.n	18964 <bt_recv+0xc8>
   1890c:	230c      	movs	r3, #12
   1890e:	b13a      	cbz	r2, 18920 <bt_recv+0x84>
   18910:	2003      	movs	r0, #3
   18912:	7138      	strb	r0, [r7, #4]
   18914:	2000      	movs	r0, #0
   18916:	7178      	strb	r0, [r7, #5]
   18918:	71b8      	strb	r0, [r7, #6]
   1891a:	71f8      	strb	r0, [r7, #7]
   1891c:	6878      	ldr	r0, [r7, #4]
   1891e:	6108      	str	r0, [r1, #16]
   18920:	2100      	movs	r1, #0
   18922:	f36f 0100 	bfc	r1, #0, #1
   18926:	f36f 0141 	bfc	r1, #1, #1
   1892a:	f36f 0182 	bfc	r1, #2, #1
   1892e:	f36f 01c5 	bfc	r1, #3, #3
   18932:	2001      	movs	r0, #1
   18934:	f360 1188 	bfi	r1, r0, #6, #3
   18938:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   1893c:	f363 2152 	bfi	r1, r3, #9, #10
   18940:	f36f 41de 	bfc	r1, #19, #12
   18944:	f36f 71df 	bfc	r1, #31, #1
   18948:	2300      	movs	r3, #0
   1894a:	4809      	ldr	r0, [pc, #36]	; (18970 <bt_recv+0xd4>)
   1894c:	f00c ff31 	bl	257b2 <z_impl_z_log_msg_static_create>
   18950:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   18952:	4620      	mov	r0, r4
   18954:	f00f fcda 	bl	2830c <net_buf_unref>
		return -EINVAL;
   18958:	f06f 0015 	mvn.w	r0, #21
   1895c:	e7aa      	b.n	188b4 <bt_recv+0x18>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   1895e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   18962:	e7c7      	b.n	188f4 <bt_recv+0x58>
   18964:	f06f 031b 	mvn.w	r3, #27
   18968:	e7d1      	b.n	1890e <bt_recv+0x72>
   1896a:	bf00      	nop
   1896c:	0002c5bc 	.word	0x0002c5bc
   18970:	0002b17c 	.word	0x0002b17c

00018974 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   18974:	4b0a      	ldr	r3, [pc, #40]	; (189a0 <bt_hci_driver_register+0x2c>)
   18976:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   1897a:	b943      	cbnz	r3, 1898e <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
   1897c:	68c3      	ldr	r3, [r0, #12]
   1897e:	b14b      	cbz	r3, 18994 <bt_hci_driver_register+0x20>
   18980:	6943      	ldr	r3, [r0, #20]
   18982:	b153      	cbz	r3, 1899a <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
   18984:	4b06      	ldr	r3, [pc, #24]	; (189a0 <bt_hci_driver_register+0x2c>)
   18986:	f8c3 0154 	str.w	r0, [r3, #340]	; 0x154
	return 0;
   1898a:	2000      	movs	r0, #0
   1898c:	4770      	bx	lr
		return -EALREADY;
   1898e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   18992:	4770      	bx	lr
		return -EINVAL;
   18994:	f06f 0015 	mvn.w	r0, #21
   18998:	4770      	bx	lr
   1899a:	f06f 0015 	mvn.w	r0, #21
}
   1899e:	4770      	bx	lr
   189a0:	20000370 	.word	0x20000370

000189a4 <bt_finalize_init>:
{
   189a4:	b508      	push	{r3, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   189a6:	4b08      	ldr	r3, [pc, #32]	; (189c8 <bt_finalize_init+0x24>)
   189a8:	f3bf 8f5b 	dmb	ish
   189ac:	e853 1f00 	ldrex	r1, [r3]
   189b0:	f041 0104 	orr.w	r1, r1, #4
   189b4:	e843 1200 	strex	r2, r1, [r3]
   189b8:	2a00      	cmp	r2, #0
   189ba:	d1f7      	bne.n	189ac <bt_finalize_init+0x8>
   189bc:	f3bf 8f5b 	dmb	ish
		bt_le_scan_update(false);
   189c0:	2000      	movs	r0, #0
   189c2:	f000 fd3f 	bl	19444 <bt_le_scan_update>
}
   189c6:	bd08      	pop	{r3, pc}
   189c8:	2000043c 	.word	0x2000043c

000189cc <init_work>:
{
   189cc:	b508      	push	{r3, lr}
	err = bt_init();
   189ce:	f00d fd75 	bl	264bc <bt_init>
	if (ready_cb) {
   189d2:	4b02      	ldr	r3, [pc, #8]	; (189dc <init_work+0x10>)
   189d4:	681b      	ldr	r3, [r3, #0]
   189d6:	b103      	cbz	r3, 189da <init_work+0xe>
		ready_cb(err);
   189d8:	4798      	blx	r3
}
   189da:	bd08      	pop	{r3, pc}
   189dc:	2000577c 	.word	0x2000577c

000189e0 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   189e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   189e4:	b090      	sub	sp, #64	; 0x40
   189e6:	af08      	add	r7, sp, #32
	int err;

	if (!bt_dev.drv) {
   189e8:	4b69      	ldr	r3, [pc, #420]	; (18b90 <bt_enable+0x1b0>)
   189ea:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   189ee:	2b00      	cmp	r3, #0
   189f0:	d063      	beq.n	18aba <bt_enable+0xda>
   189f2:	4605      	mov	r5, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   189f4:	4b67      	ldr	r3, [pc, #412]	; (18b94 <bt_enable+0x1b4>)
   189f6:	f3bf 8f5b 	dmb	ish
   189fa:	e853 2f00 	ldrex	r2, [r3]
   189fe:	f022 0202 	bic.w	r2, r2, #2
   18a02:	e843 2100 	strex	r1, r2, [r3]
   18a06:	2900      	cmp	r1, #0
   18a08:	d1f7      	bne.n	189fa <bt_enable+0x1a>
   18a0a:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18a0e:	f3bf 8f5b 	dmb	ish
   18a12:	e853 2f00 	ldrex	r2, [r3]
   18a16:	f042 0101 	orr.w	r1, r2, #1
   18a1a:	e843 1000 	strex	r0, r1, [r3]
   18a1e:	2800      	cmp	r0, #0
   18a20:	d1f7      	bne.n	18a12 <bt_enable+0x32>
   18a22:	f3bf 8f5b 	dmb	ish
		return -ENODEV;
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_DISABLE);

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   18a26:	f012 0f01 	tst.w	r2, #1
   18a2a:	f040 80ae 	bne.w	18b8a <bt_enable+0x1aa>
		if (err) {
			LOG_WRN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   18a2e:	4b5a      	ldr	r3, [pc, #360]	; (18b98 <bt_enable+0x1b8>)
   18a30:	601d      	str	r5, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   18a32:	4e5a      	ldr	r6, [pc, #360]	; (18b9c <bt_enable+0x1bc>)
   18a34:	2201      	movs	r2, #1
   18a36:	4611      	mov	r1, r2
   18a38:	4630      	mov	r0, r6
   18a3a:	f011 fbfa 	bl	2a232 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   18a3e:	f106 0024 	add.w	r0, r6, #36	; 0x24
   18a42:	f011 fbd3 	bl	2a1ec <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   18a46:	f8df 8158 	ldr.w	r8, [pc, #344]	; 18ba0 <bt_enable+0x1c0>
   18a4a:	2200      	movs	r2, #0
   18a4c:	2300      	movs	r3, #0
   18a4e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   18a52:	2400      	movs	r4, #0
   18a54:	9404      	str	r4, [sp, #16]
   18a56:	f06f 0308 	mvn.w	r3, #8
   18a5a:	9303      	str	r3, [sp, #12]
   18a5c:	9402      	str	r4, [sp, #8]
   18a5e:	9401      	str	r4, [sp, #4]
   18a60:	9400      	str	r4, [sp, #0]
   18a62:	4b50      	ldr	r3, [pc, #320]	; (18ba4 <bt_enable+0x1c4>)
   18a64:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   18a68:	494f      	ldr	r1, [pc, #316]	; (18ba8 <bt_enable+0x1c8>)
   18a6a:	4640      	mov	r0, r8
   18a6c:	f011 fae6 	bl	2a03c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   18a70:	494e      	ldr	r1, [pc, #312]	; (18bac <bt_enable+0x1cc>)
   18a72:	4640      	mov	r0, r8
   18a74:	f009 fe92 	bl	2279c <z_impl_k_thread_name_set>
			0, K_NO_WAIT);
	k_thread_name_set(&tx_thread_data, "BT TX");

#if defined(CONFIG_BT_RECV_WORKQ_BT)
	/* RX thread */
	k_work_queue_init(&bt_workq);
   18a78:	f8df 8134 	ldr.w	r8, [pc, #308]	; 18bb0 <bt_enable+0x1d0>
   18a7c:	4640      	mov	r0, r8
   18a7e:	f011 fce5 	bl	2a44c <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   18a82:	9400      	str	r4, [sp, #0]
   18a84:	f06f 0307 	mvn.w	r3, #7
   18a88:	f44f 6280 	mov.w	r2, #1024	; 0x400
   18a8c:	4949      	ldr	r1, [pc, #292]	; (18bb4 <bt_enable+0x1d4>)
   18a8e:	4640      	mov	r0, r8
   18a90:	f00a f9fa 	bl	22e88 <k_work_queue_start>
   18a94:	4948      	ldr	r1, [pc, #288]	; (18bb8 <bt_enable+0x1d8>)
   18a96:	4640      	mov	r0, r8
   18a98:	f009 fe80 	bl	2279c <z_impl_k_thread_name_set>
			   CONFIG_BT_RX_STACK_SIZE,
			   K_PRIO_COOP(CONFIG_BT_RX_PRIO), NULL);
	k_thread_name_set(&bt_workq.thread, "BT RX");
#endif

	err = bt_dev.drv->open();
   18a9c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   18a9e:	68db      	ldr	r3, [r3, #12]
   18aa0:	4798      	blx	r3
	if (err) {
   18aa2:	4604      	mov	r4, r0
   18aa4:	bb70      	cbnz	r0, 18b04 <bt_enable+0x124>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   18aa6:	2d00      	cmp	r5, #0
   18aa8:	d06b      	beq.n	18b82 <bt_enable+0x1a2>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
   18aaa:	4844      	ldr	r0, [pc, #272]	; (18bbc <bt_enable+0x1dc>)
   18aac:	f00a f9e4 	bl	22e78 <k_work_submit>
	return 0;
}
   18ab0:	4620      	mov	r0, r4
   18ab2:	3720      	adds	r7, #32
   18ab4:	46bd      	mov	sp, r7
   18ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("No HCI driver registered");
   18aba:	4b41      	ldr	r3, [pc, #260]	; (18bc0 <bt_enable+0x1e0>)
   18abc:	61fb      	str	r3, [r7, #28]
   18abe:	2302      	movs	r3, #2
   18ac0:	713b      	strb	r3, [r7, #4]
   18ac2:	2300      	movs	r3, #0
   18ac4:	717b      	strb	r3, [r7, #5]
   18ac6:	71bb      	strb	r3, [r7, #6]
   18ac8:	71fb      	strb	r3, [r7, #7]
   18aca:	687a      	ldr	r2, [r7, #4]
   18acc:	61ba      	str	r2, [r7, #24]
   18ace:	4619      	mov	r1, r3
   18ad0:	f363 0100 	bfi	r1, r3, #0, #1
   18ad4:	f363 0141 	bfi	r1, r3, #1, #1
   18ad8:	f363 0182 	bfi	r1, r3, #2, #1
   18adc:	f363 01c5 	bfi	r1, r3, #3, #3
   18ae0:	2201      	movs	r2, #1
   18ae2:	f362 1188 	bfi	r1, r2, #6, #3
   18ae6:	2208      	movs	r2, #8
   18ae8:	f362 2152 	bfi	r1, r2, #9, #10
   18aec:	f363 41de 	bfi	r1, r3, #19, #12
   18af0:	f363 71df 	bfi	r1, r3, #31, #1
   18af4:	f107 0218 	add.w	r2, r7, #24
   18af8:	4832      	ldr	r0, [pc, #200]	; (18bc4 <bt_enable+0x1e4>)
   18afa:	f00c fe5a 	bl	257b2 <z_impl_z_log_msg_static_create>
		return -ENODEV;
   18afe:	f06f 0412 	mvn.w	r4, #18
   18b02:	e7d5      	b.n	18ab0 <bt_enable+0xd0>
		LOG_ERR("HCI driver open failed (%d)", err);
   18b04:	466e      	mov	r6, sp
   18b06:	b088      	sub	sp, #32
   18b08:	4633      	mov	r3, r6
   18b0a:	f116 0210 	adds.w	r2, r6, #16
   18b0e:	d00d      	beq.n	18b2c <bt_enable+0x14c>
   18b10:	210c      	movs	r1, #12
   18b12:	b13a      	cbz	r2, 18b24 <bt_enable+0x144>
   18b14:	4608      	mov	r0, r1
   18b16:	2904      	cmp	r1, #4
   18b18:	dd01      	ble.n	18b1e <bt_enable+0x13e>
   18b1a:	4d2b      	ldr	r5, [pc, #172]	; (18bc8 <bt_enable+0x1e8>)
   18b1c:	615d      	str	r5, [r3, #20]
   18b1e:	2808      	cmp	r0, #8
   18b20:	dd07      	ble.n	18b32 <bt_enable+0x152>
   18b22:	619c      	str	r4, [r3, #24]
   18b24:	290b      	cmp	r1, #11
   18b26:	dd29      	ble.n	18b7c <bt_enable+0x19c>
   18b28:	250c      	movs	r5, #12
   18b2a:	e004      	b.n	18b36 <bt_enable+0x156>
   18b2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   18b30:	e7ef      	b.n	18b12 <bt_enable+0x132>
   18b32:	f06f 051b 	mvn.w	r5, #27
   18b36:	b13a      	cbz	r2, 18b48 <bt_enable+0x168>
   18b38:	2103      	movs	r1, #3
   18b3a:	7139      	strb	r1, [r7, #4]
   18b3c:	2100      	movs	r1, #0
   18b3e:	7179      	strb	r1, [r7, #5]
   18b40:	71b9      	strb	r1, [r7, #6]
   18b42:	71f9      	strb	r1, [r7, #7]
   18b44:	6878      	ldr	r0, [r7, #4]
   18b46:	6118      	str	r0, [r3, #16]
   18b48:	2100      	movs	r1, #0
   18b4a:	f36f 0100 	bfc	r1, #0, #1
   18b4e:	f36f 0141 	bfc	r1, #1, #1
   18b52:	f36f 0182 	bfc	r1, #2, #1
   18b56:	f36f 01c5 	bfc	r1, #3, #3
   18b5a:	2301      	movs	r3, #1
   18b5c:	f363 1188 	bfi	r1, r3, #6, #3
   18b60:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   18b64:	f363 2152 	bfi	r1, r3, #9, #10
   18b68:	f36f 41de 	bfc	r1, #19, #12
   18b6c:	f36f 71df 	bfc	r1, #31, #1
   18b70:	2300      	movs	r3, #0
   18b72:	4814      	ldr	r0, [pc, #80]	; (18bc4 <bt_enable+0x1e4>)
   18b74:	f00c fe1d 	bl	257b2 <z_impl_z_log_msg_static_create>
   18b78:	46b5      	mov	sp, r6
		return err;
   18b7a:	e799      	b.n	18ab0 <bt_enable+0xd0>
		LOG_ERR("HCI driver open failed (%d)", err);
   18b7c:	f06f 051b 	mvn.w	r5, #27
   18b80:	e7d9      	b.n	18b36 <bt_enable+0x156>
		return bt_init();
   18b82:	f00d fc9b 	bl	264bc <bt_init>
   18b86:	4604      	mov	r4, r0
   18b88:	e792      	b.n	18ab0 <bt_enable+0xd0>
		return -EALREADY;
   18b8a:	f06f 0477 	mvn.w	r4, #119	; 0x77
   18b8e:	e78f      	b.n	18ab0 <bt_enable+0xd0>
   18b90:	20000370 	.word	0x20000370
   18b94:	2000043c 	.word	0x2000043c
   18b98:	2000577c 	.word	0x2000577c
   18b9c:	20000488 	.word	0x20000488
   18ba0:	20001f50 	.word	0x20001f50
   18ba4:	00018789 	.word	0x00018789
   18ba8:	20007280 	.word	0x20007280
   18bac:	0002c5ec 	.word	0x0002c5ec
   18bb0:	20002008 	.word	0x20002008
   18bb4:	200078c0 	.word	0x200078c0
   18bb8:	0002c5f4 	.word	0x0002c5f4
   18bbc:	2000042c 	.word	0x2000042c
   18bc0:	0002c5d0 	.word	0x0002c5d0
   18bc4:	0002b17c 	.word	0x0002b17c
   18bc8:	0002c5fc 	.word	0x0002c5fc

00018bcc <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18bcc:	f3bf 8f5b 	dmb	ish
   18bd0:	4b03      	ldr	r3, [pc, #12]	; (18be0 <bt_is_ready+0x14>)
   18bd2:	6818      	ldr	r0, [r3, #0]
   18bd4:	f3bf 8f5b 	dmb	ish
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   18bd8:	f3c0 0080 	ubfx	r0, r0, #2, #1
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   18bdc:	4770      	bx	lr
   18bde:	bf00      	nop
   18be0:	2000043c 	.word	0x2000043c

00018be4 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   18be4:	4800      	ldr	r0, [pc, #0]	; (18be8 <bt_get_name+0x4>)
   18be6:	4770      	bx	lr
   18be8:	0002c618 	.word	0x0002c618

00018bec <bt_le_filter_accept_list_add>:
	}
}

#if defined(CONFIG_BT_FILTER_ACCEPT_LIST)
int bt_le_filter_accept_list_add(const bt_addr_le_t *addr)
{
   18bec:	b530      	push	{r4, r5, lr}
   18bee:	b089      	sub	sp, #36	; 0x24
   18bf0:	f3bf 8f5b 	dmb	ish
   18bf4:	4b27      	ldr	r3, [pc, #156]	; (18c94 <bt_le_filter_accept_list_add+0xa8>)
   18bf6:	681b      	ldr	r3, [r3, #0]
   18bf8:	f3bf 8f5b 	dmb	ish
	struct bt_hci_cp_le_add_dev_to_fal *cp;
	struct net_buf *buf;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   18bfc:	f013 0f04 	tst.w	r3, #4
   18c00:	d041      	beq.n	18c86 <bt_le_filter_accept_list_add+0x9a>
   18c02:	4604      	mov	r4, r0
		return -EAGAIN;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_FAL, sizeof(*cp));
   18c04:	2107      	movs	r1, #7
   18c06:	f242 0011 	movw	r0, #8209	; 0x2011
   18c0a:	f7fe fc31 	bl	17470 <bt_hci_cmd_create>
	if (!buf) {
   18c0e:	4605      	mov	r5, r0
   18c10:	2800      	cmp	r0, #0
   18c12:	d03b      	beq.n	18c8c <bt_le_filter_accept_list_add+0xa0>
	return net_buf_simple_add(&buf->b, len);
   18c14:	2107      	movs	r1, #7
   18c16:	300c      	adds	r0, #12
   18c18:	f00f fbbf 	bl	2839a <net_buf_simple_add>
	memcpy(dst, src, sizeof(*dst));
   18c1c:	2207      	movs	r2, #7
   18c1e:	4621      	mov	r1, r4
   18c20:	f00d fa01 	bl	26026 <memcpy>
	}

	cp = net_buf_add(buf, sizeof(*cp));
	bt_addr_le_copy(&cp->addr, addr);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_FAL, buf, NULL);
   18c24:	2200      	movs	r2, #0
   18c26:	4629      	mov	r1, r5
   18c28:	f242 0011 	movw	r0, #8209	; 0x2011
   18c2c:	f7fe fc5e 	bl	174ec <bt_hci_cmd_send_sync>
	if (err) {
   18c30:	4604      	mov	r4, r0
   18c32:	b910      	cbnz	r0, 18c3a <bt_le_filter_accept_list_add+0x4e>

		return err;
	}

	return 0;
}
   18c34:	4620      	mov	r0, r4
   18c36:	b009      	add	sp, #36	; 0x24
   18c38:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Failed to add device to filter accept list");
   18c3a:	4b17      	ldr	r3, [pc, #92]	; (18c98 <bt_le_filter_accept_list_add+0xac>)
   18c3c:	9307      	str	r3, [sp, #28]
   18c3e:	2302      	movs	r3, #2
   18c40:	f88d 3004 	strb.w	r3, [sp, #4]
   18c44:	2300      	movs	r3, #0
   18c46:	f88d 3005 	strb.w	r3, [sp, #5]
   18c4a:	f88d 3006 	strb.w	r3, [sp, #6]
   18c4e:	f88d 3007 	strb.w	r3, [sp, #7]
   18c52:	9a01      	ldr	r2, [sp, #4]
   18c54:	9206      	str	r2, [sp, #24]
   18c56:	4619      	mov	r1, r3
   18c58:	f363 0100 	bfi	r1, r3, #0, #1
   18c5c:	f363 0141 	bfi	r1, r3, #1, #1
   18c60:	f363 0182 	bfi	r1, r3, #2, #1
   18c64:	f363 01c5 	bfi	r1, r3, #3, #3
   18c68:	2201      	movs	r2, #1
   18c6a:	f362 1188 	bfi	r1, r2, #6, #3
   18c6e:	2208      	movs	r2, #8
   18c70:	f362 2152 	bfi	r1, r2, #9, #10
   18c74:	f363 41de 	bfi	r1, r3, #19, #12
   18c78:	f363 71df 	bfi	r1, r3, #31, #1
   18c7c:	aa06      	add	r2, sp, #24
   18c7e:	4807      	ldr	r0, [pc, #28]	; (18c9c <bt_le_filter_accept_list_add+0xb0>)
   18c80:	f00c fd97 	bl	257b2 <z_impl_z_log_msg_static_create>
		return err;
   18c84:	e7d6      	b.n	18c34 <bt_le_filter_accept_list_add+0x48>
		return -EAGAIN;
   18c86:	f06f 040a 	mvn.w	r4, #10
   18c8a:	e7d3      	b.n	18c34 <bt_le_filter_accept_list_add+0x48>
		return -ENOBUFS;
   18c8c:	f06f 0468 	mvn.w	r4, #104	; 0x68
   18c90:	e7d0      	b.n	18c34 <bt_le_filter_accept_list_add+0x48>
   18c92:	bf00      	nop
   18c94:	2000043c 	.word	0x2000043c
   18c98:	0002c628 	.word	0x0002c628
   18c9c:	0002b17c 	.word	0x0002b17c

00018ca0 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   18ca0:	b570      	push	{r4, r5, r6, lr}
   18ca2:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   18ca4:	2400      	movs	r4, #0
   18ca6:	e001      	b.n	18cac <id_find+0xc>
   18ca8:	3401      	adds	r4, #1
   18caa:	b2e4      	uxtb	r4, r4
   18cac:	4b09      	ldr	r3, [pc, #36]	; (18cd4 <id_find+0x34>)
   18cae:	79db      	ldrb	r3, [r3, #7]
   18cb0:	42a3      	cmp	r3, r4
   18cb2:	d90b      	bls.n	18ccc <id_find+0x2c>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   18cb4:	4626      	mov	r6, r4
   18cb6:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   18cba:	2207      	movs	r2, #7
   18cbc:	4b05      	ldr	r3, [pc, #20]	; (18cd4 <id_find+0x34>)
   18cbe:	4419      	add	r1, r3
   18cc0:	4628      	mov	r0, r5
   18cc2:	f00d f99e 	bl	26002 <memcmp>
   18cc6:	2800      	cmp	r0, #0
   18cc8:	d1ee      	bne.n	18ca8 <id_find+0x8>
   18cca:	e001      	b.n	18cd0 <id_find+0x30>
			return id;
		}
	}

	return -ENOENT;
   18ccc:	f06f 0601 	mvn.w	r6, #1
}
   18cd0:	4630      	mov	r0, r6
   18cd2:	bd70      	pop	{r4, r5, r6, pc}
   18cd4:	20000370 	.word	0x20000370

00018cd8 <set_random_address>:
{
   18cd8:	b570      	push	{r4, r5, r6, lr}
   18cda:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   18cdc:	2206      	movs	r2, #6
   18cde:	4914      	ldr	r1, [pc, #80]	; (18d30 <set_random_address+0x58>)
   18ce0:	f00d f98f 	bl	26002 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   18ce4:	4605      	mov	r5, r0
   18ce6:	b908      	cbnz	r0, 18cec <set_random_address+0x14>
}
   18ce8:	4628      	mov	r0, r5
   18cea:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   18cec:	2106      	movs	r1, #6
   18cee:	f242 0005 	movw	r0, #8197	; 0x2005
   18cf2:	f7fe fbbd 	bl	17470 <bt_hci_cmd_create>
	if (!buf) {
   18cf6:	4605      	mov	r5, r0
   18cf8:	b1b8      	cbz	r0, 18d2a <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   18cfa:	2206      	movs	r2, #6
   18cfc:	4621      	mov	r1, r4
   18cfe:	300c      	adds	r0, #12
   18d00:	f00f fb51 	bl	283a6 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   18d04:	2200      	movs	r2, #0
   18d06:	4629      	mov	r1, r5
   18d08:	f242 0005 	movw	r0, #8197	; 0x2005
   18d0c:	f7fe fbee 	bl	174ec <bt_hci_cmd_send_sync>
	if (err) {
   18d10:	4605      	mov	r5, r0
   18d12:	2800      	cmp	r0, #0
   18d14:	d1e8      	bne.n	18ce8 <set_random_address+0x10>
	memcpy(dst, src, sizeof(*dst));
   18d16:	4e06      	ldr	r6, [pc, #24]	; (18d30 <set_random_address+0x58>)
   18d18:	2206      	movs	r2, #6
   18d1a:	4621      	mov	r1, r4
   18d1c:	4630      	mov	r0, r6
   18d1e:	f00d f982 	bl	26026 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   18d22:	2301      	movs	r3, #1
   18d24:	f806 3c01 	strb.w	r3, [r6, #-1]
	return 0;
   18d28:	e7de      	b.n	18ce8 <set_random_address+0x10>
		return -ENOBUFS;
   18d2a:	f06f 0568 	mvn.w	r5, #104	; 0x68
   18d2e:	e7db      	b.n	18ce8 <set_random_address+0x10>
   18d30:	200003d1 	.word	0x200003d1

00018d34 <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   18d34:	b570      	push	{r4, r5, r6, lr}
   18d36:	b082      	sub	sp, #8
   18d38:	4605      	mov	r5, r0
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   18d3a:	460e      	mov	r6, r1
   18d3c:	b129      	cbz	r1, 18d4a <id_create+0x16>
	return memcmp(a, b, sizeof(*a));
   18d3e:	2207      	movs	r2, #7
   18d40:	4915      	ldr	r1, [pc, #84]	; (18d98 <id_create+0x64>)
   18d42:	4630      	mov	r0, r6
   18d44:	f00d f95d 	bl	26002 <memcmp>
   18d48:	b9d8      	cbnz	r0, 18d82 <id_create+0x4e>
		bt_addr_le_t new_addr;

		do {
			int err;

			err = bt_addr_le_create_static(&new_addr);
   18d4a:	4668      	mov	r0, sp
   18d4c:	f00d fa34 	bl	261b8 <bt_addr_le_create_static>
			if (err) {
   18d50:	4604      	mov	r4, r0
   18d52:	b998      	cbnz	r0, 18d7c <id_create+0x48>
				return err;
			}
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);
   18d54:	4668      	mov	r0, sp
   18d56:	f7ff ffa3 	bl	18ca0 <id_find>
   18d5a:	2800      	cmp	r0, #0
   18d5c:	daf5      	bge.n	18d4a <id_create+0x16>

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   18d5e:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   18d62:	4b0e      	ldr	r3, [pc, #56]	; (18d9c <id_create+0x68>)
   18d64:	441d      	add	r5, r3
	memcpy(dst, src, sizeof(*dst));
   18d66:	2207      	movs	r2, #7
   18d68:	4669      	mov	r1, sp
   18d6a:	4628      	mov	r0, r5
   18d6c:	f00d f95b 	bl	26026 <memcpy>

		if (addr) {
   18d70:	b126      	cbz	r6, 18d7c <id_create+0x48>
   18d72:	2207      	movs	r2, #7
   18d74:	4629      	mov	r1, r5
   18d76:	4630      	mov	r0, r6
   18d78:	f00d f955 	bl	26026 <memcpy>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
}
   18d7c:	4620      	mov	r0, r4
   18d7e:	b002      	add	sp, #8
   18d80:	bd70      	pop	{r4, r5, r6, pc}
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   18d82:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   18d86:	2207      	movs	r2, #7
   18d88:	4631      	mov	r1, r6
   18d8a:	4804      	ldr	r0, [pc, #16]	; (18d9c <id_create+0x68>)
   18d8c:	4428      	add	r0, r5
   18d8e:	f00d f94a 	bl	26026 <memcpy>
	return 0;
   18d92:	2400      	movs	r4, #0
}
   18d94:	e7f2      	b.n	18d7c <id_create+0x48>
   18d96:	bf00      	nop
   18d98:	0002bffc 	.word	0x0002bffc
   18d9c:	20000370 	.word	0x20000370

00018da0 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   18da0:	b570      	push	{r4, r5, r6, lr}
   18da2:	b08a      	sub	sp, #40	; 0x28
   18da4:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   18da6:	4605      	mov	r5, r0
   18da8:	b188      	cbz	r0, 18dce <bt_id_create+0x2e>
	return memcmp(a, b, sizeof(*a));
   18daa:	2207      	movs	r2, #7
   18dac:	4938      	ldr	r1, [pc, #224]	; (18e90 <bt_id_create+0xf0>)
   18dae:	f00d f928 	bl	26002 <memcmp>
   18db2:	b160      	cbz	r0, 18dce <bt_id_create+0x2e>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   18db4:	782b      	ldrb	r3, [r5, #0]
   18db6:	2b01      	cmp	r3, #1
   18db8:	d135      	bne.n	18e26 <bt_id_create+0x86>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
   18dba:	79ab      	ldrb	r3, [r5, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
   18dbc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   18dc0:	2bc0      	cmp	r3, #192	; 0xc0
   18dc2:	d130      	bne.n	18e26 <bt_id_create+0x86>
			LOG_ERR("Only static random identity address supported");
			return -EINVAL;
		}

		if (id_find(addr) >= 0) {
   18dc4:	4628      	mov	r0, r5
   18dc6:	f7ff ff6b 	bl	18ca0 <id_find>
   18dca:	2800      	cmp	r0, #0
   18dcc:	da56      	bge.n	18e7c <bt_id_create+0xdc>
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   18dce:	2c00      	cmp	r4, #0
   18dd0:	d157      	bne.n	18e82 <bt_id_create+0xe2>
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   18dd2:	4b30      	ldr	r3, [pc, #192]	; (18e94 <bt_id_create+0xf4>)
   18dd4:	79db      	ldrb	r3, [r3, #7]
   18dd6:	2b01      	cmp	r3, #1
   18dd8:	d056      	beq.n	18e88 <bt_id_create+0xe8>
   18dda:	f3bf 8f5b 	dmb	ish
   18dde:	4b2e      	ldr	r3, [pc, #184]	; (18e98 <bt_id_create+0xf8>)
   18de0:	681b      	ldr	r3, [r3, #0]
   18de2:	f3bf 8f5b 	dmb	ish
		return -ENOMEM;
	}

	/* bt_rand is not available before Bluetooth enable has been called */
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   18de6:	f013 0f01 	tst.w	r3, #1
   18dea:	d10d      	bne.n	18e08 <bt_id_create+0x68>
		uint8_t zero_irk[16] = { 0 };
   18dec:	2300      	movs	r3, #0
   18dee:	9300      	str	r3, [sp, #0]
   18df0:	9301      	str	r3, [sp, #4]
   18df2:	9302      	str	r3, [sp, #8]
   18df4:	9303      	str	r3, [sp, #12]

		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   18df6:	2d00      	cmp	r5, #0
   18df8:	d03d      	beq.n	18e76 <bt_id_create+0xd6>
   18dfa:	2207      	movs	r2, #7
   18dfc:	4924      	ldr	r1, [pc, #144]	; (18e90 <bt_id_create+0xf0>)
   18dfe:	4628      	mov	r0, r5
   18e00:	f00d f8ff 	bl	26002 <memcmp>
   18e04:	2800      	cmp	r0, #0
   18e06:	d036      	beq.n	18e76 <bt_id_create+0xd6>
		    !(irk && memcmp(irk, zero_irk, 16))) {
			return -EINVAL;
		}
	}

	new_id = bt_dev.id_count;
   18e08:	4b22      	ldr	r3, [pc, #136]	; (18e94 <bt_id_create+0xf4>)
   18e0a:	79de      	ldrb	r6, [r3, #7]
	err = id_create(new_id, addr, irk);
   18e0c:	4622      	mov	r2, r4
   18e0e:	4629      	mov	r1, r5
   18e10:	4630      	mov	r0, r6
   18e12:	f7ff ff8f 	bl	18d34 <id_create>
	if (err) {
   18e16:	b920      	cbnz	r0, 18e22 <bt_id_create+0x82>
		return err;
	} else {
		bt_dev.id_count++;
   18e18:	4a1e      	ldr	r2, [pc, #120]	; (18e94 <bt_id_create+0xf4>)
   18e1a:	79d3      	ldrb	r3, [r2, #7]
   18e1c:	3301      	adds	r3, #1
   18e1e:	71d3      	strb	r3, [r2, #7]
	}

	return new_id;
   18e20:	4630      	mov	r0, r6
}
   18e22:	b00a      	add	sp, #40	; 0x28
   18e24:	bd70      	pop	{r4, r5, r6, pc}
			LOG_ERR("Only static random identity address supported");
   18e26:	4b1d      	ldr	r3, [pc, #116]	; (18e9c <bt_id_create+0xfc>)
   18e28:	9309      	str	r3, [sp, #36]	; 0x24
   18e2a:	2302      	movs	r3, #2
   18e2c:	f88d 3000 	strb.w	r3, [sp]
   18e30:	2300      	movs	r3, #0
   18e32:	f88d 3001 	strb.w	r3, [sp, #1]
   18e36:	f88d 3002 	strb.w	r3, [sp, #2]
   18e3a:	f88d 3003 	strb.w	r3, [sp, #3]
   18e3e:	9a00      	ldr	r2, [sp, #0]
   18e40:	9208      	str	r2, [sp, #32]
   18e42:	4619      	mov	r1, r3
   18e44:	f363 0100 	bfi	r1, r3, #0, #1
   18e48:	f363 0141 	bfi	r1, r3, #1, #1
   18e4c:	f363 0182 	bfi	r1, r3, #2, #1
   18e50:	f363 01c5 	bfi	r1, r3, #3, #3
   18e54:	2201      	movs	r2, #1
   18e56:	f362 1188 	bfi	r1, r2, #6, #3
   18e5a:	2208      	movs	r2, #8
   18e5c:	f362 2152 	bfi	r1, r2, #9, #10
   18e60:	f363 41de 	bfi	r1, r3, #19, #12
   18e64:	f363 71df 	bfi	r1, r3, #31, #1
   18e68:	aa08      	add	r2, sp, #32
   18e6a:	480d      	ldr	r0, [pc, #52]	; (18ea0 <bt_id_create+0x100>)
   18e6c:	f00c fca1 	bl	257b2 <z_impl_z_log_msg_static_create>
			return -EINVAL;
   18e70:	f06f 0015 	mvn.w	r0, #21
   18e74:	e7d5      	b.n	18e22 <bt_id_create+0x82>
			return -EINVAL;
   18e76:	f06f 0015 	mvn.w	r0, #21
   18e7a:	e7d2      	b.n	18e22 <bt_id_create+0x82>
			return -EALREADY;
   18e7c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   18e80:	e7cf      	b.n	18e22 <bt_id_create+0x82>
		return -EINVAL;
   18e82:	f06f 0015 	mvn.w	r0, #21
   18e86:	e7cc      	b.n	18e22 <bt_id_create+0x82>
		return -ENOMEM;
   18e88:	f06f 000b 	mvn.w	r0, #11
   18e8c:	e7c9      	b.n	18e22 <bt_id_create+0x82>
   18e8e:	bf00      	nop
   18e90:	0002bffc 	.word	0x0002bffc
   18e94:	20000370 	.word	0x20000370
   18e98:	2000043c 	.word	0x2000043c
   18e9c:	0002c6f8 	.word	0x0002c6f8
   18ea0:	0002b184 	.word	0x0002b184

00018ea4 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   18ea4:	b530      	push	{r4, r5, lr}
   18ea6:	b08f      	sub	sp, #60	; 0x3c
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   18ea8:	b1f0      	cbz	r0, 18ee8 <bt_id_read_public_addr+0x44>
   18eaa:	4605      	mov	r5, r0
		LOG_WRN("Invalid input parameters");
		return 0U;
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   18eac:	aa01      	add	r2, sp, #4
   18eae:	2100      	movs	r1, #0
   18eb0:	f241 0009 	movw	r0, #4105	; 0x1009
   18eb4:	f7fe fb1a 	bl	174ec <bt_hci_cmd_send_sync>
	if (err) {
   18eb8:	2800      	cmp	r0, #0
   18eba:	d13c      	bne.n	18f36 <bt_id_read_public_addr+0x92>
		LOG_WRN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   18ebc:	9b01      	ldr	r3, [sp, #4]
   18ebe:	68dc      	ldr	r4, [r3, #12]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   18ec0:	3401      	adds	r4, #1
	return memcmp(a, b, sizeof(*a));
   18ec2:	2206      	movs	r2, #6
   18ec4:	4935      	ldr	r1, [pc, #212]	; (18f9c <bt_id_read_public_addr+0xf8>)
   18ec6:	4620      	mov	r0, r4
   18ec8:	f00d f89b 	bl	26002 <memcmp>
   18ecc:	b130      	cbz	r0, 18edc <bt_id_read_public_addr+0x38>
   18ece:	2206      	movs	r2, #6
   18ed0:	4933      	ldr	r1, [pc, #204]	; (18fa0 <bt_id_read_public_addr+0xfc>)
   18ed2:	4620      	mov	r0, r4
   18ed4:	f00d f895 	bl	26002 <memcmp>
   18ed8:	2800      	cmp	r0, #0
   18eda:	d153      	bne.n	18f84 <bt_id_read_public_addr+0xe0>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		LOG_DBG("Controller has no public address");
		net_buf_unref(rsp);
   18edc:	9801      	ldr	r0, [sp, #4]
   18ede:	f00f fa15 	bl	2830c <net_buf_unref>
		return 0U;
   18ee2:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   18ee4:	b00f      	add	sp, #60	; 0x3c
   18ee6:	bd30      	pop	{r4, r5, pc}
		LOG_WRN("Invalid input parameters");
   18ee8:	4b2e      	ldr	r3, [pc, #184]	; (18fa4 <bt_id_read_public_addr+0x100>)
   18eea:	930d      	str	r3, [sp, #52]	; 0x34
   18eec:	2302      	movs	r3, #2
   18eee:	f88d 3000 	strb.w	r3, [sp]
   18ef2:	2400      	movs	r4, #0
   18ef4:	f88d 4001 	strb.w	r4, [sp, #1]
   18ef8:	f88d 4002 	strb.w	r4, [sp, #2]
   18efc:	f88d 4003 	strb.w	r4, [sp, #3]
   18f00:	9a00      	ldr	r2, [sp, #0]
   18f02:	920c      	str	r2, [sp, #48]	; 0x30
   18f04:	4621      	mov	r1, r4
   18f06:	f364 0100 	bfi	r1, r4, #0, #1
   18f0a:	f364 0141 	bfi	r1, r4, #1, #1
   18f0e:	f364 0182 	bfi	r1, r4, #2, #1
   18f12:	f364 01c5 	bfi	r1, r4, #3, #3
   18f16:	f363 1188 	bfi	r1, r3, #6, #3
   18f1a:	2308      	movs	r3, #8
   18f1c:	f363 2152 	bfi	r1, r3, #9, #10
   18f20:	f364 41de 	bfi	r1, r4, #19, #12
   18f24:	f364 71df 	bfi	r1, r4, #31, #1
   18f28:	4623      	mov	r3, r4
   18f2a:	aa0c      	add	r2, sp, #48	; 0x30
   18f2c:	481e      	ldr	r0, [pc, #120]	; (18fa8 <bt_id_read_public_addr+0x104>)
   18f2e:	f00c fc40 	bl	257b2 <z_impl_z_log_msg_static_create>
		return 0U;
   18f32:	4620      	mov	r0, r4
   18f34:	e7d6      	b.n	18ee4 <bt_id_read_public_addr+0x40>
		LOG_WRN("Failed to read public address");
   18f36:	4b1d      	ldr	r3, [pc, #116]	; (18fac <bt_id_read_public_addr+0x108>)
   18f38:	9307      	str	r3, [sp, #28]
   18f3a:	2302      	movs	r3, #2
   18f3c:	f88d 3000 	strb.w	r3, [sp]
   18f40:	2400      	movs	r4, #0
   18f42:	f88d 4001 	strb.w	r4, [sp, #1]
   18f46:	f88d 4002 	strb.w	r4, [sp, #2]
   18f4a:	f88d 4003 	strb.w	r4, [sp, #3]
   18f4e:	9a00      	ldr	r2, [sp, #0]
   18f50:	9206      	str	r2, [sp, #24]
   18f52:	4621      	mov	r1, r4
   18f54:	f364 0100 	bfi	r1, r4, #0, #1
   18f58:	f364 0141 	bfi	r1, r4, #1, #1
   18f5c:	f364 0182 	bfi	r1, r4, #2, #1
   18f60:	f364 01c5 	bfi	r1, r4, #3, #3
   18f64:	f363 1188 	bfi	r1, r3, #6, #3
   18f68:	2308      	movs	r3, #8
   18f6a:	f363 2152 	bfi	r1, r3, #9, #10
   18f6e:	f364 41de 	bfi	r1, r4, #19, #12
   18f72:	f364 71df 	bfi	r1, r4, #31, #1
   18f76:	4623      	mov	r3, r4
   18f78:	aa06      	add	r2, sp, #24
   18f7a:	480b      	ldr	r0, [pc, #44]	; (18fa8 <bt_id_read_public_addr+0x104>)
   18f7c:	f00c fc19 	bl	257b2 <z_impl_z_log_msg_static_create>
		return 0U;
   18f80:	4620      	mov	r0, r4
   18f82:	e7af      	b.n	18ee4 <bt_id_read_public_addr+0x40>
	memcpy(dst, src, sizeof(*dst));
   18f84:	2206      	movs	r2, #6
   18f86:	4621      	mov	r1, r4
   18f88:	1c68      	adds	r0, r5, #1
   18f8a:	f00d f84c 	bl	26026 <memcpy>
	addr->type = BT_ADDR_LE_PUBLIC;
   18f8e:	2300      	movs	r3, #0
   18f90:	702b      	strb	r3, [r5, #0]
	net_buf_unref(rsp);
   18f92:	9801      	ldr	r0, [sp, #4]
   18f94:	f00f f9ba 	bl	2830c <net_buf_unref>
	return 1U;
   18f98:	2001      	movs	r0, #1
   18f9a:	e7a3      	b.n	18ee4 <bt_id_read_public_addr+0x40>
   18f9c:	0002c00c 	.word	0x0002c00c
   18fa0:	0002c004 	.word	0x0002c004
   18fa4:	0002c728 	.word	0x0002c728
   18fa8:	0002b184 	.word	0x0002b184
   18fac:	0002c744 	.word	0x0002c744

00018fb0 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   18fb0:	b500      	push	{lr}
   18fb2:	b083      	sub	sp, #12
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   18fb4:	4668      	mov	r0, sp
   18fb6:	f7ff ff75 	bl	18ea4 <bt_id_read_public_addr>
   18fba:	4b06      	ldr	r3, [pc, #24]	; (18fd4 <bt_setup_public_id_addr+0x24>)
   18fbc:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   18fbe:	b918      	cbnz	r0, 18fc8 <bt_setup_public_id_addr+0x18>
		return 0;
   18fc0:	2000      	movs	r0, #0
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
}
   18fc2:	b003      	add	sp, #12
   18fc4:	f85d fb04 	ldr.w	pc, [sp], #4
	return id_create(BT_ID_DEFAULT, &addr, irk);
   18fc8:	2200      	movs	r2, #0
   18fca:	4669      	mov	r1, sp
   18fcc:	4610      	mov	r0, r2
   18fce:	f7ff feb1 	bl	18d34 <id_create>
   18fd2:	e7f6      	b.n	18fc2 <bt_setup_public_id_addr+0x12>
   18fd4:	20000370 	.word	0x20000370

00018fd8 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   18fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18fdc:	b094      	sub	sp, #80	; 0x50
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   18fde:	4b4d      	ldr	r3, [pc, #308]	; (19114 <bt_read_static_addr+0x13c>)
   18fe0:	f893 50ba 	ldrb.w	r5, [r3, #186]	; 0xba
   18fe4:	f015 0501 	ands.w	r5, r5, #1
   18fe8:	d010      	beq.n	1900c <bt_read_static_addr+0x34>
   18fea:	4606      	mov	r6, r0
   18fec:	4688      	mov	r8, r1
		LOG_WRN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   18fee:	aa01      	add	r2, sp, #4
   18ff0:	2100      	movs	r1, #0
   18ff2:	f64f 4009 	movw	r0, #64521	; 0xfc09
   18ff6:	f7fe fa79 	bl	174ec <bt_hci_cmd_send_sync>
	if (err) {
   18ffa:	4604      	mov	r4, r0
   18ffc:	bb58      	cbnz	r0, 19056 <bt_read_static_addr+0x7e>
		LOG_WRN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   18ffe:	9b01      	ldr	r3, [sp, #4]
   19000:	68df      	ldr	r7, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
   19002:	787d      	ldrb	r5, [r7, #1]
   19004:	4545      	cmp	r5, r8
   19006:	bf28      	it	cs
   19008:	4645      	movcs	r5, r8
		LOG_WRN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
   1900a:	e053      	b.n	190b4 <bt_read_static_addr+0xdc>
		LOG_WRN("Read Static Addresses command not available");
   1900c:	4b42      	ldr	r3, [pc, #264]	; (19118 <bt_read_static_addr+0x140>)
   1900e:	9313      	str	r3, [sp, #76]	; 0x4c
   19010:	2202      	movs	r2, #2
   19012:	f88d 2000 	strb.w	r2, [sp]
   19016:	2300      	movs	r3, #0
   19018:	f88d 3001 	strb.w	r3, [sp, #1]
   1901c:	f88d 3002 	strb.w	r3, [sp, #2]
   19020:	f88d 3003 	strb.w	r3, [sp, #3]
   19024:	9900      	ldr	r1, [sp, #0]
   19026:	9112      	str	r1, [sp, #72]	; 0x48
   19028:	4619      	mov	r1, r3
   1902a:	f363 0100 	bfi	r1, r3, #0, #1
   1902e:	f363 0141 	bfi	r1, r3, #1, #1
   19032:	f363 0182 	bfi	r1, r3, #2, #1
   19036:	f363 01c5 	bfi	r1, r3, #3, #3
   1903a:	f362 1188 	bfi	r1, r2, #6, #3
   1903e:	2208      	movs	r2, #8
   19040:	f362 2152 	bfi	r1, r2, #9, #10
   19044:	f363 41de 	bfi	r1, r3, #19, #12
   19048:	f363 71df 	bfi	r1, r3, #31, #1
   1904c:	aa12      	add	r2, sp, #72	; 0x48
   1904e:	4833      	ldr	r0, [pc, #204]	; (1911c <bt_read_static_addr+0x144>)
   19050:	f00c fbaf 	bl	257b2 <z_impl_z_log_msg_static_create>
		return 0;
   19054:	e034      	b.n	190c0 <bt_read_static_addr+0xe8>
		LOG_WRN("Failed to read static addresses");
   19056:	4b32      	ldr	r3, [pc, #200]	; (19120 <bt_read_static_addr+0x148>)
   19058:	930d      	str	r3, [sp, #52]	; 0x34
   1905a:	2302      	movs	r3, #2
   1905c:	f88d 3000 	strb.w	r3, [sp]
   19060:	2500      	movs	r5, #0
   19062:	f88d 5001 	strb.w	r5, [sp, #1]
   19066:	f88d 5002 	strb.w	r5, [sp, #2]
   1906a:	f88d 5003 	strb.w	r5, [sp, #3]
   1906e:	9a00      	ldr	r2, [sp, #0]
   19070:	920c      	str	r2, [sp, #48]	; 0x30
   19072:	4629      	mov	r1, r5
   19074:	f365 0100 	bfi	r1, r5, #0, #1
   19078:	f365 0141 	bfi	r1, r5, #1, #1
   1907c:	f365 0182 	bfi	r1, r5, #2, #1
   19080:	f365 01c5 	bfi	r1, r5, #3, #3
   19084:	f363 1188 	bfi	r1, r3, #6, #3
   19088:	2308      	movs	r3, #8
   1908a:	f363 2152 	bfi	r1, r3, #9, #10
   1908e:	f365 41de 	bfi	r1, r5, #19, #12
   19092:	f365 71df 	bfi	r1, r5, #31, #1
   19096:	462b      	mov	r3, r5
   19098:	aa0c      	add	r2, sp, #48	; 0x30
   1909a:	4820      	ldr	r0, [pc, #128]	; (1911c <bt_read_static_addr+0x144>)
   1909c:	f00c fb89 	bl	257b2 <z_impl_z_log_msg_static_create>
		return 0;
   190a0:	e00e      	b.n	190c0 <bt_read_static_addr+0xe8>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   190a2:	2216      	movs	r2, #22
   190a4:	fb02 f004 	mul.w	r0, r2, r4
   190a8:	1839      	adds	r1, r7, r0
   190aa:	3102      	adds	r1, #2
   190ac:	4430      	add	r0, r6
   190ae:	f00c ffba 	bl	26026 <memcpy>
	for (i = 0; i < cnt; i++) {
   190b2:	3401      	adds	r4, #1
   190b4:	42a5      	cmp	r5, r4
   190b6:	dcf4      	bgt.n	190a2 <bt_read_static_addr+0xca>
	}

	net_buf_unref(rsp);
   190b8:	9801      	ldr	r0, [sp, #4]
   190ba:	f00f f927 	bl	2830c <net_buf_unref>
	if (!cnt) {
   190be:	b11d      	cbz	r5, 190c8 <bt_read_static_addr+0xf0>
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   190c0:	4628      	mov	r0, r5
   190c2:	b014      	add	sp, #80	; 0x50
   190c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_WRN("No static addresses stored in controller");
   190c8:	4b16      	ldr	r3, [pc, #88]	; (19124 <bt_read_static_addr+0x14c>)
   190ca:	9307      	str	r3, [sp, #28]
   190cc:	2202      	movs	r2, #2
   190ce:	f88d 2000 	strb.w	r2, [sp]
   190d2:	2300      	movs	r3, #0
   190d4:	f88d 3001 	strb.w	r3, [sp, #1]
   190d8:	f88d 3002 	strb.w	r3, [sp, #2]
   190dc:	f88d 3003 	strb.w	r3, [sp, #3]
   190e0:	9900      	ldr	r1, [sp, #0]
   190e2:	9106      	str	r1, [sp, #24]
   190e4:	4619      	mov	r1, r3
   190e6:	f363 0100 	bfi	r1, r3, #0, #1
   190ea:	f363 0141 	bfi	r1, r3, #1, #1
   190ee:	f363 0182 	bfi	r1, r3, #2, #1
   190f2:	f363 01c5 	bfi	r1, r3, #3, #3
   190f6:	f362 1188 	bfi	r1, r2, #6, #3
   190fa:	2208      	movs	r2, #8
   190fc:	f362 2152 	bfi	r1, r2, #9, #10
   19100:	f363 41de 	bfi	r1, r3, #19, #12
   19104:	f363 71df 	bfi	r1, r3, #31, #1
   19108:	aa06      	add	r2, sp, #24
   1910a:	4804      	ldr	r0, [pc, #16]	; (1911c <bt_read_static_addr+0x144>)
   1910c:	f00c fb51 	bl	257b2 <z_impl_z_log_msg_static_create>
   19110:	e7d6      	b.n	190c0 <bt_read_static_addr+0xe8>
   19112:	bf00      	nop
   19114:	20000370 	.word	0x20000370
   19118:	0002c764 	.word	0x0002c764
   1911c:	0002b184 	.word	0x0002b184
   19120:	0002c790 	.word	0x0002c790
   19124:	0002c7b0 	.word	0x0002c7b0

00019128 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   19128:	b510      	push	{r4, lr}
   1912a:	b088      	sub	sp, #32
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   1912c:	4b17      	ldr	r3, [pc, #92]	; (1918c <bt_setup_random_id_addr+0x64>)
   1912e:	79dc      	ldrb	r4, [r3, #7]
   19130:	b934      	cbnz	r4, 19140 <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   19132:	2101      	movs	r1, #1
   19134:	a802      	add	r0, sp, #8
   19136:	f7ff ff4f 	bl	18fd8 <bt_read_static_addr>
   1913a:	4b14      	ldr	r3, [pc, #80]	; (1918c <bt_setup_random_id_addr+0x64>)
   1913c:	71d8      	strb	r0, [r3, #7]

		if (bt_dev.id_count) {
   1913e:	b948      	cbnz	r0, 19154 <bt_setup_random_id_addr+0x2c>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   19140:	2100      	movs	r1, #0
   19142:	4608      	mov	r0, r1
   19144:	f7ff fe2c 	bl	18da0 <bt_id_create>
   19148:	4603      	mov	r3, r0
}
   1914a:	4618      	mov	r0, r3
   1914c:	b008      	add	sp, #32
   1914e:	bd10      	pop	{r4, pc}
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   19150:	3401      	adds	r4, #1
   19152:	b2e4      	uxtb	r4, r4
   19154:	4b0d      	ldr	r3, [pc, #52]	; (1918c <bt_setup_random_id_addr+0x64>)
   19156:	79db      	ldrb	r3, [r3, #7]
   19158:	42a3      	cmp	r3, r4
   1915a:	d914      	bls.n	19186 <bt_setup_random_id_addr+0x5e>
   1915c:	2206      	movs	r2, #6
   1915e:	2116      	movs	r1, #22
   19160:	ab02      	add	r3, sp, #8
   19162:	fb01 3104 	mla	r1, r1, r4, r3
   19166:	f10d 0001 	add.w	r0, sp, #1
   1916a:	f00c ff5c 	bl	26026 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   1916e:	2301      	movs	r3, #1
   19170:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   19174:	2200      	movs	r2, #0
   19176:	4669      	mov	r1, sp
   19178:	4620      	mov	r0, r4
   1917a:	f7ff fddb 	bl	18d34 <id_create>
				if (err) {
   1917e:	4603      	mov	r3, r0
   19180:	2800      	cmp	r0, #0
   19182:	d0e5      	beq.n	19150 <bt_setup_random_id_addr+0x28>
   19184:	e7e1      	b.n	1914a <bt_setup_random_id_addr+0x22>
			return 0;
   19186:	2300      	movs	r3, #0
   19188:	e7df      	b.n	1914a <bt_setup_random_id_addr+0x22>
   1918a:	bf00      	nop
   1918c:	20000370 	.word	0x20000370

00019190 <bt_id_set_create_conn_own_addr>:

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
	int err;

	CHECKIF(own_addr_type == NULL) {
   19190:	b181      	cbz	r1, 191b4 <bt_id_set_create_conn_own_addr+0x24>
{
   19192:	b510      	push	{r4, lr}
   19194:	460c      	mov	r4, r1

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
   19196:	4b09      	ldr	r3, [pc, #36]	; (191bc <bt_id_set_create_conn_own_addr+0x2c>)
   19198:	781b      	ldrb	r3, [r3, #0]
   1919a:	2b01      	cmp	r3, #1
   1919c:	d004      	beq.n	191a8 <bt_id_set_create_conn_own_addr+0x18>
			if (err) {
				return err;
			}
		}

		*own_addr_type = addr->type;
   1919e:	4b07      	ldr	r3, [pc, #28]	; (191bc <bt_id_set_create_conn_own_addr+0x2c>)
   191a0:	781b      	ldrb	r3, [r3, #0]
   191a2:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   191a4:	2000      	movs	r0, #0
}
   191a6:	bd10      	pop	{r4, pc}
			err = set_random_address(&addr->a);
   191a8:	4805      	ldr	r0, [pc, #20]	; (191c0 <bt_id_set_create_conn_own_addr+0x30>)
   191aa:	f7ff fd95 	bl	18cd8 <set_random_address>
			if (err) {
   191ae:	2800      	cmp	r0, #0
   191b0:	d0f5      	beq.n	1919e <bt_id_set_create_conn_own_addr+0xe>
   191b2:	e7f8      	b.n	191a6 <bt_id_set_create_conn_own_addr+0x16>
		return -EINVAL;
   191b4:	f06f 0015 	mvn.w	r0, #21
}
   191b8:	4770      	bx	lr
   191ba:	bf00      	nop
   191bc:	20000370 	.word	0x20000370
   191c0:	20000371 	.word	0x20000371

000191c4 <bt_id_set_scan_own_addr>:

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
	int err;

	CHECKIF(own_addr_type == NULL) {
   191c4:	b181      	cbz	r1, 191e8 <bt_id_set_scan_own_addr+0x24>
{
   191c6:	b510      	push	{r4, lr}
   191c8:	460c      	mov	r4, r1
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   191ca:	4b09      	ldr	r3, [pc, #36]	; (191f0 <bt_id_set_scan_own_addr+0x2c>)
   191cc:	781b      	ldrb	r3, [r3, #0]
   191ce:	700b      	strb	r3, [r1, #0]
		/* Use NRPA unless identity has been explicitly requested
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
   191d0:	f00d f987 	bl	264e2 <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
   191d4:	b108      	cbz	r0, 191da <bt_id_set_scan_own_addr+0x16>
				return err;
			}
		}
	}

	return 0;
   191d6:	2000      	movs	r0, #0
}
   191d8:	bd10      	pop	{r4, pc}
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   191da:	f00d f98c 	bl	264f6 <bt_id_set_private_addr>
			if (err) {
   191de:	2800      	cmp	r0, #0
   191e0:	d1fa      	bne.n	191d8 <bt_id_set_scan_own_addr+0x14>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   191e2:	2301      	movs	r3, #1
   191e4:	7023      	strb	r3, [r4, #0]
   191e6:	e7f7      	b.n	191d8 <bt_id_set_scan_own_addr+0x14>
		return -EINVAL;
   191e8:	f06f 0015 	mvn.w	r0, #21
}
   191ec:	4770      	bx	lr
   191ee:	bf00      	nop
   191f0:	20000370 	.word	0x20000370

000191f4 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   191f4:	b510      	push	{r4, lr}
   191f6:	b094      	sub	sp, #80	; 0x50
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   191f8:	4b45      	ldr	r3, [pc, #276]	; (19310 <bt_id_init+0x11c>)
   191fa:	79db      	ldrb	r3, [r3, #7]
   191fc:	b133      	cbz	r3, 1920c <bt_id_init+0x18>
			LOG_ERR("Unable to set identity address");
			return err;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   191fe:	4b44      	ldr	r3, [pc, #272]	; (19310 <bt_id_init+0x11c>)
   19200:	79db      	ldrb	r3, [r3, #7]
   19202:	b373      	cbz	r3, 19262 <bt_id_init+0x6e>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   19204:	2400      	movs	r4, #0
}
   19206:	4620      	mov	r0, r4
   19208:	b014      	add	sp, #80	; 0x50
   1920a:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
   1920c:	f7ff fed0 	bl	18fb0 <bt_setup_public_id_addr>
		if (err) {
   19210:	4604      	mov	r4, r0
   19212:	2800      	cmp	r0, #0
   19214:	d0f3      	beq.n	191fe <bt_id_init+0xa>
			LOG_ERR("Unable to set identity address");
   19216:	4b3f      	ldr	r3, [pc, #252]	; (19314 <bt_id_init+0x120>)
   19218:	9307      	str	r3, [sp, #28]
   1921a:	2302      	movs	r3, #2
   1921c:	f88d 3004 	strb.w	r3, [sp, #4]
   19220:	2300      	movs	r3, #0
   19222:	f88d 3005 	strb.w	r3, [sp, #5]
   19226:	f88d 3006 	strb.w	r3, [sp, #6]
   1922a:	f88d 3007 	strb.w	r3, [sp, #7]
   1922e:	9a01      	ldr	r2, [sp, #4]
   19230:	9206      	str	r2, [sp, #24]
   19232:	4619      	mov	r1, r3
   19234:	f363 0100 	bfi	r1, r3, #0, #1
   19238:	f363 0141 	bfi	r1, r3, #1, #1
   1923c:	f363 0182 	bfi	r1, r3, #2, #1
   19240:	f363 01c5 	bfi	r1, r3, #3, #3
   19244:	2201      	movs	r2, #1
   19246:	f362 1188 	bfi	r1, r2, #6, #3
   1924a:	2208      	movs	r2, #8
   1924c:	f362 2152 	bfi	r1, r2, #9, #10
   19250:	f363 41de 	bfi	r1, r3, #19, #12
   19254:	f363 71df 	bfi	r1, r3, #31, #1
   19258:	aa06      	add	r2, sp, #24
   1925a:	482f      	ldr	r0, [pc, #188]	; (19318 <bt_id_init+0x124>)
   1925c:	f00c faa9 	bl	257b2 <z_impl_z_log_msg_static_create>
			return err;
   19260:	e7d1      	b.n	19206 <bt_id_init+0x12>
		err = bt_setup_random_id_addr();
   19262:	f7ff ff61 	bl	19128 <bt_setup_random_id_addr>
		if (err) {
   19266:	4604      	mov	r4, r0
   19268:	bb58      	cbnz	r0, 192c2 <bt_id_init+0xce>
		err = set_random_address(&bt_dev.id_addr[0].a);
   1926a:	482c      	ldr	r0, [pc, #176]	; (1931c <bt_id_init+0x128>)
   1926c:	f7ff fd34 	bl	18cd8 <set_random_address>
		if (err) {
   19270:	4604      	mov	r4, r0
   19272:	2800      	cmp	r0, #0
   19274:	d0c7      	beq.n	19206 <bt_id_init+0x12>
			LOG_ERR("Unable to set random address");
   19276:	4b2a      	ldr	r3, [pc, #168]	; (19320 <bt_id_init+0x12c>)
   19278:	930d      	str	r3, [sp, #52]	; 0x34
   1927a:	2302      	movs	r3, #2
   1927c:	f88d 3004 	strb.w	r3, [sp, #4]
   19280:	2300      	movs	r3, #0
   19282:	f88d 3005 	strb.w	r3, [sp, #5]
   19286:	f88d 3006 	strb.w	r3, [sp, #6]
   1928a:	f88d 3007 	strb.w	r3, [sp, #7]
   1928e:	9a01      	ldr	r2, [sp, #4]
   19290:	920c      	str	r2, [sp, #48]	; 0x30
   19292:	4619      	mov	r1, r3
   19294:	f363 0100 	bfi	r1, r3, #0, #1
   19298:	f363 0141 	bfi	r1, r3, #1, #1
   1929c:	f363 0182 	bfi	r1, r3, #2, #1
   192a0:	f363 01c5 	bfi	r1, r3, #3, #3
   192a4:	2201      	movs	r2, #1
   192a6:	f362 1188 	bfi	r1, r2, #6, #3
   192aa:	2208      	movs	r2, #8
   192ac:	f362 2152 	bfi	r1, r2, #9, #10
   192b0:	f363 41de 	bfi	r1, r3, #19, #12
   192b4:	f363 71df 	bfi	r1, r3, #31, #1
   192b8:	aa0c      	add	r2, sp, #48	; 0x30
   192ba:	4817      	ldr	r0, [pc, #92]	; (19318 <bt_id_init+0x124>)
   192bc:	f00c fa79 	bl	257b2 <z_impl_z_log_msg_static_create>
			return err;
   192c0:	e7a1      	b.n	19206 <bt_id_init+0x12>
			LOG_ERR("Unable to set identity address");
   192c2:	4b14      	ldr	r3, [pc, #80]	; (19314 <bt_id_init+0x120>)
   192c4:	9313      	str	r3, [sp, #76]	; 0x4c
   192c6:	2302      	movs	r3, #2
   192c8:	f88d 3004 	strb.w	r3, [sp, #4]
   192cc:	2300      	movs	r3, #0
   192ce:	f88d 3005 	strb.w	r3, [sp, #5]
   192d2:	f88d 3006 	strb.w	r3, [sp, #6]
   192d6:	f88d 3007 	strb.w	r3, [sp, #7]
   192da:	9a01      	ldr	r2, [sp, #4]
   192dc:	9212      	str	r2, [sp, #72]	; 0x48
   192de:	4619      	mov	r1, r3
   192e0:	f363 0100 	bfi	r1, r3, #0, #1
   192e4:	f363 0141 	bfi	r1, r3, #1, #1
   192e8:	f363 0182 	bfi	r1, r3, #2, #1
   192ec:	f363 01c5 	bfi	r1, r3, #3, #3
   192f0:	2201      	movs	r2, #1
   192f2:	f362 1188 	bfi	r1, r2, #6, #3
   192f6:	2208      	movs	r2, #8
   192f8:	f362 2152 	bfi	r1, r2, #9, #10
   192fc:	f363 41de 	bfi	r1, r3, #19, #12
   19300:	f363 71df 	bfi	r1, r3, #31, #1
   19304:	aa12      	add	r2, sp, #72	; 0x48
   19306:	4804      	ldr	r0, [pc, #16]	; (19318 <bt_id_init+0x124>)
   19308:	f00c fa53 	bl	257b2 <z_impl_z_log_msg_static_create>
			return err;
   1930c:	e77b      	b.n	19206 <bt_id_init+0x12>
   1930e:	bf00      	nop
   19310:	20000370 	.word	0x20000370
   19314:	0002c7dc 	.word	0x0002c7dc
   19318:	0002b184 	.word	0x0002b184
   1931c:	20000371 	.word	0x20000371
   19320:	0002c7fc 	.word	0x0002c7fc

00019324 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   19324:	b530      	push	{r4, r5, lr}
   19326:	b087      	sub	sp, #28
   19328:	4604      	mov	r4, r0
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   1932a:	2102      	movs	r1, #2
   1932c:	f242 000c 	movw	r0, #8204	; 0x200c
   19330:	f7fe f89e 	bl	17470 <bt_hci_cmd_create>
	if (!buf) {
   19334:	b330      	cbz	r0, 19384 <bt_le_scan_set_enable_legacy+0x60>
   19336:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   19338:	2102      	movs	r1, #2
   1933a:	300c      	adds	r0, #12
   1933c:	f00f f82d 	bl	2839a <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   19340:	2c01      	cmp	r4, #1
   19342:	d015      	beq.n	19370 <bt_le_scan_set_enable_legacy+0x4c>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
						 BT_DEV_SCAN_FILTER_DUP);
	} else {
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
   19344:	2300      	movs	r3, #0
   19346:	7043      	strb	r3, [r0, #1]
	}

	cp->enable = enable;
   19348:	7004      	strb	r4, [r0, #0]

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   1934a:	2c01      	cmp	r4, #1
   1934c:	bf14      	ite	ne
   1934e:	2400      	movne	r4, #0
   19350:	2401      	moveq	r4, #1
   19352:	9400      	str	r4, [sp, #0]
   19354:	2306      	movs	r3, #6
   19356:	4a0d      	ldr	r2, [pc, #52]	; (1938c <bt_le_scan_set_enable_legacy+0x68>)
   19358:	a903      	add	r1, sp, #12
   1935a:	4628      	mov	r0, r5
   1935c:	f7fe f876 	bl	1744c <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   19360:	2200      	movs	r2, #0
   19362:	4629      	mov	r1, r5
   19364:	f242 000c 	movw	r0, #8204	; 0x200c
   19368:	f7fe f8c0 	bl	174ec <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   1936c:	b007      	add	sp, #28
   1936e:	bd30      	pop	{r4, r5, pc}
   19370:	f3bf 8f5b 	dmb	ish
   19374:	4b05      	ldr	r3, [pc, #20]	; (1938c <bt_le_scan_set_enable_legacy+0x68>)
   19376:	681b      	ldr	r3, [r3, #0]
   19378:	f3bf 8f5b 	dmb	ish
   1937c:	f3c3 2340 	ubfx	r3, r3, #9, #1
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   19380:	7043      	strb	r3, [r0, #1]
   19382:	e7e1      	b.n	19348 <bt_le_scan_set_enable_legacy+0x24>
		return -ENOBUFS;
   19384:	f06f 0068 	mvn.w	r0, #104	; 0x68
   19388:	e7f0      	b.n	1936c <bt_le_scan_set_enable_legacy+0x48>
   1938a:	bf00      	nop
   1938c:	2000043c 	.word	0x2000043c

00019390 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   19390:	4b01      	ldr	r3, [pc, #4]	; (19398 <bt_scan_reset+0x8>)
   19392:	2200      	movs	r2, #0
   19394:	601a      	str	r2, [r3, #0]
}
   19396:	4770      	bx	lr
   19398:	20005788 	.word	0x20005788

0001939c <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
   1939c:	b570      	push	{r4, r5, r6, lr}
   1939e:	b082      	sub	sp, #8
   193a0:	4604      	mov	r4, r0
   193a2:	460e      	mov	r6, r1
   193a4:	4615      	mov	r5, r2
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
   193a6:	2207      	movs	r2, #7
   193a8:	2100      	movs	r1, #0
   193aa:	4668      	mov	r0, sp
   193ac:	f00c fe6a 	bl	26084 <memset>

	set_param.scan_type = scan_type;
   193b0:	f88d 4000 	strb.w	r4, [sp]

	/* for the rest parameters apply default values according to
	 *  spec 4.2, vol2, part E, 7.8.10
	 */
	set_param.interval = sys_cpu_to_le16(interval);
   193b4:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
   193b8:	f8ad 5003 	strh.w	r5, [sp, #3]
   193bc:	f3bf 8f5b 	dmb	ish
   193c0:	4b1f      	ldr	r3, [pc, #124]	; (19440 <start_le_scan_legacy+0xa4>)
   193c2:	681b      	ldr	r3, [r3, #0]
   193c4:	f3bf 8f5b 	dmb	ish

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
   193c8:	f413 6f80 	tst.w	r3, #1024	; 0x400
   193cc:	d010      	beq.n	193f0 <start_le_scan_legacy+0x54>
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
   193ce:	2301      	movs	r3, #1
   193d0:	f88d 3006 	strb.w	r3, [sp, #6]
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
   193d4:	2c01      	cmp	r4, #1
   193d6:	bf14      	ite	ne
   193d8:	2400      	movne	r4, #0
   193da:	2401      	moveq	r4, #1
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   193dc:	f10d 0105 	add.w	r1, sp, #5
   193e0:	4620      	mov	r0, r4
   193e2:	f7ff feef 	bl	191c4 <bt_id_set_scan_own_addr>
	if (err) {
   193e6:	4605      	mov	r5, r0
   193e8:	b130      	cbz	r0, 193f8 <start_le_scan_legacy+0x5c>
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
   193ea:	4628      	mov	r0, r5
   193ec:	b002      	add	sp, #8
   193ee:	bd70      	pop	{r4, r5, r6, pc}
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   193f0:	2300      	movs	r3, #0
   193f2:	f88d 3006 	strb.w	r3, [sp, #6]
   193f6:	e7ed      	b.n	193d4 <start_le_scan_legacy+0x38>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   193f8:	2107      	movs	r1, #7
   193fa:	f242 000b 	movw	r0, #8203	; 0x200b
   193fe:	f7fe f837 	bl	17470 <bt_hci_cmd_create>
	if (!buf) {
   19402:	4605      	mov	r5, r0
   19404:	b1c8      	cbz	r0, 1943a <start_le_scan_legacy+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   19406:	2207      	movs	r2, #7
   19408:	4669      	mov	r1, sp
   1940a:	300c      	adds	r0, #12
   1940c:	f00e ffcb 	bl	283a6 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   19410:	2200      	movs	r2, #0
   19412:	4629      	mov	r1, r5
   19414:	f242 000b 	movw	r0, #8203	; 0x200b
   19418:	f7fe f868 	bl	174ec <bt_hci_cmd_send_sync>
	if (err) {
   1941c:	4605      	mov	r5, r0
   1941e:	2800      	cmp	r0, #0
   19420:	d1e3      	bne.n	193ea <start_le_scan_legacy+0x4e>
	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   19422:	2001      	movs	r0, #1
   19424:	f00d f8b7 	bl	26596 <bt_le_scan_set_enable>
	if (err) {
   19428:	4605      	mov	r5, r0
   1942a:	2800      	cmp	r0, #0
   1942c:	d1dd      	bne.n	193ea <start_le_scan_legacy+0x4e>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);
   1942e:	4622      	mov	r2, r4
   19430:	2108      	movs	r1, #8
   19432:	4803      	ldr	r0, [pc, #12]	; (19440 <start_le_scan_legacy+0xa4>)
   19434:	f00d f88a 	bl	2654c <atomic_set_bit_to>
	return 0;
   19438:	e7d7      	b.n	193ea <start_le_scan_legacy+0x4e>
		return -ENOBUFS;
   1943a:	f06f 0568 	mvn.w	r5, #104	; 0x68
   1943e:	e7d4      	b.n	193ea <start_le_scan_legacy+0x4e>
   19440:	2000043c 	.word	0x2000043c

00019444 <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
   19444:	b538      	push	{r3, r4, r5, lr}
   19446:	f3bf 8f5b 	dmb	ish
   1944a:	4b21      	ldr	r3, [pc, #132]	; (194d0 <bt_le_scan_update+0x8c>)
   1944c:	681b      	ldr	r3, [r3, #0]
   1944e:	f3bf 8f5b 	dmb	ish
   19452:	f3c3 14c0 	ubfx	r4, r3, #7, #1
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   19456:	f013 0f80 	tst.w	r3, #128	; 0x80
   1945a:	d002      	beq.n	19462 <bt_le_scan_update+0x1e>
		return 0;
   1945c:	2400      	movs	r4, #0
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   1945e:	4620      	mov	r0, r4
   19460:	bd38      	pop	{r3, r4, r5, pc}
   19462:	4605      	mov	r5, r0
   19464:	f3bf 8f5b 	dmb	ish
   19468:	4b19      	ldr	r3, [pc, #100]	; (194d0 <bt_le_scan_update+0x8c>)
   1946a:	681b      	ldr	r3, [r3, #0]
   1946c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   19470:	f013 0f40 	tst.w	r3, #64	; 0x40
   19474:	d003      	beq.n	1947e <bt_le_scan_update+0x3a>
		err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   19476:	2000      	movs	r0, #0
   19478:	f00d f88d 	bl	26596 <bt_le_scan_set_enable>
		if (err) {
   1947c:	bb28      	cbnz	r0, 194ca <bt_le_scan_update+0x86>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   1947e:	2206      	movs	r2, #6
   19480:	2100      	movs	r1, #0
   19482:	4608      	mov	r0, r1
   19484:	f000 fff6 	bl	1a474 <bt_conn_lookup_state_le>
		if (conn) {
   19488:	b110      	cbz	r0, 19490 <bt_le_scan_update+0x4c>
			bt_conn_unref(conn);
   1948a:	f00d fa0e 	bl	268aa <bt_conn_unref>
			return 0;
   1948e:	e7e6      	b.n	1945e <bt_le_scan_update+0x1a>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   19490:	2202      	movs	r2, #2
   19492:	2100      	movs	r1, #0
   19494:	4608      	mov	r0, r1
   19496:	f000 ffed 	bl	1a474 <bt_conn_lookup_state_le>
		if (conn) {
   1949a:	4603      	mov	r3, r0
   1949c:	2800      	cmp	r0, #0
   1949e:	d0de      	beq.n	1945e <bt_le_scan_update+0x1a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   194a0:	4a0b      	ldr	r2, [pc, #44]	; (194d0 <bt_le_scan_update+0x8c>)
   194a2:	f3bf 8f5b 	dmb	ish
   194a6:	e852 0f00 	ldrex	r0, [r2]
   194aa:	f440 7000 	orr.w	r0, r0, #512	; 0x200
   194ae:	e842 0100 	strex	r1, r0, [r2]
   194b2:	2900      	cmp	r1, #0
   194b4:	d1f7      	bne.n	194a6 <bt_le_scan_update+0x62>
   194b6:	f3bf 8f5b 	dmb	ish
			bt_conn_unref(conn);
   194ba:	4618      	mov	r0, r3
   194bc:	f00d f9f5 	bl	268aa <bt_conn_unref>
			return start_passive_scan(fast_scan);
   194c0:	4628      	mov	r0, r5
   194c2:	f00d f86c 	bl	2659e <start_passive_scan>
   194c6:	4604      	mov	r4, r0
   194c8:	e7c9      	b.n	1945e <bt_le_scan_update+0x1a>
			return err;
   194ca:	4604      	mov	r4, r0
   194cc:	e7c7      	b.n	1945e <bt_le_scan_update+0x1a>
   194ce:	bf00      	nop
   194d0:	2000043c 	.word	0x2000043c

000194d4 <check_pending_conn>:

#if defined(CONFIG_BT_CENTRAL)
static void check_pending_conn(const bt_addr_le_t *id_addr,
			       const bt_addr_le_t *addr, uint8_t adv_props)
{
   194d4:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   194d6:	f3bf 8f5b 	dmb	ish
   194da:	4b20      	ldr	r3, [pc, #128]	; (1955c <check_pending_conn+0x88>)
   194dc:	681b      	ldr	r3, [r3, #0]
   194de:	f3bf 8f5b 	dmb	ish
	struct bt_conn *conn;

	/* No connections are allowed during explicit scanning */
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   194e2:	f013 0f80 	tst.w	r3, #128	; 0x80
   194e6:	d103      	bne.n	194f0 <check_pending_conn+0x1c>
   194e8:	460c      	mov	r4, r1
		return;
	}

	/* Return if event is not connectable */
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
   194ea:	f012 0f01 	tst.w	r2, #1
   194ee:	d100      	bne.n	194f2 <check_pending_conn+0x1e>
failed:
	conn->err = BT_HCI_ERR_UNSPECIFIED;
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
	bt_conn_unref(conn);
	bt_le_scan_update(false);
}
   194f0:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
   194f2:	2202      	movs	r2, #2
   194f4:	4601      	mov	r1, r0
   194f6:	2000      	movs	r0, #0
   194f8:	f000 ffbc 	bl	1a474 <bt_conn_lookup_state_le>
	if (!conn) {
   194fc:	4605      	mov	r5, r0
   194fe:	2800      	cmp	r0, #0
   19500:	d0f6      	beq.n	194f0 <check_pending_conn+0x1c>
   19502:	f3bf 8f5b 	dmb	ish
   19506:	4b15      	ldr	r3, [pc, #84]	; (1955c <check_pending_conn+0x88>)
   19508:	681b      	ldr	r3, [r3, #0]
   1950a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   1950e:	f013 0f40 	tst.w	r3, #64	; 0x40
   19512:	d003      	beq.n	1951c <check_pending_conn+0x48>
	    bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE)) {
   19514:	2000      	movs	r0, #0
   19516:	f00d f83e 	bl	26596 <bt_le_scan_set_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   1951a:	b948      	cbnz	r0, 19530 <check_pending_conn+0x5c>
	memcpy(dst, src, sizeof(*dst));
   1951c:	2207      	movs	r2, #7
   1951e:	4621      	mov	r1, r4
   19520:	f105 0096 	add.w	r0, r5, #150	; 0x96
   19524:	f00c fd7f 	bl	26026 <memcpy>
	if (bt_le_create_conn(conn)) {
   19528:	4628      	mov	r0, r5
   1952a:	f00c ff11 	bl	26350 <bt_le_create_conn>
   1952e:	b160      	cbz	r0, 1954a <check_pending_conn+0x76>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   19530:	231f      	movs	r3, #31
   19532:	726b      	strb	r3, [r5, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   19534:	2100      	movs	r1, #0
   19536:	4628      	mov	r0, r5
   19538:	f000 fcfa 	bl	19f30 <bt_conn_set_state>
	bt_conn_unref(conn);
   1953c:	4628      	mov	r0, r5
   1953e:	f00d f9b4 	bl	268aa <bt_conn_unref>
	bt_le_scan_update(false);
   19542:	2000      	movs	r0, #0
   19544:	f7ff ff7e 	bl	19444 <bt_le_scan_update>
   19548:	e7d2      	b.n	194f0 <check_pending_conn+0x1c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING);
   1954a:	2106      	movs	r1, #6
   1954c:	4628      	mov	r0, r5
   1954e:	f000 fcef 	bl	19f30 <bt_conn_set_state>
	bt_conn_unref(conn);
   19552:	4628      	mov	r0, r5
   19554:	f00d f9a9 	bl	268aa <bt_conn_unref>
	return;
   19558:	e7ca      	b.n	194f0 <check_pending_conn+0x1c>
   1955a:	bf00      	nop
   1955c:	2000043c 	.word	0x2000043c

00019560 <le_adv_recv>:
	}
}

static void le_adv_recv(bt_addr_le_t *addr, struct bt_le_scan_recv_info *info,
			struct net_buf_simple *buf, uint16_t len)
{
   19560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19564:	b085      	sub	sp, #20
   19566:	4682      	mov	sl, r0
   19568:	4688      	mov	r8, r1
   1956a:	4614      	mov	r4, r2
   1956c:	4699      	mov	r9, r3
   1956e:	f3bf 8f5b 	dmb	ish
   19572:	4b44      	ldr	r3, [pc, #272]	; (19684 <le_adv_recv+0x124>)
   19574:	681b      	ldr	r3, [r3, #0]
   19576:	f3bf 8f5b 	dmb	ish
	bt_addr_le_t id_addr;

	LOG_DBG("%s event %u, len %u, rssi %d dBm", bt_addr_le_str(addr), info->adv_type, len,
		info->rssi);

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   1957a:	f013 0f80 	tst.w	r3, #128	; 0x80
   1957e:	d003      	beq.n	19588 <le_adv_recv+0x28>
	    !IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
	    (info->adv_props & BT_HCI_LE_ADV_PROP_DIRECT)) {
   19580:	890b      	ldrh	r3, [r1, #8]
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   19582:	f013 0f04 	tst.w	r3, #4
   19586:	d179      	bne.n	1967c <le_adv_recv+0x11c>
		LOG_DBG("Dropped direct adv report");
		return;
	}

	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   19588:	f89a 2000 	ldrb.w	r2, [sl]
   1958c:	1e93      	subs	r3, r2, #2
   1958e:	b2db      	uxtb	r3, r3
   19590:	2b01      	cmp	r3, #1
   19592:	d934      	bls.n	195fe <le_adv_recv+0x9e>
	    addr->type == BT_ADDR_LE_RANDOM_ID) {
		bt_addr_le_copy(&id_addr, addr);
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   19594:	2aff      	cmp	r2, #255	; 0xff
   19596:	d03d      	beq.n	19614 <le_adv_recv+0xb4>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
	} else {
		bt_addr_le_copy(&id_addr,
   19598:	4651      	mov	r1, sl
   1959a:	2000      	movs	r0, #0
   1959c:	f00c ffa3 	bl	264e6 <bt_lookup_id_addr>
   195a0:	4601      	mov	r1, r0
   195a2:	2207      	movs	r2, #7
   195a4:	a801      	add	r0, sp, #4
   195a6:	f00c fd3e 	bl	26026 <memcpy>
				bt_lookup_id_addr(BT_ID_DEFAULT, addr));
	}

	if (scan_dev_found_cb) {
   195aa:	4b37      	ldr	r3, [pc, #220]	; (19688 <le_adv_recv+0x128>)
   195ac:	681b      	ldr	r3, [r3, #0]
   195ae:	b1c3      	cbz	r3, 195e2 <le_adv_recv+0x82>
	state->offset = net_buf_simple_headroom(buf);
   195b0:	4620      	mov	r0, r4
   195b2:	f00e ff2b 	bl	2840c <net_buf_simple_headroom>
   195b6:	4605      	mov	r5, r0
   195b8:	f8ad 000c 	strh.w	r0, [sp, #12]
	state->len = buf->len;
   195bc:	88a6      	ldrh	r6, [r4, #4]
   195be:	f8ad 600e 	strh.w	r6, [sp, #14]
		net_buf_simple_save(buf, &state);

		buf->len = len;
   195c2:	f8a4 9004 	strh.w	r9, [r4, #4]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   195c6:	4b30      	ldr	r3, [pc, #192]	; (19688 <le_adv_recv+0x128>)
   195c8:	681f      	ldr	r7, [r3, #0]
   195ca:	4623      	mov	r3, r4
   195cc:	f898 2007 	ldrb.w	r2, [r8, #7]
   195d0:	f998 1005 	ldrsb.w	r1, [r8, #5]
   195d4:	a801      	add	r0, sp, #4
   195d6:	47b8      	blx	r7
	buf->data = buf->__buf + state->offset;
   195d8:	68a3      	ldr	r3, [r4, #8]
   195da:	fa13 f585 	uxtah	r5, r3, r5
   195de:	6025      	str	r5, [r4, #0]
	buf->len = state->len;
   195e0:	80a6      	strh	r6, [r4, #4]

		net_buf_simple_restore(buf, &state);
	}

	info->addr = &id_addr;
   195e2:	ab01      	add	r3, sp, #4
   195e4:	f8c8 3000 	str.w	r3, [r8]
   195e8:	4b28      	ldr	r3, [pc, #160]	; (1968c <le_adv_recv+0x12c>)
   195ea:	681e      	ldr	r6, [r3, #0]

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   195ec:	b1c6      	cbz	r6, 19620 <le_adv_recv+0xc0>
   195ee:	3e08      	subs	r6, #8
Z_GENLIST_PEEK_NEXT(slist, snode)
   195f0:	f116 0508 	adds.w	r5, r6, #8
   195f4:	d019      	beq.n	1962a <le_adv_recv+0xca>
	return node->next;
   195f6:	68b5      	ldr	r5, [r6, #8]
   195f8:	b1bd      	cbz	r5, 1962a <le_adv_recv+0xca>
   195fa:	3d08      	subs	r5, #8
   195fc:	e015      	b.n	1962a <le_adv_recv+0xca>
   195fe:	2207      	movs	r2, #7
   19600:	4651      	mov	r1, sl
   19602:	a801      	add	r0, sp, #4
   19604:	f00c fd0f 	bl	26026 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   19608:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1960c:	3b02      	subs	r3, #2
   1960e:	f88d 3004 	strb.w	r3, [sp, #4]
   19612:	e7ca      	b.n	195aa <le_adv_recv+0x4a>
   19614:	2207      	movs	r2, #7
   19616:	491e      	ldr	r1, [pc, #120]	; (19690 <le_adv_recv+0x130>)
   19618:	a801      	add	r0, sp, #4
   1961a:	f00c fd04 	bl	26026 <memcpy>
}
   1961e:	e7c4      	b.n	195aa <le_adv_recv+0x4a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   19620:	4635      	mov	r5, r6
   19622:	e002      	b.n	1962a <le_adv_recv+0xca>
   19624:	462a      	mov	r2, r5
   19626:	462e      	mov	r6, r5
   19628:	4615      	mov	r5, r2
   1962a:	b1f6      	cbz	r6, 1966a <le_adv_recv+0x10a>
		if (listener->recv) {
   1962c:	6833      	ldr	r3, [r6, #0]
   1962e:	b1ab      	cbz	r3, 1965c <le_adv_recv+0xfc>
	state->offset = net_buf_simple_headroom(buf);
   19630:	4620      	mov	r0, r4
   19632:	f00e feeb 	bl	2840c <net_buf_simple_headroom>
   19636:	4607      	mov	r7, r0
   19638:	f8ad 000c 	strh.w	r0, [sp, #12]
	state->len = buf->len;
   1963c:	f8b4 b004 	ldrh.w	fp, [r4, #4]
   19640:	f8ad b00e 	strh.w	fp, [sp, #14]
			net_buf_simple_save(buf, &state);

			buf->len = len;
   19644:	f8a4 9004 	strh.w	r9, [r4, #4]
			listener->recv(info, buf);
   19648:	6833      	ldr	r3, [r6, #0]
   1964a:	4621      	mov	r1, r4
   1964c:	4640      	mov	r0, r8
   1964e:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
   19650:	68a3      	ldr	r3, [r4, #8]
   19652:	fa13 f787 	uxtah	r7, r3, r7
   19656:	6027      	str	r7, [r4, #0]
	buf->len = state->len;
   19658:	f8a4 b004 	strh.w	fp, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   1965c:	2d00      	cmp	r5, #0
   1965e:	d0e1      	beq.n	19624 <le_adv_recv+0xc4>
   19660:	68aa      	ldr	r2, [r5, #8]
   19662:	2a00      	cmp	r2, #0
   19664:	d0df      	beq.n	19626 <le_adv_recv+0xc6>
   19666:	3a08      	subs	r2, #8
   19668:	e7dd      	b.n	19626 <le_adv_recv+0xc6>
			net_buf_simple_restore(buf, &state);
		}
	}

	/* Clear pointer to this stack frame before returning to calling function */
	info->addr = NULL;
   1966a:	2300      	movs	r3, #0
   1966c:	f8c8 3000 	str.w	r3, [r8]

#if defined(CONFIG_BT_CENTRAL)
	check_pending_conn(&id_addr, addr, info->adv_props);
   19670:	f898 2008 	ldrb.w	r2, [r8, #8]
   19674:	4651      	mov	r1, sl
   19676:	a801      	add	r0, sp, #4
   19678:	f7ff ff2c 	bl	194d4 <check_pending_conn>
#endif /* CONFIG_BT_CENTRAL */
}
   1967c:	b005      	add	sp, #20
   1967e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19682:	bf00      	nop
   19684:	2000043c 	.word	0x2000043c
   19688:	20005788 	.word	0x20005788
   1968c:	20005780 	.word	0x20005780
   19690:	0002bffc 	.word	0x0002bffc

00019694 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   19694:	b5f0      	push	{r4, r5, r6, r7, lr}
   19696:	b08b      	sub	sp, #44	; 0x2c
   19698:	4607      	mov	r7, r0
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   1969a:	f100 060c 	add.w	r6, r0, #12
   1969e:	4630      	mov	r0, r6
   196a0:	f00e fea4 	bl	283ec <net_buf_simple_pull_u8>
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	LOG_DBG("Adv number of reports %u",  num_reports);
   196a4:	e02b      	b.n	196fe <bt_hci_le_adv_report+0x6a>
	return net_buf_simple_pull_mem(&buf->b, len);
   196a6:	2109      	movs	r1, #9
   196a8:	4630      	mov	r0, r6
   196aa:	f00e fe97 	bl	283dc <net_buf_simple_pull_mem>
   196ae:	4604      	mov	r4, r0
			break;
		}

		evt = net_buf_pull_mem(buf, sizeof(*evt));

		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   196b0:	2301      	movs	r3, #1
   196b2:	f88d 300c 	strb.w	r3, [sp, #12]
		adv_info.secondary_phy = 0;
   196b6:	2200      	movs	r2, #0
   196b8:	f88d 200d 	strb.w	r2, [sp, #13]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   196bc:	237f      	movs	r3, #127	; 0x7f
   196be:	f88d 3006 	strb.w	r3, [sp, #6]
		adv_info.rssi = evt->data[evt->length];
   196c2:	7a03      	ldrb	r3, [r0, #8]
   196c4:	4403      	add	r3, r0
   196c6:	f993 3009 	ldrsb.w	r3, [r3, #9]
   196ca:	f88d 3005 	strb.w	r3, [sp, #5]
		adv_info.sid = BT_GAP_SID_INVALID;
   196ce:	23ff      	movs	r3, #255	; 0xff
   196d0:	f88d 3004 	strb.w	r3, [sp, #4]
		adv_info.interval = 0U;
   196d4:	f8ad 200a 	strh.w	r2, [sp, #10]

		adv_info.adv_type = evt->evt_type;
   196d8:	7800      	ldrb	r0, [r0, #0]
   196da:	f88d 0007 	strb.w	r0, [sp, #7]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
   196de:	f00c ff24 	bl	2652a <get_adv_props_legacy>
   196e2:	f8ad 0008 	strh.w	r0, [sp, #8]

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   196e6:	7a23      	ldrb	r3, [r4, #8]
   196e8:	4632      	mov	r2, r6
   196ea:	4669      	mov	r1, sp
   196ec:	1c60      	adds	r0, r4, #1
   196ee:	f7ff ff37 	bl	19560 <le_adv_recv>

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   196f2:	7a21      	ldrb	r1, [r4, #8]
	return net_buf_simple_pull(&buf->b, len);
   196f4:	3101      	adds	r1, #1
   196f6:	4630      	mov	r0, r6
   196f8:	f00e fe68 	bl	283cc <net_buf_simple_pull>
	while (num_reports--) {
   196fc:	4628      	mov	r0, r5
   196fe:	1e45      	subs	r5, r0, #1
   19700:	b2ed      	uxtb	r5, r5
   19702:	b338      	cbz	r0, 19754 <bt_hci_le_adv_report+0xc0>
		if (buf->len < sizeof(*evt)) {
   19704:	8a3b      	ldrh	r3, [r7, #16]
   19706:	2b08      	cmp	r3, #8
   19708:	d8cd      	bhi.n	196a6 <bt_hci_le_adv_report+0x12>
			LOG_ERR("Unexpected end of buffer");
   1970a:	4b13      	ldr	r3, [pc, #76]	; (19758 <bt_hci_le_adv_report+0xc4>)
   1970c:	9309      	str	r3, [sp, #36]	; 0x24
   1970e:	2302      	movs	r3, #2
   19710:	f88d 3000 	strb.w	r3, [sp]
   19714:	2300      	movs	r3, #0
   19716:	f88d 3001 	strb.w	r3, [sp, #1]
   1971a:	f88d 3002 	strb.w	r3, [sp, #2]
   1971e:	f88d 3003 	strb.w	r3, [sp, #3]
   19722:	9a00      	ldr	r2, [sp, #0]
   19724:	9208      	str	r2, [sp, #32]
   19726:	4619      	mov	r1, r3
   19728:	f363 0100 	bfi	r1, r3, #0, #1
   1972c:	f363 0141 	bfi	r1, r3, #1, #1
   19730:	f363 0182 	bfi	r1, r3, #2, #1
   19734:	f363 01c5 	bfi	r1, r3, #3, #3
   19738:	2201      	movs	r2, #1
   1973a:	f362 1188 	bfi	r1, r2, #6, #3
   1973e:	2208      	movs	r2, #8
   19740:	f362 2152 	bfi	r1, r2, #9, #10
   19744:	f363 41de 	bfi	r1, r3, #19, #12
   19748:	f363 71df 	bfi	r1, r3, #31, #1
   1974c:	aa08      	add	r2, sp, #32
   1974e:	4803      	ldr	r0, [pc, #12]	; (1975c <bt_hci_le_adv_report+0xc8>)
   19750:	f00c f82f 	bl	257b2 <z_impl_z_log_msg_static_create>
	}
}
   19754:	b00b      	add	sp, #44	; 0x2c
   19756:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19758:	0002c824 	.word	0x0002c824
   1975c:	0002b194 	.word	0x0002b194

00019760 <state2str>:
#endif /* CONFIG_BT_CONN */
}

static inline const char *state2str(bt_conn_state_t state)
{
	switch (state) {
   19760:	2808      	cmp	r0, #8
   19762:	d816      	bhi.n	19792 <state2str+0x32>
   19764:	e8df f000 	tbb	[pc, r0]
   19768:	0d071705 	.word	0x0d071705
   1976c:	110f090b 	.word	0x110f090b
   19770:	13          	.byte	0x13
   19771:	00          	.byte	0x00
   19772:	480a      	ldr	r0, [pc, #40]	; (1979c <state2str+0x3c>)
   19774:	4770      	bx	lr
	case BT_CONN_DISCONNECTED:
		return "disconnected";
	case BT_CONN_DISCONNECT_COMPLETE:
		return "disconnect-complete";
	case BT_CONN_CONNECTING_SCAN:
		return "connecting-scan";
   19776:	480a      	ldr	r0, [pc, #40]	; (197a0 <state2str+0x40>)
   19778:	4770      	bx	lr
	case BT_CONN_CONNECTING_DIR_ADV:
		return "connecting-dir-adv";
   1977a:	480a      	ldr	r0, [pc, #40]	; (197a4 <state2str+0x44>)
   1977c:	4770      	bx	lr
	case BT_CONN_CONNECTING_ADV:
		return "connecting-adv";
   1977e:	480a      	ldr	r0, [pc, #40]	; (197a8 <state2str+0x48>)
   19780:	4770      	bx	lr
	case BT_CONN_CONNECTING_AUTO:
		return "connecting-auto";
   19782:	480a      	ldr	r0, [pc, #40]	; (197ac <state2str+0x4c>)
   19784:	4770      	bx	lr
	case BT_CONN_CONNECTING:
		return "connecting";
   19786:	480a      	ldr	r0, [pc, #40]	; (197b0 <state2str+0x50>)
   19788:	4770      	bx	lr
	case BT_CONN_CONNECTED:
		return "connected";
   1978a:	480a      	ldr	r0, [pc, #40]	; (197b4 <state2str+0x54>)
   1978c:	4770      	bx	lr
	case BT_CONN_DISCONNECTING:
		return "disconnecting";
   1978e:	480a      	ldr	r0, [pc, #40]	; (197b8 <state2str+0x58>)
   19790:	4770      	bx	lr
	default:
		return "(unknown)";
   19792:	480a      	ldr	r0, [pc, #40]	; (197bc <state2str+0x5c>)
   19794:	4770      	bx	lr
		return "disconnect-complete";
   19796:	480a      	ldr	r0, [pc, #40]	; (197c0 <state2str+0x60>)
	}
}
   19798:	4770      	bx	lr
   1979a:	bf00      	nop
   1979c:	0002c848 	.word	0x0002c848
   197a0:	0002c86c 	.word	0x0002c86c
   197a4:	0002c87c 	.word	0x0002c87c
   197a8:	0002c890 	.word	0x0002c890
   197ac:	0002c8a0 	.word	0x0002c8a0
   197b0:	0002c8b0 	.word	0x0002c8b0
   197b4:	0002cba0 	.word	0x0002cba0
   197b8:	0002c8bc 	.word	0x0002c8bc
   197bc:	0002c8cc 	.word	0x0002c8cc
   197c0:	0002c858 	.word	0x0002c858

000197c4 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   197c4:	b538      	push	{r3, r4, r5, lr}
   197c6:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   197c8:	4b0c      	ldr	r3, [pc, #48]	; (197fc <notify_connected+0x38>)
   197ca:	681c      	ldr	r4, [r3, #0]
   197cc:	e003      	b.n	197d6 <notify_connected+0x12>
		if (cb->connected) {
			cb->connected(conn, conn->err);
   197ce:	7a69      	ldrb	r1, [r5, #9]
   197d0:	4628      	mov	r0, r5
   197d2:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   197d4:	6924      	ldr	r4, [r4, #16]
   197d6:	b11c      	cbz	r4, 197e0 <notify_connected+0x1c>
		if (cb->connected) {
   197d8:	6823      	ldr	r3, [r4, #0]
   197da:	2b00      	cmp	r3, #0
   197dc:	d1f7      	bne.n	197ce <notify_connected+0xa>
   197de:	e7f9      	b.n	197d4 <notify_connected+0x10>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   197e0:	4c07      	ldr	r4, [pc, #28]	; (19800 <notify_connected+0x3c>)
   197e2:	e000      	b.n	197e6 <notify_connected+0x22>
   197e4:	3414      	adds	r4, #20
   197e6:	4b07      	ldr	r3, [pc, #28]	; (19804 <notify_connected+0x40>)
   197e8:	429c      	cmp	r4, r3
   197ea:	d206      	bcs.n	197fa <notify_connected+0x36>
		if (cb->connected) {
   197ec:	6823      	ldr	r3, [r4, #0]
   197ee:	2b00      	cmp	r3, #0
   197f0:	d0f8      	beq.n	197e4 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   197f2:	7a69      	ldrb	r1, [r5, #9]
   197f4:	4628      	mov	r0, r5
   197f6:	4798      	blx	r3
   197f8:	e7f4      	b.n	197e4 <notify_connected+0x20>
		}
	}
}
   197fa:	bd38      	pop	{r3, r4, r5, pc}
   197fc:	200057bc 	.word	0x200057bc
   19800:	0002b130 	.word	0x0002b130
   19804:	0002b144 	.word	0x0002b144

00019808 <notify_disconnected>:

static void notify_disconnected(struct bt_conn *conn)
{
   19808:	b538      	push	{r3, r4, r5, lr}
   1980a:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1980c:	4b0c      	ldr	r3, [pc, #48]	; (19840 <notify_disconnected+0x38>)
   1980e:	681c      	ldr	r4, [r3, #0]
   19810:	e003      	b.n	1981a <notify_disconnected+0x12>
		if (cb->disconnected) {
			cb->disconnected(conn, conn->err);
   19812:	7a69      	ldrb	r1, [r5, #9]
   19814:	4628      	mov	r0, r5
   19816:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   19818:	6924      	ldr	r4, [r4, #16]
   1981a:	b11c      	cbz	r4, 19824 <notify_disconnected+0x1c>
		if (cb->disconnected) {
   1981c:	6863      	ldr	r3, [r4, #4]
   1981e:	2b00      	cmp	r3, #0
   19820:	d1f7      	bne.n	19812 <notify_disconnected+0xa>
   19822:	e7f9      	b.n	19818 <notify_disconnected+0x10>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19824:	4c07      	ldr	r4, [pc, #28]	; (19844 <notify_disconnected+0x3c>)
   19826:	e000      	b.n	1982a <notify_disconnected+0x22>
   19828:	3414      	adds	r4, #20
   1982a:	4b07      	ldr	r3, [pc, #28]	; (19848 <notify_disconnected+0x40>)
   1982c:	429c      	cmp	r4, r3
   1982e:	d206      	bcs.n	1983e <notify_disconnected+0x36>
		if (cb->disconnected) {
   19830:	6863      	ldr	r3, [r4, #4]
   19832:	2b00      	cmp	r3, #0
   19834:	d0f8      	beq.n	19828 <notify_disconnected+0x20>
			cb->disconnected(conn, conn->err);
   19836:	7a69      	ldrb	r1, [r5, #9]
   19838:	4628      	mov	r0, r5
   1983a:	4798      	blx	r3
   1983c:	e7f4      	b.n	19828 <notify_disconnected+0x20>
		}
	}
}
   1983e:	bd38      	pop	{r3, r4, r5, pc}
   19840:	200057bc 	.word	0x200057bc
   19844:	0002b130 	.word	0x0002b130
   19848:	0002b144 	.word	0x0002b144

0001984c <create_param_setup>:

	return true;
}

static void create_param_setup(const struct bt_conn_le_create_param *param)
{
   1984c:	b410      	push	{r4}
	bt_dev.create_param = *param;
   1984e:	4c0c      	ldr	r4, [pc, #48]	; (19880 <create_param_setup+0x34>)
   19850:	f104 0c08 	add.w	ip, r4, #8
   19854:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   19856:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	bt_dev.create_param.timeout =
		(bt_dev.create_param.timeout != 0) ?
   1985a:	8aa3      	ldrh	r3, [r4, #20]
	bt_dev.create_param.timeout =
   1985c:	b90b      	cbnz	r3, 19862 <create_param_setup+0x16>
   1985e:	f44f 7396 	mov.w	r3, #300	; 0x12c
   19862:	4a07      	ldr	r2, [pc, #28]	; (19880 <create_param_setup+0x34>)
   19864:	8293      	strh	r3, [r2, #20]
		bt_dev.create_param.timeout :
		(MSEC_PER_SEC / 10) * CONFIG_BT_CREATE_CONN_TIMEOUT;

	bt_dev.create_param.interval_coded =
		(bt_dev.create_param.interval_coded != 0) ?
   19866:	8a13      	ldrh	r3, [r2, #16]
	bt_dev.create_param.interval_coded =
   19868:	b903      	cbnz	r3, 1986c <create_param_setup+0x20>
   1986a:	8993      	ldrh	r3, [r2, #12]
   1986c:	4a04      	ldr	r2, [pc, #16]	; (19880 <create_param_setup+0x34>)
   1986e:	8213      	strh	r3, [r2, #16]
		bt_dev.create_param.interval_coded :
		bt_dev.create_param.interval;

	bt_dev.create_param.window_coded =
		(bt_dev.create_param.window_coded != 0) ?
   19870:	8a53      	ldrh	r3, [r2, #18]
	bt_dev.create_param.window_coded =
   19872:	b903      	cbnz	r3, 19876 <create_param_setup+0x2a>
   19874:	89d3      	ldrh	r3, [r2, #14]
   19876:	4a02      	ldr	r2, [pc, #8]	; (19880 <create_param_setup+0x34>)
   19878:	8253      	strh	r3, [r2, #18]
		bt_dev.create_param.window_coded :
		bt_dev.create_param.window;
}
   1987a:	bc10      	pop	{r4}
   1987c:	4770      	bx	lr
   1987e:	bf00      	nop
   19880:	20000370 	.word	0x20000370

00019884 <tx_free>:
{
   19884:	b508      	push	{r3, lr}
   19886:	4601      	mov	r1, r0
	tx->cb = NULL;
   19888:	2300      	movs	r3, #0
   1988a:	6043      	str	r3, [r0, #4]
	tx->user_data = NULL;
   1988c:	6083      	str	r3, [r0, #8]
	tx->pending_no_cb = 0U;
   1988e:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   19890:	4801      	ldr	r0, [pc, #4]	; (19898 <tx_free+0x14>)
   19892:	f010 fcb7 	bl	2a204 <k_queue_append>
}
   19896:	bd08      	pop	{r3, pc}
   19898:	20000a48 	.word	0x20000a48

0001989c <conn_tx_alloc>:
{
   1989c:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
   1989e:	f009 ff25 	bl	236ec <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   198a2:	4b08      	ldr	r3, [pc, #32]	; (198c4 <conn_tx_alloc+0x28>)
   198a4:	4283      	cmp	r3, r0
   198a6:	d007      	beq.n	198b8 <conn_tx_alloc+0x1c>
	return z_impl_k_queue_get(queue, timeout);
   198a8:	f04f 32ff 	mov.w	r2, #4294967295
   198ac:	f04f 33ff 	mov.w	r3, #4294967295
   198b0:	4805      	ldr	r0, [pc, #20]	; (198c8 <conn_tx_alloc+0x2c>)
   198b2:	f009 f921 	bl	22af8 <z_impl_k_queue_get>
}
   198b6:	bd08      	pop	{r3, pc}
   198b8:	2200      	movs	r2, #0
   198ba:	2300      	movs	r3, #0
   198bc:	4802      	ldr	r0, [pc, #8]	; (198c8 <conn_tx_alloc+0x2c>)
   198be:	f009 f91b 	bl	22af8 <z_impl_k_queue_get>
		return k_fifo_get(&free_tx, K_NO_WAIT);
   198c2:	e7f8      	b.n	198b6 <conn_tx_alloc+0x1a>
   198c4:	200054f0 	.word	0x200054f0
   198c8:	20000a48 	.word	0x20000a48

000198cc <bt_conn_get_pkts>:
}
   198cc:	4800      	ldr	r0, [pc, #0]	; (198d0 <bt_conn_get_pkts+0x4>)
   198ce:	4770      	bx	lr
   198d0:	20000470 	.word	0x20000470

000198d4 <send_frag>:
{
   198d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   198d8:	b083      	sub	sp, #12
   198da:	af00      	add	r7, sp, #0
   198dc:	4605      	mov	r5, r0
   198de:	460e      	mov	r6, r1
   198e0:	4692      	mov	sl, r2
   198e2:	461c      	mov	r4, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   198e4:	f8d1 8018 	ldr.w	r8, [r1, #24]
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
   198e8:	f7ff fff0 	bl	198cc <bt_conn_get_pkts>
   198ec:	4681      	mov	r9, r0
	return z_impl_k_sem_take(sem, timeout);
   198ee:	f04f 32ff 	mov.w	r2, #4294967295
   198f2:	f04f 33ff 	mov.w	r3, #4294967295
   198f6:	f009 f965 	bl	22bc4 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   198fa:	7aab      	ldrb	r3, [r5, #10]
   198fc:	2b07      	cmp	r3, #7
   198fe:	d17f      	bne.n	19a00 <send_frag+0x12c>
   19900:	f04f 0240 	mov.w	r2, #64	; 0x40
   19904:	f3ef 8311 	mrs	r3, BASEPRI
   19908:	f382 8812 	msr	BASEPRI_MAX, r2
   1990c:	f3bf 8f6f 	isb	sy
	if (tx) {
   19910:	f1b8 0f00 	cmp.w	r8, #0
   19914:	d01a      	beq.n	1994c <send_frag+0x78>
	parent->next = child;
   19916:	2200      	movs	r2, #0
   19918:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
   1991c:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_APPEND(slist, snode)
   1991e:	b182      	cbz	r2, 19942 <send_frag+0x6e>
	parent->next = child;
   19920:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
   19924:	f8c5 8018 	str.w	r8, [r5, #24]
	__asm__ volatile(
   19928:	f383 8811 	msr	BASEPRI, r3
   1992c:	f3bf 8f6f 	isb	sy
		err = send_acl(conn, buf, flags);
   19930:	4652      	mov	r2, sl
   19932:	4631      	mov	r1, r6
   19934:	4628      	mov	r0, r5
   19936:	f00c fecc 	bl	266d2 <send_acl>
	if (err) {
   1993a:	4684      	mov	ip, r0
   1993c:	b998      	cbnz	r0, 19966 <send_frag+0x92>
	return true;
   1993e:	2001      	movs	r0, #1
   19940:	e06c      	b.n	19a1c <send_frag+0x148>
   19942:	f8c5 8018 	str.w	r8, [r5, #24]
	list->head = node;
   19946:	f8c5 8014 	str.w	r8, [r5, #20]
}
   1994a:	e7ed      	b.n	19928 <send_frag+0x54>
	return list->tail;
   1994c:	69aa      	ldr	r2, [r5, #24]
		if (tail_tx) {
   1994e:	b13a      	cbz	r2, 19960 <send_frag+0x8c>
			pending_no_cb = &tail_tx->pending_no_cb;
   19950:	f102 0b0c 	add.w	fp, r2, #12
		(*pending_no_cb)++;
   19954:	f8db 2000 	ldr.w	r2, [fp]
   19958:	3201      	adds	r2, #1
   1995a:	f8cb 2000 	str.w	r2, [fp]
   1995e:	e7e3      	b.n	19928 <send_frag+0x54>
			pending_no_cb = &conn->pending_no_cb;
   19960:	f105 0b1c 	add.w	fp, r5, #28
   19964:	e7f6      	b.n	19954 <send_frag+0x80>
		LOG_ERR("Unable to send to driver (err %d)", err);
   19966:	46ea      	mov	sl, sp
   19968:	b088      	sub	sp, #32
   1996a:	466b      	mov	r3, sp
   1996c:	f113 0210 	adds.w	r2, r3, #16
   19970:	d058      	beq.n	19a24 <send_frag+0x150>
   19972:	210c      	movs	r1, #12
   19974:	b152      	cbz	r2, 1998c <send_frag+0xb8>
   19976:	4608      	mov	r0, r1
   19978:	2904      	cmp	r1, #4
   1997a:	dd03      	ble.n	19984 <send_frag+0xb0>
   1997c:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 19a48 <send_frag+0x174>
   19980:	f8c3 e014 	str.w	lr, [r3, #20]
   19984:	2808      	cmp	r0, #8
   19986:	dd01      	ble.n	1998c <send_frag+0xb8>
   19988:	f8c3 c018 	str.w	ip, [r3, #24]
   1998c:	290b      	cmp	r1, #11
   1998e:	dd4c      	ble.n	19a2a <send_frag+0x156>
   19990:	f04f 0c0c 	mov.w	ip, #12
   19994:	b13a      	cbz	r2, 199a6 <send_frag+0xd2>
   19996:	2103      	movs	r1, #3
   19998:	7139      	strb	r1, [r7, #4]
   1999a:	2100      	movs	r1, #0
   1999c:	7179      	strb	r1, [r7, #5]
   1999e:	71b9      	strb	r1, [r7, #6]
   199a0:	71f9      	strb	r1, [r7, #7]
   199a2:	6878      	ldr	r0, [r7, #4]
   199a4:	6118      	str	r0, [r3, #16]
   199a6:	2100      	movs	r1, #0
   199a8:	f36f 0100 	bfc	r1, #0, #1
   199ac:	f36f 0141 	bfc	r1, #1, #1
   199b0:	f36f 0182 	bfc	r1, #2, #1
   199b4:	f36f 01c5 	bfc	r1, #3, #3
   199b8:	2301      	movs	r3, #1
   199ba:	f363 1188 	bfi	r1, r3, #6, #3
   199be:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   199c2:	f363 2152 	bfi	r1, r3, #9, #10
   199c6:	f36f 41de 	bfc	r1, #19, #12
   199ca:	f36f 71df 	bfc	r1, #31, #1
   199ce:	2300      	movs	r3, #0
   199d0:	481e      	ldr	r0, [pc, #120]	; (19a4c <send_frag+0x178>)
   199d2:	f00b feee 	bl	257b2 <z_impl_z_log_msg_static_create>
   199d6:	46d5      	mov	sp, sl
	__asm__ volatile(
   199d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   199dc:	f3ef 8a11 	mrs	sl, BASEPRI
   199e0:	f383 8812 	msr	BASEPRI_MAX, r3
   199e4:	f3bf 8f6f 	isb	sy
		if (tx) {
   199e8:	f1b8 0f00 	cmp.w	r8, #0
   199ec:	d020      	beq.n	19a30 <send_frag+0x15c>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   199ee:	4641      	mov	r1, r8
   199f0:	f105 0014 	add.w	r0, r5, #20
   199f4:	f00c fdf2 	bl	265dc <sys_slist_find_and_remove>
	__asm__ volatile(
   199f8:	f38a 8811 	msr	BASEPRI, sl
   199fc:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   19a00:	4648      	mov	r0, r9
   19a02:	f009 f8b7 	bl	22b74 <z_impl_k_sem_give>
	if (tx) {
   19a06:	f1b8 0f00 	cmp.w	r8, #0
   19a0a:	d005      	beq.n	19a18 <send_frag+0x144>
		tx_data(buf)->tx = NULL;
   19a0c:	2300      	movs	r3, #0
   19a0e:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
   19a10:	4641      	mov	r1, r8
   19a12:	4628      	mov	r0, r5
   19a14:	f00c fe27 	bl	26666 <conn_tx_destroy>
	if (always_consume) {
   19a18:	b984      	cbnz	r4, 19a3c <send_frag+0x168>
	return false;
   19a1a:	4620      	mov	r0, r4
}
   19a1c:	370c      	adds	r7, #12
   19a1e:	46bd      	mov	sp, r7
   19a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_ERR("Unable to send to driver (err %d)", err);
   19a24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   19a28:	e7a4      	b.n	19974 <send_frag+0xa0>
   19a2a:	f06f 0c1b 	mvn.w	ip, #27
   19a2e:	e7b1      	b.n	19994 <send_frag+0xc0>
			(*pending_no_cb)--;
   19a30:	f8db 3000 	ldr.w	r3, [fp]
   19a34:	3b01      	subs	r3, #1
   19a36:	f8cb 3000 	str.w	r3, [fp]
   19a3a:	e7dd      	b.n	199f8 <send_frag+0x124>
		net_buf_unref(buf);
   19a3c:	4630      	mov	r0, r6
   19a3e:	f00e fc65 	bl	2830c <net_buf_unref>
	return false;
   19a42:	2000      	movs	r0, #0
   19a44:	e7ea      	b.n	19a1c <send_frag+0x148>
   19a46:	bf00      	nop
   19a48:	0002c520 	.word	0x0002c520
   19a4c:	0002b16c 	.word	0x0002b16c

00019a50 <bt_conn_new>:
{
   19a50:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   19a52:	2300      	movs	r3, #0
   19a54:	428b      	cmp	r3, r1
   19a56:	d229      	bcs.n	19aac <bt_conn_new+0x5c>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   19a58:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   19a5c:	eb00 1484 	add.w	r4, r0, r4, lsl #6
   19a60:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   19a64:	f04f 0c01 	mov.w	ip, #1
   19a68:	f3bf 8f5b 	dmb	ish
   19a6c:	e852 ef00 	ldrex	lr, [r2]
   19a70:	f1be 0f00 	cmp.w	lr, #0
   19a74:	d103      	bne.n	19a7e <bt_conn_new+0x2e>
   19a76:	e842 c500 	strex	r5, ip, [r2]
   19a7a:	2d00      	cmp	r5, #0
   19a7c:	d1f6      	bne.n	19a6c <bt_conn_new+0x1c>
   19a7e:	f3bf 8f5b 	dmb	ish
   19a82:	d111      	bne.n	19aa8 <bt_conn_new+0x58>
	if (!conn) {
   19a84:	b174      	cbz	r4, 19aa4 <bt_conn_new+0x54>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   19a86:	22b8      	movs	r2, #184	; 0xb8
   19a88:	2100      	movs	r1, #0
   19a8a:	4620      	mov	r0, r4
   19a8c:	f00c fafa 	bl	26084 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   19a90:	4907      	ldr	r1, [pc, #28]	; (19ab0 <bt_conn_new+0x60>)
   19a92:	f104 0058 	add.w	r0, r4, #88	; 0x58
   19a96:	f010 fcdf 	bl	2a458 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   19a9a:	4906      	ldr	r1, [pc, #24]	; (19ab4 <bt_conn_new+0x64>)
   19a9c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   19aa0:	f010 fcae 	bl	2a400 <k_work_init>
}
   19aa4:	4620      	mov	r0, r4
   19aa6:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < size; i++) {
   19aa8:	4463      	add	r3, ip
   19aaa:	e7d3      	b.n	19a54 <bt_conn_new+0x4>
	struct bt_conn *conn = NULL;
   19aac:	2400      	movs	r4, #0
   19aae:	e7e9      	b.n	19a84 <bt_conn_new+0x34>
   19ab0:	0001a6a1 	.word	0x0001a6a1
   19ab4:	0002665d 	.word	0x0002665d

00019ab8 <acl_conn_new>:
{
   19ab8:	b508      	push	{r3, lr}
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   19aba:	2108      	movs	r1, #8
   19abc:	4801      	ldr	r0, [pc, #4]	; (19ac4 <acl_conn_new+0xc>)
   19abe:	f7ff ffc7 	bl	19a50 <bt_conn_new>
}
   19ac2:	bd08      	pop	{r3, pc}
   19ac4:	200020e0 	.word	0x200020e0

00019ac8 <bt_acl_recv>:
{
   19ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
   19aca:	b095      	sub	sp, #84	; 0x54
   19acc:	af00      	add	r7, sp, #0
   19ace:	4604      	mov	r4, r0
   19ad0:	460d      	mov	r5, r1
	switch (flags) {
   19ad2:	2a01      	cmp	r2, #1
   19ad4:	d05a      	beq.n	19b8c <bt_acl_recv+0xc4>
   19ad6:	4613      	mov	r3, r2
   19ad8:	2a02      	cmp	r2, #2
   19ada:	f040 80c4 	bne.w	19c66 <bt_acl_recv+0x19e>
		if (conn->rx) {
   19ade:	6903      	ldr	r3, [r0, #16]
   19ae0:	b323      	cbz	r3, 19b2c <bt_acl_recv+0x64>
			LOG_ERR("Unexpected first L2CAP frame");
   19ae2:	4ba0      	ldr	r3, [pc, #640]	; (19d64 <bt_acl_recv+0x29c>)
   19ae4:	61fb      	str	r3, [r7, #28]
   19ae6:	2302      	movs	r3, #2
   19ae8:	713b      	strb	r3, [r7, #4]
   19aea:	2300      	movs	r3, #0
   19aec:	717b      	strb	r3, [r7, #5]
   19aee:	71bb      	strb	r3, [r7, #6]
   19af0:	71fb      	strb	r3, [r7, #7]
   19af2:	687a      	ldr	r2, [r7, #4]
   19af4:	61ba      	str	r2, [r7, #24]
   19af6:	4619      	mov	r1, r3
   19af8:	f363 0100 	bfi	r1, r3, #0, #1
   19afc:	f363 0141 	bfi	r1, r3, #1, #1
   19b00:	f363 0182 	bfi	r1, r3, #2, #1
   19b04:	f363 01c5 	bfi	r1, r3, #3, #3
   19b08:	2201      	movs	r2, #1
   19b0a:	f362 1188 	bfi	r1, r2, #6, #3
   19b0e:	2208      	movs	r2, #8
   19b10:	f362 2152 	bfi	r1, r2, #9, #10
   19b14:	f363 41de 	bfi	r1, r3, #19, #12
   19b18:	f363 71df 	bfi	r1, r3, #31, #1
   19b1c:	f107 0218 	add.w	r2, r7, #24
   19b20:	4891      	ldr	r0, [pc, #580]	; (19d68 <bt_acl_recv+0x2a0>)
   19b22:	f00b fe46 	bl	257b2 <z_impl_z_log_msg_static_create>
			bt_conn_reset_rx_state(conn);
   19b26:	4620      	mov	r0, r4
   19b28:	f00c fe36 	bl	26798 <bt_conn_reset_rx_state>
		conn->rx = buf;
   19b2c:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   19b2e:	6921      	ldr	r1, [r4, #16]
   19b30:	8a08      	ldrh	r0, [r1, #16]
   19b32:	2801      	cmp	r0, #1
   19b34:	f240 80db 	bls.w	19cee <bt_acl_recv+0x226>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   19b38:	68cb      	ldr	r3, [r1, #12]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
   19b3a:	785a      	ldrb	r2, [r3, #1]
   19b3c:	781b      	ldrb	r3, [r3, #0]
   19b3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   19b42:	3304      	adds	r3, #4
   19b44:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   19b46:	4283      	cmp	r3, r0
   19b48:	f200 80d1 	bhi.w	19cee <bt_acl_recv+0x226>
	if (conn->rx->len > acl_total_len) {
   19b4c:	f080 8103 	bcs.w	19d56 <bt_acl_recv+0x28e>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   19b50:	466d      	mov	r5, sp
   19b52:	b088      	sub	sp, #32
   19b54:	4669      	mov	r1, sp
   19b56:	f111 0210 	adds.w	r2, r1, #16
   19b5a:	f000 80ce 	beq.w	19cfa <bt_acl_recv+0x232>
   19b5e:	2610      	movs	r6, #16
   19b60:	b17a      	cbz	r2, 19b82 <bt_acl_recv+0xba>
   19b62:	46b4      	mov	ip, r6
   19b64:	2e04      	cmp	r6, #4
   19b66:	dd03      	ble.n	19b70 <bt_acl_recv+0xa8>
   19b68:	f8df e200 	ldr.w	lr, [pc, #512]	; 19d6c <bt_acl_recv+0x2a4>
   19b6c:	f8c1 e014 	str.w	lr, [r1, #20]
   19b70:	f1bc 0f08 	cmp.w	ip, #8
   19b74:	dd00      	ble.n	19b78 <bt_acl_recv+0xb0>
   19b76:	6188      	str	r0, [r1, #24]
   19b78:	f1bc 0f0c 	cmp.w	ip, #12
   19b7c:	f340 80c0 	ble.w	19d00 <bt_acl_recv+0x238>
   19b80:	61cb      	str	r3, [r1, #28]
   19b82:	2e0f      	cmp	r6, #15
   19b84:	f340 80e4 	ble.w	19d50 <bt_acl_recv+0x288>
   19b88:	2310      	movs	r3, #16
   19b8a:	e0bb      	b.n	19d04 <bt_acl_recv+0x23c>
		if (!conn->rx) {
   19b8c:	6900      	ldr	r0, [r0, #16]
   19b8e:	b180      	cbz	r0, 19bb2 <bt_acl_recv+0xea>
		if (!buf->len) {
   19b90:	8a0e      	ldrh	r6, [r1, #16]
   19b92:	b3be      	cbz	r6, 19c04 <bt_acl_recv+0x13c>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   19b94:	300c      	adds	r0, #12
   19b96:	f00e fc3d 	bl	28414 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   19b9a:	42b0      	cmp	r0, r6
   19b9c:	d336      	bcc.n	19c0c <bt_acl_recv+0x144>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
   19b9e:	6920      	ldr	r0, [r4, #16]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   19ba0:	8a2a      	ldrh	r2, [r5, #16]
   19ba2:	68e9      	ldr	r1, [r5, #12]
   19ba4:	300c      	adds	r0, #12
   19ba6:	f00e fbfe 	bl	283a6 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   19baa:	4628      	mov	r0, r5
   19bac:	f00e fbae 	bl	2830c <net_buf_unref>
		break;
   19bb0:	e7bd      	b.n	19b2e <bt_acl_recv+0x66>
			LOG_ERR("Unexpected L2CAP continuation");
   19bb2:	4b6f      	ldr	r3, [pc, #444]	; (19d70 <bt_acl_recv+0x2a8>)
   19bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   19bb6:	2302      	movs	r3, #2
   19bb8:	713b      	strb	r3, [r7, #4]
   19bba:	2300      	movs	r3, #0
   19bbc:	717b      	strb	r3, [r7, #5]
   19bbe:	71bb      	strb	r3, [r7, #6]
   19bc0:	71fb      	strb	r3, [r7, #7]
   19bc2:	687a      	ldr	r2, [r7, #4]
   19bc4:	64ba      	str	r2, [r7, #72]	; 0x48
   19bc6:	4619      	mov	r1, r3
   19bc8:	f363 0100 	bfi	r1, r3, #0, #1
   19bcc:	f363 0141 	bfi	r1, r3, #1, #1
   19bd0:	f363 0182 	bfi	r1, r3, #2, #1
   19bd4:	f363 01c5 	bfi	r1, r3, #3, #3
   19bd8:	2201      	movs	r2, #1
   19bda:	f362 1188 	bfi	r1, r2, #6, #3
   19bde:	2208      	movs	r2, #8
   19be0:	f362 2152 	bfi	r1, r2, #9, #10
   19be4:	f363 41de 	bfi	r1, r3, #19, #12
   19be8:	f363 71df 	bfi	r1, r3, #31, #1
   19bec:	f107 0248 	add.w	r2, r7, #72	; 0x48
   19bf0:	485d      	ldr	r0, [pc, #372]	; (19d68 <bt_acl_recv+0x2a0>)
   19bf2:	f00b fdde 	bl	257b2 <z_impl_z_log_msg_static_create>
			bt_conn_reset_rx_state(conn);
   19bf6:	4620      	mov	r0, r4
   19bf8:	f00c fdce 	bl	26798 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
   19bfc:	4628      	mov	r0, r5
   19bfe:	f00e fb85 	bl	2830c <net_buf_unref>
			return;
   19c02:	e074      	b.n	19cee <bt_acl_recv+0x226>
			net_buf_unref(buf);
   19c04:	4608      	mov	r0, r1
   19c06:	f00e fb81 	bl	2830c <net_buf_unref>
			return;
   19c0a:	e070      	b.n	19cee <bt_acl_recv+0x226>
			LOG_ERR("Not enough buffer space for L2CAP data");
   19c0c:	4b59      	ldr	r3, [pc, #356]	; (19d74 <bt_acl_recv+0x2ac>)
   19c0e:	637b      	str	r3, [r7, #52]	; 0x34
   19c10:	2302      	movs	r3, #2
   19c12:	713b      	strb	r3, [r7, #4]
   19c14:	2600      	movs	r6, #0
   19c16:	717e      	strb	r6, [r7, #5]
   19c18:	71be      	strb	r6, [r7, #6]
   19c1a:	71fe      	strb	r6, [r7, #7]
   19c1c:	687b      	ldr	r3, [r7, #4]
   19c1e:	633b      	str	r3, [r7, #48]	; 0x30
   19c20:	4631      	mov	r1, r6
   19c22:	f366 0100 	bfi	r1, r6, #0, #1
   19c26:	f366 0141 	bfi	r1, r6, #1, #1
   19c2a:	f366 0182 	bfi	r1, r6, #2, #1
   19c2e:	f366 01c5 	bfi	r1, r6, #3, #3
   19c32:	2301      	movs	r3, #1
   19c34:	f363 1188 	bfi	r1, r3, #6, #3
   19c38:	2308      	movs	r3, #8
   19c3a:	f363 2152 	bfi	r1, r3, #9, #10
   19c3e:	f366 41de 	bfi	r1, r6, #19, #12
   19c42:	f366 71df 	bfi	r1, r6, #31, #1
   19c46:	4633      	mov	r3, r6
   19c48:	f107 0230 	add.w	r2, r7, #48	; 0x30
   19c4c:	4846      	ldr	r0, [pc, #280]	; (19d68 <bt_acl_recv+0x2a0>)
   19c4e:	f00b fdb0 	bl	257b2 <z_impl_z_log_msg_static_create>
			bt_l2cap_recv(conn, conn->rx, false);
   19c52:	4632      	mov	r2, r6
   19c54:	6921      	ldr	r1, [r4, #16]
   19c56:	4620      	mov	r0, r4
   19c58:	f001 f9ba 	bl	1afd0 <bt_l2cap_recv>
			conn->rx = NULL;
   19c5c:	6126      	str	r6, [r4, #16]
			net_buf_unref(buf);
   19c5e:	4628      	mov	r0, r5
   19c60:	f00e fb54 	bl	2830c <net_buf_unref>
			return;
   19c64:	e043      	b.n	19cee <bt_acl_recv+0x226>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   19c66:	466e      	mov	r6, sp
   19c68:	b088      	sub	sp, #32
   19c6a:	4669      	mov	r1, sp
   19c6c:	f111 0210 	adds.w	r2, r1, #16
   19c70:	d010      	beq.n	19c94 <bt_acl_recv+0x1cc>
   19c72:	200c      	movs	r0, #12
   19c74:	b152      	cbz	r2, 19c8c <bt_acl_recv+0x1c4>
   19c76:	4684      	mov	ip, r0
   19c78:	2804      	cmp	r0, #4
   19c7a:	dd03      	ble.n	19c84 <bt_acl_recv+0x1bc>
   19c7c:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 19d78 <bt_acl_recv+0x2b0>
   19c80:	f8c1 e014 	str.w	lr, [r1, #20]
   19c84:	f1bc 0f08 	cmp.w	ip, #8
   19c88:	dd07      	ble.n	19c9a <bt_acl_recv+0x1d2>
   19c8a:	618b      	str	r3, [r1, #24]
   19c8c:	280b      	cmp	r0, #11
   19c8e:	dd31      	ble.n	19cf4 <bt_acl_recv+0x22c>
   19c90:	230c      	movs	r3, #12
   19c92:	e004      	b.n	19c9e <bt_acl_recv+0x1d6>
   19c94:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   19c98:	e7ec      	b.n	19c74 <bt_acl_recv+0x1ac>
   19c9a:	f06f 031b 	mvn.w	r3, #27
   19c9e:	b13a      	cbz	r2, 19cb0 <bt_acl_recv+0x1e8>
   19ca0:	2003      	movs	r0, #3
   19ca2:	7138      	strb	r0, [r7, #4]
   19ca4:	2000      	movs	r0, #0
   19ca6:	7178      	strb	r0, [r7, #5]
   19ca8:	71b8      	strb	r0, [r7, #6]
   19caa:	71f8      	strb	r0, [r7, #7]
   19cac:	6878      	ldr	r0, [r7, #4]
   19cae:	6108      	str	r0, [r1, #16]
   19cb0:	2100      	movs	r1, #0
   19cb2:	f36f 0100 	bfc	r1, #0, #1
   19cb6:	f36f 0141 	bfc	r1, #1, #1
   19cba:	f36f 0182 	bfc	r1, #2, #1
   19cbe:	f36f 01c5 	bfc	r1, #3, #3
   19cc2:	2001      	movs	r0, #1
   19cc4:	f360 1188 	bfi	r1, r0, #6, #3
   19cc8:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   19ccc:	f363 2152 	bfi	r1, r3, #9, #10
   19cd0:	f36f 41de 	bfc	r1, #19, #12
   19cd4:	f36f 71df 	bfc	r1, #31, #1
   19cd8:	2300      	movs	r3, #0
   19cda:	4823      	ldr	r0, [pc, #140]	; (19d68 <bt_acl_recv+0x2a0>)
   19cdc:	f00b fd69 	bl	257b2 <z_impl_z_log_msg_static_create>
   19ce0:	46b5      	mov	sp, r6
		bt_conn_reset_rx_state(conn);
   19ce2:	4620      	mov	r0, r4
   19ce4:	f00c fd58 	bl	26798 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   19ce8:	4628      	mov	r0, r5
   19cea:	f00e fb0f 	bl	2830c <net_buf_unref>
}
   19cee:	3754      	adds	r7, #84	; 0x54
   19cf0:	46bd      	mov	sp, r7
   19cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   19cf4:	f06f 031b 	mvn.w	r3, #27
   19cf8:	e7d1      	b.n	19c9e <bt_acl_recv+0x1d6>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   19cfa:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   19cfe:	e72f      	b.n	19b60 <bt_acl_recv+0x98>
   19d00:	f06f 031b 	mvn.w	r3, #27
   19d04:	b13a      	cbz	r2, 19d16 <bt_acl_recv+0x24e>
   19d06:	2004      	movs	r0, #4
   19d08:	7138      	strb	r0, [r7, #4]
   19d0a:	2000      	movs	r0, #0
   19d0c:	7178      	strb	r0, [r7, #5]
   19d0e:	71b8      	strb	r0, [r7, #6]
   19d10:	71f8      	strb	r0, [r7, #7]
   19d12:	6878      	ldr	r0, [r7, #4]
   19d14:	6108      	str	r0, [r1, #16]
   19d16:	2100      	movs	r1, #0
   19d18:	f36f 0100 	bfc	r1, #0, #1
   19d1c:	f36f 0141 	bfc	r1, #1, #1
   19d20:	f36f 0182 	bfc	r1, #2, #1
   19d24:	f36f 01c5 	bfc	r1, #3, #3
   19d28:	2001      	movs	r0, #1
   19d2a:	f360 1188 	bfi	r1, r0, #6, #3
   19d2e:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
   19d32:	f363 2152 	bfi	r1, r3, #9, #10
   19d36:	f36f 41de 	bfc	r1, #19, #12
   19d3a:	f36f 71df 	bfc	r1, #31, #1
   19d3e:	2300      	movs	r3, #0
   19d40:	4809      	ldr	r0, [pc, #36]	; (19d68 <bt_acl_recv+0x2a0>)
   19d42:	f00b fd36 	bl	257b2 <z_impl_z_log_msg_static_create>
   19d46:	46ad      	mov	sp, r5
		bt_conn_reset_rx_state(conn);
   19d48:	4620      	mov	r0, r4
   19d4a:	f00c fd25 	bl	26798 <bt_conn_reset_rx_state>
		return;
   19d4e:	e7ce      	b.n	19cee <bt_acl_recv+0x226>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   19d50:	f06f 031b 	mvn.w	r3, #27
   19d54:	e7d6      	b.n	19d04 <bt_acl_recv+0x23c>
	conn->rx = NULL;
   19d56:	2300      	movs	r3, #0
   19d58:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   19d5a:	2201      	movs	r2, #1
   19d5c:	4620      	mov	r0, r4
   19d5e:	f001 f937 	bl	1afd0 <bt_l2cap_recv>
   19d62:	e7c4      	b.n	19cee <bt_acl_recv+0x226>
   19d64:	0002c8d8 	.word	0x0002c8d8
   19d68:	0002b16c 	.word	0x0002b16c
   19d6c:	0002c960 	.word	0x0002c960
   19d70:	0002c8f8 	.word	0x0002c8f8
   19d74:	0002c918 	.word	0x0002c918
   19d78:	0002c940 	.word	0x0002c940

00019d7c <bt_conn_send_cb>:
{
   19d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19d80:	b094      	sub	sp, #80	; 0x50
   19d82:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   19d84:	7a83      	ldrb	r3, [r0, #10]
   19d86:	2b07      	cmp	r3, #7
   19d88:	d11b      	bne.n	19dc2 <bt_conn_send_cb+0x46>
   19d8a:	4604      	mov	r4, r0
   19d8c:	460d      	mov	r5, r1
   19d8e:	4616      	mov	r6, r2
	if (cb) {
   19d90:	2a00      	cmp	r2, #0
   19d92:	f000 8090 	beq.w	19eb6 <bt_conn_send_cb+0x13a>
		tx = conn_tx_alloc();
   19d96:	f7ff fd81 	bl	1989c <conn_tx_alloc>
		if (!tx) {
   19d9a:	4680      	mov	r8, r0
   19d9c:	2800      	cmp	r0, #0
   19d9e:	d038      	beq.n	19e12 <bt_conn_send_cb+0x96>
		if (conn->state != BT_CONN_CONNECTED) {
   19da0:	7aa3      	ldrb	r3, [r4, #10]
   19da2:	2b07      	cmp	r3, #7
   19da4:	d15d      	bne.n	19e62 <bt_conn_send_cb+0xe6>
		tx->cb = cb;
   19da6:	6046      	str	r6, [r0, #4]
		tx->user_data = user_data;
   19da8:	6087      	str	r7, [r0, #8]
		tx->pending_no_cb = 0U;
   19daa:	2300      	movs	r3, #0
   19dac:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   19dae:	61a8      	str	r0, [r5, #24]
	net_buf_put(&conn->tx_queue, buf);
   19db0:	4629      	mov	r1, r5
   19db2:	f104 0038 	add.w	r0, r4, #56	; 0x38
   19db6:	f00e faa5 	bl	28304 <net_buf_put>
	return 0;
   19dba:	2000      	movs	r0, #0
}
   19dbc:	b014      	add	sp, #80	; 0x50
   19dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("not connected!");
   19dc2:	4b3e      	ldr	r3, [pc, #248]	; (19ebc <bt_conn_send_cb+0x140>)
   19dc4:	9313      	str	r3, [sp, #76]	; 0x4c
   19dc6:	2302      	movs	r3, #2
   19dc8:	f88d 3004 	strb.w	r3, [sp, #4]
   19dcc:	2300      	movs	r3, #0
   19dce:	f88d 3005 	strb.w	r3, [sp, #5]
   19dd2:	f88d 3006 	strb.w	r3, [sp, #6]
   19dd6:	f88d 3007 	strb.w	r3, [sp, #7]
   19dda:	9a01      	ldr	r2, [sp, #4]
   19ddc:	9212      	str	r2, [sp, #72]	; 0x48
   19dde:	4619      	mov	r1, r3
   19de0:	f363 0100 	bfi	r1, r3, #0, #1
   19de4:	f363 0141 	bfi	r1, r3, #1, #1
   19de8:	f363 0182 	bfi	r1, r3, #2, #1
   19dec:	f363 01c5 	bfi	r1, r3, #3, #3
   19df0:	2201      	movs	r2, #1
   19df2:	f362 1188 	bfi	r1, r2, #6, #3
   19df6:	2208      	movs	r2, #8
   19df8:	f362 2152 	bfi	r1, r2, #9, #10
   19dfc:	f363 41de 	bfi	r1, r3, #19, #12
   19e00:	f363 71df 	bfi	r1, r3, #31, #1
   19e04:	aa12      	add	r2, sp, #72	; 0x48
   19e06:	482e      	ldr	r0, [pc, #184]	; (19ec0 <bt_conn_send_cb+0x144>)
   19e08:	f00b fcd3 	bl	257b2 <z_impl_z_log_msg_static_create>
		return -ENOTCONN;
   19e0c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   19e10:	e7d4      	b.n	19dbc <bt_conn_send_cb+0x40>
			LOG_ERR("Unable to allocate TX context");
   19e12:	4b2c      	ldr	r3, [pc, #176]	; (19ec4 <bt_conn_send_cb+0x148>)
   19e14:	930d      	str	r3, [sp, #52]	; 0x34
   19e16:	2302      	movs	r3, #2
   19e18:	f88d 3004 	strb.w	r3, [sp, #4]
   19e1c:	2300      	movs	r3, #0
   19e1e:	f88d 3005 	strb.w	r3, [sp, #5]
   19e22:	f88d 3006 	strb.w	r3, [sp, #6]
   19e26:	f88d 3007 	strb.w	r3, [sp, #7]
   19e2a:	9a01      	ldr	r2, [sp, #4]
   19e2c:	920c      	str	r2, [sp, #48]	; 0x30
   19e2e:	4619      	mov	r1, r3
   19e30:	f363 0100 	bfi	r1, r3, #0, #1
   19e34:	f363 0141 	bfi	r1, r3, #1, #1
   19e38:	f363 0182 	bfi	r1, r3, #2, #1
   19e3c:	f363 01c5 	bfi	r1, r3, #3, #3
   19e40:	2201      	movs	r2, #1
   19e42:	f362 1188 	bfi	r1, r2, #6, #3
   19e46:	2208      	movs	r2, #8
   19e48:	f362 2152 	bfi	r1, r2, #9, #10
   19e4c:	f363 41de 	bfi	r1, r3, #19, #12
   19e50:	f363 71df 	bfi	r1, r3, #31, #1
   19e54:	aa0c      	add	r2, sp, #48	; 0x30
   19e56:	481a      	ldr	r0, [pc, #104]	; (19ec0 <bt_conn_send_cb+0x144>)
   19e58:	f00b fcab 	bl	257b2 <z_impl_z_log_msg_static_create>
			return -ENOBUFS;
   19e5c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   19e60:	e7ac      	b.n	19dbc <bt_conn_send_cb+0x40>
			LOG_WRN("Disconnected while allocating context");
   19e62:	4b19      	ldr	r3, [pc, #100]	; (19ec8 <bt_conn_send_cb+0x14c>)
   19e64:	9307      	str	r3, [sp, #28]
   19e66:	2202      	movs	r2, #2
   19e68:	f88d 2004 	strb.w	r2, [sp, #4]
   19e6c:	2300      	movs	r3, #0
   19e6e:	f88d 3005 	strb.w	r3, [sp, #5]
   19e72:	f88d 3006 	strb.w	r3, [sp, #6]
   19e76:	f88d 3007 	strb.w	r3, [sp, #7]
   19e7a:	9901      	ldr	r1, [sp, #4]
   19e7c:	9106      	str	r1, [sp, #24]
   19e7e:	4619      	mov	r1, r3
   19e80:	f363 0100 	bfi	r1, r3, #0, #1
   19e84:	f363 0141 	bfi	r1, r3, #1, #1
   19e88:	f363 0182 	bfi	r1, r3, #2, #1
   19e8c:	f363 01c5 	bfi	r1, r3, #3, #3
   19e90:	f362 1188 	bfi	r1, r2, #6, #3
   19e94:	2208      	movs	r2, #8
   19e96:	f362 2152 	bfi	r1, r2, #9, #10
   19e9a:	f363 41de 	bfi	r1, r3, #19, #12
   19e9e:	f363 71df 	bfi	r1, r3, #31, #1
   19ea2:	aa06      	add	r2, sp, #24
   19ea4:	4806      	ldr	r0, [pc, #24]	; (19ec0 <bt_conn_send_cb+0x144>)
   19ea6:	f00b fc84 	bl	257b2 <z_impl_z_log_msg_static_create>
			tx_free(tx);
   19eaa:	4640      	mov	r0, r8
   19eac:	f7ff fcea 	bl	19884 <tx_free>
			return -ENOTCONN;
   19eb0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   19eb4:	e782      	b.n	19dbc <bt_conn_send_cb+0x40>
		tx_data(buf)->tx = NULL;
   19eb6:	2300      	movs	r3, #0
   19eb8:	618b      	str	r3, [r1, #24]
   19eba:	e779      	b.n	19db0 <bt_conn_send_cb+0x34>
   19ebc:	0002c97c 	.word	0x0002c97c
   19ec0:	0002b16c 	.word	0x0002b16c
   19ec4:	0002c98c 	.word	0x0002c98c
   19ec8:	0002c9ac 	.word	0x0002c9ac

00019ecc <bt_conn_prepare_events>:
{
   19ecc:	b570      	push	{r4, r5, r6, lr}
   19ece:	4606      	mov	r6, r0
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
   19ed0:	4c10      	ldr	r4, [pc, #64]	; (19f14 <bt_conn_prepare_events+0x48>)
   19ed2:	4620      	mov	r0, r4
   19ed4:	f010 ff66 	bl	2ada4 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   19ed8:	4623      	mov	r3, r4
   19eda:	2200      	movs	r2, #0
   19edc:	2101      	movs	r1, #1
   19ede:	4630      	mov	r0, r6
   19ee0:	f010 ff39 	bl	2ad56 <k_poll_event_init>
   19ee4:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   19ee6:	2400      	movs	r4, #0
   19ee8:	e000      	b.n	19eec <bt_conn_prepare_events+0x20>
   19eea:	3401      	adds	r4, #1
   19eec:	2c07      	cmp	r4, #7
   19eee:	d80e      	bhi.n	19f0e <bt_conn_prepare_events+0x42>
		conn = &acl_conns[i];
   19ef0:	eb04 0044 	add.w	r0, r4, r4, lsl #1
		if (!conn_prepare_events(conn, &events[ev_count])) {
   19ef4:	eb05 0185 	add.w	r1, r5, r5, lsl #2
   19ef8:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   19efc:	4b06      	ldr	r3, [pc, #24]	; (19f18 <bt_conn_prepare_events+0x4c>)
   19efe:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   19f02:	f00c fc73 	bl	267ec <conn_prepare_events>
   19f06:	2800      	cmp	r0, #0
   19f08:	d1ef      	bne.n	19eea <bt_conn_prepare_events+0x1e>
			ev_count++;
   19f0a:	3501      	adds	r5, #1
   19f0c:	e7ed      	b.n	19eea <bt_conn_prepare_events+0x1e>
}
   19f0e:	4628      	mov	r0, r5
   19f10:	bd70      	pop	{r4, r5, r6, pc}
   19f12:	bf00      	nop
   19f14:	20000738 	.word	0x20000738
   19f18:	200020e0 	.word	0x200020e0

00019f1c <bt_conn_lookup_handle>:
{
   19f1c:	b508      	push	{r3, lr}
   19f1e:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   19f20:	2108      	movs	r1, #8
   19f22:	4802      	ldr	r0, [pc, #8]	; (19f2c <bt_conn_lookup_handle+0x10>)
   19f24:	f00c fcce 	bl	268c4 <conn_lookup_handle>
}
   19f28:	bd08      	pop	{r3, pc}
   19f2a:	bf00      	nop
   19f2c:	200020e0 	.word	0x200020e0

00019f30 <bt_conn_set_state>:
{
   19f30:	b5f0      	push	{r4, r5, r6, r7, lr}
   19f32:	b083      	sub	sp, #12
   19f34:	af00      	add	r7, sp, #0
   19f36:	460d      	mov	r5, r1
	if (conn->state == state) {
   19f38:	7a86      	ldrb	r6, [r0, #10]
   19f3a:	428e      	cmp	r6, r1
   19f3c:	d014      	beq.n	19f68 <bt_conn_set_state+0x38>
   19f3e:	4604      	mov	r4, r0
	conn->state = state;
   19f40:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   19f42:	2e00      	cmp	r6, #0
   19f44:	d068      	beq.n	1a018 <bt_conn_set_state+0xe8>
   19f46:	2e06      	cmp	r6, #6
   19f48:	d06c      	beq.n	1a024 <bt_conn_set_state+0xf4>
	switch (conn->state) {
   19f4a:	7aa3      	ldrb	r3, [r4, #10]
   19f4c:	2b08      	cmp	r3, #8
   19f4e:	f200 814e 	bhi.w	1a1ee <bt_conn_set_state+0x2be>
   19f52:	e8df f013 	tbh	[pc, r3, lsl #1]
   19f56:	007d      	.short	0x007d
   19f58:	005b0148 	.word	0x005b0148
   19f5c:	005b005b 	.word	0x005b005b
   19f60:	0121005b 	.word	0x0121005b
   19f64:	005b006e 	.word	0x005b006e
		LOG_WRN("no transition %s", state2str(state));
   19f68:	4608      	mov	r0, r1
   19f6a:	f7ff fbf9 	bl	19760 <state2str>
   19f6e:	466d      	mov	r5, sp
   19f70:	2300      	movs	r3, #0
   19f72:	713b      	strb	r3, [r7, #4]
   19f74:	2302      	movs	r3, #2
   19f76:	717b      	strb	r3, [r7, #5]
   19f78:	b088      	sub	sp, #32
   19f7a:	466c      	mov	r4, sp
   19f7c:	f114 0210 	adds.w	r2, r4, #16
   19f80:	d011      	beq.n	19fa6 <bt_conn_set_state+0x76>
   19f82:	260e      	movs	r6, #14
   19f84:	b11a      	cbz	r2, 19f8e <bt_conn_set_state+0x5e>
   19f86:	2e04      	cmp	r6, #4
   19f88:	dd01      	ble.n	19f8e <bt_conn_set_state+0x5e>
   19f8a:	4bb7      	ldr	r3, [pc, #732]	; (1a268 <bt_conn_set_state+0x338>)
   19f8c:	6163      	str	r3, [r4, #20]
   19f8e:	2300      	movs	r3, #0
   19f90:	703b      	strb	r3, [r7, #0]
   19f92:	2302      	movs	r3, #2
   19f94:	707b      	strb	r3, [r7, #1]
   19f96:	b19a      	cbz	r2, 19fc0 <bt_conn_set_state+0x90>
   19f98:	2e08      	cmp	r6, #8
   19f9a:	dd00      	ble.n	19f9e <bt_conn_set_state+0x6e>
   19f9c:	61a0      	str	r0, [r4, #24]
   19f9e:	f104 031c 	add.w	r3, r4, #28
   19fa2:	2100      	movs	r1, #0
   19fa4:	e00a      	b.n	19fbc <bt_conn_set_state+0x8c>
   19fa6:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   19faa:	e7eb      	b.n	19f84 <bt_conn_set_state+0x54>
   19fac:	f101 0008 	add.w	r0, r1, #8
   19fb0:	4438      	add	r0, r7
   19fb2:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   19fb6:	f803 0b01 	strb.w	r0, [r3], #1
   19fba:	3101      	adds	r1, #1
   19fbc:	2901      	cmp	r1, #1
   19fbe:	d9f5      	bls.n	19fac <bt_conn_set_state+0x7c>
   19fc0:	2e0d      	cmp	r6, #13
   19fc2:	dd26      	ble.n	1a012 <bt_conn_set_state+0xe2>
   19fc4:	230e      	movs	r3, #14
   19fc6:	b142      	cbz	r2, 19fda <bt_conn_set_state+0xaa>
   19fc8:	2103      	movs	r1, #3
   19fca:	7139      	strb	r1, [r7, #4]
   19fcc:	2100      	movs	r1, #0
   19fce:	7179      	strb	r1, [r7, #5]
   19fd0:	71b9      	strb	r1, [r7, #6]
   19fd2:	2101      	movs	r1, #1
   19fd4:	71f9      	strb	r1, [r7, #7]
   19fd6:	6878      	ldr	r0, [r7, #4]
   19fd8:	6120      	str	r0, [r4, #16]
   19fda:	2100      	movs	r1, #0
   19fdc:	f36f 0100 	bfc	r1, #0, #1
   19fe0:	f36f 0141 	bfc	r1, #1, #1
   19fe4:	f36f 0182 	bfc	r1, #2, #1
   19fe8:	f36f 01c5 	bfc	r1, #3, #3
   19fec:	2002      	movs	r0, #2
   19fee:	f360 1188 	bfi	r1, r0, #6, #3
   19ff2:	f3c3 0309 	ubfx	r3, r3, #0, #10
   19ff6:	f363 2152 	bfi	r1, r3, #9, #10
   19ffa:	f36f 41de 	bfc	r1, #19, #12
   19ffe:	f36f 71df 	bfc	r1, #31, #1
   1a002:	2300      	movs	r3, #0
   1a004:	4899      	ldr	r0, [pc, #612]	; (1a26c <bt_conn_set_state+0x33c>)
   1a006:	f00b fbd4 	bl	257b2 <z_impl_z_log_msg_static_create>
   1a00a:	46ad      	mov	sp, r5
}
   1a00c:	370c      	adds	r7, #12
   1a00e:	46bd      	mov	sp, r7
   1a010:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_WRN("no transition %s", state2str(state));
   1a012:	f06f 031b 	mvn.w	r3, #27
   1a016:	e7d6      	b.n	19fc6 <bt_conn_set_state+0x96>
		if (conn->type != BT_CONN_TYPE_ISO) {
   1a018:	7883      	ldrb	r3, [r0, #2]
   1a01a:	2b08      	cmp	r3, #8
   1a01c:	d095      	beq.n	19f4a <bt_conn_set_state+0x1a>
			bt_conn_ref(conn);
   1a01e:	f00c fc1d 	bl	2685c <bt_conn_ref>
   1a022:	e792      	b.n	19f4a <bt_conn_set_state+0x1a>
		    conn->type == BT_CONN_TYPE_LE) {
   1a024:	7883      	ldrb	r3, [r0, #2]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1a026:	2b01      	cmp	r3, #1
   1a028:	d18f      	bne.n	19f4a <bt_conn_set_state+0x1a>
			k_work_cancel_delayable(&conn->deferred_work);
   1a02a:	3058      	adds	r0, #88	; 0x58
   1a02c:	f010 fa67 	bl	2a4fe <k_work_cancel_delayable>
   1a030:	e78b      	b.n	19f4a <bt_conn_set_state+0x1a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1a032:	78a3      	ldrb	r3, [r4, #2]
   1a034:	2b04      	cmp	r3, #4
   1a036:	d0e9      	beq.n	1a00c <bt_conn_set_state+0xdc>
		k_fifo_init(&conn->tx_queue);
   1a038:	f104 0038 	add.w	r0, r4, #56	; 0x38
	z_impl_k_queue_init(queue);
   1a03c:	f010 f8d6 	bl	2a1ec <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1a040:	2100      	movs	r1, #0
   1a042:	488b      	ldr	r0, [pc, #556]	; (1a270 <bt_conn_set_state+0x340>)
   1a044:	f009 fe36 	bl	23cb4 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   1a048:	2300      	movs	r3, #0
   1a04a:	6523      	str	r3, [r4, #80]	; 0x50
	list->tail = NULL;
   1a04c:	6563      	str	r3, [r4, #84]	; 0x54
}
   1a04e:	e7dd      	b.n	1a00c <bt_conn_set_state+0xdc>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1a050:	78a3      	ldrb	r3, [r4, #2]
   1a052:	2b04      	cmp	r3, #4
   1a054:	d016      	beq.n	1a084 <bt_conn_set_state+0x154>
		switch (old_state) {
   1a056:	2e08      	cmp	r6, #8
   1a058:	d8d8      	bhi.n	1a00c <bt_conn_set_state+0xdc>
   1a05a:	a301      	add	r3, pc, #4	; (adr r3, 1a060 <bt_conn_set_state+0x130>)
   1a05c:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1a060:	0001a121 	.word	0x0001a121
   1a064:	0001a08d 	.word	0x0001a08d
   1a068:	0001a0e9 	.word	0x0001a0e9
   1a06c:	0001a111 	.word	0x0001a111
   1a070:	0001a119 	.word	0x0001a119
   1a074:	0001a0fd 	.word	0x0001a0fd
   1a078:	0001a0d5 	.word	0x0001a0d5
   1a07c:	0001a00d 	.word	0x0001a00d
   1a080:	0001a121 	.word	0x0001a121
			bt_conn_unref(conn);
   1a084:	4620      	mov	r0, r4
   1a086:	f00c fc10 	bl	268aa <bt_conn_unref>
			break;
   1a08a:	e7bf      	b.n	1a00c <bt_conn_set_state+0xdc>
			tx_notify(conn);
   1a08c:	4620      	mov	r0, r4
   1a08e:	f00c fac2 	bl	26616 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1a092:	78a3      	ldrb	r3, [r4, #2]
   1a094:	2b01      	cmp	r3, #1
   1a096:	d011      	beq.n	1a0bc <bt_conn_set_state+0x18c>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
   1a098:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a09a:	f3bf 8f5b 	dmb	ish
   1a09e:	e854 3f00 	ldrex	r3, [r4]
   1a0a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a0a6:	e844 3200 	strex	r2, r3, [r4]
   1a0aa:	2a00      	cmp	r2, #0
   1a0ac:	d1f7      	bne.n	1a09e <bt_conn_set_state+0x16e>
   1a0ae:	f3bf 8f5b 	dmb	ish
   1a0b2:	2100      	movs	r1, #0
   1a0b4:	486e      	ldr	r0, [pc, #440]	; (1a270 <bt_conn_set_state+0x340>)
   1a0b6:	f009 fdfd 	bl	23cb4 <z_impl_k_poll_signal_raise>
   1a0ba:	e7a7      	b.n	1a00c <bt_conn_set_state+0xdc>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   1a0bc:	f104 0558 	add.w	r5, r4, #88	; 0x58
   1a0c0:	4628      	mov	r0, r5
   1a0c2:	f010 f9d5 	bl	2a470 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1a0c6:	f010 0f0c 	tst.w	r0, #12
   1a0ca:	d0e5      	beq.n	1a098 <bt_conn_set_state+0x168>
				k_work_cancel_delayable(&conn->deferred_work);
   1a0cc:	4628      	mov	r0, r5
   1a0ce:	f010 fa16 	bl	2a4fe <k_work_cancel_delayable>
   1a0d2:	e7e1      	b.n	1a098 <bt_conn_set_state+0x168>
			if (conn->err) {
   1a0d4:	7a63      	ldrb	r3, [r4, #9]
   1a0d6:	b91b      	cbnz	r3, 1a0e0 <bt_conn_set_state+0x1b0>
			bt_conn_unref(conn);
   1a0d8:	4620      	mov	r0, r4
   1a0da:	f00c fbe6 	bl	268aa <bt_conn_unref>
			break;
   1a0de:	e795      	b.n	1a00c <bt_conn_set_state+0xdc>
				notify_connected(conn);
   1a0e0:	4620      	mov	r0, r4
   1a0e2:	f7ff fb6f 	bl	197c4 <notify_connected>
   1a0e6:	e7f7      	b.n	1a0d8 <bt_conn_set_state+0x1a8>
			if (conn->err) {
   1a0e8:	7a63      	ldrb	r3, [r4, #9]
   1a0ea:	b91b      	cbnz	r3, 1a0f4 <bt_conn_set_state+0x1c4>
			bt_conn_unref(conn);
   1a0ec:	4620      	mov	r0, r4
   1a0ee:	f00c fbdc 	bl	268aa <bt_conn_unref>
			break;
   1a0f2:	e78b      	b.n	1a00c <bt_conn_set_state+0xdc>
				notify_connected(conn);
   1a0f4:	4620      	mov	r0, r4
   1a0f6:	f7ff fb65 	bl	197c4 <notify_connected>
   1a0fa:	e7f7      	b.n	1a0ec <bt_conn_set_state+0x1bc>
			if (conn->err) {
   1a0fc:	7a63      	ldrb	r3, [r4, #9]
   1a0fe:	b91b      	cbnz	r3, 1a108 <bt_conn_set_state+0x1d8>
			bt_conn_unref(conn);
   1a100:	4620      	mov	r0, r4
   1a102:	f00c fbd2 	bl	268aa <bt_conn_unref>
			break;
   1a106:	e781      	b.n	1a00c <bt_conn_set_state+0xdc>
				notify_connected(conn);
   1a108:	4620      	mov	r0, r4
   1a10a:	f7ff fb5b 	bl	197c4 <notify_connected>
   1a10e:	e7f7      	b.n	1a100 <bt_conn_set_state+0x1d0>
			bt_conn_unref(conn);
   1a110:	4620      	mov	r0, r4
   1a112:	f00c fbca 	bl	268aa <bt_conn_unref>
			break;
   1a116:	e779      	b.n	1a00c <bt_conn_set_state+0xdc>
			bt_conn_unref(conn);
   1a118:	4620      	mov	r0, r4
   1a11a:	f00c fbc6 	bl	268aa <bt_conn_unref>
			break;
   1a11e:	e775      	b.n	1a00c <bt_conn_set_state+0xdc>
			LOG_WRN("Invalid (%u) old state", state);
   1a120:	466e      	mov	r6, sp
   1a122:	b088      	sub	sp, #32
   1a124:	466b      	mov	r3, sp
   1a126:	f113 0210 	adds.w	r2, r3, #16
   1a12a:	d02f      	beq.n	1a18c <bt_conn_set_state+0x25c>
   1a12c:	210c      	movs	r1, #12
   1a12e:	b13a      	cbz	r2, 1a140 <bt_conn_set_state+0x210>
   1a130:	4608      	mov	r0, r1
   1a132:	2904      	cmp	r1, #4
   1a134:	dd01      	ble.n	1a13a <bt_conn_set_state+0x20a>
   1a136:	4c4f      	ldr	r4, [pc, #316]	; (1a274 <bt_conn_set_state+0x344>)
   1a138:	615c      	str	r4, [r3, #20]
   1a13a:	2808      	cmp	r0, #8
   1a13c:	dd00      	ble.n	1a140 <bt_conn_set_state+0x210>
   1a13e:	619d      	str	r5, [r3, #24]
   1a140:	290b      	cmp	r1, #11
   1a142:	dd26      	ble.n	1a192 <bt_conn_set_state+0x262>
   1a144:	240c      	movs	r4, #12
   1a146:	b13a      	cbz	r2, 1a158 <bt_conn_set_state+0x228>
   1a148:	2103      	movs	r1, #3
   1a14a:	7139      	strb	r1, [r7, #4]
   1a14c:	2100      	movs	r1, #0
   1a14e:	7179      	strb	r1, [r7, #5]
   1a150:	71b9      	strb	r1, [r7, #6]
   1a152:	71f9      	strb	r1, [r7, #7]
   1a154:	6878      	ldr	r0, [r7, #4]
   1a156:	6118      	str	r0, [r3, #16]
   1a158:	2100      	movs	r1, #0
   1a15a:	f36f 0100 	bfc	r1, #0, #1
   1a15e:	f36f 0141 	bfc	r1, #1, #1
   1a162:	f36f 0182 	bfc	r1, #2, #1
   1a166:	f36f 01c5 	bfc	r1, #3, #3
   1a16a:	2302      	movs	r3, #2
   1a16c:	f363 1188 	bfi	r1, r3, #6, #3
   1a170:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1a174:	f363 2152 	bfi	r1, r3, #9, #10
   1a178:	f36f 41de 	bfc	r1, #19, #12
   1a17c:	f36f 71df 	bfc	r1, #31, #1
   1a180:	2300      	movs	r3, #0
   1a182:	483a      	ldr	r0, [pc, #232]	; (1a26c <bt_conn_set_state+0x33c>)
   1a184:	f00b fb15 	bl	257b2 <z_impl_z_log_msg_static_create>
   1a188:	46b5      	mov	sp, r6
   1a18a:	e73f      	b.n	1a00c <bt_conn_set_state+0xdc>
   1a18c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1a190:	e7cd      	b.n	1a12e <bt_conn_set_state+0x1fe>
   1a192:	f06f 041b 	mvn.w	r4, #27
   1a196:	e7d6      	b.n	1a146 <bt_conn_set_state+0x216>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1a198:	78a3      	ldrb	r3, [r4, #2]
   1a19a:	2b04      	cmp	r3, #4
   1a19c:	f43f af36 	beq.w	1a00c <bt_conn_set_state+0xdc>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1a1a0:	2b01      	cmp	r3, #1
   1a1a2:	f47f af33 	bne.w	1a00c <bt_conn_set_state+0xdc>
			k_work_schedule(&conn->deferred_work,
   1a1a6:	3458      	adds	r4, #88	; 0x58
					K_MSEC(10 * bt_dev.create_param.timeout));
   1a1a8:	4b33      	ldr	r3, [pc, #204]	; (1a278 <bt_conn_set_state+0x348>)
   1a1aa:	8a98      	ldrh	r0, [r3, #20]
   1a1ac:	b1c0      	cbz	r0, 1a1e0 <bt_conn_set_state+0x2b0>
   1a1ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a1b2:	0040      	lsls	r0, r0, #1
   1a1b4:	2100      	movs	r1, #0
			return ((t * to_hz + off) / from_hz);
   1a1b6:	03c9      	lsls	r1, r1, #15
   1a1b8:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   1a1bc:	03c0      	lsls	r0, r0, #15
   1a1be:	f240 33e7 	movw	r3, #999	; 0x3e7
   1a1c2:	18c0      	adds	r0, r0, r3
   1a1c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a1c8:	f04f 0300 	mov.w	r3, #0
   1a1cc:	f141 0100 	adc.w	r1, r1, #0
   1a1d0:	f7e5 ff96 	bl	100 <__aeabi_uldivmod>
   1a1d4:	4602      	mov	r2, r0
   1a1d6:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
   1a1d8:	4620      	mov	r0, r4
   1a1da:	f008 fe93 	bl	22f04 <k_work_schedule>
   1a1de:	e715      	b.n	1a00c <bt_conn_set_state+0xdc>
					K_MSEC(10 * bt_dev.create_param.timeout));
   1a1e0:	2000      	movs	r0, #0
   1a1e2:	4601      	mov	r1, r0
   1a1e4:	e7e7      	b.n	1a1b6 <bt_conn_set_state+0x286>
		process_unack_tx(conn);
   1a1e6:	4620      	mov	r0, r4
   1a1e8:	f00c fa94 	bl	26714 <process_unack_tx>
		break;
   1a1ec:	e70e      	b.n	1a00c <bt_conn_set_state+0xdc>
		LOG_WRN("no valid (%u) state was set", state);
   1a1ee:	466e      	mov	r6, sp
   1a1f0:	b088      	sub	sp, #32
   1a1f2:	466b      	mov	r3, sp
   1a1f4:	f113 0210 	adds.w	r2, r3, #16
   1a1f8:	d130      	bne.n	1a25c <bt_conn_set_state+0x32c>
   1a1fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1a1fe:	b13a      	cbz	r2, 1a210 <bt_conn_set_state+0x2e0>
   1a200:	4608      	mov	r0, r1
   1a202:	2904      	cmp	r1, #4
   1a204:	dd01      	ble.n	1a20a <bt_conn_set_state+0x2da>
   1a206:	4c1d      	ldr	r4, [pc, #116]	; (1a27c <bt_conn_set_state+0x34c>)
   1a208:	615c      	str	r4, [r3, #20]
   1a20a:	2808      	cmp	r0, #8
   1a20c:	dd00      	ble.n	1a210 <bt_conn_set_state+0x2e0>
   1a20e:	619d      	str	r5, [r3, #24]
   1a210:	290b      	cmp	r1, #11
   1a212:	dd25      	ble.n	1a260 <bt_conn_set_state+0x330>
   1a214:	240c      	movs	r4, #12
   1a216:	b13a      	cbz	r2, 1a228 <bt_conn_set_state+0x2f8>
   1a218:	2103      	movs	r1, #3
   1a21a:	7139      	strb	r1, [r7, #4]
   1a21c:	2100      	movs	r1, #0
   1a21e:	7179      	strb	r1, [r7, #5]
   1a220:	71b9      	strb	r1, [r7, #6]
   1a222:	71f9      	strb	r1, [r7, #7]
   1a224:	6878      	ldr	r0, [r7, #4]
   1a226:	6118      	str	r0, [r3, #16]
   1a228:	2100      	movs	r1, #0
   1a22a:	f36f 0100 	bfc	r1, #0, #1
   1a22e:	f36f 0141 	bfc	r1, #1, #1
   1a232:	f36f 0182 	bfc	r1, #2, #1
   1a236:	f36f 01c5 	bfc	r1, #3, #3
   1a23a:	2302      	movs	r3, #2
   1a23c:	f363 1188 	bfi	r1, r3, #6, #3
   1a240:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1a244:	f364 2152 	bfi	r1, r4, #9, #10
   1a248:	f36f 41de 	bfc	r1, #19, #12
   1a24c:	f36f 71df 	bfc	r1, #31, #1
   1a250:	2300      	movs	r3, #0
   1a252:	4806      	ldr	r0, [pc, #24]	; (1a26c <bt_conn_set_state+0x33c>)
   1a254:	f00b faad 	bl	257b2 <z_impl_z_log_msg_static_create>
   1a258:	46b5      	mov	sp, r6
   1a25a:	e6d7      	b.n	1a00c <bt_conn_set_state+0xdc>
   1a25c:	210c      	movs	r1, #12
   1a25e:	e7ce      	b.n	1a1fe <bt_conn_set_state+0x2ce>
   1a260:	f06f 041b 	mvn.w	r4, #27
   1a264:	e7d7      	b.n	1a216 <bt_conn_set_state+0x2e6>
   1a266:	bf00      	nop
   1a268:	0002c9d4 	.word	0x0002c9d4
   1a26c:	0002b16c 	.word	0x0002b16c
   1a270:	20000738 	.word	0x20000738
   1a274:	0002c9e8 	.word	0x0002c9e8
   1a278:	20000370 	.word	0x20000370
   1a27c:	0002ca00 	.word	0x0002ca00

0001a280 <bt_conn_index>:
		index = conn - acl_conns;
   1a280:	4b03      	ldr	r3, [pc, #12]	; (1a290 <bt_conn_index+0x10>)
   1a282:	1ac0      	subs	r0, r0, r3
   1a284:	1180      	asrs	r0, r0, #6
   1a286:	4b03      	ldr	r3, [pc, #12]	; (1a294 <bt_conn_index+0x14>)
   1a288:	fb03 f000 	mul.w	r0, r3, r0
}
   1a28c:	b2c0      	uxtb	r0, r0
   1a28e:	4770      	bx	lr
   1a290:	200020e0 	.word	0x200020e0
   1a294:	aaaaaaab 	.word	0xaaaaaaab

0001a298 <bt_conn_create_pdu_timeout>:
{
   1a298:	b530      	push	{r4, r5, lr}
   1a29a:	b089      	sub	sp, #36	; 0x24
   1a29c:	460c      	mov	r4, r1
	if (!pool) {
   1a29e:	4601      	mov	r1, r0
   1a2a0:	b158      	cbz	r0, 1a2ba <bt_conn_create_pdu_timeout+0x22>
	return net_buf_alloc_fixed(pool, timeout);
   1a2a2:	4608      	mov	r0, r1
   1a2a4:	f00d fff1 	bl	2828a <net_buf_alloc_fixed>
	if (!buf) {
   1a2a8:	4605      	mov	r5, r0
   1a2aa:	b140      	cbz	r0, 1a2be <bt_conn_create_pdu_timeout+0x26>
	net_buf_simple_reserve(&buf->b, reserve);
   1a2ac:	1d21      	adds	r1, r4, #4
   1a2ae:	300c      	adds	r0, #12
   1a2b0:	f00d fff6 	bl	282a0 <net_buf_simple_reserve>
}
   1a2b4:	4628      	mov	r0, r5
   1a2b6:	b009      	add	sp, #36	; 0x24
   1a2b8:	bd30      	pop	{r4, r5, pc}
		pool = &acl_tx_pool;
   1a2ba:	4913      	ldr	r1, [pc, #76]	; (1a308 <bt_conn_create_pdu_timeout+0x70>)
   1a2bc:	e7f1      	b.n	1a2a2 <bt_conn_create_pdu_timeout+0xa>
		LOG_WRN("Unable to allocate buffer within timeout");
   1a2be:	4b13      	ldr	r3, [pc, #76]	; (1a30c <bt_conn_create_pdu_timeout+0x74>)
   1a2c0:	9307      	str	r3, [sp, #28]
   1a2c2:	2202      	movs	r2, #2
   1a2c4:	f88d 2004 	strb.w	r2, [sp, #4]
   1a2c8:	2300      	movs	r3, #0
   1a2ca:	f88d 3005 	strb.w	r3, [sp, #5]
   1a2ce:	f88d 3006 	strb.w	r3, [sp, #6]
   1a2d2:	f88d 3007 	strb.w	r3, [sp, #7]
   1a2d6:	9901      	ldr	r1, [sp, #4]
   1a2d8:	9106      	str	r1, [sp, #24]
   1a2da:	4619      	mov	r1, r3
   1a2dc:	f363 0100 	bfi	r1, r3, #0, #1
   1a2e0:	f363 0141 	bfi	r1, r3, #1, #1
   1a2e4:	f363 0182 	bfi	r1, r3, #2, #1
   1a2e8:	f363 01c5 	bfi	r1, r3, #3, #3
   1a2ec:	f362 1188 	bfi	r1, r2, #6, #3
   1a2f0:	2208      	movs	r2, #8
   1a2f2:	f362 2152 	bfi	r1, r2, #9, #10
   1a2f6:	f363 41de 	bfi	r1, r3, #19, #12
   1a2fa:	f363 71df 	bfi	r1, r3, #31, #1
   1a2fe:	aa06      	add	r2, sp, #24
   1a300:	4803      	ldr	r0, [pc, #12]	; (1a310 <bt_conn_create_pdu_timeout+0x78>)
   1a302:	f00b fa56 	bl	257b2 <z_impl_z_log_msg_static_create>
		return NULL;
   1a306:	e7d5      	b.n	1a2b4 <bt_conn_create_pdu_timeout+0x1c>
   1a308:	20000a60 	.word	0x20000a60
   1a30c:	0002ca1c 	.word	0x0002ca1c
   1a310:	0002b16c 	.word	0x0002b16c

0001a314 <notify_le_param_updated>:
{
   1a314:	b570      	push	{r4, r5, r6, lr}
   1a316:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1a318:	1d05      	adds	r5, r0, #4
   1a31a:	2109      	movs	r1, #9
   1a31c:	4628      	mov	r0, r5
   1a31e:	f00c f9cb 	bl	266b8 <atomic_test_bit>
   1a322:	b178      	cbz	r0, 1a344 <notify_le_param_updated+0x30>
	    conn->le.interval >= conn->le.interval_min &&
   1a324:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
   1a328:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1a32c:	4293      	cmp	r3, r2
   1a32e:	d309      	bcc.n	1a344 <notify_le_param_updated+0x30>
	    conn->le.interval <= conn->le.interval_max &&
   1a330:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
	    conn->le.interval >= conn->le.interval_min &&
   1a334:	4293      	cmp	r3, r2
   1a336:	d805      	bhi.n	1a344 <notify_le_param_updated+0x30>
	    conn->le.latency == conn->le.pending_latency &&
   1a338:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   1a33c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1a340:	429a      	cmp	r2, r3
   1a342:	d002      	beq.n	1a34a <notify_le_param_updated+0x36>
	for (cb = callback_list; cb; cb = cb->_next) {
   1a344:	4b18      	ldr	r3, [pc, #96]	; (1a3a8 <notify_le_param_updated+0x94>)
   1a346:	681d      	ldr	r5, [r3, #0]
   1a348:	e015      	b.n	1a376 <notify_le_param_updated+0x62>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a34a:	f3bf 8f5b 	dmb	ish
   1a34e:	e855 3f00 	ldrex	r3, [r5]
   1a352:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   1a356:	e845 3200 	strex	r2, r3, [r5]
   1a35a:	2a00      	cmp	r2, #0
   1a35c:	d1f7      	bne.n	1a34e <notify_le_param_updated+0x3a>
   1a35e:	f3bf 8f5b 	dmb	ish
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
}
   1a362:	e7ef      	b.n	1a344 <notify_le_param_updated+0x30>
			cb->le_param_updated(conn, conn->le.interval,
   1a364:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1a368:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1a36c:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1a370:	4620      	mov	r0, r4
   1a372:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1a374:	692d      	ldr	r5, [r5, #16]
   1a376:	b11d      	cbz	r5, 1a380 <notify_le_param_updated+0x6c>
		if (cb->le_param_updated) {
   1a378:	68ee      	ldr	r6, [r5, #12]
   1a37a:	2e00      	cmp	r6, #0
   1a37c:	d1f2      	bne.n	1a364 <notify_le_param_updated+0x50>
   1a37e:	e7f9      	b.n	1a374 <notify_le_param_updated+0x60>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a380:	4d0a      	ldr	r5, [pc, #40]	; (1a3ac <notify_le_param_updated+0x98>)
   1a382:	e000      	b.n	1a386 <notify_le_param_updated+0x72>
   1a384:	3514      	adds	r5, #20
   1a386:	4b0a      	ldr	r3, [pc, #40]	; (1a3b0 <notify_le_param_updated+0x9c>)
   1a388:	429d      	cmp	r5, r3
   1a38a:	d20b      	bcs.n	1a3a4 <notify_le_param_updated+0x90>
		if (cb->le_param_updated) {
   1a38c:	68ee      	ldr	r6, [r5, #12]
   1a38e:	2e00      	cmp	r6, #0
   1a390:	d0f8      	beq.n	1a384 <notify_le_param_updated+0x70>
			cb->le_param_updated(conn, conn->le.interval,
   1a392:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1a396:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1a39a:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1a39e:	4620      	mov	r0, r4
   1a3a0:	47b0      	blx	r6
   1a3a2:	e7ef      	b.n	1a384 <notify_le_param_updated+0x70>
}
   1a3a4:	bd70      	pop	{r4, r5, r6, pc}
   1a3a6:	bf00      	nop
   1a3a8:	200057bc 	.word	0x200057bc
   1a3ac:	0002b130 	.word	0x0002b130
   1a3b0:	0002b144 	.word	0x0002b144

0001a3b4 <le_param_req>:
{
   1a3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a3b6:	4606      	mov	r6, r0
   1a3b8:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1a3ba:	4608      	mov	r0, r1
   1a3bc:	f00c f831 	bl	26422 <bt_le_conn_params_valid>
   1a3c0:	4607      	mov	r7, r0
   1a3c2:	b338      	cbz	r0, 1a414 <le_param_req+0x60>
	for (cb = callback_list; cb; cb = cb->_next) {
   1a3c4:	4b15      	ldr	r3, [pc, #84]	; (1a41c <le_param_req+0x68>)
   1a3c6:	681c      	ldr	r4, [r3, #0]
   1a3c8:	e000      	b.n	1a3cc <le_param_req+0x18>
   1a3ca:	6924      	ldr	r4, [r4, #16]
   1a3cc:	b16c      	cbz	r4, 1a3ea <le_param_req+0x36>
		if (!cb->le_param_req) {
   1a3ce:	68a3      	ldr	r3, [r4, #8]
   1a3d0:	2b00      	cmp	r3, #0
   1a3d2:	d0fa      	beq.n	1a3ca <le_param_req+0x16>
		if (!cb->le_param_req(conn, param)) {
   1a3d4:	4629      	mov	r1, r5
   1a3d6:	4630      	mov	r0, r6
   1a3d8:	4798      	blx	r3
   1a3da:	b1d0      	cbz	r0, 1a412 <le_param_req+0x5e>
		if (!bt_le_conn_params_valid(param)) {
   1a3dc:	4628      	mov	r0, r5
   1a3de:	f00c f820 	bl	26422 <bt_le_conn_params_valid>
   1a3e2:	2800      	cmp	r0, #0
   1a3e4:	d1f1      	bne.n	1a3ca <le_param_req+0x16>
			return false;
   1a3e6:	4607      	mov	r7, r0
   1a3e8:	e014      	b.n	1a414 <le_param_req+0x60>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a3ea:	4c0d      	ldr	r4, [pc, #52]	; (1a420 <le_param_req+0x6c>)
   1a3ec:	e000      	b.n	1a3f0 <le_param_req+0x3c>
   1a3ee:	3414      	adds	r4, #20
   1a3f0:	4b0c      	ldr	r3, [pc, #48]	; (1a424 <le_param_req+0x70>)
   1a3f2:	429c      	cmp	r4, r3
   1a3f4:	d20e      	bcs.n	1a414 <le_param_req+0x60>
		if (!cb->le_param_req) {
   1a3f6:	68a3      	ldr	r3, [r4, #8]
   1a3f8:	2b00      	cmp	r3, #0
   1a3fa:	d0f8      	beq.n	1a3ee <le_param_req+0x3a>
		if (!cb->le_param_req(conn, param)) {
   1a3fc:	4629      	mov	r1, r5
   1a3fe:	4630      	mov	r0, r6
   1a400:	4798      	blx	r3
   1a402:	b148      	cbz	r0, 1a418 <le_param_req+0x64>
		if (!bt_le_conn_params_valid(param)) {
   1a404:	4628      	mov	r0, r5
   1a406:	f00c f80c 	bl	26422 <bt_le_conn_params_valid>
   1a40a:	2800      	cmp	r0, #0
   1a40c:	d1ef      	bne.n	1a3ee <le_param_req+0x3a>
			return false;
   1a40e:	4607      	mov	r7, r0
   1a410:	e000      	b.n	1a414 <le_param_req+0x60>
			return false;
   1a412:	4607      	mov	r7, r0
}
   1a414:	4638      	mov	r0, r7
   1a416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false;
   1a418:	4607      	mov	r7, r0
   1a41a:	e7fb      	b.n	1a414 <le_param_req+0x60>
   1a41c:	200057bc 	.word	0x200057bc
   1a420:	0002b130 	.word	0x0002b130
   1a424:	0002b144 	.word	0x0002b144

0001a428 <bt_conn_lookup_addr_le>:
{
   1a428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a42a:	4607      	mov	r7, r0
   1a42c:	460e      	mov	r6, r1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1a42e:	2400      	movs	r4, #0
   1a430:	e002      	b.n	1a438 <bt_conn_lookup_addr_le+0x10>
			bt_conn_unref(conn);
   1a432:	f00c fa3a 	bl	268aa <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1a436:	3401      	adds	r4, #1
   1a438:	2c07      	cmp	r4, #7
   1a43a:	d817      	bhi.n	1a46c <bt_conn_lookup_addr_le+0x44>
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1a43c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1a440:	480b      	ldr	r0, [pc, #44]	; (1a470 <bt_conn_lookup_addr_le+0x48>)
   1a442:	eb00 1083 	add.w	r0, r0, r3, lsl #6
   1a446:	f00c fa09 	bl	2685c <bt_conn_ref>
		if (!conn) {
   1a44a:	4605      	mov	r5, r0
   1a44c:	2800      	cmp	r0, #0
   1a44e:	d0f2      	beq.n	1a436 <bt_conn_lookup_addr_le+0xe>
		if (conn->type != BT_CONN_TYPE_LE) {
   1a450:	7883      	ldrb	r3, [r0, #2]
   1a452:	2b01      	cmp	r3, #1
   1a454:	d1ed      	bne.n	1a432 <bt_conn_lookup_addr_le+0xa>
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   1a456:	4632      	mov	r2, r6
   1a458:	4639      	mov	r1, r7
   1a45a:	f00c fa80 	bl	2695e <bt_conn_is_peer_addr_le>
   1a45e:	b108      	cbz	r0, 1a464 <bt_conn_lookup_addr_le+0x3c>
}
   1a460:	4628      	mov	r0, r5
   1a462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   1a464:	4628      	mov	r0, r5
   1a466:	f00c fa20 	bl	268aa <bt_conn_unref>
			continue;
   1a46a:	e7e4      	b.n	1a436 <bt_conn_lookup_addr_le+0xe>
	return NULL;
   1a46c:	2500      	movs	r5, #0
   1a46e:	e7f7      	b.n	1a460 <bt_conn_lookup_addr_le+0x38>
   1a470:	200020e0 	.word	0x200020e0

0001a474 <bt_conn_lookup_state_le>:
{
   1a474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a478:	4607      	mov	r7, r0
   1a47a:	460e      	mov	r6, r1
   1a47c:	4690      	mov	r8, r2
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1a47e:	2400      	movs	r4, #0
   1a480:	e00a      	b.n	1a498 <bt_conn_lookup_state_le+0x24>
			bt_conn_unref(conn);
   1a482:	f00c fa12 	bl	268aa <bt_conn_unref>
			continue;
   1a486:	e006      	b.n	1a496 <bt_conn_lookup_state_le+0x22>
			bt_conn_unref(conn);
   1a488:	4628      	mov	r0, r5
   1a48a:	f00c fa0e 	bl	268aa <bt_conn_unref>
			continue;
   1a48e:	e002      	b.n	1a496 <bt_conn_lookup_state_le+0x22>
			bt_conn_unref(conn);
   1a490:	4628      	mov	r0, r5
   1a492:	f00c fa0a 	bl	268aa <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1a496:	3401      	adds	r4, #1
   1a498:	2c07      	cmp	r4, #7
   1a49a:	d81c      	bhi.n	1a4d6 <bt_conn_lookup_state_le+0x62>
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1a49c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1a4a0:	480e      	ldr	r0, [pc, #56]	; (1a4dc <bt_conn_lookup_state_le+0x68>)
   1a4a2:	eb00 1083 	add.w	r0, r0, r3, lsl #6
   1a4a6:	f00c f9d9 	bl	2685c <bt_conn_ref>
		if (!conn) {
   1a4aa:	4605      	mov	r5, r0
   1a4ac:	2800      	cmp	r0, #0
   1a4ae:	d0f2      	beq.n	1a496 <bt_conn_lookup_state_le+0x22>
		if (conn->type != BT_CONN_TYPE_LE) {
   1a4b0:	7883      	ldrb	r3, [r0, #2]
   1a4b2:	2b01      	cmp	r3, #1
   1a4b4:	d1e5      	bne.n	1a482 <bt_conn_lookup_state_le+0xe>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   1a4b6:	b12e      	cbz	r6, 1a4c4 <bt_conn_lookup_state_le+0x50>
   1a4b8:	4632      	mov	r2, r6
   1a4ba:	4639      	mov	r1, r7
   1a4bc:	f00c fa4f 	bl	2695e <bt_conn_is_peer_addr_le>
   1a4c0:	2800      	cmp	r0, #0
   1a4c2:	d0e1      	beq.n	1a488 <bt_conn_lookup_state_le+0x14>
		if (!(conn->state == state && conn->id == id)) {
   1a4c4:	7aab      	ldrb	r3, [r5, #10]
   1a4c6:	4543      	cmp	r3, r8
   1a4c8:	d1e2      	bne.n	1a490 <bt_conn_lookup_state_le+0x1c>
   1a4ca:	7a2b      	ldrb	r3, [r5, #8]
   1a4cc:	42bb      	cmp	r3, r7
   1a4ce:	d1df      	bne.n	1a490 <bt_conn_lookup_state_le+0x1c>
}
   1a4d0:	4628      	mov	r0, r5
   1a4d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   1a4d6:	2500      	movs	r5, #0
   1a4d8:	e7fa      	b.n	1a4d0 <bt_conn_lookup_state_le+0x5c>
   1a4da:	bf00      	nop
   1a4dc:	200020e0 	.word	0x200020e0

0001a4e0 <bt_conn_le_create_auto>:

#if defined(CONFIG_BT_FILTER_ACCEPT_LIST)
int bt_conn_le_create_auto(const struct bt_conn_le_create_param *create_param,
			   const struct bt_le_conn_param *param)
{
   1a4e0:	b570      	push	{r4, r5, r6, lr}
   1a4e2:	b088      	sub	sp, #32
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a4e4:	f3bf 8f5b 	dmb	ish
   1a4e8:	4b4d      	ldr	r3, [pc, #308]	; (1a620 <bt_conn_le_create_auto+0x140>)
   1a4ea:	681b      	ldr	r3, [r3, #0]
   1a4ec:	f3bf 8f5b 	dmb	ish
	struct bt_conn *conn;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1a4f0:	f013 0f04 	tst.w	r3, #4
   1a4f4:	f000 8081 	beq.w	1a5fa <bt_conn_le_create_auto+0x11a>
   1a4f8:	4606      	mov	r6, r0
   1a4fa:	460d      	mov	r5, r1
		return -EAGAIN;
	}

	if (!bt_le_conn_params_valid(param)) {
   1a4fc:	4608      	mov	r0, r1
   1a4fe:	f00b ff90 	bl	26422 <bt_le_conn_params_valid>
   1a502:	2800      	cmp	r0, #0
   1a504:	d07c      	beq.n	1a600 <bt_conn_le_create_auto+0x120>
		return -EINVAL;
	}

	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, BT_ADDR_LE_NONE,
   1a506:	2203      	movs	r2, #3
   1a508:	4946      	ldr	r1, [pc, #280]	; (1a624 <bt_conn_le_create_auto+0x144>)
   1a50a:	2000      	movs	r0, #0
   1a50c:	f7ff ffb2 	bl	1a474 <bt_conn_lookup_state_le>
				       BT_CONN_CONNECTING_AUTO);
	if (conn) {
   1a510:	2800      	cmp	r0, #0
   1a512:	d13e      	bne.n	1a592 <bt_conn_le_create_auto+0xb2>
   1a514:	f3bf 8f5b 	dmb	ish
   1a518:	4b41      	ldr	r3, [pc, #260]	; (1a620 <bt_conn_le_create_auto+0x140>)
   1a51a:	681b      	ldr	r3, [r3, #0]
   1a51c:	f3bf 8f5b 	dmb	ish
	}

	/* Scanning either to connect or explicit scan, either case scanner was
	 * started by application and should not be stopped.
	 */
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   1a520:	f013 0f40 	tst.w	r3, #64	; 0x40
   1a524:	d16f      	bne.n	1a606 <bt_conn_le_create_auto+0x126>
   1a526:	f3bf 8f5b 	dmb	ish
   1a52a:	4b3d      	ldr	r3, [pc, #244]	; (1a620 <bt_conn_le_create_auto+0x140>)
   1a52c:	681b      	ldr	r3, [r3, #0]
   1a52e:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   1a532:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   1a536:	d169      	bne.n	1a60c <bt_conn_le_create_auto+0x12c>
		return -EINVAL;
	}

	if (!bt_id_scan_random_addr_check()) {
   1a538:	f00b fff5 	bl	26526 <bt_id_scan_random_addr_check>
   1a53c:	2800      	cmp	r0, #0
   1a53e:	d068      	beq.n	1a612 <bt_conn_le_create_auto+0x132>
		return -EINVAL;
	}

	conn = bt_conn_add_le(BT_ID_DEFAULT, BT_ADDR_LE_NONE);
   1a540:	4938      	ldr	r1, [pc, #224]	; (1a624 <bt_conn_le_create_auto+0x144>)
   1a542:	2000      	movs	r0, #0
   1a544:	f00c f9f4 	bl	26930 <bt_conn_add_le>
	if (!conn) {
   1a548:	4604      	mov	r4, r0
   1a54a:	2800      	cmp	r0, #0
   1a54c:	d064      	beq.n	1a618 <bt_conn_le_create_auto+0x138>
		return -ENOMEM;
	}

	bt_conn_set_param_le(conn, param);
   1a54e:	4629      	mov	r1, r5
   1a550:	f00c f854 	bl	265fc <bt_conn_set_param_le>
	create_param_setup(create_param);
   1a554:	4630      	mov	r0, r6
   1a556:	f7ff f979 	bl	1984c <create_param_setup>

	atomic_set_bit(conn->flags, BT_CONN_AUTO_CONNECT);
   1a55a:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a55c:	f3bf 8f5b 	dmb	ish
   1a560:	e853 1f00 	ldrex	r1, [r3]
   1a564:	f041 0101 	orr.w	r1, r1, #1
   1a568:	e843 1200 	strex	r2, r1, [r3]
   1a56c:	2a00      	cmp	r2, #0
   1a56e:	d1f7      	bne.n	1a560 <bt_conn_le_create_auto+0x80>
   1a570:	f3bf 8f5b 	dmb	ish
	bt_conn_set_state(conn, BT_CONN_CONNECTING_AUTO);
   1a574:	2103      	movs	r1, #3
   1a576:	4620      	mov	r0, r4
   1a578:	f7ff fcda 	bl	19f30 <bt_conn_set_state>

	err = bt_le_create_conn(conn);
   1a57c:	4620      	mov	r0, r4
   1a57e:	f00b fee7 	bl	26350 <bt_le_create_conn>
	if (err) {
   1a582:	4606      	mov	r6, r0
   1a584:	b950      	cbnz	r0, 1a59c <bt_conn_le_create_auto+0xbc>
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   1a586:	4620      	mov	r0, r4
   1a588:	f00c f98f 	bl	268aa <bt_conn_unref>
	return 0;
}
   1a58c:	4630      	mov	r0, r6
   1a58e:	b008      	add	sp, #32
   1a590:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_unref(conn);
   1a592:	f00c f98a 	bl	268aa <bt_conn_unref>
		return -EALREADY;
   1a596:	f06f 0677 	mvn.w	r6, #119	; 0x77
   1a59a:	e7f7      	b.n	1a58c <bt_conn_le_create_auto+0xac>
		LOG_ERR("Failed to start filtered scan");
   1a59c:	4b22      	ldr	r3, [pc, #136]	; (1a628 <bt_conn_le_create_auto+0x148>)
   1a59e:	9307      	str	r3, [sp, #28]
   1a5a0:	2302      	movs	r3, #2
   1a5a2:	f88d 3004 	strb.w	r3, [sp, #4]
   1a5a6:	2500      	movs	r5, #0
   1a5a8:	f88d 5005 	strb.w	r5, [sp, #5]
   1a5ac:	f88d 5006 	strb.w	r5, [sp, #6]
   1a5b0:	f88d 5007 	strb.w	r5, [sp, #7]
   1a5b4:	9b01      	ldr	r3, [sp, #4]
   1a5b6:	9306      	str	r3, [sp, #24]
   1a5b8:	4629      	mov	r1, r5
   1a5ba:	f365 0100 	bfi	r1, r5, #0, #1
   1a5be:	f365 0141 	bfi	r1, r5, #1, #1
   1a5c2:	f365 0182 	bfi	r1, r5, #2, #1
   1a5c6:	f365 01c5 	bfi	r1, r5, #3, #3
   1a5ca:	2301      	movs	r3, #1
   1a5cc:	f363 1188 	bfi	r1, r3, #6, #3
   1a5d0:	2308      	movs	r3, #8
   1a5d2:	f363 2152 	bfi	r1, r3, #9, #10
   1a5d6:	f365 41de 	bfi	r1, r5, #19, #12
   1a5da:	f365 71df 	bfi	r1, r5, #31, #1
   1a5de:	462b      	mov	r3, r5
   1a5e0:	aa06      	add	r2, sp, #24
   1a5e2:	4812      	ldr	r0, [pc, #72]	; (1a62c <bt_conn_le_create_auto+0x14c>)
   1a5e4:	f00b f8e5 	bl	257b2 <z_impl_z_log_msg_static_create>
		conn->err = 0;
   1a5e8:	7265      	strb	r5, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1a5ea:	4629      	mov	r1, r5
   1a5ec:	4620      	mov	r0, r4
   1a5ee:	f7ff fc9f 	bl	19f30 <bt_conn_set_state>
		bt_conn_unref(conn);
   1a5f2:	4620      	mov	r0, r4
   1a5f4:	f00c f959 	bl	268aa <bt_conn_unref>
		return err;
   1a5f8:	e7c8      	b.n	1a58c <bt_conn_le_create_auto+0xac>
		return -EAGAIN;
   1a5fa:	f06f 060a 	mvn.w	r6, #10
   1a5fe:	e7c5      	b.n	1a58c <bt_conn_le_create_auto+0xac>
		return -EINVAL;
   1a600:	f06f 0615 	mvn.w	r6, #21
   1a604:	e7c2      	b.n	1a58c <bt_conn_le_create_auto+0xac>
		return -EINVAL;
   1a606:	f06f 0615 	mvn.w	r6, #21
   1a60a:	e7bf      	b.n	1a58c <bt_conn_le_create_auto+0xac>
		return -EINVAL;
   1a60c:	f06f 0615 	mvn.w	r6, #21
   1a610:	e7bc      	b.n	1a58c <bt_conn_le_create_auto+0xac>
		return -EINVAL;
   1a612:	f06f 0615 	mvn.w	r6, #21
   1a616:	e7b9      	b.n	1a58c <bt_conn_le_create_auto+0xac>
		return -ENOMEM;
   1a618:	f06f 060b 	mvn.w	r6, #11
   1a61c:	e7b6      	b.n	1a58c <bt_conn_le_create_auto+0xac>
   1a61e:	bf00      	nop
   1a620:	2000043c 	.word	0x2000043c
   1a624:	0002bff4 	.word	0x0002bff4
   1a628:	0002ca48 	.word	0x0002ca48
   1a62c:	0002b16c 	.word	0x0002b16c

0001a630 <send_conn_le_param_update>:
{
   1a630:	b538      	push	{r3, r4, r5, lr}
   1a632:	4604      	mov	r4, r0
   1a634:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1a636:	4608      	mov	r0, r1
   1a638:	f00b fef3 	bl	26422 <bt_le_conn_params_valid>
   1a63c:	b350      	cbz	r0, 1a694 <send_conn_le_param_update+0x64>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1a63e:	4b17      	ldr	r3, [pc, #92]	; (1a69c <send_conn_le_param_update+0x6c>)
   1a640:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   1a644:	f013 0f02 	tst.w	r3, #2
   1a648:	d004      	beq.n	1a654 <send_conn_le_param_update+0x24>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1a64a:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1a64e:	f013 0f02 	tst.w	r3, #2
   1a652:	d113      	bne.n	1a67c <send_conn_le_param_update+0x4c>
	     (conn->role == BT_HCI_ROLE_CENTRAL)) {
   1a654:	78e3      	ldrb	r3, [r4, #3]
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1a656:	b9c3      	cbnz	r3, 1a68a <send_conn_le_param_update+0x5a>
		rc = bt_conn_le_conn_update(conn, param);
   1a658:	4629      	mov	r1, r5
   1a65a:	4620      	mov	r0, r4
   1a65c:	f00c f9a8 	bl	269b0 <bt_conn_le_conn_update>
		if (rc == 0) {
   1a660:	b9b8      	cbnz	r0, 1a692 <send_conn_le_param_update+0x62>
			conn->le.interval_min = param->interval_min;
   1a662:	882b      	ldrh	r3, [r5, #0]
   1a664:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   1a668:	886b      	ldrh	r3, [r5, #2]
   1a66a:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   1a66e:	88ab      	ldrh	r3, [r5, #4]
   1a670:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   1a674:	88eb      	ldrh	r3, [r5, #6]
   1a676:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
		return rc;
   1a67a:	e00a      	b.n	1a692 <send_conn_le_param_update+0x62>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1a67c:	210a      	movs	r1, #10
   1a67e:	1d20      	adds	r0, r4, #4
   1a680:	f00c f81a 	bl	266b8 <atomic_test_bit>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1a684:	2800      	cmp	r0, #0
   1a686:	d1e5      	bne.n	1a654 <send_conn_le_param_update+0x24>
   1a688:	e7e6      	b.n	1a658 <send_conn_le_param_update+0x28>
	return bt_l2cap_update_conn_param(conn, param);
   1a68a:	4629      	mov	r1, r5
   1a68c:	4620      	mov	r0, r4
   1a68e:	f00c fa5d 	bl	26b4c <bt_l2cap_update_conn_param>
}
   1a692:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1a694:	f06f 0015 	mvn.w	r0, #21
   1a698:	e7fb      	b.n	1a692 <send_conn_le_param_update+0x62>
   1a69a:	bf00      	nop
   1a69c:	20000370 	.word	0x20000370

0001a6a0 <deferred_work>:
{
   1a6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a6a2:	b085      	sub	sp, #20
   1a6a4:	af00      	add	r7, sp, #0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   1a6a6:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   1a6aa:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
   1a6ae:	b1eb      	cbz	r3, 1a6ec <deferred_work+0x4c>
   1a6b0:	4604      	mov	r4, r0
	if (conn->type != BT_CONN_TYPE_LE) {
   1a6b2:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   1a6b6:	2b01      	cmp	r3, #1
   1a6b8:	d115      	bne.n	1a6e6 <deferred_work+0x46>
	    conn->role == BT_CONN_ROLE_CENTRAL) {
   1a6ba:	f810 3c55 	ldrb.w	r3, [r0, #-85]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1a6be:	b1fb      	cbz	r3, 1a700 <deferred_work+0x60>
	if (atomic_test_and_clear_bit(conn->flags,
   1a6c0:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
   1a6c4:	2109      	movs	r1, #9
   1a6c6:	4630      	mov	r0, r6
   1a6c8:	f00b ffda 	bl	26680 <atomic_test_and_clear_bit>
   1a6cc:	b9d8      	cbnz	r0, 1a706 <deferred_work+0x66>
   1a6ce:	f3bf 8f5b 	dmb	ish
   1a6d2:	e856 3f00 	ldrex	r3, [r6]
   1a6d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1a6da:	e846 3200 	strex	r2, r3, [r6]
   1a6de:	2a00      	cmp	r2, #0
   1a6e0:	d1f7      	bne.n	1a6d2 <deferred_work+0x32>
   1a6e2:	f3bf 8f5b 	dmb	ish
}
   1a6e6:	3714      	adds	r7, #20
   1a6e8:	46bd      	mov	sp, r7
   1a6ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_l2cap_disconnected(conn);
   1a6ec:	4628      	mov	r0, r5
   1a6ee:	f00c f9b4 	bl	26a5a <bt_l2cap_disconnected>
		notify_disconnected(conn);
   1a6f2:	4628      	mov	r0, r5
   1a6f4:	f7ff f888 	bl	19808 <notify_disconnected>
		bt_conn_unref(conn);
   1a6f8:	4628      	mov	r0, r5
   1a6fa:	f00c f8d6 	bl	268aa <bt_conn_unref>
		return;
   1a6fe:	e7f2      	b.n	1a6e6 <deferred_work+0x46>
		bt_le_create_conn_cancel();
   1a700:	f7fd fb4e 	bl	17da0 <bt_le_create_conn_cancel>
		return;
   1a704:	e7ef      	b.n	1a6e6 <deferred_work+0x46>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1a706:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   1a70a:	813b      	strh	r3, [r7, #8]
   1a70c:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   1a710:	817b      	strh	r3, [r7, #10]
   1a712:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   1a716:	81bb      	strh	r3, [r7, #12]
   1a718:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   1a71c:	81fb      	strh	r3, [r7, #14]
		err = send_conn_le_param_update(conn, param);
   1a71e:	f107 0108 	add.w	r1, r7, #8
   1a722:	4628      	mov	r0, r5
   1a724:	f7ff ff84 	bl	1a630 <send_conn_le_param_update>
		if (!err) {
   1a728:	4604      	mov	r4, r0
   1a72a:	b3b8      	cbz	r0, 1a79c <deferred_work+0xfc>
			LOG_WRN("Send LE param update failed (err %d)", err);
   1a72c:	466d      	mov	r5, sp
   1a72e:	b088      	sub	sp, #32
   1a730:	466b      	mov	r3, sp
   1a732:	f113 0210 	adds.w	r2, r3, #16
   1a736:	d03e      	beq.n	1a7b6 <deferred_work+0x116>
   1a738:	210c      	movs	r1, #12
   1a73a:	b14a      	cbz	r2, 1a750 <deferred_work+0xb0>
   1a73c:	4608      	mov	r0, r1
   1a73e:	2904      	cmp	r1, #4
   1a740:	dd03      	ble.n	1a74a <deferred_work+0xaa>
   1a742:	f8df c080 	ldr.w	ip, [pc, #128]	; 1a7c4 <deferred_work+0x124>
   1a746:	f8c3 c014 	str.w	ip, [r3, #20]
   1a74a:	2808      	cmp	r0, #8
   1a74c:	dd00      	ble.n	1a750 <deferred_work+0xb0>
   1a74e:	619c      	str	r4, [r3, #24]
   1a750:	290b      	cmp	r1, #11
   1a752:	dd33      	ble.n	1a7bc <deferred_work+0x11c>
   1a754:	240c      	movs	r4, #12
   1a756:	b13a      	cbz	r2, 1a768 <deferred_work+0xc8>
   1a758:	2103      	movs	r1, #3
   1a75a:	7139      	strb	r1, [r7, #4]
   1a75c:	2100      	movs	r1, #0
   1a75e:	7179      	strb	r1, [r7, #5]
   1a760:	71b9      	strb	r1, [r7, #6]
   1a762:	71f9      	strb	r1, [r7, #7]
   1a764:	6878      	ldr	r0, [r7, #4]
   1a766:	6118      	str	r0, [r3, #16]
   1a768:	2100      	movs	r1, #0
   1a76a:	f36f 0100 	bfc	r1, #0, #1
   1a76e:	f36f 0141 	bfc	r1, #1, #1
   1a772:	f36f 0182 	bfc	r1, #2, #1
   1a776:	f36f 01c5 	bfc	r1, #3, #3
   1a77a:	2302      	movs	r3, #2
   1a77c:	f363 1188 	bfi	r1, r3, #6, #3
   1a780:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1a784:	f364 2152 	bfi	r1, r4, #9, #10
   1a788:	f36f 41de 	bfc	r1, #19, #12
   1a78c:	f36f 71df 	bfc	r1, #31, #1
   1a790:	2300      	movs	r3, #0
   1a792:	480d      	ldr	r0, [pc, #52]	; (1a7c8 <deferred_work+0x128>)
   1a794:	f00b f80d 	bl	257b2 <z_impl_z_log_msg_static_create>
   1a798:	46ad      	mov	sp, r5
   1a79a:	e798      	b.n	1a6ce <deferred_work+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a79c:	f3bf 8f5b 	dmb	ish
   1a7a0:	e856 3f00 	ldrex	r3, [r6]
   1a7a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1a7a8:	e846 3200 	strex	r2, r3, [r6]
   1a7ac:	2a00      	cmp	r2, #0
   1a7ae:	d1f7      	bne.n	1a7a0 <deferred_work+0x100>
   1a7b0:	f3bf 8f5b 	dmb	ish
   1a7b4:	e78b      	b.n	1a6ce <deferred_work+0x2e>
   1a7b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1a7ba:	e7be      	b.n	1a73a <deferred_work+0x9a>
   1a7bc:	f06f 041b 	mvn.w	r4, #27
   1a7c0:	e7c9      	b.n	1a756 <deferred_work+0xb6>
   1a7c2:	bf00      	nop
   1a7c4:	0002ca68 	.word	0x0002ca68
   1a7c8:	0002b16c 	.word	0x0002b16c

0001a7cc <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   1a7cc:	b508      	push	{r3, lr}
   1a7ce:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1a7d0:	4801      	ldr	r0, [pc, #4]	; (1a7d8 <bt_conn_create_frag_timeout+0xc>)
   1a7d2:	f7ff fd61 	bl	1a298 <bt_conn_create_pdu_timeout>
#endif /* CONFIG_NET_BUF_LOG */
}
   1a7d6:	bd08      	pop	{r3, pc}
   1a7d8:	20000ab8 	.word	0x20000ab8

0001a7dc <create_frag>:
{
   1a7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a7de:	4606      	mov	r6, r0
   1a7e0:	460d      	mov	r5, r1
		frag = bt_conn_create_frag(0);
   1a7e2:	f04f 32ff 	mov.w	r2, #4294967295
   1a7e6:	f04f 33ff 	mov.w	r3, #4294967295
   1a7ea:	2000      	movs	r0, #0
   1a7ec:	f7ff ffee 	bl	1a7cc <bt_conn_create_frag_timeout>
   1a7f0:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1a7f2:	7ab3      	ldrb	r3, [r6, #10]
   1a7f4:	2b07      	cmp	r3, #7
   1a7f6:	d11a      	bne.n	1a82e <create_frag+0x52>
	tx_data(frag)->tx = NULL;
   1a7f8:	2300      	movs	r3, #0
   1a7fa:	6183      	str	r3, [r0, #24]
	return bt_dev.le.acl_mtu;
   1a7fc:	4b10      	ldr	r3, [pc, #64]	; (1a840 <create_frag+0x64>)
   1a7fe:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_tailroom(&buf->b);
   1a802:	f100 070c 	add.w	r7, r0, #12
   1a806:	4638      	mov	r0, r7
   1a808:	f00d fe04 	bl	28414 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1a80c:	4286      	cmp	r6, r0
   1a80e:	d212      	bcs.n	1a836 <create_frag+0x5a>
	return bt_dev.le.acl_mtu;
   1a810:	4b0b      	ldr	r3, [pc, #44]	; (1a840 <create_frag+0x64>)
   1a812:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1a816:	4632      	mov	r2, r6
   1a818:	f855 1f0c 	ldr.w	r1, [r5, #12]!
   1a81c:	4638      	mov	r0, r7
   1a81e:	f00d fdc2 	bl	283a6 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   1a822:	4631      	mov	r1, r6
   1a824:	4628      	mov	r0, r5
   1a826:	f00d fdd1 	bl	283cc <net_buf_simple_pull>
}
   1a82a:	4620      	mov	r0, r4
   1a82c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
   1a82e:	f00d fd6d 	bl	2830c <net_buf_unref>
		return NULL;
   1a832:	2400      	movs	r4, #0
   1a834:	e7f9      	b.n	1a82a <create_frag+0x4e>
	return net_buf_simple_tailroom(&buf->b);
   1a836:	4638      	mov	r0, r7
   1a838:	f00d fdec 	bl	28414 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1a83c:	b286      	uxth	r6, r0
   1a83e:	e7ea      	b.n	1a816 <create_frag+0x3a>
   1a840:	20000370 	.word	0x20000370

0001a844 <send_buf>:
{
   1a844:	b538      	push	{r3, r4, r5, lr}
   1a846:	4605      	mov	r5, r0
   1a848:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
   1a84a:	8a0b      	ldrh	r3, [r1, #16]
	return bt_dev.le.acl_mtu;
   1a84c:	4a1b      	ldr	r2, [pc, #108]	; (1a8bc <send_buf+0x78>)
   1a84e:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	if (buf->len <= conn_mtu(conn)) {
   1a852:	429a      	cmp	r2, r3
   1a854:	d21f      	bcs.n	1a896 <send_buf+0x52>
	frag = create_frag(conn, buf);
   1a856:	f7ff ffc1 	bl	1a7dc <create_frag>
	if (!frag) {
   1a85a:	4601      	mov	r1, r0
   1a85c:	b350      	cbz	r0, 1a8b4 <send_buf+0x70>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   1a85e:	2301      	movs	r3, #1
   1a860:	2200      	movs	r2, #0
   1a862:	4628      	mov	r0, r5
   1a864:	f7ff f836 	bl	198d4 <send_frag>
   1a868:	4603      	mov	r3, r0
   1a86a:	b1c8      	cbz	r0, 1a8a0 <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
   1a86c:	8a23      	ldrh	r3, [r4, #16]
	return bt_dev.le.acl_mtu;
   1a86e:	4a13      	ldr	r2, [pc, #76]	; (1a8bc <send_buf+0x78>)
   1a870:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	while (buf->len > conn_mtu(conn)) {
   1a874:	429a      	cmp	r2, r3
   1a876:	d215      	bcs.n	1a8a4 <send_buf+0x60>
		frag = create_frag(conn, buf);
   1a878:	4621      	mov	r1, r4
   1a87a:	4628      	mov	r0, r5
   1a87c:	f7ff ffae 	bl	1a7dc <create_frag>
		if (!frag) {
   1a880:	4601      	mov	r1, r0
   1a882:	b1c8      	cbz	r0, 1a8b8 <send_buf+0x74>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1a884:	2301      	movs	r3, #1
   1a886:	461a      	mov	r2, r3
   1a888:	4628      	mov	r0, r5
   1a88a:	f7ff f823 	bl	198d4 <send_frag>
   1a88e:	4603      	mov	r3, r0
   1a890:	2800      	cmp	r0, #0
   1a892:	d1eb      	bne.n	1a86c <send_buf+0x28>
   1a894:	e004      	b.n	1a8a0 <send_buf+0x5c>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   1a896:	2300      	movs	r3, #0
   1a898:	2202      	movs	r2, #2
   1a89a:	f7ff f81b 	bl	198d4 <send_frag>
   1a89e:	4603      	mov	r3, r0
}
   1a8a0:	4618      	mov	r0, r3
   1a8a2:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, FRAG_END, false);
   1a8a4:	2300      	movs	r3, #0
   1a8a6:	2203      	movs	r2, #3
   1a8a8:	4621      	mov	r1, r4
   1a8aa:	4628      	mov	r0, r5
   1a8ac:	f7ff f812 	bl	198d4 <send_frag>
   1a8b0:	4603      	mov	r3, r0
   1a8b2:	e7f5      	b.n	1a8a0 <send_buf+0x5c>
		return false;
   1a8b4:	2300      	movs	r3, #0
   1a8b6:	e7f3      	b.n	1a8a0 <send_buf+0x5c>
			return false;
   1a8b8:	2300      	movs	r3, #0
   1a8ba:	e7f1      	b.n	1a8a0 <send_buf+0x5c>
   1a8bc:	20000370 	.word	0x20000370

0001a8c0 <bt_conn_process_tx>:
{
   1a8c0:	b570      	push	{r4, r5, r6, lr}
   1a8c2:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   1a8c4:	7a83      	ldrb	r3, [r0, #10]
   1a8c6:	b923      	cbnz	r3, 1a8d2 <bt_conn_process_tx+0x12>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   1a8c8:	2106      	movs	r1, #6
   1a8ca:	3004      	adds	r0, #4
   1a8cc:	f00b fed8 	bl	26680 <atomic_test_and_clear_bit>
	if (conn->state == BT_CONN_DISCONNECTED &&
   1a8d0:	b968      	cbnz	r0, 1a8ee <bt_conn_process_tx+0x2e>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   1a8d2:	2200      	movs	r2, #0
   1a8d4:	2300      	movs	r3, #0
   1a8d6:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1a8da:	f00d fcdd 	bl	28298 <net_buf_get>
	BT_ASSERT(buf);
   1a8de:	4605      	mov	r5, r0
   1a8e0:	b148      	cbz	r0, 1a8f6 <bt_conn_process_tx+0x36>
	if (!send_buf(conn, buf)) {
   1a8e2:	4629      	mov	r1, r5
   1a8e4:	4620      	mov	r0, r4
   1a8e6:	f7ff ffad 	bl	1a844 <send_buf>
   1a8ea:	b190      	cbz	r0, 1a912 <bt_conn_process_tx+0x52>
}
   1a8ec:	bd70      	pop	{r4, r5, r6, pc}
		conn_cleanup(conn);
   1a8ee:	4620      	mov	r0, r4
   1a8f0:	f00b ff5b 	bl	267aa <conn_cleanup>
		return;
   1a8f4:	e7fa      	b.n	1a8ec <bt_conn_process_tx+0x2c>
	BT_ASSERT(buf);
   1a8f6:	f240 331a 	movw	r3, #794	; 0x31a
   1a8fa:	4a0c      	ldr	r2, [pc, #48]	; (1a92c <bt_conn_process_tx+0x6c>)
   1a8fc:	490c      	ldr	r1, [pc, #48]	; (1a930 <bt_conn_process_tx+0x70>)
   1a8fe:	480d      	ldr	r0, [pc, #52]	; (1a934 <bt_conn_process_tx+0x74>)
   1a900:	f00a fc3e 	bl	25180 <assert_print>
   1a904:	4040      	eors	r0, r0
   1a906:	f380 8811 	msr	BASEPRI, r0
   1a90a:	f04f 0003 	mov.w	r0, #3
   1a90e:	df02      	svc	2
   1a910:	e7e7      	b.n	1a8e2 <bt_conn_process_tx+0x22>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   1a912:	69ae      	ldr	r6, [r5, #24]
		tx_data(buf)->tx = NULL;
   1a914:	2300      	movs	r3, #0
   1a916:	61ab      	str	r3, [r5, #24]
		net_buf_unref(buf);
   1a918:	4628      	mov	r0, r5
   1a91a:	f00d fcf7 	bl	2830c <net_buf_unref>
		if (tx) {
   1a91e:	2e00      	cmp	r6, #0
   1a920:	d0e4      	beq.n	1a8ec <bt_conn_process_tx+0x2c>
			conn_tx_destroy(conn, tx);
   1a922:	4631      	mov	r1, r6
   1a924:	4620      	mov	r0, r4
   1a926:	f00b fe9e 	bl	26666 <conn_tx_destroy>
   1a92a:	e7df      	b.n	1a8ec <bt_conn_process_tx+0x2c>
   1a92c:	0002ca90 	.word	0x0002ca90
   1a930:	0002d210 	.word	0x0002d210
   1a934:	0002c278 	.word	0x0002c278

0001a938 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   1a938:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   1a93a:	4814      	ldr	r0, [pc, #80]	; (1a98c <bt_conn_init+0x54>)
   1a93c:	f00f fc56 	bl	2a1ec <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   1a940:	2400      	movs	r4, #0
   1a942:	e006      	b.n	1a952 <bt_conn_init+0x1a>
		k_fifo_put(&free_tx, &conn_tx[i]);
   1a944:	4912      	ldr	r1, [pc, #72]	; (1a990 <bt_conn_init+0x58>)
   1a946:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   1a94a:	4810      	ldr	r0, [pc, #64]	; (1a98c <bt_conn_init+0x54>)
   1a94c:	f00f fc5a 	bl	2a204 <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   1a950:	3401      	adds	r4, #1
   1a952:	2c02      	cmp	r4, #2
   1a954:	d9f6      	bls.n	1a944 <bt_conn_init+0xc>
	}

	bt_att_init();
   1a956:	f001 fd99 	bl	1c48c <bt_att_init>

	err = bt_smp_init();
   1a95a:	f00d fbb0 	bl	280be <bt_smp_init>
	if (err) {
   1a95e:	4605      	mov	r5, r0
   1a960:	b108      	cbz	r0, 1a966 <bt_conn_init+0x2e>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   1a962:	4628      	mov	r0, r5
   1a964:	bd38      	pop	{r3, r4, r5, pc}
	bt_l2cap_init();
   1a966:	f00c f91e 	bl	26ba6 <bt_l2cap_init>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1a96a:	462c      	mov	r4, r5
   1a96c:	e002      	b.n	1a974 <bt_conn_init+0x3c>
			bt_conn_unref(conn);
   1a96e:	f00b ff9c 	bl	268aa <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1a972:	3401      	adds	r4, #1
   1a974:	2c07      	cmp	r4, #7
   1a976:	d8f4      	bhi.n	1a962 <bt_conn_init+0x2a>
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1a978:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   1a97c:	4b05      	ldr	r3, [pc, #20]	; (1a994 <bt_conn_init+0x5c>)
   1a97e:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   1a982:	f00b ff6b 	bl	2685c <bt_conn_ref>
			if (!conn) {
   1a986:	2800      	cmp	r0, #0
   1a988:	d1f1      	bne.n	1a96e <bt_conn_init+0x36>
   1a98a:	e7f2      	b.n	1a972 <bt_conn_init+0x3a>
   1a98c:	20000a48 	.word	0x20000a48
   1a990:	2000578c 	.word	0x2000578c
   1a994:	200020e0 	.word	0x200020e0

0001a998 <get_ident>:

static uint8_t get_ident(void)
{
	static uint8_t ident;

	ident++;
   1a998:	4905      	ldr	r1, [pc, #20]	; (1a9b0 <get_ident+0x18>)
   1a99a:	780a      	ldrb	r2, [r1, #0]
   1a99c:	1c53      	adds	r3, r2, #1
   1a99e:	b2db      	uxtb	r3, r3
   1a9a0:	700b      	strb	r3, [r1, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
   1a9a2:	b90b      	cbnz	r3, 1a9a8 <get_ident+0x10>
		ident++;
   1a9a4:	3202      	adds	r2, #2
   1a9a6:	700a      	strb	r2, [r1, #0]
	}

	return ident;
}
   1a9a8:	4b01      	ldr	r3, [pc, #4]	; (1a9b0 <get_ident+0x18>)
   1a9aa:	7818      	ldrb	r0, [r3, #0]
   1a9ac:	4770      	bx	lr
   1a9ae:	bf00      	nop
   1a9b0:	200069b7 	.word	0x200069b7

0001a9b4 <l2cap_accept>:
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1a9b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a9b6:	b083      	sub	sp, #12
   1a9b8:	af00      	add	r7, sp, #0
		.recv = l2cap_recv,
	};

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1a9ba:	2300      	movs	r3, #0
   1a9bc:	2b07      	cmp	r3, #7
   1a9be:	d812      	bhi.n	1a9e6 <l2cap_accept+0x32>
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   1a9c0:	228c      	movs	r2, #140	; 0x8c
   1a9c2:	fb03 f202 	mul.w	r2, r3, r2
   1a9c6:	4c27      	ldr	r4, [pc, #156]	; (1aa64 <l2cap_accept+0xb0>)
   1a9c8:	58a2      	ldr	r2, [r4, r2]
   1a9ca:	b10a      	cbz	r2, 1a9d0 <l2cap_accept+0x1c>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1a9cc:	3301      	adds	r3, #1
   1a9ce:	e7f5      	b.n	1a9bc <l2cap_accept+0x8>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   1a9d0:	4a24      	ldr	r2, [pc, #144]	; (1aa64 <l2cap_accept+0xb0>)
   1a9d2:	208c      	movs	r0, #140	; 0x8c
   1a9d4:	fb00 2303 	mla	r3, r0, r3, r2
   1a9d8:	4a23      	ldr	r2, [pc, #140]	; (1aa68 <l2cap_accept+0xb4>)
   1a9da:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   1a9dc:	600b      	str	r3, [r1, #0]

		return 0;
   1a9de:	2000      	movs	r0, #0
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   1a9e0:	370c      	adds	r7, #12
   1a9e2:	46bd      	mov	sp, r7
   1a9e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_ERR("No available L2CAP context for conn %p", conn);
   1a9e6:	466d      	mov	r5, sp
   1a9e8:	b088      	sub	sp, #32
   1a9ea:	466b      	mov	r3, sp
   1a9ec:	f113 0210 	adds.w	r2, r3, #16
   1a9f0:	d031      	beq.n	1aa56 <l2cap_accept+0xa2>
   1a9f2:	210c      	movs	r1, #12
   1a9f4:	b13a      	cbz	r2, 1aa06 <l2cap_accept+0x52>
   1a9f6:	460c      	mov	r4, r1
   1a9f8:	2904      	cmp	r1, #4
   1a9fa:	dd01      	ble.n	1aa00 <l2cap_accept+0x4c>
   1a9fc:	4e1b      	ldr	r6, [pc, #108]	; (1aa6c <l2cap_accept+0xb8>)
   1a9fe:	615e      	str	r6, [r3, #20]
   1aa00:	2c08      	cmp	r4, #8
   1aa02:	dd00      	ble.n	1aa06 <l2cap_accept+0x52>
   1aa04:	6198      	str	r0, [r3, #24]
   1aa06:	290b      	cmp	r1, #11
   1aa08:	dd28      	ble.n	1aa5c <l2cap_accept+0xa8>
   1aa0a:	240c      	movs	r4, #12
   1aa0c:	b13a      	cbz	r2, 1aa1e <l2cap_accept+0x6a>
   1aa0e:	2103      	movs	r1, #3
   1aa10:	7139      	strb	r1, [r7, #4]
   1aa12:	2100      	movs	r1, #0
   1aa14:	7179      	strb	r1, [r7, #5]
   1aa16:	71b9      	strb	r1, [r7, #6]
   1aa18:	71f9      	strb	r1, [r7, #7]
   1aa1a:	6878      	ldr	r0, [r7, #4]
   1aa1c:	6118      	str	r0, [r3, #16]
   1aa1e:	2100      	movs	r1, #0
   1aa20:	f36f 0100 	bfc	r1, #0, #1
   1aa24:	f36f 0141 	bfc	r1, #1, #1
   1aa28:	f36f 0182 	bfc	r1, #2, #1
   1aa2c:	f36f 01c5 	bfc	r1, #3, #3
   1aa30:	2301      	movs	r3, #1
   1aa32:	f363 1188 	bfi	r1, r3, #6, #3
   1aa36:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1aa3a:	f363 2152 	bfi	r1, r3, #9, #10
   1aa3e:	f36f 41de 	bfc	r1, #19, #12
   1aa42:	f36f 71df 	bfc	r1, #31, #1
   1aa46:	2300      	movs	r3, #0
   1aa48:	4809      	ldr	r0, [pc, #36]	; (1aa70 <l2cap_accept+0xbc>)
   1aa4a:	f00a feb2 	bl	257b2 <z_impl_z_log_msg_static_create>
   1aa4e:	46ad      	mov	sp, r5
	return -ENOMEM;
   1aa50:	f06f 000b 	mvn.w	r0, #11
   1aa54:	e7c4      	b.n	1a9e0 <l2cap_accept+0x2c>
	LOG_ERR("No available L2CAP context for conn %p", conn);
   1aa56:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1aa5a:	e7cb      	b.n	1a9f4 <l2cap_accept+0x40>
   1aa5c:	f06f 041b 	mvn.w	r4, #27
   1aa60:	e7d4      	b.n	1aa0c <l2cap_accept+0x58>
   1aa62:	bf00      	nop
   1aa64:	200057c0 	.word	0x200057c0
   1aa68:	0002cc88 	.word	0x0002cc88
   1aa6c:	0002cae8 	.word	0x0002cae8
   1aa70:	0002b18c 	.word	0x0002b18c

0001aa74 <le_conn_param_rsp>:
	if (buf->len < sizeof(*rsp)) {
   1aa74:	8a0b      	ldrh	r3, [r1, #16]
   1aa76:	2b01      	cmp	r3, #1
   1aa78:	d900      	bls.n	1aa7c <le_conn_param_rsp+0x8>
   1aa7a:	4770      	bx	lr
{
   1aa7c:	b500      	push	{lr}
   1aa7e:	b089      	sub	sp, #36	; 0x24
		LOG_ERR("Too small LE conn param rsp");
   1aa80:	4b13      	ldr	r3, [pc, #76]	; (1aad0 <le_conn_param_rsp+0x5c>)
   1aa82:	9307      	str	r3, [sp, #28]
   1aa84:	2302      	movs	r3, #2
   1aa86:	f88d 3004 	strb.w	r3, [sp, #4]
   1aa8a:	2300      	movs	r3, #0
   1aa8c:	f88d 3005 	strb.w	r3, [sp, #5]
   1aa90:	f88d 3006 	strb.w	r3, [sp, #6]
   1aa94:	f88d 3007 	strb.w	r3, [sp, #7]
   1aa98:	9a01      	ldr	r2, [sp, #4]
   1aa9a:	9206      	str	r2, [sp, #24]
   1aa9c:	4619      	mov	r1, r3
   1aa9e:	f363 0100 	bfi	r1, r3, #0, #1
   1aaa2:	f363 0141 	bfi	r1, r3, #1, #1
   1aaa6:	f363 0182 	bfi	r1, r3, #2, #1
   1aaaa:	f363 01c5 	bfi	r1, r3, #3, #3
   1aaae:	2201      	movs	r2, #1
   1aab0:	f362 1188 	bfi	r1, r2, #6, #3
   1aab4:	2208      	movs	r2, #8
   1aab6:	f362 2152 	bfi	r1, r2, #9, #10
   1aaba:	f363 41de 	bfi	r1, r3, #19, #12
   1aabe:	f363 71df 	bfi	r1, r3, #31, #1
   1aac2:	aa06      	add	r2, sp, #24
   1aac4:	4803      	ldr	r0, [pc, #12]	; (1aad4 <le_conn_param_rsp+0x60>)
   1aac6:	f00a fe74 	bl	257b2 <z_impl_z_log_msg_static_create>
}
   1aaca:	b009      	add	sp, #36	; 0x24
   1aacc:	f85d fb04 	ldr.w	pc, [sp], #4
   1aad0:	0002cb10 	.word	0x0002cb10
   1aad4:	0002b18c 	.word	0x0002b18c

0001aad8 <l2cap_chan_add>:
{
   1aad8:	b510      	push	{r4, lr}
   1aada:	b088      	sub	sp, #32
	if (!le_chan) {
   1aadc:	b199      	cbz	r1, 1ab06 <l2cap_chan_add+0x2e>
   1aade:	460b      	mov	r3, r1
	atomic_clear(chan->status);
   1aae0:	3110      	adds	r1, #16
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1aae2:	2400      	movs	r4, #0
   1aae4:	f3bf 8f5b 	dmb	ish
   1aae8:	e851 cf00 	ldrex	ip, [r1]
   1aaec:	e841 4e00 	strex	lr, r4, [r1]
   1aaf0:	f1be 0f00 	cmp.w	lr, #0
   1aaf4:	d1f8      	bne.n	1aae8 <l2cap_chan_add+0x10>
   1aaf6:	f3bf 8f5b 	dmb	ish
	bt_l2cap_chan_add(conn, chan, destroy);
   1aafa:	4619      	mov	r1, r3
   1aafc:	f00b ff9d 	bl	26a3a <bt_l2cap_chan_add>
	return true;
   1ab00:	2001      	movs	r0, #1
}
   1ab02:	b008      	add	sp, #32
   1ab04:	bd10      	pop	{r4, pc}
		LOG_ERR("Unable to allocate L2CAP channel ID");
   1ab06:	4b14      	ldr	r3, [pc, #80]	; (1ab58 <l2cap_chan_add+0x80>)
   1ab08:	9307      	str	r3, [sp, #28]
   1ab0a:	2302      	movs	r3, #2
   1ab0c:	f88d 3004 	strb.w	r3, [sp, #4]
   1ab10:	2400      	movs	r4, #0
   1ab12:	f88d 4005 	strb.w	r4, [sp, #5]
   1ab16:	f88d 4006 	strb.w	r4, [sp, #6]
   1ab1a:	f88d 4007 	strb.w	r4, [sp, #7]
   1ab1e:	9b01      	ldr	r3, [sp, #4]
   1ab20:	9306      	str	r3, [sp, #24]
   1ab22:	4621      	mov	r1, r4
   1ab24:	f364 0100 	bfi	r1, r4, #0, #1
   1ab28:	f364 0141 	bfi	r1, r4, #1, #1
   1ab2c:	f364 0182 	bfi	r1, r4, #2, #1
   1ab30:	f364 01c5 	bfi	r1, r4, #3, #3
   1ab34:	2301      	movs	r3, #1
   1ab36:	f363 1188 	bfi	r1, r3, #6, #3
   1ab3a:	2308      	movs	r3, #8
   1ab3c:	f363 2152 	bfi	r1, r3, #9, #10
   1ab40:	f364 41de 	bfi	r1, r4, #19, #12
   1ab44:	f364 71df 	bfi	r1, r4, #31, #1
   1ab48:	4623      	mov	r3, r4
   1ab4a:	aa06      	add	r2, sp, #24
   1ab4c:	4803      	ldr	r0, [pc, #12]	; (1ab5c <l2cap_chan_add+0x84>)
   1ab4e:	f00a fe30 	bl	257b2 <z_impl_z_log_msg_static_create>
		return false;
   1ab52:	4620      	mov	r0, r4
   1ab54:	e7d5      	b.n	1ab02 <l2cap_chan_add+0x2a>
   1ab56:	bf00      	nop
   1ab58:	0002cb2c 	.word	0x0002cb2c
   1ab5c:	0002b18c 	.word	0x0002b18c

0001ab60 <bt_l2cap_connected>:
{
   1ab60:	b530      	push	{r4, r5, lr}
   1ab62:	b083      	sub	sp, #12
   1ab64:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1ab66:	4c19      	ldr	r4, [pc, #100]	; (1abcc <bt_l2cap_connected+0x6c>)
   1ab68:	e000      	b.n	1ab6c <bt_l2cap_connected+0xc>
   1ab6a:	340c      	adds	r4, #12
   1ab6c:	4b18      	ldr	r3, [pc, #96]	; (1abd0 <bt_l2cap_connected+0x70>)
   1ab6e:	429c      	cmp	r4, r3
   1ab70:	d22a      	bcs.n	1abc8 <bt_l2cap_connected+0x68>
		if (fchan->accept(conn, &chan) < 0) {
   1ab72:	6863      	ldr	r3, [r4, #4]
   1ab74:	a901      	add	r1, sp, #4
   1ab76:	4628      	mov	r0, r5
   1ab78:	4798      	blx	r3
   1ab7a:	2800      	cmp	r0, #0
   1ab7c:	dbf5      	blt.n	1ab6a <bt_l2cap_connected+0xa>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   1ab7e:	9901      	ldr	r1, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   1ab80:	8823      	ldrh	r3, [r4, #0]
   1ab82:	828b      	strh	r3, [r1, #20]
		le_chan->tx.cid = fchan->cid;
   1ab84:	848b      	strh	r3, [r1, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1ab86:	68a2      	ldr	r2, [r4, #8]
   1ab88:	4628      	mov	r0, r5
   1ab8a:	f7ff ffa5 	bl	1aad8 <l2cap_chan_add>
   1ab8e:	b1d8      	cbz	r0, 1abc8 <bt_l2cap_connected+0x68>
		if (chan->ops->connected) {
   1ab90:	9801      	ldr	r0, [sp, #4]
   1ab92:	6843      	ldr	r3, [r0, #4]
   1ab94:	681b      	ldr	r3, [r3, #0]
   1ab96:	b103      	cbz	r3, 1ab9a <bt_l2cap_connected+0x3a>
			chan->ops->connected(chan);
   1ab98:	4798      	blx	r3
		atomic_set_bit(chan->status, BT_L2CAP_STATUS_OUT);
   1ab9a:	9b01      	ldr	r3, [sp, #4]
   1ab9c:	3310      	adds	r3, #16
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ab9e:	f3bf 8f5b 	dmb	ish
   1aba2:	e853 1f00 	ldrex	r1, [r3]
   1aba6:	f041 0101 	orr.w	r1, r1, #1
   1abaa:	e843 1200 	strex	r2, r1, [r3]
   1abae:	2a00      	cmp	r2, #0
   1abb0:	d1f7      	bne.n	1aba2 <bt_l2cap_connected+0x42>
   1abb2:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   1abb6:	9801      	ldr	r0, [sp, #4]
   1abb8:	6843      	ldr	r3, [r0, #4]
   1abba:	69db      	ldr	r3, [r3, #28]
   1abbc:	2b00      	cmp	r3, #0
   1abbe:	d0d4      	beq.n	1ab6a <bt_l2cap_connected+0xa>
			chan->ops->status(chan, chan->status);
   1abc0:	f100 0110 	add.w	r1, r0, #16
   1abc4:	4798      	blx	r3
   1abc6:	e7d0      	b.n	1ab6a <bt_l2cap_connected+0xa>
}
   1abc8:	b003      	add	sp, #12
   1abca:	bd30      	pop	{r4, r5, pc}
   1abcc:	0002b10c 	.word	0x0002b10c
   1abd0:	0002b130 	.word	0x0002b130

0001abd4 <l2cap_create_le_sig_pdu>:
{
   1abd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1abd8:	b082      	sub	sp, #8
   1abda:	af00      	add	r7, sp, #0
   1abdc:	460c      	mov	r4, r1
   1abde:	4616      	mov	r6, r2
   1abe0:	461d      	mov	r5, r3
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
   1abe2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1abe6:	2300      	movs	r3, #0
   1abe8:	2100      	movs	r1, #0
   1abea:	4608      	mov	r0, r1
   1abec:	f00b ff50 	bl	26a90 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1abf0:	4680      	mov	r8, r0
   1abf2:	b158      	cbz	r0, 1ac0c <l2cap_create_le_sig_pdu+0x38>
	return net_buf_simple_add(&buf->b, len);
   1abf4:	2104      	movs	r1, #4
   1abf6:	300c      	adds	r0, #12
   1abf8:	f00d fbcf 	bl	2839a <net_buf_simple_add>
	hdr->code = code;
   1abfc:	7004      	strb	r4, [r0, #0]
	hdr->ident = ident;
   1abfe:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1ac00:	8045      	strh	r5, [r0, #2]
}
   1ac02:	4640      	mov	r0, r8
   1ac04:	3708      	adds	r7, #8
   1ac06:	46bd      	mov	sp, r7
   1ac08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   1ac0c:	466d      	mov	r5, sp
   1ac0e:	b088      	sub	sp, #32
   1ac10:	466b      	mov	r3, sp
   1ac12:	f113 0210 	adds.w	r2, r3, #16
   1ac16:	d02f      	beq.n	1ac78 <l2cap_create_le_sig_pdu+0xa4>
   1ac18:	210c      	movs	r1, #12
   1ac1a:	b13a      	cbz	r2, 1ac2c <l2cap_create_le_sig_pdu+0x58>
   1ac1c:	4608      	mov	r0, r1
   1ac1e:	2904      	cmp	r1, #4
   1ac20:	dd01      	ble.n	1ac26 <l2cap_create_le_sig_pdu+0x52>
   1ac22:	4e18      	ldr	r6, [pc, #96]	; (1ac84 <l2cap_create_le_sig_pdu+0xb0>)
   1ac24:	615e      	str	r6, [r3, #20]
   1ac26:	2808      	cmp	r0, #8
   1ac28:	dd00      	ble.n	1ac2c <l2cap_create_le_sig_pdu+0x58>
   1ac2a:	619c      	str	r4, [r3, #24]
   1ac2c:	290b      	cmp	r1, #11
   1ac2e:	dd26      	ble.n	1ac7e <l2cap_create_le_sig_pdu+0xaa>
   1ac30:	240c      	movs	r4, #12
   1ac32:	b13a      	cbz	r2, 1ac44 <l2cap_create_le_sig_pdu+0x70>
   1ac34:	2103      	movs	r1, #3
   1ac36:	7139      	strb	r1, [r7, #4]
   1ac38:	2100      	movs	r1, #0
   1ac3a:	7179      	strb	r1, [r7, #5]
   1ac3c:	71b9      	strb	r1, [r7, #6]
   1ac3e:	71f9      	strb	r1, [r7, #7]
   1ac40:	6878      	ldr	r0, [r7, #4]
   1ac42:	6118      	str	r0, [r3, #16]
   1ac44:	2100      	movs	r1, #0
   1ac46:	f36f 0100 	bfc	r1, #0, #1
   1ac4a:	f36f 0141 	bfc	r1, #1, #1
   1ac4e:	f36f 0182 	bfc	r1, #2, #1
   1ac52:	f36f 01c5 	bfc	r1, #3, #3
   1ac56:	2301      	movs	r3, #1
   1ac58:	f363 1188 	bfi	r1, r3, #6, #3
   1ac5c:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1ac60:	f364 2152 	bfi	r1, r4, #9, #10
   1ac64:	f36f 41de 	bfc	r1, #19, #12
   1ac68:	f36f 71df 	bfc	r1, #31, #1
   1ac6c:	2300      	movs	r3, #0
   1ac6e:	4806      	ldr	r0, [pc, #24]	; (1ac88 <l2cap_create_le_sig_pdu+0xb4>)
   1ac70:	f00a fd9f 	bl	257b2 <z_impl_z_log_msg_static_create>
   1ac74:	46ad      	mov	sp, r5
		return NULL;
   1ac76:	e7c4      	b.n	1ac02 <l2cap_create_le_sig_pdu+0x2e>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   1ac78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1ac7c:	e7cd      	b.n	1ac1a <l2cap_create_le_sig_pdu+0x46>
   1ac7e:	f06f 041b 	mvn.w	r4, #27
   1ac82:	e7d6      	b.n	1ac32 <l2cap_create_le_sig_pdu+0x5e>
   1ac84:	0002cb50 	.word	0x0002cb50
   1ac88:	0002b18c 	.word	0x0002b18c

0001ac8c <le_conn_param_update_req>:
{
   1ac8c:	b570      	push	{r4, r5, r6, lr}
   1ac8e:	b092      	sub	sp, #72	; 0x48
	struct bt_conn *conn = l2cap->chan.chan.conn;
   1ac90:	6804      	ldr	r4, [r0, #0]
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   1ac92:	68d3      	ldr	r3, [r2, #12]
	if (buf->len < sizeof(*req)) {
   1ac94:	8a10      	ldrh	r0, [r2, #16]
   1ac96:	2807      	cmp	r0, #7
   1ac98:	d936      	bls.n	1ad08 <le_conn_param_update_req+0x7c>
   1ac9a:	4694      	mov	ip, r2
	if (conn->state != BT_CONN_CONNECTED) {
   1ac9c:	7aa2      	ldrb	r2, [r4, #10]
   1ac9e:	2a07      	cmp	r2, #7
   1aca0:	d158      	bne.n	1ad54 <le_conn_param_update_req+0xc8>
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   1aca2:	78e2      	ldrb	r2, [r4, #3]
   1aca4:	2a00      	cmp	r2, #0
   1aca6:	d17b      	bne.n	1ada0 <le_conn_param_update_req+0x114>
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   1aca8:	881a      	ldrh	r2, [r3, #0]
   1acaa:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   1acae:	885a      	ldrh	r2, [r3, #2]
   1acb0:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(req->latency);
   1acb4:	889a      	ldrh	r2, [r3, #4]
   1acb6:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(req->timeout);
   1acba:	88db      	ldrh	r3, [r3, #6]
   1acbc:	f8ad 3016 	strh.w	r3, [sp, #22]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1acc0:	2302      	movs	r3, #2
   1acc2:	460a      	mov	r2, r1
   1acc4:	2113      	movs	r1, #19
   1acc6:	4660      	mov	r0, ip
   1acc8:	f7ff ff84 	bl	1abd4 <l2cap_create_le_sig_pdu>
	if (!buf) {
   1accc:	4606      	mov	r6, r0
   1acce:	2800      	cmp	r0, #0
   1acd0:	d064      	beq.n	1ad9c <le_conn_param_update_req+0x110>
	accepted = le_param_req(conn, &param);
   1acd2:	a904      	add	r1, sp, #16
   1acd4:	4620      	mov	r0, r4
   1acd6:	f7ff fb6d 	bl	1a3b4 <le_param_req>
   1acda:	4605      	mov	r5, r0
   1acdc:	2102      	movs	r1, #2
   1acde:	f106 000c 	add.w	r0, r6, #12
   1ace2:	f00d fb5a 	bl	2839a <net_buf_simple_add>
	if (accepted) {
   1ace6:	2d00      	cmp	r5, #0
   1ace8:	d061      	beq.n	1adae <le_conn_param_update_req+0x122>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   1acea:	2300      	movs	r3, #0
   1acec:	7003      	strb	r3, [r0, #0]
   1acee:	7043      	strb	r3, [r0, #1]
	l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
   1acf0:	4632      	mov	r2, r6
   1acf2:	2105      	movs	r1, #5
   1acf4:	4620      	mov	r0, r4
   1acf6:	f00b fee5 	bl	26ac4 <l2cap_send>
	if (accepted) {
   1acfa:	2d00      	cmp	r5, #0
   1acfc:	d04e      	beq.n	1ad9c <le_conn_param_update_req+0x110>
		bt_conn_le_conn_update(conn, &param);
   1acfe:	a904      	add	r1, sp, #16
   1ad00:	4620      	mov	r0, r4
   1ad02:	f00b fe55 	bl	269b0 <bt_conn_le_conn_update>
   1ad06:	e049      	b.n	1ad9c <le_conn_param_update_req+0x110>
		LOG_ERR("Too small LE conn update param req");
   1ad08:	4b2b      	ldr	r3, [pc, #172]	; (1adb8 <le_conn_param_update_req+0x12c>)
   1ad0a:	9311      	str	r3, [sp, #68]	; 0x44
   1ad0c:	2302      	movs	r3, #2
   1ad0e:	f88d 300c 	strb.w	r3, [sp, #12]
   1ad12:	2300      	movs	r3, #0
   1ad14:	f88d 300d 	strb.w	r3, [sp, #13]
   1ad18:	f88d 300e 	strb.w	r3, [sp, #14]
   1ad1c:	f88d 300f 	strb.w	r3, [sp, #15]
   1ad20:	9a03      	ldr	r2, [sp, #12]
   1ad22:	9210      	str	r2, [sp, #64]	; 0x40
   1ad24:	4619      	mov	r1, r3
   1ad26:	f363 0100 	bfi	r1, r3, #0, #1
   1ad2a:	f363 0141 	bfi	r1, r3, #1, #1
   1ad2e:	f363 0182 	bfi	r1, r3, #2, #1
   1ad32:	f363 01c5 	bfi	r1, r3, #3, #3
   1ad36:	2201      	movs	r2, #1
   1ad38:	f362 1188 	bfi	r1, r2, #6, #3
   1ad3c:	2208      	movs	r2, #8
   1ad3e:	f362 2152 	bfi	r1, r2, #9, #10
   1ad42:	f363 41de 	bfi	r1, r3, #19, #12
   1ad46:	f363 71df 	bfi	r1, r3, #31, #1
   1ad4a:	aa10      	add	r2, sp, #64	; 0x40
   1ad4c:	481b      	ldr	r0, [pc, #108]	; (1adbc <le_conn_param_update_req+0x130>)
   1ad4e:	f00a fd30 	bl	257b2 <z_impl_z_log_msg_static_create>
		return;
   1ad52:	e023      	b.n	1ad9c <le_conn_param_update_req+0x110>
		LOG_WRN("Not connected");
   1ad54:	4b1a      	ldr	r3, [pc, #104]	; (1adc0 <le_conn_param_update_req+0x134>)
   1ad56:	930b      	str	r3, [sp, #44]	; 0x2c
   1ad58:	2202      	movs	r2, #2
   1ad5a:	f88d 200c 	strb.w	r2, [sp, #12]
   1ad5e:	2300      	movs	r3, #0
   1ad60:	f88d 300d 	strb.w	r3, [sp, #13]
   1ad64:	f88d 300e 	strb.w	r3, [sp, #14]
   1ad68:	f88d 300f 	strb.w	r3, [sp, #15]
   1ad6c:	9903      	ldr	r1, [sp, #12]
   1ad6e:	910a      	str	r1, [sp, #40]	; 0x28
   1ad70:	4619      	mov	r1, r3
   1ad72:	f363 0100 	bfi	r1, r3, #0, #1
   1ad76:	f363 0141 	bfi	r1, r3, #1, #1
   1ad7a:	f363 0182 	bfi	r1, r3, #2, #1
   1ad7e:	f363 01c5 	bfi	r1, r3, #3, #3
   1ad82:	f362 1188 	bfi	r1, r2, #6, #3
   1ad86:	2208      	movs	r2, #8
   1ad88:	f362 2152 	bfi	r1, r2, #9, #10
   1ad8c:	f363 41de 	bfi	r1, r3, #19, #12
   1ad90:	f363 71df 	bfi	r1, r3, #31, #1
   1ad94:	aa0a      	add	r2, sp, #40	; 0x28
   1ad96:	4809      	ldr	r0, [pc, #36]	; (1adbc <le_conn_param_update_req+0x130>)
   1ad98:	f00a fd0b 	bl	257b2 <z_impl_z_log_msg_static_create>
}
   1ad9c:	b012      	add	sp, #72	; 0x48
   1ad9e:	bd70      	pop	{r4, r5, r6, pc}
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   1ada0:	2200      	movs	r2, #0
   1ada2:	9200      	str	r2, [sp, #0]
   1ada4:	4613      	mov	r3, r2
   1ada6:	4620      	mov	r0, r4
   1ada8:	f00b fe9a 	bl	26ae0 <l2cap_send_reject>
		return;
   1adac:	e7f6      	b.n	1ad9c <le_conn_param_update_req+0x110>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
   1adae:	2301      	movs	r3, #1
   1adb0:	7003      	strb	r3, [r0, #0]
   1adb2:	2300      	movs	r3, #0
   1adb4:	7043      	strb	r3, [r0, #1]
   1adb6:	e79b      	b.n	1acf0 <le_conn_param_update_req+0x64>
   1adb8:	0002cb78 	.word	0x0002cb78
   1adbc:	0002b18c 	.word	0x0002b18c
   1adc0:	0002cb9c 	.word	0x0002cb9c

0001adc4 <l2cap_recv>:
{
   1adc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1adc6:	b091      	sub	sp, #68	; 0x44
   1adc8:	af02      	add	r7, sp, #8
	if (buf->len < sizeof(*hdr)) {
   1adca:	8a0b      	ldrh	r3, [r1, #16]
   1adcc:	2b03      	cmp	r3, #3
   1adce:	d924      	bls.n	1ae1a <l2cap_recv+0x56>
   1add0:	4606      	mov	r6, r0
   1add2:	460c      	mov	r4, r1
	return net_buf_simple_pull_mem(&buf->b, len);
   1add4:	2104      	movs	r1, #4
   1add6:	f104 000c 	add.w	r0, r4, #12
   1adda:	f00d faff 	bl	283dc <net_buf_simple_pull_mem>
   1adde:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   1ade0:	8841      	ldrh	r1, [r0, #2]
	if (buf->len != len) {
   1ade2:	8a20      	ldrh	r0, [r4, #16]
   1ade4:	4288      	cmp	r0, r1
   1ade6:	d069      	beq.n	1aebc <l2cap_recv+0xf8>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1ade8:	466c      	mov	r4, sp
   1adea:	b088      	sub	sp, #32
   1adec:	ab02      	add	r3, sp, #8
   1adee:	f113 0210 	adds.w	r2, r3, #16
   1adf2:	d038      	beq.n	1ae66 <l2cap_recv+0xa2>
   1adf4:	2510      	movs	r5, #16
   1adf6:	b162      	cbz	r2, 1ae12 <l2cap_recv+0x4e>
   1adf8:	462e      	mov	r6, r5
   1adfa:	2d04      	cmp	r5, #4
   1adfc:	dd03      	ble.n	1ae06 <l2cap_recv+0x42>
   1adfe:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 1afbc <l2cap_recv+0x1f8>
   1ae02:	f8c3 c014 	str.w	ip, [r3, #20]
   1ae06:	2e08      	cmp	r6, #8
   1ae08:	dd00      	ble.n	1ae0c <l2cap_recv+0x48>
   1ae0a:	6198      	str	r0, [r3, #24]
   1ae0c:	2e0c      	cmp	r6, #12
   1ae0e:	dd2d      	ble.n	1ae6c <l2cap_recv+0xa8>
   1ae10:	61d9      	str	r1, [r3, #28]
   1ae12:	2d0f      	cmp	r5, #15
   1ae14:	dd4f      	ble.n	1aeb6 <l2cap_recv+0xf2>
   1ae16:	2510      	movs	r5, #16
   1ae18:	e02a      	b.n	1ae70 <l2cap_recv+0xac>
		LOG_ERR("Too small L2CAP signaling PDU");
   1ae1a:	4b69      	ldr	r3, [pc, #420]	; (1afc0 <l2cap_recv+0x1fc>)
   1ae1c:	637b      	str	r3, [r7, #52]	; 0x34
   1ae1e:	2302      	movs	r3, #2
   1ae20:	713b      	strb	r3, [r7, #4]
   1ae22:	2300      	movs	r3, #0
   1ae24:	717b      	strb	r3, [r7, #5]
   1ae26:	71bb      	strb	r3, [r7, #6]
   1ae28:	71fb      	strb	r3, [r7, #7]
   1ae2a:	687a      	ldr	r2, [r7, #4]
   1ae2c:	633a      	str	r2, [r7, #48]	; 0x30
   1ae2e:	4619      	mov	r1, r3
   1ae30:	f363 0100 	bfi	r1, r3, #0, #1
   1ae34:	f363 0141 	bfi	r1, r3, #1, #1
   1ae38:	f363 0182 	bfi	r1, r3, #2, #1
   1ae3c:	f363 01c5 	bfi	r1, r3, #3, #3
   1ae40:	2201      	movs	r2, #1
   1ae42:	f362 1188 	bfi	r1, r2, #6, #3
   1ae46:	2208      	movs	r2, #8
   1ae48:	f362 2152 	bfi	r1, r2, #9, #10
   1ae4c:	f363 41de 	bfi	r1, r3, #19, #12
   1ae50:	f363 71df 	bfi	r1, r3, #31, #1
   1ae54:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1ae58:	485a      	ldr	r0, [pc, #360]	; (1afc4 <l2cap_recv+0x200>)
   1ae5a:	f00a fcaa 	bl	257b2 <z_impl_z_log_msg_static_create>
}
   1ae5e:	2000      	movs	r0, #0
   1ae60:	373c      	adds	r7, #60	; 0x3c
   1ae62:	46bd      	mov	sp, r7
   1ae64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1ae66:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   1ae6a:	e7c4      	b.n	1adf6 <l2cap_recv+0x32>
   1ae6c:	f06f 051b 	mvn.w	r5, #27
   1ae70:	b13a      	cbz	r2, 1ae82 <l2cap_recv+0xbe>
   1ae72:	2104      	movs	r1, #4
   1ae74:	7139      	strb	r1, [r7, #4]
   1ae76:	2100      	movs	r1, #0
   1ae78:	7179      	strb	r1, [r7, #5]
   1ae7a:	71b9      	strb	r1, [r7, #6]
   1ae7c:	71f9      	strb	r1, [r7, #7]
   1ae7e:	6878      	ldr	r0, [r7, #4]
   1ae80:	6118      	str	r0, [r3, #16]
   1ae82:	2100      	movs	r1, #0
   1ae84:	f36f 0100 	bfc	r1, #0, #1
   1ae88:	f36f 0141 	bfc	r1, #1, #1
   1ae8c:	f36f 0182 	bfc	r1, #2, #1
   1ae90:	f36f 01c5 	bfc	r1, #3, #3
   1ae94:	2301      	movs	r3, #1
   1ae96:	f363 1188 	bfi	r1, r3, #6, #3
   1ae9a:	f405 737d 	and.w	r3, r5, #1012	; 0x3f4
   1ae9e:	f363 2152 	bfi	r1, r3, #9, #10
   1aea2:	f36f 41de 	bfc	r1, #19, #12
   1aea6:	f36f 71df 	bfc	r1, #31, #1
   1aeaa:	2300      	movs	r3, #0
   1aeac:	4845      	ldr	r0, [pc, #276]	; (1afc4 <l2cap_recv+0x200>)
   1aeae:	f00a fc80 	bl	257b2 <z_impl_z_log_msg_static_create>
   1aeb2:	46a5      	mov	sp, r4
		return 0;
   1aeb4:	e7d3      	b.n	1ae5e <l2cap_recv+0x9a>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1aeb6:	f06f 051b 	mvn.w	r5, #27
   1aeba:	e7d9      	b.n	1ae70 <l2cap_recv+0xac>
	if (!hdr->ident) {
   1aebc:	7869      	ldrb	r1, [r5, #1]
   1aebe:	b1e9      	cbz	r1, 1aefc <l2cap_recv+0x138>
	switch (hdr->code) {
   1aec0:	782b      	ldrb	r3, [r5, #0]
   1aec2:	2b12      	cmp	r3, #18
   1aec4:	d042      	beq.n	1af4c <l2cap_recv+0x188>
   1aec6:	2b13      	cmp	r3, #19
   1aec8:	d03b      	beq.n	1af42 <l2cap_recv+0x17e>
   1aeca:	2b01      	cmp	r3, #1
   1aecc:	d0c7      	beq.n	1ae5e <l2cap_recv+0x9a>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1aece:	466c      	mov	r4, sp
   1aed0:	b088      	sub	sp, #32
   1aed2:	a902      	add	r1, sp, #8
   1aed4:	f111 0210 	adds.w	r2, r1, #16
   1aed8:	d03d      	beq.n	1af56 <l2cap_recv+0x192>
   1aeda:	200c      	movs	r0, #12
   1aedc:	b152      	cbz	r2, 1aef4 <l2cap_recv+0x130>
   1aede:	4684      	mov	ip, r0
   1aee0:	2804      	cmp	r0, #4
   1aee2:	dd03      	ble.n	1aeec <l2cap_recv+0x128>
   1aee4:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 1afc8 <l2cap_recv+0x204>
   1aee8:	f8c1 e014 	str.w	lr, [r1, #20]
   1aeec:	f1bc 0f08 	cmp.w	ip, #8
   1aef0:	dd34      	ble.n	1af5c <l2cap_recv+0x198>
   1aef2:	618b      	str	r3, [r1, #24]
   1aef4:	280b      	cmp	r0, #11
   1aef6:	dd5d      	ble.n	1afb4 <l2cap_recv+0x1f0>
   1aef8:	230c      	movs	r3, #12
   1aefa:	e031      	b.n	1af60 <l2cap_recv+0x19c>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   1aefc:	4b33      	ldr	r3, [pc, #204]	; (1afcc <l2cap_recv+0x208>)
   1aefe:	61fb      	str	r3, [r7, #28]
   1af00:	2302      	movs	r3, #2
   1af02:	713b      	strb	r3, [r7, #4]
   1af04:	2300      	movs	r3, #0
   1af06:	717b      	strb	r3, [r7, #5]
   1af08:	71bb      	strb	r3, [r7, #6]
   1af0a:	71fb      	strb	r3, [r7, #7]
   1af0c:	687a      	ldr	r2, [r7, #4]
   1af0e:	61ba      	str	r2, [r7, #24]
   1af10:	4619      	mov	r1, r3
   1af12:	f363 0100 	bfi	r1, r3, #0, #1
   1af16:	f363 0141 	bfi	r1, r3, #1, #1
   1af1a:	f363 0182 	bfi	r1, r3, #2, #1
   1af1e:	f363 01c5 	bfi	r1, r3, #3, #3
   1af22:	2201      	movs	r2, #1
   1af24:	f362 1188 	bfi	r1, r2, #6, #3
   1af28:	2208      	movs	r2, #8
   1af2a:	f362 2152 	bfi	r1, r2, #9, #10
   1af2e:	f363 41de 	bfi	r1, r3, #19, #12
   1af32:	f363 71df 	bfi	r1, r3, #31, #1
   1af36:	f107 0218 	add.w	r2, r7, #24
   1af3a:	4822      	ldr	r0, [pc, #136]	; (1afc4 <l2cap_recv+0x200>)
   1af3c:	f00a fc39 	bl	257b2 <z_impl_z_log_msg_static_create>
		return 0;
   1af40:	e78d      	b.n	1ae5e <l2cap_recv+0x9a>
		le_conn_param_rsp(l2cap, buf);
   1af42:	4621      	mov	r1, r4
   1af44:	4630      	mov	r0, r6
   1af46:	f7ff fd95 	bl	1aa74 <le_conn_param_rsp>
		break;
   1af4a:	e788      	b.n	1ae5e <l2cap_recv+0x9a>
			le_conn_param_update_req(l2cap, hdr->ident, buf);
   1af4c:	4622      	mov	r2, r4
   1af4e:	4630      	mov	r0, r6
   1af50:	f7ff fe9c 	bl	1ac8c <le_conn_param_update_req>
			break;
   1af54:	e783      	b.n	1ae5e <l2cap_recv+0x9a>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1af56:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1af5a:	e7bf      	b.n	1aedc <l2cap_recv+0x118>
   1af5c:	f06f 031b 	mvn.w	r3, #27
   1af60:	b13a      	cbz	r2, 1af72 <l2cap_recv+0x1ae>
   1af62:	2003      	movs	r0, #3
   1af64:	7138      	strb	r0, [r7, #4]
   1af66:	2000      	movs	r0, #0
   1af68:	7178      	strb	r0, [r7, #5]
   1af6a:	71b8      	strb	r0, [r7, #6]
   1af6c:	71f8      	strb	r0, [r7, #7]
   1af6e:	6878      	ldr	r0, [r7, #4]
   1af70:	6108      	str	r0, [r1, #16]
   1af72:	2100      	movs	r1, #0
   1af74:	f36f 0100 	bfc	r1, #0, #1
   1af78:	f36f 0141 	bfc	r1, #1, #1
   1af7c:	f36f 0182 	bfc	r1, #2, #1
   1af80:	f36f 01c5 	bfc	r1, #3, #3
   1af84:	2002      	movs	r0, #2
   1af86:	f360 1188 	bfi	r1, r0, #6, #3
   1af8a:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   1af8e:	f363 2152 	bfi	r1, r3, #9, #10
   1af92:	f36f 41de 	bfc	r1, #19, #12
   1af96:	f36f 71df 	bfc	r1, #31, #1
   1af9a:	2300      	movs	r3, #0
   1af9c:	4809      	ldr	r0, [pc, #36]	; (1afc4 <l2cap_recv+0x200>)
   1af9e:	f00a fc08 	bl	257b2 <z_impl_z_log_msg_static_create>
   1afa2:	46a5      	mov	sp, r4
		l2cap_send_reject(chan->conn, hdr->ident,
   1afa4:	7869      	ldrb	r1, [r5, #1]
   1afa6:	6830      	ldr	r0, [r6, #0]
   1afa8:	2200      	movs	r2, #0
   1afaa:	9200      	str	r2, [sp, #0]
   1afac:	4613      	mov	r3, r2
   1afae:	f00b fd97 	bl	26ae0 <l2cap_send_reject>
		break;
   1afb2:	e754      	b.n	1ae5e <l2cap_recv+0x9a>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1afb4:	f06f 031b 	mvn.w	r3, #27
   1afb8:	e7d2      	b.n	1af60 <l2cap_recv+0x19c>
   1afba:	bf00      	nop
   1afbc:	0002cbcc 	.word	0x0002cbcc
   1afc0:	0002cbac 	.word	0x0002cbac
   1afc4:	0002b18c 	.word	0x0002b18c
   1afc8:	0002cc14 	.word	0x0002cc14
   1afcc:	0002cbf0 	.word	0x0002cbf0

0001afd0 <bt_l2cap_recv>:
{
   1afd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1afd4:	b088      	sub	sp, #32
   1afd6:	af00      	add	r7, sp, #0
   1afd8:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1afda:	8a0b      	ldrh	r3, [r1, #16]
   1afdc:	2b03      	cmp	r3, #3
   1afde:	d915      	bls.n	1b00c <bt_l2cap_recv+0x3c>
   1afe0:	4606      	mov	r6, r0
   1afe2:	4615      	mov	r5, r2
   1afe4:	2104      	movs	r1, #4
   1afe6:	f104 000c 	add.w	r0, r4, #12
   1afea:	f00d f9f7 	bl	283dc <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   1afee:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1aff2:	4641      	mov	r1, r8
   1aff4:	4630      	mov	r0, r6
   1aff6:	f00b fd97 	bl	26b28 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1affa:	b368      	cbz	r0, 1b058 <bt_l2cap_recv+0x88>
	l2cap_chan_recv(chan, buf, complete);
   1affc:	462a      	mov	r2, r5
   1affe:	4621      	mov	r1, r4
   1b000:	f00b fcff 	bl	26a02 <l2cap_chan_recv>
}
   1b004:	3720      	adds	r7, #32
   1b006:	46bd      	mov	sp, r7
   1b008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Too small L2CAP PDU received");
   1b00c:	4b34      	ldr	r3, [pc, #208]	; (1b0e0 <bt_l2cap_recv+0x110>)
   1b00e:	61fb      	str	r3, [r7, #28]
   1b010:	2302      	movs	r3, #2
   1b012:	713b      	strb	r3, [r7, #4]
   1b014:	2300      	movs	r3, #0
   1b016:	717b      	strb	r3, [r7, #5]
   1b018:	71bb      	strb	r3, [r7, #6]
   1b01a:	71fb      	strb	r3, [r7, #7]
   1b01c:	687a      	ldr	r2, [r7, #4]
   1b01e:	61ba      	str	r2, [r7, #24]
   1b020:	4619      	mov	r1, r3
   1b022:	f363 0100 	bfi	r1, r3, #0, #1
   1b026:	f363 0141 	bfi	r1, r3, #1, #1
   1b02a:	f363 0182 	bfi	r1, r3, #2, #1
   1b02e:	f363 01c5 	bfi	r1, r3, #3, #3
   1b032:	2201      	movs	r2, #1
   1b034:	f362 1188 	bfi	r1, r2, #6, #3
   1b038:	2208      	movs	r2, #8
   1b03a:	f362 2152 	bfi	r1, r2, #9, #10
   1b03e:	f363 41de 	bfi	r1, r3, #19, #12
   1b042:	f363 71df 	bfi	r1, r3, #31, #1
   1b046:	f107 0218 	add.w	r2, r7, #24
   1b04a:	4826      	ldr	r0, [pc, #152]	; (1b0e4 <bt_l2cap_recv+0x114>)
   1b04c:	f00a fbb1 	bl	257b2 <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   1b050:	4620      	mov	r0, r4
   1b052:	f00d f95b 	bl	2830c <net_buf_unref>
		return;
   1b056:	e7d5      	b.n	1b004 <bt_l2cap_recv+0x34>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   1b058:	466d      	mov	r5, sp
   1b05a:	b088      	sub	sp, #32
   1b05c:	466b      	mov	r3, sp
   1b05e:	f113 0210 	adds.w	r2, r3, #16
   1b062:	d00e      	beq.n	1b082 <bt_l2cap_recv+0xb2>
   1b064:	210c      	movs	r1, #12
   1b066:	b142      	cbz	r2, 1b07a <bt_l2cap_recv+0xaa>
   1b068:	4608      	mov	r0, r1
   1b06a:	2904      	cmp	r1, #4
   1b06c:	dd01      	ble.n	1b072 <bt_l2cap_recv+0xa2>
   1b06e:	4e1e      	ldr	r6, [pc, #120]	; (1b0e8 <bt_l2cap_recv+0x118>)
   1b070:	615e      	str	r6, [r3, #20]
   1b072:	2808      	cmp	r0, #8
   1b074:	dd08      	ble.n	1b088 <bt_l2cap_recv+0xb8>
   1b076:	f8c3 8018 	str.w	r8, [r3, #24]
   1b07a:	290b      	cmp	r1, #11
   1b07c:	dd2c      	ble.n	1b0d8 <bt_l2cap_recv+0x108>
   1b07e:	260c      	movs	r6, #12
   1b080:	e004      	b.n	1b08c <bt_l2cap_recv+0xbc>
   1b082:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b086:	e7ee      	b.n	1b066 <bt_l2cap_recv+0x96>
   1b088:	f06f 061b 	mvn.w	r6, #27
   1b08c:	b13a      	cbz	r2, 1b09e <bt_l2cap_recv+0xce>
   1b08e:	2103      	movs	r1, #3
   1b090:	7139      	strb	r1, [r7, #4]
   1b092:	2100      	movs	r1, #0
   1b094:	7179      	strb	r1, [r7, #5]
   1b096:	71b9      	strb	r1, [r7, #6]
   1b098:	71f9      	strb	r1, [r7, #7]
   1b09a:	6878      	ldr	r0, [r7, #4]
   1b09c:	6118      	str	r0, [r3, #16]
   1b09e:	2100      	movs	r1, #0
   1b0a0:	f36f 0100 	bfc	r1, #0, #1
   1b0a4:	f36f 0141 	bfc	r1, #1, #1
   1b0a8:	f36f 0182 	bfc	r1, #2, #1
   1b0ac:	f36f 01c5 	bfc	r1, #3, #3
   1b0b0:	2302      	movs	r3, #2
   1b0b2:	f363 1188 	bfi	r1, r3, #6, #3
   1b0b6:	f406 737b 	and.w	r3, r6, #1004	; 0x3ec
   1b0ba:	f363 2152 	bfi	r1, r3, #9, #10
   1b0be:	f36f 41de 	bfc	r1, #19, #12
   1b0c2:	f36f 71df 	bfc	r1, #31, #1
   1b0c6:	2300      	movs	r3, #0
   1b0c8:	4806      	ldr	r0, [pc, #24]	; (1b0e4 <bt_l2cap_recv+0x114>)
   1b0ca:	f00a fb72 	bl	257b2 <z_impl_z_log_msg_static_create>
   1b0ce:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   1b0d0:	4620      	mov	r0, r4
   1b0d2:	f00d f91b 	bl	2830c <net_buf_unref>
		return;
   1b0d6:	e795      	b.n	1b004 <bt_l2cap_recv+0x34>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   1b0d8:	f06f 061b 	mvn.w	r6, #27
   1b0dc:	e7d6      	b.n	1b08c <bt_l2cap_recv+0xbc>
   1b0de:	bf00      	nop
   1b0e0:	0002cc3c 	.word	0x0002cc3c
   1b0e4:	0002b18c 	.word	0x0002b18c
   1b0e8:	0002cc5c 	.word	0x0002cc5c

0001b0ec <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   1b0ec:	2852      	cmp	r0, #82	; 0x52
   1b0ee:	d833      	bhi.n	1b158 <att_op_get_type+0x6c>
   1b0f0:	281b      	cmp	r0, #27
   1b0f2:	d321      	bcc.n	1b138 <att_op_get_type+0x4c>
   1b0f4:	f1a0 031b 	sub.w	r3, r0, #27
   1b0f8:	2b37      	cmp	r3, #55	; 0x37
   1b0fa:	d82f      	bhi.n	1b15c <att_op_get_type+0x70>
   1b0fc:	e8df f003 	tbb	[pc, r3]
   1b100:	3b392e37 	.word	0x3b392e37
   1b104:	2e352a2e 	.word	0x2e352a2e
   1b108:	2e2e2e37 	.word	0x2e2e2e37
   1b10c:	2e2e2e2e 	.word	0x2e2e2e2e
   1b110:	2e2e2e2e 	.word	0x2e2e2e2e
   1b114:	2e2e2e2e 	.word	0x2e2e2e2e
   1b118:	2e2e2e2e 	.word	0x2e2e2e2e
   1b11c:	2e2e2e2e 	.word	0x2e2e2e2e
   1b120:	2e2e2e2e 	.word	0x2e2e2e2e
   1b124:	2e2e2e2e 	.word	0x2e2e2e2e
   1b128:	2e2e2e2e 	.word	0x2e2e2e2e
   1b12c:	2e2e2e2e 	.word	0x2e2e2e2e
   1b130:	2e2e2e2e 	.word	0x2e2e2e2e
   1b134:	332e2e2e 	.word	0x332e2e2e
   1b138:	2819      	cmp	r0, #25
   1b13a:	d80f      	bhi.n	1b15c <att_op_get_type+0x70>
   1b13c:	b243      	sxtb	r3, r0
   1b13e:	b16b      	cbz	r3, 1b15c <att_op_get_type+0x70>
   1b140:	2301      	movs	r3, #1
   1b142:	4083      	lsls	r3, r0
   1b144:	4a10      	ldr	r2, [pc, #64]	; (1b188 <att_op_get_type+0x9c>)
   1b146:	401a      	ands	r2, r3
   1b148:	b9ba      	cbnz	r2, 1b17a <att_op_get_type+0x8e>
   1b14a:	4a10      	ldr	r2, [pc, #64]	; (1b18c <att_op_get_type+0xa0>)
   1b14c:	401a      	ands	r2, r3
   1b14e:	b12a      	cbz	r2, 1b15c <att_op_get_type+0x70>
   1b150:	2001      	movs	r0, #1
   1b152:	4770      	bx	lr
   1b154:	2001      	movs	r0, #1
   1b156:	4770      	bx	lr
   1b158:	28d2      	cmp	r0, #210	; 0xd2
   1b15a:	d010      	beq.n	1b17e <att_op_get_type+0x92>
		return ATT_NOTIFICATION;
	case BT_ATT_OP_INDICATE:
		return ATT_INDICATION;
	}

	if (op & ATT_CMD_MASK) {
   1b15c:	f010 0f40 	tst.w	r0, #64	; 0x40
   1b160:	d10f      	bne.n	1b182 <att_op_get_type+0x96>
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   1b162:	2006      	movs	r0, #6
   1b164:	4770      	bx	lr
		return ATT_COMMAND;
   1b166:	2000      	movs	r0, #0
   1b168:	4770      	bx	lr
		return ATT_RESPONSE;
   1b16a:	2002      	movs	r0, #2
   1b16c:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1b16e:	2003      	movs	r0, #3
   1b170:	4770      	bx	lr
		return ATT_INDICATION;
   1b172:	2005      	movs	r0, #5
   1b174:	4770      	bx	lr
		return ATT_CONFIRMATION;
   1b176:	2004      	movs	r0, #4
   1b178:	4770      	bx	lr
		return ATT_RESPONSE;
   1b17a:	2002      	movs	r0, #2
   1b17c:	4770      	bx	lr
		return ATT_COMMAND;
   1b17e:	2000      	movs	r0, #0
   1b180:	4770      	bx	lr
		return ATT_COMMAND;
   1b182:	2000      	movs	r0, #0
}
   1b184:	4770      	bx	lr
   1b186:	bf00      	nop
   1b188:	028aaaaa 	.word	0x028aaaaa
   1b18c:	01455554 	.word	0x01455554

0001b190 <att_cb>:
{
   1b190:	b508      	push	{r3, lr}
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1b192:	68c3      	ldr	r3, [r0, #12]
   1b194:	7818      	ldrb	r0, [r3, #0]
   1b196:	f7ff ffa9 	bl	1b0ec <att_op_get_type>
	switch (op_type) {
   1b19a:	2805      	cmp	r0, #5
   1b19c:	d80a      	bhi.n	1b1b4 <att_cb+0x24>
   1b19e:	e8df f000 	tbb	[pc, r0]
   1b1a2:	0507      	.short	0x0507
   1b1a4:	050b0703 	.word	0x050b0703
   1b1a8:	4804      	ldr	r0, [pc, #16]	; (1b1bc <att_cb+0x2c>)
   1b1aa:	e000      	b.n	1b1ae <att_cb+0x1e>
		return att_req_sent;
   1b1ac:	4804      	ldr	r0, [pc, #16]	; (1b1c0 <att_cb+0x30>)
}
   1b1ae:	bd08      	pop	{r3, pc}
		return att_tx_complete;
   1b1b0:	4804      	ldr	r0, [pc, #16]	; (1b1c4 <att_cb+0x34>)
   1b1b2:	e7fc      	b.n	1b1ae <att_cb+0x1e>
	return att_unknown;
   1b1b4:	4804      	ldr	r0, [pc, #16]	; (1b1c8 <att_cb+0x38>)
   1b1b6:	e7fa      	b.n	1b1ae <att_cb+0x1e>
		return att_cfm_sent;
   1b1b8:	4804      	ldr	r0, [pc, #16]	; (1b1cc <att_cb+0x3c>)
   1b1ba:	e7f8      	b.n	1b1ae <att_cb+0x1e>
   1b1bc:	00027431 	.word	0x00027431
   1b1c0:	000273f9 	.word	0x000273f9
   1b1c4:	000273dd 	.word	0x000273dd
   1b1c8:	000273c1 	.word	0x000273c1
   1b1cc:	00027415 	.word	0x00027415

0001b1d0 <tx_meta_data_alloc>:
{
   1b1d0:	b508      	push	{r3, lr}
   1b1d2:	4602      	mov	r2, r0
   1b1d4:	460b      	mov	r3, r1
	return z_impl_k_queue_get(queue, timeout);
   1b1d6:	4802      	ldr	r0, [pc, #8]	; (1b1e0 <tx_meta_data_alloc+0x10>)
   1b1d8:	f007 fc8e 	bl	22af8 <z_impl_k_queue_get>
}
   1b1dc:	bd08      	pop	{r3, pc}
   1b1de:	bf00      	nop
   1b1e0:	20000a30 	.word	0x20000a30

0001b1e4 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   1b1e4:	b510      	push	{r4, lr}
   1b1e6:	b08e      	sub	sp, #56	; 0x38
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   1b1e8:	7a83      	ldrb	r3, [r0, #10]
   1b1ea:	2b07      	cmp	r3, #7
   1b1ec:	d109      	bne.n	1b202 <att_get+0x1e>
		LOG_WRN("Not connected");
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1b1ee:	2104      	movs	r1, #4
   1b1f0:	f00b fc9a 	bl	26b28 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1b1f4:	4604      	mov	r4, r0
   1b1f6:	b350      	cbz	r0, 1b24e <att_get+0x6a>

	att_chan = ATT_CHAN(chan);
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
		 "ATT channel not connected");

	return att_chan->att;
   1b1f8:	f850 4c04 	ldr.w	r4, [r0, #-4]
}
   1b1fc:	4620      	mov	r0, r4
   1b1fe:	b00e      	add	sp, #56	; 0x38
   1b200:	bd10      	pop	{r4, pc}
		LOG_WRN("Not connected");
   1b202:	4b26      	ldr	r3, [pc, #152]	; (1b29c <att_get+0xb8>)
   1b204:	930d      	str	r3, [sp, #52]	; 0x34
   1b206:	2302      	movs	r3, #2
   1b208:	f88d 3004 	strb.w	r3, [sp, #4]
   1b20c:	2400      	movs	r4, #0
   1b20e:	f88d 4005 	strb.w	r4, [sp, #5]
   1b212:	f88d 4006 	strb.w	r4, [sp, #6]
   1b216:	f88d 4007 	strb.w	r4, [sp, #7]
   1b21a:	9a01      	ldr	r2, [sp, #4]
   1b21c:	920c      	str	r2, [sp, #48]	; 0x30
   1b21e:	4621      	mov	r1, r4
   1b220:	f364 0100 	bfi	r1, r4, #0, #1
   1b224:	f364 0141 	bfi	r1, r4, #1, #1
   1b228:	f364 0182 	bfi	r1, r4, #2, #1
   1b22c:	f364 01c5 	bfi	r1, r4, #3, #3
   1b230:	f363 1188 	bfi	r1, r3, #6, #3
   1b234:	2308      	movs	r3, #8
   1b236:	f363 2152 	bfi	r1, r3, #9, #10
   1b23a:	f364 41de 	bfi	r1, r4, #19, #12
   1b23e:	f364 71df 	bfi	r1, r4, #31, #1
   1b242:	4623      	mov	r3, r4
   1b244:	aa0c      	add	r2, sp, #48	; 0x30
   1b246:	4816      	ldr	r0, [pc, #88]	; (1b2a0 <att_get+0xbc>)
   1b248:	f00a fab3 	bl	257b2 <z_impl_z_log_msg_static_create>
		return NULL;
   1b24c:	e7d6      	b.n	1b1fc <att_get+0x18>
		LOG_ERR("Unable to find ATT channel");
   1b24e:	4b15      	ldr	r3, [pc, #84]	; (1b2a4 <att_get+0xc0>)
   1b250:	9307      	str	r3, [sp, #28]
   1b252:	2302      	movs	r3, #2
   1b254:	f88d 3004 	strb.w	r3, [sp, #4]
   1b258:	2300      	movs	r3, #0
   1b25a:	f88d 3005 	strb.w	r3, [sp, #5]
   1b25e:	f88d 3006 	strb.w	r3, [sp, #6]
   1b262:	f88d 3007 	strb.w	r3, [sp, #7]
   1b266:	9a01      	ldr	r2, [sp, #4]
   1b268:	9206      	str	r2, [sp, #24]
   1b26a:	4619      	mov	r1, r3
   1b26c:	f363 0100 	bfi	r1, r3, #0, #1
   1b270:	f363 0141 	bfi	r1, r3, #1, #1
   1b274:	f363 0182 	bfi	r1, r3, #2, #1
   1b278:	f363 01c5 	bfi	r1, r3, #3, #3
   1b27c:	2201      	movs	r2, #1
   1b27e:	f362 1188 	bfi	r1, r2, #6, #3
   1b282:	2208      	movs	r2, #8
   1b284:	f362 2152 	bfi	r1, r2, #9, #10
   1b288:	f363 41de 	bfi	r1, r3, #19, #12
   1b28c:	f363 71df 	bfi	r1, r3, #31, #1
   1b290:	aa06      	add	r2, sp, #24
   1b292:	4803      	ldr	r0, [pc, #12]	; (1b2a0 <att_get+0xbc>)
   1b294:	f00a fa8d 	bl	257b2 <z_impl_z_log_msg_static_create>
		return NULL;
   1b298:	e7b0      	b.n	1b1fc <att_get+0x18>
   1b29a:	bf00      	nop
   1b29c:	0002cb9c 	.word	0x0002cb9c
   1b2a0:	0002b164 	.word	0x0002b164
   1b2a4:	0002ccbc 	.word	0x0002ccbc

0001b2a8 <att_chan_new>:
	att_chan_mtu_updated(att_chan);
}
#endif /* CONFIG_BT_EATT */

static struct bt_att_chan *att_chan_new(struct bt_att *att, atomic_val_t flags)
{
   1b2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b2aa:	b083      	sub	sp, #12
   1b2ac:	af00      	add	r7, sp, #0
   1b2ae:	4605      	mov	r5, r0
   1b2b0:	460e      	mov	r6, r1
	return list->head;
   1b2b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
		.reconfigured = bt_att_reconfigured,
	#endif /* CONFIG_BT_EATT */
	};
	struct bt_att_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1b2b4:	b103      	cbz	r3, 1b2b8 <att_chan_new+0x10>
   1b2b6:	3be0      	subs	r3, #224	; 0xe0
   1b2b8:	607b      	str	r3, [r7, #4]
	int quota = 0;
   1b2ba:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1b2bc:	e002      	b.n	1b2c4 <att_chan_new+0x1c>
		if (chan->att == att) {
			quota++;
   1b2be:	3201      	adds	r2, #1
   1b2c0:	e005      	b.n	1b2ce <att_chan_new+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1b2c2:	607b      	str	r3, [r7, #4]
   1b2c4:	687c      	ldr	r4, [r7, #4]
   1b2c6:	b16c      	cbz	r4, 1b2e4 <att_chan_new+0x3c>
		if (chan->att == att) {
   1b2c8:	6823      	ldr	r3, [r4, #0]
   1b2ca:	42ab      	cmp	r3, r5
   1b2cc:	d0f7      	beq.n	1b2be <att_chan_new+0x16>
		}

		if (quota == ATT_CHAN_MAX) {
   1b2ce:	2a01      	cmp	r2, #1
   1b2d0:	d070      	beq.n	1b3b4 <att_chan_new+0x10c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b2d2:	f114 03e0 	adds.w	r3, r4, #224	; 0xe0
   1b2d6:	d0f4      	beq.n	1b2c2 <att_chan_new+0x1a>
	return node->next;
   1b2d8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1b2dc:	2b00      	cmp	r3, #0
   1b2de:	d0f0      	beq.n	1b2c2 <att_chan_new+0x1a>
   1b2e0:	3be0      	subs	r3, #224	; 0xe0
   1b2e2:	e7ee      	b.n	1b2c2 <att_chan_new+0x1a>
			LOG_DBG("Maximum number of channels reached: %d", quota);
			return NULL;
		}
	}

	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1b2e4:	2200      	movs	r2, #0
   1b2e6:	2300      	movs	r3, #0
   1b2e8:	1d39      	adds	r1, r7, #4
   1b2ea:	4833      	ldr	r0, [pc, #204]	; (1b3b8 <att_chan_new+0x110>)
   1b2ec:	f007 fa02 	bl	226f4 <k_mem_slab_alloc>
   1b2f0:	bb08      	cbnz	r0, 1b336 <att_chan_new+0x8e>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
		return NULL;
	}

	(void)memset(chan, 0, sizeof(*chan));
   1b2f2:	22e8      	movs	r2, #232	; 0xe8
   1b2f4:	2100      	movs	r1, #0
   1b2f6:	6878      	ldr	r0, [r7, #4]
   1b2f8:	f00a fec4 	bl	26084 <memset>
	chan->chan.chan.ops = &ops;
   1b2fc:	6878      	ldr	r0, [r7, #4]
   1b2fe:	4b2f      	ldr	r3, [pc, #188]	; (1b3bc <att_chan_new+0x114>)
   1b300:	6083      	str	r3, [r0, #8]
	k_fifo_init(&chan->tx_queue);
   1b302:	3098      	adds	r0, #152	; 0x98
	z_impl_k_queue_init(queue);
   1b304:	f00e ff72 	bl	2a1ec <z_impl_k_queue_init>
	atomic_set(chan->flags, flags);
   1b308:	687b      	ldr	r3, [r7, #4]
   1b30a:	3390      	adds	r3, #144	; 0x90
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1b30c:	f3bf 8f5b 	dmb	ish
   1b310:	e853 2f00 	ldrex	r2, [r3]
   1b314:	e843 6100 	strex	r1, r6, [r3]
   1b318:	2900      	cmp	r1, #0
   1b31a:	d1f9      	bne.n	1b310 <att_chan_new+0x68>
   1b31c:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   1b320:	687b      	ldr	r3, [r7, #4]
   1b322:	601d      	str	r5, [r3, #0]
	att_chan_attach(att, chan);
   1b324:	6879      	ldr	r1, [r7, #4]
   1b326:	4628      	mov	r0, r5
   1b328:	f00b fcae 	bl	26c88 <att_chan_attach>

	return chan;
   1b32c:	687c      	ldr	r4, [r7, #4]
}
   1b32e:	4620      	mov	r0, r4
   1b330:	370c      	adds	r7, #12
   1b332:	46bd      	mov	sp, r7
   1b334:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   1b336:	682d      	ldr	r5, [r5, #0]
   1b338:	466e      	mov	r6, sp
   1b33a:	b088      	sub	sp, #32
   1b33c:	466b      	mov	r3, sp
   1b33e:	f113 0210 	adds.w	r2, r3, #16
   1b342:	d031      	beq.n	1b3a8 <att_chan_new+0x100>
   1b344:	210c      	movs	r1, #12
   1b346:	b14a      	cbz	r2, 1b35c <att_chan_new+0xb4>
   1b348:	4608      	mov	r0, r1
   1b34a:	2904      	cmp	r1, #4
   1b34c:	dd03      	ble.n	1b356 <att_chan_new+0xae>
   1b34e:	f8df c070 	ldr.w	ip, [pc, #112]	; 1b3c0 <att_chan_new+0x118>
   1b352:	f8c3 c014 	str.w	ip, [r3, #20]
   1b356:	2808      	cmp	r0, #8
   1b358:	dd00      	ble.n	1b35c <att_chan_new+0xb4>
   1b35a:	619d      	str	r5, [r3, #24]
   1b35c:	290b      	cmp	r1, #11
   1b35e:	dd26      	ble.n	1b3ae <att_chan_new+0x106>
   1b360:	250c      	movs	r5, #12
   1b362:	b13a      	cbz	r2, 1b374 <att_chan_new+0xcc>
   1b364:	2103      	movs	r1, #3
   1b366:	7039      	strb	r1, [r7, #0]
   1b368:	2100      	movs	r1, #0
   1b36a:	7079      	strb	r1, [r7, #1]
   1b36c:	70b9      	strb	r1, [r7, #2]
   1b36e:	70f9      	strb	r1, [r7, #3]
   1b370:	6838      	ldr	r0, [r7, #0]
   1b372:	6118      	str	r0, [r3, #16]
   1b374:	2100      	movs	r1, #0
   1b376:	f36f 0100 	bfc	r1, #0, #1
   1b37a:	f36f 0141 	bfc	r1, #1, #1
   1b37e:	f36f 0182 	bfc	r1, #2, #1
   1b382:	f36f 01c5 	bfc	r1, #3, #3
   1b386:	2302      	movs	r3, #2
   1b388:	f363 1188 	bfi	r1, r3, #6, #3
   1b38c:	f405 757b 	and.w	r5, r5, #1004	; 0x3ec
   1b390:	f365 2152 	bfi	r1, r5, #9, #10
   1b394:	f36f 41de 	bfc	r1, #19, #12
   1b398:	f36f 71df 	bfc	r1, #31, #1
   1b39c:	2300      	movs	r3, #0
   1b39e:	4809      	ldr	r0, [pc, #36]	; (1b3c4 <att_chan_new+0x11c>)
   1b3a0:	f00a fa07 	bl	257b2 <z_impl_z_log_msg_static_create>
   1b3a4:	46b5      	mov	sp, r6
		return NULL;
   1b3a6:	e7c2      	b.n	1b32e <att_chan_new+0x86>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   1b3a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b3ac:	e7cb      	b.n	1b346 <att_chan_new+0x9e>
   1b3ae:	f06f 051b 	mvn.w	r5, #27
   1b3b2:	e7d6      	b.n	1b362 <att_chan_new+0xba>
			return NULL;
   1b3b4:	2400      	movs	r4, #0
   1b3b6:	e7ba      	b.n	1b32e <att_chan_new+0x86>
   1b3b8:	200009b8 	.word	0x200009b8
   1b3bc:	20000748 	.word	0x20000748
   1b3c0:	0002ccd8 	.word	0x0002ccd8
   1b3c4:	0002b164 	.word	0x0002b164

0001b3c8 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1b3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b3ca:	b083      	sub	sp, #12
   1b3cc:	af00      	add	r7, sp, #0
   1b3ce:	4606      	mov	r6, r0
   1b3d0:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1b3d2:	2200      	movs	r2, #0
   1b3d4:	2300      	movs	r3, #0
   1b3d6:	1d39      	adds	r1, r7, #4
   1b3d8:	4830      	ldr	r0, [pc, #192]	; (1b49c <bt_att_accept+0xd4>)
   1b3da:	f007 f98b 	bl	226f4 <k_mem_slab_alloc>
   1b3de:	b9e0      	cbnz	r0, 1b41a <bt_att_accept+0x52>
   1b3e0:	4605      	mov	r5, r0
	return z_impl_z_current_get();
   1b3e2:	f008 f983 	bl	236ec <z_impl_z_current_get>
		LOG_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	att_handle_rsp_thread = k_current_get();
   1b3e6:	4b2e      	ldr	r3, [pc, #184]	; (1b4a0 <bt_att_accept+0xd8>)
   1b3e8:	6018      	str	r0, [r3, #0]

	(void)memset(att, 0, sizeof(*att));
   1b3ea:	222c      	movs	r2, #44	; 0x2c
   1b3ec:	2100      	movs	r1, #0
   1b3ee:	6878      	ldr	r0, [r7, #4]
   1b3f0:	f00a fe48 	bl	26084 <memset>
	att->conn = conn;
   1b3f4:	687b      	ldr	r3, [r7, #4]
   1b3f6:	601e      	str	r6, [r3, #0]
	sys_slist_init(&att->reqs);
   1b3f8:	6878      	ldr	r0, [r7, #4]
	list->head = NULL;
   1b3fa:	2100      	movs	r1, #0
   1b3fc:	6041      	str	r1, [r0, #4]
	list->tail = NULL;
   1b3fe:	6081      	str	r1, [r0, #8]
	list->head = NULL;
   1b400:	6241      	str	r1, [r0, #36]	; 0x24
	list->tail = NULL;
   1b402:	6281      	str	r1, [r0, #40]	; 0x28
#if defined(CONFIG_BT_EATT)
	k_work_init_delayable(&att->eatt.connection_work,
			      att_enhanced_connection_work_handler);
#endif /* CONFIG_BT_EATT */

	chan = att_chan_new(att, 0);
   1b404:	f7ff ff50 	bl	1b2a8 <att_chan_new>
	if (!chan) {
   1b408:	4603      	mov	r3, r0
   1b40a:	2800      	cmp	r0, #0
   1b40c:	d043      	beq.n	1b496 <bt_att_accept+0xce>
		return -ENOMEM;
	}

	*ch = &chan->chan.chan;
   1b40e:	3304      	adds	r3, #4
   1b410:	6023      	str	r3, [r4, #0]

	return 0;
}
   1b412:	4628      	mov	r0, r5
   1b414:	370c      	adds	r7, #12
   1b416:	46bd      	mov	sp, r7
   1b418:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("No available ATT context for conn %p", conn);
   1b41a:	466d      	mov	r5, sp
   1b41c:	b088      	sub	sp, #32
   1b41e:	466b      	mov	r3, sp
   1b420:	f113 0210 	adds.w	r2, r3, #16
   1b424:	d031      	beq.n	1b48a <bt_att_accept+0xc2>
   1b426:	210c      	movs	r1, #12
   1b428:	b13a      	cbz	r2, 1b43a <bt_att_accept+0x72>
   1b42a:	4608      	mov	r0, r1
   1b42c:	2904      	cmp	r1, #4
   1b42e:	dd01      	ble.n	1b434 <bt_att_accept+0x6c>
   1b430:	4c1c      	ldr	r4, [pc, #112]	; (1b4a4 <bt_att_accept+0xdc>)
   1b432:	615c      	str	r4, [r3, #20]
   1b434:	2808      	cmp	r0, #8
   1b436:	dd00      	ble.n	1b43a <bt_att_accept+0x72>
   1b438:	619e      	str	r6, [r3, #24]
   1b43a:	290b      	cmp	r1, #11
   1b43c:	dd28      	ble.n	1b490 <bt_att_accept+0xc8>
   1b43e:	240c      	movs	r4, #12
   1b440:	b13a      	cbz	r2, 1b452 <bt_att_accept+0x8a>
   1b442:	2103      	movs	r1, #3
   1b444:	7039      	strb	r1, [r7, #0]
   1b446:	2100      	movs	r1, #0
   1b448:	7079      	strb	r1, [r7, #1]
   1b44a:	70b9      	strb	r1, [r7, #2]
   1b44c:	70f9      	strb	r1, [r7, #3]
   1b44e:	6838      	ldr	r0, [r7, #0]
   1b450:	6118      	str	r0, [r3, #16]
   1b452:	2100      	movs	r1, #0
   1b454:	f36f 0100 	bfc	r1, #0, #1
   1b458:	f36f 0141 	bfc	r1, #1, #1
   1b45c:	f36f 0182 	bfc	r1, #2, #1
   1b460:	f36f 01c5 	bfc	r1, #3, #3
   1b464:	2301      	movs	r3, #1
   1b466:	f363 1188 	bfi	r1, r3, #6, #3
   1b46a:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1b46e:	f364 2152 	bfi	r1, r4, #9, #10
   1b472:	f36f 41de 	bfc	r1, #19, #12
   1b476:	f36f 71df 	bfc	r1, #31, #1
   1b47a:	2300      	movs	r3, #0
   1b47c:	480a      	ldr	r0, [pc, #40]	; (1b4a8 <bt_att_accept+0xe0>)
   1b47e:	f00a f998 	bl	257b2 <z_impl_z_log_msg_static_create>
   1b482:	46ad      	mov	sp, r5
		return -ENOMEM;
   1b484:	f06f 050b 	mvn.w	r5, #11
   1b488:	e7c3      	b.n	1b412 <bt_att_accept+0x4a>
		LOG_ERR("No available ATT context for conn %p", conn);
   1b48a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b48e:	e7cb      	b.n	1b428 <bt_att_accept+0x60>
   1b490:	f06f 041b 	mvn.w	r4, #27
   1b494:	e7d4      	b.n	1b440 <bt_att_accept+0x78>
		return -ENOMEM;
   1b496:	f06f 050b 	mvn.w	r5, #11
   1b49a:	e7ba      	b.n	1b412 <bt_att_accept+0x4a>
   1b49c:	2000099c 	.word	0x2000099c
   1b4a0:	20005c5c 	.word	0x20005c5c
   1b4a4:	0002cd00 	.word	0x0002cd00
   1b4a8:	0002b164 	.word	0x0002b164

0001b4ac <bt_att_released>:
{
   1b4ac:	b500      	push	{lr}
   1b4ae:	b083      	sub	sp, #12
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1b4b0:	3804      	subs	r0, #4
   1b4b2:	9001      	str	r0, [sp, #4]
	k_mem_slab_free(&chan_slab, (void **)&chan);
   1b4b4:	a901      	add	r1, sp, #4
   1b4b6:	4803      	ldr	r0, [pc, #12]	; (1b4c4 <bt_att_released+0x18>)
   1b4b8:	f00e fd67 	bl	29f8a <k_mem_slab_free>
}
   1b4bc:	b003      	add	sp, #12
   1b4be:	f85d fb04 	ldr.w	pc, [sp], #4
   1b4c2:	bf00      	nop
   1b4c4:	200009b8 	.word	0x200009b8

0001b4c8 <tx_meta_data_free>:
{
   1b4c8:	b510      	push	{r4, lr}
   1b4ca:	4604      	mov	r4, r0
	(void)memset(data, 0, sizeof(*data));
   1b4cc:	2214      	movs	r2, #20
   1b4ce:	2100      	movs	r1, #0
   1b4d0:	f00a fdd8 	bl	26084 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   1b4d4:	4621      	mov	r1, r4
   1b4d6:	4802      	ldr	r0, [pc, #8]	; (1b4e0 <tx_meta_data_free+0x18>)
   1b4d8:	f00e fe94 	bl	2a204 <k_queue_append>
}
   1b4dc:	bd10      	pop	{r4, pc}
   1b4de:	bf00      	nop
   1b4e0:	20000a30 	.word	0x20000a30

0001b4e4 <chan_send>:
{
   1b4e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b4e8:	b08b      	sub	sp, #44	; 0x2c
   1b4ea:	4605      	mov	r5, r0
   1b4ec:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1b4ee:	698f      	ldr	r7, [r1, #24]
	hdr = (void *)buf->data;
   1b4f0:	68ce      	ldr	r6, [r1, #12]
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   1b4f2:	2102      	movs	r1, #2
   1b4f4:	3090      	adds	r0, #144	; 0x90
   1b4f6:	f00b fbdb 	bl	26cb0 <atomic_test_bit>
   1b4fa:	2800      	cmp	r0, #0
   1b4fc:	d05a      	beq.n	1b5b4 <chan_send+0xd0>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1b4fe:	7833      	ldrb	r3, [r6, #0]
   1b500:	2bd2      	cmp	r3, #210	; 0xd2
   1b502:	d023      	beq.n	1b54c <chan_send+0x68>
	state->offset = net_buf_simple_headroom(buf);
   1b504:	f104 000c 	add.w	r0, r4, #12
   1b508:	f00c ff80 	bl	2840c <net_buf_simple_headroom>
   1b50c:	4606      	mov	r6, r0
   1b50e:	f8ad 000c 	strh.w	r0, [sp, #12]
	state->len = buf->len;
   1b512:	f8b4 8010 	ldrh.w	r8, [r4, #16]
   1b516:	f8ad 800e 	strh.w	r8, [sp, #14]
	data->att_chan = chan;
   1b51a:	603d      	str	r5, [r7, #0]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1b51c:	682b      	ldr	r3, [r5, #0]
   1b51e:	681d      	ldr	r5, [r3, #0]
   1b520:	4620      	mov	r0, r4
   1b522:	f7ff fe35 	bl	1b190 <att_cb>
   1b526:	4603      	mov	r3, r0
   1b528:	9700      	str	r7, [sp, #0]
   1b52a:	4622      	mov	r2, r4
   1b52c:	2104      	movs	r1, #4
   1b52e:	4628      	mov	r0, r5
   1b530:	f00b fab3 	bl	26a9a <bt_l2cap_send_cb>
	if (err) {
   1b534:	4681      	mov	r9, r0
   1b536:	b128      	cbz	r0, 1b544 <chan_send+0x60>
	buf->data = buf->__buf + state->offset;
   1b538:	6963      	ldr	r3, [r4, #20]
   1b53a:	fa13 f686 	uxtah	r6, r3, r6
   1b53e:	60e6      	str	r6, [r4, #12]
	buf->len = state->len;
   1b540:	f8a4 8010 	strh.w	r8, [r4, #16]
}
   1b544:	4648      	mov	r0, r9
   1b546:	b00b      	add	sp, #44	; 0x2c
   1b548:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = bt_smp_sign(chan->att->conn, buf);
   1b54c:	682b      	ldr	r3, [r5, #0]
   1b54e:	4621      	mov	r1, r4
   1b550:	6818      	ldr	r0, [r3, #0]
   1b552:	f00c fdb1 	bl	280b8 <bt_smp_sign>
		if (err) {
   1b556:	4681      	mov	r9, r0
   1b558:	2800      	cmp	r0, #0
   1b55a:	d0d3      	beq.n	1b504 <chan_send+0x20>
			LOG_ERR("Error signing data");
   1b55c:	4b17      	ldr	r3, [pc, #92]	; (1b5bc <chan_send+0xd8>)
   1b55e:	9309      	str	r3, [sp, #36]	; 0x24
   1b560:	2302      	movs	r3, #2
   1b562:	f88d 3008 	strb.w	r3, [sp, #8]
   1b566:	2300      	movs	r3, #0
   1b568:	f88d 3009 	strb.w	r3, [sp, #9]
   1b56c:	f88d 300a 	strb.w	r3, [sp, #10]
   1b570:	f88d 300b 	strb.w	r3, [sp, #11]
   1b574:	9a02      	ldr	r2, [sp, #8]
   1b576:	9208      	str	r2, [sp, #32]
   1b578:	4619      	mov	r1, r3
   1b57a:	f363 0100 	bfi	r1, r3, #0, #1
   1b57e:	f363 0141 	bfi	r1, r3, #1, #1
   1b582:	f363 0182 	bfi	r1, r3, #2, #1
   1b586:	f363 01c5 	bfi	r1, r3, #3, #3
   1b58a:	2201      	movs	r2, #1
   1b58c:	f362 1188 	bfi	r1, r2, #6, #3
   1b590:	2208      	movs	r2, #8
   1b592:	f362 2152 	bfi	r1, r2, #9, #10
   1b596:	f363 41de 	bfi	r1, r3, #19, #12
   1b59a:	f363 71df 	bfi	r1, r3, #31, #1
   1b59e:	aa08      	add	r2, sp, #32
   1b5a0:	4807      	ldr	r0, [pc, #28]	; (1b5c0 <chan_send+0xdc>)
   1b5a2:	f00a f906 	bl	257b2 <z_impl_z_log_msg_static_create>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   1b5a6:	69a0      	ldr	r0, [r4, #24]
   1b5a8:	f7ff ff8e 	bl	1b4c8 <tx_meta_data_free>
			net_buf_unref(buf);
   1b5ac:	4620      	mov	r0, r4
   1b5ae:	f00c fead 	bl	2830c <net_buf_unref>
			return err;
   1b5b2:	e7c7      	b.n	1b544 <chan_send+0x60>
		return -EINVAL;
   1b5b4:	f06f 0915 	mvn.w	r9, #21
   1b5b8:	e7c4      	b.n	1b544 <chan_send+0x60>
   1b5ba:	bf00      	nop
   1b5bc:	0002cd28 	.word	0x0002cd28
   1b5c0:	0002b164 	.word	0x0002b164

0001b5c4 <read_group_cb>:
{
   1b5c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b5c6:	b085      	sub	sp, #20
   1b5c8:	4605      	mov	r5, r0
   1b5ca:	460e      	mov	r6, r1
   1b5cc:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1b5ce:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1b5d0:	2300      	movs	r3, #0
   1b5d2:	f88d 3008 	strb.w	r3, [sp, #8]
   1b5d6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1b5da:	f8ad 300a 	strh.w	r3, [sp, #10]
   1b5de:	a902      	add	r1, sp, #8
   1b5e0:	6800      	ldr	r0, [r0, #0]
   1b5e2:	f00a fda0 	bl	26126 <bt_uuid_cmp>
   1b5e6:	b158      	cbz	r0, 1b600 <read_group_cb+0x3c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1b5e8:	2300      	movs	r3, #0
   1b5ea:	f88d 300c 	strb.w	r3, [sp, #12]
   1b5ee:	f642 0301 	movw	r3, #10241	; 0x2801
   1b5f2:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b5f6:	a903      	add	r1, sp, #12
   1b5f8:	6828      	ldr	r0, [r5, #0]
   1b5fa:	f00a fd94 	bl	26126 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1b5fe:	bb28      	cbnz	r0, 1b64c <read_group_cb+0x88>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1b600:	6861      	ldr	r1, [r4, #4]
   1b602:	6828      	ldr	r0, [r5, #0]
   1b604:	f00a fd8f 	bl	26126 <bt_uuid_cmp>
   1b608:	bb40      	cbnz	r0, 1b65c <read_group_cb+0x98>
	if (data->rsp->len &&
   1b60a:	68e3      	ldr	r3, [r4, #12]
   1b60c:	781a      	ldrb	r2, [r3, #0]
   1b60e:	b12a      	cbz	r2, 1b61c <read_group_cb+0x58>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1b610:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1b612:	68a1      	ldr	r1, [r4, #8]
   1b614:	8a09      	ldrh	r1, [r1, #16]
   1b616:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1b618:	4293      	cmp	r3, r2
   1b61a:	db24      	blt.n	1b666 <read_group_cb+0xa2>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1b61c:	68a0      	ldr	r0, [r4, #8]
	return net_buf_simple_add(&buf->b, len);
   1b61e:	2104      	movs	r1, #4
   1b620:	300c      	adds	r0, #12
   1b622:	f00c feba 	bl	2839a <net_buf_simple_add>
   1b626:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1b628:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1b62a:	6923      	ldr	r3, [r4, #16]
   1b62c:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1b62e:	9401      	str	r4, [sp, #4]
   1b630:	4b10      	ldr	r3, [pc, #64]	; (1b674 <read_group_cb+0xb0>)
   1b632:	9300      	str	r3, [sp, #0]
   1b634:	2300      	movs	r3, #0
   1b636:	68a2      	ldr	r2, [r4, #8]
   1b638:	4629      	mov	r1, r5
   1b63a:	4638      	mov	r0, r7
   1b63c:	f00b fd0a 	bl	27054 <att_chan_read>
	if (read < 0) {
   1b640:	2800      	cmp	r0, #0
   1b642:	db12      	blt.n	1b66a <read_group_cb+0xa6>
	if (!data->group) {
   1b644:	6923      	ldr	r3, [r4, #16]
   1b646:	b193      	cbz	r3, 1b66e <read_group_cb+0xaa>
	return BT_GATT_ITER_CONTINUE;
   1b648:	2001      	movs	r0, #1
   1b64a:	e00a      	b.n	1b662 <read_group_cb+0x9e>
		if (data->group &&
   1b64c:	6923      	ldr	r3, [r4, #16]
   1b64e:	b11b      	cbz	r3, 1b658 <read_group_cb+0x94>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   1b650:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   1b652:	42b2      	cmp	r2, r6
   1b654:	d200      	bcs.n	1b658 <read_group_cb+0x94>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1b656:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1b658:	2001      	movs	r0, #1
   1b65a:	e002      	b.n	1b662 <read_group_cb+0x9e>
		data->group = NULL;
   1b65c:	2300      	movs	r3, #0
   1b65e:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1b660:	2001      	movs	r0, #1
}
   1b662:	b005      	add	sp, #20
   1b664:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ITER_STOP;
   1b666:	2000      	movs	r0, #0
   1b668:	e7fb      	b.n	1b662 <read_group_cb+0x9e>
		return BT_GATT_ITER_STOP;
   1b66a:	2000      	movs	r0, #0
   1b66c:	e7f9      	b.n	1b662 <read_group_cb+0x9e>
		return BT_GATT_ITER_STOP;
   1b66e:	2000      	movs	r0, #0
   1b670:	e7f7      	b.n	1b662 <read_group_cb+0x9e>
   1b672:	bf00      	nop
   1b674:	00026c5b 	.word	0x00026c5b

0001b678 <read_type_cb>:
{
   1b678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b67c:	b083      	sub	sp, #12
   1b67e:	4606      	mov	r6, r0
   1b680:	4688      	mov	r8, r1
   1b682:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1b684:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1b686:	687d      	ldr	r5, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1b688:	6851      	ldr	r1, [r2, #4]
   1b68a:	6800      	ldr	r0, [r0, #0]
   1b68c:	f00a fd4b 	bl	26126 <bt_uuid_cmp>
   1b690:	b120      	cbz	r0, 1b69c <read_type_cb+0x24>
		return BT_GATT_ITER_CONTINUE;
   1b692:	2501      	movs	r5, #1
}
   1b694:	4628      	mov	r0, r5
   1b696:	b003      	add	sp, #12
   1b698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1b69c:	2295      	movs	r2, #149	; 0x95
   1b69e:	4631      	mov	r1, r6
   1b6a0:	4628      	mov	r0, r5
   1b6a2:	f00c fbc1 	bl	27e28 <bt_gatt_check_perm>
   1b6a6:	4605      	mov	r5, r0
   1b6a8:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1b6aa:	b130      	cbz	r0, 1b6ba <read_type_cb+0x42>
		if (data->rsp->len) {
   1b6ac:	68e3      	ldr	r3, [r4, #12]
   1b6ae:	781b      	ldrb	r3, [r3, #0]
   1b6b0:	b10b      	cbz	r3, 1b6b6 <read_type_cb+0x3e>
			data->err = 0x00;
   1b6b2:	2300      	movs	r3, #0
   1b6b4:	7523      	strb	r3, [r4, #20]
		return BT_GATT_ITER_STOP;
   1b6b6:	2500      	movs	r5, #0
   1b6b8:	e7ec      	b.n	1b694 <read_type_cb+0x1c>
	data->err = 0x00;
   1b6ba:	f04f 0900 	mov.w	r9, #0
   1b6be:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1b6c2:	68a0      	ldr	r0, [r4, #8]
   1b6c4:	f00c fe49 	bl	2835a <net_buf_frag_last>
   1b6c8:	2102      	movs	r1, #2
   1b6ca:	300c      	adds	r0, #12
   1b6cc:	f00c fe65 	bl	2839a <net_buf_simple_add>
   1b6d0:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   1b6d2:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1b6d6:	9401      	str	r4, [sp, #4]
   1b6d8:	4b10      	ldr	r3, [pc, #64]	; (1b71c <read_type_cb+0xa4>)
   1b6da:	9300      	str	r3, [sp, #0]
   1b6dc:	464b      	mov	r3, r9
   1b6de:	68a2      	ldr	r2, [r4, #8]
   1b6e0:	4631      	mov	r1, r6
   1b6e2:	4638      	mov	r0, r7
   1b6e4:	f00b fcb6 	bl	27054 <att_chan_read>
	if (read < 0) {
   1b6e8:	2800      	cmp	r0, #0
   1b6ea:	db06      	blt.n	1b6fa <read_type_cb+0x82>
	if (!data->item) {
   1b6ec:	6923      	ldr	r3, [r4, #16]
   1b6ee:	2b00      	cmp	r3, #0
   1b6f0:	d0d0      	beq.n	1b694 <read_type_cb+0x1c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1b6f2:	8d7d      	ldrh	r5, [r7, #42]	; 0x2a
   1b6f4:	68a3      	ldr	r3, [r4, #8]
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
   1b6f6:	2200      	movs	r2, #0

	while (buf) {
   1b6f8:	e006      	b.n	1b708 <read_type_cb+0x90>
		data->err = err_to_att(read);
   1b6fa:	f00b fa92 	bl	26c22 <err_to_att>
   1b6fe:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1b700:	e7c8      	b.n	1b694 <read_type_cb+0x1c>
		bytes += buf->len;
   1b702:	8a19      	ldrh	r1, [r3, #16]
   1b704:	440a      	add	r2, r1
		buf = buf->frags;
   1b706:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   1b708:	2b00      	cmp	r3, #0
   1b70a:	d1fa      	bne.n	1b702 <read_type_cb+0x8a>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1b70c:	1aad      	subs	r5, r5, r2
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1b70e:	68e3      	ldr	r3, [r4, #12]
   1b710:	781b      	ldrb	r3, [r3, #0]
   1b712:	429d      	cmp	r5, r3
   1b714:	bf94      	ite	ls
   1b716:	2500      	movls	r5, #0
   1b718:	2501      	movhi	r5, #1
   1b71a:	e7bb      	b.n	1b694 <read_type_cb+0x1c>
   1b71c:	00026c33 	.word	0x00026c33

0001b720 <find_type_cb>:
{
   1b720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b724:	b097      	sub	sp, #92	; 0x5c
   1b726:	af02      	add	r7, sp, #8
   1b728:	4605      	mov	r5, r0
   1b72a:	460e      	mov	r6, r1
   1b72c:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1b72e:	f8d2 8000 	ldr.w	r8, [r2]
	struct bt_conn *conn = chan->chan.chan.conn;
   1b732:	f8d8 9004 	ldr.w	r9, [r8, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1b736:	2300      	movs	r3, #0
   1b738:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
   1b73c:	f642 0301 	movw	r3, #10241	; 0x2801
   1b740:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
   1b744:	f107 0148 	add.w	r1, r7, #72	; 0x48
   1b748:	6800      	ldr	r0, [r0, #0]
   1b74a:	f00a fcec 	bl	26126 <bt_uuid_cmp>
   1b74e:	b930      	cbnz	r0, 1b75e <find_type_cb+0x3e>
	data->group = NULL;
   1b750:	2300      	movs	r3, #0
   1b752:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   1b754:	2001      	movs	r0, #1
}
   1b756:	3754      	adds	r7, #84	; 0x54
   1b758:	46bd      	mov	sp, r7
   1b75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1b75e:	2300      	movs	r3, #0
   1b760:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
   1b764:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1b768:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
   1b76c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
   1b770:	6828      	ldr	r0, [r5, #0]
   1b772:	f00a fcd8 	bl	26126 <bt_uuid_cmp>
   1b776:	b928      	cbnz	r0, 1b784 <find_type_cb+0x64>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1b778:	f8b8 c02a 	ldrh.w	ip, [r8, #42]	; 0x2a
   1b77c:	6860      	ldr	r0, [r4, #4]
   1b77e:	4603      	mov	r3, r0
	size_t bytes = 0;
   1b780:	2200      	movs	r2, #0
	while (buf) {
   1b782:	e00a      	b.n	1b79a <find_type_cb+0x7a>
		if (data->group &&
   1b784:	68a3      	ldr	r3, [r4, #8]
   1b786:	b11b      	cbz	r3, 1b790 <find_type_cb+0x70>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   1b788:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   1b78a:	42b2      	cmp	r2, r6
   1b78c:	d200      	bcs.n	1b790 <find_type_cb+0x70>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1b78e:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1b790:	2001      	movs	r0, #1
   1b792:	e7e0      	b.n	1b756 <find_type_cb+0x36>
		bytes += buf->len;
   1b794:	8a19      	ldrh	r1, [r3, #16]
   1b796:	440a      	add	r2, r1
		buf = buf->frags;
   1b798:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   1b79a:	2b00      	cmp	r3, #0
   1b79c:	d1fa      	bne.n	1b794 <find_type_cb+0x74>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1b79e:	ebac 0302 	sub.w	r3, ip, r2
   1b7a2:	2b03      	cmp	r3, #3
   1b7a4:	d801      	bhi.n	1b7aa <find_type_cb+0x8a>
		return BT_GATT_ITER_STOP;
   1b7a6:	2000      	movs	r0, #0
   1b7a8:	e7d5      	b.n	1b756 <find_type_cb+0x36>
	frag = net_buf_frag_last(data->buf);
   1b7aa:	f00c fdd6 	bl	2835a <net_buf_frag_last>
   1b7ae:	6078      	str	r0, [r7, #4]
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1b7b0:	f8b8 a02a 	ldrh.w	sl, [r8, #42]	; 0x2a
   1b7b4:	6863      	ldr	r3, [r4, #4]
	size_t bytes = 0;
   1b7b6:	2200      	movs	r2, #0
	while (buf) {
   1b7b8:	e002      	b.n	1b7c0 <find_type_cb+0xa0>
		bytes += buf->len;
   1b7ba:	8a19      	ldrh	r1, [r3, #16]
   1b7bc:	440a      	add	r2, r1
		buf = buf->frags;
   1b7be:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   1b7c0:	2b00      	cmp	r3, #0
   1b7c2:	d1fa      	bne.n	1b7ba <find_type_cb+0x9a>
   1b7c4:	ebaa 0a02 	sub.w	sl, sl, r2
	return net_buf_simple_tailroom(&buf->b);
   1b7c8:	687b      	ldr	r3, [r7, #4]
   1b7ca:	f103 0b0c 	add.w	fp, r3, #12
   1b7ce:	4658      	mov	r0, fp
   1b7d0:	f00c fe20 	bl	28414 <net_buf_simple_tailroom>
   1b7d4:	4582      	cmp	sl, r0
   1b7d6:	d25c      	bcs.n	1b892 <find_type_cb+0x172>
   1b7d8:	f8b8 002a 	ldrh.w	r0, [r8, #42]	; 0x2a
   1b7dc:	6863      	ldr	r3, [r4, #4]
	size_t bytes = 0;
   1b7de:	2200      	movs	r2, #0
	while (buf) {
   1b7e0:	e002      	b.n	1b7e8 <find_type_cb+0xc8>
		bytes += buf->len;
   1b7e2:	8a19      	ldrh	r1, [r3, #16]
   1b7e4:	440a      	add	r2, r1
		buf = buf->frags;
   1b7e6:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   1b7e8:	2b00      	cmp	r3, #0
   1b7ea:	d1fa      	bne.n	1b7e2 <find_type_cb+0xc2>
   1b7ec:	1a80      	subs	r0, r0, r2
	if (!len) {
   1b7ee:	2800      	cmp	r0, #0
   1b7f0:	d053      	beq.n	1b89a <find_type_cb+0x17a>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1b7f2:	f8d5 8004 	ldr.w	r8, [r5, #4]
   1b7f6:	2300      	movs	r3, #0
   1b7f8:	9300      	str	r3, [sp, #0]
   1b7fa:	2310      	movs	r3, #16
   1b7fc:	f107 0238 	add.w	r2, r7, #56	; 0x38
   1b800:	4629      	mov	r1, r5
   1b802:	4648      	mov	r0, r9
   1b804:	47c0      	blx	r8
	if (read < 0) {
   1b806:	1e05      	subs	r5, r0, #0
   1b808:	dba2      	blt.n	1b750 <find_type_cb+0x30>
	if (read != data->value_len) {
   1b80a:	7c22      	ldrb	r2, [r4, #16]
   1b80c:	42aa      	cmp	r2, r5
   1b80e:	f000 80aa 	beq.w	1b966 <find_type_cb+0x246>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1b812:	68e1      	ldr	r1, [r4, #12]
   1b814:	f107 0024 	add.w	r0, r7, #36	; 0x24
   1b818:	f00a fca3 	bl	26162 <bt_uuid_create>
   1b81c:	2800      	cmp	r0, #0
   1b81e:	d153      	bne.n	1b8c8 <find_type_cb+0x1a8>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   1b820:	7c20      	ldrb	r0, [r4, #16]
   1b822:	466e      	mov	r6, sp
   1b824:	b088      	sub	sp, #32
   1b826:	ab02      	add	r3, sp, #8
   1b828:	f113 0210 	adds.w	r2, r3, #16
   1b82c:	d046      	beq.n	1b8bc <find_type_cb+0x19c>
   1b82e:	210c      	movs	r1, #12
   1b830:	b14a      	cbz	r2, 1b846 <find_type_cb+0x126>
   1b832:	460d      	mov	r5, r1
   1b834:	2904      	cmp	r1, #4
   1b836:	dd03      	ble.n	1b840 <find_type_cb+0x120>
   1b838:	f8df c158 	ldr.w	ip, [pc, #344]	; 1b994 <find_type_cb+0x274>
   1b83c:	f8c3 c014 	str.w	ip, [r3, #20]
   1b840:	2d08      	cmp	r5, #8
   1b842:	dd00      	ble.n	1b846 <find_type_cb+0x126>
   1b844:	6198      	str	r0, [r3, #24]
   1b846:	290b      	cmp	r1, #11
   1b848:	dd3b      	ble.n	1b8c2 <find_type_cb+0x1a2>
   1b84a:	250c      	movs	r5, #12
   1b84c:	b13a      	cbz	r2, 1b85e <find_type_cb+0x13e>
   1b84e:	2103      	movs	r1, #3
   1b850:	7439      	strb	r1, [r7, #16]
   1b852:	2100      	movs	r1, #0
   1b854:	7479      	strb	r1, [r7, #17]
   1b856:	74b9      	strb	r1, [r7, #18]
   1b858:	74f9      	strb	r1, [r7, #19]
   1b85a:	6938      	ldr	r0, [r7, #16]
   1b85c:	6118      	str	r0, [r3, #16]
   1b85e:	2100      	movs	r1, #0
   1b860:	f36f 0100 	bfc	r1, #0, #1
   1b864:	f36f 0141 	bfc	r1, #1, #1
   1b868:	f36f 0182 	bfc	r1, #2, #1
   1b86c:	f36f 01c5 	bfc	r1, #3, #3
   1b870:	2302      	movs	r3, #2
   1b872:	f363 1188 	bfi	r1, r3, #6, #3
   1b876:	f405 757b 	and.w	r5, r5, #1004	; 0x3ec
   1b87a:	f365 2152 	bfi	r1, r5, #9, #10
   1b87e:	f36f 41de 	bfc	r1, #19, #12
   1b882:	f36f 71df 	bfc	r1, #31, #1
   1b886:	2300      	movs	r3, #0
   1b888:	4843      	ldr	r0, [pc, #268]	; (1b998 <find_type_cb+0x278>)
   1b88a:	f009 ff92 	bl	257b2 <z_impl_z_log_msg_static_create>
   1b88e:	46b5      	mov	sp, r6
			goto skip;
   1b890:	e75e      	b.n	1b750 <find_type_cb+0x30>
	return net_buf_simple_tailroom(&buf->b);
   1b892:	4658      	mov	r0, fp
   1b894:	f00c fdbe 	bl	28414 <net_buf_simple_tailroom>
   1b898:	e7a9      	b.n	1b7ee <find_type_cb+0xce>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1b89a:	6863      	ldr	r3, [r4, #4]
   1b89c:	7a98      	ldrb	r0, [r3, #10]
   1b89e:	f002 f889 	bl	1d9b4 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1b8a2:	2200      	movs	r2, #0
   1b8a4:	2300      	movs	r3, #0
   1b8a6:	f00c fcf0 	bl	2828a <net_buf_alloc_fixed>
		if (!frag) {
   1b8aa:	6078      	str	r0, [r7, #4]
   1b8ac:	2800      	cmp	r0, #0
   1b8ae:	f43f af52 	beq.w	1b756 <find_type_cb+0x36>
		net_buf_frag_add(data->buf, frag);
   1b8b2:	6879      	ldr	r1, [r7, #4]
   1b8b4:	6860      	ldr	r0, [r4, #4]
   1b8b6:	f00c fd61 	bl	2837c <net_buf_frag_add>
   1b8ba:	e79a      	b.n	1b7f2 <find_type_cb+0xd2>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   1b8bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b8c0:	e7b6      	b.n	1b830 <find_type_cb+0x110>
   1b8c2:	f06f 051b 	mvn.w	r5, #27
   1b8c6:	e7c1      	b.n	1b84c <find_type_cb+0x12c>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1b8c8:	b2ea      	uxtb	r2, r5
   1b8ca:	f107 0138 	add.w	r1, r7, #56	; 0x38
   1b8ce:	f107 0010 	add.w	r0, r7, #16
   1b8d2:	f00a fc46 	bl	26162 <bt_uuid_create>
   1b8d6:	2800      	cmp	r0, #0
   1b8d8:	d13d      	bne.n	1b956 <find_type_cb+0x236>
			LOG_WRN("Unable to create UUID: size %d", read);
   1b8da:	466e      	mov	r6, sp
   1b8dc:	b088      	sub	sp, #32
   1b8de:	ab02      	add	r3, sp, #8
   1b8e0:	f113 0210 	adds.w	r2, r3, #16
   1b8e4:	d031      	beq.n	1b94a <find_type_cb+0x22a>
   1b8e6:	210c      	movs	r1, #12
   1b8e8:	b14a      	cbz	r2, 1b8fe <find_type_cb+0x1de>
   1b8ea:	4608      	mov	r0, r1
   1b8ec:	2904      	cmp	r1, #4
   1b8ee:	dd03      	ble.n	1b8f8 <find_type_cb+0x1d8>
   1b8f0:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 1b99c <find_type_cb+0x27c>
   1b8f4:	f8c3 c014 	str.w	ip, [r3, #20]
   1b8f8:	2808      	cmp	r0, #8
   1b8fa:	dd00      	ble.n	1b8fe <find_type_cb+0x1de>
   1b8fc:	619d      	str	r5, [r3, #24]
   1b8fe:	290b      	cmp	r1, #11
   1b900:	dd26      	ble.n	1b950 <find_type_cb+0x230>
   1b902:	250c      	movs	r5, #12
   1b904:	b13a      	cbz	r2, 1b916 <find_type_cb+0x1f6>
   1b906:	2103      	movs	r1, #3
   1b908:	7339      	strb	r1, [r7, #12]
   1b90a:	2100      	movs	r1, #0
   1b90c:	7379      	strb	r1, [r7, #13]
   1b90e:	73b9      	strb	r1, [r7, #14]
   1b910:	73f9      	strb	r1, [r7, #15]
   1b912:	68f8      	ldr	r0, [r7, #12]
   1b914:	6118      	str	r0, [r3, #16]
   1b916:	2100      	movs	r1, #0
   1b918:	f36f 0100 	bfc	r1, #0, #1
   1b91c:	f36f 0141 	bfc	r1, #1, #1
   1b920:	f36f 0182 	bfc	r1, #2, #1
   1b924:	f36f 01c5 	bfc	r1, #3, #3
   1b928:	2302      	movs	r3, #2
   1b92a:	f363 1188 	bfi	r1, r3, #6, #3
   1b92e:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   1b932:	f363 2152 	bfi	r1, r3, #9, #10
   1b936:	f36f 41de 	bfc	r1, #19, #12
   1b93a:	f36f 71df 	bfc	r1, #31, #1
   1b93e:	2300      	movs	r3, #0
   1b940:	4815      	ldr	r0, [pc, #84]	; (1b998 <find_type_cb+0x278>)
   1b942:	f009 ff36 	bl	257b2 <z_impl_z_log_msg_static_create>
   1b946:	46b5      	mov	sp, r6
			goto skip;
   1b948:	e702      	b.n	1b750 <find_type_cb+0x30>
			LOG_WRN("Unable to create UUID: size %d", read);
   1b94a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b94e:	e7cb      	b.n	1b8e8 <find_type_cb+0x1c8>
   1b950:	f06f 051b 	mvn.w	r5, #27
   1b954:	e7d6      	b.n	1b904 <find_type_cb+0x1e4>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1b956:	f107 0110 	add.w	r1, r7, #16
   1b95a:	f107 0024 	add.w	r0, r7, #36	; 0x24
   1b95e:	f00a fbe2 	bl	26126 <bt_uuid_cmp>
   1b962:	b148      	cbz	r0, 1b978 <find_type_cb+0x258>
   1b964:	e6f4      	b.n	1b750 <find_type_cb+0x30>
	} else if (memcmp(data->value, uuid, read)) {
   1b966:	462a      	mov	r2, r5
   1b968:	f107 0138 	add.w	r1, r7, #56	; 0x38
   1b96c:	68e0      	ldr	r0, [r4, #12]
   1b96e:	f00a fb48 	bl	26002 <memcmp>
   1b972:	2800      	cmp	r0, #0
   1b974:	f47f aeec 	bne.w	1b750 <find_type_cb+0x30>
	data->err = 0x00;
   1b978:	2300      	movs	r3, #0
   1b97a:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1b97c:	2104      	movs	r1, #4
   1b97e:	6878      	ldr	r0, [r7, #4]
   1b980:	300c      	adds	r0, #12
   1b982:	f00c fd0a 	bl	2839a <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1b986:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1b988:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1b98a:	68a3      	ldr	r3, [r4, #8]
   1b98c:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1b98e:	2001      	movs	r0, #1
   1b990:	e6e1      	b.n	1b756 <find_type_cb+0x36>
   1b992:	bf00      	nop
   1b994:	0002cd3c 	.word	0x0002cd3c
   1b998:	0002b164 	.word	0x0002b164
   1b99c:	0002cd5c 	.word	0x0002cd5c

0001b9a0 <bt_att_connected>:
{
   1b9a0:	b510      	push	{r4, lr}
   1b9a2:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1b9a4:	3804      	subs	r0, #4
	atomic_set_bit(att_chan->flags, ATT_CONNECTED);
   1b9a6:	f104 038c 	add.w	r3, r4, #140	; 0x8c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b9aa:	f3bf 8f5b 	dmb	ish
   1b9ae:	e853 1f00 	ldrex	r1, [r3]
   1b9b2:	f041 0104 	orr.w	r1, r1, #4
   1b9b6:	e843 1200 	strex	r2, r1, [r3]
   1b9ba:	2a00      	cmp	r2, #0
   1b9bc:	d1f7      	bne.n	1b9ae <bt_att_connected+0xe>
   1b9be:	f3bf 8f5b 	dmb	ish
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1b9c2:	2317      	movs	r3, #23
   1b9c4:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1b9c6:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   1b9c8:	f00b fca1 	bl	2730e <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1b9cc:	4904      	ldr	r1, [pc, #16]	; (1b9e0 <bt_att_connected+0x40>)
   1b9ce:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   1b9d2:	f00e fd41 	bl	2a458 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   1b9d6:	6820      	ldr	r0, [r4, #0]
   1b9d8:	f001 ff38 	bl	1d84c <bt_gatt_connected>
}
   1b9dc:	bd10      	pop	{r4, pc}
   1b9de:	bf00      	nop
   1b9e0:	0001c65d 	.word	0x0001c65d

0001b9e4 <bt_att_chan_create_pdu>:
{
   1b9e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b9e8:	b089      	sub	sp, #36	; 0x24
   1b9ea:	af00      	add	r7, sp, #0
   1b9ec:	460c      	mov	r4, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1b9ee:	1c53      	adds	r3, r2, #1
   1b9f0:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1b9f2:	428b      	cmp	r3, r1
   1b9f4:	d80b      	bhi.n	1ba0e <bt_att_chan_create_pdu+0x2a>
	switch (att_op_get_type(op)) {
   1b9f6:	4620      	mov	r0, r4
   1b9f8:	f7ff fb78 	bl	1b0ec <att_op_get_type>
   1b9fc:	2802      	cmp	r0, #2
   1b9fe:	d04b      	beq.n	1ba98 <bt_att_chan_create_pdu+0xb4>
   1ba00:	2804      	cmp	r0, #4
   1ba02:	d049      	beq.n	1ba98 <bt_att_chan_create_pdu+0xb4>
		timeout = K_FOREVER;
   1ba04:	f04f 38ff 	mov.w	r8, #4294967295
   1ba08:	f04f 39ff 	mov.w	r9, #4294967295
   1ba0c:	e048      	b.n	1baa0 <bt_att_chan_create_pdu+0xbc>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   1ba0e:	466d      	mov	r5, sp
   1ba10:	b088      	sub	sp, #32
   1ba12:	466c      	mov	r4, sp
   1ba14:	f114 0210 	adds.w	r2, r4, #16
   1ba18:	d012      	beq.n	1ba40 <bt_att_chan_create_pdu+0x5c>
   1ba1a:	2010      	movs	r0, #16
   1ba1c:	b162      	cbz	r2, 1ba38 <bt_att_chan_create_pdu+0x54>
   1ba1e:	4606      	mov	r6, r0
   1ba20:	2804      	cmp	r0, #4
   1ba22:	dd03      	ble.n	1ba2c <bt_att_chan_create_pdu+0x48>
   1ba24:	f8df c17c 	ldr.w	ip, [pc, #380]	; 1bba4 <bt_att_chan_create_pdu+0x1c0>
   1ba28:	f8c4 c014 	str.w	ip, [r4, #20]
   1ba2c:	2e08      	cmp	r6, #8
   1ba2e:	dd00      	ble.n	1ba32 <bt_att_chan_create_pdu+0x4e>
   1ba30:	61a1      	str	r1, [r4, #24]
   1ba32:	2e0c      	cmp	r6, #12
   1ba34:	dd07      	ble.n	1ba46 <bt_att_chan_create_pdu+0x62>
   1ba36:	61e3      	str	r3, [r4, #28]
   1ba38:	280f      	cmp	r0, #15
   1ba3a:	dd2a      	ble.n	1ba92 <bt_att_chan_create_pdu+0xae>
   1ba3c:	2310      	movs	r3, #16
   1ba3e:	e004      	b.n	1ba4a <bt_att_chan_create_pdu+0x66>
   1ba40:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1ba44:	e7ea      	b.n	1ba1c <bt_att_chan_create_pdu+0x38>
   1ba46:	f06f 031b 	mvn.w	r3, #27
   1ba4a:	b13a      	cbz	r2, 1ba5c <bt_att_chan_create_pdu+0x78>
   1ba4c:	2104      	movs	r1, #4
   1ba4e:	7139      	strb	r1, [r7, #4]
   1ba50:	2100      	movs	r1, #0
   1ba52:	7179      	strb	r1, [r7, #5]
   1ba54:	71b9      	strb	r1, [r7, #6]
   1ba56:	71f9      	strb	r1, [r7, #7]
   1ba58:	6878      	ldr	r0, [r7, #4]
   1ba5a:	6120      	str	r0, [r4, #16]
   1ba5c:	2100      	movs	r1, #0
   1ba5e:	f36f 0100 	bfc	r1, #0, #1
   1ba62:	f36f 0141 	bfc	r1, #1, #1
   1ba66:	f36f 0182 	bfc	r1, #2, #1
   1ba6a:	f36f 01c5 	bfc	r1, #3, #3
   1ba6e:	2002      	movs	r0, #2
   1ba70:	f360 1188 	bfi	r1, r0, #6, #3
   1ba74:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
   1ba78:	f363 2152 	bfi	r1, r3, #9, #10
   1ba7c:	f36f 41de 	bfc	r1, #19, #12
   1ba80:	f36f 71df 	bfc	r1, #31, #1
   1ba84:	2300      	movs	r3, #0
   1ba86:	4848      	ldr	r0, [pc, #288]	; (1bba8 <bt_att_chan_create_pdu+0x1c4>)
   1ba88:	f009 fe93 	bl	257b2 <z_impl_z_log_msg_static_create>
   1ba8c:	46ad      	mov	sp, r5
		return NULL;
   1ba8e:	2500      	movs	r5, #0
   1ba90:	e01c      	b.n	1bacc <bt_att_chan_create_pdu+0xe8>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   1ba92:	f06f 031b 	mvn.w	r3, #27
   1ba96:	e7d8      	b.n	1ba4a <bt_att_chan_create_pdu+0x66>
		timeout = BT_ATT_TIMEOUT;
   1ba98:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   1ba9c:	f04f 0900 	mov.w	r9, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1baa0:	4642      	mov	r2, r8
   1baa2:	464b      	mov	r3, r9
   1baa4:	2100      	movs	r1, #0
   1baa6:	4608      	mov	r0, r1
   1baa8:	f00a fff2 	bl	26a90 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1baac:	4605      	mov	r5, r0
   1baae:	b190      	cbz	r0, 1bad6 <bt_att_chan_create_pdu+0xf2>
	data = tx_meta_data_alloc(timeout);
   1bab0:	4640      	mov	r0, r8
   1bab2:	4649      	mov	r1, r9
   1bab4:	f7ff fb8c 	bl	1b1d0 <tx_meta_data_alloc>
	if (!data) {
   1bab8:	4606      	mov	r6, r0
   1baba:	2800      	cmp	r0, #0
   1babc:	d04c      	beq.n	1bb58 <bt_att_chan_create_pdu+0x174>
	bt_att_tx_meta_data(buf) = data;
   1babe:	61a8      	str	r0, [r5, #24]
   1bac0:	2101      	movs	r1, #1
   1bac2:	f105 000c 	add.w	r0, r5, #12
   1bac6:	f00c fc68 	bl	2839a <net_buf_simple_add>
	hdr->code = op;
   1baca:	7004      	strb	r4, [r0, #0]
}
   1bacc:	4628      	mov	r0, r5
   1bace:	3724      	adds	r7, #36	; 0x24
   1bad0:	46bd      	mov	sp, r7
   1bad2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1bad6:	466e      	mov	r6, sp
   1bad8:	b088      	sub	sp, #32
   1bada:	466b      	mov	r3, sp
   1badc:	f113 0210 	adds.w	r2, r3, #16
   1bae0:	d00f      	beq.n	1bb02 <bt_att_chan_create_pdu+0x11e>
   1bae2:	210c      	movs	r1, #12
   1bae4:	b14a      	cbz	r2, 1bafa <bt_att_chan_create_pdu+0x116>
   1bae6:	4608      	mov	r0, r1
   1bae8:	2904      	cmp	r1, #4
   1baea:	dd03      	ble.n	1baf4 <bt_att_chan_create_pdu+0x110>
   1baec:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 1bbac <bt_att_chan_create_pdu+0x1c8>
   1baf0:	f8c3 c014 	str.w	ip, [r3, #20]
   1baf4:	2808      	cmp	r0, #8
   1baf6:	dd07      	ble.n	1bb08 <bt_att_chan_create_pdu+0x124>
   1baf8:	619c      	str	r4, [r3, #24]
   1bafa:	290b      	cmp	r1, #11
   1bafc:	dd29      	ble.n	1bb52 <bt_att_chan_create_pdu+0x16e>
   1bafe:	240c      	movs	r4, #12
   1bb00:	e004      	b.n	1bb0c <bt_att_chan_create_pdu+0x128>
   1bb02:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1bb06:	e7ed      	b.n	1bae4 <bt_att_chan_create_pdu+0x100>
   1bb08:	f06f 041b 	mvn.w	r4, #27
   1bb0c:	b13a      	cbz	r2, 1bb1e <bt_att_chan_create_pdu+0x13a>
   1bb0e:	2103      	movs	r1, #3
   1bb10:	7139      	strb	r1, [r7, #4]
   1bb12:	2100      	movs	r1, #0
   1bb14:	7179      	strb	r1, [r7, #5]
   1bb16:	71b9      	strb	r1, [r7, #6]
   1bb18:	71f9      	strb	r1, [r7, #7]
   1bb1a:	6878      	ldr	r0, [r7, #4]
   1bb1c:	6118      	str	r0, [r3, #16]
   1bb1e:	2100      	movs	r1, #0
   1bb20:	f36f 0100 	bfc	r1, #0, #1
   1bb24:	f36f 0141 	bfc	r1, #1, #1
   1bb28:	f36f 0182 	bfc	r1, #2, #1
   1bb2c:	f36f 01c5 	bfc	r1, #3, #3
   1bb30:	2301      	movs	r3, #1
   1bb32:	f363 1188 	bfi	r1, r3, #6, #3
   1bb36:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1bb3a:	f363 2152 	bfi	r1, r3, #9, #10
   1bb3e:	f36f 41de 	bfc	r1, #19, #12
   1bb42:	f36f 71df 	bfc	r1, #31, #1
   1bb46:	2300      	movs	r3, #0
   1bb48:	4817      	ldr	r0, [pc, #92]	; (1bba8 <bt_att_chan_create_pdu+0x1c4>)
   1bb4a:	f009 fe32 	bl	257b2 <z_impl_z_log_msg_static_create>
   1bb4e:	46b5      	mov	sp, r6
		return NULL;
   1bb50:	e7bc      	b.n	1bacc <bt_att_chan_create_pdu+0xe8>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1bb52:	f06f 041b 	mvn.w	r4, #27
   1bb56:	e7d9      	b.n	1bb0c <bt_att_chan_create_pdu+0x128>
		LOG_WRN("Unable to allocate ATT TX meta");
   1bb58:	4b15      	ldr	r3, [pc, #84]	; (1bbb0 <bt_att_chan_create_pdu+0x1cc>)
   1bb5a:	61fb      	str	r3, [r7, #28]
   1bb5c:	2202      	movs	r2, #2
   1bb5e:	713a      	strb	r2, [r7, #4]
   1bb60:	2300      	movs	r3, #0
   1bb62:	717b      	strb	r3, [r7, #5]
   1bb64:	71bb      	strb	r3, [r7, #6]
   1bb66:	71fb      	strb	r3, [r7, #7]
   1bb68:	6879      	ldr	r1, [r7, #4]
   1bb6a:	61b9      	str	r1, [r7, #24]
   1bb6c:	4619      	mov	r1, r3
   1bb6e:	f363 0100 	bfi	r1, r3, #0, #1
   1bb72:	f363 0141 	bfi	r1, r3, #1, #1
   1bb76:	f363 0182 	bfi	r1, r3, #2, #1
   1bb7a:	f363 01c5 	bfi	r1, r3, #3, #3
   1bb7e:	f362 1188 	bfi	r1, r2, #6, #3
   1bb82:	2208      	movs	r2, #8
   1bb84:	f362 2152 	bfi	r1, r2, #9, #10
   1bb88:	f363 41de 	bfi	r1, r3, #19, #12
   1bb8c:	f363 71df 	bfi	r1, r3, #31, #1
   1bb90:	f107 0218 	add.w	r2, r7, #24
   1bb94:	4804      	ldr	r0, [pc, #16]	; (1bba8 <bt_att_chan_create_pdu+0x1c4>)
   1bb96:	f009 fe0c 	bl	257b2 <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   1bb9a:	4628      	mov	r0, r5
   1bb9c:	f00c fbb6 	bl	2830c <net_buf_unref>
		return NULL;
   1bba0:	4635      	mov	r5, r6
   1bba2:	e793      	b.n	1bacc <bt_att_chan_create_pdu+0xe8>
   1bba4:	0002cd7c 	.word	0x0002cd7c
   1bba8:	0002b164 	.word	0x0002b164
   1bbac:	0002cb50 	.word	0x0002cb50
   1bbb0:	0002cda4 	.word	0x0002cda4

0001bbb4 <bt_att_recv>:
{
   1bbb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bbb8:	b094      	sub	sp, #80	; 0x50
   1bbba:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   1bbbc:	8a0b      	ldrh	r3, [r1, #16]
   1bbbe:	b1c3      	cbz	r3, 1bbf2 <bt_att_recv+0x3e>
   1bbc0:	4606      	mov	r6, r0
   1bbc2:	460d      	mov	r5, r1
   1bbc4:	f1a0 0804 	sub.w	r8, r0, #4
	return net_buf_simple_pull_mem(&buf->b, len);
   1bbc8:	2101      	movs	r1, #1
   1bbca:	f105 000c 	add.w	r0, r5, #12
   1bbce:	f00c fc05 	bl	283dc <net_buf_simple_pull_mem>
   1bbd2:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1bbd4:	f856 3c04 	ldr.w	r3, [r6, #-4]
   1bbd8:	b36b      	cbz	r3, 1bc36 <bt_att_recv+0x82>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1bbda:	2300      	movs	r3, #0
   1bbdc:	2b0d      	cmp	r3, #13
   1bbde:	d860      	bhi.n	1bca2 <bt_att_recv+0xee>
		if (hdr->code == handlers[i].op) {
   1bbe0:	f894 c000 	ldrb.w	ip, [r4]
   1bbe4:	4aa1      	ldr	r2, [pc, #644]	; (1be6c <bt_att_recv+0x2b8>)
   1bbe6:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   1bbea:	4594      	cmp	ip, r2
   1bbec:	d028      	beq.n	1bc40 <bt_att_recv+0x8c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1bbee:	3301      	adds	r3, #1
   1bbf0:	e7f4      	b.n	1bbdc <bt_att_recv+0x28>
		LOG_ERR("Too small ATT PDU received");
   1bbf2:	4b9f      	ldr	r3, [pc, #636]	; (1be70 <bt_att_recv+0x2bc>)
   1bbf4:	64fb      	str	r3, [r7, #76]	; 0x4c
   1bbf6:	2302      	movs	r3, #2
   1bbf8:	713b      	strb	r3, [r7, #4]
   1bbfa:	2300      	movs	r3, #0
   1bbfc:	717b      	strb	r3, [r7, #5]
   1bbfe:	71bb      	strb	r3, [r7, #6]
   1bc00:	71fb      	strb	r3, [r7, #7]
   1bc02:	687a      	ldr	r2, [r7, #4]
   1bc04:	64ba      	str	r2, [r7, #72]	; 0x48
   1bc06:	4619      	mov	r1, r3
   1bc08:	f363 0100 	bfi	r1, r3, #0, #1
   1bc0c:	f363 0141 	bfi	r1, r3, #1, #1
   1bc10:	f363 0182 	bfi	r1, r3, #2, #1
   1bc14:	f363 01c5 	bfi	r1, r3, #3, #3
   1bc18:	2201      	movs	r2, #1
   1bc1a:	f362 1188 	bfi	r1, r2, #6, #3
   1bc1e:	2208      	movs	r2, #8
   1bc20:	f362 2152 	bfi	r1, r2, #9, #10
   1bc24:	f363 41de 	bfi	r1, r3, #19, #12
   1bc28:	f363 71df 	bfi	r1, r3, #31, #1
   1bc2c:	f107 0248 	add.w	r2, r7, #72	; 0x48
   1bc30:	4890      	ldr	r0, [pc, #576]	; (1be74 <bt_att_recv+0x2c0>)
   1bc32:	f009 fdbe 	bl	257b2 <z_impl_z_log_msg_static_create>
}
   1bc36:	2000      	movs	r0, #0
   1bc38:	3750      	adds	r7, #80	; 0x50
   1bc3a:	46bd      	mov	sp, r7
   1bc3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			handler = &handlers[i];
   1bc40:	4a8a      	ldr	r2, [pc, #552]	; (1be6c <bt_att_recv+0x2b8>)
   1bc42:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
		if (handler->type == ATT_REQUEST &&
   1bc46:	f899 a002 	ldrb.w	sl, [r9, #2]
   1bc4a:	f1ba 0f01 	cmp.w	sl, #1
   1bc4e:	d078      	beq.n	1bd42 <bt_att_recv+0x18e>
		} else if (handler->type == ATT_INDICATION &&
   1bc50:	f1ba 0f05 	cmp.w	sl, #5
   1bc54:	f000 809f 	beq.w	1bd96 <bt_att_recv+0x1e2>
	if (buf->len < handler->expect_len) {
   1bc58:	8a29      	ldrh	r1, [r5, #16]
   1bc5a:	f899 3001 	ldrb.w	r3, [r9, #1]
   1bc5e:	4299      	cmp	r1, r3
   1bc60:	f080 80fd 	bcs.w	1be5e <bt_att_recv+0x2aa>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1bc64:	f894 c000 	ldrb.w	ip, [r4]
   1bc68:	466d      	mov	r5, sp
   1bc6a:	b088      	sub	sp, #32
   1bc6c:	466b      	mov	r3, sp
   1bc6e:	f113 0210 	adds.w	r2, r3, #16
   1bc72:	f000 80ba 	beq.w	1bdea <bt_att_recv+0x236>
   1bc76:	2010      	movs	r0, #16
   1bc78:	b172      	cbz	r2, 1bc98 <bt_att_recv+0xe4>
   1bc7a:	4606      	mov	r6, r0
   1bc7c:	2804      	cmp	r0, #4
   1bc7e:	dd03      	ble.n	1bc88 <bt_att_recv+0xd4>
   1bc80:	f8df e1f4 	ldr.w	lr, [pc, #500]	; 1be78 <bt_att_recv+0x2c4>
   1bc84:	f8c3 e014 	str.w	lr, [r3, #20]
   1bc88:	2e08      	cmp	r6, #8
   1bc8a:	dd00      	ble.n	1bc8e <bt_att_recv+0xda>
   1bc8c:	6199      	str	r1, [r3, #24]
   1bc8e:	2e0c      	cmp	r6, #12
   1bc90:	f340 80ae 	ble.w	1bdf0 <bt_att_recv+0x23c>
   1bc94:	f8c3 c01c 	str.w	ip, [r3, #28]
   1bc98:	280f      	cmp	r0, #15
   1bc9a:	f340 80dd 	ble.w	1be58 <bt_att_recv+0x2a4>
   1bc9e:	2610      	movs	r6, #16
   1bca0:	e0a8      	b.n	1bdf4 <bt_att_recv+0x240>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   1bca2:	7826      	ldrb	r6, [r4, #0]
   1bca4:	466d      	mov	r5, sp
   1bca6:	b088      	sub	sp, #32
   1bca8:	466b      	mov	r3, sp
   1bcaa:	f113 0210 	adds.w	r2, r3, #16
   1bcae:	d00f      	beq.n	1bcd0 <bt_att_recv+0x11c>
   1bcb0:	210c      	movs	r1, #12
   1bcb2:	b14a      	cbz	r2, 1bcc8 <bt_att_recv+0x114>
   1bcb4:	4608      	mov	r0, r1
   1bcb6:	2904      	cmp	r1, #4
   1bcb8:	dd03      	ble.n	1bcc2 <bt_att_recv+0x10e>
   1bcba:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 1be7c <bt_att_recv+0x2c8>
   1bcbe:	f8c3 c014 	str.w	ip, [r3, #20]
   1bcc2:	2808      	cmp	r0, #8
   1bcc4:	dd07      	ble.n	1bcd6 <bt_att_recv+0x122>
   1bcc6:	619e      	str	r6, [r3, #24]
   1bcc8:	290b      	cmp	r1, #11
   1bcca:	dd37      	ble.n	1bd3c <bt_att_recv+0x188>
   1bccc:	260c      	movs	r6, #12
   1bcce:	e004      	b.n	1bcda <bt_att_recv+0x126>
   1bcd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1bcd4:	e7ed      	b.n	1bcb2 <bt_att_recv+0xfe>
   1bcd6:	f06f 061b 	mvn.w	r6, #27
   1bcda:	b13a      	cbz	r2, 1bcec <bt_att_recv+0x138>
   1bcdc:	2103      	movs	r1, #3
   1bcde:	7139      	strb	r1, [r7, #4]
   1bce0:	2100      	movs	r1, #0
   1bce2:	7179      	strb	r1, [r7, #5]
   1bce4:	71b9      	strb	r1, [r7, #6]
   1bce6:	71f9      	strb	r1, [r7, #7]
   1bce8:	6878      	ldr	r0, [r7, #4]
   1bcea:	6118      	str	r0, [r3, #16]
   1bcec:	2100      	movs	r1, #0
   1bcee:	f36f 0100 	bfc	r1, #0, #1
   1bcf2:	f36f 0141 	bfc	r1, #1, #1
   1bcf6:	f36f 0182 	bfc	r1, #2, #1
   1bcfa:	f36f 01c5 	bfc	r1, #3, #3
   1bcfe:	2302      	movs	r3, #2
   1bd00:	f363 1188 	bfi	r1, r3, #6, #3
   1bd04:	f406 737b 	and.w	r3, r6, #1004	; 0x3ec
   1bd08:	f363 2152 	bfi	r1, r3, #9, #10
   1bd0c:	f36f 41de 	bfc	r1, #19, #12
   1bd10:	f36f 71df 	bfc	r1, #31, #1
   1bd14:	2300      	movs	r3, #0
   1bd16:	4857      	ldr	r0, [pc, #348]	; (1be74 <bt_att_recv+0x2c0>)
   1bd18:	f009 fd4b 	bl	257b2 <z_impl_z_log_msg_static_create>
   1bd1c:	46ad      	mov	sp, r5
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1bd1e:	7824      	ldrb	r4, [r4, #0]
   1bd20:	4620      	mov	r0, r4
   1bd22:	f7ff f9e3 	bl	1b0ec <att_op_get_type>
   1bd26:	2800      	cmp	r0, #0
   1bd28:	d085      	beq.n	1bc36 <bt_att_recv+0x82>
   1bd2a:	2805      	cmp	r0, #5
   1bd2c:	d083      	beq.n	1bc36 <bt_att_recv+0x82>
			send_err_rsp(att_chan, hdr->code, 0,
   1bd2e:	2306      	movs	r3, #6
   1bd30:	2200      	movs	r2, #0
   1bd32:	4621      	mov	r1, r4
   1bd34:	4640      	mov	r0, r8
   1bd36:	f00b fb89 	bl	2744c <send_err_rsp>
		return 0;
   1bd3a:	e77c      	b.n	1bc36 <bt_att_recv+0x82>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   1bd3c:	f06f 061b 	mvn.w	r6, #27
   1bd40:	e7cb      	b.n	1bcda <bt_att_recv+0x126>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   1bd42:	2100      	movs	r1, #0
   1bd44:	f106 008c 	add.w	r0, r6, #140	; 0x8c
   1bd48:	f00b fb19 	bl	2737e <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   1bd4c:	2800      	cmp	r0, #0
   1bd4e:	f43f af7f 	beq.w	1bc50 <bt_att_recv+0x9c>
			LOG_WRN("Ignoring unexpected request");
   1bd52:	4b4b      	ldr	r3, [pc, #300]	; (1be80 <bt_att_recv+0x2cc>)
   1bd54:	61fb      	str	r3, [r7, #28]
   1bd56:	2202      	movs	r2, #2
   1bd58:	713a      	strb	r2, [r7, #4]
   1bd5a:	2300      	movs	r3, #0
   1bd5c:	717b      	strb	r3, [r7, #5]
   1bd5e:	71bb      	strb	r3, [r7, #6]
   1bd60:	71fb      	strb	r3, [r7, #7]
   1bd62:	6879      	ldr	r1, [r7, #4]
   1bd64:	61b9      	str	r1, [r7, #24]
   1bd66:	4619      	mov	r1, r3
   1bd68:	f363 0100 	bfi	r1, r3, #0, #1
   1bd6c:	f363 0141 	bfi	r1, r3, #1, #1
   1bd70:	f363 0182 	bfi	r1, r3, #2, #1
   1bd74:	f363 01c5 	bfi	r1, r3, #3, #3
   1bd78:	f362 1188 	bfi	r1, r2, #6, #3
   1bd7c:	2208      	movs	r2, #8
   1bd7e:	f362 2152 	bfi	r1, r2, #9, #10
   1bd82:	f363 41de 	bfi	r1, r3, #19, #12
   1bd86:	f363 71df 	bfi	r1, r3, #31, #1
   1bd8a:	f107 0218 	add.w	r2, r7, #24
   1bd8e:	4839      	ldr	r0, [pc, #228]	; (1be74 <bt_att_recv+0x2c0>)
   1bd90:	f009 fd0f 	bl	257b2 <z_impl_z_log_msg_static_create>
			return 0;
   1bd94:	e74f      	b.n	1bc36 <bt_att_recv+0x82>
			   atomic_test_and_set_bit(att_chan->flags,
   1bd96:	2101      	movs	r1, #1
   1bd98:	f106 008c 	add.w	r0, r6, #140	; 0x8c
   1bd9c:	f00b faef 	bl	2737e <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   1bda0:	2800      	cmp	r0, #0
   1bda2:	f43f af59 	beq.w	1bc58 <bt_att_recv+0xa4>
			LOG_WRN("Ignoring unexpected indication");
   1bda6:	4b37      	ldr	r3, [pc, #220]	; (1be84 <bt_att_recv+0x2d0>)
   1bda8:	637b      	str	r3, [r7, #52]	; 0x34
   1bdaa:	2202      	movs	r2, #2
   1bdac:	713a      	strb	r2, [r7, #4]
   1bdae:	2300      	movs	r3, #0
   1bdb0:	717b      	strb	r3, [r7, #5]
   1bdb2:	71bb      	strb	r3, [r7, #6]
   1bdb4:	71fb      	strb	r3, [r7, #7]
   1bdb6:	6879      	ldr	r1, [r7, #4]
   1bdb8:	6339      	str	r1, [r7, #48]	; 0x30
   1bdba:	4619      	mov	r1, r3
   1bdbc:	f363 0100 	bfi	r1, r3, #0, #1
   1bdc0:	f363 0141 	bfi	r1, r3, #1, #1
   1bdc4:	f363 0182 	bfi	r1, r3, #2, #1
   1bdc8:	f363 01c5 	bfi	r1, r3, #3, #3
   1bdcc:	f362 1188 	bfi	r1, r2, #6, #3
   1bdd0:	2208      	movs	r2, #8
   1bdd2:	f362 2152 	bfi	r1, r2, #9, #10
   1bdd6:	f363 41de 	bfi	r1, r3, #19, #12
   1bdda:	f363 71df 	bfi	r1, r3, #31, #1
   1bdde:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1bde2:	4824      	ldr	r0, [pc, #144]	; (1be74 <bt_att_recv+0x2c0>)
   1bde4:	f009 fce5 	bl	257b2 <z_impl_z_log_msg_static_create>
			return 0;
   1bde8:	e725      	b.n	1bc36 <bt_att_recv+0x82>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1bdea:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1bdee:	e743      	b.n	1bc78 <bt_att_recv+0xc4>
   1bdf0:	f06f 061b 	mvn.w	r6, #27
   1bdf4:	b13a      	cbz	r2, 1be06 <bt_att_recv+0x252>
   1bdf6:	2104      	movs	r1, #4
   1bdf8:	7139      	strb	r1, [r7, #4]
   1bdfa:	2100      	movs	r1, #0
   1bdfc:	7179      	strb	r1, [r7, #5]
   1bdfe:	71b9      	strb	r1, [r7, #6]
   1be00:	71f9      	strb	r1, [r7, #7]
   1be02:	6878      	ldr	r0, [r7, #4]
   1be04:	6118      	str	r0, [r3, #16]
   1be06:	2100      	movs	r1, #0
   1be08:	f36f 0100 	bfc	r1, #0, #1
   1be0c:	f36f 0141 	bfc	r1, #1, #1
   1be10:	f36f 0182 	bfc	r1, #2, #1
   1be14:	f36f 01c5 	bfc	r1, #3, #3
   1be18:	2301      	movs	r3, #1
   1be1a:	f363 1188 	bfi	r1, r3, #6, #3
   1be1e:	f406 737d 	and.w	r3, r6, #1012	; 0x3f4
   1be22:	f363 2152 	bfi	r1, r3, #9, #10
   1be26:	f36f 41de 	bfc	r1, #19, #12
   1be2a:	f36f 71df 	bfc	r1, #31, #1
   1be2e:	2300      	movs	r3, #0
   1be30:	4810      	ldr	r0, [pc, #64]	; (1be74 <bt_att_recv+0x2c0>)
   1be32:	f009 fcbe 	bl	257b2 <z_impl_z_log_msg_static_create>
   1be36:	46ad      	mov	sp, r5
		err = BT_ATT_ERR_INVALID_PDU;
   1be38:	2004      	movs	r0, #4
	if (handler->type == ATT_REQUEST && err) {
   1be3a:	f899 3002 	ldrb.w	r3, [r9, #2]
   1be3e:	2b01      	cmp	r3, #1
   1be40:	f47f aef9 	bne.w	1bc36 <bt_att_recv+0x82>
   1be44:	2800      	cmp	r0, #0
   1be46:	f43f aef6 	beq.w	1bc36 <bt_att_recv+0x82>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1be4a:	4603      	mov	r3, r0
   1be4c:	2200      	movs	r2, #0
   1be4e:	7821      	ldrb	r1, [r4, #0]
   1be50:	4640      	mov	r0, r8
   1be52:	f00b fafb 	bl	2744c <send_err_rsp>
   1be56:	e6ee      	b.n	1bc36 <bt_att_recv+0x82>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1be58:	f06f 061b 	mvn.w	r6, #27
   1be5c:	e7ca      	b.n	1bdf4 <bt_att_recv+0x240>
		err = handler->func(att_chan, buf);
   1be5e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1be62:	4629      	mov	r1, r5
   1be64:	4640      	mov	r0, r8
   1be66:	4798      	blx	r3
   1be68:	e7e7      	b.n	1be3a <bt_att_recv+0x286>
   1be6a:	bf00      	nop
   1be6c:	0002ce98 	.word	0x0002ce98
   1be70:	0002cdc4 	.word	0x0002cdc4
   1be74:	0002b164 	.word	0x0002b164
   1be78:	0002ce38 	.word	0x0002ce38
   1be7c:	0002cde0 	.word	0x0002cde0
   1be80:	0002cdfc 	.word	0x0002cdfc
   1be84:	0002ce18 	.word	0x0002ce18

0001be88 <att_write_rsp>:
{
   1be88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1be8c:	b08a      	sub	sp, #40	; 0x28
   1be8e:	4604      	mov	r4, r0
   1be90:	4617      	mov	r7, r2
   1be92:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1be94:	6803      	ldr	r3, [r0, #0]
   1be96:	4688      	mov	r8, r1
   1be98:	3900      	subs	r1, #0
   1be9a:	bf18      	it	ne
   1be9c:	2101      	movne	r1, #1
   1be9e:	6818      	ldr	r0, [r3, #0]
   1bea0:	f00c f888 	bl	27fb4 <bt_gatt_change_aware>
   1bea4:	b128      	cbz	r0, 1beb2 <att_write_rsp+0x2a>
	if (!handle) {
   1bea6:	b975      	cbnz	r5, 1bec6 <att_write_rsp+0x3e>
		return BT_ATT_ERR_INVALID_HANDLE;
   1bea8:	2601      	movs	r6, #1
}
   1beaa:	4630      	mov	r0, r6
   1beac:	b00a      	add	sp, #40	; 0x28
   1beae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1beb2:	2105      	movs	r1, #5
   1beb4:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1beb8:	f00b fa61 	bl	2737e <atomic_test_and_set_bit>
   1bebc:	b108      	cbz	r0, 1bec2 <att_write_rsp+0x3a>
			return 0;
   1bebe:	2600      	movs	r6, #0
   1bec0:	e7f3      	b.n	1beaa <att_write_rsp+0x22>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1bec2:	2612      	movs	r6, #18
   1bec4:	e7f1      	b.n	1beaa <att_write_rsp+0x22>
	(void)memset(&data, 0, sizeof(data));
   1bec6:	2218      	movs	r2, #24
   1bec8:	2100      	movs	r1, #0
   1beca:	a804      	add	r0, sp, #16
   1becc:	f00a f8da 	bl	26084 <memset>
	if (rsp) {
   1bed0:	b13f      	cbz	r7, 1bee2 <att_write_rsp+0x5a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1bed2:	2200      	movs	r2, #0
   1bed4:	4639      	mov	r1, r7
   1bed6:	4620      	mov	r0, r4
   1bed8:	f7ff fd84 	bl	1b9e4 <bt_att_chan_create_pdu>
   1bedc:	9005      	str	r0, [sp, #20]
		if (!data.buf) {
   1bede:	2800      	cmp	r0, #0
   1bee0:	d03e      	beq.n	1bf60 <att_write_rsp+0xd8>
	data.conn = chan->att->conn;
   1bee2:	6823      	ldr	r3, [r4, #0]
   1bee4:	681b      	ldr	r3, [r3, #0]
   1bee6:	9304      	str	r3, [sp, #16]
	data.req = req;
   1bee8:	f88d 8018 	strb.w	r8, [sp, #24]
	data.offset = offset;
   1beec:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   1bef0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	data.value = value;
   1bef4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1bef6:	9307      	str	r3, [sp, #28]
	data.len = len;
   1bef8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1befc:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1bf00:	2301      	movs	r3, #1
   1bf02:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1bf06:	ab04      	add	r3, sp, #16
   1bf08:	9302      	str	r3, [sp, #8]
   1bf0a:	4b16      	ldr	r3, [pc, #88]	; (1bf64 <att_write_rsp+0xdc>)
   1bf0c:	9301      	str	r3, [sp, #4]
   1bf0e:	2200      	movs	r2, #0
   1bf10:	9200      	str	r2, [sp, #0]
   1bf12:	4613      	mov	r3, r2
   1bf14:	4629      	mov	r1, r5
   1bf16:	4628      	mov	r0, r5
   1bf18:	f000 ff42 	bl	1cda0 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1bf1c:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   1bf20:	b936      	cbnz	r6, 1bf30 <att_write_rsp+0xa8>
	if (data.buf) {
   1bf22:	9905      	ldr	r1, [sp, #20]
   1bf24:	2900      	cmp	r1, #0
   1bf26:	d0c0      	beq.n	1beaa <att_write_rsp+0x22>
		bt_att_chan_send_rsp(chan, data.buf);
   1bf28:	4620      	mov	r0, r4
   1bf2a:	f00b f886 	bl	2703a <bt_att_chan_send_rsp>
   1bf2e:	e7bc      	b.n	1beaa <att_write_rsp+0x22>
		if (rsp) {
   1bf30:	b927      	cbnz	r7, 1bf3c <att_write_rsp+0xb4>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1bf32:	f1b8 0f18 	cmp.w	r8, #24
   1bf36:	d010      	beq.n	1bf5a <att_write_rsp+0xd2>
   1bf38:	2600      	movs	r6, #0
   1bf3a:	e7b6      	b.n	1beaa <att_write_rsp+0x22>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1bf3c:	9b05      	ldr	r3, [sp, #20]
   1bf3e:	6998      	ldr	r0, [r3, #24]
   1bf40:	f7ff fac2 	bl	1b4c8 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1bf44:	9805      	ldr	r0, [sp, #20]
   1bf46:	f00c f9e1 	bl	2830c <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   1bf4a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   1bf4e:	462a      	mov	r2, r5
   1bf50:	4641      	mov	r1, r8
   1bf52:	4620      	mov	r0, r4
   1bf54:	f00b fa7a 	bl	2744c <send_err_rsp>
   1bf58:	e7eb      	b.n	1bf32 <att_write_rsp+0xaa>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1bf5a:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   1bf5e:	e7a4      	b.n	1beaa <att_write_rsp+0x22>
			return BT_ATT_ERR_UNLIKELY;
   1bf60:	260e      	movs	r6, #14
   1bf62:	e7a2      	b.n	1beaa <att_write_rsp+0x22>
   1bf64:	00026fdb 	.word	0x00026fdb

0001bf68 <bt_att_create_pdu>:
{
   1bf68:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bf6a:	b083      	sub	sp, #12
   1bf6c:	af00      	add	r7, sp, #0
   1bf6e:	460e      	mov	r6, r1
   1bf70:	4615      	mov	r5, r2
	att = att_get(conn);
   1bf72:	f7ff f937 	bl	1b1e4 <att_get>
	if (!att) {
   1bf76:	4604      	mov	r4, r0
   1bf78:	b300      	cbz	r0, 1bfbc <bt_att_create_pdu+0x54>
	return list->head;
   1bf7a:	6a44      	ldr	r4, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1bf7c:	b314      	cbz	r4, 1bfc4 <bt_att_create_pdu+0x5c>
   1bf7e:	3ce0      	subs	r4, #224	; 0xe0
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bf80:	f114 00e0 	adds.w	r0, r4, #224	; 0xe0
   1bf84:	d007      	beq.n	1bf96 <bt_att_create_pdu+0x2e>
	return node->next;
   1bf86:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
   1bf8a:	b120      	cbz	r0, 1bf96 <bt_att_create_pdu+0x2e>
   1bf8c:	38e0      	subs	r0, #224	; 0xe0
   1bf8e:	e002      	b.n	1bf96 <bt_att_create_pdu+0x2e>
   1bf90:	4603      	mov	r3, r0
   1bf92:	4604      	mov	r4, r0
   1bf94:	4618      	mov	r0, r3
   1bf96:	b1bc      	cbz	r4, 1bfc8 <bt_att_create_pdu+0x60>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1bf98:	1c6b      	adds	r3, r5, #1
   1bf9a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
   1bf9c:	4293      	cmp	r3, r2
   1bf9e:	d907      	bls.n	1bfb0 <bt_att_create_pdu+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1bfa0:	2800      	cmp	r0, #0
   1bfa2:	d0f5      	beq.n	1bf90 <bt_att_create_pdu+0x28>
   1bfa4:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
   1bfa8:	2b00      	cmp	r3, #0
   1bfaa:	d0f2      	beq.n	1bf92 <bt_att_create_pdu+0x2a>
   1bfac:	3be0      	subs	r3, #224	; 0xe0
   1bfae:	e7f0      	b.n	1bf92 <bt_att_create_pdu+0x2a>
		return bt_att_chan_create_pdu(chan, op, len);
   1bfb0:	462a      	mov	r2, r5
   1bfb2:	4631      	mov	r1, r6
   1bfb4:	4620      	mov	r0, r4
   1bfb6:	f7ff fd15 	bl	1b9e4 <bt_att_chan_create_pdu>
   1bfba:	4604      	mov	r4, r0
}
   1bfbc:	4620      	mov	r0, r4
   1bfbe:	370c      	adds	r7, #12
   1bfc0:	46bd      	mov	sp, r7
   1bfc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1bfc4:	4620      	mov	r0, r4
   1bfc6:	e7e6      	b.n	1bf96 <bt_att_create_pdu+0x2e>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   1bfc8:	3501      	adds	r5, #1
   1bfca:	466e      	mov	r6, sp
   1bfcc:	b088      	sub	sp, #32
   1bfce:	466b      	mov	r3, sp
   1bfd0:	f113 0210 	adds.w	r2, r3, #16
   1bfd4:	d031      	beq.n	1c03a <bt_att_create_pdu+0xd2>
   1bfd6:	210c      	movs	r1, #12
   1bfd8:	b14a      	cbz	r2, 1bfee <bt_att_create_pdu+0x86>
   1bfda:	4608      	mov	r0, r1
   1bfdc:	2904      	cmp	r1, #4
   1bfde:	dd03      	ble.n	1bfe8 <bt_att_create_pdu+0x80>
   1bfe0:	f8df c064 	ldr.w	ip, [pc, #100]	; 1c048 <bt_att_create_pdu+0xe0>
   1bfe4:	f8c3 c014 	str.w	ip, [r3, #20]
   1bfe8:	2808      	cmp	r0, #8
   1bfea:	dd00      	ble.n	1bfee <bt_att_create_pdu+0x86>
   1bfec:	619d      	str	r5, [r3, #24]
   1bfee:	290b      	cmp	r1, #11
   1bff0:	dd26      	ble.n	1c040 <bt_att_create_pdu+0xd8>
   1bff2:	250c      	movs	r5, #12
   1bff4:	b13a      	cbz	r2, 1c006 <bt_att_create_pdu+0x9e>
   1bff6:	2103      	movs	r1, #3
   1bff8:	7139      	strb	r1, [r7, #4]
   1bffa:	2100      	movs	r1, #0
   1bffc:	7179      	strb	r1, [r7, #5]
   1bffe:	71b9      	strb	r1, [r7, #6]
   1c000:	71f9      	strb	r1, [r7, #7]
   1c002:	6878      	ldr	r0, [r7, #4]
   1c004:	6118      	str	r0, [r3, #16]
   1c006:	2100      	movs	r1, #0
   1c008:	f36f 0100 	bfc	r1, #0, #1
   1c00c:	f36f 0141 	bfc	r1, #1, #1
   1c010:	f36f 0182 	bfc	r1, #2, #1
   1c014:	f36f 01c5 	bfc	r1, #3, #3
   1c018:	2302      	movs	r3, #2
   1c01a:	f363 1188 	bfi	r1, r3, #6, #3
   1c01e:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   1c022:	f363 2152 	bfi	r1, r3, #9, #10
   1c026:	f36f 41de 	bfc	r1, #19, #12
   1c02a:	f36f 71df 	bfc	r1, #31, #1
   1c02e:	2300      	movs	r3, #0
   1c030:	4806      	ldr	r0, [pc, #24]	; (1c04c <bt_att_create_pdu+0xe4>)
   1c032:	f009 fbbe 	bl	257b2 <z_impl_z_log_msg_static_create>
   1c036:	46b5      	mov	sp, r6
	return NULL;
   1c038:	e7c0      	b.n	1bfbc <bt_att_create_pdu+0x54>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   1c03a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1c03e:	e7cb      	b.n	1bfd8 <bt_att_create_pdu+0x70>
   1c040:	f06f 051b 	mvn.w	r5, #27
   1c044:	e7d6      	b.n	1bff4 <bt_att_create_pdu+0x8c>
   1c046:	bf00      	nop
   1c048:	0002ce58 	.word	0x0002ce58
   1c04c:	0002b164 	.word	0x0002b164

0001c050 <att_read_group_rsp>:
{
   1c050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c054:	b08a      	sub	sp, #40	; 0x28
   1c056:	4604      	mov	r4, r0
   1c058:	460f      	mov	r7, r1
   1c05a:	4615      	mov	r5, r2
   1c05c:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1c05e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1c062:	2214      	movs	r2, #20
   1c064:	2100      	movs	r1, #0
   1c066:	eb0d 0002 	add.w	r0, sp, r2
   1c06a:	f00a f80b 	bl	26084 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1c06e:	2201      	movs	r2, #1
   1c070:	2111      	movs	r1, #17
   1c072:	4640      	mov	r0, r8
   1c074:	f7ff ff78 	bl	1bf68 <bt_att_create_pdu>
   1c078:	9007      	str	r0, [sp, #28]
	if (!data.buf) {
   1c07a:	b368      	cbz	r0, 1c0d8 <att_read_group_rsp+0x88>
	data.chan = chan;
   1c07c:	9405      	str	r4, [sp, #20]
	data.uuid = uuid;
   1c07e:	9706      	str	r7, [sp, #24]
	return net_buf_simple_add(&buf->b, len);
   1c080:	2101      	movs	r1, #1
   1c082:	300c      	adds	r0, #12
   1c084:	f00c f989 	bl	2839a <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1c088:	9008      	str	r0, [sp, #32]
	data.rsp->len = 0U;
   1c08a:	2200      	movs	r2, #0
   1c08c:	7002      	strb	r2, [r0, #0]
	data.group = NULL;
   1c08e:	9209      	str	r2, [sp, #36]	; 0x24
   1c090:	ab05      	add	r3, sp, #20
   1c092:	9302      	str	r3, [sp, #8]
   1c094:	4b11      	ldr	r3, [pc, #68]	; (1c0dc <att_read_group_rsp+0x8c>)
   1c096:	9301      	str	r3, [sp, #4]
   1c098:	9200      	str	r2, [sp, #0]
   1c09a:	4613      	mov	r3, r2
   1c09c:	4631      	mov	r1, r6
   1c09e:	4628      	mov	r0, r5
   1c0a0:	f000 fe7e 	bl	1cda0 <bt_gatt_foreach_attr_type>
	if (!data.rsp->len) {
   1c0a4:	9b08      	ldr	r3, [sp, #32]
   1c0a6:	781e      	ldrb	r6, [r3, #0]
   1c0a8:	b146      	cbz	r6, 1c0bc <att_read_group_rsp+0x6c>
	bt_att_chan_send_rsp(chan, data.buf);
   1c0aa:	9907      	ldr	r1, [sp, #28]
   1c0ac:	4620      	mov	r0, r4
   1c0ae:	f00a ffc4 	bl	2703a <bt_att_chan_send_rsp>
	return 0;
   1c0b2:	2600      	movs	r6, #0
}
   1c0b4:	4630      	mov	r0, r6
   1c0b6:	b00a      	add	sp, #40	; 0x28
   1c0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1c0bc:	9b07      	ldr	r3, [sp, #28]
   1c0be:	6998      	ldr	r0, [r3, #24]
   1c0c0:	f7ff fa02 	bl	1b4c8 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1c0c4:	9807      	ldr	r0, [sp, #28]
   1c0c6:	f00c f921 	bl	2830c <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   1c0ca:	230a      	movs	r3, #10
   1c0cc:	462a      	mov	r2, r5
   1c0ce:	2110      	movs	r1, #16
   1c0d0:	4620      	mov	r0, r4
   1c0d2:	f00b f9bb 	bl	2744c <send_err_rsp>
		return 0;
   1c0d6:	e7ed      	b.n	1c0b4 <att_read_group_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
   1c0d8:	260e      	movs	r6, #14
   1c0da:	e7eb      	b.n	1c0b4 <att_read_group_rsp+0x64>
   1c0dc:	0001b5c5 	.word	0x0001b5c5

0001c0e0 <att_read_mult_vl_req>:
{
   1c0e0:	b570      	push	{r4, r5, r6, lr}
   1c0e2:	b088      	sub	sp, #32
   1c0e4:	4606      	mov	r6, r0
   1c0e6:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
   1c0e8:	6844      	ldr	r4, [r0, #4]
	if (!bt_gatt_change_aware(conn, true)) {
   1c0ea:	2101      	movs	r1, #1
   1c0ec:	4620      	mov	r0, r4
   1c0ee:	f00b ff61 	bl	27fb4 <bt_gatt_change_aware>
   1c0f2:	b950      	cbnz	r0, 1c10a <att_read_mult_vl_req+0x2a>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1c0f4:	2105      	movs	r1, #5
   1c0f6:	f106 0090 	add.w	r0, r6, #144	; 0x90
   1c0fa:	f00b f940 	bl	2737e <atomic_test_and_set_bit>
   1c0fe:	b110      	cbz	r0, 1c106 <att_read_mult_vl_req+0x26>
			return 0;
   1c100:	2000      	movs	r0, #0
}
   1c102:	b008      	add	sp, #32
   1c104:	bd70      	pop	{r4, r5, r6, pc}
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1c106:	2012      	movs	r0, #18
   1c108:	e7fb      	b.n	1c102 <att_read_mult_vl_req+0x22>
	(void)memset(&data, 0, sizeof(data));
   1c10a:	2210      	movs	r2, #16
   1c10c:	2100      	movs	r1, #0
   1c10e:	eb0d 0002 	add.w	r0, sp, r2
   1c112:	f009 ffb7 	bl	26084 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   1c116:	2200      	movs	r2, #0
   1c118:	2121      	movs	r1, #33	; 0x21
   1c11a:	4620      	mov	r0, r4
   1c11c:	f7ff ff24 	bl	1bf68 <bt_att_create_pdu>
   1c120:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1c122:	b378      	cbz	r0, 1c184 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   1c124:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
   1c126:	8a2b      	ldrh	r3, [r5, #16]
   1c128:	2b01      	cmp	r3, #1
   1c12a:	d925      	bls.n	1c178 <att_read_mult_vl_req+0x98>
	return net_buf_simple_pull_le16(&buf->b);
   1c12c:	f105 000c 	add.w	r0, r5, #12
   1c130:	f00c f964 	bl	283fc <net_buf_simple_pull_le16>
   1c134:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1c136:	2301      	movs	r3, #1
   1c138:	f88d 301c 	strb.w	r3, [sp, #28]
   1c13c:	ab04      	add	r3, sp, #16
   1c13e:	9302      	str	r3, [sp, #8]
   1c140:	4b11      	ldr	r3, [pc, #68]	; (1c188 <att_read_mult_vl_req+0xa8>)
   1c142:	9301      	str	r3, [sp, #4]
   1c144:	2200      	movs	r2, #0
   1c146:	9200      	str	r2, [sp, #0]
   1c148:	4613      	mov	r3, r2
   1c14a:	4601      	mov	r1, r0
   1c14c:	f000 fe28 	bl	1cda0 <bt_gatt_foreach_attr_type>
		if (data.err) {
   1c150:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1c154:	2b00      	cmp	r3, #0
   1c156:	d0e6      	beq.n	1c126 <att_read_mult_vl_req+0x46>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1c158:	9b06      	ldr	r3, [sp, #24]
   1c15a:	6998      	ldr	r0, [r3, #24]
   1c15c:	f7ff f9b4 	bl	1b4c8 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1c160:	9806      	ldr	r0, [sp, #24]
   1c162:	f00c f8d3 	bl	2830c <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_VL_REQ, handle,
   1c166:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1c16a:	4622      	mov	r2, r4
   1c16c:	2120      	movs	r1, #32
   1c16e:	4630      	mov	r0, r6
   1c170:	f00b f96c 	bl	2744c <send_err_rsp>
			return 0;
   1c174:	2000      	movs	r0, #0
   1c176:	e7c4      	b.n	1c102 <att_read_mult_vl_req+0x22>
	bt_att_chan_send_rsp(chan, data.buf);
   1c178:	9906      	ldr	r1, [sp, #24]
   1c17a:	4630      	mov	r0, r6
   1c17c:	f00a ff5d 	bl	2703a <bt_att_chan_send_rsp>
	return 0;
   1c180:	2000      	movs	r0, #0
   1c182:	e7be      	b.n	1c102 <att_read_mult_vl_req+0x22>
		return BT_ATT_ERR_UNLIKELY;
   1c184:	200e      	movs	r0, #14
   1c186:	e7bc      	b.n	1c102 <att_read_mult_vl_req+0x22>
   1c188:	000271a9 	.word	0x000271a9

0001c18c <att_read_mult_req>:
{
   1c18c:	b570      	push	{r4, r5, r6, lr}
   1c18e:	b088      	sub	sp, #32
   1c190:	4606      	mov	r6, r0
   1c192:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
   1c194:	6844      	ldr	r4, [r0, #4]
	if (!bt_gatt_change_aware(conn, true)) {
   1c196:	2101      	movs	r1, #1
   1c198:	4620      	mov	r0, r4
   1c19a:	f00b ff0b 	bl	27fb4 <bt_gatt_change_aware>
   1c19e:	b950      	cbnz	r0, 1c1b6 <att_read_mult_req+0x2a>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1c1a0:	2105      	movs	r1, #5
   1c1a2:	f106 0090 	add.w	r0, r6, #144	; 0x90
   1c1a6:	f00b f8ea 	bl	2737e <atomic_test_and_set_bit>
   1c1aa:	b110      	cbz	r0, 1c1b2 <att_read_mult_req+0x26>
			return 0;
   1c1ac:	2000      	movs	r0, #0
}
   1c1ae:	b008      	add	sp, #32
   1c1b0:	bd70      	pop	{r4, r5, r6, pc}
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1c1b2:	2012      	movs	r0, #18
   1c1b4:	e7fb      	b.n	1c1ae <att_read_mult_req+0x22>
	(void)memset(&data, 0, sizeof(data));
   1c1b6:	2210      	movs	r2, #16
   1c1b8:	2100      	movs	r1, #0
   1c1ba:	eb0d 0002 	add.w	r0, sp, r2
   1c1be:	f009 ff61 	bl	26084 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1c1c2:	2200      	movs	r2, #0
   1c1c4:	210f      	movs	r1, #15
   1c1c6:	4620      	mov	r0, r4
   1c1c8:	f7ff fece 	bl	1bf68 <bt_att_create_pdu>
   1c1cc:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1c1ce:	b378      	cbz	r0, 1c230 <att_read_mult_req+0xa4>
	data.chan = chan;
   1c1d0:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
   1c1d2:	8a2b      	ldrh	r3, [r5, #16]
   1c1d4:	2b01      	cmp	r3, #1
   1c1d6:	d925      	bls.n	1c224 <att_read_mult_req+0x98>
   1c1d8:	f105 000c 	add.w	r0, r5, #12
   1c1dc:	f00c f90e 	bl	283fc <net_buf_simple_pull_le16>
   1c1e0:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1c1e2:	2301      	movs	r3, #1
   1c1e4:	f88d 301c 	strb.w	r3, [sp, #28]
   1c1e8:	ab04      	add	r3, sp, #16
   1c1ea:	9302      	str	r3, [sp, #8]
   1c1ec:	4b11      	ldr	r3, [pc, #68]	; (1c234 <att_read_mult_req+0xa8>)
   1c1ee:	9301      	str	r3, [sp, #4]
   1c1f0:	2200      	movs	r2, #0
   1c1f2:	9200      	str	r2, [sp, #0]
   1c1f4:	4613      	mov	r3, r2
   1c1f6:	4601      	mov	r1, r0
   1c1f8:	f000 fdd2 	bl	1cda0 <bt_gatt_foreach_attr_type>
		if (data.err) {
   1c1fc:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1c200:	2b00      	cmp	r3, #0
   1c202:	d0e6      	beq.n	1c1d2 <att_read_mult_req+0x46>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1c204:	9b06      	ldr	r3, [sp, #24]
   1c206:	6998      	ldr	r0, [r3, #24]
   1c208:	f7ff f95e 	bl	1b4c8 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1c20c:	9806      	ldr	r0, [sp, #24]
   1c20e:	f00c f87d 	bl	2830c <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_REQ, handle,
   1c212:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1c216:	4622      	mov	r2, r4
   1c218:	210e      	movs	r1, #14
   1c21a:	4630      	mov	r0, r6
   1c21c:	f00b f916 	bl	2744c <send_err_rsp>
			return 0;
   1c220:	2000      	movs	r0, #0
   1c222:	e7c4      	b.n	1c1ae <att_read_mult_req+0x22>
	bt_att_chan_send_rsp(chan, data.buf);
   1c224:	9906      	ldr	r1, [sp, #24]
   1c226:	4630      	mov	r0, r6
   1c228:	f00a ff07 	bl	2703a <bt_att_chan_send_rsp>
	return 0;
   1c22c:	2000      	movs	r0, #0
   1c22e:	e7be      	b.n	1c1ae <att_read_mult_req+0x22>
		return BT_ATT_ERR_UNLIKELY;
   1c230:	200e      	movs	r0, #14
   1c232:	e7bc      	b.n	1c1ae <att_read_mult_req+0x22>
   1c234:	0002720f 	.word	0x0002720f

0001c238 <att_read_rsp>:
{
   1c238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c23c:	b088      	sub	sp, #32
   1c23e:	4604      	mov	r4, r0
   1c240:	4688      	mov	r8, r1
   1c242:	4616      	mov	r6, r2
   1c244:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1c246:	6847      	ldr	r7, [r0, #4]
	if (!bt_gatt_change_aware(conn, true)) {
   1c248:	2101      	movs	r1, #1
   1c24a:	4638      	mov	r0, r7
   1c24c:	f00b feb2 	bl	27fb4 <bt_gatt_change_aware>
   1c250:	b128      	cbz	r0, 1c25e <att_read_rsp+0x26>
	if (!handle) {
   1c252:	b975      	cbnz	r5, 1c272 <att_read_rsp+0x3a>
		return BT_ATT_ERR_INVALID_HANDLE;
   1c254:	2601      	movs	r6, #1
}
   1c256:	4630      	mov	r0, r6
   1c258:	b008      	add	sp, #32
   1c25a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1c25e:	2105      	movs	r1, #5
   1c260:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1c264:	f00b f88b 	bl	2737e <atomic_test_and_set_bit>
   1c268:	b108      	cbz	r0, 1c26e <att_read_rsp+0x36>
			return 0;
   1c26a:	2600      	movs	r6, #0
   1c26c:	e7f3      	b.n	1c256 <att_read_rsp+0x1e>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1c26e:	2612      	movs	r6, #18
   1c270:	e7f1      	b.n	1c256 <att_read_rsp+0x1e>
	(void)memset(&data, 0, sizeof(data));
   1c272:	2210      	movs	r2, #16
   1c274:	2100      	movs	r1, #0
   1c276:	eb0d 0002 	add.w	r0, sp, r2
   1c27a:	f009 ff03 	bl	26084 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1c27e:	2200      	movs	r2, #0
   1c280:	4631      	mov	r1, r6
   1c282:	4638      	mov	r0, r7
   1c284:	f7ff fe70 	bl	1bf68 <bt_att_create_pdu>
   1c288:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1c28a:	b350      	cbz	r0, 1c2e2 <att_read_rsp+0xaa>
	data.chan = chan;
   1c28c:	9404      	str	r4, [sp, #16]
	data.offset = offset;
   1c28e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1c292:	f8ad 3014 	strh.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1c296:	2301      	movs	r3, #1
   1c298:	f88d 301c 	strb.w	r3, [sp, #28]
   1c29c:	ab04      	add	r3, sp, #16
   1c29e:	9302      	str	r3, [sp, #8]
   1c2a0:	4b11      	ldr	r3, [pc, #68]	; (1c2e8 <att_read_rsp+0xb0>)
   1c2a2:	9301      	str	r3, [sp, #4]
   1c2a4:	2200      	movs	r2, #0
   1c2a6:	9200      	str	r2, [sp, #0]
   1c2a8:	4613      	mov	r3, r2
   1c2aa:	4629      	mov	r1, r5
   1c2ac:	4628      	mov	r0, r5
   1c2ae:	f000 fd77 	bl	1cda0 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1c2b2:	f89d 601c 	ldrb.w	r6, [sp, #28]
   1c2b6:	b926      	cbnz	r6, 1c2c2 <att_read_rsp+0x8a>
	bt_att_chan_send_rsp(chan, data.buf);
   1c2b8:	9906      	ldr	r1, [sp, #24]
   1c2ba:	4620      	mov	r0, r4
   1c2bc:	f00a febd 	bl	2703a <bt_att_chan_send_rsp>
	return 0;
   1c2c0:	e7c9      	b.n	1c256 <att_read_rsp+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1c2c2:	9b06      	ldr	r3, [sp, #24]
   1c2c4:	6998      	ldr	r0, [r3, #24]
   1c2c6:	f7ff f8ff 	bl	1b4c8 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1c2ca:	9806      	ldr	r0, [sp, #24]
   1c2cc:	f00c f81e 	bl	2830c <net_buf_unref>
		send_err_rsp(chan, op, handle, data.err);
   1c2d0:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1c2d4:	462a      	mov	r2, r5
   1c2d6:	4641      	mov	r1, r8
   1c2d8:	4620      	mov	r0, r4
   1c2da:	f00b f8b7 	bl	2744c <send_err_rsp>
		return 0;
   1c2de:	2600      	movs	r6, #0
   1c2e0:	e7b9      	b.n	1c256 <att_read_rsp+0x1e>
		return BT_ATT_ERR_UNLIKELY;
   1c2e2:	260e      	movs	r6, #14
   1c2e4:	e7b7      	b.n	1c256 <att_read_rsp+0x1e>
   1c2e6:	bf00      	nop
   1c2e8:	0002720f 	.word	0x0002720f

0001c2ec <att_read_type_rsp>:
{
   1c2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c2f0:	b08a      	sub	sp, #40	; 0x28
   1c2f2:	4604      	mov	r4, r0
   1c2f4:	460f      	mov	r7, r1
   1c2f6:	4615      	mov	r5, r2
   1c2f8:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1c2fa:	f8d0 8004 	ldr.w	r8, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1c2fe:	2218      	movs	r2, #24
   1c300:	2100      	movs	r1, #0
   1c302:	a804      	add	r0, sp, #16
   1c304:	f009 febe 	bl	26084 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1c308:	2201      	movs	r2, #1
   1c30a:	2109      	movs	r1, #9
   1c30c:	4640      	mov	r0, r8
   1c30e:	f7ff fe2b 	bl	1bf68 <bt_att_create_pdu>
   1c312:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1c314:	b380      	cbz	r0, 1c378 <att_read_type_rsp+0x8c>
	data.chan = chan;
   1c316:	9404      	str	r4, [sp, #16]
	data.uuid = uuid;
   1c318:	9705      	str	r7, [sp, #20]
	return net_buf_simple_add(&buf->b, len);
   1c31a:	2101      	movs	r1, #1
   1c31c:	300c      	adds	r0, #12
   1c31e:	f00c f83c 	bl	2839a <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1c322:	9007      	str	r0, [sp, #28]
	data.rsp->len = 0U;
   1c324:	2200      	movs	r2, #0
   1c326:	7002      	strb	r2, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1c328:	230a      	movs	r3, #10
   1c32a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1c32e:	ab04      	add	r3, sp, #16
   1c330:	9302      	str	r3, [sp, #8]
   1c332:	4b12      	ldr	r3, [pc, #72]	; (1c37c <att_read_type_rsp+0x90>)
   1c334:	9301      	str	r3, [sp, #4]
   1c336:	9200      	str	r2, [sp, #0]
   1c338:	4613      	mov	r3, r2
   1c33a:	4631      	mov	r1, r6
   1c33c:	4628      	mov	r0, r5
   1c33e:	f000 fd2f 	bl	1cda0 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1c342:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   1c346:	b93e      	cbnz	r6, 1c358 <att_read_type_rsp+0x6c>
	bt_att_chan_send_rsp(chan, data.buf);
   1c348:	9906      	ldr	r1, [sp, #24]
   1c34a:	4620      	mov	r0, r4
   1c34c:	f00a fe75 	bl	2703a <bt_att_chan_send_rsp>
}
   1c350:	4630      	mov	r0, r6
   1c352:	b00a      	add	sp, #40	; 0x28
   1c354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1c358:	9b06      	ldr	r3, [sp, #24]
   1c35a:	6998      	ldr	r0, [r3, #24]
   1c35c:	f7ff f8b4 	bl	1b4c8 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1c360:	9806      	ldr	r0, [sp, #24]
   1c362:	f00b ffd3 	bl	2830c <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, start_handle,
   1c366:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   1c36a:	462a      	mov	r2, r5
   1c36c:	2108      	movs	r1, #8
   1c36e:	4620      	mov	r0, r4
   1c370:	f00b f86c 	bl	2744c <send_err_rsp>
		return 0;
   1c374:	2600      	movs	r6, #0
   1c376:	e7eb      	b.n	1c350 <att_read_type_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
   1c378:	260e      	movs	r6, #14
   1c37a:	e7e9      	b.n	1c350 <att_read_type_rsp+0x64>
   1c37c:	0001b679 	.word	0x0001b679

0001c380 <att_find_type_rsp>:
{
   1c380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c384:	b08a      	sub	sp, #40	; 0x28
   1c386:	4604      	mov	r4, r0
   1c388:	460d      	mov	r5, r1
   1c38a:	4616      	mov	r6, r2
   1c38c:	461f      	mov	r7, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1c38e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1c392:	2214      	movs	r2, #20
   1c394:	2100      	movs	r1, #0
   1c396:	eb0d 0002 	add.w	r0, sp, r2
   1c39a:	f009 fe73 	bl	26084 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1c39e:	2200      	movs	r2, #0
   1c3a0:	2107      	movs	r1, #7
   1c3a2:	4640      	mov	r0, r8
   1c3a4:	f7ff fde0 	bl	1bf68 <bt_att_create_pdu>
   1c3a8:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1c3aa:	b378      	cbz	r0, 1c40c <att_find_type_rsp+0x8c>
	data.chan = chan;
   1c3ac:	9405      	str	r4, [sp, #20]
	data.group = NULL;
   1c3ae:	2200      	movs	r2, #0
   1c3b0:	9207      	str	r2, [sp, #28]
	data.value = value;
   1c3b2:	9708      	str	r7, [sp, #32]
	data.value_len = value_len;
   1c3b4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1c3b8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1c3bc:	230a      	movs	r3, #10
   1c3be:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   1c3c2:	ab05      	add	r3, sp, #20
   1c3c4:	9302      	str	r3, [sp, #8]
   1c3c6:	4b12      	ldr	r3, [pc, #72]	; (1c410 <att_find_type_rsp+0x90>)
   1c3c8:	9301      	str	r3, [sp, #4]
   1c3ca:	9200      	str	r2, [sp, #0]
   1c3cc:	4613      	mov	r3, r2
   1c3ce:	4631      	mov	r1, r6
   1c3d0:	4628      	mov	r0, r5
   1c3d2:	f000 fce5 	bl	1cda0 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1c3d6:	f89d 6025 	ldrb.w	r6, [sp, #37]	; 0x25
   1c3da:	b93e      	cbnz	r6, 1c3ec <att_find_type_rsp+0x6c>
	bt_att_chan_send_rsp(chan, data.buf);
   1c3dc:	9906      	ldr	r1, [sp, #24]
   1c3de:	4620      	mov	r0, r4
   1c3e0:	f00a fe2b 	bl	2703a <bt_att_chan_send_rsp>
}
   1c3e4:	4630      	mov	r0, r6
   1c3e6:	b00a      	add	sp, #40	; 0x28
   1c3e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1c3ec:	9b06      	ldr	r3, [sp, #24]
   1c3ee:	6998      	ldr	r0, [r3, #24]
   1c3f0:	f7ff f86a 	bl	1b4c8 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1c3f4:	9806      	ldr	r0, [sp, #24]
   1c3f6:	f00b ff89 	bl	2830c <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   1c3fa:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   1c3fe:	462a      	mov	r2, r5
   1c400:	2106      	movs	r1, #6
   1c402:	4620      	mov	r0, r4
   1c404:	f00b f822 	bl	2744c <send_err_rsp>
		return 0;
   1c408:	2600      	movs	r6, #0
   1c40a:	e7eb      	b.n	1c3e4 <att_find_type_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
   1c40c:	260e      	movs	r6, #14
   1c40e:	e7e9      	b.n	1c3e4 <att_find_type_rsp+0x64>
   1c410:	0001b721 	.word	0x0001b721

0001c414 <att_find_info_rsp>:
{
   1c414:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c416:	b089      	sub	sp, #36	; 0x24
   1c418:	4604      	mov	r4, r0
   1c41a:	460f      	mov	r7, r1
   1c41c:	4616      	mov	r6, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1c41e:	6845      	ldr	r5, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1c420:	2210      	movs	r2, #16
   1c422:	2100      	movs	r1, #0
   1c424:	eb0d 0002 	add.w	r0, sp, r2
   1c428:	f009 fe2c 	bl	26084 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1c42c:	2200      	movs	r2, #0
   1c42e:	2105      	movs	r1, #5
   1c430:	4628      	mov	r0, r5
   1c432:	f7ff fd99 	bl	1bf68 <bt_att_create_pdu>
   1c436:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
   1c438:	b318      	cbz	r0, 1c482 <att_find_info_rsp+0x6e>
	data.chan = chan;
   1c43a:	9404      	str	r4, [sp, #16]
   1c43c:	ab04      	add	r3, sp, #16
   1c43e:	9302      	str	r3, [sp, #8]
   1c440:	4b11      	ldr	r3, [pc, #68]	; (1c488 <att_find_info_rsp+0x74>)
   1c442:	9301      	str	r3, [sp, #4]
   1c444:	2200      	movs	r2, #0
   1c446:	9200      	str	r2, [sp, #0]
   1c448:	4613      	mov	r3, r2
   1c44a:	4631      	mov	r1, r6
   1c44c:	4638      	mov	r0, r7
   1c44e:	f000 fca7 	bl	1cda0 <bt_gatt_foreach_attr_type>
	if (!data.rsp) {
   1c452:	9b06      	ldr	r3, [sp, #24]
   1c454:	b133      	cbz	r3, 1c464 <att_find_info_rsp+0x50>
	bt_att_chan_send_rsp(chan, data.buf);
   1c456:	9905      	ldr	r1, [sp, #20]
   1c458:	4620      	mov	r0, r4
   1c45a:	f00a fdee 	bl	2703a <bt_att_chan_send_rsp>
	return 0;
   1c45e:	2000      	movs	r0, #0
}
   1c460:	b009      	add	sp, #36	; 0x24
   1c462:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1c464:	9b05      	ldr	r3, [sp, #20]
   1c466:	6998      	ldr	r0, [r3, #24]
   1c468:	f7ff f82e 	bl	1b4c8 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1c46c:	9805      	ldr	r0, [sp, #20]
   1c46e:	f00b ff4d 	bl	2830c <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, start_handle,
   1c472:	230a      	movs	r3, #10
   1c474:	463a      	mov	r2, r7
   1c476:	2104      	movs	r1, #4
   1c478:	4620      	mov	r0, r4
   1c47a:	f00a ffe7 	bl	2744c <send_err_rsp>
		return 0;
   1c47e:	2000      	movs	r0, #0
   1c480:	e7ee      	b.n	1c460 <att_find_info_rsp+0x4c>
		return BT_ATT_ERR_UNLIKELY;
   1c482:	200e      	movs	r0, #14
   1c484:	e7ec      	b.n	1c460 <att_find_info_rsp+0x4c>
   1c486:	bf00      	nop
   1c488:	00027257 	.word	0x00027257

0001c48c <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   1c48c:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   1c48e:	4809      	ldr	r0, [pc, #36]	; (1c4b4 <bt_att_init+0x28>)
   1c490:	f00d feac 	bl	2a1ec <z_impl_k_queue_init>
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
   1c494:	2400      	movs	r4, #0
   1c496:	e008      	b.n	1c4aa <bt_att_init+0x1e>
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   1c498:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1c49c:	0093      	lsls	r3, r2, #2
   1c49e:	4906      	ldr	r1, [pc, #24]	; (1c4b8 <bt_att_init+0x2c>)
   1c4a0:	4419      	add	r1, r3
   1c4a2:	4804      	ldr	r0, [pc, #16]	; (1c4b4 <bt_att_init+0x28>)
   1c4a4:	f00d feae 	bl	2a204 <k_queue_append>
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
   1c4a8:	3401      	adds	r4, #1
   1c4aa:	2c02      	cmp	r4, #2
   1c4ac:	d9f4      	bls.n	1c498 <bt_att_init+0xc>
	}

	bt_gatt_init();
   1c4ae:	f000 fc11 	bl	1ccd4 <bt_gatt_init>

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   1c4b2:	bd10      	pop	{r4, pc}
   1c4b4:	20000a30 	.word	0x20000a30
   1c4b8:	20005c20 	.word	0x20005c20

0001c4bc <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1c4bc:	b530      	push	{r4, r5, lr}
   1c4be:	b083      	sub	sp, #12
   1c4c0:	4605      	mov	r5, r0
   1c4c2:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   1c4c4:	2300      	movs	r3, #0
   1c4c6:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1c4c8:	f007 f910 	bl	236ec <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   1c4cc:	4b0b      	ldr	r3, [pc, #44]	; (1c4fc <bt_att_req_alloc+0x40>)
   1c4ce:	681b      	ldr	r3, [r3, #0]
   1c4d0:	4283      	cmp	r3, r0
   1c4d2:	d00e      	beq.n	1c4f2 <bt_att_req_alloc+0x36>
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1c4d4:	462a      	mov	r2, r5
   1c4d6:	4623      	mov	r3, r4
   1c4d8:	a901      	add	r1, sp, #4
   1c4da:	4809      	ldr	r0, [pc, #36]	; (1c500 <bt_att_req_alloc+0x44>)
   1c4dc:	f006 f90a 	bl	226f4 <k_mem_slab_alloc>
   1c4e0:	b950      	cbnz	r0, 1c4f8 <bt_att_req_alloc+0x3c>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1c4e2:	2210      	movs	r2, #16
   1c4e4:	2100      	movs	r1, #0
   1c4e6:	9801      	ldr	r0, [sp, #4]
   1c4e8:	f009 fdcc 	bl	26084 <memset>

	return req;
   1c4ec:	9801      	ldr	r0, [sp, #4]
}
   1c4ee:	b003      	add	sp, #12
   1c4f0:	bd30      	pop	{r4, r5, pc}
		timeout = K_NO_WAIT;
   1c4f2:	2500      	movs	r5, #0
   1c4f4:	462c      	mov	r4, r5
   1c4f6:	e7ed      	b.n	1c4d4 <bt_att_req_alloc+0x18>
		return NULL;
   1c4f8:	2000      	movs	r0, #0
   1c4fa:	e7f8      	b.n	1c4ee <bt_att_req_alloc+0x32>
   1c4fc:	20005c5c 	.word	0x20005c5c
   1c500:	200009d4 	.word	0x200009d4

0001c504 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1c504:	b500      	push	{lr}
   1c506:	b083      	sub	sp, #12
   1c508:	9001      	str	r0, [sp, #4]
	LOG_DBG("req %p", req);

	if (req->buf) {
   1c50a:	6883      	ldr	r3, [r0, #8]
   1c50c:	b14b      	cbz	r3, 1c522 <bt_att_req_free+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   1c50e:	6998      	ldr	r0, [r3, #24]
   1c510:	f7fe ffda 	bl	1b4c8 <tx_meta_data_free>
		net_buf_unref(req->buf);
   1c514:	9b01      	ldr	r3, [sp, #4]
   1c516:	6898      	ldr	r0, [r3, #8]
   1c518:	f00b fef8 	bl	2830c <net_buf_unref>
		req->buf = NULL;
   1c51c:	9b01      	ldr	r3, [sp, #4]
   1c51e:	2200      	movs	r2, #0
   1c520:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1c522:	a901      	add	r1, sp, #4
   1c524:	4802      	ldr	r0, [pc, #8]	; (1c530 <bt_att_req_free+0x2c>)
   1c526:	f00d fd30 	bl	29f8a <k_mem_slab_free>
}
   1c52a:	b003      	add	sp, #12
   1c52c:	f85d fb04 	ldr.w	pc, [sp], #4
   1c530:	200009d4 	.word	0x200009d4

0001c534 <att_handle_rsp>:
{
   1c534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c538:	b08a      	sub	sp, #40	; 0x28
   1c53a:	4604      	mov	r4, r0
   1c53c:	460f      	mov	r7, r1
   1c53e:	4691      	mov	r9, r2
   1c540:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1c542:	30b0      	adds	r0, #176	; 0xb0
   1c544:	f00d ffdb 	bl	2a4fe <k_work_cancel_delayable>
	if (!chan->req) {
   1c548:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   1c54c:	b1f8      	cbz	r0, 1c58e <att_handle_rsp+0x5a>
	if (chan->req == &cancel) {
   1c54e:	4b25      	ldr	r3, [pc, #148]	; (1c5e4 <att_handle_rsp+0xb0>)
   1c550:	4298      	cmp	r0, r3
   1c552:	d042      	beq.n	1c5da <att_handle_rsp+0xa6>
	func = chan->req->func;
   1c554:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   1c556:	f04f 0a00 	mov.w	sl, #0
   1c55a:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   1c55e:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   1c562:	f8d0 800c 	ldr.w	r8, [r0, #12]
	bt_att_req_free(chan->req);
   1c566:	f7ff ffcd 	bl	1c504 <bt_att_req_free>
	chan->req = NULL;
   1c56a:	f8c4 a094 	str.w	sl, [r4, #148]	; 0x94
	att_req_send_process(chan->att);
   1c56e:	6820      	ldr	r0, [r4, #0]
   1c570:	f00a fc19 	bl	26da6 <att_req_send_process>
	if (func) {
   1c574:	b13d      	cbz	r5, 1c586 <att_handle_rsp+0x52>
		func(chan->att->conn, err, pdu, len, params);
   1c576:	6823      	ldr	r3, [r4, #0]
   1c578:	6818      	ldr	r0, [r3, #0]
   1c57a:	f8cd 8000 	str.w	r8, [sp]
   1c57e:	464b      	mov	r3, r9
   1c580:	463a      	mov	r2, r7
   1c582:	4631      	mov	r1, r6
   1c584:	47a8      	blx	r5
}
   1c586:	2000      	movs	r0, #0
   1c588:	b00a      	add	sp, #40	; 0x28
   1c58a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LOG_WRN("No pending ATT request");
   1c58e:	4b16      	ldr	r3, [pc, #88]	; (1c5e8 <att_handle_rsp+0xb4>)
   1c590:	9309      	str	r3, [sp, #36]	; 0x24
   1c592:	2302      	movs	r3, #2
   1c594:	f88d 300c 	strb.w	r3, [sp, #12]
   1c598:	2500      	movs	r5, #0
   1c59a:	f88d 500d 	strb.w	r5, [sp, #13]
   1c59e:	f88d 500e 	strb.w	r5, [sp, #14]
   1c5a2:	f88d 500f 	strb.w	r5, [sp, #15]
   1c5a6:	9a03      	ldr	r2, [sp, #12]
   1c5a8:	9208      	str	r2, [sp, #32]
   1c5aa:	4629      	mov	r1, r5
   1c5ac:	f365 0100 	bfi	r1, r5, #0, #1
   1c5b0:	f365 0141 	bfi	r1, r5, #1, #1
   1c5b4:	f365 0182 	bfi	r1, r5, #2, #1
   1c5b8:	f365 01c5 	bfi	r1, r5, #3, #3
   1c5bc:	f363 1188 	bfi	r1, r3, #6, #3
   1c5c0:	2308      	movs	r3, #8
   1c5c2:	f363 2152 	bfi	r1, r3, #9, #10
   1c5c6:	f365 41de 	bfi	r1, r5, #19, #12
   1c5ca:	f365 71df 	bfi	r1, r5, #31, #1
   1c5ce:	462b      	mov	r3, r5
   1c5d0:	aa08      	add	r2, sp, #32
   1c5d2:	4806      	ldr	r0, [pc, #24]	; (1c5ec <att_handle_rsp+0xb8>)
   1c5d4:	f009 f8ed 	bl	257b2 <z_impl_z_log_msg_static_create>
		goto process;
   1c5d8:	e7c9      	b.n	1c56e <att_handle_rsp+0x3a>
		chan->req = NULL;
   1c5da:	2500      	movs	r5, #0
   1c5dc:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
		goto process;
   1c5e0:	e7c5      	b.n	1c56e <att_handle_rsp+0x3a>
   1c5e2:	bf00      	nop
   1c5e4:	20005c60 	.word	0x20005c60
   1c5e8:	0002ce74 	.word	0x0002ce74
   1c5ec:	0002b164 	.word	0x0002b164

0001c5f0 <att_reset>:
{
   1c5f0:	b530      	push	{r4, r5, lr}
   1c5f2:	b085      	sub	sp, #20
   1c5f4:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1c5f6:	e005      	b.n	1c604 <att_reset+0x14>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1c5f8:	69a0      	ldr	r0, [r4, #24]
   1c5fa:	f7fe ff65 	bl	1b4c8 <tx_meta_data_free>
		net_buf_unref(buf);
   1c5fe:	4620      	mov	r0, r4
   1c600:	f00b fe84 	bl	2830c <net_buf_unref>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1c604:	2200      	movs	r2, #0
   1c606:	2300      	movs	r3, #0
   1c608:	9803      	ldr	r0, [sp, #12]
   1c60a:	300c      	adds	r0, #12
   1c60c:	f00b fe44 	bl	28298 <net_buf_get>
   1c610:	4604      	mov	r4, r0
   1c612:	2800      	cmp	r0, #0
   1c614:	d1f0      	bne.n	1c5f8 <att_reset+0x8>
   1c616:	e00b      	b.n	1c630 <att_reset+0x40>
	list->tail = node;
   1c618:	609a      	str	r2, [r3, #8]
}
   1c61a:	e011      	b.n	1c640 <att_reset+0x50>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1c61c:	6818      	ldr	r0, [r3, #0]
   1c61e:	68e3      	ldr	r3, [r4, #12]
   1c620:	9300      	str	r3, [sp, #0]
   1c622:	2300      	movs	r3, #0
   1c624:	461a      	mov	r2, r3
   1c626:	210e      	movs	r1, #14
   1c628:	47a8      	blx	r5
		bt_att_req_free(req);
   1c62a:	4620      	mov	r0, r4
   1c62c:	f7ff ff6a 	bl	1c504 <bt_att_req_free>
	while (!sys_slist_is_empty(&att->reqs)) {
   1c630:	9b03      	ldr	r3, [sp, #12]
	return list->head;
   1c632:	685c      	ldr	r4, [r3, #4]
   1c634:	b144      	cbz	r4, 1c648 <att_reset+0x58>
	return node->next;
   1c636:	6822      	ldr	r2, [r4, #0]
	list->head = node;
   1c638:	605a      	str	r2, [r3, #4]
	return list->tail;
   1c63a:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c63c:	42a1      	cmp	r1, r4
   1c63e:	d0eb      	beq.n	1c618 <att_reset+0x28>
		if (req->func) {
   1c640:	6865      	ldr	r5, [r4, #4]
   1c642:	2d00      	cmp	r5, #0
   1c644:	d1ea      	bne.n	1c61c <att_reset+0x2c>
   1c646:	e7f0      	b.n	1c62a <att_reset+0x3a>
	att->conn = NULL;
   1c648:	2200      	movs	r2, #0
   1c64a:	601a      	str	r2, [r3, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   1c64c:	a903      	add	r1, sp, #12
   1c64e:	4802      	ldr	r0, [pc, #8]	; (1c658 <att_reset+0x68>)
   1c650:	f00d fc9b 	bl	29f8a <k_mem_slab_free>
}
   1c654:	b005      	add	sp, #20
   1c656:	bd30      	pop	{r4, r5, pc}
   1c658:	2000099c 	.word	0x2000099c

0001c65c <att_timeout>:
{
   1c65c:	b510      	push	{r4, lr}
   1c65e:	b088      	sub	sp, #32
   1c660:	4604      	mov	r4, r0
	LOG_ERR("ATT Timeout");
   1c662:	4b15      	ldr	r3, [pc, #84]	; (1c6b8 <att_timeout+0x5c>)
   1c664:	9307      	str	r3, [sp, #28]
   1c666:	2302      	movs	r3, #2
   1c668:	f88d 3004 	strb.w	r3, [sp, #4]
   1c66c:	2300      	movs	r3, #0
   1c66e:	f88d 3005 	strb.w	r3, [sp, #5]
   1c672:	f88d 3006 	strb.w	r3, [sp, #6]
   1c676:	f88d 3007 	strb.w	r3, [sp, #7]
   1c67a:	9a01      	ldr	r2, [sp, #4]
   1c67c:	9206      	str	r2, [sp, #24]
   1c67e:	4619      	mov	r1, r3
   1c680:	f363 0100 	bfi	r1, r3, #0, #1
   1c684:	f363 0141 	bfi	r1, r3, #1, #1
   1c688:	f363 0182 	bfi	r1, r3, #2, #1
   1c68c:	f363 01c5 	bfi	r1, r3, #3, #3
   1c690:	2201      	movs	r2, #1
   1c692:	f362 1188 	bfi	r1, r2, #6, #3
   1c696:	2208      	movs	r2, #8
   1c698:	f362 2152 	bfi	r1, r2, #9, #10
   1c69c:	f363 41de 	bfi	r1, r3, #19, #12
   1c6a0:	f363 71df 	bfi	r1, r3, #31, #1
   1c6a4:	aa06      	add	r2, sp, #24
   1c6a6:	4805      	ldr	r0, [pc, #20]	; (1c6bc <att_timeout+0x60>)
   1c6a8:	f009 f883 	bl	257b2 <z_impl_z_log_msg_static_create>
	bt_att_disconnected(&chan->chan.chan);
   1c6ac:	f1a4 00ac 	sub.w	r0, r4, #172	; 0xac
   1c6b0:	f00b f86f 	bl	27792 <bt_att_disconnected>
}
   1c6b4:	b008      	add	sp, #32
   1c6b6:	bd10      	pop	{r4, pc}
   1c6b8:	0002ce8c 	.word	0x0002ce8c
   1c6bc:	0002b164 	.word	0x0002b164

0001c6c0 <bt_gatt_service_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1c6c0:	4b0d      	ldr	r3, [pc, #52]	; (1c6f8 <bt_gatt_service_init+0x38>)
   1c6c2:	2201      	movs	r2, #1
   1c6c4:	f3bf 8f5b 	dmb	ish
   1c6c8:	e853 1f00 	ldrex	r1, [r3]
   1c6cc:	2900      	cmp	r1, #0
   1c6ce:	d103      	bne.n	1c6d8 <bt_gatt_service_init+0x18>
   1c6d0:	e843 2000 	strex	r0, r2, [r3]
   1c6d4:	2800      	cmp	r0, #0
   1c6d6:	d1f7      	bne.n	1c6c8 <bt_gatt_service_init+0x8>
   1c6d8:	f3bf 8f5b 	dmb	ish
}
#endif

static void bt_gatt_service_init(void)
{
	if (!atomic_cas(&service_init, 0, 1)) {
   1c6dc:	d101      	bne.n	1c6e2 <bt_gatt_service_init+0x22>
		return;
	}

	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1c6de:	4b07      	ldr	r3, [pc, #28]	; (1c6fc <bt_gatt_service_init+0x3c>)
   1c6e0:	e006      	b.n	1c6f0 <bt_gatt_service_init+0x30>
   1c6e2:	4770      	bx	lr
		last_static_handle += svc->attr_count;
   1c6e4:	685a      	ldr	r2, [r3, #4]
   1c6e6:	4906      	ldr	r1, [pc, #24]	; (1c700 <bt_gatt_service_init+0x40>)
   1c6e8:	8808      	ldrh	r0, [r1, #0]
   1c6ea:	4402      	add	r2, r0
   1c6ec:	800a      	strh	r2, [r1, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1c6ee:	3308      	adds	r3, #8
   1c6f0:	4a04      	ldr	r2, [pc, #16]	; (1c704 <bt_gatt_service_init+0x44>)
   1c6f2:	4293      	cmp	r3, r2
   1c6f4:	d3f6      	bcc.n	1c6e4 <bt_gatt_service_init+0x24>
	}
}
   1c6f6:	4770      	bx	lr
   1c6f8:	20005e10 	.word	0x20005e10
   1c6fc:	0002b144 	.word	0x0002b144
   1c700:	200069b0 	.word	0x200069b0
   1c704:	0002b154 	.word	0x0002b154

0001c708 <find_cf_cfg>:
{
   1c708:	b570      	push	{r4, r5, r6, lr}
   1c70a:	4606      	mov	r6, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1c70c:	2400      	movs	r4, #0
   1c70e:	e007      	b.n	1c720 <find_cf_cfg+0x18>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1c710:	4628      	mov	r0, r5
	return memcmp(a, b, sizeof(*a));
   1c712:	2207      	movs	r2, #7
   1c714:	490d      	ldr	r1, [pc, #52]	; (1c74c <find_cf_cfg+0x44>)
   1c716:	3001      	adds	r0, #1
   1c718:	f009 fc73 	bl	26002 <memcmp>
   1c71c:	b1a0      	cbz	r0, 1c748 <find_cf_cfg+0x40>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1c71e:	3401      	adds	r4, #1
   1c720:	2c07      	cmp	r4, #7
   1c722:	d810      	bhi.n	1c746 <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1c724:	4d0a      	ldr	r5, [pc, #40]	; (1c750 <find_cf_cfg+0x48>)
   1c726:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
   1c72a:	2e00      	cmp	r6, #0
   1c72c:	d0f0      	beq.n	1c710 <find_cf_cfg+0x8>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1c72e:	0123      	lsls	r3, r4, #4
   1c730:	4907      	ldr	r1, [pc, #28]	; (1c750 <find_cf_cfg+0x48>)
   1c732:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   1c736:	3201      	adds	r2, #1
   1c738:	5cc9      	ldrb	r1, [r1, r3]
   1c73a:	4630      	mov	r0, r6
   1c73c:	f00a f90f 	bl	2695e <bt_conn_is_peer_addr_le>
   1c740:	2800      	cmp	r0, #0
   1c742:	d0ec      	beq.n	1c71e <find_cf_cfg+0x16>
   1c744:	e000      	b.n	1c748 <find_cf_cfg+0x40>
	return NULL;
   1c746:	2500      	movs	r5, #0
}
   1c748:	4628      	mov	r0, r5
   1c74a:	bd70      	pop	{r4, r5, r6, pc}
   1c74c:	0002bffc 	.word	0x0002bffc
   1c750:	20005d30 	.word	0x20005d30

0001c754 <find_sc_cfg>:
{
   1c754:	b570      	push	{r4, r5, r6, lr}
   1c756:	4605      	mov	r5, r0
   1c758:	460e      	mov	r6, r1
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1c75a:	2400      	movs	r4, #0
   1c75c:	e000      	b.n	1c760 <find_sc_cfg+0xc>
   1c75e:	3401      	adds	r4, #1
   1c760:	2c07      	cmp	r4, #7
   1c762:	d817      	bhi.n	1c794 <find_sc_cfg+0x40>
		if (id == sc_cfg[i].id &&
   1c764:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1c768:	4a0b      	ldr	r2, [pc, #44]	; (1c798 <find_sc_cfg+0x44>)
   1c76a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   1c76e:	429d      	cmp	r5, r3
   1c770:	d1f5      	bne.n	1c75e <find_sc_cfg+0xa>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1c772:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1c776:	eb02 0083 	add.w	r0, r2, r3, lsl #2
   1c77a:	2207      	movs	r2, #7
   1c77c:	4631      	mov	r1, r6
   1c77e:	3001      	adds	r0, #1
   1c780:	f009 fc3f 	bl	26002 <memcmp>
		if (id == sc_cfg[i].id &&
   1c784:	2800      	cmp	r0, #0
   1c786:	d1ea      	bne.n	1c75e <find_sc_cfg+0xa>
			return &sc_cfg[i];
   1c788:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1c78c:	4802      	ldr	r0, [pc, #8]	; (1c798 <find_sc_cfg+0x44>)
   1c78e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   1c792:	e000      	b.n	1c796 <find_sc_cfg+0x42>
	return NULL;
   1c794:	2000      	movs	r0, #0
}
   1c796:	bd70      	pop	{r4, r5, r6, pc}
   1c798:	20005db0 	.word	0x20005db0

0001c79c <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   1c79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c79e:	4607      	mov	r7, r0
   1c7a0:	460e      	mov	r6, r1
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1c7a2:	2400      	movs	r4, #0
   1c7a4:	e00a      	b.n	1c7bc <find_ccc_cfg+0x20>
		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
				return cfg;
			}
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1c7a6:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   1c7aa:	eb06 0040 	add.w	r0, r6, r0, lsl #1
   1c7ae:	2207      	movs	r2, #7
   1c7b0:	490d      	ldr	r1, [pc, #52]	; (1c7e8 <find_ccc_cfg+0x4c>)
   1c7b2:	3001      	adds	r0, #1
   1c7b4:	f009 fc25 	bl	26002 <memcmp>
   1c7b8:	b198      	cbz	r0, 1c7e2 <find_ccc_cfg+0x46>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1c7ba:	3401      	adds	r4, #1
   1c7bc:	2c07      	cmp	r4, #7
   1c7be:	d80f      	bhi.n	1c7e0 <find_ccc_cfg+0x44>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1c7c0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1c7c4:	eb06 0543 	add.w	r5, r6, r3, lsl #1
		if (conn) {
   1c7c8:	2f00      	cmp	r7, #0
   1c7ca:	d0ec      	beq.n	1c7a6 <find_ccc_cfg+0xa>
						    &cfg->peer)) {
   1c7cc:	462a      	mov	r2, r5
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1c7ce:	3201      	adds	r2, #1
   1c7d0:	f816 1013 	ldrb.w	r1, [r6, r3, lsl #1]
   1c7d4:	4638      	mov	r0, r7
   1c7d6:	f00a f8c2 	bl	2695e <bt_conn_is_peer_addr_le>
   1c7da:	2800      	cmp	r0, #0
   1c7dc:	d0ed      	beq.n	1c7ba <find_ccc_cfg+0x1e>
   1c7de:	e000      	b.n	1c7e2 <find_ccc_cfg+0x46>
			return cfg;
		}
	}

	return NULL;
   1c7e0:	2500      	movs	r5, #0
}
   1c7e2:	4628      	mov	r0, r5
   1c7e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c7e6:	bf00      	nop
   1c7e8:	0002bffc 	.word	0x0002bffc

0001c7ec <cf_write>:
{
   1c7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c7f0:	b088      	sub	sp, #32
   1c7f2:	461d      	mov	r5, r3
   1c7f4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	if (offset > sizeof(cfg->data)) {
   1c7f8:	2b01      	cmp	r3, #1
   1c7fa:	d856      	bhi.n	1c8aa <cf_write+0xbe>
   1c7fc:	4606      	mov	r6, r0
   1c7fe:	4617      	mov	r7, r2
	if (offset + len > sizeof(cfg->data)) {
   1c800:	46a8      	mov	r8, r5
   1c802:	442b      	add	r3, r5
   1c804:	2b01      	cmp	r3, #1
   1c806:	d853      	bhi.n	1c8b0 <cf_write+0xc4>
	cfg = find_cf_cfg(conn);
   1c808:	f7ff ff7e 	bl	1c708 <find_cf_cfg>
	if (!cfg) {
   1c80c:	4604      	mov	r4, r0
   1c80e:	b300      	cbz	r0, 1c852 <cf_write+0x66>
	if (!cf_set_value(cfg, value, len)) {
   1c810:	462a      	mov	r2, r5
   1c812:	4639      	mov	r1, r7
   1c814:	4620      	mov	r0, r4
   1c816:	f00b f867 	bl	278e8 <cf_set_value>
   1c81a:	2800      	cmp	r0, #0
   1c81c:	d04b      	beq.n	1c8b6 <cf_write+0xca>
	memcpy(dst, src, sizeof(*dst));
   1c81e:	2207      	movs	r2, #7
   1c820:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1c824:	1c60      	adds	r0, r4, #1
   1c826:	f009 fbfe 	bl	26026 <memcpy>
	cfg->id = conn->id;
   1c82a:	7a33      	ldrb	r3, [r6, #8]
   1c82c:	4620      	mov	r0, r4
   1c82e:	f800 3b0c 	strb.w	r3, [r0], #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c832:	f3bf 8f5b 	dmb	ish
   1c836:	e850 3f00 	ldrex	r3, [r0]
   1c83a:	f043 0301 	orr.w	r3, r3, #1
   1c83e:	e840 3200 	strex	r2, r3, [r0]
   1c842:	2a00      	cmp	r2, #0
   1c844:	d1f7      	bne.n	1c836 <cf_write+0x4a>
   1c846:	f3bf 8f5b 	dmb	ish
}
   1c84a:	4640      	mov	r0, r8
   1c84c:	b008      	add	sp, #32
   1c84e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_cf_cfg(NULL);
   1c852:	f7ff ff59 	bl	1c708 <find_cf_cfg>
	if (!cfg) {
   1c856:	4604      	mov	r4, r0
   1c858:	2800      	cmp	r0, #0
   1c85a:	d1d9      	bne.n	1c810 <cf_write+0x24>
		LOG_WRN("No space to store Client Supported Features");
   1c85c:	4b17      	ldr	r3, [pc, #92]	; (1c8bc <cf_write+0xd0>)
   1c85e:	9307      	str	r3, [sp, #28]
   1c860:	2202      	movs	r2, #2
   1c862:	f88d 2004 	strb.w	r2, [sp, #4]
   1c866:	2300      	movs	r3, #0
   1c868:	f88d 3005 	strb.w	r3, [sp, #5]
   1c86c:	f88d 3006 	strb.w	r3, [sp, #6]
   1c870:	f88d 3007 	strb.w	r3, [sp, #7]
   1c874:	9901      	ldr	r1, [sp, #4]
   1c876:	9106      	str	r1, [sp, #24]
   1c878:	4619      	mov	r1, r3
   1c87a:	f363 0100 	bfi	r1, r3, #0, #1
   1c87e:	f363 0141 	bfi	r1, r3, #1, #1
   1c882:	f363 0182 	bfi	r1, r3, #2, #1
   1c886:	f363 01c5 	bfi	r1, r3, #3, #3
   1c88a:	f362 1188 	bfi	r1, r2, #6, #3
   1c88e:	2208      	movs	r2, #8
   1c890:	f362 2152 	bfi	r1, r2, #9, #10
   1c894:	f363 41de 	bfi	r1, r3, #19, #12
   1c898:	f363 71df 	bfi	r1, r3, #31, #1
   1c89c:	aa06      	add	r2, sp, #24
   1c89e:	4808      	ldr	r0, [pc, #32]	; (1c8c0 <cf_write+0xd4>)
   1c8a0:	f008 ff87 	bl	257b2 <z_impl_z_log_msg_static_create>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1c8a4:	f06f 0810 	mvn.w	r8, #16
   1c8a8:	e7cf      	b.n	1c84a <cf_write+0x5e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c8aa:	f06f 0806 	mvn.w	r8, #6
   1c8ae:	e7cc      	b.n	1c84a <cf_write+0x5e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1c8b0:	f06f 080c 	mvn.w	r8, #12
   1c8b4:	e7c9      	b.n	1c84a <cf_write+0x5e>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1c8b6:	f06f 0812 	mvn.w	r8, #18
   1c8ba:	e7c6      	b.n	1c84a <cf_write+0x5e>
   1c8bc:	0002cf10 	.word	0x0002cf10
   1c8c0:	0002b174 	.word	0x0002b174

0001c8c4 <sc_save>:
{
   1c8c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c8c8:	b088      	sub	sp, #32
   1c8ca:	4607      	mov	r7, r0
   1c8cc:	4688      	mov	r8, r1
   1c8ce:	4616      	mov	r6, r2
   1c8d0:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1c8d2:	f7ff ff3f 	bl	1c754 <find_sc_cfg>
	if (!cfg) {
   1c8d6:	4604      	mov	r4, r0
   1c8d8:	b178      	cbz	r0, 1c8fa <sc_save+0x36>
	if (!(cfg->data.start || cfg->data.end)) {
   1c8da:	8923      	ldrh	r3, [r4, #8]
   1c8dc:	b913      	cbnz	r3, 1c8e4 <sc_save+0x20>
   1c8de:	8963      	ldrh	r3, [r4, #10]
   1c8e0:	2b00      	cmp	r3, #0
   1c8e2:	d03c      	beq.n	1c95e <sc_save+0x9a>
	modified = update_range(&cfg->data.start, &cfg->data.end, start, end);
   1c8e4:	462b      	mov	r3, r5
   1c8e6:	4632      	mov	r2, r6
   1c8e8:	f104 010a 	add.w	r1, r4, #10
   1c8ec:	f104 0008 	add.w	r0, r4, #8
   1c8f0:	f00a ffd8 	bl	278a4 <update_range>
}
   1c8f4:	b008      	add	sp, #32
   1c8f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1c8fa:	491a      	ldr	r1, [pc, #104]	; (1c964 <sc_save+0xa0>)
   1c8fc:	f7ff ff2a 	bl	1c754 <find_sc_cfg>
		if (!cfg) {
   1c900:	4604      	mov	r4, r0
   1c902:	b130      	cbz	r0, 1c912 <sc_save+0x4e>
		cfg->id = id;
   1c904:	f800 7b01 	strb.w	r7, [r0], #1
   1c908:	2207      	movs	r2, #7
   1c90a:	4641      	mov	r1, r8
   1c90c:	f009 fb8b 	bl	26026 <memcpy>
}
   1c910:	e7e3      	b.n	1c8da <sc_save+0x16>
			LOG_ERR("unable to save SC: no cfg left");
   1c912:	4b15      	ldr	r3, [pc, #84]	; (1c968 <sc_save+0xa4>)
   1c914:	9307      	str	r3, [sp, #28]
   1c916:	2302      	movs	r3, #2
   1c918:	f88d 3004 	strb.w	r3, [sp, #4]
   1c91c:	2300      	movs	r3, #0
   1c91e:	f88d 3005 	strb.w	r3, [sp, #5]
   1c922:	f88d 3006 	strb.w	r3, [sp, #6]
   1c926:	f88d 3007 	strb.w	r3, [sp, #7]
   1c92a:	9a01      	ldr	r2, [sp, #4]
   1c92c:	9206      	str	r2, [sp, #24]
   1c92e:	4619      	mov	r1, r3
   1c930:	f363 0100 	bfi	r1, r3, #0, #1
   1c934:	f363 0141 	bfi	r1, r3, #1, #1
   1c938:	f363 0182 	bfi	r1, r3, #2, #1
   1c93c:	f363 01c5 	bfi	r1, r3, #3, #3
   1c940:	2201      	movs	r2, #1
   1c942:	f362 1188 	bfi	r1, r2, #6, #3
   1c946:	2208      	movs	r2, #8
   1c948:	f362 2152 	bfi	r1, r2, #9, #10
   1c94c:	f363 41de 	bfi	r1, r3, #19, #12
   1c950:	f363 71df 	bfi	r1, r3, #31, #1
   1c954:	aa06      	add	r2, sp, #24
   1c956:	4805      	ldr	r0, [pc, #20]	; (1c96c <sc_save+0xa8>)
   1c958:	f008 ff2b 	bl	257b2 <z_impl_z_log_msg_static_create>
			return;
   1c95c:	e7ca      	b.n	1c8f4 <sc_save+0x30>
		cfg->data.start = start;
   1c95e:	8126      	strh	r6, [r4, #8]
		cfg->data.end = end;
   1c960:	8165      	strh	r5, [r4, #10]
		goto done;
   1c962:	e7c7      	b.n	1c8f4 <sc_save+0x30>
   1c964:	0002bffc 	.word	0x0002bffc
   1c968:	0002cf3c 	.word	0x0002cf3c
   1c96c:	0002b174 	.word	0x0002b174

0001c970 <clear_ccc_cfg>:
{
   1c970:	b510      	push	{r4, lr}
   1c972:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
   1c974:	2207      	movs	r2, #7
   1c976:	4904      	ldr	r1, [pc, #16]	; (1c988 <clear_ccc_cfg+0x18>)
   1c978:	3001      	adds	r0, #1
   1c97a:	f009 fb54 	bl	26026 <memcpy>
	cfg->id = 0U;
   1c97e:	2300      	movs	r3, #0
   1c980:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   1c982:	8123      	strh	r3, [r4, #8]
}
   1c984:	bd10      	pop	{r4, pc}
   1c986:	bf00      	nop
   1c988:	0002bffc 	.word	0x0002bffc

0001c98c <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   1c98c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c990:	b089      	sub	sp, #36	; 0x24
   1c992:	461c      	mov	r4, r3
   1c994:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1c998:	68cf      	ldr	r7, [r1, #12]
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   1c99a:	2b00      	cmp	r3, #0
   1c99c:	d16e      	bne.n	1ca7c <bt_gatt_attr_write_ccc+0xf0>
   1c99e:	4681      	mov	r9, r0
   1c9a0:	460e      	mov	r6, r1
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   1c9a2:	1e63      	subs	r3, r4, #1
   1c9a4:	b29b      	uxth	r3, r3
   1c9a6:	2b01      	cmp	r3, #1
   1c9a8:	d86b      	bhi.n	1ca82 <bt_gatt_attr_write_ccc+0xf6>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   1c9aa:	2c01      	cmp	r4, #1
   1c9ac:	d920      	bls.n	1c9f0 <bt_gatt_attr_write_ccc+0x64>
   1c9ae:	7853      	ldrb	r3, [r2, #1]
   1c9b0:	7815      	ldrb	r5, [r2, #0]
   1c9b2:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   1c9b6:	4639      	mov	r1, r7
   1c9b8:	4648      	mov	r0, r9
   1c9ba:	f7ff feef 	bl	1c79c <find_ccc_cfg>
	if (!cfg) {
   1c9be:	4680      	mov	r8, r0
   1c9c0:	b1c0      	cbz	r0, 1c9f4 <bt_gatt_attr_write_ccc+0x68>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
		cfg->id = conn->id;
	}

	/* Confirm write if cfg is managed by application */
	if (ccc->cfg_write) {
   1c9c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1c9c4:	b143      	cbz	r3, 1c9d8 <bt_gatt_attr_write_ccc+0x4c>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1c9c6:	462a      	mov	r2, r5
   1c9c8:	4631      	mov	r1, r6
   1c9ca:	4648      	mov	r0, r9
   1c9cc:	4798      	blx	r3

		if (write < 0) {
   1c9ce:	2800      	cmp	r0, #0
   1c9d0:	db0b      	blt.n	1c9ea <bt_gatt_attr_write_ccc+0x5e>
			return write;
		}

		/* Accept size=1 for backwards compatibility */
		if (write != sizeof(value) && write != 1) {
   1c9d2:	3801      	subs	r0, #1
   1c9d4:	2801      	cmp	r0, #1
   1c9d6:	d857      	bhi.n	1ca88 <bt_gatt_attr_write_ccc+0xfc>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
		}
	}

	value_changed = cfg->value != value;
	cfg->value = value;
   1c9d8:	f8a8 5008 	strh.w	r5, [r8, #8]

	LOG_DBG("handle 0x%04x value %u", attr->handle, cfg->value);

	/* Update cfg if don't match */
	if (cfg->value != ccc->value) {
   1c9dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
   1c9e0:	429d      	cmp	r5, r3
   1c9e2:	d142      	bne.n	1ca6a <bt_gatt_attr_write_ccc+0xde>
		gatt_ccc_conn_enqueue(conn);
#endif
	}

	/* Disabled CCC is the same as no configured CCC, so clear the entry */
	if (!value) {
   1c9e4:	2d00      	cmp	r5, #0
   1c9e6:	d045      	beq.n	1ca74 <bt_gatt_attr_write_ccc+0xe8>
		clear_ccc_cfg(cfg);
	}

	return len;
   1c9e8:	4620      	mov	r0, r4
}
   1c9ea:	b009      	add	sp, #36	; 0x24
   1c9ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		value = *(uint8_t *)buf;
   1c9f0:	7815      	ldrb	r5, [r2, #0]
   1c9f2:	e7e0      	b.n	1c9b6 <bt_gatt_attr_write_ccc+0x2a>
		if (!value) {
   1c9f4:	b90d      	cbnz	r5, 1c9fa <bt_gatt_attr_write_ccc+0x6e>
			return len;
   1c9f6:	4620      	mov	r0, r4
   1c9f8:	e7f7      	b.n	1c9ea <bt_gatt_attr_write_ccc+0x5e>
		cfg = find_ccc_cfg(NULL, ccc);
   1c9fa:	4639      	mov	r1, r7
   1c9fc:	2000      	movs	r0, #0
   1c9fe:	f7ff fecd 	bl	1c79c <find_ccc_cfg>
		if (!cfg) {
   1ca02:	4680      	mov	r8, r0
   1ca04:	b150      	cbz	r0, 1ca1c <bt_gatt_attr_write_ccc+0x90>
   1ca06:	2207      	movs	r2, #7
   1ca08:	f109 0188 	add.w	r1, r9, #136	; 0x88
   1ca0c:	3001      	adds	r0, #1
   1ca0e:	f009 fb0a 	bl	26026 <memcpy>
		cfg->id = conn->id;
   1ca12:	f899 3008 	ldrb.w	r3, [r9, #8]
   1ca16:	f888 3000 	strb.w	r3, [r8]
   1ca1a:	e7d2      	b.n	1c9c2 <bt_gatt_attr_write_ccc+0x36>
			LOG_WRN("No space to store CCC cfg");
   1ca1c:	4b1c      	ldr	r3, [pc, #112]	; (1ca90 <bt_gatt_attr_write_ccc+0x104>)
   1ca1e:	9307      	str	r3, [sp, #28]
   1ca20:	2202      	movs	r2, #2
   1ca22:	f88d 2004 	strb.w	r2, [sp, #4]
   1ca26:	2300      	movs	r3, #0
   1ca28:	f88d 3005 	strb.w	r3, [sp, #5]
   1ca2c:	f88d 3006 	strb.w	r3, [sp, #6]
   1ca30:	f88d 3007 	strb.w	r3, [sp, #7]
   1ca34:	9901      	ldr	r1, [sp, #4]
   1ca36:	9106      	str	r1, [sp, #24]
   1ca38:	4619      	mov	r1, r3
   1ca3a:	f363 0100 	bfi	r1, r3, #0, #1
   1ca3e:	f363 0141 	bfi	r1, r3, #1, #1
   1ca42:	f363 0182 	bfi	r1, r3, #2, #1
   1ca46:	f363 01c5 	bfi	r1, r3, #3, #3
   1ca4a:	f362 1188 	bfi	r1, r2, #6, #3
   1ca4e:	2208      	movs	r2, #8
   1ca50:	f362 2152 	bfi	r1, r2, #9, #10
   1ca54:	f363 41de 	bfi	r1, r3, #19, #12
   1ca58:	f363 71df 	bfi	r1, r3, #31, #1
   1ca5c:	aa06      	add	r2, sp, #24
   1ca5e:	480d      	ldr	r0, [pc, #52]	; (1ca94 <bt_gatt_attr_write_ccc+0x108>)
   1ca60:	f008 fea7 	bl	257b2 <z_impl_z_log_msg_static_create>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1ca64:	f06f 0010 	mvn.w	r0, #16
   1ca68:	e7bf      	b.n	1c9ea <bt_gatt_attr_write_ccc+0x5e>
		gatt_ccc_changed(attr, ccc);
   1ca6a:	4639      	mov	r1, r7
   1ca6c:	4630      	mov	r0, r6
   1ca6e:	f00a ff75 	bl	2795c <gatt_ccc_changed>
   1ca72:	e7b7      	b.n	1c9e4 <bt_gatt_attr_write_ccc+0x58>
		clear_ccc_cfg(cfg);
   1ca74:	4640      	mov	r0, r8
   1ca76:	f7ff ff7b 	bl	1c970 <clear_ccc_cfg>
   1ca7a:	e7b5      	b.n	1c9e8 <bt_gatt_attr_write_ccc+0x5c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ca7c:	f06f 0006 	mvn.w	r0, #6
   1ca80:	e7b3      	b.n	1c9ea <bt_gatt_attr_write_ccc+0x5e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1ca82:	f06f 000c 	mvn.w	r0, #12
   1ca86:	e7b0      	b.n	1c9ea <bt_gatt_attr_write_ccc+0x5e>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1ca88:	f06f 000d 	mvn.w	r0, #13
   1ca8c:	e7ad      	b.n	1c9ea <bt_gatt_attr_write_ccc+0x5e>
   1ca8e:	bf00      	nop
   1ca90:	0002cf5c 	.word	0x0002cf5c
   1ca94:	0002b174 	.word	0x0002b174

0001ca98 <sc_clear>:
{
   1ca98:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ca9a:	b083      	sub	sp, #12
   1ca9c:	af00      	add	r7, sp, #0
   1ca9e:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1caa0:	f100 0588 	add.w	r5, r0, #136	; 0x88
   1caa4:	4629      	mov	r1, r5
   1caa6:	7a00      	ldrb	r0, [r0, #8]
   1caa8:	f009 fd19 	bl	264de <bt_addr_le_is_bonded>
   1caac:	2800      	cmp	r0, #0
   1caae:	d042      	beq.n	1cb36 <sc_clear+0x9e>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1cab0:	4629      	mov	r1, r5
   1cab2:	7a20      	ldrb	r0, [r4, #8]
   1cab4:	f00b f805 	bl	27ac2 <bt_gatt_clear_sc>
		if (err) {
   1cab8:	4604      	mov	r4, r0
   1caba:	2800      	cmp	r0, #0
   1cabc:	d042      	beq.n	1cb44 <sc_clear+0xac>
			LOG_ERR("Failed to clear SC %d", err);
   1cabe:	466d      	mov	r5, sp
   1cac0:	b088      	sub	sp, #32
   1cac2:	466b      	mov	r3, sp
   1cac4:	f113 0210 	adds.w	r2, r3, #16
   1cac8:	d02f      	beq.n	1cb2a <sc_clear+0x92>
   1caca:	210c      	movs	r1, #12
   1cacc:	b13a      	cbz	r2, 1cade <sc_clear+0x46>
   1cace:	4608      	mov	r0, r1
   1cad0:	2904      	cmp	r1, #4
   1cad2:	dd01      	ble.n	1cad8 <sc_clear+0x40>
   1cad4:	4e1d      	ldr	r6, [pc, #116]	; (1cb4c <sc_clear+0xb4>)
   1cad6:	615e      	str	r6, [r3, #20]
   1cad8:	2808      	cmp	r0, #8
   1cada:	dd00      	ble.n	1cade <sc_clear+0x46>
   1cadc:	619c      	str	r4, [r3, #24]
   1cade:	290b      	cmp	r1, #11
   1cae0:	dd26      	ble.n	1cb30 <sc_clear+0x98>
   1cae2:	240c      	movs	r4, #12
   1cae4:	b13a      	cbz	r2, 1caf6 <sc_clear+0x5e>
   1cae6:	2103      	movs	r1, #3
   1cae8:	7139      	strb	r1, [r7, #4]
   1caea:	2100      	movs	r1, #0
   1caec:	7179      	strb	r1, [r7, #5]
   1caee:	71b9      	strb	r1, [r7, #6]
   1caf0:	71f9      	strb	r1, [r7, #7]
   1caf2:	6878      	ldr	r0, [r7, #4]
   1caf4:	6118      	str	r0, [r3, #16]
   1caf6:	2100      	movs	r1, #0
   1caf8:	f36f 0100 	bfc	r1, #0, #1
   1cafc:	f36f 0141 	bfc	r1, #1, #1
   1cb00:	f36f 0182 	bfc	r1, #2, #1
   1cb04:	f36f 01c5 	bfc	r1, #3, #3
   1cb08:	2301      	movs	r3, #1
   1cb0a:	f363 1188 	bfi	r1, r3, #6, #3
   1cb0e:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1cb12:	f364 2152 	bfi	r1, r4, #9, #10
   1cb16:	f36f 41de 	bfc	r1, #19, #12
   1cb1a:	f36f 71df 	bfc	r1, #31, #1
   1cb1e:	2300      	movs	r3, #0
   1cb20:	480b      	ldr	r0, [pc, #44]	; (1cb50 <sc_clear+0xb8>)
   1cb22:	f008 fe46 	bl	257b2 <z_impl_z_log_msg_static_create>
   1cb26:	46ad      	mov	sp, r5
   1cb28:	e00c      	b.n	1cb44 <sc_clear+0xac>
   1cb2a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1cb2e:	e7cd      	b.n	1cacc <sc_clear+0x34>
   1cb30:	f06f 041b 	mvn.w	r4, #27
   1cb34:	e7d6      	b.n	1cae4 <sc_clear+0x4c>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1cb36:	4629      	mov	r1, r5
   1cb38:	7a20      	ldrb	r0, [r4, #8]
   1cb3a:	f7ff fe0b 	bl	1c754 <find_sc_cfg>
		if (cfg) {
   1cb3e:	b108      	cbz	r0, 1cb44 <sc_clear+0xac>
			clear_sc_cfg(cfg);
   1cb40:	f00a ffb9 	bl	27ab6 <clear_sc_cfg>
}
   1cb44:	370c      	adds	r7, #12
   1cb46:	46bd      	mov	sp, r7
   1cb48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cb4a:	bf00      	nop
   1cb4c:	0002cf78 	.word	0x0002cf78
   1cb50:	0002b174 	.word	0x0002b174

0001cb54 <sc_indicate_rsp>:
{
   1cb54:	b510      	push	{r4, lr}
   1cb56:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1cb58:	4b1b      	ldr	r3, [pc, #108]	; (1cbc8 <sc_indicate_rsp+0x74>)
   1cb5a:	f3bf 8f5b 	dmb	ish
   1cb5e:	e853 2f00 	ldrex	r2, [r3]
   1cb62:	f022 0202 	bic.w	r2, r2, #2
   1cb66:	e843 2100 	strex	r1, r2, [r3]
   1cb6a:	2900      	cmp	r1, #0
   1cb6c:	d1f7      	bne.n	1cb5e <sc_indicate_rsp+0xa>
   1cb6e:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cb72:	f3bf 8f5b 	dmb	ish
   1cb76:	681b      	ldr	r3, [r3, #0]
   1cb78:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1cb7c:	f013 0f01 	tst.w	r3, #1
   1cb80:	d104      	bne.n	1cb8c <sc_indicate_rsp+0x38>
	if (bt_att_fixed_chan_only(conn)) {
   1cb82:	4620      	mov	r0, r4
   1cb84:	f00a fe46 	bl	27814 <bt_att_fixed_chan_only>
   1cb88:	b930      	cbnz	r0, 1cb98 <sc_indicate_rsp+0x44>
}
   1cb8a:	bd10      	pop	{r4, pc}
	k_work_reschedule(&gatt_sc.work, timeout);
   1cb8c:	2200      	movs	r2, #0
   1cb8e:	2300      	movs	r3, #0
   1cb90:	480e      	ldr	r0, [pc, #56]	; (1cbcc <sc_indicate_rsp+0x78>)
   1cb92:	f006 f9bf 	bl	22f14 <k_work_reschedule>
   1cb96:	e7f4      	b.n	1cb82 <sc_indicate_rsp+0x2e>
		cfg = find_cf_cfg(conn);
   1cb98:	4620      	mov	r0, r4
   1cb9a:	f7ff fdb5 	bl	1c708 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1cb9e:	4603      	mov	r3, r0
   1cba0:	2800      	cmp	r0, #0
   1cba2:	d0f2      	beq.n	1cb8a <sc_indicate_rsp+0x36>
   1cba4:	7a02      	ldrb	r2, [r0, #8]
   1cba6:	f012 0f01 	tst.w	r2, #1
   1cbaa:	d0ee      	beq.n	1cb8a <sc_indicate_rsp+0x36>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1cbac:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1cbae:	f3bf 8f5b 	dmb	ish
   1cbb2:	e853 1f00 	ldrex	r1, [r3]
   1cbb6:	f041 0101 	orr.w	r1, r1, #1
   1cbba:	e843 1200 	strex	r2, r1, [r3]
   1cbbe:	2a00      	cmp	r2, #0
   1cbc0:	d1f7      	bne.n	1cbb2 <sc_indicate_rsp+0x5e>
   1cbc2:	f3bf 8f5b 	dmb	ish
}
   1cbc6:	e7e0      	b.n	1cb8a <sc_indicate_rsp+0x36>
   1cbc8:	20002798 	.word	0x20002798
   1cbcc:	20002768 	.word	0x20002768

0001cbd0 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   1cbd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cbd4:	4690      	mov	r8, r2
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1cbd6:	6882      	ldr	r2, [r0, #8]
   1cbd8:	4b2e      	ldr	r3, [pc, #184]	; (1cc94 <disconnected_cb+0xc4>)
   1cbda:	429a      	cmp	r2, r3
   1cbdc:	d002      	beq.n	1cbe4 <disconnected_cb+0x14>

		LOG_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   1cbde:	2001      	movs	r0, #1
   1cbe0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cbe4:	4681      	mov	r9, r0
	ccc = attr->user_data;
   1cbe6:	68c6      	ldr	r6, [r0, #12]
	if (!ccc->value) {
   1cbe8:	f8b6 3050 	ldrh.w	r3, [r6, #80]	; 0x50
   1cbec:	2b00      	cmp	r3, #0
   1cbee:	d0f6      	beq.n	1cbde <disconnected_cb+0xe>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1cbf0:	2400      	movs	r4, #0
	value_used = false;
   1cbf2:	46a2      	mov	sl, r4
   1cbf4:	e003      	b.n	1cbfe <disconnected_cb+0x2e>
				bt_conn_unref(tmp);
   1cbf6:	4618      	mov	r0, r3
   1cbf8:	f009 fe57 	bl	268aa <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1cbfc:	3401      	adds	r4, #1
   1cbfe:	2c07      	cmp	r4, #7
   1cc00:	d83a      	bhi.n	1cc78 <disconnected_cb+0xa8>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1cc02:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   1cc06:	eb06 0545 	add.w	r5, r6, r5, lsl #1
		if (!cfg->value) {
   1cc0a:	892b      	ldrh	r3, [r5, #8]
   1cc0c:	2b00      	cmp	r3, #0
   1cc0e:	d0f5      	beq.n	1cbfc <disconnected_cb+0x2c>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1cc10:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1cc14:	462f      	mov	r7, r5
   1cc16:	3701      	adds	r7, #1
   1cc18:	463a      	mov	r2, r7
   1cc1a:	f816 1013 	ldrb.w	r1, [r6, r3, lsl #1]
   1cc1e:	4640      	mov	r0, r8
   1cc20:	f009 fe9d 	bl	2695e <bt_conn_is_peer_addr_le>
   1cc24:	b978      	cbnz	r0, 1cc46 <disconnected_cb+0x76>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1cc26:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1cc2a:	4639      	mov	r1, r7
   1cc2c:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
   1cc30:	f7fd fbfa 	bl	1a428 <bt_conn_lookup_addr_le>
			if (tmp) {
   1cc34:	4603      	mov	r3, r0
   1cc36:	2800      	cmp	r0, #0
   1cc38:	d0e0      	beq.n	1cbfc <disconnected_cb+0x2c>
				if (tmp->state == BT_CONN_CONNECTED) {
   1cc3a:	7a82      	ldrb	r2, [r0, #10]
   1cc3c:	2a07      	cmp	r2, #7
   1cc3e:	d1da      	bne.n	1cbf6 <disconnected_cb+0x26>
					value_used = true;
   1cc40:	f04f 0a01 	mov.w	sl, #1
   1cc44:	e7d7      	b.n	1cbf6 <disconnected_cb+0x26>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1cc46:	f108 0b88 	add.w	fp, r8, #136	; 0x88
   1cc4a:	4659      	mov	r1, fp
   1cc4c:	f898 0008 	ldrb.w	r0, [r8, #8]
   1cc50:	f009 fc45 	bl	264de <bt_addr_le_is_bonded>
   1cc54:	b950      	cbnz	r0, 1cc6c <disconnected_cb+0x9c>
				if (ccc == &sc_ccc) {
   1cc56:	4b10      	ldr	r3, [pc, #64]	; (1cc98 <disconnected_cb+0xc8>)
   1cc58:	429e      	cmp	r6, r3
   1cc5a:	d003      	beq.n	1cc64 <disconnected_cb+0x94>
				clear_ccc_cfg(cfg);
   1cc5c:	4628      	mov	r0, r5
   1cc5e:	f7ff fe87 	bl	1c970 <clear_ccc_cfg>
   1cc62:	e7cb      	b.n	1cbfc <disconnected_cb+0x2c>
					sc_clear(conn);
   1cc64:	4640      	mov	r0, r8
   1cc66:	f7ff ff17 	bl	1ca98 <sc_clear>
   1cc6a:	e7f7      	b.n	1cc5c <disconnected_cb+0x8c>
   1cc6c:	2207      	movs	r2, #7
   1cc6e:	4659      	mov	r1, fp
   1cc70:	4638      	mov	r0, r7
   1cc72:	f009 f9d8 	bl	26026 <memcpy>
}
   1cc76:	e7c1      	b.n	1cbfc <disconnected_cb+0x2c>
	if (!value_used) {
   1cc78:	f1ba 0f00 	cmp.w	sl, #0
   1cc7c:	d1af      	bne.n	1cbde <disconnected_cb+0xe>
		ccc->value = 0U;
   1cc7e:	2300      	movs	r3, #0
   1cc80:	f8a6 3050 	strh.w	r3, [r6, #80]	; 0x50
		if (ccc->cfg_changed) {
   1cc84:	6d73      	ldr	r3, [r6, #84]	; 0x54
   1cc86:	2b00      	cmp	r3, #0
   1cc88:	d0a9      	beq.n	1cbde <disconnected_cb+0xe>
			ccc->cfg_changed(attr, ccc->value);
   1cc8a:	2100      	movs	r1, #0
   1cc8c:	4648      	mov	r0, r9
   1cc8e:	4798      	blx	r3
   1cc90:	e7a5      	b.n	1cbde <disconnected_cb+0xe>
   1cc92:	bf00      	nop
   1cc94:	0001c98d 	.word	0x0001c98d
   1cc98:	200007b8 	.word	0x200007b8

0001cc9c <clear_cf_cfg>:
{
   1cc9c:	b510      	push	{r4, lr}
   1cc9e:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
   1cca0:	2207      	movs	r2, #7
   1cca2:	490b      	ldr	r1, [pc, #44]	; (1ccd0 <clear_cf_cfg+0x34>)
   1cca4:	3001      	adds	r0, #1
   1cca6:	f009 f9be 	bl	26026 <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1ccaa:	2201      	movs	r2, #1
   1ccac:	2100      	movs	r1, #0
   1ccae:	f104 0008 	add.w	r0, r4, #8
   1ccb2:	f009 f9e7 	bl	26084 <memset>
	atomic_set(cfg->flags, 0);
   1ccb6:	340c      	adds	r4, #12
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ccb8:	2300      	movs	r3, #0
   1ccba:	f3bf 8f5b 	dmb	ish
   1ccbe:	e854 2f00 	ldrex	r2, [r4]
   1ccc2:	e844 3100 	strex	r1, r3, [r4]
   1ccc6:	2900      	cmp	r1, #0
   1ccc8:	d1f9      	bne.n	1ccbe <clear_cf_cfg+0x22>
   1ccca:	f3bf 8f5b 	dmb	ish
}
   1ccce:	bd10      	pop	{r4, pc}
   1ccd0:	0002bffc 	.word	0x0002bffc

0001ccd4 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1ccd4:	4b13      	ldr	r3, [pc, #76]	; (1cd24 <bt_gatt_init+0x50>)
   1ccd6:	2201      	movs	r2, #1
   1ccd8:	f3bf 8f5b 	dmb	ish
   1ccdc:	e853 1f00 	ldrex	r1, [r3]
   1cce0:	2900      	cmp	r1, #0
   1cce2:	d103      	bne.n	1ccec <bt_gatt_init+0x18>
   1cce4:	e843 2000 	strex	r0, r2, [r3]
   1cce8:	2800      	cmp	r0, #0
   1ccea:	d1f7      	bne.n	1ccdc <bt_gatt_init+0x8>
   1ccec:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1ccf0:	d116      	bne.n	1cd20 <bt_gatt_init+0x4c>
{
   1ccf2:	b510      	push	{r4, lr}
	bt_gatt_service_init();
   1ccf4:	f7ff fce4 	bl	1c6c0 <bt_gatt_service_init>
	list->head = NULL;
   1ccf8:	4b0b      	ldr	r3, [pc, #44]	; (1cd28 <bt_gatt_init+0x54>)
   1ccfa:	2200      	movs	r2, #0
   1ccfc:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   1ccfe:	605a      	str	r2, [r3, #4]
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1cd00:	4c0a      	ldr	r4, [pc, #40]	; (1cd2c <bt_gatt_init+0x58>)
   1cd02:	490b      	ldr	r1, [pc, #44]	; (1cd30 <bt_gatt_init+0x5c>)
   1cd04:	4620      	mov	r0, r4
   1cd06:	f00d fba7 	bl	2a458 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1cd0a:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1cd0e:	2300      	movs	r3, #0
   1cd10:	4620      	mov	r0, r4
   1cd12:	f7f9 fa21 	bl	16158 <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1cd16:	4907      	ldr	r1, [pc, #28]	; (1cd34 <bt_gatt_init+0x60>)
   1cd18:	4807      	ldr	r0, [pc, #28]	; (1cd38 <bt_gatt_init+0x64>)
   1cd1a:	f00d fb9d 	bl	2a458 <k_work_init_delayable>
}
   1cd1e:	bd10      	pop	{r4, pc}
   1cd20:	4770      	bx	lr
   1cd22:	bf00      	nop
   1cd24:	20005e14 	.word	0x20005e14
   1cd28:	20005e18 	.word	0x20005e18
   1cd2c:	200026f0 	.word	0x200026f0
   1cd30:	00027e1f 	.word	0x00027e1f
   1cd34:	0001d2e1 	.word	0x0001d2e1
   1cd38:	20002768 	.word	0x20002768

0001cd3c <bt_gatt_attr_get_handle>:
	if (!attr) {
   1cd3c:	b328      	cbz	r0, 1cd8a <bt_gatt_attr_get_handle+0x4e>
   1cd3e:	4684      	mov	ip, r0
	if (attr->handle) {
   1cd40:	8a00      	ldrh	r0, [r0, #16]
   1cd42:	bb38      	cbnz	r0, 1cd94 <bt_gatt_attr_get_handle+0x58>
{
   1cd44:	b470      	push	{r4, r5, r6}
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1cd46:	4d14      	ldr	r5, [pc, #80]	; (1cd98 <bt_gatt_attr_get_handle+0x5c>)
	uint16_t handle = 1;
   1cd48:	2201      	movs	r2, #1
   1cd4a:	e003      	b.n	1cd54 <bt_gatt_attr_get_handle+0x18>
			handle += static_svc->attr_count;
   1cd4c:	686b      	ldr	r3, [r5, #4]
   1cd4e:	4413      	add	r3, r2
   1cd50:	b29a      	uxth	r2, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1cd52:	3508      	adds	r5, #8
   1cd54:	4b11      	ldr	r3, [pc, #68]	; (1cd9c <bt_gatt_attr_get_handle+0x60>)
   1cd56:	429d      	cmp	r5, r3
   1cd58:	d21a      	bcs.n	1cd90 <bt_gatt_attr_get_handle+0x54>
		if ((attr < &static_svc->attrs[0]) ||
   1cd5a:	682c      	ldr	r4, [r5, #0]
   1cd5c:	4564      	cmp	r4, ip
   1cd5e:	d8f5      	bhi.n	1cd4c <bt_gatt_attr_get_handle+0x10>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1cd60:	686e      	ldr	r6, [r5, #4]
   1cd62:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   1cd66:	009b      	lsls	r3, r3, #2
   1cd68:	3b14      	subs	r3, #20
   1cd6a:	4423      	add	r3, r4
		if ((attr < &static_svc->attrs[0]) ||
   1cd6c:	4563      	cmp	r3, ip
   1cd6e:	d3ed      	bcc.n	1cd4c <bt_gatt_attr_get_handle+0x10>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1cd70:	2300      	movs	r3, #0
   1cd72:	429e      	cmp	r6, r3
   1cd74:	d9ed      	bls.n	1cd52 <bt_gatt_attr_get_handle+0x16>
			if (attr == &static_svc->attrs[i]) {
   1cd76:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1cd7a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   1cd7e:	4561      	cmp	r1, ip
   1cd80:	d005      	beq.n	1cd8e <bt_gatt_attr_get_handle+0x52>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1cd82:	3301      	adds	r3, #1
   1cd84:	3201      	adds	r2, #1
   1cd86:	b292      	uxth	r2, r2
   1cd88:	e7f3      	b.n	1cd72 <bt_gatt_attr_get_handle+0x36>
		return 0;
   1cd8a:	2000      	movs	r0, #0
   1cd8c:	4770      	bx	lr
				return handle;
   1cd8e:	4610      	mov	r0, r2
}
   1cd90:	bc70      	pop	{r4, r5, r6}
   1cd92:	4770      	bx	lr
   1cd94:	4770      	bx	lr
   1cd96:	bf00      	nop
   1cd98:	0002b144 	.word	0x0002b144
   1cd9c:	0002b154 	.word	0x0002b154

0001cda0 <bt_gatt_foreach_attr_type>:
{
   1cda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cda4:	b089      	sub	sp, #36	; 0x24
   1cda6:	4682      	mov	sl, r0
   1cda8:	9107      	str	r1, [sp, #28]
   1cdaa:	4690      	mov	r8, r2
   1cdac:	4699      	mov	r9, r3
   1cdae:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   1cdb0:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
	if (!num_matches) {
   1cdb4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1cdb8:	b91b      	cbnz	r3, 1cdc2 <bt_gatt_foreach_attr_type+0x22>
		num_matches = UINT16_MAX;
   1cdba:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1cdbe:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
	if (start_handle <= last_static_handle) {
   1cdc2:	4b1b      	ldr	r3, [pc, #108]	; (1ce30 <bt_gatt_foreach_attr_type+0x90>)
   1cdc4:	881b      	ldrh	r3, [r3, #0]
   1cdc6:	4553      	cmp	r3, sl
   1cdc8:	d22a      	bcs.n	1ce20 <bt_gatt_foreach_attr_type+0x80>
}
   1cdca:	b009      	add	sp, #36	; 0x24
   1cdcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				handle += static_svc->attr_count;
   1cdd0:	b28c      	uxth	r4, r1
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1cdd2:	3608      	adds	r6, #8
   1cdd4:	4b17      	ldr	r3, [pc, #92]	; (1ce34 <bt_gatt_foreach_attr_type+0x94>)
   1cdd6:	429e      	cmp	r6, r3
   1cdd8:	d2f7      	bcs.n	1cdca <bt_gatt_foreach_attr_type+0x2a>
			if (handle + static_svc->attr_count < start_handle) {
   1cdda:	6873      	ldr	r3, [r6, #4]
   1cddc:	18e1      	adds	r1, r4, r3
   1cdde:	42b9      	cmp	r1, r7
   1cde0:	d3f6      	bcc.n	1cdd0 <bt_gatt_foreach_attr_type+0x30>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1cde2:	2500      	movs	r5, #0
   1cde4:	6873      	ldr	r3, [r6, #4]
   1cde6:	42ab      	cmp	r3, r5
   1cde8:	d9f3      	bls.n	1cdd2 <bt_gatt_foreach_attr_type+0x32>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1cdea:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   1cdee:	f8cd b010 	str.w	fp, [sp, #16]
   1cdf2:	f8cd a00c 	str.w	sl, [sp, #12]
   1cdf6:	ab12      	add	r3, sp, #72	; 0x48
   1cdf8:	9302      	str	r3, [sp, #8]
   1cdfa:	f8cd 9004 	str.w	r9, [sp, #4]
   1cdfe:	f8cd 8000 	str.w	r8, [sp]
   1ce02:	9b07      	ldr	r3, [sp, #28]
   1ce04:	463a      	mov	r2, r7
   1ce06:	4621      	mov	r1, r4
   1ce08:	f8d6 c000 	ldr.w	ip, [r6]
   1ce0c:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
   1ce10:	f00a febb 	bl	27b8a <gatt_foreach_iter>
   1ce14:	2800      	cmp	r0, #0
   1ce16:	d0d8      	beq.n	1cdca <bt_gatt_foreach_attr_type+0x2a>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1ce18:	3501      	adds	r5, #1
   1ce1a:	3401      	adds	r4, #1
   1ce1c:	b2a4      	uxth	r4, r4
   1ce1e:	e7e1      	b.n	1cde4 <bt_gatt_foreach_attr_type+0x44>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1ce20:	4e05      	ldr	r6, [pc, #20]	; (1ce38 <bt_gatt_foreach_attr_type+0x98>)
		uint16_t handle = 1;
   1ce22:	2401      	movs	r4, #1
   1ce24:	9713      	str	r7, [sp, #76]	; 0x4c
   1ce26:	4657      	mov	r7, sl
   1ce28:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   1ce2c:	e7d2      	b.n	1cdd4 <bt_gatt_foreach_attr_type+0x34>
   1ce2e:	bf00      	nop
   1ce30:	200069b0 	.word	0x200069b0
   1ce34:	0002b154 	.word	0x0002b154
   1ce38:	0002b144 	.word	0x0002b144

0001ce3c <db_hash_gen>:
{
   1ce3c:	b510      	push	{r4, lr}
   1ce3e:	b0da      	sub	sp, #360	; 0x168
	uint8_t key[16] = {};
   1ce40:	2300      	movs	r3, #0
   1ce42:	934a      	str	r3, [sp, #296]	; 0x128
   1ce44:	934b      	str	r3, [sp, #300]	; 0x12c
   1ce46:	934c      	str	r3, [sp, #304]	; 0x130
   1ce48:	934d      	str	r3, [sp, #308]	; 0x134
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1ce4a:	aa1e      	add	r2, sp, #120	; 0x78
   1ce4c:	a94a      	add	r1, sp, #296	; 0x128
   1ce4e:	a806      	add	r0, sp, #24
   1ce50:	f008 ff30 	bl	25cb4 <tc_cmac_setup>
   1ce54:	b320      	cbz	r0, 1cea0 <db_hash_gen+0x64>
   1ce56:	ac06      	add	r4, sp, #24
   1ce58:	9402      	str	r4, [sp, #8]
   1ce5a:	4b37      	ldr	r3, [pc, #220]	; (1cf38 <db_hash_gen+0xfc>)
   1ce5c:	9301      	str	r3, [sp, #4]
   1ce5e:	2200      	movs	r2, #0
   1ce60:	9200      	str	r2, [sp, #0]
   1ce62:	4613      	mov	r3, r2
   1ce64:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1ce68:	2001      	movs	r0, #1
   1ce6a:	f7ff ff99 	bl	1cda0 <bt_gatt_foreach_attr_type>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1ce6e:	4621      	mov	r1, r4
   1ce70:	4832      	ldr	r0, [pc, #200]	; (1cf3c <db_hash_gen+0x100>)
   1ce72:	f008 ffbc 	bl	25dee <tc_cmac_final>
   1ce76:	2800      	cmp	r0, #0
   1ce78:	d038      	beq.n	1ceec <db_hash_gen+0xb0>
	sys_mem_swap(db_hash.hash, sizeof(db_hash.hash));
   1ce7a:	2110      	movs	r1, #16
   1ce7c:	482f      	ldr	r0, [pc, #188]	; (1cf3c <db_hash_gen+0x100>)
   1ce7e:	f00a fcfb 	bl	27878 <sys_mem_swap>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ce82:	4b2f      	ldr	r3, [pc, #188]	; (1cf40 <db_hash_gen+0x104>)
   1ce84:	f3bf 8f5b 	dmb	ish
   1ce88:	e853 1f00 	ldrex	r1, [r3]
   1ce8c:	f041 0104 	orr.w	r1, r1, #4
   1ce90:	e843 1200 	strex	r2, r1, [r3]
   1ce94:	2a00      	cmp	r2, #0
   1ce96:	d1f7      	bne.n	1ce88 <db_hash_gen+0x4c>
   1ce98:	f3bf 8f5b 	dmb	ish
}
   1ce9c:	b05a      	add	sp, #360	; 0x168
   1ce9e:	bd10      	pop	{r4, pc}
		LOG_ERR("Unable to setup AES CMAC");
   1cea0:	4b28      	ldr	r3, [pc, #160]	; (1cf44 <db_hash_gen+0x108>)
   1cea2:	9359      	str	r3, [sp, #356]	; 0x164
   1cea4:	2302      	movs	r3, #2
   1cea6:	f88d 3014 	strb.w	r3, [sp, #20]
   1ceaa:	2300      	movs	r3, #0
   1ceac:	f88d 3015 	strb.w	r3, [sp, #21]
   1ceb0:	f88d 3016 	strb.w	r3, [sp, #22]
   1ceb4:	f88d 3017 	strb.w	r3, [sp, #23]
   1ceb8:	9a05      	ldr	r2, [sp, #20]
   1ceba:	9258      	str	r2, [sp, #352]	; 0x160
   1cebc:	4619      	mov	r1, r3
   1cebe:	f363 0100 	bfi	r1, r3, #0, #1
   1cec2:	f363 0141 	bfi	r1, r3, #1, #1
   1cec6:	f363 0182 	bfi	r1, r3, #2, #1
   1ceca:	f363 01c5 	bfi	r1, r3, #3, #3
   1cece:	2201      	movs	r2, #1
   1ced0:	f362 1188 	bfi	r1, r2, #6, #3
   1ced4:	2208      	movs	r2, #8
   1ced6:	f362 2152 	bfi	r1, r2, #9, #10
   1ceda:	f363 41de 	bfi	r1, r3, #19, #12
   1cede:	f363 71df 	bfi	r1, r3, #31, #1
   1cee2:	aa58      	add	r2, sp, #352	; 0x160
   1cee4:	4818      	ldr	r0, [pc, #96]	; (1cf48 <db_hash_gen+0x10c>)
   1cee6:	f008 fc64 	bl	257b2 <z_impl_z_log_msg_static_create>
		return;
   1ceea:	e7d7      	b.n	1ce9c <db_hash_gen+0x60>
		LOG_ERR("Unable to calculate hash");
   1ceec:	4b17      	ldr	r3, [pc, #92]	; (1cf4c <db_hash_gen+0x110>)
   1ceee:	9353      	str	r3, [sp, #332]	; 0x14c
   1cef0:	2302      	movs	r3, #2
   1cef2:	f88d 3014 	strb.w	r3, [sp, #20]
   1cef6:	2300      	movs	r3, #0
   1cef8:	f88d 3015 	strb.w	r3, [sp, #21]
   1cefc:	f88d 3016 	strb.w	r3, [sp, #22]
   1cf00:	f88d 3017 	strb.w	r3, [sp, #23]
   1cf04:	9a05      	ldr	r2, [sp, #20]
   1cf06:	9252      	str	r2, [sp, #328]	; 0x148
   1cf08:	4619      	mov	r1, r3
   1cf0a:	f363 0100 	bfi	r1, r3, #0, #1
   1cf0e:	f363 0141 	bfi	r1, r3, #1, #1
   1cf12:	f363 0182 	bfi	r1, r3, #2, #1
   1cf16:	f363 01c5 	bfi	r1, r3, #3, #3
   1cf1a:	2201      	movs	r2, #1
   1cf1c:	f362 1188 	bfi	r1, r2, #6, #3
   1cf20:	2208      	movs	r2, #8
   1cf22:	f362 2152 	bfi	r1, r2, #9, #10
   1cf26:	f363 41de 	bfi	r1, r3, #19, #12
   1cf2a:	f363 71df 	bfi	r1, r3, #31, #1
   1cf2e:	aa52      	add	r2, sp, #328	; 0x148
   1cf30:	4805      	ldr	r0, [pc, #20]	; (1cf48 <db_hash_gen+0x10c>)
   1cf32:	f008 fc3e 	bl	257b2 <z_impl_z_log_msg_static_create>
		return;
   1cf36:	e7b1      	b.n	1ce9c <db_hash_gen+0x60>
   1cf38:	000279bf 	.word	0x000279bf
   1cf3c:	200026e0 	.word	0x200026e0
   1cf40:	20002798 	.word	0x20002798
   1cf44:	0002cf90 	.word	0x0002cf90
   1cf48:	0002b174 	.word	0x0002b174
   1cf4c:	0002cfac 	.word	0x0002cfac

0001cf50 <db_hash_read>:
{
   1cf50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cf54:	b084      	sub	sp, #16
   1cf56:	4604      	mov	r4, r0
   1cf58:	460d      	mov	r5, r1
   1cf5a:	4616      	mov	r6, r2
   1cf5c:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1cf5e:	491f      	ldr	r1, [pc, #124]	; (1cfdc <db_hash_read+0x8c>)
   1cf60:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   1cf64:	f00d fadb 	bl	2a51e <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cf68:	f3bf 8f5b 	dmb	ish
   1cf6c:	4b1c      	ldr	r3, [pc, #112]	; (1cfe0 <db_hash_read+0x90>)
   1cf6e:	681b      	ldr	r3, [r3, #0]
   1cf70:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1cf74:	f013 0f04 	tst.w	r3, #4
   1cf78:	d017      	beq.n	1cfaa <db_hash_read+0x5a>
	cfg = find_cf_cfg(conn);
   1cf7a:	4620      	mov	r0, r4
   1cf7c:	f7ff fbc4 	bl	1c708 <find_cf_cfg>
	if (cfg &&
   1cf80:	b118      	cbz	r0, 1cf8a <db_hash_read+0x3a>
	    CF_ROBUST_CACHING(cfg) &&
   1cf82:	7a02      	ldrb	r2, [r0, #8]
	if (cfg &&
   1cf84:	f012 0f01 	tst.w	r2, #1
   1cf88:	d113      	bne.n	1cfb2 <db_hash_read+0x62>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1cf8a:	2310      	movs	r3, #16
   1cf8c:	9302      	str	r3, [sp, #8]
   1cf8e:	4b15      	ldr	r3, [pc, #84]	; (1cfe4 <db_hash_read+0x94>)
   1cf90:	9301      	str	r3, [sp, #4]
   1cf92:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1cf96:	9300      	str	r3, [sp, #0]
   1cf98:	463b      	mov	r3, r7
   1cf9a:	4632      	mov	r2, r6
   1cf9c:	4629      	mov	r1, r5
   1cf9e:	4620      	mov	r0, r4
   1cfa0:	f00a fe43 	bl	27c2a <bt_gatt_attr_read>
}
   1cfa4:	b004      	add	sp, #16
   1cfa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		db_hash_gen(true);
   1cfaa:	2001      	movs	r0, #1
   1cfac:	f7ff ff46 	bl	1ce3c <db_hash_gen>
   1cfb0:	e7e3      	b.n	1cf7a <db_hash_read+0x2a>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1cfb2:	f100 080c 	add.w	r8, r0, #12
   1cfb6:	2100      	movs	r1, #0
   1cfb8:	4640      	mov	r0, r8
   1cfba:	f00a fd6f 	bl	27a9c <atomic_test_bit>
	    CF_ROBUST_CACHING(cfg) &&
   1cfbe:	2800      	cmp	r0, #0
   1cfc0:	d1e3      	bne.n	1cf8a <db_hash_read+0x3a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1cfc2:	f3bf 8f5b 	dmb	ish
   1cfc6:	e858 3f00 	ldrex	r3, [r8]
   1cfca:	f043 0302 	orr.w	r3, r3, #2
   1cfce:	e848 3200 	strex	r2, r3, [r8]
   1cfd2:	2a00      	cmp	r2, #0
   1cfd4:	d1f7      	bne.n	1cfc6 <db_hash_read+0x76>
   1cfd6:	f3bf 8f5b 	dmb	ish
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
}
   1cfda:	e7d6      	b.n	1cf8a <db_hash_read+0x3a>
   1cfdc:	20002720 	.word	0x20002720
   1cfe0:	20002798 	.word	0x20002798
   1cfe4:	200026e0 	.word	0x200026e0

0001cfe8 <gatt_find_by_uuid>:
{
   1cfe8:	b510      	push	{r4, lr}
   1cfea:	b084      	sub	sp, #16
   1cfec:	4604      	mov	r4, r0
   1cfee:	460a      	mov	r2, r1
	found->attr = NULL;
   1cff0:	2300      	movs	r3, #0
   1cff2:	6003      	str	r3, [r0, #0]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1cff4:	9002      	str	r0, [sp, #8]
   1cff6:	4907      	ldr	r1, [pc, #28]	; (1d014 <gatt_find_by_uuid+0x2c>)
   1cff8:	9101      	str	r1, [sp, #4]
   1cffa:	2101      	movs	r1, #1
   1cffc:	9100      	str	r1, [sp, #0]
   1cffe:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1d002:	8880      	ldrh	r0, [r0, #4]
   1d004:	f7ff fecc 	bl	1cda0 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1d008:	6820      	ldr	r0, [r4, #0]
}
   1d00a:	3800      	subs	r0, #0
   1d00c:	bf18      	it	ne
   1d00e:	2001      	movne	r0, #1
   1d010:	b004      	add	sp, #16
   1d012:	bd10      	pop	{r4, pc}
   1d014:	000279b7 	.word	0x000279b7

0001d018 <bt_gatt_attr_next>:
{
   1d018:	b510      	push	{r4, lr}
   1d01a:	b086      	sub	sp, #24
	struct bt_gatt_attr *next = NULL;
   1d01c:	2400      	movs	r4, #0
   1d01e:	9405      	str	r4, [sp, #20]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1d020:	f7ff fe8c 	bl	1cd3c <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1d024:	3001      	adds	r0, #1
   1d026:	b280      	uxth	r0, r0
   1d028:	ab05      	add	r3, sp, #20
   1d02a:	9302      	str	r3, [sp, #8]
   1d02c:	4b05      	ldr	r3, [pc, #20]	; (1d044 <bt_gatt_attr_next+0x2c>)
   1d02e:	9301      	str	r3, [sp, #4]
   1d030:	9400      	str	r4, [sp, #0]
   1d032:	4623      	mov	r3, r4
   1d034:	4622      	mov	r2, r4
   1d036:	4601      	mov	r1, r0
   1d038:	f7ff feb2 	bl	1cda0 <bt_gatt_foreach_attr_type>
}
   1d03c:	9805      	ldr	r0, [sp, #20]
   1d03e:	b006      	add	sp, #24
   1d040:	bd10      	pop	{r4, pc}
   1d042:	bf00      	nop
   1d044:	00027957 	.word	0x00027957

0001d048 <gatt_indicate>:
{
   1d048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d04c:	b096      	sub	sp, #88	; 0x58
   1d04e:	4605      	mov	r5, r0
   1d050:	460f      	mov	r7, r1
   1d052:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1d054:	2294      	movs	r2, #148	; 0x94
   1d056:	6861      	ldr	r1, [r4, #4]
   1d058:	f00a fee6 	bl	27e28 <bt_gatt_check_perm>
   1d05c:	2800      	cmp	r0, #0
   1d05e:	d13f      	bne.n	1d0e0 <gatt_indicate+0x98>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1d060:	2202      	movs	r2, #2
   1d062:	6861      	ldr	r1, [r4, #4]
   1d064:	4628      	mov	r0, r5
   1d066:	f00a ff11 	bl	27e8c <bt_gatt_is_subscribed>
   1d06a:	2800      	cmp	r0, #0
   1d06c:	d05f      	beq.n	1d12e <gatt_indicate+0xe6>
	len = sizeof(*ind) + params->len;
   1d06e:	8aa6      	ldrh	r6, [r4, #20]
   1d070:	3602      	adds	r6, #2
	req = gatt_req_alloc(gatt_indicate_rsp, params, NULL,
   1d072:	9600      	str	r6, [sp, #0]
   1d074:	231d      	movs	r3, #29
   1d076:	2200      	movs	r2, #0
   1d078:	4621      	mov	r1, r4
   1d07a:	4859      	ldr	r0, [pc, #356]	; (1d1e0 <gatt_indicate+0x198>)
   1d07c:	f00a fdb0 	bl	27be0 <gatt_req_alloc>
	if (!req) {
   1d080:	4681      	mov	r9, r0
   1d082:	2800      	cmp	r0, #0
   1d084:	f000 80a8 	beq.w	1d1d8 <gatt_indicate+0x190>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1d088:	4632      	mov	r2, r6
   1d08a:	211d      	movs	r1, #29
   1d08c:	4628      	mov	r0, r5
   1d08e:	f7fe ff6b 	bl	1bf68 <bt_att_create_pdu>
	if (!buf) {
   1d092:	4680      	mov	r8, r0
   1d094:	2800      	cmp	r0, #0
   1d096:	d071      	beq.n	1d17c <gatt_indicate+0x134>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1d098:	2301      	movs	r3, #1
   1d09a:	2200      	movs	r2, #0
   1d09c:	4611      	mov	r1, r2
   1d09e:	f00a fbe4 	bl	2786a <bt_att_set_tx_meta_data>
   1d0a2:	f108 0a0c 	add.w	sl, r8, #12
   1d0a6:	2102      	movs	r1, #2
   1d0a8:	4650      	mov	r0, sl
   1d0aa:	f00b f976 	bl	2839a <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1d0ae:	4606      	mov	r6, r0
   1d0b0:	f826 7b02 	strh.w	r7, [r6], #2
   1d0b4:	8aa1      	ldrh	r1, [r4, #20]
   1d0b6:	4650      	mov	r0, sl
   1d0b8:	f00b f96f 	bl	2839a <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1d0bc:	8aa2      	ldrh	r2, [r4, #20]
   1d0be:	6921      	ldr	r1, [r4, #16]
   1d0c0:	4630      	mov	r0, r6
   1d0c2:	f008 ffb0 	bl	26026 <memcpy>
	req->buf = buf;
   1d0c6:	f8c9 8008 	str.w	r8, [r9, #8]
	err = bt_att_req_send(conn, req);
   1d0ca:	4649      	mov	r1, r9
   1d0cc:	4628      	mov	r0, r5
   1d0ce:	f00a fb8a 	bl	277e6 <bt_att_req_send>
	if (err) {
   1d0d2:	4604      	mov	r4, r0
   1d0d4:	2800      	cmp	r0, #0
   1d0d6:	d17b      	bne.n	1d1d0 <gatt_indicate+0x188>
}
   1d0d8:	4620      	mov	r0, r4
   1d0da:	b016      	add	sp, #88	; 0x58
   1d0dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LOG_WRN("Link is not encrypted");
   1d0e0:	4b40      	ldr	r3, [pc, #256]	; (1d1e4 <gatt_indicate+0x19c>)
   1d0e2:	9315      	str	r3, [sp, #84]	; 0x54
   1d0e4:	2202      	movs	r2, #2
   1d0e6:	f88d 200c 	strb.w	r2, [sp, #12]
   1d0ea:	2300      	movs	r3, #0
   1d0ec:	f88d 300d 	strb.w	r3, [sp, #13]
   1d0f0:	f88d 300e 	strb.w	r3, [sp, #14]
   1d0f4:	f88d 300f 	strb.w	r3, [sp, #15]
   1d0f8:	9903      	ldr	r1, [sp, #12]
   1d0fa:	9114      	str	r1, [sp, #80]	; 0x50
   1d0fc:	4619      	mov	r1, r3
   1d0fe:	f363 0100 	bfi	r1, r3, #0, #1
   1d102:	f363 0141 	bfi	r1, r3, #1, #1
   1d106:	f363 0182 	bfi	r1, r3, #2, #1
   1d10a:	f363 01c5 	bfi	r1, r3, #3, #3
   1d10e:	f362 1188 	bfi	r1, r2, #6, #3
   1d112:	2208      	movs	r2, #8
   1d114:	f362 2152 	bfi	r1, r2, #9, #10
   1d118:	f363 41de 	bfi	r1, r3, #19, #12
   1d11c:	f363 71df 	bfi	r1, r3, #31, #1
   1d120:	aa14      	add	r2, sp, #80	; 0x50
   1d122:	4831      	ldr	r0, [pc, #196]	; (1d1e8 <gatt_indicate+0x1a0>)
   1d124:	f008 fb45 	bl	257b2 <z_impl_z_log_msg_static_create>
		return -EPERM;
   1d128:	f04f 34ff 	mov.w	r4, #4294967295
   1d12c:	e7d4      	b.n	1d0d8 <gatt_indicate+0x90>
			LOG_WRN("Device is not subscribed to characteristic");
   1d12e:	4b2f      	ldr	r3, [pc, #188]	; (1d1ec <gatt_indicate+0x1a4>)
   1d130:	930f      	str	r3, [sp, #60]	; 0x3c
   1d132:	2202      	movs	r2, #2
   1d134:	f88d 200c 	strb.w	r2, [sp, #12]
   1d138:	2300      	movs	r3, #0
   1d13a:	f88d 300d 	strb.w	r3, [sp, #13]
   1d13e:	f88d 300e 	strb.w	r3, [sp, #14]
   1d142:	f88d 300f 	strb.w	r3, [sp, #15]
   1d146:	9903      	ldr	r1, [sp, #12]
   1d148:	910e      	str	r1, [sp, #56]	; 0x38
   1d14a:	4619      	mov	r1, r3
   1d14c:	f363 0100 	bfi	r1, r3, #0, #1
   1d150:	f363 0141 	bfi	r1, r3, #1, #1
   1d154:	f363 0182 	bfi	r1, r3, #2, #1
   1d158:	f363 01c5 	bfi	r1, r3, #3, #3
   1d15c:	f362 1188 	bfi	r1, r2, #6, #3
   1d160:	2208      	movs	r2, #8
   1d162:	f362 2152 	bfi	r1, r2, #9, #10
   1d166:	f363 41de 	bfi	r1, r3, #19, #12
   1d16a:	f363 71df 	bfi	r1, r3, #31, #1
   1d16e:	aa0e      	add	r2, sp, #56	; 0x38
   1d170:	481d      	ldr	r0, [pc, #116]	; (1d1e8 <gatt_indicate+0x1a0>)
   1d172:	f008 fb1e 	bl	257b2 <z_impl_z_log_msg_static_create>
			return -EINVAL;
   1d176:	f06f 0415 	mvn.w	r4, #21
   1d17a:	e7ad      	b.n	1d0d8 <gatt_indicate+0x90>
		LOG_WRN("No buffer available to send indication");
   1d17c:	4b1c      	ldr	r3, [pc, #112]	; (1d1f0 <gatt_indicate+0x1a8>)
   1d17e:	9309      	str	r3, [sp, #36]	; 0x24
   1d180:	2202      	movs	r2, #2
   1d182:	f88d 200c 	strb.w	r2, [sp, #12]
   1d186:	2300      	movs	r3, #0
   1d188:	f88d 300d 	strb.w	r3, [sp, #13]
   1d18c:	f88d 300e 	strb.w	r3, [sp, #14]
   1d190:	f88d 300f 	strb.w	r3, [sp, #15]
   1d194:	9903      	ldr	r1, [sp, #12]
   1d196:	9108      	str	r1, [sp, #32]
   1d198:	4619      	mov	r1, r3
   1d19a:	f363 0100 	bfi	r1, r3, #0, #1
   1d19e:	f363 0141 	bfi	r1, r3, #1, #1
   1d1a2:	f363 0182 	bfi	r1, r3, #2, #1
   1d1a6:	f363 01c5 	bfi	r1, r3, #3, #3
   1d1aa:	f362 1188 	bfi	r1, r2, #6, #3
   1d1ae:	2208      	movs	r2, #8
   1d1b0:	f362 2152 	bfi	r1, r2, #9, #10
   1d1b4:	f363 41de 	bfi	r1, r3, #19, #12
   1d1b8:	f363 71df 	bfi	r1, r3, #31, #1
   1d1bc:	aa08      	add	r2, sp, #32
   1d1be:	480a      	ldr	r0, [pc, #40]	; (1d1e8 <gatt_indicate+0x1a0>)
   1d1c0:	f008 faf7 	bl	257b2 <z_impl_z_log_msg_static_create>
		bt_att_req_free(req);
   1d1c4:	4648      	mov	r0, r9
   1d1c6:	f7ff f99d 	bl	1c504 <bt_att_req_free>
		return -ENOMEM;
   1d1ca:	f06f 040b 	mvn.w	r4, #11
   1d1ce:	e783      	b.n	1d0d8 <gatt_indicate+0x90>
		bt_att_req_free(req);
   1d1d0:	4648      	mov	r0, r9
   1d1d2:	f7ff f997 	bl	1c504 <bt_att_req_free>
   1d1d6:	e77f      	b.n	1d0d8 <gatt_indicate+0x90>
		return -ENOMEM;
   1d1d8:	f06f 040b 	mvn.w	r4, #11
   1d1dc:	e77c      	b.n	1d0d8 <gatt_indicate+0x90>
   1d1de:	bf00      	nop
   1d1e0:	00027995 	.word	0x00027995
   1d1e4:	0002cfc8 	.word	0x0002cfc8
   1d1e8:	0002b174 	.word	0x0002b174
   1d1ec:	0002cfe0 	.word	0x0002cfe0
   1d1f0:	0002d00c 	.word	0x0002d00c

0001d1f4 <bt_gatt_indicate>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d1f4:	f3bf 8f5b 	dmb	ish
   1d1f8:	4b37      	ldr	r3, [pc, #220]	; (1d2d8 <bt_gatt_indicate+0xe4>)
   1d1fa:	681b      	ldr	r3, [r3, #0]
   1d1fc:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1d200:	f013 0f04 	tst.w	r3, #4
   1d204:	d05e      	beq.n	1d2c4 <bt_gatt_indicate+0xd0>
{
   1d206:	b530      	push	{r4, r5, lr}
   1d208:	b08d      	sub	sp, #52	; 0x34
   1d20a:	4605      	mov	r5, r0
   1d20c:	460c      	mov	r4, r1
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1d20e:	b110      	cbz	r0, 1d216 <bt_gatt_indicate+0x22>
   1d210:	7a83      	ldrb	r3, [r0, #10]
   1d212:	2b07      	cmp	r3, #7
   1d214:	d159      	bne.n	1d2ca <bt_gatt_indicate+0xd6>
	data.attr = params->attr;
   1d216:	6860      	ldr	r0, [r4, #4]
   1d218:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1d21a:	f7ff fd8f 	bl	1cd3c <bt_gatt_attr_get_handle>
   1d21e:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1d222:	6821      	ldr	r1, [r4, #0]
   1d224:	b341      	cbz	r1, 1d278 <bt_gatt_indicate+0x84>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1d226:	a805      	add	r0, sp, #20
   1d228:	f7ff fede 	bl	1cfe8 <gatt_find_by_uuid>
   1d22c:	2800      	cmp	r0, #0
   1d22e:	d04f      	beq.n	1d2d0 <bt_gatt_indicate+0xdc>
		params->attr = data.attr;
   1d230:	9b05      	ldr	r3, [sp, #20]
   1d232:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1d234:	9b05      	ldr	r3, [sp, #20]
   1d236:	6818      	ldr	r0, [r3, #0]
   1d238:	2300      	movs	r3, #0
   1d23a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1d23e:	f642 0303 	movw	r3, #10243	; 0x2803
   1d242:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1d246:	a90b      	add	r1, sp, #44	; 0x2c
   1d248:	f008 ff6d 	bl	26126 <bt_uuid_cmp>
   1d24c:	b948      	cbnz	r0, 1d262 <bt_gatt_indicate+0x6e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1d24e:	9805      	ldr	r0, [sp, #20]
   1d250:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1d252:	799b      	ldrb	r3, [r3, #6]
   1d254:	f013 0f20 	tst.w	r3, #32
   1d258:	d013      	beq.n	1d282 <bt_gatt_indicate+0x8e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1d25a:	f00a fd91 	bl	27d80 <bt_gatt_attr_value_handle>
   1d25e:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   1d262:	b18d      	cbz	r5, 1d288 <bt_gatt_indicate+0x94>
		params->_ref = 1;
   1d264:	2301      	movs	r3, #1
   1d266:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1d268:	4622      	mov	r2, r4
   1d26a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1d26e:	4628      	mov	r0, r5
   1d270:	f7ff feea 	bl	1d048 <gatt_indicate>
}
   1d274:	b00d      	add	sp, #52	; 0x34
   1d276:	bd30      	pop	{r4, r5, pc}
		if (!data.handle) {
   1d278:	2800      	cmp	r0, #0
   1d27a:	d1db      	bne.n	1d234 <bt_gatt_indicate+0x40>
			return -ENOENT;
   1d27c:	f06f 0001 	mvn.w	r0, #1
   1d280:	e7f8      	b.n	1d274 <bt_gatt_indicate+0x80>
			return -EINVAL;
   1d282:	f06f 0015 	mvn.w	r0, #21
   1d286:	e7f5      	b.n	1d274 <bt_gatt_indicate+0x80>
	data.err = -ENOTCONN;
   1d288:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1d28c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1d28e:	2302      	movs	r3, #2
   1d290:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.ind_params = params;
   1d294:	9409      	str	r4, [sp, #36]	; 0x24
	params->_ref = 0;
   1d296:	2300      	movs	r3, #0
   1d298:	75a3      	strb	r3, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1d29a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1d29e:	f642 1202 	movw	r2, #10498	; 0x2902
   1d2a2:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
   1d2a6:	aa05      	add	r2, sp, #20
   1d2a8:	9202      	str	r2, [sp, #8]
   1d2aa:	4a0c      	ldr	r2, [pc, #48]	; (1d2dc <bt_gatt_indicate+0xe8>)
   1d2ac:	9201      	str	r2, [sp, #4]
   1d2ae:	2201      	movs	r2, #1
   1d2b0:	9200      	str	r2, [sp, #0]
   1d2b2:	aa0a      	add	r2, sp, #40	; 0x28
   1d2b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1d2b8:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1d2bc:	f7ff fd70 	bl	1cda0 <bt_gatt_foreach_attr_type>
	return data.err;
   1d2c0:	9807      	ldr	r0, [sp, #28]
   1d2c2:	e7d7      	b.n	1d274 <bt_gatt_indicate+0x80>
		return -EAGAIN;
   1d2c4:	f06f 000a 	mvn.w	r0, #10
}
   1d2c8:	4770      	bx	lr
		return -ENOTCONN;
   1d2ca:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1d2ce:	e7d1      	b.n	1d274 <bt_gatt_indicate+0x80>
			return -ENOENT;
   1d2d0:	f06f 0001 	mvn.w	r0, #1
   1d2d4:	e7ce      	b.n	1d274 <bt_gatt_indicate+0x80>
   1d2d6:	bf00      	nop
   1d2d8:	2000043c 	.word	0x2000043c
   1d2dc:	0001d68d 	.word	0x0001d68d

0001d2e0 <sc_process>:
{
   1d2e0:	b510      	push	{r4, lr}
   1d2e2:	b082      	sub	sp, #8
   1d2e4:	4603      	mov	r3, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1d2e6:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1d2ea:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   1d2ee:	f830 2c06 	ldrh.w	r2, [r0, #-6]
   1d2f2:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1d2f6:	f1a0 0120 	sub.w	r1, r0, #32
   1d2fa:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d2fe:	f3bf 8f5b 	dmb	ish
   1d302:	e854 2f00 	ldrex	r2, [r4]
   1d306:	f022 0201 	bic.w	r2, r2, #1
   1d30a:	e844 2000 	strex	r0, r2, [r4]
   1d30e:	2800      	cmp	r0, #0
   1d310:	d1f7      	bne.n	1d302 <sc_process+0x22>
   1d312:	f3bf 8f5b 	dmb	ish
	sc->start = 0U;
   1d316:	2000      	movs	r0, #0
   1d318:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   1d31c:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1d320:	4a0e      	ldr	r2, [pc, #56]	; (1d35c <sc_process+0x7c>)
   1d322:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   1d326:	4a0e      	ldr	r2, [pc, #56]	; (1d360 <sc_process+0x80>)
   1d328:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   1d32c:	aa01      	add	r2, sp, #4
   1d32e:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   1d332:	2204      	movs	r2, #4
   1d334:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1d338:	f7ff ff5c 	bl	1d1f4 <bt_gatt_indicate>
   1d33c:	b108      	cbz	r0, 1d342 <sc_process+0x62>
}
   1d33e:	b002      	add	sp, #8
   1d340:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d342:	f3bf 8f5b 	dmb	ish
   1d346:	e854 3f00 	ldrex	r3, [r4]
   1d34a:	f043 0302 	orr.w	r3, r3, #2
   1d34e:	e844 3200 	strex	r2, r3, [r4]
   1d352:	2a00      	cmp	r2, #0
   1d354:	d1f7      	bne.n	1d346 <sc_process+0x66>
   1d356:	f3bf 8f5b 	dmb	ish
   1d35a:	e7f0      	b.n	1d33e <sc_process+0x5e>
   1d35c:	0002d0cc 	.word	0x0002d0cc
   1d360:	0001cb55 	.word	0x0001cb55

0001d364 <sc_restore>:
{
   1d364:	b510      	push	{r4, lr}
   1d366:	b088      	sub	sp, #32
   1d368:	4604      	mov	r4, r0
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1d36a:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1d36e:	7a00      	ldrb	r0, [r0, #8]
   1d370:	f7ff f9f0 	bl	1c754 <find_sc_cfg>
	if (!cfg) {
   1d374:	b1f0      	cbz	r0, 1d3b4 <sc_restore+0x50>
   1d376:	4603      	mov	r3, r0
	if (!(cfg->data.start || cfg->data.end)) {
   1d378:	8902      	ldrh	r2, [r0, #8]
   1d37a:	b90a      	cbnz	r2, 1d380 <sc_restore+0x1c>
   1d37c:	8941      	ldrh	r1, [r0, #10]
   1d37e:	b1c9      	cbz	r1, 1d3b4 <sc_restore+0x50>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1d380:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1d384:	895b      	ldrh	r3, [r3, #10]
   1d386:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   1d38a:	4620      	mov	r0, r4
   1d38c:	f7fc ff78 	bl	1a280 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1d390:	491c      	ldr	r1, [pc, #112]	; (1d404 <sc_restore+0xa0>)
   1d392:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1d396:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   1d39a:	4a1b      	ldr	r2, [pc, #108]	; (1d408 <sc_restore+0xa4>)
   1d39c:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1d39e:	4a1b      	ldr	r2, [pc, #108]	; (1d40c <sc_restore+0xa8>)
   1d3a0:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1d3a2:	aa01      	add	r2, sp, #4
   1d3a4:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1d3a6:	2204      	movs	r2, #4
   1d3a8:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1d3aa:	4619      	mov	r1, r3
   1d3ac:	4620      	mov	r0, r4
   1d3ae:	f7ff ff21 	bl	1d1f4 <bt_gatt_indicate>
   1d3b2:	b908      	cbnz	r0, 1d3b8 <sc_restore+0x54>
}
   1d3b4:	b008      	add	sp, #32
   1d3b6:	bd10      	pop	{r4, pc}
		LOG_ERR("SC restore indication failed");
   1d3b8:	4b15      	ldr	r3, [pc, #84]	; (1d410 <sc_restore+0xac>)
   1d3ba:	9307      	str	r3, [sp, #28]
   1d3bc:	2302      	movs	r3, #2
   1d3be:	f88d 3000 	strb.w	r3, [sp]
   1d3c2:	2300      	movs	r3, #0
   1d3c4:	f88d 3001 	strb.w	r3, [sp, #1]
   1d3c8:	f88d 3002 	strb.w	r3, [sp, #2]
   1d3cc:	f88d 3003 	strb.w	r3, [sp, #3]
   1d3d0:	9a00      	ldr	r2, [sp, #0]
   1d3d2:	9206      	str	r2, [sp, #24]
   1d3d4:	4619      	mov	r1, r3
   1d3d6:	f363 0100 	bfi	r1, r3, #0, #1
   1d3da:	f363 0141 	bfi	r1, r3, #1, #1
   1d3de:	f363 0182 	bfi	r1, r3, #2, #1
   1d3e2:	f363 01c5 	bfi	r1, r3, #3, #3
   1d3e6:	2201      	movs	r2, #1
   1d3e8:	f362 1188 	bfi	r1, r2, #6, #3
   1d3ec:	2208      	movs	r2, #8
   1d3ee:	f362 2152 	bfi	r1, r2, #9, #10
   1d3f2:	f363 41de 	bfi	r1, r3, #19, #12
   1d3f6:	f363 71df 	bfi	r1, r3, #31, #1
   1d3fa:	aa06      	add	r2, sp, #24
   1d3fc:	4805      	ldr	r0, [pc, #20]	; (1d414 <sc_restore+0xb0>)
   1d3fe:	f008 f9d8 	bl	257b2 <z_impl_z_log_msg_static_create>
   1d402:	e7d7      	b.n	1d3b4 <sc_restore+0x50>
   1d404:	20005c70 	.word	0x20005c70
   1d408:	0002d0cc 	.word	0x0002d0cc
   1d40c:	00027aff 	.word	0x00027aff
   1d410:	0002d034 	.word	0x0002d034
   1d414:	0002b174 	.word	0x0002b174

0001d418 <update_ccc>:
{
   1d418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d41c:	b082      	sub	sp, #8
   1d41e:	af00      	add	r7, sp, #0
	struct bt_conn *conn = data->conn;
   1d420:	f8d2 8000 	ldr.w	r8, [r2]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d424:	6882      	ldr	r2, [r0, #8]
   1d426:	4b39      	ldr	r3, [pc, #228]	; (1d50c <update_ccc+0xf4>)
   1d428:	429a      	cmp	r2, r3
   1d42a:	d004      	beq.n	1d436 <update_ccc+0x1e>
}
   1d42c:	2001      	movs	r0, #1
   1d42e:	3708      	adds	r7, #8
   1d430:	46bd      	mov	sp, r7
   1d432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d436:	4605      	mov	r5, r0
	ccc = attr->user_data;
   1d438:	68c6      	ldr	r6, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1d43a:	2400      	movs	r4, #0
   1d43c:	e037      	b.n	1d4ae <update_ccc+0x96>
				LOG_WRN("CCC %p not writable", attr);
   1d43e:	46ea      	mov	sl, sp
   1d440:	b088      	sub	sp, #32
   1d442:	466b      	mov	r3, sp
   1d444:	f113 0210 	adds.w	r2, r3, #16
   1d448:	d05a      	beq.n	1d500 <update_ccc+0xe8>
   1d44a:	210c      	movs	r1, #12
   1d44c:	b14a      	cbz	r2, 1d462 <update_ccc+0x4a>
   1d44e:	4608      	mov	r0, r1
   1d450:	2904      	cmp	r1, #4
   1d452:	dd03      	ble.n	1d45c <update_ccc+0x44>
   1d454:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 1d510 <update_ccc+0xf8>
   1d458:	f8c3 c014 	str.w	ip, [r3, #20]
   1d45c:	2808      	cmp	r0, #8
   1d45e:	dd00      	ble.n	1d462 <update_ccc+0x4a>
   1d460:	619d      	str	r5, [r3, #24]
   1d462:	290b      	cmp	r1, #11
   1d464:	dd4f      	ble.n	1d506 <update_ccc+0xee>
   1d466:	210c      	movs	r1, #12
   1d468:	b13a      	cbz	r2, 1d47a <update_ccc+0x62>
   1d46a:	2003      	movs	r0, #3
   1d46c:	7138      	strb	r0, [r7, #4]
   1d46e:	2000      	movs	r0, #0
   1d470:	7178      	strb	r0, [r7, #5]
   1d472:	71b8      	strb	r0, [r7, #6]
   1d474:	71f8      	strb	r0, [r7, #7]
   1d476:	6878      	ldr	r0, [r7, #4]
   1d478:	6118      	str	r0, [r3, #16]
   1d47a:	f36f 0900 	bfc	r9, #0, #1
   1d47e:	f36f 0941 	bfc	r9, #1, #1
   1d482:	f36f 0982 	bfc	r9, #2, #1
   1d486:	f36f 09c5 	bfc	r9, #3, #3
   1d48a:	2302      	movs	r3, #2
   1d48c:	f363 1988 	bfi	r9, r3, #6, #3
   1d490:	f401 737b 	and.w	r3, r1, #1004	; 0x3ec
   1d494:	f363 2952 	bfi	r9, r3, #9, #10
   1d498:	f36f 49de 	bfc	r9, #19, #12
   1d49c:	f36f 79df 	bfc	r9, #31, #1
   1d4a0:	2300      	movs	r3, #0
   1d4a2:	4649      	mov	r1, r9
   1d4a4:	481b      	ldr	r0, [pc, #108]	; (1d514 <update_ccc+0xfc>)
   1d4a6:	f008 f984 	bl	257b2 <z_impl_z_log_msg_static_create>
   1d4aa:	46d5      	mov	sp, sl
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1d4ac:	3401      	adds	r4, #1
   1d4ae:	2c07      	cmp	r4, #7
   1d4b0:	d8bc      	bhi.n	1d42c <update_ccc+0x14>
		if (!cfg->value ||
   1d4b2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1d4b6:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   1d4ba:	891b      	ldrh	r3, [r3, #8]
   1d4bc:	2b00      	cmp	r3, #0
   1d4be:	d0f5      	beq.n	1d4ac <update_ccc+0x94>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1d4c0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1d4c4:	eb06 0243 	add.w	r2, r6, r3, lsl #1
   1d4c8:	3201      	adds	r2, #1
   1d4ca:	f816 1013 	ldrb.w	r1, [r6, r3, lsl #1]
   1d4ce:	4640      	mov	r0, r8
   1d4d0:	f009 fa45 	bl	2695e <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1d4d4:	2800      	cmp	r0, #0
   1d4d6:	d0e9      	beq.n	1d4ac <update_ccc+0x94>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1d4d8:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1d4dc:	4629      	mov	r1, r5
   1d4de:	4640      	mov	r0, r8
   1d4e0:	f00a fca2 	bl	27e28 <bt_gatt_check_perm>
		if (err) {
   1d4e4:	b108      	cbz	r0, 1d4ea <update_ccc+0xd2>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1d4e6:	2803      	cmp	r0, #3
   1d4e8:	d0a9      	beq.n	1d43e <update_ccc+0x26>
		gatt_ccc_changed(attr, ccc);
   1d4ea:	4631      	mov	r1, r6
   1d4ec:	4628      	mov	r0, r5
   1d4ee:	f00a fa35 	bl	2795c <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1d4f2:	4b09      	ldr	r3, [pc, #36]	; (1d518 <update_ccc+0x100>)
   1d4f4:	429e      	cmp	r6, r3
   1d4f6:	d199      	bne.n	1d42c <update_ccc+0x14>
			sc_restore(conn);
   1d4f8:	4640      	mov	r0, r8
   1d4fa:	f7ff ff33 	bl	1d364 <sc_restore>
   1d4fe:	e795      	b.n	1d42c <update_ccc+0x14>
				LOG_WRN("CCC %p not writable", attr);
   1d500:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1d504:	e7a2      	b.n	1d44c <update_ccc+0x34>
   1d506:	f06f 011b 	mvn.w	r1, #27
   1d50a:	e7ad      	b.n	1d468 <update_ccc+0x50>
   1d50c:	0001c98d 	.word	0x0001c98d
   1d510:	0002d054 	.word	0x0002d054
   1d514:	0002b174 	.word	0x0002b174
   1d518:	200007b8 	.word	0x200007b8

0001d51c <gatt_notify>:
{
   1d51c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d520:	b095      	sub	sp, #84	; 0x54
   1d522:	4605      	mov	r5, r0
   1d524:	460f      	mov	r7, r1
   1d526:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1d528:	2294      	movs	r2, #148	; 0x94
   1d52a:	6861      	ldr	r1, [r4, #4]
   1d52c:	f00a fc7c 	bl	27e28 <bt_gatt_check_perm>
   1d530:	bb70      	cbnz	r0, 1d590 <gatt_notify+0x74>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1d532:	2201      	movs	r2, #1
   1d534:	6861      	ldr	r1, [r4, #4]
   1d536:	4628      	mov	r0, r5
   1d538:	f00a fca8 	bl	27e8c <bt_gatt_is_subscribed>
   1d53c:	2800      	cmp	r0, #0
   1d53e:	d04e      	beq.n	1d5de <gatt_notify+0xc2>
				sizeof(*nfy) + params->len);
   1d540:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1d542:	3202      	adds	r2, #2
   1d544:	211b      	movs	r1, #27
   1d546:	4628      	mov	r0, r5
   1d548:	f7fe fd0e 	bl	1bf68 <bt_att_create_pdu>
	if (!buf) {
   1d54c:	4680      	mov	r8, r0
   1d54e:	2800      	cmp	r0, #0
   1d550:	d06c      	beq.n	1d62c <gatt_notify+0x110>
   1d552:	f100 090c 	add.w	r9, r0, #12
   1d556:	2102      	movs	r1, #2
   1d558:	4648      	mov	r0, r9
   1d55a:	f00a ff1e 	bl	2839a <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1d55e:	4606      	mov	r6, r0
   1d560:	f826 7b02 	strh.w	r7, [r6], #2
   1d564:	89a1      	ldrh	r1, [r4, #12]
   1d566:	4648      	mov	r0, r9
   1d568:	f00a ff17 	bl	2839a <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1d56c:	89a2      	ldrh	r2, [r4, #12]
   1d56e:	68a1      	ldr	r1, [r4, #8]
   1d570:	4630      	mov	r0, r6
   1d572:	f008 fd58 	bl	26026 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1d576:	2301      	movs	r3, #1
   1d578:	6962      	ldr	r2, [r4, #20]
   1d57a:	6921      	ldr	r1, [r4, #16]
   1d57c:	4640      	mov	r0, r8
   1d57e:	f00a f974 	bl	2786a <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1d582:	4641      	mov	r1, r8
   1d584:	4628      	mov	r0, r5
   1d586:	f00a f916 	bl	277b6 <bt_att_send>
}
   1d58a:	b015      	add	sp, #84	; 0x54
   1d58c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_WRN("Link is not encrypted");
   1d590:	4b3a      	ldr	r3, [pc, #232]	; (1d67c <gatt_notify+0x160>)
   1d592:	9313      	str	r3, [sp, #76]	; 0x4c
   1d594:	2202      	movs	r2, #2
   1d596:	f88d 2004 	strb.w	r2, [sp, #4]
   1d59a:	2300      	movs	r3, #0
   1d59c:	f88d 3005 	strb.w	r3, [sp, #5]
   1d5a0:	f88d 3006 	strb.w	r3, [sp, #6]
   1d5a4:	f88d 3007 	strb.w	r3, [sp, #7]
   1d5a8:	9901      	ldr	r1, [sp, #4]
   1d5aa:	9112      	str	r1, [sp, #72]	; 0x48
   1d5ac:	4619      	mov	r1, r3
   1d5ae:	f363 0100 	bfi	r1, r3, #0, #1
   1d5b2:	f363 0141 	bfi	r1, r3, #1, #1
   1d5b6:	f363 0182 	bfi	r1, r3, #2, #1
   1d5ba:	f363 01c5 	bfi	r1, r3, #3, #3
   1d5be:	f362 1188 	bfi	r1, r2, #6, #3
   1d5c2:	2208      	movs	r2, #8
   1d5c4:	f362 2152 	bfi	r1, r2, #9, #10
   1d5c8:	f363 41de 	bfi	r1, r3, #19, #12
   1d5cc:	f363 71df 	bfi	r1, r3, #31, #1
   1d5d0:	aa12      	add	r2, sp, #72	; 0x48
   1d5d2:	482b      	ldr	r0, [pc, #172]	; (1d680 <gatt_notify+0x164>)
   1d5d4:	f008 f8ed 	bl	257b2 <z_impl_z_log_msg_static_create>
		return -EPERM;
   1d5d8:	f04f 30ff 	mov.w	r0, #4294967295
   1d5dc:	e7d5      	b.n	1d58a <gatt_notify+0x6e>
			LOG_WRN("Device is not subscribed to characteristic");
   1d5de:	4b29      	ldr	r3, [pc, #164]	; (1d684 <gatt_notify+0x168>)
   1d5e0:	930d      	str	r3, [sp, #52]	; 0x34
   1d5e2:	2202      	movs	r2, #2
   1d5e4:	f88d 2004 	strb.w	r2, [sp, #4]
   1d5e8:	2300      	movs	r3, #0
   1d5ea:	f88d 3005 	strb.w	r3, [sp, #5]
   1d5ee:	f88d 3006 	strb.w	r3, [sp, #6]
   1d5f2:	f88d 3007 	strb.w	r3, [sp, #7]
   1d5f6:	9901      	ldr	r1, [sp, #4]
   1d5f8:	910c      	str	r1, [sp, #48]	; 0x30
   1d5fa:	4619      	mov	r1, r3
   1d5fc:	f363 0100 	bfi	r1, r3, #0, #1
   1d600:	f363 0141 	bfi	r1, r3, #1, #1
   1d604:	f363 0182 	bfi	r1, r3, #2, #1
   1d608:	f363 01c5 	bfi	r1, r3, #3, #3
   1d60c:	f362 1188 	bfi	r1, r2, #6, #3
   1d610:	2208      	movs	r2, #8
   1d612:	f362 2152 	bfi	r1, r2, #9, #10
   1d616:	f363 41de 	bfi	r1, r3, #19, #12
   1d61a:	f363 71df 	bfi	r1, r3, #31, #1
   1d61e:	aa0c      	add	r2, sp, #48	; 0x30
   1d620:	4817      	ldr	r0, [pc, #92]	; (1d680 <gatt_notify+0x164>)
   1d622:	f008 f8c6 	bl	257b2 <z_impl_z_log_msg_static_create>
			return -EINVAL;
   1d626:	f06f 0015 	mvn.w	r0, #21
   1d62a:	e7ae      	b.n	1d58a <gatt_notify+0x6e>
		LOG_WRN("No buffer available to send notification");
   1d62c:	4b16      	ldr	r3, [pc, #88]	; (1d688 <gatt_notify+0x16c>)
   1d62e:	9307      	str	r3, [sp, #28]
   1d630:	2202      	movs	r2, #2
   1d632:	f88d 2004 	strb.w	r2, [sp, #4]
   1d636:	2300      	movs	r3, #0
   1d638:	f88d 3005 	strb.w	r3, [sp, #5]
   1d63c:	f88d 3006 	strb.w	r3, [sp, #6]
   1d640:	f88d 3007 	strb.w	r3, [sp, #7]
   1d644:	9901      	ldr	r1, [sp, #4]
   1d646:	9106      	str	r1, [sp, #24]
   1d648:	4619      	mov	r1, r3
   1d64a:	f363 0100 	bfi	r1, r3, #0, #1
   1d64e:	f363 0141 	bfi	r1, r3, #1, #1
   1d652:	f363 0182 	bfi	r1, r3, #2, #1
   1d656:	f363 01c5 	bfi	r1, r3, #3, #3
   1d65a:	f362 1188 	bfi	r1, r2, #6, #3
   1d65e:	2208      	movs	r2, #8
   1d660:	f362 2152 	bfi	r1, r2, #9, #10
   1d664:	f363 41de 	bfi	r1, r3, #19, #12
   1d668:	f363 71df 	bfi	r1, r3, #31, #1
   1d66c:	aa06      	add	r2, sp, #24
   1d66e:	4804      	ldr	r0, [pc, #16]	; (1d680 <gatt_notify+0x164>)
   1d670:	f008 f89f 	bl	257b2 <z_impl_z_log_msg_static_create>
		return -ENOMEM;
   1d674:	f06f 000b 	mvn.w	r0, #11
   1d678:	e787      	b.n	1d58a <gatt_notify+0x6e>
   1d67a:	bf00      	nop
   1d67c:	0002cfc8 	.word	0x0002cfc8
   1d680:	0002b174 	.word	0x0002b174
   1d684:	0002cfe0 	.word	0x0002cfe0
   1d688:	0002d068 	.word	0x0002d068

0001d68c <notify_cb>:
{
   1d68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d690:	b089      	sub	sp, #36	; 0x24
   1d692:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d694:	6882      	ldr	r2, [r0, #8]
   1d696:	4b67      	ldr	r3, [pc, #412]	; (1d834 <notify_cb+0x1a8>)
   1d698:	429a      	cmp	r2, r3
   1d69a:	d005      	beq.n	1d6a8 <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
   1d69c:	f04f 0a01 	mov.w	sl, #1
}
   1d6a0:	4650      	mov	r0, sl
   1d6a2:	b009      	add	sp, #36	; 0x24
   1d6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d6a8:	4607      	mov	r7, r0
	ccc = attr->user_data;
   1d6aa:	68c5      	ldr	r5, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1d6ac:	4b62      	ldr	r3, [pc, #392]	; (1d838 <notify_cb+0x1ac>)
   1d6ae:	429d      	cmp	r5, r3
   1d6b0:	d02d      	beq.n	1d70e <notify_cb+0x82>
			err = 0;
   1d6b2:	2400      	movs	r4, #0
   1d6b4:	e085      	b.n	1d7c2 <notify_cb+0x136>
				sc = (struct sc_data *)data->ind_params->data;
   1d6b6:	6933      	ldr	r3, [r6, #16]
   1d6b8:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1d6ba:	eb09 0049 	add.w	r0, r9, r9, lsl #1
   1d6be:	8853      	ldrh	r3, [r2, #2]
   1d6c0:	8812      	ldrh	r2, [r2, #0]
   1d6c2:	4621      	mov	r1, r4
   1d6c4:	4c5d      	ldr	r4, [pc, #372]	; (1d83c <notify_cb+0x1b0>)
   1d6c6:	f814 0020 	ldrb.w	r0, [r4, r0, lsl #2]
   1d6ca:	f7ff f8fb 	bl	1c8c4 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1d6ce:	f109 0901 	add.w	r9, r9, #1
   1d6d2:	f1b9 0f07 	cmp.w	r9, #7
   1d6d6:	d8ec      	bhi.n	1d6b2 <notify_cb+0x26>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1d6d8:	eb09 0349 	add.w	r3, r9, r9, lsl #1
   1d6dc:	4c57      	ldr	r4, [pc, #348]	; (1d83c <notify_cb+0x1b0>)
   1d6de:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   1d6e2:	3401      	adds	r4, #1
	return memcmp(a, b, sizeof(*a));
   1d6e4:	2207      	movs	r2, #7
   1d6e6:	4956      	ldr	r1, [pc, #344]	; (1d840 <notify_cb+0x1b4>)
   1d6e8:	4620      	mov	r0, r4
   1d6ea:	f008 fc8a 	bl	26002 <memcmp>
   1d6ee:	2800      	cmp	r0, #0
   1d6f0:	d0ed      	beq.n	1d6ce <notify_cb+0x42>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1d6f2:	eb09 0349 	add.w	r3, r9, r9, lsl #1
   1d6f6:	2207      	movs	r2, #7
   1d6f8:	4621      	mov	r1, r4
   1d6fa:	4850      	ldr	r0, [pc, #320]	; (1d83c <notify_cb+0x1b0>)
   1d6fc:	f810 0023 	ldrb.w	r0, [r0, r3, lsl #2]
   1d700:	f7fc feb8 	bl	1a474 <bt_conn_lookup_state_le>
			if (!conn) {
   1d704:	2800      	cmp	r0, #0
   1d706:	d0d6      	beq.n	1d6b6 <notify_cb+0x2a>
			bt_conn_unref(conn);
   1d708:	f009 f8cf 	bl	268aa <bt_conn_unref>
   1d70c:	e7df      	b.n	1d6ce <notify_cb+0x42>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1d70e:	f04f 0900 	mov.w	r9, #0
   1d712:	e7de      	b.n	1d6d2 <notify_cb+0x46>
			bt_conn_unref(conn);
   1d714:	f009 f8c9 	bl	268aa <bt_conn_unref>
			continue;
   1d718:	e052      	b.n	1d7c0 <notify_cb+0x134>
			bt_conn_unref(conn);
   1d71a:	4648      	mov	r0, r9
   1d71c:	f009 f8c5 	bl	268aa <bt_conn_unref>
			continue;
   1d720:	e04e      	b.n	1d7c0 <notify_cb+0x134>
			LOG_WRN("Link is not encrypted");
   1d722:	4b48      	ldr	r3, [pc, #288]	; (1d844 <notify_cb+0x1b8>)
   1d724:	9307      	str	r3, [sp, #28]
   1d726:	2202      	movs	r2, #2
   1d728:	f88d 2004 	strb.w	r2, [sp, #4]
   1d72c:	2300      	movs	r3, #0
   1d72e:	f88d 3005 	strb.w	r3, [sp, #5]
   1d732:	f88d 3006 	strb.w	r3, [sp, #6]
   1d736:	f88d 3007 	strb.w	r3, [sp, #7]
   1d73a:	9901      	ldr	r1, [sp, #4]
   1d73c:	9106      	str	r1, [sp, #24]
   1d73e:	f363 0800 	bfi	r8, r3, #0, #1
   1d742:	f363 0841 	bfi	r8, r3, #1, #1
   1d746:	f363 0882 	bfi	r8, r3, #2, #1
   1d74a:	f363 08c5 	bfi	r8, r3, #3, #3
   1d74e:	f362 1888 	bfi	r8, r2, #6, #3
   1d752:	2208      	movs	r2, #8
   1d754:	f362 2852 	bfi	r8, r2, #9, #10
   1d758:	f363 48de 	bfi	r8, r3, #19, #12
   1d75c:	f363 78df 	bfi	r8, r3, #31, #1
   1d760:	aa06      	add	r2, sp, #24
   1d762:	4641      	mov	r1, r8
   1d764:	4838      	ldr	r0, [pc, #224]	; (1d848 <notify_cb+0x1bc>)
   1d766:	f008 f824 	bl	257b2 <z_impl_z_log_msg_static_create>
			bt_conn_unref(conn);
   1d76a:	4648      	mov	r0, r9
   1d76c:	f009 f89d 	bl	268aa <bt_conn_unref>
			continue;
   1d770:	e026      	b.n	1d7c0 <notify_cb+0x134>
		    (cfg->value & BT_GATT_CCC_INDICATE)) {
   1d772:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1d776:	eb05 0242 	add.w	r2, r5, r2, lsl #1
   1d77a:	8912      	ldrh	r2, [r2, #8]
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1d77c:	f012 0f02 	tst.w	r2, #2
   1d780:	d049      	beq.n	1d816 <notify_cb+0x18a>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1d782:	6932      	ldr	r2, [r6, #16]
   1d784:	88b1      	ldrh	r1, [r6, #4]
   1d786:	4648      	mov	r0, r9
   1d788:	f7ff fc5e 	bl	1d048 <gatt_indicate>
			if (err == 0) {
   1d78c:	4683      	mov	fp, r0
   1d78e:	b970      	cbnz	r0, 1d7ae <notify_cb+0x122>
				data->ind_params->_ref++;
   1d790:	6932      	ldr	r2, [r6, #16]
   1d792:	7d93      	ldrb	r3, [r2, #22]
   1d794:	3301      	adds	r3, #1
   1d796:	7593      	strb	r3, [r2, #22]
   1d798:	e009      	b.n	1d7ae <notify_cb+0x122>
			   (cfg->value & BT_GATT_CCC_NOTIFY)) {
   1d79a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1d79e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1d7a2:	891b      	ldrh	r3, [r3, #8]
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1d7a4:	f013 0f01 	tst.w	r3, #1
   1d7a8:	d13a      	bne.n	1d820 <notify_cb+0x194>
			err = 0;
   1d7aa:	f04f 0b00 	mov.w	fp, #0
		bt_conn_unref(conn);
   1d7ae:	4648      	mov	r0, r9
   1d7b0:	f009 f87b 	bl	268aa <bt_conn_unref>
		if (err < 0) {
   1d7b4:	f1bb 0f00 	cmp.w	fp, #0
   1d7b8:	f6ff af72 	blt.w	1d6a0 <notify_cb+0x14>
		data->err = 0;
   1d7bc:	2300      	movs	r3, #0
   1d7be:	60b3      	str	r3, [r6, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1d7c0:	3401      	adds	r4, #1
   1d7c2:	2c07      	cmp	r4, #7
   1d7c4:	d833      	bhi.n	1d82e <notify_cb+0x1a2>
		if (cfg->value != data->type) {
   1d7c6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1d7ca:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1d7ce:	891a      	ldrh	r2, [r3, #8]
   1d7d0:	89b3      	ldrh	r3, [r6, #12]
   1d7d2:	429a      	cmp	r2, r3
   1d7d4:	d1f4      	bne.n	1d7c0 <notify_cb+0x134>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1d7d6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1d7da:	eb05 0143 	add.w	r1, r5, r3, lsl #1
   1d7de:	3101      	adds	r1, #1
   1d7e0:	f815 0013 	ldrb.w	r0, [r5, r3, lsl #1]
   1d7e4:	f7fc fe20 	bl	1a428 <bt_conn_lookup_addr_le>
		if (!conn) {
   1d7e8:	4681      	mov	r9, r0
   1d7ea:	2800      	cmp	r0, #0
   1d7ec:	d0e8      	beq.n	1d7c0 <notify_cb+0x134>
		if (conn->state != BT_CONN_CONNECTED) {
   1d7ee:	7a83      	ldrb	r3, [r0, #10]
   1d7f0:	2b07      	cmp	r3, #7
   1d7f2:	d18f      	bne.n	1d714 <notify_cb+0x88>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1d7f4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1d7f6:	b11b      	cbz	r3, 1d800 <notify_cb+0x174>
   1d7f8:	4639      	mov	r1, r7
   1d7fa:	4798      	blx	r3
   1d7fc:	2800      	cmp	r0, #0
   1d7fe:	d08c      	beq.n	1d71a <notify_cb+0x8e>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1d800:	2294      	movs	r2, #148	; 0x94
   1d802:	4639      	mov	r1, r7
   1d804:	4648      	mov	r0, r9
   1d806:	f00a fb0f 	bl	27e28 <bt_gatt_check_perm>
   1d80a:	4682      	mov	sl, r0
   1d80c:	2800      	cmp	r0, #0
   1d80e:	d188      	bne.n	1d722 <notify_cb+0x96>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1d810:	89b3      	ldrh	r3, [r6, #12]
   1d812:	2b02      	cmp	r3, #2
   1d814:	d0ad      	beq.n	1d772 <notify_cb+0xe6>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1d816:	2b01      	cmp	r3, #1
   1d818:	d0bf      	beq.n	1d79a <notify_cb+0x10e>
			err = 0;
   1d81a:	f04f 0b00 	mov.w	fp, #0
   1d81e:	e7c6      	b.n	1d7ae <notify_cb+0x122>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1d820:	6932      	ldr	r2, [r6, #16]
   1d822:	88b1      	ldrh	r1, [r6, #4]
   1d824:	4648      	mov	r0, r9
   1d826:	f7ff fe79 	bl	1d51c <gatt_notify>
   1d82a:	4683      	mov	fp, r0
   1d82c:	e7bf      	b.n	1d7ae <notify_cb+0x122>
	return BT_GATT_ITER_CONTINUE;
   1d82e:	f04f 0a01 	mov.w	sl, #1
   1d832:	e735      	b.n	1d6a0 <notify_cb+0x14>
   1d834:	0001c98d 	.word	0x0001c98d
   1d838:	200007b8 	.word	0x200007b8
   1d83c:	20005db0 	.word	0x20005db0
   1d840:	0002bffc 	.word	0x0002bffc
   1d844:	0002cfc8 	.word	0x0002cfc8
   1d848:	0002b174 	.word	0x0002b174

0001d84c <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   1d84c:	b500      	push	{lr}
   1d84e:	b087      	sub	sp, #28
	struct conn_data data;

	LOG_DBG("conn %p", conn);

	data.conn = conn;
   1d850:	9004      	str	r0, [sp, #16]
	data.sec = BT_SECURITY_L1;
   1d852:	2001      	movs	r0, #1
   1d854:	f88d 0014 	strb.w	r0, [sp, #20]
   1d858:	ab04      	add	r3, sp, #16
   1d85a:	9302      	str	r3, [sp, #8]
   1d85c:	4b05      	ldr	r3, [pc, #20]	; (1d874 <bt_gatt_connected+0x28>)
   1d85e:	9301      	str	r3, [sp, #4]
   1d860:	2200      	movs	r2, #0
   1d862:	9200      	str	r2, [sp, #0]
   1d864:	4613      	mov	r3, r2
   1d866:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1d86a:	f7ff fa99 	bl	1cda0 <bt_gatt_foreach_attr_type>
	if (err) {
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   1d86e:	b007      	add	sp, #28
   1d870:	f85d fb04 	ldr.w	pc, [sp], #4
   1d874:	0001d419 	.word	0x0001d419

0001d878 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   1d878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d87a:	4605      	mov	r5, r0
   1d87c:	460e      	mov	r6, r1
   1d87e:	4617      	mov	r7, r2
	return list->head;
   1d880:	4b0a      	ldr	r3, [pc, #40]	; (1d8ac <bt_gatt_att_max_mtu_changed+0x34>)
   1d882:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1d884:	b104      	cbz	r4, 1d888 <bt_gatt_att_max_mtu_changed+0x10>
   1d886:	3c04      	subs	r4, #4
   1d888:	b174      	cbz	r4, 1d8a8 <bt_gatt_att_max_mtu_changed+0x30>
		if (cb->att_mtu_updated) {
   1d88a:	6823      	ldr	r3, [r4, #0]
   1d88c:	b143      	cbz	r3, 1d8a0 <bt_gatt_att_max_mtu_changed+0x28>
			cb->att_mtu_updated(conn, tx, rx);
   1d88e:	463a      	mov	r2, r7
   1d890:	4631      	mov	r1, r6
   1d892:	4628      	mov	r0, r5
   1d894:	4798      	blx	r3
	return node->next;
   1d896:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1d898:	2c00      	cmp	r4, #0
   1d89a:	d0f5      	beq.n	1d888 <bt_gatt_att_max_mtu_changed+0x10>
   1d89c:	3c04      	subs	r4, #4
   1d89e:	e7f3      	b.n	1d888 <bt_gatt_att_max_mtu_changed+0x10>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d8a0:	1d23      	adds	r3, r4, #4
   1d8a2:	d1f8      	bne.n	1d896 <bt_gatt_att_max_mtu_changed+0x1e>
   1d8a4:	461c      	mov	r4, r3
   1d8a6:	e7ef      	b.n	1d888 <bt_gatt_att_max_mtu_changed+0x10>
		}
	}
}
   1d8a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d8aa:	bf00      	nop
   1d8ac:	20005e18 	.word	0x20005e18

0001d8b0 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1d8b0:	b510      	push	{r4, lr}
   1d8b2:	b084      	sub	sp, #16
   1d8b4:	4604      	mov	r4, r0
   1d8b6:	9002      	str	r0, [sp, #8]
   1d8b8:	4b07      	ldr	r3, [pc, #28]	; (1d8d8 <bt_gatt_disconnected+0x28>)
   1d8ba:	9301      	str	r3, [sp, #4]
   1d8bc:	2200      	movs	r2, #0
   1d8be:	9200      	str	r2, [sp, #0]
   1d8c0:	4613      	mov	r3, r2
   1d8c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1d8c6:	2001      	movs	r0, #1
   1d8c8:	f7ff fa6a 	bl	1cda0 <bt_gatt_foreach_attr_type>
#if defined(CONFIG_BT_GATT_CLIENT)
	remove_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
   1d8cc:	4620      	mov	r0, r4
   1d8ce:	f00a f995 	bl	27bfc <remove_cf_cfg>
#endif
}
   1d8d2:	b004      	add	sp, #16
   1d8d4:	bd10      	pop	{r4, pc}
   1d8d6:	bf00      	nop
   1d8d8:	0001cbd1 	.word	0x0001cbd1

0001d8dc <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1d8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d8de:	b083      	sub	sp, #12
   1d8e0:	af00      	add	r7, sp, #0
		.recv = bt_smp_recv,
	};

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1d8e2:	2300      	movs	r3, #0
   1d8e4:	2b07      	cmp	r3, #7
   1d8e6:	d812      	bhi.n	1d90e <bt_smp_accept+0x32>
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   1d8e8:	228c      	movs	r2, #140	; 0x8c
   1d8ea:	fb03 f202 	mul.w	r2, r3, r2
   1d8ee:	4c27      	ldr	r4, [pc, #156]	; (1d98c <bt_smp_accept+0xb0>)
   1d8f0:	58a2      	ldr	r2, [r4, r2]
   1d8f2:	b10a      	cbz	r2, 1d8f8 <bt_smp_accept+0x1c>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1d8f4:	3301      	adds	r3, #1
   1d8f6:	e7f5      	b.n	1d8e4 <bt_smp_accept+0x8>
			continue;
		}

		smp->chan.ops = &ops;
   1d8f8:	4a24      	ldr	r2, [pc, #144]	; (1d98c <bt_smp_accept+0xb0>)
   1d8fa:	208c      	movs	r0, #140	; 0x8c
   1d8fc:	fb00 2303 	mla	r3, r0, r3, r2
   1d900:	4a23      	ldr	r2, [pc, #140]	; (1d990 <bt_smp_accept+0xb4>)
   1d902:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
   1d904:	600b      	str	r3, [r1, #0]

		return 0;
   1d906:	2000      	movs	r0, #0
	}

	LOG_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   1d908:	370c      	adds	r7, #12
   1d90a:	46bd      	mov	sp, r7
   1d90c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_ERR("No available SMP context for conn %p", conn);
   1d90e:	466d      	mov	r5, sp
   1d910:	b088      	sub	sp, #32
   1d912:	466b      	mov	r3, sp
   1d914:	f113 0210 	adds.w	r2, r3, #16
   1d918:	d031      	beq.n	1d97e <bt_smp_accept+0xa2>
   1d91a:	210c      	movs	r1, #12
   1d91c:	b13a      	cbz	r2, 1d92e <bt_smp_accept+0x52>
   1d91e:	460c      	mov	r4, r1
   1d920:	2904      	cmp	r1, #4
   1d922:	dd01      	ble.n	1d928 <bt_smp_accept+0x4c>
   1d924:	4e1b      	ldr	r6, [pc, #108]	; (1d994 <bt_smp_accept+0xb8>)
   1d926:	615e      	str	r6, [r3, #20]
   1d928:	2c08      	cmp	r4, #8
   1d92a:	dd00      	ble.n	1d92e <bt_smp_accept+0x52>
   1d92c:	6198      	str	r0, [r3, #24]
   1d92e:	290b      	cmp	r1, #11
   1d930:	dd28      	ble.n	1d984 <bt_smp_accept+0xa8>
   1d932:	240c      	movs	r4, #12
   1d934:	b13a      	cbz	r2, 1d946 <bt_smp_accept+0x6a>
   1d936:	2103      	movs	r1, #3
   1d938:	7139      	strb	r1, [r7, #4]
   1d93a:	2100      	movs	r1, #0
   1d93c:	7179      	strb	r1, [r7, #5]
   1d93e:	71b9      	strb	r1, [r7, #6]
   1d940:	71f9      	strb	r1, [r7, #7]
   1d942:	6878      	ldr	r0, [r7, #4]
   1d944:	6118      	str	r0, [r3, #16]
   1d946:	2100      	movs	r1, #0
   1d948:	f36f 0100 	bfc	r1, #0, #1
   1d94c:	f36f 0141 	bfc	r1, #1, #1
   1d950:	f36f 0182 	bfc	r1, #2, #1
   1d954:	f36f 01c5 	bfc	r1, #3, #3
   1d958:	2301      	movs	r3, #1
   1d95a:	f363 1188 	bfi	r1, r3, #6, #3
   1d95e:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1d962:	f363 2152 	bfi	r1, r3, #9, #10
   1d966:	f36f 41de 	bfc	r1, #19, #12
   1d96a:	f36f 71df 	bfc	r1, #31, #1
   1d96e:	2300      	movs	r3, #0
   1d970:	4809      	ldr	r0, [pc, #36]	; (1d998 <bt_smp_accept+0xbc>)
   1d972:	f007 ff1e 	bl	257b2 <z_impl_z_log_msg_static_create>
   1d976:	46ad      	mov	sp, r5
	return -ENOMEM;
   1d978:	f06f 000b 	mvn.w	r0, #11
   1d97c:	e7c4      	b.n	1d908 <bt_smp_accept+0x2c>
	LOG_ERR("No available SMP context for conn %p", conn);
   1d97e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1d982:	e7cb      	b.n	1d91c <bt_smp_accept+0x40>
   1d984:	f06f 041b 	mvn.w	r4, #27
   1d988:	e7d4      	b.n	1d934 <bt_smp_accept+0x58>
   1d98a:	bf00      	nop
   1d98c:	20005e20 	.word	0x20005e20
   1d990:	0002d1d0 	.word	0x0002d1d0
   1d994:	0002d1a8 	.word	0x0002d1a8
   1d998:	0002b1b4 	.word	0x0002b1b4

0001d99c <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   1d99c:	4b03      	ldr	r3, [pc, #12]	; (1d9ac <pool_id+0x10>)
   1d99e:	1ac0      	subs	r0, r0, r3
   1d9a0:	1080      	asrs	r0, r0, #2
}
   1d9a2:	4b03      	ldr	r3, [pc, #12]	; (1d9b0 <pool_id+0x14>)
   1d9a4:	fb03 f000 	mul.w	r0, r3, r0
   1d9a8:	4770      	bx	lr
   1d9aa:	bf00      	nop
   1d9ac:	20000a60 	.word	0x20000a60
   1d9b0:	ba2e8ba3 	.word	0xba2e8ba3

0001d9b4 <net_buf_pool_get>:
}
   1d9b4:	222c      	movs	r2, #44	; 0x2c
   1d9b6:	4b02      	ldr	r3, [pc, #8]	; (1d9c0 <net_buf_pool_get+0xc>)
   1d9b8:	fb02 3000 	mla	r0, r2, r0, r3
   1d9bc:	4770      	bx	lr
   1d9be:	bf00      	nop
   1d9c0:	20000a60 	.word	0x20000a60

0001d9c4 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   1d9c4:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   1d9c6:	4804      	ldr	r0, [pc, #16]	; (1d9d8 <xoshiro128_initialize+0x14>)
   1d9c8:	f00c fa35 	bl	29e36 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
   1d9cc:	b108      	cbz	r0, 1d9d2 <xoshiro128_initialize+0xe>
		return -ENODEV;
	}
	return 0;
   1d9ce:	2000      	movs	r0, #0
}
   1d9d0:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1d9d2:	f06f 0012 	mvn.w	r0, #18
   1d9d6:	e7fb      	b.n	1d9d0 <xoshiro128_initialize+0xc>
   1d9d8:	0002aef4 	.word	0x0002aef4

0001d9dc <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   1d9dc:	4800      	ldr	r0, [pc, #0]	; (1d9e0 <get_hf_flags+0x4>)
   1d9de:	4770      	bx	lr
   1d9e0:	200062d4 	.word	0x200062d4

0001d9e4 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   1d9e4:	4b03      	ldr	r3, [pc, #12]	; (1d9f4 <get_subsys+0x10>)
   1d9e6:	1ac0      	subs	r0, r0, r3
   1d9e8:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
   1d9ea:	4b03      	ldr	r3, [pc, #12]	; (1d9f8 <get_subsys+0x14>)
   1d9ec:	fb03 f000 	mul.w	r0, r3, r0
   1d9f0:	4770      	bx	lr
   1d9f2:	bf00      	nop
   1d9f4:	20006294 	.word	0x20006294
   1d9f8:	b6db6db7 	.word	0xb6db6db7

0001d9fc <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1d9fc:	b538      	push	{r3, r4, r5, lr}
   1d9fe:	4605      	mov	r5, r0
   1da00:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1da02:	f7ff ffef 	bl	1d9e4 <get_subsys>
   1da06:	4601      	mov	r1, r0
   1da08:	2240      	movs	r2, #64	; 0x40
   1da0a:	4803      	ldr	r0, [pc, #12]	; (1da18 <onoff_stop+0x1c>)
   1da0c:	f00a fda5 	bl	2855a <stop>
   1da10:	4601      	mov	r1, r0
	notify(mgr, res);
   1da12:	4628      	mov	r0, r5
   1da14:	47a0      	blx	r4
}
   1da16:	bd38      	pop	{r3, r4, r5, pc}
   1da18:	0002aeac 	.word	0x0002aeac

0001da1c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1da1c:	b530      	push	{r4, r5, lr}
   1da1e:	b083      	sub	sp, #12
   1da20:	4605      	mov	r5, r0
   1da22:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1da24:	f7ff ffde 	bl	1d9e4 <get_subsys>
   1da28:	4601      	mov	r1, r0
   1da2a:	2340      	movs	r3, #64	; 0x40
   1da2c:	9300      	str	r3, [sp, #0]
   1da2e:	4623      	mov	r3, r4
   1da30:	4a05      	ldr	r2, [pc, #20]	; (1da48 <onoff_start+0x2c>)
   1da32:	4806      	ldr	r0, [pc, #24]	; (1da4c <onoff_start+0x30>)
   1da34:	f00a fdab 	bl	2858e <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1da38:	1e01      	subs	r1, r0, #0
   1da3a:	db01      	blt.n	1da40 <onoff_start+0x24>
		notify(mgr, err);
	}
}
   1da3c:	b003      	add	sp, #12
   1da3e:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   1da40:	4628      	mov	r0, r5
   1da42:	47a0      	blx	r4
}
   1da44:	e7fa      	b.n	1da3c <onoff_start+0x20>
   1da46:	bf00      	nop
   1da48:	000285d7 	.word	0x000285d7
   1da4c:	0002aeac 	.word	0x0002aeac

0001da50 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   1da50:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   1da52:	b110      	cbz	r0, 1da5a <clock_event_handler+0xa>
   1da54:	2801      	cmp	r0, #1
   1da56:	d00d      	beq.n	1da74 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
   1da58:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1da5a:	2100      	movs	r1, #0
   1da5c:	4808      	ldr	r0, [pc, #32]	; (1da80 <clock_event_handler+0x30>)
   1da5e:	f00a fd05 	bl	2846c <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1da62:	6883      	ldr	r3, [r0, #8]
   1da64:	f013 0f07 	tst.w	r3, #7
   1da68:	d1f6      	bne.n	1da58 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1da6a:	2100      	movs	r1, #0
   1da6c:	4804      	ldr	r0, [pc, #16]	; (1da80 <clock_event_handler+0x30>)
   1da6e:	f00a fd62 	bl	28536 <clkstarted_handle>
   1da72:	e7f1      	b.n	1da58 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1da74:	2101      	movs	r1, #1
   1da76:	4802      	ldr	r0, [pc, #8]	; (1da80 <clock_event_handler+0x30>)
   1da78:	f00a fd5d 	bl	28536 <clkstarted_handle>
}
   1da7c:	e7ec      	b.n	1da58 <clock_event_handler+0x8>
   1da7e:	bf00      	nop
   1da80:	0002aeac 	.word	0x0002aeac

0001da84 <generic_hfclk_start>:
{
   1da84:	b510      	push	{r4, lr}
   1da86:	b082      	sub	sp, #8
	__asm__ volatile(
   1da88:	f04f 0340 	mov.w	r3, #64	; 0x40
   1da8c:	f3ef 8411 	mrs	r4, BASEPRI
   1da90:	f383 8812 	msr	BASEPRI_MAX, r3
   1da94:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1da98:	4a14      	ldr	r2, [pc, #80]	; (1daec <generic_hfclk_start+0x68>)
   1da9a:	6813      	ldr	r3, [r2, #0]
   1da9c:	f043 0102 	orr.w	r1, r3, #2
   1daa0:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1daa2:	f013 0f01 	tst.w	r3, #1
   1daa6:	d109      	bne.n	1dabc <generic_hfclk_start+0x38>
	bool already_started = false;
   1daa8:	2300      	movs	r3, #0
	__asm__ volatile(
   1daaa:	f384 8811 	msr	BASEPRI, r4
   1daae:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1dab2:	b9b3      	cbnz	r3, 1dae2 <generic_hfclk_start+0x5e>
	hfclk_start();
   1dab4:	f00a fd97 	bl	285e6 <hfclk_start>
}
   1dab8:	b002      	add	sp, #8
   1daba:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   1dabc:	f10d 0207 	add.w	r2, sp, #7
   1dac0:	2101      	movs	r1, #1
   1dac2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1dac6:	f00a fcae 	bl	28426 <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1daca:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1dace:	2b01      	cmp	r3, #1
   1dad0:	d001      	beq.n	1dad6 <generic_hfclk_start+0x52>
	bool already_started = false;
   1dad2:	2300      	movs	r3, #0
   1dad4:	e7e9      	b.n	1daaa <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
   1dad6:	f7ff ff81 	bl	1d9dc <get_hf_flags>
   1dada:	f00a fd19 	bl	28510 <set_on_state>
			already_started = true;
   1dade:	2301      	movs	r3, #1
   1dae0:	e7e3      	b.n	1daaa <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
   1dae2:	2100      	movs	r1, #0
   1dae4:	4802      	ldr	r0, [pc, #8]	; (1daf0 <generic_hfclk_start+0x6c>)
   1dae6:	f00a fd26 	bl	28536 <clkstarted_handle>
		return;
   1daea:	e7e5      	b.n	1dab8 <generic_hfclk_start+0x34>
   1daec:	200062e4 	.word	0x200062e4
   1daf0:	0002aeac 	.word	0x0002aeac

0001daf4 <generic_hfclk_stop>:
{
   1daf4:	b510      	push	{r4, lr}
	__asm__ volatile(
   1daf6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dafa:	f3ef 8411 	mrs	r4, BASEPRI
   1dafe:	f383 8812 	msr	BASEPRI_MAX, r3
   1db02:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1db06:	4a08      	ldr	r2, [pc, #32]	; (1db28 <generic_hfclk_stop+0x34>)
   1db08:	6813      	ldr	r3, [r2, #0]
   1db0a:	f023 0102 	bic.w	r1, r3, #2
   1db0e:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1db10:	f013 0f01 	tst.w	r3, #1
   1db14:	d004      	beq.n	1db20 <generic_hfclk_stop+0x2c>
	__asm__ volatile(
   1db16:	f384 8811 	msr	BASEPRI, r4
   1db1a:	f3bf 8f6f 	isb	sy
}
   1db1e:	bd10      	pop	{r4, pc}
		hfclk_stop();
   1db20:	f00a fd6b 	bl	285fa <hfclk_stop>
   1db24:	e7f7      	b.n	1db16 <generic_hfclk_stop+0x22>
   1db26:	bf00      	nop
   1db28:	200062e4 	.word	0x200062e4

0001db2c <lfclk_spinwait>:
{
   1db2c:	b570      	push	{r4, r5, r6, lr}
   1db2e:	b082      	sub	sp, #8
   1db30:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1db32:	2801      	cmp	r0, #1
   1db34:	d107      	bne.n	1db46 <lfclk_spinwait+0x1a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1db36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1db3a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1db3e:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1db42:	2b01      	cmp	r3, #1
   1db44:	d04c      	beq.n	1dbe0 <lfclk_spinwait+0xb4>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1db46:	f00c fa62 	bl	2a00e <k_is_in_isr>
   1db4a:	4604      	mov	r4, r0
   1db4c:	b918      	cbnz	r0, 1db56 <lfclk_spinwait+0x2a>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   1db4e:	4b28      	ldr	r3, [pc, #160]	; (1dbf0 <lfclk_spinwait+0xc4>)
   1db50:	781b      	ldrb	r3, [r3, #0]
   1db52:	2b00      	cmp	r3, #0
   1db54:	d139      	bne.n	1dbca <lfclk_spinwait+0x9e>
	__asm__ volatile(
   1db56:	f04f 0340 	mov.w	r3, #64	; 0x40
   1db5a:	f3ef 8611 	mrs	r6, BASEPRI
   1db5e:	f383 8812 	msr	BASEPRI_MAX, r3
   1db62:	f3bf 8f6f 	isb	sy
   1db66:	2401      	movs	r4, #1
	if (!isr_mode) {
   1db68:	b924      	cbnz	r4, 1db74 <lfclk_spinwait+0x48>
    p_reg->INTENCLR = mask;
   1db6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1db6e:	2202      	movs	r2, #2
   1db70:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   1db74:	aa01      	add	r2, sp, #4
   1db76:	2100      	movs	r1, #0
   1db78:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1db7c:	f00a fc53 	bl	28426 <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1db80:	b120      	cbz	r0, 1db8c <lfclk_spinwait+0x60>
		 && ((type == target_type)
   1db82:	9b01      	ldr	r3, [sp, #4]
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1db84:	2b01      	cmp	r3, #1
   1db86:	d026      	beq.n	1dbd6 <lfclk_spinwait+0xaa>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1db88:	2d01      	cmp	r5, #1
   1db8a:	d024      	beq.n	1dbd6 <lfclk_spinwait+0xaa>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1db8c:	b1fc      	cbz	r4, 1dbce <lfclk_spinwait+0xa2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1db8e:	4630      	mov	r0, r6
   1db90:	f7f6 febe 	bl	14910 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1db94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1db98:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1db9c:	2b00      	cmp	r3, #0
   1db9e:	d1e9      	bne.n	1db74 <lfclk_spinwait+0x48>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1dba0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1dba4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1dba8:	2b00      	cmp	r3, #0
   1dbaa:	d0e3      	beq.n	1db74 <lfclk_spinwait+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dbac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1dbb0:	2200      	movs	r2, #0
   1dbb2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1dbb6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1dbba:	2201      	movs	r2, #1
   1dbbc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1dbc0:	490c      	ldr	r1, [pc, #48]	; (1dbf4 <lfclk_spinwait+0xc8>)
   1dbc2:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dbc6:	609a      	str	r2, [r3, #8]
}
   1dbc8:	e7d4      	b.n	1db74 <lfclk_spinwait+0x48>
	int key = isr_mode ? irq_lock() : 0;
   1dbca:	2600      	movs	r6, #0
   1dbcc:	e7cc      	b.n	1db68 <lfclk_spinwait+0x3c>
				k_msleep(1);
   1dbce:	2001      	movs	r0, #1
   1dbd0:	f00a fd1d 	bl	2860e <k_msleep>
   1dbd4:	e7de      	b.n	1db94 <lfclk_spinwait+0x68>
	if (isr_mode) {
   1dbd6:	b12c      	cbz	r4, 1dbe4 <lfclk_spinwait+0xb8>
	__asm__ volatile(
   1dbd8:	f386 8811 	msr	BASEPRI, r6
   1dbdc:	f3bf 8f6f 	isb	sy
}
   1dbe0:	b002      	add	sp, #8
   1dbe2:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
   1dbe4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1dbe8:	2202      	movs	r2, #2
   1dbea:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1dbee:	e7f7      	b.n	1dbe0 <lfclk_spinwait+0xb4>
   1dbf0:	200069ba 	.word	0x200069ba
   1dbf4:	e000e100 	.word	0xe000e100

0001dbf8 <api_blocking_start>:
{
   1dbf8:	b500      	push	{lr}
   1dbfa:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1dbfc:	f8cd d000 	str.w	sp, [sp]
   1dc00:	f8cd d004 	str.w	sp, [sp, #4]
   1dc04:	2300      	movs	r3, #0
   1dc06:	9302      	str	r3, [sp, #8]
   1dc08:	2301      	movs	r3, #1
   1dc0a:	9303      	str	r3, [sp, #12]
   1dc0c:	ab04      	add	r3, sp, #16
   1dc0e:	9304      	str	r3, [sp, #16]
   1dc10:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1dc12:	466b      	mov	r3, sp
   1dc14:	4a06      	ldr	r2, [pc, #24]	; (1dc30 <api_blocking_start+0x38>)
   1dc16:	f00a fcd6 	bl	285c6 <api_start>
	if (err < 0) {
   1dc1a:	2800      	cmp	r0, #0
   1dc1c:	db05      	blt.n	1dc2a <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
   1dc1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1dc22:	2300      	movs	r3, #0
   1dc24:	4668      	mov	r0, sp
   1dc26:	f004 ffcd 	bl	22bc4 <z_impl_k_sem_take>
}
   1dc2a:	b007      	add	sp, #28
   1dc2c:	f85d fb04 	ldr.w	pc, [sp], #4
   1dc30:	0002863b 	.word	0x0002863b

0001dc34 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   1dc34:	b570      	push	{r4, r5, r6, lr}
   1dc36:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1dc38:	2200      	movs	r2, #0
   1dc3a:	2101      	movs	r1, #1
   1dc3c:	4610      	mov	r0, r2
   1dc3e:	f008 f928 	bl	25e92 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1dc42:	4811      	ldr	r0, [pc, #68]	; (1dc88 <clk_init+0x54>)
   1dc44:	f003 fa36 	bl	210b4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1dc48:	4b10      	ldr	r3, [pc, #64]	; (1dc8c <clk_init+0x58>)
   1dc4a:	4298      	cmp	r0, r3
   1dc4c:	d119      	bne.n	1dc82 <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1dc4e:	f00b ff73 	bl	29b38 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   1dc52:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1dc54:	2c01      	cmp	r4, #1
   1dc56:	d812      	bhi.n	1dc7e <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   1dc58:	4621      	mov	r1, r4
   1dc5a:	4630      	mov	r0, r6
   1dc5c:	f00a fc06 	bl	2846c <get_sub_data>
   1dc60:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1dc62:	4621      	mov	r1, r4
   1dc64:	4630      	mov	r0, r6
   1dc66:	f00a fc0e 	bl	28486 <get_onoff_manager>
   1dc6a:	4909      	ldr	r1, [pc, #36]	; (1dc90 <clk_init+0x5c>)
   1dc6c:	f006 ffa6 	bl	24bbc <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1dc70:	2800      	cmp	r0, #0
   1dc72:	db05      	blt.n	1dc80 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1dc74:	2301      	movs	r3, #1
   1dc76:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1dc78:	441c      	add	r4, r3
   1dc7a:	b2e4      	uxtb	r4, r4
   1dc7c:	e7ea      	b.n	1dc54 <clk_init+0x20>
	}

	return 0;
   1dc7e:	2000      	movs	r0, #0
}
   1dc80:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1dc82:	f06f 0004 	mvn.w	r0, #4
   1dc86:	e7fb      	b.n	1dc80 <clk_init+0x4c>
   1dc88:	0001da51 	.word	0x0001da51
   1dc8c:	0bad0000 	.word	0x0bad0000
   1dc90:	0002d214 	.word	0x0002d214

0001dc94 <z_nrf_clock_control_lf_on>:
{
   1dc94:	b510      	push	{r4, lr}
   1dc96:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1dc98:	4b10      	ldr	r3, [pc, #64]	; (1dcdc <z_nrf_clock_control_lf_on+0x48>)
   1dc9a:	2101      	movs	r1, #1
   1dc9c:	f3bf 8f5b 	dmb	ish
   1dca0:	e853 2f00 	ldrex	r2, [r3]
   1dca4:	e843 1000 	strex	r0, r1, [r3]
   1dca8:	2800      	cmp	r0, #0
   1dcaa:	d1f9      	bne.n	1dca0 <z_nrf_clock_control_lf_on+0xc>
   1dcac:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1dcb0:	b11a      	cbz	r2, 1dcba <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
   1dcb2:	1e63      	subs	r3, r4, #1
   1dcb4:	2b01      	cmp	r3, #1
   1dcb6:	d90d      	bls.n	1dcd4 <z_nrf_clock_control_lf_on+0x40>
}
   1dcb8:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
   1dcba:	4809      	ldr	r0, [pc, #36]	; (1dce0 <z_nrf_clock_control_lf_on+0x4c>)
   1dcbc:	f00a fbe3 	bl	28486 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1dcc0:	4908      	ldr	r1, [pc, #32]	; (1dce4 <z_nrf_clock_control_lf_on+0x50>)
   1dcc2:	2300      	movs	r3, #0
   1dcc4:	604b      	str	r3, [r1, #4]
   1dcc6:	608b      	str	r3, [r1, #8]
   1dcc8:	60cb      	str	r3, [r1, #12]
   1dcca:	2301      	movs	r3, #1
   1dccc:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   1dcce:	f006 ff92 	bl	24bf6 <onoff_request>
   1dcd2:	e7ee      	b.n	1dcb2 <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
   1dcd4:	4620      	mov	r0, r4
   1dcd6:	f7ff ff29 	bl	1db2c <lfclk_spinwait>
		break;
   1dcda:	e7ed      	b.n	1dcb8 <z_nrf_clock_control_lf_on+0x24>
   1dcdc:	20006290 	.word	0x20006290
   1dce0:	0002aeac 	.word	0x0002aeac
   1dce4:	20006280 	.word	0x20006280

0001dce8 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   1dce8:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

#ifdef CONFIG_PRINTK
	__printk_hook_install(rtt_console_out);
   1dcea:	4c04      	ldr	r4, [pc, #16]	; (1dcfc <rtt_console_init+0x14>)
   1dcec:	4620      	mov	r0, r4
   1dcee:	f7f5 fa3f 	bl	13170 <__printk_hook_install>
#endif
	__stdout_hook_install(rtt_console_out);
   1dcf2:	4620      	mov	r0, r4
   1dcf4:	f7f8 f958 	bl	15fa8 <__stdout_hook_install>

	return 0;
}
   1dcf8:	2000      	movs	r0, #0
   1dcfa:	bd10      	pop	{r4, pc}
   1dcfc:	0001dd01 	.word	0x0001dd01

0001dd00 <rtt_console_out>:
{
   1dd00:	b570      	push	{r4, r5, r6, lr}
   1dd02:	b082      	sub	sp, #8
   1dd04:	4606      	mov	r6, r0
	char c = (char)character;
   1dd06:	f88d 0007 	strb.w	r0, [sp, #7]
	int max_cnt = CONFIG_RTT_TX_RETRY_CNT;
   1dd0a:	2502      	movs	r5, #2
		SEGGER_RTT_LOCK();
   1dd0c:	f004 fa42 	bl	22194 <zephyr_rtt_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   1dd10:	2201      	movs	r2, #1
   1dd12:	f10d 0107 	add.w	r1, sp, #7
   1dd16:	2000      	movs	r0, #0
   1dd18:	f004 f9f6 	bl	22108 <SEGGER_RTT_WriteNoLock>
   1dd1c:	4604      	mov	r4, r0
		SEGGER_RTT_UNLOCK();
   1dd1e:	f004 fa45 	bl	221ac <zephyr_rtt_mutex_unlock>
		if (cnt) {
   1dd22:	b93c      	cbnz	r4, 1dd34 <rtt_console_out+0x34>
		} else if (host_present) {
   1dd24:	4b08      	ldr	r3, [pc, #32]	; (1dd48 <rtt_console_out+0x48>)
   1dd26:	781b      	ldrb	r3, [r3, #0]
   1dd28:	b15b      	cbz	r3, 1dd42 <rtt_console_out+0x42>
			if (max_cnt) {
   1dd2a:	b13d      	cbz	r5, 1dd3c <rtt_console_out+0x3c>
				wait();
   1dd2c:	f00a fca0 	bl	28670 <wait>
				max_cnt--;
   1dd30:	3d01      	subs	r5, #1
		SEGGER_RTT_LOCK();
   1dd32:	e7eb      	b.n	1dd0c <rtt_console_out+0xc>
			host_present = true;
   1dd34:	4b04      	ldr	r3, [pc, #16]	; (1dd48 <rtt_console_out+0x48>)
   1dd36:	2201      	movs	r2, #1
   1dd38:	701a      	strb	r2, [r3, #0]
   1dd3a:	e002      	b.n	1dd42 <rtt_console_out+0x42>
				host_present = false;
   1dd3c:	4b02      	ldr	r3, [pc, #8]	; (1dd48 <rtt_console_out+0x48>)
   1dd3e:	2200      	movs	r2, #0
   1dd40:	701a      	strb	r2, [r3, #0]
}
   1dd42:	4630      	mov	r0, r6
   1dd44:	b002      	add	sp, #8
   1dd46:	bd70      	pop	{r4, r5, r6, pc}
   1dd48:	200069b8 	.word	0x200069b8

0001dd4c <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1dd4c:	b128      	cbz	r0, 1dd5a <get_dev+0xe>
   1dd4e:	2801      	cmp	r0, #1
   1dd50:	d101      	bne.n	1dd56 <get_dev+0xa>
   1dd52:	4803      	ldr	r0, [pc, #12]	; (1dd60 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
   1dd54:	4770      	bx	lr
	const struct device *dev = NULL;
   1dd56:	2000      	movs	r0, #0
   1dd58:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1dd5a:	4802      	ldr	r0, [pc, #8]	; (1dd64 <get_dev+0x18>)
   1dd5c:	4770      	bx	lr
   1dd5e:	bf00      	nop
   1dd60:	0002aec4 	.word	0x0002aec4
   1dd64:	0002aedc 	.word	0x0002aedc

0001dd68 <gpio_nrfx_pin_interrupt_configure>:
{
   1dd68:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dd6a:	b085      	sub	sp, #20
   1dd6c:	460e      	mov	r6, r1
   1dd6e:	4619      	mov	r1, r3
	return port->config;
   1dd70:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1dd72:	7b1b      	ldrb	r3, [r3, #12]
   1dd74:	f006 051f 	and.w	r5, r6, #31
   1dd78:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1dd7c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
   1dd80:	d022      	beq.n	1ddc8 <gpio_nrfx_pin_interrupt_configure+0x60>
   1dd82:	4607      	mov	r7, r0
   1dd84:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1dd86:	2300      	movs	r3, #0
   1dd88:	9301      	str	r3, [sp, #4]
   1dd8a:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
   1dd8c:	4610      	mov	r0, r2
   1dd8e:	f00a fd55 	bl	2883c <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1dd92:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
   1dd96:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1dd98:	6899      	ldr	r1, [r3, #8]
   1dd9a:	40f1      	lsrs	r1, r6
   1dd9c:	f011 0f01 	tst.w	r1, #1
   1dda0:	d102      	bne.n	1dda8 <gpio_nrfx_pin_interrupt_configure+0x40>
   1dda2:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
   1dda6:	d014      	beq.n	1ddd2 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1dda8:	2300      	movs	r3, #0
   1ddaa:	aa01      	add	r2, sp, #4
   1ddac:	4619      	mov	r1, r3
   1ddae:	4628      	mov	r0, r5
   1ddb0:	f003 fce4 	bl	2177c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1ddb4:	4b1b      	ldr	r3, [pc, #108]	; (1de24 <gpio_nrfx_pin_interrupt_configure+0xbc>)
   1ddb6:	4298      	cmp	r0, r3
   1ddb8:	d131      	bne.n	1de1e <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1ddba:	2101      	movs	r1, #1
   1ddbc:	4628      	mov	r0, r5
   1ddbe:	f003 fe3d 	bl	21a3c <nrfx_gpiote_trigger_enable>
	return 0;
   1ddc2:	2000      	movs	r0, #0
}
   1ddc4:	b005      	add	sp, #20
   1ddc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
   1ddc8:	4628      	mov	r0, r5
   1ddca:	f003 fe69 	bl	21aa0 <nrfx_gpiote_trigger_disable>
		return 0;
   1ddce:	2000      	movs	r0, #0
   1ddd0:	e7f8      	b.n	1ddc4 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1ddd2:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
   1ddd6:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ddd8:	2a01      	cmp	r2, #1
   1ddda:	d014      	beq.n	1de06 <gpio_nrfx_pin_interrupt_configure+0x9e>
        case 0: return NRF_P0;
   1dddc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1dde0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1dde4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1dde8:	f013 0f01 	tst.w	r3, #1
   1ddec:	d1dc      	bne.n	1dda8 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1ddee:	f10d 010f 	add.w	r1, sp, #15
   1ddf2:	4628      	mov	r0, r5
   1ddf4:	f003 fdc6 	bl	21984 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1ddf8:	4b0b      	ldr	r3, [pc, #44]	; (1de28 <gpio_nrfx_pin_interrupt_configure+0xc0>)
   1ddfa:	4298      	cmp	r0, r3
   1ddfc:	d005      	beq.n	1de0a <gpio_nrfx_pin_interrupt_configure+0xa2>
		trigger_config.p_in_channel = &ch;
   1ddfe:	f10d 030f 	add.w	r3, sp, #15
   1de02:	9302      	str	r3, [sp, #8]
   1de04:	e7d0      	b.n	1dda8 <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
   1de06:	4a09      	ldr	r2, [pc, #36]	; (1de2c <gpio_nrfx_pin_interrupt_configure+0xc4>)
   1de08:	e7ea      	b.n	1dde0 <gpio_nrfx_pin_interrupt_configure+0x78>
			err = nrfx_gpiote_channel_alloc(&ch);
   1de0a:	f10d 000f 	add.w	r0, sp, #15
   1de0e:	f003 fe0d 	bl	21a2c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1de12:	4b04      	ldr	r3, [pc, #16]	; (1de24 <gpio_nrfx_pin_interrupt_configure+0xbc>)
   1de14:	4298      	cmp	r0, r3
   1de16:	d0f2      	beq.n	1ddfe <gpio_nrfx_pin_interrupt_configure+0x96>
				return -ENOMEM;
   1de18:	f06f 000b 	mvn.w	r0, #11
   1de1c:	e7d2      	b.n	1ddc4 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
   1de1e:	f06f 0015 	mvn.w	r0, #21
   1de22:	e7cf      	b.n	1ddc4 <gpio_nrfx_pin_interrupt_configure+0x5c>
   1de24:	0bad0000 	.word	0x0bad0000
   1de28:	0bad0004 	.word	0x0bad0004
   1de2c:	50000300 	.word	0x50000300

0001de30 <gpio_nrfx_pin_configure>:
{
   1de30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1de34:	b086      	sub	sp, #24
   1de36:	460e      	mov	r6, r1
   1de38:	4614      	mov	r4, r2
	return port->config;
   1de3a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1de3e:	f898 300c 	ldrb.w	r3, [r8, #12]
   1de42:	f001 051f 	and.w	r5, r1, #31
   1de46:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1de4a:	f10d 0117 	add.w	r1, sp, #23
   1de4e:	4628      	mov	r0, r5
   1de50:	f003 fd98 	bl	21984 <nrfx_gpiote_channel_get>
   1de54:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1de56:	f414 3f40 	tst.w	r4, #196608	; 0x30000
   1de5a:	d03a      	beq.n	1ded2 <gpio_nrfx_pin_configure+0xa2>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1de5c:	2100      	movs	r1, #0
   1de5e:	9103      	str	r1, [sp, #12]
   1de60:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1de62:	460b      	mov	r3, r1
   1de64:	aa03      	add	r2, sp, #12
   1de66:	4628      	mov	r0, r5
   1de68:	f003 fc88 	bl	2177c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1de6c:	4b33      	ldr	r3, [pc, #204]	; (1df3c <gpio_nrfx_pin_configure+0x10c>)
   1de6e:	4298      	cmp	r0, r3
   1de70:	d161      	bne.n	1df36 <gpio_nrfx_pin_configure+0x106>
	if (free_ch) {
   1de72:	429f      	cmp	r7, r3
   1de74:	d03d      	beq.n	1def2 <gpio_nrfx_pin_configure+0xc2>
	if (flags & GPIO_OUTPUT) {
   1de76:	f414 3f00 	tst.w	r4, #131072	; 0x20000
   1de7a:	d049      	beq.n	1df10 <gpio_nrfx_pin_configure+0xe0>
		int rv = get_drive(flags, &drive);
   1de7c:	f10d 0103 	add.w	r1, sp, #3
   1de80:	4620      	mov	r0, r4
   1de82:	f00a fc60 	bl	28746 <get_drive>
		if (rv != 0) {
   1de86:	4607      	mov	r7, r0
   1de88:	bb50      	cbnz	r0, 1dee0 <gpio_nrfx_pin_configure+0xb0>
		nrfx_gpiote_output_config_t output_config = {
   1de8a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1de8e:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1de92:	f414 3f80 	tst.w	r4, #65536	; 0x10000
   1de96:	bf0c      	ite	eq
   1de98:	2301      	moveq	r3, #1
   1de9a:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
   1de9c:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
   1dea0:	4620      	mov	r0, r4
   1dea2:	f00a fc93 	bl	287cc <get_pull>
		nrfx_gpiote_output_config_t output_config = {
   1dea6:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1deaa:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   1deae:	d025      	beq.n	1defc <gpio_nrfx_pin_configure+0xcc>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1deb0:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1deb4:	2301      	movs	r3, #1
   1deb6:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   1deb8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1debc:	2200      	movs	r2, #0
   1debe:	a901      	add	r1, sp, #4
   1dec0:	4628      	mov	r0, r5
   1dec2:	f003 fcef 	bl	218a4 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1dec6:	4b1d      	ldr	r3, [pc, #116]	; (1df3c <gpio_nrfx_pin_configure+0x10c>)
   1dec8:	4298      	cmp	r0, r3
   1deca:	d009      	beq.n	1dee0 <gpio_nrfx_pin_configure+0xb0>
   1decc:	f06f 0715 	mvn.w	r7, #21
   1ded0:	e006      	b.n	1dee0 <gpio_nrfx_pin_configure+0xb0>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1ded2:	4628      	mov	r0, r5
   1ded4:	f003 fe06 	bl	21ae4 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1ded8:	4b18      	ldr	r3, [pc, #96]	; (1df3c <gpio_nrfx_pin_configure+0x10c>)
   1deda:	429f      	cmp	r7, r3
   1dedc:	d004      	beq.n	1dee8 <gpio_nrfx_pin_configure+0xb8>
		return 0;
   1dede:	2700      	movs	r7, #0
}
   1dee0:	4638      	mov	r0, r7
   1dee2:	b006      	add	sp, #24
   1dee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
   1dee8:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1deec:	f003 fd96 	bl	21a1c <nrfx_gpiote_channel_free>
   1def0:	e7f5      	b.n	1dede <gpio_nrfx_pin_configure+0xae>
		err = nrfx_gpiote_channel_free(ch);
   1def2:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1def6:	f003 fd91 	bl	21a1c <nrfx_gpiote_channel_free>
   1defa:	e7bc      	b.n	1de76 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1defc:	f414 2f80 	tst.w	r4, #262144	; 0x40000
   1df00:	d0dc      	beq.n	1debc <gpio_nrfx_pin_configure+0x8c>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1df02:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1df06:	2301      	movs	r3, #1
   1df08:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
   1df0a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   1df0e:	e7d5      	b.n	1debc <gpio_nrfx_pin_configure+0x8c>
		.pull = get_pull(flags)
   1df10:	4620      	mov	r0, r4
   1df12:	f00a fc5b 	bl	287cc <get_pull>
	nrfx_gpiote_input_config_t input_config = {
   1df16:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1df1a:	2300      	movs	r3, #0
   1df1c:	461a      	mov	r2, r3
   1df1e:	a902      	add	r1, sp, #8
   1df20:	4628      	mov	r0, r5
   1df22:	f003 fc2b 	bl	2177c <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1df26:	4b05      	ldr	r3, [pc, #20]	; (1df3c <gpio_nrfx_pin_configure+0x10c>)
   1df28:	4298      	cmp	r0, r3
   1df2a:	d101      	bne.n	1df30 <gpio_nrfx_pin_configure+0x100>
   1df2c:	2700      	movs	r7, #0
   1df2e:	e7d7      	b.n	1dee0 <gpio_nrfx_pin_configure+0xb0>
   1df30:	f06f 0715 	mvn.w	r7, #21
   1df34:	e7d4      	b.n	1dee0 <gpio_nrfx_pin_configure+0xb0>
		return -EINVAL;
   1df36:	f06f 0715 	mvn.w	r7, #21
   1df3a:	e7d1      	b.n	1dee0 <gpio_nrfx_pin_configure+0xb0>
   1df3c:	0bad0000 	.word	0x0bad0000

0001df40 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1df40:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1df42:	f003 fd61 	bl	21a08 <nrfx_gpiote_is_init>
   1df46:	b108      	cbz	r0, 1df4c <gpio_nrfx_init+0xc>
		return 0;
   1df48:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1df4a:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
   1df4c:	f003 fd32 	bl	219b4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1df50:	4b08      	ldr	r3, [pc, #32]	; (1df74 <gpio_nrfx_init+0x34>)
   1df52:	4298      	cmp	r0, r3
   1df54:	d10a      	bne.n	1df6c <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1df56:	2100      	movs	r1, #0
   1df58:	4807      	ldr	r0, [pc, #28]	; (1df78 <gpio_nrfx_init+0x38>)
   1df5a:	f003 fd0d 	bl	21978 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1df5e:	2200      	movs	r2, #0
   1df60:	2105      	movs	r1, #5
   1df62:	2006      	movs	r0, #6
   1df64:	f007 ff95 	bl	25e92 <z_arm_irq_priority_set>
	return 0;
   1df68:	2000      	movs	r0, #0
   1df6a:	e7ee      	b.n	1df4a <gpio_nrfx_init+0xa>
		return -EIO;
   1df6c:	f06f 0004 	mvn.w	r0, #4
   1df70:	e7eb      	b.n	1df4a <gpio_nrfx_init+0xa>
   1df72:	bf00      	nop
   1df74:	0bad0000 	.word	0x0bad0000
   1df78:	00028875 	.word	0x00028875

0001df7c <get_nrf_spi_frequency>:

static inline nrf_spi_frequency_t get_nrf_spi_frequency(uint32_t frequency)
{
	/* Get the highest supported frequency not exceeding the requested one.
	 */
	if (frequency < 250000) {
   1df7c:	4b13      	ldr	r3, [pc, #76]	; (1dfcc <get_nrf_spi_frequency+0x50>)
   1df7e:	4298      	cmp	r0, r3
   1df80:	d911      	bls.n	1dfa6 <get_nrf_spi_frequency+0x2a>
		return NRF_SPI_FREQ_125K;
	} else if (frequency < 500000) {
   1df82:	4b13      	ldr	r3, [pc, #76]	; (1dfd0 <get_nrf_spi_frequency+0x54>)
   1df84:	4298      	cmp	r0, r3
   1df86:	d911      	bls.n	1dfac <get_nrf_spi_frequency+0x30>
		return NRF_SPI_FREQ_250K;
	} else if (frequency < 1000000) {
   1df88:	4b12      	ldr	r3, [pc, #72]	; (1dfd4 <get_nrf_spi_frequency+0x58>)
   1df8a:	4298      	cmp	r0, r3
   1df8c:	d911      	bls.n	1dfb2 <get_nrf_spi_frequency+0x36>
		return NRF_SPI_FREQ_500K;
	} else if (frequency < 2000000) {
   1df8e:	4b12      	ldr	r3, [pc, #72]	; (1dfd8 <get_nrf_spi_frequency+0x5c>)
   1df90:	4298      	cmp	r0, r3
   1df92:	d911      	bls.n	1dfb8 <get_nrf_spi_frequency+0x3c>
		return NRF_SPI_FREQ_1M;
	} else if (frequency < 4000000) {
   1df94:	4b11      	ldr	r3, [pc, #68]	; (1dfdc <get_nrf_spi_frequency+0x60>)
   1df96:	4298      	cmp	r0, r3
   1df98:	d911      	bls.n	1dfbe <get_nrf_spi_frequency+0x42>
		return NRF_SPI_FREQ_2M;
	} else if (frequency < 8000000) {
   1df9a:	4b11      	ldr	r3, [pc, #68]	; (1dfe0 <get_nrf_spi_frequency+0x64>)
   1df9c:	4298      	cmp	r0, r3
   1df9e:	d211      	bcs.n	1dfc4 <get_nrf_spi_frequency+0x48>
		return NRF_SPI_FREQ_4M;
   1dfa0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1dfa4:	4770      	bx	lr
		return NRF_SPI_FREQ_125K;
   1dfa6:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   1dfaa:	4770      	bx	lr
		return NRF_SPI_FREQ_250K;
   1dfac:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
   1dfb0:	4770      	bx	lr
		return NRF_SPI_FREQ_500K;
   1dfb2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   1dfb6:	4770      	bx	lr
		return NRF_SPI_FREQ_1M;
   1dfb8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1dfbc:	4770      	bx	lr
		return NRF_SPI_FREQ_2M;
   1dfbe:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
   1dfc2:	4770      	bx	lr
	} else {
		return NRF_SPI_FREQ_8M;
   1dfc4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
	}
}
   1dfc8:	4770      	bx	lr
   1dfca:	bf00      	nop
   1dfcc:	0003d08f 	.word	0x0003d08f
   1dfd0:	0007a11f 	.word	0x0007a11f
   1dfd4:	000f423f 	.word	0x000f423f
   1dfd8:	001e847f 	.word	0x001e847f
   1dfdc:	003d08ff 	.word	0x003d08ff
   1dfe0:	007a1200 	.word	0x007a1200

0001dfe4 <configure>:
	}
}

static int configure(const struct device *dev,
		     const struct spi_config *spi_cfg)
{
   1dfe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dfe8:	b0a0      	sub	sp, #128	; 0x80
   1dfea:	af00      	add	r7, sp, #0
   1dfec:	460c      	mov	r4, r1
	struct spi_nrfx_data *dev_data = dev->data;
   1dfee:	6905      	ldr	r5, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   1dff0:	6846      	ldr	r6, [r0, #4]
	struct spi_context *ctx = &dev_data->ctx;
	nrfx_spi_config_t config;
	nrfx_err_t result;

	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   1dff2:	f895 806d 	ldrb.w	r8, [r5, #109]	; 0x6d
   1dff6:	f1b8 0f00 	cmp.w	r8, #0
   1dffa:	d003      	beq.n	1e004 <configure+0x20>
	._ctx_name.num_cs_gpios = DT_PROP_LEN_OR(_node_id, cs_gpios, 0),

static inline bool spi_context_configured(struct spi_context *ctx,
					  const struct spi_config *config)
{
	return !!(ctx->config == config);
   1dffc:	682b      	ldr	r3, [r5, #0]
   1dffe:	428b      	cmp	r3, r1
   1e000:	f000 818c 	beq.w	1e31c <configure+0x338>
		/* Already configured. No need to do it again. */
		return 0;
	}

	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   1e004:	88a3      	ldrh	r3, [r4, #4]
   1e006:	f413 6f00 	tst.w	r3, #2048	; 0x800
   1e00a:	d14a      	bne.n	1e0a2 <configure+0xbe>
		LOG_ERR("Half-duplex not supported");
		return -ENOTSUP;
	}

	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1e00c:	f013 0f01 	tst.w	r3, #1
   1e010:	d16c      	bne.n	1e0ec <configure+0x108>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
		return -EINVAL;
	}

	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1e012:	f013 0f08 	tst.w	r3, #8
   1e016:	f040 80bf 	bne.w	1e198 <configure+0x1b4>
	    (spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
		LOG_ERR("Only single line mode is supported");
		return -EINVAL;
	}

	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1e01a:	f3c3 1345 	ubfx	r3, r3, #5, #6
   1e01e:	2b08      	cmp	r3, #8
   1e020:	f040 80df 	bne.w	1e1e2 <configure+0x1fe>
		LOG_ERR("Word sizes other than 8 bits are not supported");
		return -EINVAL;
	}

	if (spi_cfg->frequency < 125000) {
   1e024:	6822      	ldr	r2, [r4, #0]
   1e026:	4bbe      	ldr	r3, [pc, #760]	; (1e320 <configure+0x33c>)
   1e028:	429a      	cmp	r2, r3
   1e02a:	f240 80ff 	bls.w	1e22c <configure+0x248>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
		return -EINVAL;
	}

	config = dev_config->def_config;
   1e02e:	f107 0c0c 	add.w	ip, r7, #12
   1e032:	f106 0e08 	add.w	lr, r6, #8
   1e036:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1e03a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1e03e:	f8de 3000 	ldr.w	r3, [lr]
   1e042:	f8cc 3000 	str.w	r3, [ip]

	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
   1e046:	6820      	ldr	r0, [r4, #0]
   1e048:	f7ff ff98 	bl	1df7c <get_nrf_spi_frequency>
   1e04c:	6178      	str	r0, [r7, #20]
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
   1e04e:	88a3      	ldrh	r3, [r4, #4]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1e050:	f013 0f02 	tst.w	r3, #2
   1e054:	f000 810f 	beq.w	1e276 <configure+0x292>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   1e058:	f013 0f04 	tst.w	r3, #4
   1e05c:	f000 8110 	beq.w	1e280 <configure+0x29c>
			return NRF_SPI_MODE_3;
   1e060:	2303      	movs	r3, #3
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
   1e062:	763b      	strb	r3, [r7, #24]
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
   1e064:	88a3      	ldrh	r3, [r4, #4]
	if (operation & SPI_TRANSFER_LSB) {
   1e066:	f013 0f10 	tst.w	r3, #16
   1e06a:	f000 810d 	beq.w	1e288 <configure+0x2a4>
		return NRF_SPI_BIT_ORDER_LSB_FIRST;
   1e06e:	2301      	movs	r3, #1
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
   1e070:	767b      	strb	r3, [r7, #25]

	if (dev_data->initialized) {
   1e072:	f1b8 0f00 	cmp.w	r8, #0
   1e076:	f040 8109 	bne.w	1e28c <configure+0x2a8>
		nrfx_spi_uninit(&dev_config->spi);
		dev_data->initialized = false;
	}

	result = nrfx_spi_init(&dev_config->spi, &config,
   1e07a:	462b      	mov	r3, r5
   1e07c:	4aa9      	ldr	r2, [pc, #676]	; (1e324 <configure+0x340>)
   1e07e:	f107 010c 	add.w	r1, r7, #12
   1e082:	4630      	mov	r0, r6
   1e084:	f003 fe90 	bl	21da8 <nrfx_spi_init>
			       event_handler, dev_data);
	if (result != NRFX_SUCCESS) {
   1e088:	4ba7      	ldr	r3, [pc, #668]	; (1e328 <configure+0x344>)
   1e08a:	4298      	cmp	r0, r3
   1e08c:	f040 8105 	bne.w	1e29a <configure+0x2b6>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
		return -EIO;
	}

	dev_data->initialized = true;
   1e090:	2301      	movs	r3, #1
   1e092:	f885 306d 	strb.w	r3, [r5, #109]	; 0x6d

	ctx->config = spi_cfg;
   1e096:	602c      	str	r4, [r5, #0]

	return 0;
   1e098:	2000      	movs	r0, #0
}
   1e09a:	3780      	adds	r7, #128	; 0x80
   1e09c:	46bd      	mov	sp, r7
   1e09e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Half-duplex not supported");
   1e0a2:	4ba2      	ldr	r3, [pc, #648]	; (1e32c <configure+0x348>)
   1e0a4:	67fb      	str	r3, [r7, #124]	; 0x7c
   1e0a6:	2302      	movs	r3, #2
   1e0a8:	723b      	strb	r3, [r7, #8]
   1e0aa:	2300      	movs	r3, #0
   1e0ac:	727b      	strb	r3, [r7, #9]
   1e0ae:	72bb      	strb	r3, [r7, #10]
   1e0b0:	72fb      	strb	r3, [r7, #11]
   1e0b2:	68ba      	ldr	r2, [r7, #8]
   1e0b4:	67ba      	str	r2, [r7, #120]	; 0x78
   1e0b6:	4619      	mov	r1, r3
   1e0b8:	f363 0100 	bfi	r1, r3, #0, #1
   1e0bc:	f363 0141 	bfi	r1, r3, #1, #1
   1e0c0:	f363 0182 	bfi	r1, r3, #2, #1
   1e0c4:	f363 01c5 	bfi	r1, r3, #3, #3
   1e0c8:	2201      	movs	r2, #1
   1e0ca:	f362 1188 	bfi	r1, r2, #6, #3
   1e0ce:	2208      	movs	r2, #8
   1e0d0:	f362 2152 	bfi	r1, r2, #9, #10
   1e0d4:	f363 41de 	bfi	r1, r3, #19, #12
   1e0d8:	f363 71df 	bfi	r1, r3, #31, #1
   1e0dc:	f107 0278 	add.w	r2, r7, #120	; 0x78
   1e0e0:	4893      	ldr	r0, [pc, #588]	; (1e330 <configure+0x34c>)
   1e0e2:	f007 fb66 	bl	257b2 <z_impl_z_log_msg_static_create>
		return -ENOTSUP;
   1e0e6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1e0ea:	e7d6      	b.n	1e09a <configure+0xb6>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   1e0ec:	6801      	ldr	r1, [r0, #0]
   1e0ee:	466d      	mov	r5, sp
   1e0f0:	2300      	movs	r3, #0
   1e0f2:	723b      	strb	r3, [r7, #8]
   1e0f4:	2302      	movs	r3, #2
   1e0f6:	727b      	strb	r3, [r7, #9]
   1e0f8:	b088      	sub	sp, #32
   1e0fa:	466c      	mov	r4, sp
   1e0fc:	f114 0210 	adds.w	r2, r4, #16
   1e100:	d011      	beq.n	1e126 <configure+0x142>
   1e102:	200e      	movs	r0, #14
   1e104:	b11a      	cbz	r2, 1e10e <configure+0x12a>
   1e106:	2804      	cmp	r0, #4
   1e108:	dd01      	ble.n	1e10e <configure+0x12a>
   1e10a:	4b8a      	ldr	r3, [pc, #552]	; (1e334 <configure+0x350>)
   1e10c:	6163      	str	r3, [r4, #20]
   1e10e:	2300      	movs	r3, #0
   1e110:	713b      	strb	r3, [r7, #4]
   1e112:	2302      	movs	r3, #2
   1e114:	717b      	strb	r3, [r7, #5]
   1e116:	b19a      	cbz	r2, 1e140 <configure+0x15c>
   1e118:	2808      	cmp	r0, #8
   1e11a:	dd00      	ble.n	1e11e <configure+0x13a>
   1e11c:	61a1      	str	r1, [r4, #24]
   1e11e:	f104 031c 	add.w	r3, r4, #28
   1e122:	2100      	movs	r1, #0
   1e124:	e00a      	b.n	1e13c <configure+0x158>
   1e126:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1e12a:	e7eb      	b.n	1e104 <configure+0x120>
   1e12c:	f101 0680 	add.w	r6, r1, #128	; 0x80
   1e130:	443e      	add	r6, r7
   1e132:	f816 6c7c 	ldrb.w	r6, [r6, #-124]
   1e136:	f803 6b01 	strb.w	r6, [r3], #1
   1e13a:	3101      	adds	r1, #1
   1e13c:	2901      	cmp	r1, #1
   1e13e:	d9f5      	bls.n	1e12c <configure+0x148>
   1e140:	280d      	cmp	r0, #13
   1e142:	dd26      	ble.n	1e192 <configure+0x1ae>
   1e144:	230e      	movs	r3, #14
   1e146:	b142      	cbz	r2, 1e15a <configure+0x176>
   1e148:	2103      	movs	r1, #3
   1e14a:	7239      	strb	r1, [r7, #8]
   1e14c:	2100      	movs	r1, #0
   1e14e:	7279      	strb	r1, [r7, #9]
   1e150:	72b9      	strb	r1, [r7, #10]
   1e152:	2101      	movs	r1, #1
   1e154:	72f9      	strb	r1, [r7, #11]
   1e156:	68b8      	ldr	r0, [r7, #8]
   1e158:	6120      	str	r0, [r4, #16]
   1e15a:	2100      	movs	r1, #0
   1e15c:	f36f 0100 	bfc	r1, #0, #1
   1e160:	f36f 0141 	bfc	r1, #1, #1
   1e164:	f36f 0182 	bfc	r1, #2, #1
   1e168:	f36f 01c5 	bfc	r1, #3, #3
   1e16c:	2001      	movs	r0, #1
   1e16e:	f360 1188 	bfi	r1, r0, #6, #3
   1e172:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1e176:	f363 2152 	bfi	r1, r3, #9, #10
   1e17a:	f36f 41de 	bfc	r1, #19, #12
   1e17e:	f36f 71df 	bfc	r1, #31, #1
   1e182:	2300      	movs	r3, #0
   1e184:	486a      	ldr	r0, [pc, #424]	; (1e330 <configure+0x34c>)
   1e186:	f007 fb14 	bl	257b2 <z_impl_z_log_msg_static_create>
   1e18a:	46ad      	mov	sp, r5
		return -EINVAL;
   1e18c:	f06f 0015 	mvn.w	r0, #21
   1e190:	e783      	b.n	1e09a <configure+0xb6>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   1e192:	f06f 031b 	mvn.w	r3, #27
   1e196:	e7d6      	b.n	1e146 <configure+0x162>
		LOG_ERR("Loopback mode is not supported");
   1e198:	4b67      	ldr	r3, [pc, #412]	; (1e338 <configure+0x354>)
   1e19a:	667b      	str	r3, [r7, #100]	; 0x64
   1e19c:	2302      	movs	r3, #2
   1e19e:	723b      	strb	r3, [r7, #8]
   1e1a0:	2300      	movs	r3, #0
   1e1a2:	727b      	strb	r3, [r7, #9]
   1e1a4:	72bb      	strb	r3, [r7, #10]
   1e1a6:	72fb      	strb	r3, [r7, #11]
   1e1a8:	68ba      	ldr	r2, [r7, #8]
   1e1aa:	663a      	str	r2, [r7, #96]	; 0x60
   1e1ac:	4619      	mov	r1, r3
   1e1ae:	f363 0100 	bfi	r1, r3, #0, #1
   1e1b2:	f363 0141 	bfi	r1, r3, #1, #1
   1e1b6:	f363 0182 	bfi	r1, r3, #2, #1
   1e1ba:	f363 01c5 	bfi	r1, r3, #3, #3
   1e1be:	2201      	movs	r2, #1
   1e1c0:	f362 1188 	bfi	r1, r2, #6, #3
   1e1c4:	2208      	movs	r2, #8
   1e1c6:	f362 2152 	bfi	r1, r2, #9, #10
   1e1ca:	f363 41de 	bfi	r1, r3, #19, #12
   1e1ce:	f363 71df 	bfi	r1, r3, #31, #1
   1e1d2:	f107 0260 	add.w	r2, r7, #96	; 0x60
   1e1d6:	4856      	ldr	r0, [pc, #344]	; (1e330 <configure+0x34c>)
   1e1d8:	f007 faeb 	bl	257b2 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1e1dc:	f06f 0015 	mvn.w	r0, #21
   1e1e0:	e75b      	b.n	1e09a <configure+0xb6>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1e1e2:	4b56      	ldr	r3, [pc, #344]	; (1e33c <configure+0x358>)
   1e1e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   1e1e6:	2302      	movs	r3, #2
   1e1e8:	723b      	strb	r3, [r7, #8]
   1e1ea:	2300      	movs	r3, #0
   1e1ec:	727b      	strb	r3, [r7, #9]
   1e1ee:	72bb      	strb	r3, [r7, #10]
   1e1f0:	72fb      	strb	r3, [r7, #11]
   1e1f2:	68ba      	ldr	r2, [r7, #8]
   1e1f4:	64ba      	str	r2, [r7, #72]	; 0x48
   1e1f6:	4619      	mov	r1, r3
   1e1f8:	f363 0100 	bfi	r1, r3, #0, #1
   1e1fc:	f363 0141 	bfi	r1, r3, #1, #1
   1e200:	f363 0182 	bfi	r1, r3, #2, #1
   1e204:	f363 01c5 	bfi	r1, r3, #3, #3
   1e208:	2201      	movs	r2, #1
   1e20a:	f362 1188 	bfi	r1, r2, #6, #3
   1e20e:	2208      	movs	r2, #8
   1e210:	f362 2152 	bfi	r1, r2, #9, #10
   1e214:	f363 41de 	bfi	r1, r3, #19, #12
   1e218:	f363 71df 	bfi	r1, r3, #31, #1
   1e21c:	f107 0248 	add.w	r2, r7, #72	; 0x48
   1e220:	4843      	ldr	r0, [pc, #268]	; (1e330 <configure+0x34c>)
   1e222:	f007 fac6 	bl	257b2 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1e226:	f06f 0015 	mvn.w	r0, #21
   1e22a:	e736      	b.n	1e09a <configure+0xb6>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1e22c:	4b44      	ldr	r3, [pc, #272]	; (1e340 <configure+0x35c>)
   1e22e:	637b      	str	r3, [r7, #52]	; 0x34
   1e230:	2302      	movs	r3, #2
   1e232:	723b      	strb	r3, [r7, #8]
   1e234:	2300      	movs	r3, #0
   1e236:	727b      	strb	r3, [r7, #9]
   1e238:	72bb      	strb	r3, [r7, #10]
   1e23a:	72fb      	strb	r3, [r7, #11]
   1e23c:	68ba      	ldr	r2, [r7, #8]
   1e23e:	633a      	str	r2, [r7, #48]	; 0x30
   1e240:	4619      	mov	r1, r3
   1e242:	f363 0100 	bfi	r1, r3, #0, #1
   1e246:	f363 0141 	bfi	r1, r3, #1, #1
   1e24a:	f363 0182 	bfi	r1, r3, #2, #1
   1e24e:	f363 01c5 	bfi	r1, r3, #3, #3
   1e252:	2201      	movs	r2, #1
   1e254:	f362 1188 	bfi	r1, r2, #6, #3
   1e258:	2208      	movs	r2, #8
   1e25a:	f362 2152 	bfi	r1, r2, #9, #10
   1e25e:	f363 41de 	bfi	r1, r3, #19, #12
   1e262:	f363 71df 	bfi	r1, r3, #31, #1
   1e266:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1e26a:	4831      	ldr	r0, [pc, #196]	; (1e330 <configure+0x34c>)
   1e26c:	f007 faa1 	bl	257b2 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1e270:	f06f 0015 	mvn.w	r0, #21
   1e274:	e711      	b.n	1e09a <configure+0xb6>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   1e276:	f013 0f04 	tst.w	r3, #4
   1e27a:	d003      	beq.n	1e284 <configure+0x2a0>
			return NRF_SPI_MODE_1;
   1e27c:	2301      	movs	r3, #1
   1e27e:	e6f0      	b.n	1e062 <configure+0x7e>
			return NRF_SPI_MODE_2;
   1e280:	2302      	movs	r3, #2
   1e282:	e6ee      	b.n	1e062 <configure+0x7e>
			return NRF_SPI_MODE_0;
   1e284:	2300      	movs	r3, #0
   1e286:	e6ec      	b.n	1e062 <configure+0x7e>
		return NRF_SPI_BIT_ORDER_MSB_FIRST;
   1e288:	2300      	movs	r3, #0
   1e28a:	e6f1      	b.n	1e070 <configure+0x8c>
		nrfx_spi_uninit(&dev_config->spi);
   1e28c:	4630      	mov	r0, r6
   1e28e:	f003 fdd5 	bl	21e3c <nrfx_spi_uninit>
		dev_data->initialized = false;
   1e292:	2300      	movs	r3, #0
   1e294:	f885 306d 	strb.w	r3, [r5, #109]	; 0x6d
   1e298:	e6ef      	b.n	1e07a <configure+0x96>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   1e29a:	466d      	mov	r5, sp
   1e29c:	b088      	sub	sp, #32
   1e29e:	466b      	mov	r3, sp
   1e2a0:	f113 0210 	adds.w	r2, r3, #16
   1e2a4:	d00d      	beq.n	1e2c2 <configure+0x2de>
   1e2a6:	210c      	movs	r1, #12
   1e2a8:	b13a      	cbz	r2, 1e2ba <configure+0x2d6>
   1e2aa:	460c      	mov	r4, r1
   1e2ac:	2904      	cmp	r1, #4
   1e2ae:	dd01      	ble.n	1e2b4 <configure+0x2d0>
   1e2b0:	4e24      	ldr	r6, [pc, #144]	; (1e344 <configure+0x360>)
   1e2b2:	615e      	str	r6, [r3, #20]
   1e2b4:	2c08      	cmp	r4, #8
   1e2b6:	dd07      	ble.n	1e2c8 <configure+0x2e4>
   1e2b8:	6198      	str	r0, [r3, #24]
   1e2ba:	290b      	cmp	r1, #11
   1e2bc:	dd2b      	ble.n	1e316 <configure+0x332>
   1e2be:	240c      	movs	r4, #12
   1e2c0:	e004      	b.n	1e2cc <configure+0x2e8>
   1e2c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1e2c6:	e7ef      	b.n	1e2a8 <configure+0x2c4>
   1e2c8:	f06f 041b 	mvn.w	r4, #27
   1e2cc:	b13a      	cbz	r2, 1e2de <configure+0x2fa>
   1e2ce:	2103      	movs	r1, #3
   1e2d0:	7239      	strb	r1, [r7, #8]
   1e2d2:	2100      	movs	r1, #0
   1e2d4:	7279      	strb	r1, [r7, #9]
   1e2d6:	72b9      	strb	r1, [r7, #10]
   1e2d8:	72f9      	strb	r1, [r7, #11]
   1e2da:	68b8      	ldr	r0, [r7, #8]
   1e2dc:	6118      	str	r0, [r3, #16]
   1e2de:	2100      	movs	r1, #0
   1e2e0:	f36f 0100 	bfc	r1, #0, #1
   1e2e4:	f36f 0141 	bfc	r1, #1, #1
   1e2e8:	f36f 0182 	bfc	r1, #2, #1
   1e2ec:	f36f 01c5 	bfc	r1, #3, #3
   1e2f0:	2301      	movs	r3, #1
   1e2f2:	f363 1188 	bfi	r1, r3, #6, #3
   1e2f6:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1e2fa:	f363 2152 	bfi	r1, r3, #9, #10
   1e2fe:	f36f 41de 	bfc	r1, #19, #12
   1e302:	f36f 71df 	bfc	r1, #31, #1
   1e306:	2300      	movs	r3, #0
   1e308:	4809      	ldr	r0, [pc, #36]	; (1e330 <configure+0x34c>)
   1e30a:	f007 fa52 	bl	257b2 <z_impl_z_log_msg_static_create>
   1e30e:	46ad      	mov	sp, r5
		return -EIO;
   1e310:	f06f 0004 	mvn.w	r0, #4
   1e314:	e6c1      	b.n	1e09a <configure+0xb6>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   1e316:	f06f 041b 	mvn.w	r4, #27
   1e31a:	e7d7      	b.n	1e2cc <configure+0x2e8>
		return 0;
   1e31c:	2000      	movs	r0, #0
   1e31e:	e6bc      	b.n	1e09a <configure+0xb6>
   1e320:	0001e847 	.word	0x0001e847
   1e324:	0001e475 	.word	0x0001e475
   1e328:	0bad0000 	.word	0x0bad0000
   1e32c:	0002d2e8 	.word	0x0002d2e8
   1e330:	0002b224 	.word	0x0002b224
   1e334:	0002d304 	.word	0x0002d304
   1e338:	0002d328 	.word	0x0002d328
   1e33c:	0002d348 	.word	0x0002d348
   1e340:	0002d378 	.word	0x0002d378
   1e344:	0002d3ac 	.word	0x0002d3ac

0001e348 <spi_context_wait_for_completion>:
	}
#endif /* CONFIG_SPI_ASYNC */
}

static inline int spi_context_wait_for_completion(struct spi_context *ctx)
{
   1e348:	b530      	push	{r4, r5, lr}
   1e34a:	b089      	sub	sp, #36	; 0x24
   1e34c:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_SPI_SLAVE) && spi_context_is_slave(ctx)) {
		timeout = K_FOREVER;
	} else {
		uint32_t timeout_ms;

		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1e34e:	6e03      	ldr	r3, [r0, #96]	; 0x60
   1e350:	6d82      	ldr	r2, [r0, #88]	; 0x58
   1e352:	4293      	cmp	r3, r2
   1e354:	bf38      	it	cc
   1e356:	4613      	movcc	r3, r2
   1e358:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
   1e35c:	fb02 f303 	mul.w	r3, r2, r3
			     ctx->config->frequency;
   1e360:	4605      	mov	r5, r0
   1e362:	f855 2b28 	ldr.w	r2, [r5], #40
   1e366:	6812      	ldr	r2, [r2, #0]
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1e368:	fbb3 f3f2 	udiv	r3, r3, r2
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   1e36c:	33c8      	adds	r3, #200	; 0xc8
   1e36e:	0c59      	lsrs	r1, r3, #17
   1e370:	03db      	lsls	r3, r3, #15
   1e372:	f240 32e7 	movw	r2, #999	; 0x3e7
   1e376:	1898      	adds	r0, r3, r2
   1e378:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e37c:	f04f 0300 	mov.w	r3, #0
   1e380:	f141 0100 	adc.w	r1, r1, #0
   1e384:	f7e1 febc 	bl	100 <__aeabi_uldivmod>
   1e388:	4602      	mov	r2, r0
   1e38a:	460b      	mov	r3, r1
   1e38c:	4628      	mov	r0, r5
   1e38e:	f004 fc19 	bl	22bc4 <z_impl_k_sem_take>
			return -ETIMEDOUT;
		}
		status = ctx->sync_status;
	}
#else
	if (k_sem_take(&ctx->sync, timeout)) {
   1e392:	b910      	cbnz	r0, 1e39a <spi_context_wait_for_completion+0x52>
		LOG_ERR("Timeout waiting for transfer complete");
		return -ETIMEDOUT;
	}
	status = ctx->sync_status;
   1e394:	6c20      	ldr	r0, [r4, #64]	; 0x40
		return ctx->recv_frames;
	}
#endif /* CONFIG_SPI_SLAVE */

	return status;
}
   1e396:	b009      	add	sp, #36	; 0x24
   1e398:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Timeout waiting for transfer complete");
   1e39a:	4b14      	ldr	r3, [pc, #80]	; (1e3ec <spi_context_wait_for_completion+0xa4>)
   1e39c:	9307      	str	r3, [sp, #28]
   1e39e:	2302      	movs	r3, #2
   1e3a0:	f88d 3004 	strb.w	r3, [sp, #4]
   1e3a4:	2300      	movs	r3, #0
   1e3a6:	f88d 3005 	strb.w	r3, [sp, #5]
   1e3aa:	f88d 3006 	strb.w	r3, [sp, #6]
   1e3ae:	f88d 3007 	strb.w	r3, [sp, #7]
   1e3b2:	9a01      	ldr	r2, [sp, #4]
   1e3b4:	9206      	str	r2, [sp, #24]
   1e3b6:	4619      	mov	r1, r3
   1e3b8:	f363 0100 	bfi	r1, r3, #0, #1
   1e3bc:	f363 0141 	bfi	r1, r3, #1, #1
   1e3c0:	f363 0182 	bfi	r1, r3, #2, #1
   1e3c4:	f363 01c5 	bfi	r1, r3, #3, #3
   1e3c8:	2201      	movs	r2, #1
   1e3ca:	f362 1188 	bfi	r1, r2, #6, #3
   1e3ce:	2208      	movs	r2, #8
   1e3d0:	f362 2152 	bfi	r1, r2, #9, #10
   1e3d4:	f363 41de 	bfi	r1, r3, #19, #12
   1e3d8:	f363 71df 	bfi	r1, r3, #31, #1
   1e3dc:	aa06      	add	r2, sp, #24
   1e3de:	4804      	ldr	r0, [pc, #16]	; (1e3f0 <spi_context_wait_for_completion+0xa8>)
   1e3e0:	f007 f9e7 	bl	257b2 <z_impl_z_log_msg_static_create>
		return -ETIMEDOUT;
   1e3e4:	f06f 0073 	mvn.w	r0, #115	; 0x73
   1e3e8:	e7d5      	b.n	1e396 <spi_context_wait_for_completion+0x4e>
   1e3ea:	bf00      	nop
   1e3ec:	0002d3d4 	.word	0x0002d3d4
   1e3f0:	0002b224 	.word	0x0002b224

0001e3f4 <transfer_next_chunk>:

static void transfer_next_chunk(const struct device *dev)
{
   1e3f4:	b530      	push	{r4, r5, lr}
   1e3f6:	b085      	sub	sp, #20
   1e3f8:	4603      	mov	r3, r0
	const struct spi_nrfx_config *dev_config = dev->config;
   1e3fa:	6840      	ldr	r0, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1e3fc:	691c      	ldr	r4, [r3, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1e3fe:	6da2      	ldr	r2, [r4, #88]	; 0x58
   1e400:	b352      	cbz	r2, 1e458 <transfer_next_chunk+0x64>
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
   1e402:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1e404:	b353      	cbz	r3, 1e45c <transfer_next_chunk+0x68>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   1e406:	4293      	cmp	r3, r2
   1e408:	bf28      	it	cs
   1e40a:	4613      	movcs	r3, r2
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
   1e40c:	b373      	cbz	r3, 1e46c <transfer_next_chunk+0x78>
		nrfx_spi_xfer_desc_t xfer;
		nrfx_err_t result;

		dev_data->chunk_len = chunk_len;
   1e40e:	66a3      	str	r3, [r4, #104]	; 0x68

		xfer.p_tx_buffer = ctx->tx_buf;
   1e410:	6d61      	ldr	r1, [r4, #84]	; 0x54
   1e412:	9100      	str	r1, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
   1e414:	b321      	cbz	r1, 1e460 <transfer_next_chunk+0x6c>
   1e416:	bb2a      	cbnz	r2, 1e464 <transfer_next_chunk+0x70>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1e418:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1e41a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   1e41c:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1e41e:	b31a      	cbz	r2, 1e468 <transfer_next_chunk+0x74>
   1e420:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1e422:	b902      	cbnz	r2, 1e426 <transfer_next_chunk+0x32>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1e424:	4613      	mov	r3, r2
   1e426:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&dev_config->spi, &xfer, 0);
   1e428:	2200      	movs	r2, #0
   1e42a:	4669      	mov	r1, sp
   1e42c:	f003 fd7a 	bl	21f24 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
   1e430:	4b0f      	ldr	r3, [pc, #60]	; (1e470 <transfer_next_chunk+0x7c>)
   1e432:	4298      	cmp	r0, r3
   1e434:	d00e      	beq.n	1e454 <transfer_next_chunk+0x60>
			return;
		}

		error = -EIO;
   1e436:	f06f 0504 	mvn.w	r5, #4
	_spi_context_cs_control(ctx, on, false);
   1e43a:	2200      	movs	r2, #0
   1e43c:	4611      	mov	r1, r2
   1e43e:	4620      	mov	r0, r4
   1e440:	f00a fabe 	bl	289c0 <_spi_context_cs_control>
	ctx->sync_status = status;
   1e444:	6425      	str	r5, [r4, #64]	; 0x40
	k_sem_give(&ctx->sync);
   1e446:	f104 0028 	add.w	r0, r4, #40	; 0x28
	z_impl_k_sem_give(sem);
   1e44a:	f004 fb93 	bl	22b74 <z_impl_k_sem_give>
	spi_context_cs_control(ctx, false);

	LOG_DBG("Transaction finished with status %d", error);

	spi_context_complete(ctx, dev, error);
	dev_data->busy = false;
   1e44e:	2300      	movs	r3, #0
   1e450:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   1e454:	b005      	add	sp, #20
   1e456:	bd30      	pop	{r4, r5, pc}
		return ctx->rx_len;
   1e458:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1e45a:	e7d7      	b.n	1e40c <transfer_next_chunk+0x18>
		return ctx->tx_len;
   1e45c:	4613      	mov	r3, r2
   1e45e:	e7d5      	b.n	1e40c <transfer_next_chunk+0x18>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1e460:	2200      	movs	r2, #0
   1e462:	e7d9      	b.n	1e418 <transfer_next_chunk+0x24>
   1e464:	461a      	mov	r2, r3
   1e466:	e7d7      	b.n	1e418 <transfer_next_chunk+0x24>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1e468:	2300      	movs	r3, #0
   1e46a:	e7dc      	b.n	1e426 <transfer_next_chunk+0x32>
	int error = 0;
   1e46c:	2500      	movs	r5, #0
   1e46e:	e7e4      	b.n	1e43a <transfer_next_chunk+0x46>
   1e470:	0bad0000 	.word	0x0bad0000

0001e474 <event_handler>:

static void event_handler(const nrfx_spi_evt_t *p_event, void *p_context)
{
	struct spi_nrfx_data *dev_data = p_context;

	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   1e474:	7803      	ldrb	r3, [r0, #0]
   1e476:	2b00      	cmp	r3, #0
   1e478:	f040 808f 	bne.w	1e59a <event_handler+0x126>
{
   1e47c:	b510      	push	{r4, lr}
   1e47e:	b08e      	sub	sp, #56	; 0x38
   1e480:	460c      	mov	r4, r1
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1e482:	6e8a      	ldr	r2, [r1, #104]	; 0x68
	if (!ctx->tx_len) {
   1e484:	6d8b      	ldr	r3, [r1, #88]	; 0x58
   1e486:	b14b      	cbz	r3, 1e49c <event_handler+0x28>
	if (len > ctx->tx_len) {
   1e488:	429a      	cmp	r2, r3
   1e48a:	d819      	bhi.n	1e4c0 <event_handler+0x4c>
	ctx->tx_len -= len;
   1e48c:	1a9b      	subs	r3, r3, r2
   1e48e:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
   1e490:	2b00      	cmp	r3, #0
   1e492:	d03b      	beq.n	1e50c <event_handler+0x98>
	} else if (ctx->tx_buf) {
   1e494:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   1e496:	b10b      	cbz	r3, 1e49c <event_handler+0x28>
		ctx->tx_buf += dfs * len;
   1e498:	4413      	add	r3, r2
   1e49a:	654b      	str	r3, [r1, #84]	; 0x54
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1e49c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
	if (!ctx->rx_len) {
   1e49e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1e4a0:	b14b      	cbz	r3, 1e4b6 <event_handler+0x42>
	if (len > ctx->rx_len) {
   1e4a2:	429a      	cmp	r2, r3
   1e4a4:	d842      	bhi.n	1e52c <event_handler+0xb8>
	ctx->rx_len -= len;
   1e4a6:	1a9b      	subs	r3, r3, r2
   1e4a8:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   1e4aa:	2b00      	cmp	r3, #0
   1e4ac:	d064      	beq.n	1e578 <event_handler+0x104>
	} else if (ctx->rx_buf) {
   1e4ae:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1e4b0:	b10b      	cbz	r3, 1e4b6 <event_handler+0x42>
		ctx->rx_buf += dfs * len;
   1e4b2:	4413      	add	r3, r2
   1e4b4:	65e3      	str	r3, [r4, #92]	; 0x5c

		transfer_next_chunk(dev_data->dev);
   1e4b6:	6e60      	ldr	r0, [r4, #100]	; 0x64
   1e4b8:	f7ff ff9c 	bl	1e3f4 <transfer_next_chunk>
	}
}
   1e4bc:	b00e      	add	sp, #56	; 0x38
   1e4be:	bd10      	pop	{r4, pc}
		LOG_ERR("Update exceeds current buffer");
   1e4c0:	4b36      	ldr	r3, [pc, #216]	; (1e59c <event_handler+0x128>)
   1e4c2:	930d      	str	r3, [sp, #52]	; 0x34
   1e4c4:	2302      	movs	r3, #2
   1e4c6:	f88d 3004 	strb.w	r3, [sp, #4]
   1e4ca:	2300      	movs	r3, #0
   1e4cc:	f88d 3005 	strb.w	r3, [sp, #5]
   1e4d0:	f88d 3006 	strb.w	r3, [sp, #6]
   1e4d4:	f88d 3007 	strb.w	r3, [sp, #7]
   1e4d8:	9a01      	ldr	r2, [sp, #4]
   1e4da:	920c      	str	r2, [sp, #48]	; 0x30
   1e4dc:	4619      	mov	r1, r3
   1e4de:	f363 0100 	bfi	r1, r3, #0, #1
   1e4e2:	f363 0141 	bfi	r1, r3, #1, #1
   1e4e6:	f363 0182 	bfi	r1, r3, #2, #1
   1e4ea:	f363 01c5 	bfi	r1, r3, #3, #3
   1e4ee:	2201      	movs	r2, #1
   1e4f0:	f362 1188 	bfi	r1, r2, #6, #3
   1e4f4:	2208      	movs	r2, #8
   1e4f6:	f362 2152 	bfi	r1, r2, #9, #10
   1e4fa:	f363 41de 	bfi	r1, r3, #19, #12
   1e4fe:	f363 71df 	bfi	r1, r3, #31, #1
   1e502:	aa0c      	add	r2, sp, #48	; 0x30
   1e504:	4826      	ldr	r0, [pc, #152]	; (1e5a0 <event_handler+0x12c>)
   1e506:	f007 f954 	bl	257b2 <z_impl_z_log_msg_static_create>
		return;
   1e50a:	e7c7      	b.n	1e49c <event_handler+0x28>
		++ctx->current_tx;
   1e50c:	6c4b      	ldr	r3, [r1, #68]	; 0x44
   1e50e:	3308      	adds	r3, #8
   1e510:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
   1e512:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   1e514:	3b01      	subs	r3, #1
   1e516:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1e518:	2301      	movs	r3, #1
   1e51a:	f101 0258 	add.w	r2, r1, #88	; 0x58
   1e51e:	3148      	adds	r1, #72	; 0x48
   1e520:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1e524:	f00a fa05 	bl	28932 <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
   1e528:	6560      	str	r0, [r4, #84]	; 0x54
   1e52a:	e7b7      	b.n	1e49c <event_handler+0x28>
		LOG_ERR("Update exceeds current buffer");
   1e52c:	4b1b      	ldr	r3, [pc, #108]	; (1e59c <event_handler+0x128>)
   1e52e:	9307      	str	r3, [sp, #28]
   1e530:	2302      	movs	r3, #2
   1e532:	f88d 3004 	strb.w	r3, [sp, #4]
   1e536:	2300      	movs	r3, #0
   1e538:	f88d 3005 	strb.w	r3, [sp, #5]
   1e53c:	f88d 3006 	strb.w	r3, [sp, #6]
   1e540:	f88d 3007 	strb.w	r3, [sp, #7]
   1e544:	9a01      	ldr	r2, [sp, #4]
   1e546:	9206      	str	r2, [sp, #24]
   1e548:	4619      	mov	r1, r3
   1e54a:	f363 0100 	bfi	r1, r3, #0, #1
   1e54e:	f363 0141 	bfi	r1, r3, #1, #1
   1e552:	f363 0182 	bfi	r1, r3, #2, #1
   1e556:	f363 01c5 	bfi	r1, r3, #3, #3
   1e55a:	2201      	movs	r2, #1
   1e55c:	f362 1188 	bfi	r1, r2, #6, #3
   1e560:	2208      	movs	r2, #8
   1e562:	f362 2152 	bfi	r1, r2, #9, #10
   1e566:	f363 41de 	bfi	r1, r3, #19, #12
   1e56a:	f363 71df 	bfi	r1, r3, #31, #1
   1e56e:	aa06      	add	r2, sp, #24
   1e570:	480b      	ldr	r0, [pc, #44]	; (1e5a0 <event_handler+0x12c>)
   1e572:	f007 f91e 	bl	257b2 <z_impl_z_log_msg_static_create>
		return;
   1e576:	e79e      	b.n	1e4b6 <event_handler+0x42>
		++ctx->current_rx;
   1e578:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1e57a:	3308      	adds	r3, #8
   1e57c:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   1e57e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1e580:	3b01      	subs	r3, #1
   1e582:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1e584:	2301      	movs	r3, #1
   1e586:	f104 0260 	add.w	r2, r4, #96	; 0x60
   1e58a:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1e58e:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1e592:	f00a f9ce 	bl	28932 <spi_context_get_next_buf>
		ctx->rx_buf = (uint8_t *)
   1e596:	65e0      	str	r0, [r4, #92]	; 0x5c
   1e598:	e78d      	b.n	1e4b6 <event_handler+0x42>
   1e59a:	4770      	bx	lr
   1e59c:	0002d3fc 	.word	0x0002d3fc
   1e5a0:	0002b224 	.word	0x0002b224

0001e5a4 <spi_context_cs_configure_all>:
{
   1e5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e5a6:	b083      	sub	sp, #12
   1e5a8:	af00      	add	r7, sp, #0
   1e5aa:	4605      	mov	r5, r0
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1e5ac:	6884      	ldr	r4, [r0, #8]
   1e5ae:	e05d      	b.n	1e66c <spi_context_cs_configure_all+0xc8>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   1e5b0:	6823      	ldr	r3, [r4, #0]
   1e5b2:	681e      	ldr	r6, [r3, #0]
   1e5b4:	7921      	ldrb	r1, [r4, #4]
   1e5b6:	466d      	mov	r5, sp
   1e5b8:	2300      	movs	r3, #0
   1e5ba:	713b      	strb	r3, [r7, #4]
   1e5bc:	2302      	movs	r3, #2
   1e5be:	717b      	strb	r3, [r7, #5]
   1e5c0:	b08a      	sub	sp, #40	; 0x28
   1e5c2:	466c      	mov	r4, sp
   1e5c4:	f114 0210 	adds.w	r2, r4, #16
   1e5c8:	d015      	beq.n	1e5f6 <spi_context_cs_configure_all+0x52>
   1e5ca:	2012      	movs	r0, #18
   1e5cc:	b11a      	cbz	r2, 1e5d6 <spi_context_cs_configure_all+0x32>
   1e5ce:	2804      	cmp	r0, #4
   1e5d0:	dd01      	ble.n	1e5d6 <spi_context_cs_configure_all+0x32>
   1e5d2:	4b32      	ldr	r3, [pc, #200]	; (1e69c <spi_context_cs_configure_all+0xf8>)
   1e5d4:	6163      	str	r3, [r4, #20]
   1e5d6:	2300      	movs	r3, #0
   1e5d8:	703b      	strb	r3, [r7, #0]
   1e5da:	2302      	movs	r3, #2
   1e5dc:	707b      	strb	r3, [r7, #1]
   1e5de:	b1c2      	cbz	r2, 1e612 <spi_context_cs_configure_all+0x6e>
   1e5e0:	4603      	mov	r3, r0
   1e5e2:	2808      	cmp	r0, #8
   1e5e4:	dd00      	ble.n	1e5e8 <spi_context_cs_configure_all+0x44>
   1e5e6:	61a6      	str	r6, [r4, #24]
   1e5e8:	2b0c      	cmp	r3, #12
   1e5ea:	dd00      	ble.n	1e5ee <spi_context_cs_configure_all+0x4a>
   1e5ec:	61e1      	str	r1, [r4, #28]
   1e5ee:	f104 0320 	add.w	r3, r4, #32
   1e5f2:	2100      	movs	r1, #0
   1e5f4:	e00b      	b.n	1e60e <spi_context_cs_configure_all+0x6a>
   1e5f6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1e5fa:	e7e7      	b.n	1e5cc <spi_context_cs_configure_all+0x28>
   1e5fc:	f101 0608 	add.w	r6, r1, #8
   1e600:	eb06 0c07 	add.w	ip, r6, r7
   1e604:	f81c cc08 	ldrb.w	ip, [ip, #-8]
   1e608:	f803 cb01 	strb.w	ip, [r3], #1
   1e60c:	3101      	adds	r1, #1
   1e60e:	2901      	cmp	r1, #1
   1e610:	d9f4      	bls.n	1e5fc <spi_context_cs_configure_all+0x58>
   1e612:	2811      	cmp	r0, #17
   1e614:	dd26      	ble.n	1e664 <spi_context_cs_configure_all+0xc0>
   1e616:	2312      	movs	r3, #18
   1e618:	b142      	cbz	r2, 1e62c <spi_context_cs_configure_all+0x88>
   1e61a:	2104      	movs	r1, #4
   1e61c:	7139      	strb	r1, [r7, #4]
   1e61e:	2100      	movs	r1, #0
   1e620:	7179      	strb	r1, [r7, #5]
   1e622:	71b9      	strb	r1, [r7, #6]
   1e624:	2101      	movs	r1, #1
   1e626:	71f9      	strb	r1, [r7, #7]
   1e628:	6878      	ldr	r0, [r7, #4]
   1e62a:	6120      	str	r0, [r4, #16]
   1e62c:	2100      	movs	r1, #0
   1e62e:	f36f 0100 	bfc	r1, #0, #1
   1e632:	f36f 0141 	bfc	r1, #1, #1
   1e636:	f36f 0182 	bfc	r1, #2, #1
   1e63a:	f36f 01c5 	bfc	r1, #3, #3
   1e63e:	2001      	movs	r0, #1
   1e640:	f360 1188 	bfi	r1, r0, #6, #3
   1e644:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1e648:	f363 2152 	bfi	r1, r3, #9, #10
   1e64c:	f36f 41de 	bfc	r1, #19, #12
   1e650:	f36f 71df 	bfc	r1, #31, #1
   1e654:	2300      	movs	r3, #0
   1e656:	4812      	ldr	r0, [pc, #72]	; (1e6a0 <spi_context_cs_configure_all+0xfc>)
   1e658:	f007 f8ab 	bl	257b2 <z_impl_z_log_msg_static_create>
   1e65c:	46ad      	mov	sp, r5
			return -ENODEV;
   1e65e:	f06f 0012 	mvn.w	r0, #18
   1e662:	e017      	b.n	1e694 <spi_context_cs_configure_all+0xf0>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   1e664:	f06f 031b 	mvn.w	r3, #27
   1e668:	e7d6      	b.n	1e618 <spi_context_cs_configure_all+0x74>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1e66a:	3408      	adds	r4, #8
   1e66c:	68ab      	ldr	r3, [r5, #8]
   1e66e:	68ea      	ldr	r2, [r5, #12]
   1e670:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1e674:	429c      	cmp	r4, r3
   1e676:	d20c      	bcs.n	1e692 <spi_context_cs_configure_all+0xee>
		if (!device_is_ready(cs_gpio->port)) {
   1e678:	6820      	ldr	r0, [r4, #0]
   1e67a:	f00b fbdc 	bl	29e36 <z_device_is_ready>
   1e67e:	2800      	cmp	r0, #0
   1e680:	d096      	beq.n	1e5b0 <spi_context_cs_configure_all+0xc>
		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
   1e682:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
   1e686:	4620      	mov	r0, r4
   1e688:	f00a f92b 	bl	288e2 <gpio_pin_configure_dt>
		if (ret < 0) {
   1e68c:	2800      	cmp	r0, #0
   1e68e:	daec      	bge.n	1e66a <spi_context_cs_configure_all+0xc6>
   1e690:	e000      	b.n	1e694 <spi_context_cs_configure_all+0xf0>
	return 0;
   1e692:	2000      	movs	r0, #0
}
   1e694:	370c      	adds	r7, #12
   1e696:	46bd      	mov	sp, r7
   1e698:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e69a:	bf00      	nop
   1e69c:	0002d41c 	.word	0x0002d41c
   1e6a0:	0002b224 	.word	0x0002b224

0001e6a4 <update_sampling_pnt>:
}

static int update_sampling_pnt(uint32_t ts, uint32_t sp, struct can_timing *res,
			       const struct can_timing *max,
			       const struct can_timing *min)
{
   1e6a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e6a8:	9f07      	ldr	r7, [sp, #28]
	uint16_t ts1_max = max->phase_seg1 + max->prop_seg;
   1e6aa:	f8b3 c004 	ldrh.w	ip, [r3, #4]
   1e6ae:	f8b3 8002 	ldrh.w	r8, [r3, #2]
   1e6b2:	44c4      	add	ip, r8
   1e6b4:	fa1f fc8c 	uxth.w	ip, ip
	uint16_t ts1_min = min->phase_seg1 + min->prop_seg;
   1e6b8:	88bd      	ldrh	r5, [r7, #4]
   1e6ba:	887c      	ldrh	r4, [r7, #2]
   1e6bc:	4425      	add	r5, r4
   1e6be:	b2ad      	uxth	r5, r5
	uint32_t sp_calc;
	uint16_t ts1, ts2;

	ts2 = ts - (ts * sp) / 1000;
   1e6c0:	b286      	uxth	r6, r0
   1e6c2:	fb01 fe00 	mul.w	lr, r1, r0
   1e6c6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 1e76c <update_sampling_pnt+0xc8>
   1e6ca:	fba9 9e0e 	umull	r9, lr, r9, lr
   1e6ce:	f3ce 1e8f 	ubfx	lr, lr, #6, #16
   1e6d2:	eba6 0e0e 	sub.w	lr, r6, lr
   1e6d6:	fa1f fe8e 	uxth.w	lr, lr
	ts2 = CLAMP(ts2, min->phase_seg2, max->phase_seg2);
   1e6da:	f8b7 9006 	ldrh.w	r9, [r7, #6]
   1e6de:	45f1      	cmp	r9, lr
   1e6e0:	d22f      	bcs.n	1e742 <update_sampling_pnt+0x9e>
   1e6e2:	88df      	ldrh	r7, [r3, #6]
   1e6e4:	45be      	cmp	lr, r7
   1e6e6:	bf28      	it	cs
   1e6e8:	46be      	movcs	lr, r7
	ts1 = ts - CAN_SYNC_SEG - ts2;
   1e6ea:	eba6 070e 	sub.w	r7, r6, lr
   1e6ee:	b2bf      	uxth	r7, r7
   1e6f0:	3f01      	subs	r7, #1
   1e6f2:	b2bf      	uxth	r7, r7

	if (ts1 > ts1_max) {
   1e6f4:	45bc      	cmp	ip, r7
   1e6f6:	d226      	bcs.n	1e746 <update_sampling_pnt+0xa2>
		ts1 = ts1_max;
		ts2 = ts - CAN_SYNC_SEG - ts1;
   1e6f8:	eba6 0e0c 	sub.w	lr, r6, ip
   1e6fc:	fa1f fe8e 	uxth.w	lr, lr
   1e700:	f10e 3eff 	add.w	lr, lr, #4294967295
   1e704:	fa1f fe8e 	uxth.w	lr, lr
		if (ts2 > max->phase_seg2) {
   1e708:	88db      	ldrh	r3, [r3, #6]
   1e70a:	4573      	cmp	r3, lr
   1e70c:	d328      	bcc.n	1e760 <update_sampling_pnt+0xbc>
		if (ts2 < min->phase_seg2) {
			return -1;
		}
	}

	res->prop_seg = CLAMP(ts1 / 2, min->prop_seg, max->prop_seg);
   1e70e:	ea4f 035c 	mov.w	r3, ip, lsr #1
   1e712:	ebb4 0f5c 	cmp.w	r4, ip, lsr #1
   1e716:	d203      	bcs.n	1e720 <update_sampling_pnt+0x7c>
   1e718:	4644      	mov	r4, r8
   1e71a:	4598      	cmp	r8, r3
   1e71c:	bf28      	it	cs
   1e71e:	461c      	movcs	r4, r3
   1e720:	8054      	strh	r4, [r2, #2]
	res->phase_seg1 = ts1 - res->prop_seg;
   1e722:	ebac 0404 	sub.w	r4, ip, r4
   1e726:	8094      	strh	r4, [r2, #4]
	res->phase_seg2 = ts2;
   1e728:	f8a2 e006 	strh.w	lr, [r2, #6]

	sp_calc = (CAN_SYNC_SEG + ts1) * 1000 / ts;
   1e72c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1e730:	fb0c 3303 	mla	r3, ip, r3, r3
   1e734:	fbb3 f0f0 	udiv	r0, r3, r0

	return sp_calc > sp ? sp_calc - sp : sp - sp_calc;
   1e738:	4281      	cmp	r1, r0
   1e73a:	d20f      	bcs.n	1e75c <update_sampling_pnt+0xb8>
   1e73c:	1a40      	subs	r0, r0, r1
}
   1e73e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ts2 = CLAMP(ts2, min->phase_seg2, max->phase_seg2);
   1e742:	46ce      	mov	lr, r9
   1e744:	e7d1      	b.n	1e6ea <update_sampling_pnt+0x46>
	} else if (ts1 < ts1_min) {
   1e746:	42bd      	cmp	r5, r7
   1e748:	d906      	bls.n	1e758 <update_sampling_pnt+0xb4>
		ts2 = ts - ts1;
   1e74a:	1b76      	subs	r6, r6, r5
   1e74c:	fa1f fe86 	uxth.w	lr, r6
		if (ts2 < min->phase_seg2) {
   1e750:	45f1      	cmp	r9, lr
   1e752:	d808      	bhi.n	1e766 <update_sampling_pnt+0xc2>
		ts1 = ts1_min;
   1e754:	46ac      	mov	ip, r5
   1e756:	e7da      	b.n	1e70e <update_sampling_pnt+0x6a>
	ts1 = ts - CAN_SYNC_SEG - ts2;
   1e758:	46bc      	mov	ip, r7
   1e75a:	e7d8      	b.n	1e70e <update_sampling_pnt+0x6a>
	return sp_calc > sp ? sp_calc - sp : sp - sp_calc;
   1e75c:	1a08      	subs	r0, r1, r0
   1e75e:	e7ee      	b.n	1e73e <update_sampling_pnt+0x9a>
			return -1;
   1e760:	f04f 30ff 	mov.w	r0, #4294967295
   1e764:	e7eb      	b.n	1e73e <update_sampling_pnt+0x9a>
			return -1;
   1e766:	f04f 30ff 	mov.w	r0, #4294967295
   1e76a:	e7e8      	b.n	1e73e <update_sampling_pnt+0x9a>
   1e76c:	10624dd3 	.word	0x10624dd3

0001e770 <z_impl_can_calc_timing>:
	return sp_err_min == UINT16_MAX ? -ENOTSUP : (int)sp_err_min;
}

int z_impl_can_calc_timing(const struct device *dev, struct can_timing *res,
			   uint32_t bitrate, uint16_t sample_pnt)
{
   1e770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e774:	b084      	sub	sp, #16
   1e776:	4698      	mov	r8, r3
 */
__syscall const struct can_timing *can_get_timing_min(const struct device *dev);

static inline const struct can_timing *z_impl_can_get_timing_min(const struct device *dev)
{
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
   1e778:	6886      	ldr	r6, [r0, #8]
 */
__syscall const struct can_timing *can_get_timing_max(const struct device *dev);

static inline const struct can_timing *z_impl_can_get_timing_max(const struct device *dev)
{
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
   1e77a:	6887      	ldr	r7, [r0, #8]
	const struct can_timing *min = can_get_timing_min(dev);
	const struct can_timing *max = can_get_timing_max(dev);
	uint32_t core_clock;
	int ret;

	if (bitrate > 1000000) {
   1e77c:	4b0d      	ldr	r3, [pc, #52]	; (1e7b4 <z_impl_can_calc_timing+0x44>)
   1e77e:	429a      	cmp	r2, r3
   1e780:	d815      	bhi.n	1e7ae <z_impl_can_calc_timing+0x3e>
   1e782:	460d      	mov	r5, r1
   1e784:	4614      	mov	r4, r2
   1e786:	3634      	adds	r6, #52	; 0x34
   1e788:	373e      	adds	r7, #62	; 0x3e
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
   1e78a:	6883      	ldr	r3, [r0, #8]
	return api->get_core_clock(dev, rate);
   1e78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1e78e:	a903      	add	r1, sp, #12
   1e790:	4798      	blx	r3
		return -EINVAL;
	}

	ret = can_get_core_clock(dev, &core_clock);
	if (ret != 0) {
   1e792:	b110      	cbz	r0, 1e79a <z_impl_can_calc_timing+0x2a>
		return ret;
	}

	return can_calc_timing_int(core_clock, res, min, max, bitrate, sample_pnt);
}
   1e794:	b004      	add	sp, #16
   1e796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return can_calc_timing_int(core_clock, res, min, max, bitrate, sample_pnt);
   1e79a:	f8cd 8004 	str.w	r8, [sp, #4]
   1e79e:	9400      	str	r4, [sp, #0]
   1e7a0:	463b      	mov	r3, r7
   1e7a2:	4632      	mov	r2, r6
   1e7a4:	4629      	mov	r1, r5
   1e7a6:	9803      	ldr	r0, [sp, #12]
   1e7a8:	f00a f9db 	bl	28b62 <can_calc_timing_int>
   1e7ac:	e7f2      	b.n	1e794 <z_impl_can_calc_timing+0x24>
		return -EINVAL;
   1e7ae:	f06f 0015 	mvn.w	r0, #21
   1e7b2:	e7ef      	b.n	1e794 <z_impl_can_calc_timing+0x24>
   1e7b4:	000f4240 	.word	0x000f4240

0001e7b8 <mcp2515_get_state>:
	mcp2515_rx_filter(dev, &frame);
}

static int mcp2515_get_state(const struct device *dev, enum can_state *state,
			     struct can_bus_err_cnt *err_cnt)
{
   1e7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e7bc:	b082      	sub	sp, #8
   1e7be:	af00      	add	r7, sp, #0
   1e7c0:	4606      	mov	r6, r0
   1e7c2:	460d      	mov	r5, r1
   1e7c4:	4614      	mov	r4, r2
	struct mcp2515_data *dev_data = dev->data;
   1e7c6:	f8d0 8010 	ldr.w	r8, [r0, #16]
	uint8_t eflg;
	uint8_t err_cnt_buf[2];
	int ret;

	ret = mcp2515_cmd_read_reg(dev, MCP2515_ADDR_EFLG, &eflg, sizeof(eflg));
   1e7ca:	2301      	movs	r3, #1
   1e7cc:	1dfa      	adds	r2, r7, #7
   1e7ce:	212d      	movs	r1, #45	; 0x2d
   1e7d0:	f00a fb5a 	bl	28e88 <mcp2515_cmd_read_reg>
	if (ret < 0) {
   1e7d4:	2800      	cmp	r0, #0
   1e7d6:	db1a      	blt.n	1e80e <mcp2515_get_state+0x56>
		LOG_ERR("Failed to read error register [%d]", ret);
		return -EIO;
	}

	if (state != NULL) {
   1e7d8:	b12d      	cbz	r5, 1e7e6 <mcp2515_get_state+0x2e>
		if (!dev_data->started) {
   1e7da:	f898 317a 	ldrb.w	r3, [r8, #378]	; 0x17a
   1e7de:	2b00      	cmp	r3, #0
   1e7e0:	d153      	bne.n	1e88a <mcp2515_get_state+0xd2>
			*state = CAN_STATE_STOPPED;
   1e7e2:	2304      	movs	r3, #4
   1e7e4:	702b      	strb	r3, [r5, #0]
		} else {
			*state = CAN_STATE_ERROR_ACTIVE;
		}
	}

	if (err_cnt != NULL) {
   1e7e6:	2c00      	cmp	r4, #0
   1e7e8:	f000 80a3 	beq.w	1e932 <mcp2515_get_state+0x17a>
		ret = mcp2515_cmd_read_reg(dev, MCP2515_ADDR_TEC, err_cnt_buf,
   1e7ec:	2302      	movs	r3, #2
   1e7ee:	1d3a      	adds	r2, r7, #4
   1e7f0:	211c      	movs	r1, #28
   1e7f2:	4630      	mov	r0, r6
   1e7f4:	f00a fb48 	bl	28e88 <mcp2515_cmd_read_reg>
					   sizeof(err_cnt_buf));
		if (ret < 0) {
   1e7f8:	2800      	cmp	r0, #0
   1e7fa:	db5c      	blt.n	1e8b6 <mcp2515_get_state+0xfe>
			LOG_ERR("Failed to read error counters [%d]", ret);
			return -EIO;
		}

		err_cnt->tx_err_cnt = err_cnt_buf[0];
   1e7fc:	793b      	ldrb	r3, [r7, #4]
   1e7fe:	7023      	strb	r3, [r4, #0]
		err_cnt->rx_err_cnt = err_cnt_buf[1];
   1e800:	797b      	ldrb	r3, [r7, #5]
   1e802:	7063      	strb	r3, [r4, #1]
	}

	return 0;
   1e804:	2000      	movs	r0, #0
}
   1e806:	3708      	adds	r7, #8
   1e808:	46bd      	mov	sp, r7
   1e80a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Failed to read error register [%d]", ret);
   1e80e:	466d      	mov	r5, sp
   1e810:	b088      	sub	sp, #32
   1e812:	466b      	mov	r3, sp
   1e814:	f113 0210 	adds.w	r2, r3, #16
   1e818:	d031      	beq.n	1e87e <mcp2515_get_state+0xc6>
   1e81a:	210c      	movs	r1, #12
   1e81c:	b13a      	cbz	r2, 1e82e <mcp2515_get_state+0x76>
   1e81e:	460c      	mov	r4, r1
   1e820:	2904      	cmp	r1, #4
   1e822:	dd01      	ble.n	1e828 <mcp2515_get_state+0x70>
   1e824:	4e44      	ldr	r6, [pc, #272]	; (1e938 <mcp2515_get_state+0x180>)
   1e826:	615e      	str	r6, [r3, #20]
   1e828:	2c08      	cmp	r4, #8
   1e82a:	dd00      	ble.n	1e82e <mcp2515_get_state+0x76>
   1e82c:	6198      	str	r0, [r3, #24]
   1e82e:	290b      	cmp	r1, #11
   1e830:	dd28      	ble.n	1e884 <mcp2515_get_state+0xcc>
   1e832:	240c      	movs	r4, #12
   1e834:	b13a      	cbz	r2, 1e846 <mcp2515_get_state+0x8e>
   1e836:	2103      	movs	r1, #3
   1e838:	7039      	strb	r1, [r7, #0]
   1e83a:	2100      	movs	r1, #0
   1e83c:	7079      	strb	r1, [r7, #1]
   1e83e:	70b9      	strb	r1, [r7, #2]
   1e840:	70f9      	strb	r1, [r7, #3]
   1e842:	6838      	ldr	r0, [r7, #0]
   1e844:	6118      	str	r0, [r3, #16]
   1e846:	2100      	movs	r1, #0
   1e848:	f36f 0100 	bfc	r1, #0, #1
   1e84c:	f36f 0141 	bfc	r1, #1, #1
   1e850:	f36f 0182 	bfc	r1, #2, #1
   1e854:	f36f 01c5 	bfc	r1, #3, #3
   1e858:	2301      	movs	r3, #1
   1e85a:	f363 1188 	bfi	r1, r3, #6, #3
   1e85e:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1e862:	f363 2152 	bfi	r1, r3, #9, #10
   1e866:	f36f 41de 	bfc	r1, #19, #12
   1e86a:	f36f 71df 	bfc	r1, #31, #1
   1e86e:	2300      	movs	r3, #0
   1e870:	4832      	ldr	r0, [pc, #200]	; (1e93c <mcp2515_get_state+0x184>)
   1e872:	f006 ff9e 	bl	257b2 <z_impl_z_log_msg_static_create>
   1e876:	46ad      	mov	sp, r5
		return -EIO;
   1e878:	f06f 0004 	mvn.w	r0, #4
   1e87c:	e7c3      	b.n	1e806 <mcp2515_get_state+0x4e>
		LOG_ERR("Failed to read error register [%d]", ret);
   1e87e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1e882:	e7cb      	b.n	1e81c <mcp2515_get_state+0x64>
   1e884:	f06f 041b 	mvn.w	r4, #27
   1e888:	e7d4      	b.n	1e834 <mcp2515_get_state+0x7c>
		} else if (eflg & MCP2515_EFLG_TXBO) {
   1e88a:	79fb      	ldrb	r3, [r7, #7]
   1e88c:	f013 0f20 	tst.w	r3, #32
   1e890:	d002      	beq.n	1e898 <mcp2515_get_state+0xe0>
			*state = CAN_STATE_BUS_OFF;
   1e892:	2303      	movs	r3, #3
   1e894:	702b      	strb	r3, [r5, #0]
   1e896:	e7a6      	b.n	1e7e6 <mcp2515_get_state+0x2e>
		} else if ((eflg & MCP2515_EFLG_RXEP) || (eflg & MCP2515_EFLG_TXEP)) {
   1e898:	f013 0f18 	tst.w	r3, #24
   1e89c:	d002      	beq.n	1e8a4 <mcp2515_get_state+0xec>
			*state = CAN_STATE_ERROR_PASSIVE;
   1e89e:	2302      	movs	r3, #2
   1e8a0:	702b      	strb	r3, [r5, #0]
   1e8a2:	e7a0      	b.n	1e7e6 <mcp2515_get_state+0x2e>
		} else if (eflg & MCP2515_EFLG_EWARN) {
   1e8a4:	f013 0f01 	tst.w	r3, #1
   1e8a8:	d002      	beq.n	1e8b0 <mcp2515_get_state+0xf8>
			*state = CAN_STATE_ERROR_WARNING;
   1e8aa:	2301      	movs	r3, #1
   1e8ac:	702b      	strb	r3, [r5, #0]
   1e8ae:	e79a      	b.n	1e7e6 <mcp2515_get_state+0x2e>
			*state = CAN_STATE_ERROR_ACTIVE;
   1e8b0:	2300      	movs	r3, #0
   1e8b2:	702b      	strb	r3, [r5, #0]
   1e8b4:	e797      	b.n	1e7e6 <mcp2515_get_state+0x2e>
			LOG_ERR("Failed to read error counters [%d]", ret);
   1e8b6:	466d      	mov	r5, sp
   1e8b8:	b088      	sub	sp, #32
   1e8ba:	466b      	mov	r3, sp
   1e8bc:	f113 0210 	adds.w	r2, r3, #16
   1e8c0:	d031      	beq.n	1e926 <mcp2515_get_state+0x16e>
   1e8c2:	210c      	movs	r1, #12
   1e8c4:	b13a      	cbz	r2, 1e8d6 <mcp2515_get_state+0x11e>
   1e8c6:	460c      	mov	r4, r1
   1e8c8:	2904      	cmp	r1, #4
   1e8ca:	dd01      	ble.n	1e8d0 <mcp2515_get_state+0x118>
   1e8cc:	4e1c      	ldr	r6, [pc, #112]	; (1e940 <mcp2515_get_state+0x188>)
   1e8ce:	615e      	str	r6, [r3, #20]
   1e8d0:	2c08      	cmp	r4, #8
   1e8d2:	dd00      	ble.n	1e8d6 <mcp2515_get_state+0x11e>
   1e8d4:	6198      	str	r0, [r3, #24]
   1e8d6:	290b      	cmp	r1, #11
   1e8d8:	dd28      	ble.n	1e92c <mcp2515_get_state+0x174>
   1e8da:	240c      	movs	r4, #12
   1e8dc:	b13a      	cbz	r2, 1e8ee <mcp2515_get_state+0x136>
   1e8de:	2103      	movs	r1, #3
   1e8e0:	7039      	strb	r1, [r7, #0]
   1e8e2:	2100      	movs	r1, #0
   1e8e4:	7079      	strb	r1, [r7, #1]
   1e8e6:	70b9      	strb	r1, [r7, #2]
   1e8e8:	70f9      	strb	r1, [r7, #3]
   1e8ea:	6838      	ldr	r0, [r7, #0]
   1e8ec:	6118      	str	r0, [r3, #16]
   1e8ee:	2100      	movs	r1, #0
   1e8f0:	f36f 0100 	bfc	r1, #0, #1
   1e8f4:	f36f 0141 	bfc	r1, #1, #1
   1e8f8:	f36f 0182 	bfc	r1, #2, #1
   1e8fc:	f36f 01c5 	bfc	r1, #3, #3
   1e900:	2301      	movs	r3, #1
   1e902:	f363 1188 	bfi	r1, r3, #6, #3
   1e906:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1e90a:	f363 2152 	bfi	r1, r3, #9, #10
   1e90e:	f36f 41de 	bfc	r1, #19, #12
   1e912:	f36f 71df 	bfc	r1, #31, #1
   1e916:	2300      	movs	r3, #0
   1e918:	4808      	ldr	r0, [pc, #32]	; (1e93c <mcp2515_get_state+0x184>)
   1e91a:	f006 ff4a 	bl	257b2 <z_impl_z_log_msg_static_create>
   1e91e:	46ad      	mov	sp, r5
			return -EIO;
   1e920:	f06f 0004 	mvn.w	r0, #4
   1e924:	e76f      	b.n	1e806 <mcp2515_get_state+0x4e>
			LOG_ERR("Failed to read error counters [%d]", ret);
   1e926:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1e92a:	e7cb      	b.n	1e8c4 <mcp2515_get_state+0x10c>
   1e92c:	f06f 041b 	mvn.w	r4, #27
   1e930:	e7d4      	b.n	1e8dc <mcp2515_get_state+0x124>
	return 0;
   1e932:	2000      	movs	r0, #0
   1e934:	e767      	b.n	1e806 <mcp2515_get_state+0x4e>
   1e936:	bf00      	nop
   1e938:	0002d4c8 	.word	0x0002d4c8
   1e93c:	0002b1c4 	.word	0x0002b1c4
   1e940:	0002d4ec 	.word	0x0002d4ec

0001e944 <mcp2515_set_mode>:
	struct mcp2515_data *dev_data = dev->data;
   1e944:	6903      	ldr	r3, [r0, #16]
	if (dev_data->started) {
   1e946:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
   1e94a:	2a00      	cmp	r2, #0
   1e94c:	d158      	bne.n	1ea00 <mcp2515_set_mode+0xbc>
	switch (mode) {
   1e94e:	2901      	cmp	r1, #1
   1e950:	d04b      	beq.n	1e9ea <mcp2515_set_mode+0xa6>
   1e952:	2902      	cmp	r1, #2
   1e954:	d044      	beq.n	1e9e0 <mcp2515_set_mode+0x9c>
   1e956:	2900      	cmp	r1, #0
   1e958:	d03e      	beq.n	1e9d8 <mcp2515_set_mode+0x94>
{
   1e95a:	b5b0      	push	{r4, r5, r7, lr}
   1e95c:	b082      	sub	sp, #8
   1e95e:	af00      	add	r7, sp, #0
		LOG_ERR("Unsupported CAN Mode %u", mode);
   1e960:	466c      	mov	r4, sp
   1e962:	b088      	sub	sp, #32
   1e964:	466b      	mov	r3, sp
   1e966:	f113 0210 	adds.w	r2, r3, #16
   1e96a:	d043      	beq.n	1e9f4 <mcp2515_set_mode+0xb0>
   1e96c:	200c      	movs	r0, #12
   1e96e:	b142      	cbz	r2, 1e982 <mcp2515_set_mode+0x3e>
   1e970:	4684      	mov	ip, r0
   1e972:	2804      	cmp	r0, #4
   1e974:	dd01      	ble.n	1e97a <mcp2515_set_mode+0x36>
   1e976:	4d24      	ldr	r5, [pc, #144]	; (1ea08 <mcp2515_set_mode+0xc4>)
   1e978:	615d      	str	r5, [r3, #20]
   1e97a:	f1bc 0f08 	cmp.w	ip, #8
   1e97e:	dd00      	ble.n	1e982 <mcp2515_set_mode+0x3e>
   1e980:	6199      	str	r1, [r3, #24]
   1e982:	280b      	cmp	r0, #11
   1e984:	dd39      	ble.n	1e9fa <mcp2515_set_mode+0xb6>
   1e986:	f04f 0c0c 	mov.w	ip, #12
   1e98a:	b13a      	cbz	r2, 1e99c <mcp2515_set_mode+0x58>
   1e98c:	2103      	movs	r1, #3
   1e98e:	7139      	strb	r1, [r7, #4]
   1e990:	2100      	movs	r1, #0
   1e992:	7179      	strb	r1, [r7, #5]
   1e994:	71b9      	strb	r1, [r7, #6]
   1e996:	71f9      	strb	r1, [r7, #7]
   1e998:	6878      	ldr	r0, [r7, #4]
   1e99a:	6118      	str	r0, [r3, #16]
   1e99c:	2100      	movs	r1, #0
   1e99e:	f36f 0100 	bfc	r1, #0, #1
   1e9a2:	f36f 0141 	bfc	r1, #1, #1
   1e9a6:	f36f 0182 	bfc	r1, #2, #1
   1e9aa:	f36f 01c5 	bfc	r1, #3, #3
   1e9ae:	2301      	movs	r3, #1
   1e9b0:	f363 1188 	bfi	r1, r3, #6, #3
   1e9b4:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   1e9b8:	f363 2152 	bfi	r1, r3, #9, #10
   1e9bc:	f36f 41de 	bfc	r1, #19, #12
   1e9c0:	f36f 71df 	bfc	r1, #31, #1
   1e9c4:	2300      	movs	r3, #0
   1e9c6:	4811      	ldr	r0, [pc, #68]	; (1ea0c <mcp2515_set_mode+0xc8>)
   1e9c8:	f006 fef3 	bl	257b2 <z_impl_z_log_msg_static_create>
   1e9cc:	46a5      	mov	sp, r4
		return -ENOTSUP;
   1e9ce:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1e9d2:	3708      	adds	r7, #8
   1e9d4:	46bd      	mov	sp, r7
   1e9d6:	bdb0      	pop	{r4, r5, r7, pc}
		dev_data->mcp2515_mode = MCP2515_MODE_NORMAL;
   1e9d8:	2000      	movs	r0, #0
   1e9da:	f883 0179 	strb.w	r0, [r3, #377]	; 0x179
		break;
   1e9de:	4770      	bx	lr
		dev_data->mcp2515_mode = MCP2515_MODE_SILENT;
   1e9e0:	2203      	movs	r2, #3
   1e9e2:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	return 0;
   1e9e6:	2000      	movs	r0, #0
		break;
   1e9e8:	4770      	bx	lr
		dev_data->mcp2515_mode = MCP2515_MODE_LOOPBACK;
   1e9ea:	2202      	movs	r2, #2
   1e9ec:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	return 0;
   1e9f0:	2000      	movs	r0, #0
		break;
   1e9f2:	4770      	bx	lr
		LOG_ERR("Unsupported CAN Mode %u", mode);
   1e9f4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1e9f8:	e7b9      	b.n	1e96e <mcp2515_set_mode+0x2a>
   1e9fa:	f06f 0c1b 	mvn.w	ip, #27
   1e9fe:	e7c4      	b.n	1e98a <mcp2515_set_mode+0x46>
		return -EBUSY;
   1ea00:	f06f 000f 	mvn.w	r0, #15
}
   1ea04:	4770      	bx	lr
   1ea06:	bf00      	nop
   1ea08:	0002d510 	.word	0x0002d510
   1ea0c:	0002b1c4 	.word	0x0002b1c4

0001ea10 <mcp2515_handle_errors>:

static void mcp2515_handle_errors(const struct device *dev)
{
   1ea10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ea14:	b082      	sub	sp, #8
   1ea16:	af00      	add	r7, sp, #0
   1ea18:	4604      	mov	r4, r0
	struct mcp2515_data *dev_data = dev->data;
   1ea1a:	6906      	ldr	r6, [r0, #16]
	can_state_change_callback_t state_change_cb = dev_data->state_change_cb;
   1ea1c:	f8d6 515c 	ldr.w	r5, [r6, #348]	; 0x15c
	void *state_change_cb_data = dev_data->state_change_cb_data;
   1ea20:	f8d6 8160 	ldr.w	r8, [r6, #352]	; 0x160
	enum can_state state;
	struct can_bus_err_cnt err_cnt;
	int err;

	err = mcp2515_get_state(dev, &state, state_change_cb ? &err_cnt : NULL);
   1ea24:	b1a5      	cbz	r5, 1ea50 <mcp2515_handle_errors+0x40>
   1ea26:	1d3a      	adds	r2, r7, #4
   1ea28:	1df9      	adds	r1, r7, #7
   1ea2a:	4620      	mov	r0, r4
   1ea2c:	f7ff fec4 	bl	1e7b8 <mcp2515_get_state>
	if (err != 0) {
   1ea30:	4684      	mov	ip, r0
   1ea32:	b978      	cbnz	r0, 1ea54 <mcp2515_handle_errors+0x44>
		LOG_ERR("Failed to get CAN controller state [%d]", err);
		return;
	}

	if (state_change_cb && dev_data->old_state != state) {
   1ea34:	2d00      	cmp	r5, #0
   1ea36:	d043      	beq.n	1eac0 <mcp2515_handle_errors+0xb0>
   1ea38:	f896 3178 	ldrb.w	r3, [r6, #376]	; 0x178
   1ea3c:	79f9      	ldrb	r1, [r7, #7]
   1ea3e:	428b      	cmp	r3, r1
   1ea40:	d03e      	beq.n	1eac0 <mcp2515_handle_errors+0xb0>
		dev_data->old_state = state;
   1ea42:	f886 1178 	strb.w	r1, [r6, #376]	; 0x178
		state_change_cb(dev, state, err_cnt, state_change_cb_data);
   1ea46:	4643      	mov	r3, r8
   1ea48:	687a      	ldr	r2, [r7, #4]
   1ea4a:	4620      	mov	r0, r4
   1ea4c:	47a8      	blx	r5
   1ea4e:	e037      	b.n	1eac0 <mcp2515_handle_errors+0xb0>
	err = mcp2515_get_state(dev, &state, state_change_cb ? &err_cnt : NULL);
   1ea50:	2200      	movs	r2, #0
   1ea52:	e7e9      	b.n	1ea28 <mcp2515_handle_errors+0x18>
		LOG_ERR("Failed to get CAN controller state [%d]", err);
   1ea54:	466d      	mov	r5, sp
   1ea56:	b088      	sub	sp, #32
   1ea58:	466b      	mov	r3, sp
   1ea5a:	f113 0210 	adds.w	r2, r3, #16
   1ea5e:	d033      	beq.n	1eac8 <mcp2515_handle_errors+0xb8>
   1ea60:	210c      	movs	r1, #12
   1ea62:	b142      	cbz	r2, 1ea76 <mcp2515_handle_errors+0x66>
   1ea64:	4608      	mov	r0, r1
   1ea66:	2904      	cmp	r1, #4
   1ea68:	dd01      	ble.n	1ea6e <mcp2515_handle_errors+0x5e>
   1ea6a:	4c1a      	ldr	r4, [pc, #104]	; (1ead4 <mcp2515_handle_errors+0xc4>)
   1ea6c:	615c      	str	r4, [r3, #20]
   1ea6e:	2808      	cmp	r0, #8
   1ea70:	dd01      	ble.n	1ea76 <mcp2515_handle_errors+0x66>
   1ea72:	f8c3 c018 	str.w	ip, [r3, #24]
   1ea76:	290b      	cmp	r1, #11
   1ea78:	dd29      	ble.n	1eace <mcp2515_handle_errors+0xbe>
   1ea7a:	240c      	movs	r4, #12
   1ea7c:	b13a      	cbz	r2, 1ea8e <mcp2515_handle_errors+0x7e>
   1ea7e:	2103      	movs	r1, #3
   1ea80:	7039      	strb	r1, [r7, #0]
   1ea82:	2100      	movs	r1, #0
   1ea84:	7079      	strb	r1, [r7, #1]
   1ea86:	70b9      	strb	r1, [r7, #2]
   1ea88:	70f9      	strb	r1, [r7, #3]
   1ea8a:	6838      	ldr	r0, [r7, #0]
   1ea8c:	6118      	str	r0, [r3, #16]
   1ea8e:	2100      	movs	r1, #0
   1ea90:	f36f 0100 	bfc	r1, #0, #1
   1ea94:	f36f 0141 	bfc	r1, #1, #1
   1ea98:	f36f 0182 	bfc	r1, #2, #1
   1ea9c:	f36f 01c5 	bfc	r1, #3, #3
   1eaa0:	2301      	movs	r3, #1
   1eaa2:	f363 1188 	bfi	r1, r3, #6, #3
   1eaa6:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1eaaa:	f364 2152 	bfi	r1, r4, #9, #10
   1eaae:	f36f 41de 	bfc	r1, #19, #12
   1eab2:	f36f 71df 	bfc	r1, #31, #1
   1eab6:	2300      	movs	r3, #0
   1eab8:	4807      	ldr	r0, [pc, #28]	; (1ead8 <mcp2515_handle_errors+0xc8>)
   1eaba:	f006 fe7a 	bl	257b2 <z_impl_z_log_msg_static_create>
   1eabe:	46ad      	mov	sp, r5
	}
}
   1eac0:	3708      	adds	r7, #8
   1eac2:	46bd      	mov	sp, r7
   1eac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Failed to get CAN controller state [%d]", err);
   1eac8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1eacc:	e7c9      	b.n	1ea62 <mcp2515_handle_errors+0x52>
   1eace:	f06f 041b 	mvn.w	r4, #27
   1ead2:	e7d3      	b.n	1ea7c <mcp2515_handle_errors+0x6c>
   1ead4:	0002d528 	.word	0x0002d528
   1ead8:	0002b1c4 	.word	0x0002b1c4

0001eadc <mcp2515_set_timing>:
{
   1eadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eae0:	b082      	sub	sp, #8
   1eae2:	af00      	add	r7, sp, #0
	struct mcp2515_data *dev_data = dev->data;
   1eae4:	6906      	ldr	r6, [r0, #16]
	if (!timing) {
   1eae6:	2900      	cmp	r1, #0
   1eae8:	f000 8108 	beq.w	1ecfc <mcp2515_set_timing+0x220>
   1eaec:	4604      	mov	r4, r0
   1eaee:	460a      	mov	r2, r1
	if (dev_data->started) {
   1eaf0:	f896 317a 	ldrb.w	r3, [r6, #378]	; 0x17a
   1eaf4:	2b00      	cmp	r3, #0
   1eaf6:	f040 8104 	bne.w	1ed02 <mcp2515_set_timing+0x226>
	uint8_t brp = timing->prescaler - 1;
   1eafa:	7a0b      	ldrb	r3, [r1, #8]
   1eafc:	3b01      	subs	r3, #1
   1eafe:	b2db      	uxtb	r3, r3
	if (timing->sjw != CAN_SJW_NO_CHANGE) {
   1eb00:	8809      	ldrh	r1, [r1, #0]
   1eb02:	b121      	cbz	r1, 1eb0e <mcp2515_set_timing+0x32>
		dev_data->sjw = (timing->sjw - 1) << 6;
   1eb04:	3901      	subs	r1, #1
   1eb06:	b2c9      	uxtb	r1, r1
   1eb08:	0189      	lsls	r1, r1, #6
   1eb0a:	f886 117b 	strb.w	r1, [r6, #379]	; 0x17b
	uint8_t cnf1 = dev_data->sjw | brp;
   1eb0e:	f896 517b 	ldrb.w	r5, [r6, #379]	; 0x17b
   1eb12:	431d      	orrs	r5, r3
	const uint8_t phseg1 = (timing->phase_seg1 - 1) << 3;
   1eb14:	8893      	ldrh	r3, [r2, #4]
   1eb16:	3b01      	subs	r3, #1
   1eb18:	b2db      	uxtb	r3, r3
   1eb1a:	00db      	lsls	r3, r3, #3
   1eb1c:	b2db      	uxtb	r3, r3
	const uint8_t prseg = (timing->prop_seg - 1);
   1eb1e:	7891      	ldrb	r1, [r2, #2]
   1eb20:	3901      	subs	r1, #1
   1eb22:	b2c9      	uxtb	r1, r1
	const uint8_t cnf2 = btlmode | sam | phseg1 | prseg;
   1eb24:	430b      	orrs	r3, r1
   1eb26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	const uint8_t phseg2 = (timing->phase_seg2 - 1);
   1eb2a:	7992      	ldrb	r2, [r2, #6]
   1eb2c:	3a01      	subs	r2, #1
	config_buf[0] = cnf3;
   1eb2e:	713a      	strb	r2, [r7, #4]
	config_buf[1] = cnf2;
   1eb30:	717b      	strb	r3, [r7, #5]
	config_buf[2] = cnf1;
   1eb32:	71bd      	strb	r5, [r7, #6]
	config_buf[3] = caninte;
   1eb34:	233f      	movs	r3, #63	; 0x3f
   1eb36:	71fb      	strb	r3, [r7, #7]
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   1eb38:	f506 76b2 	add.w	r6, r6, #356	; 0x164
	return z_impl_k_mutex_lock(mutex, timeout);
   1eb3c:	f04f 32ff 	mov.w	r2, #4294967295
   1eb40:	f04f 33ff 	mov.w	r3, #4294967295
   1eb44:	4630      	mov	r0, r6
   1eb46:	f003 ff15 	bl	22974 <z_impl_k_mutex_lock>
	ret = mcp2515_cmd_write_reg(dev, MCP2515_ADDR_CNF3, config_buf,
   1eb4a:	2304      	movs	r3, #4
   1eb4c:	18fa      	adds	r2, r7, r3
   1eb4e:	2128      	movs	r1, #40	; 0x28
   1eb50:	4620      	mov	r0, r4
   1eb52:	f00a f959 	bl	28e08 <mcp2515_cmd_write_reg>
	if (ret < 0) {
   1eb56:	1e05      	subs	r5, r0, #0
   1eb58:	db4b      	blt.n	1ebf2 <mcp2515_set_timing+0x116>
	ret = mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_RXB0CTRL, rx0_ctrl,
   1eb5a:	2364      	movs	r3, #100	; 0x64
   1eb5c:	461a      	mov	r2, r3
   1eb5e:	2160      	movs	r1, #96	; 0x60
   1eb60:	4620      	mov	r0, r4
   1eb62:	f00a f936 	bl	28dd2 <mcp2515_cmd_bit_modify>
	if (ret < 0) {
   1eb66:	1e05      	subs	r5, r0, #0
   1eb68:	f2c0 8086 	blt.w	1ec78 <mcp2515_set_timing+0x19c>
	ret = mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_RXB1CTRL, rx1_ctrl,
   1eb6c:	2360      	movs	r3, #96	; 0x60
   1eb6e:	461a      	mov	r2, r3
   1eb70:	2170      	movs	r1, #112	; 0x70
   1eb72:	4620      	mov	r0, r4
   1eb74:	f00a f92d 	bl	28dd2 <mcp2515_cmd_bit_modify>
	if (ret < 0) {
   1eb78:	1e05      	subs	r5, r0, #0
   1eb7a:	da6f      	bge.n	1ec5c <mcp2515_set_timing+0x180>
		LOG_ERR("Failed to write RXB1CTRL [%d]", ret);
   1eb7c:	466c      	mov	r4, sp
   1eb7e:	b088      	sub	sp, #32
   1eb80:	466b      	mov	r3, sp
   1eb82:	f113 0210 	adds.w	r2, r3, #16
   1eb86:	f000 80b3 	beq.w	1ecf0 <mcp2515_set_timing+0x214>
   1eb8a:	210c      	movs	r1, #12
   1eb8c:	b14a      	cbz	r2, 1eba2 <mcp2515_set_timing+0xc6>
   1eb8e:	4608      	mov	r0, r1
   1eb90:	2904      	cmp	r1, #4
   1eb92:	dd03      	ble.n	1eb9c <mcp2515_set_timing+0xc0>
   1eb94:	f8df c170 	ldr.w	ip, [pc, #368]	; 1ed08 <mcp2515_set_timing+0x22c>
   1eb98:	f8c3 c014 	str.w	ip, [r3, #20]
   1eb9c:	2808      	cmp	r0, #8
   1eb9e:	dd00      	ble.n	1eba2 <mcp2515_set_timing+0xc6>
   1eba0:	619d      	str	r5, [r3, #24]
   1eba2:	290b      	cmp	r1, #11
   1eba4:	f340 80a7 	ble.w	1ecf6 <mcp2515_set_timing+0x21a>
   1eba8:	f04f 0c0c 	mov.w	ip, #12
   1ebac:	b13a      	cbz	r2, 1ebbe <mcp2515_set_timing+0xe2>
   1ebae:	2103      	movs	r1, #3
   1ebb0:	7039      	strb	r1, [r7, #0]
   1ebb2:	2100      	movs	r1, #0
   1ebb4:	7079      	strb	r1, [r7, #1]
   1ebb6:	70b9      	strb	r1, [r7, #2]
   1ebb8:	70f9      	strb	r1, [r7, #3]
   1ebba:	6838      	ldr	r0, [r7, #0]
   1ebbc:	6118      	str	r0, [r3, #16]
   1ebbe:	2100      	movs	r1, #0
   1ebc0:	f36f 0100 	bfc	r1, #0, #1
   1ebc4:	f36f 0141 	bfc	r1, #1, #1
   1ebc8:	f36f 0182 	bfc	r1, #2, #1
   1ebcc:	f36f 01c5 	bfc	r1, #3, #3
   1ebd0:	2301      	movs	r3, #1
   1ebd2:	f363 1188 	bfi	r1, r3, #6, #3
   1ebd6:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   1ebda:	f363 2152 	bfi	r1, r3, #9, #10
   1ebde:	f36f 41de 	bfc	r1, #19, #12
   1ebe2:	f36f 71df 	bfc	r1, #31, #1
   1ebe6:	2300      	movs	r3, #0
   1ebe8:	4848      	ldr	r0, [pc, #288]	; (1ed0c <mcp2515_set_timing+0x230>)
   1ebea:	f006 fde2 	bl	257b2 <z_impl_z_log_msg_static_create>
   1ebee:	46a5      	mov	sp, r4
		goto done;
   1ebf0:	e034      	b.n	1ec5c <mcp2515_set_timing+0x180>
		LOG_ERR("Failed to write the configuration [%d]", ret);
   1ebf2:	46e8      	mov	r8, sp
   1ebf4:	b088      	sub	sp, #32
   1ebf6:	466b      	mov	r3, sp
   1ebf8:	f113 0210 	adds.w	r2, r3, #16
   1ebfc:	d036      	beq.n	1ec6c <mcp2515_set_timing+0x190>
   1ebfe:	210c      	movs	r1, #12
   1ec00:	b13a      	cbz	r2, 1ec12 <mcp2515_set_timing+0x136>
   1ec02:	4608      	mov	r0, r1
   1ec04:	2904      	cmp	r1, #4
   1ec06:	dd01      	ble.n	1ec0c <mcp2515_set_timing+0x130>
   1ec08:	4c41      	ldr	r4, [pc, #260]	; (1ed10 <mcp2515_set_timing+0x234>)
   1ec0a:	615c      	str	r4, [r3, #20]
   1ec0c:	2808      	cmp	r0, #8
   1ec0e:	dd00      	ble.n	1ec12 <mcp2515_set_timing+0x136>
   1ec10:	619d      	str	r5, [r3, #24]
   1ec12:	290b      	cmp	r1, #11
   1ec14:	dd2d      	ble.n	1ec72 <mcp2515_set_timing+0x196>
   1ec16:	240c      	movs	r4, #12
   1ec18:	b13a      	cbz	r2, 1ec2a <mcp2515_set_timing+0x14e>
   1ec1a:	2103      	movs	r1, #3
   1ec1c:	7039      	strb	r1, [r7, #0]
   1ec1e:	2100      	movs	r1, #0
   1ec20:	7079      	strb	r1, [r7, #1]
   1ec22:	70b9      	strb	r1, [r7, #2]
   1ec24:	70f9      	strb	r1, [r7, #3]
   1ec26:	6838      	ldr	r0, [r7, #0]
   1ec28:	6118      	str	r0, [r3, #16]
   1ec2a:	2100      	movs	r1, #0
   1ec2c:	f36f 0100 	bfc	r1, #0, #1
   1ec30:	f36f 0141 	bfc	r1, #1, #1
   1ec34:	f36f 0182 	bfc	r1, #2, #1
   1ec38:	f36f 01c5 	bfc	r1, #3, #3
   1ec3c:	2301      	movs	r3, #1
   1ec3e:	f363 1188 	bfi	r1, r3, #6, #3
   1ec42:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1ec46:	f364 2152 	bfi	r1, r4, #9, #10
   1ec4a:	f36f 41de 	bfc	r1, #19, #12
   1ec4e:	f36f 71df 	bfc	r1, #31, #1
   1ec52:	2300      	movs	r3, #0
   1ec54:	482d      	ldr	r0, [pc, #180]	; (1ed0c <mcp2515_set_timing+0x230>)
   1ec56:	f006 fdac 	bl	257b2 <z_impl_z_log_msg_static_create>
   1ec5a:	46c5      	mov	sp, r8
	return z_impl_k_mutex_unlock(mutex);
   1ec5c:	4630      	mov	r0, r6
   1ec5e:	f003 ff0d 	bl	22a7c <z_impl_k_mutex_unlock>
}
   1ec62:	4628      	mov	r0, r5
   1ec64:	3708      	adds	r7, #8
   1ec66:	46bd      	mov	sp, r7
   1ec68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Failed to write the configuration [%d]", ret);
   1ec6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1ec70:	e7c6      	b.n	1ec00 <mcp2515_set_timing+0x124>
   1ec72:	f06f 041b 	mvn.w	r4, #27
   1ec76:	e7cf      	b.n	1ec18 <mcp2515_set_timing+0x13c>
		LOG_ERR("Failed to write RXB0CTRL [%d]", ret);
   1ec78:	46e8      	mov	r8, sp
   1ec7a:	b088      	sub	sp, #32
   1ec7c:	466b      	mov	r3, sp
   1ec7e:	f113 0210 	adds.w	r2, r3, #16
   1ec82:	d02f      	beq.n	1ece4 <mcp2515_set_timing+0x208>
   1ec84:	210c      	movs	r1, #12
   1ec86:	b13a      	cbz	r2, 1ec98 <mcp2515_set_timing+0x1bc>
   1ec88:	4608      	mov	r0, r1
   1ec8a:	2904      	cmp	r1, #4
   1ec8c:	dd01      	ble.n	1ec92 <mcp2515_set_timing+0x1b6>
   1ec8e:	4c21      	ldr	r4, [pc, #132]	; (1ed14 <mcp2515_set_timing+0x238>)
   1ec90:	615c      	str	r4, [r3, #20]
   1ec92:	2808      	cmp	r0, #8
   1ec94:	dd00      	ble.n	1ec98 <mcp2515_set_timing+0x1bc>
   1ec96:	619d      	str	r5, [r3, #24]
   1ec98:	290b      	cmp	r1, #11
   1ec9a:	dd26      	ble.n	1ecea <mcp2515_set_timing+0x20e>
   1ec9c:	240c      	movs	r4, #12
   1ec9e:	b13a      	cbz	r2, 1ecb0 <mcp2515_set_timing+0x1d4>
   1eca0:	2103      	movs	r1, #3
   1eca2:	7039      	strb	r1, [r7, #0]
   1eca4:	2100      	movs	r1, #0
   1eca6:	7079      	strb	r1, [r7, #1]
   1eca8:	70b9      	strb	r1, [r7, #2]
   1ecaa:	70f9      	strb	r1, [r7, #3]
   1ecac:	6838      	ldr	r0, [r7, #0]
   1ecae:	6118      	str	r0, [r3, #16]
   1ecb0:	2100      	movs	r1, #0
   1ecb2:	f36f 0100 	bfc	r1, #0, #1
   1ecb6:	f36f 0141 	bfc	r1, #1, #1
   1ecba:	f36f 0182 	bfc	r1, #2, #1
   1ecbe:	f36f 01c5 	bfc	r1, #3, #3
   1ecc2:	2301      	movs	r3, #1
   1ecc4:	f363 1188 	bfi	r1, r3, #6, #3
   1ecc8:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1eccc:	f364 2152 	bfi	r1, r4, #9, #10
   1ecd0:	f36f 41de 	bfc	r1, #19, #12
   1ecd4:	f36f 71df 	bfc	r1, #31, #1
   1ecd8:	2300      	movs	r3, #0
   1ecda:	480c      	ldr	r0, [pc, #48]	; (1ed0c <mcp2515_set_timing+0x230>)
   1ecdc:	f006 fd69 	bl	257b2 <z_impl_z_log_msg_static_create>
   1ece0:	46c5      	mov	sp, r8
		goto done;
   1ece2:	e7bb      	b.n	1ec5c <mcp2515_set_timing+0x180>
		LOG_ERR("Failed to write RXB0CTRL [%d]", ret);
   1ece4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1ece8:	e7cd      	b.n	1ec86 <mcp2515_set_timing+0x1aa>
   1ecea:	f06f 041b 	mvn.w	r4, #27
   1ecee:	e7d6      	b.n	1ec9e <mcp2515_set_timing+0x1c2>
		LOG_ERR("Failed to write RXB1CTRL [%d]", ret);
   1ecf0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1ecf4:	e74a      	b.n	1eb8c <mcp2515_set_timing+0xb0>
   1ecf6:	f06f 0c1b 	mvn.w	ip, #27
   1ecfa:	e757      	b.n	1ebac <mcp2515_set_timing+0xd0>
		return -EINVAL;
   1ecfc:	f06f 0515 	mvn.w	r5, #21
   1ed00:	e7af      	b.n	1ec62 <mcp2515_set_timing+0x186>
		return -EBUSY;
   1ed02:	f06f 050f 	mvn.w	r5, #15
   1ed06:	e7ac      	b.n	1ec62 <mcp2515_set_timing+0x186>
   1ed08:	0002d598 	.word	0x0002d598
   1ed0c:	0002b1c4 	.word	0x0002b1c4
   1ed10:	0002d550 	.word	0x0002d550
   1ed14:	0002d578 	.word	0x0002d578

0001ed18 <mcp2515_send>:
{
   1ed18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ed1c:	b08c      	sub	sp, #48	; 0x30
   1ed1e:	af00      	add	r7, sp, #0
   1ed20:	460e      	mov	r6, r1
	struct mcp2515_data *dev_data = dev->data;
   1ed22:	6905      	ldr	r5, [r0, #16]
	if (frame->dlc > CAN_MAX_DLC) {
   1ed24:	7909      	ldrb	r1, [r1, #4]
   1ed26:	2908      	cmp	r1, #8
   1ed28:	d847      	bhi.n	1edba <mcp2515_send+0xa2>
   1ed2a:	4680      	mov	r8, r0
	if ((frame->flags & ~(CAN_FRAME_IDE | CAN_FRAME_RTR)) != 0) {
   1ed2c:	7971      	ldrb	r1, [r6, #5]
   1ed2e:	2903      	cmp	r1, #3
   1ed30:	f200 8088 	bhi.w	1ee44 <mcp2515_send+0x12c>
	if (!dev_data->started) {
   1ed34:	f895 117a 	ldrb.w	r1, [r5, #378]	; 0x17a
   1ed38:	2900      	cmp	r1, #0
   1ed3a:	f000 80f8 	beq.w	1ef2e <mcp2515_send+0x216>
	if (k_sem_take(&dev_data->tx_sem, timeout) != 0) {
   1ed3e:	f105 00e4 	add.w	r0, r5, #228	; 0xe4
	return z_impl_k_sem_take(sem, timeout);
   1ed42:	f003 ff3f 	bl	22bc4 <z_impl_k_sem_take>
   1ed46:	4681      	mov	r9, r0
   1ed48:	2800      	cmp	r0, #0
   1ed4a:	f040 80f3 	bne.w	1ef34 <mcp2515_send+0x21c>
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   1ed4e:	f505 7ab2 	add.w	sl, r5, #356	; 0x164
	return z_impl_k_mutex_lock(mutex, timeout);
   1ed52:	f04f 32ff 	mov.w	r2, #4294967295
   1ed56:	f04f 33ff 	mov.w	r3, #4294967295
   1ed5a:	4650      	mov	r0, sl
   1ed5c:	f003 fe0a 	bl	22974 <z_impl_k_mutex_lock>
	uint8_t tx_idx = 0U;
   1ed60:	2400      	movs	r4, #0
	for (; tx_idx < MCP2515_TX_CNT; tx_idx++) {
   1ed62:	2c00      	cmp	r4, #0
   1ed64:	f000 80af 	beq.w	1eec6 <mcp2515_send+0x1ae>
	return z_impl_k_mutex_unlock(mutex);
   1ed68:	4650      	mov	r0, sl
   1ed6a:	f003 fe87 	bl	22a7c <z_impl_k_mutex_unlock>
	if (tx_idx == MCP2515_TX_CNT) {
   1ed6e:	2c01      	cmp	r4, #1
   1ed70:	f000 80b9 	beq.w	1eee6 <mcp2515_send+0x1ce>
	dev_data->tx_cb[tx_idx].cb = callback;
   1ed74:	f104 031f 	add.w	r3, r4, #31
   1ed78:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   1ed7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1ed7e:	606b      	str	r3, [r5, #4]
	dev_data->tx_cb[tx_idx].cb_arg = user_data;
   1ed80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1ed82:	60ab      	str	r3, [r5, #8]
	mcp2515_convert_canframe_to_mcp2515frame(frame, tx_frame);
   1ed84:	f107 0108 	add.w	r1, r7, #8
   1ed88:	4630      	mov	r0, r6
   1ed8a:	f00a f8bc 	bl	28f06 <mcp2515_convert_canframe_to_mcp2515frame>
	abc = 2 * tx_idx;
   1ed8e:	0061      	lsls	r1, r4, #1
	len = sizeof(tx_frame) - CAN_MAX_DLC + frame->dlc;
   1ed90:	7933      	ldrb	r3, [r6, #4]
   1ed92:	3305      	adds	r3, #5
	mcp2515_cmd_load_tx_buffer(dev, abc, tx_frame, len);
   1ed94:	b2db      	uxtb	r3, r3
   1ed96:	f107 0208 	add.w	r2, r7, #8
   1ed9a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   1ed9e:	4640      	mov	r0, r8
   1eda0:	f00a f847 	bl	28e32 <mcp2515_cmd_load_tx_buffer>
	nnn = BIT(tx_idx);
   1eda4:	2101      	movs	r1, #1
   1eda6:	40a1      	lsls	r1, r4
	mcp2515_cmd_rts(dev, nnn);
   1eda8:	b2c9      	uxtb	r1, r1
   1edaa:	4640      	mov	r0, r8
   1edac:	f00a f858 	bl	28e60 <mcp2515_cmd_rts>
}
   1edb0:	4648      	mov	r0, r9
   1edb2:	3730      	adds	r7, #48	; 0x30
   1edb4:	46bd      	mov	sp, r7
   1edb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LOG_ERR("DLC of %d exceeds maximum (%d)",
   1edba:	466d      	mov	r5, sp
   1edbc:	b088      	sub	sp, #32
   1edbe:	466b      	mov	r3, sp
   1edc0:	f113 0210 	adds.w	r2, r3, #16
   1edc4:	d011      	beq.n	1edea <mcp2515_send+0xd2>
   1edc6:	2010      	movs	r0, #16
   1edc8:	b15a      	cbz	r2, 1ede2 <mcp2515_send+0xca>
   1edca:	4604      	mov	r4, r0
   1edcc:	2804      	cmp	r0, #4
   1edce:	dd01      	ble.n	1edd4 <mcp2515_send+0xbc>
   1edd0:	4e5a      	ldr	r6, [pc, #360]	; (1ef3c <mcp2515_send+0x224>)
   1edd2:	615e      	str	r6, [r3, #20]
   1edd4:	2c08      	cmp	r4, #8
   1edd6:	dd00      	ble.n	1edda <mcp2515_send+0xc2>
   1edd8:	6199      	str	r1, [r3, #24]
   1edda:	2c0c      	cmp	r4, #12
   1eddc:	dd08      	ble.n	1edf0 <mcp2515_send+0xd8>
   1edde:	2108      	movs	r1, #8
   1ede0:	61d9      	str	r1, [r3, #28]
   1ede2:	280f      	cmp	r0, #15
   1ede4:	dd2b      	ble.n	1ee3e <mcp2515_send+0x126>
   1ede6:	2410      	movs	r4, #16
   1ede8:	e004      	b.n	1edf4 <mcp2515_send+0xdc>
   1edea:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1edee:	e7eb      	b.n	1edc8 <mcp2515_send+0xb0>
   1edf0:	f06f 041b 	mvn.w	r4, #27
   1edf4:	b13a      	cbz	r2, 1ee06 <mcp2515_send+0xee>
   1edf6:	2104      	movs	r1, #4
   1edf8:	7139      	strb	r1, [r7, #4]
   1edfa:	2100      	movs	r1, #0
   1edfc:	7179      	strb	r1, [r7, #5]
   1edfe:	71b9      	strb	r1, [r7, #6]
   1ee00:	71f9      	strb	r1, [r7, #7]
   1ee02:	6878      	ldr	r0, [r7, #4]
   1ee04:	6118      	str	r0, [r3, #16]
   1ee06:	2100      	movs	r1, #0
   1ee08:	f36f 0100 	bfc	r1, #0, #1
   1ee0c:	f36f 0141 	bfc	r1, #1, #1
   1ee10:	f36f 0182 	bfc	r1, #2, #1
   1ee14:	f36f 01c5 	bfc	r1, #3, #3
   1ee18:	2301      	movs	r3, #1
   1ee1a:	f363 1188 	bfi	r1, r3, #6, #3
   1ee1e:	f404 737d 	and.w	r3, r4, #1012	; 0x3f4
   1ee22:	f363 2152 	bfi	r1, r3, #9, #10
   1ee26:	f36f 41de 	bfc	r1, #19, #12
   1ee2a:	f36f 71df 	bfc	r1, #31, #1
   1ee2e:	2300      	movs	r3, #0
   1ee30:	4843      	ldr	r0, [pc, #268]	; (1ef40 <mcp2515_send+0x228>)
   1ee32:	f006 fcbe 	bl	257b2 <z_impl_z_log_msg_static_create>
   1ee36:	46ad      	mov	sp, r5
		return -EINVAL;
   1ee38:	f06f 0915 	mvn.w	r9, #21
   1ee3c:	e7b8      	b.n	1edb0 <mcp2515_send+0x98>
		LOG_ERR("DLC of %d exceeds maximum (%d)",
   1ee3e:	f06f 041b 	mvn.w	r4, #27
   1ee42:	e7d7      	b.n	1edf4 <mcp2515_send+0xdc>
		LOG_ERR("unsupported CAN frame flags 0x%02x", frame->flags);
   1ee44:	466d      	mov	r5, sp
   1ee46:	b088      	sub	sp, #32
   1ee48:	466b      	mov	r3, sp
   1ee4a:	f113 0210 	adds.w	r2, r3, #16
   1ee4e:	d00d      	beq.n	1ee6c <mcp2515_send+0x154>
   1ee50:	200c      	movs	r0, #12
   1ee52:	b13a      	cbz	r2, 1ee64 <mcp2515_send+0x14c>
   1ee54:	4604      	mov	r4, r0
   1ee56:	2804      	cmp	r0, #4
   1ee58:	dd01      	ble.n	1ee5e <mcp2515_send+0x146>
   1ee5a:	4e3a      	ldr	r6, [pc, #232]	; (1ef44 <mcp2515_send+0x22c>)
   1ee5c:	615e      	str	r6, [r3, #20]
   1ee5e:	2c08      	cmp	r4, #8
   1ee60:	dd07      	ble.n	1ee72 <mcp2515_send+0x15a>
   1ee62:	6199      	str	r1, [r3, #24]
   1ee64:	280b      	cmp	r0, #11
   1ee66:	dd2b      	ble.n	1eec0 <mcp2515_send+0x1a8>
   1ee68:	240c      	movs	r4, #12
   1ee6a:	e004      	b.n	1ee76 <mcp2515_send+0x15e>
   1ee6c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1ee70:	e7ef      	b.n	1ee52 <mcp2515_send+0x13a>
   1ee72:	f06f 041b 	mvn.w	r4, #27
   1ee76:	b13a      	cbz	r2, 1ee88 <mcp2515_send+0x170>
   1ee78:	2103      	movs	r1, #3
   1ee7a:	7139      	strb	r1, [r7, #4]
   1ee7c:	2100      	movs	r1, #0
   1ee7e:	7179      	strb	r1, [r7, #5]
   1ee80:	71b9      	strb	r1, [r7, #6]
   1ee82:	71f9      	strb	r1, [r7, #7]
   1ee84:	6878      	ldr	r0, [r7, #4]
   1ee86:	6118      	str	r0, [r3, #16]
   1ee88:	2100      	movs	r1, #0
   1ee8a:	f36f 0100 	bfc	r1, #0, #1
   1ee8e:	f36f 0141 	bfc	r1, #1, #1
   1ee92:	f36f 0182 	bfc	r1, #2, #1
   1ee96:	f36f 01c5 	bfc	r1, #3, #3
   1ee9a:	2301      	movs	r3, #1
   1ee9c:	f363 1188 	bfi	r1, r3, #6, #3
   1eea0:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1eea4:	f363 2152 	bfi	r1, r3, #9, #10
   1eea8:	f36f 41de 	bfc	r1, #19, #12
   1eeac:	f36f 71df 	bfc	r1, #31, #1
   1eeb0:	2300      	movs	r3, #0
   1eeb2:	4823      	ldr	r0, [pc, #140]	; (1ef40 <mcp2515_send+0x228>)
   1eeb4:	f006 fc7d 	bl	257b2 <z_impl_z_log_msg_static_create>
   1eeb8:	46ad      	mov	sp, r5
		return -ENOTSUP;
   1eeba:	f06f 0985 	mvn.w	r9, #133	; 0x85
   1eebe:	e777      	b.n	1edb0 <mcp2515_send+0x98>
		LOG_ERR("unsupported CAN frame flags 0x%02x", frame->flags);
   1eec0:	f06f 041b 	mvn.w	r4, #27
   1eec4:	e7d7      	b.n	1ee76 <mcp2515_send+0x15e>
		if ((BIT(tx_idx) & dev_data->tx_busy_map) == 0) {
   1eec6:	f895 3104 	ldrb.w	r3, [r5, #260]	; 0x104
   1eeca:	fa23 f204 	lsr.w	r2, r3, r4
   1eece:	f012 0f01 	tst.w	r2, #1
   1eed2:	d002      	beq.n	1eeda <mcp2515_send+0x1c2>
	for (; tx_idx < MCP2515_TX_CNT; tx_idx++) {
   1eed4:	3401      	adds	r4, #1
   1eed6:	b2e4      	uxtb	r4, r4
   1eed8:	e743      	b.n	1ed62 <mcp2515_send+0x4a>
			dev_data->tx_busy_map |= BIT(tx_idx);
   1eeda:	2201      	movs	r2, #1
   1eedc:	40a2      	lsls	r2, r4
   1eede:	4313      	orrs	r3, r2
   1eee0:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
			break;
   1eee4:	e740      	b.n	1ed68 <mcp2515_send+0x50>
		LOG_WRN("no free tx slot available");
   1eee6:	4b18      	ldr	r3, [pc, #96]	; (1ef48 <mcp2515_send+0x230>)
   1eee8:	62fb      	str	r3, [r7, #44]	; 0x2c
   1eeea:	2202      	movs	r2, #2
   1eeec:	713a      	strb	r2, [r7, #4]
   1eeee:	2300      	movs	r3, #0
   1eef0:	717b      	strb	r3, [r7, #5]
   1eef2:	71bb      	strb	r3, [r7, #6]
   1eef4:	71fb      	strb	r3, [r7, #7]
   1eef6:	6879      	ldr	r1, [r7, #4]
   1eef8:	62b9      	str	r1, [r7, #40]	; 0x28
   1eefa:	4619      	mov	r1, r3
   1eefc:	f363 0100 	bfi	r1, r3, #0, #1
   1ef00:	f363 0141 	bfi	r1, r3, #1, #1
   1ef04:	f363 0182 	bfi	r1, r3, #2, #1
   1ef08:	f363 01c5 	bfi	r1, r3, #3, #3
   1ef0c:	f362 1188 	bfi	r1, r2, #6, #3
   1ef10:	2208      	movs	r2, #8
   1ef12:	f362 2152 	bfi	r1, r2, #9, #10
   1ef16:	f363 41de 	bfi	r1, r3, #19, #12
   1ef1a:	f363 71df 	bfi	r1, r3, #31, #1
   1ef1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1ef22:	4807      	ldr	r0, [pc, #28]	; (1ef40 <mcp2515_send+0x228>)
   1ef24:	f006 fc45 	bl	257b2 <z_impl_z_log_msg_static_create>
		return -EIO;
   1ef28:	f06f 0904 	mvn.w	r9, #4
   1ef2c:	e740      	b.n	1edb0 <mcp2515_send+0x98>
		return -ENETDOWN;
   1ef2e:	f06f 0972 	mvn.w	r9, #114	; 0x72
   1ef32:	e73d      	b.n	1edb0 <mcp2515_send+0x98>
		return -EAGAIN;
   1ef34:	f06f 090a 	mvn.w	r9, #10
   1ef38:	e73a      	b.n	1edb0 <mcp2515_send+0x98>
   1ef3a:	bf00      	nop
   1ef3c:	0002d5b8 	.word	0x0002d5b8
   1ef40:	0002b1c4 	.word	0x0002b1c4
   1ef44:	0002d5d8 	.word	0x0002d5d8
   1ef48:	0002d5fc 	.word	0x0002d5fc

0001ef4c <mcp2515_handle_interrupts>:
	return -ENOTSUP;
}
#endif

static void mcp2515_handle_interrupts(const struct device *dev)
{
   1ef4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ef50:	b089      	sub	sp, #36	; 0x24
   1ef52:	af00      	add	r7, sp, #0
   1ef54:	4605      	mov	r5, r0
	const struct mcp2515_config *dev_cfg = dev->config;
   1ef56:	f8d0 8004 	ldr.w	r8, [r0, #4]
   1ef5a:	e073      	b.n	1f044 <mcp2515_handle_interrupts+0xf8>
	/* Loop until INT pin is inactive (all interrupt flags handled) */
	while (1) {
		ret = mcp2515_cmd_read_reg(dev, MCP2515_ADDR_CANINTF,
				&canintf, 1);
		if (ret != 0) {
			LOG_ERR("Couldn't read INTF register %d", ret);
   1ef5c:	46e9      	mov	r9, sp
   1ef5e:	b088      	sub	sp, #32
   1ef60:	466b      	mov	r3, sp
   1ef62:	f113 0210 	adds.w	r2, r3, #16
   1ef66:	d010      	beq.n	1ef8a <mcp2515_handle_interrupts+0x3e>
   1ef68:	200c      	movs	r0, #12
   1ef6a:	b152      	cbz	r2, 1ef82 <mcp2515_handle_interrupts+0x36>
   1ef6c:	4684      	mov	ip, r0
   1ef6e:	2804      	cmp	r0, #4
   1ef70:	dd03      	ble.n	1ef7a <mcp2515_handle_interrupts+0x2e>
   1ef72:	f8df e178 	ldr.w	lr, [pc, #376]	; 1f0ec <mcp2515_handle_interrupts+0x1a0>
   1ef76:	f8c3 e014 	str.w	lr, [r3, #20]
   1ef7a:	f1bc 0f08 	cmp.w	ip, #8
   1ef7e:	dd07      	ble.n	1ef90 <mcp2515_handle_interrupts+0x44>
   1ef80:	6199      	str	r1, [r3, #24]
   1ef82:	280b      	cmp	r0, #11
   1ef84:	dd29      	ble.n	1efda <mcp2515_handle_interrupts+0x8e>
   1ef86:	210c      	movs	r1, #12
   1ef88:	e004      	b.n	1ef94 <mcp2515_handle_interrupts+0x48>
   1ef8a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1ef8e:	e7ec      	b.n	1ef6a <mcp2515_handle_interrupts+0x1e>
   1ef90:	f06f 011b 	mvn.w	r1, #27
   1ef94:	b13a      	cbz	r2, 1efa6 <mcp2515_handle_interrupts+0x5a>
   1ef96:	2003      	movs	r0, #3
   1ef98:	7038      	strb	r0, [r7, #0]
   1ef9a:	2000      	movs	r0, #0
   1ef9c:	7078      	strb	r0, [r7, #1]
   1ef9e:	70b8      	strb	r0, [r7, #2]
   1efa0:	70f8      	strb	r0, [r7, #3]
   1efa2:	6838      	ldr	r0, [r7, #0]
   1efa4:	6118      	str	r0, [r3, #16]
   1efa6:	f36f 0400 	bfc	r4, #0, #1
   1efaa:	f36f 0441 	bfc	r4, #1, #1
   1efae:	f36f 0482 	bfc	r4, #2, #1
   1efb2:	f36f 04c5 	bfc	r4, #3, #3
   1efb6:	2301      	movs	r3, #1
   1efb8:	f363 1488 	bfi	r4, r3, #6, #3
   1efbc:	f401 737b 	and.w	r3, r1, #1004	; 0x3ec
   1efc0:	f363 2452 	bfi	r4, r3, #9, #10
   1efc4:	f36f 44de 	bfc	r4, #19, #12
   1efc8:	f36f 74df 	bfc	r4, #31, #1
   1efcc:	2300      	movs	r3, #0
   1efce:	4621      	mov	r1, r4
   1efd0:	4847      	ldr	r0, [pc, #284]	; (1f0f0 <mcp2515_handle_interrupts+0x1a4>)
   1efd2:	f006 fbee 	bl	257b2 <z_impl_z_log_msg_static_create>
   1efd6:	46cd      	mov	sp, r9
			continue;
   1efd8:	e034      	b.n	1f044 <mcp2515_handle_interrupts+0xf8>
			LOG_ERR("Couldn't read INTF register %d", ret);
   1efda:	f06f 011b 	mvn.w	r1, #27
   1efde:	e7d9      	b.n	1ef94 <mcp2515_handle_interrupts+0x48>
			/* No interrupt flags set */
			break;
		}

		if (canintf & MCP2515_CANINTF_RX0IF) {
			mcp2515_rx(dev, 0);
   1efe0:	2100      	movs	r1, #0
   1efe2:	4628      	mov	r0, r5
   1efe4:	f00a f8e7 	bl	291b6 <mcp2515_rx>

			/* RX0IF flag cleared automatically during read */
			canintf &= ~MCP2515_CANINTF_RX0IF;
   1efe8:	79fb      	ldrb	r3, [r7, #7]
   1efea:	f023 0301 	bic.w	r3, r3, #1
   1efee:	71fb      	strb	r3, [r7, #7]
   1eff0:	e037      	b.n	1f062 <mcp2515_handle_interrupts+0x116>
		}

		if (canintf & MCP2515_CANINTF_RX1IF) {
			mcp2515_rx(dev, 1);
   1eff2:	2101      	movs	r1, #1
   1eff4:	4628      	mov	r0, r5
   1eff6:	f00a f8de 	bl	291b6 <mcp2515_rx>

			/* RX1IF flag cleared automatically during read */
			canintf &= ~MCP2515_CANINTF_RX1IF;
   1effa:	79fb      	ldrb	r3, [r7, #7]
   1effc:	f023 0302 	bic.w	r3, r3, #2
   1f000:	71fb      	strb	r3, [r7, #7]
   1f002:	e032      	b.n	1f06a <mcp2515_handle_interrupts+0x11e>
		}

		if (canintf & MCP2515_CANINTF_TX0IF) {
			mcp2515_tx_done(dev, 0, 0);
   1f004:	2200      	movs	r2, #0
   1f006:	4611      	mov	r1, r2
   1f008:	4628      	mov	r0, r5
   1f00a:	f00a f860 	bl	290ce <mcp2515_tx_done>
   1f00e:	e030      	b.n	1f072 <mcp2515_handle_interrupts+0x126>
		}

		if (canintf & MCP2515_CANINTF_TX1IF) {
			mcp2515_tx_done(dev, 1, 0);
   1f010:	2200      	movs	r2, #0
   1f012:	2101      	movs	r1, #1
   1f014:	4628      	mov	r0, r5
   1f016:	f00a f85a 	bl	290ce <mcp2515_tx_done>
   1f01a:	e02e      	b.n	1f07a <mcp2515_handle_interrupts+0x12e>
		}

		if (canintf & MCP2515_CANINTF_TX2IF) {
			mcp2515_tx_done(dev, 2, 0);
   1f01c:	2200      	movs	r2, #0
   1f01e:	2102      	movs	r1, #2
   1f020:	4628      	mov	r0, r5
   1f022:	f00a f854 	bl	290ce <mcp2515_tx_done>
   1f026:	e02c      	b.n	1f082 <mcp2515_handle_interrupts+0x136>
		}

		if (canintf & MCP2515_CANINTF_ERRIF) {
			mcp2515_handle_errors(dev);
   1f028:	4628      	mov	r0, r5
   1f02a:	f7ff fcf1 	bl	1ea10 <mcp2515_handle_errors>
   1f02e:	e02c      	b.n	1f08a <mcp2515_handle_interrupts+0x13e>
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
	return gpio_pin_get(spec->port, spec->pin);
   1f030:	f898 1014 	ldrb.w	r1, [r8, #20]
   1f034:	f8d8 0010 	ldr.w	r0, [r8, #16]
   1f038:	f009 fe62 	bl	28d00 <gpio_pin_get>
					canintf, ~canintf);
		}

		/* Break from loop if INT pin is inactive */
		ret = gpio_pin_get_dt(&dev_cfg->int_gpio);
		if (ret < 0) {
   1f03c:	2800      	cmp	r0, #0
   1f03e:	db2e      	blt.n	1f09e <mcp2515_handle_interrupts+0x152>
			LOG_ERR("Couldn't read INT pin");
		} else if (ret == 0) {
   1f040:	2800      	cmp	r0, #0
   1f042:	d04f      	beq.n	1f0e4 <mcp2515_handle_interrupts+0x198>
		ret = mcp2515_cmd_read_reg(dev, MCP2515_ADDR_CANINTF,
   1f044:	2301      	movs	r3, #1
   1f046:	1dfa      	adds	r2, r7, #7
   1f048:	212c      	movs	r1, #44	; 0x2c
   1f04a:	4628      	mov	r0, r5
   1f04c:	f009 ff1c 	bl	28e88 <mcp2515_cmd_read_reg>
		if (ret != 0) {
   1f050:	4601      	mov	r1, r0
   1f052:	2800      	cmp	r0, #0
   1f054:	d182      	bne.n	1ef5c <mcp2515_handle_interrupts+0x10>
		if (canintf == 0) {
   1f056:	79fb      	ldrb	r3, [r7, #7]
   1f058:	2b00      	cmp	r3, #0
   1f05a:	d043      	beq.n	1f0e4 <mcp2515_handle_interrupts+0x198>
		if (canintf & MCP2515_CANINTF_RX0IF) {
   1f05c:	f013 0f01 	tst.w	r3, #1
   1f060:	d1be      	bne.n	1efe0 <mcp2515_handle_interrupts+0x94>
		if (canintf & MCP2515_CANINTF_RX1IF) {
   1f062:	79fb      	ldrb	r3, [r7, #7]
   1f064:	f013 0f02 	tst.w	r3, #2
   1f068:	d1c3      	bne.n	1eff2 <mcp2515_handle_interrupts+0xa6>
		if (canintf & MCP2515_CANINTF_TX0IF) {
   1f06a:	79fb      	ldrb	r3, [r7, #7]
   1f06c:	f013 0f04 	tst.w	r3, #4
   1f070:	d1c8      	bne.n	1f004 <mcp2515_handle_interrupts+0xb8>
		if (canintf & MCP2515_CANINTF_TX1IF) {
   1f072:	79fb      	ldrb	r3, [r7, #7]
   1f074:	f013 0f08 	tst.w	r3, #8
   1f078:	d1ca      	bne.n	1f010 <mcp2515_handle_interrupts+0xc4>
		if (canintf & MCP2515_CANINTF_TX2IF) {
   1f07a:	79fb      	ldrb	r3, [r7, #7]
   1f07c:	f013 0f10 	tst.w	r3, #16
   1f080:	d1cc      	bne.n	1f01c <mcp2515_handle_interrupts+0xd0>
		if (canintf & MCP2515_CANINTF_ERRIF) {
   1f082:	79fb      	ldrb	r3, [r7, #7]
   1f084:	f013 0f20 	tst.w	r3, #32
   1f088:	d1ce      	bne.n	1f028 <mcp2515_handle_interrupts+0xdc>
		if (canintf != 0) {
   1f08a:	79fa      	ldrb	r2, [r7, #7]
   1f08c:	2a00      	cmp	r2, #0
   1f08e:	d0cf      	beq.n	1f030 <mcp2515_handle_interrupts+0xe4>
			mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_CANINTF,
   1f090:	43d3      	mvns	r3, r2
   1f092:	b2db      	uxtb	r3, r3
   1f094:	212c      	movs	r1, #44	; 0x2c
   1f096:	4628      	mov	r0, r5
   1f098:	f009 fe9b 	bl	28dd2 <mcp2515_cmd_bit_modify>
   1f09c:	e7c8      	b.n	1f030 <mcp2515_handle_interrupts+0xe4>
			LOG_ERR("Couldn't read INT pin");
   1f09e:	4b15      	ldr	r3, [pc, #84]	; (1f0f4 <mcp2515_handle_interrupts+0x1a8>)
   1f0a0:	61fb      	str	r3, [r7, #28]
   1f0a2:	2302      	movs	r3, #2
   1f0a4:	703b      	strb	r3, [r7, #0]
   1f0a6:	2300      	movs	r3, #0
   1f0a8:	707b      	strb	r3, [r7, #1]
   1f0aa:	70bb      	strb	r3, [r7, #2]
   1f0ac:	70fb      	strb	r3, [r7, #3]
   1f0ae:	683a      	ldr	r2, [r7, #0]
   1f0b0:	61ba      	str	r2, [r7, #24]
   1f0b2:	f363 0600 	bfi	r6, r3, #0, #1
   1f0b6:	f363 0641 	bfi	r6, r3, #1, #1
   1f0ba:	f363 0682 	bfi	r6, r3, #2, #1
   1f0be:	f363 06c5 	bfi	r6, r3, #3, #3
   1f0c2:	2201      	movs	r2, #1
   1f0c4:	f362 1688 	bfi	r6, r2, #6, #3
   1f0c8:	2208      	movs	r2, #8
   1f0ca:	f362 2652 	bfi	r6, r2, #9, #10
   1f0ce:	f363 46de 	bfi	r6, r3, #19, #12
   1f0d2:	f363 76df 	bfi	r6, r3, #31, #1
   1f0d6:	f107 0218 	add.w	r2, r7, #24
   1f0da:	4631      	mov	r1, r6
   1f0dc:	4804      	ldr	r0, [pc, #16]	; (1f0f0 <mcp2515_handle_interrupts+0x1a4>)
   1f0de:	f006 fb68 	bl	257b2 <z_impl_z_log_msg_static_create>
   1f0e2:	e7af      	b.n	1f044 <mcp2515_handle_interrupts+0xf8>
			/* All interrupt flags handled */
			break;
		}
	}
}
   1f0e4:	3724      	adds	r7, #36	; 0x24
   1f0e6:	46bd      	mov	sp, r7
   1f0e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f0ec:	0002d618 	.word	0x0002d618
   1f0f0:	0002b1c4 	.word	0x0002b1c4
   1f0f4:	0002d638 	.word	0x0002d638

0001f0f8 <mcp2515_init>:
	}
};


static int mcp2515_init(const struct device *dev)
{
   1f0f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f0fc:	b0ad      	sub	sp, #180	; 0xb4
   1f0fe:	af08      	add	r7, sp, #32
   1f100:	4606      	mov	r6, r0
	const struct mcp2515_config *dev_cfg = dev->config;
   1f102:	6844      	ldr	r4, [r0, #4]
	struct mcp2515_data *dev_data = dev->data;
   1f104:	6905      	ldr	r5, [r0, #16]
	struct can_timing timing;
	int ret;

	k_sem_init(&dev_data->int_sem, 0, 1);
   1f106:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
	return z_impl_k_sem_init(sem, initial_count, limit);
   1f10a:	2201      	movs	r2, #1
   1f10c:	2100      	movs	r1, #0
   1f10e:	f00b f890 	bl	2a232 <z_impl_k_sem_init>
	k_mutex_init(&dev_data->mutex);
   1f112:	f505 70b2 	add.w	r0, r5, #356	; 0x164
	return z_impl_k_mutex_init(mutex);
   1f116:	f00a ffcf 	bl	2a0b8 <z_impl_k_mutex_init>
	k_sem_init(&dev_data->tx_sem, MCP2515_TX_CNT, MCP2515_TX_CNT);
   1f11a:	f105 00e4 	add.w	r0, r5, #228	; 0xe4
	return z_impl_k_sem_init(sem, initial_count, limit);
   1f11e:	2201      	movs	r2, #1
   1f120:	4611      	mov	r1, r2
   1f122:	f00b f886 	bl	2a232 <z_impl_k_sem_init>

	if (dev_cfg->phy != NULL) {
   1f126:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1f128:	b118      	cbz	r0, 1f132 <mcp2515_init+0x3a>
   1f12a:	f00a fe84 	bl	29e36 <z_device_is_ready>
		if (!device_is_ready(dev_cfg->phy)) {
   1f12e:	2800      	cmp	r0, #0
   1f130:	d07a      	beq.n	1f228 <mcp2515_init+0x130>
			LOG_ERR("CAN transceiver not ready");
			return -ENODEV;
		}
	}

	if (!spi_is_ready_dt(&dev_cfg->bus)) {
   1f132:	4620      	mov	r0, r4
   1f134:	f00a f862 	bl	291fc <spi_is_ready_dt>
   1f138:	2800      	cmp	r0, #0
   1f13a:	f000 809a 	beq.w	1f272 <mcp2515_init+0x17a>
		LOG_ERR("SPI bus %s not ready", dev_cfg->bus.bus->name);
		return -ENODEV;
	}

	/* Reset MCP2515 */
	if (mcp2515_cmd_soft_reset(dev)) {
   1f13e:	4630      	mov	r0, r6
   1f140:	f009 fe34 	bl	28dac <mcp2515_cmd_soft_reset>
   1f144:	2800      	cmp	r0, #0
   1f146:	f040 80eb 	bne.w	1f320 <mcp2515_init+0x228>
		LOG_ERR("Soft-reset failed");
		return -EIO;
	}

	/* Initialize interrupt handling  */
	if (!device_is_ready(dev_cfg->int_gpio.port)) {
   1f14a:	6920      	ldr	r0, [r4, #16]
   1f14c:	f00a fe73 	bl	29e36 <z_device_is_ready>
   1f150:	2800      	cmp	r0, #0
   1f152:	f000 810c 	beq.w	1f36e <mcp2515_init+0x276>
		LOG_ERR("Interrupt GPIO port not ready");
		return -ENODEV;
	}

	if (gpio_pin_configure_dt(&dev_cfg->int_gpio, GPIO_INPUT)) {
   1f156:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1f15a:	f104 0010 	add.w	r0, r4, #16
   1f15e:	f009 fdb8 	bl	28cd2 <gpio_pin_configure_dt>
   1f162:	2800      	cmp	r0, #0
   1f164:	f040 8128 	bne.w	1f3b8 <mcp2515_init+0x2c0>
		LOG_ERR("Unable to configure interrupt GPIO");
		return -EINVAL;
	}

	gpio_init_callback(&(dev_data->int_gpio_cb), mcp2515_int_gpio_callback,
			   BIT(dev_cfg->int_gpio.pin));
   1f168:	7d22      	ldrb	r2, [r4, #20]
   1f16a:	2301      	movs	r3, #1
   1f16c:	4093      	lsls	r3, r2
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   1f16e:	4ab9      	ldr	r2, [pc, #740]	; (1f454 <mcp2515_init+0x35c>)
   1f170:	606a      	str	r2, [r5, #4]
	callback->pin_mask = pin_mask;
   1f172:	60ab      	str	r3, [r5, #8]

	if (gpio_add_callback(dev_cfg->int_gpio.port,
   1f174:	4629      	mov	r1, r5
   1f176:	6920      	ldr	r0, [r4, #16]
   1f178:	f009 fdd2 	bl	28d20 <gpio_add_callback>
   1f17c:	2800      	cmp	r0, #0
   1f17e:	f040 81cf 	bne.w	1f520 <__kernel_ram_size+0x88>
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   1f182:	6920      	ldr	r0, [r4, #16]
   1f184:	7d21      	ldrb	r1, [r4, #20]
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   1f186:	f04f 62b8 	mov.w	r2, #96468992	; 0x5c00000
   1f18a:	f009 fd66 	bl	28c5a <z_impl_gpio_pin_interrupt_configure>
			      &(dev_data->int_gpio_cb))) {
		return -EINVAL;
	}

	if (gpio_pin_interrupt_configure_dt(&dev_cfg->int_gpio,
   1f18e:	2800      	cmp	r0, #0
   1f190:	f040 81c9 	bne.w	1f526 <__kernel_ram_size+0x8e>
					    GPIO_INT_EDGE_TO_ACTIVE)) {
		return -EINVAL;
	}

	k_thread_create(&dev_data->int_thread, dev_data->int_thread_stack,
   1f194:	f105 0010 	add.w	r0, r5, #16
   1f198:	f8d5 10c8 	ldr.w	r1, [r5, #200]	; 0xc8
			dev_cfg->int_thread_stack_size,
   1f19c:	69a2      	ldr	r2, [r4, #24]
			(k_thread_entry_t) mcp2515_int_thread, (void *)dev,
			NULL, NULL, K_PRIO_COOP(dev_cfg->int_thread_priority),
   1f19e:	69e3      	ldr	r3, [r4, #28]
	k_thread_create(&dev_data->int_thread, dev_data->int_thread_stack,
   1f1a0:	3b10      	subs	r3, #16
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1f1a2:	f04f 0800 	mov.w	r8, #0
   1f1a6:	f04f 0900 	mov.w	r9, #0
   1f1aa:	e9cd 8906 	strd	r8, r9, [sp, #24]
   1f1ae:	f8cd 8010 	str.w	r8, [sp, #16]
   1f1b2:	9303      	str	r3, [sp, #12]
   1f1b4:	f8cd 8008 	str.w	r8, [sp, #8]
   1f1b8:	f8cd 8004 	str.w	r8, [sp, #4]
   1f1bc:	9600      	str	r6, [sp, #0]
   1f1be:	4ba6      	ldr	r3, [pc, #664]	; (1f458 <mcp2515_init+0x360>)
   1f1c0:	f00a ff3c 	bl	2a03c <z_impl_k_thread_create>
			0, K_NO_WAIT);

	(void)memset(dev_data->rx_cb, 0, sizeof(dev_data->rx_cb));
   1f1c4:	2214      	movs	r2, #20
   1f1c6:	4641      	mov	r1, r8
   1f1c8:	f505 7086 	add.w	r0, r5, #268	; 0x10c
   1f1cc:	f006 ff5a 	bl	26084 <memset>
	(void)memset(dev_data->filter, 0, sizeof(dev_data->filter));
   1f1d0:	2228      	movs	r2, #40	; 0x28
   1f1d2:	4641      	mov	r1, r8
   1f1d4:	f505 709a 	add.w	r0, r5, #308	; 0x134
   1f1d8:	f006 ff54 	bl	26084 <memset>
	dev_data->old_state = CAN_STATE_ERROR_ACTIVE;
   1f1dc:	f885 8178 	strb.w	r8, [r5, #376]	; 0x178

	timing.sjw = dev_cfg->tq_sjw;
   1f1e0:	f894 3020 	ldrb.w	r3, [r4, #32]
   1f1e4:	81bb      	strh	r3, [r7, #12]
	if (dev_cfg->sample_point && USE_SP_ALGO) {
   1f1e6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   1f1e8:	2b00      	cmp	r3, #0
   1f1ea:	f000 8145 	beq.w	1f478 <mcp2515_init+0x380>
		ret = can_calc_timing(dev, &timing, dev_cfg->bus_speed,
   1f1ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
		union { uintptr_t x; uint16_t val; } parm3 = { .val = sample_pnt };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_CAN_CALC_TIMING);
	}
#endif
	compiler_barrier();
	return z_impl_can_calc_timing(dev, res, bitrate, sample_pnt);
   1f1f0:	f107 010c 	add.w	r1, r7, #12
   1f1f4:	4630      	mov	r0, r6
   1f1f6:	f7ff fabb 	bl	1e770 <z_impl_can_calc_timing>
				      dev_cfg->sample_point);
		if (ret == -EINVAL) {
   1f1fa:	f110 0f16 	cmn.w	r0, #22
   1f1fe:	f000 8100 	beq.w	1f402 <mcp2515_init+0x30a>
	return z_impl_k_usleep(us);
   1f202:	2080      	movs	r0, #128	; 0x80
   1f204:	f004 fa3c 	bl	23680 <z_impl_k_usleep>
			     const struct can_timing *timing);

static inline int z_impl_can_set_timing(const struct device *dev,
					const struct can_timing *timing)
{
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
   1f208:	68b3      	ldr	r3, [r6, #8]

	return api->set_timing(dev, timing);
   1f20a:	691b      	ldr	r3, [r3, #16]
   1f20c:	f107 010c 	add.w	r1, r7, #12
   1f210:	4630      	mov	r0, r6
   1f212:	4798      	blx	r3
	}

	k_usleep(MCP2515_OSC_STARTUP_US);

	ret = can_set_timing(dev, &timing);
	if (ret) {
   1f214:	b920      	cbnz	r0, 1f220 <mcp2515_init+0x128>
 */
__syscall int can_set_mode(const struct device *dev, can_mode_t mode);

static inline int z_impl_can_set_mode(const struct device *dev, can_mode_t mode)
{
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
   1f216:	68b3      	ldr	r3, [r6, #8]

	return api->set_mode(dev, mode);
   1f218:	68db      	ldr	r3, [r3, #12]
   1f21a:	2100      	movs	r1, #0
   1f21c:	4630      	mov	r0, r6
   1f21e:	4798      	blx	r3
	}

	ret = can_set_mode(dev, CAN_MODE_NORMAL);

	return ret;
}
   1f220:	3794      	adds	r7, #148	; 0x94
   1f222:	46bd      	mov	sp, r7
   1f224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			LOG_ERR("CAN transceiver not ready");
   1f228:	4b8c      	ldr	r3, [pc, #560]	; (1f45c <mcp2515_init+0x364>)
   1f22a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1f22c:	2302      	movs	r3, #2
   1f22e:	723b      	strb	r3, [r7, #8]
   1f230:	2300      	movs	r3, #0
   1f232:	727b      	strb	r3, [r7, #9]
   1f234:	72bb      	strb	r3, [r7, #10]
   1f236:	72fb      	strb	r3, [r7, #11]
   1f238:	68ba      	ldr	r2, [r7, #8]
   1f23a:	62ba      	str	r2, [r7, #40]	; 0x28
   1f23c:	4619      	mov	r1, r3
   1f23e:	f363 0100 	bfi	r1, r3, #0, #1
   1f242:	f363 0141 	bfi	r1, r3, #1, #1
   1f246:	f363 0182 	bfi	r1, r3, #2, #1
   1f24a:	f363 01c5 	bfi	r1, r3, #3, #3
   1f24e:	2201      	movs	r2, #1
   1f250:	f362 1188 	bfi	r1, r2, #6, #3
   1f254:	2208      	movs	r2, #8
   1f256:	f362 2152 	bfi	r1, r2, #9, #10
   1f25a:	f363 41de 	bfi	r1, r3, #19, #12
   1f25e:	f363 71df 	bfi	r1, r3, #31, #1
   1f262:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1f266:	487e      	ldr	r0, [pc, #504]	; (1f460 <mcp2515_init+0x368>)
   1f268:	f006 faa3 	bl	257b2 <z_impl_z_log_msg_static_create>
			return -ENODEV;
   1f26c:	f06f 0012 	mvn.w	r0, #18
   1f270:	e7d6      	b.n	1f220 <mcp2515_init+0x128>
		LOG_ERR("SPI bus %s not ready", dev_cfg->bus.bus->name);
   1f272:	6823      	ldr	r3, [r4, #0]
   1f274:	6819      	ldr	r1, [r3, #0]
   1f276:	466d      	mov	r5, sp
   1f278:	2300      	movs	r3, #0
   1f27a:	723b      	strb	r3, [r7, #8]
   1f27c:	2302      	movs	r3, #2
   1f27e:	727b      	strb	r3, [r7, #9]
   1f280:	b088      	sub	sp, #32
   1f282:	462c      	mov	r4, r5
   1f284:	f115 0210 	adds.w	r2, r5, #16
   1f288:	d011      	beq.n	1f2ae <mcp2515_init+0x1b6>
   1f28a:	200e      	movs	r0, #14
   1f28c:	b11a      	cbz	r2, 1f296 <mcp2515_init+0x19e>
   1f28e:	2804      	cmp	r0, #4
   1f290:	dd01      	ble.n	1f296 <mcp2515_init+0x19e>
   1f292:	4b74      	ldr	r3, [pc, #464]	; (1f464 <mcp2515_init+0x36c>)
   1f294:	6163      	str	r3, [r4, #20]
   1f296:	2300      	movs	r3, #0
   1f298:	713b      	strb	r3, [r7, #4]
   1f29a:	2302      	movs	r3, #2
   1f29c:	717b      	strb	r3, [r7, #5]
   1f29e:	b19a      	cbz	r2, 1f2c8 <mcp2515_init+0x1d0>
   1f2a0:	2808      	cmp	r0, #8
   1f2a2:	dd00      	ble.n	1f2a6 <mcp2515_init+0x1ae>
   1f2a4:	61a1      	str	r1, [r4, #24]
   1f2a6:	f104 031c 	add.w	r3, r4, #28
   1f2aa:	2100      	movs	r1, #0
   1f2ac:	e00a      	b.n	1f2c4 <mcp2515_init+0x1cc>
   1f2ae:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1f2b2:	e7eb      	b.n	1f28c <mcp2515_init+0x194>
   1f2b4:	f101 0690 	add.w	r6, r1, #144	; 0x90
   1f2b8:	443e      	add	r6, r7
   1f2ba:	f816 6c8c 	ldrb.w	r6, [r6, #-140]
   1f2be:	f803 6b01 	strb.w	r6, [r3], #1
   1f2c2:	3101      	adds	r1, #1
   1f2c4:	2901      	cmp	r1, #1
   1f2c6:	d9f5      	bls.n	1f2b4 <mcp2515_init+0x1bc>
   1f2c8:	280d      	cmp	r0, #13
   1f2ca:	dd26      	ble.n	1f31a <mcp2515_init+0x222>
   1f2cc:	230e      	movs	r3, #14
   1f2ce:	b142      	cbz	r2, 1f2e2 <mcp2515_init+0x1ea>
   1f2d0:	2103      	movs	r1, #3
   1f2d2:	7239      	strb	r1, [r7, #8]
   1f2d4:	2100      	movs	r1, #0
   1f2d6:	7279      	strb	r1, [r7, #9]
   1f2d8:	72b9      	strb	r1, [r7, #10]
   1f2da:	2101      	movs	r1, #1
   1f2dc:	72f9      	strb	r1, [r7, #11]
   1f2de:	68b8      	ldr	r0, [r7, #8]
   1f2e0:	6120      	str	r0, [r4, #16]
   1f2e2:	2100      	movs	r1, #0
   1f2e4:	f36f 0100 	bfc	r1, #0, #1
   1f2e8:	f36f 0141 	bfc	r1, #1, #1
   1f2ec:	f36f 0182 	bfc	r1, #2, #1
   1f2f0:	f36f 01c5 	bfc	r1, #3, #3
   1f2f4:	2001      	movs	r0, #1
   1f2f6:	f360 1188 	bfi	r1, r0, #6, #3
   1f2fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1f2fe:	f363 2152 	bfi	r1, r3, #9, #10
   1f302:	f36f 41de 	bfc	r1, #19, #12
   1f306:	f36f 71df 	bfc	r1, #31, #1
   1f30a:	2300      	movs	r3, #0
   1f30c:	4854      	ldr	r0, [pc, #336]	; (1f460 <mcp2515_init+0x368>)
   1f30e:	f006 fa50 	bl	257b2 <z_impl_z_log_msg_static_create>
   1f312:	46ad      	mov	sp, r5
		return -ENODEV;
   1f314:	f06f 0012 	mvn.w	r0, #18
   1f318:	e782      	b.n	1f220 <mcp2515_init+0x128>
		LOG_ERR("SPI bus %s not ready", dev_cfg->bus.bus->name);
   1f31a:	f06f 031b 	mvn.w	r3, #27
   1f31e:	e7d6      	b.n	1f2ce <mcp2515_init+0x1d6>
		LOG_ERR("Soft-reset failed");
   1f320:	4b51      	ldr	r3, [pc, #324]	; (1f468 <mcp2515_init+0x370>)
   1f322:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   1f326:	2302      	movs	r3, #2
   1f328:	723b      	strb	r3, [r7, #8]
   1f32a:	2300      	movs	r3, #0
   1f32c:	727b      	strb	r3, [r7, #9]
   1f32e:	72bb      	strb	r3, [r7, #10]
   1f330:	72fb      	strb	r3, [r7, #11]
   1f332:	68ba      	ldr	r2, [r7, #8]
   1f334:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
   1f338:	4619      	mov	r1, r3
   1f33a:	f363 0100 	bfi	r1, r3, #0, #1
   1f33e:	f363 0141 	bfi	r1, r3, #1, #1
   1f342:	f363 0182 	bfi	r1, r3, #2, #1
   1f346:	f363 01c5 	bfi	r1, r3, #3, #3
   1f34a:	2201      	movs	r2, #1
   1f34c:	f362 1188 	bfi	r1, r2, #6, #3
   1f350:	2208      	movs	r2, #8
   1f352:	f362 2152 	bfi	r1, r2, #9, #10
   1f356:	f363 41de 	bfi	r1, r3, #19, #12
   1f35a:	f363 71df 	bfi	r1, r3, #31, #1
   1f35e:	f107 0288 	add.w	r2, r7, #136	; 0x88
   1f362:	483f      	ldr	r0, [pc, #252]	; (1f460 <mcp2515_init+0x368>)
   1f364:	f006 fa25 	bl	257b2 <z_impl_z_log_msg_static_create>
		return -EIO;
   1f368:	f06f 0004 	mvn.w	r0, #4
   1f36c:	e758      	b.n	1f220 <mcp2515_init+0x128>
		LOG_ERR("Interrupt GPIO port not ready");
   1f36e:	4b3f      	ldr	r3, [pc, #252]	; (1f46c <mcp2515_init+0x374>)
   1f370:	677b      	str	r3, [r7, #116]	; 0x74
   1f372:	2302      	movs	r3, #2
   1f374:	723b      	strb	r3, [r7, #8]
   1f376:	2300      	movs	r3, #0
   1f378:	727b      	strb	r3, [r7, #9]
   1f37a:	72bb      	strb	r3, [r7, #10]
   1f37c:	72fb      	strb	r3, [r7, #11]
   1f37e:	68ba      	ldr	r2, [r7, #8]
   1f380:	673a      	str	r2, [r7, #112]	; 0x70
   1f382:	4619      	mov	r1, r3
   1f384:	f363 0100 	bfi	r1, r3, #0, #1
   1f388:	f363 0141 	bfi	r1, r3, #1, #1
   1f38c:	f363 0182 	bfi	r1, r3, #2, #1
   1f390:	f363 01c5 	bfi	r1, r3, #3, #3
   1f394:	2201      	movs	r2, #1
   1f396:	f362 1188 	bfi	r1, r2, #6, #3
   1f39a:	2208      	movs	r2, #8
   1f39c:	f362 2152 	bfi	r1, r2, #9, #10
   1f3a0:	f363 41de 	bfi	r1, r3, #19, #12
   1f3a4:	f363 71df 	bfi	r1, r3, #31, #1
   1f3a8:	f107 0270 	add.w	r2, r7, #112	; 0x70
   1f3ac:	482c      	ldr	r0, [pc, #176]	; (1f460 <mcp2515_init+0x368>)
   1f3ae:	f006 fa00 	bl	257b2 <z_impl_z_log_msg_static_create>
		return -ENODEV;
   1f3b2:	f06f 0012 	mvn.w	r0, #18
   1f3b6:	e733      	b.n	1f220 <mcp2515_init+0x128>
		LOG_ERR("Unable to configure interrupt GPIO");
   1f3b8:	4b2d      	ldr	r3, [pc, #180]	; (1f470 <mcp2515_init+0x378>)
   1f3ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   1f3bc:	2302      	movs	r3, #2
   1f3be:	723b      	strb	r3, [r7, #8]
   1f3c0:	2300      	movs	r3, #0
   1f3c2:	727b      	strb	r3, [r7, #9]
   1f3c4:	72bb      	strb	r3, [r7, #10]
   1f3c6:	72fb      	strb	r3, [r7, #11]
   1f3c8:	68ba      	ldr	r2, [r7, #8]
   1f3ca:	65ba      	str	r2, [r7, #88]	; 0x58
   1f3cc:	4619      	mov	r1, r3
   1f3ce:	f363 0100 	bfi	r1, r3, #0, #1
   1f3d2:	f363 0141 	bfi	r1, r3, #1, #1
   1f3d6:	f363 0182 	bfi	r1, r3, #2, #1
   1f3da:	f363 01c5 	bfi	r1, r3, #3, #3
   1f3de:	2201      	movs	r2, #1
   1f3e0:	f362 1188 	bfi	r1, r2, #6, #3
   1f3e4:	2208      	movs	r2, #8
   1f3e6:	f362 2152 	bfi	r1, r2, #9, #10
   1f3ea:	f363 41de 	bfi	r1, r3, #19, #12
   1f3ee:	f363 71df 	bfi	r1, r3, #31, #1
   1f3f2:	f107 0258 	add.w	r2, r7, #88	; 0x58
   1f3f6:	481a      	ldr	r0, [pc, #104]	; (1f460 <mcp2515_init+0x368>)
   1f3f8:	f006 f9db 	bl	257b2 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1f3fc:	f06f 0015 	mvn.w	r0, #21
   1f400:	e70e      	b.n	1f220 <mcp2515_init+0x128>
			LOG_ERR("Can't find timing for given param");
   1f402:	4b1c      	ldr	r3, [pc, #112]	; (1f474 <mcp2515_init+0x37c>)
   1f404:	647b      	str	r3, [r7, #68]	; 0x44
   1f406:	2302      	movs	r3, #2
   1f408:	723b      	strb	r3, [r7, #8]
   1f40a:	4643      	mov	r3, r8
   1f40c:	f887 8009 	strb.w	r8, [r7, #9]
   1f410:	f887 800a 	strb.w	r8, [r7, #10]
   1f414:	f887 800b 	strb.w	r8, [r7, #11]
   1f418:	68ba      	ldr	r2, [r7, #8]
   1f41a:	643a      	str	r2, [r7, #64]	; 0x40
   1f41c:	4641      	mov	r1, r8
   1f41e:	f368 0100 	bfi	r1, r8, #0, #1
   1f422:	f368 0141 	bfi	r1, r8, #1, #1
   1f426:	f368 0182 	bfi	r1, r8, #2, #1
   1f42a:	f368 01c5 	bfi	r1, r8, #3, #3
   1f42e:	2201      	movs	r2, #1
   1f430:	f362 1188 	bfi	r1, r2, #6, #3
   1f434:	2208      	movs	r2, #8
   1f436:	f362 2152 	bfi	r1, r2, #9, #10
   1f43a:	f368 41de 	bfi	r1, r8, #19, #12
   1f43e:	f368 71df 	bfi	r1, r8, #31, #1
   1f442:	f107 0240 	add.w	r2, r7, #64	; 0x40
   1f446:	4806      	ldr	r0, [pc, #24]	; (1f460 <mcp2515_init+0x368>)
   1f448:	f006 f9b3 	bl	257b2 <z_impl_z_log_msg_static_create>
			return -EIO;
   1f44c:	f06f 0004 	mvn.w	r0, #4
   1f450:	e6e6      	b.n	1f220 <mcp2515_init+0x128>
   1f452:	bf00      	nop
   1f454:	00029125 	.word	0x00029125
   1f458:	000291df 	.word	0x000291df
   1f45c:	0002d650 	.word	0x0002d650
   1f460:	0002b1c4 	.word	0x0002b1c4
   1f464:	0002d66c 	.word	0x0002d66c
   1f468:	0002d684 	.word	0x0002d684
   1f46c:	0002d698 	.word	0x0002d698
   1f470:	0002d6b8 	.word	0x0002d6b8
   1f474:	0002d6dc 	.word	0x0002d6dc
		timing.prop_seg = dev_cfg->tq_prop;
   1f478:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   1f47c:	81fb      	strh	r3, [r7, #14]
		timing.phase_seg1 = dev_cfg->tq_bs1;
   1f47e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   1f482:	823b      	strh	r3, [r7, #16]
		timing.phase_seg2 = dev_cfg->tq_bs2;
   1f484:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1f488:	827b      	strh	r3, [r7, #18]
		ret = can_calc_prescaler(dev, &timing, dev_cfg->bus_speed);
   1f48a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1f48c:	f107 010c 	add.w	r1, r7, #12
   1f490:	4630      	mov	r0, r6
   1f492:	f009 fbc4 	bl	28c1e <can_calc_prescaler>
		if (ret) {
   1f496:	4604      	mov	r4, r0
   1f498:	2800      	cmp	r0, #0
   1f49a:	f43f aeb2 	beq.w	1f202 <mcp2515_init+0x10a>
			LOG_WRN("Bitrate error: %d", ret);
   1f49e:	466d      	mov	r5, sp
   1f4a0:	b088      	sub	sp, #32
   1f4a2:	462b      	mov	r3, r5
   1f4a4:	f115 0210 	adds.w	r2, r5, #16
   1f4a8:	d00f      	beq.n	1f4ca <__kernel_ram_size+0x32>
   1f4aa:	210c      	movs	r1, #12
   1f4ac:	b14a      	cbz	r2, 1f4c2 <__kernel_ram_size+0x2a>
   1f4ae:	4608      	mov	r0, r1
   1f4b0:	2904      	cmp	r1, #4
   1f4b2:	dd03      	ble.n	1f4bc <__kernel_ram_size+0x24>
   1f4b4:	f8df c074 	ldr.w	ip, [pc, #116]	; 1f52c <__kernel_ram_size+0x94>
   1f4b8:	f8c3 c014 	str.w	ip, [r3, #20]
   1f4bc:	2808      	cmp	r0, #8
   1f4be:	dd07      	ble.n	1f4d0 <__kernel_ram_size+0x38>
   1f4c0:	619c      	str	r4, [r3, #24]
   1f4c2:	290b      	cmp	r1, #11
   1f4c4:	dd29      	ble.n	1f51a <__kernel_ram_size+0x82>
   1f4c6:	240c      	movs	r4, #12
   1f4c8:	e004      	b.n	1f4d4 <__kernel_ram_size+0x3c>
   1f4ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1f4ce:	e7ed      	b.n	1f4ac <__kernel_ram_size+0x14>
   1f4d0:	f06f 041b 	mvn.w	r4, #27
   1f4d4:	b13a      	cbz	r2, 1f4e6 <__kernel_ram_size+0x4e>
   1f4d6:	2103      	movs	r1, #3
   1f4d8:	7239      	strb	r1, [r7, #8]
   1f4da:	2100      	movs	r1, #0
   1f4dc:	7279      	strb	r1, [r7, #9]
   1f4de:	72b9      	strb	r1, [r7, #10]
   1f4e0:	72f9      	strb	r1, [r7, #11]
   1f4e2:	68b8      	ldr	r0, [r7, #8]
   1f4e4:	6118      	str	r0, [r3, #16]
   1f4e6:	2100      	movs	r1, #0
   1f4e8:	f36f 0100 	bfc	r1, #0, #1
   1f4ec:	f36f 0141 	bfc	r1, #1, #1
   1f4f0:	f36f 0182 	bfc	r1, #2, #1
   1f4f4:	f36f 01c5 	bfc	r1, #3, #3
   1f4f8:	2302      	movs	r3, #2
   1f4fa:	f363 1188 	bfi	r1, r3, #6, #3
   1f4fe:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1f502:	f363 2152 	bfi	r1, r3, #9, #10
   1f506:	f36f 41de 	bfc	r1, #19, #12
   1f50a:	f36f 71df 	bfc	r1, #31, #1
   1f50e:	2300      	movs	r3, #0
   1f510:	4807      	ldr	r0, [pc, #28]	; (1f530 <__kernel_ram_size+0x98>)
   1f512:	f006 f94e 	bl	257b2 <z_impl_z_log_msg_static_create>
   1f516:	46ad      	mov	sp, r5
   1f518:	e673      	b.n	1f202 <mcp2515_init+0x10a>
   1f51a:	f06f 041b 	mvn.w	r4, #27
   1f51e:	e7d9      	b.n	1f4d4 <__kernel_ram_size+0x3c>
		return -EINVAL;
   1f520:	f06f 0015 	mvn.w	r0, #21
   1f524:	e67c      	b.n	1f220 <mcp2515_init+0x128>
		return -EINVAL;
   1f526:	f06f 0015 	mvn.w	r0, #21
   1f52a:	e679      	b.n	1f220 <mcp2515_init+0x128>
   1f52c:	0002d700 	.word	0x0002d700
   1f530:	0002b1c4 	.word	0x0002b1c4

0001f534 <mcp2515_set_mode_int>:
{
   1f534:	b570      	push	{r4, r5, r6, lr}
   1f536:	b088      	sub	sp, #32
   1f538:	4606      	mov	r6, r0
   1f53a:	460d      	mov	r5, r1
	mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_CANCTRL,
   1f53c:	014b      	lsls	r3, r1, #5
   1f53e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   1f542:	22e0      	movs	r2, #224	; 0xe0
   1f544:	210f      	movs	r1, #15
   1f546:	f009 fc44 	bl	28dd2 <mcp2515_cmd_bit_modify>
	mcp2515_cmd_read_reg(dev, MCP2515_ADDR_CANSTAT, &canstat, 1);
   1f54a:	2301      	movs	r3, #1
   1f54c:	f10d 0207 	add.w	r2, sp, #7
   1f550:	210e      	movs	r1, #14
   1f552:	4630      	mov	r0, r6
   1f554:	f009 fc98 	bl	28e88 <mcp2515_cmd_read_reg>
	int retries = MCP2515_MODE_CHANGE_RETRIES;
   1f558:	2464      	movs	r4, #100	; 0x64
	while (((canstat & MCP2515_CANSTAT_MODE_MASK) >> MCP2515_CANSTAT_MODE_POS)
   1f55a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		!= mcp2515_mode) {
   1f55e:	ebb5 1f53 	cmp.w	r5, r3, lsr #5
   1f562:	d035      	beq.n	1f5d0 <mcp2515_set_mode_int+0x9c>
		if (--retries < 0) {
   1f564:	3c01      	subs	r4, #1
   1f566:	d40b      	bmi.n	1f580 <mcp2515_set_mode_int+0x4c>
	return z_impl_k_sleep(timeout);
   1f568:	2001      	movs	r0, #1
   1f56a:	2100      	movs	r1, #0
   1f56c:	f004 f85e 	bl	2362c <z_impl_k_sleep>
		mcp2515_cmd_read_reg(dev, MCP2515_ADDR_CANSTAT, &canstat, 1);
   1f570:	2301      	movs	r3, #1
   1f572:	f10d 0207 	add.w	r2, sp, #7
   1f576:	210e      	movs	r1, #14
   1f578:	4630      	mov	r0, r6
   1f57a:	f009 fc85 	bl	28e88 <mcp2515_cmd_read_reg>
   1f57e:	e7ec      	b.n	1f55a <mcp2515_set_mode_int+0x26>
			LOG_ERR("Timeout trying to set MCP2515 operation mode");
   1f580:	4b15      	ldr	r3, [pc, #84]	; (1f5d8 <mcp2515_set_mode_int+0xa4>)
   1f582:	9307      	str	r3, [sp, #28]
   1f584:	2302      	movs	r3, #2
   1f586:	f88d 3000 	strb.w	r3, [sp]
   1f58a:	2300      	movs	r3, #0
   1f58c:	f88d 3001 	strb.w	r3, [sp, #1]
   1f590:	f88d 3002 	strb.w	r3, [sp, #2]
   1f594:	f88d 3003 	strb.w	r3, [sp, #3]
   1f598:	9a00      	ldr	r2, [sp, #0]
   1f59a:	9206      	str	r2, [sp, #24]
   1f59c:	4619      	mov	r1, r3
   1f59e:	f363 0100 	bfi	r1, r3, #0, #1
   1f5a2:	f363 0141 	bfi	r1, r3, #1, #1
   1f5a6:	f363 0182 	bfi	r1, r3, #2, #1
   1f5aa:	f363 01c5 	bfi	r1, r3, #3, #3
   1f5ae:	2201      	movs	r2, #1
   1f5b0:	f362 1188 	bfi	r1, r2, #6, #3
   1f5b4:	2208      	movs	r2, #8
   1f5b6:	f362 2152 	bfi	r1, r2, #9, #10
   1f5ba:	f363 41de 	bfi	r1, r3, #19, #12
   1f5be:	f363 71df 	bfi	r1, r3, #31, #1
   1f5c2:	aa06      	add	r2, sp, #24
   1f5c4:	4805      	ldr	r0, [pc, #20]	; (1f5dc <mcp2515_set_mode_int+0xa8>)
   1f5c6:	f006 f8f4 	bl	257b2 <z_impl_z_log_msg_static_create>
			return -EIO;
   1f5ca:	f06f 0004 	mvn.w	r0, #4
   1f5ce:	e000      	b.n	1f5d2 <mcp2515_set_mode_int+0x9e>
	return 0;
   1f5d0:	2000      	movs	r0, #0
}
   1f5d2:	b008      	add	sp, #32
   1f5d4:	bd70      	pop	{r4, r5, r6, pc}
   1f5d6:	bf00      	nop
   1f5d8:	0002d714 	.word	0x0002d714
   1f5dc:	0002b1c4 	.word	0x0002b1c4

0001f5e0 <mcp2515_stop>:
{
   1f5e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f5e4:	b083      	sub	sp, #12
   1f5e6:	af00      	add	r7, sp, #0
	const struct mcp2515_config *dev_cfg = dev->config;
   1f5e8:	f8d0 9004 	ldr.w	r9, [r0, #4]
	struct mcp2515_data *dev_data = dev->data;
   1f5ec:	6905      	ldr	r5, [r0, #16]
	if (!dev_data->started) {
   1f5ee:	f895 317a 	ldrb.w	r3, [r5, #378]	; 0x17a
   1f5f2:	2b00      	cmp	r3, #0
   1f5f4:	f000 80af 	beq.w	1f756 <mcp2515_stop+0x176>
   1f5f8:	4604      	mov	r4, r0
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   1f5fa:	f505 78b2 	add.w	r8, r5, #356	; 0x164
	return z_impl_k_mutex_lock(mutex, timeout);
   1f5fe:	f04f 32ff 	mov.w	r2, #4294967295
   1f602:	f04f 33ff 	mov.w	r3, #4294967295
   1f606:	4640      	mov	r0, r8
   1f608:	f003 f9b4 	bl	22974 <z_impl_k_mutex_lock>
	mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_TXB0CTRL,
   1f60c:	2300      	movs	r3, #0
   1f60e:	2208      	movs	r2, #8
   1f610:	2130      	movs	r1, #48	; 0x30
   1f612:	4620      	mov	r0, r4
   1f614:	f009 fbdd 	bl	28dd2 <mcp2515_cmd_bit_modify>
	ret = mcp2515_set_mode_int(dev, MCP2515_MODE_CONFIGURATION);
   1f618:	2104      	movs	r1, #4
   1f61a:	4620      	mov	r0, r4
   1f61c:	f7ff ff8a 	bl	1f534 <mcp2515_set_mode_int>
	if (ret < 0) {
   1f620:	1e06      	subs	r6, r0, #0
   1f622:	da42      	bge.n	1f6aa <mcp2515_stop+0xca>
		LOG_ERR("Failed to enter configuration mode [%d]", ret);
   1f624:	466d      	mov	r5, sp
   1f626:	b088      	sub	sp, #32
   1f628:	466b      	mov	r3, sp
   1f62a:	f113 0210 	adds.w	r2, r3, #16
   1f62e:	d036      	beq.n	1f69e <mcp2515_stop+0xbe>
   1f630:	210c      	movs	r1, #12
   1f632:	b13a      	cbz	r2, 1f644 <mcp2515_stop+0x64>
   1f634:	4608      	mov	r0, r1
   1f636:	2904      	cmp	r1, #4
   1f638:	dd01      	ble.n	1f63e <mcp2515_stop+0x5e>
   1f63a:	4c49      	ldr	r4, [pc, #292]	; (1f760 <mcp2515_stop+0x180>)
   1f63c:	615c      	str	r4, [r3, #20]
   1f63e:	2808      	cmp	r0, #8
   1f640:	dd00      	ble.n	1f644 <mcp2515_stop+0x64>
   1f642:	619e      	str	r6, [r3, #24]
   1f644:	290b      	cmp	r1, #11
   1f646:	dd2d      	ble.n	1f6a4 <mcp2515_stop+0xc4>
   1f648:	240c      	movs	r4, #12
   1f64a:	b13a      	cbz	r2, 1f65c <mcp2515_stop+0x7c>
   1f64c:	2103      	movs	r1, #3
   1f64e:	7139      	strb	r1, [r7, #4]
   1f650:	2100      	movs	r1, #0
   1f652:	7179      	strb	r1, [r7, #5]
   1f654:	71b9      	strb	r1, [r7, #6]
   1f656:	71f9      	strb	r1, [r7, #7]
   1f658:	6878      	ldr	r0, [r7, #4]
   1f65a:	6118      	str	r0, [r3, #16]
   1f65c:	2100      	movs	r1, #0
   1f65e:	f36f 0100 	bfc	r1, #0, #1
   1f662:	f36f 0141 	bfc	r1, #1, #1
   1f666:	f36f 0182 	bfc	r1, #2, #1
   1f66a:	f36f 01c5 	bfc	r1, #3, #3
   1f66e:	2301      	movs	r3, #1
   1f670:	f363 1188 	bfi	r1, r3, #6, #3
   1f674:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1f678:	f364 2152 	bfi	r1, r4, #9, #10
   1f67c:	f36f 41de 	bfc	r1, #19, #12
   1f680:	f36f 71df 	bfc	r1, #31, #1
   1f684:	2300      	movs	r3, #0
   1f686:	4837      	ldr	r0, [pc, #220]	; (1f764 <mcp2515_stop+0x184>)
   1f688:	f006 f893 	bl	257b2 <z_impl_z_log_msg_static_create>
   1f68c:	46ad      	mov	sp, r5
	return z_impl_k_mutex_unlock(mutex);
   1f68e:	4640      	mov	r0, r8
   1f690:	f003 f9f4 	bl	22a7c <z_impl_k_mutex_unlock>
}
   1f694:	4630      	mov	r0, r6
   1f696:	370c      	adds	r7, #12
   1f698:	46bd      	mov	sp, r7
   1f69a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("Failed to enter configuration mode [%d]", ret);
   1f69e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1f6a2:	e7c6      	b.n	1f632 <mcp2515_stop+0x52>
   1f6a4:	f06f 041b 	mvn.w	r4, #27
   1f6a8:	e7cf      	b.n	1f64a <mcp2515_stop+0x6a>
	dev_data->started = false;
   1f6aa:	2600      	movs	r6, #0
   1f6ac:	f885 617a 	strb.w	r6, [r5, #378]	; 0x17a
   1f6b0:	4640      	mov	r0, r8
   1f6b2:	f003 f9e3 	bl	22a7c <z_impl_k_mutex_unlock>
	for (i = 0; i < MCP2515_TX_CNT; i++) {
   1f6b6:	2e00      	cmp	r6, #0
   1f6b8:	dd3f      	ble.n	1f73a <mcp2515_stop+0x15a>
	if (dev_cfg->phy != NULL) {
   1f6ba:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
   1f6be:	2800      	cmp	r0, #0
   1f6c0:	d04c      	beq.n	1f75c <mcp2515_stop+0x17c>
 * @retval 0 If successful.
 * @retval -EIO General input/output error, failed to disable device.
 */
static inline int can_transceiver_disable(const struct device *dev)
{
	const struct can_transceiver_driver_api *api =
   1f6c2:	6883      	ldr	r3, [r0, #8]
		(const struct can_transceiver_driver_api *)dev->api;

	return api->disable(dev);
   1f6c4:	685b      	ldr	r3, [r3, #4]
   1f6c6:	4798      	blx	r3
		if (ret != 0) {
   1f6c8:	4606      	mov	r6, r0
   1f6ca:	2800      	cmp	r0, #0
   1f6cc:	d0e2      	beq.n	1f694 <mcp2515_stop+0xb4>
			LOG_ERR("Failed to disable CAN transceiver [%d]", ret);
   1f6ce:	466d      	mov	r5, sp
   1f6d0:	b088      	sub	sp, #32
   1f6d2:	466b      	mov	r3, sp
   1f6d4:	f113 0210 	adds.w	r2, r3, #16
   1f6d8:	d037      	beq.n	1f74a <mcp2515_stop+0x16a>
   1f6da:	210c      	movs	r1, #12
   1f6dc:	b13a      	cbz	r2, 1f6ee <mcp2515_stop+0x10e>
   1f6de:	4608      	mov	r0, r1
   1f6e0:	2904      	cmp	r1, #4
   1f6e2:	dd01      	ble.n	1f6e8 <mcp2515_stop+0x108>
   1f6e4:	4c20      	ldr	r4, [pc, #128]	; (1f768 <mcp2515_stop+0x188>)
   1f6e6:	615c      	str	r4, [r3, #20]
   1f6e8:	2808      	cmp	r0, #8
   1f6ea:	dd00      	ble.n	1f6ee <mcp2515_stop+0x10e>
   1f6ec:	619e      	str	r6, [r3, #24]
   1f6ee:	290b      	cmp	r1, #11
   1f6f0:	dd2e      	ble.n	1f750 <mcp2515_stop+0x170>
   1f6f2:	240c      	movs	r4, #12
   1f6f4:	b13a      	cbz	r2, 1f706 <mcp2515_stop+0x126>
   1f6f6:	2103      	movs	r1, #3
   1f6f8:	7139      	strb	r1, [r7, #4]
   1f6fa:	2100      	movs	r1, #0
   1f6fc:	7179      	strb	r1, [r7, #5]
   1f6fe:	71b9      	strb	r1, [r7, #6]
   1f700:	71f9      	strb	r1, [r7, #7]
   1f702:	6878      	ldr	r0, [r7, #4]
   1f704:	6118      	str	r0, [r3, #16]
   1f706:	2100      	movs	r1, #0
   1f708:	f36f 0100 	bfc	r1, #0, #1
   1f70c:	f36f 0141 	bfc	r1, #1, #1
   1f710:	f36f 0182 	bfc	r1, #2, #1
   1f714:	f36f 01c5 	bfc	r1, #3, #3
   1f718:	2301      	movs	r3, #1
   1f71a:	f363 1188 	bfi	r1, r3, #6, #3
   1f71e:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1f722:	f364 2152 	bfi	r1, r4, #9, #10
   1f726:	f36f 41de 	bfc	r1, #19, #12
   1f72a:	f36f 71df 	bfc	r1, #31, #1
   1f72e:	2300      	movs	r3, #0
   1f730:	480c      	ldr	r0, [pc, #48]	; (1f764 <mcp2515_stop+0x184>)
   1f732:	f006 f83e 	bl	257b2 <z_impl_z_log_msg_static_create>
   1f736:	46ad      	mov	sp, r5
			return ret;
   1f738:	e7ac      	b.n	1f694 <mcp2515_stop+0xb4>
		mcp2515_tx_done(dev, i, -ENETDOWN);
   1f73a:	f06f 0272 	mvn.w	r2, #114	; 0x72
   1f73e:	b2f1      	uxtb	r1, r6
   1f740:	4620      	mov	r0, r4
   1f742:	f009 fcc4 	bl	290ce <mcp2515_tx_done>
	for (i = 0; i < MCP2515_TX_CNT; i++) {
   1f746:	3601      	adds	r6, #1
   1f748:	e7b5      	b.n	1f6b6 <mcp2515_stop+0xd6>
			LOG_ERR("Failed to disable CAN transceiver [%d]", ret);
   1f74a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1f74e:	e7c5      	b.n	1f6dc <mcp2515_stop+0xfc>
   1f750:	f06f 041b 	mvn.w	r4, #27
   1f754:	e7ce      	b.n	1f6f4 <mcp2515_stop+0x114>
		return -EALREADY;
   1f756:	f06f 0677 	mvn.w	r6, #119	; 0x77
   1f75a:	e79b      	b.n	1f694 <mcp2515_stop+0xb4>
	return 0;
   1f75c:	2600      	movs	r6, #0
   1f75e:	e799      	b.n	1f694 <mcp2515_stop+0xb4>
   1f760:	0002d744 	.word	0x0002d744
   1f764:	0002b1c4 	.word	0x0002b1c4
   1f768:	0002d76c 	.word	0x0002d76c

0001f76c <mcp2515_start>:
{
   1f76c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f770:	b083      	sub	sp, #12
   1f772:	af00      	add	r7, sp, #0
	const struct mcp2515_config *dev_cfg = dev->config;
   1f774:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct mcp2515_data *dev_data = dev->data;
   1f778:	6906      	ldr	r6, [r0, #16]
	if (dev_data->started) {
   1f77a:	f896 317a 	ldrb.w	r3, [r6, #378]	; 0x17a
   1f77e:	2b00      	cmp	r3, #0
   1f780:	f040 80a3 	bne.w	1f8ca <mcp2515_start+0x15e>
   1f784:	4604      	mov	r4, r0
	if (dev_cfg->phy != NULL) {
   1f786:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
   1f78a:	b120      	cbz	r0, 1f796 <mcp2515_start+0x2a>
	const struct can_transceiver_driver_api *api =
   1f78c:	6883      	ldr	r3, [r0, #8]
	return api->enable(dev);
   1f78e:	681b      	ldr	r3, [r3, #0]
   1f790:	4798      	blx	r3
		if (ret != 0) {
   1f792:	4605      	mov	r5, r0
   1f794:	b9d0      	cbnz	r0, 1f7cc <mcp2515_start+0x60>
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   1f796:	f506 79b2 	add.w	r9, r6, #356	; 0x164
	return z_impl_k_mutex_lock(mutex, timeout);
   1f79a:	f04f 32ff 	mov.w	r2, #4294967295
   1f79e:	f04f 33ff 	mov.w	r3, #4294967295
   1f7a2:	4648      	mov	r0, r9
   1f7a4:	f003 f8e6 	bl	22974 <z_impl_k_mutex_lock>
	ret = mcp2515_set_mode_int(dev, dev_data->mcp2515_mode);
   1f7a8:	f896 1179 	ldrb.w	r1, [r6, #377]	; 0x179
   1f7ac:	4620      	mov	r0, r4
   1f7ae:	f7ff fec1 	bl	1f534 <mcp2515_set_mode_int>
	if (ret < 0) {
   1f7b2:	1e05      	subs	r5, r0, #0
   1f7b4:	db46      	blt.n	1f844 <mcp2515_start+0xd8>
		dev_data->started = true;
   1f7b6:	2301      	movs	r3, #1
   1f7b8:	f886 317a 	strb.w	r3, [r6, #378]	; 0x17a
	return z_impl_k_mutex_unlock(mutex);
   1f7bc:	4648      	mov	r0, r9
   1f7be:	f003 f95d 	bl	22a7c <z_impl_k_mutex_unlock>
}
   1f7c2:	4628      	mov	r0, r5
   1f7c4:	370c      	adds	r7, #12
   1f7c6:	46bd      	mov	sp, r7
   1f7c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			LOG_ERR("Failed to enable CAN transceiver [%d]", ret);
   1f7cc:	466e      	mov	r6, sp
   1f7ce:	b088      	sub	sp, #32
   1f7d0:	466b      	mov	r3, sp
   1f7d2:	f113 0210 	adds.w	r2, r3, #16
   1f7d6:	d02f      	beq.n	1f838 <mcp2515_start+0xcc>
   1f7d8:	210c      	movs	r1, #12
   1f7da:	b13a      	cbz	r2, 1f7ec <mcp2515_start+0x80>
   1f7dc:	4608      	mov	r0, r1
   1f7de:	2904      	cmp	r1, #4
   1f7e0:	dd01      	ble.n	1f7e6 <mcp2515_start+0x7a>
   1f7e2:	4c3b      	ldr	r4, [pc, #236]	; (1f8d0 <mcp2515_start+0x164>)
   1f7e4:	615c      	str	r4, [r3, #20]
   1f7e6:	2808      	cmp	r0, #8
   1f7e8:	dd00      	ble.n	1f7ec <mcp2515_start+0x80>
   1f7ea:	619d      	str	r5, [r3, #24]
   1f7ec:	290b      	cmp	r1, #11
   1f7ee:	dd26      	ble.n	1f83e <mcp2515_start+0xd2>
   1f7f0:	240c      	movs	r4, #12
   1f7f2:	b13a      	cbz	r2, 1f804 <mcp2515_start+0x98>
   1f7f4:	2103      	movs	r1, #3
   1f7f6:	7139      	strb	r1, [r7, #4]
   1f7f8:	2100      	movs	r1, #0
   1f7fa:	7179      	strb	r1, [r7, #5]
   1f7fc:	71b9      	strb	r1, [r7, #6]
   1f7fe:	71f9      	strb	r1, [r7, #7]
   1f800:	6878      	ldr	r0, [r7, #4]
   1f802:	6118      	str	r0, [r3, #16]
   1f804:	2100      	movs	r1, #0
   1f806:	f36f 0100 	bfc	r1, #0, #1
   1f80a:	f36f 0141 	bfc	r1, #1, #1
   1f80e:	f36f 0182 	bfc	r1, #2, #1
   1f812:	f36f 01c5 	bfc	r1, #3, #3
   1f816:	2301      	movs	r3, #1
   1f818:	f363 1188 	bfi	r1, r3, #6, #3
   1f81c:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1f820:	f363 2152 	bfi	r1, r3, #9, #10
   1f824:	f36f 41de 	bfc	r1, #19, #12
   1f828:	f36f 71df 	bfc	r1, #31, #1
   1f82c:	2300      	movs	r3, #0
   1f82e:	4829      	ldr	r0, [pc, #164]	; (1f8d4 <mcp2515_start+0x168>)
   1f830:	f005 ffbf 	bl	257b2 <z_impl_z_log_msg_static_create>
   1f834:	46b5      	mov	sp, r6
			return ret;
   1f836:	e7c4      	b.n	1f7c2 <mcp2515_start+0x56>
			LOG_ERR("Failed to enable CAN transceiver [%d]", ret);
   1f838:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1f83c:	e7cd      	b.n	1f7da <mcp2515_start+0x6e>
   1f83e:	f06f 041b 	mvn.w	r4, #27
   1f842:	e7d6      	b.n	1f7f2 <mcp2515_start+0x86>
		LOG_ERR("Failed to set the mode [%d]", ret);
   1f844:	466c      	mov	r4, sp
   1f846:	b088      	sub	sp, #32
   1f848:	466b      	mov	r3, sp
   1f84a:	f113 0210 	adds.w	r2, r3, #16
   1f84e:	d036      	beq.n	1f8be <mcp2515_start+0x152>
   1f850:	210c      	movs	r1, #12
   1f852:	b13a      	cbz	r2, 1f864 <mcp2515_start+0xf8>
   1f854:	4608      	mov	r0, r1
   1f856:	2904      	cmp	r1, #4
   1f858:	dd01      	ble.n	1f85e <mcp2515_start+0xf2>
   1f85a:	4e1f      	ldr	r6, [pc, #124]	; (1f8d8 <mcp2515_start+0x16c>)
   1f85c:	615e      	str	r6, [r3, #20]
   1f85e:	2808      	cmp	r0, #8
   1f860:	dd00      	ble.n	1f864 <mcp2515_start+0xf8>
   1f862:	619d      	str	r5, [r3, #24]
   1f864:	290b      	cmp	r1, #11
   1f866:	dd2d      	ble.n	1f8c4 <mcp2515_start+0x158>
   1f868:	260c      	movs	r6, #12
   1f86a:	b13a      	cbz	r2, 1f87c <mcp2515_start+0x110>
   1f86c:	2103      	movs	r1, #3
   1f86e:	7139      	strb	r1, [r7, #4]
   1f870:	2100      	movs	r1, #0
   1f872:	7179      	strb	r1, [r7, #5]
   1f874:	71b9      	strb	r1, [r7, #6]
   1f876:	71f9      	strb	r1, [r7, #7]
   1f878:	6878      	ldr	r0, [r7, #4]
   1f87a:	6118      	str	r0, [r3, #16]
   1f87c:	2100      	movs	r1, #0
   1f87e:	f36f 0100 	bfc	r1, #0, #1
   1f882:	f36f 0141 	bfc	r1, #1, #1
   1f886:	f36f 0182 	bfc	r1, #2, #1
   1f88a:	f36f 01c5 	bfc	r1, #3, #3
   1f88e:	2301      	movs	r3, #1
   1f890:	f363 1188 	bfi	r1, r3, #6, #3
   1f894:	f406 737b 	and.w	r3, r6, #1004	; 0x3ec
   1f898:	f363 2152 	bfi	r1, r3, #9, #10
   1f89c:	f36f 41de 	bfc	r1, #19, #12
   1f8a0:	f36f 71df 	bfc	r1, #31, #1
   1f8a4:	2300      	movs	r3, #0
   1f8a6:	480b      	ldr	r0, [pc, #44]	; (1f8d4 <mcp2515_start+0x168>)
   1f8a8:	f005 ff83 	bl	257b2 <z_impl_z_log_msg_static_create>
   1f8ac:	46a5      	mov	sp, r4
		if (dev_cfg->phy != NULL) {
   1f8ae:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
   1f8b2:	2800      	cmp	r0, #0
   1f8b4:	d082      	beq.n	1f7bc <mcp2515_start+0x50>
	const struct can_transceiver_driver_api *api =
   1f8b6:	6883      	ldr	r3, [r0, #8]
	return api->disable(dev);
   1f8b8:	685b      	ldr	r3, [r3, #4]
   1f8ba:	4798      	blx	r3
   1f8bc:	e77e      	b.n	1f7bc <mcp2515_start+0x50>
		LOG_ERR("Failed to set the mode [%d]", ret);
   1f8be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1f8c2:	e7c6      	b.n	1f852 <mcp2515_start+0xe6>
   1f8c4:	f06f 061b 	mvn.w	r6, #27
   1f8c8:	e7cf      	b.n	1f86a <mcp2515_start+0xfe>
		return -EALREADY;
   1f8ca:	f06f 0577 	mvn.w	r5, #119	; 0x77
   1f8ce:	e778      	b.n	1f7c2 <mcp2515_start+0x56>
   1f8d0:	0002d794 	.word	0x0002d794
   1f8d4:	0002b1c4 	.word	0x0002b1c4
   1f8d8:	0002d7bc 	.word	0x0002d7bc

0001f8dc <random_byte_get>:
	__asm__ volatile(
   1f8dc:	f04f 0240 	mov.w	r2, #64	; 0x40
   1f8e0:	f3ef 8311 	mrs	r3, BASEPRI
   1f8e4:	f382 8812 	msr	BASEPRI_MAX, r2
   1f8e8:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1f8ec:	4a0a      	ldr	r2, [pc, #40]	; (1f918 <random_byte_get+0x3c>)
   1f8ee:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1f8f2:	b16a      	cbz	r2, 1f910 <random_byte_get+0x34>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1f8f4:	4a08      	ldr	r2, [pc, #32]	; (1f918 <random_byte_get+0x3c>)
   1f8f6:	f8d2 0508 	ldr.w	r0, [r2, #1288]	; 0x508
		retval = nrf_rng_random_value_get(NRF_RNG);
   1f8fa:	b2c0      	uxtb	r0, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1f8fc:	2100      	movs	r1, #0
   1f8fe:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
   1f902:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	__asm__ volatile(
   1f906:	f383 8811 	msr	BASEPRI, r3
   1f90a:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1f90e:	4770      	bx	lr
	int retval = -EAGAIN;
   1f910:	f06f 000a 	mvn.w	r0, #10
   1f914:	e7f7      	b.n	1f906 <random_byte_get+0x2a>
   1f916:	bf00      	nop
   1f918:	4000d000 	.word	0x4000d000

0001f91c <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1f91c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f91e:	4686      	mov	lr, r0
	uint32_t last  = rngp->last;
   1f920:	7885      	ldrb	r5, [r0, #2]
	uint32_t mask  = rngp->mask;
   1f922:	78c4      	ldrb	r4, [r0, #3]
	__asm__ volatile(
   1f924:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f928:	f3ef 8011 	mrs	r0, BASEPRI
   1f92c:	f383 8812 	msr	BASEPRI_MAX, r3
   1f930:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1f934:	f89e 6000 	ldrb.w	r6, [lr]
   1f938:	4633      	mov	r3, r6
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1f93a:	f89e 7001 	ldrb.w	r7, [lr, #1]

	available = (last - first) & mask;
   1f93e:	1bad      	subs	r5, r5, r6
   1f940:	4025      	ands	r5, r4
	if (available < len) {
   1f942:	42aa      	cmp	r2, r5
   1f944:	d900      	bls.n	1f948 <rng_pool_get+0x2c>
		len = available;
   1f946:	b2aa      	uxth	r2, r5

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1f948:	eb06 0c02 	add.w	ip, r6, r2
   1f94c:	ea0c 0c04 	and.w	ip, ip, r4
   1f950:	f88e c000 	strb.w	ip, [lr]
	__asm__ volatile(
   1f954:	f380 8811 	msr	BASEPRI, r0
   1f958:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
   1f95c:	4608      	mov	r0, r1
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1f95e:	e007      	b.n	1f970 <rng_pool_get+0x54>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
   1f960:	eb0e 0203 	add.w	r2, lr, r3
   1f964:	7952      	ldrb	r2, [r2, #5]
   1f966:	f800 2b01 	strb.w	r2, [r0], #1
		first = (first + 1) & mask;
   1f96a:	3301      	adds	r3, #1
   1f96c:	4023      	ands	r3, r4
	while (likely(len--)) {
   1f96e:	4662      	mov	r2, ip
   1f970:	f102 3cff 	add.w	ip, r2, #4294967295
   1f974:	fa1f fc8c 	uxth.w	ip, ip
   1f978:	2a00      	cmp	r2, #0
   1f97a:	d1f1      	bne.n	1f960 <rng_pool_get+0x44>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1f97c:	42be      	cmp	r6, r7
   1f97e:	d10f      	bne.n	1f9a0 <rng_pool_get+0x84>
	__asm__ volatile(
   1f980:	f04f 0240 	mov.w	r2, #64	; 0x40
   1f984:	f3ef 8311 	mrs	r3, BASEPRI
   1f988:	f382 8812 	msr	BASEPRI_MAX, r2
   1f98c:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1f990:	f89e 2000 	ldrb.w	r2, [lr]
   1f994:	f88e 2001 	strb.w	r2, [lr, #1]
	__asm__ volatile(
   1f998:	f383 8811 	msr	BASEPRI, r3
   1f99c:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1f9a0:	1a40      	subs	r0, r0, r1
   1f9a2:	b280      	uxth	r0, r0
	available = available - len;
   1f9a4:	1a2d      	subs	r5, r5, r0
	if (available <= rngp->threshold) {
   1f9a6:	f89e 3004 	ldrb.w	r3, [lr, #4]
   1f9aa:	42ab      	cmp	r3, r5
   1f9ac:	d302      	bcc.n	1f9b4 <rng_pool_get+0x98>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1f9ae:	4b02      	ldr	r3, [pc, #8]	; (1f9b8 <rng_pool_get+0x9c>)
   1f9b0:	2201      	movs	r2, #1
   1f9b2:	601a      	str	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1f9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f9b6:	bf00      	nop
   1f9b8:	4000d000 	.word	0x4000d000

0001f9bc <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   1f9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f9be:	460d      	mov	r5, r1
   1f9c0:	4614      	mov	r4, r2
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1f9c2:	f013 0f01 	tst.w	r3, #1
   1f9c6:	d103      	bne.n	1f9d0 <entropy_nrf5_get_entropy_isr+0x14>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1f9c8:	4826      	ldr	r0, [pc, #152]	; (1fa64 <entropy_nrf5_get_entropy_isr+0xa8>)
   1f9ca:	f7ff ffa7 	bl	1f91c <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1f9ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
   1f9d0:	b90a      	cbnz	r2, 1f9d6 <entropy_nrf5_get_entropy_isr+0x1a>
	return cnt;
   1f9d2:	4620      	mov	r0, r4
   1f9d4:	e7fb      	b.n	1f9ce <entropy_nrf5_get_entropy_isr+0x12>
	__asm__ volatile(
   1f9d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f9da:	f3ef 8611 	mrs	r6, BASEPRI
   1f9de:	f383 8812 	msr	BASEPRI_MAX, r3
   1f9e2:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1f9e6:	200d      	movs	r0, #13
   1f9e8:	f7f5 f8f8 	bl	14bdc <arch_irq_is_enabled>
   1f9ec:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1f9ee:	200d      	movs	r0, #13
   1f9f0:	f006 fa4a 	bl	25e88 <arch_irq_disable>
	__asm__ volatile(
   1f9f4:	f386 8811 	msr	BASEPRI, r6
   1f9f8:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1f9fc:	4b1a      	ldr	r3, [pc, #104]	; (1fa68 <entropy_nrf5_get_entropy_isr+0xac>)
   1f9fe:	2200      	movs	r2, #0
   1fa00:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1fa04:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1fa08:	2201      	movs	r2, #1
   1fa0a:	601a      	str	r2, [r3, #0]
   1fa0c:	4b17      	ldr	r3, [pc, #92]	; (1fa6c <entropy_nrf5_get_entropy_isr+0xb0>)
   1fa0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1fa12:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1fa16:	4626      	mov	r6, r4
   1fa18:	e00b      	b.n	1fa32 <entropy_nrf5_get_entropy_isr+0x76>
	__asm__ volatile(
   1fa1a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fa1e:	f3ef 8011 	mrs	r0, BASEPRI
   1fa22:	f383 8812 	msr	BASEPRI_MAX, r3
   1fa26:	f3bf 8f6f 	isb	sy
   1fa2a:	f7f4 ff71 	bl	14910 <arch_cpu_atomic_idle>
}
   1fa2e:	e000      	b.n	1fa32 <entropy_nrf5_get_entropy_isr+0x76>
		} while (len);
   1fa30:	b18e      	cbz	r6, 1fa56 <entropy_nrf5_get_entropy_isr+0x9a>
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1fa32:	4b0d      	ldr	r3, [pc, #52]	; (1fa68 <entropy_nrf5_get_entropy_isr+0xac>)
   1fa34:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1fa38:	2b00      	cmp	r3, #0
   1fa3a:	d0ee      	beq.n	1fa1a <entropy_nrf5_get_entropy_isr+0x5e>
			byte = random_byte_get();
   1fa3c:	f7ff ff4e 	bl	1f8dc <random_byte_get>
   1fa40:	4b0a      	ldr	r3, [pc, #40]	; (1fa6c <entropy_nrf5_get_entropy_isr+0xb0>)
   1fa42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1fa46:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			if (byte < 0) {
   1fa4a:	2800      	cmp	r0, #0
   1fa4c:	dbf0      	blt.n	1fa30 <entropy_nrf5_get_entropy_isr+0x74>
			buf[--len] = byte;
   1fa4e:	3e01      	subs	r6, #1
   1fa50:	b2b6      	uxth	r6, r6
   1fa52:	55a8      	strb	r0, [r5, r6]
   1fa54:	e7ec      	b.n	1fa30 <entropy_nrf5_get_entropy_isr+0x74>
		if (irq_enabled) {
   1fa56:	2f00      	cmp	r7, #0
   1fa58:	d0bb      	beq.n	1f9d2 <entropy_nrf5_get_entropy_isr+0x16>
			irq_enable(IRQN);
   1fa5a:	200d      	movs	r0, #13
   1fa5c:	f006 fa0f 	bl	25e7e <arch_irq_enable>
   1fa60:	e7b7      	b.n	1f9d2 <entropy_nrf5_get_entropy_isr+0x16>
   1fa62:	bf00      	nop
   1fa64:	20006330 	.word	0x20006330
   1fa68:	4000d000 	.word	0x4000d000
   1fa6c:	e000e100 	.word	0xe000e100

0001fa70 <isr>:
{
   1fa70:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1fa72:	f7ff ff33 	bl	1f8dc <random_byte_get>
	if (byte < 0) {
   1fa76:	2800      	cmp	r0, #0
   1fa78:	db06      	blt.n	1fa88 <isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1fa7a:	b2c4      	uxtb	r4, r0
   1fa7c:	4621      	mov	r1, r4
   1fa7e:	480a      	ldr	r0, [pc, #40]	; (1faa8 <isr+0x38>)
   1fa80:	f009 fbc8 	bl	29214 <rng_pool_put>
	if (ret < 0) {
   1fa84:	2800      	cmp	r0, #0
   1fa86:	db00      	blt.n	1fa8a <isr+0x1a>
}
   1fa88:	bd10      	pop	{r4, pc}
		ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.thr),
   1fa8a:	4621      	mov	r1, r4
   1fa8c:	4807      	ldr	r0, [pc, #28]	; (1faac <isr+0x3c>)
   1fa8e:	f009 fbc1 	bl	29214 <rng_pool_put>
		if (ret < 0) {
   1fa92:	2800      	cmp	r0, #0
   1fa94:	db03      	blt.n	1fa9e <isr+0x2e>
	z_impl_k_sem_give(sem);
   1fa96:	4806      	ldr	r0, [pc, #24]	; (1fab0 <isr+0x40>)
   1fa98:	f003 f86c 	bl	22b74 <z_impl_k_sem_give>
}
   1fa9c:	e7f4      	b.n	1fa88 <isr+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1fa9e:	4b05      	ldr	r3, [pc, #20]	; (1fab4 <isr+0x44>)
   1faa0:	2201      	movs	r2, #1
   1faa2:	605a      	str	r2, [r3, #4]
}
   1faa4:	e7f7      	b.n	1fa96 <isr+0x26>
   1faa6:	bf00      	nop
   1faa8:	20006330 	.word	0x20006330
   1faac:	20006345 	.word	0x20006345
   1fab0:	20006318 	.word	0x20006318
   1fab4:	4000d000 	.word	0x4000d000

0001fab8 <entropy_nrf5_get_entropy>:
{
   1fab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1faba:	460f      	mov	r7, r1
   1fabc:	4614      	mov	r4, r2
	while (len) {
   1fabe:	e007      	b.n	1fad0 <entropy_nrf5_get_entropy+0x18>
	return z_impl_k_sem_take(sem, timeout);
   1fac0:	f04f 32ff 	mov.w	r2, #4294967295
   1fac4:	f04f 33ff 	mov.w	r3, #4294967295
   1fac8:	f106 0018 	add.w	r0, r6, #24
   1facc:	f003 f87a 	bl	22bc4 <z_impl_k_sem_take>
   1fad0:	b1bc      	cbz	r4, 1fb02 <entropy_nrf5_get_entropy+0x4a>
   1fad2:	4e0d      	ldr	r6, [pc, #52]	; (1fb08 <entropy_nrf5_get_entropy+0x50>)
   1fad4:	f04f 32ff 	mov.w	r2, #4294967295
   1fad8:	f04f 33ff 	mov.w	r3, #4294967295
   1fadc:	4630      	mov	r0, r6
   1fade:	f003 f871 	bl	22bc4 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1fae2:	4622      	mov	r2, r4
   1fae4:	4639      	mov	r1, r7
   1fae6:	f106 0045 	add.w	r0, r6, #69	; 0x45
   1faea:	f7ff ff17 	bl	1f91c <rng_pool_get>
   1faee:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   1faf0:	4630      	mov	r0, r6
   1faf2:	f003 f83f 	bl	22b74 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1faf6:	2d00      	cmp	r5, #0
   1faf8:	d0e2      	beq.n	1fac0 <entropy_nrf5_get_entropy+0x8>
		len -= bytes;
   1fafa:	1b64      	subs	r4, r4, r5
   1fafc:	b2a4      	uxth	r4, r4
		buf += bytes;
   1fafe:	442f      	add	r7, r5
   1fb00:	e7e6      	b.n	1fad0 <entropy_nrf5_get_entropy+0x18>
}
   1fb02:	2000      	movs	r0, #0
   1fb04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fb06:	bf00      	nop
   1fb08:	20006300 	.word	0x20006300

0001fb0c <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1fb0c:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1fb0e:	4c18      	ldr	r4, [pc, #96]	; (1fb70 <entropy_nrf5_init+0x64>)
   1fb10:	2201      	movs	r2, #1
   1fb12:	4611      	mov	r1, r2
   1fb14:	4620      	mov	r0, r4
   1fb16:	f00a fb8c 	bl	2a232 <z_impl_k_sem_init>
   1fb1a:	2201      	movs	r2, #1
   1fb1c:	2100      	movs	r1, #0
   1fb1e:	f104 0018 	add.w	r0, r4, #24
   1fb22:	f00a fb86 	bl	2a232 <z_impl_k_sem_init>
	k_sem_init(&entropy_nrf5_data.sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&entropy_nrf5_data.sem_sync, 0, 1);

	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.thr),
   1fb26:	2204      	movs	r2, #4
   1fb28:	2108      	movs	r1, #8
   1fb2a:	f104 0045 	add.w	r0, r4, #69	; 0x45
   1fb2e:	f009 fb84 	bl	2923a <rng_pool_init>
		      CONFIG_ENTROPY_NRF5_THR_POOL_SIZE,
		      CONFIG_ENTROPY_NRF5_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.isr),
   1fb32:	220c      	movs	r2, #12
   1fb34:	2110      	movs	r1, #16
   1fb36:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1fb3a:	f009 fb7e 	bl	2923a <rng_pool_init>
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1fb3e:	4b0d      	ldr	r3, [pc, #52]	; (1fb74 <entropy_nrf5_init+0x68>)
   1fb40:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1fb44:	f022 0201 	bic.w	r2, r2, #1
   1fb48:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1fb4c:	2400      	movs	r4, #0
   1fb4e:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
   1fb52:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1fb56:	2101      	movs	r1, #1
   1fb58:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1fb5c:	6019      	str	r1, [r3, #0]

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1fb5e:	4622      	mov	r2, r4
   1fb60:	200d      	movs	r0, #13
   1fb62:	f006 f996 	bl	25e92 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1fb66:	200d      	movs	r0, #13
   1fb68:	f006 f989 	bl	25e7e <arch_irq_enable>

	return 0;
}
   1fb6c:	4620      	mov	r0, r4
   1fb6e:	bd10      	pop	{r4, pc}
   1fb70:	20006300 	.word	0x20006300
   1fb74:	4000d000 	.word	0x4000d000

0001fb78 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1fb78:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   1fb7c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1fb80:	4b01      	ldr	r3, [pc, #4]	; (1fb88 <set_comparator+0x10>)
   1fb82:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   1fb86:	4770      	bx	lr
   1fb88:	40011000 	.word	0x40011000

0001fb8c <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1fb8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1fb90:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1fb92:	4a02      	ldr	r2, [pc, #8]	; (1fb9c <event_enable+0x10>)
   1fb94:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   1fb98:	4770      	bx	lr
   1fb9a:	bf00      	nop
   1fb9c:	40011000 	.word	0x40011000

0001fba0 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1fba0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1fba4:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1fba6:	4a02      	ldr	r2, [pc, #8]	; (1fbb0 <event_disable+0x10>)
   1fba8:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   1fbac:	4770      	bx	lr
   1fbae:	bf00      	nop
   1fbb0:	40011000 	.word	0x40011000

0001fbb4 <counter>:
     return p_reg->COUNTER;
   1fbb4:	4b01      	ldr	r3, [pc, #4]	; (1fbbc <counter+0x8>)
   1fbb6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   1fbba:	4770      	bx	lr
   1fbbc:	40011000 	.word	0x40011000

0001fbc0 <set_alarm>:
 * @param[in] chan A channel for which a new CC value is to be set.
 *
 * @param[in] req_cc Requested CC register value to be set.
 */
static void set_alarm(int32_t chan, uint32_t req_cc)
{
   1fbc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fbc4:	4606      	mov	r6, r0
   1fbc6:	4688      	mov	r8, r1
	 * (however, even if such spurious event was generated, it would be
	 * properly filtered out in process_channel(), where the target time
	 * is checked).
	 * Clear also the event as it may already be generated at this point.
	 */
	event_disable(chan);
   1fbc8:	f7ff ffea 	bl	1fba0 <event_disable>
	event_clear(chan);
   1fbcc:	4630      	mov	r0, r6
   1fbce:	f009 fb5e 	bl	2928e <event_clear>
	uint32_t cc_val = req_cc;
   1fbd2:	4645      	mov	r5, r8
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   1fbd4:	2703      	movs	r7, #3
   1fbd6:	e001      	b.n	1fbdc <set_alarm+0x1c>
				} else {
					break;
				}
			}

			cc_val = now + cc_inc;
   1fbd8:	193d      	adds	r5, r7, r4
			cc_inc++;
   1fbda:	3701      	adds	r7, #1
		set_comparator(chan, cc_val);
   1fbdc:	4629      	mov	r1, r5
   1fbde:	4630      	mov	r0, r6
   1fbe0:	f7ff ffca 	bl	1fb78 <set_comparator>
		event_enable(chan);
   1fbe4:	4630      	mov	r0, r6
   1fbe6:	f7ff ffd1 	bl	1fb8c <event_enable>
		now = counter();
   1fbea:	f7ff ffe3 	bl	1fbb4 <counter>
   1fbee:	4604      	mov	r4, r0
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1fbf0:	1cc1      	adds	r1, r0, #3
   1fbf2:	4628      	mov	r0, r5
   1fbf4:	f009 fb3a 	bl	2926c <counter_sub>
   1fbf8:	4b0b      	ldr	r3, [pc, #44]	; (1fc28 <set_alarm+0x68>)
   1fbfa:	4298      	cmp	r0, r3
   1fbfc:	d911      	bls.n	1fc22 <set_alarm+0x62>
			if (event_check(chan)) {
   1fbfe:	4630      	mov	r0, r6
   1fc00:	f009 fb38 	bl	29274 <event_check>
   1fc04:	2800      	cmp	r0, #0
   1fc06:	d0e7      	beq.n	1fbd8 <set_alarm+0x18>
				now = counter();
   1fc08:	f7ff ffd4 	bl	1fbb4 <counter>
   1fc0c:	4604      	mov	r4, r0
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   1fc0e:	4641      	mov	r1, r8
   1fc10:	f009 fb2c 	bl	2926c <counter_sub>
   1fc14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1fc18:	d903      	bls.n	1fc22 <set_alarm+0x62>
					event_clear(chan);
   1fc1a:	4630      	mov	r0, r6
   1fc1c:	f009 fb37 	bl	2928e <event_clear>
   1fc20:	e7da      	b.n	1fbd8 <set_alarm+0x18>
		} else {
			break;
		}
	}
}
   1fc22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fc26:	bf00      	nop
   1fc28:	007ffffd 	.word	0x007ffffd

0001fc2c <compare_int_lock>:
{
   1fc2c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1fc2e:	2301      	movs	r3, #1
   1fc30:	4083      	lsls	r3, r0
   1fc32:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1fc36:	4a0e      	ldr	r2, [pc, #56]	; (1fc70 <compare_int_lock+0x44>)
   1fc38:	f3bf 8f5b 	dmb	ish
   1fc3c:	e852 1f00 	ldrex	r1, [r2]
   1fc40:	ea01 0e0c 	and.w	lr, r1, ip
   1fc44:	e842 e400 	strex	r4, lr, [r2]
   1fc48:	2c00      	cmp	r4, #0
   1fc4a:	d1f7      	bne.n	1fc3c <compare_int_lock+0x10>
   1fc4c:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1fc50:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1fc54:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   1fc56:	4807      	ldr	r0, [pc, #28]	; (1fc74 <compare_int_lock+0x48>)
   1fc58:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1fc5c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1fc60:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
   1fc64:	420b      	tst	r3, r1
}
   1fc66:	bf14      	ite	ne
   1fc68:	2001      	movne	r0, #1
   1fc6a:	2000      	moveq	r0, #0
   1fc6c:	bd10      	pop	{r4, pc}
   1fc6e:	bf00      	nop
   1fc70:	20006358 	.word	0x20006358
   1fc74:	40011000 	.word	0x40011000

0001fc78 <channel_processing_check_and_clear>:
	sys_clock_announce(dticks);
}

static bool channel_processing_check_and_clear(int32_t chan)
{
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1fc78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1fc7c:	4083      	lsls	r3, r0
    return p_reg->INTENSET & mask;
   1fc7e:	4a14      	ldr	r2, [pc, #80]	; (1fcd0 <channel_processing_check_and_clear+0x58>)
   1fc80:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   1fc84:	4213      	tst	r3, r2
   1fc86:	d101      	bne.n	1fc8c <channel_processing_check_and_clear+0x14>
			event_clear(chan);
			return true;
		}
	}

	return false;
   1fc88:	2000      	movs	r0, #0
}
   1fc8a:	4770      	bx	lr
{
   1fc8c:	b510      	push	{r4, lr}
   1fc8e:	4604      	mov	r4, r0
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   1fc90:	2301      	movs	r3, #1
   1fc92:	4083      	lsls	r3, r0
   1fc94:	43db      	mvns	r3, r3
   1fc96:	490f      	ldr	r1, [pc, #60]	; (1fcd4 <channel_processing_check_and_clear+0x5c>)
   1fc98:	f3bf 8f5b 	dmb	ish
   1fc9c:	e851 2f00 	ldrex	r2, [r1]
   1fca0:	ea02 0003 	and.w	r0, r2, r3
   1fca4:	e841 0c00 	strex	ip, r0, [r1]
   1fca8:	f1bc 0f00 	cmp.w	ip, #0
   1fcac:	d1f6      	bne.n	1fc9c <channel_processing_check_and_clear+0x24>
   1fcae:	f3bf 8f5b 	dmb	ish
   1fcb2:	fa22 f304 	lsr.w	r3, r2, r4
   1fcb6:	f013 0f01 	tst.w	r3, #1
   1fcba:	d103      	bne.n	1fcc4 <channel_processing_check_and_clear+0x4c>
		    event_check(chan)) {
   1fcbc:	4620      	mov	r0, r4
   1fcbe:	f009 fad9 	bl	29274 <event_check>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   1fcc2:	b118      	cbz	r0, 1fccc <channel_processing_check_and_clear+0x54>
			event_clear(chan);
   1fcc4:	4620      	mov	r0, r4
   1fcc6:	f009 fae2 	bl	2928e <event_clear>
			return true;
   1fcca:	2001      	movs	r0, #1
}
   1fccc:	bd10      	pop	{r4, pc}
   1fcce:	bf00      	nop
   1fcd0:	40011000 	.word	0x40011000
   1fcd4:	20006354 	.word	0x20006354

0001fcd8 <compare_int_unlock>:
	if (key) {
   1fcd8:	b901      	cbnz	r1, 1fcdc <compare_int_unlock+0x4>
}
   1fcda:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   1fcdc:	2301      	movs	r3, #1
   1fcde:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1fce0:	4a11      	ldr	r2, [pc, #68]	; (1fd28 <compare_int_unlock+0x50>)
   1fce2:	f3bf 8f5b 	dmb	ish
   1fce6:	e852 cf00 	ldrex	ip, [r2]
   1fcea:	ea4c 0c03 	orr.w	ip, ip, r3
   1fcee:	e842 c100 	strex	r1, ip, [r2]
   1fcf2:	2900      	cmp	r1, #0
   1fcf4:	d1f7      	bne.n	1fce6 <compare_int_unlock+0xe>
   1fcf6:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1fcfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1fcfe:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   1fd00:	4a0a      	ldr	r2, [pc, #40]	; (1fd2c <compare_int_unlock+0x54>)
   1fd02:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fd06:	f3bf 8f5b 	dmb	ish
   1fd0a:	4b09      	ldr	r3, [pc, #36]	; (1fd30 <compare_int_unlock+0x58>)
   1fd0c:	681b      	ldr	r3, [r3, #0]
   1fd0e:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1fd12:	40c3      	lsrs	r3, r0
   1fd14:	f013 0f01 	tst.w	r3, #1
   1fd18:	d0df      	beq.n	1fcda <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1fd1a:	4b06      	ldr	r3, [pc, #24]	; (1fd34 <compare_int_unlock+0x5c>)
   1fd1c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1fd20:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1fd24:	e7d9      	b.n	1fcda <compare_int_unlock+0x2>
   1fd26:	bf00      	nop
   1fd28:	20006358 	.word	0x20006358
   1fd2c:	40011000 	.word	0x40011000
   1fd30:	20006354 	.word	0x20006354
   1fd34:	e000e100 	.word	0xe000e100

0001fd38 <sys_clock_timeout_handler>:
{
   1fd38:	b538      	push	{r3, r4, r5, lr}
   1fd3a:	4614      	mov	r4, r2
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   1fd3c:	4610      	mov	r0, r2
   1fd3e:	4619      	mov	r1, r3
   1fd40:	f009 fab1 	bl	292a6 <absolute_time_to_cc>
   1fd44:	4602      	mov	r2, r0
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   1fd46:	490d      	ldr	r1, [pc, #52]	; (1fd7c <sys_clock_timeout_handler+0x44>)
   1fd48:	680b      	ldr	r3, [r1, #0]
   1fd4a:	1ae0      	subs	r0, r4, r3
	last_count += dticks * CYC_PER_TICK;
   1fd4c:	181b      	adds	r3, r3, r0
   1fd4e:	684c      	ldr	r4, [r1, #4]
   1fd50:	f144 0400 	adc.w	r4, r4, #0
   1fd54:	600b      	str	r3, [r1, #0]
   1fd56:	604c      	str	r4, [r1, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1fd58:	f5a2 1300 	sub.w	r3, r2, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   1fd5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1fd60:	d209      	bcs.n	1fd76 <sys_clock_timeout_handler+0x3e>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1fd62:	4b07      	ldr	r3, [pc, #28]	; (1fd80 <sys_clock_timeout_handler+0x48>)
   1fd64:	681b      	ldr	r3, [r3, #0]
   1fd66:	0a19      	lsrs	r1, r3, #8
   1fd68:	061b      	lsls	r3, r3, #24
   1fd6a:	18d4      	adds	r4, r2, r3
   1fd6c:	f141 0500 	adc.w	r5, r1, #0
   1fd70:	4b04      	ldr	r3, [pc, #16]	; (1fd84 <sys_clock_timeout_handler+0x4c>)
   1fd72:	e9c3 4500 	strd	r4, r5, [r3]
	sys_clock_announce(dticks);
   1fd76:	f003 fdf7 	bl	23968 <sys_clock_announce>
}
   1fd7a:	bd38      	pop	{r3, r4, r5, pc}
   1fd7c:	200027b0 	.word	0x200027b0
   1fd80:	2000635c 	.word	0x2000635c
   1fd84:	200027b8 	.word	0x200027b8

0001fd88 <z_nrf_rtc_timer_read>:
{
   1fd88:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1fd8a:	4b0d      	ldr	r3, [pc, #52]	; (1fdc0 <z_nrf_rtc_timer_read+0x38>)
   1fd8c:	681c      	ldr	r4, [r3, #0]
   1fd8e:	0a25      	lsrs	r5, r4, #8
   1fd90:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1fd92:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   1fd96:	f7ff ff0d 	bl	1fbb4 <counter>
   1fd9a:	4603      	mov	r3, r0
	val += cntr;
   1fd9c:	1900      	adds	r0, r0, r4
   1fd9e:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1fda2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1fda6:	d20a      	bcs.n	1fdbe <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   1fda8:	4b06      	ldr	r3, [pc, #24]	; (1fdc4 <z_nrf_rtc_timer_read+0x3c>)
   1fdaa:	e9d3 2300 	ldrd	r2, r3, [r3]
   1fdae:	4290      	cmp	r0, r2
   1fdb0:	eb71 0303 	sbcs.w	r3, r1, r3
   1fdb4:	d203      	bcs.n	1fdbe <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   1fdb6:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1fdba:	f141 0100 	adc.w	r1, r1, #0
}
   1fdbe:	bd38      	pop	{r3, r4, r5, pc}
   1fdc0:	2000635c 	.word	0x2000635c
   1fdc4:	200027b8 	.word	0x200027b8

0001fdc8 <compare_set_nolocks>:
{
   1fdc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fdca:	4606      	mov	r6, r0
   1fdcc:	4614      	mov	r4, r2
   1fdce:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   1fdd0:	4610      	mov	r0, r2
   1fdd2:	4619      	mov	r1, r3
   1fdd4:	f009 fa67 	bl	292a6 <absolute_time_to_cc>
   1fdd8:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1fdda:	f7ff ffd5 	bl	1fd88 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1fdde:	42a0      	cmp	r0, r4
   1fde0:	eb71 0305 	sbcs.w	r3, r1, r5
   1fde4:	d215      	bcs.n	1fe12 <compare_set_nolocks+0x4a>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   1fde6:	1a20      	subs	r0, r4, r0
   1fde8:	eb65 0101 	sbc.w	r1, r5, r1
   1fdec:	4b17      	ldr	r3, [pc, #92]	; (1fe4c <compare_set_nolocks+0x84>)
   1fdee:	4298      	cmp	r0, r3
   1fdf0:	f171 0100 	sbcs.w	r1, r1, #0
   1fdf4:	d227      	bcs.n	1fe46 <compare_set_nolocks+0x7e>
		if (target_time != cc_data[chan].target_time) {
   1fdf6:	4b16      	ldr	r3, [pc, #88]	; (1fe50 <compare_set_nolocks+0x88>)
   1fdf8:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   1fdfc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1fe00:	42ab      	cmp	r3, r5
   1fe02:	bf08      	it	eq
   1fe04:	42a2      	cmpeq	r2, r4
   1fe06:	d012      	beq.n	1fe2e <compare_set_nolocks+0x66>
			set_alarm(chan, cc_value);
   1fe08:	4639      	mov	r1, r7
   1fe0a:	4630      	mov	r0, r6
   1fe0c:	f7ff fed8 	bl	1fbc0 <set_alarm>
   1fe10:	e00d      	b.n	1fe2e <compare_set_nolocks+0x66>
		atomic_or(&force_isr_mask, BIT(chan));
   1fe12:	2301      	movs	r3, #1
   1fe14:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1fe16:	4a0f      	ldr	r2, [pc, #60]	; (1fe54 <compare_set_nolocks+0x8c>)
   1fe18:	f3bf 8f5b 	dmb	ish
   1fe1c:	e852 0f00 	ldrex	r0, [r2]
   1fe20:	4318      	orrs	r0, r3
   1fe22:	e842 0100 	strex	r1, r0, [r2]
   1fe26:	2900      	cmp	r1, #0
   1fe28:	d1f8      	bne.n	1fe1c <compare_set_nolocks+0x54>
   1fe2a:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   1fe2e:	4b08      	ldr	r3, [pc, #32]	; (1fe50 <compare_set_nolocks+0x88>)
   1fe30:	0132      	lsls	r2, r6, #4
   1fe32:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   1fe36:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   1fe3a:	9906      	ldr	r1, [sp, #24]
   1fe3c:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   1fe3e:	9b07      	ldr	r3, [sp, #28]
   1fe40:	6073      	str	r3, [r6, #4]
	return ret;
   1fe42:	2000      	movs	r0, #0
}
   1fe44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
   1fe46:	f06f 0015 	mvn.w	r0, #21
   1fe4a:	e7fb      	b.n	1fe44 <compare_set_nolocks+0x7c>
   1fe4c:	00800001 	.word	0x00800001
   1fe50:	200027a0 	.word	0x200027a0
   1fe54:	20006354 	.word	0x20006354

0001fe58 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1fe58:	b530      	push	{r4, r5, lr}
   1fe5a:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
   1fe5c:	2300      	movs	r3, #0
   1fe5e:	4a1d      	ldr	r2, [pc, #116]	; (1fed4 <sys_clock_driver_init+0x7c>)
   1fe60:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1fe64:	2b00      	cmp	r3, #0
   1fe66:	dd24      	ble.n	1feb2 <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
   1fe68:	4c1a      	ldr	r4, [pc, #104]	; (1fed4 <sys_clock_driver_init+0x7c>)
   1fe6a:	2502      	movs	r5, #2
   1fe6c:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1fe70:	4b19      	ldr	r3, [pc, #100]	; (1fed8 <sys_clock_driver_init+0x80>)
   1fe72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1fe76:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1fe7a:	2200      	movs	r2, #0
   1fe7c:	2101      	movs	r1, #1
   1fe7e:	2011      	movs	r0, #17
   1fe80:	f006 f807 	bl	25e92 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1fe84:	2011      	movs	r0, #17
   1fe86:	f005 fffa 	bl	25e7e <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1fe8a:	2301      	movs	r3, #1
   1fe8c:	60a3      	str	r3, [r4, #8]
   1fe8e:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1fe90:	4a12      	ldr	r2, [pc, #72]	; (1fedc <sys_clock_driver_init+0x84>)
   1fe92:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1fe94:	2400      	movs	r4, #0
   1fe96:	9401      	str	r4, [sp, #4]
   1fe98:	4b11      	ldr	r3, [pc, #68]	; (1fee0 <sys_clock_driver_init+0x88>)
   1fe9a:	9300      	str	r3, [sp, #0]
   1fe9c:	4a11      	ldr	r2, [pc, #68]	; (1fee4 <sys_clock_driver_init+0x8c>)
   1fe9e:	2300      	movs	r3, #0
   1fea0:	4620      	mov	r0, r4
   1fea2:	f009 fa0a 	bl	292ba <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1fea6:	4628      	mov	r0, r5
   1fea8:	f7fd fef4 	bl	1dc94 <z_nrf_clock_control_lf_on>

	return 0;
}
   1feac:	4620      	mov	r0, r4
   1feae:	b003      	add	sp, #12
   1feb0:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1feb2:	4a0d      	ldr	r2, [pc, #52]	; (1fee8 <sys_clock_driver_init+0x90>)
   1feb4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1feb8:	f04f 30ff 	mov.w	r0, #4294967295
   1febc:	f04f 31ff 	mov.w	r1, #4294967295
   1fec0:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1fec4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1fec8:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   1feca:	4902      	ldr	r1, [pc, #8]	; (1fed4 <sys_clock_driver_init+0x7c>)
   1fecc:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1fed0:	3301      	adds	r3, #1
   1fed2:	e7c7      	b.n	1fe64 <sys_clock_driver_init+0xc>
   1fed4:	40011000 	.word	0x40011000
   1fed8:	e000e100 	.word	0xe000e100
   1fedc:	20006358 	.word	0x20006358
   1fee0:	0001fd39 	.word	0x0001fd39
   1fee4:	007fffff 	.word	0x007fffff
   1fee8:	200027a0 	.word	0x200027a0

0001feec <process_channel>:
{
   1feec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fef0:	b082      	sub	sp, #8
   1fef2:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   1fef4:	f7ff fec0 	bl	1fc78 <channel_processing_check_and_clear>
   1fef8:	b910      	cbnz	r0, 1ff00 <process_channel+0x14>
}
   1fefa:	b002      	add	sp, #8
   1fefc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   1ff00:	f7ff ff42 	bl	1fd88 <z_nrf_rtc_timer_read>
   1ff04:	4682      	mov	sl, r0
   1ff06:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
   1ff08:	f009 f9d0 	bl	292ac <full_int_lock>
   1ff0c:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
   1ff0e:	4b15      	ldr	r3, [pc, #84]	; (1ff64 <process_channel+0x78>)
   1ff10:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   1ff14:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   1ff18:	45c2      	cmp	sl, r8
   1ff1a:	eb75 0509 	sbcs.w	r5, r5, r9
   1ff1e:	d20b      	bcs.n	1ff38 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   1ff20:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
   1ff22:	4630      	mov	r0, r6
   1ff24:	f009 f9c6 	bl	292b4 <full_int_unlock>
		if (handler) {
   1ff28:	2d00      	cmp	r5, #0
   1ff2a:	d0e6      	beq.n	1fefa <process_channel+0xe>
			handler(chan, expire_time, user_context);
   1ff2c:	9700      	str	r7, [sp, #0]
   1ff2e:	4642      	mov	r2, r8
   1ff30:	464b      	mov	r3, r9
   1ff32:	4620      	mov	r0, r4
   1ff34:	47a8      	blx	r5
}
   1ff36:	e7e0      	b.n	1fefa <process_channel+0xe>
			handler = cc_data[chan].callback;
   1ff38:	4a0a      	ldr	r2, [pc, #40]	; (1ff64 <process_channel+0x78>)
   1ff3a:	0123      	lsls	r3, r4, #4
   1ff3c:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   1ff40:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
   1ff42:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
   1ff44:	2000      	movs	r0, #0
   1ff46:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1ff48:	f04f 32ff 	mov.w	r2, #4294967295
   1ff4c:	f04f 33ff 	mov.w	r3, #4294967295
   1ff50:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   1ff54:	4620      	mov	r0, r4
   1ff56:	f7ff fe23 	bl	1fba0 <event_disable>
			event_clear(chan);
   1ff5a:	4620      	mov	r0, r4
   1ff5c:	f009 f997 	bl	2928e <event_clear>
   1ff60:	e7df      	b.n	1ff22 <process_channel+0x36>
   1ff62:	bf00      	nop
   1ff64:	200027a0 	.word	0x200027a0

0001ff68 <rtc_nrf_isr>:
{
   1ff68:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   1ff6a:	4b0e      	ldr	r3, [pc, #56]	; (1ffa4 <rtc_nrf_isr+0x3c>)
   1ff6c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1ff70:	f013 0f02 	tst.w	r3, #2
   1ff74:	d00d      	beq.n	1ff92 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ff76:	4b0b      	ldr	r3, [pc, #44]	; (1ffa4 <rtc_nrf_isr+0x3c>)
   1ff78:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1ff7c:	b14b      	cbz	r3, 1ff92 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1ff7e:	4b09      	ldr	r3, [pc, #36]	; (1ffa4 <rtc_nrf_isr+0x3c>)
   1ff80:	2200      	movs	r2, #0
   1ff82:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1ff86:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
   1ff8a:	4a07      	ldr	r2, [pc, #28]	; (1ffa8 <rtc_nrf_isr+0x40>)
   1ff8c:	6813      	ldr	r3, [r2, #0]
   1ff8e:	3301      	adds	r3, #1
   1ff90:	6013      	str	r3, [r2, #0]
{
   1ff92:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1ff94:	2c00      	cmp	r4, #0
   1ff96:	dd00      	ble.n	1ff9a <rtc_nrf_isr+0x32>
}
   1ff98:	bd10      	pop	{r4, pc}
		process_channel(chan);
   1ff9a:	4620      	mov	r0, r4
   1ff9c:	f7ff ffa6 	bl	1feec <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1ffa0:	3401      	adds	r4, #1
   1ffa2:	e7f7      	b.n	1ff94 <rtc_nrf_isr+0x2c>
   1ffa4:	40011000 	.word	0x40011000
   1ffa8:	2000635c 	.word	0x2000635c

0001ffac <sys_clock_set_timeout>:
{
   1ffac:	b510      	push	{r4, lr}
   1ffae:	b082      	sub	sp, #8
	if (ticks == K_TICKS_FOREVER) {
   1ffb0:	f1b0 3fff 	cmp.w	r0, #4294967295
   1ffb4:	d006      	beq.n	1ffc4 <sys_clock_set_timeout+0x18>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1ffb6:	2801      	cmp	r0, #1
   1ffb8:	dd09      	ble.n	1ffce <sys_clock_set_timeout+0x22>
   1ffba:	4b15      	ldr	r3, [pc, #84]	; (20010 <CONFIG_PM_SRAM_SIZE+0x10>)
   1ffbc:	4298      	cmp	r0, r3
   1ffbe:	dc24      	bgt.n	2000a <CONFIG_PM_SRAM_SIZE+0xa>
   1ffc0:	4604      	mov	r4, r0
   1ffc2:	e005      	b.n	1ffd0 <sys_clock_set_timeout+0x24>
		sys_busy = false;
   1ffc4:	4b13      	ldr	r3, [pc, #76]	; (20014 <CONFIG_PM_SRAM_SIZE+0x14>)
   1ffc6:	2200      	movs	r2, #0
   1ffc8:	701a      	strb	r2, [r3, #0]
		cyc = MAX_TICKS * CYC_PER_TICK;
   1ffca:	4c13      	ldr	r4, [pc, #76]	; (20018 <CONFIG_PM_SRAM_SIZE+0x18>)
   1ffcc:	e003      	b.n	1ffd6 <sys_clock_set_timeout+0x2a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1ffce:	2401      	movs	r4, #1
		sys_busy = true;
   1ffd0:	4b10      	ldr	r3, [pc, #64]	; (20014 <CONFIG_PM_SRAM_SIZE+0x14>)
   1ffd2:	2201      	movs	r2, #1
   1ffd4:	701a      	strb	r2, [r3, #0]
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1ffd6:	f7ff fed7 	bl	1fd88 <z_nrf_rtc_timer_read>
   1ffda:	4b10      	ldr	r3, [pc, #64]	; (2001c <CONFIG_PM_SRAM_SIZE+0x1c>)
   1ffdc:	681a      	ldr	r2, [r3, #0]
   1ffde:	685b      	ldr	r3, [r3, #4]
   1ffe0:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
   1ffe2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1ffe6:	d300      	bcc.n	1ffea <sys_clock_set_timeout+0x3e>
		cyc = 0;
   1ffe8:	2400      	movs	r4, #0
	cyc += unannounced;
   1ffea:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   1ffec:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
   1fff0:	d300      	bcc.n	1fff4 <sys_clock_set_timeout+0x48>
		cyc = MAX_CYCLES;
   1fff2:	4c09      	ldr	r4, [pc, #36]	; (20018 <CONFIG_PM_SRAM_SIZE+0x18>)
	uint64_t target_time = cyc + last_count;
   1fff4:	2000      	movs	r0, #0
   1fff6:	1912      	adds	r2, r2, r4
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1fff8:	9001      	str	r0, [sp, #4]
   1fffa:	4909      	ldr	r1, [pc, #36]	; (20020 <CONFIG_PM_SRAM_SIZE+0x20>)
   1fffc:	9100      	str	r1, [sp, #0]
   1fffe:	f143 0300 	adc.w	r3, r3, #0
   20002:	f009 f95a 	bl	292ba <compare_set>
}
   20006:	b002      	add	sp, #8
   20008:	bd10      	pop	{r4, pc}
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   2000a:	4c03      	ldr	r4, [pc, #12]	; (20018 <CONFIG_PM_SRAM_SIZE+0x18>)
   2000c:	e7e0      	b.n	1ffd0 <sys_clock_set_timeout+0x24>
   2000e:	bf00      	nop
   20010:	007ffffe 	.word	0x007ffffe
   20014:	200069b9 	.word	0x200069b9
   20018:	007fffff 	.word	0x007fffff
   2001c:	200027b0 	.word	0x200027b0
   20020:	0001fd39 	.word	0x0001fd39

00020024 <sys_clock_elapsed>:
{
   20024:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   20026:	f7ff feaf 	bl	1fd88 <z_nrf_rtc_timer_read>
   2002a:	4b02      	ldr	r3, [pc, #8]	; (20034 <sys_clock_elapsed+0x10>)
   2002c:	681b      	ldr	r3, [r3, #0]
}
   2002e:	1ac0      	subs	r0, r0, r3
   20030:	bd08      	pop	{r3, pc}
   20032:	bf00      	nop
   20034:	200027b0 	.word	0x200027b0

00020038 <nrf_gpio_pin_write>:
    if (value == 0)
   20038:	b969      	cbnz	r1, 20056 <nrf_gpio_pin_write+0x1e>
    *p_pin = pin_number & 0x1F;
   2003a:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   2003e:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20040:	2801      	cmp	r0, #1
   20042:	d006      	beq.n	20052 <nrf_gpio_pin_write+0x1a>
        case 0: return NRF_P0;
   20044:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   20048:	2301      	movs	r3, #1
   2004a:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   2004c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   20050:	4770      	bx	lr
        case 1: return NRF_P1;
   20052:	4a08      	ldr	r2, [pc, #32]	; (20074 <nrf_gpio_pin_write+0x3c>)
   20054:	e7f8      	b.n	20048 <nrf_gpio_pin_write+0x10>
    *p_pin = pin_number & 0x1F;
   20056:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   2005a:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2005c:	2801      	cmp	r0, #1
   2005e:	d006      	beq.n	2006e <nrf_gpio_pin_write+0x36>
        case 0: return NRF_P0;
   20060:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   20064:	2301      	movs	r3, #1
   20066:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   20068:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
   2006c:	4770      	bx	lr
        case 1: return NRF_P1;
   2006e:	4a01      	ldr	r2, [pc, #4]	; (20074 <nrf_gpio_pin_write+0x3c>)
   20070:	e7f8      	b.n	20064 <nrf_gpio_pin_write+0x2c>
   20072:	bf00      	nop
   20074:	50000300 	.word	0x50000300

00020078 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   20078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2007c:	b083      	sub	sp, #12
   2007e:	4607      	mov	r7, r0
   20080:	4689      	mov	r9, r1
   20082:	9201      	str	r2, [sp, #4]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   20084:	2400      	movs	r4, #0
   20086:	e02a      	b.n	200de <pinctrl_configure_pins+0x66>
		uint32_t write = NO_WRITE;
		nrf_gpio_pin_dir_t dir;
		nrf_gpio_pin_input_t input;

		if (pin == NRF_PIN_DISCONNECTED) {
			pin = 0xFFFFFFFFU;
   20088:	f04f 35ff 	mov.w	r5, #4294967295
   2008c:	e033      	b.n	200f6 <pinctrl_configure_pins+0x7e>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
			break;
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = pin;
   2008e:	9b01      	ldr	r3, [sp, #4]
   20090:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
			write = 0U;
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   20094:	f04f 0800 	mov.w	r8, #0
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   20098:	2601      	movs	r6, #1
			write = 0U;
   2009a:	4641      	mov	r1, r8
		default:
			return -ENOTSUP;
		}

		/* configure GPIO properties */
		if (pin != NRF_PIN_DISCONNECTED) {
   2009c:	2d7f      	cmp	r5, #127	; 0x7f
   2009e:	d01c      	beq.n	200da <pinctrl_configure_pins+0x62>
			if (write != NO_WRITE) {
   200a0:	2900      	cmp	r1, #0
   200a2:	d045      	beq.n	20130 <pinctrl_configure_pins+0xb8>
				nrf_gpio_pin_write(pin, write);
			}

			/* force input and disconnected buffer for low power */
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   200a4:	f857 300b 	ldr.w	r3, [r7, fp]
   200a8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   200ac:	d002      	beq.n	200b4 <pinctrl_configure_pins+0x3c>
				dir = NRF_GPIO_PIN_DIR_INPUT;
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   200ae:	f04f 0801 	mov.w	r8, #1
				dir = NRF_GPIO_PIN_DIR_INPUT;
   200b2:	2600      	movs	r6, #0
			}

			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   200b4:	f3c3 13c1 	ubfx	r3, r3, #7, #2
    *p_pin = pin_number & 0x1F;
   200b8:	f005 021f 	and.w	r2, r5, #31
    return pin_number >> 5;
   200bc:	096d      	lsrs	r5, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   200be:	2d01      	cmp	r5, #1
   200c0:	d03a      	beq.n	20138 <pinctrl_configure_pins+0xc0>
        case 0: return NRF_P0;
   200c2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   200c6:	ea46 0648 	orr.w	r6, r6, r8, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   200ca:	ea46 0683 	orr.w	r6, r6, r3, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   200ce:	ea46 260a 	orr.w	r6, r6, sl, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   200d2:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   200d6:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   200da:	3401      	adds	r4, #1
   200dc:	b2e4      	uxtb	r4, r4
   200de:	454c      	cmp	r4, r9
   200e0:	d22c      	bcs.n	2013c <pinctrl_configure_pins+0xc4>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   200e2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   200e6:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   200ea:	f3c3 2a43 	ubfx	sl, r3, #9, #4
		uint32_t pin = NRF_GET_PIN(pins[i]);
   200ee:	f003 057f 	and.w	r5, r3, #127	; 0x7f
		if (pin == NRF_PIN_DISCONNECTED) {
   200f2:	2d7f      	cmp	r5, #127	; 0x7f
   200f4:	d0c8      	beq.n	20088 <pinctrl_configure_pins+0x10>
		switch (NRF_GET_FUN(pins[i])) {
   200f6:	0c1b      	lsrs	r3, r3, #16
   200f8:	2b05      	cmp	r3, #5
   200fa:	d008      	beq.n	2010e <pinctrl_configure_pins+0x96>
   200fc:	2b06      	cmp	r3, #6
   200fe:	d00e      	beq.n	2011e <pinctrl_configure_pins+0xa6>
   20100:	2b04      	cmp	r3, #4
   20102:	d0c4      	beq.n	2008e <pinctrl_configure_pins+0x16>
   20104:	f06f 0085 	mvn.w	r0, #133	; 0x85
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
}
   20108:	b003      	add	sp, #12
   2010a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   2010e:	9b01      	ldr	r3, [sp, #4]
   20110:	f8c3 550c 	str.w	r5, [r3, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   20114:	f04f 0801 	mov.w	r8, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   20118:	4646      	mov	r6, r8
			write = 0U;
   2011a:	2100      	movs	r1, #0
			break;
   2011c:	e7be      	b.n	2009c <pinctrl_configure_pins+0x24>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   2011e:	9b01      	ldr	r3, [sp, #4]
   20120:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   20124:	f04f 0800 	mov.w	r8, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   20128:	4646      	mov	r6, r8
		uint32_t write = NO_WRITE;
   2012a:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   2012e:	e7b5      	b.n	2009c <pinctrl_configure_pins+0x24>
				nrf_gpio_pin_write(pin, write);
   20130:	4628      	mov	r0, r5
   20132:	f7ff ff81 	bl	20038 <nrf_gpio_pin_write>
   20136:	e7b5      	b.n	200a4 <pinctrl_configure_pins+0x2c>
        case 1: return NRF_P1;
   20138:	4901      	ldr	r1, [pc, #4]	; (20140 <pinctrl_configure_pins+0xc8>)
   2013a:	e7c4      	b.n	200c6 <pinctrl_configure_pins+0x4e>
	return 0;
   2013c:	2000      	movs	r0, #0
   2013e:	e7e3      	b.n	20108 <pinctrl_configure_pins+0x90>
   20140:	50000300 	.word	0x50000300

00020144 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   20144:	b508      	push	{r3, lr}
   20146:	4602      	mov	r2, r0
   20148:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   2014a:	4802      	ldr	r0, [pc, #8]	; (20154 <multithreading_lock_acquire+0x10>)
   2014c:	f002 fc12 	bl	22974 <z_impl_k_mutex_lock>
	return k_mutex_lock(&mpsl_lock, timeout);
}
   20150:	bd08      	pop	{r3, pc}
   20152:	bf00      	nop
   20154:	200009f0 	.word	0x200009f0

00020158 <multithreading_lock_release>:

void multithreading_lock_release(void)
{
   20158:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   2015a:	4802      	ldr	r0, [pc, #8]	; (20164 <multithreading_lock_release+0xc>)
   2015c:	f002 fc8e 	bl	22a7c <z_impl_k_mutex_unlock>
	k_mutex_unlock(&mpsl_lock);
}
   20160:	bd08      	pop	{r3, pc}
   20162:	bf00      	nop
   20164:	200009f0 	.word	0x200009f0

00020168 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   20168:	b510      	push	{r4, lr}
   2016a:	b088      	sub	sp, #32
	z_impl_log_panic();
   2016c:	f7f3 fe24 	bl	13db8 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   20170:	4b14      	ldr	r3, [pc, #80]	; (201c4 <k_sys_fatal_error_handler+0x5c>)
   20172:	9307      	str	r3, [sp, #28]
   20174:	2302      	movs	r3, #2
   20176:	f88d 3004 	strb.w	r3, [sp, #4]
   2017a:	2400      	movs	r4, #0
   2017c:	f88d 4005 	strb.w	r4, [sp, #5]
   20180:	f88d 4006 	strb.w	r4, [sp, #6]
   20184:	f88d 4007 	strb.w	r4, [sp, #7]
   20188:	9b01      	ldr	r3, [sp, #4]
   2018a:	9306      	str	r3, [sp, #24]
   2018c:	4621      	mov	r1, r4
   2018e:	f364 0100 	bfi	r1, r4, #0, #1
   20192:	f364 0141 	bfi	r1, r4, #1, #1
   20196:	f364 0182 	bfi	r1, r4, #2, #1
   2019a:	f364 01c5 	bfi	r1, r4, #3, #3
   2019e:	2301      	movs	r3, #1
   201a0:	f363 1188 	bfi	r1, r3, #6, #3
   201a4:	2308      	movs	r3, #8
   201a6:	f363 2152 	bfi	r1, r3, #9, #10
   201aa:	f364 41de 	bfi	r1, r4, #19, #12
   201ae:	f364 71df 	bfi	r1, r4, #31, #1
   201b2:	4623      	mov	r3, r4
   201b4:	aa06      	add	r2, sp, #24
   201b6:	4804      	ldr	r0, [pc, #16]	; (201c8 <k_sys_fatal_error_handler+0x60>)
   201b8:	f005 fafb 	bl	257b2 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   201bc:	4620      	mov	r0, r4
   201be:	f005 ff82 	bl	260c6 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   201c2:	bf00      	nop
   201c4:	0002d89c 	.word	0x0002d89c
   201c8:	0002b1dc 	.word	0x0002b1dc

000201cc <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   201cc:	b510      	push	{r4, lr}
   201ce:	4603      	mov	r3, r0
   201d0:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   201d2:	4803      	ldr	r0, [pc, #12]	; (201e0 <rand_prio_low_vector_get_blocking+0x14>)
   201d4:	6881      	ldr	r1, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   201d6:	680c      	ldr	r4, [r1, #0]
   201d8:	4619      	mov	r1, r3
   201da:	47a0      	blx	r4
	int err = entropy_get_entropy(entropy_source, p_buff, length);

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   201dc:	bd10      	pop	{r4, pc}
   201de:	bf00      	nop
   201e0:	0002aef4 	.word	0x0002aef4

000201e4 <sdc_assertion_handler>:
{
   201e4:	b590      	push	{r4, r7, lr}
   201e6:	b083      	sub	sp, #12
   201e8:	af00      	add	r7, sp, #0
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   201ea:	466c      	mov	r4, sp
   201ec:	2300      	movs	r3, #0
   201ee:	713b      	strb	r3, [r7, #4]
   201f0:	2302      	movs	r3, #2
   201f2:	717b      	strb	r3, [r7, #5]
   201f4:	b08a      	sub	sp, #40	; 0x28
   201f6:	46ec      	mov	ip, sp
   201f8:	f11c 0210 	adds.w	r2, ip, #16
   201fc:	d01b      	beq.n	20236 <sdc_assertion_handler+0x52>
   201fe:	f04f 0e12 	mov.w	lr, #18
   20202:	b12a      	cbz	r2, 20210 <sdc_assertion_handler+0x2c>
   20204:	f1be 0f04 	cmp.w	lr, #4
   20208:	dd02      	ble.n	20210 <sdc_assertion_handler+0x2c>
   2020a:	4b2b      	ldr	r3, [pc, #172]	; (202b8 <sdc_assertion_handler+0xd4>)
   2020c:	f8cc 3014 	str.w	r3, [ip, #20]
   20210:	2300      	movs	r3, #0
   20212:	703b      	strb	r3, [r7, #0]
   20214:	2302      	movs	r3, #2
   20216:	707b      	strb	r3, [r7, #1]
   20218:	b1d2      	cbz	r2, 20250 <sdc_assertion_handler+0x6c>
   2021a:	4673      	mov	r3, lr
   2021c:	f1be 0f08 	cmp.w	lr, #8
   20220:	dd01      	ble.n	20226 <sdc_assertion_handler+0x42>
   20222:	f8cc 0018 	str.w	r0, [ip, #24]
   20226:	2b0c      	cmp	r3, #12
   20228:	dd01      	ble.n	2022e <sdc_assertion_handler+0x4a>
   2022a:	f8cc 101c 	str.w	r1, [ip, #28]
   2022e:	f10c 0320 	add.w	r3, ip, #32
   20232:	2100      	movs	r1, #0
   20234:	e00a      	b.n	2024c <sdc_assertion_handler+0x68>
   20236:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   2023a:	e7e2      	b.n	20202 <sdc_assertion_handler+0x1e>
   2023c:	f101 0008 	add.w	r0, r1, #8
   20240:	4438      	add	r0, r7
   20242:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   20246:	f803 0b01 	strb.w	r0, [r3], #1
   2024a:	3101      	adds	r1, #1
   2024c:	2901      	cmp	r1, #1
   2024e:	d9f5      	bls.n	2023c <sdc_assertion_handler+0x58>
   20250:	f1be 0f11 	cmp.w	lr, #17
   20254:	dd2d      	ble.n	202b2 <sdc_assertion_handler+0xce>
   20256:	2312      	movs	r3, #18
   20258:	b14a      	cbz	r2, 2026e <sdc_assertion_handler+0x8a>
   2025a:	2104      	movs	r1, #4
   2025c:	7139      	strb	r1, [r7, #4]
   2025e:	2100      	movs	r1, #0
   20260:	7179      	strb	r1, [r7, #5]
   20262:	71b9      	strb	r1, [r7, #6]
   20264:	2101      	movs	r1, #1
   20266:	71f9      	strb	r1, [r7, #7]
   20268:	6878      	ldr	r0, [r7, #4]
   2026a:	f8cc 0010 	str.w	r0, [ip, #16]
   2026e:	2100      	movs	r1, #0
   20270:	f36f 0100 	bfc	r1, #0, #1
   20274:	f36f 0141 	bfc	r1, #1, #1
   20278:	f36f 0182 	bfc	r1, #2, #1
   2027c:	f36f 01c5 	bfc	r1, #3, #3
   20280:	2001      	movs	r0, #1
   20282:	f360 1188 	bfi	r1, r0, #6, #3
   20286:	f3c3 0309 	ubfx	r3, r3, #0, #10
   2028a:	f363 2152 	bfi	r1, r3, #9, #10
   2028e:	f36f 41de 	bfc	r1, #19, #12
   20292:	f36f 71df 	bfc	r1, #31, #1
   20296:	2300      	movs	r3, #0
   20298:	4808      	ldr	r0, [pc, #32]	; (202bc <sdc_assertion_handler+0xd8>)
   2029a:	f005 fa8a 	bl	257b2 <z_impl_z_log_msg_static_create>
   2029e:	46a5      	mov	sp, r4
	k_oops();
   202a0:	4040      	eors	r0, r0
   202a2:	f380 8811 	msr	BASEPRI, r0
   202a6:	f04f 0003 	mov.w	r0, #3
   202aa:	df02      	svc	2
}
   202ac:	370c      	adds	r7, #12
   202ae:	46bd      	mov	sp, r7
   202b0:	bd90      	pop	{r4, r7, pc}
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   202b2:	f06f 031b 	mvn.w	r3, #27
   202b6:	e7cf      	b.n	20258 <sdc_assertion_handler+0x74>
   202b8:	0002d8bc 	.word	0x0002d8bc
   202bc:	0002b1ac 	.word	0x0002b1ac

000202c0 <event_packet_process>:
{
   202c0:	b570      	push	{r4, r5, r6, lr}
   202c2:	b088      	sub	sp, #32
   202c4:	4604      	mov	r4, r0
	bool discardable = event_packet_is_discardable(hci_buf);
   202c6:	f009 f82e 	bl	29326 <event_packet_is_discardable>
   202ca:	4603      	mov	r3, r0
	if (hdr->evt == BT_HCI_EVT_LE_META_EVENT) {
   202cc:	7820      	ldrb	r0, [r4, #0]
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   202ce:	461d      	mov	r5, r3
   202d0:	b18b      	cbz	r3, 202f6 <event_packet_process+0x36>
   202d2:	2200      	movs	r2, #0
   202d4:	2300      	movs	r3, #0
   202d6:	4629      	mov	r1, r5
   202d8:	f7f6 f846 	bl	16368 <bt_buf_get_evt>
	if (!evt_buf) {
   202dc:	4606      	mov	r6, r0
   202de:	b178      	cbz	r0, 20300 <event_packet_process+0x40>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   202e0:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   202e2:	3202      	adds	r2, #2
   202e4:	4621      	mov	r1, r4
   202e6:	300c      	adds	r0, #12
   202e8:	f008 f85d 	bl	283a6 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   202ec:	4630      	mov	r0, r6
   202ee:	f7f8 fad5 	bl	1889c <bt_recv>
}
   202f2:	b008      	add	sp, #32
   202f4:	bd70      	pop	{r4, r5, r6, pc}
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   202f6:	f04f 32ff 	mov.w	r2, #4294967295
   202fa:	f04f 33ff 	mov.w	r3, #4294967295
   202fe:	e7ea      	b.n	202d6 <event_packet_process+0x16>
		if (discardable) {
   20300:	2d00      	cmp	r5, #0
   20302:	d1f6      	bne.n	202f2 <event_packet_process+0x32>
		LOG_ERR("No event buffer available");
   20304:	4b12      	ldr	r3, [pc, #72]	; (20350 <event_packet_process+0x90>)
   20306:	9307      	str	r3, [sp, #28]
   20308:	2302      	movs	r3, #2
   2030a:	f88d 3004 	strb.w	r3, [sp, #4]
   2030e:	2300      	movs	r3, #0
   20310:	f88d 3005 	strb.w	r3, [sp, #5]
   20314:	f88d 3006 	strb.w	r3, [sp, #6]
   20318:	f88d 3007 	strb.w	r3, [sp, #7]
   2031c:	9a01      	ldr	r2, [sp, #4]
   2031e:	9206      	str	r2, [sp, #24]
   20320:	4619      	mov	r1, r3
   20322:	f363 0100 	bfi	r1, r3, #0, #1
   20326:	f363 0141 	bfi	r1, r3, #1, #1
   2032a:	f363 0182 	bfi	r1, r3, #2, #1
   2032e:	f363 01c5 	bfi	r1, r3, #3, #3
   20332:	2201      	movs	r2, #1
   20334:	f362 1188 	bfi	r1, r2, #6, #3
   20338:	2208      	movs	r2, #8
   2033a:	f362 2152 	bfi	r1, r2, #9, #10
   2033e:	f363 41de 	bfi	r1, r3, #19, #12
   20342:	f363 71df 	bfi	r1, r3, #31, #1
   20346:	aa06      	add	r2, sp, #24
   20348:	4802      	ldr	r0, [pc, #8]	; (20354 <event_packet_process+0x94>)
   2034a:	f005 fa32 	bl	257b2 <z_impl_z_log_msg_static_create>
		return;
   2034e:	e7d0      	b.n	202f2 <event_packet_process+0x32>
   20350:	0002d8e4 	.word	0x0002d8e4
   20354:	0002b1ac 	.word	0x0002b1ac

00020358 <data_packet_process>:
{
   20358:	b530      	push	{r4, r5, lr}
   2035a:	b089      	sub	sp, #36	; 0x24
   2035c:	4604      	mov	r4, r0
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   2035e:	f04f 32ff 	mov.w	r2, #4294967295
   20362:	f04f 33ff 	mov.w	r3, #4294967295
   20366:	2003      	movs	r0, #3
   20368:	f7f5 ffd4 	bl	16314 <bt_buf_get_rx>
	if (!data_buf) {
   2036c:	b158      	cbz	r0, 20386 <data_packet_process+0x2e>
   2036e:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   20370:	8862      	ldrh	r2, [r4, #2]
   20372:	3204      	adds	r2, #4
   20374:	4621      	mov	r1, r4
   20376:	300c      	adds	r0, #12
   20378:	f008 f815 	bl	283a6 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   2037c:	4628      	mov	r0, r5
   2037e:	f7f8 fa8d 	bl	1889c <bt_recv>
}
   20382:	b009      	add	sp, #36	; 0x24
   20384:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("No data buffer available");
   20386:	4b13      	ldr	r3, [pc, #76]	; (203d4 <data_packet_process+0x7c>)
   20388:	9307      	str	r3, [sp, #28]
   2038a:	2302      	movs	r3, #2
   2038c:	f88d 3004 	strb.w	r3, [sp, #4]
   20390:	2300      	movs	r3, #0
   20392:	f88d 3005 	strb.w	r3, [sp, #5]
   20396:	f88d 3006 	strb.w	r3, [sp, #6]
   2039a:	f88d 3007 	strb.w	r3, [sp, #7]
   2039e:	9a01      	ldr	r2, [sp, #4]
   203a0:	9206      	str	r2, [sp, #24]
   203a2:	4619      	mov	r1, r3
   203a4:	f363 0100 	bfi	r1, r3, #0, #1
   203a8:	f363 0141 	bfi	r1, r3, #1, #1
   203ac:	f363 0182 	bfi	r1, r3, #2, #1
   203b0:	f363 01c5 	bfi	r1, r3, #3, #3
   203b4:	2201      	movs	r2, #1
   203b6:	f362 1188 	bfi	r1, r2, #6, #3
   203ba:	2208      	movs	r2, #8
   203bc:	f362 2152 	bfi	r1, r2, #9, #10
   203c0:	f363 41de 	bfi	r1, r3, #19, #12
   203c4:	f363 71df 	bfi	r1, r3, #31, #1
   203c8:	aa06      	add	r2, sp, #24
   203ca:	4803      	ldr	r0, [pc, #12]	; (203d8 <data_packet_process+0x80>)
   203cc:	f005 f9f1 	bl	257b2 <z_impl_z_log_msg_static_create>
		return;
   203d0:	e7d7      	b.n	20382 <data_packet_process+0x2a>
   203d2:	bf00      	nop
   203d4:	0002d900 	.word	0x0002d900
   203d8:	0002b1ac 	.word	0x0002b1ac

000203dc <fetch_and_process_hci_msg>:
{
   203dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   203de:	b083      	sub	sp, #12
   203e0:	af00      	add	r7, sp, #0
   203e2:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   203e4:	f04f 30ff 	mov.w	r0, #4294967295
   203e8:	f04f 31ff 	mov.w	r1, #4294967295
   203ec:	f7ff feaa 	bl	20144 <multithreading_lock_acquire>
	if (!errcode) {
   203f0:	b118      	cbz	r0, 203fa <fetch_and_process_hci_msg+0x1e>
		return false;
   203f2:	2000      	movs	r0, #0
}
   203f4:	370c      	adds	r7, #12
   203f6:	46bd      	mov	sp, r7
   203f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   203fa:	1df9      	adds	r1, r7, #7
   203fc:	4620      	mov	r0, r4
   203fe:	f000 fb5f 	bl	20ac0 <hci_internal_msg_get>
   20402:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   20404:	f7ff fea8 	bl	20158 <multithreading_lock_release>
	if (errcode) {
   20408:	2d00      	cmp	r5, #0
   2040a:	d1f2      	bne.n	203f2 <fetch_and_process_hci_msg+0x16>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   2040c:	79fb      	ldrb	r3, [r7, #7]
   2040e:	2b04      	cmp	r3, #4
   20410:	d038      	beq.n	20484 <fetch_and_process_hci_msg+0xa8>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   20412:	2b02      	cmp	r3, #2
   20414:	d03b      	beq.n	2048e <fetch_and_process_hci_msg+0xb2>
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   20416:	466d      	mov	r5, sp
   20418:	b088      	sub	sp, #32
   2041a:	4669      	mov	r1, sp
   2041c:	f111 0210 	adds.w	r2, r1, #16
   20420:	d03a      	beq.n	20498 <fetch_and_process_hci_msg+0xbc>
   20422:	200c      	movs	r0, #12
   20424:	b13a      	cbz	r2, 20436 <fetch_and_process_hci_msg+0x5a>
   20426:	4604      	mov	r4, r0
   20428:	2804      	cmp	r0, #4
   2042a:	dd01      	ble.n	20430 <fetch_and_process_hci_msg+0x54>
   2042c:	4e1d      	ldr	r6, [pc, #116]	; (204a4 <fetch_and_process_hci_msg+0xc8>)
   2042e:	614e      	str	r6, [r1, #20]
   20430:	2c08      	cmp	r4, #8
   20432:	dd00      	ble.n	20436 <fetch_and_process_hci_msg+0x5a>
   20434:	618b      	str	r3, [r1, #24]
   20436:	280b      	cmp	r0, #11
   20438:	dd31      	ble.n	2049e <fetch_and_process_hci_msg+0xc2>
   2043a:	230c      	movs	r3, #12
   2043c:	b13a      	cbz	r2, 2044e <fetch_and_process_hci_msg+0x72>
   2043e:	2003      	movs	r0, #3
   20440:	7038      	strb	r0, [r7, #0]
   20442:	2000      	movs	r0, #0
   20444:	7078      	strb	r0, [r7, #1]
   20446:	70b8      	strb	r0, [r7, #2]
   20448:	70f8      	strb	r0, [r7, #3]
   2044a:	6838      	ldr	r0, [r7, #0]
   2044c:	6108      	str	r0, [r1, #16]
   2044e:	2100      	movs	r1, #0
   20450:	f36f 0100 	bfc	r1, #0, #1
   20454:	f36f 0141 	bfc	r1, #1, #1
   20458:	f36f 0182 	bfc	r1, #2, #1
   2045c:	f36f 01c5 	bfc	r1, #3, #3
   20460:	2401      	movs	r4, #1
   20462:	f364 1188 	bfi	r1, r4, #6, #3
   20466:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   2046a:	f363 2152 	bfi	r1, r3, #9, #10
   2046e:	f36f 41de 	bfc	r1, #19, #12
   20472:	f36f 71df 	bfc	r1, #31, #1
   20476:	2300      	movs	r3, #0
   20478:	480b      	ldr	r0, [pc, #44]	; (204a8 <fetch_and_process_hci_msg+0xcc>)
   2047a:	f005 f99a 	bl	257b2 <z_impl_z_log_msg_static_create>
   2047e:	46ad      	mov	sp, r5
	return true;
   20480:	4620      	mov	r0, r4
   20482:	e7b7      	b.n	203f4 <fetch_and_process_hci_msg+0x18>
		event_packet_process(p_hci_buffer);
   20484:	4620      	mov	r0, r4
   20486:	f7ff ff1b 	bl	202c0 <event_packet_process>
	return true;
   2048a:	2001      	movs	r0, #1
   2048c:	e7b2      	b.n	203f4 <fetch_and_process_hci_msg+0x18>
		data_packet_process(p_hci_buffer);
   2048e:	4620      	mov	r0, r4
   20490:	f7ff ff62 	bl	20358 <data_packet_process>
	return true;
   20494:	2001      	movs	r0, #1
   20496:	e7ad      	b.n	203f4 <fetch_and_process_hci_msg+0x18>
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   20498:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2049c:	e7c2      	b.n	20424 <fetch_and_process_hci_msg+0x48>
   2049e:	f06f 031b 	mvn.w	r3, #27
   204a2:	e7cb      	b.n	2043c <fetch_and_process_hci_msg+0x60>
   204a4:	0002d91c 	.word	0x0002d91c
   204a8:	0002b1ac 	.word	0x0002b1ac

000204ac <receive_signal_raise>:
{
   204ac:	b508      	push	{r3, lr}
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   204ae:	4902      	ldr	r1, [pc, #8]	; (204b8 <receive_signal_raise+0xc>)
   204b0:	4802      	ldr	r0, [pc, #8]	; (204bc <receive_signal_raise+0x10>)
   204b2:	f009 ffc1 	bl	2a438 <k_work_submit_to_queue>
}
   204b6:	bd08      	pop	{r3, pc}
   204b8:	200063a8 	.word	0x200063a8
   204bc:	200052a8 	.word	0x200052a8

000204c0 <acl_handle>:
{
   204c0:	b538      	push	{r3, r4, r5, lr}
   204c2:	4604      	mov	r4, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   204c4:	f04f 30ff 	mov.w	r0, #4294967295
   204c8:	f04f 31ff 	mov.w	r1, #4294967295
   204cc:	f7ff fe3a 	bl	20144 <multithreading_lock_acquire>
	if (!errcode) {
   204d0:	4605      	mov	r5, r0
   204d2:	b108      	cbz	r0, 204d8 <acl_handle+0x18>
}
   204d4:	4628      	mov	r0, r5
   204d6:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_put(acl->data);
   204d8:	68e0      	ldr	r0, [r4, #12]
   204da:	f7ec fd64 	bl	cfa6 <sdc_hci_data_put>
   204de:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   204e0:	f7ff fe3a 	bl	20158 <multithreading_lock_release>
		if (errcode) {
   204e4:	2d00      	cmp	r5, #0
   204e6:	d0f5      	beq.n	204d4 <acl_handle+0x14>
   204e8:	4902      	ldr	r1, [pc, #8]	; (204f4 <acl_handle+0x34>)
   204ea:	4803      	ldr	r0, [pc, #12]	; (204f8 <acl_handle+0x38>)
   204ec:	f009 ffa4 	bl	2a438 <k_work_submit_to_queue>
}
   204f0:	e7f0      	b.n	204d4 <acl_handle+0x14>
   204f2:	bf00      	nop
   204f4:	200063a8 	.word	0x200063a8
   204f8:	200052a8 	.word	0x200052a8

000204fc <cmd_handle>:
{
   204fc:	b538      	push	{r3, r4, r5, lr}
   204fe:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   20500:	f04f 30ff 	mov.w	r0, #4294967295
   20504:	f04f 31ff 	mov.w	r1, #4294967295
   20508:	f7ff fe1c 	bl	20144 <multithreading_lock_acquire>
	if (!errcode) {
   2050c:	4604      	mov	r4, r0
   2050e:	b108      	cbz	r0, 20514 <cmd_handle+0x18>
}
   20510:	4620      	mov	r0, r4
   20512:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_cmd_put(cmd->data);
   20514:	68e8      	ldr	r0, [r5, #12]
   20516:	f000 fabf 	bl	20a98 <hci_internal_cmd_put>
   2051a:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2051c:	f7ff fe1c 	bl	20158 <multithreading_lock_release>
	if (errcode) {
   20520:	2c00      	cmp	r4, #0
   20522:	d1f5      	bne.n	20510 <cmd_handle+0x14>
   20524:	4902      	ldr	r1, [pc, #8]	; (20530 <cmd_handle+0x34>)
   20526:	4803      	ldr	r0, [pc, #12]	; (20534 <cmd_handle+0x38>)
   20528:	f009 ff86 	bl	2a438 <k_work_submit_to_queue>
	return 0;
   2052c:	e7f0      	b.n	20510 <cmd_handle+0x14>
   2052e:	bf00      	nop
   20530:	200063a8 	.word	0x200063a8
   20534:	200052a8 	.word	0x200052a8

00020538 <rand_prio_high_vector_get>:
{
   20538:	b510      	push	{r4, lr}
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   2053a:	4b08      	ldr	r3, [pc, #32]	; (2055c <rand_prio_high_vector_get+0x24>)
   2053c:	689b      	ldr	r3, [r3, #8]
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   2053e:	685c      	ldr	r4, [r3, #4]
   20540:	b144      	cbz	r4, 20554 <rand_prio_high_vector_get+0x1c>
   20542:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   20544:	2300      	movs	r3, #0
   20546:	4601      	mov	r1, r0
   20548:	4804      	ldr	r0, [pc, #16]	; (2055c <rand_prio_high_vector_get+0x24>)
   2054a:	47a0      	blx	r4
	return ret >= 0 ? ret : 0;
   2054c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   20550:	b2c0      	uxtb	r0, r0
   20552:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   20554:	f06f 0085 	mvn.w	r0, #133	; 0x85
   20558:	e7f8      	b.n	2054c <rand_prio_high_vector_get+0x14>
   2055a:	bf00      	nop
   2055c:	0002aef4 	.word	0x0002aef4

00020560 <rand_prio_low_vector_get>:
{
   20560:	b510      	push	{r4, lr}
	const struct entropy_driver_api *api =
   20562:	4b08      	ldr	r3, [pc, #32]	; (20584 <rand_prio_low_vector_get+0x24>)
   20564:	689b      	ldr	r3, [r3, #8]
	if (unlikely(!api->get_entropy_isr)) {
   20566:	685c      	ldr	r4, [r3, #4]
   20568:	b144      	cbz	r4, 2057c <rand_prio_low_vector_get+0x1c>
   2056a:	460a      	mov	r2, r1
	return api->get_entropy_isr(dev, buffer, length, flags);
   2056c:	2300      	movs	r3, #0
   2056e:	4601      	mov	r1, r0
   20570:	4804      	ldr	r0, [pc, #16]	; (20584 <rand_prio_low_vector_get+0x24>)
   20572:	47a0      	blx	r4
	return ret >= 0 ? ret : 0;
   20574:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   20578:	b2c0      	uxtb	r0, r0
   2057a:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   2057c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   20580:	e7f8      	b.n	20574 <rand_prio_low_vector_get+0x14>
   20582:	bf00      	nop
   20584:	0002aef4 	.word	0x0002aef4

00020588 <hci_driver_open>:

	return 0;
}

static int hci_driver_open(void)
{
   20588:	b5b0      	push	{r4, r5, r7, lr}
   2058a:	b090      	sub	sp, #64	; 0x40
   2058c:	af00      	add	r7, sp, #0
	LOG_DBG("Open");

	k_work_init(&receive_work, receive_work_handler);
   2058e:	4978      	ldr	r1, [pc, #480]	; (20770 <hci_driver_open+0x1e8>)
   20590:	4878      	ldr	r0, [pc, #480]	; (20774 <hci_driver_open+0x1ec>)
   20592:	f009 ff35 	bl	2a400 <k_work_init>

	if (IS_ENABLED(CONFIG_BT_CTLR_ECDH)) {
		hci_ecdh_init();
   20596:	f000 fc39 	bl	20e0c <hci_ecdh_init>
	}

	uint8_t build_revision[SDC_BUILD_REVISION_SIZE];

	sdc_build_revision_get(build_revision);
   2059a:	f107 0014 	add.w	r0, r7, #20
   2059e:	f7e0 f987 	bl	8b0 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   205a2:	466c      	mov	r4, sp
   205a4:	2300      	movs	r3, #0
   205a6:	713b      	strb	r3, [r7, #4]
   205a8:	2302      	movs	r3, #2
   205aa:	717b      	strb	r3, [r7, #5]
   205ac:	b088      	sub	sp, #32
   205ae:	46ec      	mov	ip, sp
   205b0:	f11c 0210 	adds.w	r2, ip, #16
   205b4:	d014      	beq.n	205e0 <hci_driver_open+0x58>
   205b6:	200e      	movs	r0, #14
   205b8:	b122      	cbz	r2, 205c4 <hci_driver_open+0x3c>
   205ba:	2804      	cmp	r0, #4
   205bc:	dd02      	ble.n	205c4 <hci_driver_open+0x3c>
   205be:	4b6e      	ldr	r3, [pc, #440]	; (20778 <hci_driver_open+0x1f0>)
   205c0:	f8cc 3014 	str.w	r3, [ip, #20]
   205c4:	2300      	movs	r3, #0
   205c6:	703b      	strb	r3, [r7, #0]
   205c8:	2302      	movs	r3, #2
   205ca:	707b      	strb	r3, [r7, #1]
   205cc:	b1b2      	cbz	r2, 205fc <hci_driver_open+0x74>
   205ce:	2808      	cmp	r0, #8
   205d0:	dd02      	ble.n	205d8 <hci_driver_open+0x50>
   205d2:	4b6a      	ldr	r3, [pc, #424]	; (2077c <hci_driver_open+0x1f4>)
   205d4:	f8cc 3018 	str.w	r3, [ip, #24]
   205d8:	f10c 031c 	add.w	r3, ip, #28
   205dc:	2100      	movs	r1, #0
   205de:	e00b      	b.n	205f8 <hci_driver_open+0x70>
   205e0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   205e4:	e7e8      	b.n	205b8 <hci_driver_open+0x30>
   205e6:	f101 0540 	add.w	r5, r1, #64	; 0x40
   205ea:	eb05 0e07 	add.w	lr, r5, r7
   205ee:	f81e ec40 	ldrb.w	lr, [lr, #-64]
   205f2:	f803 eb01 	strb.w	lr, [r3], #1
   205f6:	3101      	adds	r1, #1
   205f8:	2901      	cmp	r1, #1
   205fa:	d9f4      	bls.n	205e6 <hci_driver_open+0x5e>
   205fc:	280d      	cmp	r0, #13
   205fe:	dd41      	ble.n	20684 <hci_driver_open+0xfc>
   20600:	230e      	movs	r3, #14
   20602:	b14a      	cbz	r2, 20618 <hci_driver_open+0x90>
   20604:	2103      	movs	r1, #3
   20606:	7139      	strb	r1, [r7, #4]
   20608:	2100      	movs	r1, #0
   2060a:	7179      	strb	r1, [r7, #5]
   2060c:	71b9      	strb	r1, [r7, #6]
   2060e:	2101      	movs	r1, #1
   20610:	71f9      	strb	r1, [r7, #7]
   20612:	6878      	ldr	r0, [r7, #4]
   20614:	f8cc 0010 	str.w	r0, [ip, #16]
   20618:	2100      	movs	r1, #0
   2061a:	f36f 0100 	bfc	r1, #0, #1
   2061e:	f36f 0141 	bfc	r1, #1, #1
   20622:	f36f 0182 	bfc	r1, #2, #1
   20626:	f36f 01c5 	bfc	r1, #3, #3
   2062a:	2003      	movs	r0, #3
   2062c:	f360 1188 	bfi	r1, r0, #6, #3
   20630:	f3c3 0309 	ubfx	r3, r3, #0, #10
   20634:	f363 2152 	bfi	r1, r3, #9, #10
   20638:	2314      	movs	r3, #20
   2063a:	f363 41de 	bfi	r1, r3, #19, #12
   2063e:	f36f 71df 	bfc	r1, #31, #1
   20642:	18fb      	adds	r3, r7, r3
   20644:	484e      	ldr	r0, [pc, #312]	; (20780 <hci_driver_open+0x1f8>)
   20646:	f005 f8b4 	bl	257b2 <z_impl_z_log_msg_static_create>
   2064a:	46a5      	mov	sp, r4
   2064c:	484d      	ldr	r0, [pc, #308]	; (20784 <hci_driver_open+0x1fc>)
   2064e:	f009 fbf2 	bl	29e36 <z_device_is_ready>
			"SoftDevice Controller build revision: ");

	int err;

	if (!device_is_ready(entropy_source)) {
   20652:	b1d0      	cbz	r0, 2068a <hci_driver_open+0x102>
		LOG_ERR("Entropy source device not ready");
		return -ENODEV;
	}

	sdc_rand_source_t rand_functions = {
   20654:	4a4c      	ldr	r2, [pc, #304]	; (20788 <hci_driver_open+0x200>)
   20656:	f107 0308 	add.w	r3, r7, #8
   2065a:	ca07      	ldmia	r2, {r0, r1, r2}
   2065c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.rand_prio_low_get = rand_prio_low_vector_get,
		.rand_prio_high_get = rand_prio_high_vector_get,
		.rand_poll = rand_prio_low_vector_get_blocking
	};

	err = sdc_rand_source_register(&rand_functions);
   20660:	4618      	mov	r0, r3
   20662:	f7e0 fabb 	bl	bdc <sdc_rand_source_register>
	if (err) {
   20666:	4603      	mov	r3, r0
   20668:	bba0      	cbnz	r0, 206d4 <hci_driver_open+0x14c>
		LOG_ERR("Failed to register rand source (%d)", err);
		return -EINVAL;
	}

	err = MULTITHREADING_LOCK_ACQUIRE();
   2066a:	f04f 30ff 	mov.w	r0, #4294967295
   2066e:	f04f 31ff 	mov.w	r1, #4294967295
   20672:	f7ff fd67 	bl	20144 <multithreading_lock_acquire>
	if (err) {
   20676:	4604      	mov	r4, r0
   20678:	2800      	cmp	r0, #0
   2067a:	d06d      	beq.n	20758 <hci_driver_open+0x1d0>
	}

	MULTITHREADING_LOCK_RELEASE();

	return 0;
}
   2067c:	4620      	mov	r0, r4
   2067e:	3740      	adds	r7, #64	; 0x40
   20680:	46bd      	mov	sp, r7
   20682:	bdb0      	pop	{r4, r5, r7, pc}
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   20684:	f06f 031b 	mvn.w	r3, #27
   20688:	e7bb      	b.n	20602 <hci_driver_open+0x7a>
		LOG_ERR("Entropy source device not ready");
   2068a:	4b40      	ldr	r3, [pc, #256]	; (2078c <hci_driver_open+0x204>)
   2068c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2068e:	2302      	movs	r3, #2
   20690:	713b      	strb	r3, [r7, #4]
   20692:	2300      	movs	r3, #0
   20694:	717b      	strb	r3, [r7, #5]
   20696:	71bb      	strb	r3, [r7, #6]
   20698:	71fb      	strb	r3, [r7, #7]
   2069a:	687a      	ldr	r2, [r7, #4]
   2069c:	63ba      	str	r2, [r7, #56]	; 0x38
   2069e:	4619      	mov	r1, r3
   206a0:	f363 0100 	bfi	r1, r3, #0, #1
   206a4:	f363 0141 	bfi	r1, r3, #1, #1
   206a8:	f363 0182 	bfi	r1, r3, #2, #1
   206ac:	f363 01c5 	bfi	r1, r3, #3, #3
   206b0:	2201      	movs	r2, #1
   206b2:	f362 1188 	bfi	r1, r2, #6, #3
   206b6:	2208      	movs	r2, #8
   206b8:	f362 2152 	bfi	r1, r2, #9, #10
   206bc:	f363 41de 	bfi	r1, r3, #19, #12
   206c0:	f363 71df 	bfi	r1, r3, #31, #1
   206c4:	f107 0238 	add.w	r2, r7, #56	; 0x38
   206c8:	482d      	ldr	r0, [pc, #180]	; (20780 <hci_driver_open+0x1f8>)
   206ca:	f005 f872 	bl	257b2 <z_impl_z_log_msg_static_create>
		return -ENODEV;
   206ce:	f06f 0412 	mvn.w	r4, #18
   206d2:	e7d3      	b.n	2067c <hci_driver_open+0xf4>
		LOG_ERR("Failed to register rand source (%d)", err);
   206d4:	466c      	mov	r4, sp
   206d6:	b088      	sub	sp, #32
   206d8:	4669      	mov	r1, sp
   206da:	f111 0210 	adds.w	r2, r1, #16
   206de:	d00e      	beq.n	206fe <hci_driver_open+0x176>
   206e0:	200c      	movs	r0, #12
   206e2:	b142      	cbz	r2, 206f6 <hci_driver_open+0x16e>
   206e4:	4684      	mov	ip, r0
   206e6:	2804      	cmp	r0, #4
   206e8:	dd01      	ble.n	206ee <hci_driver_open+0x166>
   206ea:	4d29      	ldr	r5, [pc, #164]	; (20790 <hci_driver_open+0x208>)
   206ec:	614d      	str	r5, [r1, #20]
   206ee:	f1bc 0f08 	cmp.w	ip, #8
   206f2:	dd07      	ble.n	20704 <hci_driver_open+0x17c>
   206f4:	618b      	str	r3, [r1, #24]
   206f6:	280b      	cmp	r0, #11
   206f8:	dd2b      	ble.n	20752 <hci_driver_open+0x1ca>
   206fa:	230c      	movs	r3, #12
   206fc:	e004      	b.n	20708 <hci_driver_open+0x180>
   206fe:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   20702:	e7ee      	b.n	206e2 <hci_driver_open+0x15a>
   20704:	f06f 031b 	mvn.w	r3, #27
   20708:	b13a      	cbz	r2, 2071a <hci_driver_open+0x192>
   2070a:	2003      	movs	r0, #3
   2070c:	7138      	strb	r0, [r7, #4]
   2070e:	2000      	movs	r0, #0
   20710:	7178      	strb	r0, [r7, #5]
   20712:	71b8      	strb	r0, [r7, #6]
   20714:	71f8      	strb	r0, [r7, #7]
   20716:	6878      	ldr	r0, [r7, #4]
   20718:	6108      	str	r0, [r1, #16]
   2071a:	2100      	movs	r1, #0
   2071c:	f36f 0100 	bfc	r1, #0, #1
   20720:	f36f 0141 	bfc	r1, #1, #1
   20724:	f36f 0182 	bfc	r1, #2, #1
   20728:	f36f 01c5 	bfc	r1, #3, #3
   2072c:	2001      	movs	r0, #1
   2072e:	f360 1188 	bfi	r1, r0, #6, #3
   20732:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   20736:	f363 2152 	bfi	r1, r3, #9, #10
   2073a:	f36f 41de 	bfc	r1, #19, #12
   2073e:	f36f 71df 	bfc	r1, #31, #1
   20742:	2300      	movs	r3, #0
   20744:	480e      	ldr	r0, [pc, #56]	; (20780 <hci_driver_open+0x1f8>)
   20746:	f005 f834 	bl	257b2 <z_impl_z_log_msg_static_create>
   2074a:	46a5      	mov	sp, r4
		return -EINVAL;
   2074c:	f06f 0415 	mvn.w	r4, #21
   20750:	e794      	b.n	2067c <hci_driver_open+0xf4>
		LOG_ERR("Failed to register rand source (%d)", err);
   20752:	f06f 031b 	mvn.w	r3, #27
   20756:	e7d7      	b.n	20708 <hci_driver_open+0x180>
	err = sdc_enable(receive_signal_raise, sdc_mempool);
   20758:	490e      	ldr	r1, [pc, #56]	; (20794 <hci_driver_open+0x20c>)
   2075a:	480f      	ldr	r0, [pc, #60]	; (20798 <hci_driver_open+0x210>)
   2075c:	f7e0 f910 	bl	980 <sdc_enable>
	if (err) {
   20760:	4604      	mov	r4, r0
   20762:	b910      	cbnz	r0, 2076a <hci_driver_open+0x1e2>
	MULTITHREADING_LOCK_RELEASE();
   20764:	f7ff fcf8 	bl	20158 <multithreading_lock_release>
	return 0;
   20768:	e788      	b.n	2067c <hci_driver_open+0xf4>
		MULTITHREADING_LOCK_RELEASE();
   2076a:	f7ff fcf5 	bl	20158 <multithreading_lock_release>
		return err;
   2076e:	e785      	b.n	2067c <hci_driver_open+0xf4>
   20770:	000293e9 	.word	0x000293e9
   20774:	200063a8 	.word	0x200063a8
   20778:	0002b970 	.word	0x0002b970
   2077c:	0002d958 	.word	0x0002d958
   20780:	0002b1ac 	.word	0x0002b1ac
   20784:	0002aef4 	.word	0x0002aef4
   20788:	0002b2cc 	.word	0x0002b2cc
   2078c:	0002d980 	.word	0x0002d980
   20790:	0002d9a0 	.word	0x0002d9a0
   20794:	200027c0 	.word	0x200027c0
   20798:	000204ad 	.word	0x000204ad

0002079c <configure_memory_usage>:
{
   2079c:	b5b0      	push	{r4, r5, r7, lr}
   2079e:	b082      	sub	sp, #8
   207a0:	af00      	add	r7, sp, #0
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   207a2:	2308      	movs	r3, #8
   207a4:	713b      	strb	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   207a6:	1d3a      	adds	r2, r7, #4
   207a8:	2101      	movs	r1, #1
   207aa:	2000      	movs	r0, #0
   207ac:	f7e0 f88e 	bl	8cc <sdc_cfg_set>
	if (required_memory < 0) {
   207b0:	2800      	cmp	r0, #0
   207b2:	db24      	blt.n	207fe <configure_memory_usage+0x62>
	cfg.buffer_cfg.rx_packet_size = MAX_RX_PACKET_SIZE;
   207b4:	231b      	movs	r3, #27
   207b6:	717b      	strb	r3, [r7, #5]
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   207b8:	713b      	strb	r3, [r7, #4]
	cfg.buffer_cfg.rx_packet_count = CONFIG_BT_CTLR_SDC_RX_PACKET_COUNT;
   207ba:	2302      	movs	r3, #2
   207bc:	71fb      	strb	r3, [r7, #7]
	cfg.buffer_cfg.tx_packet_count = CONFIG_BT_CTLR_SDC_TX_PACKET_COUNT;
   207be:	2103      	movs	r1, #3
   207c0:	71b9      	strb	r1, [r7, #6]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   207c2:	1d3a      	adds	r2, r7, #4
   207c4:	2000      	movs	r0, #0
   207c6:	f7e0 f881 	bl	8cc <sdc_cfg_set>
	if (required_memory < 0) {
   207ca:	2800      	cmp	r0, #0
   207cc:	db17      	blt.n	207fe <configure_memory_usage+0x62>
	cfg.event_length.event_length_us =
   207ce:	f641 534c 	movw	r3, #7500	; 0x1d4c
   207d2:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   207d4:	1d3a      	adds	r2, r7, #4
   207d6:	2104      	movs	r1, #4
   207d8:	2000      	movs	r0, #0
   207da:	f7e0 f877 	bl	8cc <sdc_cfg_set>
	if (required_memory < 0) {
   207de:	2800      	cmp	r0, #0
   207e0:	db0d      	blt.n	207fe <configure_memory_usage+0x62>
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   207e2:	2303      	movs	r3, #3
   207e4:	713b      	strb	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   207e6:	1d3a      	adds	r2, r7, #4
   207e8:	2106      	movs	r1, #6
   207ea:	2000      	movs	r0, #0
   207ec:	f7e0 f86e 	bl	8cc <sdc_cfg_set>
		if (required_memory < 0) {
   207f0:	2800      	cmp	r0, #0
   207f2:	db04      	blt.n	207fe <configure_memory_usage+0x62>
	if (required_memory > sizeof(sdc_mempool)) {
   207f4:	f642 232e 	movw	r3, #10798	; 0x2a2e
   207f8:	4298      	cmp	r0, r3
   207fa:	d803      	bhi.n	20804 <configure_memory_usage+0x68>
	return 0;
   207fc:	2000      	movs	r0, #0
}
   207fe:	3708      	adds	r7, #8
   20800:	46bd      	mov	sp, r7
   20802:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("Allocated memory too low: %u < %u",
   20804:	466c      	mov	r4, sp
   20806:	b088      	sub	sp, #32
   20808:	466b      	mov	r3, sp
   2080a:	f113 0210 	adds.w	r2, r3, #16
   2080e:	d03f      	beq.n	20890 <configure_memory_usage+0xf4>
   20810:	2110      	movs	r1, #16
   20812:	b172      	cbz	r2, 20832 <configure_memory_usage+0x96>
   20814:	468c      	mov	ip, r1
   20816:	2904      	cmp	r1, #4
   20818:	dd01      	ble.n	2081e <configure_memory_usage+0x82>
   2081a:	4d20      	ldr	r5, [pc, #128]	; (2089c <configure_memory_usage+0x100>)
   2081c:	615d      	str	r5, [r3, #20]
   2081e:	f1bc 0f08 	cmp.w	ip, #8
   20822:	dd02      	ble.n	2082a <configure_memory_usage+0x8e>
   20824:	f642 252e 	movw	r5, #10798	; 0x2a2e
   20828:	619d      	str	r5, [r3, #24]
   2082a:	f1bc 0f0c 	cmp.w	ip, #12
   2082e:	dd00      	ble.n	20832 <configure_memory_usage+0x96>
   20830:	61d8      	str	r0, [r3, #28]
   20832:	290f      	cmp	r1, #15
   20834:	dd2f      	ble.n	20896 <configure_memory_usage+0xfa>
   20836:	f04f 0c10 	mov.w	ip, #16
   2083a:	b13a      	cbz	r2, 2084c <configure_memory_usage+0xb0>
   2083c:	2104      	movs	r1, #4
   2083e:	7039      	strb	r1, [r7, #0]
   20840:	2100      	movs	r1, #0
   20842:	7079      	strb	r1, [r7, #1]
   20844:	70b9      	strb	r1, [r7, #2]
   20846:	70f9      	strb	r1, [r7, #3]
   20848:	6838      	ldr	r0, [r7, #0]
   2084a:	6118      	str	r0, [r3, #16]
   2084c:	2100      	movs	r1, #0
   2084e:	f36f 0100 	bfc	r1, #0, #1
   20852:	f36f 0141 	bfc	r1, #1, #1
   20856:	f36f 0182 	bfc	r1, #2, #1
   2085a:	f36f 01c5 	bfc	r1, #3, #3
   2085e:	2301      	movs	r3, #1
   20860:	f363 1188 	bfi	r1, r3, #6, #3
   20864:	f40c 7c7d 	and.w	ip, ip, #1012	; 0x3f4
   20868:	f36c 2152 	bfi	r1, ip, #9, #10
   2086c:	f36f 41de 	bfc	r1, #19, #12
   20870:	f36f 71df 	bfc	r1, #31, #1
   20874:	2300      	movs	r3, #0
   20876:	480a      	ldr	r0, [pc, #40]	; (208a0 <configure_memory_usage+0x104>)
   20878:	f004 ff9b 	bl	257b2 <z_impl_z_log_msg_static_create>
   2087c:	46a5      	mov	sp, r4
		k_panic();
   2087e:	4040      	eors	r0, r0
   20880:	f380 8811 	msr	BASEPRI, r0
   20884:	f04f 0004 	mov.w	r0, #4
   20888:	df02      	svc	2
		return -ENOMEM;
   2088a:	f06f 000b 	mvn.w	r0, #11
   2088e:	e7b6      	b.n	207fe <configure_memory_usage+0x62>
		LOG_ERR("Allocated memory too low: %u < %u",
   20890:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   20894:	e7bd      	b.n	20812 <configure_memory_usage+0x76>
   20896:	f06f 0c1b 	mvn.w	ip, #27
   2089a:	e7ce      	b.n	2083a <configure_memory_usage+0x9e>
   2089c:	0002d9c4 	.word	0x0002d9c4
   208a0:	0002b1ac 	.word	0x0002b1ac

000208a4 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   208a4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   208a6:	4806      	ldr	r0, [pc, #24]	; (208c0 <hci_driver_init+0x1c>)
   208a8:	f7f8 f864 	bl	18974 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   208ac:	4805      	ldr	r0, [pc, #20]	; (208c4 <hci_driver_init+0x20>)
   208ae:	f7e0 f891 	bl	9d4 <sdc_init>

	err = configure_supported_features();
   208b2:	f008 fd7f 	bl	293b4 <configure_supported_features>
	if (err) {
   208b6:	b100      	cbz	r0, 208ba <hci_driver_init+0x16>
	if (err) {
		return err;
	}

	return err;
}
   208b8:	bd08      	pop	{r3, pc}
	err = configure_memory_usage();
   208ba:	f7ff ff6f 	bl	2079c <configure_memory_usage>
	if (err) {
   208be:	e7fb      	b.n	208b8 <hci_driver_init+0x14>
   208c0:	0002da14 	.word	0x0002da14
   208c4:	000201e5 	.word	0x000201e5

000208c8 <hci_driver_receive_process>:
{
   208c8:	b508      	push	{r3, lr}
	if (fetch_and_process_hci_msg(&hci_buf[0])) {
   208ca:	4805      	ldr	r0, [pc, #20]	; (208e0 <hci_driver_receive_process+0x18>)
   208cc:	f7ff fd86 	bl	203dc <fetch_and_process_hci_msg>
   208d0:	b900      	cbnz	r0, 208d4 <hci_driver_receive_process+0xc>
}
   208d2:	bd08      	pop	{r3, pc}
   208d4:	4903      	ldr	r1, [pc, #12]	; (208e4 <hci_driver_receive_process+0x1c>)
   208d6:	4804      	ldr	r0, [pc, #16]	; (208e8 <hci_driver_receive_process+0x20>)
   208d8:	f009 fdae 	bl	2a438 <k_work_submit_to_queue>
   208dc:	e7f9      	b.n	208d2 <hci_driver_receive_process+0xa>
   208de:	bf00      	nop
   208e0:	20006360 	.word	0x20006360
   208e4:	200063a8 	.word	0x200063a8
   208e8:	200052a8 	.word	0x200052a8

000208ec <command_generates_command_complete_event>:

static hci_internal_user_cmd_handler_t user_cmd_handler;

static bool command_generates_command_complete_event(uint16_t hci_opcode)
{
	switch (hci_opcode) {
   208ec:	f242 0332 	movw	r3, #8242	; 0x2032
   208f0:	4298      	cmp	r0, r3
   208f2:	d04a      	beq.n	2098a <command_generates_command_complete_event+0x9e>
   208f4:	d82d      	bhi.n	20952 <command_generates_command_complete_event+0x66>
   208f6:	f242 0326 	movw	r3, #8230	; 0x2026
   208fa:	4298      	cmp	r0, r3
   208fc:	d847      	bhi.n	2098e <command_generates_command_complete_event+0xa2>
   208fe:	f242 030d 	movw	r3, #8205	; 0x200d
   20902:	4298      	cmp	r0, r3
   20904:	d218      	bcs.n	20938 <command_generates_command_complete_event+0x4c>
   20906:	f240 4306 	movw	r3, #1030	; 0x406
   2090a:	4298      	cmp	r0, r3
   2090c:	d041      	beq.n	20992 <command_generates_command_complete_event+0xa6>
   2090e:	f240 431d 	movw	r3, #1053	; 0x41d
   20912:	4298      	cmp	r0, r3
   20914:	d001      	beq.n	2091a <command_generates_command_complete_event+0x2e>
	case SDC_HCI_OPCODE_CMD_VS_WRITE_REMOTE_TX_POWER:
	case BT_HCI_OP_LE_P256_PUBLIC_KEY:
	case BT_HCI_OP_LE_GENERATE_DHKEY:
		return false;
	default:
		return true;
   20916:	2001      	movs	r0, #1
   20918:	4770      	bx	lr
	switch (hci_opcode) {
   2091a:	2000      	movs	r0, #0
   2091c:	4770      	bx	lr
   2091e:	f5a0 5001 	sub.w	r0, r0, #8256	; 0x2040
   20922:	382d      	subs	r0, #45	; 0x2d
   20924:	b280      	uxth	r0, r0
   20926:	4b1e      	ldr	r3, [pc, #120]	; (209a0 <command_generates_command_complete_event+0xb4>)
   20928:	40c3      	lsrs	r3, r0
   2092a:	f013 0f01 	tst.w	r3, #1
   2092e:	d101      	bne.n	20934 <command_generates_command_complete_event+0x48>
		return true;
   20930:	2001      	movs	r0, #1
   20932:	4770      	bx	lr
	switch (hci_opcode) {
   20934:	2000      	movs	r0, #0
   20936:	4770      	bx	lr
   20938:	f5a0 5000 	sub.w	r0, r0, #8192	; 0x2000
   2093c:	380d      	subs	r0, #13
   2093e:	b280      	uxth	r0, r0
   20940:	4b18      	ldr	r3, [pc, #96]	; (209a4 <command_generates_command_complete_event+0xb8>)
   20942:	40c3      	lsrs	r3, r0
   20944:	f013 0f01 	tst.w	r3, #1
   20948:	d101      	bne.n	2094e <command_generates_command_complete_event+0x62>
		return true;
   2094a:	2001      	movs	r0, #1
   2094c:	4770      	bx	lr
	switch (hci_opcode) {
   2094e:	2000      	movs	r0, #0
   20950:	4770      	bx	lr
   20952:	f242 0385 	movw	r3, #8325	; 0x2085
   20956:	4298      	cmp	r0, r3
   20958:	d80b      	bhi.n	20972 <command_generates_command_complete_event+0x86>
   2095a:	f242 036d 	movw	r3, #8301	; 0x206d
   2095e:	4298      	cmp	r0, r3
   20960:	d2dd      	bcs.n	2091e <command_generates_command_complete_event+0x32>
   20962:	f5a0 5001 	sub.w	r0, r0, #8256	; 0x2040
   20966:	3803      	subs	r0, #3
   20968:	b280      	uxth	r0, r0
   2096a:	2801      	cmp	r0, #1
   2096c:	d913      	bls.n	20996 <command_generates_command_complete_event+0xaa>
		return true;
   2096e:	2001      	movs	r0, #1
   20970:	4770      	bx	lr
	switch (hci_opcode) {
   20972:	f64f 5302 	movw	r3, #64770	; 0xfd02
   20976:	4298      	cmp	r0, r3
   20978:	d00f      	beq.n	2099a <command_generates_command_complete_event+0xae>
   2097a:	f64f 530a 	movw	r3, #64778	; 0xfd0a
   2097e:	4298      	cmp	r0, r3
   20980:	d001      	beq.n	20986 <command_generates_command_complete_event+0x9a>
		return true;
   20982:	2001      	movs	r0, #1
	}
}
   20984:	4770      	bx	lr
	switch (hci_opcode) {
   20986:	2000      	movs	r0, #0
   20988:	4770      	bx	lr
   2098a:	2000      	movs	r0, #0
   2098c:	4770      	bx	lr
		return true;
   2098e:	2001      	movs	r0, #1
   20990:	4770      	bx	lr
	switch (hci_opcode) {
   20992:	2000      	movs	r0, #0
   20994:	4770      	bx	lr
   20996:	2000      	movs	r0, #0
   20998:	4770      	bx	lr
   2099a:	2000      	movs	r0, #0
   2099c:	4770      	bx	lr
   2099e:	bf00      	nop
   209a0:	01000401 	.word	0x01000401
   209a4:	03001241 	.word	0x03001241

000209a8 <cmd_put>:
	}
}
#endif /* CONFIG_BT_HCI_VS */

static void cmd_put(uint8_t *cmd_in, uint8_t * const raw_event_out)
{
   209a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   209aa:	b083      	sub	sp, #12
   209ac:	4607      	mov	r7, r0
   209ae:	460e      	mov	r6, r1
   209b0:	7843      	ldrb	r3, [r0, #1]
   209b2:	7805      	ldrb	r5, [r0, #0]
   209b4:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	uint8_t status = BT_HCI_ERR_UNKNOWN_CMD;
	uint16_t opcode = sys_get_le16(cmd_in);
	bool generate_command_status_event;

	/* Assume command complete */
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   209b8:	2304      	movs	r3, #4
   209ba:	f88d 3006 	strb.w	r3, [sp, #6]
				      + sizeof(struct bt_hci_evt_cc_status);

	if (user_cmd_handler) {
   209be:	4b35      	ldr	r3, [pc, #212]	; (20a94 <cmd_put+0xec>)
   209c0:	681c      	ldr	r4, [r3, #0]
   209c2:	b13c      	cbz	r4, 209d4 <cmd_put+0x2c>
		status = user_cmd_handler(cmd_in,
   209c4:	f10d 0307 	add.w	r3, sp, #7
   209c8:	f10d 0206 	add.w	r2, sp, #6
   209cc:	47a0      	blx	r4
   209ce:	4604      	mov	r4, r0
					  raw_event_out,
					  &return_param_length,
					  &generate_command_status_event);
	}

	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   209d0:	2801      	cmp	r0, #1
   209d2:	d121      	bne.n	20a18 <cmd_put+0x70>

		switch (BT_OGF(opcode)) {
   209d4:	0aab      	lsrs	r3, r5, #10
   209d6:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   209da:	d20b      	bcs.n	209f4 <cmd_put+0x4c>
   209dc:	b21a      	sxth	r2, r3
   209de:	2a00      	cmp	r2, #0
   209e0:	d04b      	beq.n	20a7a <cmd_put+0xd2>
   209e2:	3b01      	subs	r3, #1
   209e4:	2b07      	cmp	r3, #7
   209e6:	d84a      	bhi.n	20a7e <cmd_put+0xd6>
   209e8:	e8df f003 	tbb	[pc, r3]
   209ec:	2f274922 	.word	0x2f274922
   209f0:	3f494937 	.word	0x3f494937
   209f4:	2b3f      	cmp	r3, #63	; 0x3f
   209f6:	d107      	bne.n	20a08 <cmd_put+0x60>
						       raw_event_out,
						       &return_param_length);
			break;
#if defined(CONFIG_BT_HCI_VS)
		case BT_OGF_VS:
			status = vs_cmd_put(cmd_in,
   209f8:	f10d 0206 	add.w	r2, sp, #6
   209fc:	4631      	mov	r1, r6
   209fe:	4638      	mov	r0, r7
   20a00:	f008 ffb8 	bl	29974 <vs_cmd_put>
   20a04:	4604      	mov	r4, r0
					    raw_event_out,
					    &return_param_length);
			break;
   20a06:	e000      	b.n	20a0a <cmd_put+0x62>
		switch (BT_OGF(opcode)) {
   20a08:	2401      	movs	r4, #1
		default:
			status = BT_HCI_ERR_UNKNOWN_CMD;
			break;
		}

		generate_command_status_event = !command_generates_command_complete_event(opcode);
   20a0a:	4628      	mov	r0, r5
   20a0c:	f7ff ff6e 	bl	208ec <command_generates_command_complete_event>
   20a10:	f080 0001 	eor.w	r0, r0, #1
   20a14:	f88d 0007 	strb.w	r0, [sp, #7]
	}

	if (generate_command_status_event ||
   20a18:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20a1c:	b90b      	cbnz	r3, 20a22 <cmd_put+0x7a>
   20a1e:	2c01      	cmp	r4, #1
   20a20:	d12f      	bne.n	20a82 <cmd_put+0xda>
	    (status == BT_HCI_ERR_UNKNOWN_CMD))	{
		encode_command_status(raw_event_out, opcode, status);
   20a22:	4622      	mov	r2, r4
   20a24:	4629      	mov	r1, r5
   20a26:	4630      	mov	r0, r6
   20a28:	f008 fce2 	bl	293f0 <encode_command_status>
	} else {
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}
   20a2c:	b003      	add	sp, #12
   20a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			status = link_control_cmd_put(cmd_in);
   20a30:	4638      	mov	r0, r7
   20a32:	f008 fcf8 	bl	29426 <link_control_cmd_put>
   20a36:	4604      	mov	r4, r0
			break;
   20a38:	e7e7      	b.n	20a0a <cmd_put+0x62>
			status = controller_and_baseband_cmd_put(cmd_in,
   20a3a:	f10d 0206 	add.w	r2, sp, #6
   20a3e:	4631      	mov	r1, r6
   20a40:	4638      	mov	r0, r7
   20a42:	f008 fd07 	bl	29454 <controller_and_baseband_cmd_put>
   20a46:	4604      	mov	r4, r0
			break;
   20a48:	e7df      	b.n	20a0a <cmd_put+0x62>
			status = info_param_cmd_put(cmd_in,
   20a4a:	f10d 0206 	add.w	r2, sp, #6
   20a4e:	4631      	mov	r1, r6
   20a50:	4638      	mov	r0, r7
   20a52:	f008 fe2b 	bl	296ac <info_param_cmd_put>
   20a56:	4604      	mov	r4, r0
			break;
   20a58:	e7d7      	b.n	20a0a <cmd_put+0x62>
			status = status_param_cmd_put(cmd_in,
   20a5a:	f10d 0206 	add.w	r2, sp, #6
   20a5e:	4631      	mov	r1, r6
   20a60:	4638      	mov	r0, r7
   20a62:	f008 fcde 	bl	29422 <status_param_cmd_put>
   20a66:	4604      	mov	r4, r0
			break;
   20a68:	e7cf      	b.n	20a0a <cmd_put+0x62>
			status = le_controller_cmd_put(cmd_in,
   20a6a:	f10d 0206 	add.w	r2, sp, #6
   20a6e:	4631      	mov	r1, r6
   20a70:	4638      	mov	r0, r7
   20a72:	f008 feb1 	bl	297d8 <le_controller_cmd_put>
   20a76:	4604      	mov	r4, r0
			break;
   20a78:	e7c7      	b.n	20a0a <cmd_put+0x62>
		switch (BT_OGF(opcode)) {
   20a7a:	2401      	movs	r4, #1
   20a7c:	e7c5      	b.n	20a0a <cmd_put+0x62>
   20a7e:	2401      	movs	r4, #1
   20a80:	e7c3      	b.n	20a0a <cmd_put+0x62>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   20a82:	4623      	mov	r3, r4
   20a84:	f89d 2006 	ldrb.w	r2, [sp, #6]
   20a88:	4629      	mov	r1, r5
   20a8a:	4630      	mov	r0, r6
   20a8c:	f008 fcb9 	bl	29402 <encode_command_complete_header>
}
   20a90:	e7cc      	b.n	20a2c <cmd_put+0x84>
   20a92:	bf00      	nop
   20a94:	200063b8 	.word	0x200063b8

00020a98 <hci_internal_cmd_put>:

int hci_internal_cmd_put(uint8_t *cmd_in)
{
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   20a98:	4b07      	ldr	r3, [pc, #28]	; (20ab8 <hci_internal_cmd_put+0x20>)
   20a9a:	781b      	ldrb	r3, [r3, #0]
   20a9c:	b94b      	cbnz	r3, 20ab2 <hci_internal_cmd_put+0x1a>
{
   20a9e:	b510      	push	{r4, lr}
		> HCI_CMD_PACKET_MAX_SIZE) {
		return -EINVAL;
	}

	if (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT)) {
		cmd_put(cmd_in, &cmd_complete_or_status.raw_event[0]);
   20aa0:	4c06      	ldr	r4, [pc, #24]	; (20abc <hci_internal_cmd_put+0x24>)
   20aa2:	4621      	mov	r1, r4
   20aa4:	f7ff ff80 	bl	209a8 <cmd_put>
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   20aa8:	2301      	movs	r3, #1
   20aaa:	f804 3c01 	strb.w	r3, [r4, #-1]
	}

	return 0;
   20aae:	2000      	movs	r0, #0
}
   20ab0:	bd10      	pop	{r4, pc}
		return -NRF_EPERM;
   20ab2:	f04f 30ff 	mov.w	r0, #4294967295
}
   20ab6:	4770      	bx	lr
   20ab8:	200063bc 	.word	0x200063bc
   20abc:	200063bd 	.word	0x200063bd

00020ac0 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   20ac0:	b538      	push	{r3, r4, r5, lr}
   20ac2:	460c      	mov	r4, r1
	if (cmd_complete_or_status.occurred) {
   20ac4:	4b08      	ldr	r3, [pc, #32]	; (20ae8 <hci_internal_msg_get+0x28>)
   20ac6:	781b      	ldrb	r3, [r3, #0]
   20ac8:	b913      	cbnz	r3, 20ad0 <hci_internal_msg_get+0x10>
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
   20aca:	f7ec fa77 	bl	cfbc <sdc_hci_get>
}
   20ace:	bd38      	pop	{r3, r4, r5, pc}
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   20ad0:	4d05      	ldr	r5, [pc, #20]	; (20ae8 <hci_internal_msg_get+0x28>)
   20ad2:	78aa      	ldrb	r2, [r5, #2]
		memcpy(msg_out,
   20ad4:	3202      	adds	r2, #2
   20ad6:	1c69      	adds	r1, r5, #1
   20ad8:	f005 faa5 	bl	26026 <memcpy>
		cmd_complete_or_status.occurred = false;
   20adc:	2000      	movs	r0, #0
   20ade:	7028      	strb	r0, [r5, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   20ae0:	2304      	movs	r3, #4
   20ae2:	7023      	strb	r3, [r4, #0]
		return 0;
   20ae4:	e7f3      	b.n	20ace <hci_internal_msg_get+0xe>
   20ae6:	bf00      	nop
   20ae8:	200063bc 	.word	0x200063bc

00020aec <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   20aec:	b538      	push	{r3, r4, r5, lr}
   20aee:	4605      	mov	r5, r0
   20af0:	460c      	mov	r4, r1
   20af2:	4809      	ldr	r0, [pc, #36]	; (20b18 <bt_rand+0x2c>)
   20af4:	f009 f99f 	bl	29e36 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   20af8:	f080 0301 	eor.w	r3, r0, #1
   20afc:	f013 0fff 	tst.w	r3, #255	; 0xff
   20b00:	d106      	bne.n	20b10 <bt_rand+0x24>
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   20b02:	b2a2      	uxth	r2, r4
	const struct entropy_driver_api *api =
   20b04:	4804      	ldr	r0, [pc, #16]	; (20b18 <bt_rand+0x2c>)
   20b06:	6883      	ldr	r3, [r0, #8]
	return api->get_entropy(dev, buffer, length);
   20b08:	681b      	ldr	r3, [r3, #0]
   20b0a:	4629      	mov	r1, r5
   20b0c:	4798      	blx	r3
}
   20b0e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   20b10:	f06f 0012 	mvn.w	r0, #18
   20b14:	e7fb      	b.n	20b0e <bt_rand+0x22>
   20b16:	bf00      	nop
   20b18:	0002aef4 	.word	0x0002aef4

00020b1c <public_key>:

#if defined(CONFIG_BT_CTLR_ECDH_LIB_OBERON)
#include <ocrypto_ecdh_p256.h>

static uint8_t public_key(void)
{
   20b1c:	b508      	push	{r3, lr}
   20b1e:	e002      	b.n	20b26 <public_key+0xa>
		if (err) {
			return BT_HCI_ERR_UNSPECIFIED;
		}

		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
			err = -1;
   20b20:	f04f 30ff 	mov.w	r0, #4294967295
			continue;
		}

		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
						   ecdh.private_key_be);
	} while (err);
   20b24:	b190      	cbz	r0, 20b4c <public_key+0x30>
		err = bt_rand(ecdh.private_key_be, 32);
   20b26:	2120      	movs	r1, #32
   20b28:	4809      	ldr	r0, [pc, #36]	; (20b50 <public_key+0x34>)
   20b2a:	f7ff ffdf 	bl	20aec <bt_rand>
		if (err) {
   20b2e:	b960      	cbnz	r0, 20b4a <public_key+0x2e>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   20b30:	2220      	movs	r2, #32
   20b32:	4908      	ldr	r1, [pc, #32]	; (20b54 <public_key+0x38>)
   20b34:	4806      	ldr	r0, [pc, #24]	; (20b50 <public_key+0x34>)
   20b36:	f005 fa64 	bl	26002 <memcmp>
   20b3a:	2800      	cmp	r0, #0
   20b3c:	d0f0      	beq.n	20b20 <public_key+0x4>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   20b3e:	4904      	ldr	r1, [pc, #16]	; (20b50 <public_key+0x34>)
   20b40:	f101 0020 	add.w	r0, r1, #32
   20b44:	f003 f8fc 	bl	23d40 <ocrypto_ecdh_p256_public_key>
   20b48:	e7ec      	b.n	20b24 <public_key+0x8>
			return BT_HCI_ERR_UNSPECIFIED;
   20b4a:	201f      	movs	r0, #31

	return 0;
}
   20b4c:	bd08      	pop	{r3, pc}
   20b4e:	bf00      	nop
   20b50:	20006418 	.word	0x20006418
   20b54:	0002da80 	.word	0x0002da80

00020b58 <ecdh_p256_public_key>:
	return 0;
}
#endif /* defined(BT_CTLR_ECDH_LIB_TINYCRYPT) */

static struct net_buf *ecdh_p256_public_key(void)
{
   20b58:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_meta_event *meta;
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;
	uint8_t status;

	status = public_key();
   20b5a:	f7ff ffdf 	bl	20b1c <public_key>
   20b5e:	4605      	mov	r5, r0

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   20b60:	f04f 32ff 	mov.w	r2, #4294967295
   20b64:	f04f 33ff 	mov.w	r3, #4294967295
   20b68:	2001      	movs	r0, #1
   20b6a:	f7f5 fbd3 	bl	16314 <bt_buf_get_rx>
   20b6e:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   20b70:	f100 060c 	add.w	r6, r0, #12
   20b74:	2102      	movs	r1, #2
   20b76:	4630      	mov	r0, r6
   20b78:	f007 fc0f 	bl	2839a <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   20b7c:	233e      	movs	r3, #62	; 0x3e
   20b7e:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   20b80:	2342      	movs	r3, #66	; 0x42
   20b82:	7043      	strb	r3, [r0, #1]
   20b84:	2101      	movs	r1, #1
   20b86:	4630      	mov	r0, r6
   20b88:	f007 fc07 	bl	2839a <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   20b8c:	2308      	movs	r3, #8
   20b8e:	7003      	strb	r3, [r0, #0]
   20b90:	2141      	movs	r1, #65	; 0x41
   20b92:	4630      	mov	r0, r6
   20b94:	f007 fc01 	bl	2839a <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   20b98:	7005      	strb	r5, [r0, #0]

	if (status) {
   20b9a:	b91d      	cbnz	r5, 20ba4 <ecdh_p256_public_key+0x4c>
		(void)memset(evt->key, 0, sizeof(evt->key));
	} else {
		/* Reverse X */
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   20b9c:	1c42      	adds	r2, r0, #1

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;
   20b9e:	4b0e      	ldr	r3, [pc, #56]	; (20bd8 <ecdh_p256_public_key+0x80>)

	for (; length > 0; length--) {
   20ba0:	2120      	movs	r1, #32
   20ba2:	e00a      	b.n	20bba <ecdh_p256_public_key+0x62>
		(void)memset(evt->key, 0, sizeof(evt->key));
   20ba4:	2240      	movs	r2, #64	; 0x40
   20ba6:	2100      	movs	r1, #0
   20ba8:	3001      	adds	r0, #1
   20baa:	f005 fa6b 	bl	26084 <memset>
   20bae:	e011      	b.n	20bd4 <ecdh_p256_public_key+0x7c>
		*pdst++ = *psrc--;
   20bb0:	f813 c901 	ldrb.w	ip, [r3], #-1
   20bb4:	f802 cb01 	strb.w	ip, [r2], #1
	for (; length > 0; length--) {
   20bb8:	3901      	subs	r1, #1
   20bba:	2900      	cmp	r1, #0
   20bbc:	d1f8      	bne.n	20bb0 <ecdh_p256_public_key+0x58>
		/* Reverse Y */
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   20bbe:	3021      	adds	r0, #33	; 0x21
	psrc += length - 1;
   20bc0:	4b06      	ldr	r3, [pc, #24]	; (20bdc <ecdh_p256_public_key+0x84>)
	for (; length > 0; length--) {
   20bc2:	2220      	movs	r2, #32
   20bc4:	e004      	b.n	20bd0 <ecdh_p256_public_key+0x78>
		*pdst++ = *psrc--;
   20bc6:	f813 1901 	ldrb.w	r1, [r3], #-1
   20bca:	f800 1b01 	strb.w	r1, [r0], #1
	for (; length > 0; length--) {
   20bce:	3a01      	subs	r2, #1
   20bd0:	2a00      	cmp	r2, #0
   20bd2:	d1f8      	bne.n	20bc6 <ecdh_p256_public_key+0x6e>
	}

	return buf;
}
   20bd4:	4620      	mov	r0, r4
   20bd6:	bd70      	pop	{r4, r5, r6, pc}
   20bd8:	20006457 	.word	0x20006457
   20bdc:	20006477 	.word	0x20006477

00020be0 <common_secret>:
{
   20be0:	b5b0      	push	{r4, r5, r7, lr}
   20be2:	b082      	sub	sp, #8
   20be4:	af00      	add	r7, sp, #0
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   20be6:	b150      	cbz	r0, 20bfe <common_secret+0x1e>
   20be8:	4925      	ldr	r1, [pc, #148]	; (20c80 <common_secret+0xa0>)
   20bea:	4826      	ldr	r0, [pc, #152]	; (20c84 <common_secret+0xa4>)
   20bec:	4602      	mov	r2, r0
   20bee:	f003 f8bb 	bl	23d68 <ocrypto_ecdh_p256_common_secret>
	if (err) {
   20bf2:	4603      	mov	r3, r0
   20bf4:	b928      	cbnz	r0, 20c02 <common_secret+0x22>
	return 0;
   20bf6:	2000      	movs	r0, #0
}
   20bf8:	3708      	adds	r7, #8
   20bfa:	46bd      	mov	sp, r7
   20bfc:	bdb0      	pop	{r4, r5, r7, pc}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   20bfe:	4922      	ldr	r1, [pc, #136]	; (20c88 <common_secret+0xa8>)
   20c00:	e7f3      	b.n	20bea <common_secret+0xa>
		LOG_ERR("public key is not valid (err %d)", err);
   20c02:	466c      	mov	r4, sp
   20c04:	b088      	sub	sp, #32
   20c06:	4669      	mov	r1, sp
   20c08:	f111 0210 	adds.w	r2, r1, #16
   20c0c:	d031      	beq.n	20c72 <common_secret+0x92>
   20c0e:	200c      	movs	r0, #12
   20c10:	b142      	cbz	r2, 20c24 <common_secret+0x44>
   20c12:	4684      	mov	ip, r0
   20c14:	2804      	cmp	r0, #4
   20c16:	dd01      	ble.n	20c1c <common_secret+0x3c>
   20c18:	4d1c      	ldr	r5, [pc, #112]	; (20c8c <common_secret+0xac>)
   20c1a:	614d      	str	r5, [r1, #20]
   20c1c:	f1bc 0f08 	cmp.w	ip, #8
   20c20:	dd00      	ble.n	20c24 <common_secret+0x44>
   20c22:	618b      	str	r3, [r1, #24]
   20c24:	280b      	cmp	r0, #11
   20c26:	dd27      	ble.n	20c78 <common_secret+0x98>
   20c28:	230c      	movs	r3, #12
   20c2a:	b13a      	cbz	r2, 20c3c <common_secret+0x5c>
   20c2c:	2003      	movs	r0, #3
   20c2e:	7138      	strb	r0, [r7, #4]
   20c30:	2000      	movs	r0, #0
   20c32:	7178      	strb	r0, [r7, #5]
   20c34:	71b8      	strb	r0, [r7, #6]
   20c36:	71f8      	strb	r0, [r7, #7]
   20c38:	6878      	ldr	r0, [r7, #4]
   20c3a:	6108      	str	r0, [r1, #16]
   20c3c:	2100      	movs	r1, #0
   20c3e:	f36f 0100 	bfc	r1, #0, #1
   20c42:	f36f 0141 	bfc	r1, #1, #1
   20c46:	f36f 0182 	bfc	r1, #2, #1
   20c4a:	f36f 01c5 	bfc	r1, #3, #3
   20c4e:	2001      	movs	r0, #1
   20c50:	f360 1188 	bfi	r1, r0, #6, #3
   20c54:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   20c58:	f363 2152 	bfi	r1, r3, #9, #10
   20c5c:	f36f 41de 	bfc	r1, #19, #12
   20c60:	f36f 71df 	bfc	r1, #31, #1
   20c64:	2300      	movs	r3, #0
   20c66:	480a      	ldr	r0, [pc, #40]	; (20c90 <common_secret+0xb0>)
   20c68:	f004 fda3 	bl	257b2 <z_impl_z_log_msg_static_create>
   20c6c:	46a5      	mov	sp, r4
		return BT_HCI_ERR_INVALID_PARAM;
   20c6e:	2012      	movs	r0, #18
   20c70:	e7c2      	b.n	20bf8 <common_secret+0x18>
		LOG_ERR("public key is not valid (err %d)", err);
   20c72:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   20c76:	e7cb      	b.n	20c10 <common_secret+0x30>
   20c78:	f06f 031b 	mvn.w	r3, #27
   20c7c:	e7d5      	b.n	20c2a <common_secret+0x4a>
   20c7e:	bf00      	nop
   20c80:	0002da80 	.word	0x0002da80
   20c84:	20006438 	.word	0x20006438
   20c88:	20006418 	.word	0x20006418
   20c8c:	0002da3c 	.word	0x0002da3c
   20c90:	0002b1a4 	.word	0x0002b1a4

00020c94 <ecdh_p256_common_secret>:

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   20c94:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_meta_event *meta;
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);
   20c96:	f7ff ffa3 	bl	20be0 <common_secret>
   20c9a:	4605      	mov	r5, r0

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   20c9c:	f04f 32ff 	mov.w	r2, #4294967295
   20ca0:	f04f 33ff 	mov.w	r3, #4294967295
   20ca4:	2001      	movs	r0, #1
   20ca6:	f7f5 fb35 	bl	16314 <bt_buf_get_rx>
   20caa:	4604      	mov	r4, r0
   20cac:	f100 060c 	add.w	r6, r0, #12
   20cb0:	2102      	movs	r1, #2
   20cb2:	4630      	mov	r0, r6
   20cb4:	f007 fb71 	bl	2839a <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   20cb8:	233e      	movs	r3, #62	; 0x3e
   20cba:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   20cbc:	2322      	movs	r3, #34	; 0x22
   20cbe:	7043      	strb	r3, [r0, #1]
   20cc0:	2101      	movs	r1, #1
   20cc2:	4630      	mov	r0, r6
   20cc4:	f007 fb69 	bl	2839a <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   20cc8:	2309      	movs	r3, #9
   20cca:	7003      	strb	r3, [r0, #0]
   20ccc:	2121      	movs	r1, #33	; 0x21
   20cce:	4630      	mov	r0, r6
   20cd0:	f007 fb63 	bl	2839a <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   20cd4:	7005      	strb	r5, [r0, #0]

	if (status) {
   20cd6:	b91d      	cbnz	r5, 20ce0 <ecdh_p256_common_secret+0x4c>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
	} else {
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   20cd8:	3001      	adds	r0, #1
	psrc += length - 1;
   20cda:	4b09      	ldr	r3, [pc, #36]	; (20d00 <ecdh_p256_common_secret+0x6c>)
	for (; length > 0; length--) {
   20cdc:	2220      	movs	r2, #32
   20cde:	e00a      	b.n	20cf6 <ecdh_p256_common_secret+0x62>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   20ce0:	2220      	movs	r2, #32
   20ce2:	21ff      	movs	r1, #255	; 0xff
   20ce4:	3001      	adds	r0, #1
   20ce6:	f005 f9cd 	bl	26084 <memset>
   20cea:	e006      	b.n	20cfa <ecdh_p256_common_secret+0x66>
		*pdst++ = *psrc--;
   20cec:	f813 1901 	ldrb.w	r1, [r3], #-1
   20cf0:	f800 1b01 	strb.w	r1, [r0], #1
	for (; length > 0; length--) {
   20cf4:	3a01      	subs	r2, #1
   20cf6:	2a00      	cmp	r2, #0
   20cf8:	d1f8      	bne.n	20cec <ecdh_p256_common_secret+0x58>
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   20cfa:	4620      	mov	r0, r4
   20cfc:	bd70      	pop	{r4, r5, r6, pc}
   20cfe:	bf00      	nop
   20d00:	20006457 	.word	0x20006457

00020d04 <work_submit>:

static struct k_thread ecdh_thread_data;
static K_KERNEL_STACK_DEFINE(ecdh_thread_stack, CONFIG_BT_CTLR_ECDH_STACK_SIZE);

static void work_submit(void)
{
   20d04:	b508      	push	{r3, lr}
	return z_impl_k_poll_signal_raise(sig, result);
   20d06:	2100      	movs	r1, #0
   20d08:	4801      	ldr	r0, [pc, #4]	; (20d10 <work_submit+0xc>)
   20d0a:	f002 ffd3 	bl	23cb4 <z_impl_k_poll_signal_raise>
	k_poll_signal_raise(&ecdh_signal, 0);
}
   20d0e:	bd08      	pop	{r3, pc}
   20d10:	20006404 	.word	0x20006404

00020d14 <ecdh_cmd_process>:
{
   20d14:	b510      	push	{r4, lr}
   20d16:	b088      	sub	sp, #32
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20d18:	f3bf 8f5b 	dmb	ish
   20d1c:	4b25      	ldr	r3, [pc, #148]	; (20db4 <ecdh_cmd_process+0xa0>)
   20d1e:	681b      	ldr	r3, [r3, #0]
   20d20:	f3bf 8f5b 	dmb	ish
	switch (atomic_get(&cmd)) {
   20d24:	2b02      	cmp	r3, #2
   20d26:	d03d      	beq.n	20da4 <ecdh_cmd_process+0x90>
   20d28:	2b04      	cmp	r3, #4
   20d2a:	d03f      	beq.n	20dac <ecdh_cmd_process+0x98>
   20d2c:	2b01      	cmp	r3, #1
   20d2e:	d026      	beq.n	20d7e <ecdh_cmd_process+0x6a>
		LOG_WRN("Unknown command");
   20d30:	4b21      	ldr	r3, [pc, #132]	; (20db8 <ecdh_cmd_process+0xa4>)
   20d32:	9307      	str	r3, [sp, #28]
   20d34:	2302      	movs	r3, #2
   20d36:	f88d 3004 	strb.w	r3, [sp, #4]
   20d3a:	2400      	movs	r4, #0
   20d3c:	f88d 4005 	strb.w	r4, [sp, #5]
   20d40:	f88d 4006 	strb.w	r4, [sp, #6]
   20d44:	f88d 4007 	strb.w	r4, [sp, #7]
   20d48:	9a01      	ldr	r2, [sp, #4]
   20d4a:	9206      	str	r2, [sp, #24]
   20d4c:	4621      	mov	r1, r4
   20d4e:	f364 0100 	bfi	r1, r4, #0, #1
   20d52:	f364 0141 	bfi	r1, r4, #1, #1
   20d56:	f364 0182 	bfi	r1, r4, #2, #1
   20d5a:	f364 01c5 	bfi	r1, r4, #3, #3
   20d5e:	f363 1188 	bfi	r1, r3, #6, #3
   20d62:	2308      	movs	r3, #8
   20d64:	f363 2152 	bfi	r1, r3, #9, #10
   20d68:	f364 41de 	bfi	r1, r4, #19, #12
   20d6c:	f364 71df 	bfi	r1, r4, #31, #1
   20d70:	4623      	mov	r3, r4
   20d72:	aa06      	add	r2, sp, #24
   20d74:	4811      	ldr	r0, [pc, #68]	; (20dbc <ecdh_cmd_process+0xa8>)
   20d76:	f004 fd1c 	bl	257b2 <z_impl_z_log_msg_static_create>
		buf = NULL;
   20d7a:	4620      	mov	r0, r4
		break;
   20d7c:	e001      	b.n	20d82 <ecdh_cmd_process+0x6e>
		buf = ecdh_p256_public_key();
   20d7e:	f7ff feeb 	bl	20b58 <ecdh_p256_public_key>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   20d82:	4b0c      	ldr	r3, [pc, #48]	; (20db4 <ecdh_cmd_process+0xa0>)
   20d84:	2200      	movs	r2, #0
   20d86:	f3bf 8f5b 	dmb	ish
   20d8a:	e853 1f00 	ldrex	r1, [r3]
   20d8e:	e843 2400 	strex	r4, r2, [r3]
   20d92:	2c00      	cmp	r4, #0
   20d94:	d1f9      	bne.n	20d8a <ecdh_cmd_process+0x76>
   20d96:	f3bf 8f5b 	dmb	ish
	if (buf) {
   20d9a:	b108      	cbz	r0, 20da0 <ecdh_cmd_process+0x8c>
		bt_recv(buf);
   20d9c:	f7f7 fd7e 	bl	1889c <bt_recv>
}
   20da0:	b008      	add	sp, #32
   20da2:	bd10      	pop	{r4, pc}
		buf = ecdh_p256_common_secret(false);
   20da4:	2000      	movs	r0, #0
   20da6:	f7ff ff75 	bl	20c94 <ecdh_p256_common_secret>
		break;
   20daa:	e7ea      	b.n	20d82 <ecdh_cmd_process+0x6e>
		buf = ecdh_p256_common_secret(true);
   20dac:	2001      	movs	r0, #1
   20dae:	f7ff ff71 	bl	20c94 <ecdh_p256_common_secret>
		break;
   20db2:	e7e6      	b.n	20d82 <ecdh_cmd_process+0x6e>
   20db4:	20006414 	.word	0x20006414
   20db8:	0002da60 	.word	0x0002da60
   20dbc:	0002b1a4 	.word	0x0002b1a4

00020dc0 <ecdh_thread>:

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   20dc0:	b500      	push	{lr}
   20dc2:	b087      	sub	sp, #28
	struct k_poll_event events[1] = {
   20dc4:	2300      	movs	r3, #0
   20dc6:	9301      	str	r3, [sp, #4]
   20dc8:	9302      	str	r3, [sp, #8]
   20dca:	9303      	str	r3, [sp, #12]
   20dcc:	9304      	str	r3, [sp, #16]
   20dce:	9305      	str	r3, [sp, #20]
   20dd0:	f89d 3011 	ldrb.w	r3, [sp, #17]
   20dd4:	2201      	movs	r2, #1
   20dd6:	f362 0305 	bfi	r3, r2, #0, #6
   20dda:	f88d 3011 	strb.w	r3, [sp, #17]
   20dde:	4b0a      	ldr	r3, [pc, #40]	; (20e08 <ecdh_thread+0x48>)
   20de0:	9305      	str	r3, [sp, #20]
	return z_impl_k_poll(events, num_events, timeout);
   20de2:	f04f 32ff 	mov.w	r2, #4294967295
   20de6:	f04f 33ff 	mov.w	r3, #4294967295
   20dea:	2101      	movs	r1, #1
   20dec:	a801      	add	r0, sp, #4
   20dee:	f002 ff03 	bl	23bf8 <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   20df2:	4805      	ldr	r0, [pc, #20]	; (20e08 <ecdh_thread+0x48>)
   20df4:	f009 ffdb 	bl	2adae <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   20df8:	9b04      	ldr	r3, [sp, #16]
   20dfa:	f36f 3394 	bfc	r3, #14, #7
   20dfe:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   20e00:	f7ff ff88 	bl	20d14 <ecdh_cmd_process>
	while (true) {
   20e04:	e7ed      	b.n	20de2 <ecdh_thread+0x22>
   20e06:	bf00      	nop
   20e08:	20006404 	.word	0x20006404

00020e0c <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   20e0c:	b510      	push	{r4, lr}
   20e0e:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   20e10:	480d      	ldr	r0, [pc, #52]	; (20e48 <hci_ecdh_init+0x3c>)
   20e12:	f009 ffc7 	bl	2ada4 <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   20e16:	4c0d      	ldr	r4, [pc, #52]	; (20e4c <hci_ecdh_init+0x40>)
   20e18:	2200      	movs	r2, #0
   20e1a:	2300      	movs	r3, #0
   20e1c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   20e20:	2300      	movs	r3, #0
   20e22:	9304      	str	r3, [sp, #16]
   20e24:	220a      	movs	r2, #10
   20e26:	9203      	str	r2, [sp, #12]
   20e28:	9302      	str	r3, [sp, #8]
   20e2a:	9301      	str	r3, [sp, #4]
   20e2c:	9300      	str	r3, [sp, #0]
   20e2e:	4b08      	ldr	r3, [pc, #32]	; (20e50 <hci_ecdh_init+0x44>)
   20e30:	f44f 7262 	mov.w	r2, #904	; 0x388
   20e34:	4907      	ldr	r1, [pc, #28]	; (20e54 <hci_ecdh_init+0x48>)
   20e36:	4620      	mov	r0, r4
   20e38:	f009 f900 	bl	2a03c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   20e3c:	4906      	ldr	r1, [pc, #24]	; (20e58 <hci_ecdh_init+0x4c>)
   20e3e:	4620      	mov	r0, r4
   20e40:	f001 fcac 	bl	2279c <z_impl_k_thread_name_set>
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   20e44:	b008      	add	sp, #32
   20e46:	bd10      	pop	{r4, pc}
   20e48:	20006404 	.word	0x20006404
   20e4c:	200051f0 	.word	0x200051f0
   20e50:	00020dc1 	.word	0x00020dc1
   20e54:	20007f40 	.word	0x20007f40
   20e58:	0002da70 	.word	0x0002da70

00020e5c <hci_ecdh_uninit>:

void hci_ecdh_uninit(void)
{
   20e5c:	b508      	push	{r3, lr}
	z_impl_k_thread_abort(thread);
   20e5e:	4802      	ldr	r0, [pc, #8]	; (20e68 <hci_ecdh_uninit+0xc>)
   20e60:	f7f4 ff3e 	bl	15ce0 <z_impl_k_thread_abort>
#if !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK)
	k_thread_abort(&ecdh_thread_data);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   20e64:	bd08      	pop	{r3, pc}
   20e66:	bf00      	nop
   20e68:	200051f0 	.word	0x200051f0

00020e6c <hci_cmd_le_read_local_p256_public_key>:


uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   20e6c:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   20e6e:	4b0a      	ldr	r3, [pc, #40]	; (20e98 <hci_cmd_le_read_local_p256_public_key+0x2c>)
   20e70:	2201      	movs	r2, #1
   20e72:	f3bf 8f5b 	dmb	ish
   20e76:	e853 1f00 	ldrex	r1, [r3]
   20e7a:	2900      	cmp	r1, #0
   20e7c:	d103      	bne.n	20e86 <hci_cmd_le_read_local_p256_public_key+0x1a>
   20e7e:	e843 2000 	strex	r0, r2, [r3]
   20e82:	2800      	cmp	r0, #0
   20e84:	d1f7      	bne.n	20e76 <hci_cmd_le_read_local_p256_public_key+0xa>
   20e86:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   20e8a:	d103      	bne.n	20e94 <hci_cmd_le_read_local_p256_public_key+0x28>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();
   20e8c:	f7ff ff3a 	bl	20d04 <work_submit>

	return 0;
   20e90:	2000      	movs	r0, #0
}
   20e92:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   20e94:	200c      	movs	r0, #12
   20e96:	e7fc      	b.n	20e92 <hci_cmd_le_read_local_p256_public_key+0x26>
   20e98:	20006414 	.word	0x20006414

00020e9c <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   20e9c:	b508      	push	{r3, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   20e9e:	b1a1      	cbz	r1, 20eca <cmd_le_generate_dhkey+0x2e>
   20ea0:	2204      	movs	r2, #4
   20ea2:	4b17      	ldr	r3, [pc, #92]	; (20f00 <cmd_le_generate_dhkey+0x64>)
   20ea4:	f3bf 8f5b 	dmb	ish
   20ea8:	e853 1f00 	ldrex	r1, [r3]
   20eac:	2900      	cmp	r1, #0
   20eae:	d104      	bne.n	20eba <cmd_le_generate_dhkey+0x1e>
   20eb0:	e843 2c00 	strex	ip, r2, [r3]
   20eb4:	f1bc 0f00 	cmp.w	ip, #0
   20eb8:	d1f6      	bne.n	20ea8 <cmd_le_generate_dhkey+0xc>
   20eba:	f3bf 8f5b 	dmb	ish
   20ebe:	d11c      	bne.n	20efa <cmd_le_generate_dhkey+0x5e>
	psrc += length - 1;
   20ec0:	f100 021f 	add.w	r2, r0, #31
	uint8_t *pdst = (uint8_t *)dst;
   20ec4:	4b0f      	ldr	r3, [pc, #60]	; (20f04 <cmd_le_generate_dhkey+0x68>)
	for (; length > 0; length--) {
   20ec6:	2120      	movs	r1, #32
   20ec8:	e006      	b.n	20ed8 <cmd_le_generate_dhkey+0x3c>
   20eca:	2202      	movs	r2, #2
   20ecc:	e7e9      	b.n	20ea2 <cmd_le_generate_dhkey+0x6>
		*pdst++ = *psrc--;
   20ece:	f812 c901 	ldrb.w	ip, [r2], #-1
   20ed2:	f803 cb01 	strb.w	ip, [r3], #1
	for (; length > 0; length--) {
   20ed6:	3901      	subs	r1, #1
   20ed8:	2900      	cmp	r1, #0
   20eda:	d1f8      	bne.n	20ece <cmd_le_generate_dhkey+0x32>
	psrc += length - 1;
   20edc:	303f      	adds	r0, #63	; 0x3f
	uint8_t *pdst = (uint8_t *)dst;
   20ede:	4b0a      	ldr	r3, [pc, #40]	; (20f08 <cmd_le_generate_dhkey+0x6c>)
	for (; length > 0; length--) {
   20ee0:	2220      	movs	r2, #32
   20ee2:	e004      	b.n	20eee <cmd_le_generate_dhkey+0x52>
		*pdst++ = *psrc--;
   20ee4:	f810 1901 	ldrb.w	r1, [r0], #-1
   20ee8:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   20eec:	3a01      	subs	r2, #1
   20eee:	2a00      	cmp	r2, #0
   20ef0:	d1f8      	bne.n	20ee4 <cmd_le_generate_dhkey+0x48>
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);

	work_submit();
   20ef2:	f7ff ff07 	bl	20d04 <work_submit>

	return 0;
   20ef6:	2000      	movs	r0, #0
}
   20ef8:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   20efa:	200c      	movs	r0, #12
   20efc:	e7fc      	b.n	20ef8 <cmd_le_generate_dhkey+0x5c>
   20efe:	bf00      	nop
   20f00:	20006414 	.word	0x20006414
   20f04:	20006438 	.word	0x20006438
   20f08:	20006458 	.word	0x20006458

00020f0c <mpsl_lib_init_internal>:
	return 0;
#endif
}

static int32_t mpsl_lib_init_internal(void)
{
   20f0c:	b500      	push	{lr}
   20f0e:	b083      	sub	sp, #12
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
   20f10:	f008 fdb6 	bl	29a80 <m_config_clock_source_get>
   20f14:	f88d 0000 	strb.w	r0, [sp]
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   20f18:	2332      	movs	r3, #50	; 0x32
   20f1a:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   20f1e:	2300      	movs	r3, #0
   20f20:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.rc_ctiv = (CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD * 4 / 1000);
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
	BUILD_ASSERT(CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_TEMP_DIFF == 2,
		     "MPSL always uses a temperature diff threshold of 0.5 degrees");
#else
	clock_cfg.rc_ctiv = 0;
   20f24:	f88d 3001 	strb.w	r3, [sp, #1]
	clock_cfg.rc_temp_ctiv = 0;
   20f28:	f88d 3002 	strb.w	r3, [sp, #2]
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   20f2c:	4a03      	ldr	r2, [pc, #12]	; (20f3c <mpsl_lib_init_internal+0x30>)
   20f2e:	2119      	movs	r1, #25
   20f30:	4668      	mov	r0, sp
   20f32:	f7eb fa35 	bl	c3a0 <mpsl_init>
		return err;
	}
#endif

	return 0;
}
   20f36:	b003      	add	sp, #12
   20f38:	f85d fb04 	ldr.w	pc, [sp], #4
   20f3c:	00020f41 	.word	0x00020f41

00020f40 <m_assert_handler>:
{
   20f40:	b590      	push	{r4, r7, lr}
   20f42:	b083      	sub	sp, #12
   20f44:	af00      	add	r7, sp, #0
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   20f46:	466c      	mov	r4, sp
   20f48:	2300      	movs	r3, #0
   20f4a:	713b      	strb	r3, [r7, #4]
   20f4c:	2302      	movs	r3, #2
   20f4e:	717b      	strb	r3, [r7, #5]
   20f50:	b08a      	sub	sp, #40	; 0x28
   20f52:	46ec      	mov	ip, sp
   20f54:	f11c 0210 	adds.w	r2, ip, #16
   20f58:	d01b      	beq.n	20f92 <m_assert_handler+0x52>
   20f5a:	f04f 0e12 	mov.w	lr, #18
   20f5e:	b12a      	cbz	r2, 20f6c <m_assert_handler+0x2c>
   20f60:	f1be 0f04 	cmp.w	lr, #4
   20f64:	dd02      	ble.n	20f6c <m_assert_handler+0x2c>
   20f66:	4b2b      	ldr	r3, [pc, #172]	; (21014 <m_assert_handler+0xd4>)
   20f68:	f8cc 3014 	str.w	r3, [ip, #20]
   20f6c:	2300      	movs	r3, #0
   20f6e:	703b      	strb	r3, [r7, #0]
   20f70:	2302      	movs	r3, #2
   20f72:	707b      	strb	r3, [r7, #1]
   20f74:	b1d2      	cbz	r2, 20fac <m_assert_handler+0x6c>
   20f76:	4673      	mov	r3, lr
   20f78:	f1be 0f08 	cmp.w	lr, #8
   20f7c:	dd01      	ble.n	20f82 <m_assert_handler+0x42>
   20f7e:	f8cc 0018 	str.w	r0, [ip, #24]
   20f82:	2b0c      	cmp	r3, #12
   20f84:	dd01      	ble.n	20f8a <m_assert_handler+0x4a>
   20f86:	f8cc 101c 	str.w	r1, [ip, #28]
   20f8a:	f10c 0320 	add.w	r3, ip, #32
   20f8e:	2100      	movs	r1, #0
   20f90:	e00a      	b.n	20fa8 <m_assert_handler+0x68>
   20f92:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   20f96:	e7e2      	b.n	20f5e <m_assert_handler+0x1e>
   20f98:	f101 0008 	add.w	r0, r1, #8
   20f9c:	4438      	add	r0, r7
   20f9e:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   20fa2:	f803 0b01 	strb.w	r0, [r3], #1
   20fa6:	3101      	adds	r1, #1
   20fa8:	2901      	cmp	r1, #1
   20faa:	d9f5      	bls.n	20f98 <m_assert_handler+0x58>
   20fac:	f1be 0f11 	cmp.w	lr, #17
   20fb0:	dd2d      	ble.n	2100e <m_assert_handler+0xce>
   20fb2:	2312      	movs	r3, #18
   20fb4:	b14a      	cbz	r2, 20fca <m_assert_handler+0x8a>
   20fb6:	2104      	movs	r1, #4
   20fb8:	7139      	strb	r1, [r7, #4]
   20fba:	2100      	movs	r1, #0
   20fbc:	7179      	strb	r1, [r7, #5]
   20fbe:	71b9      	strb	r1, [r7, #6]
   20fc0:	2101      	movs	r1, #1
   20fc2:	71f9      	strb	r1, [r7, #7]
   20fc4:	6878      	ldr	r0, [r7, #4]
   20fc6:	f8cc 0010 	str.w	r0, [ip, #16]
   20fca:	2100      	movs	r1, #0
   20fcc:	f36f 0100 	bfc	r1, #0, #1
   20fd0:	f36f 0141 	bfc	r1, #1, #1
   20fd4:	f36f 0182 	bfc	r1, #2, #1
   20fd8:	f36f 01c5 	bfc	r1, #3, #3
   20fdc:	2001      	movs	r0, #1
   20fde:	f360 1188 	bfi	r1, r0, #6, #3
   20fe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
   20fe6:	f363 2152 	bfi	r1, r3, #9, #10
   20fea:	f36f 41de 	bfc	r1, #19, #12
   20fee:	f36f 71df 	bfc	r1, #31, #1
   20ff2:	2300      	movs	r3, #0
   20ff4:	4808      	ldr	r0, [pc, #32]	; (21018 <m_assert_handler+0xd8>)
   20ff6:	f004 fbdc 	bl	257b2 <z_impl_z_log_msg_static_create>
   20ffa:	46a5      	mov	sp, r4
	k_oops();
   20ffc:	4040      	eors	r0, r0
   20ffe:	f380 8811 	msr	BASEPRI, r0
   21002:	f04f 0003 	mov.w	r0, #3
   21006:	df02      	svc	2
}
   21008:	370c      	adds	r7, #12
   2100a:	46bd      	mov	sp, r7
   2100c:	bd90      	pop	{r4, r7, pc}
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   2100e:	f06f 031b 	mvn.w	r3, #27
   21012:	e7cf      	b.n	20fb4 <m_assert_handler+0x74>
   21014:	0002daac 	.word	0x0002daac
   21018:	0002b1f4 	.word	0x0002b1f4

0002101c <mpsl_low_prio_init>:

	return 0;
}

static int mpsl_low_prio_init(const struct device *dev)
{
   2101c:	b530      	push	{r4, r5, lr}
   2101e:	b083      	sub	sp, #12
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   21020:	4d0d      	ldr	r5, [pc, #52]	; (21058 <mpsl_low_prio_init+0x3c>)
   21022:	2400      	movs	r4, #0
   21024:	9400      	str	r4, [sp, #0]
   21026:	f06f 0309 	mvn.w	r3, #9
   2102a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2102e:	490b      	ldr	r1, [pc, #44]	; (2105c <mpsl_low_prio_init+0x40>)
   21030:	4628      	mov	r0, r5
   21032:	f001 ff29 	bl	22e88 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   21036:	490a      	ldr	r1, [pc, #40]	; (21060 <mpsl_low_prio_init+0x44>)
   21038:	4628      	mov	r0, r5
   2103a:	f001 fbaf 	bl	2279c <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   2103e:	4909      	ldr	r1, [pc, #36]	; (21064 <mpsl_low_prio_init+0x48>)
   21040:	4809      	ldr	r0, [pc, #36]	; (21068 <mpsl_low_prio_init+0x4c>)
   21042:	f009 f9dd 	bl	2a400 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   21046:	4622      	mov	r2, r4
   21048:	2104      	movs	r1, #4
   2104a:	2019      	movs	r0, #25
   2104c:	f004 ff21 	bl	25e92 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   21050:	4620      	mov	r0, r4
   21052:	b003      	add	sp, #12
   21054:	bd30      	pop	{r4, r5, pc}
   21056:	bf00      	nop
   21058:	200052a8 	.word	0x200052a8
   2105c:	20008340 	.word	0x20008340
   21060:	0002dac0 	.word	0x0002dac0
   21064:	00029b09 	.word	0x00029b09
   21068:	20006478 	.word	0x20006478

0002106c <mpsl_low_prio_irq_handler>:
{
   2106c:	b508      	push	{r3, lr}
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   2106e:	4902      	ldr	r1, [pc, #8]	; (21078 <mpsl_low_prio_irq_handler+0xc>)
   21070:	4802      	ldr	r0, [pc, #8]	; (2107c <mpsl_low_prio_irq_handler+0x10>)
   21072:	f009 f9e1 	bl	2a438 <k_work_submit_to_queue>
}
   21076:	bd08      	pop	{r3, pc}
   21078:	20006478 	.word	0x20006478
   2107c:	200052a8 	.word	0x200052a8

00021080 <mpsl_hfclk_callback>:
#include <mpsl_clock.h>

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
   21080:	b508      	push	{r3, lr}
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   21082:	4b02      	ldr	r3, [pc, #8]	; (2108c <mpsl_hfclk_callback+0xc>)
   21084:	681b      	ldr	r3, [r3, #0]
   21086:	2000      	movs	r0, #0
   21088:	4798      	blx	r3
}
   2108a:	bd08      	pop	{r3, pc}
   2108c:	20006488 	.word	0x20006488

00021090 <nrfx_clock_start>:

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   21090:	b508      	push	{r3, lr}
	switch (domain) {
   21092:	b128      	cbz	r0, 210a0 <nrfx_clock_start+0x10>
   21094:	2801      	cmp	r0, #1
   21096:	d102      	bne.n	2109e <nrfx_clock_start+0xe>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   21098:	4804      	ldr	r0, [pc, #16]	; (210ac <nrfx_clock_start+0x1c>)
   2109a:	f7eb f801 	bl	c0a0 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   2109e:	bd08      	pop	{r3, pc}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   210a0:	4b03      	ldr	r3, [pc, #12]	; (210b0 <nrfx_clock_start+0x20>)
   210a2:	681b      	ldr	r3, [r3, #0]
   210a4:	2001      	movs	r0, #1
   210a6:	4798      	blx	r3
}
   210a8:	e7f9      	b.n	2109e <nrfx_clock_start+0xe>
   210aa:	bf00      	nop
   210ac:	00021081 	.word	0x00021081
   210b0:	20006488 	.word	0x20006488

000210b4 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   210b4:	4b01      	ldr	r3, [pc, #4]	; (210bc <nrfx_clock_init+0x8>)
   210b6:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   210b8:	4801      	ldr	r0, [pc, #4]	; (210c0 <nrfx_clock_init+0xc>)
   210ba:	4770      	bx	lr
   210bc:	20006488 	.word	0x20006488
   210c0:	0bad0000 	.word	0x0bad0000

000210c4 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   210c4:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   210c8:	4905      	ldr	r1, [pc, #20]	; (210e0 <__NVIC_SystemReset+0x1c>)
   210ca:	68ca      	ldr	r2, [r1, #12]
   210cc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   210d0:	4b04      	ldr	r3, [pc, #16]	; (210e4 <__NVIC_SystemReset+0x20>)
   210d2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   210d4:	60cb      	str	r3, [r1, #12]
   210d6:	f3bf 8f4f 	dsb	sy
    __NOP();
   210da:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   210dc:	e7fd      	b.n	210da <__NVIC_SystemReset+0x16>
   210de:	bf00      	nop
   210e0:	e000ed00 	.word	0xe000ed00
   210e4:	05fa0004 	.word	0x05fa0004

000210e8 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   210e8:	4b02      	ldr	r3, [pc, #8]	; (210f4 <nvmc_wait+0xc>)
   210ea:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   210ee:	2b00      	cmp	r3, #0
   210f0:	d0fa      	beq.n	210e8 <nvmc_wait>
}
   210f2:	4770      	bx	lr
   210f4:	4001e000 	.word	0x4001e000

000210f8 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
   210f8:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   210fa:	4b03      	ldr	r3, [pc, #12]	; (21108 <nvmc_config+0x10>)
   210fc:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
   21100:	f7ff fff2 	bl	210e8 <nvmc_wait>
}
   21104:	bd08      	pop	{r3, pc}
   21106:	bf00      	nop
   21108:	4001e000 	.word	0x4001e000

0002110c <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   2110c:	4b01      	ldr	r3, [pc, #4]	; (21114 <SystemCoreClockUpdate+0x8>)
   2110e:	4a02      	ldr	r2, [pc, #8]	; (21118 <SystemCoreClockUpdate+0xc>)
   21110:	601a      	str	r2, [r3, #0]
}
   21112:	4770      	bx	lr
   21114:	200008c4 	.word	0x200008c4
   21118:	03d09000 	.word	0x03d09000

0002111c <SystemInit>:

void SystemInit(void)
{
   2111c:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   2111e:	f008 fd10 	bl	29b42 <nrf52_errata_36>
   21122:	b140      	cbz	r0, 21136 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   21124:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   21128:	2200      	movs	r2, #0
   2112a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   2112e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   21132:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   21136:	f008 fd0e 	bl	29b56 <nrf52_errata_66>
   2113a:	2800      	cmp	r0, #0
   2113c:	d046      	beq.n	211cc <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   2113e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   21142:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   21146:	4b3b      	ldr	r3, [pc, #236]	; (21234 <SystemInit+0x118>)
   21148:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   2114c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   21150:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   21154:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   21158:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   2115c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   21160:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   21164:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   21168:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   2116c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   21170:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   21174:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   21178:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   2117c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   21180:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   21184:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   21188:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   2118c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   21190:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   21194:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   21198:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   2119c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   211a0:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   211a4:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   211a8:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   211ac:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   211b0:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   211b4:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   211b8:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   211bc:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   211c0:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   211c4:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   211c8:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   211cc:	f008 fccd 	bl	29b6a <nrf52_errata_136>
   211d0:	b160      	cbz	r0, 211ec <SystemInit+0xd0>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   211d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   211d6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   211da:	f013 0f01 	tst.w	r3, #1
   211de:	d005      	beq.n	211ec <SystemInit+0xd0>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   211e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   211e4:	f06f 0201 	mvn.w	r2, #1
   211e8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    nrf52_handle_approtect();
   211ec:	f008 fcd6 	bl	29b9c <nrf52_handle_approtect>

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   211f0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   211f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   211f8:	2b00      	cmp	r3, #0
   211fa:	db08      	blt.n	2120e <SystemInit+0xf2>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   211fc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   21200:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   21204:	2b00      	cmp	r3, #0
   21206:	db02      	blt.n	2120e <SystemInit+0xf2>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
   21208:	f7ff ff80 	bl	2110c <SystemCoreClockUpdate>
}
   2120c:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
   2120e:	2001      	movs	r0, #1
   21210:	f7ff ff72 	bl	210f8 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   21214:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
   21218:	2512      	movs	r5, #18
   2121a:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
   2121e:	f7ff ff63 	bl	210e8 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   21222:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
   21226:	f7ff ff5f 	bl	210e8 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
   2122a:	2000      	movs	r0, #0
   2122c:	f7ff ff64 	bl	210f8 <nvmc_config>
            NVIC_SystemReset();
   21230:	f7ff ff48 	bl	210c4 <__NVIC_SystemReset>
   21234:	4000c000 	.word	0x4000c000

00021238 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   21238:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   2123a:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   2123c:	fab4 f384 	clz	r3, r4
   21240:	f1c3 031f 	rsb	r3, r3, #31
   21244:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
   21248:	2b00      	cmp	r3, #0
   2124a:	db16      	blt.n	2127a <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   2124c:	2201      	movs	r2, #1
   2124e:	fa02 f303 	lsl.w	r3, r2, r3
   21252:	ea24 0303 	bic.w	r3, r4, r3
   21256:	f3bf 8f5b 	dmb	ish
   2125a:	e850 2f00 	ldrex	r2, [r0]
   2125e:	42a2      	cmp	r2, r4
   21260:	d104      	bne.n	2126c <nrfx_flag32_alloc+0x34>
   21262:	e840 3e00 	strex	lr, r3, [r0]
   21266:	f1be 0f00 	cmp.w	lr, #0
   2126a:	d1f6      	bne.n	2125a <nrfx_flag32_alloc+0x22>
   2126c:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   21270:	d1e3      	bne.n	2123a <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
   21272:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
   21276:	4802      	ldr	r0, [pc, #8]	; (21280 <nrfx_flag32_alloc+0x48>)
}
   21278:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
   2127a:	4802      	ldr	r0, [pc, #8]	; (21284 <nrfx_flag32_alloc+0x4c>)
   2127c:	e7fc      	b.n	21278 <nrfx_flag32_alloc+0x40>
   2127e:	bf00      	nop
   21280:	0bad0000 	.word	0x0bad0000
   21284:	0bad0002 	.word	0x0bad0002

00021288 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   21288:	6803      	ldr	r3, [r0, #0]
   2128a:	40cb      	lsrs	r3, r1
   2128c:	f013 0f01 	tst.w	r3, #1
   21290:	d115      	bne.n	212be <nrfx_flag32_free+0x36>
{
   21292:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
   21294:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   21296:	2301      	movs	r3, #1
   21298:	408b      	lsls	r3, r1
   2129a:	4313      	orrs	r3, r2
   2129c:	f3bf 8f5b 	dmb	ish
   212a0:	e850 cf00 	ldrex	ip, [r0]
   212a4:	4594      	cmp	ip, r2
   212a6:	d104      	bne.n	212b2 <nrfx_flag32_free+0x2a>
   212a8:	e840 3e00 	strex	lr, r3, [r0]
   212ac:	f1be 0f00 	cmp.w	lr, #0
   212b0:	d1f6      	bne.n	212a0 <nrfx_flag32_free+0x18>
   212b2:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   212b6:	d1ed      	bne.n	21294 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
   212b8:	4802      	ldr	r0, [pc, #8]	; (212c4 <nrfx_flag32_free+0x3c>)
}
   212ba:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
   212be:	4802      	ldr	r0, [pc, #8]	; (212c8 <nrfx_flag32_free+0x40>)
}
   212c0:	4770      	bx	lr
   212c2:	bf00      	nop
   212c4:	0bad0000 	.word	0x0bad0000
   212c8:	0bad0004 	.word	0x0bad0004

000212cc <nrf_gpio_reconfigure>:
{
   212cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   212ce:	461c      	mov	r4, r3
   212d0:	9f05      	ldr	r7, [sp, #20]
   212d2:	9e06      	ldr	r6, [sp, #24]
    *p_pin = pin_number & 0x1F;
   212d4:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
   212d8:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   212da:	2801      	cmp	r0, #1
   212dc:	d035      	beq.n	2134a <nrf_gpio_reconfigure+0x7e>
        case 0: return NRF_P0;
   212de:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   212e2:	f50c 73e0 	add.w	r3, ip, #448	; 0x1c0
   212e6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   212ea:	b381      	cbz	r1, 2134e <nrf_gpio_reconfigure+0x82>
   212ec:	2001      	movs	r0, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   212ee:	b382      	cbz	r2, 21352 <nrf_gpio_reconfigure+0x86>
   212f0:	f04f 0e02 	mov.w	lr, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   212f4:	ea40 000e 	orr.w	r0, r0, lr
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   212f8:	b374      	cbz	r4, 21358 <nrf_gpio_reconfigure+0x8c>
   212fa:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   212fe:	ea40 000e 	orr.w	r0, r0, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   21302:	b367      	cbz	r7, 2135e <nrf_gpio_reconfigure+0x92>
   21304:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   21308:	ea40 000e 	orr.w	r0, r0, lr
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2130c:	b356      	cbz	r6, 21364 <nrf_gpio_reconfigure+0x98>
   2130e:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   21312:	ea40 000e 	orr.w	r0, r0, lr
    cnf &= ~to_update;
   21316:	ea23 0000 	bic.w	r0, r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2131a:	b331      	cbz	r1, 2136a <nrf_gpio_reconfigure+0x9e>
   2131c:	780b      	ldrb	r3, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2131e:	b332      	cbz	r2, 2136e <nrf_gpio_reconfigure+0xa2>
   21320:	7812      	ldrb	r2, [r2, #0]
   21322:	0052      	lsls	r2, r2, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   21324:	4313      	orrs	r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   21326:	b324      	cbz	r4, 21372 <nrf_gpio_reconfigure+0xa6>
   21328:	7822      	ldrb	r2, [r4, #0]
   2132a:	0092      	lsls	r2, r2, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2132c:	4313      	orrs	r3, r2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2132e:	b317      	cbz	r7, 21376 <nrf_gpio_reconfigure+0xaa>
   21330:	783a      	ldrb	r2, [r7, #0]
   21332:	0212      	lsls	r2, r2, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   21334:	4313      	orrs	r3, r2
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   21336:	b306      	cbz	r6, 2137a <nrf_gpio_reconfigure+0xae>
   21338:	7832      	ldrb	r2, [r6, #0]
   2133a:	0412      	lsls	r2, r2, #16
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2133c:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2133e:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
   21340:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
   21344:	f845 302c 	str.w	r3, [r5, ip, lsl #2]
}
   21348:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
   2134a:	4d0d      	ldr	r5, [pc, #52]	; (21380 <nrf_gpio_reconfigure+0xb4>)
   2134c:	e7c9      	b.n	212e2 <nrf_gpio_reconfigure+0x16>
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2134e:	2000      	movs	r0, #0
   21350:	e7cd      	b.n	212ee <nrf_gpio_reconfigure+0x22>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   21352:	f04f 0e00 	mov.w	lr, #0
   21356:	e7cd      	b.n	212f4 <nrf_gpio_reconfigure+0x28>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   21358:	f04f 0e00 	mov.w	lr, #0
   2135c:	e7cf      	b.n	212fe <nrf_gpio_reconfigure+0x32>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2135e:	f04f 0e00 	mov.w	lr, #0
   21362:	e7d1      	b.n	21308 <nrf_gpio_reconfigure+0x3c>
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   21364:	f04f 0e00 	mov.w	lr, #0
   21368:	e7d3      	b.n	21312 <nrf_gpio_reconfigure+0x46>
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2136a:	2300      	movs	r3, #0
   2136c:	e7d7      	b.n	2131e <nrf_gpio_reconfigure+0x52>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2136e:	2200      	movs	r2, #0
   21370:	e7d8      	b.n	21324 <nrf_gpio_reconfigure+0x58>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   21372:	2200      	movs	r2, #0
   21374:	e7da      	b.n	2132c <nrf_gpio_reconfigure+0x60>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   21376:	2200      	movs	r2, #0
   21378:	e7dc      	b.n	21334 <nrf_gpio_reconfigure+0x68>
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2137a:	2200      	movs	r2, #0
   2137c:	e7de      	b.n	2133c <nrf_gpio_reconfigure+0x70>
   2137e:	bf00      	nop
   21380:	50000300 	.word	0x50000300

00021384 <nrf_gpio_latches_read_and_clear>:
{
   21384:	b500      	push	{lr}
   21386:	b083      	sub	sp, #12
   21388:	4684      	mov	ip, r0
   2138a:	468e      	mov	lr, r1
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   2138c:	4b0d      	ldr	r3, [pc, #52]	; (213c4 <nrf_gpio_latches_read_and_clear+0x40>)
   2138e:	e893 0003 	ldmia.w	r3, {r0, r1}
   21392:	ab02      	add	r3, sp, #8
   21394:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   21398:	4663      	mov	r3, ip
   2139a:	e00b      	b.n	213b4 <nrf_gpio_latches_read_and_clear+0x30>
        *p_masks = gpio_regs[i]->LATCH;
   2139c:	a902      	add	r1, sp, #8
   2139e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   213a2:	f851 1c08 	ldr.w	r1, [r1, #-8]
   213a6:	f8d1 0520 	ldr.w	r0, [r1, #1312]	; 0x520
   213aa:	f842 0b04 	str.w	r0, [r2], #4
        gpio_regs[i]->LATCH = *p_masks;
   213ae:	f8c1 0520 	str.w	r0, [r1, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   213b2:	3301      	adds	r3, #1
   213b4:	eb0c 000e 	add.w	r0, ip, lr
   213b8:	4298      	cmp	r0, r3
   213ba:	d8ef      	bhi.n	2139c <nrf_gpio_latches_read_and_clear+0x18>
}
   213bc:	b003      	add	sp, #12
   213be:	f85d fb04 	ldr.w	pc, [sp], #4
   213c2:	bf00      	nop
   213c4:	0002b2d8 	.word	0x0002b2d8

000213c8 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   213c8:	3008      	adds	r0, #8
   213ca:	4b03      	ldr	r3, [pc, #12]	; (213d8 <pin_in_use+0x10>)
   213cc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   213d0:	f000 0001 	and.w	r0, r0, #1
   213d4:	4770      	bx	lr
   213d6:	bf00      	nop
   213d8:	200008c8 	.word	0x200008c8

000213dc <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   213dc:	3008      	adds	r0, #8
   213de:	4b03      	ldr	r3, [pc, #12]	; (213ec <pin_in_use_by_te+0x10>)
   213e0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   213e4:	f3c0 1040 	ubfx	r0, r0, #5, #1
   213e8:	4770      	bx	lr
   213ea:	bf00      	nop
   213ec:	200008c8 	.word	0x200008c8

000213f0 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   213f0:	3008      	adds	r0, #8
   213f2:	4b04      	ldr	r3, [pc, #16]	; (21404 <pin_has_trigger+0x14>)
   213f4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   213f8:	f010 001c 	ands.w	r0, r0, #28
   213fc:	bf18      	it	ne
   213fe:	2001      	movne	r0, #1
   21400:	4770      	bx	lr
   21402:	bf00      	nop
   21404:	200008c8 	.word	0x200008c8

00021408 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   21408:	3008      	adds	r0, #8
   2140a:	4b03      	ldr	r3, [pc, #12]	; (21418 <pin_is_output+0x10>)
   2140c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   21410:	f3c0 0040 	ubfx	r0, r0, #1, #1
   21414:	4770      	bx	lr
   21416:	bf00      	nop
   21418:	200008c8 	.word	0x200008c8

0002141c <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2141c:	3008      	adds	r0, #8
   2141e:	4b02      	ldr	r3, [pc, #8]	; (21428 <pin_te_get+0xc>)
   21420:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   21424:	0b40      	lsrs	r0, r0, #13
   21426:	4770      	bx	lr
   21428:	200008c8 	.word	0x200008c8

0002142c <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   2142c:	2200      	movs	r2, #0
   2142e:	e004      	b.n	2143a <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   21430:	f04f 33ff 	mov.w	r3, #4294967295
   21434:	4283      	cmp	r3, r0
   21436:	d00f      	beq.n	21458 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   21438:	3201      	adds	r2, #1
   2143a:	2a29      	cmp	r2, #41	; 0x29
   2143c:	d80a      	bhi.n	21454 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   2143e:	f102 0308 	add.w	r3, r2, #8
   21442:	4906      	ldr	r1, [pc, #24]	; (2145c <handler_in_use+0x30>)
   21444:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   21448:	f413 7f80 	tst.w	r3, #256	; 0x100
   2144c:	d0f0      	beq.n	21430 <handler_in_use+0x4>
   2144e:	f3c3 2343 	ubfx	r3, r3, #9, #4
   21452:	e7ef      	b.n	21434 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
   21454:	2000      	movs	r0, #0
   21456:	4770      	bx	lr
            return true;
   21458:	2001      	movs	r0, #1
}
   2145a:	4770      	bx	lr
   2145c:	200008c8 	.word	0x200008c8

00021460 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   21460:	2300      	movs	r3, #0
   21462:	b113      	cbz	r3, 2146a <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
   21464:	f04f 30ff 	mov.w	r0, #4294967295
}
   21468:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   2146a:	4a07      	ldr	r2, [pc, #28]	; (21488 <find_handler+0x28>)
   2146c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   21470:	4282      	cmp	r2, r0
   21472:	d001      	beq.n	21478 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   21474:	3301      	adds	r3, #1
   21476:	e7f4      	b.n	21462 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   21478:	4a03      	ldr	r2, [pc, #12]	; (21488 <find_handler+0x28>)
   2147a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   2147e:	6852      	ldr	r2, [r2, #4]
   21480:	428a      	cmp	r2, r1
   21482:	d1f7      	bne.n	21474 <find_handler+0x14>
            return i;
   21484:	4618      	mov	r0, r3
   21486:	4770      	bx	lr
   21488:	200008c8 	.word	0x200008c8

0002148c <get_initial_sense>:
    return NRFX_SUCCESS;
}

static inline nrf_gpio_pin_sense_t get_initial_sense(nrfx_gpiote_pin_t pin)
{
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2148c:	f100 0208 	add.w	r2, r0, #8
   21490:	4b0f      	ldr	r3, [pc, #60]	; (214d0 <get_initial_sense+0x44>)
   21492:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   21496:	f3c3 0382 	ubfx	r3, r3, #2, #3
    nrf_gpio_pin_sense_t sense;

    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   2149a:	2b04      	cmp	r3, #4
   2149c:	d012      	beq.n	214c4 <get_initial_sense+0x38>
    {
        sense = NRF_GPIO_PIN_SENSE_LOW;
    }
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   2149e:	2b05      	cmp	r3, #5
   214a0:	d012      	beq.n	214c8 <get_initial_sense+0x3c>
    *p_pin = pin_number & 0x1F;
   214a2:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   214a6:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   214a8:	2801      	cmp	r0, #1
   214aa:	d009      	beq.n	214c0 <get_initial_sense+0x34>
        case 0: return NRF_P0;
   214ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return p_reg->IN;
   214b0:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   214b4:	40d3      	lsrs	r3, r2
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    }
    else
    {
        /* If edge detection start with sensing opposite state. */
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   214b6:	f013 0f01 	tst.w	r3, #1
   214ba:	d007      	beq.n	214cc <get_initial_sense+0x40>
   214bc:	2003      	movs	r0, #3
   214be:	4770      	bx	lr
        case 1: return NRF_P1;
   214c0:	4b04      	ldr	r3, [pc, #16]	; (214d4 <get_initial_sense+0x48>)
   214c2:	e7f5      	b.n	214b0 <get_initial_sense+0x24>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   214c4:	2003      	movs	r0, #3
   214c6:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   214c8:	2002      	movs	r0, #2
   214ca:	4770      	bx	lr
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   214cc:	2002      	movs	r0, #2
    }

    return sense;
}
   214ce:	4770      	bx	lr
   214d0:	200008c8 	.word	0x200008c8
   214d4:	50000300 	.word	0x50000300

000214d8 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   214d8:	3008      	adds	r0, #8
   214da:	4b06      	ldr	r3, [pc, #24]	; (214f4 <channel_handler_get+0x1c>)
   214dc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   214e0:	f410 7f80 	tst.w	r0, #256	; 0x100
   214e4:	d004      	beq.n	214f0 <channel_handler_get+0x18>
   214e6:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
   214ea:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   214ee:	4770      	bx	lr
        return NULL;
   214f0:	2000      	movs	r0, #0
}
   214f2:	4770      	bx	lr
   214f4:	200008c8 	.word	0x200008c8

000214f8 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   214f8:	b570      	push	{r4, r5, r6, lr}
   214fa:	4604      	mov	r4, r0
   214fc:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
   214fe:	f7ff ffeb 	bl	214d8 <channel_handler_get>

    if (handler)
   21502:	b120      	cbz	r0, 2150e <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
   21504:	6806      	ldr	r6, [r0, #0]
   21506:	6842      	ldr	r2, [r0, #4]
   21508:	4629      	mov	r1, r5
   2150a:	4620      	mov	r0, r4
   2150c:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
   2150e:	4b04      	ldr	r3, [pc, #16]	; (21520 <call_handler+0x28>)
   21510:	689b      	ldr	r3, [r3, #8]
   21512:	b123      	cbz	r3, 2151e <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   21514:	4a02      	ldr	r2, [pc, #8]	; (21520 <call_handler+0x28>)
   21516:	68d2      	ldr	r2, [r2, #12]
   21518:	4629      	mov	r1, r5
   2151a:	4620      	mov	r0, r4
   2151c:	4798      	blx	r3
    }
}
   2151e:	bd70      	pop	{r4, r5, r6, pc}
   21520:	200008c8 	.word	0x200008c8

00021524 <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
   21524:	b570      	push	{r4, r5, r6, lr}
   21526:	4606      	mov	r6, r0
   21528:	460c      	mov	r4, r1
   2152a:	4615      	mov	r5, r2
    if (is_level(trigger))
   2152c:	4608      	mov	r0, r1
   2152e:	f008 fba5 	bl	29c7c <is_level>
   21532:	b960      	cbnz	r0, 2154e <next_sense_cond_call_handler+0x2a>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   21534:	2d02      	cmp	r5, #2
   21536:	d028      	beq.n	2158a <next_sense_cond_call_handler+0x66>
   21538:	2102      	movs	r1, #2

        nrf_gpio_cfg_sense_set(pin, next_sense);
   2153a:	4630      	mov	r0, r6
   2153c:	f008 fb76 	bl	29c2c <nrf_gpio_cfg_sense_set>

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   21540:	2c03      	cmp	r4, #3
   21542:	d026      	beq.n	21592 <next_sense_cond_call_handler+0x6e>
   21544:	2d02      	cmp	r5, #2
   21546:	d022      	beq.n	2158e <next_sense_cond_call_handler+0x6a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   21548:	2d03      	cmp	r5, #3
   2154a:	d027      	beq.n	2159c <next_sense_cond_call_handler+0x78>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
   2154c:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
   2154e:	4621      	mov	r1, r4
   21550:	4630      	mov	r0, r6
   21552:	f7ff ffd1 	bl	214f8 <call_handler>
    *p_pin = pin_number & 0x1F;
   21556:	f006 031f 	and.w	r3, r6, #31
    return pin_number >> 5;
   2155a:	0972      	lsrs	r2, r6, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2155c:	2a01      	cmp	r2, #1
   2155e:	d012      	beq.n	21586 <next_sense_cond_call_handler+0x62>
        case 0: return NRF_P0;
   21560:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   21564:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   21568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2156c:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
   21570:	429d      	cmp	r5, r3
   21572:	d1eb      	bne.n	2154c <next_sense_cond_call_handler+0x28>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   21574:	2100      	movs	r1, #0
   21576:	4630      	mov	r0, r6
   21578:	f008 fb58 	bl	29c2c <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   2157c:	4629      	mov	r1, r5
   2157e:	4630      	mov	r0, r6
   21580:	f008 fb54 	bl	29c2c <nrf_gpio_cfg_sense_set>
   21584:	e7e2      	b.n	2154c <next_sense_cond_call_handler+0x28>
        case 1: return NRF_P1;
   21586:	4a07      	ldr	r2, [pc, #28]	; (215a4 <next_sense_cond_call_handler+0x80>)
   21588:	e7ec      	b.n	21564 <next_sense_cond_call_handler+0x40>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2158a:	2103      	movs	r1, #3
   2158c:	e7d5      	b.n	2153a <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   2158e:	2c01      	cmp	r4, #1
   21590:	d1da      	bne.n	21548 <next_sense_cond_call_handler+0x24>
            call_handler(pin, trigger);
   21592:	4621      	mov	r1, r4
   21594:	4630      	mov	r0, r6
   21596:	f7ff ffaf 	bl	214f8 <call_handler>
}
   2159a:	e7d7      	b.n	2154c <next_sense_cond_call_handler+0x28>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   2159c:	2c02      	cmp	r4, #2
   2159e:	d1d5      	bne.n	2154c <next_sense_cond_call_handler+0x28>
   215a0:	e7f7      	b.n	21592 <next_sense_cond_call_handler+0x6e>
   215a2:	bf00      	nop
   215a4:	50000300 	.word	0x50000300

000215a8 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   215a8:	f100 0208 	add.w	r2, r0, #8
   215ac:	4b0e      	ldr	r3, [pc, #56]	; (215e8 <release_handler+0x40>)
   215ae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   215b2:	f413 7f80 	tst.w	r3, #256	; 0x100
   215b6:	d016      	beq.n	215e6 <release_handler+0x3e>
{
   215b8:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   215ba:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   215be:	4610      	mov	r0, r2
   215c0:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   215c4:	4a08      	ldr	r2, [pc, #32]	; (215e8 <release_handler+0x40>)
   215c6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
   215ca:	4620      	mov	r0, r4
   215cc:	f7ff ff2e 	bl	2142c <handler_in_use>
   215d0:	b100      	cbz	r0, 215d4 <release_handler+0x2c>
}
   215d2:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
   215d4:	4804      	ldr	r0, [pc, #16]	; (215e8 <release_handler+0x40>)
   215d6:	2300      	movs	r3, #0
   215d8:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   215dc:	4621      	mov	r1, r4
   215de:	3068      	adds	r0, #104	; 0x68
   215e0:	f7ff fe52 	bl	21288 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   215e4:	e7f5      	b.n	215d2 <release_handler+0x2a>
   215e6:	4770      	bx	lr
   215e8:	200008c8 	.word	0x200008c8

000215ec <pin_handler_trigger_uninit>:
{
   215ec:	b510      	push	{r4, lr}
   215ee:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
   215f0:	f7ff fef4 	bl	213dc <pin_in_use_by_te>
   215f4:	b140      	cbz	r0, 21608 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   215f6:	4620      	mov	r0, r4
   215f8:	f7ff ff10 	bl	2141c <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   215fc:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   21600:	4b06      	ldr	r3, [pc, #24]	; (2161c <pin_handler_trigger_uninit+0x30>)
   21602:	2200      	movs	r2, #0
   21604:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   21608:	4620      	mov	r0, r4
   2160a:	f7ff ffcd 	bl	215a8 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   2160e:	3408      	adds	r4, #8
   21610:	4b03      	ldr	r3, [pc, #12]	; (21620 <pin_handler_trigger_uninit+0x34>)
   21612:	2200      	movs	r2, #0
   21614:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
   21618:	bd10      	pop	{r4, pc}
   2161a:	bf00      	nop
   2161c:	40006000 	.word	0x40006000
   21620:	200008c8 	.word	0x200008c8

00021624 <pin_handler_set>:
{
   21624:	b570      	push	{r4, r5, r6, lr}
   21626:	b082      	sub	sp, #8
   21628:	4605      	mov	r5, r0
   2162a:	460e      	mov	r6, r1
   2162c:	4614      	mov	r4, r2
    release_handler(pin);
   2162e:	f7ff ffbb 	bl	215a8 <release_handler>
    if (!handler)
   21632:	b326      	cbz	r6, 2167e <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
   21634:	4621      	mov	r1, r4
   21636:	4630      	mov	r0, r6
   21638:	f7ff ff12 	bl	21460 <find_handler>
    if (handler_id < 0)
   2163c:	1e03      	subs	r3, r0, #0
   2163e:	db13      	blt.n	21668 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
   21640:	4910      	ldr	r1, [pc, #64]	; (21684 <pin_handler_set+0x60>)
   21642:	f841 6033 	str.w	r6, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   21646:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   2164a:	6054      	str	r4, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   2164c:	f105 0008 	add.w	r0, r5, #8
   21650:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
   21654:	025b      	lsls	r3, r3, #9
   21656:	b29b      	uxth	r3, r3
   21658:	4313      	orrs	r3, r2
   2165a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2165e:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    return NRFX_SUCCESS;
   21662:	4809      	ldr	r0, [pc, #36]	; (21688 <pin_handler_set+0x64>)
}
   21664:	b002      	add	sp, #8
   21666:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   21668:	f10d 0107 	add.w	r1, sp, #7
   2166c:	4807      	ldr	r0, [pc, #28]	; (2168c <pin_handler_set+0x68>)
   2166e:	f7ff fde3 	bl	21238 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   21672:	4b05      	ldr	r3, [pc, #20]	; (21688 <pin_handler_set+0x64>)
   21674:	4298      	cmp	r0, r3
   21676:	d1f5      	bne.n	21664 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
   21678:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2167c:	e7e0      	b.n	21640 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
   2167e:	4802      	ldr	r0, [pc, #8]	; (21688 <pin_handler_set+0x64>)
   21680:	e7f0      	b.n	21664 <pin_handler_set+0x40>
   21682:	bf00      	nop
   21684:	200008c8 	.word	0x200008c8
   21688:	0bad0000 	.word	0x0bad0000
   2168c:	20000930 	.word	0x20000930

00021690 <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
   21690:	b570      	push	{r4, r5, r6, lr}
   21692:	b082      	sub	sp, #8
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
   21694:	466a      	mov	r2, sp
   21696:	2102      	movs	r1, #2
   21698:	2000      	movs	r0, #0
   2169a:	f7ff fe73 	bl	21384 <nrf_gpio_latches_read_and_clear>
   2169e:	e040      	b.n	21722 <port_event_handle+0x92>
   216a0:	4e22      	ldr	r6, [pc, #136]	; (2172c <port_event_handle+0x9c>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   216a2:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
   216a6:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
   216aa:	f3c2 4201 	ubfx	r2, r2, #16, #2
   216ae:	f7ff ff39 	bl	21524 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
   216b2:	2301      	movs	r3, #1
   216b4:	40ab      	lsls	r3, r5
   216b6:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
            while (latch[i])
   216ba:	ab02      	add	r3, sp, #8
   216bc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   216c0:	f853 0c08 	ldr.w	r0, [r3, #-8]
   216c4:	b300      	cbz	r0, 21708 <port_event_handle+0x78>
                uint32_t pin = NRF_CTZ(latch[i]);
   216c6:	fa90 f0a0 	rbit	r0, r0
   216ca:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
   216ce:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   216d2:	f100 0208 	add.w	r2, r0, #8
   216d6:	4b16      	ldr	r3, [pc, #88]	; (21730 <port_event_handle+0xa0>)
   216d8:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
   216dc:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   216e0:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
   216e2:	f000 0607 	and.w	r6, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   216e6:	f81d 2005 	ldrb.w	r2, [sp, r5]
   216ea:	2301      	movs	r3, #1
   216ec:	40b3      	lsls	r3, r6
   216ee:	43db      	mvns	r3, r3
   216f0:	b25b      	sxtb	r3, r3
   216f2:	4013      	ands	r3, r2
   216f4:	f80d 3005 	strb.w	r3, [sp, r5]
    *p_pin = pin_number & 0x1F;
   216f8:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
   216fc:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   216fe:	2b01      	cmp	r3, #1
   21700:	d0ce      	beq.n	216a0 <port_event_handle+0x10>
        case 0: return NRF_P0;
   21702:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
   21706:	e7cc      	b.n	216a2 <port_event_handle+0x12>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   21708:	3401      	adds	r4, #1
   2170a:	2c01      	cmp	r4, #1
   2170c:	d9d5      	bls.n	216ba <port_event_handle+0x2a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2170e:	4b09      	ldr	r3, [pc, #36]	; (21734 <port_event_handle+0xa4>)
   21710:	2200      	movs	r2, #0
   21712:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   21716:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
   2171a:	4668      	mov	r0, sp
   2171c:	f008 fab3 	bl	29c86 <latch_pending_read_and_check>
   21720:	b108      	cbz	r0, 21726 <port_event_handle+0x96>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   21722:	2400      	movs	r4, #0
   21724:	e7f1      	b.n	2170a <port_event_handle+0x7a>
}
   21726:	b002      	add	sp, #8
   21728:	bd70      	pop	{r4, r5, r6, pc}
   2172a:	bf00      	nop
   2172c:	50000300 	.word	0x50000300
   21730:	200008c8 	.word	0x200008c8
   21734:	40006000 	.word	0x40006000

00021738 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
   21738:	b538      	push	{r3, r4, r5, lr}
   2173a:	4604      	mov	r4, r0
    while (mask)
   2173c:	e018      	b.n	21770 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
   2173e:	fa94 f3a4 	rbit	r3, r4
   21742:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   21746:	2201      	movs	r2, #1
   21748:	409a      	lsls	r2, r3
   2174a:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2174e:	4a0a      	ldr	r2, [pc, #40]	; (21778 <gpiote_evt_handle+0x40>)
   21750:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   21754:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   21758:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   2175c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   21760:	f3c0 4001 	ubfx	r0, r0, #16, #2
   21764:	f008 fa88 	bl	29c78 <gpiote_polarity_to_trigger>
   21768:	4601      	mov	r1, r0
   2176a:	4628      	mov	r0, r5
   2176c:	f7ff fec4 	bl	214f8 <call_handler>
    while (mask)
   21770:	2c00      	cmp	r4, #0
   21772:	d1e4      	bne.n	2173e <gpiote_evt_handle+0x6>
    }
}
   21774:	bd38      	pop	{r3, r4, r5, pc}
   21776:	bf00      	nop
   21778:	40006000 	.word	0x40006000

0002177c <nrfx_gpiote_input_configure>:
{
   2177c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21780:	b084      	sub	sp, #16
   21782:	4604      	mov	r4, r0
   21784:	4615      	mov	r5, r2
   21786:	461e      	mov	r6, r3
    if (p_input_config)
   21788:	b309      	cbz	r1, 217ce <nrfx_gpiote_input_configure+0x52>
   2178a:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
   2178c:	f008 fa5e 	bl	29c4c <pin_is_task_output>
   21790:	2800      	cmp	r0, #0
   21792:	d13f      	bne.n	21814 <nrfx_gpiote_input_configure+0x98>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   21794:	2300      	movs	r3, #0
   21796:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   2179a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   2179e:	9301      	str	r3, [sp, #4]
   217a0:	9300      	str	r3, [sp, #0]
   217a2:	463b      	mov	r3, r7
   217a4:	f10d 020f 	add.w	r2, sp, #15
   217a8:	f10d 010e 	add.w	r1, sp, #14
   217ac:	4620      	mov	r0, r4
   217ae:	f7ff fd8d 	bl	212cc <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   217b2:	4a38      	ldr	r2, [pc, #224]	; (21894 <nrfx_gpiote_input_configure+0x118>)
   217b4:	f104 0108 	add.w	r1, r4, #8
   217b8:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   217bc:	f023 0302 	bic.w	r3, r3, #2
   217c0:	b29b      	uxth	r3, r3
   217c2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   217c6:	f043 0301 	orr.w	r3, r3, #1
   217ca:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   217ce:	b1bd      	cbz	r5, 21800 <nrfx_gpiote_input_configure+0x84>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   217d0:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   217d2:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
   217d6:	4620      	mov	r0, r4
   217d8:	f7ff fe16 	bl	21408 <pin_is_output>
   217dc:	b1e0      	cbz	r0, 21818 <nrfx_gpiote_input_configure+0x9c>
            if (use_evt)
   217de:	f1b8 0f00 	cmp.w	r8, #0
   217e2:	d151      	bne.n	21888 <nrfx_gpiote_input_configure+0x10c>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   217e4:	4a2b      	ldr	r2, [pc, #172]	; (21894 <nrfx_gpiote_input_configure+0x118>)
   217e6:	f104 0108 	add.w	r1, r4, #8
   217ea:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   217ee:	f023 031c 	bic.w	r3, r3, #28
   217f2:	b29b      	uxth	r3, r3
   217f4:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   217f8:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
   217fc:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   21800:	2e00      	cmp	r6, #0
   21802:	d045      	beq.n	21890 <nrfx_gpiote_input_configure+0x114>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   21804:	6872      	ldr	r2, [r6, #4]
   21806:	6831      	ldr	r1, [r6, #0]
   21808:	4620      	mov	r0, r4
   2180a:	f7ff ff0b 	bl	21624 <pin_handler_set>
}
   2180e:	b004      	add	sp, #16
   21810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return NRFX_ERROR_INVALID_PARAM;
   21814:	4820      	ldr	r0, [pc, #128]	; (21898 <nrfx_gpiote_input_configure+0x11c>)
   21816:	e7fa      	b.n	2180e <nrfx_gpiote_input_configure+0x92>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   21818:	4a1e      	ldr	r2, [pc, #120]	; (21894 <nrfx_gpiote_input_configure+0x118>)
   2181a:	f104 0108 	add.w	r1, r4, #8
   2181e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   21822:	f023 0320 	bic.w	r3, r3, #32
   21826:	04db      	lsls	r3, r3, #19
   21828:	0cdb      	lsrs	r3, r3, #19
   2182a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
   2182e:	f1b8 0f00 	cmp.w	r8, #0
   21832:	d0d7      	beq.n	217e4 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
   21834:	2f03      	cmp	r7, #3
   21836:	d829      	bhi.n	2188c <nrfx_gpiote_input_configure+0x110>
                uint8_t ch = *p_trigger_config->p_in_channel;
   21838:	686b      	ldr	r3, [r5, #4]
   2183a:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   2183c:	b937      	cbnz	r7, 2184c <nrfx_gpiote_input_configure+0xd0>
    p_reg->CONFIG[idx] = 0;
   2183e:	f505 75a2 	add.w	r5, r5, #324	; 0x144
   21842:	4b16      	ldr	r3, [pc, #88]	; (2189c <nrfx_gpiote_input_configure+0x120>)
   21844:	2200      	movs	r2, #0
   21846:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   2184a:	e7cb      	b.n	217e4 <nrfx_gpiote_input_configure+0x68>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
   2184c:	4638      	mov	r0, r7
   2184e:	f008 fa14 	bl	29c7a <gpiote_trigger_to_polarity>
   21852:	4603      	mov	r3, r0
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   21854:	4811      	ldr	r0, [pc, #68]	; (2189c <nrfx_gpiote_input_configure+0x120>)
   21856:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   2185a:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   2185e:	f022 0203 	bic.w	r2, r2, #3
   21862:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
                    nrf_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
   21866:	4622      	mov	r2, r4
   21868:	4629      	mov	r1, r5
   2186a:	f008 f9a7 	bl	29bbc <nrf_gpiote_event_configure>
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   2186e:	4a09      	ldr	r2, [pc, #36]	; (21894 <nrfx_gpiote_input_configure+0x118>)
   21870:	f104 0108 	add.w	r1, r4, #8
   21874:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   21878:	036d      	lsls	r5, r5, #13
   2187a:	b2ad      	uxth	r5, r5
   2187c:	432b      	orrs	r3, r5
   2187e:	f043 0320 	orr.w	r3, r3, #32
   21882:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
   21886:	e7ad      	b.n	217e4 <nrfx_gpiote_input_configure+0x68>
                return NRFX_ERROR_INVALID_PARAM;
   21888:	4803      	ldr	r0, [pc, #12]	; (21898 <nrfx_gpiote_input_configure+0x11c>)
   2188a:	e7c0      	b.n	2180e <nrfx_gpiote_input_configure+0x92>
                    return NRFX_ERROR_INVALID_PARAM;
   2188c:	4802      	ldr	r0, [pc, #8]	; (21898 <nrfx_gpiote_input_configure+0x11c>)
   2188e:	e7be      	b.n	2180e <nrfx_gpiote_input_configure+0x92>
        err = NRFX_SUCCESS;
   21890:	4803      	ldr	r0, [pc, #12]	; (218a0 <nrfx_gpiote_input_configure+0x124>)
   21892:	e7bc      	b.n	2180e <nrfx_gpiote_input_configure+0x92>
   21894:	200008c8 	.word	0x200008c8
   21898:	0bad0004 	.word	0x0bad0004
   2189c:	40006000 	.word	0x40006000
   218a0:	0bad0000 	.word	0x0bad0000

000218a4 <nrfx_gpiote_output_configure>:
{
   218a4:	b570      	push	{r4, r5, r6, lr}
   218a6:	b084      	sub	sp, #16
   218a8:	4604      	mov	r4, r0
   218aa:	4615      	mov	r5, r2
    if (p_config)
   218ac:	b329      	cbz	r1, 218fa <nrfx_gpiote_output_configure+0x56>
   218ae:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   218b0:	f008 f9db 	bl	29c6a <pin_is_input>
   218b4:	b120      	cbz	r0, 218c0 <nrfx_gpiote_output_configure+0x1c>
   218b6:	4620      	mov	r0, r4
   218b8:	f7ff fd90 	bl	213dc <pin_in_use_by_te>
   218bc:	2800      	cmp	r0, #0
   218be:	d138      	bne.n	21932 <nrfx_gpiote_output_configure+0x8e>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   218c0:	4620      	mov	r0, r4
   218c2:	f7ff fd95 	bl	213f0 <pin_has_trigger>
   218c6:	b110      	cbz	r0, 218ce <nrfx_gpiote_output_configure+0x2a>
   218c8:	7873      	ldrb	r3, [r6, #1]
   218ca:	2b01      	cmp	r3, #1
   218cc:	d031      	beq.n	21932 <nrfx_gpiote_output_configure+0x8e>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   218ce:	2301      	movs	r3, #1
   218d0:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   218d4:	2300      	movs	r3, #0
   218d6:	9301      	str	r3, [sp, #4]
   218d8:	9600      	str	r6, [sp, #0]
   218da:	1cb3      	adds	r3, r6, #2
   218dc:	1c72      	adds	r2, r6, #1
   218de:	f10d 010f 	add.w	r1, sp, #15
   218e2:	4620      	mov	r0, r4
   218e4:	f7ff fcf2 	bl	212cc <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   218e8:	4a1f      	ldr	r2, [pc, #124]	; (21968 <nrfx_gpiote_output_configure+0xc4>)
   218ea:	f104 0108 	add.w	r1, r4, #8
   218ee:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   218f2:	f043 0303 	orr.w	r3, r3, #3
   218f6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   218fa:	b385      	cbz	r5, 2195e <nrfx_gpiote_output_configure+0xba>
        if (pin_is_input(pin))
   218fc:	4620      	mov	r0, r4
   218fe:	f008 f9b4 	bl	29c6a <pin_is_input>
   21902:	bb70      	cbnz	r0, 21962 <nrfx_gpiote_output_configure+0xbe>
        uint32_t ch = p_task_config->task_ch;
   21904:	782e      	ldrb	r6, [r5, #0]
    p_reg->CONFIG[idx] = 0;
   21906:	f506 72a2 	add.w	r2, r6, #324	; 0x144
   2190a:	4b18      	ldr	r3, [pc, #96]	; (2196c <nrfx_gpiote_output_configure+0xc8>)
   2190c:	2100      	movs	r1, #0
   2190e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   21912:	4a15      	ldr	r2, [pc, #84]	; (21968 <nrfx_gpiote_output_configure+0xc4>)
   21914:	f104 0108 	add.w	r1, r4, #8
   21918:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   2191c:	f023 0320 	bic.w	r3, r3, #32
   21920:	04db      	lsls	r3, r3, #19
   21922:	0cdb      	lsrs	r3, r3, #19
   21924:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   21928:	786b      	ldrb	r3, [r5, #1]
   2192a:	b923      	cbnz	r3, 21936 <nrfx_gpiote_output_configure+0x92>
    return NRFX_SUCCESS;
   2192c:	4810      	ldr	r0, [pc, #64]	; (21970 <nrfx_gpiote_output_configure+0xcc>)
}
   2192e:	b004      	add	sp, #16
   21930:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_INVALID_PARAM;
   21932:	4810      	ldr	r0, [pc, #64]	; (21974 <nrfx_gpiote_output_configure+0xd0>)
   21934:	e7fb      	b.n	2192e <nrfx_gpiote_output_configure+0x8a>
                                      p_task_config->init_val);
   21936:	78aa      	ldrb	r2, [r5, #2]
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   21938:	9200      	str	r2, [sp, #0]
   2193a:	4622      	mov	r2, r4
   2193c:	4631      	mov	r1, r6
   2193e:	480b      	ldr	r0, [pc, #44]	; (2196c <nrfx_gpiote_output_configure+0xc8>)
   21940:	f008 f955 	bl	29bee <nrf_gpiote_task_configure>
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   21944:	4a08      	ldr	r2, [pc, #32]	; (21968 <nrfx_gpiote_output_configure+0xc4>)
   21946:	3408      	adds	r4, #8
   21948:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
   2194c:	0376      	lsls	r6, r6, #13
   2194e:	b2b6      	uxth	r6, r6
   21950:	4333      	orrs	r3, r6
   21952:	f043 0320 	orr.w	r3, r3, #32
   21956:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
   2195a:	4805      	ldr	r0, [pc, #20]	; (21970 <nrfx_gpiote_output_configure+0xcc>)
   2195c:	e7e7      	b.n	2192e <nrfx_gpiote_output_configure+0x8a>
   2195e:	4804      	ldr	r0, [pc, #16]	; (21970 <nrfx_gpiote_output_configure+0xcc>)
   21960:	e7e5      	b.n	2192e <nrfx_gpiote_output_configure+0x8a>
            return NRFX_ERROR_INVALID_PARAM;
   21962:	4804      	ldr	r0, [pc, #16]	; (21974 <nrfx_gpiote_output_configure+0xd0>)
   21964:	e7e3      	b.n	2192e <nrfx_gpiote_output_configure+0x8a>
   21966:	bf00      	nop
   21968:	200008c8 	.word	0x200008c8
   2196c:	40006000 	.word	0x40006000
   21970:	0bad0000 	.word	0x0bad0000
   21974:	0bad0004 	.word	0x0bad0004

00021978 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   21978:	4b01      	ldr	r3, [pc, #4]	; (21980 <nrfx_gpiote_global_callback_set+0x8>)
   2197a:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
   2197c:	60d9      	str	r1, [r3, #12]
}
   2197e:	4770      	bx	lr
   21980:	200008c8 	.word	0x200008c8

00021984 <nrfx_gpiote_channel_get>:
{
   21984:	b538      	push	{r3, r4, r5, lr}
   21986:	4604      	mov	r4, r0
   21988:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
   2198a:	f7ff fd27 	bl	213dc <pin_in_use_by_te>
   2198e:	b140      	cbz	r0, 219a2 <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   21990:	f104 0008 	add.w	r0, r4, #8
   21994:	4b04      	ldr	r3, [pc, #16]	; (219a8 <nrfx_gpiote_channel_get+0x24>)
   21996:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
   2199a:	0b5b      	lsrs	r3, r3, #13
   2199c:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
   2199e:	4803      	ldr	r0, [pc, #12]	; (219ac <nrfx_gpiote_channel_get+0x28>)
}
   219a0:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   219a2:	4803      	ldr	r0, [pc, #12]	; (219b0 <nrfx_gpiote_channel_get+0x2c>)
   219a4:	e7fc      	b.n	219a0 <nrfx_gpiote_channel_get+0x1c>
   219a6:	bf00      	nop
   219a8:	200008c8 	.word	0x200008c8
   219ac:	0bad0000 	.word	0x0bad0000
   219b0:	0bad0004 	.word	0x0bad0004

000219b4 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   219b4:	4b0f      	ldr	r3, [pc, #60]	; (219f4 <nrfx_gpiote_init+0x40>)
   219b6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
   219ba:	b10b      	cbz	r3, 219c0 <nrfx_gpiote_init+0xc>
        return err_code;
   219bc:	480e      	ldr	r0, [pc, #56]	; (219f8 <nrfx_gpiote_init+0x44>)
}
   219be:	4770      	bx	lr
{
   219c0:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   219c2:	4c0e      	ldr	r4, [pc, #56]	; (219fc <nrfx_gpiote_init+0x48>)
   219c4:	2254      	movs	r2, #84	; 0x54
   219c6:	2100      	movs	r1, #0
   219c8:	4620      	mov	r0, r4
   219ca:	f004 fb5b 	bl	26084 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   219ce:	2006      	movs	r0, #6
   219d0:	f004 fa55 	bl	25e7e <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   219d4:	4b0a      	ldr	r3, [pc, #40]	; (21a00 <nrfx_gpiote_init+0x4c>)
   219d6:	2200      	movs	r2, #0
   219d8:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   219dc:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   219e0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   219e4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   219e8:	2301      	movs	r3, #1
   219ea:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   219ee:	65a3      	str	r3, [r4, #88]	; 0x58
    return err_code;
   219f0:	4804      	ldr	r0, [pc, #16]	; (21a04 <nrfx_gpiote_init+0x50>)
}
   219f2:	bd10      	pop	{r4, pc}
   219f4:	200008c8 	.word	0x200008c8
   219f8:	0bad0005 	.word	0x0bad0005
   219fc:	200008d8 	.word	0x200008d8
   21a00:	40006000 	.word	0x40006000
   21a04:	0bad0000 	.word	0x0bad0000

00021a08 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   21a08:	4b03      	ldr	r3, [pc, #12]	; (21a18 <nrfx_gpiote_is_init+0x10>)
   21a0a:	f893 006c 	ldrb.w	r0, [r3, #108]	; 0x6c
}
   21a0e:	3800      	subs	r0, #0
   21a10:	bf18      	it	ne
   21a12:	2001      	movne	r0, #1
   21a14:	4770      	bx	lr
   21a16:	bf00      	nop
   21a18:	200008c8 	.word	0x200008c8

00021a1c <nrfx_gpiote_channel_free>:
{
   21a1c:	b508      	push	{r3, lr}
   21a1e:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   21a20:	4801      	ldr	r0, [pc, #4]	; (21a28 <nrfx_gpiote_channel_free+0xc>)
   21a22:	f7ff fc31 	bl	21288 <nrfx_flag32_free>
}
   21a26:	bd08      	pop	{r3, pc}
   21a28:	2000092c 	.word	0x2000092c

00021a2c <nrfx_gpiote_channel_alloc>:
{
   21a2c:	b508      	push	{r3, lr}
   21a2e:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   21a30:	4801      	ldr	r0, [pc, #4]	; (21a38 <nrfx_gpiote_channel_alloc+0xc>)
   21a32:	f7ff fc01 	bl	21238 <nrfx_flag32_alloc>
}
   21a36:	bd08      	pop	{r3, pc}
   21a38:	2000092c 	.word	0x2000092c

00021a3c <nrfx_gpiote_trigger_enable>:
{
   21a3c:	b538      	push	{r3, r4, r5, lr}
   21a3e:	4604      	mov	r4, r0
   21a40:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   21a42:	f7ff fccb 	bl	213dc <pin_in_use_by_te>
   21a46:	b300      	cbz	r0, 21a8a <nrfx_gpiote_trigger_enable+0x4e>
   21a48:	4620      	mov	r0, r4
   21a4a:	f008 f90e 	bl	29c6a <pin_is_input>
   21a4e:	b1e0      	cbz	r0, 21a8a <nrfx_gpiote_trigger_enable+0x4e>
        uint8_t ch = pin_te_get(pin);
   21a50:	4620      	mov	r0, r4
   21a52:	f7ff fce3 	bl	2141c <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   21a56:	0083      	lsls	r3, r0, #2
   21a58:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
   21a5c:	b29b      	uxth	r3, r3
   21a5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21a62:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21a66:	2200      	movs	r2, #0
   21a68:	601a      	str	r2, [r3, #0]
   21a6a:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   21a6c:	4a0b      	ldr	r2, [pc, #44]	; (21a9c <nrfx_gpiote_trigger_enable+0x60>)
   21a6e:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   21a72:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   21a76:	f043 0301 	orr.w	r3, r3, #1
   21a7a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
   21a7e:	b15d      	cbz	r5, 21a98 <nrfx_gpiote_trigger_enable+0x5c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   21a80:	2301      	movs	r3, #1
   21a82:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   21a84:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   21a88:	e006      	b.n	21a98 <nrfx_gpiote_trigger_enable+0x5c>
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   21a8a:	4620      	mov	r0, r4
   21a8c:	f7ff fcfe 	bl	2148c <get_initial_sense>
   21a90:	4601      	mov	r1, r0
   21a92:	4620      	mov	r0, r4
   21a94:	f008 f8ca 	bl	29c2c <nrf_gpio_cfg_sense_set>
}
   21a98:	bd38      	pop	{r3, r4, r5, pc}
   21a9a:	bf00      	nop
   21a9c:	40006000 	.word	0x40006000

00021aa0 <nrfx_gpiote_trigger_disable>:
{
   21aa0:	b510      	push	{r4, lr}
   21aa2:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   21aa4:	f7ff fc9a 	bl	213dc <pin_in_use_by_te>
   21aa8:	b1a0      	cbz	r0, 21ad4 <nrfx_gpiote_trigger_disable+0x34>
   21aaa:	4620      	mov	r0, r4
   21aac:	f008 f8dd 	bl	29c6a <pin_is_input>
   21ab0:	b180      	cbz	r0, 21ad4 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
   21ab2:	4620      	mov	r0, r4
   21ab4:	f7ff fcb2 	bl	2141c <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   21ab8:	2201      	movs	r2, #1
   21aba:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   21abc:	4b08      	ldr	r3, [pc, #32]	; (21ae0 <nrfx_gpiote_trigger_disable+0x40>)
   21abe:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   21ac2:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   21ac6:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   21aca:	f022 0203 	bic.w	r2, r2, #3
   21ace:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   21ad2:	e003      	b.n	21adc <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   21ad4:	2100      	movs	r1, #0
   21ad6:	4620      	mov	r0, r4
   21ad8:	f008 f8a8 	bl	29c2c <nrf_gpio_cfg_sense_set>
}
   21adc:	bd10      	pop	{r4, pc}
   21ade:	bf00      	nop
   21ae0:	40006000 	.word	0x40006000

00021ae4 <nrfx_gpiote_pin_uninit>:
{
   21ae4:	b510      	push	{r4, lr}
   21ae6:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   21ae8:	f7ff fc6e 	bl	213c8 <pin_in_use>
   21aec:	b908      	cbnz	r0, 21af2 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
   21aee:	480c      	ldr	r0, [pc, #48]	; (21b20 <nrfx_gpiote_pin_uninit+0x3c>)
}
   21af0:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
   21af2:	4620      	mov	r0, r4
   21af4:	f7ff ffd4 	bl	21aa0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   21af8:	4620      	mov	r0, r4
   21afa:	f7ff fd77 	bl	215ec <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
   21afe:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   21b02:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21b04:	2c01      	cmp	r4, #1
   21b06:	d008      	beq.n	21b1a <nrfx_gpiote_pin_uninit+0x36>
        case 0: return NRF_P0;
   21b08:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   21b0c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   21b10:	2102      	movs	r1, #2
   21b12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return NRFX_SUCCESS;
   21b16:	4803      	ldr	r0, [pc, #12]	; (21b24 <nrfx_gpiote_pin_uninit+0x40>)
   21b18:	e7ea      	b.n	21af0 <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
   21b1a:	4a03      	ldr	r2, [pc, #12]	; (21b28 <nrfx_gpiote_pin_uninit+0x44>)
   21b1c:	e7f6      	b.n	21b0c <nrfx_gpiote_pin_uninit+0x28>
   21b1e:	bf00      	nop
   21b20:	0bad0004 	.word	0x0bad0004
   21b24:	0bad0000 	.word	0x0bad0000
   21b28:	50000300 	.word	0x50000300

00021b2c <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
   21b2c:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   21b2e:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
   21b30:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   21b34:	2100      	movs	r1, #0
    uint32_t status = 0;
   21b36:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   21b38:	e003      	b.n	21b42 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
   21b3a:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
   21b3c:	3304      	adds	r3, #4
   21b3e:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   21b40:	3101      	adds	r1, #1
   21b42:	2907      	cmp	r1, #7
   21b44:	d814      	bhi.n	21b70 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21b46:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   21b4a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
   21b4e:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   21b50:	2a00      	cmp	r2, #0
   21b52:	d0f2      	beq.n	21b3a <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
   21b54:	4a0c      	ldr	r2, [pc, #48]	; (21b88 <nrfx_gpiote_irq_handler+0x5c>)
   21b56:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   21b5a:	4210      	tst	r0, r2
   21b5c:	d0ed      	beq.n	21b3a <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
   21b5e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   21b62:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21b66:	2500      	movs	r5, #0
   21b68:	6015      	str	r5, [r2, #0]
   21b6a:	6812      	ldr	r2, [r2, #0]
            status |= mask;
   21b6c:	4304      	orrs	r4, r0
   21b6e:	e7e4      	b.n	21b3a <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21b70:	4b05      	ldr	r3, [pc, #20]	; (21b88 <nrfx_gpiote_irq_handler+0x5c>)
   21b72:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   21b76:	b91b      	cbnz	r3, 21b80 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
   21b78:	4620      	mov	r0, r4
   21b7a:	f7ff fddd 	bl	21738 <gpiote_evt_handle>
}
   21b7e:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
   21b80:	f7ff fd86 	bl	21690 <port_event_handle>
   21b84:	e7f8      	b.n	21b78 <nrfx_gpiote_irq_handler+0x4c>
   21b86:	bf00      	nop
   21b88:	40006000 	.word	0x40006000

00021b8c <nrf_gpio_pin_write>:
    if (value == 0)
   21b8c:	b969      	cbnz	r1, 21baa <nrf_gpio_pin_write+0x1e>
    *p_pin = pin_number & 0x1F;
   21b8e:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   21b92:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21b94:	2801      	cmp	r0, #1
   21b96:	d006      	beq.n	21ba6 <nrf_gpio_pin_write+0x1a>
        case 0: return NRF_P0;
   21b98:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   21b9c:	2301      	movs	r3, #1
   21b9e:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   21ba0:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   21ba4:	4770      	bx	lr
        case 1: return NRF_P1;
   21ba6:	4a08      	ldr	r2, [pc, #32]	; (21bc8 <nrf_gpio_pin_write+0x3c>)
   21ba8:	e7f8      	b.n	21b9c <nrf_gpio_pin_write+0x10>
    *p_pin = pin_number & 0x1F;
   21baa:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   21bae:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21bb0:	2801      	cmp	r0, #1
   21bb2:	d006      	beq.n	21bc2 <nrf_gpio_pin_write+0x36>
        case 0: return NRF_P0;
   21bb4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   21bb8:	2301      	movs	r3, #1
   21bba:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   21bbc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
   21bc0:	4770      	bx	lr
        case 1: return NRF_P1;
   21bc2:	4a01      	ldr	r2, [pc, #4]	; (21bc8 <nrf_gpio_pin_write+0x3c>)
   21bc4:	e7f8      	b.n	21bb8 <nrf_gpio_pin_write+0x2c>
   21bc6:	bf00      	nop
   21bc8:	50000300 	.word	0x50000300

00021bcc <configure_pins>:
static spi_control_block_t m_cb[NRFX_SPI_ENABLED_COUNT];


static void configure_pins(NRF_SPI_Type *            p_spi,
                           nrfx_spi_config_t const * p_config)
{
   21bcc:	b538      	push	{r3, r4, r5, lr}
   21bce:	4605      	mov	r5, r0
   21bd0:	460c      	mov	r4, r1
    if (!p_config->skip_gpio_cfg)
   21bd2:	7bcb      	ldrb	r3, [r1, #15]
   21bd4:	b183      	cbz	r3, 21bf8 <configure_pins+0x2c>
            nrf_gpio_pin_write(p_config->ss_pin, 1);
            nrf_gpio_cfg_output(p_config->ss_pin);
        }
    }

    if (!p_config->skip_psel_cfg)
   21bd6:	7c23      	ldrb	r3, [r4, #16]
   21bd8:	b96b      	cbnz	r3, 21bf6 <configure_pins+0x2a>
    {
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   21bda:	7863      	ldrb	r3, [r4, #1]
                            ? p_config->mosi_pin
                            : NRF_SPI_PIN_NOT_CONNECTED;
   21bdc:	2bff      	cmp	r3, #255	; 0xff
   21bde:	d073      	beq.n	21cc8 <configure_pins+0xfc>
   21be0:	461a      	mov	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   21be2:	78a3      	ldrb	r3, [r4, #2]
                            ? p_config->miso_pin
                            : NRF_SPI_PIN_NOT_CONNECTED;
   21be4:	2bff      	cmp	r3, #255	; 0xff
   21be6:	d072      	beq.n	21cce <configure_pins+0x102>

        nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
   21be8:	7821      	ldrb	r1, [r4, #0]
                                        uint32_t       sck_pin,
                                        uint32_t       mosi_pin,
                                        uint32_t       miso_pin)
{
#if defined(SPI_PSEL_SCK_CONNECT_Pos)
    p_reg->PSEL.SCK = sck_pin;
   21bea:	f8c5 1508 	str.w	r1, [r5, #1288]	; 0x508
#else
    p_reg->PSELSCK  = sck_pin;
#endif

#if defined(SPI_PSEL_MOSI_CONNECT_Pos)
    p_reg->PSEL.MOSI = mosi_pin;
   21bee:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
#else
    p_reg->PSELMOSI = mosi_pin;
#endif

#if defined(SPI_PSEL_MISO_CONNECT_Pos)
    p_reg->PSEL.MISO = miso_pin;
   21bf2:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
    }
}
   21bf6:	bd38      	pop	{r3, r4, r5, pc}
                           p_config->mode <= NRF_SPI_MODE_1 ? 0 : 1);
   21bf8:	7b09      	ldrb	r1, [r1, #12]
        nrf_gpio_pin_write(p_config->sck_pin,
   21bfa:	2901      	cmp	r1, #1
   21bfc:	bf94      	ite	ls
   21bfe:	2100      	movls	r1, #0
   21c00:	2101      	movhi	r1, #1
   21c02:	7820      	ldrb	r0, [r4, #0]
   21c04:	f7ff ffc2 	bl	21b8c <nrf_gpio_pin_write>
        nrf_gpio_cfg(p_config->sck_pin,
   21c08:	7823      	ldrb	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   21c0a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   21c0e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21c10:	2b01      	cmp	r3, #1
   21c12:	d04d      	beq.n	21cb0 <configure_pins+0xe4>
        case 0: return NRF_P0;
   21c14:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   21c18:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   21c1c:	2201      	movs	r2, #1
   21c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   21c22:	7863      	ldrb	r3, [r4, #1]
   21c24:	2bff      	cmp	r3, #255	; 0xff
   21c26:	d017      	beq.n	21c58 <configure_pins+0x8c>
    *p_pin = pin_number & 0x1F;
   21c28:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
   21c2c:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21c2e:	4293      	cmp	r3, r2
   21c30:	d040      	beq.n	21cb4 <configure_pins+0xe8>
        case 0: return NRF_P0;
   21c32:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   21c36:	2301      	movs	r3, #1
   21c38:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   21c3a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
            nrf_gpio_cfg_output(p_config->mosi_pin);
   21c3e:	7863      	ldrb	r3, [r4, #1]
    *p_pin = pin_number & 0x1F;
   21c40:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   21c44:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21c46:	2b01      	cmp	r3, #1
   21c48:	d036      	beq.n	21cb8 <configure_pins+0xec>
        case 0: return NRF_P0;
   21c4a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   21c4e:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   21c52:	2203      	movs	r2, #3
   21c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   21c58:	78a3      	ldrb	r3, [r4, #2]
   21c5a:	2bff      	cmp	r3, #255	; 0xff
   21c5c:	d00c      	beq.n	21c78 <configure_pins+0xac>
            nrf_gpio_cfg_input(p_config->miso_pin, p_config->miso_pull);
   21c5e:	7ba1      	ldrb	r1, [r4, #14]
    *p_pin = pin_number & 0x1F;
   21c60:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   21c64:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21c66:	2b01      	cmp	r3, #1
   21c68:	d028      	beq.n	21cbc <configure_pins+0xf0>
        case 0: return NRF_P0;
   21c6a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   21c6e:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   21c70:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   21c74:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   21c78:	78e3      	ldrb	r3, [r4, #3]
   21c7a:	2bff      	cmp	r3, #255	; 0xff
   21c7c:	d0ab      	beq.n	21bd6 <configure_pins+0xa>
    *p_pin = pin_number & 0x1F;
   21c7e:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
   21c82:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21c84:	2b01      	cmp	r3, #1
   21c86:	d01b      	beq.n	21cc0 <configure_pins+0xf4>
        case 0: return NRF_P0;
   21c88:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   21c8c:	2301      	movs	r3, #1
   21c8e:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   21c90:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            nrf_gpio_cfg_output(p_config->ss_pin);
   21c94:	78e3      	ldrb	r3, [r4, #3]
    *p_pin = pin_number & 0x1F;
   21c96:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   21c9a:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21c9c:	2b01      	cmp	r3, #1
   21c9e:	d011      	beq.n	21cc4 <configure_pins+0xf8>
        case 0: return NRF_P0;
   21ca0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   21ca4:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   21ca8:	2203      	movs	r2, #3
   21caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   21cae:	e792      	b.n	21bd6 <configure_pins+0xa>
        case 1: return NRF_P1;
   21cb0:	4908      	ldr	r1, [pc, #32]	; (21cd4 <configure_pins+0x108>)
   21cb2:	e7b1      	b.n	21c18 <configure_pins+0x4c>
   21cb4:	4a07      	ldr	r2, [pc, #28]	; (21cd4 <configure_pins+0x108>)
   21cb6:	e7be      	b.n	21c36 <configure_pins+0x6a>
   21cb8:	4906      	ldr	r1, [pc, #24]	; (21cd4 <configure_pins+0x108>)
   21cba:	e7c8      	b.n	21c4e <configure_pins+0x82>
   21cbc:	4805      	ldr	r0, [pc, #20]	; (21cd4 <configure_pins+0x108>)
   21cbe:	e7d6      	b.n	21c6e <configure_pins+0xa2>
   21cc0:	4a04      	ldr	r2, [pc, #16]	; (21cd4 <configure_pins+0x108>)
   21cc2:	e7e3      	b.n	21c8c <configure_pins+0xc0>
   21cc4:	4903      	ldr	r1, [pc, #12]	; (21cd4 <configure_pins+0x108>)
   21cc6:	e7ed      	b.n	21ca4 <configure_pins+0xd8>
                            : NRF_SPI_PIN_NOT_CONNECTED;
   21cc8:	f04f 32ff 	mov.w	r2, #4294967295
   21ccc:	e789      	b.n	21be2 <configure_pins+0x16>
                            : NRF_SPI_PIN_NOT_CONNECTED;
   21cce:	f04f 33ff 	mov.w	r3, #4294967295
   21cd2:	e789      	b.n	21be8 <configure_pins+0x1c>
   21cd4:	50000300 	.word	0x50000300

00021cd8 <finish_transfer>:

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
}

static void finish_transfer(spi_control_block_t * p_cb)
{
   21cd8:	b508      	push	{r3, lr}
   21cda:	4603      	mov	r3, r0
    // If Slave Select signal is used, this is the time to deactivate it.
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   21cdc:	7f82      	ldrb	r2, [r0, #30]
   21cde:	2aff      	cmp	r2, #255	; 0xff
   21ce0:	d00a      	beq.n	21cf8 <finish_transfer+0x20>
    *p_pin = pin_number & 0x1F;
   21ce2:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   21ce6:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21ce8:	2a01      	cmp	r2, #1
   21cea:	d00e      	beq.n	21d0a <finish_transfer+0x32>
        case 0: return NRF_P0;
   21cec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   21cf0:	2201      	movs	r2, #1
   21cf2:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   21cf4:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
        nrf_gpio_pin_write(p_cb->ss_pin, 1);
    }

    // By clearing this flag before calling the handler we allow subsequent
    // transfers to be started directly from the handler function.
    p_cb->transfer_in_progress = false;
   21cf8:	2200      	movs	r2, #0
   21cfa:	775a      	strb	r2, [r3, #29]

    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
   21cfc:	721a      	strb	r2, [r3, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   21cfe:	4618      	mov	r0, r3
   21d00:	f850 2b08 	ldr.w	r2, [r0], #8
   21d04:	6859      	ldr	r1, [r3, #4]
   21d06:	4790      	blx	r2
}
   21d08:	bd08      	pop	{r3, pc}
        case 1: return NRF_P1;
   21d0a:	4801      	ldr	r0, [pc, #4]	; (21d10 <finish_transfer+0x38>)
   21d0c:	e7f0      	b.n	21cf0 <finish_transfer+0x18>
   21d0e:	bf00      	nop
   21d10:	50000300 	.word	0x50000300

00021d14 <spi_xfer>:
}

static void spi_xfer(NRF_SPI_Type               * p_spi,
                     spi_control_block_t        * p_cb,
                     nrfx_spi_xfer_desc_t const * p_xfer_desc)
{
   21d14:	b538      	push	{r3, r4, r5, lr}
   21d16:	4604      	mov	r4, r0
   21d18:	460d      	mov	r5, r1
    p_cb->bytes_transferred = 0;
   21d1a:	2300      	movs	r3, #0
   21d1c:	620b      	str	r3, [r1, #32]
    p_reg->INTENCLR = mask;
   21d1e:	2104      	movs	r1, #4
   21d20:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21d24:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   21d28:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108

    // Start the transfer by writing some byte to the TXD register;
    // if TX buffer is not empty, take the first byte from this buffer,
    // otherwise - use over-run character.
    nrf_spi_txd_set(p_spi,
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   21d2c:	6853      	ldr	r3, [r2, #4]
    nrf_spi_txd_set(p_spi,
   21d2e:	b183      	cbz	r3, 21d52 <spi_xfer+0x3e>
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   21d30:	6813      	ldr	r3, [r2, #0]
    nrf_spi_txd_set(p_spi,
   21d32:	781b      	ldrb	r3, [r3, #0]
#endif
}

NRF_STATIC_INLINE void nrf_spi_txd_set(NRF_SPI_Type * p_reg, uint8_t data)
{
    p_reg->TXD = data;
   21d34:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

    // TXD register is double buffered, so next byte to be transmitted can
    // be written immediately, if needed, i.e. if TX or RX transfer is to
    // be more that 1 byte long. Again - if there is something more in TX
    // buffer send it, otherwise use over-run character.
    if (p_xfer_desc->tx_length > 1)
   21d38:	6853      	ldr	r3, [r2, #4]
   21d3a:	2b01      	cmp	r3, #1
   21d3c:	d90b      	bls.n	21d56 <spi_xfer+0x42>
    {
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
   21d3e:	6813      	ldr	r3, [r2, #0]
   21d40:	785b      	ldrb	r3, [r3, #1]
   21d42:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    // For blocking mode (user handler not provided) wait here for READY
    // events (indicating that the byte from TXD register was transmitted
    // and a new incoming byte was moved to the RXD register) and continue
    // transaction until all requested bytes are transferred.
    // In non-blocking mode - IRQ service routine will do this stuff.
    if (p_cb->handler)
   21d46:	682b      	ldr	r3, [r5, #0]
   21d48:	b163      	cbz	r3, 21d64 <spi_xfer+0x50>
    p_reg->INTENSET = mask;
   21d4a:	2304      	movs	r3, #4
   21d4c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
        {
            nrf_gpio_pin_write(p_cb->ss_pin, 1);
        }
    }
}
   21d50:	bd38      	pop	{r3, r4, r5, pc}
    nrf_spi_txd_set(p_spi,
   21d52:	7feb      	ldrb	r3, [r5, #31]
   21d54:	e7ee      	b.n	21d34 <spi_xfer+0x20>
    else if (p_xfer_desc->rx_length > 1)
   21d56:	68d3      	ldr	r3, [r2, #12]
   21d58:	2b01      	cmp	r3, #1
   21d5a:	d9f4      	bls.n	21d46 <spi_xfer+0x32>
        nrf_spi_txd_set(p_spi, p_cb->orc);
   21d5c:	7feb      	ldrb	r3, [r5, #31]
    p_reg->TXD = data;
   21d5e:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
}
   21d62:	e7f0      	b.n	21d46 <spi_xfer+0x32>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21d64:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
   21d68:	2b00      	cmp	r3, #0
   21d6a:	d0fb      	beq.n	21d64 <spi_xfer+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21d6c:	2300      	movs	r3, #0
   21d6e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   21d72:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
   21d76:	4629      	mov	r1, r5
   21d78:	4620      	mov	r0, r4
   21d7a:	f007 ffac 	bl	29cd6 <transfer_byte>
   21d7e:	2800      	cmp	r0, #0
   21d80:	d1f0      	bne.n	21d64 <spi_xfer+0x50>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   21d82:	7fab      	ldrb	r3, [r5, #30]
   21d84:	2bff      	cmp	r3, #255	; 0xff
   21d86:	d0e3      	beq.n	21d50 <spi_xfer+0x3c>
    *p_pin = pin_number & 0x1F;
   21d88:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   21d8c:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21d8e:	2b01      	cmp	r3, #1
   21d90:	d006      	beq.n	21da0 <spi_xfer+0x8c>
        case 0: return NRF_P0;
   21d92:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   21d96:	2301      	movs	r3, #1
   21d98:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   21d9a:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
}
   21d9e:	e7d7      	b.n	21d50 <spi_xfer+0x3c>
        case 1: return NRF_P1;
   21da0:	4900      	ldr	r1, [pc, #0]	; (21da4 <spi_xfer+0x90>)
   21da2:	e7f8      	b.n	21d96 <spi_xfer+0x82>
   21da4:	50000300 	.word	0x50000300

00021da8 <nrfx_spi_init>:
{
   21da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21dac:	4606      	mov	r6, r0
   21dae:	460d      	mov	r5, r1
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   21db0:	7904      	ldrb	r4, [r0, #4]
    NRF_SPI_Type * p_spi = p_instance->p_reg;
   21db2:	6807      	ldr	r7, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   21db4:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   21db8:	491d      	ldr	r1, [pc, #116]	; (21e30 <nrfx_spi_init+0x88>)
   21dba:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   21dbe:	7f09      	ldrb	r1, [r1, #28]
   21dc0:	b111      	cbz	r1, 21dc8 <nrfx_spi_init+0x20>
        return err_code;
   21dc2:	481c      	ldr	r0, [pc, #112]	; (21e34 <nrfx_spi_init+0x8c>)
}
   21dc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    p_cb->handler = handler;
   21dc8:	f8df 8064 	ldr.w	r8, [pc, #100]	; 21e30 <nrfx_spi_init+0x88>
   21dcc:	ea4f 09c0 	mov.w	r9, r0, lsl #3
   21dd0:	eb08 01c0 	add.w	r1, r8, r0, lsl #3
   21dd4:	f848 2009 	str.w	r2, [r8, r9]
    p_cb->p_context = p_context;
   21dd8:	604b      	str	r3, [r1, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   21dda:	7beb      	ldrb	r3, [r5, #15]
   21ddc:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
    p_cb->ss_pin = p_config->ss_pin;
   21de0:	78eb      	ldrb	r3, [r5, #3]
   21de2:	778b      	strb	r3, [r1, #30]
    p_cb->orc = p_config->orc;
   21de4:	796b      	ldrb	r3, [r5, #5]
   21de6:	77cb      	strb	r3, [r1, #31]
    configure_pins(p_spi, p_config);
   21de8:	4629      	mov	r1, r5
   21dea:	4638      	mov	r0, r7
   21dec:	f7ff feee 	bl	21bcc <configure_pins>
    nrf_spi_frequency_set(p_spi, p_config->frequency);
   21df0:	68ab      	ldr	r3, [r5, #8]
}

NRF_STATIC_INLINE void nrf_spi_frequency_set(NRF_SPI_Type *      p_reg,
                                             nrf_spi_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   21df2:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
   21df6:	7b6a      	ldrb	r2, [r5, #13]
   21df8:	7b29      	ldrb	r1, [r5, #12]
   21dfa:	4638      	mov	r0, r7
   21dfc:	f007 ff56 	bl	29cac <nrf_spi_configure>
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   21e00:	2301      	movs	r3, #1
   21e02:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
    if (p_cb->handler)
   21e06:	f858 3009 	ldr.w	r3, [r8, r9]
   21e0a:	b123      	cbz	r3, 21e16 <nrfx_spi_init+0x6e>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   21e0c:	6830      	ldr	r0, [r6, #0]
   21e0e:	f340 3007 	sbfx	r0, r0, #12, #8
   21e12:	f004 f834 	bl	25e7e <arch_irq_enable>
    p_cb->transfer_in_progress = false;
   21e16:	4b06      	ldr	r3, [pc, #24]	; (21e30 <nrfx_spi_init+0x88>)
   21e18:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   21e1c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   21e20:	2100      	movs	r1, #0
   21e22:	7751      	strb	r1, [r2, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   21e24:	4613      	mov	r3, r2
   21e26:	2201      	movs	r2, #1
   21e28:	771a      	strb	r2, [r3, #28]
    return err_code;
   21e2a:	4803      	ldr	r0, [pc, #12]	; (21e38 <nrfx_spi_init+0x90>)
   21e2c:	e7ca      	b.n	21dc4 <nrfx_spi_init+0x1c>
   21e2e:	bf00      	nop
   21e30:	2000648c 	.word	0x2000648c
   21e34:	0bad0005 	.word	0x0bad0005
   21e38:	0bad0000 	.word	0x0bad0000

00021e3c <nrfx_spi_uninit>:
{
   21e3c:	b538      	push	{r3, r4, r5, lr}
    spi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   21e3e:	7904      	ldrb	r4, [r0, #4]
    NRF_SPI_Type * p_spi = p_instance->p_reg;
   21e40:	6805      	ldr	r5, [r0, #0]
    if (p_cb->handler)
   21e42:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   21e46:	4b35      	ldr	r3, [pc, #212]	; (21f1c <nrfx_spi_uninit+0xe0>)
   21e48:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
   21e4c:	b133      	cbz	r3, 21e5c <nrfx_spi_uninit+0x20>
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   21e4e:	f345 3007 	sbfx	r0, r5, #12, #8
   21e52:	f004 f819 	bl	25e88 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   21e56:	2304      	movs	r3, #4
   21e58:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Disabled << SPI_ENABLE_ENABLE_Pos);
   21e5c:	2300      	movs	r3, #0
   21e5e:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
    if (!p_cb->skip_gpio_cfg)
   21e62:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   21e66:	4b2d      	ldr	r3, [pc, #180]	; (21f1c <nrfx_spi_uninit+0xe0>)
   21e68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   21e6c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   21e70:	2b00      	cmp	r3, #0
   21e72:	d143      	bne.n	21efc <nrfx_spi_uninit+0xc0>
    return p_reg->PSEL.SCK;
   21e74:	f8d5 3508 	ldr.w	r3, [r5, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
   21e78:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   21e7c:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21e7e:	2b01      	cmp	r3, #1
   21e80:	d044      	beq.n	21f0c <nrfx_spi_uninit+0xd0>
        case 0: return NRF_P0;
   21e82:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   21e86:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   21e8a:	2202      	movs	r2, #2
   21e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return p_reg->PSEL.MISO;
   21e90:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
        if (miso_pin != NRF_SPI_PIN_NOT_CONNECTED)
   21e94:	f1b3 3fff 	cmp.w	r3, #4294967295
   21e98:	d00b      	beq.n	21eb2 <nrfx_spi_uninit+0x76>
    *p_pin = pin_number & 0x1F;
   21e9a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   21e9e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21ea0:	2b01      	cmp	r3, #1
   21ea2:	d035      	beq.n	21f10 <nrfx_spi_uninit+0xd4>
        case 0: return NRF_P0;
   21ea4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   21ea8:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   21eac:	2202      	movs	r2, #2
   21eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return p_reg->PSEL.MOSI;
   21eb2:	f8d5 350c 	ldr.w	r3, [r5, #1292]	; 0x50c
        if (mosi_pin != NRF_SPI_PIN_NOT_CONNECTED)
   21eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
   21eba:	d00b      	beq.n	21ed4 <nrfx_spi_uninit+0x98>
    *p_pin = pin_number & 0x1F;
   21ebc:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   21ec0:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21ec2:	2b01      	cmp	r3, #1
   21ec4:	d026      	beq.n	21f14 <nrfx_spi_uninit+0xd8>
        case 0: return NRF_P0;
   21ec6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   21eca:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   21ece:	2202      	movs	r2, #2
   21ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   21ed4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   21ed8:	4b10      	ldr	r3, [pc, #64]	; (21f1c <nrfx_spi_uninit+0xe0>)
   21eda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   21ede:	7f9b      	ldrb	r3, [r3, #30]
   21ee0:	2bff      	cmp	r3, #255	; 0xff
   21ee2:	d00b      	beq.n	21efc <nrfx_spi_uninit+0xc0>
    *p_pin = pin_number & 0x1F;
   21ee4:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   21ee8:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21eea:	2b01      	cmp	r3, #1
   21eec:	d014      	beq.n	21f18 <nrfx_spi_uninit+0xdc>
        case 0: return NRF_P0;
   21eee:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   21ef2:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   21ef6:	2202      	movs	r2, #2
   21ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   21efc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   21f00:	4b06      	ldr	r3, [pc, #24]	; (21f1c <nrfx_spi_uninit+0xe0>)
   21f02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   21f06:	2200      	movs	r2, #0
   21f08:	771a      	strb	r2, [r3, #28]
}
   21f0a:	bd38      	pop	{r3, r4, r5, pc}
        case 1: return NRF_P1;
   21f0c:	4904      	ldr	r1, [pc, #16]	; (21f20 <nrfx_spi_uninit+0xe4>)
   21f0e:	e7ba      	b.n	21e86 <nrfx_spi_uninit+0x4a>
   21f10:	4903      	ldr	r1, [pc, #12]	; (21f20 <nrfx_spi_uninit+0xe4>)
   21f12:	e7c9      	b.n	21ea8 <nrfx_spi_uninit+0x6c>
   21f14:	4902      	ldr	r1, [pc, #8]	; (21f20 <nrfx_spi_uninit+0xe4>)
   21f16:	e7d8      	b.n	21eca <nrfx_spi_uninit+0x8e>
   21f18:	4901      	ldr	r1, [pc, #4]	; (21f20 <nrfx_spi_uninit+0xe4>)
   21f1a:	e7ea      	b.n	21ef2 <nrfx_spi_uninit+0xb6>
   21f1c:	2000648c 	.word	0x2000648c
   21f20:	50000300 	.word	0x50000300

00021f24 <nrfx_spi_xfer>:

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   21f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   21f28:	f890 c004 	ldrb.w	ip, [r0, #4]
   21f2c:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
   21f30:	4d21      	ldr	r5, [pc, #132]	; (21fb8 <nrfx_spi_xfer+0x94>)
   21f32:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   21f36:	7f6b      	ldrb	r3, [r5, #29]
   21f38:	2b00      	cmp	r3, #0
   21f3a:	d13a      	bne.n	21fb2 <nrfx_spi_xfer+0x8e>
   21f3c:	4604      	mov	r4, r0
   21f3e:	468e      	mov	lr, r1
   21f40:	4617      	mov	r7, r2
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
   21f42:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
   21f46:	4a1c      	ldr	r2, [pc, #112]	; (21fb8 <nrfx_spi_xfer+0x94>)
   21f48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   21f4c:	b10b      	cbz	r3, 21f52 <nrfx_spi_xfer+0x2e>
        {
            p_cb->transfer_in_progress = true;
   21f4e:	2201      	movs	r2, #1
   21f50:	776a      	strb	r2, [r5, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   21f52:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
   21f56:	4e18      	ldr	r6, [pc, #96]	; (21fb8 <nrfx_spi_xfer+0x94>)
   21f58:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
   21f5c:	f106 080c 	add.w	r8, r6, #12
   21f60:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   21f64:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
    p_cb->abort = false;
   21f68:	2300      	movs	r3, #0
   21f6a:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   21f6e:	7fb3      	ldrb	r3, [r6, #30]
   21f70:	2bff      	cmp	r3, #255	; 0xff
   21f72:	d00a      	beq.n	21f8a <nrfx_spi_xfer+0x66>
    *p_pin = pin_number & 0x1F;
   21f74:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
   21f78:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21f7a:	2b01      	cmp	r3, #1
   21f7c:	d010      	beq.n	21fa0 <nrfx_spi_xfer+0x7c>
        case 0: return NRF_P0;
   21f7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   21f82:	2301      	movs	r3, #1
   21f84:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   21f86:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    {
        nrf_gpio_pin_write(p_cb->ss_pin, 0);
    }
    if (flags)
   21f8a:	b15f      	cbz	r7, 21fa4 <nrfx_spi_xfer+0x80>
    {
        p_cb->transfer_in_progress = false;
   21f8c:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
   21f90:	4b09      	ldr	r3, [pc, #36]	; (21fb8 <nrfx_spi_xfer+0x94>)
   21f92:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
   21f96:	2200      	movs	r2, #0
   21f98:	775a      	strb	r2, [r3, #29]
        err_code = NRFX_ERROR_NOT_SUPPORTED;
   21f9a:	4808      	ldr	r0, [pc, #32]	; (21fbc <nrfx_spi_xfer+0x98>)
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   21f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        case 1: return NRF_P1;
   21fa0:	4a07      	ldr	r2, [pc, #28]	; (21fc0 <nrfx_spi_xfer+0x9c>)
   21fa2:	e7ee      	b.n	21f82 <nrfx_spi_xfer+0x5e>
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
   21fa4:	4672      	mov	r2, lr
   21fa6:	4629      	mov	r1, r5
   21fa8:	6820      	ldr	r0, [r4, #0]
   21faa:	f7ff feb3 	bl	21d14 <spi_xfer>
    nrfx_err_t err_code = NRFX_SUCCESS;
   21fae:	4805      	ldr	r0, [pc, #20]	; (21fc4 <nrfx_spi_xfer+0xa0>)
   21fb0:	e7f4      	b.n	21f9c <nrfx_spi_xfer+0x78>
        return err_code;
   21fb2:	4805      	ldr	r0, [pc, #20]	; (21fc8 <nrfx_spi_xfer+0xa4>)
   21fb4:	e7f2      	b.n	21f9c <nrfx_spi_xfer+0x78>
   21fb6:	bf00      	nop
   21fb8:	2000648c 	.word	0x2000648c
   21fbc:	0bad0003 	.word	0x0bad0003
   21fc0:	50000300 	.word	0x50000300
   21fc4:	0bad0000 	.word	0x0bad0000
   21fc8:	0bad000b 	.word	0x0bad000b

00021fcc <nrfx_spi_0_irq_handler>:
    }
}

#if NRFX_CHECK(NRFX_SPI0_ENABLED)
void nrfx_spi_0_irq_handler(void)
{
   21fcc:	b508      	push	{r3, lr}
    irq_handler(NRF_SPI0, &m_cb[NRFX_SPI0_INST_IDX]);
   21fce:	4902      	ldr	r1, [pc, #8]	; (21fd8 <nrfx_spi_0_irq_handler+0xc>)
   21fd0:	4802      	ldr	r0, [pc, #8]	; (21fdc <nrfx_spi_0_irq_handler+0x10>)
   21fd2:	f007 febb 	bl	29d4c <irq_handler>
}
   21fd6:	bd08      	pop	{r3, pc}
   21fd8:	2000648c 	.word	0x2000648c
   21fdc:	40003000 	.word	0x40003000

00021fe0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   21fe0:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   21fe2:	4c11      	ldr	r4, [pc, #68]	; (22028 <_DoInit+0x48>)
   21fe4:	2303      	movs	r3, #3
   21fe6:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   21fe8:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   21fea:	4a10      	ldr	r2, [pc, #64]	; (2202c <_DoInit+0x4c>)
   21fec:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   21fee:	4b10      	ldr	r3, [pc, #64]	; (22030 <_DoInit+0x50>)
   21ff0:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   21ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   21ff6:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   21ff8:	2300      	movs	r3, #0
   21ffa:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   21ffc:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   21ffe:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   22000:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   22002:	4a0c      	ldr	r2, [pc, #48]	; (22034 <_DoInit+0x54>)
   22004:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   22006:	2210      	movs	r2, #16
   22008:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   2200a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   2200c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   2200e:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   22010:	4909      	ldr	r1, [pc, #36]	; (22038 <_DoInit+0x58>)
   22012:	1de0      	adds	r0, r4, #7
   22014:	f003 ffb3 	bl	25f7e <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   22018:	4908      	ldr	r1, [pc, #32]	; (2203c <_DoInit+0x5c>)
   2201a:	4620      	mov	r0, r4
   2201c:	f003 ffaf 	bl	25f7e <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   22020:	2320      	movs	r3, #32
   22022:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   22024:	bd10      	pop	{r4, pc}
   22026:	bf00      	nop
   22028:	200068c4 	.word	0x200068c4
   2202c:	0002daf0 	.word	0x0002daf0
   22030:	200064c4 	.word	0x200064c4
   22034:	200064b4 	.word	0x200064b4
   22038:	0002dafc 	.word	0x0002dafc
   2203c:	0002db00 	.word	0x0002db00

00022040 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   22040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22044:	4604      	mov	r4, r0
   22046:	460e      	mov	r6, r1
   22048:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   2204a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   2204e:	4a2d      	ldr	r2, [pc, #180]	; (22104 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   22050:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   22054:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   22056:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   22058:	42bb      	cmp	r3, r7
   2205a:	d84c      	bhi.n	220f6 <SEGGER_RTT_WriteSkipNoLock+0xb6>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   2205c:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   22060:	4a28      	ldr	r2, [pc, #160]	; (22104 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   22062:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   22066:	f8d2 8020 	ldr.w	r8, [r2, #32]
   2206a:	eba8 0907 	sub.w	r9, r8, r7
   2206e:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   22072:	4295      	cmp	r5, r2
   22074:	d904      	bls.n	22080 <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
   22076:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   22078:	429d      	cmp	r5, r3
   2207a:	d916      	bls.n	220aa <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
   2207c:	2000      	movs	r0, #0
   2207e:	e03f      	b.n	22100 <SEGGER_RTT_WriteSkipNoLock+0xc0>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   22080:	f8df 8080 	ldr.w	r8, [pc, #128]	; 22104 <SEGGER_RTT_WriteSkipNoLock+0xc4>
   22084:	1c63      	adds	r3, r4, #1
   22086:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2208a:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   2208e:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   22090:	462a      	mov	r2, r5
   22092:	4631      	mov	r1, r6
   22094:	4438      	add	r0, r7
   22096:	f003 ffc6 	bl	26026 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
   2209a:	442f      	add	r7, r5
   2209c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   220a0:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
   220a4:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
   220a6:	2001      	movs	r0, #1
   220a8:	e02a      	b.n	22100 <SEGGER_RTT_WriteSkipNoLock+0xc0>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   220aa:	1c43      	adds	r3, r0, #1
   220ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   220b0:	4a14      	ldr	r2, [pc, #80]	; (22104 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   220b2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   220b6:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   220b8:	464a      	mov	r2, r9
   220ba:	4631      	mov	r1, r6
   220bc:	4438      	add	r0, r7
   220be:	f003 ffb2 	bl	26026 <memcpy>
      NumBytes -= Rem;
   220c2:	eba7 0808 	sub.w	r8, r7, r8
      if (NumBytes) {
   220c6:	eb18 0505 	adds.w	r5, r8, r5
   220ca:	d107      	bne.n	220dc <SEGGER_RTT_WriteSkipNoLock+0x9c>
      pRing->WrOff = NumBytes;
   220cc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   220d0:	4b0c      	ldr	r3, [pc, #48]	; (22104 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   220d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   220d6:	625d      	str	r5, [r3, #36]	; 0x24
      return 1;
   220d8:	2001      	movs	r0, #1
   220da:	e011      	b.n	22100 <SEGGER_RTT_WriteSkipNoLock+0xc0>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
   220dc:	1c63      	adds	r3, r4, #1
   220de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   220e2:	4a08      	ldr	r2, [pc, #32]	; (22104 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   220e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        memcpy((void*)pDst, pData + Rem, NumBytes);
   220e8:	462a      	mov	r2, r5
   220ea:	eb06 0109 	add.w	r1, r6, r9
   220ee:	6858      	ldr	r0, [r3, #4]
   220f0:	f003 ff99 	bl	26026 <memcpy>
   220f4:	e7ea      	b.n	220cc <SEGGER_RTT_WriteSkipNoLock+0x8c>
    Avail = RdOff - WrOff - 1u;
   220f6:	1bdb      	subs	r3, r3, r7
   220f8:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   220fa:	42ab      	cmp	r3, r5
   220fc:	d2c0      	bcs.n	22080 <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
   220fe:	2000      	movs	r0, #0
}
   22100:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22104:	200068c4 	.word	0x200068c4

00022108 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   22108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2210a:	460f      	mov	r7, r1
   2210c:	4616      	mov	r6, r2
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   2210e:	1c45      	adds	r5, r0, #1
   22110:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   22114:	4b16      	ldr	r3, [pc, #88]	; (22170 <SEGGER_RTT_WriteNoLock+0x68>)
   22116:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   2211a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   2211e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   22122:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   22124:	2c01      	cmp	r4, #1
   22126:	d011      	beq.n	2214c <SEGGER_RTT_WriteNoLock+0x44>
   22128:	2c02      	cmp	r4, #2
   2212a:	d01c      	beq.n	22166 <SEGGER_RTT_WriteNoLock+0x5e>
   2212c:	b114      	cbz	r4, 22134 <SEGGER_RTT_WriteNoLock+0x2c>
   2212e:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
   22130:	4620      	mov	r0, r4
   22132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
   22134:	4628      	mov	r0, r5
   22136:	f007 fe18 	bl	29d6a <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   2213a:	4286      	cmp	r6, r0
   2213c:	d8f8      	bhi.n	22130 <SEGGER_RTT_WriteNoLock+0x28>
      _WriteNoCheck(pRing, pData, NumBytes);
   2213e:	4632      	mov	r2, r6
   22140:	4639      	mov	r1, r7
   22142:	4628      	mov	r0, r5
   22144:	f007 fe1d 	bl	29d82 <_WriteNoCheck>
      Status = NumBytes;
   22148:	4634      	mov	r4, r6
   2214a:	e7f1      	b.n	22130 <SEGGER_RTT_WriteNoLock+0x28>
    Avail = _GetAvailWriteSpace(pRing);
   2214c:	4628      	mov	r0, r5
   2214e:	f007 fe0c 	bl	29d6a <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   22152:	4634      	mov	r4, r6
   22154:	4286      	cmp	r6, r0
   22156:	bf28      	it	cs
   22158:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   2215a:	4622      	mov	r2, r4
   2215c:	4639      	mov	r1, r7
   2215e:	4628      	mov	r0, r5
   22160:	f007 fe0f 	bl	29d82 <_WriteNoCheck>
    break;
   22164:	e7e4      	b.n	22130 <SEGGER_RTT_WriteNoLock+0x28>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   22166:	4628      	mov	r0, r5
   22168:	f007 fe2d 	bl	29dc6 <_WriteBlocking>
   2216c:	4604      	mov	r4, r0
    break;
   2216e:	e7df      	b.n	22130 <SEGGER_RTT_WriteNoLock+0x28>
   22170:	200068c4 	.word	0x200068c4

00022174 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   22174:	4b06      	ldr	r3, [pc, #24]	; (22190 <SEGGER_RTT_HasDataUp+0x1c>)
   22176:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   2217a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   2217e:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
   22180:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   22184:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   22188:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   2218a:	1a80      	subs	r0, r0, r2
   2218c:	4770      	bx	lr
   2218e:	bf00      	nop
   22190:	200068c4 	.word	0x200068c4

00022194 <zephyr_rtt_mutex_lock>:
}

#ifdef CONFIG_MULTITHREADING

void zephyr_rtt_mutex_lock(void)
{
   22194:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   22196:	f04f 32ff 	mov.w	r2, #4294967295
   2219a:	f04f 33ff 	mov.w	r3, #4294967295
   2219e:	4802      	ldr	r0, [pc, #8]	; (221a8 <zephyr_rtt_mutex_lock+0x14>)
   221a0:	f000 fbe8 	bl	22974 <z_impl_k_mutex_lock>
	k_mutex_lock(&rtt_term_mutex, K_FOREVER);
}
   221a4:	bd08      	pop	{r3, pc}
   221a6:	bf00      	nop
   221a8:	20000a04 	.word	0x20000a04

000221ac <zephyr_rtt_mutex_unlock>:

void zephyr_rtt_mutex_unlock(void)
{
   221ac:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   221ae:	4802      	ldr	r0, [pc, #8]	; (221b8 <zephyr_rtt_mutex_unlock+0xc>)
   221b0:	f000 fc64 	bl	22a7c <z_impl_k_mutex_unlock>
	k_mutex_unlock(&rtt_term_mutex);
}
   221b4:	bd08      	pop	{r3, pc}
   221b6:	bf00      	nop
   221b8:	20000a04 	.word	0x20000a04

000221bc <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   221bc:	4b03      	ldr	r3, [pc, #12]	; (221cc <z_device_state_init+0x10>)

	while (dev < __device_end) {
   221be:	e000      	b.n	221c2 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
   221c0:	3318      	adds	r3, #24
	while (dev < __device_end) {
   221c2:	4a03      	ldr	r2, [pc, #12]	; (221d0 <z_device_state_init+0x14>)
   221c4:	4293      	cmp	r3, r2
   221c6:	d3fb      	bcc.n	221c0 <z_device_state_init+0x4>
	}
}
   221c8:	4770      	bx	lr
   221ca:	bf00      	nop
   221cc:	0002aeac 	.word	0x0002aeac
   221d0:	0002af54 	.word	0x0002af54

000221d4 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
   221d4:	2804      	cmp	r0, #4
   221d6:	d80c      	bhi.n	221f2 <reason_to_str+0x1e>
   221d8:	e8df f000 	tbb	[pc, r0]
   221dc:	07050d03 	.word	0x07050d03
   221e0:	09          	.byte	0x09
   221e1:	00          	.byte	0x00
   221e2:	4806      	ldr	r0, [pc, #24]	; (221fc <reason_to_str+0x28>)
   221e4:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
   221e6:	4806      	ldr	r0, [pc, #24]	; (22200 <reason_to_str+0x2c>)
   221e8:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
   221ea:	4806      	ldr	r0, [pc, #24]	; (22204 <reason_to_str+0x30>)
   221ec:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
   221ee:	4806      	ldr	r0, [pc, #24]	; (22208 <reason_to_str+0x34>)
   221f0:	4770      	bx	lr
	default:
		return "Unknown error";
   221f2:	4806      	ldr	r0, [pc, #24]	; (2220c <reason_to_str+0x38>)
   221f4:	4770      	bx	lr
		return "Unhandled interrupt";
   221f6:	4806      	ldr	r0, [pc, #24]	; (22210 <reason_to_str+0x3c>)
	}
}
   221f8:	4770      	bx	lr
   221fa:	bf00      	nop
   221fc:	0002db0c 	.word	0x0002db0c
   22200:	0002db30 	.word	0x0002db30
   22204:	0002db40 	.word	0x0002db40
   22208:	0002db4c 	.word	0x0002db4c
   2220c:	0002db5c 	.word	0x0002db5c
   22210:	0002db1c 	.word	0x0002db1c

00022214 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   22214:	b130      	cbz	r0, 22224 <thread_name_get+0x10>
{
   22216:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   22218:	f007 feff 	bl	2a01a <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   2221c:	b120      	cbz	r0, 22228 <thread_name_get+0x14>
   2221e:	7803      	ldrb	r3, [r0, #0]
   22220:	b123      	cbz	r3, 2222c <thread_name_get+0x18>
}
   22222:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
   22224:	4802      	ldr	r0, [pc, #8]	; (22230 <thread_name_get+0x1c>)
}
   22226:	4770      	bx	lr
		thread_name = "unknown";
   22228:	4801      	ldr	r0, [pc, #4]	; (22230 <thread_name_get+0x1c>)
   2222a:	e7fa      	b.n	22222 <thread_name_get+0xe>
   2222c:	4800      	ldr	r0, [pc, #0]	; (22230 <thread_name_get+0x1c>)
	return thread_name;
   2222e:	e7f8      	b.n	22222 <thread_name_get+0xe>
   22230:	0002db6c 	.word	0x0002db6c

00022234 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   22234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22238:	b089      	sub	sp, #36	; 0x24
   2223a:	af00      	add	r7, sp, #0
   2223c:	4606      	mov	r6, r0
   2223e:	460c      	mov	r4, r1
   22240:	f04f 0340 	mov.w	r3, #64	; 0x40
   22244:	f3ef 8811 	mrs	r8, BASEPRI
   22248:	f383 8812 	msr	BASEPRI_MAX, r3
   2224c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   22250:	f001 fa4c 	bl	236ec <z_impl_z_current_get>
   22254:	4605      	mov	r5, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   22256:	4630      	mov	r0, r6
   22258:	f7ff ffbc 	bl	221d4 <reason_to_str>
   2225c:	46e9      	mov	r9, sp
   2225e:	2301      	movs	r3, #1
   22260:	713b      	strb	r3, [r7, #4]
   22262:	2303      	movs	r3, #3
   22264:	717b      	strb	r3, [r7, #5]
   22266:	b08a      	sub	sp, #40	; 0x28
   22268:	46ec      	mov	ip, sp
   2226a:	f11c 0210 	adds.w	r2, ip, #16
   2226e:	d021      	beq.n	222b4 <z_fatal_error+0x80>
   22270:	f04f 0e16 	mov.w	lr, #22
   22274:	b152      	cbz	r2, 2228c <z_fatal_error+0x58>
   22276:	4673      	mov	r3, lr
   22278:	f1be 0f04 	cmp.w	lr, #4
   2227c:	dd02      	ble.n	22284 <z_fatal_error+0x50>
   2227e:	4976      	ldr	r1, [pc, #472]	; (22458 <z_fatal_error+0x224>)
   22280:	f8cc 1014 	str.w	r1, [ip, #20]
   22284:	2b08      	cmp	r3, #8
   22286:	dd01      	ble.n	2228c <z_fatal_error+0x58>
   22288:	f8cc 6018 	str.w	r6, [ip, #24]
   2228c:	2301      	movs	r3, #1
   2228e:	703b      	strb	r3, [r7, #0]
   22290:	2303      	movs	r3, #3
   22292:	707b      	strb	r3, [r7, #1]
   22294:	b1da      	cbz	r2, 222ce <z_fatal_error+0x9a>
   22296:	4673      	mov	r3, lr
   22298:	f1be 0f0c 	cmp.w	lr, #12
   2229c:	dd01      	ble.n	222a2 <z_fatal_error+0x6e>
   2229e:	f8cc 001c 	str.w	r0, [ip, #28]
   222a2:	2b10      	cmp	r3, #16
   222a4:	dd02      	ble.n	222ac <z_fatal_error+0x78>
   222a6:	2300      	movs	r3, #0
   222a8:	f8cc 3020 	str.w	r3, [ip, #32]
   222ac:	f10c 0324 	add.w	r3, ip, #36	; 0x24
   222b0:	2100      	movs	r1, #0
   222b2:	e00a      	b.n	222ca <z_fatal_error+0x96>
   222b4:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   222b8:	e7dc      	b.n	22274 <z_fatal_error+0x40>
   222ba:	f101 0020 	add.w	r0, r1, #32
   222be:	4438      	add	r0, r7
   222c0:	f810 0c20 	ldrb.w	r0, [r0, #-32]
   222c4:	f803 0b01 	strb.w	r0, [r3], #1
   222c8:	3101      	adds	r1, #1
   222ca:	2901      	cmp	r1, #1
   222cc:	d9f5      	bls.n	222ba <z_fatal_error+0x86>
   222ce:	f1be 0f15 	cmp.w	lr, #21
   222d2:	dd53      	ble.n	2237c <z_fatal_error+0x148>
   222d4:	2316      	movs	r3, #22
   222d6:	b14a      	cbz	r2, 222ec <z_fatal_error+0xb8>
   222d8:	2105      	movs	r1, #5
   222da:	7139      	strb	r1, [r7, #4]
   222dc:	2100      	movs	r1, #0
   222de:	7179      	strb	r1, [r7, #5]
   222e0:	71b9      	strb	r1, [r7, #6]
   222e2:	2101      	movs	r1, #1
   222e4:	71f9      	strb	r1, [r7, #7]
   222e6:	6878      	ldr	r0, [r7, #4]
   222e8:	f8cc 0010 	str.w	r0, [ip, #16]
   222ec:	2100      	movs	r1, #0
   222ee:	f36f 0100 	bfc	r1, #0, #1
   222f2:	f36f 0141 	bfc	r1, #1, #1
   222f6:	f36f 0182 	bfc	r1, #2, #1
   222fa:	f36f 01c5 	bfc	r1, #3, #3
   222fe:	2001      	movs	r0, #1
   22300:	f360 1188 	bfi	r1, r0, #6, #3
   22304:	f3c3 0309 	ubfx	r3, r3, #0, #10
   22308:	f363 2152 	bfi	r1, r3, #9, #10
   2230c:	f36f 41de 	bfc	r1, #19, #12
   22310:	f36f 71df 	bfc	r1, #31, #1
   22314:	2300      	movs	r3, #0
   22316:	4851      	ldr	r0, [pc, #324]	; (2245c <z_fatal_error+0x228>)
   22318:	f003 fa4b 	bl	257b2 <z_impl_z_log_msg_static_create>
   2231c:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   2231e:	b11c      	cbz	r4, 22328 <z_fatal_error+0xf4>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   22320:	69e3      	ldr	r3, [r4, #28]
   22322:	f3c3 0308 	ubfx	r3, r3, #0, #9
   22326:	bb63      	cbnz	r3, 22382 <z_fatal_error+0x14e>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   22328:	4628      	mov	r0, r5
   2232a:	f7ff ff73 	bl	22214 <thread_name_get>
   2232e:	46e9      	mov	r9, sp
   22330:	2301      	movs	r3, #1
   22332:	713b      	strb	r3, [r7, #4]
   22334:	2303      	movs	r3, #3
   22336:	717b      	strb	r3, [r7, #5]
   22338:	b08a      	sub	sp, #40	; 0x28
   2233a:	46ec      	mov	ip, sp
   2233c:	f11c 0210 	adds.w	r2, ip, #16
   22340:	d042      	beq.n	223c8 <z_fatal_error+0x194>
   22342:	f04f 0e12 	mov.w	lr, #18
   22346:	b152      	cbz	r2, 2235e <z_fatal_error+0x12a>
   22348:	4673      	mov	r3, lr
   2234a:	f1be 0f04 	cmp.w	lr, #4
   2234e:	dd02      	ble.n	22356 <z_fatal_error+0x122>
   22350:	4943      	ldr	r1, [pc, #268]	; (22460 <z_fatal_error+0x22c>)
   22352:	f8cc 1014 	str.w	r1, [ip, #20]
   22356:	2b08      	cmp	r3, #8
   22358:	dd01      	ble.n	2235e <z_fatal_error+0x12a>
   2235a:	f8cc 5018 	str.w	r5, [ip, #24]
   2235e:	2301      	movs	r3, #1
   22360:	703b      	strb	r3, [r7, #0]
   22362:	2303      	movs	r3, #3
   22364:	707b      	strb	r3, [r7, #1]
   22366:	2a00      	cmp	r2, #0
   22368:	d03b      	beq.n	223e2 <z_fatal_error+0x1ae>
   2236a:	f1be 0f0c 	cmp.w	lr, #12
   2236e:	dd01      	ble.n	22374 <z_fatal_error+0x140>
   22370:	f8cc 001c 	str.w	r0, [ip, #28]
   22374:	f10c 0320 	add.w	r3, ip, #32
   22378:	2100      	movs	r1, #0
   2237a:	e030      	b.n	223de <z_fatal_error+0x1aa>
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   2237c:	f06f 031b 	mvn.w	r3, #27
   22380:	e7a9      	b.n	222d6 <z_fatal_error+0xa2>
		LOG_ERR("Fault during interrupt handling\n");
   22382:	4b38      	ldr	r3, [pc, #224]	; (22464 <z_fatal_error+0x230>)
   22384:	61fb      	str	r3, [r7, #28]
   22386:	2302      	movs	r3, #2
   22388:	713b      	strb	r3, [r7, #4]
   2238a:	2300      	movs	r3, #0
   2238c:	717b      	strb	r3, [r7, #5]
   2238e:	71bb      	strb	r3, [r7, #6]
   22390:	71fb      	strb	r3, [r7, #7]
   22392:	687a      	ldr	r2, [r7, #4]
   22394:	61ba      	str	r2, [r7, #24]
   22396:	4619      	mov	r1, r3
   22398:	f363 0100 	bfi	r1, r3, #0, #1
   2239c:	f363 0141 	bfi	r1, r3, #1, #1
   223a0:	f363 0182 	bfi	r1, r3, #2, #1
   223a4:	f363 01c5 	bfi	r1, r3, #3, #3
   223a8:	2201      	movs	r2, #1
   223aa:	f362 1188 	bfi	r1, r2, #6, #3
   223ae:	2208      	movs	r2, #8
   223b0:	f362 2152 	bfi	r1, r2, #9, #10
   223b4:	f363 41de 	bfi	r1, r3, #19, #12
   223b8:	f363 71df 	bfi	r1, r3, #31, #1
   223bc:	f107 0218 	add.w	r2, r7, #24
   223c0:	4826      	ldr	r0, [pc, #152]	; (2245c <z_fatal_error+0x228>)
   223c2:	f003 f9f6 	bl	257b2 <z_impl_z_log_msg_static_create>
   223c6:	e7af      	b.n	22328 <z_fatal_error+0xf4>
	LOG_ERR("Current thread: %p (%s)", thread,
   223c8:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   223cc:	e7bb      	b.n	22346 <z_fatal_error+0x112>
   223ce:	f101 0020 	add.w	r0, r1, #32
   223d2:	4438      	add	r0, r7
   223d4:	f810 0c20 	ldrb.w	r0, [r0, #-32]
   223d8:	f803 0b01 	strb.w	r0, [r3], #1
   223dc:	3101      	adds	r1, #1
   223de:	2901      	cmp	r1, #1
   223e0:	d9f5      	bls.n	223ce <z_fatal_error+0x19a>
   223e2:	f1be 0f11 	cmp.w	lr, #17
   223e6:	dd33      	ble.n	22450 <z_fatal_error+0x21c>
   223e8:	2312      	movs	r3, #18
   223ea:	b14a      	cbz	r2, 22400 <z_fatal_error+0x1cc>
   223ec:	2104      	movs	r1, #4
   223ee:	7139      	strb	r1, [r7, #4]
   223f0:	2100      	movs	r1, #0
   223f2:	7179      	strb	r1, [r7, #5]
   223f4:	71b9      	strb	r1, [r7, #6]
   223f6:	2101      	movs	r1, #1
   223f8:	71f9      	strb	r1, [r7, #7]
   223fa:	6878      	ldr	r0, [r7, #4]
   223fc:	f8cc 0010 	str.w	r0, [ip, #16]
   22400:	2100      	movs	r1, #0
   22402:	f36f 0100 	bfc	r1, #0, #1
   22406:	f36f 0141 	bfc	r1, #1, #1
   2240a:	f36f 0182 	bfc	r1, #2, #1
   2240e:	f36f 01c5 	bfc	r1, #3, #3
   22412:	2001      	movs	r0, #1
   22414:	f360 1188 	bfi	r1, r0, #6, #3
   22418:	f3c3 0309 	ubfx	r3, r3, #0, #10
   2241c:	f363 2152 	bfi	r1, r3, #9, #10
   22420:	f36f 41de 	bfc	r1, #19, #12
   22424:	f36f 71df 	bfc	r1, #31, #1
   22428:	2300      	movs	r3, #0
   2242a:	480c      	ldr	r0, [pc, #48]	; (2245c <z_fatal_error+0x228>)
   2242c:	f003 f9c1 	bl	257b2 <z_impl_z_log_msg_static_create>
   22430:	46cd      	mov	sp, r9

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   22432:	4621      	mov	r1, r4
   22434:	4630      	mov	r0, r6
   22436:	f7fd fe97 	bl	20168 <k_sys_fatal_error_handler>
	__asm__ volatile(
   2243a:	f388 8811 	msr	BASEPRI, r8
   2243e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   22442:	4628      	mov	r0, r5
   22444:	f7f3 fc4c 	bl	15ce0 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   22448:	3724      	adds	r7, #36	; 0x24
   2244a:	46bd      	mov	sp, r7
   2244c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_ERR("Current thread: %p (%s)", thread,
   22450:	f06f 031b 	mvn.w	r3, #27
   22454:	e7c9      	b.n	223ea <z_fatal_error+0x1b6>
   22456:	bf00      	nop
   22458:	0002db74 	.word	0x0002db74
   2245c:	0002b20c 	.word	0x0002b20c
   22460:	0002dbc0 	.word	0x0002dbc0
   22464:	0002db9c 	.word	0x0002db9c

00022468 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
   22468:	b570      	push	{r4, r5, r6, lr}
   2246a:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2246c:	4b11      	ldr	r3, [pc, #68]	; (224b4 <z_sys_init_run_level+0x4c>)
   2246e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   22472:	e009      	b.n	22488 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   22474:	4240      	negs	r0, r0
   22476:	e017      	b.n	224a8 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   22478:	68eb      	ldr	r3, [r5, #12]
   2247a:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   2247c:	68ea      	ldr	r2, [r5, #12]
   2247e:	7853      	ldrb	r3, [r2, #1]
   22480:	f043 0301 	orr.w	r3, r3, #1
   22484:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   22486:	3408      	adds	r4, #8
   22488:	1c73      	adds	r3, r6, #1
   2248a:	4a0a      	ldr	r2, [pc, #40]	; (224b4 <z_sys_init_run_level+0x4c>)
   2248c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   22490:	42a3      	cmp	r3, r4
   22492:	d90d      	bls.n	224b0 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   22494:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   22496:	6823      	ldr	r3, [r4, #0]
   22498:	4628      	mov	r0, r5
   2249a:	4798      	blx	r3
		if (dev != NULL) {
   2249c:	2d00      	cmp	r5, #0
   2249e:	d0f2      	beq.n	22486 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   224a0:	2800      	cmp	r0, #0
   224a2:	d0eb      	beq.n	2247c <z_sys_init_run_level+0x14>
				if (rc < 0) {
   224a4:	2800      	cmp	r0, #0
   224a6:	dbe5      	blt.n	22474 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   224a8:	28ff      	cmp	r0, #255	; 0xff
   224aa:	dde5      	ble.n	22478 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   224ac:	20ff      	movs	r0, #255	; 0xff
   224ae:	e7e3      	b.n	22478 <z_sys_init_run_level+0x10>
		}
	}
}
   224b0:	bd70      	pop	{r4, r5, r6, pc}
   224b2:	bf00      	nop
   224b4:	0002dbe8 	.word	0x0002dbe8

000224b8 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   224b8:	b510      	push	{r4, lr}
   224ba:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   224bc:	23b8      	movs	r3, #184	; 0xb8
   224be:	4c10      	ldr	r4, [pc, #64]	; (22500 <init_idle_thread+0x48>)
   224c0:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
   224c4:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   224c8:	4b0e      	ldr	r3, [pc, #56]	; (22504 <init_idle_thread+0x4c>)
   224ca:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
	z_setup_new_thread(thread, stack,
   224ce:	4a0e      	ldr	r2, [pc, #56]	; (22508 <init_idle_thread+0x50>)
   224d0:	9205      	str	r2, [sp, #20]
   224d2:	2201      	movs	r2, #1
   224d4:	9204      	str	r2, [sp, #16]
   224d6:	220f      	movs	r2, #15
   224d8:	9203      	str	r2, [sp, #12]
   224da:	2200      	movs	r2, #0
   224dc:	9202      	str	r2, [sp, #8]
   224de:	9201      	str	r2, [sp, #4]
   224e0:	9300      	str	r3, [sp, #0]
   224e2:	4b0a      	ldr	r3, [pc, #40]	; (2250c <init_idle_thread+0x54>)
   224e4:	f44f 72a0 	mov.w	r2, #320	; 0x140
   224e8:	4909      	ldr	r1, [pc, #36]	; (22510 <init_idle_thread+0x58>)
   224ea:	eb01 11cc 	add.w	r1, r1, ip, lsl #7
   224ee:	4620      	mov	r0, r4
   224f0:	f000 f974 	bl	227dc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   224f4:	7b63      	ldrb	r3, [r4, #13]
   224f6:	f023 0304 	bic.w	r3, r3, #4
   224fa:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   224fc:	b006      	add	sp, #24
   224fe:	bd10      	pop	{r4, pc}
   22500:	20005380 	.word	0x20005380
   22504:	2000696c 	.word	0x2000696c
   22508:	0002dbd8 	.word	0x0002dbd8
   2250c:	00022939 	.word	0x00022939
   22510:	20008fc0 	.word	0x20008fc0

00022514 <bg_thread_main>:
{
   22514:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   22516:	4b0a      	ldr	r3, [pc, #40]	; (22540 <bg_thread_main+0x2c>)
   22518:	2201      	movs	r2, #1
   2251a:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   2251c:	2003      	movs	r0, #3
   2251e:	f7ff ffa3 	bl	22468 <z_sys_init_run_level>
	boot_banner();
   22522:	f001 fc05 	bl	23d30 <boot_banner>
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   22526:	2004      	movs	r0, #4
   22528:	f7ff ff9e 	bl	22468 <z_sys_init_run_level>
	z_init_static_threads();
   2252c:	f000 f9ba 	bl	228a4 <z_init_static_threads>
	(void)main();
   22530:	f7ef fae6 	bl	11b00 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   22534:	4a03      	ldr	r2, [pc, #12]	; (22544 <bg_thread_main+0x30>)
   22536:	7b13      	ldrb	r3, [r2, #12]
   22538:	f023 0301 	bic.w	r3, r3, #1
   2253c:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   2253e:	bd08      	pop	{r3, pc}
   22540:	200069ba 	.word	0x200069ba
   22544:	20005438 	.word	0x20005438

00022548 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   22548:	b508      	push	{r3, lr}
   2254a:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   2254c:	4a01      	ldr	r2, [pc, #4]	; (22554 <switch_to_main_thread+0xc>)
   2254e:	4802      	ldr	r0, [pc, #8]	; (22558 <switch_to_main_thread+0x10>)
   22550:	f7f2 fc20 	bl	14d94 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   22554:	00022515 	.word	0x00022515
   22558:	20005438 	.word	0x20005438

0002255c <z_bss_zero>:
{
   2255c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   2255e:	4803      	ldr	r0, [pc, #12]	; (2256c <z_bss_zero+0x10>)
   22560:	4a03      	ldr	r2, [pc, #12]	; (22570 <z_bss_zero+0x14>)
   22562:	1a12      	subs	r2, r2, r0
   22564:	2100      	movs	r1, #0
   22566:	f007 fc76 	bl	29e56 <z_early_memset>
}
   2256a:	bd08      	pop	{r3, pc}
   2256c:	20000b68 	.word	0x20000b68
   22570:	200069bc 	.word	0x200069bc

00022574 <z_init_cpu>:
{
   22574:	b510      	push	{r4, lr}
   22576:	4604      	mov	r4, r0
	init_idle_thread(id);
   22578:	f7ff ff9e 	bl	224b8 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   2257c:	23b8      	movs	r3, #184	; 0xb8
   2257e:	490b      	ldr	r1, [pc, #44]	; (225ac <z_init_cpu+0x38>)
   22580:	fb03 1104 	mla	r1, r3, r4, r1
   22584:	4a0a      	ldr	r2, [pc, #40]	; (225b0 <z_init_cpu+0x3c>)
   22586:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2258a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2258e:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
   22590:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   22592:	eb04 1144 	add.w	r1, r4, r4, lsl #5
   22596:	4b07      	ldr	r3, [pc, #28]	; (225b4 <z_init_cpu+0x40>)
   22598:	eb03 1381 	add.w	r3, r3, r1, lsl #6
   2259c:	f503 6304 	add.w	r3, r3, #2112	; 0x840
	_kernel.cpus[id].irq_stack =
   225a0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   225a4:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   225a8:	6053      	str	r3, [r2, #4]
}
   225aa:	bd10      	pop	{r4, pc}
   225ac:	20005380 	.word	0x20005380
   225b0:	2000696c 	.word	0x2000696c
   225b4:	20008780 	.word	0x20008780

000225b8 <prepare_multithreading>:
{
   225b8:	b570      	push	{r4, r5, r6, lr}
   225ba:	b086      	sub	sp, #24
	z_sched_init();
   225bc:	f000 ff98 	bl	234f0 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
   225c0:	4d10      	ldr	r5, [pc, #64]	; (22604 <prepare_multithreading+0x4c>)
   225c2:	4b11      	ldr	r3, [pc, #68]	; (22608 <prepare_multithreading+0x50>)
   225c4:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   225c6:	4b11      	ldr	r3, [pc, #68]	; (2260c <prepare_multithreading+0x54>)
   225c8:	9305      	str	r3, [sp, #20]
   225ca:	2301      	movs	r3, #1
   225cc:	9304      	str	r3, [sp, #16]
   225ce:	2400      	movs	r4, #0
   225d0:	9403      	str	r4, [sp, #12]
   225d2:	9402      	str	r4, [sp, #8]
   225d4:	9401      	str	r4, [sp, #4]
   225d6:	9400      	str	r4, [sp, #0]
   225d8:	4b0d      	ldr	r3, [pc, #52]	; (22610 <prepare_multithreading+0x58>)
   225da:	f44f 6280 	mov.w	r2, #1024	; 0x400
   225de:	490d      	ldr	r1, [pc, #52]	; (22614 <prepare_multithreading+0x5c>)
   225e0:	4628      	mov	r0, r5
   225e2:	f000 f8fb 	bl	227dc <z_setup_new_thread>
   225e6:	4606      	mov	r6, r0
   225e8:	7b6b      	ldrb	r3, [r5, #13]
   225ea:	f023 0304 	bic.w	r3, r3, #4
   225ee:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
   225f0:	4628      	mov	r0, r5
   225f2:	f008 f836 	bl	2a662 <z_ready_thread>
	z_init_cpu(0);
   225f6:	4620      	mov	r0, r4
   225f8:	f7ff ffbc 	bl	22574 <z_init_cpu>
}
   225fc:	4630      	mov	r0, r6
   225fe:	b006      	add	sp, #24
   22600:	bd70      	pop	{r4, r5, r6, pc}
   22602:	bf00      	nop
   22604:	20005438 	.word	0x20005438
   22608:	2000696c 	.word	0x2000696c
   2260c:	0002dbe0 	.word	0x0002dbe0
   22610:	00022515 	.word	0x00022515
   22614:	20009140 	.word	0x20009140

00022618 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   22618:	b500      	push	{lr}
   2261a:	b0af      	sub	sp, #188	; 0xbc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   2261c:	2000      	movs	r0, #0
   2261e:	f7ff ff23 	bl	22468 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   22622:	4b1f      	ldr	r3, [pc, #124]	; (226a0 <z_cstart+0x88>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   22624:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   22628:	4c1e      	ldr	r4, [pc, #120]	; (226a4 <z_cstart+0x8c>)
   2262a:	6963      	ldr	r3, [r4, #20]
   2262c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   22630:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   22632:	23e0      	movs	r3, #224	; 0xe0
   22634:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   22638:	2320      	movs	r3, #32
   2263a:	77e3      	strb	r3, [r4, #31]
   2263c:	2500      	movs	r5, #0
   2263e:	7625      	strb	r5, [r4, #24]
   22640:	7665      	strb	r5, [r4, #25]
   22642:	76a5      	strb	r5, [r4, #26]
   22644:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   22648:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2264a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   2264e:	6263      	str	r3, [r4, #36]	; 0x24
   22650:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   22654:	f7f3 faaa 	bl	15bac <z_arm_fault_init>
	z_arm_cpu_idle_init();
   22658:	f7f2 f946 	bl	148e8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   2265c:	f04f 33ff 	mov.w	r3, #4294967295
   22660:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   22662:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   22664:	f7f3 fc7e 	bl	15f64 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   22668:	f7f3 fb54 	bl	15d14 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   2266c:	f7f1 fb10 	bl	13c90 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   22670:	2401      	movs	r4, #1
   22672:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   22676:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   2267a:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
   2267c:	9528      	str	r5, [sp, #160]	; 0xa0
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
   2267e:	952a      	str	r5, [sp, #168]	; 0xa8

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   22680:	4b09      	ldr	r3, [pc, #36]	; (226a8 <z_cstart+0x90>)
   22682:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   22686:	f7ff fd99 	bl	221bc <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   2268a:	4620      	mov	r0, r4
   2268c:	f7ff feec 	bl	22468 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   22690:	2002      	movs	r0, #2
   22692:	f7ff fee9 	bl	22468 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   22696:	f7ff ff8f 	bl	225b8 <prepare_multithreading>
   2269a:	f7ff ff55 	bl	22548 <switch_to_main_thread>
   2269e:	bf00      	nop
   226a0:	20008fc0 	.word	0x20008fc0
   226a4:	e000ed00 	.word	0xe000ed00
   226a8:	2000696c 	.word	0x2000696c

000226ac <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   226ac:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   226ae:	4c06      	ldr	r4, [pc, #24]	; (226c8 <statics_init+0x1c>)
   226b0:	e005      	b.n	226be <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   226b2:	68a2      	ldr	r2, [r4, #8]
   226b4:	6861      	ldr	r1, [r4, #4]
   226b6:	4620      	mov	r0, r4
   226b8:	f007 fbd5 	bl	29e66 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   226bc:	3414      	adds	r4, #20
   226be:	4b03      	ldr	r3, [pc, #12]	; (226cc <statics_init+0x20>)
   226c0:	429c      	cmp	r4, r3
   226c2:	d3f6      	bcc.n	226b2 <statics_init+0x6>
		}
	}
	return 0;
}
   226c4:	2000      	movs	r0, #0
   226c6:	bd10      	pop	{r4, pc}
   226c8:	200009f0 	.word	0x200009f0
   226cc:	200009f0 	.word	0x200009f0

000226d0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   226d0:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   226d2:	4c06      	ldr	r4, [pc, #24]	; (226ec <init_mem_slab_module+0x1c>)
	int rc = 0;
   226d4:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   226d6:	e000      	b.n	226da <init_mem_slab_module+0xa>
   226d8:	341c      	adds	r4, #28
   226da:	4b05      	ldr	r3, [pc, #20]	; (226f0 <init_mem_slab_module+0x20>)
   226dc:	429c      	cmp	r4, r3
   226de:	d204      	bcs.n	226ea <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
   226e0:	4620      	mov	r0, r4
   226e2:	f007 fc3b 	bl	29f5c <create_free_list>
		if (rc < 0) {
   226e6:	2800      	cmp	r0, #0
   226e8:	daf6      	bge.n	226d8 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
   226ea:	bd10      	pop	{r4, pc}
   226ec:	2000099c 	.word	0x2000099c
   226f0:	200009f0 	.word	0x200009f0

000226f4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   226f4:	b530      	push	{r4, r5, lr}
   226f6:	b083      	sub	sp, #12
   226f8:	460d      	mov	r5, r1
	__asm__ volatile(
   226fa:	f04f 0140 	mov.w	r1, #64	; 0x40
   226fe:	f3ef 8c11 	mrs	ip, BASEPRI
   22702:	f381 8812 	msr	BASEPRI_MAX, r1
   22706:	f3bf 8f6f 	isb	sy
   2270a:	4661      	mov	r1, ip
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   2270c:	6944      	ldr	r4, [r0, #20]
   2270e:	b164      	cbz	r4, 2272a <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
   22710:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   22712:	6823      	ldr	r3, [r4, #0]
   22714:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   22716:	6983      	ldr	r3, [r0, #24]
   22718:	3301      	adds	r3, #1
   2271a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   2271c:	2000      	movs	r0, #0
	__asm__ volatile(
   2271e:	f381 8811 	msr	BASEPRI, r1
   22722:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   22726:	b003      	add	sp, #12
   22728:	bd30      	pop	{r4, r5, pc}
   2272a:	f100 0e08 	add.w	lr, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   2272e:	ea53 0402 	orrs.w	r4, r3, r2
   22732:	d104      	bne.n	2273e <k_mem_slab_alloc+0x4a>
		*mem = NULL;
   22734:	2300      	movs	r3, #0
   22736:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   22738:	f06f 000b 	mvn.w	r0, #11
   2273c:	e7ef      	b.n	2271e <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   2273e:	9200      	str	r2, [sp, #0]
   22740:	9301      	str	r3, [sp, #4]
   22742:	4602      	mov	r2, r0
   22744:	4670      	mov	r0, lr
   22746:	f000 fdcd 	bl	232e4 <z_pend_curr>
		if (result == 0) {
   2274a:	2800      	cmp	r0, #0
   2274c:	d1eb      	bne.n	22726 <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
   2274e:	4b02      	ldr	r3, [pc, #8]	; (22758 <k_mem_slab_alloc+0x64>)
   22750:	689b      	ldr	r3, [r3, #8]
   22752:	695b      	ldr	r3, [r3, #20]
   22754:	602b      	str	r3, [r5, #0]
		return result;
   22756:	e7e6      	b.n	22726 <k_mem_slab_alloc+0x32>
   22758:	2000696c 	.word	0x2000696c

0002275c <z_thread_monitor_exit>:
	__asm__ volatile(
   2275c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22760:	f3ef 8111 	mrs	r1, BASEPRI
   22764:	f383 8812 	msr	BASEPRI_MAX, r3
   22768:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   2276c:	4b0a      	ldr	r3, [pc, #40]	; (22798 <z_thread_monitor_exit+0x3c>)
   2276e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22770:	4283      	cmp	r3, r0
   22772:	d104      	bne.n	2277e <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   22774:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   22776:	4b08      	ldr	r3, [pc, #32]	; (22798 <z_thread_monitor_exit+0x3c>)
   22778:	629a      	str	r2, [r3, #40]	; 0x28
   2277a:	e007      	b.n	2278c <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   2277c:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   2277e:	b113      	cbz	r3, 22786 <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   22780:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   22782:	4282      	cmp	r2, r0
   22784:	d1fa      	bne.n	2277c <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   22786:	b10b      	cbz	r3, 2278c <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   22788:	6f42      	ldr	r2, [r0, #116]	; 0x74
   2278a:	675a      	str	r2, [r3, #116]	; 0x74
	__asm__ volatile(
   2278c:	f381 8811 	msr	BASEPRI, r1
   22790:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   22794:	4770      	bx	lr
   22796:	bf00      	nop
   22798:	2000696c 	.word	0x2000696c

0002279c <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   2279c:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   2279e:	4604      	mov	r4, r0
   227a0:	b140      	cbz	r0, 227b4 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
   227a2:	221f      	movs	r2, #31
   227a4:	f104 0078 	add.w	r0, r4, #120	; 0x78
   227a8:	f003 fbf3 	bl	25f92 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   227ac:	2000      	movs	r0, #0
   227ae:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   227b2:	bd10      	pop	{r4, pc}
		thread = _current;
   227b4:	4b01      	ldr	r3, [pc, #4]	; (227bc <z_impl_k_thread_name_set+0x20>)
   227b6:	689c      	ldr	r4, [r3, #8]
   227b8:	e7f3      	b.n	227a2 <z_impl_k_thread_name_set+0x6>
   227ba:	bf00      	nop
   227bc:	2000696c 	.word	0x2000696c

000227c0 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   227c0:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   227c2:	ea53 0102 	orrs.w	r1, r3, r2
   227c6:	d102      	bne.n	227ce <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
   227c8:	f007 fc29 	bl	2a01e <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   227cc:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   227ce:	4902      	ldr	r1, [pc, #8]	; (227d8 <schedule_new_thread+0x18>)
   227d0:	3018      	adds	r0, #24
   227d2:	f001 f83f 	bl	23854 <z_add_timeout>
   227d6:	e7f9      	b.n	227cc <schedule_new_thread+0xc>
   227d8:	0002a69b 	.word	0x0002a69b

000227dc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   227dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   227e0:	b085      	sub	sp, #20
   227e2:	4604      	mov	r4, r0
   227e4:	460f      	mov	r7, r1
   227e6:	4615      	mov	r5, r2
   227e8:	461e      	mov	r6, r3
   227ea:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   227ee:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   227f2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   227f6:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   227fa:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   227fe:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   22800:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   22802:	9b12      	ldr	r3, [sp, #72]	; 0x48
   22804:	2204      	movs	r2, #4
   22806:	9911      	ldr	r1, [sp, #68]	; 0x44
   22808:	f007 fc0d 	bl	2a026 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   2280c:	462a      	mov	r2, r5
   2280e:	4639      	mov	r1, r7
   22810:	4620      	mov	r0, r4
   22812:	f007 fbe9 	bl	29fe8 <setup_thread_stack>
   22816:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   22818:	f8cd 8008 	str.w	r8, [sp, #8]
   2281c:	f8cd 9004 	str.w	r9, [sp, #4]
   22820:	f8cd a000 	str.w	sl, [sp]
   22824:	4633      	mov	r3, r6
   22826:	4602      	mov	r2, r0
   22828:	4639      	mov	r1, r7
   2282a:	4620      	mov	r0, r4
   2282c:	f7f2 fa6c 	bl	14d08 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   22830:	2300      	movs	r3, #0
   22832:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   22834:	6666      	str	r6, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
   22836:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   2283a:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   2283e:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	__asm__ volatile(
   22842:	f04f 0340 	mov.w	r3, #64	; 0x40
   22846:	f3ef 8211 	mrs	r2, BASEPRI
   2284a:	f383 8812 	msr	BASEPRI_MAX, r3
   2284e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   22852:	4b13      	ldr	r3, [pc, #76]	; (228a0 <z_setup_new_thread+0xc4>)
   22854:	6a99      	ldr	r1, [r3, #40]	; 0x28
   22856:	6761      	str	r1, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   22858:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
   2285a:	f382 8811 	msr	BASEPRI, r2
   2285e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   22862:	f1bb 0f00 	cmp.w	fp, #0
   22866:	d013      	beq.n	22890 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
   22868:	221f      	movs	r2, #31
   2286a:	4659      	mov	r1, fp
   2286c:	f104 0078 	add.w	r0, r4, #120	; 0x78
   22870:	f003 fb8f 	bl	25f92 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   22874:	2300      	movs	r3, #0
   22876:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   2287a:	4b09      	ldr	r3, [pc, #36]	; (228a0 <z_setup_new_thread+0xc4>)
   2287c:	689b      	ldr	r3, [r3, #8]
   2287e:	b15b      	cbz	r3, 22898 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   22880:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   22884:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
   22888:	4628      	mov	r0, r5
   2288a:	b005      	add	sp, #20
   2288c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   22890:	2300      	movs	r3, #0
   22892:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   22896:	e7f0      	b.n	2287a <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   22898:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
   2289c:	e7f4      	b.n	22888 <z_setup_new_thread+0xac>
   2289e:	bf00      	nop
   228a0:	2000696c 	.word	0x2000696c

000228a4 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   228a4:	b530      	push	{r4, r5, lr}
   228a6:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   228a8:	4c21      	ldr	r4, [pc, #132]	; (22930 <z_init_static_threads+0x8c>)
   228aa:	e014      	b.n	228d6 <z_init_static_threads+0x32>
		z_setup_new_thread(
   228ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   228ae:	9305      	str	r3, [sp, #20]
   228b0:	6a23      	ldr	r3, [r4, #32]
   228b2:	9304      	str	r3, [sp, #16]
   228b4:	69e3      	ldr	r3, [r4, #28]
   228b6:	9303      	str	r3, [sp, #12]
   228b8:	69a3      	ldr	r3, [r4, #24]
   228ba:	9302      	str	r3, [sp, #8]
   228bc:	6963      	ldr	r3, [r4, #20]
   228be:	9301      	str	r3, [sp, #4]
   228c0:	6923      	ldr	r3, [r4, #16]
   228c2:	9300      	str	r3, [sp, #0]
   228c4:	68e3      	ldr	r3, [r4, #12]
   228c6:	68a2      	ldr	r2, [r4, #8]
   228c8:	6861      	ldr	r1, [r4, #4]
   228ca:	6820      	ldr	r0, [r4, #0]
   228cc:	f7ff ff86 	bl	227dc <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   228d0:	6823      	ldr	r3, [r4, #0]
   228d2:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   228d4:	3430      	adds	r4, #48	; 0x30
   228d6:	4b17      	ldr	r3, [pc, #92]	; (22934 <z_init_static_threads+0x90>)
   228d8:	429c      	cmp	r4, r3
   228da:	d3e7      	bcc.n	228ac <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   228dc:	f000 fbb4 	bl	23048 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   228e0:	4c13      	ldr	r4, [pc, #76]	; (22930 <z_init_static_threads+0x8c>)
   228e2:	e000      	b.n	228e6 <z_init_static_threads+0x42>
   228e4:	3430      	adds	r4, #48	; 0x30
   228e6:	4b13      	ldr	r3, [pc, #76]	; (22934 <z_init_static_threads+0x90>)
   228e8:	429c      	cmp	r4, r3
   228ea:	d21c      	bcs.n	22926 <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   228ec:	6a60      	ldr	r0, [r4, #36]	; 0x24
   228ee:	f1b0 3fff 	cmp.w	r0, #4294967295
   228f2:	d0f7      	beq.n	228e4 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
   228f4:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   228f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   228fa:	17c1      	asrs	r1, r0, #31
   228fc:	03c9      	lsls	r1, r1, #15
   228fe:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   22902:	03c0      	lsls	r0, r0, #15
   22904:	f240 33e7 	movw	r3, #999	; 0x3e7
   22908:	18c0      	adds	r0, r0, r3
   2290a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2290e:	f04f 0300 	mov.w	r3, #0
   22912:	f141 0100 	adc.w	r1, r1, #0
   22916:	f7dd fbf3 	bl	100 <__aeabi_uldivmod>
   2291a:	4602      	mov	r2, r0
   2291c:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   2291e:	4628      	mov	r0, r5
   22920:	f7ff ff4e 	bl	227c0 <schedule_new_thread>
   22924:	e7de      	b.n	228e4 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
   22926:	f000 fd91 	bl	2344c <k_sched_unlock>
}
   2292a:	b007      	add	sp, #28
   2292c:	bd30      	pop	{r4, r5, pc}
   2292e:	bf00      	nop
   22930:	0002b0d4 	.word	0x0002b0d4
   22934:	0002b0d4 	.word	0x0002b0d4

00022938 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   22938:	b508      	push	{r3, lr}
   2293a:	e001      	b.n	22940 <idle+0x8>
	arch_cpu_idle();
   2293c:	f7f1 ffda 	bl	148f4 <arch_cpu_idle>
	__asm__ volatile(
   22940:	f04f 0240 	mov.w	r2, #64	; 0x40
   22944:	f3ef 8311 	mrs	r3, BASEPRI
   22948:	f382 8812 	msr	BASEPRI_MAX, r2
   2294c:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   22950:	f007 ffd5 	bl	2a8fe <z_get_next_timeout_expiry>
   22954:	4b05      	ldr	r3, [pc, #20]	; (2296c <idle+0x34>)
   22956:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
   22958:	4b05      	ldr	r3, [pc, #20]	; (22970 <idle+0x38>)
   2295a:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   2295c:	2b00      	cmp	r3, #0
   2295e:	d0ed      	beq.n	2293c <idle+0x4>
   22960:	f7f1 fe30 	bl	145c4 <pm_system_suspend>
   22964:	2800      	cmp	r0, #0
   22966:	d1eb      	bne.n	22940 <idle+0x8>
   22968:	e7e8      	b.n	2293c <idle+0x4>
   2296a:	bf00      	nop
   2296c:	2000696c 	.word	0x2000696c
   22970:	200069ba 	.word	0x200069ba

00022974 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   22974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22978:	b082      	sub	sp, #8
   2297a:	4604      	mov	r4, r0
   2297c:	461e      	mov	r6, r3
   2297e:	f04f 0340 	mov.w	r3, #64	; 0x40
   22982:	f3ef 8511 	mrs	r5, BASEPRI
   22986:	f383 8812 	msr	BASEPRI_MAX, r3
   2298a:	f3bf 8f6f 	isb	sy
   2298e:	462b      	mov	r3, r5

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   22990:	68c1      	ldr	r1, [r0, #12]
   22992:	b999      	cbnz	r1, 229bc <z_impl_k_mutex_lock+0x48>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   22994:	2900      	cmp	r1, #0
   22996:	d151      	bne.n	22a3c <z_impl_k_mutex_lock+0xc8>
   22998:	4a36      	ldr	r2, [pc, #216]	; (22a74 <z_impl_k_mutex_lock+0x100>)
   2299a:	6892      	ldr	r2, [r2, #8]
   2299c:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   229a0:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   229a2:	3101      	adds	r1, #1
   229a4:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   229a6:	4a33      	ldr	r2, [pc, #204]	; (22a74 <z_impl_k_mutex_lock+0x100>)
   229a8:	6892      	ldr	r2, [r2, #8]
   229aa:	60a2      	str	r2, [r4, #8]
	__asm__ volatile(
   229ac:	f383 8811 	msr	BASEPRI, r3
   229b0:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   229b4:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   229b6:	b002      	add	sp, #8
   229b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   229bc:	4617      	mov	r7, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   229be:	6880      	ldr	r0, [r0, #8]
   229c0:	4a2c      	ldr	r2, [pc, #176]	; (22a74 <z_impl_k_mutex_lock+0x100>)
   229c2:	6892      	ldr	r2, [r2, #8]
   229c4:	4290      	cmp	r0, r2
   229c6:	d0e5      	beq.n	22994 <z_impl_k_mutex_lock+0x20>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   229c8:	ea56 0107 	orrs.w	r1, r6, r7
   229cc:	d038      	beq.n	22a40 <z_impl_k_mutex_lock+0xcc>
					    mutex->owner->base.prio);
   229ce:	f990 800e 	ldrsb.w	r8, [r0, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   229d2:	4641      	mov	r1, r8
   229d4:	f992 000e 	ldrsb.w	r0, [r2, #14]
   229d8:	f007 fb58 	bl	2a08c <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   229dc:	4580      	cmp	r8, r0
   229de:	dc36      	bgt.n	22a4e <z_impl_k_mutex_lock+0xda>
	bool resched = false;
   229e0:	f04f 0800 	mov.w	r8, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   229e4:	9700      	str	r7, [sp, #0]
   229e6:	9601      	str	r6, [sp, #4]
   229e8:	4622      	mov	r2, r4
   229ea:	4629      	mov	r1, r5
   229ec:	4822      	ldr	r0, [pc, #136]	; (22a78 <z_impl_k_mutex_lock+0x104>)
   229ee:	f000 fc79 	bl	232e4 <z_pend_curr>
	if (got_mutex == 0) {
   229f2:	2800      	cmp	r0, #0
   229f4:	d0df      	beq.n	229b6 <z_impl_k_mutex_lock+0x42>
	__asm__ volatile(
   229f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   229fa:	f3ef 8511 	mrs	r5, BASEPRI
   229fe:	f383 8812 	msr	BASEPRI_MAX, r3
   22a02:	f3bf 8f6f 	isb	sy
   22a06:	462e      	mov	r6, r5
	if (likely(mutex->owner != NULL)) {
   22a08:	68a3      	ldr	r3, [r4, #8]
   22a0a:	b343      	cbz	r3, 22a5e <z_impl_k_mutex_lock+0xea>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   22a0c:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22a0e:	429c      	cmp	r4, r3
   22a10:	d023      	beq.n	22a5a <z_impl_k_mutex_lock+0xe6>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   22a12:	b313      	cbz	r3, 22a5a <z_impl_k_mutex_lock+0xe6>
   22a14:	6921      	ldr	r1, [r4, #16]
   22a16:	f993 000e 	ldrsb.w	r0, [r3, #14]
   22a1a:	f007 fb37 	bl	2a08c <new_prio_for_inheritance>
   22a1e:	4601      	mov	r1, r0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   22a20:	4620      	mov	r0, r4
   22a22:	f007 fb3e 	bl	2a0a2 <adjust_owner_prio>
   22a26:	b9e8      	cbnz	r0, 22a64 <z_impl_k_mutex_lock+0xf0>
   22a28:	f1b8 0f00 	cmp.w	r8, #0
   22a2c:	d11a      	bne.n	22a64 <z_impl_k_mutex_lock+0xf0>
	__asm__ volatile(
   22a2e:	f386 8811 	msr	BASEPRI, r6
   22a32:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   22a36:	f06f 000a 	mvn.w	r0, #10
   22a3a:	e7bc      	b.n	229b6 <z_impl_k_mutex_lock+0x42>
					_current->base.prio :
   22a3c:	6922      	ldr	r2, [r4, #16]
   22a3e:	e7af      	b.n	229a0 <z_impl_k_mutex_lock+0x2c>
   22a40:	f385 8811 	msr	BASEPRI, r5
   22a44:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   22a48:	f06f 000f 	mvn.w	r0, #15
   22a4c:	e7b3      	b.n	229b6 <z_impl_k_mutex_lock+0x42>
		resched = adjust_owner_prio(mutex, new_prio);
   22a4e:	4601      	mov	r1, r0
   22a50:	4620      	mov	r0, r4
   22a52:	f007 fb26 	bl	2a0a2 <adjust_owner_prio>
   22a56:	4680      	mov	r8, r0
   22a58:	e7c4      	b.n	229e4 <z_impl_k_mutex_lock+0x70>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   22a5a:	6921      	ldr	r1, [r4, #16]
   22a5c:	e7e0      	b.n	22a20 <z_impl_k_mutex_lock+0xac>
	if (resched) {
   22a5e:	f1b8 0f00 	cmp.w	r8, #0
   22a62:	d0e4      	beq.n	22a2e <z_impl_k_mutex_lock+0xba>
		z_reschedule(&lock, key);
   22a64:	4629      	mov	r1, r5
   22a66:	4804      	ldr	r0, [pc, #16]	; (22a78 <z_impl_k_mutex_lock+0x104>)
   22a68:	f000 fad8 	bl	2301c <z_reschedule>
	return -EAGAIN;
   22a6c:	f06f 000a 	mvn.w	r0, #10
   22a70:	e7a1      	b.n	229b6 <z_impl_k_mutex_lock+0x42>
   22a72:	bf00      	nop
   22a74:	2000696c 	.word	0x2000696c
   22a78:	20006998 	.word	0x20006998

00022a7c <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   22a7c:	6883      	ldr	r3, [r0, #8]
   22a7e:	b38b      	cbz	r3, 22ae4 <z_impl_k_mutex_unlock+0x68>
{
   22a80:	b570      	push	{r4, r5, r6, lr}
   22a82:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   22a84:	4a1a      	ldr	r2, [pc, #104]	; (22af0 <z_impl_k_mutex_unlock+0x74>)
   22a86:	6892      	ldr	r2, [r2, #8]
   22a88:	4293      	cmp	r3, r2
   22a8a:	d12e      	bne.n	22aea <z_impl_k_mutex_unlock+0x6e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   22a8c:	68c3      	ldr	r3, [r0, #12]
   22a8e:	2b01      	cmp	r3, #1
   22a90:	d903      	bls.n	22a9a <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   22a92:	3b01      	subs	r3, #1
   22a94:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   22a96:	2000      	movs	r0, #0
}
   22a98:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   22a9a:	f04f 0340 	mov.w	r3, #64	; 0x40
   22a9e:	f3ef 8511 	mrs	r5, BASEPRI
   22aa2:	f383 8812 	msr	BASEPRI_MAX, r3
   22aa6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   22aaa:	6901      	ldr	r1, [r0, #16]
   22aac:	f007 faf9 	bl	2a0a2 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   22ab0:	4620      	mov	r0, r4
   22ab2:	f007 fe8b 	bl	2a7cc <z_unpend_first_thread>
	mutex->owner = new_owner;
   22ab6:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   22ab8:	b168      	cbz	r0, 22ad6 <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
   22aba:	f990 300e 	ldrsb.w	r3, [r0, #14]
   22abe:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   22ac0:	2400      	movs	r4, #0
   22ac2:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   22ac6:	f007 fdcc 	bl	2a662 <z_ready_thread>
		z_reschedule(&lock, key);
   22aca:	4629      	mov	r1, r5
   22acc:	4809      	ldr	r0, [pc, #36]	; (22af4 <z_impl_k_mutex_unlock+0x78>)
   22ace:	f000 faa5 	bl	2301c <z_reschedule>
	return 0;
   22ad2:	4620      	mov	r0, r4
   22ad4:	e7e0      	b.n	22a98 <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
   22ad6:	2000      	movs	r0, #0
   22ad8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   22ada:	f385 8811 	msr	BASEPRI, r5
   22ade:	f3bf 8f6f 	isb	sy
   22ae2:	e7d9      	b.n	22a98 <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
   22ae4:	f06f 0015 	mvn.w	r0, #21
}
   22ae8:	4770      	bx	lr
		return -EPERM;
   22aea:	f04f 30ff 	mov.w	r0, #4294967295
   22aee:	e7d3      	b.n	22a98 <z_impl_k_mutex_unlock+0x1c>
   22af0:	2000696c 	.word	0x2000696c
   22af4:	20006998 	.word	0x20006998

00022af8 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   22af8:	b510      	push	{r4, lr}
   22afa:	b082      	sub	sp, #8
   22afc:	4684      	mov	ip, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   22afe:	4686      	mov	lr, r0
	__asm__ volatile(
   22b00:	f04f 0040 	mov.w	r0, #64	; 0x40
   22b04:	f3ef 8111 	mrs	r1, BASEPRI
   22b08:	f380 8812 	msr	BASEPRI_MAX, r0
   22b0c:	f3bf 8f6f 	isb	sy
   22b10:	460c      	mov	r4, r1
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   22b12:	f85e 0b08 	ldr.w	r0, [lr], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   22b16:	b1a0      	cbz	r0, 22b42 <z_impl_k_queue_get+0x4a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   22b18:	6803      	ldr	r3, [r0, #0]
   22b1a:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   22b1e:	f8cc 3000 	str.w	r3, [ip]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   22b22:	f8dc 2004 	ldr.w	r2, [ip, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   22b26:	4290      	cmp	r0, r2
   22b28:	d008      	beq.n	22b3c <z_impl_k_queue_get+0x44>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   22b2a:	2101      	movs	r1, #1
   22b2c:	f007 fb4f 	bl	2a1ce <z_queue_node_peek>
	__asm__ volatile(
   22b30:	f384 8811 	msr	BASEPRI, r4
   22b34:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   22b38:	b002      	add	sp, #8
   22b3a:	bd10      	pop	{r4, pc}
	list->tail = node;
   22b3c:	f8cc 3004 	str.w	r3, [ip, #4]
}
   22b40:	e7f3      	b.n	22b2a <z_impl_k_queue_get+0x32>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22b42:	ea53 0002 	orrs.w	r0, r3, r2
   22b46:	d00a      	beq.n	22b5e <z_impl_k_queue_get+0x66>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   22b48:	9200      	str	r2, [sp, #0]
   22b4a:	9301      	str	r3, [sp, #4]
   22b4c:	4672      	mov	r2, lr
   22b4e:	4670      	mov	r0, lr
   22b50:	f000 fbc8 	bl	232e4 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   22b54:	b948      	cbnz	r0, 22b6a <z_impl_k_queue_get+0x72>
   22b56:	4b06      	ldr	r3, [pc, #24]	; (22b70 <z_impl_k_queue_get+0x78>)
   22b58:	689b      	ldr	r3, [r3, #8]
   22b5a:	6958      	ldr	r0, [r3, #20]
   22b5c:	e7ec      	b.n	22b38 <z_impl_k_queue_get+0x40>
   22b5e:	f381 8811 	msr	BASEPRI, r1
   22b62:	f3bf 8f6f 	isb	sy
		return NULL;
   22b66:	2000      	movs	r0, #0
   22b68:	e7e6      	b.n	22b38 <z_impl_k_queue_get+0x40>
	return (ret != 0) ? NULL : _current->base.swap_data;
   22b6a:	2000      	movs	r0, #0
   22b6c:	e7e4      	b.n	22b38 <z_impl_k_queue_get+0x40>
   22b6e:	bf00      	nop
   22b70:	2000696c 	.word	0x2000696c

00022b74 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   22b74:	b538      	push	{r3, r4, r5, lr}
   22b76:	4604      	mov	r4, r0
	__asm__ volatile(
   22b78:	f04f 0340 	mov.w	r3, #64	; 0x40
   22b7c:	f3ef 8511 	mrs	r5, BASEPRI
   22b80:	f383 8812 	msr	BASEPRI_MAX, r3
   22b84:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   22b88:	f007 fe20 	bl	2a7cc <z_unpend_first_thread>

	if (thread != NULL) {
   22b8c:	b148      	cbz	r0, 22ba2 <z_impl_k_sem_give+0x2e>
   22b8e:	2200      	movs	r2, #0
   22b90:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   22b94:	f007 fd65 	bl	2a662 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   22b98:	4629      	mov	r1, r5
   22b9a:	4809      	ldr	r0, [pc, #36]	; (22bc0 <z_impl_k_sem_give+0x4c>)
   22b9c:	f000 fa3e 	bl	2301c <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   22ba0:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   22ba2:	68a3      	ldr	r3, [r4, #8]
   22ba4:	68e2      	ldr	r2, [r4, #12]
   22ba6:	4293      	cmp	r3, r2
   22ba8:	d008      	beq.n	22bbc <z_impl_k_sem_give+0x48>
   22baa:	2201      	movs	r2, #1
   22bac:	4413      	add	r3, r2
   22bae:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   22bb0:	2102      	movs	r1, #2
   22bb2:	f104 0010 	add.w	r0, r4, #16
   22bb6:	f008 f8e6 	bl	2ad86 <z_handle_obj_poll_events>
}
   22bba:	e7ed      	b.n	22b98 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   22bbc:	2200      	movs	r2, #0
   22bbe:	e7f5      	b.n	22bac <z_impl_k_sem_give+0x38>
   22bc0:	20006998 	.word	0x20006998

00022bc4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   22bc4:	b510      	push	{r4, lr}
   22bc6:	b082      	sub	sp, #8
   22bc8:	f04f 0440 	mov.w	r4, #64	; 0x40
   22bcc:	f3ef 8111 	mrs	r1, BASEPRI
   22bd0:	f384 8812 	msr	BASEPRI_MAX, r4
   22bd4:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   22bd8:	6884      	ldr	r4, [r0, #8]
   22bda:	b144      	cbz	r4, 22bee <z_impl_k_sem_take+0x2a>
		sem->count--;
   22bdc:	3c01      	subs	r4, #1
   22bde:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   22be0:	f381 8811 	msr	BASEPRI, r1
   22be4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   22be8:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   22bea:	b002      	add	sp, #8
   22bec:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22bee:	ea53 0402 	orrs.w	r4, r3, r2
   22bf2:	d006      	beq.n	22c02 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   22bf4:	9200      	str	r2, [sp, #0]
   22bf6:	9301      	str	r3, [sp, #4]
   22bf8:	4602      	mov	r2, r0
   22bfa:	4805      	ldr	r0, [pc, #20]	; (22c10 <z_impl_k_sem_take+0x4c>)
   22bfc:	f000 fb72 	bl	232e4 <z_pend_curr>
	return ret;
   22c00:	e7f3      	b.n	22bea <z_impl_k_sem_take+0x26>
   22c02:	f381 8811 	msr	BASEPRI, r1
   22c06:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   22c0a:	f06f 000f 	mvn.w	r0, #15
   22c0e:	e7ec      	b.n	22bea <z_impl_k_sem_take+0x26>
   22c10:	20006998 	.word	0x20006998

00022c14 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   22c14:	b510      	push	{r4, lr}
   22c16:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   22c18:	4b08      	ldr	r3, [pc, #32]	; (22c3c <k_sys_work_q_init+0x28>)
   22c1a:	9302      	str	r3, [sp, #8]
   22c1c:	2400      	movs	r4, #0
   22c1e:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   22c22:	ab02      	add	r3, sp, #8
   22c24:	9300      	str	r3, [sp, #0]
   22c26:	f04f 33ff 	mov.w	r3, #4294967295
   22c2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   22c2e:	4904      	ldr	r1, [pc, #16]	; (22c40 <k_sys_work_q_init+0x2c>)
   22c30:	4804      	ldr	r0, [pc, #16]	; (22c44 <k_sys_work_q_init+0x30>)
   22c32:	f000 f929 	bl	22e88 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   22c36:	4620      	mov	r0, r4
   22c38:	b004      	add	sp, #16
   22c3a:	bd10      	pop	{r4, pc}
   22c3c:	0002dc04 	.word	0x0002dc04
   22c40:	20009580 	.word	0x20009580
   22c44:	200054f0 	.word	0x200054f0

00022c48 <queue_submit_locked>:
 * @retval -EBUSY if the submission was rejected (draining, plugged)
 */
static inline int queue_submit_locked(struct k_work_q *queue,
				      struct k_work *work)
{
	if (queue == NULL) {
   22c48:	b370      	cbz	r0, 22ca8 <queue_submit_locked+0x60>
{
   22c4a:	b538      	push	{r3, r4, r5, lr}
   22c4c:	460d      	mov	r5, r1
   22c4e:	4604      	mov	r4, r0
		return -EINVAL;
	}

	int ret = -EBUSY;
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   22c50:	4b1b      	ldr	r3, [pc, #108]	; (22cc0 <queue_submit_locked+0x78>)
   22c52:	689b      	ldr	r3, [r3, #8]
   22c54:	4283      	cmp	r3, r0
   22c56:	d01b      	beq.n	22c90 <queue_submit_locked+0x48>
   22c58:	2300      	movs	r3, #0
   22c5a:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   22c5c:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   22c60:	f3c3 0180 	ubfx	r1, r3, #2, #1
   22c64:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	 * * -ENODEV if the queue isn't running.
	 * * -EBUSY if draining and not chained
	 * * -EBUSY if plugged and not draining
	 * * otherwise OK
	 */
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   22c68:	f013 0f01 	tst.w	r3, #1
   22c6c:	d01f      	beq.n	22cae <queue_submit_locked+0x66>
		ret = -ENODEV;
	} else if (draining && !chained) {
   22c6e:	b101      	cbz	r1, 22c72 <queue_submit_locked+0x2a>
   22c70:	b302      	cbz	r2, 22cb4 <queue_submit_locked+0x6c>
		ret = -EBUSY;
	} else if (plugged && !draining) {
   22c72:	b100      	cbz	r0, 22c76 <queue_submit_locked+0x2e>
   22c74:	b309      	cbz	r1, 22cba <queue_submit_locked+0x72>
	parent->next = child;
   22c76:	2300      	movs	r3, #0
   22c78:	602b      	str	r3, [r5, #0]
	return list->tail;
   22c7a:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
   22c7e:	b173      	cbz	r3, 22c9e <queue_submit_locked+0x56>
	parent->next = child;
   22c80:	601d      	str	r5, [r3, #0]
	list->tail = node;
   22c82:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
		ret = -EBUSY;
	} else {
		sys_slist_append(&queue->pending, &work->node);
		ret = 1;
		(void)notify_queue_locked(queue);
   22c86:	4620      	mov	r0, r4
   22c88:	f007 fb2b 	bl	2a2e2 <notify_queue_locked>
		ret = 1;
   22c8c:	2001      	movs	r0, #1
	}

	return ret;
}
   22c8e:	bd38      	pop	{r3, r4, r5, pc}
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   22c90:	f007 f9bd 	bl	2a00e <k_is_in_isr>
   22c94:	b908      	cbnz	r0, 22c9a <queue_submit_locked+0x52>
   22c96:	2301      	movs	r3, #1
   22c98:	e7df      	b.n	22c5a <queue_submit_locked+0x12>
   22c9a:	2300      	movs	r3, #0
   22c9c:	e7dd      	b.n	22c5a <queue_submit_locked+0x12>
   22c9e:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
	list->head = node;
   22ca2:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
}
   22ca6:	e7ee      	b.n	22c86 <queue_submit_locked+0x3e>
		return -EINVAL;
   22ca8:	f06f 0015 	mvn.w	r0, #21
}
   22cac:	4770      	bx	lr
		ret = -ENODEV;
   22cae:	f06f 0012 	mvn.w	r0, #18
   22cb2:	e7ec      	b.n	22c8e <queue_submit_locked+0x46>
		ret = -EBUSY;
   22cb4:	f06f 000f 	mvn.w	r0, #15
   22cb8:	e7e9      	b.n	22c8e <queue_submit_locked+0x46>
		ret = -EBUSY;
   22cba:	f06f 000f 	mvn.w	r0, #15
   22cbe:	e7e6      	b.n	22c8e <queue_submit_locked+0x46>
   22cc0:	2000696c 	.word	0x2000696c

00022cc4 <finalize_cancel_locked>:
{
   22cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22cc6:	4606      	mov	r6, r0
	*flagp &= ~BIT(bit);
   22cc8:	68c3      	ldr	r3, [r0, #12]
   22cca:	f023 0302 	bic.w	r3, r3, #2
   22cce:	60c3      	str	r3, [r0, #12]
	return list->head;
   22cd0:	4b13      	ldr	r3, [pc, #76]	; (22d20 <finalize_cancel_locked+0x5c>)
   22cd2:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   22cd4:	b185      	cbz	r5, 22cf8 <finalize_cancel_locked+0x34>
	return node->next;
   22cd6:	682c      	ldr	r4, [r5, #0]
   22cd8:	b104      	cbz	r4, 22cdc <finalize_cancel_locked+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22cda:	b10d      	cbz	r5, 22ce0 <finalize_cancel_locked+0x1c>
   22cdc:	2700      	movs	r7, #0
   22cde:	e010      	b.n	22d02 <finalize_cancel_locked+0x3e>
   22ce0:	462c      	mov	r4, r5
   22ce2:	e7fb      	b.n	22cdc <finalize_cancel_locked+0x18>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   22ce4:	462a      	mov	r2, r5
   22ce6:	4639      	mov	r1, r7
   22ce8:	480d      	ldr	r0, [pc, #52]	; (22d20 <finalize_cancel_locked+0x5c>)
   22cea:	f007 fab5 	bl	2a258 <sys_slist_remove>
			k_sem_give(&wc->sem);
   22cee:	f105 0008 	add.w	r0, r5, #8
	z_impl_k_sem_give(sem);
   22cf2:	f7ff ff3f 	bl	22b74 <z_impl_k_sem_give>
}
   22cf6:	e009      	b.n	22d0c <finalize_cancel_locked+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   22cf8:	462c      	mov	r4, r5
   22cfa:	e7ef      	b.n	22cdc <finalize_cancel_locked+0x18>
   22cfc:	4623      	mov	r3, r4
   22cfe:	4625      	mov	r5, r4
   22d00:	461c      	mov	r4, r3
   22d02:	b165      	cbz	r5, 22d1e <finalize_cancel_locked+0x5a>
		if (wc->work == work) {
   22d04:	686b      	ldr	r3, [r5, #4]
   22d06:	42b3      	cmp	r3, r6
   22d08:	d0ec      	beq.n	22ce4 <finalize_cancel_locked+0x20>
			prev = &wc->node;
   22d0a:	462f      	mov	r7, r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   22d0c:	2c00      	cmp	r4, #0
   22d0e:	d0f5      	beq.n	22cfc <finalize_cancel_locked+0x38>
	return node->next;
   22d10:	6823      	ldr	r3, [r4, #0]
   22d12:	2b00      	cmp	r3, #0
   22d14:	d0f3      	beq.n	22cfe <finalize_cancel_locked+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22d16:	2c00      	cmp	r4, #0
   22d18:	d1f1      	bne.n	22cfe <finalize_cancel_locked+0x3a>
   22d1a:	4623      	mov	r3, r4
   22d1c:	e7ef      	b.n	22cfe <finalize_cancel_locked+0x3a>
}
   22d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22d20:	20006998 	.word	0x20006998

00022d24 <init_work_cancel>:
{
   22d24:	b538      	push	{r3, r4, r5, lr}
   22d26:	4604      	mov	r4, r0
   22d28:	460d      	mov	r5, r1
	k_sem_init(&canceler->sem, 0, 1);
   22d2a:	3008      	adds	r0, #8
	return z_impl_k_sem_init(sem, initial_count, limit);
   22d2c:	2201      	movs	r2, #1
   22d2e:	2100      	movs	r1, #0
   22d30:	f007 fa7f 	bl	2a232 <z_impl_k_sem_init>
	canceler->work = work;
   22d34:	6065      	str	r5, [r4, #4]
	parent->next = child;
   22d36:	2300      	movs	r3, #0
   22d38:	6023      	str	r3, [r4, #0]
	return list->tail;
   22d3a:	4b05      	ldr	r3, [pc, #20]	; (22d50 <init_work_cancel+0x2c>)
   22d3c:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   22d3e:	b11b      	cbz	r3, 22d48 <init_work_cancel+0x24>
	parent->next = child;
   22d40:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22d42:	4b03      	ldr	r3, [pc, #12]	; (22d50 <init_work_cancel+0x2c>)
   22d44:	605c      	str	r4, [r3, #4]
}
   22d46:	bd38      	pop	{r3, r4, r5, pc}
   22d48:	4b01      	ldr	r3, [pc, #4]	; (22d50 <init_work_cancel+0x2c>)
   22d4a:	605c      	str	r4, [r3, #4]
	list->head = node;
   22d4c:	601c      	str	r4, [r3, #0]
}
   22d4e:	e7fa      	b.n	22d46 <init_work_cancel+0x22>
   22d50:	20006998 	.word	0x20006998

00022d54 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   22d54:	b570      	push	{r4, r5, r6, lr}
   22d56:	b084      	sub	sp, #16
   22d58:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   22d5a:	e016      	b.n	22d8a <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
   22d5c:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   22d60:	f023 0204 	bic.w	r2, r3, #4
   22d64:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   22d68:	f013 0f04 	tst.w	r3, #4
   22d6c:	d15a      	bne.n	22e24 <work_queue_main+0xd0>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   22d6e:	2300      	movs	r3, #0
   22d70:	9302      	str	r3, [sp, #8]
   22d72:	f04f 32ff 	mov.w	r2, #4294967295
   22d76:	f04f 33ff 	mov.w	r3, #4294967295
   22d7a:	e9cd 2300 	strd	r2, r3, [sp]
   22d7e:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
   22d82:	4631      	mov	r1, r6
   22d84:	482e      	ldr	r0, [pc, #184]	; (22e40 <work_queue_main+0xec>)
   22d86:	f000 fcef 	bl	23768 <z_sched_wait>
	__asm__ volatile(
   22d8a:	f04f 0340 	mov.w	r3, #64	; 0x40
   22d8e:	f3ef 8611 	mrs	r6, BASEPRI
   22d92:	f383 8812 	msr	BASEPRI_MAX, r3
   22d96:	f3bf 8f6f 	isb	sy
   22d9a:	4632      	mov	r2, r6
	return list->head;
   22d9c:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
   22da0:	2c00      	cmp	r4, #0
   22da2:	d0db      	beq.n	22d5c <work_queue_main+0x8>
	return node->next;
   22da4:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   22da6:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	return list->tail;
   22daa:	f8d5 10bc 	ldr.w	r1, [r5, #188]	; 0xbc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22dae:	428c      	cmp	r4, r1
   22db0:	d035      	beq.n	22e1e <work_queue_main+0xca>
	*flagp |= BIT(bit);
   22db2:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   22db6:	f043 0302 	orr.w	r3, r3, #2
   22dba:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
   22dbe:	68e3      	ldr	r3, [r4, #12]
   22dc0:	f043 0101 	orr.w	r1, r3, #1
   22dc4:	60e1      	str	r1, [r4, #12]
	*flagp &= ~BIT(bit);
   22dc6:	f023 0304 	bic.w	r3, r3, #4
   22dca:	f043 0301 	orr.w	r3, r3, #1
   22dce:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   22dd0:	6863      	ldr	r3, [r4, #4]
	__asm__ volatile(
   22dd2:	f382 8811 	msr	BASEPRI, r2
   22dd6:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   22dda:	4620      	mov	r0, r4
   22ddc:	4798      	blx	r3
	__asm__ volatile(
   22dde:	f04f 0340 	mov.w	r3, #64	; 0x40
   22de2:	f3ef 8611 	mrs	r6, BASEPRI
   22de6:	f383 8812 	msr	BASEPRI_MAX, r3
   22dea:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   22dee:	68e3      	ldr	r3, [r4, #12]
   22df0:	f023 0301 	bic.w	r3, r3, #1
   22df4:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   22df6:	f013 0f02 	tst.w	r3, #2
   22dfa:	d11d      	bne.n	22e38 <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
   22dfc:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   22e00:	f023 0302 	bic.w	r3, r3, #2
   22e04:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
   22e08:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
   22e0c:	f386 8811 	msr	BASEPRI, r6
   22e10:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   22e14:	2b00      	cmp	r3, #0
   22e16:	d1b8      	bne.n	22d8a <work_queue_main+0x36>
	z_impl_k_yield();
   22e18:	f000 fb76 	bl	23508 <z_impl_k_yield>
}
   22e1c:	e7b5      	b.n	22d8a <work_queue_main+0x36>
	list->tail = node;
   22e1e:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
		if (node != NULL) {
   22e22:	e7c6      	b.n	22db2 <work_queue_main+0x5e>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   22e24:	f105 04c8 	add.w	r4, r5, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   22e28:	2200      	movs	r2, #0
   22e2a:	2101      	movs	r1, #1
   22e2c:	4620      	mov	r0, r4
   22e2e:	f007 fd03 	bl	2a838 <z_sched_wake>
   22e32:	2800      	cmp	r0, #0
   22e34:	d1f8      	bne.n	22e28 <work_queue_main+0xd4>
   22e36:	e79a      	b.n	22d6e <work_queue_main+0x1a>
			finalize_cancel_locked(work);
   22e38:	4620      	mov	r0, r4
   22e3a:	f7ff ff43 	bl	22cc4 <finalize_cancel_locked>
   22e3e:	e7dd      	b.n	22dfc <work_queue_main+0xa8>
   22e40:	200069a0 	.word	0x200069a0

00022e44 <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   22e44:	b508      	push	{r3, lr}
   22e46:	4684      	mov	ip, r0
   22e48:	4608      	mov	r0, r1
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   22e4a:	ea53 0102 	orrs.w	r1, r3, r2
   22e4e:	d00c      	beq.n	22e6a <schedule_for_queue_locked+0x26>
	*flagp |= BIT(bit);
   22e50:	68c1      	ldr	r1, [r0, #12]
   22e52:	f041 0108 	orr.w	r1, r1, #8
   22e56:	60c1      	str	r1, [r0, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
   22e58:	f8dc 1000 	ldr.w	r1, [ip]
   22e5c:	6281      	str	r1, [r0, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   22e5e:	4905      	ldr	r1, [pc, #20]	; (22e74 <schedule_for_queue_locked+0x30>)
   22e60:	3010      	adds	r0, #16
   22e62:	f000 fcf7 	bl	23854 <z_add_timeout>

	return ret;
   22e66:	2001      	movs	r0, #1
}
   22e68:	bd08      	pop	{r3, pc}
		return submit_to_queue_locked(work, queuep);
   22e6a:	4661      	mov	r1, ip
   22e6c:	f007 fa43 	bl	2a2f6 <submit_to_queue_locked>
   22e70:	e7fa      	b.n	22e68 <schedule_for_queue_locked+0x24>
   22e72:	bf00      	nop
   22e74:	0002a357 	.word	0x0002a357

00022e78 <k_work_submit>:
{
   22e78:	b508      	push	{r3, lr}
   22e7a:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   22e7c:	4801      	ldr	r0, [pc, #4]	; (22e84 <k_work_submit+0xc>)
   22e7e:	f007 fadb 	bl	2a438 <k_work_submit_to_queue>
}
   22e82:	bd08      	pop	{r3, pc}
   22e84:	200054f0 	.word	0x200054f0

00022e88 <k_work_queue_start>:
{
   22e88:	b5f0      	push	{r4, r5, r6, r7, lr}
   22e8a:	b089      	sub	sp, #36	; 0x24
   22e8c:	4604      	mov	r4, r0
   22e8e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
   22e90:	2000      	movs	r0, #0
   22e92:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = NULL;
   22e96:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   22e9a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
   22e9e:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
   22ea2:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
   22ea6:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
	list->head = (sys_dnode_t *)list;
   22eaa:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	list->tail = (sys_dnode_t *)list;
   22eae:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	if ((cfg != NULL) && cfg->no_yield) {
   22eb2:	b1fd      	cbz	r5, 22ef4 <k_work_queue_start+0x6c>
   22eb4:	7928      	ldrb	r0, [r5, #4]
   22eb6:	b9f8      	cbnz	r0, 22ef8 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   22eb8:	2001      	movs	r0, #1
	*flagp = flags;
   22eba:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   22ebe:	f04f 36ff 	mov.w	r6, #4294967295
   22ec2:	f04f 37ff 	mov.w	r7, #4294967295
   22ec6:	e9cd 6706 	strd	r6, r7, [sp, #24]
   22eca:	2000      	movs	r0, #0
   22ecc:	9004      	str	r0, [sp, #16]
   22ece:	9303      	str	r3, [sp, #12]
   22ed0:	9002      	str	r0, [sp, #8]
   22ed2:	9001      	str	r0, [sp, #4]
   22ed4:	9400      	str	r4, [sp, #0]
   22ed6:	4b0a      	ldr	r3, [pc, #40]	; (22f00 <k_work_queue_start+0x78>)
   22ed8:	4620      	mov	r0, r4
   22eda:	f007 f8af 	bl	2a03c <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   22ede:	b125      	cbz	r5, 22eea <k_work_queue_start+0x62>
   22ee0:	6829      	ldr	r1, [r5, #0]
   22ee2:	b111      	cbz	r1, 22eea <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
   22ee4:	4620      	mov	r0, r4
   22ee6:	f7ff fc59 	bl	2279c <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   22eea:	4620      	mov	r0, r4
   22eec:	f007 f897 	bl	2a01e <z_impl_k_thread_start>
}
   22ef0:	b009      	add	sp, #36	; 0x24
   22ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
   22ef4:	2001      	movs	r0, #1
   22ef6:	e7e0      	b.n	22eba <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
   22ef8:	f240 1001 	movw	r0, #257	; 0x101
   22efc:	e7dd      	b.n	22eba <k_work_queue_start+0x32>
   22efe:	bf00      	nop
   22f00:	00022d55 	.word	0x00022d55

00022f04 <k_work_schedule>:
	return ret;
}

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   22f04:	b508      	push	{r3, lr}
   22f06:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   22f08:	4801      	ldr	r0, [pc, #4]	; (22f10 <k_work_schedule+0xc>)
   22f0a:	f007 fac1 	bl	2a490 <k_work_schedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
   22f0e:	bd08      	pop	{r3, pc}
   22f10:	200054f0 	.word	0x200054f0

00022f14 <k_work_reschedule>:
	return ret;
}

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   22f14:	b508      	push	{r3, lr}
   22f16:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   22f18:	4801      	ldr	r0, [pc, #4]	; (22f20 <k_work_reschedule+0xc>)
   22f1a:	f007 fad3 	bl	2a4c4 <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
   22f1e:	bd08      	pop	{r3, pc}
   22f20:	200054f0 	.word	0x200054f0

00022f24 <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   22f24:	89c3      	ldrh	r3, [r0, #14]
static inline bool sliceable(struct k_thread *thread)
{
	bool ret = is_preempt(thread)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_idle_thread_object(thread);
   22f26:	2b7f      	cmp	r3, #127	; 0x7f
   22f28:	d80e      	bhi.n	22f48 <sliceable+0x24>
	uint8_t state = thread->base.thread_state;
   22f2a:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
   22f2c:	f013 0f1f 	tst.w	r3, #31
   22f30:	d10c      	bne.n	22f4c <sliceable+0x28>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   22f32:	f990 200e 	ldrsb.w	r2, [r0, #14]
   22f36:	4b08      	ldr	r3, [pc, #32]	; (22f58 <sliceable+0x34>)
   22f38:	681b      	ldr	r3, [r3, #0]
   22f3a:	429a      	cmp	r2, r3
   22f3c:	db08      	blt.n	22f50 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   22f3e:	4b07      	ldr	r3, [pc, #28]	; (22f5c <sliceable+0x38>)
   22f40:	4298      	cmp	r0, r3
   22f42:	d007      	beq.n	22f54 <sliceable+0x30>
   22f44:	2001      	movs	r0, #1
   22f46:	4770      	bx	lr
   22f48:	2000      	movs	r0, #0
   22f4a:	4770      	bx	lr
   22f4c:	2000      	movs	r0, #0
   22f4e:	4770      	bx	lr
   22f50:	2000      	movs	r0, #0
   22f52:	4770      	bx	lr
   22f54:	2000      	movs	r0, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   22f56:	4770      	bx	lr
   22f58:	200069a4 	.word	0x200069a4
   22f5c:	20005380 	.word	0x20005380

00022f60 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22f60:	f1b3 3fff 	cmp.w	r3, #4294967295
   22f64:	bf08      	it	eq
   22f66:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   22f6a:	d100      	bne.n	22f6e <add_thread_timeout+0xe>
   22f6c:	4770      	bx	lr
{
   22f6e:	b508      	push	{r3, lr}
   22f70:	4902      	ldr	r1, [pc, #8]	; (22f7c <add_thread_timeout+0x1c>)
   22f72:	3018      	adds	r0, #24
   22f74:	f000 fc6e 	bl	23854 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
   22f78:	bd08      	pop	{r3, pc}
   22f7a:	bf00      	nop
   22f7c:	0002a69b 	.word	0x0002a69b

00022f80 <z_reset_time_slice>:
{
   22f80:	b510      	push	{r4, lr}
	int ret = slice_ticks;
   22f82:	4b07      	ldr	r3, [pc, #28]	; (22fa0 <z_reset_time_slice+0x20>)
   22f84:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
   22f86:	b904      	cbnz	r4, 22f8a <z_reset_time_slice+0xa>
}
   22f88:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   22f8a:	f7fd f84b 	bl	20024 <sys_clock_elapsed>
   22f8e:	4404      	add	r4, r0
   22f90:	4b04      	ldr	r3, [pc, #16]	; (22fa4 <z_reset_time_slice+0x24>)
   22f92:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   22f94:	2100      	movs	r1, #0
   22f96:	4b02      	ldr	r3, [pc, #8]	; (22fa0 <z_reset_time_slice+0x20>)
   22f98:	6818      	ldr	r0, [r3, #0]
   22f9a:	f007 fcc7 	bl	2a92c <z_set_timeout_expiry>
}
   22f9e:	e7f3      	b.n	22f88 <z_reset_time_slice+0x8>
   22fa0:	200069a8 	.word	0x200069a8
   22fa4:	2000696c 	.word	0x2000696c

00022fa8 <k_sched_time_slice_set>:
{
   22fa8:	b570      	push	{r4, r5, r6, lr}
   22faa:	4604      	mov	r4, r0
   22fac:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
   22fae:	2300      	movs	r3, #0
	__asm__ volatile(
   22fb0:	f04f 0240 	mov.w	r2, #64	; 0x40
   22fb4:	f3ef 8511 	mrs	r5, BASEPRI
   22fb8:	f382 8812 	msr	BASEPRI_MAX, r2
   22fbc:	f3bf 8f6f 	isb	sy
	z_spin_lock_set_owner(l);
#if defined(CONFIG_SPIN_LOCK_TIME_LIMIT) && (CONFIG_SPIN_LOCK_TIME_LIMIT != 0)
	l->lock_time = sys_clock_cycle_get_32();
#endif /* CONFIG_SPIN_LOCK_TIME_LIMIT */
#endif/* CONFIG_SPIN_VALIDATE */
	return k;
   22fc0:	e00e      	b.n	22fe0 <k_sched_time_slice_set+0x38>
			slice_ticks = MAX(2, slice_ticks);
   22fc2:	2802      	cmp	r0, #2
   22fc4:	bfb8      	it	lt
   22fc6:	2002      	movlt	r0, #2
   22fc8:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   22fca:	4b11      	ldr	r3, [pc, #68]	; (23010 <k_sched_time_slice_set+0x68>)
   22fcc:	601e      	str	r6, [r3, #0]
		z_reset_time_slice(_current);
   22fce:	4b11      	ldr	r3, [pc, #68]	; (23014 <k_sched_time_slice_set+0x6c>)
   22fd0:	6898      	ldr	r0, [r3, #8]
   22fd2:	f7ff ffd5 	bl	22f80 <z_reset_time_slice>
	__asm__ volatile(
   22fd6:	f385 8811 	msr	BASEPRI, r5
   22fda:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   22fde:	2301      	movs	r3, #1
   22fe0:	b9a3      	cbnz	r3, 2300c <k_sched_time_slice_set+0x64>
		_current_cpu->slice_ticks = 0;
   22fe2:	4b0c      	ldr	r3, [pc, #48]	; (23014 <k_sched_time_slice_set+0x6c>)
   22fe4:	2200      	movs	r2, #0
   22fe6:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   22fe8:	0c61      	lsrs	r1, r4, #17
   22fea:	03e0      	lsls	r0, r4, #15
   22fec:	f240 33e7 	movw	r3, #999	; 0x3e7
   22ff0:	18c0      	adds	r0, r0, r3
   22ff2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22ff6:	f04f 0300 	mov.w	r3, #0
   22ffa:	f141 0100 	adc.w	r1, r1, #0
   22ffe:	f7dd f87f 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   23002:	4b05      	ldr	r3, [pc, #20]	; (23018 <k_sched_time_slice_set+0x70>)
   23004:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   23006:	2c00      	cmp	r4, #0
   23008:	dcdb      	bgt.n	22fc2 <k_sched_time_slice_set+0x1a>
   2300a:	e7de      	b.n	22fca <k_sched_time_slice_set+0x22>
}
   2300c:	bd70      	pop	{r4, r5, r6, pc}
   2300e:	bf00      	nop
   23010:	200069a4 	.word	0x200069a4
   23014:	2000696c 	.word	0x2000696c
   23018:	200069a8 	.word	0x200069a8

0002301c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   2301c:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   2301e:	460b      	mov	r3, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   23020:	b959      	cbnz	r1, 2303a <z_reschedule+0x1e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   23022:	f3ef 8205 	mrs	r2, IPSR
   23026:	b942      	cbnz	r2, 2303a <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
   23028:	4a06      	ldr	r2, [pc, #24]	; (23044 <z_reschedule+0x28>)
   2302a:	69d0      	ldr	r0, [r2, #28]
	return new_thread != _current;
   2302c:	6892      	ldr	r2, [r2, #8]
	if (resched(key.key) && need_swap()) {
   2302e:	4290      	cmp	r0, r2
   23030:	d003      	beq.n	2303a <z_reschedule+0x1e>
	ret = arch_swap(key);
   23032:	4608      	mov	r0, r1
   23034:	f7f1 fe10 	bl	14c58 <arch_swap>
		z_swap(lock, key);
   23038:	e003      	b.n	23042 <z_reschedule+0x26>
   2303a:	f383 8811 	msr	BASEPRI, r3
   2303e:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   23042:	bd08      	pop	{r3, pc}
   23044:	2000696c 	.word	0x2000696c

00023048 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   23048:	2300      	movs	r3, #0
	__asm__ volatile(
   2304a:	f04f 0240 	mov.w	r2, #64	; 0x40
   2304e:	f3ef 8111 	mrs	r1, BASEPRI
   23052:	f382 8812 	msr	BASEPRI_MAX, r2
   23056:	f3bf 8f6f 	isb	sy
   2305a:	e009      	b.n	23070 <k_sched_lock+0x28>
	--_current->base.sched_locked;
   2305c:	4b06      	ldr	r3, [pc, #24]	; (23078 <k_sched_lock+0x30>)
   2305e:	689a      	ldr	r2, [r3, #8]
   23060:	7bd3      	ldrb	r3, [r2, #15]
   23062:	3b01      	subs	r3, #1
   23064:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   23066:	f381 8811 	msr	BASEPRI, r1
   2306a:	f3bf 8f6f 	isb	sy
   2306e:	2301      	movs	r3, #1
   23070:	2b00      	cmp	r3, #0
   23072:	d0f3      	beq.n	2305c <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   23074:	4770      	bx	lr
   23076:	bf00      	nop
   23078:	2000696c 	.word	0x2000696c

0002307c <update_cache>:
{
   2307c:	b538      	push	{r3, r4, r5, lr}
   2307e:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   23080:	4810      	ldr	r0, [pc, #64]	; (230c4 <update_cache+0x48>)
   23082:	f007 fae7 	bl	2a654 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   23086:	4605      	mov	r5, r0
   23088:	b170      	cbz	r0, 230a8 <update_cache+0x2c>
	if (preempt_ok != 0) {
   2308a:	b984      	cbnz	r4, 230ae <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   2308c:	4b0e      	ldr	r3, [pc, #56]	; (230c8 <update_cache+0x4c>)
   2308e:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   23090:	7b5a      	ldrb	r2, [r3, #13]
   23092:	f012 0f1f 	tst.w	r2, #31
   23096:	d10a      	bne.n	230ae <update_cache+0x32>
	return node->next != NULL;
   23098:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   2309a:	b942      	cbnz	r2, 230ae <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   2309c:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   2309e:	2a7f      	cmp	r2, #127	; 0x7f
   230a0:	d905      	bls.n	230ae <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   230a2:	4a09      	ldr	r2, [pc, #36]	; (230c8 <update_cache+0x4c>)
   230a4:	61d3      	str	r3, [r2, #28]
   230a6:	e00b      	b.n	230c0 <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   230a8:	4b07      	ldr	r3, [pc, #28]	; (230c8 <update_cache+0x4c>)
   230aa:	68dd      	ldr	r5, [r3, #12]
   230ac:	e7ed      	b.n	2308a <update_cache+0xe>
		if (thread != _current) {
   230ae:	4b06      	ldr	r3, [pc, #24]	; (230c8 <update_cache+0x4c>)
   230b0:	689b      	ldr	r3, [r3, #8]
   230b2:	42ab      	cmp	r3, r5
   230b4:	d002      	beq.n	230bc <update_cache+0x40>
			z_reset_time_slice(thread);
   230b6:	4628      	mov	r0, r5
   230b8:	f7ff ff62 	bl	22f80 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   230bc:	4b02      	ldr	r3, [pc, #8]	; (230c8 <update_cache+0x4c>)
   230be:	61dd      	str	r5, [r3, #28]
}
   230c0:	bd38      	pop	{r3, r4, r5, pc}
   230c2:	bf00      	nop
   230c4:	2000698c 	.word	0x2000698c
   230c8:	2000696c 	.word	0x2000696c

000230cc <move_thread_to_end_of_prio_q>:
{
   230cc:	b538      	push	{r3, r4, r5, lr}
   230ce:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   230d0:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   230d2:	f990 300d 	ldrsb.w	r3, [r0, #13]
   230d6:	2b00      	cmp	r3, #0
   230d8:	db0a      	blt.n	230f0 <move_thread_to_end_of_prio_q+0x24>
	thread->base.thread_state |= _THREAD_QUEUED;
   230da:	7b6b      	ldrb	r3, [r5, #13]
   230dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   230e0:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   230e2:	4b1b      	ldr	r3, [pc, #108]	; (23150 <move_thread_to_end_of_prio_q+0x84>)
   230e4:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   230e8:	429c      	cmp	r4, r3
   230ea:	d110      	bne.n	2310e <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   230ec:	2400      	movs	r4, #0
   230ee:	e00e      	b.n	2310e <move_thread_to_end_of_prio_q+0x42>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   230f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   230f4:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   230f6:	4601      	mov	r1, r0
   230f8:	4816      	ldr	r0, [pc, #88]	; (23154 <move_thread_to_end_of_prio_q+0x88>)
   230fa:	f007 fa7a 	bl	2a5f2 <z_priq_dumb_remove>
}
   230fe:	e7ec      	b.n	230da <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   23100:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   23102:	606b      	str	r3, [r5, #4]
	node->next = successor;
   23104:	602c      	str	r4, [r5, #0]
	prev->next = node;
   23106:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   23108:	6065      	str	r5, [r4, #4]
}
   2310a:	e017      	b.n	2313c <move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2310c:	2400      	movs	r4, #0
   2310e:	b16c      	cbz	r4, 2312c <move_thread_to_end_of_prio_q+0x60>
		if (z_sched_prio_cmp(thread, t) > 0) {
   23110:	4621      	mov	r1, r4
   23112:	4628      	mov	r0, r5
   23114:	f007 fa32 	bl	2a57c <z_sched_prio_cmp>
   23118:	2800      	cmp	r0, #0
   2311a:	dcf1      	bgt.n	23100 <move_thread_to_end_of_prio_q+0x34>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2311c:	2c00      	cmp	r4, #0
   2311e:	d0f6      	beq.n	2310e <move_thread_to_end_of_prio_q+0x42>
	return (node == list->tail) ? NULL : node->next;
   23120:	4b0b      	ldr	r3, [pc, #44]	; (23150 <move_thread_to_end_of_prio_q+0x84>)
   23122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   23124:	429c      	cmp	r4, r3
   23126:	d0f1      	beq.n	2310c <move_thread_to_end_of_prio_q+0x40>
   23128:	6824      	ldr	r4, [r4, #0]
   2312a:	e7f0      	b.n	2310e <move_thread_to_end_of_prio_q+0x42>
	sys_dnode_t *const tail = list->tail;
   2312c:	4b08      	ldr	r3, [pc, #32]	; (23150 <move_thread_to_end_of_prio_q+0x84>)
   2312e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   23130:	f103 0120 	add.w	r1, r3, #32
   23134:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   23136:	606a      	str	r2, [r5, #4]
	tail->next = node;
   23138:	6015      	str	r5, [r2, #0]
	list->tail = node;
   2313a:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   2313c:	4b04      	ldr	r3, [pc, #16]	; (23150 <move_thread_to_end_of_prio_q+0x84>)
   2313e:	6898      	ldr	r0, [r3, #8]
   23140:	42a8      	cmp	r0, r5
   23142:	bf14      	ite	ne
   23144:	2000      	movne	r0, #0
   23146:	2001      	moveq	r0, #1
   23148:	f7ff ff98 	bl	2307c <update_cache>
}
   2314c:	bd38      	pop	{r3, r4, r5, pc}
   2314e:	bf00      	nop
   23150:	2000696c 	.word	0x2000696c
   23154:	2000698c 	.word	0x2000698c

00023158 <slice_expired_locked>:
{
   23158:	b538      	push	{r3, r4, r5, lr}
   2315a:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
   2315c:	4b07      	ldr	r3, [pc, #28]	; (2317c <slice_expired_locked+0x24>)
   2315e:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
   23160:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
   23162:	f013 0f1f 	tst.w	r3, #31
   23166:	d004      	beq.n	23172 <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
   23168:	4628      	mov	r0, r5
   2316a:	f7ff ff09 	bl	22f80 <z_reset_time_slice>
}
   2316e:	4620      	mov	r0, r4
   23170:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
   23172:	4628      	mov	r0, r5
   23174:	f7ff ffaa 	bl	230cc <move_thread_to_end_of_prio_q>
   23178:	e7f6      	b.n	23168 <slice_expired_locked+0x10>
   2317a:	bf00      	nop
   2317c:	2000696c 	.word	0x2000696c

00023180 <z_time_slice>:
{
   23180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23182:	4605      	mov	r5, r0
	__asm__ volatile(
   23184:	f04f 0340 	mov.w	r3, #64	; 0x40
   23188:	f3ef 8611 	mrs	r6, BASEPRI
   2318c:	f383 8812 	msr	BASEPRI_MAX, r3
   23190:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   23194:	4b15      	ldr	r3, [pc, #84]	; (231ec <z_time_slice+0x6c>)
   23196:	6898      	ldr	r0, [r3, #8]
   23198:	4b15      	ldr	r3, [pc, #84]	; (231f0 <z_time_slice+0x70>)
   2319a:	681b      	ldr	r3, [r3, #0]
   2319c:	4298      	cmp	r0, r3
   2319e:	d011      	beq.n	231c4 <z_time_slice+0x44>
   231a0:	4634      	mov	r4, r6
	pending_current = NULL;
   231a2:	4b13      	ldr	r3, [pc, #76]	; (231f0 <z_time_slice+0x70>)
   231a4:	2200      	movs	r2, #0
   231a6:	601a      	str	r2, [r3, #0]
	int ret = slice_ticks;
   231a8:	4b12      	ldr	r3, [pc, #72]	; (231f4 <z_time_slice+0x74>)
   231aa:	681b      	ldr	r3, [r3, #0]
	if (slice_time(_current) && sliceable(_current)) {
   231ac:	b1b3      	cbz	r3, 231dc <z_time_slice+0x5c>
   231ae:	f7ff feb9 	bl	22f24 <sliceable>
   231b2:	b198      	cbz	r0, 231dc <z_time_slice+0x5c>
		if (ticks >= _current_cpu->slice_ticks) {
   231b4:	4b0d      	ldr	r3, [pc, #52]	; (231ec <z_time_slice+0x6c>)
   231b6:	691b      	ldr	r3, [r3, #16]
   231b8:	42ab      	cmp	r3, r5
   231ba:	dd0a      	ble.n	231d2 <z_time_slice+0x52>
			_current_cpu->slice_ticks -= ticks;
   231bc:	1b5b      	subs	r3, r3, r5
   231be:	4a0b      	ldr	r2, [pc, #44]	; (231ec <z_time_slice+0x6c>)
   231c0:	6113      	str	r3, [r2, #16]
   231c2:	e00e      	b.n	231e2 <z_time_slice+0x62>
		z_reset_time_slice(_current);
   231c4:	f7ff fedc 	bl	22f80 <z_reset_time_slice>
	__asm__ volatile(
   231c8:	f386 8811 	msr	BASEPRI, r6
   231cc:	f3bf 8f6f 	isb	sy
		return;
   231d0:	e00b      	b.n	231ea <z_time_slice+0x6a>
			key = slice_expired_locked(key);
   231d2:	4630      	mov	r0, r6
   231d4:	f7ff ffc0 	bl	23158 <slice_expired_locked>
   231d8:	4604      	mov	r4, r0
   231da:	e002      	b.n	231e2 <z_time_slice+0x62>
		_current_cpu->slice_ticks = 0;
   231dc:	4b03      	ldr	r3, [pc, #12]	; (231ec <z_time_slice+0x6c>)
   231de:	2200      	movs	r2, #0
   231e0:	611a      	str	r2, [r3, #16]
   231e2:	f384 8811 	msr	BASEPRI, r4
   231e6:	f3bf 8f6f 	isb	sy
}
   231ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   231ec:	2000696c 	.word	0x2000696c
   231f0:	200069a0 	.word	0x200069a0
   231f4:	200069a8 	.word	0x200069a8

000231f8 <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
   231f8:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   231fa:	f990 300d 	ldrsb.w	r3, [r0, #13]
   231fe:	2b00      	cmp	r3, #0
   23200:	db33      	blt.n	2326a <ready_thread+0x72>
{
   23202:	b570      	push	{r4, r5, r6, lr}
   23204:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   23206:	f012 0f1f 	tst.w	r2, #31
   2320a:	d101      	bne.n	23210 <ready_thread+0x18>
	return node->next != NULL;
   2320c:	6986      	ldr	r6, [r0, #24]
   2320e:	b106      	cbz	r6, 23212 <ready_thread+0x1a>
}
   23210:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
   23212:	f062 027f 	orn	r2, r2, #127	; 0x7f
   23216:	7342      	strb	r2, [r0, #13]
	return list->head == list;
   23218:	4b14      	ldr	r3, [pc, #80]	; (2326c <ready_thread+0x74>)
   2321a:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2321e:	429d      	cmp	r5, r3
   23220:	d108      	bne.n	23234 <ready_thread+0x3c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23222:	4635      	mov	r5, r6
   23224:	e006      	b.n	23234 <ready_thread+0x3c>
	sys_dnode_t *const prev = successor->prev;
   23226:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   23228:	6063      	str	r3, [r4, #4]
	node->next = successor;
   2322a:	6025      	str	r5, [r4, #0]
	prev->next = node;
   2322c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2322e:	606c      	str	r4, [r5, #4]
}
   23230:	e017      	b.n	23262 <ready_thread+0x6a>
   23232:	4635      	mov	r5, r6
   23234:	b16d      	cbz	r5, 23252 <ready_thread+0x5a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   23236:	4629      	mov	r1, r5
   23238:	4620      	mov	r0, r4
   2323a:	f007 f99f 	bl	2a57c <z_sched_prio_cmp>
   2323e:	2800      	cmp	r0, #0
   23240:	dcf1      	bgt.n	23226 <ready_thread+0x2e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23242:	2d00      	cmp	r5, #0
   23244:	d0f6      	beq.n	23234 <ready_thread+0x3c>
	return (node == list->tail) ? NULL : node->next;
   23246:	4b09      	ldr	r3, [pc, #36]	; (2326c <ready_thread+0x74>)
   23248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2324a:	429d      	cmp	r5, r3
   2324c:	d0f1      	beq.n	23232 <ready_thread+0x3a>
   2324e:	682d      	ldr	r5, [r5, #0]
   23250:	e7f0      	b.n	23234 <ready_thread+0x3c>
	sys_dnode_t *const tail = list->tail;
   23252:	4b06      	ldr	r3, [pc, #24]	; (2326c <ready_thread+0x74>)
   23254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   23256:	f103 0120 	add.w	r1, r3, #32
   2325a:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   2325c:	6062      	str	r2, [r4, #4]
	tail->next = node;
   2325e:	6014      	str	r4, [r2, #0]
	list->tail = node;
   23260:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   23262:	2000      	movs	r0, #0
   23264:	f7ff ff0a 	bl	2307c <update_cache>
}
   23268:	e7d2      	b.n	23210 <ready_thread+0x18>
   2326a:	4770      	bx	lr
   2326c:	2000696c 	.word	0x2000696c

00023270 <z_sched_start>:
{
   23270:	b510      	push	{r4, lr}
	__asm__ volatile(
   23272:	f04f 0340 	mov.w	r3, #64	; 0x40
   23276:	f3ef 8411 	mrs	r4, BASEPRI
   2327a:	f383 8812 	msr	BASEPRI_MAX, r3
   2327e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   23282:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   23284:	f013 0f04 	tst.w	r3, #4
   23288:	d104      	bne.n	23294 <z_sched_start+0x24>
	__asm__ volatile(
   2328a:	f384 8811 	msr	BASEPRI, r4
   2328e:	f3bf 8f6f 	isb	sy
}
   23292:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   23294:	f023 0304 	bic.w	r3, r3, #4
   23298:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   2329a:	f7ff ffad 	bl	231f8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   2329e:	4621      	mov	r1, r4
   232a0:	4801      	ldr	r0, [pc, #4]	; (232a8 <z_sched_start+0x38>)
   232a2:	f7ff febb 	bl	2301c <z_reschedule>
   232a6:	e7f4      	b.n	23292 <z_sched_start+0x22>
   232a8:	200069ac 	.word	0x200069ac

000232ac <unready_thread>:
{
   232ac:	b510      	push	{r4, lr}
   232ae:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   232b0:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   232b2:	f990 300d 	ldrsb.w	r3, [r0, #13]
   232b6:	2b00      	cmp	r3, #0
   232b8:	db08      	blt.n	232cc <unready_thread+0x20>
	update_cache(thread == _current);
   232ba:	4b08      	ldr	r3, [pc, #32]	; (232dc <unready_thread+0x30>)
   232bc:	6898      	ldr	r0, [r3, #8]
   232be:	42a0      	cmp	r0, r4
   232c0:	bf14      	ite	ne
   232c2:	2000      	movne	r0, #0
   232c4:	2001      	moveq	r0, #1
   232c6:	f7ff fed9 	bl	2307c <update_cache>
}
   232ca:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   232cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   232d0:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   232d2:	4601      	mov	r1, r0
   232d4:	4802      	ldr	r0, [pc, #8]	; (232e0 <unready_thread+0x34>)
   232d6:	f007 f98c 	bl	2a5f2 <z_priq_dumb_remove>
}
   232da:	e7ee      	b.n	232ba <unready_thread+0xe>
   232dc:	2000696c 	.word	0x2000696c
   232e0:	2000698c 	.word	0x2000698c

000232e4 <z_pend_curr>:
{
   232e4:	b510      	push	{r4, lr}
   232e6:	460c      	mov	r4, r1
   232e8:	4611      	mov	r1, r2
	pending_current = _current;
   232ea:	480a      	ldr	r0, [pc, #40]	; (23314 <z_pend_curr+0x30>)
   232ec:	6882      	ldr	r2, [r0, #8]
   232ee:	4b0a      	ldr	r3, [pc, #40]	; (23318 <z_pend_curr+0x34>)
   232f0:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
   232f2:	f04f 0240 	mov.w	r2, #64	; 0x40
   232f6:	f3ef 8311 	mrs	r3, BASEPRI
   232fa:	f382 8812 	msr	BASEPRI_MAX, r2
   232fe:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   23302:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   23306:	6880      	ldr	r0, [r0, #8]
   23308:	f007 fa36 	bl	2a778 <pend_locked>
   2330c:	4620      	mov	r0, r4
   2330e:	f7f1 fca3 	bl	14c58 <arch_swap>
}
   23312:	bd10      	pop	{r4, pc}
   23314:	2000696c 	.word	0x2000696c
   23318:	200069a0 	.word	0x200069a0

0002331c <z_set_prio>:
{
   2331c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23320:	4605      	mov	r5, r0
   23322:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   23324:	2300      	movs	r3, #0
   23326:	f04f 0240 	mov.w	r2, #64	; 0x40
   2332a:	f3ef 8611 	mrs	r6, BASEPRI
   2332e:	f382 8812 	msr	BASEPRI_MAX, r2
   23332:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   23336:	4618      	mov	r0, r3
   23338:	e029      	b.n	2338e <z_set_prio+0x72>
	sys_dnode_t *const prev = successor->prev;
   2333a:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   2333c:	606b      	str	r3, [r5, #4]
	node->next = successor;
   2333e:	602c      	str	r4, [r5, #0]
	prev->next = node;
   23340:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   23342:	6065      	str	r5, [r4, #4]
}
   23344:	e017      	b.n	23376 <z_set_prio+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23346:	4644      	mov	r4, r8
   23348:	b16c      	cbz	r4, 23366 <z_set_prio+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2334a:	4621      	mov	r1, r4
   2334c:	4628      	mov	r0, r5
   2334e:	f007 f915 	bl	2a57c <z_sched_prio_cmp>
   23352:	2800      	cmp	r0, #0
   23354:	dcf1      	bgt.n	2333a <z_set_prio+0x1e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23356:	2c00      	cmp	r4, #0
   23358:	d0f6      	beq.n	23348 <z_set_prio+0x2c>
	return (node == list->tail) ? NULL : node->next;
   2335a:	4b1d      	ldr	r3, [pc, #116]	; (233d0 <z_set_prio+0xb4>)
   2335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2335e:	429c      	cmp	r4, r3
   23360:	d0f1      	beq.n	23346 <z_set_prio+0x2a>
   23362:	6824      	ldr	r4, [r4, #0]
   23364:	e7f0      	b.n	23348 <z_set_prio+0x2c>
	sys_dnode_t *const tail = list->tail;
   23366:	4b1a      	ldr	r3, [pc, #104]	; (233d0 <z_set_prio+0xb4>)
   23368:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   2336a:	f103 0120 	add.w	r1, r3, #32
   2336e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   23370:	606a      	str	r2, [r5, #4]
	tail->next = node;
   23372:	6015      	str	r5, [r2, #0]
	list->tail = node;
   23374:	625d      	str	r5, [r3, #36]	; 0x24
			update_cache(1);
   23376:	2001      	movs	r0, #1
   23378:	f7ff fe80 	bl	2307c <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2337c:	2001      	movs	r0, #1
   2337e:	e001      	b.n	23384 <z_set_prio+0x68>
			thread->base.prio = prio;
   23380:	73af      	strb	r7, [r5, #14]
   23382:	2000      	movs	r0, #0
	__asm__ volatile(
   23384:	f386 8811 	msr	BASEPRI, r6
   23388:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2338c:	2301      	movs	r3, #1
   2338e:	b9e3      	cbnz	r3, 233ca <z_set_prio+0xae>
	uint8_t state = thread->base.thread_state;
   23390:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   23392:	f013 0f1f 	tst.w	r3, #31
   23396:	d1f3      	bne.n	23380 <z_set_prio+0x64>
	return node->next != NULL;
   23398:	f8d5 8018 	ldr.w	r8, [r5, #24]
   2339c:	f1b8 0f00 	cmp.w	r8, #0
   233a0:	d1ee      	bne.n	23380 <z_set_prio+0x64>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   233a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   233a6:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
   233a8:	f8df 9028 	ldr.w	r9, [pc, #40]	; 233d4 <z_set_prio+0xb8>
   233ac:	4629      	mov	r1, r5
   233ae:	4648      	mov	r0, r9
   233b0:	f007 f91f 	bl	2a5f2 <z_priq_dumb_remove>
				thread->base.prio = prio;
   233b4:	73af      	strb	r7, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   233b6:	7b6b      	ldrb	r3, [r5, #13]
   233b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   233bc:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   233be:	f8d9 4000 	ldr.w	r4, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   233c2:	454c      	cmp	r4, r9
   233c4:	d1c0      	bne.n	23348 <z_set_prio+0x2c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   233c6:	4644      	mov	r4, r8
   233c8:	e7be      	b.n	23348 <z_set_prio+0x2c>
}
   233ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   233ce:	bf00      	nop
   233d0:	2000696c 	.word	0x2000696c
   233d4:	2000698c 	.word	0x2000698c

000233d8 <z_impl_k_thread_suspend>:
{
   233d8:	b538      	push	{r3, r4, r5, lr}
   233da:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   233dc:	3018      	adds	r0, #24
   233de:	f007 fa70 	bl	2a8c2 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   233e2:	2300      	movs	r3, #0
	__asm__ volatile(
   233e4:	f04f 0240 	mov.w	r2, #64	; 0x40
   233e8:	f3ef 8511 	mrs	r5, BASEPRI
   233ec:	f382 8812 	msr	BASEPRI_MAX, r2
   233f0:	f3bf 8f6f 	isb	sy
   233f4:	e010      	b.n	23418 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   233f6:	7b63      	ldrb	r3, [r4, #13]
   233f8:	f043 0310 	orr.w	r3, r3, #16
   233fc:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   233fe:	4b11      	ldr	r3, [pc, #68]	; (23444 <z_impl_k_thread_suspend+0x6c>)
   23400:	6898      	ldr	r0, [r3, #8]
   23402:	42a0      	cmp	r0, r4
   23404:	bf14      	ite	ne
   23406:	2000      	movne	r0, #0
   23408:	2001      	moveq	r0, #1
   2340a:	f7ff fe37 	bl	2307c <update_cache>
	__asm__ volatile(
   2340e:	f385 8811 	msr	BASEPRI, r5
   23412:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   23416:	2301      	movs	r3, #1
   23418:	b963      	cbnz	r3, 23434 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   2341a:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   2341c:	f994 300d 	ldrsb.w	r3, [r4, #13]
   23420:	2b00      	cmp	r3, #0
   23422:	dae8      	bge.n	233f6 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23424:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   23428:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2342a:	4621      	mov	r1, r4
   2342c:	4806      	ldr	r0, [pc, #24]	; (23448 <z_impl_k_thread_suspend+0x70>)
   2342e:	f007 f8e0 	bl	2a5f2 <z_priq_dumb_remove>
}
   23432:	e7e0      	b.n	233f6 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   23434:	4b03      	ldr	r3, [pc, #12]	; (23444 <z_impl_k_thread_suspend+0x6c>)
   23436:	689b      	ldr	r3, [r3, #8]
   23438:	42a3      	cmp	r3, r4
   2343a:	d000      	beq.n	2343e <z_impl_k_thread_suspend+0x66>
}
   2343c:	bd38      	pop	{r3, r4, r5, pc}
		z_reschedule_unlocked();
   2343e:	f007 f8cc 	bl	2a5da <z_reschedule_unlocked>
}
   23442:	e7fb      	b.n	2343c <z_impl_k_thread_suspend+0x64>
   23444:	2000696c 	.word	0x2000696c
   23448:	2000698c 	.word	0x2000698c

0002344c <k_sched_unlock>:

void k_sched_unlock(void)
{
   2344c:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   2344e:	2300      	movs	r3, #0
	__asm__ volatile(
   23450:	f04f 0240 	mov.w	r2, #64	; 0x40
   23454:	f3ef 8411 	mrs	r4, BASEPRI
   23458:	f382 8812 	msr	BASEPRI_MAX, r2
   2345c:	f3bf 8f6f 	isb	sy
   23460:	e00c      	b.n	2347c <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   23462:	4b09      	ldr	r3, [pc, #36]	; (23488 <k_sched_unlock+0x3c>)
   23464:	689a      	ldr	r2, [r3, #8]
   23466:	7bd3      	ldrb	r3, [r2, #15]
   23468:	3301      	adds	r3, #1
   2346a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   2346c:	2000      	movs	r0, #0
   2346e:	f7ff fe05 	bl	2307c <update_cache>
	__asm__ volatile(
   23472:	f384 8811 	msr	BASEPRI, r4
   23476:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2347a:	2301      	movs	r3, #1
   2347c:	2b00      	cmp	r3, #0
   2347e:	d0f0      	beq.n	23462 <k_sched_unlock+0x16>
	LOG_DBG("scheduler unlocked (%p:%d)",
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
   23480:	f007 f8ab 	bl	2a5da <z_reschedule_unlocked>
}
   23484:	bd10      	pop	{r4, pc}
   23486:	bf00      	nop
   23488:	2000696c 	.word	0x2000696c

0002348c <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   2348c:	7b43      	ldrb	r3, [r0, #13]
   2348e:	f013 0f08 	tst.w	r3, #8
   23492:	d12a      	bne.n	234ea <end_thread+0x5e>
{
   23494:	b510      	push	{r4, lr}
   23496:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
   23498:	f043 0208 	orr.w	r2, r3, #8
   2349c:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2349e:	f023 0220 	bic.w	r2, r3, #32
   234a2:	f042 0208 	orr.w	r2, r2, #8
   234a6:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
   234a8:	f012 0f80 	tst.w	r2, #128	; 0x80
   234ac:	d113      	bne.n	234d6 <end_thread+0x4a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   234ae:	68a3      	ldr	r3, [r4, #8]
   234b0:	b113      	cbz	r3, 234b8 <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
   234b2:	4620      	mov	r0, r4
   234b4:	f007 f8a5 	bl	2a602 <unpend_thread_no_timeout>
   234b8:	f104 0018 	add.w	r0, r4, #24
   234bc:	f007 fa01 	bl	2a8c2 <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   234c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   234c4:	f007 f918 	bl	2a6f8 <unpend_all>
		update_cache(1);
   234c8:	2001      	movs	r0, #1
   234ca:	f7ff fdd7 	bl	2307c <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   234ce:	4620      	mov	r0, r4
   234d0:	f7ff f944 	bl	2275c <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   234d4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   234d6:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   234da:	f043 0308 	orr.w	r3, r3, #8
   234de:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   234e0:	4601      	mov	r1, r0
   234e2:	4802      	ldr	r0, [pc, #8]	; (234ec <end_thread+0x60>)
   234e4:	f007 f885 	bl	2a5f2 <z_priq_dumb_remove>
}
   234e8:	e7e1      	b.n	234ae <end_thread+0x22>
   234ea:	4770      	bx	lr
   234ec:	2000698c 	.word	0x2000698c

000234f0 <z_sched_init>:
{
   234f0:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   234f2:	4804      	ldr	r0, [pc, #16]	; (23504 <z_sched_init+0x14>)
   234f4:	f007 f99c 	bl	2a830 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   234f8:	2100      	movs	r1, #0
   234fa:	4608      	mov	r0, r1
   234fc:	f7ff fd54 	bl	22fa8 <k_sched_time_slice_set>
}
   23500:	bd08      	pop	{r3, pc}
   23502:	bf00      	nop
   23504:	20006988 	.word	0x20006988

00023508 <z_impl_k_yield>:
{
   23508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   2350a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2350e:	f3ef 8611 	mrs	r6, BASEPRI
   23512:	f383 8812 	msr	BASEPRI_MAX, r3
   23516:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
   2351a:	4c1d      	ldr	r4, [pc, #116]	; (23590 <z_impl_k_yield+0x88>)
   2351c:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2351e:	7b4b      	ldrb	r3, [r1, #13]
   23520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23524:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   23526:	f104 0720 	add.w	r7, r4, #32
   2352a:	4638      	mov	r0, r7
   2352c:	f007 f861 	bl	2a5f2 <z_priq_dumb_remove>
	queue_thread(_current);
   23530:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   23532:	7b6b      	ldrb	r3, [r5, #13]
   23534:	f063 037f 	orn	r3, r3, #127	; 0x7f
   23538:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   2353a:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2353c:	42bc      	cmp	r4, r7
   2353e:	d108      	bne.n	23552 <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23540:	2400      	movs	r4, #0
   23542:	e006      	b.n	23552 <z_impl_k_yield+0x4a>
	sys_dnode_t *const prev = successor->prev;
   23544:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   23546:	606b      	str	r3, [r5, #4]
	node->next = successor;
   23548:	602c      	str	r4, [r5, #0]
	prev->next = node;
   2354a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2354c:	6065      	str	r5, [r4, #4]
}
   2354e:	e017      	b.n	23580 <z_impl_k_yield+0x78>
   23550:	2400      	movs	r4, #0
   23552:	b16c      	cbz	r4, 23570 <z_impl_k_yield+0x68>
		if (z_sched_prio_cmp(thread, t) > 0) {
   23554:	4621      	mov	r1, r4
   23556:	4628      	mov	r0, r5
   23558:	f007 f810 	bl	2a57c <z_sched_prio_cmp>
   2355c:	2800      	cmp	r0, #0
   2355e:	dcf1      	bgt.n	23544 <z_impl_k_yield+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23560:	2c00      	cmp	r4, #0
   23562:	d0f6      	beq.n	23552 <z_impl_k_yield+0x4a>
	return (node == list->tail) ? NULL : node->next;
   23564:	4b0a      	ldr	r3, [pc, #40]	; (23590 <z_impl_k_yield+0x88>)
   23566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   23568:	429c      	cmp	r4, r3
   2356a:	d0f1      	beq.n	23550 <z_impl_k_yield+0x48>
   2356c:	6824      	ldr	r4, [r4, #0]
   2356e:	e7f0      	b.n	23552 <z_impl_k_yield+0x4a>
	sys_dnode_t *const tail = list->tail;
   23570:	4b07      	ldr	r3, [pc, #28]	; (23590 <z_impl_k_yield+0x88>)
   23572:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   23574:	f103 0120 	add.w	r1, r3, #32
   23578:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   2357a:	606a      	str	r2, [r5, #4]
	tail->next = node;
   2357c:	6015      	str	r5, [r2, #0]
	list->tail = node;
   2357e:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   23580:	2001      	movs	r0, #1
   23582:	f7ff fd7b 	bl	2307c <update_cache>
   23586:	4630      	mov	r0, r6
   23588:	f7f1 fb66 	bl	14c58 <arch_swap>
}
   2358c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2358e:	bf00      	nop
   23590:	2000696c 	.word	0x2000696c

00023594 <z_tick_sleep>:
{
   23594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
   23598:	ea50 0301 	orrs.w	r3, r0, r1
   2359c:	d038      	beq.n	23610 <z_tick_sleep+0x7c>
   2359e:	4604      	mov	r4, r0
   235a0:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
   235a2:	f06f 0301 	mvn.w	r3, #1
   235a6:	1a1b      	subs	r3, r3, r0
   235a8:	f04f 32ff 	mov.w	r2, #4294967295
   235ac:	eb62 0201 	sbc.w	r2, r2, r1
   235b0:	2b01      	cmp	r3, #1
   235b2:	f172 0200 	sbcs.w	r2, r2, #0
   235b6:	db2f      	blt.n	23618 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   235b8:	f06f 0501 	mvn.w	r5, #1
   235bc:	1a2d      	subs	r5, r5, r0
   235be:	f04f 0340 	mov.w	r3, #64	; 0x40
   235c2:	f3ef 8811 	mrs	r8, BASEPRI
   235c6:	f383 8812 	msr	BASEPRI_MAX, r3
   235ca:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   235ce:	4f14      	ldr	r7, [pc, #80]	; (23620 <z_tick_sleep+0x8c>)
   235d0:	68b8      	ldr	r0, [r7, #8]
   235d2:	4b14      	ldr	r3, [pc, #80]	; (23624 <z_tick_sleep+0x90>)
   235d4:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   235d6:	f7ff fe69 	bl	232ac <unready_thread>
	z_add_thread_timeout(_current, timeout);
   235da:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   235dc:	4622      	mov	r2, r4
   235de:	4633      	mov	r3, r6
   235e0:	4911      	ldr	r1, [pc, #68]	; (23628 <z_tick_sleep+0x94>)
   235e2:	3018      	adds	r0, #24
   235e4:	f000 f936 	bl	23854 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   235e8:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   235ea:	7b53      	ldrb	r3, [r2, #13]
   235ec:	f043 0310 	orr.w	r3, r3, #16
   235f0:	7353      	strb	r3, [r2, #13]
   235f2:	4640      	mov	r0, r8
   235f4:	f7f1 fb30 	bl	14c58 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   235f8:	f007 f9c3 	bl	2a982 <sys_clock_tick_get_32>
   235fc:	1a28      	subs	r0, r5, r0
   235fe:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   23602:	2801      	cmp	r0, #1
   23604:	f173 0300 	sbcs.w	r3, r3, #0
   23608:	da00      	bge.n	2360c <z_tick_sleep+0x78>
	return 0;
   2360a:	2000      	movs	r0, #0
}
   2360c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   23610:	f7ff ff7a 	bl	23508 <z_impl_k_yield>
		return 0;
   23614:	2000      	movs	r0, #0
   23616:	e7f9      	b.n	2360c <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   23618:	f007 f9b3 	bl	2a982 <sys_clock_tick_get_32>
   2361c:	1905      	adds	r5, r0, r4
   2361e:	e7ce      	b.n	235be <z_tick_sleep+0x2a>
   23620:	2000696c 	.word	0x2000696c
   23624:	200069a0 	.word	0x200069a0
   23628:	0002a69b 	.word	0x0002a69b

0002362c <z_impl_k_sleep>:
{
   2362c:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2362e:	f1b1 3fff 	cmp.w	r1, #4294967295
   23632:	bf08      	it	eq
   23634:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   23638:	d018      	beq.n	2366c <z_impl_k_sleep+0x40>
	ticks = z_tick_sleep(ticks);
   2363a:	f7ff ffab 	bl	23594 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   2363e:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
   23640:	0151      	lsls	r1, r2, #5
   23642:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
   23646:	0143      	lsls	r3, r0, #5
   23648:	1a1b      	subs	r3, r3, r0
   2364a:	eb61 0102 	sbc.w	r1, r1, r2
   2364e:	0089      	lsls	r1, r1, #2
   23650:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
   23654:	009b      	lsls	r3, r3, #2
   23656:	181b      	adds	r3, r3, r0
   23658:	eb42 0201 	adc.w	r2, r2, r1
   2365c:	00d2      	lsls	r2, r2, #3
   2365e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   23662:	f3c3 3310 	ubfx	r3, r3, #12, #17
   23666:	ea43 4042 	orr.w	r0, r3, r2, lsl #17
}
   2366a:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
   2366c:	4b03      	ldr	r3, [pc, #12]	; (2367c <z_impl_k_sleep+0x50>)
   2366e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   23670:	f7ff feb2 	bl	233d8 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   23674:	f04f 30ff 	mov.w	r0, #4294967295
   23678:	e7f7      	b.n	2366a <z_impl_k_sleep+0x3e>
   2367a:	bf00      	nop
   2367c:	2000696c 	.word	0x2000696c

00023680 <z_impl_k_usleep>:
{
   23680:	b508      	push	{r3, lr}
	ticks = k_us_to_ticks_ceil64(us);
   23682:	17c1      	asrs	r1, r0, #31
   23684:	03c9      	lsls	r1, r1, #15
   23686:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   2368a:	03c0      	lsls	r0, r0, #15
   2368c:	4b15      	ldr	r3, [pc, #84]	; (236e4 <z_impl_k_usleep+0x64>)
   2368e:	18c0      	adds	r0, r0, r3
   23690:	4a15      	ldr	r2, [pc, #84]	; (236e8 <z_impl_k_usleep+0x68>)
   23692:	f04f 0300 	mov.w	r3, #0
   23696:	f141 0100 	adc.w	r1, r1, #0
   2369a:	f7dc fd31 	bl	100 <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
   2369e:	17c1      	asrs	r1, r0, #31
   236a0:	f7ff ff78 	bl	23594 <z_tick_sleep>
	return k_ticks_to_us_floor64(ticks);
   236a4:	ea4f 7ce0 	mov.w	ip, r0, asr #31
   236a8:	ea4f 124c 	mov.w	r2, ip, lsl #5
   236ac:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   236b0:	0143      	lsls	r3, r0, #5
   236b2:	1a1b      	subs	r3, r3, r0
   236b4:	eb62 020c 	sbc.w	r2, r2, ip
   236b8:	0252      	lsls	r2, r2, #9
   236ba:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
   236be:	025b      	lsls	r3, r3, #9
   236c0:	181b      	adds	r3, r3, r0
   236c2:	eb4c 0202 	adc.w	r2, ip, r2
   236c6:	ea4f 1e82 	mov.w	lr, r2, lsl #6
   236ca:	ea4e 6e93 	orr.w	lr, lr, r3, lsr #26
   236ce:	0199      	lsls	r1, r3, #6
   236d0:	1acb      	subs	r3, r1, r3
   236d2:	eb6e 0e02 	sbc.w	lr, lr, r2
   236d6:	181b      	adds	r3, r3, r0
   236d8:	eb4c 000e 	adc.w	r0, ip, lr
   236dc:	0bdb      	lsrs	r3, r3, #15
}
   236de:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
   236e2:	bd08      	pop	{r3, pc}
   236e4:	000f423f 	.word	0x000f423f
   236e8:	000f4240 	.word	0x000f4240

000236ec <z_impl_z_current_get>:
}
   236ec:	4b01      	ldr	r3, [pc, #4]	; (236f4 <z_impl_z_current_get+0x8>)
   236ee:	6898      	ldr	r0, [r3, #8]
   236f0:	4770      	bx	lr
   236f2:	bf00      	nop
   236f4:	2000696c 	.word	0x2000696c

000236f8 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   236f8:	b570      	push	{r4, r5, r6, lr}
   236fa:	f04f 0340 	mov.w	r3, #64	; 0x40
   236fe:	f3ef 8511 	mrs	r5, BASEPRI
   23702:	f383 8812 	msr	BASEPRI_MAX, r3
   23706:	f3bf 8f6f 	isb	sy
   2370a:	462e      	mov	r6, r5
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   2370c:	7b03      	ldrb	r3, [r0, #12]
   2370e:	f013 0f01 	tst.w	r3, #1
   23712:	d109      	bne.n	23728 <z_thread_abort+0x30>
   23714:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   23716:	7b43      	ldrb	r3, [r0, #13]
   23718:	f013 0f08 	tst.w	r3, #8
   2371c:	d00f      	beq.n	2373e <z_thread_abort+0x46>
	__asm__ volatile(
   2371e:	f385 8811 	msr	BASEPRI, r5
   23722:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
   23726:	e009      	b.n	2373c <z_thread_abort+0x44>
   23728:	f385 8811 	msr	BASEPRI, r5
   2372c:	f3bf 8f6f 	isb	sy
		k_panic();
   23730:	4040      	eors	r0, r0
   23732:	f380 8811 	msr	BASEPRI, r0
   23736:	f04f 0004 	mov.w	r0, #4
   2373a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   2373c:	bd70      	pop	{r4, r5, r6, pc}
	end_thread(thread);
   2373e:	f7ff fea5 	bl	2348c <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   23742:	4b08      	ldr	r3, [pc, #32]	; (23764 <z_thread_abort+0x6c>)
   23744:	689b      	ldr	r3, [r3, #8]
   23746:	42a3      	cmp	r3, r4
   23748:	d004      	beq.n	23754 <z_thread_abort+0x5c>
   2374a:	f386 8811 	msr	BASEPRI, r6
   2374e:	f3bf 8f6f 	isb	sy
   23752:	e7f3      	b.n	2373c <z_thread_abort+0x44>
   23754:	f3ef 8305 	mrs	r3, IPSR
   23758:	2b00      	cmp	r3, #0
   2375a:	d1f6      	bne.n	2374a <z_thread_abort+0x52>
   2375c:	4628      	mov	r0, r5
   2375e:	f7f1 fa7b 	bl	14c58 <arch_swap>
	return ret;
   23762:	e7f2      	b.n	2374a <z_thread_abort+0x52>
   23764:	2000696c 	.word	0x2000696c

00023768 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   23768:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
   2376c:	b083      	sub	sp, #12
   2376e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   23770:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   23774:	e9cd bc00 	strd	fp, ip, [sp]
   23778:	f7ff fdb4 	bl	232e4 <z_pend_curr>

	if (data != NULL) {
   2377c:	b11c      	cbz	r4, 23786 <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
   2377e:	4b03      	ldr	r3, [pc, #12]	; (2378c <z_sched_wait+0x24>)
   23780:	689b      	ldr	r3, [r3, #8]
   23782:	695b      	ldr	r3, [r3, #20]
   23784:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   23786:	b003      	add	sp, #12
   23788:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
   2378c:	2000696c 	.word	0x2000696c

00023790 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   23790:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   23792:	4806      	ldr	r0, [pc, #24]	; (237ac <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   23794:	4a06      	ldr	r2, [pc, #24]	; (237b0 <z_data_copy+0x20>)
   23796:	1a12      	subs	r2, r2, r0
   23798:	4906      	ldr	r1, [pc, #24]	; (237b4 <z_data_copy+0x24>)
   2379a:	f006 fb60 	bl	29e5e <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   2379e:	4a06      	ldr	r2, [pc, #24]	; (237b8 <z_data_copy+0x28>)
   237a0:	4906      	ldr	r1, [pc, #24]	; (237bc <z_data_copy+0x2c>)
   237a2:	4807      	ldr	r0, [pc, #28]	; (237c0 <z_data_copy+0x30>)
   237a4:	f006 fb5b 	bl	29e5e <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   237a8:	bd08      	pop	{r3, pc}
   237aa:	bf00      	nop
   237ac:	20000000 	.word	0x20000000
   237b0:	20000b68 	.word	0x20000b68
   237b4:	0002dd40 	.word	0x0002dd40
   237b8:	00000000 	.word	0x00000000
   237bc:	0002dd40 	.word	0x0002dd40
   237c0:	20000000 	.word	0x20000000

000237c4 <first>:
	return list->head == list;
   237c4:	4b03      	ldr	r3, [pc, #12]	; (237d4 <first+0x10>)
   237c6:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   237c8:	4298      	cmp	r0, r3
   237ca:	d000      	beq.n	237ce <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   237cc:	4770      	bx	lr
   237ce:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   237d0:	e7fc      	b.n	237cc <first+0x8>
   237d2:	bf00      	nop
   237d4:	20000938 	.word	0x20000938

000237d8 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   237d8:	b130      	cbz	r0, 237e8 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   237da:	4a04      	ldr	r2, [pc, #16]	; (237ec <next+0x14>)
   237dc:	6852      	ldr	r2, [r2, #4]
   237de:	4290      	cmp	r0, r2
   237e0:	d001      	beq.n	237e6 <next+0xe>
   237e2:	6800      	ldr	r0, [r0, #0]
   237e4:	4770      	bx	lr
   237e6:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   237e8:	4770      	bx	lr
   237ea:	bf00      	nop
   237ec:	20000938 	.word	0x20000938

000237f0 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   237f0:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   237f2:	4b04      	ldr	r3, [pc, #16]	; (23804 <elapsed+0x14>)
   237f4:	681b      	ldr	r3, [r3, #0]
   237f6:	b10b      	cbz	r3, 237fc <elapsed+0xc>
   237f8:	2000      	movs	r0, #0
}
   237fa:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   237fc:	f7fc fc12 	bl	20024 <sys_clock_elapsed>
   23800:	e7fb      	b.n	237fa <elapsed+0xa>
   23802:	bf00      	nop
   23804:	200069ac 	.word	0x200069ac

00023808 <next_timeout>:

static int32_t next_timeout(void)
{
   23808:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   2380a:	f7ff ffdb 	bl	237c4 <first>
   2380e:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   23810:	f7ff ffee 	bl	237f0 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   23814:	b17c      	cbz	r4, 23836 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   23816:	6923      	ldr	r3, [r4, #16]
   23818:	6962      	ldr	r2, [r4, #20]
   2381a:	1a1b      	subs	r3, r3, r0
   2381c:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   23820:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   23824:	f172 0100 	sbcs.w	r1, r2, #0
   23828:	da08      	bge.n	2383c <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   2382a:	2a00      	cmp	r2, #0
   2382c:	db01      	blt.n	23832 <next_timeout+0x2a>
   2382e:	4618      	mov	r0, r3
   23830:	e006      	b.n	23840 <next_timeout+0x38>
   23832:	2300      	movs	r3, #0
   23834:	e7fb      	b.n	2382e <next_timeout+0x26>
		ret = MAX_WAIT;
   23836:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2383a:	e001      	b.n	23840 <next_timeout+0x38>
   2383c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   23840:	4b03      	ldr	r3, [pc, #12]	; (23850 <next_timeout+0x48>)
   23842:	691b      	ldr	r3, [r3, #16]
   23844:	b113      	cbz	r3, 2384c <next_timeout+0x44>
   23846:	4283      	cmp	r3, r0
   23848:	da00      	bge.n	2384c <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
   2384a:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   2384c:	bd10      	pop	{r4, pc}
   2384e:	bf00      	nop
   23850:	2000696c 	.word	0x2000696c

00023854 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23854:	f1b3 3fff 	cmp.w	r3, #4294967295
   23858:	bf08      	it	eq
   2385a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   2385e:	d07b      	beq.n	23958 <z_add_timeout+0x104>
{
   23860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23864:	4604      	mov	r4, r0
   23866:	4692      	mov	sl, r2
   23868:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   2386a:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   2386c:	2300      	movs	r3, #0
	__asm__ volatile(
   2386e:	f04f 0240 	mov.w	r2, #64	; 0x40
   23872:	f3ef 8711 	mrs	r7, BASEPRI
   23876:	f382 8812 	msr	BASEPRI_MAX, r2
   2387a:	f3bf 8f6f 	isb	sy
   2387e:	e026      	b.n	238ce <z_add_timeout+0x7a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   23880:	f11a 0801 	adds.w	r8, sl, #1
   23884:	f145 0900 	adc.w	r9, r5, #0
   23888:	f7ff ffb2 	bl	237f0 <elapsed>
   2388c:	eb18 0300 	adds.w	r3, r8, r0
   23890:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
   23894:	6123      	str	r3, [r4, #16]
   23896:	6160      	str	r0, [r4, #20]
   23898:	e03b      	b.n	23912 <z_add_timeout+0xbe>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   2389a:	1a52      	subs	r2, r2, r1
   2389c:	eb66 0303 	sbc.w	r3, r6, r3
   238a0:	6102      	str	r2, [r0, #16]
   238a2:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
   238a4:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
   238a6:	6063      	str	r3, [r4, #4]
	node->next = successor;
   238a8:	6020      	str	r0, [r4, #0]
	prev->next = node;
   238aa:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   238ac:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   238ae:	e005      	b.n	238bc <z_add_timeout+0x68>
	sys_dnode_t *const tail = list->tail;
   238b0:	4b2a      	ldr	r3, [pc, #168]	; (2395c <z_add_timeout+0x108>)
   238b2:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   238b4:	6023      	str	r3, [r4, #0]
	node->prev = tail;
   238b6:	6062      	str	r2, [r4, #4]
	tail->next = node;
   238b8:	6014      	str	r4, [r2, #0]
	list->tail = node;
   238ba:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   238bc:	f7ff ff82 	bl	237c4 <first>
   238c0:	4284      	cmp	r4, r0
   238c2:	d03a      	beq.n	2393a <z_add_timeout+0xe6>
	__asm__ volatile(
   238c4:	f387 8811 	msr	BASEPRI, r7
   238c8:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   238cc:	2301      	movs	r3, #1
   238ce:	2b00      	cmp	r3, #0
   238d0:	d140      	bne.n	23954 <z_add_timeout+0x100>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   238d2:	4653      	mov	r3, sl
   238d4:	f06f 0101 	mvn.w	r1, #1
   238d8:	ebb1 010a 	subs.w	r1, r1, sl
   238dc:	f04f 30ff 	mov.w	r0, #4294967295
   238e0:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   238e4:	2a00      	cmp	r2, #0
   238e6:	dbcb      	blt.n	23880 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   238e8:	4a1d      	ldr	r2, [pc, #116]	; (23960 <z_add_timeout+0x10c>)
   238ea:	6811      	ldr	r1, [r2, #0]
   238ec:	6852      	ldr	r2, [r2, #4]
   238ee:	185b      	adds	r3, r3, r1
   238f0:	eb42 0205 	adc.w	r2, r2, r5
   238f4:	f06f 0101 	mvn.w	r1, #1
   238f8:	1ac9      	subs	r1, r1, r3
   238fa:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
   238fe:	4608      	mov	r0, r1
   23900:	461a      	mov	r2, r3
   23902:	2901      	cmp	r1, #1
   23904:	f173 0300 	sbcs.w	r3, r3, #0
   23908:	da01      	bge.n	2390e <z_add_timeout+0xba>
   2390a:	2001      	movs	r0, #1
   2390c:	2200      	movs	r2, #0
   2390e:	6120      	str	r0, [r4, #16]
   23910:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   23912:	f7ff ff57 	bl	237c4 <first>
   23916:	2800      	cmp	r0, #0
   23918:	d0ca      	beq.n	238b0 <z_add_timeout+0x5c>
			if (t->dticks > to->dticks) {
   2391a:	6902      	ldr	r2, [r0, #16]
   2391c:	6946      	ldr	r6, [r0, #20]
   2391e:	6921      	ldr	r1, [r4, #16]
   23920:	6963      	ldr	r3, [r4, #20]
   23922:	4291      	cmp	r1, r2
   23924:	eb73 0e06 	sbcs.w	lr, r3, r6
   23928:	dbb7      	blt.n	2389a <z_add_timeout+0x46>
			to->dticks -= t->dticks;
   2392a:	1a89      	subs	r1, r1, r2
   2392c:	eb63 0306 	sbc.w	r3, r3, r6
   23930:	6121      	str	r1, [r4, #16]
   23932:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   23934:	f7ff ff50 	bl	237d8 <next>
   23938:	e7ed      	b.n	23916 <z_add_timeout+0xc2>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   2393a:	f7ff ff65 	bl	23808 <next_timeout>

			if (next_time == 0 ||
   2393e:	4603      	mov	r3, r0
   23940:	b118      	cbz	r0, 2394a <z_add_timeout+0xf6>
			    _current_cpu->slice_ticks != next_time) {
   23942:	4a08      	ldr	r2, [pc, #32]	; (23964 <z_add_timeout+0x110>)
   23944:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   23946:	4282      	cmp	r2, r0
   23948:	d0bc      	beq.n	238c4 <z_add_timeout+0x70>
				sys_clock_set_timeout(next_time, false);
   2394a:	2100      	movs	r1, #0
   2394c:	4618      	mov	r0, r3
   2394e:	f7fc fb2d 	bl	1ffac <sys_clock_set_timeout>
   23952:	e7b7      	b.n	238c4 <z_add_timeout+0x70>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   23954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23958:	4770      	bx	lr
   2395a:	bf00      	nop
   2395c:	20000938 	.word	0x20000938
   23960:	200055c8 	.word	0x200055c8
   23964:	2000696c 	.word	0x2000696c

00023968 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   23968:	b570      	push	{r4, r5, r6, lr}
   2396a:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   2396c:	f7ff fc08 	bl	23180 <z_time_slice>
	__asm__ volatile(
   23970:	f04f 0340 	mov.w	r3, #64	; 0x40
   23974:	f3ef 8611 	mrs	r6, BASEPRI
   23978:	f383 8812 	msr	BASEPRI_MAX, r3
   2397c:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   23980:	4b28      	ldr	r3, [pc, #160]	; (23a24 <sys_clock_announce+0xbc>)
   23982:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   23984:	e021      	b.n	239ca <sys_clock_announce+0x62>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   23986:	4a28      	ldr	r2, [pc, #160]	; (23a28 <sys_clock_announce+0xc0>)
   23988:	6813      	ldr	r3, [r2, #0]
   2398a:	6851      	ldr	r1, [r2, #4]
   2398c:	195b      	adds	r3, r3, r5
   2398e:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
   23992:	6013      	str	r3, [r2, #0]
   23994:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
   23996:	2200      	movs	r2, #0
   23998:	2300      	movs	r3, #0
   2399a:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   2399e:	4620      	mov	r0, r4
   239a0:	f006 ff78 	bl	2a894 <remove_timeout>
	__asm__ volatile(
   239a4:	f386 8811 	msr	BASEPRI, r6
   239a8:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   239ac:	68a3      	ldr	r3, [r4, #8]
   239ae:	4620      	mov	r0, r4
   239b0:	4798      	blx	r3
	__asm__ volatile(
   239b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   239b6:	f3ef 8611 	mrs	r6, BASEPRI
   239ba:	f383 8812 	msr	BASEPRI_MAX, r3
   239be:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
   239c2:	4a18      	ldr	r2, [pc, #96]	; (23a24 <sys_clock_announce+0xbc>)
   239c4:	6813      	ldr	r3, [r2, #0]
   239c6:	1b5b      	subs	r3, r3, r5
   239c8:	6013      	str	r3, [r2, #0]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   239ca:	f7ff fefb 	bl	237c4 <first>
   239ce:	4604      	mov	r4, r0
   239d0:	b138      	cbz	r0, 239e2 <sys_clock_announce+0x7a>
   239d2:	6905      	ldr	r5, [r0, #16]
   239d4:	6941      	ldr	r1, [r0, #20]
   239d6:	4b13      	ldr	r3, [pc, #76]	; (23a24 <sys_clock_announce+0xbc>)
   239d8:	681a      	ldr	r2, [r3, #0]
   239da:	17d3      	asrs	r3, r2, #31
   239dc:	42aa      	cmp	r2, r5
   239de:	418b      	sbcs	r3, r1
   239e0:	dad1      	bge.n	23986 <sys_clock_announce+0x1e>
	}

	if (first() != NULL) {
   239e2:	b144      	cbz	r4, 239f6 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
   239e4:	6923      	ldr	r3, [r4, #16]
   239e6:	6962      	ldr	r2, [r4, #20]
   239e8:	490e      	ldr	r1, [pc, #56]	; (23a24 <sys_clock_announce+0xbc>)
   239ea:	6809      	ldr	r1, [r1, #0]
   239ec:	1a5b      	subs	r3, r3, r1
   239ee:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
   239f2:	6123      	str	r3, [r4, #16]
   239f4:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
   239f6:	4a0c      	ldr	r2, [pc, #48]	; (23a28 <sys_clock_announce+0xc0>)
   239f8:	4d0a      	ldr	r5, [pc, #40]	; (23a24 <sys_clock_announce+0xbc>)
   239fa:	6828      	ldr	r0, [r5, #0]
   239fc:	6813      	ldr	r3, [r2, #0]
   239fe:	6851      	ldr	r1, [r2, #4]
   23a00:	181b      	adds	r3, r3, r0
   23a02:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
   23a06:	6013      	str	r3, [r2, #0]
   23a08:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
   23a0a:	2400      	movs	r4, #0
   23a0c:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   23a0e:	f7ff fefb 	bl	23808 <next_timeout>
   23a12:	4621      	mov	r1, r4
   23a14:	f7fc faca 	bl	1ffac <sys_clock_set_timeout>
	__asm__ volatile(
   23a18:	f386 8811 	msr	BASEPRI, r6
   23a1c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   23a20:	bd70      	pop	{r4, r5, r6, pc}
   23a22:	bf00      	nop
   23a24:	200069ac 	.word	0x200069ac
   23a28:	200055c8 	.word	0x200055c8

00023a2c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   23a2c:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   23a2e:	2200      	movs	r2, #0
	__asm__ volatile(
   23a30:	f04f 0340 	mov.w	r3, #64	; 0x40
   23a34:	f3ef 8411 	mrs	r4, BASEPRI
   23a38:	f383 8812 	msr	BASEPRI_MAX, r3
   23a3c:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   23a40:	4613      	mov	r3, r2
   23a42:	4611      	mov	r1, r2
   23a44:	e00c      	b.n	23a60 <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
   23a46:	f7ff fed3 	bl	237f0 <elapsed>
   23a4a:	4a07      	ldr	r2, [pc, #28]	; (23a68 <sys_clock_tick_get+0x3c>)
   23a4c:	6813      	ldr	r3, [r2, #0]
   23a4e:	6851      	ldr	r1, [r2, #4]
   23a50:	18c3      	adds	r3, r0, r3
   23a52:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
   23a56:	f384 8811 	msr	BASEPRI, r4
   23a5a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   23a5e:	2201      	movs	r2, #1
   23a60:	2a00      	cmp	r2, #0
   23a62:	d0f0      	beq.n	23a46 <sys_clock_tick_get+0x1a>
	}
	return t;
}
   23a64:	4618      	mov	r0, r3
   23a66:	bd10      	pop	{r4, pc}
   23a68:	200055c8 	.word	0x200055c8

00023a6c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   23a6c:	b538      	push	{r3, r4, r5, lr}
   23a6e:	4604      	mov	r4, r0
	__asm__ volatile(
   23a70:	f04f 0340 	mov.w	r3, #64	; 0x40
   23a74:	f3ef 8511 	mrs	r5, BASEPRI
   23a78:	f383 8812 	msr	BASEPRI_MAX, r3
   23a7c:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   23a80:	6a82      	ldr	r2, [r0, #40]	; 0x28
   23a82:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   23a84:	ea52 0103 	orrs.w	r1, r2, r3
   23a88:	d005      	beq.n	23a96 <z_timer_expiration_handler+0x2a>
   23a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
   23a8e:	bf08      	it	eq
   23a90:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   23a94:	d128      	bne.n	23ae8 <z_timer_expiration_handler+0x7c>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   23a96:	6b23      	ldr	r3, [r4, #48]	; 0x30
   23a98:	3301      	adds	r3, #1
   23a9a:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   23a9c:	6a23      	ldr	r3, [r4, #32]
   23a9e:	b173      	cbz	r3, 23abe <z_timer_expiration_handler+0x52>
	__asm__ volatile(
   23aa0:	f385 8811 	msr	BASEPRI, r5
   23aa4:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   23aa8:	6a23      	ldr	r3, [r4, #32]
   23aaa:	4620      	mov	r0, r4
   23aac:	4798      	blx	r3
	__asm__ volatile(
   23aae:	f04f 0340 	mov.w	r3, #64	; 0x40
   23ab2:	f3ef 8511 	mrs	r5, BASEPRI
   23ab6:	f383 8812 	msr	BASEPRI_MAX, r3
   23aba:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   23abe:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   23ac2:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23ac4:	42a3      	cmp	r3, r4
   23ac6:	d038      	beq.n	23b3a <z_timer_expiration_handler+0xce>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   23ac8:	2c00      	cmp	r4, #0
   23aca:	d036      	beq.n	23b3a <z_timer_expiration_handler+0xce>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
   23acc:	4620      	mov	r0, r4
   23ace:	f006 fd5f 	bl	2a590 <z_unpend_thread_no_timeout>
   23ad2:	2300      	movs	r3, #0
   23ad4:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	__asm__ volatile(
   23ad8:	f385 8811 	msr	BASEPRI, r5
   23adc:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
   23ae0:	4620      	mov	r0, r4
   23ae2:	f006 fdbe 	bl	2a662 <z_ready_thread>
}
   23ae6:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_uptime_ticks();
   23ae8:	f006 ff4f 	bl	2a98a <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   23aec:	3001      	adds	r0, #1
   23aee:	f141 0100 	adc.w	r1, r1, #0
   23af2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23af4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   23af6:	18c0      	adds	r0, r0, r3
   23af8:	eb41 0102 	adc.w	r1, r1, r2
   23afc:	2801      	cmp	r0, #1
   23afe:	f171 0100 	sbcs.w	r1, r1, #0
   23b02:	da08      	bge.n	23b16 <z_timer_expiration_handler+0xaa>
   23b04:	f06f 0201 	mvn.w	r2, #1
   23b08:	f04f 33ff 	mov.w	r3, #4294967295
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   23b0c:	490d      	ldr	r1, [pc, #52]	; (23b44 <z_timer_expiration_handler+0xd8>)
   23b0e:	4620      	mov	r0, r4
   23b10:	f7ff fea0 	bl	23854 <z_add_timeout>
   23b14:	e7bf      	b.n	23a96 <z_timer_expiration_handler+0x2a>
   23b16:	f006 ff38 	bl	2a98a <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   23b1a:	3001      	adds	r0, #1
   23b1c:	f141 0300 	adc.w	r3, r1, #0
   23b20:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   23b22:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   23b24:	1880      	adds	r0, r0, r2
   23b26:	eb43 0301 	adc.w	r3, r3, r1
   23b2a:	f06f 0201 	mvn.w	r2, #1
   23b2e:	1a12      	subs	r2, r2, r0
   23b30:	f04f 31ff 	mov.w	r1, #4294967295
   23b34:	eb61 0303 	sbc.w	r3, r1, r3
   23b38:	e7e8      	b.n	23b0c <z_timer_expiration_handler+0xa0>
   23b3a:	f385 8811 	msr	BASEPRI, r5
   23b3e:	f3bf 8f6f 	isb	sy
		return;
   23b42:	e7d0      	b.n	23ae6 <z_timer_expiration_handler+0x7a>
   23b44:	00023a6d 	.word	0x00023a6d

00023b48 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   23b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23b4c:	461e      	mov	r6, r3
   23b4e:	9f06      	ldr	r7, [sp, #24]
   23b50:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   23b54:	f1b3 3fff 	cmp.w	r3, #4294967295
   23b58:	bf08      	it	eq
   23b5a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   23b5e:	d02f      	beq.n	23bc0 <z_impl_k_timer_start+0x78>
   23b60:	4605      	mov	r5, r0
   23b62:	4614      	mov	r4, r2
   23b64:	4613      	mov	r3, r2
   23b66:	4631      	mov	r1, r6
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   23b68:	4640      	mov	r0, r8
   23b6a:	f1b8 3fff 	cmp.w	r8, #4294967295
   23b6e:	bf08      	it	eq
   23b70:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   23b74:	d00d      	beq.n	23b92 <z_impl_k_timer_start+0x4a>
   23b76:	ea57 0c08 	orrs.w	ip, r7, r8
   23b7a:	d00a      	beq.n	23b92 <z_impl_k_timer_start+0x4a>
	    Z_TICK_ABS(period.ticks) < 0) {
   23b7c:	f06f 0c01 	mvn.w	ip, #1
   23b80:	ebbc 0c07 	subs.w	ip, ip, r7
   23b84:	f04f 3cff 	mov.w	ip, #4294967295
   23b88:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   23b8c:	f1bc 0f00 	cmp.w	ip, #0
   23b90:	db18      	blt.n	23bc4 <z_impl_k_timer_start+0x7c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   23b92:	f06f 0201 	mvn.w	r2, #1
   23b96:	1ad2      	subs	r2, r2, r3
   23b98:	f04f 32ff 	mov.w	r2, #4294967295
   23b9c:	eb62 0201 	sbc.w	r2, r2, r1
   23ba0:	2a00      	cmp	r2, #0
   23ba2:	db1a      	blt.n	23bda <z_impl_k_timer_start+0x92>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
   23ba4:	4628      	mov	r0, r5
   23ba6:	f006 fe8c 	bl	2a8c2 <z_abort_timeout>
	timer->period = period;
   23baa:	62af      	str	r7, [r5, #40]	; 0x28
   23bac:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
   23bb0:	2300      	movs	r3, #0
   23bb2:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   23bb4:	4622      	mov	r2, r4
   23bb6:	4633      	mov	r3, r6
   23bb8:	490e      	ldr	r1, [pc, #56]	; (23bf4 <z_impl_k_timer_start+0xac>)
   23bba:	4628      	mov	r0, r5
   23bbc:	f7ff fe4a 	bl	23854 <z_add_timeout>
		     duration);
}
   23bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
   23bc4:	2f02      	cmp	r7, #2
   23bc6:	f170 0000 	sbcs.w	r0, r0, #0
   23bca:	da02      	bge.n	23bd2 <z_impl_k_timer_start+0x8a>
   23bcc:	2702      	movs	r7, #2
   23bce:	f04f 0800 	mov.w	r8, #0
   23bd2:	3f01      	subs	r7, #1
   23bd4:	f148 38ff 	adc.w	r8, r8, #4294967295
   23bd8:	e7db      	b.n	23b92 <z_impl_k_timer_start+0x4a>
		duration.ticks = MAX(duration.ticks - 1, 0);
   23bda:	461c      	mov	r4, r3
   23bdc:	460e      	mov	r6, r1
   23bde:	2b01      	cmp	r3, #1
   23be0:	f171 0100 	sbcs.w	r1, r1, #0
   23be4:	da01      	bge.n	23bea <z_impl_k_timer_start+0xa2>
   23be6:	2401      	movs	r4, #1
   23be8:	2600      	movs	r6, #0
   23bea:	3c01      	subs	r4, #1
   23bec:	f146 36ff 	adc.w	r6, r6, #4294967295
   23bf0:	e7d8      	b.n	23ba4 <z_impl_k_timer_start+0x5c>
   23bf2:	bf00      	nop
   23bf4:	00023a6d 	.word	0x00023a6d

00023bf8 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   23bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23bfc:	b083      	sub	sp, #12
   23bfe:	4607      	mov	r7, r0
   23c00:	4616      	mov	r6, r2
   23c02:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   23c04:	4b28      	ldr	r3, [pc, #160]	; (23ca8 <z_impl_k_poll+0xb0>)
   23c06:	689c      	ldr	r4, [r3, #8]

	poller->is_polling = true;
   23c08:	2301      	movs	r3, #1
   23c0a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	poller->mode = MODE_POLL;
   23c0e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   23c12:	ea55 0302 	orrs.w	r3, r5, r2
   23c16:	bf0c      	ite	eq
   23c18:	2301      	moveq	r3, #1
   23c1a:	2300      	movne	r3, #0
   23c1c:	f104 0260 	add.w	r2, r4, #96	; 0x60
   23c20:	f006 ffed 	bl	2abfe <register_events>
   23c24:	4680      	mov	r8, r0
	__asm__ volatile(
   23c26:	f04f 0340 	mov.w	r3, #64	; 0x40
   23c2a:	f3ef 8111 	mrs	r1, BASEPRI
   23c2e:	f383 8812 	msr	BASEPRI_MAX, r3
   23c32:	f3bf 8f6f 	isb	sy
   23c36:	4689      	mov	r9, r1
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   23c38:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   23c3c:	b30b      	cbz	r3, 23c82 <z_impl_k_poll+0x8a>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   23c3e:	2300      	movs	r3, #0
   23c40:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23c44:	ea55 0306 	orrs.w	r3, r5, r6
   23c48:	d026      	beq.n	23c98 <z_impl_k_poll+0xa0>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   23c4a:	9600      	str	r6, [sp, #0]
   23c4c:	9501      	str	r5, [sp, #4]
   23c4e:	4a17      	ldr	r2, [pc, #92]	; (23cac <z_impl_k_poll+0xb4>)
   23c50:	4817      	ldr	r0, [pc, #92]	; (23cb0 <z_impl_k_poll+0xb8>)
   23c52:	f7ff fb47 	bl	232e4 <z_pend_curr>
   23c56:	4604      	mov	r4, r0
   23c58:	f04f 0340 	mov.w	r3, #64	; 0x40
   23c5c:	f3ef 8211 	mrs	r2, BASEPRI
   23c60:	f383 8812 	msr	BASEPRI_MAX, r3
   23c64:	f3bf 8f6f 	isb	sy
   23c68:	4615      	mov	r5, r2
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
   23c6a:	4641      	mov	r1, r8
   23c6c:	4638      	mov	r0, r7
   23c6e:	f006 ff3a 	bl	2aae6 <clear_event_registrations>
	__asm__ volatile(
   23c72:	f385 8811 	msr	BASEPRI, r5
   23c76:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   23c7a:	4620      	mov	r0, r4
   23c7c:	b003      	add	sp, #12
   23c7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		clear_event_registrations(events, events_registered, key);
   23c82:	460a      	mov	r2, r1
   23c84:	4601      	mov	r1, r0
   23c86:	4638      	mov	r0, r7
   23c88:	f006 ff2d 	bl	2aae6 <clear_event_registrations>
   23c8c:	f389 8811 	msr	BASEPRI, r9
   23c90:	f3bf 8f6f 	isb	sy
		return 0;
   23c94:	2400      	movs	r4, #0
   23c96:	e7f0      	b.n	23c7a <z_impl_k_poll+0x82>
   23c98:	f381 8811 	msr	BASEPRI, r1
   23c9c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   23ca0:	f06f 040a 	mvn.w	r4, #10
   23ca4:	e7e9      	b.n	23c7a <z_impl_k_poll+0x82>
   23ca6:	bf00      	nop
   23ca8:	2000696c 	.word	0x2000696c
   23cac:	20000940 	.word	0x20000940
   23cb0:	200069b0 	.word	0x200069b0

00023cb4 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   23cb4:	b538      	push	{r3, r4, r5, lr}
   23cb6:	4603      	mov	r3, r0
	__asm__ volatile(
   23cb8:	f04f 0240 	mov.w	r2, #64	; 0x40
   23cbc:	f3ef 8511 	mrs	r5, BASEPRI
   23cc0:	f382 8812 	msr	BASEPRI_MAX, r2
   23cc4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   23cc8:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   23cca:	2201      	movs	r2, #1
   23ccc:	6082      	str	r2, [r0, #8]
	return list->head == list;
   23cce:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   23cd0:	4283      	cmp	r3, r0
   23cd2:	d010      	beq.n	23cf6 <z_impl_k_poll_signal_raise+0x42>
	sys_dnode_t *const prev = node->prev;
   23cd4:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   23cd6:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   23cd8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   23cda:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   23cdc:	2300      	movs	r3, #0
   23cde:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   23ce0:	6043      	str	r3, [r0, #4]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   23ce2:	2101      	movs	r1, #1
   23ce4:	f007 f815 	bl	2ad12 <signal_poll_event>
   23ce8:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   23cea:	4629      	mov	r1, r5
   23cec:	4805      	ldr	r0, [pc, #20]	; (23d04 <z_impl_k_poll_signal_raise+0x50>)
   23cee:	f7ff f995 	bl	2301c <z_reschedule>
	return rc;
}
   23cf2:	4620      	mov	r0, r4
   23cf4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   23cf6:	f385 8811 	msr	BASEPRI, r5
   23cfa:	f3bf 8f6f 	isb	sy
		return 0;
   23cfe:	2400      	movs	r4, #0
   23d00:	e7f7      	b.n	23cf2 <z_impl_k_poll_signal_raise+0x3e>
   23d02:	bf00      	nop
   23d04:	200069b0 	.word	0x200069b0

00023d08 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   23d08:	b538      	push	{r3, r4, r5, lr}
   23d0a:	4604      	mov	r4, r0
   23d0c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   23d0e:	f006 f97e 	bl	2a00e <k_is_in_isr>
   23d12:	b948      	cbnz	r0, 23d28 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   23d14:	4b05      	ldr	r3, [pc, #20]	; (23d2c <z_thread_aligned_alloc+0x24>)
   23d16:	689b      	ldr	r3, [r3, #8]
   23d18:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   23d1c:	b118      	cbz	r0, 23d26 <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   23d1e:	462a      	mov	r2, r5
   23d20:	4621      	mov	r1, r4
   23d22:	f007 f847 	bl	2adb4 <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   23d26:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
   23d28:	2000      	movs	r0, #0
	return ret;
   23d2a:	e7fc      	b.n	23d26 <z_thread_aligned_alloc+0x1e>
   23d2c:	2000696c 	.word	0x2000696c

00023d30 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
   23d30:	b508      	push	{r3, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   23d32:	4802      	ldr	r0, [pc, #8]	; (23d3c <boot_banner+0xc>)
   23d34:	f000 fc36 	bl	245a4 <printk>
#endif /* CONFIG_BOOT_BANNER */
}
   23d38:	bd08      	pop	{r3, pc}
   23d3a:	bf00      	nop
   23d3c:	0002dc10 	.word	0x0002dc10

00023d40 <ocrypto_ecdh_p256_public_key>:
   23d40:	b530      	push	{r4, r5, lr}
   23d42:	b099      	sub	sp, #100	; 0x64
   23d44:	4605      	mov	r5, r0
   23d46:	4668      	mov	r0, sp
   23d48:	f000 f828 	bl	23d9c <ocrypto_sc_p256_from32bytes>
   23d4c:	4669      	mov	r1, sp
   23d4e:	4604      	mov	r4, r0
   23d50:	a808      	add	r0, sp, #32
   23d52:	f000 fa53 	bl	241fc <ocrypto_curve_p256_scalarmult_base>
   23d56:	a908      	add	r1, sp, #32
   23d58:	4304      	orrs	r4, r0
   23d5a:	4628      	mov	r0, r5
   23d5c:	f000 f98a 	bl	24074 <ocrypto_curve_p256_to64bytes>
   23d60:	4620      	mov	r0, r4
   23d62:	b019      	add	sp, #100	; 0x64
   23d64:	bd30      	pop	{r4, r5, pc}
   23d66:	bf00      	nop

00023d68 <ocrypto_ecdh_p256_common_secret>:
   23d68:	b570      	push	{r4, r5, r6, lr}
   23d6a:	b098      	sub	sp, #96	; 0x60
   23d6c:	4605      	mov	r5, r0
   23d6e:	4668      	mov	r0, sp
   23d70:	4616      	mov	r6, r2
   23d72:	f000 f813 	bl	23d9c <ocrypto_sc_p256_from32bytes>
   23d76:	4631      	mov	r1, r6
   23d78:	4604      	mov	r4, r0
   23d7a:	a808      	add	r0, sp, #32
   23d7c:	f000 f946 	bl	2400c <ocrypto_curve_p256_from64bytes>
   23d80:	a908      	add	r1, sp, #32
   23d82:	466a      	mov	r2, sp
   23d84:	4304      	orrs	r4, r0
   23d86:	4608      	mov	r0, r1
   23d88:	f000 f982 	bl	24090 <ocrypto_curve_p256_scalarmult>
   23d8c:	a908      	add	r1, sp, #32
   23d8e:	4304      	orrs	r4, r0
   23d90:	4628      	mov	r0, r5
   23d92:	f000 f96d 	bl	24070 <ocrypto_curve_p256_to32bytes>
   23d96:	4620      	mov	r0, r4
   23d98:	b018      	add	sp, #96	; 0x60
   23d9a:	bd70      	pop	{r4, r5, r6, pc}

00023d9c <ocrypto_sc_p256_from32bytes>:
   23d9c:	b570      	push	{r4, r5, r6, lr}
   23d9e:	680b      	ldr	r3, [r1, #0]
   23da0:	4e12      	ldr	r6, [pc, #72]	; (23dec <ocrypto_sc_p256_from32bytes+0x50>)
   23da2:	ba1b      	rev	r3, r3
   23da4:	61c3      	str	r3, [r0, #28]
   23da6:	684b      	ldr	r3, [r1, #4]
   23da8:	ba1b      	rev	r3, r3
   23daa:	6183      	str	r3, [r0, #24]
   23dac:	688b      	ldr	r3, [r1, #8]
   23dae:	ba1b      	rev	r3, r3
   23db0:	6143      	str	r3, [r0, #20]
   23db2:	68cb      	ldr	r3, [r1, #12]
   23db4:	ba1b      	rev	r3, r3
   23db6:	6103      	str	r3, [r0, #16]
   23db8:	690b      	ldr	r3, [r1, #16]
   23dba:	ba1b      	rev	r3, r3
   23dbc:	60c3      	str	r3, [r0, #12]
   23dbe:	694b      	ldr	r3, [r1, #20]
   23dc0:	ba1b      	rev	r3, r3
   23dc2:	6083      	str	r3, [r0, #8]
   23dc4:	698b      	ldr	r3, [r1, #24]
   23dc6:	ba1b      	rev	r3, r3
   23dc8:	6043      	str	r3, [r0, #4]
   23dca:	69cb      	ldr	r3, [r1, #28]
   23dcc:	ba1b      	rev	r3, r3
   23dce:	4632      	mov	r2, r6
   23dd0:	6003      	str	r3, [r0, #0]
   23dd2:	4601      	mov	r1, r0
   23dd4:	4604      	mov	r4, r0
   23dd6:	f7dc f9cd 	bl	174 <ocrypto_bigint_sub256>
   23dda:	4631      	mov	r1, r6
   23ddc:	4605      	mov	r5, r0
   23dde:	4602      	mov	r2, r0
   23de0:	4620      	mov	r0, r4
   23de2:	f7dc f9e7 	bl	1b4 <ocrypto_bigint_cadd256>
   23de6:	1e68      	subs	r0, r5, #1
   23de8:	bd70      	pop	{r4, r5, r6, pc}
   23dea:	bf00      	nop
   23dec:	0002dc40 	.word	0x0002dc40

00023df0 <p256_zdblu>:
   23df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23df4:	b088      	sub	sp, #32
   23df6:	460c      	mov	r4, r1
   23df8:	4606      	mov	r6, r0
   23dfa:	f102 0120 	add.w	r1, r2, #32
   23dfe:	4668      	mov	r0, sp
   23e00:	f106 0720 	add.w	r7, r6, #32
   23e04:	4690      	mov	r8, r2
   23e06:	f7dc fcbf 	bl	788 <ocrypto_mod_p256_sqr>
   23e0a:	466a      	mov	r2, sp
   23e0c:	4669      	mov	r1, sp
   23e0e:	4668      	mov	r0, sp
   23e10:	f7dc fbcc 	bl	5ac <ocrypto_mod_p256_add>
   23e14:	4669      	mov	r1, sp
   23e16:	4638      	mov	r0, r7
   23e18:	f7dc fcb6 	bl	788 <ocrypto_mod_p256_sqr>
   23e1c:	463a      	mov	r2, r7
   23e1e:	4639      	mov	r1, r7
   23e20:	4638      	mov	r0, r7
   23e22:	f104 0520 	add.w	r5, r4, #32
   23e26:	f7dc fbc1 	bl	5ac <ocrypto_mod_p256_add>
   23e2a:	466a      	mov	r2, sp
   23e2c:	4669      	mov	r1, sp
   23e2e:	4668      	mov	r0, sp
   23e30:	f7dc fbbc 	bl	5ac <ocrypto_mod_p256_add>
   23e34:	4641      	mov	r1, r8
   23e36:	4628      	mov	r0, r5
   23e38:	f7dc fca6 	bl	788 <ocrypto_mod_p256_sqr>
   23e3c:	466a      	mov	r2, sp
   23e3e:	4641      	mov	r1, r8
   23e40:	4630      	mov	r0, r6
   23e42:	f7dc fc89 	bl	758 <ocrypto_mod_p256_mul>
   23e46:	462a      	mov	r2, r5
   23e48:	4629      	mov	r1, r5
   23e4a:	4668      	mov	r0, sp
   23e4c:	f7dc fbae 	bl	5ac <ocrypto_mod_p256_add>
   23e50:	462a      	mov	r2, r5
   23e52:	4669      	mov	r1, sp
   23e54:	4668      	mov	r0, sp
   23e56:	f7dc fba9 	bl	5ac <ocrypto_mod_p256_add>
   23e5a:	4a12      	ldr	r2, [pc, #72]	; (23ea4 <p256_zdblu+0xb4>)
   23e5c:	4669      	mov	r1, sp
   23e5e:	4668      	mov	r0, sp
   23e60:	f7dc fba4 	bl	5ac <ocrypto_mod_p256_add>
   23e64:	4669      	mov	r1, sp
   23e66:	4620      	mov	r0, r4
   23e68:	f7dc fc8e 	bl	788 <ocrypto_mod_p256_sqr>
   23e6c:	4632      	mov	r2, r6
   23e6e:	4621      	mov	r1, r4
   23e70:	4620      	mov	r0, r4
   23e72:	f7dc fbd9 	bl	628 <ocrypto_mod_p256_sub>
   23e76:	4632      	mov	r2, r6
   23e78:	4621      	mov	r1, r4
   23e7a:	4620      	mov	r0, r4
   23e7c:	f7dc fbd4 	bl	628 <ocrypto_mod_p256_sub>
   23e80:	4622      	mov	r2, r4
   23e82:	4631      	mov	r1, r6
   23e84:	4628      	mov	r0, r5
   23e86:	f7dc fbcf 	bl	628 <ocrypto_mod_p256_sub>
   23e8a:	466a      	mov	r2, sp
   23e8c:	4629      	mov	r1, r5
   23e8e:	4628      	mov	r0, r5
   23e90:	f7dc fc62 	bl	758 <ocrypto_mod_p256_mul>
   23e94:	463a      	mov	r2, r7
   23e96:	4629      	mov	r1, r5
   23e98:	4628      	mov	r0, r5
   23e9a:	f7dc fbc5 	bl	628 <ocrypto_mod_p256_sub>
   23e9e:	b008      	add	sp, #32
   23ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23ea4:	0002dce0 	.word	0x0002dce0

00023ea8 <p256_zaddc>:
   23ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
   23eaa:	b099      	sub	sp, #100	; 0x64
   23eac:	4604      	mov	r4, r0
   23eae:	460d      	mov	r5, r1
   23eb0:	460a      	mov	r2, r1
   23eb2:	4601      	mov	r1, r0
   23eb4:	4668      	mov	r0, sp
   23eb6:	f7dc fbb7 	bl	628 <ocrypto_mod_p256_sub>
   23eba:	4669      	mov	r1, sp
   23ebc:	4668      	mov	r0, sp
   23ebe:	f7dc fc63 	bl	788 <ocrypto_mod_p256_sqr>
   23ec2:	466a      	mov	r2, sp
   23ec4:	4621      	mov	r1, r4
   23ec6:	a808      	add	r0, sp, #32
   23ec8:	f105 0620 	add.w	r6, r5, #32
   23ecc:	f104 0720 	add.w	r7, r4, #32
   23ed0:	f7dc fc42 	bl	758 <ocrypto_mod_p256_mul>
   23ed4:	466a      	mov	r2, sp
   23ed6:	4629      	mov	r1, r5
   23ed8:	4668      	mov	r0, sp
   23eda:	f7dc fc3d 	bl	758 <ocrypto_mod_p256_mul>
   23ede:	4632      	mov	r2, r6
   23ee0:	4639      	mov	r1, r7
   23ee2:	a810      	add	r0, sp, #64	; 0x40
   23ee4:	f7dc fb62 	bl	5ac <ocrypto_mod_p256_add>
   23ee8:	4632      	mov	r2, r6
   23eea:	4639      	mov	r1, r7
   23eec:	4630      	mov	r0, r6
   23eee:	f7dc fb9b 	bl	628 <ocrypto_mod_p256_sub>
   23ef2:	4631      	mov	r1, r6
   23ef4:	4628      	mov	r0, r5
   23ef6:	f7dc fc47 	bl	788 <ocrypto_mod_p256_sqr>
   23efa:	466a      	mov	r2, sp
   23efc:	a908      	add	r1, sp, #32
   23efe:	4620      	mov	r0, r4
   23f00:	f7dc fb54 	bl	5ac <ocrypto_mod_p256_add>
   23f04:	4622      	mov	r2, r4
   23f06:	4629      	mov	r1, r5
   23f08:	4628      	mov	r0, r5
   23f0a:	f7dc fb8d 	bl	628 <ocrypto_mod_p256_sub>
   23f0e:	466a      	mov	r2, sp
   23f10:	a908      	add	r1, sp, #32
   23f12:	4668      	mov	r0, sp
   23f14:	f7dc fb88 	bl	628 <ocrypto_mod_p256_sub>
   23f18:	466a      	mov	r2, sp
   23f1a:	4639      	mov	r1, r7
   23f1c:	4638      	mov	r0, r7
   23f1e:	f7dc fc1b 	bl	758 <ocrypto_mod_p256_mul>
   23f22:	462a      	mov	r2, r5
   23f24:	a908      	add	r1, sp, #32
   23f26:	4668      	mov	r0, sp
   23f28:	f7dc fb7e 	bl	628 <ocrypto_mod_p256_sub>
   23f2c:	466a      	mov	r2, sp
   23f2e:	4631      	mov	r1, r6
   23f30:	4630      	mov	r0, r6
   23f32:	f7dc fc11 	bl	758 <ocrypto_mod_p256_mul>
   23f36:	463a      	mov	r2, r7
   23f38:	4631      	mov	r1, r6
   23f3a:	4630      	mov	r0, r6
   23f3c:	f7dc fb74 	bl	628 <ocrypto_mod_p256_sub>
   23f40:	a910      	add	r1, sp, #64	; 0x40
   23f42:	4668      	mov	r0, sp
   23f44:	f7dc fc20 	bl	788 <ocrypto_mod_p256_sqr>
   23f48:	4622      	mov	r2, r4
   23f4a:	4669      	mov	r1, sp
   23f4c:	4620      	mov	r0, r4
   23f4e:	f7dc fb6b 	bl	628 <ocrypto_mod_p256_sub>
   23f52:	a908      	add	r1, sp, #32
   23f54:	4622      	mov	r2, r4
   23f56:	4608      	mov	r0, r1
   23f58:	f7dc fb66 	bl	628 <ocrypto_mod_p256_sub>
   23f5c:	a910      	add	r1, sp, #64	; 0x40
   23f5e:	aa08      	add	r2, sp, #32
   23f60:	4608      	mov	r0, r1
   23f62:	f7dc fbf9 	bl	758 <ocrypto_mod_p256_mul>
   23f66:	463a      	mov	r2, r7
   23f68:	a910      	add	r1, sp, #64	; 0x40
   23f6a:	4638      	mov	r0, r7
   23f6c:	f7dc fb5c 	bl	628 <ocrypto_mod_p256_sub>
   23f70:	b019      	add	sp, #100	; 0x64
   23f72:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023f74 <p256_zaddu>:
   23f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23f78:	b088      	sub	sp, #32
   23f7a:	460c      	mov	r4, r1
   23f7c:	4605      	mov	r5, r0
   23f7e:	4690      	mov	r8, r2
   23f80:	460a      	mov	r2, r1
   23f82:	4601      	mov	r1, r0
   23f84:	4668      	mov	r0, sp
   23f86:	f7dc fb4f 	bl	628 <ocrypto_mod_p256_sub>
   23f8a:	4669      	mov	r1, sp
   23f8c:	4668      	mov	r0, sp
   23f8e:	f7dc fbfb 	bl	788 <ocrypto_mod_p256_sqr>
   23f92:	466a      	mov	r2, sp
   23f94:	4629      	mov	r1, r5
   23f96:	4628      	mov	r0, r5
   23f98:	f104 0620 	add.w	r6, r4, #32
   23f9c:	f7dc fbdc 	bl	758 <ocrypto_mod_p256_mul>
   23fa0:	f105 0720 	add.w	r7, r5, #32
   23fa4:	466a      	mov	r2, sp
   23fa6:	4621      	mov	r1, r4
   23fa8:	4668      	mov	r0, sp
   23faa:	f7dc fbd5 	bl	758 <ocrypto_mod_p256_mul>
   23fae:	4632      	mov	r2, r6
   23fb0:	4639      	mov	r1, r7
   23fb2:	4630      	mov	r0, r6
   23fb4:	f7dc fb38 	bl	628 <ocrypto_mod_p256_sub>
   23fb8:	4631      	mov	r1, r6
   23fba:	4620      	mov	r0, r4
   23fbc:	f7dc fbe4 	bl	788 <ocrypto_mod_p256_sqr>
   23fc0:	462a      	mov	r2, r5
   23fc2:	4621      	mov	r1, r4
   23fc4:	4620      	mov	r0, r4
   23fc6:	f7dc fb2f 	bl	628 <ocrypto_mod_p256_sub>
   23fca:	466a      	mov	r2, sp
   23fcc:	4621      	mov	r1, r4
   23fce:	4620      	mov	r0, r4
   23fd0:	f7dc fb2a 	bl	628 <ocrypto_mod_p256_sub>
   23fd4:	466a      	mov	r2, sp
   23fd6:	4629      	mov	r1, r5
   23fd8:	4640      	mov	r0, r8
   23fda:	f7dc fb25 	bl	628 <ocrypto_mod_p256_sub>
   23fde:	4642      	mov	r2, r8
   23fe0:	4639      	mov	r1, r7
   23fe2:	4638      	mov	r0, r7
   23fe4:	f7dc fbb8 	bl	758 <ocrypto_mod_p256_mul>
   23fe8:	4622      	mov	r2, r4
   23fea:	4629      	mov	r1, r5
   23fec:	4668      	mov	r0, sp
   23fee:	f7dc fb1b 	bl	628 <ocrypto_mod_p256_sub>
   23ff2:	466a      	mov	r2, sp
   23ff4:	4631      	mov	r1, r6
   23ff6:	4630      	mov	r0, r6
   23ff8:	f7dc fbae 	bl	758 <ocrypto_mod_p256_mul>
   23ffc:	463a      	mov	r2, r7
   23ffe:	4631      	mov	r1, r6
   24000:	4630      	mov	r0, r6
   24002:	f7dc fb11 	bl	628 <ocrypto_mod_p256_sub>
   24006:	b008      	add	sp, #32
   24008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002400c <ocrypto_curve_p256_from64bytes>:
   2400c:	b570      	push	{r4, r5, r6, lr}
   2400e:	f100 0620 	add.w	r6, r0, #32
   24012:	b090      	sub	sp, #64	; 0x40
   24014:	460d      	mov	r5, r1
   24016:	4604      	mov	r4, r0
   24018:	f000 f914 	bl	24244 <ocrypto_mod_p256_from_bytes>
   2401c:	f105 0120 	add.w	r1, r5, #32
   24020:	4630      	mov	r0, r6
   24022:	f000 f90f 	bl	24244 <ocrypto_mod_p256_from_bytes>
   24026:	4621      	mov	r1, r4
   24028:	a808      	add	r0, sp, #32
   2402a:	f7dc fbad 	bl	788 <ocrypto_mod_p256_sqr>
   2402e:	a908      	add	r1, sp, #32
   24030:	4608      	mov	r0, r1
   24032:	4a0d      	ldr	r2, [pc, #52]	; (24068 <ocrypto_curve_p256_from64bytes+0x5c>)
   24034:	f7dc faba 	bl	5ac <ocrypto_mod_p256_add>
   24038:	a908      	add	r1, sp, #32
   2403a:	4622      	mov	r2, r4
   2403c:	4608      	mov	r0, r1
   2403e:	f7dc fb8b 	bl	758 <ocrypto_mod_p256_mul>
   24042:	a908      	add	r1, sp, #32
   24044:	4a09      	ldr	r2, [pc, #36]	; (2406c <ocrypto_curve_p256_from64bytes+0x60>)
   24046:	4608      	mov	r0, r1
   24048:	f7dc fab0 	bl	5ac <ocrypto_mod_p256_add>
   2404c:	4631      	mov	r1, r6
   2404e:	4668      	mov	r0, sp
   24050:	f7dc fb9a 	bl	788 <ocrypto_mod_p256_sqr>
   24054:	2220      	movs	r2, #32
   24056:	4669      	mov	r1, sp
   24058:	eb0d 0002 	add.w	r0, sp, r2
   2405c:	f7dc fa78 	bl	550 <ocrypto_constant_time_equal>
   24060:	3801      	subs	r0, #1
   24062:	b010      	add	sp, #64	; 0x40
   24064:	bd70      	pop	{r4, r5, r6, pc}
   24066:	bf00      	nop
   24068:	0002dce0 	.word	0x0002dce0
   2406c:	0002dd00 	.word	0x0002dd00

00024070 <ocrypto_curve_p256_to32bytes>:
   24070:	f000 b902 	b.w	24278 <ocrypto_mod_p256_to_bytes>

00024074 <ocrypto_curve_p256_to64bytes>:
   24074:	b538      	push	{r3, r4, r5, lr}
   24076:	4604      	mov	r4, r0
   24078:	460d      	mov	r5, r1
   2407a:	f000 f8fd 	bl	24278 <ocrypto_mod_p256_to_bytes>
   2407e:	f105 0120 	add.w	r1, r5, #32
   24082:	f104 0020 	add.w	r0, r4, #32
   24086:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2408a:	f000 b8f5 	b.w	24278 <ocrypto_mod_p256_to_bytes>
   2408e:	bf00      	nop

00024090 <ocrypto_curve_p256_scalarmult>:
   24090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24094:	4613      	mov	r3, r2
   24096:	b0b8      	sub	sp, #224	; 0xe0
   24098:	4a54      	ldr	r2, [pc, #336]	; (241ec <ocrypto_curve_p256_scalarmult+0x15c>)
   2409a:	4689      	mov	r9, r1
   2409c:	4680      	mov	r8, r0
   2409e:	4619      	mov	r1, r3
   240a0:	a810      	add	r0, sp, #64	; 0x40
   240a2:	f7dc f867 	bl	174 <ocrypto_bigint_sub256>
   240a6:	4952      	ldr	r1, [pc, #328]	; (241f0 <ocrypto_curve_p256_scalarmult+0x160>)
   240a8:	4602      	mov	r2, r0
   240aa:	a810      	add	r0, sp, #64	; 0x40
   240ac:	f7dc f882 	bl	1b4 <ocrypto_bigint_cadd256>
   240b0:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   240b2:	494e      	ldr	r1, [pc, #312]	; (241ec <ocrypto_curve_p256_scalarmult+0x15c>)
   240b4:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   240b8:	4607      	mov	r7, r0
   240ba:	f1c6 0201 	rsb	r2, r6, #1
   240be:	a810      	add	r0, sp, #64	; 0x40
   240c0:	f7dc f878 	bl	1b4 <ocrypto_bigint_cadd256>
   240c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   240c6:	464a      	mov	r2, r9
   240c8:	ea6f 0a03 	mvn.w	sl, r3
   240cc:	a928      	add	r1, sp, #160	; 0xa0
   240ce:	a818      	add	r0, sp, #96	; 0x60
   240d0:	f7ff fe8e 	bl	23df0 <p256_zdblu>
   240d4:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   240d8:	a920      	add	r1, sp, #128	; 0x80
   240da:	f1ca 0201 	rsb	r2, sl, #1
   240de:	4608      	mov	r0, r1
   240e0:	f000 f892 	bl	24208 <ocrypto_mod_p256_cneg>
   240e4:	f1c7 0701 	rsb	r7, r7, #1
   240e8:	24fe      	movs	r4, #254	; 0xfe
   240ea:	466a      	mov	r2, sp
   240ec:	a918      	add	r1, sp, #96	; 0x60
   240ee:	a828      	add	r0, sp, #160	; 0xa0
   240f0:	f7ff ff40 	bl	23f74 <p256_zaddu>
   240f4:	1162      	asrs	r2, r4, #5
   240f6:	ab38      	add	r3, sp, #224	; 0xe0
   240f8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   240fc:	f004 011f 	and.w	r1, r4, #31
   24100:	f852 3ca0 	ldr.w	r3, [r2, #-160]
   24104:	40cb      	lsrs	r3, r1
   24106:	4655      	mov	r5, sl
   24108:	f003 0a01 	and.w	sl, r3, #1
   2410c:	ea8a 0505 	eor.w	r5, sl, r5
   24110:	462a      	mov	r2, r5
   24112:	a928      	add	r1, sp, #160	; 0xa0
   24114:	a818      	add	r0, sp, #96	; 0x60
   24116:	f7dc f8a9 	bl	26c <ocrypto_bigint_cswap256>
   2411a:	462a      	mov	r2, r5
   2411c:	a930      	add	r1, sp, #192	; 0xc0
   2411e:	a820      	add	r0, sp, #128	; 0x80
   24120:	f7dc f8a4 	bl	26c <ocrypto_bigint_cswap256>
   24124:	3c01      	subs	r4, #1
   24126:	a928      	add	r1, sp, #160	; 0xa0
   24128:	a818      	add	r0, sp, #96	; 0x60
   2412a:	f7ff febd 	bl	23ea8 <p256_zaddc>
   2412e:	1c63      	adds	r3, r4, #1
   24130:	d1db      	bne.n	240ea <ocrypto_curve_p256_scalarmult+0x5a>
   24132:	f1ca 0201 	rsb	r2, sl, #1
   24136:	a920      	add	r1, sp, #128	; 0x80
   24138:	a808      	add	r0, sp, #32
   2413a:	f000 f865 	bl	24208 <ocrypto_mod_p256_cneg>
   2413e:	ea86 060a 	eor.w	r6, r6, sl
   24142:	466a      	mov	r2, sp
   24144:	a918      	add	r1, sp, #96	; 0x60
   24146:	a828      	add	r0, sp, #160	; 0xa0
   24148:	f7ff ff14 	bl	23f74 <p256_zaddu>
   2414c:	a928      	add	r1, sp, #160	; 0xa0
   2414e:	4632      	mov	r2, r6
   24150:	a818      	add	r0, sp, #96	; 0x60
   24152:	f7dc f88b 	bl	26c <ocrypto_bigint_cswap256>
   24156:	4632      	mov	r2, r6
   24158:	a930      	add	r1, sp, #192	; 0xc0
   2415a:	a820      	add	r0, sp, #128	; 0x80
   2415c:	f7dc f886 	bl	26c <ocrypto_bigint_cswap256>
   24160:	a908      	add	r1, sp, #32
   24162:	466a      	mov	r2, sp
   24164:	4608      	mov	r0, r1
   24166:	f7dc faf7 	bl	758 <ocrypto_mod_p256_mul>
   2416a:	a908      	add	r1, sp, #32
   2416c:	4608      	mov	r0, r1
   2416e:	f000 f89d 	bl	242ac <ocrypto_mod_p256_inv>
   24172:	a908      	add	r1, sp, #32
   24174:	f108 0420 	add.w	r4, r8, #32
   24178:	f109 0220 	add.w	r2, r9, #32
   2417c:	4608      	mov	r0, r1
   2417e:	f7dc faeb 	bl	758 <ocrypto_mod_p256_mul>
   24182:	a920      	add	r1, sp, #128	; 0x80
   24184:	aa08      	add	r2, sp, #32
   24186:	4620      	mov	r0, r4
   24188:	f7dc fae6 	bl	758 <ocrypto_mod_p256_mul>
   2418c:	aa08      	add	r2, sp, #32
   2418e:	a918      	add	r1, sp, #96	; 0x60
   24190:	4668      	mov	r0, sp
   24192:	f7dc fae1 	bl	758 <ocrypto_mod_p256_mul>
   24196:	4669      	mov	r1, sp
   24198:	4668      	mov	r0, sp
   2419a:	f7dc faf5 	bl	788 <ocrypto_mod_p256_sqr>
   2419e:	aa18      	add	r2, sp, #96	; 0x60
   241a0:	4669      	mov	r1, sp
   241a2:	a808      	add	r0, sp, #32
   241a4:	f7dc fad8 	bl	758 <ocrypto_mod_p256_mul>
   241a8:	4621      	mov	r1, r4
   241aa:	4668      	mov	r0, sp
   241ac:	f7dc faec 	bl	788 <ocrypto_mod_p256_sqr>
   241b0:	aa08      	add	r2, sp, #32
   241b2:	4669      	mov	r1, sp
   241b4:	4610      	mov	r0, r2
   241b6:	f7dc fa37 	bl	628 <ocrypto_mod_p256_sub>
   241ba:	4a0e      	ldr	r2, [pc, #56]	; (241f4 <ocrypto_curve_p256_scalarmult+0x164>)
   241bc:	a908      	add	r1, sp, #32
   241be:	4668      	mov	r0, sp
   241c0:	f7dc fa32 	bl	628 <ocrypto_mod_p256_sub>
   241c4:	4620      	mov	r0, r4
   241c6:	2120      	movs	r1, #32
   241c8:	f7dc f9d6 	bl	578 <ocrypto_constant_time_is_zero>
   241cc:	a908      	add	r1, sp, #32
   241ce:	4243      	negs	r3, r0
   241d0:	4602      	mov	r2, r0
   241d2:	4668      	mov	r0, sp
   241d4:	431f      	orrs	r7, r3
   241d6:	f7dc f849 	bl	26c <ocrypto_bigint_cswap256>
   241da:	4640      	mov	r0, r8
   241dc:	4a06      	ldr	r2, [pc, #24]	; (241f8 <ocrypto_curve_p256_scalarmult+0x168>)
   241de:	4669      	mov	r1, sp
   241e0:	f7dc faba 	bl	758 <ocrypto_mod_p256_mul>
   241e4:	4638      	mov	r0, r7
   241e6:	b038      	add	sp, #224	; 0xe0
   241e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   241ec:	0002dd20 	.word	0x0002dd20
   241f0:	0002dca0 	.word	0x0002dca0
   241f4:	0002dd00 	.word	0x0002dd00
   241f8:	0002dcc0 	.word	0x0002dcc0

000241fc <ocrypto_curve_p256_scalarmult_base>:
   241fc:	460a      	mov	r2, r1
   241fe:	4901      	ldr	r1, [pc, #4]	; (24204 <ocrypto_curve_p256_scalarmult_base+0x8>)
   24200:	f7ff bf46 	b.w	24090 <ocrypto_curve_p256_scalarmult>
   24204:	0002dc60 	.word	0x0002dc60

00024208 <ocrypto_mod_p256_cneg>:
   24208:	b570      	push	{r4, r5, r6, lr}
   2420a:	b088      	sub	sp, #32
   2420c:	4604      	mov	r4, r0
   2420e:	460d      	mov	r5, r1
   24210:	4616      	mov	r6, r2
   24212:	2100      	movs	r1, #0
   24214:	2220      	movs	r2, #32
   24216:	4668      	mov	r0, sp
   24218:	f001 ff34 	bl	26084 <memset>
   2421c:	2300      	movs	r3, #0
   2421e:	4629      	mov	r1, r5
   24220:	2220      	movs	r2, #32
   24222:	4620      	mov	r0, r4
   24224:	9300      	str	r3, [sp, #0]
   24226:	f001 fefe 	bl	26026 <memcpy>
   2422a:	462a      	mov	r2, r5
   2422c:	4669      	mov	r1, sp
   2422e:	4668      	mov	r0, sp
   24230:	f7dc f9fa 	bl	628 <ocrypto_mod_p256_sub>
   24234:	4632      	mov	r2, r6
   24236:	4669      	mov	r1, sp
   24238:	4620      	mov	r0, r4
   2423a:	f7dc f817 	bl	26c <ocrypto_bigint_cswap256>
   2423e:	b008      	add	sp, #32
   24240:	bd70      	pop	{r4, r5, r6, pc}
   24242:	bf00      	nop

00024244 <ocrypto_mod_p256_from_bytes>:
   24244:	680b      	ldr	r3, [r1, #0]
   24246:	ba1b      	rev	r3, r3
   24248:	61c3      	str	r3, [r0, #28]
   2424a:	684b      	ldr	r3, [r1, #4]
   2424c:	ba1b      	rev	r3, r3
   2424e:	6183      	str	r3, [r0, #24]
   24250:	688b      	ldr	r3, [r1, #8]
   24252:	ba1b      	rev	r3, r3
   24254:	6143      	str	r3, [r0, #20]
   24256:	68cb      	ldr	r3, [r1, #12]
   24258:	ba1b      	rev	r3, r3
   2425a:	6103      	str	r3, [r0, #16]
   2425c:	690b      	ldr	r3, [r1, #16]
   2425e:	ba1b      	rev	r3, r3
   24260:	60c3      	str	r3, [r0, #12]
   24262:	694b      	ldr	r3, [r1, #20]
   24264:	ba1b      	rev	r3, r3
   24266:	6083      	str	r3, [r0, #8]
   24268:	698b      	ldr	r3, [r1, #24]
   2426a:	ba1b      	rev	r3, r3
   2426c:	6043      	str	r3, [r0, #4]
   2426e:	69cb      	ldr	r3, [r1, #28]
   24270:	ba1b      	rev	r3, r3
   24272:	6003      	str	r3, [r0, #0]
   24274:	4770      	bx	lr
   24276:	bf00      	nop

00024278 <ocrypto_mod_p256_to_bytes>:
   24278:	69cb      	ldr	r3, [r1, #28]
   2427a:	ba1b      	rev	r3, r3
   2427c:	6003      	str	r3, [r0, #0]
   2427e:	698b      	ldr	r3, [r1, #24]
   24280:	ba1b      	rev	r3, r3
   24282:	6043      	str	r3, [r0, #4]
   24284:	694b      	ldr	r3, [r1, #20]
   24286:	ba1b      	rev	r3, r3
   24288:	6083      	str	r3, [r0, #8]
   2428a:	690b      	ldr	r3, [r1, #16]
   2428c:	ba1b      	rev	r3, r3
   2428e:	60c3      	str	r3, [r0, #12]
   24290:	68cb      	ldr	r3, [r1, #12]
   24292:	ba1b      	rev	r3, r3
   24294:	6103      	str	r3, [r0, #16]
   24296:	688b      	ldr	r3, [r1, #8]
   24298:	ba1b      	rev	r3, r3
   2429a:	6143      	str	r3, [r0, #20]
   2429c:	684b      	ldr	r3, [r1, #4]
   2429e:	ba1b      	rev	r3, r3
   242a0:	6183      	str	r3, [r0, #24]
   242a2:	680b      	ldr	r3, [r1, #0]
   242a4:	ba1b      	rev	r3, r3
   242a6:	61c3      	str	r3, [r0, #28]
   242a8:	4770      	bx	lr
   242aa:	bf00      	nop

000242ac <ocrypto_mod_p256_inv>:
   242ac:	b570      	push	{r4, r5, r6, lr}
   242ae:	b098      	sub	sp, #96	; 0x60
   242b0:	460d      	mov	r5, r1
   242b2:	4606      	mov	r6, r0
   242b4:	a810      	add	r0, sp, #64	; 0x40
   242b6:	f7dc fa67 	bl	788 <ocrypto_mod_p256_sqr>
   242ba:	462a      	mov	r2, r5
   242bc:	a910      	add	r1, sp, #64	; 0x40
   242be:	4668      	mov	r0, sp
   242c0:	f7dc fa4a 	bl	758 <ocrypto_mod_p256_mul>
   242c4:	4669      	mov	r1, sp
   242c6:	a810      	add	r0, sp, #64	; 0x40
   242c8:	f7dc fa5e 	bl	788 <ocrypto_mod_p256_sqr>
   242cc:	a910      	add	r1, sp, #64	; 0x40
   242ce:	4608      	mov	r0, r1
   242d0:	f7dc fa5a 	bl	788 <ocrypto_mod_p256_sqr>
   242d4:	466a      	mov	r2, sp
   242d6:	a910      	add	r1, sp, #64	; 0x40
   242d8:	a808      	add	r0, sp, #32
   242da:	f7dc fa3d 	bl	758 <ocrypto_mod_p256_mul>
   242de:	a908      	add	r1, sp, #32
   242e0:	a810      	add	r0, sp, #64	; 0x40
   242e2:	f7dc fa51 	bl	788 <ocrypto_mod_p256_sqr>
   242e6:	a910      	add	r1, sp, #64	; 0x40
   242e8:	4608      	mov	r0, r1
   242ea:	f7dc fa4d 	bl	788 <ocrypto_mod_p256_sqr>
   242ee:	a910      	add	r1, sp, #64	; 0x40
   242f0:	4608      	mov	r0, r1
   242f2:	f7dc fa49 	bl	788 <ocrypto_mod_p256_sqr>
   242f6:	a910      	add	r1, sp, #64	; 0x40
   242f8:	4608      	mov	r0, r1
   242fa:	f7dc fa45 	bl	788 <ocrypto_mod_p256_sqr>
   242fe:	a910      	add	r1, sp, #64	; 0x40
   24300:	aa08      	add	r2, sp, #32
   24302:	4608      	mov	r0, r1
   24304:	f7dc fa28 	bl	758 <ocrypto_mod_p256_mul>
   24308:	a910      	add	r1, sp, #64	; 0x40
   2430a:	4608      	mov	r0, r1
   2430c:	f7dc fa3c 	bl	788 <ocrypto_mod_p256_sqr>
   24310:	a910      	add	r1, sp, #64	; 0x40
   24312:	4608      	mov	r0, r1
   24314:	f7dc fa38 	bl	788 <ocrypto_mod_p256_sqr>
   24318:	a910      	add	r1, sp, #64	; 0x40
   2431a:	466a      	mov	r2, sp
   2431c:	a808      	add	r0, sp, #32
   2431e:	f7dc fa1b 	bl	758 <ocrypto_mod_p256_mul>
   24322:	2405      	movs	r4, #5
   24324:	a908      	add	r1, sp, #32
   24326:	a810      	add	r0, sp, #64	; 0x40
   24328:	f7dc fa2e 	bl	788 <ocrypto_mod_p256_sqr>
   2432c:	a910      	add	r1, sp, #64	; 0x40
   2432e:	4608      	mov	r0, r1
   24330:	f7dc fa2a 	bl	788 <ocrypto_mod_p256_sqr>
   24334:	3c01      	subs	r4, #1
   24336:	a910      	add	r1, sp, #64	; 0x40
   24338:	d1f5      	bne.n	24326 <ocrypto_mod_p256_inv+0x7a>
   2433a:	aa08      	add	r2, sp, #32
   2433c:	4608      	mov	r0, r1
   2433e:	f7dc fa0b 	bl	758 <ocrypto_mod_p256_mul>
   24342:	2405      	movs	r4, #5
   24344:	a910      	add	r1, sp, #64	; 0x40
   24346:	4608      	mov	r0, r1
   24348:	f7dc fa1e 	bl	788 <ocrypto_mod_p256_sqr>
   2434c:	a910      	add	r1, sp, #64	; 0x40
   2434e:	4608      	mov	r0, r1
   24350:	f7dc fa1a 	bl	788 <ocrypto_mod_p256_sqr>
   24354:	3c01      	subs	r4, #1
   24356:	d1f5      	bne.n	24344 <ocrypto_mod_p256_inv+0x98>
   24358:	a910      	add	r1, sp, #64	; 0x40
   2435a:	aa08      	add	r2, sp, #32
   2435c:	4608      	mov	r0, r1
   2435e:	f7dc f9fb 	bl	758 <ocrypto_mod_p256_mul>
   24362:	a910      	add	r1, sp, #64	; 0x40
   24364:	a808      	add	r0, sp, #32
   24366:	f7dc fa0f 	bl	788 <ocrypto_mod_p256_sqr>
   2436a:	a908      	add	r1, sp, #32
   2436c:	4608      	mov	r0, r1
   2436e:	f7dc fa0b 	bl	788 <ocrypto_mod_p256_sqr>
   24372:	a908      	add	r1, sp, #32
   24374:	466a      	mov	r2, sp
   24376:	4668      	mov	r0, sp
   24378:	f7dc f9ee 	bl	758 <ocrypto_mod_p256_mul>
   2437c:	2410      	movs	r4, #16
   2437e:	4669      	mov	r1, sp
   24380:	a810      	add	r0, sp, #64	; 0x40
   24382:	f7dc fa01 	bl	788 <ocrypto_mod_p256_sqr>
   24386:	a910      	add	r1, sp, #64	; 0x40
   24388:	4608      	mov	r0, r1
   2438a:	f7dc f9fd 	bl	788 <ocrypto_mod_p256_sqr>
   2438e:	3c01      	subs	r4, #1
   24390:	a910      	add	r1, sp, #64	; 0x40
   24392:	d1f5      	bne.n	24380 <ocrypto_mod_p256_inv+0xd4>
   24394:	462a      	mov	r2, r5
   24396:	4608      	mov	r0, r1
   24398:	f7dc f9de 	bl	758 <ocrypto_mod_p256_mul>
   2439c:	2440      	movs	r4, #64	; 0x40
   2439e:	a910      	add	r1, sp, #64	; 0x40
   243a0:	4608      	mov	r0, r1
   243a2:	f7dc f9f1 	bl	788 <ocrypto_mod_p256_sqr>
   243a6:	a910      	add	r1, sp, #64	; 0x40
   243a8:	4608      	mov	r0, r1
   243aa:	f7dc f9ed 	bl	788 <ocrypto_mod_p256_sqr>
   243ae:	3c01      	subs	r4, #1
   243b0:	d1f5      	bne.n	2439e <ocrypto_mod_p256_inv+0xf2>
   243b2:	a910      	add	r1, sp, #64	; 0x40
   243b4:	466a      	mov	r2, sp
   243b6:	4608      	mov	r0, r1
   243b8:	f7dc f9ce 	bl	758 <ocrypto_mod_p256_mul>
   243bc:	2410      	movs	r4, #16
   243be:	a910      	add	r1, sp, #64	; 0x40
   243c0:	4608      	mov	r0, r1
   243c2:	f7dc f9e1 	bl	788 <ocrypto_mod_p256_sqr>
   243c6:	a910      	add	r1, sp, #64	; 0x40
   243c8:	4608      	mov	r0, r1
   243ca:	f7dc f9dd 	bl	788 <ocrypto_mod_p256_sqr>
   243ce:	3c01      	subs	r4, #1
   243d0:	d1f5      	bne.n	243be <ocrypto_mod_p256_inv+0x112>
   243d2:	a910      	add	r1, sp, #64	; 0x40
   243d4:	466a      	mov	r2, sp
   243d6:	4608      	mov	r0, r1
   243d8:	f7dc f9be 	bl	758 <ocrypto_mod_p256_mul>
   243dc:	2410      	movs	r4, #16
   243de:	a910      	add	r1, sp, #64	; 0x40
   243e0:	4608      	mov	r0, r1
   243e2:	f7dc f9d1 	bl	788 <ocrypto_mod_p256_sqr>
   243e6:	a910      	add	r1, sp, #64	; 0x40
   243e8:	4608      	mov	r0, r1
   243ea:	f7dc f9cd 	bl	788 <ocrypto_mod_p256_sqr>
   243ee:	3c01      	subs	r4, #1
   243f0:	d1f5      	bne.n	243de <ocrypto_mod_p256_inv+0x132>
   243f2:	a910      	add	r1, sp, #64	; 0x40
   243f4:	aa08      	add	r2, sp, #32
   243f6:	4608      	mov	r0, r1
   243f8:	f7dc f9ae 	bl	758 <ocrypto_mod_p256_mul>
   243fc:	462a      	mov	r2, r5
   243fe:	a910      	add	r1, sp, #64	; 0x40
   24400:	4630      	mov	r0, r6
   24402:	f7dc f9a9 	bl	758 <ocrypto_mod_p256_mul>
   24406:	b018      	add	sp, #96	; 0x60
   24408:	bd70      	pop	{r4, r5, r6, pc}
   2440a:	bf00      	nop

0002440c <cbprintf_via_va_list>:
{
   2440c:	b510      	push	{r4, lr}
   2440e:	460c      	mov	r4, r1
   24410:	4611      	mov	r1, r2
   24412:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
   24414:	9b02      	ldr	r3, [sp, #8]
   24416:	47a0      	blx	r4
}
   24418:	bd10      	pop	{r4, pc}

0002441a <is_fmt_spec>:
	return (c >= 64) && (c <= 122);
   2441a:	3840      	subs	r0, #64	; 0x40
   2441c:	b2c0      	uxtb	r0, r0
}
   2441e:	283a      	cmp	r0, #58	; 0x3a
   24420:	bf8c      	ite	hi
   24422:	2000      	movhi	r0, #0
   24424:	2001      	movls	r0, #1
   24426:	4770      	bx	lr

00024428 <get_package_len>:
{
   24428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2442a:	4606      	mov	r6, r0
	args_size = buf[0] * sizeof(int);
   2442c:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   2442e:	7845      	ldrb	r5, [r0, #1]
	ros_nbr   = buf[2];
   24430:	7884      	ldrb	r4, [r0, #2]
	buf += ros_nbr;
   24432:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   24436:	4404      	add	r4, r0
	for (int i = 0; i < s_nbr; i++) {
   24438:	2700      	movs	r7, #0
   2443a:	e006      	b.n	2444a <get_package_len+0x22>
		buf++;
   2443c:	3401      	adds	r4, #1
		buf += strlen((const char *)buf) + 1;
   2443e:	4620      	mov	r0, r4
   24440:	f001 fdc1 	bl	25fc6 <strlen>
   24444:	3001      	adds	r0, #1
   24446:	4404      	add	r4, r0
	for (int i = 0; i < s_nbr; i++) {
   24448:	3701      	adds	r7, #1
   2444a:	42af      	cmp	r7, r5
   2444c:	d3f6      	bcc.n	2443c <get_package_len+0x14>
}
   2444e:	1ba0      	subs	r0, r4, r6
   24450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024452 <append_string>:
{
   24452:	b570      	push	{r4, r5, r6, lr}
   24454:	4614      	mov	r4, r2
	if (cb == NULL) {
   24456:	b138      	cbz	r0, 24468 <append_string+0x16>
   24458:	460d      	mov	r5, r1
   2445a:	4619      	mov	r1, r3
   2445c:	4606      	mov	r6, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   2445e:	b143      	cbz	r3, 24472 <append_string+0x20>
	return cb(str, strl, ctx);
   24460:	462a      	mov	r2, r5
   24462:	4620      	mov	r0, r4
   24464:	47b0      	blx	r6
}
   24466:	bd70      	pop	{r4, r5, r6, pc}
		return 1 + strlen(str);
   24468:	4610      	mov	r0, r2
   2446a:	f001 fdac 	bl	25fc6 <strlen>
   2446e:	3001      	adds	r0, #1
   24470:	e7f9      	b.n	24466 <append_string+0x14>
	strl = strl > 0 ? strl : strlen(str) + 1;
   24472:	4610      	mov	r0, r2
   24474:	f001 fda7 	bl	25fc6 <strlen>
   24478:	b283      	uxth	r3, r0
   2447a:	3301      	adds	r3, #1
   2447c:	b299      	uxth	r1, r3
   2447e:	e7ef      	b.n	24460 <append_string+0xe>

00024480 <cbpprintf_external>:
	if (buf == NULL) {
   24480:	b35b      	cbz	r3, 244da <cbpprintf_external+0x5a>
{
   24482:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24486:	b082      	sub	sp, #8
   24488:	4607      	mov	r7, r0
   2448a:	4688      	mov	r8, r1
   2448c:	4691      	mov	r9, r2
   2448e:	461d      	mov	r5, r3
	args_size = hdr->hdr.desc.len * sizeof(int);
   24490:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = hdr->hdr.desc.str_cnt;
   24492:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   24494:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
   24496:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   24498:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   2449c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
   244a0:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
   244a2:	f04f 0a00 	mov.w	sl, #0
   244a6:	e00a      	b.n	244be <cbpprintf_external+0x3e>
		s_idx = *(uint8_t *)s++;
   244a8:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   244ac:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
   244b0:	4620      	mov	r0, r4
   244b2:	f001 fd88 	bl	25fc6 <strlen>
   244b6:	3001      	adds	r0, #1
   244b8:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   244ba:	f10a 0a01 	add.w	sl, sl, #1
   244be:	45b2      	cmp	sl, r6
   244c0:	d3f2      	bcc.n	244a8 <cbpprintf_external+0x28>
	buf += sizeof(*hdr);
   244c2:	f105 0308 	add.w	r3, r5, #8
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
   244c6:	9300      	str	r3, [sp, #0]
   244c8:	686b      	ldr	r3, [r5, #4]
   244ca:	464a      	mov	r2, r9
   244cc:	4641      	mov	r1, r8
   244ce:	4638      	mov	r0, r7
   244d0:	f7ff ff9c 	bl	2440c <cbprintf_via_va_list>
}
   244d4:	b002      	add	sp, #8
   244d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
   244da:	f06f 0015 	mvn.w	r0, #21
}
   244de:	4770      	bx	lr

000244e0 <is_ptr>:
{
   244e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   244e4:	4604      	mov	r4, r0
   244e6:	4688      	mov	r8, r1
	int cnt = 0;
   244e8:	2700      	movs	r7, #0
	bool mod = false;
   244ea:	463e      	mov	r6, r7
	while ((c = *fmt++) != '\0') {
   244ec:	e007      	b.n	244fe <is_ptr+0x1e>
				if (c == 'p') {
   244ee:	2d70      	cmp	r5, #112	; 0x70
   244f0:	d018      	beq.n	24524 <is_ptr+0x44>
				} else if (is_fmt_spec(c)) {
   244f2:	4628      	mov	r0, r5
   244f4:	f7ff ff91 	bl	2441a <is_fmt_spec>
   244f8:	b9b8      	cbnz	r0, 2452a <is_ptr+0x4a>
		if (c == '%') {
   244fa:	2d25      	cmp	r5, #37	; 0x25
   244fc:	d00e      	beq.n	2451c <is_ptr+0x3c>
	while ((c = *fmt++) != '\0') {
   244fe:	f814 5b01 	ldrb.w	r5, [r4], #1
   24502:	b175      	cbz	r5, 24522 <is_ptr+0x42>
		if (mod) {
   24504:	2e00      	cmp	r6, #0
   24506:	d0f8      	beq.n	244fa <is_ptr+0x1a>
			if (cnt == n) {
   24508:	4547      	cmp	r7, r8
   2450a:	d0f0      	beq.n	244ee <is_ptr+0xe>
			} else if (is_fmt_spec(c)) {
   2450c:	4628      	mov	r0, r5
   2450e:	f7ff ff84 	bl	2441a <is_fmt_spec>
   24512:	2800      	cmp	r0, #0
   24514:	d0f1      	beq.n	244fa <is_ptr+0x1a>
				cnt++;
   24516:	3701      	adds	r7, #1
				mod = false;
   24518:	2600      	movs	r6, #0
   2451a:	e7ee      	b.n	244fa <is_ptr+0x1a>
			mod = !mod;
   2451c:	f086 0601 	eor.w	r6, r6, #1
   24520:	e7ed      	b.n	244fe <is_ptr+0x1e>
	return false;
   24522:	2600      	movs	r6, #0
}
   24524:	4630      	mov	r0, r6
   24526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					return false;
   2452a:	2600      	movs	r6, #0
   2452c:	e7fa      	b.n	24524 <is_ptr+0x44>

0002452e <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   2452e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   24532:	b2db      	uxtb	r3, r3
   24534:	2b09      	cmp	r3, #9
   24536:	d802      	bhi.n	2453e <char2hex+0x10>
		*x = c - '0';
   24538:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   2453a:	2000      	movs	r0, #0
   2453c:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   2453e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   24542:	b2db      	uxtb	r3, r3
   24544:	2b05      	cmp	r3, #5
   24546:	d803      	bhi.n	24550 <char2hex+0x22>
		*x = c - 'a' + 10;
   24548:	3857      	subs	r0, #87	; 0x57
   2454a:	7008      	strb	r0, [r1, #0]
	return 0;
   2454c:	2000      	movs	r0, #0
   2454e:	4770      	bx	lr
	} else if (c >= 'A' && c <= 'F') {
   24550:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   24554:	b2db      	uxtb	r3, r3
   24556:	2b05      	cmp	r3, #5
   24558:	d803      	bhi.n	24562 <char2hex+0x34>
		*x = c - 'A' + 10;
   2455a:	3837      	subs	r0, #55	; 0x37
   2455c:	7008      	strb	r0, [r1, #0]
	return 0;
   2455e:	2000      	movs	r0, #0
   24560:	4770      	bx	lr
		return -EINVAL;
   24562:	f06f 0015 	mvn.w	r0, #21
}
   24566:	4770      	bx	lr

00024568 <arch_printk_char_out>:
}
   24568:	2000      	movs	r0, #0
   2456a:	4770      	bx	lr

0002456c <str_out>:
{
   2456c:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2456e:	680c      	ldr	r4, [r1, #0]
   24570:	b154      	cbz	r4, 24588 <str_out+0x1c>
   24572:	688a      	ldr	r2, [r1, #8]
   24574:	684b      	ldr	r3, [r1, #4]
   24576:	429a      	cmp	r2, r3
   24578:	da06      	bge.n	24588 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   2457a:	3b01      	subs	r3, #1
   2457c:	429a      	cmp	r2, r3
   2457e:	d008      	beq.n	24592 <str_out+0x26>
		ctx->str[ctx->count++] = c;
   24580:	1c53      	adds	r3, r2, #1
   24582:	608b      	str	r3, [r1, #8]
   24584:	54a0      	strb	r0, [r4, r2]
   24586:	e002      	b.n	2458e <str_out+0x22>
		ctx->count++;
   24588:	688b      	ldr	r3, [r1, #8]
   2458a:	3301      	adds	r3, #1
   2458c:	608b      	str	r3, [r1, #8]
}
   2458e:	bc10      	pop	{r4}
   24590:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   24592:	1c53      	adds	r3, r2, #1
   24594:	608b      	str	r3, [r1, #8]
   24596:	2300      	movs	r3, #0
   24598:	54a3      	strb	r3, [r4, r2]
   2459a:	e7f8      	b.n	2458e <str_out+0x22>

0002459c <vprintk>:
{
   2459c:	b508      	push	{r3, lr}
		z_log_vprintk(fmt, ap);
   2459e:	f001 f8ba 	bl	25716 <z_log_vprintk>
}
   245a2:	bd08      	pop	{r3, pc}

000245a4 <printk>:
{
   245a4:	b40f      	push	{r0, r1, r2, r3}
   245a6:	b500      	push	{lr}
   245a8:	b083      	sub	sp, #12
   245aa:	a904      	add	r1, sp, #16
   245ac:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   245b0:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   245b2:	f7ff fff3 	bl	2459c <vprintk>
}
   245b6:	b003      	add	sp, #12
   245b8:	f85d eb04 	ldr.w	lr, [sp], #4
   245bc:	b004      	add	sp, #16
   245be:	4770      	bx	lr

000245c0 <snprintk>:
{
   245c0:	b40c      	push	{r2, r3}
   245c2:	b500      	push	{lr}
   245c4:	b083      	sub	sp, #12
   245c6:	ab04      	add	r3, sp, #16
   245c8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   245cc:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   245ce:	f7ee fdd5 	bl	1317c <vsnprintk>
}
   245d2:	b003      	add	sp, #12
   245d4:	f85d eb04 	ldr.w	lr, [sp], #4
   245d8:	b002      	add	sp, #8
   245da:	4770      	bx	lr

000245dc <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   245dc:	b508      	push	{r3, lr}
   245de:	4604      	mov	r4, r0
   245e0:	4608      	mov	r0, r1
   245e2:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   245e4:	461a      	mov	r2, r3
   245e6:	47a0      	blx	r4
	return z_impl_z_current_get();
   245e8:	f7ff f880 	bl	236ec <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   245ec:	f7f1 fb78 	bl	15ce0 <z_impl_k_thread_abort>

000245f0 <chunk_mem>:
#endif

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   245f0:	00c9      	lsls	r1, r1, #3
   245f2:	3104      	adds	r1, #4

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   245f4:	4408      	add	r0, r1
   245f6:	4770      	bx	lr

000245f8 <free_list_remove_bidx>:

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   245f8:	ea4f 0cc1 	mov.w	ip, r1, lsl #3

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   245fc:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   24600:	88db      	ldrh	r3, [r3, #6]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & BIT(bidx));

	if (next_free_chunk(h, c) == c) {
   24602:	4299      	cmp	r1, r3
   24604:	d00c      	beq.n	24620 <free_list_remove_bidx+0x28>
   24606:	4484      	add	ip, r0
   24608:	f8bc 1004 	ldrh.w	r1, [ip, #4]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   2460c:	3204      	adds	r2, #4
   2460e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   24612:	00ca      	lsls	r2, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   24614:	3206      	adds	r2, #6
   24616:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
   24618:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   2461a:	3304      	adds	r3, #4
   2461c:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   2461e:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
   24620:	68c3      	ldr	r3, [r0, #12]
   24622:	2101      	movs	r1, #1
   24624:	4091      	lsls	r1, r2
   24626:	ea23 0301 	bic.w	r3, r3, r1
   2462a:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2462c:	3204      	adds	r2, #4
   2462e:	2300      	movs	r3, #0
   24630:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   24634:	4770      	bx	lr

00024636 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   24636:	b510      	push	{r4, lr}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   24638:	1d13      	adds	r3, r2, #4
   2463a:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   2463e:	b974      	cbnz	r4, 2465e <free_list_add_bidx+0x28>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
   24640:	68c3      	ldr	r3, [r0, #12]
   24642:	2401      	movs	r4, #1
   24644:	4094      	lsls	r4, r2
   24646:	4323      	orrs	r3, r4
   24648:	60c3      	str	r3, [r0, #12]
		b->next = c;
   2464a:	3204      	adds	r2, #4
   2464c:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   24650:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
   24652:	1d1a      	adds	r2, r3, #4
   24654:	b289      	uxth	r1, r1
   24656:	5281      	strh	r1, [r0, r2]
   24658:	3306      	adds	r3, #6
   2465a:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   2465c:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
   2465e:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
   24660:	3204      	adds	r2, #4
   24662:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
   24664:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
   24668:	f10c 0e04 	add.w	lr, ip, #4
   2466c:	f820 300e 	strh.w	r3, [r0, lr]
   24670:	f10c 0c06 	add.w	ip, ip, #6
   24674:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
   24678:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   2467a:	3306      	adds	r3, #6
   2467c:	b289      	uxth	r1, r1
   2467e:	52c1      	strh	r1, [r0, r3]
   24680:	5281      	strh	r1, [r0, r2]
   24682:	e7eb      	b.n	2465c <free_list_add_bidx+0x26>

00024684 <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   24684:	b500      	push	{lr}
	void *cmem = &buf[c];
   24686:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
   24688:	3302      	adds	r3, #2
   2468a:	f830 e003 	ldrh.w	lr, [r0, r3]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   2468e:	eba2 0c01 	sub.w	ip, r2, r1
	chunksz_t rsz = sz0 - lsz;
   24692:	1a89      	subs	r1, r1, r2
   24694:	eb01 015e 	add.w	r1, r1, lr, lsr #1
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   24698:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
		((uint16_t *)cmem)[f] = val;
   2469c:	f820 e003 	strh.w	lr, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   246a0:	ea4f 0e41 	mov.w	lr, r1, lsl #1
	void *cmem = &buf[c];
   246a4:	00d3      	lsls	r3, r2, #3
		((uint16_t *)cmem)[f] = val;
   246a6:	3302      	adds	r3, #2
   246a8:	f820 e003 	strh.w	lr, [r0, r3]
   246ac:	f820 c032 	strh.w	ip, [r0, r2, lsl #3]
		return ((uint16_t *)cmem)[f];
   246b0:	5ac3      	ldrh	r3, [r0, r3]
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   246b2:	eb02 0253 	add.w	r2, r2, r3, lsr #1
		((uint16_t *)cmem)[f] = val;
   246b6:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   246ba:	f85d fb04 	ldr.w	pc, [sp], #4

000246be <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   246be:	b500      	push	{lr}
	void *cmem = &buf[c];
   246c0:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
   246c2:	3102      	adds	r1, #2
   246c4:	f830 e001 	ldrh.w	lr, [r0, r1]
	void *cmem = &buf[c];
   246c8:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
		return ((uint16_t *)cmem)[f];
   246cc:	f10c 0c02 	add.w	ip, ip, #2
   246d0:	f830 300c 	ldrh.w	r3, [r0, ip]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   246d4:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   246d6:	eb03 035e 	add.w	r3, r3, lr, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   246da:	ea4f 0e43 	mov.w	lr, r3, lsl #1
		((uint16_t *)cmem)[f] = val;
   246de:	f820 e001 	strh.w	lr, [r0, r1]
		return ((uint16_t *)cmem)[f];
   246e2:	f830 100c 	ldrh.w	r1, [r0, ip]
	return c + chunk_size(h, c);
   246e6:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
   246ea:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   246ee:	f85d fb04 	ldr.w	pc, [sp], #4

000246f2 <mem_to_chunkid>:
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   246f2:	3904      	subs	r1, #4
   246f4:	1a08      	subs	r0, r1, r0
}
   246f6:	08c0      	lsrs	r0, r0, #3
   246f8:	4770      	bx	lr

000246fa <free_list_remove>:
{
   246fa:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   246fc:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   24700:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   24702:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   24704:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   24708:	f1c2 021f 	rsb	r2, r2, #31
   2470c:	f7ff ff74 	bl	245f8 <free_list_remove_bidx>
}
   24710:	bd08      	pop	{r3, pc}

00024712 <free_list_add>:
{
   24712:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   24714:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   24718:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2471a:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   2471c:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   24720:	f1c2 021f 	rsb	r2, r2, #31
   24724:	f7ff ff87 	bl	24636 <free_list_add_bidx>
}
   24728:	bd08      	pop	{r3, pc}

0002472a <free_chunk>:
{
   2472a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2472c:	4604      	mov	r4, r0
   2472e:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   24730:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
   24732:	1cb7      	adds	r7, r6, #2
   24734:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
   24736:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
   2473a:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   2473e:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   24740:	f013 0f01 	tst.w	r3, #1
   24744:	d00c      	beq.n	24760 <free_chunk+0x36>
   24746:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   24748:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
   2474a:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
   2474e:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   24750:	f013 0f01 	tst.w	r3, #1
   24754:	d00e      	beq.n	24774 <free_chunk+0x4a>
	free_list_add(h, c);
   24756:	4629      	mov	r1, r5
   24758:	4620      	mov	r0, r4
   2475a:	f7ff ffda 	bl	24712 <free_list_add>
}
   2475e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
   24760:	f7ff ffcb 	bl	246fa <free_list_remove>
   24764:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
   24766:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   2476a:	4629      	mov	r1, r5
   2476c:	4620      	mov	r0, r4
   2476e:	f7ff ffa6 	bl	246be <merge_chunks>
   24772:	e7e8      	b.n	24746 <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
   24774:	4620      	mov	r0, r4
   24776:	f7ff ffc0 	bl	246fa <free_list_remove>
   2477a:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   2477c:	462a      	mov	r2, r5
   2477e:	1a69      	subs	r1, r5, r1
   24780:	4620      	mov	r0, r4
   24782:	f7ff ff9c 	bl	246be <merge_chunks>
   24786:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   24788:	1aed      	subs	r5, r5, r3
   2478a:	e7e4      	b.n	24756 <free_chunk+0x2c>

0002478c <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   2478c:	b570      	push	{r4, r5, r6, lr}
	return 31 - __builtin_clz(usable_sz);
   2478e:	fab1 f381 	clz	r3, r1
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   24792:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   24796:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
   2479a:	b1cd      	cbz	r5, 247d0 <alloc_chunk+0x44>
   2479c:	f1c3 021f 	rsb	r2, r3, #31
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   247a0:	f04f 0e03 	mov.w	lr, #3
		do {
			chunkid_t c = b->next;
   247a4:	1d14      	adds	r4, r2, #4
   247a6:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   247aa:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
		return ((uint16_t *)cmem)[f];
   247ae:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
   247b2:	8876      	ldrh	r6, [r6, #2]
			if (chunk_size(h, c) >= sz) {
   247b4:	ebb1 0f56 	cmp.w	r1, r6, lsr #1
   247b8:	d914      	bls.n	247e4 <alloc_chunk+0x58>
   247ba:	4484      	add	ip, r0
   247bc:	f8bc 4006 	ldrh.w	r4, [ip, #6]
				free_list_remove_bidx(h, c, bi);
				return c;
			}
			b->next = next_free_chunk(h, c);
   247c0:	1d16      	adds	r6, r2, #4
   247c2:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   247c6:	f1be 0e01 	subs.w	lr, lr, #1
   247ca:	d001      	beq.n	247d0 <alloc_chunk+0x44>
   247cc:	42a5      	cmp	r5, r4
   247ce:	d1e9      	bne.n	247a4 <alloc_chunk+0x18>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   247d0:	68c4      	ldr	r4, [r0, #12]
   247d2:	f1c3 0220 	rsb	r2, r3, #32
   247d6:	2301      	movs	r3, #1
   247d8:	4093      	lsls	r3, r2
   247da:	425b      	negs	r3, r3

	if (bmask != 0U) {
   247dc:	401c      	ands	r4, r3
   247de:	d105      	bne.n	247ec <alloc_chunk+0x60>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   247e0:	4620      	mov	r0, r4
   247e2:	bd70      	pop	{r4, r5, r6, pc}
				free_list_remove_bidx(h, c, bi);
   247e4:	4621      	mov	r1, r4
   247e6:	f7ff ff07 	bl	245f8 <free_list_remove_bidx>
				return c;
   247ea:	e7f9      	b.n	247e0 <alloc_chunk+0x54>
		int minbucket = __builtin_ctz(bmask);
   247ec:	fa94 f2a4 	rbit	r2, r4
   247f0:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   247f4:	1d13      	adds	r3, r2, #4
   247f6:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   247fa:	4621      	mov	r1, r4
   247fc:	f7ff fefc 	bl	245f8 <free_list_remove_bidx>
		return c;
   24800:	e7ee      	b.n	247e0 <alloc_chunk+0x54>

00024802 <sys_heap_free>:
	if (mem == NULL) {
   24802:	b179      	cbz	r1, 24824 <sys_heap_free+0x22>
{
   24804:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   24806:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   24808:	4620      	mov	r0, r4
   2480a:	f7ff ff72 	bl	246f2 <mem_to_chunkid>
   2480e:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   24810:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   24814:	8853      	ldrh	r3, [r2, #2]
   24816:	f023 0301 	bic.w	r3, r3, #1
   2481a:	8053      	strh	r3, [r2, #2]
	free_chunk(h, c);
   2481c:	4620      	mov	r0, r4
   2481e:	f7ff ff84 	bl	2472a <free_chunk>
}
   24822:	bd10      	pop	{r4, pc}
   24824:	4770      	bx	lr

00024826 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   24826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   24828:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   2482a:	b341      	cbz	r1, 2487e <sys_heap_alloc+0x58>
   2482c:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   2482e:	68aa      	ldr	r2, [r5, #8]
   24830:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   24834:	d925      	bls.n	24882 <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   24836:	330b      	adds	r3, #11
   24838:	08dc      	lsrs	r4, r3, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2483a:	4621      	mov	r1, r4
   2483c:	4628      	mov	r0, r5
   2483e:	f7ff ffa5 	bl	2478c <alloc_chunk>
	if (c == 0U) {
   24842:	4607      	mov	r7, r0
   24844:	b1f8      	cbz	r0, 24886 <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
   24846:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
   24848:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
   2484c:	885b      	ldrh	r3, [r3, #2]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   2484e:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   24852:	d309      	bcc.n	24868 <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
   24854:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   24856:	885a      	ldrh	r2, [r3, #2]
   24858:	f042 0201 	orr.w	r2, r2, #1
   2485c:	805a      	strh	r2, [r3, #2]
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);

	mem = chunk_mem(h, c);
   2485e:	4639      	mov	r1, r7
   24860:	4628      	mov	r0, r5
   24862:	f7ff fec5 	bl	245f0 <chunk_mem>
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   24866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
   24868:	4404      	add	r4, r0
   2486a:	4622      	mov	r2, r4
   2486c:	4601      	mov	r1, r0
   2486e:	4628      	mov	r0, r5
   24870:	f7ff ff08 	bl	24684 <split_chunks>
		free_list_add(h, c + chunk_sz);
   24874:	4621      	mov	r1, r4
   24876:	4628      	mov	r0, r5
   24878:	f7ff ff4b 	bl	24712 <free_list_add>
   2487c:	e7ea      	b.n	24854 <sys_heap_alloc+0x2e>
		return NULL;
   2487e:	2000      	movs	r0, #0
   24880:	e7f1      	b.n	24866 <sys_heap_alloc+0x40>
   24882:	2000      	movs	r0, #0
   24884:	e7ef      	b.n	24866 <sys_heap_alloc+0x40>
		return NULL;
   24886:	2000      	movs	r0, #0
   24888:	e7ed      	b.n	24866 <sys_heap_alloc+0x40>

0002488a <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   2488a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2488e:	4615      	mov	r5, r2
	struct z_heap *h = heap->heap;
   24890:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   24892:	424b      	negs	r3, r1
   24894:	400b      	ands	r3, r1
	if (align != rew) {
   24896:	f101 39ff 	add.w	r9, r1, #4294967295
   2489a:	ea19 0901 	ands.w	r9, r9, r1
   2489e:	d004      	beq.n	248aa <sys_heap_aligned_alloc+0x20>
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   248a0:	2b03      	cmp	r3, #3
   248a2:	d847      	bhi.n	24934 <sys_heap_aligned_alloc+0xaa>
		align -= rew;
   248a4:	464c      	mov	r4, r9
	rew = align & -align;
   248a6:	4699      	mov	r9, r3
   248a8:	e003      	b.n	248b2 <sys_heap_aligned_alloc+0x28>
   248aa:	460c      	mov	r4, r1
	} else {
		if (align <= chunk_header_bytes(h)) {
   248ac:	2904      	cmp	r1, #4
   248ae:	d93c      	bls.n	2492a <sys_heap_aligned_alloc+0xa0>
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
   248b0:	2304      	movs	r3, #4
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   248b2:	2d00      	cmp	r5, #0
   248b4:	d056      	beq.n	24964 <sys_heap_aligned_alloc+0xda>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   248b6:	68b2      	ldr	r2, [r6, #8]
   248b8:	ebb2 0fd5 	cmp.w	r2, r5, lsr #3
   248bc:	d955      	bls.n	2496a <sys_heap_aligned_alloc+0xe0>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   248be:	1961      	adds	r1, r4, r5
   248c0:	1ac9      	subs	r1, r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   248c2:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   248c4:	08c9      	lsrs	r1, r1, #3
   248c6:	4630      	mov	r0, r6
   248c8:	f7ff ff60 	bl	2478c <alloc_chunk>

	if (c0 == 0) {
   248cc:	4607      	mov	r7, r0
   248ce:	2800      	cmp	r0, #0
   248d0:	d04e      	beq.n	24970 <sys_heap_aligned_alloc+0xe6>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   248d2:	4601      	mov	r1, r0
   248d4:	4630      	mov	r0, r6
   248d6:	f7ff fe8b 	bl	245f0 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   248da:	eb00 0809 	add.w	r8, r0, r9
   248de:	44a0      	add	r8, r4
   248e0:	f108 38ff 	add.w	r8, r8, #4294967295
   248e4:	4264      	negs	r4, r4
   248e6:	ea08 0804 	and.w	r8, r8, r4
   248ea:	eba8 0809 	sub.w	r8, r8, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   248ee:	eb08 0405 	add.w	r4, r8, r5
   248f2:	3407      	adds	r4, #7
   248f4:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   248f8:	4641      	mov	r1, r8
   248fa:	4630      	mov	r0, r6
   248fc:	f7ff fef9 	bl	246f2 <mem_to_chunkid>
   24900:	4605      	mov	r5, r0
	chunkid_t c_end = end - chunk_buf(h);
   24902:	1ba4      	subs	r4, r4, r6
   24904:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   24906:	4287      	cmp	r7, r0
   24908:	d318      	bcc.n	2493c <sys_heap_aligned_alloc+0xb2>
	void *cmem = &buf[c];
   2490a:	00ef      	lsls	r7, r5, #3
		return ((uint16_t *)cmem)[f];
   2490c:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
   24910:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
   24912:	eb05 0353 	add.w	r3, r5, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   24916:	429c      	cmp	r4, r3
   24918:	d31a      	bcc.n	24950 <sys_heap_aligned_alloc+0xc6>
	void *cmem = &buf[c];
   2491a:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2491c:	8873      	ldrh	r3, [r6, #2]
   2491e:	f043 0301 	orr.w	r3, r3, #1
   24922:	8073      	strh	r3, [r6, #2]
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   24924:	4640      	mov	r0, r8
   24926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return sys_heap_alloc(heap, bytes);
   2492a:	4611      	mov	r1, r2
   2492c:	f7ff ff7b 	bl	24826 <sys_heap_alloc>
   24930:	4680      	mov	r8, r0
   24932:	e7f7      	b.n	24924 <sys_heap_aligned_alloc+0x9a>
		align -= rew;
   24934:	464c      	mov	r4, r9
	rew = align & -align;
   24936:	4699      	mov	r9, r3
		gap = MIN(rew, chunk_header_bytes(h));
   24938:	2304      	movs	r3, #4
   2493a:	e7ba      	b.n	248b2 <sys_heap_aligned_alloc+0x28>
		split_chunks(h, c0, c);
   2493c:	4602      	mov	r2, r0
   2493e:	4639      	mov	r1, r7
   24940:	4630      	mov	r0, r6
   24942:	f7ff fe9f 	bl	24684 <split_chunks>
		free_list_add(h, c0);
   24946:	4639      	mov	r1, r7
   24948:	4630      	mov	r0, r6
   2494a:	f7ff fee2 	bl	24712 <free_list_add>
   2494e:	e7dc      	b.n	2490a <sys_heap_aligned_alloc+0x80>
		split_chunks(h, c, c_end);
   24950:	4622      	mov	r2, r4
   24952:	4629      	mov	r1, r5
   24954:	4630      	mov	r0, r6
   24956:	f7ff fe95 	bl	24684 <split_chunks>
		free_list_add(h, c_end);
   2495a:	4621      	mov	r1, r4
   2495c:	4630      	mov	r0, r6
   2495e:	f7ff fed8 	bl	24712 <free_list_add>
   24962:	e7da      	b.n	2491a <sys_heap_aligned_alloc+0x90>
		return NULL;
   24964:	f04f 0800 	mov.w	r8, #0
   24968:	e7dc      	b.n	24924 <sys_heap_aligned_alloc+0x9a>
   2496a:	f04f 0800 	mov.w	r8, #0
   2496e:	e7d9      	b.n	24924 <sys_heap_aligned_alloc+0x9a>
		return NULL;
   24970:	f04f 0800 	mov.w	r8, #0
   24974:	e7d6      	b.n	24924 <sys_heap_aligned_alloc+0x9a>

00024976 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   24976:	b570      	push	{r4, r5, r6, lr}
   24978:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   2497a:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2497c:	1dc8      	adds	r0, r1, #7
   2497e:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   24982:	440a      	add	r2, r1
   24984:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   24988:	1a12      	subs	r2, r2, r0
   2498a:	08d5      	lsrs	r5, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   2498c:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   2498e:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
   24990:	2300      	movs	r3, #0
   24992:	60c3      	str	r3, [r0, #12]
	return 31 - __builtin_clz(usable_sz);
   24994:	fab5 f185 	clz	r1, r5
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   24998:	f1c1 0e20 	rsb	lr, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   2499c:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
   249a0:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   249a2:	1dce      	adds	r6, r1, #7
   249a4:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   249a6:	e005      	b.n	249b4 <sys_heap_init+0x3e>
		h->buckets[i].next = 0;
   249a8:	f103 0c04 	add.w	ip, r3, #4
   249ac:	2400      	movs	r4, #0
   249ae:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   249b2:	3301      	adds	r3, #1
   249b4:	4573      	cmp	r3, lr
   249b6:	dbf7      	blt.n	249a8 <sys_heap_init+0x32>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   249b8:	004c      	lsls	r4, r1, #1
		((uint16_t *)cmem)[f] = val;
   249ba:	b2a4      	uxth	r4, r4
   249bc:	8044      	strh	r4, [r0, #2]
   249be:	f04f 0c00 	mov.w	ip, #0
   249c2:	f8a0 c000 	strh.w	ip, [r0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   249c6:	f044 0401 	orr.w	r4, r4, #1
   249ca:	8044      	strh	r4, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   249cc:	1a6b      	subs	r3, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   249ce:	ea4f 0e43 	mov.w	lr, r3, lsl #1
	void *cmem = &buf[c];
   249d2:	f026 0407 	bic.w	r4, r6, #7
		((uint16_t *)cmem)[f] = val;
   249d6:	1ca5      	adds	r5, r4, #2
   249d8:	f820 e005 	strh.w	lr, [r0, r5]
   249dc:	5301      	strh	r1, [r0, r4]
	void *cmem = &buf[c];
   249de:	f022 0407 	bic.w	r4, r2, #7
		((uint16_t *)cmem)[f] = val;
   249e2:	1c95      	adds	r5, r2, #2
   249e4:	f820 c005 	strh.w	ip, [r0, r5]
   249e8:	4402      	add	r2, r0
   249ea:	5303      	strh	r3, [r0, r4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   249ec:	8853      	ldrh	r3, [r2, #2]
   249ee:	f043 0301 	orr.w	r3, r3, #1
   249f2:	8053      	strh	r3, [r2, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   249f4:	f7ff fe8d 	bl	24712 <free_list_add>
}
   249f8:	bd70      	pop	{r4, r5, r6, pc}

000249fa <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   249fa:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   249fe:	8b03      	ldrh	r3, [r0, #24]
   24a00:	f023 0307 	bic.w	r3, r3, #7
   24a04:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   24a06:	8303      	strh	r3, [r0, #24]
}
   24a08:	4770      	bx	lr

00024a0a <notify_monitors>:
{
   24a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24a0e:	4606      	mov	r6, r0
   24a10:	460f      	mov	r7, r1
   24a12:	4690      	mov	r8, r2
	return list->head;
   24a14:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   24a16:	b121      	cbz	r1, 24a22 <notify_monitors+0x18>
	return node->next;
   24a18:	680c      	ldr	r4, [r1, #0]
   24a1a:	b13c      	cbz	r4, 24a2c <notify_monitors+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24a1c:	b931      	cbnz	r1, 24a2c <notify_monitors+0x22>
   24a1e:	460c      	mov	r4, r1
   24a20:	e004      	b.n	24a2c <notify_monitors+0x22>
   24a22:	460c      	mov	r4, r1
   24a24:	e002      	b.n	24a2c <notify_monitors+0x22>
   24a26:	4623      	mov	r3, r4
   24a28:	4621      	mov	r1, r4
   24a2a:	461c      	mov	r4, r3
   24a2c:	b169      	cbz	r1, 24a4a <notify_monitors+0x40>
		mon->callback(mgr, mon, state, res);
   24a2e:	684d      	ldr	r5, [r1, #4]
   24a30:	4643      	mov	r3, r8
   24a32:	463a      	mov	r2, r7
   24a34:	4630      	mov	r0, r6
   24a36:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   24a38:	2c00      	cmp	r4, #0
   24a3a:	d0f4      	beq.n	24a26 <notify_monitors+0x1c>
	return node->next;
   24a3c:	6823      	ldr	r3, [r4, #0]
   24a3e:	2b00      	cmp	r3, #0
   24a40:	d0f2      	beq.n	24a28 <notify_monitors+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24a42:	2c00      	cmp	r4, #0
   24a44:	d1f0      	bne.n	24a28 <notify_monitors+0x1e>
   24a46:	4623      	mov	r3, r4
   24a48:	e7ee      	b.n	24a28 <notify_monitors+0x1e>
}
   24a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024a4e <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   24a4e:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   24a50:	f013 0307 	ands.w	r3, r3, #7
   24a54:	d103      	bne.n	24a5e <process_recheck+0x10>
	return list->head;
   24a56:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   24a58:	b10a      	cbz	r2, 24a5e <process_recheck+0x10>
		evt = EVT_START;
   24a5a:	2003      	movs	r0, #3
   24a5c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   24a5e:	2b02      	cmp	r3, #2
   24a60:	d003      	beq.n	24a6a <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   24a62:	2b01      	cmp	r3, #1
   24a64:	d006      	beq.n	24a74 <process_recheck+0x26>
	int evt = EVT_NOP;
   24a66:	2000      	movs	r0, #0
   24a68:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   24a6a:	8b42      	ldrh	r2, [r0, #26]
   24a6c:	2a00      	cmp	r2, #0
   24a6e:	d1f8      	bne.n	24a62 <process_recheck+0x14>
		evt = EVT_STOP;
   24a70:	2004      	movs	r0, #4
   24a72:	4770      	bx	lr
   24a74:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   24a76:	b10b      	cbz	r3, 24a7c <process_recheck+0x2e>
		evt = EVT_RESET;
   24a78:	2005      	movs	r0, #5
}
   24a7a:	4770      	bx	lr
	int evt = EVT_NOP;
   24a7c:	2000      	movs	r0, #0
   24a7e:	4770      	bx	lr

00024a80 <process_complete>:
{
   24a80:	b510      	push	{r4, lr}
   24a82:	4604      	mov	r4, r0
   24a84:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   24a86:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   24a88:	2a00      	cmp	r2, #0
   24a8a:	db07      	blt.n	24a9c <process_complete+0x1c>
   24a8c:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   24a90:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   24a92:	2a01      	cmp	r2, #1
   24a94:	d90e      	bls.n	24ab4 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   24a96:	2b04      	cmp	r3, #4
   24a98:	d036      	beq.n	24b08 <process_complete+0x88>
}
   24a9a:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
   24a9c:	e9d0 0100 	ldrd	r0, r1, [r0]
   24aa0:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   24aa4:	2300      	movs	r3, #0
   24aa6:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   24aa8:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   24aaa:	2101      	movs	r1, #1
   24aac:	4620      	mov	r0, r4
   24aae:	f7ff ffa4 	bl	249fa <set_state>
   24ab2:	e7f2      	b.n	24a9a <process_complete+0x1a>
		*clients = mgr->clients;
   24ab4:	e9d0 0100 	ldrd	r0, r1, [r0]
   24ab8:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   24abc:	2200      	movs	r2, #0
   24abe:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   24ac0:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   24ac2:	2b06      	cmp	r3, #6
   24ac4:	d11b      	bne.n	24afe <process_complete+0x7e>
	return list->head;
   24ac6:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   24aca:	b153      	cbz	r3, 24ae2 <process_complete+0x62>
				mgr->refs += 1U;
   24acc:	8b62      	ldrh	r2, [r4, #26]
   24ace:	3201      	adds	r2, #1
   24ad0:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   24ad2:	461a      	mov	r2, r3
	return node->next;
   24ad4:	681b      	ldr	r3, [r3, #0]
   24ad6:	2b00      	cmp	r3, #0
   24ad8:	d0f7      	beq.n	24aca <process_complete+0x4a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24ada:	2a00      	cmp	r2, #0
   24adc:	d1f5      	bne.n	24aca <process_complete+0x4a>
   24ade:	4613      	mov	r3, r2
   24ae0:	e7f3      	b.n	24aca <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
   24ae2:	2102      	movs	r1, #2
   24ae4:	4620      	mov	r0, r4
   24ae6:	f7ff ff88 	bl	249fa <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   24aea:	4620      	mov	r0, r4
   24aec:	f7ff ffaf 	bl	24a4e <process_recheck>
   24af0:	2800      	cmp	r0, #0
   24af2:	d0d2      	beq.n	24a9a <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   24af4:	8b23      	ldrh	r3, [r4, #24]
   24af6:	f043 0320 	orr.w	r3, r3, #32
   24afa:	8323      	strh	r3, [r4, #24]
   24afc:	e7cd      	b.n	24a9a <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   24afe:	2100      	movs	r1, #0
   24b00:	4620      	mov	r0, r4
   24b02:	f7ff ff7a 	bl	249fa <set_state>
   24b06:	e7f0      	b.n	24aea <process_complete+0x6a>
		set_state(mgr, ONOFF_STATE_OFF);
   24b08:	2100      	movs	r1, #0
   24b0a:	f7ff ff76 	bl	249fa <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   24b0e:	4620      	mov	r0, r4
   24b10:	f7ff ff9d 	bl	24a4e <process_recheck>
   24b14:	2800      	cmp	r0, #0
   24b16:	d0c0      	beq.n	24a9a <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   24b18:	8b23      	ldrh	r3, [r4, #24]
   24b1a:	f043 0320 	orr.w	r3, r3, #32
   24b1e:	8323      	strh	r3, [r4, #24]
}
   24b20:	e7bb      	b.n	24a9a <process_complete+0x1a>

00024b22 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   24b22:	b150      	cbz	r0, 24b3a <validate_args+0x18>
{
   24b24:	b510      	push	{r4, lr}
   24b26:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   24b28:	b151      	cbz	r1, 24b40 <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
   24b2a:	1d08      	adds	r0, r1, #4
   24b2c:	f000 f8c4 	bl	24cb8 <sys_notify_validate>
	if ((rv == 0)
   24b30:	b910      	cbnz	r0, 24b38 <validate_args+0x16>
	    && ((cli->notify.flags
   24b32:	68a3      	ldr	r3, [r4, #8]
   24b34:	2b03      	cmp	r3, #3
   24b36:	d806      	bhi.n	24b46 <validate_args+0x24>
}
   24b38:	bd10      	pop	{r4, pc}
		return -EINVAL;
   24b3a:	f06f 0015 	mvn.w	r0, #21
}
   24b3e:	4770      	bx	lr
		return -EINVAL;
   24b40:	f06f 0015 	mvn.w	r0, #21
   24b44:	e7f8      	b.n	24b38 <validate_args+0x16>
		rv = -EINVAL;
   24b46:	f06f 0015 	mvn.w	r0, #21
   24b4a:	e7f5      	b.n	24b38 <validate_args+0x16>

00024b4c <notify_one>:
{
   24b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24b50:	4607      	mov	r7, r0
   24b52:	460c      	mov	r4, r1
   24b54:	4616      	mov	r6, r2
   24b56:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   24b58:	4619      	mov	r1, r3
   24b5a:	1d20      	adds	r0, r4, #4
   24b5c:	f000 f8cb 	bl	24cf6 <sys_notify_finalize>
	if (cb) {
   24b60:	b128      	cbz	r0, 24b6e <notify_one+0x22>
   24b62:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   24b64:	462b      	mov	r3, r5
   24b66:	4632      	mov	r2, r6
   24b68:	4621      	mov	r1, r4
   24b6a:	4638      	mov	r0, r7
   24b6c:	47c0      	blx	r8
}
   24b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024b72 <notify_all>:
{
   24b72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24b76:	4680      	mov	r8, r0
   24b78:	460c      	mov	r4, r1
   24b7a:	4617      	mov	r7, r2
   24b7c:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
   24b7e:	e004      	b.n	24b8a <notify_all+0x18>
		notify_one(mgr, cli, state, res);
   24b80:	4633      	mov	r3, r6
   24b82:	463a      	mov	r2, r7
   24b84:	4640      	mov	r0, r8
   24b86:	f7ff ffe1 	bl	24b4c <notify_one>
	return list->head;
   24b8a:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   24b8c:	b131      	cbz	r1, 24b9c <notify_all+0x2a>
	return node->next;
   24b8e:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   24b90:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24b92:	6863      	ldr	r3, [r4, #4]
   24b94:	428b      	cmp	r3, r1
   24b96:	d1f3      	bne.n	24b80 <notify_all+0xe>
	list->tail = node;
   24b98:	6065      	str	r5, [r4, #4]
}
   24b9a:	e7f1      	b.n	24b80 <notify_all+0xe>
}
   24b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024ba0 <transition_complete>:
{
   24ba0:	b508      	push	{r3, lr}
	__asm__ volatile(
   24ba2:	f04f 0c40 	mov.w	ip, #64	; 0x40
   24ba6:	f3ef 8211 	mrs	r2, BASEPRI
   24baa:	f38c 8812 	msr	BASEPRI_MAX, ip
   24bae:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   24bb2:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   24bb4:	2101      	movs	r1, #1
   24bb6:	f7ee faf9 	bl	131ac <process_event>
}
   24bba:	bd08      	pop	{r3, pc}

00024bbc <onoff_manager_init>:
	if ((mgr == NULL)
   24bbc:	4603      	mov	r3, r0
   24bbe:	b170      	cbz	r0, 24bde <onoff_manager_init+0x22>
	    || (transitions == NULL)
   24bc0:	b181      	cbz	r1, 24be4 <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
   24bc2:	680a      	ldr	r2, [r1, #0]
   24bc4:	b18a      	cbz	r2, 24bea <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
   24bc6:	684a      	ldr	r2, [r1, #4]
   24bc8:	b192      	cbz	r2, 24bf0 <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   24bca:	2000      	movs	r0, #0
   24bcc:	6018      	str	r0, [r3, #0]
   24bce:	6058      	str	r0, [r3, #4]
   24bd0:	6098      	str	r0, [r3, #8]
   24bd2:	60d8      	str	r0, [r3, #12]
   24bd4:	6118      	str	r0, [r3, #16]
   24bd6:	6158      	str	r0, [r3, #20]
   24bd8:	6198      	str	r0, [r3, #24]
   24bda:	6119      	str	r1, [r3, #16]
	return 0;
   24bdc:	4770      	bx	lr
		return -EINVAL;
   24bde:	f06f 0015 	mvn.w	r0, #21
   24be2:	4770      	bx	lr
   24be4:	f06f 0015 	mvn.w	r0, #21
   24be8:	4770      	bx	lr
   24bea:	f06f 0015 	mvn.w	r0, #21
   24bee:	4770      	bx	lr
   24bf0:	f06f 0015 	mvn.w	r0, #21
}
   24bf4:	4770      	bx	lr

00024bf6 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   24bf6:	b570      	push	{r4, r5, r6, lr}
   24bf8:	4605      	mov	r5, r0
   24bfa:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   24bfc:	f7ff ff91 	bl	24b22 <validate_args>

	if (rv < 0) {
   24c00:	1e04      	subs	r4, r0, #0
   24c02:	db30      	blt.n	24c66 <onoff_request+0x70>
   24c04:	f04f 0340 	mov.w	r3, #64	; 0x40
   24c08:	f3ef 8211 	mrs	r2, BASEPRI
   24c0c:	f383 8812 	msr	BASEPRI_MAX, r3
   24c10:	f3bf 8f6f 	isb	sy
   24c14:	4696      	mov	lr, r2
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   24c16:	f8b5 c018 	ldrh.w	ip, [r5, #24]
   24c1a:	f00c 0c07 	and.w	ip, ip, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   24c1e:	8b6b      	ldrh	r3, [r5, #26]
   24c20:	f64f 71ff 	movw	r1, #65535	; 0xffff
   24c24:	428b      	cmp	r3, r1
   24c26:	d02c      	beq.n	24c82 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   24c28:	4664      	mov	r4, ip
	if (state == ONOFF_STATE_ON) {
   24c2a:	f1bc 0f02 	cmp.w	ip, #2
   24c2e:	d008      	beq.n	24c42 <onoff_request+0x4c>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   24c30:	f1bc 0f06 	cmp.w	ip, #6
   24c34:	d819      	bhi.n	24c6a <onoff_request+0x74>
   24c36:	e8df f00c 	tbb	[pc, ip]
   24c3a:	181e      	.short	0x181e
   24c3c:	2a1e1818 	.word	0x2a1e1818
   24c40:	1e          	.byte	0x1e
   24c41:	00          	.byte	0x00
		mgr->refs += 1U;
   24c42:	3301      	adds	r3, #1
   24c44:	836b      	strh	r3, [r5, #26]
		notify = true;
   24c46:	2301      	movs	r3, #1
	bool start = false;             /* trigger a start transition */
   24c48:	2100      	movs	r1, #0
	bool add_client = false;        /* add client to pending list */
   24c4a:	4608      	mov	r0, r1
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
   24c4c:	b128      	cbz	r0, 24c5a <onoff_request+0x64>
	parent->next = child;
   24c4e:	2000      	movs	r0, #0
   24c50:	6030      	str	r0, [r6, #0]
	return list->tail;
   24c52:	6868      	ldr	r0, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   24c54:	b308      	cbz	r0, 24c9a <onoff_request+0xa4>
	parent->next = child;
   24c56:	6006      	str	r6, [r0, #0]
	list->tail = node;
   24c58:	606e      	str	r6, [r5, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   24c5a:	bb09      	cbnz	r1, 24ca0 <onoff_request+0xaa>
	__asm__ volatile(
   24c5c:	f38e 8811 	msr	BASEPRI, lr
   24c60:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   24c64:	bb0b      	cbnz	r3, 24caa <onoff_request+0xb4>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   24c66:	4620      	mov	r0, r4
   24c68:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   24c6a:	f06f 0404 	mvn.w	r4, #4
   24c6e:	2300      	movs	r3, #0
   24c70:	4619      	mov	r1, r3
   24c72:	4618      	mov	r0, r3
   24c74:	e7ea      	b.n	24c4c <onoff_request+0x56>
		start = (state == ONOFF_STATE_OFF);
   24c76:	fabc f18c 	clz	r1, ip
   24c7a:	0949      	lsrs	r1, r1, #5
	bool notify = false;            /* do client notification */
   24c7c:	2300      	movs	r3, #0
		add_client = true;
   24c7e:	2001      	movs	r0, #1
   24c80:	e7e4      	b.n	24c4c <onoff_request+0x56>
		rv = -EAGAIN;
   24c82:	f06f 040a 	mvn.w	r4, #10
	bool notify = false;            /* do client notification */
   24c86:	2300      	movs	r3, #0
	bool start = false;             /* trigger a start transition */
   24c88:	4619      	mov	r1, r3
	bool add_client = false;        /* add client to pending list */
   24c8a:	4618      	mov	r0, r3
   24c8c:	e7de      	b.n	24c4c <onoff_request+0x56>
	if (state == ONOFF_STATE_ON) {
   24c8e:	f06f 0485 	mvn.w	r4, #133	; 0x85
   24c92:	2300      	movs	r3, #0
   24c94:	4619      	mov	r1, r3
   24c96:	4618      	mov	r0, r3
   24c98:	e7d8      	b.n	24c4c <onoff_request+0x56>
   24c9a:	606e      	str	r6, [r5, #4]
	list->head = node;
   24c9c:	602e      	str	r6, [r5, #0]
}
   24c9e:	e7dc      	b.n	24c5a <onoff_request+0x64>
		process_event(mgr, EVT_RECHECK, key);
   24ca0:	2102      	movs	r1, #2
   24ca2:	4628      	mov	r0, r5
   24ca4:	f7ee fa82 	bl	131ac <process_event>
   24ca8:	e7dd      	b.n	24c66 <onoff_request+0x70>
			notify_one(mgr, cli, state, 0);
   24caa:	2300      	movs	r3, #0
   24cac:	4662      	mov	r2, ip
   24cae:	4631      	mov	r1, r6
   24cb0:	4628      	mov	r0, r5
   24cb2:	f7ff ff4b 	bl	24b4c <notify_one>
   24cb6:	e7d6      	b.n	24c66 <onoff_request+0x70>

00024cb8 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   24cb8:	4602      	mov	r2, r0
   24cba:	b1b0      	cbz	r0, 24cea <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   24cbc:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   24cbe:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   24cc2:	2b02      	cmp	r3, #2
   24cc4:	d00b      	beq.n	24cde <sys_notify_validate+0x26>
   24cc6:	2b03      	cmp	r3, #3
   24cc8:	d004      	beq.n	24cd4 <sys_notify_validate+0x1c>
   24cca:	2b01      	cmp	r3, #1
   24ccc:	d004      	beq.n	24cd8 <sys_notify_validate+0x20>
   24cce:	f06f 0015 	mvn.w	r0, #21
   24cd2:	4770      	bx	lr
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   24cd4:	6803      	ldr	r3, [r0, #0]
   24cd6:	b15b      	cbz	r3, 24cf0 <sys_notify_validate+0x38>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   24cd8:	2000      	movs	r0, #0
   24cda:	6090      	str	r0, [r2, #8]
   24cdc:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   24cde:	6803      	ldr	r3, [r0, #0]
   24ce0:	2b00      	cmp	r3, #0
   24ce2:	d1f9      	bne.n	24cd8 <sys_notify_validate+0x20>
			rv = -EINVAL;
   24ce4:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   24ce8:	4770      	bx	lr
		return -EINVAL;
   24cea:	f06f 0015 	mvn.w	r0, #21
   24cee:	4770      	bx	lr
			rv = -EINVAL;
   24cf0:	f06f 0015 	mvn.w	r0, #21
   24cf4:	4770      	bx	lr

00024cf6 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   24cf6:	b510      	push	{r4, lr}
   24cf8:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   24cfa:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   24cfc:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   24d00:	6081      	str	r1, [r0, #8]
	switch (method) {
   24d02:	2a02      	cmp	r2, #2
   24d04:	d004      	beq.n	24d10 <sys_notify_finalize+0x1a>
   24d06:	2a03      	cmp	r2, #3
   24d08:	d105      	bne.n	24d16 <sys_notify_finalize+0x20>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   24d0a:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   24d0c:	2000      	movs	r0, #0
		break;
   24d0e:	e004      	b.n	24d1a <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
   24d10:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   24d12:	2400      	movs	r4, #0
		break;
   24d14:	e001      	b.n	24d1a <sys_notify_finalize+0x24>
	switch (method) {
   24d16:	2400      	movs	r4, #0
   24d18:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   24d1a:	2200      	movs	r2, #0
   24d1c:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   24d1e:	b108      	cbz	r0, 24d24 <sys_notify_finalize+0x2e>
	return z_impl_k_poll_signal_raise(sig, result);
   24d20:	f7fe ffc8 	bl	23cb4 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   24d24:	4620      	mov	r0, r4
   24d26:	bd10      	pop	{r4, pc}

00024d28 <extract_decimal>:
{
   24d28:	4684      	mov	ip, r0
	const char *sp = *str;
   24d2a:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   24d2c:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   24d2e:	e006      	b.n	24d3e <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
   24d30:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   24d34:	3201      	adds	r2, #1
   24d36:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   24d3a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   24d3e:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   24d40:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   24d44:	2909      	cmp	r1, #9
   24d46:	d9f3      	bls.n	24d30 <extract_decimal+0x8>
	*str = sp;
   24d48:	f8cc 2000 	str.w	r2, [ip]
}
   24d4c:	4770      	bx	lr

00024d4e <extract_width>:
{
   24d4e:	b530      	push	{r4, r5, lr}
   24d50:	b083      	sub	sp, #12
   24d52:	4604      	mov	r4, r0
   24d54:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
   24d56:	7803      	ldrb	r3, [r0, #0]
   24d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   24d5c:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
   24d5e:	460d      	mov	r5, r1
   24d60:	780b      	ldrb	r3, [r1, #0]
   24d62:	2b2a      	cmp	r3, #42	; 0x2a
   24d64:	d018      	beq.n	24d98 <extract_width+0x4a>
	size_t width = extract_decimal(&sp);
   24d66:	a801      	add	r0, sp, #4
   24d68:	f7ff ffde 	bl	24d28 <extract_decimal>
	if (sp != wp) {
   24d6c:	9b01      	ldr	r3, [sp, #4]
   24d6e:	429d      	cmp	r5, r3
   24d70:	d00f      	beq.n	24d92 <extract_width+0x44>
		conv->width_present = true;
   24d72:	7823      	ldrb	r3, [r4, #0]
   24d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   24d78:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
   24d7a:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
   24d7c:	b2db      	uxtb	r3, r3
   24d7e:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   24d82:	2800      	cmp	r0, #0
   24d84:	db10      	blt.n	24da8 <extract_width+0x5a>
   24d86:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   24d88:	4313      	orrs	r3, r2
   24d8a:	7822      	ldrb	r2, [r4, #0]
   24d8c:	f363 0241 	bfi	r2, r3, #1, #1
   24d90:	7022      	strb	r2, [r4, #0]
	return sp;
   24d92:	9801      	ldr	r0, [sp, #4]
}
   24d94:	b003      	add	sp, #12
   24d96:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
   24d98:	7843      	ldrb	r3, [r0, #1]
   24d9a:	f043 0301 	orr.w	r3, r3, #1
   24d9e:	7043      	strb	r3, [r0, #1]
		return ++sp;
   24da0:	4608      	mov	r0, r1
   24da2:	3001      	adds	r0, #1
   24da4:	9001      	str	r0, [sp, #4]
   24da6:	e7f5      	b.n	24d94 <extract_width+0x46>
				      || (width != (size_t)conv->width_value));
   24da8:	2201      	movs	r2, #1
   24daa:	e7ed      	b.n	24d88 <extract_width+0x3a>

00024dac <extract_prec>:
{
   24dac:	b510      	push	{r4, lr}
   24dae:	b082      	sub	sp, #8
   24db0:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
   24db2:	780b      	ldrb	r3, [r1, #0]
   24db4:	2b2e      	cmp	r3, #46	; 0x2e
   24db6:	bf14      	ite	ne
   24db8:	2300      	movne	r3, #0
   24dba:	2301      	moveq	r3, #1
   24dbc:	7842      	ldrb	r2, [r0, #1]
   24dbe:	f363 0241 	bfi	r2, r3, #1, #1
   24dc2:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
   24dc4:	b1c3      	cbz	r3, 24df8 <extract_prec+0x4c>
   24dc6:	4604      	mov	r4, r0
	++sp;
   24dc8:	9b01      	ldr	r3, [sp, #4]
   24dca:	1c5a      	adds	r2, r3, #1
   24dcc:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
   24dce:	785b      	ldrb	r3, [r3, #1]
   24dd0:	2b2a      	cmp	r3, #42	; 0x2a
   24dd2:	d013      	beq.n	24dfc <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
   24dd4:	a801      	add	r0, sp, #4
   24dd6:	f7ff ffa7 	bl	24d28 <extract_decimal>
	conv->prec_value = prec;
   24dda:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
   24ddc:	7823      	ldrb	r3, [r4, #0]
   24dde:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   24de2:	2800      	cmp	r0, #0
   24de4:	db12      	blt.n	24e0c <extract_prec+0x60>
   24de6:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   24de8:	4313      	orrs	r3, r2
   24dea:	7822      	ldrb	r2, [r4, #0]
   24dec:	f363 0241 	bfi	r2, r3, #1, #1
   24df0:	7022      	strb	r2, [r4, #0]
	return sp;
   24df2:	9801      	ldr	r0, [sp, #4]
}
   24df4:	b002      	add	sp, #8
   24df6:	bd10      	pop	{r4, pc}
		return sp;
   24df8:	4608      	mov	r0, r1
   24dfa:	e7fb      	b.n	24df4 <extract_prec+0x48>
		conv->prec_star = true;
   24dfc:	7843      	ldrb	r3, [r0, #1]
   24dfe:	f043 0304 	orr.w	r3, r3, #4
   24e02:	7043      	strb	r3, [r0, #1]
		return ++sp;
   24e04:	4610      	mov	r0, r2
   24e06:	3001      	adds	r0, #1
   24e08:	9001      	str	r0, [sp, #4]
   24e0a:	e7f3      	b.n	24df4 <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
   24e0c:	2201      	movs	r2, #1
   24e0e:	e7eb      	b.n	24de8 <extract_prec+0x3c>

00024e10 <extract_length>:
{
   24e10:	4602      	mov	r2, r0
	switch (*sp) {
   24e12:	780b      	ldrb	r3, [r1, #0]
   24e14:	3b4c      	subs	r3, #76	; 0x4c
   24e16:	2b2e      	cmp	r3, #46	; 0x2e
   24e18:	d85b      	bhi.n	24ed2 <extract_length+0xc2>
   24e1a:	e8df f003 	tbb	[pc, r3]
   24e1e:	5a4f      	.short	0x5a4f
   24e20:	5a5a5a5a 	.word	0x5a5a5a5a
   24e24:	5a5a5a5a 	.word	0x5a5a5a5a
   24e28:	5a5a5a5a 	.word	0x5a5a5a5a
   24e2c:	5a5a5a5a 	.word	0x5a5a5a5a
   24e30:	5a5a5a5a 	.word	0x5a5a5a5a
   24e34:	5a5a5a5a 	.word	0x5a5a5a5a
   24e38:	5a185a5a 	.word	0x5a185a5a
   24e3c:	5a295a3a 	.word	0x5a295a3a
   24e40:	5a5a5a5a 	.word	0x5a5a5a5a
   24e44:	5a485a5a 	.word	0x5a485a5a
   24e48:	5a5a5a5a 	.word	0x5a5a5a5a
   24e4c:	41          	.byte	0x41
   24e4d:	00          	.byte	0x00
		if (*++sp == 'h') {
   24e4e:	1c48      	adds	r0, r1, #1
   24e50:	784b      	ldrb	r3, [r1, #1]
   24e52:	2b68      	cmp	r3, #104	; 0x68
   24e54:	d005      	beq.n	24e62 <extract_length+0x52>
			conv->length_mod = LENGTH_H;
   24e56:	7853      	ldrb	r3, [r2, #1]
   24e58:	2102      	movs	r1, #2
   24e5a:	f361 03c6 	bfi	r3, r1, #3, #4
   24e5e:	7053      	strb	r3, [r2, #1]
   24e60:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
   24e62:	7853      	ldrb	r3, [r2, #1]
   24e64:	2001      	movs	r0, #1
   24e66:	f360 03c6 	bfi	r3, r0, #3, #4
   24e6a:	7053      	strb	r3, [r2, #1]
			++sp;
   24e6c:	1c88      	adds	r0, r1, #2
   24e6e:	4770      	bx	lr
		if (*++sp == 'l') {
   24e70:	1c48      	adds	r0, r1, #1
   24e72:	784b      	ldrb	r3, [r1, #1]
   24e74:	2b6c      	cmp	r3, #108	; 0x6c
   24e76:	d005      	beq.n	24e84 <extract_length+0x74>
			conv->length_mod = LENGTH_L;
   24e78:	7853      	ldrb	r3, [r2, #1]
   24e7a:	2103      	movs	r1, #3
   24e7c:	f361 03c6 	bfi	r3, r1, #3, #4
   24e80:	7053      	strb	r3, [r2, #1]
   24e82:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
   24e84:	7853      	ldrb	r3, [r2, #1]
   24e86:	2004      	movs	r0, #4
   24e88:	f360 03c6 	bfi	r3, r0, #3, #4
   24e8c:	7053      	strb	r3, [r2, #1]
			++sp;
   24e8e:	1c88      	adds	r0, r1, #2
   24e90:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
   24e92:	7853      	ldrb	r3, [r2, #1]
   24e94:	2005      	movs	r0, #5
   24e96:	f360 03c6 	bfi	r3, r0, #3, #4
   24e9a:	7053      	strb	r3, [r2, #1]
		++sp;
   24e9c:	1c48      	adds	r0, r1, #1
		break;
   24e9e:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
   24ea0:	7853      	ldrb	r3, [r2, #1]
   24ea2:	2006      	movs	r0, #6
   24ea4:	f360 03c6 	bfi	r3, r0, #3, #4
   24ea8:	7053      	strb	r3, [r2, #1]
		++sp;
   24eaa:	1c48      	adds	r0, r1, #1
		break;
   24eac:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
   24eae:	7853      	ldrb	r3, [r2, #1]
   24eb0:	2007      	movs	r0, #7
   24eb2:	f360 03c6 	bfi	r3, r0, #3, #4
   24eb6:	7053      	strb	r3, [r2, #1]
		++sp;
   24eb8:	1c48      	adds	r0, r1, #1
		break;
   24eba:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
   24ebc:	7853      	ldrb	r3, [r2, #1]
   24ebe:	2008      	movs	r0, #8
   24ec0:	f360 03c6 	bfi	r3, r0, #3, #4
   24ec4:	7053      	strb	r3, [r2, #1]
		++sp;
   24ec6:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
   24ec8:	7813      	ldrb	r3, [r2, #0]
   24eca:	f043 0302 	orr.w	r3, r3, #2
   24ece:	7013      	strb	r3, [r2, #0]
		break;
   24ed0:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
   24ed2:	7853      	ldrb	r3, [r2, #1]
   24ed4:	f36f 03c6 	bfc	r3, #3, #4
   24ed8:	7053      	strb	r3, [r2, #1]
		break;
   24eda:	4608      	mov	r0, r1
}
   24edc:	4770      	bx	lr

00024ede <extract_specifier>:
{
   24ede:	b500      	push	{lr}
   24ee0:	4602      	mov	r2, r0
	conv->specifier = *sp++;
   24ee2:	4608      	mov	r0, r1
   24ee4:	f810 3b01 	ldrb.w	r3, [r0], #1
   24ee8:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
   24eea:	2b78      	cmp	r3, #120	; 0x78
   24eec:	d817      	bhi.n	24f1e <extract_specifier+0x40>
   24eee:	2b6e      	cmp	r3, #110	; 0x6e
   24ef0:	d229      	bcs.n	24f46 <extract_specifier+0x68>
   24ef2:	2b69      	cmp	r3, #105	; 0x69
   24ef4:	d813      	bhi.n	24f1e <extract_specifier+0x40>
   24ef6:	2b58      	cmp	r3, #88	; 0x58
   24ef8:	d317      	bcc.n	24f2a <extract_specifier+0x4c>
   24efa:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
   24efe:	fa5f fc8c 	uxtb.w	ip, ip
   24f02:	2101      	movs	r1, #1
   24f04:	fa01 f10c 	lsl.w	r1, r1, ip
   24f08:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   24f0c:	d114      	bne.n	24f38 <extract_specifier+0x5a>
   24f0e:	f640 0c01 	movw	ip, #2049	; 0x801
   24f12:	ea11 0f0c 	tst.w	r1, ip
   24f16:	d155      	bne.n	24fc4 <extract_specifier+0xe6>
   24f18:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   24f1c:	d13a      	bne.n	24f94 <extract_specifier+0xb6>
		conv->invalid = true;
   24f1e:	7813      	ldrb	r3, [r2, #0]
   24f20:	f043 0301 	orr.w	r3, r3, #1
   24f24:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
   24f26:	2100      	movs	r1, #0
		break;
   24f28:	e042      	b.n	24fb0 <extract_specifier+0xd2>
	switch (conv->specifier) {
   24f2a:	2b41      	cmp	r3, #65	; 0x41
   24f2c:	d004      	beq.n	24f38 <extract_specifier+0x5a>
   24f2e:	d3f6      	bcc.n	24f1e <extract_specifier+0x40>
   24f30:	3b45      	subs	r3, #69	; 0x45
   24f32:	b2db      	uxtb	r3, r3
   24f34:	2b02      	cmp	r3, #2
   24f36:	d8f2      	bhi.n	24f1e <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
   24f38:	7893      	ldrb	r3, [r2, #2]
   24f3a:	2104      	movs	r1, #4
   24f3c:	f361 0302 	bfi	r3, r1, #0, #3
   24f40:	7093      	strb	r3, [r2, #2]
			unsupported = true;
   24f42:	2101      	movs	r1, #1
			break;
   24f44:	e034      	b.n	24fb0 <extract_specifier+0xd2>
	switch (conv->specifier) {
   24f46:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
   24f4a:	b2c9      	uxtb	r1, r1
   24f4c:	f04f 0c01 	mov.w	ip, #1
   24f50:	fa0c fc01 	lsl.w	ip, ip, r1
   24f54:	f240 4182 	movw	r1, #1154	; 0x482
   24f58:	ea1c 0f01 	tst.w	ip, r1
   24f5c:	bf14      	ite	ne
   24f5e:	f04f 0e01 	movne.w	lr, #1
   24f62:	f04f 0e00 	moveq.w	lr, #0
   24f66:	d12d      	bne.n	24fc4 <extract_specifier+0xe6>
   24f68:	f01c 0f24 	tst.w	ip, #36	; 0x24
   24f6c:	bf14      	ite	ne
   24f6e:	2101      	movne	r1, #1
   24f70:	2100      	moveq	r1, #0
   24f72:	d139      	bne.n	24fe8 <extract_specifier+0x10a>
   24f74:	f01c 0c01 	ands.w	ip, ip, #1
   24f78:	d0d1      	beq.n	24f1e <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
   24f7a:	7893      	ldrb	r3, [r2, #2]
   24f7c:	f04f 0e03 	mov.w	lr, #3
   24f80:	f36e 0302 	bfi	r3, lr, #0, #3
   24f84:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   24f86:	7853      	ldrb	r3, [r2, #1]
   24f88:	f003 0378 	and.w	r3, r3, #120	; 0x78
   24f8c:	2b40      	cmp	r3, #64	; 0x40
   24f8e:	d10f      	bne.n	24fb0 <extract_specifier+0xd2>
			unsupported = true;
   24f90:	4661      	mov	r1, ip
   24f92:	e00d      	b.n	24fb0 <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_SINT;
   24f94:	7891      	ldrb	r1, [r2, #2]
   24f96:	f04f 0c01 	mov.w	ip, #1
   24f9a:	f36c 0102 	bfi	r1, ip, #0, #3
   24f9e:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   24fa0:	7851      	ldrb	r1, [r2, #1]
   24fa2:	f001 0178 	and.w	r1, r1, #120	; 0x78
   24fa6:	2940      	cmp	r1, #64	; 0x40
   24fa8:	d013      	beq.n	24fd2 <extract_specifier+0xf4>
		if (conv->specifier == 'c') {
   24faa:	2b63      	cmp	r3, #99	; 0x63
   24fac:	d018      	beq.n	24fe0 <extract_specifier+0x102>
	bool unsupported = false;
   24fae:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
   24fb0:	7813      	ldrb	r3, [r2, #0]
   24fb2:	f3c3 0c40 	ubfx	ip, r3, #1, #1
   24fb6:	ea41 010c 	orr.w	r1, r1, ip
   24fba:	f361 0341 	bfi	r3, r1, #1, #1
   24fbe:	7013      	strb	r3, [r2, #0]
}
   24fc0:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
   24fc4:	7891      	ldrb	r1, [r2, #2]
   24fc6:	f04f 0c02 	mov.w	ip, #2
   24fca:	f36c 0102 	bfi	r1, ip, #0, #3
   24fce:	7091      	strb	r1, [r2, #2]
   24fd0:	e7e6      	b.n	24fa0 <extract_specifier+0xc2>
			conv->invalid = true;
   24fd2:	f892 c000 	ldrb.w	ip, [r2]
   24fd6:	f04c 0c01 	orr.w	ip, ip, #1
   24fda:	f882 c000 	strb.w	ip, [r2]
   24fde:	e7e4      	b.n	24faa <extract_specifier+0xcc>
			unsupported = (conv->length_mod != LENGTH_NONE);
   24fe0:	3900      	subs	r1, #0
   24fe2:	bf18      	it	ne
   24fe4:	2101      	movne	r1, #1
   24fe6:	e7e3      	b.n	24fb0 <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_PTR;
   24fe8:	7893      	ldrb	r3, [r2, #2]
   24fea:	f04f 0c03 	mov.w	ip, #3
   24fee:	f36c 0302 	bfi	r3, ip, #0, #3
   24ff2:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
   24ff4:	7853      	ldrb	r3, [r2, #1]
   24ff6:	f013 0f78 	tst.w	r3, #120	; 0x78
   24ffa:	d1d9      	bne.n	24fb0 <extract_specifier+0xd2>
	bool unsupported = false;
   24ffc:	4671      	mov	r1, lr
   24ffe:	e7d7      	b.n	24fb0 <extract_specifier+0xd2>

00025000 <extract_conversion>:
{
   25000:	b510      	push	{r4, lr}
   25002:	4604      	mov	r4, r0
   25004:	4608      	mov	r0, r1
	*conv = (struct conversion) {
   25006:	2300      	movs	r3, #0
   25008:	6023      	str	r3, [r4, #0]
   2500a:	6063      	str	r3, [r4, #4]
   2500c:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
   2500e:	784b      	ldrb	r3, [r1, #1]
   25010:	2b25      	cmp	r3, #37	; 0x25
   25012:	d014      	beq.n	2503e <extract_conversion+0x3e>
   25014:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
   25016:	4620      	mov	r0, r4
   25018:	f7ee f97e 	bl	13318 <extract_flags>
   2501c:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
   2501e:	4620      	mov	r0, r4
   25020:	f7ff fe95 	bl	24d4e <extract_width>
   25024:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
   25026:	4620      	mov	r0, r4
   25028:	f7ff fec0 	bl	24dac <extract_prec>
   2502c:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
   2502e:	4620      	mov	r0, r4
   25030:	f7ff feee 	bl	24e10 <extract_length>
   25034:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
   25036:	4620      	mov	r0, r4
   25038:	f7ff ff51 	bl	24ede <extract_specifier>
}
   2503c:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
   2503e:	3002      	adds	r0, #2
   25040:	70e3      	strb	r3, [r4, #3]
		return sp;
   25042:	e7fb      	b.n	2503c <extract_conversion+0x3c>

00025044 <conversion_radix>:
	switch (specifier) {
   25044:	286f      	cmp	r0, #111	; 0x6f
   25046:	d00c      	beq.n	25062 <conversion_radix+0x1e>
   25048:	d905      	bls.n	25056 <conversion_radix+0x12>
   2504a:	2870      	cmp	r0, #112	; 0x70
   2504c:	d00b      	beq.n	25066 <conversion_radix+0x22>
   2504e:	2878      	cmp	r0, #120	; 0x78
   25050:	d10b      	bne.n	2506a <conversion_radix+0x26>
		return 16;
   25052:	2010      	movs	r0, #16
   25054:	4770      	bx	lr
	switch (specifier) {
   25056:	2858      	cmp	r0, #88	; 0x58
   25058:	d001      	beq.n	2505e <conversion_radix+0x1a>
   2505a:	200a      	movs	r0, #10
   2505c:	4770      	bx	lr
		return 16;
   2505e:	2010      	movs	r0, #16
   25060:	4770      	bx	lr
		return 8;
   25062:	2008      	movs	r0, #8
   25064:	4770      	bx	lr
		return 16;
   25066:	2010      	movs	r0, #16
   25068:	4770      	bx	lr
	switch (specifier) {
   2506a:	200a      	movs	r0, #10
}
   2506c:	4770      	bx	lr

0002506e <encode_uint>:
{
   2506e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25072:	4605      	mov	r5, r0
   25074:	460c      	mov	r4, r1
   25076:	4693      	mov	fp, r2
   25078:	4699      	mov	r9, r3
   2507a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier);
   2507c:	78d0      	ldrb	r0, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2507e:	f1a0 0a41 	sub.w	sl, r0, #65	; 0x41
	const unsigned int radix = conversion_radix(conv->specifier);
   25082:	f7ff ffdf 	bl	25044 <conversion_radix>
   25086:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
   25088:	e015      	b.n	250b6 <encode_uint+0x48>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2508a:	f1ba 0f19 	cmp.w	sl, #25
   2508e:	d820      	bhi.n	250d2 <encode_uint+0x64>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   25090:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   25092:	3237      	adds	r2, #55	; 0x37
   25094:	b2d2      	uxtb	r2, r2
   25096:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
   2509a:	4632      	mov	r2, r6
   2509c:	4643      	mov	r3, r8
   2509e:	4628      	mov	r0, r5
   250a0:	4621      	mov	r1, r4
   250a2:	f7db f82d 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   250a6:	42b5      	cmp	r5, r6
   250a8:	f174 0400 	sbcs.w	r4, r4, #0
   250ac:	d315      	bcc.n	250da <encode_uint+0x6c>
   250ae:	454f      	cmp	r7, r9
   250b0:	d913      	bls.n	250da <encode_uint+0x6c>
		value /= radix;
   250b2:	4605      	mov	r5, r0
   250b4:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
   250b6:	f04f 0800 	mov.w	r8, #0
   250ba:	4632      	mov	r2, r6
   250bc:	4643      	mov	r3, r8
   250be:	4628      	mov	r0, r5
   250c0:	4621      	mov	r1, r4
   250c2:	f7db f81d 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   250c6:	2a09      	cmp	r2, #9
   250c8:	d8df      	bhi.n	2508a <encode_uint+0x1c>
   250ca:	b2d2      	uxtb	r2, r2
   250cc:	3230      	adds	r2, #48	; 0x30
   250ce:	b2d2      	uxtb	r2, r2
   250d0:	e7e1      	b.n	25096 <encode_uint+0x28>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   250d2:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   250d4:	3257      	adds	r2, #87	; 0x57
   250d6:	b2d2      	uxtb	r2, r2
   250d8:	e7dd      	b.n	25096 <encode_uint+0x28>
	if (conv->flag_hash) {
   250da:	f89b 3000 	ldrb.w	r3, [fp]
   250de:	f013 0f20 	tst.w	r3, #32
   250e2:	d003      	beq.n	250ec <encode_uint+0x7e>
		if (radix == 8) {
   250e4:	2e08      	cmp	r6, #8
   250e6:	d004      	beq.n	250f2 <encode_uint+0x84>
		} else if (radix == 16) {
   250e8:	2e10      	cmp	r6, #16
   250ea:	d009      	beq.n	25100 <encode_uint+0x92>
}
   250ec:	4638      	mov	r0, r7
   250ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   250f2:	f89b 3002 	ldrb.w	r3, [fp, #2]
   250f6:	f043 0308 	orr.w	r3, r3, #8
   250fa:	f88b 3002 	strb.w	r3, [fp, #2]
   250fe:	e7f5      	b.n	250ec <encode_uint+0x7e>
			conv->altform_0c = true;
   25100:	f89b 3002 	ldrb.w	r3, [fp, #2]
   25104:	f043 0310 	orr.w	r3, r3, #16
   25108:	f88b 3002 	strb.w	r3, [fp, #2]
   2510c:	e7ee      	b.n	250ec <encode_uint+0x7e>

0002510e <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
   2510e:	7843      	ldrb	r3, [r0, #1]
   25110:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   25114:	2b07      	cmp	r3, #7
   25116:	d818      	bhi.n	2514a <store_count+0x3c>
   25118:	e8df f003 	tbb	[pc, r3]
   2511c:	0a080604 	.word	0x0a080604
   25120:	1614100c 	.word	0x1614100c
		*(int *)dp = count;
   25124:	600a      	str	r2, [r1, #0]
		break;
   25126:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
   25128:	700a      	strb	r2, [r1, #0]
		break;
   2512a:	4770      	bx	lr
		*(short *)dp = (short)count;
   2512c:	800a      	strh	r2, [r1, #0]
		break;
   2512e:	4770      	bx	lr
		*(long *)dp = (long)count;
   25130:	600a      	str	r2, [r1, #0]
		break;
   25132:	4770      	bx	lr
		*(long long *)dp = (long long)count;
   25134:	17d3      	asrs	r3, r2, #31
   25136:	600a      	str	r2, [r1, #0]
   25138:	604b      	str	r3, [r1, #4]
		break;
   2513a:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
   2513c:	17d3      	asrs	r3, r2, #31
   2513e:	600a      	str	r2, [r1, #0]
   25140:	604b      	str	r3, [r1, #4]
		break;
   25142:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
   25144:	600a      	str	r2, [r1, #0]
		break;
   25146:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   25148:	600a      	str	r2, [r1, #0]
}
   2514a:	4770      	bx	lr

0002514c <outs>:
{
   2514c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25150:	4607      	mov	r7, r0
   25152:	460e      	mov	r6, r1
   25154:	4614      	mov	r4, r2
   25156:	4698      	mov	r8, r3
	size_t count = 0;
   25158:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2515a:	e006      	b.n	2516a <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   2515c:	4631      	mov	r1, r6
   2515e:	f814 0b01 	ldrb.w	r0, [r4], #1
   25162:	47b8      	blx	r7
		if (rc < 0) {
   25164:	2800      	cmp	r0, #0
   25166:	db09      	blt.n	2517c <outs+0x30>
		++count;
   25168:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2516a:	4544      	cmp	r4, r8
   2516c:	d3f6      	bcc.n	2515c <outs+0x10>
   2516e:	f1b8 0f00 	cmp.w	r8, #0
   25172:	d102      	bne.n	2517a <outs+0x2e>
   25174:	7823      	ldrb	r3, [r4, #0]
   25176:	2b00      	cmp	r3, #0
   25178:	d1f0      	bne.n	2515c <outs+0x10>
	return (int)count;
   2517a:	4628      	mov	r0, r5
}
   2517c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025180 <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   25180:	b40f      	push	{r0, r1, r2, r3}
   25182:	b500      	push	{lr}
   25184:	b083      	sub	sp, #12
   25186:	a904      	add	r1, sp, #16
   25188:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   2518c:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   2518e:	f7ff fa05 	bl	2459c <vprintk>

	va_end(ap);
}
   25192:	b003      	add	sp, #12
   25194:	f85d eb04 	ldr.w	lr, [sp], #4
   25198:	b004      	add	sp, #16
   2519a:	4770      	bx	lr

0002519c <free_space>:
	ARG_UNUSED(err);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   2519c:	68c3      	ldr	r3, [r0, #12]
   2519e:	6802      	ldr	r2, [r0, #0]
   251a0:	4293      	cmp	r3, r2
   251a2:	d805      	bhi.n	251b0 <free_space+0x14>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;

		return false;
	} else if (!buffer->rd_idx) {
   251a4:	b14b      	cbz	r3, 251ba <free_space+0x1e>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
		return false;
	}

	*res = buffer->size - buffer->tmp_wr_idx;
   251a6:	6a03      	ldr	r3, [r0, #32]
   251a8:	1a9b      	subs	r3, r3, r2
   251aa:	600b      	str	r3, [r1, #0]

	return true;
   251ac:	2001      	movs	r0, #1
}
   251ae:	4770      	bx	lr
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   251b0:	1a9b      	subs	r3, r3, r2
   251b2:	3b01      	subs	r3, #1
   251b4:	600b      	str	r3, [r1, #0]
		return false;
   251b6:	2000      	movs	r0, #0
   251b8:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   251ba:	6a03      	ldr	r3, [r0, #32]
   251bc:	1a9b      	subs	r3, r3, r2
   251be:	3b01      	subs	r3, #1
   251c0:	600b      	str	r3, [r1, #0]
		return false;
   251c2:	2000      	movs	r0, #0
   251c4:	4770      	bx	lr

000251c6 <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   251c6:	b510      	push	{r4, lr}
   251c8:	b082      	sub	sp, #8
   251ca:	4604      	mov	r4, r0
	uint32_t f;

	if (free_space(buffer, &f)) {
   251cc:	a901      	add	r1, sp, #4
   251ce:	f7ff ffe5 	bl	2519c <free_space>
   251d2:	b120      	cbz	r0, 251de <get_usage+0x18>
		f += (buffer->rd_idx - 1);
   251d4:	68e3      	ldr	r3, [r4, #12]
   251d6:	9a01      	ldr	r2, [sp, #4]
   251d8:	4413      	add	r3, r2
   251da:	3b01      	subs	r3, #1
   251dc:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   251de:	6a20      	ldr	r0, [r4, #32]
   251e0:	9b01      	ldr	r3, [sp, #4]
   251e2:	1ac0      	subs	r0, r0, r3
}
   251e4:	3801      	subs	r0, #1
   251e6:	b002      	add	sp, #8
   251e8:	bd10      	pop	{r4, pc}

000251ea <max_utilization_update>:

static inline void max_utilization_update(struct mpsc_pbuf_buffer *buffer)
{
   251ea:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   251ec:	6903      	ldr	r3, [r0, #16]
   251ee:	f013 0f04 	tst.w	r3, #4
   251f2:	d100      	bne.n	251f6 <max_utilization_update+0xc>
		return;
	}

	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
}
   251f4:	bd38      	pop	{r3, r4, r5, pc}
   251f6:	4604      	mov	r4, r0
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   251f8:	6a45      	ldr	r5, [r0, #36]	; 0x24
   251fa:	f7ff ffe4 	bl	251c6 <get_usage>
   251fe:	4285      	cmp	r5, r0
   25200:	d902      	bls.n	25208 <max_utilization_update+0x1e>
   25202:	6a60      	ldr	r0, [r4, #36]	; 0x24
   25204:	6260      	str	r0, [r4, #36]	; 0x24
   25206:	e7f5      	b.n	251f4 <max_utilization_update+0xa>
   25208:	4620      	mov	r0, r4
   2520a:	f7ff ffdc 	bl	251c6 <get_usage>
   2520e:	e7f9      	b.n	25204 <max_utilization_update+0x1a>

00025210 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   25210:	b410      	push	{r4}
	union mpsc_pbuf_generic skip = {
   25212:	2300      	movs	r3, #0
   25214:	f36f 0300 	bfc	r3, #0, #1
   25218:	f043 0302 	orr.w	r3, r3, #2
   2521c:	f361 039f 	bfi	r3, r1, #2, #30
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   25220:	69c2      	ldr	r2, [r0, #28]
   25222:	6804      	ldr	r4, [r0, #0]
   25224:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   25228:	6803      	ldr	r3, [r0, #0]
	uint32_t i = idx + val;
   2522a:	440b      	add	r3, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2522c:	6902      	ldr	r2, [r0, #16]
   2522e:	f012 0201 	ands.w	r2, r2, #1
   25232:	d104      	bne.n	2523e <add_skip_item+0x2e>
	return (i >= buffer->size) ? i - buffer->size : i;
   25234:	6a04      	ldr	r4, [r0, #32]
   25236:	42a3      	cmp	r3, r4
   25238:	d304      	bcc.n	25244 <add_skip_item+0x34>
   2523a:	1b1b      	subs	r3, r3, r4
   2523c:	e002      	b.n	25244 <add_skip_item+0x34>
		return i & (buffer->size - 1);
   2523e:	6a04      	ldr	r4, [r0, #32]
   25240:	3c01      	subs	r4, #1
   25242:	4023      	ands	r3, r4
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   25244:	6003      	str	r3, [r0, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   25246:	6843      	ldr	r3, [r0, #4]
	uint32_t i = idx + val;
   25248:	4419      	add	r1, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2524a:	b922      	cbnz	r2, 25256 <add_skip_item+0x46>
	return (i >= buffer->size) ? i - buffer->size : i;
   2524c:	6a03      	ldr	r3, [r0, #32]
   2524e:	4299      	cmp	r1, r3
   25250:	d304      	bcc.n	2525c <add_skip_item+0x4c>
   25252:	1ac9      	subs	r1, r1, r3
   25254:	e002      	b.n	2525c <add_skip_item+0x4c>
		return i & (buffer->size - 1);
   25256:	6a03      	ldr	r3, [r0, #32]
   25258:	3b01      	subs	r3, #1
   2525a:	4019      	ands	r1, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2525c:	6041      	str	r1, [r0, #4]
}
   2525e:	bc10      	pop	{r4}
   25260:	4770      	bx	lr

00025262 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
   25262:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25266:	b083      	sub	sp, #12
   25268:	4604      	mov	r4, r0
   2526a:	9101      	str	r1, [sp, #4]
   2526c:	4615      	mov	r5, r2
   2526e:	461e      	mov	r6, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
   25270:	2300      	movs	r3, #0
   25272:	7033      	strb	r3, [r6, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   25274:	f8d0 801c 	ldr.w	r8, [r0, #28]
   25278:	f8d0 900c 	ldr.w	r9, [r0, #12]
   2527c:	eb08 0a89 	add.w	sl, r8, r9, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   25280:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
   25284:	f003 0303 	and.w	r3, r3, #3
   25288:	2b02      	cmp	r3, #2
   2528a:	d012      	beq.n	252b2 <drop_item_locked+0x50>
	return 0;
   2528c:	f04f 0b00 	mov.w	fp, #0
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   25290:	69a3      	ldr	r3, [r4, #24]
   25292:	4650      	mov	r0, sl
   25294:	4798      	blx	r3
   25296:	4607      	mov	r7, r0
	if (skip_wlen) {
   25298:	f1bb 0f00 	cmp.w	fp, #0
   2529c:	d152      	bne.n	25344 <drop_item_locked+0xe2>
		allow_drop = true;
	} else if (allow_drop) {
   2529e:	2d00      	cmp	r5, #0
   252a0:	d05d      	beq.n	2535e <drop_item_locked+0xfc>
		if (item->hdr.busy) {
   252a2:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
   252a6:	f013 0f02 	tst.w	r3, #2
   252aa:	d10a      	bne.n	252c2 <drop_item_locked+0x60>
			} else {
				rd_wlen += buffer->get_wlen(item);
				*user_packet = true;
			}
		} else {
			*user_packet = true;
   252ac:	2301      	movs	r3, #1
   252ae:	7033      	strb	r3, [r6, #0]
   252b0:	e049      	b.n	25346 <drop_item_locked+0xe4>
		return item->skip.len;
   252b2:	f858 3029 	ldr.w	r3, [r8, r9, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   252b6:	ea5f 0b93 	movs.w	fp, r3, lsr #2
   252ba:	d0e9      	beq.n	25290 <drop_item_locked+0x2e>
		return item->skip.len;
   252bc:	465f      	mov	r7, fp
		allow_drop = true;
   252be:	2501      	movs	r5, #1
   252c0:	e041      	b.n	25346 <drop_item_locked+0xe4>
			add_skip_item(buffer, free_wlen + 1);
   252c2:	9901      	ldr	r1, [sp, #4]
   252c4:	3101      	adds	r1, #1
   252c6:	4620      	mov	r0, r4
   252c8:	f7ff ffa2 	bl	25210 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   252cc:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
   252ce:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   252d0:	6922      	ldr	r2, [r4, #16]
   252d2:	f012 0201 	ands.w	r2, r2, #1
   252d6:	d104      	bne.n	252e2 <drop_item_locked+0x80>
	return (i >= buffer->size) ? i - buffer->size : i;
   252d8:	6a21      	ldr	r1, [r4, #32]
   252da:	428b      	cmp	r3, r1
   252dc:	d304      	bcc.n	252e8 <drop_item_locked+0x86>
   252de:	1a5b      	subs	r3, r3, r1
   252e0:	e002      	b.n	252e8 <drop_item_locked+0x86>
		return i & (buffer->size - 1);
   252e2:	6a21      	ldr	r1, [r4, #32]
   252e4:	3901      	subs	r1, #1
   252e6:	400b      	ands	r3, r1
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   252e8:	6063      	str	r3, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   252ea:	6823      	ldr	r3, [r4, #0]
	uint32_t i = idx + val;
   252ec:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   252ee:	b922      	cbnz	r2, 252fa <drop_item_locked+0x98>
	return (i >= buffer->size) ? i - buffer->size : i;
   252f0:	6a21      	ldr	r1, [r4, #32]
   252f2:	428b      	cmp	r3, r1
   252f4:	d304      	bcc.n	25300 <drop_item_locked+0x9e>
   252f6:	1a5b      	subs	r3, r3, r1
   252f8:	e002      	b.n	25300 <drop_item_locked+0x9e>
		return i & (buffer->size - 1);
   252fa:	6a21      	ldr	r1, [r4, #32]
   252fc:	3901      	subs	r1, #1
   252fe:	400b      	ands	r3, r1
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   25300:	6023      	str	r3, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   25302:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
   25304:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   25306:	b922      	cbnz	r2, 25312 <drop_item_locked+0xb0>
	return (i >= buffer->size) ? i - buffer->size : i;
   25308:	6a22      	ldr	r2, [r4, #32]
   2530a:	4293      	cmp	r3, r2
   2530c:	d304      	bcc.n	25318 <drop_item_locked+0xb6>
   2530e:	1a9b      	subs	r3, r3, r2
   25310:	e002      	b.n	25318 <drop_item_locked+0xb6>
		return i & (buffer->size - 1);
   25312:	6a22      	ldr	r2, [r4, #32]
   25314:	3a01      	subs	r2, #1
   25316:	4013      	ands	r3, r2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   25318:	69e1      	ldr	r1, [r4, #28]
   2531a:	eb01 0a83 	add.w	sl, r1, r3, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   2531e:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
   25322:	f002 0203 	and.w	r2, r2, #3
   25326:	2a02      	cmp	r2, #2
   25328:	d006      	beq.n	25338 <drop_item_locked+0xd6>
				rd_wlen += buffer->get_wlen(item);
   2532a:	69a3      	ldr	r3, [r4, #24]
   2532c:	4650      	mov	r0, sl
   2532e:	4798      	blx	r3
   25330:	4407      	add	r7, r0
				*user_packet = true;
   25332:	2301      	movs	r3, #1
   25334:	7033      	strb	r3, [r6, #0]
   25336:	e006      	b.n	25346 <drop_item_locked+0xe4>
		return item->skip.len;
   25338:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			if (skip_wlen) {
   2533c:	089b      	lsrs	r3, r3, #2
   2533e:	d0f4      	beq.n	2532a <drop_item_locked+0xc8>
				rd_wlen += skip_wlen;
   25340:	441f      	add	r7, r3
   25342:	e000      	b.n	25346 <drop_item_locked+0xe4>
		allow_drop = true;
   25344:	2501      	movs	r5, #1
		}
	} else {
		item = NULL;
	}

	if (allow_drop) {
   25346:	b195      	cbz	r5, 2536e <drop_item_locked+0x10c>
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   25348:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
   2534a:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2534c:	6922      	ldr	r2, [r4, #16]
   2534e:	f012 0f01 	tst.w	r2, #1
   25352:	d107      	bne.n	25364 <drop_item_locked+0x102>
	return (i >= buffer->size) ? i - buffer->size : i;
   25354:	6a22      	ldr	r2, [r4, #32]
   25356:	4293      	cmp	r3, r2
   25358:	d307      	bcc.n	2536a <drop_item_locked+0x108>
   2535a:	1a9b      	subs	r3, r3, r2
   2535c:	e005      	b.n	2536a <drop_item_locked+0x108>
		item = NULL;
   2535e:	f04f 0a00 	mov.w	sl, #0
   25362:	e7f0      	b.n	25346 <drop_item_locked+0xe4>
		return i & (buffer->size - 1);
   25364:	6a22      	ldr	r2, [r4, #32]
   25366:	3a01      	subs	r2, #1
   25368:	4013      	ands	r3, r2
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   2536a:	60e3      	str	r3, [r4, #12]
		buffer->tmp_rd_idx = buffer->rd_idx;
   2536c:	60a3      	str	r3, [r4, #8]
	}

	return item;
}
   2536e:	4650      	mov	r0, sl
   25370:	b003      	add	sp, #12
   25372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00025376 <mpsc_pbuf_init>:
{
   25376:	b538      	push	{r3, r4, r5, lr}
   25378:	4604      	mov	r4, r0
   2537a:	460d      	mov	r5, r1
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   2537c:	221c      	movs	r2, #28
   2537e:	2100      	movs	r1, #0
   25380:	f000 fe80 	bl	26084 <memset>
	buffer->get_wlen = cfg->get_wlen;
   25384:	68eb      	ldr	r3, [r5, #12]
   25386:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   25388:	68ab      	ldr	r3, [r5, #8]
   2538a:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   2538c:	682b      	ldr	r3, [r5, #0]
   2538e:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   25390:	686b      	ldr	r3, [r5, #4]
   25392:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
   25394:	2200      	movs	r2, #0
   25396:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
   25398:	692a      	ldr	r2, [r5, #16]
   2539a:	6122      	str	r2, [r4, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   2539c:	b12b      	cbz	r3, 253aa <mpsc_pbuf_init+0x34>
   2539e:	1e59      	subs	r1, r3, #1
   253a0:	420b      	tst	r3, r1
   253a2:	d102      	bne.n	253aa <mpsc_pbuf_init+0x34>
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   253a4:	f042 0201 	orr.w	r2, r2, #1
   253a8:	6122      	str	r2, [r4, #16]
	err = k_sem_init(&buffer->sem, 0, 1);
   253aa:	f104 0028 	add.w	r0, r4, #40	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
   253ae:	2201      	movs	r2, #1
   253b0:	2100      	movs	r1, #0
   253b2:	f004 ff3e 	bl	2a232 <z_impl_k_sem_init>
}
   253b6:	bd38      	pop	{r3, r4, r5, pc}

000253b8 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   253b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   253bc:	b085      	sub	sp, #20
   253be:	469a      	mov	sl, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   253c0:	6a03      	ldr	r3, [r0, #32]
   253c2:	3b01      	subs	r3, #1
   253c4:	428b      	cmp	r3, r1
   253c6:	d37f      	bcc.n	254c8 <mpsc_pbuf_alloc+0x110>
   253c8:	4605      	mov	r5, r0
   253ca:	460f      	mov	r7, r1
   253cc:	4691      	mov	r9, r2
	union mpsc_pbuf_generic *dropped_item = NULL;
   253ce:	f04f 0800 	mov.w	r8, #0
	union mpsc_pbuf_generic *item = NULL;
   253d2:	46c3      	mov	fp, r8
   253d4:	e019      	b.n	2540a <mpsc_pbuf_alloc+0x52>
		return i & (buffer->size - 1);
   253d6:	6a2a      	ldr	r2, [r5, #32]
   253d8:	3a01      	subs	r2, #1
   253da:	4013      	ands	r3, r2
		if (free_wlen >= wlen) {
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
   253dc:	602b      	str	r3, [r5, #0]
		cont = false;
   253de:	2400      	movs	r4, #0
   253e0:	f386 8811 	msr	BASEPRI, r6
   253e4:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
   253e8:	b16c      	cbz	r4, 25406 <mpsc_pbuf_alloc+0x4e>
   253ea:	f1b8 0f00 	cmp.w	r8, #0
   253ee:	d00a      	beq.n	25406 <mpsc_pbuf_alloc+0x4e>
   253f0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   253f4:	b13b      	cbz	r3, 25406 <mpsc_pbuf_alloc+0x4e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   253f6:	696b      	ldr	r3, [r5, #20]
   253f8:	2b00      	cmp	r3, #0
   253fa:	d062      	beq.n	254c2 <mpsc_pbuf_alloc+0x10a>
				buffer->notify_drop(buffer, dropped_item);
   253fc:	4641      	mov	r1, r8
   253fe:	4628      	mov	r0, r5
   25400:	4798      	blx	r3
			}
			dropped_item = NULL;
   25402:	f04f 0800 	mov.w	r8, #0
		}
	} while (cont);
   25406:	2c00      	cmp	r4, #0
   25408:	d060      	beq.n	254cc <mpsc_pbuf_alloc+0x114>
	__asm__ volatile(
   2540a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2540e:	f3ef 8611 	mrs	r6, BASEPRI
   25412:	f383 8812 	msr	BASEPRI_MAX, r3
   25416:	f3bf 8f6f 	isb	sy
   2541a:	9601      	str	r6, [sp, #4]
		wrap = free_space(buffer, &free_wlen);
   2541c:	a903      	add	r1, sp, #12
   2541e:	4628      	mov	r0, r5
   25420:	f7ff febc 	bl	2519c <free_space>
   25424:	4604      	mov	r4, r0
		if (free_wlen >= wlen) {
   25426:	9903      	ldr	r1, [sp, #12]
   25428:	42b9      	cmp	r1, r7
   2542a:	d319      	bcc.n	25460 <mpsc_pbuf_alloc+0xa8>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   2542c:	69eb      	ldr	r3, [r5, #28]
   2542e:	682a      	ldr	r2, [r5, #0]
			item =
   25430:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
			item->hdr.valid = 0;
   25434:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   25438:	f36f 0100 	bfc	r1, #0, #1
   2543c:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item->hdr.busy = 0;
   25440:	b2c9      	uxtb	r1, r1
   25442:	f36f 0141 	bfc	r1, #1, #1
   25446:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
   2544a:	682b      	ldr	r3, [r5, #0]
	uint32_t i = idx + val;
   2544c:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2544e:	692a      	ldr	r2, [r5, #16]
   25450:	f012 0f01 	tst.w	r2, #1
   25454:	d1bf      	bne.n	253d6 <mpsc_pbuf_alloc+0x1e>
	return (i >= buffer->size) ? i - buffer->size : i;
   25456:	6a2a      	ldr	r2, [r5, #32]
   25458:	4293      	cmp	r3, r2
   2545a:	d3bf      	bcc.n	253dc <mpsc_pbuf_alloc+0x24>
   2545c:	1a9b      	subs	r3, r3, r2
   2545e:	e7bd      	b.n	253dc <mpsc_pbuf_alloc+0x24>
		} else if (wrap) {
   25460:	b9a0      	cbnz	r0, 2548c <mpsc_pbuf_alloc+0xd4>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   25462:	ea5a 0309 	orrs.w	r3, sl, r9
   25466:	d003      	beq.n	25470 <mpsc_pbuf_alloc+0xb8>
			   !k_is_in_isr()) {
   25468:	f004 fdd1 	bl	2a00e <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   2546c:	4604      	mov	r4, r0
   2546e:	b188      	cbz	r0, 25494 <mpsc_pbuf_alloc+0xdc>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   25470:	692a      	ldr	r2, [r5, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   25472:	f10d 030b 	add.w	r3, sp, #11
   25476:	f3c2 0240 	ubfx	r2, r2, #1, #1
   2547a:	9903      	ldr	r1, [sp, #12]
   2547c:	4628      	mov	r0, r5
   2547e:	f7ff fef0 	bl	25262 <drop_item_locked>
			cont = dropped_item != NULL;
   25482:	4680      	mov	r8, r0
   25484:	1e04      	subs	r4, r0, #0
   25486:	bf18      	it	ne
   25488:	2401      	movne	r4, #1
   2548a:	e7a9      	b.n	253e0 <mpsc_pbuf_alloc+0x28>
			add_skip_item(buffer, free_wlen);
   2548c:	4628      	mov	r0, r5
   2548e:	f7ff febf 	bl	25210 <add_skip_item>
			cont = true;
   25492:	e7a5      	b.n	253e0 <mpsc_pbuf_alloc+0x28>
	__asm__ volatile(
   25494:	9b01      	ldr	r3, [sp, #4]
   25496:	f383 8811 	msr	BASEPRI, r3
   2549a:	f3bf 8f6f 	isb	sy
			err = k_sem_take(&buffer->sem, timeout);
   2549e:	f105 0028 	add.w	r0, r5, #40	; 0x28
	return z_impl_k_sem_take(sem, timeout);
   254a2:	464a      	mov	r2, r9
   254a4:	4653      	mov	r3, sl
   254a6:	f7fd fb8d 	bl	22bc4 <z_impl_k_sem_take>
	__asm__ volatile(
   254aa:	f04f 0340 	mov.w	r3, #64	; 0x40
   254ae:	f3ef 8611 	mrs	r6, BASEPRI
   254b2:	f383 8812 	msr	BASEPRI_MAX, r3
   254b6:	f3bf 8f6f 	isb	sy
			if (err == 0) {
   254ba:	2800      	cmp	r0, #0
   254bc:	d190      	bne.n	253e0 <mpsc_pbuf_alloc+0x28>
				cont = true;
   254be:	2401      	movs	r4, #1
   254c0:	e78e      	b.n	253e0 <mpsc_pbuf_alloc+0x28>
			dropped_item = NULL;
   254c2:	f04f 0800 	mov.w	r8, #0
   254c6:	e79e      	b.n	25406 <mpsc_pbuf_alloc+0x4e>
		return NULL;
   254c8:	f04f 0b00 	mov.w	fp, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   254cc:	4658      	mov	r0, fp
   254ce:	b005      	add	sp, #20
   254d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000254d4 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   254d4:	b570      	push	{r4, r5, r6, lr}
   254d6:	4604      	mov	r4, r0
   254d8:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   254da:	6983      	ldr	r3, [r0, #24]
   254dc:	4608      	mov	r0, r1
   254de:	4798      	blx	r3
   254e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   254e4:	f3ef 8611 	mrs	r6, BASEPRI
   254e8:	f383 8812 	msr	BASEPRI_MAX, r3
   254ec:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   254f0:	782b      	ldrb	r3, [r5, #0]
   254f2:	f043 0301 	orr.w	r3, r3, #1
   254f6:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   254f8:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
   254fa:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   254fc:	6923      	ldr	r3, [r4, #16]
   254fe:	f013 0f01 	tst.w	r3, #1
   25502:	d104      	bne.n	2550e <mpsc_pbuf_commit+0x3a>
	return (i >= buffer->size) ? i - buffer->size : i;
   25504:	6a23      	ldr	r3, [r4, #32]
   25506:	4298      	cmp	r0, r3
   25508:	d304      	bcc.n	25514 <mpsc_pbuf_commit+0x40>
   2550a:	1ac0      	subs	r0, r0, r3
   2550c:	e002      	b.n	25514 <mpsc_pbuf_commit+0x40>
		return i & (buffer->size - 1);
   2550e:	6a23      	ldr	r3, [r4, #32]
   25510:	3b01      	subs	r3, #1
   25512:	4018      	ands	r0, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   25514:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   25516:	4620      	mov	r0, r4
   25518:	f7ff fe67 	bl	251ea <max_utilization_update>
	__asm__ volatile(
   2551c:	f386 8811 	msr	BASEPRI, r6
   25520:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   25524:	bd70      	pop	{r4, r5, r6, pc}

00025526 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   25526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25528:	4604      	mov	r4, r0
   2552a:	e039      	b.n	255a0 <mpsc_pbuf_claim+0x7a>
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   2552c:	1a9b      	subs	r3, r3, r2
		return false;
   2552e:	e045      	b.n	255bc <mpsc_pbuf_claim+0x96>
		return item->skip.len;
   25530:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
   25534:	0880      	lsrs	r0, r0, #2
   25536:	d157      	bne.n	255e8 <mpsc_pbuf_claim+0xc2>
   25538:	e04d      	b.n	255d6 <mpsc_pbuf_claim+0xb0>
		return i & (buffer->size - 1);
   2553a:	6a21      	ldr	r1, [r4, #32]
   2553c:	3901      	subs	r1, #1
   2553e:	400b      	ands	r3, r1
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);

				buffer->tmp_rd_idx =
   25540:	60a3      	str	r3, [r4, #8]
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
				buffer->rd_idx =
					idx_inc(buffer, buffer->rd_idx, inc);
   25542:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
   25544:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   25546:	b922      	cbnz	r2, 25552 <mpsc_pbuf_claim+0x2c>
	return (i >= buffer->size) ? i - buffer->size : i;
   25548:	6a22      	ldr	r2, [r4, #32]
   2554a:	4293      	cmp	r3, r2
   2554c:	d304      	bcc.n	25558 <mpsc_pbuf_claim+0x32>
   2554e:	1a9b      	subs	r3, r3, r2
   25550:	e002      	b.n	25558 <mpsc_pbuf_claim+0x32>
		return i & (buffer->size - 1);
   25552:	6a22      	ldr	r2, [r4, #32]
   25554:	3a01      	subs	r2, #1
   25556:	4013      	ands	r3, r2
				buffer->rd_idx =
   25558:	60e3      	str	r3, [r4, #12]
				cont = true;
   2555a:	2301      	movs	r3, #1
			if (skip || !is_valid(item)) {
   2555c:	e01b      	b.n	25596 <mpsc_pbuf_claim+0x70>
			} else {
				item->hdr.busy = 1;
   2555e:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
   25562:	f043 0302 	orr.w	r3, r3, #2
   25566:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
   2556a:	68a7      	ldr	r7, [r4, #8]
						buffer->get_wlen(item));
   2556c:	69a3      	ldr	r3, [r4, #24]
					idx_inc(buffer, buffer->tmp_rd_idx,
   2556e:	4630      	mov	r0, r6
   25570:	4798      	blx	r3
	uint32_t i = idx + val;
   25572:	4438      	add	r0, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   25574:	6923      	ldr	r3, [r4, #16]
   25576:	f013 0f01 	tst.w	r3, #1
   2557a:	d104      	bne.n	25586 <mpsc_pbuf_claim+0x60>
	return (i >= buffer->size) ? i - buffer->size : i;
   2557c:	6a23      	ldr	r3, [r4, #32]
   2557e:	4298      	cmp	r0, r3
   25580:	d304      	bcc.n	2558c <mpsc_pbuf_claim+0x66>
   25582:	1ac0      	subs	r0, r0, r3
   25584:	e002      	b.n	2558c <mpsc_pbuf_claim+0x66>
		return i & (buffer->size - 1);
   25586:	6a23      	ldr	r3, [r4, #32]
   25588:	3b01      	subs	r3, #1
   2558a:	4018      	ands	r0, r3
				buffer->tmp_rd_idx =
   2558c:	60a0      	str	r0, [r4, #8]
		cont = false;
   2558e:	2300      	movs	r3, #0
   25590:	e001      	b.n	25596 <mpsc_pbuf_claim+0x70>
   25592:	2300      	movs	r3, #0
			item = NULL;
   25594:	461e      	mov	r6, r3
   25596:	f385 8811 	msr	BASEPRI, r5
   2559a:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
   2559e:	b38b      	cbz	r3, 25604 <mpsc_pbuf_claim+0xde>
	__asm__ volatile(
   255a0:	f04f 0340 	mov.w	r3, #64	; 0x40
   255a4:	f3ef 8511 	mrs	r5, BASEPRI
   255a8:	f383 8812 	msr	BASEPRI_MAX, r3
   255ac:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   255b0:	68a2      	ldr	r2, [r4, #8]
   255b2:	6863      	ldr	r3, [r4, #4]
   255b4:	429a      	cmp	r2, r3
   255b6:	d9b9      	bls.n	2552c <mpsc_pbuf_claim+0x6>
	*res = buffer->size - buffer->tmp_rd_idx;
   255b8:	6a23      	ldr	r3, [r4, #32]
   255ba:	1a9b      	subs	r3, r3, r2
			&buffer->buf[buffer->tmp_rd_idx];
   255bc:	69e1      	ldr	r1, [r4, #28]
		item = (union mpsc_pbuf_generic *)
   255be:	eb01 0682 	add.w	r6, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
   255c2:	2b00      	cmp	r3, #0
   255c4:	d0e5      	beq.n	25592 <mpsc_pbuf_claim+0x6c>
	return !item->hdr.valid && !item->hdr.busy;
   255c6:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
   255ca:	f013 0303 	ands.w	r3, r3, #3
   255ce:	d016      	beq.n	255fe <mpsc_pbuf_claim+0xd8>
	if (item->hdr.busy && !item->hdr.valid) {
   255d0:	2b02      	cmp	r3, #2
   255d2:	d0ad      	beq.n	25530 <mpsc_pbuf_claim+0xa>
	return 0;
   255d4:	2000      	movs	r0, #0
	return item->hdr.valid;
   255d6:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
			if (skip || !is_valid(item)) {
   255da:	f013 0f01 	tst.w	r3, #1
   255de:	d1be      	bne.n	2555e <mpsc_pbuf_claim+0x38>
					skip ? skip : buffer->get_wlen(item);
   255e0:	b910      	cbnz	r0, 255e8 <mpsc_pbuf_claim+0xc2>
   255e2:	69a3      	ldr	r3, [r4, #24]
   255e4:	4630      	mov	r0, r6
   255e6:	4798      	blx	r3
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   255e8:	68a3      	ldr	r3, [r4, #8]
	uint32_t i = idx + val;
   255ea:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   255ec:	6922      	ldr	r2, [r4, #16]
   255ee:	f012 0201 	ands.w	r2, r2, #1
   255f2:	d1a2      	bne.n	2553a <mpsc_pbuf_claim+0x14>
	return (i >= buffer->size) ? i - buffer->size : i;
   255f4:	6a21      	ldr	r1, [r4, #32]
   255f6:	428b      	cmp	r3, r1
   255f8:	d3a2      	bcc.n	25540 <mpsc_pbuf_claim+0x1a>
   255fa:	1a5b      	subs	r3, r3, r1
   255fc:	e7a0      	b.n	25540 <mpsc_pbuf_claim+0x1a>
		cont = false;
   255fe:	2300      	movs	r3, #0
			item = NULL;
   25600:	461e      	mov	r6, r3
   25602:	e7c8      	b.n	25596 <mpsc_pbuf_claim+0x70>

	return item;
}
   25604:	4630      	mov	r0, r6
   25606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025608 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   25608:	b538      	push	{r3, r4, r5, lr}
   2560a:	4604      	mov	r4, r0
   2560c:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   2560e:	6983      	ldr	r3, [r0, #24]
   25610:	4608      	mov	r0, r1
   25612:	4798      	blx	r3
   25614:	f04f 0240 	mov.w	r2, #64	; 0x40
   25618:	f3ef 8311 	mrs	r3, BASEPRI
   2561c:	f382 8812 	msr	BASEPRI_MAX, r2
   25620:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   25624:	782a      	ldrb	r2, [r5, #0]
   25626:	f36f 0200 	bfc	r2, #0, #1
   2562a:	702a      	strb	r2, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   2562c:	6922      	ldr	r2, [r4, #16]
   2562e:	f012 0f02 	tst.w	r2, #2
   25632:	d00a      	beq.n	2564a <mpsc_pbuf_free+0x42>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   25634:	69e2      	ldr	r2, [r4, #28]
   25636:	68e1      	ldr	r1, [r4, #12]
   25638:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   2563c:	42aa      	cmp	r2, r5
   2563e:	d004      	beq.n	2564a <mpsc_pbuf_free+0x42>
		witem->hdr.busy = 0;
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
	} else {
		witem->skip.len = wlen;
   25640:	682a      	ldr	r2, [r5, #0]
   25642:	f360 029f 	bfi	r2, r0, #2, #30
   25646:	602a      	str	r2, [r5, #0]
   25648:	e012      	b.n	25670 <mpsc_pbuf_free+0x68>
		witem->hdr.busy = 0;
   2564a:	782a      	ldrb	r2, [r5, #0]
   2564c:	f36f 0241 	bfc	r2, #1, #1
   25650:	702a      	strb	r2, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   25652:	68e2      	ldr	r2, [r4, #12]
	uint32_t i = idx + val;
   25654:	4402      	add	r2, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   25656:	6921      	ldr	r1, [r4, #16]
   25658:	f011 0f01 	tst.w	r1, #1
   2565c:	d104      	bne.n	25668 <mpsc_pbuf_free+0x60>
	return (i >= buffer->size) ? i - buffer->size : i;
   2565e:	6a21      	ldr	r1, [r4, #32]
   25660:	428a      	cmp	r2, r1
   25662:	d304      	bcc.n	2566e <mpsc_pbuf_free+0x66>
   25664:	1a52      	subs	r2, r2, r1
   25666:	e002      	b.n	2566e <mpsc_pbuf_free+0x66>
		return i & (buffer->size - 1);
   25668:	6a21      	ldr	r1, [r4, #32]
   2566a:	3901      	subs	r1, #1
   2566c:	400a      	ands	r2, r1
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   2566e:	60e2      	str	r2, [r4, #12]
	__asm__ volatile(
   25670:	f383 8811 	msr	BASEPRI, r3
   25674:	f3bf 8f6f 	isb	sy
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
   25678:	f104 0028 	add.w	r0, r4, #40	; 0x28
	z_impl_k_sem_give(sem);
   2567c:	f7fd fa7a 	bl	22b74 <z_impl_k_sem_give>
}
   25680:	bd38      	pop	{r3, r4, r5, pc}

00025682 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   25682:	6883      	ldr	r3, [r0, #8]
   25684:	6842      	ldr	r2, [r0, #4]
   25686:	4293      	cmp	r3, r2
   25688:	d905      	bls.n	25696 <mpsc_pbuf_is_pending+0x14>
	*res = buffer->size - buffer->tmp_rd_idx;
   2568a:	6a00      	ldr	r0, [r0, #32]
   2568c:	1ac0      	subs	r0, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   2568e:	3800      	subs	r0, #0
   25690:	bf18      	it	ne
   25692:	2001      	movne	r0, #1
   25694:	4770      	bx	lr
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   25696:	1ad0      	subs	r0, r2, r3
		return false;
   25698:	e7f9      	b.n	2568e <mpsc_pbuf_is_pending+0xc>

0002569a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   2569a:	4770      	bx	lr

0002569c <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   2569c:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   2569e:	f013 0f04 	tst.w	r3, #4
   256a2:	d001      	beq.n	256a8 <log_msg_generic_get_wlen+0xc>
	return 0;
   256a4:	2000      	movs	r0, #0
}
   256a6:	4770      	bx	lr
		return log_msg_get_total_wlen(msg->hdr.desc);
   256a8:	6803      	ldr	r3, [r0, #0]
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   256aa:	f3c3 2049 	ubfx	r0, r3, #9, #10
   256ae:	f3c3 43cb 	ubfx	r3, r3, #19, #12
   256b2:	4418      	add	r0, r3
   256b4:	3017      	adds	r0, #23
   256b6:	f020 0007 	bic.w	r0, r0, #7
   256ba:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   256bc:	4770      	bx	lr

000256be <dummy_timestamp>:
}
   256be:	2000      	movs	r0, #0
   256c0:	4770      	bx	lr

000256c2 <msg_filter_check>:
}
   256c2:	2001      	movs	r0, #1
   256c4:	4770      	bx	lr

000256c6 <default_get_timestamp>:
{
   256c6:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   256c8:	f003 fe10 	bl	292ec <sys_clock_cycle_get_32>
}
   256cc:	bd08      	pop	{r3, pc}

000256ce <k_msleep>:
{
   256ce:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   256d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   256d4:	17c1      	asrs	r1, r0, #31
   256d6:	03c9      	lsls	r1, r1, #15
   256d8:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   256dc:	03c0      	lsls	r0, r0, #15
   256de:	f240 33e7 	movw	r3, #999	; 0x3e7
   256e2:	18c0      	adds	r0, r0, r3
   256e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   256e8:	f04f 0300 	mov.w	r3, #0
   256ec:	f141 0100 	adc.w	r1, r1, #0
   256f0:	f7da fd06 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   256f4:	f7fd ff9a 	bl	2362c <z_impl_k_sleep>
}
   256f8:	bd08      	pop	{r3, pc}

000256fa <msg_alloc>:
{
   256fa:	b508      	push	{r3, lr}
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
   256fc:	2200      	movs	r2, #0
   256fe:	2300      	movs	r3, #0
   25700:	f7ff fe5a 	bl	253b8 <mpsc_pbuf_alloc>
}
   25704:	bd08      	pop	{r3, pc}

00025706 <msg_free>:
{
   25706:	b508      	push	{r3, lr}
	mpsc_pbuf_free(buffer, &msg->buf);
   25708:	f7ff ff7e 	bl	25608 <mpsc_pbuf_free>
}
   2570c:	bd08      	pop	{r3, pc}

0002570e <msg_pending>:
{
   2570e:	b508      	push	{r3, lr}
	return mpsc_pbuf_is_pending(buffer);
   25710:	f7ff ffb7 	bl	25682 <mpsc_pbuf_is_pending>
}
   25714:	bd08      	pop	{r3, pc}

00025716 <z_log_vprintk>:
{
   25716:	b500      	push	{lr}
   25718:	b085      	sub	sp, #20
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   2571a:	9103      	str	r1, [sp, #12]
   2571c:	9002      	str	r0, [sp, #8]
   2571e:	2000      	movs	r0, #0
   25720:	9001      	str	r0, [sp, #4]
   25722:	9000      	str	r0, [sp, #0]
   25724:	4603      	mov	r3, r0
   25726:	4602      	mov	r2, r0
   25728:	4601      	mov	r1, r0
   2572a:	f000 f88b 	bl	25844 <z_impl_z_log_msg_runtime_vcreate>
}
   2572e:	b005      	add	sp, #20
   25730:	f85d fb04 	ldr.w	pc, [sp], #4

00025734 <z_log_notify_drop>:
 */
bool z_log_msg_pending(void);

static inline void z_log_notify_drop(const struct mpsc_pbuf_buffer *buffer,
				     const union mpsc_pbuf_generic *item)
{
   25734:	b508      	push	{r3, lr}
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   25736:	2001      	movs	r0, #1
   25738:	f7ee fa44 	bl	13bc4 <z_log_dropped>
}
   2573c:	bd08      	pop	{r3, pc}

0002573e <z_log_msg_claim>:
{
   2573e:	b508      	push	{r3, lr}
	return z_log_msg_local_claim();
   25740:	f7ee fac2 	bl	13cc8 <z_log_msg_local_claim>
}
   25744:	bd08      	pop	{r3, pc}

00025746 <msg_commit>:
{
   25746:	b508      	push	{r3, lr}
	mpsc_pbuf_commit(buffer, &m->buf);
   25748:	f7ff fec4 	bl	254d4 <mpsc_pbuf_commit>
	z_log_msg_post_finalize();
   2574c:	f7ee fb5a 	bl	13e04 <z_log_msg_post_finalize>
}
   25750:	bd08      	pop	{r3, pc}

00025752 <z_log_get_tag>:
}
   25752:	2000      	movs	r0, #0
   25754:	4770      	bx	lr

00025756 <z_cbprintf_cpy>:
{
   25756:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   25758:	6853      	ldr	r3, [r2, #4]
   2575a:	6896      	ldr	r6, [r2, #8]
   2575c:	1b9b      	subs	r3, r3, r6
   2575e:	428b      	cmp	r3, r1
   25760:	d30c      	bcc.n	2577c <z_cbprintf_cpy+0x26>
   25762:	460c      	mov	r4, r1
   25764:	4615      	mov	r5, r2
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   25766:	6813      	ldr	r3, [r2, #0]
   25768:	460a      	mov	r2, r1
   2576a:	4601      	mov	r1, r0
   2576c:	1998      	adds	r0, r3, r6
   2576e:	f000 fc5a 	bl	26026 <memcpy>
	desc->off += len;
   25772:	68ab      	ldr	r3, [r5, #8]
   25774:	4423      	add	r3, r4
   25776:	60ab      	str	r3, [r5, #8]
	return len;
   25778:	4620      	mov	r0, r4
}
   2577a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   2577c:	f06f 001b 	mvn.w	r0, #27
   25780:	e7fb      	b.n	2577a <z_cbprintf_cpy+0x24>

00025782 <z_log_msg_finalize>:
	!(IS_ENABLED(CONFIG_LOG_FRONTEND) && \
	 (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY) || log_backend_count_get() == 0))

void z_log_msg_finalize(struct log_msg *msg, const void *source,
			 const struct log_msg_desc desc, const void *data)
{
   25782:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
   25784:	b190      	cbz	r0, 257ac <z_log_msg_finalize+0x2a>
   25786:	460e      	mov	r6, r1
   25788:	4614      	mov	r4, r2
   2578a:	4619      	mov	r1, r3
   2578c:	4605      	mov	r5, r0
		z_log_dropped(false);

		return;
	}

	if (data) {
   2578e:	b13b      	cbz	r3, 257a0 <z_log_msg_finalize+0x1e>
		uint8_t *d = msg->data + desc.package_len;
   25790:	3010      	adds	r0, #16
   25792:	f3c2 2349 	ubfx	r3, r2, #9, #10

		memcpy(d, data, desc.data_len);
   25796:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   2579a:	4418      	add	r0, r3
   2579c:	f000 fc43 	bl	26026 <memcpy>
	}

	msg->hdr.desc = desc;
   257a0:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
   257a2:	606e      	str	r6, [r5, #4]
	z_log_msg_commit(msg);
   257a4:	4628      	mov	r0, r5
   257a6:	f7ee fb71 	bl	13e8c <z_log_msg_commit>
}
   257aa:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
   257ac:	f7ee fa0a 	bl	13bc4 <z_log_dropped>
		return;
   257b0:	e7fb      	b.n	257aa <z_log_msg_finalize+0x28>

000257b2 <z_impl_z_log_msg_static_create>:

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   257b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   257b6:	b08a      	sub	sp, #40	; 0x28
   257b8:	4605      	mov	r5, r0
   257ba:	461e      	mov	r6, r3

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
   257bc:	460f      	mov	r7, r1
	int inlen = desc.package_len;
   257be:	f3c1 2449 	ubfx	r4, r1, #9, #10
	struct log_msg *msg;

	if (inlen > 0) {
   257c2:	b364      	cbz	r4, 2581e <z_impl_z_log_msg_static_create+0x6c>
   257c4:	4690      	mov	r8, r2
	struct z_cbprintf_buf_desc buf_desc = {
   257c6:	2200      	movs	r2, #0
   257c8:	9207      	str	r2, [sp, #28]
   257ca:	9208      	str	r2, [sp, #32]
   257cc:	9209      	str	r2, [sp, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
   257ce:	2304      	movs	r3, #4
   257d0:	9302      	str	r3, [sp, #8]
   257d2:	ab05      	add	r3, sp, #20
   257d4:	9301      	str	r3, [sp, #4]
   257d6:	230a      	movs	r3, #10
   257d8:	9300      	str	r3, [sp, #0]
   257da:	ab07      	add	r3, sp, #28
   257dc:	4621      	mov	r1, r4
   257de:	4640      	mov	r0, r8
   257e0:	f7ed fa5c 	bl	12c9c <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
   257e4:	f360 2752 	bfi	r7, r0, #9, #10
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   257e8:	f3c0 0909 	ubfx	r9, r0, #0, #10
   257ec:	f3c7 41cb 	ubfx	r1, r7, #19, #12
   257f0:	4449      	add	r1, r9
   257f2:	3117      	adds	r1, #23
   257f4:	f021 0107 	bic.w	r1, r1, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   257f8:	0888      	lsrs	r0, r1, #2
   257fa:	f7ee fa5d 	bl	13cb8 <z_log_msg_alloc>
		if (msg) {
   257fe:	4682      	mov	sl, r0
   25800:	b1b8      	cbz	r0, 25832 <z_impl_z_log_msg_static_create+0x80>
			len = cbprintf_package_copy(package, inlen,
   25802:	2304      	movs	r3, #4
   25804:	9302      	str	r3, [sp, #8]
   25806:	ab05      	add	r3, sp, #20
   25808:	9301      	str	r3, [sp, #4]
   2580a:	230a      	movs	r3, #10
   2580c:	9300      	str	r3, [sp, #0]
   2580e:	464b      	mov	r3, r9
   25810:	f100 0210 	add.w	r2, r0, #16
   25814:	4621      	mov	r1, r4
   25816:	4640      	mov	r0, r8
   25818:	f7ee fbae 	bl	13f78 <cbprintf_package_copy>
						    msg->data, out_desc.package_len,
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
   2581c:	e009      	b.n	25832 <z_impl_z_log_msg_static_create+0x80>
   2581e:	f3c1 41cb 	ubfx	r1, r1, #19, #12
   25822:	440c      	add	r4, r1
   25824:	3417      	adds	r4, #23
   25826:	f024 0407 	bic.w	r4, r4, #7
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   2582a:	08a0      	lsrs	r0, r4, #2
   2582c:	f7ee fa44 	bl	13cb8 <z_log_msg_alloc>
   25830:	4682      	mov	sl, r0
	}

	z_log_msg_finalize(msg, source, out_desc, data);
   25832:	4633      	mov	r3, r6
   25834:	463a      	mov	r2, r7
   25836:	4629      	mov	r1, r5
   25838:	4650      	mov	r0, sl
   2583a:	f7ff ffa2 	bl	25782 <z_log_msg_finalize>
}
   2583e:	b00a      	add	sp, #40	; 0x28
   25840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00025844 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   25844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25848:	b085      	sub	sp, #20
   2584a:	4681      	mov	r9, r0
   2584c:	460d      	mov	r5, r1
   2584e:	4690      	mov	r8, r2
   25850:	461e      	mov	r6, r3
   25852:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   25856:	9f10      	ldr	r7, [sp, #64]	; 0x40
	int plen;

	if (fmt) {
   25858:	b3b7      	cbz	r7, 258c8 <z_impl_z_log_msg_runtime_vcreate+0x84>
		va_list ap2;

		va_copy(ap2, ap);
   2585a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2585c:	9303      	str	r3, [sp, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   2585e:	9300      	str	r3, [sp, #0]
   25860:	463b      	mov	r3, r7
   25862:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   25864:	2110      	movs	r1, #16
   25866:	2000      	movs	r0, #0
   25868:	f7ec ffc6 	bl	127f8 <cbvprintf_package>
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   2586c:	4682      	mov	sl, r0
   2586e:	eb00 030b 	add.w	r3, r0, fp
   25872:	3317      	adds	r3, #23
   25874:	f023 0307 	bic.w	r3, r3, #7
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   25878:	2400      	movs	r4, #0
   2587a:	f36f 0400 	bfc	r4, #0, #1
   2587e:	f36f 0441 	bfc	r4, #1, #1
   25882:	f36f 0482 	bfc	r4, #2, #1
   25886:	f369 04c5 	bfi	r4, r9, #3, #3
   2588a:	f368 1488 	bfi	r4, r8, #6, #3
   2588e:	f360 2452 	bfi	r4, r0, #9, #10
   25892:	f36b 44de 	bfi	r4, fp, #19, #12
   25896:	f36f 74df 	bfc	r4, #31, #1
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
   2589a:	0898      	lsrs	r0, r3, #2
   2589c:	f7ee fa0c 	bl	13cb8 <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
   258a0:	4680      	mov	r8, r0
   258a2:	b140      	cbz	r0, 258b6 <z_impl_z_log_msg_runtime_vcreate+0x72>
   258a4:	3010      	adds	r0, #16
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
   258a6:	b137      	cbz	r7, 258b6 <z_impl_z_log_msg_runtime_vcreate+0x72>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   258a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   258aa:	9300      	str	r3, [sp, #0]
   258ac:	463b      	mov	r3, r7
   258ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   258b0:	4651      	mov	r1, sl
   258b2:	f7ec ffa1 	bl	127f8 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   258b6:	4633      	mov	r3, r6
   258b8:	4622      	mov	r2, r4
   258ba:	4629      	mov	r1, r5
   258bc:	4640      	mov	r0, r8
   258be:	f7ff ff60 	bl	25782 <z_log_msg_finalize>
	}
}
   258c2:	b005      	add	sp, #20
   258c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
   258c8:	2000      	movs	r0, #0
   258ca:	e7cf      	b.n	2586c <z_impl_z_log_msg_runtime_vcreate+0x28>

000258cc <buffer_write>:
{
   258cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   258ce:	4607      	mov	r7, r0
   258d0:	460d      	mov	r5, r1
   258d2:	4614      	mov	r4, r2
   258d4:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   258d6:	4632      	mov	r2, r6
   258d8:	4621      	mov	r1, r4
   258da:	4628      	mov	r0, r5
   258dc:	47b8      	blx	r7
		buf += processed;
   258de:	4405      	add	r5, r0
	} while (len != 0);
   258e0:	1a24      	subs	r4, r4, r0
   258e2:	d1f8      	bne.n	258d6 <buffer_write+0xa>
}
   258e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000258e6 <cbvprintf>:
{
   258e6:	b510      	push	{r4, lr}
   258e8:	b082      	sub	sp, #8
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   258ea:	2400      	movs	r4, #0
   258ec:	9400      	str	r4, [sp, #0]
   258ee:	f7ed fd75 	bl	133dc <z_cbvprintf_impl>
}
   258f2:	b002      	add	sp, #8
   258f4:	bd10      	pop	{r4, pc}

000258f6 <color_prefix>:
{
   258f6:	b508      	push	{r3, lr}
   258f8:	4613      	mov	r3, r2
	color_print(output, color, true, level);
   258fa:	2201      	movs	r2, #1
   258fc:	f7ee fbae 	bl	1405c <color_print>
}
   25900:	bd08      	pop	{r3, pc}

00025902 <color_postfix>:
{
   25902:	b508      	push	{r3, lr}
   25904:	4613      	mov	r3, r2
	color_print(output, color, false, level);
   25906:	2200      	movs	r2, #0
   25908:	f7ee fba8 	bl	1405c <color_print>
}
   2590c:	bd08      	pop	{r3, pc}

0002590e <postfix_print>:
{
   2590e:	b538      	push	{r3, r4, r5, lr}
   25910:	4605      	mov	r5, r0
   25912:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   25914:	f001 0101 	and.w	r1, r1, #1
   25918:	f7ff fff3 	bl	25902 <color_postfix>
	newline_print(output, flags);
   2591c:	4621      	mov	r1, r4
   2591e:	4628      	mov	r0, r5
   25920:	f7ee fc22 	bl	14168 <newline_print>
}
   25924:	bd38      	pop	{r3, r4, r5, pc}

00025926 <log_msg_hexdump>:
{
   25926:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2592a:	b083      	sub	sp, #12
   2592c:	4680      	mov	r8, r0
   2592e:	460e      	mov	r6, r1
   25930:	4615      	mov	r5, r2
   25932:	461f      	mov	r7, r3
   25934:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   25938:	462c      	mov	r4, r5
   2593a:	2d10      	cmp	r5, #16
   2593c:	bf28      	it	cs
   2593e:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
   25940:	f8cd 9000 	str.w	r9, [sp]
   25944:	463b      	mov	r3, r7
   25946:	4622      	mov	r2, r4
   25948:	4631      	mov	r1, r6
   2594a:	4640      	mov	r0, r8
   2594c:	f7ee fc20 	bl	14190 <hexdump_line_print>
		data += length;
   25950:	4426      	add	r6, r4
	} while (len);
   25952:	1b2d      	subs	r5, r5, r4
   25954:	d1f0      	bne.n	25938 <log_msg_hexdump+0x12>
}
   25956:	b003      	add	sp, #12
   25958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002595c <log_output_flush>:
{
   2595c:	b510      	push	{r4, lr}
   2595e:	4604      	mov	r4, r0
		     output->control_block->offset,
   25960:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   25962:	6853      	ldr	r3, [r2, #4]
   25964:	6812      	ldr	r2, [r2, #0]
   25966:	6881      	ldr	r1, [r0, #8]
   25968:	6800      	ldr	r0, [r0, #0]
   2596a:	f7ff ffaf 	bl	258cc <buffer_write>
	output->control_block->offset = 0;
   2596e:	6863      	ldr	r3, [r4, #4]
   25970:	2200      	movs	r2, #0
   25972:	601a      	str	r2, [r3, #0]
}
   25974:	bd10      	pop	{r4, pc}

00025976 <out_func>:
{
   25976:	b538      	push	{r3, r4, r5, lr}
   25978:	4605      	mov	r5, r0
   2597a:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   2597c:	684b      	ldr	r3, [r1, #4]
   2597e:	681a      	ldr	r2, [r3, #0]
   25980:	68cb      	ldr	r3, [r1, #12]
   25982:	429a      	cmp	r2, r3
   25984:	d00f      	beq.n	259a6 <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
   25986:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   25988:	f3bf 8f5b 	dmb	ish
   2598c:	e853 2f00 	ldrex	r2, [r3]
   25990:	1c51      	adds	r1, r2, #1
   25992:	e843 1000 	strex	r0, r1, [r3]
   25996:	2800      	cmp	r0, #0
   25998:	d1f8      	bne.n	2598c <out_func+0x16>
   2599a:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   2599e:	68a3      	ldr	r3, [r4, #8]
   259a0:	549d      	strb	r5, [r3, r2]
}
   259a2:	2000      	movs	r0, #0
   259a4:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
   259a6:	4608      	mov	r0, r1
   259a8:	f7ff ffd8 	bl	2595c <log_output_flush>
   259ac:	e7eb      	b.n	25986 <out_func+0x10>

000259ae <cr_out_func>:
{
   259ae:	b538      	push	{r3, r4, r5, lr}
   259b0:	4604      	mov	r4, r0
   259b2:	460d      	mov	r5, r1
	if (c == '\n') {
   259b4:	280a      	cmp	r0, #10
   259b6:	d005      	beq.n	259c4 <cr_out_func+0x16>
	out_func(c, ctx);
   259b8:	4629      	mov	r1, r5
   259ba:	4620      	mov	r0, r4
   259bc:	f7ff ffdb 	bl	25976 <out_func>
}
   259c0:	2000      	movs	r0, #0
   259c2:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
   259c4:	200d      	movs	r0, #13
   259c6:	f7ff ffd6 	bl	25976 <out_func>
   259ca:	e7f5      	b.n	259b8 <cr_out_func+0xa>

000259cc <k_msleep>:
{
   259cc:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   259ce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   259d2:	17c1      	asrs	r1, r0, #31
   259d4:	03c9      	lsls	r1, r1, #15
   259d6:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   259da:	03c0      	lsls	r0, r0, #15
   259dc:	f240 33e7 	movw	r3, #999	; 0x3e7
   259e0:	18c0      	adds	r0, r0, r3
   259e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   259e6:	f04f 0300 	mov.w	r3, #0
   259ea:	f141 0100 	adc.w	r1, r1, #0
   259ee:	f7da fb87 	bl	100 <__aeabi_uldivmod>
   259f2:	f7fd fe1b 	bl	2362c <z_impl_k_sleep>
}
   259f6:	bd08      	pop	{r3, pc}

000259f8 <atomic_test_and_clear_bit>:
{
   259f8:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   259fa:	f001 021f 	and.w	r2, r1, #31
   259fe:	2301      	movs	r3, #1
   25a00:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   25a02:	0949      	lsrs	r1, r1, #5
   25a04:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   25a08:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25a0a:	f3bf 8f5b 	dmb	ish
   25a0e:	e850 2f00 	ldrex	r2, [r0]
   25a12:	ea02 0c01 	and.w	ip, r2, r1
   25a16:	e840 ce00 	strex	lr, ip, [r0]
   25a1a:	f1be 0f00 	cmp.w	lr, #0
   25a1e:	d1f6      	bne.n	25a0e <atomic_test_and_clear_bit+0x16>
   25a20:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   25a24:	4213      	tst	r3, r2
}
   25a26:	bf14      	ite	ne
   25a28:	2001      	movne	r0, #1
   25a2a:	2000      	moveq	r0, #0
   25a2c:	f85d fb04 	ldr.w	pc, [sp], #4

00025a30 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   25a30:	f001 021f 	and.w	r2, r1, #31
   25a34:	2301      	movs	r3, #1
   25a36:	4093      	lsls	r3, r2
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   25a38:	0949      	lsrs	r1, r1, #5
   25a3a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   25a3e:	f3bf 8f5b 	dmb	ish
   25a42:	e850 2f00 	ldrex	r2, [r0]
   25a46:	431a      	orrs	r2, r3
   25a48:	e840 2100 	strex	r1, r2, [r0]
   25a4c:	2900      	cmp	r1, #0
   25a4e:	d1f8      	bne.n	25a42 <atomic_set_bit+0x12>
   25a50:	f3bf 8f5b 	dmb	ish
}
   25a54:	4770      	bx	lr

00025a56 <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
   25a56:	2000      	movs	r0, #0
   25a58:	4770      	bx	lr

00025a5a <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   25a5a:	428b      	cmp	r3, r1
   25a5c:	d901      	bls.n	25a62 <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
   25a5e:	2000      	movs	r0, #0
	}
}
   25a60:	4770      	bx	lr
{
   25a62:	b510      	push	{r4, lr}
   25a64:	4694      	mov	ip, r2
   25a66:	461c      	mov	r4, r3
		(void)memcpy(to, from, from_len);
   25a68:	461a      	mov	r2, r3
   25a6a:	4661      	mov	r1, ip
   25a6c:	f000 fadb 	bl	26026 <memcpy>
		return from_len;
   25a70:	4620      	mov	r0, r4
}
   25a72:	bd10      	pop	{r4, pc}

00025a74 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
   25a74:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
   25a76:	f000 fb05 	bl	26084 <memset>
}
   25a7a:	bd08      	pop	{r3, pc}

00025a7c <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   25a7c:	09c3      	lsrs	r3, r0, #7
   25a7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   25a82:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   25a86:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   25a8a:	b2c0      	uxtb	r0, r0
   25a8c:	4770      	bx	lr

00025a8e <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   25a8e:	7803      	ldrb	r3, [r0, #0]
   25a90:	78ca      	ldrb	r2, [r1, #3]
   25a92:	4053      	eors	r3, r2
   25a94:	7003      	strb	r3, [r0, #0]
   25a96:	7843      	ldrb	r3, [r0, #1]
   25a98:	788a      	ldrb	r2, [r1, #2]
   25a9a:	4053      	eors	r3, r2
   25a9c:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   25a9e:	7883      	ldrb	r3, [r0, #2]
   25aa0:	784a      	ldrb	r2, [r1, #1]
   25aa2:	4053      	eors	r3, r2
   25aa4:	7083      	strb	r3, [r0, #2]
   25aa6:	78c3      	ldrb	r3, [r0, #3]
   25aa8:	780a      	ldrb	r2, [r1, #0]
   25aaa:	4053      	eors	r3, r2
   25aac:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   25aae:	7903      	ldrb	r3, [r0, #4]
   25ab0:	79ca      	ldrb	r2, [r1, #7]
   25ab2:	4053      	eors	r3, r2
   25ab4:	7103      	strb	r3, [r0, #4]
   25ab6:	7943      	ldrb	r3, [r0, #5]
   25ab8:	798a      	ldrb	r2, [r1, #6]
   25aba:	4053      	eors	r3, r2
   25abc:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   25abe:	7983      	ldrb	r3, [r0, #6]
   25ac0:	794a      	ldrb	r2, [r1, #5]
   25ac2:	4053      	eors	r3, r2
   25ac4:	7183      	strb	r3, [r0, #6]
   25ac6:	79c3      	ldrb	r3, [r0, #7]
   25ac8:	790a      	ldrb	r2, [r1, #4]
   25aca:	4053      	eors	r3, r2
   25acc:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   25ace:	7a03      	ldrb	r3, [r0, #8]
   25ad0:	7aca      	ldrb	r2, [r1, #11]
   25ad2:	4053      	eors	r3, r2
   25ad4:	7203      	strb	r3, [r0, #8]
   25ad6:	7a43      	ldrb	r3, [r0, #9]
   25ad8:	7a8a      	ldrb	r2, [r1, #10]
   25ada:	4053      	eors	r3, r2
   25adc:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   25ade:	7a83      	ldrb	r3, [r0, #10]
   25ae0:	7a4a      	ldrb	r2, [r1, #9]
   25ae2:	4053      	eors	r3, r2
   25ae4:	7283      	strb	r3, [r0, #10]
   25ae6:	7ac3      	ldrb	r3, [r0, #11]
   25ae8:	7a0a      	ldrb	r2, [r1, #8]
   25aea:	4053      	eors	r3, r2
   25aec:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   25aee:	7b03      	ldrb	r3, [r0, #12]
   25af0:	7bca      	ldrb	r2, [r1, #15]
   25af2:	4053      	eors	r3, r2
   25af4:	7303      	strb	r3, [r0, #12]
   25af6:	7b43      	ldrb	r3, [r0, #13]
   25af8:	7b8a      	ldrb	r2, [r1, #14]
   25afa:	4053      	eors	r3, r2
   25afc:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   25afe:	7b83      	ldrb	r3, [r0, #14]
   25b00:	7b4a      	ldrb	r2, [r1, #13]
   25b02:	4053      	eors	r3, r2
   25b04:	7383      	strb	r3, [r0, #14]
   25b06:	7bc3      	ldrb	r3, [r0, #15]
   25b08:	7b0a      	ldrb	r2, [r1, #12]
   25b0a:	4053      	eors	r3, r2
   25b0c:	73c3      	strb	r3, [r0, #15]
}
   25b0e:	4770      	bx	lr

00025b10 <shift_rows>:
{
   25b10:	b500      	push	{lr}
   25b12:	b085      	sub	sp, #20
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   25b14:	7802      	ldrb	r2, [r0, #0]
   25b16:	f88d 2000 	strb.w	r2, [sp]
   25b1a:	7942      	ldrb	r2, [r0, #5]
   25b1c:	f88d 2001 	strb.w	r2, [sp, #1]
   25b20:	7a82      	ldrb	r2, [r0, #10]
   25b22:	f88d 2002 	strb.w	r2, [sp, #2]
   25b26:	7bc2      	ldrb	r2, [r0, #15]
   25b28:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   25b2c:	7902      	ldrb	r2, [r0, #4]
   25b2e:	f88d 2004 	strb.w	r2, [sp, #4]
   25b32:	7a42      	ldrb	r2, [r0, #9]
   25b34:	f88d 2005 	strb.w	r2, [sp, #5]
   25b38:	7b82      	ldrb	r2, [r0, #14]
   25b3a:	f88d 2006 	strb.w	r2, [sp, #6]
   25b3e:	78c2      	ldrb	r2, [r0, #3]
   25b40:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   25b44:	7a02      	ldrb	r2, [r0, #8]
   25b46:	f88d 2008 	strb.w	r2, [sp, #8]
   25b4a:	7b42      	ldrb	r2, [r0, #13]
   25b4c:	f88d 2009 	strb.w	r2, [sp, #9]
   25b50:	7882      	ldrb	r2, [r0, #2]
   25b52:	f88d 200a 	strb.w	r2, [sp, #10]
   25b56:	79c2      	ldrb	r2, [r0, #7]
   25b58:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   25b5c:	7b02      	ldrb	r2, [r0, #12]
   25b5e:	f88d 200c 	strb.w	r2, [sp, #12]
   25b62:	7842      	ldrb	r2, [r0, #1]
   25b64:	f88d 200d 	strb.w	r2, [sp, #13]
   25b68:	7982      	ldrb	r2, [r0, #6]
   25b6a:	f88d 200e 	strb.w	r2, [sp, #14]
   25b6e:	7ac3      	ldrb	r3, [r0, #11]
   25b70:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   25b74:	2310      	movs	r3, #16
   25b76:	466a      	mov	r2, sp
   25b78:	4619      	mov	r1, r3
   25b7a:	f7ff ff6e 	bl	25a5a <_copy>
}
   25b7e:	b005      	add	sp, #20
   25b80:	f85d fb04 	ldr.w	pc, [sp], #4

00025b84 <mult_row_column>:
{
   25b84:	b570      	push	{r4, r5, r6, lr}
   25b86:	4606      	mov	r6, r0
   25b88:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   25b8a:	7808      	ldrb	r0, [r1, #0]
   25b8c:	f7ff ff76 	bl	25a7c <_double_byte>
   25b90:	4605      	mov	r5, r0
   25b92:	7860      	ldrb	r0, [r4, #1]
   25b94:	f7ff ff72 	bl	25a7c <_double_byte>
   25b98:	7861      	ldrb	r1, [r4, #1]
   25b9a:	78a2      	ldrb	r2, [r4, #2]
   25b9c:	78e3      	ldrb	r3, [r4, #3]
   25b9e:	4048      	eors	r0, r1
   25ba0:	4045      	eors	r5, r0
   25ba2:	406a      	eors	r2, r5
   25ba4:	4053      	eors	r3, r2
   25ba6:	7033      	strb	r3, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   25ba8:	7825      	ldrb	r5, [r4, #0]
   25baa:	7860      	ldrb	r0, [r4, #1]
   25bac:	f7ff ff66 	bl	25a7c <_double_byte>
   25bb0:	4045      	eors	r5, r0
   25bb2:	b2ed      	uxtb	r5, r5
   25bb4:	78a0      	ldrb	r0, [r4, #2]
   25bb6:	f7ff ff61 	bl	25a7c <_double_byte>
   25bba:	78a2      	ldrb	r2, [r4, #2]
   25bbc:	78e3      	ldrb	r3, [r4, #3]
   25bbe:	4050      	eors	r0, r2
   25bc0:	4045      	eors	r5, r0
   25bc2:	406b      	eors	r3, r5
   25bc4:	7073      	strb	r3, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   25bc6:	7825      	ldrb	r5, [r4, #0]
   25bc8:	7863      	ldrb	r3, [r4, #1]
   25bca:	405d      	eors	r5, r3
   25bcc:	78a0      	ldrb	r0, [r4, #2]
   25bce:	f7ff ff55 	bl	25a7c <_double_byte>
   25bd2:	4045      	eors	r5, r0
   25bd4:	b2ed      	uxtb	r5, r5
   25bd6:	78e0      	ldrb	r0, [r4, #3]
   25bd8:	f7ff ff50 	bl	25a7c <_double_byte>
   25bdc:	78e3      	ldrb	r3, [r4, #3]
   25bde:	4058      	eors	r0, r3
   25be0:	4045      	eors	r5, r0
   25be2:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   25be4:	7820      	ldrb	r0, [r4, #0]
   25be6:	f7ff ff49 	bl	25a7c <_double_byte>
   25bea:	7822      	ldrb	r2, [r4, #0]
   25bec:	7863      	ldrb	r3, [r4, #1]
   25bee:	78a5      	ldrb	r5, [r4, #2]
   25bf0:	4050      	eors	r0, r2
   25bf2:	4043      	eors	r3, r0
   25bf4:	405d      	eors	r5, r3
   25bf6:	b2ed      	uxtb	r5, r5
   25bf8:	78e0      	ldrb	r0, [r4, #3]
   25bfa:	f7ff ff3f 	bl	25a7c <_double_byte>
   25bfe:	4045      	eors	r5, r0
   25c00:	70f5      	strb	r5, [r6, #3]
}
   25c02:	bd70      	pop	{r4, r5, r6, pc}

00025c04 <mix_columns>:
{
   25c04:	b510      	push	{r4, lr}
   25c06:	b084      	sub	sp, #16
   25c08:	4604      	mov	r4, r0
	mult_row_column(t, s);
   25c0a:	4601      	mov	r1, r0
   25c0c:	4668      	mov	r0, sp
   25c0e:	f7ff ffb9 	bl	25b84 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   25c12:	1d21      	adds	r1, r4, #4
   25c14:	a801      	add	r0, sp, #4
   25c16:	f7ff ffb5 	bl	25b84 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   25c1a:	f104 0108 	add.w	r1, r4, #8
   25c1e:	a802      	add	r0, sp, #8
   25c20:	f7ff ffb0 	bl	25b84 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   25c24:	f104 010c 	add.w	r1, r4, #12
   25c28:	a803      	add	r0, sp, #12
   25c2a:	f7ff ffab 	bl	25b84 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   25c2e:	2310      	movs	r3, #16
   25c30:	466a      	mov	r2, sp
   25c32:	4619      	mov	r1, r3
   25c34:	4620      	mov	r0, r4
   25c36:	f7ff ff10 	bl	25a5a <_copy>
}
   25c3a:	b004      	add	sp, #16
   25c3c:	bd10      	pop	{r4, pc}

00025c3e <gf_double>:
 */
void gf_double(uint8_t *out, uint8_t *in)
{

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
   25c3e:	460b      	mov	r3, r1

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   25c40:	f913 2b0f 	ldrsb.w	r2, [r3], #15
   25c44:	2a00      	cmp	r2, #0
   25c46:	db04      	blt.n	25c52 <gf_double+0x14>
   25c48:	f04f 0c00 	mov.w	ip, #0

	out += (TC_AES_BLOCK_SIZE - 1);
   25c4c:	f100 020f 	add.w	r2, r0, #15
   25c50:	e006      	b.n	25c60 <gf_double+0x22>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   25c52:	f04f 0c87 	mov.w	ip, #135	; 0x87
   25c56:	e7f9      	b.n	25c4c <gf_double+0xe>
	for (;;) {
		*out-- = (*x << 1) ^ carry;
		if (x == in) {
			break;
		}
		carry = *x-- >> 7;
   25c58:	f813 0901 	ldrb.w	r0, [r3], #-1
   25c5c:	ea4f 1cd0 	mov.w	ip, r0, lsr #7
		*out-- = (*x << 1) ^ carry;
   25c60:	7818      	ldrb	r0, [r3, #0]
   25c62:	ea8c 0040 	eor.w	r0, ip, r0, lsl #1
   25c66:	f802 0901 	strb.w	r0, [r2], #-1
		if (x == in) {
   25c6a:	428b      	cmp	r3, r1
   25c6c:	d1f4      	bne.n	25c58 <gf_double+0x1a>
	}
}
   25c6e:	4770      	bx	lr

00025c70 <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
   25c70:	b130      	cbz	r0, 25c80 <tc_cmac_erase+0x10>
{
   25c72:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   25c74:	2258      	movs	r2, #88	; 0x58
   25c76:	2100      	movs	r1, #0
   25c78:	f7ff fefc 	bl	25a74 <_set>

	return TC_CRYPTO_SUCCESS;
   25c7c:	2001      	movs	r0, #1
}
   25c7e:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
   25c80:	2000      	movs	r0, #0
}
   25c82:	4770      	bx	lr

00025c84 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   25c84:	b1a0      	cbz	r0, 25cb0 <tc_cmac_init+0x2c>
{
   25c86:	b510      	push	{r4, lr}
   25c88:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   25c8a:	2210      	movs	r2, #16
   25c8c:	2100      	movs	r1, #0
   25c8e:	f7ff fef1 	bl	25a74 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   25c92:	2210      	movs	r2, #16
   25c94:	2100      	movs	r1, #0
   25c96:	f104 0030 	add.w	r0, r4, #48	; 0x30
   25c9a:	f7ff feeb 	bl	25a74 <_set>
	s->leftover_offset = 0;
   25c9e:	2300      	movs	r3, #0
   25ca0:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   25ca2:	2200      	movs	r2, #0
   25ca4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   25ca8:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
   25cac:	2001      	movs	r0, #1
}
   25cae:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
   25cb0:	2000      	movs	r0, #0
}
   25cb2:	4770      	bx	lr

00025cb4 <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
   25cb4:	b338      	cbz	r0, 25d06 <tc_cmac_setup+0x52>
{
   25cb6:	b570      	push	{r4, r5, r6, lr}
   25cb8:	460d      	mov	r5, r1
   25cba:	4616      	mov	r6, r2
   25cbc:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
   25cbe:	b321      	cbz	r1, 25d0a <tc_cmac_setup+0x56>
	_set(s, 0, sizeof(*s));
   25cc0:	2258      	movs	r2, #88	; 0x58
   25cc2:	2100      	movs	r1, #0
   25cc4:	f7ff fed6 	bl	25a74 <_set>
	s->sched = sched;
   25cc8:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   25cca:	4629      	mov	r1, r5
   25ccc:	4630      	mov	r0, r6
   25cce:	f7ee fd4f 	bl	14770 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   25cd2:	2210      	movs	r2, #16
   25cd4:	2100      	movs	r1, #0
   25cd6:	4620      	mov	r0, r4
   25cd8:	f7ff fecc 	bl	25a74 <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   25cdc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   25cde:	4621      	mov	r1, r4
   25ce0:	4620      	mov	r0, r4
   25ce2:	f7ee fda7 	bl	14834 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   25ce6:	f104 0510 	add.w	r5, r4, #16
   25cea:	4621      	mov	r1, r4
   25cec:	4628      	mov	r0, r5
   25cee:	f7ff ffa6 	bl	25c3e <gf_double>
	gf_double (s->K2, s->K1);
   25cf2:	4629      	mov	r1, r5
   25cf4:	f104 0020 	add.w	r0, r4, #32
   25cf8:	f7ff ffa1 	bl	25c3e <gf_double>
	tc_cmac_init(s);
   25cfc:	4620      	mov	r0, r4
   25cfe:	f7ff ffc1 	bl	25c84 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   25d02:	2001      	movs	r0, #1
}
   25d04:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   25d06:	2000      	movs	r0, #0
}
   25d08:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   25d0a:	2000      	movs	r0, #0
   25d0c:	e7fa      	b.n	25d04 <tc_cmac_setup+0x50>

00025d0e <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   25d0e:	2800      	cmp	r0, #0
   25d10:	d064      	beq.n	25ddc <tc_cmac_update+0xce>
{
   25d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25d16:	460d      	mov	r5, r1
   25d18:	4616      	mov	r6, r2
   25d1a:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   25d1c:	2a00      	cmp	r2, #0
   25d1e:	d05f      	beq.n	25de0 <tc_cmac_update+0xd2>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   25d20:	2900      	cmp	r1, #0
   25d22:	d060      	beq.n	25de6 <tc_cmac_update+0xd8>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   25d24:	6d03      	ldr	r3, [r0, #80]	; 0x50
   25d26:	6d42      	ldr	r2, [r0, #84]	; 0x54
   25d28:	ea53 0102 	orrs.w	r1, r3, r2
   25d2c:	d05d      	beq.n	25dea <tc_cmac_update+0xdc>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   25d2e:	3b01      	subs	r3, #1
   25d30:	f142 32ff 	adc.w	r2, r2, #4294967295
   25d34:	6503      	str	r3, [r0, #80]	; 0x50
   25d36:	6542      	str	r2, [r0, #84]	; 0x54

	if (s->leftover_offset > 0) {
   25d38:	6c47      	ldr	r7, [r0, #68]	; 0x44
   25d3a:	2f00      	cmp	r7, #0
   25d3c:	d03d      	beq.n	25dba <tc_cmac_update+0xac>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   25d3e:	f1c7 0810 	rsb	r8, r7, #16

		if (data_length < remaining_space) {
   25d42:	4546      	cmp	r6, r8
   25d44:	d30d      	bcc.n	25d62 <tc_cmac_update+0x54>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
   25d46:	f107 0030 	add.w	r0, r7, #48	; 0x30
   25d4a:	4643      	mov	r3, r8
   25d4c:	462a      	mov	r2, r5
   25d4e:	4641      	mov	r1, r8
   25d50:	4420      	add	r0, r4
   25d52:	f7ff fe82 	bl	25a5a <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
   25d56:	3f10      	subs	r7, #16
   25d58:	443e      	add	r6, r7
		data += remaining_space;
   25d5a:	4445      	add	r5, r8
		s->leftover_offset = 0;
   25d5c:	2300      	movs	r3, #0
   25d5e:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   25d60:	e013      	b.n	25d8a <tc_cmac_update+0x7c>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   25d62:	f107 0030 	add.w	r0, r7, #48	; 0x30
   25d66:	4633      	mov	r3, r6
   25d68:	462a      	mov	r2, r5
   25d6a:	4631      	mov	r1, r6
   25d6c:	4420      	add	r0, r4
   25d6e:	f7ff fe74 	bl	25a5a <_copy>
			s->leftover_offset += data_length;
   25d72:	6c63      	ldr	r3, [r4, #68]	; 0x44
   25d74:	4433      	add	r3, r6
   25d76:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   25d78:	2001      	movs	r0, #1
   25d7a:	e032      	b.n	25de2 <tc_cmac_update+0xd4>
			s->iv[i] ^= s->leftover[i];
   25d7c:	5ce2      	ldrb	r2, [r4, r3]
   25d7e:	18e1      	adds	r1, r4, r3
   25d80:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
   25d84:	404a      	eors	r2, r1
   25d86:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   25d88:	3301      	adds	r3, #1
   25d8a:	2b0f      	cmp	r3, #15
   25d8c:	d9f6      	bls.n	25d7c <tc_cmac_update+0x6e>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   25d8e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   25d90:	4621      	mov	r1, r4
   25d92:	4620      	mov	r0, r4
   25d94:	f7ee fd4e 	bl	14834 <tc_aes_encrypt>
   25d98:	e00f      	b.n	25dba <tc_cmac_update+0xac>
	}

	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
   25d9a:	5ce0      	ldrb	r0, [r4, r3]
   25d9c:	f815 c003 	ldrb.w	ip, [r5, r3]
   25da0:	ea80 000c 	eor.w	r0, r0, ip
   25da4:	54e0      	strb	r0, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   25da6:	3301      	adds	r3, #1
   25da8:	2b0f      	cmp	r3, #15
   25daa:	d9f6      	bls.n	25d9a <tc_cmac_update+0x8c>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   25dac:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   25dae:	4621      	mov	r1, r4
   25db0:	4620      	mov	r0, r4
   25db2:	f7ee fd3f 	bl	14834 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   25db6:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   25db8:	3e10      	subs	r6, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
   25dba:	2e10      	cmp	r6, #16
   25dbc:	d901      	bls.n	25dc2 <tc_cmac_update+0xb4>
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   25dbe:	2300      	movs	r3, #0
   25dc0:	e7f2      	b.n	25da8 <tc_cmac_update+0x9a>
	}

	if (data_length > 0) {
   25dc2:	b90e      	cbnz	r6, 25dc8 <tc_cmac_update+0xba>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   25dc4:	2001      	movs	r0, #1
   25dc6:	e00c      	b.n	25de2 <tc_cmac_update+0xd4>
		_copy(s->leftover, data_length, data, data_length);
   25dc8:	4633      	mov	r3, r6
   25dca:	462a      	mov	r2, r5
   25dcc:	4631      	mov	r1, r6
   25dce:	f104 0030 	add.w	r0, r4, #48	; 0x30
   25dd2:	f7ff fe42 	bl	25a5a <_copy>
		s->leftover_offset = data_length;
   25dd6:	6466      	str	r6, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
   25dd8:	2001      	movs	r0, #1
   25dda:	e002      	b.n	25de2 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
   25ddc:	2000      	movs	r0, #0
}
   25dde:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
   25de0:	2001      	movs	r0, #1
}
   25de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   25de6:	2000      	movs	r0, #0
   25de8:	e7fb      	b.n	25de2 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
   25dea:	2000      	movs	r0, #0
   25dec:	e7f9      	b.n	25de2 <tc_cmac_update+0xd4>

00025dee <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   25dee:	b380      	cbz	r0, 25e52 <tc_cmac_final+0x64>
{
   25df0:	b538      	push	{r3, r4, r5, lr}
   25df2:	460c      	mov	r4, r1
   25df4:	4605      	mov	r5, r0
	if (tag == (uint8_t *) 0 ||
   25df6:	b371      	cbz	r1, 25e56 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   25df8:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   25dfa:	2a10      	cmp	r2, #16
   25dfc:	d103      	bne.n	25e06 <tc_cmac_final+0x18>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   25dfe:	f101 0c10 	add.w	ip, r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   25e02:	2300      	movs	r3, #0
   25e04:	e019      	b.n	25e3a <tc_cmac_final+0x4c>
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   25e06:	f102 0030 	add.w	r0, r2, #48	; 0x30
   25e0a:	f1c2 0210 	rsb	r2, r2, #16
   25e0e:	2100      	movs	r1, #0
   25e10:	4420      	add	r0, r4
   25e12:	f7ff fe2f 	bl	25a74 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   25e16:	6c63      	ldr	r3, [r4, #68]	; 0x44
   25e18:	4423      	add	r3, r4
   25e1a:	2280      	movs	r2, #128	; 0x80
   25e1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   25e20:	f104 0c20 	add.w	ip, r4, #32
   25e24:	e7ed      	b.n	25e02 <tc_cmac_final+0x14>
		s->iv[i] ^= s->leftover[i] ^ k[i];
   25e26:	5ce2      	ldrb	r2, [r4, r3]
   25e28:	18e1      	adds	r1, r4, r3
   25e2a:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
   25e2e:	f81c 1003 	ldrb.w	r1, [ip, r3]
   25e32:	4048      	eors	r0, r1
   25e34:	4042      	eors	r2, r0
   25e36:	54e2      	strb	r2, [r4, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   25e38:	3301      	adds	r3, #1
   25e3a:	2b0f      	cmp	r3, #15
   25e3c:	d9f3      	bls.n	25e26 <tc_cmac_final+0x38>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   25e3e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   25e40:	4621      	mov	r1, r4
   25e42:	4628      	mov	r0, r5
   25e44:	f7ee fcf6 	bl	14834 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   25e48:	4620      	mov	r0, r4
   25e4a:	f7ff ff11 	bl	25c70 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   25e4e:	2001      	movs	r0, #1
}
   25e50:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   25e52:	2000      	movs	r0, #0
}
   25e54:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   25e56:	2000      	movs	r0, #0
   25e58:	e7fa      	b.n	25e50 <tc_cmac_final+0x62>

00025e5a <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   25e5a:	b538      	push	{r3, r4, r5, lr}
   25e5c:	4604      	mov	r4, r0

	if (esf != NULL) {
   25e5e:	460d      	mov	r5, r1
   25e60:	b111      	cbz	r1, 25e68 <z_arm_fatal_error+0xe>
		esf_dump(esf);
   25e62:	4608      	mov	r0, r1
   25e64:	f7ee fd60 	bl	14928 <esf_dump>
	}
	z_fatal_error(reason, esf);
   25e68:	4629      	mov	r1, r5
   25e6a:	4620      	mov	r0, r4
   25e6c:	f7fc f9e2 	bl	22234 <z_fatal_error>
}
   25e70:	bd38      	pop	{r3, r4, r5, pc}

00025e72 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   25e72:	b508      	push	{r3, lr}
   25e74:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   25e76:	6800      	ldr	r0, [r0, #0]
   25e78:	f7ff ffef 	bl	25e5a <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   25e7c:	bd08      	pop	{r3, pc}

00025e7e <arch_irq_enable>:
{
   25e7e:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
   25e80:	b240      	sxtb	r0, r0
   25e82:	f7ee fe77 	bl	14b74 <__NVIC_EnableIRQ>
}
   25e86:	bd08      	pop	{r3, pc}

00025e88 <arch_irq_disable>:
{
   25e88:	b508      	push	{r3, lr}
	NVIC_DisableIRQ((IRQn_Type)irq);
   25e8a:	b240      	sxtb	r0, r0
   25e8c:	f7ee fe80 	bl	14b90 <__NVIC_DisableIRQ>
}
   25e90:	bd08      	pop	{r3, pc}

00025e92 <z_arm_irq_priority_set>:
{
   25e92:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   25e94:	f012 0f01 	tst.w	r2, #1
   25e98:	d104      	bne.n	25ea4 <z_arm_irq_priority_set+0x12>
		prio += _IRQ_PRIO_OFFSET;
   25e9a:	3102      	adds	r1, #2
	NVIC_SetPriority((IRQn_Type)irq, prio);
   25e9c:	b240      	sxtb	r0, r0
   25e9e:	f7ee fe89 	bl	14bb4 <__NVIC_SetPriority>
}
   25ea2:	bd08      	pop	{r3, pc}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   25ea4:	2100      	movs	r1, #0
   25ea6:	e7f9      	b.n	25e9c <z_arm_irq_priority_set+0xa>

00025ea8 <z_irq_spurious>:
{
   25ea8:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   25eaa:	2100      	movs	r1, #0
   25eac:	2001      	movs	r0, #1
   25eae:	f7ff ffd4 	bl	25e5a <z_arm_fatal_error>
}
   25eb2:	bd08      	pop	{r3, pc}

00025eb4 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   25eb4:	b508      	push	{r3, lr}
	handler();
   25eb6:	f7ee feaf 	bl	14c18 <z_SysNmiOnReset>
	z_arm_int_exit();
   25eba:	f7ee ffa1 	bl	14e00 <z_arm_exc_exit>
}
   25ebe:	bd08      	pop	{r3, pc}

00025ec0 <memory_fault_recoverable>:
}
   25ec0:	2000      	movs	r0, #0
   25ec2:	4770      	bx	lr

00025ec4 <fault_handle>:
{
   25ec4:	b508      	push	{r3, lr}
	*recoverable = false;
   25ec6:	2300      	movs	r3, #0
   25ec8:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   25eca:	1ecb      	subs	r3, r1, #3
   25ecc:	2b09      	cmp	r3, #9
   25ece:	d81a      	bhi.n	25f06 <fault_handle+0x42>
   25ed0:	e8df f003 	tbb	[pc, r3]
   25ed4:	110d0905 	.word	0x110d0905
   25ed8:	19191919 	.word	0x19191919
   25edc:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
   25ede:	4611      	mov	r1, r2
   25ee0:	f7ef fd0c 	bl	158fc <hard_fault>
}
   25ee4:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   25ee6:	2100      	movs	r1, #0
   25ee8:	f7ef fb76 	bl	155d8 <mem_manage_fault>
		break;
   25eec:	e7fa      	b.n	25ee4 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   25eee:	2100      	movs	r1, #0
   25ef0:	f7ee fff6 	bl	14ee0 <bus_fault>
		break;
   25ef4:	e7f6      	b.n	25ee4 <fault_handle+0x20>
		reason = usage_fault(esf);
   25ef6:	f7ef f987 	bl	15208 <usage_fault>
		break;
   25efa:	e7f3      	b.n	25ee4 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   25efc:	4611      	mov	r1, r2
   25efe:	f7ef facd 	bl	1549c <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   25f02:	2000      	movs	r0, #0
		break;
   25f04:	e7ee      	b.n	25ee4 <fault_handle+0x20>
		reserved_exception(esf, fault);
   25f06:	f7ef faf9 	bl	154fc <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   25f0a:	2000      	movs	r0, #0
	return reason;
   25f0c:	e7ea      	b.n	25ee4 <fault_handle+0x20>

00025f0e <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   25f0e:	6843      	ldr	r3, [r0, #4]
   25f10:	1e5a      	subs	r2, r3, #1
		&&
   25f12:	4213      	tst	r3, r2
   25f14:	d106      	bne.n	25f24 <mpu_partition_is_valid+0x16>
		&&
   25f16:	2b1f      	cmp	r3, #31
   25f18:	d906      	bls.n	25f28 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   25f1a:	6803      	ldr	r3, [r0, #0]
		&&
   25f1c:	421a      	tst	r2, r3
   25f1e:	d005      	beq.n	25f2c <mpu_partition_is_valid+0x1e>
   25f20:	2000      	movs	r0, #0
   25f22:	4770      	bx	lr
   25f24:	2000      	movs	r0, #0
   25f26:	4770      	bx	lr
   25f28:	2000      	movs	r0, #0
   25f2a:	4770      	bx	lr
   25f2c:	2001      	movs	r0, #1
}
   25f2e:	4770      	bx	lr

00025f30 <mpu_configure_region>:
{
   25f30:	b500      	push	{lr}
   25f32:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   25f34:	680b      	ldr	r3, [r1, #0]
   25f36:	9301      	str	r3, [sp, #4]
		&new_region->attr, new_region->start, new_region->size);
   25f38:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   25f3a:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   25f3c:	2b20      	cmp	r3, #32
   25f3e:	d912      	bls.n	25f66 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   25f40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   25f44:	d811      	bhi.n	25f6a <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   25f46:	3b01      	subs	r3, #1
   25f48:	fab3 f383 	clz	r3, r3
   25f4c:	f1c3 031f 	rsb	r3, r3, #31
   25f50:	005b      	lsls	r3, r3, #1
   25f52:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   25f56:	4313      	orrs	r3, r2
   25f58:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   25f5a:	a901      	add	r1, sp, #4
   25f5c:	f7ef ff0e 	bl	15d7c <region_allocate_and_init>
}
   25f60:	b005      	add	sp, #20
   25f62:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   25f66:	2308      	movs	r3, #8
   25f68:	e7f5      	b.n	25f56 <mpu_configure_region+0x26>
		return REGION_4G;
   25f6a:	233e      	movs	r3, #62	; 0x3e
   25f6c:	e7f3      	b.n	25f56 <mpu_configure_region+0x26>

00025f6e <arm_core_mpu_configure_static_mpu_regions>:
{
   25f6e:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   25f70:	f7ef ffbe 	bl	15ef0 <mpu_configure_static_mpu_regions>
}
   25f74:	bd08      	pop	{r3, pc}

00025f76 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   25f76:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   25f78:	f7ef ffc4 	bl	15f04 <mpu_configure_dynamic_mpu_regions>
}
   25f7c:	bd08      	pop	{r3, pc}

00025f7e <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   25f7e:	4602      	mov	r2, r0
   25f80:	e002      	b.n	25f88 <strcpy+0xa>
		*d = *s;
   25f82:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
   25f86:	3101      	adds	r1, #1
	while (*s != '\0') {
   25f88:	780b      	ldrb	r3, [r1, #0]
   25f8a:	2b00      	cmp	r3, #0
   25f8c:	d1f9      	bne.n	25f82 <strcpy+0x4>
	}

	*d = '\0';
   25f8e:	7013      	strb	r3, [r2, #0]

	return dest;
}
   25f90:	4770      	bx	lr

00025f92 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   25f92:	4603      	mov	r3, r0
   25f94:	b1a2      	cbz	r2, 25fc0 <strncpy+0x2e>
{
   25f96:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
   25f98:	780c      	ldrb	r4, [r1, #0]
   25f9a:	b12c      	cbz	r4, 25fa8 <strncpy+0x16>
		*d = *s;
   25f9c:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
   25fa0:	3101      	adds	r1, #1
		d++;
		n--;
   25fa2:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
   25fa4:	2a00      	cmp	r2, #0
   25fa6:	d1f7      	bne.n	25f98 <strncpy+0x6>
	}

	while (n > 0) {
   25fa8:	b122      	cbz	r2, 25fb4 <strncpy+0x22>
		*d = '\0';
   25faa:	2100      	movs	r1, #0
   25fac:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
   25fb0:	3a01      	subs	r2, #1
   25fb2:	e7f9      	b.n	25fa8 <strncpy+0x16>
	}

	return dest;
}
   25fb4:	bc10      	pop	{r4}
   25fb6:	4770      	bx	lr
		*d = '\0';
   25fb8:	2100      	movs	r1, #0
   25fba:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   25fbe:	3a01      	subs	r2, #1
	while (n > 0) {
   25fc0:	2a00      	cmp	r2, #0
   25fc2:	d1f9      	bne.n	25fb8 <strncpy+0x26>
   25fc4:	4770      	bx	lr

00025fc6 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   25fc6:	4603      	mov	r3, r0
	size_t n = 0;
   25fc8:	2000      	movs	r0, #0

	while (*s != '\0') {
   25fca:	e001      	b.n	25fd0 <strlen+0xa>
		s++;
   25fcc:	3301      	adds	r3, #1
		n++;
   25fce:	3001      	adds	r0, #1
	while (*s != '\0') {
   25fd0:	781a      	ldrb	r2, [r3, #0]
   25fd2:	2a00      	cmp	r2, #0
   25fd4:	d1fa      	bne.n	25fcc <strlen+0x6>
	}

	return n;
}
   25fd6:	4770      	bx	lr

00025fd8 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   25fd8:	4603      	mov	r3, r0
	size_t n = 0;
   25fda:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   25fdc:	e001      	b.n	25fe2 <strnlen+0xa>
		s++;
   25fde:	3301      	adds	r3, #1
		n++;
   25fe0:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
   25fe2:	781a      	ldrb	r2, [r3, #0]
   25fe4:	b10a      	cbz	r2, 25fea <strnlen+0x12>
   25fe6:	4288      	cmp	r0, r1
   25fe8:	d3f9      	bcc.n	25fde <strnlen+0x6>
	}

	return n;
}
   25fea:	4770      	bx	lr

00025fec <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   25fec:	e001      	b.n	25ff2 <strcmp+0x6>
		s1++;
   25fee:	3001      	adds	r0, #1
		s2++;
   25ff0:	3101      	adds	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
   25ff2:	7803      	ldrb	r3, [r0, #0]
   25ff4:	780a      	ldrb	r2, [r1, #0]
   25ff6:	4293      	cmp	r3, r2
   25ff8:	d101      	bne.n	25ffe <strcmp+0x12>
   25ffa:	2b00      	cmp	r3, #0
   25ffc:	d1f7      	bne.n	25fee <strcmp+0x2>
	}

	return *s1 - *s2;
}
   25ffe:	1a98      	subs	r0, r3, r2
   26000:	4770      	bx	lr

00026002 <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   26002:	4613      	mov	r3, r2
   26004:	b16a      	cbz	r2, 26022 <memcmp+0x20>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   26006:	3b01      	subs	r3, #1
   26008:	d007      	beq.n	2601a <memcmp+0x18>
   2600a:	f890 c000 	ldrb.w	ip, [r0]
   2600e:	780a      	ldrb	r2, [r1, #0]
   26010:	4594      	cmp	ip, r2
   26012:	d102      	bne.n	2601a <memcmp+0x18>
		c1++;
   26014:	3001      	adds	r0, #1
		c2++;
   26016:	3101      	adds	r1, #1
   26018:	e7f5      	b.n	26006 <memcmp+0x4>
	}

	return *c1 - *c2;
   2601a:	7800      	ldrb	r0, [r0, #0]
   2601c:	780b      	ldrb	r3, [r1, #0]
   2601e:	1ac0      	subs	r0, r0, r3
   26020:	4770      	bx	lr
		return 0;
   26022:	2000      	movs	r0, #0
}
   26024:	4770      	bx	lr

00026026 <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   26026:	ea80 0301 	eor.w	r3, r0, r1
   2602a:	f013 0f03 	tst.w	r3, #3
   2602e:	d001      	beq.n	26034 <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
   26030:	4603      	mov	r3, r0
   26032:	e023      	b.n	2607c <memcpy+0x56>
   26034:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   26036:	f013 0f03 	tst.w	r3, #3
   2603a:	d00f      	beq.n	2605c <memcpy+0x36>
			if (n == 0) {
   2603c:	b30a      	cbz	r2, 26082 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
   2603e:	f811 cb01 	ldrb.w	ip, [r1], #1
   26042:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
   26046:	3a01      	subs	r2, #1
   26048:	e7f5      	b.n	26036 <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
   2604a:	f811 cb01 	ldrb.w	ip, [r1], #1
   2604e:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   26052:	3a01      	subs	r2, #1
	while (n > 0) {
   26054:	2a00      	cmp	r2, #0
   26056:	d1f8      	bne.n	2604a <memcpy+0x24>
	}

	return d;
}
   26058:	bc10      	pop	{r4}
   2605a:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
   2605c:	2a03      	cmp	r2, #3
   2605e:	d90d      	bls.n	2607c <memcpy+0x56>
{
   26060:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
   26062:	f851 4b04 	ldr.w	r4, [r1], #4
   26066:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
   2606a:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
   2606c:	2a03      	cmp	r2, #3
   2606e:	d8f8      	bhi.n	26062 <memcpy+0x3c>
   26070:	e7f0      	b.n	26054 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
   26072:	f811 cb01 	ldrb.w	ip, [r1], #1
   26076:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   2607a:	3a01      	subs	r2, #1
	while (n > 0) {
   2607c:	2a00      	cmp	r2, #0
   2607e:	d1f8      	bne.n	26072 <memcpy+0x4c>
   26080:	4770      	bx	lr
}
   26082:	4770      	bx	lr

00026084 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   26084:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
   26088:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   2608a:	e002      	b.n	26092 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
   2608c:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   26090:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   26092:	f013 0f03 	tst.w	r3, #3
   26096:	d002      	beq.n	2609e <memset+0x1a>
		if (n == 0) {
   26098:	2a00      	cmp	r2, #0
   2609a:	d1f7      	bne.n	2608c <memset+0x8>
   2609c:	e00f      	b.n	260be <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
   2609e:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   260a0:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   260a4:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   260a8:	2a03      	cmp	r2, #3
   260aa:	d906      	bls.n	260ba <memset+0x36>
		*(d_word++) = c_word;
   260ac:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
   260b0:	3a04      	subs	r2, #4
   260b2:	e7f9      	b.n	260a8 <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
   260b4:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   260b8:	3a01      	subs	r2, #1
	while (n > 0) {
   260ba:	2a00      	cmp	r2, #0
   260bc:	d1fa      	bne.n	260b4 <memset+0x30>
	}

	return buf;
}
   260be:	4770      	bx	lr

000260c0 <_stdout_hook_default>:
}
   260c0:	f04f 30ff 	mov.w	r0, #4294967295
   260c4:	4770      	bx	lr

000260c6 <sys_arch_reboot>:
{
   260c6:	b508      	push	{r3, lr}
    *p_gpregret = val;
   260c8:	b2c0      	uxtb	r0, r0
   260ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   260ce:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
	NVIC_SystemReset();
   260d2:	f7ef ff6f 	bl	15fb4 <__NVIC_SystemReset>

000260d6 <nrf_power_system_off>:
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   260d6:	2301      	movs	r3, #1
   260d8:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   260dc:	f3bf 8f4f 	dsb	sy
        __WFE();
   260e0:	bf20      	wfe
    while (true)
   260e2:	e7fd      	b.n	260e0 <nrf_power_system_off+0xa>

000260e4 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   260e4:	2806      	cmp	r0, #6
   260e6:	d000      	beq.n	260ea <pm_state_set+0x6>
   260e8:	4770      	bx	lr
{
   260ea:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_power_system_off(NRF_POWER);
   260ec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   260f0:	f7ff fff1 	bl	260d6 <nrf_power_system_off>

000260f4 <pm_state_exit_post_ops>:
   260f4:	2300      	movs	r3, #0
   260f6:	f383 8811 	msr	BASEPRI, r3
   260fa:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   260fe:	4770      	bx	lr

00026100 <uuid128_cmp>:

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   26100:	b510      	push	{r4, lr}
   26102:	b08a      	sub	sp, #40	; 0x28
   26104:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
   26106:	a905      	add	r1, sp, #20
   26108:	f7f0 f82e 	bl	16168 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2610c:	4669      	mov	r1, sp
   2610e:	4620      	mov	r0, r4
   26110:	f7f0 f82a 	bl	16168 <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
   26114:	2210      	movs	r2, #16
   26116:	f10d 0101 	add.w	r1, sp, #1
   2611a:	f10d 0015 	add.w	r0, sp, #21
   2611e:	f7ff ff70 	bl	26002 <memcmp>
}
   26122:	b00a      	add	sp, #40	; 0x28
   26124:	bd10      	pop	{r4, pc}

00026126 <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   26126:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   26128:	7803      	ldrb	r3, [r0, #0]
   2612a:	780a      	ldrb	r2, [r1, #0]
   2612c:	4293      	cmp	r3, r2
   2612e:	d107      	bne.n	26140 <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);
	}

	switch (u1->type) {
   26130:	2b01      	cmp	r3, #1
   26132:	d00c      	beq.n	2614e <bt_uuid_cmp+0x28>
   26134:	2b02      	cmp	r3, #2
   26136:	d00e      	beq.n	26156 <bt_uuid_cmp+0x30>
   26138:	b12b      	cbz	r3, 26146 <bt_uuid_cmp+0x20>
   2613a:	f06f 0015 	mvn.w	r0, #21
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   2613e:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
   26140:	f7ff ffde 	bl	26100 <uuid128_cmp>
   26144:	e7fb      	b.n	2613e <bt_uuid_cmp+0x18>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   26146:	8840      	ldrh	r0, [r0, #2]
   26148:	884b      	ldrh	r3, [r1, #2]
   2614a:	1ac0      	subs	r0, r0, r3
   2614c:	e7f7      	b.n	2613e <bt_uuid_cmp+0x18>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2614e:	6840      	ldr	r0, [r0, #4]
   26150:	684b      	ldr	r3, [r1, #4]
   26152:	1ac0      	subs	r0, r0, r3
   26154:	e7f3      	b.n	2613e <bt_uuid_cmp+0x18>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   26156:	2210      	movs	r2, #16
   26158:	3101      	adds	r1, #1
   2615a:	3001      	adds	r0, #1
   2615c:	f7ff ff51 	bl	26002 <memcmp>
   26160:	e7ed      	b.n	2613e <bt_uuid_cmp+0x18>

00026162 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
   26162:	b508      	push	{r3, lr}
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   26164:	2a04      	cmp	r2, #4
   26166:	d00e      	beq.n	26186 <bt_uuid_create+0x24>
   26168:	2a10      	cmp	r2, #16
   2616a:	d01d      	beq.n	261a8 <bt_uuid_create+0x46>
   2616c:	2a02      	cmp	r2, #2
   2616e:	d001      	beq.n	26174 <bt_uuid_create+0x12>
   26170:	2000      	movs	r0, #0
		break;
	default:
		return false;
	}
	return true;
}
   26172:	bd08      	pop	{r3, pc}
		uuid->type = BT_UUID_TYPE_16;
   26174:	2300      	movs	r3, #0
   26176:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   26178:	784a      	ldrb	r2, [r1, #1]
   2617a:	780b      	ldrb	r3, [r1, #0]
   2617c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   26180:	8043      	strh	r3, [r0, #2]
	return true;
   26182:	2001      	movs	r0, #1
		break;
   26184:	e7f5      	b.n	26172 <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_32;
   26186:	2301      	movs	r3, #1
   26188:	7003      	strb	r3, [r0, #0]
   2618a:	78ca      	ldrb	r2, [r1, #3]
   2618c:	f891 c002 	ldrb.w	ip, [r1, #2]
   26190:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
   26194:	f891 e001 	ldrb.w	lr, [r1, #1]
   26198:	780a      	ldrb	r2, [r1, #0]
   2619a:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2619e:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   261a2:	6042      	str	r2, [r0, #4]
	return true;
   261a4:	4618      	mov	r0, r3
		break;
   261a6:	e7e4      	b.n	26172 <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_128;
   261a8:	2302      	movs	r3, #2
   261aa:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   261ae:	2210      	movs	r2, #16
   261b0:	f7ff ff39 	bl	26026 <memcpy>
	return true;
   261b4:	2001      	movs	r0, #1
		break;
   261b6:	e7dc      	b.n	26172 <bt_uuid_create+0x10>

000261b8 <bt_addr_le_create_static>:
{
   261b8:	b510      	push	{r4, lr}
   261ba:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   261bc:	2301      	movs	r3, #1
   261be:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   261c2:	2106      	movs	r1, #6
   261c4:	f7fa fc92 	bl	20aec <bt_rand>
	if (err) {
   261c8:	b918      	cbnz	r0, 261d2 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   261ca:	79a3      	ldrb	r3, [r4, #6]
   261cc:	f063 033f 	orn	r3, r3, #63	; 0x3f
   261d0:	71a3      	strb	r3, [r4, #6]
}
   261d2:	bd10      	pop	{r4, pc}

000261d4 <sys_put_le64>:
	dst[0] = val;
   261d4:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   261d6:	f3c0 2307 	ubfx	r3, r0, #8, #8
   261da:	7053      	strb	r3, [r2, #1]
	sys_put_le16(val >> 16, &dst[2]);
   261dc:	0c03      	lsrs	r3, r0, #16
	dst[0] = val;
   261de:	7093      	strb	r3, [r2, #2]
	dst[1] = val >> 8;
   261e0:	0e00      	lsrs	r0, r0, #24
   261e2:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   261e4:	7111      	strb	r1, [r2, #4]
	dst[1] = val >> 8;
   261e6:	f3c1 2307 	ubfx	r3, r1, #8, #8
   261ea:	7153      	strb	r3, [r2, #5]
	sys_put_le16(val >> 16, &dst[2]);
   261ec:	0c0b      	lsrs	r3, r1, #16
	dst[0] = val;
   261ee:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   261f0:	0e09      	lsrs	r1, r1, #24
   261f2:	71d1      	strb	r1, [r2, #7]
}
   261f4:	4770      	bx	lr

000261f6 <sys_get_le64>:
{
   261f6:	b500      	push	{lr}
	return ((uint16_t)src[1] << 8) | src[0];
   261f8:	79c3      	ldrb	r3, [r0, #7]
   261fa:	7981      	ldrb	r1, [r0, #6]
   261fc:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   26200:	7942      	ldrb	r2, [r0, #5]
   26202:	7903      	ldrb	r3, [r0, #4]
   26204:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   26208:	78c2      	ldrb	r2, [r0, #3]
   2620a:	f890 c002 	ldrb.w	ip, [r0, #2]
   2620e:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
   26212:	f890 e001 	ldrb.w	lr, [r0, #1]
   26216:	7802      	ldrb	r2, [r0, #0]
   26218:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
}
   2621c:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
   26220:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   26224:	f85d fb04 	ldr.w	pc, [sp], #4

00026228 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   26228:	3805      	subs	r0, #5
   2622a:	2815      	cmp	r0, #21
   2622c:	d80e      	bhi.n	2624c <bt_hci_evt_get_flags+0x24>
   2622e:	e8df f000 	tbb	[pc, r0]
   26232:	0d0b      	.short	0x0d0b
   26234:	0d0d0d0d 	.word	0x0d0d0d0d
   26238:	0f0d0d0d 	.word	0x0f0d0d0d
   2623c:	0d0d0d0f 	.word	0x0d0d0d0f
   26240:	0d0d0d0f 	.word	0x0d0d0d0f
   26244:	0f0d0d0d 	.word	0x0f0d0d0d
   26248:	2003      	movs	r0, #3
   2624a:	4770      	bx	lr
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   2624c:	2002      	movs	r0, #2
   2624e:	4770      	bx	lr
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   26250:	2001      	movs	r0, #1
	}
}
   26252:	4770      	bx	lr

00026254 <skip_auto_phy_update_on_conn_establishment>:
}
   26254:	2000      	movs	r0, #0
   26256:	4770      	bx	lr

00026258 <hci_vendor_event>:
}
   26258:	4770      	bx	lr

0002625a <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2625a:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2625c:	f3bf 8f5b 	dmb	ish
   26260:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   26264:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   26268:	f001 011f 	and.w	r1, r1, #31
   2626c:	4108      	asrs	r0, r1
}
   2626e:	f000 0001 	and.w	r0, r0, #1
   26272:	4770      	bx	lr

00026274 <hci_disconn_complete_prio>:
{
   26274:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   26276:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   26278:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   2627c:	781b      	ldrb	r3, [r3, #0]
   2627e:	b103      	cbz	r3, 26282 <hci_disconn_complete_prio+0xe>
}
   26280:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
   26282:	4620      	mov	r0, r4
   26284:	f7f3 fe4a 	bl	19f1c <bt_conn_lookup_handle>
	if (!conn) {
   26288:	4605      	mov	r5, r0
   2628a:	b130      	cbz	r0, 2629a <hci_disconn_complete_prio+0x26>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   2628c:	2101      	movs	r1, #1
   2628e:	f7f3 fe4f 	bl	19f30 <bt_conn_set_state>
	bt_conn_unref(conn);
   26292:	4628      	mov	r0, r5
   26294:	f000 fb09 	bl	268aa <bt_conn_unref>
   26298:	e7f2      	b.n	26280 <hci_disconn_complete_prio+0xc>
		conn_handle_disconnected(handle);
   2629a:	4620      	mov	r0, r4
   2629c:	f7f0 f896 	bl	163cc <conn_handle_disconnected>
		return;
   262a0:	e7ee      	b.n	26280 <hci_disconn_complete_prio+0xc>

000262a2 <atomic_set_bit_to>:
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   262a2:	f001 0c1f 	and.w	ip, r1, #31
   262a6:	2301      	movs	r3, #1
   262a8:	fa03 f30c 	lsl.w	r3, r3, ip

	if (val) {
   262ac:	b172      	cbz	r2, 262cc <atomic_set_bit_to+0x2a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   262ae:	0949      	lsrs	r1, r1, #5
   262b0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   262b4:	f3bf 8f5b 	dmb	ish
   262b8:	e850 2f00 	ldrex	r2, [r0]
   262bc:	431a      	orrs	r2, r3
   262be:	e840 2100 	strex	r1, r2, [r0]
   262c2:	2900      	cmp	r1, #0
   262c4:	d1f8      	bne.n	262b8 <atomic_set_bit_to+0x16>
   262c6:	f3bf 8f5b 	dmb	ish
   262ca:	4770      	bx	lr
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   262cc:	0949      	lsrs	r1, r1, #5
   262ce:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   262d2:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   262d4:	f3bf 8f5b 	dmb	ish
   262d8:	e850 2f00 	ldrex	r2, [r0]
   262dc:	401a      	ands	r2, r3
   262de:	e840 2100 	strex	r1, r2, [r0]
   262e2:	2900      	cmp	r1, #0
   262e4:	d1f8      	bne.n	262d8 <atomic_set_bit_to+0x36>
   262e6:	f3bf 8f5b 	dmb	ish
	}
}
   262ea:	4770      	bx	lr

000262ec <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   262ec:	f001 021f 	and.w	r2, r1, #31
   262f0:	2301      	movs	r3, #1
   262f2:	4093      	lsls	r3, r2
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   262f4:	0949      	lsrs	r1, r1, #5
   262f6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   262fa:	f3bf 8f5b 	dmb	ish
   262fe:	e850 2f00 	ldrex	r2, [r0]
   26302:	ea42 0103 	orr.w	r1, r2, r3
   26306:	e840 1c00 	strex	ip, r1, [r0]
   2630a:	f1bc 0f00 	cmp.w	ip, #0
   2630e:	d1f6      	bne.n	262fe <atomic_test_and_set_bit+0x12>
   26310:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   26314:	4213      	tst	r3, r2
}
   26316:	bf14      	ite	ne
   26318:	2001      	movne	r0, #1
   2631a:	2000      	moveq	r0, #0
   2631c:	4770      	bx	lr

0002631e <hci_le_read_remote_features>:
{
   2631e:	b538      	push	{r3, r4, r5, lr}
   26320:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   26322:	2102      	movs	r1, #2
   26324:	f242 0016 	movw	r0, #8214	; 0x2016
   26328:	f7f1 f8a2 	bl	17470 <bt_hci_cmd_create>
	if (!buf) {
   2632c:	b168      	cbz	r0, 2634a <hci_le_read_remote_features+0x2c>
   2632e:	4605      	mov	r5, r0
   26330:	2102      	movs	r1, #2
   26332:	300c      	adds	r0, #12
   26334:	f002 f831 	bl	2839a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   26338:	8823      	ldrh	r3, [r4, #0]
   2633a:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   2633c:	2200      	movs	r2, #0
   2633e:	4629      	mov	r1, r5
   26340:	f242 0016 	movw	r0, #8214	; 0x2016
   26344:	f7f1 f8d2 	bl	174ec <bt_hci_cmd_send_sync>
}
   26348:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   2634a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2634e:	e7fb      	b.n	26348 <hci_le_read_remote_features+0x2a>

00026350 <bt_le_create_conn>:
{
   26350:	b508      	push	{r3, lr}
	return bt_le_create_conn_legacy(conn);
   26352:	f7f1 fc47 	bl	17be4 <bt_le_create_conn_legacy>
}
   26356:	bd08      	pop	{r3, pc}

00026358 <bt_hci_disconnect>:
{
   26358:	b570      	push	{r4, r5, r6, lr}
   2635a:	4605      	mov	r5, r0
   2635c:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2635e:	2103      	movs	r1, #3
   26360:	f240 4006 	movw	r0, #1030	; 0x406
   26364:	f7f1 f884 	bl	17470 <bt_hci_cmd_create>
	if (!buf) {
   26368:	b168      	cbz	r0, 26386 <bt_hci_disconnect+0x2e>
   2636a:	4606      	mov	r6, r0
   2636c:	2103      	movs	r1, #3
   2636e:	300c      	adds	r0, #12
   26370:	f002 f813 	bl	2839a <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   26374:	8005      	strh	r5, [r0, #0]
	disconn->reason = reason;
   26376:	7084      	strb	r4, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   26378:	2200      	movs	r2, #0
   2637a:	4631      	mov	r1, r6
   2637c:	f240 4006 	movw	r0, #1030	; 0x406
   26380:	f7f1 f8b4 	bl	174ec <bt_hci_cmd_send_sync>
}
   26384:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   26386:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2638a:	e7fb      	b.n	26384 <bt_hci_disconnect+0x2c>

0002638c <bt_le_set_data_len>:
{
   2638c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2638e:	4606      	mov	r6, r0
   26390:	460f      	mov	r7, r1
   26392:	4614      	mov	r4, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   26394:	2106      	movs	r1, #6
   26396:	f242 0022 	movw	r0, #8226	; 0x2022
   2639a:	f7f1 f869 	bl	17470 <bt_hci_cmd_create>
	if (!buf) {
   2639e:	b178      	cbz	r0, 263c0 <bt_le_set_data_len+0x34>
   263a0:	4605      	mov	r5, r0
   263a2:	2106      	movs	r1, #6
   263a4:	300c      	adds	r0, #12
   263a6:	f001 fff8 	bl	2839a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   263aa:	8833      	ldrh	r3, [r6, #0]
   263ac:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   263ae:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   263b0:	8084      	strh	r4, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   263b2:	2200      	movs	r2, #0
   263b4:	4629      	mov	r1, r5
   263b6:	f242 0022 	movw	r0, #8226	; 0x2022
   263ba:	f7f1 f897 	bl	174ec <bt_hci_cmd_send_sync>
}
   263be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   263c0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   263c4:	e7fb      	b.n	263be <bt_le_set_data_len+0x32>

000263c6 <bt_le_set_phy>:
{
   263c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   263ca:	4607      	mov	r7, r0
   263cc:	460e      	mov	r6, r1
   263ce:	4615      	mov	r5, r2
   263d0:	461c      	mov	r4, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   263d2:	2107      	movs	r1, #7
   263d4:	f242 0032 	movw	r0, #8242	; 0x2032
   263d8:	f7f1 f84a 	bl	17470 <bt_hci_cmd_create>
	if (!buf) {
   263dc:	b1a8      	cbz	r0, 2640a <bt_le_set_phy+0x44>
   263de:	4680      	mov	r8, r0
   263e0:	2107      	movs	r1, #7
   263e2:	300c      	adds	r0, #12
   263e4:	f001 ffd9 	bl	2839a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   263e8:	883b      	ldrh	r3, [r7, #0]
   263ea:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   263ec:	7086      	strb	r6, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   263ee:	70c5      	strb	r5, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   263f0:	7104      	strb	r4, [r0, #4]
	cp->phy_opts = phy_opts;
   263f2:	f89d 3018 	ldrb.w	r3, [sp, #24]
   263f6:	f8a0 3005 	strh.w	r3, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   263fa:	2200      	movs	r2, #0
   263fc:	4641      	mov	r1, r8
   263fe:	f242 0032 	movw	r0, #8242	; 0x2032
   26402:	f7f1 f873 	bl	174ec <bt_hci_cmd_send_sync>
}
   26406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   2640a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2640e:	e7fa      	b.n	26406 <bt_le_set_phy+0x40>

00026410 <enh_conn_complete>:
{
   26410:	b508      	push	{r3, lr}
	bt_hci_le_enh_conn_complete(evt);
   26412:	f7f1 fdef 	bl	17ff4 <bt_hci_le_enh_conn_complete>
}
   26416:	bd08      	pop	{r3, pc}

00026418 <le_enh_conn_complete>:
{
   26418:	b508      	push	{r3, lr}
	enh_conn_complete((void *)buf->data);
   2641a:	68c0      	ldr	r0, [r0, #12]
   2641c:	f7ff fff8 	bl	26410 <enh_conn_complete>
}
   26420:	bd08      	pop	{r3, pc}

00026422 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   26422:	8802      	ldrh	r2, [r0, #0]
   26424:	8843      	ldrh	r3, [r0, #2]
   26426:	429a      	cmp	r2, r3
   26428:	d817      	bhi.n	2645a <bt_le_conn_params_valid+0x38>
   2642a:	2a05      	cmp	r2, #5
   2642c:	d917      	bls.n	2645e <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2642e:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   26432:	d816      	bhi.n	26462 <bt_le_conn_params_valid+0x40>
	if (param->latency > 499) {
   26434:	8881      	ldrh	r1, [r0, #4]
   26436:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
   2643a:	d214      	bcs.n	26466 <bt_le_conn_params_valid+0x44>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2643c:	88c0      	ldrh	r0, [r0, #6]
   2643e:	f1a0 020a 	sub.w	r2, r0, #10
   26442:	b292      	uxth	r2, r2
   26444:	f640 4c76 	movw	ip, #3190	; 0xc76
   26448:	4562      	cmp	r2, ip
   2644a:	d80e      	bhi.n	2646a <bt_le_conn_params_valid+0x48>
	     ((1U + param->latency) * param->interval_max))) {
   2644c:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   26450:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   26454:	d20b      	bcs.n	2646e <bt_le_conn_params_valid+0x4c>
	return true;
   26456:	2001      	movs	r0, #1
   26458:	4770      	bx	lr
		return false;
   2645a:	2000      	movs	r0, #0
   2645c:	4770      	bx	lr
   2645e:	2000      	movs	r0, #0
   26460:	4770      	bx	lr
   26462:	2000      	movs	r0, #0
   26464:	4770      	bx	lr
		return false;
   26466:	2000      	movs	r0, #0
   26468:	4770      	bx	lr
		return false;
   2646a:	2000      	movs	r0, #0
   2646c:	4770      	bx	lr
   2646e:	2000      	movs	r0, #0
}
   26470:	4770      	bx	lr

00026472 <le_conn_param_req_reply>:
{
   26472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26474:	4606      	mov	r6, r0
   26476:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   26478:	210e      	movs	r1, #14
   2647a:	f242 0020 	movw	r0, #8224	; 0x2020
   2647e:	f7f0 fff7 	bl	17470 <bt_hci_cmd_create>
	if (!buf) {
   26482:	b1c0      	cbz	r0, 264b6 <le_conn_param_req_reply+0x44>
   26484:	4607      	mov	r7, r0
   26486:	210e      	movs	r1, #14
   26488:	300c      	adds	r0, #12
   2648a:	f001 ff86 	bl	2839a <net_buf_simple_add>
   2648e:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   26490:	220e      	movs	r2, #14
   26492:	2100      	movs	r1, #0
   26494:	f7ff fdf6 	bl	26084 <memset>
	cp->handle = sys_cpu_to_le16(handle);
   26498:	8026      	strh	r6, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   2649a:	882b      	ldrh	r3, [r5, #0]
   2649c:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   2649e:	886b      	ldrh	r3, [r5, #2]
   264a0:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   264a2:	88ab      	ldrh	r3, [r5, #4]
   264a4:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   264a6:	88eb      	ldrh	r3, [r5, #6]
   264a8:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   264aa:	4639      	mov	r1, r7
   264ac:	f242 0020 	movw	r0, #8224	; 0x2020
   264b0:	f7f1 ff2a 	bl	18308 <bt_hci_cmd_send>
}
   264b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   264b6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   264ba:	e7fb      	b.n	264b4 <le_conn_param_req_reply+0x42>

000264bc <bt_init>:
{
   264bc:	b510      	push	{r4, lr}
	err = hci_init();
   264be:	f7f1 fb39 	bl	17b34 <hci_init>
	if (err) {
   264c2:	4604      	mov	r4, r0
   264c4:	b108      	cbz	r0, 264ca <bt_init+0xe>
}
   264c6:	4620      	mov	r0, r4
   264c8:	bd10      	pop	{r4, pc}
		err = bt_conn_init();
   264ca:	f7f4 fa35 	bl	1a938 <bt_conn_init>
		if (err) {
   264ce:	4604      	mov	r4, r0
   264d0:	2800      	cmp	r0, #0
   264d2:	d1f8      	bne.n	264c6 <bt_init+0xa>
	bt_finalize_init();
   264d4:	f7f2 fa66 	bl	189a4 <bt_finalize_init>
	return 0;
   264d8:	e7f5      	b.n	264c6 <bt_init+0xa>

000264da <bt_get_appearance>:
}
   264da:	2000      	movs	r0, #0
   264dc:	4770      	bx	lr

000264de <bt_addr_le_is_bonded>:
}
   264de:	2000      	movs	r0, #0
   264e0:	4770      	bx	lr

000264e2 <is_adv_using_rand_addr>:
}
   264e2:	2000      	movs	r0, #0
   264e4:	4770      	bx	lr

000264e6 <bt_lookup_id_addr>:
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   264e6:	b910      	cbnz	r0, 264ee <bt_lookup_id_addr+0x8>
   264e8:	b119      	cbz	r1, 264f2 <bt_lookup_id_addr+0xc>
	return addr;
   264ea:	4608      	mov	r0, r1
   264ec:	4770      	bx	lr
		return NULL;
   264ee:	2000      	movs	r0, #0
   264f0:	4770      	bx	lr
   264f2:	2000      	movs	r0, #0
}
   264f4:	4770      	bx	lr

000264f6 <bt_id_set_private_addr>:
	CHECKIF(id >= CONFIG_BT_ID_MAX) {
   264f6:	b998      	cbnz	r0, 26520 <bt_id_set_private_addr+0x2a>
{
   264f8:	b500      	push	{lr}
   264fa:	b083      	sub	sp, #12
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   264fc:	2106      	movs	r1, #6
   264fe:	4668      	mov	r0, sp
   26500:	f7fa faf4 	bl	20aec <bt_rand>
	if (err) {
   26504:	b110      	cbz	r0, 2650c <bt_id_set_private_addr+0x16>
}
   26506:	b003      	add	sp, #12
   26508:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ADDR_SET_NRPA(&nrpa);
   2650c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   26510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   26514:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   26518:	4668      	mov	r0, sp
   2651a:	f7f2 fbdd 	bl	18cd8 <set_random_address>
	if (err)  {
   2651e:	e7f2      	b.n	26506 <bt_id_set_private_addr+0x10>
		return -EINVAL;
   26520:	f06f 0015 	mvn.w	r0, #21
}
   26524:	4770      	bx	lr

00026526 <bt_id_scan_random_addr_check>:
}
   26526:	2001      	movs	r0, #1
   26528:	4770      	bx	lr

0002652a <get_adv_props_legacy>:
	switch (evt_type) {
   2652a:	2804      	cmp	r0, #4
   2652c:	d80a      	bhi.n	26544 <get_adv_props_legacy+0x1a>
   2652e:	e8df f000 	tbb	[pc, r0]
   26532:	0b03      	.short	0x0b03
   26534:	050c      	.short	0x050c
   26536:	07          	.byte	0x07
   26537:	00          	.byte	0x00
   26538:	2003      	movs	r0, #3
   2653a:	4770      	bx	lr
		return 0;
   2653c:	2000      	movs	r0, #0
   2653e:	4770      	bx	lr
		return BT_GAP_ADV_PROP_SCAN_RESPONSE |
   26540:	200a      	movs	r0, #10
   26542:	4770      	bx	lr
		return 0;
   26544:	2000      	movs	r0, #0
   26546:	4770      	bx	lr
		return BT_GAP_ADV_PROP_CONNECTABLE |
   26548:	2005      	movs	r0, #5
}
   2654a:	4770      	bx	lr

0002654c <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2654c:	f001 0c1f 	and.w	ip, r1, #31
   26550:	2301      	movs	r3, #1
   26552:	fa03 f30c 	lsl.w	r3, r3, ip
	if (val) {
   26556:	b172      	cbz	r2, 26576 <atomic_set_bit_to+0x2a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   26558:	0949      	lsrs	r1, r1, #5
   2655a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2655e:	f3bf 8f5b 	dmb	ish
   26562:	e850 2f00 	ldrex	r2, [r0]
   26566:	431a      	orrs	r2, r3
   26568:	e840 2100 	strex	r1, r2, [r0]
   2656c:	2900      	cmp	r1, #0
   2656e:	d1f8      	bne.n	26562 <atomic_set_bit_to+0x16>
   26570:	f3bf 8f5b 	dmb	ish
   26574:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   26576:	0949      	lsrs	r1, r1, #5
   26578:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2657c:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2657e:	f3bf 8f5b 	dmb	ish
   26582:	e850 2f00 	ldrex	r2, [r0]
   26586:	401a      	ands	r2, r3
   26588:	e840 2100 	strex	r1, r2, [r0]
   2658c:	2900      	cmp	r1, #0
   2658e:	d1f8      	bne.n	26582 <atomic_set_bit_to+0x36>
   26590:	f3bf 8f5b 	dmb	ish
}
   26594:	4770      	bx	lr

00026596 <bt_le_scan_set_enable>:
{
   26596:	b508      	push	{r3, lr}
	return bt_le_scan_set_enable_legacy(enable);
   26598:	f7f2 fec4 	bl	19324 <bt_le_scan_set_enable_legacy>
}
   2659c:	bd08      	pop	{r3, pc}

0002659e <start_passive_scan>:
{
   2659e:	b508      	push	{r3, lr}
	if (fast_scan) {
   265a0:	b128      	cbz	r0, 265ae <start_passive_scan+0x10>
		window = BT_GAP_SCAN_FAST_WINDOW;
   265a2:	2230      	movs	r2, #48	; 0x30
		interval = BT_GAP_SCAN_FAST_INTERVAL;
   265a4:	2160      	movs	r1, #96	; 0x60
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   265a6:	2000      	movs	r0, #0
   265a8:	f7f2 fef8 	bl	1939c <start_le_scan_legacy>
}
   265ac:	bd08      	pop	{r3, pc}
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
   265ae:	2212      	movs	r2, #18
		interval = CONFIG_BT_BACKGROUND_SCAN_INTERVAL;
   265b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
   265b4:	e7f7      	b.n	265a6 <start_passive_scan+0x8>

000265b6 <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   265b6:	460b      	mov	r3, r1
   265b8:	b139      	cbz	r1, 265ca <sys_slist_remove+0x14>
	return node->next;
   265ba:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   265bc:	6019      	str	r1, [r3, #0]
	return list->tail;
   265be:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   265c0:	428a      	cmp	r2, r1
   265c2:	d009      	beq.n	265d8 <sys_slist_remove+0x22>
	parent->next = child;
   265c4:	2300      	movs	r3, #0
   265c6:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   265c8:	4770      	bx	lr
	return node->next;
   265ca:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   265cc:	6003      	str	r3, [r0, #0]
	return list->tail;
   265ce:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   265d0:	428a      	cmp	r2, r1
   265d2:	d1f7      	bne.n	265c4 <sys_slist_remove+0xe>
	list->tail = node;
   265d4:	6043      	str	r3, [r0, #4]
}
   265d6:	e7f5      	b.n	265c4 <sys_slist_remove+0xe>
	list->tail = node;
   265d8:	6043      	str	r3, [r0, #4]
}
   265da:	e7f3      	b.n	265c4 <sys_slist_remove+0xe>

000265dc <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   265dc:	b508      	push	{r3, lr}
   265de:	460a      	mov	r2, r1
	return list->head;
   265e0:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   265e2:	2100      	movs	r1, #0
   265e4:	e001      	b.n	265ea <sys_slist_find_and_remove+0xe>
   265e6:	4619      	mov	r1, r3
   265e8:	681b      	ldr	r3, [r3, #0]
   265ea:	b12b      	cbz	r3, 265f8 <sys_slist_find_and_remove+0x1c>
   265ec:	4293      	cmp	r3, r2
   265ee:	d1fa      	bne.n	265e6 <sys_slist_find_and_remove+0xa>
   265f0:	f7ff ffe1 	bl	265b6 <sys_slist_remove>
   265f4:	2001      	movs	r0, #1
   265f6:	e000      	b.n	265fa <sys_slist_find_and_remove+0x1e>
   265f8:	2000      	movs	r0, #0
   265fa:	bd08      	pop	{r3, pc}

000265fc <bt_conn_set_param_le>:
	conn->le.interval_min = param->interval_min;
   265fc:	880b      	ldrh	r3, [r1, #0]
   265fe:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   26602:	884b      	ldrh	r3, [r1, #2]
   26604:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
   26608:	888b      	ldrh	r3, [r1, #4]
   2660a:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   2660e:	88cb      	ldrh	r3, [r1, #6]
   26610:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
}
   26614:	4770      	bx	lr

00026616 <tx_notify>:
{
   26616:	b570      	push	{r4, r5, r6, lr}
   26618:	4604      	mov	r4, r0
	LOG_DBG("conn %p", conn);
   2661a:	e00c      	b.n	26636 <tx_notify+0x20>
   2661c:	f383 8811 	msr	BASEPRI, r3
   26620:	f3bf 8f6f 	isb	sy
		if (!tx) {
   26624:	b1c8      	cbz	r0, 2665a <tx_notify+0x44>
		cb = tx->cb;
   26626:	6845      	ldr	r5, [r0, #4]
		user_data = tx->user_data;
   26628:	6886      	ldr	r6, [r0, #8]
		tx_free(tx);
   2662a:	f7f3 f92b 	bl	19884 <tx_free>
		cb(conn, user_data, 0);
   2662e:	2200      	movs	r2, #0
   26630:	4631      	mov	r1, r6
   26632:	4620      	mov	r0, r4
   26634:	47a8      	blx	r5
	__asm__ volatile(
   26636:	f04f 0240 	mov.w	r2, #64	; 0x40
   2663a:	f3ef 8311 	mrs	r3, BASEPRI
   2663e:	f382 8812 	msr	BASEPRI_MAX, r2
   26642:	f3bf 8f6f 	isb	sy
	return list->head;
   26646:	6a20      	ldr	r0, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   26648:	2800      	cmp	r0, #0
   2664a:	d0e7      	beq.n	2661c <tx_notify+0x6>
	return node->next;
   2664c:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2664e:	6222      	str	r2, [r4, #32]
	return list->tail;
   26650:	6a61      	ldr	r1, [r4, #36]	; 0x24
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   26652:	4281      	cmp	r1, r0
   26654:	d1e2      	bne.n	2661c <tx_notify+0x6>
	list->tail = node;
   26656:	6262      	str	r2, [r4, #36]	; 0x24
}
   26658:	e7e0      	b.n	2661c <tx_notify+0x6>
}
   2665a:	bd70      	pop	{r4, r5, r6, pc}

0002665c <tx_complete_work>:
{
   2665c:	b508      	push	{r3, lr}
	tx_notify(conn);
   2665e:	3828      	subs	r0, #40	; 0x28
   26660:	f7ff ffd9 	bl	26616 <tx_notify>
}
   26664:	bd08      	pop	{r3, pc}

00026666 <conn_tx_destroy>:
{
   26666:	b570      	push	{r4, r5, r6, lr}
   26668:	4604      	mov	r4, r0
   2666a:	4608      	mov	r0, r1
	bt_conn_tx_cb_t cb = tx->cb;
   2666c:	684d      	ldr	r5, [r1, #4]
	void *user_data = tx->user_data;
   2666e:	688e      	ldr	r6, [r1, #8]
	tx_free(tx);
   26670:	f7f3 f908 	bl	19884 <tx_free>
	cb(conn, user_data, -ESHUTDOWN);
   26674:	f06f 026d 	mvn.w	r2, #109	; 0x6d
   26678:	4631      	mov	r1, r6
   2667a:	4620      	mov	r0, r4
   2667c:	47a8      	blx	r5
}
   2667e:	bd70      	pop	{r4, r5, r6, pc}

00026680 <atomic_test_and_clear_bit>:
{
   26680:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   26682:	f001 021f 	and.w	r2, r1, #31
   26686:	2301      	movs	r3, #1
   26688:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2668a:	0949      	lsrs	r1, r1, #5
   2668c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   26690:	43d9      	mvns	r1, r3
   26692:	f3bf 8f5b 	dmb	ish
   26696:	e850 2f00 	ldrex	r2, [r0]
   2669a:	ea02 0c01 	and.w	ip, r2, r1
   2669e:	e840 ce00 	strex	lr, ip, [r0]
   266a2:	f1be 0f00 	cmp.w	lr, #0
   266a6:	d1f6      	bne.n	26696 <atomic_test_and_clear_bit+0x16>
   266a8:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   266ac:	4213      	tst	r3, r2
}
   266ae:	bf14      	ite	ne
   266b0:	2001      	movne	r0, #1
   266b2:	2000      	moveq	r0, #0
   266b4:	f85d fb04 	ldr.w	pc, [sp], #4

000266b8 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   266b8:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   266ba:	f3bf 8f5b 	dmb	ish
   266be:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   266c2:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   266c6:	f001 011f 	and.w	r1, r1, #31
   266ca:	4108      	asrs	r0, r1
}
   266cc:	f000 0001 	and.w	r0, r0, #1
   266d0:	4770      	bx	lr

000266d2 <send_acl>:
{
   266d2:	b570      	push	{r4, r5, r6, lr}
   266d4:	4605      	mov	r5, r0
   266d6:	460c      	mov	r4, r1
	switch (flags) {
   266d8:	2a03      	cmp	r2, #3
   266da:	d818      	bhi.n	2670e <send_acl+0x3c>
   266dc:	e8df f002 	tbb	[pc, r2]
   266e0:	15021502 	.word	0x15021502
   266e4:	2600      	movs	r6, #0
	return net_buf_simple_push(&buf->b, len);
   266e6:	2104      	movs	r1, #4
   266e8:	f104 000c 	add.w	r0, r4, #12
   266ec:	f001 fe66 	bl	283bc <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   266f0:	882b      	ldrh	r3, [r5, #0]
   266f2:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
   266f6:	8003      	strh	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   266f8:	8a23      	ldrh	r3, [r4, #16]
   266fa:	3b04      	subs	r3, #4
   266fc:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   266fe:	2302      	movs	r3, #2
   26700:	7623      	strb	r3, [r4, #24]
	return bt_send(buf);
   26702:	4620      	mov	r0, r4
   26704:	f7f1 fdf6 	bl	182f4 <bt_send>
}
   26708:	bd70      	pop	{r4, r5, r6, pc}
		flags = BT_ACL_CONT;
   2670a:	2601      	movs	r6, #1
   2670c:	e7eb      	b.n	266e6 <send_acl+0x14>
	switch (flags) {
   2670e:	f06f 0015 	mvn.w	r0, #21
   26712:	e7f9      	b.n	26708 <send_acl+0x36>

00026714 <process_unack_tx>:
{
   26714:	b510      	push	{r4, lr}
   26716:	4604      	mov	r4, r0
   26718:	e028      	b.n	2676c <process_unack_tx+0x58>
			conn->pending_no_cb--;
   2671a:	3a01      	subs	r2, #1
   2671c:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   2671e:	f383 8811 	msr	BASEPRI, r3
   26722:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   26726:	4620      	mov	r0, r4
   26728:	f7f3 f8d0 	bl	198cc <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   2672c:	f7fc fa22 	bl	22b74 <z_impl_k_sem_give>
			continue;
   26730:	e01c      	b.n	2676c <process_unack_tx+0x58>
   26732:	f383 8811 	msr	BASEPRI, r3
   26736:	f3bf 8f6f 	isb	sy
		if (!node) {
   2673a:	b361      	cbz	r1, 26796 <process_unack_tx+0x82>
	__asm__ volatile(
   2673c:	f04f 0240 	mov.w	r2, #64	; 0x40
   26740:	f3ef 8311 	mrs	r3, BASEPRI
   26744:	f382 8812 	msr	BASEPRI_MAX, r2
   26748:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   2674c:	68ca      	ldr	r2, [r1, #12]
   2674e:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   26750:	2200      	movs	r2, #0
   26752:	60ca      	str	r2, [r1, #12]
	__asm__ volatile(
   26754:	f383 8811 	msr	BASEPRI, r3
   26758:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   2675c:	4620      	mov	r0, r4
   2675e:	f7ff ff82 	bl	26666 <conn_tx_destroy>
		k_sem_give(bt_conn_get_pkts(conn));
   26762:	4620      	mov	r0, r4
   26764:	f7f3 f8b2 	bl	198cc <bt_conn_get_pkts>
   26768:	f7fc fa04 	bl	22b74 <z_impl_k_sem_give>
	__asm__ volatile(
   2676c:	f04f 0240 	mov.w	r2, #64	; 0x40
   26770:	f3ef 8311 	mrs	r3, BASEPRI
   26774:	f382 8812 	msr	BASEPRI_MAX, r2
   26778:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   2677c:	69e2      	ldr	r2, [r4, #28]
   2677e:	2a00      	cmp	r2, #0
   26780:	d1cb      	bne.n	2671a <process_unack_tx+0x6>
	return list->head;
   26782:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   26784:	2900      	cmp	r1, #0
   26786:	d0d4      	beq.n	26732 <process_unack_tx+0x1e>
	return node->next;
   26788:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   2678a:	6162      	str	r2, [r4, #20]
	return list->tail;
   2678c:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2678e:	4281      	cmp	r1, r0
   26790:	d1cf      	bne.n	26732 <process_unack_tx+0x1e>
	list->tail = node;
   26792:	61a2      	str	r2, [r4, #24]
}
   26794:	e7cd      	b.n	26732 <process_unack_tx+0x1e>
}
   26796:	bd10      	pop	{r4, pc}

00026798 <bt_conn_reset_rx_state>:
{
   26798:	b510      	push	{r4, lr}
   2679a:	4604      	mov	r4, r0
	if (!conn->rx) {
   2679c:	6900      	ldr	r0, [r0, #16]
   2679e:	b118      	cbz	r0, 267a8 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   267a0:	f001 fdb4 	bl	2830c <net_buf_unref>
	conn->rx = NULL;
   267a4:	2300      	movs	r3, #0
   267a6:	6123      	str	r3, [r4, #16]
}
   267a8:	bd10      	pop	{r4, pc}

000267aa <conn_cleanup>:
{
   267aa:	b538      	push	{r3, r4, r5, lr}
   267ac:	4605      	mov	r5, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   267ae:	2200      	movs	r2, #0
   267b0:	2300      	movs	r3, #0
   267b2:	f105 0038 	add.w	r0, r5, #56	; 0x38
   267b6:	f001 fd6f 	bl	28298 <net_buf_get>
   267ba:	4603      	mov	r3, r0
   267bc:	b160      	cbz	r0, 267d8 <conn_cleanup+0x2e>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   267be:	699c      	ldr	r4, [r3, #24]
		tx_data(buf)->tx = NULL;
   267c0:	2200      	movs	r2, #0
   267c2:	619a      	str	r2, [r3, #24]
		net_buf_unref(buf);
   267c4:	4618      	mov	r0, r3
   267c6:	f001 fda1 	bl	2830c <net_buf_unref>
		if (tx) {
   267ca:	2c00      	cmp	r4, #0
   267cc:	d0ef      	beq.n	267ae <conn_cleanup+0x4>
			conn_tx_destroy(conn, tx);
   267ce:	4621      	mov	r1, r4
   267d0:	4628      	mov	r0, r5
   267d2:	f7ff ff48 	bl	26666 <conn_tx_destroy>
   267d6:	e7ea      	b.n	267ae <conn_cleanup+0x4>
	bt_conn_reset_rx_state(conn);
   267d8:	4628      	mov	r0, r5
   267da:	f7ff ffdd 	bl	26798 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   267de:	2200      	movs	r2, #0
   267e0:	2300      	movs	r3, #0
   267e2:	f105 0058 	add.w	r0, r5, #88	; 0x58
   267e6:	f7fc fb95 	bl	22f14 <k_work_reschedule>
}
   267ea:	bd38      	pop	{r3, r4, r5, pc}

000267ec <conn_prepare_events>:
{
   267ec:	b538      	push	{r3, r4, r5, lr}
   267ee:	f3bf 8f5b 	dmb	ish
   267f2:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   267f6:	f3bf 8f5b 	dmb	ish
	if (!atomic_get(&conn->ref)) {
   267fa:	b1eb      	cbz	r3, 26838 <conn_prepare_events+0x4c>
   267fc:	4604      	mov	r4, r0
   267fe:	460d      	mov	r5, r1
	if (conn->state == BT_CONN_DISCONNECTED &&
   26800:	7a83      	ldrb	r3, [r0, #10]
   26802:	b16b      	cbz	r3, 26820 <conn_prepare_events+0x34>
	if (conn->state != BT_CONN_CONNECTED) {
   26804:	7aa3      	ldrb	r3, [r4, #10]
   26806:	2b07      	cmp	r3, #7
   26808:	d119      	bne.n	2683e <conn_prepare_events+0x52>
	k_poll_event_init(&events[0],
   2680a:	f104 0338 	add.w	r3, r4, #56	; 0x38
   2680e:	2200      	movs	r2, #0
   26810:	2104      	movs	r1, #4
   26812:	4628      	mov	r0, r5
   26814:	f004 fa9f 	bl	2ad56 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   26818:	2301      	movs	r3, #1
   2681a:	732b      	strb	r3, [r5, #12]
	return 0;
   2681c:	2000      	movs	r0, #0
}
   2681e:	bd38      	pop	{r3, r4, r5, pc}
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   26820:	2106      	movs	r1, #6
   26822:	3004      	adds	r0, #4
   26824:	f7ff ff2c 	bl	26680 <atomic_test_and_clear_bit>
	if (conn->state == BT_CONN_DISCONNECTED &&
   26828:	2800      	cmp	r0, #0
   2682a:	d0eb      	beq.n	26804 <conn_prepare_events+0x18>
		conn_cleanup(conn);
   2682c:	4620      	mov	r0, r4
   2682e:	f7ff ffbc 	bl	267aa <conn_cleanup>
		return -ENOTCONN;
   26832:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   26836:	e7f2      	b.n	2681e <conn_prepare_events+0x32>
		return -ENOTCONN;
   26838:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2683c:	e7ef      	b.n	2681e <conn_prepare_events+0x32>
		return -ENOTCONN;
   2683e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   26842:	e7ec      	b.n	2681e <conn_prepare_events+0x32>

00026844 <bt_conn_recv>:
{
   26844:	b570      	push	{r4, r5, r6, lr}
   26846:	4604      	mov	r4, r0
   26848:	460d      	mov	r5, r1
   2684a:	4616      	mov	r6, r2
	tx_notify(conn);
   2684c:	f7ff fee3 	bl	26616 <tx_notify>
		bt_acl_recv(conn, buf, flags);
   26850:	4632      	mov	r2, r6
   26852:	4629      	mov	r1, r5
   26854:	4620      	mov	r0, r4
   26856:	f7f3 f937 	bl	19ac8 <bt_acl_recv>
}
   2685a:	bd70      	pop	{r4, r5, r6, pc}

0002685c <bt_conn_ref>:
   2685c:	f3bf 8f5b 	dmb	ish
   26860:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   26864:	f3bf 8f5b 	dmb	ish
		if (!old) {
   26868:	b1eb      	cbz	r3, 268a6 <bt_conn_ref+0x4a>
{
   2686a:	b500      	push	{lr}
   2686c:	e006      	b.n	2687c <bt_conn_ref+0x20>
   2686e:	f3bf 8f5b 	dmb	ish
   26872:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   26876:	f3bf 8f5b 	dmb	ish
		if (!old) {
   2687a:	b193      	cbz	r3, 268a2 <bt_conn_ref+0x46>
   2687c:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	} while (!atomic_cas(&conn->ref, old, old + 1));
   26880:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   26882:	f3bf 8f5b 	dmb	ish
   26886:	e852 cf00 	ldrex	ip, [r2]
   2688a:	459c      	cmp	ip, r3
   2688c:	d104      	bne.n	26898 <bt_conn_ref+0x3c>
   2688e:	e842 1e00 	strex	lr, r1, [r2]
   26892:	f1be 0f00 	cmp.w	lr, #0
   26896:	d1f6      	bne.n	26886 <bt_conn_ref+0x2a>
   26898:	f3bf 8f5b 	dmb	ish
   2689c:	d1e7      	bne.n	2686e <bt_conn_ref+0x12>
}
   2689e:	f85d fb04 	ldr.w	pc, [sp], #4
			return NULL;
   268a2:	2000      	movs	r0, #0
   268a4:	e7fb      	b.n	2689e <bt_conn_ref+0x42>
   268a6:	2000      	movs	r0, #0
}
   268a8:	4770      	bx	lr

000268aa <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   268aa:	30b8      	adds	r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   268ac:	f3bf 8f5b 	dmb	ish
   268b0:	e850 3f00 	ldrex	r3, [r0]
   268b4:	3b01      	subs	r3, #1
   268b6:	e840 3200 	strex	r2, r3, [r0]
   268ba:	2a00      	cmp	r2, #0
   268bc:	d1f8      	bne.n	268b0 <bt_conn_unref+0x6>
   268be:	f3bf 8f5b 	dmb	ish
}
   268c2:	4770      	bx	lr

000268c4 <conn_lookup_handle>:
{
   268c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   268c6:	4606      	mov	r6, r0
   268c8:	460d      	mov	r5, r1
   268ca:	4617      	mov	r7, r2
	for (i = 0; i < size; i++) {
   268cc:	2400      	movs	r4, #0
   268ce:	e003      	b.n	268d8 <conn_lookup_handle+0x14>
			bt_conn_unref(conn);
   268d0:	4660      	mov	r0, ip
   268d2:	f7ff ffea 	bl	268aa <bt_conn_unref>
	for (i = 0; i < size; i++) {
   268d6:	3401      	adds	r4, #1
   268d8:	42ac      	cmp	r4, r5
   268da:	d21c      	bcs.n	26916 <conn_lookup_handle+0x52>
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   268dc:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   268e0:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   268e4:	f7ff ffba 	bl	2685c <bt_conn_ref>
		if (!conn) {
   268e8:	4684      	mov	ip, r0
   268ea:	2800      	cmp	r0, #0
   268ec:	d0f3      	beq.n	268d6 <conn_lookup_handle+0x12>
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   268ee:	7a83      	ldrb	r3, [r0, #10]
   268f0:	2b01      	cmp	r3, #1
   268f2:	d006      	beq.n	26902 <conn_lookup_handle+0x3e>
   268f4:	b25a      	sxtb	r2, r3
   268f6:	2a00      	cmp	r2, #0
   268f8:	d0ea      	beq.n	268d0 <conn_lookup_handle+0xc>
   268fa:	3b07      	subs	r3, #7
   268fc:	b2db      	uxtb	r3, r3
   268fe:	2b01      	cmp	r3, #1
   26900:	d8e6      	bhi.n	268d0 <conn_lookup_handle+0xc>
		if (conn->handle != handle) {
   26902:	f8bc 3000 	ldrh.w	r3, [ip]
   26906:	42bb      	cmp	r3, r7
   26908:	d101      	bne.n	2690e <conn_lookup_handle+0x4a>
}
   2690a:	4660      	mov	r0, ip
   2690c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   2690e:	4660      	mov	r0, ip
   26910:	f7ff ffcb 	bl	268aa <bt_conn_unref>
			continue;
   26914:	e7df      	b.n	268d6 <conn_lookup_handle+0x12>
	return NULL;
   26916:	f04f 0c00 	mov.w	ip, #0
   2691a:	e7f6      	b.n	2690a <conn_lookup_handle+0x46>

0002691c <bt_conn_connected>:
{
   2691c:	b510      	push	{r4, lr}
   2691e:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   26920:	f7f4 f91e 	bl	1ab60 <bt_l2cap_connected>
	notify_connected(conn);
   26924:	4620      	mov	r0, r4
   26926:	f7f2 ff4d 	bl	197c4 <notify_connected>
}
   2692a:	bd10      	pop	{r4, pc}

0002692c <bt_conn_get_security>:
}
   2692c:	2001      	movs	r0, #1
   2692e:	4770      	bx	lr

00026930 <bt_conn_add_le>:
{
   26930:	b570      	push	{r4, r5, r6, lr}
   26932:	4606      	mov	r6, r0
   26934:	460d      	mov	r5, r1
	struct bt_conn *conn = acl_conn_new();
   26936:	f7f3 f8bf 	bl	19ab8 <acl_conn_new>
	if (!conn) {
   2693a:	4604      	mov	r4, r0
   2693c:	b168      	cbz	r0, 2695a <bt_conn_add_le+0x2a>
	conn->id = id;
   2693e:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   26940:	2207      	movs	r2, #7
   26942:	4629      	mov	r1, r5
   26944:	3088      	adds	r0, #136	; 0x88
   26946:	f7ff fb6e 	bl	26026 <memcpy>
	conn->type = BT_CONN_TYPE_LE;
   2694a:	2301      	movs	r3, #1
   2694c:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   2694e:	2318      	movs	r3, #24
   26950:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
   26954:	2328      	movs	r3, #40	; 0x28
   26956:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
}
   2695a:	4620      	mov	r0, r4
   2695c:	bd70      	pop	{r4, r5, r6, pc}

0002695e <bt_conn_is_peer_addr_le>:
{
   2695e:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   26960:	7a03      	ldrb	r3, [r0, #8]
   26962:	428b      	cmp	r3, r1
   26964:	d001      	beq.n	2696a <bt_conn_is_peer_addr_le+0xc>
		return false;
   26966:	2000      	movs	r0, #0
}
   26968:	bd38      	pop	{r3, r4, r5, pc}
   2696a:	4604      	mov	r4, r0
   2696c:	4615      	mov	r5, r2
	return memcmp(a, b, sizeof(*a));
   2696e:	2207      	movs	r2, #7
   26970:	f100 0188 	add.w	r1, r0, #136	; 0x88
   26974:	4628      	mov	r0, r5
   26976:	f7ff fb44 	bl	26002 <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   2697a:	b1a8      	cbz	r0, 269a8 <bt_conn_is_peer_addr_le+0x4a>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2697c:	78e3      	ldrb	r3, [r4, #3]
   2697e:	b14b      	cbz	r3, 26994 <bt_conn_is_peer_addr_le+0x36>
   26980:	2207      	movs	r2, #7
   26982:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   26986:	4628      	mov	r0, r5
   26988:	f7ff fb3b 	bl	26002 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   2698c:	fab0 f080 	clz	r0, r0
   26990:	0940      	lsrs	r0, r0, #5
	return bt_addr_le_eq(peer, &conn->le.init_addr);
   26992:	e7e9      	b.n	26968 <bt_conn_is_peer_addr_le+0xa>
	return memcmp(a, b, sizeof(*a));
   26994:	2207      	movs	r2, #7
   26996:	f104 0196 	add.w	r1, r4, #150	; 0x96
   2699a:	4628      	mov	r0, r5
   2699c:	f7ff fb31 	bl	26002 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   269a0:	fab0 f080 	clz	r0, r0
   269a4:	0940      	lsrs	r0, r0, #5
		return bt_addr_le_eq(peer, &conn->le.resp_addr);
   269a6:	e7df      	b.n	26968 <bt_conn_is_peer_addr_le+0xa>
		return true;
   269a8:	2001      	movs	r0, #1
   269aa:	e7dd      	b.n	26968 <bt_conn_is_peer_addr_le+0xa>

000269ac <bt_conn_get_dst>:
}
   269ac:	3088      	adds	r0, #136	; 0x88
   269ae:	4770      	bx	lr

000269b0 <bt_conn_le_conn_update>:
{
   269b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   269b2:	4606      	mov	r6, r0
   269b4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   269b6:	210e      	movs	r1, #14
   269b8:	f242 0013 	movw	r0, #8211	; 0x2013
   269bc:	f7f0 fd58 	bl	17470 <bt_hci_cmd_create>
	if (!buf) {
   269c0:	b1d0      	cbz	r0, 269f8 <bt_conn_le_conn_update+0x48>
   269c2:	4607      	mov	r7, r0
	return net_buf_simple_add(&buf->b, len);
   269c4:	210e      	movs	r1, #14
   269c6:	300c      	adds	r0, #12
   269c8:	f001 fce7 	bl	2839a <net_buf_simple_add>
   269cc:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   269ce:	220e      	movs	r2, #14
   269d0:	2100      	movs	r1, #0
   269d2:	f7ff fb57 	bl	26084 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   269d6:	8833      	ldrh	r3, [r6, #0]
   269d8:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   269da:	882b      	ldrh	r3, [r5, #0]
   269dc:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   269de:	886b      	ldrh	r3, [r5, #2]
   269e0:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   269e2:	88ab      	ldrh	r3, [r5, #4]
   269e4:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   269e6:	88eb      	ldrh	r3, [r5, #6]
   269e8:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   269ea:	2200      	movs	r2, #0
   269ec:	4639      	mov	r1, r7
   269ee:	f242 0013 	movw	r0, #8211	; 0x2013
   269f2:	f7f0 fd7b 	bl	174ec <bt_hci_cmd_send_sync>
}
   269f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   269f8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   269fc:	e7fb      	b.n	269f6 <bt_conn_le_conn_update+0x46>

000269fe <l2cap_connected>:
}
   269fe:	4770      	bx	lr

00026a00 <l2cap_disconnected>:
}
   26a00:	4770      	bx	lr

00026a02 <l2cap_chan_recv>:
{
   26a02:	b510      	push	{r4, lr}
   26a04:	460c      	mov	r4, r1
	chan->ops->recv(chan, buf);
   26a06:	6843      	ldr	r3, [r0, #4]
   26a08:	695b      	ldr	r3, [r3, #20]
   26a0a:	4798      	blx	r3
	net_buf_unref(buf);
   26a0c:	4620      	mov	r0, r4
   26a0e:	f001 fc7d 	bl	2830c <net_buf_unref>
}
   26a12:	bd10      	pop	{r4, pc}

00026a14 <bt_l2cap_chan_del>:
{
   26a14:	b538      	push	{r3, r4, r5, lr}
   26a16:	4604      	mov	r4, r0
	const struct bt_l2cap_chan_ops *ops = chan->ops;
   26a18:	6845      	ldr	r5, [r0, #4]
	if (!chan->conn) {
   26a1a:	6803      	ldr	r3, [r0, #0]
   26a1c:	b123      	cbz	r3, 26a28 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   26a1e:	686b      	ldr	r3, [r5, #4]
   26a20:	b103      	cbz	r3, 26a24 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   26a22:	4798      	blx	r3
	chan->conn = NULL;
   26a24:	2300      	movs	r3, #0
   26a26:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   26a28:	68e3      	ldr	r3, [r4, #12]
   26a2a:	b10b      	cbz	r3, 26a30 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   26a2c:	4620      	mov	r0, r4
   26a2e:	4798      	blx	r3
	if (ops->released) {
   26a30:	6a2b      	ldr	r3, [r5, #32]
   26a32:	b10b      	cbz	r3, 26a38 <bt_l2cap_chan_del+0x24>
		ops->released(chan);
   26a34:	4620      	mov	r0, r4
   26a36:	4798      	blx	r3
}
   26a38:	bd38      	pop	{r3, r4, r5, pc}

00026a3a <bt_l2cap_chan_add>:
{
   26a3a:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
   26a3c:	f101 0308 	add.w	r3, r1, #8
	parent->next = child;
   26a40:	2400      	movs	r4, #0
   26a42:	608c      	str	r4, [r1, #8]
	return list->tail;
   26a44:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_APPEND(slist, snode)
   26a46:	b12c      	cbz	r4, 26a54 <bt_l2cap_chan_add+0x1a>
	parent->next = child;
   26a48:	6023      	str	r3, [r4, #0]
	list->tail = node;
   26a4a:	6543      	str	r3, [r0, #84]	; 0x54
	chan->conn = conn;
   26a4c:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
   26a4e:	60ca      	str	r2, [r1, #12]
}
   26a50:	bc10      	pop	{r4}
   26a52:	4770      	bx	lr
   26a54:	6543      	str	r3, [r0, #84]	; 0x54
	list->head = node;
   26a56:	6503      	str	r3, [r0, #80]	; 0x50
}
   26a58:	e7f8      	b.n	26a4c <bt_l2cap_chan_add+0x12>

00026a5a <bt_l2cap_disconnected>:
{
   26a5a:	b510      	push	{r4, lr}
	return list->head;
   26a5c:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   26a5e:	b138      	cbz	r0, 26a70 <bt_l2cap_disconnected+0x16>
   26a60:	3808      	subs	r0, #8
Z_GENLIST_PEEK_NEXT(slist, snode)
   26a62:	f110 0408 	adds.w	r4, r0, #8
   26a66:	d008      	beq.n	26a7a <bt_l2cap_disconnected+0x20>
	return node->next;
   26a68:	6884      	ldr	r4, [r0, #8]
   26a6a:	b134      	cbz	r4, 26a7a <bt_l2cap_disconnected+0x20>
   26a6c:	3c08      	subs	r4, #8
   26a6e:	e004      	b.n	26a7a <bt_l2cap_disconnected+0x20>
   26a70:	4604      	mov	r4, r0
   26a72:	e002      	b.n	26a7a <bt_l2cap_disconnected+0x20>
   26a74:	4623      	mov	r3, r4
   26a76:	4620      	mov	r0, r4
   26a78:	461c      	mov	r4, r3
   26a7a:	b140      	cbz	r0, 26a8e <bt_l2cap_disconnected+0x34>
		bt_l2cap_chan_del(chan);
   26a7c:	f7ff ffca 	bl	26a14 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   26a80:	2c00      	cmp	r4, #0
   26a82:	d0f7      	beq.n	26a74 <bt_l2cap_disconnected+0x1a>
   26a84:	68a3      	ldr	r3, [r4, #8]
   26a86:	2b00      	cmp	r3, #0
   26a88:	d0f5      	beq.n	26a76 <bt_l2cap_disconnected+0x1c>
   26a8a:	3b08      	subs	r3, #8
   26a8c:	e7f3      	b.n	26a76 <bt_l2cap_disconnected+0x1c>
}
   26a8e:	bd10      	pop	{r4, pc}

00026a90 <bt_l2cap_create_pdu_timeout>:
{
   26a90:	b508      	push	{r3, lr}
	return bt_conn_create_pdu_timeout(pool,
   26a92:	3104      	adds	r1, #4
   26a94:	f7f3 fc00 	bl	1a298 <bt_conn_create_pdu_timeout>
}
   26a98:	bd08      	pop	{r3, pc}

00026a9a <bt_l2cap_send_cb>:
{
   26a9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26a9c:	4605      	mov	r5, r0
   26a9e:	460f      	mov	r7, r1
   26aa0:	4614      	mov	r4, r2
   26aa2:	461e      	mov	r6, r3
	return net_buf_simple_push(&buf->b, len);
   26aa4:	2104      	movs	r1, #4
   26aa6:	f102 000c 	add.w	r0, r2, #12
   26aaa:	f001 fc87 	bl	283bc <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   26aae:	8a23      	ldrh	r3, [r4, #16]
   26ab0:	3b04      	subs	r3, #4
   26ab2:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   26ab4:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   26ab6:	9b06      	ldr	r3, [sp, #24]
   26ab8:	4632      	mov	r2, r6
   26aba:	4621      	mov	r1, r4
   26abc:	4628      	mov	r0, r5
   26abe:	f7f3 f95d 	bl	19d7c <bt_conn_send_cb>
}
   26ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026ac4 <l2cap_send>:
{
   26ac4:	b510      	push	{r4, lr}
   26ac6:	b082      	sub	sp, #8
   26ac8:	4614      	mov	r4, r2
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   26aca:	2300      	movs	r3, #0
   26acc:	9300      	str	r3, [sp, #0]
   26ace:	f7ff ffe4 	bl	26a9a <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   26ad2:	b908      	cbnz	r0, 26ad8 <l2cap_send+0x14>
}
   26ad4:	b002      	add	sp, #8
   26ad6:	bd10      	pop	{r4, pc}
		net_buf_unref(buf);
   26ad8:	4620      	mov	r0, r4
   26ada:	f001 fc17 	bl	2830c <net_buf_unref>
}
   26ade:	e7f9      	b.n	26ad4 <l2cap_send+0x10>

00026ae0 <l2cap_send_reject>:
{
   26ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26ae4:	4606      	mov	r6, r0
   26ae6:	4690      	mov	r8, r2
   26ae8:	461c      	mov	r4, r3
   26aea:	f89d 7020 	ldrb.w	r7, [sp, #32]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   26aee:	1cbb      	adds	r3, r7, #2
   26af0:	460a      	mov	r2, r1
   26af2:	2101      	movs	r1, #1
   26af4:	2000      	movs	r0, #0
   26af6:	f7f4 f86d 	bl	1abd4 <l2cap_create_le_sig_pdu>
	if (!buf) {
   26afa:	b198      	cbz	r0, 26b24 <l2cap_send_reject+0x44>
   26afc:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   26afe:	f100 090c 	add.w	r9, r0, #12
   26b02:	2102      	movs	r1, #2
   26b04:	4648      	mov	r0, r9
   26b06:	f001 fc48 	bl	2839a <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   26b0a:	f8a0 8000 	strh.w	r8, [r0]
	if (data) {
   26b0e:	b124      	cbz	r4, 26b1a <l2cap_send_reject+0x3a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   26b10:	463a      	mov	r2, r7
   26b12:	4621      	mov	r1, r4
   26b14:	4648      	mov	r0, r9
   26b16:	f001 fc46 	bl	283a6 <net_buf_simple_add_mem>
	l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
   26b1a:	462a      	mov	r2, r5
   26b1c:	2105      	movs	r1, #5
   26b1e:	4630      	mov	r0, r6
   26b20:	f7ff ffd0 	bl	26ac4 <l2cap_send>
}
   26b24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00026b28 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   26b28:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   26b2a:	b110      	cbz	r0, 26b32 <bt_l2cap_le_lookup_rx_cid+0xa>
   26b2c:	3808      	subs	r0, #8
   26b2e:	e000      	b.n	26b32 <bt_l2cap_le_lookup_rx_cid+0xa>
   26b30:	4618      	mov	r0, r3
   26b32:	b150      	cbz	r0, 26b4a <bt_l2cap_le_lookup_rx_cid+0x22>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   26b34:	8a83      	ldrh	r3, [r0, #20]
   26b36:	428b      	cmp	r3, r1
   26b38:	d007      	beq.n	26b4a <bt_l2cap_le_lookup_rx_cid+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   26b3a:	f110 0308 	adds.w	r3, r0, #8
   26b3e:	d0f7      	beq.n	26b30 <bt_l2cap_le_lookup_rx_cid+0x8>
	return node->next;
   26b40:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   26b42:	2800      	cmp	r0, #0
   26b44:	d0f5      	beq.n	26b32 <bt_l2cap_le_lookup_rx_cid+0xa>
   26b46:	3808      	subs	r0, #8
   26b48:	e7f3      	b.n	26b32 <bt_l2cap_le_lookup_rx_cid+0xa>
}
   26b4a:	4770      	bx	lr

00026b4c <bt_l2cap_update_conn_param>:
{
   26b4c:	b570      	push	{r4, r5, r6, lr}
   26b4e:	b082      	sub	sp, #8
   26b50:	4605      	mov	r5, r0
   26b52:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   26b54:	f7f3 ff20 	bl	1a998 <get_ident>
   26b58:	4602      	mov	r2, r0
   26b5a:	2308      	movs	r3, #8
   26b5c:	2112      	movs	r1, #18
   26b5e:	2000      	movs	r0, #0
   26b60:	f7f4 f838 	bl	1abd4 <l2cap_create_le_sig_pdu>
	if (!buf) {
   26b64:	b1e0      	cbz	r0, 26ba0 <bt_l2cap_update_conn_param+0x54>
   26b66:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   26b68:	2108      	movs	r1, #8
   26b6a:	300c      	adds	r0, #12
   26b6c:	f001 fc15 	bl	2839a <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   26b70:	8823      	ldrh	r3, [r4, #0]
   26b72:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   26b74:	8863      	ldrh	r3, [r4, #2]
   26b76:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   26b78:	88a3      	ldrh	r3, [r4, #4]
   26b7a:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   26b7c:	88e3      	ldrh	r3, [r4, #6]
   26b7e:	80c3      	strh	r3, [r0, #6]
   26b80:	2300      	movs	r3, #0
   26b82:	9300      	str	r3, [sp, #0]
   26b84:	4632      	mov	r2, r6
   26b86:	2105      	movs	r1, #5
   26b88:	4628      	mov	r0, r5
   26b8a:	f7ff ff86 	bl	26a9a <bt_l2cap_send_cb>
	if (err) {
   26b8e:	4604      	mov	r4, r0
   26b90:	b910      	cbnz	r0, 26b98 <bt_l2cap_update_conn_param+0x4c>
}
   26b92:	4620      	mov	r0, r4
   26b94:	b002      	add	sp, #8
   26b96:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   26b98:	4630      	mov	r0, r6
   26b9a:	f001 fbb7 	bl	2830c <net_buf_unref>
		return err;
   26b9e:	e7f8      	b.n	26b92 <bt_l2cap_update_conn_param+0x46>
		return -ENOMEM;
   26ba0:	f06f 040b 	mvn.w	r4, #11
   26ba4:	e7f5      	b.n	26b92 <bt_l2cap_update_conn_param+0x46>

00026ba6 <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   26ba6:	4770      	bx	lr

00026ba8 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   26ba8:	460b      	mov	r3, r1
   26baa:	b139      	cbz	r1, 26bbc <sys_slist_remove+0x14>
	return node->next;
   26bac:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   26bae:	6019      	str	r1, [r3, #0]
	return list->tail;
   26bb0:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   26bb2:	428a      	cmp	r2, r1
   26bb4:	d009      	beq.n	26bca <sys_slist_remove+0x22>
	parent->next = child;
   26bb6:	2300      	movs	r3, #0
   26bb8:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   26bba:	4770      	bx	lr
	return node->next;
   26bbc:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   26bbe:	6003      	str	r3, [r0, #0]
	return list->tail;
   26bc0:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   26bc2:	428a      	cmp	r2, r1
   26bc4:	d1f7      	bne.n	26bb6 <sys_slist_remove+0xe>
	list->tail = node;
   26bc6:	6043      	str	r3, [r0, #4]
}
   26bc8:	e7f5      	b.n	26bb6 <sys_slist_remove+0xe>
	list->tail = node;
   26bca:	6043      	str	r3, [r0, #4]
}
   26bcc:	e7f3      	b.n	26bb6 <sys_slist_remove+0xe>

00026bce <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26bce:	b508      	push	{r3, lr}
   26bd0:	460a      	mov	r2, r1
	return list->head;
   26bd2:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26bd4:	2100      	movs	r1, #0
   26bd6:	e001      	b.n	26bdc <sys_slist_find_and_remove+0xe>
   26bd8:	4619      	mov	r1, r3
   26bda:	681b      	ldr	r3, [r3, #0]
   26bdc:	b12b      	cbz	r3, 26bea <sys_slist_find_and_remove+0x1c>
   26bde:	4293      	cmp	r3, r2
   26be0:	d1fa      	bne.n	26bd8 <sys_slist_find_and_remove+0xa>
   26be2:	f7ff ffe1 	bl	26ba8 <sys_slist_remove>
   26be6:	2001      	movs	r0, #1
   26be8:	e000      	b.n	26bec <sys_slist_find_and_remove+0x1e>
   26bea:	2000      	movs	r0, #0
   26bec:	bd08      	pop	{r3, pc}

00026bee <get_first_req_matching_chan>:
{
   26bee:	4603      	mov	r3, r0
	return list->head;
   26bf0:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   26bf2:	b120      	cbz	r0, 26bfe <get_first_req_matching_chan+0x10>
	return node->next;
   26bf4:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   26bf6:	601a      	str	r2, [r3, #0]
	return list->tail;
   26bf8:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   26bfa:	4288      	cmp	r0, r1
   26bfc:	d000      	beq.n	26c00 <get_first_req_matching_chan+0x12>
}
   26bfe:	4770      	bx	lr
	list->tail = node;
   26c00:	605a      	str	r2, [r3, #4]
		return ATT_REQ(node);
   26c02:	e7fc      	b.n	26bfe <get_first_req_matching_chan+0x10>

00026c04 <range_is_valid>:
	if (!start || !end) {
   26c04:	b120      	cbz	r0, 26c10 <range_is_valid+0xc>
   26c06:	b119      	cbz	r1, 26c10 <range_is_valid+0xc>
	if (start > end) {
   26c08:	4288      	cmp	r0, r1
   26c0a:	d806      	bhi.n	26c1a <range_is_valid+0x16>
	return true;
   26c0c:	2001      	movs	r0, #1
}
   26c0e:	4770      	bx	lr
		if (err) {
   26c10:	b10a      	cbz	r2, 26c16 <range_is_valid+0x12>
			*err = 0U;
   26c12:	2300      	movs	r3, #0
   26c14:	8013      	strh	r3, [r2, #0]
		return false;
   26c16:	2000      	movs	r0, #0
   26c18:	4770      	bx	lr
		if (err) {
   26c1a:	b102      	cbz	r2, 26c1e <range_is_valid+0x1a>
			*err = start;
   26c1c:	8010      	strh	r0, [r2, #0]
		return false;
   26c1e:	2000      	movs	r0, #0
   26c20:	4770      	bx	lr

00026c22 <err_to_att>:
	if (err < 0 && err >= -0xff) {
   26c22:	f110 0fff 	cmn.w	r0, #255	; 0xff
   26c26:	d201      	bcs.n	26c2c <err_to_att+0xa>
	return BT_ATT_ERR_UNLIKELY;
   26c28:	200e      	movs	r0, #14
}
   26c2a:	4770      	bx	lr
		return -err;
   26c2c:	4240      	negs	r0, r0
   26c2e:	b2c0      	uxtb	r0, r0
   26c30:	4770      	bx	lr

00026c32 <attr_read_type_cb>:
{
   26c32:	b410      	push	{r4}
	if (!data->rsp->len) {
   26c34:	68d4      	ldr	r4, [r2, #12]
   26c36:	7823      	ldrb	r3, [r4, #0]
   26c38:	b923      	cbnz	r3, 26c44 <attr_read_type_cb+0x12>
		data->rsp->len = read + sizeof(*data->item);
   26c3a:	3102      	adds	r1, #2
   26c3c:	7021      	strb	r1, [r4, #0]
	return true;
   26c3e:	2001      	movs	r0, #1
}
   26c40:	bc10      	pop	{r4}
   26c42:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   26c44:	3102      	adds	r1, #2
   26c46:	428b      	cmp	r3, r1
   26c48:	d005      	beq.n	26c56 <attr_read_type_cb+0x24>
		frag->len -= sizeof(*data->item);
   26c4a:	8a03      	ldrh	r3, [r0, #16]
   26c4c:	3b02      	subs	r3, #2
   26c4e:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   26c50:	2000      	movs	r0, #0
   26c52:	6110      	str	r0, [r2, #16]
		return false;
   26c54:	e7f4      	b.n	26c40 <attr_read_type_cb+0xe>
	return true;
   26c56:	2001      	movs	r0, #1
   26c58:	e7f2      	b.n	26c40 <attr_read_type_cb+0xe>

00026c5a <attr_read_group_cb>:
	if (!data->rsp->len) {
   26c5a:	68d0      	ldr	r0, [r2, #12]
   26c5c:	7803      	ldrb	r3, [r0, #0]
   26c5e:	b91b      	cbnz	r3, 26c68 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   26c60:	3104      	adds	r1, #4
   26c62:	7001      	strb	r1, [r0, #0]
	return true;
   26c64:	2001      	movs	r0, #1
   26c66:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   26c68:	3104      	adds	r1, #4
   26c6a:	428b      	cmp	r3, r1
   26c6c:	d006      	beq.n	26c7c <attr_read_group_cb+0x22>
		data->buf->len -= sizeof(*data->group);
   26c6e:	6891      	ldr	r1, [r2, #8]
   26c70:	8a0b      	ldrh	r3, [r1, #16]
   26c72:	3b04      	subs	r3, #4
   26c74:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   26c76:	2000      	movs	r0, #0
   26c78:	6110      	str	r0, [r2, #16]
		return false;
   26c7a:	4770      	bx	lr
	return true;
   26c7c:	2001      	movs	r0, #1
}
   26c7e:	4770      	bx	lr

00026c80 <att_prepare_write_req>:
}
   26c80:	2006      	movs	r0, #6
   26c82:	4770      	bx	lr

00026c84 <att_exec_write_req>:
}
   26c84:	2006      	movs	r0, #6
   26c86:	4770      	bx	lr

00026c88 <att_chan_attach>:
{
   26c88:	b538      	push	{r3, r4, r5, lr}
   26c8a:	4604      	mov	r4, r0
   26c8c:	460d      	mov	r5, r1
	return list->head;
   26c8e:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sys_slist_is_empty(&att->chans)) {
   26c90:	b143      	cbz	r3, 26ca4 <att_chan_attach+0x1c>
	sys_slist_prepend(&att->chans, &chan->node);
   26c92:	f105 03e0 	add.w	r3, r5, #224	; 0xe0
   26c96:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
   26c98:	f8c5 20e0 	str.w	r2, [r5, #224]	; 0xe0
	list->head = node;
   26c9c:	6263      	str	r3, [r4, #36]	; 0x24
	return list->tail;
   26c9e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   26ca0:	b122      	cbz	r2, 26cac <att_chan_attach+0x24>
}
   26ca2:	bd38      	pop	{r3, r4, r5, pc}
		k_fifo_init(&att->tx_queue);
   26ca4:	300c      	adds	r0, #12
	z_impl_k_queue_init(queue);
   26ca6:	f003 faa1 	bl	2a1ec <z_impl_k_queue_init>
}
   26caa:	e7f2      	b.n	26c92 <att_chan_attach+0xa>
	list->tail = node;
   26cac:	62a3      	str	r3, [r4, #40]	; 0x28
}
   26cae:	e7f8      	b.n	26ca2 <att_chan_attach+0x1a>

00026cb0 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   26cb0:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26cb2:	f3bf 8f5b 	dmb	ish
   26cb6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   26cba:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   26cbe:	f001 011f 	and.w	r1, r1, #31
   26cc2:	4108      	asrs	r0, r1
}
   26cc4:	f000 0001 	and.w	r0, r0, #1
   26cc8:	4770      	bx	lr

00026cca <chan_unknown>:
{
   26cca:	b508      	push	{r3, lr}
	tx_meta_data_free(user_data);
   26ccc:	4608      	mov	r0, r1
   26cce:	f7f4 fbfb 	bl	1b4c8 <tx_meta_data_free>
}
   26cd2:	bd08      	pop	{r3, pc}

00026cd4 <chan_tx_complete>:
{
   26cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26cd8:	4605      	mov	r5, r0
   26cda:	4608      	mov	r0, r1
   26cdc:	4614      	mov	r4, r2
	bt_gatt_complete_func_t func = data->func;
   26cde:	688e      	ldr	r6, [r1, #8]
	uint16_t attr_count = data->attr_count;
   26ce0:	888f      	ldrh	r7, [r1, #4]
	void *ud = data->user_data;
   26ce2:	f8d1 800c 	ldr.w	r8, [r1, #12]
	tx_meta_data_free(data);
   26ce6:	f7f4 fbef 	bl	1b4c8 <tx_meta_data_free>
	if (!err && func) {
   26cea:	b94c      	cbnz	r4, 26d00 <chan_tx_complete+0x2c>
   26cec:	b146      	cbz	r6, 26d00 <chan_tx_complete+0x2c>
		for (uint16_t i = 0; i < attr_count; i++) {
   26cee:	2400      	movs	r4, #0
   26cf0:	e004      	b.n	26cfc <chan_tx_complete+0x28>
			func(conn, ud);
   26cf2:	4641      	mov	r1, r8
   26cf4:	4628      	mov	r0, r5
   26cf6:	47b0      	blx	r6
		for (uint16_t i = 0; i < attr_count; i++) {
   26cf8:	3401      	adds	r4, #1
   26cfa:	b2a4      	uxth	r4, r4
   26cfc:	42a7      	cmp	r7, r4
   26cfe:	d8f8      	bhi.n	26cf2 <chan_tx_complete+0x1e>
}
   26d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026d04 <bt_att_chan_send>:
{
   26d04:	b508      	push	{r3, lr}
	return chan_send(chan, buf);
   26d06:	f7f4 fbed 	bl	1b4e4 <chan_send>
}
   26d0a:	bd08      	pop	{r3, pc}

00026d0c <chan_req_send>:
{
   26d0c:	b570      	push	{r4, r5, r6, lr}
   26d0e:	4605      	mov	r5, r0
   26d10:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   26d12:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   26d14:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   26d16:	2200      	movs	r2, #0
	while (buf) {
   26d18:	e003      	b.n	26d22 <chan_req_send+0x16>
		bytes += buf->len;
   26d1a:	f8b3 c010 	ldrh.w	ip, [r3, #16]
   26d1e:	4462      	add	r2, ip
		buf = buf->frags;
   26d20:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   26d22:	2b00      	cmp	r3, #0
   26d24:	d1f9      	bne.n	26d1a <chan_req_send+0xe>
   26d26:	4291      	cmp	r1, r2
   26d28:	d30d      	bcc.n	26d46 <chan_req_send+0x3a>
	chan->req = req;
   26d2a:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
	buf = req->buf;
   26d2e:	68a6      	ldr	r6, [r4, #8]
	req->buf = NULL;
   26d30:	60a3      	str	r3, [r4, #8]
	err = bt_att_chan_send(chan, buf);
   26d32:	4631      	mov	r1, r6
   26d34:	4628      	mov	r0, r5
   26d36:	f7ff ffe5 	bl	26d04 <bt_att_chan_send>
	if (err) {
   26d3a:	b118      	cbz	r0, 26d44 <chan_req_send+0x38>
		req->buf = buf;
   26d3c:	60a6      	str	r6, [r4, #8]
		chan->req = NULL;
   26d3e:	2300      	movs	r3, #0
   26d40:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
}
   26d44:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   26d46:	f06f 0079 	mvn.w	r0, #121	; 0x79
   26d4a:	e7fb      	b.n	26d44 <chan_req_send+0x38>

00026d4c <bt_att_chan_req_send>:
{
   26d4c:	b508      	push	{r3, lr}
	return chan_req_send(chan, req);
   26d4e:	f7ff ffdd 	bl	26d0c <chan_req_send>
}
   26d52:	bd08      	pop	{r3, pc}

00026d54 <bt_att_status>:
{
   26d54:	b570      	push	{r4, r5, r6, lr}
   26d56:	4604      	mov	r4, r0
   26d58:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   26d5a:	2100      	movs	r1, #0
   26d5c:	f7ff ffa8 	bl	26cb0 <atomic_test_bit>
   26d60:	b130      	cbz	r0, 26d70 <bt_att_status+0x1c>
   26d62:	1f26      	subs	r6, r4, #4
	if (!chan->att) {
   26d64:	f854 3c04 	ldr.w	r3, [r4, #-4]
   26d68:	b113      	cbz	r3, 26d70 <bt_att_status+0x1c>
	if (chan->req) {
   26d6a:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   26d6e:	b102      	cbz	r2, 26d72 <bt_att_status+0x1e>
}
   26d70:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
   26d72:	685d      	ldr	r5, [r3, #4]
Z_GENLIST_GET(slist, snode)
   26d74:	2d00      	cmp	r5, #0
   26d76:	d0fb      	beq.n	26d70 <bt_att_status+0x1c>
	return node->next;
   26d78:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   26d7a:	605a      	str	r2, [r3, #4]
	return list->tail;
   26d7c:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   26d7e:	42a9      	cmp	r1, r5
   26d80:	d00f      	beq.n	26da2 <bt_att_status+0x4e>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   26d82:	4629      	mov	r1, r5
   26d84:	4630      	mov	r0, r6
   26d86:	f7ff ffe1 	bl	26d4c <bt_att_chan_req_send>
   26d8a:	2800      	cmp	r0, #0
   26d8c:	daf0      	bge.n	26d70 <bt_att_status+0x1c>
	sys_slist_prepend(&chan->att->reqs, node);
   26d8e:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return list->head;
   26d92:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   26d94:	602a      	str	r2, [r5, #0]
	list->head = node;
   26d96:	605d      	str	r5, [r3, #4]
	return list->tail;
   26d98:	689a      	ldr	r2, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
   26d9a:	2a00      	cmp	r2, #0
   26d9c:	d1e8      	bne.n	26d70 <bt_att_status+0x1c>
	list->tail = node;
   26d9e:	609d      	str	r5, [r3, #8]
}
   26da0:	e7e6      	b.n	26d70 <bt_att_status+0x1c>
	list->tail = node;
   26da2:	609a      	str	r2, [r3, #8]
	if (!node) {
   26da4:	e7ed      	b.n	26d82 <bt_att_status+0x2e>

00026da6 <att_req_send_process>:
{
   26da6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26daa:	4607      	mov	r7, r0
	return list->head;
   26dac:	6a44      	ldr	r4, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   26dae:	b3ac      	cbz	r4, 26e1c <att_req_send_process+0x76>
   26db0:	3ce0      	subs	r4, #224	; 0xe0
Z_GENLIST_PEEK_NEXT(slist, snode)
   26db2:	f114 05e0 	adds.w	r5, r4, #224	; 0xe0
   26db6:	d003      	beq.n	26dc0 <att_req_send_process+0x1a>
	return node->next;
   26db8:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
   26dbc:	b105      	cbz	r5, 26dc0 <att_req_send_process+0x1a>
   26dbe:	3de0      	subs	r5, #224	; 0xe0
   26dc0:	f04f 0800 	mov.w	r8, #0
   26dc4:	4646      	mov	r6, r8
   26dc6:	e02e      	b.n	26e26 <att_req_send_process+0x80>
		if (!req && prev &&
   26dc8:	b196      	cbz	r6, 26df0 <att_req_send_process+0x4a>
		req = get_first_req_matching_chan(&att->reqs, chan);
   26dca:	4621      	mov	r1, r4
   26dcc:	1d38      	adds	r0, r7, #4
   26dce:	f7ff ff0e 	bl	26bee <get_first_req_matching_chan>
		if (!req) {
   26dd2:	4606      	mov	r6, r0
   26dd4:	b300      	cbz	r0, 26e18 <att_req_send_process+0x72>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   26dd6:	4601      	mov	r1, r0
   26dd8:	4620      	mov	r0, r4
   26dda:	f7ff ffb7 	bl	26d4c <bt_att_chan_req_send>
   26dde:	2800      	cmp	r0, #0
   26de0:	da2e      	bge.n	26e40 <att_req_send_process+0x9a>
	return list->head;
   26de2:	687b      	ldr	r3, [r7, #4]
	parent->next = child;
   26de4:	6033      	str	r3, [r6, #0]
	list->head = node;
   26de6:	607e      	str	r6, [r7, #4]
	return list->tail;
   26de8:	68bb      	ldr	r3, [r7, #8]
Z_GENLIST_PREPEND(slist, snode)
   26dea:	b193      	cbz	r3, 26e12 <att_req_send_process+0x6c>
		prev = chan;
   26dec:	46a0      	mov	r8, r4
   26dee:	e01f      	b.n	26e30 <att_req_send_process+0x8a>
		if (!req && prev &&
   26df0:	f1b8 0f00 	cmp.w	r8, #0
   26df4:	d0e9      	beq.n	26dca <att_req_send_process+0x24>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   26df6:	2103      	movs	r1, #3
   26df8:	f104 0090 	add.w	r0, r4, #144	; 0x90
   26dfc:	f7ff ff58 	bl	26cb0 <atomic_test_bit>
   26e00:	4681      	mov	r9, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   26e02:	2103      	movs	r1, #3
   26e04:	f108 0090 	add.w	r0, r8, #144	; 0x90
   26e08:	f7ff ff52 	bl	26cb0 <atomic_test_bit>
		if (!req && prev &&
   26e0c:	4581      	cmp	r9, r0
   26e0e:	d1dc      	bne.n	26dca <att_req_send_process+0x24>
   26e10:	e00e      	b.n	26e30 <att_req_send_process+0x8a>
	list->tail = node;
   26e12:	60be      	str	r6, [r7, #8]
		prev = chan;
   26e14:	46a0      	mov	r8, r4
}
   26e16:	e00b      	b.n	26e30 <att_req_send_process+0x8a>
   26e18:	46a0      	mov	r8, r4
   26e1a:	e009      	b.n	26e30 <att_req_send_process+0x8a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   26e1c:	4625      	mov	r5, r4
   26e1e:	e7cf      	b.n	26dc0 <att_req_send_process+0x1a>
   26e20:	462b      	mov	r3, r5
   26e22:	462c      	mov	r4, r5
   26e24:	461d      	mov	r5, r3
   26e26:	b15c      	cbz	r4, 26e40 <att_req_send_process+0x9a>
		if (chan->req) {
   26e28:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   26e2c:	2b00      	cmp	r3, #0
   26e2e:	d0cb      	beq.n	26dc8 <att_req_send_process+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   26e30:	2d00      	cmp	r5, #0
   26e32:	d0f5      	beq.n	26e20 <att_req_send_process+0x7a>
	return node->next;
   26e34:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
   26e38:	2b00      	cmp	r3, #0
   26e3a:	d0f2      	beq.n	26e22 <att_req_send_process+0x7c>
   26e3c:	3be0      	subs	r3, #224	; 0xe0
   26e3e:	e7f0      	b.n	26e22 <att_req_send_process+0x7c>
}
   26e40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00026e44 <chan_req_sent>:
{
   26e44:	b510      	push	{r4, lr}
   26e46:	460c      	mov	r4, r1
	struct bt_att_chan *chan = data->att_chan;
   26e48:	6808      	ldr	r0, [r1, #0]
	if (chan->req) {
   26e4a:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   26e4e:	b12b      	cbz	r3, 26e5c <chan_req_sent+0x18>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   26e50:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   26e54:	2300      	movs	r3, #0
   26e56:	30b0      	adds	r0, #176	; 0xb0
   26e58:	f7fc f85c 	bl	22f14 <k_work_reschedule>
	tx_meta_data_free(user_data);
   26e5c:	4620      	mov	r0, r4
   26e5e:	f7f4 fb33 	bl	1b4c8 <tx_meta_data_free>
}
   26e62:	bd10      	pop	{r4, pc}

00026e64 <chan_cfm_sent>:
{
   26e64:	b508      	push	{r3, lr}
   26e66:	4608      	mov	r0, r1
	struct bt_att_chan *chan = data->att_chan;
   26e68:	680b      	ldr	r3, [r1, #0]
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   26e6a:	3390      	adds	r3, #144	; 0x90
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26e6c:	f3bf 8f5b 	dmb	ish
   26e70:	e853 1f00 	ldrex	r1, [r3]
   26e74:	f021 0102 	bic.w	r1, r1, #2
   26e78:	e843 1200 	strex	r2, r1, [r3]
   26e7c:	2a00      	cmp	r2, #0
   26e7e:	d1f7      	bne.n	26e70 <chan_cfm_sent+0xc>
   26e80:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   26e84:	f7f4 fb20 	bl	1b4c8 <tx_meta_data_free>
}
   26e88:	bd08      	pop	{r3, pc}

00026e8a <chan_rsp_sent>:
{
   26e8a:	b508      	push	{r3, lr}
   26e8c:	4608      	mov	r0, r1
	struct bt_att_chan *chan = data->att_chan;
   26e8e:	680b      	ldr	r3, [r1, #0]
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   26e90:	3390      	adds	r3, #144	; 0x90
   26e92:	f3bf 8f5b 	dmb	ish
   26e96:	e853 1f00 	ldrex	r1, [r3]
   26e9a:	f021 0101 	bic.w	r1, r1, #1
   26e9e:	e843 1200 	strex	r2, r1, [r3]
   26ea2:	2a00      	cmp	r2, #0
   26ea4:	d1f7      	bne.n	26e96 <chan_rsp_sent+0xc>
   26ea6:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   26eaa:	f7f4 fb0d 	bl	1b4c8 <tx_meta_data_free>
}
   26eae:	bd08      	pop	{r3, pc}

00026eb0 <get_first_buf_matching_chan>:
{
   26eb0:	b508      	push	{r3, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   26eb2:	2200      	movs	r2, #0
   26eb4:	2300      	movs	r3, #0
   26eb6:	f001 f9ef 	bl	28298 <net_buf_get>
}
   26eba:	bd08      	pop	{r3, pc}

00026ebc <process_queue>:
{
   26ebc:	b570      	push	{r4, r5, r6, lr}
   26ebe:	4604      	mov	r4, r0
   26ec0:	460d      	mov	r5, r1
	buf = get_first_buf_matching_chan(queue, chan);
   26ec2:	4601      	mov	r1, r0
   26ec4:	4628      	mov	r0, r5
   26ec6:	f7ff fff3 	bl	26eb0 <get_first_buf_matching_chan>
	if (buf) {
   26eca:	b168      	cbz	r0, 26ee8 <process_queue+0x2c>
   26ecc:	4606      	mov	r6, r0
		err = bt_att_chan_send(chan, buf);
   26ece:	4601      	mov	r1, r0
   26ed0:	4620      	mov	r0, r4
   26ed2:	f7ff ff17 	bl	26d04 <bt_att_chan_send>
		if (err) {
   26ed6:	4604      	mov	r4, r0
   26ed8:	b908      	cbnz	r0, 26ede <process_queue+0x22>
}
   26eda:	4620      	mov	r0, r4
   26edc:	bd70      	pop	{r4, r5, r6, pc}
			k_queue_prepend(&queue->_queue, buf);
   26ede:	4631      	mov	r1, r6
   26ee0:	4628      	mov	r0, r5
   26ee2:	f003 f99b 	bl	2a21c <k_queue_prepend>
			return err;
   26ee6:	e7f8      	b.n	26eda <process_queue+0x1e>
	return -ENOENT;
   26ee8:	f06f 0401 	mvn.w	r4, #1
   26eec:	e7f5      	b.n	26eda <process_queue+0x1e>

00026eee <bt_att_sent>:
{
   26eee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26ef0:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   26ef2:	1f06      	subs	r6, r0, #4
	struct bt_att *att = chan->att;
   26ef4:	f850 5c04 	ldr.w	r5, [r0, #-4]
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   26ef8:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   26efc:	f3bf 8f5b 	dmb	ish
   26f00:	e853 1f00 	ldrex	r1, [r3]
   26f04:	f021 0110 	bic.w	r1, r1, #16
   26f08:	e843 1200 	strex	r2, r1, [r3]
   26f0c:	2a00      	cmp	r2, #0
   26f0e:	d1f7      	bne.n	26f00 <bt_att_sent+0x12>
   26f10:	f3bf 8f5b 	dmb	ish
	if (!att) {
   26f14:	b145      	cbz	r5, 26f28 <bt_att_sent+0x3a>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   26f16:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   26f1a:	b133      	cbz	r3, 26f2a <bt_att_sent+0x3c>
	err = process_queue(chan, &chan->tx_queue);
   26f1c:	f104 0194 	add.w	r1, r4, #148	; 0x94
   26f20:	4630      	mov	r0, r6
   26f22:	f7ff ffcb 	bl	26ebc <process_queue>
	if (!err) {
   26f26:	b9c0      	cbnz	r0, 26f5a <bt_att_sent+0x6c>
}
   26f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return list->head;
   26f2a:	686f      	ldr	r7, [r5, #4]
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   26f2c:	2f00      	cmp	r7, #0
   26f2e:	d0f5      	beq.n	26f1c <bt_att_sent+0x2e>
	return node->next;
   26f30:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   26f32:	606b      	str	r3, [r5, #4]
	return list->tail;
   26f34:	68aa      	ldr	r2, [r5, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   26f36:	42ba      	cmp	r2, r7
   26f38:	d00d      	beq.n	26f56 <bt_att_sent+0x68>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   26f3a:	4639      	mov	r1, r7
   26f3c:	4630      	mov	r0, r6
   26f3e:	f7ff fee5 	bl	26d0c <chan_req_send>
   26f42:	2800      	cmp	r0, #0
   26f44:	daf0      	bge.n	26f28 <bt_att_sent+0x3a>
	return list->head;
   26f46:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   26f48:	603b      	str	r3, [r7, #0]
	list->head = node;
   26f4a:	606f      	str	r7, [r5, #4]
	return list->tail;
   26f4c:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   26f4e:	2b00      	cmp	r3, #0
   26f50:	d1e4      	bne.n	26f1c <bt_att_sent+0x2e>
	list->tail = node;
   26f52:	60af      	str	r7, [r5, #8]
}
   26f54:	e7e2      	b.n	26f1c <bt_att_sent+0x2e>
	list->tail = node;
   26f56:	60ab      	str	r3, [r5, #8]
}
   26f58:	e7ef      	b.n	26f3a <bt_att_sent+0x4c>
	(void)process_queue(chan, &att->tx_queue);
   26f5a:	f105 010c 	add.w	r1, r5, #12
   26f5e:	4630      	mov	r0, r6
   26f60:	f7ff ffac 	bl	26ebc <process_queue>
   26f64:	e7e0      	b.n	26f28 <bt_att_sent+0x3a>

00026f66 <att_send_process>:
{
   26f66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26f6a:	4680      	mov	r8, r0
	return list->head;
   26f6c:	6a44      	ldr	r4, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   26f6e:	b374      	cbz	r4, 26fce <att_send_process+0x68>
   26f70:	3ce0      	subs	r4, #224	; 0xe0
Z_GENLIST_PEEK_NEXT(slist, snode)
   26f72:	f114 05e0 	adds.w	r5, r4, #224	; 0xe0
   26f76:	d003      	beq.n	26f80 <att_send_process+0x1a>
	return node->next;
   26f78:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
   26f7c:	b105      	cbz	r5, 26f80 <att_send_process+0x1a>
   26f7e:	3de0      	subs	r5, #224	; 0xe0
   26f80:	2600      	movs	r6, #0
   26f82:	4637      	mov	r7, r6
   26f84:	e00e      	b.n	26fa4 <att_send_process+0x3e>
		err = process_queue(chan, &att->tx_queue);
   26f86:	f108 010c 	add.w	r1, r8, #12
   26f8a:	4620      	mov	r0, r4
   26f8c:	f7ff ff96 	bl	26ebc <process_queue>
		if (!err) {
   26f90:	4606      	mov	r6, r0
   26f92:	b300      	cbz	r0, 26fd6 <att_send_process+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   26f94:	b1ed      	cbz	r5, 26fd2 <att_send_process+0x6c>
   26f96:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
   26f9a:	b103      	cbz	r3, 26f9e <att_send_process+0x38>
   26f9c:	3be0      	subs	r3, #224	; 0xe0
   26f9e:	4627      	mov	r7, r4
   26fa0:	462c      	mov	r4, r5
   26fa2:	461d      	mov	r5, r3
   26fa4:	b1bc      	cbz	r4, 26fd6 <att_send_process+0x70>
		if (err == -ENOENT && prev &&
   26fa6:	f116 0f02 	cmn.w	r6, #2
   26faa:	d1ec      	bne.n	26f86 <att_send_process+0x20>
   26fac:	2f00      	cmp	r7, #0
   26fae:	d0ea      	beq.n	26f86 <att_send_process+0x20>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   26fb0:	2103      	movs	r1, #3
   26fb2:	f104 0090 	add.w	r0, r4, #144	; 0x90
   26fb6:	f7ff fe7b 	bl	26cb0 <atomic_test_bit>
   26fba:	4681      	mov	r9, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   26fbc:	2103      	movs	r1, #3
   26fbe:	f107 0090 	add.w	r0, r7, #144	; 0x90
   26fc2:	f7ff fe75 	bl	26cb0 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   26fc6:	4581      	cmp	r9, r0
   26fc8:	d1dd      	bne.n	26f86 <att_send_process+0x20>
   26fca:	463c      	mov	r4, r7
   26fcc:	e7e2      	b.n	26f94 <att_send_process+0x2e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   26fce:	4625      	mov	r5, r4
   26fd0:	e7d6      	b.n	26f80 <att_send_process+0x1a>
   26fd2:	462b      	mov	r3, r5
   26fd4:	e7e3      	b.n	26f9e <att_send_process+0x38>
}
   26fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00026fda <write_cb>:
{
   26fda:	b5f0      	push	{r4, r5, r6, r7, lr}
   26fdc:	b083      	sub	sp, #12
   26fde:	4606      	mov	r6, r0
   26fe0:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   26fe2:	f44f 7295 	mov.w	r2, #298	; 0x12a
   26fe6:	4601      	mov	r1, r0
   26fe8:	6820      	ldr	r0, [r4, #0]
   26fea:	f000 ff1d 	bl	27e28 <bt_gatt_check_perm>
   26fee:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   26ff0:	bb08      	cbnz	r0, 27036 <write_cb+0x5c>
   26ff2:	4605      	mov	r5, r0
	if (!data->req) {
   26ff4:	7a23      	ldrb	r3, [r4, #8]
   26ff6:	b11b      	cbz	r3, 27000 <write_cb+0x26>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   26ff8:	2b18      	cmp	r3, #24
   26ffa:	d016      	beq.n	2702a <write_cb+0x50>
	uint8_t flags = 0U;
   26ffc:	4603      	mov	r3, r0
   26ffe:	e000      	b.n	27002 <write_cb+0x28>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   27000:	2302      	movs	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   27002:	68b7      	ldr	r7, [r6, #8]
   27004:	9301      	str	r3, [sp, #4]
   27006:	8a63      	ldrh	r3, [r4, #18]
   27008:	9300      	str	r3, [sp, #0]
   2700a:	8a23      	ldrh	r3, [r4, #16]
   2700c:	68e2      	ldr	r2, [r4, #12]
   2700e:	4631      	mov	r1, r6
   27010:	6820      	ldr	r0, [r4, #0]
   27012:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   27014:	2800      	cmp	r0, #0
   27016:	db02      	blt.n	2701e <write_cb+0x44>
   27018:	8a23      	ldrh	r3, [r4, #16]
   2701a:	4298      	cmp	r0, r3
   2701c:	d007      	beq.n	2702e <write_cb+0x54>
		data->err = err_to_att(write);
   2701e:	f7ff fe00 	bl	26c22 <err_to_att>
   27022:	7520      	strb	r0, [r4, #20]
}
   27024:	4628      	mov	r0, r5
   27026:	b003      	add	sp, #12
   27028:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   2702a:	2304      	movs	r3, #4
   2702c:	e7e9      	b.n	27002 <write_cb+0x28>
	data->err = 0U;
   2702e:	2300      	movs	r3, #0
   27030:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   27032:	2501      	movs	r5, #1
   27034:	e7f6      	b.n	27024 <write_cb+0x4a>
		return BT_GATT_ITER_STOP;
   27036:	2500      	movs	r5, #0
   27038:	e7f4      	b.n	27024 <write_cb+0x4a>

0002703a <bt_att_chan_send_rsp>:
{
   2703a:	b538      	push	{r3, r4, r5, lr}
   2703c:	4604      	mov	r4, r0
   2703e:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   27040:	f7f4 fa50 	bl	1b4e4 <chan_send>
	if (err) {
   27044:	b900      	cbnz	r0, 27048 <bt_att_chan_send_rsp+0xe>
}
   27046:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_put(&chan->tx_queue, buf);
   27048:	4629      	mov	r1, r5
   2704a:	f104 0098 	add.w	r0, r4, #152	; 0x98
   2704e:	f001 f959 	bl	28304 <net_buf_put>
}
   27052:	e7f8      	b.n	27046 <bt_att_chan_send_rsp+0xc>

00027054 <att_chan_read>:
{
   27054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27058:	b085      	sub	sp, #20
   2705a:	4680      	mov	r8, r0
   2705c:	4689      	mov	r9, r1
   2705e:	9202      	str	r2, [sp, #8]
   27060:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   27062:	6843      	ldr	r3, [r0, #4]
   27064:	9303      	str	r3, [sp, #12]
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   27066:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
   27068:	4613      	mov	r3, r2
	size_t bytes = 0;
   2706a:	2200      	movs	r2, #0
	while (buf) {
   2706c:	e002      	b.n	27074 <att_chan_read+0x20>
		bytes += buf->len;
   2706e:	8a19      	ldrh	r1, [r3, #16]
   27070:	440a      	add	r2, r1
		buf = buf->frags;
   27072:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   27074:	2b00      	cmp	r3, #0
   27076:	d1fa      	bne.n	2706e <att_chan_read+0x1a>
   27078:	4290      	cmp	r0, r2
   2707a:	d804      	bhi.n	27086 <att_chan_read+0x32>
		return 0;
   2707c:	2400      	movs	r4, #0
}
   2707e:	4620      	mov	r0, r4
   27080:	b005      	add	sp, #20
   27082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(buf);
   27086:	9802      	ldr	r0, [sp, #8]
   27088:	f001 f967 	bl	2835a <net_buf_frag_last>
   2708c:	4607      	mov	r7, r0
	size_t len, total = 0;
   2708e:	f04f 0a00 	mov.w	sl, #0
   27092:	e082      	b.n	2719a <att_chan_read+0x146>
		bytes += buf->len;
   27094:	8a19      	ldrh	r1, [r3, #16]
   27096:	440a      	add	r2, r1
		buf = buf->frags;
   27098:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   2709a:	2b00      	cmp	r3, #0
   2709c:	d1fa      	bne.n	27094 <att_chan_read+0x40>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2709e:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   270a0:	f107 060c 	add.w	r6, r7, #12
   270a4:	4630      	mov	r0, r6
   270a6:	f001 f9b5 	bl	28414 <net_buf_simple_tailroom>
   270aa:	4284      	cmp	r4, r0
   270ac:	d326      	bcc.n	270fc <att_chan_read+0xa8>
   270ae:	4630      	mov	r0, r6
   270b0:	f001 f9b0 	bl	28414 <net_buf_simple_tailroom>
   270b4:	4606      	mov	r6, r0
		if (!len) {
   270b6:	b36e      	cbz	r6, 27114 <att_chan_read+0xc0>
		read = attr->read(conn, attr, frag->data + frag->len, len,
   270b8:	f8d9 4004 	ldr.w	r4, [r9, #4]
   270bc:	68f9      	ldr	r1, [r7, #12]
   270be:	8a3a      	ldrh	r2, [r7, #16]
   270c0:	9500      	str	r5, [sp, #0]
   270c2:	b2b3      	uxth	r3, r6
   270c4:	440a      	add	r2, r1
   270c6:	4649      	mov	r1, r9
   270c8:	9803      	ldr	r0, [sp, #12]
   270ca:	47a0      	blx	r4
		if (read < 0) {
   270cc:	1e04      	subs	r4, r0, #0
   270ce:	db55      	blt.n	2717c <att_chan_read+0x128>
		if (cb && !cb(frag, read, user_data)) {
   270d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   270d2:	b12b      	cbz	r3, 270e0 <att_chan_read+0x8c>
   270d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   270d6:	4621      	mov	r1, r4
   270d8:	4638      	mov	r0, r7
   270da:	4798      	blx	r3
   270dc:	2800      	cmp	r0, #0
   270de:	d061      	beq.n	271a4 <att_chan_read+0x150>
		net_buf_add(frag, read);
   270e0:	46a3      	mov	fp, r4
	return net_buf_simple_add(&buf->b, len);
   270e2:	4621      	mov	r1, r4
   270e4:	f107 000c 	add.w	r0, r7, #12
   270e8:	f001 f957 	bl	2839a <net_buf_simple_add>
		total += read;
   270ec:	44a2      	add	sl, r4
		offset += read;
   270ee:	442c      	add	r4, r5
   270f0:	b2a5      	uxth	r5, r4
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   270f2:	f8b8 002a 	ldrh.w	r0, [r8, #42]	; 0x2a
   270f6:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   270f8:	2200      	movs	r2, #0
   270fa:	e048      	b.n	2718e <att_chan_read+0x13a>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   270fc:	f8b8 602a 	ldrh.w	r6, [r8, #42]	; 0x2a
	while (buf) {
   27100:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   27102:	2200      	movs	r2, #0
	while (buf) {
   27104:	e002      	b.n	2710c <att_chan_read+0xb8>
		bytes += buf->len;
   27106:	8a19      	ldrh	r1, [r3, #16]
   27108:	440a      	add	r2, r1
		buf = buf->frags;
   2710a:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   2710c:	2b00      	cmp	r3, #0
   2710e:	d1fa      	bne.n	27106 <att_chan_read+0xb2>
   27110:	1ab6      	subs	r6, r6, r2
   27112:	e7d0      	b.n	270b6 <att_chan_read+0x62>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   27114:	9b02      	ldr	r3, [sp, #8]
   27116:	7a98      	ldrb	r0, [r3, #10]
   27118:	f7f6 fc4c 	bl	1d9b4 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2711c:	2200      	movs	r2, #0
   2711e:	2300      	movs	r3, #0
   27120:	f001 f8b3 	bl	2828a <net_buf_alloc_fixed>
			if (!frag) {
   27124:	4607      	mov	r7, r0
   27126:	b150      	cbz	r0, 2713e <att_chan_read+0xea>
			net_buf_frag_add(buf, frag);
   27128:	4601      	mov	r1, r0
   2712a:	f8dd b008 	ldr.w	fp, [sp, #8]
   2712e:	4658      	mov	r0, fp
   27130:	f001 f924 	bl	2837c <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   27134:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	size_t bytes = 0;
   27138:	4632      	mov	r2, r6
	while (buf) {
   2713a:	465b      	mov	r3, fp
   2713c:	e004      	b.n	27148 <att_chan_read+0xf4>
				return total;
   2713e:	4654      	mov	r4, sl
   27140:	e79d      	b.n	2707e <att_chan_read+0x2a>
		bytes += buf->len;
   27142:	8a19      	ldrh	r1, [r3, #16]
   27144:	440a      	add	r2, r1
		buf = buf->frags;
   27146:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   27148:	2b00      	cmp	r3, #0
   2714a:	d1fa      	bne.n	27142 <att_chan_read+0xee>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2714c:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   2714e:	f107 0b0c 	add.w	fp, r7, #12
   27152:	4658      	mov	r0, fp
   27154:	f001 f95e 	bl	28414 <net_buf_simple_tailroom>
   27158:	4284      	cmp	r4, r0
   2715a:	d304      	bcc.n	27166 <att_chan_read+0x112>
   2715c:	4658      	mov	r0, fp
   2715e:	f001 f959 	bl	28414 <net_buf_simple_tailroom>
   27162:	4606      	mov	r6, r0
   27164:	e7a8      	b.n	270b8 <att_chan_read+0x64>
   27166:	f8b8 102a 	ldrh.w	r1, [r8, #42]	; 0x2a
	while (buf) {
   2716a:	9b02      	ldr	r3, [sp, #8]
   2716c:	e002      	b.n	27174 <att_chan_read+0x120>
		bytes += buf->len;
   2716e:	8a1a      	ldrh	r2, [r3, #16]
   27170:	4416      	add	r6, r2
		buf = buf->frags;
   27172:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   27174:	2b00      	cmp	r3, #0
   27176:	d1fa      	bne.n	2716e <att_chan_read+0x11a>
   27178:	1b8e      	subs	r6, r1, r6
   2717a:	e79d      	b.n	270b8 <att_chan_read+0x64>
			if (total) {
   2717c:	f1ba 0f00 	cmp.w	sl, #0
   27180:	f43f af7d 	beq.w	2707e <att_chan_read+0x2a>
				return total;
   27184:	4654      	mov	r4, sl
   27186:	e77a      	b.n	2707e <att_chan_read+0x2a>
		bytes += buf->len;
   27188:	8a19      	ldrh	r1, [r3, #16]
   2718a:	440a      	add	r2, r1
		buf = buf->frags;
   2718c:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   2718e:	2b00      	cmp	r3, #0
   27190:	d1fa      	bne.n	27188 <att_chan_read+0x134>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   27192:	4290      	cmp	r0, r2
   27194:	d906      	bls.n	271a4 <att_chan_read+0x150>
   27196:	45b3      	cmp	fp, r6
   27198:	d104      	bne.n	271a4 <att_chan_read+0x150>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2719a:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2719e:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   271a0:	2200      	movs	r2, #0
	while (buf) {
   271a2:	e77a      	b.n	2709a <att_chan_read+0x46>
	return total;
   271a4:	4654      	mov	r4, sl
   271a6:	e76a      	b.n	2707e <att_chan_read+0x2a>

000271a8 <read_vl_cb>:
{
   271a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   271ac:	b082      	sub	sp, #8
   271ae:	4606      	mov	r6, r0
   271b0:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   271b2:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   271b4:	6878      	ldr	r0, [r7, #4]
	data->err = 0x00;
   271b6:	2300      	movs	r3, #0
   271b8:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   271ba:	2295      	movs	r2, #149	; 0x95
   271bc:	4631      	mov	r1, r6
   271be:	f000 fe33 	bl	27e28 <bt_gatt_check_perm>
   271c2:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   271c4:	b9f0      	cbnz	r0, 27204 <read_vl_cb+0x5c>
   271c6:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   271c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   271ca:	68a0      	ldr	r0, [r4, #8]
   271cc:	8a02      	ldrh	r2, [r0, #16]
   271ce:	1a9b      	subs	r3, r3, r2
   271d0:	2b01      	cmp	r3, #1
   271d2:	dd18      	ble.n	27206 <read_vl_cb+0x5e>
	return net_buf_simple_add(&buf->b, len);
   271d4:	2102      	movs	r1, #2
   271d6:	300c      	adds	r0, #12
   271d8:	f001 f8df 	bl	2839a <net_buf_simple_add>
   271dc:	4680      	mov	r8, r0
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   271de:	2300      	movs	r3, #0
   271e0:	9301      	str	r3, [sp, #4]
   271e2:	9300      	str	r3, [sp, #0]
   271e4:	88a3      	ldrh	r3, [r4, #4]
   271e6:	68a2      	ldr	r2, [r4, #8]
   271e8:	4631      	mov	r1, r6
   271ea:	4638      	mov	r0, r7
   271ec:	f7ff ff32 	bl	27054 <att_chan_read>
	if (read < 0) {
   271f0:	2800      	cmp	r0, #0
   271f2:	db03      	blt.n	271fc <read_vl_cb+0x54>
	rsp->len = read;
   271f4:	f8a8 0000 	strh.w	r0, [r8]
	return BT_GATT_ITER_CONTINUE;
   271f8:	2501      	movs	r5, #1
   271fa:	e004      	b.n	27206 <read_vl_cb+0x5e>
		data->err = err_to_att(read);
   271fc:	f7ff fd11 	bl	26c22 <err_to_att>
   27200:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   27202:	e000      	b.n	27206 <read_vl_cb+0x5e>
		return BT_GATT_ITER_STOP;
   27204:	2500      	movs	r5, #0
}
   27206:	4628      	mov	r0, r5
   27208:	b002      	add	sp, #8
   2720a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002720e <read_cb>:
{
   2720e:	b5f0      	push	{r4, r5, r6, r7, lr}
   27210:	b083      	sub	sp, #12
   27212:	4606      	mov	r6, r0
   27214:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   27216:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   27218:	6878      	ldr	r0, [r7, #4]
	data->err = 0x00;
   2721a:	2300      	movs	r3, #0
   2721c:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2721e:	2295      	movs	r2, #149	; 0x95
   27220:	4631      	mov	r1, r6
   27222:	f000 fe01 	bl	27e28 <bt_gatt_check_perm>
   27226:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   27228:	b118      	cbz	r0, 27232 <read_cb+0x24>
		return BT_GATT_ITER_STOP;
   2722a:	2500      	movs	r5, #0
}
   2722c:	4628      	mov	r0, r5
   2722e:	b003      	add	sp, #12
   27230:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27232:	4605      	mov	r5, r0
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   27234:	2300      	movs	r3, #0
   27236:	9301      	str	r3, [sp, #4]
   27238:	9300      	str	r3, [sp, #0]
   2723a:	88a3      	ldrh	r3, [r4, #4]
   2723c:	68a2      	ldr	r2, [r4, #8]
   2723e:	4631      	mov	r1, r6
   27240:	4638      	mov	r0, r7
   27242:	f7ff ff07 	bl	27054 <att_chan_read>
	if (ret < 0) {
   27246:	2800      	cmp	r0, #0
   27248:	db01      	blt.n	2724e <read_cb+0x40>
	return BT_GATT_ITER_CONTINUE;
   2724a:	2501      	movs	r5, #1
   2724c:	e7ee      	b.n	2722c <read_cb+0x1e>
		data->err = err_to_att(ret);
   2724e:	f7ff fce8 	bl	26c22 <err_to_att>
   27252:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   27254:	e7ea      	b.n	2722c <read_cb+0x1e>

00027256 <find_info_cb>:
{
   27256:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2725a:	4606      	mov	r6, r0
   2725c:	460f      	mov	r7, r1
   2725e:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   27260:	f8d2 8000 	ldr.w	r8, [r2]
	if (!data->rsp) {
   27264:	6893      	ldr	r3, [r2, #8]
   27266:	b14b      	cbz	r3, 2727c <find_info_cb+0x26>
	switch (data->rsp->format) {
   27268:	68a3      	ldr	r3, [r4, #8]
   2726a:	781d      	ldrb	r5, [r3, #0]
   2726c:	2d01      	cmp	r5, #1
   2726e:	d013      	beq.n	27298 <find_info_cb+0x42>
   27270:	2d02      	cmp	r5, #2
   27272:	d02d      	beq.n	272d0 <find_info_cb+0x7a>
   27274:	2500      	movs	r5, #0
}
   27276:	4628      	mov	r0, r5
   27278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2727c:	6850      	ldr	r0, [r2, #4]
   2727e:	2101      	movs	r1, #1
   27280:	300c      	adds	r0, #12
   27282:	f001 f88a 	bl	2839a <net_buf_simple_add>
   27286:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   27288:	6833      	ldr	r3, [r6, #0]
   2728a:	781b      	ldrb	r3, [r3, #0]
   2728c:	b913      	cbnz	r3, 27294 <find_info_cb+0x3e>
   2728e:	2301      	movs	r3, #1
   27290:	7003      	strb	r3, [r0, #0]
   27292:	e7e9      	b.n	27268 <find_info_cb+0x12>
   27294:	2302      	movs	r3, #2
   27296:	e7fb      	b.n	27290 <find_info_cb+0x3a>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   27298:	6833      	ldr	r3, [r6, #0]
   2729a:	f893 9000 	ldrb.w	r9, [r3]
   2729e:	f1b9 0f00 	cmp.w	r9, #0
   272a2:	d001      	beq.n	272a8 <find_info_cb+0x52>
			return BT_GATT_ITER_STOP;
   272a4:	2500      	movs	r5, #0
   272a6:	e7e6      	b.n	27276 <find_info_cb+0x20>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   272a8:	6860      	ldr	r0, [r4, #4]
   272aa:	2104      	movs	r1, #4
   272ac:	300c      	adds	r0, #12
   272ae:	f001 f874 	bl	2839a <net_buf_simple_add>
   272b2:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   272b4:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   272b6:	6832      	ldr	r2, [r6, #0]
   272b8:	68e3      	ldr	r3, [r4, #12]
   272ba:	8852      	ldrh	r2, [r2, #2]
   272bc:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   272be:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   272c2:	6862      	ldr	r2, [r4, #4]
   272c4:	8a12      	ldrh	r2, [r2, #16]
   272c6:	1a9b      	subs	r3, r3, r2
   272c8:	2b04      	cmp	r3, #4
   272ca:	d8d4      	bhi.n	27276 <find_info_cb+0x20>
	return BT_GATT_ITER_STOP;
   272cc:	464d      	mov	r5, r9
   272ce:	e7d2      	b.n	27276 <find_info_cb+0x20>
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   272d0:	6833      	ldr	r3, [r6, #0]
   272d2:	781b      	ldrb	r3, [r3, #0]
   272d4:	2b02      	cmp	r3, #2
   272d6:	d001      	beq.n	272dc <find_info_cb+0x86>
			return BT_GATT_ITER_STOP;
   272d8:	2500      	movs	r5, #0
   272da:	e7cc      	b.n	27276 <find_info_cb+0x20>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   272dc:	6860      	ldr	r0, [r4, #4]
   272de:	2112      	movs	r1, #18
   272e0:	300c      	adds	r0, #12
   272e2:	f001 f85a 	bl	2839a <net_buf_simple_add>
   272e6:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   272e8:	8007      	strh	r7, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   272ea:	68e0      	ldr	r0, [r4, #12]
   272ec:	6831      	ldr	r1, [r6, #0]
   272ee:	2210      	movs	r2, #16
   272f0:	3101      	adds	r1, #1
   272f2:	3002      	adds	r0, #2
   272f4:	f7fe fe97 	bl	26026 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   272f8:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   272fc:	6862      	ldr	r2, [r4, #4]
   272fe:	8a12      	ldrh	r2, [r2, #16]
   27300:	1a9b      	subs	r3, r3, r2
   27302:	2b12      	cmp	r3, #18
   27304:	d801      	bhi.n	2730a <find_info_cb+0xb4>
	return BT_GATT_ITER_STOP;
   27306:	2500      	movs	r5, #0
   27308:	e7b5      	b.n	27276 <find_info_cb+0x20>
			return BT_GATT_ITER_CONTINUE;
   2730a:	2501      	movs	r5, #1
   2730c:	e7b3      	b.n	27276 <find_info_cb+0x20>

0002730e <att_chan_mtu_updated>:
{
   2730e:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = updated_chan->att;
   27310:	6806      	ldr	r6, [r0, #0]
	return list->head;
   27312:	6a73      	ldr	r3, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27314:	b153      	cbz	r3, 2732c <att_chan_mtu_updated+0x1e>
   27316:	3be0      	subs	r3, #224	; 0xe0
Z_GENLIST_PEEK_NEXT(slist, snode)
   27318:	f113 04e0 	adds.w	r4, r3, #224	; 0xe0
   2731c:	d003      	beq.n	27326 <att_chan_mtu_updated+0x18>
	return node->next;
   2731e:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
   27322:	b104      	cbz	r4, 27326 <att_chan_mtu_updated+0x18>
   27324:	3ce0      	subs	r4, #224	; 0xe0
   27326:	2200      	movs	r2, #0
   27328:	4611      	mov	r1, r2
   2732a:	e004      	b.n	27336 <att_chan_mtu_updated+0x28>
   2732c:	461c      	mov	r4, r3
   2732e:	e7fa      	b.n	27326 <att_chan_mtu_updated+0x18>
   27330:	4625      	mov	r5, r4
   27332:	4623      	mov	r3, r4
   27334:	462c      	mov	r4, r5
   27336:	b18b      	cbz	r3, 2735c <att_chan_mtu_updated+0x4e>
		if (chan == updated_chan) {
   27338:	4283      	cmp	r3, r0
   2733a:	d007      	beq.n	2734c <att_chan_mtu_updated+0x3e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2733c:	8d5d      	ldrh	r5, [r3, #42]	; 0x2a
   2733e:	42a9      	cmp	r1, r5
   27340:	bf38      	it	cc
   27342:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   27344:	8b5b      	ldrh	r3, [r3, #26]
   27346:	429a      	cmp	r2, r3
   27348:	bf38      	it	cc
   2734a:	461a      	movcc	r2, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2734c:	2c00      	cmp	r4, #0
   2734e:	d0ef      	beq.n	27330 <att_chan_mtu_updated+0x22>
   27350:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
   27354:	2d00      	cmp	r5, #0
   27356:	d0ec      	beq.n	27332 <att_chan_mtu_updated+0x24>
   27358:	3de0      	subs	r5, #224	; 0xe0
   2735a:	e7ea      	b.n	27332 <att_chan_mtu_updated+0x24>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2735c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   2735e:	428b      	cmp	r3, r1
   27360:	d802      	bhi.n	27368 <att_chan_mtu_updated+0x5a>
	    (updated_chan->chan.rx.mtu > max_rx)) {
   27362:	8b44      	ldrh	r4, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   27364:	4294      	cmp	r4, r2
   27366:	d909      	bls.n	2737c <att_chan_mtu_updated+0x6e>
		max_rx = MAX(max_rx, updated_chan->chan.rx.mtu);
   27368:	8b40      	ldrh	r0, [r0, #26]
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2736a:	4282      	cmp	r2, r0
   2736c:	bf38      	it	cc
   2736e:	4602      	movcc	r2, r0
   27370:	4299      	cmp	r1, r3
   27372:	bf38      	it	cc
   27374:	4619      	movcc	r1, r3
   27376:	6830      	ldr	r0, [r6, #0]
   27378:	f7f6 fa7e 	bl	1d878 <bt_gatt_att_max_mtu_changed>
}
   2737c:	bd70      	pop	{r4, r5, r6, pc}

0002737e <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2737e:	f001 021f 	and.w	r2, r1, #31
   27382:	2301      	movs	r3, #1
   27384:	4093      	lsls	r3, r2
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   27386:	0949      	lsrs	r1, r1, #5
   27388:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2738c:	f3bf 8f5b 	dmb	ish
   27390:	e850 2f00 	ldrex	r2, [r0]
   27394:	ea42 0103 	orr.w	r1, r2, r3
   27398:	e840 1c00 	strex	ip, r1, [r0]
   2739c:	f1bc 0f00 	cmp.w	ip, #0
   273a0:	d1f6      	bne.n	27390 <atomic_test_and_set_bit+0x12>
   273a2:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   273a6:	4213      	tst	r3, r2
}
   273a8:	bf14      	ite	ne
   273aa:	2001      	movne	r0, #1
   273ac:	2000      	moveq	r0, #0
   273ae:	4770      	bx	lr

000273b0 <att_sent>:
{
   273b0:	b508      	push	{r3, lr}
	struct bt_att_chan *att_chan = data->att_chan;
   273b2:	680b      	ldr	r3, [r1, #0]
	struct bt_l2cap_chan *chan = &att_chan->chan.chan;
   273b4:	1d18      	adds	r0, r3, #4
	if (chan->ops->sent) {
   273b6:	689b      	ldr	r3, [r3, #8]
   273b8:	699b      	ldr	r3, [r3, #24]
   273ba:	b103      	cbz	r3, 273be <att_sent+0xe>
		chan->ops->sent(chan);
   273bc:	4798      	blx	r3
}
   273be:	bd08      	pop	{r3, pc}

000273c0 <att_unknown>:
{
   273c0:	b570      	push	{r4, r5, r6, lr}
   273c2:	4604      	mov	r4, r0
   273c4:	460d      	mov	r5, r1
	if (!err) {
   273c6:	4616      	mov	r6, r2
   273c8:	b12a      	cbz	r2, 273d6 <att_unknown+0x16>
	chan_unknown(conn, user_data, err);
   273ca:	4632      	mov	r2, r6
   273cc:	4629      	mov	r1, r5
   273ce:	4620      	mov	r0, r4
   273d0:	f7ff fc7b 	bl	26cca <chan_unknown>
}
   273d4:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   273d6:	f7ff ffeb 	bl	273b0 <att_sent>
   273da:	e7f6      	b.n	273ca <att_unknown+0xa>

000273dc <att_tx_complete>:
{
   273dc:	b570      	push	{r4, r5, r6, lr}
   273de:	4604      	mov	r4, r0
   273e0:	460d      	mov	r5, r1
	if (!err) {
   273e2:	4616      	mov	r6, r2
   273e4:	b12a      	cbz	r2, 273f2 <att_tx_complete+0x16>
	chan_tx_complete(conn, user_data, err);
   273e6:	4632      	mov	r2, r6
   273e8:	4629      	mov	r1, r5
   273ea:	4620      	mov	r0, r4
   273ec:	f7ff fc72 	bl	26cd4 <chan_tx_complete>
}
   273f0:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   273f2:	f7ff ffdd 	bl	273b0 <att_sent>
   273f6:	e7f6      	b.n	273e6 <att_tx_complete+0xa>

000273f8 <att_req_sent>:
{
   273f8:	b570      	push	{r4, r5, r6, lr}
   273fa:	4604      	mov	r4, r0
   273fc:	460d      	mov	r5, r1
	if (!err) {
   273fe:	4616      	mov	r6, r2
   27400:	b12a      	cbz	r2, 2740e <att_req_sent+0x16>
	chan_req_sent(conn, user_data, err);
   27402:	4632      	mov	r2, r6
   27404:	4629      	mov	r1, r5
   27406:	4620      	mov	r0, r4
   27408:	f7ff fd1c 	bl	26e44 <chan_req_sent>
}
   2740c:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   2740e:	f7ff ffcf 	bl	273b0 <att_sent>
   27412:	e7f6      	b.n	27402 <att_req_sent+0xa>

00027414 <att_cfm_sent>:
{
   27414:	b570      	push	{r4, r5, r6, lr}
   27416:	4604      	mov	r4, r0
   27418:	460d      	mov	r5, r1
	if (!err) {
   2741a:	4616      	mov	r6, r2
   2741c:	b12a      	cbz	r2, 2742a <att_cfm_sent+0x16>
	chan_cfm_sent(conn, user_data, err);
   2741e:	4632      	mov	r2, r6
   27420:	4629      	mov	r1, r5
   27422:	4620      	mov	r0, r4
   27424:	f7ff fd1e 	bl	26e64 <chan_cfm_sent>
}
   27428:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   2742a:	f7ff ffc1 	bl	273b0 <att_sent>
   2742e:	e7f6      	b.n	2741e <att_cfm_sent+0xa>

00027430 <att_rsp_sent>:
{
   27430:	b570      	push	{r4, r5, r6, lr}
   27432:	4604      	mov	r4, r0
   27434:	460d      	mov	r5, r1
	if (!err) {
   27436:	4616      	mov	r6, r2
   27438:	b12a      	cbz	r2, 27446 <att_rsp_sent+0x16>
	chan_rsp_sent(conn, user_data, err);
   2743a:	4632      	mov	r2, r6
   2743c:	4629      	mov	r1, r5
   2743e:	4620      	mov	r0, r4
   27440:	f7ff fd23 	bl	26e8a <chan_rsp_sent>
}
   27444:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   27446:	f7ff ffb3 	bl	273b0 <att_sent>
   2744a:	e7f6      	b.n	2743a <att_rsp_sent+0xa>

0002744c <send_err_rsp>:
	if (!req) {
   2744c:	b901      	cbnz	r1, 27450 <send_err_rsp+0x4>
   2744e:	4770      	bx	lr
{
   27450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27454:	4606      	mov	r6, r0
   27456:	4615      	mov	r5, r2
   27458:	461c      	mov	r4, r3
   2745a:	460f      	mov	r7, r1
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2745c:	2204      	movs	r2, #4
   2745e:	2101      	movs	r1, #1
   27460:	f7f4 fac0 	bl	1b9e4 <bt_att_chan_create_pdu>
	if (!buf) {
   27464:	4680      	mov	r8, r0
   27466:	b158      	cbz	r0, 27480 <send_err_rsp+0x34>
   27468:	2104      	movs	r1, #4
   2746a:	300c      	adds	r0, #12
   2746c:	f000 ff95 	bl	2839a <net_buf_simple_add>
	rsp->request = req;
   27470:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
   27472:	f8a0 5001 	strh.w	r5, [r0, #1]
	rsp->error = err;
   27476:	70c4      	strb	r4, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   27478:	4641      	mov	r1, r8
   2747a:	4630      	mov	r0, r6
   2747c:	f7ff fddd 	bl	2703a <bt_att_chan_send_rsp>
}
   27480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027484 <att_write_cmd>:
{
   27484:	b530      	push	{r4, r5, lr}
   27486:	b085      	sub	sp, #20
   27488:	4605      	mov	r5, r0
   2748a:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   2748c:	f101 000c 	add.w	r0, r1, #12
   27490:	f000 ffb4 	bl	283fc <net_buf_simple_pull_le16>
   27494:	4603      	mov	r3, r0
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   27496:	68e2      	ldr	r2, [r4, #12]
   27498:	8a21      	ldrh	r1, [r4, #16]
   2749a:	9102      	str	r1, [sp, #8]
   2749c:	9201      	str	r2, [sp, #4]
   2749e:	2100      	movs	r1, #0
   274a0:	9100      	str	r1, [sp, #0]
   274a2:	460a      	mov	r2, r1
   274a4:	4628      	mov	r0, r5
   274a6:	f7f4 fcef 	bl	1be88 <att_write_rsp>
}
   274aa:	b005      	add	sp, #20
   274ac:	bd30      	pop	{r4, r5, pc}

000274ae <att_write_req>:
{
   274ae:	b530      	push	{r4, r5, lr}
   274b0:	b085      	sub	sp, #20
   274b2:	4605      	mov	r5, r0
   274b4:	460c      	mov	r4, r1
   274b6:	f101 000c 	add.w	r0, r1, #12
   274ba:	f000 ff9f 	bl	283fc <net_buf_simple_pull_le16>
   274be:	4603      	mov	r3, r0
			     handle, 0, buf->data, buf->len);
   274c0:	68e2      	ldr	r2, [r4, #12]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   274c2:	8a21      	ldrh	r1, [r4, #16]
   274c4:	9102      	str	r1, [sp, #8]
   274c6:	9201      	str	r2, [sp, #4]
   274c8:	2200      	movs	r2, #0
   274ca:	9200      	str	r2, [sp, #0]
   274cc:	2213      	movs	r2, #19
   274ce:	2112      	movs	r1, #18
   274d0:	4628      	mov	r0, r5
   274d2:	f7f4 fcd9 	bl	1be88 <att_write_rsp>
}
   274d6:	b005      	add	sp, #20
   274d8:	bd30      	pop	{r4, r5, pc}

000274da <att_read_group_req>:
{
   274da:	b5f0      	push	{r4, r5, r6, r7, lr}
   274dc:	b089      	sub	sp, #36	; 0x24
   274de:	4605      	mov	r5, r0
   274e0:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   274e2:	7c0c      	ldrb	r4, [r1, #16]
   274e4:	3c04      	subs	r4, #4
   274e6:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   274e8:	2c02      	cmp	r4, #2
   274ea:	d001      	beq.n	274f0 <att_read_group_req+0x16>
   274ec:	2c10      	cmp	r4, #16
   274ee:	d142      	bne.n	27576 <att_read_group_req+0x9c>
	return net_buf_simple_pull_mem(&buf->b, len);
   274f0:	2104      	movs	r1, #4
   274f2:	300c      	adds	r0, #12
   274f4:	f000 ff72 	bl	283dc <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   274f8:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   274fa:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   274fc:	4622      	mov	r2, r4
   274fe:	1d01      	adds	r1, r0, #4
   27500:	a801      	add	r0, sp, #4
   27502:	f7fe fe2e 	bl	26162 <bt_uuid_create>
   27506:	b3c8      	cbz	r0, 2757c <att_read_group_req+0xa2>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   27508:	f10d 0216 	add.w	r2, sp, #22
   2750c:	4639      	mov	r1, r7
   2750e:	4630      	mov	r0, r6
   27510:	f7ff fb78 	bl	26c04 <range_is_valid>
   27514:	b1f0      	cbz	r0, 27554 <att_read_group_req+0x7a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   27516:	2300      	movs	r3, #0
   27518:	f88d 3018 	strb.w	r3, [sp, #24]
   2751c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   27520:	f8ad 301a 	strh.w	r3, [sp, #26]
   27524:	a906      	add	r1, sp, #24
   27526:	a801      	add	r0, sp, #4
   27528:	f7fe fdfd 	bl	26126 <bt_uuid_cmp>
   2752c:	b158      	cbz	r0, 27546 <att_read_group_req+0x6c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   2752e:	2300      	movs	r3, #0
   27530:	f88d 301c 	strb.w	r3, [sp, #28]
   27534:	f642 0301 	movw	r3, #10241	; 0x2801
   27538:	f8ad 301e 	strh.w	r3, [sp, #30]
   2753c:	a907      	add	r1, sp, #28
   2753e:	a801      	add	r0, sp, #4
   27540:	f7fe fdf1 	bl	26126 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   27544:	b978      	cbnz	r0, 27566 <att_read_group_req+0x8c>
	return att_read_group_rsp(chan, &u.uuid, start_handle, end_handle);
   27546:	463b      	mov	r3, r7
   27548:	4632      	mov	r2, r6
   2754a:	a901      	add	r1, sp, #4
   2754c:	4628      	mov	r0, r5
   2754e:	f7f4 fd7f 	bl	1c050 <att_read_group_rsp>
   27552:	e011      	b.n	27578 <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, err_handle,
   27554:	2301      	movs	r3, #1
   27556:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2755a:	2110      	movs	r1, #16
   2755c:	4628      	mov	r0, r5
   2755e:	f7ff ff75 	bl	2744c <send_err_rsp>
		return 0;
   27562:	2000      	movs	r0, #0
   27564:	e008      	b.n	27578 <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   27566:	2310      	movs	r3, #16
   27568:	4632      	mov	r2, r6
   2756a:	4619      	mov	r1, r3
   2756c:	4628      	mov	r0, r5
   2756e:	f7ff ff6d 	bl	2744c <send_err_rsp>
		return 0;
   27572:	2000      	movs	r0, #0
   27574:	e000      	b.n	27578 <att_read_group_req+0x9e>
		return BT_ATT_ERR_INVALID_PDU;
   27576:	2004      	movs	r0, #4
}
   27578:	b009      	add	sp, #36	; 0x24
   2757a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_UNLIKELY;
   2757c:	200e      	movs	r0, #14
   2757e:	e7fb      	b.n	27578 <att_read_group_req+0x9e>

00027580 <att_read_blob_req>:
{
   27580:	b500      	push	{lr}
   27582:	b083      	sub	sp, #12
	req = (void *)buf->data;
   27584:	68ca      	ldr	r2, [r1, #12]
	handle = sys_le16_to_cpu(req->handle);
   27586:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
   27588:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2758a:	9200      	str	r2, [sp, #0]
   2758c:	220d      	movs	r2, #13
   2758e:	210c      	movs	r1, #12
   27590:	f7f4 fe52 	bl	1c238 <att_read_rsp>
}
   27594:	b003      	add	sp, #12
   27596:	f85d fb04 	ldr.w	pc, [sp], #4

0002759a <att_read_req>:
{
   2759a:	b500      	push	{lr}
   2759c:	b083      	sub	sp, #12
	req = (void *)buf->data;
   2759e:	68cb      	ldr	r3, [r1, #12]
	handle = sys_le16_to_cpu(req->handle);
   275a0:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   275a2:	2200      	movs	r2, #0
   275a4:	9200      	str	r2, [sp, #0]
   275a6:	220b      	movs	r2, #11
   275a8:	210a      	movs	r1, #10
   275aa:	f7f4 fe45 	bl	1c238 <att_read_rsp>
}
   275ae:	b003      	add	sp, #12
   275b0:	f85d fb04 	ldr.w	pc, [sp], #4

000275b4 <att_read_type_req>:
{
   275b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   275b6:	b087      	sub	sp, #28
   275b8:	4605      	mov	r5, r0
   275ba:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   275bc:	7c0c      	ldrb	r4, [r1, #16]
   275be:	3c04      	subs	r4, #4
   275c0:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   275c2:	2c02      	cmp	r4, #2
   275c4:	d001      	beq.n	275ca <att_read_type_req+0x16>
   275c6:	2c10      	cmp	r4, #16
   275c8:	d123      	bne.n	27612 <att_read_type_req+0x5e>
   275ca:	2104      	movs	r1, #4
   275cc:	300c      	adds	r0, #12
   275ce:	f000 ff05 	bl	283dc <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   275d2:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   275d4:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   275d6:	4622      	mov	r2, r4
   275d8:	1d01      	adds	r1, r0, #4
   275da:	a801      	add	r0, sp, #4
   275dc:	f7fe fdc1 	bl	26162 <bt_uuid_create>
   275e0:	b1c8      	cbz	r0, 27616 <att_read_type_req+0x62>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   275e2:	f10d 0216 	add.w	r2, sp, #22
   275e6:	4639      	mov	r1, r7
   275e8:	4630      	mov	r0, r6
   275ea:	f7ff fb0b 	bl	26c04 <range_is_valid>
   275ee:	b138      	cbz	r0, 27600 <att_read_type_req+0x4c>
	return att_read_type_rsp(chan, &u.uuid, start_handle, end_handle);
   275f0:	463b      	mov	r3, r7
   275f2:	4632      	mov	r2, r6
   275f4:	a901      	add	r1, sp, #4
   275f6:	4628      	mov	r0, r5
   275f8:	f7f4 fe78 	bl	1c2ec <att_read_type_rsp>
}
   275fc:	b007      	add	sp, #28
   275fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, err_handle,
   27600:	2301      	movs	r3, #1
   27602:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   27606:	2108      	movs	r1, #8
   27608:	4628      	mov	r0, r5
   2760a:	f7ff ff1f 	bl	2744c <send_err_rsp>
		return 0;
   2760e:	2000      	movs	r0, #0
   27610:	e7f4      	b.n	275fc <att_read_type_req+0x48>
		return BT_ATT_ERR_INVALID_PDU;
   27612:	2004      	movs	r0, #4
   27614:	e7f2      	b.n	275fc <att_read_type_req+0x48>
		return BT_ATT_ERR_UNLIKELY;
   27616:	200e      	movs	r0, #14
   27618:	e7f0      	b.n	275fc <att_read_type_req+0x48>

0002761a <att_find_type_req>:
{
   2761a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2761e:	b087      	sub	sp, #28
   27620:	4607      	mov	r7, r0
   27622:	460c      	mov	r4, r1
   27624:	2106      	movs	r1, #6
   27626:	f104 000c 	add.w	r0, r4, #12
   2762a:	f000 fed7 	bl	283dc <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2762e:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   27630:	8846      	ldrh	r6, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   27632:	f8b0 8004 	ldrh.w	r8, [r0, #4]
	value = buf->data;
   27636:	f8d4 900c 	ldr.w	r9, [r4, #12]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2763a:	f10d 020e 	add.w	r2, sp, #14
   2763e:	4631      	mov	r1, r6
   27640:	4628      	mov	r0, r5
   27642:	f7ff fadf 	bl	26c04 <range_is_valid>
   27646:	b1d0      	cbz	r0, 2767e <att_find_type_req+0x64>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   27648:	2300      	movs	r3, #0
   2764a:	f88d 3010 	strb.w	r3, [sp, #16]
   2764e:	f8ad 8012 	strh.w	r8, [sp, #18]
   27652:	f88d 3014 	strb.w	r3, [sp, #20]
   27656:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2765a:	f8ad 3016 	strh.w	r3, [sp, #22]
   2765e:	a905      	add	r1, sp, #20
   27660:	a804      	add	r0, sp, #16
   27662:	f7fe fd60 	bl	26126 <bt_uuid_cmp>
   27666:	b998      	cbnz	r0, 27690 <att_find_type_req+0x76>
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   27668:	7c23      	ldrb	r3, [r4, #16]
   2766a:	9300      	str	r3, [sp, #0]
   2766c:	464b      	mov	r3, r9
   2766e:	4632      	mov	r2, r6
   27670:	4629      	mov	r1, r5
   27672:	4638      	mov	r0, r7
   27674:	f7f4 fe84 	bl	1c380 <att_find_type_rsp>
}
   27678:	b007      	add	sp, #28
   2767a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
   2767e:	2301      	movs	r3, #1
   27680:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   27684:	2106      	movs	r1, #6
   27686:	4638      	mov	r0, r7
   27688:	f7ff fee0 	bl	2744c <send_err_rsp>
		return 0;
   2768c:	2000      	movs	r0, #0
   2768e:	e7f3      	b.n	27678 <att_find_type_req+0x5e>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   27690:	230a      	movs	r3, #10
   27692:	462a      	mov	r2, r5
   27694:	2106      	movs	r1, #6
   27696:	4638      	mov	r0, r7
   27698:	f7ff fed8 	bl	2744c <send_err_rsp>
		return 0;
   2769c:	2000      	movs	r0, #0
   2769e:	e7eb      	b.n	27678 <att_find_type_req+0x5e>

000276a0 <att_find_info_req>:
{
   276a0:	b570      	push	{r4, r5, r6, lr}
   276a2:	b082      	sub	sp, #8
   276a4:	4604      	mov	r4, r0
	req = (void *)buf->data;
   276a6:	68cb      	ldr	r3, [r1, #12]
	start_handle = sys_le16_to_cpu(req->start_handle);
   276a8:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   276aa:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   276ac:	f10d 0206 	add.w	r2, sp, #6
   276b0:	4631      	mov	r1, r6
   276b2:	4628      	mov	r0, r5
   276b4:	f7ff faa6 	bl	26c04 <range_is_valid>
   276b8:	b130      	cbz	r0, 276c8 <att_find_info_req+0x28>
	return att_find_info_rsp(chan, start_handle, end_handle);
   276ba:	4632      	mov	r2, r6
   276bc:	4629      	mov	r1, r5
   276be:	4620      	mov	r0, r4
   276c0:	f7f4 fea8 	bl	1c414 <att_find_info_rsp>
}
   276c4:	b002      	add	sp, #8
   276c6:	bd70      	pop	{r4, r5, r6, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, err_handle,
   276c8:	2301      	movs	r3, #1
   276ca:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   276ce:	2104      	movs	r1, #4
   276d0:	4620      	mov	r0, r4
   276d2:	f7ff febb 	bl	2744c <send_err_rsp>
		return 0;
   276d6:	2000      	movs	r0, #0
   276d8:	e7f4      	b.n	276c4 <att_find_info_req+0x24>

000276da <att_mtu_req>:
{
   276da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   276dc:	4604      	mov	r4, r0
   276de:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->att->conn;
   276e0:	f850 3b90 	ldr.w	r3, [r0], #144
   276e4:	681f      	ldr	r7, [r3, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   276e6:	2103      	movs	r1, #3
   276e8:	f7ff fae2 	bl	26cb0 <atomic_test_bit>
   276ec:	bb00      	cbnz	r0, 27730 <att_mtu_req+0x56>
	req = (void *)buf->data;
   276ee:	68eb      	ldr	r3, [r5, #12]
	mtu_client = sys_le16_to_cpu(req->mtu);
   276f0:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   276f2:	2e16      	cmp	r6, #22
   276f4:	d91e      	bls.n	27734 <att_mtu_req+0x5a>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   276f6:	2202      	movs	r2, #2
   276f8:	2103      	movs	r1, #3
   276fa:	4638      	mov	r0, r7
   276fc:	f7f4 fc34 	bl	1bf68 <bt_att_create_pdu>
	if (!pdu) {
   27700:	4607      	mov	r7, r0
   27702:	b1c8      	cbz	r0, 27738 <att_mtu_req+0x5e>
	return net_buf_simple_add(&buf->b, len);
   27704:	2102      	movs	r1, #2
   27706:	300c      	adds	r0, #12
   27708:	f000 fe47 	bl	2839a <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2770c:	2500      	movs	r5, #0
   2770e:	2317      	movs	r3, #23
   27710:	7003      	strb	r3, [r0, #0]
   27712:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   27714:	4639      	mov	r1, r7
   27716:	4620      	mov	r0, r4
   27718:	f7ff fc8f 	bl	2703a <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2771c:	2e17      	cmp	r6, #23
   2771e:	bf28      	it	cs
   27720:	2617      	movcs	r6, #23
   27722:	8366      	strh	r6, [r4, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   27724:	8566      	strh	r6, [r4, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   27726:	4620      	mov	r0, r4
   27728:	f7ff fdf1 	bl	2730e <att_chan_mtu_updated>
	return 0;
   2772c:	4628      	mov	r0, r5
}
   2772e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   27730:	2006      	movs	r0, #6
   27732:	e7fc      	b.n	2772e <att_mtu_req+0x54>
		return BT_ATT_ERR_INVALID_PDU;
   27734:	2004      	movs	r0, #4
   27736:	e7fa      	b.n	2772e <att_mtu_req+0x54>
		return BT_ATT_ERR_UNLIKELY;
   27738:	200e      	movs	r0, #14
   2773a:	e7f8      	b.n	2772e <att_mtu_req+0x54>

0002773c <att_confirm>:
{
   2773c:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2773e:	2300      	movs	r3, #0
   27740:	8a0a      	ldrh	r2, [r1, #16]
   27742:	68c9      	ldr	r1, [r1, #12]
   27744:	f7f4 fef6 	bl	1c534 <att_handle_rsp>
}
   27748:	bd08      	pop	{r3, pc}

0002774a <att_chan_detach>:
{
   2774a:	b538      	push	{r3, r4, r5, lr}
   2774c:	4605      	mov	r5, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   2774e:	4601      	mov	r1, r0
   27750:	f851 0be0 	ldr.w	r0, [r1], #224
   27754:	3024      	adds	r0, #36	; 0x24
   27756:	f7ff fa3a 	bl	26bce <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   2775a:	e005      	b.n	27768 <att_chan_detach+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2775c:	69a0      	ldr	r0, [r4, #24]
   2775e:	f7f3 feb3 	bl	1b4c8 <tx_meta_data_free>
		net_buf_unref(buf);
   27762:	4620      	mov	r0, r4
   27764:	f000 fdd2 	bl	2830c <net_buf_unref>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   27768:	2200      	movs	r2, #0
   2776a:	2300      	movs	r3, #0
   2776c:	f105 0098 	add.w	r0, r5, #152	; 0x98
   27770:	f000 fd92 	bl	28298 <net_buf_get>
   27774:	4604      	mov	r4, r0
   27776:	2800      	cmp	r0, #0
   27778:	d1f0      	bne.n	2775c <att_chan_detach+0x12>
	if (chan->req) {
   2777a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   2777e:	b12b      	cbz	r3, 2778c <att_chan_detach+0x42>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   27780:	230e      	movs	r3, #14
   27782:	2200      	movs	r2, #0
   27784:	4611      	mov	r1, r2
   27786:	4628      	mov	r0, r5
   27788:	f7f4 fed4 	bl	1c534 <att_handle_rsp>
	chan->att = NULL;
   2778c:	2300      	movs	r3, #0
   2778e:	602b      	str	r3, [r5, #0]
}
   27790:	bd38      	pop	{r3, r4, r5, pc}

00027792 <bt_att_disconnected>:
{
   27792:	b538      	push	{r3, r4, r5, lr}
   27794:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   27796:	f850 5c04 	ldr.w	r5, [r0, #-4]
	if (!att_chan->att) {
   2779a:	b125      	cbz	r5, 277a6 <bt_att_disconnected+0x14>
   2779c:	3804      	subs	r0, #4
	att_chan_detach(att_chan);
   2779e:	f7ff ffd4 	bl	2774a <att_chan_detach>
	return list->head;
   277a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (!sys_slist_is_empty(&att->chans)) {
   277a4:	b103      	cbz	r3, 277a8 <bt_att_disconnected+0x16>
}
   277a6:	bd38      	pop	{r3, r4, r5, pc}
	att_reset(att);
   277a8:	4628      	mov	r0, r5
   277aa:	f7f4 ff21 	bl	1c5f0 <att_reset>
	bt_gatt_disconnected(le_chan->chan.conn);
   277ae:	6820      	ldr	r0, [r4, #0]
   277b0:	f7f6 f87e 	bl	1d8b0 <bt_gatt_disconnected>
   277b4:	e7f7      	b.n	277a6 <bt_att_disconnected+0x14>

000277b6 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   277b6:	b538      	push	{r3, r4, r5, lr}
   277b8:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   277ba:	f7f3 fd13 	bl	1b1e4 <att_get>
	if (!att) {
   277be:	b148      	cbz	r0, 277d4 <bt_att_send+0x1e>
   277c0:	4605      	mov	r5, r0
		tx_meta_data_free(bt_att_tx_meta_data(buf));
		net_buf_unref(buf);
		return -ENOTCONN;
	}

	net_buf_put(&att->tx_queue, buf);
   277c2:	4621      	mov	r1, r4
   277c4:	300c      	adds	r0, #12
   277c6:	f000 fd9d 	bl	28304 <net_buf_put>
	att_send_process(att);
   277ca:	4628      	mov	r0, r5
   277cc:	f7ff fbcb 	bl	26f66 <att_send_process>

	return 0;
   277d0:	2000      	movs	r0, #0
}
   277d2:	bd38      	pop	{r3, r4, r5, pc}
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   277d4:	69a0      	ldr	r0, [r4, #24]
   277d6:	f7f3 fe77 	bl	1b4c8 <tx_meta_data_free>
		net_buf_unref(buf);
   277da:	4620      	mov	r0, r4
   277dc:	f000 fd96 	bl	2830c <net_buf_unref>
		return -ENOTCONN;
   277e0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   277e4:	e7f5      	b.n	277d2 <bt_att_send+0x1c>

000277e6 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   277e6:	b510      	push	{r4, lr}
   277e8:	460c      	mov	r4, r1
	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   277ea:	f7f3 fcfb 	bl	1b1e4 <att_get>
	if (!att) {
   277ee:	b170      	cbz	r0, 2780e <bt_att_req_send+0x28>
   277f0:	4603      	mov	r3, r0
	parent->next = child;
   277f2:	2200      	movs	r2, #0
   277f4:	6022      	str	r2, [r4, #0]
	return list->tail;
   277f6:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   277f8:	b132      	cbz	r2, 27808 <bt_att_req_send+0x22>
	parent->next = child;
   277fa:	6014      	str	r4, [r2, #0]
	list->tail = node;
   277fc:	6084      	str	r4, [r0, #8]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   277fe:	4618      	mov	r0, r3
   27800:	f7ff fad1 	bl	26da6 <att_req_send_process>

	return 0;
   27804:	2000      	movs	r0, #0
}
   27806:	bd10      	pop	{r4, pc}
   27808:	6084      	str	r4, [r0, #8]
	list->head = node;
   2780a:	6044      	str	r4, [r0, #4]
}
   2780c:	e7f7      	b.n	277fe <bt_att_req_send+0x18>
		return -ENOTCONN;
   2780e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   27812:	e7f8      	b.n	27806 <bt_att_req_send+0x20>

00027814 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   27814:	2001      	movs	r0, #1
   27816:	4770      	bx	lr

00027818 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   27818:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   2781a:	f7f3 fce3 	bl	1b1e4 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   2781e:	b1b8      	cbz	r0, 27850 <bt_att_clear_out_of_sync_sent+0x38>
	return list->head;
   27820:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   27822:	b103      	cbz	r3, 27826 <bt_att_clear_out_of_sync_sent+0xe>
   27824:	3be0      	subs	r3, #224	; 0xe0
   27826:	b19b      	cbz	r3, 27850 <bt_att_clear_out_of_sync_sent+0x38>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
   27828:	f103 0290 	add.w	r2, r3, #144	; 0x90
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2782c:	f3bf 8f5b 	dmb	ish
   27830:	e852 0f00 	ldrex	r0, [r2]
   27834:	f020 0020 	bic.w	r0, r0, #32
   27838:	e842 0100 	strex	r1, r0, [r2]
   2783c:	2900      	cmp	r1, #0
   2783e:	d1f7      	bne.n	27830 <bt_att_clear_out_of_sync_sent+0x18>
   27840:	f3bf 8f5b 	dmb	ish
	return node->next;
   27844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   27848:	2b00      	cmp	r3, #0
   2784a:	d0ec      	beq.n	27826 <bt_att_clear_out_of_sync_sent+0xe>
   2784c:	3be0      	subs	r3, #224	; 0xe0
   2784e:	e7ea      	b.n	27826 <bt_att_clear_out_of_sync_sent+0xe>
	}
}
   27850:	bd08      	pop	{r3, pc}

00027852 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   27852:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   27854:	2104      	movs	r1, #4
   27856:	f7ff f967 	bl	26b28 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   2785a:	b120      	cbz	r0, 27866 <bt_att_out_of_sync_sent_on_fixed+0x14>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   2785c:	2105      	movs	r1, #5
   2785e:	308c      	adds	r0, #140	; 0x8c
   27860:	f7ff fa26 	bl	26cb0 <atomic_test_bit>
}
   27864:	bd08      	pop	{r3, pc}
		return false;
   27866:	2000      	movs	r0, #0
   27868:	e7fc      	b.n	27864 <bt_att_out_of_sync_sent_on_fixed+0x12>

0002786a <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   2786a:	6980      	ldr	r0, [r0, #24]

	data->func = func;
   2786c:	6081      	str	r1, [r0, #8]
	data->user_data = user_data;
   2786e:	60c2      	str	r2, [r0, #12]
	data->attr_count = 1;
   27870:	2201      	movs	r2, #1
   27872:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   27874:	7403      	strb	r3, [r0, #16]
}
   27876:	4770      	bx	lr

00027878 <sys_mem_swap>:
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   27878:	2300      	movs	r3, #0
   2787a:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   2787e:	d210      	bcs.n	278a2 <sys_mem_swap+0x2a>
{
   27880:	b500      	push	{lr}
		uint8_t tmp = ((uint8_t *)buf)[i];
   27882:	f810 c003 	ldrb.w	ip, [r0, r3]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   27886:	1aca      	subs	r2, r1, r3
   27888:	3a01      	subs	r2, #1
   2788a:	f810 e002 	ldrb.w	lr, [r0, r2]
   2788e:	f800 e003 	strb.w	lr, [r0, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   27892:	f800 c002 	strb.w	ip, [r0, r2]
	for (i = 0; i < (length/2); i++) {
   27896:	3301      	adds	r3, #1
   27898:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   2789c:	d3f1      	bcc.n	27882 <sys_mem_swap+0xa>
	}
}
   2789e:	f85d fb04 	ldr.w	pc, [sp], #4
   278a2:	4770      	bx	lr

000278a4 <update_range>:
	if (new_start >= *start && new_end <= *end) {
   278a4:	f8b0 c000 	ldrh.w	ip, [r0]
   278a8:	4562      	cmp	r2, ip
   278aa:	d312      	bcc.n	278d2 <update_range+0x2e>
{
   278ac:	b500      	push	{lr}
	if (new_start >= *start && new_end <= *end) {
   278ae:	f8b1 e000 	ldrh.w	lr, [r1]
   278b2:	4573      	cmp	r3, lr
   278b4:	d908      	bls.n	278c8 <update_range+0x24>
	if (*start > new_start) {
   278b6:	4562      	cmp	r2, ip
   278b8:	d200      	bcs.n	278bc <update_range+0x18>
		*start = new_start;
   278ba:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   278bc:	880a      	ldrh	r2, [r1, #0]
   278be:	4293      	cmp	r3, r2
   278c0:	d904      	bls.n	278cc <update_range+0x28>
		*end = new_end;
   278c2:	800b      	strh	r3, [r1, #0]
	return true;
   278c4:	2001      	movs	r0, #1
   278c6:	e002      	b.n	278ce <update_range+0x2a>
		return false;
   278c8:	2000      	movs	r0, #0
   278ca:	e000      	b.n	278ce <update_range+0x2a>
	return true;
   278cc:	2001      	movs	r0, #1
}
   278ce:	f85d fb04 	ldr.w	pc, [sp], #4
	if (*start > new_start) {
   278d2:	4562      	cmp	r2, ip
   278d4:	d200      	bcs.n	278d8 <update_range+0x34>
		*start = new_start;
   278d6:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   278d8:	880a      	ldrh	r2, [r1, #0]
   278da:	4293      	cmp	r3, r2
   278dc:	d902      	bls.n	278e4 <update_range+0x40>
		*end = new_end;
   278de:	800b      	strh	r3, [r1, #0]
	return true;
   278e0:	2001      	movs	r0, #1
   278e2:	4770      	bx	lr
   278e4:	2001      	movs	r0, #1
}
   278e6:	4770      	bx	lr

000278e8 <cf_set_value>:
{
   278e8:	b510      	push	{r4, lr}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   278ea:	2300      	movs	r3, #0
   278ec:	e001      	b.n	278f2 <cf_set_value+0xa>
   278ee:	3301      	adds	r3, #1
   278f0:	b29b      	uxth	r3, r3
   278f2:	2b02      	cmp	r3, #2
   278f4:	d819      	bhi.n	2792a <cf_set_value+0x42>
   278f6:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
   278fa:	ebb2 0fd3 	cmp.w	r2, r3, lsr #3
   278fe:	d912      	bls.n	27926 <cf_set_value+0x3e>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   27900:	eb00 040c 	add.w	r4, r0, ip
   27904:	7a24      	ldrb	r4, [r4, #8]
   27906:	f003 0e07 	and.w	lr, r3, #7
   2790a:	fa24 f40e 	lsr.w	r4, r4, lr
   2790e:	f014 0f01 	tst.w	r4, #1
   27912:	d0ec      	beq.n	278ee <cf_set_value+0x6>
		    !(value[i / 8] & BIT(i % 8))) {
   27914:	f811 400c 	ldrb.w	r4, [r1, ip]
   27918:	fa24 f40e 	lsr.w	r4, r4, lr
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2791c:	f014 0f01 	tst.w	r4, #1
   27920:	d1e5      	bne.n	278ee <cf_set_value+0x6>
			return false;
   27922:	2000      	movs	r0, #0
   27924:	e016      	b.n	27954 <cf_set_value+0x6c>
   27926:	2300      	movs	r3, #0
   27928:	e000      	b.n	2792c <cf_set_value+0x44>
   2792a:	2300      	movs	r3, #0
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   2792c:	4293      	cmp	r3, r2
   2792e:	d210      	bcs.n	27952 <cf_set_value+0x6a>
   27930:	b96b      	cbnz	r3, 2794e <cf_set_value+0x66>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   27932:	18c4      	adds	r4, r0, r3
   27934:	f894 c008 	ldrb.w	ip, [r4, #8]
   27938:	f811 e003 	ldrb.w	lr, [r1, r3]
   2793c:	f00e 0e07 	and.w	lr, lr, #7
   27940:	ea4c 0c0e 	orr.w	ip, ip, lr
   27944:	f884 c008 	strb.w	ip, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   27948:	3301      	adds	r3, #1
   2794a:	b29b      	uxth	r3, r3
   2794c:	e7ee      	b.n	2792c <cf_set_value+0x44>
	return true;
   2794e:	2001      	movs	r0, #1
   27950:	e000      	b.n	27954 <cf_set_value+0x6c>
   27952:	2001      	movs	r0, #1
}
   27954:	bd10      	pop	{r4, pc}

00027956 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   27956:	6010      	str	r0, [r2, #0]
}
   27958:	2000      	movs	r0, #0
   2795a:	4770      	bx	lr

0002795c <gatt_ccc_changed>:
{
   2795c:	b508      	push	{r3, lr}
   2795e:	468c      	mov	ip, r1
	uint16_t value = 0x0000;
   27960:	2100      	movs	r1, #0
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   27962:	460b      	mov	r3, r1
   27964:	e000      	b.n	27968 <gatt_ccc_changed+0xc>
   27966:	3301      	adds	r3, #1
   27968:	2b07      	cmp	r3, #7
   2796a:	d808      	bhi.n	2797e <gatt_ccc_changed+0x22>
		if (ccc->cfg[i].value > value) {
   2796c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   27970:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
   27974:	8912      	ldrh	r2, [r2, #8]
   27976:	428a      	cmp	r2, r1
   27978:	d9f5      	bls.n	27966 <gatt_ccc_changed+0xa>
			value = ccc->cfg[i].value;
   2797a:	4611      	mov	r1, r2
   2797c:	e7f3      	b.n	27966 <gatt_ccc_changed+0xa>
	if (value != ccc->value) {
   2797e:	f8bc 3050 	ldrh.w	r3, [ip, #80]	; 0x50
   27982:	4299      	cmp	r1, r3
   27984:	d005      	beq.n	27992 <gatt_ccc_changed+0x36>
		ccc->value = value;
   27986:	f8ac 1050 	strh.w	r1, [ip, #80]	; 0x50
		if (ccc->cfg_changed) {
   2798a:	f8dc 3054 	ldr.w	r3, [ip, #84]	; 0x54
   2798e:	b103      	cbz	r3, 27992 <gatt_ccc_changed+0x36>
			ccc->cfg_changed(attr, value);
   27990:	4798      	blx	r3
}
   27992:	bd08      	pop	{r3, pc}

00027994 <gatt_indicate_rsp>:
{
   27994:	b510      	push	{r4, lr}
   27996:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   27998:	68a3      	ldr	r3, [r4, #8]
   2799a:	b113      	cbz	r3, 279a2 <gatt_indicate_rsp+0xe>
   2799c:	460a      	mov	r2, r1
		params->func(conn, params, err);
   2799e:	4621      	mov	r1, r4
   279a0:	4798      	blx	r3
	params->_ref--;
   279a2:	7da3      	ldrb	r3, [r4, #22]
   279a4:	3b01      	subs	r3, #1
   279a6:	b2db      	uxtb	r3, r3
   279a8:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   279aa:	68e2      	ldr	r2, [r4, #12]
   279ac:	b112      	cbz	r2, 279b4 <gatt_indicate_rsp+0x20>
   279ae:	b90b      	cbnz	r3, 279b4 <gatt_indicate_rsp+0x20>
		params->destroy(params);
   279b0:	4620      	mov	r0, r4
   279b2:	4790      	blx	r2
}
   279b4:	bd10      	pop	{r4, pc}

000279b6 <match_uuid>:
	data->attr = attr;
   279b6:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   279b8:	8091      	strh	r1, [r2, #4]
}
   279ba:	2000      	movs	r0, #0
   279bc:	4770      	bx	lr

000279be <gen_hash_m>:
{
   279be:	b5f0      	push	{r4, r5, r6, r7, lr}
   279c0:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   279c2:	6806      	ldr	r6, [r0, #0]
   279c4:	7835      	ldrb	r5, [r6, #0]
   279c6:	2d00      	cmp	r5, #0
   279c8:	d160      	bne.n	27a8c <gen_hash_m+0xce>
   279ca:	4607      	mov	r7, r0
   279cc:	4614      	mov	r4, r2
	switch (u16->val) {
   279ce:	8873      	ldrh	r3, [r6, #2]
   279d0:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   279d4:	d019      	beq.n	27a0a <gen_hash_m+0x4c>
   279d6:	d913      	bls.n	27a00 <gen_hash_m+0x42>
   279d8:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   279dc:	33ff      	adds	r3, #255	; 0xff
   279de:	b29b      	uxth	r3, r3
   279e0:	2b04      	cmp	r3, #4
   279e2:	d859      	bhi.n	27a98 <gen_hash_m+0xda>
		value = sys_cpu_to_le16(handle);
   279e4:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   279e8:	2202      	movs	r2, #2
   279ea:	f10d 010a 	add.w	r1, sp, #10
   279ee:	4620      	mov	r0, r4
   279f0:	f7fe f98d 	bl	25d0e <tc_cmac_update>
   279f4:	2800      	cmp	r0, #0
   279f6:	d139      	bne.n	27a6c <gen_hash_m+0xae>
			state->err = -EINVAL;
   279f8:	f06f 0315 	mvn.w	r3, #21
   279fc:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   279fe:	e046      	b.n	27a8e <gen_hash_m+0xd0>
	switch (u16->val) {
   27a00:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   27a04:	b29b      	uxth	r3, r3
   27a06:	2b03      	cmp	r3, #3
   27a08:	d844      	bhi.n	27a94 <gen_hash_m+0xd6>
		value = sys_cpu_to_le16(handle);
   27a0a:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   27a0e:	2202      	movs	r2, #2
   27a10:	f10d 010a 	add.w	r1, sp, #10
   27a14:	4620      	mov	r0, r4
   27a16:	f7fe f97a 	bl	25d0e <tc_cmac_update>
   27a1a:	b918      	cbnz	r0, 27a24 <gen_hash_m+0x66>
			state->err = -EINVAL;
   27a1c:	f06f 0315 	mvn.w	r3, #21
   27a20:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   27a22:	e034      	b.n	27a8e <gen_hash_m+0xd0>
		value = sys_cpu_to_le16(u16->val);
   27a24:	8873      	ldrh	r3, [r6, #2]
   27a26:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   27a2a:	2202      	movs	r2, #2
   27a2c:	f10d 010a 	add.w	r1, sp, #10
   27a30:	4620      	mov	r0, r4
   27a32:	f7fe f96c 	bl	25d0e <tc_cmac_update>
   27a36:	b178      	cbz	r0, 27a58 <gen_hash_m+0x9a>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   27a38:	687e      	ldr	r6, [r7, #4]
   27a3a:	2000      	movs	r0, #0
   27a3c:	9000      	str	r0, [sp, #0]
   27a3e:	2313      	movs	r3, #19
   27a40:	aa03      	add	r2, sp, #12
   27a42:	4639      	mov	r1, r7
   27a44:	47b0      	blx	r6
		if (len < 0) {
   27a46:	1e02      	subs	r2, r0, #0
   27a48:	db0a      	blt.n	27a60 <gen_hash_m+0xa2>
		if (tc_cmac_update(&state->state, data, len) ==
   27a4a:	a903      	add	r1, sp, #12
   27a4c:	4620      	mov	r0, r4
   27a4e:	f7fe f95e 	bl	25d0e <tc_cmac_update>
   27a52:	b138      	cbz	r0, 27a64 <gen_hash_m+0xa6>
	return BT_GATT_ITER_CONTINUE;
   27a54:	2501      	movs	r5, #1
   27a56:	e01a      	b.n	27a8e <gen_hash_m+0xd0>
			state->err = -EINVAL;
   27a58:	f06f 0315 	mvn.w	r3, #21
   27a5c:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   27a5e:	e016      	b.n	27a8e <gen_hash_m+0xd0>
			state->err = len;
   27a60:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   27a62:	e014      	b.n	27a8e <gen_hash_m+0xd0>
			state->err = -EINVAL;
   27a64:	f06f 0315 	mvn.w	r3, #21
   27a68:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   27a6a:	e010      	b.n	27a8e <gen_hash_m+0xd0>
		value = sys_cpu_to_le16(u16->val);
   27a6c:	8873      	ldrh	r3, [r6, #2]
   27a6e:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   27a72:	2202      	movs	r2, #2
   27a74:	f10d 010a 	add.w	r1, sp, #10
   27a78:	4620      	mov	r0, r4
   27a7a:	f7fe f948 	bl	25d0e <tc_cmac_update>
   27a7e:	b108      	cbz	r0, 27a84 <gen_hash_m+0xc6>
	return BT_GATT_ITER_CONTINUE;
   27a80:	2501      	movs	r5, #1
   27a82:	e004      	b.n	27a8e <gen_hash_m+0xd0>
			state->err = -EINVAL;
   27a84:	f06f 0315 	mvn.w	r3, #21
   27a88:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   27a8a:	e000      	b.n	27a8e <gen_hash_m+0xd0>
		return BT_GATT_ITER_CONTINUE;
   27a8c:	2501      	movs	r5, #1
}
   27a8e:	4628      	mov	r0, r5
   27a90:	b009      	add	sp, #36	; 0x24
   27a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   27a94:	2501      	movs	r5, #1
   27a96:	e7fa      	b.n	27a8e <gen_hash_m+0xd0>
   27a98:	2501      	movs	r5, #1
   27a9a:	e7f8      	b.n	27a8e <gen_hash_m+0xd0>

00027a9c <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   27a9c:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27a9e:	f3bf 8f5b 	dmb	ish
   27aa2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   27aa6:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   27aaa:	f001 011f 	and.w	r1, r1, #31
   27aae:	4108      	asrs	r0, r1
}
   27ab0:	f000 0001 	and.w	r0, r0, #1
   27ab4:	4770      	bx	lr

00027ab6 <clear_sc_cfg>:
{
   27ab6:	b508      	push	{r3, lr}
	memset(cfg, 0, sizeof(*cfg));
   27ab8:	220c      	movs	r2, #12
   27aba:	2100      	movs	r1, #0
   27abc:	f7fe fae2 	bl	26084 <memset>
}
   27ac0:	bd08      	pop	{r3, pc}

00027ac2 <bt_gatt_clear_sc>:
{
   27ac2:	b508      	push	{r3, lr}
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   27ac4:	f7f4 fe46 	bl	1c754 <find_sc_cfg>
	if (!cfg) {
   27ac8:	b108      	cbz	r0, 27ace <bt_gatt_clear_sc+0xc>
	clear_sc_cfg(cfg);
   27aca:	f7ff fff4 	bl	27ab6 <clear_sc_cfg>
}
   27ace:	2000      	movs	r0, #0
   27ad0:	bd08      	pop	{r3, pc}

00027ad2 <sc_ccc_cfg_write>:
{
   27ad2:	b508      	push	{r3, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   27ad4:	2a02      	cmp	r2, #2
   27ad6:	d003      	beq.n	27ae0 <sc_ccc_cfg_write+0xe>
		sc_clear(conn);
   27ad8:	f7f4 ffde 	bl	1ca98 <sc_clear>
}
   27adc:	2002      	movs	r0, #2
   27ade:	bd08      	pop	{r3, pc}
		sc_save(conn->id, &conn->le.dst, 0, 0);
   27ae0:	2300      	movs	r3, #0
   27ae2:	461a      	mov	r2, r3
   27ae4:	f100 0188 	add.w	r1, r0, #136	; 0x88
   27ae8:	7a00      	ldrb	r0, [r0, #8]
   27aea:	f7f4 feeb 	bl	1c8c4 <sc_save>
   27aee:	e7f5      	b.n	27adc <sc_ccc_cfg_write+0xa>

00027af0 <sc_reset>:
{
   27af0:	b508      	push	{r3, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   27af2:	2204      	movs	r2, #4
   27af4:	2100      	movs	r1, #0
   27af6:	3008      	adds	r0, #8
   27af8:	f7fe fac4 	bl	26084 <memset>
}
   27afc:	bd08      	pop	{r3, pc}

00027afe <sc_restore_rsp>:
{
   27afe:	b538      	push	{r3, r4, r5, lr}
   27b00:	4605      	mov	r5, r0
   27b02:	4614      	mov	r4, r2
	if (bt_att_fixed_chan_only(conn)) {
   27b04:	f7ff fe86 	bl	27814 <bt_att_fixed_chan_only>
   27b08:	b908      	cbnz	r0, 27b0e <sc_restore_rsp+0x10>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   27b0a:	b1c4      	cbz	r4, 27b3e <sc_restore_rsp+0x40>
}
   27b0c:	bd38      	pop	{r3, r4, r5, pc}
		cfg = find_cf_cfg(conn);
   27b0e:	4628      	mov	r0, r5
   27b10:	f7f4 fdfa 	bl	1c708 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   27b14:	4603      	mov	r3, r0
   27b16:	2800      	cmp	r0, #0
   27b18:	d0f7      	beq.n	27b0a <sc_restore_rsp+0xc>
   27b1a:	7a02      	ldrb	r2, [r0, #8]
   27b1c:	f012 0f01 	tst.w	r2, #1
   27b20:	d0f3      	beq.n	27b0a <sc_restore_rsp+0xc>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   27b22:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27b24:	f3bf 8f5b 	dmb	ish
   27b28:	e853 1f00 	ldrex	r1, [r3]
   27b2c:	f041 0101 	orr.w	r1, r1, #1
   27b30:	e843 1200 	strex	r2, r1, [r3]
   27b34:	2a00      	cmp	r2, #0
   27b36:	d1f7      	bne.n	27b28 <sc_restore_rsp+0x2a>
   27b38:	f3bf 8f5b 	dmb	ish
			LOG_DBG("%s change-aware", bt_addr_le_str(&cfg->peer));
   27b3c:	e7e5      	b.n	27b0a <sc_restore_rsp+0xc>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   27b3e:	f105 0188 	add.w	r1, r5, #136	; 0x88
   27b42:	7a28      	ldrb	r0, [r5, #8]
   27b44:	f7f4 fe06 	bl	1c754 <find_sc_cfg>
		if (sc_cfg) {
   27b48:	2800      	cmp	r0, #0
   27b4a:	d0df      	beq.n	27b0c <sc_restore_rsp+0xe>
			sc_reset(sc_cfg);
   27b4c:	f7ff ffd0 	bl	27af0 <sc_reset>
}
   27b50:	e7dc      	b.n	27b0c <sc_restore_rsp+0xe>

00027b52 <atomic_test_and_clear_bit>:
{
   27b52:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   27b54:	f001 021f 	and.w	r2, r1, #31
   27b58:	2301      	movs	r3, #1
   27b5a:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27b5c:	0949      	lsrs	r1, r1, #5
   27b5e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   27b62:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27b64:	f3bf 8f5b 	dmb	ish
   27b68:	e850 2f00 	ldrex	r2, [r0]
   27b6c:	ea02 0c01 	and.w	ip, r2, r1
   27b70:	e840 ce00 	strex	lr, ip, [r0]
   27b74:	f1be 0f00 	cmp.w	lr, #0
   27b78:	d1f6      	bne.n	27b68 <atomic_test_and_clear_bit+0x16>
   27b7a:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   27b7e:	4213      	tst	r3, r2
}
   27b80:	bf14      	ite	ne
   27b82:	2001      	movne	r0, #1
   27b84:	2000      	moveq	r0, #0
   27b86:	f85d fb04 	ldr.w	pc, [sp], #4

00027b8a <gatt_foreach_iter>:
	if (handle > end_handle) {
   27b8a:	4299      	cmp	r1, r3
   27b8c:	d822      	bhi.n	27bd4 <gatt_foreach_iter+0x4a>
{
   27b8e:	b538      	push	{r3, r4, r5, lr}
   27b90:	4605      	mov	r5, r0
   27b92:	460c      	mov	r4, r1
	if (handle < start_handle) {
   27b94:	4291      	cmp	r1, r2
   27b96:	d31f      	bcc.n	27bd8 <gatt_foreach_iter+0x4e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   27b98:	9b04      	ldr	r3, [sp, #16]
   27b9a:	b123      	cbz	r3, 27ba6 <gatt_foreach_iter+0x1c>
   27b9c:	6801      	ldr	r1, [r0, #0]
   27b9e:	4618      	mov	r0, r3
   27ba0:	f7fe fac1 	bl	26126 <bt_uuid_cmp>
   27ba4:	b9d0      	cbnz	r0, 27bdc <gatt_foreach_iter+0x52>
	if (attr_data && attr_data != attr->user_data) {
   27ba6:	9b05      	ldr	r3, [sp, #20]
   27ba8:	b12b      	cbz	r3, 27bb6 <gatt_foreach_iter+0x2c>
   27baa:	68eb      	ldr	r3, [r5, #12]
   27bac:	9a05      	ldr	r2, [sp, #20]
   27bae:	4293      	cmp	r3, r2
   27bb0:	d001      	beq.n	27bb6 <gatt_foreach_iter+0x2c>
		return BT_GATT_ITER_CONTINUE;
   27bb2:	2001      	movs	r0, #1
   27bb4:	e011      	b.n	27bda <gatt_foreach_iter+0x50>
	*num_matches -= 1;
   27bb6:	9b06      	ldr	r3, [sp, #24]
   27bb8:	881b      	ldrh	r3, [r3, #0]
   27bba:	3b01      	subs	r3, #1
   27bbc:	9a06      	ldr	r2, [sp, #24]
   27bbe:	8013      	strh	r3, [r2, #0]
	result = func(attr, handle, user_data);
   27bc0:	9a08      	ldr	r2, [sp, #32]
   27bc2:	4621      	mov	r1, r4
   27bc4:	4628      	mov	r0, r5
   27bc6:	9b07      	ldr	r3, [sp, #28]
   27bc8:	4798      	blx	r3
	if (!*num_matches) {
   27bca:	9b06      	ldr	r3, [sp, #24]
   27bcc:	881b      	ldrh	r3, [r3, #0]
   27bce:	b923      	cbnz	r3, 27bda <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   27bd0:	2000      	movs	r0, #0
   27bd2:	e002      	b.n	27bda <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   27bd4:	2000      	movs	r0, #0
}
   27bd6:	4770      	bx	lr
		return BT_GATT_ITER_CONTINUE;
   27bd8:	2001      	movs	r0, #1
}
   27bda:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ITER_CONTINUE;
   27bdc:	2001      	movs	r0, #1
   27bde:	e7fc      	b.n	27bda <gatt_foreach_iter+0x50>

00027be0 <gatt_req_alloc>:
{
   27be0:	b538      	push	{r3, r4, r5, lr}
   27be2:	4605      	mov	r5, r0
   27be4:	460c      	mov	r4, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   27be6:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   27bea:	2100      	movs	r1, #0
   27bec:	f7f4 fc66 	bl	1c4bc <bt_att_req_alloc>
	if (!req) {
   27bf0:	4603      	mov	r3, r0
   27bf2:	b108      	cbz	r0, 27bf8 <gatt_req_alloc+0x18>
	req->func = func;
   27bf4:	6045      	str	r5, [r0, #4]
	req->user_data = params;
   27bf6:	60c4      	str	r4, [r0, #12]
}
   27bf8:	4618      	mov	r0, r3
   27bfa:	bd38      	pop	{r3, r4, r5, pc}

00027bfc <remove_cf_cfg>:
{
   27bfc:	b570      	push	{r4, r5, r6, lr}
   27bfe:	4604      	mov	r4, r0
	cfg = find_cf_cfg(conn);
   27c00:	f7f4 fd82 	bl	1c708 <find_cf_cfg>
	if (!cfg) {
   27c04:	b150      	cbz	r0, 27c1c <remove_cf_cfg+0x20>
   27c06:	4606      	mov	r6, r0
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   27c08:	f104 0588 	add.w	r5, r4, #136	; 0x88
   27c0c:	4629      	mov	r1, r5
   27c0e:	7a20      	ldrb	r0, [r4, #8]
   27c10:	f7fe fc65 	bl	264de <bt_addr_le_is_bonded>
   27c14:	b918      	cbnz	r0, 27c1e <remove_cf_cfg+0x22>
		clear_cf_cfg(cfg);
   27c16:	4630      	mov	r0, r6
   27c18:	f7f5 f840 	bl	1cc9c <clear_cf_cfg>
}
   27c1c:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(dst, src, sizeof(*dst));
   27c1e:	2207      	movs	r2, #7
   27c20:	4629      	mov	r1, r5
   27c22:	1c70      	adds	r0, r6, #1
   27c24:	f7fe f9ff 	bl	26026 <memcpy>
}
   27c28:	e7f8      	b.n	27c1c <remove_cf_cfg+0x20>

00027c2a <bt_gatt_attr_read>:
{
   27c2a:	b510      	push	{r4, lr}
   27c2c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   27c30:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   27c34:	42a1      	cmp	r1, r4
   27c36:	d80c      	bhi.n	27c52 <bt_gatt_attr_read+0x28>
   27c38:	4610      	mov	r0, r2
	len = MIN(buf_len, value_len - offset);
   27c3a:	1a64      	subs	r4, r4, r1
   27c3c:	42a3      	cmp	r3, r4
   27c3e:	bfa8      	it	ge
   27c40:	4623      	movge	r3, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   27c42:	b29c      	uxth	r4, r3
   27c44:	4622      	mov	r2, r4
   27c46:	9b03      	ldr	r3, [sp, #12]
   27c48:	4419      	add	r1, r3
   27c4a:	f7fe f9ec 	bl	26026 <memcpy>
}
   27c4e:	4620      	mov	r0, r4
   27c50:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   27c52:	f06f 0406 	mvn.w	r4, #6
   27c56:	e7fa      	b.n	27c4e <bt_gatt_attr_read+0x24>

00027c58 <read_appearance>:
{
   27c58:	b5f0      	push	{r4, r5, r6, r7, lr}
   27c5a:	b087      	sub	sp, #28
   27c5c:	4604      	mov	r4, r0
   27c5e:	460d      	mov	r5, r1
   27c60:	4616      	mov	r6, r2
   27c62:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   27c64:	f7fe fc39 	bl	264da <bt_get_appearance>
   27c68:	f8ad 0016 	strh.w	r0, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   27c6c:	2302      	movs	r3, #2
   27c6e:	9302      	str	r3, [sp, #8]
   27c70:	f10d 0316 	add.w	r3, sp, #22
   27c74:	9301      	str	r3, [sp, #4]
   27c76:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   27c7a:	9300      	str	r3, [sp, #0]
   27c7c:	463b      	mov	r3, r7
   27c7e:	4632      	mov	r2, r6
   27c80:	4629      	mov	r1, r5
   27c82:	4620      	mov	r0, r4
   27c84:	f7ff ffd1 	bl	27c2a <bt_gatt_attr_read>
}
   27c88:	b007      	add	sp, #28
   27c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027c8c <read_name>:
{
   27c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27c90:	b084      	sub	sp, #16
   27c92:	4604      	mov	r4, r0
   27c94:	460d      	mov	r5, r1
   27c96:	4616      	mov	r6, r2
   27c98:	461f      	mov	r7, r3
	const char *name = bt_get_name();
   27c9a:	f7f0 ffa3 	bl	18be4 <bt_get_name>
   27c9e:	4680      	mov	r8, r0
				 strlen(name));
   27ca0:	f7fe f991 	bl	25fc6 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   27ca4:	b280      	uxth	r0, r0
   27ca6:	9002      	str	r0, [sp, #8]
   27ca8:	f8cd 8004 	str.w	r8, [sp, #4]
   27cac:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   27cb0:	9300      	str	r3, [sp, #0]
   27cb2:	463b      	mov	r3, r7
   27cb4:	4632      	mov	r2, r6
   27cb6:	4629      	mov	r1, r5
   27cb8:	4620      	mov	r0, r4
   27cba:	f7ff ffb6 	bl	27c2a <bt_gatt_attr_read>
}
   27cbe:	b004      	add	sp, #16
   27cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027cc4 <cf_read>:
{
   27cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   27cc6:	b087      	sub	sp, #28
   27cc8:	4604      	mov	r4, r0
   27cca:	460d      	mov	r5, r1
   27ccc:	4616      	mov	r6, r2
   27cce:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   27cd0:	2300      	movs	r3, #0
   27cd2:	f88d 3014 	strb.w	r3, [sp, #20]
	cfg = find_cf_cfg(conn);
   27cd6:	f7f4 fd17 	bl	1c708 <find_cf_cfg>
	if (cfg) {
   27cda:	b128      	cbz	r0, 27ce8 <cf_read+0x24>
   27cdc:	4601      	mov	r1, r0
		memcpy(data, cfg->data, sizeof(data));
   27cde:	2201      	movs	r2, #1
   27ce0:	3108      	adds	r1, #8
   27ce2:	a805      	add	r0, sp, #20
   27ce4:	f7fe f99f 	bl	26026 <memcpy>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   27ce8:	2301      	movs	r3, #1
   27cea:	9302      	str	r3, [sp, #8]
   27cec:	ab05      	add	r3, sp, #20
   27cee:	9301      	str	r3, [sp, #4]
   27cf0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   27cf4:	9300      	str	r3, [sp, #0]
   27cf6:	463b      	mov	r3, r7
   27cf8:	4632      	mov	r2, r6
   27cfa:	4629      	mov	r1, r5
   27cfc:	4620      	mov	r0, r4
   27cfe:	f7ff ff94 	bl	27c2a <bt_gatt_attr_read>
}
   27d02:	b007      	add	sp, #28
   27d04:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027d06 <bt_gatt_attr_read_service>:
{
   27d06:	b570      	push	{r4, r5, r6, lr}
   27d08:	b086      	sub	sp, #24
   27d0a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
   27d0e:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   27d10:	7826      	ldrb	r6, [r4, #0]
   27d12:	b146      	cbz	r6, 27d26 <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
   27d14:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   27d16:	2610      	movs	r6, #16
   27d18:	9602      	str	r6, [sp, #8]
   27d1a:	9401      	str	r4, [sp, #4]
   27d1c:	9500      	str	r5, [sp, #0]
   27d1e:	f7ff ff84 	bl	27c2a <bt_gatt_attr_read>
}
   27d22:	b006      	add	sp, #24
   27d24:	bd70      	pop	{r4, r5, r6, pc}
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   27d26:	8864      	ldrh	r4, [r4, #2]
   27d28:	f8ad 4016 	strh.w	r4, [sp, #22]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   27d2c:	2402      	movs	r4, #2
   27d2e:	9402      	str	r4, [sp, #8]
   27d30:	f10d 0416 	add.w	r4, sp, #22
   27d34:	9401      	str	r4, [sp, #4]
   27d36:	9500      	str	r5, [sp, #0]
   27d38:	f7ff ff77 	bl	27c2a <bt_gatt_attr_read>
   27d3c:	e7f1      	b.n	27d22 <bt_gatt_attr_read_service+0x1c>

00027d3e <bt_gatt_attr_read_ccc>:
{
   27d3e:	b5f0      	push	{r4, r5, r6, r7, lr}
   27d40:	b087      	sub	sp, #28
   27d42:	4605      	mov	r5, r0
   27d44:	460c      	mov	r4, r1
   27d46:	4616      	mov	r6, r2
   27d48:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   27d4a:	68c9      	ldr	r1, [r1, #12]
   27d4c:	f7f4 fd26 	bl	1c79c <find_ccc_cfg>
	if (cfg) {
   27d50:	b190      	cbz	r0, 27d78 <bt_gatt_attr_read_ccc+0x3a>
		value = sys_cpu_to_le16(cfg->value);
   27d52:	8903      	ldrh	r3, [r0, #8]
   27d54:	f8ad 3016 	strh.w	r3, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   27d58:	2302      	movs	r3, #2
   27d5a:	9302      	str	r3, [sp, #8]
   27d5c:	f10d 0316 	add.w	r3, sp, #22
   27d60:	9301      	str	r3, [sp, #4]
   27d62:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   27d66:	9300      	str	r3, [sp, #0]
   27d68:	463b      	mov	r3, r7
   27d6a:	4632      	mov	r2, r6
   27d6c:	4621      	mov	r1, r4
   27d6e:	4628      	mov	r0, r5
   27d70:	f7ff ff5b 	bl	27c2a <bt_gatt_attr_read>
}
   27d74:	b007      	add	sp, #28
   27d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = 0x0000;
   27d78:	2300      	movs	r3, #0
   27d7a:	f8ad 3016 	strh.w	r3, [sp, #22]
   27d7e:	e7eb      	b.n	27d58 <bt_gatt_attr_read_ccc+0x1a>

00027d80 <bt_gatt_attr_value_handle>:
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   27d80:	b1b8      	cbz	r0, 27db2 <bt_gatt_attr_value_handle+0x32>
{
   27d82:	b510      	push	{r4, lr}
   27d84:	b082      	sub	sp, #8
   27d86:	4604      	mov	r4, r0
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   27d88:	2300      	movs	r3, #0
   27d8a:	f88d 3004 	strb.w	r3, [sp, #4]
   27d8e:	f642 0303 	movw	r3, #10243	; 0x2803
   27d92:	f8ad 3006 	strh.w	r3, [sp, #6]
   27d96:	a901      	add	r1, sp, #4
   27d98:	6800      	ldr	r0, [r0, #0]
   27d9a:	f7fe f9c4 	bl	26126 <bt_uuid_cmp>
   27d9e:	b950      	cbnz	r0, 27db6 <bt_gatt_attr_value_handle+0x36>
		struct bt_gatt_chrc *chrc = attr->user_data;
   27da0:	68e3      	ldr	r3, [r4, #12]
		handle = chrc->value_handle;
   27da2:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   27da4:	b940      	cbnz	r0, 27db8 <bt_gatt_attr_value_handle+0x38>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   27da6:	4620      	mov	r0, r4
   27da8:	f7f4 ffc8 	bl	1cd3c <bt_gatt_attr_get_handle>
   27dac:	3001      	adds	r0, #1
   27dae:	b280      	uxth	r0, r0
   27db0:	e002      	b.n	27db8 <bt_gatt_attr_value_handle+0x38>
	uint16_t handle = 0;
   27db2:	2000      	movs	r0, #0
}
   27db4:	4770      	bx	lr
	uint16_t handle = 0;
   27db6:	2000      	movs	r0, #0
}
   27db8:	b002      	add	sp, #8
   27dba:	bd10      	pop	{r4, pc}

00027dbc <bt_gatt_attr_read_chrc>:
{
   27dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27dc0:	b08a      	sub	sp, #40	; 0x28
   27dc2:	4605      	mov	r5, r0
   27dc4:	460c      	mov	r4, r1
   27dc6:	4616      	mov	r6, r2
   27dc8:	461f      	mov	r7, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
   27dca:	f8d1 800c 	ldr.w	r8, [r1, #12]
	pdu.properties = chrc->properties;
   27dce:	f898 3006 	ldrb.w	r3, [r8, #6]
   27dd2:	f88d 3014 	strb.w	r3, [sp, #20]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   27dd6:	4608      	mov	r0, r1
   27dd8:	f7ff ffd2 	bl	27d80 <bt_gatt_attr_value_handle>
   27ddc:	f8ad 0015 	strh.w	r0, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   27de0:	f8d8 1000 	ldr.w	r1, [r8]
   27de4:	780b      	ldrb	r3, [r1, #0]
   27de6:	b993      	cbnz	r3, 27e0e <bt_gatt_attr_read_chrc+0x52>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   27de8:	884b      	ldrh	r3, [r1, #2]
   27dea:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2U;
   27dee:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   27df0:	9302      	str	r3, [sp, #8]
   27df2:	ab05      	add	r3, sp, #20
   27df4:	9301      	str	r3, [sp, #4]
   27df6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   27dfa:	9300      	str	r3, [sp, #0]
   27dfc:	463b      	mov	r3, r7
   27dfe:	4632      	mov	r2, r6
   27e00:	4621      	mov	r1, r4
   27e02:	4628      	mov	r0, r5
   27e04:	f7ff ff11 	bl	27c2a <bt_gatt_attr_read>
}
   27e08:	b00a      	add	sp, #40	; 0x28
   27e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   27e0e:	2210      	movs	r2, #16
   27e10:	3101      	adds	r1, #1
   27e12:	f10d 0017 	add.w	r0, sp, #23
   27e16:	f7fe f906 	bl	26026 <memcpy>
		value_len += 16U;
   27e1a:	2313      	movs	r3, #19
   27e1c:	e7e8      	b.n	27df0 <bt_gatt_attr_read_chrc+0x34>

00027e1e <db_hash_process>:
{
   27e1e:	b508      	push	{r3, lr}
	db_hash_gen(true);
   27e20:	2001      	movs	r0, #1
   27e22:	f7f5 f80b 	bl	1ce3c <db_hash_gen>
}
   27e26:	bd08      	pop	{r3, pc}

00027e28 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   27e28:	f012 0f01 	tst.w	r2, #1
   27e2c:	d005      	beq.n	27e3a <bt_gatt_check_perm+0x12>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   27e2e:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   27e30:	f013 0f95 	tst.w	r3, #149	; 0x95
   27e34:	d01e      	beq.n	27e74 <bt_gatt_check_perm+0x4c>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   27e36:	684b      	ldr	r3, [r1, #4]
   27e38:	b1f3      	cbz	r3, 27e78 <bt_gatt_check_perm+0x50>
	if ((mask & BT_GATT_PERM_WRITE) &&
   27e3a:	f012 0f02 	tst.w	r2, #2
   27e3e:	d005      	beq.n	27e4c <bt_gatt_check_perm+0x24>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   27e40:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
   27e42:	f413 7f95 	tst.w	r3, #298	; 0x12a
   27e46:	d019      	beq.n	27e7c <bt_gatt_check_perm+0x54>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   27e48:	688b      	ldr	r3, [r1, #8]
   27e4a:	b1cb      	cbz	r3, 27e80 <bt_gatt_check_perm+0x58>
{
   27e4c:	b510      	push	{r4, lr}
	mask &= attr->perm;
   27e4e:	8a4c      	ldrh	r4, [r1, #18]
   27e50:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_LESC_MASK) {
   27e52:	f414 7fc0 	tst.w	r4, #384	; 0x180
   27e56:	d115      	bne.n	27e84 <bt_gatt_check_perm+0x5c>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   27e58:	f014 0f30 	tst.w	r4, #48	; 0x30
   27e5c:	d104      	bne.n	27e68 <bt_gatt_check_perm+0x40>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   27e5e:	f014 0f0c 	tst.w	r4, #12
   27e62:	d111      	bne.n	27e88 <bt_gatt_check_perm+0x60>
	return 0;
   27e64:	2000      	movs	r0, #0
}
   27e66:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   27e68:	f7fe fd60 	bl	2692c <bt_conn_get_security>
   27e6c:	2802      	cmp	r0, #2
   27e6e:	d8f6      	bhi.n	27e5e <bt_gatt_check_perm+0x36>
			return BT_ATT_ERR_AUTHENTICATION;
   27e70:	2005      	movs	r0, #5
   27e72:	e7f8      	b.n	27e66 <bt_gatt_check_perm+0x3e>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   27e74:	2002      	movs	r0, #2
   27e76:	4770      	bx	lr
   27e78:	2002      	movs	r0, #2
   27e7a:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   27e7c:	2003      	movs	r0, #3
   27e7e:	4770      	bx	lr
   27e80:	2003      	movs	r0, #3
}
   27e82:	4770      	bx	lr
			return BT_ATT_ERR_AUTHENTICATION;
   27e84:	2005      	movs	r0, #5
   27e86:	e7ee      	b.n	27e66 <bt_gatt_check_perm+0x3e>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   27e88:	200f      	movs	r0, #15
   27e8a:	e7ec      	b.n	27e66 <bt_gatt_check_perm+0x3e>

00027e8c <bt_gatt_is_subscribed>:
	if (conn->state != BT_CONN_CONNECTED) {
   27e8c:	7a83      	ldrb	r3, [r0, #10]
   27e8e:	2b07      	cmp	r3, #7
   27e90:	d001      	beq.n	27e96 <bt_gatt_is_subscribed+0xa>
		return false;
   27e92:	2000      	movs	r0, #0
}
   27e94:	4770      	bx	lr
{
   27e96:	b5f0      	push	{r4, r5, r6, r7, lr}
   27e98:	b089      	sub	sp, #36	; 0x24
   27e9a:	4605      	mov	r5, r0
   27e9c:	460c      	mov	r4, r1
   27e9e:	4616      	mov	r6, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   27ea0:	6808      	ldr	r0, [r1, #0]
   27ea2:	2300      	movs	r3, #0
   27ea4:	f88d 3004 	strb.w	r3, [sp, #4]
   27ea8:	f642 0303 	movw	r3, #10243	; 0x2803
   27eac:	f8ad 3006 	strh.w	r3, [sp, #6]
   27eb0:	a901      	add	r1, sp, #4
   27eb2:	f7fe f938 	bl	26126 <bt_uuid_cmp>
   27eb6:	b950      	cbnz	r0, 27ece <bt_gatt_is_subscribed+0x42>
		struct bt_gatt_chrc *chrc = attr->user_data;
   27eb8:	68e3      	ldr	r3, [r4, #12]
		if (!(chrc->properties &
   27eba:	799b      	ldrb	r3, [r3, #6]
   27ebc:	f013 0f30 	tst.w	r3, #48	; 0x30
   27ec0:	d101      	bne.n	27ec6 <bt_gatt_is_subscribed+0x3a>
}
   27ec2:	b009      	add	sp, #36	; 0x24
   27ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		attr = bt_gatt_attr_next(attr);
   27ec6:	4620      	mov	r0, r4
   27ec8:	f7f5 f8a6 	bl	1d018 <bt_gatt_attr_next>
   27ecc:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   27ece:	6820      	ldr	r0, [r4, #0]
   27ed0:	2300      	movs	r3, #0
   27ed2:	f88d 3008 	strb.w	r3, [sp, #8]
   27ed6:	f642 1302 	movw	r3, #10498	; 0x2902
   27eda:	f8ad 300a 	strh.w	r3, [sp, #10]
   27ede:	a902      	add	r1, sp, #8
   27ee0:	f7fe f921 	bl	26126 <bt_uuid_cmp>
   27ee4:	2800      	cmp	r0, #0
   27ee6:	d136      	bne.n	27f56 <bt_gatt_is_subscribed+0xca>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   27ee8:	6820      	ldr	r0, [r4, #0]
   27eea:	2300      	movs	r3, #0
   27eec:	f88d 300c 	strb.w	r3, [sp, #12]
   27ef0:	f642 1302 	movw	r3, #10498	; 0x2902
   27ef4:	f8ad 300e 	strh.w	r3, [sp, #14]
   27ef8:	a903      	add	r1, sp, #12
   27efa:	f7fe f914 	bl	26126 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   27efe:	b378      	cbz	r0, 27f60 <bt_gatt_is_subscribed+0xd4>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   27f00:	6820      	ldr	r0, [r4, #0]
   27f02:	2300      	movs	r3, #0
   27f04:	f88d 3010 	strb.w	r3, [sp, #16]
   27f08:	f642 0303 	movw	r3, #10243	; 0x2803
   27f0c:	f8ad 3012 	strh.w	r3, [sp, #18]
   27f10:	a904      	add	r1, sp, #16
   27f12:	f7fe f908 	bl	26126 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   27f16:	b318      	cbz	r0, 27f60 <bt_gatt_is_subscribed+0xd4>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   27f18:	6820      	ldr	r0, [r4, #0]
   27f1a:	2300      	movs	r3, #0
   27f1c:	f88d 3014 	strb.w	r3, [sp, #20]
   27f20:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   27f24:	f8ad 3016 	strh.w	r3, [sp, #22]
   27f28:	a905      	add	r1, sp, #20
   27f2a:	f7fe f8fc 	bl	26126 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   27f2e:	b1b8      	cbz	r0, 27f60 <bt_gatt_is_subscribed+0xd4>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   27f30:	6820      	ldr	r0, [r4, #0]
   27f32:	2300      	movs	r3, #0
   27f34:	f88d 3018 	strb.w	r3, [sp, #24]
   27f38:	f642 0301 	movw	r3, #10241	; 0x2801
   27f3c:	f8ad 301a 	strh.w	r3, [sp, #26]
   27f40:	a906      	add	r1, sp, #24
   27f42:	f7fe f8f0 	bl	26126 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   27f46:	b158      	cbz	r0, 27f60 <bt_gatt_is_subscribed+0xd4>
		attr = bt_gatt_attr_next(attr);
   27f48:	4620      	mov	r0, r4
   27f4a:	f7f5 f865 	bl	1d018 <bt_gatt_attr_next>
		if (!attr) {
   27f4e:	4604      	mov	r4, r0
   27f50:	2800      	cmp	r0, #0
   27f52:	d1c9      	bne.n	27ee8 <bt_gatt_is_subscribed+0x5c>
   27f54:	e7b5      	b.n	27ec2 <bt_gatt_is_subscribed+0x36>
		attr = bt_gatt_attr_next(attr);
   27f56:	4620      	mov	r0, r4
   27f58:	f7f5 f85e 	bl	1d018 <bt_gatt_attr_next>
   27f5c:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   27f5e:	e7c3      	b.n	27ee8 <bt_gatt_is_subscribed+0x5c>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   27f60:	6820      	ldr	r0, [r4, #0]
   27f62:	2300      	movs	r3, #0
   27f64:	f88d 301c 	strb.w	r3, [sp, #28]
   27f68:	f642 1302 	movw	r3, #10498	; 0x2902
   27f6c:	f8ad 301e 	strh.w	r3, [sp, #30]
   27f70:	a907      	add	r1, sp, #28
   27f72:	f7fe f8d8 	bl	26126 <bt_uuid_cmp>
   27f76:	b910      	cbnz	r0, 27f7e <bt_gatt_is_subscribed+0xf2>
	ccc = attr->user_data;
   27f78:	68e7      	ldr	r7, [r4, #12]
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   27f7a:	2400      	movs	r4, #0
   27f7c:	e002      	b.n	27f84 <bt_gatt_is_subscribed+0xf8>
		return false;
   27f7e:	2000      	movs	r0, #0
   27f80:	e79f      	b.n	27ec2 <bt_gatt_is_subscribed+0x36>
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   27f82:	3401      	adds	r4, #1
   27f84:	2c07      	cmp	r4, #7
   27f86:	d813      	bhi.n	27fb0 <bt_gatt_is_subscribed+0x124>
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   27f88:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   27f8c:	eb07 0243 	add.w	r2, r7, r3, lsl #1
   27f90:	3201      	adds	r2, #1
   27f92:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
   27f96:	4628      	mov	r0, r5
   27f98:	f7fe fce1 	bl	2695e <bt_conn_is_peer_addr_le>
   27f9c:	2800      	cmp	r0, #0
   27f9e:	d0f0      	beq.n	27f82 <bt_gatt_is_subscribed+0xf6>
		    (ccc_type & ccc->cfg[i].value)) {
   27fa0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   27fa4:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   27fa8:	891b      	ldrh	r3, [r3, #8]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   27faa:	4233      	tst	r3, r6
   27fac:	d0e9      	beq.n	27f82 <bt_gatt_is_subscribed+0xf6>
   27fae:	e788      	b.n	27ec2 <bt_gatt_is_subscribed+0x36>
	return false;
   27fb0:	2000      	movs	r0, #0
   27fb2:	e786      	b.n	27ec2 <bt_gatt_is_subscribed+0x36>

00027fb4 <bt_gatt_change_aware>:
{
   27fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27fb6:	4607      	mov	r7, r0
   27fb8:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   27fba:	f7f4 fba5 	bl	1c708 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   27fbe:	2800      	cmp	r0, #0
   27fc0:	d050      	beq.n	28064 <bt_gatt_change_aware+0xb0>
   27fc2:	7a02      	ldrb	r2, [r0, #8]
   27fc4:	f012 0f01 	tst.w	r2, #1
   27fc8:	d102      	bne.n	27fd0 <bt_gatt_change_aware+0x1c>
		return true;
   27fca:	2601      	movs	r6, #1
}
   27fcc:	4630      	mov	r0, r6
   27fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   27fd0:	f100 050c 	add.w	r5, r0, #12
   27fd4:	2100      	movs	r1, #0
   27fd6:	4628      	mov	r0, r5
   27fd8:	f7ff fd60 	bl	27a9c <atomic_test_bit>
   27fdc:	4606      	mov	r6, r0
   27fde:	2800      	cmp	r0, #0
   27fe0:	d1f4      	bne.n	27fcc <bt_gatt_change_aware+0x18>
	if (!req) {
   27fe2:	b90c      	cbnz	r4, 27fe8 <bt_gatt_change_aware+0x34>
		return false;
   27fe4:	4626      	mov	r6, r4
   27fe6:	e7f1      	b.n	27fcc <bt_gatt_change_aware+0x18>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   27fe8:	2101      	movs	r1, #1
   27fea:	4628      	mov	r0, r5
   27fec:	f7ff fdb1 	bl	27b52 <atomic_test_and_clear_bit>
   27ff0:	4606      	mov	r6, r0
   27ff2:	bb38      	cbnz	r0, 28044 <bt_gatt_change_aware+0x90>
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   27ff4:	4638      	mov	r0, r7
   27ff6:	f7ff fc0d 	bl	27814 <bt_att_fixed_chan_only>
   27ffa:	4606      	mov	r6, r0
   27ffc:	2800      	cmp	r0, #0
   27ffe:	d0e5      	beq.n	27fcc <bt_gatt_change_aware+0x18>
   28000:	4638      	mov	r0, r7
   28002:	f7ff fc26 	bl	27852 <bt_att_out_of_sync_sent_on_fixed>
   28006:	4606      	mov	r6, r0
   28008:	2800      	cmp	r0, #0
   2800a:	d0df      	beq.n	27fcc <bt_gatt_change_aware+0x18>
   2800c:	f3bf 8f5b 	dmb	ish
   28010:	e855 3f00 	ldrex	r3, [r5]
   28014:	f023 0302 	bic.w	r3, r3, #2
   28018:	e845 3200 	strex	r2, r3, [r5]
   2801c:	2a00      	cmp	r2, #0
   2801e:	d1f7      	bne.n	28010 <bt_gatt_change_aware+0x5c>
   28020:	f3bf 8f5b 	dmb	ish
		bt_att_clear_out_of_sync_sent(conn);
   28024:	4638      	mov	r0, r7
   28026:	f7ff fbf7 	bl	27818 <bt_att_clear_out_of_sync_sent>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2802a:	f3bf 8f5b 	dmb	ish
   2802e:	e855 3f00 	ldrex	r3, [r5]
   28032:	f043 0301 	orr.w	r3, r3, #1
   28036:	e845 3200 	strex	r2, r3, [r5]
   2803a:	2a00      	cmp	r2, #0
   2803c:	d1f7      	bne.n	2802e <bt_gatt_change_aware+0x7a>
   2803e:	f3bf 8f5b 	dmb	ish
		return true;
   28042:	e7c3      	b.n	27fcc <bt_gatt_change_aware+0x18>
		bt_att_clear_out_of_sync_sent(conn);
   28044:	4638      	mov	r0, r7
   28046:	f7ff fbe7 	bl	27818 <bt_att_clear_out_of_sync_sent>
   2804a:	f3bf 8f5b 	dmb	ish
   2804e:	e855 3f00 	ldrex	r3, [r5]
   28052:	f043 0301 	orr.w	r3, r3, #1
   28056:	e845 3200 	strex	r2, r3, [r5]
   2805a:	2a00      	cmp	r2, #0
   2805c:	d1f7      	bne.n	2804e <bt_gatt_change_aware+0x9a>
   2805e:	f3bf 8f5b 	dmb	ish
		return true;
   28062:	e7b3      	b.n	27fcc <bt_gatt_change_aware+0x18>
		return true;
   28064:	2601      	movs	r6, #1
   28066:	e7b1      	b.n	27fcc <bt_gatt_change_aware+0x18>

00028068 <bt_smp_recv>:
{
   28068:	b5f0      	push	{r4, r5, r6, r7, lr}
   2806a:	b083      	sub	sp, #12
	struct bt_conn *conn = chan->conn;
   2806c:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   2806e:	f04f 32ff 	mov.w	r2, #4294967295
   28072:	f04f 33ff 	mov.w	r3, #4294967295
   28076:	2100      	movs	r1, #0
   28078:	4608      	mov	r0, r1
   2807a:	f7fe fd09 	bl	26a90 <bt_l2cap_create_pdu_timeout>
   2807e:	4604      	mov	r4, r0
   28080:	f100 060c 	add.w	r6, r0, #12
   28084:	2101      	movs	r1, #1
   28086:	4630      	mov	r0, r6
   28088:	f000 f987 	bl	2839a <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   2808c:	2505      	movs	r5, #5
   2808e:	7005      	strb	r5, [r0, #0]
   28090:	2101      	movs	r1, #1
   28092:	4630      	mov	r0, r6
   28094:	f000 f981 	bl	2839a <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   28098:	7005      	strb	r5, [r0, #0]
   2809a:	2300      	movs	r3, #0
   2809c:	9300      	str	r3, [sp, #0]
   2809e:	4622      	mov	r2, r4
   280a0:	2106      	movs	r1, #6
   280a2:	4638      	mov	r0, r7
   280a4:	f7fe fcf9 	bl	26a9a <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   280a8:	b910      	cbnz	r0, 280b0 <bt_smp_recv+0x48>
}
   280aa:	2000      	movs	r0, #0
   280ac:	b003      	add	sp, #12
   280ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   280b0:	4620      	mov	r0, r4
   280b2:	f000 f92b 	bl	2830c <net_buf_unref>
   280b6:	e7f8      	b.n	280aa <bt_smp_recv+0x42>

000280b8 <bt_smp_sign>:
}
   280b8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   280bc:	4770      	bx	lr

000280be <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   280be:	2000      	movs	r0, #0
   280c0:	4770      	bx	lr

000280c2 <pool_get_uninit>:
	return offset / struct_size;
}

static inline struct net_buf *pool_get_uninit(struct net_buf_pool *pool,
					      uint16_t uninit_count)
{
   280c2:	b538      	push	{r3, r4, r5, lr}
   280c4:	4604      	mov	r4, r0
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   280c6:	7f03      	ldrb	r3, [r0, #28]
   280c8:	331b      	adds	r3, #27
   280ca:	f023 0303 	bic.w	r3, r3, #3
				__alignof__(struct net_buf));
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   280ce:	8b02      	ldrh	r2, [r0, #24]
   280d0:	1a52      	subs	r2, r2, r1
	struct net_buf *buf;

	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   280d2:	6a85      	ldr	r5, [r0, #40]	; 0x28
   280d4:	fb03 5502 	mla	r5, r3, r2, r5

	buf->pool_id = pool_id(pool);
   280d8:	f7f5 fc60 	bl	1d99c <pool_id>
   280dc:	72a8      	strb	r0, [r5, #10]
	buf->user_data_size = pool->user_data_size;
   280de:	7f23      	ldrb	r3, [r4, #28]
   280e0:	72eb      	strb	r3, [r5, #11]

	return buf;
}
   280e2:	4628      	mov	r0, r5
   280e4:	bd38      	pop	{r3, r4, r5, pc}

000280e6 <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, uint8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
   280e6:	4770      	bx	lr

000280e8 <data_alloc>:
};

#endif /* CONFIG_HEAP_MEM_POOL_SIZE > 0 */

static uint8_t *data_alloc(struct net_buf *buf, size_t *size, k_timeout_t timeout)
{
   280e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   280ec:	4604      	mov	r4, r0
   280ee:	460d      	mov	r5, r1
   280f0:	4617      	mov	r7, r2
   280f2:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   280f4:	7a80      	ldrb	r0, [r0, #10]
   280f6:	f7f5 fc5d 	bl	1d9b4 <net_buf_pool_get>

	return pool->alloc->cb->alloc(buf, size, timeout);
   280fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
   280fc:	681b      	ldr	r3, [r3, #0]
   280fe:	f8d3 8000 	ldr.w	r8, [r3]
   28102:	463a      	mov	r2, r7
   28104:	4633      	mov	r3, r6
   28106:	4629      	mov	r1, r5
   28108:	4620      	mov	r0, r4
   2810a:	47c0      	blx	r8
}
   2810c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028110 <net_buf_destroy>:
{
   28110:	b510      	push	{r4, lr}
   28112:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   28114:	7a80      	ldrb	r0, [r0, #10]
   28116:	f7f5 fc4d 	bl	1d9b4 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   2811a:	4621      	mov	r1, r4
   2811c:	f002 f87e 	bl	2a21c <k_queue_prepend>
}
   28120:	bd10      	pop	{r4, pc}

00028122 <data_unref>:

	return pool->alloc->cb->ref(buf, data);
}

static void data_unref(struct net_buf *buf, uint8_t *data)
{
   28122:	b538      	push	{r3, r4, r5, lr}
   28124:	4604      	mov	r4, r0
   28126:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   28128:	7a80      	ldrb	r0, [r0, #10]
   2812a:	f7f5 fc43 	bl	1d9b4 <net_buf_pool_get>

	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   2812e:	7a63      	ldrb	r3, [r4, #9]
   28130:	f013 0f01 	tst.w	r3, #1
   28134:	d105      	bne.n	28142 <data_unref+0x20>
		return;
	}

	pool->alloc->cb->unref(buf, data);
   28136:	6a43      	ldr	r3, [r0, #36]	; 0x24
   28138:	681b      	ldr	r3, [r3, #0]
   2813a:	689b      	ldr	r3, [r3, #8]
   2813c:	4629      	mov	r1, r5
   2813e:	4620      	mov	r0, r4
   28140:	4798      	blx	r3
}
   28142:	bd38      	pop	{r3, r4, r5, pc}

00028144 <net_buf_id>:
{
   28144:	b510      	push	{r4, lr}
   28146:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   28148:	7a80      	ldrb	r0, [r0, #10]
   2814a:	f7f5 fc33 	bl	1d9b4 <net_buf_pool_get>
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2814e:	7f03      	ldrb	r3, [r0, #28]
   28150:	331b      	adds	r3, #27
   28152:	f023 0303 	bic.w	r3, r3, #3
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   28156:	6a82      	ldr	r2, [r0, #40]	; 0x28
   28158:	1aa4      	subs	r4, r4, r2
}
   2815a:	fbb4 f0f3 	udiv	r0, r4, r3
   2815e:	bd10      	pop	{r4, pc}

00028160 <fixed_data_alloc>:
{
   28160:	b570      	push	{r4, r5, r6, lr}
   28162:	4604      	mov	r4, r0
   28164:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   28166:	7a80      	ldrb	r0, [r0, #10]
   28168:	f7f5 fc24 	bl	1d9b4 <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2816c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2816e:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   28170:	682a      	ldr	r2, [r5, #0]
   28172:	6819      	ldr	r1, [r3, #0]
   28174:	428a      	cmp	r2, r1
   28176:	bf28      	it	cs
   28178:	460a      	movcs	r2, r1
   2817a:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   2817c:	685d      	ldr	r5, [r3, #4]
   2817e:	681e      	ldr	r6, [r3, #0]
   28180:	4620      	mov	r0, r4
   28182:	f7ff ffdf 	bl	28144 <net_buf_id>
}
   28186:	fb00 5006 	mla	r0, r0, r6, r5
   2818a:	bd70      	pop	{r4, r5, r6, pc}

0002818c <net_buf_reset>:
	buf->len  = 0U;
   2818c:	2300      	movs	r3, #0
   2818e:	8203      	strh	r3, [r0, #16]
	buf->data = buf->__buf;
   28190:	6943      	ldr	r3, [r0, #20]
   28192:	60c3      	str	r3, [r0, #12]
}
   28194:	4770      	bx	lr

00028196 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   28196:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2819a:	b082      	sub	sp, #8
   2819c:	4605      	mov	r5, r0
   2819e:	9101      	str	r1, [sp, #4]
   281a0:	4616      	mov	r6, r2
   281a2:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   281a4:	4610      	mov	r0, r2
   281a6:	4619      	mov	r1, r3
   281a8:	f002 fbf9 	bl	2a99e <sys_clock_timeout_end_calc>
   281ac:	4681      	mov	r9, r0
   281ae:	468a      	mov	sl, r1
   281b0:	f04f 0240 	mov.w	r2, #64	; 0x40
   281b4:	f3ef 8311 	mrs	r3, BASEPRI
   281b8:	f382 8812 	msr	BASEPRI_MAX, r2
   281bc:	f3bf 8f6f 	isb	sy
   281c0:	461a      	mov	r2, r3
   281c2:	4698      	mov	r8, r3
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   281c4:	8b6b      	ldrh	r3, [r5, #26]
   281c6:	b393      	cbz	r3, 2822e <net_buf_alloc_len+0x98>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   281c8:	8b2a      	ldrh	r2, [r5, #24]
   281ca:	4293      	cmp	r3, r2
   281cc:	d20b      	bcs.n	281e6 <net_buf_alloc_len+0x50>
	return z_impl_k_queue_get(queue, timeout);
   281ce:	2200      	movs	r2, #0
   281d0:	2300      	movs	r3, #0
   281d2:	4628      	mov	r0, r5
   281d4:	f7fa fc90 	bl	22af8 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   281d8:	4604      	mov	r4, r0
   281da:	b120      	cbz	r0, 281e6 <net_buf_alloc_len+0x50>
	__asm__ volatile(
   281dc:	f388 8811 	msr	BASEPRI, r8
   281e0:	f3bf 8f6f 	isb	sy
				k_spin_unlock(&pool->lock, key);
				goto success;
   281e4:	e00a      	b.n	281fc <net_buf_alloc_len+0x66>
			}
		}

		uninit_count = pool->uninit_count--;
   281e6:	8b69      	ldrh	r1, [r5, #26]
   281e8:	1e4b      	subs	r3, r1, #1
   281ea:	836b      	strh	r3, [r5, #26]
   281ec:	f388 8811 	msr	BASEPRI, r8
   281f0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&pool->lock, key);

		buf = pool_get_uninit(pool, uninit_count);
   281f4:	4628      	mov	r0, r5
   281f6:	f7ff ff64 	bl	280c2 <pool_get_uninit>
   281fa:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   281fc:	9b01      	ldr	r3, [sp, #4]
   281fe:	b3a3      	cbz	r3, 2826a <net_buf_alloc_len+0xd4>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   28200:	ea56 0307 	orrs.w	r3, r6, r7
   28204:	d005      	beq.n	28212 <net_buf_alloc_len+0x7c>
   28206:	f1b7 3fff 	cmp.w	r7, #4294967295
   2820a:	bf08      	it	eq
   2820c:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   28210:	d11a      	bne.n	28248 <net_buf_alloc_len+0xb2>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   28212:	4632      	mov	r2, r6
   28214:	463b      	mov	r3, r7
   28216:	a901      	add	r1, sp, #4
   28218:	4620      	mov	r0, r4
   2821a:	f7ff ff65 	bl	280e8 <data_alloc>
   2821e:	4605      	mov	r5, r0
   28220:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   28222:	bb20      	cbnz	r0, 2826e <net_buf_alloc_len+0xd8>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
   28224:	4620      	mov	r0, r4
   28226:	f7ff ff73 	bl	28110 <net_buf_destroy>
			return NULL;
   2822a:	462c      	mov	r4, r5
   2822c:	e029      	b.n	28282 <net_buf_alloc_len+0xec>
   2822e:	f382 8811 	msr	BASEPRI, r2
   28232:	f3bf 8f6f 	isb	sy
   28236:	4632      	mov	r2, r6
   28238:	463b      	mov	r3, r7
   2823a:	4628      	mov	r0, r5
   2823c:	f7fa fc5c 	bl	22af8 <z_impl_k_queue_get>
	if (!buf) {
   28240:	4604      	mov	r4, r0
   28242:	2800      	cmp	r0, #0
   28244:	d1da      	bne.n	281fc <net_buf_alloc_len+0x66>
   28246:	e01c      	b.n	28282 <net_buf_alloc_len+0xec>
			int64_t remaining = end - sys_clock_tick_get();
   28248:	f7fb fbf0 	bl	23a2c <sys_clock_tick_get>
   2824c:	ebb9 0900 	subs.w	r9, r9, r0
   28250:	eb6a 0a01 	sbc.w	sl, sl, r1
			if (remaining <= 0) {
   28254:	f1b9 0f01 	cmp.w	r9, #1
   28258:	f17a 0300 	sbcs.w	r3, sl, #0
   2825c:	db02      	blt.n	28264 <net_buf_alloc_len+0xce>
				timeout = Z_TIMEOUT_TICKS(remaining);
   2825e:	464e      	mov	r6, r9
   28260:	4657      	mov	r7, sl
   28262:	e7d6      	b.n	28212 <net_buf_alloc_len+0x7c>
				timeout = K_NO_WAIT;
   28264:	2600      	movs	r6, #0
   28266:	4637      	mov	r7, r6
   28268:	e7d3      	b.n	28212 <net_buf_alloc_len+0x7c>

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
#endif
	} else {
		buf->__buf = NULL;
   2826a:	2300      	movs	r3, #0
   2826c:	6163      	str	r3, [r4, #20]
	}

	buf->ref   = 1U;
   2826e:	2301      	movs	r3, #1
   28270:	7223      	strb	r3, [r4, #8]
	buf->flags = 0U;
   28272:	2300      	movs	r3, #0
   28274:	7263      	strb	r3, [r4, #9]
	buf->frags = NULL;
   28276:	6063      	str	r3, [r4, #4]
	buf->size  = size;
   28278:	9b01      	ldr	r3, [sp, #4]
   2827a:	8263      	strh	r3, [r4, #18]
	net_buf_reset(buf);
   2827c:	4620      	mov	r0, r4
   2827e:	f7ff ff85 	bl	2818c <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   28282:	4620      	mov	r0, r4
   28284:	b002      	add	sp, #8
   28286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002828a <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool,
				    k_timeout_t timeout)
{
   2828a:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2828c:	6a41      	ldr	r1, [r0, #36]	; 0x24
   2828e:	6849      	ldr	r1, [r1, #4]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   28290:	6809      	ldr	r1, [r1, #0]
   28292:	f7ff ff80 	bl	28196 <net_buf_alloc_len>
}
   28296:	bd08      	pop	{r3, pc}

00028298 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   28298:	b508      	push	{r3, lr}
   2829a:	f7fa fc2d 	bl	22af8 <z_impl_k_queue_get>
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	return buf;
}
   2829e:	bd08      	pop	{r3, pc}

000282a0 <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   282a0:	6883      	ldr	r3, [r0, #8]
   282a2:	440b      	add	r3, r1
   282a4:	6003      	str	r3, [r0, #0]
}
   282a6:	4770      	bx	lr

000282a8 <net_buf_slist_put>:
	__asm__ volatile(
   282a8:	f04f 0240 	mov.w	r2, #64	; 0x40
   282ac:	f3ef 8311 	mrs	r3, BASEPRI
   282b0:	f382 8812 	msr	BASEPRI_MAX, r2
   282b4:	f3bf 8f6f 	isb	sy
	parent->next = child;
   282b8:	2200      	movs	r2, #0
   282ba:	600a      	str	r2, [r1, #0]
	return list->tail;
   282bc:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   282be:	b132      	cbz	r2, 282ce <net_buf_slist_put+0x26>
	parent->next = child;
   282c0:	6011      	str	r1, [r2, #0]
	list->tail = node;
   282c2:	6041      	str	r1, [r0, #4]
	__asm__ volatile(
   282c4:	f383 8811 	msr	BASEPRI, r3
   282c8:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(buf);

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append(list, &buf->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   282cc:	4770      	bx	lr
   282ce:	6041      	str	r1, [r0, #4]
	list->head = node;
   282d0:	6001      	str	r1, [r0, #0]
}
   282d2:	e7f7      	b.n	282c4 <net_buf_slist_put+0x1c>

000282d4 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   282d4:	4603      	mov	r3, r0
	__asm__ volatile(
   282d6:	f04f 0140 	mov.w	r1, #64	; 0x40
   282da:	f3ef 8211 	mrs	r2, BASEPRI
   282de:	f381 8812 	msr	BASEPRI_MAX, r1
   282e2:	f3bf 8f6f 	isb	sy
	return list->head;
   282e6:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   282e8:	b128      	cbz	r0, 282f6 <net_buf_slist_get+0x22>
	return node->next;
   282ea:	6801      	ldr	r1, [r0, #0]
	list->head = node;
   282ec:	6019      	str	r1, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   282ee:	f8d3 c004 	ldr.w	ip, [r3, #4]
   282f2:	4560      	cmp	r0, ip
   282f4:	d004      	beq.n	28300 <net_buf_slist_get+0x2c>
	__asm__ volatile(
   282f6:	f382 8811 	msr	BASEPRI, r2
   282fa:	f3bf 8f6f 	isb	sy
	buf = (void *)sys_slist_get(list);

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   282fe:	4770      	bx	lr
	list->tail = node;
   28300:	6059      	str	r1, [r3, #4]
}
   28302:	e7f8      	b.n	282f6 <net_buf_slist_get+0x22>

00028304 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   28304:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(fifo);
	__ASSERT_NO_MSG(buf);

	k_fifo_put(fifo, buf);
   28306:	f001 ff7d 	bl	2a204 <k_queue_append>
}
   2830a:	bd08      	pop	{r3, pc}

0002830c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   2830c:	b538      	push	{r3, r4, r5, lr}
   2830e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	while (buf) {
   28310:	e00a      	b.n	28328 <net_buf_unref+0x1c>
		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
		}

		buf->data = NULL;
   28312:	2300      	movs	r3, #0
   28314:	60e3      	str	r3, [r4, #12]
		buf->frags = NULL;
   28316:	6063      	str	r3, [r4, #4]

		pool = net_buf_pool_get(buf->pool_id);
   28318:	7aa0      	ldrb	r0, [r4, #10]
   2831a:	f7f5 fb4b 	bl	1d9b4 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   2831e:	6a03      	ldr	r3, [r0, #32]
   28320:	b193      	cbz	r3, 28348 <net_buf_unref+0x3c>
			pool->destroy(buf);
   28322:	4620      	mov	r0, r4
   28324:	4798      	blx	r3
{
   28326:	462c      	mov	r4, r5
	while (buf) {
   28328:	b194      	cbz	r4, 28350 <net_buf_unref+0x44>
		struct net_buf *frags = buf->frags;
   2832a:	6865      	ldr	r5, [r4, #4]
		if (--buf->ref > 0) {
   2832c:	7a23      	ldrb	r3, [r4, #8]
   2832e:	3b01      	subs	r3, #1
   28330:	b2db      	uxtb	r3, r3
   28332:	7223      	strb	r3, [r4, #8]
   28334:	b963      	cbnz	r3, 28350 <net_buf_unref+0x44>
		if (buf->__buf) {
   28336:	6961      	ldr	r1, [r4, #20]
   28338:	2900      	cmp	r1, #0
   2833a:	d0ea      	beq.n	28312 <net_buf_unref+0x6>
			data_unref(buf, buf->__buf);
   2833c:	4620      	mov	r0, r4
   2833e:	f7ff fef0 	bl	28122 <data_unref>
			buf->__buf = NULL;
   28342:	2300      	movs	r3, #0
   28344:	6163      	str	r3, [r4, #20]
   28346:	e7e4      	b.n	28312 <net_buf_unref+0x6>
		} else {
			net_buf_destroy(buf);
   28348:	4620      	mov	r0, r4
   2834a:	f7ff fee1 	bl	28110 <net_buf_destroy>
   2834e:	e7ea      	b.n	28326 <net_buf_unref+0x1a>
		}

		buf = frags;
	}
}
   28350:	bd38      	pop	{r3, r4, r5, pc}

00028352 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   28352:	7a02      	ldrb	r2, [r0, #8]
   28354:	3201      	adds	r2, #1
   28356:	7202      	strb	r2, [r0, #8]
	return buf;
}
   28358:	4770      	bx	lr

0002835a <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   2835a:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   2835c:	4618      	mov	r0, r3
   2835e:	685b      	ldr	r3, [r3, #4]
   28360:	2b00      	cmp	r3, #0
   28362:	d1fb      	bne.n	2835c <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   28364:	4770      	bx	lr

00028366 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   28366:	b570      	push	{r4, r5, r6, lr}
   28368:	4604      	mov	r4, r0
   2836a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   2836c:	6846      	ldr	r6, [r0, #4]
   2836e:	b11e      	cbz	r6, 28378 <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   28370:	4608      	mov	r0, r1
   28372:	f7ff fff2 	bl	2835a <net_buf_frag_last>
   28376:	6046      	str	r6, [r0, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   28378:	6065      	str	r5, [r4, #4]
}
   2837a:	bd70      	pop	{r4, r5, r6, pc}

0002837c <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   2837c:	b538      	push	{r3, r4, r5, lr}
   2837e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(frag);

	if (!head) {
   28380:	b138      	cbz	r0, 28392 <net_buf_frag_add+0x16>
   28382:	4604      	mov	r4, r0
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   28384:	f7ff ffe9 	bl	2835a <net_buf_frag_last>
   28388:	4629      	mov	r1, r5
   2838a:	f7ff ffec 	bl	28366 <net_buf_frag_insert>

	return head;
   2838e:	4620      	mov	r0, r4
}
   28390:	bd38      	pop	{r3, r4, r5, pc}
		return net_buf_ref(frag);
   28392:	4608      	mov	r0, r1
   28394:	f7ff ffdd 	bl	28352 <net_buf_ref>
   28398:	e7fa      	b.n	28390 <net_buf_frag_add+0x14>

0002839a <net_buf_simple_add>:
	return buf->data + buf->len;
   2839a:	6802      	ldr	r2, [r0, #0]
   2839c:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   2839e:	4419      	add	r1, r3
   283a0:	8081      	strh	r1, [r0, #4]
	return tail;
}
   283a2:	18d0      	adds	r0, r2, r3
   283a4:	4770      	bx	lr

000283a6 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   283a6:	b538      	push	{r3, r4, r5, lr}
   283a8:	460d      	mov	r5, r1
   283aa:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   283ac:	4611      	mov	r1, r2
   283ae:	f7ff fff4 	bl	2839a <net_buf_simple_add>
   283b2:	4622      	mov	r2, r4
   283b4:	4629      	mov	r1, r5
   283b6:	f7fd fe36 	bl	26026 <memcpy>
}
   283ba:	bd38      	pop	{r3, r4, r5, pc}

000283bc <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   283bc:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   283be:	6800      	ldr	r0, [r0, #0]
   283c0:	1a40      	subs	r0, r0, r1
   283c2:	6018      	str	r0, [r3, #0]
	buf->len += len;
   283c4:	889a      	ldrh	r2, [r3, #4]
   283c6:	440a      	add	r2, r1
   283c8:	809a      	strh	r2, [r3, #4]
	return buf->data;
}
   283ca:	4770      	bx	lr

000283cc <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   283cc:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   283ce:	8882      	ldrh	r2, [r0, #4]
   283d0:	1a52      	subs	r2, r2, r1
   283d2:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   283d4:	6800      	ldr	r0, [r0, #0]
   283d6:	4408      	add	r0, r1
   283d8:	6018      	str	r0, [r3, #0]
}
   283da:	4770      	bx	lr

000283dc <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   283dc:	4603      	mov	r3, r0
	void *data = buf->data;
   283de:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   283e0:	889a      	ldrh	r2, [r3, #4]
   283e2:	1a52      	subs	r2, r2, r1
   283e4:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   283e6:	4401      	add	r1, r0
   283e8:	6019      	str	r1, [r3, #0]

	return data;
}
   283ea:	4770      	bx	lr

000283ec <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   283ec:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   283ee:	6803      	ldr	r3, [r0, #0]
   283f0:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   283f2:	2101      	movs	r1, #1
   283f4:	f7ff ffea 	bl	283cc <net_buf_simple_pull>

	return val;
}
   283f8:	4620      	mov	r0, r4
   283fa:	bd10      	pop	{r4, pc}

000283fc <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   283fc:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   283fe:	6803      	ldr	r3, [r0, #0]
   28400:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   28402:	2102      	movs	r1, #2
   28404:	f7ff ffe2 	bl	283cc <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   28408:	4620      	mov	r0, r4
   2840a:	bd10      	pop	{r4, pc}

0002840c <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2840c:	6802      	ldr	r2, [r0, #0]
   2840e:	6880      	ldr	r0, [r0, #8]
}
   28410:	1a10      	subs	r0, r2, r0
   28412:	4770      	bx	lr

00028414 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   28414:	b538      	push	{r3, r4, r5, lr}
   28416:	4604      	mov	r4, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   28418:	88c5      	ldrh	r5, [r0, #6]
   2841a:	f7ff fff7 	bl	2840c <net_buf_simple_headroom>
   2841e:	1a2d      	subs	r5, r5, r0
   28420:	88a0      	ldrh	r0, [r4, #4]
}
   28422:	1a28      	subs	r0, r5, r0
   28424:	bd38      	pop	{r3, r4, r5, pc}

00028426 <nrf_clock_is_running>:
    switch (domain)
   28426:	b119      	cbz	r1, 28430 <nrf_clock_is_running+0xa>
   28428:	2901      	cmp	r1, #1
   2842a:	d00e      	beq.n	2844a <nrf_clock_is_running+0x24>
   2842c:	2000      	movs	r0, #0
   2842e:	4770      	bx	lr
            if (p_clk_src != NULL)
   28430:	b122      	cbz	r2, 2843c <nrf_clock_is_running+0x16>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   28432:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   28436:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   2843a:	6013      	str	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2843c:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   28440:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   28444:	d10e      	bne.n	28464 <nrf_clock_is_running+0x3e>
    return false;
   28446:	2000      	movs	r0, #0
   28448:	4770      	bx	lr
            if (p_clk_src != NULL)
   2844a:	b122      	cbz	r2, 28456 <nrf_clock_is_running+0x30>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   2844c:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   28450:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   28454:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   28456:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   2845a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2845e:	d103      	bne.n	28468 <nrf_clock_is_running+0x42>
    return false;
   28460:	2000      	movs	r0, #0
   28462:	4770      	bx	lr
                return true;
   28464:	2001      	movs	r0, #1
   28466:	4770      	bx	lr
                return true;
   28468:	2001      	movs	r0, #1
}
   2846a:	4770      	bx	lr

0002846c <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   2846c:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   2846e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   28472:	0089      	lsls	r1, r1, #2
   28474:	3138      	adds	r1, #56	; 0x38
}
   28476:	4408      	add	r0, r1
   28478:	4770      	bx	lr

0002847a <get_sub_config>:
	const struct nrf_clock_control_config *config =
   2847a:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   2847c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   28480:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   28484:	4770      	bx	lr

00028486 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   28486:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   28488:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   2848c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   28490:	4770      	bx	lr

00028492 <get_status>:
{
   28492:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   28494:	b2c9      	uxtb	r1, r1
   28496:	f7ff ffe9 	bl	2846c <get_sub_data>
   2849a:	6880      	ldr	r0, [r0, #8]
}
   2849c:	f000 0007 	and.w	r0, r0, #7
   284a0:	bd08      	pop	{r3, pc}

000284a2 <set_off_state>:
	__asm__ volatile(
   284a2:	f04f 0340 	mov.w	r3, #64	; 0x40
   284a6:	f3ef 8211 	mrs	r2, BASEPRI
   284aa:	f383 8812 	msr	BASEPRI_MAX, r3
   284ae:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   284b2:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   284b4:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   284b8:	d001      	beq.n	284be <set_off_state+0x1c>
   284ba:	428b      	cmp	r3, r1
   284bc:	d107      	bne.n	284ce <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   284be:	2301      	movs	r3, #1
   284c0:	6003      	str	r3, [r0, #0]
	int err = 0;
   284c2:	2000      	movs	r0, #0
	__asm__ volatile(
   284c4:	f382 8811 	msr	BASEPRI, r2
   284c8:	f3bf 8f6f 	isb	sy
}
   284cc:	4770      	bx	lr
		err = -EPERM;
   284ce:	f04f 30ff 	mov.w	r0, #4294967295
   284d2:	e7f7      	b.n	284c4 <set_off_state+0x22>

000284d4 <set_starting_state>:
	__asm__ volatile(
   284d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   284d8:	f3ef 8211 	mrs	r2, BASEPRI
   284dc:	f383 8812 	msr	BASEPRI_MAX, r3
   284e0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   284e4:	6803      	ldr	r3, [r0, #0]
   284e6:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   284ea:	f003 0307 	and.w	r3, r3, #7
   284ee:	2b01      	cmp	r3, #1
   284f0:	d008      	beq.n	28504 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
   284f2:	458c      	cmp	ip, r1
   284f4:	d009      	beq.n	2850a <set_starting_state+0x36>
		err = -EPERM;
   284f6:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   284fa:	f382 8811 	msr	BASEPRI, r2
   284fe:	f3bf 8f6f 	isb	sy
}
   28502:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   28504:	6001      	str	r1, [r0, #0]
	int err = 0;
   28506:	2000      	movs	r0, #0
   28508:	e7f7      	b.n	284fa <set_starting_state+0x26>
		err = -EALREADY;
   2850a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2850e:	e7f4      	b.n	284fa <set_starting_state+0x26>

00028510 <set_on_state>:
	__asm__ volatile(
   28510:	f04f 0340 	mov.w	r3, #64	; 0x40
   28514:	f3ef 8211 	mrs	r2, BASEPRI
   28518:	f383 8812 	msr	BASEPRI_MAX, r3
   2851c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   28520:	6803      	ldr	r3, [r0, #0]
   28522:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   28526:	f043 0302 	orr.w	r3, r3, #2
   2852a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2852c:	f382 8811 	msr	BASEPRI, r2
   28530:	f3bf 8f6f 	isb	sy
}
   28534:	4770      	bx	lr

00028536 <clkstarted_handle>:
{
   28536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28538:	4606      	mov	r6, r0
   2853a:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   2853c:	f7ff ff96 	bl	2846c <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   28540:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   28542:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   28544:	2300      	movs	r3, #0
   28546:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   2854a:	f7ff ffe1 	bl	28510 <set_on_state>
	if (callback) {
   2854e:	b11d      	cbz	r5, 28558 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   28550:	463a      	mov	r2, r7
   28552:	4621      	mov	r1, r4
   28554:	4630      	mov	r0, r6
   28556:	47a8      	blx	r5
}
   28558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002855a <stop>:
{
   2855a:	b570      	push	{r4, r5, r6, lr}
   2855c:	4606      	mov	r6, r0
   2855e:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   28560:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   28562:	4621      	mov	r1, r4
   28564:	f7ff ff82 	bl	2846c <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   28568:	4629      	mov	r1, r5
   2856a:	3008      	adds	r0, #8
   2856c:	f7ff ff99 	bl	284a2 <set_off_state>
	if (err < 0) {
   28570:	2800      	cmp	r0, #0
   28572:	db06      	blt.n	28582 <stop+0x28>
	get_sub_config(dev, type)->stop();
   28574:	4621      	mov	r1, r4
   28576:	4630      	mov	r0, r6
   28578:	f7ff ff7f 	bl	2847a <get_sub_config>
   2857c:	6843      	ldr	r3, [r0, #4]
   2857e:	4798      	blx	r3
	return 0;
   28580:	2000      	movs	r0, #0
}
   28582:	bd70      	pop	{r4, r5, r6, pc}

00028584 <api_stop>:
{
   28584:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   28586:	2280      	movs	r2, #128	; 0x80
   28588:	f7ff ffe7 	bl	2855a <stop>
}
   2858c:	bd08      	pop	{r3, pc}

0002858e <async_start>:
{
   2858e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28592:	4606      	mov	r6, r0
   28594:	4690      	mov	r8, r2
   28596:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   28598:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2859a:	4629      	mov	r1, r5
   2859c:	f7ff ff66 	bl	2846c <get_sub_data>
   285a0:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   285a2:	9906      	ldr	r1, [sp, #24]
   285a4:	3008      	adds	r0, #8
   285a6:	f7ff ff95 	bl	284d4 <set_starting_state>
	if (err < 0) {
   285aa:	2800      	cmp	r0, #0
   285ac:	db09      	blt.n	285c2 <async_start+0x34>
	subdata->cb = cb;
   285ae:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   285b2:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   285b4:	4629      	mov	r1, r5
   285b6:	4630      	mov	r0, r6
   285b8:	f7ff ff5f 	bl	2847a <get_sub_config>
   285bc:	6803      	ldr	r3, [r0, #0]
   285be:	4798      	blx	r3
	return 0;
   285c0:	2000      	movs	r0, #0
}
   285c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000285c6 <api_start>:
{
   285c6:	b510      	push	{r4, lr}
   285c8:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   285ca:	2480      	movs	r4, #128	; 0x80
   285cc:	9400      	str	r4, [sp, #0]
   285ce:	f7ff ffde 	bl	2858e <async_start>
}
   285d2:	b002      	add	sp, #8
   285d4:	bd10      	pop	{r4, pc}

000285d6 <onoff_started_callback>:
{
   285d6:	b510      	push	{r4, lr}
   285d8:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   285da:	b2c9      	uxtb	r1, r1
   285dc:	f7ff ff53 	bl	28486 <get_onoff_manager>
	notify(mgr, 0);
   285e0:	2100      	movs	r1, #0
   285e2:	47a0      	blx	r4
}
   285e4:	bd10      	pop	{r4, pc}

000285e6 <hfclk_start>:
{
   285e6:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   285e8:	2001      	movs	r0, #1
   285ea:	f7f8 fd51 	bl	21090 <nrfx_clock_start>
}
   285ee:	bd08      	pop	{r3, pc}

000285f0 <lfclk_start>:
{
   285f0:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   285f2:	2000      	movs	r0, #0
   285f4:	f7f8 fd4c 	bl	21090 <nrfx_clock_start>
}
   285f8:	bd08      	pop	{r3, pc}

000285fa <hfclk_stop>:
{
   285fa:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   285fc:	2001      	movs	r0, #1
   285fe:	f001 fa94 	bl	29b2a <nrfx_clock_stop>
}
   28602:	bd08      	pop	{r3, pc}

00028604 <lfclk_stop>:
{
   28604:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   28606:	2000      	movs	r0, #0
   28608:	f001 fa8f 	bl	29b2a <nrfx_clock_stop>
}
   2860c:	bd08      	pop	{r3, pc}

0002860e <k_msleep>:
{
   2860e:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   28610:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   28614:	17c1      	asrs	r1, r0, #31
   28616:	03c9      	lsls	r1, r1, #15
   28618:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   2861c:	03c0      	lsls	r0, r0, #15
   2861e:	f240 33e7 	movw	r3, #999	; 0x3e7
   28622:	18c0      	adds	r0, r0, r3
   28624:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28628:	f04f 0300 	mov.w	r3, #0
   2862c:	f141 0100 	adc.w	r1, r1, #0
   28630:	f7d7 fd66 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   28634:	f7fa fffa 	bl	2362c <z_impl_k_sleep>
}
   28638:	bd08      	pop	{r3, pc}

0002863a <blocking_start_callback>:
{
   2863a:	b508      	push	{r3, lr}
   2863c:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2863e:	f7fa fa99 	bl	22b74 <z_impl_k_sem_give>
}
   28642:	bd08      	pop	{r3, pc}

00028644 <k_msleep>:
{
   28644:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   28646:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2864a:	17c1      	asrs	r1, r0, #31
   2864c:	03c9      	lsls	r1, r1, #15
   2864e:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   28652:	03c0      	lsls	r0, r0, #15
   28654:	f240 33e7 	movw	r3, #999	; 0x3e7
   28658:	18c0      	adds	r0, r0, r3
   2865a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2865e:	f04f 0300 	mov.w	r3, #0
   28662:	f141 0100 	adc.w	r1, r1, #0
   28666:	f7d7 fd4b 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   2866a:	f7fa ffdf 	bl	2362c <z_impl_k_sleep>
}
   2866e:	bd08      	pop	{r3, pc}

00028670 <wait>:
{
   28670:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   28672:	f001 fccc 	bl	2a00e <k_is_in_isr>
   28676:	b100      	cbz	r0, 2867a <wait+0xa>
}
   28678:	bd08      	pop	{r3, pc}
		k_msleep(CONFIG_RTT_TX_RETRY_DELAY_MS);
   2867a:	2002      	movs	r0, #2
   2867c:	f7ff ffe2 	bl	28644 <k_msleep>
}
   28680:	e7fa      	b.n	28678 <wait+0x8>

00028682 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   28682:	460b      	mov	r3, r1
   28684:	b139      	cbz	r1, 28696 <sys_slist_remove+0x14>
	return node->next;
   28686:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   28688:	6019      	str	r1, [r3, #0]
	return list->tail;
   2868a:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2868c:	428a      	cmp	r2, r1
   2868e:	d009      	beq.n	286a4 <sys_slist_remove+0x22>
	parent->next = child;
   28690:	2300      	movs	r3, #0
   28692:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   28694:	4770      	bx	lr
	return node->next;
   28696:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   28698:	6003      	str	r3, [r0, #0]
	return list->tail;
   2869a:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2869c:	428a      	cmp	r2, r1
   2869e:	d1f7      	bne.n	28690 <sys_slist_remove+0xe>
	list->tail = node;
   286a0:	6043      	str	r3, [r0, #4]
}
   286a2:	e7f5      	b.n	28690 <sys_slist_remove+0xe>
	list->tail = node;
   286a4:	6043      	str	r3, [r0, #4]
}
   286a6:	e7f3      	b.n	28690 <sys_slist_remove+0xe>

000286a8 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   286a8:	b508      	push	{r3, lr}
   286aa:	460a      	mov	r2, r1
	return list->head;
   286ac:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   286ae:	2100      	movs	r1, #0
   286b0:	e001      	b.n	286b6 <sys_slist_find_and_remove+0xe>
   286b2:	4619      	mov	r1, r3
   286b4:	681b      	ldr	r3, [r3, #0]
   286b6:	b12b      	cbz	r3, 286c4 <sys_slist_find_and_remove+0x1c>
   286b8:	4293      	cmp	r3, r2
   286ba:	d1fa      	bne.n	286b2 <sys_slist_find_and_remove+0xa>
   286bc:	f7ff ffe1 	bl	28682 <sys_slist_remove>
   286c0:	2001      	movs	r0, #1
   286c2:	e000      	b.n	286c6 <sys_slist_find_and_remove+0x1e>
   286c4:	2000      	movs	r0, #0
   286c6:	bd08      	pop	{r3, pc}

000286c8 <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
   286c8:	b570      	push	{r4, r5, r6, lr}
   286ca:	4604      	mov	r4, r0
   286cc:	460d      	mov	r5, r1
   286ce:	4616      	mov	r6, r2
	return list->head;
   286d0:	6803      	ldr	r3, [r0, #0]
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   286d2:	b133      	cbz	r3, 286e2 <gpio_manage_callback+0x1a>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   286d4:	f7ff ffe8 	bl	286a8 <sys_slist_find_and_remove>
   286d8:	b970      	cbnz	r0, 286f8 <gpio_manage_callback+0x30>
			if (!set) {
   286da:	b91e      	cbnz	r6, 286e4 <gpio_manage_callback+0x1c>
				return -EINVAL;
   286dc:	f06f 0015 	mvn.w	r0, #21
   286e0:	e006      	b.n	286f0 <gpio_manage_callback+0x28>
			}
		}
	} else if (!set) {
   286e2:	b132      	cbz	r2, 286f2 <gpio_manage_callback+0x2a>
   286e4:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   286e6:	602b      	str	r3, [r5, #0]
	list->head = node;
   286e8:	6025      	str	r5, [r4, #0]
	return list->tail;
   286ea:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   286ec:	b143      	cbz	r3, 28700 <gpio_manage_callback+0x38>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   286ee:	2000      	movs	r0, #0
}
   286f0:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   286f2:	f06f 0015 	mvn.w	r0, #21
   286f6:	e7fb      	b.n	286f0 <gpio_manage_callback+0x28>
	if (set) {
   286f8:	2e00      	cmp	r6, #0
   286fa:	d1f3      	bne.n	286e4 <gpio_manage_callback+0x1c>
	return 0;
   286fc:	2000      	movs	r0, #0
   286fe:	e7f7      	b.n	286f0 <gpio_manage_callback+0x28>
	list->tail = node;
   28700:	6065      	str	r5, [r4, #4]
   28702:	2000      	movs	r0, #0
}
   28704:	e7f4      	b.n	286f0 <gpio_manage_callback+0x28>

00028706 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   28706:	b570      	push	{r4, r5, r6, lr}
   28708:	460e      	mov	r6, r1
   2870a:	4615      	mov	r5, r2
	return list->head;
   2870c:	6801      	ldr	r1, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2870e:	b121      	cbz	r1, 2871a <gpio_fire_callbacks+0x14>
	return node->next;
   28710:	680c      	ldr	r4, [r1, #0]
   28712:	b13c      	cbz	r4, 28724 <gpio_fire_callbacks+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   28714:	b931      	cbnz	r1, 28724 <gpio_fire_callbacks+0x1e>
   28716:	460c      	mov	r4, r1
   28718:	e004      	b.n	28724 <gpio_fire_callbacks+0x1e>
   2871a:	460c      	mov	r4, r1
   2871c:	e002      	b.n	28724 <gpio_fire_callbacks+0x1e>
   2871e:	4623      	mov	r3, r4
   28720:	4621      	mov	r1, r4
   28722:	461c      	mov	r4, r3
   28724:	b171      	cbz	r1, 28744 <gpio_fire_callbacks+0x3e>
		if (cb->pin_mask & pins) {
   28726:	688a      	ldr	r2, [r1, #8]
   28728:	402a      	ands	r2, r5
   2872a:	d002      	beq.n	28732 <gpio_fire_callbacks+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   2872c:	684b      	ldr	r3, [r1, #4]
   2872e:	4630      	mov	r0, r6
   28730:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   28732:	2c00      	cmp	r4, #0
   28734:	d0f3      	beq.n	2871e <gpio_fire_callbacks+0x18>
	return node->next;
   28736:	6823      	ldr	r3, [r4, #0]
   28738:	2b00      	cmp	r3, #0
   2873a:	d0f1      	beq.n	28720 <gpio_fire_callbacks+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2873c:	2c00      	cmp	r4, #0
   2873e:	d1ef      	bne.n	28720 <gpio_fire_callbacks+0x1a>
   28740:	4623      	mov	r3, r4
   28742:	e7ed      	b.n	28720 <gpio_fire_callbacks+0x1a>
		}
	}
}
   28744:	bd70      	pop	{r4, r5, r6, pc}

00028746 <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   28746:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
   2874a:	0580      	lsls	r0, r0, #22
   2874c:	0d80      	lsrs	r0, r0, #22
   2874e:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
   28752:	d033      	beq.n	287bc <get_drive+0x76>
   28754:	d816      	bhi.n	28784 <get_drive+0x3e>
   28756:	2806      	cmp	r0, #6
   28758:	d02c      	beq.n	287b4 <get_drive+0x6e>
   2875a:	d906      	bls.n	2876a <get_drive+0x24>
   2875c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   28760:	d10d      	bne.n	2877e <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
   28762:	2301      	movs	r3, #1
   28764:	700b      	strb	r3, [r1, #0]
	return 0;
   28766:	2000      	movs	r0, #0
		break;
   28768:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2876a:	b300      	cbz	r0, 287ae <get_drive+0x68>
   2876c:	2802      	cmp	r0, #2
   2876e:	d103      	bne.n	28778 <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
   28770:	2304      	movs	r3, #4
   28772:	700b      	strb	r3, [r1, #0]
	return 0;
   28774:	2000      	movs	r0, #0
		break;
   28776:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   28778:	f06f 0015 	mvn.w	r0, #21
   2877c:	4770      	bx	lr
   2877e:	f06f 0015 	mvn.w	r0, #21
   28782:	4770      	bx	lr
   28784:	f240 2302 	movw	r3, #514	; 0x202
   28788:	4298      	cmp	r0, r3
   2878a:	d01b      	beq.n	287c4 <get_drive+0x7e>
   2878c:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
   28790:	d103      	bne.n	2879a <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
   28792:	2303      	movs	r3, #3
   28794:	700b      	strb	r3, [r1, #0]
	return 0;
   28796:	2000      	movs	r0, #0
		break;
   28798:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2879a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   2879e:	d103      	bne.n	287a8 <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
   287a0:	2302      	movs	r3, #2
   287a2:	700b      	strb	r3, [r1, #0]
	return 0;
   287a4:	2000      	movs	r0, #0
		break;
   287a6:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   287a8:	f06f 0015 	mvn.w	r0, #21
   287ac:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   287ae:	2000      	movs	r0, #0
   287b0:	7008      	strb	r0, [r1, #0]
		break;
   287b2:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   287b4:	2306      	movs	r3, #6
   287b6:	700b      	strb	r3, [r1, #0]
	return 0;
   287b8:	2000      	movs	r0, #0
		break;
   287ba:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   287bc:	2307      	movs	r3, #7
   287be:	700b      	strb	r3, [r1, #0]
	return 0;
   287c0:	2000      	movs	r0, #0
		break;
   287c2:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
   287c4:	2305      	movs	r3, #5
   287c6:	700b      	strb	r3, [r1, #0]
	return 0;
   287c8:	2000      	movs	r0, #0
}
   287ca:	4770      	bx	lr

000287cc <get_pull>:
	if (flags & GPIO_PULL_UP) {
   287cc:	f010 0f10 	tst.w	r0, #16
   287d0:	d104      	bne.n	287dc <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   287d2:	f010 0f20 	tst.w	r0, #32
   287d6:	d103      	bne.n	287e0 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   287d8:	2000      	movs	r0, #0
   287da:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   287dc:	2003      	movs	r0, #3
   287de:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   287e0:	2001      	movs	r0, #1
}
   287e2:	4770      	bx	lr

000287e4 <gpio_nrfx_port_get_raw>:
	return port->config;
   287e4:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   287e6:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   287e8:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   287ec:	600b      	str	r3, [r1, #0]
}
   287ee:	2000      	movs	r0, #0
   287f0:	4770      	bx	lr

000287f2 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   287f2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   287f4:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   287f6:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   287fa:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   287fe:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   28802:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   28806:	2000      	movs	r0, #0
   28808:	4770      	bx	lr

0002880a <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   2880a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2880c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   2880e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   28812:	2000      	movs	r0, #0
   28814:	4770      	bx	lr

00028816 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   28816:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28818:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2881a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   2881e:	2000      	movs	r0, #0
   28820:	4770      	bx	lr

00028822 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   28822:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28824:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   28826:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   2882a:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   2882e:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   28830:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   28834:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   28838:	2000      	movs	r0, #0
   2883a:	4770      	bx	lr

0002883c <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   2883c:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
   28840:	d007      	beq.n	28852 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   28842:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
   28846:	d00d      	beq.n	28864 <get_trigger+0x28>
   28848:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   2884c:	d008      	beq.n	28860 <get_trigger+0x24>
   2884e:	2001      	movs	r0, #1
}
   28850:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   28852:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   28856:	d001      	beq.n	2885c <get_trigger+0x20>
   28858:	2005      	movs	r0, #5
   2885a:	4770      	bx	lr
   2885c:	2004      	movs	r0, #4
   2885e:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   28860:	2002      	movs	r0, #2
   28862:	4770      	bx	lr
   28864:	2003      	movs	r0, #3
   28866:	4770      	bx	lr

00028868 <gpio_nrfx_manage_callback>:
{
   28868:	b508      	push	{r3, lr}
	return port->data;
   2886a:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2886c:	3004      	adds	r0, #4
   2886e:	f7ff ff2b 	bl	286c8 <gpio_manage_callback>
}
   28872:	bd08      	pop	{r3, pc}

00028874 <nrfx_gpio_handler>:
{
   28874:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
   28876:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
   2887a:	0940      	lsrs	r0, r0, #5
   2887c:	f7f5 fa66 	bl	1dd4c <get_dev>
	if (port == NULL) {
   28880:	b130      	cbz	r0, 28890 <nrfx_gpio_handler+0x1c>
   28882:	4601      	mov	r1, r0
	return port->data;
   28884:	6900      	ldr	r0, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
   28886:	2201      	movs	r2, #1
   28888:	40a2      	lsls	r2, r4
   2888a:	3004      	adds	r0, #4
   2888c:	f7ff ff3b 	bl	28706 <gpio_fire_callbacks>
}
   28890:	bd10      	pop	{r4, pc}

00028892 <z_impl_gpio_pin_configure>:
{
   28892:	b538      	push	{r3, r4, r5, lr}
   28894:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
   28896:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
   28898:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   2889a:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
   2889e:	d007      	beq.n	288b0 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   288a0:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   288a4:	d004      	beq.n	288b0 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   288a6:	f012 0f01 	tst.w	r2, #1
   288aa:	d001      	beq.n	288b0 <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   288ac:	f482 2340 	eor.w	r3, r2, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   288b0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   288b4:	f013 0f01 	tst.w	r3, #1
   288b8:	d00a      	beq.n	288d0 <z_impl_gpio_pin_configure+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   288ba:	6823      	ldr	r3, [r4, #0]
   288bc:	f04f 0c01 	mov.w	ip, #1
   288c0:	fa0c fc01 	lsl.w	ip, ip, r1
   288c4:	ea43 030c 	orr.w	r3, r3, ip
   288c8:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
   288ca:	682b      	ldr	r3, [r5, #0]
   288cc:	4798      	blx	r3
}
   288ce:	bd38      	pop	{r3, r4, r5, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   288d0:	6823      	ldr	r3, [r4, #0]
   288d2:	f04f 0c01 	mov.w	ip, #1
   288d6:	fa0c fc01 	lsl.w	ip, ip, r1
   288da:	ea23 030c 	bic.w	r3, r3, ip
   288de:	6023      	str	r3, [r4, #0]
   288e0:	e7f3      	b.n	288ca <z_impl_gpio_pin_configure+0x38>

000288e2 <gpio_pin_configure_dt>:
{
   288e2:	b508      	push	{r3, lr}
   288e4:	4603      	mov	r3, r0
   288e6:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
   288e8:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   288ea:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   288ec:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   288ee:	ea42 020c 	orr.w	r2, r2, ip
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   288f2:	f7ff ffce 	bl	28892 <z_impl_gpio_pin_configure>
}
   288f6:	bd08      	pop	{r3, pc}

000288f8 <gpio_pin_set_raw>:
{
   288f8:	b508      	push	{r3, lr}
	if (value != 0)	{
   288fa:	b132      	cbz	r2, 2890a <gpio_pin_set_raw+0x12>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   288fc:	2301      	movs	r3, #1
   288fe:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   28902:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   28904:	68db      	ldr	r3, [r3, #12]
   28906:	4798      	blx	r3
}
   28908:	bd08      	pop	{r3, pc}
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   2890a:	2301      	movs	r3, #1
   2890c:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   28910:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   28912:	691b      	ldr	r3, [r3, #16]
   28914:	4798      	blx	r3
	return ret;
   28916:	e7f7      	b.n	28908 <gpio_pin_set_raw+0x10>

00028918 <gpio_pin_set>:
{
   28918:	b510      	push	{r4, lr}
	const struct gpio_driver_data *const data =
   2891a:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2891c:	681c      	ldr	r4, [r3, #0]
   2891e:	2301      	movs	r3, #1
   28920:	408b      	lsls	r3, r1
   28922:	421c      	tst	r4, r3
   28924:	d002      	beq.n	2892c <gpio_pin_set+0x14>
		value = (value != 0) ? 0 : 1;
   28926:	fab2 f282 	clz	r2, r2
   2892a:	0952      	lsrs	r2, r2, #5
	return gpio_pin_set_raw(port, pin, value);
   2892c:	f7ff ffe4 	bl	288f8 <gpio_pin_set_raw>
}
   28930:	bd10      	pop	{r4, pc}

00028932 <spi_context_get_next_buf>:
{
   28932:	b430      	push	{r4, r5}
	while (*count) {
   28934:	e004      	b.n	28940 <spi_context_get_next_buf+0xe>
		++(*current);
   28936:	3408      	adds	r4, #8
   28938:	6004      	str	r4, [r0, #0]
		--(*count);
   2893a:	680c      	ldr	r4, [r1, #0]
   2893c:	3c01      	subs	r4, #1
   2893e:	600c      	str	r4, [r1, #0]
	while (*count) {
   28940:	680c      	ldr	r4, [r1, #0]
   28942:	b14c      	cbz	r4, 28958 <spi_context_get_next_buf+0x26>
		if (((*current)->len / dfs) != 0) {
   28944:	6804      	ldr	r4, [r0, #0]
   28946:	6865      	ldr	r5, [r4, #4]
   28948:	429d      	cmp	r5, r3
   2894a:	d3f4      	bcc.n	28936 <spi_context_get_next_buf+0x4>
			*buf_len = (*current)->len / dfs;
   2894c:	fbb5 f5f3 	udiv	r5, r5, r3
   28950:	6015      	str	r5, [r2, #0]
			return (*current)->buf;
   28952:	6803      	ldr	r3, [r0, #0]
   28954:	6818      	ldr	r0, [r3, #0]
   28956:	e001      	b.n	2895c <spi_context_get_next_buf+0x2a>
	*buf_len = 0;
   28958:	2000      	movs	r0, #0
   2895a:	6010      	str	r0, [r2, #0]
}
   2895c:	bc30      	pop	{r4, r5}
   2895e:	4770      	bx	lr

00028960 <spi_context_buffers_setup>:
{
   28960:	b570      	push	{r4, r5, r6, lr}
   28962:	4604      	mov	r4, r0
   28964:	4615      	mov	r5, r2
   28966:	461e      	mov	r6, r3
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   28968:	460a      	mov	r2, r1
   2896a:	b309      	cbz	r1, 289b0 <spi_context_buffers_setup+0x50>
   2896c:	680b      	ldr	r3, [r1, #0]
   2896e:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   28970:	b303      	cbz	r3, 289b4 <spi_context_buffers_setup+0x54>
   28972:	6853      	ldr	r3, [r2, #4]
   28974:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   28976:	4633      	mov	r3, r6
   28978:	f104 0258 	add.w	r2, r4, #88	; 0x58
   2897c:	f104 0148 	add.w	r1, r4, #72	; 0x48
   28980:	f104 0044 	add.w	r0, r4, #68	; 0x44
   28984:	f7ff ffd5 	bl	28932 <spi_context_get_next_buf>
	ctx->tx_buf = (const uint8_t *)
   28988:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   2898a:	b1ad      	cbz	r5, 289b8 <spi_context_buffers_setup+0x58>
   2898c:	682b      	ldr	r3, [r5, #0]
   2898e:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   28990:	b1a3      	cbz	r3, 289bc <spi_context_buffers_setup+0x5c>
   28992:	686b      	ldr	r3, [r5, #4]
   28994:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   28996:	4633      	mov	r3, r6
   28998:	f104 0260 	add.w	r2, r4, #96	; 0x60
   2899c:	f104 0150 	add.w	r1, r4, #80	; 0x50
   289a0:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   289a4:	f7ff ffc5 	bl	28932 <spi_context_get_next_buf>
	ctx->rx_buf = (uint8_t *)
   289a8:	65e0      	str	r0, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
   289aa:	2300      	movs	r3, #0
   289ac:	6423      	str	r3, [r4, #64]	; 0x40
}
   289ae:	bd70      	pop	{r4, r5, r6, pc}
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   289b0:	460b      	mov	r3, r1
   289b2:	e7dc      	b.n	2896e <spi_context_buffers_setup+0xe>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   289b4:	2300      	movs	r3, #0
   289b6:	e7dd      	b.n	28974 <spi_context_buffers_setup+0x14>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   289b8:	462b      	mov	r3, r5
   289ba:	e7e8      	b.n	2898e <spi_context_buffers_setup+0x2e>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   289bc:	2300      	movs	r3, #0
   289be:	e7e9      	b.n	28994 <spi_context_buffers_setup+0x34>

000289c0 <_spi_context_cs_control>:
{
   289c0:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   289c2:	6803      	ldr	r3, [r0, #0]
   289c4:	b1a3      	cbz	r3, 289f0 <_spi_context_cs_control+0x30>
   289c6:	4604      	mov	r4, r0
   289c8:	689d      	ldr	r5, [r3, #8]
   289ca:	b18d      	cbz	r5, 289f0 <_spi_context_cs_control+0x30>
   289cc:	6828      	ldr	r0, [r5, #0]
   289ce:	b178      	cbz	r0, 289f0 <_spi_context_cs_control+0x30>
		if (on) {
   289d0:	b979      	cbnz	r1, 289f2 <_spi_context_cs_control+0x32>
			if (!force_off &&
   289d2:	b91a      	cbnz	r2, 289dc <_spi_context_cs_control+0x1c>
			    ctx->config->operation & SPI_HOLD_ON_CS) {
   289d4:	889b      	ldrh	r3, [r3, #4]
			if (!force_off &&
   289d6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   289da:	d109      	bne.n	289f0 <_spi_context_cs_control+0x30>
			k_busy_wait(ctx->config->cs->delay);
   289dc:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_busy_wait(usec_to_wait);
   289de:	f001 ffd8 	bl	2a992 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   289e2:	6823      	ldr	r3, [r4, #0]
   289e4:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
   289e6:	2200      	movs	r2, #0
   289e8:	7919      	ldrb	r1, [r3, #4]
   289ea:	6818      	ldr	r0, [r3, #0]
   289ec:	f7ff ff94 	bl	28918 <gpio_pin_set>
}
   289f0:	bd38      	pop	{r3, r4, r5, pc}
   289f2:	2201      	movs	r2, #1
   289f4:	7929      	ldrb	r1, [r5, #4]
   289f6:	f7ff ff8f 	bl	28918 <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
   289fa:	6823      	ldr	r3, [r4, #0]
   289fc:	689b      	ldr	r3, [r3, #8]
   289fe:	6898      	ldr	r0, [r3, #8]
   28a00:	f001 ffc7 	bl	2a992 <z_impl_k_busy_wait>
}
   28a04:	e7f4      	b.n	289f0 <_spi_context_cs_control+0x30>

00028a06 <spi_context_unlock_unconditionally>:
{
   28a06:	b510      	push	{r4, lr}
   28a08:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   28a0a:	2201      	movs	r2, #1
   28a0c:	2100      	movs	r1, #0
   28a0e:	f7ff ffd7 	bl	289c0 <_spi_context_cs_control>
	return sem->count;
   28a12:	69a3      	ldr	r3, [r4, #24]
	if (!k_sem_count_get(&ctx->lock)) {
   28a14:	b103      	cbz	r3, 28a18 <spi_context_unlock_unconditionally+0x12>
}
   28a16:	bd10      	pop	{r4, pc}
		ctx->owner = NULL;
   28a18:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
   28a1a:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
   28a1e:	f7fa f8a9 	bl	22b74 <z_impl_k_sem_give>
}
   28a22:	e7f8      	b.n	28a16 <spi_context_unlock_unconditionally+0x10>

00028a24 <spi_nrfx_release>:
}
#endif /* CONFIG_SPI_ASYNC */

static int spi_nrfx_release(const struct device *dev,
			    const struct spi_config *spi_cfg)
{
   28a24:	b508      	push	{r3, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   28a26:	6900      	ldr	r0, [r0, #16]
	return !!(ctx->config == config);
   28a28:	6803      	ldr	r3, [r0, #0]

	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   28a2a:	428b      	cmp	r3, r1
   28a2c:	d106      	bne.n	28a3c <spi_nrfx_release+0x18>
		return -EINVAL;
	}

	if (dev_data->busy) {
   28a2e:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
   28a32:	b933      	cbnz	r3, 28a42 <spi_nrfx_release+0x1e>
		return -EBUSY;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   28a34:	f7ff ffe7 	bl	28a06 <spi_context_unlock_unconditionally>

	return 0;
   28a38:	2000      	movs	r0, #0
}
   28a3a:	bd08      	pop	{r3, pc}
		return -EINVAL;
   28a3c:	f06f 0015 	mvn.w	r0, #21
   28a40:	e7fb      	b.n	28a3a <spi_nrfx_release+0x16>
		return -EBUSY;
   28a42:	f06f 000f 	mvn.w	r0, #15
   28a46:	e7f8      	b.n	28a3a <spi_nrfx_release+0x16>

00028a48 <spi_context_release>:
{
   28a48:	b508      	push	{r3, lr}
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   28a4a:	6803      	ldr	r3, [r0, #0]
   28a4c:	889b      	ldrh	r3, [r3, #4]
   28a4e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   28a52:	d000      	beq.n	28a56 <spi_context_release+0xe>
}
   28a54:	bd08      	pop	{r3, pc}
		ctx->owner = NULL;
   28a56:	2300      	movs	r3, #0
   28a58:	6043      	str	r3, [r0, #4]
		k_sem_give(&ctx->lock);
   28a5a:	3010      	adds	r0, #16
   28a5c:	f7fa f88a 	bl	22b74 <z_impl_k_sem_give>
}
   28a60:	e7f8      	b.n	28a54 <spi_context_release+0xc>

00028a62 <spi_context_lock>:
{
   28a62:	b538      	push	{r3, r4, r5, lr}
   28a64:	4604      	mov	r4, r0
   28a66:	9d04      	ldr	r5, [sp, #16]
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   28a68:	88ab      	ldrh	r3, [r5, #4]
   28a6a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   28a6e:	d004      	beq.n	28a7a <spi_context_lock+0x18>
   28a70:	6983      	ldr	r3, [r0, #24]
   28a72:	b913      	cbnz	r3, 28a7a <spi_context_lock+0x18>
		(ctx->owner == spi_cfg)) {
   28a74:	6843      	ldr	r3, [r0, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
   28a76:	42ab      	cmp	r3, r5
   28a78:	d008      	beq.n	28a8c <spi_context_lock+0x2a>
	k_sem_take(&ctx->lock, K_FOREVER);
   28a7a:	f104 0010 	add.w	r0, r4, #16
	return z_impl_k_sem_take(sem, timeout);
   28a7e:	f04f 32ff 	mov.w	r2, #4294967295
   28a82:	f04f 33ff 	mov.w	r3, #4294967295
   28a86:	f7fa f89d 	bl	22bc4 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   28a8a:	6065      	str	r5, [r4, #4]
}
   28a8c:	bd38      	pop	{r3, r4, r5, pc}

00028a8e <transceive>:
{
   28a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28a92:	b082      	sub	sp, #8
   28a94:	4604      	mov	r4, r0
   28a96:	460d      	mov	r5, r1
   28a98:	4690      	mov	r8, r2
   28a9a:	461f      	mov	r7, r3
	struct spi_nrfx_data *dev_data = dev->data;
   28a9c:	6906      	ldr	r6, [r0, #16]
	spi_context_lock(&dev_data->ctx, asynchronous, cb, userdata, spi_cfg);
   28a9e:	9100      	str	r1, [sp, #0]
   28aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28aa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   28aa4:	f89d 1020 	ldrb.w	r1, [sp, #32]
   28aa8:	4630      	mov	r0, r6
   28aaa:	f7ff ffda 	bl	28a62 <spi_context_lock>
	error = configure(dev, spi_cfg);
   28aae:	4629      	mov	r1, r5
   28ab0:	4620      	mov	r0, r4
   28ab2:	f7f5 fa97 	bl	1dfe4 <configure>
	if (error == 0) {
   28ab6:	4605      	mov	r5, r0
   28ab8:	b138      	cbz	r0, 28aca <transceive+0x3c>
	spi_context_release(&dev_data->ctx, error);
   28aba:	4629      	mov	r1, r5
   28abc:	4630      	mov	r0, r6
   28abe:	f7ff ffc3 	bl	28a48 <spi_context_release>
}
   28ac2:	4628      	mov	r0, r5
   28ac4:	b002      	add	sp, #8
   28ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dev_data->busy = true;
   28aca:	2501      	movs	r5, #1
   28acc:	f886 506c 	strb.w	r5, [r6, #108]	; 0x6c
		spi_context_buffers_setup(&dev_data->ctx, tx_bufs, rx_bufs, 1);
   28ad0:	462b      	mov	r3, r5
   28ad2:	463a      	mov	r2, r7
   28ad4:	4641      	mov	r1, r8
   28ad6:	4630      	mov	r0, r6
   28ad8:	f7ff ff42 	bl	28960 <spi_context_buffers_setup>
	_spi_context_cs_control(ctx, on, false);
   28adc:	2200      	movs	r2, #0
   28ade:	4629      	mov	r1, r5
   28ae0:	4630      	mov	r0, r6
   28ae2:	f7ff ff6d 	bl	289c0 <_spi_context_cs_control>
		transfer_next_chunk(dev);
   28ae6:	4620      	mov	r0, r4
   28ae8:	f7f5 fc84 	bl	1e3f4 <transfer_next_chunk>
		error = spi_context_wait_for_completion(&dev_data->ctx);
   28aec:	4630      	mov	r0, r6
   28aee:	f7f5 fc2b 	bl	1e348 <spi_context_wait_for_completion>
   28af2:	4605      	mov	r5, r0
   28af4:	e7e1      	b.n	28aba <transceive+0x2c>

00028af6 <spi_nrfx_transceive>:
{
   28af6:	b510      	push	{r4, lr}
   28af8:	b084      	sub	sp, #16
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL, NULL);
   28afa:	2400      	movs	r4, #0
   28afc:	9402      	str	r4, [sp, #8]
   28afe:	9401      	str	r4, [sp, #4]
   28b00:	9400      	str	r4, [sp, #0]
   28b02:	f7ff ffc4 	bl	28a8e <transceive>
}
   28b06:	b004      	add	sp, #16
   28b08:	bd10      	pop	{r4, pc}

00028b0a <irq_connect0>:
		      &spi_##idx##z_config,				       \
		      POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,		       \
		      &spi_nrfx_driver_api)

#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEFINE(0);
   28b0a:	b508      	push	{r3, lr}
   28b0c:	2200      	movs	r2, #0
   28b0e:	2101      	movs	r1, #1
   28b10:	2003      	movs	r0, #3
   28b12:	f7fd f9be 	bl	25e92 <z_arm_irq_priority_set>
   28b16:	bd08      	pop	{r3, pc}

00028b18 <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
   28b18:	b510      	push	{r4, lr}
   28b1a:	b082      	sub	sp, #8
   28b1c:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   28b1e:	aa01      	add	r2, sp, #4
   28b20:	f000 fbe8 	bl	292f4 <pinctrl_lookup_state>
	if (ret < 0) {
   28b24:	2800      	cmp	r0, #0
   28b26:	db05      	blt.n	28b34 <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   28b28:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   28b2a:	6822      	ldr	r2, [r4, #0]
   28b2c:	7919      	ldrb	r1, [r3, #4]
   28b2e:	6818      	ldr	r0, [r3, #0]
   28b30:	f7f7 faa2 	bl	20078 <pinctrl_configure_pins>
}
   28b34:	b002      	add	sp, #8
   28b36:	bd10      	pop	{r4, pc}

00028b38 <spi_nrfx_init>:
{
   28b38:	b538      	push	{r3, r4, r5, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
   28b3a:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   28b3c:	6905      	ldr	r5, [r0, #16]
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   28b3e:	2100      	movs	r1, #0
   28b40:	6a20      	ldr	r0, [r4, #32]
   28b42:	f7ff ffe9 	bl	28b18 <pinctrl_apply_state>
	if (err < 0) {
   28b46:	2800      	cmp	r0, #0
   28b48:	db0a      	blt.n	28b60 <spi_nrfx_init+0x28>
	dev_config->irq_connect();
   28b4a:	69e3      	ldr	r3, [r4, #28]
   28b4c:	4798      	blx	r3
	err = spi_context_cs_configure_all(&dev_data->ctx);
   28b4e:	4628      	mov	r0, r5
   28b50:	f7f5 fd28 	bl	1e5a4 <spi_context_cs_configure_all>
	if (err < 0) {
   28b54:	2800      	cmp	r0, #0
   28b56:	db03      	blt.n	28b60 <spi_nrfx_init+0x28>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   28b58:	4628      	mov	r0, r5
   28b5a:	f7ff ff54 	bl	28a06 <spi_context_unlock_unconditionally>
	return 0;
   28b5e:	2000      	movs	r0, #0
}
   28b60:	bd38      	pop	{r3, r4, r5, pc}

00028b62 <can_calc_timing_int>:
{
   28b62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28b66:	b087      	sub	sp, #28
   28b68:	4692      	mov	sl, r2
   28b6a:	461e      	mov	r6, r3
   28b6c:	9f10      	ldr	r7, [sp, #64]	; 0x40
   28b6e:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
	uint32_t ts = max->prop_seg + max->phase_seg1 + max->phase_seg2 +
   28b72:	885b      	ldrh	r3, [r3, #2]
   28b74:	88b2      	ldrh	r2, [r6, #4]
   28b76:	4413      	add	r3, r2
   28b78:	88f2      	ldrh	r2, [r6, #6]
   28b7a:	4413      	add	r3, r2
	if (bitrate == 0 || sp >= 1000) {
   28b7c:	2f00      	cmp	r7, #0
   28b7e:	d045      	beq.n	28c0c <can_calc_timing_int+0xaa>
   28b80:	4605      	mov	r5, r0
   28b82:	4688      	mov	r8, r1
   28b84:	3301      	adds	r3, #1
   28b86:	f5bb 7f7a 	cmp.w	fp, #1000	; 0x3e8
   28b8a:	d242      	bcs.n	28c12 <can_calc_timing_int+0xb0>
	for (int prescaler = MAX(core_clock / (ts * bitrate), 1);
   28b8c:	fb07 f303 	mul.w	r3, r7, r3
   28b90:	fbb0 f4f3 	udiv	r4, r0, r3
   28b94:	2c01      	cmp	r4, #1
   28b96:	bf38      	it	cc
   28b98:	2401      	movcc	r4, #1
	uint16_t sp_err_min = UINT16_MAX;
   28b9a:	f64f 79ff 	movw	r9, #65535	; 0xffff
	for (int prescaler = MAX(core_clock / (ts * bitrate), 1);
   28b9e:	e000      	b.n	28ba2 <can_calc_timing_int+0x40>
	     prescaler <= max->prescaler; ++prescaler) {
   28ba0:	3401      	adds	r4, #1
   28ba2:	8933      	ldrh	r3, [r6, #8]
   28ba4:	42a3      	cmp	r3, r4
   28ba6:	db26      	blt.n	28bf6 <can_calc_timing_int+0x94>
		if (core_clock % (prescaler * bitrate)) {
   28ba8:	fb07 f004 	mul.w	r0, r7, r4
   28bac:	fbb5 f3f0 	udiv	r3, r5, r0
   28bb0:	fb00 5313 	mls	r3, r0, r3, r5
   28bb4:	2b00      	cmp	r3, #0
   28bb6:	d1f3      	bne.n	28ba0 <can_calc_timing_int+0x3e>
		sp_err = update_sampling_pnt(ts, sp, &tmp_res,
   28bb8:	f8cd a000 	str.w	sl, [sp]
   28bbc:	4633      	mov	r3, r6
   28bbe:	aa03      	add	r2, sp, #12
   28bc0:	4659      	mov	r1, fp
   28bc2:	fbb5 f0f0 	udiv	r0, r5, r0
   28bc6:	f7f5 fd6d 	bl	1e6a4 <update_sampling_pnt>
		if (sp_err < 0) {
   28bca:	2800      	cmp	r0, #0
   28bcc:	dbe8      	blt.n	28ba0 <can_calc_timing_int+0x3e>
		if (sp_err < sp_err_min) {
   28bce:	4581      	cmp	r9, r0
   28bd0:	dde6      	ble.n	28ba0 <can_calc_timing_int+0x3e>
			sp_err_min = sp_err;
   28bd2:	fa1f f980 	uxth.w	r9, r0
			res->prop_seg = tmp_res.prop_seg;
   28bd6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   28bda:	f8a8 3002 	strh.w	r3, [r8, #2]
			res->phase_seg1 = tmp_res.phase_seg1;
   28bde:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   28be2:	f8a8 3004 	strh.w	r3, [r8, #4]
			res->phase_seg2 = tmp_res.phase_seg2;
   28be6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   28bea:	f8a8 3006 	strh.w	r3, [r8, #6]
			res->prescaler = (uint16_t)prescaler;
   28bee:	f8a8 4008 	strh.w	r4, [r8, #8]
			if (sp_err == 0) {
   28bf2:	2800      	cmp	r0, #0
   28bf4:	d1d4      	bne.n	28ba0 <can_calc_timing_int+0x3e>
	if (sp_err_min) {
   28bf6:	f1b9 0f00 	cmp.w	r9, #0
   28bfa:	d003      	beq.n	28c04 <can_calc_timing_int+0xa2>
	return sp_err_min == UINT16_MAX ? -ENOTSUP : (int)sp_err_min;
   28bfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   28c00:	4599      	cmp	r9, r3
   28c02:	d009      	beq.n	28c18 <can_calc_timing_int+0xb6>
   28c04:	4648      	mov	r0, r9
}
   28c06:	b007      	add	sp, #28
   28c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
   28c0c:	f06f 0015 	mvn.w	r0, #21
   28c10:	e7f9      	b.n	28c06 <can_calc_timing_int+0xa4>
   28c12:	f06f 0015 	mvn.w	r0, #21
   28c16:	e7f6      	b.n	28c06 <can_calc_timing_int+0xa4>
	return sp_err_min == UINT16_MAX ? -ENOTSUP : (int)sp_err_min;
   28c18:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28c1c:	e7f3      	b.n	28c06 <can_calc_timing_int+0xa4>

00028c1e <can_calc_prescaler>:
}
#endif /* CONFIG_CAN_FD_MODE */

int can_calc_prescaler(const struct device *dev, struct can_timing *timing,
		       uint32_t bitrate)
{
   28c1e:	b570      	push	{r4, r5, r6, lr}
   28c20:	b082      	sub	sp, #8
   28c22:	460e      	mov	r6, r1
   28c24:	4615      	mov	r5, r2
	uint32_t ts = timing->prop_seg + timing->phase_seg1 + timing->phase_seg2 +
   28c26:	884c      	ldrh	r4, [r1, #2]
   28c28:	888a      	ldrh	r2, [r1, #4]
   28c2a:	4414      	add	r4, r2
   28c2c:	88ca      	ldrh	r2, [r1, #6]
   28c2e:	4414      	add	r4, r2
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
   28c30:	6883      	ldr	r3, [r0, #8]
	return api->get_core_clock(dev, rate);
   28c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28c34:	a901      	add	r1, sp, #4
   28c36:	4798      	blx	r3
		   CAN_SYNC_SEG;
	uint32_t core_clock;
	int ret;

	ret = can_get_core_clock(dev, &core_clock);
	if (ret != 0) {
   28c38:	b968      	cbnz	r0, 28c56 <can_calc_prescaler+0x38>
   28c3a:	3401      	adds	r4, #1
		return ret;
	}

	timing->prescaler = core_clock / (bitrate * ts);
   28c3c:	9801      	ldr	r0, [sp, #4]
   28c3e:	fb05 f204 	mul.w	r2, r5, r4
   28c42:	fbb0 f2f2 	udiv	r2, r0, r2
   28c46:	8132      	strh	r2, [r6, #8]

	return core_clock % (ts * timing->prescaler);
   28c48:	b292      	uxth	r2, r2
   28c4a:	fb04 f202 	mul.w	r2, r4, r2
   28c4e:	fbb0 f3f2 	udiv	r3, r0, r2
   28c52:	fb02 0013 	mls	r0, r2, r3, r0
}
   28c56:	b002      	add	sp, #8
   28c58:	bd70      	pop	{r4, r5, r6, pc}

00028c5a <z_impl_gpio_pin_interrupt_configure>:
{
   28c5a:	b538      	push	{r3, r4, r5, lr}
	const struct gpio_driver_api *api =
   28c5c:	6883      	ldr	r3, [r0, #8]
	const struct gpio_driver_data *const data =
   28c5e:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   28c60:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   28c64:	d006      	beq.n	28c74 <z_impl_gpio_pin_interrupt_configure+0x1a>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   28c66:	6825      	ldr	r5, [r4, #0]
   28c68:	2401      	movs	r4, #1
   28c6a:	408c      	lsls	r4, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   28c6c:	4225      	tst	r5, r4
   28c6e:	d001      	beq.n	28c74 <z_impl_gpio_pin_interrupt_configure+0x1a>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   28c70:	f082 62c0 	eor.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   28c74:	699c      	ldr	r4, [r3, #24]
   28c76:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   28c7a:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
   28c7e:	47a0      	blx	r4
}
   28c80:	bd38      	pop	{r3, r4, r5, pc}

00028c82 <z_impl_gpio_pin_configure>:
{
   28c82:	b538      	push	{r3, r4, r5, lr}
   28c84:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
   28c86:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
   28c88:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   28c8a:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
   28c8e:	d007      	beq.n	28ca0 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   28c90:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   28c94:	d004      	beq.n	28ca0 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   28c96:	f012 0f01 	tst.w	r2, #1
   28c9a:	d001      	beq.n	28ca0 <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   28c9c:	f482 2340 	eor.w	r3, r2, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   28ca0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   28ca4:	f013 0f01 	tst.w	r3, #1
   28ca8:	d00a      	beq.n	28cc0 <z_impl_gpio_pin_configure+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   28caa:	6823      	ldr	r3, [r4, #0]
   28cac:	f04f 0c01 	mov.w	ip, #1
   28cb0:	fa0c fc01 	lsl.w	ip, ip, r1
   28cb4:	ea43 030c 	orr.w	r3, r3, ip
   28cb8:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
   28cba:	682b      	ldr	r3, [r5, #0]
   28cbc:	4798      	blx	r3
}
   28cbe:	bd38      	pop	{r3, r4, r5, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   28cc0:	6823      	ldr	r3, [r4, #0]
   28cc2:	f04f 0c01 	mov.w	ip, #1
   28cc6:	fa0c fc01 	lsl.w	ip, ip, r1
   28cca:	ea23 030c 	bic.w	r3, r3, ip
   28cce:	6023      	str	r3, [r4, #0]
   28cd0:	e7f3      	b.n	28cba <z_impl_gpio_pin_configure+0x38>

00028cd2 <gpio_pin_configure_dt>:
{
   28cd2:	b508      	push	{r3, lr}
   28cd4:	4603      	mov	r3, r0
   28cd6:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
   28cd8:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   28cda:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   28cdc:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   28cde:	ea42 020c 	orr.w	r2, r2, ip
   28ce2:	f7ff ffce 	bl	28c82 <z_impl_gpio_pin_configure>
}
   28ce6:	bd08      	pop	{r3, pc}

00028ce8 <gpio_port_get>:
{
   28ce8:	b538      	push	{r3, r4, r5, lr}
   28cea:	460c      	mov	r4, r1
	const struct gpio_driver_data *const data =
   28cec:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
   28cee:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
   28cf0:	685b      	ldr	r3, [r3, #4]
   28cf2:	4798      	blx	r3
	if (ret == 0) {
   28cf4:	b918      	cbnz	r0, 28cfe <gpio_port_get+0x16>
		*value ^= data->invert;
   28cf6:	6823      	ldr	r3, [r4, #0]
   28cf8:	682a      	ldr	r2, [r5, #0]
   28cfa:	4053      	eors	r3, r2
   28cfc:	6023      	str	r3, [r4, #0]
}
   28cfe:	bd38      	pop	{r3, r4, r5, pc}

00028d00 <gpio_pin_get>:
{
   28d00:	b510      	push	{r4, lr}
   28d02:	b082      	sub	sp, #8
   28d04:	460c      	mov	r4, r1
	ret = gpio_port_get(port, &value);
   28d06:	a901      	add	r1, sp, #4
   28d08:	f7ff ffee 	bl	28ce8 <gpio_port_get>
	if (ret == 0) {
   28d0c:	b930      	cbnz	r0, 28d1c <gpio_pin_get+0x1c>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   28d0e:	2301      	movs	r3, #1
   28d10:	40a3      	lsls	r3, r4
   28d12:	9a01      	ldr	r2, [sp, #4]
   28d14:	4213      	tst	r3, r2
   28d16:	bf14      	ite	ne
   28d18:	2001      	movne	r0, #1
   28d1a:	2000      	moveq	r0, #0
}
   28d1c:	b002      	add	sp, #8
   28d1e:	bd10      	pop	{r4, pc}

00028d20 <gpio_add_callback>:
 *
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
   28d20:	b508      	push	{r3, lr}
	const struct gpio_driver_api *api =
   28d22:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   28d24:	69db      	ldr	r3, [r3, #28]
   28d26:	b113      	cbz	r3, 28d2e <gpio_add_callback+0xe>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   28d28:	2201      	movs	r2, #1
   28d2a:	4798      	blx	r3
}
   28d2c:	bd08      	pop	{r3, pc}
		return -ENOTSUP;
   28d2e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28d32:	e7fb      	b.n	28d2c <gpio_add_callback+0xc>

00028d34 <spi_transceive_dt>:
 * @return a value from spi_transceive().
 */
static inline int spi_transceive_dt(const struct spi_dt_spec *spec,
				    const struct spi_buf_set *tx_bufs,
				    const struct spi_buf_set *rx_bufs)
{
   28d34:	b510      	push	{r4, lr}
   28d36:	468c      	mov	ip, r1
   28d38:	4613      	mov	r3, r2
	return spi_transceive(spec->bus, &spec->config, tx_bufs, rx_bufs);
   28d3a:	4601      	mov	r1, r0
   28d3c:	f851 0b04 	ldr.w	r0, [r1], #4
	const struct spi_driver_api *api =
   28d40:	6882      	ldr	r2, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   28d42:	6814      	ldr	r4, [r2, #0]
   28d44:	4662      	mov	r2, ip
   28d46:	47a0      	blx	r4
}
   28d48:	bd10      	pop	{r4, pc}

00028d4a <spi_write_dt>:
 *
 * @return a value from spi_write().
 */
static inline int spi_write_dt(const struct spi_dt_spec *spec,
			       const struct spi_buf_set *tx_bufs)
{
   28d4a:	b510      	push	{r4, lr}
   28d4c:	460a      	mov	r2, r1
	return spi_write(spec->bus, &spec->config, tx_bufs);
   28d4e:	4601      	mov	r1, r0
   28d50:	f851 0b04 	ldr.w	r0, [r1], #4
	const struct spi_driver_api *api =
   28d54:	6883      	ldr	r3, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   28d56:	681c      	ldr	r4, [r3, #0]
   28d58:	2300      	movs	r3, #0
   28d5a:	47a0      	blx	r4
}
   28d5c:	bd10      	pop	{r4, pc}

00028d5e <can_utils_filter_match>:
 * @return true if the CAN filter matches the CAN frame, false otherwise
 */
static inline bool can_utils_filter_match(const struct can_frame *frame,
					  struct can_filter *filter)
{
	if (((frame->flags & CAN_FRAME_IDE) != 0) && ((filter->flags & CAN_FILTER_IDE) == 0)) {
   28d5e:	7943      	ldrb	r3, [r0, #5]
   28d60:	f013 0f01 	tst.w	r3, #1
   28d64:	d003      	beq.n	28d6e <can_utils_filter_match+0x10>
   28d66:	79ca      	ldrb	r2, [r1, #7]
   28d68:	f012 0f20 	tst.w	r2, #32
   28d6c:	d016      	beq.n	28d9c <can_utils_filter_match+0x3e>
		return false;
	}

	if (((frame->flags & CAN_FRAME_RTR) == 0) && (filter->flags & CAN_FILTER_DATA) == 0) {
   28d6e:	f013 0302 	ands.w	r3, r3, #2
   28d72:	d102      	bne.n	28d7a <can_utils_filter_match+0x1c>
   28d74:	79ca      	ldrb	r2, [r1, #7]
   28d76:	2a7f      	cmp	r2, #127	; 0x7f
   28d78:	d912      	bls.n	28da0 <can_utils_filter_match+0x42>
		return false;
	}

	if (((frame->flags & CAN_FRAME_RTR) != 0) && (filter->flags & CAN_FILTER_RTR) == 0) {
   28d7a:	b11b      	cbz	r3, 28d84 <can_utils_filter_match+0x26>
   28d7c:	79cb      	ldrb	r3, [r1, #7]
   28d7e:	f013 0f40 	tst.w	r3, #64	; 0x40
   28d82:	d00f      	beq.n	28da4 <can_utils_filter_match+0x46>
		return false;
	}

	if ((frame->id ^ filter->id) & filter->mask) {
   28d84:	6803      	ldr	r3, [r0, #0]
   28d86:	f3c3 031c 	ubfx	r3, r3, #0, #29
   28d8a:	680a      	ldr	r2, [r1, #0]
   28d8c:	f3c2 021c 	ubfx	r2, r2, #0, #29
   28d90:	4053      	eors	r3, r2
   28d92:	684a      	ldr	r2, [r1, #4]
   28d94:	421a      	tst	r2, r3
   28d96:	d107      	bne.n	28da8 <can_utils_filter_match+0x4a>
		return false;
	}

	return true;
   28d98:	2001      	movs	r0, #1
   28d9a:	4770      	bx	lr
		return false;
   28d9c:	2000      	movs	r0, #0
   28d9e:	4770      	bx	lr
		return false;
   28da0:	2000      	movs	r0, #0
   28da2:	4770      	bx	lr
		return false;
   28da4:	2000      	movs	r0, #0
   28da6:	4770      	bx	lr
		return false;
   28da8:	2000      	movs	r0, #0
}
   28daa:	4770      	bx	lr

00028dac <mcp2515_cmd_soft_reset>:
{
   28dac:	b500      	push	{lr}
   28dae:	b087      	sub	sp, #28
	const struct mcp2515_config *dev_cfg = dev->config;
   28db0:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = { MCP2515_OPCODE_RESET };
   28db2:	23c0      	movs	r3, #192	; 0xc0
   28db4:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct spi_buf tx_buf = {
   28db8:	ab05      	add	r3, sp, #20
   28dba:	9303      	str	r3, [sp, #12]
   28dbc:	2301      	movs	r3, #1
   28dbe:	9304      	str	r3, [sp, #16]
	const struct spi_buf_set tx = {
   28dc0:	aa03      	add	r2, sp, #12
   28dc2:	9201      	str	r2, [sp, #4]
   28dc4:	9302      	str	r3, [sp, #8]
	return spi_write_dt(&dev_cfg->bus, &tx);
   28dc6:	a901      	add	r1, sp, #4
   28dc8:	f7ff ffbf 	bl	28d4a <spi_write_dt>
}
   28dcc:	b007      	add	sp, #28
   28dce:	f85d fb04 	ldr.w	pc, [sp], #4

00028dd2 <mcp2515_cmd_bit_modify>:
{
   28dd2:	b500      	push	{lr}
   28dd4:	b087      	sub	sp, #28
	const struct mcp2515_config *dev_cfg = dev->config;
   28dd6:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = { MCP2515_OPCODE_BIT_MODIFY, reg_addr, mask, data };
   28dd8:	f04f 0c05 	mov.w	ip, #5
   28ddc:	f88d c014 	strb.w	ip, [sp, #20]
   28de0:	f88d 1015 	strb.w	r1, [sp, #21]
   28de4:	f88d 2016 	strb.w	r2, [sp, #22]
   28de8:	f88d 3017 	strb.w	r3, [sp, #23]
	const struct spi_buf tx_buf = {
   28dec:	ab05      	add	r3, sp, #20
   28dee:	9303      	str	r3, [sp, #12]
   28df0:	2304      	movs	r3, #4
   28df2:	9304      	str	r3, [sp, #16]
	const struct spi_buf_set tx = {
   28df4:	ab03      	add	r3, sp, #12
   28df6:	9301      	str	r3, [sp, #4]
   28df8:	2301      	movs	r3, #1
   28dfa:	9302      	str	r3, [sp, #8]
	return spi_write_dt(&dev_cfg->bus, &tx);
   28dfc:	a901      	add	r1, sp, #4
   28dfe:	f7ff ffa4 	bl	28d4a <spi_write_dt>
}
   28e02:	b007      	add	sp, #28
   28e04:	f85d fb04 	ldr.w	pc, [sp], #4

00028e08 <mcp2515_cmd_write_reg>:
{
   28e08:	b510      	push	{r4, lr}
   28e0a:	b088      	sub	sp, #32
	const struct mcp2515_config *dev_cfg = dev->config;
   28e0c:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = { MCP2515_OPCODE_WRITE, reg_addr };
   28e0e:	2402      	movs	r4, #2
   28e10:	f88d 401c 	strb.w	r4, [sp, #28]
   28e14:	f88d 101d 	strb.w	r1, [sp, #29]
	struct spi_buf tx_buf[] = {
   28e18:	a907      	add	r1, sp, #28
   28e1a:	9103      	str	r1, [sp, #12]
   28e1c:	9404      	str	r4, [sp, #16]
   28e1e:	9205      	str	r2, [sp, #20]
   28e20:	9306      	str	r3, [sp, #24]
	const struct spi_buf_set tx = {
   28e22:	ab03      	add	r3, sp, #12
   28e24:	9301      	str	r3, [sp, #4]
   28e26:	9402      	str	r4, [sp, #8]
	return spi_write_dt(&dev_cfg->bus, &tx);
   28e28:	a901      	add	r1, sp, #4
   28e2a:	f7ff ff8e 	bl	28d4a <spi_write_dt>
}
   28e2e:	b008      	add	sp, #32
   28e30:	bd10      	pop	{r4, pc}

00028e32 <mcp2515_cmd_load_tx_buffer>:
{
   28e32:	b500      	push	{lr}
   28e34:	b089      	sub	sp, #36	; 0x24
	const struct mcp2515_config *dev_cfg = dev->config;
   28e36:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = { MCP2515_OPCODE_LOAD_TX_BUFFER | abc };
   28e38:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   28e3c:	f88d 101c 	strb.w	r1, [sp, #28]
	struct spi_buf tx_buf[] = {
   28e40:	a907      	add	r1, sp, #28
   28e42:	9103      	str	r1, [sp, #12]
   28e44:	2101      	movs	r1, #1
   28e46:	9104      	str	r1, [sp, #16]
   28e48:	9205      	str	r2, [sp, #20]
   28e4a:	9306      	str	r3, [sp, #24]
	const struct spi_buf_set tx = {
   28e4c:	ab03      	add	r3, sp, #12
   28e4e:	9301      	str	r3, [sp, #4]
   28e50:	2302      	movs	r3, #2
   28e52:	9302      	str	r3, [sp, #8]
	return spi_write_dt(&dev_cfg->bus, &tx);
   28e54:	a901      	add	r1, sp, #4
   28e56:	f7ff ff78 	bl	28d4a <spi_write_dt>
}
   28e5a:	b009      	add	sp, #36	; 0x24
   28e5c:	f85d fb04 	ldr.w	pc, [sp], #4

00028e60 <mcp2515_cmd_rts>:
{
   28e60:	b500      	push	{lr}
   28e62:	b087      	sub	sp, #28
	const struct mcp2515_config *dev_cfg = dev->config;
   28e64:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = { MCP2515_OPCODE_RTS | nnn };
   28e66:	f061 017f 	orn	r1, r1, #127	; 0x7f
   28e6a:	f88d 1014 	strb.w	r1, [sp, #20]
	struct spi_buf tx_buf[] = {
   28e6e:	ab05      	add	r3, sp, #20
   28e70:	9303      	str	r3, [sp, #12]
   28e72:	2301      	movs	r3, #1
   28e74:	9304      	str	r3, [sp, #16]
	const struct spi_buf_set tx = {
   28e76:	aa03      	add	r2, sp, #12
   28e78:	9201      	str	r2, [sp, #4]
   28e7a:	9302      	str	r3, [sp, #8]
	return spi_write_dt(&dev_cfg->bus, &tx);
   28e7c:	a901      	add	r1, sp, #4
   28e7e:	f7ff ff64 	bl	28d4a <spi_write_dt>
}
   28e82:	b007      	add	sp, #28
   28e84:	f85d fb04 	ldr.w	pc, [sp], #4

00028e88 <mcp2515_cmd_read_reg>:
{
   28e88:	b530      	push	{r4, r5, lr}
   28e8a:	b08f      	sub	sp, #60	; 0x3c
	const struct mcp2515_config *dev_cfg = dev->config;
   28e8c:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = { MCP2515_OPCODE_READ, reg_addr };
   28e8e:	2403      	movs	r4, #3
   28e90:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
   28e94:	f88d 1035 	strb.w	r1, [sp, #53]	; 0x35
	struct spi_buf tx_buf[] = {
   28e98:	a90d      	add	r1, sp, #52	; 0x34
   28e9a:	9109      	str	r1, [sp, #36]	; 0x24
   28e9c:	2102      	movs	r1, #2
   28e9e:	910a      	str	r1, [sp, #40]	; 0x28
   28ea0:	2400      	movs	r4, #0
   28ea2:	940b      	str	r4, [sp, #44]	; 0x2c
   28ea4:	930c      	str	r3, [sp, #48]	; 0x30
	const struct spi_buf_set tx = {
   28ea6:	ad09      	add	r5, sp, #36	; 0x24
   28ea8:	9507      	str	r5, [sp, #28]
   28eaa:	9108      	str	r1, [sp, #32]
	struct spi_buf rx_buf[] = {
   28eac:	9403      	str	r4, [sp, #12]
   28eae:	9104      	str	r1, [sp, #16]
   28eb0:	9205      	str	r2, [sp, #20]
   28eb2:	9306      	str	r3, [sp, #24]
	const struct spi_buf_set rx = {
   28eb4:	ab03      	add	r3, sp, #12
   28eb6:	9301      	str	r3, [sp, #4]
   28eb8:	9102      	str	r1, [sp, #8]
	return spi_transceive_dt(&dev_cfg->bus, &tx, &rx);
   28eba:	aa01      	add	r2, sp, #4
   28ebc:	a907      	add	r1, sp, #28
   28ebe:	f7ff ff39 	bl	28d34 <spi_transceive_dt>
}
   28ec2:	b00f      	add	sp, #60	; 0x3c
   28ec4:	bd30      	pop	{r4, r5, pc}

00028ec6 <mcp2515_cmd_read_rx_buffer>:
{
   28ec6:	b530      	push	{r4, r5, lr}
   28ec8:	b08f      	sub	sp, #60	; 0x3c
	const struct mcp2515_config *dev_cfg = dev->config;
   28eca:	6840      	ldr	r0, [r0, #4]
	uint8_t cmd_buf[] = { MCP2515_OPCODE_READ_RX_BUFFER | (nm << 1) };
   28ecc:	0049      	lsls	r1, r1, #1
   28ece:	f061 016f 	orn	r1, r1, #111	; 0x6f
   28ed2:	f88d 1034 	strb.w	r1, [sp, #52]	; 0x34
	struct spi_buf tx_buf[] = {
   28ed6:	a90d      	add	r1, sp, #52	; 0x34
   28ed8:	9109      	str	r1, [sp, #36]	; 0x24
   28eda:	2401      	movs	r4, #1
   28edc:	940a      	str	r4, [sp, #40]	; 0x28
   28ede:	2500      	movs	r5, #0
   28ee0:	950b      	str	r5, [sp, #44]	; 0x2c
   28ee2:	930c      	str	r3, [sp, #48]	; 0x30
	const struct spi_buf_set tx = {
   28ee4:	a909      	add	r1, sp, #36	; 0x24
   28ee6:	9107      	str	r1, [sp, #28]
   28ee8:	2102      	movs	r1, #2
   28eea:	9108      	str	r1, [sp, #32]
	struct spi_buf rx_buf[] = {
   28eec:	9503      	str	r5, [sp, #12]
   28eee:	9404      	str	r4, [sp, #16]
   28ef0:	9205      	str	r2, [sp, #20]
   28ef2:	9306      	str	r3, [sp, #24]
	const struct spi_buf_set rx = {
   28ef4:	ab03      	add	r3, sp, #12
   28ef6:	9301      	str	r3, [sp, #4]
   28ef8:	9102      	str	r1, [sp, #8]
	return spi_transceive_dt(&dev_cfg->bus, &tx, &rx);
   28efa:	aa01      	add	r2, sp, #4
   28efc:	a907      	add	r1, sp, #28
   28efe:	f7ff ff19 	bl	28d34 <spi_transceive_dt>
}
   28f02:	b00f      	add	sp, #60	; 0x3c
   28f04:	bd30      	pop	{r4, r5, pc}

00028f06 <mcp2515_convert_canframe_to_mcp2515frame>:
	if ((source->flags & CAN_FRAME_IDE) != 0) {
   28f06:	7943      	ldrb	r3, [r0, #5]
   28f08:	f013 0f01 	tst.w	r3, #1
   28f0c:	d01f      	beq.n	28f4e <mcp2515_convert_canframe_to_mcp2515frame+0x48>
		target[MCP2515_FRAME_OFFSET_SIDH] = source->id >> 21;
   28f0e:	6803      	ldr	r3, [r0, #0]
   28f10:	f3c3 5347 	ubfx	r3, r3, #21, #8
   28f14:	700b      	strb	r3, [r1, #0]
			(((source->id >> 18) & 0x07) << 5) | (BIT(3)) |
   28f16:	6802      	ldr	r2, [r0, #0]
   28f18:	f3c2 438a 	ubfx	r3, r2, #18, #11
   28f1c:	015b      	lsls	r3, r3, #5
   28f1e:	b2db      	uxtb	r3, r3
			((source->id >> 16) & 0x03);
   28f20:	f3c2 4201 	ubfx	r2, r2, #16, #2
			(((source->id >> 18) & 0x07) << 5) | (BIT(3)) |
   28f24:	4313      	orrs	r3, r2
   28f26:	f043 0308 	orr.w	r3, r3, #8
		target[MCP2515_FRAME_OFFSET_SIDL] =
   28f2a:	704b      	strb	r3, [r1, #1]
		target[MCP2515_FRAME_OFFSET_EID8] = source->id >> 8;
   28f2c:	6803      	ldr	r3, [r0, #0]
   28f2e:	f3c3 2314 	ubfx	r3, r3, #8, #21
   28f32:	708b      	strb	r3, [r1, #2]
		target[MCP2515_FRAME_OFFSET_EID0] = source->id;
   28f34:	6803      	ldr	r3, [r0, #0]
   28f36:	70cb      	strb	r3, [r1, #3]
	rtr = (source->flags & CAN_FRAME_RTR) != 0 ? BIT(6) : 0;
   28f38:	7943      	ldrb	r3, [r0, #5]
   28f3a:	015b      	lsls	r3, r3, #5
   28f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
	dlc = (source->dlc) & 0x0F;
   28f40:	7902      	ldrb	r2, [r0, #4]
   28f42:	f002 020f 	and.w	r2, r2, #15
	target[MCP2515_FRAME_OFFSET_DLC] = rtr | dlc;
   28f46:	4313      	orrs	r3, r2
   28f48:	710b      	strb	r3, [r1, #4]
	uint8_t data_idx = 0U;
   28f4a:	2300      	movs	r3, #0
	for (; data_idx < CAN_MAX_DLC; data_idx++) {
   28f4c:	e010      	b.n	28f70 <mcp2515_convert_canframe_to_mcp2515frame+0x6a>
		target[MCP2515_FRAME_OFFSET_SIDH] = source->id >> 3;
   28f4e:	6803      	ldr	r3, [r0, #0]
   28f50:	f3c3 03d9 	ubfx	r3, r3, #3, #26
   28f54:	700b      	strb	r3, [r1, #0]
			(source->id & 0x07) << 5;
   28f56:	6803      	ldr	r3, [r0, #0]
   28f58:	015b      	lsls	r3, r3, #5
		target[MCP2515_FRAME_OFFSET_SIDL] =
   28f5a:	704b      	strb	r3, [r1, #1]
   28f5c:	e7ec      	b.n	28f38 <mcp2515_convert_canframe_to_mcp2515frame+0x32>
		target[MCP2515_FRAME_OFFSET_D0 + data_idx] =
   28f5e:	1d5a      	adds	r2, r3, #5
			source->data[data_idx];
   28f60:	eb00 0c03 	add.w	ip, r0, r3
   28f64:	f89c c008 	ldrb.w	ip, [ip, #8]
		target[MCP2515_FRAME_OFFSET_D0 + data_idx] =
   28f68:	f801 c002 	strb.w	ip, [r1, r2]
	for (; data_idx < CAN_MAX_DLC; data_idx++) {
   28f6c:	3301      	adds	r3, #1
   28f6e:	b2db      	uxtb	r3, r3
   28f70:	2b07      	cmp	r3, #7
   28f72:	d9f4      	bls.n	28f5e <mcp2515_convert_canframe_to_mcp2515frame+0x58>
}
   28f74:	4770      	bx	lr

00028f76 <mcp2515_get_core_clock>:
	const struct mcp2515_config *dev_cfg = dev->config;
   28f76:	6843      	ldr	r3, [r0, #4]
	*rate = dev_cfg->osc_freq / 2;
   28f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28f7a:	085b      	lsrs	r3, r3, #1
   28f7c:	600b      	str	r3, [r1, #0]
}
   28f7e:	2000      	movs	r0, #0
   28f80:	4770      	bx	lr

00028f82 <mcp2515_get_max_filters>:
}
   28f82:	2005      	movs	r0, #5
   28f84:	4770      	bx	lr

00028f86 <mcp2515_get_max_bitrate>:
	const struct mcp2515_config *dev_cfg = dev->config;
   28f86:	6843      	ldr	r3, [r0, #4]
	*max_bitrate = dev_cfg->max_bitrate;
   28f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   28f8a:	600b      	str	r3, [r1, #0]
}
   28f8c:	2000      	movs	r0, #0
   28f8e:	4770      	bx	lr

00028f90 <mcp2515_get_capabilities>:
	*cap = CAN_MODE_NORMAL | CAN_MODE_LISTENONLY | CAN_MODE_LOOPBACK;
   28f90:	2303      	movs	r3, #3
   28f92:	600b      	str	r3, [r1, #0]
}
   28f94:	2000      	movs	r0, #0
   28f96:	4770      	bx	lr

00028f98 <mcp2515_set_state_change_callback>:
	struct mcp2515_data *dev_data = dev->data;
   28f98:	6903      	ldr	r3, [r0, #16]
	dev_data->state_change_cb = cb;
   28f9a:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
	dev_data->state_change_cb_data = user_data;
   28f9e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
}
   28fa2:	4770      	bx	lr

00028fa4 <mcp2515_remove_rx_filter>:
{
   28fa4:	b570      	push	{r4, r5, r6, lr}
   28fa6:	460d      	mov	r5, r1
	struct mcp2515_data *dev_data = dev->data;
   28fa8:	6904      	ldr	r4, [r0, #16]
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   28faa:	f504 76b2 	add.w	r6, r4, #356	; 0x164
	return z_impl_k_mutex_lock(mutex, timeout);
   28fae:	f04f 32ff 	mov.w	r2, #4294967295
   28fb2:	f04f 33ff 	mov.w	r3, #4294967295
   28fb6:	4630      	mov	r0, r6
   28fb8:	f7f9 fcdc 	bl	22974 <z_impl_k_mutex_lock>
	dev_data->filter_usage &= ~BIT(filter_id);
   28fbc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   28fc0:	2201      	movs	r2, #1
   28fc2:	fa02 f105 	lsl.w	r1, r2, r5
   28fc6:	ea23 0301 	bic.w	r3, r3, r1
   28fca:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	return z_impl_k_mutex_unlock(mutex);
   28fce:	4630      	mov	r0, r6
   28fd0:	f7f9 fd54 	bl	22a7c <z_impl_k_mutex_unlock>
}
   28fd4:	bd70      	pop	{r4, r5, r6, pc}

00028fd6 <mcp2515_add_rx_filter>:
{
   28fd6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28fda:	4688      	mov	r8, r1
   28fdc:	4617      	mov	r7, r2
   28fde:	461e      	mov	r6, r3
	struct mcp2515_data *dev_data = dev->data;
   28fe0:	6905      	ldr	r5, [r0, #16]
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   28fe2:	f505 79b2 	add.w	r9, r5, #356	; 0x164
	return z_impl_k_mutex_lock(mutex, timeout);
   28fe6:	f04f 32ff 	mov.w	r2, #4294967295
   28fea:	f04f 33ff 	mov.w	r3, #4294967295
   28fee:	4648      	mov	r0, r9
   28ff0:	f7f9 fcc0 	bl	22974 <z_impl_k_mutex_lock>
	int filter_id = 0;
   28ff4:	2400      	movs	r4, #0
	while ((BIT(filter_id) & dev_data->filter_usage)
   28ff6:	e000      	b.n	28ffa <mcp2515_add_rx_filter+0x24>
		filter_id++;
   28ff8:	3401      	adds	r4, #1
	while ((BIT(filter_id) & dev_data->filter_usage)
   28ffa:	f8d5 0108 	ldr.w	r0, [r5, #264]	; 0x108
   28ffe:	fa20 f304 	lsr.w	r3, r0, r4
	       && (filter_id < CONFIG_CAN_MAX_FILTER)) {
   29002:	f013 0f01 	tst.w	r3, #1
   29006:	d001      	beq.n	2900c <mcp2515_add_rx_filter+0x36>
   29008:	2c04      	cmp	r4, #4
   2900a:	ddf5      	ble.n	28ff8 <mcp2515_add_rx_filter+0x22>
	if (filter_id < CONFIG_CAN_MAX_FILTER) {
   2900c:	2c04      	cmp	r4, #4
   2900e:	dc1d      	bgt.n	2904c <mcp2515_add_rx_filter+0x76>
		dev_data->filter_usage |= BIT(filter_id);
   29010:	2301      	movs	r3, #1
   29012:	40a3      	lsls	r3, r4
   29014:	4318      	orrs	r0, r3
   29016:	f8c5 0108 	str.w	r0, [r5, #264]	; 0x108
		dev_data->filter[filter_id] = *filter;
   2901a:	f104 0326 	add.w	r3, r4, #38	; 0x26
   2901e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   29022:	3304      	adds	r3, #4
   29024:	e896 0003 	ldmia.w	r6, {r0, r1}
   29028:	e883 0003 	stmia.w	r3, {r0, r1}
		dev_data->rx_cb[filter_id] = rx_cb;
   2902c:	f104 0342 	add.w	r3, r4, #66	; 0x42
   29030:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   29034:	f8c3 8004 	str.w	r8, [r3, #4]
		dev_data->cb_arg[filter_id] = cb_arg;
   29038:	f104 0348 	add.w	r3, r4, #72	; 0x48
   2903c:	f845 7023 	str.w	r7, [r5, r3, lsl #2]
	return z_impl_k_mutex_unlock(mutex);
   29040:	4648      	mov	r0, r9
   29042:	f7f9 fd1b 	bl	22a7c <z_impl_k_mutex_unlock>
}
   29046:	4620      	mov	r0, r4
   29048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		filter_id = -ENOSPC;
   2904c:	f06f 041b 	mvn.w	r4, #27
   29050:	e7f6      	b.n	29040 <mcp2515_add_rx_filter+0x6a>

00029052 <mcp2515_rx_filter>:
{
   29052:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29056:	b084      	sub	sp, #16
   29058:	4680      	mov	r8, r0
   2905a:	460d      	mov	r5, r1
	struct mcp2515_data *dev_data = dev->data;
   2905c:	6906      	ldr	r6, [r0, #16]
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   2905e:	f506 79b2 	add.w	r9, r6, #356	; 0x164
	return z_impl_k_mutex_lock(mutex, timeout);
   29062:	f04f 32ff 	mov.w	r2, #4294967295
   29066:	f04f 33ff 	mov.w	r3, #4294967295
   2906a:	4648      	mov	r0, r9
   2906c:	f7f9 fc82 	bl	22974 <z_impl_k_mutex_lock>
	uint8_t filter_id = 0U;
   29070:	2400      	movs	r4, #0
	for (; filter_id < CONFIG_CAN_MAX_FILTER; filter_id++) {
   29072:	e001      	b.n	29078 <mcp2515_rx_filter+0x26>
   29074:	3401      	adds	r4, #1
   29076:	b2e4      	uxtb	r4, r4
   29078:	2c04      	cmp	r4, #4
   2907a:	d822      	bhi.n	290c2 <mcp2515_rx_filter+0x70>
		if (!(BIT(filter_id) & dev_data->filter_usage)) {
   2907c:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
   29080:	4627      	mov	r7, r4
   29082:	40e3      	lsrs	r3, r4
   29084:	f013 0f01 	tst.w	r3, #1
   29088:	d0f4      	beq.n	29074 <mcp2515_rx_filter+0x22>
		if (!can_utils_filter_match(frame,
   2908a:	f104 0126 	add.w	r1, r4, #38	; 0x26
   2908e:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
   29092:	3104      	adds	r1, #4
   29094:	4628      	mov	r0, r5
   29096:	f7ff fe62 	bl	28d5e <can_utils_filter_match>
   2909a:	2800      	cmp	r0, #0
   2909c:	d0ea      	beq.n	29074 <mcp2515_rx_filter+0x22>
		callback = dev_data->rx_cb[filter_id];
   2909e:	f104 0342 	add.w	r3, r4, #66	; 0x42
   290a2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   290a6:	f8d3 a004 	ldr.w	sl, [r3, #4]
		tmp_frame = *frame;
   290aa:	46ec      	mov	ip, sp
   290ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   290b0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		callback(dev, &tmp_frame, dev_data->cb_arg[filter_id]);
   290b4:	3748      	adds	r7, #72	; 0x48
   290b6:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
   290ba:	4661      	mov	r1, ip
   290bc:	4640      	mov	r0, r8
   290be:	47d0      	blx	sl
   290c0:	e7d8      	b.n	29074 <mcp2515_rx_filter+0x22>
	return z_impl_k_mutex_unlock(mutex);
   290c2:	4648      	mov	r0, r9
   290c4:	f7f9 fcda 	bl	22a7c <z_impl_k_mutex_unlock>
}
   290c8:	b004      	add	sp, #16
   290ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000290ce <mcp2515_tx_done>:
{
   290ce:	b570      	push	{r4, r5, r6, lr}
   290d0:	460d      	mov	r5, r1
	struct mcp2515_data *dev_data = dev->data;
   290d2:	6904      	ldr	r4, [r0, #16]
	can_tx_callback_t callback = dev_data->tx_cb[tx_idx].cb;
   290d4:	f101 031f 	add.w	r3, r1, #31
   290d8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   290dc:	685b      	ldr	r3, [r3, #4]
	if (callback != NULL) {
   290de:	b303      	cbz	r3, 29122 <mcp2515_tx_done+0x54>
   290e0:	4611      	mov	r1, r2
		callback(dev, status, dev_data->tx_cb[tx_idx].cb_arg);
   290e2:	f105 061f 	add.w	r6, r5, #31
   290e6:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
   290ea:	68b2      	ldr	r2, [r6, #8]
   290ec:	4798      	blx	r3
		dev_data->tx_cb[tx_idx].cb = NULL;
   290ee:	2300      	movs	r3, #0
   290f0:	6073      	str	r3, [r6, #4]
		k_mutex_lock(&dev_data->mutex, K_FOREVER);
   290f2:	f504 76b2 	add.w	r6, r4, #356	; 0x164
	return z_impl_k_mutex_lock(mutex, timeout);
   290f6:	f04f 32ff 	mov.w	r2, #4294967295
   290fa:	f04f 33ff 	mov.w	r3, #4294967295
   290fe:	4630      	mov	r0, r6
   29100:	f7f9 fc38 	bl	22974 <z_impl_k_mutex_lock>
		dev_data->tx_busy_map &= ~BIT(tx_idx);
   29104:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   29108:	2201      	movs	r2, #1
   2910a:	40aa      	lsls	r2, r5
   2910c:	ea23 0302 	bic.w	r3, r3, r2
   29110:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
	return z_impl_k_mutex_unlock(mutex);
   29114:	4630      	mov	r0, r6
   29116:	f7f9 fcb1 	bl	22a7c <z_impl_k_mutex_unlock>
		k_sem_give(&dev_data->tx_sem);
   2911a:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
	z_impl_k_sem_give(sem);
   2911e:	f7f9 fd29 	bl	22b74 <z_impl_k_sem_give>
}
   29122:	bd70      	pop	{r4, r5, r6, pc}

00029124 <mcp2515_int_gpio_callback>:
{
   29124:	b508      	push	{r3, lr}
	k_sem_give(&dev_data->int_sem);
   29126:	f101 00cc 	add.w	r0, r1, #204	; 0xcc
   2912a:	f7f9 fd23 	bl	22b74 <z_impl_k_sem_give>
}
   2912e:	bd08      	pop	{r3, pc}

00029130 <mcp2515_convert_mcp2515frame_to_canframe>:
{
   29130:	b538      	push	{r3, r4, r5, lr}
   29132:	4605      	mov	r5, r0
   29134:	460c      	mov	r4, r1
	memset(target, 0, sizeof(*target));
   29136:	2210      	movs	r2, #16
   29138:	2100      	movs	r1, #0
   2913a:	4620      	mov	r0, r4
   2913c:	f7fc ffa2 	bl	26084 <memset>
	if (source[MCP2515_FRAME_OFFSET_SIDL] & BIT(3)) {
   29140:	786b      	ldrb	r3, [r5, #1]
   29142:	f013 0f08 	tst.w	r3, #8
   29146:	d024      	beq.n	29192 <mcp2515_convert_mcp2515frame_to_canframe+0x62>
		target->flags |= CAN_FRAME_IDE;
   29148:	7963      	ldrb	r3, [r4, #5]
   2914a:	f043 0301 	orr.w	r3, r3, #1
   2914e:	7163      	strb	r3, [r4, #5]
			(source[MCP2515_FRAME_OFFSET_SIDH] << 21) |
   29150:	7829      	ldrb	r1, [r5, #0]
			((source[MCP2515_FRAME_OFFSET_SIDL] >> 5) << 18) |
   29152:	786a      	ldrb	r2, [r5, #1]
   29154:	0953      	lsrs	r3, r2, #5
   29156:	049b      	lsls	r3, r3, #18
			(source[MCP2515_FRAME_OFFSET_SIDH] << 21) |
   29158:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
			((source[MCP2515_FRAME_OFFSET_SIDL] & 0x03) << 16) |
   2915c:	0412      	lsls	r2, r2, #16
   2915e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
			((source[MCP2515_FRAME_OFFSET_SIDL] >> 5) << 18) |
   29162:	4313      	orrs	r3, r2
			(source[MCP2515_FRAME_OFFSET_EID8] << 8) |
   29164:	78aa      	ldrb	r2, [r5, #2]
			((source[MCP2515_FRAME_OFFSET_SIDL] & 0x03) << 16) |
   29166:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			source[MCP2515_FRAME_OFFSET_EID0];
   2916a:	78ea      	ldrb	r2, [r5, #3]
			(source[MCP2515_FRAME_OFFSET_EID8] << 8) |
   2916c:	4313      	orrs	r3, r2
		target->id =
   2916e:	6822      	ldr	r2, [r4, #0]
   29170:	f363 021c 	bfi	r2, r3, #0, #29
   29174:	6022      	str	r2, [r4, #0]
	target->dlc = source[MCP2515_FRAME_OFFSET_DLC] & 0x0F;
   29176:	792b      	ldrb	r3, [r5, #4]
   29178:	f003 030f 	and.w	r3, r3, #15
   2917c:	7123      	strb	r3, [r4, #4]
	if ((source[MCP2515_FRAME_OFFSET_DLC] & BIT(6)) != 0) {
   2917e:	792b      	ldrb	r3, [r5, #4]
   29180:	f013 0f40 	tst.w	r3, #64	; 0x40
   29184:	d003      	beq.n	2918e <mcp2515_convert_mcp2515frame_to_canframe+0x5e>
		target->flags |= CAN_FRAME_RTR;
   29186:	7963      	ldrb	r3, [r4, #5]
   29188:	f043 0302 	orr.w	r3, r3, #2
   2918c:	7163      	strb	r3, [r4, #5]
{
   2918e:	2300      	movs	r3, #0
   29190:	e00e      	b.n	291b0 <mcp2515_convert_mcp2515frame_to_canframe+0x80>
		target->id = (source[MCP2515_FRAME_OFFSET_SIDH] << 3) |
   29192:	782a      	ldrb	r2, [r5, #0]
				 (source[MCP2515_FRAME_OFFSET_SIDL] >> 5);
   29194:	095b      	lsrs	r3, r3, #5
		target->id = (source[MCP2515_FRAME_OFFSET_SIDH] << 3) |
   29196:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   2919a:	6822      	ldr	r2, [r4, #0]
   2919c:	f363 021c 	bfi	r2, r3, #0, #29
   291a0:	6022      	str	r2, [r4, #0]
   291a2:	e7e8      	b.n	29176 <mcp2515_convert_mcp2515frame_to_canframe+0x46>
		target->data[data_idx] = source[MCP2515_FRAME_OFFSET_D0 +
   291a4:	1d5a      	adds	r2, r3, #5
   291a6:	5ca9      	ldrb	r1, [r5, r2]
   291a8:	18e2      	adds	r2, r4, r3
   291aa:	7211      	strb	r1, [r2, #8]
	for (; data_idx < CAN_MAX_DLC; data_idx++) {
   291ac:	3301      	adds	r3, #1
   291ae:	b2db      	uxtb	r3, r3
   291b0:	2b07      	cmp	r3, #7
   291b2:	d9f7      	bls.n	291a4 <mcp2515_convert_mcp2515frame_to_canframe+0x74>
}
   291b4:	bd38      	pop	{r3, r4, r5, pc}

000291b6 <mcp2515_rx>:
{
   291b6:	b510      	push	{r4, lr}
   291b8:	b088      	sub	sp, #32
   291ba:	4604      	mov	r4, r0
	nm = 2 * rx_idx;
   291bc:	0049      	lsls	r1, r1, #1
	mcp2515_cmd_read_rx_buffer(dev, nm, rx_frame, sizeof(rx_frame));
   291be:	230d      	movs	r3, #13
   291c0:	466a      	mov	r2, sp
   291c2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   291c6:	f7ff fe7e 	bl	28ec6 <mcp2515_cmd_read_rx_buffer>
	mcp2515_convert_mcp2515frame_to_canframe(rx_frame, &frame);
   291ca:	a904      	add	r1, sp, #16
   291cc:	4668      	mov	r0, sp
   291ce:	f7ff ffaf 	bl	29130 <mcp2515_convert_mcp2515frame_to_canframe>
	mcp2515_rx_filter(dev, &frame);
   291d2:	a904      	add	r1, sp, #16
   291d4:	4620      	mov	r0, r4
   291d6:	f7ff ff3c 	bl	29052 <mcp2515_rx_filter>
}
   291da:	b008      	add	sp, #32
   291dc:	bd10      	pop	{r4, pc}

000291de <mcp2515_int_thread>:
{
   291de:	b538      	push	{r3, r4, r5, lr}
   291e0:	4604      	mov	r4, r0
	struct mcp2515_data *dev_data = dev->data;
   291e2:	6905      	ldr	r5, [r0, #16]
		k_sem_take(&dev_data->int_sem, K_FOREVER);
   291e4:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
	return z_impl_k_sem_take(sem, timeout);
   291e8:	f04f 32ff 	mov.w	r2, #4294967295
   291ec:	f04f 33ff 	mov.w	r3, #4294967295
   291f0:	f7f9 fce8 	bl	22bc4 <z_impl_k_sem_take>
		mcp2515_handle_interrupts(dev);
   291f4:	4620      	mov	r0, r4
   291f6:	f7f5 fea9 	bl	1ef4c <mcp2515_handle_interrupts>
	while (1) {
   291fa:	e7f3      	b.n	291e4 <mcp2515_int_thread+0x6>

000291fc <spi_is_ready_dt>:
{
   291fc:	b510      	push	{r4, lr}
   291fe:	4604      	mov	r4, r0
	if (!device_is_ready(spec->bus)) {
   29200:	6800      	ldr	r0, [r0, #0]
   29202:	f000 fe18 	bl	29e36 <z_device_is_ready>
   29206:	b120      	cbz	r0, 29212 <spi_is_ready_dt+0x16>
	if (spec->config.cs &&
   29208:	68e3      	ldr	r3, [r4, #12]
   2920a:	b113      	cbz	r3, 29212 <spi_is_ready_dt+0x16>
	    !device_is_ready(spec->config.cs->gpio.port)) {
   2920c:	6818      	ldr	r0, [r3, #0]
   2920e:	f000 fe12 	bl	29e36 <z_device_is_ready>
}
   29212:	bd10      	pop	{r4, pc}

00029214 <rng_pool_put>:
	uint8_t first = rngp->first_read;
   29214:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
   29216:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
   29218:	f890 c003 	ldrb.w	ip, [r0, #3]
	if (((last - first) & mask) == mask) {
   2921c:	1a9a      	subs	r2, r3, r2
   2921e:	ea3c 0202 	bics.w	r2, ip, r2
   29222:	d007      	beq.n	29234 <rng_pool_put+0x20>
	rngp->buffer[last] = byte;
   29224:	18c2      	adds	r2, r0, r3
   29226:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
   29228:	3301      	adds	r3, #1
   2922a:	ea03 030c 	and.w	r3, r3, ip
   2922e:	7083      	strb	r3, [r0, #2]
	return 0;
   29230:	2000      	movs	r0, #0
   29232:	4770      	bx	lr
		return -ENOBUFS;
   29234:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   29238:	4770      	bx	lr

0002923a <rng_pool_init>:
	rngp->first_alloc = 0U;
   2923a:	2300      	movs	r3, #0
   2923c:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
   2923e:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
   29240:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
   29242:	3901      	subs	r1, #1
   29244:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
   29246:	7102      	strb	r2, [r0, #4]
}
   29248:	4770      	bx	lr

0002924a <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   2924a:	2000      	movs	r0, #0
   2924c:	4770      	bx	lr

0002924e <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   2924e:	b538      	push	{r3, r4, r5, lr}
   29250:	460c      	mov	r4, r1
   29252:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   29254:	f7ef fcba 	bl	18bcc <bt_is_ready>
   29258:	b120      	cbz	r0, 29264 <entropy_bt_get_entropy+0x16>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   2925a:	4629      	mov	r1, r5
   2925c:	4620      	mov	r0, r4
   2925e:	f7ee fd2d 	bl	17cbc <bt_hci_le_rand>
}
   29262:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   29264:	f06f 000a 	mvn.w	r0, #10
   29268:	e7fb      	b.n	29262 <entropy_bt_get_entropy+0x14>

0002926a <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2926a:	4770      	bx	lr

0002926c <counter_sub>:
	return (a - b) & COUNTER_MAX;
   2926c:	1a40      	subs	r0, r0, r1
}
   2926e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   29272:	4770      	bx	lr

00029274 <event_check>:
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   29274:	f100 0350 	add.w	r3, r0, #80	; 0x50
   29278:	009b      	lsls	r3, r3, #2
   2927a:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2927c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   29280:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   29284:	6818      	ldr	r0, [r3, #0]
}
   29286:	3800      	subs	r0, #0
   29288:	bf18      	it	ne
   2928a:	2001      	movne	r0, #1
   2928c:	4770      	bx	lr

0002928e <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2928e:	f100 0350 	add.w	r3, r0, #80	; 0x50
   29292:	009b      	lsls	r3, r3, #2
   29294:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   29296:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2929a:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   2929e:	2200      	movs	r2, #0
   292a0:	601a      	str	r2, [r3, #0]
   292a2:	681b      	ldr	r3, [r3, #0]
}
   292a4:	4770      	bx	lr

000292a6 <absolute_time_to_cc>:
}
   292a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   292aa:	4770      	bx	lr

000292ac <full_int_lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   292ac:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   292b0:	b672      	cpsid	i
}
   292b2:	4770      	bx	lr

000292b4 <full_int_unlock>:
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   292b4:	f380 8810 	msr	PRIMASK, r0
}
   292b8:	4770      	bx	lr

000292ba <compare_set>:
{
   292ba:	b5f0      	push	{r4, r5, r6, r7, lr}
   292bc:	b083      	sub	sp, #12
   292be:	4604      	mov	r4, r0
   292c0:	4617      	mov	r7, r2
   292c2:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   292c4:	f7f6 fcb2 	bl	1fc2c <compare_int_lock>
   292c8:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   292ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   292cc:	9301      	str	r3, [sp, #4]
   292ce:	9b08      	ldr	r3, [sp, #32]
   292d0:	9300      	str	r3, [sp, #0]
   292d2:	463a      	mov	r2, r7
   292d4:	462b      	mov	r3, r5
   292d6:	4620      	mov	r0, r4
   292d8:	f7f6 fd76 	bl	1fdc8 <compare_set_nolocks>
   292dc:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   292de:	4631      	mov	r1, r6
   292e0:	4620      	mov	r0, r4
   292e2:	f7f6 fcf9 	bl	1fcd8 <compare_int_unlock>
}
   292e6:	4628      	mov	r0, r5
   292e8:	b003      	add	sp, #12
   292ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000292ec <sys_clock_cycle_get_32>:
{
   292ec:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   292ee:	f7f6 fd4b 	bl	1fd88 <z_nrf_rtc_timer_read>
}
   292f2:	bd08      	pop	{r3, pc}

000292f4 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   292f4:	b500      	push	{lr}
	*state = &config->states[0];
   292f6:	6843      	ldr	r3, [r0, #4]
   292f8:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   292fa:	e001      	b.n	29300 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
   292fc:	3308      	adds	r3, #8
   292fe:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   29300:	6813      	ldr	r3, [r2, #0]
   29302:	f890 c008 	ldrb.w	ip, [r0, #8]
   29306:	f8d0 e004 	ldr.w	lr, [r0, #4]
   2930a:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
   2930e:	4563      	cmp	r3, ip
   29310:	d205      	bcs.n	2931e <pinctrl_lookup_state+0x2a>
		if (id == (*state)->id) {
   29312:	f893 c005 	ldrb.w	ip, [r3, #5]
   29316:	458c      	cmp	ip, r1
   29318:	d1f0      	bne.n	292fc <pinctrl_lookup_state+0x8>
			return 0;
   2931a:	2000      	movs	r0, #0
   2931c:	e001      	b.n	29322 <pinctrl_lookup_state+0x2e>
	}

	return -ENOENT;
   2931e:	f06f 0001 	mvn.w	r0, #1
}
   29322:	f85d fb04 	ldr.w	pc, [sp], #4

00029326 <event_packet_is_discardable>:
	switch (hdr->evt) {
   29326:	7803      	ldrb	r3, [r0, #0]
   29328:	2b3e      	cmp	r3, #62	; 0x3e
   2932a:	d003      	beq.n	29334 <event_packet_is_discardable+0xe>
   2932c:	2bff      	cmp	r3, #255	; 0xff
   2932e:	d008      	beq.n	29342 <event_packet_is_discardable+0x1c>
   29330:	2000      	movs	r0, #0
   29332:	4770      	bx	lr
		switch (me->subevent) {
   29334:	7883      	ldrb	r3, [r0, #2]
   29336:	2b02      	cmp	r3, #2
   29338:	d001      	beq.n	2933e <event_packet_is_discardable+0x18>
			return false;
   2933a:	2000      	movs	r0, #0
   2933c:	4770      	bx	lr
			return true;
   2933e:	2001      	movs	r0, #1
   29340:	4770      	bx	lr
		uint8_t subevent = hci_buf[2];
   29342:	7883      	ldrb	r3, [r0, #2]
		switch (subevent) {
   29344:	2b80      	cmp	r3, #128	; 0x80
   29346:	d001      	beq.n	2934c <event_packet_is_discardable+0x26>
			return false;
   29348:	2000      	movs	r0, #0
}
   2934a:	4770      	bx	lr
			return true;
   2934c:	2001      	movs	r0, #1
   2934e:	4770      	bx	lr

00029350 <hci_driver_send>:
{
   29350:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   29352:	8a03      	ldrh	r3, [r0, #16]
   29354:	b183      	cbz	r3, 29378 <hci_driver_send+0x28>
   29356:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   29358:	7e03      	ldrb	r3, [r0, #24]
	switch (type) {
   2935a:	b14b      	cbz	r3, 29370 <hci_driver_send+0x20>
   2935c:	2b02      	cmp	r3, #2
   2935e:	d10e      	bne.n	2937e <hci_driver_send+0x2e>
		err = acl_handle(buf);
   29360:	f7f7 f8ae 	bl	204c0 <acl_handle>
   29364:	4605      	mov	r5, r0
	if (!err) {
   29366:	b965      	cbnz	r5, 29382 <hci_driver_send+0x32>
		net_buf_unref(buf);
   29368:	4620      	mov	r0, r4
   2936a:	f7fe ffcf 	bl	2830c <net_buf_unref>
   2936e:	e008      	b.n	29382 <hci_driver_send+0x32>
		err = cmd_handle(buf);
   29370:	f7f7 f8c4 	bl	204fc <cmd_handle>
   29374:	4605      	mov	r5, r0
		break;
   29376:	e7f6      	b.n	29366 <hci_driver_send+0x16>
		return -EINVAL;
   29378:	f06f 0515 	mvn.w	r5, #21
   2937c:	e001      	b.n	29382 <hci_driver_send+0x32>
	switch (type) {
   2937e:	f06f 0515 	mvn.w	r5, #21
}
   29382:	4628      	mov	r0, r5
   29384:	bd38      	pop	{r3, r4, r5, pc}

00029386 <hci_driver_close>:
{
   29386:	b510      	push	{r4, lr}
		hci_ecdh_uninit();
   29388:	f7f7 fd68 	bl	20e5c <hci_ecdh_uninit>
	err = MULTITHREADING_LOCK_ACQUIRE();
   2938c:	f04f 30ff 	mov.w	r0, #4294967295
   29390:	f04f 31ff 	mov.w	r1, #4294967295
   29394:	f7f6 fed6 	bl	20144 <multithreading_lock_acquire>
	if (err) {
   29398:	4604      	mov	r4, r0
   2939a:	b108      	cbz	r0, 293a0 <hci_driver_close+0x1a>
}
   2939c:	4620      	mov	r0, r4
   2939e:	bd10      	pop	{r4, pc}
	err = sdc_disable();
   293a0:	f7d7 fadc 	bl	95c <sdc_disable>
	if (err) {
   293a4:	4604      	mov	r4, r0
   293a6:	b910      	cbnz	r0, 293ae <hci_driver_close+0x28>
	MULTITHREADING_LOCK_RELEASE();
   293a8:	f7f6 fed6 	bl	20158 <multithreading_lock_release>
	return err;
   293ac:	e7f6      	b.n	2939c <hci_driver_close+0x16>
		MULTITHREADING_LOCK_RELEASE();
   293ae:	f7f6 fed3 	bl	20158 <multithreading_lock_release>
		return err;
   293b2:	e7f3      	b.n	2939c <hci_driver_close+0x16>

000293b4 <configure_supported_features>:
{
   293b4:	b508      	push	{r3, lr}
			err = sdc_support_central();
   293b6:	f7d7 fb89 	bl	acc <sdc_support_central>
			if (err) {
   293ba:	b948      	cbnz	r0, 293d0 <configure_supported_features+0x1c>
			err = sdc_support_dle_central();
   293bc:	f7d7 fb98 	bl	af0 <sdc_support_dle_central>
			if (err) {
   293c0:	b948      	cbnz	r0, 293d6 <configure_supported_features+0x22>
		err = sdc_support_le_2m_phy();
   293c2:	f7d7 fba5 	bl	b10 <sdc_support_le_2m_phy>
		if (err) {
   293c6:	b948      	cbnz	r0, 293dc <configure_supported_features+0x28>
			err = sdc_support_phy_update_central();
   293c8:	f7d7 fbb2 	bl	b30 <sdc_support_phy_update_central>
			if (err) {
   293cc:	b948      	cbnz	r0, 293e2 <configure_supported_features+0x2e>
}
   293ce:	bd08      	pop	{r3, pc}
				return -ENOTSUP;
   293d0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   293d4:	e7fb      	b.n	293ce <configure_supported_features+0x1a>
				return -ENOTSUP;
   293d6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   293da:	e7f8      	b.n	293ce <configure_supported_features+0x1a>
			return -ENOTSUP;
   293dc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   293e0:	e7f5      	b.n	293ce <configure_supported_features+0x1a>
				return -ENOTSUP;
   293e2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   293e6:	e7f2      	b.n	293ce <configure_supported_features+0x1a>

000293e8 <receive_work_handler>:
{
   293e8:	b508      	push	{r3, lr}
	hci_driver_receive_process();
   293ea:	f7f7 fa6d 	bl	208c8 <hci_driver_receive_process>
}
   293ee:	bd08      	pop	{r3, pc}

000293f0 <encode_command_status>:
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   293f0:	230f      	movs	r3, #15
   293f2:	7003      	strb	r3, [r0, #0]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   293f4:	2304      	movs	r3, #4
   293f6:	7043      	strb	r3, [r0, #1]
	evt_data->status = status_code;
   293f8:	7082      	strb	r2, [r0, #2]
	evt_data->ncmd = 1;
   293fa:	2301      	movs	r3, #1
   293fc:	70c3      	strb	r3, [r0, #3]
	evt_data->opcode = hci_opcode;
   293fe:	8081      	strh	r1, [r0, #4]
}
   29400:	4770      	bx	lr

00029402 <encode_command_complete_header>:
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   29402:	f04f 0c0e 	mov.w	ip, #14
   29406:	f880 c000 	strb.w	ip, [r0]
	evt_hdr->len = param_length;
   2940a:	7042      	strb	r2, [r0, #1]
	evt_data->ncmd = 1;
   2940c:	2201      	movs	r2, #1
   2940e:	7082      	strb	r2, [r0, #2]
	evt_data->opcode = hci_opcode;
   29410:	f8a0 1003 	strh.w	r1, [r0, #3]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   29414:	7143      	strb	r3, [r0, #5]
}
   29416:	4770      	bx	lr

00029418 <le_read_supported_states>:
	*buf = states1;
   29418:	2370      	movs	r3, #112	; 0x70
   2941a:	7003      	strb	r3, [r0, #0]
	*(buf + 4) = states2;
   2941c:	2340      	movs	r3, #64	; 0x40
   2941e:	7103      	strb	r3, [r0, #4]
}
   29420:	4770      	bx	lr

00029422 <status_param_cmd_put>:
}
   29422:	2001      	movs	r0, #1
   29424:	4770      	bx	lr

00029426 <link_control_cmd_put>:
{
   29426:	b508      	push	{r3, lr}
	return ((uint16_t)src[1] << 8) | src[0];
   29428:	7842      	ldrb	r2, [r0, #1]
   2942a:	f810 3b03 	ldrb.w	r3, [r0], #3
   2942e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   29432:	b21b      	sxth	r3, r3
	switch (opcode)	{
   29434:	f240 4206 	movw	r2, #1030	; 0x406
   29438:	4293      	cmp	r3, r2
   2943a:	d005      	beq.n	29448 <link_control_cmd_put+0x22>
   2943c:	f240 421d 	movw	r2, #1053	; 0x41d
   29440:	4293      	cmp	r3, r2
   29442:	d004      	beq.n	2944e <link_control_cmd_put+0x28>
   29444:	2001      	movs	r0, #1
}
   29446:	bd08      	pop	{r3, pc}
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   29448:	f7e3 ff00 	bl	d24c <sdc_hci_cmd_lc_disconnect>
   2944c:	e7fb      	b.n	29446 <link_control_cmd_put+0x20>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   2944e:	f7e3 feff 	bl	d250 <sdc_hci_cmd_lc_read_remote_version_information>
   29452:	e7f8      	b.n	29446 <link_control_cmd_put+0x20>

00029454 <controller_and_baseband_cmd_put>:
{
   29454:	b508      	push	{r3, lr}
   29456:	4603      	mov	r3, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   29458:	3003      	adds	r0, #3
   2945a:	f893 c001 	ldrb.w	ip, [r3, #1]
   2945e:	781b      	ldrb	r3, [r3, #0]
   29460:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   29464:	b21b      	sxth	r3, r3
	switch (opcode)	{
   29466:	f640 4c63 	movw	ip, #3171	; 0xc63
   2946a:	4563      	cmp	r3, ip
   2946c:	d02c      	beq.n	294c8 <controller_and_baseband_cmd_put+0x74>
   2946e:	f101 0106 	add.w	r1, r1, #6
   29472:	dc16      	bgt.n	294a2 <controller_and_baseband_cmd_put+0x4e>
   29474:	f640 4c03 	movw	ip, #3075	; 0xc03
   29478:	4563      	cmp	r3, ip
   2947a:	d022      	beq.n	294c2 <controller_and_baseband_cmd_put+0x6e>
   2947c:	f640 4c2d 	movw	ip, #3117	; 0xc2d
   29480:	4563      	cmp	r3, ip
   29482:	d105      	bne.n	29490 <controller_and_baseband_cmd_put+0x3c>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   29484:	7813      	ldrb	r3, [r2, #0]
   29486:	3303      	adds	r3, #3
   29488:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   2948a:	f7e3 fda9 	bl	cfe0 <sdc_hci_cmd_cb_read_transmit_power_level>
   2948e:	e007      	b.n	294a0 <controller_and_baseband_cmd_put+0x4c>
	switch (opcode)	{
   29490:	f640 4201 	movw	r2, #3073	; 0xc01
   29494:	4293      	cmp	r3, r2
   29496:	d102      	bne.n	2949e <controller_and_baseband_cmd_put+0x4a>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   29498:	f7e3 fda4 	bl	cfe4 <sdc_hci_cmd_cb_set_event_mask>
   2949c:	e000      	b.n	294a0 <controller_and_baseband_cmd_put+0x4c>
	switch (opcode)	{
   2949e:	2001      	movs	r0, #1
}
   294a0:	bd08      	pop	{r3, pc}
	switch (opcode)	{
   294a2:	f640 4c7b 	movw	ip, #3195	; 0xc7b
   294a6:	4563      	cmp	r3, ip
   294a8:	d011      	beq.n	294ce <controller_and_baseband_cmd_put+0x7a>
   294aa:	f640 4c7c 	movw	ip, #3196	; 0xc7c
   294ae:	4563      	cmp	r3, ip
   294b0:	d105      	bne.n	294be <controller_and_baseband_cmd_put+0x6a>
		*param_length_out +=
   294b2:	7813      	ldrb	r3, [r2, #0]
   294b4:	3302      	adds	r3, #2
   294b6:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   294b8:	f7e3 fd9e 	bl	cff8 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
   294bc:	e7f0      	b.n	294a0 <controller_and_baseband_cmd_put+0x4c>
	switch (opcode)	{
   294be:	2001      	movs	r0, #1
   294c0:	e7ee      	b.n	294a0 <controller_and_baseband_cmd_put+0x4c>
		return sdc_hci_cmd_cb_reset();
   294c2:	f7d7 fc8b 	bl	ddc <sdc_hci_cmd_cb_reset>
   294c6:	e7eb      	b.n	294a0 <controller_and_baseband_cmd_put+0x4c>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   294c8:	f7e3 fd91 	bl	cfee <sdc_hci_cmd_cb_set_event_mask_page_2>
   294cc:	e7e8      	b.n	294a0 <controller_and_baseband_cmd_put+0x4c>
		*param_length_out +=
   294ce:	7813      	ldrb	r3, [r2, #0]
   294d0:	3304      	adds	r3, #4
   294d2:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   294d4:	f7e3 fd82 	bl	cfdc <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
   294d8:	e7e2      	b.n	294a0 <controller_and_baseband_cmd_put+0x4c>

000294da <supported_commands>:
{
   294da:	b510      	push	{r4, lr}
   294dc:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   294de:	2230      	movs	r2, #48	; 0x30
   294e0:	2100      	movs	r1, #0
   294e2:	f7fc fdcf 	bl	26084 <memset>
	cmds->hci_disconnect = 1;
   294e6:	7823      	ldrb	r3, [r4, #0]
   294e8:	f043 0320 	orr.w	r3, r3, #32
   294ec:	7023      	strb	r3, [r4, #0]
	cmds->hci_read_remote_version_information = 1;
   294ee:	78a3      	ldrb	r3, [r4, #2]
   294f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   294f4:	70a3      	strb	r3, [r4, #2]
	cmds->hci_set_event_mask = 1;
   294f6:	7963      	ldrb	r3, [r4, #5]
   294f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   294fc:	7163      	strb	r3, [r4, #5]
	cmds->hci_reset = 1;
   294fe:	b2db      	uxtb	r3, r3
   29500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   29504:	7163      	strb	r3, [r4, #5]
	cmds->hci_read_transmit_power_level = 1;
   29506:	7aa3      	ldrb	r3, [r4, #10]
   29508:	f043 0304 	orr.w	r3, r3, #4
   2950c:	72a3      	strb	r3, [r4, #10]
	cmds->hci_read_local_version_information = 1;
   2950e:	7ba3      	ldrb	r3, [r4, #14]
   29510:	f043 0308 	orr.w	r3, r3, #8
   29514:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_local_supported_features = 1;
   29516:	b2db      	uxtb	r3, r3
   29518:	f043 0320 	orr.w	r3, r3, #32
   2951c:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_bd_addr = 1;
   2951e:	7be3      	ldrb	r3, [r4, #15]
   29520:	f043 0302 	orr.w	r3, r3, #2
   29524:	73e3      	strb	r3, [r4, #15]
	cmds->hci_set_event_mask_page_2 = 1;
   29526:	7da3      	ldrb	r3, [r4, #22]
   29528:	f043 0304 	orr.w	r3, r3, #4
   2952c:	75a3      	strb	r3, [r4, #22]
	cmds->hci_le_set_event_mask = 1;
   2952e:	7e63      	ldrb	r3, [r4, #25]
   29530:	f043 0301 	orr.w	r3, r3, #1
   29534:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_buffer_size_v1 = 1;
   29536:	b2db      	uxtb	r3, r3
   29538:	f043 0302 	orr.w	r3, r3, #2
   2953c:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_local_supported_features = 1;
   2953e:	b2db      	uxtb	r3, r3
   29540:	f043 0304 	orr.w	r3, r3, #4
   29544:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_random_address = 1;
   29546:	b2db      	uxtb	r3, r3
   29548:	f043 0310 	orr.w	r3, r3, #16
   2954c:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_scan_parameters = 1;
   2954e:	7ea3      	ldrb	r3, [r4, #26]
   29550:	f043 0304 	orr.w	r3, r3, #4
   29554:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_set_scan_enable = 1;
   29556:	b2db      	uxtb	r3, r3
   29558:	f043 0308 	orr.w	r3, r3, #8
   2955c:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_create_connection = 1;
   2955e:	b2db      	uxtb	r3, r3
   29560:	f043 0310 	orr.w	r3, r3, #16
   29564:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_create_connection_cancel = 1;
   29566:	b2db      	uxtb	r3, r3
   29568:	f043 0320 	orr.w	r3, r3, #32
   2956c:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_read_filter_accept_list_size = 1;
   2956e:	b2db      	uxtb	r3, r3
   29570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29574:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_clear_filter_accept_list = 1;
   29576:	b2db      	uxtb	r3, r3
   29578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2957c:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   2957e:	7ee3      	ldrb	r3, [r4, #27]
   29580:	f043 0301 	orr.w	r3, r3, #1
   29584:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_remove_device_from_filter_accept_list = 1;
   29586:	b2db      	uxtb	r3, r3
   29588:	f043 0302 	orr.w	r3, r3, #2
   2958c:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_connection_update = 1;
   2958e:	b2db      	uxtb	r3, r3
   29590:	f043 0304 	orr.w	r3, r3, #4
   29594:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_set_host_channel_classification = 1;
   29596:	b2db      	uxtb	r3, r3
   29598:	f043 0308 	orr.w	r3, r3, #8
   2959c:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_read_channel_map = 1;
   2959e:	b2db      	uxtb	r3, r3
   295a0:	f043 0310 	orr.w	r3, r3, #16
   295a4:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_read_remote_features = 1;
   295a6:	b2db      	uxtb	r3, r3
   295a8:	f043 0320 	orr.w	r3, r3, #32
   295ac:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_encrypt = 1;
   295ae:	b2db      	uxtb	r3, r3
   295b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   295b4:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_rand = 1;
   295b6:	b2db      	uxtb	r3, r3
   295b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   295bc:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_enable_encryption = 1;
   295be:	7f23      	ldrb	r3, [r4, #28]
   295c0:	f043 0301 	orr.w	r3, r3, #1
   295c4:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_read_supported_states = 1;
   295c6:	b2db      	uxtb	r3, r3
   295c8:	f043 0308 	orr.w	r3, r3, #8
   295cc:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_receiver_test_v1 = 1;
   295ce:	b2db      	uxtb	r3, r3
   295d0:	f043 0310 	orr.w	r3, r3, #16
   295d4:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_transmitter_test_v1 = 1;
   295d6:	b2db      	uxtb	r3, r3
   295d8:	f043 0320 	orr.w	r3, r3, #32
   295dc:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_test_end = 1;
   295de:	b2db      	uxtb	r3, r3
   295e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   295e4:	7723      	strb	r3, [r4, #28]
	cmds->hci_read_authenticated_payload_timeout = 1;
   295e6:	f894 3020 	ldrb.w	r3, [r4, #32]
   295ea:	f043 0310 	orr.w	r3, r3, #16
   295ee:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_write_authenticated_payload_timeout = 1;
   295f2:	b2db      	uxtb	r3, r3
   295f4:	f043 0320 	orr.w	r3, r3, #32
   295f8:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_data_length = 1;
   295fc:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   29600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29604:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_read_suggested_default_data_length = 1;
   29608:	b2db      	uxtb	r3, r3
   2960a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2960e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_write_suggested_default_data_length = 1;
   29612:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   29616:	f043 0301 	orr.w	r3, r3, #1
   2961a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_read_maximum_data_length = 1;
   2961e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   29622:	f043 0308 	orr.w	r3, r3, #8
   29626:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_read_phy = 1;
   2962a:	b2db      	uxtb	r3, r3
   2962c:	f043 0310 	orr.w	r3, r3, #16
   29630:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_set_default_phy = 1;
   29634:	b2db      	uxtb	r3, r3
   29636:	f043 0320 	orr.w	r3, r3, #32
   2963a:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_set_phy = 1;
   2963e:	b2db      	uxtb	r3, r3
   29640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29644:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_receiver_test_v2 = 1;
   29648:	b2db      	uxtb	r3, r3
   2964a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2964e:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_transmitter_test_v2 = 1;
   29652:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   29656:	f043 0301 	orr.w	r3, r3, #1
   2965a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	cmds->hci_le_read_transmit_power = 1;
   2965e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   29662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   29666:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	cmds->hci_le_read_local_p256_public_key = 1;
   2966a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   2966e:	f043 0302 	orr.w	r3, r3, #2
   29672:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_generate_dhkey_v1 = 1;
   29676:	b2db      	uxtb	r3, r3
   29678:	f043 0304 	orr.w	r3, r3, #4
   2967c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_generate_dhkey_v2 = 1;
   29680:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   29684:	f043 0304 	orr.w	r3, r3, #4
   29688:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
   2968c:	bd10      	pop	{r4, pc}

0002968e <supported_features>:
{
   2968e:	b510      	push	{r4, lr}
   29690:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   29692:	2208      	movs	r2, #8
   29694:	2100      	movs	r1, #0
   29696:	f7fc fcf5 	bl	26084 <memset>
	features->bdedr_not_supported = 1;
   2969a:	7923      	ldrb	r3, [r4, #4]
   2969c:	f043 0320 	orr.w	r3, r3, #32
   296a0:	7123      	strb	r3, [r4, #4]
	features->le_supported = 1;
   296a2:	b2db      	uxtb	r3, r3
   296a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   296a8:	7123      	strb	r3, [r4, #4]
}
   296aa:	bd10      	pop	{r4, pc}

000296ac <info_param_cmd_put>:
{
   296ac:	b508      	push	{r3, lr}
   296ae:	4603      	mov	r3, r0
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   296b0:	1d88      	adds	r0, r1, #6
   296b2:	f893 c001 	ldrb.w	ip, [r3, #1]
   296b6:	781b      	ldrb	r3, [r3, #0]
   296b8:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   296bc:	b21b      	sxth	r3, r3
	switch (opcode)	{
   296be:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   296c2:	3b01      	subs	r3, #1
   296c4:	2b08      	cmp	r3, #8
   296c6:	d820      	bhi.n	2970a <info_param_cmd_put+0x5e>
   296c8:	e8df f003 	tbb	[pc, r3]
   296cc:	1f120b05 	.word	0x1f120b05
   296d0:	1f1f1f1f 	.word	0x1f1f1f1f
   296d4:	19          	.byte	0x19
   296d5:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   296d6:	7813      	ldrb	r3, [r2, #0]
   296d8:	3308      	adds	r3, #8
   296da:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   296dc:	f7e3 fd7d 	bl	d1da <sdc_hci_cmd_ip_read_local_version_information>
   296e0:	e014      	b.n	2970c <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   296e2:	7813      	ldrb	r3, [r2, #0]
   296e4:	3340      	adds	r3, #64	; 0x40
   296e6:	7013      	strb	r3, [r2, #0]
		supported_commands((void *)event_out_params);
   296e8:	f7ff fef7 	bl	294da <supported_commands>
		return 0;
   296ec:	2000      	movs	r0, #0
   296ee:	e00d      	b.n	2970c <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   296f0:	7813      	ldrb	r3, [r2, #0]
   296f2:	3308      	adds	r3, #8
   296f4:	7013      	strb	r3, [r2, #0]
		supported_features((void *)event_out_params);
   296f6:	f7ff ffca 	bl	2968e <supported_features>
		return 0;
   296fa:	2000      	movs	r0, #0
   296fc:	e006      	b.n	2970c <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   296fe:	7813      	ldrb	r3, [r2, #0]
   29700:	3306      	adds	r3, #6
   29702:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   29704:	f7e3 fd67 	bl	d1d6 <sdc_hci_cmd_ip_read_bd_addr>
   29708:	e000      	b.n	2970c <info_param_cmd_put+0x60>
	switch (opcode)	{
   2970a:	2001      	movs	r0, #1
}
   2970c:	bd08      	pop	{r3, pc}

0002970e <le_supported_features>:
{
   2970e:	b510      	push	{r4, lr}
   29710:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   29712:	2208      	movs	r2, #8
   29714:	2100      	movs	r1, #0
   29716:	f7fc fcb5 	bl	26084 <memset>
	features->params.le_encryption = 1;
   2971a:	7823      	ldrb	r3, [r4, #0]
   2971c:	f043 0301 	orr.w	r3, r3, #1
   29720:	7023      	strb	r3, [r4, #0]
	features->params.extended_reject_indication = 1;
   29722:	b2db      	uxtb	r3, r3
   29724:	f043 0304 	orr.w	r3, r3, #4
   29728:	7023      	strb	r3, [r4, #0]
	features->params.slave_initiated_features_exchange = 1;
   2972a:	b2db      	uxtb	r3, r3
   2972c:	f043 0308 	orr.w	r3, r3, #8
   29730:	7023      	strb	r3, [r4, #0]
	features->params.le_ping = 1;
   29732:	b2db      	uxtb	r3, r3
   29734:	f043 0310 	orr.w	r3, r3, #16
   29738:	7023      	strb	r3, [r4, #0]
	features->params.le_data_packet_length_extension = 1;
   2973a:	b2db      	uxtb	r3, r3
   2973c:	f043 0320 	orr.w	r3, r3, #32
   29740:	7023      	strb	r3, [r4, #0]
	features->params.extended_scanner_filter_policies = 1;
   29742:	b2db      	uxtb	r3, r3
   29744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   29748:	7023      	strb	r3, [r4, #0]
	features->params.le_2m_phy = 1;
   2974a:	7863      	ldrb	r3, [r4, #1]
   2974c:	f043 0301 	orr.w	r3, r3, #1
   29750:	7063      	strb	r3, [r4, #1]
	features->params.channel_selection_algorithm_2 = 1;
   29752:	b2db      	uxtb	r3, r3
   29754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29758:	7063      	strb	r3, [r4, #1]
}
   2975a:	bd10      	pop	{r4, pc}

0002975c <vs_zephyr_supported_commands>:
{
   2975c:	b510      	push	{r4, lr}
   2975e:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   29760:	2202      	movs	r2, #2
   29762:	2100      	movs	r1, #0
   29764:	f7fc fc8e 	bl	26084 <memset>
	cmds->read_version_info = 1;
   29768:	7823      	ldrb	r3, [r4, #0]
   2976a:	f043 0301 	orr.w	r3, r3, #1
   2976e:	7023      	strb	r3, [r4, #0]
	cmds->read_supported_commands = 1;
   29770:	b2db      	uxtb	r3, r3
   29772:	f043 0302 	orr.w	r3, r3, #2
   29776:	7023      	strb	r3, [r4, #0]
	cmds->write_bd_addr = 1;
   29778:	b2db      	uxtb	r3, r3
   2977a:	f043 0320 	orr.w	r3, r3, #32
   2977e:	7023      	strb	r3, [r4, #0]
	cmds->read_static_addresses = 1;
   29780:	7863      	ldrb	r3, [r4, #1]
   29782:	f043 0301 	orr.w	r3, r3, #1
   29786:	7063      	strb	r3, [r4, #1]
	cmds->read_key_hierarchy_roots = 1;
   29788:	b2db      	uxtb	r3, r3
   2978a:	f043 0302 	orr.w	r3, r3, #2
   2978e:	7063      	strb	r3, [r4, #1]
	cmds->read_chip_temperature = 1;
   29790:	b2db      	uxtb	r3, r3
   29792:	f043 0304 	orr.w	r3, r3, #4
   29796:	7063      	strb	r3, [r4, #1]
}
   29798:	bd10      	pop	{r4, pc}

0002979a <vs_supported_commands>:
{
   2979a:	b510      	push	{r4, lr}
   2979c:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   2979e:	2202      	movs	r2, #2
   297a0:	2100      	movs	r1, #0
   297a2:	f7fc fc6f 	bl	26084 <memset>
	cmds->read_supported_vs_commands = 1;
   297a6:	7823      	ldrb	r3, [r4, #0]
   297a8:	f043 0301 	orr.w	r3, r3, #1
   297ac:	7023      	strb	r3, [r4, #0]
	cmds->llpm_mode_set = 1;
   297ae:	b2db      	uxtb	r3, r3
   297b0:	f043 0302 	orr.w	r3, r3, #2
   297b4:	7023      	strb	r3, [r4, #0]
	cmds->conn_update = 1;
   297b6:	b2db      	uxtb	r3, r3
   297b8:	f043 0304 	orr.w	r3, r3, #4
   297bc:	7023      	strb	r3, [r4, #0]
	cmds->conn_event_extend = 1;
   297be:	b2db      	uxtb	r3, r3
   297c0:	f043 0308 	orr.w	r3, r3, #8
   297c4:	7023      	strb	r3, [r4, #0]
	cmds->qos_conn_event_report_enable = 1;
   297c6:	b2db      	uxtb	r3, r3
   297c8:	f043 0310 	orr.w	r3, r3, #16
   297cc:	7023      	strb	r3, [r4, #0]
	cmds->event_length_set = 1;
   297ce:	b2db      	uxtb	r3, r3
   297d0:	f043 0320 	orr.w	r3, r3, #32
   297d4:	7023      	strb	r3, [r4, #0]
}
   297d6:	bd10      	pop	{r4, pc}

000297d8 <le_controller_cmd_put>:
{
   297d8:	b508      	push	{r3, lr}
   297da:	4603      	mov	r3, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   297dc:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   297de:	3106      	adds	r1, #6
   297e0:	f893 c001 	ldrb.w	ip, [r3, #1]
   297e4:	781b      	ldrb	r3, [r3, #0]
   297e6:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   297ea:	b21b      	sxth	r3, r3
	switch (opcode)	{
   297ec:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   297f0:	3b01      	subs	r3, #1
   297f2:	2b5d      	cmp	r3, #93	; 0x5d
   297f4:	f200 80bc 	bhi.w	29970 <le_controller_cmd_put+0x198>
   297f8:	e8df f003 	tbb	[pc, r3]
   297fc:	ba39322f 	.word	0xba39322f
   29800:	bababa41 	.word	0xbababa41
   29804:	4744baba 	.word	0x4744baba
   29808:	57504d4a 	.word	0x57504d4a
   2980c:	63605d5a 	.word	0x63605d5a
   29810:	756f6c66 	.word	0x756f6c66
   29814:	7fbaba7c 	.word	0x7fbaba7c
   29818:	babababa 	.word	0xbabababa
   2981c:	948d87ba 	.word	0x948d87ba
   29820:	baba9a97 	.word	0xbaba9a97
   29824:	babababa 	.word	0xbabababa
   29828:	a7a0baba 	.word	0xa7a0baba
   2982c:	babab0ad 	.word	0xbabab0ad
   29830:	babababa 	.word	0xbabababa
   29834:	babababa 	.word	0xbabababa
   29838:	babababa 	.word	0xbabababa
   2983c:	babababa 	.word	0xbabababa
   29840:	babababa 	.word	0xbabababa
   29844:	bab3baba 	.word	0xbab3baba
   29848:	babababa 	.word	0xbabababa
   2984c:	babababa 	.word	0xbabababa
   29850:	babababa 	.word	0xbabababa
   29854:	babababa 	.word	0xbabababa
   29858:	9dba      	.short	0x9dba
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   2985a:	f7e3 fce6 	bl	d22a <sdc_hci_cmd_le_set_event_mask>
   2985e:	e088      	b.n	29972 <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   29860:	7813      	ldrb	r3, [r2, #0]
   29862:	3303      	adds	r3, #3
   29864:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   29866:	4608      	mov	r0, r1
   29868:	f7e3 fcc9 	bl	d1fe <sdc_hci_cmd_le_read_buffer_size>
   2986c:	e081      	b.n	29972 <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   2986e:	7813      	ldrb	r3, [r2, #0]
   29870:	3308      	adds	r3, #8
   29872:	7013      	strb	r3, [r2, #0]
		le_supported_features((void *)event_out_params);
   29874:	4608      	mov	r0, r1
   29876:	f7ff ff4a 	bl	2970e <le_supported_features>
		return 0;
   2987a:	2000      	movs	r0, #0
   2987c:	e079      	b.n	29972 <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   2987e:	f7e3 fcdd 	bl	d23c <sdc_hci_cmd_le_set_random_address>
   29882:	e076      	b.n	29972 <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_set_scan_params((void *)cmd_params);
   29884:	f7e3 fcde 	bl	d244 <sdc_hci_cmd_le_set_scan_params>
   29888:	e073      	b.n	29972 <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_set_scan_enable((void *)cmd_params);
   2988a:	f7e3 fcd9 	bl	d240 <sdc_hci_cmd_le_set_scan_enable>
   2988e:	e070      	b.n	29972 <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_create_conn((void *)cmd_params);
   29890:	f7e3 fcab 	bl	d1ea <sdc_hci_cmd_le_create_conn>
   29894:	e06d      	b.n	29972 <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_create_conn_cancel();
   29896:	f7e3 fcaa 	bl	d1ee <sdc_hci_cmd_le_create_conn_cancel>
   2989a:	e06a      	b.n	29972 <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   2989c:	7813      	ldrb	r3, [r2, #0]
   2989e:	3301      	adds	r3, #1
   298a0:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   298a2:	4608      	mov	r0, r1
   298a4:	f7e3 fcaf 	bl	d206 <sdc_hci_cmd_le_read_filter_accept_list_size>
   298a8:	e063      	b.n	29972 <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   298aa:	f7e3 fc9a 	bl	d1e2 <sdc_hci_cmd_le_clear_filter_accept_list>
   298ae:	e060      	b.n	29972 <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   298b0:	f7e3 fc95 	bl	d1de <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   298b4:	e05d      	b.n	29972 <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   298b6:	f7e3 fcb2 	bl	d21e <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   298ba:	e05a      	b.n	29972 <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_conn_update((void *)cmd_params);
   298bc:	f7e3 fc93 	bl	d1e6 <sdc_hci_cmd_le_conn_update>
   298c0:	e057      	b.n	29972 <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_set_host_channel_classification((void *)cmd_params);
   298c2:	f7e3 fcb7 	bl	d234 <sdc_hci_cmd_le_set_host_channel_classification>
   298c6:	e054      	b.n	29972 <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   298c8:	7813      	ldrb	r3, [r2, #0]
   298ca:	3307      	adds	r3, #7
   298cc:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   298ce:	f7e3 fc98 	bl	d202 <sdc_hci_cmd_le_read_channel_map>
   298d2:	e04e      	b.n	29972 <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   298d4:	f7e3 fc9d 	bl	d212 <sdc_hci_cmd_le_read_remote_features>
   298d8:	e04b      	b.n	29972 <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   298da:	7813      	ldrb	r3, [r2, #0]
   298dc:	3310      	adds	r3, #16
   298de:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   298e0:	f7e3 fc89 	bl	d1f6 <sdc_hci_cmd_le_encrypt>
   298e4:	e045      	b.n	29972 <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   298e6:	7813      	ldrb	r3, [r2, #0]
   298e8:	3308      	adds	r3, #8
   298ea:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   298ec:	4608      	mov	r0, r1
   298ee:	f7e3 fc84 	bl	d1fa <sdc_hci_cmd_le_rand>
   298f2:	e03e      	b.n	29972 <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_enable_encryption((void *)cmd_params);
   298f4:	f7e3 fc7d 	bl	d1f2 <sdc_hci_cmd_le_enable_encryption>
   298f8:	e03b      	b.n	29972 <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   298fa:	7813      	ldrb	r3, [r2, #0]
   298fc:	3308      	adds	r3, #8
   298fe:	7013      	strb	r3, [r2, #0]
		le_read_supported_states((void *)event_out_params);
   29900:	4608      	mov	r0, r1
   29902:	f7ff fd89 	bl	29418 <le_read_supported_states>
		return 0;
   29906:	2000      	movs	r0, #0
   29908:	e033      	b.n	29972 <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   2990a:	7813      	ldrb	r3, [r2, #0]
   2990c:	3302      	adds	r3, #2
   2990e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   29910:	f7e3 fc87 	bl	d222 <sdc_hci_cmd_le_set_data_length>
   29914:	e02d      	b.n	29972 <le_controller_cmd_put+0x19a>
		*param_length_out +=
   29916:	7813      	ldrb	r3, [r2, #0]
   29918:	3304      	adds	r3, #4
   2991a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   2991c:	4608      	mov	r0, r1
   2991e:	f7e3 fc7a 	bl	d216 <sdc_hci_cmd_le_read_suggested_default_data_length>
   29922:	e026      	b.n	29972 <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   29924:	f7e3 fc90 	bl	d248 <sdc_hci_cmd_le_write_suggested_default_data_length>
   29928:	e023      	b.n	29972 <le_controller_cmd_put+0x19a>
		return hci_cmd_le_read_local_p256_public_key();
   2992a:	f7f7 fa9f 	bl	20e6c <hci_cmd_le_read_local_p256_public_key>
   2992e:	e020      	b.n	29972 <le_controller_cmd_put+0x19a>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   29930:	f000 f897 	bl	29a62 <hci_cmd_le_generate_dhkey>
   29934:	e01d      	b.n	29972 <le_controller_cmd_put+0x19a>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   29936:	f000 f899 	bl	29a6c <hci_cmd_le_generate_dhkey_v2>
   2993a:	e01a      	b.n	29972 <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   2993c:	7813      	ldrb	r3, [r2, #0]
   2993e:	3308      	adds	r3, #8
   29940:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   29942:	4608      	mov	r0, r1
   29944:	f7e3 fc61 	bl	d20a <sdc_hci_cmd_le_read_max_data_length>
   29948:	e013      	b.n	29972 <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   2994a:	7813      	ldrb	r3, [r2, #0]
   2994c:	3304      	adds	r3, #4
   2994e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   29950:	f7e3 fc5d 	bl	d20e <sdc_hci_cmd_le_read_phy>
   29954:	e00d      	b.n	29972 <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   29956:	f7e3 fc66 	bl	d226 <sdc_hci_cmd_le_set_default_phy>
   2995a:	e00a      	b.n	29972 <le_controller_cmd_put+0x19a>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   2995c:	f7e3 fc6c 	bl	d238 <sdc_hci_cmd_le_set_phy>
   29960:	e007      	b.n	29972 <le_controller_cmd_put+0x19a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   29962:	7813      	ldrb	r3, [r2, #0]
   29964:	3302      	adds	r3, #2
   29966:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   29968:	4608      	mov	r0, r1
   2996a:	f7e3 fc56 	bl	d21a <sdc_hci_cmd_le_read_transmit_power>
   2996e:	e000      	b.n	29972 <le_controller_cmd_put+0x19a>
	switch (opcode)	{
   29970:	2001      	movs	r0, #1
}
   29972:	bd08      	pop	{r3, pc}

00029974 <vs_cmd_put>:
{
   29974:	b508      	push	{r3, lr}
   29976:	4603      	mov	r3, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   29978:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   2997a:	3106      	adds	r1, #6
   2997c:	f893 c001 	ldrb.w	ip, [r3, #1]
   29980:	781b      	ldrb	r3, [r3, #0]
   29982:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
	switch (opcode)	{
   29986:	f64f 4c0b 	movw	ip, #64523	; 0xfc0b
   2998a:	4563      	cmp	r3, ip
   2998c:	d90f      	bls.n	299ae <vs_cmd_put+0x3a>
   2998e:	f64f 5c05 	movw	ip, #64773	; 0xfd05
   29992:	4563      	cmp	r3, ip
   29994:	d863      	bhi.n	29a5e <vs_cmd_put+0xea>
   29996:	f5b3 4f7d 	cmp.w	r3, #64768	; 0xfd00
   2999a:	d31a      	bcc.n	299d2 <vs_cmd_put+0x5e>
   2999c:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   299a0:	2b05      	cmp	r3, #5
   299a2:	d858      	bhi.n	29a56 <vs_cmd_put+0xe2>
   299a4:	e8df f003 	tbb	[pc, r3]
   299a8:	4e4b4840 	.word	0x4e4b4840
   299ac:	5451      	.short	0x5451
   299ae:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   299b2:	d801      	bhi.n	299b8 <vs_cmd_put+0x44>
   299b4:	2001      	movs	r0, #1
}
   299b6:	bd08      	pop	{r3, pc}
	switch (opcode)	{
   299b8:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   299bc:	3b01      	subs	r3, #1
   299be:	2b0a      	cmp	r3, #10
   299c0:	d84b      	bhi.n	29a5a <vs_cmd_put+0xe6>
   299c2:	e8df f003 	tbb	[pc, r3]
   299c6:	0f08      	.short	0x0f08
   299c8:	274a4a4a 	.word	0x274a4a4a
   299cc:	20174a4a 	.word	0x20174a4a
   299d0:	2a          	.byte	0x2a
   299d1:	00          	.byte	0x00
   299d2:	2001      	movs	r0, #1
   299d4:	e7ef      	b.n	299b6 <vs_cmd_put+0x42>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   299d6:	7813      	ldrb	r3, [r2, #0]
   299d8:	330c      	adds	r3, #12
   299da:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   299dc:	4608      	mov	r0, r1
   299de:	f7d7 fa11 	bl	e04 <sdc_hci_cmd_vs_zephyr_read_version_info>
   299e2:	e7e8      	b.n	299b6 <vs_cmd_put+0x42>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   299e4:	7813      	ldrb	r3, [r2, #0]
   299e6:	3340      	adds	r3, #64	; 0x40
   299e8:	7013      	strb	r3, [r2, #0]
		vs_zephyr_supported_commands((void *)event_out_params);
   299ea:	4608      	mov	r0, r1
   299ec:	f7ff feb6 	bl	2975c <vs_zephyr_supported_commands>
		return 0;
   299f0:	2000      	movs	r0, #0
   299f2:	e7e0      	b.n	299b6 <vs_cmd_put+0x42>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_static_addresses_return_t);
   299f4:	7813      	ldrb	r3, [r2, #0]
   299f6:	1c58      	adds	r0, r3, #1
   299f8:	7010      	strb	r0, [r2, #0]
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   299fa:	3317      	adds	r3, #23
   299fc:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   299fe:	4608      	mov	r0, r1
   29a00:	f7e3 fb98 	bl	d134 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   29a04:	e7d7      	b.n	299b6 <vs_cmd_put+0x42>
		*param_length_out +=
   29a06:	7813      	ldrb	r3, [r2, #0]
   29a08:	3320      	adds	r3, #32
   29a0a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   29a0c:	4608      	mov	r0, r1
   29a0e:	f7e3 fb44 	bl	d09a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   29a12:	e7d0      	b.n	299b6 <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   29a14:	f7e3 fbdd 	bl	d1d2 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   29a18:	e7cd      	b.n	299b6 <vs_cmd_put+0x42>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   29a1a:	7813      	ldrb	r3, [r2, #0]
   29a1c:	3301      	adds	r3, #1
   29a1e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   29a20:	4608      	mov	r0, r1
   29a22:	f7e3 fb26 	bl	d072 <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   29a26:	e7c6      	b.n	299b6 <vs_cmd_put+0x42>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   29a28:	7813      	ldrb	r3, [r2, #0]
   29a2a:	3340      	adds	r3, #64	; 0x40
   29a2c:	7013      	strb	r3, [r2, #0]
		vs_supported_commands((void *)event_out_params);
   29a2e:	4608      	mov	r0, r1
   29a30:	f7ff feb3 	bl	2979a <vs_supported_commands>
		return 0;
   29a34:	2000      	movs	r0, #0
   29a36:	e7be      	b.n	299b6 <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   29a38:	f7e3 fb14 	bl	d064 <sdc_hci_cmd_vs_llpm_mode_set>
   29a3c:	e7bb      	b.n	299b6 <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   29a3e:	f7e3 fae5 	bl	d00c <sdc_hci_cmd_vs_conn_update>
   29a42:	e7b8      	b.n	299b6 <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   29a44:	f7e3 fada 	bl	cffc <sdc_hci_cmd_vs_conn_event_extend>
   29a48:	e7b5      	b.n	299b6 <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   29a4a:	f7e3 fb0d 	bl	d068 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   29a4e:	e7b2      	b.n	299b6 <vs_cmd_put+0x42>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   29a50:	f7e3 fb06 	bl	d060 <sdc_hci_cmd_vs_event_length_set>
   29a54:	e7af      	b.n	299b6 <vs_cmd_put+0x42>
	switch (opcode)	{
   29a56:	2001      	movs	r0, #1
   29a58:	e7ad      	b.n	299b6 <vs_cmd_put+0x42>
   29a5a:	2001      	movs	r0, #1
   29a5c:	e7ab      	b.n	299b6 <vs_cmd_put+0x42>
   29a5e:	2001      	movs	r0, #1
   29a60:	e7a9      	b.n	299b6 <vs_cmd_put+0x42>

00029a62 <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
   29a62:	b508      	push	{r3, lr}
	return cmd_le_generate_dhkey(p_params->key,
   29a64:	2100      	movs	r1, #0
   29a66:	f7f7 fa19 	bl	20e9c <cmd_le_generate_dhkey>
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}
   29a6a:	bd08      	pop	{r3, pc}

00029a6c <hci_cmd_le_generate_dhkey_v2>:

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   29a6c:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   29a70:	2901      	cmp	r1, #1
   29a72:	d803      	bhi.n	29a7c <hci_cmd_le_generate_dhkey_v2+0x10>
{
   29a74:	b508      	push	{r3, lr}
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   29a76:	f7f7 fa11 	bl	20e9c <cmd_le_generate_dhkey>
}
   29a7a:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   29a7c:	2012      	movs	r0, #18
}
   29a7e:	4770      	bx	lr

00029a80 <m_config_clock_source_get>:
}
   29a80:	2001      	movs	r0, #1
   29a82:	4770      	bx	lr

00029a84 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   29a84:	4668      	mov	r0, sp
   29a86:	f020 0107 	bic.w	r1, r0, #7
   29a8a:	468d      	mov	sp, r1
   29a8c:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   29a8e:	f7e1 fc65 	bl	b35c <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   29a92:	f7eb f8b1 	bl	14bf8 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   29a96:	f7eb f9b3 	bl	14e00 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   29a9a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   29a9e:	4685      	mov	sp, r0
   29aa0:	4770      	bx	lr

00029aa2 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   29aa2:	4668      	mov	r0, sp
   29aa4:	f020 0107 	bic.w	r1, r0, #7
   29aa8:	468d      	mov	sp, r1
   29aaa:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   29aac:	f7e1 fbcc 	bl	b248 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   29ab0:	f7eb f8a2 	bl	14bf8 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   29ab4:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   29ab8:	4685      	mov	sp, r0
   29aba:	4770      	bx	lr

00029abc <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   29abc:	4668      	mov	r0, sp
   29abe:	f020 0107 	bic.w	r1, r0, #7
   29ac2:	468d      	mov	sp, r1
   29ac4:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   29ac6:	f7df f901 	bl	8ccc <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   29aca:	f7eb f895 	bl	14bf8 <_arch_isr_direct_pm>
   29ace:	f7eb f997 	bl	14e00 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   29ad2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   29ad6:	4685      	mov	sp, r0
   29ad8:	4770      	bx	lr

00029ada <mpsl_lib_init_sys>:
{
   29ada:	b510      	push	{r4, lr}
	err = mpsl_lib_init_internal();
   29adc:	f7f7 fa16 	bl	20f0c <mpsl_lib_init_internal>
	if (err) {
   29ae0:	4604      	mov	r4, r0
   29ae2:	b108      	cbz	r0, 29ae8 <mpsl_lib_init_sys+0xe>
}
   29ae4:	4620      	mov	r0, r4
   29ae6:	bd10      	pop	{r4, pc}
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   29ae8:	2201      	movs	r2, #1
   29aea:	2100      	movs	r1, #0
   29aec:	2008      	movs	r0, #8
   29aee:	f7fc f9d0 	bl	25e92 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   29af2:	2201      	movs	r2, #1
   29af4:	2100      	movs	r1, #0
   29af6:	200b      	movs	r0, #11
   29af8:	f7fc f9cb 	bl	25e92 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   29afc:	2201      	movs	r2, #1
   29afe:	2100      	movs	r1, #0
   29b00:	4610      	mov	r0, r2
   29b02:	f7fc f9c6 	bl	25e92 <z_arm_irq_priority_set>
	return 0;
   29b06:	e7ed      	b.n	29ae4 <mpsl_lib_init_sys+0xa>

00029b08 <mpsl_low_prio_work_handler>:
{
   29b08:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   29b0a:	f04f 30ff 	mov.w	r0, #4294967295
   29b0e:	f04f 31ff 	mov.w	r1, #4294967295
   29b12:	f7f6 fb17 	bl	20144 <multithreading_lock_acquire>
	mpsl_low_priority_process();
   29b16:	f7e6 fcd6 	bl	104c6 <mpsl_low_priority_process>
	MULTITHREADING_LOCK_RELEASE();
   29b1a:	f7f6 fb1d 	bl	20158 <multithreading_lock_release>
}
   29b1e:	bd08      	pop	{r3, pc}

00029b20 <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(const struct device *dev)
{
   29b20:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	mpsl_fem_init();
   29b22:	f7e6 fea9 	bl	10878 <mpsl_fem_init>

	return 0;
}
   29b26:	2000      	movs	r0, #0
   29b28:	bd08      	pop	{r3, pc}

00029b2a <nrfx_clock_stop>:
	switch (domain) {
   29b2a:	2801      	cmp	r0, #1
   29b2c:	d000      	beq.n	29b30 <nrfx_clock_stop+0x6>
   29b2e:	4770      	bx	lr
{
   29b30:	b508      	push	{r3, lr}
		mpsl_clock_hfclk_release();
   29b32:	f7e2 faa7 	bl	c084 <mpsl_clock_hfclk_release>
}
   29b36:	bd08      	pop	{r3, pc}

00029b38 <nrfx_clock_enable>:
}
   29b38:	4770      	bx	lr

00029b3a <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
   29b3a:	b508      	push	{r3, lr}
	MPSL_IRQ_CLOCK_Handler();
   29b3c:	f7e2 f8ac 	bl	bc98 <MPSL_IRQ_CLOCK_Handler>
}
   29b40:	bd08      	pop	{r3, pc}

00029b42 <nrf52_errata_36>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   29b42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   29b46:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   29b4a:	2b0d      	cmp	r3, #13
   29b4c:	d001      	beq.n	29b52 <nrf52_errata_36+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   29b4e:	2000      	movs	r0, #0
   29b50:	4770      	bx	lr
                        return true;
   29b52:	2001      	movs	r0, #1
    #endif
}
   29b54:	4770      	bx	lr

00029b56 <nrf52_errata_66>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   29b56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   29b5a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   29b5e:	2b0d      	cmp	r3, #13
   29b60:	d001      	beq.n	29b66 <nrf52_errata_66+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   29b62:	2000      	movs	r0, #0
   29b64:	4770      	bx	lr
                        return true;
   29b66:	2001      	movs	r0, #1
    #endif
}
   29b68:	4770      	bx	lr

00029b6a <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   29b6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   29b6e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   29b72:	2b0d      	cmp	r3, #13
   29b74:	d001      	beq.n	29b7a <nrf52_errata_136+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   29b76:	2000      	movs	r0, #0
   29b78:	4770      	bx	lr
                        return true;
   29b7a:	2001      	movs	r0, #1
    #endif
}
   29b7c:	4770      	bx	lr

00029b7e <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   29b7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   29b82:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   29b86:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   29b8a:	2a0d      	cmp	r2, #13
   29b8c:	d001      	beq.n	29b92 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   29b8e:	2000      	movs	r0, #0
   29b90:	4770      	bx	lr
                switch(var2)
   29b92:	b10b      	cbz	r3, 29b98 <nrf52_configuration_249+0x1a>
                        return true;
   29b94:	2001      	movs	r0, #1
    #endif
}
   29b96:	4770      	bx	lr
                switch(var2)
   29b98:	2000      	movs	r0, #0
   29b9a:	4770      	bx	lr

00029b9c <nrf52_handle_approtect>:
        Otherwise, the fw branch state is loaded from UICR, emulating the legacy APPROTECT behavior.

         The same mechanism is implemented for SECURE APPROTECT, with the macros
         ENABLE_SECURE_APPROTECT and ENABLE_SECURE_APPROTECT_USER_HANDLING. */
static inline void nrf52_handle_approtect(void)
{
   29b9c:	b508      	push	{r3, lr}
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   29b9e:	f7ff ffee 	bl	29b7e <nrf52_configuration_249>
   29ba2:	b138      	cbz	r0, 29bb4 <nrf52_handle_approtect+0x18>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   29ba4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   29ba8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   29bac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   29bb0:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            }
        #endif
    #endif
}
   29bb4:	bd08      	pop	{r3, pc}

00029bb6 <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
   29bb6:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   29bb8:	4780      	blx	r0
}
   29bba:	bd08      	pop	{r3, pc}

00029bbc <nrf_gpiote_event_configure>:
{
   29bbc:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   29bbe:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   29bc2:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   29bc6:	f424 344f 	bic.w	r4, r4, #211968	; 0x33c00
   29bca:	f424 7440 	bic.w	r4, r4, #768	; 0x300
   29bce:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   29bd2:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   29bd6:	0212      	lsls	r2, r2, #8
   29bd8:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   29bdc:	041b      	lsls	r3, r3, #16
   29bde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   29be2:	431a      	orrs	r2, r3
   29be4:	4314      	orrs	r4, r2
   29be6:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   29bea:	bc10      	pop	{r4}
   29bec:	4770      	bx	lr

00029bee <nrf_gpiote_task_configure>:
{
   29bee:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   29bf0:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   29bf4:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   29bf8:	f424 1499 	bic.w	r4, r4, #1253376	; 0x132000
   29bfc:	f424 54f8 	bic.w	r4, r4, #7936	; 0x1f00
   29c00:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   29c04:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   29c08:	0212      	lsls	r2, r2, #8
   29c0a:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   29c0e:	041b      	lsls	r3, r3, #16
   29c10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   29c14:	431a      	orrs	r2, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   29c16:	f89d 3004 	ldrb.w	r3, [sp, #4]
   29c1a:	051b      	lsls	r3, r3, #20
   29c1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   29c20:	431a      	orrs	r2, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   29c22:	4314      	orrs	r4, r2
   29c24:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   29c28:	bc10      	pop	{r4}
   29c2a:	4770      	bx	lr

00029c2c <nrf_gpio_cfg_sense_set>:
{
   29c2c:	b500      	push	{lr}
   29c2e:	b085      	sub	sp, #20
   29c30:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   29c34:	f10d 030f 	add.w	r3, sp, #15
   29c38:	9301      	str	r3, [sp, #4]
   29c3a:	2100      	movs	r1, #0
   29c3c:	9100      	str	r1, [sp, #0]
   29c3e:	460b      	mov	r3, r1
   29c40:	460a      	mov	r2, r1
   29c42:	f7f7 fb43 	bl	212cc <nrf_gpio_reconfigure>
}
   29c46:	b005      	add	sp, #20
   29c48:	f85d fb04 	ldr.w	pc, [sp], #4

00029c4c <pin_is_task_output>:
{
   29c4c:	b510      	push	{r4, lr}
   29c4e:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   29c50:	f7f7 fbda 	bl	21408 <pin_is_output>
   29c54:	b128      	cbz	r0, 29c62 <pin_is_task_output+0x16>
   29c56:	4620      	mov	r0, r4
   29c58:	f7f7 fbc0 	bl	213dc <pin_in_use_by_te>
   29c5c:	b118      	cbz	r0, 29c66 <pin_is_task_output+0x1a>
   29c5e:	2001      	movs	r0, #1
   29c60:	e000      	b.n	29c64 <pin_is_task_output+0x18>
   29c62:	2000      	movs	r0, #0
}
   29c64:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   29c66:	2000      	movs	r0, #0
   29c68:	e7fc      	b.n	29c64 <pin_is_task_output+0x18>

00029c6a <pin_is_input>:
{
   29c6a:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   29c6c:	f7f7 fbcc 	bl	21408 <pin_is_output>
   29c70:	f080 0001 	eor.w	r0, r0, #1
}
   29c74:	b2c0      	uxtb	r0, r0
   29c76:	bd08      	pop	{r3, pc}

00029c78 <gpiote_polarity_to_trigger>:
}
   29c78:	4770      	bx	lr

00029c7a <gpiote_trigger_to_polarity>:
}
   29c7a:	4770      	bx	lr

00029c7c <is_level>:
}
   29c7c:	2803      	cmp	r0, #3
   29c7e:	bf94      	ite	ls
   29c80:	2000      	movls	r0, #0
   29c82:	2001      	movhi	r0, #1
   29c84:	4770      	bx	lr

00029c86 <latch_pending_read_and_check>:
{
   29c86:	b510      	push	{r4, lr}
   29c88:	4604      	mov	r4, r0
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
   29c8a:	4602      	mov	r2, r0
   29c8c:	2102      	movs	r1, #2
   29c8e:	2000      	movs	r0, #0
   29c90:	f7f7 fb78 	bl	21384 <nrf_gpio_latches_read_and_clear>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   29c94:	2300      	movs	r3, #0
   29c96:	2b01      	cmp	r3, #1
   29c98:	d804      	bhi.n	29ca4 <latch_pending_read_and_check+0x1e>
        if (latch[port_idx])
   29c9a:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   29c9e:	b91a      	cbnz	r2, 29ca8 <latch_pending_read_and_check+0x22>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   29ca0:	3301      	adds	r3, #1
   29ca2:	e7f8      	b.n	29c96 <latch_pending_read_and_check+0x10>
    return false;
   29ca4:	2000      	movs	r0, #0
}
   29ca6:	bd10      	pop	{r4, pc}
            return true;
   29ca8:	2001      	movs	r0, #1
   29caa:	e7fc      	b.n	29ca6 <latch_pending_read_and_check+0x20>

00029cac <nrf_spi_configure>:
NRF_STATIC_INLINE void nrf_spi_configure(NRF_SPI_Type *      p_reg,
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
   29cac:	3a00      	subs	r2, #0
   29cae:	bf18      	it	ne
   29cb0:	2201      	movne	r2, #1
    switch (spi_mode)
   29cb2:	2902      	cmp	r1, #2
   29cb4:	d009      	beq.n	29cca <nrf_spi_configure+0x1e>
   29cb6:	2903      	cmp	r1, #3
   29cb8:	d00a      	beq.n	29cd0 <nrf_spi_configure+0x24>
   29cba:	2901      	cmp	r1, #1
   29cbc:	d002      	beq.n	29cc4 <nrf_spi_configure+0x18>
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   29cbe:	f8c0 2554 	str.w	r2, [r0, #1364]	; 0x554
}
   29cc2:	4770      	bx	lr
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   29cc4:	f042 0202 	orr.w	r2, r2, #2
        break;
   29cc8:	e7f9      	b.n	29cbe <nrf_spi_configure+0x12>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   29cca:	f042 0204 	orr.w	r2, r2, #4
        break;
   29cce:	e7f6      	b.n	29cbe <nrf_spi_configure+0x12>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   29cd0:	f042 0206 	orr.w	r2, r2, #6
        break;
   29cd4:	e7f3      	b.n	29cbe <nrf_spi_configure+0x12>

00029cd6 <transfer_byte>:
{
   29cd6:	b430      	push	{r4, r5}
   29cd8:	b082      	sub	sp, #8
    return p_reg->RXD;
   29cda:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
   29cde:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   29ce0:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   29ce4:	6a0b      	ldr	r3, [r1, #32]
   29ce6:	698a      	ldr	r2, [r1, #24]
   29ce8:	4293      	cmp	r3, r2
   29cea:	d203      	bcs.n	29cf4 <transfer_byte+0x1e>
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   29cec:	694a      	ldr	r2, [r1, #20]
   29cee:	f89d 4007 	ldrb.w	r4, [sp, #7]
   29cf2:	54d4      	strb	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   29cf4:	6a0b      	ldr	r3, [r1, #32]
   29cf6:	1c5a      	adds	r2, r3, #1
   29cf8:	620a      	str	r2, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
   29cfa:	3302      	adds	r3, #2
    if (p_cb->abort)
   29cfc:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   29d00:	b13c      	cbz	r4, 29d12 <transfer_byte+0x3c>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   29d02:	690c      	ldr	r4, [r1, #16]
   29d04:	429c      	cmp	r4, r3
   29d06:	d900      	bls.n	29d0a <transfer_byte+0x34>
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   29d08:	610b      	str	r3, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   29d0a:	698c      	ldr	r4, [r1, #24]
   29d0c:	429c      	cmp	r4, r3
   29d0e:	d900      	bls.n	29d12 <transfer_byte+0x3c>
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   29d10:	618b      	str	r3, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   29d12:	690c      	ldr	r4, [r1, #16]
   29d14:	429c      	cmp	r4, r3
   29d16:	d808      	bhi.n	29d2a <transfer_byte+0x54>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   29d18:	698d      	ldr	r5, [r1, #24]
   29d1a:	429d      	cmp	r5, r3
   29d1c:	d80d      	bhi.n	29d3a <transfer_byte+0x64>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   29d1e:	42a2      	cmp	r2, r4
   29d20:	d310      	bcc.n	29d44 <transfer_byte+0x6e>
   29d22:	42aa      	cmp	r2, r5
   29d24:	d210      	bcs.n	29d48 <transfer_byte+0x72>
   29d26:	2001      	movs	r0, #1
   29d28:	e004      	b.n	29d34 <transfer_byte+0x5e>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   29d2a:	68ca      	ldr	r2, [r1, #12]
   29d2c:	5cd3      	ldrb	r3, [r2, r3]
    p_reg->TXD = data;
   29d2e:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
        return true;
   29d32:	2001      	movs	r0, #1
}
   29d34:	b002      	add	sp, #8
   29d36:	bc30      	pop	{r4, r5}
   29d38:	4770      	bx	lr
        nrf_spi_txd_set(p_spi, p_cb->orc);
   29d3a:	7fcb      	ldrb	r3, [r1, #31]
   29d3c:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
        return true;
   29d40:	2001      	movs	r0, #1
   29d42:	e7f7      	b.n	29d34 <transfer_byte+0x5e>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   29d44:	2001      	movs	r0, #1
   29d46:	e7f5      	b.n	29d34 <transfer_byte+0x5e>
   29d48:	2000      	movs	r0, #0
   29d4a:	e7f3      	b.n	29d34 <transfer_byte+0x5e>

00029d4c <irq_handler>:
{
   29d4c:	b510      	push	{r4, lr}
   29d4e:	460c      	mov	r4, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   29d50:	2200      	movs	r2, #0
   29d52:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
   29d56:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    if (!transfer_byte(p_spi, p_cb))
   29d5a:	f7ff ffbc 	bl	29cd6 <transfer_byte>
   29d5e:	b100      	cbz	r0, 29d62 <irq_handler+0x16>
}
   29d60:	bd10      	pop	{r4, pc}
        finish_transfer(p_cb);
   29d62:	4620      	mov	r0, r4
   29d64:	f7f7 ffb8 	bl	21cd8 <finish_transfer>
}
   29d68:	e7fa      	b.n	29d60 <irq_handler+0x14>

00029d6a <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   29d6a:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   29d6c:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   29d6e:	4293      	cmp	r3, r2
   29d70:	d804      	bhi.n	29d7c <_GetAvailWriteSpace+0x12>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   29d72:	6881      	ldr	r1, [r0, #8]
   29d74:	1a8a      	subs	r2, r1, r2
   29d76:	4413      	add	r3, r2
   29d78:	1e58      	subs	r0, r3, #1
   29d7a:	4770      	bx	lr
    r = RdOff - WrOff - 1u;
   29d7c:	1a98      	subs	r0, r3, r2
   29d7e:	3801      	subs	r0, #1
}
   29d80:	4770      	bx	lr

00029d82 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   29d82:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29d86:	4604      	mov	r4, r0
   29d88:	4688      	mov	r8, r1
   29d8a:	4616      	mov	r6, r2
  WrOff = pRing->WrOff;
   29d8c:	68c5      	ldr	r5, [r0, #12]
  Rem = pRing->SizeOfBuffer - WrOff;
   29d8e:	6887      	ldr	r7, [r0, #8]
   29d90:	eba7 0905 	sub.w	r9, r7, r5
  if (Rem > NumBytes) {
   29d94:	4591      	cmp	r9, r2
   29d96:	d907      	bls.n	29da8 <_WriteNoCheck+0x26>
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   29d98:	6840      	ldr	r0, [r0, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
   29d9a:	4428      	add	r0, r5
   29d9c:	f7fc f943 	bl	26026 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   29da0:	4435      	add	r5, r6
   29da2:	60e5      	str	r5, [r4, #12]
}
   29da4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   29da8:	6840      	ldr	r0, [r0, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   29daa:	464a      	mov	r2, r9
   29dac:	4428      	add	r0, r5
   29dae:	f7fc f93a 	bl	26026 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
   29db2:	1bed      	subs	r5, r5, r7
   29db4:	4435      	add	r5, r6
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   29db6:	462a      	mov	r2, r5
   29db8:	eb08 0109 	add.w	r1, r8, r9
   29dbc:	6860      	ldr	r0, [r4, #4]
   29dbe:	f7fc f932 	bl	26026 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   29dc2:	60e5      	str	r5, [r4, #12]
}
   29dc4:	e7ee      	b.n	29da4 <_WriteNoCheck+0x22>

00029dc6 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   29dc6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29dca:	4606      	mov	r6, r0
   29dcc:	4688      	mov	r8, r1
   29dce:	4617      	mov	r7, r2
  WrOff = pRing->WrOff;
   29dd0:	68c5      	ldr	r5, [r0, #12]
  NumBytesWritten = 0u;
   29dd2:	f04f 0900 	mov.w	r9, #0
   29dd6:	e018      	b.n	29e0a <_WriteBlocking+0x44>
      NumBytesToWrite = RdOff - WrOff - 1u;
   29dd8:	1b5b      	subs	r3, r3, r5
   29dda:	1e5a      	subs	r2, r3, #1
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   29ddc:	68b3      	ldr	r3, [r6, #8]
   29dde:	1b5c      	subs	r4, r3, r5
   29de0:	4294      	cmp	r4, r2
   29de2:	bf28      	it	cs
   29de4:	4614      	movcs	r4, r2
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   29de6:	42bc      	cmp	r4, r7
   29de8:	bf28      	it	cs
   29dea:	463c      	movcs	r4, r7
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   29dec:	6870      	ldr	r0, [r6, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
   29dee:	4622      	mov	r2, r4
   29df0:	4641      	mov	r1, r8
   29df2:	4428      	add	r0, r5
   29df4:	f7fc f917 	bl	26026 <memcpy>
    NumBytesWritten += NumBytesToWrite;
   29df8:	44a1      	add	r9, r4
    pBuffer         += NumBytesToWrite;
   29dfa:	44a0      	add	r8, r4
    NumBytes        -= NumBytesToWrite;
   29dfc:	1b3f      	subs	r7, r7, r4
    WrOff           += NumBytesToWrite;
   29dfe:	4425      	add	r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
   29e00:	68b3      	ldr	r3, [r6, #8]
   29e02:	42ab      	cmp	r3, r5
   29e04:	d009      	beq.n	29e1a <_WriteBlocking+0x54>
    pRing->WrOff = WrOff;
   29e06:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   29e08:	b14f      	cbz	r7, 29e1e <_WriteBlocking+0x58>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   29e0a:	6933      	ldr	r3, [r6, #16]
    if (RdOff > WrOff) {
   29e0c:	429d      	cmp	r5, r3
   29e0e:	d3e3      	bcc.n	29dd8 <_WriteBlocking+0x12>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   29e10:	68b2      	ldr	r2, [r6, #8]
   29e12:	1b5b      	subs	r3, r3, r5
   29e14:	441a      	add	r2, r3
   29e16:	3a01      	subs	r2, #1
   29e18:	e7e0      	b.n	29ddc <_WriteBlocking+0x16>
      WrOff = 0u;
   29e1a:	2500      	movs	r5, #0
   29e1c:	e7f3      	b.n	29e06 <_WriteBlocking+0x40>
}
   29e1e:	4648      	mov	r0, r9
   29e20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00029e24 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   29e24:	b508      	push	{r3, lr}
  _DoInit();
   29e26:	f7f8 f8db 	bl	21fe0 <_DoInit>
}
   29e2a:	bd08      	pop	{r3, pc}

00029e2c <rtt_init>:
{
   29e2c:	b508      	push	{r3, lr}
	SEGGER_RTT_Init();
   29e2e:	f7ff fff9 	bl	29e24 <SEGGER_RTT_Init>
}
   29e32:	2000      	movs	r0, #0
   29e34:	bd08      	pop	{r3, pc}

00029e36 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   29e36:	b160      	cbz	r0, 29e52 <z_device_is_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   29e38:	68c3      	ldr	r3, [r0, #12]
   29e3a:	785a      	ldrb	r2, [r3, #1]
   29e3c:	f012 0f01 	tst.w	r2, #1
   29e40:	d003      	beq.n	29e4a <z_device_is_ready+0x14>
   29e42:	781b      	ldrb	r3, [r3, #0]
   29e44:	b11b      	cbz	r3, 29e4e <z_device_is_ready+0x18>
   29e46:	2000      	movs	r0, #0
   29e48:	4770      	bx	lr
   29e4a:	2000      	movs	r0, #0
   29e4c:	4770      	bx	lr
   29e4e:	2001      	movs	r0, #1
   29e50:	4770      	bx	lr
		return false;
   29e52:	2000      	movs	r0, #0
}
   29e54:	4770      	bx	lr

00029e56 <z_early_memset>:
{
   29e56:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
   29e58:	f7fc f914 	bl	26084 <memset>
}
   29e5c:	bd08      	pop	{r3, pc}

00029e5e <z_early_memcpy>:
{
   29e5e:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
   29e60:	f7fc f8e1 	bl	26026 <memcpy>
}
   29e64:	bd08      	pop	{r3, pc}

00029e66 <k_heap_init>:
{
   29e66:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   29e68:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   29e6c:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   29e6e:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   29e70:	f7fa fd81 	bl	24976 <sys_heap_init>
}
   29e74:	bd10      	pop	{r4, pc}

00029e76 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   29e76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29e7a:	b085      	sub	sp, #20
   29e7c:	4607      	mov	r7, r0
   29e7e:	9103      	str	r1, [sp, #12]
   29e80:	4692      	mov	sl, r2
   29e82:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   29e84:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   29e86:	4628      	mov	r0, r5
   29e88:	4621      	mov	r1, r4
   29e8a:	f000 fd88 	bl	2a99e <sys_clock_timeout_end_calc>
   29e8e:	4606      	mov	r6, r0
   29e90:	4689      	mov	r9, r1
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   29e92:	f1b4 3fff 	cmp.w	r4, #4294967295
   29e96:	bf08      	it	eq
   29e98:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   29e9c:	d00d      	beq.n	29eba <k_heap_aligned_alloc+0x44>

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   29e9e:	f107 0b14 	add.w	fp, r7, #20
	__asm__ volatile(
   29ea2:	f04f 0340 	mov.w	r3, #64	; 0x40
   29ea6:	f3ef 8511 	mrs	r5, BASEPRI
   29eaa:	f383 8812 	msr	BASEPRI_MAX, r3
   29eae:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   29eb2:	f04f 0800 	mov.w	r8, #0
	void *ret = NULL;
   29eb6:	4644      	mov	r4, r8

	while (ret == NULL) {
   29eb8:	e014      	b.n	29ee4 <k_heap_aligned_alloc+0x6e>
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   29eba:	f04f 36ff 	mov.w	r6, #4294967295
   29ebe:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   29ec2:	e7ec      	b.n	29e9e <k_heap_aligned_alloc+0x28>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   29ec4:	9000      	str	r0, [sp, #0]
   29ec6:	9101      	str	r1, [sp, #4]
   29ec8:	f107 020c 	add.w	r2, r7, #12
   29ecc:	4629      	mov	r1, r5
   29ece:	4658      	mov	r0, fp
   29ed0:	f7f9 fa08 	bl	232e4 <z_pend_curr>
   29ed4:	f04f 0340 	mov.w	r3, #64	; 0x40
   29ed8:	f3ef 8511 	mrs	r5, BASEPRI
   29edc:	f383 8812 	msr	BASEPRI_MAX, r3
   29ee0:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   29ee4:	b9ac      	cbnz	r4, 29f12 <k_heap_aligned_alloc+0x9c>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   29ee6:	4652      	mov	r2, sl
   29ee8:	9903      	ldr	r1, [sp, #12]
   29eea:	4638      	mov	r0, r7
   29eec:	f7fa fccd 	bl	2488a <sys_heap_aligned_alloc>
   29ef0:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   29ef2:	f7f9 fd9b 	bl	23a2c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   29ef6:	b964      	cbnz	r4, 29f12 <k_heap_aligned_alloc+0x9c>
		    (ret != NULL) || ((end - now) <= 0)) {
   29ef8:	1a30      	subs	r0, r6, r0
   29efa:	eb69 0101 	sbc.w	r1, r9, r1
   29efe:	2801      	cmp	r0, #1
   29f00:	f171 0300 	sbcs.w	r3, r1, #0
   29f04:	db05      	blt.n	29f12 <k_heap_aligned_alloc+0x9c>
		if (!blocked_alloc) {
   29f06:	f1b8 0f00 	cmp.w	r8, #0
   29f0a:	d1db      	bne.n	29ec4 <k_heap_aligned_alloc+0x4e>
			blocked_alloc = true;
   29f0c:	f04f 0801 	mov.w	r8, #1
   29f10:	e7d8      	b.n	29ec4 <k_heap_aligned_alloc+0x4e>
	__asm__ volatile(
   29f12:	f385 8811 	msr	BASEPRI, r5
   29f16:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   29f1a:	4620      	mov	r0, r4
   29f1c:	b005      	add	sp, #20
   29f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00029f22 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   29f22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29f24:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   29f26:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
   29f2a:	f04f 0340 	mov.w	r3, #64	; 0x40
   29f2e:	f3ef 8511 	mrs	r5, BASEPRI
   29f32:	f383 8812 	msr	BASEPRI_MAX, r3
   29f36:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   29f3a:	f7fa fc62 	bl	24802 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   29f3e:	f104 000c 	add.w	r0, r4, #12
   29f42:	f000 fc65 	bl	2a810 <z_unpend_all>
   29f46:	b920      	cbnz	r0, 29f52 <k_heap_free+0x30>
	__asm__ volatile(
   29f48:	f385 8811 	msr	BASEPRI, r5
   29f4c:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   29f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		z_reschedule(&h->lock, key);
   29f52:	4629      	mov	r1, r5
   29f54:	4638      	mov	r0, r7
   29f56:	f7f9 f861 	bl	2301c <z_reschedule>
   29f5a:	e7f9      	b.n	29f50 <k_heap_free+0x2e>

00029f5c <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   29f5c:	68c2      	ldr	r2, [r0, #12]
   29f5e:	6903      	ldr	r3, [r0, #16]
   29f60:	431a      	orrs	r2, r3
   29f62:	f012 0203 	ands.w	r2, r2, #3
   29f66:	d10d      	bne.n	29f84 <create_free_list+0x28>
	slab->free_list = NULL;
   29f68:	2100      	movs	r1, #0
   29f6a:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   29f6c:	e005      	b.n	29f7a <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   29f6e:	6941      	ldr	r1, [r0, #20]
   29f70:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   29f72:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   29f74:	68c1      	ldr	r1, [r0, #12]
   29f76:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   29f78:	3201      	adds	r2, #1
   29f7a:	6881      	ldr	r1, [r0, #8]
   29f7c:	4291      	cmp	r1, r2
   29f7e:	d8f6      	bhi.n	29f6e <create_free_list+0x12>
	return 0;
   29f80:	2000      	movs	r0, #0
   29f82:	4770      	bx	lr
		return -EINVAL;
   29f84:	f06f 0015 	mvn.w	r0, #21
}
   29f88:	4770      	bx	lr

00029f8a <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   29f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29f8e:	4604      	mov	r4, r0
   29f90:	460d      	mov	r5, r1
	__asm__ volatile(
   29f92:	f04f 0340 	mov.w	r3, #64	; 0x40
   29f96:	f3ef 8611 	mrs	r6, BASEPRI
   29f9a:	f383 8812 	msr	BASEPRI_MAX, r3
   29f9e:	f3bf 8f6f 	isb	sy
   29fa2:	4637      	mov	r7, r6
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   29fa4:	6943      	ldr	r3, [r0, #20]
   29fa6:	b16b      	cbz	r3, 29fc4 <k_mem_slab_free+0x3a>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   29fa8:	682b      	ldr	r3, [r5, #0]
   29faa:	6962      	ldr	r2, [r4, #20]
   29fac:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   29fae:	682b      	ldr	r3, [r5, #0]
   29fb0:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   29fb2:	69a3      	ldr	r3, [r4, #24]
   29fb4:	3b01      	subs	r3, #1
   29fb6:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   29fb8:	f387 8811 	msr	BASEPRI, r7
   29fbc:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   29fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29fc4:	f100 0808 	add.w	r8, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   29fc8:	f000 fc00 	bl	2a7cc <z_unpend_first_thread>
		if (pending_thread != NULL) {
   29fcc:	2800      	cmp	r0, #0
   29fce:	d0eb      	beq.n	29fa8 <k_mem_slab_free+0x1e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   29fd0:	682a      	ldr	r2, [r5, #0]
   29fd2:	2100      	movs	r1, #0
   29fd4:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   29fd8:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   29fda:	f000 fb42 	bl	2a662 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   29fde:	4631      	mov	r1, r6
   29fe0:	4640      	mov	r0, r8
   29fe2:	f7f9 f81b 	bl	2301c <z_reschedule>
			return;
   29fe6:	e7eb      	b.n	29fc0 <k_mem_slab_free+0x36>

00029fe8 <setup_thread_stack>:
{
   29fe8:	b410      	push	{r4}
   29fea:	4603      	mov	r3, r0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   29fec:	3207      	adds	r2, #7
   29fee:	f022 0207 	bic.w	r2, r2, #7
   29ff2:	f102 0040 	add.w	r0, r2, #64	; 0x40

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   29ff6:	f101 0440 	add.w	r4, r1, #64	; 0x40
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   29ffa:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   29ffe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   2a002:	2200      	movs	r2, #0
   2a004:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
   2a008:	4408      	add	r0, r1
   2a00a:	bc10      	pop	{r4}
   2a00c:	4770      	bx	lr

0002a00e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2a00e:	f3ef 8005 	mrs	r0, IPSR
}
   2a012:	3800      	subs	r0, #0
   2a014:	bf18      	it	ne
   2a016:	2001      	movne	r0, #1
   2a018:	4770      	bx	lr

0002a01a <k_thread_name_get>:
}
   2a01a:	3078      	adds	r0, #120	; 0x78
   2a01c:	4770      	bx	lr

0002a01e <z_impl_k_thread_start>:
{
   2a01e:	b508      	push	{r3, lr}
	z_sched_start(thread);
   2a020:	f7f9 f926 	bl	23270 <z_sched_start>
}
   2a024:	bd08      	pop	{r3, pc}

0002a026 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   2a026:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   2a028:	2400      	movs	r4, #0
   2a02a:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   2a02c:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   2a02e:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   2a030:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   2a032:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   2a034:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   2a036:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   2a038:	bc10      	pop	{r4}
   2a03a:	4770      	bx	lr

0002a03c <z_impl_k_thread_create>:
{
   2a03c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a03e:	b087      	sub	sp, #28
   2a040:	4604      	mov	r4, r0
   2a042:	9e12      	ldr	r6, [sp, #72]	; 0x48
   2a044:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2a046:	2700      	movs	r7, #0
   2a048:	9705      	str	r7, [sp, #20]
   2a04a:	9f10      	ldr	r7, [sp, #64]	; 0x40
   2a04c:	9704      	str	r7, [sp, #16]
   2a04e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   2a050:	9703      	str	r7, [sp, #12]
   2a052:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   2a054:	9702      	str	r7, [sp, #8]
   2a056:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   2a058:	9701      	str	r7, [sp, #4]
   2a05a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2a05c:	9700      	str	r7, [sp, #0]
   2a05e:	f7f8 fbbd 	bl	227dc <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   2a062:	f1b5 3fff 	cmp.w	r5, #4294967295
   2a066:	bf08      	it	eq
   2a068:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   2a06c:	d102      	bne.n	2a074 <z_impl_k_thread_create+0x38>
}
   2a06e:	4620      	mov	r0, r4
   2a070:	b007      	add	sp, #28
   2a072:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   2a074:	4632      	mov	r2, r6
   2a076:	462b      	mov	r3, r5
   2a078:	4620      	mov	r0, r4
   2a07a:	f7f8 fba1 	bl	227c0 <schedule_new_thread>
   2a07e:	e7f6      	b.n	2a06e <z_impl_k_thread_create+0x32>

0002a080 <z_pm_save_idle_exit>:
{
   2a080:	b508      	push	{r3, lr}
	pm_system_resume();
   2a082:	f7ea fa7b 	bl	1457c <pm_system_resume>
	sys_clock_idle_exit();
   2a086:	f7ff f8f0 	bl	2926a <sys_clock_idle_exit>
}
   2a08a:	bd08      	pop	{r3, pc}

0002a08c <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   2a08c:	4288      	cmp	r0, r1
   2a08e:	da00      	bge.n	2a092 <new_prio_for_inheritance+0x6>
   2a090:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   2a092:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   2a096:	db01      	blt.n	2a09c <new_prio_for_inheritance+0x10>
   2a098:	4608      	mov	r0, r1
   2a09a:	4770      	bx	lr
   2a09c:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   2a0a0:	4770      	bx	lr

0002a0a2 <adjust_owner_prio>:
{
   2a0a2:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   2a0a4:	6880      	ldr	r0, [r0, #8]
   2a0a6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2a0aa:	428b      	cmp	r3, r1
   2a0ac:	d101      	bne.n	2a0b2 <adjust_owner_prio+0x10>
	return false;
   2a0ae:	2000      	movs	r0, #0
}
   2a0b0:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   2a0b2:	f7f9 f933 	bl	2331c <z_set_prio>
   2a0b6:	e7fb      	b.n	2a0b0 <adjust_owner_prio+0xe>

0002a0b8 <z_impl_k_mutex_init>:
{
   2a0b8:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2a0ba:	2000      	movs	r0, #0
   2a0bc:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   2a0be:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   2a0c0:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   2a0c2:	605b      	str	r3, [r3, #4]
}
   2a0c4:	4770      	bx	lr

0002a0c6 <sys_sflist_append>:
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2a0c6:	680b      	ldr	r3, [r1, #0]
   2a0c8:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2a0cc:	600b      	str	r3, [r1, #0]
	return list->tail;
   2a0ce:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2a0d0:	b132      	cbz	r2, 2a0e0 <sys_sflist_append+0x1a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2a0d2:	6813      	ldr	r3, [r2, #0]
   2a0d4:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2a0d8:	430b      	orrs	r3, r1
   2a0da:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2a0dc:	6041      	str	r1, [r0, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2a0de:	4770      	bx	lr
	list->tail = node;
   2a0e0:	6041      	str	r1, [r0, #4]
	list->head = node;
   2a0e2:	6001      	str	r1, [r0, #0]
}
   2a0e4:	4770      	bx	lr

0002a0e6 <sys_sflist_insert>:
Z_GENLIST_INSERT(sflist, sfnode)
   2a0e6:	b508      	push	{r3, lr}
   2a0e8:	b191      	cbz	r1, 2a110 <sys_sflist_insert+0x2a>
   2a0ea:	468c      	mov	ip, r1
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2a0ec:	680b      	ldr	r3, [r1, #0]
   2a0ee:	f023 0103 	bic.w	r1, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   2a0f2:	2b03      	cmp	r3, #3
   2a0f4:	d918      	bls.n	2a128 <sys_sflist_insert+0x42>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2a0f6:	6813      	ldr	r3, [r2, #0]
   2a0f8:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2a0fc:	430b      	orrs	r3, r1
   2a0fe:	6013      	str	r3, [r2, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2a100:	f8dc 3000 	ldr.w	r3, [ip]
   2a104:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2a108:	4313      	orrs	r3, r2
   2a10a:	f8cc 3000 	str.w	r3, [ip]
Z_GENLIST_INSERT(sflist, sfnode)
   2a10e:	bd08      	pop	{r3, pc}
	return list->head;
   2a110:	6801      	ldr	r1, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2a112:	6813      	ldr	r3, [r2, #0]
   2a114:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2a118:	430b      	orrs	r3, r1
   2a11a:	6013      	str	r3, [r2, #0]
	list->head = node;
   2a11c:	6002      	str	r2, [r0, #0]
	return list->tail;
   2a11e:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   2a120:	2b00      	cmp	r3, #0
   2a122:	d1f4      	bne.n	2a10e <sys_sflist_insert+0x28>
	list->tail = node;
   2a124:	6042      	str	r2, [r0, #4]
}
   2a126:	e7f2      	b.n	2a10e <sys_sflist_insert+0x28>
Z_GENLIST_INSERT(sflist, sfnode)
   2a128:	4611      	mov	r1, r2
   2a12a:	f7ff ffcc 	bl	2a0c6 <sys_sflist_append>
   2a12e:	e7ee      	b.n	2a10e <sys_sflist_insert+0x28>

0002a130 <prepare_thread_to_run>:
{
   2a130:	b508      	push	{r3, lr}
   2a132:	2200      	movs	r2, #0
   2a134:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
   2a138:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   2a13a:	f000 fa92 	bl	2a662 <z_ready_thread>
}
   2a13e:	bd08      	pop	{r3, pc}

0002a140 <queue_insert>:
{
   2a140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a144:	4604      	mov	r4, r0
   2a146:	460e      	mov	r6, r1
   2a148:	4615      	mov	r5, r2
   2a14a:	461f      	mov	r7, r3
   2a14c:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2a150:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   2a154:	f04f 0240 	mov.w	r2, #64	; 0x40
   2a158:	f3ef 8911 	mrs	r9, BASEPRI
   2a15c:	f382 8812 	msr	BASEPRI_MAX, r2
   2a160:	f3bf 8f6f 	isb	sy
   2a164:	46ca      	mov	sl, r9
	if (is_append) {
   2a166:	b103      	cbz	r3, 2a16a <queue_insert+0x2a>
	return list->tail;
   2a168:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2a16a:	4640      	mov	r0, r8
   2a16c:	f000 fb2e 	bl	2a7cc <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2a170:	b998      	cbnz	r0, 2a19a <queue_insert+0x5a>
	if (alloc) {
   2a172:	b9df      	cbnz	r7, 2a1ac <queue_insert+0x6c>
	node->next_and_flags = flags;
   2a174:	2300      	movs	r3, #0
   2a176:	602b      	str	r3, [r5, #0]
	sys_sflist_insert(&queue->data_q, prev, data);
   2a178:	462a      	mov	r2, r5
   2a17a:	4631      	mov	r1, r6
   2a17c:	4620      	mov	r0, r4
   2a17e:	f7ff ffb2 	bl	2a0e6 <sys_sflist_insert>
	z_handle_obj_poll_events(&queue->poll_events, state);
   2a182:	2104      	movs	r1, #4
   2a184:	f104 0010 	add.w	r0, r4, #16
   2a188:	f000 fdfd 	bl	2ad86 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   2a18c:	4649      	mov	r1, r9
   2a18e:	4640      	mov	r0, r8
   2a190:	f7f8 ff44 	bl	2301c <z_reschedule>
	return 0;
   2a194:	2000      	movs	r0, #0
}
   2a196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prepare_thread_to_run(first_pending_thread, data);
   2a19a:	4629      	mov	r1, r5
   2a19c:	f7ff ffc8 	bl	2a130 <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   2a1a0:	4649      	mov	r1, r9
   2a1a2:	4640      	mov	r0, r8
   2a1a4:	f7f8 ff3a 	bl	2301c <z_reschedule>
		return 0;
   2a1a8:	2000      	movs	r0, #0
   2a1aa:	e7f4      	b.n	2a196 <queue_insert+0x56>
	return z_thread_aligned_alloc(0, size);
   2a1ac:	2108      	movs	r1, #8
   2a1ae:	2000      	movs	r0, #0
   2a1b0:	f7f9 fdaa 	bl	23d08 <z_thread_aligned_alloc>
		if (anode == NULL) {
   2a1b4:	b120      	cbz	r0, 2a1c0 <queue_insert+0x80>
		anode->data = data;
   2a1b6:	6045      	str	r5, [r0, #4]
   2a1b8:	2201      	movs	r2, #1
   2a1ba:	6002      	str	r2, [r0, #0]
		data = anode;
   2a1bc:	4605      	mov	r5, r0
   2a1be:	e7db      	b.n	2a178 <queue_insert+0x38>
	__asm__ volatile(
   2a1c0:	f38a 8811 	msr	BASEPRI, sl
   2a1c4:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2a1c8:	f06f 000b 	mvn.w	r0, #11
   2a1cc:	e7e3      	b.n	2a196 <queue_insert+0x56>

0002a1ce <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2a1ce:	b160      	cbz	r0, 2a1ea <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2a1d0:	6803      	ldr	r3, [r0, #0]
   2a1d2:	f013 0f03 	tst.w	r3, #3
   2a1d6:	d008      	beq.n	2a1ea <z_queue_node_peek+0x1c>
{
   2a1d8:	b510      	push	{r4, lr}
		ret = anode->data;
   2a1da:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2a1dc:	b909      	cbnz	r1, 2a1e2 <z_queue_node_peek+0x14>
		ret = anode->data;
   2a1de:	4620      	mov	r0, r4
}
   2a1e0:	bd10      	pop	{r4, pc}
			k_free(anode);
   2a1e2:	f000 fe00 	bl	2ade6 <k_free>
		ret = anode->data;
   2a1e6:	4620      	mov	r0, r4
   2a1e8:	e7fa      	b.n	2a1e0 <z_queue_node_peek+0x12>
}
   2a1ea:	4770      	bx	lr

0002a1ec <z_impl_k_queue_init>:
	list->head = NULL;
   2a1ec:	2300      	movs	r3, #0
   2a1ee:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   2a1f0:	6043      	str	r3, [r0, #4]
   2a1f2:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   2a1f6:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   2a1f8:	60c3      	str	r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   2a1fa:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   2a1fe:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   2a200:	6143      	str	r3, [r0, #20]
}
   2a202:	4770      	bx	lr

0002a204 <k_queue_append>:
{
   2a204:	b500      	push	{lr}
   2a206:	b083      	sub	sp, #12
   2a208:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2a20a:	2301      	movs	r3, #1
   2a20c:	9300      	str	r3, [sp, #0]
   2a20e:	2300      	movs	r3, #0
   2a210:	4619      	mov	r1, r3
   2a212:	f7ff ff95 	bl	2a140 <queue_insert>
}
   2a216:	b003      	add	sp, #12
   2a218:	f85d fb04 	ldr.w	pc, [sp], #4

0002a21c <k_queue_prepend>:
{
   2a21c:	b500      	push	{lr}
   2a21e:	b083      	sub	sp, #12
   2a220:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2a222:	2100      	movs	r1, #0
   2a224:	9100      	str	r1, [sp, #0]
   2a226:	460b      	mov	r3, r1
   2a228:	f7ff ff8a 	bl	2a140 <queue_insert>
}
   2a22c:	b003      	add	sp, #12
   2a22e:	f85d fb04 	ldr.w	pc, [sp], #4

0002a232 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2a232:	b15a      	cbz	r2, 2a24c <z_impl_k_sem_init+0x1a>
   2a234:	428a      	cmp	r2, r1
   2a236:	d30c      	bcc.n	2a252 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   2a238:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   2a23a:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   2a23c:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   2a23e:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   2a240:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   2a244:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   2a246:	6143      	str	r3, [r0, #20]
	return 0;
   2a248:	2000      	movs	r0, #0
   2a24a:	4770      	bx	lr
		return -EINVAL;
   2a24c:	f06f 0015 	mvn.w	r0, #21
   2a250:	4770      	bx	lr
   2a252:	f06f 0015 	mvn.w	r0, #21
}
   2a256:	4770      	bx	lr

0002a258 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   2a258:	460b      	mov	r3, r1
   2a25a:	b139      	cbz	r1, 2a26c <sys_slist_remove+0x14>
	return node->next;
   2a25c:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   2a25e:	6019      	str	r1, [r3, #0]
	return list->tail;
   2a260:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2a262:	428a      	cmp	r2, r1
   2a264:	d009      	beq.n	2a27a <sys_slist_remove+0x22>
	parent->next = child;
   2a266:	2300      	movs	r3, #0
   2a268:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2a26a:	4770      	bx	lr
	return node->next;
   2a26c:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   2a26e:	6003      	str	r3, [r0, #0]
	return list->tail;
   2a270:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2a272:	428a      	cmp	r2, r1
   2a274:	d1f7      	bne.n	2a266 <sys_slist_remove+0xe>
	list->tail = node;
   2a276:	6043      	str	r3, [r0, #4]
}
   2a278:	e7f5      	b.n	2a266 <sys_slist_remove+0xe>
	list->tail = node;
   2a27a:	6043      	str	r3, [r0, #4]
}
   2a27c:	e7f3      	b.n	2a266 <sys_slist_remove+0xe>

0002a27e <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a27e:	b508      	push	{r3, lr}
   2a280:	460a      	mov	r2, r1
	return list->head;
   2a282:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a284:	2100      	movs	r1, #0
   2a286:	e001      	b.n	2a28c <sys_slist_find_and_remove+0xe>
   2a288:	4619      	mov	r1, r3
   2a28a:	681b      	ldr	r3, [r3, #0]
   2a28c:	b12b      	cbz	r3, 2a29a <sys_slist_find_and_remove+0x1c>
   2a28e:	4293      	cmp	r3, r2
   2a290:	d1fa      	bne.n	2a288 <sys_slist_find_and_remove+0xa>
   2a292:	f7ff ffe1 	bl	2a258 <sys_slist_remove>
   2a296:	2001      	movs	r0, #1
   2a298:	e000      	b.n	2a29c <sys_slist_find_and_remove+0x1e>
   2a29a:	2000      	movs	r0, #0
   2a29c:	bd08      	pop	{r3, pc}

0002a29e <queue_remove_locked>:
{
   2a29e:	b508      	push	{r3, lr}
	return (*flagp & BIT(bit)) != 0U;
   2a2a0:	68cb      	ldr	r3, [r1, #12]
	*flagp &= ~BIT(bit);
   2a2a2:	f023 0204 	bic.w	r2, r3, #4
   2a2a6:	60ca      	str	r2, [r1, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2a2a8:	f013 0f04 	tst.w	r3, #4
   2a2ac:	d100      	bne.n	2a2b0 <queue_remove_locked+0x12>
}
   2a2ae:	bd08      	pop	{r3, pc}
		(void)sys_slist_find_and_remove(&queue->pending, &work->node);
   2a2b0:	30b8      	adds	r0, #184	; 0xb8
   2a2b2:	f7ff ffe4 	bl	2a27e <sys_slist_find_and_remove>
}
   2a2b6:	e7fa      	b.n	2a2ae <queue_remove_locked+0x10>

0002a2b8 <cancel_async_locked>:
{
   2a2b8:	b510      	push	{r4, lr}
   2a2ba:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
   2a2bc:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2a2be:	f013 0f02 	tst.w	r3, #2
   2a2c2:	d009      	beq.n	2a2d8 <cancel_async_locked+0x20>
	return *flagp;
   2a2c4:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   2a2c6:	f013 000f 	ands.w	r0, r3, #15
   2a2ca:	d004      	beq.n	2a2d6 <cancel_async_locked+0x1e>
	*flagp |= BIT(bit);
   2a2cc:	f043 0202 	orr.w	r2, r3, #2
   2a2d0:	60e2      	str	r2, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2a2d2:	f040 0002 	orr.w	r0, r0, #2
}
   2a2d6:	bd10      	pop	{r4, pc}
		queue_remove_locked(work->queue, work);
   2a2d8:	4601      	mov	r1, r0
   2a2da:	6880      	ldr	r0, [r0, #8]
   2a2dc:	f7ff ffdf 	bl	2a29e <queue_remove_locked>
   2a2e0:	e7f0      	b.n	2a2c4 <cancel_async_locked+0xc>

0002a2e2 <notify_queue_locked>:
	if (queue != NULL) {
   2a2e2:	b130      	cbz	r0, 2a2f2 <notify_queue_locked+0x10>
{
   2a2e4:	b508      	push	{r3, lr}
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2a2e6:	2200      	movs	r2, #0
   2a2e8:	4611      	mov	r1, r2
   2a2ea:	30c0      	adds	r0, #192	; 0xc0
   2a2ec:	f000 faa4 	bl	2a838 <z_sched_wake>
}
   2a2f0:	bd08      	pop	{r3, pc}
	bool rv = false;
   2a2f2:	2000      	movs	r0, #0
}
   2a2f4:	4770      	bx	lr

0002a2f6 <submit_to_queue_locked>:
{
   2a2f6:	b570      	push	{r4, r5, r6, lr}
   2a2f8:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   2a2fa:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2a2fc:	f013 0f02 	tst.w	r3, #2
   2a300:	d122      	bne.n	2a348 <submit_to_queue_locked+0x52>
   2a302:	4604      	mov	r4, r0
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   2a304:	f013 0f04 	tst.w	r3, #4
   2a308:	d123      	bne.n	2a352 <submit_to_queue_locked+0x5c>
		if (*queuep == NULL) {
   2a30a:	680b      	ldr	r3, [r1, #0]
   2a30c:	b1ab      	cbz	r3, 2a33a <submit_to_queue_locked+0x44>
	return (*flagp & BIT(bit)) != 0U;
   2a30e:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   2a310:	f013 0f01 	tst.w	r3, #1
   2a314:	d014      	beq.n	2a340 <submit_to_queue_locked+0x4a>
			*queuep = work->queue;
   2a316:	68a3      	ldr	r3, [r4, #8]
   2a318:	602b      	str	r3, [r5, #0]
			ret = 2;
   2a31a:	2602      	movs	r6, #2
		int rc = queue_submit_locked(*queuep, work);
   2a31c:	4621      	mov	r1, r4
   2a31e:	6828      	ldr	r0, [r5, #0]
   2a320:	f7f8 fc92 	bl	22c48 <queue_submit_locked>
		if (rc < 0) {
   2a324:	2800      	cmp	r0, #0
   2a326:	db11      	blt.n	2a34c <submit_to_queue_locked+0x56>
	*flagp |= BIT(bit);
   2a328:	68e3      	ldr	r3, [r4, #12]
   2a32a:	f043 0304 	orr.w	r3, r3, #4
   2a32e:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   2a330:	682b      	ldr	r3, [r5, #0]
   2a332:	60a3      	str	r3, [r4, #8]
	if (ret <= 0) {
   2a334:	b136      	cbz	r6, 2a344 <submit_to_queue_locked+0x4e>
   2a336:	4630      	mov	r0, r6
	return ret;
   2a338:	e00a      	b.n	2a350 <submit_to_queue_locked+0x5a>
			*queuep = work->queue;
   2a33a:	6883      	ldr	r3, [r0, #8]
   2a33c:	600b      	str	r3, [r1, #0]
   2a33e:	e7e6      	b.n	2a30e <submit_to_queue_locked+0x18>
		ret = 1;
   2a340:	2601      	movs	r6, #1
   2a342:	e7eb      	b.n	2a31c <submit_to_queue_locked+0x26>
   2a344:	4630      	mov	r0, r6
   2a346:	e001      	b.n	2a34c <submit_to_queue_locked+0x56>
		ret = -EBUSY;
   2a348:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   2a34c:	2300      	movs	r3, #0
   2a34e:	602b      	str	r3, [r5, #0]
}
   2a350:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   2a352:	2000      	movs	r0, #0
   2a354:	e7fa      	b.n	2a34c <submit_to_queue_locked+0x56>

0002a356 <work_timeout>:
{
   2a356:	b510      	push	{r4, lr}
   2a358:	b082      	sub	sp, #8
   2a35a:	4603      	mov	r3, r0
	__asm__ volatile(
   2a35c:	f04f 0240 	mov.w	r2, #64	; 0x40
   2a360:	f3ef 8411 	mrs	r4, BASEPRI
   2a364:	f382 8812 	msr	BASEPRI_MAX, r2
   2a368:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   2a36c:	2200      	movs	r2, #0
   2a36e:	9201      	str	r2, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
   2a370:	f850 2c04 	ldr.w	r2, [r0, #-4]
	*flagp &= ~BIT(bit);
   2a374:	f022 0108 	bic.w	r1, r2, #8
   2a378:	f840 1c04 	str.w	r1, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2a37c:	f012 0f08 	tst.w	r2, #8
   2a380:	d105      	bne.n	2a38e <work_timeout+0x38>
	__asm__ volatile(
   2a382:	f384 8811 	msr	BASEPRI, r4
   2a386:	f3bf 8f6f 	isb	sy
}
   2a38a:	b002      	add	sp, #8
   2a38c:	bd10      	pop	{r4, pc}
   2a38e:	3810      	subs	r0, #16
		queue = dw->queue;
   2a390:	699b      	ldr	r3, [r3, #24]
   2a392:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2a394:	a901      	add	r1, sp, #4
   2a396:	f7ff ffae 	bl	2a2f6 <submit_to_queue_locked>
   2a39a:	e7f2      	b.n	2a382 <work_timeout+0x2c>

0002a39c <z_reschedule_unlocked>:
{
   2a39c:	b508      	push	{r3, lr}
	__asm__ volatile(
   2a39e:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a3a2:	f3ef 8011 	mrs	r0, BASEPRI
   2a3a6:	f383 8812 	msr	BASEPRI_MAX, r3
   2a3aa:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2a3ae:	f000 f906 	bl	2a5be <z_reschedule_irqlock>
}
   2a3b2:	bd08      	pop	{r3, pc}

0002a3b4 <cancel_sync_locked>:
{
   2a3b4:	b510      	push	{r4, lr}
   2a3b6:	4602      	mov	r2, r0
	return (*flagp & BIT(bit)) != 0U;
   2a3b8:	68c4      	ldr	r4, [r0, #12]
   2a3ba:	f014 0f02 	tst.w	r4, #2
   2a3be:	f3c4 0440 	ubfx	r4, r4, #1, #1
	if (ret) {
   2a3c2:	d101      	bne.n	2a3c8 <cancel_sync_locked+0x14>
}
   2a3c4:	4620      	mov	r0, r4
   2a3c6:	bd10      	pop	{r4, pc}
   2a3c8:	4608      	mov	r0, r1
		init_work_cancel(canceller, work);
   2a3ca:	4611      	mov	r1, r2
   2a3cc:	f7f8 fcaa 	bl	22d24 <init_work_cancel>
   2a3d0:	e7f8      	b.n	2a3c4 <cancel_sync_locked+0x10>

0002a3d2 <unschedule_locked>:
{
   2a3d2:	b508      	push	{r3, lr}
	return (*flagp & BIT(bit)) != 0U;
   2a3d4:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
   2a3d6:	f023 0208 	bic.w	r2, r3, #8
   2a3da:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2a3dc:	f013 0f08 	tst.w	r3, #8
   2a3e0:	d101      	bne.n	2a3e6 <unschedule_locked+0x14>
	bool ret = false;
   2a3e2:	2000      	movs	r0, #0
}
   2a3e4:	bd08      	pop	{r3, pc}
		z_abort_timeout(&dwork->timeout);
   2a3e6:	3010      	adds	r0, #16
   2a3e8:	f000 fa6b 	bl	2a8c2 <z_abort_timeout>
		ret = true;
   2a3ec:	2001      	movs	r0, #1
   2a3ee:	e7f9      	b.n	2a3e4 <unschedule_locked+0x12>

0002a3f0 <cancel_delayable_async_locked>:
{
   2a3f0:	b510      	push	{r4, lr}
   2a3f2:	4604      	mov	r4, r0
	(void)unschedule_locked(dwork);
   2a3f4:	f7ff ffed 	bl	2a3d2 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2a3f8:	4620      	mov	r0, r4
   2a3fa:	f7ff ff5d 	bl	2a2b8 <cancel_async_locked>
}
   2a3fe:	bd10      	pop	{r4, pc}

0002a400 <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2a400:	2300      	movs	r3, #0
   2a402:	6003      	str	r3, [r0, #0]
   2a404:	6043      	str	r3, [r0, #4]
   2a406:	6083      	str	r3, [r0, #8]
   2a408:	60c3      	str	r3, [r0, #12]
   2a40a:	6041      	str	r1, [r0, #4]
}
   2a40c:	4770      	bx	lr

0002a40e <z_work_submit_to_queue>:
{
   2a40e:	b510      	push	{r4, lr}
   2a410:	b082      	sub	sp, #8
   2a412:	9001      	str	r0, [sp, #4]
   2a414:	4608      	mov	r0, r1
   2a416:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a41a:	f3ef 8411 	mrs	r4, BASEPRI
   2a41e:	f383 8812 	msr	BASEPRI_MAX, r3
   2a422:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   2a426:	a901      	add	r1, sp, #4
   2a428:	f7ff ff65 	bl	2a2f6 <submit_to_queue_locked>
	__asm__ volatile(
   2a42c:	f384 8811 	msr	BASEPRI, r4
   2a430:	f3bf 8f6f 	isb	sy
}
   2a434:	b002      	add	sp, #8
   2a436:	bd10      	pop	{r4, pc}

0002a438 <k_work_submit_to_queue>:
{
   2a438:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   2a43a:	f7ff ffe8 	bl	2a40e <z_work_submit_to_queue>
	if (ret > 0) {
   2a43e:	1e04      	subs	r4, r0, #0
   2a440:	dc01      	bgt.n	2a446 <k_work_submit_to_queue+0xe>
}
   2a442:	4620      	mov	r0, r4
   2a444:	bd10      	pop	{r4, pc}
		z_reschedule_unlocked();
   2a446:	f7ff ffa9 	bl	2a39c <z_reschedule_unlocked>
	return ret;
   2a44a:	e7fa      	b.n	2a442 <k_work_submit_to_queue+0xa>

0002a44c <k_work_queue_init>:
{
   2a44c:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   2a44e:	22d8      	movs	r2, #216	; 0xd8
   2a450:	2100      	movs	r1, #0
   2a452:	f7fb fe17 	bl	26084 <memset>
}
   2a456:	bd08      	pop	{r3, pc}

0002a458 <k_work_init_delayable>:
{
   2a458:	b538      	push	{r3, r4, r5, lr}
   2a45a:	4604      	mov	r4, r0
   2a45c:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   2a45e:	2230      	movs	r2, #48	; 0x30
   2a460:	2100      	movs	r1, #0
   2a462:	f7fb fe0f 	bl	26084 <memset>
   2a466:	6065      	str	r5, [r4, #4]
   2a468:	f44f 7380 	mov.w	r3, #256	; 0x100
   2a46c:	60e3      	str	r3, [r4, #12]
}
   2a46e:	bd38      	pop	{r3, r4, r5, pc}

0002a470 <k_work_delayable_busy_get>:
	__asm__ volatile(
   2a470:	f04f 0240 	mov.w	r2, #64	; 0x40
   2a474:	f3ef 8311 	mrs	r3, BASEPRI
   2a478:	f382 8812 	msr	BASEPRI_MAX, r2
   2a47c:	f3bf 8f6f 	isb	sy
	return *flagp;
   2a480:	68c0      	ldr	r0, [r0, #12]
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   2a482:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   2a486:	f383 8811 	msr	BASEPRI, r3
   2a48a:	f3bf 8f6f 	isb	sy
}
   2a48e:	4770      	bx	lr

0002a490 <k_work_schedule_for_queue>:
{
   2a490:	b510      	push	{r4, lr}
   2a492:	b082      	sub	sp, #8
   2a494:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   2a496:	f04f 0040 	mov.w	r0, #64	; 0x40
   2a49a:	f3ef 8411 	mrs	r4, BASEPRI
   2a49e:	f380 8812 	msr	BASEPRI_MAX, r0
   2a4a2:	f3bf 8f6f 	isb	sy
	return *flagp;
   2a4a6:	68c8      	ldr	r0, [r1, #12]
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   2a4a8:	f010 0f0e 	tst.w	r0, #14
   2a4ac:	d006      	beq.n	2a4bc <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   2a4ae:	2000      	movs	r0, #0
	__asm__ volatile(
   2a4b0:	f384 8811 	msr	BASEPRI, r4
   2a4b4:	f3bf 8f6f 	isb	sy
}
   2a4b8:	b002      	add	sp, #8
   2a4ba:	bd10      	pop	{r4, pc}
		ret = schedule_for_queue_locked(&queue, dwork, delay);
   2a4bc:	a801      	add	r0, sp, #4
   2a4be:	f7f8 fcc1 	bl	22e44 <schedule_for_queue_locked>
   2a4c2:	e7f5      	b.n	2a4b0 <k_work_schedule_for_queue+0x20>

0002a4c4 <k_work_reschedule_for_queue>:
{
   2a4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a4c6:	b083      	sub	sp, #12
   2a4c8:	9001      	str	r0, [sp, #4]
   2a4ca:	460c      	mov	r4, r1
   2a4cc:	4616      	mov	r6, r2
   2a4ce:	461d      	mov	r5, r3
	__asm__ volatile(
   2a4d0:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a4d4:	f3ef 8711 	mrs	r7, BASEPRI
   2a4d8:	f383 8812 	msr	BASEPRI_MAX, r3
   2a4dc:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   2a4e0:	4608      	mov	r0, r1
   2a4e2:	f7ff ff76 	bl	2a3d2 <unschedule_locked>
	ret = schedule_for_queue_locked(&queue, dwork, delay);
   2a4e6:	4632      	mov	r2, r6
   2a4e8:	462b      	mov	r3, r5
   2a4ea:	4621      	mov	r1, r4
   2a4ec:	a801      	add	r0, sp, #4
   2a4ee:	f7f8 fca9 	bl	22e44 <schedule_for_queue_locked>
	__asm__ volatile(
   2a4f2:	f387 8811 	msr	BASEPRI, r7
   2a4f6:	f3bf 8f6f 	isb	sy
}
   2a4fa:	b003      	add	sp, #12
   2a4fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a4fe <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2a4fe:	b510      	push	{r4, lr}
	__asm__ volatile(
   2a500:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a504:	f3ef 8411 	mrs	r4, BASEPRI
   2a508:	f383 8812 	msr	BASEPRI_MAX, r3
   2a50c:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(dwork != NULL);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable, dwork);

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);
   2a510:	f7ff ff6e 	bl	2a3f0 <cancel_delayable_async_locked>
	__asm__ volatile(
   2a514:	f384 8811 	msr	BASEPRI, r4
   2a518:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2a51c:	bd10      	pop	{r4, pc}

0002a51e <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   2a51e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a520:	460d      	mov	r5, r1
	__asm__ volatile(
   2a522:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a526:	f3ef 8611 	mrs	r6, BASEPRI
   2a52a:	f383 8812 	msr	BASEPRI_MAX, r3
   2a52e:	f3bf 8f6f 	isb	sy
	return *flagp;
   2a532:	68c3      	ldr	r3, [r0, #12]
   2a534:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2a538:	2b00      	cmp	r3, #0
   2a53a:	bf14      	ite	ne
   2a53c:	2701      	movne	r7, #1
   2a53e:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   2a540:	d107      	bne.n	2a552 <k_work_cancel_delayable_sync+0x34>
	bool need_wait = false;
   2a542:	2000      	movs	r0, #0
	__asm__ volatile(
   2a544:	f386 8811 	msr	BASEPRI, r6
   2a548:	f3bf 8f6f 	isb	sy
		need_wait = cancel_sync_locked(&dwork->work, canceller);
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   2a54c:	b948      	cbnz	r0, 2a562 <k_work_cancel_delayable_sync+0x44>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2a54e:	4638      	mov	r0, r7
   2a550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a552:	4604      	mov	r4, r0
		(void)cancel_delayable_async_locked(dwork);
   2a554:	f7ff ff4c 	bl	2a3f0 <cancel_delayable_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   2a558:	4629      	mov	r1, r5
   2a55a:	4620      	mov	r0, r4
   2a55c:	f7ff ff2a 	bl	2a3b4 <cancel_sync_locked>
   2a560:	e7f0      	b.n	2a544 <k_work_cancel_delayable_sync+0x26>
		k_sem_take(&canceller->sem, K_FOREVER);
   2a562:	f105 0008 	add.w	r0, r5, #8
   2a566:	f04f 32ff 	mov.w	r2, #4294967295
   2a56a:	f04f 33ff 	mov.w	r3, #4294967295
   2a56e:	f7f8 fb29 	bl	22bc4 <z_impl_k_sem_take>
   2a572:	e7ec      	b.n	2a54e <k_work_cancel_delayable_sync+0x30>

0002a574 <thread_active_elsewhere>:
}
   2a574:	2000      	movs	r0, #0
   2a576:	4770      	bx	lr

0002a578 <pended_on_thread>:
}
   2a578:	6880      	ldr	r0, [r0, #8]
   2a57a:	4770      	bx	lr

0002a57c <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2a57c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2a580:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2a584:	4283      	cmp	r3, r0
   2a586:	d001      	beq.n	2a58c <z_sched_prio_cmp+0x10>
		return b2 - b1;
   2a588:	1ac0      	subs	r0, r0, r3
   2a58a:	4770      	bx	lr
	return 0;
   2a58c:	2000      	movs	r0, #0
}
   2a58e:	4770      	bx	lr

0002a590 <z_unpend_thread_no_timeout>:
{
   2a590:	b538      	push	{r3, r4, r5, lr}
   2a592:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
   2a594:	2300      	movs	r3, #0
	__asm__ volatile(
   2a596:	f04f 0240 	mov.w	r2, #64	; 0x40
   2a59a:	f3ef 8411 	mrs	r4, BASEPRI
   2a59e:	f382 8812 	msr	BASEPRI_MAX, r2
   2a5a2:	f3bf 8f6f 	isb	sy
   2a5a6:	e007      	b.n	2a5b8 <z_unpend_thread_no_timeout+0x28>
		unpend_thread_no_timeout(thread);
   2a5a8:	4628      	mov	r0, r5
   2a5aa:	f000 f82a 	bl	2a602 <unpend_thread_no_timeout>
	__asm__ volatile(
   2a5ae:	f384 8811 	msr	BASEPRI, r4
   2a5b2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2a5b6:	2301      	movs	r3, #1
   2a5b8:	2b00      	cmp	r3, #0
   2a5ba:	d0f5      	beq.n	2a5a8 <z_unpend_thread_no_timeout+0x18>
}
   2a5bc:	bd38      	pop	{r3, r4, r5, pc}

0002a5be <z_reschedule_irqlock>:
{
   2a5be:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2a5c0:	4603      	mov	r3, r0
   2a5c2:	b928      	cbnz	r0, 2a5d0 <z_reschedule_irqlock+0x12>
   2a5c4:	f3ef 8205 	mrs	r2, IPSR
   2a5c8:	b912      	cbnz	r2, 2a5d0 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   2a5ca:	f7ea fb45 	bl	14c58 <arch_swap>
	return ret;
   2a5ce:	e003      	b.n	2a5d8 <z_reschedule_irqlock+0x1a>
   2a5d0:	f383 8811 	msr	BASEPRI, r3
   2a5d4:	f3bf 8f6f 	isb	sy
}
   2a5d8:	bd08      	pop	{r3, pc}

0002a5da <z_reschedule_unlocked>:
{
   2a5da:	b508      	push	{r3, lr}
	__asm__ volatile(
   2a5dc:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a5e0:	f3ef 8011 	mrs	r0, BASEPRI
   2a5e4:	f383 8812 	msr	BASEPRI_MAX, r3
   2a5e8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2a5ec:	f7ff ffe7 	bl	2a5be <z_reschedule_irqlock>
}
   2a5f0:	bd08      	pop	{r3, pc}

0002a5f2 <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
   2a5f2:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   2a5f4:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
   2a5f6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2a5f8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2a5fa:	2300      	movs	r3, #0
   2a5fc:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   2a5fe:	604b      	str	r3, [r1, #4]
}
   2a600:	4770      	bx	lr

0002a602 <unpend_thread_no_timeout>:
{
   2a602:	b510      	push	{r4, lr}
   2a604:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2a606:	f7ff ffb7 	bl	2a578 <pended_on_thread>
   2a60a:	4621      	mov	r1, r4
   2a60c:	f7ff fff1 	bl	2a5f2 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2a610:	7b63      	ldrb	r3, [r4, #13]
   2a612:	f023 0302 	bic.w	r3, r3, #2
   2a616:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2a618:	2300      	movs	r3, #0
   2a61a:	60a3      	str	r3, [r4, #8]
}
   2a61c:	bd10      	pop	{r4, pc}

0002a61e <z_unpend_thread>:
{
   2a61e:	b538      	push	{r3, r4, r5, lr}
   2a620:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   2a622:	2300      	movs	r3, #0
   2a624:	f04f 0240 	mov.w	r2, #64	; 0x40
   2a628:	f3ef 8511 	mrs	r5, BASEPRI
   2a62c:	f382 8812 	msr	BASEPRI_MAX, r2
   2a630:	f3bf 8f6f 	isb	sy
   2a634:	e007      	b.n	2a646 <z_unpend_thread+0x28>
		unpend_thread_no_timeout(thread);
   2a636:	4620      	mov	r0, r4
   2a638:	f7ff ffe3 	bl	2a602 <unpend_thread_no_timeout>
	__asm__ volatile(
   2a63c:	f385 8811 	msr	BASEPRI, r5
   2a640:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2a644:	2301      	movs	r3, #1
   2a646:	2b00      	cmp	r3, #0
   2a648:	d0f5      	beq.n	2a636 <z_unpend_thread+0x18>
	return z_abort_timeout(&thread->base.timeout);
   2a64a:	f104 0018 	add.w	r0, r4, #24
   2a64e:	f000 f938 	bl	2a8c2 <z_abort_timeout>
}
   2a652:	bd38      	pop	{r3, r4, r5, pc}

0002a654 <z_priq_dumb_best>:
{
   2a654:	4603      	mov	r3, r0
	return list->head == list;
   2a656:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a658:	4283      	cmp	r3, r0
   2a65a:	d000      	beq.n	2a65e <z_priq_dumb_best+0xa>
}
   2a65c:	4770      	bx	lr
	struct k_thread *thread = NULL;
   2a65e:	2000      	movs	r0, #0
	return thread;
   2a660:	e7fc      	b.n	2a65c <z_priq_dumb_best+0x8>

0002a662 <z_ready_thread>:
{
   2a662:	b538      	push	{r3, r4, r5, lr}
   2a664:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   2a666:	2300      	movs	r3, #0
	__asm__ volatile(
   2a668:	f04f 0240 	mov.w	r2, #64	; 0x40
   2a66c:	f3ef 8511 	mrs	r5, BASEPRI
   2a670:	f382 8812 	msr	BASEPRI_MAX, r2
   2a674:	f3bf 8f6f 	isb	sy
   2a678:	e004      	b.n	2a684 <z_ready_thread+0x22>
	__asm__ volatile(
   2a67a:	f385 8811 	msr	BASEPRI, r5
   2a67e:	f3bf 8f6f 	isb	sy
   2a682:	2301      	movs	r3, #1
   2a684:	b943      	cbnz	r3, 2a698 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   2a686:	4620      	mov	r0, r4
   2a688:	f7ff ff74 	bl	2a574 <thread_active_elsewhere>
   2a68c:	2800      	cmp	r0, #0
   2a68e:	d1f4      	bne.n	2a67a <z_ready_thread+0x18>
			ready_thread(thread);
   2a690:	4620      	mov	r0, r4
   2a692:	f7f8 fdb1 	bl	231f8 <ready_thread>
   2a696:	e7f0      	b.n	2a67a <z_ready_thread+0x18>
}
   2a698:	bd38      	pop	{r3, r4, r5, pc}

0002a69a <z_thread_timeout>:
{
   2a69a:	b570      	push	{r4, r5, r6, lr}
   2a69c:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   2a69e:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
   2a6a2:	2300      	movs	r3, #0
	__asm__ volatile(
   2a6a4:	f04f 0240 	mov.w	r2, #64	; 0x40
   2a6a8:	f3ef 8511 	mrs	r5, BASEPRI
   2a6ac:	f382 8812 	msr	BASEPRI_MAX, r2
   2a6b0:	f3bf 8f6f 	isb	sy
   2a6b4:	e011      	b.n	2a6da <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2a6b6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   2a6ba:	f023 0204 	bic.w	r2, r3, #4
   2a6be:	f804 2c0b 	strb.w	r2, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2a6c2:	f023 0314 	bic.w	r3, r3, #20
   2a6c6:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   2a6ca:	4630      	mov	r0, r6
   2a6cc:	f7f8 fd94 	bl	231f8 <ready_thread>
	__asm__ volatile(
   2a6d0:	f385 8811 	msr	BASEPRI, r5
   2a6d4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2a6d8:	2301      	movs	r3, #1
   2a6da:	b963      	cbnz	r3, 2a6f6 <z_thread_timeout+0x5c>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   2a6dc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   2a6e0:	f013 0f28 	tst.w	r3, #40	; 0x28
   2a6e4:	d1f4      	bne.n	2a6d0 <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
   2a6e6:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2a6ea:	2b00      	cmp	r3, #0
   2a6ec:	d0e3      	beq.n	2a6b6 <z_thread_timeout+0x1c>
				unpend_thread_no_timeout(thread);
   2a6ee:	4630      	mov	r0, r6
   2a6f0:	f7ff ff87 	bl	2a602 <unpend_thread_no_timeout>
   2a6f4:	e7df      	b.n	2a6b6 <z_thread_timeout+0x1c>
}
   2a6f6:	bd70      	pop	{r4, r5, r6, pc}

0002a6f8 <unpend_all>:
{
   2a6f8:	b538      	push	{r3, r4, r5, lr}
   2a6fa:	4605      	mov	r5, r0
	return list->head == list;
   2a6fc:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a6fe:	42a5      	cmp	r5, r4
   2a700:	d00e      	beq.n	2a720 <unpend_all+0x28>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2a702:	b16c      	cbz	r4, 2a720 <unpend_all+0x28>
		unpend_thread_no_timeout(thread);
   2a704:	4620      	mov	r0, r4
   2a706:	f7ff ff7c 	bl	2a602 <unpend_thread_no_timeout>
   2a70a:	f104 0018 	add.w	r0, r4, #24
   2a70e:	f000 f8d8 	bl	2a8c2 <z_abort_timeout>
   2a712:	2300      	movs	r3, #0
   2a714:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		ready_thread(thread);
   2a718:	4620      	mov	r0, r4
   2a71a:	f7f8 fd6d 	bl	231f8 <ready_thread>
   2a71e:	e7ed      	b.n	2a6fc <unpend_all+0x4>
}
   2a720:	bd38      	pop	{r3, r4, r5, pc}

0002a722 <add_to_waitq_locked>:
{
   2a722:	b570      	push	{r4, r5, r6, lr}
   2a724:	4605      	mov	r5, r0
   2a726:	460e      	mov	r6, r1
	unready_thread(thread);
   2a728:	f7f8 fdc0 	bl	232ac <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2a72c:	7b6b      	ldrb	r3, [r5, #13]
   2a72e:	f043 0302 	orr.w	r3, r3, #2
   2a732:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   2a734:	b1fe      	cbz	r6, 2a776 <add_to_waitq_locked+0x54>
		thread->base.pended_on = wait_q;
   2a736:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   2a738:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a73a:	42a6      	cmp	r6, r4
   2a73c:	d108      	bne.n	2a750 <add_to_waitq_locked+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2a73e:	2400      	movs	r4, #0
   2a740:	e006      	b.n	2a750 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const prev = successor->prev;
   2a742:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   2a744:	606b      	str	r3, [r5, #4]
	node->next = successor;
   2a746:	602c      	str	r4, [r5, #0]
	prev->next = node;
   2a748:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2a74a:	6065      	str	r5, [r4, #4]
}
   2a74c:	e013      	b.n	2a776 <add_to_waitq_locked+0x54>
   2a74e:	2400      	movs	r4, #0
   2a750:	b164      	cbz	r4, 2a76c <add_to_waitq_locked+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2a752:	4621      	mov	r1, r4
   2a754:	4628      	mov	r0, r5
   2a756:	f7ff ff11 	bl	2a57c <z_sched_prio_cmp>
   2a75a:	2800      	cmp	r0, #0
   2a75c:	dcf1      	bgt.n	2a742 <add_to_waitq_locked+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a75e:	2c00      	cmp	r4, #0
   2a760:	d0f6      	beq.n	2a750 <add_to_waitq_locked+0x2e>
	return (node == list->tail) ? NULL : node->next;
   2a762:	6873      	ldr	r3, [r6, #4]
   2a764:	429c      	cmp	r4, r3
   2a766:	d0f2      	beq.n	2a74e <add_to_waitq_locked+0x2c>
   2a768:	6824      	ldr	r4, [r4, #0]
   2a76a:	e7f1      	b.n	2a750 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const tail = list->tail;
   2a76c:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   2a76e:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   2a770:	606b      	str	r3, [r5, #4]
	tail->next = node;
   2a772:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2a774:	6075      	str	r5, [r6, #4]
}
   2a776:	bd70      	pop	{r4, r5, r6, pc}

0002a778 <pend_locked>:
{
   2a778:	b570      	push	{r4, r5, r6, lr}
   2a77a:	4604      	mov	r4, r0
   2a77c:	4616      	mov	r6, r2
   2a77e:	461d      	mov	r5, r3
	add_to_waitq_locked(thread, wait_q);
   2a780:	f7ff ffcf 	bl	2a722 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
   2a784:	4632      	mov	r2, r6
   2a786:	462b      	mov	r3, r5
   2a788:	4620      	mov	r0, r4
   2a78a:	f7f8 fbe9 	bl	22f60 <add_thread_timeout>
}
   2a78e:	bd70      	pop	{r4, r5, r6, pc}

0002a790 <z_unpend1_no_timeout>:
{
   2a790:	b570      	push	{r4, r5, r6, lr}
   2a792:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   2a794:	2300      	movs	r3, #0
	__asm__ volatile(
   2a796:	f04f 0240 	mov.w	r2, #64	; 0x40
   2a79a:	f3ef 8511 	mrs	r5, BASEPRI
   2a79e:	f382 8812 	msr	BASEPRI_MAX, r2
   2a7a2:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   2a7a6:	461c      	mov	r4, r3
   2a7a8:	e004      	b.n	2a7b4 <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
   2a7aa:	f385 8811 	msr	BASEPRI, r5
   2a7ae:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2a7b2:	2301      	movs	r3, #1
   2a7b4:	b943      	cbnz	r3, 2a7c8 <z_unpend1_no_timeout+0x38>
		thread = _priq_wait_best(&wait_q->waitq);
   2a7b6:	4630      	mov	r0, r6
   2a7b8:	f7ff ff4c 	bl	2a654 <z_priq_dumb_best>
		if (thread != NULL) {
   2a7bc:	4604      	mov	r4, r0
   2a7be:	2800      	cmp	r0, #0
   2a7c0:	d0f3      	beq.n	2a7aa <z_unpend1_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
   2a7c2:	f7ff ff1e 	bl	2a602 <unpend_thread_no_timeout>
   2a7c6:	e7f0      	b.n	2a7aa <z_unpend1_no_timeout+0x1a>
}
   2a7c8:	4620      	mov	r0, r4
   2a7ca:	bd70      	pop	{r4, r5, r6, pc}

0002a7cc <z_unpend_first_thread>:
{
   2a7cc:	b570      	push	{r4, r5, r6, lr}
   2a7ce:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   2a7d0:	2300      	movs	r3, #0
	__asm__ volatile(
   2a7d2:	f04f 0240 	mov.w	r2, #64	; 0x40
   2a7d6:	f3ef 8511 	mrs	r5, BASEPRI
   2a7da:	f382 8812 	msr	BASEPRI_MAX, r2
   2a7de:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   2a7e2:	461c      	mov	r4, r3
   2a7e4:	e004      	b.n	2a7f0 <z_unpend_first_thread+0x24>
	__asm__ volatile(
   2a7e6:	f385 8811 	msr	BASEPRI, r5
   2a7ea:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2a7ee:	2301      	movs	r3, #1
   2a7f0:	b963      	cbnz	r3, 2a80c <z_unpend_first_thread+0x40>
		thread = _priq_wait_best(&wait_q->waitq);
   2a7f2:	4630      	mov	r0, r6
   2a7f4:	f7ff ff2e 	bl	2a654 <z_priq_dumb_best>
		if (thread != NULL) {
   2a7f8:	4604      	mov	r4, r0
   2a7fa:	2800      	cmp	r0, #0
   2a7fc:	d0f3      	beq.n	2a7e6 <z_unpend_first_thread+0x1a>
			unpend_thread_no_timeout(thread);
   2a7fe:	f7ff ff00 	bl	2a602 <unpend_thread_no_timeout>
   2a802:	f104 0018 	add.w	r0, r4, #24
   2a806:	f000 f85c 	bl	2a8c2 <z_abort_timeout>
   2a80a:	e7ec      	b.n	2a7e6 <z_unpend_first_thread+0x1a>
}
   2a80c:	4620      	mov	r0, r4
   2a80e:	bd70      	pop	{r4, r5, r6, pc}

0002a810 <z_unpend_all>:
{
   2a810:	b538      	push	{r3, r4, r5, lr}
   2a812:	4605      	mov	r5, r0
	int need_sched = 0;
   2a814:	2000      	movs	r0, #0
	return list->head == list;
   2a816:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a818:	42a5      	cmp	r5, r4
   2a81a:	d008      	beq.n	2a82e <z_unpend_all+0x1e>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2a81c:	b13c      	cbz	r4, 2a82e <z_unpend_all+0x1e>
		z_unpend_thread(thread);
   2a81e:	4620      	mov	r0, r4
   2a820:	f7ff fefd 	bl	2a61e <z_unpend_thread>
		z_ready_thread(thread);
   2a824:	4620      	mov	r0, r4
   2a826:	f7ff ff1c 	bl	2a662 <z_ready_thread>
		need_sched = 1;
   2a82a:	2001      	movs	r0, #1
   2a82c:	e7f3      	b.n	2a816 <z_unpend_all+0x6>
}
   2a82e:	bd38      	pop	{r3, r4, r5, pc}

0002a830 <init_ready_q>:
	sys_dlist_init(&rq->runq);
   2a830:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   2a832:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   2a834:	6083      	str	r3, [r0, #8]
}
   2a836:	4770      	bx	lr

0002a838 <z_sched_wake>:
{
   2a838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a83c:	4606      	mov	r6, r0
   2a83e:	4688      	mov	r8, r1
   2a840:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   2a842:	2300      	movs	r3, #0
	__asm__ volatile(
   2a844:	f04f 0240 	mov.w	r2, #64	; 0x40
   2a848:	f3ef 8511 	mrs	r5, BASEPRI
   2a84c:	f382 8812 	msr	BASEPRI_MAX, r2
   2a850:	f3bf 8f6f 	isb	sy
	bool ret = false;
   2a854:	4699      	mov	r9, r3
   2a856:	e004      	b.n	2a862 <z_sched_wake+0x2a>
	__asm__ volatile(
   2a858:	f385 8811 	msr	BASEPRI, r5
   2a85c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2a860:	2301      	movs	r3, #1
   2a862:	b9a3      	cbnz	r3, 2a88e <z_sched_wake+0x56>
		thread = _priq_wait_best(&wait_q->waitq);
   2a864:	4630      	mov	r0, r6
   2a866:	f7ff fef5 	bl	2a654 <z_priq_dumb_best>
		if (thread != NULL) {
   2a86a:	4604      	mov	r4, r0
   2a86c:	2800      	cmp	r0, #0
   2a86e:	d0f3      	beq.n	2a858 <z_sched_wake+0x20>
   2a870:	f8c0 80b0 	str.w	r8, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
   2a874:	6147      	str	r7, [r0, #20]
			unpend_thread_no_timeout(thread);
   2a876:	f7ff fec4 	bl	2a602 <unpend_thread_no_timeout>
   2a87a:	f104 0018 	add.w	r0, r4, #24
   2a87e:	f000 f820 	bl	2a8c2 <z_abort_timeout>
			ready_thread(thread);
   2a882:	4620      	mov	r0, r4
   2a884:	f7f8 fcb8 	bl	231f8 <ready_thread>
			ret = true;
   2a888:	f04f 0901 	mov.w	r9, #1
   2a88c:	e7e4      	b.n	2a858 <z_sched_wake+0x20>
}
   2a88e:	4648      	mov	r0, r9
   2a890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002a894 <remove_timeout>:
{
   2a894:	b510      	push	{r4, lr}
   2a896:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   2a898:	f7f8 ff9e 	bl	237d8 <next>
   2a89c:	b148      	cbz	r0, 2a8b2 <remove_timeout+0x1e>
   2a89e:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   2a8a0:	6903      	ldr	r3, [r0, #16]
   2a8a2:	6941      	ldr	r1, [r0, #20]
   2a8a4:	6920      	ldr	r0, [r4, #16]
   2a8a6:	181b      	adds	r3, r3, r0
   2a8a8:	6960      	ldr	r0, [r4, #20]
   2a8aa:	eb41 0100 	adc.w	r1, r1, r0
   2a8ae:	6113      	str	r3, [r2, #16]
   2a8b0:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   2a8b2:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   2a8b4:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   2a8b6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2a8b8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2a8ba:	2300      	movs	r3, #0
   2a8bc:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   2a8be:	6063      	str	r3, [r4, #4]
}
   2a8c0:	bd10      	pop	{r4, pc}

0002a8c2 <z_abort_timeout>:
{
   2a8c2:	b570      	push	{r4, r5, r6, lr}
   2a8c4:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   2a8c6:	2300      	movs	r3, #0
	__asm__ volatile(
   2a8c8:	f04f 0240 	mov.w	r2, #64	; 0x40
   2a8cc:	f3ef 8611 	mrs	r6, BASEPRI
   2a8d0:	f382 8812 	msr	BASEPRI_MAX, r2
   2a8d4:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   2a8d8:	f06f 0015 	mvn.w	r0, #21
   2a8dc:	e004      	b.n	2a8e8 <z_abort_timeout+0x26>
	__asm__ volatile(
   2a8de:	f386 8811 	msr	BASEPRI, r6
   2a8e2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   2a8e6:	2301      	movs	r3, #1
   2a8e8:	461d      	mov	r5, r3
   2a8ea:	b93b      	cbnz	r3, 2a8fc <z_abort_timeout+0x3a>
	return node->next != NULL;
   2a8ec:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   2a8ee:	2b00      	cmp	r3, #0
   2a8f0:	d0f5      	beq.n	2a8de <z_abort_timeout+0x1c>
			remove_timeout(to);
   2a8f2:	4620      	mov	r0, r4
   2a8f4:	f7ff ffce 	bl	2a894 <remove_timeout>
			ret = 0;
   2a8f8:	4628      	mov	r0, r5
   2a8fa:	e7f0      	b.n	2a8de <z_abort_timeout+0x1c>
}
   2a8fc:	bd70      	pop	{r4, r5, r6, pc}

0002a8fe <z_get_next_timeout_expiry>:
{
   2a8fe:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   2a900:	2300      	movs	r3, #0
	__asm__ volatile(
   2a902:	f04f 0240 	mov.w	r2, #64	; 0x40
   2a906:	f3ef 8411 	mrs	r4, BASEPRI
   2a90a:	f382 8812 	msr	BASEPRI_MAX, r2
   2a90e:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   2a912:	f04f 30ff 	mov.w	r0, #4294967295
   2a916:	e006      	b.n	2a926 <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
   2a918:	f7f8 ff76 	bl	23808 <next_timeout>
	__asm__ volatile(
   2a91c:	f384 8811 	msr	BASEPRI, r4
   2a920:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   2a924:	2301      	movs	r3, #1
   2a926:	2b00      	cmp	r3, #0
   2a928:	d0f6      	beq.n	2a918 <z_get_next_timeout_expiry+0x1a>
}
   2a92a:	bd10      	pop	{r4, pc}

0002a92c <z_set_timeout_expiry>:
{
   2a92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a92e:	4606      	mov	r6, r0
   2a930:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   2a932:	2300      	movs	r3, #0
	__asm__ volatile(
   2a934:	f04f 0240 	mov.w	r2, #64	; 0x40
   2a938:	f3ef 8511 	mrs	r5, BASEPRI
   2a93c:	f382 8812 	msr	BASEPRI_MAX, r2
   2a940:	f3bf 8f6f 	isb	sy
   2a944:	e00a      	b.n	2a95c <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   2a946:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   2a948:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2a94c:	2801      	cmp	r0, #1
   2a94e:	dd00      	ble.n	2a952 <z_set_timeout_expiry+0x26>
   2a950:	b97c      	cbnz	r4, 2a972 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   2a952:	f385 8811 	msr	BASEPRI, r5
   2a956:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   2a95a:	2301      	movs	r3, #1
   2a95c:	461c      	mov	r4, r3
   2a95e:	b97b      	cbnz	r3, 2a980 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   2a960:	f7f8 ff52 	bl	23808 <next_timeout>
			      || (ticks <= next_to);
   2a964:	f1b0 3fff 	cmp.w	r0, #4294967295
   2a968:	d0ed      	beq.n	2a946 <z_set_timeout_expiry+0x1a>
   2a96a:	42b0      	cmp	r0, r6
   2a96c:	dbec      	blt.n	2a948 <z_set_timeout_expiry+0x1c>
   2a96e:	2401      	movs	r4, #1
   2a970:	e7ea      	b.n	2a948 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2a972:	4639      	mov	r1, r7
   2a974:	42b0      	cmp	r0, r6
   2a976:	bfa8      	it	ge
   2a978:	4630      	movge	r0, r6
   2a97a:	f7f5 fb17 	bl	1ffac <sys_clock_set_timeout>
   2a97e:	e7e8      	b.n	2a952 <z_set_timeout_expiry+0x26>
}
   2a980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002a982 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2a982:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2a984:	f7f9 f852 	bl	23a2c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2a988:	bd08      	pop	{r3, pc}

0002a98a <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   2a98a:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   2a98c:	f7f9 f84e 	bl	23a2c <sys_clock_tick_get>
}
   2a990:	bd08      	pop	{r3, pc}

0002a992 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2a992:	b900      	cbnz	r0, 2a996 <z_impl_k_busy_wait+0x4>
   2a994:	4770      	bx	lr
{
   2a996:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2a998:	f7eb fb36 	bl	16008 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2a99c:	bd08      	pop	{r3, pc}

0002a99e <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   2a99e:	b538      	push	{r3, r4, r5, lr}
   2a9a0:	460c      	mov	r4, r1
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2a9a2:	f1b1 3fff 	cmp.w	r1, #4294967295
   2a9a6:	bf08      	it	eq
   2a9a8:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   2a9ac:	d020      	beq.n	2a9f0 <sys_clock_timeout_end_calc+0x52>
   2a9ae:	4605      	mov	r5, r0
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2a9b0:	ea51 0300 	orrs.w	r3, r1, r0
   2a9b4:	d009      	beq.n	2a9ca <sys_clock_timeout_end_calc+0x2c>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2a9b6:	f06f 0301 	mvn.w	r3, #1
   2a9ba:	1a18      	subs	r0, r3, r0
   2a9bc:	f04f 33ff 	mov.w	r3, #4294967295
   2a9c0:	eb63 0101 	sbc.w	r1, r3, r1
   2a9c4:	2900      	cmp	r1, #0
   2a9c6:	db03      	blt.n	2a9d0 <sys_clock_timeout_end_calc+0x32>
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2a9c8:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   2a9ca:	f7f9 f82f 	bl	23a2c <sys_clock_tick_get>
   2a9ce:	e7fb      	b.n	2a9c8 <sys_clock_timeout_end_calc+0x2a>
		return sys_clock_tick_get() + MAX(1, dt);
   2a9d0:	f7f9 f82c 	bl	23a2c <sys_clock_tick_get>
   2a9d4:	4603      	mov	r3, r0
   2a9d6:	462a      	mov	r2, r5
   2a9d8:	46a4      	mov	ip, r4
   2a9da:	2d01      	cmp	r5, #1
   2a9dc:	f174 0400 	sbcs.w	r4, r4, #0
   2a9e0:	da02      	bge.n	2a9e8 <sys_clock_timeout_end_calc+0x4a>
   2a9e2:	2201      	movs	r2, #1
   2a9e4:	f04f 0c00 	mov.w	ip, #0
   2a9e8:	1898      	adds	r0, r3, r2
   2a9ea:	eb41 010c 	adc.w	r1, r1, ip
   2a9ee:	e7eb      	b.n	2a9c8 <sys_clock_timeout_end_calc+0x2a>
		return UINT64_MAX;
   2a9f0:	f04f 30ff 	mov.w	r0, #4294967295
   2a9f4:	4601      	mov	r1, r0
   2a9f6:	e7e7      	b.n	2a9c8 <sys_clock_timeout_end_calc+0x2a>

0002a9f8 <z_reschedule_unlocked>:
{
   2a9f8:	b508      	push	{r3, lr}
	__asm__ volatile(
   2a9fa:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a9fe:	f3ef 8011 	mrs	r0, BASEPRI
   2aa02:	f383 8812 	msr	BASEPRI_MAX, r3
   2aa06:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2aa0a:	f7ff fdd8 	bl	2a5be <z_reschedule_irqlock>
}
   2aa0e:	bd08      	pop	{r3, pc}

0002aa10 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   2aa10:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   2aa12:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   2aa14:	2300      	movs	r3, #0
   2aa16:	6303      	str	r3, [r0, #48]	; 0x30
   2aa18:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   2aa1c:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   2aa1e:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   2aa20:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   2aa22:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   2aa24:	6343      	str	r3, [r0, #52]	; 0x34
}
   2aa26:	4770      	bx	lr

0002aa28 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2aa28:	b510      	push	{r4, lr}
   2aa2a:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   2aa2c:	f7ff ff49 	bl	2a8c2 <z_abort_timeout>

	if (inactive) {
   2aa30:	b960      	cbnz	r0, 2aa4c <z_impl_k_timer_stop+0x24>
		return;
	}

	if (timer->stop_fn != NULL) {
   2aa32:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2aa34:	b10b      	cbz	r3, 2aa3a <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2aa36:	4620      	mov	r0, r4
   2aa38:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2aa3a:	f104 0018 	add.w	r0, r4, #24
   2aa3e:	f7ff fea7 	bl	2a790 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2aa42:	b118      	cbz	r0, 2aa4c <z_impl_k_timer_stop+0x24>
			z_ready_thread(pending_thread);
   2aa44:	f7ff fe0d 	bl	2a662 <z_ready_thread>
			z_reschedule_unlocked();
   2aa48:	f7ff ffd6 	bl	2a9f8 <z_reschedule_unlocked>
		}
	}
}
   2aa4c:	bd10      	pop	{r4, pc}

0002aa4e <is_condition_met>:
	switch (event->type) {
   2aa4e:	7b43      	ldrb	r3, [r0, #13]
   2aa50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2aa54:	3b01      	subs	r3, #1
   2aa56:	2b07      	cmp	r3, #7
   2aa58:	d826      	bhi.n	2aaa8 <is_condition_met+0x5a>
   2aa5a:	e8df f003 	tbb	[pc, r3]
   2aa5e:	0414      	.short	0x0414
   2aa60:	25250d25 	.word	0x25250d25
   2aa64:	1c25      	.short	0x1c25
		if (k_sem_count_get(event->sem) > 0U) {
   2aa66:	6903      	ldr	r3, [r0, #16]
   2aa68:	689b      	ldr	r3, [r3, #8]
   2aa6a:	b90b      	cbnz	r3, 2aa70 <is_condition_met+0x22>
	return false;
   2aa6c:	2000      	movs	r0, #0
   2aa6e:	4770      	bx	lr
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2aa70:	2302      	movs	r3, #2
   2aa72:	600b      	str	r3, [r1, #0]
			return true;
   2aa74:	2001      	movs	r0, #1
   2aa76:	4770      	bx	lr
		if (!k_queue_is_empty(event->queue)) {
   2aa78:	6903      	ldr	r3, [r0, #16]
	return list->head;
   2aa7a:	681b      	ldr	r3, [r3, #0]
   2aa7c:	b1b3      	cbz	r3, 2aaac <is_condition_met+0x5e>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2aa7e:	2304      	movs	r3, #4
   2aa80:	600b      	str	r3, [r1, #0]
			return true;
   2aa82:	2001      	movs	r0, #1
   2aa84:	4770      	bx	lr
		if (event->signal->signaled != 0U) {
   2aa86:	6903      	ldr	r3, [r0, #16]
   2aa88:	689b      	ldr	r3, [r3, #8]
   2aa8a:	b90b      	cbnz	r3, 2aa90 <is_condition_met+0x42>
	return false;
   2aa8c:	2000      	movs	r0, #0
   2aa8e:	4770      	bx	lr
			*state = K_POLL_STATE_SIGNALED;
   2aa90:	2001      	movs	r0, #1
   2aa92:	6008      	str	r0, [r1, #0]
			return true;
   2aa94:	4770      	bx	lr
		if (event->msgq->used_msgs > 0) {
   2aa96:	6903      	ldr	r3, [r0, #16]
   2aa98:	6a1b      	ldr	r3, [r3, #32]
   2aa9a:	b90b      	cbnz	r3, 2aaa0 <is_condition_met+0x52>
	return false;
   2aa9c:	2000      	movs	r0, #0
}
   2aa9e:	4770      	bx	lr
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2aaa0:	2310      	movs	r3, #16
   2aaa2:	600b      	str	r3, [r1, #0]
			return true;
   2aaa4:	2001      	movs	r0, #1
   2aaa6:	4770      	bx	lr
	switch (event->type) {
   2aaa8:	2000      	movs	r0, #0
   2aaaa:	4770      	bx	lr
	return false;
   2aaac:	2000      	movs	r0, #0
   2aaae:	4770      	bx	lr

0002aab0 <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2aab0:	b108      	cbz	r0, 2aab6 <poller_thread+0x6>
   2aab2:	3860      	subs	r0, #96	; 0x60
   2aab4:	4770      	bx	lr
}
   2aab6:	4770      	bx	lr

0002aab8 <clear_event_registration>:
	event->poller = NULL;
   2aab8:	2300      	movs	r3, #0
   2aaba:	6083      	str	r3, [r0, #8]
	switch (event->type) {
   2aabc:	7b43      	ldrb	r3, [r0, #13]
   2aabe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2aac2:	2b08      	cmp	r3, #8
   2aac4:	d80e      	bhi.n	2aae4 <clear_event_registration+0x2c>
   2aac6:	f44f 728b 	mov.w	r2, #278	; 0x116
   2aaca:	fa22 f303 	lsr.w	r3, r2, r3
   2aace:	f013 0f01 	tst.w	r3, #1
   2aad2:	d007      	beq.n	2aae4 <clear_event_registration+0x2c>
	return node->next != NULL;
   2aad4:	6803      	ldr	r3, [r0, #0]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2aad6:	b12b      	cbz	r3, 2aae4 <clear_event_registration+0x2c>
	sys_dnode_t *const prev = node->prev;
   2aad8:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   2aada:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2aadc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2aade:	2300      	movs	r3, #0
   2aae0:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   2aae2:	6043      	str	r3, [r0, #4]
}
   2aae4:	4770      	bx	lr

0002aae6 <clear_event_registrations>:
{
   2aae6:	b570      	push	{r4, r5, r6, lr}
   2aae8:	4606      	mov	r6, r0
   2aaea:	4614      	mov	r4, r2
	while (num_events--) {
   2aaec:	e012      	b.n	2ab14 <clear_event_registrations+0x2e>
		clear_event_registration(&events[num_events]);
   2aaee:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   2aaf2:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   2aaf6:	f7ff ffdf 	bl	2aab8 <clear_event_registration>
	__asm__ volatile(
   2aafa:	f384 8811 	msr	BASEPRI, r4
   2aafe:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2ab02:	f04f 0340 	mov.w	r3, #64	; 0x40
   2ab06:	f3ef 8411 	mrs	r4, BASEPRI
   2ab0a:	f383 8812 	msr	BASEPRI_MAX, r3
   2ab0e:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   2ab12:	4629      	mov	r1, r5
   2ab14:	1e4d      	subs	r5, r1, #1
   2ab16:	2900      	cmp	r1, #0
   2ab18:	d1e9      	bne.n	2aaee <clear_event_registrations+0x8>
}
   2ab1a:	bd70      	pop	{r4, r5, r6, pc}

0002ab1c <add_event>:
{
   2ab1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ab20:	4605      	mov	r5, r0
   2ab22:	460e      	mov	r6, r1
	return list->head == list;
   2ab24:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2ab26:	4298      	cmp	r0, r3
   2ab28:	d015      	beq.n	2ab56 <add_event+0x3a>
   2ab2a:	4614      	mov	r4, r2
   2ab2c:	6843      	ldr	r3, [r0, #4]
	if ((pending == NULL) ||
   2ab2e:	b193      	cbz	r3, 2ab56 <add_event+0x3a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2ab30:	6898      	ldr	r0, [r3, #8]
   2ab32:	f7ff ffbd 	bl	2aab0 <poller_thread>
   2ab36:	4680      	mov	r8, r0
   2ab38:	4620      	mov	r0, r4
   2ab3a:	f7ff ffb9 	bl	2aab0 <poller_thread>
   2ab3e:	4607      	mov	r7, r0
   2ab40:	4601      	mov	r1, r0
   2ab42:	4640      	mov	r0, r8
   2ab44:	f7ff fd1a 	bl	2a57c <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2ab48:	2800      	cmp	r0, #0
   2ab4a:	dc04      	bgt.n	2ab56 <add_event+0x3a>
	return list->head == list;
   2ab4c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ab4e:	42a5      	cmp	r5, r4
   2ab50:	d10f      	bne.n	2ab72 <add_event+0x56>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2ab52:	2400      	movs	r4, #0
   2ab54:	e00d      	b.n	2ab72 <add_event+0x56>
	sys_dnode_t *const tail = list->tail;
   2ab56:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   2ab58:	6035      	str	r5, [r6, #0]
	node->prev = tail;
   2ab5a:	6073      	str	r3, [r6, #4]
	tail->next = node;
   2ab5c:	601e      	str	r6, [r3, #0]
	list->tail = node;
   2ab5e:	606e      	str	r6, [r5, #4]
}
   2ab60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	sys_dnode_t *const prev = successor->prev;
   2ab64:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   2ab66:	6073      	str	r3, [r6, #4]
	node->next = successor;
   2ab68:	6034      	str	r4, [r6, #0]
	prev->next = node;
   2ab6a:	601e      	str	r6, [r3, #0]
	successor->prev = node;
   2ab6c:	6066      	str	r6, [r4, #4]
			return;
   2ab6e:	e7f7      	b.n	2ab60 <add_event+0x44>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2ab70:	2400      	movs	r4, #0
   2ab72:	b19c      	cbz	r4, 2ab9c <add_event+0x80>
		if (z_sched_prio_cmp(poller_thread(poller),
   2ab74:	68a0      	ldr	r0, [r4, #8]
   2ab76:	f7ff ff9b 	bl	2aab0 <poller_thread>
   2ab7a:	4601      	mov	r1, r0
   2ab7c:	4638      	mov	r0, r7
   2ab7e:	f7ff fcfd 	bl	2a57c <z_sched_prio_cmp>
   2ab82:	2800      	cmp	r0, #0
   2ab84:	dcee      	bgt.n	2ab64 <add_event+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2ab86:	4622      	mov	r2, r4
	return (node == list->tail) ? NULL : node->next;
   2ab88:	686b      	ldr	r3, [r5, #4]
   2ab8a:	429c      	cmp	r4, r3
   2ab8c:	d0f0      	beq.n	2ab70 <add_event+0x54>
   2ab8e:	6824      	ldr	r4, [r4, #0]
   2ab90:	2c00      	cmp	r4, #0
   2ab92:	d0ee      	beq.n	2ab72 <add_event+0x56>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2ab94:	2a00      	cmp	r2, #0
   2ab96:	d1ec      	bne.n	2ab72 <add_event+0x56>
   2ab98:	4614      	mov	r4, r2
   2ab9a:	e7ea      	b.n	2ab72 <add_event+0x56>
	sys_dnode_t *const tail = list->tail;
   2ab9c:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   2ab9e:	6035      	str	r5, [r6, #0]
	node->prev = tail;
   2aba0:	6073      	str	r3, [r6, #4]
	tail->next = node;
   2aba2:	601e      	str	r6, [r3, #0]
	list->tail = node;
   2aba4:	606e      	str	r6, [r5, #4]
}
   2aba6:	e7db      	b.n	2ab60 <add_event+0x44>

0002aba8 <register_event>:
{
   2aba8:	b538      	push	{r3, r4, r5, lr}
   2abaa:	4604      	mov	r4, r0
   2abac:	460d      	mov	r5, r1
	switch (event->type) {
   2abae:	7b43      	ldrb	r3, [r0, #13]
   2abb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2abb4:	3b01      	subs	r3, #1
   2abb6:	2b07      	cmp	r3, #7
   2abb8:	d80b      	bhi.n	2abd2 <register_event+0x2a>
   2abba:	e8df f003 	tbb	[pc, r3]
   2abbe:	0413      	.short	0x0413
   2abc0:	0a0a0c0a 	.word	0x0a0a0c0a
   2abc4:	190a      	.short	0x190a
		add_event(&event->sem->poll_events, event, poller);
   2abc6:	6900      	ldr	r0, [r0, #16]
   2abc8:	460a      	mov	r2, r1
   2abca:	4621      	mov	r1, r4
   2abcc:	3010      	adds	r0, #16
   2abce:	f7ff ffa5 	bl	2ab1c <add_event>
	event->poller = poller;
   2abd2:	60a5      	str	r5, [r4, #8]
}
   2abd4:	bd38      	pop	{r3, r4, r5, pc}
		add_event(&event->queue->poll_events, event, poller);
   2abd6:	6900      	ldr	r0, [r0, #16]
   2abd8:	460a      	mov	r2, r1
   2abda:	4621      	mov	r1, r4
   2abdc:	3010      	adds	r0, #16
   2abde:	f7ff ff9d 	bl	2ab1c <add_event>
		break;
   2abe2:	e7f6      	b.n	2abd2 <register_event+0x2a>
		add_event(&event->signal->poll_events, event, poller);
   2abe4:	460a      	mov	r2, r1
   2abe6:	4601      	mov	r1, r0
   2abe8:	6900      	ldr	r0, [r0, #16]
   2abea:	f7ff ff97 	bl	2ab1c <add_event>
		break;
   2abee:	e7f0      	b.n	2abd2 <register_event+0x2a>
		add_event(&event->msgq->poll_events, event, poller);
   2abf0:	6900      	ldr	r0, [r0, #16]
   2abf2:	460a      	mov	r2, r1
   2abf4:	4621      	mov	r1, r4
   2abf6:	3024      	adds	r0, #36	; 0x24
   2abf8:	f7ff ff90 	bl	2ab1c <add_event>
		break;
   2abfc:	e7e9      	b.n	2abd2 <register_event+0x2a>

0002abfe <register_events>:
{
   2abfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ac02:	b083      	sub	sp, #12
   2ac04:	4680      	mov	r8, r0
   2ac06:	460f      	mov	r7, r1
   2ac08:	4691      	mov	r9, r2
   2ac0a:	469a      	mov	sl, r3
	for (int ii = 0; ii < num_events; ii++) {
   2ac0c:	2500      	movs	r5, #0
	int events_registered = 0;
   2ac0e:	46ab      	mov	fp, r5
	for (int ii = 0; ii < num_events; ii++) {
   2ac10:	e00a      	b.n	2ac28 <register_events+0x2a>
		} else if (!just_check && poller->is_polling) {
   2ac12:	f1ba 0f00 	cmp.w	sl, #0
   2ac16:	d102      	bne.n	2ac1e <register_events+0x20>
   2ac18:	f899 3000 	ldrb.w	r3, [r9]
   2ac1c:	bb2b      	cbnz	r3, 2ac6a <register_events+0x6c>
	__asm__ volatile(
   2ac1e:	f386 8811 	msr	BASEPRI, r6
   2ac22:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2ac26:	3501      	adds	r5, #1
   2ac28:	42bd      	cmp	r5, r7
   2ac2a:	da25      	bge.n	2ac78 <register_events+0x7a>
	__asm__ volatile(
   2ac2c:	f04f 0340 	mov.w	r3, #64	; 0x40
   2ac30:	f3ef 8611 	mrs	r6, BASEPRI
   2ac34:	f383 8812 	msr	BASEPRI_MAX, r3
   2ac38:	f3bf 8f6f 	isb	sy
		if (is_condition_met(&events[ii], &state)) {
   2ac3c:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   2ac40:	eb08 0484 	add.w	r4, r8, r4, lsl #2
   2ac44:	a901      	add	r1, sp, #4
   2ac46:	4620      	mov	r0, r4
   2ac48:	f7ff ff01 	bl	2aa4e <is_condition_met>
   2ac4c:	2800      	cmp	r0, #0
   2ac4e:	d0e0      	beq.n	2ac12 <register_events+0x14>
	event->poller = NULL;
   2ac50:	2100      	movs	r1, #0
   2ac52:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   2ac54:	68e3      	ldr	r3, [r4, #12]
   2ac56:	f3c3 3286 	ubfx	r2, r3, #14, #7
   2ac5a:	9801      	ldr	r0, [sp, #4]
   2ac5c:	4302      	orrs	r2, r0
   2ac5e:	f362 3394 	bfi	r3, r2, #14, #7
   2ac62:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   2ac64:	f889 1000 	strb.w	r1, [r9]
   2ac68:	e7d9      	b.n	2ac1e <register_events+0x20>
			register_event(&events[ii], poller);
   2ac6a:	4649      	mov	r1, r9
   2ac6c:	4620      	mov	r0, r4
   2ac6e:	f7ff ff9b 	bl	2aba8 <register_event>
			events_registered += 1;
   2ac72:	f10b 0b01 	add.w	fp, fp, #1
   2ac76:	e7d2      	b.n	2ac1e <register_events+0x20>
}
   2ac78:	4658      	mov	r0, fp
   2ac7a:	b003      	add	sp, #12
   2ac7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002ac80 <signal_poller>:
{
   2ac80:	b538      	push	{r3, r4, r5, lr}
   2ac82:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   2ac84:	6880      	ldr	r0, [r0, #8]
   2ac86:	f7ff ff13 	bl	2aab0 <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   2ac8a:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
   2ac8c:	f013 0f02 	tst.w	r3, #2
   2ac90:	d025      	beq.n	2acde <signal_poller+0x5e>
   2ac92:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
   2ac94:	6a82      	ldr	r2, [r0, #40]	; 0x28
   2ac96:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (z_is_thread_timeout_expired(thread)) {
   2ac98:	f1b3 3fff 	cmp.w	r3, #4294967295
   2ac9c:	bf08      	it	eq
   2ac9e:	f112 0f02 	cmneq.w	r2, #2
   2aca2:	d01e      	beq.n	2ace2 <signal_poller+0x62>
	z_unpend_thread(thread);
   2aca4:	f7ff fcbb 	bl	2a61e <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2aca8:	2d08      	cmp	r5, #8
   2acaa:	d00a      	beq.n	2acc2 <signal_poller+0x42>
   2acac:	2300      	movs	r3, #0
   2acae:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   2acb2:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2acb4:	f013 0f1f 	tst.w	r3, #31
   2acb8:	d108      	bne.n	2accc <signal_poller+0x4c>
	return node->next != NULL;
   2acba:	69a3      	ldr	r3, [r4, #24]
   2acbc:	b123      	cbz	r3, 2acc8 <signal_poller+0x48>
   2acbe:	2300      	movs	r3, #0
   2acc0:	e005      	b.n	2acce <signal_poller+0x4e>
   2acc2:	f06f 0303 	mvn.w	r3, #3
   2acc6:	e7f2      	b.n	2acae <signal_poller+0x2e>
   2acc8:	2301      	movs	r3, #1
   2acca:	e000      	b.n	2acce <signal_poller+0x4e>
   2accc:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
   2acce:	b90b      	cbnz	r3, 2acd4 <signal_poller+0x54>
		return 0;
   2acd0:	2000      	movs	r0, #0
   2acd2:	e005      	b.n	2ace0 <signal_poller+0x60>
	z_ready_thread(thread);
   2acd4:	4620      	mov	r0, r4
   2acd6:	f7ff fcc4 	bl	2a662 <z_ready_thread>
	return 0;
   2acda:	2000      	movs	r0, #0
   2acdc:	e000      	b.n	2ace0 <signal_poller+0x60>
		return 0;
   2acde:	2000      	movs	r0, #0
}
   2ace0:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   2ace2:	f06f 000a 	mvn.w	r0, #10
   2ace6:	e7fb      	b.n	2ace0 <signal_poller+0x60>

0002ace8 <signal_triggered_work>:

extern int z_work_submit_to_queue(struct k_work_q *queue,
			 struct k_work *work);

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   2ace8:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   2acea:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2acec:	7823      	ldrb	r3, [r4, #0]
   2acee:	b173      	cbz	r3, 2ad0e <signal_triggered_work+0x26>
   2acf0:	f854 5c04 	ldr.w	r5, [r4, #-4]
   2acf4:	b15d      	cbz	r5, 2ad0e <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   2acf6:	f1a4 0614 	sub.w	r6, r4, #20
   2acfa:	f104 0014 	add.w	r0, r4, #20
   2acfe:	f7ff fde0 	bl	2a8c2 <z_abort_timeout>
		twork->poll_result = 0;
   2ad02:	2300      	movs	r3, #0
   2ad04:	62e3      	str	r3, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   2ad06:	4631      	mov	r1, r6
   2ad08:	4628      	mov	r0, r5
   2ad0a:	f7ff fb80 	bl	2a40e <z_work_submit_to_queue>
	}

	return 0;
}
   2ad0e:	2000      	movs	r0, #0
   2ad10:	bd70      	pop	{r4, r5, r6, pc}

0002ad12 <signal_poll_event>:
{
   2ad12:	b570      	push	{r4, r5, r6, lr}
   2ad14:	4604      	mov	r4, r0
   2ad16:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   2ad18:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   2ad1a:	b1d6      	cbz	r6, 2ad52 <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   2ad1c:	7873      	ldrb	r3, [r6, #1]
   2ad1e:	2b01      	cmp	r3, #1
   2ad20:	d00d      	beq.n	2ad3e <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   2ad22:	2b02      	cmp	r3, #2
   2ad24:	d012      	beq.n	2ad4c <signal_poll_event+0x3a>
		poller->is_polling = false;
   2ad26:	2000      	movs	r0, #0
   2ad28:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   2ad2a:	2300      	movs	r3, #0
   2ad2c:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   2ad2e:	68e3      	ldr	r3, [r4, #12]
   2ad30:	f3c3 3286 	ubfx	r2, r3, #14, #7
   2ad34:	432a      	orrs	r2, r5
   2ad36:	f362 3394 	bfi	r3, r2, #14, #7
   2ad3a:	60e3      	str	r3, [r4, #12]
}
   2ad3c:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   2ad3e:	f7ff ff9f 	bl	2ac80 <signal_poller>
		poller->is_polling = false;
   2ad42:	2300      	movs	r3, #0
   2ad44:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   2ad46:	4298      	cmp	r0, r3
   2ad48:	daef      	bge.n	2ad2a <signal_poll_event+0x18>
   2ad4a:	e7f7      	b.n	2ad3c <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   2ad4c:	f7ff ffcc 	bl	2ace8 <signal_triggered_work>
   2ad50:	e7f7      	b.n	2ad42 <signal_poll_event+0x30>
	int retcode = 0;
   2ad52:	2000      	movs	r0, #0
   2ad54:	e7e9      	b.n	2ad2a <signal_poll_event+0x18>

0002ad56 <k_poll_event_init>:
{
   2ad56:	b410      	push	{r4}
	event->poller = NULL;
   2ad58:	2400      	movs	r4, #0
   2ad5a:	6084      	str	r4, [r0, #8]
	event->type = type;
   2ad5c:	f890 c00d 	ldrb.w	ip, [r0, #13]
   2ad60:	f361 0c05 	bfi	ip, r1, #0, #6
   2ad64:	f880 c00d 	strb.w	ip, [r0, #13]
	event->state = K_POLL_STATE_NOT_READY;
   2ad68:	68c1      	ldr	r1, [r0, #12]
   2ad6a:	f364 3194 	bfi	r1, r4, #14, #7
   2ad6e:	60c1      	str	r1, [r0, #12]
	event->mode = mode;
   2ad70:	7b81      	ldrb	r1, [r0, #14]
   2ad72:	f362 1145 	bfi	r1, r2, #5, #1
   2ad76:	7381      	strb	r1, [r0, #14]
	event->unused = 0U;
   2ad78:	89c2      	ldrh	r2, [r0, #14]
   2ad7a:	f364 128f 	bfi	r2, r4, #6, #10
   2ad7e:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   2ad80:	6103      	str	r3, [r0, #16]
}
   2ad82:	bc10      	pop	{r4}
   2ad84:	4770      	bx	lr

0002ad86 <z_handle_obj_poll_events>:
{
   2ad86:	b508      	push	{r3, lr}
   2ad88:	4603      	mov	r3, r0
	return list->head == list;
   2ad8a:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2ad8c:	4283      	cmp	r3, r0
   2ad8e:	d008      	beq.n	2ada2 <z_handle_obj_poll_events+0x1c>
	sys_dnode_t *const prev = node->prev;
   2ad90:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   2ad92:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   2ad94:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2ad96:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2ad98:	2300      	movs	r3, #0
   2ad9a:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   2ad9c:	6043      	str	r3, [r0, #4]
		(void) signal_poll_event(poll_event, state);
   2ad9e:	f7ff ffb8 	bl	2ad12 <signal_poll_event>
}
   2ada2:	bd08      	pop	{r3, pc}

0002ada4 <z_impl_k_poll_signal_init>:
	list->head = (sys_dnode_t *)list;
   2ada4:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   2ada6:	6040      	str	r0, [r0, #4]
	sig->signaled = 0U;
   2ada8:	2300      	movs	r3, #0
   2adaa:	6083      	str	r3, [r0, #8]
}
   2adac:	4770      	bx	lr

0002adae <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   2adae:	2300      	movs	r3, #0
   2adb0:	6083      	str	r3, [r0, #8]
}
   2adb2:	4770      	bx	lr

0002adb4 <z_heap_aligned_alloc>:
{
   2adb4:	b5d0      	push	{r4, r6, r7, lr}
   2adb6:	b082      	sub	sp, #8
   2adb8:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   2adba:	2300      	movs	r3, #0
   2adbc:	3204      	adds	r2, #4
   2adbe:	d20e      	bcs.n	2adde <z_heap_aligned_alloc+0x2a>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   2adc0:	b97b      	cbnz	r3, 2ade2 <z_heap_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   2adc2:	2600      	movs	r6, #0
   2adc4:	2700      	movs	r7, #0
   2adc6:	e9cd 6700 	strd	r6, r7, [sp]
   2adca:	f041 0104 	orr.w	r1, r1, #4
   2adce:	4620      	mov	r0, r4
   2add0:	f7ff f851 	bl	29e76 <k_heap_aligned_alloc>
	if (mem == NULL) {
   2add4:	b108      	cbz	r0, 2adda <z_heap_aligned_alloc+0x26>
	*heap_ref = heap;
   2add6:	f840 4b04 	str.w	r4, [r0], #4
}
   2adda:	b002      	add	sp, #8
   2addc:	bdd0      	pop	{r4, r6, r7, pc}
   2adde:	2301      	movs	r3, #1
   2ade0:	e7ee      	b.n	2adc0 <z_heap_aligned_alloc+0xc>
		return NULL;
   2ade2:	2000      	movs	r0, #0
   2ade4:	e7f9      	b.n	2adda <z_heap_aligned_alloc+0x26>

0002ade6 <k_free>:
	if (ptr != NULL) {
   2ade6:	b130      	cbz	r0, 2adf6 <k_free+0x10>
{
   2ade8:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   2adea:	1f01      	subs	r1, r0, #4
   2adec:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2adf0:	f7ff f897 	bl	29f22 <k_heap_free>
}
   2adf4:	bd08      	pop	{r3, pc}
   2adf6:	4770      	bx	lr

0002adf8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2adf8:	4770      	bx	lr
	...
